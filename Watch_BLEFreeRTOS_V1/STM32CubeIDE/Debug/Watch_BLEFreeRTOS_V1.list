
Watch_BLEFreeRTOS_V1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000159f0  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001fc8  08015b30  08015b30  00025b30  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08017af8  08017af8  00027af8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08017b00  08017b00  00027b00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08017b04  08017b04  00027b04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000001f0  20000004  08017b08  00030004  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 BLE_APP_CONTEXT 000000a0  200001f8  08017cf8  000301f8  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  8 TIMERSERVER_CONTEXT 00000099  20000298  08017d98  00030298  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 BLE_DRIVER_CONTEXT 0000003e  20000334  08017e31  00030334  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 SYSTEM_DRIVER_CONTEXT 00000011  20000374  08017e6f  00030374  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00005144  20000388  08017e80  00030388  2**2
                  ALLOC
 12 ._user_heap_stack 00001404  200054cc  08017e80  000354cc  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  00030385  2**0
                  CONTENTS, READONLY
 14 MAPPING_TABLE 00000028  20030000  20030000  00040000  2**2
                  ALLOC
 15 MB_MEM1       000001b8  20030028  20030028  00040000  2**2
                  ALLOC
 16 MB_MEM2       00000877  200301e0  200301e0  00040000  2**2
                  ALLOC
 17 .debug_info   0005452c  00000000  00000000  000303b5  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_abbrev 00008f5a  00000000  00000000  000848e1  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_aranges 00003a70  00000000  00000000  0008d840  2**3
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_ranges 000036a0  00000000  00000000  000912b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_macro  000331ba  00000000  00000000  00094950  2**0
                  CONTENTS, READONLY, DEBUGGING
 22 .debug_line   00036956  00000000  00000000  000c7b0a  2**0
                  CONTENTS, READONLY, DEBUGGING
 23 .debug_str    00112595  00000000  00000000  000fe460  2**0
                  CONTENTS, READONLY, DEBUGGING
 24 .comment      0000007b  00000000  00000000  002109f5  2**0
                  CONTENTS, READONLY
 25 .debug_frame  0001051c  00000000  00000000  00210a70  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000388 	.word	0x20000388
 800015c:	00000000 	.word	0x00000000
 8000160:	08015b18 	.word	0x08015b18

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	2000038c 	.word	0x2000038c
 800017c:	08015b18 	.word	0x08015b18

08000180 <strlen>:
 8000180:	4603      	mov	r3, r0
 8000182:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000186:	2a00      	cmp	r2, #0
 8000188:	d1fb      	bne.n	8000182 <strlen+0x2>
 800018a:	1a18      	subs	r0, r3, r0
 800018c:	3801      	subs	r0, #1
 800018e:	4770      	bx	lr

08000190 <memchr>:
 8000190:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000194:	2a10      	cmp	r2, #16
 8000196:	db2b      	blt.n	80001f0 <memchr+0x60>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	d008      	beq.n	80001b0 <memchr+0x20>
 800019e:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001a2:	3a01      	subs	r2, #1
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d02d      	beq.n	8000204 <memchr+0x74>
 80001a8:	f010 0f07 	tst.w	r0, #7
 80001ac:	b342      	cbz	r2, 8000200 <memchr+0x70>
 80001ae:	d1f6      	bne.n	800019e <memchr+0xe>
 80001b0:	b4f0      	push	{r4, r5, r6, r7}
 80001b2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001b6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001ba:	f022 0407 	bic.w	r4, r2, #7
 80001be:	f07f 0700 	mvns.w	r7, #0
 80001c2:	2300      	movs	r3, #0
 80001c4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001c8:	3c08      	subs	r4, #8
 80001ca:	ea85 0501 	eor.w	r5, r5, r1
 80001ce:	ea86 0601 	eor.w	r6, r6, r1
 80001d2:	fa85 f547 	uadd8	r5, r5, r7
 80001d6:	faa3 f587 	sel	r5, r3, r7
 80001da:	fa86 f647 	uadd8	r6, r6, r7
 80001de:	faa5 f687 	sel	r6, r5, r7
 80001e2:	b98e      	cbnz	r6, 8000208 <memchr+0x78>
 80001e4:	d1ee      	bne.n	80001c4 <memchr+0x34>
 80001e6:	bcf0      	pop	{r4, r5, r6, r7}
 80001e8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001ec:	f002 0207 	and.w	r2, r2, #7
 80001f0:	b132      	cbz	r2, 8000200 <memchr+0x70>
 80001f2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f6:	3a01      	subs	r2, #1
 80001f8:	ea83 0301 	eor.w	r3, r3, r1
 80001fc:	b113      	cbz	r3, 8000204 <memchr+0x74>
 80001fe:	d1f8      	bne.n	80001f2 <memchr+0x62>
 8000200:	2000      	movs	r0, #0
 8000202:	4770      	bx	lr
 8000204:	3801      	subs	r0, #1
 8000206:	4770      	bx	lr
 8000208:	2d00      	cmp	r5, #0
 800020a:	bf06      	itte	eq
 800020c:	4635      	moveq	r5, r6
 800020e:	3803      	subeq	r0, #3
 8000210:	3807      	subne	r0, #7
 8000212:	f015 0f01 	tst.w	r5, #1
 8000216:	d107      	bne.n	8000228 <memchr+0x98>
 8000218:	3001      	adds	r0, #1
 800021a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800021e:	bf02      	ittt	eq
 8000220:	3001      	addeq	r0, #1
 8000222:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000226:	3001      	addeq	r0, #1
 8000228:	bcf0      	pop	{r4, r5, r6, r7}
 800022a:	3801      	subs	r0, #1
 800022c:	4770      	bx	lr
 800022e:	bf00      	nop

08000230 <__aeabi_drsub>:
 8000230:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000234:	e002      	b.n	800023c <__adddf3>
 8000236:	bf00      	nop

08000238 <__aeabi_dsub>:
 8000238:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800023c <__adddf3>:
 800023c:	b530      	push	{r4, r5, lr}
 800023e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000242:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000246:	ea94 0f05 	teq	r4, r5
 800024a:	bf08      	it	eq
 800024c:	ea90 0f02 	teqeq	r0, r2
 8000250:	bf1f      	itttt	ne
 8000252:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000256:	ea55 0c02 	orrsne.w	ip, r5, r2
 800025a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800025e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000262:	f000 80e2 	beq.w	800042a <__adddf3+0x1ee>
 8000266:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800026a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800026e:	bfb8      	it	lt
 8000270:	426d      	neglt	r5, r5
 8000272:	dd0c      	ble.n	800028e <__adddf3+0x52>
 8000274:	442c      	add	r4, r5
 8000276:	ea80 0202 	eor.w	r2, r0, r2
 800027a:	ea81 0303 	eor.w	r3, r1, r3
 800027e:	ea82 0000 	eor.w	r0, r2, r0
 8000282:	ea83 0101 	eor.w	r1, r3, r1
 8000286:	ea80 0202 	eor.w	r2, r0, r2
 800028a:	ea81 0303 	eor.w	r3, r1, r3
 800028e:	2d36      	cmp	r5, #54	; 0x36
 8000290:	bf88      	it	hi
 8000292:	bd30      	pophi	{r4, r5, pc}
 8000294:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000298:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800029c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002a0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002a4:	d002      	beq.n	80002ac <__adddf3+0x70>
 80002a6:	4240      	negs	r0, r0
 80002a8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ac:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002b4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002b8:	d002      	beq.n	80002c0 <__adddf3+0x84>
 80002ba:	4252      	negs	r2, r2
 80002bc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c0:	ea94 0f05 	teq	r4, r5
 80002c4:	f000 80a7 	beq.w	8000416 <__adddf3+0x1da>
 80002c8:	f1a4 0401 	sub.w	r4, r4, #1
 80002cc:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d0:	db0d      	blt.n	80002ee <__adddf3+0xb2>
 80002d2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002d6:	fa22 f205 	lsr.w	r2, r2, r5
 80002da:	1880      	adds	r0, r0, r2
 80002dc:	f141 0100 	adc.w	r1, r1, #0
 80002e0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002e4:	1880      	adds	r0, r0, r2
 80002e6:	fa43 f305 	asr.w	r3, r3, r5
 80002ea:	4159      	adcs	r1, r3
 80002ec:	e00e      	b.n	800030c <__adddf3+0xd0>
 80002ee:	f1a5 0520 	sub.w	r5, r5, #32
 80002f2:	f10e 0e20 	add.w	lr, lr, #32
 80002f6:	2a01      	cmp	r2, #1
 80002f8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002fc:	bf28      	it	cs
 80002fe:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000302:	fa43 f305 	asr.w	r3, r3, r5
 8000306:	18c0      	adds	r0, r0, r3
 8000308:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800030c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000310:	d507      	bpl.n	8000322 <__adddf3+0xe6>
 8000312:	f04f 0e00 	mov.w	lr, #0
 8000316:	f1dc 0c00 	rsbs	ip, ip, #0
 800031a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800031e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000322:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000326:	d31b      	bcc.n	8000360 <__adddf3+0x124>
 8000328:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800032c:	d30c      	bcc.n	8000348 <__adddf3+0x10c>
 800032e:	0849      	lsrs	r1, r1, #1
 8000330:	ea5f 0030 	movs.w	r0, r0, rrx
 8000334:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000338:	f104 0401 	add.w	r4, r4, #1
 800033c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000340:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000344:	f080 809a 	bcs.w	800047c <__adddf3+0x240>
 8000348:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800034c:	bf08      	it	eq
 800034e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000352:	f150 0000 	adcs.w	r0, r0, #0
 8000356:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800035a:	ea41 0105 	orr.w	r1, r1, r5
 800035e:	bd30      	pop	{r4, r5, pc}
 8000360:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000364:	4140      	adcs	r0, r0
 8000366:	eb41 0101 	adc.w	r1, r1, r1
 800036a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800036e:	f1a4 0401 	sub.w	r4, r4, #1
 8000372:	d1e9      	bne.n	8000348 <__adddf3+0x10c>
 8000374:	f091 0f00 	teq	r1, #0
 8000378:	bf04      	itt	eq
 800037a:	4601      	moveq	r1, r0
 800037c:	2000      	moveq	r0, #0
 800037e:	fab1 f381 	clz	r3, r1
 8000382:	bf08      	it	eq
 8000384:	3320      	addeq	r3, #32
 8000386:	f1a3 030b 	sub.w	r3, r3, #11
 800038a:	f1b3 0220 	subs.w	r2, r3, #32
 800038e:	da0c      	bge.n	80003aa <__adddf3+0x16e>
 8000390:	320c      	adds	r2, #12
 8000392:	dd08      	ble.n	80003a6 <__adddf3+0x16a>
 8000394:	f102 0c14 	add.w	ip, r2, #20
 8000398:	f1c2 020c 	rsb	r2, r2, #12
 800039c:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a0:	fa21 f102 	lsr.w	r1, r1, r2
 80003a4:	e00c      	b.n	80003c0 <__adddf3+0x184>
 80003a6:	f102 0214 	add.w	r2, r2, #20
 80003aa:	bfd8      	it	le
 80003ac:	f1c2 0c20 	rsble	ip, r2, #32
 80003b0:	fa01 f102 	lsl.w	r1, r1, r2
 80003b4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003b8:	bfdc      	itt	le
 80003ba:	ea41 010c 	orrle.w	r1, r1, ip
 80003be:	4090      	lslle	r0, r2
 80003c0:	1ae4      	subs	r4, r4, r3
 80003c2:	bfa2      	ittt	ge
 80003c4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003c8:	4329      	orrge	r1, r5
 80003ca:	bd30      	popge	{r4, r5, pc}
 80003cc:	ea6f 0404 	mvn.w	r4, r4
 80003d0:	3c1f      	subs	r4, #31
 80003d2:	da1c      	bge.n	800040e <__adddf3+0x1d2>
 80003d4:	340c      	adds	r4, #12
 80003d6:	dc0e      	bgt.n	80003f6 <__adddf3+0x1ba>
 80003d8:	f104 0414 	add.w	r4, r4, #20
 80003dc:	f1c4 0220 	rsb	r2, r4, #32
 80003e0:	fa20 f004 	lsr.w	r0, r0, r4
 80003e4:	fa01 f302 	lsl.w	r3, r1, r2
 80003e8:	ea40 0003 	orr.w	r0, r0, r3
 80003ec:	fa21 f304 	lsr.w	r3, r1, r4
 80003f0:	ea45 0103 	orr.w	r1, r5, r3
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	f1c4 040c 	rsb	r4, r4, #12
 80003fa:	f1c4 0220 	rsb	r2, r4, #32
 80003fe:	fa20 f002 	lsr.w	r0, r0, r2
 8000402:	fa01 f304 	lsl.w	r3, r1, r4
 8000406:	ea40 0003 	orr.w	r0, r0, r3
 800040a:	4629      	mov	r1, r5
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	fa21 f004 	lsr.w	r0, r1, r4
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	f094 0f00 	teq	r4, #0
 800041a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800041e:	bf06      	itte	eq
 8000420:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000424:	3401      	addeq	r4, #1
 8000426:	3d01      	subne	r5, #1
 8000428:	e74e      	b.n	80002c8 <__adddf3+0x8c>
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf18      	it	ne
 8000430:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000434:	d029      	beq.n	800048a <__adddf3+0x24e>
 8000436:	ea94 0f05 	teq	r4, r5
 800043a:	bf08      	it	eq
 800043c:	ea90 0f02 	teqeq	r0, r2
 8000440:	d005      	beq.n	800044e <__adddf3+0x212>
 8000442:	ea54 0c00 	orrs.w	ip, r4, r0
 8000446:	bf04      	itt	eq
 8000448:	4619      	moveq	r1, r3
 800044a:	4610      	moveq	r0, r2
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	ea91 0f03 	teq	r1, r3
 8000452:	bf1e      	ittt	ne
 8000454:	2100      	movne	r1, #0
 8000456:	2000      	movne	r0, #0
 8000458:	bd30      	popne	{r4, r5, pc}
 800045a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800045e:	d105      	bne.n	800046c <__adddf3+0x230>
 8000460:	0040      	lsls	r0, r0, #1
 8000462:	4149      	adcs	r1, r1
 8000464:	bf28      	it	cs
 8000466:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800046a:	bd30      	pop	{r4, r5, pc}
 800046c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000470:	bf3c      	itt	cc
 8000472:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000476:	bd30      	popcc	{r4, r5, pc}
 8000478:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800047c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000480:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000484:	f04f 0000 	mov.w	r0, #0
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf1a      	itte	ne
 8000490:	4619      	movne	r1, r3
 8000492:	4610      	movne	r0, r2
 8000494:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000498:	bf1c      	itt	ne
 800049a:	460b      	movne	r3, r1
 800049c:	4602      	movne	r2, r0
 800049e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004a2:	bf06      	itte	eq
 80004a4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004a8:	ea91 0f03 	teqeq	r1, r3
 80004ac:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004b0:	bd30      	pop	{r4, r5, pc}
 80004b2:	bf00      	nop

080004b4 <__aeabi_ui2d>:
 80004b4:	f090 0f00 	teq	r0, #0
 80004b8:	bf04      	itt	eq
 80004ba:	2100      	moveq	r1, #0
 80004bc:	4770      	bxeq	lr
 80004be:	b530      	push	{r4, r5, lr}
 80004c0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004c4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c8:	f04f 0500 	mov.w	r5, #0
 80004cc:	f04f 0100 	mov.w	r1, #0
 80004d0:	e750      	b.n	8000374 <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_i2d>:
 80004d4:	f090 0f00 	teq	r0, #0
 80004d8:	bf04      	itt	eq
 80004da:	2100      	moveq	r1, #0
 80004dc:	4770      	bxeq	lr
 80004de:	b530      	push	{r4, r5, lr}
 80004e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004e8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004ec:	bf48      	it	mi
 80004ee:	4240      	negmi	r0, r0
 80004f0:	f04f 0100 	mov.w	r1, #0
 80004f4:	e73e      	b.n	8000374 <__adddf3+0x138>
 80004f6:	bf00      	nop

080004f8 <__aeabi_f2d>:
 80004f8:	0042      	lsls	r2, r0, #1
 80004fa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004fe:	ea4f 0131 	mov.w	r1, r1, rrx
 8000502:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000506:	bf1f      	itttt	ne
 8000508:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800050c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000510:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000514:	4770      	bxne	lr
 8000516:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800051a:	bf08      	it	eq
 800051c:	4770      	bxeq	lr
 800051e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000522:	bf04      	itt	eq
 8000524:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000528:	4770      	bxeq	lr
 800052a:	b530      	push	{r4, r5, lr}
 800052c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000530:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000534:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000538:	e71c      	b.n	8000374 <__adddf3+0x138>
 800053a:	bf00      	nop

0800053c <__aeabi_ul2d>:
 800053c:	ea50 0201 	orrs.w	r2, r0, r1
 8000540:	bf08      	it	eq
 8000542:	4770      	bxeq	lr
 8000544:	b530      	push	{r4, r5, lr}
 8000546:	f04f 0500 	mov.w	r5, #0
 800054a:	e00a      	b.n	8000562 <__aeabi_l2d+0x16>

0800054c <__aeabi_l2d>:
 800054c:	ea50 0201 	orrs.w	r2, r0, r1
 8000550:	bf08      	it	eq
 8000552:	4770      	bxeq	lr
 8000554:	b530      	push	{r4, r5, lr}
 8000556:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800055a:	d502      	bpl.n	8000562 <__aeabi_l2d+0x16>
 800055c:	4240      	negs	r0, r0
 800055e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000562:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000566:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800056a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800056e:	f43f aed8 	beq.w	8000322 <__adddf3+0xe6>
 8000572:	f04f 0203 	mov.w	r2, #3
 8000576:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800057a:	bf18      	it	ne
 800057c:	3203      	addne	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800058a:	f1c2 0320 	rsb	r3, r2, #32
 800058e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000592:	fa20 f002 	lsr.w	r0, r0, r2
 8000596:	fa01 fe03 	lsl.w	lr, r1, r3
 800059a:	ea40 000e 	orr.w	r0, r0, lr
 800059e:	fa21 f102 	lsr.w	r1, r1, r2
 80005a2:	4414      	add	r4, r2
 80005a4:	e6bd      	b.n	8000322 <__adddf3+0xe6>
 80005a6:	bf00      	nop

080005a8 <__aeabi_dmul>:
 80005a8:	b570      	push	{r4, r5, r6, lr}
 80005aa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ae:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005b2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005b6:	bf1d      	ittte	ne
 80005b8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005bc:	ea94 0f0c 	teqne	r4, ip
 80005c0:	ea95 0f0c 	teqne	r5, ip
 80005c4:	f000 f8de 	bleq	8000784 <__aeabi_dmul+0x1dc>
 80005c8:	442c      	add	r4, r5
 80005ca:	ea81 0603 	eor.w	r6, r1, r3
 80005ce:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005d2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005d6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005da:	bf18      	it	ne
 80005dc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005e4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005e8:	d038      	beq.n	800065c <__aeabi_dmul+0xb4>
 80005ea:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ee:	f04f 0500 	mov.w	r5, #0
 80005f2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005f6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005fa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005fe:	f04f 0600 	mov.w	r6, #0
 8000602:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000606:	f09c 0f00 	teq	ip, #0
 800060a:	bf18      	it	ne
 800060c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000610:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000614:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000618:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800061c:	d204      	bcs.n	8000628 <__aeabi_dmul+0x80>
 800061e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000622:	416d      	adcs	r5, r5
 8000624:	eb46 0606 	adc.w	r6, r6, r6
 8000628:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800062c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000630:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000634:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000638:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800063c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000640:	bf88      	it	hi
 8000642:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000646:	d81e      	bhi.n	8000686 <__aeabi_dmul+0xde>
 8000648:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800064c:	bf08      	it	eq
 800064e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000652:	f150 0000 	adcs.w	r0, r0, #0
 8000656:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800065a:	bd70      	pop	{r4, r5, r6, pc}
 800065c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000660:	ea46 0101 	orr.w	r1, r6, r1
 8000664:	ea40 0002 	orr.w	r0, r0, r2
 8000668:	ea81 0103 	eor.w	r1, r1, r3
 800066c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000670:	bfc2      	ittt	gt
 8000672:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000676:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800067a:	bd70      	popgt	{r4, r5, r6, pc}
 800067c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000680:	f04f 0e00 	mov.w	lr, #0
 8000684:	3c01      	subs	r4, #1
 8000686:	f300 80ab 	bgt.w	80007e0 <__aeabi_dmul+0x238>
 800068a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800068e:	bfde      	ittt	le
 8000690:	2000      	movle	r0, #0
 8000692:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000696:	bd70      	pople	{r4, r5, r6, pc}
 8000698:	f1c4 0400 	rsb	r4, r4, #0
 800069c:	3c20      	subs	r4, #32
 800069e:	da35      	bge.n	800070c <__aeabi_dmul+0x164>
 80006a0:	340c      	adds	r4, #12
 80006a2:	dc1b      	bgt.n	80006dc <__aeabi_dmul+0x134>
 80006a4:	f104 0414 	add.w	r4, r4, #20
 80006a8:	f1c4 0520 	rsb	r5, r4, #32
 80006ac:	fa00 f305 	lsl.w	r3, r0, r5
 80006b0:	fa20 f004 	lsr.w	r0, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea40 0002 	orr.w	r0, r0, r2
 80006bc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006c0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006c8:	fa21 f604 	lsr.w	r6, r1, r4
 80006cc:	eb42 0106 	adc.w	r1, r2, r6
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f1c4 040c 	rsb	r4, r4, #12
 80006e0:	f1c4 0520 	rsb	r5, r4, #32
 80006e4:	fa00 f304 	lsl.w	r3, r0, r4
 80006e8:	fa20 f005 	lsr.w	r0, r0, r5
 80006ec:	fa01 f204 	lsl.w	r2, r1, r4
 80006f0:	ea40 0002 	orr.w	r0, r0, r2
 80006f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006f8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006fc:	f141 0100 	adc.w	r1, r1, #0
 8000700:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000704:	bf08      	it	eq
 8000706:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f1c4 0520 	rsb	r5, r4, #32
 8000710:	fa00 f205 	lsl.w	r2, r0, r5
 8000714:	ea4e 0e02 	orr.w	lr, lr, r2
 8000718:	fa20 f304 	lsr.w	r3, r0, r4
 800071c:	fa01 f205 	lsl.w	r2, r1, r5
 8000720:	ea43 0302 	orr.w	r3, r3, r2
 8000724:	fa21 f004 	lsr.w	r0, r1, r4
 8000728:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800072c:	fa21 f204 	lsr.w	r2, r1, r4
 8000730:	ea20 0002 	bic.w	r0, r0, r2
 8000734:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000738:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800073c:	bf08      	it	eq
 800073e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000742:	bd70      	pop	{r4, r5, r6, pc}
 8000744:	f094 0f00 	teq	r4, #0
 8000748:	d10f      	bne.n	800076a <__aeabi_dmul+0x1c2>
 800074a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800074e:	0040      	lsls	r0, r0, #1
 8000750:	eb41 0101 	adc.w	r1, r1, r1
 8000754:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000758:	bf08      	it	eq
 800075a:	3c01      	subeq	r4, #1
 800075c:	d0f7      	beq.n	800074e <__aeabi_dmul+0x1a6>
 800075e:	ea41 0106 	orr.w	r1, r1, r6
 8000762:	f095 0f00 	teq	r5, #0
 8000766:	bf18      	it	ne
 8000768:	4770      	bxne	lr
 800076a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800076e:	0052      	lsls	r2, r2, #1
 8000770:	eb43 0303 	adc.w	r3, r3, r3
 8000774:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000778:	bf08      	it	eq
 800077a:	3d01      	subeq	r5, #1
 800077c:	d0f7      	beq.n	800076e <__aeabi_dmul+0x1c6>
 800077e:	ea43 0306 	orr.w	r3, r3, r6
 8000782:	4770      	bx	lr
 8000784:	ea94 0f0c 	teq	r4, ip
 8000788:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800078c:	bf18      	it	ne
 800078e:	ea95 0f0c 	teqne	r5, ip
 8000792:	d00c      	beq.n	80007ae <__aeabi_dmul+0x206>
 8000794:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000798:	bf18      	it	ne
 800079a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800079e:	d1d1      	bne.n	8000744 <__aeabi_dmul+0x19c>
 80007a0:	ea81 0103 	eor.w	r1, r1, r3
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a8:	f04f 0000 	mov.w	r0, #0
 80007ac:	bd70      	pop	{r4, r5, r6, pc}
 80007ae:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007b2:	bf06      	itte	eq
 80007b4:	4610      	moveq	r0, r2
 80007b6:	4619      	moveq	r1, r3
 80007b8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007bc:	d019      	beq.n	80007f2 <__aeabi_dmul+0x24a>
 80007be:	ea94 0f0c 	teq	r4, ip
 80007c2:	d102      	bne.n	80007ca <__aeabi_dmul+0x222>
 80007c4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007c8:	d113      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007ca:	ea95 0f0c 	teq	r5, ip
 80007ce:	d105      	bne.n	80007dc <__aeabi_dmul+0x234>
 80007d0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007d4:	bf1c      	itt	ne
 80007d6:	4610      	movne	r0, r2
 80007d8:	4619      	movne	r1, r3
 80007da:	d10a      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007dc:	ea81 0103 	eor.w	r1, r1, r3
 80007e0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007e8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007ec:	f04f 0000 	mov.w	r0, #0
 80007f0:	bd70      	pop	{r4, r5, r6, pc}
 80007f2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007f6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007fa:	bd70      	pop	{r4, r5, r6, pc}

080007fc <__aeabi_ddiv>:
 80007fc:	b570      	push	{r4, r5, r6, lr}
 80007fe:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000802:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000806:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800080a:	bf1d      	ittte	ne
 800080c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000810:	ea94 0f0c 	teqne	r4, ip
 8000814:	ea95 0f0c 	teqne	r5, ip
 8000818:	f000 f8a7 	bleq	800096a <__aeabi_ddiv+0x16e>
 800081c:	eba4 0405 	sub.w	r4, r4, r5
 8000820:	ea81 0e03 	eor.w	lr, r1, r3
 8000824:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000828:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800082c:	f000 8088 	beq.w	8000940 <__aeabi_ddiv+0x144>
 8000830:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000834:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000838:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800083c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000840:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000844:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000848:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800084c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000850:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000854:	429d      	cmp	r5, r3
 8000856:	bf08      	it	eq
 8000858:	4296      	cmpeq	r6, r2
 800085a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800085e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000862:	d202      	bcs.n	800086a <__aeabi_ddiv+0x6e>
 8000864:	085b      	lsrs	r3, r3, #1
 8000866:	ea4f 0232 	mov.w	r2, r2, rrx
 800086a:	1ab6      	subs	r6, r6, r2
 800086c:	eb65 0503 	sbc.w	r5, r5, r3
 8000870:	085b      	lsrs	r3, r3, #1
 8000872:	ea4f 0232 	mov.w	r2, r2, rrx
 8000876:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800087a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ce:	bf22      	ittt	cs
 80008d0:	1ab6      	subcs	r6, r6, r2
 80008d2:	4675      	movcs	r5, lr
 80008d4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008d8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008dc:	d018      	beq.n	8000910 <__aeabi_ddiv+0x114>
 80008de:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008e2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008e6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008ea:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ee:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008f2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008f6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008fa:	d1c0      	bne.n	800087e <__aeabi_ddiv+0x82>
 80008fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000900:	d10b      	bne.n	800091a <__aeabi_ddiv+0x11e>
 8000902:	ea41 0100 	orr.w	r1, r1, r0
 8000906:	f04f 0000 	mov.w	r0, #0
 800090a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800090e:	e7b6      	b.n	800087e <__aeabi_ddiv+0x82>
 8000910:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000914:	bf04      	itt	eq
 8000916:	4301      	orreq	r1, r0
 8000918:	2000      	moveq	r0, #0
 800091a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800091e:	bf88      	it	hi
 8000920:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000924:	f63f aeaf 	bhi.w	8000686 <__aeabi_dmul+0xde>
 8000928:	ebb5 0c03 	subs.w	ip, r5, r3
 800092c:	bf04      	itt	eq
 800092e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000932:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000936:	f150 0000 	adcs.w	r0, r0, #0
 800093a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800093e:	bd70      	pop	{r4, r5, r6, pc}
 8000940:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000944:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000948:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800094c:	bfc2      	ittt	gt
 800094e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000952:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000956:	bd70      	popgt	{r4, r5, r6, pc}
 8000958:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800095c:	f04f 0e00 	mov.w	lr, #0
 8000960:	3c01      	subs	r4, #1
 8000962:	e690      	b.n	8000686 <__aeabi_dmul+0xde>
 8000964:	ea45 0e06 	orr.w	lr, r5, r6
 8000968:	e68d      	b.n	8000686 <__aeabi_dmul+0xde>
 800096a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800096e:	ea94 0f0c 	teq	r4, ip
 8000972:	bf08      	it	eq
 8000974:	ea95 0f0c 	teqeq	r5, ip
 8000978:	f43f af3b 	beq.w	80007f2 <__aeabi_dmul+0x24a>
 800097c:	ea94 0f0c 	teq	r4, ip
 8000980:	d10a      	bne.n	8000998 <__aeabi_ddiv+0x19c>
 8000982:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000986:	f47f af34 	bne.w	80007f2 <__aeabi_dmul+0x24a>
 800098a:	ea95 0f0c 	teq	r5, ip
 800098e:	f47f af25 	bne.w	80007dc <__aeabi_dmul+0x234>
 8000992:	4610      	mov	r0, r2
 8000994:	4619      	mov	r1, r3
 8000996:	e72c      	b.n	80007f2 <__aeabi_dmul+0x24a>
 8000998:	ea95 0f0c 	teq	r5, ip
 800099c:	d106      	bne.n	80009ac <__aeabi_ddiv+0x1b0>
 800099e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009a2:	f43f aefd 	beq.w	80007a0 <__aeabi_dmul+0x1f8>
 80009a6:	4610      	mov	r0, r2
 80009a8:	4619      	mov	r1, r3
 80009aa:	e722      	b.n	80007f2 <__aeabi_dmul+0x24a>
 80009ac:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b0:	bf18      	it	ne
 80009b2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009b6:	f47f aec5 	bne.w	8000744 <__aeabi_dmul+0x19c>
 80009ba:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009be:	f47f af0d 	bne.w	80007dc <__aeabi_dmul+0x234>
 80009c2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009c6:	f47f aeeb 	bne.w	80007a0 <__aeabi_dmul+0x1f8>
 80009ca:	e712      	b.n	80007f2 <__aeabi_dmul+0x24a>

080009cc <__gedf2>:
 80009cc:	f04f 3cff 	mov.w	ip, #4294967295
 80009d0:	e006      	b.n	80009e0 <__cmpdf2+0x4>
 80009d2:	bf00      	nop

080009d4 <__ledf2>:
 80009d4:	f04f 0c01 	mov.w	ip, #1
 80009d8:	e002      	b.n	80009e0 <__cmpdf2+0x4>
 80009da:	bf00      	nop

080009dc <__cmpdf2>:
 80009dc:	f04f 0c01 	mov.w	ip, #1
 80009e0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009e4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009e8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009ec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009f6:	d01b      	beq.n	8000a30 <__cmpdf2+0x54>
 80009f8:	b001      	add	sp, #4
 80009fa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009fe:	bf0c      	ite	eq
 8000a00:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a04:	ea91 0f03 	teqne	r1, r3
 8000a08:	bf02      	ittt	eq
 8000a0a:	ea90 0f02 	teqeq	r0, r2
 8000a0e:	2000      	moveq	r0, #0
 8000a10:	4770      	bxeq	lr
 8000a12:	f110 0f00 	cmn.w	r0, #0
 8000a16:	ea91 0f03 	teq	r1, r3
 8000a1a:	bf58      	it	pl
 8000a1c:	4299      	cmppl	r1, r3
 8000a1e:	bf08      	it	eq
 8000a20:	4290      	cmpeq	r0, r2
 8000a22:	bf2c      	ite	cs
 8000a24:	17d8      	asrcs	r0, r3, #31
 8000a26:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a2a:	f040 0001 	orr.w	r0, r0, #1
 8000a2e:	4770      	bx	lr
 8000a30:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a38:	d102      	bne.n	8000a40 <__cmpdf2+0x64>
 8000a3a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a3e:	d107      	bne.n	8000a50 <__cmpdf2+0x74>
 8000a40:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a44:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a48:	d1d6      	bne.n	80009f8 <__cmpdf2+0x1c>
 8000a4a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a4e:	d0d3      	beq.n	80009f8 <__cmpdf2+0x1c>
 8000a50:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a54:	4770      	bx	lr
 8000a56:	bf00      	nop

08000a58 <__aeabi_cdrcmple>:
 8000a58:	4684      	mov	ip, r0
 8000a5a:	4610      	mov	r0, r2
 8000a5c:	4662      	mov	r2, ip
 8000a5e:	468c      	mov	ip, r1
 8000a60:	4619      	mov	r1, r3
 8000a62:	4663      	mov	r3, ip
 8000a64:	e000      	b.n	8000a68 <__aeabi_cdcmpeq>
 8000a66:	bf00      	nop

08000a68 <__aeabi_cdcmpeq>:
 8000a68:	b501      	push	{r0, lr}
 8000a6a:	f7ff ffb7 	bl	80009dc <__cmpdf2>
 8000a6e:	2800      	cmp	r0, #0
 8000a70:	bf48      	it	mi
 8000a72:	f110 0f00 	cmnmi.w	r0, #0
 8000a76:	bd01      	pop	{r0, pc}

08000a78 <__aeabi_dcmpeq>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff fff4 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a80:	bf0c      	ite	eq
 8000a82:	2001      	moveq	r0, #1
 8000a84:	2000      	movne	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_dcmplt>:
 8000a8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a90:	f7ff ffea 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a94:	bf34      	ite	cc
 8000a96:	2001      	movcc	r0, #1
 8000a98:	2000      	movcs	r0, #0
 8000a9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_dcmple>:
 8000aa0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa4:	f7ff ffe0 	bl	8000a68 <__aeabi_cdcmpeq>
 8000aa8:	bf94      	ite	ls
 8000aaa:	2001      	movls	r0, #1
 8000aac:	2000      	movhi	r0, #0
 8000aae:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab2:	bf00      	nop

08000ab4 <__aeabi_dcmpge>:
 8000ab4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab8:	f7ff ffce 	bl	8000a58 <__aeabi_cdrcmple>
 8000abc:	bf94      	ite	ls
 8000abe:	2001      	movls	r0, #1
 8000ac0:	2000      	movhi	r0, #0
 8000ac2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_dcmpgt>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff ffc4 	bl	8000a58 <__aeabi_cdrcmple>
 8000ad0:	bf34      	ite	cc
 8000ad2:	2001      	movcc	r0, #1
 8000ad4:	2000      	movcs	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmpun>:
 8000adc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae4:	d102      	bne.n	8000aec <__aeabi_dcmpun+0x10>
 8000ae6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aea:	d10a      	bne.n	8000b02 <__aeabi_dcmpun+0x26>
 8000aec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af4:	d102      	bne.n	8000afc <__aeabi_dcmpun+0x20>
 8000af6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afa:	d102      	bne.n	8000b02 <__aeabi_dcmpun+0x26>
 8000afc:	f04f 0000 	mov.w	r0, #0
 8000b00:	4770      	bx	lr
 8000b02:	f04f 0001 	mov.w	r0, #1
 8000b06:	4770      	bx	lr

08000b08 <__aeabi_d2iz>:
 8000b08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b0c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b10:	d215      	bcs.n	8000b3e <__aeabi_d2iz+0x36>
 8000b12:	d511      	bpl.n	8000b38 <__aeabi_d2iz+0x30>
 8000b14:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b18:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b1c:	d912      	bls.n	8000b44 <__aeabi_d2iz+0x3c>
 8000b1e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b22:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b26:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b2a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b2e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b32:	bf18      	it	ne
 8000b34:	4240      	negne	r0, r0
 8000b36:	4770      	bx	lr
 8000b38:	f04f 0000 	mov.w	r0, #0
 8000b3c:	4770      	bx	lr
 8000b3e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b42:	d105      	bne.n	8000b50 <__aeabi_d2iz+0x48>
 8000b44:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b48:	bf08      	it	eq
 8000b4a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b4e:	4770      	bx	lr
 8000b50:	f04f 0000 	mov.w	r0, #0
 8000b54:	4770      	bx	lr
 8000b56:	bf00      	nop

08000b58 <__aeabi_uldivmod>:
 8000b58:	b953      	cbnz	r3, 8000b70 <__aeabi_uldivmod+0x18>
 8000b5a:	b94a      	cbnz	r2, 8000b70 <__aeabi_uldivmod+0x18>
 8000b5c:	2900      	cmp	r1, #0
 8000b5e:	bf08      	it	eq
 8000b60:	2800      	cmpeq	r0, #0
 8000b62:	bf1c      	itt	ne
 8000b64:	f04f 31ff 	movne.w	r1, #4294967295
 8000b68:	f04f 30ff 	movne.w	r0, #4294967295
 8000b6c:	f000 b972 	b.w	8000e54 <__aeabi_idiv0>
 8000b70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b78:	f000 f806 	bl	8000b88 <__udivmoddi4>
 8000b7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b84:	b004      	add	sp, #16
 8000b86:	4770      	bx	lr

08000b88 <__udivmoddi4>:
 8000b88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b8c:	9e08      	ldr	r6, [sp, #32]
 8000b8e:	4604      	mov	r4, r0
 8000b90:	4688      	mov	r8, r1
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	d14b      	bne.n	8000c2e <__udivmoddi4+0xa6>
 8000b96:	428a      	cmp	r2, r1
 8000b98:	4615      	mov	r5, r2
 8000b9a:	d967      	bls.n	8000c6c <__udivmoddi4+0xe4>
 8000b9c:	fab2 f282 	clz	r2, r2
 8000ba0:	b14a      	cbz	r2, 8000bb6 <__udivmoddi4+0x2e>
 8000ba2:	f1c2 0720 	rsb	r7, r2, #32
 8000ba6:	fa01 f302 	lsl.w	r3, r1, r2
 8000baa:	fa20 f707 	lsr.w	r7, r0, r7
 8000bae:	4095      	lsls	r5, r2
 8000bb0:	ea47 0803 	orr.w	r8, r7, r3
 8000bb4:	4094      	lsls	r4, r2
 8000bb6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000bba:	0c23      	lsrs	r3, r4, #16
 8000bbc:	fbb8 f7fe 	udiv	r7, r8, lr
 8000bc0:	fa1f fc85 	uxth.w	ip, r5
 8000bc4:	fb0e 8817 	mls	r8, lr, r7, r8
 8000bc8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000bcc:	fb07 f10c 	mul.w	r1, r7, ip
 8000bd0:	4299      	cmp	r1, r3
 8000bd2:	d909      	bls.n	8000be8 <__udivmoddi4+0x60>
 8000bd4:	18eb      	adds	r3, r5, r3
 8000bd6:	f107 30ff 	add.w	r0, r7, #4294967295
 8000bda:	f080 811b 	bcs.w	8000e14 <__udivmoddi4+0x28c>
 8000bde:	4299      	cmp	r1, r3
 8000be0:	f240 8118 	bls.w	8000e14 <__udivmoddi4+0x28c>
 8000be4:	3f02      	subs	r7, #2
 8000be6:	442b      	add	r3, r5
 8000be8:	1a5b      	subs	r3, r3, r1
 8000bea:	b2a4      	uxth	r4, r4
 8000bec:	fbb3 f0fe 	udiv	r0, r3, lr
 8000bf0:	fb0e 3310 	mls	r3, lr, r0, r3
 8000bf4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000bf8:	fb00 fc0c 	mul.w	ip, r0, ip
 8000bfc:	45a4      	cmp	ip, r4
 8000bfe:	d909      	bls.n	8000c14 <__udivmoddi4+0x8c>
 8000c00:	192c      	adds	r4, r5, r4
 8000c02:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c06:	f080 8107 	bcs.w	8000e18 <__udivmoddi4+0x290>
 8000c0a:	45a4      	cmp	ip, r4
 8000c0c:	f240 8104 	bls.w	8000e18 <__udivmoddi4+0x290>
 8000c10:	3802      	subs	r0, #2
 8000c12:	442c      	add	r4, r5
 8000c14:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000c18:	eba4 040c 	sub.w	r4, r4, ip
 8000c1c:	2700      	movs	r7, #0
 8000c1e:	b11e      	cbz	r6, 8000c28 <__udivmoddi4+0xa0>
 8000c20:	40d4      	lsrs	r4, r2
 8000c22:	2300      	movs	r3, #0
 8000c24:	e9c6 4300 	strd	r4, r3, [r6]
 8000c28:	4639      	mov	r1, r7
 8000c2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c2e:	428b      	cmp	r3, r1
 8000c30:	d909      	bls.n	8000c46 <__udivmoddi4+0xbe>
 8000c32:	2e00      	cmp	r6, #0
 8000c34:	f000 80eb 	beq.w	8000e0e <__udivmoddi4+0x286>
 8000c38:	2700      	movs	r7, #0
 8000c3a:	e9c6 0100 	strd	r0, r1, [r6]
 8000c3e:	4638      	mov	r0, r7
 8000c40:	4639      	mov	r1, r7
 8000c42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c46:	fab3 f783 	clz	r7, r3
 8000c4a:	2f00      	cmp	r7, #0
 8000c4c:	d147      	bne.n	8000cde <__udivmoddi4+0x156>
 8000c4e:	428b      	cmp	r3, r1
 8000c50:	d302      	bcc.n	8000c58 <__udivmoddi4+0xd0>
 8000c52:	4282      	cmp	r2, r0
 8000c54:	f200 80fa 	bhi.w	8000e4c <__udivmoddi4+0x2c4>
 8000c58:	1a84      	subs	r4, r0, r2
 8000c5a:	eb61 0303 	sbc.w	r3, r1, r3
 8000c5e:	2001      	movs	r0, #1
 8000c60:	4698      	mov	r8, r3
 8000c62:	2e00      	cmp	r6, #0
 8000c64:	d0e0      	beq.n	8000c28 <__udivmoddi4+0xa0>
 8000c66:	e9c6 4800 	strd	r4, r8, [r6]
 8000c6a:	e7dd      	b.n	8000c28 <__udivmoddi4+0xa0>
 8000c6c:	b902      	cbnz	r2, 8000c70 <__udivmoddi4+0xe8>
 8000c6e:	deff      	udf	#255	; 0xff
 8000c70:	fab2 f282 	clz	r2, r2
 8000c74:	2a00      	cmp	r2, #0
 8000c76:	f040 808f 	bne.w	8000d98 <__udivmoddi4+0x210>
 8000c7a:	1b49      	subs	r1, r1, r5
 8000c7c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c80:	fa1f f885 	uxth.w	r8, r5
 8000c84:	2701      	movs	r7, #1
 8000c86:	fbb1 fcfe 	udiv	ip, r1, lr
 8000c8a:	0c23      	lsrs	r3, r4, #16
 8000c8c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000c90:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c94:	fb08 f10c 	mul.w	r1, r8, ip
 8000c98:	4299      	cmp	r1, r3
 8000c9a:	d907      	bls.n	8000cac <__udivmoddi4+0x124>
 8000c9c:	18eb      	adds	r3, r5, r3
 8000c9e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000ca2:	d202      	bcs.n	8000caa <__udivmoddi4+0x122>
 8000ca4:	4299      	cmp	r1, r3
 8000ca6:	f200 80cd 	bhi.w	8000e44 <__udivmoddi4+0x2bc>
 8000caa:	4684      	mov	ip, r0
 8000cac:	1a59      	subs	r1, r3, r1
 8000cae:	b2a3      	uxth	r3, r4
 8000cb0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000cb4:	fb0e 1410 	mls	r4, lr, r0, r1
 8000cb8:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000cbc:	fb08 f800 	mul.w	r8, r8, r0
 8000cc0:	45a0      	cmp	r8, r4
 8000cc2:	d907      	bls.n	8000cd4 <__udivmoddi4+0x14c>
 8000cc4:	192c      	adds	r4, r5, r4
 8000cc6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cca:	d202      	bcs.n	8000cd2 <__udivmoddi4+0x14a>
 8000ccc:	45a0      	cmp	r8, r4
 8000cce:	f200 80b6 	bhi.w	8000e3e <__udivmoddi4+0x2b6>
 8000cd2:	4618      	mov	r0, r3
 8000cd4:	eba4 0408 	sub.w	r4, r4, r8
 8000cd8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000cdc:	e79f      	b.n	8000c1e <__udivmoddi4+0x96>
 8000cde:	f1c7 0c20 	rsb	ip, r7, #32
 8000ce2:	40bb      	lsls	r3, r7
 8000ce4:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000ce8:	ea4e 0e03 	orr.w	lr, lr, r3
 8000cec:	fa01 f407 	lsl.w	r4, r1, r7
 8000cf0:	fa20 f50c 	lsr.w	r5, r0, ip
 8000cf4:	fa21 f30c 	lsr.w	r3, r1, ip
 8000cf8:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000cfc:	4325      	orrs	r5, r4
 8000cfe:	fbb3 f9f8 	udiv	r9, r3, r8
 8000d02:	0c2c      	lsrs	r4, r5, #16
 8000d04:	fb08 3319 	mls	r3, r8, r9, r3
 8000d08:	fa1f fa8e 	uxth.w	sl, lr
 8000d0c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000d10:	fb09 f40a 	mul.w	r4, r9, sl
 8000d14:	429c      	cmp	r4, r3
 8000d16:	fa02 f207 	lsl.w	r2, r2, r7
 8000d1a:	fa00 f107 	lsl.w	r1, r0, r7
 8000d1e:	d90b      	bls.n	8000d38 <__udivmoddi4+0x1b0>
 8000d20:	eb1e 0303 	adds.w	r3, lr, r3
 8000d24:	f109 30ff 	add.w	r0, r9, #4294967295
 8000d28:	f080 8087 	bcs.w	8000e3a <__udivmoddi4+0x2b2>
 8000d2c:	429c      	cmp	r4, r3
 8000d2e:	f240 8084 	bls.w	8000e3a <__udivmoddi4+0x2b2>
 8000d32:	f1a9 0902 	sub.w	r9, r9, #2
 8000d36:	4473      	add	r3, lr
 8000d38:	1b1b      	subs	r3, r3, r4
 8000d3a:	b2ad      	uxth	r5, r5
 8000d3c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d40:	fb08 3310 	mls	r3, r8, r0, r3
 8000d44:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000d48:	fb00 fa0a 	mul.w	sl, r0, sl
 8000d4c:	45a2      	cmp	sl, r4
 8000d4e:	d908      	bls.n	8000d62 <__udivmoddi4+0x1da>
 8000d50:	eb1e 0404 	adds.w	r4, lr, r4
 8000d54:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d58:	d26b      	bcs.n	8000e32 <__udivmoddi4+0x2aa>
 8000d5a:	45a2      	cmp	sl, r4
 8000d5c:	d969      	bls.n	8000e32 <__udivmoddi4+0x2aa>
 8000d5e:	3802      	subs	r0, #2
 8000d60:	4474      	add	r4, lr
 8000d62:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000d66:	fba0 8902 	umull	r8, r9, r0, r2
 8000d6a:	eba4 040a 	sub.w	r4, r4, sl
 8000d6e:	454c      	cmp	r4, r9
 8000d70:	46c2      	mov	sl, r8
 8000d72:	464b      	mov	r3, r9
 8000d74:	d354      	bcc.n	8000e20 <__udivmoddi4+0x298>
 8000d76:	d051      	beq.n	8000e1c <__udivmoddi4+0x294>
 8000d78:	2e00      	cmp	r6, #0
 8000d7a:	d069      	beq.n	8000e50 <__udivmoddi4+0x2c8>
 8000d7c:	ebb1 050a 	subs.w	r5, r1, sl
 8000d80:	eb64 0403 	sbc.w	r4, r4, r3
 8000d84:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000d88:	40fd      	lsrs	r5, r7
 8000d8a:	40fc      	lsrs	r4, r7
 8000d8c:	ea4c 0505 	orr.w	r5, ip, r5
 8000d90:	e9c6 5400 	strd	r5, r4, [r6]
 8000d94:	2700      	movs	r7, #0
 8000d96:	e747      	b.n	8000c28 <__udivmoddi4+0xa0>
 8000d98:	f1c2 0320 	rsb	r3, r2, #32
 8000d9c:	fa20 f703 	lsr.w	r7, r0, r3
 8000da0:	4095      	lsls	r5, r2
 8000da2:	fa01 f002 	lsl.w	r0, r1, r2
 8000da6:	fa21 f303 	lsr.w	r3, r1, r3
 8000daa:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000dae:	4338      	orrs	r0, r7
 8000db0:	0c01      	lsrs	r1, r0, #16
 8000db2:	fbb3 f7fe 	udiv	r7, r3, lr
 8000db6:	fa1f f885 	uxth.w	r8, r5
 8000dba:	fb0e 3317 	mls	r3, lr, r7, r3
 8000dbe:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000dc2:	fb07 f308 	mul.w	r3, r7, r8
 8000dc6:	428b      	cmp	r3, r1
 8000dc8:	fa04 f402 	lsl.w	r4, r4, r2
 8000dcc:	d907      	bls.n	8000dde <__udivmoddi4+0x256>
 8000dce:	1869      	adds	r1, r5, r1
 8000dd0:	f107 3cff 	add.w	ip, r7, #4294967295
 8000dd4:	d22f      	bcs.n	8000e36 <__udivmoddi4+0x2ae>
 8000dd6:	428b      	cmp	r3, r1
 8000dd8:	d92d      	bls.n	8000e36 <__udivmoddi4+0x2ae>
 8000dda:	3f02      	subs	r7, #2
 8000ddc:	4429      	add	r1, r5
 8000dde:	1acb      	subs	r3, r1, r3
 8000de0:	b281      	uxth	r1, r0
 8000de2:	fbb3 f0fe 	udiv	r0, r3, lr
 8000de6:	fb0e 3310 	mls	r3, lr, r0, r3
 8000dea:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000dee:	fb00 f308 	mul.w	r3, r0, r8
 8000df2:	428b      	cmp	r3, r1
 8000df4:	d907      	bls.n	8000e06 <__udivmoddi4+0x27e>
 8000df6:	1869      	adds	r1, r5, r1
 8000df8:	f100 3cff 	add.w	ip, r0, #4294967295
 8000dfc:	d217      	bcs.n	8000e2e <__udivmoddi4+0x2a6>
 8000dfe:	428b      	cmp	r3, r1
 8000e00:	d915      	bls.n	8000e2e <__udivmoddi4+0x2a6>
 8000e02:	3802      	subs	r0, #2
 8000e04:	4429      	add	r1, r5
 8000e06:	1ac9      	subs	r1, r1, r3
 8000e08:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000e0c:	e73b      	b.n	8000c86 <__udivmoddi4+0xfe>
 8000e0e:	4637      	mov	r7, r6
 8000e10:	4630      	mov	r0, r6
 8000e12:	e709      	b.n	8000c28 <__udivmoddi4+0xa0>
 8000e14:	4607      	mov	r7, r0
 8000e16:	e6e7      	b.n	8000be8 <__udivmoddi4+0x60>
 8000e18:	4618      	mov	r0, r3
 8000e1a:	e6fb      	b.n	8000c14 <__udivmoddi4+0x8c>
 8000e1c:	4541      	cmp	r1, r8
 8000e1e:	d2ab      	bcs.n	8000d78 <__udivmoddi4+0x1f0>
 8000e20:	ebb8 0a02 	subs.w	sl, r8, r2
 8000e24:	eb69 020e 	sbc.w	r2, r9, lr
 8000e28:	3801      	subs	r0, #1
 8000e2a:	4613      	mov	r3, r2
 8000e2c:	e7a4      	b.n	8000d78 <__udivmoddi4+0x1f0>
 8000e2e:	4660      	mov	r0, ip
 8000e30:	e7e9      	b.n	8000e06 <__udivmoddi4+0x27e>
 8000e32:	4618      	mov	r0, r3
 8000e34:	e795      	b.n	8000d62 <__udivmoddi4+0x1da>
 8000e36:	4667      	mov	r7, ip
 8000e38:	e7d1      	b.n	8000dde <__udivmoddi4+0x256>
 8000e3a:	4681      	mov	r9, r0
 8000e3c:	e77c      	b.n	8000d38 <__udivmoddi4+0x1b0>
 8000e3e:	3802      	subs	r0, #2
 8000e40:	442c      	add	r4, r5
 8000e42:	e747      	b.n	8000cd4 <__udivmoddi4+0x14c>
 8000e44:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e48:	442b      	add	r3, r5
 8000e4a:	e72f      	b.n	8000cac <__udivmoddi4+0x124>
 8000e4c:	4638      	mov	r0, r7
 8000e4e:	e708      	b.n	8000c62 <__udivmoddi4+0xda>
 8000e50:	4637      	mov	r7, r6
 8000e52:	e6e9      	b.n	8000c28 <__udivmoddi4+0xa0>

08000e54 <__aeabi_idiv0>:
 8000e54:	4770      	bx	lr
 8000e56:	bf00      	nop

08000e58 <LL_FLASH_GetUDN>:
  * @note   The 64-bit UID64 may be used by Firmware to derive BLE 48-bit Device Address EUI-48 or
  *         802.15.4 64-bit Device Address EUI-64.
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_FLASH_GetUDN(void)
{
 8000e58:	b480      	push	{r7}
 8000e5a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_REG(*((uint32_t *)UID64_BASE)));
 8000e5c:	4b03      	ldr	r3, [pc, #12]	; (8000e6c <LL_FLASH_GetUDN+0x14>)
 8000e5e:	681b      	ldr	r3, [r3, #0]
}
 8000e60:	4618      	mov	r0, r3
 8000e62:	46bd      	mov	sp, r7
 8000e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e68:	4770      	bx	lr
 8000e6a:	bf00      	nop
 8000e6c:	1fff7580 	.word	0x1fff7580

08000e70 <LL_FLASH_GetDeviceID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the device ID is 0x26
  * @retval Values between Min_Data=0x00 and Max_Data=0xFF (ex: Device ID is 0x26 fo STM32WB55x)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetDeviceID(void)
{
 8000e70:	b480      	push	{r7}
 8000e72:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_REG(*((uint32_t *)UID64_BASE + 1U))) & 0x000000FFU);
 8000e74:	4b03      	ldr	r3, [pc, #12]	; (8000e84 <LL_FLASH_GetDeviceID+0x14>)
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	b2db      	uxtb	r3, r3
}
 8000e7a:	4618      	mov	r0, r3
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e82:	4770      	bx	lr
 8000e84:	1fff7584 	.word	0x1fff7584

08000e88 <LL_FLASH_GetSTCompanyID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the ST Compagny ID is 0x0080E1
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFFFF (ex: ST Compagny ID is 0x0080E1)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetSTCompanyID(void)
{
 8000e88:	b480      	push	{r7}
 8000e8a:	af00      	add	r7, sp, #0
  return (uint32_t)(((READ_REG(*((uint32_t *)UID64_BASE + 1U))) >> 8U ) & 0x00FFFFFFU);
 8000e8c:	4b03      	ldr	r3, [pc, #12]	; (8000e9c <LL_FLASH_GetSTCompanyID+0x14>)
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	0a1b      	lsrs	r3, r3, #8
}
 8000e92:	4618      	mov	r0, r3
 8000e94:	46bd      	mov	sp, r7
 8000e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9a:	4770      	bx	lr
 8000e9c:	1fff7584 	.word	0x1fff7584

08000ea0 <APP_BLE_Init>:

/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void APP_BLE_Init( void )
{
 8000ea0:	b5b0      	push	{r4, r5, r7, lr}
 8000ea2:	b08c      	sub	sp, #48	; 0x30
 8000ea4:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APP_BLE_Init_1 */

/* USER CODE END APP_BLE_Init_1 */
  SHCI_C2_Ble_Init_Cmd_Packet_t ble_init_cmd_packet =
 8000ea6:	4b2b      	ldr	r3, [pc, #172]	; (8000f54 <APP_BLE_Init+0xb4>)
 8000ea8:	463c      	mov	r4, r7
 8000eaa:	461d      	mov	r5, r3
 8000eac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000eae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000eb0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000eb2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000eb4:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000eb8:	c407      	stmia	r4!, {r0, r1, r2}
 8000eba:	7023      	strb	r3, [r4, #0]
  };

  /**
   * Initialize Ble Transport Layer
   */
  Ble_Tl_Init( );
 8000ebc:	f000 f9fe 	bl	80012bc <Ble_Tl_Init>

  /**
   * Do not allow standby in the application
   */
  UTIL_LPM_SetOffMode(1 << CFG_LPM_APP_BLE, UTIL_LPM_DISABLE);
 8000ec0:	2101      	movs	r1, #1
 8000ec2:	2002      	movs	r0, #2
 8000ec4:	f012 f822 	bl	8012f0c <UTIL_LPM_SetOffMode>

  /**
   * Register the hci transport layer to handle BLE User Asynchronous Events
   */
  HciUserEvtProcessId = osThreadNew(HciUserEvtProcess, NULL, &HciUserEvtProcess_attr);
 8000ec8:	4a23      	ldr	r2, [pc, #140]	; (8000f58 <APP_BLE_Init+0xb8>)
 8000eca:	2100      	movs	r1, #0
 8000ecc:	4823      	ldr	r0, [pc, #140]	; (8000f5c <APP_BLE_Init+0xbc>)
 8000ece:	f00d ff3d 	bl	800ed4c <osThreadNew>
 8000ed2:	4602      	mov	r2, r0
 8000ed4:	4b22      	ldr	r3, [pc, #136]	; (8000f60 <APP_BLE_Init+0xc0>)
 8000ed6:	601a      	str	r2, [r3, #0]

  /**
   * Starts the BLE Stack on CPU2
   */
  if (SHCI_C2_BLE_Init( &ble_init_cmd_packet ) != SHCI_Success)
 8000ed8:	463b      	mov	r3, r7
 8000eda:	4618      	mov	r0, r3
 8000edc:	f00c faca 	bl	800d474 <SHCI_C2_BLE_Init>
 8000ee0:	4603      	mov	r3, r0
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d001      	beq.n	8000eea <APP_BLE_Init+0x4a>
  {
    Error_Handler();
 8000ee6:	f004 fc33 	bl	8005750 <Error_Handler>
  }

  /**
   * Initialization of HCI & GATT & GAP layer
   */
  Ble_Hci_Gap_Gatt_Init();
 8000eea:	f000 fa0f 	bl	800130c <Ble_Hci_Gap_Gatt_Init>

  /**
   * Initialization of the BLE Services
   */
  SVCCTL_Init();
 8000eee:	f00b fa6d 	bl	800c3cc <SVCCTL_Init>

  /**
   * Initialization of the BLE App Context
   */
  BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 8000ef2:	4b1c      	ldr	r3, [pc, #112]	; (8000f64 <APP_BLE_Init+0xc4>)
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
  BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0xFFFF;
 8000efa:	4b1a      	ldr	r3, [pc, #104]	; (8000f64 <APP_BLE_Init+0xc4>)
 8000efc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000f00:	82da      	strh	r2, [r3, #22]
  /**
   * From here, all initialization are BLE application specific
   */
  AdvUpdateProcessId = osThreadNew(AdvUpdateProcess, NULL, &AdvUpdateProcess_attr);
 8000f02:	4a19      	ldr	r2, [pc, #100]	; (8000f68 <APP_BLE_Init+0xc8>)
 8000f04:	2100      	movs	r1, #0
 8000f06:	4819      	ldr	r0, [pc, #100]	; (8000f6c <APP_BLE_Init+0xcc>)
 8000f08:	f00d ff20 	bl	800ed4c <osThreadNew>
 8000f0c:	4602      	mov	r2, r0
 8000f0e:	4b18      	ldr	r3, [pc, #96]	; (8000f70 <APP_BLE_Init+0xd0>)
 8000f10:	601a      	str	r2, [r3, #0]

  /**
   * Initialize HRS Application
   */
  //P2P FIX HRSAPP_Init();
  index_con_int = 0;
 8000f12:	4b18      	ldr	r3, [pc, #96]	; (8000f74 <APP_BLE_Init+0xd4>)
 8000f14:	2200      	movs	r2, #0
 8000f16:	701a      	strb	r2, [r3, #0]
  mutex = 1;
 8000f18:	4b17      	ldr	r3, [pc, #92]	; (8000f78 <APP_BLE_Init+0xd8>)
 8000f1a:	2201      	movs	r2, #1
 8000f1c:	701a      	strb	r2, [r3, #0]
  P2PS_APP_Init();
 8000f1e:	f000 fd7b 	bl	8001a18 <P2PS_APP_Init>

  /**
   * Create timer to handle the connection state machine
   */

  HW_TS_Create(CFG_TIM_PROC_ID_ISR, &(BleApplicationContext.Advertising_mgr_timer_Id), hw_ts_SingleShot, Adv_Mgr);
 8000f22:	4b16      	ldr	r3, [pc, #88]	; (8000f7c <APP_BLE_Init+0xdc>)
 8000f24:	2200      	movs	r2, #0
 8000f26:	4916      	ldr	r1, [pc, #88]	; (8000f80 <APP_BLE_Init+0xe0>)
 8000f28:	2000      	movs	r0, #0
 8000f2a:	f002 fd49 	bl	80039c0 <HW_TS_Create>
  /**
   * Make device discoverable
   */

  //P2P FIX lines below
  BleApplicationContext.BleApplicationContext_legacy.advtServUUID[0] = NULL; //AD_TYPE_16_BIT_SERV_UUID;
 8000f2e:	4b0d      	ldr	r3, [pc, #52]	; (8000f64 <APP_BLE_Init+0xc4>)
 8000f30:	2200      	movs	r2, #0
 8000f32:	765a      	strb	r2, [r3, #25]
  BleApplicationContext.BleApplicationContext_legacy.advtServUUIDlen = 0;//1;
 8000f34:	4b0b      	ldr	r3, [pc, #44]	; (8000f64 <APP_BLE_Init+0xc4>)
 8000f36:	2200      	movs	r2, #0
 8000f38:	761a      	strb	r2, [r3, #24]
  //P2P FIX Add_Advertisment_Service_UUID(HEART_RATE_SERVICE_UUID);
  /* Initialize intervals for reconnexion without intervals update */
  AdvIntervalMin = CFG_FAST_CONN_ADV_INTERVAL_MIN;
 8000f3a:	4b12      	ldr	r3, [pc, #72]	; (8000f84 <APP_BLE_Init+0xe4>)
 8000f3c:	2280      	movs	r2, #128	; 0x80
 8000f3e:	801a      	strh	r2, [r3, #0]
  AdvIntervalMax = CFG_FAST_CONN_ADV_INTERVAL_MAX;
 8000f40:	4b11      	ldr	r3, [pc, #68]	; (8000f88 <APP_BLE_Init+0xe8>)
 8000f42:	22a0      	movs	r2, #160	; 0xa0
 8000f44:	801a      	strh	r2, [r3, #0]

  /**
  * Start to Advertise to be connected by Collector
   */
   Adv_Request(APP_BLE_FAST_ADV);
 8000f46:	2001      	movs	r0, #1
 8000f48:	f000 fabc 	bl	80014c4 <Adv_Request>

/* USER CODE BEGIN APP_BLE_Init_2 */

/* USER CODE END APP_BLE_Init_2 */
  return;
 8000f4c:	bf00      	nop
}
 8000f4e:	3730      	adds	r7, #48	; 0x30
 8000f50:	46bd      	mov	sp, r7
 8000f52:	bdb0      	pop	{r4, r5, r7, pc}
 8000f54:	08015b5c 	.word	0x08015b5c
 8000f58:	08016460 	.word	0x08016460
 8000f5c:	080016d9 	.word	0x080016d9
 8000f60:	20005048 	.word	0x20005048
 8000f64:	200001f8 	.word	0x200001f8
 8000f68:	0801643c 	.word	0x0801643c
 8000f6c:	080016b1 	.word	0x080016b1
 8000f70:	20005058 	.word	0x20005058
 8000f74:	20005051 	.word	0x20005051
 8000f78:	20005050 	.word	0x20005050
 8000f7c:	08001699 	.word	0x08001699
 8000f80:	20000279 	.word	0x20000279
 8000f84:	2000027c 	.word	0x2000027c
 8000f88:	2000027e 	.word	0x2000027e

08000f8c <SVCCTL_App_Notification>:

SVCCTL_UserEvtFlowStatus_t SVCCTL_App_Notification( void *pckt )
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b08c      	sub	sp, #48	; 0x30
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]
  hci_event_pckt *event_pckt;
  evt_le_meta_event *meta_evt;
  evt_blue_aci *blue_evt;
  hci_le_phy_update_complete_event_rp0 *evt_le_phy_update_complete;
  uint8_t TX_PHY, RX_PHY;
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 8000f94:	2342      	movs	r3, #66	; 0x42
 8000f96:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) pckt)->data;
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	3301      	adds	r3, #1
 8000f9e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* USER CODE BEGIN SVCCTL_App_Notification */

  /* USER CODE END SVCCTL_App_Notification */

  switch (event_pckt->evt)
 8000fa0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000fa2:	781b      	ldrb	r3, [r3, #0]
 8000fa4:	2b3e      	cmp	r3, #62	; 0x3e
 8000fa6:	d028      	beq.n	8000ffa <SVCCTL_App_Notification+0x6e>
 8000fa8:	2bff      	cmp	r3, #255	; 0xff
 8000faa:	f000 80a5 	beq.w	80010f8 <SVCCTL_App_Notification+0x16c>
 8000fae:	2b05      	cmp	r3, #5
 8000fb0:	d000      	beq.n	8000fb4 <SVCCTL_App_Notification+0x28>

      default:
      /* USER CODE BEGIN ECODE_DEFAULT*/

      /* USER CODE END ECODE_DEFAULT*/
        break;
 8000fb2:	e145      	b.n	8001240 <SVCCTL_App_Notification+0x2b4>
      disconnection_complete_event = (hci_disconnection_complete_event_rp0 *) event_pckt->data;
 8000fb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000fb6:	3302      	adds	r3, #2
 8000fb8:	613b      	str	r3, [r7, #16]
      if (disconnection_complete_event->Connection_Handle == BleApplicationContext.BleApplicationContext_legacy.connectionHandle)
 8000fba:	693b      	ldr	r3, [r7, #16]
 8000fbc:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8000fc0:	b29a      	uxth	r2, r3
 8000fc2:	4ba2      	ldr	r3, [pc, #648]	; (800124c <SVCCTL_App_Notification+0x2c0>)
 8000fc4:	8adb      	ldrh	r3, [r3, #22]
 8000fc6:	429a      	cmp	r2, r3
 8000fc8:	d109      	bne.n	8000fde <SVCCTL_App_Notification+0x52>
        BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0;
 8000fca:	4ba0      	ldr	r3, [pc, #640]	; (800124c <SVCCTL_App_Notification+0x2c0>)
 8000fcc:	2200      	movs	r2, #0
 8000fce:	82da      	strh	r2, [r3, #22]
        BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 8000fd0:	4b9e      	ldr	r3, [pc, #632]	; (800124c <SVCCTL_App_Notification+0x2c0>)
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
        APP_DBG_MSG("\r\n\r** DISCONNECTION EVENT WITH CLIENT \n");
 8000fd8:	489d      	ldr	r0, [pc, #628]	; (8001250 <SVCCTL_App_Notification+0x2c4>)
 8000fda:	f012 fd83 	bl	8013ae4 <puts>
      Adv_Request(APP_BLE_FAST_ADV);
 8000fde:	2001      	movs	r0, #1
 8000fe0:	f000 fa70 	bl	80014c4 <Adv_Request>
      handleNotification.P2P_Evt_Opcode = PEER_DISCON_HANDLE_EVT;
 8000fe4:	4b9b      	ldr	r3, [pc, #620]	; (8001254 <SVCCTL_App_Notification+0x2c8>)
 8000fe6:	2201      	movs	r2, #1
 8000fe8:	701a      	strb	r2, [r3, #0]
      handleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 8000fea:	4b98      	ldr	r3, [pc, #608]	; (800124c <SVCCTL_App_Notification+0x2c0>)
 8000fec:	8ada      	ldrh	r2, [r3, #22]
 8000fee:	4b99      	ldr	r3, [pc, #612]	; (8001254 <SVCCTL_App_Notification+0x2c8>)
 8000ff0:	805a      	strh	r2, [r3, #2]
      P2PS_APP_Notification(&handleNotification);
 8000ff2:	4898      	ldr	r0, [pc, #608]	; (8001254 <SVCCTL_App_Notification+0x2c8>)
 8000ff4:	f000 fcfc 	bl	80019f0 <P2PS_APP_Notification>
    break; /* EVT_DISCONN_COMPLETE */
 8000ff8:	e122      	b.n	8001240 <SVCCTL_App_Notification+0x2b4>
      meta_evt = (evt_le_meta_event*) event_pckt->data;
 8000ffa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ffc:	3302      	adds	r3, #2
 8000ffe:	61fb      	str	r3, [r7, #28]
      switch (meta_evt->subevent)
 8001000:	69fb      	ldr	r3, [r7, #28]
 8001002:	781b      	ldrb	r3, [r3, #0]
 8001004:	2b03      	cmp	r3, #3
 8001006:	d004      	beq.n	8001012 <SVCCTL_App_Notification+0x86>
 8001008:	2b0c      	cmp	r3, #12
 800100a:	d006      	beq.n	800101a <SVCCTL_App_Notification+0x8e>
 800100c:	2b01      	cmp	r3, #1
 800100e:	d042      	beq.n	8001096 <SVCCTL_App_Notification+0x10a>
          break;
 8001010:	e071      	b.n	80010f6 <SVCCTL_App_Notification+0x16a>
          APP_DBG_MSG("\r\n\r** CONNECTION UPDATE EVENT WITH CLIENT \n");
 8001012:	4891      	ldr	r0, [pc, #580]	; (8001258 <SVCCTL_App_Notification+0x2cc>)
 8001014:	f012 fd66 	bl	8013ae4 <puts>
          break;
 8001018:	e06d      	b.n	80010f6 <SVCCTL_App_Notification+0x16a>
          APP_DBG_MSG("EVT_UPDATE_PHY_COMPLETE \n");
 800101a:	4890      	ldr	r0, [pc, #576]	; (800125c <SVCCTL_App_Notification+0x2d0>)
 800101c:	f012 fd62 	bl	8013ae4 <puts>
          evt_le_phy_update_complete = (hci_le_phy_update_complete_event_rp0*)meta_evt->data;
 8001020:	69fb      	ldr	r3, [r7, #28]
 8001022:	3301      	adds	r3, #1
 8001024:	61bb      	str	r3, [r7, #24]
          if (evt_le_phy_update_complete->Status == 0)
 8001026:	69bb      	ldr	r3, [r7, #24]
 8001028:	781b      	ldrb	r3, [r3, #0]
 800102a:	2b00      	cmp	r3, #0
 800102c:	d103      	bne.n	8001036 <SVCCTL_App_Notification+0xaa>
            APP_DBG_MSG("EVT_UPDATE_PHY_COMPLETE, status ok \n");
 800102e:	488c      	ldr	r0, [pc, #560]	; (8001260 <SVCCTL_App_Notification+0x2d4>)
 8001030:	f012 fd58 	bl	8013ae4 <puts>
 8001034:	e002      	b.n	800103c <SVCCTL_App_Notification+0xb0>
            APP_DBG_MSG("EVT_UPDATE_PHY_COMPLETE, status nok \n");
 8001036:	488b      	ldr	r0, [pc, #556]	; (8001264 <SVCCTL_App_Notification+0x2d8>)
 8001038:	f012 fd54 	bl	8013ae4 <puts>
          ret = hci_le_read_phy(BleApplicationContext.BleApplicationContext_legacy.connectionHandle,&TX_PHY,&RX_PHY);
 800103c:	4b83      	ldr	r3, [pc, #524]	; (800124c <SVCCTL_App_Notification+0x2c0>)
 800103e:	8adb      	ldrh	r3, [r3, #22]
 8001040:	f107 020e 	add.w	r2, r7, #14
 8001044:	f107 010f 	add.w	r1, r7, #15
 8001048:	4618      	mov	r0, r3
 800104a:	f00c f924 	bl	800d296 <hci_le_read_phy>
 800104e:	4603      	mov	r3, r0
 8001050:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
          if (ret == BLE_STATUS_SUCCESS)
 8001054:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001058:	2b00      	cmp	r3, #0
 800105a:	d118      	bne.n	800108e <SVCCTL_App_Notification+0x102>
            APP_DBG_MSG("Read_PHY success \n");
 800105c:	4882      	ldr	r0, [pc, #520]	; (8001268 <SVCCTL_App_Notification+0x2dc>)
 800105e:	f012 fd41 	bl	8013ae4 <puts>
            if ((TX_PHY == TX_2M) && (RX_PHY == RX_2M))
 8001062:	7bfb      	ldrb	r3, [r7, #15]
 8001064:	2b02      	cmp	r3, #2
 8001066:	d10a      	bne.n	800107e <SVCCTL_App_Notification+0xf2>
 8001068:	7bbb      	ldrb	r3, [r7, #14]
 800106a:	2b02      	cmp	r3, #2
 800106c:	d107      	bne.n	800107e <SVCCTL_App_Notification+0xf2>
              APP_DBG_MSG("PHY Param  TX= %d, RX= %d \n", TX_PHY, RX_PHY);
 800106e:	7bfb      	ldrb	r3, [r7, #15]
 8001070:	4619      	mov	r1, r3
 8001072:	7bbb      	ldrb	r3, [r7, #14]
 8001074:	461a      	mov	r2, r3
 8001076:	487d      	ldr	r0, [pc, #500]	; (800126c <SVCCTL_App_Notification+0x2e0>)
 8001078:	f012 fcc0 	bl	80139fc <iprintf>
          break;
 800107c:	e03b      	b.n	80010f6 <SVCCTL_App_Notification+0x16a>
              APP_DBG_MSG("PHY Param  TX= %d, RX= %d \n", TX_PHY, RX_PHY);
 800107e:	7bfb      	ldrb	r3, [r7, #15]
 8001080:	4619      	mov	r1, r3
 8001082:	7bbb      	ldrb	r3, [r7, #14]
 8001084:	461a      	mov	r2, r3
 8001086:	4879      	ldr	r0, [pc, #484]	; (800126c <SVCCTL_App_Notification+0x2e0>)
 8001088:	f012 fcb8 	bl	80139fc <iprintf>
          break;
 800108c:	e033      	b.n	80010f6 <SVCCTL_App_Notification+0x16a>
            APP_DBG_MSG("Read conf not succeess \n");
 800108e:	4878      	ldr	r0, [pc, #480]	; (8001270 <SVCCTL_App_Notification+0x2e4>)
 8001090:	f012 fd28 	bl	8013ae4 <puts>
          break;
 8001094:	e02f      	b.n	80010f6 <SVCCTL_App_Notification+0x16a>
          connection_complete_event = (hci_le_connection_complete_event_rp0 *) meta_evt->data;
 8001096:	69fb      	ldr	r3, [r7, #28]
 8001098:	3301      	adds	r3, #1
 800109a:	617b      	str	r3, [r7, #20]
          HW_TS_Stop(BleApplicationContext.Advertising_mgr_timer_Id);
 800109c:	4b6b      	ldr	r3, [pc, #428]	; (800124c <SVCCTL_App_Notification+0x2c0>)
 800109e:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80010a2:	4618      	mov	r0, r3
 80010a4:	f002 fd02 	bl	8003aac <HW_TS_Stop>
          APP_DBG_MSG("EVT_LE_CONN_COMPLETE for connection handle 0x%x\n", connection_complete_event->Connection_Handle);
 80010a8:	697b      	ldr	r3, [r7, #20]
 80010aa:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 80010ae:	b29b      	uxth	r3, r3
 80010b0:	4619      	mov	r1, r3
 80010b2:	4870      	ldr	r0, [pc, #448]	; (8001274 <SVCCTL_App_Notification+0x2e8>)
 80010b4:	f012 fca2 	bl	80139fc <iprintf>
          if (BleApplicationContext.Device_Connection_Status == APP_BLE_LP_CONNECTING)
 80010b8:	4b64      	ldr	r3, [pc, #400]	; (800124c <SVCCTL_App_Notification+0x2c0>)
 80010ba:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80010be:	2b04      	cmp	r3, #4
 80010c0:	d104      	bne.n	80010cc <SVCCTL_App_Notification+0x140>
            BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_CLIENT;
 80010c2:	4b62      	ldr	r3, [pc, #392]	; (800124c <SVCCTL_App_Notification+0x2c0>)
 80010c4:	2206      	movs	r2, #6
 80010c6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
 80010ca:	e003      	b.n	80010d4 <SVCCTL_App_Notification+0x148>
            BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_SERVER;
 80010cc:	4b5f      	ldr	r3, [pc, #380]	; (800124c <SVCCTL_App_Notification+0x2c0>)
 80010ce:	2205      	movs	r2, #5
 80010d0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
          BleApplicationContext.BleApplicationContext_legacy.connectionHandle = connection_complete_event->Connection_Handle;
 80010d4:	697b      	ldr	r3, [r7, #20]
 80010d6:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 80010da:	b29a      	uxth	r2, r3
 80010dc:	4b5b      	ldr	r3, [pc, #364]	; (800124c <SVCCTL_App_Notification+0x2c0>)
 80010de:	82da      	strh	r2, [r3, #22]
          handleNotification.P2P_Evt_Opcode = PEER_CONN_HANDLE_EVT;
 80010e0:	4b5c      	ldr	r3, [pc, #368]	; (8001254 <SVCCTL_App_Notification+0x2c8>)
 80010e2:	2200      	movs	r2, #0
 80010e4:	701a      	strb	r2, [r3, #0]
          handleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 80010e6:	4b59      	ldr	r3, [pc, #356]	; (800124c <SVCCTL_App_Notification+0x2c0>)
 80010e8:	8ada      	ldrh	r2, [r3, #22]
 80010ea:	4b5a      	ldr	r3, [pc, #360]	; (8001254 <SVCCTL_App_Notification+0x2c8>)
 80010ec:	805a      	strh	r2, [r3, #2]
          P2PS_APP_Notification(&handleNotification);
 80010ee:	4859      	ldr	r0, [pc, #356]	; (8001254 <SVCCTL_App_Notification+0x2c8>)
 80010f0:	f000 fc7e 	bl	80019f0 <P2PS_APP_Notification>
        break; /* HCI_EVT_LE_CONN_COMPLETE */
 80010f4:	bf00      	nop
    break; /* HCI_EVT_LE_META_EVENT */
 80010f6:	e0a3      	b.n	8001240 <SVCCTL_App_Notification+0x2b4>
      blue_evt = (evt_blue_aci*) event_pckt->data;
 80010f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80010fa:	3302      	adds	r3, #2
 80010fc:	627b      	str	r3, [r7, #36]	; 0x24
      switch (blue_evt->ecode)
 80010fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001100:	881b      	ldrh	r3, [r3, #0]
 8001102:	b29b      	uxth	r3, r3
 8001104:	f240 4205 	movw	r2, #1029	; 0x405
 8001108:	4293      	cmp	r3, r2
 800110a:	d04a      	beq.n	80011a2 <SVCCTL_App_Notification+0x216>
 800110c:	f240 4205 	movw	r2, #1029	; 0x405
 8001110:	4293      	cmp	r3, r2
 8001112:	dc18      	bgt.n	8001146 <SVCCTL_App_Notification+0x1ba>
 8001114:	f240 4202 	movw	r2, #1026	; 0x402
 8001118:	4293      	cmp	r3, r2
 800111a:	d033      	beq.n	8001184 <SVCCTL_App_Notification+0x1f8>
 800111c:	f240 4202 	movw	r2, #1026	; 0x402
 8001120:	4293      	cmp	r3, r2
 8001122:	dc07      	bgt.n	8001134 <SVCCTL_App_Notification+0x1a8>
 8001124:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001128:	d028      	beq.n	800117c <SVCCTL_App_Notification+0x1f0>
 800112a:	f240 4201 	movw	r2, #1025	; 0x401
 800112e:	4293      	cmp	r3, r2
 8001130:	d069      	beq.n	8001206 <SVCCTL_App_Notification+0x27a>
      break; /* EVT_VENDOR */
 8001132:	e084      	b.n	800123e <SVCCTL_App_Notification+0x2b2>
      switch (blue_evt->ecode)
 8001134:	f240 4203 	movw	r2, #1027	; 0x403
 8001138:	4293      	cmp	r3, r2
 800113a:	d02a      	beq.n	8001192 <SVCCTL_App_Notification+0x206>
 800113c:	f240 4204 	movw	r2, #1028	; 0x404
 8001140:	4293      	cmp	r3, r2
 8001142:	d02a      	beq.n	800119a <SVCCTL_App_Notification+0x20e>
      break; /* EVT_VENDOR */
 8001144:	e07b      	b.n	800123e <SVCCTL_App_Notification+0x2b2>
      switch (blue_evt->ecode)
 8001146:	f5b3 6f81 	cmp.w	r3, #1032	; 0x408
 800114a:	d03a      	beq.n	80011c2 <SVCCTL_App_Notification+0x236>
 800114c:	f5b3 6f81 	cmp.w	r3, #1032	; 0x408
 8001150:	dc08      	bgt.n	8001164 <SVCCTL_App_Notification+0x1d8>
 8001152:	f240 4206 	movw	r2, #1030	; 0x406
 8001156:	4293      	cmp	r3, r2
 8001158:	d02f      	beq.n	80011ba <SVCCTL_App_Notification+0x22e>
 800115a:	f240 4207 	movw	r2, #1031	; 0x407
 800115e:	4293      	cmp	r3, r2
 8001160:	d069      	beq.n	8001236 <SVCCTL_App_Notification+0x2aa>
      break; /* EVT_VENDOR */
 8001162:	e06c      	b.n	800123e <SVCCTL_App_Notification+0x2b2>
      switch (blue_evt->ecode)
 8001164:	f240 420a 	movw	r2, #1034	; 0x40a
 8001168:	4293      	cmp	r3, r2
 800116a:	d02e      	beq.n	80011ca <SVCCTL_App_Notification+0x23e>
 800116c:	f240 420a 	movw	r2, #1034	; 0x40a
 8001170:	4293      	cmp	r3, r2
 8001172:	db2e      	blt.n	80011d2 <SVCCTL_App_Notification+0x246>
 8001174:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001178:	d05a      	beq.n	8001230 <SVCCTL_App_Notification+0x2a4>
      break; /* EVT_VENDOR */
 800117a:	e060      	b.n	800123e <SVCCTL_App_Notification+0x2b2>
        APP_DBG_MSG("\r\n\r** EVT_BLUE_GAP_LIMITED_DISCOVERABLE \n");
 800117c:	483e      	ldr	r0, [pc, #248]	; (8001278 <SVCCTL_App_Notification+0x2ec>)
 800117e:	f012 fcb1 	bl	8013ae4 <puts>
          break; /* EVT_BLUE_GAP_LIMITED_DISCOVERABLE */
 8001182:	e05c      	b.n	800123e <SVCCTL_App_Notification+0x2b2>
        APP_DBG_MSG("\r\n\r** EVT_BLUE_GAP_PASS_KEY_REQUEST \n");
 8001184:	483d      	ldr	r0, [pc, #244]	; (800127c <SVCCTL_App_Notification+0x2f0>)
 8001186:	f012 fcad 	bl	8013ae4 <puts>
        APP_DBG_MSG("\r\n\r** aci_gap_pass_key_resp \n");
 800118a:	483d      	ldr	r0, [pc, #244]	; (8001280 <SVCCTL_App_Notification+0x2f4>)
 800118c:	f012 fcaa 	bl	8013ae4 <puts>
          break; /* EVT_BLUE_GAP_PASS_KEY_REQUEST */
 8001190:	e055      	b.n	800123e <SVCCTL_App_Notification+0x2b2>
        APP_DBG_MSG("\r\n\r** EVT_BLUE_GAP_AUTHORIZATION_REQUEST \n");
 8001192:	483c      	ldr	r0, [pc, #240]	; (8001284 <SVCCTL_App_Notification+0x2f8>)
 8001194:	f012 fca6 	bl	8013ae4 <puts>
          break; /* EVT_BLUE_GAP_AUTHORIZATION_REQUEST */
 8001198:	e051      	b.n	800123e <SVCCTL_App_Notification+0x2b2>
        APP_DBG_MSG("\r\n\r** EVT_BLUE_GAP_SLAVE_SECURITY_INITIATED \n");
 800119a:	483b      	ldr	r0, [pc, #236]	; (8001288 <SVCCTL_App_Notification+0x2fc>)
 800119c:	f012 fca2 	bl	8013ae4 <puts>
          break; /* EVT_BLUE_GAP_SLAVE_SECURITY_INITIATED */
 80011a0:	e04d      	b.n	800123e <SVCCTL_App_Notification+0x2b2>
        APP_DBG_MSG("\r\n\r** EVT_BLUE_GAP_BOND_LOST \n");
 80011a2:	483a      	ldr	r0, [pc, #232]	; (800128c <SVCCTL_App_Notification+0x300>)
 80011a4:	f012 fc9e 	bl	8013ae4 <puts>
          aci_gap_allow_rebond(BleApplicationContext.BleApplicationContext_legacy.connectionHandle);
 80011a8:	4b28      	ldr	r3, [pc, #160]	; (800124c <SVCCTL_App_Notification+0x2c0>)
 80011aa:	8adb      	ldrh	r3, [r3, #22]
 80011ac:	4618      	mov	r0, r3
 80011ae:	f00b fca8 	bl	800cb02 <aci_gap_allow_rebond>
        APP_DBG_MSG("\r\n\r** Send allow rebond \n");
 80011b2:	4837      	ldr	r0, [pc, #220]	; (8001290 <SVCCTL_App_Notification+0x304>)
 80011b4:	f012 fc96 	bl	8013ae4 <puts>
          break; /* EVT_BLUE_GAP_BOND_LOST */
 80011b8:	e041      	b.n	800123e <SVCCTL_App_Notification+0x2b2>
        APP_DBG_MSG("\r\n\r** EVT_BLUE_GAP_DEVICE_FOUND \n");
 80011ba:	4836      	ldr	r0, [pc, #216]	; (8001294 <SVCCTL_App_Notification+0x308>)
 80011bc:	f012 fc92 	bl	8013ae4 <puts>
          break; /* EVT_BLUE_GAP_DEVICE_FOUND */
 80011c0:	e03d      	b.n	800123e <SVCCTL_App_Notification+0x2b2>
         APP_DBG_MSG("\r\n\r** EVT_BLUE_GAP_DEVICE_FOUND \n");
 80011c2:	4834      	ldr	r0, [pc, #208]	; (8001294 <SVCCTL_App_Notification+0x308>)
 80011c4:	f012 fc8e 	bl	8013ae4 <puts>
          break; /* EVT_BLUE_GAP_DEVICE_FOUND */
 80011c8:	e039      	b.n	800123e <SVCCTL_App_Notification+0x2b2>
         APP_DBG_MSG("\r\n\r** EVT_BLUE_GAP_KEYPRESS_NOTIFICATION \n");
 80011ca:	4833      	ldr	r0, [pc, #204]	; (8001298 <SVCCTL_App_Notification+0x30c>)
 80011cc:	f012 fc8a 	bl	8013ae4 <puts>
          break; /* EVT_BLUE_GAP_KEY_PRESS_NOTIFICATION */    
 80011d0:	e035      	b.n	800123e <SVCCTL_App_Notification+0x2b2>
                      ((aci_gap_numeric_comparison_value_event_rp0 *)(blue_evt->data))->Numeric_Value);
 80011d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011d4:	3302      	adds	r3, #2
          APP_DBG_MSG("numeric_value = %ld\n",
 80011d6:	f8d3 3002 	ldr.w	r3, [r3, #2]
 80011da:	4619      	mov	r1, r3
 80011dc:	482f      	ldr	r0, [pc, #188]	; (800129c <SVCCTL_App_Notification+0x310>)
 80011de:	f012 fc0d 	bl	80139fc <iprintf>
                      ((aci_gap_numeric_comparison_value_event_rp0 *)(blue_evt->data))->Numeric_Value);
 80011e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011e4:	3302      	adds	r3, #2
          APP_DBG_MSG("Hex_value = %lx\n",
 80011e6:	f8d3 3002 	ldr.w	r3, [r3, #2]
 80011ea:	4619      	mov	r1, r3
 80011ec:	482c      	ldr	r0, [pc, #176]	; (80012a0 <SVCCTL_App_Notification+0x314>)
 80011ee:	f012 fc05 	bl	80139fc <iprintf>
          aci_gap_numeric_comparison_value_confirm_yesno(BleApplicationContext.BleApplicationContext_legacy.connectionHandle, 1); /* CONFIRM_YES = 1 */
 80011f2:	4b16      	ldr	r3, [pc, #88]	; (800124c <SVCCTL_App_Notification+0x2c0>)
 80011f4:	8adb      	ldrh	r3, [r3, #22]
 80011f6:	2101      	movs	r1, #1
 80011f8:	4618      	mov	r0, r3
 80011fa:	f00b fccc 	bl	800cb96 <aci_gap_numeric_comparison_value_confirm_yesno>
          APP_DBG_MSG("\r\n\r** aci_gap_numeric_comparison_value_confirm_yesno-->YES \n");
 80011fe:	4829      	ldr	r0, [pc, #164]	; (80012a4 <SVCCTL_App_Notification+0x318>)
 8001200:	f012 fc70 	bl	8013ae4 <puts>
          break;
 8001204:	e01b      	b.n	800123e <SVCCTL_App_Notification+0x2b2>
            pairing_complete = (aci_gap_pairing_complete_event_rp0*)blue_evt->data;
 8001206:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001208:	3302      	adds	r3, #2
 800120a:	623b      	str	r3, [r7, #32]
            APP_DBG_MSG("BLE_CTRL_App_Notification: EVT_BLUE_GAP_PAIRING_CMPLT, pairing_complete->Status = %d\n",pairing_complete->Status);
 800120c:	6a3b      	ldr	r3, [r7, #32]
 800120e:	789b      	ldrb	r3, [r3, #2]
 8001210:	4619      	mov	r1, r3
 8001212:	4825      	ldr	r0, [pc, #148]	; (80012a8 <SVCCTL_App_Notification+0x31c>)
 8001214:	f012 fbf2 	bl	80139fc <iprintf>
            if (pairing_complete->Status == 0)
 8001218:	6a3b      	ldr	r3, [r7, #32]
 800121a:	789b      	ldrb	r3, [r3, #2]
 800121c:	2b00      	cmp	r3, #0
 800121e:	d103      	bne.n	8001228 <SVCCTL_App_Notification+0x29c>
              APP_DBG_MSG("\r\n\r** Pairing OK \n");
 8001220:	4822      	ldr	r0, [pc, #136]	; (80012ac <SVCCTL_App_Notification+0x320>)
 8001222:	f012 fc5f 	bl	8013ae4 <puts>
           break;    
 8001226:	e00a      	b.n	800123e <SVCCTL_App_Notification+0x2b2>
              APP_DBG_MSG("\r\n\r** Pairing KO \n");
 8001228:	4821      	ldr	r0, [pc, #132]	; (80012b0 <SVCCTL_App_Notification+0x324>)
 800122a:	f012 fc5b 	bl	8013ae4 <puts>
           break;    
 800122e:	e006      	b.n	800123e <SVCCTL_App_Notification+0x2b2>
          mutex = 1;
 8001230:	4b20      	ldr	r3, [pc, #128]	; (80012b4 <SVCCTL_App_Notification+0x328>)
 8001232:	2201      	movs	r2, #1
 8001234:	701a      	strb	r2, [r3, #0]
        APP_DBG_MSG("\r\n\r** EVT_BLUE_GAP_PROCEDURE_COMPLETE \n");
 8001236:	4820      	ldr	r0, [pc, #128]	; (80012b8 <SVCCTL_App_Notification+0x32c>)
 8001238:	f012 fc54 	bl	8013ae4 <puts>
          break; /* EVT_BLUE_GAP_PROCEDURE_COMPLETE */
 800123c:	bf00      	nop
      break; /* EVT_VENDOR */
 800123e:	bf00      	nop
  }

  return (SVCCTL_UserEvtFlowEnable);
 8001240:	2301      	movs	r3, #1
}
 8001242:	4618      	mov	r0, r3
 8001244:	3730      	adds	r7, #48	; 0x30
 8001246:	46bd      	mov	sp, r7
 8001248:	bd80      	pop	{r7, pc}
 800124a:	bf00      	nop
 800124c:	200001f8 	.word	0x200001f8
 8001250:	08015b8c 	.word	0x08015b8c
 8001254:	2000504c 	.word	0x2000504c
 8001258:	08015bb4 	.word	0x08015bb4
 800125c:	08015be0 	.word	0x08015be0
 8001260:	08015bfc 	.word	0x08015bfc
 8001264:	08015c20 	.word	0x08015c20
 8001268:	08015c48 	.word	0x08015c48
 800126c:	08015c5c 	.word	0x08015c5c
 8001270:	08015c78 	.word	0x08015c78
 8001274:	08015c90 	.word	0x08015c90
 8001278:	08015cc4 	.word	0x08015cc4
 800127c:	08015cf0 	.word	0x08015cf0
 8001280:	08015d18 	.word	0x08015d18
 8001284:	08015d38 	.word	0x08015d38
 8001288:	08015d64 	.word	0x08015d64
 800128c:	08015d94 	.word	0x08015d94
 8001290:	08015db4 	.word	0x08015db4
 8001294:	08015dd0 	.word	0x08015dd0
 8001298:	08015df4 	.word	0x08015df4
 800129c:	08015e20 	.word	0x08015e20
 80012a0:	08015e38 	.word	0x08015e38
 80012a4:	08015e4c 	.word	0x08015e4c
 80012a8:	08015e88 	.word	0x08015e88
 80012ac:	08015ee0 	.word	0x08015ee0
 80012b0:	08015ef4 	.word	0x08015ef4
 80012b4:	20005050 	.word	0x20005050
 80012b8:	08015f08 	.word	0x08015f08

080012bc <Ble_Tl_Init>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Ble_Tl_Init( void )
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	b082      	sub	sp, #8
 80012c0:	af00      	add	r7, sp, #0
  HCI_TL_HciInitConf_t Hci_Tl_Init_Conf;

  MtxHciId = osMutexNew( NULL );
 80012c2:	2000      	movs	r0, #0
 80012c4:	f00d ff0c 	bl	800f0e0 <osMutexNew>
 80012c8:	4602      	mov	r2, r0
 80012ca:	4b0b      	ldr	r3, [pc, #44]	; (80012f8 <Ble_Tl_Init+0x3c>)
 80012cc:	601a      	str	r2, [r3, #0]
  SemHciId = osSemaphoreNew( 1, 0, NULL ); /*< Create the semaphore and make it busy at initialization */
 80012ce:	2200      	movs	r2, #0
 80012d0:	2100      	movs	r1, #0
 80012d2:	2001      	movs	r0, #1
 80012d4:	f00e f84c 	bl	800f370 <osSemaphoreNew>
 80012d8:	4602      	mov	r2, r0
 80012da:	4b08      	ldr	r3, [pc, #32]	; (80012fc <Ble_Tl_Init+0x40>)
 80012dc:	601a      	str	r2, [r3, #0]

  Hci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&BleCmdBuffer;
 80012de:	4b08      	ldr	r3, [pc, #32]	; (8001300 <Ble_Tl_Init+0x44>)
 80012e0:	603b      	str	r3, [r7, #0]
  Hci_Tl_Init_Conf.StatusNotCallBack = BLE_StatusNot;
 80012e2:	4b08      	ldr	r3, [pc, #32]	; (8001304 <Ble_Tl_Init+0x48>)
 80012e4:	607b      	str	r3, [r7, #4]
  hci_init(BLE_UserEvtRx, (void*) &Hci_Tl_Init_Conf);
 80012e6:	463b      	mov	r3, r7
 80012e8:	4619      	mov	r1, r3
 80012ea:	4807      	ldr	r0, [pc, #28]	; (8001308 <Ble_Tl_Init+0x4c>)
 80012ec:	f00c f8f0 	bl	800d4d0 <hci_init>

  return;
 80012f0:	bf00      	nop
}
 80012f2:	3708      	adds	r7, #8
 80012f4:	46bd      	mov	sp, r7
 80012f6:	bd80      	pop	{r7, pc}
 80012f8:	20005054 	.word	0x20005054
 80012fc:	20005044 	.word	0x20005044
 8001300:	20030028 	.word	0x20030028
 8001304:	08001791 	.word	0x08001791
 8001308:	08001759 	.word	0x08001759

0800130c <Ble_Hci_Gap_Gatt_Init>:

static void Ble_Hci_Gap_Gatt_Init(void){
 800130c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800130e:	b08f      	sub	sp, #60	; 0x3c
 8001310:	af06      	add	r7, sp, #24

  uint8_t role;
  uint16_t gap_service_handle, gap_dev_name_char_handle, gap_appearance_char_handle;
  const uint8_t *bd_addr;
  uint32_t srd_bd_addr[2];
  uint16_t appearance[1] = { BLE_CFG_GAP_APPEARANCE };
 8001312:	f44f 7350 	mov.w	r3, #832	; 0x340
 8001316:	803b      	strh	r3, [r7, #0]

  /**
   * Initialize HCI layer
   */
  /*HCI Reset to synchronise BLE Stack*/
  hci_reset();
 8001318:	f00b ff99 	bl	800d24e <hci_reset>

  /**
   * Write the BD Address
   */

  bd_addr = BleGetBdAddress();
 800131c:	f000 f978 	bl	8001610 <BleGetBdAddress>
 8001320:	61f8      	str	r0, [r7, #28]
  aci_hal_write_config_data(CONFIG_DATA_PUBADDR_OFFSET,
 8001322:	69fa      	ldr	r2, [r7, #28]
 8001324:	2106      	movs	r1, #6
 8001326:	2000      	movs	r0, #0
 8001328:	f00b fed1 	bl	800d0ce <aci_hal_write_config_data>
                            CONFIG_DATA_PUBADDR_LEN,
                            (uint8_t*) bd_addr);

  /* BLE MAC in ADV Packet */
  manuf_data[ sizeof(manuf_data)-6] = bd_addr[5];
 800132c:	69fb      	ldr	r3, [r7, #28]
 800132e:	795a      	ldrb	r2, [r3, #5]
 8001330:	4b5c      	ldr	r3, [pc, #368]	; (80014a4 <Ble_Hci_Gap_Gatt_Init+0x198>)
 8001332:	721a      	strb	r2, [r3, #8]
  manuf_data[ sizeof(manuf_data)-5] = bd_addr[4];
 8001334:	69fb      	ldr	r3, [r7, #28]
 8001336:	791a      	ldrb	r2, [r3, #4]
 8001338:	4b5a      	ldr	r3, [pc, #360]	; (80014a4 <Ble_Hci_Gap_Gatt_Init+0x198>)
 800133a:	725a      	strb	r2, [r3, #9]
  manuf_data[ sizeof(manuf_data)-4] = bd_addr[3];
 800133c:	69fb      	ldr	r3, [r7, #28]
 800133e:	78da      	ldrb	r2, [r3, #3]
 8001340:	4b58      	ldr	r3, [pc, #352]	; (80014a4 <Ble_Hci_Gap_Gatt_Init+0x198>)
 8001342:	729a      	strb	r2, [r3, #10]
  manuf_data[ sizeof(manuf_data)-3] = bd_addr[2];
 8001344:	69fb      	ldr	r3, [r7, #28]
 8001346:	789a      	ldrb	r2, [r3, #2]
 8001348:	4b56      	ldr	r3, [pc, #344]	; (80014a4 <Ble_Hci_Gap_Gatt_Init+0x198>)
 800134a:	72da      	strb	r2, [r3, #11]
  manuf_data[ sizeof(manuf_data)-2] = bd_addr[1];
 800134c:	69fb      	ldr	r3, [r7, #28]
 800134e:	785a      	ldrb	r2, [r3, #1]
 8001350:	4b54      	ldr	r3, [pc, #336]	; (80014a4 <Ble_Hci_Gap_Gatt_Init+0x198>)
 8001352:	731a      	strb	r2, [r3, #12]
  manuf_data[ sizeof(manuf_data)-1] = bd_addr[0];
 8001354:	69fb      	ldr	r3, [r7, #28]
 8001356:	781a      	ldrb	r2, [r3, #0]
 8001358:	4b52      	ldr	r3, [pc, #328]	; (80014a4 <Ble_Hci_Gap_Gatt_Init+0x198>)
 800135a:	735a      	strb	r2, [r3, #13]

  /**
   * Write Identity root key used to derive LTK and CSRK
   */
    aci_hal_write_config_data(CONFIG_DATA_IR_OFFSET,
 800135c:	4a52      	ldr	r2, [pc, #328]	; (80014a8 <Ble_Hci_Gap_Gatt_Init+0x19c>)
 800135e:	2110      	movs	r1, #16
 8001360:	2018      	movs	r0, #24
 8001362:	f00b feb4 	bl	800d0ce <aci_hal_write_config_data>
                            (uint8_t*) BLE_CFG_IR_VALUE);

   /**
   * Write Encryption root key used to derive LTK and CSRK
   */
    aci_hal_write_config_data(CONFIG_DATA_ER_OFFSET,
 8001366:	4a51      	ldr	r2, [pc, #324]	; (80014ac <Ble_Hci_Gap_Gatt_Init+0x1a0>)
 8001368:	2110      	movs	r1, #16
 800136a:	2008      	movs	r0, #8
 800136c:	f00b feaf 	bl	800d0ce <aci_hal_write_config_data>
   * Static random Address
   * The two upper bits shall be set to 1
   * The lowest 32bits is read from the UDN to differentiate between devices
   * The RNG may be used to provide a random number on each power on
   */
  srd_bd_addr[1] =  0x0000ED6E;
 8001370:	f64e 536e 	movw	r3, #60782	; 0xed6e
 8001374:	60bb      	str	r3, [r7, #8]
  srd_bd_addr[0] =  LL_FLASH_GetUDN( );
 8001376:	f7ff fd6f 	bl	8000e58 <LL_FLASH_GetUDN>
 800137a:	4603      	mov	r3, r0
 800137c:	607b      	str	r3, [r7, #4]
  aci_hal_write_config_data( CONFIG_DATA_RANDOM_ADDRESS_OFFSET, CONFIG_DATA_RANDOM_ADDRESS_LEN, (uint8_t*)srd_bd_addr );
 800137e:	1d3b      	adds	r3, r7, #4
 8001380:	461a      	mov	r2, r3
 8001382:	2106      	movs	r1, #6
 8001384:	202e      	movs	r0, #46	; 0x2e
 8001386:	f00b fea2 	bl	800d0ce <aci_hal_write_config_data>

  /**
   * Write Identity root key used to derive LTK and CSRK
   */
    aci_hal_write_config_data( CONFIG_DATA_IR_OFFSET, CONFIG_DATA_IR_LEN, (uint8_t*)BLE_CFG_IR_VALUE );
 800138a:	4a47      	ldr	r2, [pc, #284]	; (80014a8 <Ble_Hci_Gap_Gatt_Init+0x19c>)
 800138c:	2110      	movs	r1, #16
 800138e:	2018      	movs	r0, #24
 8001390:	f00b fe9d 	bl	800d0ce <aci_hal_write_config_data>

   /**
   * Write Encryption root key used to derive LTK and CSRK
   */
    aci_hal_write_config_data( CONFIG_DATA_ER_OFFSET, CONFIG_DATA_ER_LEN, (uint8_t*)BLE_CFG_ER_VALUE );
 8001394:	4a45      	ldr	r2, [pc, #276]	; (80014ac <Ble_Hci_Gap_Gatt_Init+0x1a0>)
 8001396:	2110      	movs	r1, #16
 8001398:	2008      	movs	r0, #8
 800139a:	f00b fe98 	bl	800d0ce <aci_hal_write_config_data>

  /**
   * Set TX Power to 0dBm.
   */
  aci_hal_set_tx_power_level(1, CFG_TX_POWER);
 800139e:	2118      	movs	r1, #24
 80013a0:	2001      	movs	r0, #1
 80013a2:	f00b fefd 	bl	800d1a0 <aci_hal_set_tx_power_level>

  /**
   * Initialize GATT interface
   */
  aci_gatt_init();
 80013a6:	f00b fc4d 	bl	800cc44 <aci_gatt_init>

  /**
   * Initialize GAP interface
   */
  role = 0;
 80013aa:	2300      	movs	r3, #0
 80013ac:	76fb      	strb	r3, [r7, #27]

#if (BLE_CFG_PERIPHERAL == 1)
  role |= GAP_PERIPHERAL_ROLE;
 80013ae:	7efb      	ldrb	r3, [r7, #27]
 80013b0:	f043 0301 	orr.w	r3, r3, #1
 80013b4:	76fb      	strb	r3, [r7, #27]

#if (BLE_CFG_CENTRAL == 1)
  role |= GAP_CENTRAL_ROLE;
#endif

  if (role > 0)
 80013b6:	7efb      	ldrb	r3, [r7, #27]
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d024      	beq.n	8001406 <Ble_Hci_Gap_Gatt_Init+0xfa>
  {
    const char *name = "DRAMSAY";
 80013bc:	4b3c      	ldr	r3, [pc, #240]	; (80014b0 <Ble_Hci_Gap_Gatt_Init+0x1a4>)
 80013be:	617b      	str	r3, [r7, #20]
    aci_gap_init(role, 0,
 80013c0:	f107 0212 	add.w	r2, r7, #18
 80013c4:	7ef8      	ldrb	r0, [r7, #27]
 80013c6:	f107 030e 	add.w	r3, r7, #14
 80013ca:	9301      	str	r3, [sp, #4]
 80013cc:	f107 0310 	add.w	r3, r7, #16
 80013d0:	9300      	str	r3, [sp, #0]
 80013d2:	4613      	mov	r3, r2
 80013d4:	2207      	movs	r2, #7
 80013d6:	2100      	movs	r1, #0
 80013d8:	f00b fa88 	bl	800c8ec <aci_gap_init>
                 APPBLE_GAP_DEVICE_NAME_LENGTH,
                 &gap_service_handle, &gap_dev_name_char_handle, &gap_appearance_char_handle);

    if (aci_gatt_update_char_value(gap_service_handle, gap_dev_name_char_handle, 0, strlen(name), (uint8_t *) name))
 80013dc:	8a7c      	ldrh	r4, [r7, #18]
 80013de:	8a3d      	ldrh	r5, [r7, #16]
 80013e0:	6978      	ldr	r0, [r7, #20]
 80013e2:	f7fe fecd 	bl	8000180 <strlen>
 80013e6:	4603      	mov	r3, r0
 80013e8:	b2da      	uxtb	r2, r3
 80013ea:	697b      	ldr	r3, [r7, #20]
 80013ec:	9300      	str	r3, [sp, #0]
 80013ee:	4613      	mov	r3, r2
 80013f0:	2200      	movs	r2, #0
 80013f2:	4629      	mov	r1, r5
 80013f4:	4620      	mov	r0, r4
 80013f6:	f00b fde3 	bl	800cfc0 <aci_gatt_update_char_value>
 80013fa:	4603      	mov	r3, r0
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d002      	beq.n	8001406 <Ble_Hci_Gap_Gatt_Init+0xfa>
    {
      BLE_DBG_SVCCTL_MSG("Device Name aci_gatt_update_char_value failed.\n");
 8001400:	482c      	ldr	r0, [pc, #176]	; (80014b4 <Ble_Hci_Gap_Gatt_Init+0x1a8>)
 8001402:	f012 fb6f 	bl	8013ae4 <puts>
    }
  }

  if(aci_gatt_update_char_value(gap_service_handle,
 8001406:	8a78      	ldrh	r0, [r7, #18]
 8001408:	89f9      	ldrh	r1, [r7, #14]
 800140a:	463b      	mov	r3, r7
 800140c:	9300      	str	r3, [sp, #0]
 800140e:	2302      	movs	r3, #2
 8001410:	2200      	movs	r2, #0
 8001412:	f00b fdd5 	bl	800cfc0 <aci_gatt_update_char_value>
 8001416:	4603      	mov	r3, r0
 8001418:	2b00      	cmp	r3, #0
 800141a:	d002      	beq.n	8001422 <Ble_Hci_Gap_Gatt_Init+0x116>
                                gap_appearance_char_handle,
                                0,
                                2,
                                (uint8_t *)&appearance))
  {
    BLE_DBG_SVCCTL_MSG("Appearance aci_gatt_update_char_value failed.\n");
 800141c:	4826      	ldr	r0, [pc, #152]	; (80014b8 <Ble_Hci_Gap_Gatt_Init+0x1ac>)
 800141e:	f012 fb61 	bl	8013ae4 <puts>
  }
  /**
   * Initialize Default PHY
   */
  hci_le_set_default_phy(ALL_PHYS_PREFERENCE,TX_2M_PREFERRED,RX_2M_PREFERRED);
 8001422:	2202      	movs	r2, #2
 8001424:	2102      	movs	r1, #2
 8001426:	2000      	movs	r0, #0
 8001428:	f00b ff9d 	bl	800d366 <hci_le_set_default_phy>

  /**
   * Initialize IO capability
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability = CFG_IO_CAPABILITY;
 800142c:	4b23      	ldr	r3, [pc, #140]	; (80014bc <Ble_Hci_Gap_Gatt_Init+0x1b0>)
 800142e:	2201      	movs	r2, #1
 8001430:	701a      	strb	r2, [r3, #0]
  aci_gap_set_io_capability(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability);
 8001432:	4b22      	ldr	r3, [pc, #136]	; (80014bc <Ble_Hci_Gap_Gatt_Init+0x1b0>)
 8001434:	781b      	ldrb	r3, [r3, #0]
 8001436:	4618      	mov	r0, r3
 8001438:	f00b f966 	bl	800c708 <aci_gap_set_io_capability>

  /**
   * Initialize authentication
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.mitm_mode = CFG_MITM_PROTECTION;
 800143c:	4b1f      	ldr	r3, [pc, #124]	; (80014bc <Ble_Hci_Gap_Gatt_Init+0x1b0>)
 800143e:	2201      	movs	r2, #1
 8001440:	705a      	strb	r2, [r3, #1]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMin = CFG_ENCRYPTION_KEY_SIZE_MIN;
 8001442:	4b1e      	ldr	r3, [pc, #120]	; (80014bc <Ble_Hci_Gap_Gatt_Init+0x1b0>)
 8001444:	2208      	movs	r2, #8
 8001446:	711a      	strb	r2, [r3, #4]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMax = CFG_ENCRYPTION_KEY_SIZE_MAX;
 8001448:	4b1c      	ldr	r3, [pc, #112]	; (80014bc <Ble_Hci_Gap_Gatt_Init+0x1b0>)
 800144a:	2210      	movs	r2, #16
 800144c:	715a      	strb	r2, [r3, #5]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Use_Fixed_Pin = CFG_USED_FIXED_PIN;
 800144e:	4b1b      	ldr	r3, [pc, #108]	; (80014bc <Ble_Hci_Gap_Gatt_Init+0x1b0>)
 8001450:	2200      	movs	r2, #0
 8001452:	70da      	strb	r2, [r3, #3]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Fixed_Pin = CFG_FIXED_PIN;
 8001454:	4b19      	ldr	r3, [pc, #100]	; (80014bc <Ble_Hci_Gap_Gatt_Init+0x1b0>)
 8001456:	4a1a      	ldr	r2, [pc, #104]	; (80014c0 <Ble_Hci_Gap_Gatt_Init+0x1b4>)
 8001458:	609a      	str	r2, [r3, #8]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode = CFG_BONDING_MODE;
 800145a:	4b18      	ldr	r3, [pc, #96]	; (80014bc <Ble_Hci_Gap_Gatt_Init+0x1b0>)
 800145c:	2201      	movs	r2, #1
 800145e:	709a      	strb	r2, [r3, #2]

  aci_gap_set_authentication_requirement(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode,
 8001460:	4b16      	ldr	r3, [pc, #88]	; (80014bc <Ble_Hci_Gap_Gatt_Init+0x1b0>)
 8001462:	789d      	ldrb	r5, [r3, #2]
 8001464:	4b15      	ldr	r3, [pc, #84]	; (80014bc <Ble_Hci_Gap_Gatt_Init+0x1b0>)
 8001466:	785e      	ldrb	r6, [r3, #1]
 8001468:	4b14      	ldr	r3, [pc, #80]	; (80014bc <Ble_Hci_Gap_Gatt_Init+0x1b0>)
 800146a:	791b      	ldrb	r3, [r3, #4]
 800146c:	4a13      	ldr	r2, [pc, #76]	; (80014bc <Ble_Hci_Gap_Gatt_Init+0x1b0>)
 800146e:	7952      	ldrb	r2, [r2, #5]
 8001470:	4912      	ldr	r1, [pc, #72]	; (80014bc <Ble_Hci_Gap_Gatt_Init+0x1b0>)
 8001472:	78c9      	ldrb	r1, [r1, #3]
 8001474:	4811      	ldr	r0, [pc, #68]	; (80014bc <Ble_Hci_Gap_Gatt_Init+0x1b0>)
 8001476:	6880      	ldr	r0, [r0, #8]
 8001478:	2400      	movs	r4, #0
 800147a:	9404      	str	r4, [sp, #16]
 800147c:	9003      	str	r0, [sp, #12]
 800147e:	9102      	str	r1, [sp, #8]
 8001480:	9201      	str	r2, [sp, #4]
 8001482:	9300      	str	r3, [sp, #0]
 8001484:	2300      	movs	r3, #0
 8001486:	2201      	movs	r2, #1
 8001488:	4631      	mov	r1, r6
 800148a:	4628      	mov	r0, r5
 800148c:	f00b f986 	bl	800c79c <aci_gap_set_authentication_requirement>
                                         );

  /**
   * Initialize whitelist
   */
   if (BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode)
 8001490:	4b0a      	ldr	r3, [pc, #40]	; (80014bc <Ble_Hci_Gap_Gatt_Init+0x1b0>)
 8001492:	789b      	ldrb	r3, [r3, #2]
 8001494:	2b00      	cmp	r3, #0
 8001496:	d001      	beq.n	800149c <Ble_Hci_Gap_Gatt_Init+0x190>
   {
     aci_gap_configure_whitelist();
 8001498:	f00b fb0f 	bl	800caba <aci_gap_configure_whitelist>
   }
}
 800149c:	bf00      	nop
 800149e:	3724      	adds	r7, #36	; 0x24
 80014a0:	46bd      	mov	sp, r7
 80014a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80014a4:	20000004 	.word	0x20000004
 80014a8:	08016414 	.word	0x08016414
 80014ac:	08016424 	.word	0x08016424
 80014b0:	08015f30 	.word	0x08015f30
 80014b4:	08015f38 	.word	0x08015f38
 80014b8:	08015f68 	.word	0x08015f68
 80014bc:	200001f8 	.word	0x200001f8
 80014c0:	0001b207 	.word	0x0001b207

080014c4 <Adv_Request>:

static void Adv_Request(APP_BLE_ConnStatus_t New_Status)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b08c      	sub	sp, #48	; 0x30
 80014c8:	af08      	add	r7, sp, #32
 80014ca:	4603      	mov	r3, r0
 80014cc:	71fb      	strb	r3, [r7, #7]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 80014ce:	2342      	movs	r3, #66	; 0x42
 80014d0:	72fb      	strb	r3, [r7, #11]
  uint16_t Min_Inter, Max_Inter;

  if (New_Status == APP_BLE_FAST_ADV)
 80014d2:	79fb      	ldrb	r3, [r7, #7]
 80014d4:	2b01      	cmp	r3, #1
 80014d6:	d106      	bne.n	80014e6 <Adv_Request+0x22>
  {
    Min_Inter = AdvIntervalMin;
 80014d8:	4b3f      	ldr	r3, [pc, #252]	; (80015d8 <Adv_Request+0x114>)
 80014da:	881b      	ldrh	r3, [r3, #0]
 80014dc:	81fb      	strh	r3, [r7, #14]
    Max_Inter = AdvIntervalMax;
 80014de:	4b3f      	ldr	r3, [pc, #252]	; (80015dc <Adv_Request+0x118>)
 80014e0:	881b      	ldrh	r3, [r3, #0]
 80014e2:	81bb      	strh	r3, [r7, #12]
 80014e4:	e005      	b.n	80014f2 <Adv_Request+0x2e>
  }
  else
  {
    Min_Inter = CFG_LP_CONN_ADV_INTERVAL_MIN;
 80014e6:	f44f 63c8 	mov.w	r3, #1600	; 0x640
 80014ea:	81fb      	strh	r3, [r7, #14]
    Max_Inter = CFG_LP_CONN_ADV_INTERVAL_MAX;
 80014ec:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 80014f0:	81bb      	strh	r3, [r7, #12]

    /**
     * Stop the timer, it will be restarted for a new shot
     * It does not hurt if the timer was not running
     */
    HW_TS_Stop(BleApplicationContext.Advertising_mgr_timer_Id);
 80014f2:	4b3b      	ldr	r3, [pc, #236]	; (80015e0 <Adv_Request+0x11c>)
 80014f4:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80014f8:	4618      	mov	r0, r3
 80014fa:	f002 fad7 	bl	8003aac <HW_TS_Stop>

    APP_DBG_MSG("First index in %d state \n", BleApplicationContext.Device_Connection_Status);
 80014fe:	4b38      	ldr	r3, [pc, #224]	; (80015e0 <Adv_Request+0x11c>)
 8001500:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8001504:	4619      	mov	r1, r3
 8001506:	4837      	ldr	r0, [pc, #220]	; (80015e4 <Adv_Request+0x120>)
 8001508:	f012 fa78 	bl	80139fc <iprintf>

    if ((New_Status == APP_BLE_LP_ADV)
 800150c:	79fb      	ldrb	r3, [r7, #7]
 800150e:	2b02      	cmp	r3, #2
 8001510:	d119      	bne.n	8001546 <Adv_Request+0x82>
        && ((BleApplicationContext.Device_Connection_Status == APP_BLE_FAST_ADV)
 8001512:	4b33      	ldr	r3, [pc, #204]	; (80015e0 <Adv_Request+0x11c>)
 8001514:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8001518:	2b01      	cmp	r3, #1
 800151a:	d004      	beq.n	8001526 <Adv_Request+0x62>
            || (BleApplicationContext.Device_Connection_Status == APP_BLE_LP_ADV)))
 800151c:	4b30      	ldr	r3, [pc, #192]	; (80015e0 <Adv_Request+0x11c>)
 800151e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8001522:	2b02      	cmp	r3, #2
 8001524:	d10f      	bne.n	8001546 <Adv_Request+0x82>
    {
      /* Connection in ADVERTISE mode have to stop the current advertising */
      ret = aci_gap_set_non_discoverable();
 8001526:	f00a ffed 	bl	800c504 <aci_gap_set_non_discoverable>
 800152a:	4603      	mov	r3, r0
 800152c:	72fb      	strb	r3, [r7, #11]
      if (ret == BLE_STATUS_SUCCESS)
 800152e:	7afb      	ldrb	r3, [r7, #11]
 8001530:	2b00      	cmp	r3, #0
 8001532:	d103      	bne.n	800153c <Adv_Request+0x78>
      {
        APP_DBG_MSG("Successfully Stopped Advertising \n");
 8001534:	482c      	ldr	r0, [pc, #176]	; (80015e8 <Adv_Request+0x124>)
 8001536:	f012 fad5 	bl	8013ae4 <puts>
 800153a:	e004      	b.n	8001546 <Adv_Request+0x82>
      }
      else
      {
        APP_DBG_MSG("Stop Advertising Failed , result: %d \n", ret);
 800153c:	7afb      	ldrb	r3, [r7, #11]
 800153e:	4619      	mov	r1, r3
 8001540:	482a      	ldr	r0, [pc, #168]	; (80015ec <Adv_Request+0x128>)
 8001542:	f012 fa5b 	bl	80139fc <iprintf>
      }
    }

    BleApplicationContext.Device_Connection_Status = New_Status;
 8001546:	4a26      	ldr	r2, [pc, #152]	; (80015e0 <Adv_Request+0x11c>)
 8001548:	79fb      	ldrb	r3, [r7, #7]
 800154a:	f882 3080 	strb.w	r3, [r2, #128]	; 0x80
    /* Start Fast or Low Power Advertising */
    ret = aci_gap_set_discoverable(
 800154e:	4b24      	ldr	r3, [pc, #144]	; (80015e0 <Adv_Request+0x11c>)
 8001550:	7e1b      	ldrb	r3, [r3, #24]
 8001552:	89b8      	ldrh	r0, [r7, #12]
 8001554:	89f9      	ldrh	r1, [r7, #14]
 8001556:	2200      	movs	r2, #0
 8001558:	9206      	str	r2, [sp, #24]
 800155a:	2200      	movs	r2, #0
 800155c:	9205      	str	r2, [sp, #20]
 800155e:	4a24      	ldr	r2, [pc, #144]	; (80015f0 <Adv_Request+0x12c>)
 8001560:	9204      	str	r2, [sp, #16]
 8001562:	9303      	str	r3, [sp, #12]
 8001564:	4b23      	ldr	r3, [pc, #140]	; (80015f4 <Adv_Request+0x130>)
 8001566:	9302      	str	r3, [sp, #8]
 8001568:	2308      	movs	r3, #8
 800156a:	9301      	str	r3, [sp, #4]
 800156c:	2300      	movs	r3, #0
 800156e:	9300      	str	r3, [sp, #0]
 8001570:	2300      	movs	r3, #0
 8001572:	4602      	mov	r2, r0
 8001574:	2000      	movs	r0, #0
 8001576:	f00a ffe9 	bl	800c54c <aci_gap_set_discoverable>
 800157a:	4603      	mov	r3, r0
 800157c:	72fb      	strb	r3, [r7, #11]
        BleApplicationContext.BleApplicationContext_legacy.advtServUUID,
        0,
        0);

    /* Update Advertising data */
    ret = aci_gap_update_adv_data(sizeof(manuf_data), (uint8_t*) manuf_data);
 800157e:	491e      	ldr	r1, [pc, #120]	; (80015f8 <Adv_Request+0x134>)
 8001580:	200e      	movs	r0, #14
 8001582:	f00b fa3e 	bl	800ca02 <aci_gap_update_adv_data>
 8001586:	4603      	mov	r3, r0
 8001588:	72fb      	strb	r3, [r7, #11]
    if (ret == BLE_STATUS_SUCCESS)
 800158a:	7afb      	ldrb	r3, [r7, #11]
 800158c:	2b00      	cmp	r3, #0
 800158e:	d111      	bne.n	80015b4 <Adv_Request+0xf0>
    {
      if (New_Status == APP_BLE_FAST_ADV)
 8001590:	79fb      	ldrb	r3, [r7, #7]
 8001592:	2b01      	cmp	r3, #1
 8001594:	d10a      	bne.n	80015ac <Adv_Request+0xe8>
      {
        APP_DBG_MSG("Successfully Start Fast Advertising \n" );
 8001596:	4819      	ldr	r0, [pc, #100]	; (80015fc <Adv_Request+0x138>)
 8001598:	f012 faa4 	bl	8013ae4 <puts>
        /* Start Timer to STOP ADV - TIMEOUT */
        HW_TS_Start(BleApplicationContext.Advertising_mgr_timer_Id, INITIAL_ADV_TIMEOUT);
 800159c:	4b10      	ldr	r3, [pc, #64]	; (80015e0 <Adv_Request+0x11c>)
 800159e:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80015a2:	4917      	ldr	r1, [pc, #92]	; (8001600 <Adv_Request+0x13c>)
 80015a4:	4618      	mov	r0, r3
 80015a6:	f002 fb0b 	bl	8003bc0 <HW_TS_Start>
      {
        APP_DBG_MSG("Start Low Power Advertising Failed , result: %d \n", ret);
      }
    }

  return;
 80015aa:	e012      	b.n	80015d2 <Adv_Request+0x10e>
        APP_DBG_MSG("Successfully Start Low Power Advertising \n");
 80015ac:	4815      	ldr	r0, [pc, #84]	; (8001604 <Adv_Request+0x140>)
 80015ae:	f012 fa99 	bl	8013ae4 <puts>
  return;
 80015b2:	e00e      	b.n	80015d2 <Adv_Request+0x10e>
      if (New_Status == APP_BLE_FAST_ADV)
 80015b4:	79fb      	ldrb	r3, [r7, #7]
 80015b6:	2b01      	cmp	r3, #1
 80015b8:	d105      	bne.n	80015c6 <Adv_Request+0x102>
        APP_DBG_MSG("Start Fast Advertising Failed , result: %d \n", ret);
 80015ba:	7afb      	ldrb	r3, [r7, #11]
 80015bc:	4619      	mov	r1, r3
 80015be:	4812      	ldr	r0, [pc, #72]	; (8001608 <Adv_Request+0x144>)
 80015c0:	f012 fa1c 	bl	80139fc <iprintf>
  return;
 80015c4:	e005      	b.n	80015d2 <Adv_Request+0x10e>
        APP_DBG_MSG("Start Low Power Advertising Failed , result: %d \n", ret);
 80015c6:	7afb      	ldrb	r3, [r7, #11]
 80015c8:	4619      	mov	r1, r3
 80015ca:	4810      	ldr	r0, [pc, #64]	; (800160c <Adv_Request+0x148>)
 80015cc:	f012 fa16 	bl	80139fc <iprintf>
  return;
 80015d0:	bf00      	nop
}
 80015d2:	3710      	adds	r7, #16
 80015d4:	46bd      	mov	sp, r7
 80015d6:	bd80      	pop	{r7, pc}
 80015d8:	2000027c 	.word	0x2000027c
 80015dc:	2000027e 	.word	0x2000027e
 80015e0:	200001f8 	.word	0x200001f8
 80015e4:	08015f98 	.word	0x08015f98
 80015e8:	08015fb4 	.word	0x08015fb4
 80015ec:	08015fd8 	.word	0x08015fd8
 80015f0:	20000211 	.word	0x20000211
 80015f4:	08016434 	.word	0x08016434
 80015f8:	20000004 	.word	0x20000004
 80015fc:	08016000 	.word	0x08016000
 8001600:	0001e046 	.word	0x0001e046
 8001604:	08016028 	.word	0x08016028
 8001608:	08016054 	.word	0x08016054
 800160c:	08016084 	.word	0x08016084

08001610 <BleGetBdAddress>:

const uint8_t* BleGetBdAddress( void )
{
 8001610:	b580      	push	{r7, lr}
 8001612:	b086      	sub	sp, #24
 8001614:	af00      	add	r7, sp, #0
  const uint8_t *bd_addr;
  uint32_t udn;
  uint32_t company_id;
  uint32_t device_id;

  udn = LL_FLASH_GetUDN();
 8001616:	f7ff fc1f 	bl	8000e58 <LL_FLASH_GetUDN>
 800161a:	6138      	str	r0, [r7, #16]

  if(udn != 0xFFFFFFFF)
 800161c:	693b      	ldr	r3, [r7, #16]
 800161e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001622:	d023      	beq.n	800166c <BleGetBdAddress+0x5c>
  {
    company_id = LL_FLASH_GetSTCompanyID();
 8001624:	f7ff fc30 	bl	8000e88 <LL_FLASH_GetSTCompanyID>
 8001628:	60b8      	str	r0, [r7, #8]
    device_id = LL_FLASH_GetDeviceID();
 800162a:	f7ff fc21 	bl	8000e70 <LL_FLASH_GetDeviceID>
 800162e:	6078      	str	r0, [r7, #4]

    bd_addr_udn[0] = (uint8_t)(udn & 0x000000FF);
 8001630:	693b      	ldr	r3, [r7, #16]
 8001632:	b2da      	uxtb	r2, r3
 8001634:	4b16      	ldr	r3, [pc, #88]	; (8001690 <BleGetBdAddress+0x80>)
 8001636:	701a      	strb	r2, [r3, #0]
    bd_addr_udn[1] = (uint8_t)( (udn & 0x0000FF00) >> 8 );
 8001638:	693b      	ldr	r3, [r7, #16]
 800163a:	0a1b      	lsrs	r3, r3, #8
 800163c:	b2da      	uxtb	r2, r3
 800163e:	4b14      	ldr	r3, [pc, #80]	; (8001690 <BleGetBdAddress+0x80>)
 8001640:	705a      	strb	r2, [r3, #1]
    bd_addr_udn[2] = (uint8_t)( (udn & 0x00FF0000) >> 16 );
 8001642:	693b      	ldr	r3, [r7, #16]
 8001644:	0c1b      	lsrs	r3, r3, #16
 8001646:	b2da      	uxtb	r2, r3
 8001648:	4b11      	ldr	r3, [pc, #68]	; (8001690 <BleGetBdAddress+0x80>)
 800164a:	709a      	strb	r2, [r3, #2]
    bd_addr_udn[3] = (uint8_t)device_id;
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	b2da      	uxtb	r2, r3
 8001650:	4b0f      	ldr	r3, [pc, #60]	; (8001690 <BleGetBdAddress+0x80>)
 8001652:	70da      	strb	r2, [r3, #3]
    bd_addr_udn[4] = (uint8_t)(company_id & 0x000000FF);;
 8001654:	68bb      	ldr	r3, [r7, #8]
 8001656:	b2da      	uxtb	r2, r3
 8001658:	4b0d      	ldr	r3, [pc, #52]	; (8001690 <BleGetBdAddress+0x80>)
 800165a:	711a      	strb	r2, [r3, #4]
    bd_addr_udn[5] = (uint8_t)( (company_id & 0x0000FF00) >> 8 );
 800165c:	68bb      	ldr	r3, [r7, #8]
 800165e:	0a1b      	lsrs	r3, r3, #8
 8001660:	b2da      	uxtb	r2, r3
 8001662:	4b0b      	ldr	r3, [pc, #44]	; (8001690 <BleGetBdAddress+0x80>)
 8001664:	715a      	strb	r2, [r3, #5]

    bd_addr = (const uint8_t *)bd_addr_udn;
 8001666:	4b0a      	ldr	r3, [pc, #40]	; (8001690 <BleGetBdAddress+0x80>)
 8001668:	617b      	str	r3, [r7, #20]
 800166a:	e00b      	b.n	8001684 <BleGetBdAddress+0x74>
  }
  else
  {
    otp_addr = OTP_Read(0);
 800166c:	2000      	movs	r0, #0
 800166e:	f00c fe1d 	bl	800e2ac <OTP_Read>
 8001672:	60f8      	str	r0, [r7, #12]
    if(otp_addr)
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	2b00      	cmp	r3, #0
 8001678:	d002      	beq.n	8001680 <BleGetBdAddress+0x70>
    {
      bd_addr = ((OTP_ID0_t*)otp_addr)->bd_address;
 800167a:	68fb      	ldr	r3, [r7, #12]
 800167c:	617b      	str	r3, [r7, #20]
 800167e:	e001      	b.n	8001684 <BleGetBdAddress+0x74>
    }
    else
    {
      bd_addr = M_bd_addr;
 8001680:	4b04      	ldr	r3, [pc, #16]	; (8001694 <BleGetBdAddress+0x84>)
 8001682:	617b      	str	r3, [r7, #20]
    }

  }

  return bd_addr;
 8001684:	697b      	ldr	r3, [r7, #20]
}
 8001686:	4618      	mov	r0, r3
 8001688:	3718      	adds	r7, #24
 800168a:	46bd      	mov	sp, r7
 800168c:	bd80      	pop	{r7, pc}
 800168e:	bf00      	nop
 8001690:	200003a4 	.word	0x200003a4
 8001694:	0801640c 	.word	0x0801640c

08001698 <Adv_Mgr>:
  return;
}
*/

static void Adv_Mgr( void )
{
 8001698:	b580      	push	{r7, lr}
 800169a:	af00      	add	r7, sp, #0
  /**
   * The code shall be executed in the background as an aci command may be sent
   * The background is the only place where the application can make sure a new aci command
   * is not sent if there is a pending one
   */
  osThreadFlagsSet( AdvUpdateProcessId, 1 );
 800169c:	4b03      	ldr	r3, [pc, #12]	; (80016ac <Adv_Mgr+0x14>)
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	2101      	movs	r1, #1
 80016a2:	4618      	mov	r0, r3
 80016a4:	f00d fbf8 	bl	800ee98 <osThreadFlagsSet>

  return;
 80016a8:	bf00      	nop
}
 80016aa:	bd80      	pop	{r7, pc}
 80016ac:	20005058 	.word	0x20005058

080016b0 <AdvUpdateProcess>:

static void AdvUpdateProcess(void *argument)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b082      	sub	sp, #8
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]
  UNUSED(argument);

  for(;;)
  {
    osThreadFlagsWait( 1, osFlagsWaitAny, osWaitForever);
 80016b8:	f04f 32ff 	mov.w	r2, #4294967295
 80016bc:	2100      	movs	r1, #0
 80016be:	2001      	movs	r0, #1
 80016c0:	f00d fc4c 	bl	800ef5c <osThreadFlagsWait>
    Adv_Update( );
 80016c4:	f000 f801 	bl	80016ca <Adv_Update>
    osThreadFlagsWait( 1, osFlagsWaitAny, osWaitForever);
 80016c8:	e7f6      	b.n	80016b8 <AdvUpdateProcess+0x8>

080016ca <Adv_Update>:
  }
}

static void Adv_Update( void )
{
 80016ca:	b580      	push	{r7, lr}
 80016cc:	af00      	add	r7, sp, #0
  Adv_Request(APP_BLE_LP_ADV);
 80016ce:	2002      	movs	r0, #2
 80016d0:	f7ff fef8 	bl	80014c4 <Adv_Request>

  return;
 80016d4:	bf00      	nop
}
 80016d6:	bd80      	pop	{r7, pc}

080016d8 <HciUserEvtProcess>:
  }
  return;
}

static void HciUserEvtProcess(void *argument)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	b082      	sub	sp, #8
 80016dc:	af00      	add	r7, sp, #0
 80016de:	6078      	str	r0, [r7, #4]
  UNUSED(argument);

  for(;;)
  {
    osThreadFlagsWait( 1, osFlagsWaitAny, osWaitForever);
 80016e0:	f04f 32ff 	mov.w	r2, #4294967295
 80016e4:	2100      	movs	r1, #0
 80016e6:	2001      	movs	r0, #1
 80016e8:	f00d fc38 	bl	800ef5c <osThreadFlagsWait>
    hci_user_evt_proc( );
 80016ec:	f00b ff0c 	bl	800d508 <hci_user_evt_proc>
    osThreadFlagsWait( 1, osFlagsWaitAny, osWaitForever);
 80016f0:	e7f6      	b.n	80016e0 <HciUserEvtProcess+0x8>
	...

080016f4 <hci_notify_asynch_evt>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void hci_notify_asynch_evt(void* pdata)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b082      	sub	sp, #8
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	6078      	str	r0, [r7, #4]
  UNUSED(pdata);
  osThreadFlagsSet( HciUserEvtProcessId, 1 );
 80016fc:	4b04      	ldr	r3, [pc, #16]	; (8001710 <hci_notify_asynch_evt+0x1c>)
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	2101      	movs	r1, #1
 8001702:	4618      	mov	r0, r3
 8001704:	f00d fbc8 	bl	800ee98 <osThreadFlagsSet>
  return;
 8001708:	bf00      	nop
}
 800170a:	3708      	adds	r7, #8
 800170c:	46bd      	mov	sp, r7
 800170e:	bd80      	pop	{r7, pc}
 8001710:	20005048 	.word	0x20005048

08001714 <hci_cmd_resp_release>:

void hci_cmd_resp_release(uint32_t flag)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	b082      	sub	sp, #8
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
  UNUSED(flag);
  osSemaphoreRelease( SemHciId );
 800171c:	4b04      	ldr	r3, [pc, #16]	; (8001730 <hci_cmd_resp_release+0x1c>)
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	4618      	mov	r0, r3
 8001722:	f00d ff29 	bl	800f578 <osSemaphoreRelease>
  return;
 8001726:	bf00      	nop
}
 8001728:	3708      	adds	r7, #8
 800172a:	46bd      	mov	sp, r7
 800172c:	bd80      	pop	{r7, pc}
 800172e:	bf00      	nop
 8001730:	20005044 	.word	0x20005044

08001734 <hci_cmd_resp_wait>:

void hci_cmd_resp_wait(uint32_t timeout)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	b082      	sub	sp, #8
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]
  UNUSED(timeout);
  osSemaphoreAcquire( SemHciId, osWaitForever );
 800173c:	4b05      	ldr	r3, [pc, #20]	; (8001754 <hci_cmd_resp_wait+0x20>)
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	f04f 31ff 	mov.w	r1, #4294967295
 8001744:	4618      	mov	r0, r3
 8001746:	f00d feb1 	bl	800f4ac <osSemaphoreAcquire>
  return;
 800174a:	bf00      	nop
}
 800174c:	3708      	adds	r7, #8
 800174e:	46bd      	mov	sp, r7
 8001750:	bd80      	pop	{r7, pc}
 8001752:	bf00      	nop
 8001754:	20005044 	.word	0x20005044

08001758 <BLE_UserEvtRx>:

static void BLE_UserEvtRx( void * pPayload )
{
 8001758:	b580      	push	{r7, lr}
 800175a:	b084      	sub	sp, #16
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
  SVCCTL_UserEvtFlowStatus_t svctl_return_status;
  tHCI_UserEvtRxParam *pParam;

  pParam = (tHCI_UserEvtRxParam *)pPayload;
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	60fb      	str	r3, [r7, #12]

  svctl_return_status = SVCCTL_UserEvtRx((void *)&(pParam->pckt->evtserial));
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	685b      	ldr	r3, [r3, #4]
 8001768:	3308      	adds	r3, #8
 800176a:	4618      	mov	r0, r3
 800176c:	f00a fe78 	bl	800c460 <SVCCTL_UserEvtRx>
 8001770:	4603      	mov	r3, r0
 8001772:	72fb      	strb	r3, [r7, #11]
  if (svctl_return_status != SVCCTL_UserEvtFlowDisable)
 8001774:	7afb      	ldrb	r3, [r7, #11]
 8001776:	2b00      	cmp	r3, #0
 8001778:	d003      	beq.n	8001782 <BLE_UserEvtRx+0x2a>
  {
    pParam->status = HCI_TL_UserEventFlow_Enable;
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	2201      	movs	r2, #1
 800177e:	701a      	strb	r2, [r3, #0]
  }
  else
  {
    pParam->status = HCI_TL_UserEventFlow_Disable;
  }
}
 8001780:	e002      	b.n	8001788 <BLE_UserEvtRx+0x30>
    pParam->status = HCI_TL_UserEventFlow_Disable;
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	2200      	movs	r2, #0
 8001786:	701a      	strb	r2, [r3, #0]
}
 8001788:	bf00      	nop
 800178a:	3710      	adds	r7, #16
 800178c:	46bd      	mov	sp, r7
 800178e:	bd80      	pop	{r7, pc}

08001790 <BLE_StatusNot>:

static void BLE_StatusNot( HCI_TL_CmdStatus_t status )
{
 8001790:	b580      	push	{r7, lr}
 8001792:	b082      	sub	sp, #8
 8001794:	af00      	add	r7, sp, #0
 8001796:	4603      	mov	r3, r0
 8001798:	71fb      	strb	r3, [r7, #7]
  switch (status)
 800179a:	79fb      	ldrb	r3, [r7, #7]
 800179c:	2b00      	cmp	r3, #0
 800179e:	d002      	beq.n	80017a6 <BLE_StatusNot+0x16>
 80017a0:	2b01      	cmp	r3, #1
 80017a2:	d008      	beq.n	80017b6 <BLE_StatusNot+0x26>
    case HCI_TL_CmdAvailable:
      osMutexRelease( MtxHciId );
      break;

    default:
      break;
 80017a4:	e00d      	b.n	80017c2 <BLE_StatusNot+0x32>
      osMutexAcquire( MtxHciId, osWaitForever );
 80017a6:	4b09      	ldr	r3, [pc, #36]	; (80017cc <BLE_StatusNot+0x3c>)
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	f04f 31ff 	mov.w	r1, #4294967295
 80017ae:	4618      	mov	r0, r3
 80017b0:	f00d fd30 	bl	800f214 <osMutexAcquire>
      break;
 80017b4:	e005      	b.n	80017c2 <BLE_StatusNot+0x32>
      osMutexRelease( MtxHciId );
 80017b6:	4b05      	ldr	r3, [pc, #20]	; (80017cc <BLE_StatusNot+0x3c>)
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	4618      	mov	r0, r3
 80017bc:	f00d fd88 	bl	800f2d0 <osMutexRelease>
      break;
 80017c0:	bf00      	nop
  }
  return;
 80017c2:	bf00      	nop
}
 80017c4:	3708      	adds	r7, #8
 80017c6:	46bd      	mov	sp, r7
 80017c8:	bd80      	pop	{r7, pc}
 80017ca:	bf00      	nop
 80017cc:	20005054 	.word	0x20005054

080017d0 <P2PS_STM_App_Notification>:
static void P2PS_APP_LED_BUTTON_context_Init(void);
/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void P2PS_STM_App_Notification(P2PS_STM_App_Notification_evt_t *pNotification)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b094      	sub	sp, #80	; 0x50
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN P2PS_STM_App_Notification_1 */

/* USER CODE END P2PS_STM_App_Notification_1 */
  switch(pNotification->P2P_Evt_Opcode)
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	781b      	ldrb	r3, [r3, #0]
 80017dc:	2b01      	cmp	r3, #1
 80017de:	d00e      	beq.n	80017fe <P2PS_STM_App_Notification+0x2e>
 80017e0:	2b03      	cmp	r3, #3
 80017e2:	d016      	beq.n	8001812 <P2PS_STM_App_Notification+0x42>
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d000      	beq.n	80017ea <P2PS_STM_App_Notification+0x1a>

    default:
/* USER CODE BEGIN P2PS_STM_App_Notification_default */

/* USER CODE END P2PS_STM_App_Notification_default */
      break;
 80017e8:	e0ed      	b.n	80019c6 <P2PS_STM_App_Notification+0x1f6>
      P2P_Server_App_Context.Notification_Status = 1;
 80017ea:	4b79      	ldr	r3, [pc, #484]	; (80019d0 <P2PS_STM_App_Notification+0x200>)
 80017ec:	2201      	movs	r2, #1
 80017ee:	701a      	strb	r2, [r3, #0]
      APP_DBG_MSG("-- P2P APPLICATION SERVER : NOTIFICATION ENABLED\n");
 80017f0:	4878      	ldr	r0, [pc, #480]	; (80019d4 <P2PS_STM_App_Notification+0x204>)
 80017f2:	f012 f977 	bl	8013ae4 <puts>
      APP_DBG_MSG(" \n\r");
 80017f6:	4878      	ldr	r0, [pc, #480]	; (80019d8 <P2PS_STM_App_Notification+0x208>)
 80017f8:	f012 f900 	bl	80139fc <iprintf>
      break;
 80017fc:	e0e3      	b.n	80019c6 <P2PS_STM_App_Notification+0x1f6>
      P2P_Server_App_Context.Notification_Status = 0;
 80017fe:	4b74      	ldr	r3, [pc, #464]	; (80019d0 <P2PS_STM_App_Notification+0x200>)
 8001800:	2200      	movs	r2, #0
 8001802:	701a      	strb	r2, [r3, #0]
      APP_DBG_MSG("-- P2P APPLICATION SERVER : NOTIFICATION DISABLED\n");
 8001804:	4875      	ldr	r0, [pc, #468]	; (80019dc <P2PS_STM_App_Notification+0x20c>)
 8001806:	f012 f96d 	bl	8013ae4 <puts>
      APP_DBG_MSG(" \n\r");
 800180a:	4873      	ldr	r0, [pc, #460]	; (80019d8 <P2PS_STM_App_Notification+0x208>)
 800180c:	f012 f8f6 	bl	80139fc <iprintf>
      break;
 8001810:	e0d9      	b.n	80019c6 <P2PS_STM_App_Notification+0x1f6>
      if(pNotification->DataTransfered.pPayload[0] == 0x00){ /* ALL Devices selected */
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	685b      	ldr	r3, [r3, #4]
 8001816:	781b      	ldrb	r3, [r3, #0]
 8001818:	2b00      	cmp	r3, #0
 800181a:	d16e      	bne.n	80018fa <P2PS_STM_App_Notification+0x12a>
	    APP_DBG_MSG("-- P2P APPLICATION SERVER  : A PAYLOAD FOR ALL DEVICES HAS BEEN RX\n");
 800181c:	4870      	ldr	r0, [pc, #448]	; (80019e0 <P2PS_STM_App_Notification+0x210>)
 800181e:	f012 f961 	bl	8013ae4 <puts>
	    APP_DBG_MSG(" \n\r");
 8001822:	486d      	ldr	r0, [pc, #436]	; (80019d8 <P2PS_STM_App_Notification+0x208>)
 8001824:	f012 f8ea 	bl	80139fc <iprintf>
	    memcpy(&P2P_Server_App_Context.OTATimestamp, &(pNotification->DataTransfered.pPayload[2]), 8);
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	685b      	ldr	r3, [r3, #4]
 800182c:	3302      	adds	r3, #2
 800182e:	2208      	movs	r2, #8
 8001830:	4619      	mov	r1, r3
 8001832:	486c      	ldr	r0, [pc, #432]	; (80019e4 <P2PS_STM_App_Notification+0x214>)
 8001834:	f011 fbca 	bl	8012fcc <memcpy>
	    P2P_Server_App_Context.OTA12HrFormat = pNotification->DataTransfered.pPayload[10];
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	685b      	ldr	r3, [r3, #4]
 800183c:	7a9a      	ldrb	r2, [r3, #10]
 800183e:	4b64      	ldr	r3, [pc, #400]	; (80019d0 <P2PS_STM_App_Notification+0x200>)
 8001840:	741a      	strb	r2, [r3, #16]
		P2P_Server_App_Context.OTADaylightSavings = pNotification->DataTransfered.pPayload[11];
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	685b      	ldr	r3, [r3, #4]
 8001846:	7ada      	ldrb	r2, [r3, #11]
 8001848:	4b61      	ldr	r3, [pc, #388]	; (80019d0 <P2PS_STM_App_Notification+0x200>)
 800184a:	745a      	strb	r2, [r3, #17]
		RTC_TimeTypeDef sTime = {0};
 800184c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001850:	2200      	movs	r2, #0
 8001852:	601a      	str	r2, [r3, #0]
 8001854:	605a      	str	r2, [r3, #4]
 8001856:	609a      	str	r2, [r3, #8]
 8001858:	60da      	str	r2, [r3, #12]
 800185a:	611a      	str	r2, [r3, #16]
		RTC_DateTypeDef sDate = {0};
 800185c:	2300      	movs	r3, #0
 800185e:	637b      	str	r3, [r7, #52]	; 0x34
		memcpy(timestampvals, &(P2P_Server_App_Context.OTATimestamp), 8);
 8001860:	4a5b      	ldr	r2, [pc, #364]	; (80019d0 <P2PS_STM_App_Notification+0x200>)
 8001862:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001866:	3208      	adds	r2, #8
 8001868:	e892 0003 	ldmia.w	r2, {r0, r1}
 800186c:	e883 0003 	stmia.w	r3, {r0, r1}
		uint8_t AMPM = timestampvals[0];
 8001870:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001874:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
		sTime.Hours      = timestampvals[3];
 8001878:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800187c:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
		sTime.Minutes    = timestampvals[2];
 8001880:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8001884:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
		sTime.Seconds    = timestampvals[1];
 8001888:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800188c:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
		sTime.SubSeconds = 0x0;
 8001890:	2300      	movs	r3, #0
 8001892:	63fb      	str	r3, [r7, #60]	; 0x3c
		sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001894:	2300      	movs	r3, #0
 8001896:	647b      	str	r3, [r7, #68]	; 0x44
		if (P2P_Server_App_Context.OTADaylightSavings){ sTime.DayLightSaving = RTC_DAYLIGHTSAVING_ADD1H; }
 8001898:	4b4d      	ldr	r3, [pc, #308]	; (80019d0 <P2PS_STM_App_Notification+0x200>)
 800189a:	7c5b      	ldrb	r3, [r3, #17]
 800189c:	2b00      	cmp	r3, #0
 800189e:	d002      	beq.n	80018a6 <P2PS_STM_App_Notification+0xd6>
 80018a0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80018a4:	647b      	str	r3, [r7, #68]	; 0x44
		sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80018a6:	2300      	movs	r3, #0
 80018a8:	64bb      	str	r3, [r7, #72]	; 0x48
		if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80018aa:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80018ae:	2201      	movs	r2, #1
 80018b0:	4619      	mov	r1, r3
 80018b2:	484d      	ldr	r0, [pc, #308]	; (80019e8 <P2PS_STM_App_Notification+0x218>)
 80018b4:	f007 fe63 	bl	800957e <HAL_RTC_SetTime>
 80018b8:	4603      	mov	r3, r0
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d001      	beq.n	80018c2 <P2PS_STM_App_Notification+0xf2>
			Error_Handler();
 80018be:	f003 ff47 	bl	8005750 <Error_Handler>
		sDate.WeekDay = timestampvals[7];
 80018c2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80018c6:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
		sDate.Month   = timestampvals[6];
 80018ca:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80018ce:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
		sDate.Date    = timestampvals[5];
 80018d2:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 80018d6:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
		sDate.Year    = timestampvals[4];
 80018da:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80018de:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 80018e2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80018e6:	2201      	movs	r2, #1
 80018e8:	4619      	mov	r1, r3
 80018ea:	483f      	ldr	r0, [pc, #252]	; (80019e8 <P2PS_STM_App_Notification+0x218>)
 80018ec:	f007 ff67 	bl	80097be <HAL_RTC_SetDate>
 80018f0:	4603      	mov	r3, r0
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d001      	beq.n	80018fa <P2PS_STM_App_Notification+0x12a>
			Error_Handler();
 80018f6:	f003 ff2b 	bl	8005750 <Error_Handler>
      if(pNotification->DataTransfered.pPayload[0] == 0x01){ /* device 1 selected*/
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	685b      	ldr	r3, [r3, #4]
 80018fe:	781b      	ldrb	r3, [r3, #0]
 8001900:	2b01      	cmp	r3, #1
 8001902:	d15f      	bne.n	80019c4 <P2PS_STM_App_Notification+0x1f4>
			memcpy(&P2P_Server_App_Context.OTATimestamp, &(pNotification->DataTransfered.pPayload[2]), 8);
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	685b      	ldr	r3, [r3, #4]
 8001908:	3302      	adds	r3, #2
 800190a:	2208      	movs	r2, #8
 800190c:	4619      	mov	r1, r3
 800190e:	4835      	ldr	r0, [pc, #212]	; (80019e4 <P2PS_STM_App_Notification+0x214>)
 8001910:	f011 fb5c 	bl	8012fcc <memcpy>
			P2P_Server_App_Context.OTA12HrFormat = pNotification->DataTransfered.pPayload[10];
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	685b      	ldr	r3, [r3, #4]
 8001918:	7a9a      	ldrb	r2, [r3, #10]
 800191a:	4b2d      	ldr	r3, [pc, #180]	; (80019d0 <P2PS_STM_App_Notification+0x200>)
 800191c:	741a      	strb	r2, [r3, #16]
			P2P_Server_App_Context.OTADaylightSavings = pNotification->DataTransfered.pPayload[11];
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	685b      	ldr	r3, [r3, #4]
 8001922:	7ada      	ldrb	r2, [r3, #11]
 8001924:	4b2a      	ldr	r3, [pc, #168]	; (80019d0 <P2PS_STM_App_Notification+0x200>)
 8001926:	745a      	strb	r2, [r3, #17]
			RTC_TimeTypeDef sTime = {0};
 8001928:	f107 0318 	add.w	r3, r7, #24
 800192c:	2200      	movs	r2, #0
 800192e:	601a      	str	r2, [r3, #0]
 8001930:	605a      	str	r2, [r3, #4]
 8001932:	609a      	str	r2, [r3, #8]
 8001934:	60da      	str	r2, [r3, #12]
 8001936:	611a      	str	r2, [r3, #16]
			RTC_DateTypeDef sDate = {0};
 8001938:	2300      	movs	r3, #0
 800193a:	617b      	str	r3, [r7, #20]
			memcpy(timestampvals, &(P2P_Server_App_Context.OTATimestamp), 8);
 800193c:	4a24      	ldr	r2, [pc, #144]	; (80019d0 <P2PS_STM_App_Notification+0x200>)
 800193e:	f107 030c 	add.w	r3, r7, #12
 8001942:	3208      	adds	r2, #8
 8001944:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001948:	e883 0003 	stmia.w	r3, {r0, r1}
			uint8_t AMPM = timestampvals[0];
 800194c:	7b3b      	ldrb	r3, [r7, #12]
 800194e:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
			sTime.Hours      = timestampvals[3];
 8001952:	7bfb      	ldrb	r3, [r7, #15]
 8001954:	763b      	strb	r3, [r7, #24]
			sTime.Minutes    = timestampvals[2];
 8001956:	7bbb      	ldrb	r3, [r7, #14]
 8001958:	767b      	strb	r3, [r7, #25]
			sTime.Seconds    = timestampvals[1];
 800195a:	7b7b      	ldrb	r3, [r7, #13]
 800195c:	76bb      	strb	r3, [r7, #26]
			sTime.SubSeconds = 0x0;
 800195e:	2300      	movs	r3, #0
 8001960:	61fb      	str	r3, [r7, #28]
			sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001962:	2300      	movs	r3, #0
 8001964:	627b      	str	r3, [r7, #36]	; 0x24
			if (P2P_Server_App_Context.OTADaylightSavings){ sTime.DayLightSaving = RTC_DAYLIGHTSAVING_ADD1H; }
 8001966:	4b1a      	ldr	r3, [pc, #104]	; (80019d0 <P2PS_STM_App_Notification+0x200>)
 8001968:	7c5b      	ldrb	r3, [r3, #17]
 800196a:	2b00      	cmp	r3, #0
 800196c:	d002      	beq.n	8001974 <P2PS_STM_App_Notification+0x1a4>
 800196e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001972:	627b      	str	r3, [r7, #36]	; 0x24
			sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001974:	2300      	movs	r3, #0
 8001976:	62bb      	str	r3, [r7, #40]	; 0x28
			if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8001978:	f107 0318 	add.w	r3, r7, #24
 800197c:	2201      	movs	r2, #1
 800197e:	4619      	mov	r1, r3
 8001980:	4819      	ldr	r0, [pc, #100]	; (80019e8 <P2PS_STM_App_Notification+0x218>)
 8001982:	f007 fdfc 	bl	800957e <HAL_RTC_SetTime>
 8001986:	4603      	mov	r3, r0
 8001988:	2b00      	cmp	r3, #0
 800198a:	d001      	beq.n	8001990 <P2PS_STM_App_Notification+0x1c0>
				Error_Handler();
 800198c:	f003 fee0 	bl	8005750 <Error_Handler>
			sDate.WeekDay = timestampvals[7];
 8001990:	7cfb      	ldrb	r3, [r7, #19]
 8001992:	753b      	strb	r3, [r7, #20]
			sDate.Month   = timestampvals[6];
 8001994:	7cbb      	ldrb	r3, [r7, #18]
 8001996:	757b      	strb	r3, [r7, #21]
			sDate.Date    = timestampvals[5];
 8001998:	7c7b      	ldrb	r3, [r7, #17]
 800199a:	75bb      	strb	r3, [r7, #22]
			sDate.Year    = timestampvals[4];
 800199c:	7c3b      	ldrb	r3, [r7, #16]
 800199e:	75fb      	strb	r3, [r7, #23]
			if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 80019a0:	f107 0314 	add.w	r3, r7, #20
 80019a4:	2201      	movs	r2, #1
 80019a6:	4619      	mov	r1, r3
 80019a8:	480f      	ldr	r0, [pc, #60]	; (80019e8 <P2PS_STM_App_Notification+0x218>)
 80019aa:	f007 ff08 	bl	80097be <HAL_RTC_SetDate>
 80019ae:	4603      	mov	r3, r0
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d001      	beq.n	80019b8 <P2PS_STM_App_Notification+0x1e8>
				Error_Handler();
 80019b4:	f003 fecc 	bl	8005750 <Error_Handler>
		  APP_DBG_MSG("-- P2P APPLICATION SERVER 1 : MSG RX\n");
 80019b8:	480c      	ldr	r0, [pc, #48]	; (80019ec <P2PS_STM_App_Notification+0x21c>)
 80019ba:	f012 f893 	bl	8013ae4 <puts>
          APP_DBG_MSG(" \n\r");
 80019be:	4806      	ldr	r0, [pc, #24]	; (80019d8 <P2PS_STM_App_Notification+0x208>)
 80019c0:	f012 f81c 	bl	80139fc <iprintf>
      break;
 80019c4:	bf00      	nop
  }
/* USER CODE BEGIN P2PS_STM_App_Notification_2 */

/* USER CODE END P2PS_STM_App_Notification_2 */
  return;
 80019c6:	bf00      	nop
}
 80019c8:	3750      	adds	r7, #80	; 0x50
 80019ca:	46bd      	mov	sp, r7
 80019cc:	bd80      	pop	{r7, pc}
 80019ce:	bf00      	nop
 80019d0:	20000280 	.word	0x20000280
 80019d4:	0801611c 	.word	0x0801611c
 80019d8:	08016150 	.word	0x08016150
 80019dc:	08016154 	.word	0x08016154
 80019e0:	08016188 	.word	0x08016188
 80019e4:	20000288 	.word	0x20000288
 80019e8:	20005260 	.word	0x20005260
 80019ec:	080161cc 	.word	0x080161cc

080019f0 <P2PS_APP_Notification>:

void P2PS_APP_Notification(P2PS_APP_ConnHandle_Not_evt_t *pNotification)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	b082      	sub	sp, #8
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN P2PS_APP_Notification_1 */

/* USER CODE END P2PS_APP_Notification_1 */
  switch(pNotification->P2P_Evt_Opcode)
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	781b      	ldrb	r3, [r3, #0]
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d005      	beq.n	8001a0c <P2PS_APP_Notification+0x1c>
 8001a00:	2b01      	cmp	r3, #1
 8001a02:	d000      	beq.n	8001a06 <P2PS_APP_Notification+0x16>

    default:
/* USER CODE BEGIN P2PS_APP_Notification_default */

/* USER CODE END P2PS_APP_Notification_default */
      break;
 8001a04:	e003      	b.n	8001a0e <P2PS_APP_Notification+0x1e>
       P2PS_APP_LED_BUTTON_context_Init();
 8001a06:	f000 f821 	bl	8001a4c <P2PS_APP_LED_BUTTON_context_Init>
    break;
 8001a0a:	e000      	b.n	8001a0e <P2PS_APP_Notification+0x1e>
    break;
 8001a0c:	bf00      	nop
  }
/* USER CODE BEGIN P2PS_APP_Notification_2 */

/* USER CODE END P2PS_APP_Notification_2 */
  return;
 8001a0e:	bf00      	nop
}
 8001a10:	3708      	adds	r7, #8
 8001a12:	46bd      	mov	sp, r7
 8001a14:	bd80      	pop	{r7, pc}
	...

08001a18 <P2PS_APP_Init>:

void P2PS_APP_Init(void)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	af00      	add	r7, sp, #0
/* USER CODE BEGIN P2PS_APP_Init */
  //P2P FIX UTIL_SEQ_RegTask( 1<< CFG_TASK_SW1_BUTTON_PUSHED_ID, UTIL_SEQ_RFU, P2PS_Send_Notification );
  P2PProcessId = osThreadNew(P2PProcess, NULL, &P2PProcess_attr);
 8001a1c:	4a07      	ldr	r2, [pc, #28]	; (8001a3c <P2PS_APP_Init+0x24>)
 8001a1e:	2100      	movs	r1, #0
 8001a20:	4807      	ldr	r0, [pc, #28]	; (8001a40 <P2PS_APP_Init+0x28>)
 8001a22:	f00d f993 	bl	800ed4c <osThreadNew>
 8001a26:	4602      	mov	r2, r0
 8001a28:	4b06      	ldr	r3, [pc, #24]	; (8001a44 <P2PS_APP_Init+0x2c>)
 8001a2a:	601a      	str	r2, [r3, #0]
  /**
   * Initialize LedButton Service
   */
  P2P_Server_App_Context.Notification_Status=0;
 8001a2c:	4b06      	ldr	r3, [pc, #24]	; (8001a48 <P2PS_APP_Init+0x30>)
 8001a2e:	2200      	movs	r2, #0
 8001a30:	701a      	strb	r2, [r3, #0]
  P2PS_APP_LED_BUTTON_context_Init();
 8001a32:	f000 f80b 	bl	8001a4c <P2PS_APP_LED_BUTTON_context_Init>
/* USER CODE END P2PS_APP_Init */
  return;
 8001a36:	bf00      	nop
}
 8001a38:	bd80      	pop	{r7, pc}
 8001a3a:	bf00      	nop
 8001a3c:	08016484 	.word	0x08016484
 8001a40:	08001b85 	.word	0x08001b85
 8001a44:	2000505c 	.word	0x2000505c
 8001a48:	20000280 	.word	0x20000280

08001a4c <P2PS_APP_LED_BUTTON_context_Init>:

/* USER CODE BEGIN FD */
void P2PS_APP_LED_BUTTON_context_Init(void){
 8001a4c:	b490      	push	{r4, r7}
 8001a4e:	af00      	add	r7, sp, #0


  P2P_Server_App_Context.LedControl.Device_Led_Selection=0x01; /* Device1 */
 8001a50:	4b0e      	ldr	r3, [pc, #56]	; (8001a8c <P2PS_APP_LED_BUTTON_context_Init+0x40>)
 8001a52:	2201      	movs	r2, #1
 8001a54:	705a      	strb	r2, [r3, #1]
  P2P_Server_App_Context.LedControl.Led1=0x00; /* led OFF */
 8001a56:	4b0d      	ldr	r3, [pc, #52]	; (8001a8c <P2PS_APP_LED_BUTTON_context_Init+0x40>)
 8001a58:	2200      	movs	r2, #0
 8001a5a:	709a      	strb	r2, [r3, #2]
  P2P_Server_App_Context.ButtonControl.Device_Button_Selection=0x01;/* Device1 */
 8001a5c:	4b0b      	ldr	r3, [pc, #44]	; (8001a8c <P2PS_APP_LED_BUTTON_context_Init+0x40>)
 8001a5e:	2201      	movs	r2, #1
 8001a60:	70da      	strb	r2, [r3, #3]
  P2P_Server_App_Context.ButtonControl.ButtonStatus=0x00;
 8001a62:	4b0a      	ldr	r3, [pc, #40]	; (8001a8c <P2PS_APP_LED_BUTTON_context_Init+0x40>)
 8001a64:	2200      	movs	r2, #0
 8001a66:	711a      	strb	r2, [r3, #4]
  P2P_Server_App_Context.OTATimestamp=0x0000000000000000;
 8001a68:	4a08      	ldr	r2, [pc, #32]	; (8001a8c <P2PS_APP_LED_BUTTON_context_Init+0x40>)
 8001a6a:	f04f 0300 	mov.w	r3, #0
 8001a6e:	f04f 0400 	mov.w	r4, #0
 8001a72:	e9c2 3402 	strd	r3, r4, [r2, #8]
  P2P_Server_App_Context.OTA12HrFormat=0x00;
 8001a76:	4b05      	ldr	r3, [pc, #20]	; (8001a8c <P2PS_APP_LED_BUTTON_context_Init+0x40>)
 8001a78:	2200      	movs	r2, #0
 8001a7a:	741a      	strb	r2, [r3, #16]
  P2P_Server_App_Context.OTADaylightSavings=0x00;
 8001a7c:	4b03      	ldr	r3, [pc, #12]	; (8001a8c <P2PS_APP_LED_BUTTON_context_Init+0x40>)
 8001a7e:	2200      	movs	r2, #0
 8001a80:	745a      	strb	r2, [r3, #17]
}
 8001a82:	bf00      	nop
 8001a84:	46bd      	mov	sp, r7
 8001a86:	bc90      	pop	{r4, r7}
 8001a88:	4770      	bx	lr
 8001a8a:	bf00      	nop
 8001a8c:	20000280 	.word	0x20000280

08001a90 <P2PS_APP_SW1_Button_Action>:

void P2PS_APP_SW1_Button_Action(void)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	af00      	add	r7, sp, #0
  //P2P FIX UTIL_SEQ_SetTask( 1<<CFG_TASK_SW1_BUTTON_PUSHED_ID, CFG_SCH_PRIO_0);
  osThreadFlagsSet( P2PProcessId, 1 );
 8001a94:	4b03      	ldr	r3, [pc, #12]	; (8001aa4 <P2PS_APP_SW1_Button_Action+0x14>)
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	2101      	movs	r1, #1
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	f00d f9fc 	bl	800ee98 <osThreadFlagsSet>
  return;
 8001aa0:	bf00      	nop
}
 8001aa2:	bd80      	pop	{r7, pc}
 8001aa4:	2000505c 	.word	0x2000505c

08001aa8 <P2PS_Send_Notification>:
 * LOCAL FUNCTIONS
 *
 *************************************************************/
/* USER CODE BEGIN FD_LOCAL_FUNCTIONS*/
void P2PS_Send_Notification(void)
{
 8001aa8:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8001aac:	b088      	sub	sp, #32
 8001aae:	af00      	add	r7, sp, #0

  if(P2P_Server_App_Context.ButtonControl.ButtonStatus == 0x00){
 8001ab0:	4b2f      	ldr	r3, [pc, #188]	; (8001b70 <P2PS_Send_Notification+0xc8>)
 8001ab2:	791b      	ldrb	r3, [r3, #4]
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d103      	bne.n	8001ac0 <P2PS_Send_Notification+0x18>
    P2P_Server_App_Context.ButtonControl.ButtonStatus=0x01;
 8001ab8:	4b2d      	ldr	r3, [pc, #180]	; (8001b70 <P2PS_Send_Notification+0xc8>)
 8001aba:	2201      	movs	r2, #1
 8001abc:	711a      	strb	r2, [r3, #4]
 8001abe:	e002      	b.n	8001ac6 <P2PS_Send_Notification+0x1e>
  } else {
    P2P_Server_App_Context.ButtonControl.ButtonStatus=0x00;
 8001ac0:	4b2b      	ldr	r3, [pc, #172]	; (8001b70 <P2PS_Send_Notification+0xc8>)
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	711a      	strb	r2, [r3, #4]
  }

   if(P2P_Server_App_Context.Notification_Status){
 8001ac6:	4b2a      	ldr	r3, [pc, #168]	; (8001b70 <P2PS_Send_Notification+0xc8>)
 8001ac8:	781b      	ldrb	r3, [r3, #0]
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d048      	beq.n	8001b60 <P2PS_Send_Notification+0xb8>
    APP_DBG_MSG("-- P2P APPLICATION SERVER  : INFORM CLIENT BUTTON 1 PUSHED \n ");
 8001ace:	4829      	ldr	r0, [pc, #164]	; (8001b74 <P2PS_Send_Notification+0xcc>)
 8001ad0:	f011 ff94 	bl	80139fc <iprintf>
    APP_DBG_MSG(" \n\r");
 8001ad4:	4828      	ldr	r0, [pc, #160]	; (8001b78 <P2PS_Send_Notification+0xd0>)
 8001ad6:	f011 ff91 	bl	80139fc <iprintf>


    RTC_TimeTypeDef cTime;
	RTC_DateTypeDef cDate;

	HAL_RTC_GetTime(&hrtc, &cTime, RTC_FORMAT_BCD);
 8001ada:	f107 030c 	add.w	r3, r7, #12
 8001ade:	2201      	movs	r2, #1
 8001ae0:	4619      	mov	r1, r3
 8001ae2:	4826      	ldr	r0, [pc, #152]	; (8001b7c <P2PS_Send_Notification+0xd4>)
 8001ae4:	f007 fe0f 	bl	8009706 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &cDate, RTC_FORMAT_BCD);
 8001ae8:	f107 0308 	add.w	r3, r7, #8
 8001aec:	2201      	movs	r2, #1
 8001aee:	4619      	mov	r1, r3
 8001af0:	4822      	ldr	r0, [pc, #136]	; (8001b7c <P2PS_Send_Notification+0xd4>)
 8001af2:	f007 ff12 	bl	800991a <HAL_RTC_GetDate>

	uint64_t sendval = (cDate.WeekDay << (8*3)) | (cDate.Month << (8*2)) | (cDate.Date << (8*1)) | cDate.Year;
 8001af6:	7a3b      	ldrb	r3, [r7, #8]
 8001af8:	061a      	lsls	r2, r3, #24
 8001afa:	7a7b      	ldrb	r3, [r7, #9]
 8001afc:	041b      	lsls	r3, r3, #16
 8001afe:	431a      	orrs	r2, r3
 8001b00:	7abb      	ldrb	r3, [r7, #10]
 8001b02:	021b      	lsls	r3, r3, #8
 8001b04:	4313      	orrs	r3, r2
 8001b06:	7afa      	ldrb	r2, [r7, #11]
 8001b08:	4313      	orrs	r3, r2
 8001b0a:	ea4f 74e3 	mov.w	r4, r3, asr #31
 8001b0e:	e9c7 3400 	strd	r3, r4, [r7]
	sendval <<= 32;
 8001b12:	e9d7 1200 	ldrd	r1, r2, [r7]
 8001b16:	f04f 0300 	mov.w	r3, #0
 8001b1a:	f04f 0400 	mov.w	r4, #0
 8001b1e:	000c      	movs	r4, r1
 8001b20:	2300      	movs	r3, #0
 8001b22:	e9c7 3400 	strd	r3, r4, [r7]
	sendval |= (cTime.Hours << (8*3)) | (cTime.Minutes << (8*2)) | (cTime.Seconds << (8*1)) | (cTime.TimeFormat);
 8001b26:	7b3b      	ldrb	r3, [r7, #12]
 8001b28:	061a      	lsls	r2, r3, #24
 8001b2a:	7b7b      	ldrb	r3, [r7, #13]
 8001b2c:	041b      	lsls	r3, r3, #16
 8001b2e:	431a      	orrs	r2, r3
 8001b30:	7bbb      	ldrb	r3, [r7, #14]
 8001b32:	021b      	lsls	r3, r3, #8
 8001b34:	4313      	orrs	r3, r2
 8001b36:	7bfa      	ldrb	r2, [r7, #15]
 8001b38:	4313      	orrs	r3, r2
 8001b3a:	4619      	mov	r1, r3
 8001b3c:	ea4f 72e1 	mov.w	r2, r1, asr #31
 8001b40:	e9d7 bc00 	ldrd	fp, ip, [r7]
 8001b44:	ea4b 0301 	orr.w	r3, fp, r1
 8001b48:	ea4c 0402 	orr.w	r4, ip, r2
 8001b4c:	e9c7 3400 	strd	r3, r4, [r7]

	P2PS_STM_App_Update_Int8(P2P_NOTIFY_CHAR_UUID, (uint8_t *)&sendval, 8);
 8001b50:	463b      	mov	r3, r7
 8001b52:	2208      	movs	r2, #8
 8001b54:	4619      	mov	r1, r3
 8001b56:	f64f 6042 	movw	r0, #65090	; 0xfe42
 8001b5a:	f00c fad1 	bl	800e100 <P2PS_STM_App_Update_Int8>

   } else {
    APP_DBG_MSG("-- P2P APPLICATION SERVER : CAN'T INFORM CLIENT -  NOTIFICATION DISABLED\n ");
   }

  return;
 8001b5e:	e003      	b.n	8001b68 <P2PS_Send_Notification+0xc0>
    APP_DBG_MSG("-- P2P APPLICATION SERVER : CAN'T INFORM CLIENT -  NOTIFICATION DISABLED\n ");
 8001b60:	4807      	ldr	r0, [pc, #28]	; (8001b80 <P2PS_Send_Notification+0xd8>)
 8001b62:	f011 ff4b 	bl	80139fc <iprintf>
  return;
 8001b66:	bf00      	nop
}
 8001b68:	3720      	adds	r7, #32
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8001b70:	20000280 	.word	0x20000280
 8001b74:	080161f4 	.word	0x080161f4
 8001b78:	08016150 	.word	0x08016150
 8001b7c:	20005260 	.word	0x20005260
 8001b80:	08016234 	.word	0x08016234

08001b84 <P2PProcess>:

static void P2PProcess(void *argument)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b082      	sub	sp, #8
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
  UNUSED(argument);

  for(;;)
  {
    osThreadFlagsWait( 1, osFlagsWaitAny, osWaitForever);
 8001b8c:	f04f 32ff 	mov.w	r2, #4294967295
 8001b90:	2100      	movs	r1, #0
 8001b92:	2001      	movs	r0, #1
 8001b94:	f00d f9e2 	bl	800ef5c <osThreadFlagsWait>
    P2PS_Send_Notification( );
 8001b98:	f7ff ff86 	bl	8001aa8 <P2PS_Send_Notification>
    osThreadFlagsWait( 1, osFlagsWaitAny, osWaitForever);
 8001b9c:	e7f6      	b.n	8001b8c <P2PProcess+0x8>
	...

08001ba0 <LL_PWR_EnableBootC2>:
  * @brief  Boot CPU2 after reset or wakeup from stop or standby modes
  * @rmtoll CR4          C2BOOT        LL_PWR_EnableBootC2
  * @retval None
  */
__STATIC_INLINE void LL_PWR_EnableBootC2(void)
{
 8001ba0:	b480      	push	{r7}
 8001ba2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR4, PWR_CR4_C2BOOT);
 8001ba4:	4b05      	ldr	r3, [pc, #20]	; (8001bbc <LL_PWR_EnableBootC2+0x1c>)
 8001ba6:	68db      	ldr	r3, [r3, #12]
 8001ba8:	4a04      	ldr	r2, [pc, #16]	; (8001bbc <LL_PWR_EnableBootC2+0x1c>)
 8001baa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001bae:	60d3      	str	r3, [r2, #12]
}
 8001bb0:	bf00      	nop
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb8:	4770      	bx	lr
 8001bba:	bf00      	nop
 8001bbc:	58000400 	.word	0x58000400

08001bc0 <LL_C2_EXTI_EnableEvent_32_63>:
  *         @arg @ref LL_EXTI_LINE_40
  *         @arg @ref LL_EXTI_LINE_41
  * @retval None
  */
__STATIC_INLINE void LL_C2_EXTI_EnableEvent_32_63(uint32_t ExtiLine)
{
 8001bc0:	b480      	push	{r7}
 8001bc2:	b083      	sub	sp, #12
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->C2EMR2, ExtiLine);
 8001bc8:	4b06      	ldr	r3, [pc, #24]	; (8001be4 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 8001bca:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 8001bce:	4905      	ldr	r1, [pc, #20]	; (8001be4 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	4313      	orrs	r3, r2
 8001bd4:	f8c1 30d4 	str.w	r3, [r1, #212]	; 0xd4
}
 8001bd8:	bf00      	nop
 8001bda:	370c      	adds	r7, #12
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be2:	4770      	bx	lr
 8001be4:	58000800 	.word	0x58000800

08001be8 <LL_EXTI_EnableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_32_63(uint32_t ExtiLine)
{
 8001be8:	b480      	push	{r7}
 8001bea:	b083      	sub	sp, #12
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 8001bf0:	4b05      	ldr	r3, [pc, #20]	; (8001c08 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8001bf2:	6a1a      	ldr	r2, [r3, #32]
 8001bf4:	4904      	ldr	r1, [pc, #16]	; (8001c08 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	4313      	orrs	r3, r2
 8001bfa:	620b      	str	r3, [r1, #32]
}
 8001bfc:	bf00      	nop
 8001bfe:	370c      	adds	r7, #12
 8001c00:	46bd      	mov	sp, r7
 8001c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c06:	4770      	bx	lr
 8001c08:	58000800 	.word	0x58000800

08001c0c <LL_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_AHB3_GRP1_PERIPH_FLASH
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 8001c0c:	b480      	push	{r7}
 8001c0e:	b085      	sub	sp, #20
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB3ENR, Periphs);
 8001c14:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c18:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001c1a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	4313      	orrs	r3, r2
 8001c22:	650b      	str	r3, [r1, #80]	; 0x50
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8001c24:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c28:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	4013      	ands	r3, r2
 8001c2e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001c30:	68fb      	ldr	r3, [r7, #12]
}
 8001c32:	bf00      	nop
 8001c34:	3714      	adds	r7, #20
 8001c36:	46bd      	mov	sp, r7
 8001c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3c:	4770      	bx	lr

08001c3e <LL_C2_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_IPCC
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_FLASH
  * @retval None
  */
__STATIC_INLINE void LL_C2_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 8001c3e:	b480      	push	{r7}
 8001c40:	b085      	sub	sp, #20
 8001c42:	af00      	add	r7, sp, #0
 8001c44:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->C2AHB3ENR, Periphs);
 8001c46:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c4a:	f8d3 2150 	ldr.w	r2, [r3, #336]	; 0x150
 8001c4e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	4313      	orrs	r3, r2
 8001c56:	f8c1 3150 	str.w	r3, [r1, #336]	; 0x150
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->C2AHB3ENR, Periphs);
 8001c5a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c5e:	f8d3 2150 	ldr.w	r2, [r3, #336]	; 0x150
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	4013      	ands	r3, r2
 8001c66:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001c68:	68fb      	ldr	r3, [r7, #12]
}
 8001c6a:	bf00      	nop
 8001c6c:	3714      	adds	r7, #20
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c74:	4770      	bx	lr

08001c76 <LL_C1_IPCC_EnableIT_TXF>:
  * @rmtoll C1CR          TXFIE         LL_C1_IPCC_EnableIT_TXF
  * @param  IPCCx IPCC Instance.
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableIT_TXF(IPCC_TypeDef *IPCCx)
{
 8001c76:	b480      	push	{r7}
 8001c78:	b083      	sub	sp, #12
 8001c7a:	af00      	add	r7, sp, #0
 8001c7c:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_TXFIE);
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	601a      	str	r2, [r3, #0]
}
 8001c8a:	bf00      	nop
 8001c8c:	370c      	adds	r7, #12
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c94:	4770      	bx	lr

08001c96 <LL_C1_IPCC_EnableIT_RXO>:
  * @rmtoll C1CR          RXOIE         LL_C1_IPCC_EnableIT_RXO
  * @param  IPCCx IPCC Instance.
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableIT_RXO(IPCC_TypeDef *IPCCx)
{
 8001c96:	b480      	push	{r7}
 8001c98:	b083      	sub	sp, #12
 8001c9a:	af00      	add	r7, sp, #0
 8001c9c:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_RXOIE);
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	f043 0201 	orr.w	r2, r3, #1
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	601a      	str	r2, [r3, #0]
}
 8001caa:	bf00      	nop
 8001cac:	370c      	adds	r7, #12
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb4:	4770      	bx	lr

08001cb6 <LL_C1_IPCC_EnableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8001cb6:	b480      	push	{r7}
 8001cb8:	b083      	sub	sp, #12
 8001cba:	af00      	add	r7, sp, #0
 8001cbc:	6078      	str	r0, [r7, #4]
 8001cbe:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	685a      	ldr	r2, [r3, #4]
 8001cc4:	683b      	ldr	r3, [r7, #0]
 8001cc6:	041b      	lsls	r3, r3, #16
 8001cc8:	43db      	mvns	r3, r3
 8001cca:	401a      	ands	r2, r3
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	605a      	str	r2, [r3, #4]
}
 8001cd0:	bf00      	nop
 8001cd2:	370c      	adds	r7, #12
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cda:	4770      	bx	lr

08001cdc <LL_C1_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8001cdc:	b480      	push	{r7}
 8001cde:	b083      	sub	sp, #12
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]
 8001ce4:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	685a      	ldr	r2, [r3, #4]
 8001cea:	683b      	ldr	r3, [r7, #0]
 8001cec:	041b      	lsls	r3, r3, #16
 8001cee:	431a      	orrs	r2, r3
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	605a      	str	r2, [r3, #4]
}
 8001cf4:	bf00      	nop
 8001cf6:	370c      	adds	r7, #12
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfe:	4770      	bx	lr

08001d00 <LL_C1_IPCC_EnableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8001d00:	b480      	push	{r7}
 8001d02:	b083      	sub	sp, #12
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	6078      	str	r0, [r7, #4]
 8001d08:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel);
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	685a      	ldr	r2, [r3, #4]
 8001d0e:	683b      	ldr	r3, [r7, #0]
 8001d10:	43db      	mvns	r3, r3
 8001d12:	401a      	ands	r2, r3
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	605a      	str	r2, [r3, #4]
}
 8001d18:	bf00      	nop
 8001d1a:	370c      	adds	r7, #12
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d22:	4770      	bx	lr

08001d24 <LL_C1_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8001d24:	b480      	push	{r7}
 8001d26:	b083      	sub	sp, #12
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]
 8001d2c:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	683a      	ldr	r2, [r7, #0]
 8001d32:	609a      	str	r2, [r3, #8]
}
 8001d34:	bf00      	nop
 8001d36:	370c      	adds	r7, #12
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3e:	4770      	bx	lr

08001d40 <LL_C1_IPCC_SetFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_SetFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8001d40:	b480      	push	{r7}
 8001d42:	b083      	sub	sp, #12
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]
 8001d48:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel << IPCC_C1SCR_CH1S_Pos);
 8001d4a:	683b      	ldr	r3, [r7, #0]
 8001d4c:	041a      	lsls	r2, r3, #16
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	609a      	str	r2, [r3, #8]
}
 8001d52:	bf00      	nop
 8001d54:	370c      	adds	r7, #12
 8001d56:	46bd      	mov	sp, r7
 8001d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5c:	4770      	bx	lr

08001d5e <LL_C1_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C1_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 8001d5e:	b480      	push	{r7}
 8001d60:	b083      	sub	sp, #12
 8001d62:	af00      	add	r7, sp, #0
 8001d64:	6078      	str	r0, [r7, #4]
 8001d66:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C1TOC2SR, Channel) == (Channel)) ? 1UL : 0UL);
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	68da      	ldr	r2, [r3, #12]
 8001d6c:	683b      	ldr	r3, [r7, #0]
 8001d6e:	4013      	ands	r3, r2
 8001d70:	683a      	ldr	r2, [r7, #0]
 8001d72:	429a      	cmp	r2, r3
 8001d74:	d101      	bne.n	8001d7a <LL_C1_IPCC_IsActiveFlag_CHx+0x1c>
 8001d76:	2301      	movs	r3, #1
 8001d78:	e000      	b.n	8001d7c <LL_C1_IPCC_IsActiveFlag_CHx+0x1e>
 8001d7a:	2300      	movs	r3, #0
}
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	370c      	adds	r7, #12
 8001d80:	46bd      	mov	sp, r7
 8001d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d86:	4770      	bx	lr

08001d88 <LL_C2_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C2_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 8001d88:	b480      	push	{r7}
 8001d8a:	b083      	sub	sp, #12
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
 8001d90:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C2TOC1SR, Channel) == (Channel)) ? 1UL : 0UL);
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	69da      	ldr	r2, [r3, #28]
 8001d96:	683b      	ldr	r3, [r7, #0]
 8001d98:	4013      	ands	r3, r2
 8001d9a:	683a      	ldr	r2, [r7, #0]
 8001d9c:	429a      	cmp	r2, r3
 8001d9e:	d101      	bne.n	8001da4 <LL_C2_IPCC_IsActiveFlag_CHx+0x1c>
 8001da0:	2301      	movs	r3, #1
 8001da2:	e000      	b.n	8001da6 <LL_C2_IPCC_IsActiveFlag_CHx+0x1e>
 8001da4:	2300      	movs	r3, #0
}
 8001da6:	4618      	mov	r0, r3
 8001da8:	370c      	adds	r7, #12
 8001daa:	46bd      	mov	sp, r7
 8001dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db0:	4770      	bx	lr
	...

08001db4 <HW_IPCC_Rx_Handler>:

/******************************************************************************
 * INTERRUPT HANDLER
 ******************************************************************************/
void HW_IPCC_Rx_Handler( void )
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	af00      	add	r7, sp, #0
  if (HW_IPCC_RX_PENDING( HW_IPCC_SYSTEM_EVENT_CHANNEL ))
 8001db8:	2102      	movs	r1, #2
 8001dba:	4819      	ldr	r0, [pc, #100]	; (8001e20 <HW_IPCC_Rx_Handler+0x6c>)
 8001dbc:	f7ff ffe4 	bl	8001d88 <LL_C2_IPCC_IsActiveFlag_CHx>
 8001dc0:	4603      	mov	r3, r0
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d009      	beq.n	8001dda <HW_IPCC_Rx_Handler+0x26>
 8001dc6:	4b16      	ldr	r3, [pc, #88]	; (8001e20 <HW_IPCC_Rx_Handler+0x6c>)
 8001dc8:	685b      	ldr	r3, [r3, #4]
 8001dca:	43db      	mvns	r3, r3
 8001dcc:	f003 0302 	and.w	r3, r3, #2
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d002      	beq.n	8001dda <HW_IPCC_Rx_Handler+0x26>
  {
      HW_IPCC_SYS_EvtHandler();
 8001dd4:	f000 f8ea 	bl	8001fac <HW_IPCC_SYS_EvtHandler>
 8001dd8:	e01f      	b.n	8001e1a <HW_IPCC_Rx_Handler+0x66>
  else if (HW_IPCC_RX_PENDING( HW_IPCC_ZIGBEE_M0_REQUEST_CHANNEL ))
  {
    HW_IPCC_ZIGBEE_StackM0RequestHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_RX_PENDING( HW_IPCC_BLE_EVENT_CHANNEL ))
 8001dda:	2101      	movs	r1, #1
 8001ddc:	4810      	ldr	r0, [pc, #64]	; (8001e20 <HW_IPCC_Rx_Handler+0x6c>)
 8001dde:	f7ff ffd3 	bl	8001d88 <LL_C2_IPCC_IsActiveFlag_CHx>
 8001de2:	4603      	mov	r3, r0
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d008      	beq.n	8001dfa <HW_IPCC_Rx_Handler+0x46>
 8001de8:	4b0d      	ldr	r3, [pc, #52]	; (8001e20 <HW_IPCC_Rx_Handler+0x6c>)
 8001dea:	685b      	ldr	r3, [r3, #4]
 8001dec:	f003 0301 	and.w	r3, r3, #1
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d102      	bne.n	8001dfa <HW_IPCC_Rx_Handler+0x46>
  {
    HW_IPCC_BLE_EvtHandler();
 8001df4:	f000 f89e 	bl	8001f34 <HW_IPCC_BLE_EvtHandler>
 8001df8:	e00f      	b.n	8001e1a <HW_IPCC_Rx_Handler+0x66>
  }
  else if (HW_IPCC_RX_PENDING( HW_IPCC_TRACES_CHANNEL ))
 8001dfa:	2108      	movs	r1, #8
 8001dfc:	4808      	ldr	r0, [pc, #32]	; (8001e20 <HW_IPCC_Rx_Handler+0x6c>)
 8001dfe:	f7ff ffc3 	bl	8001d88 <LL_C2_IPCC_IsActiveFlag_CHx>
 8001e02:	4603      	mov	r3, r0
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d009      	beq.n	8001e1c <HW_IPCC_Rx_Handler+0x68>
 8001e08:	4b05      	ldr	r3, [pc, #20]	; (8001e20 <HW_IPCC_Rx_Handler+0x6c>)
 8001e0a:	685b      	ldr	r3, [r3, #4]
 8001e0c:	43db      	mvns	r3, r3
 8001e0e:	f003 0308 	and.w	r3, r3, #8
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d002      	beq.n	8001e1c <HW_IPCC_Rx_Handler+0x68>
  {
    HW_IPCC_TRACES_EvtHandler();
 8001e16:	f000 f915 	bl	8002044 <HW_IPCC_TRACES_EvtHandler>
  }

  return;
 8001e1a:	bf00      	nop
 8001e1c:	bf00      	nop
}
 8001e1e:	bd80      	pop	{r7, pc}
 8001e20:	58000c00 	.word	0x58000c00

08001e24 <HW_IPCC_Tx_Handler>:

void HW_IPCC_Tx_Handler( void )
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	af00      	add	r7, sp, #0
  if (HW_IPCC_TX_PENDING( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL ))
 8001e28:	2102      	movs	r1, #2
 8001e2a:	4822      	ldr	r0, [pc, #136]	; (8001eb4 <HW_IPCC_Tx_Handler+0x90>)
 8001e2c:	f7ff ff97 	bl	8001d5e <LL_C1_IPCC_IsActiveFlag_CHx>
 8001e30:	4603      	mov	r3, r0
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d109      	bne.n	8001e4a <HW_IPCC_Tx_Handler+0x26>
 8001e36:	4b1f      	ldr	r3, [pc, #124]	; (8001eb4 <HW_IPCC_Tx_Handler+0x90>)
 8001e38:	685b      	ldr	r3, [r3, #4]
 8001e3a:	43db      	mvns	r3, r3
 8001e3c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d002      	beq.n	8001e4a <HW_IPCC_Tx_Handler+0x26>
  {
    HW_IPCC_SYS_CmdEvtHandler();
 8001e44:	f000 f8a6 	bl	8001f94 <HW_IPCC_SYS_CmdEvtHandler>
 8001e48:	e031      	b.n	8001eae <HW_IPCC_Tx_Handler+0x8a>
  if (HW_IPCC_TX_PENDING( HW_IPCC_ZIGBEE_CMD_APPLI_CHANNEL ))
  {
      HW_IPCC_ZIGBEE_CmdEvtHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_TX_PENDING( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL ))
 8001e4a:	2102      	movs	r1, #2
 8001e4c:	4819      	ldr	r0, [pc, #100]	; (8001eb4 <HW_IPCC_Tx_Handler+0x90>)
 8001e4e:	f7ff ff86 	bl	8001d5e <LL_C1_IPCC_IsActiveFlag_CHx>
 8001e52:	4603      	mov	r3, r0
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d109      	bne.n	8001e6c <HW_IPCC_Tx_Handler+0x48>
 8001e58:	4b16      	ldr	r3, [pc, #88]	; (8001eb4 <HW_IPCC_Tx_Handler+0x90>)
 8001e5a:	685b      	ldr	r3, [r3, #4]
 8001e5c:	43db      	mvns	r3, r3
 8001e5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d002      	beq.n	8001e6c <HW_IPCC_Tx_Handler+0x48>
  {
    HW_IPCC_SYS_CmdEvtHandler();
 8001e66:	f000 f895 	bl	8001f94 <HW_IPCC_SYS_CmdEvtHandler>
 8001e6a:	e020      	b.n	8001eae <HW_IPCC_Tx_Handler+0x8a>
  }
  else if (HW_IPCC_TX_PENDING( HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ))
 8001e6c:	2108      	movs	r1, #8
 8001e6e:	4811      	ldr	r0, [pc, #68]	; (8001eb4 <HW_IPCC_Tx_Handler+0x90>)
 8001e70:	f7ff ff75 	bl	8001d5e <LL_C1_IPCC_IsActiveFlag_CHx>
 8001e74:	4603      	mov	r3, r0
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d109      	bne.n	8001e8e <HW_IPCC_Tx_Handler+0x6a>
 8001e7a:	4b0e      	ldr	r3, [pc, #56]	; (8001eb4 <HW_IPCC_Tx_Handler+0x90>)
 8001e7c:	685b      	ldr	r3, [r3, #4]
 8001e7e:	43db      	mvns	r3, r3
 8001e80:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d002      	beq.n	8001e8e <HW_IPCC_Tx_Handler+0x6a>
  {
    HW_IPCC_MM_FreeBufHandler();
 8001e88:	f000 f8be 	bl	8002008 <HW_IPCC_MM_FreeBufHandler>
 8001e8c:	e00f      	b.n	8001eae <HW_IPCC_Tx_Handler+0x8a>
  }
  else if (HW_IPCC_TX_PENDING( HW_IPCC_HCI_ACL_DATA_CHANNEL ))
 8001e8e:	2120      	movs	r1, #32
 8001e90:	4808      	ldr	r0, [pc, #32]	; (8001eb4 <HW_IPCC_Tx_Handler+0x90>)
 8001e92:	f7ff ff64 	bl	8001d5e <LL_C1_IPCC_IsActiveFlag_CHx>
 8001e96:	4603      	mov	r3, r0
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d109      	bne.n	8001eb0 <HW_IPCC_Tx_Handler+0x8c>
 8001e9c:	4b05      	ldr	r3, [pc, #20]	; (8001eb4 <HW_IPCC_Tx_Handler+0x90>)
 8001e9e:	685b      	ldr	r3, [r3, #4]
 8001ea0:	43db      	mvns	r3, r3
 8001ea2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d002      	beq.n	8001eb0 <HW_IPCC_Tx_Handler+0x8c>
  {
    HW_IPCC_BLE_AclDataEvtHandler();
 8001eaa:	f000 f84f 	bl	8001f4c <HW_IPCC_BLE_AclDataEvtHandler>
  }

  return;
 8001eae:	bf00      	nop
 8001eb0:	bf00      	nop
}
 8001eb2:	bd80      	pop	{r7, pc}
 8001eb4:	58000c00 	.word	0x58000c00

08001eb8 <HW_IPCC_Enable>:
/******************************************************************************
 * GENERAL
 ******************************************************************************/
void HW_IPCC_Enable( void )
{
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	af00      	add	r7, sp, #0
  /**
  * Such as IPCC IP available to the CPU2, it is required to keep the IPCC clock running
    when FUS is running on CPU2 and CPU1 enters deep sleep mode
  */
  LL_C2_AHB3_GRP1_EnableClock(LL_C2_AHB3_GRP1_PERIPH_IPCC);
 8001ebc:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8001ec0:	f7ff febd 	bl	8001c3e <LL_C2_AHB3_GRP1_EnableClock>

   /**
   * When the device is out of standby, it is required to use the EXTI mechanism to wakeup CPU2
   */
  LL_C2_EXTI_EnableEvent_32_63( LL_EXTI_LINE_41 );
 8001ec4:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001ec8:	f7ff fe7a 	bl	8001bc0 <LL_C2_EXTI_EnableEvent_32_63>
  LL_EXTI_EnableRisingTrig_32_63( LL_EXTI_LINE_41 );
 8001ecc:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001ed0:	f7ff fe8a 	bl	8001be8 <LL_EXTI_EnableRisingTrig_32_63>
   * When the CPU2 receives that command, it waits for its event input to be set to restart the CPU2 firmware.
   * This is required because once C2BOOT has been set once, a clear/set on C2BOOT has no effect.
   * When SHCI_C2_Reinit( ) is not called, generating an event to the CPU2 does not have any effect
   * So, by default, the application shall both set the event flag and set the C2BOOT bit.
   */
  __SEV( );       /* Set the internal event flag and send an event to the CPU2 */
 8001ed4:	bf40      	sev
  __WFE( );       /* Clear the internal event flag */
 8001ed6:	bf20      	wfe
  LL_PWR_EnableBootC2( );
 8001ed8:	f7ff fe62 	bl	8001ba0 <LL_PWR_EnableBootC2>

  return;
 8001edc:	bf00      	nop
}
 8001ede:	bd80      	pop	{r7, pc}

08001ee0 <HW_IPCC_Init>:

void HW_IPCC_Init( void )
{
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock( LL_AHB3_GRP1_PERIPH_IPCC );
 8001ee4:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8001ee8:	f7ff fe90 	bl	8001c0c <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_EnableIT_RXO( IPCC );
 8001eec:	4806      	ldr	r0, [pc, #24]	; (8001f08 <HW_IPCC_Init+0x28>)
 8001eee:	f7ff fed2 	bl	8001c96 <LL_C1_IPCC_EnableIT_RXO>
  LL_C1_IPCC_EnableIT_TXF( IPCC );
 8001ef2:	4805      	ldr	r0, [pc, #20]	; (8001f08 <HW_IPCC_Init+0x28>)
 8001ef4:	f7ff febf 	bl	8001c76 <LL_C1_IPCC_EnableIT_TXF>

  HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 8001ef8:	202c      	movs	r0, #44	; 0x2c
 8001efa:	f004 f9ff 	bl	80062fc <HAL_NVIC_EnableIRQ>
  HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 8001efe:	202d      	movs	r0, #45	; 0x2d
 8001f00:	f004 f9fc 	bl	80062fc <HAL_NVIC_EnableIRQ>

  return;
 8001f04:	bf00      	nop
}
 8001f06:	bd80      	pop	{r7, pc}
 8001f08:	58000c00 	.word	0x58000c00

08001f0c <HW_IPCC_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
void HW_IPCC_BLE_Init( void )
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 8001f10:	2101      	movs	r1, #1
 8001f12:	4802      	ldr	r0, [pc, #8]	; (8001f1c <HW_IPCC_BLE_Init+0x10>)
 8001f14:	f7ff fef4 	bl	8001d00 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8001f18:	bf00      	nop
}
 8001f1a:	bd80      	pop	{r7, pc}
 8001f1c:	58000c00 	.word	0x58000c00

08001f20 <HW_IPCC_BLE_SendCmd>:

void HW_IPCC_BLE_SendCmd( void )
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_BLE_CMD_CHANNEL );
 8001f24:	2101      	movs	r1, #1
 8001f26:	4802      	ldr	r0, [pc, #8]	; (8001f30 <HW_IPCC_BLE_SendCmd+0x10>)
 8001f28:	f7ff ff0a 	bl	8001d40 <LL_C1_IPCC_SetFlag_CHx>

  return;
 8001f2c:	bf00      	nop
}
 8001f2e:	bd80      	pop	{r7, pc}
 8001f30:	58000c00 	.word	0x58000c00

08001f34 <HW_IPCC_BLE_EvtHandler>:

static void HW_IPCC_BLE_EvtHandler( void )
{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	af00      	add	r7, sp, #0
  HW_IPCC_BLE_RxEvtNot();
 8001f38:	f00b fe24 	bl	800db84 <HW_IPCC_BLE_RxEvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 8001f3c:	2101      	movs	r1, #1
 8001f3e:	4802      	ldr	r0, [pc, #8]	; (8001f48 <HW_IPCC_BLE_EvtHandler+0x14>)
 8001f40:	f7ff fef0 	bl	8001d24 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 8001f44:	bf00      	nop
}
 8001f46:	bd80      	pop	{r7, pc}
 8001f48:	58000c00 	.word	0x58000c00

08001f4c <HW_IPCC_BLE_AclDataEvtHandler>:

  return;
}

static void HW_IPCC_BLE_AclDataEvtHandler( void )
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_HCI_ACL_DATA_CHANNEL );
 8001f50:	2120      	movs	r1, #32
 8001f52:	4803      	ldr	r0, [pc, #12]	; (8001f60 <HW_IPCC_BLE_AclDataEvtHandler+0x14>)
 8001f54:	f7ff fec2 	bl	8001cdc <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_BLE_AclDataAckNot();
 8001f58:	f00b fe44 	bl	800dbe4 <HW_IPCC_BLE_AclDataAckNot>

  return;
 8001f5c:	bf00      	nop
}
 8001f5e:	bd80      	pop	{r7, pc}
 8001f60:	58000c00 	.word	0x58000c00

08001f64 <HW_IPCC_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
void HW_IPCC_SYS_Init( void )
{
 8001f64:	b580      	push	{r7, lr}
 8001f66:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 8001f68:	2102      	movs	r1, #2
 8001f6a:	4802      	ldr	r0, [pc, #8]	; (8001f74 <HW_IPCC_SYS_Init+0x10>)
 8001f6c:	f7ff fec8 	bl	8001d00 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8001f70:	bf00      	nop
}
 8001f72:	bd80      	pop	{r7, pc}
 8001f74:	58000c00 	.word	0x58000c00

08001f78 <HW_IPCC_SYS_SendCmd>:

void HW_IPCC_SYS_SendCmd( void )
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8001f7c:	2102      	movs	r1, #2
 8001f7e:	4804      	ldr	r0, [pc, #16]	; (8001f90 <HW_IPCC_SYS_SendCmd+0x18>)
 8001f80:	f7ff fede 	bl	8001d40 <LL_C1_IPCC_SetFlag_CHx>
  LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8001f84:	2102      	movs	r1, #2
 8001f86:	4802      	ldr	r0, [pc, #8]	; (8001f90 <HW_IPCC_SYS_SendCmd+0x18>)
 8001f88:	f7ff fe95 	bl	8001cb6 <LL_C1_IPCC_EnableTransmitChannel>

  return;
 8001f8c:	bf00      	nop
}
 8001f8e:	bd80      	pop	{r7, pc}
 8001f90:	58000c00 	.word	0x58000c00

08001f94 <HW_IPCC_SYS_CmdEvtHandler>:

static void HW_IPCC_SYS_CmdEvtHandler( void )
{
 8001f94:	b580      	push	{r7, lr}
 8001f96:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8001f98:	2102      	movs	r1, #2
 8001f9a:	4803      	ldr	r0, [pc, #12]	; (8001fa8 <HW_IPCC_SYS_CmdEvtHandler+0x14>)
 8001f9c:	f7ff fe9e 	bl	8001cdc <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_SYS_CmdEvtNot();
 8001fa0:	f00b fe70 	bl	800dc84 <HW_IPCC_SYS_CmdEvtNot>

  return;
 8001fa4:	bf00      	nop
}
 8001fa6:	bd80      	pop	{r7, pc}
 8001fa8:	58000c00 	.word	0x58000c00

08001fac <HW_IPCC_SYS_EvtHandler>:

static void HW_IPCC_SYS_EvtHandler( void )
{
 8001fac:	b580      	push	{r7, lr}
 8001fae:	af00      	add	r7, sp, #0
  HW_IPCC_SYS_EvtNot();
 8001fb0:	f00b fe7e 	bl	800dcb0 <HW_IPCC_SYS_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 8001fb4:	2102      	movs	r1, #2
 8001fb6:	4802      	ldr	r0, [pc, #8]	; (8001fc0 <HW_IPCC_SYS_EvtHandler+0x14>)
 8001fb8:	f7ff feb4 	bl	8001d24 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 8001fbc:	bf00      	nop
}
 8001fbe:	bd80      	pop	{r7, pc}
 8001fc0:	58000c00 	.word	0x58000c00

08001fc4 <HW_IPCC_MM_SendFreeBuf>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void HW_IPCC_MM_SendFreeBuf( void (*cb)( void ) )
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	b082      	sub	sp, #8
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	6078      	str	r0, [r7, #4]
  if ( LL_C1_IPCC_IsActiveFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ) )
 8001fcc:	2108      	movs	r1, #8
 8001fce:	480c      	ldr	r0, [pc, #48]	; (8002000 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 8001fd0:	f7ff fec5 	bl	8001d5e <LL_C1_IPCC_IsActiveFlag_CHx>
 8001fd4:	4603      	mov	r3, r0
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d007      	beq.n	8001fea <HW_IPCC_MM_SendFreeBuf+0x26>
  {
    FreeBufCb = cb;
 8001fda:	4a0a      	ldr	r2, [pc, #40]	; (8002004 <HW_IPCC_MM_SendFreeBuf+0x40>)
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	6013      	str	r3, [r2, #0]
    LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8001fe0:	2108      	movs	r1, #8
 8001fe2:	4807      	ldr	r0, [pc, #28]	; (8002000 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 8001fe4:	f7ff fe67 	bl	8001cb6 <LL_C1_IPCC_EnableTransmitChannel>
    cb();

    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
  }

  return;
 8001fe8:	e006      	b.n	8001ff8 <HW_IPCC_MM_SendFreeBuf+0x34>
    cb();
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	4798      	blx	r3
    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8001fee:	2108      	movs	r1, #8
 8001ff0:	4803      	ldr	r0, [pc, #12]	; (8002000 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 8001ff2:	f7ff fea5 	bl	8001d40 <LL_C1_IPCC_SetFlag_CHx>
  return;
 8001ff6:	bf00      	nop
}
 8001ff8:	3708      	adds	r7, #8
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	bd80      	pop	{r7, pc}
 8001ffe:	bf00      	nop
 8002000:	58000c00 	.word	0x58000c00
 8002004:	200003ac 	.word	0x200003ac

08002008 <HW_IPCC_MM_FreeBufHandler>:

static void HW_IPCC_MM_FreeBufHandler( void )
{
 8002008:	b580      	push	{r7, lr}
 800200a:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800200c:	2108      	movs	r1, #8
 800200e:	4806      	ldr	r0, [pc, #24]	; (8002028 <HW_IPCC_MM_FreeBufHandler+0x20>)
 8002010:	f7ff fe64 	bl	8001cdc <LL_C1_IPCC_DisableTransmitChannel>

  FreeBufCb();
 8002014:	4b05      	ldr	r3, [pc, #20]	; (800202c <HW_IPCC_MM_FreeBufHandler+0x24>)
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	4798      	blx	r3

  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800201a:	2108      	movs	r1, #8
 800201c:	4802      	ldr	r0, [pc, #8]	; (8002028 <HW_IPCC_MM_FreeBufHandler+0x20>)
 800201e:	f7ff fe8f 	bl	8001d40 <LL_C1_IPCC_SetFlag_CHx>

  return;
 8002022:	bf00      	nop
}
 8002024:	bd80      	pop	{r7, pc}
 8002026:	bf00      	nop
 8002028:	58000c00 	.word	0x58000c00
 800202c:	200003ac 	.word	0x200003ac

08002030 <HW_IPCC_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void HW_IPCC_TRACES_Init( void )
{
 8002030:	b580      	push	{r7, lr}
 8002032:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_TRACES_CHANNEL );
 8002034:	2108      	movs	r1, #8
 8002036:	4802      	ldr	r0, [pc, #8]	; (8002040 <HW_IPCC_TRACES_Init+0x10>)
 8002038:	f7ff fe62 	bl	8001d00 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 800203c:	bf00      	nop
}
 800203e:	bd80      	pop	{r7, pc}
 8002040:	58000c00 	.word	0x58000c00

08002044 <HW_IPCC_TRACES_EvtHandler>:

static void HW_IPCC_TRACES_EvtHandler( void )
{
 8002044:	b580      	push	{r7, lr}
 8002046:	af00      	add	r7, sp, #0
  HW_IPCC_TRACES_EvtNot();
 8002048:	f00b feda 	bl	800de00 <HW_IPCC_TRACES_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_TRACES_CHANNEL );
 800204c:	2108      	movs	r1, #8
 800204e:	4802      	ldr	r0, [pc, #8]	; (8002058 <HW_IPCC_TRACES_EvtHandler+0x14>)
 8002050:	f7ff fe68 	bl	8001d24 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 8002054:	bf00      	nop
}
 8002056:	bd80      	pop	{r7, pc}
 8002058:	58000c00 	.word	0x58000c00

0800205c <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 800205c:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800205e:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002060:	3304      	adds	r3, #4

08002062 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002062:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002064:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 8002066:	d3f9      	bcc.n	800205c <CopyDataInit>
  bx lr
 8002068:	4770      	bx	lr

0800206a <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 800206a:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 800206c:	3004      	adds	r0, #4

0800206e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 800206e:	4288      	cmp	r0, r1
  bcc FillZerobss
 8002070:	d3fb      	bcc.n	800206a <FillZerobss>
  bx lr
 8002072:	4770      	bx	lr

08002074 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002074:	480c      	ldr	r0, [pc, #48]	; (80020a8 <LoopForever+0x4>)
  mov   sp, r0          /* set stack pointer */
 8002076:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8002078:	f003 ff36 	bl	8005ee8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 800207c:	480b      	ldr	r0, [pc, #44]	; (80020ac <LoopForever+0x8>)
 800207e:	490c      	ldr	r1, [pc, #48]	; (80020b0 <LoopForever+0xc>)
 8002080:	4a0c      	ldr	r2, [pc, #48]	; (80020b4 <LoopForever+0x10>)
 8002082:	2300      	movs	r3, #0
 8002084:	f7ff ffed 	bl	8002062 <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8002088:	480b      	ldr	r0, [pc, #44]	; (80020b8 <LoopForever+0x14>)
 800208a:	490c      	ldr	r1, [pc, #48]	; (80020bc <LoopForever+0x18>)
 800208c:	2300      	movs	r3, #0
 800208e:	f7ff ffee 	bl	800206e <LoopFillZerobss>
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 8002092:	480b      	ldr	r0, [pc, #44]	; (80020c0 <LoopForever+0x1c>)
 8002094:	490b      	ldr	r1, [pc, #44]	; (80020c4 <LoopForever+0x20>)
 8002096:	2300      	movs	r3, #0
 8002098:	f7ff ffe9 	bl	800206e <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800209c:	f010 ff6a 	bl	8012f74 <__libc_init_array>
/* Call the application s entry point.*/
	bl	main
 80020a0:	f002 f9f4 	bl	800448c <main>

080020a4 <LoopForever>:

LoopForever:
  b LoopForever
 80020a4:	e7fe      	b.n	80020a4 <LoopForever>
 80020a6:	0000      	.short	0x0000
  ldr   r0, =_estack
 80020a8:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 80020ac:	20000004 	.word	0x20000004
 80020b0:	200001f4 	.word	0x200001f4
 80020b4:	08017b08 	.word	0x08017b08
  INIT_BSS _sbss, _ebss
 80020b8:	20000388 	.word	0x20000388
 80020bc:	200054cc 	.word	0x200054cc
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 80020c0:	200301e0 	.word	0x200301e0
 80020c4:	20030a57 	.word	0x20030a57

080020c8 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80020c8:	e7fe      	b.n	80020c8 <ADC1_IRQHandler>
	...

080020cc <LL_EXTI_EnableIT_32_63>:
{
 80020cc:	b480      	push	{r7}
 80020ce:	b083      	sub	sp, #12
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 80020d4:	4b06      	ldr	r3, [pc, #24]	; (80020f0 <LL_EXTI_EnableIT_32_63+0x24>)
 80020d6:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80020da:	4905      	ldr	r1, [pc, #20]	; (80020f0 <LL_EXTI_EnableIT_32_63+0x24>)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	4313      	orrs	r3, r2
 80020e0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 80020e4:	bf00      	nop
 80020e6:	370c      	adds	r7, #12
 80020e8:	46bd      	mov	sp, r7
 80020ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ee:	4770      	bx	lr
 80020f0:	58000800 	.word	0x58000800

080020f4 <LL_AHB2_GRP1_EnableClock>:
{
 80020f4:	b480      	push	{r7}
 80020f6:	b085      	sub	sp, #20
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80020fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002100:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002102:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	4313      	orrs	r3, r2
 800210a:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800210c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002110:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	4013      	ands	r3, r2
 8002116:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002118:	68fb      	ldr	r3, [r7, #12]
}
 800211a:	bf00      	nop
 800211c:	3714      	adds	r7, #20
 800211e:	46bd      	mov	sp, r7
 8002120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002124:	4770      	bx	lr

08002126 <LL_C2_AHB2_GRP1_EnableClock>:
{
 8002126:	b480      	push	{r7}
 8002128:	b085      	sub	sp, #20
 800212a:	af00      	add	r7, sp, #0
 800212c:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->C2AHB2ENR, Periphs);
 800212e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002132:	f8d3 214c 	ldr.w	r2, [r3, #332]	; 0x14c
 8002136:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	4313      	orrs	r3, r2
 800213e:	f8c1 314c 	str.w	r3, [r1, #332]	; 0x14c
  tmpreg = READ_BIT(RCC->C2AHB2ENR, Periphs);
 8002142:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002146:	f8d3 214c 	ldr.w	r2, [r3, #332]	; 0x14c
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	4013      	ands	r3, r2
 800214e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002150:	68fb      	ldr	r3, [r7, #12]
}
 8002152:	bf00      	nop
 8002154:	3714      	adds	r7, #20
 8002156:	46bd      	mov	sp, r7
 8002158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215c:	4770      	bx	lr

0800215e <APPD_Init>:
static void APPD_BleDtbCfg( void );
/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void APPD_Init( void )
{
 800215e:	b580      	push	{r7, lr}
 8002160:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APPD_Init */
#if (CFG_DEBUGGER_SUPPORTED == 1)
  /**
   * Keep debugger enabled while in any low power mode
   */
  HAL_DBGMCU_EnableDBGSleepMode();
 8002162:	f003 ff8f 	bl	8006084 <HAL_DBGMCU_EnableDBGSleepMode>
  HAL_DBGMCU_EnableDBGStopMode();
 8002166:	f003 ff93 	bl	8006090 <HAL_DBGMCU_EnableDBGStopMode>

  /***************** ENABLE DEBUGGER *************************************/
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_48);
 800216a:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800216e:	f7ff ffad 	bl	80020cc <LL_EXTI_EnableIT_32_63>
  HAL_DBGMCU_DisableDBGStandbyMode();

#endif /* (CFG_DEBUGGER_SUPPORTED == 1) */

#if(CFG_DEBUG_TRACE != 0)
  DbgTraceInit();
 8002172:	f00c f821 	bl	800e1b8 <DbgTraceInit>
#endif

  APPD_SetCPU2GpioConfig( );
 8002176:	f000 f821 	bl	80021bc <APPD_SetCPU2GpioConfig>
  APPD_BleDtbCfg( );
 800217a:	f000 f8bf 	bl	80022fc <APPD_BleDtbCfg>

/* USER CODE END APPD_Init */
  return;
 800217e:	bf00      	nop
}
 8002180:	bd80      	pop	{r7, pc}
	...

08002184 <APPD_EnableCPU2>:

void APPD_EnableCPU2( void )
{
 8002184:	b5b0      	push	{r4, r5, r7, lr}
 8002186:	b088      	sub	sp, #32
 8002188:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APPD_EnableCPU2 */
  SHCI_C2_DEBUG_Init_Cmd_Packet_t DebugCmdPacket =
 800218a:	4b0b      	ldr	r3, [pc, #44]	; (80021b8 <APPD_EnableCPU2+0x34>)
 800218c:	1d3c      	adds	r4, r7, #4
 800218e:	461d      	mov	r5, r3
 8002190:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002192:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002194:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002198:	c403      	stmia	r4!, {r0, r1}
 800219a:	8022      	strh	r2, [r4, #0]
 800219c:	3402      	adds	r4, #2
 800219e:	0c13      	lsrs	r3, r2, #16
 80021a0:	7023      	strb	r3, [r4, #0]
    NBR_OF_TRACES_CONFIG_PARAMETERS,
    NBR_OF_GENERAL_CONFIG_PARAMETERS}
  };

  /**< Traces channel initialization */
  TL_TRACES_Init( );
 80021a2:	f00b fe1b 	bl	800dddc <TL_TRACES_Init>

  /** GPIO DEBUG Initialization */
  SHCI_C2_DEBUG_Init( &DebugCmdPacket  );
 80021a6:	1d3b      	adds	r3, r7, #4
 80021a8:	4618      	mov	r0, r3
 80021aa:	f00b f97a 	bl	800d4a2 <SHCI_C2_DEBUG_Init>

/* USER CODE END APPD_EnableCPU2 */
  return;
 80021ae:	bf00      	nop
}
 80021b0:	3720      	adds	r7, #32
 80021b2:	46bd      	mov	sp, r7
 80021b4:	bdb0      	pop	{r4, r5, r7, pc}
 80021b6:	bf00      	nop
 80021b8:	08016280 	.word	0x08016280

080021bc <APPD_SetCPU2GpioConfig>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void APPD_SetCPU2GpioConfig( void )
{
 80021bc:	b580      	push	{r7, lr}
 80021be:	b088      	sub	sp, #32
 80021c0:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APPD_SetCPU2GpioConfig */
  GPIO_InitTypeDef gpio_config = {0};
 80021c2:	1d3b      	adds	r3, r7, #4
 80021c4:	2200      	movs	r2, #0
 80021c6:	601a      	str	r2, [r3, #0]
 80021c8:	605a      	str	r2, [r3, #4]
 80021ca:	609a      	str	r2, [r3, #8]
 80021cc:	60da      	str	r2, [r3, #12]
 80021ce:	611a      	str	r2, [r3, #16]
  uint8_t local_loop;
  uint16_t gpioa_pin_list;
  uint16_t gpiob_pin_list;
  uint16_t gpioc_pin_list;

  gpioa_pin_list = 0;
 80021d0:	2300      	movs	r3, #0
 80021d2:	83bb      	strh	r3, [r7, #28]
  gpiob_pin_list = 0;
 80021d4:	2300      	movs	r3, #0
 80021d6:	837b      	strh	r3, [r7, #26]
  gpioc_pin_list = 0;
 80021d8:	2300      	movs	r3, #0
 80021da:	833b      	strh	r3, [r7, #24]

  for(local_loop = 0 ; local_loop < GPIO_CFG_NBR_OF_FEATURES; local_loop++)
 80021dc:	2300      	movs	r3, #0
 80021de:	77fb      	strb	r3, [r7, #31]
 80021e0:	e033      	b.n	800224a <APPD_SetCPU2GpioConfig+0x8e>
  {
    if( aGpioConfigList[local_loop].enable != 0)
 80021e2:	7ffb      	ldrb	r3, [r7, #31]
 80021e4:	4a42      	ldr	r2, [pc, #264]	; (80022f0 <APPD_SetCPU2GpioConfig+0x134>)
 80021e6:	00db      	lsls	r3, r3, #3
 80021e8:	4413      	add	r3, r2
 80021ea:	799b      	ldrb	r3, [r3, #6]
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d028      	beq.n	8002242 <APPD_SetCPU2GpioConfig+0x86>
    {
      switch((uint32_t)aGpioConfigList[local_loop].port)
 80021f0:	7ffb      	ldrb	r3, [r7, #31]
 80021f2:	4a3f      	ldr	r2, [pc, #252]	; (80022f0 <APPD_SetCPU2GpioConfig+0x134>)
 80021f4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80021f8:	4a3e      	ldr	r2, [pc, #248]	; (80022f4 <APPD_SetCPU2GpioConfig+0x138>)
 80021fa:	4293      	cmp	r3, r2
 80021fc:	d00f      	beq.n	800221e <APPD_SetCPU2GpioConfig+0x62>
 80021fe:	4a3e      	ldr	r2, [pc, #248]	; (80022f8 <APPD_SetCPU2GpioConfig+0x13c>)
 8002200:	4293      	cmp	r3, r2
 8002202:	d015      	beq.n	8002230 <APPD_SetCPU2GpioConfig+0x74>
 8002204:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002208:	d000      	beq.n	800220c <APPD_SetCPU2GpioConfig+0x50>
        case (uint32_t)GPIOC:
            gpioc_pin_list |= aGpioConfigList[local_loop].pin;
          break;

        default:
          break;
 800220a:	e01b      	b.n	8002244 <APPD_SetCPU2GpioConfig+0x88>
            gpioa_pin_list |= aGpioConfigList[local_loop].pin;
 800220c:	7ffb      	ldrb	r3, [r7, #31]
 800220e:	4a38      	ldr	r2, [pc, #224]	; (80022f0 <APPD_SetCPU2GpioConfig+0x134>)
 8002210:	00db      	lsls	r3, r3, #3
 8002212:	4413      	add	r3, r2
 8002214:	889a      	ldrh	r2, [r3, #4]
 8002216:	8bbb      	ldrh	r3, [r7, #28]
 8002218:	4313      	orrs	r3, r2
 800221a:	83bb      	strh	r3, [r7, #28]
          break;
 800221c:	e012      	b.n	8002244 <APPD_SetCPU2GpioConfig+0x88>
            gpiob_pin_list |= aGpioConfigList[local_loop].pin;
 800221e:	7ffb      	ldrb	r3, [r7, #31]
 8002220:	4a33      	ldr	r2, [pc, #204]	; (80022f0 <APPD_SetCPU2GpioConfig+0x134>)
 8002222:	00db      	lsls	r3, r3, #3
 8002224:	4413      	add	r3, r2
 8002226:	889a      	ldrh	r2, [r3, #4]
 8002228:	8b7b      	ldrh	r3, [r7, #26]
 800222a:	4313      	orrs	r3, r2
 800222c:	837b      	strh	r3, [r7, #26]
          break;
 800222e:	e009      	b.n	8002244 <APPD_SetCPU2GpioConfig+0x88>
            gpioc_pin_list |= aGpioConfigList[local_loop].pin;
 8002230:	7ffb      	ldrb	r3, [r7, #31]
 8002232:	4a2f      	ldr	r2, [pc, #188]	; (80022f0 <APPD_SetCPU2GpioConfig+0x134>)
 8002234:	00db      	lsls	r3, r3, #3
 8002236:	4413      	add	r3, r2
 8002238:	889a      	ldrh	r2, [r3, #4]
 800223a:	8b3b      	ldrh	r3, [r7, #24]
 800223c:	4313      	orrs	r3, r2
 800223e:	833b      	strh	r3, [r7, #24]
          break;
 8002240:	e000      	b.n	8002244 <APPD_SetCPU2GpioConfig+0x88>
      }
    }
 8002242:	bf00      	nop
  for(local_loop = 0 ; local_loop < GPIO_CFG_NBR_OF_FEATURES; local_loop++)
 8002244:	7ffb      	ldrb	r3, [r7, #31]
 8002246:	3301      	adds	r3, #1
 8002248:	77fb      	strb	r3, [r7, #31]
 800224a:	7ffb      	ldrb	r3, [r7, #31]
 800224c:	2b21      	cmp	r3, #33	; 0x21
 800224e:	d9c8      	bls.n	80021e2 <APPD_SetCPU2GpioConfig+0x26>
  }

  gpio_config.Pull = GPIO_NOPULL;
 8002250:	2300      	movs	r3, #0
 8002252:	60fb      	str	r3, [r7, #12]
  gpio_config.Mode = GPIO_MODE_OUTPUT_PP;
 8002254:	2301      	movs	r3, #1
 8002256:	60bb      	str	r3, [r7, #8]
  gpio_config.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002258:	2303      	movs	r3, #3
 800225a:	613b      	str	r3, [r7, #16]

  if(gpioa_pin_list != 0)
 800225c:	8bbb      	ldrh	r3, [r7, #28]
 800225e:	2b00      	cmp	r3, #0
 8002260:	d014      	beq.n	800228c <APPD_SetCPU2GpioConfig+0xd0>
  {
    gpio_config.Pin = gpioa_pin_list;
 8002262:	8bbb      	ldrh	r3, [r7, #28]
 8002264:	607b      	str	r3, [r7, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002266:	2001      	movs	r0, #1
 8002268:	f7ff ff44 	bl	80020f4 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_C2GPIOA_CLK_ENABLE();
 800226c:	2001      	movs	r0, #1
 800226e:	f7ff ff5a 	bl	8002126 <LL_C2_AHB2_GRP1_EnableClock>
    HAL_GPIO_Init(GPIOA, &gpio_config);
 8002272:	1d3b      	adds	r3, r7, #4
 8002274:	4619      	mov	r1, r3
 8002276:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800227a:	f004 fa7d 	bl	8006778 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(GPIOA, gpioa_pin_list, GPIO_PIN_RESET);
 800227e:	8bbb      	ldrh	r3, [r7, #28]
 8002280:	2200      	movs	r2, #0
 8002282:	4619      	mov	r1, r3
 8002284:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002288:	f004 fbfe 	bl	8006a88 <HAL_GPIO_WritePin>
  }

  if(gpiob_pin_list != 0)
 800228c:	8b7b      	ldrh	r3, [r7, #26]
 800228e:	2b00      	cmp	r3, #0
 8002290:	d012      	beq.n	80022b8 <APPD_SetCPU2GpioConfig+0xfc>
  {
    gpio_config.Pin = gpiob_pin_list;
 8002292:	8b7b      	ldrh	r3, [r7, #26]
 8002294:	607b      	str	r3, [r7, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002296:	2002      	movs	r0, #2
 8002298:	f7ff ff2c 	bl	80020f4 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_C2GPIOB_CLK_ENABLE();
 800229c:	2002      	movs	r0, #2
 800229e:	f7ff ff42 	bl	8002126 <LL_C2_AHB2_GRP1_EnableClock>
    HAL_GPIO_Init(GPIOB, &gpio_config);
 80022a2:	1d3b      	adds	r3, r7, #4
 80022a4:	4619      	mov	r1, r3
 80022a6:	4813      	ldr	r0, [pc, #76]	; (80022f4 <APPD_SetCPU2GpioConfig+0x138>)
 80022a8:	f004 fa66 	bl	8006778 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(GPIOB, gpiob_pin_list, GPIO_PIN_RESET);
 80022ac:	8b7b      	ldrh	r3, [r7, #26]
 80022ae:	2200      	movs	r2, #0
 80022b0:	4619      	mov	r1, r3
 80022b2:	4810      	ldr	r0, [pc, #64]	; (80022f4 <APPD_SetCPU2GpioConfig+0x138>)
 80022b4:	f004 fbe8 	bl	8006a88 <HAL_GPIO_WritePin>
  }

  if(gpioc_pin_list != 0)
 80022b8:	8b3b      	ldrh	r3, [r7, #24]
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d013      	beq.n	80022e6 <APPD_SetCPU2GpioConfig+0x12a>
  {
    gpio_config.Pin = gpioc_pin_list;
 80022be:	8b3b      	ldrh	r3, [r7, #24]
 80022c0:	607b      	str	r3, [r7, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80022c2:	2004      	movs	r0, #4
 80022c4:	f7ff ff16 	bl	80020f4 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_C2GPIOC_CLK_ENABLE();
 80022c8:	2004      	movs	r0, #4
 80022ca:	f7ff ff2c 	bl	8002126 <LL_C2_AHB2_GRP1_EnableClock>
    HAL_GPIO_Init(GPIOC, &gpio_config);
 80022ce:	1d3b      	adds	r3, r7, #4
 80022d0:	4619      	mov	r1, r3
 80022d2:	4809      	ldr	r0, [pc, #36]	; (80022f8 <APPD_SetCPU2GpioConfig+0x13c>)
 80022d4:	f004 fa50 	bl	8006778 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(GPIOC, gpioc_pin_list, GPIO_PIN_RESET);
 80022d8:	8b3b      	ldrh	r3, [r7, #24]
 80022da:	2200      	movs	r2, #0
 80022dc:	4619      	mov	r1, r3
 80022de:	4806      	ldr	r0, [pc, #24]	; (80022f8 <APPD_SetCPU2GpioConfig+0x13c>)
 80022e0:	f004 fbd2 	bl	8006a88 <HAL_GPIO_WritePin>
  }
  
/* USER CODE END APPD_SetCPU2GpioConfig */
  return;
 80022e4:	bf00      	nop
 80022e6:	bf00      	nop
}
 80022e8:	3720      	adds	r7, #32
 80022ea:	46bd      	mov	sp, r7
 80022ec:	bd80      	pop	{r7, pc}
 80022ee:	bf00      	nop
 80022f0:	080164a8 	.word	0x080164a8
 80022f4:	48000400 	.word	0x48000400
 80022f8:	48000800 	.word	0x48000800

080022fc <APPD_BleDtbCfg>:

static void APPD_BleDtbCfg( void )
{
 80022fc:	b480      	push	{r7}
 80022fe:	af00      	add	r7, sp, #0
    HAL_GPIO_Init(GPIOB, &gpio_config);
  }
#endif

/* USER CODE END APPD_BleDtbCfg */
  return;
 8002300:	bf00      	nop
}
 8002302:	46bd      	mov	sp, r7
 8002304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002308:	4770      	bx	lr

0800230a <DbgOutputInit>:
 * WRAP FUNCTIONS
 *
*************************************************************/
#if(CFG_DEBUG_TRACE != 0)
void DbgOutputInit( void )
{
 800230a:	b580      	push	{r7, lr}
 800230c:	af00      	add	r7, sp, #0
#endif
}
else if (CFG_DEBUG_TRACE_UART == hw_uart1)
{
#if(CFG_HW_USART1_ENABLED == 1)
    MX_USART1_UART_Init();
 800230e:	f002 f9ff 	bl	8004710 <MX_USART1_UART_Init>
#endif
}
#endif

/* USER CODE END DbgOutputInit */
  return;
 8002312:	bf00      	nop
}
 8002314:	bd80      	pop	{r7, pc}

08002316 <DbgOutputTraces>:

void DbgOutputTraces(  uint8_t *p_data, uint16_t size, void (*cb)(void) )
{
 8002316:	b580      	push	{r7, lr}
 8002318:	b084      	sub	sp, #16
 800231a:	af00      	add	r7, sp, #0
 800231c:	60f8      	str	r0, [r7, #12]
 800231e:	460b      	mov	r3, r1
 8002320:	607a      	str	r2, [r7, #4]
 8002322:	817b      	strh	r3, [r7, #10]
/* USER CODE END DbgOutputTraces */
  HW_UART_Transmit_DMA(CFG_DEBUG_TRACE_UART, p_data, size, cb);
 8002324:	897a      	ldrh	r2, [r7, #10]
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	68f9      	ldr	r1, [r7, #12]
 800232a:	2000      	movs	r0, #0
 800232c:	f001 fcdc 	bl	8003ce8 <HW_UART_Transmit_DMA>

/* USER CODE END DbgOutputTraces */
  return;
 8002330:	bf00      	nop
}
 8002332:	3710      	adds	r7, #16
 8002334:	46bd      	mov	sp, r7
 8002336:	bd80      	pop	{r7, pc}

08002338 <LL_C2_PWR_SetPowerMode>:
  *
  *         (*) Not available on devices STM32WB15xx, STM32WB10xx
  * @retval None
  */
__STATIC_INLINE void LL_C2_PWR_SetPowerMode(uint32_t LowPowerMode)
{
 8002338:	b480      	push	{r7}
 800233a:	b083      	sub	sp, #12
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, LowPowerMode);
 8002340:	4b07      	ldr	r3, [pc, #28]	; (8002360 <LL_C2_PWR_SetPowerMode+0x28>)
 8002342:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002346:	f023 0207 	bic.w	r2, r3, #7
 800234a:	4905      	ldr	r1, [pc, #20]	; (8002360 <LL_C2_PWR_SetPowerMode+0x28>)
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	4313      	orrs	r3, r2
 8002350:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 8002354:	bf00      	nop
 8002356:	370c      	adds	r7, #12
 8002358:	46bd      	mov	sp, r7
 800235a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235e:	4770      	bx	lr
 8002360:	58000400 	.word	0x58000400

08002364 <LL_RCC_SetClkAfterWakeFromStop>:
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_MSI
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_HSI
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetClkAfterWakeFromStop(uint32_t Clock)
{
 8002364:	b480      	push	{r7}
 8002366:	b083      	sub	sp, #12
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 800236c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002370:	689b      	ldr	r3, [r3, #8]
 8002372:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8002376:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	4313      	orrs	r3, r2
 800237e:	608b      	str	r3, [r1, #8]
}
 8002380:	bf00      	nop
 8002382:	370c      	adds	r7, #12
 8002384:	46bd      	mov	sp, r7
 8002386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238a:	4770      	bx	lr

0800238c <APPE_Init>:
static void Button_Init( void );
/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void APPE_Init( void )
{
 800238c:	b580      	push	{r7, lr}
 800238e:	af00      	add	r7, sp, #0
  SystemPower_Config(); /**< Configure the system Power Mode */
 8002390:	f000 f814 	bl	80023bc <SystemPower_Config>

  HW_TS_Init(hw_ts_InitMode_Full, &hrtc); /**< Initialize the TimerServer */
 8002394:	4908      	ldr	r1, [pc, #32]	; (80023b8 <APPE_Init+0x2c>)
 8002396:	2000      	movs	r0, #0
 8002398:	f001 fa2c 	bl	80037f4 <HW_TS_Init>

/* USER CODE BEGIN APPE_Init_1 */
  APPD_Init();
 800239c:	f7ff fedf 	bl	800215e <APPD_Init>

  /**
   * The Standby mode should not be entered before the initialization is over
   * The default state of the Low Power Manager is to allow the Standby Mode so an request is needed here
   */
  UTIL_LPM_SetOffMode(1 << CFG_LPM_APP, UTIL_LPM_DISABLE);
 80023a0:	2101      	movs	r1, #1
 80023a2:	2001      	movs	r0, #1
 80023a4:	f010 fdb2 	bl	8012f0c <UTIL_LPM_SetOffMode>

  Led_Init();
 80023a8:	f000 f8a1 	bl	80024ee <Led_Init>

  Button_Init();
 80023ac:	f000 f8a6 	bl	80024fc <Button_Init>
/* USER CODE END APPE_Init_1 */
  appe_Tl_Init();	/* Initialize all transport layers */
 80023b0:	f000 f812 	bl	80023d8 <appe_Tl_Init>
   * This system event is received with APPE_SysUserEvtRx()
   */
/* USER CODE BEGIN APPE_Init_2 */

/* USER CODE END APPE_Init_2 */
   return;
 80023b4:	bf00      	nop
}
 80023b6:	bd80      	pop	{r7, pc}
 80023b8:	20005260 	.word	0x20005260

080023bc <SystemPower_Config>:
 *
 * @param  None
 * @retval None
 */
static void SystemPower_Config(void)
{
 80023bc:	b580      	push	{r7, lr}
 80023be:	af00      	add	r7, sp, #0
  /**
   * Select HSI as system clock source after Wake Up from Stop mode
   */
  LL_RCC_SetClkAfterWakeFromStop(LL_RCC_STOP_WAKEUPCLOCK_HSI);
 80023c0:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80023c4:	f7ff ffce 	bl	8002364 <LL_RCC_SetClkAfterWakeFromStop>

  /* Initialize low power manager */
  UTIL_LPM_Init();
 80023c8:	f010 fd8e 	bl	8012ee8 <UTIL_LPM_Init>
  /* Initialize the CPU2 reset value before starting CPU2 with C2BOOT */
  LL_C2_PWR_SetPowerMode(LL_PWR_MODE_SHUTDOWN);
 80023cc:	2004      	movs	r0, #4
 80023ce:	f7ff ffb3 	bl	8002338 <LL_C2_PWR_SetPowerMode>
   *  Enable USB power
   */
  HAL_PWREx_EnableVddUSB();
#endif

  return;
 80023d2:	bf00      	nop
}
 80023d4:	bd80      	pop	{r7, pc}
	...

080023d8 <appe_Tl_Init>:

static void appe_Tl_Init( void )
{
 80023d8:	b580      	push	{r7, lr}
 80023da:	b088      	sub	sp, #32
 80023dc:	af00      	add	r7, sp, #0
  TL_MM_Config_t tl_mm_config;
  SHCI_TL_HciInitConf_t SHci_Tl_Init_Conf;
  /**< Reference table initialization */
  TL_Init();
 80023de:	f00b fb47 	bl	800da70 <TL_Init>

  MtxShciId = osMutexNew( NULL );
 80023e2:	2000      	movs	r0, #0
 80023e4:	f00c fe7c 	bl	800f0e0 <osMutexNew>
 80023e8:	4602      	mov	r2, r0
 80023ea:	4b17      	ldr	r3, [pc, #92]	; (8002448 <appe_Tl_Init+0x70>)
 80023ec:	601a      	str	r2, [r3, #0]
  SemShciId = osSemaphoreNew( 1, 0, NULL ); /*< Create the semaphore and make it busy at initialization */
 80023ee:	2200      	movs	r2, #0
 80023f0:	2100      	movs	r1, #0
 80023f2:	2001      	movs	r0, #1
 80023f4:	f00c ffbc 	bl	800f370 <osSemaphoreNew>
 80023f8:	4602      	mov	r2, r0
 80023fa:	4b14      	ldr	r3, [pc, #80]	; (800244c <appe_Tl_Init+0x74>)
 80023fc:	601a      	str	r2, [r3, #0]

  /** FreeRTOS system task creation */
  ShciUserEvtProcessId = osThreadNew(ShciUserEvtProcess, NULL, &ShciUserEvtProcess_attr);
 80023fe:	4a14      	ldr	r2, [pc, #80]	; (8002450 <appe_Tl_Init+0x78>)
 8002400:	2100      	movs	r1, #0
 8002402:	4814      	ldr	r0, [pc, #80]	; (8002454 <appe_Tl_Init+0x7c>)
 8002404:	f00c fca2 	bl	800ed4c <osThreadNew>
 8002408:	4602      	mov	r2, r0
 800240a:	4b13      	ldr	r3, [pc, #76]	; (8002458 <appe_Tl_Init+0x80>)
 800240c:	601a      	str	r2, [r3, #0]

  /**< System channel initialization */
  SHci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&SystemCmdBuffer;
 800240e:	4b13      	ldr	r3, [pc, #76]	; (800245c <appe_Tl_Init+0x84>)
 8002410:	603b      	str	r3, [r7, #0]
  SHci_Tl_Init_Conf.StatusNotCallBack = APPE_SysStatusNot;
 8002412:	4b13      	ldr	r3, [pc, #76]	; (8002460 <appe_Tl_Init+0x88>)
 8002414:	607b      	str	r3, [r7, #4]
  shci_init(APPE_SysUserEvtRx, (void*) &SHci_Tl_Init_Conf);
 8002416:	463b      	mov	r3, r7
 8002418:	4619      	mov	r1, r3
 800241a:	4812      	ldr	r0, [pc, #72]	; (8002464 <appe_Tl_Init+0x8c>)
 800241c:	f00b f9ee 	bl	800d7fc <shci_init>

  /**< Memory Manager channel initialization */
  tl_mm_config.p_BleSpareEvtBuffer = BleSpareEvtBuffer;
 8002420:	4b11      	ldr	r3, [pc, #68]	; (8002468 <appe_Tl_Init+0x90>)
 8002422:	60bb      	str	r3, [r7, #8]
  tl_mm_config.p_SystemSpareEvtBuffer = SystemSpareEvtBuffer;
 8002424:	4b11      	ldr	r3, [pc, #68]	; (800246c <appe_Tl_Init+0x94>)
 8002426:	60fb      	str	r3, [r7, #12]
  tl_mm_config.p_AsynchEvtPool = EvtPool;
 8002428:	4b11      	ldr	r3, [pc, #68]	; (8002470 <appe_Tl_Init+0x98>)
 800242a:	613b      	str	r3, [r7, #16]
  tl_mm_config.AsynchEvtPoolSize = POOL_SIZE;
 800242c:	f240 533c 	movw	r3, #1340	; 0x53c
 8002430:	617b      	str	r3, [r7, #20]
  TL_MM_Init( &tl_mm_config );
 8002432:	f107 0308 	add.w	r3, r7, #8
 8002436:	4618      	mov	r0, r3
 8002438:	f00b fc5c 	bl	800dcf4 <TL_MM_Init>

  TL_Enable();
 800243c:	f00b fb12 	bl	800da64 <TL_Enable>

  return;
 8002440:	bf00      	nop
}
 8002442:	3720      	adds	r7, #32
 8002444:	46bd      	mov	sp, r7
 8002446:	bd80      	pop	{r7, pc}
 8002448:	20005060 	.word	0x20005060
 800244c:	20005068 	.word	0x20005068
 8002450:	080165b8 	.word	0x080165b8
 8002454:	080024d5 	.word	0x080024d5
 8002458:	20005064 	.word	0x20005064
 800245c:	20030724 	.word	0x20030724
 8002460:	08002475 	.word	0x08002475
 8002464:	080024b5 	.word	0x080024b5
 8002468:	2003093c 	.word	0x2003093c
 800246c:	20030830 	.word	0x20030830
 8002470:	200301e8 	.word	0x200301e8

08002474 <APPE_SysStatusNot>:

static void APPE_SysStatusNot( SHCI_TL_CmdStatus_t status )
{
 8002474:	b580      	push	{r7, lr}
 8002476:	b082      	sub	sp, #8
 8002478:	af00      	add	r7, sp, #0
 800247a:	4603      	mov	r3, r0
 800247c:	71fb      	strb	r3, [r7, #7]
  switch (status)
 800247e:	79fb      	ldrb	r3, [r7, #7]
 8002480:	2b00      	cmp	r3, #0
 8002482:	d002      	beq.n	800248a <APPE_SysStatusNot+0x16>
 8002484:	2b01      	cmp	r3, #1
 8002486:	d008      	beq.n	800249a <APPE_SysStatusNot+0x26>
    case SHCI_TL_CmdAvailable:
      osMutexRelease( MtxShciId );
      break;

    default:
      break;
 8002488:	e00d      	b.n	80024a6 <APPE_SysStatusNot+0x32>
      osMutexAcquire( MtxShciId, osWaitForever );
 800248a:	4b09      	ldr	r3, [pc, #36]	; (80024b0 <APPE_SysStatusNot+0x3c>)
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f04f 31ff 	mov.w	r1, #4294967295
 8002492:	4618      	mov	r0, r3
 8002494:	f00c febe 	bl	800f214 <osMutexAcquire>
      break;
 8002498:	e005      	b.n	80024a6 <APPE_SysStatusNot+0x32>
      osMutexRelease( MtxShciId );
 800249a:	4b05      	ldr	r3, [pc, #20]	; (80024b0 <APPE_SysStatusNot+0x3c>)
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	4618      	mov	r0, r3
 80024a0:	f00c ff16 	bl	800f2d0 <osMutexRelease>
      break;
 80024a4:	bf00      	nop
  }
  return;
 80024a6:	bf00      	nop
}
 80024a8:	3708      	adds	r7, #8
 80024aa:	46bd      	mov	sp, r7
 80024ac:	bd80      	pop	{r7, pc}
 80024ae:	bf00      	nop
 80024b0:	20005060 	.word	0x20005060

080024b4 <APPE_SysUserEvtRx>:
 * The buffer shall not be released
 * ( eg ((tSHCI_UserEvtRxParam*)pPayload)->status shall be set to SHCI_TL_UserEventFlow_Disable )
 * When the status is not filled, the buffer is released by default
 */
static void APPE_SysUserEvtRx( void * pPayload )
{
 80024b4:	b580      	push	{r7, lr}
 80024b6:	b082      	sub	sp, #8
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	6078      	str	r0, [r7, #4]
  UNUSED(pPayload);
  /* Traces channel initialization */
  APPD_EnableCPU2( );
 80024bc:	f7ff fe62 	bl	8002184 <APPD_EnableCPU2>

  APP_BLE_Init( );
 80024c0:	f7fe fcee 	bl	8000ea0 <APP_BLE_Init>
  UTIL_LPM_SetOffMode(1U << CFG_LPM_APP, UTIL_LPM_ENABLE);
 80024c4:	2100      	movs	r1, #0
 80024c6:	2001      	movs	r0, #1
 80024c8:	f010 fd20 	bl	8012f0c <UTIL_LPM_SetOffMode>
  return;
 80024cc:	bf00      	nop
}
 80024ce:	3708      	adds	r7, #8
 80024d0:	46bd      	mov	sp, r7
 80024d2:	bd80      	pop	{r7, pc}

080024d4 <ShciUserEvtProcess>:
 *
 * FREERTOS WRAPPER FUNCTIONS
 *
*************************************************************/
static void ShciUserEvtProcess(void *argument)
{
 80024d4:	b580      	push	{r7, lr}
 80024d6:	b082      	sub	sp, #8
 80024d8:	af00      	add	r7, sp, #0
 80024da:	6078      	str	r0, [r7, #4]
  for(;;)
  {
    /* USER CODE BEGIN SHCI_USER_EVT_PROCESS_1 */

    /* USER CODE END SHCI_USER_EVT_PROCESS_1 */
     osThreadFlagsWait(1, osFlagsWaitAny, osWaitForever);
 80024dc:	f04f 32ff 	mov.w	r2, #4294967295
 80024e0:	2100      	movs	r1, #0
 80024e2:	2001      	movs	r0, #1
 80024e4:	f00c fd3a 	bl	800ef5c <osThreadFlagsWait>
     shci_user_evt_proc();
 80024e8:	f00b f9a4 	bl	800d834 <shci_user_evt_proc>
     osThreadFlagsWait(1, osFlagsWaitAny, osWaitForever);
 80024ec:	e7f6      	b.n	80024dc <ShciUserEvtProcess+0x8>

080024ee <Led_Init>:
    }
}

/* USER CODE BEGIN FD_LOCAL_FUNCTIONS */
static void Led_Init( void )
{
 80024ee:	b480      	push	{r7}
 80024f0:	af00      	add	r7, sp, #0
  BSP_LED_Init(LED_RED);

  BSP_LED_On(LED_GREEN);
#endif

  return;
 80024f2:	bf00      	nop
}
 80024f4:	46bd      	mov	sp, r7
 80024f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fa:	4770      	bx	lr

080024fc <Button_Init>:

static void Button_Init( void )
{
 80024fc:	b480      	push	{r7}
 80024fe:	af00      	add	r7, sp, #0
  BSP_PB_Init(BUTTON_SW1, BUTTON_MODE_EXTI);
  BSP_PB_Init(BUTTON_SW2, BUTTON_MODE_EXTI);
  BSP_PB_Init(BUTTON_SW3, BUTTON_MODE_EXTI);
#endif

  return;
 8002500:	bf00      	nop
}
 8002502:	46bd      	mov	sp, r7
 8002504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002508:	4770      	bx	lr
	...

0800250c <shci_notify_asynch_evt>:
 * WRAP FUNCTIONS
 *
 *************************************************************/

void shci_notify_asynch_evt(void* pdata)
{
 800250c:	b580      	push	{r7, lr}
 800250e:	b082      	sub	sp, #8
 8002510:	af00      	add	r7, sp, #0
 8002512:	6078      	str	r0, [r7, #4]
  UNUSED(pdata);
  osThreadFlagsSet( ShciUserEvtProcessId, 1 );
 8002514:	4b04      	ldr	r3, [pc, #16]	; (8002528 <shci_notify_asynch_evt+0x1c>)
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	2101      	movs	r1, #1
 800251a:	4618      	mov	r0, r3
 800251c:	f00c fcbc 	bl	800ee98 <osThreadFlagsSet>
  return;
 8002520:	bf00      	nop
}
 8002522:	3708      	adds	r7, #8
 8002524:	46bd      	mov	sp, r7
 8002526:	bd80      	pop	{r7, pc}
 8002528:	20005064 	.word	0x20005064

0800252c <shci_cmd_resp_release>:

void shci_cmd_resp_release(uint32_t flag)
{
 800252c:	b580      	push	{r7, lr}
 800252e:	b082      	sub	sp, #8
 8002530:	af00      	add	r7, sp, #0
 8002532:	6078      	str	r0, [r7, #4]
  UNUSED(flag);
  osSemaphoreRelease( SemShciId );
 8002534:	4b04      	ldr	r3, [pc, #16]	; (8002548 <shci_cmd_resp_release+0x1c>)
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	4618      	mov	r0, r3
 800253a:	f00d f81d 	bl	800f578 <osSemaphoreRelease>
  return;
 800253e:	bf00      	nop
}
 8002540:	3708      	adds	r7, #8
 8002542:	46bd      	mov	sp, r7
 8002544:	bd80      	pop	{r7, pc}
 8002546:	bf00      	nop
 8002548:	20005068 	.word	0x20005068

0800254c <shci_cmd_resp_wait>:

void shci_cmd_resp_wait(uint32_t timeout)
{
 800254c:	b580      	push	{r7, lr}
 800254e:	b082      	sub	sp, #8
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]
  UNUSED(timeout);
  osSemaphoreAcquire( SemShciId, osWaitForever );
 8002554:	4b05      	ldr	r3, [pc, #20]	; (800256c <shci_cmd_resp_wait+0x20>)
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	f04f 31ff 	mov.w	r1, #4294967295
 800255c:	4618      	mov	r0, r3
 800255e:	f00c ffa5 	bl	800f4ac <osSemaphoreAcquire>
  return;
 8002562:	bf00      	nop
}
 8002564:	3708      	adds	r7, #8
 8002566:	46bd      	mov	sp, r7
 8002568:	bd80      	pop	{r7, pc}
 800256a:	bf00      	nop
 800256c:	20005068 	.word	0x20005068

08002570 <Dotstar_Init>:
} DotStar_State;


DotStar_State dotstar_state;

void Dotstar_Init(DotStar_InitHandle* dotstar_init){
 8002570:	b580      	push	{r7, lr}
 8002572:	b084      	sub	sp, #16
 8002574:	af00      	add	r7, sp, #0
 8002576:	6078      	str	r0, [r7, #4]

   dotstar_state.spiHandle = dotstar_init->spiHandle;
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	4a23      	ldr	r2, [pc, #140]	; (800260c <Dotstar_Init+0x9c>)
 800257e:	6013      	str	r3, [r2, #0]
   dotstar_state.numLEDs = dotstar_init->numLEDs;
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	889a      	ldrh	r2, [r3, #4]
 8002584:	4b21      	ldr	r3, [pc, #132]	; (800260c <Dotstar_Init+0x9c>)
 8002586:	809a      	strh	r2, [r3, #4]
   dotstar_state.brightness = 0;
 8002588:	4b20      	ldr	r3, [pc, #128]	; (800260c <Dotstar_Init+0x9c>)
 800258a:	2200      	movs	r2, #0
 800258c:	719a      	strb	r2, [r3, #6]
   dotstar_state.rOffset = dotstar_init->colorOrder & 3;
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	799b      	ldrb	r3, [r3, #6]
 8002592:	f003 0303 	and.w	r3, r3, #3
 8002596:	b2da      	uxtb	r2, r3
 8002598:	4b1c      	ldr	r3, [pc, #112]	; (800260c <Dotstar_Init+0x9c>)
 800259a:	731a      	strb	r2, [r3, #12]
   dotstar_state.gOffset = (dotstar_init->colorOrder >> 2) & 3;
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	799b      	ldrb	r3, [r3, #6]
 80025a0:	089b      	lsrs	r3, r3, #2
 80025a2:	b2db      	uxtb	r3, r3
 80025a4:	f003 0303 	and.w	r3, r3, #3
 80025a8:	b2da      	uxtb	r2, r3
 80025aa:	4b18      	ldr	r3, [pc, #96]	; (800260c <Dotstar_Init+0x9c>)
 80025ac:	735a      	strb	r2, [r3, #13]
   dotstar_state.bOffset = (dotstar_init->colorOrder >> 4) & 3;
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	799b      	ldrb	r3, [r3, #6]
 80025b2:	091b      	lsrs	r3, r3, #4
 80025b4:	b2db      	uxtb	r3, r3
 80025b6:	f003 0303 	and.w	r3, r3, #3
 80025ba:	b2da      	uxtb	r2, r3
 80025bc:	4b13      	ldr	r3, [pc, #76]	; (800260c <Dotstar_Init+0x9c>)
 80025be:	739a      	strb	r2, [r3, #14]

   uint16_t bytes = (dotstar_state.rOffset == dotstar_state.gOffset) ?
 80025c0:	4b12      	ldr	r3, [pc, #72]	; (800260c <Dotstar_Init+0x9c>)
 80025c2:	7b1a      	ldrb	r2, [r3, #12]
 80025c4:	4b11      	ldr	r3, [pc, #68]	; (800260c <Dotstar_Init+0x9c>)
 80025c6:	7b5b      	ldrb	r3, [r3, #13]
 80025c8:	429a      	cmp	r2, r3
 80025ca:	d10c      	bne.n	80025e6 <Dotstar_Init+0x76>
     dotstar_state.numLEDs + ((dotstar_state.numLEDs + 3) / 4) : // MONO: 10 bits/pixel, round up to next byte
 80025cc:	4b0f      	ldr	r3, [pc, #60]	; (800260c <Dotstar_Init+0x9c>)
 80025ce:	889a      	ldrh	r2, [r3, #4]
 80025d0:	4b0e      	ldr	r3, [pc, #56]	; (800260c <Dotstar_Init+0x9c>)
 80025d2:	889b      	ldrh	r3, [r3, #4]
 80025d4:	3303      	adds	r3, #3
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	da00      	bge.n	80025dc <Dotstar_Init+0x6c>
 80025da:	3303      	adds	r3, #3
 80025dc:	109b      	asrs	r3, r3, #2
 80025de:	b29b      	uxth	r3, r3
   uint16_t bytes = (dotstar_state.rOffset == dotstar_state.gOffset) ?
 80025e0:	4413      	add	r3, r2
 80025e2:	b29b      	uxth	r3, r3
 80025e4:	e005      	b.n	80025f2 <Dotstar_Init+0x82>
     dotstar_state.numLEDs * 3;              // COLOR: 3 bytes/pixel
 80025e6:	4b09      	ldr	r3, [pc, #36]	; (800260c <Dotstar_Init+0x9c>)
 80025e8:	889b      	ldrh	r3, [r3, #4]
   uint16_t bytes = (dotstar_state.rOffset == dotstar_state.gOffset) ?
 80025ea:	461a      	mov	r2, r3
 80025ec:	0052      	lsls	r2, r2, #1
 80025ee:	4413      	add	r3, r2
 80025f0:	b29b      	uxth	r3, r3
 80025f2:	81fb      	strh	r3, [r7, #14]

   dotstar_state.pixels = (uint8_t *)malloc(bytes);
 80025f4:	89fb      	ldrh	r3, [r7, #14]
 80025f6:	4618      	mov	r0, r3
 80025f8:	f010 fce0 	bl	8012fbc <malloc>
 80025fc:	4603      	mov	r3, r0
 80025fe:	461a      	mov	r2, r3
 8002600:	4b02      	ldr	r3, [pc, #8]	; (800260c <Dotstar_Init+0x9c>)
 8002602:	609a      	str	r2, [r3, #8]
}
 8002604:	bf00      	nop
 8002606:	3710      	adds	r7, #16
 8002608:	46bd      	mov	sp, r7
 800260a:	bd80      	pop	{r7, pc}
 800260c:	2000506c 	.word	0x2000506c

08002610 <ds_show>:
*/

/*!
  @brief   Transmit pixel data in RAM to DotStars.
*/
void ds_show(void) {
 8002610:	b580      	push	{r7, lr}
 8002612:	b084      	sub	sp, #16
 8002614:	af00      	add	r7, sp, #0

  if(!dotstar_state.pixels) return;
 8002616:	4b4b      	ldr	r3, [pc, #300]	; (8002744 <ds_show+0x134>)
 8002618:	689b      	ldr	r3, [r3, #8]
 800261a:	2b00      	cmp	r3, #0
 800261c:	f000 808e 	beq.w	800273c <ds_show+0x12c>

  uint8_t *ptr = dotstar_state.pixels, i;            // -> LED data
 8002620:	4b48      	ldr	r3, [pc, #288]	; (8002744 <ds_show+0x134>)
 8002622:	689b      	ldr	r3, [r3, #8]
 8002624:	60fb      	str	r3, [r7, #12]
  uint16_t n   = dotstar_state.numLEDs;              // Counter
 8002626:	4b47      	ldr	r3, [pc, #284]	; (8002744 <ds_show+0x134>)
 8002628:	889b      	ldrh	r3, [r3, #4]
 800262a:	813b      	strh	r3, [r7, #8]
  uint16_t b16 = (uint16_t)dotstar_state.brightness; // Type-convert for fixed-point math
 800262c:	4b45      	ldr	r3, [pc, #276]	; (8002744 <ds_show+0x134>)
 800262e:	799b      	ldrb	r3, [r3, #6]
 8002630:	80fb      	strh	r3, [r7, #6]
  uint8_t sendval;

    sendval = 0x00;
 8002632:	2300      	movs	r3, #0
 8002634:	717b      	strb	r3, [r7, #5]
    for(i=0; i<4; i++) spi_out(&sendval);    // 4 byte start-frame marker
 8002636:	2300      	movs	r3, #0
 8002638:	72fb      	strb	r3, [r7, #11]
 800263a:	e00a      	b.n	8002652 <ds_show+0x42>
 800263c:	4b41      	ldr	r3, [pc, #260]	; (8002744 <ds_show+0x134>)
 800263e:	6818      	ldr	r0, [r3, #0]
 8002640:	1d79      	adds	r1, r7, #5
 8002642:	f04f 33ff 	mov.w	r3, #4294967295
 8002646:	2201      	movs	r2, #1
 8002648:	f007 fb19 	bl	8009c7e <HAL_SPI_Transmit>
 800264c:	7afb      	ldrb	r3, [r7, #11]
 800264e:	3301      	adds	r3, #1
 8002650:	72fb      	strb	r3, [r7, #11]
 8002652:	7afb      	ldrb	r3, [r7, #11]
 8002654:	2b03      	cmp	r3, #3
 8002656:	d9f1      	bls.n	800263c <ds_show+0x2c>

    if(dotstar_state.brightness) {                     // Scale pixel brightness on output
 8002658:	4b3a      	ldr	r3, [pc, #232]	; (8002744 <ds_show+0x134>)
 800265a:	799b      	ldrb	r3, [r3, #6]
 800265c:	2b00      	cmp	r3, #0
 800265e:	d02c      	beq.n	80026ba <ds_show+0xaa>
      do {                               // For each pixel...
    	sendval = 0xFF;
 8002660:	23ff      	movs	r3, #255	; 0xff
 8002662:	717b      	strb	r3, [r7, #5]
        spi_out(&sendval);                   //  Pixel start
 8002664:	4b37      	ldr	r3, [pc, #220]	; (8002744 <ds_show+0x134>)
 8002666:	6818      	ldr	r0, [r3, #0]
 8002668:	1d79      	adds	r1, r7, #5
 800266a:	f04f 33ff 	mov.w	r3, #4294967295
 800266e:	2201      	movs	r2, #1
 8002670:	f007 fb05 	bl	8009c7e <HAL_SPI_Transmit>
        for(i=0; i<3; i++) {
 8002674:	2300      	movs	r3, #0
 8002676:	72fb      	strb	r3, [r7, #11]
 8002678:	e015      	b.n	80026a6 <ds_show+0x96>
        	sendval = (*ptr++ * b16) >> 8;
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	1c5a      	adds	r2, r3, #1
 800267e:	60fa      	str	r2, [r7, #12]
 8002680:	781b      	ldrb	r3, [r3, #0]
 8002682:	461a      	mov	r2, r3
 8002684:	88fb      	ldrh	r3, [r7, #6]
 8002686:	fb03 f302 	mul.w	r3, r3, r2
 800268a:	121b      	asrs	r3, r3, #8
 800268c:	b2db      	uxtb	r3, r3
 800268e:	717b      	strb	r3, [r7, #5]
        	spi_out(&sendval); // Scale, write RGB
 8002690:	4b2c      	ldr	r3, [pc, #176]	; (8002744 <ds_show+0x134>)
 8002692:	6818      	ldr	r0, [r3, #0]
 8002694:	1d79      	adds	r1, r7, #5
 8002696:	f04f 33ff 	mov.w	r3, #4294967295
 800269a:	2201      	movs	r2, #1
 800269c:	f007 faef 	bl	8009c7e <HAL_SPI_Transmit>
        for(i=0; i<3; i++) {
 80026a0:	7afb      	ldrb	r3, [r7, #11]
 80026a2:	3301      	adds	r3, #1
 80026a4:	72fb      	strb	r3, [r7, #11]
 80026a6:	7afb      	ldrb	r3, [r7, #11]
 80026a8:	2b02      	cmp	r3, #2
 80026aa:	d9e6      	bls.n	800267a <ds_show+0x6a>
        }
      } while(--n);
 80026ac:	893b      	ldrh	r3, [r7, #8]
 80026ae:	3b01      	subs	r3, #1
 80026b0:	813b      	strh	r3, [r7, #8]
 80026b2:	893b      	ldrh	r3, [r7, #8]
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d1d3      	bne.n	8002660 <ds_show+0x50>
 80026b8:	e025      	b.n	8002706 <ds_show+0xf6>
    } else {                             // Full brightness (no scaling)
      do {                               // For each pixel...
    	sendval = 0xFF;
 80026ba:	23ff      	movs	r3, #255	; 0xff
 80026bc:	717b      	strb	r3, [r7, #5]
        spi_out(&sendval);                   //  Pixel start
 80026be:	4b21      	ldr	r3, [pc, #132]	; (8002744 <ds_show+0x134>)
 80026c0:	6818      	ldr	r0, [r3, #0]
 80026c2:	1d79      	adds	r1, r7, #5
 80026c4:	f04f 33ff 	mov.w	r3, #4294967295
 80026c8:	2201      	movs	r2, #1
 80026ca:	f007 fad8 	bl	8009c7e <HAL_SPI_Transmit>
        for(i=0; i<3; i++) {
 80026ce:	2300      	movs	r3, #0
 80026d0:	72fb      	strb	r3, [r7, #11]
 80026d2:	e00f      	b.n	80026f4 <ds_show+0xe4>
        	sendval = *ptr++;
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	1c5a      	adds	r2, r3, #1
 80026d8:	60fa      	str	r2, [r7, #12]
 80026da:	781b      	ldrb	r3, [r3, #0]
 80026dc:	717b      	strb	r3, [r7, #5]
        	spi_out(&sendval); // Write R,G,B
 80026de:	4b19      	ldr	r3, [pc, #100]	; (8002744 <ds_show+0x134>)
 80026e0:	6818      	ldr	r0, [r3, #0]
 80026e2:	1d79      	adds	r1, r7, #5
 80026e4:	f04f 33ff 	mov.w	r3, #4294967295
 80026e8:	2201      	movs	r2, #1
 80026ea:	f007 fac8 	bl	8009c7e <HAL_SPI_Transmit>
        for(i=0; i<3; i++) {
 80026ee:	7afb      	ldrb	r3, [r7, #11]
 80026f0:	3301      	adds	r3, #1
 80026f2:	72fb      	strb	r3, [r7, #11]
 80026f4:	7afb      	ldrb	r3, [r7, #11]
 80026f6:	2b02      	cmp	r3, #2
 80026f8:	d9ec      	bls.n	80026d4 <ds_show+0xc4>
        }
      } while(--n);
 80026fa:	893b      	ldrh	r3, [r7, #8]
 80026fc:	3b01      	subs	r3, #1
 80026fe:	813b      	strh	r3, [r7, #8]
 8002700:	893b      	ldrh	r3, [r7, #8]
 8002702:	2b00      	cmp	r3, #0
 8002704:	d1d9      	bne.n	80026ba <ds_show+0xaa>
    // revisions are more strict (e.g. might mandate use of end-frame
    // before start-frame marker). i.e. let's not remove this. But after
    // testing a bit more the suggestion is to use at least (numLeds+1)/2
    // high values (1) or (numLeds+15)/16 full bytes as EndFrame. For details see also:
    // https://cpldcpu.wordpress.com/2014/11/30/understanding-the-apa102-superled/
    sendval = 0xFF;
 8002706:	23ff      	movs	r3, #255	; 0xff
 8002708:	717b      	strb	r3, [r7, #5]
    for(i=0; i<((dotstar_state.numLEDs + 15) / 16); i++) spi_out(&sendval);
 800270a:	2300      	movs	r3, #0
 800270c:	72fb      	strb	r3, [r7, #11]
 800270e:	e00a      	b.n	8002726 <ds_show+0x116>
 8002710:	4b0c      	ldr	r3, [pc, #48]	; (8002744 <ds_show+0x134>)
 8002712:	6818      	ldr	r0, [r3, #0]
 8002714:	1d79      	adds	r1, r7, #5
 8002716:	f04f 33ff 	mov.w	r3, #4294967295
 800271a:	2201      	movs	r2, #1
 800271c:	f007 faaf 	bl	8009c7e <HAL_SPI_Transmit>
 8002720:	7afb      	ldrb	r3, [r7, #11]
 8002722:	3301      	adds	r3, #1
 8002724:	72fb      	strb	r3, [r7, #11]
 8002726:	7afa      	ldrb	r2, [r7, #11]
 8002728:	4b06      	ldr	r3, [pc, #24]	; (8002744 <ds_show+0x134>)
 800272a:	889b      	ldrh	r3, [r3, #4]
 800272c:	330f      	adds	r3, #15
 800272e:	2b00      	cmp	r3, #0
 8002730:	da00      	bge.n	8002734 <ds_show+0x124>
 8002732:	330f      	adds	r3, #15
 8002734:	111b      	asrs	r3, r3, #4
 8002736:	429a      	cmp	r2, r3
 8002738:	dbea      	blt.n	8002710 <ds_show+0x100>
 800273a:	e000      	b.n	800273e <ds_show+0x12e>
  if(!dotstar_state.pixels) return;
 800273c:	bf00      	nop

}
 800273e:	3710      	adds	r7, #16
 8002740:	46bd      	mov	sp, r7
 8002742:	bd80      	pop	{r7, pc}
 8002744:	2000506c 	.word	0x2000506c

08002748 <ds_clear>:

/*!
  @brief   Fill the whole DotStar strip with 0 / black / off.
*/
void ds_clear() {
 8002748:	b580      	push	{r7, lr}
 800274a:	af00      	add	r7, sp, #0
  memset(dotstar_state.pixels, 0, (dotstar_state.rOffset == dotstar_state.gOffset) ?
 800274c:	4b0f      	ldr	r3, [pc, #60]	; (800278c <ds_clear+0x44>)
 800274e:	6898      	ldr	r0, [r3, #8]
 8002750:	4b0e      	ldr	r3, [pc, #56]	; (800278c <ds_clear+0x44>)
 8002752:	7b1a      	ldrb	r2, [r3, #12]
 8002754:	4b0d      	ldr	r3, [pc, #52]	; (800278c <ds_clear+0x44>)
 8002756:	7b5b      	ldrb	r3, [r3, #13]
 8002758:	429a      	cmp	r2, r3
 800275a:	d10b      	bne.n	8002774 <ds_clear+0x2c>
    dotstar_state.numLEDs + ((dotstar_state.numLEDs + 3) / 4) : // MONO: 10 bits/pixel
 800275c:	4b0b      	ldr	r3, [pc, #44]	; (800278c <ds_clear+0x44>)
 800275e:	889b      	ldrh	r3, [r3, #4]
 8002760:	461a      	mov	r2, r3
 8002762:	4b0a      	ldr	r3, [pc, #40]	; (800278c <ds_clear+0x44>)
 8002764:	889b      	ldrh	r3, [r3, #4]
 8002766:	3303      	adds	r3, #3
 8002768:	2b00      	cmp	r3, #0
 800276a:	da00      	bge.n	800276e <ds_clear+0x26>
 800276c:	3303      	adds	r3, #3
 800276e:	109b      	asrs	r3, r3, #2
 8002770:	4413      	add	r3, r2
 8002772:	e005      	b.n	8002780 <ds_clear+0x38>
    dotstar_state.numLEDs * 3);                   // COLOR: 3 bytes/pixel
 8002774:	4b05      	ldr	r3, [pc, #20]	; (800278c <ds_clear+0x44>)
 8002776:	889b      	ldrh	r3, [r3, #4]
 8002778:	461a      	mov	r2, r3
 800277a:	4613      	mov	r3, r2
 800277c:	005b      	lsls	r3, r3, #1
 800277e:	4413      	add	r3, r2
  memset(dotstar_state.pixels, 0, (dotstar_state.rOffset == dotstar_state.gOffset) ?
 8002780:	461a      	mov	r2, r3
 8002782:	2100      	movs	r1, #0
 8002784:	f010 fc2d 	bl	8012fe2 <memset>
}
 8002788:	bf00      	nop
 800278a:	bd80      	pop	{r7, pc}
 800278c:	2000506c 	.word	0x2000506c

08002790 <ds_setPixelColor32B>:
  @param   n  Pixel index, starting from 0.
  @param   c  32-bit color value. Most significant byte is 0, second is
              red, then green, and least significant byte is blue.
              e.g. 0x00RRGGBB
*/
void ds_setPixelColor32B(uint16_t n, uint32_t c) {
 8002790:	b480      	push	{r7}
 8002792:	b085      	sub	sp, #20
 8002794:	af00      	add	r7, sp, #0
 8002796:	4603      	mov	r3, r0
 8002798:	6039      	str	r1, [r7, #0]
 800279a:	80fb      	strh	r3, [r7, #6]
  if(n < dotstar_state.numLEDs) {
 800279c:	4b16      	ldr	r3, [pc, #88]	; (80027f8 <ds_setPixelColor32B+0x68>)
 800279e:	889b      	ldrh	r3, [r3, #4]
 80027a0:	88fa      	ldrh	r2, [r7, #6]
 80027a2:	429a      	cmp	r2, r3
 80027a4:	d221      	bcs.n	80027ea <ds_setPixelColor32B+0x5a>
    uint8_t *p = &dotstar_state.pixels[n * 3];
 80027a6:	4b14      	ldr	r3, [pc, #80]	; (80027f8 <ds_setPixelColor32B+0x68>)
 80027a8:	6899      	ldr	r1, [r3, #8]
 80027aa:	88fa      	ldrh	r2, [r7, #6]
 80027ac:	4613      	mov	r3, r2
 80027ae:	005b      	lsls	r3, r3, #1
 80027b0:	4413      	add	r3, r2
 80027b2:	440b      	add	r3, r1
 80027b4:	60fb      	str	r3, [r7, #12]
    p[dotstar_state.rOffset] = (uint8_t)(c >> 16);
 80027b6:	683b      	ldr	r3, [r7, #0]
 80027b8:	0c1a      	lsrs	r2, r3, #16
 80027ba:	4b0f      	ldr	r3, [pc, #60]	; (80027f8 <ds_setPixelColor32B+0x68>)
 80027bc:	7b1b      	ldrb	r3, [r3, #12]
 80027be:	4619      	mov	r1, r3
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	440b      	add	r3, r1
 80027c4:	b2d2      	uxtb	r2, r2
 80027c6:	701a      	strb	r2, [r3, #0]
    p[dotstar_state.gOffset] = (uint8_t)(c >>  8);
 80027c8:	683b      	ldr	r3, [r7, #0]
 80027ca:	0a1a      	lsrs	r2, r3, #8
 80027cc:	4b0a      	ldr	r3, [pc, #40]	; (80027f8 <ds_setPixelColor32B+0x68>)
 80027ce:	7b5b      	ldrb	r3, [r3, #13]
 80027d0:	4619      	mov	r1, r3
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	440b      	add	r3, r1
 80027d6:	b2d2      	uxtb	r2, r2
 80027d8:	701a      	strb	r2, [r3, #0]
    p[dotstar_state.bOffset] = (uint8_t)c;
 80027da:	4b07      	ldr	r3, [pc, #28]	; (80027f8 <ds_setPixelColor32B+0x68>)
 80027dc:	7b9b      	ldrb	r3, [r3, #14]
 80027de:	461a      	mov	r2, r3
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	4413      	add	r3, r2
 80027e4:	683a      	ldr	r2, [r7, #0]
 80027e6:	b2d2      	uxtb	r2, r2
 80027e8:	701a      	strb	r2, [r3, #0]
  }
}
 80027ea:	bf00      	nop
 80027ec:	3714      	adds	r7, #20
 80027ee:	46bd      	mov	sp, r7
 80027f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f4:	4770      	bx	lr
 80027f6:	bf00      	nop
 80027f8:	2000506c 	.word	0x2000506c

080027fc <ds_fill>:
  @param   first  Index of first pixel to fill, starting from 0. Must be
                  in-bounds, no clipping is performed. 0 if unspecified.
  @param   count  Number of pixels to fill, as a positive value. Passing
                  0 or leaving unspecified will fill to end of strip.
*/
void ds_fill(uint32_t c, uint16_t first, uint16_t count) {
 80027fc:	b580      	push	{r7, lr}
 80027fe:	b084      	sub	sp, #16
 8002800:	af00      	add	r7, sp, #0
 8002802:	6078      	str	r0, [r7, #4]
 8002804:	460b      	mov	r3, r1
 8002806:	807b      	strh	r3, [r7, #2]
 8002808:	4613      	mov	r3, r2
 800280a:	803b      	strh	r3, [r7, #0]
  uint16_t i, end;

  if(first >= dotstar_state.numLEDs) {
 800280c:	4b15      	ldr	r3, [pc, #84]	; (8002864 <ds_fill+0x68>)
 800280e:	889b      	ldrh	r3, [r3, #4]
 8002810:	887a      	ldrh	r2, [r7, #2]
 8002812:	429a      	cmp	r2, r3
 8002814:	d222      	bcs.n	800285c <ds_fill+0x60>
    return; // If first LED is past end of strip, nothing to do
  }

  // Calculate the index ONE AFTER the last pixel to fill
  if(count == 0) {
 8002816:	883b      	ldrh	r3, [r7, #0]
 8002818:	2b00      	cmp	r3, #0
 800281a:	d103      	bne.n	8002824 <ds_fill+0x28>
    // Fill to end of strip
    end = dotstar_state.numLEDs;
 800281c:	4b11      	ldr	r3, [pc, #68]	; (8002864 <ds_fill+0x68>)
 800281e:	889b      	ldrh	r3, [r3, #4]
 8002820:	81bb      	strh	r3, [r7, #12]
 8002822:	e00b      	b.n	800283c <ds_fill+0x40>
  } else {
    // Ensure that the loop won't go past the last pixel
    end = first + count;
 8002824:	887a      	ldrh	r2, [r7, #2]
 8002826:	883b      	ldrh	r3, [r7, #0]
 8002828:	4413      	add	r3, r2
 800282a:	81bb      	strh	r3, [r7, #12]
    if(end > dotstar_state.numLEDs) end = dotstar_state.numLEDs;
 800282c:	4b0d      	ldr	r3, [pc, #52]	; (8002864 <ds_fill+0x68>)
 800282e:	889b      	ldrh	r3, [r3, #4]
 8002830:	89ba      	ldrh	r2, [r7, #12]
 8002832:	429a      	cmp	r2, r3
 8002834:	d902      	bls.n	800283c <ds_fill+0x40>
 8002836:	4b0b      	ldr	r3, [pc, #44]	; (8002864 <ds_fill+0x68>)
 8002838:	889b      	ldrh	r3, [r3, #4]
 800283a:	81bb      	strh	r3, [r7, #12]
  }

  for(i = first; i < end; i++) {
 800283c:	887b      	ldrh	r3, [r7, #2]
 800283e:	81fb      	strh	r3, [r7, #14]
 8002840:	e007      	b.n	8002852 <ds_fill+0x56>
    ds_setPixelColor32B(i, c);
 8002842:	89fb      	ldrh	r3, [r7, #14]
 8002844:	6879      	ldr	r1, [r7, #4]
 8002846:	4618      	mov	r0, r3
 8002848:	f7ff ffa2 	bl	8002790 <ds_setPixelColor32B>
  for(i = first; i < end; i++) {
 800284c:	89fb      	ldrh	r3, [r7, #14]
 800284e:	3301      	adds	r3, #1
 8002850:	81fb      	strh	r3, [r7, #14]
 8002852:	89fa      	ldrh	r2, [r7, #14]
 8002854:	89bb      	ldrh	r3, [r7, #12]
 8002856:	429a      	cmp	r2, r3
 8002858:	d3f3      	bcc.n	8002842 <ds_fill+0x46>
 800285a:	e000      	b.n	800285e <ds_fill+0x62>
    return; // If first LED is past end of strip, nothing to do
 800285c:	bf00      	nop
  }
}
 800285e:	3710      	adds	r7, #16
 8002860:	46bd      	mov	sp, r7
 8002862:	bd80      	pop	{r7, pc}
 8002864:	2000506c 	.word	0x2000506c

08002868 <ds_setBrightness>:
           is 'non destructive' -- it's applied as color data is being
           issued to the strip, not during setPixelColor(), and also
           means that getPixelColor() returns the exact value originally
           stored.
*/
void ds_setBrightness(uint8_t b) {
 8002868:	b480      	push	{r7}
 800286a:	b083      	sub	sp, #12
 800286c:	af00      	add	r7, sp, #0
 800286e:	4603      	mov	r3, r0
 8002870:	71fb      	strb	r3, [r7, #7]
  // optimizes the actual scaling math later, allowing a fast 8x8-bit
  // multiply and taking the MSB. 'brightness' is a uint8_t, adding 1
  // here may (intentionally) roll over...so 0 = max brightness (color
  // values are interpreted literally; no scaling), 1 = min brightness
  // (off), 255 = just below max brightness.
  dotstar_state.brightness = b + 1;
 8002872:	79fb      	ldrb	r3, [r7, #7]
 8002874:	3301      	adds	r3, #1
 8002876:	b2da      	uxtb	r2, r3
 8002878:	4b03      	ldr	r3, [pc, #12]	; (8002888 <ds_setBrightness+0x20>)
 800287a:	719a      	strb	r2, [r3, #6]
}
 800287c:	bf00      	nop
 800287e:	370c      	adds	r7, #12
 8002880:	46bd      	mov	sp, r7
 8002882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002886:	4770      	bx	lr
 8002888:	2000506c 	.word	0x2000506c

0800288c <I2C_Write_Byte>:
//#include "stm32wbxx_hal_i2c.h"
//#include "stm32wbxx_hal.h"


void I2C_Write_Byte(uint8_t value, uint8_t Cmd)
{
 800288c:	b580      	push	{r7, lr}
 800288e:	b086      	sub	sp, #24
 8002890:	af02      	add	r7, sp, #8
 8002892:	4603      	mov	r3, r0
 8002894:	460a      	mov	r2, r1
 8002896:	71fb      	strb	r3, [r7, #7]
 8002898:	4613      	mov	r3, r2
 800289a:	71bb      	strb	r3, [r7, #6]
  uint16_t Addr = 0x3C << 1;
 800289c:	2378      	movs	r3, #120	; 0x78
 800289e:	81fb      	strh	r3, [r7, #14]
  uint8_t Data[2];
  Data[0] = Cmd;
 80028a0:	79bb      	ldrb	r3, [r7, #6]
 80028a2:	733b      	strb	r3, [r7, #12]
  Data[1] = value;
 80028a4:	79fb      	ldrb	r3, [r7, #7]
 80028a6:	737b      	strb	r3, [r7, #13]

  HAL_I2C_Master_Transmit(&ER_OLED_I2C_PORT, Addr, Data, 2, HAL_MAX_DELAY);
 80028a8:	f107 020c 	add.w	r2, r7, #12
 80028ac:	89f9      	ldrh	r1, [r7, #14]
 80028ae:	f04f 33ff 	mov.w	r3, #4294967295
 80028b2:	9300      	str	r3, [sp, #0]
 80028b4:	2302      	movs	r3, #2
 80028b6:	4803      	ldr	r0, [pc, #12]	; (80028c4 <I2C_Write_Byte+0x38>)
 80028b8:	f004 f9ca 	bl	8006c50 <HAL_I2C_Master_Transmit>
}
 80028bc:	bf00      	nop
 80028be:	3710      	adds	r7, #16
 80028c0:	46bd      	mov	sp, r7
 80028c2:	bd80      	pop	{r7, pc}
 80028c4:	20005090 	.word	0x20005090

080028c8 <er_oled_begin>:

void er_oled_begin()
{
 80028c8:	b580      	push	{r7, lr}
 80028ca:	af00      	add	r7, sp, #0
    command(0xae);//--turn off oled panel
 80028cc:	2100      	movs	r1, #0
 80028ce:	20ae      	movs	r0, #174	; 0xae
 80028d0:	f7ff ffdc 	bl	800288c <I2C_Write_Byte>

    command(0xd5);//--set display clock divide ratio/oscillator frequency
 80028d4:	2100      	movs	r1, #0
 80028d6:	20d5      	movs	r0, #213	; 0xd5
 80028d8:	f7ff ffd8 	bl	800288c <I2C_Write_Byte>
    command(0x80);//--set divide ratio
 80028dc:	2100      	movs	r1, #0
 80028de:	2080      	movs	r0, #128	; 0x80
 80028e0:	f7ff ffd4 	bl	800288c <I2C_Write_Byte>

    command(0xa8);//--set multiplex ratio
 80028e4:	2100      	movs	r1, #0
 80028e6:	20a8      	movs	r0, #168	; 0xa8
 80028e8:	f7ff ffd0 	bl	800288c <I2C_Write_Byte>
    command(0x27);//--1/40 duty
 80028ec:	2100      	movs	r1, #0
 80028ee:	2027      	movs	r0, #39	; 0x27
 80028f0:	f7ff ffcc 	bl	800288c <I2C_Write_Byte>

    command(0xd3);//-set display offset
 80028f4:	2100      	movs	r1, #0
 80028f6:	20d3      	movs	r0, #211	; 0xd3
 80028f8:	f7ff ffc8 	bl	800288c <I2C_Write_Byte>
    command(0x00);//-not offset
 80028fc:	2100      	movs	r1, #0
 80028fe:	2000      	movs	r0, #0
 8002900:	f7ff ffc4 	bl	800288c <I2C_Write_Byte>

    command(0xad);//--Internal IREF Setting
 8002904:	2100      	movs	r1, #0
 8002906:	20ad      	movs	r0, #173	; 0xad
 8002908:	f7ff ffc0 	bl	800288c <I2C_Write_Byte>
    command(0x30);//--
 800290c:	2100      	movs	r1, #0
 800290e:	2030      	movs	r0, #48	; 0x30
 8002910:	f7ff ffbc 	bl	800288c <I2C_Write_Byte>

    command(0x8d);//--set Charge Pump enable/disable
 8002914:	2100      	movs	r1, #0
 8002916:	208d      	movs	r0, #141	; 0x8d
 8002918:	f7ff ffb8 	bl	800288c <I2C_Write_Byte>
    command(0x14);//--set(0x10) disable
 800291c:	2100      	movs	r1, #0
 800291e:	2014      	movs	r0, #20
 8002920:	f7ff ffb4 	bl	800288c <I2C_Write_Byte>

    command(0x40);//--set start line address
 8002924:	2100      	movs	r1, #0
 8002926:	2040      	movs	r0, #64	; 0x40
 8002928:	f7ff ffb0 	bl	800288c <I2C_Write_Byte>

    command(0xa6);//--set normal display
 800292c:	2100      	movs	r1, #0
 800292e:	20a6      	movs	r0, #166	; 0xa6
 8002930:	f7ff ffac 	bl	800288c <I2C_Write_Byte>

    command(0xa4);//Disable Entire Display On
 8002934:	2100      	movs	r1, #0
 8002936:	20a4      	movs	r0, #164	; 0xa4
 8002938:	f7ff ffa8 	bl	800288c <I2C_Write_Byte>

    command(0xa1);//--set segment re-map 128 to 0
 800293c:	2100      	movs	r1, #0
 800293e:	20a1      	movs	r0, #161	; 0xa1
 8002940:	f7ff ffa4 	bl	800288c <I2C_Write_Byte>

    command(0xC8);//--Set COM Output Scan Direction 64 to 0
 8002944:	2100      	movs	r1, #0
 8002946:	20c8      	movs	r0, #200	; 0xc8
 8002948:	f7ff ffa0 	bl	800288c <I2C_Write_Byte>

    command(0xda);//--set com pins hardware configuration
 800294c:	2100      	movs	r1, #0
 800294e:	20da      	movs	r0, #218	; 0xda
 8002950:	f7ff ff9c 	bl	800288c <I2C_Write_Byte>
    command(0x12);
 8002954:	2100      	movs	r1, #0
 8002956:	2012      	movs	r0, #18
 8002958:	f7ff ff98 	bl	800288c <I2C_Write_Byte>

    command(0x81);//--set contrast control register
 800295c:	2100      	movs	r1, #0
 800295e:	2081      	movs	r0, #129	; 0x81
 8002960:	f7ff ff94 	bl	800288c <I2C_Write_Byte>
    command(0xaf);
 8002964:	2100      	movs	r1, #0
 8002966:	20af      	movs	r0, #175	; 0xaf
 8002968:	f7ff ff90 	bl	800288c <I2C_Write_Byte>

    command(0xd9);//--set pre-charge period
 800296c:	2100      	movs	r1, #0
 800296e:	20d9      	movs	r0, #217	; 0xd9
 8002970:	f7ff ff8c 	bl	800288c <I2C_Write_Byte>
    command(0x22);
 8002974:	2100      	movs	r1, #0
 8002976:	2022      	movs	r0, #34	; 0x22
 8002978:	f7ff ff88 	bl	800288c <I2C_Write_Byte>

    command(0xdb);//--set vcomh
 800297c:	2100      	movs	r1, #0
 800297e:	20db      	movs	r0, #219	; 0xdb
 8002980:	f7ff ff84 	bl	800288c <I2C_Write_Byte>
    command(0x20);
 8002984:	2100      	movs	r1, #0
 8002986:	2020      	movs	r0, #32
 8002988:	f7ff ff80 	bl	800288c <I2C_Write_Byte>

    command(0xaf);//--turn on oled panel
 800298c:	2100      	movs	r1, #0
 800298e:	20af      	movs	r0, #175	; 0xaf
 8002990:	f7ff ff7c 	bl	800288c <I2C_Write_Byte>

}
 8002994:	bf00      	nop
 8002996:	bd80      	pop	{r7, pc}

08002998 <er_oled_clear>:

void er_oled_clear(uint8_t* buffer)
{
 8002998:	b480      	push	{r7}
 800299a:	b085      	sub	sp, #20
 800299c:	af00      	add	r7, sp, #0
 800299e:	6078      	str	r0, [r7, #4]
	int i;
	for(i = 0;i < WIDTH * HEIGHT / 8;i++)
 80029a0:	2300      	movs	r3, #0
 80029a2:	60fb      	str	r3, [r7, #12]
 80029a4:	e007      	b.n	80029b6 <er_oled_clear+0x1e>
	{
		buffer[i] = 0;
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	687a      	ldr	r2, [r7, #4]
 80029aa:	4413      	add	r3, r2
 80029ac:	2200      	movs	r2, #0
 80029ae:	701a      	strb	r2, [r3, #0]
	for(i = 0;i < WIDTH * HEIGHT / 8;i++)
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	3301      	adds	r3, #1
 80029b4:	60fb      	str	r3, [r7, #12]
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	f5b3 7fb4 	cmp.w	r3, #360	; 0x168
 80029bc:	dbf3      	blt.n	80029a6 <er_oled_clear+0xe>
	}
}
 80029be:	bf00      	nop
 80029c0:	3714      	adds	r7, #20
 80029c2:	46bd      	mov	sp, r7
 80029c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c8:	4770      	bx	lr

080029ca <er_oled_pixel>:

void er_oled_pixel(int x, int y, char color, uint8_t* buffer)
{
 80029ca:	b480      	push	{r7}
 80029cc:	b085      	sub	sp, #20
 80029ce:	af00      	add	r7, sp, #0
 80029d0:	60f8      	str	r0, [r7, #12]
 80029d2:	60b9      	str	r1, [r7, #8]
 80029d4:	603b      	str	r3, [r7, #0]
 80029d6:	4613      	mov	r3, r2
 80029d8:	71fb      	strb	r3, [r7, #7]
    if(x > WIDTH || y > HEIGHT)return ;
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	2b48      	cmp	r3, #72	; 0x48
 80029de:	dc61      	bgt.n	8002aa4 <er_oled_pixel+0xda>
 80029e0:	68bb      	ldr	r3, [r7, #8]
 80029e2:	2b28      	cmp	r3, #40	; 0x28
 80029e4:	dc5e      	bgt.n	8002aa4 <er_oled_pixel+0xda>
    if(color)
 80029e6:	79fb      	ldrb	r3, [r7, #7]
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d02c      	beq.n	8002a46 <er_oled_pixel+0x7c>
        buffer[x+(y/8)*WIDTH] |= 1<<(y%8);
 80029ec:	68bb      	ldr	r3, [r7, #8]
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	da00      	bge.n	80029f4 <er_oled_pixel+0x2a>
 80029f2:	3307      	adds	r3, #7
 80029f4:	10db      	asrs	r3, r3, #3
 80029f6:	461a      	mov	r2, r3
 80029f8:	4613      	mov	r3, r2
 80029fa:	00db      	lsls	r3, r3, #3
 80029fc:	4413      	add	r3, r2
 80029fe:	00db      	lsls	r3, r3, #3
 8002a00:	4619      	mov	r1, r3
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	440b      	add	r3, r1
 8002a06:	4619      	mov	r1, r3
 8002a08:	683b      	ldr	r3, [r7, #0]
 8002a0a:	440b      	add	r3, r1
 8002a0c:	781b      	ldrb	r3, [r3, #0]
 8002a0e:	b259      	sxtb	r1, r3
 8002a10:	68bb      	ldr	r3, [r7, #8]
 8002a12:	4258      	negs	r0, r3
 8002a14:	f003 0307 	and.w	r3, r3, #7
 8002a18:	f000 0007 	and.w	r0, r0, #7
 8002a1c:	bf58      	it	pl
 8002a1e:	4243      	negpl	r3, r0
 8002a20:	2001      	movs	r0, #1
 8002a22:	fa00 f303 	lsl.w	r3, r0, r3
 8002a26:	b25b      	sxtb	r3, r3
 8002a28:	430b      	orrs	r3, r1
 8002a2a:	b259      	sxtb	r1, r3
 8002a2c:	4613      	mov	r3, r2
 8002a2e:	00db      	lsls	r3, r3, #3
 8002a30:	4413      	add	r3, r2
 8002a32:	00db      	lsls	r3, r3, #3
 8002a34:	461a      	mov	r2, r3
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	4413      	add	r3, r2
 8002a3a:	461a      	mov	r2, r3
 8002a3c:	683b      	ldr	r3, [r7, #0]
 8002a3e:	4413      	add	r3, r2
 8002a40:	b2ca      	uxtb	r2, r1
 8002a42:	701a      	strb	r2, [r3, #0]
 8002a44:	e02f      	b.n	8002aa6 <er_oled_pixel+0xdc>
    else
        buffer[x+(y/8)*WIDTH] &= ~(1<<(y%8));
 8002a46:	68bb      	ldr	r3, [r7, #8]
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	da00      	bge.n	8002a4e <er_oled_pixel+0x84>
 8002a4c:	3307      	adds	r3, #7
 8002a4e:	10db      	asrs	r3, r3, #3
 8002a50:	461a      	mov	r2, r3
 8002a52:	4613      	mov	r3, r2
 8002a54:	00db      	lsls	r3, r3, #3
 8002a56:	4413      	add	r3, r2
 8002a58:	00db      	lsls	r3, r3, #3
 8002a5a:	4619      	mov	r1, r3
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	440b      	add	r3, r1
 8002a60:	4619      	mov	r1, r3
 8002a62:	683b      	ldr	r3, [r7, #0]
 8002a64:	440b      	add	r3, r1
 8002a66:	781b      	ldrb	r3, [r3, #0]
 8002a68:	b259      	sxtb	r1, r3
 8002a6a:	68bb      	ldr	r3, [r7, #8]
 8002a6c:	4258      	negs	r0, r3
 8002a6e:	f003 0307 	and.w	r3, r3, #7
 8002a72:	f000 0007 	and.w	r0, r0, #7
 8002a76:	bf58      	it	pl
 8002a78:	4243      	negpl	r3, r0
 8002a7a:	2001      	movs	r0, #1
 8002a7c:	fa00 f303 	lsl.w	r3, r0, r3
 8002a80:	b25b      	sxtb	r3, r3
 8002a82:	43db      	mvns	r3, r3
 8002a84:	b25b      	sxtb	r3, r3
 8002a86:	400b      	ands	r3, r1
 8002a88:	b259      	sxtb	r1, r3
 8002a8a:	4613      	mov	r3, r2
 8002a8c:	00db      	lsls	r3, r3, #3
 8002a8e:	4413      	add	r3, r2
 8002a90:	00db      	lsls	r3, r3, #3
 8002a92:	461a      	mov	r2, r3
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	4413      	add	r3, r2
 8002a98:	461a      	mov	r2, r3
 8002a9a:	683b      	ldr	r3, [r7, #0]
 8002a9c:	4413      	add	r3, r2
 8002a9e:	b2ca      	uxtb	r2, r1
 8002aa0:	701a      	strb	r2, [r3, #0]
 8002aa2:	e000      	b.n	8002aa6 <er_oled_pixel+0xdc>
    if(x > WIDTH || y > HEIGHT)return ;
 8002aa4:	bf00      	nop
}
 8002aa6:	3714      	adds	r7, #20
 8002aa8:	46bd      	mov	sp, r7
 8002aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aae:	4770      	bx	lr

08002ab0 <er_oled_char>:
		}
	}
}

void er_oled_char(unsigned char x, unsigned char y, char acsii, char size, char mode, uint8_t* buffer)
{
 8002ab0:	b590      	push	{r4, r7, lr}
 8002ab2:	b087      	sub	sp, #28
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	4604      	mov	r4, r0
 8002ab8:	4608      	mov	r0, r1
 8002aba:	4611      	mov	r1, r2
 8002abc:	461a      	mov	r2, r3
 8002abe:	4623      	mov	r3, r4
 8002ac0:	71fb      	strb	r3, [r7, #7]
 8002ac2:	4603      	mov	r3, r0
 8002ac4:	71bb      	strb	r3, [r7, #6]
 8002ac6:	460b      	mov	r3, r1
 8002ac8:	717b      	strb	r3, [r7, #5]
 8002aca:	4613      	mov	r3, r2
 8002acc:	713b      	strb	r3, [r7, #4]
    unsigned char i, j, y0=y;
 8002ace:	79bb      	ldrb	r3, [r7, #6]
 8002ad0:	743b      	strb	r3, [r7, #16]
    uint16_t temp;
    uint16_t position = 0x80;
 8002ad2:	2380      	movs	r3, #128	; 0x80
 8002ad4:	827b      	strh	r3, [r7, #18]
    uint8_t maxindex = 8;
 8002ad6:	2308      	movs	r3, #8
 8002ad8:	747b      	strb	r3, [r7, #17]
    unsigned char ch = acsii - ' ';
 8002ada:	797b      	ldrb	r3, [r7, #5]
 8002adc:	3b20      	subs	r3, #32
 8002ade:	73fb      	strb	r3, [r7, #15]

    if (size == 32){
 8002ae0:	793b      	ldrb	r3, [r7, #4]
 8002ae2:	2b20      	cmp	r3, #32
 8002ae4:	d104      	bne.n	8002af0 <er_oled_char+0x40>
    	position = 0x8000;
 8002ae6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002aea:	827b      	strh	r3, [r7, #18]
    	maxindex =16;
 8002aec:	2310      	movs	r3, #16
 8002aee:	747b      	strb	r3, [r7, #17]
    }

    for(i = 0;i<size;i++) {
 8002af0:	2300      	movs	r3, #0
 8002af2:	75fb      	strb	r3, [r7, #23]
 8002af4:	e0b1      	b.n	8002c5a <er_oled_char+0x1aa>
        if(size == 12)
 8002af6:	793b      	ldrb	r3, [r7, #4]
 8002af8:	2b0c      	cmp	r3, #12
 8002afa:	d11d      	bne.n	8002b38 <er_oled_char+0x88>
        {
            if(mode)temp = Font1206[ch][i];
 8002afc:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d00b      	beq.n	8002b1c <er_oled_char+0x6c>
 8002b04:	7bfa      	ldrb	r2, [r7, #15]
 8002b06:	7df9      	ldrb	r1, [r7, #23]
 8002b08:	4858      	ldr	r0, [pc, #352]	; (8002c6c <er_oled_char+0x1bc>)
 8002b0a:	4613      	mov	r3, r2
 8002b0c:	005b      	lsls	r3, r3, #1
 8002b0e:	4413      	add	r3, r2
 8002b10:	009b      	lsls	r3, r3, #2
 8002b12:	4403      	add	r3, r0
 8002b14:	440b      	add	r3, r1
 8002b16:	781b      	ldrb	r3, [r3, #0]
 8002b18:	82bb      	strh	r3, [r7, #20]
 8002b1a:	e06c      	b.n	8002bf6 <er_oled_char+0x146>
            else temp = ~Font1206[ch][i];
 8002b1c:	7bfa      	ldrb	r2, [r7, #15]
 8002b1e:	7df9      	ldrb	r1, [r7, #23]
 8002b20:	4852      	ldr	r0, [pc, #328]	; (8002c6c <er_oled_char+0x1bc>)
 8002b22:	4613      	mov	r3, r2
 8002b24:	005b      	lsls	r3, r3, #1
 8002b26:	4413      	add	r3, r2
 8002b28:	009b      	lsls	r3, r3, #2
 8002b2a:	4403      	add	r3, r0
 8002b2c:	440b      	add	r3, r1
 8002b2e:	781b      	ldrb	r3, [r3, #0]
 8002b30:	b29b      	uxth	r3, r3
 8002b32:	43db      	mvns	r3, r3
 8002b34:	82bb      	strh	r3, [r7, #20]
 8002b36:	e05e      	b.n	8002bf6 <er_oled_char+0x146>
        }
        else if(size == 16)
 8002b38:	793b      	ldrb	r3, [r7, #4]
 8002b3a:	2b10      	cmp	r3, #16
 8002b3c:	d117      	bne.n	8002b6e <er_oled_char+0xbe>
        {
            if(mode)temp = Font1608[ch][i];
 8002b3e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d008      	beq.n	8002b58 <er_oled_char+0xa8>
 8002b46:	7bfa      	ldrb	r2, [r7, #15]
 8002b48:	7dfb      	ldrb	r3, [r7, #23]
 8002b4a:	4949      	ldr	r1, [pc, #292]	; (8002c70 <er_oled_char+0x1c0>)
 8002b4c:	0112      	lsls	r2, r2, #4
 8002b4e:	440a      	add	r2, r1
 8002b50:	4413      	add	r3, r2
 8002b52:	781b      	ldrb	r3, [r3, #0]
 8002b54:	82bb      	strh	r3, [r7, #20]
 8002b56:	e04e      	b.n	8002bf6 <er_oled_char+0x146>
            else temp = ~Font1608[ch][i];
 8002b58:	7bfa      	ldrb	r2, [r7, #15]
 8002b5a:	7dfb      	ldrb	r3, [r7, #23]
 8002b5c:	4944      	ldr	r1, [pc, #272]	; (8002c70 <er_oled_char+0x1c0>)
 8002b5e:	0112      	lsls	r2, r2, #4
 8002b60:	440a      	add	r2, r1
 8002b62:	4413      	add	r3, r2
 8002b64:	781b      	ldrb	r3, [r3, #0]
 8002b66:	b29b      	uxth	r3, r3
 8002b68:	43db      	mvns	r3, r3
 8002b6a:	82bb      	strh	r3, [r7, #20]
 8002b6c:	e043      	b.n	8002bf6 <er_oled_char+0x146>
        }
        else {
            if(mode) {
 8002b6e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d01c      	beq.n	8002bb0 <er_oled_char+0x100>
            	temp = Font3216[ch - 16][2*i] << 8;
 8002b76:	7bfb      	ldrb	r3, [r7, #15]
 8002b78:	f1a3 0210 	sub.w	r2, r3, #16
 8002b7c:	7dfb      	ldrb	r3, [r7, #23]
 8002b7e:	005b      	lsls	r3, r3, #1
 8002b80:	493c      	ldr	r1, [pc, #240]	; (8002c74 <er_oled_char+0x1c4>)
 8002b82:	0192      	lsls	r2, r2, #6
 8002b84:	440a      	add	r2, r1
 8002b86:	4413      	add	r3, r2
 8002b88:	781b      	ldrb	r3, [r3, #0]
 8002b8a:	b29b      	uxth	r3, r3
 8002b8c:	021b      	lsls	r3, r3, #8
 8002b8e:	82bb      	strh	r3, [r7, #20]
                temp |= Font3216[ch-16][2*i + 1];
 8002b90:	7bfb      	ldrb	r3, [r7, #15]
 8002b92:	f1a3 0210 	sub.w	r2, r3, #16
 8002b96:	7dfb      	ldrb	r3, [r7, #23]
 8002b98:	005b      	lsls	r3, r3, #1
 8002b9a:	3301      	adds	r3, #1
 8002b9c:	4935      	ldr	r1, [pc, #212]	; (8002c74 <er_oled_char+0x1c4>)
 8002b9e:	0192      	lsls	r2, r2, #6
 8002ba0:	440a      	add	r2, r1
 8002ba2:	4413      	add	r3, r2
 8002ba4:	781b      	ldrb	r3, [r3, #0]
 8002ba6:	b29a      	uxth	r2, r3
 8002ba8:	8abb      	ldrh	r3, [r7, #20]
 8002baa:	4313      	orrs	r3, r2
 8002bac:	82bb      	strh	r3, [r7, #20]
 8002bae:	e022      	b.n	8002bf6 <er_oled_char+0x146>
            }
            else {
            	temp = ~Font3216[ch - 16][2*i] << 8;
 8002bb0:	7bfb      	ldrb	r3, [r7, #15]
 8002bb2:	f1a3 0210 	sub.w	r2, r3, #16
 8002bb6:	7dfb      	ldrb	r3, [r7, #23]
 8002bb8:	005b      	lsls	r3, r3, #1
 8002bba:	492e      	ldr	r1, [pc, #184]	; (8002c74 <er_oled_char+0x1c4>)
 8002bbc:	0192      	lsls	r2, r2, #6
 8002bbe:	440a      	add	r2, r1
 8002bc0:	4413      	add	r3, r2
 8002bc2:	781b      	ldrb	r3, [r3, #0]
 8002bc4:	b29b      	uxth	r3, r3
 8002bc6:	43db      	mvns	r3, r3
 8002bc8:	b29b      	uxth	r3, r3
 8002bca:	021b      	lsls	r3, r3, #8
 8002bcc:	82bb      	strh	r3, [r7, #20]
            	temp |= ~Font3216[ch - 16][2*i + 1];
 8002bce:	7bfb      	ldrb	r3, [r7, #15]
 8002bd0:	f1a3 0210 	sub.w	r2, r3, #16
 8002bd4:	7dfb      	ldrb	r3, [r7, #23]
 8002bd6:	005b      	lsls	r3, r3, #1
 8002bd8:	3301      	adds	r3, #1
 8002bda:	4926      	ldr	r1, [pc, #152]	; (8002c74 <er_oled_char+0x1c4>)
 8002bdc:	0192      	lsls	r2, r2, #6
 8002bde:	440a      	add	r2, r1
 8002be0:	4413      	add	r3, r2
 8002be2:	781b      	ldrb	r3, [r3, #0]
 8002be4:	b29b      	uxth	r3, r3
 8002be6:	43db      	mvns	r3, r3
 8002be8:	b29b      	uxth	r3, r3
 8002bea:	b21a      	sxth	r2, r3
 8002bec:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8002bf0:	4313      	orrs	r3, r2
 8002bf2:	b21b      	sxth	r3, r3
 8002bf4:	82bb      	strh	r3, [r7, #20]
            }
        }
        for(j =0;j<maxindex;j++)
 8002bf6:	2300      	movs	r3, #0
 8002bf8:	75bb      	strb	r3, [r7, #22]
 8002bfa:	e027      	b.n	8002c4c <er_oled_char+0x19c>
        {
            if(temp & position) er_oled_pixel(x, y, 1, buffer);
 8002bfc:	8aba      	ldrh	r2, [r7, #20]
 8002bfe:	8a7b      	ldrh	r3, [r7, #18]
 8002c00:	4013      	ands	r3, r2
 8002c02:	b29b      	uxth	r3, r3
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d006      	beq.n	8002c16 <er_oled_char+0x166>
 8002c08:	79f8      	ldrb	r0, [r7, #7]
 8002c0a:	79b9      	ldrb	r1, [r7, #6]
 8002c0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c0e:	2201      	movs	r2, #1
 8002c10:	f7ff fedb 	bl	80029ca <er_oled_pixel>
 8002c14:	e005      	b.n	8002c22 <er_oled_char+0x172>
            else er_oled_pixel(x, y, 0, buffer);
 8002c16:	79f8      	ldrb	r0, [r7, #7]
 8002c18:	79b9      	ldrb	r1, [r7, #6]
 8002c1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c1c:	2200      	movs	r2, #0
 8002c1e:	f7ff fed4 	bl	80029ca <er_oled_pixel>
            temp <<= 1;
 8002c22:	8abb      	ldrh	r3, [r7, #20]
 8002c24:	005b      	lsls	r3, r3, #1
 8002c26:	82bb      	strh	r3, [r7, #20]
            y++;
 8002c28:	79bb      	ldrb	r3, [r7, #6]
 8002c2a:	3301      	adds	r3, #1
 8002c2c:	71bb      	strb	r3, [r7, #6]
            if((y-y0) == size)
 8002c2e:	79ba      	ldrb	r2, [r7, #6]
 8002c30:	7c3b      	ldrb	r3, [r7, #16]
 8002c32:	1ad2      	subs	r2, r2, r3
 8002c34:	793b      	ldrb	r3, [r7, #4]
 8002c36:	429a      	cmp	r2, r3
 8002c38:	d105      	bne.n	8002c46 <er_oled_char+0x196>
            {
                y = y0;
 8002c3a:	7c3b      	ldrb	r3, [r7, #16]
 8002c3c:	71bb      	strb	r3, [r7, #6]
                x++;
 8002c3e:	79fb      	ldrb	r3, [r7, #7]
 8002c40:	3301      	adds	r3, #1
 8002c42:	71fb      	strb	r3, [r7, #7]
                break;
 8002c44:	e006      	b.n	8002c54 <er_oled_char+0x1a4>
        for(j =0;j<maxindex;j++)
 8002c46:	7dbb      	ldrb	r3, [r7, #22]
 8002c48:	3301      	adds	r3, #1
 8002c4a:	75bb      	strb	r3, [r7, #22]
 8002c4c:	7dba      	ldrb	r2, [r7, #22]
 8002c4e:	7c7b      	ldrb	r3, [r7, #17]
 8002c50:	429a      	cmp	r2, r3
 8002c52:	d3d3      	bcc.n	8002bfc <er_oled_char+0x14c>
    for(i = 0;i<size;i++) {
 8002c54:	7dfb      	ldrb	r3, [r7, #23]
 8002c56:	3301      	adds	r3, #1
 8002c58:	75fb      	strb	r3, [r7, #23]
 8002c5a:	7dfa      	ldrb	r2, [r7, #23]
 8002c5c:	793b      	ldrb	r3, [r7, #4]
 8002c5e:	429a      	cmp	r2, r3
 8002c60:	f4ff af49 	bcc.w	8002af6 <er_oled_char+0x46>
            }
        }
    }
}
 8002c64:	bf00      	nop
 8002c66:	371c      	adds	r7, #28
 8002c68:	46bd      	mov	sp, r7
 8002c6a:	bd90      	pop	{r4, r7, pc}
 8002c6c:	080165dc 	.word	0x080165dc
 8002c70:	08016a50 	.word	0x08016a50
 8002c74:	08017040 	.word	0x08017040

08002c78 <er_oled_string>:

void er_oled_string(uint8_t x, uint8_t y, const char *pString, uint8_t Size, uint8_t Mode, uint8_t* buffer)
{
 8002c78:	b590      	push	{r4, r7, lr}
 8002c7a:	b085      	sub	sp, #20
 8002c7c:	af02      	add	r7, sp, #8
 8002c7e:	603a      	str	r2, [r7, #0]
 8002c80:	461a      	mov	r2, r3
 8002c82:	4603      	mov	r3, r0
 8002c84:	71fb      	strb	r3, [r7, #7]
 8002c86:	460b      	mov	r3, r1
 8002c88:	71bb      	strb	r3, [r7, #6]
 8002c8a:	4613      	mov	r3, r2
 8002c8c:	717b      	strb	r3, [r7, #5]
    while (*pString != '\0') {
 8002c8e:	e02c      	b.n	8002cea <er_oled_string+0x72>
        if (x > (WIDTH - Size / 2)) {
 8002c90:	79fa      	ldrb	r2, [r7, #7]
 8002c92:	797b      	ldrb	r3, [r7, #5]
 8002c94:	085b      	lsrs	r3, r3, #1
 8002c96:	b2db      	uxtb	r3, r3
 8002c98:	f1c3 0348 	rsb	r3, r3, #72	; 0x48
 8002c9c:	429a      	cmp	r2, r3
 8002c9e:	dd0f      	ble.n	8002cc0 <er_oled_string+0x48>
            x = 0;
 8002ca0:	2300      	movs	r3, #0
 8002ca2:	71fb      	strb	r3, [r7, #7]
            y += Size;
 8002ca4:	79ba      	ldrb	r2, [r7, #6]
 8002ca6:	797b      	ldrb	r3, [r7, #5]
 8002ca8:	4413      	add	r3, r2
 8002caa:	71bb      	strb	r3, [r7, #6]
            if (y > (HEIGHT - Size)) {
 8002cac:	79ba      	ldrb	r2, [r7, #6]
 8002cae:	797b      	ldrb	r3, [r7, #5]
 8002cb0:	f1c3 0328 	rsb	r3, r3, #40	; 0x28
 8002cb4:	429a      	cmp	r2, r3
 8002cb6:	dd03      	ble.n	8002cc0 <er_oled_string+0x48>
                y = x = 0;
 8002cb8:	2300      	movs	r3, #0
 8002cba:	71fb      	strb	r3, [r7, #7]
 8002cbc:	79fb      	ldrb	r3, [r7, #7]
 8002cbe:	71bb      	strb	r3, [r7, #6]
            }
        }

        er_oled_char(x, y, *pString, Size, Mode, buffer);
 8002cc0:	683b      	ldr	r3, [r7, #0]
 8002cc2:	781a      	ldrb	r2, [r3, #0]
 8002cc4:	797c      	ldrb	r4, [r7, #5]
 8002cc6:	79b9      	ldrb	r1, [r7, #6]
 8002cc8:	79f8      	ldrb	r0, [r7, #7]
 8002cca:	69fb      	ldr	r3, [r7, #28]
 8002ccc:	9301      	str	r3, [sp, #4]
 8002cce:	7e3b      	ldrb	r3, [r7, #24]
 8002cd0:	9300      	str	r3, [sp, #0]
 8002cd2:	4623      	mov	r3, r4
 8002cd4:	f7ff feec 	bl	8002ab0 <er_oled_char>
        x += Size / 2;
 8002cd8:	797b      	ldrb	r3, [r7, #5]
 8002cda:	085b      	lsrs	r3, r3, #1
 8002cdc:	b2da      	uxtb	r2, r3
 8002cde:	79fb      	ldrb	r3, [r7, #7]
 8002ce0:	4413      	add	r3, r2
 8002ce2:	71fb      	strb	r3, [r7, #7]
        pString++;
 8002ce4:	683b      	ldr	r3, [r7, #0]
 8002ce6:	3301      	adds	r3, #1
 8002ce8:	603b      	str	r3, [r7, #0]
    while (*pString != '\0') {
 8002cea:	683b      	ldr	r3, [r7, #0]
 8002cec:	781b      	ldrb	r3, [r3, #0]
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d1ce      	bne.n	8002c90 <er_oled_string+0x18>
    }
}
 8002cf2:	bf00      	nop
 8002cf4:	370c      	adds	r7, #12
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	bd90      	pop	{r4, r7, pc}

08002cfa <er_oled_bitmap>:
        }
    }
}

void er_oled_bitmap(uint8_t x,uint8_t y,const uint8_t *pBmp, uint8_t chWidth, uint8_t chHeight, uint8_t* buffer)
{
 8002cfa:	b580      	push	{r7, lr}
 8002cfc:	b084      	sub	sp, #16
 8002cfe:	af00      	add	r7, sp, #0
 8002d00:	603a      	str	r2, [r7, #0]
 8002d02:	461a      	mov	r2, r3
 8002d04:	4603      	mov	r3, r0
 8002d06:	71fb      	strb	r3, [r7, #7]
 8002d08:	460b      	mov	r3, r1
 8002d0a:	71bb      	strb	r3, [r7, #6]
 8002d0c:	4613      	mov	r3, r2
 8002d0e:	717b      	strb	r3, [r7, #5]
	uint8_t i, j, byteWidth = (chWidth + 7)/8;
 8002d10:	797b      	ldrb	r3, [r7, #5]
 8002d12:	3307      	adds	r3, #7
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	da00      	bge.n	8002d1a <er_oled_bitmap+0x20>
 8002d18:	3307      	adds	r3, #7
 8002d1a:	10db      	asrs	r3, r3, #3
 8002d1c:	737b      	strb	r3, [r7, #13]
	for(j = 0;j < chHeight;j++){
 8002d1e:	2300      	movs	r3, #0
 8002d20:	73bb      	strb	r3, [r7, #14]
 8002d22:	e02c      	b.n	8002d7e <er_oled_bitmap+0x84>
		for(i = 0;i <chWidth;i++){
 8002d24:	2300      	movs	r3, #0
 8002d26:	73fb      	strb	r3, [r7, #15]
 8002d28:	e022      	b.n	8002d70 <er_oled_bitmap+0x76>
			if((pBmp[j * byteWidth + i / 8]) & (128 >> (i & 7))){
 8002d2a:	7bbb      	ldrb	r3, [r7, #14]
 8002d2c:	7b7a      	ldrb	r2, [r7, #13]
 8002d2e:	fb02 f303 	mul.w	r3, r2, r3
 8002d32:	7bfa      	ldrb	r2, [r7, #15]
 8002d34:	08d2      	lsrs	r2, r2, #3
 8002d36:	b2d2      	uxtb	r2, r2
 8002d38:	4413      	add	r3, r2
 8002d3a:	461a      	mov	r2, r3
 8002d3c:	683b      	ldr	r3, [r7, #0]
 8002d3e:	4413      	add	r3, r2
 8002d40:	781b      	ldrb	r3, [r3, #0]
 8002d42:	4619      	mov	r1, r3
 8002d44:	7bfb      	ldrb	r3, [r7, #15]
 8002d46:	f003 0307 	and.w	r3, r3, #7
 8002d4a:	2280      	movs	r2, #128	; 0x80
 8002d4c:	fa42 f303 	asr.w	r3, r2, r3
 8002d50:	400b      	ands	r3, r1
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d009      	beq.n	8002d6a <er_oled_bitmap+0x70>
				er_oled_pixel(x + i,y + j, 1, buffer);
 8002d56:	79fa      	ldrb	r2, [r7, #7]
 8002d58:	7bfb      	ldrb	r3, [r7, #15]
 8002d5a:	18d0      	adds	r0, r2, r3
 8002d5c:	79ba      	ldrb	r2, [r7, #6]
 8002d5e:	7bbb      	ldrb	r3, [r7, #14]
 8002d60:	18d1      	adds	r1, r2, r3
 8002d62:	69fb      	ldr	r3, [r7, #28]
 8002d64:	2201      	movs	r2, #1
 8002d66:	f7ff fe30 	bl	80029ca <er_oled_pixel>
		for(i = 0;i <chWidth;i++){
 8002d6a:	7bfb      	ldrb	r3, [r7, #15]
 8002d6c:	3301      	adds	r3, #1
 8002d6e:	73fb      	strb	r3, [r7, #15]
 8002d70:	7bfa      	ldrb	r2, [r7, #15]
 8002d72:	797b      	ldrb	r3, [r7, #5]
 8002d74:	429a      	cmp	r2, r3
 8002d76:	d3d8      	bcc.n	8002d2a <er_oled_bitmap+0x30>
	for(j = 0;j < chHeight;j++){
 8002d78:	7bbb      	ldrb	r3, [r7, #14]
 8002d7a:	3301      	adds	r3, #1
 8002d7c:	73bb      	strb	r3, [r7, #14]
 8002d7e:	7bba      	ldrb	r2, [r7, #14]
 8002d80:	7e3b      	ldrb	r3, [r7, #24]
 8002d82:	429a      	cmp	r2, r3
 8002d84:	d3ce      	bcc.n	8002d24 <er_oled_bitmap+0x2a>
			}
		}
	}
}
 8002d86:	bf00      	nop
 8002d88:	3710      	adds	r7, #16
 8002d8a:	46bd      	mov	sp, r7
 8002d8c:	bd80      	pop	{r7, pc}

08002d8e <er_oled_display>:

void er_oled_display(uint8_t* pBuf)
{    uint8_t page,i;
 8002d8e:	b580      	push	{r7, lr}
 8002d90:	b084      	sub	sp, #16
 8002d92:	af00      	add	r7, sp, #0
 8002d94:	6078      	str	r0, [r7, #4]
    for (page = 0; page < PAGES; page++) {
 8002d96:	2300      	movs	r3, #0
 8002d98:	73fb      	strb	r3, [r7, #15]
 8002d9a:	e029      	b.n	8002df0 <er_oled_display+0x62>
        command(0xB0 + page);/* set page address */
 8002d9c:	7bfb      	ldrb	r3, [r7, #15]
 8002d9e:	3b50      	subs	r3, #80	; 0x50
 8002da0:	b2db      	uxtb	r3, r3
 8002da2:	2100      	movs	r1, #0
 8002da4:	4618      	mov	r0, r3
 8002da6:	f7ff fd71 	bl	800288c <I2C_Write_Byte>
        command(0x0c);   /* set low column address */
 8002daa:	2100      	movs	r1, #0
 8002dac:	200c      	movs	r0, #12
 8002dae:	f7ff fd6d 	bl	800288c <I2C_Write_Byte>
        command(0x11);  /* set high column address */
 8002db2:	2100      	movs	r1, #0
 8002db4:	2011      	movs	r0, #17
 8002db6:	f7ff fd69 	bl	800288c <I2C_Write_Byte>
        for(i = 0; i< WIDTH; i++ ) {
 8002dba:	2300      	movs	r3, #0
 8002dbc:	73bb      	strb	r3, [r7, #14]
 8002dbe:	e011      	b.n	8002de4 <er_oled_display+0x56>
          data(pBuf[i+page*WIDTH]);// write data one
 8002dc0:	7bb9      	ldrb	r1, [r7, #14]
 8002dc2:	7bfa      	ldrb	r2, [r7, #15]
 8002dc4:	4613      	mov	r3, r2
 8002dc6:	00db      	lsls	r3, r3, #3
 8002dc8:	4413      	add	r3, r2
 8002dca:	00db      	lsls	r3, r3, #3
 8002dcc:	440b      	add	r3, r1
 8002dce:	461a      	mov	r2, r3
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	4413      	add	r3, r2
 8002dd4:	781b      	ldrb	r3, [r3, #0]
 8002dd6:	2140      	movs	r1, #64	; 0x40
 8002dd8:	4618      	mov	r0, r3
 8002dda:	f7ff fd57 	bl	800288c <I2C_Write_Byte>
        for(i = 0; i< WIDTH; i++ ) {
 8002dde:	7bbb      	ldrb	r3, [r7, #14]
 8002de0:	3301      	adds	r3, #1
 8002de2:	73bb      	strb	r3, [r7, #14]
 8002de4:	7bbb      	ldrb	r3, [r7, #14]
 8002de6:	2b47      	cmp	r3, #71	; 0x47
 8002de8:	d9ea      	bls.n	8002dc0 <er_oled_display+0x32>
    for (page = 0; page < PAGES; page++) {
 8002dea:	7bfb      	ldrb	r3, [r7, #15]
 8002dec:	3301      	adds	r3, #1
 8002dee:	73fb      	strb	r3, [r7, #15]
 8002df0:	7bfb      	ldrb	r3, [r7, #15]
 8002df2:	2b04      	cmp	r3, #4
 8002df4:	d9d2      	bls.n	8002d9c <er_oled_display+0xe>
        }
    }
}
 8002df6:	bf00      	nop
 8002df8:	3710      	adds	r7, #16
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	bd80      	pop	{r7, pc}

08002dfe <er_oled_time>:

void er_oled_time(const char *pString)
{
 8002dfe:	b580      	push	{r7, lr}
 8002e00:	b0de      	sub	sp, #376	; 0x178
 8002e02:	af02      	add	r7, sp, #8
 8002e04:	1d3b      	adds	r3, r7, #4
 8002e06:	6018      	str	r0, [r3, #0]
	uint8_t oled_buf[WIDTH * HEIGHT / 8];

	er_oled_clear(oled_buf);
 8002e08:	f107 0308 	add.w	r3, r7, #8
 8002e0c:	4618      	mov	r0, r3
 8002e0e:	f7ff fdc3 	bl	8002998 <er_oled_clear>
    er_oled_char( 0, 4, *pString++,  32, 1, oled_buf);
 8002e12:	1d3b      	adds	r3, r7, #4
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	1d3a      	adds	r2, r7, #4
 8002e18:	1c59      	adds	r1, r3, #1
 8002e1a:	6011      	str	r1, [r2, #0]
 8002e1c:	781a      	ldrb	r2, [r3, #0]
 8002e1e:	f107 0308 	add.w	r3, r7, #8
 8002e22:	9301      	str	r3, [sp, #4]
 8002e24:	2301      	movs	r3, #1
 8002e26:	9300      	str	r3, [sp, #0]
 8002e28:	2320      	movs	r3, #32
 8002e2a:	2104      	movs	r1, #4
 8002e2c:	2000      	movs	r0, #0
 8002e2e:	f7ff fe3f 	bl	8002ab0 <er_oled_char>
    er_oled_char(16, 4, *pString++ , 32, 1, oled_buf);
 8002e32:	1d3b      	adds	r3, r7, #4
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	1d3a      	adds	r2, r7, #4
 8002e38:	1c59      	adds	r1, r3, #1
 8002e3a:	6011      	str	r1, [r2, #0]
 8002e3c:	781a      	ldrb	r2, [r3, #0]
 8002e3e:	f107 0308 	add.w	r3, r7, #8
 8002e42:	9301      	str	r3, [sp, #4]
 8002e44:	2301      	movs	r3, #1
 8002e46:	9300      	str	r3, [sp, #0]
 8002e48:	2320      	movs	r3, #32
 8002e4a:	2104      	movs	r1, #4
 8002e4c:	2010      	movs	r0, #16
 8002e4e:	f7ff fe2f 	bl	8002ab0 <er_oled_char>
    er_oled_char(40, 4, *pString++ , 32, 1, oled_buf);
 8002e52:	1d3b      	adds	r3, r7, #4
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	1d3a      	adds	r2, r7, #4
 8002e58:	1c59      	adds	r1, r3, #1
 8002e5a:	6011      	str	r1, [r2, #0]
 8002e5c:	781a      	ldrb	r2, [r3, #0]
 8002e5e:	f107 0308 	add.w	r3, r7, #8
 8002e62:	9301      	str	r3, [sp, #4]
 8002e64:	2301      	movs	r3, #1
 8002e66:	9300      	str	r3, [sp, #0]
 8002e68:	2320      	movs	r3, #32
 8002e6a:	2104      	movs	r1, #4
 8002e6c:	2028      	movs	r0, #40	; 0x28
 8002e6e:	f7ff fe1f 	bl	8002ab0 <er_oled_char>
    er_oled_char(56, 4, *pString   , 32, 1, oled_buf);
 8002e72:	1d3b      	adds	r3, r7, #4
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	781a      	ldrb	r2, [r3, #0]
 8002e78:	f107 0308 	add.w	r3, r7, #8
 8002e7c:	9301      	str	r3, [sp, #4]
 8002e7e:	2301      	movs	r3, #1
 8002e80:	9300      	str	r3, [sp, #0]
 8002e82:	2320      	movs	r3, #32
 8002e84:	2104      	movs	r1, #4
 8002e86:	2038      	movs	r0, #56	; 0x38
 8002e88:	f7ff fe12 	bl	8002ab0 <er_oled_char>

    er_oled_pixel(36, 12, 1, oled_buf);
 8002e8c:	f107 0308 	add.w	r3, r7, #8
 8002e90:	2201      	movs	r2, #1
 8002e92:	210c      	movs	r1, #12
 8002e94:	2024      	movs	r0, #36	; 0x24
 8002e96:	f7ff fd98 	bl	80029ca <er_oled_pixel>
	er_oled_pixel(36, 13, 1, oled_buf);
 8002e9a:	f107 0308 	add.w	r3, r7, #8
 8002e9e:	2201      	movs	r2, #1
 8002ea0:	210d      	movs	r1, #13
 8002ea2:	2024      	movs	r0, #36	; 0x24
 8002ea4:	f7ff fd91 	bl	80029ca <er_oled_pixel>
	er_oled_pixel(36, 14, 1, oled_buf);
 8002ea8:	f107 0308 	add.w	r3, r7, #8
 8002eac:	2201      	movs	r2, #1
 8002eae:	210e      	movs	r1, #14
 8002eb0:	2024      	movs	r0, #36	; 0x24
 8002eb2:	f7ff fd8a 	bl	80029ca <er_oled_pixel>
	er_oled_pixel(36, 28, 1, oled_buf);
 8002eb6:	f107 0308 	add.w	r3, r7, #8
 8002eba:	2201      	movs	r2, #1
 8002ebc:	211c      	movs	r1, #28
 8002ebe:	2024      	movs	r0, #36	; 0x24
 8002ec0:	f7ff fd83 	bl	80029ca <er_oled_pixel>
	er_oled_pixel(36, 27, 1, oled_buf);
 8002ec4:	f107 0308 	add.w	r3, r7, #8
 8002ec8:	2201      	movs	r2, #1
 8002eca:	211b      	movs	r1, #27
 8002ecc:	2024      	movs	r0, #36	; 0x24
 8002ece:	f7ff fd7c 	bl	80029ca <er_oled_pixel>
	er_oled_pixel(36, 26, 1, oled_buf);
 8002ed2:	f107 0308 	add.w	r3, r7, #8
 8002ed6:	2201      	movs	r2, #1
 8002ed8:	211a      	movs	r1, #26
 8002eda:	2024      	movs	r0, #36	; 0x24
 8002edc:	f7ff fd75 	bl	80029ca <er_oled_pixel>

	er_oled_display(oled_buf);
 8002ee0:	f107 0308 	add.w	r3, r7, #8
 8002ee4:	4618      	mov	r0, r3
 8002ee6:	f7ff ff52 	bl	8002d8e <er_oled_display>
}
 8002eea:	bf00      	nop
 8002eec:	f507 77b8 	add.w	r7, r7, #368	; 0x170
 8002ef0:	46bd      	mov	sp, r7
 8002ef2:	bd80      	pop	{r7, pc}

08002ef4 <er_oled_print_2digit>:

void er_oled_print_2digit(int value){
 8002ef4:	b580      	push	{r7, lr}
 8002ef6:	b0e0      	sub	sp, #384	; 0x180
 8002ef8:	af02      	add	r7, sp, #8
 8002efa:	1d3b      	adds	r3, r7, #4
 8002efc:	6018      	str	r0, [r3, #0]
  uint8_t oled_buf[WIDTH * HEIGHT / 8] = {0};
 8002efe:	f107 030c 	add.w	r3, r7, #12
 8002f02:	4618      	mov	r0, r3
 8002f04:	f44f 73b4 	mov.w	r3, #360	; 0x168
 8002f08:	461a      	mov	r2, r3
 8002f0a:	2100      	movs	r1, #0
 8002f0c:	f010 f869 	bl	8012fe2 <memset>
  char c = (char) ( ((int) '0') + (value % 10));
 8002f10:	1d3b      	adds	r3, r7, #4
 8002f12:	681a      	ldr	r2, [r3, #0]
 8002f14:	4b1e      	ldr	r3, [pc, #120]	; (8002f90 <er_oled_print_2digit+0x9c>)
 8002f16:	fb83 1302 	smull	r1, r3, r3, r2
 8002f1a:	1099      	asrs	r1, r3, #2
 8002f1c:	17d3      	asrs	r3, r2, #31
 8002f1e:	1ac9      	subs	r1, r1, r3
 8002f20:	460b      	mov	r3, r1
 8002f22:	009b      	lsls	r3, r3, #2
 8002f24:	440b      	add	r3, r1
 8002f26:	005b      	lsls	r3, r3, #1
 8002f28:	1ad1      	subs	r1, r2, r3
 8002f2a:	b2cb      	uxtb	r3, r1
 8002f2c:	3330      	adds	r3, #48	; 0x30
 8002f2e:	f887 3177 	strb.w	r3, [r7, #375]	; 0x177
  char d = (char) ( ((int) '0') + (value / 10));
 8002f32:	1d3b      	adds	r3, r7, #4
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	4a16      	ldr	r2, [pc, #88]	; (8002f90 <er_oled_print_2digit+0x9c>)
 8002f38:	fb82 1203 	smull	r1, r2, r2, r3
 8002f3c:	1092      	asrs	r2, r2, #2
 8002f3e:	17db      	asrs	r3, r3, #31
 8002f40:	1ad3      	subs	r3, r2, r3
 8002f42:	b2db      	uxtb	r3, r3
 8002f44:	3330      	adds	r3, #48	; 0x30
 8002f46:	f887 3176 	strb.w	r3, [r7, #374]	; 0x176
  er_oled_char(27, 14, d, 12, 1, oled_buf);
 8002f4a:	f897 2176 	ldrb.w	r2, [r7, #374]	; 0x176
 8002f4e:	f107 030c 	add.w	r3, r7, #12
 8002f52:	9301      	str	r3, [sp, #4]
 8002f54:	2301      	movs	r3, #1
 8002f56:	9300      	str	r3, [sp, #0]
 8002f58:	230c      	movs	r3, #12
 8002f5a:	210e      	movs	r1, #14
 8002f5c:	201b      	movs	r0, #27
 8002f5e:	f7ff fda7 	bl	8002ab0 <er_oled_char>
  er_oled_char(36, 14, c, 12, 1, oled_buf);
 8002f62:	f897 2177 	ldrb.w	r2, [r7, #375]	; 0x177
 8002f66:	f107 030c 	add.w	r3, r7, #12
 8002f6a:	9301      	str	r3, [sp, #4]
 8002f6c:	2301      	movs	r3, #1
 8002f6e:	9300      	str	r3, [sp, #0]
 8002f70:	230c      	movs	r3, #12
 8002f72:	210e      	movs	r1, #14
 8002f74:	2024      	movs	r0, #36	; 0x24
 8002f76:	f7ff fd9b 	bl	8002ab0 <er_oled_char>
  er_oled_display(oled_buf);
 8002f7a:	f107 030c 	add.w	r3, r7, #12
 8002f7e:	4618      	mov	r0, r3
 8002f80:	f7ff ff05 	bl	8002d8e <er_oled_display>

}
 8002f84:	bf00      	nop
 8002f86:	f507 77bc 	add.w	r7, r7, #376	; 0x178
 8002f8a:	46bd      	mov	sp, r7
 8002f8c:	bd80      	pop	{r7, pc}
 8002f8e:	bf00      	nop
 8002f90:	66666667 	.word	0x66666667

08002f94 <vPortSuppressTicksAndSleep>:
 *
 * @param: xExpectedIdleTime is given in number of FreeRTOS Ticks
 * @retval: None
 */
void vPortSuppressTicksAndSleep( TickType_t xExpectedIdleTime )
{
 8002f94:	b480      	push	{r7}
 8002f96:	b083      	sub	sp, #12
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	6078      	str	r0, [r7, #4]

    /* Exit with interrUpts enabled. */
    __enable_irq();
  }
#endif
}
 8002f9c:	bf00      	nop
 8002f9e:	370c      	adds	r7, #12
 8002fa0:	46bd      	mov	sp, r7
 8002fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa6:	4770      	bx	lr

08002fa8 <LL_EXTI_EnableIT_0_31>:
{
 8002fa8:	b480      	push	{r7}
 8002faa:	b083      	sub	sp, #12
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8002fb0:	4b06      	ldr	r3, [pc, #24]	; (8002fcc <LL_EXTI_EnableIT_0_31+0x24>)
 8002fb2:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8002fb6:	4905      	ldr	r1, [pc, #20]	; (8002fcc <LL_EXTI_EnableIT_0_31+0x24>)
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	4313      	orrs	r3, r2
 8002fbc:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 8002fc0:	bf00      	nop
 8002fc2:	370c      	adds	r7, #12
 8002fc4:	46bd      	mov	sp, r7
 8002fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fca:	4770      	bx	lr
 8002fcc:	58000800 	.word	0x58000800

08002fd0 <LL_EXTI_EnableRisingTrig_0_31>:
{
 8002fd0:	b480      	push	{r7}
 8002fd2:	b083      	sub	sp, #12
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8002fd8:	4b05      	ldr	r3, [pc, #20]	; (8002ff0 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8002fda:	681a      	ldr	r2, [r3, #0]
 8002fdc:	4904      	ldr	r1, [pc, #16]	; (8002ff0 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	4313      	orrs	r3, r2
 8002fe2:	600b      	str	r3, [r1, #0]
}
 8002fe4:	bf00      	nop
 8002fe6:	370c      	adds	r7, #12
 8002fe8:	46bd      	mov	sp, r7
 8002fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fee:	4770      	bx	lr
 8002ff0:	58000800 	.word	0x58000800

08002ff4 <ReadRtcSsrValue>:
 *         reliability of the value
 * @param  None
 * @retval SSR value read
 */
static uint32_t ReadRtcSsrValue(void)
{
 8002ff4:	b480      	push	{r7}
 8002ff6:	b083      	sub	sp, #12
 8002ff8:	af00      	add	r7, sp, #0
  uint32_t first_read;
  uint32_t second_read;

  first_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8002ffa:	4b0d      	ldr	r3, [pc, #52]	; (8003030 <ReadRtcSsrValue+0x3c>)
 8002ffc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ffe:	b29b      	uxth	r3, r3
 8003000:	607b      	str	r3, [r7, #4]

  second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8003002:	4b0b      	ldr	r3, [pc, #44]	; (8003030 <ReadRtcSsrValue+0x3c>)
 8003004:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003006:	b29b      	uxth	r3, r3
 8003008:	603b      	str	r3, [r7, #0]

  while(first_read != second_read)
 800300a:	e005      	b.n	8003018 <ReadRtcSsrValue+0x24>
  {
    first_read = second_read;
 800300c:	683b      	ldr	r3, [r7, #0]
 800300e:	607b      	str	r3, [r7, #4]

    second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8003010:	4b07      	ldr	r3, [pc, #28]	; (8003030 <ReadRtcSsrValue+0x3c>)
 8003012:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003014:	b29b      	uxth	r3, r3
 8003016:	603b      	str	r3, [r7, #0]
  while(first_read != second_read)
 8003018:	687a      	ldr	r2, [r7, #4]
 800301a:	683b      	ldr	r3, [r7, #0]
 800301c:	429a      	cmp	r2, r3
 800301e:	d1f5      	bne.n	800300c <ReadRtcSsrValue+0x18>
  }

  return second_read;
 8003020:	683b      	ldr	r3, [r7, #0]
}
 8003022:	4618      	mov	r0, r3
 8003024:	370c      	adds	r7, #12
 8003026:	46bd      	mov	sp, r7
 8003028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800302c:	4770      	bx	lr
 800302e:	bf00      	nop
 8003030:	40002800 	.word	0x40002800

08003034 <LinkTimerAfter>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked after
 * @retval None
 */
static void LinkTimerAfter(uint8_t TimerID, uint8_t RefTimerID)
{
 8003034:	b480      	push	{r7}
 8003036:	b085      	sub	sp, #20
 8003038:	af00      	add	r7, sp, #0
 800303a:	4603      	mov	r3, r0
 800303c:	460a      	mov	r2, r1
 800303e:	71fb      	strb	r3, [r7, #7]
 8003040:	4613      	mov	r3, r2
 8003042:	71bb      	strb	r3, [r7, #6]
  uint8_t next_id;

  next_id = aTimerContext[RefTimerID].NextID;
 8003044:	79ba      	ldrb	r2, [r7, #6]
 8003046:	491d      	ldr	r1, [pc, #116]	; (80030bc <LinkTimerAfter+0x88>)
 8003048:	4613      	mov	r3, r2
 800304a:	005b      	lsls	r3, r3, #1
 800304c:	4413      	add	r3, r2
 800304e:	00db      	lsls	r3, r3, #3
 8003050:	440b      	add	r3, r1
 8003052:	3315      	adds	r3, #21
 8003054:	781b      	ldrb	r3, [r3, #0]
 8003056:	73fb      	strb	r3, [r7, #15]

  if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8003058:	7bfb      	ldrb	r3, [r7, #15]
 800305a:	2b06      	cmp	r3, #6
 800305c:	d009      	beq.n	8003072 <LinkTimerAfter+0x3e>
  {
    aTimerContext[next_id].PreviousID = TimerID;
 800305e:	7bfa      	ldrb	r2, [r7, #15]
 8003060:	4916      	ldr	r1, [pc, #88]	; (80030bc <LinkTimerAfter+0x88>)
 8003062:	4613      	mov	r3, r2
 8003064:	005b      	lsls	r3, r3, #1
 8003066:	4413      	add	r3, r2
 8003068:	00db      	lsls	r3, r3, #3
 800306a:	440b      	add	r3, r1
 800306c:	3314      	adds	r3, #20
 800306e:	79fa      	ldrb	r2, [r7, #7]
 8003070:	701a      	strb	r2, [r3, #0]
  }
  aTimerContext[TimerID].NextID = next_id;
 8003072:	79fa      	ldrb	r2, [r7, #7]
 8003074:	4911      	ldr	r1, [pc, #68]	; (80030bc <LinkTimerAfter+0x88>)
 8003076:	4613      	mov	r3, r2
 8003078:	005b      	lsls	r3, r3, #1
 800307a:	4413      	add	r3, r2
 800307c:	00db      	lsls	r3, r3, #3
 800307e:	440b      	add	r3, r1
 8003080:	3315      	adds	r3, #21
 8003082:	7bfa      	ldrb	r2, [r7, #15]
 8003084:	701a      	strb	r2, [r3, #0]
  aTimerContext[TimerID].PreviousID = RefTimerID ;
 8003086:	79fa      	ldrb	r2, [r7, #7]
 8003088:	490c      	ldr	r1, [pc, #48]	; (80030bc <LinkTimerAfter+0x88>)
 800308a:	4613      	mov	r3, r2
 800308c:	005b      	lsls	r3, r3, #1
 800308e:	4413      	add	r3, r2
 8003090:	00db      	lsls	r3, r3, #3
 8003092:	440b      	add	r3, r1
 8003094:	3314      	adds	r3, #20
 8003096:	79ba      	ldrb	r2, [r7, #6]
 8003098:	701a      	strb	r2, [r3, #0]
  aTimerContext[RefTimerID].NextID = TimerID;
 800309a:	79ba      	ldrb	r2, [r7, #6]
 800309c:	4907      	ldr	r1, [pc, #28]	; (80030bc <LinkTimerAfter+0x88>)
 800309e:	4613      	mov	r3, r2
 80030a0:	005b      	lsls	r3, r3, #1
 80030a2:	4413      	add	r3, r2
 80030a4:	00db      	lsls	r3, r3, #3
 80030a6:	440b      	add	r3, r1
 80030a8:	3315      	adds	r3, #21
 80030aa:	79fa      	ldrb	r2, [r7, #7]
 80030ac:	701a      	strb	r2, [r3, #0]

  return;
 80030ae:	bf00      	nop
}
 80030b0:	3714      	adds	r7, #20
 80030b2:	46bd      	mov	sp, r7
 80030b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b8:	4770      	bx	lr
 80030ba:	bf00      	nop
 80030bc:	20000298 	.word	0x20000298

080030c0 <LinkTimerBefore>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked before
 * @retval None
 */
static void LinkTimerBefore(uint8_t TimerID, uint8_t RefTimerID)
{
 80030c0:	b480      	push	{r7}
 80030c2:	b085      	sub	sp, #20
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	4603      	mov	r3, r0
 80030c8:	460a      	mov	r2, r1
 80030ca:	71fb      	strb	r3, [r7, #7]
 80030cc:	4613      	mov	r3, r2
 80030ce:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;

  if(RefTimerID != CurrentRunningTimerID)
 80030d0:	4b29      	ldr	r3, [pc, #164]	; (8003178 <LinkTimerBefore+0xb8>)
 80030d2:	781b      	ldrb	r3, [r3, #0]
 80030d4:	b2db      	uxtb	r3, r3
 80030d6:	79ba      	ldrb	r2, [r7, #6]
 80030d8:	429a      	cmp	r2, r3
 80030da:	d032      	beq.n	8003142 <LinkTimerBefore+0x82>
  {
    previous_id = aTimerContext[RefTimerID].PreviousID;
 80030dc:	79ba      	ldrb	r2, [r7, #6]
 80030de:	4927      	ldr	r1, [pc, #156]	; (800317c <LinkTimerBefore+0xbc>)
 80030e0:	4613      	mov	r3, r2
 80030e2:	005b      	lsls	r3, r3, #1
 80030e4:	4413      	add	r3, r2
 80030e6:	00db      	lsls	r3, r3, #3
 80030e8:	440b      	add	r3, r1
 80030ea:	3314      	adds	r3, #20
 80030ec:	781b      	ldrb	r3, [r3, #0]
 80030ee:	73fb      	strb	r3, [r7, #15]

    aTimerContext[previous_id].NextID = TimerID;
 80030f0:	7bfa      	ldrb	r2, [r7, #15]
 80030f2:	4922      	ldr	r1, [pc, #136]	; (800317c <LinkTimerBefore+0xbc>)
 80030f4:	4613      	mov	r3, r2
 80030f6:	005b      	lsls	r3, r3, #1
 80030f8:	4413      	add	r3, r2
 80030fa:	00db      	lsls	r3, r3, #3
 80030fc:	440b      	add	r3, r1
 80030fe:	3315      	adds	r3, #21
 8003100:	79fa      	ldrb	r2, [r7, #7]
 8003102:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].NextID = RefTimerID;
 8003104:	79fa      	ldrb	r2, [r7, #7]
 8003106:	491d      	ldr	r1, [pc, #116]	; (800317c <LinkTimerBefore+0xbc>)
 8003108:	4613      	mov	r3, r2
 800310a:	005b      	lsls	r3, r3, #1
 800310c:	4413      	add	r3, r2
 800310e:	00db      	lsls	r3, r3, #3
 8003110:	440b      	add	r3, r1
 8003112:	3315      	adds	r3, #21
 8003114:	79ba      	ldrb	r2, [r7, #6]
 8003116:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].PreviousID = previous_id ;
 8003118:	79fa      	ldrb	r2, [r7, #7]
 800311a:	4918      	ldr	r1, [pc, #96]	; (800317c <LinkTimerBefore+0xbc>)
 800311c:	4613      	mov	r3, r2
 800311e:	005b      	lsls	r3, r3, #1
 8003120:	4413      	add	r3, r2
 8003122:	00db      	lsls	r3, r3, #3
 8003124:	440b      	add	r3, r1
 8003126:	3314      	adds	r3, #20
 8003128:	7bfa      	ldrb	r2, [r7, #15]
 800312a:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 800312c:	79ba      	ldrb	r2, [r7, #6]
 800312e:	4913      	ldr	r1, [pc, #76]	; (800317c <LinkTimerBefore+0xbc>)
 8003130:	4613      	mov	r3, r2
 8003132:	005b      	lsls	r3, r3, #1
 8003134:	4413      	add	r3, r2
 8003136:	00db      	lsls	r3, r3, #3
 8003138:	440b      	add	r3, r1
 800313a:	3314      	adds	r3, #20
 800313c:	79fa      	ldrb	r2, [r7, #7]
 800313e:	701a      	strb	r2, [r3, #0]
  {
    aTimerContext[TimerID].NextID = RefTimerID;
    aTimerContext[RefTimerID].PreviousID = TimerID;
  }

  return;
 8003140:	e014      	b.n	800316c <LinkTimerBefore+0xac>
    aTimerContext[TimerID].NextID = RefTimerID;
 8003142:	79fa      	ldrb	r2, [r7, #7]
 8003144:	490d      	ldr	r1, [pc, #52]	; (800317c <LinkTimerBefore+0xbc>)
 8003146:	4613      	mov	r3, r2
 8003148:	005b      	lsls	r3, r3, #1
 800314a:	4413      	add	r3, r2
 800314c:	00db      	lsls	r3, r3, #3
 800314e:	440b      	add	r3, r1
 8003150:	3315      	adds	r3, #21
 8003152:	79ba      	ldrb	r2, [r7, #6]
 8003154:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 8003156:	79ba      	ldrb	r2, [r7, #6]
 8003158:	4908      	ldr	r1, [pc, #32]	; (800317c <LinkTimerBefore+0xbc>)
 800315a:	4613      	mov	r3, r2
 800315c:	005b      	lsls	r3, r3, #1
 800315e:	4413      	add	r3, r2
 8003160:	00db      	lsls	r3, r3, #3
 8003162:	440b      	add	r3, r1
 8003164:	3314      	adds	r3, #20
 8003166:	79fa      	ldrb	r2, [r7, #7]
 8003168:	701a      	strb	r2, [r3, #0]
  return;
 800316a:	bf00      	nop
}
 800316c:	3714      	adds	r7, #20
 800316e:	46bd      	mov	sp, r7
 8003170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003174:	4770      	bx	lr
 8003176:	bf00      	nop
 8003178:	20000328 	.word	0x20000328
 800317c:	20000298 	.word	0x20000298

08003180 <linkTimer>:
 * @brief  Insert a Timer in the list
 * @param  TimerID:   The ID of the Timer
 * @retval None
 */
static uint16_t linkTimer(uint8_t TimerID)
{
 8003180:	b580      	push	{r7, lr}
 8003182:	b084      	sub	sp, #16
 8003184:	af00      	add	r7, sp, #0
 8003186:	4603      	mov	r3, r0
 8003188:	71fb      	strb	r3, [r7, #7]
  uint32_t time_left;
  uint16_t time_elapsed;
  uint8_t timer_id_lookup;
  uint8_t next_id;

  if(CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 800318a:	4b4e      	ldr	r3, [pc, #312]	; (80032c4 <linkTimer+0x144>)
 800318c:	781b      	ldrb	r3, [r3, #0]
 800318e:	b2db      	uxtb	r3, r3
 8003190:	2b06      	cmp	r3, #6
 8003192:	d118      	bne.n	80031c6 <linkTimer+0x46>
  {
    /**
     * No timer in the list
     */
    PreviousRunningTimerID = CurrentRunningTimerID;
 8003194:	4b4b      	ldr	r3, [pc, #300]	; (80032c4 <linkTimer+0x144>)
 8003196:	781b      	ldrb	r3, [r3, #0]
 8003198:	b2da      	uxtb	r2, r3
 800319a:	4b4b      	ldr	r3, [pc, #300]	; (80032c8 <linkTimer+0x148>)
 800319c:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = TimerID;
 800319e:	4a49      	ldr	r2, [pc, #292]	; (80032c4 <linkTimer+0x144>)
 80031a0:	79fb      	ldrb	r3, [r7, #7]
 80031a2:	7013      	strb	r3, [r2, #0]
    aTimerContext[TimerID].NextID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;
 80031a4:	79fa      	ldrb	r2, [r7, #7]
 80031a6:	4949      	ldr	r1, [pc, #292]	; (80032cc <linkTimer+0x14c>)
 80031a8:	4613      	mov	r3, r2
 80031aa:	005b      	lsls	r3, r3, #1
 80031ac:	4413      	add	r3, r2
 80031ae:	00db      	lsls	r3, r3, #3
 80031b0:	440b      	add	r3, r1
 80031b2:	3315      	adds	r3, #21
 80031b4:	2206      	movs	r2, #6
 80031b6:	701a      	strb	r2, [r3, #0]

    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 80031b8:	4b45      	ldr	r3, [pc, #276]	; (80032d0 <linkTimer+0x150>)
 80031ba:	f04f 32ff 	mov.w	r2, #4294967295
 80031be:	601a      	str	r2, [r3, #0]
    time_elapsed = 0;
 80031c0:	2300      	movs	r3, #0
 80031c2:	81fb      	strh	r3, [r7, #14]
 80031c4:	e078      	b.n	80032b8 <linkTimer+0x138>
  }
  else
  {
    time_elapsed = ReturnTimeElapsed();
 80031c6:	f000 f909 	bl	80033dc <ReturnTimeElapsed>
 80031ca:	4603      	mov	r3, r0
 80031cc:	81fb      	strh	r3, [r7, #14]

    /**
     * update count of the timer to be linked
     */
    aTimerContext[TimerID].CountLeft += time_elapsed;
 80031ce:	79fa      	ldrb	r2, [r7, #7]
 80031d0:	493e      	ldr	r1, [pc, #248]	; (80032cc <linkTimer+0x14c>)
 80031d2:	4613      	mov	r3, r2
 80031d4:	005b      	lsls	r3, r3, #1
 80031d6:	4413      	add	r3, r2
 80031d8:	00db      	lsls	r3, r3, #3
 80031da:	440b      	add	r3, r1
 80031dc:	3308      	adds	r3, #8
 80031de:	6819      	ldr	r1, [r3, #0]
 80031e0:	89fb      	ldrh	r3, [r7, #14]
 80031e2:	79fa      	ldrb	r2, [r7, #7]
 80031e4:	4419      	add	r1, r3
 80031e6:	4839      	ldr	r0, [pc, #228]	; (80032cc <linkTimer+0x14c>)
 80031e8:	4613      	mov	r3, r2
 80031ea:	005b      	lsls	r3, r3, #1
 80031ec:	4413      	add	r3, r2
 80031ee:	00db      	lsls	r3, r3, #3
 80031f0:	4403      	add	r3, r0
 80031f2:	3308      	adds	r3, #8
 80031f4:	6019      	str	r1, [r3, #0]
    time_left = aTimerContext[TimerID].CountLeft;
 80031f6:	79fa      	ldrb	r2, [r7, #7]
 80031f8:	4934      	ldr	r1, [pc, #208]	; (80032cc <linkTimer+0x14c>)
 80031fa:	4613      	mov	r3, r2
 80031fc:	005b      	lsls	r3, r3, #1
 80031fe:	4413      	add	r3, r2
 8003200:	00db      	lsls	r3, r3, #3
 8003202:	440b      	add	r3, r1
 8003204:	3308      	adds	r3, #8
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	60bb      	str	r3, [r7, #8]

    /**
     * Search for index where the new timer shall be linked
     */
    if(aTimerContext[CurrentRunningTimerID].CountLeft <= time_left)
 800320a:	4b2e      	ldr	r3, [pc, #184]	; (80032c4 <linkTimer+0x144>)
 800320c:	781b      	ldrb	r3, [r3, #0]
 800320e:	b2db      	uxtb	r3, r3
 8003210:	4619      	mov	r1, r3
 8003212:	4a2e      	ldr	r2, [pc, #184]	; (80032cc <linkTimer+0x14c>)
 8003214:	460b      	mov	r3, r1
 8003216:	005b      	lsls	r3, r3, #1
 8003218:	440b      	add	r3, r1
 800321a:	00db      	lsls	r3, r3, #3
 800321c:	4413      	add	r3, r2
 800321e:	3308      	adds	r3, #8
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	68ba      	ldr	r2, [r7, #8]
 8003224:	429a      	cmp	r2, r3
 8003226:	d337      	bcc.n	8003298 <linkTimer+0x118>
    {
      /**
       * Search for the ID after the first one
       */
      timer_id_lookup = CurrentRunningTimerID;
 8003228:	4b26      	ldr	r3, [pc, #152]	; (80032c4 <linkTimer+0x144>)
 800322a:	781b      	ldrb	r3, [r3, #0]
 800322c:	737b      	strb	r3, [r7, #13]
      next_id = aTimerContext[timer_id_lookup].NextID;
 800322e:	7b7a      	ldrb	r2, [r7, #13]
 8003230:	4926      	ldr	r1, [pc, #152]	; (80032cc <linkTimer+0x14c>)
 8003232:	4613      	mov	r3, r2
 8003234:	005b      	lsls	r3, r3, #1
 8003236:	4413      	add	r3, r2
 8003238:	00db      	lsls	r3, r3, #3
 800323a:	440b      	add	r3, r1
 800323c:	3315      	adds	r3, #21
 800323e:	781b      	ldrb	r3, [r3, #0]
 8003240:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 8003242:	e013      	b.n	800326c <linkTimer+0xec>
      {
        timer_id_lookup = aTimerContext[timer_id_lookup].NextID;
 8003244:	7b7a      	ldrb	r2, [r7, #13]
 8003246:	4921      	ldr	r1, [pc, #132]	; (80032cc <linkTimer+0x14c>)
 8003248:	4613      	mov	r3, r2
 800324a:	005b      	lsls	r3, r3, #1
 800324c:	4413      	add	r3, r2
 800324e:	00db      	lsls	r3, r3, #3
 8003250:	440b      	add	r3, r1
 8003252:	3315      	adds	r3, #21
 8003254:	781b      	ldrb	r3, [r3, #0]
 8003256:	737b      	strb	r3, [r7, #13]
        next_id = aTimerContext[timer_id_lookup].NextID;
 8003258:	7b7a      	ldrb	r2, [r7, #13]
 800325a:	491c      	ldr	r1, [pc, #112]	; (80032cc <linkTimer+0x14c>)
 800325c:	4613      	mov	r3, r2
 800325e:	005b      	lsls	r3, r3, #1
 8003260:	4413      	add	r3, r2
 8003262:	00db      	lsls	r3, r3, #3
 8003264:	440b      	add	r3, r1
 8003266:	3315      	adds	r3, #21
 8003268:	781b      	ldrb	r3, [r3, #0]
 800326a:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 800326c:	7b3b      	ldrb	r3, [r7, #12]
 800326e:	2b06      	cmp	r3, #6
 8003270:	d00b      	beq.n	800328a <linkTimer+0x10a>
 8003272:	7b3a      	ldrb	r2, [r7, #12]
 8003274:	4915      	ldr	r1, [pc, #84]	; (80032cc <linkTimer+0x14c>)
 8003276:	4613      	mov	r3, r2
 8003278:	005b      	lsls	r3, r3, #1
 800327a:	4413      	add	r3, r2
 800327c:	00db      	lsls	r3, r3, #3
 800327e:	440b      	add	r3, r1
 8003280:	3308      	adds	r3, #8
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	68ba      	ldr	r2, [r7, #8]
 8003286:	429a      	cmp	r2, r3
 8003288:	d2dc      	bcs.n	8003244 <linkTimer+0xc4>
      }

      /**
       * Link after the ID
       */
      LinkTimerAfter(TimerID, timer_id_lookup);
 800328a:	7b7a      	ldrb	r2, [r7, #13]
 800328c:	79fb      	ldrb	r3, [r7, #7]
 800328e:	4611      	mov	r1, r2
 8003290:	4618      	mov	r0, r3
 8003292:	f7ff fecf 	bl	8003034 <LinkTimerAfter>
 8003296:	e00f      	b.n	80032b8 <linkTimer+0x138>
    else
    {
      /**
       * Link before the first ID
       */
      LinkTimerBefore(TimerID, CurrentRunningTimerID);
 8003298:	4b0a      	ldr	r3, [pc, #40]	; (80032c4 <linkTimer+0x144>)
 800329a:	781b      	ldrb	r3, [r3, #0]
 800329c:	b2da      	uxtb	r2, r3
 800329e:	79fb      	ldrb	r3, [r7, #7]
 80032a0:	4611      	mov	r1, r2
 80032a2:	4618      	mov	r0, r3
 80032a4:	f7ff ff0c 	bl	80030c0 <LinkTimerBefore>
      PreviousRunningTimerID = CurrentRunningTimerID;
 80032a8:	4b06      	ldr	r3, [pc, #24]	; (80032c4 <linkTimer+0x144>)
 80032aa:	781b      	ldrb	r3, [r3, #0]
 80032ac:	b2da      	uxtb	r2, r3
 80032ae:	4b06      	ldr	r3, [pc, #24]	; (80032c8 <linkTimer+0x148>)
 80032b0:	701a      	strb	r2, [r3, #0]
      CurrentRunningTimerID = TimerID;
 80032b2:	4a04      	ldr	r2, [pc, #16]	; (80032c4 <linkTimer+0x144>)
 80032b4:	79fb      	ldrb	r3, [r7, #7]
 80032b6:	7013      	strb	r3, [r2, #0]
    }
  }

  return time_elapsed;
 80032b8:	89fb      	ldrh	r3, [r7, #14]
}
 80032ba:	4618      	mov	r0, r3
 80032bc:	3710      	adds	r7, #16
 80032be:	46bd      	mov	sp, r7
 80032c0:	bd80      	pop	{r7, pc}
 80032c2:	bf00      	nop
 80032c4:	20000328 	.word	0x20000328
 80032c8:	20000329 	.word	0x20000329
 80032cc:	20000298 	.word	0x20000298
 80032d0:	2000032c 	.word	0x2000032c

080032d4 <UnlinkTimer>:
 * @param  TimerID:   The ID of the Timer
 * @param  RequestReadSSR: Request to read the SSR register or not
 * @retval None
 */
static void UnlinkTimer(uint8_t TimerID, RequestReadSSR_t RequestReadSSR)
{
 80032d4:	b480      	push	{r7}
 80032d6:	b085      	sub	sp, #20
 80032d8:	af00      	add	r7, sp, #0
 80032da:	4603      	mov	r3, r0
 80032dc:	460a      	mov	r2, r1
 80032de:	71fb      	strb	r3, [r7, #7]
 80032e0:	4613      	mov	r3, r2
 80032e2:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;
  uint8_t next_id;

  if(TimerID == CurrentRunningTimerID)
 80032e4:	4b39      	ldr	r3, [pc, #228]	; (80033cc <UnlinkTimer+0xf8>)
 80032e6:	781b      	ldrb	r3, [r3, #0]
 80032e8:	b2db      	uxtb	r3, r3
 80032ea:	79fa      	ldrb	r2, [r7, #7]
 80032ec:	429a      	cmp	r2, r3
 80032ee:	d111      	bne.n	8003314 <UnlinkTimer+0x40>
  {
    PreviousRunningTimerID = CurrentRunningTimerID;
 80032f0:	4b36      	ldr	r3, [pc, #216]	; (80033cc <UnlinkTimer+0xf8>)
 80032f2:	781b      	ldrb	r3, [r3, #0]
 80032f4:	b2da      	uxtb	r2, r3
 80032f6:	4b36      	ldr	r3, [pc, #216]	; (80033d0 <UnlinkTimer+0xfc>)
 80032f8:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = aTimerContext[TimerID].NextID;
 80032fa:	79fa      	ldrb	r2, [r7, #7]
 80032fc:	4935      	ldr	r1, [pc, #212]	; (80033d4 <UnlinkTimer+0x100>)
 80032fe:	4613      	mov	r3, r2
 8003300:	005b      	lsls	r3, r3, #1
 8003302:	4413      	add	r3, r2
 8003304:	00db      	lsls	r3, r3, #3
 8003306:	440b      	add	r3, r1
 8003308:	3315      	adds	r3, #21
 800330a:	781b      	ldrb	r3, [r3, #0]
 800330c:	b2da      	uxtb	r2, r3
 800330e:	4b2f      	ldr	r3, [pc, #188]	; (80033cc <UnlinkTimer+0xf8>)
 8003310:	701a      	strb	r2, [r3, #0]
 8003312:	e03e      	b.n	8003392 <UnlinkTimer+0xbe>
  }
  else
  {
    previous_id = aTimerContext[TimerID].PreviousID;
 8003314:	79fa      	ldrb	r2, [r7, #7]
 8003316:	492f      	ldr	r1, [pc, #188]	; (80033d4 <UnlinkTimer+0x100>)
 8003318:	4613      	mov	r3, r2
 800331a:	005b      	lsls	r3, r3, #1
 800331c:	4413      	add	r3, r2
 800331e:	00db      	lsls	r3, r3, #3
 8003320:	440b      	add	r3, r1
 8003322:	3314      	adds	r3, #20
 8003324:	781b      	ldrb	r3, [r3, #0]
 8003326:	73fb      	strb	r3, [r7, #15]
    next_id = aTimerContext[TimerID].NextID;
 8003328:	79fa      	ldrb	r2, [r7, #7]
 800332a:	492a      	ldr	r1, [pc, #168]	; (80033d4 <UnlinkTimer+0x100>)
 800332c:	4613      	mov	r3, r2
 800332e:	005b      	lsls	r3, r3, #1
 8003330:	4413      	add	r3, r2
 8003332:	00db      	lsls	r3, r3, #3
 8003334:	440b      	add	r3, r1
 8003336:	3315      	adds	r3, #21
 8003338:	781b      	ldrb	r3, [r3, #0]
 800333a:	73bb      	strb	r3, [r7, #14]

    aTimerContext[previous_id].NextID = aTimerContext[TimerID].NextID;
 800333c:	79f9      	ldrb	r1, [r7, #7]
 800333e:	7bfa      	ldrb	r2, [r7, #15]
 8003340:	4824      	ldr	r0, [pc, #144]	; (80033d4 <UnlinkTimer+0x100>)
 8003342:	460b      	mov	r3, r1
 8003344:	005b      	lsls	r3, r3, #1
 8003346:	440b      	add	r3, r1
 8003348:	00db      	lsls	r3, r3, #3
 800334a:	4403      	add	r3, r0
 800334c:	3315      	adds	r3, #21
 800334e:	781b      	ldrb	r3, [r3, #0]
 8003350:	b2d8      	uxtb	r0, r3
 8003352:	4920      	ldr	r1, [pc, #128]	; (80033d4 <UnlinkTimer+0x100>)
 8003354:	4613      	mov	r3, r2
 8003356:	005b      	lsls	r3, r3, #1
 8003358:	4413      	add	r3, r2
 800335a:	00db      	lsls	r3, r3, #3
 800335c:	440b      	add	r3, r1
 800335e:	3315      	adds	r3, #21
 8003360:	4602      	mov	r2, r0
 8003362:	701a      	strb	r2, [r3, #0]
    if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8003364:	7bbb      	ldrb	r3, [r7, #14]
 8003366:	2b06      	cmp	r3, #6
 8003368:	d013      	beq.n	8003392 <UnlinkTimer+0xbe>
    {
      aTimerContext[next_id].PreviousID = aTimerContext[TimerID].PreviousID;
 800336a:	79f9      	ldrb	r1, [r7, #7]
 800336c:	7bba      	ldrb	r2, [r7, #14]
 800336e:	4819      	ldr	r0, [pc, #100]	; (80033d4 <UnlinkTimer+0x100>)
 8003370:	460b      	mov	r3, r1
 8003372:	005b      	lsls	r3, r3, #1
 8003374:	440b      	add	r3, r1
 8003376:	00db      	lsls	r3, r3, #3
 8003378:	4403      	add	r3, r0
 800337a:	3314      	adds	r3, #20
 800337c:	781b      	ldrb	r3, [r3, #0]
 800337e:	b2d8      	uxtb	r0, r3
 8003380:	4914      	ldr	r1, [pc, #80]	; (80033d4 <UnlinkTimer+0x100>)
 8003382:	4613      	mov	r3, r2
 8003384:	005b      	lsls	r3, r3, #1
 8003386:	4413      	add	r3, r2
 8003388:	00db      	lsls	r3, r3, #3
 800338a:	440b      	add	r3, r1
 800338c:	3314      	adds	r3, #20
 800338e:	4602      	mov	r2, r0
 8003390:	701a      	strb	r2, [r3, #0]
  }

  /**
   * Timer is out of the list
   */
  aTimerContext[TimerID].TimerIDStatus = TimerID_Created;
 8003392:	79fa      	ldrb	r2, [r7, #7]
 8003394:	490f      	ldr	r1, [pc, #60]	; (80033d4 <UnlinkTimer+0x100>)
 8003396:	4613      	mov	r3, r2
 8003398:	005b      	lsls	r3, r3, #1
 800339a:	4413      	add	r3, r2
 800339c:	00db      	lsls	r3, r3, #3
 800339e:	440b      	add	r3, r1
 80033a0:	330c      	adds	r3, #12
 80033a2:	2201      	movs	r2, #1
 80033a4:	701a      	strb	r2, [r3, #0]

  if((CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (RequestReadSSR == SSR_Read_Requested))
 80033a6:	4b09      	ldr	r3, [pc, #36]	; (80033cc <UnlinkTimer+0xf8>)
 80033a8:	781b      	ldrb	r3, [r3, #0]
 80033aa:	b2db      	uxtb	r3, r3
 80033ac:	2b06      	cmp	r3, #6
 80033ae:	d107      	bne.n	80033c0 <UnlinkTimer+0xec>
 80033b0:	79bb      	ldrb	r3, [r7, #6]
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d104      	bne.n	80033c0 <UnlinkTimer+0xec>
  {
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 80033b6:	4b08      	ldr	r3, [pc, #32]	; (80033d8 <UnlinkTimer+0x104>)
 80033b8:	f04f 32ff 	mov.w	r2, #4294967295
 80033bc:	601a      	str	r2, [r3, #0]
  }

  return;
 80033be:	bf00      	nop
 80033c0:	bf00      	nop
}
 80033c2:	3714      	adds	r7, #20
 80033c4:	46bd      	mov	sp, r7
 80033c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ca:	4770      	bx	lr
 80033cc:	20000328 	.word	0x20000328
 80033d0:	20000329 	.word	0x20000329
 80033d4:	20000298 	.word	0x20000298
 80033d8:	2000032c 	.word	0x2000032c

080033dc <ReturnTimeElapsed>:
 *        since the time the timer has been started
 * @param  None
 * @retval Time expired in Ticks
 */
static uint16_t ReturnTimeElapsed(void)
{
 80033dc:	b580      	push	{r7, lr}
 80033de:	b082      	sub	sp, #8
 80033e0:	af00      	add	r7, sp, #0
  uint32_t  return_value;
  uint32_t  wrap_counter;

  if(SSRValueOnLastSetup != SSR_FORBIDDEN_VALUE)
 80033e2:	4b1a      	ldr	r3, [pc, #104]	; (800344c <ReturnTimeElapsed+0x70>)
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033ea:	d026      	beq.n	800343a <ReturnTimeElapsed+0x5e>
  {
    return_value = ReadRtcSsrValue(); /**< Read SSR register first */
 80033ec:	f7ff fe02 	bl	8002ff4 <ReadRtcSsrValue>
 80033f0:	6078      	str	r0, [r7, #4]

    if (SSRValueOnLastSetup >= return_value)
 80033f2:	4b16      	ldr	r3, [pc, #88]	; (800344c <ReturnTimeElapsed+0x70>)
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	687a      	ldr	r2, [r7, #4]
 80033f8:	429a      	cmp	r2, r3
 80033fa:	d805      	bhi.n	8003408 <ReturnTimeElapsed+0x2c>
    {
      return_value = SSRValueOnLastSetup - return_value;
 80033fc:	4b13      	ldr	r3, [pc, #76]	; (800344c <ReturnTimeElapsed+0x70>)
 80033fe:	681a      	ldr	r2, [r3, #0]
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	1ad3      	subs	r3, r2, r3
 8003404:	607b      	str	r3, [r7, #4]
 8003406:	e00a      	b.n	800341e <ReturnTimeElapsed+0x42>
    }
    else
    {
      wrap_counter = SynchPrescalerUserConfig - return_value;
 8003408:	4b11      	ldr	r3, [pc, #68]	; (8003450 <ReturnTimeElapsed+0x74>)
 800340a:	881b      	ldrh	r3, [r3, #0]
 800340c:	461a      	mov	r2, r3
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	1ad3      	subs	r3, r2, r3
 8003412:	603b      	str	r3, [r7, #0]
      return_value = SSRValueOnLastSetup + wrap_counter;
 8003414:	4b0d      	ldr	r3, [pc, #52]	; (800344c <ReturnTimeElapsed+0x70>)
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	683a      	ldr	r2, [r7, #0]
 800341a:	4413      	add	r3, r2
 800341c:	607b      	str	r3, [r7, #4]

    /**
     * At this stage, ReturnValue holds the number of ticks counted by SSR
     * Need to translate in number of ticks counted by the Wakeuptimer
     */
    return_value = return_value*AsynchPrescalerUserConfig;
 800341e:	4b0d      	ldr	r3, [pc, #52]	; (8003454 <ReturnTimeElapsed+0x78>)
 8003420:	781b      	ldrb	r3, [r3, #0]
 8003422:	461a      	mov	r2, r3
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	fb02 f303 	mul.w	r3, r2, r3
 800342a:	607b      	str	r3, [r7, #4]
    return_value = return_value >> WakeupTimerDivider;
 800342c:	4b0a      	ldr	r3, [pc, #40]	; (8003458 <ReturnTimeElapsed+0x7c>)
 800342e:	781b      	ldrb	r3, [r3, #0]
 8003430:	461a      	mov	r2, r3
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	40d3      	lsrs	r3, r2
 8003436:	607b      	str	r3, [r7, #4]
 8003438:	e001      	b.n	800343e <ReturnTimeElapsed+0x62>
  }
  else
  {
    return_value = 0;
 800343a:	2300      	movs	r3, #0
 800343c:	607b      	str	r3, [r7, #4]
  }

  return (uint16_t)return_value;
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	b29b      	uxth	r3, r3
}
 8003442:	4618      	mov	r0, r3
 8003444:	3708      	adds	r7, #8
 8003446:	46bd      	mov	sp, r7
 8003448:	bd80      	pop	{r7, pc}
 800344a:	bf00      	nop
 800344c:	2000032c 	.word	0x2000032c
 8003450:	200003b6 	.word	0x200003b6
 8003454:	200003b5 	.word	0x200003b5
 8003458:	200003b4 	.word	0x200003b4

0800345c <RestartWakeupCounter>:
 *    It assumes all condition are met to be allowed to write the wakeup counter
 * @param  Value: Value to be written in the counter
 * @retval None
 */
static void RestartWakeupCounter(uint16_t Value)
{
 800345c:	b580      	push	{r7, lr}
 800345e:	b082      	sub	sp, #8
 8003460:	af00      	add	r7, sp, #0
 8003462:	4603      	mov	r3, r0
 8003464:	80fb      	strh	r3, [r7, #6]
   * The wakeuptimer has been disabled in the calling function to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   *  __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);
   */

  if(Value == 0)
 8003466:	88fb      	ldrh	r3, [r7, #6]
 8003468:	2b00      	cmp	r3, #0
 800346a:	d108      	bne.n	800347e <RestartWakeupCounter+0x22>
  {
    SSRValueOnLastSetup = ReadRtcSsrValue();
 800346c:	f7ff fdc2 	bl	8002ff4 <ReadRtcSsrValue>
 8003470:	4602      	mov	r2, r0
 8003472:	4b24      	ldr	r3, [pc, #144]	; (8003504 <RestartWakeupCounter+0xa8>)
 8003474:	601a      	str	r2, [r3, #0]

    /**
     * Simulate that the Timer expired
     */
    HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 8003476:	2003      	movs	r0, #3
 8003478:	f002 ff5c 	bl	8006334 <HAL_NVIC_SetPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE(phrtc);    /**<  Enable the Wakeup Timer */

    HW_TS_RTC_CountUpdated_AppNot();
  }

  return ;
 800347c:	e03e      	b.n	80034fc <RestartWakeupCounter+0xa0>
    if((Value > 1) ||(WakeupTimerDivider != 1))
 800347e:	88fb      	ldrh	r3, [r7, #6]
 8003480:	2b01      	cmp	r3, #1
 8003482:	d803      	bhi.n	800348c <RestartWakeupCounter+0x30>
 8003484:	4b20      	ldr	r3, [pc, #128]	; (8003508 <RestartWakeupCounter+0xac>)
 8003486:	781b      	ldrb	r3, [r3, #0]
 8003488:	2b01      	cmp	r3, #1
 800348a:	d002      	beq.n	8003492 <RestartWakeupCounter+0x36>
      Value -= 1;
 800348c:	88fb      	ldrh	r3, [r7, #6]
 800348e:	3b01      	subs	r3, #1
 8003490:	80fb      	strh	r3, [r7, #6]
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == RESET);
 8003492:	bf00      	nop
 8003494:	4b1d      	ldr	r3, [pc, #116]	; (800350c <RestartWakeupCounter+0xb0>)
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	68db      	ldr	r3, [r3, #12]
 800349c:	f003 0304 	and.w	r3, r3, #4
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d0f7      	beq.n	8003494 <RestartWakeupCounter+0x38>
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 80034a4:	4b19      	ldr	r3, [pc, #100]	; (800350c <RestartWakeupCounter+0xb0>)
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	68db      	ldr	r3, [r3, #12]
 80034ac:	b2da      	uxtb	r2, r3
 80034ae:	4b17      	ldr	r3, [pc, #92]	; (800350c <RestartWakeupCounter+0xb0>)
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f462 6290 	orn	r2, r2, #1152	; 0x480
 80034b8:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 80034ba:	4b15      	ldr	r3, [pc, #84]	; (8003510 <RestartWakeupCounter+0xb4>)
 80034bc:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80034c0:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 80034c2:	2003      	movs	r0, #3
 80034c4:	f002 ff44 	bl	8006350 <HAL_NVIC_ClearPendingIRQ>
    MODIFY_REG(RTC->WUTR, RTC_WUTR_WUT, Value);
 80034c8:	4b12      	ldr	r3, [pc, #72]	; (8003514 <RestartWakeupCounter+0xb8>)
 80034ca:	695b      	ldr	r3, [r3, #20]
 80034cc:	0c1b      	lsrs	r3, r3, #16
 80034ce:	041b      	lsls	r3, r3, #16
 80034d0:	88fa      	ldrh	r2, [r7, #6]
 80034d2:	4910      	ldr	r1, [pc, #64]	; (8003514 <RestartWakeupCounter+0xb8>)
 80034d4:	4313      	orrs	r3, r2
 80034d6:	614b      	str	r3, [r1, #20]
    SSRValueOnLastSetup = ReadRtcSsrValue();
 80034d8:	f7ff fd8c 	bl	8002ff4 <ReadRtcSsrValue>
 80034dc:	4602      	mov	r2, r0
 80034de:	4b09      	ldr	r3, [pc, #36]	; (8003504 <RestartWakeupCounter+0xa8>)
 80034e0:	601a      	str	r2, [r3, #0]
    __HAL_RTC_WAKEUPTIMER_ENABLE(phrtc);    /**<  Enable the Wakeup Timer */
 80034e2:	4b0a      	ldr	r3, [pc, #40]	; (800350c <RestartWakeupCounter+0xb0>)
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	689a      	ldr	r2, [r3, #8]
 80034ea:	4b08      	ldr	r3, [pc, #32]	; (800350c <RestartWakeupCounter+0xb0>)
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80034f4:	609a      	str	r2, [r3, #8]
    HW_TS_RTC_CountUpdated_AppNot();
 80034f6:	f3af 8000 	nop.w
  return ;
 80034fa:	bf00      	nop
}
 80034fc:	3708      	adds	r7, #8
 80034fe:	46bd      	mov	sp, r7
 8003500:	bd80      	pop	{r7, pc}
 8003502:	bf00      	nop
 8003504:	2000032c 	.word	0x2000032c
 8003508:	200003b4 	.word	0x200003b4
 800350c:	200003b0 	.word	0x200003b0
 8003510:	58000800 	.word	0x58000800
 8003514:	40002800 	.word	0x40002800

08003518 <RescheduleTimerList>:
 *    2) Setup the wakeuptimer
 * @param  None
 * @retval None
 */
static void RescheduleTimerList(void)
{
 8003518:	b580      	push	{r7, lr}
 800351a:	b084      	sub	sp, #16
 800351c:	af00      	add	r7, sp, #0

  /**
   * The wakeuptimer is disabled now to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   */
  if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 800351e:	4b47      	ldr	r3, [pc, #284]	; (800363c <RescheduleTimerList+0x124>)
 8003520:	689b      	ldr	r3, [r3, #8]
 8003522:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003526:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800352a:	d108      	bne.n	800353e <RescheduleTimerList+0x26>
  {
    /**
     * Wait for the flag to be back to 0 when the wakeup timer is enabled
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == SET);
 800352c:	bf00      	nop
 800352e:	4b44      	ldr	r3, [pc, #272]	; (8003640 <RescheduleTimerList+0x128>)
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	68db      	ldr	r3, [r3, #12]
 8003536:	f003 0304 	and.w	r3, r3, #4
 800353a:	2b00      	cmp	r3, #0
 800353c:	d1f7      	bne.n	800352e <RescheduleTimerList+0x16>
  }
  __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);   /**<  Disable the Wakeup Timer */
 800353e:	4b40      	ldr	r3, [pc, #256]	; (8003640 <RescheduleTimerList+0x128>)
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	689a      	ldr	r2, [r3, #8]
 8003546:	4b3e      	ldr	r3, [pc, #248]	; (8003640 <RescheduleTimerList+0x128>)
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003550:	609a      	str	r2, [r3, #8]

  localTimerID = CurrentRunningTimerID;
 8003552:	4b3c      	ldr	r3, [pc, #240]	; (8003644 <RescheduleTimerList+0x12c>)
 8003554:	781b      	ldrb	r3, [r3, #0]
 8003556:	73fb      	strb	r3, [r7, #15]

  /**
   * Calculate what will be the value to write in the wakeuptimer
   */
  timecountleft = aTimerContext[localTimerID].CountLeft;
 8003558:	7bfa      	ldrb	r2, [r7, #15]
 800355a:	493b      	ldr	r1, [pc, #236]	; (8003648 <RescheduleTimerList+0x130>)
 800355c:	4613      	mov	r3, r2
 800355e:	005b      	lsls	r3, r3, #1
 8003560:	4413      	add	r3, r2
 8003562:	00db      	lsls	r3, r3, #3
 8003564:	440b      	add	r3, r1
 8003566:	3308      	adds	r3, #8
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	60bb      	str	r3, [r7, #8]

  /**
   * Read how much has been counted
   */
  time_elapsed = ReturnTimeElapsed();
 800356c:	f7ff ff36 	bl	80033dc <ReturnTimeElapsed>
 8003570:	4603      	mov	r3, r0
 8003572:	80fb      	strh	r3, [r7, #6]

  if(timecountleft < time_elapsed )
 8003574:	88fb      	ldrh	r3, [r7, #6]
 8003576:	68ba      	ldr	r2, [r7, #8]
 8003578:	429a      	cmp	r2, r3
 800357a:	d205      	bcs.n	8003588 <RescheduleTimerList+0x70>
  {
    /**
     * There is no tick left to count
     */
    wakeup_timer_value = 0;
 800357c:	2300      	movs	r3, #0
 800357e:	81bb      	strh	r3, [r7, #12]
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8003580:	4b32      	ldr	r3, [pc, #200]	; (800364c <RescheduleTimerList+0x134>)
 8003582:	2201      	movs	r2, #1
 8003584:	701a      	strb	r2, [r3, #0]
 8003586:	e04d      	b.n	8003624 <RescheduleTimerList+0x10c>
  }
  else
  {
    if(timecountleft > (time_elapsed + MaxWakeupTimerSetup))
 8003588:	88fb      	ldrh	r3, [r7, #6]
 800358a:	4a31      	ldr	r2, [pc, #196]	; (8003650 <RescheduleTimerList+0x138>)
 800358c:	8812      	ldrh	r2, [r2, #0]
 800358e:	b292      	uxth	r2, r2
 8003590:	4413      	add	r3, r2
 8003592:	461a      	mov	r2, r3
 8003594:	68bb      	ldr	r3, [r7, #8]
 8003596:	4293      	cmp	r3, r2
 8003598:	d906      	bls.n	80035a8 <RescheduleTimerList+0x90>
    {
      /**
       * The number of tick left is greater than the Wakeuptimer maximum value
       */
      wakeup_timer_value = MaxWakeupTimerSetup;
 800359a:	4b2d      	ldr	r3, [pc, #180]	; (8003650 <RescheduleTimerList+0x138>)
 800359c:	881b      	ldrh	r3, [r3, #0]
 800359e:	81bb      	strh	r3, [r7, #12]

      WakeupTimerLimitation = WakeupTimerValue_Overpassed;
 80035a0:	4b2a      	ldr	r3, [pc, #168]	; (800364c <RescheduleTimerList+0x134>)
 80035a2:	2200      	movs	r2, #0
 80035a4:	701a      	strb	r2, [r3, #0]
 80035a6:	e03d      	b.n	8003624 <RescheduleTimerList+0x10c>
    }
    else
    {
      wakeup_timer_value = timecountleft - time_elapsed;
 80035a8:	68bb      	ldr	r3, [r7, #8]
 80035aa:	b29a      	uxth	r2, r3
 80035ac:	88fb      	ldrh	r3, [r7, #6]
 80035ae:	1ad3      	subs	r3, r2, r3
 80035b0:	81bb      	strh	r3, [r7, #12]
      WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 80035b2:	4b26      	ldr	r3, [pc, #152]	; (800364c <RescheduleTimerList+0x134>)
 80035b4:	2201      	movs	r2, #1
 80035b6:	701a      	strb	r2, [r3, #0]
  }

  /**
   * update ticks left to be counted for each timer
   */
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 80035b8:	e034      	b.n	8003624 <RescheduleTimerList+0x10c>
  {
    if (aTimerContext[localTimerID].CountLeft < time_elapsed)
 80035ba:	7bfa      	ldrb	r2, [r7, #15]
 80035bc:	4922      	ldr	r1, [pc, #136]	; (8003648 <RescheduleTimerList+0x130>)
 80035be:	4613      	mov	r3, r2
 80035c0:	005b      	lsls	r3, r3, #1
 80035c2:	4413      	add	r3, r2
 80035c4:	00db      	lsls	r3, r3, #3
 80035c6:	440b      	add	r3, r1
 80035c8:	3308      	adds	r3, #8
 80035ca:	681a      	ldr	r2, [r3, #0]
 80035cc:	88fb      	ldrh	r3, [r7, #6]
 80035ce:	429a      	cmp	r2, r3
 80035d0:	d20a      	bcs.n	80035e8 <RescheduleTimerList+0xd0>
    {
      aTimerContext[localTimerID].CountLeft = 0;
 80035d2:	7bfa      	ldrb	r2, [r7, #15]
 80035d4:	491c      	ldr	r1, [pc, #112]	; (8003648 <RescheduleTimerList+0x130>)
 80035d6:	4613      	mov	r3, r2
 80035d8:	005b      	lsls	r3, r3, #1
 80035da:	4413      	add	r3, r2
 80035dc:	00db      	lsls	r3, r3, #3
 80035de:	440b      	add	r3, r1
 80035e0:	3308      	adds	r3, #8
 80035e2:	2200      	movs	r2, #0
 80035e4:	601a      	str	r2, [r3, #0]
 80035e6:	e013      	b.n	8003610 <RescheduleTimerList+0xf8>
    }
    else
    {
      aTimerContext[localTimerID].CountLeft -= time_elapsed;
 80035e8:	7bfa      	ldrb	r2, [r7, #15]
 80035ea:	4917      	ldr	r1, [pc, #92]	; (8003648 <RescheduleTimerList+0x130>)
 80035ec:	4613      	mov	r3, r2
 80035ee:	005b      	lsls	r3, r3, #1
 80035f0:	4413      	add	r3, r2
 80035f2:	00db      	lsls	r3, r3, #3
 80035f4:	440b      	add	r3, r1
 80035f6:	3308      	adds	r3, #8
 80035f8:	6819      	ldr	r1, [r3, #0]
 80035fa:	88fb      	ldrh	r3, [r7, #6]
 80035fc:	7bfa      	ldrb	r2, [r7, #15]
 80035fe:	1ac9      	subs	r1, r1, r3
 8003600:	4811      	ldr	r0, [pc, #68]	; (8003648 <RescheduleTimerList+0x130>)
 8003602:	4613      	mov	r3, r2
 8003604:	005b      	lsls	r3, r3, #1
 8003606:	4413      	add	r3, r2
 8003608:	00db      	lsls	r3, r3, #3
 800360a:	4403      	add	r3, r0
 800360c:	3308      	adds	r3, #8
 800360e:	6019      	str	r1, [r3, #0]
    }
    localTimerID = aTimerContext[localTimerID].NextID;
 8003610:	7bfa      	ldrb	r2, [r7, #15]
 8003612:	490d      	ldr	r1, [pc, #52]	; (8003648 <RescheduleTimerList+0x130>)
 8003614:	4613      	mov	r3, r2
 8003616:	005b      	lsls	r3, r3, #1
 8003618:	4413      	add	r3, r2
 800361a:	00db      	lsls	r3, r3, #3
 800361c:	440b      	add	r3, r1
 800361e:	3315      	adds	r3, #21
 8003620:	781b      	ldrb	r3, [r3, #0]
 8003622:	73fb      	strb	r3, [r7, #15]
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8003624:	7bfb      	ldrb	r3, [r7, #15]
 8003626:	2b06      	cmp	r3, #6
 8003628:	d1c7      	bne.n	80035ba <RescheduleTimerList+0xa2>
  }

  /**
   * Write next count
   */
  RestartWakeupCounter(wakeup_timer_value);
 800362a:	89bb      	ldrh	r3, [r7, #12]
 800362c:	4618      	mov	r0, r3
 800362e:	f7ff ff15 	bl	800345c <RestartWakeupCounter>

  return ;
 8003632:	bf00      	nop
}
 8003634:	3710      	adds	r7, #16
 8003636:	46bd      	mov	sp, r7
 8003638:	bd80      	pop	{r7, pc}
 800363a:	bf00      	nop
 800363c:	40002800 	.word	0x40002800
 8003640:	200003b0 	.word	0x200003b0
 8003644:	20000328 	.word	0x20000328
 8003648:	20000298 	.word	0x20000298
 800364c:	20000330 	.word	0x20000330
 8003650:	200003b8 	.word	0x200003b8

08003654 <HW_TS_RTC_Wakeup_Handler>:
 * In order to ease maintainability, the unlock is done at the top and the lock at then end
 * in case some new implementation is coming in the future
 */

void HW_TS_RTC_Wakeup_Handler(void)
{
 8003654:	b580      	push	{r7, lr}
 8003656:	b08a      	sub	sp, #40	; 0x28
 8003658:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800365a:	f3ef 8310 	mrs	r3, PRIMASK
 800365e:	617b      	str	r3, [r7, #20]
  return(result);
 8003660:	697b      	ldr	r3, [r7, #20]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8003662:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("cpsid i" : : : "memory");
 8003664:	b672      	cpsid	i
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

/* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8003666:	4b5e      	ldr	r3, [pc, #376]	; (80037e0 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	22ca      	movs	r2, #202	; 0xca
 800366e:	625a      	str	r2, [r3, #36]	; 0x24
 8003670:	4b5b      	ldr	r3, [pc, #364]	; (80037e0 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	2253      	movs	r2, #83	; 0x53
 8003678:	625a      	str	r2, [r3, #36]	; 0x24
  /**
   * Disable the Wakeup Timer
   * This may speed up a bit the processing to wait the timer to be disabled
   * The timer is still counting 2 RTCCLK
   */
  __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);
 800367a:	4b59      	ldr	r3, [pc, #356]	; (80037e0 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	689a      	ldr	r2, [r3, #8]
 8003682:	4b57      	ldr	r3, [pc, #348]	; (80037e0 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800368c:	609a      	str	r2, [r3, #8]

  local_current_running_timer_id = CurrentRunningTimerID;
 800368e:	4b55      	ldr	r3, [pc, #340]	; (80037e4 <HW_TS_RTC_Wakeup_Handler+0x190>)
 8003690:	781b      	ldrb	r3, [r3, #0]
 8003692:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  if(aTimerContext[local_current_running_timer_id].TimerIDStatus == TimerID_Running)
 8003696:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 800369a:	4953      	ldr	r1, [pc, #332]	; (80037e8 <HW_TS_RTC_Wakeup_Handler+0x194>)
 800369c:	4613      	mov	r3, r2
 800369e:	005b      	lsls	r3, r3, #1
 80036a0:	4413      	add	r3, r2
 80036a2:	00db      	lsls	r3, r3, #3
 80036a4:	440b      	add	r3, r1
 80036a6:	330c      	adds	r3, #12
 80036a8:	781b      	ldrb	r3, [r3, #0]
 80036aa:	b2db      	uxtb	r3, r3
 80036ac:	2b02      	cmp	r3, #2
 80036ae:	d170      	bne.n	8003792 <HW_TS_RTC_Wakeup_Handler+0x13e>
  {
    ptimer_callback = aTimerContext[local_current_running_timer_id].pTimerCallBack;
 80036b0:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 80036b4:	494c      	ldr	r1, [pc, #304]	; (80037e8 <HW_TS_RTC_Wakeup_Handler+0x194>)
 80036b6:	4613      	mov	r3, r2
 80036b8:	005b      	lsls	r3, r3, #1
 80036ba:	4413      	add	r3, r2
 80036bc:	00db      	lsls	r3, r3, #3
 80036be:	440b      	add	r3, r1
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	61fb      	str	r3, [r7, #28]
    timer_process_id = aTimerContext[local_current_running_timer_id].TimerProcessID;
 80036c4:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 80036c8:	4947      	ldr	r1, [pc, #284]	; (80037e8 <HW_TS_RTC_Wakeup_Handler+0x194>)
 80036ca:	4613      	mov	r3, r2
 80036cc:	005b      	lsls	r3, r3, #1
 80036ce:	4413      	add	r3, r2
 80036d0:	00db      	lsls	r3, r3, #3
 80036d2:	440b      	add	r3, r1
 80036d4:	3310      	adds	r3, #16
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	61bb      	str	r3, [r7, #24]
     * However, due to the inaccuracy of the reading of the time elapsed, it may return there is 1 tick
     * to be left whereas the count is over
     * A more secure implementation has been done with a flag to state whereas the full count has been written
     * in the wakeuptimer or not
     */
    if(WakeupTimerLimitation != WakeupTimerValue_Overpassed)
 80036da:	4b44      	ldr	r3, [pc, #272]	; (80037ec <HW_TS_RTC_Wakeup_Handler+0x198>)
 80036dc:	781b      	ldrb	r3, [r3, #0]
 80036de:	b2db      	uxtb	r3, r3
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d04e      	beq.n	8003782 <HW_TS_RTC_Wakeup_Handler+0x12e>
    {
      if(aTimerContext[local_current_running_timer_id].TimerMode == hw_ts_Repeated)
 80036e4:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 80036e8:	493f      	ldr	r1, [pc, #252]	; (80037e8 <HW_TS_RTC_Wakeup_Handler+0x194>)
 80036ea:	4613      	mov	r3, r2
 80036ec:	005b      	lsls	r3, r3, #1
 80036ee:	4413      	add	r3, r2
 80036f0:	00db      	lsls	r3, r3, #3
 80036f2:	440b      	add	r3, r1
 80036f4:	330d      	adds	r3, #13
 80036f6:	781b      	ldrb	r3, [r3, #0]
 80036f8:	b2db      	uxtb	r3, r3
 80036fa:	2b01      	cmp	r3, #1
 80036fc:	d125      	bne.n	800374a <HW_TS_RTC_Wakeup_Handler+0xf6>
      {
        UnlinkTimer(local_current_running_timer_id, SSR_Read_Not_Requested);
 80036fe:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003702:	2101      	movs	r1, #1
 8003704:	4618      	mov	r0, r3
 8003706:	f7ff fde5 	bl	80032d4 <UnlinkTimer>
 800370a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800370c:	613b      	str	r3, [r7, #16]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800370e:	693b      	ldr	r3, [r7, #16]
 8003710:	f383 8810 	msr	PRIMASK, r3
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Start(local_current_running_timer_id, aTimerContext[local_current_running_timer_id].CounterInit);
 8003714:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8003718:	4933      	ldr	r1, [pc, #204]	; (80037e8 <HW_TS_RTC_Wakeup_Handler+0x194>)
 800371a:	4613      	mov	r3, r2
 800371c:	005b      	lsls	r3, r3, #1
 800371e:	4413      	add	r3, r2
 8003720:	00db      	lsls	r3, r3, #3
 8003722:	440b      	add	r3, r1
 8003724:	3304      	adds	r3, #4
 8003726:	681a      	ldr	r2, [r3, #0]
 8003728:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800372c:	4611      	mov	r1, r2
 800372e:	4618      	mov	r0, r3
 8003730:	f000 fa46 	bl	8003bc0 <HW_TS_Start>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8003734:	4b2a      	ldr	r3, [pc, #168]	; (80037e0 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	22ca      	movs	r2, #202	; 0xca
 800373c:	625a      	str	r2, [r3, #36]	; 0x24
 800373e:	4b28      	ldr	r3, [pc, #160]	; (80037e0 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	2253      	movs	r2, #83	; 0x53
 8003746:	625a      	str	r2, [r3, #36]	; 0x24
 8003748:	e013      	b.n	8003772 <HW_TS_RTC_Wakeup_Handler+0x11e>
 800374a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800374c:	60fb      	str	r3, [r7, #12]
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	f383 8810 	msr	PRIMASK, r3
      else
      {
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Stop(local_current_running_timer_id);
 8003754:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003758:	4618      	mov	r0, r3
 800375a:	f000 f9a7 	bl	8003aac <HW_TS_Stop>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 800375e:	4b20      	ldr	r3, [pc, #128]	; (80037e0 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	22ca      	movs	r2, #202	; 0xca
 8003766:	625a      	str	r2, [r3, #36]	; 0x24
 8003768:	4b1d      	ldr	r3, [pc, #116]	; (80037e0 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	2253      	movs	r2, #83	; 0x53
 8003770:	625a      	str	r2, [r3, #36]	; 0x24
        }

      HW_TS_RTC_Int_AppNot(timer_process_id, local_current_running_timer_id, ptimer_callback);
 8003772:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003776:	69fa      	ldr	r2, [r7, #28]
 8003778:	4619      	mov	r1, r3
 800377a:	69b8      	ldr	r0, [r7, #24]
 800377c:	f000 faa6 	bl	8003ccc <HW_TS_RTC_Int_AppNot>
 8003780:	e024      	b.n	80037cc <HW_TS_RTC_Wakeup_Handler+0x178>
    }
    else
    {
      RescheduleTimerList();
 8003782:	f7ff fec9 	bl	8003518 <RescheduleTimerList>
 8003786:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003788:	60bb      	str	r3, [r7, #8]
 800378a:	68bb      	ldr	r3, [r7, #8]
 800378c:	f383 8810 	msr	PRIMASK, r3
 8003790:	e01c      	b.n	80037cc <HW_TS_RTC_Wakeup_Handler+0x178>
    /**
     * We should never end up in this case
     * However, if due to any bug in the timer server this is the case, the mistake may not impact the user.
     * We could just clean the interrupt flag and get out from this unexpected interrupt
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == RESET);
 8003792:	bf00      	nop
 8003794:	4b12      	ldr	r3, [pc, #72]	; (80037e0 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	68db      	ldr	r3, [r3, #12]
 800379c:	f003 0304 	and.w	r3, r3, #4
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d0f7      	beq.n	8003794 <HW_TS_RTC_Wakeup_Handler+0x140>
     * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
     * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
     * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
     * due to the autoreload feature
     */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 80037a4:	4b0e      	ldr	r3, [pc, #56]	; (80037e0 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	68db      	ldr	r3, [r3, #12]
 80037ac:	b2da      	uxtb	r2, r3
 80037ae:	4b0c      	ldr	r3, [pc, #48]	; (80037e0 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	f462 6290 	orn	r2, r2, #1152	; 0x480
 80037b8:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 80037ba:	4b0d      	ldr	r3, [pc, #52]	; (80037f0 <HW_TS_RTC_Wakeup_Handler+0x19c>)
 80037bc:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80037c0:	60da      	str	r2, [r3, #12]
 80037c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037c4:	607b      	str	r3, [r7, #4]
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	f383 8810 	msr	PRIMASK, r3
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 80037cc:	4b04      	ldr	r3, [pc, #16]	; (80037e0 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	22ff      	movs	r2, #255	; 0xff
 80037d4:	625a      	str	r2, [r3, #36]	; 0x24

  return;
 80037d6:	bf00      	nop
}
 80037d8:	3728      	adds	r7, #40	; 0x28
 80037da:	46bd      	mov	sp, r7
 80037dc:	bd80      	pop	{r7, pc}
 80037de:	bf00      	nop
 80037e0:	200003b0 	.word	0x200003b0
 80037e4:	20000328 	.word	0x20000328
 80037e8:	20000298 	.word	0x20000298
 80037ec:	20000330 	.word	0x20000330
 80037f0:	58000800 	.word	0x58000800

080037f4 <HW_TS_Init>:

void HW_TS_Init(HW_TS_InitMode_t TimerInitMode, RTC_HandleTypeDef *hrtc)
{
 80037f4:	b580      	push	{r7, lr}
 80037f6:	b088      	sub	sp, #32
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	4603      	mov	r3, r0
 80037fc:	6039      	str	r1, [r7, #0]
 80037fe:	71fb      	strb	r3, [r7, #7]
  uint32_t localmaxwakeuptimersetup;

  /**
   * Get RTC handler
   */
  phrtc = hrtc;
 8003800:	4a64      	ldr	r2, [pc, #400]	; (8003994 <HW_TS_Init+0x1a0>)
 8003802:	683b      	ldr	r3, [r7, #0]
 8003804:	6013      	str	r3, [r2, #0]

 /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8003806:	4b63      	ldr	r3, [pc, #396]	; (8003994 <HW_TS_Init+0x1a0>)
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	22ca      	movs	r2, #202	; 0xca
 800380e:	625a      	str	r2, [r3, #36]	; 0x24
 8003810:	4b60      	ldr	r3, [pc, #384]	; (8003994 <HW_TS_Init+0x1a0>)
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	2253      	movs	r2, #83	; 0x53
 8003818:	625a      	str	r2, [r3, #36]	; 0x24

  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800381a:	4b5f      	ldr	r3, [pc, #380]	; (8003998 <HW_TS_Init+0x1a4>)
 800381c:	689b      	ldr	r3, [r3, #8]
 800381e:	4a5e      	ldr	r2, [pc, #376]	; (8003998 <HW_TS_Init+0x1a4>)
 8003820:	f043 0320 	orr.w	r3, r3, #32
 8003824:	6093      	str	r3, [r2, #8]

  /**
   * Readout the user config
   */
  WakeupTimerDivider = (4 - ((uint32_t)(READ_BIT(RTC->CR, RTC_CR_WUCKSEL))));
 8003826:	4b5c      	ldr	r3, [pc, #368]	; (8003998 <HW_TS_Init+0x1a4>)
 8003828:	689b      	ldr	r3, [r3, #8]
 800382a:	b2db      	uxtb	r3, r3
 800382c:	f003 0307 	and.w	r3, r3, #7
 8003830:	b2db      	uxtb	r3, r3
 8003832:	f1c3 0304 	rsb	r3, r3, #4
 8003836:	b2da      	uxtb	r2, r3
 8003838:	4b58      	ldr	r3, [pc, #352]	; (800399c <HW_TS_Init+0x1a8>)
 800383a:	701a      	strb	r2, [r3, #0]

  AsynchPrescalerUserConfig = (uint8_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_A) >> (uint32_t)POSITION_VAL(RTC_PRER_PREDIV_A)) + 1;
 800383c:	4b56      	ldr	r3, [pc, #344]	; (8003998 <HW_TS_Init+0x1a4>)
 800383e:	691b      	ldr	r3, [r3, #16]
 8003840:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003844:	f44f 02fe 	mov.w	r2, #8323072	; 0x7f0000
 8003848:	613a      	str	r2, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800384a:	693a      	ldr	r2, [r7, #16]
 800384c:	fa92 f2a2 	rbit	r2, r2
 8003850:	60fa      	str	r2, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003852:	68fa      	ldr	r2, [r7, #12]
 8003854:	617a      	str	r2, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003856:	697a      	ldr	r2, [r7, #20]
 8003858:	2a00      	cmp	r2, #0
 800385a:	d101      	bne.n	8003860 <HW_TS_Init+0x6c>
  {
    return 32U;
 800385c:	2220      	movs	r2, #32
 800385e:	e003      	b.n	8003868 <HW_TS_Init+0x74>
  }
  return __builtin_clz(value);
 8003860:	697a      	ldr	r2, [r7, #20]
 8003862:	fab2 f282 	clz	r2, r2
 8003866:	b2d2      	uxtb	r2, r2
 8003868:	40d3      	lsrs	r3, r2
 800386a:	b2db      	uxtb	r3, r3
 800386c:	3301      	adds	r3, #1
 800386e:	b2da      	uxtb	r2, r3
 8003870:	4b4b      	ldr	r3, [pc, #300]	; (80039a0 <HW_TS_Init+0x1ac>)
 8003872:	701a      	strb	r2, [r3, #0]

  SynchPrescalerUserConfig = (uint16_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_S)) + 1;
 8003874:	4b48      	ldr	r3, [pc, #288]	; (8003998 <HW_TS_Init+0x1a4>)
 8003876:	691b      	ldr	r3, [r3, #16]
 8003878:	b29b      	uxth	r3, r3
 800387a:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800387e:	b29b      	uxth	r3, r3
 8003880:	3301      	adds	r3, #1
 8003882:	b29a      	uxth	r2, r3
 8003884:	4b47      	ldr	r3, [pc, #284]	; (80039a4 <HW_TS_Init+0x1b0>)
 8003886:	801a      	strh	r2, [r3, #0]

  /**
   *  Margin is taken to avoid wrong calculation when the wrap around is there and some
   *  application interrupts may have delayed the reading
   */
  localmaxwakeuptimersetup = ((((SynchPrescalerUserConfig - 1)*AsynchPrescalerUserConfig) - CFG_HW_TS_RTC_HANDLER_MAX_DELAY) >> WakeupTimerDivider);
 8003888:	4b46      	ldr	r3, [pc, #280]	; (80039a4 <HW_TS_Init+0x1b0>)
 800388a:	881b      	ldrh	r3, [r3, #0]
 800388c:	3b01      	subs	r3, #1
 800388e:	4a44      	ldr	r2, [pc, #272]	; (80039a0 <HW_TS_Init+0x1ac>)
 8003890:	7812      	ldrb	r2, [r2, #0]
 8003892:	fb02 f303 	mul.w	r3, r2, r3
 8003896:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 800389a:	4a40      	ldr	r2, [pc, #256]	; (800399c <HW_TS_Init+0x1a8>)
 800389c:	7812      	ldrb	r2, [r2, #0]
 800389e:	40d3      	lsrs	r3, r2
 80038a0:	61bb      	str	r3, [r7, #24]

  if(localmaxwakeuptimersetup >= 0xFFFF)
 80038a2:	69bb      	ldr	r3, [r7, #24]
 80038a4:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80038a8:	4293      	cmp	r3, r2
 80038aa:	d904      	bls.n	80038b6 <HW_TS_Init+0xc2>
  {
    MaxWakeupTimerSetup = 0xFFFF;
 80038ac:	4b3e      	ldr	r3, [pc, #248]	; (80039a8 <HW_TS_Init+0x1b4>)
 80038ae:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80038b2:	801a      	strh	r2, [r3, #0]
 80038b4:	e003      	b.n	80038be <HW_TS_Init+0xca>
  }
  else
  {
    MaxWakeupTimerSetup = (uint16_t)localmaxwakeuptimersetup;
 80038b6:	69bb      	ldr	r3, [r7, #24]
 80038b8:	b29a      	uxth	r2, r3
 80038ba:	4b3b      	ldr	r3, [pc, #236]	; (80039a8 <HW_TS_Init+0x1b4>)
 80038bc:	801a      	strh	r2, [r3, #0]
  }

  /**
   * Configure EXTI module
   */
  LL_EXTI_EnableRisingTrig_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 80038be:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80038c2:	f7ff fb85 	bl	8002fd0 <LL_EXTI_EnableRisingTrig_0_31>
  LL_EXTI_EnableIT_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 80038c6:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80038ca:	f7ff fb6d 	bl	8002fa8 <LL_EXTI_EnableIT_0_31>

  if(TimerInitMode == hw_ts_InitMode_Full)
 80038ce:	79fb      	ldrb	r3, [r7, #7]
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d143      	bne.n	800395c <HW_TS_Init+0x168>
  {
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 80038d4:	4b35      	ldr	r3, [pc, #212]	; (80039ac <HW_TS_Init+0x1b8>)
 80038d6:	2201      	movs	r2, #1
 80038d8:	701a      	strb	r2, [r3, #0]
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 80038da:	4b35      	ldr	r3, [pc, #212]	; (80039b0 <HW_TS_Init+0x1bc>)
 80038dc:	f04f 32ff 	mov.w	r2, #4294967295
 80038e0:	601a      	str	r2, [r3, #0]

    /**
     * Initialize the timer server
     */
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 80038e2:	2300      	movs	r3, #0
 80038e4:	77fb      	strb	r3, [r7, #31]
 80038e6:	e00c      	b.n	8003902 <HW_TS_Init+0x10e>
    {
      aTimerContext[loop].TimerIDStatus = TimerID_Free;
 80038e8:	7ffa      	ldrb	r2, [r7, #31]
 80038ea:	4932      	ldr	r1, [pc, #200]	; (80039b4 <HW_TS_Init+0x1c0>)
 80038ec:	4613      	mov	r3, r2
 80038ee:	005b      	lsls	r3, r3, #1
 80038f0:	4413      	add	r3, r2
 80038f2:	00db      	lsls	r3, r3, #3
 80038f4:	440b      	add	r3, r1
 80038f6:	330c      	adds	r3, #12
 80038f8:	2200      	movs	r2, #0
 80038fa:	701a      	strb	r2, [r3, #0]
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 80038fc:	7ffb      	ldrb	r3, [r7, #31]
 80038fe:	3301      	adds	r3, #1
 8003900:	77fb      	strb	r3, [r7, #31]
 8003902:	7ffb      	ldrb	r3, [r7, #31]
 8003904:	2b05      	cmp	r3, #5
 8003906:	d9ef      	bls.n	80038e8 <HW_TS_Init+0xf4>
    }

    CurrentRunningTimerID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;   /**<  Set ID to non valid value */
 8003908:	4b2b      	ldr	r3, [pc, #172]	; (80039b8 <HW_TS_Init+0x1c4>)
 800390a:	2206      	movs	r2, #6
 800390c:	701a      	strb	r2, [r3, #0]

    __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);                       /**<  Disable the Wakeup Timer */
 800390e:	4b21      	ldr	r3, [pc, #132]	; (8003994 <HW_TS_Init+0x1a0>)
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	689a      	ldr	r2, [r3, #8]
 8003916:	4b1f      	ldr	r3, [pc, #124]	; (8003994 <HW_TS_Init+0x1a0>)
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003920:	609a      	str	r2, [r3, #8]
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);     /**<  Clear flag in RTC module */
 8003922:	4b1c      	ldr	r3, [pc, #112]	; (8003994 <HW_TS_Init+0x1a0>)
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	68db      	ldr	r3, [r3, #12]
 800392a:	b2da      	uxtb	r2, r3
 800392c:	4b19      	ldr	r3, [pc, #100]	; (8003994 <HW_TS_Init+0x1a0>)
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8003936:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module  */
 8003938:	4b20      	ldr	r3, [pc, #128]	; (80039bc <HW_TS_Init+0x1c8>)
 800393a:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800393e:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);       /**<  Clear pending bit in NVIC  */
 8003940:	2003      	movs	r0, #3
 8003942:	f002 fd05 	bl	8006350 <HAL_NVIC_ClearPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE_IT(phrtc, RTC_IT_WUT);         /**<  Enable interrupt in RTC module  */
 8003946:	4b13      	ldr	r3, [pc, #76]	; (8003994 <HW_TS_Init+0x1a0>)
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	689a      	ldr	r2, [r3, #8]
 800394e:	4b11      	ldr	r3, [pc, #68]	; (8003994 <HW_TS_Init+0x1a0>)
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003958:	609a      	str	r2, [r3, #8]
 800395a:	e00a      	b.n	8003972 <HW_TS_Init+0x17e>
  }
  else
  {
    if(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTF) != RESET)
 800395c:	4b0d      	ldr	r3, [pc, #52]	; (8003994 <HW_TS_Init+0x1a0>)
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	68db      	ldr	r3, [r3, #12]
 8003964:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003968:	2b00      	cmp	r3, #0
 800396a:	d002      	beq.n	8003972 <HW_TS_Init+0x17e>
    {
      /**
       * Simulate that the Timer expired
       */
      HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 800396c:	2003      	movs	r0, #3
 800396e:	f002 fce1 	bl	8006334 <HAL_NVIC_SetPendingIRQ>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 8003972:	4b08      	ldr	r3, [pc, #32]	; (8003994 <HW_TS_Init+0x1a0>)
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	22ff      	movs	r2, #255	; 0xff
 800397a:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_SetPriority(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_PREEMPTPRIO, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_SUBPRIO);   /**<  Set NVIC priority */
 800397c:	2200      	movs	r2, #0
 800397e:	2106      	movs	r1, #6
 8003980:	2003      	movs	r0, #3
 8003982:	f002 fca1 	bl	80062c8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8003986:	2003      	movs	r0, #3
 8003988:	f002 fcb8 	bl	80062fc <HAL_NVIC_EnableIRQ>

  return;
 800398c:	bf00      	nop
}
 800398e:	3720      	adds	r7, #32
 8003990:	46bd      	mov	sp, r7
 8003992:	bd80      	pop	{r7, pc}
 8003994:	200003b0 	.word	0x200003b0
 8003998:	40002800 	.word	0x40002800
 800399c:	200003b4 	.word	0x200003b4
 80039a0:	200003b5 	.word	0x200003b5
 80039a4:	200003b6 	.word	0x200003b6
 80039a8:	200003b8 	.word	0x200003b8
 80039ac:	20000330 	.word	0x20000330
 80039b0:	2000032c 	.word	0x2000032c
 80039b4:	20000298 	.word	0x20000298
 80039b8:	20000328 	.word	0x20000328
 80039bc:	58000800 	.word	0x58000800

080039c0 <HW_TS_Create>:

HW_TS_ReturnStatus_t HW_TS_Create(uint32_t TimerProcessID, uint8_t *pTimerId, HW_TS_Mode_t TimerMode, HW_TS_pTimerCb_t pftimeout_handler)
{
 80039c0:	b480      	push	{r7}
 80039c2:	b08b      	sub	sp, #44	; 0x2c
 80039c4:	af00      	add	r7, sp, #0
 80039c6:	60f8      	str	r0, [r7, #12]
 80039c8:	60b9      	str	r1, [r7, #8]
 80039ca:	603b      	str	r3, [r7, #0]
 80039cc:	4613      	mov	r3, r2
 80039ce:	71fb      	strb	r3, [r7, #7]
  HW_TS_ReturnStatus_t localreturnstatus;
  uint8_t loop = 0;
 80039d0:	2300      	movs	r3, #0
 80039d2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80039d6:	f3ef 8310 	mrs	r3, PRIMASK
 80039da:	61fb      	str	r3, [r7, #28]
  return(result);
 80039dc:	69fb      	ldr	r3, [r7, #28]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80039de:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 80039e0:	b672      	cpsid	i
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  while((loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[loop].TimerIDStatus != TimerID_Free))
 80039e2:	e004      	b.n	80039ee <HW_TS_Create+0x2e>
  {
    loop++;
 80039e4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80039e8:	3301      	adds	r3, #1
 80039ea:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  while((loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[loop].TimerIDStatus != TimerID_Free))
 80039ee:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80039f2:	2b05      	cmp	r3, #5
 80039f4:	d80c      	bhi.n	8003a10 <HW_TS_Create+0x50>
 80039f6:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80039fa:	492b      	ldr	r1, [pc, #172]	; (8003aa8 <HW_TS_Create+0xe8>)
 80039fc:	4613      	mov	r3, r2
 80039fe:	005b      	lsls	r3, r3, #1
 8003a00:	4413      	add	r3, r2
 8003a02:	00db      	lsls	r3, r3, #3
 8003a04:	440b      	add	r3, r1
 8003a06:	330c      	adds	r3, #12
 8003a08:	781b      	ldrb	r3, [r3, #0]
 8003a0a:	b2db      	uxtb	r3, r3
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d1e9      	bne.n	80039e4 <HW_TS_Create+0x24>
  }

  if(loop != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8003a10:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8003a14:	2b06      	cmp	r3, #6
 8003a16:	d037      	beq.n	8003a88 <HW_TS_Create+0xc8>
  {
    aTimerContext[loop].TimerIDStatus = TimerID_Created;
 8003a18:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8003a1c:	4922      	ldr	r1, [pc, #136]	; (8003aa8 <HW_TS_Create+0xe8>)
 8003a1e:	4613      	mov	r3, r2
 8003a20:	005b      	lsls	r3, r3, #1
 8003a22:	4413      	add	r3, r2
 8003a24:	00db      	lsls	r3, r3, #3
 8003a26:	440b      	add	r3, r1
 8003a28:	330c      	adds	r3, #12
 8003a2a:	2201      	movs	r2, #1
 8003a2c:	701a      	strb	r2, [r3, #0]
 8003a2e:	6a3b      	ldr	r3, [r7, #32]
 8003a30:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a32:	69bb      	ldr	r3, [r7, #24]
 8003a34:	f383 8810 	msr	PRIMASK, r3

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

    aTimerContext[loop].TimerProcessID = TimerProcessID;
 8003a38:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8003a3c:	491a      	ldr	r1, [pc, #104]	; (8003aa8 <HW_TS_Create+0xe8>)
 8003a3e:	4613      	mov	r3, r2
 8003a40:	005b      	lsls	r3, r3, #1
 8003a42:	4413      	add	r3, r2
 8003a44:	00db      	lsls	r3, r3, #3
 8003a46:	440b      	add	r3, r1
 8003a48:	3310      	adds	r3, #16
 8003a4a:	68fa      	ldr	r2, [r7, #12]
 8003a4c:	601a      	str	r2, [r3, #0]
    aTimerContext[loop].TimerMode = TimerMode;
 8003a4e:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8003a52:	4915      	ldr	r1, [pc, #84]	; (8003aa8 <HW_TS_Create+0xe8>)
 8003a54:	4613      	mov	r3, r2
 8003a56:	005b      	lsls	r3, r3, #1
 8003a58:	4413      	add	r3, r2
 8003a5a:	00db      	lsls	r3, r3, #3
 8003a5c:	440b      	add	r3, r1
 8003a5e:	330d      	adds	r3, #13
 8003a60:	79fa      	ldrb	r2, [r7, #7]
 8003a62:	701a      	strb	r2, [r3, #0]
    aTimerContext[loop].pTimerCallBack = pftimeout_handler;
 8003a64:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8003a68:	490f      	ldr	r1, [pc, #60]	; (8003aa8 <HW_TS_Create+0xe8>)
 8003a6a:	4613      	mov	r3, r2
 8003a6c:	005b      	lsls	r3, r3, #1
 8003a6e:	4413      	add	r3, r2
 8003a70:	00db      	lsls	r3, r3, #3
 8003a72:	440b      	add	r3, r1
 8003a74:	683a      	ldr	r2, [r7, #0]
 8003a76:	601a      	str	r2, [r3, #0]
    *pTimerId = loop;
 8003a78:	68bb      	ldr	r3, [r7, #8]
 8003a7a:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8003a7e:	701a      	strb	r2, [r3, #0]

    localreturnstatus = hw_ts_Successful;
 8003a80:	2300      	movs	r3, #0
 8003a82:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8003a86:	e007      	b.n	8003a98 <HW_TS_Create+0xd8>
 8003a88:	6a3b      	ldr	r3, [r7, #32]
 8003a8a:	617b      	str	r3, [r7, #20]
 8003a8c:	697b      	ldr	r3, [r7, #20]
 8003a8e:	f383 8810 	msr	PRIMASK, r3
  {
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

    localreturnstatus = hw_ts_Failed;
 8003a92:	2301      	movs	r3, #1
 8003a94:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  return(localreturnstatus);
 8003a98:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8003a9c:	4618      	mov	r0, r3
 8003a9e:	372c      	adds	r7, #44	; 0x2c
 8003aa0:	46bd      	mov	sp, r7
 8003aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa6:	4770      	bx	lr
 8003aa8:	20000298 	.word	0x20000298

08003aac <HW_TS_Stop>:

  return;
}

void HW_TS_Stop(uint8_t timer_id)
{
 8003aac:	b580      	push	{r7, lr}
 8003aae:	b086      	sub	sp, #24
 8003ab0:	af00      	add	r7, sp, #0
 8003ab2:	4603      	mov	r3, r0
 8003ab4:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003ab6:	f3ef 8310 	mrs	r3, PRIMASK
 8003aba:	60fb      	str	r3, [r7, #12]
  return(result);
 8003abc:	68fb      	ldr	r3, [r7, #12]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8003abe:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8003ac0:	b672      	cpsid	i
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 8003ac2:	2003      	movs	r0, #3
 8003ac4:	f002 fc28 	bl	8006318 <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8003ac8:	4b37      	ldr	r3, [pc, #220]	; (8003ba8 <HW_TS_Stop+0xfc>)
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	22ca      	movs	r2, #202	; 0xca
 8003ad0:	625a      	str	r2, [r3, #36]	; 0x24
 8003ad2:	4b35      	ldr	r3, [pc, #212]	; (8003ba8 <HW_TS_Stop+0xfc>)
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	2253      	movs	r2, #83	; 0x53
 8003ada:	625a      	str	r2, [r3, #36]	; 0x24

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 8003adc:	79fa      	ldrb	r2, [r7, #7]
 8003ade:	4933      	ldr	r1, [pc, #204]	; (8003bac <HW_TS_Stop+0x100>)
 8003ae0:	4613      	mov	r3, r2
 8003ae2:	005b      	lsls	r3, r3, #1
 8003ae4:	4413      	add	r3, r2
 8003ae6:	00db      	lsls	r3, r3, #3
 8003ae8:	440b      	add	r3, r1
 8003aea:	330c      	adds	r3, #12
 8003aec:	781b      	ldrb	r3, [r3, #0]
 8003aee:	b2db      	uxtb	r3, r3
 8003af0:	2b02      	cmp	r3, #2
 8003af2:	d148      	bne.n	8003b86 <HW_TS_Stop+0xda>
  {
    UnlinkTimer(timer_id, SSR_Read_Requested);
 8003af4:	79fb      	ldrb	r3, [r7, #7]
 8003af6:	2100      	movs	r1, #0
 8003af8:	4618      	mov	r0, r3
 8003afa:	f7ff fbeb 	bl	80032d4 <UnlinkTimer>
    localcurrentrunningtimerid = CurrentRunningTimerID;
 8003afe:	4b2c      	ldr	r3, [pc, #176]	; (8003bb0 <HW_TS_Stop+0x104>)
 8003b00:	781b      	ldrb	r3, [r3, #0]
 8003b02:	74fb      	strb	r3, [r7, #19]

    if(localcurrentrunningtimerid == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8003b04:	7cfb      	ldrb	r3, [r7, #19]
 8003b06:	2b06      	cmp	r3, #6
 8003b08:	d135      	bne.n	8003b76 <HW_TS_Stop+0xca>
       */

      /**
       * Disable the timer
       */
      if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 8003b0a:	4b2a      	ldr	r3, [pc, #168]	; (8003bb4 <HW_TS_Stop+0x108>)
 8003b0c:	689b      	ldr	r3, [r3, #8]
 8003b0e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b12:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b16:	d108      	bne.n	8003b2a <HW_TS_Stop+0x7e>
      {
        /**
         * Wait for the flag to be back to 0 when the wakeup timer is enabled
         */
        while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == SET);
 8003b18:	bf00      	nop
 8003b1a:	4b23      	ldr	r3, [pc, #140]	; (8003ba8 <HW_TS_Stop+0xfc>)
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	68db      	ldr	r3, [r3, #12]
 8003b22:	f003 0304 	and.w	r3, r3, #4
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d1f7      	bne.n	8003b1a <HW_TS_Stop+0x6e>
      }
      __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);   /**<  Disable the Wakeup Timer */
 8003b2a:	4b1f      	ldr	r3, [pc, #124]	; (8003ba8 <HW_TS_Stop+0xfc>)
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	689a      	ldr	r2, [r3, #8]
 8003b32:	4b1d      	ldr	r3, [pc, #116]	; (8003ba8 <HW_TS_Stop+0xfc>)
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b3c:	609a      	str	r2, [r3, #8]

      while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == RESET);
 8003b3e:	bf00      	nop
 8003b40:	4b19      	ldr	r3, [pc, #100]	; (8003ba8 <HW_TS_Stop+0xfc>)
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	68db      	ldr	r3, [r3, #12]
 8003b48:	f003 0304 	and.w	r3, r3, #4
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d0f7      	beq.n	8003b40 <HW_TS_Stop+0x94>
       * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
       * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
       * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
       * due to the autoreload feature
       */
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8003b50:	4b15      	ldr	r3, [pc, #84]	; (8003ba8 <HW_TS_Stop+0xfc>)
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	68db      	ldr	r3, [r3, #12]
 8003b58:	b2da      	uxtb	r2, r3
 8003b5a:	4b13      	ldr	r3, [pc, #76]	; (8003ba8 <HW_TS_Stop+0xfc>)
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8003b64:	60da      	str	r2, [r3, #12]
      __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8003b66:	4b14      	ldr	r3, [pc, #80]	; (8003bb8 <HW_TS_Stop+0x10c>)
 8003b68:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8003b6c:	60da      	str	r2, [r3, #12]
      HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 8003b6e:	2003      	movs	r0, #3
 8003b70:	f002 fbee 	bl	8006350 <HAL_NVIC_ClearPendingIRQ>
 8003b74:	e007      	b.n	8003b86 <HW_TS_Stop+0xda>
    }
    else if(PreviousRunningTimerID != localcurrentrunningtimerid)
 8003b76:	4b11      	ldr	r3, [pc, #68]	; (8003bbc <HW_TS_Stop+0x110>)
 8003b78:	781b      	ldrb	r3, [r3, #0]
 8003b7a:	b2db      	uxtb	r3, r3
 8003b7c:	7cfa      	ldrb	r2, [r7, #19]
 8003b7e:	429a      	cmp	r2, r3
 8003b80:	d001      	beq.n	8003b86 <HW_TS_Stop+0xda>
    {
      RescheduleTimerList();
 8003b82:	f7ff fcc9 	bl	8003518 <RescheduleTimerList>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 8003b86:	4b08      	ldr	r3, [pc, #32]	; (8003ba8 <HW_TS_Stop+0xfc>)
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	22ff      	movs	r2, #255	; 0xff
 8003b8e:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8003b90:	2003      	movs	r0, #3
 8003b92:	f002 fbb3 	bl	80062fc <HAL_NVIC_EnableIRQ>
 8003b96:	697b      	ldr	r3, [r7, #20]
 8003b98:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b9a:	68bb      	ldr	r3, [r7, #8]
 8003b9c:	f383 8810 	msr	PRIMASK, r3

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 8003ba0:	bf00      	nop
}
 8003ba2:	3718      	adds	r7, #24
 8003ba4:	46bd      	mov	sp, r7
 8003ba6:	bd80      	pop	{r7, pc}
 8003ba8:	200003b0 	.word	0x200003b0
 8003bac:	20000298 	.word	0x20000298
 8003bb0:	20000328 	.word	0x20000328
 8003bb4:	40002800 	.word	0x40002800
 8003bb8:	58000800 	.word	0x58000800
 8003bbc:	20000329 	.word	0x20000329

08003bc0 <HW_TS_Start>:

void HW_TS_Start(uint8_t timer_id, uint32_t timeout_ticks)
{
 8003bc0:	b580      	push	{r7, lr}
 8003bc2:	b086      	sub	sp, #24
 8003bc4:	af00      	add	r7, sp, #0
 8003bc6:	4603      	mov	r3, r0
 8003bc8:	6039      	str	r1, [r7, #0]
 8003bca:	71fb      	strb	r3, [r7, #7]

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 8003bcc:	79fa      	ldrb	r2, [r7, #7]
 8003bce:	493b      	ldr	r1, [pc, #236]	; (8003cbc <HW_TS_Start+0xfc>)
 8003bd0:	4613      	mov	r3, r2
 8003bd2:	005b      	lsls	r3, r3, #1
 8003bd4:	4413      	add	r3, r2
 8003bd6:	00db      	lsls	r3, r3, #3
 8003bd8:	440b      	add	r3, r1
 8003bda:	330c      	adds	r3, #12
 8003bdc:	781b      	ldrb	r3, [r3, #0]
 8003bde:	b2db      	uxtb	r3, r3
 8003be0:	2b02      	cmp	r3, #2
 8003be2:	d103      	bne.n	8003bec <HW_TS_Start+0x2c>
  {
    HW_TS_Stop( timer_id );
 8003be4:	79fb      	ldrb	r3, [r7, #7]
 8003be6:	4618      	mov	r0, r3
 8003be8:	f7ff ff60 	bl	8003aac <HW_TS_Stop>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003bec:	f3ef 8310 	mrs	r3, PRIMASK
 8003bf0:	60fb      	str	r3, [r7, #12]
  return(result);
 8003bf2:	68fb      	ldr	r3, [r7, #12]
  }

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8003bf4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8003bf6:	b672      	cpsid	i
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 8003bf8:	2003      	movs	r0, #3
 8003bfa:	f002 fb8d 	bl	8006318 <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8003bfe:	4b30      	ldr	r3, [pc, #192]	; (8003cc0 <HW_TS_Start+0x100>)
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	22ca      	movs	r2, #202	; 0xca
 8003c06:	625a      	str	r2, [r3, #36]	; 0x24
 8003c08:	4b2d      	ldr	r3, [pc, #180]	; (8003cc0 <HW_TS_Start+0x100>)
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	2253      	movs	r2, #83	; 0x53
 8003c10:	625a      	str	r2, [r3, #36]	; 0x24

  aTimerContext[timer_id].TimerIDStatus = TimerID_Running;
 8003c12:	79fa      	ldrb	r2, [r7, #7]
 8003c14:	4929      	ldr	r1, [pc, #164]	; (8003cbc <HW_TS_Start+0xfc>)
 8003c16:	4613      	mov	r3, r2
 8003c18:	005b      	lsls	r3, r3, #1
 8003c1a:	4413      	add	r3, r2
 8003c1c:	00db      	lsls	r3, r3, #3
 8003c1e:	440b      	add	r3, r1
 8003c20:	330c      	adds	r3, #12
 8003c22:	2202      	movs	r2, #2
 8003c24:	701a      	strb	r2, [r3, #0]

  aTimerContext[timer_id].CountLeft = timeout_ticks;
 8003c26:	79fa      	ldrb	r2, [r7, #7]
 8003c28:	4924      	ldr	r1, [pc, #144]	; (8003cbc <HW_TS_Start+0xfc>)
 8003c2a:	4613      	mov	r3, r2
 8003c2c:	005b      	lsls	r3, r3, #1
 8003c2e:	4413      	add	r3, r2
 8003c30:	00db      	lsls	r3, r3, #3
 8003c32:	440b      	add	r3, r1
 8003c34:	3308      	adds	r3, #8
 8003c36:	683a      	ldr	r2, [r7, #0]
 8003c38:	601a      	str	r2, [r3, #0]
  aTimerContext[timer_id].CounterInit = timeout_ticks;
 8003c3a:	79fa      	ldrb	r2, [r7, #7]
 8003c3c:	491f      	ldr	r1, [pc, #124]	; (8003cbc <HW_TS_Start+0xfc>)
 8003c3e:	4613      	mov	r3, r2
 8003c40:	005b      	lsls	r3, r3, #1
 8003c42:	4413      	add	r3, r2
 8003c44:	00db      	lsls	r3, r3, #3
 8003c46:	440b      	add	r3, r1
 8003c48:	3304      	adds	r3, #4
 8003c4a:	683a      	ldr	r2, [r7, #0]
 8003c4c:	601a      	str	r2, [r3, #0]

  time_elapsed =  linkTimer(timer_id);
 8003c4e:	79fb      	ldrb	r3, [r7, #7]
 8003c50:	4618      	mov	r0, r3
 8003c52:	f7ff fa95 	bl	8003180 <linkTimer>
 8003c56:	4603      	mov	r3, r0
 8003c58:	827b      	strh	r3, [r7, #18]

  localcurrentrunningtimerid = CurrentRunningTimerID;
 8003c5a:	4b1a      	ldr	r3, [pc, #104]	; (8003cc4 <HW_TS_Start+0x104>)
 8003c5c:	781b      	ldrb	r3, [r3, #0]
 8003c5e:	747b      	strb	r3, [r7, #17]

  if(PreviousRunningTimerID != localcurrentrunningtimerid)
 8003c60:	4b19      	ldr	r3, [pc, #100]	; (8003cc8 <HW_TS_Start+0x108>)
 8003c62:	781b      	ldrb	r3, [r3, #0]
 8003c64:	b2db      	uxtb	r3, r3
 8003c66:	7c7a      	ldrb	r2, [r7, #17]
 8003c68:	429a      	cmp	r2, r3
 8003c6a:	d002      	beq.n	8003c72 <HW_TS_Start+0xb2>
  {
    RescheduleTimerList();
 8003c6c:	f7ff fc54 	bl	8003518 <RescheduleTimerList>
 8003c70:	e013      	b.n	8003c9a <HW_TS_Start+0xda>
  }
  else
  {
    aTimerContext[timer_id].CountLeft -= time_elapsed;
 8003c72:	79fa      	ldrb	r2, [r7, #7]
 8003c74:	4911      	ldr	r1, [pc, #68]	; (8003cbc <HW_TS_Start+0xfc>)
 8003c76:	4613      	mov	r3, r2
 8003c78:	005b      	lsls	r3, r3, #1
 8003c7a:	4413      	add	r3, r2
 8003c7c:	00db      	lsls	r3, r3, #3
 8003c7e:	440b      	add	r3, r1
 8003c80:	3308      	adds	r3, #8
 8003c82:	6819      	ldr	r1, [r3, #0]
 8003c84:	8a7b      	ldrh	r3, [r7, #18]
 8003c86:	79fa      	ldrb	r2, [r7, #7]
 8003c88:	1ac9      	subs	r1, r1, r3
 8003c8a:	480c      	ldr	r0, [pc, #48]	; (8003cbc <HW_TS_Start+0xfc>)
 8003c8c:	4613      	mov	r3, r2
 8003c8e:	005b      	lsls	r3, r3, #1
 8003c90:	4413      	add	r3, r2
 8003c92:	00db      	lsls	r3, r3, #3
 8003c94:	4403      	add	r3, r0
 8003c96:	3308      	adds	r3, #8
 8003c98:	6019      	str	r1, [r3, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 8003c9a:	4b09      	ldr	r3, [pc, #36]	; (8003cc0 <HW_TS_Start+0x100>)
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	22ff      	movs	r2, #255	; 0xff
 8003ca2:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8003ca4:	2003      	movs	r0, #3
 8003ca6:	f002 fb29 	bl	80062fc <HAL_NVIC_EnableIRQ>
 8003caa:	697b      	ldr	r3, [r7, #20]
 8003cac:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003cae:	68bb      	ldr	r3, [r7, #8]
 8003cb0:	f383 8810 	msr	PRIMASK, r3

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 8003cb4:	bf00      	nop
}
 8003cb6:	3718      	adds	r7, #24
 8003cb8:	46bd      	mov	sp, r7
 8003cba:	bd80      	pop	{r7, pc}
 8003cbc:	20000298 	.word	0x20000298
 8003cc0:	200003b0 	.word	0x200003b0
 8003cc4:	20000328 	.word	0x20000328
 8003cc8:	20000329 	.word	0x20000329

08003ccc <HW_TS_RTC_Int_AppNot>:

  return (return_value);
}

__weak void HW_TS_RTC_Int_AppNot(uint32_t TimerProcessID, uint8_t TimerID, HW_TS_pTimerCb_t pTimerCallBack)
{
 8003ccc:	b580      	push	{r7, lr}
 8003cce:	b084      	sub	sp, #16
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	60f8      	str	r0, [r7, #12]
 8003cd4:	460b      	mov	r3, r1
 8003cd6:	607a      	str	r2, [r7, #4]
 8003cd8:	72fb      	strb	r3, [r7, #11]
  pTimerCallBack();
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	4798      	blx	r3

  return;
 8003cde:	bf00      	nop
}
 8003ce0:	3710      	adds	r7, #16
 8003ce2:	46bd      	mov	sp, r7
 8003ce4:	bd80      	pop	{r7, pc}
	...

08003ce8 <HW_UART_Transmit_DMA>:

    return hw_status;
}

hw_status_t HW_UART_Transmit_DMA(hw_uart_id_t hw_uart_id, uint8_t *p_data, uint16_t size, void (*cb)(void))
{
 8003ce8:	b580      	push	{r7, lr}
 8003cea:	b086      	sub	sp, #24
 8003cec:	af00      	add	r7, sp, #0
 8003cee:	60b9      	str	r1, [r7, #8]
 8003cf0:	607b      	str	r3, [r7, #4]
 8003cf2:	4603      	mov	r3, r0
 8003cf4:	73fb      	strb	r3, [r7, #15]
 8003cf6:	4613      	mov	r3, r2
 8003cf8:	81bb      	strh	r3, [r7, #12]
    HAL_StatusTypeDef hal_status = HAL_OK;
 8003cfa:	2300      	movs	r3, #0
 8003cfc:	75fb      	strb	r3, [r7, #23]
    hw_status_t hw_status = hw_uart_ok;
 8003cfe:	2300      	movs	r3, #0
 8003d00:	75bb      	strb	r3, [r7, #22]

    switch (hw_uart_id)
 8003d02:	7bfb      	ldrb	r3, [r7, #15]
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d000      	beq.n	8003d0a <HW_UART_Transmit_DMA+0x22>
            hal_status = HAL_UART_Transmit_DMA(&hlpuart1, p_data, size);
            break;
#endif

        default:
            break;
 8003d08:	e00e      	b.n	8003d28 <HW_UART_Transmit_DMA+0x40>
            HW_huart1TxCb = cb;
 8003d0a:	4a17      	ldr	r2, [pc, #92]	; (8003d68 <HW_UART_Transmit_DMA+0x80>)
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	6013      	str	r3, [r2, #0]
            huart1.Instance = USART1;
 8003d10:	4b16      	ldr	r3, [pc, #88]	; (8003d6c <HW_UART_Transmit_DMA+0x84>)
 8003d12:	4a17      	ldr	r2, [pc, #92]	; (8003d70 <HW_UART_Transmit_DMA+0x88>)
 8003d14:	601a      	str	r2, [r3, #0]
            hal_status = HAL_UART_Transmit_DMA(&huart1, p_data, size);
 8003d16:	89bb      	ldrh	r3, [r7, #12]
 8003d18:	461a      	mov	r2, r3
 8003d1a:	68b9      	ldr	r1, [r7, #8]
 8003d1c:	4813      	ldr	r0, [pc, #76]	; (8003d6c <HW_UART_Transmit_DMA+0x84>)
 8003d1e:	f007 fd17 	bl	800b750 <HAL_UART_Transmit_DMA>
 8003d22:	4603      	mov	r3, r0
 8003d24:	75fb      	strb	r3, [r7, #23]
            break;
 8003d26:	bf00      	nop
    }

    switch (hal_status)
 8003d28:	7dfb      	ldrb	r3, [r7, #23]
 8003d2a:	2b03      	cmp	r3, #3
 8003d2c:	d816      	bhi.n	8003d5c <HW_UART_Transmit_DMA+0x74>
 8003d2e:	a201      	add	r2, pc, #4	; (adr r2, 8003d34 <HW_UART_Transmit_DMA+0x4c>)
 8003d30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d34:	08003d45 	.word	0x08003d45
 8003d38:	08003d4b 	.word	0x08003d4b
 8003d3c:	08003d51 	.word	0x08003d51
 8003d40:	08003d57 	.word	0x08003d57
    {
        case HAL_OK:
            hw_status = hw_uart_ok;
 8003d44:	2300      	movs	r3, #0
 8003d46:	75bb      	strb	r3, [r7, #22]
            break;
 8003d48:	e009      	b.n	8003d5e <HW_UART_Transmit_DMA+0x76>

        case HAL_ERROR:
            hw_status = hw_uart_error;
 8003d4a:	2301      	movs	r3, #1
 8003d4c:	75bb      	strb	r3, [r7, #22]
            break;
 8003d4e:	e006      	b.n	8003d5e <HW_UART_Transmit_DMA+0x76>

        case HAL_BUSY:
            hw_status = hw_uart_busy;
 8003d50:	2302      	movs	r3, #2
 8003d52:	75bb      	strb	r3, [r7, #22]
            break;
 8003d54:	e003      	b.n	8003d5e <HW_UART_Transmit_DMA+0x76>

        case HAL_TIMEOUT:
            hw_status = hw_uart_to;
 8003d56:	2303      	movs	r3, #3
 8003d58:	75bb      	strb	r3, [r7, #22]
            break;
 8003d5a:	e000      	b.n	8003d5e <HW_UART_Transmit_DMA+0x76>

        default:
            break;
 8003d5c:	bf00      	nop
    }

    return hw_status;
 8003d5e:	7dbb      	ldrb	r3, [r7, #22]
}
 8003d60:	4618      	mov	r0, r3
 8003d62:	3718      	adds	r7, #24
 8003d64:	46bd      	mov	sp, r7
 8003d66:	bd80      	pop	{r7, pc}
 8003d68:	20005080 	.word	0x20005080
 8003d6c:	200051cc 	.word	0x200051cc
 8003d70:	40013800 	.word	0x40013800

08003d74 <HAL_UART_TxCpltCallback>:

    return;
}

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003d74:	b580      	push	{r7, lr}
 8003d76:	b082      	sub	sp, #8
 8003d78:	af00      	add	r7, sp, #0
 8003d7a:	6078      	str	r0, [r7, #4]
    switch ((uint32_t)huart->Instance)
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	461a      	mov	r2, r3
 8003d82:	4b08      	ldr	r3, [pc, #32]	; (8003da4 <HAL_UART_TxCpltCallback+0x30>)
 8003d84:	429a      	cmp	r2, r3
 8003d86:	d000      	beq.n	8003d8a <HAL_UART_TxCpltCallback+0x16>
            }
            break;
#endif

        default:
            break;
 8003d88:	e007      	b.n	8003d9a <HAL_UART_TxCpltCallback+0x26>
            if(HW_huart1TxCb)
 8003d8a:	4b07      	ldr	r3, [pc, #28]	; (8003da8 <HAL_UART_TxCpltCallback+0x34>)
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d002      	beq.n	8003d98 <HAL_UART_TxCpltCallback+0x24>
                HW_huart1TxCb();
 8003d92:	4b05      	ldr	r3, [pc, #20]	; (8003da8 <HAL_UART_TxCpltCallback+0x34>)
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	4798      	blx	r3
            break;
 8003d98:	bf00      	nop
    }

    return;
 8003d9a:	bf00      	nop
}
 8003d9c:	3708      	adds	r7, #8
 8003d9e:	46bd      	mov	sp, r7
 8003da0:	bd80      	pop	{r7, pc}
 8003da2:	bf00      	nop
 8003da4:	40013800 	.word	0x40013800
 8003da8:	20005080 	.word	0x20005080

08003dac <_angle_correction>:





int _angle_correction(int measured_angle){
 8003dac:	b480      	push	{r7}
 8003dae:	b089      	sub	sp, #36	; 0x24
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	6078      	str	r0, [r7, #4]
  //given a measured angle, get back a warped angle interpolated from measured corrections
  int i=0;
 8003db4:	2300      	movs	r3, #0
 8003db6:	61fb      	str	r3, [r7, #28]
  while(measured_angle > MAP_ANGLE_MEASURED[i+1]) i++;
 8003db8:	e002      	b.n	8003dc0 <_angle_correction+0x14>
 8003dba:	69fb      	ldr	r3, [r7, #28]
 8003dbc:	3301      	adds	r3, #1
 8003dbe:	61fb      	str	r3, [r7, #28]
 8003dc0:	69fb      	ldr	r3, [r7, #28]
 8003dc2:	3301      	adds	r3, #1
 8003dc4:	4a1f      	ldr	r2, [pc, #124]	; (8003e44 <_angle_correction+0x98>)
 8003dc6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003dca:	687a      	ldr	r2, [r7, #4]
 8003dcc:	429a      	cmp	r2, r3
 8003dce:	dcf4      	bgt.n	8003dba <_angle_correction+0xe>

  int low_m = MAP_ANGLE_MEASURED[i];
 8003dd0:	4a1c      	ldr	r2, [pc, #112]	; (8003e44 <_angle_correction+0x98>)
 8003dd2:	69fb      	ldr	r3, [r7, #28]
 8003dd4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003dd8:	61bb      	str	r3, [r7, #24]
  int high_m = MAP_ANGLE_MEASURED[i+1];
 8003dda:	69fb      	ldr	r3, [r7, #28]
 8003ddc:	3301      	adds	r3, #1
 8003dde:	4a19      	ldr	r2, [pc, #100]	; (8003e44 <_angle_correction+0x98>)
 8003de0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003de4:	617b      	str	r3, [r7, #20]
  int low_r = MAP_ANGLE_REAL[i];
 8003de6:	4a18      	ldr	r2, [pc, #96]	; (8003e48 <_angle_correction+0x9c>)
 8003de8:	69fb      	ldr	r3, [r7, #28]
 8003dea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003dee:	613b      	str	r3, [r7, #16]
  int high_r = MAP_ANGLE_REAL[i+1];
 8003df0:	69fb      	ldr	r3, [r7, #28]
 8003df2:	3301      	adds	r3, #1
 8003df4:	4a14      	ldr	r2, [pc, #80]	; (8003e48 <_angle_correction+0x9c>)
 8003df6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003dfa:	60fb      	str	r3, [r7, #12]

  int scaled = (int)((high_r-low_r)*(measured_angle-low_m)/(float)(high_m-low_m));
 8003dfc:	68fa      	ldr	r2, [r7, #12]
 8003dfe:	693b      	ldr	r3, [r7, #16]
 8003e00:	1ad3      	subs	r3, r2, r3
 8003e02:	6879      	ldr	r1, [r7, #4]
 8003e04:	69ba      	ldr	r2, [r7, #24]
 8003e06:	1a8a      	subs	r2, r1, r2
 8003e08:	fb02 f303 	mul.w	r3, r2, r3
 8003e0c:	ee07 3a90 	vmov	s15, r3
 8003e10:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8003e14:	697a      	ldr	r2, [r7, #20]
 8003e16:	69bb      	ldr	r3, [r7, #24]
 8003e18:	1ad3      	subs	r3, r2, r3
 8003e1a:	ee07 3a90 	vmov	s15, r3
 8003e1e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003e22:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003e26:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003e2a:	ee17 3a90 	vmov	r3, s15
 8003e2e:	60bb      	str	r3, [r7, #8]
  return (low_r + scaled);
 8003e30:	693a      	ldr	r2, [r7, #16]
 8003e32:	68bb      	ldr	r3, [r7, #8]
 8003e34:	4413      	add	r3, r2
}
 8003e36:	4618      	mov	r0, r3
 8003e38:	3724      	adds	r7, #36	; 0x24
 8003e3a:	46bd      	mov	sp, r7
 8003e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e40:	4770      	bx	lr
 8003e42:	bf00      	nop
 8003e44:	08017324 	.word	0x08017324
 8003e48:	08017300 	.word	0x08017300

08003e4c <_get_pad_angle>:


int _get_pad_angle(int p1, int p2){
 8003e4c:	b590      	push	{r4, r7, lr}
 8003e4e:	b083      	sub	sp, #12
 8003e50:	af00      	add	r7, sp, #0
 8003e52:	6078      	str	r0, [r7, #4]
 8003e54:	6039      	str	r1, [r7, #0]
    //return angle from 0 to 120 degrees between two pads given their two values
    if (p1 == 0) return 120;
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d101      	bne.n	8003e60 <_get_pad_angle+0x14>
 8003e5c:	2378      	movs	r3, #120	; 0x78
 8003e5e:	e02c      	b.n	8003eba <_get_pad_angle+0x6e>
    if (p2 == 0) return 0;
 8003e60:	683b      	ldr	r3, [r7, #0]
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d101      	bne.n	8003e6a <_get_pad_angle+0x1e>
 8003e66:	2300      	movs	r3, #0
 8003e68:	e027      	b.n	8003eba <_get_pad_angle+0x6e>
    return round(((float)(p2)/(float)(p1+p2))*120.0);
 8003e6a:	683b      	ldr	r3, [r7, #0]
 8003e6c:	ee07 3a90 	vmov	s15, r3
 8003e70:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003e74:	687a      	ldr	r2, [r7, #4]
 8003e76:	683b      	ldr	r3, [r7, #0]
 8003e78:	4413      	add	r3, r2
 8003e7a:	ee07 3a90 	vmov	s15, r3
 8003e7e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003e82:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8003e86:	ee16 0a90 	vmov	r0, s13
 8003e8a:	f7fc fb35 	bl	80004f8 <__aeabi_f2d>
 8003e8e:	f04f 0200 	mov.w	r2, #0
 8003e92:	4b0c      	ldr	r3, [pc, #48]	; (8003ec4 <_get_pad_angle+0x78>)
 8003e94:	f7fc fb88 	bl	80005a8 <__aeabi_dmul>
 8003e98:	4603      	mov	r3, r0
 8003e9a:	460c      	mov	r4, r1
 8003e9c:	ec44 3b17 	vmov	d7, r3, r4
 8003ea0:	eeb0 0a47 	vmov.f32	s0, s14
 8003ea4:	eef0 0a67 	vmov.f32	s1, s15
 8003ea8:	f011 fdec 	bl	8015a84 <round>
 8003eac:	ec54 3b10 	vmov	r3, r4, d0
 8003eb0:	4618      	mov	r0, r3
 8003eb2:	4621      	mov	r1, r4
 8003eb4:	f7fc fe28 	bl	8000b08 <__aeabi_d2iz>
 8003eb8:	4603      	mov	r3, r0
}
 8003eba:	4618      	mov	r0, r3
 8003ebc:	370c      	adds	r7, #12
 8003ebe:	46bd      	mov	sp, r7
 8003ec0:	bd90      	pop	{r4, r7, pc}
 8003ec2:	bf00      	nop
 8003ec4:	405e0000 	.word	0x405e0000

08003ec8 <_get_angle>:


int _get_angle(int* c) {
 8003ec8:	b580      	push	{r7, lr}
 8003eca:	b08a      	sub	sp, #40	; 0x28
 8003ecc:	af00      	add	r7, sp, #0
 8003ece:	6078      	str	r0, [r7, #4]
  //c[0] is proximity
  //60 min on clock, so 6 deg resolution
  //3 pads.  take top 2 values, map linearly to 120 degree slice.
  int angle = ANGLE_OFFSET;
 8003ed0:	2300      	movs	r3, #0
 8003ed2:	627b      	str	r3, [r7, #36]	; 0x24
  int warped_angle;

  if (c[1] > c[3] && c[2] > c[3]) { //first third, between 1 and 2
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	3304      	adds	r3, #4
 8003ed8:	681a      	ldr	r2, [r3, #0]
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	330c      	adds	r3, #12
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	429a      	cmp	r2, r3
 8003ee2:	dd20      	ble.n	8003f26 <_get_angle+0x5e>
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	3308      	adds	r3, #8
 8003ee8:	681a      	ldr	r2, [r3, #0]
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	330c      	adds	r3, #12
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	429a      	cmp	r2, r3
 8003ef2:	dd18      	ble.n	8003f26 <_get_angle+0x5e>
    int pos1 = c[1]-c[3];
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	3304      	adds	r3, #4
 8003ef8:	681a      	ldr	r2, [r3, #0]
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	330c      	adds	r3, #12
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	1ad3      	subs	r3, r2, r3
 8003f02:	623b      	str	r3, [r7, #32]
    int pos2 = c[2]-c[3];
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	3308      	adds	r3, #8
 8003f08:	681a      	ldr	r2, [r3, #0]
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	330c      	adds	r3, #12
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	1ad3      	subs	r3, r2, r3
 8003f12:	61fb      	str	r3, [r7, #28]
    angle += _get_pad_angle(pos1, pos2);
 8003f14:	69f9      	ldr	r1, [r7, #28]
 8003f16:	6a38      	ldr	r0, [r7, #32]
 8003f18:	f7ff ff98 	bl	8003e4c <_get_pad_angle>
 8003f1c:	4602      	mov	r2, r0
 8003f1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f20:	4413      	add	r3, r2
 8003f22:	627b      	str	r3, [r7, #36]	; 0x24
  if (c[1] > c[3] && c[2] > c[3]) { //first third, between 1 and 2
 8003f24:	e042      	b.n	8003fac <_get_angle+0xe4>
  }

  else if (c[2] > c[1] && c[3] > c[1]) { //second third, between 2 and 3
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	3308      	adds	r3, #8
 8003f2a:	681a      	ldr	r2, [r3, #0]
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	3304      	adds	r3, #4
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	429a      	cmp	r2, r3
 8003f34:	dd21      	ble.n	8003f7a <_get_angle+0xb2>
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	330c      	adds	r3, #12
 8003f3a:	681a      	ldr	r2, [r3, #0]
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	3304      	adds	r3, #4
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	429a      	cmp	r2, r3
 8003f44:	dd19      	ble.n	8003f7a <_get_angle+0xb2>
    int pos1 = c[2]-c[1];
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	3308      	adds	r3, #8
 8003f4a:	681a      	ldr	r2, [r3, #0]
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	3304      	adds	r3, #4
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	1ad3      	subs	r3, r2, r3
 8003f54:	61bb      	str	r3, [r7, #24]
    int pos2 = c[3]-c[1];
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	330c      	adds	r3, #12
 8003f5a:	681a      	ldr	r2, [r3, #0]
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	3304      	adds	r3, #4
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	1ad3      	subs	r3, r2, r3
 8003f64:	617b      	str	r3, [r7, #20]
    angle += _get_pad_angle(pos1, pos2) + 120;
 8003f66:	6979      	ldr	r1, [r7, #20]
 8003f68:	69b8      	ldr	r0, [r7, #24]
 8003f6a:	f7ff ff6f 	bl	8003e4c <_get_pad_angle>
 8003f6e:	4603      	mov	r3, r0
 8003f70:	3378      	adds	r3, #120	; 0x78
 8003f72:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f74:	4413      	add	r3, r2
 8003f76:	627b      	str	r3, [r7, #36]	; 0x24
  else if (c[2] > c[1] && c[3] > c[1]) { //second third, between 2 and 3
 8003f78:	e018      	b.n	8003fac <_get_angle+0xe4>
  }

  else { //third third, between 3 and 1
    int pos1 = c[3]-c[2];
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	330c      	adds	r3, #12
 8003f7e:	681a      	ldr	r2, [r3, #0]
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	3308      	adds	r3, #8
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	1ad3      	subs	r3, r2, r3
 8003f88:	613b      	str	r3, [r7, #16]
    int pos2 = c[1]-c[2];
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	3304      	adds	r3, #4
 8003f8e:	681a      	ldr	r2, [r3, #0]
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	3308      	adds	r3, #8
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	1ad3      	subs	r3, r2, r3
 8003f98:	60fb      	str	r3, [r7, #12]
    angle += _get_pad_angle(pos1, pos2) + 240;
 8003f9a:	68f9      	ldr	r1, [r7, #12]
 8003f9c:	6938      	ldr	r0, [r7, #16]
 8003f9e:	f7ff ff55 	bl	8003e4c <_get_pad_angle>
 8003fa2:	4603      	mov	r3, r0
 8003fa4:	33f0      	adds	r3, #240	; 0xf0
 8003fa6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003fa8:	4413      	add	r3, r2
 8003faa:	627b      	str	r3, [r7, #36]	; 0x24
  }

  angle %= 360;
 8003fac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fae:	4a0b      	ldr	r2, [pc, #44]	; (8003fdc <_get_angle+0x114>)
 8003fb0:	fb82 1203 	smull	r1, r2, r2, r3
 8003fb4:	441a      	add	r2, r3
 8003fb6:	1211      	asrs	r1, r2, #8
 8003fb8:	17da      	asrs	r2, r3, #31
 8003fba:	1a8a      	subs	r2, r1, r2
 8003fbc:	f44f 71b4 	mov.w	r1, #360	; 0x168
 8003fc0:	fb01 f202 	mul.w	r2, r1, r2
 8003fc4:	1a9b      	subs	r3, r3, r2
 8003fc6:	627b      	str	r3, [r7, #36]	; 0x24
  warped_angle = _angle_correction(angle);
 8003fc8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003fca:	f7ff feef 	bl	8003dac <_angle_correction>
 8003fce:	60b8      	str	r0, [r7, #8]

  return warped_angle;
 8003fd0:	68bb      	ldr	r3, [r7, #8]
}
 8003fd2:	4618      	mov	r0, r3
 8003fd4:	3728      	adds	r7, #40	; 0x28
 8003fd6:	46bd      	mov	sp, r7
 8003fd8:	bd80      	pop	{r7, pc}
 8003fda:	bf00      	nop
 8003fdc:	b60b60b7 	.word	0xb60b60b7

08003fe0 <_get_min>:


int _get_min(int* c) {
 8003fe0:	b580      	push	{r7, lr}
 8003fe2:	b084      	sub	sp, #16
 8003fe4:	af00      	add	r7, sp, #0
 8003fe6:	6078      	str	r0, [r7, #4]
	int angle = _get_angle(c);
 8003fe8:	6878      	ldr	r0, [r7, #4]
 8003fea:	f7ff ff6d 	bl	8003ec8 <_get_angle>
 8003fee:	60f8      	str	r0, [r7, #12]
	return angle/6;
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	4a04      	ldr	r2, [pc, #16]	; (8004004 <_get_min+0x24>)
 8003ff4:	fb82 1203 	smull	r1, r2, r2, r3
 8003ff8:	17db      	asrs	r3, r3, #31
 8003ffa:	1ad3      	subs	r3, r2, r3
}
 8003ffc:	4618      	mov	r0, r3
 8003ffe:	3710      	adds	r7, #16
 8004000:	46bd      	mov	sp, r7
 8004002:	bd80      	pop	{r7, pc}
 8004004:	2aaaaaab 	.word	0x2aaaaaab

08004008 <_get_min_if_pressed>:


int _get_min_if_pressed(int* c){
 8004008:	b580      	push	{r7, lr}
 800400a:	b082      	sub	sp, #8
 800400c:	af00      	add	r7, sp, #0
 800400e:	6078      	str	r0, [r7, #4]
	//return -1 if not pressed, otherwise return a logical minute value
	if (c[0] <= IQS_TOUCH_THRESH) return -1;
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	2b0a      	cmp	r3, #10
 8004016:	dc02      	bgt.n	800401e <_get_min_if_pressed+0x16>
 8004018:	f04f 33ff 	mov.w	r3, #4294967295
 800401c:	e003      	b.n	8004026 <_get_min_if_pressed+0x1e>
	else return _get_min(c);
 800401e:	6878      	ldr	r0, [r7, #4]
 8004020:	f7ff ffde 	bl	8003fe0 <_get_min>
 8004024:	4603      	mov	r3, r0
}
 8004026:	4618      	mov	r0, r3
 8004028:	3708      	adds	r7, #8
 800402a:	46bd      	mov	sp, r7
 800402c:	bd80      	pop	{r7, pc}

0800402e <iqs263_poll_raw>:


void iqs263_poll_raw(int* coords){
 800402e:	b580      	push	{r7, lr}
 8004030:	b086      	sub	sp, #24
 8004032:	af00      	add	r7, sp, #0
 8004034:	6078      	str	r0, [r7, #4]

  //uint16_t coords[4];

  uint8_t coords_raw[8];

  iqs263_read(0x06, coords_raw, 8);
 8004036:	f107 030c 	add.w	r3, r7, #12
 800403a:	2208      	movs	r2, #8
 800403c:	4619      	mov	r1, r3
 800403e:	2006      	movs	r0, #6
 8004040:	f000 f888 	bl	8004154 <iqs263_read>

  for (int i=0; i<4; i++){
 8004044:	2300      	movs	r3, #0
 8004046:	617b      	str	r3, [r7, #20]
 8004048:	e019      	b.n	800407e <iqs263_poll_raw+0x50>
	  coords[i] = (coords_raw[2*i+1] << 8) | (coords_raw[2*i] & 0xFF);
 800404a:	697b      	ldr	r3, [r7, #20]
 800404c:	005b      	lsls	r3, r3, #1
 800404e:	3301      	adds	r3, #1
 8004050:	f107 0218 	add.w	r2, r7, #24
 8004054:	4413      	add	r3, r2
 8004056:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 800405a:	021a      	lsls	r2, r3, #8
 800405c:	697b      	ldr	r3, [r7, #20]
 800405e:	005b      	lsls	r3, r3, #1
 8004060:	f107 0118 	add.w	r1, r7, #24
 8004064:	440b      	add	r3, r1
 8004066:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 800406a:	4618      	mov	r0, r3
 800406c:	697b      	ldr	r3, [r7, #20]
 800406e:	009b      	lsls	r3, r3, #2
 8004070:	6879      	ldr	r1, [r7, #4]
 8004072:	440b      	add	r3, r1
 8004074:	4302      	orrs	r2, r0
 8004076:	601a      	str	r2, [r3, #0]
  for (int i=0; i<4; i++){
 8004078:	697b      	ldr	r3, [r7, #20]
 800407a:	3301      	adds	r3, #1
 800407c:	617b      	str	r3, [r7, #20]
 800407e:	697b      	ldr	r3, [r7, #20]
 8004080:	2b03      	cmp	r3, #3
 8004082:	dde2      	ble.n	800404a <iqs263_poll_raw+0x1c>
  }
  //c[0] is proximity

}
 8004084:	bf00      	nop
 8004086:	3718      	adds	r7, #24
 8004088:	46bd      	mov	sp, r7
 800408a:	bd80      	pop	{r7, pc}

0800408c <setup_iqs263>:


HAL_StatusTypeDef setup_iqs263() {
 800408c:	b580      	push	{r7, lr}
 800408e:	b086      	sub	sp, #24
 8004090:	af04      	add	r7, sp, #16

	uint8_t c;
	HAL_StatusTypeDef resp = HAL_ERROR;
 8004092:	2301      	movs	r3, #1
 8004094:	71fb      	strb	r3, [r7, #7]
	uint8_t out_data[5] = {0x00, 0x00, 0x00, 0x00, 0x00};
 8004096:	463b      	mov	r3, r7
 8004098:	2200      	movs	r2, #0
 800409a:	601a      	str	r2, [r3, #0]
 800409c:	711a      	strb	r2, [r3, #4]

	//check product num
	while (resp == HAL_ERROR){
 800409e:	e00e      	b.n	80040be <setup_iqs263+0x32>
		resp = HAL_I2C_Mem_Read(&IQS_I2C_PORT, IQS_ADDR, 0x00, sizeof(uint8_t), &c, sizeof(uint8_t), HAL_MAX_DELAY);
 80040a0:	f04f 33ff 	mov.w	r3, #4294967295
 80040a4:	9302      	str	r3, [sp, #8]
 80040a6:	2301      	movs	r3, #1
 80040a8:	9301      	str	r3, [sp, #4]
 80040aa:	1dbb      	adds	r3, r7, #6
 80040ac:	9300      	str	r3, [sp, #0]
 80040ae:	2301      	movs	r3, #1
 80040b0:	2200      	movs	r2, #0
 80040b2:	2188      	movs	r1, #136	; 0x88
 80040b4:	4826      	ldr	r0, [pc, #152]	; (8004150 <setup_iqs263+0xc4>)
 80040b6:	f002 ffd3 	bl	8007060 <HAL_I2C_Mem_Read>
 80040ba:	4603      	mov	r3, r0
 80040bc:	71fb      	strb	r3, [r7, #7]
	while (resp == HAL_ERROR){
 80040be:	79fb      	ldrb	r3, [r7, #7]
 80040c0:	2b01      	cmp	r3, #1
 80040c2:	d0ed      	beq.n	80040a0 <setup_iqs263+0x14>
	}

	if (c != 0x3C) {
 80040c4:	79bb      	ldrb	r3, [r7, #6]
 80040c6:	2b3c      	cmp	r3, #60	; 0x3c
 80040c8:	d001      	beq.n	80040ce <setup_iqs263+0x42>
	  //ERROR - should read product code 0x3C
	  return HAL_ERROR;
 80040ca:	2301      	movs	r3, #1
 80040cc:	e03c      	b.n	8004148 <setup_iqs263+0xbc>
	}

	HAL_Delay(100);
 80040ce:	2064      	movs	r0, #100	; 0x64
 80040d0:	f001 fb07 	bl	80056e2 <HAL_Delay>


	//now write and read 0x0E to address 0x0D
	out_data[0] = 0x0E;
 80040d4:	230e      	movs	r3, #14
 80040d6:	703b      	strb	r3, [r7, #0]

	resp = HAL_ERROR;
 80040d8:	2301      	movs	r3, #1
 80040da:	71fb      	strb	r3, [r7, #7]
	while (resp == HAL_ERROR){
 80040dc:	e00e      	b.n	80040fc <setup_iqs263+0x70>
		  resp = HAL_I2C_Mem_Write(&IQS_I2C_PORT, IQS_ADDR, 0x0D, 1, out_data, 1, HAL_MAX_DELAY);
 80040de:	f04f 33ff 	mov.w	r3, #4294967295
 80040e2:	9302      	str	r3, [sp, #8]
 80040e4:	2301      	movs	r3, #1
 80040e6:	9301      	str	r3, [sp, #4]
 80040e8:	463b      	mov	r3, r7
 80040ea:	9300      	str	r3, [sp, #0]
 80040ec:	2301      	movs	r3, #1
 80040ee:	220d      	movs	r2, #13
 80040f0:	2188      	movs	r1, #136	; 0x88
 80040f2:	4817      	ldr	r0, [pc, #92]	; (8004150 <setup_iqs263+0xc4>)
 80040f4:	f002 fea0 	bl	8006e38 <HAL_I2C_Mem_Write>
 80040f8:	4603      	mov	r3, r0
 80040fa:	71fb      	strb	r3, [r7, #7]
	while (resp == HAL_ERROR){
 80040fc:	79fb      	ldrb	r3, [r7, #7]
 80040fe:	2b01      	cmp	r3, #1
 8004100:	d0ed      	beq.n	80040de <setup_iqs263+0x52>
	}
	HAL_Delay(100);
 8004102:	2064      	movs	r0, #100	; 0x64
 8004104:	f001 faed 	bl	80056e2 <HAL_Delay>
	}

	HAL_Delay(50);
	*/

	out_data[0]=0x00;
 8004108:	2300      	movs	r3, #0
 800410a:	703b      	strb	r3, [r7, #0]
	//time average filter coef in bits 5:4 (00 is slowest, 11 is fastest), counts filtering for noise in bits 1:0 (00 is no filter, 11 is slowest).
	out_data[1]=0b00001001;
 800410c:	2309      	movs	r3, #9
 800410e:	707b      	strb	r3, [r7, #1]
	//lets go into Low Power mode if we have a prolonged state.	Wake on  movement on CH3
	out_data[2]=0x00;
 8004110:	2300      	movs	r3, #0
 8004112:	70bb      	strb	r3, [r7, #2]
	//out_data[2]=0b10001000;
	//lets disable turbo and only sample at fixed period 40Hz (given 2MHz clock)
	//out_data[3]=0x00;
	out_data[3]=0b00000110;
 8004114:	2306      	movs	r3, #6
 8004116:	70fb      	strb	r3, [r7, #3]
	out_data[4]=0x00;
 8004118:	2300      	movs	r3, #0
 800411a:	713b      	strb	r3, [r7, #4]

	resp = HAL_ERROR;
 800411c:	2301      	movs	r3, #1
 800411e:	71fb      	strb	r3, [r7, #7]
	while (resp == HAL_ERROR){
 8004120:	e00e      	b.n	8004140 <setup_iqs263+0xb4>
		  resp = HAL_I2C_Mem_Write(&IQS_I2C_PORT, IQS_ADDR, 0x09, 1, out_data, 5, HAL_MAX_DELAY);
 8004122:	f04f 33ff 	mov.w	r3, #4294967295
 8004126:	9302      	str	r3, [sp, #8]
 8004128:	2305      	movs	r3, #5
 800412a:	9301      	str	r3, [sp, #4]
 800412c:	463b      	mov	r3, r7
 800412e:	9300      	str	r3, [sp, #0]
 8004130:	2301      	movs	r3, #1
 8004132:	2209      	movs	r2, #9
 8004134:	2188      	movs	r1, #136	; 0x88
 8004136:	4806      	ldr	r0, [pc, #24]	; (8004150 <setup_iqs263+0xc4>)
 8004138:	f002 fe7e 	bl	8006e38 <HAL_I2C_Mem_Write>
 800413c:	4603      	mov	r3, r0
 800413e:	71fb      	strb	r3, [r7, #7]
	while (resp == HAL_ERROR){
 8004140:	79fb      	ldrb	r3, [r7, #7]
 8004142:	2b01      	cmp	r3, #1
 8004144:	d0ed      	beq.n	8004122 <setup_iqs263+0x96>
	while (resp == HAL_ERROR){
	    resp = HAL_I2C_Mem_Read(&IQS_I2C_PORT, IQS_ADDR, 0x09, 1, readback, 5, HAL_MAX_DELAY);
	}
	*/

    return HAL_OK;
 8004146:	2300      	movs	r3, #0
}
 8004148:	4618      	mov	r0, r3
 800414a:	3708      	adds	r7, #8
 800414c:	46bd      	mov	sp, r7
 800414e:	bd80      	pop	{r7, pc}
 8004150:	20005090 	.word	0x20005090

08004154 <iqs263_read>:

  return HAL_OK;

}

HAL_StatusTypeDef iqs263_read(uint8_t addr, uint8_t* buf, uint8_t size) {
 8004154:	b580      	push	{r7, lr}
 8004156:	b088      	sub	sp, #32
 8004158:	af04      	add	r7, sp, #16
 800415a:	4603      	mov	r3, r0
 800415c:	6039      	str	r1, [r7, #0]
 800415e:	71fb      	strb	r3, [r7, #7]
 8004160:	4613      	mov	r3, r2
 8004162:	71bb      	strb	r3, [r7, #6]


  const uint16_t max_tries = 300;
 8004164:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8004168:	817b      	strh	r3, [r7, #10]
  uint16_t current_tries = 0;
 800416a:	2300      	movs	r3, #0
 800416c:	81fb      	strh	r3, [r7, #14]

  HAL_StatusTypeDef resp = HAL_ERROR;
 800416e:	2301      	movs	r3, #1
 8004170:	737b      	strb	r3, [r7, #13]

  while (resp == HAL_ERROR && current_tries < max_tries){
 8004172:	e014      	b.n	800419e <iqs263_read+0x4a>
    resp = HAL_I2C_Mem_Read(&IQS_I2C_PORT, IQS_ADDR, addr, 1, buf, size, HAL_MAX_DELAY);
 8004174:	79fb      	ldrb	r3, [r7, #7]
 8004176:	b299      	uxth	r1, r3
 8004178:	79bb      	ldrb	r3, [r7, #6]
 800417a:	b29b      	uxth	r3, r3
 800417c:	f04f 32ff 	mov.w	r2, #4294967295
 8004180:	9202      	str	r2, [sp, #8]
 8004182:	9301      	str	r3, [sp, #4]
 8004184:	683b      	ldr	r3, [r7, #0]
 8004186:	9300      	str	r3, [sp, #0]
 8004188:	2301      	movs	r3, #1
 800418a:	460a      	mov	r2, r1
 800418c:	2188      	movs	r1, #136	; 0x88
 800418e:	480d      	ldr	r0, [pc, #52]	; (80041c4 <iqs263_read+0x70>)
 8004190:	f002 ff66 	bl	8007060 <HAL_I2C_Mem_Read>
 8004194:	4603      	mov	r3, r0
 8004196:	737b      	strb	r3, [r7, #13]
    current_tries++;
 8004198:	89fb      	ldrh	r3, [r7, #14]
 800419a:	3301      	adds	r3, #1
 800419c:	81fb      	strh	r3, [r7, #14]
  while (resp == HAL_ERROR && current_tries < max_tries){
 800419e:	7b7b      	ldrb	r3, [r7, #13]
 80041a0:	2b01      	cmp	r3, #1
 80041a2:	d103      	bne.n	80041ac <iqs263_read+0x58>
 80041a4:	89fa      	ldrh	r2, [r7, #14]
 80041a6:	897b      	ldrh	r3, [r7, #10]
 80041a8:	429a      	cmp	r2, r3
 80041aa:	d3e3      	bcc.n	8004174 <iqs263_read+0x20>
  }

  if (current_tries >= max_tries) {
 80041ac:	89fa      	ldrh	r2, [r7, #14]
 80041ae:	897b      	ldrh	r3, [r7, #10]
 80041b0:	429a      	cmp	r2, r3
 80041b2:	d301      	bcc.n	80041b8 <iqs263_read+0x64>
	  return HAL_ERROR;
 80041b4:	2301      	movs	r3, #1
 80041b6:	e000      	b.n	80041ba <iqs263_read+0x66>
  }

  return HAL_OK;
 80041b8:	2300      	movs	r3, #0

}
 80041ba:	4618      	mov	r0, r3
 80041bc:	3710      	adds	r7, #16
 80041be:	46bd      	mov	sp, r7
 80041c0:	bd80      	pop	{r7, pc}
 80041c2:	bf00      	nop
 80041c4:	20005090 	.word	0x20005090

080041c8 <iqs263_get_min_if_pressed>:
	iqs263_poll_raw(coords);
	return _get_min(coords);
}


int iqs263_get_min_if_pressed(){
 80041c8:	b580      	push	{r7, lr}
 80041ca:	b084      	sub	sp, #16
 80041cc:	af00      	add	r7, sp, #0
	int* coords[4] = {0x0000, 0x0000, 0x0000, 0x0000};
 80041ce:	463b      	mov	r3, r7
 80041d0:	2200      	movs	r2, #0
 80041d2:	601a      	str	r2, [r3, #0]
 80041d4:	605a      	str	r2, [r3, #4]
 80041d6:	609a      	str	r2, [r3, #8]
 80041d8:	60da      	str	r2, [r3, #12]
	iqs263_poll_raw(coords);
 80041da:	463b      	mov	r3, r7
 80041dc:	4618      	mov	r0, r3
 80041de:	f7ff ff26 	bl	800402e <iqs263_poll_raw>
	return _get_min_if_pressed(coords);
 80041e2:	463b      	mov	r3, r7
 80041e4:	4618      	mov	r0, r3
 80041e6:	f7ff ff0f 	bl	8004008 <_get_min_if_pressed>
 80041ea:	4603      	mov	r3, r0
}
 80041ec:	4618      	mov	r0, r3
 80041ee:	3710      	adds	r7, #16
 80041f0:	46bd      	mov	sp, r7
 80041f2:	bd80      	pop	{r7, pc}

080041f4 <LL_EXTI_DisableIT_0_31>:
{
 80041f4:	b480      	push	{r7}
 80041f6:	b083      	sub	sp, #12
 80041f8:	af00      	add	r7, sp, #0
 80041fa:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 80041fc:	4b07      	ldr	r3, [pc, #28]	; (800421c <LL_EXTI_DisableIT_0_31+0x28>)
 80041fe:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	43db      	mvns	r3, r3
 8004206:	4905      	ldr	r1, [pc, #20]	; (800421c <LL_EXTI_DisableIT_0_31+0x28>)
 8004208:	4013      	ands	r3, r2
 800420a:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 800420e:	bf00      	nop
 8004210:	370c      	adds	r7, #12
 8004212:	46bd      	mov	sp, r7
 8004214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004218:	4770      	bx	lr
 800421a:	bf00      	nop
 800421c:	58000800 	.word	0x58000800

08004220 <LL_EXTI_DisableIT_32_63>:
{
 8004220:	b480      	push	{r7}
 8004222:	b083      	sub	sp, #12
 8004224:	af00      	add	r7, sp, #0
 8004226:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR2, ExtiLine);
 8004228:	4b07      	ldr	r3, [pc, #28]	; (8004248 <LL_EXTI_DisableIT_32_63+0x28>)
 800422a:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	43db      	mvns	r3, r3
 8004232:	4905      	ldr	r1, [pc, #20]	; (8004248 <LL_EXTI_DisableIT_32_63+0x28>)
 8004234:	4013      	ands	r3, r2
 8004236:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 800423a:	bf00      	nop
 800423c:	370c      	adds	r7, #12
 800423e:	46bd      	mov	sp, r7
 8004240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004244:	4770      	bx	lr
 8004246:	bf00      	nop
 8004248:	58000800 	.word	0x58000800

0800424c <LL_RCC_HSE_SetCapacitorTuning>:
{
 800424c:	b480      	push	{r7}
 800424e:	b083      	sub	sp, #12
 8004250:	af00      	add	r7, sp, #0
 8004252:	6078      	str	r0, [r7, #4]
  WRITE_REG(RCC->HSECR, HSE_CONTROL_UNLOCK_KEY);
 8004254:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004258:	4a0a      	ldr	r2, [pc, #40]	; (8004284 <LL_RCC_HSE_SetCapacitorTuning+0x38>)
 800425a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  MODIFY_REG(RCC->HSECR, RCC_HSECR_HSETUNE, Value << RCC_HSECR_HSETUNE_Pos);
 800425e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004262:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004266:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	021b      	lsls	r3, r3, #8
 800426e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004272:	4313      	orrs	r3, r2
 8004274:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
}
 8004278:	bf00      	nop
 800427a:	370c      	adds	r7, #12
 800427c:	46bd      	mov	sp, r7
 800427e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004282:	4770      	bx	lr
 8004284:	cafecafe 	.word	0xcafecafe

08004288 <LL_RCC_LSE_SetDriveCapability>:
{
 8004288:	b480      	push	{r7}
 800428a:	b083      	sub	sp, #12
 800428c:	af00      	add	r7, sp, #0
 800428e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8004290:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004294:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004298:	f023 0218 	bic.w	r2, r3, #24
 800429c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	4313      	orrs	r3, r2
 80042a4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 80042a8:	bf00      	nop
 80042aa:	370c      	adds	r7, #12
 80042ac:	46bd      	mov	sp, r7
 80042ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b2:	4770      	bx	lr

080042b4 <LL_RCC_ForceBackupDomainReset>:
  * @brief  Force the Backup domain reset
  * @rmtoll BDCR         BDRST         LL_RCC_ForceBackupDomainReset
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ForceBackupDomainReset(void)
{
 80042b4:	b480      	push	{r7}
 80042b6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80042b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80042bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042c0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80042c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80042c8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80042cc:	bf00      	nop
 80042ce:	46bd      	mov	sp, r7
 80042d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d4:	4770      	bx	lr

080042d6 <LL_RCC_ReleaseBackupDomainReset>:
  * @brief  Release the Backup domain reset
  * @rmtoll BDCR         BDRST         LL_RCC_ReleaseBackupDomainReset
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ReleaseBackupDomainReset(void)
{
 80042d6:	b480      	push	{r7}
 80042d8:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80042da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80042de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042e2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80042e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80042ea:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80042ee:	bf00      	nop
 80042f0:	46bd      	mov	sp, r7
 80042f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f6:	4770      	bx	lr

080042f8 <LL_RCC_IsActiveFlag_PINRST>:
  * @brief  Check if RCC flag Pin reset is set or not.
  * @rmtoll CSR          PINRSTF       LL_RCC_IsActiveFlag_PINRST
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PINRST(void)
{
 80042f8:	b480      	push	{r7}
 80042fa:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_PINRSTF) == (RCC_CSR_PINRSTF)) ? 1UL : 0UL);
 80042fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004300:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004304:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004308:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800430c:	d101      	bne.n	8004312 <LL_RCC_IsActiveFlag_PINRST+0x1a>
 800430e:	2301      	movs	r3, #1
 8004310:	e000      	b.n	8004314 <LL_RCC_IsActiveFlag_PINRST+0x1c>
 8004312:	2300      	movs	r3, #0
}
 8004314:	4618      	mov	r0, r3
 8004316:	46bd      	mov	sp, r7
 8004318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800431c:	4770      	bx	lr

0800431e <LL_RCC_IsActiveFlag_SFTRST>:
  * @brief  Check if RCC flag Software reset is set or not.
  * @rmtoll CSR          SFTRSTF       LL_RCC_IsActiveFlag_SFTRST
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SFTRST(void)
{
 800431e:	b480      	push	{r7}
 8004320:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_SFTRSTF) == (RCC_CSR_SFTRSTF)) ? 1UL : 0UL);
 8004322:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004326:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800432a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800432e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004332:	d101      	bne.n	8004338 <LL_RCC_IsActiveFlag_SFTRST+0x1a>
 8004334:	2301      	movs	r3, #1
 8004336:	e000      	b.n	800433a <LL_RCC_IsActiveFlag_SFTRST+0x1c>
 8004338:	2300      	movs	r3, #0
}
 800433a:	4618      	mov	r0, r3
 800433c:	46bd      	mov	sp, r7
 800433e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004342:	4770      	bx	lr

08004344 <LL_AHB2_GRP1_EnableClock>:
{
 8004344:	b480      	push	{r7}
 8004346:	b085      	sub	sp, #20
 8004348:	af00      	add	r7, sp, #0
 800434a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800434c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004350:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004352:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	4313      	orrs	r3, r2
 800435a:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800435c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004360:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	4013      	ands	r3, r2
 8004366:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8004368:	68fb      	ldr	r3, [r7, #12]
}
 800436a:	bf00      	nop
 800436c:	3714      	adds	r7, #20
 800436e:	46bd      	mov	sp, r7
 8004370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004374:	4770      	bx	lr

08004376 <LL_AHB3_GRP1_EnableClock>:
{
 8004376:	b480      	push	{r7}
 8004378:	b085      	sub	sp, #20
 800437a:	af00      	add	r7, sp, #0
 800437c:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 800437e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004382:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004384:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	4313      	orrs	r3, r2
 800438c:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 800438e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004392:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	4013      	ands	r3, r2
 8004398:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800439a:	68fb      	ldr	r3, [r7, #12]
}
 800439c:	bf00      	nop
 800439e:	3714      	adds	r7, #20
 80043a0:	46bd      	mov	sp, r7
 80043a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a6:	4770      	bx	lr

080043a8 <LL_C1_IPCC_DisableTransmitChannel>:
{
 80043a8:	b480      	push	{r7}
 80043aa:	b083      	sub	sp, #12
 80043ac:	af00      	add	r7, sp, #0
 80043ae:	6078      	str	r0, [r7, #4]
 80043b0:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	685a      	ldr	r2, [r3, #4]
 80043b6:	683b      	ldr	r3, [r7, #0]
 80043b8:	041b      	lsls	r3, r3, #16
 80043ba:	431a      	orrs	r2, r3
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	605a      	str	r2, [r3, #4]
}
 80043c0:	bf00      	nop
 80043c2:	370c      	adds	r7, #12
 80043c4:	46bd      	mov	sp, r7
 80043c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ca:	4770      	bx	lr

080043cc <LL_C1_IPCC_DisableReceiveChannel>:
{
 80043cc:	b480      	push	{r7}
 80043ce:	b083      	sub	sp, #12
 80043d0:	af00      	add	r7, sp, #0
 80043d2:	6078      	str	r0, [r7, #4]
 80043d4:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel);
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	685a      	ldr	r2, [r3, #4]
 80043da:	683b      	ldr	r3, [r7, #0]
 80043dc:	431a      	orrs	r2, r3
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	605a      	str	r2, [r3, #4]
}
 80043e2:	bf00      	nop
 80043e4:	370c      	adds	r7, #12
 80043e6:	46bd      	mov	sp, r7
 80043e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ec:	4770      	bx	lr

080043ee <LL_C2_IPCC_DisableTransmitChannel>:
{
 80043ee:	b480      	push	{r7}
 80043f0:	b083      	sub	sp, #12
 80043f2:	af00      	add	r7, sp, #0
 80043f4:	6078      	str	r0, [r7, #4]
 80043f6:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C2MR, Channel << (IPCC_C2MR_CH1FM_Pos));
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	695a      	ldr	r2, [r3, #20]
 80043fc:	683b      	ldr	r3, [r7, #0]
 80043fe:	041b      	lsls	r3, r3, #16
 8004400:	431a      	orrs	r2, r3
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	615a      	str	r2, [r3, #20]
}
 8004406:	bf00      	nop
 8004408:	370c      	adds	r7, #12
 800440a:	46bd      	mov	sp, r7
 800440c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004410:	4770      	bx	lr

08004412 <LL_C2_IPCC_DisableReceiveChannel>:
{
 8004412:	b480      	push	{r7}
 8004414:	b083      	sub	sp, #12
 8004416:	af00      	add	r7, sp, #0
 8004418:	6078      	str	r0, [r7, #4]
 800441a:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C2MR, Channel);
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	695a      	ldr	r2, [r3, #20]
 8004420:	683b      	ldr	r3, [r7, #0]
 8004422:	431a      	orrs	r2, r3
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	615a      	str	r2, [r3, #20]
}
 8004428:	bf00      	nop
 800442a:	370c      	adds	r7, #12
 800442c:	46bd      	mov	sp, r7
 800442e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004432:	4770      	bx	lr

08004434 <LL_C1_IPCC_ClearFlag_CHx>:
{
 8004434:	b480      	push	{r7}
 8004436:	b083      	sub	sp, #12
 8004438:	af00      	add	r7, sp, #0
 800443a:	6078      	str	r0, [r7, #4]
 800443c:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	683a      	ldr	r2, [r7, #0]
 8004442:	609a      	str	r2, [r3, #8]
}
 8004444:	bf00      	nop
 8004446:	370c      	adds	r7, #12
 8004448:	46bd      	mov	sp, r7
 800444a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800444e:	4770      	bx	lr

08004450 <LL_C2_IPCC_ClearFlag_CHx>:
{
 8004450:	b480      	push	{r7}
 8004452:	b083      	sub	sp, #12
 8004454:	af00      	add	r7, sp, #0
 8004456:	6078      	str	r0, [r7, #4]
 8004458:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C2SCR, Channel);
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	683a      	ldr	r2, [r7, #0]
 800445e:	619a      	str	r2, [r3, #24]
}
 8004460:	bf00      	nop
 8004462:	370c      	adds	r7, #12
 8004464:	46bd      	mov	sp, r7
 8004466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800446a:	4770      	bx	lr

0800446c <LL_LPM_EnableSleep>:
  * @brief  Processor uses sleep as its low power mode
  * @rmtoll SCB_SCR      SLEEPDEEP     LL_LPM_EnableSleep
  * @retval None
  */
__STATIC_INLINE void LL_LPM_EnableSleep(void)
{
 800446c:	b480      	push	{r7}
 800446e:	af00      	add	r7, sp, #0
  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8004470:	4b05      	ldr	r3, [pc, #20]	; (8004488 <LL_LPM_EnableSleep+0x1c>)
 8004472:	691b      	ldr	r3, [r3, #16]
 8004474:	4a04      	ldr	r2, [pc, #16]	; (8004488 <LL_LPM_EnableSleep+0x1c>)
 8004476:	f023 0304 	bic.w	r3, r3, #4
 800447a:	6113      	str	r3, [r2, #16]
}
 800447c:	bf00      	nop
 800447e:	46bd      	mov	sp, r7
 8004480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004484:	4770      	bx	lr
 8004486:	bf00      	nop
 8004488:	e000ed00 	.word	0xe000ed00

0800448c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800448c:	b580      	push	{r7, lr}
 800448e:	af00      	add	r7, sp, #0

  /**
   * The OPTVERR flag is wrongly set at power on
   * It shall be cleared before using any HAL_FLASH_xxx() api
   */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8004490:	4b3e      	ldr	r3, [pc, #248]	; (800458c <main+0x100>)
 8004492:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8004496:	611a      	str	r2, [r3, #16]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8004498:	f001 fd9c 	bl	8005fd4 <HAL_Init>

  /* USER CODE BEGIN Init */
  Reset_Device();
 800449c:	f001 f8d3 	bl	8005646 <Reset_Device>
  Config_HSE();
 80044a0:	f001 f8bd 	bl	800561e <Config_HSE>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80044a4:	f000 f8b4 	bl	8004610 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  PeriphClock_Config();
 80044a8:	f001 f8b2 	bl	8005610 <PeriphClock_Config>
  Init_Exti(); /**< Configure the system Power Mode */
 80044ac:	f001 f90d 	bl	80056ca <Init_Exti>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80044b0:	f000 fb10 	bl	8004ad4 <MX_GPIO_Init>
  MX_I2C1_Init();
 80044b4:	f000 f97a 	bl	80047ac <MX_I2C1_Init>
  MX_SPI1_Init();
 80044b8:	f000 fa1e 	bl	80048f8 <MX_SPI1_Init>
  MX_RF_Init();
 80044bc:	f000 f9b6 	bl	800482c <MX_RF_Init>
  MX_RTC_Init();
 80044c0:	f000 f9bc 	bl	800483c <MX_RTC_Init>
  MX_TIM1_Init();
 80044c4:	f000 fa56 	bl	8004974 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80044c8:	f00a fbd6 	bl	800ec78 <osKernelInitialize>

  /* USER CODE BEGIN RTOS_MUTEX */
    /* creation of rtcMutex */
    rtcMutexHandle = osMutexNew(&rtcMutex_attributes);
 80044cc:	4830      	ldr	r0, [pc, #192]	; (8004590 <main+0x104>)
 80044ce:	f00a fe07 	bl	800f0e0 <osMutexNew>
 80044d2:	4602      	mov	r2, r0
 80044d4:	4b2f      	ldr	r3, [pc, #188]	; (8004594 <main+0x108>)
 80044d6:	601a      	str	r2, [r3, #0]

    /* creation of screenTextMutex */
    screenTextMutexHandle = osMutexNew(&screenTextMutex_attributes);
 80044d8:	482f      	ldr	r0, [pc, #188]	; (8004598 <main+0x10c>)
 80044da:	f00a fe01 	bl	800f0e0 <osMutexNew>
 80044de:	4602      	mov	r2, r0
 80044e0:	4b2e      	ldr	r3, [pc, #184]	; (800459c <main+0x110>)
 80044e2:	601a      	str	r2, [r3, #0]

    /* creation of ledStateMutex */
    ledStateMutexHandle = osMutexNew(&ledStateMutex_attributes);
 80044e4:	482e      	ldr	r0, [pc, #184]	; (80045a0 <main+0x114>)
 80044e6:	f00a fdfb 	bl	800f0e0 <osMutexNew>
 80044ea:	4602      	mov	r2, r0
 80044ec:	4b2d      	ldr	r3, [pc, #180]	; (80045a4 <main+0x118>)
 80044ee:	601a      	str	r2, [r3, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_QUEUES */
      /* creation of bleTXqueue */
      bleTXqueueHandle = osMessageQueueNew (16, sizeof(uint16_t), &bleTXqueue_attributes);
 80044f0:	4a2d      	ldr	r2, [pc, #180]	; (80045a8 <main+0x11c>)
 80044f2:	2102      	movs	r1, #2
 80044f4:	2010      	movs	r0, #16
 80044f6:	f00b f897 	bl	800f628 <osMessageQueueNew>
 80044fa:	4602      	mov	r2, r0
 80044fc:	4b2b      	ldr	r3, [pc, #172]	; (80045ac <main+0x120>)
 80044fe:	601a      	str	r2, [r3, #0]

  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
        /* creation of screenUpdate */
        screenUpdateHandle = osThreadNew(startScreenUpdate, NULL, &screenUpdate_attributes);
 8004500:	4a2b      	ldr	r2, [pc, #172]	; (80045b0 <main+0x124>)
 8004502:	2100      	movs	r1, #0
 8004504:	482b      	ldr	r0, [pc, #172]	; (80045b4 <main+0x128>)
 8004506:	f00a fc21 	bl	800ed4c <osThreadNew>
 800450a:	4602      	mov	r2, r0
 800450c:	4b2a      	ldr	r3, [pc, #168]	; (80045b8 <main+0x12c>)
 800450e:	601a      	str	r2, [r3, #0]

        /* creation of LEDControl */
        LEDControlHandle = osThreadNew(startLEDControl, NULL, &LEDControl_attributes);
 8004510:	4a2a      	ldr	r2, [pc, #168]	; (80045bc <main+0x130>)
 8004512:	2100      	movs	r1, #0
 8004514:	482a      	ldr	r0, [pc, #168]	; (80045c0 <main+0x134>)
 8004516:	f00a fc19 	bl	800ed4c <osThreadNew>
 800451a:	4602      	mov	r2, r0
 800451c:	4b29      	ldr	r3, [pc, #164]	; (80045c4 <main+0x138>)
 800451e:	601a      	str	r2, [r3, #0]

        /* creation of buttonPress */
        buttonPressHandle = osThreadNew(startButtonPress, NULL, &buttonPress_attributes);
 8004520:	4a29      	ldr	r2, [pc, #164]	; (80045c8 <main+0x13c>)
 8004522:	2100      	movs	r1, #0
 8004524:	4829      	ldr	r0, [pc, #164]	; (80045cc <main+0x140>)
 8004526:	f00a fc11 	bl	800ed4c <osThreadNew>
 800452a:	4602      	mov	r2, r0
 800452c:	4b28      	ldr	r3, [pc, #160]	; (80045d0 <main+0x144>)
 800452e:	601a      	str	r2, [r3, #0]

        /* creation of vibrateControl */
        vibrateControlHandle = osThreadNew(startVibrateControl, NULL, &vibrateControl_attributes);
 8004530:	4a28      	ldr	r2, [pc, #160]	; (80045d4 <main+0x148>)
 8004532:	2100      	movs	r1, #0
 8004534:	4828      	ldr	r0, [pc, #160]	; (80045d8 <main+0x14c>)
 8004536:	f00a fc09 	bl	800ed4c <osThreadNew>
 800453a:	4602      	mov	r2, r0
 800453c:	4b27      	ldr	r3, [pc, #156]	; (80045dc <main+0x150>)
 800453e:	601a      	str	r2, [r3, #0]

        /* creation of rtcSecondTick */
        rtcSecondTickHandle = osThreadNew(startRTCTick, NULL, &rtcSecondTick_attributes);
 8004540:	4a27      	ldr	r2, [pc, #156]	; (80045e0 <main+0x154>)
 8004542:	2100      	movs	r1, #0
 8004544:	4827      	ldr	r0, [pc, #156]	; (80045e4 <main+0x158>)
 8004546:	f00a fc01 	bl	800ed4c <osThreadNew>
 800454a:	4602      	mov	r2, r0
 800454c:	4b26      	ldr	r3, [pc, #152]	; (80045e8 <main+0x15c>)
 800454e:	601a      	str	r2, [r3, #0]

        /* creation of bleTX */
        //bleTXHandle = osThreadNew(startBLETX, NULL, &bleTX_attributes);

        /* creation of bleRX */
        bleRXHandle = osThreadNew(startBLERX, NULL, &bleRX_attributes);
 8004550:	4a26      	ldr	r2, [pc, #152]	; (80045ec <main+0x160>)
 8004552:	2100      	movs	r1, #0
 8004554:	4826      	ldr	r0, [pc, #152]	; (80045f0 <main+0x164>)
 8004556:	f00a fbf9 	bl	800ed4c <osThreadNew>
 800455a:	4602      	mov	r2, r0
 800455c:	4b25      	ldr	r3, [pc, #148]	; (80045f4 <main+0x168>)
 800455e:	601a      	str	r2, [r3, #0]

        /* creation of LEDTimer */
        LEDTimerHandle = osThreadNew(startLEDTimer, NULL, &LEDTimer_attributes);
 8004560:	4a25      	ldr	r2, [pc, #148]	; (80045f8 <main+0x16c>)
 8004562:	2100      	movs	r1, #0
 8004564:	4825      	ldr	r0, [pc, #148]	; (80045fc <main+0x170>)
 8004566:	f00a fbf1 	bl	800ed4c <osThreadNew>
 800456a:	4602      	mov	r2, r0
 800456c:	4b24      	ldr	r3, [pc, #144]	; (8004600 <main+0x174>)
 800456e:	601a      	str	r2, [r3, #0]

        /* creation of touchRead */
        touchReadHandle = osThreadNew(startTouchRead, NULL, &touchRead_attributes);
 8004570:	4a24      	ldr	r2, [pc, #144]	; (8004604 <main+0x178>)
 8004572:	2100      	movs	r1, #0
 8004574:	4824      	ldr	r0, [pc, #144]	; (8004608 <main+0x17c>)
 8004576:	f00a fbe9 	bl	800ed4c <osThreadNew>
 800457a:	4602      	mov	r2, r0
 800457c:	4b23      	ldr	r3, [pc, #140]	; (800460c <main+0x180>)
 800457e:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Init code for STM32_WPAN */
  APPE_Init();
 8004580:	f7fd ff04 	bl	800238c <APPE_Init>
  /* Start scheduler */
  osKernelStart();
 8004584:	f00a fbac 	bl	800ece0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8004588:	e7fe      	b.n	8004588 <main+0xfc>
 800458a:	bf00      	nop
 800458c:	58004000 	.word	0x58004000
 8004590:	08017750 	.word	0x08017750
 8004594:	2000534c 	.word	0x2000534c
 8004598:	08017760 	.word	0x08017760
 800459c:	200050dc 	.word	0x200050dc
 80045a0:	08017770 	.word	0x08017770
 80045a4:	20005294 	.word	0x20005294
 80045a8:	08017738 	.word	0x08017738
 80045ac:	20005344 	.word	0x20005344
 80045b0:	08017618 	.word	0x08017618
 80045b4:	08004c61 	.word	0x08004c61
 80045b8:	20005284 	.word	0x20005284
 80045bc:	0801763c 	.word	0x0801763c
 80045c0:	08004e51 	.word	0x08004e51
 80045c4:	20005088 	.word	0x20005088
 80045c8:	08017660 	.word	0x08017660
 80045cc:	080050e5 	.word	0x080050e5
 80045d0:	20005084 	.word	0x20005084
 80045d4:	08017684 	.word	0x08017684
 80045d8:	08005211 	.word	0x08005211
 80045dc:	20005348 	.word	0x20005348
 80045e0:	080176a8 	.word	0x080176a8
 80045e4:	0800524d 	.word	0x0800524d
 80045e8:	20005290 	.word	0x20005290
 80045ec:	080176cc 	.word	0x080176cc
 80045f0:	08005455 	.word	0x08005455
 80045f4:	2000528c 	.word	0x2000528c
 80045f8:	080176f0 	.word	0x080176f0
 80045fc:	08005469 	.word	0x08005469
 8004600:	2000508c 	.word	0x2000508c
 8004604:	08017714 	.word	0x08017714
 8004608:	080054f5 	.word	0x080054f5
 800460c:	20005288 	.word	0x20005288

08004610 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004610:	b580      	push	{r7, lr}
 8004612:	b0ae      	sub	sp, #184	; 0xb8
 8004614:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004616:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800461a:	2248      	movs	r2, #72	; 0x48
 800461c:	2100      	movs	r1, #0
 800461e:	4618      	mov	r0, r3
 8004620:	f00e fcdf 	bl	8012fe2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004624:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8004628:	2200      	movs	r2, #0
 800462a:	601a      	str	r2, [r3, #0]
 800462c:	605a      	str	r2, [r3, #4]
 800462e:	609a      	str	r2, [r3, #8]
 8004630:	60da      	str	r2, [r3, #12]
 8004632:	611a      	str	r2, [r3, #16]
 8004634:	615a      	str	r2, [r3, #20]
 8004636:	619a      	str	r2, [r3, #24]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004638:	1d3b      	adds	r3, r7, #4
 800463a:	2250      	movs	r2, #80	; 0x50
 800463c:	2100      	movs	r1, #0
 800463e:	4618      	mov	r0, r3
 8004640:	f00e fccf 	bl	8012fe2 <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8004644:	f003 f8da 	bl	80077fc <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8004648:	2000      	movs	r0, #0
 800464a:	f7ff fe1d 	bl	8004288 <LL_RCC_LSE_SetDriveCapability>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800464e:	4b2f      	ldr	r3, [pc, #188]	; (800470c <SystemClock_Config+0xfc>)
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004656:	4a2d      	ldr	r2, [pc, #180]	; (800470c <SystemClock_Config+0xfc>)
 8004658:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800465c:	6013      	str	r3, [r2, #0]
 800465e:	4b2b      	ldr	r3, [pc, #172]	; (800470c <SystemClock_Config+0xfc>)
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004666:	603b      	str	r3, [r7, #0]
 8004668:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 800466a:	2307      	movs	r3, #7
 800466c:	673b      	str	r3, [r7, #112]	; 0x70
                              |RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800466e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004672:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8004674:	2301      	movs	r3, #1
 8004676:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8004678:	f44f 7380 	mov.w	r3, #256	; 0x100
 800467c:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800467e:	2340      	movs	r3, #64	; 0x40
 8004680:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8004684:	2300      	movs	r3, #0
 8004686:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800468a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800468e:	4618      	mov	r0, r3
 8004690:	f003 fc54 	bl	8007f3c <HAL_RCC_OscConfig>
 8004694:	4603      	mov	r3, r0
 8004696:	2b00      	cmp	r3, #0
 8004698:	d001      	beq.n	800469e <SystemClock_Config+0x8e>
  {
    Error_Handler();
 800469a:	f001 f859 	bl	8005750 <Error_Handler>
  }
  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 800469e:	236f      	movs	r3, #111	; 0x6f
 80046a0:	657b      	str	r3, [r7, #84]	; 0x54
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 80046a2:	2302      	movs	r3, #2
 80046a4:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80046a6:	2300      	movs	r3, #0
 80046a8:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80046aa:	2300      	movs	r3, #0
 80046ac:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80046ae:	2300      	movs	r3, #0
 80046b0:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 80046b2:	2300      	movs	r3, #0
 80046b4:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 80046b6:	2300      	movs	r3, #0
 80046b8:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80046ba:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80046be:	2101      	movs	r1, #1
 80046c0:	4618      	mov	r0, r3
 80046c2:	f003 ffc7 	bl	8008654 <HAL_RCC_ClockConfig>
 80046c6:	4603      	mov	r3, r0
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d001      	beq.n	80046d0 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80046cc:	f001 f840 	bl	8005750 <Error_Handler>
  }
  /** Initializes the peripherals clocks
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS|RCC_PERIPHCLK_RFWAKEUP
 80046d0:	f643 0303 	movw	r3, #14339	; 0x3803
 80046d4:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USART1
                              |RCC_PERIPHCLK_LPUART1;
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80046d6:	2300      	movs	r3, #0
 80046d8:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 80046da:	2300      	movs	r3, #0
 80046dc:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80046de:	f44f 7380 	mov.w	r3, #256	; 0x100
 80046e2:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInitStruct.RFWakeUpClockSelection = RCC_RFWKPCLKSOURCE_LSE;
 80046e4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80046e8:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSE;
 80046ea:	2302      	movs	r3, #2
 80046ec:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE1;
 80046ee:	2310      	movs	r3, #16
 80046f0:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80046f2:	1d3b      	adds	r3, r7, #4
 80046f4:	4618      	mov	r0, r3
 80046f6:	f004 fc1e 	bl	8008f36 <HAL_RCCEx_PeriphCLKConfig>
 80046fa:	4603      	mov	r3, r0
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d001      	beq.n	8004704 <SystemClock_Config+0xf4>
  {
    Error_Handler();
 8004700:	f001 f826 	bl	8005750 <Error_Handler>
  LL_PWR_SMPS_SetOutputVoltageLevel(LL_PWR_SMPS_OUTPUT_VOLTAGE_1V40);
  LL_PWR_SMPS_Enable();
#endif

  /* USER CODE END Smps */
}
 8004704:	bf00      	nop
 8004706:	37b8      	adds	r7, #184	; 0xb8
 8004708:	46bd      	mov	sp, r7
 800470a:	bd80      	pop	{r7, pc}
 800470c:	58000400 	.word	0x58000400

08004710 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
void MX_USART1_UART_Init(void)
{
 8004710:	b580      	push	{r7, lr}
 8004712:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8004714:	4b23      	ldr	r3, [pc, #140]	; (80047a4 <MX_USART1_UART_Init+0x94>)
 8004716:	4a24      	ldr	r2, [pc, #144]	; (80047a8 <MX_USART1_UART_Init+0x98>)
 8004718:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800471a:	4b22      	ldr	r3, [pc, #136]	; (80047a4 <MX_USART1_UART_Init+0x94>)
 800471c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004720:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8004722:	4b20      	ldr	r3, [pc, #128]	; (80047a4 <MX_USART1_UART_Init+0x94>)
 8004724:	2200      	movs	r2, #0
 8004726:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8004728:	4b1e      	ldr	r3, [pc, #120]	; (80047a4 <MX_USART1_UART_Init+0x94>)
 800472a:	2200      	movs	r2, #0
 800472c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800472e:	4b1d      	ldr	r3, [pc, #116]	; (80047a4 <MX_USART1_UART_Init+0x94>)
 8004730:	2200      	movs	r2, #0
 8004732:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8004734:	4b1b      	ldr	r3, [pc, #108]	; (80047a4 <MX_USART1_UART_Init+0x94>)
 8004736:	220c      	movs	r2, #12
 8004738:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800473a:	4b1a      	ldr	r3, [pc, #104]	; (80047a4 <MX_USART1_UART_Init+0x94>)
 800473c:	2200      	movs	r2, #0
 800473e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_8;
 8004740:	4b18      	ldr	r3, [pc, #96]	; (80047a4 <MX_USART1_UART_Init+0x94>)
 8004742:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8004746:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004748:	4b16      	ldr	r3, [pc, #88]	; (80047a4 <MX_USART1_UART_Init+0x94>)
 800474a:	2200      	movs	r2, #0
 800474c:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800474e:	4b15      	ldr	r3, [pc, #84]	; (80047a4 <MX_USART1_UART_Init+0x94>)
 8004750:	2200      	movs	r2, #0
 8004752:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004754:	4b13      	ldr	r3, [pc, #76]	; (80047a4 <MX_USART1_UART_Init+0x94>)
 8004756:	2200      	movs	r2, #0
 8004758:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800475a:	4812      	ldr	r0, [pc, #72]	; (80047a4 <MX_USART1_UART_Init+0x94>)
 800475c:	f006 ffa8 	bl	800b6b0 <HAL_UART_Init>
 8004760:	4603      	mov	r3, r0
 8004762:	2b00      	cmp	r3, #0
 8004764:	d001      	beq.n	800476a <MX_USART1_UART_Init+0x5a>
  {
    Error_Handler();
 8004766:	f000 fff3 	bl	8005750 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800476a:	2100      	movs	r1, #0
 800476c:	480d      	ldr	r0, [pc, #52]	; (80047a4 <MX_USART1_UART_Init+0x94>)
 800476e:	f007 fced 	bl	800c14c <HAL_UARTEx_SetTxFifoThreshold>
 8004772:	4603      	mov	r3, r0
 8004774:	2b00      	cmp	r3, #0
 8004776:	d001      	beq.n	800477c <MX_USART1_UART_Init+0x6c>
  {
    Error_Handler();
 8004778:	f000 ffea 	bl	8005750 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800477c:	2100      	movs	r1, #0
 800477e:	4809      	ldr	r0, [pc, #36]	; (80047a4 <MX_USART1_UART_Init+0x94>)
 8004780:	f007 fd22 	bl	800c1c8 <HAL_UARTEx_SetRxFifoThreshold>
 8004784:	4603      	mov	r3, r0
 8004786:	2b00      	cmp	r3, #0
 8004788:	d001      	beq.n	800478e <MX_USART1_UART_Init+0x7e>
  {
    Error_Handler();
 800478a:	f000 ffe1 	bl	8005750 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 800478e:	4805      	ldr	r0, [pc, #20]	; (80047a4 <MX_USART1_UART_Init+0x94>)
 8004790:	f007 fca3 	bl	800c0da <HAL_UARTEx_DisableFifoMode>
 8004794:	4603      	mov	r3, r0
 8004796:	2b00      	cmp	r3, #0
 8004798:	d001      	beq.n	800479e <MX_USART1_UART_Init+0x8e>
  {
    Error_Handler();
 800479a:	f000 ffd9 	bl	8005750 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800479e:	bf00      	nop
 80047a0:	bd80      	pop	{r7, pc}
 80047a2:	bf00      	nop
 80047a4:	200051cc 	.word	0x200051cc
 80047a8:	40013800 	.word	0x40013800

080047ac <MX_I2C1_Init>:


static void MX_I2C1_Init(void)
{
 80047ac:	b580      	push	{r7, lr}
 80047ae:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80047b0:	4b1b      	ldr	r3, [pc, #108]	; (8004820 <MX_I2C1_Init+0x74>)
 80047b2:	4a1c      	ldr	r2, [pc, #112]	; (8004824 <MX_I2C1_Init+0x78>)
 80047b4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00300F38;
 80047b6:	4b1a      	ldr	r3, [pc, #104]	; (8004820 <MX_I2C1_Init+0x74>)
 80047b8:	4a1b      	ldr	r2, [pc, #108]	; (8004828 <MX_I2C1_Init+0x7c>)
 80047ba:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80047bc:	4b18      	ldr	r3, [pc, #96]	; (8004820 <MX_I2C1_Init+0x74>)
 80047be:	2200      	movs	r2, #0
 80047c0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80047c2:	4b17      	ldr	r3, [pc, #92]	; (8004820 <MX_I2C1_Init+0x74>)
 80047c4:	2201      	movs	r2, #1
 80047c6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80047c8:	4b15      	ldr	r3, [pc, #84]	; (8004820 <MX_I2C1_Init+0x74>)
 80047ca:	2200      	movs	r2, #0
 80047cc:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80047ce:	4b14      	ldr	r3, [pc, #80]	; (8004820 <MX_I2C1_Init+0x74>)
 80047d0:	2200      	movs	r2, #0
 80047d2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80047d4:	4b12      	ldr	r3, [pc, #72]	; (8004820 <MX_I2C1_Init+0x74>)
 80047d6:	2200      	movs	r2, #0
 80047d8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80047da:	4b11      	ldr	r3, [pc, #68]	; (8004820 <MX_I2C1_Init+0x74>)
 80047dc:	2200      	movs	r2, #0
 80047de:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80047e0:	4b0f      	ldr	r3, [pc, #60]	; (8004820 <MX_I2C1_Init+0x74>)
 80047e2:	2200      	movs	r2, #0
 80047e4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80047e6:	480e      	ldr	r0, [pc, #56]	; (8004820 <MX_I2C1_Init+0x74>)
 80047e8:	f002 f9a2 	bl	8006b30 <HAL_I2C_Init>
 80047ec:	4603      	mov	r3, r0
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d001      	beq.n	80047f6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80047f2:	f000 ffad 	bl	8005750 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80047f6:	2100      	movs	r1, #0
 80047f8:	4809      	ldr	r0, [pc, #36]	; (8004820 <MX_I2C1_Init+0x74>)
 80047fa:	f002 ff67 	bl	80076cc <HAL_I2CEx_ConfigAnalogFilter>
 80047fe:	4603      	mov	r3, r0
 8004800:	2b00      	cmp	r3, #0
 8004802:	d001      	beq.n	8004808 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8004804:	f000 ffa4 	bl	8005750 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8004808:	2100      	movs	r1, #0
 800480a:	4805      	ldr	r0, [pc, #20]	; (8004820 <MX_I2C1_Init+0x74>)
 800480c:	f002 ffa9 	bl	8007762 <HAL_I2CEx_ConfigDigitalFilter>
 8004810:	4603      	mov	r3, r0
 8004812:	2b00      	cmp	r3, #0
 8004814:	d001      	beq.n	800481a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8004816:	f000 ff9b 	bl	8005750 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800481a:	bf00      	nop
 800481c:	bd80      	pop	{r7, pc}
 800481e:	bf00      	nop
 8004820:	20005090 	.word	0x20005090
 8004824:	40005400 	.word	0x40005400
 8004828:	00300f38 	.word	0x00300f38

0800482c <MX_RF_Init>:
  * @brief RF Initialization Function
  * @param None
  * @retval None
  */
static void MX_RF_Init(void)
{
 800482c:	b480      	push	{r7}
 800482e:	af00      	add	r7, sp, #0
  /* USER CODE END RF_Init 1 */
  /* USER CODE BEGIN RF_Init 2 */

  /* USER CODE END RF_Init 2 */

}
 8004830:	bf00      	nop
 8004832:	46bd      	mov	sp, r7
 8004834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004838:	4770      	bx	lr
	...

0800483c <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 800483c:	b580      	push	{r7, lr}
 800483e:	b086      	sub	sp, #24
 8004840:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8004842:	4b2b      	ldr	r3, [pc, #172]	; (80048f0 <MX_RTC_Init+0xb4>)
 8004844:	4a2b      	ldr	r2, [pc, #172]	; (80048f4 <MX_RTC_Init+0xb8>)
 8004846:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8004848:	4b29      	ldr	r3, [pc, #164]	; (80048f0 <MX_RTC_Init+0xb4>)
 800484a:	2200      	movs	r2, #0
 800484c:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 800484e:	4b28      	ldr	r3, [pc, #160]	; (80048f0 <MX_RTC_Init+0xb4>)
 8004850:	227f      	movs	r2, #127	; 0x7f
 8004852:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8004854:	4b26      	ldr	r3, [pc, #152]	; (80048f0 <MX_RTC_Init+0xb4>)
 8004856:	22ff      	movs	r2, #255	; 0xff
 8004858:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800485a:	4b25      	ldr	r3, [pc, #148]	; (80048f0 <MX_RTC_Init+0xb4>)
 800485c:	2200      	movs	r2, #0
 800485e:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8004860:	4b23      	ldr	r3, [pc, #140]	; (80048f0 <MX_RTC_Init+0xb4>)
 8004862:	2200      	movs	r2, #0
 8004864:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8004866:	4b22      	ldr	r3, [pc, #136]	; (80048f0 <MX_RTC_Init+0xb4>)
 8004868:	2200      	movs	r2, #0
 800486a:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 800486c:	4b20      	ldr	r3, [pc, #128]	; (80048f0 <MX_RTC_Init+0xb4>)
 800486e:	2200      	movs	r2, #0
 8004870:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8004872:	481f      	ldr	r0, [pc, #124]	; (80048f0 <MX_RTC_Init+0xb4>)
 8004874:	f004 fde5 	bl	8009442 <HAL_RTC_Init>
 8004878:	4603      	mov	r3, r0
 800487a:	2b00      	cmp	r3, #0
 800487c:	d001      	beq.n	8004882 <MX_RTC_Init+0x46>
  {
    Error_Handler();
 800487e:	f000 ff67 	bl	8005750 <Error_Handler>
  /* Enable RTC registers write protection */
  //LL_RTC_EnableWriteProtection(RTC);

  /** Initialize RTC and set the Time and Date
    */
    RTC_TimeTypeDef sTime = {0};
 8004882:	1d3b      	adds	r3, r7, #4
 8004884:	2200      	movs	r2, #0
 8004886:	601a      	str	r2, [r3, #0]
 8004888:	605a      	str	r2, [r3, #4]
 800488a:	609a      	str	r2, [r3, #8]
 800488c:	60da      	str	r2, [r3, #12]
 800488e:	611a      	str	r2, [r3, #16]
    RTC_DateTypeDef sDate = {0};
 8004890:	2300      	movs	r3, #0
 8004892:	603b      	str	r3, [r7, #0]

    sTime.Hours = 0x0;
 8004894:	2300      	movs	r3, #0
 8004896:	713b      	strb	r3, [r7, #4]
    sTime.Minutes = 0x0;
 8004898:	2300      	movs	r3, #0
 800489a:	717b      	strb	r3, [r7, #5]
    sTime.Seconds = 0x0;
 800489c:	2300      	movs	r3, #0
 800489e:	71bb      	strb	r3, [r7, #6]
    sTime.SubSeconds = 0x0;
 80048a0:	2300      	movs	r3, #0
 80048a2:	60bb      	str	r3, [r7, #8]
    sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80048a4:	2300      	movs	r3, #0
 80048a6:	613b      	str	r3, [r7, #16]
    sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80048a8:	2300      	movs	r3, #0
 80048aa:	617b      	str	r3, [r7, #20]
    if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80048ac:	1d3b      	adds	r3, r7, #4
 80048ae:	2201      	movs	r2, #1
 80048b0:	4619      	mov	r1, r3
 80048b2:	480f      	ldr	r0, [pc, #60]	; (80048f0 <MX_RTC_Init+0xb4>)
 80048b4:	f004 fe63 	bl	800957e <HAL_RTC_SetTime>
 80048b8:	4603      	mov	r3, r0
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d001      	beq.n	80048c2 <MX_RTC_Init+0x86>
    {
      Error_Handler();
 80048be:	f000 ff47 	bl	8005750 <Error_Handler>
    }
    sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 80048c2:	2301      	movs	r3, #1
 80048c4:	703b      	strb	r3, [r7, #0]
    sDate.Month = RTC_MONTH_JANUARY;
 80048c6:	2301      	movs	r3, #1
 80048c8:	707b      	strb	r3, [r7, #1]
    sDate.Date = 0x1;
 80048ca:	2301      	movs	r3, #1
 80048cc:	70bb      	strb	r3, [r7, #2]
    sDate.Year = 0x0;
 80048ce:	2300      	movs	r3, #0
 80048d0:	70fb      	strb	r3, [r7, #3]

    if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 80048d2:	463b      	mov	r3, r7
 80048d4:	2201      	movs	r2, #1
 80048d6:	4619      	mov	r1, r3
 80048d8:	4805      	ldr	r0, [pc, #20]	; (80048f0 <MX_RTC_Init+0xb4>)
 80048da:	f004 ff70 	bl	80097be <HAL_RTC_SetDate>
 80048de:	4603      	mov	r3, r0
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d001      	beq.n	80048e8 <MX_RTC_Init+0xac>
    {
      Error_Handler();
 80048e4:	f000 ff34 	bl	8005750 <Error_Handler>
    }


  /* USER CODE END RTC_Init 2 */

}
 80048e8:	bf00      	nop
 80048ea:	3718      	adds	r7, #24
 80048ec:	46bd      	mov	sp, r7
 80048ee:	bd80      	pop	{r7, pc}
 80048f0:	20005260 	.word	0x20005260
 80048f4:	40002800 	.word	0x40002800

080048f8 <MX_SPI1_Init>:



/* USER CODE BEGIN 4 */
static void MX_SPI1_Init(void)
{
 80048f8:	b580      	push	{r7, lr}
 80048fa:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80048fc:	4b1b      	ldr	r3, [pc, #108]	; (800496c <MX_SPI1_Init+0x74>)
 80048fe:	4a1c      	ldr	r2, [pc, #112]	; (8004970 <MX_SPI1_Init+0x78>)
 8004900:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8004902:	4b1a      	ldr	r3, [pc, #104]	; (800496c <MX_SPI1_Init+0x74>)
 8004904:	f44f 7282 	mov.w	r2, #260	; 0x104
 8004908:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_1LINE;
 800490a:	4b18      	ldr	r3, [pc, #96]	; (800496c <MX_SPI1_Init+0x74>)
 800490c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8004910:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8004912:	4b16      	ldr	r3, [pc, #88]	; (800496c <MX_SPI1_Init+0x74>)
 8004914:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8004918:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800491a:	4b14      	ldr	r3, [pc, #80]	; (800496c <MX_SPI1_Init+0x74>)
 800491c:	2200      	movs	r2, #0
 800491e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8004920:	4b12      	ldr	r3, [pc, #72]	; (800496c <MX_SPI1_Init+0x74>)
 8004922:	2200      	movs	r2, #0
 8004924:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8004926:	4b11      	ldr	r3, [pc, #68]	; (800496c <MX_SPI1_Init+0x74>)
 8004928:	f44f 7200 	mov.w	r2, #512	; 0x200
 800492c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800492e:	4b0f      	ldr	r3, [pc, #60]	; (800496c <MX_SPI1_Init+0x74>)
 8004930:	2200      	movs	r2, #0
 8004932:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8004934:	4b0d      	ldr	r3, [pc, #52]	; (800496c <MX_SPI1_Init+0x74>)
 8004936:	2200      	movs	r2, #0
 8004938:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800493a:	4b0c      	ldr	r3, [pc, #48]	; (800496c <MX_SPI1_Init+0x74>)
 800493c:	2200      	movs	r2, #0
 800493e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004940:	4b0a      	ldr	r3, [pc, #40]	; (800496c <MX_SPI1_Init+0x74>)
 8004942:	2200      	movs	r2, #0
 8004944:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8004946:	4b09      	ldr	r3, [pc, #36]	; (800496c <MX_SPI1_Init+0x74>)
 8004948:	2207      	movs	r2, #7
 800494a:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800494c:	4b07      	ldr	r3, [pc, #28]	; (800496c <MX_SPI1_Init+0x74>)
 800494e:	2200      	movs	r2, #0
 8004950:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8004952:	4b06      	ldr	r3, [pc, #24]	; (800496c <MX_SPI1_Init+0x74>)
 8004954:	2208      	movs	r2, #8
 8004956:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8004958:	4804      	ldr	r0, [pc, #16]	; (800496c <MX_SPI1_Init+0x74>)
 800495a:	f005 f8ed 	bl	8009b38 <HAL_SPI_Init>
 800495e:	4603      	mov	r3, r0
 8004960:	2b00      	cmp	r3, #0
 8004962:	d001      	beq.n	8004968 <MX_SPI1_Init+0x70>
  {
    Error_Handler();
 8004964:	f000 fef4 	bl	8005750 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8004968:	bf00      	nop
 800496a:	bd80      	pop	{r7, pc}
 800496c:	20005350 	.word	0x20005350
 8004970:	40013000 	.word	0x40013000

08004974 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8004974:	b580      	push	{r7, lr}
 8004976:	b09c      	sub	sp, #112	; 0x70
 8004978:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800497a:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800497e:	2200      	movs	r2, #0
 8004980:	601a      	str	r2, [r3, #0]
 8004982:	605a      	str	r2, [r3, #4]
 8004984:	609a      	str	r2, [r3, #8]
 8004986:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004988:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800498c:	2200      	movs	r2, #0
 800498e:	601a      	str	r2, [r3, #0]
 8004990:	605a      	str	r2, [r3, #4]
 8004992:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004994:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8004998:	2200      	movs	r2, #0
 800499a:	601a      	str	r2, [r3, #0]
 800499c:	605a      	str	r2, [r3, #4]
 800499e:	609a      	str	r2, [r3, #8]
 80049a0:	60da      	str	r2, [r3, #12]
 80049a2:	611a      	str	r2, [r3, #16]
 80049a4:	615a      	str	r2, [r3, #20]
 80049a6:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80049a8:	1d3b      	adds	r3, r7, #4
 80049aa:	2234      	movs	r2, #52	; 0x34
 80049ac:	2100      	movs	r1, #0
 80049ae:	4618      	mov	r0, r3
 80049b0:	f00e fb17 	bl	8012fe2 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80049b4:	4b45      	ldr	r3, [pc, #276]	; (8004acc <MX_TIM1_Init+0x158>)
 80049b6:	4a46      	ldr	r2, [pc, #280]	; (8004ad0 <MX_TIM1_Init+0x15c>)
 80049b8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80049ba:	4b44      	ldr	r3, [pc, #272]	; (8004acc <MX_TIM1_Init+0x158>)
 80049bc:	2200      	movs	r2, #0
 80049be:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80049c0:	4b42      	ldr	r3, [pc, #264]	; (8004acc <MX_TIM1_Init+0x158>)
 80049c2:	2200      	movs	r2, #0
 80049c4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 100;
 80049c6:	4b41      	ldr	r3, [pc, #260]	; (8004acc <MX_TIM1_Init+0x158>)
 80049c8:	2264      	movs	r2, #100	; 0x64
 80049ca:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80049cc:	4b3f      	ldr	r3, [pc, #252]	; (8004acc <MX_TIM1_Init+0x158>)
 80049ce:	2200      	movs	r2, #0
 80049d0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80049d2:	4b3e      	ldr	r3, [pc, #248]	; (8004acc <MX_TIM1_Init+0x158>)
 80049d4:	2200      	movs	r2, #0
 80049d6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80049d8:	4b3c      	ldr	r3, [pc, #240]	; (8004acc <MX_TIM1_Init+0x158>)
 80049da:	2200      	movs	r2, #0
 80049dc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80049de:	483b      	ldr	r0, [pc, #236]	; (8004acc <MX_TIM1_Init+0x158>)
 80049e0:	f005 fc18 	bl	800a214 <HAL_TIM_Base_Init>
 80049e4:	4603      	mov	r3, r0
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d001      	beq.n	80049ee <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 80049ea:	f000 feb1 	bl	8005750 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80049ee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80049f2:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80049f4:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80049f8:	4619      	mov	r1, r3
 80049fa:	4834      	ldr	r0, [pc, #208]	; (8004acc <MX_TIM1_Init+0x158>)
 80049fc:	f006 f8a4 	bl	800ab48 <HAL_TIM_ConfigClockSource>
 8004a00:	4603      	mov	r3, r0
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d001      	beq.n	8004a0a <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8004a06:	f000 fea3 	bl	8005750 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8004a0a:	4830      	ldr	r0, [pc, #192]	; (8004acc <MX_TIM1_Init+0x158>)
 8004a0c:	f005 fca8 	bl	800a360 <HAL_TIM_PWM_Init>
 8004a10:	4603      	mov	r3, r0
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d001      	beq.n	8004a1a <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8004a16:	f000 fe9b 	bl	8005750 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004a1a:	2300      	movs	r3, #0
 8004a1c:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8004a1e:	2300      	movs	r3, #0
 8004a20:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004a22:	2300      	movs	r3, #0
 8004a24:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8004a26:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8004a2a:	4619      	mov	r1, r3
 8004a2c:	4827      	ldr	r0, [pc, #156]	; (8004acc <MX_TIM1_Init+0x158>)
 8004a2e:	f006 fd11 	bl	800b454 <HAL_TIMEx_MasterConfigSynchronization>
 8004a32:	4603      	mov	r3, r0
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d001      	beq.n	8004a3c <MX_TIM1_Init+0xc8>
  {
    Error_Handler();
 8004a38:	f000 fe8a 	bl	8005750 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004a3c:	2360      	movs	r3, #96	; 0x60
 8004a3e:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 100;
 8004a40:	2364      	movs	r3, #100	; 0x64
 8004a42:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004a44:	2300      	movs	r3, #0
 8004a46:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8004a48:	2300      	movs	r3, #0
 8004a4a:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8004a4c:	2304      	movs	r3, #4
 8004a4e:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8004a50:	2300      	movs	r3, #0
 8004a52:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8004a54:	2300      	movs	r3, #0
 8004a56:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004a58:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8004a5c:	2200      	movs	r2, #0
 8004a5e:	4619      	mov	r1, r3
 8004a60:	481a      	ldr	r0, [pc, #104]	; (8004acc <MX_TIM1_Init+0x158>)
 8004a62:	f005 ff61 	bl	800a928 <HAL_TIM_PWM_ConfigChannel>
 8004a66:	4603      	mov	r3, r0
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d001      	beq.n	8004a70 <MX_TIM1_Init+0xfc>
  {
    Error_Handler();
 8004a6c:	f000 fe70 	bl	8005750 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8004a70:	2300      	movs	r3, #0
 8004a72:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8004a74:	2300      	movs	r3, #0
 8004a76:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8004a78:	2300      	movs	r3, #0
 8004a7a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8004a7c:	2300      	movs	r3, #0
 8004a7e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8004a80:	2300      	movs	r3, #0
 8004a82:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8004a84:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004a88:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8004a8a:	2300      	movs	r3, #0
 8004a8c:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8004a8e:	2300      	movs	r3, #0
 8004a90:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8004a92:	2300      	movs	r3, #0
 8004a94:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8004a96:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004a9a:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8004a9c:	2300      	movs	r3, #0
 8004a9e:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8004aa0:	2300      	movs	r3, #0
 8004aa2:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8004aa4:	2300      	movs	r3, #0
 8004aa6:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8004aa8:	1d3b      	adds	r3, r7, #4
 8004aaa:	4619      	mov	r1, r3
 8004aac:	4807      	ldr	r0, [pc, #28]	; (8004acc <MX_TIM1_Init+0x158>)
 8004aae:	f006 fd31 	bl	800b514 <HAL_TIMEx_ConfigBreakDeadTime>
 8004ab2:	4603      	mov	r3, r0
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d001      	beq.n	8004abc <MX_TIM1_Init+0x148>
  {
    Error_Handler();
 8004ab8:	f000 fe4a 	bl	8005750 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8004abc:	4803      	ldr	r0, [pc, #12]	; (8004acc <MX_TIM1_Init+0x158>)
 8004abe:	f001 f8a7 	bl	8005c10 <HAL_TIM_MspPostInit>

}
 8004ac2:	bf00      	nop
 8004ac4:	3770      	adds	r7, #112	; 0x70
 8004ac6:	46bd      	mov	sp, r7
 8004ac8:	bd80      	pop	{r7, pc}
 8004aca:	bf00      	nop
 8004acc:	20005298 	.word	0x20005298
 8004ad0:	40012c00 	.word	0x40012c00

08004ad4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8004ad4:	b580      	push	{r7, lr}
 8004ad6:	b086      	sub	sp, #24
 8004ad8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004ada:	1d3b      	adds	r3, r7, #4
 8004adc:	2200      	movs	r2, #0
 8004ade:	601a      	str	r2, [r3, #0]
 8004ae0:	605a      	str	r2, [r3, #4]
 8004ae2:	609a      	str	r2, [r3, #8]
 8004ae4:	60da      	str	r2, [r3, #12]
 8004ae6:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004ae8:	2004      	movs	r0, #4
 8004aea:	f7ff fc2b 	bl	8004344 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004aee:	2002      	movs	r0, #2
 8004af0:	f7ff fc28 	bl	8004344 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004af4:	2001      	movs	r0, #1
 8004af6:	f7ff fc25 	bl	8004344 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OLED_RESET_GPIO_Port, OLED_RESET_Pin, GPIO_PIN_RESET);
 8004afa:	2200      	movs	r2, #0
 8004afc:	2101      	movs	r1, #1
 8004afe:	4821      	ldr	r0, [pc, #132]	; (8004b84 <MX_GPIO_Init+0xb0>)
 8004b00:	f001 ffc2 	bl	8006a88 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : OLED_RESET_Pin */
  GPIO_InitStruct.Pin = OLED_RESET_Pin;
 8004b04:	2301      	movs	r3, #1
 8004b06:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004b08:	2301      	movs	r3, #1
 8004b0a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b0c:	2300      	movs	r3, #0
 8004b0e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004b10:	2300      	movs	r3, #0
 8004b12:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(OLED_RESET_GPIO_Port, &GPIO_InitStruct);
 8004b14:	1d3b      	adds	r3, r7, #4
 8004b16:	4619      	mov	r1, r3
 8004b18:	481a      	ldr	r0, [pc, #104]	; (8004b84 <MX_GPIO_Init+0xb0>)
 8004b1a:	f001 fe2d 	bl	8006778 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON_1_Pin BUTTON_2_Pin BUTTON_3_Pin */
  GPIO_InitStruct.Pin = BUTTON_1_Pin|BUTTON_2_Pin|BUTTON_3_Pin;
 8004b1e:	2338      	movs	r3, #56	; 0x38
 8004b20:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8004b22:	4b19      	ldr	r3, [pc, #100]	; (8004b88 <MX_GPIO_Init+0xb4>)
 8004b24:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004b26:	2301      	movs	r3, #1
 8004b28:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004b2a:	1d3b      	adds	r3, r7, #4
 8004b2c:	4619      	mov	r1, r3
 8004b2e:	4815      	ldr	r0, [pc, #84]	; (8004b84 <MX_GPIO_Init+0xb0>)
 8004b30:	f001 fe22 	bl	8006778 <HAL_GPIO_Init>

  /*Configure SPI_NSS pin to be GPIO, pulled up*/
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8004b34:	2310      	movs	r3, #16
 8004b36:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004b38:	2301      	movs	r3, #1
 8004b3a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004b3c:	2301      	movs	r3, #1
 8004b3e:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004b40:	1d3b      	adds	r3, r7, #4
 8004b42:	4619      	mov	r1, r3
 8004b44:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004b48:	f001 fe16 	bl	8006778 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI3_IRQn, 15, 0);
 8004b4c:	2200      	movs	r2, #0
 8004b4e:	210f      	movs	r1, #15
 8004b50:	2009      	movs	r0, #9
 8004b52:	f001 fbb9 	bl	80062c8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8004b56:	2009      	movs	r0, #9
 8004b58:	f001 fbd0 	bl	80062fc <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 15, 0);
 8004b5c:	2200      	movs	r2, #0
 8004b5e:	210f      	movs	r1, #15
 8004b60:	200a      	movs	r0, #10
 8004b62:	f001 fbb1 	bl	80062c8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8004b66:	200a      	movs	r0, #10
 8004b68:	f001 fbc8 	bl	80062fc <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 15, 0);
 8004b6c:	2200      	movs	r2, #0
 8004b6e:	210f      	movs	r1, #15
 8004b70:	2017      	movs	r0, #23
 8004b72:	f001 fba9 	bl	80062c8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8004b76:	2017      	movs	r0, #23
 8004b78:	f001 fbc0 	bl	80062fc <HAL_NVIC_EnableIRQ>

}
 8004b7c:	bf00      	nop
 8004b7e:	3718      	adds	r7, #24
 8004b80:	46bd      	mov	sp, r7
 8004b82:	bd80      	pop	{r7, pc}
 8004b84:	48000400 	.word	0x48000400
 8004b88:	10310000 	.word	0x10310000

08004b8c <HAL_GPIO_EXTI_Callback>:
static inline void clear_bit(long *x, int bitNum) {
    *x &= (~(1L << bitNum));
}


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8004b8c:	b580      	push	{r7, lr}
 8004b8e:	b086      	sub	sp, #24
 8004b90:	af02      	add	r7, sp, #8
 8004b92:	4603      	mov	r3, r0
 8004b94:	80fb      	strh	r3, [r7, #6]

	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8004b96:	2300      	movs	r3, #0
 8004b98:	60fb      	str	r3, [r7, #12]
	xTaskNotifyFromISR(buttonPressHandle, GPIO_Pin, eSetValueWithOverwrite, &xHigherPriorityTaskWoken);
 8004b9a:	4b0c      	ldr	r3, [pc, #48]	; (8004bcc <HAL_GPIO_EXTI_Callback+0x40>)
 8004b9c:	6818      	ldr	r0, [r3, #0]
 8004b9e:	88f9      	ldrh	r1, [r7, #6]
 8004ba0:	f107 030c 	add.w	r3, r7, #12
 8004ba4:	9300      	str	r3, [sp, #0]
 8004ba6:	2300      	movs	r3, #0
 8004ba8:	2203      	movs	r2, #3
 8004baa:	f00d fd2b 	bl	8012604 <xTaskGenericNotifyFromISR>
	portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d007      	beq.n	8004bc4 <HAL_GPIO_EXTI_Callback+0x38>
 8004bb4:	4b06      	ldr	r3, [pc, #24]	; (8004bd0 <HAL_GPIO_EXTI_Callback+0x44>)
 8004bb6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004bba:	601a      	str	r2, [r3, #0]
 8004bbc:	f3bf 8f4f 	dsb	sy
 8004bc0:	f3bf 8f6f 	isb	sy

}
 8004bc4:	bf00      	nop
 8004bc6:	3710      	adds	r7, #16
 8004bc8:	46bd      	mov	sp, r7
 8004bca:	bd80      	pop	{r7, pc}
 8004bcc:	20005084 	.word	0x20005084
 8004bd0:	e000ed04 	.word	0xe000ed04

08004bd4 <get_RTC_hrmin>:
    return full_rtc_val;

}


void get_RTC_hrmin(char *dest) {
 8004bd4:	b580      	push	{r7, lr}
 8004bd6:	b08c      	sub	sp, #48	; 0x30
 8004bd8:	af00      	add	r7, sp, #0
 8004bda:	6078      	str	r0, [r7, #4]

    RTC_TimeTypeDef cTime;
    RTC_DateTypeDef cDate;

    osMutexAcquire(rtcMutexHandle, portMAX_DELAY);
 8004bdc:	4b1d      	ldr	r3, [pc, #116]	; (8004c54 <get_RTC_hrmin+0x80>)
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	f04f 31ff 	mov.w	r1, #4294967295
 8004be4:	4618      	mov	r0, r3
 8004be6:	f00a fb15 	bl	800f214 <osMutexAcquire>
    HAL_RTC_GetTime(&hrtc, &cTime, RTC_FORMAT_BCD);
 8004bea:	f107 0318 	add.w	r3, r7, #24
 8004bee:	2201      	movs	r2, #1
 8004bf0:	4619      	mov	r1, r3
 8004bf2:	4819      	ldr	r0, [pc, #100]	; (8004c58 <get_RTC_hrmin+0x84>)
 8004bf4:	f004 fd87 	bl	8009706 <HAL_RTC_GetTime>
    //must get date as well; RTC shadow registers will error if both aren't accessed
    HAL_RTC_GetDate(&hrtc, &cDate, RTC_FORMAT_BCD);
 8004bf8:	f107 0314 	add.w	r3, r7, #20
 8004bfc:	2201      	movs	r2, #1
 8004bfe:	4619      	mov	r1, r3
 8004c00:	4815      	ldr	r0, [pc, #84]	; (8004c58 <get_RTC_hrmin+0x84>)
 8004c02:	f004 fe8a 	bl	800991a <HAL_RTC_GetDate>
    osMutexRelease(rtcMutexHandle);
 8004c06:	4b13      	ldr	r3, [pc, #76]	; (8004c54 <get_RTC_hrmin+0x80>)
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	4618      	mov	r0, r3
 8004c0c:	f00a fb60 	bl	800f2d0 <osMutexRelease>

    uint8_t  hrs = RTC_Bcd2ToByte(cTime.Hours);
 8004c10:	7e3b      	ldrb	r3, [r7, #24]
 8004c12:	4618      	mov	r0, r3
 8004c14:	f004 ff3e 	bl	8009a94 <RTC_Bcd2ToByte>
 8004c18:	4603      	mov	r3, r0
 8004c1a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    uint8_t mins = RTC_Bcd2ToByte(cTime.Minutes);
 8004c1e:	7e7b      	ldrb	r3, [r7, #25]
 8004c20:	4618      	mov	r0, r3
 8004c22:	f004 ff37 	bl	8009a94 <RTC_Bcd2ToByte>
 8004c26:	4603      	mov	r3, r0
 8004c28:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

    char time[5];
    sprintf (time, "%02d%02d", hrs, mins);
 8004c2c:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8004c30:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8004c34:	f107 000c 	add.w	r0, r7, #12
 8004c38:	4908      	ldr	r1, [pc, #32]	; (8004c5c <get_RTC_hrmin+0x88>)
 8004c3a:	f00e ff6b 	bl	8013b14 <siprintf>

    strncpy(dest, time, sizeof(time));
 8004c3e:	f107 030c 	add.w	r3, r7, #12
 8004c42:	2205      	movs	r2, #5
 8004c44:	4619      	mov	r1, r3
 8004c46:	6878      	ldr	r0, [r7, #4]
 8004c48:	f00e ff84 	bl	8013b54 <strncpy>

}
 8004c4c:	bf00      	nop
 8004c4e:	3730      	adds	r7, #48	; 0x30
 8004c50:	46bd      	mov	sp, r7
 8004c52:	bd80      	pop	{r7, pc}
 8004c54:	2000534c 	.word	0x2000534c
 8004c58:	20005260 	.word	0x20005260
 8004c5c:	08016354 	.word	0x08016354

08004c60 <startScreenUpdate>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_startScreenUpdate */
void startScreenUpdate(void *argument)
{
 8004c60:	b580      	push	{r7, lr}
 8004c62:	f5ad 7d04 	sub.w	sp, sp, #528	; 0x210
 8004c66:	af02      	add	r7, sp, #8
 8004c68:	1d3b      	adds	r3, r7, #4
 8004c6a:	6018      	str	r0, [r3, #0]
  /* USER CODE BEGIN 5 */
  HAL_GPIO_WritePin(OLED_RESET_GPIO_Port, OLED_RESET_Pin, GPIO_PIN_SET);
 8004c6c:	2201      	movs	r2, #1
 8004c6e:	2101      	movs	r1, #1
 8004c70:	4870      	ldr	r0, [pc, #448]	; (8004e34 <startScreenUpdate+0x1d4>)
 8004c72:	f001 ff09 	bl	8006a88 <HAL_GPIO_WritePin>

  uint8_t oled_buf[WIDTH * HEIGHT / 8];

  er_oled_begin();
 8004c76:	f7fd fe27 	bl	80028c8 <er_oled_begin>
  er_oled_clear(oled_buf);
 8004c7a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8004c7e:	4618      	mov	r0, r3
 8004c80:	f7fd fe8a 	bl	8002998 <er_oled_clear>
  er_oled_string(6, 14, "DRAMSAY", 12, 1, oled_buf);
 8004c84:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8004c88:	9301      	str	r3, [sp, #4]
 8004c8a:	2301      	movs	r3, #1
 8004c8c:	9300      	str	r3, [sp, #0]
 8004c8e:	230c      	movs	r3, #12
 8004c90:	4a69      	ldr	r2, [pc, #420]	; (8004e38 <startScreenUpdate+0x1d8>)
 8004c92:	210e      	movs	r1, #14
 8004c94:	2006      	movs	r0, #6
 8004c96:	f7fd ffef 	bl	8002c78 <er_oled_string>
  er_oled_display(oled_buf);
 8004c9a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8004c9e:	4618      	mov	r0, r3
 8004ca0:	f7fe f875 	bl	8002d8e <er_oled_display>

  osDelay(3000);
 8004ca4:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8004ca8:	f00a f9ec 	bl	800f084 <osDelay>
  er_oled_clear(oled_buf);
 8004cac:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8004cb0:	4618      	mov	r0, r3
 8004cb2:	f7fd fe71 	bl	8002998 <er_oled_clear>
  er_oled_display(oled_buf);
 8004cb6:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8004cba:	4618      	mov	r0, r3
 8004cbc:	f7fe f867 	bl	8002d8e <er_oled_display>


  ScreenStatus_t screenStatus= SCREEN_TIME;
 8004cc0:	f107 039b 	add.w	r3, r7, #155	; 0x9b
 8004cc4:	2201      	movs	r2, #1
 8004cc6:	701a      	strb	r2, [r3, #0]
  /* Infinite loop */
  for(;;)
  {

	  	//wait for someone to update screen state elsewhere and notify
	  	xTaskNotifyWait(0x00, 0x00, &screenStatus, portMAX_DELAY);
 8004cc8:	f107 029b 	add.w	r2, r7, #155	; 0x9b
 8004ccc:	f04f 33ff 	mov.w	r3, #4294967295
 8004cd0:	2100      	movs	r1, #0
 8004cd2:	2000      	movs	r0, #0
 8004cd4:	f00d fb86 	bl	80123e4 <xTaskNotifyWait>
	  	switch(screenStatus){
 8004cd8:	f107 039b 	add.w	r3, r7, #155	; 0x9b
 8004cdc:	781b      	ldrb	r3, [r3, #0]
 8004cde:	3b01      	subs	r3, #1
 8004ce0:	2b03      	cmp	r3, #3
 8004ce2:	f200 809a 	bhi.w	8004e1a <startScreenUpdate+0x1ba>
 8004ce6:	a201      	add	r2, pc, #4	; (adr r2, 8004cec <startScreenUpdate+0x8c>)
 8004ce8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cec:	08004cfd 	.word	0x08004cfd
 8004cf0:	08004e31 	.word	0x08004e31
 8004cf4:	08004dc1 	.word	0x08004dc1
 8004cf8:	08004d13 	.word	0x08004d13
	  			case SCREEN_TIME:
	  				//test time
	  				//er_oled_time("1743");

	  				//only hrmin
	  				get_RTC_hrmin(time);
 8004cfc:	f107 030c 	add.w	r3, r7, #12
 8004d00:	4618      	mov	r0, r3
 8004d02:	f7ff ff67 	bl	8004bd4 <get_RTC_hrmin>
	  				er_oled_time(time);
 8004d06:	f107 030c 	add.w	r3, r7, #12
 8004d0a:	4618      	mov	r0, r3
 8004d0c:	f7fe f877 	bl	8002dfe <er_oled_time>
	  				//get_RTC_hrminsec(time);
	  				//er_oled_clear(oled_buf);
	  				//er_oled_string(0, 14, time, 12, 1, oled_buf);
	  				//er_oled_display(oled_buf);

	  				break;
 8004d10:	e08f      	b.n	8004e32 <startScreenUpdate+0x1d2>

	  				break;

	  			case SCREEN_IMAGE:

	  				er_oled_clear(oled_buf);
 8004d12:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8004d16:	4618      	mov	r0, r3
 8004d18:	f7fd fe3e 	bl	8002998 <er_oled_clear>

	  				osMutexAcquire(screenTextMutexHandle, portMAX_DELAY);
 8004d1c:	4b47      	ldr	r3, [pc, #284]	; (8004e3c <startScreenUpdate+0x1dc>)
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	f04f 31ff 	mov.w	r1, #4294967295
 8004d24:	4618      	mov	r0, r3
 8004d26:	f00a fa75 	bl	800f214 <osMutexAcquire>
	  				imageNum = ScreenState.screenImage;
 8004d2a:	4b45      	ldr	r3, [pc, #276]	; (8004e40 <startScreenUpdate+0x1e0>)
 8004d2c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004d30:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
	  				osMutexRelease(screenTextMutexHandle);
 8004d34:	4b41      	ldr	r3, [pc, #260]	; (8004e3c <startScreenUpdate+0x1dc>)
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	4618      	mov	r0, r3
 8004d3a:	f00a fac9 	bl	800f2d0 <osMutexRelease>

	  				if (imageNum == 1){er_oled_bitmap(0, 0, PIC1, 72, 40, oled_buf);}
 8004d3e:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 8004d42:	2b01      	cmp	r3, #1
 8004d44:	d10b      	bne.n	8004d5e <startScreenUpdate+0xfe>
 8004d46:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8004d4a:	9301      	str	r3, [sp, #4]
 8004d4c:	2328      	movs	r3, #40	; 0x28
 8004d4e:	9300      	str	r3, [sp, #0]
 8004d50:	2348      	movs	r3, #72	; 0x48
 8004d52:	4a3c      	ldr	r2, [pc, #240]	; (8004e44 <startScreenUpdate+0x1e4>)
 8004d54:	2100      	movs	r1, #0
 8004d56:	2000      	movs	r0, #0
 8004d58:	f7fd ffcf 	bl	8002cfa <er_oled_bitmap>
 8004d5c:	e01a      	b.n	8004d94 <startScreenUpdate+0x134>
	  				else if (imageNum == 2) {er_oled_bitmap(0, 0, PIC2, 72, 40, oled_buf);}
 8004d5e:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 8004d62:	2b02      	cmp	r3, #2
 8004d64:	d10b      	bne.n	8004d7e <startScreenUpdate+0x11e>
 8004d66:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8004d6a:	9301      	str	r3, [sp, #4]
 8004d6c:	2328      	movs	r3, #40	; 0x28
 8004d6e:	9300      	str	r3, [sp, #0]
 8004d70:	2348      	movs	r3, #72	; 0x48
 8004d72:	4a35      	ldr	r2, [pc, #212]	; (8004e48 <startScreenUpdate+0x1e8>)
 8004d74:	2100      	movs	r1, #0
 8004d76:	2000      	movs	r0, #0
 8004d78:	f7fd ffbf 	bl	8002cfa <er_oled_bitmap>
 8004d7c:	e00a      	b.n	8004d94 <startScreenUpdate+0x134>
	  				else {er_oled_string(0, 14, "invalid image number", 24, 1, oled_buf);}
 8004d7e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8004d82:	9301      	str	r3, [sp, #4]
 8004d84:	2301      	movs	r3, #1
 8004d86:	9300      	str	r3, [sp, #0]
 8004d88:	2318      	movs	r3, #24
 8004d8a:	4a30      	ldr	r2, [pc, #192]	; (8004e4c <startScreenUpdate+0x1ec>)
 8004d8c:	210e      	movs	r1, #14
 8004d8e:	2000      	movs	r0, #0
 8004d90:	f7fd ff72 	bl	8002c78 <er_oled_string>

	  				er_oled_display(oled_buf);
 8004d94:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8004d98:	4618      	mov	r0, r3
 8004d9a:	f7fd fff8 	bl	8002d8e <er_oled_display>
	  				osDelay(1000);
 8004d9e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004da2:	f00a f96f 	bl	800f084 <osDelay>
	  				command(0xa7);//--set Negative display
 8004da6:	2100      	movs	r1, #0
 8004da8:	20a7      	movs	r0, #167	; 0xa7
 8004daa:	f7fd fd6f 	bl	800288c <I2C_Write_Byte>
	  				osDelay(1000);
 8004dae:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004db2:	f00a f967 	bl	800f084 <osDelay>
	  				command(0xa6);//--set normal display
 8004db6:	2100      	movs	r1, #0
 8004db8:	20a6      	movs	r0, #166	; 0xa6
 8004dba:	f7fd fd67 	bl	800288c <I2C_Write_Byte>
	  				break;
 8004dbe:	e038      	b.n	8004e32 <startScreenUpdate+0x1d2>

	  			case SCREEN_TEXT:

	  				osMutexAcquire(screenTextMutexHandle, portMAX_DELAY);
 8004dc0:	4b1e      	ldr	r3, [pc, #120]	; (8004e3c <startScreenUpdate+0x1dc>)
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	f04f 31ff 	mov.w	r1, #4294967295
 8004dc8:	4618      	mov	r0, r3
 8004dca:	f00a fa23 	bl	800f214 <osMutexAcquire>
	  				strncpy(screenText, ScreenState.screenText, sizeof(ScreenState.screenText));
 8004dce:	f107 0318 	add.w	r3, r7, #24
 8004dd2:	2280      	movs	r2, #128	; 0x80
 8004dd4:	491a      	ldr	r1, [pc, #104]	; (8004e40 <startScreenUpdate+0x1e0>)
 8004dd6:	4618      	mov	r0, r3
 8004dd8:	f00e febc 	bl	8013b54 <strncpy>
	  				osMutexRelease(screenTextMutexHandle);
 8004ddc:	4b17      	ldr	r3, [pc, #92]	; (8004e3c <startScreenUpdate+0x1dc>)
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	4618      	mov	r0, r3
 8004de2:	f00a fa75 	bl	800f2d0 <osMutexRelease>
	  				er_oled_clear(oled_buf);
 8004de6:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8004dea:	4618      	mov	r0, r3
 8004dec:	f7fd fdd4 	bl	8002998 <er_oled_clear>
	  				er_oled_string(0, 14, screenText, 12, 1, oled_buf);
 8004df0:	f107 0218 	add.w	r2, r7, #24
 8004df4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8004df8:	9301      	str	r3, [sp, #4]
 8004dfa:	2301      	movs	r3, #1
 8004dfc:	9300      	str	r3, [sp, #0]
 8004dfe:	230c      	movs	r3, #12
 8004e00:	210e      	movs	r1, #14
 8004e02:	2000      	movs	r0, #0
 8004e04:	f7fd ff38 	bl	8002c78 <er_oled_string>
	  				er_oled_display(oled_buf);
 8004e08:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8004e0c:	4618      	mov	r0, r3
 8004e0e:	f7fd ffbe 	bl	8002d8e <er_oled_display>
	  				osDelay(5);
 8004e12:	2005      	movs	r0, #5
 8004e14:	f00a f936 	bl	800f084 <osDelay>
	  				break;
 8004e18:	e00b      	b.n	8004e32 <startScreenUpdate+0x1d2>

	  			default: //includes SCREEN_OFF
	  				er_oled_clear(oled_buf);
 8004e1a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8004e1e:	4618      	mov	r0, r3
 8004e20:	f7fd fdba 	bl	8002998 <er_oled_clear>
	  				er_oled_display(oled_buf);
 8004e24:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8004e28:	4618      	mov	r0, r3
 8004e2a:	f7fd ffb0 	bl	8002d8e <er_oled_display>
	  				break;
 8004e2e:	e000      	b.n	8004e32 <startScreenUpdate+0x1d2>
	  				break;
 8004e30:	bf00      	nop
	  	xTaskNotifyWait(0x00, 0x00, &screenStatus, portMAX_DELAY);
 8004e32:	e749      	b.n	8004cc8 <startScreenUpdate+0x68>
 8004e34:	48000400 	.word	0x48000400
 8004e38:	08016370 	.word	0x08016370
 8004e3c:	200050dc 	.word	0x200050dc
 8004e40:	200053b4 	.word	0x200053b4
 8004e44:	08017348 	.word	0x08017348
 8004e48:	080174b0 	.word	0x080174b0
 8004e4c:	08016378 	.word	0x08016378

08004e50 <startLEDControl>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_startLEDControl */
void startLEDControl(void *argument)
{
 8004e50:	b580      	push	{r7, lr}
 8004e52:	b08a      	sub	sp, #40	; 0x28
 8004e54:	af00      	add	r7, sp, #0
 8004e56:	6078      	str	r0, [r7, #4]
    //osMutexAcquire(ledStateMutexHandle, portMAX_DELAY);
   	//LedState.currentMode = LED_CONFIRM_FLASH;
   	//osMutexRelease(ledStateMutexHandle);

  //For LED to work on new board (multiplexed with SPI_NSS), we need to pull PA4 high
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8004e58:	2201      	movs	r2, #1
 8004e5a:	2110      	movs	r1, #16
 8004e5c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004e60:	f001 fe12 	bl	8006a88 <HAL_GPIO_WritePin>


  //LedState Init
  osMutexAcquire(ledStateMutexHandle, portMAX_DELAY);
 8004e64:	4b98      	ldr	r3, [pc, #608]	; (80050c8 <startLEDControl+0x278>)
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	f04f 31ff 	mov.w	r1, #4294967295
 8004e6c:	4618      	mov	r0, r3
 8004e6e:	f00a f9d1 	bl	800f214 <osMutexAcquire>
  LedState.currentMode = LED_SPIRAL;
 8004e72:	4b96      	ldr	r3, [pc, #600]	; (80050cc <startLEDControl+0x27c>)
 8004e74:	2205      	movs	r2, #5
 8004e76:	701a      	strb	r2, [r3, #0]
  LedState.nextMode = LED_OFF;
 8004e78:	4b94      	ldr	r3, [pc, #592]	; (80050cc <startLEDControl+0x27c>)
 8004e7a:	2201      	movs	r2, #1
 8004e7c:	705a      	strb	r2, [r3, #1]
  LedState.modeTimeout = pdMS_TO_TICKS(5000);
 8004e7e:	4b93      	ldr	r3, [pc, #588]	; (80050cc <startLEDControl+0x27c>)
 8004e80:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e84:	605a      	str	r2, [r3, #4]
  osMutexRelease(ledStateMutexHandle);
 8004e86:	4b90      	ldr	r3, [pc, #576]	; (80050c8 <startLEDControl+0x278>)
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	4618      	mov	r0, r3
 8004e8c:	f00a fa20 	bl	800f2d0 <osMutexRelease>

  //Dotstar Init
  DotStar_InitHandle dotstar;
  dotstar.spiHandle = &hspi1;
 8004e90:	4b8f      	ldr	r3, [pc, #572]	; (80050d0 <startLEDControl+0x280>)
 8004e92:	60fb      	str	r3, [r7, #12]
  dotstar.numLEDs = NUM_PIXELS;
 8004e94:	230c      	movs	r3, #12
 8004e96:	823b      	strh	r3, [r7, #16]
  dotstar.colorOrder = DOTSTAR_BGR;
 8004e98:	2306      	movs	r3, #6
 8004e9a:	74bb      	strb	r3, [r7, #18]
  Dotstar_Init(&dotstar);
 8004e9c:	f107 030c 	add.w	r3, r7, #12
 8004ea0:	4618      	mov	r0, r3
 8004ea2:	f7fd fb65 	bl	8002570 <Dotstar_Init>

  ds_clear();  //turn off
 8004ea6:	f7fd fc4f 	bl	8002748 <ds_clear>
  ds_show();
 8004eaa:	f7fd fbb1 	bl	8002610 <ds_show>

  const uint8_t STANDARD_BRIGHTNESS = 20; //20, 0-255
 8004eae:	2314      	movs	r3, #20
 8004eb0:	75fb      	strb	r3, [r7, #23]
  const uint8_t MAX_BRIGHTNESS = 0x33; //max brightness, 0x01-0xFF
 8004eb2:	2333      	movs	r3, #51	; 0x33
 8004eb4:	75bb      	strb	r3, [r7, #22]

  ds_setBrightness(STANDARD_BRIGHTNESS);
 8004eb6:	7dfb      	ldrb	r3, [r7, #23]
 8004eb8:	4618      	mov	r0, r3
 8004eba:	f7fd fcd5 	bl	8002868 <ds_setBrightness>
  osDelay(1000);
 8004ebe:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004ec2:	f00a f8df 	bl	800f084 <osDelay>

  LedStatus_t currentMode;
  LedStatus_t lastLoopMode = LED_OFF;
 8004ec6:	2301      	movs	r3, #1
 8004ec8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  uint16_t counter = 0;
 8004ecc:	2300      	movs	r3, #0
 8004ece:	84bb      	strh	r3, [r7, #36]	; 0x24
  uint8_t stateVar1 = 0;
 8004ed0:	2300      	movs	r3, #0
 8004ed2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t stateVar2 = 0;
 8004ed6:	2300      	movs	r3, #0
 8004ed8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  uint32_t color = 0x000000;
 8004edc:	2300      	movs	r3, #0
 8004ede:	61fb      	str	r3, [r7, #28]
  /* Infinite loop */
  for(;;)
  {
    //check state, get mode, call timer if necessary

    osMutexAcquire(ledStateMutexHandle, portMAX_DELAY);
 8004ee0:	4b79      	ldr	r3, [pc, #484]	; (80050c8 <startLEDControl+0x278>)
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	f04f 31ff 	mov.w	r1, #4294967295
 8004ee8:	4618      	mov	r0, r3
 8004eea:	f00a f993 	bl	800f214 <osMutexAcquire>
	currentMode = LedState.currentMode;
 8004eee:	4b77      	ldr	r3, [pc, #476]	; (80050cc <startLEDControl+0x27c>)
 8004ef0:	781b      	ldrb	r3, [r3, #0]
 8004ef2:	757b      	strb	r3, [r7, #21]
	if (LedState.modeTimeout){
 8004ef4:	4b75      	ldr	r3, [pc, #468]	; (80050cc <startLEDControl+0x27c>)
 8004ef6:	685b      	ldr	r3, [r3, #4]
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d006      	beq.n	8004f0a <startLEDControl+0xba>
		xTaskNotifyGive(LEDTimerHandle);
 8004efc:	4b75      	ldr	r3, [pc, #468]	; (80050d4 <startLEDControl+0x284>)
 8004efe:	6818      	ldr	r0, [r3, #0]
 8004f00:	2300      	movs	r3, #0
 8004f02:	2202      	movs	r2, #2
 8004f04:	2100      	movs	r1, #0
 8004f06:	f00d fac7 	bl	8012498 <xTaskGenericNotify>
	}
	osMutexRelease(ledStateMutexHandle);
 8004f0a:	4b6f      	ldr	r3, [pc, #444]	; (80050c8 <startLEDControl+0x278>)
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	4618      	mov	r0, r3
 8004f10:	f00a f9de 	bl	800f2d0 <osMutexRelease>

	//reset count if we've switched modes
	if (lastLoopMode != currentMode) { counter = 0; stateVar1 = 0; stateVar2 = 0;}
 8004f14:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8004f18:	7d7b      	ldrb	r3, [r7, #21]
 8004f1a:	429a      	cmp	r2, r3
 8004f1c:	d007      	beq.n	8004f2e <startLEDControl+0xde>
 8004f1e:	2300      	movs	r3, #0
 8004f20:	84bb      	strh	r3, [r7, #36]	; 0x24
 8004f22:	2300      	movs	r3, #0
 8004f24:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004f28:	2300      	movs	r3, #0
 8004f2a:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

	switch(currentMode){
 8004f2e:	7d7b      	ldrb	r3, [r7, #21]
 8004f30:	3b02      	subs	r3, #2
 8004f32:	2b03      	cmp	r3, #3
 8004f34:	f200 80b3 	bhi.w	800509e <startLEDControl+0x24e>
 8004f38:	a201      	add	r2, pc, #4	; (adr r2, 8004f40 <startLEDControl+0xf0>)
 8004f3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f3e:	bf00      	nop
 8004f40:	080050b9 	.word	0x080050b9
 8004f44:	080050b9 	.word	0x080050b9
 8004f48:	08004f51 	.word	0x08004f51
 8004f4c:	08004ff7 	.word	0x08004ff7

			break;
		case LED_CONFIRM_FLASH:

			//each color go from 00 to MAX_BRIGHTNESS to 00 over a second, 1000Hz=sec, ~512 steps, 2ms
			if (lastLoopMode != currentMode) { ds_fill(0xFFFFFF, 0, 12);}
 8004f50:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8004f54:	7d7b      	ldrb	r3, [r7, #21]
 8004f56:	429a      	cmp	r2, r3
 8004f58:	d005      	beq.n	8004f66 <startLEDControl+0x116>
 8004f5a:	220c      	movs	r2, #12
 8004f5c:	2100      	movs	r1, #0
 8004f5e:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8004f62:	f7fd fc4b 	bl	80027fc <ds_fill>
		    ds_setBrightness(stateVar1);
 8004f66:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004f6a:	4618      	mov	r0, r3
 8004f6c:	f7fd fc7c 	bl	8002868 <ds_setBrightness>
			ds_show();
 8004f70:	f7fd fb4e 	bl	8002610 <ds_show>

		    //increment color intensity
		    if (stateVar2) {stateVar1--;}
 8004f74:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d005      	beq.n	8004f88 <startLEDControl+0x138>
 8004f7c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004f80:	3b01      	subs	r3, #1
 8004f82:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004f86:	e004      	b.n	8004f92 <startLEDControl+0x142>
		    else {stateVar1++;}
 8004f88:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004f8c:	3301      	adds	r3, #1
 8004f8e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

		    //if we hit a limit switch color scaling up or down
		    if (stateVar1 == MAX_BRIGHTNESS) {stateVar2 = 1;}
 8004f92:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8004f96:	7dbb      	ldrb	r3, [r7, #22]
 8004f98:	429a      	cmp	r2, r3
 8004f9a:	d102      	bne.n	8004fa2 <startLEDControl+0x152>
 8004f9c:	2301      	movs	r3, #1
 8004f9e:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
		    if (stateVar1 == 0x00) {stateVar2 = 0;}
 8004fa2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d102      	bne.n	8004fb0 <startLEDControl+0x160>
 8004faa:	2300      	movs	r3, #0
 8004fac:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

			osDelay(pdMS_TO_TICKS(2)); //2ms delay
 8004fb0:	2002      	movs	r0, #2
 8004fb2:	f00a f867 	bl	800f084 <osDelay>

			if (++counter == (MAX_BRIGHTNESS*4)) { //if we hit 1 cycle here (= MAX_BRIGHTNESS*2,could *4 to set to two full cycles), set state to off
 8004fb6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004fb8:	3301      	adds	r3, #1
 8004fba:	84bb      	strh	r3, [r7, #36]	; 0x24
 8004fbc:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004fbe:	7dbb      	ldrb	r3, [r7, #22]
 8004fc0:	009b      	lsls	r3, r3, #2
 8004fc2:	429a      	cmp	r2, r3
 8004fc4:	d17a      	bne.n	80050bc <startLEDControl+0x26c>
				ds_clear();
 8004fc6:	f7fd fbbf 	bl	8002748 <ds_clear>
				ds_show();
 8004fca:	f7fd fb21 	bl	8002610 <ds_show>
				ds_setBrightness(STANDARD_BRIGHTNESS);
 8004fce:	7dfb      	ldrb	r3, [r7, #23]
 8004fd0:	4618      	mov	r0, r3
 8004fd2:	f7fd fc49 	bl	8002868 <ds_setBrightness>

				osMutexAcquire(ledStateMutexHandle, portMAX_DELAY);
 8004fd6:	4b3c      	ldr	r3, [pc, #240]	; (80050c8 <startLEDControl+0x278>)
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	f04f 31ff 	mov.w	r1, #4294967295
 8004fde:	4618      	mov	r0, r3
 8004fe0:	f00a f918 	bl	800f214 <osMutexAcquire>
				LedState.currentMode = LED_OFF;
 8004fe4:	4b39      	ldr	r3, [pc, #228]	; (80050cc <startLEDControl+0x27c>)
 8004fe6:	2201      	movs	r2, #1
 8004fe8:	701a      	strb	r2, [r3, #0]
				osMutexRelease(ledStateMutexHandle);
 8004fea:	4b37      	ldr	r3, [pc, #220]	; (80050c8 <startLEDControl+0x278>)
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	4618      	mov	r0, r3
 8004ff0:	f00a f96e 	bl	800f2d0 <osMutexRelease>
			}

			break;
 8004ff4:	e062      	b.n	80050bc <startLEDControl+0x26c>

		case LED_SPIRAL:

			//rotate fixed pattern around 12
			//modulo 12
			for (int i=0; i< NUM_PIXELS; i++){
 8004ff6:	2300      	movs	r3, #0
 8004ff8:	61bb      	str	r3, [r7, #24]
 8004ffa:	e038      	b.n	800506e <startLEDControl+0x21e>

				if (i==(counter+2)%12){ color = 0xFFFFFF; }
 8004ffc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004ffe:	1c99      	adds	r1, r3, #2
 8005000:	4b35      	ldr	r3, [pc, #212]	; (80050d8 <startLEDControl+0x288>)
 8005002:	fb83 2301 	smull	r2, r3, r3, r1
 8005006:	105a      	asrs	r2, r3, #1
 8005008:	17cb      	asrs	r3, r1, #31
 800500a:	1ad2      	subs	r2, r2, r3
 800500c:	4613      	mov	r3, r2
 800500e:	005b      	lsls	r3, r3, #1
 8005010:	4413      	add	r3, r2
 8005012:	009b      	lsls	r3, r3, #2
 8005014:	1aca      	subs	r2, r1, r3
 8005016:	69bb      	ldr	r3, [r7, #24]
 8005018:	4293      	cmp	r3, r2
 800501a:	d103      	bne.n	8005024 <startLEDControl+0x1d4>
 800501c:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8005020:	61fb      	str	r3, [r7, #28]
 8005022:	e01b      	b.n	800505c <startLEDControl+0x20c>
				else if (i==(counter+1)%12){ color = 0xD0D0D0; }
 8005024:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005026:	1c59      	adds	r1, r3, #1
 8005028:	4b2b      	ldr	r3, [pc, #172]	; (80050d8 <startLEDControl+0x288>)
 800502a:	fb83 2301 	smull	r2, r3, r3, r1
 800502e:	105a      	asrs	r2, r3, #1
 8005030:	17cb      	asrs	r3, r1, #31
 8005032:	1ad2      	subs	r2, r2, r3
 8005034:	4613      	mov	r3, r2
 8005036:	005b      	lsls	r3, r3, #1
 8005038:	4413      	add	r3, r2
 800503a:	009b      	lsls	r3, r3, #2
 800503c:	1aca      	subs	r2, r1, r3
 800503e:	69bb      	ldr	r3, [r7, #24]
 8005040:	4293      	cmp	r3, r2
 8005042:	d102      	bne.n	800504a <startLEDControl+0x1fa>
 8005044:	4b25      	ldr	r3, [pc, #148]	; (80050dc <startLEDControl+0x28c>)
 8005046:	61fb      	str	r3, [r7, #28]
 8005048:	e008      	b.n	800505c <startLEDControl+0x20c>
				else if (i==counter)       { color = 0xA0A0A0; }
 800504a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800504c:	69ba      	ldr	r2, [r7, #24]
 800504e:	429a      	cmp	r2, r3
 8005050:	d102      	bne.n	8005058 <startLEDControl+0x208>
 8005052:	4b23      	ldr	r3, [pc, #140]	; (80050e0 <startLEDControl+0x290>)
 8005054:	61fb      	str	r3, [r7, #28]
 8005056:	e001      	b.n	800505c <startLEDControl+0x20c>
				else { color = 0x000000; }
 8005058:	2300      	movs	r3, #0
 800505a:	61fb      	str	r3, [r7, #28]

				ds_setPixelColor32B(i, color); // 'off' pixel at head
 800505c:	69bb      	ldr	r3, [r7, #24]
 800505e:	b29b      	uxth	r3, r3
 8005060:	69f9      	ldr	r1, [r7, #28]
 8005062:	4618      	mov	r0, r3
 8005064:	f7fd fb94 	bl	8002790 <ds_setPixelColor32B>
			for (int i=0; i< NUM_PIXELS; i++){
 8005068:	69bb      	ldr	r3, [r7, #24]
 800506a:	3301      	adds	r3, #1
 800506c:	61bb      	str	r3, [r7, #24]
 800506e:	69bb      	ldr	r3, [r7, #24]
 8005070:	2b0b      	cmp	r3, #11
 8005072:	ddc3      	ble.n	8004ffc <startLEDControl+0x1ac>
			}

			ds_show();
 8005074:	f7fd facc 	bl	8002610 <ds_show>
			counter = (counter+1)%12;
 8005078:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800507a:	1c5a      	adds	r2, r3, #1
 800507c:	4b16      	ldr	r3, [pc, #88]	; (80050d8 <startLEDControl+0x288>)
 800507e:	fb83 1302 	smull	r1, r3, r3, r2
 8005082:	1059      	asrs	r1, r3, #1
 8005084:	17d3      	asrs	r3, r2, #31
 8005086:	1ac9      	subs	r1, r1, r3
 8005088:	460b      	mov	r3, r1
 800508a:	005b      	lsls	r3, r3, #1
 800508c:	440b      	add	r3, r1
 800508e:	009b      	lsls	r3, r3, #2
 8005090:	1ad1      	subs	r1, r2, r3
 8005092:	460b      	mov	r3, r1
 8005094:	84bb      	strh	r3, [r7, #36]	; 0x24
			osDelay(pdMS_TO_TICKS(50));
 8005096:	2032      	movs	r0, #50	; 0x32
 8005098:	f009 fff4 	bl	800f084 <osDelay>

			break;
 800509c:	e00f      	b.n	80050be <startLEDControl+0x26e>

		default: //case LED_OTHER, LED_OFF, LED_NONE
			if (lastLoopMode != currentMode) {
 800509e:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80050a2:	7d7b      	ldrb	r3, [r7, #21]
 80050a4:	429a      	cmp	r2, r3
 80050a6:	d003      	beq.n	80050b0 <startLEDControl+0x260>
				ds_clear();
 80050a8:	f7fd fb4e 	bl	8002748 <ds_clear>
				ds_show();
 80050ac:	f7fd fab0 	bl	8002610 <ds_show>
			}
			osDelay(250);
 80050b0:	20fa      	movs	r0, #250	; 0xfa
 80050b2:	f009 ffe7 	bl	800f084 <osDelay>
			break;
 80050b6:	e002      	b.n	80050be <startLEDControl+0x26e>
			break;
 80050b8:	bf00      	nop
 80050ba:	e000      	b.n	80050be <startLEDControl+0x26e>
			break;
 80050bc:	bf00      	nop
	}

	lastLoopMode = currentMode;
 80050be:	7d7b      	ldrb	r3, [r7, #21]
 80050c0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    osMutexAcquire(ledStateMutexHandle, portMAX_DELAY);
 80050c4:	e70c      	b.n	8004ee0 <startLEDControl+0x90>
 80050c6:	bf00      	nop
 80050c8:	20005294 	.word	0x20005294
 80050cc:	20005258 	.word	0x20005258
 80050d0:	20005350 	.word	0x20005350
 80050d4:	2000508c 	.word	0x2000508c
 80050d8:	2aaaaaab 	.word	0x2aaaaaab
 80050dc:	00d0d0d0 	.word	0x00d0d0d0
 80050e0:	00a0a0a0 	.word	0x00a0a0a0

080050e4 <startButtonPress>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_startButtonPress */
void startButtonPress(void *argument)
{
 80050e4:	b580      	push	{r7, lr}
 80050e6:	b086      	sub	sp, #24
 80050e8:	af00      	add	r7, sp, #0
 80050ea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN startButtonPress */
  /* Infinite loop */

  //Buttons are PULLED UP and drop to 0 when pressed
  uint8_t buttonState[] = {1, 1, 1};
 80050ec:	4a45      	ldr	r2, [pc, #276]	; (8005204 <startButtonPress+0x120>)
 80050ee:	f107 0314 	add.w	r3, r7, #20
 80050f2:	6812      	ldr	r2, [r2, #0]
 80050f4:	4611      	mov	r1, r2
 80050f6:	8019      	strh	r1, [r3, #0]
 80050f8:	3302      	adds	r3, #2
 80050fa:	0c12      	lsrs	r2, r2, #16
 80050fc:	701a      	strb	r2, [r3, #0]
  uint32_t callingPin = 0x00;
 80050fe:	2300      	movs	r3, #0
 8005100:	613b      	str	r3, [r7, #16]

  for(;;)
  {
	//wait for rising or falling edge trigger, put calling pin in callingPin
	xTaskNotifyWait(0x00, 0x00, &callingPin, portMAX_DELAY);
 8005102:	f107 0210 	add.w	r2, r7, #16
 8005106:	f04f 33ff 	mov.w	r3, #4294967295
 800510a:	2100      	movs	r1, #0
 800510c:	2000      	movs	r0, #0
 800510e:	f00d f969 	bl	80123e4 <xTaskNotifyWait>

	//check state of pin
	GPIO_PinState first_read = HAL_GPIO_ReadPin(GPIOB, callingPin);
 8005112:	693b      	ldr	r3, [r7, #16]
 8005114:	b29b      	uxth	r3, r3
 8005116:	4619      	mov	r1, r3
 8005118:	483b      	ldr	r0, [pc, #236]	; (8005208 <startButtonPress+0x124>)
 800511a:	f001 fc9d 	bl	8006a58 <HAL_GPIO_ReadPin>
 800511e:	4603      	mov	r3, r0
 8005120:	75fb      	strb	r3, [r7, #23]

	//wait 50ms
    osDelay(50);
 8005122:	2032      	movs	r0, #50	; 0x32
 8005124:	f009 ffae 	bl	800f084 <osDelay>

    //check again (debounce) to get a good reading
	if (first_read == HAL_GPIO_ReadPin(GPIOB, callingPin)){
 8005128:	693b      	ldr	r3, [r7, #16]
 800512a:	b29b      	uxth	r3, r3
 800512c:	4619      	mov	r1, r3
 800512e:	4836      	ldr	r0, [pc, #216]	; (8005208 <startButtonPress+0x124>)
 8005130:	f001 fc92 	bl	8006a58 <HAL_GPIO_ReadPin>
 8005134:	4603      	mov	r3, r0
 8005136:	461a      	mov	r2, r3
 8005138:	7dfb      	ldrb	r3, [r7, #23]
 800513a:	4293      	cmp	r3, r2
 800513c:	d1e1      	bne.n	8005102 <startButtonPress+0x1e>
		//when this happens (except during debouncing) so we expect this to be true
		//almost always

		//callingPin can be used as bitmask Pin 5/4/3 give 1000000/10000/1000

		if (callingPin == 0b1000 && first_read != buttonState[0]) { //button 1 trigger
 800513e:	693b      	ldr	r3, [r7, #16]
 8005140:	2b08      	cmp	r3, #8
 8005142:	d11d      	bne.n	8005180 <startButtonPress+0x9c>
 8005144:	7d3b      	ldrb	r3, [r7, #20]
 8005146:	7dfa      	ldrb	r2, [r7, #23]
 8005148:	429a      	cmp	r2, r3
 800514a:	d019      	beq.n	8005180 <startButtonPress+0x9c>
		  //set buttonState
		  buttonState[0] = first_read;
 800514c:	7dfb      	ldrb	r3, [r7, #23]
 800514e:	753b      	strb	r3, [r7, #20]

		  //do stuff if button pressed
		  if (!first_read){
 8005150:	7dfb      	ldrb	r3, [r7, #23]
 8005152:	2b00      	cmp	r3, #0
 8005154:	d104      	bne.n	8005160 <startButtonPress+0x7c>
			    P2PS_APP_SW1_Button_Action();
 8005156:	f7fc fc9b 	bl	8001a90 <P2PS_APP_SW1_Button_Action>
		       	osDelay(100);
 800515a:	2064      	movs	r0, #100	; 0x64
 800515c:	f009 ff92 	bl	800f084 <osDelay>
		  }

		  		    //send BLE queue indicator; button 1 = 0x0
		  		    uint16_t bleval = 0x0000 | ((!first_read) << 8);
 8005160:	7dfb      	ldrb	r3, [r7, #23]
 8005162:	2b00      	cmp	r3, #0
 8005164:	d102      	bne.n	800516c <startButtonPress+0x88>
 8005166:	f44f 7380 	mov.w	r3, #256	; 0x100
 800516a:	e000      	b.n	800516e <startButtonPress+0x8a>
 800516c:	2300      	movs	r3, #0
 800516e:	81fb      	strh	r3, [r7, #14]
		  		    osMessageQueuePut(bleTXqueueHandle, &bleval, 0, 0);
 8005170:	4b26      	ldr	r3, [pc, #152]	; (800520c <startButtonPress+0x128>)
 8005172:	6818      	ldr	r0, [r3, #0]
 8005174:	f107 010e 	add.w	r1, r7, #14
 8005178:	2300      	movs	r3, #0
 800517a:	2200      	movs	r2, #0
 800517c:	f00a fada 	bl	800f734 <osMessageQueuePut>
		}
		if (callingPin == 0b10000 && first_read != buttonState[1]) { //button 2 trigger
 8005180:	693b      	ldr	r3, [r7, #16]
 8005182:	2b10      	cmp	r3, #16
 8005184:	d11c      	bne.n	80051c0 <startButtonPress+0xdc>
 8005186:	7d7b      	ldrb	r3, [r7, #21]
 8005188:	7dfa      	ldrb	r2, [r7, #23]
 800518a:	429a      	cmp	r2, r3
 800518c:	d018      	beq.n	80051c0 <startButtonPress+0xdc>
		    //set buttonState
		    buttonState[1] = first_read;
 800518e:	7dfb      	ldrb	r3, [r7, #23]
 8005190:	757b      	strb	r3, [r7, #21]

		    //do stuff if button pressed
		    if (!first_read){
 8005192:	7dfb      	ldrb	r3, [r7, #23]
 8005194:	2b00      	cmp	r3, #0
 8005196:	d102      	bne.n	800519e <startButtonPress+0xba>
		       	osDelay(100);
 8005198:	2064      	movs	r0, #100	; 0x64
 800519a:	f009 ff73 	bl	800f084 <osDelay>
		    }

		    //send BLE queue indicator; button 2 = 0x1
		    uint16_t bleval = 0x1000 | ((!first_read) << 8);
 800519e:	7dfb      	ldrb	r3, [r7, #23]
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d102      	bne.n	80051aa <startButtonPress+0xc6>
 80051a4:	f44f 5388 	mov.w	r3, #4352	; 0x1100
 80051a8:	e001      	b.n	80051ae <startButtonPress+0xca>
 80051aa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80051ae:	81bb      	strh	r3, [r7, #12]
		    osMessageQueuePut(bleTXqueueHandle, &bleval, 0, 0);
 80051b0:	4b16      	ldr	r3, [pc, #88]	; (800520c <startButtonPress+0x128>)
 80051b2:	6818      	ldr	r0, [r3, #0]
 80051b4:	f107 010c 	add.w	r1, r7, #12
 80051b8:	2300      	movs	r3, #0
 80051ba:	2200      	movs	r2, #0
 80051bc:	f00a faba 	bl	800f734 <osMessageQueuePut>
		}
		if (callingPin == 0b100000 && first_read != buttonState[2]) { //button 3 trigger
 80051c0:	693b      	ldr	r3, [r7, #16]
 80051c2:	2b20      	cmp	r3, #32
 80051c4:	d19d      	bne.n	8005102 <startButtonPress+0x1e>
 80051c6:	7dbb      	ldrb	r3, [r7, #22]
 80051c8:	7dfa      	ldrb	r2, [r7, #23]
 80051ca:	429a      	cmp	r2, r3
 80051cc:	d099      	beq.n	8005102 <startButtonPress+0x1e>
		    //set buttonState
		    buttonState[2] = first_read;
 80051ce:	7dfb      	ldrb	r3, [r7, #23]
 80051d0:	75bb      	strb	r3, [r7, #22]

		    //do stuff if button pressed
		    if (!first_read){
 80051d2:	7dfb      	ldrb	r3, [r7, #23]
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d102      	bne.n	80051de <startButtonPress+0xfa>
		    	osDelay(100);
 80051d8:	2064      	movs	r0, #100	; 0x64
 80051da:	f009 ff53 	bl	800f084 <osDelay>
		    }

		    //send BLE queue indicator; button 3 = 0x2
		    uint16_t bleval = 0x2000 | ((!first_read) << 8);
 80051de:	7dfb      	ldrb	r3, [r7, #23]
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d102      	bne.n	80051ea <startButtonPress+0x106>
 80051e4:	f44f 5304 	mov.w	r3, #8448	; 0x2100
 80051e8:	e001      	b.n	80051ee <startButtonPress+0x10a>
 80051ea:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80051ee:	817b      	strh	r3, [r7, #10]
		    osMessageQueuePut(bleTXqueueHandle, &bleval, 0, 0);
 80051f0:	4b06      	ldr	r3, [pc, #24]	; (800520c <startButtonPress+0x128>)
 80051f2:	6818      	ldr	r0, [r3, #0]
 80051f4:	f107 010a 	add.w	r1, r7, #10
 80051f8:	2300      	movs	r3, #0
 80051fa:	2200      	movs	r2, #0
 80051fc:	f00a fa9a 	bl	800f734 <osMessageQueuePut>
  {
 8005200:	e77f      	b.n	8005102 <startButtonPress+0x1e>
 8005202:	bf00      	nop
 8005204:	08016390 	.word	0x08016390
 8005208:	48000400 	.word	0x48000400
 800520c:	20005344 	.word	0x20005344

08005210 <startVibrateControl>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_startVibrateControl */
void startVibrateControl(void *argument)
{
 8005210:	b580      	push	{r7, lr}
 8005212:	b084      	sub	sp, #16
 8005214:	af00      	add	r7, sp, #0
 8005216:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN startVibrateControl */

  //HAL_GPIO_WritePin(VIBRATION_GPIO_Port, VIBRATION_Pin, GPIO_PIN_RESET);

  //Init Vibration Motor PWM Parameters
  int duty_cycle = 79; //0 is off, up to ~80
 8005218:	234f      	movs	r3, #79	; 0x4f
 800521a:	60fb      	str	r3, [r7, #12]
  htim1.Instance->CCR2 = duty_cycle;
 800521c:	4b0a      	ldr	r3, [pc, #40]	; (8005248 <startVibrateControl+0x38>)
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	68fa      	ldr	r2, [r7, #12]
 8005222:	639a      	str	r2, [r3, #56]	; 0x38

  /* Infinite loop */
  for(;;)
  {
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8005224:	2100      	movs	r1, #0
 8005226:	4808      	ldr	r0, [pc, #32]	; (8005248 <startVibrateControl+0x38>)
 8005228:	f005 f8fc 	bl	800a424 <HAL_TIM_PWM_Start>

    osDelay(2000);
 800522c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8005230:	f009 ff28 	bl	800f084 <osDelay>

    HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 8005234:	2100      	movs	r1, #0
 8005236:	4804      	ldr	r0, [pc, #16]	; (8005248 <startVibrateControl+0x38>)
 8005238:	f005 f9ce 	bl	800a5d8 <HAL_TIM_PWM_Stop>

    osDelay(2000);
 800523c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8005240:	f009 ff20 	bl	800f084 <osDelay>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8005244:	e7ee      	b.n	8005224 <startVibrateControl+0x14>
 8005246:	bf00      	nop
 8005248:	20005298 	.word	0x20005298

0800524c <startRTCTick>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_startRTCTick */
void startRTCTick(void *argument)
{
 800524c:	b580      	push	{r7, lr}
 800524e:	b088      	sub	sp, #32
 8005250:	af00      	add	r7, sp, #0
 8005252:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN startRTCTick */

	RTC_TimeTypeDef sTime = {0};
 8005254:	f107 0308 	add.w	r3, r7, #8
 8005258:	2200      	movs	r2, #0
 800525a:	601a      	str	r2, [r3, #0]
 800525c:	605a      	str	r2, [r3, #4]
 800525e:	609a      	str	r2, [r3, #8]
 8005260:	60da      	str	r2, [r3, #12]
 8005262:	611a      	str	r2, [r3, #16]
    sTime.Hours      = 0x15;
 8005264:	2315      	movs	r3, #21
 8005266:	723b      	strb	r3, [r7, #8]
    sTime.Minutes    = 0x41;
 8005268:	2341      	movs	r3, #65	; 0x41
 800526a:	727b      	strb	r3, [r7, #9]
    sTime.Seconds    = 0x57;
 800526c:	2357      	movs	r3, #87	; 0x57
 800526e:	72bb      	strb	r3, [r7, #10]
    sTime.SubSeconds = 0x0;
 8005270:	2300      	movs	r3, #0
 8005272:	60fb      	str	r3, [r7, #12]
    sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8005274:	2300      	movs	r3, #0
 8005276:	617b      	str	r3, [r7, #20]
   	sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8005278:	2300      	movs	r3, #0
 800527a:	61bb      	str	r3, [r7, #24]

   	osMutexAcquire(rtcMutexHandle, portMAX_DELAY);
 800527c:	4b6d      	ldr	r3, [pc, #436]	; (8005434 <startRTCTick+0x1e8>)
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	f04f 31ff 	mov.w	r1, #4294967295
 8005284:	4618      	mov	r0, r3
 8005286:	f009 ffc5 	bl	800f214 <osMutexAcquire>
	if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK) {
 800528a:	f107 0308 	add.w	r3, r7, #8
 800528e:	2201      	movs	r2, #1
 8005290:	4619      	mov	r1, r3
 8005292:	4869      	ldr	r0, [pc, #420]	; (8005438 <startRTCTick+0x1ec>)
 8005294:	f004 f973 	bl	800957e <HAL_RTC_SetTime>
 8005298:	4603      	mov	r3, r0
 800529a:	2b00      	cmp	r3, #0
 800529c:	d001      	beq.n	80052a2 <startRTCTick+0x56>
	    Error_Handler();
 800529e:	f000 fa57 	bl	8005750 <Error_Handler>
	}
	osMutexRelease(rtcMutexHandle);
 80052a2:	4b64      	ldr	r3, [pc, #400]	; (8005434 <startRTCTick+0x1e8>)
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	4618      	mov	r0, r3
 80052a8:	f00a f812 	bl	800f2d0 <osMutexRelease>

  /* Infinite loop */
  for(;;)
  {
    osDelay(6000);
 80052ac:	f241 7070 	movw	r0, #6000	; 0x1770
 80052b0:	f009 fee8 	bl	800f084 <osDelay>

    osMutexAcquire(ledStateMutexHandle, portMAX_DELAY);
 80052b4:	4b61      	ldr	r3, [pc, #388]	; (800543c <startRTCTick+0x1f0>)
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	f04f 31ff 	mov.w	r1, #4294967295
 80052bc:	4618      	mov	r0, r3
 80052be:	f009 ffa9 	bl	800f214 <osMutexAcquire>
    LedState.currentMode = LED_SPIRAL;
 80052c2:	4b5f      	ldr	r3, [pc, #380]	; (8005440 <startRTCTick+0x1f4>)
 80052c4:	2205      	movs	r2, #5
 80052c6:	701a      	strb	r2, [r3, #0]
    osMutexRelease(ledStateMutexHandle);
 80052c8:	4b5c      	ldr	r3, [pc, #368]	; (800543c <startRTCTick+0x1f0>)
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	4618      	mov	r0, r3
 80052ce:	f009 ffff 	bl	800f2d0 <osMutexRelease>

    osDelay(3000);
 80052d2:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80052d6:	f009 fed5 	bl	800f084 <osDelay>

    ScreenStatus_t newScreen = SCREEN_TIME;
 80052da:	2301      	movs	r3, #1
 80052dc:	77fb      	strb	r3, [r7, #31]
    xTaskNotify(screenUpdateHandle, (uint32_t)newScreen, eSetValueWithOverwrite);
 80052de:	4b59      	ldr	r3, [pc, #356]	; (8005444 <startRTCTick+0x1f8>)
 80052e0:	6818      	ldr	r0, [r3, #0]
 80052e2:	7ff9      	ldrb	r1, [r7, #31]
 80052e4:	2300      	movs	r3, #0
 80052e6:	2203      	movs	r2, #3
 80052e8:	f00d f8d6 	bl	8012498 <xTaskGenericNotify>

    osDelay(3000);
 80052ec:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80052f0:	f009 fec8 	bl	800f084 <osDelay>

    osMutexAcquire(ledStateMutexHandle, portMAX_DELAY);
 80052f4:	4b51      	ldr	r3, [pc, #324]	; (800543c <startRTCTick+0x1f0>)
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	f04f 31ff 	mov.w	r1, #4294967295
 80052fc:	4618      	mov	r0, r3
 80052fe:	f009 ff89 	bl	800f214 <osMutexAcquire>
    LedState.currentMode = LED_CONFIRM_FLASH;
 8005302:	4b4f      	ldr	r3, [pc, #316]	; (8005440 <startRTCTick+0x1f4>)
 8005304:	2204      	movs	r2, #4
 8005306:	701a      	strb	r2, [r3, #0]
    osMutexRelease(ledStateMutexHandle);
 8005308:	4b4c      	ldr	r3, [pc, #304]	; (800543c <startRTCTick+0x1f0>)
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	4618      	mov	r0, r3
 800530e:	f009 ffdf 	bl	800f2d0 <osMutexRelease>

    osDelay(1000);
 8005312:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005316:	f009 feb5 	bl	800f084 <osDelay>

    osMutexAcquire(ledStateMutexHandle, portMAX_DELAY);
 800531a:	4b48      	ldr	r3, [pc, #288]	; (800543c <startRTCTick+0x1f0>)
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	f04f 31ff 	mov.w	r1, #4294967295
 8005322:	4618      	mov	r0, r3
 8005324:	f009 ff76 	bl	800f214 <osMutexAcquire>
    LedState.currentMode = LED_SPIRAL;
 8005328:	4b45      	ldr	r3, [pc, #276]	; (8005440 <startRTCTick+0x1f4>)
 800532a:	2205      	movs	r2, #5
 800532c:	701a      	strb	r2, [r3, #0]
    osMutexRelease(ledStateMutexHandle);
 800532e:	4b43      	ldr	r3, [pc, #268]	; (800543c <startRTCTick+0x1f0>)
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	4618      	mov	r0, r3
 8005334:	f009 ffcc 	bl	800f2d0 <osMutexRelease>

    osDelay(3000);
 8005338:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800533c:	f009 fea2 	bl	800f084 <osDelay>

    newScreen = SCREEN_TEXT;
 8005340:	2303      	movs	r3, #3
 8005342:	77fb      	strb	r3, [r7, #31]
	osMutexAcquire(screenTextMutexHandle, portMAX_DELAY);
 8005344:	4b40      	ldr	r3, [pc, #256]	; (8005448 <startRTCTick+0x1fc>)
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	f04f 31ff 	mov.w	r1, #4294967295
 800534c:	4618      	mov	r0, r3
 800534e:	f009 ff61 	bl	800f214 <osMutexAcquire>
	strncpy(ScreenState.screenText, "arbitrary", sizeof("arbitrary"));
 8005352:	4a3e      	ldr	r2, [pc, #248]	; (800544c <startRTCTick+0x200>)
 8005354:	4b3e      	ldr	r3, [pc, #248]	; (8005450 <startRTCTick+0x204>)
 8005356:	cb03      	ldmia	r3!, {r0, r1}
 8005358:	6010      	str	r0, [r2, #0]
 800535a:	6051      	str	r1, [r2, #4]
 800535c:	881b      	ldrh	r3, [r3, #0]
 800535e:	8113      	strh	r3, [r2, #8]
	osMutexRelease(screenTextMutexHandle);
 8005360:	4b39      	ldr	r3, [pc, #228]	; (8005448 <startRTCTick+0x1fc>)
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	4618      	mov	r0, r3
 8005366:	f009 ffb3 	bl	800f2d0 <osMutexRelease>
    xTaskNotify(screenUpdateHandle, (uint32_t)newScreen, eSetValueWithOverwrite);
 800536a:	4b36      	ldr	r3, [pc, #216]	; (8005444 <startRTCTick+0x1f8>)
 800536c:	6818      	ldr	r0, [r3, #0]
 800536e:	7ff9      	ldrb	r1, [r7, #31]
 8005370:	2300      	movs	r3, #0
 8005372:	2203      	movs	r2, #3
 8005374:	f00d f890 	bl	8012498 <xTaskGenericNotify>

    osDelay(3000);
 8005378:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800537c:	f009 fe82 	bl	800f084 <osDelay>
        Error_Handler();
    }
    osMutexRelease(rtcMutexHandle);
	*/

    newScreen = SCREEN_TIME;
 8005380:	2301      	movs	r3, #1
 8005382:	77fb      	strb	r3, [r7, #31]
    xTaskNotify(screenUpdateHandle, (uint32_t)newScreen, eSetValueWithOverwrite);
 8005384:	4b2f      	ldr	r3, [pc, #188]	; (8005444 <startRTCTick+0x1f8>)
 8005386:	6818      	ldr	r0, [r3, #0]
 8005388:	7ff9      	ldrb	r1, [r7, #31]
 800538a:	2300      	movs	r3, #0
 800538c:	2203      	movs	r2, #3
 800538e:	f00d f883 	bl	8012498 <xTaskGenericNotify>
    osDelay(1000);
 8005392:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005396:	f009 fe75 	bl	800f084 <osDelay>
    xTaskNotify(screenUpdateHandle, (uint32_t)newScreen, eSetValueWithOverwrite);
 800539a:	4b2a      	ldr	r3, [pc, #168]	; (8005444 <startRTCTick+0x1f8>)
 800539c:	6818      	ldr	r0, [r3, #0]
 800539e:	7ff9      	ldrb	r1, [r7, #31]
 80053a0:	2300      	movs	r3, #0
 80053a2:	2203      	movs	r2, #3
 80053a4:	f00d f878 	bl	8012498 <xTaskGenericNotify>
    osDelay(1000);
 80053a8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80053ac:	f009 fe6a 	bl	800f084 <osDelay>
    xTaskNotify(screenUpdateHandle, (uint32_t)newScreen, eSetValueWithOverwrite);
 80053b0:	4b24      	ldr	r3, [pc, #144]	; (8005444 <startRTCTick+0x1f8>)
 80053b2:	6818      	ldr	r0, [r3, #0]
 80053b4:	7ff9      	ldrb	r1, [r7, #31]
 80053b6:	2300      	movs	r3, #0
 80053b8:	2203      	movs	r2, #3
 80053ba:	f00d f86d 	bl	8012498 <xTaskGenericNotify>
    osDelay(1000);
 80053be:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80053c2:	f009 fe5f 	bl	800f084 <osDelay>
    xTaskNotify(screenUpdateHandle, (uint32_t)newScreen, eSetValueWithOverwrite);
 80053c6:	4b1f      	ldr	r3, [pc, #124]	; (8005444 <startRTCTick+0x1f8>)
 80053c8:	6818      	ldr	r0, [r3, #0]
 80053ca:	7ff9      	ldrb	r1, [r7, #31]
 80053cc:	2300      	movs	r3, #0
 80053ce:	2203      	movs	r2, #3
 80053d0:	f00d f862 	bl	8012498 <xTaskGenericNotify>
    osDelay(1000);
 80053d4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80053d8:	f009 fe54 	bl	800f084 <osDelay>


    osDelay(1000);
 80053dc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80053e0:	f009 fe50 	bl	800f084 <osDelay>

    newScreen = SCREEN_IMAGE;
 80053e4:	2304      	movs	r3, #4
 80053e6:	77fb      	strb	r3, [r7, #31]
   	osMutexAcquire(screenTextMutexHandle, portMAX_DELAY);
 80053e8:	4b17      	ldr	r3, [pc, #92]	; (8005448 <startRTCTick+0x1fc>)
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	f04f 31ff 	mov.w	r1, #4294967295
 80053f0:	4618      	mov	r0, r3
 80053f2:	f009 ff0f 	bl	800f214 <osMutexAcquire>
   	ScreenState.screenImage = 1;
 80053f6:	4b15      	ldr	r3, [pc, #84]	; (800544c <startRTCTick+0x200>)
 80053f8:	2201      	movs	r2, #1
 80053fa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
   	osMutexRelease(screenTextMutexHandle);
 80053fe:	4b12      	ldr	r3, [pc, #72]	; (8005448 <startRTCTick+0x1fc>)
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	4618      	mov	r0, r3
 8005404:	f009 ff64 	bl	800f2d0 <osMutexRelease>
    xTaskNotify(screenUpdateHandle, (uint32_t)newScreen, eSetValueWithOverwrite);
 8005408:	4b0e      	ldr	r3, [pc, #56]	; (8005444 <startRTCTick+0x1f8>)
 800540a:	6818      	ldr	r0, [r3, #0]
 800540c:	7ff9      	ldrb	r1, [r7, #31]
 800540e:	2300      	movs	r3, #0
 8005410:	2203      	movs	r2, #3
 8005412:	f00d f841 	bl	8012498 <xTaskGenericNotify>

    osDelay(3000);
 8005416:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800541a:	f009 fe33 	bl	800f084 <osDelay>

    newScreen = SCREEN_OFF;
 800541e:	2300      	movs	r3, #0
 8005420:	77fb      	strb	r3, [r7, #31]
    xTaskNotify(screenUpdateHandle, (uint32_t)newScreen, eSetValueWithOverwrite);
 8005422:	4b08      	ldr	r3, [pc, #32]	; (8005444 <startRTCTick+0x1f8>)
 8005424:	6818      	ldr	r0, [r3, #0]
 8005426:	7ff9      	ldrb	r1, [r7, #31]
 8005428:	2300      	movs	r3, #0
 800542a:	2203      	movs	r2, #3
 800542c:	f00d f834 	bl	8012498 <xTaskGenericNotify>
  {
 8005430:	e73c      	b.n	80052ac <startRTCTick+0x60>
 8005432:	bf00      	nop
 8005434:	2000534c 	.word	0x2000534c
 8005438:	20005260 	.word	0x20005260
 800543c:	20005294 	.word	0x20005294
 8005440:	20005258 	.word	0x20005258
 8005444:	20005284 	.word	0x20005284
 8005448:	200050dc 	.word	0x200050dc
 800544c:	200053b4 	.word	0x200053b4
 8005450:	08016394 	.word	0x08016394

08005454 <startBLERX>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_startBLERX */
void startBLERX(void *argument)
{
 8005454:	b580      	push	{r7, lr}
 8005456:	b082      	sub	sp, #8
 8005458:	af00      	add	r7, sp, #0
 800545a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN startBLERX */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1000);
 800545c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005460:	f009 fe10 	bl	800f084 <osDelay>
 8005464:	e7fa      	b.n	800545c <startBLERX+0x8>
	...

08005468 <startLEDTimer>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_startLEDTimer */
void startLEDTimer(void *argument)
{
 8005468:	b580      	push	{r7, lr}
 800546a:	b084      	sub	sp, #16
 800546c:	af00      	add	r7, sp, #0
 800546e:	6078      	str	r0, [r7, #4]

  /* Infinite loop */
  for(;;)
  {
	  //wait until notified
	  ulTaskNotifyTake( pdTRUE, portMAX_DELAY);
 8005470:	f04f 31ff 	mov.w	r1, #4294967295
 8005474:	2001      	movs	r0, #1
 8005476:	f00c ff6d 	bl	8012354 <ulTaskNotifyTake>

	  //pull time of delay before updating LED state
	  osMutexAcquire(ledStateMutexHandle, portMAX_DELAY);
 800547a:	4b1c      	ldr	r3, [pc, #112]	; (80054ec <startLEDTimer+0x84>)
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	f04f 31ff 	mov.w	r1, #4294967295
 8005482:	4618      	mov	r0, r3
 8005484:	f009 fec6 	bl	800f214 <osMutexAcquire>
	  waitState = LedState;
 8005488:	4a19      	ldr	r2, [pc, #100]	; (80054f0 <startLEDTimer+0x88>)
 800548a:	f107 0308 	add.w	r3, r7, #8
 800548e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005492:	e883 0003 	stmia.w	r3, {r0, r1}
	  LedState.modeTimeout = 0;
 8005496:	4b16      	ldr	r3, [pc, #88]	; (80054f0 <startLEDTimer+0x88>)
 8005498:	2200      	movs	r2, #0
 800549a:	605a      	str	r2, [r3, #4]
	  osMutexRelease(ledStateMutexHandle);
 800549c:	4b13      	ldr	r3, [pc, #76]	; (80054ec <startLEDTimer+0x84>)
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	4618      	mov	r0, r3
 80054a2:	f009 ff15 	bl	800f2d0 <osMutexRelease>

	  //delay
	  osDelay(waitState.modeTimeout);
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	4618      	mov	r0, r3
 80054aa:	f009 fdeb 	bl	800f084 <osDelay>

	  //update LED state in LedState
	  osMutexAcquire(ledStateMutexHandle, portMAX_DELAY);
 80054ae:	4b0f      	ldr	r3, [pc, #60]	; (80054ec <startLEDTimer+0x84>)
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	f04f 31ff 	mov.w	r1, #4294967295
 80054b6:	4618      	mov	r0, r3
 80054b8:	f009 feac 	bl	800f214 <osMutexAcquire>
	  //check that state values haven't changed since
	  //started waiting before updating state
	  if (waitState.currentMode == LedState.currentMode && waitState.nextMode == LedState.nextMode) {
 80054bc:	7a3a      	ldrb	r2, [r7, #8]
 80054be:	4b0c      	ldr	r3, [pc, #48]	; (80054f0 <startLEDTimer+0x88>)
 80054c0:	781b      	ldrb	r3, [r3, #0]
 80054c2:	429a      	cmp	r2, r3
 80054c4:	d10b      	bne.n	80054de <startLEDTimer+0x76>
 80054c6:	7a7a      	ldrb	r2, [r7, #9]
 80054c8:	4b09      	ldr	r3, [pc, #36]	; (80054f0 <startLEDTimer+0x88>)
 80054ca:	785b      	ldrb	r3, [r3, #1]
 80054cc:	429a      	cmp	r2, r3
 80054ce:	d106      	bne.n	80054de <startLEDTimer+0x76>
		  LedState.currentMode = LedState.nextMode;
 80054d0:	4b07      	ldr	r3, [pc, #28]	; (80054f0 <startLEDTimer+0x88>)
 80054d2:	785a      	ldrb	r2, [r3, #1]
 80054d4:	4b06      	ldr	r3, [pc, #24]	; (80054f0 <startLEDTimer+0x88>)
 80054d6:	701a      	strb	r2, [r3, #0]
		  LedState.nextMode = LED_NONE;
 80054d8:	4b05      	ldr	r3, [pc, #20]	; (80054f0 <startLEDTimer+0x88>)
 80054da:	2200      	movs	r2, #0
 80054dc:	705a      	strb	r2, [r3, #1]
	  }
	  osMutexRelease(ledStateMutexHandle);
 80054de:	4b03      	ldr	r3, [pc, #12]	; (80054ec <startLEDTimer+0x84>)
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	4618      	mov	r0, r3
 80054e4:	f009 fef4 	bl	800f2d0 <osMutexRelease>
	  ulTaskNotifyTake( pdTRUE, portMAX_DELAY);
 80054e8:	e7c2      	b.n	8005470 <startLEDTimer+0x8>
 80054ea:	bf00      	nop
 80054ec:	20005294 	.word	0x20005294
 80054f0:	20005258 	.word	0x20005258

080054f4 <startTouchRead>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_startTouchRead */
void startTouchRead(void *argument)
{
 80054f4:	b580      	push	{r7, lr}
 80054f6:	b086      	sub	sp, #24
 80054f8:	af00      	add	r7, sp, #0
 80054fa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN startTouchRead */

  int16_t current_minute = -1;
 80054fc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005500:	827b      	strh	r3, [r7, #18]
  uint8_t touch_end_count = 0;
 8005502:	2300      	movs	r3, #0
 8005504:	75fb      	strb	r3, [r7, #23]
  uint16_t last_minute = -1;
 8005506:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800550a:	82bb      	strh	r3, [r7, #20]
  #define TOUCH_END_TIMEOUT 6

  osDelay(3000); // give screen time to turn on.
 800550c:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8005510:	f009 fdb8 	bl	800f084 <osDelay>

  //init peripheral (not turbo mode, poll every 250ms, if touch sample at 40Hz until no touch)
  if (setup_iqs263() == HAL_ERROR) {
 8005514:	f7fe fdba 	bl	800408c <setup_iqs263>
 8005518:	4603      	mov	r3, r0
 800551a:	2b01      	cmp	r3, #1
 800551c:	d11b      	bne.n	8005556 <startTouchRead+0x62>

	  osMutexAcquire(screenTextMutexHandle, portMAX_DELAY);
 800551e:	4b37      	ldr	r3, [pc, #220]	; (80055fc <startTouchRead+0x108>)
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	f04f 31ff 	mov.w	r1, #4294967295
 8005526:	4618      	mov	r0, r3
 8005528:	f009 fe74 	bl	800f214 <osMutexAcquire>
	  strncpy(ScreenState.screenText, "touch fail", sizeof("touch fail"));
 800552c:	4a34      	ldr	r2, [pc, #208]	; (8005600 <startTouchRead+0x10c>)
 800552e:	4b35      	ldr	r3, [pc, #212]	; (8005604 <startTouchRead+0x110>)
 8005530:	cb03      	ldmia	r3!, {r0, r1}
 8005532:	6010      	str	r0, [r2, #0]
 8005534:	6051      	str	r1, [r2, #4]
 8005536:	8819      	ldrh	r1, [r3, #0]
 8005538:	789b      	ldrb	r3, [r3, #2]
 800553a:	8111      	strh	r1, [r2, #8]
 800553c:	7293      	strb	r3, [r2, #10]
	  osMutexRelease(screenTextMutexHandle);
 800553e:	4b2f      	ldr	r3, [pc, #188]	; (80055fc <startTouchRead+0x108>)
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	4618      	mov	r0, r3
 8005544:	f009 fec4 	bl	800f2d0 <osMutexRelease>
	  xTaskNotify(screenUpdateHandle, (uint32_t)SCREEN_TEXT, eSetValueWithOverwrite);
 8005548:	4b2f      	ldr	r3, [pc, #188]	; (8005608 <startTouchRead+0x114>)
 800554a:	6818      	ldr	r0, [r3, #0]
 800554c:	2300      	movs	r3, #0
 800554e:	2203      	movs	r2, #3
 8005550:	2103      	movs	r1, #3
 8005552:	f00c ffa1 	bl	8012498 <xTaskGenericNotify>
  }

  /* Infinite loop */
  for(;;)
  {
   current_minute = iqs263_get_min_if_pressed(); //returns -1 if no press
 8005556:	f7fe fe37 	bl	80041c8 <iqs263_get_min_if_pressed>
 800555a:	4603      	mov	r3, r0
 800555c:	827b      	strh	r3, [r7, #18]
   if (current_minute != -1) { //touch!
 800555e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8005562:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005566:	d011      	beq.n	800558c <startTouchRead+0x98>

	   touch_end_count = 1;
 8005568:	2301      	movs	r3, #1
 800556a:	75fb      	strb	r3, [r7, #23]

	   if (last_minute != current_minute) {
 800556c:	8aba      	ldrh	r2, [r7, #20]
 800556e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8005572:	429a      	cmp	r2, r3
 8005574:	d006      	beq.n	8005584 <startTouchRead+0x90>
		   //update touch stuff!
		   last_minute = current_minute;
 8005576:	8a7b      	ldrh	r3, [r7, #18]
 8005578:	82bb      	strh	r3, [r7, #20]
	   	   er_oled_print_2digit(current_minute);
 800557a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800557e:	4618      	mov	r0, r3
 8005580:	f7fd fcb8 	bl	8002ef4 <er_oled_print_2digit>
	   }

	   //optional
	   osDelay(25);
 8005584:	2019      	movs	r0, #25
 8005586:	f009 fd7d 	bl	800f084 <osDelay>
 800558a:	e7e4      	b.n	8005556 <startTouchRead+0x62>
	   strncpy(ScreenState.screenText, str, sizeof(str));
	   osMutexRelease(screenTextMutexHandle);
	   xTaskNotify(screenUpdateHandle, (uint32_t)SCREEN_TEXT, eSetValueWithOverwrite);
	   */

   } else if (touch_end_count > 0){
 800558c:	7dfb      	ldrb	r3, [r7, #23]
 800558e:	2b00      	cmp	r3, #0
 8005590:	d02f      	beq.n	80055f2 <startTouchRead+0xfe>

	   touch_end_count += 1;//increment touching_end_count
 8005592:	7dfb      	ldrb	r3, [r7, #23]
 8005594:	3301      	adds	r3, #1
 8005596:	75fb      	strb	r3, [r7, #23]

	   if (touch_end_count >= TOUCH_END_TIMEOUT){  //if it hits this value, we're done
 8005598:	7dfb      	ldrb	r3, [r7, #23]
 800559a:	2b05      	cmp	r3, #5
 800559c:	d925      	bls.n	80055ea <startTouchRead+0xf6>

		   touch_end_count = 0;
 800559e:	2300      	movs	r3, #0
 80055a0:	75fb      	strb	r3, [r7, #23]

		   //DO THINGS WITH CONFIRMED TOUCH == LAST_MINUTE
		   osMutexAcquire(screenTextMutexHandle, portMAX_DELAY);
 80055a2:	4b16      	ldr	r3, [pc, #88]	; (80055fc <startTouchRead+0x108>)
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	f04f 31ff 	mov.w	r1, #4294967295
 80055aa:	4618      	mov	r0, r3
 80055ac:	f009 fe32 	bl	800f214 <osMutexAcquire>
		   char out_text[10];
		   sprintf(out_text, "FINAL: %d", last_minute);
 80055b0:	8aba      	ldrh	r2, [r7, #20]
 80055b2:	f107 0308 	add.w	r3, r7, #8
 80055b6:	4915      	ldr	r1, [pc, #84]	; (800560c <startTouchRead+0x118>)
 80055b8:	4618      	mov	r0, r3
 80055ba:	f00e faab 	bl	8013b14 <siprintf>
		   strncpy(ScreenState.screenText, out_text, sizeof(out_text));
 80055be:	f107 0308 	add.w	r3, r7, #8
 80055c2:	220a      	movs	r2, #10
 80055c4:	4619      	mov	r1, r3
 80055c6:	480e      	ldr	r0, [pc, #56]	; (8005600 <startTouchRead+0x10c>)
 80055c8:	f00e fac4 	bl	8013b54 <strncpy>
		   osMutexRelease(screenTextMutexHandle);
 80055cc:	4b0b      	ldr	r3, [pc, #44]	; (80055fc <startTouchRead+0x108>)
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	4618      	mov	r0, r3
 80055d2:	f009 fe7d 	bl	800f2d0 <osMutexRelease>
		   xTaskNotify(screenUpdateHandle, (uint32_t)SCREEN_TEXT, eSetValueWithOverwrite);
 80055d6:	4b0c      	ldr	r3, [pc, #48]	; (8005608 <startTouchRead+0x114>)
 80055d8:	6818      	ldr	r0, [r3, #0]
 80055da:	2300      	movs	r3, #0
 80055dc:	2203      	movs	r2, #3
 80055de:	2103      	movs	r1, #3
 80055e0:	f00c ff5a 	bl	8012498 <xTaskGenericNotify>

		   last_minute = -1;
 80055e4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80055e8:	82bb      	strh	r3, [r7, #20]

	   }

	   osDelay(25);
 80055ea:	2019      	movs	r0, #25
 80055ec:	f009 fd4a 	bl	800f084 <osDelay>
 80055f0:	e7b1      	b.n	8005556 <startTouchRead+0x62>


   }else { //no touch, wait for a touch
    osDelay(250);
 80055f2:	20fa      	movs	r0, #250	; 0xfa
 80055f4:	f009 fd46 	bl	800f084 <osDelay>
   current_minute = iqs263_get_min_if_pressed(); //returns -1 if no press
 80055f8:	e7ad      	b.n	8005556 <startTouchRead+0x62>
 80055fa:	bf00      	nop
 80055fc:	200050dc 	.word	0x200050dc
 8005600:	200053b4 	.word	0x200053b4
 8005604:	080163a0 	.word	0x080163a0
 8005608:	20005284 	.word	0x20005284
 800560c:	080163ac 	.word	0x080163ac

08005610 <PeriphClock_Config>:




void PeriphClock_Config(void)
{
 8005610:	b480      	push	{r7}
 8005612:	af00      	add	r7, sp, #0

	/* Start automatic synchronization */
	HAL_RCCEx_CRSConfig(&RCC_CRSInitStruct);
#endif

	return;
 8005614:	bf00      	nop
}
 8005616:	46bd      	mov	sp, r7
 8005618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800561c:	4770      	bx	lr

0800561e <Config_HSE>:
 * LOCAL FUNCTIONS
 *
 *************************************************************/

static void Config_HSE(void)
{
 800561e:	b580      	push	{r7, lr}
 8005620:	b082      	sub	sp, #8
 8005622:	af00      	add	r7, sp, #0
    OTP_ID0_t * p_otp;

  /**
   * Read HSE_Tuning from OTP
   */
  p_otp = (OTP_ID0_t *) OTP_Read(0);
 8005624:	2000      	movs	r0, #0
 8005626:	f008 fe41 	bl	800e2ac <OTP_Read>
 800562a:	6078      	str	r0, [r7, #4]
  if (p_otp)
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	2b00      	cmp	r3, #0
 8005630:	d005      	beq.n	800563e <Config_HSE+0x20>
  {
    LL_RCC_HSE_SetCapacitorTuning(p_otp->hse_tuning);
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	799b      	ldrb	r3, [r3, #6]
 8005636:	4618      	mov	r0, r3
 8005638:	f7fe fe08 	bl	800424c <LL_RCC_HSE_SetCapacitorTuning>
  }

  return;
 800563c:	bf00      	nop
 800563e:	bf00      	nop
}  
 8005640:	3708      	adds	r7, #8
 8005642:	46bd      	mov	sp, r7
 8005644:	bd80      	pop	{r7, pc}

08005646 <Reset_Device>:


static void Reset_Device( void )
{
 8005646:	b580      	push	{r7, lr}
 8005648:	af00      	add	r7, sp, #0
#if ( CFG_HW_RESET_BY_FW == 1 )
	Reset_BackupDomain();
 800564a:	f000 f827 	bl	800569c <Reset_BackupDomain>

	Reset_IPCC();
 800564e:	f000 f803 	bl	8005658 <Reset_IPCC>
#endif

	return;
 8005652:	bf00      	nop
}
 8005654:	bd80      	pop	{r7, pc}
	...

08005658 <Reset_IPCC>:

static void Reset_IPCC( void )
{
 8005658:	b580      	push	{r7, lr}
 800565a:	af00      	add	r7, sp, #0
	LL_AHB3_GRP1_EnableClock(LL_AHB3_GRP1_PERIPH_IPCC);
 800565c:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8005660:	f7fe fe89 	bl	8004376 <LL_AHB3_GRP1_EnableClock>

	LL_C1_IPCC_ClearFlag_CHx(
 8005664:	213f      	movs	r1, #63	; 0x3f
 8005666:	480c      	ldr	r0, [pc, #48]	; (8005698 <Reset_IPCC+0x40>)
 8005668:	f7fe fee4 	bl	8004434 <LL_C1_IPCC_ClearFlag_CHx>
			IPCC,
			LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
			| LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

	LL_C2_IPCC_ClearFlag_CHx(
 800566c:	213f      	movs	r1, #63	; 0x3f
 800566e:	480a      	ldr	r0, [pc, #40]	; (8005698 <Reset_IPCC+0x40>)
 8005670:	f7fe feee 	bl	8004450 <LL_C2_IPCC_ClearFlag_CHx>
			IPCC,
			LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
			| LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

	LL_C1_IPCC_DisableTransmitChannel(
 8005674:	213f      	movs	r1, #63	; 0x3f
 8005676:	4808      	ldr	r0, [pc, #32]	; (8005698 <Reset_IPCC+0x40>)
 8005678:	f7fe fe96 	bl	80043a8 <LL_C1_IPCC_DisableTransmitChannel>
			IPCC,
			LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
			| LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

	LL_C2_IPCC_DisableTransmitChannel(
 800567c:	213f      	movs	r1, #63	; 0x3f
 800567e:	4806      	ldr	r0, [pc, #24]	; (8005698 <Reset_IPCC+0x40>)
 8005680:	f7fe feb5 	bl	80043ee <LL_C2_IPCC_DisableTransmitChannel>
			IPCC,
			LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
			| LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

	LL_C1_IPCC_DisableReceiveChannel(
 8005684:	213f      	movs	r1, #63	; 0x3f
 8005686:	4804      	ldr	r0, [pc, #16]	; (8005698 <Reset_IPCC+0x40>)
 8005688:	f7fe fea0 	bl	80043cc <LL_C1_IPCC_DisableReceiveChannel>
			IPCC,
			LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
			| LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

	LL_C2_IPCC_DisableReceiveChannel(
 800568c:	213f      	movs	r1, #63	; 0x3f
 800568e:	4802      	ldr	r0, [pc, #8]	; (8005698 <Reset_IPCC+0x40>)
 8005690:	f7fe febf 	bl	8004412 <LL_C2_IPCC_DisableReceiveChannel>
			IPCC,
			LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
			| LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

	return;
 8005694:	bf00      	nop
}
 8005696:	bd80      	pop	{r7, pc}
 8005698:	58000c00 	.word	0x58000c00

0800569c <Reset_BackupDomain>:

static void Reset_BackupDomain( void )
{
 800569c:	b580      	push	{r7, lr}
 800569e:	af00      	add	r7, sp, #0
	if ((LL_RCC_IsActiveFlag_PINRST() != FALSE) && (LL_RCC_IsActiveFlag_SFTRST() == FALSE))
 80056a0:	f7fe fe2a 	bl	80042f8 <LL_RCC_IsActiveFlag_PINRST>
 80056a4:	4603      	mov	r3, r0
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d00d      	beq.n	80056c6 <Reset_BackupDomain+0x2a>
 80056aa:	f7fe fe38 	bl	800431e <LL_RCC_IsActiveFlag_SFTRST>
 80056ae:	4603      	mov	r3, r0
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d108      	bne.n	80056c6 <Reset_BackupDomain+0x2a>
	{
		HAL_PWR_EnableBkUpAccess(); /**< Enable access to the RTC registers */
 80056b4:	f002 f8a2 	bl	80077fc <HAL_PWR_EnableBkUpAccess>

		/**
		 *  Write twice the value to flush the APB-AHB bridge
		 *  This bit shall be written in the register before writing the next one
		 */
		HAL_PWR_EnableBkUpAccess();
 80056b8:	f002 f8a0 	bl	80077fc <HAL_PWR_EnableBkUpAccess>

		__HAL_RCC_BACKUPRESET_FORCE();
 80056bc:	f7fe fdfa 	bl	80042b4 <LL_RCC_ForceBackupDomainReset>
		__HAL_RCC_BACKUPRESET_RELEASE();
 80056c0:	f7fe fe09 	bl	80042d6 <LL_RCC_ReleaseBackupDomainReset>
	}

	return;
 80056c4:	bf00      	nop
 80056c6:	bf00      	nop
}
 80056c8:	bd80      	pop	{r7, pc}

080056ca <Init_Exti>:

static void Init_Exti( void )
{
 80056ca:	b580      	push	{r7, lr}
 80056cc:	af00      	add	r7, sp, #0
  /**< Disable all wakeup interrupt on CPU1  except IPCC(36), HSEM(38) */
  LL_EXTI_DisableIT_0_31(~0);
 80056ce:	f04f 30ff 	mov.w	r0, #4294967295
 80056d2:	f7fe fd8f 	bl	80041f4 <LL_EXTI_DisableIT_0_31>
  LL_EXTI_DisableIT_32_63( (~0) & (~(LL_EXTI_LINE_36 | LL_EXTI_LINE_38)) );
 80056d6:	f06f 0050 	mvn.w	r0, #80	; 0x50
 80056da:	f7fe fda1 	bl	8004220 <LL_EXTI_DisableIT_32_63>

  return;
 80056de:	bf00      	nop
}
 80056e0:	bd80      	pop	{r7, pc}

080056e2 <HAL_Delay>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void HAL_Delay(uint32_t Delay)
{
 80056e2:	b580      	push	{r7, lr}
 80056e4:	b084      	sub	sp, #16
 80056e6:	af00      	add	r7, sp, #0
 80056e8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80056ea:	f000 fca7 	bl	800603c <HAL_GetTick>
 80056ee:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056fa:	d00a      	beq.n	8005712 <HAL_Delay+0x30>
  {
    wait += HAL_GetTickFreq();
 80056fc:	f000 fcb6 	bl	800606c <HAL_GetTickFreq>
 8005700:	4603      	mov	r3, r0
 8005702:	461a      	mov	r2, r3
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	4413      	add	r3, r2
 8005708:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800570a:	e002      	b.n	8005712 <HAL_Delay+0x30>
  {
    /************************************************************************************
     * ENTER SLEEP MODE
     ***********************************************************************************/
    LL_LPM_EnableSleep( ); /**< Clear SLEEPDEEP bit of Cortex System Control Register */
 800570c:	f7fe feae 	bl	800446c <LL_LPM_EnableSleep>
     */
  #if defined ( __CC_ARM)
    __force_stores();
  #endif

    __WFI( );
 8005710:	bf30      	wfi
  while ((HAL_GetTick() - tickstart) < wait)
 8005712:	f000 fc93 	bl	800603c <HAL_GetTick>
 8005716:	4602      	mov	r2, r0
 8005718:	68bb      	ldr	r3, [r7, #8]
 800571a:	1ad3      	subs	r3, r2, r3
 800571c:	68fa      	ldr	r2, [r7, #12]
 800571e:	429a      	cmp	r2, r3
 8005720:	d8f4      	bhi.n	800570c <HAL_Delay+0x2a>
  }
}
 8005722:	bf00      	nop
 8005724:	3710      	adds	r7, #16
 8005726:	46bd      	mov	sp, r7
 8005728:	bd80      	pop	{r7, pc}
	...

0800572c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800572c:	b580      	push	{r7, lr}
 800572e:	b082      	sub	sp, #8
 8005730:	af00      	add	r7, sp, #0
 8005732:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM17) {
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	4a04      	ldr	r2, [pc, #16]	; (800574c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800573a:	4293      	cmp	r3, r2
 800573c:	d101      	bne.n	8005742 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800573e:	f000 fc69 	bl	8006014 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8005742:	bf00      	nop
 8005744:	3708      	adds	r7, #8
 8005746:	46bd      	mov	sp, r7
 8005748:	bd80      	pop	{r7, pc}
 800574a:	bf00      	nop
 800574c:	40014800 	.word	0x40014800

08005750 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8005750:	b480      	push	{r7}
 8005752:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
 
  /* USER CODE END Error_Handler_Debug */
}
 8005754:	bf00      	nop
 8005756:	46bd      	mov	sp, r7
 8005758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800575c:	4770      	bx	lr

0800575e <LL_RCC_SetRTCClockSource>:
{
 800575e:	b480      	push	{r7}
 8005760:	b083      	sub	sp, #12
 8005762:	af00      	add	r7, sp, #0
 8005764:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8005766:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800576a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800576e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005772:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	4313      	orrs	r3, r2
 800577a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 800577e:	bf00      	nop
 8005780:	370c      	adds	r7, #12
 8005782:	46bd      	mov	sp, r7
 8005784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005788:	4770      	bx	lr

0800578a <LL_RCC_EnableRTC>:
{
 800578a:	b480      	push	{r7}
 800578c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 800578e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005792:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005796:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800579a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800579e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80057a2:	bf00      	nop
 80057a4:	46bd      	mov	sp, r7
 80057a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057aa:	4770      	bx	lr

080057ac <LL_AHB2_GRP1_EnableClock>:
{
 80057ac:	b480      	push	{r7}
 80057ae:	b085      	sub	sp, #20
 80057b0:	af00      	add	r7, sp, #0
 80057b2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80057b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80057b8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80057ba:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	4313      	orrs	r3, r2
 80057c2:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80057c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80057c8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	4013      	ands	r3, r2
 80057ce:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80057d0:	68fb      	ldr	r3, [r7, #12]
}
 80057d2:	bf00      	nop
 80057d4:	3714      	adds	r7, #20
 80057d6:	46bd      	mov	sp, r7
 80057d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057dc:	4770      	bx	lr

080057de <LL_AHB3_GRP1_EnableClock>:
{
 80057de:	b480      	push	{r7}
 80057e0:	b085      	sub	sp, #20
 80057e2:	af00      	add	r7, sp, #0
 80057e4:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 80057e6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80057ea:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80057ec:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	4313      	orrs	r3, r2
 80057f4:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 80057f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80057fa:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	4013      	ands	r3, r2
 8005800:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8005802:	68fb      	ldr	r3, [r7, #12]
}
 8005804:	bf00      	nop
 8005806:	3714      	adds	r7, #20
 8005808:	46bd      	mov	sp, r7
 800580a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800580e:	4770      	bx	lr

08005810 <LL_APB1_GRP1_EnableClock>:
{
 8005810:	b480      	push	{r7}
 8005812:	b085      	sub	sp, #20
 8005814:	af00      	add	r7, sp, #0
 8005816:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8005818:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800581c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800581e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	4313      	orrs	r3, r2
 8005826:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8005828:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800582c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	4013      	ands	r3, r2
 8005832:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8005834:	68fb      	ldr	r3, [r7, #12]
}
 8005836:	bf00      	nop
 8005838:	3714      	adds	r7, #20
 800583a:	46bd      	mov	sp, r7
 800583c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005840:	4770      	bx	lr

08005842 <LL_APB1_GRP2_EnableClock>:
{
 8005842:	b480      	push	{r7}
 8005844:	b085      	sub	sp, #20
 8005846:	af00      	add	r7, sp, #0
 8005848:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR2, Periphs);
 800584a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800584e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005850:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	4313      	orrs	r3, r2
 8005858:	65cb      	str	r3, [r1, #92]	; 0x5c
  tmpreg = READ_BIT(RCC->APB1ENR2, Periphs);
 800585a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800585e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	4013      	ands	r3, r2
 8005864:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8005866:	68fb      	ldr	r3, [r7, #12]
}
 8005868:	bf00      	nop
 800586a:	3714      	adds	r7, #20
 800586c:	46bd      	mov	sp, r7
 800586e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005872:	4770      	bx	lr

08005874 <LL_APB2_GRP1_EnableClock>:
{
 8005874:	b480      	push	{r7}
 8005876:	b085      	sub	sp, #20
 8005878:	af00      	add	r7, sp, #0
 800587a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 800587c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005880:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8005882:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	4313      	orrs	r3, r2
 800588a:	660b      	str	r3, [r1, #96]	; 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 800588c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005890:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	4013      	ands	r3, r2
 8005896:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8005898:	68fb      	ldr	r3, [r7, #12]
}
 800589a:	bf00      	nop
 800589c:	3714      	adds	r7, #20
 800589e:	46bd      	mov	sp, r7
 80058a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a4:	4770      	bx	lr

080058a6 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80058a6:	b580      	push	{r7, lr}
 80058a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_HSEM_CLK_ENABLE();
 80058aa:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80058ae:	f7ff ff96 	bl	80057de <LL_AHB3_GRP1_EnableClock>

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80058b2:	2200      	movs	r2, #0
 80058b4:	210f      	movs	r1, #15
 80058b6:	f06f 0001 	mvn.w	r0, #1
 80058ba:	f000 fd05 	bl	80062c8 <HAL_NVIC_SetPriority>

  /* Peripheral interrupt init */
  /* HSEM_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HSEM_IRQn, 5, 0);
 80058be:	2200      	movs	r2, #0
 80058c0:	2105      	movs	r1, #5
 80058c2:	202e      	movs	r0, #46	; 0x2e
 80058c4:	f000 fd00 	bl	80062c8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HSEM_IRQn);
 80058c8:	202e      	movs	r0, #46	; 0x2e
 80058ca:	f000 fd17 	bl	80062fc <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  HAL_NVIC_SetPriority(IPCC_C1_RX_IRQn , 6, 0);
 80058ce:	2200      	movs	r2, #0
 80058d0:	2106      	movs	r1, #6
 80058d2:	202c      	movs	r0, #44	; 0x2c
 80058d4:	f000 fcf8 	bl	80062c8 <HAL_NVIC_SetPriority>
  HAL_NVIC_SetPriority(IPCC_C1_TX_IRQn , 6, 0);
 80058d8:	2200      	movs	r2, #0
 80058da:	2106      	movs	r1, #6
 80058dc:	202d      	movs	r0, #45	; 0x2d
 80058de:	f000 fcf3 	bl	80062c8 <HAL_NVIC_SetPriority>

  /* USER CODE END MspInit 1 */
}
 80058e2:	bf00      	nop
 80058e4:	bd80      	pop	{r7, pc}
	...

080058e8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80058e8:	b580      	push	{r7, lr}
 80058ea:	b08c      	sub	sp, #48	; 0x30
 80058ec:	af00      	add	r7, sp, #0
 80058ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80058f0:	f107 031c 	add.w	r3, r7, #28
 80058f4:	2200      	movs	r2, #0
 80058f6:	601a      	str	r2, [r3, #0]
 80058f8:	605a      	str	r2, [r3, #4]
 80058fa:	609a      	str	r2, [r3, #8]
 80058fc:	60da      	str	r2, [r3, #12]
 80058fe:	611a      	str	r2, [r3, #16]
  HAL_DMA_MuxSyncConfigTypeDef pSyncConfig;
  if(huart->Instance==LPUART1)
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	4a6c      	ldr	r2, [pc, #432]	; (8005ab8 <HAL_UART_MspInit+0x1d0>)
 8005906:	4293      	cmp	r3, r2
 8005908:	d16f      	bne.n	80059ea <HAL_UART_MspInit+0x102>
  {
  /* USER CODE BEGIN LPUART1_MspInit 0 */

  /* USER CODE END LPUART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 800590a:	2001      	movs	r0, #1
 800590c:	f7ff ff99 	bl	8005842 <LL_APB1_GRP2_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005910:	2001      	movs	r0, #1
 8005912:	f7ff ff4b 	bl	80057ac <LL_AHB2_GRP1_EnableClock>
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    PA6     ------> LPUART1_CTS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8005916:	230c      	movs	r3, #12
 8005918:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800591a:	2302      	movs	r3, #2
 800591c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800591e:	2300      	movs	r3, #0
 8005920:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005922:	2303      	movs	r3, #3
 8005924:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8005926:	2308      	movs	r3, #8
 8005928:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800592a:	f107 031c 	add.w	r3, r7, #28
 800592e:	4619      	mov	r1, r3
 8005930:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005934:	f000 ff20 	bl	8006778 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8005938:	2340      	movs	r3, #64	; 0x40
 800593a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800593c:	2302      	movs	r3, #2
 800593e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005940:	2300      	movs	r3, #0
 8005942:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005944:	2300      	movs	r3, #0
 8005946:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8005948:	2308      	movs	r3, #8
 800594a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800594c:	f107 031c 	add.w	r3, r7, #28
 8005950:	4619      	mov	r1, r3
 8005952:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005956:	f000 ff0f 	bl	8006778 <HAL_GPIO_Init>

    /* LPUART1 DMA Init */
    /* LPUART1_TX Init */
    hdma_lpuart1_tx.Instance = DMA1_Channel4;
 800595a:	4b58      	ldr	r3, [pc, #352]	; (8005abc <HAL_UART_MspInit+0x1d4>)
 800595c:	4a58      	ldr	r2, [pc, #352]	; (8005ac0 <HAL_UART_MspInit+0x1d8>)
 800595e:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_tx.Init.Request = DMA_REQUEST_LPUART1_TX;
 8005960:	4b56      	ldr	r3, [pc, #344]	; (8005abc <HAL_UART_MspInit+0x1d4>)
 8005962:	2211      	movs	r2, #17
 8005964:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8005966:	4b55      	ldr	r3, [pc, #340]	; (8005abc <HAL_UART_MspInit+0x1d4>)
 8005968:	2210      	movs	r2, #16
 800596a:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800596c:	4b53      	ldr	r3, [pc, #332]	; (8005abc <HAL_UART_MspInit+0x1d4>)
 800596e:	2200      	movs	r2, #0
 8005970:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8005972:	4b52      	ldr	r3, [pc, #328]	; (8005abc <HAL_UART_MspInit+0x1d4>)
 8005974:	2280      	movs	r2, #128	; 0x80
 8005976:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005978:	4b50      	ldr	r3, [pc, #320]	; (8005abc <HAL_UART_MspInit+0x1d4>)
 800597a:	2200      	movs	r2, #0
 800597c:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800597e:	4b4f      	ldr	r3, [pc, #316]	; (8005abc <HAL_UART_MspInit+0x1d4>)
 8005980:	2200      	movs	r2, #0
 8005982:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_tx.Init.Mode = DMA_NORMAL;
 8005984:	4b4d      	ldr	r3, [pc, #308]	; (8005abc <HAL_UART_MspInit+0x1d4>)
 8005986:	2200      	movs	r2, #0
 8005988:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800598a:	4b4c      	ldr	r3, [pc, #304]	; (8005abc <HAL_UART_MspInit+0x1d4>)
 800598c:	2200      	movs	r2, #0
 800598e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_tx) != HAL_OK)
 8005990:	484a      	ldr	r0, [pc, #296]	; (8005abc <HAL_UART_MspInit+0x1d4>)
 8005992:	f000 fceb 	bl	800636c <HAL_DMA_Init>
 8005996:	4603      	mov	r3, r0
 8005998:	2b00      	cmp	r3, #0
 800599a:	d001      	beq.n	80059a0 <HAL_UART_MspInit+0xb8>
    {
      Error_Handler();
 800599c:	f7ff fed8 	bl	8005750 <Error_Handler>
    }

    pSyncConfig.SyncSignalID = HAL_DMAMUX1_SYNC_DMAMUX1_CH1_EVT;
 80059a0:	f04f 5388 	mov.w	r3, #285212672	; 0x11000000
 80059a4:	60fb      	str	r3, [r7, #12]
    pSyncConfig.SyncPolarity = HAL_DMAMUX_SYNC_NO_EVENT;
 80059a6:	2300      	movs	r3, #0
 80059a8:	613b      	str	r3, [r7, #16]
    pSyncConfig.SyncEnable = DISABLE;
 80059aa:	2300      	movs	r3, #0
 80059ac:	753b      	strb	r3, [r7, #20]
    pSyncConfig.EventEnable = DISABLE;
 80059ae:	2300      	movs	r3, #0
 80059b0:	757b      	strb	r3, [r7, #21]
    pSyncConfig.RequestNumber = 1;
 80059b2:	2301      	movs	r3, #1
 80059b4:	61bb      	str	r3, [r7, #24]
    if (HAL_DMAEx_ConfigMuxSync(&hdma_lpuart1_tx, &pSyncConfig) != HAL_OK)
 80059b6:	f107 030c 	add.w	r3, r7, #12
 80059ba:	4619      	mov	r1, r3
 80059bc:	483f      	ldr	r0, [pc, #252]	; (8005abc <HAL_UART_MspInit+0x1d4>)
 80059be:	f000 fe9b 	bl	80066f8 <HAL_DMAEx_ConfigMuxSync>
 80059c2:	4603      	mov	r3, r0
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d001      	beq.n	80059cc <HAL_UART_MspInit+0xe4>
    {
      Error_Handler();
 80059c8:	f7ff fec2 	bl	8005750 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_lpuart1_tx);
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	4a3b      	ldr	r2, [pc, #236]	; (8005abc <HAL_UART_MspInit+0x1d4>)
 80059d0:	675a      	str	r2, [r3, #116]	; 0x74
 80059d2:	4a3a      	ldr	r2, [pc, #232]	; (8005abc <HAL_UART_MspInit+0x1d4>)
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	6293      	str	r3, [r2, #40]	; 0x28

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 5, 0);
 80059d8:	2200      	movs	r2, #0
 80059da:	2105      	movs	r1, #5
 80059dc:	2025      	movs	r0, #37	; 0x25
 80059de:	f000 fc73 	bl	80062c8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 80059e2:	2025      	movs	r0, #37	; 0x25
 80059e4:	f000 fc8a 	bl	80062fc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80059e8:	e061      	b.n	8005aae <HAL_UART_MspInit+0x1c6>
  else if(huart->Instance==USART1)
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	4a35      	ldr	r2, [pc, #212]	; (8005ac4 <HAL_UART_MspInit+0x1dc>)
 80059f0:	4293      	cmp	r3, r2
 80059f2:	d15c      	bne.n	8005aae <HAL_UART_MspInit+0x1c6>
    __HAL_RCC_USART1_CLK_ENABLE();
 80059f4:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80059f8:	f7ff ff3c 	bl	8005874 <LL_APB2_GRP1_EnableClock>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80059fc:	2001      	movs	r0, #1
 80059fe:	f7ff fed5 	bl	80057ac <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005a02:	2002      	movs	r0, #2
 8005a04:	f7ff fed2 	bl	80057ac <LL_AHB2_GRP1_EnableClock>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8005a08:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005a0c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005a0e:	2302      	movs	r3, #2
 8005a10:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005a12:	2300      	movs	r3, #0
 8005a14:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005a16:	2300      	movs	r3, #0
 8005a18:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8005a1a:	2307      	movs	r3, #7
 8005a1c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005a1e:	f107 031c 	add.w	r3, r7, #28
 8005a22:	4619      	mov	r1, r3
 8005a24:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005a28:	f000 fea6 	bl	8006778 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8005a2c:	23c0      	movs	r3, #192	; 0xc0
 8005a2e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005a30:	2302      	movs	r3, #2
 8005a32:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005a34:	2301      	movs	r3, #1
 8005a36:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005a38:	2303      	movs	r3, #3
 8005a3a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8005a3c:	2307      	movs	r3, #7
 8005a3e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005a40:	f107 031c 	add.w	r3, r7, #28
 8005a44:	4619      	mov	r1, r3
 8005a46:	4820      	ldr	r0, [pc, #128]	; (8005ac8 <HAL_UART_MspInit+0x1e0>)
 8005a48:	f000 fe96 	bl	8006778 <HAL_GPIO_Init>
    hdma_usart1_tx.Instance = DMA2_Channel4;
 8005a4c:	4b1f      	ldr	r3, [pc, #124]	; (8005acc <HAL_UART_MspInit+0x1e4>)
 8005a4e:	4a20      	ldr	r2, [pc, #128]	; (8005ad0 <HAL_UART_MspInit+0x1e8>)
 8005a50:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 8005a52:	4b1e      	ldr	r3, [pc, #120]	; (8005acc <HAL_UART_MspInit+0x1e4>)
 8005a54:	220f      	movs	r2, #15
 8005a56:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8005a58:	4b1c      	ldr	r3, [pc, #112]	; (8005acc <HAL_UART_MspInit+0x1e4>)
 8005a5a:	2210      	movs	r2, #16
 8005a5c:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005a5e:	4b1b      	ldr	r3, [pc, #108]	; (8005acc <HAL_UART_MspInit+0x1e4>)
 8005a60:	2200      	movs	r2, #0
 8005a62:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8005a64:	4b19      	ldr	r3, [pc, #100]	; (8005acc <HAL_UART_MspInit+0x1e4>)
 8005a66:	2280      	movs	r2, #128	; 0x80
 8005a68:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005a6a:	4b18      	ldr	r3, [pc, #96]	; (8005acc <HAL_UART_MspInit+0x1e4>)
 8005a6c:	2200      	movs	r2, #0
 8005a6e:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005a70:	4b16      	ldr	r3, [pc, #88]	; (8005acc <HAL_UART_MspInit+0x1e4>)
 8005a72:	2200      	movs	r2, #0
 8005a74:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8005a76:	4b15      	ldr	r3, [pc, #84]	; (8005acc <HAL_UART_MspInit+0x1e4>)
 8005a78:	2200      	movs	r2, #0
 8005a7a:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8005a7c:	4b13      	ldr	r3, [pc, #76]	; (8005acc <HAL_UART_MspInit+0x1e4>)
 8005a7e:	2200      	movs	r2, #0
 8005a80:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8005a82:	4812      	ldr	r0, [pc, #72]	; (8005acc <HAL_UART_MspInit+0x1e4>)
 8005a84:	f000 fc72 	bl	800636c <HAL_DMA_Init>
 8005a88:	4603      	mov	r3, r0
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d001      	beq.n	8005a92 <HAL_UART_MspInit+0x1aa>
      Error_Handler();
 8005a8e:	f7ff fe5f 	bl	8005750 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	4a0d      	ldr	r2, [pc, #52]	; (8005acc <HAL_UART_MspInit+0x1e4>)
 8005a96:	675a      	str	r2, [r3, #116]	; 0x74
 8005a98:	4a0c      	ldr	r2, [pc, #48]	; (8005acc <HAL_UART_MspInit+0x1e4>)
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	6293      	str	r3, [r2, #40]	; 0x28
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8005a9e:	2200      	movs	r2, #0
 8005aa0:	2105      	movs	r1, #5
 8005aa2:	2024      	movs	r0, #36	; 0x24
 8005aa4:	f000 fc10 	bl	80062c8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8005aa8:	2024      	movs	r0, #36	; 0x24
 8005aaa:	f000 fc27 	bl	80062fc <HAL_NVIC_EnableIRQ>
}
 8005aae:	bf00      	nop
 8005ab0:	3730      	adds	r7, #48	; 0x30
 8005ab2:	46bd      	mov	sp, r7
 8005ab4:	bd80      	pop	{r7, pc}
 8005ab6:	bf00      	nop
 8005ab8:	40008000 	.word	0x40008000
 8005abc:	200052e4 	.word	0x200052e4
 8005ac0:	40020044 	.word	0x40020044
 8005ac4:	40013800 	.word	0x40013800
 8005ac8:	48000400 	.word	0x48000400
 8005acc:	2000516c 	.word	0x2000516c
 8005ad0:	40020444 	.word	0x40020444

08005ad4 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8005ad4:	b580      	push	{r7, lr}
 8005ad6:	b082      	sub	sp, #8
 8005ad8:	af00      	add	r7, sp, #0
 8005ada:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	4a0b      	ldr	r2, [pc, #44]	; (8005b10 <HAL_RTC_MspInit+0x3c>)
 8005ae2:	4293      	cmp	r3, r2
 8005ae4:	d110      	bne.n	8005b08 <HAL_RTC_MspInit+0x34>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */
  HAL_PWR_EnableBkUpAccess(); /**< Enable access to the RTC registers */
 8005ae6:	f001 fe89 	bl	80077fc <HAL_PWR_EnableBkUpAccess>

  /**
  *  Write twice the value to flush the APB-AHB bridge
  *  This bit shall be written in the register before writing the next one
  */
  HAL_PWR_EnableBkUpAccess();
 8005aea:	f001 fe87 	bl	80077fc <HAL_PWR_EnableBkUpAccess>

  __HAL_RCC_RTC_CONFIG(RCC_RTCCLKSOURCE_LSE); /**< Select LSI as RTC Input */
 8005aee:	f44f 7080 	mov.w	r0, #256	; 0x100
 8005af2:	f7ff fe34 	bl	800575e <LL_RCC_SetRTCClockSource>
  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8005af6:	f7ff fe48 	bl	800578a <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8005afa:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8005afe:	f7ff fe87 	bl	8005810 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN RTC_MspInit 1 */
  HAL_RTCEx_EnableBypassShadow(hrtc);
 8005b02:	6878      	ldr	r0, [r7, #4]
 8005b04:	f003 ffe2 	bl	8009acc <HAL_RTCEx_EnableBypassShadow>
  /* USER CODE END RTC_MspInit 1 */
  }

}
 8005b08:	bf00      	nop
 8005b0a:	3708      	adds	r7, #8
 8005b0c:	46bd      	mov	sp, r7
 8005b0e:	bd80      	pop	{r7, pc}
 8005b10:	40002800 	.word	0x40002800

08005b14 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8005b14:	b580      	push	{r7, lr}
 8005b16:	b088      	sub	sp, #32
 8005b18:	af00      	add	r7, sp, #0
 8005b1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005b1c:	f107 030c 	add.w	r3, r7, #12
 8005b20:	2200      	movs	r2, #0
 8005b22:	601a      	str	r2, [r3, #0]
 8005b24:	605a      	str	r2, [r3, #4]
 8005b26:	609a      	str	r2, [r3, #8]
 8005b28:	60da      	str	r2, [r3, #12]
 8005b2a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	4a0f      	ldr	r2, [pc, #60]	; (8005b70 <HAL_I2C_MspInit+0x5c>)
 8005b32:	4293      	cmp	r3, r2
 8005b34:	d117      	bne.n	8005b66 <HAL_I2C_MspInit+0x52>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005b36:	2002      	movs	r0, #2
 8005b38:	f7ff fe38 	bl	80057ac <LL_AHB2_GRP1_EnableClock>
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8005b3c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8005b40:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005b42:	2312      	movs	r3, #18
 8005b44:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005b46:	2301      	movs	r3, #1
 8005b48:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005b4a:	2300      	movs	r3, #0
 8005b4c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8005b4e:	2304      	movs	r3, #4
 8005b50:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005b52:	f107 030c 	add.w	r3, r7, #12
 8005b56:	4619      	mov	r1, r3
 8005b58:	4806      	ldr	r0, [pc, #24]	; (8005b74 <HAL_I2C_MspInit+0x60>)
 8005b5a:	f000 fe0d 	bl	8006778 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8005b5e:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8005b62:	f7ff fe55 	bl	8005810 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8005b66:	bf00      	nop
 8005b68:	3720      	adds	r7, #32
 8005b6a:	46bd      	mov	sp, r7
 8005b6c:	bd80      	pop	{r7, pc}
 8005b6e:	bf00      	nop
 8005b70:	40005400 	.word	0x40005400
 8005b74:	48000400 	.word	0x48000400

08005b78 <HAL_SPI_MspInit>:
  }

}

void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8005b78:	b580      	push	{r7, lr}
 8005b7a:	b088      	sub	sp, #32
 8005b7c:	af00      	add	r7, sp, #0
 8005b7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005b80:	f107 030c 	add.w	r3, r7, #12
 8005b84:	2200      	movs	r2, #0
 8005b86:	601a      	str	r2, [r3, #0]
 8005b88:	605a      	str	r2, [r3, #4]
 8005b8a:	609a      	str	r2, [r3, #8]
 8005b8c:	60da      	str	r2, [r3, #12]
 8005b8e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	4a0f      	ldr	r2, [pc, #60]	; (8005bd4 <HAL_SPI_MspInit+0x5c>)
 8005b96:	4293      	cmp	r3, r2
 8005b98:	d117      	bne.n	8005bca <HAL_SPI_MspInit+0x52>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8005b9a:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8005b9e:	f7ff fe69 	bl	8005874 <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005ba2:	2001      	movs	r0, #1
 8005ba4:	f7ff fe02 	bl	80057ac <LL_AHB2_GRP1_EnableClock>
    /**SPI1 GPIO Configuration
    PA1     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_7;
 8005ba8:	2382      	movs	r3, #130	; 0x82
 8005baa:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005bac:	2302      	movs	r3, #2
 8005bae:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005bb0:	2300      	movs	r3, #0
 8005bb2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005bb4:	2300      	movs	r3, #0
 8005bb6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8005bb8:	2305      	movs	r3, #5
 8005bba:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005bbc:	f107 030c 	add.w	r3, r7, #12
 8005bc0:	4619      	mov	r1, r3
 8005bc2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005bc6:	f000 fdd7 	bl	8006778 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8005bca:	bf00      	nop
 8005bcc:	3720      	adds	r7, #32
 8005bce:	46bd      	mov	sp, r7
 8005bd0:	bd80      	pop	{r7, pc}
 8005bd2:	bf00      	nop
 8005bd4:	40013000 	.word	0x40013000

08005bd8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8005bd8:	b580      	push	{r7, lr}
 8005bda:	b082      	sub	sp, #8
 8005bdc:	af00      	add	r7, sp, #0
 8005bde:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	4a09      	ldr	r2, [pc, #36]	; (8005c0c <HAL_TIM_Base_MspInit+0x34>)
 8005be6:	4293      	cmp	r3, r2
 8005be8:	d10b      	bne.n	8005c02 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8005bea:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8005bee:	f7ff fe41 	bl	8005874 <LL_APB2_GRP1_EnableClock>
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 15, 0);
 8005bf2:	2200      	movs	r2, #0
 8005bf4:	210f      	movs	r1, #15
 8005bf6:	2019      	movs	r0, #25
 8005bf8:	f000 fb66 	bl	80062c8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8005bfc:	2019      	movs	r0, #25
 8005bfe:	f000 fb7d 	bl	80062fc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8005c02:	bf00      	nop
 8005c04:	3708      	adds	r7, #8
 8005c06:	46bd      	mov	sp, r7
 8005c08:	bd80      	pop	{r7, pc}
 8005c0a:	bf00      	nop
 8005c0c:	40012c00 	.word	0x40012c00

08005c10 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8005c10:	b580      	push	{r7, lr}
 8005c12:	b088      	sub	sp, #32
 8005c14:	af00      	add	r7, sp, #0
 8005c16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005c18:	f107 030c 	add.w	r3, r7, #12
 8005c1c:	2200      	movs	r2, #0
 8005c1e:	601a      	str	r2, [r3, #0]
 8005c20:	605a      	str	r2, [r3, #4]
 8005c22:	609a      	str	r2, [r3, #8]
 8005c24:	60da      	str	r2, [r3, #12]
 8005c26:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	4a0d      	ldr	r2, [pc, #52]	; (8005c64 <HAL_TIM_MspPostInit+0x54>)
 8005c2e:	4293      	cmp	r3, r2
 8005c30:	d114      	bne.n	8005c5c <HAL_TIM_MspPostInit+0x4c>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005c32:	2001      	movs	r0, #1
 8005c34:	f7ff fdba 	bl	80057ac <LL_AHB2_GRP1_EnableClock>
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8005c38:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005c3c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005c3e:	2302      	movs	r3, #2
 8005c40:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005c42:	2300      	movs	r3, #0
 8005c44:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005c46:	2300      	movs	r3, #0
 8005c48:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8005c4a:	2301      	movs	r3, #1
 8005c4c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005c4e:	f107 030c 	add.w	r3, r7, #12
 8005c52:	4619      	mov	r1, r3
 8005c54:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005c58:	f000 fd8e 	bl	8006778 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8005c5c:	bf00      	nop
 8005c5e:	3720      	adds	r7, #32
 8005c60:	46bd      	mov	sp, r7
 8005c62:	bd80      	pop	{r7, pc}
 8005c64:	40012c00 	.word	0x40012c00

08005c68 <LL_APB2_GRP1_EnableClock>:
{
 8005c68:	b480      	push	{r7}
 8005c6a:	b085      	sub	sp, #20
 8005c6c:	af00      	add	r7, sp, #0
 8005c6e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8005c70:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005c74:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8005c76:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	4313      	orrs	r3, r2
 8005c7e:	660b      	str	r3, [r1, #96]	; 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8005c80:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005c84:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	4013      	ands	r3, r2
 8005c8a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8005c8c:	68fb      	ldr	r3, [r7, #12]
}
 8005c8e:	bf00      	nop
 8005c90:	3714      	adds	r7, #20
 8005c92:	46bd      	mov	sp, r7
 8005c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c98:	4770      	bx	lr
	...

08005c9c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005c9c:	b580      	push	{r7, lr}
 8005c9e:	b08c      	sub	sp, #48	; 0x30
 8005ca0:	af00      	add	r7, sp, #0
 8005ca2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8005ca4:	2300      	movs	r3, #0
 8005ca6:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8005ca8:	2300      	movs	r3, #0
 8005caa:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM17 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, TickPriority ,0);
 8005cac:	2200      	movs	r2, #0
 8005cae:	6879      	ldr	r1, [r7, #4]
 8005cb0:	201a      	movs	r0, #26
 8005cb2:	f000 fb09 	bl	80062c8 <HAL_NVIC_SetPriority>

  /* Enable the TIM17 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 8005cb6:	201a      	movs	r0, #26
 8005cb8:	f000 fb20 	bl	80062fc <HAL_NVIC_EnableIRQ>
  /* Enable TIM17 clock */
  __HAL_RCC_TIM17_CLK_ENABLE();
 8005cbc:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8005cc0:	f7ff ffd2 	bl	8005c68 <LL_APB2_GRP1_EnableClock>

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8005cc4:	f107 0208 	add.w	r2, r7, #8
 8005cc8:	f107 030c 	add.w	r3, r7, #12
 8005ccc:	4611      	mov	r1, r2
 8005cce:	4618      	mov	r0, r3
 8005cd0:	f002 feaa 	bl	8008a28 <HAL_RCC_GetClockConfig>

  /* Compute TIM17 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8005cd4:	f002 fe92 	bl	80089fc <HAL_RCC_GetPCLK2Freq>
 8005cd8:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM17 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8005cda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cdc:	4a12      	ldr	r2, [pc, #72]	; (8005d28 <HAL_InitTick+0x8c>)
 8005cde:	fba2 2303 	umull	r2, r3, r2, r3
 8005ce2:	0c9b      	lsrs	r3, r3, #18
 8005ce4:	3b01      	subs	r3, #1
 8005ce6:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM17 */
  htim17.Instance = TIM17;
 8005ce8:	4b10      	ldr	r3, [pc, #64]	; (8005d2c <HAL_InitTick+0x90>)
 8005cea:	4a11      	ldr	r2, [pc, #68]	; (8005d30 <HAL_InitTick+0x94>)
 8005cec:	601a      	str	r2, [r3, #0]
  + Period = [(TIM17CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim17.Init.Period = (1000000U / 1000U) - 1U;
 8005cee:	4b0f      	ldr	r3, [pc, #60]	; (8005d2c <HAL_InitTick+0x90>)
 8005cf0:	f240 32e7 	movw	r2, #999	; 0x3e7
 8005cf4:	60da      	str	r2, [r3, #12]
  htim17.Init.Prescaler = uwPrescalerValue;
 8005cf6:	4a0d      	ldr	r2, [pc, #52]	; (8005d2c <HAL_InitTick+0x90>)
 8005cf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cfa:	6053      	str	r3, [r2, #4]
  htim17.Init.ClockDivision = 0;
 8005cfc:	4b0b      	ldr	r3, [pc, #44]	; (8005d2c <HAL_InitTick+0x90>)
 8005cfe:	2200      	movs	r2, #0
 8005d00:	611a      	str	r2, [r3, #16]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005d02:	4b0a      	ldr	r3, [pc, #40]	; (8005d2c <HAL_InitTick+0x90>)
 8005d04:	2200      	movs	r2, #0
 8005d06:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim17) == HAL_OK)
 8005d08:	4808      	ldr	r0, [pc, #32]	; (8005d2c <HAL_InitTick+0x90>)
 8005d0a:	f004 fa83 	bl	800a214 <HAL_TIM_Base_Init>
 8005d0e:	4603      	mov	r3, r0
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d104      	bne.n	8005d1e <HAL_InitTick+0x82>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim17);
 8005d14:	4805      	ldr	r0, [pc, #20]	; (8005d2c <HAL_InitTick+0x90>)
 8005d16:	f004 fad5 	bl	800a2c4 <HAL_TIM_Base_Start_IT>
 8005d1a:	4603      	mov	r3, r0
 8005d1c:	e000      	b.n	8005d20 <HAL_InitTick+0x84>
  }

  /* Return function status */
  return HAL_ERROR;
 8005d1e:	2301      	movs	r3, #1
}
 8005d20:	4618      	mov	r0, r3
 8005d22:	3730      	adds	r7, #48	; 0x30
 8005d24:	46bd      	mov	sp, r7
 8005d26:	bd80      	pop	{r7, pc}
 8005d28:	431bde83 	.word	0x431bde83
 8005d2c:	20005438 	.word	0x20005438
 8005d30:	40014800 	.word	0x40014800

08005d34 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005d34:	b480      	push	{r7}
 8005d36:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8005d38:	bf00      	nop
 8005d3a:	46bd      	mov	sp, r7
 8005d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d40:	4770      	bx	lr

08005d42 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005d42:	b480      	push	{r7}
 8005d44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005d46:	e7fe      	b.n	8005d46 <HardFault_Handler+0x4>

08005d48 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005d48:	b480      	push	{r7}
 8005d4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005d4c:	e7fe      	b.n	8005d4c <MemManage_Handler+0x4>

08005d4e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005d4e:	b480      	push	{r7}
 8005d50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005d52:	e7fe      	b.n	8005d52 <BusFault_Handler+0x4>

08005d54 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005d54:	b480      	push	{r7}
 8005d56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005d58:	e7fe      	b.n	8005d58 <UsageFault_Handler+0x4>

08005d5a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005d5a:	b480      	push	{r7}
 8005d5c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005d5e:	bf00      	nop
 8005d60:	46bd      	mov	sp, r7
 8005d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d66:	4770      	bx	lr

08005d68 <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM17 global interrupt.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 8005d68:	b580      	push	{r7, lr}
 8005d6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 8005d6c:	4802      	ldr	r0, [pc, #8]	; (8005d78 <TIM1_TRG_COM_TIM17_IRQHandler+0x10>)
 8005d6e:	f004 fcbb 	bl	800a6e8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 8005d72:	bf00      	nop
 8005d74:	bd80      	pop	{r7, pc}
 8005d76:	bf00      	nop
 8005d78:	20005438 	.word	0x20005438

08005d7c <HSEM_IRQHandler>:

/**
  * @brief This function handles HSEM global interrupt.
  */
void HSEM_IRQHandler(void)
{
 8005d7c:	b580      	push	{r7, lr}
 8005d7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HSEM_IRQn 0 */

  /* USER CODE END HSEM_IRQn 0 */
  HAL_HSEM_IRQHandler();
 8005d80:	f000 feb2 	bl	8006ae8 <HAL_HSEM_IRQHandler>
  /* USER CODE BEGIN HSEM_IRQn 1 */

  /* USER CODE END HSEM_IRQn 1 */
}
 8005d84:	bf00      	nop
 8005d86:	bd80      	pop	{r7, pc}

08005d88 <EXTI3_IRQHandler>:
 *         interrupt request.
 * @param  None
 * @retval None
 */
void EXTI3_IRQHandler(void)
{
 8005d88:	b580      	push	{r7, lr}
 8005d8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8005d8c:	2008      	movs	r0, #8
 8005d8e:	f000 fe93 	bl	8006ab8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8005d92:	bf00      	nop
 8005d94:	bd80      	pop	{r7, pc}

08005d96 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8005d96:	b580      	push	{r7, lr}
 8005d98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8005d9a:	2010      	movs	r0, #16
 8005d9c:	f000 fe8c 	bl	8006ab8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8005da0:	bf00      	nop
 8005da2:	bd80      	pop	{r7, pc}

08005da4 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8005da4:	b580      	push	{r7, lr}
 8005da6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8005da8:	2020      	movs	r0, #32
 8005daa:	f000 fe85 	bl	8006ab8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8005dae:	bf00      	nop
 8005db0:	bd80      	pop	{r7, pc}
	...

08005db4 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8005db4:	b580      	push	{r7, lr}
 8005db6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8005db8:	4802      	ldr	r0, [pc, #8]	; (8005dc4 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8005dba:	f004 fc95 	bl	800a6e8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8005dbe:	bf00      	nop
 8005dc0:	bd80      	pop	{r7, pc}
 8005dc2:	bf00      	nop
 8005dc4:	20005298 	.word	0x20005298

08005dc8 <RTC_WKUP_IRQHandler>:

void RTC_WKUP_IRQHandler(void)
{
 8005dc8:	b580      	push	{r7, lr}
 8005dca:	af00      	add	r7, sp, #0
  HW_TS_RTC_Wakeup_Handler();
 8005dcc:	f7fd fc42 	bl	8003654 <HW_TS_RTC_Wakeup_Handler>
}
 8005dd0:	bf00      	nop
 8005dd2:	bd80      	pop	{r7, pc}

08005dd4 <IPCC_C1_TX_IRQHandler>:

void IPCC_C1_TX_IRQHandler(void)
{
 8005dd4:	b580      	push	{r7, lr}
 8005dd6:	af00      	add	r7, sp, #0
  HW_IPCC_Tx_Handler();
 8005dd8:	f7fc f824 	bl	8001e24 <HW_IPCC_Tx_Handler>

  return;
 8005ddc:	bf00      	nop
}
 8005dde:	bd80      	pop	{r7, pc}

08005de0 <IPCC_C1_RX_IRQHandler>:

void IPCC_C1_RX_IRQHandler(void)
{
 8005de0:	b580      	push	{r7, lr}
 8005de2:	af00      	add	r7, sp, #0
  HW_IPCC_Rx_Handler();
 8005de4:	f7fb ffe6 	bl	8001db4 <HW_IPCC_Rx_Handler>
  return;
 8005de8:	bf00      	nop
}
 8005dea:	bd80      	pop	{r7, pc}

08005dec <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8005dec:	b580      	push	{r7, lr}
 8005dee:	b086      	sub	sp, #24
 8005df0:	af00      	add	r7, sp, #0
 8005df2:	60f8      	str	r0, [r7, #12]
 8005df4:	60b9      	str	r1, [r7, #8]
 8005df6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005df8:	2300      	movs	r3, #0
 8005dfa:	617b      	str	r3, [r7, #20]
 8005dfc:	e00a      	b.n	8005e14 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8005dfe:	f3af 8000 	nop.w
 8005e02:	4601      	mov	r1, r0
 8005e04:	68bb      	ldr	r3, [r7, #8]
 8005e06:	1c5a      	adds	r2, r3, #1
 8005e08:	60ba      	str	r2, [r7, #8]
 8005e0a:	b2ca      	uxtb	r2, r1
 8005e0c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005e0e:	697b      	ldr	r3, [r7, #20]
 8005e10:	3301      	adds	r3, #1
 8005e12:	617b      	str	r3, [r7, #20]
 8005e14:	697a      	ldr	r2, [r7, #20]
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	429a      	cmp	r2, r3
 8005e1a:	dbf0      	blt.n	8005dfe <_read+0x12>
	}

return len;
 8005e1c:	687b      	ldr	r3, [r7, #4]
}
 8005e1e:	4618      	mov	r0, r3
 8005e20:	3718      	adds	r7, #24
 8005e22:	46bd      	mov	sp, r7
 8005e24:	bd80      	pop	{r7, pc}

08005e26 <_close>:
	}
	return len;
}

int _close(int file)
{
 8005e26:	b480      	push	{r7}
 8005e28:	b083      	sub	sp, #12
 8005e2a:	af00      	add	r7, sp, #0
 8005e2c:	6078      	str	r0, [r7, #4]
	return -1;
 8005e2e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005e32:	4618      	mov	r0, r3
 8005e34:	370c      	adds	r7, #12
 8005e36:	46bd      	mov	sp, r7
 8005e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e3c:	4770      	bx	lr

08005e3e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8005e3e:	b480      	push	{r7}
 8005e40:	b083      	sub	sp, #12
 8005e42:	af00      	add	r7, sp, #0
 8005e44:	6078      	str	r0, [r7, #4]
 8005e46:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8005e48:	683b      	ldr	r3, [r7, #0]
 8005e4a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005e4e:	605a      	str	r2, [r3, #4]
	return 0;
 8005e50:	2300      	movs	r3, #0
}
 8005e52:	4618      	mov	r0, r3
 8005e54:	370c      	adds	r7, #12
 8005e56:	46bd      	mov	sp, r7
 8005e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e5c:	4770      	bx	lr

08005e5e <_isatty>:

int _isatty(int file)
{
 8005e5e:	b480      	push	{r7}
 8005e60:	b083      	sub	sp, #12
 8005e62:	af00      	add	r7, sp, #0
 8005e64:	6078      	str	r0, [r7, #4]
	return 1;
 8005e66:	2301      	movs	r3, #1
}
 8005e68:	4618      	mov	r0, r3
 8005e6a:	370c      	adds	r7, #12
 8005e6c:	46bd      	mov	sp, r7
 8005e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e72:	4770      	bx	lr

08005e74 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8005e74:	b480      	push	{r7}
 8005e76:	b085      	sub	sp, #20
 8005e78:	af00      	add	r7, sp, #0
 8005e7a:	60f8      	str	r0, [r7, #12]
 8005e7c:	60b9      	str	r1, [r7, #8]
 8005e7e:	607a      	str	r2, [r7, #4]
	return 0;
 8005e80:	2300      	movs	r3, #0
}
 8005e82:	4618      	mov	r0, r3
 8005e84:	3714      	adds	r7, #20
 8005e86:	46bd      	mov	sp, r7
 8005e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e8c:	4770      	bx	lr
	...

08005e90 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8005e90:	b580      	push	{r7, lr}
 8005e92:	b084      	sub	sp, #16
 8005e94:	af00      	add	r7, sp, #0
 8005e96:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8005e98:	4b11      	ldr	r3, [pc, #68]	; (8005ee0 <_sbrk+0x50>)
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d102      	bne.n	8005ea6 <_sbrk+0x16>
		heap_end = &end;
 8005ea0:	4b0f      	ldr	r3, [pc, #60]	; (8005ee0 <_sbrk+0x50>)
 8005ea2:	4a10      	ldr	r2, [pc, #64]	; (8005ee4 <_sbrk+0x54>)
 8005ea4:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8005ea6:	4b0e      	ldr	r3, [pc, #56]	; (8005ee0 <_sbrk+0x50>)
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8005eac:	4b0c      	ldr	r3, [pc, #48]	; (8005ee0 <_sbrk+0x50>)
 8005eae:	681a      	ldr	r2, [r3, #0]
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	4413      	add	r3, r2
 8005eb4:	466a      	mov	r2, sp
 8005eb6:	4293      	cmp	r3, r2
 8005eb8:	d907      	bls.n	8005eca <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8005eba:	f00d f855 	bl	8012f68 <__errno>
 8005ebe:	4602      	mov	r2, r0
 8005ec0:	230c      	movs	r3, #12
 8005ec2:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8005ec4:	f04f 33ff 	mov.w	r3, #4294967295
 8005ec8:	e006      	b.n	8005ed8 <_sbrk+0x48>
	}

	heap_end += incr;
 8005eca:	4b05      	ldr	r3, [pc, #20]	; (8005ee0 <_sbrk+0x50>)
 8005ecc:	681a      	ldr	r2, [r3, #0]
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	4413      	add	r3, r2
 8005ed2:	4a03      	ldr	r2, [pc, #12]	; (8005ee0 <_sbrk+0x50>)
 8005ed4:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8005ed6:	68fb      	ldr	r3, [r7, #12]
}
 8005ed8:	4618      	mov	r0, r3
 8005eda:	3710      	adds	r7, #16
 8005edc:	46bd      	mov	sp, r7
 8005ede:	bd80      	pop	{r7, pc}
 8005ee0:	200003bc 	.word	0x200003bc
 8005ee4:	200054d0 	.word	0x200054d0

08005ee8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8005ee8:	b480      	push	{r7}
 8005eea:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined(VECT_TAB_SRAM) && defined(VECT_TAB_BASE_ADDRESS)  
  /* program in SRAMx */
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;  /* Vector Table Relocation in Internal SRAMx for CPU1 */
#else    /* program in FLASH */
  SCB->VTOR = VECT_TAB_OFFSET;              /* Vector Table Relocation in Internal FLASH */
 8005eec:	4b26      	ldr	r3, [pc, #152]	; (8005f88 <SystemInit+0xa0>)
 8005eee:	2200      	movs	r2, #0
 8005ef0:	609a      	str	r2, [r3, #8]
#endif

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
 8005ef2:	4b25      	ldr	r3, [pc, #148]	; (8005f88 <SystemInit+0xa0>)
 8005ef4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ef8:	4a23      	ldr	r2, [pc, #140]	; (8005f88 <SystemInit+0xa0>)
 8005efa:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005efe:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8005f02:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005f0c:	f043 0301 	orr.w	r3, r3, #1
 8005f10:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 8005f12:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005f16:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 8005f1a:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 8005f1c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005f20:	681a      	ldr	r2, [r3, #0]
 8005f22:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005f26:	4b19      	ldr	r3, [pc, #100]	; (8005f8c <SystemInit+0xa4>)
 8005f28:	4013      	ands	r3, r2
 8005f2a:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 8005f2c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005f30:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005f34:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005f38:	f023 0305 	bic.w	r3, r3, #5
 8005f3c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  
  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8005f40:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005f44:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005f48:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005f4c:	f023 0301 	bic.w	r3, r3, #1
 8005f50:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
    
  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 8005f54:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005f58:	4a0d      	ldr	r2, [pc, #52]	; (8005f90 <SystemInit+0xa8>)
 8005f5a:	60da      	str	r2, [r3, #12]

  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 8005f5c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005f60:	4a0b      	ldr	r2, [pc, #44]	; (8005f90 <SystemInit+0xa8>)
 8005f62:	611a      	str	r2, [r3, #16]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8005f64:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005f6e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005f72:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8005f74:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005f78:	2200      	movs	r2, #0
 8005f7a:	619a      	str	r2, [r3, #24]
}
 8005f7c:	bf00      	nop
 8005f7e:	46bd      	mov	sp, r7
 8005f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f84:	4770      	bx	lr
 8005f86:	bf00      	nop
 8005f88:	e000ed00 	.word	0xe000ed00
 8005f8c:	faf6fefb 	.word	0xfaf6fefb
 8005f90:	22041000 	.word	0x22041000

08005f94 <LL_DBGMCU_EnableDBGSleepMode>:
{
 8005f94:	b480      	push	{r7}
 8005f96:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 8005f98:	4b05      	ldr	r3, [pc, #20]	; (8005fb0 <LL_DBGMCU_EnableDBGSleepMode+0x1c>)
 8005f9a:	685b      	ldr	r3, [r3, #4]
 8005f9c:	4a04      	ldr	r2, [pc, #16]	; (8005fb0 <LL_DBGMCU_EnableDBGSleepMode+0x1c>)
 8005f9e:	f043 0301 	orr.w	r3, r3, #1
 8005fa2:	6053      	str	r3, [r2, #4]
}
 8005fa4:	bf00      	nop
 8005fa6:	46bd      	mov	sp, r7
 8005fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fac:	4770      	bx	lr
 8005fae:	bf00      	nop
 8005fb0:	e0042000 	.word	0xe0042000

08005fb4 <LL_DBGMCU_EnableDBGStopMode>:
{
 8005fb4:	b480      	push	{r7}
 8005fb6:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 8005fb8:	4b05      	ldr	r3, [pc, #20]	; (8005fd0 <LL_DBGMCU_EnableDBGStopMode+0x1c>)
 8005fba:	685b      	ldr	r3, [r3, #4]
 8005fbc:	4a04      	ldr	r2, [pc, #16]	; (8005fd0 <LL_DBGMCU_EnableDBGStopMode+0x1c>)
 8005fbe:	f043 0302 	orr.w	r3, r3, #2
 8005fc2:	6053      	str	r3, [r2, #4]
}
 8005fc4:	bf00      	nop
 8005fc6:	46bd      	mov	sp, r7
 8005fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fcc:	4770      	bx	lr
 8005fce:	bf00      	nop
 8005fd0:	e0042000 	.word	0xe0042000

08005fd4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005fd4:	b580      	push	{r7, lr}
 8005fd6:	b082      	sub	sp, #8
 8005fd8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8005fda:	2300      	movs	r3, #0
 8005fdc:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005fde:	4b0c      	ldr	r3, [pc, #48]	; (8006010 <HAL_Init+0x3c>)
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	4a0b      	ldr	r2, [pc, #44]	; (8006010 <HAL_Init+0x3c>)
 8005fe4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005fe8:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005fea:	2003      	movs	r0, #3
 8005fec:	f000 f961 	bl	80062b2 <HAL_NVIC_SetPriorityGrouping>
  
  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8005ff0:	2000      	movs	r0, #0
 8005ff2:	f7ff fe53 	bl	8005c9c <HAL_InitTick>
 8005ff6:	4603      	mov	r3, r0
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d002      	beq.n	8006002 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8005ffc:	2301      	movs	r3, #1
 8005ffe:	71fb      	strb	r3, [r7, #7]
 8006000:	e001      	b.n	8006006 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8006002:	f7ff fc50 	bl	80058a6 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8006006:	79fb      	ldrb	r3, [r7, #7]
}
 8006008:	4618      	mov	r0, r3
 800600a:	3708      	adds	r7, #8
 800600c:	46bd      	mov	sp, r7
 800600e:	bd80      	pop	{r7, pc}
 8006010:	58004000 	.word	0x58004000

08006014 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006014:	b480      	push	{r7}
 8006016:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8006018:	4b06      	ldr	r3, [pc, #24]	; (8006034 <HAL_IncTick+0x20>)
 800601a:	781b      	ldrb	r3, [r3, #0]
 800601c:	461a      	mov	r2, r3
 800601e:	4b06      	ldr	r3, [pc, #24]	; (8006038 <HAL_IncTick+0x24>)
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	4413      	add	r3, r2
 8006024:	4a04      	ldr	r2, [pc, #16]	; (8006038 <HAL_IncTick+0x24>)
 8006026:	6013      	str	r3, [r2, #0]
}
 8006028:	bf00      	nop
 800602a:	46bd      	mov	sp, r7
 800602c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006030:	4770      	bx	lr
 8006032:	bf00      	nop
 8006034:	2000001c 	.word	0x2000001c
 8006038:	20005484 	.word	0x20005484

0800603c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800603c:	b480      	push	{r7}
 800603e:	af00      	add	r7, sp, #0
  return uwTick;
 8006040:	4b03      	ldr	r3, [pc, #12]	; (8006050 <HAL_GetTick+0x14>)
 8006042:	681b      	ldr	r3, [r3, #0]
}
 8006044:	4618      	mov	r0, r3
 8006046:	46bd      	mov	sp, r7
 8006048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800604c:	4770      	bx	lr
 800604e:	bf00      	nop
 8006050:	20005484 	.word	0x20005484

08006054 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8006054:	b480      	push	{r7}
 8006056:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8006058:	4b03      	ldr	r3, [pc, #12]	; (8006068 <HAL_GetTickPrio+0x14>)
 800605a:	681b      	ldr	r3, [r3, #0]
}
 800605c:	4618      	mov	r0, r3
 800605e:	46bd      	mov	sp, r7
 8006060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006064:	4770      	bx	lr
 8006066:	bf00      	nop
 8006068:	20000018 	.word	0x20000018

0800606c <HAL_GetTickFreq>:
/**
  * @brief Return tick frequency.
  * @retval tick period in Hz
  */
HAL_TickFreqTypeDef HAL_GetTickFreq(void)
{
 800606c:	b480      	push	{r7}
 800606e:	af00      	add	r7, sp, #0
  return uwTickFreq;
 8006070:	4b03      	ldr	r3, [pc, #12]	; (8006080 <HAL_GetTickFreq+0x14>)
 8006072:	781b      	ldrb	r3, [r3, #0]
}
 8006074:	4618      	mov	r0, r3
 8006076:	46bd      	mov	sp, r7
 8006078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800607c:	4770      	bx	lr
 800607e:	bf00      	nop
 8006080:	2000001c 	.word	0x2000001c

08006084 <HAL_DBGMCU_EnableDBGSleepMode>:
/**
  * @brief  Enable the Debug Module during SLEEP mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGSleepMode(void)
{
 8006084:	b580      	push	{r7, lr}
 8006086:	af00      	add	r7, sp, #0
  LL_DBGMCU_EnableDBGSleepMode();
 8006088:	f7ff ff84 	bl	8005f94 <LL_DBGMCU_EnableDBGSleepMode>
}
 800608c:	bf00      	nop
 800608e:	bd80      	pop	{r7, pc}

08006090 <HAL_DBGMCU_EnableDBGStopMode>:
/**
  * @brief  Enable the Debug Module during STOP mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStopMode(void)
{
 8006090:	b580      	push	{r7, lr}
 8006092:	af00      	add	r7, sp, #0
  LL_DBGMCU_EnableDBGStopMode();
 8006094:	f7ff ff8e 	bl	8005fb4 <LL_DBGMCU_EnableDBGStopMode>
}
 8006098:	bf00      	nop
 800609a:	bd80      	pop	{r7, pc}

0800609c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800609c:	b480      	push	{r7}
 800609e:	b085      	sub	sp, #20
 80060a0:	af00      	add	r7, sp, #0
 80060a2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	f003 0307 	and.w	r3, r3, #7
 80060aa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80060ac:	4b0c      	ldr	r3, [pc, #48]	; (80060e0 <__NVIC_SetPriorityGrouping+0x44>)
 80060ae:	68db      	ldr	r3, [r3, #12]
 80060b0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80060b2:	68ba      	ldr	r2, [r7, #8]
 80060b4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80060b8:	4013      	ands	r3, r2
 80060ba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80060c0:	68bb      	ldr	r3, [r7, #8]
 80060c2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80060c4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80060c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80060cc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80060ce:	4a04      	ldr	r2, [pc, #16]	; (80060e0 <__NVIC_SetPriorityGrouping+0x44>)
 80060d0:	68bb      	ldr	r3, [r7, #8]
 80060d2:	60d3      	str	r3, [r2, #12]
}
 80060d4:	bf00      	nop
 80060d6:	3714      	adds	r7, #20
 80060d8:	46bd      	mov	sp, r7
 80060da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060de:	4770      	bx	lr
 80060e0:	e000ed00 	.word	0xe000ed00

080060e4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80060e4:	b480      	push	{r7}
 80060e6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80060e8:	4b04      	ldr	r3, [pc, #16]	; (80060fc <__NVIC_GetPriorityGrouping+0x18>)
 80060ea:	68db      	ldr	r3, [r3, #12]
 80060ec:	0a1b      	lsrs	r3, r3, #8
 80060ee:	f003 0307 	and.w	r3, r3, #7
}
 80060f2:	4618      	mov	r0, r3
 80060f4:	46bd      	mov	sp, r7
 80060f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060fa:	4770      	bx	lr
 80060fc:	e000ed00 	.word	0xe000ed00

08006100 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006100:	b480      	push	{r7}
 8006102:	b083      	sub	sp, #12
 8006104:	af00      	add	r7, sp, #0
 8006106:	4603      	mov	r3, r0
 8006108:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800610a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800610e:	2b00      	cmp	r3, #0
 8006110:	db0b      	blt.n	800612a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006112:	79fb      	ldrb	r3, [r7, #7]
 8006114:	f003 021f 	and.w	r2, r3, #31
 8006118:	4907      	ldr	r1, [pc, #28]	; (8006138 <__NVIC_EnableIRQ+0x38>)
 800611a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800611e:	095b      	lsrs	r3, r3, #5
 8006120:	2001      	movs	r0, #1
 8006122:	fa00 f202 	lsl.w	r2, r0, r2
 8006126:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800612a:	bf00      	nop
 800612c:	370c      	adds	r7, #12
 800612e:	46bd      	mov	sp, r7
 8006130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006134:	4770      	bx	lr
 8006136:	bf00      	nop
 8006138:	e000e100 	.word	0xe000e100

0800613c <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800613c:	b480      	push	{r7}
 800613e:	b083      	sub	sp, #12
 8006140:	af00      	add	r7, sp, #0
 8006142:	4603      	mov	r3, r0
 8006144:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006146:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800614a:	2b00      	cmp	r3, #0
 800614c:	db10      	blt.n	8006170 <__NVIC_DisableIRQ+0x34>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800614e:	79fb      	ldrb	r3, [r7, #7]
 8006150:	f003 021f 	and.w	r2, r3, #31
 8006154:	4909      	ldr	r1, [pc, #36]	; (800617c <__NVIC_DisableIRQ+0x40>)
 8006156:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800615a:	095b      	lsrs	r3, r3, #5
 800615c:	2001      	movs	r0, #1
 800615e:	fa00 f202 	lsl.w	r2, r0, r2
 8006162:	3320      	adds	r3, #32
 8006164:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8006168:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800616c:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  }
}
 8006170:	bf00      	nop
 8006172:	370c      	adds	r7, #12
 8006174:	46bd      	mov	sp, r7
 8006176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800617a:	4770      	bx	lr
 800617c:	e000e100 	.word	0xe000e100

08006180 <__NVIC_SetPendingIRQ>:
  \details Sets the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 8006180:	b480      	push	{r7}
 8006182:	b083      	sub	sp, #12
 8006184:	af00      	add	r7, sp, #0
 8006186:	4603      	mov	r3, r0
 8006188:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800618a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800618e:	2b00      	cmp	r3, #0
 8006190:	db0c      	blt.n	80061ac <__NVIC_SetPendingIRQ+0x2c>
  {
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006192:	79fb      	ldrb	r3, [r7, #7]
 8006194:	f003 021f 	and.w	r2, r3, #31
 8006198:	4907      	ldr	r1, [pc, #28]	; (80061b8 <__NVIC_SetPendingIRQ+0x38>)
 800619a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800619e:	095b      	lsrs	r3, r3, #5
 80061a0:	2001      	movs	r0, #1
 80061a2:	fa00 f202 	lsl.w	r2, r0, r2
 80061a6:	3340      	adds	r3, #64	; 0x40
 80061a8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80061ac:	bf00      	nop
 80061ae:	370c      	adds	r7, #12
 80061b0:	46bd      	mov	sp, r7
 80061b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b6:	4770      	bx	lr
 80061b8:	e000e100 	.word	0xe000e100

080061bc <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 80061bc:	b480      	push	{r7}
 80061be:	b083      	sub	sp, #12
 80061c0:	af00      	add	r7, sp, #0
 80061c2:	4603      	mov	r3, r0
 80061c4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80061c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	db0c      	blt.n	80061e8 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80061ce:	79fb      	ldrb	r3, [r7, #7]
 80061d0:	f003 021f 	and.w	r2, r3, #31
 80061d4:	4907      	ldr	r1, [pc, #28]	; (80061f4 <__NVIC_ClearPendingIRQ+0x38>)
 80061d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80061da:	095b      	lsrs	r3, r3, #5
 80061dc:	2001      	movs	r0, #1
 80061de:	fa00 f202 	lsl.w	r2, r0, r2
 80061e2:	3360      	adds	r3, #96	; 0x60
 80061e4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80061e8:	bf00      	nop
 80061ea:	370c      	adds	r7, #12
 80061ec:	46bd      	mov	sp, r7
 80061ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061f2:	4770      	bx	lr
 80061f4:	e000e100 	.word	0xe000e100

080061f8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80061f8:	b480      	push	{r7}
 80061fa:	b083      	sub	sp, #12
 80061fc:	af00      	add	r7, sp, #0
 80061fe:	4603      	mov	r3, r0
 8006200:	6039      	str	r1, [r7, #0]
 8006202:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006204:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006208:	2b00      	cmp	r3, #0
 800620a:	db0a      	blt.n	8006222 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800620c:	683b      	ldr	r3, [r7, #0]
 800620e:	b2da      	uxtb	r2, r3
 8006210:	490c      	ldr	r1, [pc, #48]	; (8006244 <__NVIC_SetPriority+0x4c>)
 8006212:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006216:	0112      	lsls	r2, r2, #4
 8006218:	b2d2      	uxtb	r2, r2
 800621a:	440b      	add	r3, r1
 800621c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006220:	e00a      	b.n	8006238 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006222:	683b      	ldr	r3, [r7, #0]
 8006224:	b2da      	uxtb	r2, r3
 8006226:	4908      	ldr	r1, [pc, #32]	; (8006248 <__NVIC_SetPriority+0x50>)
 8006228:	79fb      	ldrb	r3, [r7, #7]
 800622a:	f003 030f 	and.w	r3, r3, #15
 800622e:	3b04      	subs	r3, #4
 8006230:	0112      	lsls	r2, r2, #4
 8006232:	b2d2      	uxtb	r2, r2
 8006234:	440b      	add	r3, r1
 8006236:	761a      	strb	r2, [r3, #24]
}
 8006238:	bf00      	nop
 800623a:	370c      	adds	r7, #12
 800623c:	46bd      	mov	sp, r7
 800623e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006242:	4770      	bx	lr
 8006244:	e000e100 	.word	0xe000e100
 8006248:	e000ed00 	.word	0xe000ed00

0800624c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800624c:	b480      	push	{r7}
 800624e:	b089      	sub	sp, #36	; 0x24
 8006250:	af00      	add	r7, sp, #0
 8006252:	60f8      	str	r0, [r7, #12]
 8006254:	60b9      	str	r1, [r7, #8]
 8006256:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	f003 0307 	and.w	r3, r3, #7
 800625e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006260:	69fb      	ldr	r3, [r7, #28]
 8006262:	f1c3 0307 	rsb	r3, r3, #7
 8006266:	2b04      	cmp	r3, #4
 8006268:	bf28      	it	cs
 800626a:	2304      	movcs	r3, #4
 800626c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800626e:	69fb      	ldr	r3, [r7, #28]
 8006270:	3304      	adds	r3, #4
 8006272:	2b06      	cmp	r3, #6
 8006274:	d902      	bls.n	800627c <NVIC_EncodePriority+0x30>
 8006276:	69fb      	ldr	r3, [r7, #28]
 8006278:	3b03      	subs	r3, #3
 800627a:	e000      	b.n	800627e <NVIC_EncodePriority+0x32>
 800627c:	2300      	movs	r3, #0
 800627e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006280:	f04f 32ff 	mov.w	r2, #4294967295
 8006284:	69bb      	ldr	r3, [r7, #24]
 8006286:	fa02 f303 	lsl.w	r3, r2, r3
 800628a:	43da      	mvns	r2, r3
 800628c:	68bb      	ldr	r3, [r7, #8]
 800628e:	401a      	ands	r2, r3
 8006290:	697b      	ldr	r3, [r7, #20]
 8006292:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006294:	f04f 31ff 	mov.w	r1, #4294967295
 8006298:	697b      	ldr	r3, [r7, #20]
 800629a:	fa01 f303 	lsl.w	r3, r1, r3
 800629e:	43d9      	mvns	r1, r3
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80062a4:	4313      	orrs	r3, r2
         );
}
 80062a6:	4618      	mov	r0, r3
 80062a8:	3724      	adds	r7, #36	; 0x24
 80062aa:	46bd      	mov	sp, r7
 80062ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062b0:	4770      	bx	lr

080062b2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80062b2:	b580      	push	{r7, lr}
 80062b4:	b082      	sub	sp, #8
 80062b6:	af00      	add	r7, sp, #0
 80062b8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80062ba:	6878      	ldr	r0, [r7, #4]
 80062bc:	f7ff feee 	bl	800609c <__NVIC_SetPriorityGrouping>
}
 80062c0:	bf00      	nop
 80062c2:	3708      	adds	r7, #8
 80062c4:	46bd      	mov	sp, r7
 80062c6:	bd80      	pop	{r7, pc}

080062c8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80062c8:	b580      	push	{r7, lr}
 80062ca:	b086      	sub	sp, #24
 80062cc:	af00      	add	r7, sp, #0
 80062ce:	4603      	mov	r3, r0
 80062d0:	60b9      	str	r1, [r7, #8]
 80062d2:	607a      	str	r2, [r7, #4]
 80062d4:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80062d6:	f7ff ff05 	bl	80060e4 <__NVIC_GetPriorityGrouping>
 80062da:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80062dc:	687a      	ldr	r2, [r7, #4]
 80062de:	68b9      	ldr	r1, [r7, #8]
 80062e0:	6978      	ldr	r0, [r7, #20]
 80062e2:	f7ff ffb3 	bl	800624c <NVIC_EncodePriority>
 80062e6:	4602      	mov	r2, r0
 80062e8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80062ec:	4611      	mov	r1, r2
 80062ee:	4618      	mov	r0, r3
 80062f0:	f7ff ff82 	bl	80061f8 <__NVIC_SetPriority>
}
 80062f4:	bf00      	nop
 80062f6:	3718      	adds	r7, #24
 80062f8:	46bd      	mov	sp, r7
 80062fa:	bd80      	pop	{r7, pc}

080062fc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80062fc:	b580      	push	{r7, lr}
 80062fe:	b082      	sub	sp, #8
 8006300:	af00      	add	r7, sp, #0
 8006302:	4603      	mov	r3, r0
 8006304:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006306:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800630a:	4618      	mov	r0, r3
 800630c:	f7ff fef8 	bl	8006100 <__NVIC_EnableIRQ>
}
 8006310:	bf00      	nop
 8006312:	3708      	adds	r7, #8
 8006314:	46bd      	mov	sp, r7
 8006316:	bd80      	pop	{r7, pc}

08006318 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8006318:	b580      	push	{r7, lr}
 800631a:	b082      	sub	sp, #8
 800631c:	af00      	add	r7, sp, #0
 800631e:	4603      	mov	r3, r0
 8006320:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8006322:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006326:	4618      	mov	r0, r3
 8006328:	f7ff ff08 	bl	800613c <__NVIC_DisableIRQ>
}
 800632c:	bf00      	nop
 800632e:	3708      	adds	r7, #8
 8006330:	46bd      	mov	sp, r7
 8006332:	bd80      	pop	{r7, pc}

08006334 <HAL_NVIC_SetPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 8006334:	b580      	push	{r7, lr}
 8006336:	b082      	sub	sp, #8
 8006338:	af00      	add	r7, sp, #0
 800633a:	4603      	mov	r3, r0
 800633c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Set interrupt pending */
  NVIC_SetPendingIRQ(IRQn);
 800633e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006342:	4618      	mov	r0, r3
 8006344:	f7ff ff1c 	bl	8006180 <__NVIC_SetPendingIRQ>
}
 8006348:	bf00      	nop
 800634a:	3708      	adds	r7, #8
 800634c:	46bd      	mov	sp, r7
 800634e:	bd80      	pop	{r7, pc}

08006350 <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8006350:	b580      	push	{r7, lr}
 8006352:	b082      	sub	sp, #8
 8006354:	af00      	add	r7, sp, #0
 8006356:	4603      	mov	r3, r0
 8006358:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 800635a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800635e:	4618      	mov	r0, r3
 8006360:	f7ff ff2c 	bl	80061bc <__NVIC_ClearPendingIRQ>
}
 8006364:	bf00      	nop
 8006366:	3708      	adds	r7, #8
 8006368:	46bd      	mov	sp, r7
 800636a:	bd80      	pop	{r7, pc}

0800636c <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800636c:	b580      	push	{r7, lr}
 800636e:	b084      	sub	sp, #16
 8006370:	af00      	add	r7, sp, #0
 8006372:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	2b00      	cmp	r3, #0
 8006378:	d101      	bne.n	800637e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800637a:	2301      	movs	r3, #1
 800637c:	e08e      	b.n	800649c <HAL_DMA_Init+0x130>

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

#if defined(DMA2)
  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	461a      	mov	r2, r3
 8006384:	4b47      	ldr	r3, [pc, #284]	; (80064a4 <HAL_DMA_Init+0x138>)
 8006386:	429a      	cmp	r2, r3
 8006388:	d80f      	bhi.n	80063aa <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	461a      	mov	r2, r3
 8006390:	4b45      	ldr	r3, [pc, #276]	; (80064a8 <HAL_DMA_Init+0x13c>)
 8006392:	4413      	add	r3, r2
 8006394:	4a45      	ldr	r2, [pc, #276]	; (80064ac <HAL_DMA_Init+0x140>)
 8006396:	fba2 2303 	umull	r2, r3, r2, r3
 800639a:	091b      	lsrs	r3, r3, #4
 800639c:	009a      	lsls	r2, r3, #2
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	4a42      	ldr	r2, [pc, #264]	; (80064b0 <HAL_DMA_Init+0x144>)
 80063a6:	641a      	str	r2, [r3, #64]	; 0x40
 80063a8:	e00e      	b.n	80063c8 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	461a      	mov	r2, r3
 80063b0:	4b40      	ldr	r3, [pc, #256]	; (80064b4 <HAL_DMA_Init+0x148>)
 80063b2:	4413      	add	r3, r2
 80063b4:	4a3d      	ldr	r2, [pc, #244]	; (80064ac <HAL_DMA_Init+0x140>)
 80063b6:	fba2 2303 	umull	r2, r3, r2, r3
 80063ba:	091b      	lsrs	r3, r3, #4
 80063bc:	009a      	lsls	r2, r3, #2
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	4a3c      	ldr	r2, [pc, #240]	; (80064b8 <HAL_DMA_Init+0x14c>)
 80063c6:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	2202      	movs	r2, #2
 80063cc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80063de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80063e2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80063ec:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	691b      	ldr	r3, [r3, #16]
 80063f2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80063f8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	699b      	ldr	r3, [r3, #24]
 80063fe:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006404:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	6a1b      	ldr	r3, [r3, #32]
 800640a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800640c:	68fa      	ldr	r2, [r7, #12]
 800640e:	4313      	orrs	r3, r2
 8006410:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	68fa      	ldr	r2, [r7, #12]
 8006418:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800641a:	6878      	ldr	r0, [r7, #4]
 800641c:	f000 f908 	bl	8006630 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	689b      	ldr	r3, [r3, #8]
 8006424:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006428:	d102      	bne.n	8006430 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	2200      	movs	r2, #0
 800642e:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	685a      	ldr	r2, [r3, #4]
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006438:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 800643c:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006442:	687a      	ldr	r2, [r7, #4]
 8006444:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8006446:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	685b      	ldr	r3, [r3, #4]
 800644c:	2b00      	cmp	r3, #0
 800644e:	d010      	beq.n	8006472 <HAL_DMA_Init+0x106>
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	685b      	ldr	r3, [r3, #4]
 8006454:	2b04      	cmp	r3, #4
 8006456:	d80c      	bhi.n	8006472 <HAL_DMA_Init+0x106>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8006458:	6878      	ldr	r0, [r7, #4]
 800645a:	f000 f927 	bl	80066ac <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006462:	2200      	movs	r2, #0
 8006464:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800646a:	687a      	ldr	r2, [r7, #4]
 800646c:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800646e:	605a      	str	r2, [r3, #4]
 8006470:	e008      	b.n	8006484 <HAL_DMA_Init+0x118>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	2200      	movs	r2, #0
 8006476:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	2200      	movs	r2, #0
 800647c:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	2200      	movs	r2, #0
 8006482:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	2200      	movs	r2, #0
 8006488:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	2201      	movs	r2, #1
 800648e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	2200      	movs	r2, #0
 8006496:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800649a:	2300      	movs	r3, #0
}
 800649c:	4618      	mov	r0, r3
 800649e:	3710      	adds	r7, #16
 80064a0:	46bd      	mov	sp, r7
 80064a2:	bd80      	pop	{r7, pc}
 80064a4:	40020407 	.word	0x40020407
 80064a8:	bffdfff8 	.word	0xbffdfff8
 80064ac:	cccccccd 	.word	0xcccccccd
 80064b0:	40020000 	.word	0x40020000
 80064b4:	bffdfbf8 	.word	0xbffdfbf8
 80064b8:	40020400 	.word	0x40020400

080064bc <HAL_DMA_Start_IT>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80064bc:	b580      	push	{r7, lr}
 80064be:	b086      	sub	sp, #24
 80064c0:	af00      	add	r7, sp, #0
 80064c2:	60f8      	str	r0, [r7, #12]
 80064c4:	60b9      	str	r1, [r7, #8]
 80064c6:	607a      	str	r2, [r7, #4]
 80064c8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80064ca:	2300      	movs	r3, #0
 80064cc:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80064d4:	2b01      	cmp	r3, #1
 80064d6:	d101      	bne.n	80064dc <HAL_DMA_Start_IT+0x20>
 80064d8:	2302      	movs	r3, #2
 80064da:	e066      	b.n	80065aa <HAL_DMA_Start_IT+0xee>
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	2201      	movs	r2, #1
 80064e0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80064ea:	b2db      	uxtb	r3, r3
 80064ec:	2b01      	cmp	r3, #1
 80064ee:	d155      	bne.n	800659c <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	2202      	movs	r2, #2
 80064f4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	2200      	movs	r2, #0
 80064fc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	681a      	ldr	r2, [r3, #0]
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	f022 0201 	bic.w	r2, r2, #1
 800650c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800650e:	683b      	ldr	r3, [r7, #0]
 8006510:	687a      	ldr	r2, [r7, #4]
 8006512:	68b9      	ldr	r1, [r7, #8]
 8006514:	68f8      	ldr	r0, [r7, #12]
 8006516:	f000 f84c 	bl	80065b2 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800651e:	2b00      	cmp	r3, #0
 8006520:	d008      	beq.n	8006534 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	681a      	ldr	r2, [r3, #0]
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	f042 020e 	orr.w	r2, r2, #14
 8006530:	601a      	str	r2, [r3, #0]
 8006532:	e00f      	b.n	8006554 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	681a      	ldr	r2, [r3, #0]
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	f022 0204 	bic.w	r2, r2, #4
 8006542:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	681a      	ldr	r2, [r3, #0]
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	f042 020a 	orr.w	r2, r2, #10
 8006552:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800655e:	2b00      	cmp	r3, #0
 8006560:	d007      	beq.n	8006572 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006566:	681a      	ldr	r2, [r3, #0]
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800656c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006570:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006576:	2b00      	cmp	r3, #0
 8006578:	d007      	beq.n	800658a <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800657e:	681a      	ldr	r2, [r3, #0]
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006584:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006588:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	681a      	ldr	r2, [r3, #0]
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	f042 0201 	orr.w	r2, r2, #1
 8006598:	601a      	str	r2, [r3, #0]
 800659a:	e005      	b.n	80065a8 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	2200      	movs	r2, #0
 80065a0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80065a4:	2302      	movs	r3, #2
 80065a6:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80065a8:	7dfb      	ldrb	r3, [r7, #23]
}
 80065aa:	4618      	mov	r0, r3
 80065ac:	3718      	adds	r7, #24
 80065ae:	46bd      	mov	sp, r7
 80065b0:	bd80      	pop	{r7, pc}

080065b2 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80065b2:	b480      	push	{r7}
 80065b4:	b085      	sub	sp, #20
 80065b6:	af00      	add	r7, sp, #0
 80065b8:	60f8      	str	r0, [r7, #12]
 80065ba:	60b9      	str	r1, [r7, #8]
 80065bc:	607a      	str	r2, [r7, #4]
 80065be:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80065c4:	68fa      	ldr	r2, [r7, #12]
 80065c6:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80065c8:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d004      	beq.n	80065dc <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80065d6:	68fa      	ldr	r2, [r7, #12]
 80065d8:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80065da:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80065e0:	f003 021c 	and.w	r2, r3, #28
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065e8:	2101      	movs	r1, #1
 80065ea:	fa01 f202 	lsl.w	r2, r1, r2
 80065ee:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	683a      	ldr	r2, [r7, #0]
 80065f6:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	689b      	ldr	r3, [r3, #8]
 80065fc:	2b10      	cmp	r3, #16
 80065fe:	d108      	bne.n	8006612 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	687a      	ldr	r2, [r7, #4]
 8006606:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	68ba      	ldr	r2, [r7, #8]
 800660e:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8006610:	e007      	b.n	8006622 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	68ba      	ldr	r2, [r7, #8]
 8006618:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	687a      	ldr	r2, [r7, #4]
 8006620:	60da      	str	r2, [r3, #12]
}
 8006622:	bf00      	nop
 8006624:	3714      	adds	r7, #20
 8006626:	46bd      	mov	sp, r7
 8006628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800662c:	4770      	bx	lr
	...

08006630 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8006630:	b480      	push	{r7}
 8006632:	b085      	sub	sp, #20
 8006634:	af00      	add	r7, sp, #0
 8006636:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
#if defined(DMA2)
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	461a      	mov	r2, r3
 800663e:	4b17      	ldr	r3, [pc, #92]	; (800669c <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8006640:	429a      	cmp	r2, r3
 8006642:	d80a      	bhi.n	800665a <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006648:	089b      	lsrs	r3, r3, #2
 800664a:	009b      	lsls	r3, r3, #2
 800664c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006650:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 8006654:	687a      	ldr	r2, [r7, #4]
 8006656:	6493      	str	r3, [r2, #72]	; 0x48
 8006658:	e007      	b.n	800666a <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800665e:	089b      	lsrs	r3, r3, #2
 8006660:	009a      	lsls	r2, r3, #2
 8006662:	4b0f      	ldr	r3, [pc, #60]	; (80066a0 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8006664:	4413      	add	r3, r2
 8006666:	687a      	ldr	r2, [r7, #4]
 8006668:	6493      	str	r3, [r2, #72]	; 0x48
  }
#else
  /* DMA1 */
  hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
#endif
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	b2db      	uxtb	r3, r3
 8006670:	3b08      	subs	r3, #8
 8006672:	4a0c      	ldr	r2, [pc, #48]	; (80066a4 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8006674:	fba2 2303 	umull	r2, r3, r2, r3
 8006678:	091b      	lsrs	r3, r3, #4
 800667a:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	4a0a      	ldr	r2, [pc, #40]	; (80066a8 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8006680:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	f003 031f 	and.w	r3, r3, #31
 8006688:	2201      	movs	r2, #1
 800668a:	409a      	lsls	r2, r3
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	651a      	str	r2, [r3, #80]	; 0x50
}
 8006690:	bf00      	nop
 8006692:	3714      	adds	r7, #20
 8006694:	46bd      	mov	sp, r7
 8006696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800669a:	4770      	bx	lr
 800669c:	40020407 	.word	0x40020407
 80066a0:	4002081c 	.word	0x4002081c
 80066a4:	cccccccd 	.word	0xcccccccd
 80066a8:	40020880 	.word	0x40020880

080066ac <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80066ac:	b480      	push	{r7}
 80066ae:	b085      	sub	sp, #20
 80066b0:	af00      	add	r7, sp, #0
 80066b2:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	685b      	ldr	r3, [r3, #4]
 80066b8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80066bc:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80066be:	68fa      	ldr	r2, [r7, #12]
 80066c0:	4b0b      	ldr	r3, [pc, #44]	; (80066f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80066c2:	4413      	add	r3, r2
 80066c4:	009b      	lsls	r3, r3, #2
 80066c6:	461a      	mov	r2, r3
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	4a09      	ldr	r2, [pc, #36]	; (80066f4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x48>)
 80066d0:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	3b01      	subs	r3, #1
 80066d6:	f003 0303 	and.w	r3, r3, #3
 80066da:	2201      	movs	r2, #1
 80066dc:	409a      	lsls	r2, r3
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	65da      	str	r2, [r3, #92]	; 0x5c
}
 80066e2:	bf00      	nop
 80066e4:	3714      	adds	r7, #20
 80066e6:	46bd      	mov	sp, r7
 80066e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ec:	4770      	bx	lr
 80066ee:	bf00      	nop
 80066f0:	1000823f 	.word	0x1000823f
 80066f4:	40020940 	.word	0x40020940

080066f8 <HAL_DMAEx_ConfigMuxSync>:
  *                     the configuration information for the specified DMA channel.
  * @param  pSyncConfig Pointer to HAL_DMA_MuxSyncConfigTypeDef : contains the DMAMUX synchronization parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_ConfigMuxSync(DMA_HandleTypeDef *hdma, HAL_DMA_MuxSyncConfigTypeDef *pSyncConfig)
{
 80066f8:	b480      	push	{r7}
 80066fa:	b083      	sub	sp, #12
 80066fc:	af00      	add	r7, sp, #0
 80066fe:	6078      	str	r0, [r7, #4]
 8006700:	6039      	str	r1, [r7, #0]
  assert_param(IS_DMAMUX_SYNC_STATE(pSyncConfig->SyncEnable));
  assert_param(IS_DMAMUX_SYNC_EVENT(pSyncConfig->EventEnable));
  assert_param(IS_DMAMUX_SYNC_REQUEST_NUMBER(pSyncConfig->RequestNumber));

  /*Check if the DMA state is ready */
  if (hdma->State == HAL_DMA_STATE_READY)
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8006708:	b2db      	uxtb	r3, r3
 800670a:	2b01      	cmp	r3, #1
 800670c:	d12b      	bne.n	8006766 <HAL_DMAEx_ConfigMuxSync+0x6e>
  {
    /* Process Locked */
    __HAL_LOCK(hdma);
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006714:	2b01      	cmp	r3, #1
 8006716:	d101      	bne.n	800671c <HAL_DMAEx_ConfigMuxSync+0x24>
 8006718:	2302      	movs	r3, #2
 800671a:	e025      	b.n	8006768 <HAL_DMAEx_ConfigMuxSync+0x70>
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	2201      	movs	r2, #1
 8006720:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Set the new synchronization parameters (and keep the request ID filled during the Init)*/
    MODIFY_REG(hdma->DMAmuxChannel->CCR, \
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006728:	681a      	ldr	r2, [r3, #0]
 800672a:	4b12      	ldr	r3, [pc, #72]	; (8006774 <HAL_DMAEx_ConfigMuxSync+0x7c>)
 800672c:	4013      	ands	r3, r2
 800672e:	683a      	ldr	r2, [r7, #0]
 8006730:	6811      	ldr	r1, [r2, #0]
 8006732:	683a      	ldr	r2, [r7, #0]
 8006734:	68d2      	ldr	r2, [r2, #12]
 8006736:	3a01      	subs	r2, #1
 8006738:	04d2      	lsls	r2, r2, #19
 800673a:	4311      	orrs	r1, r2
 800673c:	683a      	ldr	r2, [r7, #0]
 800673e:	6852      	ldr	r2, [r2, #4]
 8006740:	4311      	orrs	r1, r2
 8006742:	683a      	ldr	r2, [r7, #0]
 8006744:	7a12      	ldrb	r2, [r2, #8]
 8006746:	0412      	lsls	r2, r2, #16
 8006748:	4311      	orrs	r1, r2
 800674a:	683a      	ldr	r2, [r7, #0]
 800674c:	7a52      	ldrb	r2, [r2, #9]
 800674e:	0252      	lsls	r2, r2, #9
 8006750:	4311      	orrs	r1, r2
 8006752:	687a      	ldr	r2, [r7, #4]
 8006754:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8006756:	430b      	orrs	r3, r1
 8006758:	6013      	str	r3, [r2, #0]
                pSyncConfig->SyncPolarity                                       | \
                ((uint32_t)pSyncConfig->SyncEnable << DMAMUX_CxCR_SE_Pos)                 | \
                ((uint32_t)pSyncConfig->EventEnable << DMAMUX_CxCR_EGE_Pos)));

    /* Process UnLocked */
    __HAL_UNLOCK(hdma);
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	2200      	movs	r2, #0
 800675e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_OK;
 8006762:	2300      	movs	r3, #0
 8006764:	e000      	b.n	8006768 <HAL_DMAEx_ConfigMuxSync+0x70>
  }
  else
  {
    /*DMA State not Ready*/
    return HAL_ERROR;
 8006766:	2301      	movs	r3, #1
  }
}
 8006768:	4618      	mov	r0, r3
 800676a:	370c      	adds	r7, #12
 800676c:	46bd      	mov	sp, r7
 800676e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006772:	4770      	bx	lr
 8006774:	e000fdff 	.word	0xe000fdff

08006778 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006778:	b480      	push	{r7}
 800677a:	b087      	sub	sp, #28
 800677c:	af00      	add	r7, sp, #0
 800677e:	6078      	str	r0, [r7, #4]
 8006780:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8006782:	2300      	movs	r3, #0
 8006784:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8006786:	e14c      	b.n	8006a22 <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8006788:	683b      	ldr	r3, [r7, #0]
 800678a:	681a      	ldr	r2, [r3, #0]
 800678c:	2101      	movs	r1, #1
 800678e:	697b      	ldr	r3, [r7, #20]
 8006790:	fa01 f303 	lsl.w	r3, r1, r3
 8006794:	4013      	ands	r3, r2
 8006796:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	2b00      	cmp	r3, #0
 800679c:	f000 813e 	beq.w	8006a1c <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80067a0:	683b      	ldr	r3, [r7, #0]
 80067a2:	685b      	ldr	r3, [r3, #4]
 80067a4:	2b01      	cmp	r3, #1
 80067a6:	d00b      	beq.n	80067c0 <HAL_GPIO_Init+0x48>
 80067a8:	683b      	ldr	r3, [r7, #0]
 80067aa:	685b      	ldr	r3, [r3, #4]
 80067ac:	2b02      	cmp	r3, #2
 80067ae:	d007      	beq.n	80067c0 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80067b0:	683b      	ldr	r3, [r7, #0]
 80067b2:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80067b4:	2b11      	cmp	r3, #17
 80067b6:	d003      	beq.n	80067c0 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80067b8:	683b      	ldr	r3, [r7, #0]
 80067ba:	685b      	ldr	r3, [r3, #4]
 80067bc:	2b12      	cmp	r3, #18
 80067be:	d130      	bne.n	8006822 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	689b      	ldr	r3, [r3, #8]
 80067c4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80067c6:	697b      	ldr	r3, [r7, #20]
 80067c8:	005b      	lsls	r3, r3, #1
 80067ca:	2203      	movs	r2, #3
 80067cc:	fa02 f303 	lsl.w	r3, r2, r3
 80067d0:	43db      	mvns	r3, r3
 80067d2:	693a      	ldr	r2, [r7, #16]
 80067d4:	4013      	ands	r3, r2
 80067d6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80067d8:	683b      	ldr	r3, [r7, #0]
 80067da:	68da      	ldr	r2, [r3, #12]
 80067dc:	697b      	ldr	r3, [r7, #20]
 80067de:	005b      	lsls	r3, r3, #1
 80067e0:	fa02 f303 	lsl.w	r3, r2, r3
 80067e4:	693a      	ldr	r2, [r7, #16]
 80067e6:	4313      	orrs	r3, r2
 80067e8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	693a      	ldr	r2, [r7, #16]
 80067ee:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	685b      	ldr	r3, [r3, #4]
 80067f4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80067f6:	2201      	movs	r2, #1
 80067f8:	697b      	ldr	r3, [r7, #20]
 80067fa:	fa02 f303 	lsl.w	r3, r2, r3
 80067fe:	43db      	mvns	r3, r3
 8006800:	693a      	ldr	r2, [r7, #16]
 8006802:	4013      	ands	r3, r2
 8006804:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8006806:	683b      	ldr	r3, [r7, #0]
 8006808:	685b      	ldr	r3, [r3, #4]
 800680a:	091b      	lsrs	r3, r3, #4
 800680c:	f003 0201 	and.w	r2, r3, #1
 8006810:	697b      	ldr	r3, [r7, #20]
 8006812:	fa02 f303 	lsl.w	r3, r2, r3
 8006816:	693a      	ldr	r2, [r7, #16]
 8006818:	4313      	orrs	r3, r2
 800681a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	693a      	ldr	r2, [r7, #16]
 8006820:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	68db      	ldr	r3, [r3, #12]
 8006826:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8006828:	697b      	ldr	r3, [r7, #20]
 800682a:	005b      	lsls	r3, r3, #1
 800682c:	2203      	movs	r2, #3
 800682e:	fa02 f303 	lsl.w	r3, r2, r3
 8006832:	43db      	mvns	r3, r3
 8006834:	693a      	ldr	r2, [r7, #16]
 8006836:	4013      	ands	r3, r2
 8006838:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 800683a:	683b      	ldr	r3, [r7, #0]
 800683c:	689a      	ldr	r2, [r3, #8]
 800683e:	697b      	ldr	r3, [r7, #20]
 8006840:	005b      	lsls	r3, r3, #1
 8006842:	fa02 f303 	lsl.w	r3, r2, r3
 8006846:	693a      	ldr	r2, [r7, #16]
 8006848:	4313      	orrs	r3, r2
 800684a:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	693a      	ldr	r2, [r7, #16]
 8006850:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006852:	683b      	ldr	r3, [r7, #0]
 8006854:	685b      	ldr	r3, [r3, #4]
 8006856:	2b02      	cmp	r3, #2
 8006858:	d003      	beq.n	8006862 <HAL_GPIO_Init+0xea>
 800685a:	683b      	ldr	r3, [r7, #0]
 800685c:	685b      	ldr	r3, [r3, #4]
 800685e:	2b12      	cmp	r3, #18
 8006860:	d123      	bne.n	80068aa <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8006862:	697b      	ldr	r3, [r7, #20]
 8006864:	08da      	lsrs	r2, r3, #3
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	3208      	adds	r2, #8
 800686a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800686e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8006870:	697b      	ldr	r3, [r7, #20]
 8006872:	f003 0307 	and.w	r3, r3, #7
 8006876:	009b      	lsls	r3, r3, #2
 8006878:	220f      	movs	r2, #15
 800687a:	fa02 f303 	lsl.w	r3, r2, r3
 800687e:	43db      	mvns	r3, r3
 8006880:	693a      	ldr	r2, [r7, #16]
 8006882:	4013      	ands	r3, r2
 8006884:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8006886:	683b      	ldr	r3, [r7, #0]
 8006888:	691a      	ldr	r2, [r3, #16]
 800688a:	697b      	ldr	r3, [r7, #20]
 800688c:	f003 0307 	and.w	r3, r3, #7
 8006890:	009b      	lsls	r3, r3, #2
 8006892:	fa02 f303 	lsl.w	r3, r2, r3
 8006896:	693a      	ldr	r2, [r7, #16]
 8006898:	4313      	orrs	r3, r2
 800689a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800689c:	697b      	ldr	r3, [r7, #20]
 800689e:	08da      	lsrs	r2, r3, #3
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	3208      	adds	r2, #8
 80068a4:	6939      	ldr	r1, [r7, #16]
 80068a6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80068b0:	697b      	ldr	r3, [r7, #20]
 80068b2:	005b      	lsls	r3, r3, #1
 80068b4:	2203      	movs	r2, #3
 80068b6:	fa02 f303 	lsl.w	r3, r2, r3
 80068ba:	43db      	mvns	r3, r3
 80068bc:	693a      	ldr	r2, [r7, #16]
 80068be:	4013      	ands	r3, r2
 80068c0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80068c2:	683b      	ldr	r3, [r7, #0]
 80068c4:	685b      	ldr	r3, [r3, #4]
 80068c6:	f003 0203 	and.w	r2, r3, #3
 80068ca:	697b      	ldr	r3, [r7, #20]
 80068cc:	005b      	lsls	r3, r3, #1
 80068ce:	fa02 f303 	lsl.w	r3, r2, r3
 80068d2:	693a      	ldr	r2, [r7, #16]
 80068d4:	4313      	orrs	r3, r2
 80068d6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	693a      	ldr	r2, [r7, #16]
 80068dc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80068de:	683b      	ldr	r3, [r7, #0]
 80068e0:	685b      	ldr	r3, [r3, #4]
 80068e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	f000 8098 	beq.w	8006a1c <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 80068ec:	4a54      	ldr	r2, [pc, #336]	; (8006a40 <HAL_GPIO_Init+0x2c8>)
 80068ee:	697b      	ldr	r3, [r7, #20]
 80068f0:	089b      	lsrs	r3, r3, #2
 80068f2:	3302      	adds	r3, #2
 80068f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80068f8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80068fa:	697b      	ldr	r3, [r7, #20]
 80068fc:	f003 0303 	and.w	r3, r3, #3
 8006900:	009b      	lsls	r3, r3, #2
 8006902:	220f      	movs	r2, #15
 8006904:	fa02 f303 	lsl.w	r3, r2, r3
 8006908:	43db      	mvns	r3, r3
 800690a:	693a      	ldr	r2, [r7, #16]
 800690c:	4013      	ands	r3, r2
 800690e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8006916:	d019      	beq.n	800694c <HAL_GPIO_Init+0x1d4>
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	4a4a      	ldr	r2, [pc, #296]	; (8006a44 <HAL_GPIO_Init+0x2cc>)
 800691c:	4293      	cmp	r3, r2
 800691e:	d013      	beq.n	8006948 <HAL_GPIO_Init+0x1d0>
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	4a49      	ldr	r2, [pc, #292]	; (8006a48 <HAL_GPIO_Init+0x2d0>)
 8006924:	4293      	cmp	r3, r2
 8006926:	d00d      	beq.n	8006944 <HAL_GPIO_Init+0x1cc>
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	4a48      	ldr	r2, [pc, #288]	; (8006a4c <HAL_GPIO_Init+0x2d4>)
 800692c:	4293      	cmp	r3, r2
 800692e:	d007      	beq.n	8006940 <HAL_GPIO_Init+0x1c8>
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	4a47      	ldr	r2, [pc, #284]	; (8006a50 <HAL_GPIO_Init+0x2d8>)
 8006934:	4293      	cmp	r3, r2
 8006936:	d101      	bne.n	800693c <HAL_GPIO_Init+0x1c4>
 8006938:	2304      	movs	r3, #4
 800693a:	e008      	b.n	800694e <HAL_GPIO_Init+0x1d6>
 800693c:	2307      	movs	r3, #7
 800693e:	e006      	b.n	800694e <HAL_GPIO_Init+0x1d6>
 8006940:	2303      	movs	r3, #3
 8006942:	e004      	b.n	800694e <HAL_GPIO_Init+0x1d6>
 8006944:	2302      	movs	r3, #2
 8006946:	e002      	b.n	800694e <HAL_GPIO_Init+0x1d6>
 8006948:	2301      	movs	r3, #1
 800694a:	e000      	b.n	800694e <HAL_GPIO_Init+0x1d6>
 800694c:	2300      	movs	r3, #0
 800694e:	697a      	ldr	r2, [r7, #20]
 8006950:	f002 0203 	and.w	r2, r2, #3
 8006954:	0092      	lsls	r2, r2, #2
 8006956:	4093      	lsls	r3, r2
 8006958:	693a      	ldr	r2, [r7, #16]
 800695a:	4313      	orrs	r3, r2
 800695c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800695e:	4938      	ldr	r1, [pc, #224]	; (8006a40 <HAL_GPIO_Init+0x2c8>)
 8006960:	697b      	ldr	r3, [r7, #20]
 8006962:	089b      	lsrs	r3, r3, #2
 8006964:	3302      	adds	r3, #2
 8006966:	693a      	ldr	r2, [r7, #16]
 8006968:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800696c:	4b39      	ldr	r3, [pc, #228]	; (8006a54 <HAL_GPIO_Init+0x2dc>)
 800696e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006972:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	43db      	mvns	r3, r3
 8006978:	693a      	ldr	r2, [r7, #16]
 800697a:	4013      	ands	r3, r2
 800697c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800697e:	683b      	ldr	r3, [r7, #0]
 8006980:	685b      	ldr	r3, [r3, #4]
 8006982:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006986:	2b00      	cmp	r3, #0
 8006988:	d003      	beq.n	8006992 <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 800698a:	693a      	ldr	r2, [r7, #16]
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	4313      	orrs	r3, r2
 8006990:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8006992:	4a30      	ldr	r2, [pc, #192]	; (8006a54 <HAL_GPIO_Init+0x2dc>)
 8006994:	693b      	ldr	r3, [r7, #16]
 8006996:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 800699a:	4b2e      	ldr	r3, [pc, #184]	; (8006a54 <HAL_GPIO_Init+0x2dc>)
 800699c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80069a0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	43db      	mvns	r3, r3
 80069a6:	693a      	ldr	r2, [r7, #16]
 80069a8:	4013      	ands	r3, r2
 80069aa:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80069ac:	683b      	ldr	r3, [r7, #0]
 80069ae:	685b      	ldr	r3, [r3, #4]
 80069b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d003      	beq.n	80069c0 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 80069b8:	693a      	ldr	r2, [r7, #16]
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	4313      	orrs	r3, r2
 80069be:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80069c0:	4a24      	ldr	r2, [pc, #144]	; (8006a54 <HAL_GPIO_Init+0x2dc>)
 80069c2:	693b      	ldr	r3, [r7, #16]
 80069c4:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80069c8:	4b22      	ldr	r3, [pc, #136]	; (8006a54 <HAL_GPIO_Init+0x2dc>)
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	43db      	mvns	r3, r3
 80069d2:	693a      	ldr	r2, [r7, #16]
 80069d4:	4013      	ands	r3, r2
 80069d6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80069d8:	683b      	ldr	r3, [r7, #0]
 80069da:	685b      	ldr	r3, [r3, #4]
 80069dc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d003      	beq.n	80069ec <HAL_GPIO_Init+0x274>
        {
          temp |= iocurrent;
 80069e4:	693a      	ldr	r2, [r7, #16]
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	4313      	orrs	r3, r2
 80069ea:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80069ec:	4a19      	ldr	r2, [pc, #100]	; (8006a54 <HAL_GPIO_Init+0x2dc>)
 80069ee:	693b      	ldr	r3, [r7, #16]
 80069f0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80069f2:	4b18      	ldr	r3, [pc, #96]	; (8006a54 <HAL_GPIO_Init+0x2dc>)
 80069f4:	685b      	ldr	r3, [r3, #4]
 80069f6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	43db      	mvns	r3, r3
 80069fc:	693a      	ldr	r2, [r7, #16]
 80069fe:	4013      	ands	r3, r2
 8006a00:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8006a02:	683b      	ldr	r3, [r7, #0]
 8006a04:	685b      	ldr	r3, [r3, #4]
 8006a06:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d003      	beq.n	8006a16 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8006a0e:	693a      	ldr	r2, [r7, #16]
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	4313      	orrs	r3, r2
 8006a14:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8006a16:	4a0f      	ldr	r2, [pc, #60]	; (8006a54 <HAL_GPIO_Init+0x2dc>)
 8006a18:	693b      	ldr	r3, [r7, #16]
 8006a1a:	6053      	str	r3, [r2, #4]
      }
    }
    
    position++;
 8006a1c:	697b      	ldr	r3, [r7, #20]
 8006a1e:	3301      	adds	r3, #1
 8006a20:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8006a22:	683b      	ldr	r3, [r7, #0]
 8006a24:	681a      	ldr	r2, [r3, #0]
 8006a26:	697b      	ldr	r3, [r7, #20]
 8006a28:	fa22 f303 	lsr.w	r3, r2, r3
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	f47f aeab 	bne.w	8006788 <HAL_GPIO_Init+0x10>
  }
}
 8006a32:	bf00      	nop
 8006a34:	371c      	adds	r7, #28
 8006a36:	46bd      	mov	sp, r7
 8006a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a3c:	4770      	bx	lr
 8006a3e:	bf00      	nop
 8006a40:	40010000 	.word	0x40010000
 8006a44:	48000400 	.word	0x48000400
 8006a48:	48000800 	.word	0x48000800
 8006a4c:	48000c00 	.word	0x48000c00
 8006a50:	48001000 	.word	0x48001000
 8006a54:	58000800 	.word	0x58000800

08006a58 <HAL_GPIO_ReadPin>:
  * @param GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8006a58:	b480      	push	{r7}
 8006a5a:	b085      	sub	sp, #20
 8006a5c:	af00      	add	r7, sp, #0
 8006a5e:	6078      	str	r0, [r7, #4]
 8006a60:	460b      	mov	r3, r1
 8006a62:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	691a      	ldr	r2, [r3, #16]
 8006a68:	887b      	ldrh	r3, [r7, #2]
 8006a6a:	4013      	ands	r3, r2
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d002      	beq.n	8006a76 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8006a70:	2301      	movs	r3, #1
 8006a72:	73fb      	strb	r3, [r7, #15]
 8006a74:	e001      	b.n	8006a7a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8006a76:	2300      	movs	r3, #0
 8006a78:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8006a7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a7c:	4618      	mov	r0, r3
 8006a7e:	3714      	adds	r7, #20
 8006a80:	46bd      	mov	sp, r7
 8006a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a86:	4770      	bx	lr

08006a88 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006a88:	b480      	push	{r7}
 8006a8a:	b083      	sub	sp, #12
 8006a8c:	af00      	add	r7, sp, #0
 8006a8e:	6078      	str	r0, [r7, #4]
 8006a90:	460b      	mov	r3, r1
 8006a92:	807b      	strh	r3, [r7, #2]
 8006a94:	4613      	mov	r3, r2
 8006a96:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006a98:	787b      	ldrb	r3, [r7, #1]
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d003      	beq.n	8006aa6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8006a9e:	887a      	ldrh	r2, [r7, #2]
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8006aa4:	e002      	b.n	8006aac <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8006aa6:	887a      	ldrh	r2, [r7, #2]
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	629a      	str	r2, [r3, #40]	; 0x28
}
 8006aac:	bf00      	nop
 8006aae:	370c      	adds	r7, #12
 8006ab0:	46bd      	mov	sp, r7
 8006ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ab6:	4770      	bx	lr

08006ab8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8006ab8:	b580      	push	{r7, lr}
 8006aba:	b082      	sub	sp, #8
 8006abc:	af00      	add	r7, sp, #0
 8006abe:	4603      	mov	r3, r0
 8006ac0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8006ac2:	4b08      	ldr	r3, [pc, #32]	; (8006ae4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006ac4:	68da      	ldr	r2, [r3, #12]
 8006ac6:	88fb      	ldrh	r3, [r7, #6]
 8006ac8:	4013      	ands	r3, r2
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d006      	beq.n	8006adc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8006ace:	4a05      	ldr	r2, [pc, #20]	; (8006ae4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006ad0:	88fb      	ldrh	r3, [r7, #6]
 8006ad2:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8006ad4:	88fb      	ldrh	r3, [r7, #6]
 8006ad6:	4618      	mov	r0, r3
 8006ad8:	f7fe f858 	bl	8004b8c <HAL_GPIO_EXTI_Callback>
  }
}
 8006adc:	bf00      	nop
 8006ade:	3708      	adds	r7, #8
 8006ae0:	46bd      	mov	sp, r7
 8006ae2:	bd80      	pop	{r7, pc}
 8006ae4:	58000800 	.word	0x58000800

08006ae8 <HAL_HSEM_IRQHandler>:
/**
  * @brief  This function handles HSEM interrupt request
  * @retval None
  */
void HAL_HSEM_IRQHandler(void)
{
 8006ae8:	b580      	push	{r7, lr}
 8006aea:	b082      	sub	sp, #8
 8006aec:	af00      	add	r7, sp, #0
  uint32_t statusreg;
  /* Get the list of masked freed semaphores*/
  statusreg = HSEM_COMMON->MISR;
 8006aee:	4b0a      	ldr	r3, [pc, #40]	; (8006b18 <HAL_HSEM_IRQHandler+0x30>)
 8006af0:	68db      	ldr	r3, [r3, #12]
 8006af2:	607b      	str	r3, [r7, #4]

  /*Disable Interrupts*/
  HSEM_COMMON->IER &= ~((uint32_t)statusreg);
 8006af4:	4b08      	ldr	r3, [pc, #32]	; (8006b18 <HAL_HSEM_IRQHandler+0x30>)
 8006af6:	681a      	ldr	r2, [r3, #0]
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	43db      	mvns	r3, r3
 8006afc:	4906      	ldr	r1, [pc, #24]	; (8006b18 <HAL_HSEM_IRQHandler+0x30>)
 8006afe:	4013      	ands	r3, r2
 8006b00:	600b      	str	r3, [r1, #0]

  /*Clear Flags*/
  HSEM_COMMON->ICR = ((uint32_t)statusreg);
 8006b02:	4a05      	ldr	r2, [pc, #20]	; (8006b18 <HAL_HSEM_IRQHandler+0x30>)
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	6053      	str	r3, [r2, #4]

  /* Call FreeCallback */
  HAL_HSEM_FreeCallback(statusreg);
 8006b08:	6878      	ldr	r0, [r7, #4]
 8006b0a:	f000 f807 	bl	8006b1c <HAL_HSEM_FreeCallback>
}
 8006b0e:	bf00      	nop
 8006b10:	3708      	adds	r7, #8
 8006b12:	46bd      	mov	sp, r7
 8006b14:	bd80      	pop	{r7, pc}
 8006b16:	bf00      	nop
 8006b18:	58001500 	.word	0x58001500

08006b1c <HAL_HSEM_FreeCallback>:
  * @brief Semaphore Released Callback.
  * @param SemMask: Mask of Released semaphores
  * @retval None
  */
__weak void HAL_HSEM_FreeCallback(uint32_t SemMask)
{
 8006b1c:	b480      	push	{r7}
 8006b1e:	b083      	sub	sp, #12
 8006b20:	af00      	add	r7, sp, #0
 8006b22:	6078      	str	r0, [r7, #4]
  UNUSED(SemMask);

  /* NOTE : This function should not be modified, when the callback is needed,
  the HAL_HSEM_FreeCallback can be implemented in the user file
    */
}
 8006b24:	bf00      	nop
 8006b26:	370c      	adds	r7, #12
 8006b28:	46bd      	mov	sp, r7
 8006b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b2e:	4770      	bx	lr

08006b30 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006b30:	b580      	push	{r7, lr}
 8006b32:	b082      	sub	sp, #8
 8006b34:	af00      	add	r7, sp, #0
 8006b36:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d101      	bne.n	8006b42 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006b3e:	2301      	movs	r3, #1
 8006b40:	e081      	b.n	8006c46 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006b48:	b2db      	uxtb	r3, r3
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d106      	bne.n	8006b5c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	2200      	movs	r2, #0
 8006b52:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8006b56:	6878      	ldr	r0, [r7, #4]
 8006b58:	f7fe ffdc 	bl	8005b14 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	2224      	movs	r2, #36	; 0x24
 8006b60:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	681a      	ldr	r2, [r3, #0]
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	f022 0201 	bic.w	r2, r2, #1
 8006b72:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	685a      	ldr	r2, [r3, #4]
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8006b80:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	689a      	ldr	r2, [r3, #8]
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006b90:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	68db      	ldr	r3, [r3, #12]
 8006b96:	2b01      	cmp	r3, #1
 8006b98:	d107      	bne.n	8006baa <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	689a      	ldr	r2, [r3, #8]
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006ba6:	609a      	str	r2, [r3, #8]
 8006ba8:	e006      	b.n	8006bb8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	689a      	ldr	r2, [r3, #8]
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8006bb6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	68db      	ldr	r3, [r3, #12]
 8006bbc:	2b02      	cmp	r3, #2
 8006bbe:	d104      	bne.n	8006bca <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006bc8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	685b      	ldr	r3, [r3, #4]
 8006bd0:	687a      	ldr	r2, [r7, #4]
 8006bd2:	6812      	ldr	r2, [r2, #0]
 8006bd4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8006bd8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006bdc:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	68da      	ldr	r2, [r3, #12]
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006bec:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	691a      	ldr	r2, [r3, #16]
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	695b      	ldr	r3, [r3, #20]
 8006bf6:	ea42 0103 	orr.w	r1, r2, r3
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	699b      	ldr	r3, [r3, #24]
 8006bfe:	021a      	lsls	r2, r3, #8
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	430a      	orrs	r2, r1
 8006c06:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	69d9      	ldr	r1, [r3, #28]
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	6a1a      	ldr	r2, [r3, #32]
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	430a      	orrs	r2, r1
 8006c16:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	681a      	ldr	r2, [r3, #0]
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	f042 0201 	orr.w	r2, r2, #1
 8006c26:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	2200      	movs	r2, #0
 8006c2c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	2220      	movs	r2, #32
 8006c32:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	2200      	movs	r2, #0
 8006c3a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	2200      	movs	r2, #0
 8006c40:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8006c44:	2300      	movs	r3, #0
}
 8006c46:	4618      	mov	r0, r3
 8006c48:	3708      	adds	r7, #8
 8006c4a:	46bd      	mov	sp, r7
 8006c4c:	bd80      	pop	{r7, pc}
	...

08006c50 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006c50:	b580      	push	{r7, lr}
 8006c52:	b088      	sub	sp, #32
 8006c54:	af02      	add	r7, sp, #8
 8006c56:	60f8      	str	r0, [r7, #12]
 8006c58:	607a      	str	r2, [r7, #4]
 8006c5a:	461a      	mov	r2, r3
 8006c5c:	460b      	mov	r3, r1
 8006c5e:	817b      	strh	r3, [r7, #10]
 8006c60:	4613      	mov	r3, r2
 8006c62:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006c6a:	b2db      	uxtb	r3, r3
 8006c6c:	2b20      	cmp	r3, #32
 8006c6e:	f040 80da 	bne.w	8006e26 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006c78:	2b01      	cmp	r3, #1
 8006c7a:	d101      	bne.n	8006c80 <HAL_I2C_Master_Transmit+0x30>
 8006c7c:	2302      	movs	r3, #2
 8006c7e:	e0d3      	b.n	8006e28 <HAL_I2C_Master_Transmit+0x1d8>
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	2201      	movs	r2, #1
 8006c84:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8006c88:	f7ff f9d8 	bl	800603c <HAL_GetTick>
 8006c8c:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8006c8e:	697b      	ldr	r3, [r7, #20]
 8006c90:	9300      	str	r3, [sp, #0]
 8006c92:	2319      	movs	r3, #25
 8006c94:	2201      	movs	r2, #1
 8006c96:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006c9a:	68f8      	ldr	r0, [r7, #12]
 8006c9c:	f000 fbc6 	bl	800742c <I2C_WaitOnFlagUntilTimeout>
 8006ca0:	4603      	mov	r3, r0
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d001      	beq.n	8006caa <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8006ca6:	2301      	movs	r3, #1
 8006ca8:	e0be      	b.n	8006e28 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	2221      	movs	r2, #33	; 0x21
 8006cae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	2210      	movs	r2, #16
 8006cb6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	2200      	movs	r2, #0
 8006cbe:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	687a      	ldr	r2, [r7, #4]
 8006cc4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	893a      	ldrh	r2, [r7, #8]
 8006cca:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	2200      	movs	r2, #0
 8006cd0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006cd6:	b29b      	uxth	r3, r3
 8006cd8:	2bff      	cmp	r3, #255	; 0xff
 8006cda:	d90e      	bls.n	8006cfa <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	22ff      	movs	r2, #255	; 0xff
 8006ce0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006ce6:	b2da      	uxtb	r2, r3
 8006ce8:	8979      	ldrh	r1, [r7, #10]
 8006cea:	4b51      	ldr	r3, [pc, #324]	; (8006e30 <HAL_I2C_Master_Transmit+0x1e0>)
 8006cec:	9300      	str	r3, [sp, #0]
 8006cee:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006cf2:	68f8      	ldr	r0, [r7, #12]
 8006cf4:	f000 fcbc 	bl	8007670 <I2C_TransferConfig>
 8006cf8:	e06c      	b.n	8006dd4 <HAL_I2C_Master_Transmit+0x184>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006cfe:	b29a      	uxth	r2, r3
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006d08:	b2da      	uxtb	r2, r3
 8006d0a:	8979      	ldrh	r1, [r7, #10]
 8006d0c:	4b48      	ldr	r3, [pc, #288]	; (8006e30 <HAL_I2C_Master_Transmit+0x1e0>)
 8006d0e:	9300      	str	r3, [sp, #0]
 8006d10:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006d14:	68f8      	ldr	r0, [r7, #12]
 8006d16:	f000 fcab 	bl	8007670 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 8006d1a:	e05b      	b.n	8006dd4 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006d1c:	697a      	ldr	r2, [r7, #20]
 8006d1e:	6a39      	ldr	r1, [r7, #32]
 8006d20:	68f8      	ldr	r0, [r7, #12]
 8006d22:	f000 fbc3 	bl	80074ac <I2C_WaitOnTXISFlagUntilTimeout>
 8006d26:	4603      	mov	r3, r0
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d001      	beq.n	8006d30 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8006d2c:	2301      	movs	r3, #1
 8006d2e:	e07b      	b.n	8006e28 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d34:	781a      	ldrb	r2, [r3, #0]
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d40:	1c5a      	adds	r2, r3, #1
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006d4a:	b29b      	uxth	r3, r3
 8006d4c:	3b01      	subs	r3, #1
 8006d4e:	b29a      	uxth	r2, r3
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006d58:	3b01      	subs	r3, #1
 8006d5a:	b29a      	uxth	r2, r3
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006d64:	b29b      	uxth	r3, r3
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d034      	beq.n	8006dd4 <HAL_I2C_Master_Transmit+0x184>
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d130      	bne.n	8006dd4 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8006d72:	697b      	ldr	r3, [r7, #20]
 8006d74:	9300      	str	r3, [sp, #0]
 8006d76:	6a3b      	ldr	r3, [r7, #32]
 8006d78:	2200      	movs	r2, #0
 8006d7a:	2180      	movs	r1, #128	; 0x80
 8006d7c:	68f8      	ldr	r0, [r7, #12]
 8006d7e:	f000 fb55 	bl	800742c <I2C_WaitOnFlagUntilTimeout>
 8006d82:	4603      	mov	r3, r0
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d001      	beq.n	8006d8c <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8006d88:	2301      	movs	r3, #1
 8006d8a:	e04d      	b.n	8006e28 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006d90:	b29b      	uxth	r3, r3
 8006d92:	2bff      	cmp	r3, #255	; 0xff
 8006d94:	d90e      	bls.n	8006db4 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	22ff      	movs	r2, #255	; 0xff
 8006d9a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006da0:	b2da      	uxtb	r2, r3
 8006da2:	8979      	ldrh	r1, [r7, #10]
 8006da4:	2300      	movs	r3, #0
 8006da6:	9300      	str	r3, [sp, #0]
 8006da8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006dac:	68f8      	ldr	r0, [r7, #12]
 8006dae:	f000 fc5f 	bl	8007670 <I2C_TransferConfig>
 8006db2:	e00f      	b.n	8006dd4 <HAL_I2C_Master_Transmit+0x184>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006db8:	b29a      	uxth	r2, r3
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006dc2:	b2da      	uxtb	r2, r3
 8006dc4:	8979      	ldrh	r1, [r7, #10]
 8006dc6:	2300      	movs	r3, #0
 8006dc8:	9300      	str	r3, [sp, #0]
 8006dca:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006dce:	68f8      	ldr	r0, [r7, #12]
 8006dd0:	f000 fc4e 	bl	8007670 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006dd8:	b29b      	uxth	r3, r3
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d19e      	bne.n	8006d1c <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006dde:	697a      	ldr	r2, [r7, #20]
 8006de0:	6a39      	ldr	r1, [r7, #32]
 8006de2:	68f8      	ldr	r0, [r7, #12]
 8006de4:	f000 fba2 	bl	800752c <I2C_WaitOnSTOPFlagUntilTimeout>
 8006de8:	4603      	mov	r3, r0
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d001      	beq.n	8006df2 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8006dee:	2301      	movs	r3, #1
 8006df0:	e01a      	b.n	8006e28 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	2220      	movs	r2, #32
 8006df8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	6859      	ldr	r1, [r3, #4]
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	681a      	ldr	r2, [r3, #0]
 8006e04:	4b0b      	ldr	r3, [pc, #44]	; (8006e34 <HAL_I2C_Master_Transmit+0x1e4>)
 8006e06:	400b      	ands	r3, r1
 8006e08:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	2220      	movs	r2, #32
 8006e0e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	2200      	movs	r2, #0
 8006e16:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	2200      	movs	r2, #0
 8006e1e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006e22:	2300      	movs	r3, #0
 8006e24:	e000      	b.n	8006e28 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8006e26:	2302      	movs	r3, #2
  }
}
 8006e28:	4618      	mov	r0, r3
 8006e2a:	3718      	adds	r7, #24
 8006e2c:	46bd      	mov	sp, r7
 8006e2e:	bd80      	pop	{r7, pc}
 8006e30:	80002000 	.word	0x80002000
 8006e34:	fe00e800 	.word	0xfe00e800

08006e38 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006e38:	b580      	push	{r7, lr}
 8006e3a:	b088      	sub	sp, #32
 8006e3c:	af02      	add	r7, sp, #8
 8006e3e:	60f8      	str	r0, [r7, #12]
 8006e40:	4608      	mov	r0, r1
 8006e42:	4611      	mov	r1, r2
 8006e44:	461a      	mov	r2, r3
 8006e46:	4603      	mov	r3, r0
 8006e48:	817b      	strh	r3, [r7, #10]
 8006e4a:	460b      	mov	r3, r1
 8006e4c:	813b      	strh	r3, [r7, #8]
 8006e4e:	4613      	mov	r3, r2
 8006e50:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006e58:	b2db      	uxtb	r3, r3
 8006e5a:	2b20      	cmp	r3, #32
 8006e5c:	f040 80f9 	bne.w	8007052 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006e60:	6a3b      	ldr	r3, [r7, #32]
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d002      	beq.n	8006e6c <HAL_I2C_Mem_Write+0x34>
 8006e66:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d105      	bne.n	8006e78 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006e72:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8006e74:	2301      	movs	r3, #1
 8006e76:	e0ed      	b.n	8007054 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006e7e:	2b01      	cmp	r3, #1
 8006e80:	d101      	bne.n	8006e86 <HAL_I2C_Mem_Write+0x4e>
 8006e82:	2302      	movs	r3, #2
 8006e84:	e0e6      	b.n	8007054 <HAL_I2C_Mem_Write+0x21c>
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	2201      	movs	r2, #1
 8006e8a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8006e8e:	f7ff f8d5 	bl	800603c <HAL_GetTick>
 8006e92:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8006e94:	697b      	ldr	r3, [r7, #20]
 8006e96:	9300      	str	r3, [sp, #0]
 8006e98:	2319      	movs	r3, #25
 8006e9a:	2201      	movs	r2, #1
 8006e9c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006ea0:	68f8      	ldr	r0, [r7, #12]
 8006ea2:	f000 fac3 	bl	800742c <I2C_WaitOnFlagUntilTimeout>
 8006ea6:	4603      	mov	r3, r0
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d001      	beq.n	8006eb0 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8006eac:	2301      	movs	r3, #1
 8006eae:	e0d1      	b.n	8007054 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	2221      	movs	r2, #33	; 0x21
 8006eb4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	2240      	movs	r2, #64	; 0x40
 8006ebc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	2200      	movs	r2, #0
 8006ec4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	6a3a      	ldr	r2, [r7, #32]
 8006eca:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8006ed0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	2200      	movs	r2, #0
 8006ed6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006ed8:	88f8      	ldrh	r0, [r7, #6]
 8006eda:	893a      	ldrh	r2, [r7, #8]
 8006edc:	8979      	ldrh	r1, [r7, #10]
 8006ede:	697b      	ldr	r3, [r7, #20]
 8006ee0:	9301      	str	r3, [sp, #4]
 8006ee2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ee4:	9300      	str	r3, [sp, #0]
 8006ee6:	4603      	mov	r3, r0
 8006ee8:	68f8      	ldr	r0, [r7, #12]
 8006eea:	f000 f9d3 	bl	8007294 <I2C_RequestMemoryWrite>
 8006eee:	4603      	mov	r3, r0
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d005      	beq.n	8006f00 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	2200      	movs	r2, #0
 8006ef8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8006efc:	2301      	movs	r3, #1
 8006efe:	e0a9      	b.n	8007054 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006f04:	b29b      	uxth	r3, r3
 8006f06:	2bff      	cmp	r3, #255	; 0xff
 8006f08:	d90e      	bls.n	8006f28 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	22ff      	movs	r2, #255	; 0xff
 8006f0e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006f14:	b2da      	uxtb	r2, r3
 8006f16:	8979      	ldrh	r1, [r7, #10]
 8006f18:	2300      	movs	r3, #0
 8006f1a:	9300      	str	r3, [sp, #0]
 8006f1c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006f20:	68f8      	ldr	r0, [r7, #12]
 8006f22:	f000 fba5 	bl	8007670 <I2C_TransferConfig>
 8006f26:	e00f      	b.n	8006f48 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006f2c:	b29a      	uxth	r2, r3
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006f36:	b2da      	uxtb	r2, r3
 8006f38:	8979      	ldrh	r1, [r7, #10]
 8006f3a:	2300      	movs	r3, #0
 8006f3c:	9300      	str	r3, [sp, #0]
 8006f3e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006f42:	68f8      	ldr	r0, [r7, #12]
 8006f44:	f000 fb94 	bl	8007670 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006f48:	697a      	ldr	r2, [r7, #20]
 8006f4a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006f4c:	68f8      	ldr	r0, [r7, #12]
 8006f4e:	f000 faad 	bl	80074ac <I2C_WaitOnTXISFlagUntilTimeout>
 8006f52:	4603      	mov	r3, r0
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d001      	beq.n	8006f5c <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8006f58:	2301      	movs	r3, #1
 8006f5a:	e07b      	b.n	8007054 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f60:	781a      	ldrb	r2, [r3, #0]
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f6c:	1c5a      	adds	r2, r3, #1
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006f76:	b29b      	uxth	r3, r3
 8006f78:	3b01      	subs	r3, #1
 8006f7a:	b29a      	uxth	r2, r3
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006f84:	3b01      	subs	r3, #1
 8006f86:	b29a      	uxth	r2, r3
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006f90:	b29b      	uxth	r3, r3
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d034      	beq.n	8007000 <HAL_I2C_Mem_Write+0x1c8>
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d130      	bne.n	8007000 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8006f9e:	697b      	ldr	r3, [r7, #20]
 8006fa0:	9300      	str	r3, [sp, #0]
 8006fa2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fa4:	2200      	movs	r2, #0
 8006fa6:	2180      	movs	r1, #128	; 0x80
 8006fa8:	68f8      	ldr	r0, [r7, #12]
 8006faa:	f000 fa3f 	bl	800742c <I2C_WaitOnFlagUntilTimeout>
 8006fae:	4603      	mov	r3, r0
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d001      	beq.n	8006fb8 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8006fb4:	2301      	movs	r3, #1
 8006fb6:	e04d      	b.n	8007054 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006fbc:	b29b      	uxth	r3, r3
 8006fbe:	2bff      	cmp	r3, #255	; 0xff
 8006fc0:	d90e      	bls.n	8006fe0 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	22ff      	movs	r2, #255	; 0xff
 8006fc6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006fcc:	b2da      	uxtb	r2, r3
 8006fce:	8979      	ldrh	r1, [r7, #10]
 8006fd0:	2300      	movs	r3, #0
 8006fd2:	9300      	str	r3, [sp, #0]
 8006fd4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006fd8:	68f8      	ldr	r0, [r7, #12]
 8006fda:	f000 fb49 	bl	8007670 <I2C_TransferConfig>
 8006fde:	e00f      	b.n	8007000 <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006fe4:	b29a      	uxth	r2, r3
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006fee:	b2da      	uxtb	r2, r3
 8006ff0:	8979      	ldrh	r1, [r7, #10]
 8006ff2:	2300      	movs	r3, #0
 8006ff4:	9300      	str	r3, [sp, #0]
 8006ff6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006ffa:	68f8      	ldr	r0, [r7, #12]
 8006ffc:	f000 fb38 	bl	8007670 <I2C_TransferConfig>
        }
      }

    }
    while (hi2c->XferCount > 0U);
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007004:	b29b      	uxth	r3, r3
 8007006:	2b00      	cmp	r3, #0
 8007008:	d19e      	bne.n	8006f48 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800700a:	697a      	ldr	r2, [r7, #20]
 800700c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800700e:	68f8      	ldr	r0, [r7, #12]
 8007010:	f000 fa8c 	bl	800752c <I2C_WaitOnSTOPFlagUntilTimeout>
 8007014:	4603      	mov	r3, r0
 8007016:	2b00      	cmp	r3, #0
 8007018:	d001      	beq.n	800701e <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800701a:	2301      	movs	r3, #1
 800701c:	e01a      	b.n	8007054 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	2220      	movs	r2, #32
 8007024:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	6859      	ldr	r1, [r3, #4]
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	681a      	ldr	r2, [r3, #0]
 8007030:	4b0a      	ldr	r3, [pc, #40]	; (800705c <HAL_I2C_Mem_Write+0x224>)
 8007032:	400b      	ands	r3, r1
 8007034:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	2220      	movs	r2, #32
 800703a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	2200      	movs	r2, #0
 8007042:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	2200      	movs	r2, #0
 800704a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800704e:	2300      	movs	r3, #0
 8007050:	e000      	b.n	8007054 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8007052:	2302      	movs	r3, #2
  }
}
 8007054:	4618      	mov	r0, r3
 8007056:	3718      	adds	r7, #24
 8007058:	46bd      	mov	sp, r7
 800705a:	bd80      	pop	{r7, pc}
 800705c:	fe00e800 	.word	0xfe00e800

08007060 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007060:	b580      	push	{r7, lr}
 8007062:	b088      	sub	sp, #32
 8007064:	af02      	add	r7, sp, #8
 8007066:	60f8      	str	r0, [r7, #12]
 8007068:	4608      	mov	r0, r1
 800706a:	4611      	mov	r1, r2
 800706c:	461a      	mov	r2, r3
 800706e:	4603      	mov	r3, r0
 8007070:	817b      	strh	r3, [r7, #10]
 8007072:	460b      	mov	r3, r1
 8007074:	813b      	strh	r3, [r7, #8]
 8007076:	4613      	mov	r3, r2
 8007078:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007080:	b2db      	uxtb	r3, r3
 8007082:	2b20      	cmp	r3, #32
 8007084:	f040 80fd 	bne.w	8007282 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8007088:	6a3b      	ldr	r3, [r7, #32]
 800708a:	2b00      	cmp	r3, #0
 800708c:	d002      	beq.n	8007094 <HAL_I2C_Mem_Read+0x34>
 800708e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007090:	2b00      	cmp	r3, #0
 8007092:	d105      	bne.n	80070a0 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	f44f 7200 	mov.w	r2, #512	; 0x200
 800709a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800709c:	2301      	movs	r3, #1
 800709e:	e0f1      	b.n	8007284 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80070a6:	2b01      	cmp	r3, #1
 80070a8:	d101      	bne.n	80070ae <HAL_I2C_Mem_Read+0x4e>
 80070aa:	2302      	movs	r3, #2
 80070ac:	e0ea      	b.n	8007284 <HAL_I2C_Mem_Read+0x224>
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	2201      	movs	r2, #1
 80070b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80070b6:	f7fe ffc1 	bl	800603c <HAL_GetTick>
 80070ba:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80070bc:	697b      	ldr	r3, [r7, #20]
 80070be:	9300      	str	r3, [sp, #0]
 80070c0:	2319      	movs	r3, #25
 80070c2:	2201      	movs	r2, #1
 80070c4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80070c8:	68f8      	ldr	r0, [r7, #12]
 80070ca:	f000 f9af 	bl	800742c <I2C_WaitOnFlagUntilTimeout>
 80070ce:	4603      	mov	r3, r0
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d001      	beq.n	80070d8 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80070d4:	2301      	movs	r3, #1
 80070d6:	e0d5      	b.n	8007284 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	2222      	movs	r2, #34	; 0x22
 80070dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	2240      	movs	r2, #64	; 0x40
 80070e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	2200      	movs	r2, #0
 80070ec:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	6a3a      	ldr	r2, [r7, #32]
 80070f2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80070f8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	2200      	movs	r2, #0
 80070fe:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8007100:	88f8      	ldrh	r0, [r7, #6]
 8007102:	893a      	ldrh	r2, [r7, #8]
 8007104:	8979      	ldrh	r1, [r7, #10]
 8007106:	697b      	ldr	r3, [r7, #20]
 8007108:	9301      	str	r3, [sp, #4]
 800710a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800710c:	9300      	str	r3, [sp, #0]
 800710e:	4603      	mov	r3, r0
 8007110:	68f8      	ldr	r0, [r7, #12]
 8007112:	f000 f913 	bl	800733c <I2C_RequestMemoryRead>
 8007116:	4603      	mov	r3, r0
 8007118:	2b00      	cmp	r3, #0
 800711a:	d005      	beq.n	8007128 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	2200      	movs	r2, #0
 8007120:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8007124:	2301      	movs	r3, #1
 8007126:	e0ad      	b.n	8007284 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800712c:	b29b      	uxth	r3, r3
 800712e:	2bff      	cmp	r3, #255	; 0xff
 8007130:	d90e      	bls.n	8007150 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	22ff      	movs	r2, #255	; 0xff
 8007136:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800713c:	b2da      	uxtb	r2, r3
 800713e:	8979      	ldrh	r1, [r7, #10]
 8007140:	4b52      	ldr	r3, [pc, #328]	; (800728c <HAL_I2C_Mem_Read+0x22c>)
 8007142:	9300      	str	r3, [sp, #0]
 8007144:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007148:	68f8      	ldr	r0, [r7, #12]
 800714a:	f000 fa91 	bl	8007670 <I2C_TransferConfig>
 800714e:	e00f      	b.n	8007170 <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007154:	b29a      	uxth	r2, r3
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800715e:	b2da      	uxtb	r2, r3
 8007160:	8979      	ldrh	r1, [r7, #10]
 8007162:	4b4a      	ldr	r3, [pc, #296]	; (800728c <HAL_I2C_Mem_Read+0x22c>)
 8007164:	9300      	str	r3, [sp, #0]
 8007166:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800716a:	68f8      	ldr	r0, [r7, #12]
 800716c:	f000 fa80 	bl	8007670 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8007170:	697b      	ldr	r3, [r7, #20]
 8007172:	9300      	str	r3, [sp, #0]
 8007174:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007176:	2200      	movs	r2, #0
 8007178:	2104      	movs	r1, #4
 800717a:	68f8      	ldr	r0, [r7, #12]
 800717c:	f000 f956 	bl	800742c <I2C_WaitOnFlagUntilTimeout>
 8007180:	4603      	mov	r3, r0
 8007182:	2b00      	cmp	r3, #0
 8007184:	d001      	beq.n	800718a <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8007186:	2301      	movs	r3, #1
 8007188:	e07c      	b.n	8007284 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007194:	b2d2      	uxtb	r2, r2
 8007196:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800719c:	1c5a      	adds	r2, r3, #1
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80071a6:	3b01      	subs	r3, #1
 80071a8:	b29a      	uxth	r2, r3
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80071b2:	b29b      	uxth	r3, r3
 80071b4:	3b01      	subs	r3, #1
 80071b6:	b29a      	uxth	r2, r3
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80071c0:	b29b      	uxth	r3, r3
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d034      	beq.n	8007230 <HAL_I2C_Mem_Read+0x1d0>
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d130      	bne.n	8007230 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80071ce:	697b      	ldr	r3, [r7, #20]
 80071d0:	9300      	str	r3, [sp, #0]
 80071d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071d4:	2200      	movs	r2, #0
 80071d6:	2180      	movs	r1, #128	; 0x80
 80071d8:	68f8      	ldr	r0, [r7, #12]
 80071da:	f000 f927 	bl	800742c <I2C_WaitOnFlagUntilTimeout>
 80071de:	4603      	mov	r3, r0
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d001      	beq.n	80071e8 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80071e4:	2301      	movs	r3, #1
 80071e6:	e04d      	b.n	8007284 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80071ec:	b29b      	uxth	r3, r3
 80071ee:	2bff      	cmp	r3, #255	; 0xff
 80071f0:	d90e      	bls.n	8007210 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	22ff      	movs	r2, #255	; 0xff
 80071f6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80071fc:	b2da      	uxtb	r2, r3
 80071fe:	8979      	ldrh	r1, [r7, #10]
 8007200:	2300      	movs	r3, #0
 8007202:	9300      	str	r3, [sp, #0]
 8007204:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007208:	68f8      	ldr	r0, [r7, #12]
 800720a:	f000 fa31 	bl	8007670 <I2C_TransferConfig>
 800720e:	e00f      	b.n	8007230 <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007214:	b29a      	uxth	r2, r3
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800721e:	b2da      	uxtb	r2, r3
 8007220:	8979      	ldrh	r1, [r7, #10]
 8007222:	2300      	movs	r3, #0
 8007224:	9300      	str	r3, [sp, #0]
 8007226:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800722a:	68f8      	ldr	r0, [r7, #12]
 800722c:	f000 fa20 	bl	8007670 <I2C_TransferConfig>
        }
      }
    }
    while (hi2c->XferCount > 0U);
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007234:	b29b      	uxth	r3, r3
 8007236:	2b00      	cmp	r3, #0
 8007238:	d19a      	bne.n	8007170 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800723a:	697a      	ldr	r2, [r7, #20]
 800723c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800723e:	68f8      	ldr	r0, [r7, #12]
 8007240:	f000 f974 	bl	800752c <I2C_WaitOnSTOPFlagUntilTimeout>
 8007244:	4603      	mov	r3, r0
 8007246:	2b00      	cmp	r3, #0
 8007248:	d001      	beq.n	800724e <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800724a:	2301      	movs	r3, #1
 800724c:	e01a      	b.n	8007284 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	2220      	movs	r2, #32
 8007254:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	6859      	ldr	r1, [r3, #4]
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	681a      	ldr	r2, [r3, #0]
 8007260:	4b0b      	ldr	r3, [pc, #44]	; (8007290 <HAL_I2C_Mem_Read+0x230>)
 8007262:	400b      	ands	r3, r1
 8007264:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	2220      	movs	r2, #32
 800726a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	2200      	movs	r2, #0
 8007272:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	2200      	movs	r2, #0
 800727a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800727e:	2300      	movs	r3, #0
 8007280:	e000      	b.n	8007284 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8007282:	2302      	movs	r3, #2
  }
}
 8007284:	4618      	mov	r0, r3
 8007286:	3718      	adds	r7, #24
 8007288:	46bd      	mov	sp, r7
 800728a:	bd80      	pop	{r7, pc}
 800728c:	80002400 	.word	0x80002400
 8007290:	fe00e800 	.word	0xfe00e800

08007294 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8007294:	b580      	push	{r7, lr}
 8007296:	b086      	sub	sp, #24
 8007298:	af02      	add	r7, sp, #8
 800729a:	60f8      	str	r0, [r7, #12]
 800729c:	4608      	mov	r0, r1
 800729e:	4611      	mov	r1, r2
 80072a0:	461a      	mov	r2, r3
 80072a2:	4603      	mov	r3, r0
 80072a4:	817b      	strh	r3, [r7, #10]
 80072a6:	460b      	mov	r3, r1
 80072a8:	813b      	strh	r3, [r7, #8]
 80072aa:	4613      	mov	r3, r2
 80072ac:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80072ae:	88fb      	ldrh	r3, [r7, #6]
 80072b0:	b2da      	uxtb	r2, r3
 80072b2:	8979      	ldrh	r1, [r7, #10]
 80072b4:	4b20      	ldr	r3, [pc, #128]	; (8007338 <I2C_RequestMemoryWrite+0xa4>)
 80072b6:	9300      	str	r3, [sp, #0]
 80072b8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80072bc:	68f8      	ldr	r0, [r7, #12]
 80072be:	f000 f9d7 	bl	8007670 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80072c2:	69fa      	ldr	r2, [r7, #28]
 80072c4:	69b9      	ldr	r1, [r7, #24]
 80072c6:	68f8      	ldr	r0, [r7, #12]
 80072c8:	f000 f8f0 	bl	80074ac <I2C_WaitOnTXISFlagUntilTimeout>
 80072cc:	4603      	mov	r3, r0
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d001      	beq.n	80072d6 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80072d2:	2301      	movs	r3, #1
 80072d4:	e02c      	b.n	8007330 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80072d6:	88fb      	ldrh	r3, [r7, #6]
 80072d8:	2b01      	cmp	r3, #1
 80072da:	d105      	bne.n	80072e8 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80072dc:	893b      	ldrh	r3, [r7, #8]
 80072de:	b2da      	uxtb	r2, r3
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	629a      	str	r2, [r3, #40]	; 0x28
 80072e6:	e015      	b.n	8007314 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80072e8:	893b      	ldrh	r3, [r7, #8]
 80072ea:	0a1b      	lsrs	r3, r3, #8
 80072ec:	b29b      	uxth	r3, r3
 80072ee:	b2da      	uxtb	r2, r3
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80072f6:	69fa      	ldr	r2, [r7, #28]
 80072f8:	69b9      	ldr	r1, [r7, #24]
 80072fa:	68f8      	ldr	r0, [r7, #12]
 80072fc:	f000 f8d6 	bl	80074ac <I2C_WaitOnTXISFlagUntilTimeout>
 8007300:	4603      	mov	r3, r0
 8007302:	2b00      	cmp	r3, #0
 8007304:	d001      	beq.n	800730a <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8007306:	2301      	movs	r3, #1
 8007308:	e012      	b.n	8007330 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800730a:	893b      	ldrh	r3, [r7, #8]
 800730c:	b2da      	uxtb	r2, r3
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8007314:	69fb      	ldr	r3, [r7, #28]
 8007316:	9300      	str	r3, [sp, #0]
 8007318:	69bb      	ldr	r3, [r7, #24]
 800731a:	2200      	movs	r2, #0
 800731c:	2180      	movs	r1, #128	; 0x80
 800731e:	68f8      	ldr	r0, [r7, #12]
 8007320:	f000 f884 	bl	800742c <I2C_WaitOnFlagUntilTimeout>
 8007324:	4603      	mov	r3, r0
 8007326:	2b00      	cmp	r3, #0
 8007328:	d001      	beq.n	800732e <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800732a:	2301      	movs	r3, #1
 800732c:	e000      	b.n	8007330 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800732e:	2300      	movs	r3, #0
}
 8007330:	4618      	mov	r0, r3
 8007332:	3710      	adds	r7, #16
 8007334:	46bd      	mov	sp, r7
 8007336:	bd80      	pop	{r7, pc}
 8007338:	80002000 	.word	0x80002000

0800733c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800733c:	b580      	push	{r7, lr}
 800733e:	b086      	sub	sp, #24
 8007340:	af02      	add	r7, sp, #8
 8007342:	60f8      	str	r0, [r7, #12]
 8007344:	4608      	mov	r0, r1
 8007346:	4611      	mov	r1, r2
 8007348:	461a      	mov	r2, r3
 800734a:	4603      	mov	r3, r0
 800734c:	817b      	strh	r3, [r7, #10]
 800734e:	460b      	mov	r3, r1
 8007350:	813b      	strh	r3, [r7, #8]
 8007352:	4613      	mov	r3, r2
 8007354:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8007356:	88fb      	ldrh	r3, [r7, #6]
 8007358:	b2da      	uxtb	r2, r3
 800735a:	8979      	ldrh	r1, [r7, #10]
 800735c:	4b20      	ldr	r3, [pc, #128]	; (80073e0 <I2C_RequestMemoryRead+0xa4>)
 800735e:	9300      	str	r3, [sp, #0]
 8007360:	2300      	movs	r3, #0
 8007362:	68f8      	ldr	r0, [r7, #12]
 8007364:	f000 f984 	bl	8007670 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007368:	69fa      	ldr	r2, [r7, #28]
 800736a:	69b9      	ldr	r1, [r7, #24]
 800736c:	68f8      	ldr	r0, [r7, #12]
 800736e:	f000 f89d 	bl	80074ac <I2C_WaitOnTXISFlagUntilTimeout>
 8007372:	4603      	mov	r3, r0
 8007374:	2b00      	cmp	r3, #0
 8007376:	d001      	beq.n	800737c <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8007378:	2301      	movs	r3, #1
 800737a:	e02c      	b.n	80073d6 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800737c:	88fb      	ldrh	r3, [r7, #6]
 800737e:	2b01      	cmp	r3, #1
 8007380:	d105      	bne.n	800738e <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007382:	893b      	ldrh	r3, [r7, #8]
 8007384:	b2da      	uxtb	r2, r3
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	629a      	str	r2, [r3, #40]	; 0x28
 800738c:	e015      	b.n	80073ba <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800738e:	893b      	ldrh	r3, [r7, #8]
 8007390:	0a1b      	lsrs	r3, r3, #8
 8007392:	b29b      	uxth	r3, r3
 8007394:	b2da      	uxtb	r2, r3
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800739c:	69fa      	ldr	r2, [r7, #28]
 800739e:	69b9      	ldr	r1, [r7, #24]
 80073a0:	68f8      	ldr	r0, [r7, #12]
 80073a2:	f000 f883 	bl	80074ac <I2C_WaitOnTXISFlagUntilTimeout>
 80073a6:	4603      	mov	r3, r0
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d001      	beq.n	80073b0 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80073ac:	2301      	movs	r3, #1
 80073ae:	e012      	b.n	80073d6 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80073b0:	893b      	ldrh	r3, [r7, #8]
 80073b2:	b2da      	uxtb	r2, r3
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80073ba:	69fb      	ldr	r3, [r7, #28]
 80073bc:	9300      	str	r3, [sp, #0]
 80073be:	69bb      	ldr	r3, [r7, #24]
 80073c0:	2200      	movs	r2, #0
 80073c2:	2140      	movs	r1, #64	; 0x40
 80073c4:	68f8      	ldr	r0, [r7, #12]
 80073c6:	f000 f831 	bl	800742c <I2C_WaitOnFlagUntilTimeout>
 80073ca:	4603      	mov	r3, r0
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	d001      	beq.n	80073d4 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80073d0:	2301      	movs	r3, #1
 80073d2:	e000      	b.n	80073d6 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80073d4:	2300      	movs	r3, #0
}
 80073d6:	4618      	mov	r0, r3
 80073d8:	3710      	adds	r7, #16
 80073da:	46bd      	mov	sp, r7
 80073dc:	bd80      	pop	{r7, pc}
 80073de:	bf00      	nop
 80073e0:	80002000 	.word	0x80002000

080073e4 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80073e4:	b480      	push	{r7}
 80073e6:	b083      	sub	sp, #12
 80073e8:	af00      	add	r7, sp, #0
 80073ea:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	699b      	ldr	r3, [r3, #24]
 80073f2:	f003 0302 	and.w	r3, r3, #2
 80073f6:	2b02      	cmp	r3, #2
 80073f8:	d103      	bne.n	8007402 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	2200      	movs	r2, #0
 8007400:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	699b      	ldr	r3, [r3, #24]
 8007408:	f003 0301 	and.w	r3, r3, #1
 800740c:	2b01      	cmp	r3, #1
 800740e:	d007      	beq.n	8007420 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	699a      	ldr	r2, [r3, #24]
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	f042 0201 	orr.w	r2, r2, #1
 800741e:	619a      	str	r2, [r3, #24]
  }
}
 8007420:	bf00      	nop
 8007422:	370c      	adds	r7, #12
 8007424:	46bd      	mov	sp, r7
 8007426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800742a:	4770      	bx	lr

0800742c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800742c:	b580      	push	{r7, lr}
 800742e:	b084      	sub	sp, #16
 8007430:	af00      	add	r7, sp, #0
 8007432:	60f8      	str	r0, [r7, #12]
 8007434:	60b9      	str	r1, [r7, #8]
 8007436:	603b      	str	r3, [r7, #0]
 8007438:	4613      	mov	r3, r2
 800743a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800743c:	e022      	b.n	8007484 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800743e:	683b      	ldr	r3, [r7, #0]
 8007440:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007444:	d01e      	beq.n	8007484 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007446:	f7fe fdf9 	bl	800603c <HAL_GetTick>
 800744a:	4602      	mov	r2, r0
 800744c:	69bb      	ldr	r3, [r7, #24]
 800744e:	1ad3      	subs	r3, r2, r3
 8007450:	683a      	ldr	r2, [r7, #0]
 8007452:	429a      	cmp	r2, r3
 8007454:	d302      	bcc.n	800745c <I2C_WaitOnFlagUntilTimeout+0x30>
 8007456:	683b      	ldr	r3, [r7, #0]
 8007458:	2b00      	cmp	r3, #0
 800745a:	d113      	bne.n	8007484 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007460:	f043 0220 	orr.w	r2, r3, #32
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	2220      	movs	r2, #32
 800746c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	2200      	movs	r2, #0
 8007474:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	2200      	movs	r2, #0
 800747c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8007480:	2301      	movs	r3, #1
 8007482:	e00f      	b.n	80074a4 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	699a      	ldr	r2, [r3, #24]
 800748a:	68bb      	ldr	r3, [r7, #8]
 800748c:	4013      	ands	r3, r2
 800748e:	68ba      	ldr	r2, [r7, #8]
 8007490:	429a      	cmp	r2, r3
 8007492:	bf0c      	ite	eq
 8007494:	2301      	moveq	r3, #1
 8007496:	2300      	movne	r3, #0
 8007498:	b2db      	uxtb	r3, r3
 800749a:	461a      	mov	r2, r3
 800749c:	79fb      	ldrb	r3, [r7, #7]
 800749e:	429a      	cmp	r2, r3
 80074a0:	d0cd      	beq.n	800743e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80074a2:	2300      	movs	r3, #0
}
 80074a4:	4618      	mov	r0, r3
 80074a6:	3710      	adds	r7, #16
 80074a8:	46bd      	mov	sp, r7
 80074aa:	bd80      	pop	{r7, pc}

080074ac <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80074ac:	b580      	push	{r7, lr}
 80074ae:	b084      	sub	sp, #16
 80074b0:	af00      	add	r7, sp, #0
 80074b2:	60f8      	str	r0, [r7, #12]
 80074b4:	60b9      	str	r1, [r7, #8]
 80074b6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80074b8:	e02c      	b.n	8007514 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80074ba:	687a      	ldr	r2, [r7, #4]
 80074bc:	68b9      	ldr	r1, [r7, #8]
 80074be:	68f8      	ldr	r0, [r7, #12]
 80074c0:	f000 f870 	bl	80075a4 <I2C_IsAcknowledgeFailed>
 80074c4:	4603      	mov	r3, r0
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d001      	beq.n	80074ce <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80074ca:	2301      	movs	r3, #1
 80074cc:	e02a      	b.n	8007524 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80074ce:	68bb      	ldr	r3, [r7, #8]
 80074d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80074d4:	d01e      	beq.n	8007514 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80074d6:	f7fe fdb1 	bl	800603c <HAL_GetTick>
 80074da:	4602      	mov	r2, r0
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	1ad3      	subs	r3, r2, r3
 80074e0:	68ba      	ldr	r2, [r7, #8]
 80074e2:	429a      	cmp	r2, r3
 80074e4:	d302      	bcc.n	80074ec <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80074e6:	68bb      	ldr	r3, [r7, #8]
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	d113      	bne.n	8007514 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80074f0:	f043 0220 	orr.w	r2, r3, #32
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	2220      	movs	r2, #32
 80074fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	2200      	movs	r2, #0
 8007504:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	2200      	movs	r2, #0
 800750c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8007510:	2301      	movs	r3, #1
 8007512:	e007      	b.n	8007524 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	699b      	ldr	r3, [r3, #24]
 800751a:	f003 0302 	and.w	r3, r3, #2
 800751e:	2b02      	cmp	r3, #2
 8007520:	d1cb      	bne.n	80074ba <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007522:	2300      	movs	r3, #0
}
 8007524:	4618      	mov	r0, r3
 8007526:	3710      	adds	r7, #16
 8007528:	46bd      	mov	sp, r7
 800752a:	bd80      	pop	{r7, pc}

0800752c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800752c:	b580      	push	{r7, lr}
 800752e:	b084      	sub	sp, #16
 8007530:	af00      	add	r7, sp, #0
 8007532:	60f8      	str	r0, [r7, #12]
 8007534:	60b9      	str	r1, [r7, #8]
 8007536:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007538:	e028      	b.n	800758c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800753a:	687a      	ldr	r2, [r7, #4]
 800753c:	68b9      	ldr	r1, [r7, #8]
 800753e:	68f8      	ldr	r0, [r7, #12]
 8007540:	f000 f830 	bl	80075a4 <I2C_IsAcknowledgeFailed>
 8007544:	4603      	mov	r3, r0
 8007546:	2b00      	cmp	r3, #0
 8007548:	d001      	beq.n	800754e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800754a:	2301      	movs	r3, #1
 800754c:	e026      	b.n	800759c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800754e:	f7fe fd75 	bl	800603c <HAL_GetTick>
 8007552:	4602      	mov	r2, r0
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	1ad3      	subs	r3, r2, r3
 8007558:	68ba      	ldr	r2, [r7, #8]
 800755a:	429a      	cmp	r2, r3
 800755c:	d302      	bcc.n	8007564 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800755e:	68bb      	ldr	r3, [r7, #8]
 8007560:	2b00      	cmp	r3, #0
 8007562:	d113      	bne.n	800758c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007568:	f043 0220 	orr.w	r2, r3, #32
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	2220      	movs	r2, #32
 8007574:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	2200      	movs	r2, #0
 800757c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	2200      	movs	r2, #0
 8007584:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8007588:	2301      	movs	r3, #1
 800758a:	e007      	b.n	800759c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	699b      	ldr	r3, [r3, #24]
 8007592:	f003 0320 	and.w	r3, r3, #32
 8007596:	2b20      	cmp	r3, #32
 8007598:	d1cf      	bne.n	800753a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800759a:	2300      	movs	r3, #0
}
 800759c:	4618      	mov	r0, r3
 800759e:	3710      	adds	r7, #16
 80075a0:	46bd      	mov	sp, r7
 80075a2:	bd80      	pop	{r7, pc}

080075a4 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80075a4:	b580      	push	{r7, lr}
 80075a6:	b084      	sub	sp, #16
 80075a8:	af00      	add	r7, sp, #0
 80075aa:	60f8      	str	r0, [r7, #12]
 80075ac:	60b9      	str	r1, [r7, #8]
 80075ae:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	699b      	ldr	r3, [r3, #24]
 80075b6:	f003 0310 	and.w	r3, r3, #16
 80075ba:	2b10      	cmp	r3, #16
 80075bc:	d151      	bne.n	8007662 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80075be:	e022      	b.n	8007606 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80075c0:	68bb      	ldr	r3, [r7, #8]
 80075c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80075c6:	d01e      	beq.n	8007606 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80075c8:	f7fe fd38 	bl	800603c <HAL_GetTick>
 80075cc:	4602      	mov	r2, r0
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	1ad3      	subs	r3, r2, r3
 80075d2:	68ba      	ldr	r2, [r7, #8]
 80075d4:	429a      	cmp	r2, r3
 80075d6:	d302      	bcc.n	80075de <I2C_IsAcknowledgeFailed+0x3a>
 80075d8:	68bb      	ldr	r3, [r7, #8]
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d113      	bne.n	8007606 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80075e2:	f043 0220 	orr.w	r2, r3, #32
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	2220      	movs	r2, #32
 80075ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	2200      	movs	r2, #0
 80075f6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	2200      	movs	r2, #0
 80075fe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8007602:	2301      	movs	r3, #1
 8007604:	e02e      	b.n	8007664 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	699b      	ldr	r3, [r3, #24]
 800760c:	f003 0320 	and.w	r3, r3, #32
 8007610:	2b20      	cmp	r3, #32
 8007612:	d1d5      	bne.n	80075c0 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	2210      	movs	r2, #16
 800761a:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	2220      	movs	r2, #32
 8007622:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8007624:	68f8      	ldr	r0, [r7, #12]
 8007626:	f7ff fedd 	bl	80073e4 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	6859      	ldr	r1, [r3, #4]
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	681a      	ldr	r2, [r3, #0]
 8007634:	4b0d      	ldr	r3, [pc, #52]	; (800766c <I2C_IsAcknowledgeFailed+0xc8>)
 8007636:	400b      	ands	r3, r1
 8007638:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800763e:	f043 0204 	orr.w	r2, r3, #4
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	2220      	movs	r2, #32
 800764a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	2200      	movs	r2, #0
 8007652:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	2200      	movs	r2, #0
 800765a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 800765e:	2301      	movs	r3, #1
 8007660:	e000      	b.n	8007664 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8007662:	2300      	movs	r3, #0
}
 8007664:	4618      	mov	r0, r3
 8007666:	3710      	adds	r7, #16
 8007668:	46bd      	mov	sp, r7
 800766a:	bd80      	pop	{r7, pc}
 800766c:	fe00e800 	.word	0xfe00e800

08007670 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 8007670:	b480      	push	{r7}
 8007672:	b085      	sub	sp, #20
 8007674:	af00      	add	r7, sp, #0
 8007676:	60f8      	str	r0, [r7, #12]
 8007678:	607b      	str	r3, [r7, #4]
 800767a:	460b      	mov	r3, r1
 800767c:	817b      	strh	r3, [r7, #10]
 800767e:	4613      	mov	r3, r2
 8007680:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	685a      	ldr	r2, [r3, #4]
 8007688:	69bb      	ldr	r3, [r7, #24]
 800768a:	0d5b      	lsrs	r3, r3, #21
 800768c:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8007690:	4b0d      	ldr	r3, [pc, #52]	; (80076c8 <I2C_TransferConfig+0x58>)
 8007692:	430b      	orrs	r3, r1
 8007694:	43db      	mvns	r3, r3
 8007696:	ea02 0103 	and.w	r1, r2, r3
 800769a:	897b      	ldrh	r3, [r7, #10]
 800769c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80076a0:	7a7b      	ldrb	r3, [r7, #9]
 80076a2:	041b      	lsls	r3, r3, #16
 80076a4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80076a8:	431a      	orrs	r2, r3
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	431a      	orrs	r2, r3
 80076ae:	69bb      	ldr	r3, [r7, #24]
 80076b0:	431a      	orrs	r2, r3
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	430a      	orrs	r2, r1
 80076b8:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 80076ba:	bf00      	nop
 80076bc:	3714      	adds	r7, #20
 80076be:	46bd      	mov	sp, r7
 80076c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076c4:	4770      	bx	lr
 80076c6:	bf00      	nop
 80076c8:	03ff63ff 	.word	0x03ff63ff

080076cc <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80076cc:	b480      	push	{r7}
 80076ce:	b083      	sub	sp, #12
 80076d0:	af00      	add	r7, sp, #0
 80076d2:	6078      	str	r0, [r7, #4]
 80076d4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80076dc:	b2db      	uxtb	r3, r3
 80076de:	2b20      	cmp	r3, #32
 80076e0:	d138      	bne.n	8007754 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80076e8:	2b01      	cmp	r3, #1
 80076ea:	d101      	bne.n	80076f0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80076ec:	2302      	movs	r3, #2
 80076ee:	e032      	b.n	8007756 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	2201      	movs	r2, #1
 80076f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	2224      	movs	r2, #36	; 0x24
 80076fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	681a      	ldr	r2, [r3, #0]
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	f022 0201 	bic.w	r2, r2, #1
 800770e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	681a      	ldr	r2, [r3, #0]
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800771e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	6819      	ldr	r1, [r3, #0]
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	683a      	ldr	r2, [r7, #0]
 800772c:	430a      	orrs	r2, r1
 800772e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	681a      	ldr	r2, [r3, #0]
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	f042 0201 	orr.w	r2, r2, #1
 800773e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	2220      	movs	r2, #32
 8007744:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	2200      	movs	r2, #0
 800774c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007750:	2300      	movs	r3, #0
 8007752:	e000      	b.n	8007756 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8007754:	2302      	movs	r3, #2
  }
}
 8007756:	4618      	mov	r0, r3
 8007758:	370c      	adds	r7, #12
 800775a:	46bd      	mov	sp, r7
 800775c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007760:	4770      	bx	lr

08007762 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8007762:	b480      	push	{r7}
 8007764:	b085      	sub	sp, #20
 8007766:	af00      	add	r7, sp, #0
 8007768:	6078      	str	r0, [r7, #4]
 800776a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007772:	b2db      	uxtb	r3, r3
 8007774:	2b20      	cmp	r3, #32
 8007776:	d139      	bne.n	80077ec <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800777e:	2b01      	cmp	r3, #1
 8007780:	d101      	bne.n	8007786 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8007782:	2302      	movs	r3, #2
 8007784:	e033      	b.n	80077ee <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	2201      	movs	r2, #1
 800778a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	2224      	movs	r2, #36	; 0x24
 8007792:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	681a      	ldr	r2, [r3, #0]
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	f022 0201 	bic.w	r2, r2, #1
 80077a4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80077b4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80077b6:	683b      	ldr	r3, [r7, #0]
 80077b8:	021b      	lsls	r3, r3, #8
 80077ba:	68fa      	ldr	r2, [r7, #12]
 80077bc:	4313      	orrs	r3, r2
 80077be:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	68fa      	ldr	r2, [r7, #12]
 80077c6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	681a      	ldr	r2, [r3, #0]
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	f042 0201 	orr.w	r2, r2, #1
 80077d6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	2220      	movs	r2, #32
 80077dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	2200      	movs	r2, #0
 80077e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80077e8:	2300      	movs	r3, #0
 80077ea:	e000      	b.n	80077ee <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80077ec:	2302      	movs	r3, #2
  }
}
 80077ee:	4618      	mov	r0, r3
 80077f0:	3714      	adds	r7, #20
 80077f2:	46bd      	mov	sp, r7
 80077f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077f8:	4770      	bx	lr
	...

080077fc <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80077fc:	b480      	push	{r7}
 80077fe:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007800:	4b05      	ldr	r3, [pc, #20]	; (8007818 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	4a04      	ldr	r2, [pc, #16]	; (8007818 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8007806:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800780a:	6013      	str	r3, [r2, #0]
}
 800780c:	bf00      	nop
 800780e:	46bd      	mov	sp, r7
 8007810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007814:	4770      	bx	lr
 8007816:	bf00      	nop
 8007818:	58000400 	.word	0x58000400

0800781c <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */  
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800781c:	b480      	push	{r7}
 800781e:	af00      	add	r7, sp, #0
  return  (PWR->CR1 & PWR_CR1_VOS);
 8007820:	4b04      	ldr	r3, [pc, #16]	; (8007834 <HAL_PWREx_GetVoltageRange+0x18>)
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8007828:	4618      	mov	r0, r3
 800782a:	46bd      	mov	sp, r7
 800782c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007830:	4770      	bx	lr
 8007832:	bf00      	nop
 8007834:	58000400 	.word	0x58000400

08007838 <LL_RCC_HSE_IsEnabledDiv2>:
{
 8007838:	b480      	push	{r7}
 800783a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 800783c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007846:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800784a:	d101      	bne.n	8007850 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 800784c:	2301      	movs	r3, #1
 800784e:	e000      	b.n	8007852 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8007850:	2300      	movs	r3, #0
}
 8007852:	4618      	mov	r0, r3
 8007854:	46bd      	mov	sp, r7
 8007856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800785a:	4770      	bx	lr

0800785c <LL_RCC_HSE_Enable>:
{
 800785c:	b480      	push	{r7}
 800785e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8007860:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800786a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800786e:	6013      	str	r3, [r2, #0]
}
 8007870:	bf00      	nop
 8007872:	46bd      	mov	sp, r7
 8007874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007878:	4770      	bx	lr

0800787a <LL_RCC_HSE_Disable>:
{
 800787a:	b480      	push	{r7}
 800787c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 800787e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007888:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800788c:	6013      	str	r3, [r2, #0]
}
 800788e:	bf00      	nop
 8007890:	46bd      	mov	sp, r7
 8007892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007896:	4770      	bx	lr

08007898 <LL_RCC_HSE_IsReady>:
{
 8007898:	b480      	push	{r7}
 800789a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 800789c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80078a6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80078aa:	d101      	bne.n	80078b0 <LL_RCC_HSE_IsReady+0x18>
 80078ac:	2301      	movs	r3, #1
 80078ae:	e000      	b.n	80078b2 <LL_RCC_HSE_IsReady+0x1a>
 80078b0:	2300      	movs	r3, #0
}
 80078b2:	4618      	mov	r0, r3
 80078b4:	46bd      	mov	sp, r7
 80078b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ba:	4770      	bx	lr

080078bc <LL_RCC_HSI_Enable>:
{
 80078bc:	b480      	push	{r7}
 80078be:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 80078c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80078ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80078ce:	6013      	str	r3, [r2, #0]
}
 80078d0:	bf00      	nop
 80078d2:	46bd      	mov	sp, r7
 80078d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078d8:	4770      	bx	lr

080078da <LL_RCC_HSI_Disable>:
{
 80078da:	b480      	push	{r7}
 80078dc:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 80078de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80078e8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80078ec:	6013      	str	r3, [r2, #0]
}
 80078ee:	bf00      	nop
 80078f0:	46bd      	mov	sp, r7
 80078f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078f6:	4770      	bx	lr

080078f8 <LL_RCC_HSI_IsReady>:
{
 80078f8:	b480      	push	{r7}
 80078fa:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 80078fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007906:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800790a:	d101      	bne.n	8007910 <LL_RCC_HSI_IsReady+0x18>
 800790c:	2301      	movs	r3, #1
 800790e:	e000      	b.n	8007912 <LL_RCC_HSI_IsReady+0x1a>
 8007910:	2300      	movs	r3, #0
}
 8007912:	4618      	mov	r0, r3
 8007914:	46bd      	mov	sp, r7
 8007916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800791a:	4770      	bx	lr

0800791c <LL_RCC_HSI_SetCalibTrimming>:
{
 800791c:	b480      	push	{r7}
 800791e:	b083      	sub	sp, #12
 8007920:	af00      	add	r7, sp, #0
 8007922:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8007924:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007928:	685b      	ldr	r3, [r3, #4]
 800792a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	061b      	lsls	r3, r3, #24
 8007932:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007936:	4313      	orrs	r3, r2
 8007938:	604b      	str	r3, [r1, #4]
}
 800793a:	bf00      	nop
 800793c:	370c      	adds	r7, #12
 800793e:	46bd      	mov	sp, r7
 8007940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007944:	4770      	bx	lr

08007946 <LL_RCC_HSI48_Enable>:
{
 8007946:	b480      	push	{r7}
 8007948:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 800794a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800794e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007952:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007956:	f043 0301 	orr.w	r3, r3, #1
 800795a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 800795e:	bf00      	nop
 8007960:	46bd      	mov	sp, r7
 8007962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007966:	4770      	bx	lr

08007968 <LL_RCC_HSI48_Disable>:
{
 8007968:	b480      	push	{r7}
 800796a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 800796c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007970:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007974:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007978:	f023 0301 	bic.w	r3, r3, #1
 800797c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8007980:	bf00      	nop
 8007982:	46bd      	mov	sp, r7
 8007984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007988:	4770      	bx	lr

0800798a <LL_RCC_HSI48_IsReady>:
{
 800798a:	b480      	push	{r7}
 800798c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 800798e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007992:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007996:	f003 0302 	and.w	r3, r3, #2
 800799a:	2b02      	cmp	r3, #2
 800799c:	d101      	bne.n	80079a2 <LL_RCC_HSI48_IsReady+0x18>
 800799e:	2301      	movs	r3, #1
 80079a0:	e000      	b.n	80079a4 <LL_RCC_HSI48_IsReady+0x1a>
 80079a2:	2300      	movs	r3, #0
}
 80079a4:	4618      	mov	r0, r3
 80079a6:	46bd      	mov	sp, r7
 80079a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ac:	4770      	bx	lr

080079ae <LL_RCC_LSE_Enable>:
{
 80079ae:	b480      	push	{r7}
 80079b0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80079b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80079b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80079ba:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80079be:	f043 0301 	orr.w	r3, r3, #1
 80079c2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80079c6:	bf00      	nop
 80079c8:	46bd      	mov	sp, r7
 80079ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ce:	4770      	bx	lr

080079d0 <LL_RCC_LSE_Disable>:
{
 80079d0:	b480      	push	{r7}
 80079d2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80079d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80079d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80079dc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80079e0:	f023 0301 	bic.w	r3, r3, #1
 80079e4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80079e8:	bf00      	nop
 80079ea:	46bd      	mov	sp, r7
 80079ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079f0:	4770      	bx	lr

080079f2 <LL_RCC_LSE_EnableBypass>:
{
 80079f2:	b480      	push	{r7}
 80079f4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80079f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80079fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80079fe:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007a02:	f043 0304 	orr.w	r3, r3, #4
 8007a06:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8007a0a:	bf00      	nop
 8007a0c:	46bd      	mov	sp, r7
 8007a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a12:	4770      	bx	lr

08007a14 <LL_RCC_LSE_DisableBypass>:
{
 8007a14:	b480      	push	{r7}
 8007a16:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8007a18:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007a1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007a20:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007a24:	f023 0304 	bic.w	r3, r3, #4
 8007a28:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8007a2c:	bf00      	nop
 8007a2e:	46bd      	mov	sp, r7
 8007a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a34:	4770      	bx	lr

08007a36 <LL_RCC_LSE_IsReady>:
{
 8007a36:	b480      	push	{r7}
 8007a38:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8007a3a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007a3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007a42:	f003 0302 	and.w	r3, r3, #2
 8007a46:	2b02      	cmp	r3, #2
 8007a48:	d101      	bne.n	8007a4e <LL_RCC_LSE_IsReady+0x18>
 8007a4a:	2301      	movs	r3, #1
 8007a4c:	e000      	b.n	8007a50 <LL_RCC_LSE_IsReady+0x1a>
 8007a4e:	2300      	movs	r3, #0
}
 8007a50:	4618      	mov	r0, r3
 8007a52:	46bd      	mov	sp, r7
 8007a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a58:	4770      	bx	lr

08007a5a <LL_RCC_LSI1_Enable>:
{
 8007a5a:	b480      	push	{r7}
 8007a5c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8007a5e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007a62:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007a66:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007a6a:	f043 0301 	orr.w	r3, r3, #1
 8007a6e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8007a72:	bf00      	nop
 8007a74:	46bd      	mov	sp, r7
 8007a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a7a:	4770      	bx	lr

08007a7c <LL_RCC_LSI1_Disable>:
{
 8007a7c:	b480      	push	{r7}
 8007a7e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8007a80:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007a84:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007a88:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007a8c:	f023 0301 	bic.w	r3, r3, #1
 8007a90:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8007a94:	bf00      	nop
 8007a96:	46bd      	mov	sp, r7
 8007a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a9c:	4770      	bx	lr

08007a9e <LL_RCC_LSI1_IsReady>:
{
 8007a9e:	b480      	push	{r7}
 8007aa0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 8007aa2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007aa6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007aaa:	f003 0302 	and.w	r3, r3, #2
 8007aae:	2b02      	cmp	r3, #2
 8007ab0:	d101      	bne.n	8007ab6 <LL_RCC_LSI1_IsReady+0x18>
 8007ab2:	2301      	movs	r3, #1
 8007ab4:	e000      	b.n	8007ab8 <LL_RCC_LSI1_IsReady+0x1a>
 8007ab6:	2300      	movs	r3, #0
}
 8007ab8:	4618      	mov	r0, r3
 8007aba:	46bd      	mov	sp, r7
 8007abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ac0:	4770      	bx	lr

08007ac2 <LL_RCC_LSI2_Enable>:
{
 8007ac2:	b480      	push	{r7}
 8007ac4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8007ac6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007aca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007ace:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007ad2:	f043 0304 	orr.w	r3, r3, #4
 8007ad6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8007ada:	bf00      	nop
 8007adc:	46bd      	mov	sp, r7
 8007ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ae2:	4770      	bx	lr

08007ae4 <LL_RCC_LSI2_Disable>:
{
 8007ae4:	b480      	push	{r7}
 8007ae6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8007ae8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007aec:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007af0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007af4:	f023 0304 	bic.w	r3, r3, #4
 8007af8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8007afc:	bf00      	nop
 8007afe:	46bd      	mov	sp, r7
 8007b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b04:	4770      	bx	lr

08007b06 <LL_RCC_LSI2_IsReady>:
{
 8007b06:	b480      	push	{r7}
 8007b08:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8007b0a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007b0e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007b12:	f003 0308 	and.w	r3, r3, #8
 8007b16:	2b08      	cmp	r3, #8
 8007b18:	d101      	bne.n	8007b1e <LL_RCC_LSI2_IsReady+0x18>
 8007b1a:	2301      	movs	r3, #1
 8007b1c:	e000      	b.n	8007b20 <LL_RCC_LSI2_IsReady+0x1a>
 8007b1e:	2300      	movs	r3, #0
}
 8007b20:	4618      	mov	r0, r3
 8007b22:	46bd      	mov	sp, r7
 8007b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b28:	4770      	bx	lr

08007b2a <LL_RCC_LSI2_SetTrimming>:
{
 8007b2a:	b480      	push	{r7}
 8007b2c:	b083      	sub	sp, #12
 8007b2e:	af00      	add	r7, sp, #0
 8007b30:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 8007b32:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007b36:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007b3a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	021b      	lsls	r3, r3, #8
 8007b42:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007b46:	4313      	orrs	r3, r2
 8007b48:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8007b4c:	bf00      	nop
 8007b4e:	370c      	adds	r7, #12
 8007b50:	46bd      	mov	sp, r7
 8007b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b56:	4770      	bx	lr

08007b58 <LL_RCC_MSI_Enable>:
{
 8007b58:	b480      	push	{r7}
 8007b5a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8007b5c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007b66:	f043 0301 	orr.w	r3, r3, #1
 8007b6a:	6013      	str	r3, [r2, #0]
}
 8007b6c:	bf00      	nop
 8007b6e:	46bd      	mov	sp, r7
 8007b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b74:	4770      	bx	lr

08007b76 <LL_RCC_MSI_Disable>:
{
 8007b76:	b480      	push	{r7}
 8007b78:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8007b7a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007b84:	f023 0301 	bic.w	r3, r3, #1
 8007b88:	6013      	str	r3, [r2, #0]
}
 8007b8a:	bf00      	nop
 8007b8c:	46bd      	mov	sp, r7
 8007b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b92:	4770      	bx	lr

08007b94 <LL_RCC_MSI_IsReady>:
{
 8007b94:	b480      	push	{r7}
 8007b96:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8007b98:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	f003 0302 	and.w	r3, r3, #2
 8007ba2:	2b02      	cmp	r3, #2
 8007ba4:	d101      	bne.n	8007baa <LL_RCC_MSI_IsReady+0x16>
 8007ba6:	2301      	movs	r3, #1
 8007ba8:	e000      	b.n	8007bac <LL_RCC_MSI_IsReady+0x18>
 8007baa:	2300      	movs	r3, #0
}
 8007bac:	4618      	mov	r0, r3
 8007bae:	46bd      	mov	sp, r7
 8007bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bb4:	4770      	bx	lr

08007bb6 <LL_RCC_MSI_SetRange>:
{
 8007bb6:	b480      	push	{r7}
 8007bb8:	b083      	sub	sp, #12
 8007bba:	af00      	add	r7, sp, #0
 8007bbc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 8007bbe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007bc8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	4313      	orrs	r3, r2
 8007bd0:	600b      	str	r3, [r1, #0]
}
 8007bd2:	bf00      	nop
 8007bd4:	370c      	adds	r7, #12
 8007bd6:	46bd      	mov	sp, r7
 8007bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bdc:	4770      	bx	lr

08007bde <LL_RCC_MSI_GetRange>:
{
 8007bde:	b480      	push	{r7}
 8007be0:	b083      	sub	sp, #12
 8007be2:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8007be4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007bee:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	2bb0      	cmp	r3, #176	; 0xb0
 8007bf4:	d901      	bls.n	8007bfa <LL_RCC_MSI_GetRange+0x1c>
    msiRange = LL_RCC_MSIRANGE_11;
 8007bf6:	23b0      	movs	r3, #176	; 0xb0
 8007bf8:	607b      	str	r3, [r7, #4]
  return msiRange;
 8007bfa:	687b      	ldr	r3, [r7, #4]
}
 8007bfc:	4618      	mov	r0, r3
 8007bfe:	370c      	adds	r7, #12
 8007c00:	46bd      	mov	sp, r7
 8007c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c06:	4770      	bx	lr

08007c08 <LL_RCC_MSI_SetCalibTrimming>:
{
 8007c08:	b480      	push	{r7}
 8007c0a:	b083      	sub	sp, #12
 8007c0c:	af00      	add	r7, sp, #0
 8007c0e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8007c10:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007c14:	685b      	ldr	r3, [r3, #4]
 8007c16:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	021b      	lsls	r3, r3, #8
 8007c1e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007c22:	4313      	orrs	r3, r2
 8007c24:	604b      	str	r3, [r1, #4]
}
 8007c26:	bf00      	nop
 8007c28:	370c      	adds	r7, #12
 8007c2a:	46bd      	mov	sp, r7
 8007c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c30:	4770      	bx	lr

08007c32 <LL_RCC_SetSysClkSource>:
{
 8007c32:	b480      	push	{r7}
 8007c34:	b083      	sub	sp, #12
 8007c36:	af00      	add	r7, sp, #0
 8007c38:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8007c3a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007c3e:	689b      	ldr	r3, [r3, #8]
 8007c40:	f023 0203 	bic.w	r2, r3, #3
 8007c44:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	4313      	orrs	r3, r2
 8007c4c:	608b      	str	r3, [r1, #8]
}
 8007c4e:	bf00      	nop
 8007c50:	370c      	adds	r7, #12
 8007c52:	46bd      	mov	sp, r7
 8007c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c58:	4770      	bx	lr

08007c5a <LL_RCC_GetSysClkSource>:
{
 8007c5a:	b480      	push	{r7}
 8007c5c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8007c5e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007c62:	689b      	ldr	r3, [r3, #8]
 8007c64:	f003 030c 	and.w	r3, r3, #12
}
 8007c68:	4618      	mov	r0, r3
 8007c6a:	46bd      	mov	sp, r7
 8007c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c70:	4770      	bx	lr

08007c72 <LL_RCC_SetAHBPrescaler>:
{
 8007c72:	b480      	push	{r7}
 8007c74:	b083      	sub	sp, #12
 8007c76:	af00      	add	r7, sp, #0
 8007c78:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8007c7a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007c7e:	689b      	ldr	r3, [r3, #8]
 8007c80:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007c84:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	4313      	orrs	r3, r2
 8007c8c:	608b      	str	r3, [r1, #8]
}
 8007c8e:	bf00      	nop
 8007c90:	370c      	adds	r7, #12
 8007c92:	46bd      	mov	sp, r7
 8007c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c98:	4770      	bx	lr

08007c9a <LL_C2_RCC_SetAHBPrescaler>:
{
 8007c9a:	b480      	push	{r7}
 8007c9c:	b083      	sub	sp, #12
 8007c9e:	af00      	add	r7, sp, #0
 8007ca0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8007ca2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007ca6:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8007caa:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007cae:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	4313      	orrs	r3, r2
 8007cb6:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8007cba:	bf00      	nop
 8007cbc:	370c      	adds	r7, #12
 8007cbe:	46bd      	mov	sp, r7
 8007cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cc4:	4770      	bx	lr

08007cc6 <LL_RCC_SetAHB4Prescaler>:
{
 8007cc6:	b480      	push	{r7}
 8007cc8:	b083      	sub	sp, #12
 8007cca:	af00      	add	r7, sp, #0
 8007ccc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8007cce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007cd2:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8007cd6:	f023 020f 	bic.w	r2, r3, #15
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	091b      	lsrs	r3, r3, #4
 8007cde:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007ce2:	4313      	orrs	r3, r2
 8007ce4:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8007ce8:	bf00      	nop
 8007cea:	370c      	adds	r7, #12
 8007cec:	46bd      	mov	sp, r7
 8007cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cf2:	4770      	bx	lr

08007cf4 <LL_RCC_SetAPB1Prescaler>:
{
 8007cf4:	b480      	push	{r7}
 8007cf6:	b083      	sub	sp, #12
 8007cf8:	af00      	add	r7, sp, #0
 8007cfa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8007cfc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007d00:	689b      	ldr	r3, [r3, #8]
 8007d02:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007d06:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	4313      	orrs	r3, r2
 8007d0e:	608b      	str	r3, [r1, #8]
}
 8007d10:	bf00      	nop
 8007d12:	370c      	adds	r7, #12
 8007d14:	46bd      	mov	sp, r7
 8007d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d1a:	4770      	bx	lr

08007d1c <LL_RCC_SetAPB2Prescaler>:
{
 8007d1c:	b480      	push	{r7}
 8007d1e:	b083      	sub	sp, #12
 8007d20:	af00      	add	r7, sp, #0
 8007d22:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8007d24:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007d28:	689b      	ldr	r3, [r3, #8]
 8007d2a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8007d2e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	4313      	orrs	r3, r2
 8007d36:	608b      	str	r3, [r1, #8]
}
 8007d38:	bf00      	nop
 8007d3a:	370c      	adds	r7, #12
 8007d3c:	46bd      	mov	sp, r7
 8007d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d42:	4770      	bx	lr

08007d44 <LL_RCC_GetAHBPrescaler>:
{
 8007d44:	b480      	push	{r7}
 8007d46:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8007d48:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007d4c:	689b      	ldr	r3, [r3, #8]
 8007d4e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8007d52:	4618      	mov	r0, r3
 8007d54:	46bd      	mov	sp, r7
 8007d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d5a:	4770      	bx	lr

08007d5c <LL_C2_RCC_GetAHBPrescaler>:
{
 8007d5c:	b480      	push	{r7}
 8007d5e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE));
 8007d60:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007d64:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8007d68:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8007d6c:	4618      	mov	r0, r3
 8007d6e:	46bd      	mov	sp, r7
 8007d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d74:	4770      	bx	lr

08007d76 <LL_RCC_GetAHB4Prescaler>:
{
 8007d76:	b480      	push	{r7}
 8007d78:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8007d7a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007d7e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8007d82:	011b      	lsls	r3, r3, #4
 8007d84:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8007d88:	4618      	mov	r0, r3
 8007d8a:	46bd      	mov	sp, r7
 8007d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d90:	4770      	bx	lr

08007d92 <LL_RCC_GetAPB1Prescaler>:
{
 8007d92:	b480      	push	{r7}
 8007d94:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8007d96:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007d9a:	689b      	ldr	r3, [r3, #8]
 8007d9c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8007da0:	4618      	mov	r0, r3
 8007da2:	46bd      	mov	sp, r7
 8007da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007da8:	4770      	bx	lr

08007daa <LL_RCC_GetAPB2Prescaler>:
{
 8007daa:	b480      	push	{r7}
 8007dac:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8007dae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007db2:	689b      	ldr	r3, [r3, #8]
 8007db4:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8007db8:	4618      	mov	r0, r3
 8007dba:	46bd      	mov	sp, r7
 8007dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dc0:	4770      	bx	lr

08007dc2 <LL_RCC_PLL_Enable>:
{
 8007dc2:	b480      	push	{r7}
 8007dc4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8007dc6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007dd0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007dd4:	6013      	str	r3, [r2, #0]
}
 8007dd6:	bf00      	nop
 8007dd8:	46bd      	mov	sp, r7
 8007dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dde:	4770      	bx	lr

08007de0 <LL_RCC_PLL_Disable>:
{
 8007de0:	b480      	push	{r7}
 8007de2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8007de4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007dee:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007df2:	6013      	str	r3, [r2, #0]
}
 8007df4:	bf00      	nop
 8007df6:	46bd      	mov	sp, r7
 8007df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dfc:	4770      	bx	lr

08007dfe <LL_RCC_PLL_IsReady>:
{
 8007dfe:	b480      	push	{r7}
 8007e00:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8007e02:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007e0c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007e10:	d101      	bne.n	8007e16 <LL_RCC_PLL_IsReady+0x18>
 8007e12:	2301      	movs	r3, #1
 8007e14:	e000      	b.n	8007e18 <LL_RCC_PLL_IsReady+0x1a>
 8007e16:	2300      	movs	r3, #0
}
 8007e18:	4618      	mov	r0, r3
 8007e1a:	46bd      	mov	sp, r7
 8007e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e20:	4770      	bx	lr

08007e22 <LL_RCC_PLL_GetN>:
{
 8007e22:	b480      	push	{r7}
 8007e24:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8007e26:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007e2a:	68db      	ldr	r3, [r3, #12]
 8007e2c:	0a1b      	lsrs	r3, r3, #8
 8007e2e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8007e32:	4618      	mov	r0, r3
 8007e34:	46bd      	mov	sp, r7
 8007e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e3a:	4770      	bx	lr

08007e3c <LL_RCC_PLL_GetR>:
{
 8007e3c:	b480      	push	{r7}
 8007e3e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8007e40:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007e44:	68db      	ldr	r3, [r3, #12]
 8007e46:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8007e4a:	4618      	mov	r0, r3
 8007e4c:	46bd      	mov	sp, r7
 8007e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e52:	4770      	bx	lr

08007e54 <LL_RCC_PLL_GetDivider>:
{
 8007e54:	b480      	push	{r7}
 8007e56:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8007e58:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007e5c:	68db      	ldr	r3, [r3, #12]
 8007e5e:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8007e62:	4618      	mov	r0, r3
 8007e64:	46bd      	mov	sp, r7
 8007e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e6a:	4770      	bx	lr

08007e6c <LL_RCC_PLL_GetMainSource>:
{
 8007e6c:	b480      	push	{r7}
 8007e6e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8007e70:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007e74:	68db      	ldr	r3, [r3, #12]
 8007e76:	f003 0303 	and.w	r3, r3, #3
}
 8007e7a:	4618      	mov	r0, r3
 8007e7c:	46bd      	mov	sp, r7
 8007e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e82:	4770      	bx	lr

08007e84 <LL_RCC_IsActiveFlag_HPRE>:
{
 8007e84:	b480      	push	{r7}
 8007e86:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8007e88:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007e8c:	689b      	ldr	r3, [r3, #8]
 8007e8e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007e92:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007e96:	d101      	bne.n	8007e9c <LL_RCC_IsActiveFlag_HPRE+0x18>
 8007e98:	2301      	movs	r3, #1
 8007e9a:	e000      	b.n	8007e9e <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8007e9c:	2300      	movs	r3, #0
}
 8007e9e:	4618      	mov	r0, r3
 8007ea0:	46bd      	mov	sp, r7
 8007ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ea6:	4770      	bx	lr

08007ea8 <LL_RCC_IsActiveFlag_C2HPRE>:
{
 8007ea8:	b480      	push	{r7}
 8007eaa:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8007eac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007eb0:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8007eb4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007eb8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007ebc:	d101      	bne.n	8007ec2 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8007ebe:	2301      	movs	r3, #1
 8007ec0:	e000      	b.n	8007ec4 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8007ec2:	2300      	movs	r3, #0
}
 8007ec4:	4618      	mov	r0, r3
 8007ec6:	46bd      	mov	sp, r7
 8007ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ecc:	4770      	bx	lr

08007ece <LL_RCC_IsActiveFlag_SHDHPRE>:
{
 8007ece:	b480      	push	{r7}
 8007ed0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8007ed2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007ed6:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8007eda:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007ede:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007ee2:	d101      	bne.n	8007ee8 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8007ee4:	2301      	movs	r3, #1
 8007ee6:	e000      	b.n	8007eea <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8007ee8:	2300      	movs	r3, #0
}
 8007eea:	4618      	mov	r0, r3
 8007eec:	46bd      	mov	sp, r7
 8007eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ef2:	4770      	bx	lr

08007ef4 <LL_RCC_IsActiveFlag_PPRE1>:
{
 8007ef4:	b480      	push	{r7}
 8007ef6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8007ef8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007efc:	689b      	ldr	r3, [r3, #8]
 8007efe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007f02:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007f06:	d101      	bne.n	8007f0c <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8007f08:	2301      	movs	r3, #1
 8007f0a:	e000      	b.n	8007f0e <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8007f0c:	2300      	movs	r3, #0
}
 8007f0e:	4618      	mov	r0, r3
 8007f10:	46bd      	mov	sp, r7
 8007f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f16:	4770      	bx	lr

08007f18 <LL_RCC_IsActiveFlag_PPRE2>:
{
 8007f18:	b480      	push	{r7}
 8007f1a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8007f1c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007f20:	689b      	ldr	r3, [r3, #8]
 8007f22:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007f26:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007f2a:	d101      	bne.n	8007f30 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8007f2c:	2301      	movs	r3, #1
 8007f2e:	e000      	b.n	8007f32 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8007f30:	2300      	movs	r3, #0
}
 8007f32:	4618      	mov	r0, r3
 8007f34:	46bd      	mov	sp, r7
 8007f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f3a:	4770      	bx	lr

08007f3c <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007f3c:	b590      	push	{r4, r7, lr}
 8007f3e:	b08d      	sub	sp, #52	; 0x34
 8007f40:	af00      	add	r7, sp, #0
 8007f42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	d101      	bne.n	8007f4e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007f4a:	2301      	movs	r3, #1
 8007f4c:	e37e      	b.n	800864c <HAL_RCC_OscConfig+0x710>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	f003 0320 	and.w	r3, r3, #32
 8007f56:	2b00      	cmp	r3, #0
 8007f58:	f000 8092 	beq.w	8008080 <HAL_RCC_OscConfig+0x144>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007f5c:	f7ff fe7d 	bl	8007c5a <LL_RCC_GetSysClkSource>
 8007f60:	62f8      	str	r0, [r7, #44]	; 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007f62:	f7ff ff83 	bl	8007e6c <LL_RCC_PLL_GetMainSource>
 8007f66:	62b8      	str	r0, [r7, #40]	; 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8007f68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	d005      	beq.n	8007f7a <HAL_RCC_OscConfig+0x3e>
 8007f6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f70:	2b0c      	cmp	r3, #12
 8007f72:	d14c      	bne.n	800800e <HAL_RCC_OscConfig+0xd2>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 8007f74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f76:	2b01      	cmp	r3, #1
 8007f78:	d149      	bne.n	800800e <HAL_RCC_OscConfig+0xd2>
    {
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8007f7a:	f7ff fe0b 	bl	8007b94 <LL_RCC_MSI_IsReady>
 8007f7e:	4603      	mov	r3, r0
 8007f80:	2b00      	cmp	r3, #0
 8007f82:	d005      	beq.n	8007f90 <HAL_RCC_OscConfig+0x54>
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	69db      	ldr	r3, [r3, #28]
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	d101      	bne.n	8007f90 <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 8007f8c:	2301      	movs	r3, #1
 8007f8e:	e35d      	b.n	800864c <HAL_RCC_OscConfig+0x710>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8007f94:	f7ff fe23 	bl	8007bde <LL_RCC_MSI_GetRange>
 8007f98:	4603      	mov	r3, r0
 8007f9a:	429c      	cmp	r4, r3
 8007f9c:	d914      	bls.n	8007fc8 <HAL_RCC_OscConfig+0x8c>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fa2:	4618      	mov	r0, r3
 8007fa4:	f000 fd72 	bl	8008a8c <RCC_SetFlashLatencyFromMSIRange>
 8007fa8:	4603      	mov	r3, r0
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	d001      	beq.n	8007fb2 <HAL_RCC_OscConfig+0x76>
          {
            return HAL_ERROR;
 8007fae:	2301      	movs	r3, #1
 8007fb0:	e34c      	b.n	800864c <HAL_RCC_OscConfig+0x710>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fb6:	4618      	mov	r0, r3
 8007fb8:	f7ff fdfd 	bl	8007bb6 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	6a1b      	ldr	r3, [r3, #32]
 8007fc0:	4618      	mov	r0, r3
 8007fc2:	f7ff fe21 	bl	8007c08 <LL_RCC_MSI_SetCalibTrimming>
 8007fc6:	e013      	b.n	8007ff0 <HAL_RCC_OscConfig+0xb4>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fcc:	4618      	mov	r0, r3
 8007fce:	f7ff fdf2 	bl	8007bb6 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	6a1b      	ldr	r3, [r3, #32]
 8007fd6:	4618      	mov	r0, r3
 8007fd8:	f7ff fe16 	bl	8007c08 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fe0:	4618      	mov	r0, r3
 8007fe2:	f000 fd53 	bl	8008a8c <RCC_SetFlashLatencyFromMSIRange>
 8007fe6:	4603      	mov	r3, r0
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	d001      	beq.n	8007ff0 <HAL_RCC_OscConfig+0xb4>
          {
            return HAL_ERROR;
 8007fec:	2301      	movs	r3, #1
 8007fee:	e32d      	b.n	800864c <HAL_RCC_OscConfig+0x710>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8007ff0:	f000 fcda 	bl	80089a8 <HAL_RCC_GetHCLKFreq>
 8007ff4:	4602      	mov	r2, r0
 8007ff6:	4bb3      	ldr	r3, [pc, #716]	; (80082c4 <HAL_RCC_OscConfig+0x388>)
 8007ff8:	601a      	str	r2, [r3, #0]
        
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8007ffa:	4bb3      	ldr	r3, [pc, #716]	; (80082c8 <HAL_RCC_OscConfig+0x38c>)
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	4618      	mov	r0, r3
 8008000:	f7fd fe4c 	bl	8005c9c <HAL_InitTick>
 8008004:	4603      	mov	r3, r0
 8008006:	2b00      	cmp	r3, #0
 8008008:	d039      	beq.n	800807e <HAL_RCC_OscConfig+0x142>
        {
          return HAL_ERROR;
 800800a:	2301      	movs	r3, #1
 800800c:	e31e      	b.n	800864c <HAL_RCC_OscConfig+0x710>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	69db      	ldr	r3, [r3, #28]
 8008012:	2b00      	cmp	r3, #0
 8008014:	d01e      	beq.n	8008054 <HAL_RCC_OscConfig+0x118>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8008016:	f7ff fd9f 	bl	8007b58 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 800801a:	f7fe f80f 	bl	800603c <HAL_GetTick>
 800801e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8008020:	e008      	b.n	8008034 <HAL_RCC_OscConfig+0xf8>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8008022:	f7fe f80b 	bl	800603c <HAL_GetTick>
 8008026:	4602      	mov	r2, r0
 8008028:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800802a:	1ad3      	subs	r3, r2, r3
 800802c:	2b02      	cmp	r3, #2
 800802e:	d901      	bls.n	8008034 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8008030:	2303      	movs	r3, #3
 8008032:	e30b      	b.n	800864c <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_MSI_IsReady() == 0U)
 8008034:	f7ff fdae 	bl	8007b94 <LL_RCC_MSI_IsReady>
 8008038:	4603      	mov	r3, r0
 800803a:	2b00      	cmp	r3, #0
 800803c:	d0f1      	beq.n	8008022 <HAL_RCC_OscConfig+0xe6>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008042:	4618      	mov	r0, r3
 8008044:	f7ff fdb7 	bl	8007bb6 <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	6a1b      	ldr	r3, [r3, #32]
 800804c:	4618      	mov	r0, r3
 800804e:	f7ff fddb 	bl	8007c08 <LL_RCC_MSI_SetCalibTrimming>
 8008052:	e015      	b.n	8008080 <HAL_RCC_OscConfig+0x144>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8008054:	f7ff fd8f 	bl	8007b76 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8008058:	f7fd fff0 	bl	800603c <HAL_GetTick>
 800805c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 800805e:	e008      	b.n	8008072 <HAL_RCC_OscConfig+0x136>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8008060:	f7fd ffec 	bl	800603c <HAL_GetTick>
 8008064:	4602      	mov	r2, r0
 8008066:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008068:	1ad3      	subs	r3, r2, r3
 800806a:	2b02      	cmp	r3, #2
 800806c:	d901      	bls.n	8008072 <HAL_RCC_OscConfig+0x136>
          {
            return HAL_TIMEOUT;
 800806e:	2303      	movs	r3, #3
 8008070:	e2ec      	b.n	800864c <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_MSI_IsReady() != 0U)
 8008072:	f7ff fd8f 	bl	8007b94 <LL_RCC_MSI_IsReady>
 8008076:	4603      	mov	r3, r0
 8008078:	2b00      	cmp	r3, #0
 800807a:	d1f1      	bne.n	8008060 <HAL_RCC_OscConfig+0x124>
 800807c:	e000      	b.n	8008080 <HAL_RCC_OscConfig+0x144>
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800807e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	f003 0301 	and.w	r3, r3, #1
 8008088:	2b00      	cmp	r3, #0
 800808a:	d04e      	beq.n	800812a <HAL_RCC_OscConfig+0x1ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800808c:	f7ff fde5 	bl	8007c5a <LL_RCC_GetSysClkSource>
 8008090:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8008092:	f7ff feeb 	bl	8007e6c <LL_RCC_PLL_GetMainSource>
 8008096:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8008098:	6a3b      	ldr	r3, [r7, #32]
 800809a:	2b08      	cmp	r3, #8
 800809c:	d005      	beq.n	80080aa <HAL_RCC_OscConfig+0x16e>
 800809e:	6a3b      	ldr	r3, [r7, #32]
 80080a0:	2b0c      	cmp	r3, #12
 80080a2:	d10d      	bne.n	80080c0 <HAL_RCC_OscConfig+0x184>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 80080a4:	69fb      	ldr	r3, [r7, #28]
 80080a6:	2b03      	cmp	r3, #3
 80080a8:	d10a      	bne.n	80080c0 <HAL_RCC_OscConfig+0x184>
    {
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80080aa:	f7ff fbf5 	bl	8007898 <LL_RCC_HSE_IsReady>
 80080ae:	4603      	mov	r3, r0
 80080b0:	2b00      	cmp	r3, #0
 80080b2:	d039      	beq.n	8008128 <HAL_RCC_OscConfig+0x1ec>
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	685b      	ldr	r3, [r3, #4]
 80080b8:	2b00      	cmp	r3, #0
 80080ba:	d135      	bne.n	8008128 <HAL_RCC_OscConfig+0x1ec>
      {
        return HAL_ERROR;
 80080bc:	2301      	movs	r3, #1
 80080be:	e2c5      	b.n	800864c <HAL_RCC_OscConfig+0x710>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	685b      	ldr	r3, [r3, #4]
 80080c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80080c8:	d102      	bne.n	80080d0 <HAL_RCC_OscConfig+0x194>
 80080ca:	f7ff fbc7 	bl	800785c <LL_RCC_HSE_Enable>
 80080ce:	e001      	b.n	80080d4 <HAL_RCC_OscConfig+0x198>
 80080d0:	f7ff fbd3 	bl	800787a <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	685b      	ldr	r3, [r3, #4]
 80080d8:	2b00      	cmp	r3, #0
 80080da:	d012      	beq.n	8008102 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80080dc:	f7fd ffae 	bl	800603c <HAL_GetTick>
 80080e0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 80080e2:	e008      	b.n	80080f6 <HAL_RCC_OscConfig+0x1ba>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80080e4:	f7fd ffaa 	bl	800603c <HAL_GetTick>
 80080e8:	4602      	mov	r2, r0
 80080ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080ec:	1ad3      	subs	r3, r2, r3
 80080ee:	2b64      	cmp	r3, #100	; 0x64
 80080f0:	d901      	bls.n	80080f6 <HAL_RCC_OscConfig+0x1ba>
          {
            return HAL_TIMEOUT;
 80080f2:	2303      	movs	r3, #3
 80080f4:	e2aa      	b.n	800864c <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_HSE_IsReady() == 0U)
 80080f6:	f7ff fbcf 	bl	8007898 <LL_RCC_HSE_IsReady>
 80080fa:	4603      	mov	r3, r0
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	d0f1      	beq.n	80080e4 <HAL_RCC_OscConfig+0x1a8>
 8008100:	e013      	b.n	800812a <HAL_RCC_OscConfig+0x1ee>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008102:	f7fd ff9b 	bl	800603c <HAL_GetTick>
 8008106:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8008108:	e008      	b.n	800811c <HAL_RCC_OscConfig+0x1e0>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800810a:	f7fd ff97 	bl	800603c <HAL_GetTick>
 800810e:	4602      	mov	r2, r0
 8008110:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008112:	1ad3      	subs	r3, r2, r3
 8008114:	2b64      	cmp	r3, #100	; 0x64
 8008116:	d901      	bls.n	800811c <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 8008118:	2303      	movs	r3, #3
 800811a:	e297      	b.n	800864c <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_HSE_IsReady() != 0U)
 800811c:	f7ff fbbc 	bl	8007898 <LL_RCC_HSE_IsReady>
 8008120:	4603      	mov	r3, r0
 8008122:	2b00      	cmp	r3, #0
 8008124:	d1f1      	bne.n	800810a <HAL_RCC_OscConfig+0x1ce>
 8008126:	e000      	b.n	800812a <HAL_RCC_OscConfig+0x1ee>
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008128:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	f003 0302 	and.w	r3, r3, #2
 8008132:	2b00      	cmp	r3, #0
 8008134:	d051      	beq.n	80081da <HAL_RCC_OscConfig+0x29e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008136:	f7ff fd90 	bl	8007c5a <LL_RCC_GetSysClkSource>
 800813a:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800813c:	f7ff fe96 	bl	8007e6c <LL_RCC_PLL_GetMainSource>
 8008140:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8008142:	69bb      	ldr	r3, [r7, #24]
 8008144:	2b04      	cmp	r3, #4
 8008146:	d005      	beq.n	8008154 <HAL_RCC_OscConfig+0x218>
 8008148:	69bb      	ldr	r3, [r7, #24]
 800814a:	2b0c      	cmp	r3, #12
 800814c:	d113      	bne.n	8008176 <HAL_RCC_OscConfig+0x23a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 800814e:	697b      	ldr	r3, [r7, #20]
 8008150:	2b02      	cmp	r3, #2
 8008152:	d110      	bne.n	8008176 <HAL_RCC_OscConfig+0x23a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008154:	f7ff fbd0 	bl	80078f8 <LL_RCC_HSI_IsReady>
 8008158:	4603      	mov	r3, r0
 800815a:	2b00      	cmp	r3, #0
 800815c:	d005      	beq.n	800816a <HAL_RCC_OscConfig+0x22e>
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	68db      	ldr	r3, [r3, #12]
 8008162:	2b00      	cmp	r3, #0
 8008164:	d101      	bne.n	800816a <HAL_RCC_OscConfig+0x22e>
      {
        return HAL_ERROR;
 8008166:	2301      	movs	r3, #1
 8008168:	e270      	b.n	800864c <HAL_RCC_OscConfig+0x710>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	691b      	ldr	r3, [r3, #16]
 800816e:	4618      	mov	r0, r3
 8008170:	f7ff fbd4 	bl	800791c <LL_RCC_HSI_SetCalibTrimming>
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008174:	e031      	b.n	80081da <HAL_RCC_OscConfig+0x29e>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	68db      	ldr	r3, [r3, #12]
 800817a:	2b00      	cmp	r3, #0
 800817c:	d019      	beq.n	80081b2 <HAL_RCC_OscConfig+0x276>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800817e:	f7ff fb9d 	bl	80078bc <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008182:	f7fd ff5b 	bl	800603c <HAL_GetTick>
 8008186:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8008188:	e008      	b.n	800819c <HAL_RCC_OscConfig+0x260>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800818a:	f7fd ff57 	bl	800603c <HAL_GetTick>
 800818e:	4602      	mov	r2, r0
 8008190:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008192:	1ad3      	subs	r3, r2, r3
 8008194:	2b02      	cmp	r3, #2
 8008196:	d901      	bls.n	800819c <HAL_RCC_OscConfig+0x260>
          {
            return HAL_TIMEOUT;
 8008198:	2303      	movs	r3, #3
 800819a:	e257      	b.n	800864c <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_HSI_IsReady() == 0U)
 800819c:	f7ff fbac 	bl	80078f8 <LL_RCC_HSI_IsReady>
 80081a0:	4603      	mov	r3, r0
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	d0f1      	beq.n	800818a <HAL_RCC_OscConfig+0x24e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	691b      	ldr	r3, [r3, #16]
 80081aa:	4618      	mov	r0, r3
 80081ac:	f7ff fbb6 	bl	800791c <LL_RCC_HSI_SetCalibTrimming>
 80081b0:	e013      	b.n	80081da <HAL_RCC_OscConfig+0x29e>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80081b2:	f7ff fb92 	bl	80078da <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80081b6:	f7fd ff41 	bl	800603c <HAL_GetTick>
 80081ba:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 80081bc:	e008      	b.n	80081d0 <HAL_RCC_OscConfig+0x294>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80081be:	f7fd ff3d 	bl	800603c <HAL_GetTick>
 80081c2:	4602      	mov	r2, r0
 80081c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081c6:	1ad3      	subs	r3, r2, r3
 80081c8:	2b02      	cmp	r3, #2
 80081ca:	d901      	bls.n	80081d0 <HAL_RCC_OscConfig+0x294>
          {
            return HAL_TIMEOUT;
 80081cc:	2303      	movs	r3, #3
 80081ce:	e23d      	b.n	800864c <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_HSI_IsReady() != 0U)
 80081d0:	f7ff fb92 	bl	80078f8 <LL_RCC_HSI_IsReady>
 80081d4:	4603      	mov	r3, r0
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	d1f1      	bne.n	80081be <HAL_RCC_OscConfig+0x282>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	f003 0308 	and.w	r3, r3, #8
 80081e2:	2b00      	cmp	r3, #0
 80081e4:	d106      	bne.n	80081f4 <HAL_RCC_OscConfig+0x2b8>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 80081ee:	2b00      	cmp	r3, #0
 80081f0:	f000 80a3 	beq.w	800833a <HAL_RCC_OscConfig+0x3fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	695b      	ldr	r3, [r3, #20]
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	d076      	beq.n	80082ea <HAL_RCC_OscConfig+0x3ae>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	f003 0310 	and.w	r3, r3, #16
 8008204:	2b00      	cmp	r3, #0
 8008206:	d046      	beq.n	8008296 <HAL_RCC_OscConfig+0x35a>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 8008208:	f7ff fc49 	bl	8007a9e <LL_RCC_LSI1_IsReady>
 800820c:	4603      	mov	r3, r0
 800820e:	2b00      	cmp	r3, #0
 8008210:	d113      	bne.n	800823a <HAL_RCC_OscConfig+0x2fe>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 8008212:	f7ff fc22 	bl	8007a5a <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8008216:	f7fd ff11 	bl	800603c <HAL_GetTick>
 800821a:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 800821c:	e008      	b.n	8008230 <HAL_RCC_OscConfig+0x2f4>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800821e:	f7fd ff0d 	bl	800603c <HAL_GetTick>
 8008222:	4602      	mov	r2, r0
 8008224:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008226:	1ad3      	subs	r3, r2, r3
 8008228:	2b02      	cmp	r3, #2
 800822a:	d901      	bls.n	8008230 <HAL_RCC_OscConfig+0x2f4>
            {
              return HAL_TIMEOUT;
 800822c:	2303      	movs	r3, #3
 800822e:	e20d      	b.n	800864c <HAL_RCC_OscConfig+0x710>
          while (LL_RCC_LSI1_IsReady() == 0U)
 8008230:	f7ff fc35 	bl	8007a9e <LL_RCC_LSI1_IsReady>
 8008234:	4603      	mov	r3, r0
 8008236:	2b00      	cmp	r3, #0
 8008238:	d0f1      	beq.n	800821e <HAL_RCC_OscConfig+0x2e2>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 800823a:	f7ff fc42 	bl	8007ac2 <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800823e:	f7fd fefd 	bl	800603c <HAL_GetTick>
 8008242:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 8008244:	e008      	b.n	8008258 <HAL_RCC_OscConfig+0x31c>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8008246:	f7fd fef9 	bl	800603c <HAL_GetTick>
 800824a:	4602      	mov	r2, r0
 800824c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800824e:	1ad3      	subs	r3, r2, r3
 8008250:	2b03      	cmp	r3, #3
 8008252:	d901      	bls.n	8008258 <HAL_RCC_OscConfig+0x31c>
          {
            return HAL_TIMEOUT;
 8008254:	2303      	movs	r3, #3
 8008256:	e1f9      	b.n	800864c <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_LSI2_IsReady() == 0U)
 8008258:	f7ff fc55 	bl	8007b06 <LL_RCC_LSI2_IsReady>
 800825c:	4603      	mov	r3, r0
 800825e:	2b00      	cmp	r3, #0
 8008260:	d0f1      	beq.n	8008246 <HAL_RCC_OscConfig+0x30a>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	699b      	ldr	r3, [r3, #24]
 8008266:	4618      	mov	r0, r3
 8008268:	f7ff fc5f 	bl	8007b2a <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 800826c:	f7ff fc06 	bl	8007a7c <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008270:	f7fd fee4 	bl	800603c <HAL_GetTick>
 8008274:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 8008276:	e008      	b.n	800828a <HAL_RCC_OscConfig+0x34e>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8008278:	f7fd fee0 	bl	800603c <HAL_GetTick>
 800827c:	4602      	mov	r2, r0
 800827e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008280:	1ad3      	subs	r3, r2, r3
 8008282:	2b02      	cmp	r3, #2
 8008284:	d901      	bls.n	800828a <HAL_RCC_OscConfig+0x34e>
          {
            return HAL_TIMEOUT;
 8008286:	2303      	movs	r3, #3
 8008288:	e1e0      	b.n	800864c <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_LSI1_IsReady() != 0U)
 800828a:	f7ff fc08 	bl	8007a9e <LL_RCC_LSI1_IsReady>
 800828e:	4603      	mov	r3, r0
 8008290:	2b00      	cmp	r3, #0
 8008292:	d1f1      	bne.n	8008278 <HAL_RCC_OscConfig+0x33c>
 8008294:	e051      	b.n	800833a <HAL_RCC_OscConfig+0x3fe>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 8008296:	f7ff fbe0 	bl	8007a5a <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800829a:	f7fd fecf 	bl	800603c <HAL_GetTick>
 800829e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 80082a0:	e008      	b.n	80082b4 <HAL_RCC_OscConfig+0x378>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80082a2:	f7fd fecb 	bl	800603c <HAL_GetTick>
 80082a6:	4602      	mov	r2, r0
 80082a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082aa:	1ad3      	subs	r3, r2, r3
 80082ac:	2b02      	cmp	r3, #2
 80082ae:	d901      	bls.n	80082b4 <HAL_RCC_OscConfig+0x378>
          {
            return HAL_TIMEOUT;
 80082b0:	2303      	movs	r3, #3
 80082b2:	e1cb      	b.n	800864c <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_LSI1_IsReady() == 0U)
 80082b4:	f7ff fbf3 	bl	8007a9e <LL_RCC_LSI1_IsReady>
 80082b8:	4603      	mov	r3, r0
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	d0f1      	beq.n	80082a2 <HAL_RCC_OscConfig+0x366>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 80082be:	f7ff fc11 	bl	8007ae4 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 80082c2:	e00c      	b.n	80082de <HAL_RCC_OscConfig+0x3a2>
 80082c4:	20000014 	.word	0x20000014
 80082c8:	20000018 	.word	0x20000018
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80082cc:	f7fd feb6 	bl	800603c <HAL_GetTick>
 80082d0:	4602      	mov	r2, r0
 80082d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082d4:	1ad3      	subs	r3, r2, r3
 80082d6:	2b03      	cmp	r3, #3
 80082d8:	d901      	bls.n	80082de <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 80082da:	2303      	movs	r3, #3
 80082dc:	e1b6      	b.n	800864c <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_LSI2_IsReady() != 0U)
 80082de:	f7ff fc12 	bl	8007b06 <LL_RCC_LSI2_IsReady>
 80082e2:	4603      	mov	r3, r0
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	d1f1      	bne.n	80082cc <HAL_RCC_OscConfig+0x390>
 80082e8:	e027      	b.n	800833a <HAL_RCC_OscConfig+0x3fe>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 80082ea:	f7ff fbfb 	bl	8007ae4 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80082ee:	f7fd fea5 	bl	800603c <HAL_GetTick>
 80082f2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 80082f4:	e008      	b.n	8008308 <HAL_RCC_OscConfig+0x3cc>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80082f6:	f7fd fea1 	bl	800603c <HAL_GetTick>
 80082fa:	4602      	mov	r2, r0
 80082fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082fe:	1ad3      	subs	r3, r2, r3
 8008300:	2b03      	cmp	r3, #3
 8008302:	d901      	bls.n	8008308 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8008304:	2303      	movs	r3, #3
 8008306:	e1a1      	b.n	800864c <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_LSI2_IsReady() != 0U)
 8008308:	f7ff fbfd 	bl	8007b06 <LL_RCC_LSI2_IsReady>
 800830c:	4603      	mov	r3, r0
 800830e:	2b00      	cmp	r3, #0
 8008310:	d1f1      	bne.n	80082f6 <HAL_RCC_OscConfig+0x3ba>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 8008312:	f7ff fbb3 	bl	8007a7c <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008316:	f7fd fe91 	bl	800603c <HAL_GetTick>
 800831a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 800831c:	e008      	b.n	8008330 <HAL_RCC_OscConfig+0x3f4>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800831e:	f7fd fe8d 	bl	800603c <HAL_GetTick>
 8008322:	4602      	mov	r2, r0
 8008324:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008326:	1ad3      	subs	r3, r2, r3
 8008328:	2b02      	cmp	r3, #2
 800832a:	d901      	bls.n	8008330 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 800832c:	2303      	movs	r3, #3
 800832e:	e18d      	b.n	800864c <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_LSI1_IsReady() != 0U)
 8008330:	f7ff fbb5 	bl	8007a9e <LL_RCC_LSI1_IsReady>
 8008334:	4603      	mov	r3, r0
 8008336:	2b00      	cmp	r3, #0
 8008338:	d1f1      	bne.n	800831e <HAL_RCC_OscConfig+0x3e2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	f003 0304 	and.w	r3, r3, #4
 8008342:	2b00      	cmp	r3, #0
 8008344:	d05b      	beq.n	80083fe <HAL_RCC_OscConfig+0x4c2>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008346:	4bb5      	ldr	r3, [pc, #724]	; (800861c <HAL_RCC_OscConfig+0x6e0>)
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800834e:	2b00      	cmp	r3, #0
 8008350:	d114      	bne.n	800837c <HAL_RCC_OscConfig+0x440>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8008352:	f7ff fa53 	bl	80077fc <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008356:	f7fd fe71 	bl	800603c <HAL_GetTick>
 800835a:	6278      	str	r0, [r7, #36]	; 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800835c:	e008      	b.n	8008370 <HAL_RCC_OscConfig+0x434>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800835e:	f7fd fe6d 	bl	800603c <HAL_GetTick>
 8008362:	4602      	mov	r2, r0
 8008364:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008366:	1ad3      	subs	r3, r2, r3
 8008368:	2b02      	cmp	r3, #2
 800836a:	d901      	bls.n	8008370 <HAL_RCC_OscConfig+0x434>
        {
          return HAL_TIMEOUT;
 800836c:	2303      	movs	r3, #3
 800836e:	e16d      	b.n	800864c <HAL_RCC_OscConfig+0x710>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008370:	4baa      	ldr	r3, [pc, #680]	; (800861c <HAL_RCC_OscConfig+0x6e0>)
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008378:	2b00      	cmp	r3, #0
 800837a:	d0f0      	beq.n	800835e <HAL_RCC_OscConfig+0x422>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	689b      	ldr	r3, [r3, #8]
 8008380:	2b01      	cmp	r3, #1
 8008382:	d102      	bne.n	800838a <HAL_RCC_OscConfig+0x44e>
 8008384:	f7ff fb13 	bl	80079ae <LL_RCC_LSE_Enable>
 8008388:	e00c      	b.n	80083a4 <HAL_RCC_OscConfig+0x468>
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	689b      	ldr	r3, [r3, #8]
 800838e:	2b05      	cmp	r3, #5
 8008390:	d104      	bne.n	800839c <HAL_RCC_OscConfig+0x460>
 8008392:	f7ff fb2e 	bl	80079f2 <LL_RCC_LSE_EnableBypass>
 8008396:	f7ff fb0a 	bl	80079ae <LL_RCC_LSE_Enable>
 800839a:	e003      	b.n	80083a4 <HAL_RCC_OscConfig+0x468>
 800839c:	f7ff fb18 	bl	80079d0 <LL_RCC_LSE_Disable>
 80083a0:	f7ff fb38 	bl	8007a14 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	689b      	ldr	r3, [r3, #8]
 80083a8:	2b00      	cmp	r3, #0
 80083aa:	d014      	beq.n	80083d6 <HAL_RCC_OscConfig+0x49a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80083ac:	f7fd fe46 	bl	800603c <HAL_GetTick>
 80083b0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 80083b2:	e00a      	b.n	80083ca <HAL_RCC_OscConfig+0x48e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80083b4:	f7fd fe42 	bl	800603c <HAL_GetTick>
 80083b8:	4602      	mov	r2, r0
 80083ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083bc:	1ad3      	subs	r3, r2, r3
 80083be:	f241 3288 	movw	r2, #5000	; 0x1388
 80083c2:	4293      	cmp	r3, r2
 80083c4:	d901      	bls.n	80083ca <HAL_RCC_OscConfig+0x48e>
        {
          return HAL_TIMEOUT;
 80083c6:	2303      	movs	r3, #3
 80083c8:	e140      	b.n	800864c <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_LSE_IsReady() == 0U)
 80083ca:	f7ff fb34 	bl	8007a36 <LL_RCC_LSE_IsReady>
 80083ce:	4603      	mov	r3, r0
 80083d0:	2b00      	cmp	r3, #0
 80083d2:	d0ef      	beq.n	80083b4 <HAL_RCC_OscConfig+0x478>
 80083d4:	e013      	b.n	80083fe <HAL_RCC_OscConfig+0x4c2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80083d6:	f7fd fe31 	bl	800603c <HAL_GetTick>
 80083da:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 80083dc:	e00a      	b.n	80083f4 <HAL_RCC_OscConfig+0x4b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80083de:	f7fd fe2d 	bl	800603c <HAL_GetTick>
 80083e2:	4602      	mov	r2, r0
 80083e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083e6:	1ad3      	subs	r3, r2, r3
 80083e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80083ec:	4293      	cmp	r3, r2
 80083ee:	d901      	bls.n	80083f4 <HAL_RCC_OscConfig+0x4b8>
        {
          return HAL_TIMEOUT;
 80083f0:	2303      	movs	r3, #3
 80083f2:	e12b      	b.n	800864c <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_LSE_IsReady() != 0U)
 80083f4:	f7ff fb1f 	bl	8007a36 <LL_RCC_LSE_IsReady>
 80083f8:	4603      	mov	r3, r0
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	d1ef      	bne.n	80083de <HAL_RCC_OscConfig+0x4a2>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008406:	2b00      	cmp	r3, #0
 8008408:	d02c      	beq.n	8008464 <HAL_RCC_OscConfig+0x528>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800840e:	2b00      	cmp	r3, #0
 8008410:	d014      	beq.n	800843c <HAL_RCC_OscConfig+0x500>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8008412:	f7ff fa98 	bl	8007946 <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008416:	f7fd fe11 	bl	800603c <HAL_GetTick>
 800841a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 800841c:	e008      	b.n	8008430 <HAL_RCC_OscConfig+0x4f4>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800841e:	f7fd fe0d 	bl	800603c <HAL_GetTick>
 8008422:	4602      	mov	r2, r0
 8008424:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008426:	1ad3      	subs	r3, r2, r3
 8008428:	2b02      	cmp	r3, #2
 800842a:	d901      	bls.n	8008430 <HAL_RCC_OscConfig+0x4f4>
        {
          return HAL_TIMEOUT;
 800842c:	2303      	movs	r3, #3
 800842e:	e10d      	b.n	800864c <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_HSI48_IsReady() == 0U)
 8008430:	f7ff faab 	bl	800798a <LL_RCC_HSI48_IsReady>
 8008434:	4603      	mov	r3, r0
 8008436:	2b00      	cmp	r3, #0
 8008438:	d0f1      	beq.n	800841e <HAL_RCC_OscConfig+0x4e2>
 800843a:	e013      	b.n	8008464 <HAL_RCC_OscConfig+0x528>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800843c:	f7ff fa94 	bl	8007968 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008440:	f7fd fdfc 	bl	800603c <HAL_GetTick>
 8008444:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 8008446:	e008      	b.n	800845a <HAL_RCC_OscConfig+0x51e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8008448:	f7fd fdf8 	bl	800603c <HAL_GetTick>
 800844c:	4602      	mov	r2, r0
 800844e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008450:	1ad3      	subs	r3, r2, r3
 8008452:	2b02      	cmp	r3, #2
 8008454:	d901      	bls.n	800845a <HAL_RCC_OscConfig+0x51e>
        {
          return HAL_TIMEOUT;
 8008456:	2303      	movs	r3, #3
 8008458:	e0f8      	b.n	800864c <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_HSI48_IsReady() != 0U)
 800845a:	f7ff fa96 	bl	800798a <LL_RCC_HSI48_IsReady>
 800845e:	4603      	mov	r3, r0
 8008460:	2b00      	cmp	r3, #0
 8008462:	d1f1      	bne.n	8008448 <HAL_RCC_OscConfig+0x50c>
#endif
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008468:	2b00      	cmp	r3, #0
 800846a:	f000 80ee 	beq.w	800864a <HAL_RCC_OscConfig+0x70e>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800846e:	f7ff fbf4 	bl	8007c5a <LL_RCC_GetSysClkSource>
 8008472:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 8008474:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008478:	68db      	ldr	r3, [r3, #12]
 800847a:	60fb      	str	r3, [r7, #12]
    
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008480:	2b02      	cmp	r3, #2
 8008482:	f040 80af 	bne.w	80085e4 <HAL_RCC_OscConfig+0x6a8>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
      
      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008486:	68fb      	ldr	r3, [r7, #12]
 8008488:	f003 0203 	and.w	r2, r3, #3
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008490:	429a      	cmp	r2, r3
 8008492:	d123      	bne.n	80084dc <HAL_RCC_OscConfig+0x5a0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8008494:	68fb      	ldr	r3, [r7, #12]
 8008496:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800849e:	429a      	cmp	r2, r3
 80084a0:	d11c      	bne.n	80084dc <HAL_RCC_OscConfig+0x5a0>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 80084a2:	68fb      	ldr	r3, [r7, #12]
 80084a4:	0a1b      	lsrs	r3, r3, #8
 80084a6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80084ae:	429a      	cmp	r2, r3
 80084b0:	d114      	bne.n	80084dc <HAL_RCC_OscConfig+0x5a0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80084b2:	68fb      	ldr	r3, [r7, #12]
 80084b4:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 80084bc:	429a      	cmp	r2, r3
 80084be:	d10d      	bne.n	80084dc <HAL_RCC_OscConfig+0x5a0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80084c0:	68fb      	ldr	r3, [r7, #12]
 80084c2:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80084ca:	429a      	cmp	r2, r3
 80084cc:	d106      	bne.n	80084dc <HAL_RCC_OscConfig+0x5a0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80084ce:	68fb      	ldr	r3, [r7, #12]
 80084d0:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80084d8:	429a      	cmp	r2, r3
 80084da:	d05d      	beq.n	8008598 <HAL_RCC_OscConfig+0x65c>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80084dc:	693b      	ldr	r3, [r7, #16]
 80084de:	2b0c      	cmp	r3, #12
 80084e0:	d058      	beq.n	8008594 <HAL_RCC_OscConfig+0x658>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80084e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	d001      	beq.n	80084f4 <HAL_RCC_OscConfig+0x5b8>

          {
            return HAL_ERROR;
 80084f0:	2301      	movs	r3, #1
 80084f2:	e0ab      	b.n	800864c <HAL_RCC_OscConfig+0x710>
          }
          else
#endif
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80084f4:	f7ff fc74 	bl	8007de0 <LL_RCC_PLL_Disable>
            
            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80084f8:	f7fd fda0 	bl	800603c <HAL_GetTick>
 80084fc:	6278      	str	r0, [r7, #36]	; 0x24
            
            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80084fe:	e008      	b.n	8008512 <HAL_RCC_OscConfig+0x5d6>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008500:	f7fd fd9c 	bl	800603c <HAL_GetTick>
 8008504:	4602      	mov	r2, r0
 8008506:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008508:	1ad3      	subs	r3, r2, r3
 800850a:	2b02      	cmp	r3, #2
 800850c:	d901      	bls.n	8008512 <HAL_RCC_OscConfig+0x5d6>
              {
                return HAL_TIMEOUT;
 800850e:	2303      	movs	r3, #3
 8008510:	e09c      	b.n	800864c <HAL_RCC_OscConfig+0x710>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008512:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800851c:	2b00      	cmp	r3, #0
 800851e:	d1ef      	bne.n	8008500 <HAL_RCC_OscConfig+0x5c4>
              }
            }
            
            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008520:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008524:	68da      	ldr	r2, [r3, #12]
 8008526:	4b3e      	ldr	r3, [pc, #248]	; (8008620 <HAL_RCC_OscConfig+0x6e4>)
 8008528:	4013      	ands	r3, r2
 800852a:	687a      	ldr	r2, [r7, #4]
 800852c:	6b11      	ldr	r1, [r2, #48]	; 0x30
 800852e:	687a      	ldr	r2, [r7, #4]
 8008530:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8008532:	4311      	orrs	r1, r2
 8008534:	687a      	ldr	r2, [r7, #4]
 8008536:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8008538:	0212      	lsls	r2, r2, #8
 800853a:	4311      	orrs	r1, r2
 800853c:	687a      	ldr	r2, [r7, #4]
 800853e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8008540:	4311      	orrs	r1, r2
 8008542:	687a      	ldr	r2, [r7, #4]
 8008544:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8008546:	4311      	orrs	r1, r2
 8008548:	687a      	ldr	r2, [r7, #4]
 800854a:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800854c:	430a      	orrs	r2, r1
 800854e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008552:	4313      	orrs	r3, r2
 8008554:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
            
            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8008556:	f7ff fc34 	bl	8007dc2 <LL_RCC_PLL_Enable>
            
            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800855a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800855e:	68db      	ldr	r3, [r3, #12]
 8008560:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008564:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008568:	60d3      	str	r3, [r2, #12]
            
            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800856a:	f7fd fd67 	bl	800603c <HAL_GetTick>
 800856e:	6278      	str	r0, [r7, #36]	; 0x24
            
            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008570:	e008      	b.n	8008584 <HAL_RCC_OscConfig+0x648>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008572:	f7fd fd63 	bl	800603c <HAL_GetTick>
 8008576:	4602      	mov	r2, r0
 8008578:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800857a:	1ad3      	subs	r3, r2, r3
 800857c:	2b02      	cmp	r3, #2
 800857e:	d901      	bls.n	8008584 <HAL_RCC_OscConfig+0x648>
              {
                return HAL_TIMEOUT;
 8008580:	2303      	movs	r3, #3
 8008582:	e063      	b.n	800864c <HAL_RCC_OscConfig+0x710>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008584:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800858e:	2b00      	cmp	r3, #0
 8008590:	d0ef      	beq.n	8008572 <HAL_RCC_OscConfig+0x636>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8008592:	e05a      	b.n	800864a <HAL_RCC_OscConfig+0x70e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8008594:	2301      	movs	r3, #1
 8008596:	e059      	b.n	800864c <HAL_RCC_OscConfig+0x710>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008598:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	d151      	bne.n	800864a <HAL_RCC_OscConfig+0x70e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80085a6:	f7ff fc0c 	bl	8007dc2 <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80085aa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80085ae:	68db      	ldr	r3, [r3, #12]
 80085b0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80085b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80085b8:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80085ba:	f7fd fd3f 	bl	800603c <HAL_GetTick>
 80085be:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80085c0:	e008      	b.n	80085d4 <HAL_RCC_OscConfig+0x698>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80085c2:	f7fd fd3b 	bl	800603c <HAL_GetTick>
 80085c6:	4602      	mov	r2, r0
 80085c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085ca:	1ad3      	subs	r3, r2, r3
 80085cc:	2b02      	cmp	r3, #2
 80085ce:	d901      	bls.n	80085d4 <HAL_RCC_OscConfig+0x698>
            {
              return HAL_TIMEOUT;
 80085d0:	2303      	movs	r3, #3
 80085d2:	e03b      	b.n	800864c <HAL_RCC_OscConfig+0x710>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80085d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80085de:	2b00      	cmp	r3, #0
 80085e0:	d0ef      	beq.n	80085c2 <HAL_RCC_OscConfig+0x686>
 80085e2:	e032      	b.n	800864a <HAL_RCC_OscConfig+0x70e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80085e4:	693b      	ldr	r3, [r7, #16]
 80085e6:	2b0c      	cmp	r3, #12
 80085e8:	d02d      	beq.n	8008646 <HAL_RCC_OscConfig+0x70a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80085ea:	f7ff fbf9 	bl	8007de0 <LL_RCC_PLL_Disable>
        

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 80085ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80085f2:	68db      	ldr	r3, [r3, #12]
 80085f4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80085f8:	f023 0303 	bic.w	r3, r3, #3
 80085fc:	60d3      	str	r3, [r2, #12]

#if defined(SAI1) && defined(USB)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_USBCLK | RCC_PLL_SAI1CLK);
 80085fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008602:	68db      	ldr	r3, [r3, #12]
 8008604:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008608:	f023 5388 	bic.w	r3, r3, #285212672	; 0x11000000
 800860c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008610:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK);
#endif

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008612:	f7fd fd13 	bl	800603c <HAL_GetTick>
 8008616:	6278      	str	r0, [r7, #36]	; 0x24
        
        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008618:	e00d      	b.n	8008636 <HAL_RCC_OscConfig+0x6fa>
 800861a:	bf00      	nop
 800861c:	58000400 	.word	0x58000400
 8008620:	11c1808c 	.word	0x11c1808c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008624:	f7fd fd0a 	bl	800603c <HAL_GetTick>
 8008628:	4602      	mov	r2, r0
 800862a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800862c:	1ad3      	subs	r3, r2, r3
 800862e:	2b02      	cmp	r3, #2
 8008630:	d901      	bls.n	8008636 <HAL_RCC_OscConfig+0x6fa>
          {
            return HAL_TIMEOUT;
 8008632:	2303      	movs	r3, #3
 8008634:	e00a      	b.n	800864c <HAL_RCC_OscConfig+0x710>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008636:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008640:	2b00      	cmp	r3, #0
 8008642:	d1ef      	bne.n	8008624 <HAL_RCC_OscConfig+0x6e8>
 8008644:	e001      	b.n	800864a <HAL_RCC_OscConfig+0x70e>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8008646:	2301      	movs	r3, #1
 8008648:	e000      	b.n	800864c <HAL_RCC_OscConfig+0x710>
      }
    }
  }
  return HAL_OK;
 800864a:	2300      	movs	r3, #0
}
 800864c:	4618      	mov	r0, r3
 800864e:	3734      	adds	r7, #52	; 0x34
 8008650:	46bd      	mov	sp, r7
 8008652:	bd90      	pop	{r4, r7, pc}

08008654 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008654:	b580      	push	{r7, lr}
 8008656:	b084      	sub	sp, #16
 8008658:	af00      	add	r7, sp, #0
 800865a:	6078      	str	r0, [r7, #4]
 800865c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	2b00      	cmp	r3, #0
 8008662:	d101      	bne.n	8008668 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008664:	2301      	movs	r3, #1
 8008666:	e12d      	b.n	80088c4 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8008668:	4b98      	ldr	r3, [pc, #608]	; (80088cc <HAL_RCC_ClockConfig+0x278>)
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	f003 0307 	and.w	r3, r3, #7
 8008670:	683a      	ldr	r2, [r7, #0]
 8008672:	429a      	cmp	r2, r3
 8008674:	d91b      	bls.n	80086ae <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008676:	4b95      	ldr	r3, [pc, #596]	; (80088cc <HAL_RCC_ClockConfig+0x278>)
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	f023 0207 	bic.w	r2, r3, #7
 800867e:	4993      	ldr	r1, [pc, #588]	; (80088cc <HAL_RCC_ClockConfig+0x278>)
 8008680:	683b      	ldr	r3, [r7, #0]
 8008682:	4313      	orrs	r3, r2
 8008684:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008686:	f7fd fcd9 	bl	800603c <HAL_GetTick>
 800868a:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800868c:	e008      	b.n	80086a0 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800868e:	f7fd fcd5 	bl	800603c <HAL_GetTick>
 8008692:	4602      	mov	r2, r0
 8008694:	68fb      	ldr	r3, [r7, #12]
 8008696:	1ad3      	subs	r3, r2, r3
 8008698:	2b02      	cmp	r3, #2
 800869a:	d901      	bls.n	80086a0 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 800869c:	2303      	movs	r3, #3
 800869e:	e111      	b.n	80088c4 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80086a0:	4b8a      	ldr	r3, [pc, #552]	; (80088cc <HAL_RCC_ClockConfig+0x278>)
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	f003 0307 	and.w	r3, r3, #7
 80086a8:	683a      	ldr	r2, [r7, #0]
 80086aa:	429a      	cmp	r2, r3
 80086ac:	d1ef      	bne.n	800868e <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	f003 0302 	and.w	r3, r3, #2
 80086b6:	2b00      	cmp	r3, #0
 80086b8:	d016      	beq.n	80086e8 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	689b      	ldr	r3, [r3, #8]
 80086be:	4618      	mov	r0, r3
 80086c0:	f7ff fad7 	bl	8007c72 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80086c4:	f7fd fcba 	bl	800603c <HAL_GetTick>
 80086c8:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80086ca:	e008      	b.n	80086de <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80086cc:	f7fd fcb6 	bl	800603c <HAL_GetTick>
 80086d0:	4602      	mov	r2, r0
 80086d2:	68fb      	ldr	r3, [r7, #12]
 80086d4:	1ad3      	subs	r3, r2, r3
 80086d6:	2b02      	cmp	r3, #2
 80086d8:	d901      	bls.n	80086de <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 80086da:	2303      	movs	r3, #3
 80086dc:	e0f2      	b.n	80088c4 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80086de:	f7ff fbd1 	bl	8007e84 <LL_RCC_IsActiveFlag_HPRE>
 80086e2:	4603      	mov	r3, r0
 80086e4:	2b00      	cmp	r3, #0
 80086e6:	d0f1      	beq.n	80086cc <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	f003 0320 	and.w	r3, r3, #32
 80086f0:	2b00      	cmp	r3, #0
 80086f2:	d016      	beq.n	8008722 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	695b      	ldr	r3, [r3, #20]
 80086f8:	4618      	mov	r0, r3
 80086fa:	f7ff face 	bl	8007c9a <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80086fe:	f7fd fc9d 	bl	800603c <HAL_GetTick>
 8008702:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8008704:	e008      	b.n	8008718 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8008706:	f7fd fc99 	bl	800603c <HAL_GetTick>
 800870a:	4602      	mov	r2, r0
 800870c:	68fb      	ldr	r3, [r7, #12]
 800870e:	1ad3      	subs	r3, r2, r3
 8008710:	2b02      	cmp	r3, #2
 8008712:	d901      	bls.n	8008718 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8008714:	2303      	movs	r3, #3
 8008716:	e0d5      	b.n	80088c4 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8008718:	f7ff fbc6 	bl	8007ea8 <LL_RCC_IsActiveFlag_C2HPRE>
 800871c:	4603      	mov	r3, r0
 800871e:	2b00      	cmp	r3, #0
 8008720:	d0f1      	beq.n	8008706 <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800872a:	2b00      	cmp	r3, #0
 800872c:	d016      	beq.n	800875c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	699b      	ldr	r3, [r3, #24]
 8008732:	4618      	mov	r0, r3
 8008734:	f7ff fac7 	bl	8007cc6 <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8008738:	f7fd fc80 	bl	800603c <HAL_GetTick>
 800873c:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 800873e:	e008      	b.n	8008752 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8008740:	f7fd fc7c 	bl	800603c <HAL_GetTick>
 8008744:	4602      	mov	r2, r0
 8008746:	68fb      	ldr	r3, [r7, #12]
 8008748:	1ad3      	subs	r3, r2, r3
 800874a:	2b02      	cmp	r3, #2
 800874c:	d901      	bls.n	8008752 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 800874e:	2303      	movs	r3, #3
 8008750:	e0b8      	b.n	80088c4 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8008752:	f7ff fbbc 	bl	8007ece <LL_RCC_IsActiveFlag_SHDHPRE>
 8008756:	4603      	mov	r3, r0
 8008758:	2b00      	cmp	r3, #0
 800875a:	d0f1      	beq.n	8008740 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	f003 0304 	and.w	r3, r3, #4
 8008764:	2b00      	cmp	r3, #0
 8008766:	d016      	beq.n	8008796 <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	68db      	ldr	r3, [r3, #12]
 800876c:	4618      	mov	r0, r3
 800876e:	f7ff fac1 	bl	8007cf4 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8008772:	f7fd fc63 	bl	800603c <HAL_GetTick>
 8008776:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8008778:	e008      	b.n	800878c <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800877a:	f7fd fc5f 	bl	800603c <HAL_GetTick>
 800877e:	4602      	mov	r2, r0
 8008780:	68fb      	ldr	r3, [r7, #12]
 8008782:	1ad3      	subs	r3, r2, r3
 8008784:	2b02      	cmp	r3, #2
 8008786:	d901      	bls.n	800878c <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8008788:	2303      	movs	r3, #3
 800878a:	e09b      	b.n	80088c4 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 800878c:	f7ff fbb2 	bl	8007ef4 <LL_RCC_IsActiveFlag_PPRE1>
 8008790:	4603      	mov	r3, r0
 8008792:	2b00      	cmp	r3, #0
 8008794:	d0f1      	beq.n	800877a <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	f003 0308 	and.w	r3, r3, #8
 800879e:	2b00      	cmp	r3, #0
 80087a0:	d017      	beq.n	80087d2 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	691b      	ldr	r3, [r3, #16]
 80087a6:	00db      	lsls	r3, r3, #3
 80087a8:	4618      	mov	r0, r3
 80087aa:	f7ff fab7 	bl	8007d1c <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80087ae:	f7fd fc45 	bl	800603c <HAL_GetTick>
 80087b2:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 80087b4:	e008      	b.n	80087c8 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80087b6:	f7fd fc41 	bl	800603c <HAL_GetTick>
 80087ba:	4602      	mov	r2, r0
 80087bc:	68fb      	ldr	r3, [r7, #12]
 80087be:	1ad3      	subs	r3, r2, r3
 80087c0:	2b02      	cmp	r3, #2
 80087c2:	d901      	bls.n	80087c8 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 80087c4:	2303      	movs	r3, #3
 80087c6:	e07d      	b.n	80088c4 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 80087c8:	f7ff fba6 	bl	8007f18 <LL_RCC_IsActiveFlag_PPRE2>
 80087cc:	4603      	mov	r3, r0
 80087ce:	2b00      	cmp	r3, #0
 80087d0:	d0f1      	beq.n	80087b6 <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	f003 0301 	and.w	r3, r3, #1
 80087da:	2b00      	cmp	r3, #0
 80087dc:	d043      	beq.n	8008866 <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	685b      	ldr	r3, [r3, #4]
 80087e2:	2b02      	cmp	r3, #2
 80087e4:	d106      	bne.n	80087f4 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 80087e6:	f7ff f857 	bl	8007898 <LL_RCC_HSE_IsReady>
 80087ea:	4603      	mov	r3, r0
 80087ec:	2b00      	cmp	r3, #0
 80087ee:	d11e      	bne.n	800882e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80087f0:	2301      	movs	r3, #1
 80087f2:	e067      	b.n	80088c4 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	685b      	ldr	r3, [r3, #4]
 80087f8:	2b03      	cmp	r3, #3
 80087fa:	d106      	bne.n	800880a <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 80087fc:	f7ff faff 	bl	8007dfe <LL_RCC_PLL_IsReady>
 8008800:	4603      	mov	r3, r0
 8008802:	2b00      	cmp	r3, #0
 8008804:	d113      	bne.n	800882e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8008806:	2301      	movs	r3, #1
 8008808:	e05c      	b.n	80088c4 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	685b      	ldr	r3, [r3, #4]
 800880e:	2b00      	cmp	r3, #0
 8008810:	d106      	bne.n	8008820 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8008812:	f7ff f9bf 	bl	8007b94 <LL_RCC_MSI_IsReady>
 8008816:	4603      	mov	r3, r0
 8008818:	2b00      	cmp	r3, #0
 800881a:	d108      	bne.n	800882e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800881c:	2301      	movs	r3, #1
 800881e:	e051      	b.n	80088c4 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8008820:	f7ff f86a 	bl	80078f8 <LL_RCC_HSI_IsReady>
 8008824:	4603      	mov	r3, r0
 8008826:	2b00      	cmp	r3, #0
 8008828:	d101      	bne.n	800882e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800882a:	2301      	movs	r3, #1
 800882c:	e04a      	b.n	80088c4 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	685b      	ldr	r3, [r3, #4]
 8008832:	4618      	mov	r0, r3
 8008834:	f7ff f9fd 	bl	8007c32 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008838:	f7fd fc00 	bl	800603c <HAL_GetTick>
 800883c:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800883e:	e00a      	b.n	8008856 <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008840:	f7fd fbfc 	bl	800603c <HAL_GetTick>
 8008844:	4602      	mov	r2, r0
 8008846:	68fb      	ldr	r3, [r7, #12]
 8008848:	1ad3      	subs	r3, r2, r3
 800884a:	f241 3288 	movw	r2, #5000	; 0x1388
 800884e:	4293      	cmp	r3, r2
 8008850:	d901      	bls.n	8008856 <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8008852:	2303      	movs	r3, #3
 8008854:	e036      	b.n	80088c4 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008856:	f7ff fa00 	bl	8007c5a <LL_RCC_GetSysClkSource>
 800885a:	4602      	mov	r2, r0
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	685b      	ldr	r3, [r3, #4]
 8008860:	009b      	lsls	r3, r3, #2
 8008862:	429a      	cmp	r2, r3
 8008864:	d1ec      	bne.n	8008840 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8008866:	4b19      	ldr	r3, [pc, #100]	; (80088cc <HAL_RCC_ClockConfig+0x278>)
 8008868:	681b      	ldr	r3, [r3, #0]
 800886a:	f003 0307 	and.w	r3, r3, #7
 800886e:	683a      	ldr	r2, [r7, #0]
 8008870:	429a      	cmp	r2, r3
 8008872:	d21b      	bcs.n	80088ac <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008874:	4b15      	ldr	r3, [pc, #84]	; (80088cc <HAL_RCC_ClockConfig+0x278>)
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	f023 0207 	bic.w	r2, r3, #7
 800887c:	4913      	ldr	r1, [pc, #76]	; (80088cc <HAL_RCC_ClockConfig+0x278>)
 800887e:	683b      	ldr	r3, [r7, #0]
 8008880:	4313      	orrs	r3, r2
 8008882:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008884:	f7fd fbda 	bl	800603c <HAL_GetTick>
 8008888:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800888a:	e008      	b.n	800889e <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800888c:	f7fd fbd6 	bl	800603c <HAL_GetTick>
 8008890:	4602      	mov	r2, r0
 8008892:	68fb      	ldr	r3, [r7, #12]
 8008894:	1ad3      	subs	r3, r2, r3
 8008896:	2b02      	cmp	r3, #2
 8008898:	d901      	bls.n	800889e <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 800889a:	2303      	movs	r3, #3
 800889c:	e012      	b.n	80088c4 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800889e:	4b0b      	ldr	r3, [pc, #44]	; (80088cc <HAL_RCC_ClockConfig+0x278>)
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	f003 0307 	and.w	r3, r3, #7
 80088a6:	683a      	ldr	r2, [r7, #0]
 80088a8:	429a      	cmp	r2, r3
 80088aa:	d1ef      	bne.n	800888c <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80088ac:	f000 f87c 	bl	80089a8 <HAL_RCC_GetHCLKFreq>
 80088b0:	4602      	mov	r2, r0
 80088b2:	4b07      	ldr	r3, [pc, #28]	; (80088d0 <HAL_RCC_ClockConfig+0x27c>)
 80088b4:	601a      	str	r2, [r3, #0]
  
  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 80088b6:	f7fd fbcd 	bl	8006054 <HAL_GetTickPrio>
 80088ba:	4603      	mov	r3, r0
 80088bc:	4618      	mov	r0, r3
 80088be:	f7fd f9ed 	bl	8005c9c <HAL_InitTick>
 80088c2:	4603      	mov	r3, r0
}
 80088c4:	4618      	mov	r0, r3
 80088c6:	3710      	adds	r7, #16
 80088c8:	46bd      	mov	sp, r7
 80088ca:	bd80      	pop	{r7, pc}
 80088cc:	58004000 	.word	0x58004000
 80088d0:	20000014 	.word	0x20000014

080088d4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80088d4:	b590      	push	{r4, r7, lr}
 80088d6:	b085      	sub	sp, #20
 80088d8:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq, pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80088da:	f7ff f9be 	bl	8007c5a <LL_RCC_GetSysClkSource>
 80088de:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	2b00      	cmp	r3, #0
 80088e4:	d10a      	bne.n	80088fc <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 80088e6:	f7ff f97a 	bl	8007bde <LL_RCC_MSI_GetRange>
 80088ea:	4603      	mov	r3, r0
 80088ec:	091b      	lsrs	r3, r3, #4
 80088ee:	f003 030f 	and.w	r3, r3, #15
 80088f2:	4a2a      	ldr	r2, [pc, #168]	; (800899c <HAL_RCC_GetSysClockFreq+0xc8>)
 80088f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80088f8:	60fb      	str	r3, [r7, #12]
 80088fa:	e04a      	b.n	8008992 <HAL_RCC_GetSysClockFreq+0xbe>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	2b04      	cmp	r3, #4
 8008900:	d102      	bne.n	8008908 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8008902:	4b27      	ldr	r3, [pc, #156]	; (80089a0 <HAL_RCC_GetSysClockFreq+0xcc>)
 8008904:	60fb      	str	r3, [r7, #12]
 8008906:	e044      	b.n	8008992 <HAL_RCC_GetSysClockFreq+0xbe>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	2b08      	cmp	r3, #8
 800890c:	d10a      	bne.n	8008924 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800890e:	f7fe ff93 	bl	8007838 <LL_RCC_HSE_IsEnabledDiv2>
 8008912:	4603      	mov	r3, r0
 8008914:	2b01      	cmp	r3, #1
 8008916:	d102      	bne.n	800891e <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8008918:	4b21      	ldr	r3, [pc, #132]	; (80089a0 <HAL_RCC_GetSysClockFreq+0xcc>)
 800891a:	60fb      	str	r3, [r7, #12]
 800891c:	e039      	b.n	8008992 <HAL_RCC_GetSysClockFreq+0xbe>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 800891e:	4b21      	ldr	r3, [pc, #132]	; (80089a4 <HAL_RCC_GetSysClockFreq+0xd0>)
 8008920:	60fb      	str	r3, [r7, #12]
 8008922:	e036      	b.n	8008992 <HAL_RCC_GetSysClockFreq+0xbe>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8008924:	f7ff faa2 	bl	8007e6c <LL_RCC_PLL_GetMainSource>
 8008928:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 800892a:	683b      	ldr	r3, [r7, #0]
 800892c:	2b02      	cmp	r3, #2
 800892e:	d002      	beq.n	8008936 <HAL_RCC_GetSysClockFreq+0x62>
 8008930:	2b03      	cmp	r3, #3
 8008932:	d003      	beq.n	800893c <HAL_RCC_GetSysClockFreq+0x68>
 8008934:	e00d      	b.n	8008952 <HAL_RCC_GetSysClockFreq+0x7e>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8008936:	4b1a      	ldr	r3, [pc, #104]	; (80089a0 <HAL_RCC_GetSysClockFreq+0xcc>)
 8008938:	60bb      	str	r3, [r7, #8]
        break;
 800893a:	e015      	b.n	8008968 <HAL_RCC_GetSysClockFreq+0x94>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800893c:	f7fe ff7c 	bl	8007838 <LL_RCC_HSE_IsEnabledDiv2>
 8008940:	4603      	mov	r3, r0
 8008942:	2b01      	cmp	r3, #1
 8008944:	d102      	bne.n	800894c <HAL_RCC_GetSysClockFreq+0x78>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8008946:	4b16      	ldr	r3, [pc, #88]	; (80089a0 <HAL_RCC_GetSysClockFreq+0xcc>)
 8008948:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 800894a:	e00d      	b.n	8008968 <HAL_RCC_GetSysClockFreq+0x94>
          pllinputfreq = HSE_VALUE;
 800894c:	4b15      	ldr	r3, [pc, #84]	; (80089a4 <HAL_RCC_GetSysClockFreq+0xd0>)
 800894e:	60bb      	str	r3, [r7, #8]
        break;
 8008950:	e00a      	b.n	8008968 <HAL_RCC_GetSysClockFreq+0x94>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8008952:	f7ff f944 	bl	8007bde <LL_RCC_MSI_GetRange>
 8008956:	4603      	mov	r3, r0
 8008958:	091b      	lsrs	r3, r3, #4
 800895a:	f003 030f 	and.w	r3, r3, #15
 800895e:	4a0f      	ldr	r2, [pc, #60]	; (800899c <HAL_RCC_GetSysClockFreq+0xc8>)
 8008960:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008964:	60bb      	str	r3, [r7, #8]
        break;
 8008966:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
 8008968:	f7ff fa5b 	bl	8007e22 <LL_RCC_PLL_GetN>
 800896c:	4602      	mov	r2, r0
 800896e:	68bb      	ldr	r3, [r7, #8]
 8008970:	fb03 f402 	mul.w	r4, r3, r2
 8008974:	f7ff fa6e 	bl	8007e54 <LL_RCC_PLL_GetDivider>
 8008978:	4603      	mov	r3, r0
 800897a:	091b      	lsrs	r3, r3, #4
 800897c:	3301      	adds	r3, #1
 800897e:	fbb4 f4f3 	udiv	r4, r4, r3
 8008982:	f7ff fa5b 	bl	8007e3c <LL_RCC_PLL_GetR>
 8008986:	4603      	mov	r3, r0
 8008988:	0f5b      	lsrs	r3, r3, #29
 800898a:	3301      	adds	r3, #1
 800898c:	fbb4 f3f3 	udiv	r3, r4, r3
 8008990:	60fb      	str	r3, [r7, #12]
  }

  return sysclockfreq;
 8008992:	68fb      	ldr	r3, [r7, #12]
}
 8008994:	4618      	mov	r0, r3
 8008996:	3714      	adds	r7, #20
 8008998:	46bd      	mov	sp, r7
 800899a:	bd90      	pop	{r4, r7, pc}
 800899c:	080177e0 	.word	0x080177e0
 80089a0:	00f42400 	.word	0x00f42400
 80089a4:	01e84800 	.word	0x01e84800

080089a8 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80089a8:	b598      	push	{r3, r4, r7, lr}
 80089aa:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 80089ac:	f7ff ff92 	bl	80088d4 <HAL_RCC_GetSysClockFreq>
 80089b0:	4604      	mov	r4, r0
 80089b2:	f7ff f9c7 	bl	8007d44 <LL_RCC_GetAHBPrescaler>
 80089b6:	4603      	mov	r3, r0
 80089b8:	091b      	lsrs	r3, r3, #4
 80089ba:	f003 030f 	and.w	r3, r3, #15
 80089be:	4a03      	ldr	r2, [pc, #12]	; (80089cc <HAL_RCC_GetHCLKFreq+0x24>)
 80089c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80089c4:	fbb4 f3f3 	udiv	r3, r4, r3
}
 80089c8:	4618      	mov	r0, r3
 80089ca:	bd98      	pop	{r3, r4, r7, pc}
 80089cc:	08017780 	.word	0x08017780

080089d0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80089d0:	b598      	push	{r3, r4, r7, lr}
 80089d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 80089d4:	f7ff ffe8 	bl	80089a8 <HAL_RCC_GetHCLKFreq>
 80089d8:	4604      	mov	r4, r0
 80089da:	f7ff f9da 	bl	8007d92 <LL_RCC_GetAPB1Prescaler>
 80089de:	4603      	mov	r3, r0
 80089e0:	0a1b      	lsrs	r3, r3, #8
 80089e2:	f003 0307 	and.w	r3, r3, #7
 80089e6:	4a04      	ldr	r2, [pc, #16]	; (80089f8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80089e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80089ec:	f003 031f 	and.w	r3, r3, #31
 80089f0:	fa24 f303 	lsr.w	r3, r4, r3
}
 80089f4:	4618      	mov	r0, r3
 80089f6:	bd98      	pop	{r3, r4, r7, pc}
 80089f8:	080177c0 	.word	0x080177c0

080089fc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80089fc:	b598      	push	{r3, r4, r7, lr}
 80089fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8008a00:	f7ff ffd2 	bl	80089a8 <HAL_RCC_GetHCLKFreq>
 8008a04:	4604      	mov	r4, r0
 8008a06:	f7ff f9d0 	bl	8007daa <LL_RCC_GetAPB2Prescaler>
 8008a0a:	4603      	mov	r3, r0
 8008a0c:	0adb      	lsrs	r3, r3, #11
 8008a0e:	f003 0307 	and.w	r3, r3, #7
 8008a12:	4a04      	ldr	r2, [pc, #16]	; (8008a24 <HAL_RCC_GetPCLK2Freq+0x28>)
 8008a14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008a18:	f003 031f 	and.w	r3, r3, #31
 8008a1c:	fa24 f303 	lsr.w	r3, r4, r3
}
 8008a20:	4618      	mov	r0, r3
 8008a22:	bd98      	pop	{r3, r4, r7, pc}
 8008a24:	080177c0 	.word	0x080177c0

08008a28 <HAL_RCC_GetClockConfig>:
  *                           will be configured.
  * @param  pFLatency         Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8008a28:	b580      	push	{r7, lr}
 8008a2a:	b082      	sub	sp, #8
 8008a2c:	af00      	add	r7, sp, #0
 8008a2e:	6078      	str	r0, [r7, #4]
 8008a30:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2 |  \
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	226f      	movs	r2, #111	; 0x6f
 8008a36:	601a      	str	r2, [r3, #0]
                                  RCC_CLOCKTYPE_HCLK2 | RCC_CLOCKTYPE_HCLK4);

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = LL_RCC_GetSysClkSource();
 8008a38:	f7ff f90f 	bl	8007c5a <LL_RCC_GetSysClkSource>
 8008a3c:	4602      	mov	r2, r0
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = LL_RCC_GetAHBPrescaler();
 8008a42:	f7ff f97f 	bl	8007d44 <LL_RCC_GetAHBPrescaler>
 8008a46:	4602      	mov	r2, r0
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = LL_RCC_GetAPB1Prescaler();
 8008a4c:	f7ff f9a1 	bl	8007d92 <LL_RCC_GetAPB1Prescaler>
 8008a50:	4602      	mov	r2, r0
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = LL_RCC_GetAPB2Prescaler();
 8008a56:	f7ff f9a8 	bl	8007daa <LL_RCC_GetAPB2Prescaler>
 8008a5a:	4602      	mov	r2, r0
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	611a      	str	r2, [r3, #16]

  /* Get the AHBCLK2Divider configuration ------------------------------------*/
  RCC_ClkInitStruct->AHBCLK2Divider = LL_C2_RCC_GetAHBPrescaler();
 8008a60:	f7ff f97c 	bl	8007d5c <LL_C2_RCC_GetAHBPrescaler>
 8008a64:	4602      	mov	r2, r0
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	615a      	str	r2, [r3, #20]

  /* Get the AHBCLK4Divider configuration ------------------------------------*/
  RCC_ClkInitStruct->AHBCLK4Divider = LL_RCC_GetAHB4Prescaler();
 8008a6a:	f7ff f984 	bl	8007d76 <LL_RCC_GetAHB4Prescaler>
 8008a6e:	4602      	mov	r2, r0
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	619a      	str	r2, [r3, #24]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8008a74:	4b04      	ldr	r3, [pc, #16]	; (8008a88 <HAL_RCC_GetClockConfig+0x60>)
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	f003 0207 	and.w	r2, r3, #7
 8008a7c:	683b      	ldr	r3, [r7, #0]
 8008a7e:	601a      	str	r2, [r3, #0]
}
 8008a80:	bf00      	nop
 8008a82:	3708      	adds	r7, #8
 8008a84:	46bd      	mov	sp, r7
 8008a86:	bd80      	pop	{r7, pc}
 8008a88:	58004000 	.word	0x58004000

08008a8c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8008a8c:	b590      	push	{r4, r7, lr}
 8008a8e:	b085      	sub	sp, #20
 8008a90:	af00      	add	r7, sp, #0
 8008a92:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	2bb0      	cmp	r3, #176	; 0xb0
 8008a98:	d903      	bls.n	8008aa2 <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 8008a9a:	4b15      	ldr	r3, [pc, #84]	; (8008af0 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8008a9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a9e:	60fb      	str	r3, [r7, #12]
 8008aa0:	e007      	b.n	8008ab2 <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	091b      	lsrs	r3, r3, #4
 8008aa6:	f003 030f 	and.w	r3, r3, #15
 8008aaa:	4a11      	ldr	r2, [pc, #68]	; (8008af0 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8008aac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008ab0:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 8008ab2:	f7ff f960 	bl	8007d76 <LL_RCC_GetAHB4Prescaler>
 8008ab6:	4603      	mov	r3, r0
 8008ab8:	091b      	lsrs	r3, r3, #4
 8008aba:	f003 030f 	and.w	r3, r3, #15
 8008abe:	4a0d      	ldr	r2, [pc, #52]	; (8008af4 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 8008ac0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008ac4:	68fa      	ldr	r2, [r7, #12]
 8008ac6:	fbb2 f3f3 	udiv	r3, r2, r3
 8008aca:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8008acc:	68bb      	ldr	r3, [r7, #8]
 8008ace:	4a0a      	ldr	r2, [pc, #40]	; (8008af8 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 8008ad0:	fba2 2303 	umull	r2, r3, r2, r3
 8008ad4:	0c9c      	lsrs	r4, r3, #18
 8008ad6:	f7fe fea1 	bl	800781c <HAL_PWREx_GetVoltageRange>
 8008ada:	4603      	mov	r3, r0
 8008adc:	4619      	mov	r1, r3
 8008ade:	4620      	mov	r0, r4
 8008ae0:	f000 f80c 	bl	8008afc <RCC_SetFlashLatency>
 8008ae4:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif
}
 8008ae6:	4618      	mov	r0, r3
 8008ae8:	3714      	adds	r7, #20
 8008aea:	46bd      	mov	sp, r7
 8008aec:	bd90      	pop	{r4, r7, pc}
 8008aee:	bf00      	nop
 8008af0:	080177e0 	.word	0x080177e0
 8008af4:	08017780 	.word	0x08017780
 8008af8:	431bde83 	.word	0x431bde83

08008afc <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8008afc:	b590      	push	{r4, r7, lr}
 8008afe:	b093      	sub	sp, #76	; 0x4c
 8008b00:	af00      	add	r7, sp, #0
 8008b02:	6078      	str	r0, [r7, #4]
 8008b04:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 8008b06:	4b39      	ldr	r3, [pc, #228]	; (8008bec <RCC_SetFlashLatency+0xf0>)
 8008b08:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8008b0c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8008b0e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 8008b12:	4a37      	ldr	r2, [pc, #220]	; (8008bf0 <RCC_SetFlashLatency+0xf4>)
 8008b14:	f107 031c 	add.w	r3, r7, #28
 8008b18:	ca07      	ldmia	r2, {r0, r1, r2}
 8008b1a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 8008b1e:	4b35      	ldr	r3, [pc, #212]	; (8008bf4 <RCC_SetFlashLatency+0xf8>)
 8008b20:	f107 040c 	add.w	r4, r7, #12
 8008b24:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8008b26:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8008b2a:	2300      	movs	r3, #0
 8008b2c:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8008b2e:	683b      	ldr	r3, [r7, #0]
 8008b30:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008b34:	d11c      	bne.n	8008b70 <RCC_SetFlashLatency+0x74>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8008b36:	2300      	movs	r3, #0
 8008b38:	643b      	str	r3, [r7, #64]	; 0x40
 8008b3a:	e015      	b.n	8008b68 <RCC_SetFlashLatency+0x6c>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8008b3c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008b3e:	009b      	lsls	r3, r3, #2
 8008b40:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8008b44:	4413      	add	r3, r2
 8008b46:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8008b4a:	687a      	ldr	r2, [r7, #4]
 8008b4c:	429a      	cmp	r2, r3
 8008b4e:	d808      	bhi.n	8008b62 <RCC_SetFlashLatency+0x66>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8008b50:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008b52:	009b      	lsls	r3, r3, #2
 8008b54:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8008b58:	4413      	add	r3, r2
 8008b5a:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8008b5e:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8008b60:	e022      	b.n	8008ba8 <RCC_SetFlashLatency+0xac>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8008b62:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008b64:	3301      	adds	r3, #1
 8008b66:	643b      	str	r3, [r7, #64]	; 0x40
 8008b68:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008b6a:	2b03      	cmp	r3, #3
 8008b6c:	d9e6      	bls.n	8008b3c <RCC_SetFlashLatency+0x40>
 8008b6e:	e01b      	b.n	8008ba8 <RCC_SetFlashLatency+0xac>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8008b70:	2300      	movs	r3, #0
 8008b72:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008b74:	e015      	b.n	8008ba2 <RCC_SetFlashLatency+0xa6>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8008b76:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008b78:	009b      	lsls	r3, r3, #2
 8008b7a:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8008b7e:	4413      	add	r3, r2
 8008b80:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8008b84:	687a      	ldr	r2, [r7, #4]
 8008b86:	429a      	cmp	r2, r3
 8008b88:	d808      	bhi.n	8008b9c <RCC_SetFlashLatency+0xa0>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8008b8a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008b8c:	009b      	lsls	r3, r3, #2
 8008b8e:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8008b92:	4413      	add	r3, r2
 8008b94:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8008b98:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8008b9a:	e005      	b.n	8008ba8 <RCC_SetFlashLatency+0xac>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8008b9c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008b9e:	3301      	adds	r3, #1
 8008ba0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008ba2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008ba4:	2b02      	cmp	r3, #2
 8008ba6:	d9e6      	bls.n	8008b76 <RCC_SetFlashLatency+0x7a>
      break;
    }
  }
#endif

  __HAL_FLASH_SET_LATENCY(latency);
 8008ba8:	4b13      	ldr	r3, [pc, #76]	; (8008bf8 <RCC_SetFlashLatency+0xfc>)
 8008baa:	681b      	ldr	r3, [r3, #0]
 8008bac:	f023 0207 	bic.w	r2, r3, #7
 8008bb0:	4911      	ldr	r1, [pc, #68]	; (8008bf8 <RCC_SetFlashLatency+0xfc>)
 8008bb2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008bb4:	4313      	orrs	r3, r2
 8008bb6:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8008bb8:	f7fd fa40 	bl	800603c <HAL_GetTick>
 8008bbc:	63b8      	str	r0, [r7, #56]	; 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8008bbe:	e008      	b.n	8008bd2 <RCC_SetFlashLatency+0xd6>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8008bc0:	f7fd fa3c 	bl	800603c <HAL_GetTick>
 8008bc4:	4602      	mov	r2, r0
 8008bc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008bc8:	1ad3      	subs	r3, r2, r3
 8008bca:	2b02      	cmp	r3, #2
 8008bcc:	d901      	bls.n	8008bd2 <RCC_SetFlashLatency+0xd6>
    {
      return HAL_TIMEOUT;
 8008bce:	2303      	movs	r3, #3
 8008bd0:	e007      	b.n	8008be2 <RCC_SetFlashLatency+0xe6>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8008bd2:	4b09      	ldr	r3, [pc, #36]	; (8008bf8 <RCC_SetFlashLatency+0xfc>)
 8008bd4:	681b      	ldr	r3, [r3, #0]
 8008bd6:	f003 0307 	and.w	r3, r3, #7
 8008bda:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008bdc:	429a      	cmp	r2, r3
 8008bde:	d1ef      	bne.n	8008bc0 <RCC_SetFlashLatency+0xc4>
    }
  }
  return HAL_OK;
 8008be0:	2300      	movs	r3, #0
}
 8008be2:	4618      	mov	r0, r3
 8008be4:	374c      	adds	r7, #76	; 0x4c
 8008be6:	46bd      	mov	sp, r7
 8008be8:	bd90      	pop	{r4, r7, pc}
 8008bea:	bf00      	nop
 8008bec:	080163b8 	.word	0x080163b8
 8008bf0:	080163c8 	.word	0x080163c8
 8008bf4:	080163d4 	.word	0x080163d4
 8008bf8:	58004000 	.word	0x58004000

08008bfc <LL_RCC_LSE_IsEnabled>:
{
 8008bfc:	b480      	push	{r7}
 8008bfe:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 8008c00:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008c04:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008c08:	f003 0301 	and.w	r3, r3, #1
 8008c0c:	2b01      	cmp	r3, #1
 8008c0e:	d101      	bne.n	8008c14 <LL_RCC_LSE_IsEnabled+0x18>
 8008c10:	2301      	movs	r3, #1
 8008c12:	e000      	b.n	8008c16 <LL_RCC_LSE_IsEnabled+0x1a>
 8008c14:	2300      	movs	r3, #0
}
 8008c16:	4618      	mov	r0, r3
 8008c18:	46bd      	mov	sp, r7
 8008c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c1e:	4770      	bx	lr

08008c20 <LL_RCC_LSE_IsReady>:
{
 8008c20:	b480      	push	{r7}
 8008c22:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8008c24:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008c28:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008c2c:	f003 0302 	and.w	r3, r3, #2
 8008c30:	2b02      	cmp	r3, #2
 8008c32:	d101      	bne.n	8008c38 <LL_RCC_LSE_IsReady+0x18>
 8008c34:	2301      	movs	r3, #1
 8008c36:	e000      	b.n	8008c3a <LL_RCC_LSE_IsReady+0x1a>
 8008c38:	2300      	movs	r3, #0
}
 8008c3a:	4618      	mov	r0, r3
 8008c3c:	46bd      	mov	sp, r7
 8008c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c42:	4770      	bx	lr

08008c44 <LL_RCC_SetRFWKPClockSource>:
{
 8008c44:	b480      	push	{r7}
 8008c46:	b083      	sub	sp, #12
 8008c48:	af00      	add	r7, sp, #0
 8008c4a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 8008c4c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008c50:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008c54:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8008c58:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	4313      	orrs	r3, r2
 8008c60:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8008c64:	bf00      	nop
 8008c66:	370c      	adds	r7, #12
 8008c68:	46bd      	mov	sp, r7
 8008c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c6e:	4770      	bx	lr

08008c70 <LL_RCC_SetSMPSClockSource>:
{
 8008c70:	b480      	push	{r7}
 8008c72:	b083      	sub	sp, #12
 8008c74:	af00      	add	r7, sp, #0
 8008c76:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 8008c78:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008c7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c7e:	f023 0203 	bic.w	r2, r3, #3
 8008c82:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	4313      	orrs	r3, r2
 8008c8a:	624b      	str	r3, [r1, #36]	; 0x24
}
 8008c8c:	bf00      	nop
 8008c8e:	370c      	adds	r7, #12
 8008c90:	46bd      	mov	sp, r7
 8008c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c96:	4770      	bx	lr

08008c98 <LL_RCC_SetSMPSPrescaler>:
{
 8008c98:	b480      	push	{r7}
 8008c9a:	b083      	sub	sp, #12
 8008c9c:	af00      	add	r7, sp, #0
 8008c9e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 8008ca0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008ca4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ca6:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8008caa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	4313      	orrs	r3, r2
 8008cb2:	624b      	str	r3, [r1, #36]	; 0x24
}
 8008cb4:	bf00      	nop
 8008cb6:	370c      	adds	r7, #12
 8008cb8:	46bd      	mov	sp, r7
 8008cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cbe:	4770      	bx	lr

08008cc0 <LL_RCC_SetUSARTClockSource>:
{
 8008cc0:	b480      	push	{r7}
 8008cc2:	b083      	sub	sp, #12
 8008cc4:	af00      	add	r7, sp, #0
 8008cc6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 8008cc8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008ccc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008cd0:	f023 0203 	bic.w	r2, r3, #3
 8008cd4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	4313      	orrs	r3, r2
 8008cdc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8008ce0:	bf00      	nop
 8008ce2:	370c      	adds	r7, #12
 8008ce4:	46bd      	mov	sp, r7
 8008ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cea:	4770      	bx	lr

08008cec <LL_RCC_SetLPUARTClockSource>:
{
 8008cec:	b480      	push	{r7}
 8008cee:	b083      	sub	sp, #12
 8008cf0:	af00      	add	r7, sp, #0
 8008cf2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8008cf4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008cf8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008cfc:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8008d00:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	4313      	orrs	r3, r2
 8008d08:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8008d0c:	bf00      	nop
 8008d0e:	370c      	adds	r7, #12
 8008d10:	46bd      	mov	sp, r7
 8008d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d16:	4770      	bx	lr

08008d18 <LL_RCC_SetI2CClockSource>:
{
 8008d18:	b480      	push	{r7}
 8008d1a:	b083      	sub	sp, #12
 8008d1c:	af00      	add	r7, sp, #0
 8008d1e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8008d20:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008d24:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	091b      	lsrs	r3, r3, #4
 8008d2c:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8008d30:	43db      	mvns	r3, r3
 8008d32:	401a      	ands	r2, r3
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	011b      	lsls	r3, r3, #4
 8008d38:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8008d3c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008d40:	4313      	orrs	r3, r2
 8008d42:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8008d46:	bf00      	nop
 8008d48:	370c      	adds	r7, #12
 8008d4a:	46bd      	mov	sp, r7
 8008d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d50:	4770      	bx	lr

08008d52 <LL_RCC_SetLPTIMClockSource>:
{
 8008d52:	b480      	push	{r7}
 8008d54:	b083      	sub	sp, #12
 8008d56:	af00      	add	r7, sp, #0
 8008d58:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8008d5a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008d5e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	0c1b      	lsrs	r3, r3, #16
 8008d66:	041b      	lsls	r3, r3, #16
 8008d68:	43db      	mvns	r3, r3
 8008d6a:	401a      	ands	r2, r3
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	041b      	lsls	r3, r3, #16
 8008d70:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008d74:	4313      	orrs	r3, r2
 8008d76:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8008d7a:	bf00      	nop
 8008d7c:	370c      	adds	r7, #12
 8008d7e:	46bd      	mov	sp, r7
 8008d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d84:	4770      	bx	lr

08008d86 <LL_RCC_SetSAIClockSource>:
{
 8008d86:	b480      	push	{r7}
 8008d88:	b083      	sub	sp, #12
 8008d8a:	af00      	add	r7, sp, #0
 8008d8c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 8008d8e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008d92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008d96:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8008d9a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	4313      	orrs	r3, r2
 8008da2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8008da6:	bf00      	nop
 8008da8:	370c      	adds	r7, #12
 8008daa:	46bd      	mov	sp, r7
 8008dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008db0:	4770      	bx	lr

08008db2 <LL_RCC_SetRNGClockSource>:
{
 8008db2:	b480      	push	{r7}
 8008db4:	b083      	sub	sp, #12
 8008db6:	af00      	add	r7, sp, #0
 8008db8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8008dba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008dbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008dc2:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8008dc6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	4313      	orrs	r3, r2
 8008dce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8008dd2:	bf00      	nop
 8008dd4:	370c      	adds	r7, #12
 8008dd6:	46bd      	mov	sp, r7
 8008dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ddc:	4770      	bx	lr

08008dde <LL_RCC_SetCLK48ClockSource>:
{
 8008dde:	b480      	push	{r7}
 8008de0:	b083      	sub	sp, #12
 8008de2:	af00      	add	r7, sp, #0
 8008de4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 8008de6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008dea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008dee:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8008df2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	4313      	orrs	r3, r2
 8008dfa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8008dfe:	bf00      	nop
 8008e00:	370c      	adds	r7, #12
 8008e02:	46bd      	mov	sp, r7
 8008e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e08:	4770      	bx	lr

08008e0a <LL_RCC_SetUSBClockSource>:
{
 8008e0a:	b580      	push	{r7, lr}
 8008e0c:	b082      	sub	sp, #8
 8008e0e:	af00      	add	r7, sp, #0
 8008e10:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 8008e12:	6878      	ldr	r0, [r7, #4]
 8008e14:	f7ff ffe3 	bl	8008dde <LL_RCC_SetCLK48ClockSource>
}
 8008e18:	bf00      	nop
 8008e1a:	3708      	adds	r7, #8
 8008e1c:	46bd      	mov	sp, r7
 8008e1e:	bd80      	pop	{r7, pc}

08008e20 <LL_RCC_SetADCClockSource>:
{
 8008e20:	b480      	push	{r7}
 8008e22:	b083      	sub	sp, #12
 8008e24:	af00      	add	r7, sp, #0
 8008e26:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8008e28:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008e2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008e30:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8008e34:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	4313      	orrs	r3, r2
 8008e3c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8008e40:	bf00      	nop
 8008e42:	370c      	adds	r7, #12
 8008e44:	46bd      	mov	sp, r7
 8008e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e4a:	4770      	bx	lr

08008e4c <LL_RCC_SetRTCClockSource>:
{
 8008e4c:	b480      	push	{r7}
 8008e4e:	b083      	sub	sp, #12
 8008e50:	af00      	add	r7, sp, #0
 8008e52:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8008e54:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008e58:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008e5c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008e60:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	4313      	orrs	r3, r2
 8008e68:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8008e6c:	bf00      	nop
 8008e6e:	370c      	adds	r7, #12
 8008e70:	46bd      	mov	sp, r7
 8008e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e76:	4770      	bx	lr

08008e78 <LL_RCC_GetRTCClockSource>:
{
 8008e78:	b480      	push	{r7}
 8008e7a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8008e7c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008e80:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008e84:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 8008e88:	4618      	mov	r0, r3
 8008e8a:	46bd      	mov	sp, r7
 8008e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e90:	4770      	bx	lr

08008e92 <LL_RCC_ForceBackupDomainReset>:
{
 8008e92:	b480      	push	{r7}
 8008e94:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8008e96:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008e9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008e9e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008ea2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008ea6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8008eaa:	bf00      	nop
 8008eac:	46bd      	mov	sp, r7
 8008eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eb2:	4770      	bx	lr

08008eb4 <LL_RCC_ReleaseBackupDomainReset>:
{
 8008eb4:	b480      	push	{r7}
 8008eb6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8008eb8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008ebc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008ec0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008ec4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008ec8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8008ecc:	bf00      	nop
 8008ece:	46bd      	mov	sp, r7
 8008ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ed4:	4770      	bx	lr

08008ed6 <LL_RCC_PLLSAI1_Enable>:
{
 8008ed6:	b480      	push	{r7}
 8008ed8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8008eda:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008ee4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8008ee8:	6013      	str	r3, [r2, #0]
}
 8008eea:	bf00      	nop
 8008eec:	46bd      	mov	sp, r7
 8008eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ef2:	4770      	bx	lr

08008ef4 <LL_RCC_PLLSAI1_Disable>:
{
 8008ef4:	b480      	push	{r7}
 8008ef6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8008ef8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008efc:	681b      	ldr	r3, [r3, #0]
 8008efe:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008f02:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8008f06:	6013      	str	r3, [r2, #0]
}
 8008f08:	bf00      	nop
 8008f0a:	46bd      	mov	sp, r7
 8008f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f10:	4770      	bx	lr

08008f12 <LL_RCC_PLLSAI1_IsReady>:
{
 8008f12:	b480      	push	{r7}
 8008f14:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 8008f16:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008f1a:	681b      	ldr	r3, [r3, #0]
 8008f1c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008f20:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008f24:	d101      	bne.n	8008f2a <LL_RCC_PLLSAI1_IsReady+0x18>
 8008f26:	2301      	movs	r3, #1
 8008f28:	e000      	b.n	8008f2c <LL_RCC_PLLSAI1_IsReady+0x1a>
 8008f2a:	2300      	movs	r3, #0
}
 8008f2c:	4618      	mov	r0, r3
 8008f2e:	46bd      	mov	sp, r7
 8008f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f34:	4770      	bx	lr

08008f36 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008f36:	b580      	push	{r7, lr}
 8008f38:	b088      	sub	sp, #32
 8008f3a:	af00      	add	r7, sp, #0
 8008f3c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 8008f3e:	2300      	movs	r3, #0
 8008f40:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8008f42:	2300      	movs	r3, #0
 8008f44:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	681b      	ldr	r3, [r3, #0]
 8008f4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008f4e:	2b00      	cmp	r3, #0
 8008f50:	d033      	beq.n	8008fba <HAL_RCCEx_PeriphCLKConfig+0x84>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f56:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008f5a:	d00c      	beq.n	8008f76 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8008f5c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008f60:	d802      	bhi.n	8008f68 <HAL_RCCEx_PeriphCLKConfig+0x32>
 8008f62:	2b00      	cmp	r3, #0
 8008f64:	d010      	beq.n	8008f88 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8008f66:	e017      	b.n	8008f98 <HAL_RCCEx_PeriphCLKConfig+0x62>
 8008f68:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008f6c:	d017      	beq.n	8008f9e <HAL_RCCEx_PeriphCLKConfig+0x68>
 8008f6e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8008f72:	d016      	beq.n	8008fa2 <HAL_RCCEx_PeriphCLKConfig+0x6c>
 8008f74:	e010      	b.n	8008f98 <HAL_RCCEx_PeriphCLKConfig+0x62>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 8008f76:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008f7a:	68db      	ldr	r3, [r3, #12]
 8008f7c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008f80:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008f84:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 8008f86:	e00d      	b.n	8008fa4 <HAL_RCCEx_PeriphCLKConfig+0x6e>

#if defined(SAI1)
      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	3304      	adds	r3, #4
 8008f8c:	4618      	mov	r0, r3
 8008f8e:	f000 f947 	bl	8009220 <RCCEx_PLLSAI1_ConfigNP>
 8008f92:	4603      	mov	r3, r0
 8008f94:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8008f96:	e005      	b.n	8008fa4 <HAL_RCCEx_PeriphCLKConfig+0x6e>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 8008f98:	2301      	movs	r3, #1
 8008f9a:	77fb      	strb	r3, [r7, #31]
        break;
 8008f9c:	e002      	b.n	8008fa4 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        break;
 8008f9e:	bf00      	nop
 8008fa0:	e000      	b.n	8008fa4 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        break;
 8008fa2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008fa4:	7ffb      	ldrb	r3, [r7, #31]
 8008fa6:	2b00      	cmp	r3, #0
 8008fa8:	d105      	bne.n	8008fb6 <HAL_RCCEx_PeriphCLKConfig+0x80>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008fae:	4618      	mov	r0, r3
 8008fb0:	f7ff fee9 	bl	8008d86 <LL_RCC_SetSAIClockSource>
 8008fb4:	e001      	b.n	8008fba <HAL_RCCEx_PeriphCLKConfig+0x84>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008fb6:	7ffb      	ldrb	r3, [r7, #31]
 8008fb8:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	681b      	ldr	r3, [r3, #0]
 8008fbe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008fc2:	2b00      	cmp	r3, #0
 8008fc4:	d046      	beq.n	8009054 <HAL_RCCEx_PeriphCLKConfig+0x11e>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 8008fc6:	f7ff ff57 	bl	8008e78 <LL_RCC_GetRTCClockSource>
 8008fca:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008fd0:	69ba      	ldr	r2, [r7, #24]
 8008fd2:	429a      	cmp	r2, r3
 8008fd4:	d03c      	beq.n	8009050 <HAL_RCCEx_PeriphCLKConfig+0x11a>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8008fd6:	f7fe fc11 	bl	80077fc <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 8008fda:	69bb      	ldr	r3, [r7, #24]
 8008fdc:	2b00      	cmp	r3, #0
 8008fde:	d105      	bne.n	8008fec <HAL_RCCEx_PeriphCLKConfig+0xb6>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008fe4:	4618      	mov	r0, r3
 8008fe6:	f7ff ff31 	bl	8008e4c <LL_RCC_SetRTCClockSource>
 8008fea:	e02e      	b.n	800904a <HAL_RCCEx_PeriphCLKConfig+0x114>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 8008fec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008ff0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008ff4:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 8008ff6:	f7ff ff4c 	bl	8008e92 <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 8008ffa:	f7ff ff5b 	bl	8008eb4 <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 8008ffe:	697b      	ldr	r3, [r7, #20]
 8009000:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009008:	4313      	orrs	r3, r2
 800900a:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 800900c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8009010:	697b      	ldr	r3, [r7, #20]
 8009012:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 8009016:	f7ff fdf1 	bl	8008bfc <LL_RCC_LSE_IsEnabled>
 800901a:	4603      	mov	r3, r0
 800901c:	2b01      	cmp	r3, #1
 800901e:	d114      	bne.n	800904a <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8009020:	f7fd f80c 	bl	800603c <HAL_GetTick>
 8009024:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 8009026:	e00b      	b.n	8009040 <HAL_RCCEx_PeriphCLKConfig+0x10a>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009028:	f7fd f808 	bl	800603c <HAL_GetTick>
 800902c:	4602      	mov	r2, r0
 800902e:	693b      	ldr	r3, [r7, #16]
 8009030:	1ad3      	subs	r3, r2, r3
 8009032:	f241 3288 	movw	r2, #5000	; 0x1388
 8009036:	4293      	cmp	r3, r2
 8009038:	d902      	bls.n	8009040 <HAL_RCCEx_PeriphCLKConfig+0x10a>
            {
              ret = HAL_TIMEOUT;
 800903a:	2303      	movs	r3, #3
 800903c:	77fb      	strb	r3, [r7, #31]
              break;
 800903e:	e004      	b.n	800904a <HAL_RCCEx_PeriphCLKConfig+0x114>
          while (LL_RCC_LSE_IsReady() != 1U)
 8009040:	f7ff fdee 	bl	8008c20 <LL_RCC_LSE_IsReady>
 8009044:	4603      	mov	r3, r0
 8009046:	2b01      	cmp	r3, #1
 8009048:	d1ee      	bne.n	8009028 <HAL_RCCEx_PeriphCLKConfig+0xf2>
          }
        }
      }

      /* set overall return value */
      status = ret;
 800904a:	7ffb      	ldrb	r3, [r7, #31]
 800904c:	77bb      	strb	r3, [r7, #30]
 800904e:	e001      	b.n	8009054 <HAL_RCCEx_PeriphCLKConfig+0x11e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009050:	7ffb      	ldrb	r3, [r7, #31]
 8009052:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	681b      	ldr	r3, [r3, #0]
 8009058:	f003 0301 	and.w	r3, r3, #1
 800905c:	2b00      	cmp	r3, #0
 800905e:	d004      	beq.n	800906a <HAL_RCCEx_PeriphCLKConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	699b      	ldr	r3, [r3, #24]
 8009064:	4618      	mov	r0, r3
 8009066:	f7ff fe2b 	bl	8008cc0 <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	681b      	ldr	r3, [r3, #0]
 800906e:	f003 0302 	and.w	r3, r3, #2
 8009072:	2b00      	cmp	r3, #0
 8009074:	d004      	beq.n	8009080 <HAL_RCCEx_PeriphCLKConfig+0x14a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	69db      	ldr	r3, [r3, #28]
 800907a:	4618      	mov	r0, r3
 800907c:	f7ff fe36 	bl	8008cec <LL_RCC_SetLPUARTClockSource>
  }
#endif

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	681b      	ldr	r3, [r3, #0]
 8009084:	f003 0310 	and.w	r3, r3, #16
 8009088:	2b00      	cmp	r3, #0
 800908a:	d004      	beq.n	8009096 <HAL_RCCEx_PeriphCLKConfig+0x160>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009090:	4618      	mov	r0, r3
 8009092:	f7ff fe5e 	bl	8008d52 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	681b      	ldr	r3, [r3, #0]
 800909a:	f003 0320 	and.w	r3, r3, #32
 800909e:	2b00      	cmp	r3, #0
 80090a0:	d004      	beq.n	80090ac <HAL_RCCEx_PeriphCLKConfig+0x176>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090a6:	4618      	mov	r0, r3
 80090a8:	f7ff fe53 	bl	8008d52 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	681b      	ldr	r3, [r3, #0]
 80090b0:	f003 0304 	and.w	r3, r3, #4
 80090b4:	2b00      	cmp	r3, #0
 80090b6:	d004      	beq.n	80090c2 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	6a1b      	ldr	r3, [r3, #32]
 80090bc:	4618      	mov	r0, r3
 80090be:	f7ff fe2b 	bl	8008d18 <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	681b      	ldr	r3, [r3, #0]
 80090c6:	f003 0308 	and.w	r3, r3, #8
 80090ca:	2b00      	cmp	r3, #0
 80090cc:	d004      	beq.n	80090d8 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090d2:	4618      	mov	r0, r3
 80090d4:	f7ff fe20 	bl	8008d18 <LL_RCC_SetI2CClockSource>
  }
#endif

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	681b      	ldr	r3, [r3, #0]
 80090dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80090e0:	2b00      	cmp	r3, #0
 80090e2:	d022      	beq.n	800912a <HAL_RCCEx_PeriphCLKConfig+0x1f4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80090e8:	4618      	mov	r0, r3
 80090ea:	f7ff fe8e 	bl	8008e0a <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80090f2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80090f6:	d107      	bne.n	8009108 <HAL_RCCEx_PeriphCLKConfig+0x1d2>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 80090f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80090fc:	68db      	ldr	r3, [r3, #12]
 80090fe:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8009102:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009106:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
  if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800910c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009110:	d10b      	bne.n	800912a <HAL_RCCEx_PeriphCLKConfig+0x1f4>
  {
    /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
    ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	3304      	adds	r3, #4
 8009116:	4618      	mov	r0, r3
 8009118:	f000 f8dd 	bl	80092d6 <RCCEx_PLLSAI1_ConfigNQ>
 800911c:	4603      	mov	r3, r0
 800911e:	77fb      	strb	r3, [r7, #31]

    if (ret != HAL_OK)
 8009120:	7ffb      	ldrb	r3, [r7, #31]
 8009122:	2b00      	cmp	r3, #0
 8009124:	d001      	beq.n	800912a <HAL_RCCEx_PeriphCLKConfig+0x1f4>
    {
      /* set overall return value */
      status = ret;
 8009126:	7ffb      	ldrb	r3, [r7, #31]
 8009128:	77bb      	strb	r3, [r7, #30]
#endif
  }
#endif

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	681b      	ldr	r3, [r3, #0]
 800912e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009132:	2b00      	cmp	r3, #0
 8009134:	d02b      	beq.n	800918e <HAL_RCCEx_PeriphCLKConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800913a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800913e:	d008      	beq.n	8009152 <HAL_RCCEx_PeriphCLKConfig+0x21c>
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009144:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009148:	d003      	beq.n	8009152 <HAL_RCCEx_PeriphCLKConfig+0x21c>
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800914e:	2b00      	cmp	r3, #0
 8009150:	d105      	bne.n	800915e <HAL_RCCEx_PeriphCLKConfig+0x228>
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009156:	4618      	mov	r0, r3
 8009158:	f7ff fe2b 	bl	8008db2 <LL_RCC_SetRNGClockSource>
 800915c:	e00a      	b.n	8009174 <HAL_RCCEx_PeriphCLKConfig+0x23e>
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009162:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009166:	60fb      	str	r3, [r7, #12]
 8009168:	2000      	movs	r0, #0
 800916a:	f7ff fe22 	bl	8008db2 <LL_RCC_SetRNGClockSource>
 800916e:	68f8      	ldr	r0, [r7, #12]
 8009170:	f7ff fe35 	bl	8008dde <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009178:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 800917c:	d107      	bne.n	800918e <HAL_RCCEx_PeriphCLKConfig+0x258>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 800917e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009182:	68db      	ldr	r3, [r3, #12]
 8009184:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8009188:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800918c:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	681b      	ldr	r3, [r3, #0]
 8009192:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009196:	2b00      	cmp	r3, #0
 8009198:	d022      	beq.n	80091e0 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800919e:	4618      	mov	r0, r3
 80091a0:	f7ff fe3e 	bl	8008e20 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80091a8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80091ac:	d107      	bne.n	80091be <HAL_RCCEx_PeriphCLKConfig+0x288>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80091ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80091b2:	68db      	ldr	r3, [r3, #12]
 80091b4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80091b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80091bc:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
  if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80091c2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80091c6:	d10b      	bne.n	80091e0 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
    ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	3304      	adds	r3, #4
 80091cc:	4618      	mov	r0, r3
 80091ce:	f000 f8dd 	bl	800938c <RCCEx_PLLSAI1_ConfigNR>
 80091d2:	4603      	mov	r3, r0
 80091d4:	77fb      	strb	r3, [r7, #31]

    if (ret != HAL_OK)
 80091d6:	7ffb      	ldrb	r3, [r7, #31]
 80091d8:	2b00      	cmp	r3, #0
 80091da:	d001      	beq.n	80091e0 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
    {
      /* set overall return value */
      status = ret;
 80091dc:	7ffb      	ldrb	r3, [r7, #31]
 80091de:	77bb      	strb	r3, [r7, #30]
  }
#endif
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	681b      	ldr	r3, [r3, #0]
 80091e4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80091e8:	2b00      	cmp	r3, #0
 80091ea:	d004      	beq.n	80091f6 <HAL_RCCEx_PeriphCLKConfig+0x2c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80091f0:	4618      	mov	r0, r3
 80091f2:	f7ff fd27 	bl	8008c44 <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	681b      	ldr	r3, [r3, #0]
 80091fa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80091fe:	2b00      	cmp	r3, #0
 8009200:	d009      	beq.n	8009216 <HAL_RCCEx_PeriphCLKConfig+0x2e0>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009206:	4618      	mov	r0, r3
 8009208:	f7ff fd46 	bl	8008c98 <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009210:	4618      	mov	r0, r3
 8009212:	f7ff fd2d 	bl	8008c70 <LL_RCC_SetSMPSClockSource>
  }
#endif


  return status;
 8009216:	7fbb      	ldrb	r3, [r7, #30]
}
 8009218:	4618      	mov	r0, r3
 800921a:	3720      	adds	r7, #32
 800921c:	46bd      	mov	sp, r7
 800921e:	bd80      	pop	{r7, pc}

08009220 <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8009220:	b580      	push	{r7, lr}
 8009222:	b084      	sub	sp, #16
 8009224:	af00      	add	r7, sp, #0
 8009226:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009228:	2300      	movs	r3, #0
 800922a:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800922c:	f7ff fe62 	bl	8008ef4 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8009230:	f7fc ff04 	bl	800603c <HAL_GetTick>
 8009234:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8009236:	e009      	b.n	800924c <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8009238:	f7fc ff00 	bl	800603c <HAL_GetTick>
 800923c:	4602      	mov	r2, r0
 800923e:	68bb      	ldr	r3, [r7, #8]
 8009240:	1ad3      	subs	r3, r2, r3
 8009242:	2b02      	cmp	r3, #2
 8009244:	d902      	bls.n	800924c <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 8009246:	2303      	movs	r3, #3
 8009248:	73fb      	strb	r3, [r7, #15]
      break;
 800924a:	e004      	b.n	8009256 <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800924c:	f7ff fe61 	bl	8008f12 <LL_RCC_PLLSAI1_IsReady>
 8009250:	4603      	mov	r3, r0
 8009252:	2b00      	cmp	r3, #0
 8009254:	d1f0      	bne.n	8009238 <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 8009256:	7bfb      	ldrb	r3, [r7, #15]
 8009258:	2b00      	cmp	r3, #0
 800925a:	d137      	bne.n	80092cc <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800925c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009260:	691b      	ldr	r3, [r3, #16]
 8009262:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	681b      	ldr	r3, [r3, #0]
 800926a:	021b      	lsls	r3, r3, #8
 800926c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8009270:	4313      	orrs	r3, r2
 8009272:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 8009274:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009278:	691b      	ldr	r3, [r3, #16]
 800927a:	f423 1278 	bic.w	r2, r3, #4063232	; 0x3e0000
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	685b      	ldr	r3, [r3, #4]
 8009282:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8009286:	4313      	orrs	r3, r2
 8009288:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800928a:	f7ff fe24 	bl	8008ed6 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800928e:	f7fc fed5 	bl	800603c <HAL_GetTick>
 8009292:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8009294:	e009      	b.n	80092aa <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8009296:	f7fc fed1 	bl	800603c <HAL_GetTick>
 800929a:	4602      	mov	r2, r0
 800929c:	68bb      	ldr	r3, [r7, #8]
 800929e:	1ad3      	subs	r3, r2, r3
 80092a0:	2b02      	cmp	r3, #2
 80092a2:	d902      	bls.n	80092aa <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 80092a4:	2303      	movs	r3, #3
 80092a6:	73fb      	strb	r3, [r7, #15]
        break;
 80092a8:	e004      	b.n	80092b4 <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80092aa:	f7ff fe32 	bl	8008f12 <LL_RCC_PLLSAI1_IsReady>
 80092ae:	4603      	mov	r3, r0
 80092b0:	2b01      	cmp	r3, #1
 80092b2:	d1f0      	bne.n	8009296 <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 80092b4:	7bfb      	ldrb	r3, [r7, #15]
 80092b6:	2b00      	cmp	r3, #0
 80092b8:	d108      	bne.n	80092cc <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80092ba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80092be:	691a      	ldr	r2, [r3, #16]
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	691b      	ldr	r3, [r3, #16]
 80092c4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80092c8:	4313      	orrs	r3, r2
 80092ca:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 80092cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80092ce:	4618      	mov	r0, r3
 80092d0:	3710      	adds	r7, #16
 80092d2:	46bd      	mov	sp, r7
 80092d4:	bd80      	pop	{r7, pc}

080092d6 <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 80092d6:	b580      	push	{r7, lr}
 80092d8:	b084      	sub	sp, #16
 80092da:	af00      	add	r7, sp, #0
 80092dc:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80092de:	2300      	movs	r3, #0
 80092e0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 80092e2:	f7ff fe07 	bl	8008ef4 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80092e6:	f7fc fea9 	bl	800603c <HAL_GetTick>
 80092ea:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80092ec:	e009      	b.n	8009302 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80092ee:	f7fc fea5 	bl	800603c <HAL_GetTick>
 80092f2:	4602      	mov	r2, r0
 80092f4:	68bb      	ldr	r3, [r7, #8]
 80092f6:	1ad3      	subs	r3, r2, r3
 80092f8:	2b02      	cmp	r3, #2
 80092fa:	d902      	bls.n	8009302 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 80092fc:	2303      	movs	r3, #3
 80092fe:	73fb      	strb	r3, [r7, #15]
      break;
 8009300:	e004      	b.n	800930c <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8009302:	f7ff fe06 	bl	8008f12 <LL_RCC_PLLSAI1_IsReady>
 8009306:	4603      	mov	r3, r0
 8009308:	2b00      	cmp	r3, #0
 800930a:	d1f0      	bne.n	80092ee <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 800930c:	7bfb      	ldrb	r3, [r7, #15]
 800930e:	2b00      	cmp	r3, #0
 8009310:	d137      	bne.n	8009382 <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8009312:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009316:	691b      	ldr	r3, [r3, #16]
 8009318:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	681b      	ldr	r3, [r3, #0]
 8009320:	021b      	lsls	r3, r3, #8
 8009322:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8009326:	4313      	orrs	r3, r2
 8009328:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 800932a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800932e:	691b      	ldr	r3, [r3, #16]
 8009330:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	689b      	ldr	r3, [r3, #8]
 8009338:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800933c:	4313      	orrs	r3, r2
 800933e:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8009340:	f7ff fdc9 	bl	8008ed6 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009344:	f7fc fe7a 	bl	800603c <HAL_GetTick>
 8009348:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800934a:	e009      	b.n	8009360 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800934c:	f7fc fe76 	bl	800603c <HAL_GetTick>
 8009350:	4602      	mov	r2, r0
 8009352:	68bb      	ldr	r3, [r7, #8]
 8009354:	1ad3      	subs	r3, r2, r3
 8009356:	2b02      	cmp	r3, #2
 8009358:	d902      	bls.n	8009360 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 800935a:	2303      	movs	r3, #3
 800935c:	73fb      	strb	r3, [r7, #15]
        break;
 800935e:	e004      	b.n	800936a <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8009360:	f7ff fdd7 	bl	8008f12 <LL_RCC_PLLSAI1_IsReady>
 8009364:	4603      	mov	r3, r0
 8009366:	2b01      	cmp	r3, #1
 8009368:	d1f0      	bne.n	800934c <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 800936a:	7bfb      	ldrb	r3, [r7, #15]
 800936c:	2b00      	cmp	r3, #0
 800936e:	d108      	bne.n	8009382 <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8009370:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009374:	691a      	ldr	r2, [r3, #16]
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	691b      	ldr	r3, [r3, #16]
 800937a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800937e:	4313      	orrs	r3, r2
 8009380:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8009382:	7bfb      	ldrb	r3, [r7, #15]
}
 8009384:	4618      	mov	r0, r3
 8009386:	3710      	adds	r7, #16
 8009388:	46bd      	mov	sp, r7
 800938a:	bd80      	pop	{r7, pc}

0800938c <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800938c:	b580      	push	{r7, lr}
 800938e:	b084      	sub	sp, #16
 8009390:	af00      	add	r7, sp, #0
 8009392:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009394:	2300      	movs	r3, #0
 8009396:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8009398:	f7ff fdac 	bl	8008ef4 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800939c:	f7fc fe4e 	bl	800603c <HAL_GetTick>
 80093a0:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80093a2:	e009      	b.n	80093b8 <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80093a4:	f7fc fe4a 	bl	800603c <HAL_GetTick>
 80093a8:	4602      	mov	r2, r0
 80093aa:	68bb      	ldr	r3, [r7, #8]
 80093ac:	1ad3      	subs	r3, r2, r3
 80093ae:	2b02      	cmp	r3, #2
 80093b0:	d902      	bls.n	80093b8 <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 80093b2:	2303      	movs	r3, #3
 80093b4:	73fb      	strb	r3, [r7, #15]
      break;
 80093b6:	e004      	b.n	80093c2 <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80093b8:	f7ff fdab 	bl	8008f12 <LL_RCC_PLLSAI1_IsReady>
 80093bc:	4603      	mov	r3, r0
 80093be:	2b00      	cmp	r3, #0
 80093c0:	d1f0      	bne.n	80093a4 <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 80093c2:	7bfb      	ldrb	r3, [r7, #15]
 80093c4:	2b00      	cmp	r3, #0
 80093c6:	d137      	bne.n	8009438 <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 80093c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80093cc:	691b      	ldr	r3, [r3, #16]
 80093ce:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	681b      	ldr	r3, [r3, #0]
 80093d6:	021b      	lsls	r3, r3, #8
 80093d8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80093dc:	4313      	orrs	r3, r2
 80093de:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 80093e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80093e4:	691b      	ldr	r3, [r3, #16]
 80093e6:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	68db      	ldr	r3, [r3, #12]
 80093ee:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80093f2:	4313      	orrs	r3, r2
 80093f4:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 80093f6:	f7ff fd6e 	bl	8008ed6 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80093fa:	f7fc fe1f 	bl	800603c <HAL_GetTick>
 80093fe:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8009400:	e009      	b.n	8009416 <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8009402:	f7fc fe1b 	bl	800603c <HAL_GetTick>
 8009406:	4602      	mov	r2, r0
 8009408:	68bb      	ldr	r3, [r7, #8]
 800940a:	1ad3      	subs	r3, r2, r3
 800940c:	2b02      	cmp	r3, #2
 800940e:	d902      	bls.n	8009416 <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 8009410:	2303      	movs	r3, #3
 8009412:	73fb      	strb	r3, [r7, #15]
        break;
 8009414:	e004      	b.n	8009420 <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8009416:	f7ff fd7c 	bl	8008f12 <LL_RCC_PLLSAI1_IsReady>
 800941a:	4603      	mov	r3, r0
 800941c:	2b01      	cmp	r3, #1
 800941e:	d1f0      	bne.n	8009402 <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 8009420:	7bfb      	ldrb	r3, [r7, #15]
 8009422:	2b00      	cmp	r3, #0
 8009424:	d108      	bne.n	8009438 <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8009426:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800942a:	691a      	ldr	r2, [r3, #16]
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	691b      	ldr	r3, [r3, #16]
 8009430:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8009434:	4313      	orrs	r3, r2
 8009436:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8009438:	7bfb      	ldrb	r3, [r7, #15]
}
 800943a:	4618      	mov	r0, r3
 800943c:	3710      	adds	r7, #16
 800943e:	46bd      	mov	sp, r7
 8009440:	bd80      	pop	{r7, pc}

08009442 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8009442:	b580      	push	{r7, lr}
 8009444:	b082      	sub	sp, #8
 8009446:	af00      	add	r7, sp, #0
 8009448:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	2b00      	cmp	r3, #0
 800944e:	d101      	bne.n	8009454 <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 8009450:	2301      	movs	r3, #1
 8009452:	e090      	b.n	8009576 <HAL_RTC_Init+0x134>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800945a:	b2db      	uxtb	r3, r3
 800945c:	2b00      	cmp	r3, #0
 800945e:	d106      	bne.n	800946e <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	2200      	movs	r2, #0
 8009464:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8009468:	6878      	ldr	r0, [r7, #4]
 800946a:	f7fc fb33 	bl	8005ad4 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	2202      	movs	r2, #2
 8009472:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	681b      	ldr	r3, [r3, #0]
 800947a:	22ca      	movs	r2, #202	; 0xca
 800947c:	625a      	str	r2, [r3, #36]	; 0x24
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	681b      	ldr	r3, [r3, #0]
 8009482:	2253      	movs	r2, #83	; 0x53
 8009484:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8009486:	6878      	ldr	r0, [r7, #4]
 8009488:	f000 faba 	bl	8009a00 <RTC_EnterInitMode>
 800948c:	4603      	mov	r3, r0
 800948e:	2b00      	cmp	r3, #0
 8009490:	d009      	beq.n	80094a6 <HAL_RTC_Init+0x64>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	681b      	ldr	r3, [r3, #0]
 8009496:	22ff      	movs	r2, #255	; 0xff
 8009498:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	2204      	movs	r2, #4
 800949e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    return HAL_ERROR;
 80094a2:	2301      	movs	r3, #1
 80094a4:	e067      	b.n	8009576 <HAL_RTC_Init+0x134>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	681b      	ldr	r3, [r3, #0]
 80094aa:	689b      	ldr	r3, [r3, #8]
 80094ac:	687a      	ldr	r2, [r7, #4]
 80094ae:	6812      	ldr	r2, [r2, #0]
 80094b0:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80094b4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80094b8:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	681b      	ldr	r3, [r3, #0]
 80094be:	6899      	ldr	r1, [r3, #8]
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	685a      	ldr	r2, [r3, #4]
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	691b      	ldr	r3, [r3, #16]
 80094c8:	431a      	orrs	r2, r3
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	699b      	ldr	r3, [r3, #24]
 80094ce:	431a      	orrs	r2, r3
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	681b      	ldr	r3, [r3, #0]
 80094d4:	430a      	orrs	r2, r1
 80094d6:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	681b      	ldr	r3, [r3, #0]
 80094dc:	687a      	ldr	r2, [r7, #4]
 80094de:	68d2      	ldr	r2, [r2, #12]
 80094e0:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	681b      	ldr	r3, [r3, #0]
 80094e6:	6919      	ldr	r1, [r3, #16]
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	689b      	ldr	r3, [r3, #8]
 80094ec:	041a      	lsls	r2, r3, #16
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	681b      	ldr	r3, [r3, #0]
 80094f2:	430a      	orrs	r2, r1
 80094f4:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	681b      	ldr	r3, [r3, #0]
 80094fa:	68da      	ldr	r2, [r3, #12]
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	681b      	ldr	r3, [r3, #0]
 8009500:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009504:	60da      	str	r2, [r3, #12]

    hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	681b      	ldr	r3, [r3, #0]
 800950a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	681b      	ldr	r3, [r3, #0]
 8009510:	f022 0203 	bic.w	r2, r2, #3
 8009514:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	681b      	ldr	r3, [r3, #0]
 800951a:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	69da      	ldr	r2, [r3, #28]
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	695b      	ldr	r3, [r3, #20]
 8009524:	431a      	orrs	r2, r3
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	681b      	ldr	r3, [r3, #0]
 800952a:	430a      	orrs	r2, r1
 800952c:	64da      	str	r2, [r3, #76]	; 0x4c

    /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	681b      	ldr	r3, [r3, #0]
 8009532:	689b      	ldr	r3, [r3, #8]
 8009534:	f003 0320 	and.w	r3, r3, #32
 8009538:	2b00      	cmp	r3, #0
 800953a:	d113      	bne.n	8009564 <HAL_RTC_Init+0x122>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800953c:	6878      	ldr	r0, [r7, #4]
 800953e:	f000 fa39 	bl	80099b4 <HAL_RTC_WaitForSynchro>
 8009542:	4603      	mov	r3, r0
 8009544:	2b00      	cmp	r3, #0
 8009546:	d00d      	beq.n	8009564 <HAL_RTC_Init+0x122>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	681b      	ldr	r3, [r3, #0]
 800954c:	22ff      	movs	r2, #255	; 0xff
 800954e:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	2204      	movs	r2, #4
 8009554:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */ 
        __HAL_UNLOCK(hrtc);
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	2200      	movs	r2, #0
 800955c:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8009560:	2301      	movs	r3, #1
 8009562:	e008      	b.n	8009576 <HAL_RTC_Init+0x134>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	681b      	ldr	r3, [r3, #0]
 8009568:	22ff      	movs	r2, #255	; 0xff
 800956a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	2201      	movs	r2, #1
 8009570:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    return HAL_OK;
 8009574:	2300      	movs	r3, #0
  }
}
 8009576:	4618      	mov	r0, r3
 8009578:	3708      	adds	r7, #8
 800957a:	46bd      	mov	sp, r7
 800957c:	bd80      	pop	{r7, pc}

0800957e <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format 
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800957e:	b590      	push	{r4, r7, lr}
 8009580:	b087      	sub	sp, #28
 8009582:	af00      	add	r7, sp, #0
 8009584:	60f8      	str	r0, [r7, #12]
 8009586:	60b9      	str	r1, [r7, #8]
 8009588:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */ 
  __HAL_LOCK(hrtc);
 800958a:	68fb      	ldr	r3, [r7, #12]
 800958c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009590:	2b01      	cmp	r3, #1
 8009592:	d101      	bne.n	8009598 <HAL_RTC_SetTime+0x1a>
 8009594:	2302      	movs	r3, #2
 8009596:	e0b2      	b.n	80096fe <HAL_RTC_SetTime+0x180>
 8009598:	68fb      	ldr	r3, [r7, #12]
 800959a:	2201      	movs	r2, #1
 800959c:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80095a0:	68fb      	ldr	r3, [r7, #12]
 80095a2:	2202      	movs	r2, #2
 80095a4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if(Format == RTC_FORMAT_BIN)
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	2b00      	cmp	r3, #0
 80095ac:	d126      	bne.n	80095fc <HAL_RTC_SetTime+0x7e>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80095ae:	68fb      	ldr	r3, [r7, #12]
 80095b0:	681b      	ldr	r3, [r3, #0]
 80095b2:	689b      	ldr	r3, [r3, #8]
 80095b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80095b8:	2b00      	cmp	r3, #0
 80095ba:	d102      	bne.n	80095c2 <HAL_RTC_SetTime+0x44>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80095bc:	68bb      	ldr	r3, [r7, #8]
 80095be:	2200      	movs	r2, #0
 80095c0:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 80095c2:	68bb      	ldr	r3, [r7, #8]
 80095c4:	781b      	ldrb	r3, [r3, #0]
 80095c6:	4618      	mov	r0, r3
 80095c8:	f000 fa44 	bl	8009a54 <RTC_ByteToBcd2>
 80095cc:	4603      	mov	r3, r0
 80095ce:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 80095d0:	68bb      	ldr	r3, [r7, #8]
 80095d2:	785b      	ldrb	r3, [r3, #1]
 80095d4:	4618      	mov	r0, r3
 80095d6:	f000 fa3d 	bl	8009a54 <RTC_ByteToBcd2>
 80095da:	4603      	mov	r3, r0
 80095dc:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 80095de:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 80095e0:	68bb      	ldr	r3, [r7, #8]
 80095e2:	789b      	ldrb	r3, [r3, #2]
 80095e4:	4618      	mov	r0, r3
 80095e6:	f000 fa35 	bl	8009a54 <RTC_ByteToBcd2>
 80095ea:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 80095ec:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 80095f0:	68bb      	ldr	r3, [r7, #8]
 80095f2:	78db      	ldrb	r3, [r3, #3]
 80095f4:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 80095f6:	4313      	orrs	r3, r2
 80095f8:	617b      	str	r3, [r7, #20]
 80095fa:	e018      	b.n	800962e <HAL_RTC_SetTime+0xb0>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80095fc:	68fb      	ldr	r3, [r7, #12]
 80095fe:	681b      	ldr	r3, [r3, #0]
 8009600:	689b      	ldr	r3, [r3, #8]
 8009602:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009606:	2b00      	cmp	r3, #0
 8009608:	d102      	bne.n	8009610 <HAL_RTC_SetTime+0x92>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800960a:	68bb      	ldr	r3, [r7, #8]
 800960c:	2200      	movs	r2, #0
 800960e:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8009610:	68bb      	ldr	r3, [r7, #8]
 8009612:	781b      	ldrb	r3, [r3, #0]
 8009614:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8009616:	68bb      	ldr	r3, [r7, #8]
 8009618:	785b      	ldrb	r3, [r3, #1]
 800961a:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800961c:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 800961e:	68ba      	ldr	r2, [r7, #8]
 8009620:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8009622:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 8009624:	68bb      	ldr	r3, [r7, #8]
 8009626:	78db      	ldrb	r3, [r3, #3]
 8009628:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800962a:	4313      	orrs	r3, r2
 800962c:	617b      	str	r3, [r7, #20]
  }
  UNUSED(tmpreg);
  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800962e:	68fb      	ldr	r3, [r7, #12]
 8009630:	681b      	ldr	r3, [r3, #0]
 8009632:	22ca      	movs	r2, #202	; 0xca
 8009634:	625a      	str	r2, [r3, #36]	; 0x24
 8009636:	68fb      	ldr	r3, [r7, #12]
 8009638:	681b      	ldr	r3, [r3, #0]
 800963a:	2253      	movs	r2, #83	; 0x53
 800963c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800963e:	68f8      	ldr	r0, [r7, #12]
 8009640:	f000 f9de 	bl	8009a00 <RTC_EnterInitMode>
 8009644:	4603      	mov	r3, r0
 8009646:	2b00      	cmp	r3, #0
 8009648:	d00d      	beq.n	8009666 <HAL_RTC_SetTime+0xe8>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800964a:	68fb      	ldr	r3, [r7, #12]
 800964c:	681b      	ldr	r3, [r3, #0]
 800964e:	22ff      	movs	r2, #255	; 0xff
 8009650:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8009652:	68fb      	ldr	r3, [r7, #12]
 8009654:	2204      	movs	r2, #4
 8009656:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */ 
    __HAL_UNLOCK(hrtc);
 800965a:	68fb      	ldr	r3, [r7, #12]
 800965c:	2200      	movs	r2, #0
 800965e:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_ERROR;
 8009662:	2301      	movs	r3, #1
 8009664:	e04b      	b.n	80096fe <HAL_RTC_SetTime+0x180>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8009666:	68fb      	ldr	r3, [r7, #12]
 8009668:	681a      	ldr	r2, [r3, #0]
 800966a:	697b      	ldr	r3, [r7, #20]
 800966c:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8009670:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8009674:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8009676:	68fb      	ldr	r3, [r7, #12]
 8009678:	681b      	ldr	r3, [r3, #0]
 800967a:	689a      	ldr	r2, [r3, #8]
 800967c:	68fb      	ldr	r3, [r7, #12]
 800967e:	681b      	ldr	r3, [r3, #0]
 8009680:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8009684:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8009686:	68fb      	ldr	r3, [r7, #12]
 8009688:	681b      	ldr	r3, [r3, #0]
 800968a:	6899      	ldr	r1, [r3, #8]
 800968c:	68bb      	ldr	r3, [r7, #8]
 800968e:	68da      	ldr	r2, [r3, #12]
 8009690:	68bb      	ldr	r3, [r7, #8]
 8009692:	691b      	ldr	r3, [r3, #16]
 8009694:	431a      	orrs	r2, r3
 8009696:	68fb      	ldr	r3, [r7, #12]
 8009698:	681b      	ldr	r3, [r3, #0]
 800969a:	430a      	orrs	r2, r1
 800969c:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 800969e:	68fb      	ldr	r3, [r7, #12]
 80096a0:	681b      	ldr	r3, [r3, #0]
 80096a2:	68da      	ldr	r2, [r3, #12]
 80096a4:	68fb      	ldr	r3, [r7, #12]
 80096a6:	681b      	ldr	r3, [r3, #0]
 80096a8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80096ac:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 80096ae:	68fb      	ldr	r3, [r7, #12]
 80096b0:	681b      	ldr	r3, [r3, #0]
 80096b2:	689b      	ldr	r3, [r3, #8]
 80096b4:	f003 0320 	and.w	r3, r3, #32
 80096b8:	2b00      	cmp	r3, #0
 80096ba:	d113      	bne.n	80096e4 <HAL_RTC_SetTime+0x166>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80096bc:	68f8      	ldr	r0, [r7, #12]
 80096be:	f000 f979 	bl	80099b4 <HAL_RTC_WaitForSynchro>
 80096c2:	4603      	mov	r3, r0
 80096c4:	2b00      	cmp	r3, #0
 80096c6:	d00d      	beq.n	80096e4 <HAL_RTC_SetTime+0x166>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80096c8:	68fb      	ldr	r3, [r7, #12]
 80096ca:	681b      	ldr	r3, [r3, #0]
 80096cc:	22ff      	movs	r2, #255	; 0xff
 80096ce:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80096d0:	68fb      	ldr	r3, [r7, #12]
 80096d2:	2204      	movs	r2, #4
 80096d4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */ 
        __HAL_UNLOCK(hrtc);
 80096d8:	68fb      	ldr	r3, [r7, #12]
 80096da:	2200      	movs	r2, #0
 80096dc:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80096e0:	2301      	movs	r3, #1
 80096e2:	e00c      	b.n	80096fe <HAL_RTC_SetTime+0x180>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80096e4:	68fb      	ldr	r3, [r7, #12]
 80096e6:	681b      	ldr	r3, [r3, #0]
 80096e8:	22ff      	movs	r2, #255	; 0xff
 80096ea:	625a      	str	r2, [r3, #36]	; 0x24
    
   hrtc->State = HAL_RTC_STATE_READY;
 80096ec:	68fb      	ldr	r3, [r7, #12]
 80096ee:	2201      	movs	r2, #1
 80096f0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

   __HAL_UNLOCK(hrtc); 
 80096f4:	68fb      	ldr	r3, [r7, #12]
 80096f6:	2200      	movs	r2, #0
 80096f8:	f883 2020 	strb.w	r2, [r3, #32]

   return HAL_OK;
 80096fc:	2300      	movs	r3, #0
  }
}
 80096fe:	4618      	mov	r0, r3
 8009700:	371c      	adds	r7, #28
 8009702:	46bd      	mov	sp, r7
 8009704:	bd90      	pop	{r4, r7, pc}

08009706 <HAL_RTC_GetTime>:
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read
  *        to ensure consistency between the time and date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8009706:	b580      	push	{r7, lr}
 8009708:	b086      	sub	sp, #24
 800970a:	af00      	add	r7, sp, #0
 800970c:	60f8      	str	r0, [r7, #12]
 800970e:	60b9      	str	r1, [r7, #8]
 8009710:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8009712:	68fb      	ldr	r3, [r7, #12]
 8009714:	681b      	ldr	r3, [r3, #0]
 8009716:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009718:	68bb      	ldr	r3, [r7, #8]
 800971a:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800971c:	68fb      	ldr	r3, [r7, #12]
 800971e:	681b      	ldr	r3, [r3, #0]
 8009720:	691b      	ldr	r3, [r3, #16]
 8009722:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8009726:	68bb      	ldr	r3, [r7, #8]
 8009728:	609a      	str	r2, [r3, #8]
  
  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 800972a:	68fb      	ldr	r3, [r7, #12]
 800972c:	681b      	ldr	r3, [r3, #0]
 800972e:	681b      	ldr	r3, [r3, #0]
 8009730:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8009734:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8009738:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 800973a:	697b      	ldr	r3, [r7, #20]
 800973c:	0c1b      	lsrs	r3, r3, #16
 800973e:	b2db      	uxtb	r3, r3
 8009740:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009744:	b2da      	uxtb	r2, r3
 8009746:	68bb      	ldr	r3, [r7, #8]
 8009748:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >>8U);
 800974a:	697b      	ldr	r3, [r7, #20]
 800974c:	0a1b      	lsrs	r3, r3, #8
 800974e:	b2db      	uxtb	r3, r3
 8009750:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009754:	b2da      	uxtb	r2, r3
 8009756:	68bb      	ldr	r3, [r7, #8]
 8009758:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 800975a:	697b      	ldr	r3, [r7, #20]
 800975c:	b2db      	uxtb	r3, r3
 800975e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009762:	b2da      	uxtb	r2, r3
 8009764:	68bb      	ldr	r3, [r7, #8]
 8009766:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 8009768:	697b      	ldr	r3, [r7, #20]
 800976a:	0c1b      	lsrs	r3, r3, #16
 800976c:	b2db      	uxtb	r3, r3
 800976e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009772:	b2da      	uxtb	r2, r3
 8009774:	68bb      	ldr	r3, [r7, #8]
 8009776:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	2b00      	cmp	r3, #0
 800977c:	d11a      	bne.n	80097b4 <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800977e:	68bb      	ldr	r3, [r7, #8]
 8009780:	781b      	ldrb	r3, [r3, #0]
 8009782:	4618      	mov	r0, r3
 8009784:	f000 f986 	bl	8009a94 <RTC_Bcd2ToByte>
 8009788:	4603      	mov	r3, r0
 800978a:	461a      	mov	r2, r3
 800978c:	68bb      	ldr	r3, [r7, #8]
 800978e:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8009790:	68bb      	ldr	r3, [r7, #8]
 8009792:	785b      	ldrb	r3, [r3, #1]
 8009794:	4618      	mov	r0, r3
 8009796:	f000 f97d 	bl	8009a94 <RTC_Bcd2ToByte>
 800979a:	4603      	mov	r3, r0
 800979c:	461a      	mov	r2, r3
 800979e:	68bb      	ldr	r3, [r7, #8]
 80097a0:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 80097a2:	68bb      	ldr	r3, [r7, #8]
 80097a4:	789b      	ldrb	r3, [r3, #2]
 80097a6:	4618      	mov	r0, r3
 80097a8:	f000 f974 	bl	8009a94 <RTC_Bcd2ToByte>
 80097ac:	4603      	mov	r3, r0
 80097ae:	461a      	mov	r2, r3
 80097b0:	68bb      	ldr	r3, [r7, #8]
 80097b2:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 80097b4:	2300      	movs	r3, #0
}
 80097b6:	4618      	mov	r0, r3
 80097b8:	3718      	adds	r7, #24
 80097ba:	46bd      	mov	sp, r7
 80097bc:	bd80      	pop	{r7, pc}

080097be <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format 
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80097be:	b590      	push	{r4, r7, lr}
 80097c0:	b087      	sub	sp, #28
 80097c2:	af00      	add	r7, sp, #0
 80097c4:	60f8      	str	r0, [r7, #12]
 80097c6:	60b9      	str	r1, [r7, #8]
 80097c8:	607a      	str	r2, [r7, #4]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 80097ca:	68fb      	ldr	r3, [r7, #12]
 80097cc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80097d0:	2b01      	cmp	r3, #1
 80097d2:	d101      	bne.n	80097d8 <HAL_RTC_SetDate+0x1a>
 80097d4:	2302      	movs	r3, #2
 80097d6:	e09c      	b.n	8009912 <HAL_RTC_SetDate+0x154>
 80097d8:	68fb      	ldr	r3, [r7, #12]
 80097da:	2201      	movs	r2, #1
 80097dc:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80097e0:	68fb      	ldr	r3, [r7, #12]
 80097e2:	2202      	movs	r2, #2
 80097e4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	2b00      	cmp	r3, #0
 80097ec:	d10e      	bne.n	800980c <HAL_RTC_SetDate+0x4e>
 80097ee:	68bb      	ldr	r3, [r7, #8]
 80097f0:	785b      	ldrb	r3, [r3, #1]
 80097f2:	f003 0310 	and.w	r3, r3, #16
 80097f6:	2b00      	cmp	r3, #0
 80097f8:	d008      	beq.n	800980c <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80097fa:	68bb      	ldr	r3, [r7, #8]
 80097fc:	785b      	ldrb	r3, [r3, #1]
 80097fe:	f023 0310 	bic.w	r3, r3, #16
 8009802:	b2db      	uxtb	r3, r3
 8009804:	330a      	adds	r3, #10
 8009806:	b2da      	uxtb	r2, r3
 8009808:	68bb      	ldr	r3, [r7, #8]
 800980a:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	2b00      	cmp	r3, #0
 8009810:	d11c      	bne.n	800984c <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8009812:	68bb      	ldr	r3, [r7, #8]
 8009814:	78db      	ldrb	r3, [r3, #3]
 8009816:	4618      	mov	r0, r3
 8009818:	f000 f91c 	bl	8009a54 <RTC_ByteToBcd2>
 800981c:	4603      	mov	r3, r0
 800981e:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8009820:	68bb      	ldr	r3, [r7, #8]
 8009822:	785b      	ldrb	r3, [r3, #1]
 8009824:	4618      	mov	r0, r3
 8009826:	f000 f915 	bl	8009a54 <RTC_ByteToBcd2>
 800982a:	4603      	mov	r3, r0
 800982c:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800982e:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8009830:	68bb      	ldr	r3, [r7, #8]
 8009832:	789b      	ldrb	r3, [r3, #2]
 8009834:	4618      	mov	r0, r3
 8009836:	f000 f90d 	bl	8009a54 <RTC_ByteToBcd2>
 800983a:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 800983c:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13U));
 8009840:	68bb      	ldr	r3, [r7, #8]
 8009842:	781b      	ldrb	r3, [r3, #0]
 8009844:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8009846:	4313      	orrs	r3, r2
 8009848:	617b      	str	r3, [r7, #20]
 800984a:	e00e      	b.n	800986a <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800984c:	68bb      	ldr	r3, [r7, #8]
 800984e:	78db      	ldrb	r3, [r3, #3]
 8009850:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 8009852:	68bb      	ldr	r3, [r7, #8]
 8009854:	785b      	ldrb	r3, [r3, #1]
 8009856:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8009858:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 800985a:	68ba      	ldr	r2, [r7, #8]
 800985c:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 800985e:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 8009860:	68bb      	ldr	r3, [r7, #8]
 8009862:	781b      	ldrb	r3, [r3, #0]
 8009864:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8009866:	4313      	orrs	r3, r2
 8009868:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800986a:	68fb      	ldr	r3, [r7, #12]
 800986c:	681b      	ldr	r3, [r3, #0]
 800986e:	22ca      	movs	r2, #202	; 0xca
 8009870:	625a      	str	r2, [r3, #36]	; 0x24
 8009872:	68fb      	ldr	r3, [r7, #12]
 8009874:	681b      	ldr	r3, [r3, #0]
 8009876:	2253      	movs	r2, #83	; 0x53
 8009878:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800987a:	68f8      	ldr	r0, [r7, #12]
 800987c:	f000 f8c0 	bl	8009a00 <RTC_EnterInitMode>
 8009880:	4603      	mov	r3, r0
 8009882:	2b00      	cmp	r3, #0
 8009884:	d00d      	beq.n	80098a2 <HAL_RTC_SetDate+0xe4>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009886:	68fb      	ldr	r3, [r7, #12]
 8009888:	681b      	ldr	r3, [r3, #0]
 800988a:	22ff      	movs	r2, #255	; 0xff
 800988c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 800988e:	68fb      	ldr	r3, [r7, #12]
 8009890:	2204      	movs	r2, #4
 8009892:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */ 
    __HAL_UNLOCK(hrtc);
 8009896:	68fb      	ldr	r3, [r7, #12]
 8009898:	2200      	movs	r2, #0
 800989a:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_ERROR;
 800989e:	2301      	movs	r3, #1
 80098a0:	e037      	b.n	8009912 <HAL_RTC_SetDate+0x154>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80098a2:	68fb      	ldr	r3, [r7, #12]
 80098a4:	681a      	ldr	r2, [r3, #0]
 80098a6:	697b      	ldr	r3, [r7, #20]
 80098a8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80098ac:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80098b0:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 80098b2:	68fb      	ldr	r3, [r7, #12]
 80098b4:	681b      	ldr	r3, [r3, #0]
 80098b6:	68da      	ldr	r2, [r3, #12]
 80098b8:	68fb      	ldr	r3, [r7, #12]
 80098ba:	681b      	ldr	r3, [r3, #0]
 80098bc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80098c0:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 80098c2:	68fb      	ldr	r3, [r7, #12]
 80098c4:	681b      	ldr	r3, [r3, #0]
 80098c6:	689b      	ldr	r3, [r3, #8]
 80098c8:	f003 0320 	and.w	r3, r3, #32
 80098cc:	2b00      	cmp	r3, #0
 80098ce:	d113      	bne.n	80098f8 <HAL_RTC_SetDate+0x13a>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80098d0:	68f8      	ldr	r0, [r7, #12]
 80098d2:	f000 f86f 	bl	80099b4 <HAL_RTC_WaitForSynchro>
 80098d6:	4603      	mov	r3, r0
 80098d8:	2b00      	cmp	r3, #0
 80098da:	d00d      	beq.n	80098f8 <HAL_RTC_SetDate+0x13a>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);  
 80098dc:	68fb      	ldr	r3, [r7, #12]
 80098de:	681b      	ldr	r3, [r3, #0]
 80098e0:	22ff      	movs	r2, #255	; 0xff
 80098e2:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80098e4:	68fb      	ldr	r3, [r7, #12]
 80098e6:	2204      	movs	r2, #4
 80098e8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */ 
        __HAL_UNLOCK(hrtc);
 80098ec:	68fb      	ldr	r3, [r7, #12]
 80098ee:	2200      	movs	r2, #0
 80098f0:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80098f4:	2301      	movs	r3, #1
 80098f6:	e00c      	b.n	8009912 <HAL_RTC_SetDate+0x154>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80098f8:	68fb      	ldr	r3, [r7, #12]
 80098fa:	681b      	ldr	r3, [r3, #0]
 80098fc:	22ff      	movs	r2, #255	; 0xff
 80098fe:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 8009900:	68fb      	ldr	r3, [r7, #12]
 8009902:	2201      	movs	r2, #1
 8009904:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */ 
    __HAL_UNLOCK(hrtc);
 8009908:	68fb      	ldr	r3, [r7, #12]
 800990a:	2200      	movs	r2, #0
 800990c:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_OK;
 8009910:	2300      	movs	r3, #0
  }
}
 8009912:	4618      	mov	r0, r3
 8009914:	371c      	adds	r7, #28
 8009916:	46bd      	mov	sp, r7
 8009918:	bd90      	pop	{r4, r7, pc}

0800991a <HAL_RTC_GetDate>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800991a:	b580      	push	{r7, lr}
 800991c:	b086      	sub	sp, #24
 800991e:	af00      	add	r7, sp, #0
 8009920:	60f8      	str	r0, [r7, #12]
 8009922:	60b9      	str	r1, [r7, #8]
 8009924:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8009926:	68fb      	ldr	r3, [r7, #12]
 8009928:	681b      	ldr	r3, [r3, #0]
 800992a:	685b      	ldr	r3, [r3, #4]
 800992c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8009930:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8009934:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 8009936:	697b      	ldr	r3, [r7, #20]
 8009938:	0c1b      	lsrs	r3, r3, #16
 800993a:	b2da      	uxtb	r2, r3
 800993c:	68bb      	ldr	r3, [r7, #8]
 800993e:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 8009940:	697b      	ldr	r3, [r7, #20]
 8009942:	0a1b      	lsrs	r3, r3, #8
 8009944:	b2db      	uxtb	r3, r3
 8009946:	f003 031f 	and.w	r3, r3, #31
 800994a:	b2da      	uxtb	r2, r3
 800994c:	68bb      	ldr	r3, [r7, #8]
 800994e:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8009950:	697b      	ldr	r3, [r7, #20]
 8009952:	b2db      	uxtb	r3, r3
 8009954:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009958:	b2da      	uxtb	r2, r3
 800995a:	68bb      	ldr	r3, [r7, #8]
 800995c:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U); 
 800995e:	697b      	ldr	r3, [r7, #20]
 8009960:	0b5b      	lsrs	r3, r3, #13
 8009962:	b2db      	uxtb	r3, r3
 8009964:	f003 0307 	and.w	r3, r3, #7
 8009968:	b2da      	uxtb	r2, r3
 800996a:	68bb      	ldr	r3, [r7, #8]
 800996c:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	2b00      	cmp	r3, #0
 8009972:	d11a      	bne.n	80099aa <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8009974:	68bb      	ldr	r3, [r7, #8]
 8009976:	78db      	ldrb	r3, [r3, #3]
 8009978:	4618      	mov	r0, r3
 800997a:	f000 f88b 	bl	8009a94 <RTC_Bcd2ToByte>
 800997e:	4603      	mov	r3, r0
 8009980:	461a      	mov	r2, r3
 8009982:	68bb      	ldr	r3, [r7, #8]
 8009984:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8009986:	68bb      	ldr	r3, [r7, #8]
 8009988:	785b      	ldrb	r3, [r3, #1]
 800998a:	4618      	mov	r0, r3
 800998c:	f000 f882 	bl	8009a94 <RTC_Bcd2ToByte>
 8009990:	4603      	mov	r3, r0
 8009992:	461a      	mov	r2, r3
 8009994:	68bb      	ldr	r3, [r7, #8]
 8009996:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8009998:	68bb      	ldr	r3, [r7, #8]
 800999a:	789b      	ldrb	r3, [r3, #2]
 800999c:	4618      	mov	r0, r3
 800999e:	f000 f879 	bl	8009a94 <RTC_Bcd2ToByte>
 80099a2:	4603      	mov	r3, r0
 80099a4:	461a      	mov	r2, r3
 80099a6:	68bb      	ldr	r3, [r7, #8]
 80099a8:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 80099aa:	2300      	movs	r3, #0
}
 80099ac:	4618      	mov	r0, r3
 80099ae:	3718      	adds	r7, #24
 80099b0:	46bd      	mov	sp, r7
 80099b2:	bd80      	pop	{r7, pc}

080099b4 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 80099b4:	b580      	push	{r7, lr}
 80099b6:	b084      	sub	sp, #16
 80099b8:	af00      	add	r7, sp, #0
 80099ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	681b      	ldr	r3, [r3, #0]
 80099c0:	68da      	ldr	r2, [r3, #12]
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	681b      	ldr	r3, [r3, #0]
 80099c6:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80099ca:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 80099cc:	f7fc fb36 	bl	800603c <HAL_GetTick>
 80099d0:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80099d2:	e009      	b.n	80099e8 <HAL_RTC_WaitForSynchro+0x34>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80099d4:	f7fc fb32 	bl	800603c <HAL_GetTick>
 80099d8:	4602      	mov	r2, r0
 80099da:	68fb      	ldr	r3, [r7, #12]
 80099dc:	1ad3      	subs	r3, r2, r3
 80099de:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80099e2:	d901      	bls.n	80099e8 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 80099e4:	2303      	movs	r3, #3
 80099e6:	e007      	b.n	80099f8 <HAL_RTC_WaitForSynchro+0x44>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	681b      	ldr	r3, [r3, #0]
 80099ec:	68db      	ldr	r3, [r3, #12]
 80099ee:	f003 0320 	and.w	r3, r3, #32
 80099f2:	2b00      	cmp	r3, #0
 80099f4:	d0ee      	beq.n	80099d4 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 80099f6:	2300      	movs	r3, #0
}
 80099f8:	4618      	mov	r0, r3
 80099fa:	3710      	adds	r7, #16
 80099fc:	46bd      	mov	sp, r7
 80099fe:	bd80      	pop	{r7, pc}

08009a00 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8009a00:	b580      	push	{r7, lr}
 8009a02:	b084      	sub	sp, #16
 8009a04:	af00      	add	r7, sp, #0
 8009a06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	681b      	ldr	r3, [r3, #0]
 8009a0c:	68db      	ldr	r3, [r3, #12]
 8009a0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009a12:	2b00      	cmp	r3, #0
 8009a14:	d119      	bne.n	8009a4a <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	681b      	ldr	r3, [r3, #0]
 8009a1a:	f04f 32ff 	mov.w	r2, #4294967295
 8009a1e:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8009a20:	f7fc fb0c 	bl	800603c <HAL_GetTick>
 8009a24:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8009a26:	e009      	b.n	8009a3c <RTC_EnterInitMode+0x3c>
    {
      if((HAL_GetTick()  - tickstart ) > RTC_TIMEOUT_VALUE)
 8009a28:	f7fc fb08 	bl	800603c <HAL_GetTick>
 8009a2c:	4602      	mov	r2, r0
 8009a2e:	68fb      	ldr	r3, [r7, #12]
 8009a30:	1ad3      	subs	r3, r2, r3
 8009a32:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009a36:	d901      	bls.n	8009a3c <RTC_EnterInitMode+0x3c>
      {
        return HAL_TIMEOUT;
 8009a38:	2303      	movs	r3, #3
 8009a3a:	e007      	b.n	8009a4c <RTC_EnterInitMode+0x4c>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	681b      	ldr	r3, [r3, #0]
 8009a40:	68db      	ldr	r3, [r3, #12]
 8009a42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009a46:	2b00      	cmp	r3, #0
 8009a48:	d0ee      	beq.n	8009a28 <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 8009a4a:	2300      	movs	r3, #0
}
 8009a4c:	4618      	mov	r0, r3
 8009a4e:	3710      	adds	r7, #16
 8009a50:	46bd      	mov	sp, r7
 8009a52:	bd80      	pop	{r7, pc}

08009a54 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8009a54:	b480      	push	{r7}
 8009a56:	b085      	sub	sp, #20
 8009a58:	af00      	add	r7, sp, #0
 8009a5a:	4603      	mov	r3, r0
 8009a5c:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8009a5e:	2300      	movs	r3, #0
 8009a60:	60fb      	str	r3, [r7, #12]
  uint8_t Param = Value;
 8009a62:	79fb      	ldrb	r3, [r7, #7]
 8009a64:	72fb      	strb	r3, [r7, #11]

  while(Param >= 10U)
 8009a66:	e005      	b.n	8009a74 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8009a68:	68fb      	ldr	r3, [r7, #12]
 8009a6a:	3301      	adds	r3, #1
 8009a6c:	60fb      	str	r3, [r7, #12]
    Param -= 10U;
 8009a6e:	7afb      	ldrb	r3, [r7, #11]
 8009a70:	3b0a      	subs	r3, #10
 8009a72:	72fb      	strb	r3, [r7, #11]
  while(Param >= 10U)
 8009a74:	7afb      	ldrb	r3, [r7, #11]
 8009a76:	2b09      	cmp	r3, #9
 8009a78:	d8f6      	bhi.n	8009a68 <RTC_ByteToBcd2+0x14>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Param);
 8009a7a:	68fb      	ldr	r3, [r7, #12]
 8009a7c:	b2db      	uxtb	r3, r3
 8009a7e:	011b      	lsls	r3, r3, #4
 8009a80:	b2da      	uxtb	r2, r3
 8009a82:	7afb      	ldrb	r3, [r7, #11]
 8009a84:	4313      	orrs	r3, r2
 8009a86:	b2db      	uxtb	r3, r3
}
 8009a88:	4618      	mov	r0, r3
 8009a8a:	3714      	adds	r7, #20
 8009a8c:	46bd      	mov	sp, r7
 8009a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a92:	4770      	bx	lr

08009a94 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8009a94:	b480      	push	{r7}
 8009a96:	b085      	sub	sp, #20
 8009a98:	af00      	add	r7, sp, #0
 8009a9a:	4603      	mov	r3, r0
 8009a9c:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp;
  tmp = (((uint32_t)Value & 0xF0U) >> 4U) * 10U;
 8009a9e:	79fb      	ldrb	r3, [r7, #7]
 8009aa0:	091b      	lsrs	r3, r3, #4
 8009aa2:	b2db      	uxtb	r3, r3
 8009aa4:	461a      	mov	r2, r3
 8009aa6:	4613      	mov	r3, r2
 8009aa8:	009b      	lsls	r3, r3, #2
 8009aaa:	4413      	add	r3, r2
 8009aac:	005b      	lsls	r3, r3, #1
 8009aae:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tmp + ((uint32_t)Value & 0x0FU));
 8009ab0:	68fb      	ldr	r3, [r7, #12]
 8009ab2:	b2da      	uxtb	r2, r3
 8009ab4:	79fb      	ldrb	r3, [r7, #7]
 8009ab6:	f003 030f 	and.w	r3, r3, #15
 8009aba:	b2db      	uxtb	r3, r3
 8009abc:	4413      	add	r3, r2
 8009abe:	b2db      	uxtb	r3, r3
}
 8009ac0:	4618      	mov	r0, r3
 8009ac2:	3714      	adds	r7, #20
 8009ac4:	46bd      	mov	sp, r7
 8009ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aca:	4770      	bx	lr

08009acc <HAL_RTCEx_EnableBypassShadow>:
  * @note   When the Bypass Shadow is enabled the calendar value are taken
  *         directly from the Calendar counter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_EnableBypassShadow(RTC_HandleTypeDef* hrtc)
{
 8009acc:	b480      	push	{r7}
 8009ace:	b083      	sub	sp, #12
 8009ad0:	af00      	add	r7, sp, #0
 8009ad2:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hrtc);
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009ada:	2b01      	cmp	r3, #1
 8009adc:	d101      	bne.n	8009ae2 <HAL_RTCEx_EnableBypassShadow+0x16>
 8009ade:	2302      	movs	r3, #2
 8009ae0:	e024      	b.n	8009b2c <HAL_RTCEx_EnableBypassShadow+0x60>
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	2201      	movs	r2, #1
 8009ae6:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	2202      	movs	r2, #2
 8009aee:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	681b      	ldr	r3, [r3, #0]
 8009af6:	22ca      	movs	r2, #202	; 0xca
 8009af8:	625a      	str	r2, [r3, #36]	; 0x24
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	681b      	ldr	r3, [r3, #0]
 8009afe:	2253      	movs	r2, #83	; 0x53
 8009b00:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the BYPSHAD bit */
  hrtc->Instance->CR |= (uint8_t)RTC_CR_BYPSHAD;
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	681b      	ldr	r3, [r3, #0]
 8009b06:	689a      	ldr	r2, [r3, #8]
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	681b      	ldr	r3, [r3, #0]
 8009b0c:	f042 0220 	orr.w	r2, r2, #32
 8009b10:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	681b      	ldr	r3, [r3, #0]
 8009b16:	22ff      	movs	r2, #255	; 0xff
 8009b18:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	2201      	movs	r2, #1
 8009b1e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	2200      	movs	r2, #0
 8009b26:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8009b2a:	2300      	movs	r3, #0
}
 8009b2c:	4618      	mov	r0, r3
 8009b2e:	370c      	adds	r7, #12
 8009b30:	46bd      	mov	sp, r7
 8009b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b36:	4770      	bx	lr

08009b38 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8009b38:	b580      	push	{r7, lr}
 8009b3a:	b084      	sub	sp, #16
 8009b3c:	af00      	add	r7, sp, #0
 8009b3e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	2b00      	cmp	r3, #0
 8009b44:	d101      	bne.n	8009b4a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8009b46:	2301      	movs	r3, #1
 8009b48:	e095      	b.n	8009c76 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b4e:	2b00      	cmp	r3, #0
 8009b50:	d108      	bne.n	8009b64 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	685b      	ldr	r3, [r3, #4]
 8009b56:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009b5a:	d009      	beq.n	8009b70 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	2200      	movs	r2, #0
 8009b60:	61da      	str	r2, [r3, #28]
 8009b62:	e005      	b.n	8009b70 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	2200      	movs	r2, #0
 8009b68:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	2200      	movs	r2, #0
 8009b6e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	2200      	movs	r2, #0
 8009b74:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8009b7c:	b2db      	uxtb	r3, r3
 8009b7e:	2b00      	cmp	r3, #0
 8009b80:	d106      	bne.n	8009b90 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	2200      	movs	r2, #0
 8009b86:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8009b8a:	6878      	ldr	r0, [r7, #4]
 8009b8c:	f7fb fff4 	bl	8005b78 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	2202      	movs	r2, #2
 8009b94:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	681b      	ldr	r3, [r3, #0]
 8009b9c:	681a      	ldr	r2, [r3, #0]
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	681b      	ldr	r3, [r3, #0]
 8009ba2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009ba6:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	68db      	ldr	r3, [r3, #12]
 8009bac:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8009bb0:	d902      	bls.n	8009bb8 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8009bb2:	2300      	movs	r3, #0
 8009bb4:	60fb      	str	r3, [r7, #12]
 8009bb6:	e002      	b.n	8009bbe <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8009bb8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009bbc:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	68db      	ldr	r3, [r3, #12]
 8009bc2:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8009bc6:	d007      	beq.n	8009bd8 <HAL_SPI_Init+0xa0>
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	68db      	ldr	r3, [r3, #12]
 8009bcc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8009bd0:	d002      	beq.n	8009bd8 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	2200      	movs	r2, #0
 8009bd6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	685b      	ldr	r3, [r3, #4]
 8009bdc:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	689b      	ldr	r3, [r3, #8]
 8009be4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8009be8:	431a      	orrs	r2, r3
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	691b      	ldr	r3, [r3, #16]
 8009bee:	f003 0302 	and.w	r3, r3, #2
 8009bf2:	431a      	orrs	r2, r3
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	695b      	ldr	r3, [r3, #20]
 8009bf8:	f003 0301 	and.w	r3, r3, #1
 8009bfc:	431a      	orrs	r2, r3
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	699b      	ldr	r3, [r3, #24]
 8009c02:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009c06:	431a      	orrs	r2, r3
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	69db      	ldr	r3, [r3, #28]
 8009c0c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009c10:	431a      	orrs	r2, r3
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	6a1b      	ldr	r3, [r3, #32]
 8009c16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009c1a:	ea42 0103 	orr.w	r1, r2, r3
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009c22:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	681b      	ldr	r3, [r3, #0]
 8009c2a:	430a      	orrs	r2, r1
 8009c2c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	699b      	ldr	r3, [r3, #24]
 8009c32:	0c1b      	lsrs	r3, r3, #16
 8009c34:	f003 0204 	and.w	r2, r3, #4
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c3c:	f003 0310 	and.w	r3, r3, #16
 8009c40:	431a      	orrs	r2, r3
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009c46:	f003 0308 	and.w	r3, r3, #8
 8009c4a:	431a      	orrs	r2, r3
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	68db      	ldr	r3, [r3, #12]
 8009c50:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8009c54:	ea42 0103 	orr.w	r1, r2, r3
 8009c58:	68fb      	ldr	r3, [r7, #12]
 8009c5a:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	681b      	ldr	r3, [r3, #0]
 8009c62:	430a      	orrs	r2, r1
 8009c64:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	2200      	movs	r2, #0
 8009c6a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	2201      	movs	r2, #1
 8009c70:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8009c74:	2300      	movs	r3, #0
}
 8009c76:	4618      	mov	r0, r3
 8009c78:	3710      	adds	r7, #16
 8009c7a:	46bd      	mov	sp, r7
 8009c7c:	bd80      	pop	{r7, pc}

08009c7e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009c7e:	b580      	push	{r7, lr}
 8009c80:	b088      	sub	sp, #32
 8009c82:	af00      	add	r7, sp, #0
 8009c84:	60f8      	str	r0, [r7, #12]
 8009c86:	60b9      	str	r1, [r7, #8]
 8009c88:	603b      	str	r3, [r7, #0]
 8009c8a:	4613      	mov	r3, r2
 8009c8c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8009c8e:	2300      	movs	r3, #0
 8009c90:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8009c92:	68fb      	ldr	r3, [r7, #12]
 8009c94:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8009c98:	2b01      	cmp	r3, #1
 8009c9a:	d101      	bne.n	8009ca0 <HAL_SPI_Transmit+0x22>
 8009c9c:	2302      	movs	r3, #2
 8009c9e:	e158      	b.n	8009f52 <HAL_SPI_Transmit+0x2d4>
 8009ca0:	68fb      	ldr	r3, [r7, #12]
 8009ca2:	2201      	movs	r2, #1
 8009ca4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009ca8:	f7fc f9c8 	bl	800603c <HAL_GetTick>
 8009cac:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8009cae:	88fb      	ldrh	r3, [r7, #6]
 8009cb0:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8009cb2:	68fb      	ldr	r3, [r7, #12]
 8009cb4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8009cb8:	b2db      	uxtb	r3, r3
 8009cba:	2b01      	cmp	r3, #1
 8009cbc:	d002      	beq.n	8009cc4 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8009cbe:	2302      	movs	r3, #2
 8009cc0:	77fb      	strb	r3, [r7, #31]
    goto error;
 8009cc2:	e13d      	b.n	8009f40 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8009cc4:	68bb      	ldr	r3, [r7, #8]
 8009cc6:	2b00      	cmp	r3, #0
 8009cc8:	d002      	beq.n	8009cd0 <HAL_SPI_Transmit+0x52>
 8009cca:	88fb      	ldrh	r3, [r7, #6]
 8009ccc:	2b00      	cmp	r3, #0
 8009cce:	d102      	bne.n	8009cd6 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8009cd0:	2301      	movs	r3, #1
 8009cd2:	77fb      	strb	r3, [r7, #31]
    goto error;
 8009cd4:	e134      	b.n	8009f40 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8009cd6:	68fb      	ldr	r3, [r7, #12]
 8009cd8:	2203      	movs	r2, #3
 8009cda:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009cde:	68fb      	ldr	r3, [r7, #12]
 8009ce0:	2200      	movs	r2, #0
 8009ce2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8009ce4:	68fb      	ldr	r3, [r7, #12]
 8009ce6:	68ba      	ldr	r2, [r7, #8]
 8009ce8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8009cea:	68fb      	ldr	r3, [r7, #12]
 8009cec:	88fa      	ldrh	r2, [r7, #6]
 8009cee:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8009cf0:	68fb      	ldr	r3, [r7, #12]
 8009cf2:	88fa      	ldrh	r2, [r7, #6]
 8009cf4:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8009cf6:	68fb      	ldr	r3, [r7, #12]
 8009cf8:	2200      	movs	r2, #0
 8009cfa:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8009cfc:	68fb      	ldr	r3, [r7, #12]
 8009cfe:	2200      	movs	r2, #0
 8009d00:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8009d04:	68fb      	ldr	r3, [r7, #12]
 8009d06:	2200      	movs	r2, #0
 8009d08:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8009d0c:	68fb      	ldr	r3, [r7, #12]
 8009d0e:	2200      	movs	r2, #0
 8009d10:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8009d12:	68fb      	ldr	r3, [r7, #12]
 8009d14:	2200      	movs	r2, #0
 8009d16:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009d18:	68fb      	ldr	r3, [r7, #12]
 8009d1a:	689b      	ldr	r3, [r3, #8]
 8009d1c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009d20:	d10f      	bne.n	8009d42 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8009d22:	68fb      	ldr	r3, [r7, #12]
 8009d24:	681b      	ldr	r3, [r3, #0]
 8009d26:	681a      	ldr	r2, [r3, #0]
 8009d28:	68fb      	ldr	r3, [r7, #12]
 8009d2a:	681b      	ldr	r3, [r3, #0]
 8009d2c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009d30:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8009d32:	68fb      	ldr	r3, [r7, #12]
 8009d34:	681b      	ldr	r3, [r3, #0]
 8009d36:	681a      	ldr	r2, [r3, #0]
 8009d38:	68fb      	ldr	r3, [r7, #12]
 8009d3a:	681b      	ldr	r3, [r3, #0]
 8009d3c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009d40:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009d42:	68fb      	ldr	r3, [r7, #12]
 8009d44:	681b      	ldr	r3, [r3, #0]
 8009d46:	681b      	ldr	r3, [r3, #0]
 8009d48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009d4c:	2b40      	cmp	r3, #64	; 0x40
 8009d4e:	d007      	beq.n	8009d60 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009d50:	68fb      	ldr	r3, [r7, #12]
 8009d52:	681b      	ldr	r3, [r3, #0]
 8009d54:	681a      	ldr	r2, [r3, #0]
 8009d56:	68fb      	ldr	r3, [r7, #12]
 8009d58:	681b      	ldr	r3, [r3, #0]
 8009d5a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009d5e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009d60:	68fb      	ldr	r3, [r7, #12]
 8009d62:	68db      	ldr	r3, [r3, #12]
 8009d64:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8009d68:	d94b      	bls.n	8009e02 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009d6a:	68fb      	ldr	r3, [r7, #12]
 8009d6c:	685b      	ldr	r3, [r3, #4]
 8009d6e:	2b00      	cmp	r3, #0
 8009d70:	d002      	beq.n	8009d78 <HAL_SPI_Transmit+0xfa>
 8009d72:	8afb      	ldrh	r3, [r7, #22]
 8009d74:	2b01      	cmp	r3, #1
 8009d76:	d13e      	bne.n	8009df6 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009d78:	68fb      	ldr	r3, [r7, #12]
 8009d7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d7c:	881a      	ldrh	r2, [r3, #0]
 8009d7e:	68fb      	ldr	r3, [r7, #12]
 8009d80:	681b      	ldr	r3, [r3, #0]
 8009d82:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8009d84:	68fb      	ldr	r3, [r7, #12]
 8009d86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d88:	1c9a      	adds	r2, r3, #2
 8009d8a:	68fb      	ldr	r3, [r7, #12]
 8009d8c:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8009d8e:	68fb      	ldr	r3, [r7, #12]
 8009d90:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009d92:	b29b      	uxth	r3, r3
 8009d94:	3b01      	subs	r3, #1
 8009d96:	b29a      	uxth	r2, r3
 8009d98:	68fb      	ldr	r3, [r7, #12]
 8009d9a:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8009d9c:	e02b      	b.n	8009df6 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8009d9e:	68fb      	ldr	r3, [r7, #12]
 8009da0:	681b      	ldr	r3, [r3, #0]
 8009da2:	689b      	ldr	r3, [r3, #8]
 8009da4:	f003 0302 	and.w	r3, r3, #2
 8009da8:	2b02      	cmp	r3, #2
 8009daa:	d112      	bne.n	8009dd2 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009dac:	68fb      	ldr	r3, [r7, #12]
 8009dae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009db0:	881a      	ldrh	r2, [r3, #0]
 8009db2:	68fb      	ldr	r3, [r7, #12]
 8009db4:	681b      	ldr	r3, [r3, #0]
 8009db6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8009db8:	68fb      	ldr	r3, [r7, #12]
 8009dba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009dbc:	1c9a      	adds	r2, r3, #2
 8009dbe:	68fb      	ldr	r3, [r7, #12]
 8009dc0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8009dc2:	68fb      	ldr	r3, [r7, #12]
 8009dc4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009dc6:	b29b      	uxth	r3, r3
 8009dc8:	3b01      	subs	r3, #1
 8009dca:	b29a      	uxth	r2, r3
 8009dcc:	68fb      	ldr	r3, [r7, #12]
 8009dce:	87da      	strh	r2, [r3, #62]	; 0x3e
 8009dd0:	e011      	b.n	8009df6 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009dd2:	f7fc f933 	bl	800603c <HAL_GetTick>
 8009dd6:	4602      	mov	r2, r0
 8009dd8:	69bb      	ldr	r3, [r7, #24]
 8009dda:	1ad3      	subs	r3, r2, r3
 8009ddc:	683a      	ldr	r2, [r7, #0]
 8009dde:	429a      	cmp	r2, r3
 8009de0:	d803      	bhi.n	8009dea <HAL_SPI_Transmit+0x16c>
 8009de2:	683b      	ldr	r3, [r7, #0]
 8009de4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009de8:	d102      	bne.n	8009df0 <HAL_SPI_Transmit+0x172>
 8009dea:	683b      	ldr	r3, [r7, #0]
 8009dec:	2b00      	cmp	r3, #0
 8009dee:	d102      	bne.n	8009df6 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8009df0:	2303      	movs	r3, #3
 8009df2:	77fb      	strb	r3, [r7, #31]
          goto error;
 8009df4:	e0a4      	b.n	8009f40 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8009df6:	68fb      	ldr	r3, [r7, #12]
 8009df8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009dfa:	b29b      	uxth	r3, r3
 8009dfc:	2b00      	cmp	r3, #0
 8009dfe:	d1ce      	bne.n	8009d9e <HAL_SPI_Transmit+0x120>
 8009e00:	e07c      	b.n	8009efc <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009e02:	68fb      	ldr	r3, [r7, #12]
 8009e04:	685b      	ldr	r3, [r3, #4]
 8009e06:	2b00      	cmp	r3, #0
 8009e08:	d002      	beq.n	8009e10 <HAL_SPI_Transmit+0x192>
 8009e0a:	8afb      	ldrh	r3, [r7, #22]
 8009e0c:	2b01      	cmp	r3, #1
 8009e0e:	d170      	bne.n	8009ef2 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8009e10:	68fb      	ldr	r3, [r7, #12]
 8009e12:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009e14:	b29b      	uxth	r3, r3
 8009e16:	2b01      	cmp	r3, #1
 8009e18:	d912      	bls.n	8009e40 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009e1a:	68fb      	ldr	r3, [r7, #12]
 8009e1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e1e:	881a      	ldrh	r2, [r3, #0]
 8009e20:	68fb      	ldr	r3, [r7, #12]
 8009e22:	681b      	ldr	r3, [r3, #0]
 8009e24:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8009e26:	68fb      	ldr	r3, [r7, #12]
 8009e28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e2a:	1c9a      	adds	r2, r3, #2
 8009e2c:	68fb      	ldr	r3, [r7, #12]
 8009e2e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8009e30:	68fb      	ldr	r3, [r7, #12]
 8009e32:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009e34:	b29b      	uxth	r3, r3
 8009e36:	3b02      	subs	r3, #2
 8009e38:	b29a      	uxth	r2, r3
 8009e3a:	68fb      	ldr	r3, [r7, #12]
 8009e3c:	87da      	strh	r2, [r3, #62]	; 0x3e
 8009e3e:	e058      	b.n	8009ef2 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8009e40:	68fb      	ldr	r3, [r7, #12]
 8009e42:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009e44:	68fb      	ldr	r3, [r7, #12]
 8009e46:	681b      	ldr	r3, [r3, #0]
 8009e48:	330c      	adds	r3, #12
 8009e4a:	7812      	ldrb	r2, [r2, #0]
 8009e4c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8009e4e:	68fb      	ldr	r3, [r7, #12]
 8009e50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e52:	1c5a      	adds	r2, r3, #1
 8009e54:	68fb      	ldr	r3, [r7, #12]
 8009e56:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8009e58:	68fb      	ldr	r3, [r7, #12]
 8009e5a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009e5c:	b29b      	uxth	r3, r3
 8009e5e:	3b01      	subs	r3, #1
 8009e60:	b29a      	uxth	r2, r3
 8009e62:	68fb      	ldr	r3, [r7, #12]
 8009e64:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8009e66:	e044      	b.n	8009ef2 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8009e68:	68fb      	ldr	r3, [r7, #12]
 8009e6a:	681b      	ldr	r3, [r3, #0]
 8009e6c:	689b      	ldr	r3, [r3, #8]
 8009e6e:	f003 0302 	and.w	r3, r3, #2
 8009e72:	2b02      	cmp	r3, #2
 8009e74:	d12b      	bne.n	8009ece <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8009e76:	68fb      	ldr	r3, [r7, #12]
 8009e78:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009e7a:	b29b      	uxth	r3, r3
 8009e7c:	2b01      	cmp	r3, #1
 8009e7e:	d912      	bls.n	8009ea6 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009e80:	68fb      	ldr	r3, [r7, #12]
 8009e82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e84:	881a      	ldrh	r2, [r3, #0]
 8009e86:	68fb      	ldr	r3, [r7, #12]
 8009e88:	681b      	ldr	r3, [r3, #0]
 8009e8a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8009e8c:	68fb      	ldr	r3, [r7, #12]
 8009e8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e90:	1c9a      	adds	r2, r3, #2
 8009e92:	68fb      	ldr	r3, [r7, #12]
 8009e94:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8009e96:	68fb      	ldr	r3, [r7, #12]
 8009e98:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009e9a:	b29b      	uxth	r3, r3
 8009e9c:	3b02      	subs	r3, #2
 8009e9e:	b29a      	uxth	r2, r3
 8009ea0:	68fb      	ldr	r3, [r7, #12]
 8009ea2:	87da      	strh	r2, [r3, #62]	; 0x3e
 8009ea4:	e025      	b.n	8009ef2 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8009ea6:	68fb      	ldr	r3, [r7, #12]
 8009ea8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009eaa:	68fb      	ldr	r3, [r7, #12]
 8009eac:	681b      	ldr	r3, [r3, #0]
 8009eae:	330c      	adds	r3, #12
 8009eb0:	7812      	ldrb	r2, [r2, #0]
 8009eb2:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8009eb4:	68fb      	ldr	r3, [r7, #12]
 8009eb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009eb8:	1c5a      	adds	r2, r3, #1
 8009eba:	68fb      	ldr	r3, [r7, #12]
 8009ebc:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8009ebe:	68fb      	ldr	r3, [r7, #12]
 8009ec0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009ec2:	b29b      	uxth	r3, r3
 8009ec4:	3b01      	subs	r3, #1
 8009ec6:	b29a      	uxth	r2, r3
 8009ec8:	68fb      	ldr	r3, [r7, #12]
 8009eca:	87da      	strh	r2, [r3, #62]	; 0x3e
 8009ecc:	e011      	b.n	8009ef2 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009ece:	f7fc f8b5 	bl	800603c <HAL_GetTick>
 8009ed2:	4602      	mov	r2, r0
 8009ed4:	69bb      	ldr	r3, [r7, #24]
 8009ed6:	1ad3      	subs	r3, r2, r3
 8009ed8:	683a      	ldr	r2, [r7, #0]
 8009eda:	429a      	cmp	r2, r3
 8009edc:	d803      	bhi.n	8009ee6 <HAL_SPI_Transmit+0x268>
 8009ede:	683b      	ldr	r3, [r7, #0]
 8009ee0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009ee4:	d102      	bne.n	8009eec <HAL_SPI_Transmit+0x26e>
 8009ee6:	683b      	ldr	r3, [r7, #0]
 8009ee8:	2b00      	cmp	r3, #0
 8009eea:	d102      	bne.n	8009ef2 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8009eec:	2303      	movs	r3, #3
 8009eee:	77fb      	strb	r3, [r7, #31]
          goto error;
 8009ef0:	e026      	b.n	8009f40 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8009ef2:	68fb      	ldr	r3, [r7, #12]
 8009ef4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009ef6:	b29b      	uxth	r3, r3
 8009ef8:	2b00      	cmp	r3, #0
 8009efa:	d1b5      	bne.n	8009e68 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8009efc:	69ba      	ldr	r2, [r7, #24]
 8009efe:	6839      	ldr	r1, [r7, #0]
 8009f00:	68f8      	ldr	r0, [r7, #12]
 8009f02:	f000 f941 	bl	800a188 <SPI_EndRxTxTransaction>
 8009f06:	4603      	mov	r3, r0
 8009f08:	2b00      	cmp	r3, #0
 8009f0a:	d002      	beq.n	8009f12 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8009f0c:	68fb      	ldr	r3, [r7, #12]
 8009f0e:	2220      	movs	r2, #32
 8009f10:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8009f12:	68fb      	ldr	r3, [r7, #12]
 8009f14:	689b      	ldr	r3, [r3, #8]
 8009f16:	2b00      	cmp	r3, #0
 8009f18:	d10a      	bne.n	8009f30 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009f1a:	2300      	movs	r3, #0
 8009f1c:	613b      	str	r3, [r7, #16]
 8009f1e:	68fb      	ldr	r3, [r7, #12]
 8009f20:	681b      	ldr	r3, [r3, #0]
 8009f22:	68db      	ldr	r3, [r3, #12]
 8009f24:	613b      	str	r3, [r7, #16]
 8009f26:	68fb      	ldr	r3, [r7, #12]
 8009f28:	681b      	ldr	r3, [r3, #0]
 8009f2a:	689b      	ldr	r3, [r3, #8]
 8009f2c:	613b      	str	r3, [r7, #16]
 8009f2e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009f30:	68fb      	ldr	r3, [r7, #12]
 8009f32:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009f34:	2b00      	cmp	r3, #0
 8009f36:	d002      	beq.n	8009f3e <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8009f38:	2301      	movs	r3, #1
 8009f3a:	77fb      	strb	r3, [r7, #31]
 8009f3c:	e000      	b.n	8009f40 <HAL_SPI_Transmit+0x2c2>
  }

error:
 8009f3e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8009f40:	68fb      	ldr	r3, [r7, #12]
 8009f42:	2201      	movs	r2, #1
 8009f44:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8009f48:	68fb      	ldr	r3, [r7, #12]
 8009f4a:	2200      	movs	r2, #0
 8009f4c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8009f50:	7ffb      	ldrb	r3, [r7, #31]
}
 8009f52:	4618      	mov	r0, r3
 8009f54:	3720      	adds	r7, #32
 8009f56:	46bd      	mov	sp, r7
 8009f58:	bd80      	pop	{r7, pc}
	...

08009f5c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8009f5c:	b580      	push	{r7, lr}
 8009f5e:	b088      	sub	sp, #32
 8009f60:	af00      	add	r7, sp, #0
 8009f62:	60f8      	str	r0, [r7, #12]
 8009f64:	60b9      	str	r1, [r7, #8]
 8009f66:	603b      	str	r3, [r7, #0]
 8009f68:	4613      	mov	r3, r2
 8009f6a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8009f6c:	f7fc f866 	bl	800603c <HAL_GetTick>
 8009f70:	4602      	mov	r2, r0
 8009f72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f74:	1a9b      	subs	r3, r3, r2
 8009f76:	683a      	ldr	r2, [r7, #0]
 8009f78:	4413      	add	r3, r2
 8009f7a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8009f7c:	f7fc f85e 	bl	800603c <HAL_GetTick>
 8009f80:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8009f82:	4b39      	ldr	r3, [pc, #228]	; (800a068 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8009f84:	681b      	ldr	r3, [r3, #0]
 8009f86:	015b      	lsls	r3, r3, #5
 8009f88:	0d1b      	lsrs	r3, r3, #20
 8009f8a:	69fa      	ldr	r2, [r7, #28]
 8009f8c:	fb02 f303 	mul.w	r3, r2, r3
 8009f90:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009f92:	e054      	b.n	800a03e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8009f94:	683b      	ldr	r3, [r7, #0]
 8009f96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009f9a:	d050      	beq.n	800a03e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8009f9c:	f7fc f84e 	bl	800603c <HAL_GetTick>
 8009fa0:	4602      	mov	r2, r0
 8009fa2:	69bb      	ldr	r3, [r7, #24]
 8009fa4:	1ad3      	subs	r3, r2, r3
 8009fa6:	69fa      	ldr	r2, [r7, #28]
 8009fa8:	429a      	cmp	r2, r3
 8009faa:	d902      	bls.n	8009fb2 <SPI_WaitFlagStateUntilTimeout+0x56>
 8009fac:	69fb      	ldr	r3, [r7, #28]
 8009fae:	2b00      	cmp	r3, #0
 8009fb0:	d13d      	bne.n	800a02e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8009fb2:	68fb      	ldr	r3, [r7, #12]
 8009fb4:	681b      	ldr	r3, [r3, #0]
 8009fb6:	685a      	ldr	r2, [r3, #4]
 8009fb8:	68fb      	ldr	r3, [r7, #12]
 8009fba:	681b      	ldr	r3, [r3, #0]
 8009fbc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8009fc0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009fc2:	68fb      	ldr	r3, [r7, #12]
 8009fc4:	685b      	ldr	r3, [r3, #4]
 8009fc6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009fca:	d111      	bne.n	8009ff0 <SPI_WaitFlagStateUntilTimeout+0x94>
 8009fcc:	68fb      	ldr	r3, [r7, #12]
 8009fce:	689b      	ldr	r3, [r3, #8]
 8009fd0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009fd4:	d004      	beq.n	8009fe0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009fd6:	68fb      	ldr	r3, [r7, #12]
 8009fd8:	689b      	ldr	r3, [r3, #8]
 8009fda:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009fde:	d107      	bne.n	8009ff0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8009fe0:	68fb      	ldr	r3, [r7, #12]
 8009fe2:	681b      	ldr	r3, [r3, #0]
 8009fe4:	681a      	ldr	r2, [r3, #0]
 8009fe6:	68fb      	ldr	r3, [r7, #12]
 8009fe8:	681b      	ldr	r3, [r3, #0]
 8009fea:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009fee:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009ff0:	68fb      	ldr	r3, [r7, #12]
 8009ff2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009ff4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009ff8:	d10f      	bne.n	800a01a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8009ffa:	68fb      	ldr	r3, [r7, #12]
 8009ffc:	681b      	ldr	r3, [r3, #0]
 8009ffe:	681a      	ldr	r2, [r3, #0]
 800a000:	68fb      	ldr	r3, [r7, #12]
 800a002:	681b      	ldr	r3, [r3, #0]
 800a004:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800a008:	601a      	str	r2, [r3, #0]
 800a00a:	68fb      	ldr	r3, [r7, #12]
 800a00c:	681b      	ldr	r3, [r3, #0]
 800a00e:	681a      	ldr	r2, [r3, #0]
 800a010:	68fb      	ldr	r3, [r7, #12]
 800a012:	681b      	ldr	r3, [r3, #0]
 800a014:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800a018:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800a01a:	68fb      	ldr	r3, [r7, #12]
 800a01c:	2201      	movs	r2, #1
 800a01e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800a022:	68fb      	ldr	r3, [r7, #12]
 800a024:	2200      	movs	r2, #0
 800a026:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800a02a:	2303      	movs	r3, #3
 800a02c:	e017      	b.n	800a05e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800a02e:	697b      	ldr	r3, [r7, #20]
 800a030:	2b00      	cmp	r3, #0
 800a032:	d101      	bne.n	800a038 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800a034:	2300      	movs	r3, #0
 800a036:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800a038:	697b      	ldr	r3, [r7, #20]
 800a03a:	3b01      	subs	r3, #1
 800a03c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800a03e:	68fb      	ldr	r3, [r7, #12]
 800a040:	681b      	ldr	r3, [r3, #0]
 800a042:	689a      	ldr	r2, [r3, #8]
 800a044:	68bb      	ldr	r3, [r7, #8]
 800a046:	4013      	ands	r3, r2
 800a048:	68ba      	ldr	r2, [r7, #8]
 800a04a:	429a      	cmp	r2, r3
 800a04c:	bf0c      	ite	eq
 800a04e:	2301      	moveq	r3, #1
 800a050:	2300      	movne	r3, #0
 800a052:	b2db      	uxtb	r3, r3
 800a054:	461a      	mov	r2, r3
 800a056:	79fb      	ldrb	r3, [r7, #7]
 800a058:	429a      	cmp	r2, r3
 800a05a:	d19b      	bne.n	8009f94 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800a05c:	2300      	movs	r3, #0
}
 800a05e:	4618      	mov	r0, r3
 800a060:	3720      	adds	r7, #32
 800a062:	46bd      	mov	sp, r7
 800a064:	bd80      	pop	{r7, pc}
 800a066:	bf00      	nop
 800a068:	20000014 	.word	0x20000014

0800a06c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800a06c:	b580      	push	{r7, lr}
 800a06e:	b088      	sub	sp, #32
 800a070:	af00      	add	r7, sp, #0
 800a072:	60f8      	str	r0, [r7, #12]
 800a074:	60b9      	str	r1, [r7, #8]
 800a076:	607a      	str	r2, [r7, #4]
 800a078:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800a07a:	f7fb ffdf 	bl	800603c <HAL_GetTick>
 800a07e:	4602      	mov	r2, r0
 800a080:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a082:	1a9b      	subs	r3, r3, r2
 800a084:	683a      	ldr	r2, [r7, #0]
 800a086:	4413      	add	r3, r2
 800a088:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800a08a:	f7fb ffd7 	bl	800603c <HAL_GetTick>
 800a08e:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800a090:	4b3c      	ldr	r3, [pc, #240]	; (800a184 <SPI_WaitFifoStateUntilTimeout+0x118>)
 800a092:	681a      	ldr	r2, [r3, #0]
 800a094:	4613      	mov	r3, r2
 800a096:	009b      	lsls	r3, r3, #2
 800a098:	4413      	add	r3, r2
 800a09a:	00da      	lsls	r2, r3, #3
 800a09c:	1ad3      	subs	r3, r2, r3
 800a09e:	0d1b      	lsrs	r3, r3, #20
 800a0a0:	69fa      	ldr	r2, [r7, #28]
 800a0a2:	fb02 f303 	mul.w	r3, r2, r3
 800a0a6:	617b      	str	r3, [r7, #20]

  while ((hspi->Instance->SR & Fifo) != State)
 800a0a8:	e05f      	b.n	800a16a <SPI_WaitFifoStateUntilTimeout+0xfe>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800a0aa:	68bb      	ldr	r3, [r7, #8]
 800a0ac:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800a0b0:	d106      	bne.n	800a0c0 <SPI_WaitFifoStateUntilTimeout+0x54>
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	2b00      	cmp	r3, #0
 800a0b6:	d103      	bne.n	800a0c0 <SPI_WaitFifoStateUntilTimeout+0x54>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 800a0b8:	68fb      	ldr	r3, [r7, #12]
 800a0ba:	681b      	ldr	r3, [r3, #0]
 800a0bc:	330c      	adds	r3, #12
 800a0be:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 800a0c0:	683b      	ldr	r3, [r7, #0]
 800a0c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a0c6:	d050      	beq.n	800a16a <SPI_WaitFifoStateUntilTimeout+0xfe>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800a0c8:	f7fb ffb8 	bl	800603c <HAL_GetTick>
 800a0cc:	4602      	mov	r2, r0
 800a0ce:	69bb      	ldr	r3, [r7, #24]
 800a0d0:	1ad3      	subs	r3, r2, r3
 800a0d2:	69fa      	ldr	r2, [r7, #28]
 800a0d4:	429a      	cmp	r2, r3
 800a0d6:	d902      	bls.n	800a0de <SPI_WaitFifoStateUntilTimeout+0x72>
 800a0d8:	69fb      	ldr	r3, [r7, #28]
 800a0da:	2b00      	cmp	r3, #0
 800a0dc:	d13d      	bne.n	800a15a <SPI_WaitFifoStateUntilTimeout+0xee>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800a0de:	68fb      	ldr	r3, [r7, #12]
 800a0e0:	681b      	ldr	r3, [r3, #0]
 800a0e2:	685a      	ldr	r2, [r3, #4]
 800a0e4:	68fb      	ldr	r3, [r7, #12]
 800a0e6:	681b      	ldr	r3, [r3, #0]
 800a0e8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800a0ec:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a0ee:	68fb      	ldr	r3, [r7, #12]
 800a0f0:	685b      	ldr	r3, [r3, #4]
 800a0f2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a0f6:	d111      	bne.n	800a11c <SPI_WaitFifoStateUntilTimeout+0xb0>
 800a0f8:	68fb      	ldr	r3, [r7, #12]
 800a0fa:	689b      	ldr	r3, [r3, #8]
 800a0fc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a100:	d004      	beq.n	800a10c <SPI_WaitFifoStateUntilTimeout+0xa0>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800a102:	68fb      	ldr	r3, [r7, #12]
 800a104:	689b      	ldr	r3, [r3, #8]
 800a106:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a10a:	d107      	bne.n	800a11c <SPI_WaitFifoStateUntilTimeout+0xb0>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800a10c:	68fb      	ldr	r3, [r7, #12]
 800a10e:	681b      	ldr	r3, [r3, #0]
 800a110:	681a      	ldr	r2, [r3, #0]
 800a112:	68fb      	ldr	r3, [r7, #12]
 800a114:	681b      	ldr	r3, [r3, #0]
 800a116:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a11a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800a11c:	68fb      	ldr	r3, [r7, #12]
 800a11e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a120:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a124:	d10f      	bne.n	800a146 <SPI_WaitFifoStateUntilTimeout+0xda>
        {
          SPI_RESET_CRC(hspi);
 800a126:	68fb      	ldr	r3, [r7, #12]
 800a128:	681b      	ldr	r3, [r3, #0]
 800a12a:	681a      	ldr	r2, [r3, #0]
 800a12c:	68fb      	ldr	r3, [r7, #12]
 800a12e:	681b      	ldr	r3, [r3, #0]
 800a130:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800a134:	601a      	str	r2, [r3, #0]
 800a136:	68fb      	ldr	r3, [r7, #12]
 800a138:	681b      	ldr	r3, [r3, #0]
 800a13a:	681a      	ldr	r2, [r3, #0]
 800a13c:	68fb      	ldr	r3, [r7, #12]
 800a13e:	681b      	ldr	r3, [r3, #0]
 800a140:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800a144:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800a146:	68fb      	ldr	r3, [r7, #12]
 800a148:	2201      	movs	r2, #1
 800a14a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800a14e:	68fb      	ldr	r3, [r7, #12]
 800a150:	2200      	movs	r2, #0
 800a152:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800a156:	2303      	movs	r3, #3
 800a158:	e010      	b.n	800a17c <SPI_WaitFifoStateUntilTimeout+0x110>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800a15a:	697b      	ldr	r3, [r7, #20]
 800a15c:	2b00      	cmp	r3, #0
 800a15e:	d101      	bne.n	800a164 <SPI_WaitFifoStateUntilTimeout+0xf8>
      {
        tmp_timeout = 0U;
 800a160:	2300      	movs	r3, #0
 800a162:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800a164:	697b      	ldr	r3, [r7, #20]
 800a166:	3b01      	subs	r3, #1
 800a168:	617b      	str	r3, [r7, #20]
  while ((hspi->Instance->SR & Fifo) != State)
 800a16a:	68fb      	ldr	r3, [r7, #12]
 800a16c:	681b      	ldr	r3, [r3, #0]
 800a16e:	689a      	ldr	r2, [r3, #8]
 800a170:	68bb      	ldr	r3, [r7, #8]
 800a172:	4013      	ands	r3, r2
 800a174:	687a      	ldr	r2, [r7, #4]
 800a176:	429a      	cmp	r2, r3
 800a178:	d197      	bne.n	800a0aa <SPI_WaitFifoStateUntilTimeout+0x3e>
    }
  }

  return HAL_OK;
 800a17a:	2300      	movs	r3, #0
}
 800a17c:	4618      	mov	r0, r3
 800a17e:	3720      	adds	r7, #32
 800a180:	46bd      	mov	sp, r7
 800a182:	bd80      	pop	{r7, pc}
 800a184:	20000014 	.word	0x20000014

0800a188 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800a188:	b580      	push	{r7, lr}
 800a18a:	b086      	sub	sp, #24
 800a18c:	af02      	add	r7, sp, #8
 800a18e:	60f8      	str	r0, [r7, #12]
 800a190:	60b9      	str	r1, [r7, #8]
 800a192:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	9300      	str	r3, [sp, #0]
 800a198:	68bb      	ldr	r3, [r7, #8]
 800a19a:	2200      	movs	r2, #0
 800a19c:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800a1a0:	68f8      	ldr	r0, [r7, #12]
 800a1a2:	f7ff ff63 	bl	800a06c <SPI_WaitFifoStateUntilTimeout>
 800a1a6:	4603      	mov	r3, r0
 800a1a8:	2b00      	cmp	r3, #0
 800a1aa:	d007      	beq.n	800a1bc <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a1ac:	68fb      	ldr	r3, [r7, #12]
 800a1ae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a1b0:	f043 0220 	orr.w	r2, r3, #32
 800a1b4:	68fb      	ldr	r3, [r7, #12]
 800a1b6:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800a1b8:	2303      	movs	r3, #3
 800a1ba:	e027      	b.n	800a20c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	9300      	str	r3, [sp, #0]
 800a1c0:	68bb      	ldr	r3, [r7, #8]
 800a1c2:	2200      	movs	r2, #0
 800a1c4:	2180      	movs	r1, #128	; 0x80
 800a1c6:	68f8      	ldr	r0, [r7, #12]
 800a1c8:	f7ff fec8 	bl	8009f5c <SPI_WaitFlagStateUntilTimeout>
 800a1cc:	4603      	mov	r3, r0
 800a1ce:	2b00      	cmp	r3, #0
 800a1d0:	d007      	beq.n	800a1e2 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a1d2:	68fb      	ldr	r3, [r7, #12]
 800a1d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a1d6:	f043 0220 	orr.w	r2, r3, #32
 800a1da:	68fb      	ldr	r3, [r7, #12]
 800a1dc:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800a1de:	2303      	movs	r3, #3
 800a1e0:	e014      	b.n	800a20c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	9300      	str	r3, [sp, #0]
 800a1e6:	68bb      	ldr	r3, [r7, #8]
 800a1e8:	2200      	movs	r2, #0
 800a1ea:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800a1ee:	68f8      	ldr	r0, [r7, #12]
 800a1f0:	f7ff ff3c 	bl	800a06c <SPI_WaitFifoStateUntilTimeout>
 800a1f4:	4603      	mov	r3, r0
 800a1f6:	2b00      	cmp	r3, #0
 800a1f8:	d007      	beq.n	800a20a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a1fa:	68fb      	ldr	r3, [r7, #12]
 800a1fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a1fe:	f043 0220 	orr.w	r2, r3, #32
 800a202:	68fb      	ldr	r3, [r7, #12]
 800a204:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800a206:	2303      	movs	r3, #3
 800a208:	e000      	b.n	800a20c <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800a20a:	2300      	movs	r3, #0
}
 800a20c:	4618      	mov	r0, r3
 800a20e:	3710      	adds	r7, #16
 800a210:	46bd      	mov	sp, r7
 800a212:	bd80      	pop	{r7, pc}

0800a214 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a214:	b580      	push	{r7, lr}
 800a216:	b082      	sub	sp, #8
 800a218:	af00      	add	r7, sp, #0
 800a21a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	2b00      	cmp	r3, #0
 800a220:	d101      	bne.n	800a226 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a222:	2301      	movs	r3, #1
 800a224:	e049      	b.n	800a2ba <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a22c:	b2db      	uxtb	r3, r3
 800a22e:	2b00      	cmp	r3, #0
 800a230:	d106      	bne.n	800a240 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	2200      	movs	r2, #0
 800a236:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a23a:	6878      	ldr	r0, [r7, #4]
 800a23c:	f7fb fccc 	bl	8005bd8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	2202      	movs	r2, #2
 800a244:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	681a      	ldr	r2, [r3, #0]
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	3304      	adds	r3, #4
 800a250:	4619      	mov	r1, r3
 800a252:	4610      	mov	r0, r2
 800a254:	f000 fd5a 	bl	800ad0c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	2201      	movs	r2, #1
 800a25c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	2201      	movs	r2, #1
 800a264:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	2201      	movs	r2, #1
 800a26c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	2201      	movs	r2, #1
 800a274:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	2201      	movs	r2, #1
 800a27c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	2201      	movs	r2, #1
 800a284:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	2201      	movs	r2, #1
 800a28c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	2201      	movs	r2, #1
 800a294:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	2201      	movs	r2, #1
 800a29c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	2201      	movs	r2, #1
 800a2a4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	2201      	movs	r2, #1
 800a2ac:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	2201      	movs	r2, #1
 800a2b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a2b8:	2300      	movs	r3, #0
}
 800a2ba:	4618      	mov	r0, r3
 800a2bc:	3708      	adds	r7, #8
 800a2be:	46bd      	mov	sp, r7
 800a2c0:	bd80      	pop	{r7, pc}
	...

0800a2c4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800a2c4:	b480      	push	{r7}
 800a2c6:	b085      	sub	sp, #20
 800a2c8:	af00      	add	r7, sp, #0
 800a2ca:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a2d2:	b2db      	uxtb	r3, r3
 800a2d4:	2b01      	cmp	r3, #1
 800a2d6:	d001      	beq.n	800a2dc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800a2d8:	2301      	movs	r3, #1
 800a2da:	e036      	b.n	800a34a <HAL_TIM_Base_Start_IT+0x86>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	2202      	movs	r2, #2
 800a2e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	681b      	ldr	r3, [r3, #0]
 800a2e8:	68da      	ldr	r2, [r3, #12]
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	681b      	ldr	r3, [r3, #0]
 800a2ee:	f042 0201 	orr.w	r2, r2, #1
 800a2f2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	681b      	ldr	r3, [r3, #0]
 800a2f8:	4a17      	ldr	r2, [pc, #92]	; (800a358 <HAL_TIM_Base_Start_IT+0x94>)
 800a2fa:	4293      	cmp	r3, r2
 800a2fc:	d004      	beq.n	800a308 <HAL_TIM_Base_Start_IT+0x44>
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	681b      	ldr	r3, [r3, #0]
 800a302:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a306:	d115      	bne.n	800a334 <HAL_TIM_Base_Start_IT+0x70>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	681b      	ldr	r3, [r3, #0]
 800a30c:	689a      	ldr	r2, [r3, #8]
 800a30e:	4b13      	ldr	r3, [pc, #76]	; (800a35c <HAL_TIM_Base_Start_IT+0x98>)
 800a310:	4013      	ands	r3, r2
 800a312:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a314:	68fb      	ldr	r3, [r7, #12]
 800a316:	2b06      	cmp	r3, #6
 800a318:	d015      	beq.n	800a346 <HAL_TIM_Base_Start_IT+0x82>
 800a31a:	68fb      	ldr	r3, [r7, #12]
 800a31c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a320:	d011      	beq.n	800a346 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	681b      	ldr	r3, [r3, #0]
 800a326:	681a      	ldr	r2, [r3, #0]
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	681b      	ldr	r3, [r3, #0]
 800a32c:	f042 0201 	orr.w	r2, r2, #1
 800a330:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a332:	e008      	b.n	800a346 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	681b      	ldr	r3, [r3, #0]
 800a338:	681a      	ldr	r2, [r3, #0]
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	681b      	ldr	r3, [r3, #0]
 800a33e:	f042 0201 	orr.w	r2, r2, #1
 800a342:	601a      	str	r2, [r3, #0]
 800a344:	e000      	b.n	800a348 <HAL_TIM_Base_Start_IT+0x84>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a346:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800a348:	2300      	movs	r3, #0
}
 800a34a:	4618      	mov	r0, r3
 800a34c:	3714      	adds	r7, #20
 800a34e:	46bd      	mov	sp, r7
 800a350:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a354:	4770      	bx	lr
 800a356:	bf00      	nop
 800a358:	40012c00 	.word	0x40012c00
 800a35c:	00010007 	.word	0x00010007

0800a360 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800a360:	b580      	push	{r7, lr}
 800a362:	b082      	sub	sp, #8
 800a364:	af00      	add	r7, sp, #0
 800a366:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	2b00      	cmp	r3, #0
 800a36c:	d101      	bne.n	800a372 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800a36e:	2301      	movs	r3, #1
 800a370:	e049      	b.n	800a406 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a378:	b2db      	uxtb	r3, r3
 800a37a:	2b00      	cmp	r3, #0
 800a37c:	d106      	bne.n	800a38c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	2200      	movs	r2, #0
 800a382:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800a386:	6878      	ldr	r0, [r7, #4]
 800a388:	f000 f841 	bl	800a40e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	2202      	movs	r2, #2
 800a390:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	681a      	ldr	r2, [r3, #0]
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	3304      	adds	r3, #4
 800a39c:	4619      	mov	r1, r3
 800a39e:	4610      	mov	r0, r2
 800a3a0:	f000 fcb4 	bl	800ad0c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	2201      	movs	r2, #1
 800a3a8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	2201      	movs	r2, #1
 800a3b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	2201      	movs	r2, #1
 800a3b8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	2201      	movs	r2, #1
 800a3c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	2201      	movs	r2, #1
 800a3c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	2201      	movs	r2, #1
 800a3d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	2201      	movs	r2, #1
 800a3d8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	2201      	movs	r2, #1
 800a3e0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	2201      	movs	r2, #1
 800a3e8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	2201      	movs	r2, #1
 800a3f0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	2201      	movs	r2, #1
 800a3f8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	2201      	movs	r2, #1
 800a400:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a404:	2300      	movs	r3, #0
}
 800a406:	4618      	mov	r0, r3
 800a408:	3708      	adds	r7, #8
 800a40a:	46bd      	mov	sp, r7
 800a40c:	bd80      	pop	{r7, pc}

0800a40e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800a40e:	b480      	push	{r7}
 800a410:	b083      	sub	sp, #12
 800a412:	af00      	add	r7, sp, #0
 800a414:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800a416:	bf00      	nop
 800a418:	370c      	adds	r7, #12
 800a41a:	46bd      	mov	sp, r7
 800a41c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a420:	4770      	bx	lr
	...

0800a424 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800a424:	b580      	push	{r7, lr}
 800a426:	b084      	sub	sp, #16
 800a428:	af00      	add	r7, sp, #0
 800a42a:	6078      	str	r0, [r7, #4]
 800a42c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800a42e:	683b      	ldr	r3, [r7, #0]
 800a430:	2b00      	cmp	r3, #0
 800a432:	d109      	bne.n	800a448 <HAL_TIM_PWM_Start+0x24>
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a43a:	b2db      	uxtb	r3, r3
 800a43c:	2b01      	cmp	r3, #1
 800a43e:	bf14      	ite	ne
 800a440:	2301      	movne	r3, #1
 800a442:	2300      	moveq	r3, #0
 800a444:	b2db      	uxtb	r3, r3
 800a446:	e03c      	b.n	800a4c2 <HAL_TIM_PWM_Start+0x9e>
 800a448:	683b      	ldr	r3, [r7, #0]
 800a44a:	2b04      	cmp	r3, #4
 800a44c:	d109      	bne.n	800a462 <HAL_TIM_PWM_Start+0x3e>
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800a454:	b2db      	uxtb	r3, r3
 800a456:	2b01      	cmp	r3, #1
 800a458:	bf14      	ite	ne
 800a45a:	2301      	movne	r3, #1
 800a45c:	2300      	moveq	r3, #0
 800a45e:	b2db      	uxtb	r3, r3
 800a460:	e02f      	b.n	800a4c2 <HAL_TIM_PWM_Start+0x9e>
 800a462:	683b      	ldr	r3, [r7, #0]
 800a464:	2b08      	cmp	r3, #8
 800a466:	d109      	bne.n	800a47c <HAL_TIM_PWM_Start+0x58>
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a46e:	b2db      	uxtb	r3, r3
 800a470:	2b01      	cmp	r3, #1
 800a472:	bf14      	ite	ne
 800a474:	2301      	movne	r3, #1
 800a476:	2300      	moveq	r3, #0
 800a478:	b2db      	uxtb	r3, r3
 800a47a:	e022      	b.n	800a4c2 <HAL_TIM_PWM_Start+0x9e>
 800a47c:	683b      	ldr	r3, [r7, #0]
 800a47e:	2b0c      	cmp	r3, #12
 800a480:	d109      	bne.n	800a496 <HAL_TIM_PWM_Start+0x72>
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a488:	b2db      	uxtb	r3, r3
 800a48a:	2b01      	cmp	r3, #1
 800a48c:	bf14      	ite	ne
 800a48e:	2301      	movne	r3, #1
 800a490:	2300      	moveq	r3, #0
 800a492:	b2db      	uxtb	r3, r3
 800a494:	e015      	b.n	800a4c2 <HAL_TIM_PWM_Start+0x9e>
 800a496:	683b      	ldr	r3, [r7, #0]
 800a498:	2b10      	cmp	r3, #16
 800a49a:	d109      	bne.n	800a4b0 <HAL_TIM_PWM_Start+0x8c>
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800a4a2:	b2db      	uxtb	r3, r3
 800a4a4:	2b01      	cmp	r3, #1
 800a4a6:	bf14      	ite	ne
 800a4a8:	2301      	movne	r3, #1
 800a4aa:	2300      	moveq	r3, #0
 800a4ac:	b2db      	uxtb	r3, r3
 800a4ae:	e008      	b.n	800a4c2 <HAL_TIM_PWM_Start+0x9e>
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800a4b6:	b2db      	uxtb	r3, r3
 800a4b8:	2b01      	cmp	r3, #1
 800a4ba:	bf14      	ite	ne
 800a4bc:	2301      	movne	r3, #1
 800a4be:	2300      	moveq	r3, #0
 800a4c0:	b2db      	uxtb	r3, r3
 800a4c2:	2b00      	cmp	r3, #0
 800a4c4:	d001      	beq.n	800a4ca <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800a4c6:	2301      	movs	r3, #1
 800a4c8:	e079      	b.n	800a5be <HAL_TIM_PWM_Start+0x19a>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800a4ca:	683b      	ldr	r3, [r7, #0]
 800a4cc:	2b00      	cmp	r3, #0
 800a4ce:	d104      	bne.n	800a4da <HAL_TIM_PWM_Start+0xb6>
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	2202      	movs	r2, #2
 800a4d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a4d8:	e023      	b.n	800a522 <HAL_TIM_PWM_Start+0xfe>
 800a4da:	683b      	ldr	r3, [r7, #0]
 800a4dc:	2b04      	cmp	r3, #4
 800a4de:	d104      	bne.n	800a4ea <HAL_TIM_PWM_Start+0xc6>
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	2202      	movs	r2, #2
 800a4e4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a4e8:	e01b      	b.n	800a522 <HAL_TIM_PWM_Start+0xfe>
 800a4ea:	683b      	ldr	r3, [r7, #0]
 800a4ec:	2b08      	cmp	r3, #8
 800a4ee:	d104      	bne.n	800a4fa <HAL_TIM_PWM_Start+0xd6>
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	2202      	movs	r2, #2
 800a4f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a4f8:	e013      	b.n	800a522 <HAL_TIM_PWM_Start+0xfe>
 800a4fa:	683b      	ldr	r3, [r7, #0]
 800a4fc:	2b0c      	cmp	r3, #12
 800a4fe:	d104      	bne.n	800a50a <HAL_TIM_PWM_Start+0xe6>
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	2202      	movs	r2, #2
 800a504:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a508:	e00b      	b.n	800a522 <HAL_TIM_PWM_Start+0xfe>
 800a50a:	683b      	ldr	r3, [r7, #0]
 800a50c:	2b10      	cmp	r3, #16
 800a50e:	d104      	bne.n	800a51a <HAL_TIM_PWM_Start+0xf6>
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	2202      	movs	r2, #2
 800a514:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a518:	e003      	b.n	800a522 <HAL_TIM_PWM_Start+0xfe>
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	2202      	movs	r2, #2
 800a51e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	681b      	ldr	r3, [r3, #0]
 800a526:	2201      	movs	r2, #1
 800a528:	6839      	ldr	r1, [r7, #0]
 800a52a:	4618      	mov	r0, r3
 800a52c:	f000 ff6c 	bl	800b408 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	681b      	ldr	r3, [r3, #0]
 800a534:	4a24      	ldr	r2, [pc, #144]	; (800a5c8 <HAL_TIM_PWM_Start+0x1a4>)
 800a536:	4293      	cmp	r3, r2
 800a538:	d009      	beq.n	800a54e <HAL_TIM_PWM_Start+0x12a>
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	681b      	ldr	r3, [r3, #0]
 800a53e:	4a23      	ldr	r2, [pc, #140]	; (800a5cc <HAL_TIM_PWM_Start+0x1a8>)
 800a540:	4293      	cmp	r3, r2
 800a542:	d004      	beq.n	800a54e <HAL_TIM_PWM_Start+0x12a>
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	681b      	ldr	r3, [r3, #0]
 800a548:	4a21      	ldr	r2, [pc, #132]	; (800a5d0 <HAL_TIM_PWM_Start+0x1ac>)
 800a54a:	4293      	cmp	r3, r2
 800a54c:	d101      	bne.n	800a552 <HAL_TIM_PWM_Start+0x12e>
 800a54e:	2301      	movs	r3, #1
 800a550:	e000      	b.n	800a554 <HAL_TIM_PWM_Start+0x130>
 800a552:	2300      	movs	r3, #0
 800a554:	2b00      	cmp	r3, #0
 800a556:	d007      	beq.n	800a568 <HAL_TIM_PWM_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	681b      	ldr	r3, [r3, #0]
 800a55c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	681b      	ldr	r3, [r3, #0]
 800a562:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800a566:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	681b      	ldr	r3, [r3, #0]
 800a56c:	4a16      	ldr	r2, [pc, #88]	; (800a5c8 <HAL_TIM_PWM_Start+0x1a4>)
 800a56e:	4293      	cmp	r3, r2
 800a570:	d004      	beq.n	800a57c <HAL_TIM_PWM_Start+0x158>
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	681b      	ldr	r3, [r3, #0]
 800a576:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a57a:	d115      	bne.n	800a5a8 <HAL_TIM_PWM_Start+0x184>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	681b      	ldr	r3, [r3, #0]
 800a580:	689a      	ldr	r2, [r3, #8]
 800a582:	4b14      	ldr	r3, [pc, #80]	; (800a5d4 <HAL_TIM_PWM_Start+0x1b0>)
 800a584:	4013      	ands	r3, r2
 800a586:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a588:	68fb      	ldr	r3, [r7, #12]
 800a58a:	2b06      	cmp	r3, #6
 800a58c:	d015      	beq.n	800a5ba <HAL_TIM_PWM_Start+0x196>
 800a58e:	68fb      	ldr	r3, [r7, #12]
 800a590:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a594:	d011      	beq.n	800a5ba <HAL_TIM_PWM_Start+0x196>
    {
      __HAL_TIM_ENABLE(htim);
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	681b      	ldr	r3, [r3, #0]
 800a59a:	681a      	ldr	r2, [r3, #0]
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	681b      	ldr	r3, [r3, #0]
 800a5a0:	f042 0201 	orr.w	r2, r2, #1
 800a5a4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a5a6:	e008      	b.n	800a5ba <HAL_TIM_PWM_Start+0x196>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	681b      	ldr	r3, [r3, #0]
 800a5ac:	681a      	ldr	r2, [r3, #0]
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	681b      	ldr	r3, [r3, #0]
 800a5b2:	f042 0201 	orr.w	r2, r2, #1
 800a5b6:	601a      	str	r2, [r3, #0]
 800a5b8:	e000      	b.n	800a5bc <HAL_TIM_PWM_Start+0x198>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a5ba:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800a5bc:	2300      	movs	r3, #0
}
 800a5be:	4618      	mov	r0, r3
 800a5c0:	3710      	adds	r7, #16
 800a5c2:	46bd      	mov	sp, r7
 800a5c4:	bd80      	pop	{r7, pc}
 800a5c6:	bf00      	nop
 800a5c8:	40012c00 	.word	0x40012c00
 800a5cc:	40014400 	.word	0x40014400
 800a5d0:	40014800 	.word	0x40014800
 800a5d4:	00010007 	.word	0x00010007

0800a5d8 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800a5d8:	b580      	push	{r7, lr}
 800a5da:	b082      	sub	sp, #8
 800a5dc:	af00      	add	r7, sp, #0
 800a5de:	6078      	str	r0, [r7, #4]
 800a5e0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	681b      	ldr	r3, [r3, #0]
 800a5e6:	2200      	movs	r2, #0
 800a5e8:	6839      	ldr	r1, [r7, #0]
 800a5ea:	4618      	mov	r0, r3
 800a5ec:	f000 ff0c 	bl	800b408 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	681b      	ldr	r3, [r3, #0]
 800a5f4:	4a39      	ldr	r2, [pc, #228]	; (800a6dc <HAL_TIM_PWM_Stop+0x104>)
 800a5f6:	4293      	cmp	r3, r2
 800a5f8:	d009      	beq.n	800a60e <HAL_TIM_PWM_Stop+0x36>
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	681b      	ldr	r3, [r3, #0]
 800a5fe:	4a38      	ldr	r2, [pc, #224]	; (800a6e0 <HAL_TIM_PWM_Stop+0x108>)
 800a600:	4293      	cmp	r3, r2
 800a602:	d004      	beq.n	800a60e <HAL_TIM_PWM_Stop+0x36>
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	681b      	ldr	r3, [r3, #0]
 800a608:	4a36      	ldr	r2, [pc, #216]	; (800a6e4 <HAL_TIM_PWM_Stop+0x10c>)
 800a60a:	4293      	cmp	r3, r2
 800a60c:	d101      	bne.n	800a612 <HAL_TIM_PWM_Stop+0x3a>
 800a60e:	2301      	movs	r3, #1
 800a610:	e000      	b.n	800a614 <HAL_TIM_PWM_Stop+0x3c>
 800a612:	2300      	movs	r3, #0
 800a614:	2b00      	cmp	r3, #0
 800a616:	d017      	beq.n	800a648 <HAL_TIM_PWM_Stop+0x70>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	681b      	ldr	r3, [r3, #0]
 800a61c:	6a1a      	ldr	r2, [r3, #32]
 800a61e:	f241 1311 	movw	r3, #4369	; 0x1111
 800a622:	4013      	ands	r3, r2
 800a624:	2b00      	cmp	r3, #0
 800a626:	d10f      	bne.n	800a648 <HAL_TIM_PWM_Stop+0x70>
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	681b      	ldr	r3, [r3, #0]
 800a62c:	6a1a      	ldr	r2, [r3, #32]
 800a62e:	f240 4344 	movw	r3, #1092	; 0x444
 800a632:	4013      	ands	r3, r2
 800a634:	2b00      	cmp	r3, #0
 800a636:	d107      	bne.n	800a648 <HAL_TIM_PWM_Stop+0x70>
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	681b      	ldr	r3, [r3, #0]
 800a63c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	681b      	ldr	r3, [r3, #0]
 800a642:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800a646:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	681b      	ldr	r3, [r3, #0]
 800a64c:	6a1a      	ldr	r2, [r3, #32]
 800a64e:	f241 1311 	movw	r3, #4369	; 0x1111
 800a652:	4013      	ands	r3, r2
 800a654:	2b00      	cmp	r3, #0
 800a656:	d10f      	bne.n	800a678 <HAL_TIM_PWM_Stop+0xa0>
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	681b      	ldr	r3, [r3, #0]
 800a65c:	6a1a      	ldr	r2, [r3, #32]
 800a65e:	f240 4344 	movw	r3, #1092	; 0x444
 800a662:	4013      	ands	r3, r2
 800a664:	2b00      	cmp	r3, #0
 800a666:	d107      	bne.n	800a678 <HAL_TIM_PWM_Stop+0xa0>
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	681b      	ldr	r3, [r3, #0]
 800a66c:	681a      	ldr	r2, [r3, #0]
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	681b      	ldr	r3, [r3, #0]
 800a672:	f022 0201 	bic.w	r2, r2, #1
 800a676:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800a678:	683b      	ldr	r3, [r7, #0]
 800a67a:	2b00      	cmp	r3, #0
 800a67c:	d104      	bne.n	800a688 <HAL_TIM_PWM_Stop+0xb0>
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	2201      	movs	r2, #1
 800a682:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a686:	e023      	b.n	800a6d0 <HAL_TIM_PWM_Stop+0xf8>
 800a688:	683b      	ldr	r3, [r7, #0]
 800a68a:	2b04      	cmp	r3, #4
 800a68c:	d104      	bne.n	800a698 <HAL_TIM_PWM_Stop+0xc0>
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	2201      	movs	r2, #1
 800a692:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a696:	e01b      	b.n	800a6d0 <HAL_TIM_PWM_Stop+0xf8>
 800a698:	683b      	ldr	r3, [r7, #0]
 800a69a:	2b08      	cmp	r3, #8
 800a69c:	d104      	bne.n	800a6a8 <HAL_TIM_PWM_Stop+0xd0>
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	2201      	movs	r2, #1
 800a6a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a6a6:	e013      	b.n	800a6d0 <HAL_TIM_PWM_Stop+0xf8>
 800a6a8:	683b      	ldr	r3, [r7, #0]
 800a6aa:	2b0c      	cmp	r3, #12
 800a6ac:	d104      	bne.n	800a6b8 <HAL_TIM_PWM_Stop+0xe0>
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	2201      	movs	r2, #1
 800a6b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a6b6:	e00b      	b.n	800a6d0 <HAL_TIM_PWM_Stop+0xf8>
 800a6b8:	683b      	ldr	r3, [r7, #0]
 800a6ba:	2b10      	cmp	r3, #16
 800a6bc:	d104      	bne.n	800a6c8 <HAL_TIM_PWM_Stop+0xf0>
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	2201      	movs	r2, #1
 800a6c2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a6c6:	e003      	b.n	800a6d0 <HAL_TIM_PWM_Stop+0xf8>
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	2201      	movs	r2, #1
 800a6cc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 800a6d0:	2300      	movs	r3, #0
}
 800a6d2:	4618      	mov	r0, r3
 800a6d4:	3708      	adds	r7, #8
 800a6d6:	46bd      	mov	sp, r7
 800a6d8:	bd80      	pop	{r7, pc}
 800a6da:	bf00      	nop
 800a6dc:	40012c00 	.word	0x40012c00
 800a6e0:	40014400 	.word	0x40014400
 800a6e4:	40014800 	.word	0x40014800

0800a6e8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a6e8:	b580      	push	{r7, lr}
 800a6ea:	b082      	sub	sp, #8
 800a6ec:	af00      	add	r7, sp, #0
 800a6ee:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	681b      	ldr	r3, [r3, #0]
 800a6f4:	691b      	ldr	r3, [r3, #16]
 800a6f6:	f003 0302 	and.w	r3, r3, #2
 800a6fa:	2b02      	cmp	r3, #2
 800a6fc:	d122      	bne.n	800a744 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	681b      	ldr	r3, [r3, #0]
 800a702:	68db      	ldr	r3, [r3, #12]
 800a704:	f003 0302 	and.w	r3, r3, #2
 800a708:	2b02      	cmp	r3, #2
 800a70a:	d11b      	bne.n	800a744 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	681b      	ldr	r3, [r3, #0]
 800a710:	f06f 0202 	mvn.w	r2, #2
 800a714:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	2201      	movs	r2, #1
 800a71a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	681b      	ldr	r3, [r3, #0]
 800a720:	699b      	ldr	r3, [r3, #24]
 800a722:	f003 0303 	and.w	r3, r3, #3
 800a726:	2b00      	cmp	r3, #0
 800a728:	d003      	beq.n	800a732 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a72a:	6878      	ldr	r0, [r7, #4]
 800a72c:	f000 facf 	bl	800acce <HAL_TIM_IC_CaptureCallback>
 800a730:	e005      	b.n	800a73e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a732:	6878      	ldr	r0, [r7, #4]
 800a734:	f000 fac1 	bl	800acba <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a738:	6878      	ldr	r0, [r7, #4]
 800a73a:	f000 fad2 	bl	800ace2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	2200      	movs	r2, #0
 800a742:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	681b      	ldr	r3, [r3, #0]
 800a748:	691b      	ldr	r3, [r3, #16]
 800a74a:	f003 0304 	and.w	r3, r3, #4
 800a74e:	2b04      	cmp	r3, #4
 800a750:	d122      	bne.n	800a798 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	681b      	ldr	r3, [r3, #0]
 800a756:	68db      	ldr	r3, [r3, #12]
 800a758:	f003 0304 	and.w	r3, r3, #4
 800a75c:	2b04      	cmp	r3, #4
 800a75e:	d11b      	bne.n	800a798 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	681b      	ldr	r3, [r3, #0]
 800a764:	f06f 0204 	mvn.w	r2, #4
 800a768:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	2202      	movs	r2, #2
 800a76e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	681b      	ldr	r3, [r3, #0]
 800a774:	699b      	ldr	r3, [r3, #24]
 800a776:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a77a:	2b00      	cmp	r3, #0
 800a77c:	d003      	beq.n	800a786 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a77e:	6878      	ldr	r0, [r7, #4]
 800a780:	f000 faa5 	bl	800acce <HAL_TIM_IC_CaptureCallback>
 800a784:	e005      	b.n	800a792 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a786:	6878      	ldr	r0, [r7, #4]
 800a788:	f000 fa97 	bl	800acba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a78c:	6878      	ldr	r0, [r7, #4]
 800a78e:	f000 faa8 	bl	800ace2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	2200      	movs	r2, #0
 800a796:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	681b      	ldr	r3, [r3, #0]
 800a79c:	691b      	ldr	r3, [r3, #16]
 800a79e:	f003 0308 	and.w	r3, r3, #8
 800a7a2:	2b08      	cmp	r3, #8
 800a7a4:	d122      	bne.n	800a7ec <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800a7a6:	687b      	ldr	r3, [r7, #4]
 800a7a8:	681b      	ldr	r3, [r3, #0]
 800a7aa:	68db      	ldr	r3, [r3, #12]
 800a7ac:	f003 0308 	and.w	r3, r3, #8
 800a7b0:	2b08      	cmp	r3, #8
 800a7b2:	d11b      	bne.n	800a7ec <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	681b      	ldr	r3, [r3, #0]
 800a7b8:	f06f 0208 	mvn.w	r2, #8
 800a7bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	2204      	movs	r2, #4
 800a7c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	681b      	ldr	r3, [r3, #0]
 800a7c8:	69db      	ldr	r3, [r3, #28]
 800a7ca:	f003 0303 	and.w	r3, r3, #3
 800a7ce:	2b00      	cmp	r3, #0
 800a7d0:	d003      	beq.n	800a7da <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a7d2:	6878      	ldr	r0, [r7, #4]
 800a7d4:	f000 fa7b 	bl	800acce <HAL_TIM_IC_CaptureCallback>
 800a7d8:	e005      	b.n	800a7e6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a7da:	6878      	ldr	r0, [r7, #4]
 800a7dc:	f000 fa6d 	bl	800acba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a7e0:	6878      	ldr	r0, [r7, #4]
 800a7e2:	f000 fa7e 	bl	800ace2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	2200      	movs	r2, #0
 800a7ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	681b      	ldr	r3, [r3, #0]
 800a7f0:	691b      	ldr	r3, [r3, #16]
 800a7f2:	f003 0310 	and.w	r3, r3, #16
 800a7f6:	2b10      	cmp	r3, #16
 800a7f8:	d122      	bne.n	800a840 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	681b      	ldr	r3, [r3, #0]
 800a7fe:	68db      	ldr	r3, [r3, #12]
 800a800:	f003 0310 	and.w	r3, r3, #16
 800a804:	2b10      	cmp	r3, #16
 800a806:	d11b      	bne.n	800a840 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	681b      	ldr	r3, [r3, #0]
 800a80c:	f06f 0210 	mvn.w	r2, #16
 800a810:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	2208      	movs	r2, #8
 800a816:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	681b      	ldr	r3, [r3, #0]
 800a81c:	69db      	ldr	r3, [r3, #28]
 800a81e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a822:	2b00      	cmp	r3, #0
 800a824:	d003      	beq.n	800a82e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a826:	6878      	ldr	r0, [r7, #4]
 800a828:	f000 fa51 	bl	800acce <HAL_TIM_IC_CaptureCallback>
 800a82c:	e005      	b.n	800a83a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a82e:	6878      	ldr	r0, [r7, #4]
 800a830:	f000 fa43 	bl	800acba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a834:	6878      	ldr	r0, [r7, #4]
 800a836:	f000 fa54 	bl	800ace2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	2200      	movs	r2, #0
 800a83e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	681b      	ldr	r3, [r3, #0]
 800a844:	691b      	ldr	r3, [r3, #16]
 800a846:	f003 0301 	and.w	r3, r3, #1
 800a84a:	2b01      	cmp	r3, #1
 800a84c:	d10e      	bne.n	800a86c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	681b      	ldr	r3, [r3, #0]
 800a852:	68db      	ldr	r3, [r3, #12]
 800a854:	f003 0301 	and.w	r3, r3, #1
 800a858:	2b01      	cmp	r3, #1
 800a85a:	d107      	bne.n	800a86c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	681b      	ldr	r3, [r3, #0]
 800a860:	f06f 0201 	mvn.w	r2, #1
 800a864:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800a866:	6878      	ldr	r0, [r7, #4]
 800a868:	f7fa ff60 	bl	800572c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	681b      	ldr	r3, [r3, #0]
 800a870:	691b      	ldr	r3, [r3, #16]
 800a872:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a876:	2b80      	cmp	r3, #128	; 0x80
 800a878:	d10e      	bne.n	800a898 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	681b      	ldr	r3, [r3, #0]
 800a87e:	68db      	ldr	r3, [r3, #12]
 800a880:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a884:	2b80      	cmp	r3, #128	; 0x80
 800a886:	d107      	bne.n	800a898 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	681b      	ldr	r3, [r3, #0]
 800a88c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800a890:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800a892:	6878      	ldr	r0, [r7, #4]
 800a894:	f000 fed8 	bl	800b648 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	681b      	ldr	r3, [r3, #0]
 800a89c:	691b      	ldr	r3, [r3, #16]
 800a89e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a8a2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a8a6:	d10e      	bne.n	800a8c6 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	681b      	ldr	r3, [r3, #0]
 800a8ac:	68db      	ldr	r3, [r3, #12]
 800a8ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a8b2:	2b80      	cmp	r3, #128	; 0x80
 800a8b4:	d107      	bne.n	800a8c6 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	681b      	ldr	r3, [r3, #0]
 800a8ba:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800a8be:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800a8c0:	6878      	ldr	r0, [r7, #4]
 800a8c2:	f000 fecb 	bl	800b65c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	681b      	ldr	r3, [r3, #0]
 800a8ca:	691b      	ldr	r3, [r3, #16]
 800a8cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a8d0:	2b40      	cmp	r3, #64	; 0x40
 800a8d2:	d10e      	bne.n	800a8f2 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	681b      	ldr	r3, [r3, #0]
 800a8d8:	68db      	ldr	r3, [r3, #12]
 800a8da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a8de:	2b40      	cmp	r3, #64	; 0x40
 800a8e0:	d107      	bne.n	800a8f2 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	681b      	ldr	r3, [r3, #0]
 800a8e6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800a8ea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800a8ec:	6878      	ldr	r0, [r7, #4]
 800a8ee:	f000 fa02 	bl	800acf6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	681b      	ldr	r3, [r3, #0]
 800a8f6:	691b      	ldr	r3, [r3, #16]
 800a8f8:	f003 0320 	and.w	r3, r3, #32
 800a8fc:	2b20      	cmp	r3, #32
 800a8fe:	d10e      	bne.n	800a91e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	681b      	ldr	r3, [r3, #0]
 800a904:	68db      	ldr	r3, [r3, #12]
 800a906:	f003 0320 	and.w	r3, r3, #32
 800a90a:	2b20      	cmp	r3, #32
 800a90c:	d107      	bne.n	800a91e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	681b      	ldr	r3, [r3, #0]
 800a912:	f06f 0220 	mvn.w	r2, #32
 800a916:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800a918:	6878      	ldr	r0, [r7, #4]
 800a91a:	f000 fe8b 	bl	800b634 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a91e:	bf00      	nop
 800a920:	3708      	adds	r7, #8
 800a922:	46bd      	mov	sp, r7
 800a924:	bd80      	pop	{r7, pc}
	...

0800a928 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800a928:	b580      	push	{r7, lr}
 800a92a:	b084      	sub	sp, #16
 800a92c:	af00      	add	r7, sp, #0
 800a92e:	60f8      	str	r0, [r7, #12]
 800a930:	60b9      	str	r1, [r7, #8]
 800a932:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800a934:	68fb      	ldr	r3, [r7, #12]
 800a936:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a93a:	2b01      	cmp	r3, #1
 800a93c:	d101      	bne.n	800a942 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800a93e:	2302      	movs	r3, #2
 800a940:	e0fd      	b.n	800ab3e <HAL_TIM_PWM_ConfigChannel+0x216>
 800a942:	68fb      	ldr	r3, [r7, #12]
 800a944:	2201      	movs	r2, #1
 800a946:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	2b14      	cmp	r3, #20
 800a94e:	f200 80f0 	bhi.w	800ab32 <HAL_TIM_PWM_ConfigChannel+0x20a>
 800a952:	a201      	add	r2, pc, #4	; (adr r2, 800a958 <HAL_TIM_PWM_ConfigChannel+0x30>)
 800a954:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a958:	0800a9ad 	.word	0x0800a9ad
 800a95c:	0800ab33 	.word	0x0800ab33
 800a960:	0800ab33 	.word	0x0800ab33
 800a964:	0800ab33 	.word	0x0800ab33
 800a968:	0800a9ed 	.word	0x0800a9ed
 800a96c:	0800ab33 	.word	0x0800ab33
 800a970:	0800ab33 	.word	0x0800ab33
 800a974:	0800ab33 	.word	0x0800ab33
 800a978:	0800aa2f 	.word	0x0800aa2f
 800a97c:	0800ab33 	.word	0x0800ab33
 800a980:	0800ab33 	.word	0x0800ab33
 800a984:	0800ab33 	.word	0x0800ab33
 800a988:	0800aa6f 	.word	0x0800aa6f
 800a98c:	0800ab33 	.word	0x0800ab33
 800a990:	0800ab33 	.word	0x0800ab33
 800a994:	0800ab33 	.word	0x0800ab33
 800a998:	0800aab1 	.word	0x0800aab1
 800a99c:	0800ab33 	.word	0x0800ab33
 800a9a0:	0800ab33 	.word	0x0800ab33
 800a9a4:	0800ab33 	.word	0x0800ab33
 800a9a8:	0800aaf1 	.word	0x0800aaf1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800a9ac:	68fb      	ldr	r3, [r7, #12]
 800a9ae:	681b      	ldr	r3, [r3, #0]
 800a9b0:	68b9      	ldr	r1, [r7, #8]
 800a9b2:	4618      	mov	r0, r3
 800a9b4:	f000 fa0e 	bl	800add4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800a9b8:	68fb      	ldr	r3, [r7, #12]
 800a9ba:	681b      	ldr	r3, [r3, #0]
 800a9bc:	699a      	ldr	r2, [r3, #24]
 800a9be:	68fb      	ldr	r3, [r7, #12]
 800a9c0:	681b      	ldr	r3, [r3, #0]
 800a9c2:	f042 0208 	orr.w	r2, r2, #8
 800a9c6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800a9c8:	68fb      	ldr	r3, [r7, #12]
 800a9ca:	681b      	ldr	r3, [r3, #0]
 800a9cc:	699a      	ldr	r2, [r3, #24]
 800a9ce:	68fb      	ldr	r3, [r7, #12]
 800a9d0:	681b      	ldr	r3, [r3, #0]
 800a9d2:	f022 0204 	bic.w	r2, r2, #4
 800a9d6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800a9d8:	68fb      	ldr	r3, [r7, #12]
 800a9da:	681b      	ldr	r3, [r3, #0]
 800a9dc:	6999      	ldr	r1, [r3, #24]
 800a9de:	68bb      	ldr	r3, [r7, #8]
 800a9e0:	691a      	ldr	r2, [r3, #16]
 800a9e2:	68fb      	ldr	r3, [r7, #12]
 800a9e4:	681b      	ldr	r3, [r3, #0]
 800a9e6:	430a      	orrs	r2, r1
 800a9e8:	619a      	str	r2, [r3, #24]
      break;
 800a9ea:	e0a3      	b.n	800ab34 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800a9ec:	68fb      	ldr	r3, [r7, #12]
 800a9ee:	681b      	ldr	r3, [r3, #0]
 800a9f0:	68b9      	ldr	r1, [r7, #8]
 800a9f2:	4618      	mov	r0, r3
 800a9f4:	f000 fa6a 	bl	800aecc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800a9f8:	68fb      	ldr	r3, [r7, #12]
 800a9fa:	681b      	ldr	r3, [r3, #0]
 800a9fc:	699a      	ldr	r2, [r3, #24]
 800a9fe:	68fb      	ldr	r3, [r7, #12]
 800aa00:	681b      	ldr	r3, [r3, #0]
 800aa02:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800aa06:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800aa08:	68fb      	ldr	r3, [r7, #12]
 800aa0a:	681b      	ldr	r3, [r3, #0]
 800aa0c:	699a      	ldr	r2, [r3, #24]
 800aa0e:	68fb      	ldr	r3, [r7, #12]
 800aa10:	681b      	ldr	r3, [r3, #0]
 800aa12:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800aa16:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800aa18:	68fb      	ldr	r3, [r7, #12]
 800aa1a:	681b      	ldr	r3, [r3, #0]
 800aa1c:	6999      	ldr	r1, [r3, #24]
 800aa1e:	68bb      	ldr	r3, [r7, #8]
 800aa20:	691b      	ldr	r3, [r3, #16]
 800aa22:	021a      	lsls	r2, r3, #8
 800aa24:	68fb      	ldr	r3, [r7, #12]
 800aa26:	681b      	ldr	r3, [r3, #0]
 800aa28:	430a      	orrs	r2, r1
 800aa2a:	619a      	str	r2, [r3, #24]
      break;
 800aa2c:	e082      	b.n	800ab34 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800aa2e:	68fb      	ldr	r3, [r7, #12]
 800aa30:	681b      	ldr	r3, [r3, #0]
 800aa32:	68b9      	ldr	r1, [r7, #8]
 800aa34:	4618      	mov	r0, r3
 800aa36:	f000 fac3 	bl	800afc0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800aa3a:	68fb      	ldr	r3, [r7, #12]
 800aa3c:	681b      	ldr	r3, [r3, #0]
 800aa3e:	69da      	ldr	r2, [r3, #28]
 800aa40:	68fb      	ldr	r3, [r7, #12]
 800aa42:	681b      	ldr	r3, [r3, #0]
 800aa44:	f042 0208 	orr.w	r2, r2, #8
 800aa48:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800aa4a:	68fb      	ldr	r3, [r7, #12]
 800aa4c:	681b      	ldr	r3, [r3, #0]
 800aa4e:	69da      	ldr	r2, [r3, #28]
 800aa50:	68fb      	ldr	r3, [r7, #12]
 800aa52:	681b      	ldr	r3, [r3, #0]
 800aa54:	f022 0204 	bic.w	r2, r2, #4
 800aa58:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800aa5a:	68fb      	ldr	r3, [r7, #12]
 800aa5c:	681b      	ldr	r3, [r3, #0]
 800aa5e:	69d9      	ldr	r1, [r3, #28]
 800aa60:	68bb      	ldr	r3, [r7, #8]
 800aa62:	691a      	ldr	r2, [r3, #16]
 800aa64:	68fb      	ldr	r3, [r7, #12]
 800aa66:	681b      	ldr	r3, [r3, #0]
 800aa68:	430a      	orrs	r2, r1
 800aa6a:	61da      	str	r2, [r3, #28]
      break;
 800aa6c:	e062      	b.n	800ab34 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800aa6e:	68fb      	ldr	r3, [r7, #12]
 800aa70:	681b      	ldr	r3, [r3, #0]
 800aa72:	68b9      	ldr	r1, [r7, #8]
 800aa74:	4618      	mov	r0, r3
 800aa76:	f000 fb1b 	bl	800b0b0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800aa7a:	68fb      	ldr	r3, [r7, #12]
 800aa7c:	681b      	ldr	r3, [r3, #0]
 800aa7e:	69da      	ldr	r2, [r3, #28]
 800aa80:	68fb      	ldr	r3, [r7, #12]
 800aa82:	681b      	ldr	r3, [r3, #0]
 800aa84:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800aa88:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800aa8a:	68fb      	ldr	r3, [r7, #12]
 800aa8c:	681b      	ldr	r3, [r3, #0]
 800aa8e:	69da      	ldr	r2, [r3, #28]
 800aa90:	68fb      	ldr	r3, [r7, #12]
 800aa92:	681b      	ldr	r3, [r3, #0]
 800aa94:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800aa98:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800aa9a:	68fb      	ldr	r3, [r7, #12]
 800aa9c:	681b      	ldr	r3, [r3, #0]
 800aa9e:	69d9      	ldr	r1, [r3, #28]
 800aaa0:	68bb      	ldr	r3, [r7, #8]
 800aaa2:	691b      	ldr	r3, [r3, #16]
 800aaa4:	021a      	lsls	r2, r3, #8
 800aaa6:	68fb      	ldr	r3, [r7, #12]
 800aaa8:	681b      	ldr	r3, [r3, #0]
 800aaaa:	430a      	orrs	r2, r1
 800aaac:	61da      	str	r2, [r3, #28]
      break;
 800aaae:	e041      	b.n	800ab34 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800aab0:	68fb      	ldr	r3, [r7, #12]
 800aab2:	681b      	ldr	r3, [r3, #0]
 800aab4:	68b9      	ldr	r1, [r7, #8]
 800aab6:	4618      	mov	r0, r3
 800aab8:	f000 fb58 	bl	800b16c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800aabc:	68fb      	ldr	r3, [r7, #12]
 800aabe:	681b      	ldr	r3, [r3, #0]
 800aac0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800aac2:	68fb      	ldr	r3, [r7, #12]
 800aac4:	681b      	ldr	r3, [r3, #0]
 800aac6:	f042 0208 	orr.w	r2, r2, #8
 800aaca:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800aacc:	68fb      	ldr	r3, [r7, #12]
 800aace:	681b      	ldr	r3, [r3, #0]
 800aad0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800aad2:	68fb      	ldr	r3, [r7, #12]
 800aad4:	681b      	ldr	r3, [r3, #0]
 800aad6:	f022 0204 	bic.w	r2, r2, #4
 800aada:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800aadc:	68fb      	ldr	r3, [r7, #12]
 800aade:	681b      	ldr	r3, [r3, #0]
 800aae0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800aae2:	68bb      	ldr	r3, [r7, #8]
 800aae4:	691a      	ldr	r2, [r3, #16]
 800aae6:	68fb      	ldr	r3, [r7, #12]
 800aae8:	681b      	ldr	r3, [r3, #0]
 800aaea:	430a      	orrs	r2, r1
 800aaec:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800aaee:	e021      	b.n	800ab34 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800aaf0:	68fb      	ldr	r3, [r7, #12]
 800aaf2:	681b      	ldr	r3, [r3, #0]
 800aaf4:	68b9      	ldr	r1, [r7, #8]
 800aaf6:	4618      	mov	r0, r3
 800aaf8:	f000 fb90 	bl	800b21c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800aafc:	68fb      	ldr	r3, [r7, #12]
 800aafe:	681b      	ldr	r3, [r3, #0]
 800ab00:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ab02:	68fb      	ldr	r3, [r7, #12]
 800ab04:	681b      	ldr	r3, [r3, #0]
 800ab06:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ab0a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800ab0c:	68fb      	ldr	r3, [r7, #12]
 800ab0e:	681b      	ldr	r3, [r3, #0]
 800ab10:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ab12:	68fb      	ldr	r3, [r7, #12]
 800ab14:	681b      	ldr	r3, [r3, #0]
 800ab16:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ab1a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800ab1c:	68fb      	ldr	r3, [r7, #12]
 800ab1e:	681b      	ldr	r3, [r3, #0]
 800ab20:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800ab22:	68bb      	ldr	r3, [r7, #8]
 800ab24:	691b      	ldr	r3, [r3, #16]
 800ab26:	021a      	lsls	r2, r3, #8
 800ab28:	68fb      	ldr	r3, [r7, #12]
 800ab2a:	681b      	ldr	r3, [r3, #0]
 800ab2c:	430a      	orrs	r2, r1
 800ab2e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800ab30:	e000      	b.n	800ab34 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 800ab32:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800ab34:	68fb      	ldr	r3, [r7, #12]
 800ab36:	2200      	movs	r2, #0
 800ab38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800ab3c:	2300      	movs	r3, #0
}
 800ab3e:	4618      	mov	r0, r3
 800ab40:	3710      	adds	r7, #16
 800ab42:	46bd      	mov	sp, r7
 800ab44:	bd80      	pop	{r7, pc}
 800ab46:	bf00      	nop

0800ab48 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800ab48:	b580      	push	{r7, lr}
 800ab4a:	b084      	sub	sp, #16
 800ab4c:	af00      	add	r7, sp, #0
 800ab4e:	6078      	str	r0, [r7, #4]
 800ab50:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ab58:	2b01      	cmp	r3, #1
 800ab5a:	d101      	bne.n	800ab60 <HAL_TIM_ConfigClockSource+0x18>
 800ab5c:	2302      	movs	r3, #2
 800ab5e:	e0a8      	b.n	800acb2 <HAL_TIM_ConfigClockSource+0x16a>
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	2201      	movs	r2, #1
 800ab64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	2202      	movs	r2, #2
 800ab6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	681b      	ldr	r3, [r3, #0]
 800ab74:	689b      	ldr	r3, [r3, #8]
 800ab76:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800ab78:	68fb      	ldr	r3, [r7, #12]
 800ab7a:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 800ab7e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800ab82:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800ab84:	68fb      	ldr	r3, [r7, #12]
 800ab86:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800ab8a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	681b      	ldr	r3, [r3, #0]
 800ab90:	68fa      	ldr	r2, [r7, #12]
 800ab92:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800ab94:	683b      	ldr	r3, [r7, #0]
 800ab96:	681b      	ldr	r3, [r3, #0]
 800ab98:	2b40      	cmp	r3, #64	; 0x40
 800ab9a:	d067      	beq.n	800ac6c <HAL_TIM_ConfigClockSource+0x124>
 800ab9c:	2b40      	cmp	r3, #64	; 0x40
 800ab9e:	d80b      	bhi.n	800abb8 <HAL_TIM_ConfigClockSource+0x70>
 800aba0:	2b10      	cmp	r3, #16
 800aba2:	d073      	beq.n	800ac8c <HAL_TIM_ConfigClockSource+0x144>
 800aba4:	2b10      	cmp	r3, #16
 800aba6:	d802      	bhi.n	800abae <HAL_TIM_ConfigClockSource+0x66>
 800aba8:	2b00      	cmp	r3, #0
 800abaa:	d06f      	beq.n	800ac8c <HAL_TIM_ConfigClockSource+0x144>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800abac:	e078      	b.n	800aca0 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 800abae:	2b20      	cmp	r3, #32
 800abb0:	d06c      	beq.n	800ac8c <HAL_TIM_ConfigClockSource+0x144>
 800abb2:	2b30      	cmp	r3, #48	; 0x30
 800abb4:	d06a      	beq.n	800ac8c <HAL_TIM_ConfigClockSource+0x144>
      break;
 800abb6:	e073      	b.n	800aca0 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 800abb8:	2b70      	cmp	r3, #112	; 0x70
 800abba:	d00d      	beq.n	800abd8 <HAL_TIM_ConfigClockSource+0x90>
 800abbc:	2b70      	cmp	r3, #112	; 0x70
 800abbe:	d804      	bhi.n	800abca <HAL_TIM_ConfigClockSource+0x82>
 800abc0:	2b50      	cmp	r3, #80	; 0x50
 800abc2:	d033      	beq.n	800ac2c <HAL_TIM_ConfigClockSource+0xe4>
 800abc4:	2b60      	cmp	r3, #96	; 0x60
 800abc6:	d041      	beq.n	800ac4c <HAL_TIM_ConfigClockSource+0x104>
      break;
 800abc8:	e06a      	b.n	800aca0 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 800abca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800abce:	d066      	beq.n	800ac9e <HAL_TIM_ConfigClockSource+0x156>
 800abd0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800abd4:	d017      	beq.n	800ac06 <HAL_TIM_ConfigClockSource+0xbe>
      break;
 800abd6:	e063      	b.n	800aca0 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 800abd8:	687b      	ldr	r3, [r7, #4]
 800abda:	6818      	ldr	r0, [r3, #0]
 800abdc:	683b      	ldr	r3, [r7, #0]
 800abde:	6899      	ldr	r1, [r3, #8]
 800abe0:	683b      	ldr	r3, [r7, #0]
 800abe2:	685a      	ldr	r2, [r3, #4]
 800abe4:	683b      	ldr	r3, [r7, #0]
 800abe6:	68db      	ldr	r3, [r3, #12]
 800abe8:	f000 fbee 	bl	800b3c8 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	681b      	ldr	r3, [r3, #0]
 800abf0:	689b      	ldr	r3, [r3, #8]
 800abf2:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800abf4:	68fb      	ldr	r3, [r7, #12]
 800abf6:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800abfa:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800abfc:	687b      	ldr	r3, [r7, #4]
 800abfe:	681b      	ldr	r3, [r3, #0]
 800ac00:	68fa      	ldr	r2, [r7, #12]
 800ac02:	609a      	str	r2, [r3, #8]
      break;
 800ac04:	e04c      	b.n	800aca0 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	6818      	ldr	r0, [r3, #0]
 800ac0a:	683b      	ldr	r3, [r7, #0]
 800ac0c:	6899      	ldr	r1, [r3, #8]
 800ac0e:	683b      	ldr	r3, [r7, #0]
 800ac10:	685a      	ldr	r2, [r3, #4]
 800ac12:	683b      	ldr	r3, [r7, #0]
 800ac14:	68db      	ldr	r3, [r3, #12]
 800ac16:	f000 fbd7 	bl	800b3c8 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	681b      	ldr	r3, [r3, #0]
 800ac1e:	689a      	ldr	r2, [r3, #8]
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	681b      	ldr	r3, [r3, #0]
 800ac24:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800ac28:	609a      	str	r2, [r3, #8]
      break;
 800ac2a:	e039      	b.n	800aca0 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	6818      	ldr	r0, [r3, #0]
 800ac30:	683b      	ldr	r3, [r7, #0]
 800ac32:	6859      	ldr	r1, [r3, #4]
 800ac34:	683b      	ldr	r3, [r7, #0]
 800ac36:	68db      	ldr	r3, [r3, #12]
 800ac38:	461a      	mov	r2, r3
 800ac3a:	f000 fb49 	bl	800b2d0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	681b      	ldr	r3, [r3, #0]
 800ac42:	2150      	movs	r1, #80	; 0x50
 800ac44:	4618      	mov	r0, r3
 800ac46:	f000 fba2 	bl	800b38e <TIM_ITRx_SetConfig>
      break;
 800ac4a:	e029      	b.n	800aca0 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	6818      	ldr	r0, [r3, #0]
 800ac50:	683b      	ldr	r3, [r7, #0]
 800ac52:	6859      	ldr	r1, [r3, #4]
 800ac54:	683b      	ldr	r3, [r7, #0]
 800ac56:	68db      	ldr	r3, [r3, #12]
 800ac58:	461a      	mov	r2, r3
 800ac5a:	f000 fb68 	bl	800b32e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800ac5e:	687b      	ldr	r3, [r7, #4]
 800ac60:	681b      	ldr	r3, [r3, #0]
 800ac62:	2160      	movs	r1, #96	; 0x60
 800ac64:	4618      	mov	r0, r3
 800ac66:	f000 fb92 	bl	800b38e <TIM_ITRx_SetConfig>
      break;
 800ac6a:	e019      	b.n	800aca0 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	6818      	ldr	r0, [r3, #0]
 800ac70:	683b      	ldr	r3, [r7, #0]
 800ac72:	6859      	ldr	r1, [r3, #4]
 800ac74:	683b      	ldr	r3, [r7, #0]
 800ac76:	68db      	ldr	r3, [r3, #12]
 800ac78:	461a      	mov	r2, r3
 800ac7a:	f000 fb29 	bl	800b2d0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	681b      	ldr	r3, [r3, #0]
 800ac82:	2140      	movs	r1, #64	; 0x40
 800ac84:	4618      	mov	r0, r3
 800ac86:	f000 fb82 	bl	800b38e <TIM_ITRx_SetConfig>
      break;
 800ac8a:	e009      	b.n	800aca0 <HAL_TIM_ConfigClockSource+0x158>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	681a      	ldr	r2, [r3, #0]
 800ac90:	683b      	ldr	r3, [r7, #0]
 800ac92:	681b      	ldr	r3, [r3, #0]
 800ac94:	4619      	mov	r1, r3
 800ac96:	4610      	mov	r0, r2
 800ac98:	f000 fb79 	bl	800b38e <TIM_ITRx_SetConfig>
        break;
 800ac9c:	e000      	b.n	800aca0 <HAL_TIM_ConfigClockSource+0x158>
      break;
 800ac9e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	2201      	movs	r2, #1
 800aca4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	2200      	movs	r2, #0
 800acac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800acb0:	2300      	movs	r3, #0
}
 800acb2:	4618      	mov	r0, r3
 800acb4:	3710      	adds	r7, #16
 800acb6:	46bd      	mov	sp, r7
 800acb8:	bd80      	pop	{r7, pc}

0800acba <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800acba:	b480      	push	{r7}
 800acbc:	b083      	sub	sp, #12
 800acbe:	af00      	add	r7, sp, #0
 800acc0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800acc2:	bf00      	nop
 800acc4:	370c      	adds	r7, #12
 800acc6:	46bd      	mov	sp, r7
 800acc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800accc:	4770      	bx	lr

0800acce <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800acce:	b480      	push	{r7}
 800acd0:	b083      	sub	sp, #12
 800acd2:	af00      	add	r7, sp, #0
 800acd4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800acd6:	bf00      	nop
 800acd8:	370c      	adds	r7, #12
 800acda:	46bd      	mov	sp, r7
 800acdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ace0:	4770      	bx	lr

0800ace2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800ace2:	b480      	push	{r7}
 800ace4:	b083      	sub	sp, #12
 800ace6:	af00      	add	r7, sp, #0
 800ace8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800acea:	bf00      	nop
 800acec:	370c      	adds	r7, #12
 800acee:	46bd      	mov	sp, r7
 800acf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acf4:	4770      	bx	lr

0800acf6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800acf6:	b480      	push	{r7}
 800acf8:	b083      	sub	sp, #12
 800acfa:	af00      	add	r7, sp, #0
 800acfc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800acfe:	bf00      	nop
 800ad00:	370c      	adds	r7, #12
 800ad02:	46bd      	mov	sp, r7
 800ad04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad08:	4770      	bx	lr
	...

0800ad0c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800ad0c:	b480      	push	{r7}
 800ad0e:	b085      	sub	sp, #20
 800ad10:	af00      	add	r7, sp, #0
 800ad12:	6078      	str	r0, [r7, #4]
 800ad14:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800ad16:	687b      	ldr	r3, [r7, #4]
 800ad18:	681b      	ldr	r3, [r3, #0]
 800ad1a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	4a2a      	ldr	r2, [pc, #168]	; (800adc8 <TIM_Base_SetConfig+0xbc>)
 800ad20:	4293      	cmp	r3, r2
 800ad22:	d003      	beq.n	800ad2c <TIM_Base_SetConfig+0x20>
 800ad24:	687b      	ldr	r3, [r7, #4]
 800ad26:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ad2a:	d108      	bne.n	800ad3e <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800ad2c:	68fb      	ldr	r3, [r7, #12]
 800ad2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ad32:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800ad34:	683b      	ldr	r3, [r7, #0]
 800ad36:	685b      	ldr	r3, [r3, #4]
 800ad38:	68fa      	ldr	r2, [r7, #12]
 800ad3a:	4313      	orrs	r3, r2
 800ad3c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	4a21      	ldr	r2, [pc, #132]	; (800adc8 <TIM_Base_SetConfig+0xbc>)
 800ad42:	4293      	cmp	r3, r2
 800ad44:	d00b      	beq.n	800ad5e <TIM_Base_SetConfig+0x52>
 800ad46:	687b      	ldr	r3, [r7, #4]
 800ad48:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ad4c:	d007      	beq.n	800ad5e <TIM_Base_SetConfig+0x52>
 800ad4e:	687b      	ldr	r3, [r7, #4]
 800ad50:	4a1e      	ldr	r2, [pc, #120]	; (800adcc <TIM_Base_SetConfig+0xc0>)
 800ad52:	4293      	cmp	r3, r2
 800ad54:	d003      	beq.n	800ad5e <TIM_Base_SetConfig+0x52>
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	4a1d      	ldr	r2, [pc, #116]	; (800add0 <TIM_Base_SetConfig+0xc4>)
 800ad5a:	4293      	cmp	r3, r2
 800ad5c:	d108      	bne.n	800ad70 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800ad5e:	68fb      	ldr	r3, [r7, #12]
 800ad60:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ad64:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800ad66:	683b      	ldr	r3, [r7, #0]
 800ad68:	68db      	ldr	r3, [r3, #12]
 800ad6a:	68fa      	ldr	r2, [r7, #12]
 800ad6c:	4313      	orrs	r3, r2
 800ad6e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800ad70:	68fb      	ldr	r3, [r7, #12]
 800ad72:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800ad76:	683b      	ldr	r3, [r7, #0]
 800ad78:	695b      	ldr	r3, [r3, #20]
 800ad7a:	4313      	orrs	r3, r2
 800ad7c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800ad7e:	687b      	ldr	r3, [r7, #4]
 800ad80:	68fa      	ldr	r2, [r7, #12]
 800ad82:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800ad84:	683b      	ldr	r3, [r7, #0]
 800ad86:	689a      	ldr	r2, [r3, #8]
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800ad8c:	683b      	ldr	r3, [r7, #0]
 800ad8e:	681a      	ldr	r2, [r3, #0]
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800ad94:	687b      	ldr	r3, [r7, #4]
 800ad96:	4a0c      	ldr	r2, [pc, #48]	; (800adc8 <TIM_Base_SetConfig+0xbc>)
 800ad98:	4293      	cmp	r3, r2
 800ad9a:	d007      	beq.n	800adac <TIM_Base_SetConfig+0xa0>
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	4a0b      	ldr	r2, [pc, #44]	; (800adcc <TIM_Base_SetConfig+0xc0>)
 800ada0:	4293      	cmp	r3, r2
 800ada2:	d003      	beq.n	800adac <TIM_Base_SetConfig+0xa0>
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	4a0a      	ldr	r2, [pc, #40]	; (800add0 <TIM_Base_SetConfig+0xc4>)
 800ada8:	4293      	cmp	r3, r2
 800adaa:	d103      	bne.n	800adb4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800adac:	683b      	ldr	r3, [r7, #0]
 800adae:	691a      	ldr	r2, [r3, #16]
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	2201      	movs	r2, #1
 800adb8:	615a      	str	r2, [r3, #20]
}
 800adba:	bf00      	nop
 800adbc:	3714      	adds	r7, #20
 800adbe:	46bd      	mov	sp, r7
 800adc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adc4:	4770      	bx	lr
 800adc6:	bf00      	nop
 800adc8:	40012c00 	.word	0x40012c00
 800adcc:	40014400 	.word	0x40014400
 800add0:	40014800 	.word	0x40014800

0800add4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800add4:	b480      	push	{r7}
 800add6:	b087      	sub	sp, #28
 800add8:	af00      	add	r7, sp, #0
 800adda:	6078      	str	r0, [r7, #4]
 800addc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	6a1b      	ldr	r3, [r3, #32]
 800ade2:	f023 0201 	bic.w	r2, r3, #1
 800ade6:	687b      	ldr	r3, [r7, #4]
 800ade8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	6a1b      	ldr	r3, [r3, #32]
 800adee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	685b      	ldr	r3, [r3, #4]
 800adf4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800adf6:	687b      	ldr	r3, [r7, #4]
 800adf8:	699b      	ldr	r3, [r3, #24]
 800adfa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800adfc:	68fb      	ldr	r3, [r7, #12]
 800adfe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800ae02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ae06:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800ae08:	68fb      	ldr	r3, [r7, #12]
 800ae0a:	f023 0303 	bic.w	r3, r3, #3
 800ae0e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ae10:	683b      	ldr	r3, [r7, #0]
 800ae12:	681b      	ldr	r3, [r3, #0]
 800ae14:	68fa      	ldr	r2, [r7, #12]
 800ae16:	4313      	orrs	r3, r2
 800ae18:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800ae1a:	697b      	ldr	r3, [r7, #20]
 800ae1c:	f023 0302 	bic.w	r3, r3, #2
 800ae20:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800ae22:	683b      	ldr	r3, [r7, #0]
 800ae24:	689b      	ldr	r3, [r3, #8]
 800ae26:	697a      	ldr	r2, [r7, #20]
 800ae28:	4313      	orrs	r3, r2
 800ae2a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800ae2c:	687b      	ldr	r3, [r7, #4]
 800ae2e:	4a24      	ldr	r2, [pc, #144]	; (800aec0 <TIM_OC1_SetConfig+0xec>)
 800ae30:	4293      	cmp	r3, r2
 800ae32:	d007      	beq.n	800ae44 <TIM_OC1_SetConfig+0x70>
 800ae34:	687b      	ldr	r3, [r7, #4]
 800ae36:	4a23      	ldr	r2, [pc, #140]	; (800aec4 <TIM_OC1_SetConfig+0xf0>)
 800ae38:	4293      	cmp	r3, r2
 800ae3a:	d003      	beq.n	800ae44 <TIM_OC1_SetConfig+0x70>
 800ae3c:	687b      	ldr	r3, [r7, #4]
 800ae3e:	4a22      	ldr	r2, [pc, #136]	; (800aec8 <TIM_OC1_SetConfig+0xf4>)
 800ae40:	4293      	cmp	r3, r2
 800ae42:	d10c      	bne.n	800ae5e <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800ae44:	697b      	ldr	r3, [r7, #20]
 800ae46:	f023 0308 	bic.w	r3, r3, #8
 800ae4a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800ae4c:	683b      	ldr	r3, [r7, #0]
 800ae4e:	68db      	ldr	r3, [r3, #12]
 800ae50:	697a      	ldr	r2, [r7, #20]
 800ae52:	4313      	orrs	r3, r2
 800ae54:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800ae56:	697b      	ldr	r3, [r7, #20]
 800ae58:	f023 0304 	bic.w	r3, r3, #4
 800ae5c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ae5e:	687b      	ldr	r3, [r7, #4]
 800ae60:	4a17      	ldr	r2, [pc, #92]	; (800aec0 <TIM_OC1_SetConfig+0xec>)
 800ae62:	4293      	cmp	r3, r2
 800ae64:	d007      	beq.n	800ae76 <TIM_OC1_SetConfig+0xa2>
 800ae66:	687b      	ldr	r3, [r7, #4]
 800ae68:	4a17      	ldr	r2, [pc, #92]	; (800aec8 <TIM_OC1_SetConfig+0xf4>)
 800ae6a:	4293      	cmp	r3, r2
 800ae6c:	d003      	beq.n	800ae76 <TIM_OC1_SetConfig+0xa2>
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	4a14      	ldr	r2, [pc, #80]	; (800aec4 <TIM_OC1_SetConfig+0xf0>)
 800ae72:	4293      	cmp	r3, r2
 800ae74:	d111      	bne.n	800ae9a <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800ae76:	693b      	ldr	r3, [r7, #16]
 800ae78:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ae7c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800ae7e:	693b      	ldr	r3, [r7, #16]
 800ae80:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800ae84:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800ae86:	683b      	ldr	r3, [r7, #0]
 800ae88:	695b      	ldr	r3, [r3, #20]
 800ae8a:	693a      	ldr	r2, [r7, #16]
 800ae8c:	4313      	orrs	r3, r2
 800ae8e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800ae90:	683b      	ldr	r3, [r7, #0]
 800ae92:	699b      	ldr	r3, [r3, #24]
 800ae94:	693a      	ldr	r2, [r7, #16]
 800ae96:	4313      	orrs	r3, r2
 800ae98:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	693a      	ldr	r2, [r7, #16]
 800ae9e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800aea0:	687b      	ldr	r3, [r7, #4]
 800aea2:	68fa      	ldr	r2, [r7, #12]
 800aea4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800aea6:	683b      	ldr	r3, [r7, #0]
 800aea8:	685a      	ldr	r2, [r3, #4]
 800aeaa:	687b      	ldr	r3, [r7, #4]
 800aeac:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800aeae:	687b      	ldr	r3, [r7, #4]
 800aeb0:	697a      	ldr	r2, [r7, #20]
 800aeb2:	621a      	str	r2, [r3, #32]
}
 800aeb4:	bf00      	nop
 800aeb6:	371c      	adds	r7, #28
 800aeb8:	46bd      	mov	sp, r7
 800aeba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aebe:	4770      	bx	lr
 800aec0:	40012c00 	.word	0x40012c00
 800aec4:	40014800 	.word	0x40014800
 800aec8:	40014400 	.word	0x40014400

0800aecc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800aecc:	b480      	push	{r7}
 800aece:	b087      	sub	sp, #28
 800aed0:	af00      	add	r7, sp, #0
 800aed2:	6078      	str	r0, [r7, #4]
 800aed4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800aed6:	687b      	ldr	r3, [r7, #4]
 800aed8:	6a1b      	ldr	r3, [r3, #32]
 800aeda:	f023 0210 	bic.w	r2, r3, #16
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800aee2:	687b      	ldr	r3, [r7, #4]
 800aee4:	6a1b      	ldr	r3, [r3, #32]
 800aee6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	685b      	ldr	r3, [r3, #4]
 800aeec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800aeee:	687b      	ldr	r3, [r7, #4]
 800aef0:	699b      	ldr	r3, [r3, #24]
 800aef2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800aef4:	68fb      	ldr	r3, [r7, #12]
 800aef6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800aefa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800aefe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800af00:	68fb      	ldr	r3, [r7, #12]
 800af02:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800af06:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800af08:	683b      	ldr	r3, [r7, #0]
 800af0a:	681b      	ldr	r3, [r3, #0]
 800af0c:	021b      	lsls	r3, r3, #8
 800af0e:	68fa      	ldr	r2, [r7, #12]
 800af10:	4313      	orrs	r3, r2
 800af12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800af14:	697b      	ldr	r3, [r7, #20]
 800af16:	f023 0320 	bic.w	r3, r3, #32
 800af1a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800af1c:	683b      	ldr	r3, [r7, #0]
 800af1e:	689b      	ldr	r3, [r3, #8]
 800af20:	011b      	lsls	r3, r3, #4
 800af22:	697a      	ldr	r2, [r7, #20]
 800af24:	4313      	orrs	r3, r2
 800af26:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	4a22      	ldr	r2, [pc, #136]	; (800afb4 <TIM_OC2_SetConfig+0xe8>)
 800af2c:	4293      	cmp	r3, r2
 800af2e:	d10d      	bne.n	800af4c <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800af30:	697b      	ldr	r3, [r7, #20]
 800af32:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800af36:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800af38:	683b      	ldr	r3, [r7, #0]
 800af3a:	68db      	ldr	r3, [r3, #12]
 800af3c:	011b      	lsls	r3, r3, #4
 800af3e:	697a      	ldr	r2, [r7, #20]
 800af40:	4313      	orrs	r3, r2
 800af42:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800af44:	697b      	ldr	r3, [r7, #20]
 800af46:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800af4a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	4a19      	ldr	r2, [pc, #100]	; (800afb4 <TIM_OC2_SetConfig+0xe8>)
 800af50:	4293      	cmp	r3, r2
 800af52:	d007      	beq.n	800af64 <TIM_OC2_SetConfig+0x98>
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	4a18      	ldr	r2, [pc, #96]	; (800afb8 <TIM_OC2_SetConfig+0xec>)
 800af58:	4293      	cmp	r3, r2
 800af5a:	d003      	beq.n	800af64 <TIM_OC2_SetConfig+0x98>
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	4a17      	ldr	r2, [pc, #92]	; (800afbc <TIM_OC2_SetConfig+0xf0>)
 800af60:	4293      	cmp	r3, r2
 800af62:	d113      	bne.n	800af8c <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800af64:	693b      	ldr	r3, [r7, #16]
 800af66:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800af6a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800af6c:	693b      	ldr	r3, [r7, #16]
 800af6e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800af72:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800af74:	683b      	ldr	r3, [r7, #0]
 800af76:	695b      	ldr	r3, [r3, #20]
 800af78:	009b      	lsls	r3, r3, #2
 800af7a:	693a      	ldr	r2, [r7, #16]
 800af7c:	4313      	orrs	r3, r2
 800af7e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800af80:	683b      	ldr	r3, [r7, #0]
 800af82:	699b      	ldr	r3, [r3, #24]
 800af84:	009b      	lsls	r3, r3, #2
 800af86:	693a      	ldr	r2, [r7, #16]
 800af88:	4313      	orrs	r3, r2
 800af8a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800af8c:	687b      	ldr	r3, [r7, #4]
 800af8e:	693a      	ldr	r2, [r7, #16]
 800af90:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800af92:	687b      	ldr	r3, [r7, #4]
 800af94:	68fa      	ldr	r2, [r7, #12]
 800af96:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800af98:	683b      	ldr	r3, [r7, #0]
 800af9a:	685a      	ldr	r2, [r3, #4]
 800af9c:	687b      	ldr	r3, [r7, #4]
 800af9e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	697a      	ldr	r2, [r7, #20]
 800afa4:	621a      	str	r2, [r3, #32]
}
 800afa6:	bf00      	nop
 800afa8:	371c      	adds	r7, #28
 800afaa:	46bd      	mov	sp, r7
 800afac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afb0:	4770      	bx	lr
 800afb2:	bf00      	nop
 800afb4:	40012c00 	.word	0x40012c00
 800afb8:	40014400 	.word	0x40014400
 800afbc:	40014800 	.word	0x40014800

0800afc0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800afc0:	b480      	push	{r7}
 800afc2:	b087      	sub	sp, #28
 800afc4:	af00      	add	r7, sp, #0
 800afc6:	6078      	str	r0, [r7, #4]
 800afc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800afca:	687b      	ldr	r3, [r7, #4]
 800afcc:	6a1b      	ldr	r3, [r3, #32]
 800afce:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800afd2:	687b      	ldr	r3, [r7, #4]
 800afd4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800afd6:	687b      	ldr	r3, [r7, #4]
 800afd8:	6a1b      	ldr	r3, [r3, #32]
 800afda:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	685b      	ldr	r3, [r3, #4]
 800afe0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800afe2:	687b      	ldr	r3, [r7, #4]
 800afe4:	69db      	ldr	r3, [r3, #28]
 800afe6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800afe8:	68fb      	ldr	r3, [r7, #12]
 800afea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800afee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800aff2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800aff4:	68fb      	ldr	r3, [r7, #12]
 800aff6:	f023 0303 	bic.w	r3, r3, #3
 800affa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800affc:	683b      	ldr	r3, [r7, #0]
 800affe:	681b      	ldr	r3, [r3, #0]
 800b000:	68fa      	ldr	r2, [r7, #12]
 800b002:	4313      	orrs	r3, r2
 800b004:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800b006:	697b      	ldr	r3, [r7, #20]
 800b008:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800b00c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800b00e:	683b      	ldr	r3, [r7, #0]
 800b010:	689b      	ldr	r3, [r3, #8]
 800b012:	021b      	lsls	r3, r3, #8
 800b014:	697a      	ldr	r2, [r7, #20]
 800b016:	4313      	orrs	r3, r2
 800b018:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800b01a:	687b      	ldr	r3, [r7, #4]
 800b01c:	4a21      	ldr	r2, [pc, #132]	; (800b0a4 <TIM_OC3_SetConfig+0xe4>)
 800b01e:	4293      	cmp	r3, r2
 800b020:	d10d      	bne.n	800b03e <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800b022:	697b      	ldr	r3, [r7, #20]
 800b024:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b028:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800b02a:	683b      	ldr	r3, [r7, #0]
 800b02c:	68db      	ldr	r3, [r3, #12]
 800b02e:	021b      	lsls	r3, r3, #8
 800b030:	697a      	ldr	r2, [r7, #20]
 800b032:	4313      	orrs	r3, r2
 800b034:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800b036:	697b      	ldr	r3, [r7, #20]
 800b038:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800b03c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b03e:	687b      	ldr	r3, [r7, #4]
 800b040:	4a18      	ldr	r2, [pc, #96]	; (800b0a4 <TIM_OC3_SetConfig+0xe4>)
 800b042:	4293      	cmp	r3, r2
 800b044:	d007      	beq.n	800b056 <TIM_OC3_SetConfig+0x96>
 800b046:	687b      	ldr	r3, [r7, #4]
 800b048:	4a17      	ldr	r2, [pc, #92]	; (800b0a8 <TIM_OC3_SetConfig+0xe8>)
 800b04a:	4293      	cmp	r3, r2
 800b04c:	d003      	beq.n	800b056 <TIM_OC3_SetConfig+0x96>
 800b04e:	687b      	ldr	r3, [r7, #4]
 800b050:	4a16      	ldr	r2, [pc, #88]	; (800b0ac <TIM_OC3_SetConfig+0xec>)
 800b052:	4293      	cmp	r3, r2
 800b054:	d113      	bne.n	800b07e <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800b056:	693b      	ldr	r3, [r7, #16]
 800b058:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b05c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800b05e:	693b      	ldr	r3, [r7, #16]
 800b060:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800b064:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800b066:	683b      	ldr	r3, [r7, #0]
 800b068:	695b      	ldr	r3, [r3, #20]
 800b06a:	011b      	lsls	r3, r3, #4
 800b06c:	693a      	ldr	r2, [r7, #16]
 800b06e:	4313      	orrs	r3, r2
 800b070:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800b072:	683b      	ldr	r3, [r7, #0]
 800b074:	699b      	ldr	r3, [r3, #24]
 800b076:	011b      	lsls	r3, r3, #4
 800b078:	693a      	ldr	r2, [r7, #16]
 800b07a:	4313      	orrs	r3, r2
 800b07c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b07e:	687b      	ldr	r3, [r7, #4]
 800b080:	693a      	ldr	r2, [r7, #16]
 800b082:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	68fa      	ldr	r2, [r7, #12]
 800b088:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800b08a:	683b      	ldr	r3, [r7, #0]
 800b08c:	685a      	ldr	r2, [r3, #4]
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	697a      	ldr	r2, [r7, #20]
 800b096:	621a      	str	r2, [r3, #32]
}
 800b098:	bf00      	nop
 800b09a:	371c      	adds	r7, #28
 800b09c:	46bd      	mov	sp, r7
 800b09e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0a2:	4770      	bx	lr
 800b0a4:	40012c00 	.word	0x40012c00
 800b0a8:	40014400 	.word	0x40014400
 800b0ac:	40014800 	.word	0x40014800

0800b0b0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b0b0:	b480      	push	{r7}
 800b0b2:	b087      	sub	sp, #28
 800b0b4:	af00      	add	r7, sp, #0
 800b0b6:	6078      	str	r0, [r7, #4]
 800b0b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800b0ba:	687b      	ldr	r3, [r7, #4]
 800b0bc:	6a1b      	ldr	r3, [r3, #32]
 800b0be:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800b0c2:	687b      	ldr	r3, [r7, #4]
 800b0c4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b0c6:	687b      	ldr	r3, [r7, #4]
 800b0c8:	6a1b      	ldr	r3, [r3, #32]
 800b0ca:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b0cc:	687b      	ldr	r3, [r7, #4]
 800b0ce:	685b      	ldr	r3, [r3, #4]
 800b0d0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b0d2:	687b      	ldr	r3, [r7, #4]
 800b0d4:	69db      	ldr	r3, [r3, #28]
 800b0d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800b0d8:	68fb      	ldr	r3, [r7, #12]
 800b0da:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800b0de:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b0e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800b0e4:	68fb      	ldr	r3, [r7, #12]
 800b0e6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b0ea:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b0ec:	683b      	ldr	r3, [r7, #0]
 800b0ee:	681b      	ldr	r3, [r3, #0]
 800b0f0:	021b      	lsls	r3, r3, #8
 800b0f2:	68fa      	ldr	r2, [r7, #12]
 800b0f4:	4313      	orrs	r3, r2
 800b0f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800b0f8:	693b      	ldr	r3, [r7, #16]
 800b0fa:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800b0fe:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800b100:	683b      	ldr	r3, [r7, #0]
 800b102:	689b      	ldr	r3, [r3, #8]
 800b104:	031b      	lsls	r3, r3, #12
 800b106:	693a      	ldr	r2, [r7, #16]
 800b108:	4313      	orrs	r3, r2
 800b10a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	4a14      	ldr	r2, [pc, #80]	; (800b160 <TIM_OC4_SetConfig+0xb0>)
 800b110:	4293      	cmp	r3, r2
 800b112:	d007      	beq.n	800b124 <TIM_OC4_SetConfig+0x74>
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	4a13      	ldr	r2, [pc, #76]	; (800b164 <TIM_OC4_SetConfig+0xb4>)
 800b118:	4293      	cmp	r3, r2
 800b11a:	d003      	beq.n	800b124 <TIM_OC4_SetConfig+0x74>
 800b11c:	687b      	ldr	r3, [r7, #4]
 800b11e:	4a12      	ldr	r2, [pc, #72]	; (800b168 <TIM_OC4_SetConfig+0xb8>)
 800b120:	4293      	cmp	r3, r2
 800b122:	d109      	bne.n	800b138 <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800b124:	697b      	ldr	r3, [r7, #20]
 800b126:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b12a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800b12c:	683b      	ldr	r3, [r7, #0]
 800b12e:	695b      	ldr	r3, [r3, #20]
 800b130:	019b      	lsls	r3, r3, #6
 800b132:	697a      	ldr	r2, [r7, #20]
 800b134:	4313      	orrs	r3, r2
 800b136:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	697a      	ldr	r2, [r7, #20]
 800b13c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b13e:	687b      	ldr	r3, [r7, #4]
 800b140:	68fa      	ldr	r2, [r7, #12]
 800b142:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800b144:	683b      	ldr	r3, [r7, #0]
 800b146:	685a      	ldr	r2, [r3, #4]
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	693a      	ldr	r2, [r7, #16]
 800b150:	621a      	str	r2, [r3, #32]
}
 800b152:	bf00      	nop
 800b154:	371c      	adds	r7, #28
 800b156:	46bd      	mov	sp, r7
 800b158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b15c:	4770      	bx	lr
 800b15e:	bf00      	nop
 800b160:	40012c00 	.word	0x40012c00
 800b164:	40014400 	.word	0x40014400
 800b168:	40014800 	.word	0x40014800

0800b16c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800b16c:	b480      	push	{r7}
 800b16e:	b087      	sub	sp, #28
 800b170:	af00      	add	r7, sp, #0
 800b172:	6078      	str	r0, [r7, #4]
 800b174:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800b176:	687b      	ldr	r3, [r7, #4]
 800b178:	6a1b      	ldr	r3, [r3, #32]
 800b17a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b182:	687b      	ldr	r3, [r7, #4]
 800b184:	6a1b      	ldr	r3, [r3, #32]
 800b186:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b188:	687b      	ldr	r3, [r7, #4]
 800b18a:	685b      	ldr	r3, [r3, #4]
 800b18c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800b18e:	687b      	ldr	r3, [r7, #4]
 800b190:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b192:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800b194:	68fb      	ldr	r3, [r7, #12]
 800b196:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b19a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b19e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b1a0:	683b      	ldr	r3, [r7, #0]
 800b1a2:	681b      	ldr	r3, [r3, #0]
 800b1a4:	68fa      	ldr	r2, [r7, #12]
 800b1a6:	4313      	orrs	r3, r2
 800b1a8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800b1aa:	693b      	ldr	r3, [r7, #16]
 800b1ac:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800b1b0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800b1b2:	683b      	ldr	r3, [r7, #0]
 800b1b4:	689b      	ldr	r3, [r3, #8]
 800b1b6:	041b      	lsls	r3, r3, #16
 800b1b8:	693a      	ldr	r2, [r7, #16]
 800b1ba:	4313      	orrs	r3, r2
 800b1bc:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b1be:	687b      	ldr	r3, [r7, #4]
 800b1c0:	4a13      	ldr	r2, [pc, #76]	; (800b210 <TIM_OC5_SetConfig+0xa4>)
 800b1c2:	4293      	cmp	r3, r2
 800b1c4:	d007      	beq.n	800b1d6 <TIM_OC5_SetConfig+0x6a>
 800b1c6:	687b      	ldr	r3, [r7, #4]
 800b1c8:	4a12      	ldr	r2, [pc, #72]	; (800b214 <TIM_OC5_SetConfig+0xa8>)
 800b1ca:	4293      	cmp	r3, r2
 800b1cc:	d003      	beq.n	800b1d6 <TIM_OC5_SetConfig+0x6a>
 800b1ce:	687b      	ldr	r3, [r7, #4]
 800b1d0:	4a11      	ldr	r2, [pc, #68]	; (800b218 <TIM_OC5_SetConfig+0xac>)
 800b1d2:	4293      	cmp	r3, r2
 800b1d4:	d109      	bne.n	800b1ea <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800b1d6:	697b      	ldr	r3, [r7, #20]
 800b1d8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b1dc:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800b1de:	683b      	ldr	r3, [r7, #0]
 800b1e0:	695b      	ldr	r3, [r3, #20]
 800b1e2:	021b      	lsls	r3, r3, #8
 800b1e4:	697a      	ldr	r2, [r7, #20]
 800b1e6:	4313      	orrs	r3, r2
 800b1e8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b1ea:	687b      	ldr	r3, [r7, #4]
 800b1ec:	697a      	ldr	r2, [r7, #20]
 800b1ee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800b1f0:	687b      	ldr	r3, [r7, #4]
 800b1f2:	68fa      	ldr	r2, [r7, #12]
 800b1f4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800b1f6:	683b      	ldr	r3, [r7, #0]
 800b1f8:	685a      	ldr	r2, [r3, #4]
 800b1fa:	687b      	ldr	r3, [r7, #4]
 800b1fc:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b1fe:	687b      	ldr	r3, [r7, #4]
 800b200:	693a      	ldr	r2, [r7, #16]
 800b202:	621a      	str	r2, [r3, #32]
}
 800b204:	bf00      	nop
 800b206:	371c      	adds	r7, #28
 800b208:	46bd      	mov	sp, r7
 800b20a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b20e:	4770      	bx	lr
 800b210:	40012c00 	.word	0x40012c00
 800b214:	40014400 	.word	0x40014400
 800b218:	40014800 	.word	0x40014800

0800b21c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800b21c:	b480      	push	{r7}
 800b21e:	b087      	sub	sp, #28
 800b220:	af00      	add	r7, sp, #0
 800b222:	6078      	str	r0, [r7, #4]
 800b224:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800b226:	687b      	ldr	r3, [r7, #4]
 800b228:	6a1b      	ldr	r3, [r3, #32]
 800b22a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800b22e:	687b      	ldr	r3, [r7, #4]
 800b230:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b232:	687b      	ldr	r3, [r7, #4]
 800b234:	6a1b      	ldr	r3, [r3, #32]
 800b236:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b238:	687b      	ldr	r3, [r7, #4]
 800b23a:	685b      	ldr	r3, [r3, #4]
 800b23c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800b23e:	687b      	ldr	r3, [r7, #4]
 800b240:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b242:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800b244:	68fb      	ldr	r3, [r7, #12]
 800b246:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800b24a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b24e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b250:	683b      	ldr	r3, [r7, #0]
 800b252:	681b      	ldr	r3, [r3, #0]
 800b254:	021b      	lsls	r3, r3, #8
 800b256:	68fa      	ldr	r2, [r7, #12]
 800b258:	4313      	orrs	r3, r2
 800b25a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800b25c:	693b      	ldr	r3, [r7, #16]
 800b25e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800b262:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800b264:	683b      	ldr	r3, [r7, #0]
 800b266:	689b      	ldr	r3, [r3, #8]
 800b268:	051b      	lsls	r3, r3, #20
 800b26a:	693a      	ldr	r2, [r7, #16]
 800b26c:	4313      	orrs	r3, r2
 800b26e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b270:	687b      	ldr	r3, [r7, #4]
 800b272:	4a14      	ldr	r2, [pc, #80]	; (800b2c4 <TIM_OC6_SetConfig+0xa8>)
 800b274:	4293      	cmp	r3, r2
 800b276:	d007      	beq.n	800b288 <TIM_OC6_SetConfig+0x6c>
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	4a13      	ldr	r2, [pc, #76]	; (800b2c8 <TIM_OC6_SetConfig+0xac>)
 800b27c:	4293      	cmp	r3, r2
 800b27e:	d003      	beq.n	800b288 <TIM_OC6_SetConfig+0x6c>
 800b280:	687b      	ldr	r3, [r7, #4]
 800b282:	4a12      	ldr	r2, [pc, #72]	; (800b2cc <TIM_OC6_SetConfig+0xb0>)
 800b284:	4293      	cmp	r3, r2
 800b286:	d109      	bne.n	800b29c <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800b288:	697b      	ldr	r3, [r7, #20]
 800b28a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800b28e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800b290:	683b      	ldr	r3, [r7, #0]
 800b292:	695b      	ldr	r3, [r3, #20]
 800b294:	029b      	lsls	r3, r3, #10
 800b296:	697a      	ldr	r2, [r7, #20]
 800b298:	4313      	orrs	r3, r2
 800b29a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	697a      	ldr	r2, [r7, #20]
 800b2a0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800b2a2:	687b      	ldr	r3, [r7, #4]
 800b2a4:	68fa      	ldr	r2, [r7, #12]
 800b2a6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800b2a8:	683b      	ldr	r3, [r7, #0]
 800b2aa:	685a      	ldr	r2, [r3, #4]
 800b2ac:	687b      	ldr	r3, [r7, #4]
 800b2ae:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b2b0:	687b      	ldr	r3, [r7, #4]
 800b2b2:	693a      	ldr	r2, [r7, #16]
 800b2b4:	621a      	str	r2, [r3, #32]
}
 800b2b6:	bf00      	nop
 800b2b8:	371c      	adds	r7, #28
 800b2ba:	46bd      	mov	sp, r7
 800b2bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2c0:	4770      	bx	lr
 800b2c2:	bf00      	nop
 800b2c4:	40012c00 	.word	0x40012c00
 800b2c8:	40014400 	.word	0x40014400
 800b2cc:	40014800 	.word	0x40014800

0800b2d0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b2d0:	b480      	push	{r7}
 800b2d2:	b087      	sub	sp, #28
 800b2d4:	af00      	add	r7, sp, #0
 800b2d6:	60f8      	str	r0, [r7, #12]
 800b2d8:	60b9      	str	r1, [r7, #8]
 800b2da:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800b2dc:	68fb      	ldr	r3, [r7, #12]
 800b2de:	6a1b      	ldr	r3, [r3, #32]
 800b2e0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b2e2:	68fb      	ldr	r3, [r7, #12]
 800b2e4:	6a1b      	ldr	r3, [r3, #32]
 800b2e6:	f023 0201 	bic.w	r2, r3, #1
 800b2ea:	68fb      	ldr	r3, [r7, #12]
 800b2ec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b2ee:	68fb      	ldr	r3, [r7, #12]
 800b2f0:	699b      	ldr	r3, [r3, #24]
 800b2f2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800b2f4:	693b      	ldr	r3, [r7, #16]
 800b2f6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800b2fa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800b2fc:	687b      	ldr	r3, [r7, #4]
 800b2fe:	011b      	lsls	r3, r3, #4
 800b300:	693a      	ldr	r2, [r7, #16]
 800b302:	4313      	orrs	r3, r2
 800b304:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800b306:	697b      	ldr	r3, [r7, #20]
 800b308:	f023 030a 	bic.w	r3, r3, #10
 800b30c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800b30e:	697a      	ldr	r2, [r7, #20]
 800b310:	68bb      	ldr	r3, [r7, #8]
 800b312:	4313      	orrs	r3, r2
 800b314:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800b316:	68fb      	ldr	r3, [r7, #12]
 800b318:	693a      	ldr	r2, [r7, #16]
 800b31a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b31c:	68fb      	ldr	r3, [r7, #12]
 800b31e:	697a      	ldr	r2, [r7, #20]
 800b320:	621a      	str	r2, [r3, #32]
}
 800b322:	bf00      	nop
 800b324:	371c      	adds	r7, #28
 800b326:	46bd      	mov	sp, r7
 800b328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b32c:	4770      	bx	lr

0800b32e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b32e:	b480      	push	{r7}
 800b330:	b087      	sub	sp, #28
 800b332:	af00      	add	r7, sp, #0
 800b334:	60f8      	str	r0, [r7, #12]
 800b336:	60b9      	str	r1, [r7, #8]
 800b338:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b33a:	68fb      	ldr	r3, [r7, #12]
 800b33c:	6a1b      	ldr	r3, [r3, #32]
 800b33e:	f023 0210 	bic.w	r2, r3, #16
 800b342:	68fb      	ldr	r3, [r7, #12]
 800b344:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b346:	68fb      	ldr	r3, [r7, #12]
 800b348:	699b      	ldr	r3, [r3, #24]
 800b34a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800b34c:	68fb      	ldr	r3, [r7, #12]
 800b34e:	6a1b      	ldr	r3, [r3, #32]
 800b350:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800b352:	697b      	ldr	r3, [r7, #20]
 800b354:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800b358:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800b35a:	687b      	ldr	r3, [r7, #4]
 800b35c:	031b      	lsls	r3, r3, #12
 800b35e:	697a      	ldr	r2, [r7, #20]
 800b360:	4313      	orrs	r3, r2
 800b362:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800b364:	693b      	ldr	r3, [r7, #16]
 800b366:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800b36a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800b36c:	68bb      	ldr	r3, [r7, #8]
 800b36e:	011b      	lsls	r3, r3, #4
 800b370:	693a      	ldr	r2, [r7, #16]
 800b372:	4313      	orrs	r3, r2
 800b374:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800b376:	68fb      	ldr	r3, [r7, #12]
 800b378:	697a      	ldr	r2, [r7, #20]
 800b37a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b37c:	68fb      	ldr	r3, [r7, #12]
 800b37e:	693a      	ldr	r2, [r7, #16]
 800b380:	621a      	str	r2, [r3, #32]
}
 800b382:	bf00      	nop
 800b384:	371c      	adds	r7, #28
 800b386:	46bd      	mov	sp, r7
 800b388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b38c:	4770      	bx	lr

0800b38e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800b38e:	b480      	push	{r7}
 800b390:	b085      	sub	sp, #20
 800b392:	af00      	add	r7, sp, #0
 800b394:	6078      	str	r0, [r7, #4]
 800b396:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800b398:	687b      	ldr	r3, [r7, #4]
 800b39a:	689b      	ldr	r3, [r3, #8]
 800b39c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800b39e:	68fb      	ldr	r3, [r7, #12]
 800b3a0:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800b3a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b3a8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800b3aa:	683a      	ldr	r2, [r7, #0]
 800b3ac:	68fb      	ldr	r3, [r7, #12]
 800b3ae:	4313      	orrs	r3, r2
 800b3b0:	f043 0307 	orr.w	r3, r3, #7
 800b3b4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b3b6:	687b      	ldr	r3, [r7, #4]
 800b3b8:	68fa      	ldr	r2, [r7, #12]
 800b3ba:	609a      	str	r2, [r3, #8]
}
 800b3bc:	bf00      	nop
 800b3be:	3714      	adds	r7, #20
 800b3c0:	46bd      	mov	sp, r7
 800b3c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3c6:	4770      	bx	lr

0800b3c8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800b3c8:	b480      	push	{r7}
 800b3ca:	b087      	sub	sp, #28
 800b3cc:	af00      	add	r7, sp, #0
 800b3ce:	60f8      	str	r0, [r7, #12]
 800b3d0:	60b9      	str	r1, [r7, #8]
 800b3d2:	607a      	str	r2, [r7, #4]
 800b3d4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800b3d6:	68fb      	ldr	r3, [r7, #12]
 800b3d8:	689b      	ldr	r3, [r3, #8]
 800b3da:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b3dc:	697b      	ldr	r3, [r7, #20]
 800b3de:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b3e2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800b3e4:	683b      	ldr	r3, [r7, #0]
 800b3e6:	021a      	lsls	r2, r3, #8
 800b3e8:	687b      	ldr	r3, [r7, #4]
 800b3ea:	431a      	orrs	r2, r3
 800b3ec:	68bb      	ldr	r3, [r7, #8]
 800b3ee:	4313      	orrs	r3, r2
 800b3f0:	697a      	ldr	r2, [r7, #20]
 800b3f2:	4313      	orrs	r3, r2
 800b3f4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b3f6:	68fb      	ldr	r3, [r7, #12]
 800b3f8:	697a      	ldr	r2, [r7, #20]
 800b3fa:	609a      	str	r2, [r3, #8]
}
 800b3fc:	bf00      	nop
 800b3fe:	371c      	adds	r7, #28
 800b400:	46bd      	mov	sp, r7
 800b402:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b406:	4770      	bx	lr

0800b408 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800b408:	b480      	push	{r7}
 800b40a:	b087      	sub	sp, #28
 800b40c:	af00      	add	r7, sp, #0
 800b40e:	60f8      	str	r0, [r7, #12]
 800b410:	60b9      	str	r1, [r7, #8]
 800b412:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800b414:	68bb      	ldr	r3, [r7, #8]
 800b416:	f003 031f 	and.w	r3, r3, #31
 800b41a:	2201      	movs	r2, #1
 800b41c:	fa02 f303 	lsl.w	r3, r2, r3
 800b420:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800b422:	68fb      	ldr	r3, [r7, #12]
 800b424:	6a1a      	ldr	r2, [r3, #32]
 800b426:	697b      	ldr	r3, [r7, #20]
 800b428:	43db      	mvns	r3, r3
 800b42a:	401a      	ands	r2, r3
 800b42c:	68fb      	ldr	r3, [r7, #12]
 800b42e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800b430:	68fb      	ldr	r3, [r7, #12]
 800b432:	6a1a      	ldr	r2, [r3, #32]
 800b434:	68bb      	ldr	r3, [r7, #8]
 800b436:	f003 031f 	and.w	r3, r3, #31
 800b43a:	6879      	ldr	r1, [r7, #4]
 800b43c:	fa01 f303 	lsl.w	r3, r1, r3
 800b440:	431a      	orrs	r2, r3
 800b442:	68fb      	ldr	r3, [r7, #12]
 800b444:	621a      	str	r2, [r3, #32]
}
 800b446:	bf00      	nop
 800b448:	371c      	adds	r7, #28
 800b44a:	46bd      	mov	sp, r7
 800b44c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b450:	4770      	bx	lr
	...

0800b454 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800b454:	b480      	push	{r7}
 800b456:	b085      	sub	sp, #20
 800b458:	af00      	add	r7, sp, #0
 800b45a:	6078      	str	r0, [r7, #4]
 800b45c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b45e:	687b      	ldr	r3, [r7, #4]
 800b460:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b464:	2b01      	cmp	r3, #1
 800b466:	d101      	bne.n	800b46c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800b468:	2302      	movs	r3, #2
 800b46a:	e04a      	b.n	800b502 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 800b46c:	687b      	ldr	r3, [r7, #4]
 800b46e:	2201      	movs	r2, #1
 800b470:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b474:	687b      	ldr	r3, [r7, #4]
 800b476:	2202      	movs	r2, #2
 800b478:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b47c:	687b      	ldr	r3, [r7, #4]
 800b47e:	681b      	ldr	r3, [r3, #0]
 800b480:	685b      	ldr	r3, [r3, #4]
 800b482:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	681b      	ldr	r3, [r3, #0]
 800b488:	689b      	ldr	r3, [r3, #8]
 800b48a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800b48c:	687b      	ldr	r3, [r7, #4]
 800b48e:	681b      	ldr	r3, [r3, #0]
 800b490:	4a1f      	ldr	r2, [pc, #124]	; (800b510 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 800b492:	4293      	cmp	r3, r2
 800b494:	d108      	bne.n	800b4a8 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800b496:	68fb      	ldr	r3, [r7, #12]
 800b498:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800b49c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800b49e:	683b      	ldr	r3, [r7, #0]
 800b4a0:	685b      	ldr	r3, [r3, #4]
 800b4a2:	68fa      	ldr	r2, [r7, #12]
 800b4a4:	4313      	orrs	r3, r2
 800b4a6:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800b4a8:	68fb      	ldr	r3, [r7, #12]
 800b4aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b4ae:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b4b0:	683b      	ldr	r3, [r7, #0]
 800b4b2:	681b      	ldr	r3, [r3, #0]
 800b4b4:	68fa      	ldr	r2, [r7, #12]
 800b4b6:	4313      	orrs	r3, r2
 800b4b8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800b4ba:	687b      	ldr	r3, [r7, #4]
 800b4bc:	681b      	ldr	r3, [r3, #0]
 800b4be:	68fa      	ldr	r2, [r7, #12]
 800b4c0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b4c2:	687b      	ldr	r3, [r7, #4]
 800b4c4:	681b      	ldr	r3, [r3, #0]
 800b4c6:	4a12      	ldr	r2, [pc, #72]	; (800b510 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 800b4c8:	4293      	cmp	r3, r2
 800b4ca:	d004      	beq.n	800b4d6 <HAL_TIMEx_MasterConfigSynchronization+0x82>
 800b4cc:	687b      	ldr	r3, [r7, #4]
 800b4ce:	681b      	ldr	r3, [r3, #0]
 800b4d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b4d4:	d10c      	bne.n	800b4f0 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800b4d6:	68bb      	ldr	r3, [r7, #8]
 800b4d8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b4dc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b4de:	683b      	ldr	r3, [r7, #0]
 800b4e0:	689b      	ldr	r3, [r3, #8]
 800b4e2:	68ba      	ldr	r2, [r7, #8]
 800b4e4:	4313      	orrs	r3, r2
 800b4e6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	681b      	ldr	r3, [r3, #0]
 800b4ec:	68ba      	ldr	r2, [r7, #8]
 800b4ee:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b4f0:	687b      	ldr	r3, [r7, #4]
 800b4f2:	2201      	movs	r2, #1
 800b4f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b4f8:	687b      	ldr	r3, [r7, #4]
 800b4fa:	2200      	movs	r2, #0
 800b4fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b500:	2300      	movs	r3, #0
}
 800b502:	4618      	mov	r0, r3
 800b504:	3714      	adds	r7, #20
 800b506:	46bd      	mov	sp, r7
 800b508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b50c:	4770      	bx	lr
 800b50e:	bf00      	nop
 800b510:	40012c00 	.word	0x40012c00

0800b514 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800b514:	b480      	push	{r7}
 800b516:	b085      	sub	sp, #20
 800b518:	af00      	add	r7, sp, #0
 800b51a:	6078      	str	r0, [r7, #4]
 800b51c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800b51e:	2300      	movs	r3, #0
 800b520:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800b522:	687b      	ldr	r3, [r7, #4]
 800b524:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b528:	2b01      	cmp	r3, #1
 800b52a:	d101      	bne.n	800b530 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800b52c:	2302      	movs	r3, #2
 800b52e:	e078      	b.n	800b622 <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	2201      	movs	r2, #1
 800b534:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800b538:	68fb      	ldr	r3, [r7, #12]
 800b53a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800b53e:	683b      	ldr	r3, [r7, #0]
 800b540:	68db      	ldr	r3, [r3, #12]
 800b542:	4313      	orrs	r3, r2
 800b544:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800b546:	68fb      	ldr	r3, [r7, #12]
 800b548:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800b54c:	683b      	ldr	r3, [r7, #0]
 800b54e:	689b      	ldr	r3, [r3, #8]
 800b550:	4313      	orrs	r3, r2
 800b552:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800b554:	68fb      	ldr	r3, [r7, #12]
 800b556:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800b55a:	683b      	ldr	r3, [r7, #0]
 800b55c:	685b      	ldr	r3, [r3, #4]
 800b55e:	4313      	orrs	r3, r2
 800b560:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800b562:	68fb      	ldr	r3, [r7, #12]
 800b564:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800b568:	683b      	ldr	r3, [r7, #0]
 800b56a:	681b      	ldr	r3, [r3, #0]
 800b56c:	4313      	orrs	r3, r2
 800b56e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800b570:	68fb      	ldr	r3, [r7, #12]
 800b572:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800b576:	683b      	ldr	r3, [r7, #0]
 800b578:	691b      	ldr	r3, [r3, #16]
 800b57a:	4313      	orrs	r3, r2
 800b57c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800b57e:	68fb      	ldr	r3, [r7, #12]
 800b580:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800b584:	683b      	ldr	r3, [r7, #0]
 800b586:	695b      	ldr	r3, [r3, #20]
 800b588:	4313      	orrs	r3, r2
 800b58a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800b58c:	68fb      	ldr	r3, [r7, #12]
 800b58e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800b592:	683b      	ldr	r3, [r7, #0]
 800b594:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b596:	4313      	orrs	r3, r2
 800b598:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800b59a:	68fb      	ldr	r3, [r7, #12]
 800b59c:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800b5a0:	683b      	ldr	r3, [r7, #0]
 800b5a2:	699b      	ldr	r3, [r3, #24]
 800b5a4:	041b      	lsls	r3, r3, #16
 800b5a6:	4313      	orrs	r3, r2
 800b5a8:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800b5aa:	687b      	ldr	r3, [r7, #4]
 800b5ac:	681b      	ldr	r3, [r3, #0]
 800b5ae:	4a20      	ldr	r2, [pc, #128]	; (800b630 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 800b5b0:	4293      	cmp	r3, r2
 800b5b2:	d106      	bne.n	800b5c2 <HAL_TIMEx_ConfigBreakDeadTime+0xae>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800b5b4:	68fb      	ldr	r3, [r7, #12]
 800b5b6:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800b5ba:	683b      	ldr	r3, [r7, #0]
 800b5bc:	69db      	ldr	r3, [r3, #28]
 800b5be:	4313      	orrs	r3, r2
 800b5c0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800b5c2:	687b      	ldr	r3, [r7, #4]
 800b5c4:	681b      	ldr	r3, [r3, #0]
 800b5c6:	4a1a      	ldr	r2, [pc, #104]	; (800b630 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 800b5c8:	4293      	cmp	r3, r2
 800b5ca:	d121      	bne.n	800b610 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800b5cc:	68fb      	ldr	r3, [r7, #12]
 800b5ce:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800b5d2:	683b      	ldr	r3, [r7, #0]
 800b5d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b5d6:	051b      	lsls	r3, r3, #20
 800b5d8:	4313      	orrs	r3, r2
 800b5da:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800b5dc:	68fb      	ldr	r3, [r7, #12]
 800b5de:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800b5e2:	683b      	ldr	r3, [r7, #0]
 800b5e4:	6a1b      	ldr	r3, [r3, #32]
 800b5e6:	4313      	orrs	r3, r2
 800b5e8:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800b5ea:	68fb      	ldr	r3, [r7, #12]
 800b5ec:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800b5f0:	683b      	ldr	r3, [r7, #0]
 800b5f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b5f4:	4313      	orrs	r3, r2
 800b5f6:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800b5f8:	687b      	ldr	r3, [r7, #4]
 800b5fa:	681b      	ldr	r3, [r3, #0]
 800b5fc:	4a0c      	ldr	r2, [pc, #48]	; (800b630 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 800b5fe:	4293      	cmp	r3, r2
 800b600:	d106      	bne.n	800b610 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800b602:	68fb      	ldr	r3, [r7, #12]
 800b604:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800b608:	683b      	ldr	r3, [r7, #0]
 800b60a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b60c:	4313      	orrs	r3, r2
 800b60e:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800b610:	687b      	ldr	r3, [r7, #4]
 800b612:	681b      	ldr	r3, [r3, #0]
 800b614:	68fa      	ldr	r2, [r7, #12]
 800b616:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800b618:	687b      	ldr	r3, [r7, #4]
 800b61a:	2200      	movs	r2, #0
 800b61c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b620:	2300      	movs	r3, #0
}
 800b622:	4618      	mov	r0, r3
 800b624:	3714      	adds	r7, #20
 800b626:	46bd      	mov	sp, r7
 800b628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b62c:	4770      	bx	lr
 800b62e:	bf00      	nop
 800b630:	40012c00 	.word	0x40012c00

0800b634 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800b634:	b480      	push	{r7}
 800b636:	b083      	sub	sp, #12
 800b638:	af00      	add	r7, sp, #0
 800b63a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800b63c:	bf00      	nop
 800b63e:	370c      	adds	r7, #12
 800b640:	46bd      	mov	sp, r7
 800b642:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b646:	4770      	bx	lr

0800b648 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800b648:	b480      	push	{r7}
 800b64a:	b083      	sub	sp, #12
 800b64c:	af00      	add	r7, sp, #0
 800b64e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800b650:	bf00      	nop
 800b652:	370c      	adds	r7, #12
 800b654:	46bd      	mov	sp, r7
 800b656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b65a:	4770      	bx	lr

0800b65c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800b65c:	b480      	push	{r7}
 800b65e:	b083      	sub	sp, #12
 800b660:	af00      	add	r7, sp, #0
 800b662:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800b664:	bf00      	nop
 800b666:	370c      	adds	r7, #12
 800b668:	46bd      	mov	sp, r7
 800b66a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b66e:	4770      	bx	lr

0800b670 <LL_RCC_GetUSARTClockSource>:
{
 800b670:	b480      	push	{r7}
 800b672:	b083      	sub	sp, #12
 800b674:	af00      	add	r7, sp, #0
 800b676:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 800b678:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800b67c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800b680:	687b      	ldr	r3, [r7, #4]
 800b682:	4013      	ands	r3, r2
}
 800b684:	4618      	mov	r0, r3
 800b686:	370c      	adds	r7, #12
 800b688:	46bd      	mov	sp, r7
 800b68a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b68e:	4770      	bx	lr

0800b690 <LL_RCC_GetLPUARTClockSource>:
{
 800b690:	b480      	push	{r7}
 800b692:	b083      	sub	sp, #12
 800b694:	af00      	add	r7, sp, #0
 800b696:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 800b698:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800b69c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800b6a0:	687b      	ldr	r3, [r7, #4]
 800b6a2:	4013      	ands	r3, r2
}
 800b6a4:	4618      	mov	r0, r3
 800b6a6:	370c      	adds	r7, #12
 800b6a8:	46bd      	mov	sp, r7
 800b6aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6ae:	4770      	bx	lr

0800b6b0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800b6b0:	b580      	push	{r7, lr}
 800b6b2:	b082      	sub	sp, #8
 800b6b4:	af00      	add	r7, sp, #0
 800b6b6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b6b8:	687b      	ldr	r3, [r7, #4]
 800b6ba:	2b00      	cmp	r3, #0
 800b6bc:	d101      	bne.n	800b6c2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800b6be:	2301      	movs	r3, #1
 800b6c0:	e042      	b.n	800b748 <HAL_UART_Init+0x98>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif /* LPUART1 */
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800b6c2:	687b      	ldr	r3, [r7, #4]
 800b6c4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b6c8:	2b00      	cmp	r3, #0
 800b6ca:	d106      	bne.n	800b6da <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b6cc:	687b      	ldr	r3, [r7, #4]
 800b6ce:	2200      	movs	r2, #0
 800b6d0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800b6d4:	6878      	ldr	r0, [r7, #4]
 800b6d6:	f7fa f907 	bl	80058e8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b6da:	687b      	ldr	r3, [r7, #4]
 800b6dc:	2224      	movs	r2, #36	; 0x24
 800b6de:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 800b6e2:	687b      	ldr	r3, [r7, #4]
 800b6e4:	681b      	ldr	r3, [r3, #0]
 800b6e6:	681a      	ldr	r2, [r3, #0]
 800b6e8:	687b      	ldr	r3, [r7, #4]
 800b6ea:	681b      	ldr	r3, [r3, #0]
 800b6ec:	f022 0201 	bic.w	r2, r2, #1
 800b6f0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800b6f2:	6878      	ldr	r0, [r7, #4]
 800b6f4:	f000 f8c0 	bl	800b878 <UART_SetConfig>
 800b6f8:	4603      	mov	r3, r0
 800b6fa:	2b01      	cmp	r3, #1
 800b6fc:	d101      	bne.n	800b702 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800b6fe:	2301      	movs	r3, #1
 800b700:	e022      	b.n	800b748 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800b702:	687b      	ldr	r3, [r7, #4]
 800b704:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b706:	2b00      	cmp	r3, #0
 800b708:	d002      	beq.n	800b710 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800b70a:	6878      	ldr	r0, [r7, #4]
 800b70c:	f000 fac2 	bl	800bc94 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b710:	687b      	ldr	r3, [r7, #4]
 800b712:	681b      	ldr	r3, [r3, #0]
 800b714:	685a      	ldr	r2, [r3, #4]
 800b716:	687b      	ldr	r3, [r7, #4]
 800b718:	681b      	ldr	r3, [r3, #0]
 800b71a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800b71e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b720:	687b      	ldr	r3, [r7, #4]
 800b722:	681b      	ldr	r3, [r3, #0]
 800b724:	689a      	ldr	r2, [r3, #8]
 800b726:	687b      	ldr	r3, [r7, #4]
 800b728:	681b      	ldr	r3, [r3, #0]
 800b72a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800b72e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800b730:	687b      	ldr	r3, [r7, #4]
 800b732:	681b      	ldr	r3, [r3, #0]
 800b734:	681a      	ldr	r2, [r3, #0]
 800b736:	687b      	ldr	r3, [r7, #4]
 800b738:	681b      	ldr	r3, [r3, #0]
 800b73a:	f042 0201 	orr.w	r2, r2, #1
 800b73e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800b740:	6878      	ldr	r0, [r7, #4]
 800b742:	f000 fb49 	bl	800bdd8 <UART_CheckIdleState>
 800b746:	4603      	mov	r3, r0
}
 800b748:	4618      	mov	r0, r3
 800b74a:	3708      	adds	r7, #8
 800b74c:	46bd      	mov	sp, r7
 800b74e:	bd80      	pop	{r7, pc}

0800b750 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b750:	b580      	push	{r7, lr}
 800b752:	b084      	sub	sp, #16
 800b754:	af00      	add	r7, sp, #0
 800b756:	60f8      	str	r0, [r7, #12]
 800b758:	60b9      	str	r1, [r7, #8]
 800b75a:	4613      	mov	r3, r2
 800b75c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800b75e:	68fb      	ldr	r3, [r7, #12]
 800b760:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b764:	2b20      	cmp	r3, #32
 800b766:	d168      	bne.n	800b83a <HAL_UART_Transmit_DMA+0xea>
  {
    if ((pData == NULL) || (Size == 0U))
 800b768:	68bb      	ldr	r3, [r7, #8]
 800b76a:	2b00      	cmp	r3, #0
 800b76c:	d002      	beq.n	800b774 <HAL_UART_Transmit_DMA+0x24>
 800b76e:	88fb      	ldrh	r3, [r7, #6]
 800b770:	2b00      	cmp	r3, #0
 800b772:	d101      	bne.n	800b778 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 800b774:	2301      	movs	r3, #1
 800b776:	e061      	b.n	800b83c <HAL_UART_Transmit_DMA+0xec>
    }

    __HAL_LOCK(huart);
 800b778:	68fb      	ldr	r3, [r7, #12]
 800b77a:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800b77e:	2b01      	cmp	r3, #1
 800b780:	d101      	bne.n	800b786 <HAL_UART_Transmit_DMA+0x36>
 800b782:	2302      	movs	r3, #2
 800b784:	e05a      	b.n	800b83c <HAL_UART_Transmit_DMA+0xec>
 800b786:	68fb      	ldr	r3, [r7, #12]
 800b788:	2201      	movs	r2, #1
 800b78a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->pTxBuffPtr  = pData;
 800b78e:	68fb      	ldr	r3, [r7, #12]
 800b790:	68ba      	ldr	r2, [r7, #8]
 800b792:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 800b794:	68fb      	ldr	r3, [r7, #12]
 800b796:	88fa      	ldrh	r2, [r7, #6]
 800b798:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800b79c:	68fb      	ldr	r3, [r7, #12]
 800b79e:	88fa      	ldrh	r2, [r7, #6]
 800b7a0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b7a4:	68fb      	ldr	r3, [r7, #12]
 800b7a6:	2200      	movs	r2, #0
 800b7a8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800b7ac:	68fb      	ldr	r3, [r7, #12]
 800b7ae:	2221      	movs	r2, #33	; 0x21
 800b7b0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    if (huart->hdmatx != NULL)
 800b7b4:	68fb      	ldr	r3, [r7, #12]
 800b7b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b7b8:	2b00      	cmp	r3, #0
 800b7ba:	d02c      	beq.n	800b816 <HAL_UART_Transmit_DMA+0xc6>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800b7bc:	68fb      	ldr	r3, [r7, #12]
 800b7be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b7c0:	4a20      	ldr	r2, [pc, #128]	; (800b844 <HAL_UART_Transmit_DMA+0xf4>)
 800b7c2:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800b7c4:	68fb      	ldr	r3, [r7, #12]
 800b7c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b7c8:	4a1f      	ldr	r2, [pc, #124]	; (800b848 <HAL_UART_Transmit_DMA+0xf8>)
 800b7ca:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800b7cc:	68fb      	ldr	r3, [r7, #12]
 800b7ce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b7d0:	4a1e      	ldr	r2, [pc, #120]	; (800b84c <HAL_UART_Transmit_DMA+0xfc>)
 800b7d2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800b7d4:	68fb      	ldr	r3, [r7, #12]
 800b7d6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b7d8:	2200      	movs	r2, #0
 800b7da:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800b7dc:	68fb      	ldr	r3, [r7, #12]
 800b7de:	6f58      	ldr	r0, [r3, #116]	; 0x74
 800b7e0:	68fb      	ldr	r3, [r7, #12]
 800b7e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b7e4:	4619      	mov	r1, r3
 800b7e6:	68fb      	ldr	r3, [r7, #12]
 800b7e8:	681b      	ldr	r3, [r3, #0]
 800b7ea:	3328      	adds	r3, #40	; 0x28
 800b7ec:	461a      	mov	r2, r3
 800b7ee:	88fb      	ldrh	r3, [r7, #6]
 800b7f0:	f7fa fe64 	bl	80064bc <HAL_DMA_Start_IT>
 800b7f4:	4603      	mov	r3, r0
 800b7f6:	2b00      	cmp	r3, #0
 800b7f8:	d00d      	beq.n	800b816 <HAL_UART_Transmit_DMA+0xc6>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800b7fa:	68fb      	ldr	r3, [r7, #12]
 800b7fc:	2210      	movs	r2, #16
 800b7fe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800b802:	68fb      	ldr	r3, [r7, #12]
 800b804:	2200      	movs	r2, #0
 800b806:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800b80a:	68fb      	ldr	r3, [r7, #12]
 800b80c:	2220      	movs	r2, #32
 800b80e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        return HAL_ERROR;
 800b812:	2301      	movs	r3, #1
 800b814:	e012      	b.n	800b83c <HAL_UART_Transmit_DMA+0xec>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800b816:	68fb      	ldr	r3, [r7, #12]
 800b818:	681b      	ldr	r3, [r3, #0]
 800b81a:	2240      	movs	r2, #64	; 0x40
 800b81c:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 800b81e:	68fb      	ldr	r3, [r7, #12]
 800b820:	2200      	movs	r2, #0
 800b822:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800b826:	68fb      	ldr	r3, [r7, #12]
 800b828:	681b      	ldr	r3, [r3, #0]
 800b82a:	689a      	ldr	r2, [r3, #8]
 800b82c:	68fb      	ldr	r3, [r7, #12]
 800b82e:	681b      	ldr	r3, [r3, #0]
 800b830:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800b834:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 800b836:	2300      	movs	r3, #0
 800b838:	e000      	b.n	800b83c <HAL_UART_Transmit_DMA+0xec>
  }
  else
  {
    return HAL_BUSY;
 800b83a:	2302      	movs	r3, #2
  }
}
 800b83c:	4618      	mov	r0, r3
 800b83e:	3710      	adds	r7, #16
 800b840:	46bd      	mov	sp, r7
 800b842:	bd80      	pop	{r7, pc}
 800b844:	0800bfeb 	.word	0x0800bfeb
 800b848:	0800c03f 	.word	0x0800c03f
 800b84c:	0800c05b 	.word	0x0800c05b

0800b850 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800b850:	b480      	push	{r7}
 800b852:	b083      	sub	sp, #12
 800b854:	af00      	add	r7, sp, #0
 800b856:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800b858:	bf00      	nop
 800b85a:	370c      	adds	r7, #12
 800b85c:	46bd      	mov	sp, r7
 800b85e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b862:	4770      	bx	lr

0800b864 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800b864:	b480      	push	{r7}
 800b866:	b083      	sub	sp, #12
 800b868:	af00      	add	r7, sp, #0
 800b86a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800b86c:	bf00      	nop
 800b86e:	370c      	adds	r7, #12
 800b870:	46bd      	mov	sp, r7
 800b872:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b876:	4770      	bx	lr

0800b878 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b878:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 800b87c:	b088      	sub	sp, #32
 800b87e:	af00      	add	r7, sp, #0
 800b880:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800b882:	2300      	movs	r3, #0
 800b884:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800b886:	687b      	ldr	r3, [r7, #4]
 800b888:	689a      	ldr	r2, [r3, #8]
 800b88a:	687b      	ldr	r3, [r7, #4]
 800b88c:	691b      	ldr	r3, [r3, #16]
 800b88e:	431a      	orrs	r2, r3
 800b890:	687b      	ldr	r3, [r7, #4]
 800b892:	695b      	ldr	r3, [r3, #20]
 800b894:	431a      	orrs	r2, r3
 800b896:	687b      	ldr	r3, [r7, #4]
 800b898:	69db      	ldr	r3, [r3, #28]
 800b89a:	4313      	orrs	r3, r2
 800b89c:	61fb      	str	r3, [r7, #28]
  tmpreg |= (uint32_t)huart->FifoMode;
 800b89e:	687b      	ldr	r3, [r7, #4]
 800b8a0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b8a2:	69fa      	ldr	r2, [r7, #28]
 800b8a4:	4313      	orrs	r3, r2
 800b8a6:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800b8a8:	687b      	ldr	r3, [r7, #4]
 800b8aa:	681b      	ldr	r3, [r3, #0]
 800b8ac:	681a      	ldr	r2, [r3, #0]
 800b8ae:	4ba4      	ldr	r3, [pc, #656]	; (800bb40 <UART_SetConfig+0x2c8>)
 800b8b0:	4013      	ands	r3, r2
 800b8b2:	687a      	ldr	r2, [r7, #4]
 800b8b4:	6812      	ldr	r2, [r2, #0]
 800b8b6:	69f9      	ldr	r1, [r7, #28]
 800b8b8:	430b      	orrs	r3, r1
 800b8ba:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b8bc:	687b      	ldr	r3, [r7, #4]
 800b8be:	681b      	ldr	r3, [r3, #0]
 800b8c0:	685b      	ldr	r3, [r3, #4]
 800b8c2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800b8c6:	687b      	ldr	r3, [r7, #4]
 800b8c8:	68da      	ldr	r2, [r3, #12]
 800b8ca:	687b      	ldr	r3, [r7, #4]
 800b8cc:	681b      	ldr	r3, [r3, #0]
 800b8ce:	430a      	orrs	r2, r1
 800b8d0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800b8d2:	687b      	ldr	r3, [r7, #4]
 800b8d4:	699b      	ldr	r3, [r3, #24]
 800b8d6:	61fb      	str	r3, [r7, #28]

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800b8d8:	687b      	ldr	r3, [r7, #4]
 800b8da:	681b      	ldr	r3, [r3, #0]
 800b8dc:	4a99      	ldr	r2, [pc, #612]	; (800bb44 <UART_SetConfig+0x2cc>)
 800b8de:	4293      	cmp	r3, r2
 800b8e0:	d004      	beq.n	800b8ec <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800b8e2:	687b      	ldr	r3, [r7, #4]
 800b8e4:	6a1b      	ldr	r3, [r3, #32]
 800b8e6:	69fa      	ldr	r2, [r7, #28]
 800b8e8:	4313      	orrs	r3, r2
 800b8ea:	61fb      	str	r3, [r7, #28]
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif /* LPUART1 */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800b8ec:	687b      	ldr	r3, [r7, #4]
 800b8ee:	681b      	ldr	r3, [r3, #0]
 800b8f0:	689b      	ldr	r3, [r3, #8]
 800b8f2:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800b8f6:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800b8fa:	687a      	ldr	r2, [r7, #4]
 800b8fc:	6812      	ldr	r2, [r2, #0]
 800b8fe:	69f9      	ldr	r1, [r7, #28]
 800b900:	430b      	orrs	r3, r1
 800b902:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800b904:	687b      	ldr	r3, [r7, #4]
 800b906:	681b      	ldr	r3, [r3, #0]
 800b908:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b90a:	f023 010f 	bic.w	r1, r3, #15
 800b90e:	687b      	ldr	r3, [r7, #4]
 800b910:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b912:	687b      	ldr	r3, [r7, #4]
 800b914:	681b      	ldr	r3, [r3, #0]
 800b916:	430a      	orrs	r2, r1
 800b918:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800b91a:	687b      	ldr	r3, [r7, #4]
 800b91c:	681b      	ldr	r3, [r3, #0]
 800b91e:	4a8a      	ldr	r2, [pc, #552]	; (800bb48 <UART_SetConfig+0x2d0>)
 800b920:	4293      	cmp	r3, r2
 800b922:	d121      	bne.n	800b968 <UART_SetConfig+0xf0>
 800b924:	2003      	movs	r0, #3
 800b926:	f7ff fea3 	bl	800b670 <LL_RCC_GetUSARTClockSource>
 800b92a:	4603      	mov	r3, r0
 800b92c:	2b03      	cmp	r3, #3
 800b92e:	d817      	bhi.n	800b960 <UART_SetConfig+0xe8>
 800b930:	a201      	add	r2, pc, #4	; (adr r2, 800b938 <UART_SetConfig+0xc0>)
 800b932:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b936:	bf00      	nop
 800b938:	0800b949 	.word	0x0800b949
 800b93c:	0800b955 	.word	0x0800b955
 800b940:	0800b94f 	.word	0x0800b94f
 800b944:	0800b95b 	.word	0x0800b95b
 800b948:	2301      	movs	r3, #1
 800b94a:	76fb      	strb	r3, [r7, #27]
 800b94c:	e038      	b.n	800b9c0 <UART_SetConfig+0x148>
 800b94e:	2302      	movs	r3, #2
 800b950:	76fb      	strb	r3, [r7, #27]
 800b952:	e035      	b.n	800b9c0 <UART_SetConfig+0x148>
 800b954:	2304      	movs	r3, #4
 800b956:	76fb      	strb	r3, [r7, #27]
 800b958:	e032      	b.n	800b9c0 <UART_SetConfig+0x148>
 800b95a:	2308      	movs	r3, #8
 800b95c:	76fb      	strb	r3, [r7, #27]
 800b95e:	e02f      	b.n	800b9c0 <UART_SetConfig+0x148>
 800b960:	2310      	movs	r3, #16
 800b962:	76fb      	strb	r3, [r7, #27]
 800b964:	bf00      	nop
 800b966:	e02b      	b.n	800b9c0 <UART_SetConfig+0x148>
 800b968:	687b      	ldr	r3, [r7, #4]
 800b96a:	681b      	ldr	r3, [r3, #0]
 800b96c:	4a75      	ldr	r2, [pc, #468]	; (800bb44 <UART_SetConfig+0x2cc>)
 800b96e:	4293      	cmp	r3, r2
 800b970:	d124      	bne.n	800b9bc <UART_SetConfig+0x144>
 800b972:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 800b976:	f7ff fe8b 	bl	800b690 <LL_RCC_GetLPUARTClockSource>
 800b97a:	4603      	mov	r3, r0
 800b97c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b980:	d012      	beq.n	800b9a8 <UART_SetConfig+0x130>
 800b982:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b986:	d802      	bhi.n	800b98e <UART_SetConfig+0x116>
 800b988:	2b00      	cmp	r3, #0
 800b98a:	d007      	beq.n	800b99c <UART_SetConfig+0x124>
 800b98c:	e012      	b.n	800b9b4 <UART_SetConfig+0x13c>
 800b98e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b992:	d006      	beq.n	800b9a2 <UART_SetConfig+0x12a>
 800b994:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800b998:	d009      	beq.n	800b9ae <UART_SetConfig+0x136>
 800b99a:	e00b      	b.n	800b9b4 <UART_SetConfig+0x13c>
 800b99c:	2300      	movs	r3, #0
 800b99e:	76fb      	strb	r3, [r7, #27]
 800b9a0:	e00e      	b.n	800b9c0 <UART_SetConfig+0x148>
 800b9a2:	2302      	movs	r3, #2
 800b9a4:	76fb      	strb	r3, [r7, #27]
 800b9a6:	e00b      	b.n	800b9c0 <UART_SetConfig+0x148>
 800b9a8:	2304      	movs	r3, #4
 800b9aa:	76fb      	strb	r3, [r7, #27]
 800b9ac:	e008      	b.n	800b9c0 <UART_SetConfig+0x148>
 800b9ae:	2308      	movs	r3, #8
 800b9b0:	76fb      	strb	r3, [r7, #27]
 800b9b2:	e005      	b.n	800b9c0 <UART_SetConfig+0x148>
 800b9b4:	2310      	movs	r3, #16
 800b9b6:	76fb      	strb	r3, [r7, #27]
 800b9b8:	bf00      	nop
 800b9ba:	e001      	b.n	800b9c0 <UART_SetConfig+0x148>
 800b9bc:	2310      	movs	r3, #16
 800b9be:	76fb      	strb	r3, [r7, #27]

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800b9c0:	687b      	ldr	r3, [r7, #4]
 800b9c2:	681b      	ldr	r3, [r3, #0]
 800b9c4:	4a5f      	ldr	r2, [pc, #380]	; (800bb44 <UART_SetConfig+0x2cc>)
 800b9c6:	4293      	cmp	r3, r2
 800b9c8:	f040 808e 	bne.w	800bae8 <UART_SetConfig+0x270>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800b9cc:	7efb      	ldrb	r3, [r7, #27]
 800b9ce:	2b08      	cmp	r3, #8
 800b9d0:	d823      	bhi.n	800ba1a <UART_SetConfig+0x1a2>
 800b9d2:	a201      	add	r2, pc, #4	; (adr r2, 800b9d8 <UART_SetConfig+0x160>)
 800b9d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b9d8:	0800b9fd 	.word	0x0800b9fd
 800b9dc:	0800ba1b 	.word	0x0800ba1b
 800b9e0:	0800ba05 	.word	0x0800ba05
 800b9e4:	0800ba1b 	.word	0x0800ba1b
 800b9e8:	0800ba0b 	.word	0x0800ba0b
 800b9ec:	0800ba1b 	.word	0x0800ba1b
 800b9f0:	0800ba1b 	.word	0x0800ba1b
 800b9f4:	0800ba1b 	.word	0x0800ba1b
 800b9f8:	0800ba13 	.word	0x0800ba13
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b9fc:	f7fc ffe8 	bl	80089d0 <HAL_RCC_GetPCLK1Freq>
 800ba00:	6178      	str	r0, [r7, #20]
        break;
 800ba02:	e00f      	b.n	800ba24 <UART_SetConfig+0x1ac>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800ba04:	4b51      	ldr	r3, [pc, #324]	; (800bb4c <UART_SetConfig+0x2d4>)
 800ba06:	617b      	str	r3, [r7, #20]
        break;
 800ba08:	e00c      	b.n	800ba24 <UART_SetConfig+0x1ac>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800ba0a:	f7fc ff63 	bl	80088d4 <HAL_RCC_GetSysClockFreq>
 800ba0e:	6178      	str	r0, [r7, #20]
        break;
 800ba10:	e008      	b.n	800ba24 <UART_SetConfig+0x1ac>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ba12:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ba16:	617b      	str	r3, [r7, #20]
        break;
 800ba18:	e004      	b.n	800ba24 <UART_SetConfig+0x1ac>
      default:
        pclk = 0U;
 800ba1a:	2300      	movs	r3, #0
 800ba1c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800ba1e:	2301      	movs	r3, #1
 800ba20:	76bb      	strb	r3, [r7, #26]
        break;
 800ba22:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800ba24:	697b      	ldr	r3, [r7, #20]
 800ba26:	2b00      	cmp	r3, #0
 800ba28:	f000 811c 	beq.w	800bc64 <UART_SetConfig+0x3ec>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800ba2c:	687b      	ldr	r3, [r7, #4]
 800ba2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba30:	4a47      	ldr	r2, [pc, #284]	; (800bb50 <UART_SetConfig+0x2d8>)
 800ba32:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ba36:	461a      	mov	r2, r3
 800ba38:	697b      	ldr	r3, [r7, #20]
 800ba3a:	fbb3 f3f2 	udiv	r3, r3, r2
 800ba3e:	60bb      	str	r3, [r7, #8]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800ba40:	687b      	ldr	r3, [r7, #4]
 800ba42:	685a      	ldr	r2, [r3, #4]
 800ba44:	4613      	mov	r3, r2
 800ba46:	005b      	lsls	r3, r3, #1
 800ba48:	4413      	add	r3, r2
 800ba4a:	68ba      	ldr	r2, [r7, #8]
 800ba4c:	429a      	cmp	r2, r3
 800ba4e:	d305      	bcc.n	800ba5c <UART_SetConfig+0x1e4>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800ba50:	687b      	ldr	r3, [r7, #4]
 800ba52:	685b      	ldr	r3, [r3, #4]
 800ba54:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800ba56:	68ba      	ldr	r2, [r7, #8]
 800ba58:	429a      	cmp	r2, r3
 800ba5a:	d902      	bls.n	800ba62 <UART_SetConfig+0x1ea>
      {
        ret = HAL_ERROR;
 800ba5c:	2301      	movs	r3, #1
 800ba5e:	76bb      	strb	r3, [r7, #26]
 800ba60:	e100      	b.n	800bc64 <UART_SetConfig+0x3ec>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range 
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ba62:	697b      	ldr	r3, [r7, #20]
 800ba64:	4618      	mov	r0, r3
 800ba66:	f04f 0100 	mov.w	r1, #0
 800ba6a:	687b      	ldr	r3, [r7, #4]
 800ba6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba6e:	4a38      	ldr	r2, [pc, #224]	; (800bb50 <UART_SetConfig+0x2d8>)
 800ba70:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ba74:	b29b      	uxth	r3, r3
 800ba76:	f04f 0400 	mov.w	r4, #0
 800ba7a:	461a      	mov	r2, r3
 800ba7c:	4623      	mov	r3, r4
 800ba7e:	f7f5 f86b 	bl	8000b58 <__aeabi_uldivmod>
 800ba82:	4603      	mov	r3, r0
 800ba84:	460c      	mov	r4, r1
 800ba86:	4619      	mov	r1, r3
 800ba88:	4622      	mov	r2, r4
 800ba8a:	f04f 0300 	mov.w	r3, #0
 800ba8e:	f04f 0400 	mov.w	r4, #0
 800ba92:	0214      	lsls	r4, r2, #8
 800ba94:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800ba98:	020b      	lsls	r3, r1, #8
 800ba9a:	687a      	ldr	r2, [r7, #4]
 800ba9c:	6852      	ldr	r2, [r2, #4]
 800ba9e:	0852      	lsrs	r2, r2, #1
 800baa0:	4611      	mov	r1, r2
 800baa2:	f04f 0200 	mov.w	r2, #0
 800baa6:	eb13 0b01 	adds.w	fp, r3, r1
 800baaa:	eb44 0c02 	adc.w	ip, r4, r2
 800baae:	4658      	mov	r0, fp
 800bab0:	4661      	mov	r1, ip
 800bab2:	687b      	ldr	r3, [r7, #4]
 800bab4:	685b      	ldr	r3, [r3, #4]
 800bab6:	f04f 0400 	mov.w	r4, #0
 800baba:	461a      	mov	r2, r3
 800babc:	4623      	mov	r3, r4
 800babe:	f7f5 f84b 	bl	8000b58 <__aeabi_uldivmod>
 800bac2:	4603      	mov	r3, r0
 800bac4:	460c      	mov	r4, r1
 800bac6:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800bac8:	693b      	ldr	r3, [r7, #16]
 800baca:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800bace:	d308      	bcc.n	800bae2 <UART_SetConfig+0x26a>
 800bad0:	693b      	ldr	r3, [r7, #16]
 800bad2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800bad6:	d204      	bcs.n	800bae2 <UART_SetConfig+0x26a>
        {
          huart->Instance->BRR = usartdiv;
 800bad8:	687b      	ldr	r3, [r7, #4]
 800bada:	681b      	ldr	r3, [r3, #0]
 800badc:	693a      	ldr	r2, [r7, #16]
 800bade:	60da      	str	r2, [r3, #12]
 800bae0:	e0c0      	b.n	800bc64 <UART_SetConfig+0x3ec>
        }
        else
        {
          ret = HAL_ERROR;
 800bae2:	2301      	movs	r3, #1
 800bae4:	76bb      	strb	r3, [r7, #26]
 800bae6:	e0bd      	b.n	800bc64 <UART_SetConfig+0x3ec>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800bae8:	687b      	ldr	r3, [r7, #4]
 800baea:	69db      	ldr	r3, [r3, #28]
 800baec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800baf0:	d169      	bne.n	800bbc6 <UART_SetConfig+0x34e>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 800baf2:	7efb      	ldrb	r3, [r7, #27]
 800baf4:	3b01      	subs	r3, #1
 800baf6:	2b07      	cmp	r3, #7
 800baf8:	d82c      	bhi.n	800bb54 <UART_SetConfig+0x2dc>
 800bafa:	a201      	add	r2, pc, #4	; (adr r2, 800bb00 <UART_SetConfig+0x288>)
 800bafc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bb00:	0800bb21 	.word	0x0800bb21
 800bb04:	0800bb29 	.word	0x0800bb29
 800bb08:	0800bb55 	.word	0x0800bb55
 800bb0c:	0800bb2f 	.word	0x0800bb2f
 800bb10:	0800bb55 	.word	0x0800bb55
 800bb14:	0800bb55 	.word	0x0800bb55
 800bb18:	0800bb55 	.word	0x0800bb55
 800bb1c:	0800bb37 	.word	0x0800bb37
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800bb20:	f7fc ff6c 	bl	80089fc <HAL_RCC_GetPCLK2Freq>
 800bb24:	6178      	str	r0, [r7, #20]
        break;
 800bb26:	e01a      	b.n	800bb5e <UART_SetConfig+0x2e6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800bb28:	4b08      	ldr	r3, [pc, #32]	; (800bb4c <UART_SetConfig+0x2d4>)
 800bb2a:	617b      	str	r3, [r7, #20]
        break;
 800bb2c:	e017      	b.n	800bb5e <UART_SetConfig+0x2e6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800bb2e:	f7fc fed1 	bl	80088d4 <HAL_RCC_GetSysClockFreq>
 800bb32:	6178      	str	r0, [r7, #20]
        break;
 800bb34:	e013      	b.n	800bb5e <UART_SetConfig+0x2e6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800bb36:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800bb3a:	617b      	str	r3, [r7, #20]
        break;
 800bb3c:	e00f      	b.n	800bb5e <UART_SetConfig+0x2e6>
 800bb3e:	bf00      	nop
 800bb40:	cfff69f3 	.word	0xcfff69f3
 800bb44:	40008000 	.word	0x40008000
 800bb48:	40013800 	.word	0x40013800
 800bb4c:	00f42400 	.word	0x00f42400
 800bb50:	08017820 	.word	0x08017820
      default:
        pclk = 0U;
 800bb54:	2300      	movs	r3, #0
 800bb56:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800bb58:	2301      	movs	r3, #1
 800bb5a:	76bb      	strb	r3, [r7, #26]
        break;
 800bb5c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800bb5e:	697b      	ldr	r3, [r7, #20]
 800bb60:	2b00      	cmp	r3, #0
 800bb62:	d07f      	beq.n	800bc64 <UART_SetConfig+0x3ec>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800bb64:	687b      	ldr	r3, [r7, #4]
 800bb66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb68:	4a48      	ldr	r2, [pc, #288]	; (800bc8c <UART_SetConfig+0x414>)
 800bb6a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800bb6e:	461a      	mov	r2, r3
 800bb70:	697b      	ldr	r3, [r7, #20]
 800bb72:	fbb3 f3f2 	udiv	r3, r3, r2
 800bb76:	005a      	lsls	r2, r3, #1
 800bb78:	687b      	ldr	r3, [r7, #4]
 800bb7a:	685b      	ldr	r3, [r3, #4]
 800bb7c:	085b      	lsrs	r3, r3, #1
 800bb7e:	441a      	add	r2, r3
 800bb80:	687b      	ldr	r3, [r7, #4]
 800bb82:	685b      	ldr	r3, [r3, #4]
 800bb84:	fbb2 f3f3 	udiv	r3, r2, r3
 800bb88:	b29b      	uxth	r3, r3
 800bb8a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800bb8c:	693b      	ldr	r3, [r7, #16]
 800bb8e:	2b0f      	cmp	r3, #15
 800bb90:	d916      	bls.n	800bbc0 <UART_SetConfig+0x348>
 800bb92:	693b      	ldr	r3, [r7, #16]
 800bb94:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bb98:	d212      	bcs.n	800bbc0 <UART_SetConfig+0x348>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800bb9a:	693b      	ldr	r3, [r7, #16]
 800bb9c:	b29b      	uxth	r3, r3
 800bb9e:	f023 030f 	bic.w	r3, r3, #15
 800bba2:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800bba4:	693b      	ldr	r3, [r7, #16]
 800bba6:	085b      	lsrs	r3, r3, #1
 800bba8:	b29b      	uxth	r3, r3
 800bbaa:	f003 0307 	and.w	r3, r3, #7
 800bbae:	b29a      	uxth	r2, r3
 800bbb0:	89fb      	ldrh	r3, [r7, #14]
 800bbb2:	4313      	orrs	r3, r2
 800bbb4:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800bbb6:	687b      	ldr	r3, [r7, #4]
 800bbb8:	681b      	ldr	r3, [r3, #0]
 800bbba:	89fa      	ldrh	r2, [r7, #14]
 800bbbc:	60da      	str	r2, [r3, #12]
 800bbbe:	e051      	b.n	800bc64 <UART_SetConfig+0x3ec>
      }
      else
      {
        ret = HAL_ERROR;
 800bbc0:	2301      	movs	r3, #1
 800bbc2:	76bb      	strb	r3, [r7, #26]
 800bbc4:	e04e      	b.n	800bc64 <UART_SetConfig+0x3ec>
      }
    }
  }
  else
  {
    switch (clocksource)
 800bbc6:	7efb      	ldrb	r3, [r7, #27]
 800bbc8:	3b01      	subs	r3, #1
 800bbca:	2b07      	cmp	r3, #7
 800bbcc:	d821      	bhi.n	800bc12 <UART_SetConfig+0x39a>
 800bbce:	a201      	add	r2, pc, #4	; (adr r2, 800bbd4 <UART_SetConfig+0x35c>)
 800bbd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bbd4:	0800bbf5 	.word	0x0800bbf5
 800bbd8:	0800bbfd 	.word	0x0800bbfd
 800bbdc:	0800bc13 	.word	0x0800bc13
 800bbe0:	0800bc03 	.word	0x0800bc03
 800bbe4:	0800bc13 	.word	0x0800bc13
 800bbe8:	0800bc13 	.word	0x0800bc13
 800bbec:	0800bc13 	.word	0x0800bc13
 800bbf0:	0800bc0b 	.word	0x0800bc0b
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800bbf4:	f7fc ff02 	bl	80089fc <HAL_RCC_GetPCLK2Freq>
 800bbf8:	6178      	str	r0, [r7, #20]
        break;
 800bbfa:	e00f      	b.n	800bc1c <UART_SetConfig+0x3a4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800bbfc:	4b24      	ldr	r3, [pc, #144]	; (800bc90 <UART_SetConfig+0x418>)
 800bbfe:	617b      	str	r3, [r7, #20]
        break;
 800bc00:	e00c      	b.n	800bc1c <UART_SetConfig+0x3a4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800bc02:	f7fc fe67 	bl	80088d4 <HAL_RCC_GetSysClockFreq>
 800bc06:	6178      	str	r0, [r7, #20]
        break;
 800bc08:	e008      	b.n	800bc1c <UART_SetConfig+0x3a4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800bc0a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800bc0e:	617b      	str	r3, [r7, #20]
        break;
 800bc10:	e004      	b.n	800bc1c <UART_SetConfig+0x3a4>
      default:
        pclk = 0U;
 800bc12:	2300      	movs	r3, #0
 800bc14:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800bc16:	2301      	movs	r3, #1
 800bc18:	76bb      	strb	r3, [r7, #26]
        break;
 800bc1a:	bf00      	nop
    }

    if (pclk != 0U)
 800bc1c:	697b      	ldr	r3, [r7, #20]
 800bc1e:	2b00      	cmp	r3, #0
 800bc20:	d020      	beq.n	800bc64 <UART_SetConfig+0x3ec>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800bc22:	687b      	ldr	r3, [r7, #4]
 800bc24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc26:	4a19      	ldr	r2, [pc, #100]	; (800bc8c <UART_SetConfig+0x414>)
 800bc28:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800bc2c:	461a      	mov	r2, r3
 800bc2e:	697b      	ldr	r3, [r7, #20]
 800bc30:	fbb3 f2f2 	udiv	r2, r3, r2
 800bc34:	687b      	ldr	r3, [r7, #4]
 800bc36:	685b      	ldr	r3, [r3, #4]
 800bc38:	085b      	lsrs	r3, r3, #1
 800bc3a:	441a      	add	r2, r3
 800bc3c:	687b      	ldr	r3, [r7, #4]
 800bc3e:	685b      	ldr	r3, [r3, #4]
 800bc40:	fbb2 f3f3 	udiv	r3, r2, r3
 800bc44:	b29b      	uxth	r3, r3
 800bc46:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800bc48:	693b      	ldr	r3, [r7, #16]
 800bc4a:	2b0f      	cmp	r3, #15
 800bc4c:	d908      	bls.n	800bc60 <UART_SetConfig+0x3e8>
 800bc4e:	693b      	ldr	r3, [r7, #16]
 800bc50:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bc54:	d204      	bcs.n	800bc60 <UART_SetConfig+0x3e8>
      {
        huart->Instance->BRR = usartdiv;
 800bc56:	687b      	ldr	r3, [r7, #4]
 800bc58:	681b      	ldr	r3, [r3, #0]
 800bc5a:	693a      	ldr	r2, [r7, #16]
 800bc5c:	60da      	str	r2, [r3, #12]
 800bc5e:	e001      	b.n	800bc64 <UART_SetConfig+0x3ec>
      }
      else
      {
        ret = HAL_ERROR;
 800bc60:	2301      	movs	r3, #1
 800bc62:	76bb      	strb	r3, [r7, #26]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800bc64:	687b      	ldr	r3, [r7, #4]
 800bc66:	2201      	movs	r2, #1
 800bc68:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800bc6c:	687b      	ldr	r3, [r7, #4]
 800bc6e:	2201      	movs	r2, #1
 800bc70:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800bc74:	687b      	ldr	r3, [r7, #4]
 800bc76:	2200      	movs	r2, #0
 800bc78:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 800bc7a:	687b      	ldr	r3, [r7, #4]
 800bc7c:	2200      	movs	r2, #0
 800bc7e:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 800bc80:	7ebb      	ldrb	r3, [r7, #26]
}
 800bc82:	4618      	mov	r0, r3
 800bc84:	3720      	adds	r7, #32
 800bc86:	46bd      	mov	sp, r7
 800bc88:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 800bc8c:	08017820 	.word	0x08017820
 800bc90:	00f42400 	.word	0x00f42400

0800bc94 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800bc94:	b480      	push	{r7}
 800bc96:	b083      	sub	sp, #12
 800bc98:	af00      	add	r7, sp, #0
 800bc9a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800bc9c:	687b      	ldr	r3, [r7, #4]
 800bc9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bca0:	f003 0301 	and.w	r3, r3, #1
 800bca4:	2b00      	cmp	r3, #0
 800bca6:	d00a      	beq.n	800bcbe <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800bca8:	687b      	ldr	r3, [r7, #4]
 800bcaa:	681b      	ldr	r3, [r3, #0]
 800bcac:	685b      	ldr	r3, [r3, #4]
 800bcae:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800bcb2:	687b      	ldr	r3, [r7, #4]
 800bcb4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bcb6:	687b      	ldr	r3, [r7, #4]
 800bcb8:	681b      	ldr	r3, [r3, #0]
 800bcba:	430a      	orrs	r2, r1
 800bcbc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800bcbe:	687b      	ldr	r3, [r7, #4]
 800bcc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bcc2:	f003 0302 	and.w	r3, r3, #2
 800bcc6:	2b00      	cmp	r3, #0
 800bcc8:	d00a      	beq.n	800bce0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800bcca:	687b      	ldr	r3, [r7, #4]
 800bccc:	681b      	ldr	r3, [r3, #0]
 800bcce:	685b      	ldr	r3, [r3, #4]
 800bcd0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800bcd4:	687b      	ldr	r3, [r7, #4]
 800bcd6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800bcd8:	687b      	ldr	r3, [r7, #4]
 800bcda:	681b      	ldr	r3, [r3, #0]
 800bcdc:	430a      	orrs	r2, r1
 800bcde:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800bce0:	687b      	ldr	r3, [r7, #4]
 800bce2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bce4:	f003 0304 	and.w	r3, r3, #4
 800bce8:	2b00      	cmp	r3, #0
 800bcea:	d00a      	beq.n	800bd02 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800bcec:	687b      	ldr	r3, [r7, #4]
 800bcee:	681b      	ldr	r3, [r3, #0]
 800bcf0:	685b      	ldr	r3, [r3, #4]
 800bcf2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800bcf6:	687b      	ldr	r3, [r7, #4]
 800bcf8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800bcfa:	687b      	ldr	r3, [r7, #4]
 800bcfc:	681b      	ldr	r3, [r3, #0]
 800bcfe:	430a      	orrs	r2, r1
 800bd00:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800bd02:	687b      	ldr	r3, [r7, #4]
 800bd04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bd06:	f003 0308 	and.w	r3, r3, #8
 800bd0a:	2b00      	cmp	r3, #0
 800bd0c:	d00a      	beq.n	800bd24 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800bd0e:	687b      	ldr	r3, [r7, #4]
 800bd10:	681b      	ldr	r3, [r3, #0]
 800bd12:	685b      	ldr	r3, [r3, #4]
 800bd14:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800bd18:	687b      	ldr	r3, [r7, #4]
 800bd1a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bd1c:	687b      	ldr	r3, [r7, #4]
 800bd1e:	681b      	ldr	r3, [r3, #0]
 800bd20:	430a      	orrs	r2, r1
 800bd22:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800bd24:	687b      	ldr	r3, [r7, #4]
 800bd26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bd28:	f003 0310 	and.w	r3, r3, #16
 800bd2c:	2b00      	cmp	r3, #0
 800bd2e:	d00a      	beq.n	800bd46 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800bd30:	687b      	ldr	r3, [r7, #4]
 800bd32:	681b      	ldr	r3, [r3, #0]
 800bd34:	689b      	ldr	r3, [r3, #8]
 800bd36:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800bd3a:	687b      	ldr	r3, [r7, #4]
 800bd3c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800bd3e:	687b      	ldr	r3, [r7, #4]
 800bd40:	681b      	ldr	r3, [r3, #0]
 800bd42:	430a      	orrs	r2, r1
 800bd44:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800bd46:	687b      	ldr	r3, [r7, #4]
 800bd48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bd4a:	f003 0320 	and.w	r3, r3, #32
 800bd4e:	2b00      	cmp	r3, #0
 800bd50:	d00a      	beq.n	800bd68 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800bd52:	687b      	ldr	r3, [r7, #4]
 800bd54:	681b      	ldr	r3, [r3, #0]
 800bd56:	689b      	ldr	r3, [r3, #8]
 800bd58:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800bd5c:	687b      	ldr	r3, [r7, #4]
 800bd5e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800bd60:	687b      	ldr	r3, [r7, #4]
 800bd62:	681b      	ldr	r3, [r3, #0]
 800bd64:	430a      	orrs	r2, r1
 800bd66:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800bd68:	687b      	ldr	r3, [r7, #4]
 800bd6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bd6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bd70:	2b00      	cmp	r3, #0
 800bd72:	d01a      	beq.n	800bdaa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800bd74:	687b      	ldr	r3, [r7, #4]
 800bd76:	681b      	ldr	r3, [r3, #0]
 800bd78:	685b      	ldr	r3, [r3, #4]
 800bd7a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800bd7e:	687b      	ldr	r3, [r7, #4]
 800bd80:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800bd82:	687b      	ldr	r3, [r7, #4]
 800bd84:	681b      	ldr	r3, [r3, #0]
 800bd86:	430a      	orrs	r2, r1
 800bd88:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800bd8a:	687b      	ldr	r3, [r7, #4]
 800bd8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bd8e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800bd92:	d10a      	bne.n	800bdaa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800bd94:	687b      	ldr	r3, [r7, #4]
 800bd96:	681b      	ldr	r3, [r3, #0]
 800bd98:	685b      	ldr	r3, [r3, #4]
 800bd9a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800bd9e:	687b      	ldr	r3, [r7, #4]
 800bda0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800bda2:	687b      	ldr	r3, [r7, #4]
 800bda4:	681b      	ldr	r3, [r3, #0]
 800bda6:	430a      	orrs	r2, r1
 800bda8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800bdaa:	687b      	ldr	r3, [r7, #4]
 800bdac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bdae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bdb2:	2b00      	cmp	r3, #0
 800bdb4:	d00a      	beq.n	800bdcc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800bdb6:	687b      	ldr	r3, [r7, #4]
 800bdb8:	681b      	ldr	r3, [r3, #0]
 800bdba:	685b      	ldr	r3, [r3, #4]
 800bdbc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800bdc0:	687b      	ldr	r3, [r7, #4]
 800bdc2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800bdc4:	687b      	ldr	r3, [r7, #4]
 800bdc6:	681b      	ldr	r3, [r3, #0]
 800bdc8:	430a      	orrs	r2, r1
 800bdca:	605a      	str	r2, [r3, #4]
  }
}
 800bdcc:	bf00      	nop
 800bdce:	370c      	adds	r7, #12
 800bdd0:	46bd      	mov	sp, r7
 800bdd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdd6:	4770      	bx	lr

0800bdd8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800bdd8:	b580      	push	{r7, lr}
 800bdda:	b086      	sub	sp, #24
 800bddc:	af02      	add	r7, sp, #8
 800bdde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bde0:	687b      	ldr	r3, [r7, #4]
 800bde2:	2200      	movs	r2, #0
 800bde4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800bde8:	f7fa f928 	bl	800603c <HAL_GetTick>
 800bdec:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800bdee:	687b      	ldr	r3, [r7, #4]
 800bdf0:	681b      	ldr	r3, [r3, #0]
 800bdf2:	681b      	ldr	r3, [r3, #0]
 800bdf4:	f003 0308 	and.w	r3, r3, #8
 800bdf8:	2b08      	cmp	r3, #8
 800bdfa:	d10e      	bne.n	800be1a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800bdfc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800be00:	9300      	str	r3, [sp, #0]
 800be02:	68fb      	ldr	r3, [r7, #12]
 800be04:	2200      	movs	r2, #0
 800be06:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800be0a:	6878      	ldr	r0, [r7, #4]
 800be0c:	f000 f82c 	bl	800be68 <UART_WaitOnFlagUntilTimeout>
 800be10:	4603      	mov	r3, r0
 800be12:	2b00      	cmp	r3, #0
 800be14:	d001      	beq.n	800be1a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800be16:	2303      	movs	r3, #3
 800be18:	e022      	b.n	800be60 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800be1a:	687b      	ldr	r3, [r7, #4]
 800be1c:	681b      	ldr	r3, [r3, #0]
 800be1e:	681b      	ldr	r3, [r3, #0]
 800be20:	f003 0304 	and.w	r3, r3, #4
 800be24:	2b04      	cmp	r3, #4
 800be26:	d10e      	bne.n	800be46 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800be28:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800be2c:	9300      	str	r3, [sp, #0]
 800be2e:	68fb      	ldr	r3, [r7, #12]
 800be30:	2200      	movs	r2, #0
 800be32:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800be36:	6878      	ldr	r0, [r7, #4]
 800be38:	f000 f816 	bl	800be68 <UART_WaitOnFlagUntilTimeout>
 800be3c:	4603      	mov	r3, r0
 800be3e:	2b00      	cmp	r3, #0
 800be40:	d001      	beq.n	800be46 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800be42:	2303      	movs	r3, #3
 800be44:	e00c      	b.n	800be60 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800be46:	687b      	ldr	r3, [r7, #4]
 800be48:	2220      	movs	r2, #32
 800be4a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 800be4e:	687b      	ldr	r3, [r7, #4]
 800be50:	2220      	movs	r2, #32
 800be52:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 800be56:	687b      	ldr	r3, [r7, #4]
 800be58:	2200      	movs	r2, #0
 800be5a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800be5e:	2300      	movs	r3, #0
}
 800be60:	4618      	mov	r0, r3
 800be62:	3710      	adds	r7, #16
 800be64:	46bd      	mov	sp, r7
 800be66:	bd80      	pop	{r7, pc}

0800be68 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800be68:	b580      	push	{r7, lr}
 800be6a:	b084      	sub	sp, #16
 800be6c:	af00      	add	r7, sp, #0
 800be6e:	60f8      	str	r0, [r7, #12]
 800be70:	60b9      	str	r1, [r7, #8]
 800be72:	603b      	str	r3, [r7, #0]
 800be74:	4613      	mov	r3, r2
 800be76:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800be78:	e062      	b.n	800bf40 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800be7a:	69bb      	ldr	r3, [r7, #24]
 800be7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800be80:	d05e      	beq.n	800bf40 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800be82:	f7fa f8db 	bl	800603c <HAL_GetTick>
 800be86:	4602      	mov	r2, r0
 800be88:	683b      	ldr	r3, [r7, #0]
 800be8a:	1ad3      	subs	r3, r2, r3
 800be8c:	69ba      	ldr	r2, [r7, #24]
 800be8e:	429a      	cmp	r2, r3
 800be90:	d302      	bcc.n	800be98 <UART_WaitOnFlagUntilTimeout+0x30>
 800be92:	69bb      	ldr	r3, [r7, #24]
 800be94:	2b00      	cmp	r3, #0
 800be96:	d11d      	bne.n	800bed4 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800be98:	68fb      	ldr	r3, [r7, #12]
 800be9a:	681b      	ldr	r3, [r3, #0]
 800be9c:	681a      	ldr	r2, [r3, #0]
 800be9e:	68fb      	ldr	r3, [r7, #12]
 800bea0:	681b      	ldr	r3, [r3, #0]
 800bea2:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800bea6:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bea8:	68fb      	ldr	r3, [r7, #12]
 800beaa:	681b      	ldr	r3, [r3, #0]
 800beac:	689a      	ldr	r2, [r3, #8]
 800beae:	68fb      	ldr	r3, [r7, #12]
 800beb0:	681b      	ldr	r3, [r3, #0]
 800beb2:	f022 0201 	bic.w	r2, r2, #1
 800beb6:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800beb8:	68fb      	ldr	r3, [r7, #12]
 800beba:	2220      	movs	r2, #32
 800bebc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 800bec0:	68fb      	ldr	r3, [r7, #12]
 800bec2:	2220      	movs	r2, #32
 800bec4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 800bec8:	68fb      	ldr	r3, [r7, #12]
 800beca:	2200      	movs	r2, #0
 800becc:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 800bed0:	2303      	movs	r3, #3
 800bed2:	e045      	b.n	800bf60 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800bed4:	68fb      	ldr	r3, [r7, #12]
 800bed6:	681b      	ldr	r3, [r3, #0]
 800bed8:	681b      	ldr	r3, [r3, #0]
 800beda:	f003 0304 	and.w	r3, r3, #4
 800bede:	2b00      	cmp	r3, #0
 800bee0:	d02e      	beq.n	800bf40 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800bee2:	68fb      	ldr	r3, [r7, #12]
 800bee4:	681b      	ldr	r3, [r3, #0]
 800bee6:	69db      	ldr	r3, [r3, #28]
 800bee8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800beec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800bef0:	d126      	bne.n	800bf40 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800bef2:	68fb      	ldr	r3, [r7, #12]
 800bef4:	681b      	ldr	r3, [r3, #0]
 800bef6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800befa:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800befc:	68fb      	ldr	r3, [r7, #12]
 800befe:	681b      	ldr	r3, [r3, #0]
 800bf00:	681a      	ldr	r2, [r3, #0]
 800bf02:	68fb      	ldr	r3, [r7, #12]
 800bf04:	681b      	ldr	r3, [r3, #0]
 800bf06:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800bf0a:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bf0c:	68fb      	ldr	r3, [r7, #12]
 800bf0e:	681b      	ldr	r3, [r3, #0]
 800bf10:	689a      	ldr	r2, [r3, #8]
 800bf12:	68fb      	ldr	r3, [r7, #12]
 800bf14:	681b      	ldr	r3, [r3, #0]
 800bf16:	f022 0201 	bic.w	r2, r2, #1
 800bf1a:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800bf1c:	68fb      	ldr	r3, [r7, #12]
 800bf1e:	2220      	movs	r2, #32
 800bf20:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 800bf24:	68fb      	ldr	r3, [r7, #12]
 800bf26:	2220      	movs	r2, #32
 800bf28:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800bf2c:	68fb      	ldr	r3, [r7, #12]
 800bf2e:	2220      	movs	r2, #32
 800bf30:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800bf34:	68fb      	ldr	r3, [r7, #12]
 800bf36:	2200      	movs	r2, #0
 800bf38:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
          
          return HAL_TIMEOUT;
 800bf3c:	2303      	movs	r3, #3
 800bf3e:	e00f      	b.n	800bf60 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800bf40:	68fb      	ldr	r3, [r7, #12]
 800bf42:	681b      	ldr	r3, [r3, #0]
 800bf44:	69da      	ldr	r2, [r3, #28]
 800bf46:	68bb      	ldr	r3, [r7, #8]
 800bf48:	4013      	ands	r3, r2
 800bf4a:	68ba      	ldr	r2, [r7, #8]
 800bf4c:	429a      	cmp	r2, r3
 800bf4e:	bf0c      	ite	eq
 800bf50:	2301      	moveq	r3, #1
 800bf52:	2300      	movne	r3, #0
 800bf54:	b2db      	uxtb	r3, r3
 800bf56:	461a      	mov	r2, r3
 800bf58:	79fb      	ldrb	r3, [r7, #7]
 800bf5a:	429a      	cmp	r2, r3
 800bf5c:	d08d      	beq.n	800be7a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800bf5e:	2300      	movs	r3, #0
}
 800bf60:	4618      	mov	r0, r3
 800bf62:	3710      	adds	r7, #16
 800bf64:	46bd      	mov	sp, r7
 800bf66:	bd80      	pop	{r7, pc}

0800bf68 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800bf68:	b480      	push	{r7}
 800bf6a:	b083      	sub	sp, #12
 800bf6c:	af00      	add	r7, sp, #0
 800bf6e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800bf70:	687b      	ldr	r3, [r7, #4]
 800bf72:	681b      	ldr	r3, [r3, #0]
 800bf74:	681a      	ldr	r2, [r3, #0]
 800bf76:	687b      	ldr	r3, [r7, #4]
 800bf78:	681b      	ldr	r3, [r3, #0]
 800bf7a:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800bf7e:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800bf80:	687b      	ldr	r3, [r7, #4]
 800bf82:	681b      	ldr	r3, [r3, #0]
 800bf84:	689a      	ldr	r2, [r3, #8]
 800bf86:	687b      	ldr	r3, [r7, #4]
 800bf88:	681b      	ldr	r3, [r3, #0]
 800bf8a:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 800bf8e:	609a      	str	r2, [r3, #8]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800bf90:	687b      	ldr	r3, [r7, #4]
 800bf92:	2220      	movs	r2, #32
 800bf94:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
}
 800bf98:	bf00      	nop
 800bf9a:	370c      	adds	r7, #12
 800bf9c:	46bd      	mov	sp, r7
 800bf9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfa2:	4770      	bx	lr

0800bfa4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800bfa4:	b480      	push	{r7}
 800bfa6:	b083      	sub	sp, #12
 800bfa8:	af00      	add	r7, sp, #0
 800bfaa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800bfac:	687b      	ldr	r3, [r7, #4]
 800bfae:	681b      	ldr	r3, [r3, #0]
 800bfb0:	681a      	ldr	r2, [r3, #0]
 800bfb2:	687b      	ldr	r3, [r7, #4]
 800bfb4:	681b      	ldr	r3, [r3, #0]
 800bfb6:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800bfba:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800bfbc:	687b      	ldr	r3, [r7, #4]
 800bfbe:	681b      	ldr	r3, [r3, #0]
 800bfc0:	689b      	ldr	r3, [r3, #8]
 800bfc2:	687a      	ldr	r2, [r7, #4]
 800bfc4:	6812      	ldr	r2, [r2, #0]
 800bfc6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800bfca:	f023 0301 	bic.w	r3, r3, #1
 800bfce:	6093      	str	r3, [r2, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800bfd0:	687b      	ldr	r3, [r7, #4]
 800bfd2:	2220      	movs	r2, #32
 800bfd4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800bfd8:	687b      	ldr	r3, [r7, #4]
 800bfda:	2200      	movs	r2, #0
 800bfdc:	66da      	str	r2, [r3, #108]	; 0x6c
}
 800bfde:	bf00      	nop
 800bfe0:	370c      	adds	r7, #12
 800bfe2:	46bd      	mov	sp, r7
 800bfe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfe8:	4770      	bx	lr

0800bfea <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800bfea:	b580      	push	{r7, lr}
 800bfec:	b084      	sub	sp, #16
 800bfee:	af00      	add	r7, sp, #0
 800bff0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800bff2:	687b      	ldr	r3, [r7, #4]
 800bff4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bff6:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800bff8:	687b      	ldr	r3, [r7, #4]
 800bffa:	681b      	ldr	r3, [r3, #0]
 800bffc:	681b      	ldr	r3, [r3, #0]
 800bffe:	f003 0320 	and.w	r3, r3, #32
 800c002:	2b00      	cmp	r3, #0
 800c004:	d114      	bne.n	800c030 <UART_DMATransmitCplt+0x46>
  {
    huart->TxXferCount = 0U;
 800c006:	68fb      	ldr	r3, [r7, #12]
 800c008:	2200      	movs	r2, #0
 800c00a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800c00e:	68fb      	ldr	r3, [r7, #12]
 800c010:	681b      	ldr	r3, [r3, #0]
 800c012:	689a      	ldr	r2, [r3, #8]
 800c014:	68fb      	ldr	r3, [r7, #12]
 800c016:	681b      	ldr	r3, [r3, #0]
 800c018:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800c01c:	609a      	str	r2, [r3, #8]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800c01e:	68fb      	ldr	r3, [r7, #12]
 800c020:	681b      	ldr	r3, [r3, #0]
 800c022:	681a      	ldr	r2, [r3, #0]
 800c024:	68fb      	ldr	r3, [r7, #12]
 800c026:	681b      	ldr	r3, [r3, #0]
 800c028:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c02c:	601a      	str	r2, [r3, #0]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800c02e:	e002      	b.n	800c036 <UART_DMATransmitCplt+0x4c>
    HAL_UART_TxCpltCallback(huart);
 800c030:	68f8      	ldr	r0, [r7, #12]
 800c032:	f7f7 fe9f 	bl	8003d74 <HAL_UART_TxCpltCallback>
}
 800c036:	bf00      	nop
 800c038:	3710      	adds	r7, #16
 800c03a:	46bd      	mov	sp, r7
 800c03c:	bd80      	pop	{r7, pc}

0800c03e <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800c03e:	b580      	push	{r7, lr}
 800c040:	b084      	sub	sp, #16
 800c042:	af00      	add	r7, sp, #0
 800c044:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c046:	687b      	ldr	r3, [r7, #4]
 800c048:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c04a:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800c04c:	68f8      	ldr	r0, [r7, #12]
 800c04e:	f7ff fbff 	bl	800b850 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c052:	bf00      	nop
 800c054:	3710      	adds	r7, #16
 800c056:	46bd      	mov	sp, r7
 800c058:	bd80      	pop	{r7, pc}

0800c05a <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800c05a:	b580      	push	{r7, lr}
 800c05c:	b086      	sub	sp, #24
 800c05e:	af00      	add	r7, sp, #0
 800c060:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c062:	687b      	ldr	r3, [r7, #4]
 800c064:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c066:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800c068:	697b      	ldr	r3, [r7, #20]
 800c06a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c06e:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800c070:	697b      	ldr	r3, [r7, #20]
 800c072:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c076:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800c078:	697b      	ldr	r3, [r7, #20]
 800c07a:	681b      	ldr	r3, [r3, #0]
 800c07c:	689b      	ldr	r3, [r3, #8]
 800c07e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c082:	2b80      	cmp	r3, #128	; 0x80
 800c084:	d109      	bne.n	800c09a <UART_DMAError+0x40>
 800c086:	693b      	ldr	r3, [r7, #16]
 800c088:	2b21      	cmp	r3, #33	; 0x21
 800c08a:	d106      	bne.n	800c09a <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800c08c:	697b      	ldr	r3, [r7, #20]
 800c08e:	2200      	movs	r2, #0
 800c090:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 800c094:	6978      	ldr	r0, [r7, #20]
 800c096:	f7ff ff67 	bl	800bf68 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800c09a:	697b      	ldr	r3, [r7, #20]
 800c09c:	681b      	ldr	r3, [r3, #0]
 800c09e:	689b      	ldr	r3, [r3, #8]
 800c0a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c0a4:	2b40      	cmp	r3, #64	; 0x40
 800c0a6:	d109      	bne.n	800c0bc <UART_DMAError+0x62>
 800c0a8:	68fb      	ldr	r3, [r7, #12]
 800c0aa:	2b22      	cmp	r3, #34	; 0x22
 800c0ac:	d106      	bne.n	800c0bc <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800c0ae:	697b      	ldr	r3, [r7, #20]
 800c0b0:	2200      	movs	r2, #0
 800c0b2:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 800c0b6:	6978      	ldr	r0, [r7, #20]
 800c0b8:	f7ff ff74 	bl	800bfa4 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800c0bc:	697b      	ldr	r3, [r7, #20]
 800c0be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c0c2:	f043 0210 	orr.w	r2, r3, #16
 800c0c6:	697b      	ldr	r3, [r7, #20]
 800c0c8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800c0cc:	6978      	ldr	r0, [r7, #20]
 800c0ce:	f7ff fbc9 	bl	800b864 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c0d2:	bf00      	nop
 800c0d4:	3718      	adds	r7, #24
 800c0d6:	46bd      	mov	sp, r7
 800c0d8:	bd80      	pop	{r7, pc}

0800c0da <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800c0da:	b480      	push	{r7}
 800c0dc:	b085      	sub	sp, #20
 800c0de:	af00      	add	r7, sp, #0
 800c0e0:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c0e2:	687b      	ldr	r3, [r7, #4]
 800c0e4:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800c0e8:	2b01      	cmp	r3, #1
 800c0ea:	d101      	bne.n	800c0f0 <HAL_UARTEx_DisableFifoMode+0x16>
 800c0ec:	2302      	movs	r3, #2
 800c0ee:	e027      	b.n	800c140 <HAL_UARTEx_DisableFifoMode+0x66>
 800c0f0:	687b      	ldr	r3, [r7, #4]
 800c0f2:	2201      	movs	r2, #1
 800c0f4:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800c0f8:	687b      	ldr	r3, [r7, #4]
 800c0fa:	2224      	movs	r2, #36	; 0x24
 800c0fc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c100:	687b      	ldr	r3, [r7, #4]
 800c102:	681b      	ldr	r3, [r3, #0]
 800c104:	681b      	ldr	r3, [r3, #0]
 800c106:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c108:	687b      	ldr	r3, [r7, #4]
 800c10a:	681b      	ldr	r3, [r3, #0]
 800c10c:	681a      	ldr	r2, [r3, #0]
 800c10e:	687b      	ldr	r3, [r7, #4]
 800c110:	681b      	ldr	r3, [r3, #0]
 800c112:	f022 0201 	bic.w	r2, r2, #1
 800c116:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800c118:	68fb      	ldr	r3, [r7, #12]
 800c11a:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800c11e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800c120:	687b      	ldr	r3, [r7, #4]
 800c122:	2200      	movs	r2, #0
 800c124:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c126:	687b      	ldr	r3, [r7, #4]
 800c128:	681b      	ldr	r3, [r3, #0]
 800c12a:	68fa      	ldr	r2, [r7, #12]
 800c12c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c12e:	687b      	ldr	r3, [r7, #4]
 800c130:	2220      	movs	r2, #32
 800c132:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c136:	687b      	ldr	r3, [r7, #4]
 800c138:	2200      	movs	r2, #0
 800c13a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800c13e:	2300      	movs	r3, #0
}
 800c140:	4618      	mov	r0, r3
 800c142:	3714      	adds	r7, #20
 800c144:	46bd      	mov	sp, r7
 800c146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c14a:	4770      	bx	lr

0800c14c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800c14c:	b580      	push	{r7, lr}
 800c14e:	b084      	sub	sp, #16
 800c150:	af00      	add	r7, sp, #0
 800c152:	6078      	str	r0, [r7, #4]
 800c154:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c156:	687b      	ldr	r3, [r7, #4]
 800c158:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800c15c:	2b01      	cmp	r3, #1
 800c15e:	d101      	bne.n	800c164 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800c160:	2302      	movs	r3, #2
 800c162:	e02d      	b.n	800c1c0 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800c164:	687b      	ldr	r3, [r7, #4]
 800c166:	2201      	movs	r2, #1
 800c168:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800c16c:	687b      	ldr	r3, [r7, #4]
 800c16e:	2224      	movs	r2, #36	; 0x24
 800c170:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c174:	687b      	ldr	r3, [r7, #4]
 800c176:	681b      	ldr	r3, [r3, #0]
 800c178:	681b      	ldr	r3, [r3, #0]
 800c17a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c17c:	687b      	ldr	r3, [r7, #4]
 800c17e:	681b      	ldr	r3, [r3, #0]
 800c180:	681a      	ldr	r2, [r3, #0]
 800c182:	687b      	ldr	r3, [r7, #4]
 800c184:	681b      	ldr	r3, [r3, #0]
 800c186:	f022 0201 	bic.w	r2, r2, #1
 800c18a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800c18c:	687b      	ldr	r3, [r7, #4]
 800c18e:	681b      	ldr	r3, [r3, #0]
 800c190:	689b      	ldr	r3, [r3, #8]
 800c192:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800c196:	687b      	ldr	r3, [r7, #4]
 800c198:	681b      	ldr	r3, [r3, #0]
 800c19a:	683a      	ldr	r2, [r7, #0]
 800c19c:	430a      	orrs	r2, r1
 800c19e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800c1a0:	6878      	ldr	r0, [r7, #4]
 800c1a2:	f000 f84f 	bl	800c244 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c1a6:	687b      	ldr	r3, [r7, #4]
 800c1a8:	681b      	ldr	r3, [r3, #0]
 800c1aa:	68fa      	ldr	r2, [r7, #12]
 800c1ac:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c1ae:	687b      	ldr	r3, [r7, #4]
 800c1b0:	2220      	movs	r2, #32
 800c1b2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c1b6:	687b      	ldr	r3, [r7, #4]
 800c1b8:	2200      	movs	r2, #0
 800c1ba:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800c1be:	2300      	movs	r3, #0
}
 800c1c0:	4618      	mov	r0, r3
 800c1c2:	3710      	adds	r7, #16
 800c1c4:	46bd      	mov	sp, r7
 800c1c6:	bd80      	pop	{r7, pc}

0800c1c8 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800c1c8:	b580      	push	{r7, lr}
 800c1ca:	b084      	sub	sp, #16
 800c1cc:	af00      	add	r7, sp, #0
 800c1ce:	6078      	str	r0, [r7, #4]
 800c1d0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c1d2:	687b      	ldr	r3, [r7, #4]
 800c1d4:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800c1d8:	2b01      	cmp	r3, #1
 800c1da:	d101      	bne.n	800c1e0 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800c1dc:	2302      	movs	r3, #2
 800c1de:	e02d      	b.n	800c23c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800c1e0:	687b      	ldr	r3, [r7, #4]
 800c1e2:	2201      	movs	r2, #1
 800c1e4:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800c1e8:	687b      	ldr	r3, [r7, #4]
 800c1ea:	2224      	movs	r2, #36	; 0x24
 800c1ec:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c1f0:	687b      	ldr	r3, [r7, #4]
 800c1f2:	681b      	ldr	r3, [r3, #0]
 800c1f4:	681b      	ldr	r3, [r3, #0]
 800c1f6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c1f8:	687b      	ldr	r3, [r7, #4]
 800c1fa:	681b      	ldr	r3, [r3, #0]
 800c1fc:	681a      	ldr	r2, [r3, #0]
 800c1fe:	687b      	ldr	r3, [r7, #4]
 800c200:	681b      	ldr	r3, [r3, #0]
 800c202:	f022 0201 	bic.w	r2, r2, #1
 800c206:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800c208:	687b      	ldr	r3, [r7, #4]
 800c20a:	681b      	ldr	r3, [r3, #0]
 800c20c:	689b      	ldr	r3, [r3, #8]
 800c20e:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800c212:	687b      	ldr	r3, [r7, #4]
 800c214:	681b      	ldr	r3, [r3, #0]
 800c216:	683a      	ldr	r2, [r7, #0]
 800c218:	430a      	orrs	r2, r1
 800c21a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800c21c:	6878      	ldr	r0, [r7, #4]
 800c21e:	f000 f811 	bl	800c244 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c222:	687b      	ldr	r3, [r7, #4]
 800c224:	681b      	ldr	r3, [r3, #0]
 800c226:	68fa      	ldr	r2, [r7, #12]
 800c228:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c22a:	687b      	ldr	r3, [r7, #4]
 800c22c:	2220      	movs	r2, #32
 800c22e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c232:	687b      	ldr	r3, [r7, #4]
 800c234:	2200      	movs	r2, #0
 800c236:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800c23a:	2300      	movs	r3, #0
}
 800c23c:	4618      	mov	r0, r3
 800c23e:	3710      	adds	r7, #16
 800c240:	46bd      	mov	sp, r7
 800c242:	bd80      	pop	{r7, pc}

0800c244 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800c244:	b480      	push	{r7}
 800c246:	b089      	sub	sp, #36	; 0x24
 800c248:	af00      	add	r7, sp, #0
 800c24a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 800c24c:	4a2f      	ldr	r2, [pc, #188]	; (800c30c <UARTEx_SetNbDataToProcess+0xc8>)
 800c24e:	f107 0314 	add.w	r3, r7, #20
 800c252:	e892 0003 	ldmia.w	r2, {r0, r1}
 800c256:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 800c25a:	4a2d      	ldr	r2, [pc, #180]	; (800c310 <UARTEx_SetNbDataToProcess+0xcc>)
 800c25c:	f107 030c 	add.w	r3, r7, #12
 800c260:	e892 0003 	ldmia.w	r2, {r0, r1}
 800c264:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800c268:	687b      	ldr	r3, [r7, #4]
 800c26a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c26c:	2b00      	cmp	r3, #0
 800c26e:	d108      	bne.n	800c282 <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 800c270:	687b      	ldr	r3, [r7, #4]
 800c272:	2201      	movs	r2, #1
 800c274:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800c278:	687b      	ldr	r3, [r7, #4]
 800c27a:	2201      	movs	r2, #1
 800c27c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800c280:	e03d      	b.n	800c2fe <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800c282:	2308      	movs	r3, #8
 800c284:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800c286:	2308      	movs	r3, #8
 800c288:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800c28a:	687b      	ldr	r3, [r7, #4]
 800c28c:	681b      	ldr	r3, [r3, #0]
 800c28e:	689b      	ldr	r3, [r3, #8]
 800c290:	0e5b      	lsrs	r3, r3, #25
 800c292:	b2db      	uxtb	r3, r3
 800c294:	f003 0307 	and.w	r3, r3, #7
 800c298:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800c29a:	687b      	ldr	r3, [r7, #4]
 800c29c:	681b      	ldr	r3, [r3, #0]
 800c29e:	689b      	ldr	r3, [r3, #8]
 800c2a0:	0f5b      	lsrs	r3, r3, #29
 800c2a2:	b2db      	uxtb	r3, r3
 800c2a4:	f003 0307 	and.w	r3, r3, #7
 800c2a8:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 800c2aa:	7fbb      	ldrb	r3, [r7, #30]
 800c2ac:	7f3a      	ldrb	r2, [r7, #28]
 800c2ae:	f107 0120 	add.w	r1, r7, #32
 800c2b2:	440a      	add	r2, r1
 800c2b4:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 800c2b8:	fb02 f303 	mul.w	r3, r2, r3
 800c2bc:	7f3a      	ldrb	r2, [r7, #28]
 800c2be:	f107 0120 	add.w	r1, r7, #32
 800c2c2:	440a      	add	r2, r1
 800c2c4:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 800c2c8:	fb93 f3f2 	sdiv	r3, r3, r2
 800c2cc:	b29a      	uxth	r2, r3
 800c2ce:	687b      	ldr	r3, [r7, #4]
 800c2d0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 800c2d4:	7ffb      	ldrb	r3, [r7, #31]
 800c2d6:	7f7a      	ldrb	r2, [r7, #29]
 800c2d8:	f107 0120 	add.w	r1, r7, #32
 800c2dc:	440a      	add	r2, r1
 800c2de:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 800c2e2:	fb02 f303 	mul.w	r3, r2, r3
 800c2e6:	7f7a      	ldrb	r2, [r7, #29]
 800c2e8:	f107 0120 	add.w	r1, r7, #32
 800c2ec:	440a      	add	r2, r1
 800c2ee:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 800c2f2:	fb93 f3f2 	sdiv	r3, r3, r2
 800c2f6:	b29a      	uxth	r2, r3
 800c2f8:	687b      	ldr	r3, [r7, #4]
 800c2fa:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800c2fe:	bf00      	nop
 800c300:	3724      	adds	r7, #36	; 0x24
 800c302:	46bd      	mov	sp, r7
 800c304:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c308:	4770      	bx	lr
 800c30a:	bf00      	nop
 800c30c:	080163e4 	.word	0x080163e4
 800c310:	080163ec 	.word	0x080163ec

0800c314 <BLS_Init>:
/* Private functions ----------------------------------------------------------*/
/* Weak functions ----------------------------------------------------------*/
void BVOPUS_STM_Init(void);

__weak void BLS_Init( void )
{
 800c314:	b480      	push	{r7}
 800c316:	af00      	add	r7, sp, #0
  return;
 800c318:	bf00      	nop
}
 800c31a:	46bd      	mov	sp, r7
 800c31c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c320:	4770      	bx	lr

0800c322 <CRS_STM_Init>:
__weak void CRS_STM_Init( void )
{
 800c322:	b480      	push	{r7}
 800c324:	af00      	add	r7, sp, #0
  return;
 800c326:	bf00      	nop
}
 800c328:	46bd      	mov	sp, r7
 800c32a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c32e:	4770      	bx	lr

0800c330 <EDS_STM_Init>:
__weak void DIS_Init( void )
{
  return;
}
__weak void EDS_STM_Init( void )
{
 800c330:	b480      	push	{r7}
 800c332:	af00      	add	r7, sp, #0
  return;
 800c334:	bf00      	nop
}
 800c336:	46bd      	mov	sp, r7
 800c338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c33c:	4770      	bx	lr

0800c33e <HIDS_Init>:
__weak void HIDS_Init( void )
{
 800c33e:	b480      	push	{r7}
 800c340:	af00      	add	r7, sp, #0
  return;
 800c342:	bf00      	nop
}
 800c344:	46bd      	mov	sp, r7
 800c346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c34a:	4770      	bx	lr

0800c34c <HTS_Init>:
__weak void HRS_Init( void )
{
  return;
}
__weak void HTS_Init( void )
{
 800c34c:	b480      	push	{r7}
 800c34e:	af00      	add	r7, sp, #0
  return;
 800c350:	bf00      	nop
}
 800c352:	46bd      	mov	sp, r7
 800c354:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c358:	4770      	bx	lr

0800c35a <IAS_Init>:
__weak void IAS_Init( void )
{
 800c35a:	b480      	push	{r7}
 800c35c:	af00      	add	r7, sp, #0
  return;
 800c35e:	bf00      	nop
}
 800c360:	46bd      	mov	sp, r7
 800c362:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c366:	4770      	bx	lr

0800c368 <LLS_Init>:
__weak void LLS_Init( void )
{
 800c368:	b480      	push	{r7}
 800c36a:	af00      	add	r7, sp, #0
  return;
 800c36c:	bf00      	nop
}
 800c36e:	46bd      	mov	sp, r7
 800c370:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c374:	4770      	bx	lr

0800c376 <TPS_Init>:
__weak void TPS_Init( void )
{
 800c376:	b480      	push	{r7}
 800c378:	af00      	add	r7, sp, #0
  return;
 800c37a:	bf00      	nop
}
 800c37c:	46bd      	mov	sp, r7
 800c37e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c382:	4770      	bx	lr

0800c384 <MOTENV_STM_Init>:
__weak void MOTENV_STM_Init( void )
{
 800c384:	b480      	push	{r7}
 800c386:	af00      	add	r7, sp, #0
  return;
 800c388:	bf00      	nop
}
 800c38a:	46bd      	mov	sp, r7
 800c38c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c390:	4770      	bx	lr

0800c392 <OTAS_STM_Init>:
__weak void P2PS_STM_Init( void )
{
  return;
}
__weak void OTAS_STM_Init( void )
{
 800c392:	b480      	push	{r7}
 800c394:	af00      	add	r7, sp, #0
  return;
 800c396:	bf00      	nop
}
 800c398:	46bd      	mov	sp, r7
 800c39a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c39e:	4770      	bx	lr

0800c3a0 <MESH_Init>:
__weak void MESH_Init( void )
{
 800c3a0:	b480      	push	{r7}
 800c3a2:	af00      	add	r7, sp, #0
  return;
 800c3a4:	bf00      	nop
}
 800c3a6:	46bd      	mov	sp, r7
 800c3a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3ac:	4770      	bx	lr

0800c3ae <BVOPUS_STM_Init>:
__weak void BVOPUS_STM_Init( void )
{
 800c3ae:	b480      	push	{r7}
 800c3b0:	af00      	add	r7, sp, #0
  return;
 800c3b2:	bf00      	nop
}
 800c3b4:	46bd      	mov	sp, r7
 800c3b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3ba:	4770      	bx	lr

0800c3bc <SVCCTL_InitCustomSvc>:
__weak void SVCCTL_InitCustomSvc( void )
{
 800c3bc:	b480      	push	{r7}
 800c3be:	af00      	add	r7, sp, #0
  return;
 800c3c0:	bf00      	nop
}
 800c3c2:	46bd      	mov	sp, r7
 800c3c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3c8:	4770      	bx	lr
	...

0800c3cc <SVCCTL_Init>:

/* Functions Definition ------------------------------------------------------*/

void SVCCTL_Init( void )
{
 800c3cc:	b580      	push	{r7, lr}
 800c3ce:	af00      	add	r7, sp, #0
 
  /**
   * Initialize the number of registered Handler
   */
  SVCCTL_EvtHandler.NbreOfRegisteredHandler = 0;
 800c3d0:	4b04      	ldr	r3, [pc, #16]	; (800c3e4 <SVCCTL_Init+0x18>)
 800c3d2:	2200      	movs	r2, #0
 800c3d4:	771a      	strb	r2, [r3, #28]
  SVCCTL_CltHandler.NbreOfRegisteredHandler = 0;
 800c3d6:	4b04      	ldr	r3, [pc, #16]	; (800c3e8 <SVCCTL_Init+0x1c>)
 800c3d8:	2200      	movs	r2, #0
 800c3da:	701a      	strb	r2, [r3, #0]

  /**
   * Add and Initialize requested services
   */
  SVCCTL_SvcInit();
 800c3dc:	f000 f806 	bl	800c3ec <SVCCTL_SvcInit>

  return;
 800c3e0:	bf00      	nop
}
 800c3e2:	bd80      	pop	{r7, pc}
 800c3e4:	20000334 	.word	0x20000334
 800c3e8:	20000354 	.word	0x20000354

0800c3ec <SVCCTL_SvcInit>:

__weak void SVCCTL_SvcInit(void)
{
 800c3ec:	b580      	push	{r7, lr}
 800c3ee:	af00      	add	r7, sp, #0
  BLS_Init();
 800c3f0:	f7ff ff90 	bl	800c314 <BLS_Init>

  CRS_STM_Init();
 800c3f4:	f7ff ff95 	bl	800c322 <CRS_STM_Init>

  //DIS_Init();

  EDS_STM_Init();
 800c3f8:	f7ff ff9a 	bl	800c330 <EDS_STM_Init>

  HIDS_Init();
 800c3fc:	f7ff ff9f 	bl	800c33e <HIDS_Init>

  //HRS_Init();

  HTS_Init();
 800c400:	f7ff ffa4 	bl	800c34c <HTS_Init>

  IAS_Init();
 800c404:	f7ff ffa9 	bl	800c35a <IAS_Init>

  LLS_Init();
 800c408:	f7ff ffae 	bl	800c368 <LLS_Init>

  TPS_Init();
 800c40c:	f7ff ffb3 	bl	800c376 <TPS_Init>

  MOTENV_STM_Init();
 800c410:	f7ff ffb8 	bl	800c384 <MOTENV_STM_Init>

  P2PS_STM_Init();
 800c414:	f001 fdd4 	bl	800dfc0 <P2PS_STM_Init>

  OTAS_STM_Init();
 800c418:	f7ff ffbb 	bl	800c392 <OTAS_STM_Init>
  
  BVOPUS_STM_Init();
 800c41c:	f7ff ffc7 	bl	800c3ae <BVOPUS_STM_Init>

  MESH_Init();
 800c420:	f7ff ffbe 	bl	800c3a0 <MESH_Init>

  SVCCTL_InitCustomSvc();
 800c424:	f7ff ffca 	bl	800c3bc <SVCCTL_InitCustomSvc>
  
  return;
 800c428:	bf00      	nop
}
 800c42a:	bd80      	pop	{r7, pc}

0800c42c <SVCCTL_RegisterSvcHandler>:
 * @brief  BLE Controller initialization
 * @param  None
 * @retval None
 */
void SVCCTL_RegisterSvcHandler( SVC_CTL_p_EvtHandler_t pfBLE_SVC_Service_Event_Handler )
{
 800c42c:	b480      	push	{r7}
 800c42e:	b083      	sub	sp, #12
 800c430:	af00      	add	r7, sp, #0
 800c432:	6078      	str	r0, [r7, #4]
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
  SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[SVCCTL_EvtHandler.NbreOfRegisteredHandler] = pfBLE_SVC_Service_Event_Handler;
 800c434:	4b09      	ldr	r3, [pc, #36]	; (800c45c <SVCCTL_RegisterSvcHandler+0x30>)
 800c436:	7f1b      	ldrb	r3, [r3, #28]
 800c438:	4619      	mov	r1, r3
 800c43a:	4a08      	ldr	r2, [pc, #32]	; (800c45c <SVCCTL_RegisterSvcHandler+0x30>)
 800c43c:	687b      	ldr	r3, [r7, #4]
 800c43e:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  SVCCTL_EvtHandler.NbreOfRegisteredHandler++;
 800c442:	4b06      	ldr	r3, [pc, #24]	; (800c45c <SVCCTL_RegisterSvcHandler+0x30>)
 800c444:	7f1b      	ldrb	r3, [r3, #28]
 800c446:	3301      	adds	r3, #1
 800c448:	b2da      	uxtb	r2, r3
 800c44a:	4b04      	ldr	r3, [pc, #16]	; (800c45c <SVCCTL_RegisterSvcHandler+0x30>)
 800c44c:	771a      	strb	r2, [r3, #28]
#else
  (void)(pfBLE_SVC_Service_Event_Handler);
#endif

  return;
 800c44e:	bf00      	nop
}
 800c450:	370c      	adds	r7, #12
 800c452:	46bd      	mov	sp, r7
 800c454:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c458:	4770      	bx	lr
 800c45a:	bf00      	nop
 800c45c:	20000334 	.word	0x20000334

0800c460 <SVCCTL_UserEvtRx>:

  return;
}

SVCCTL_UserEvtFlowStatus_t SVCCTL_UserEvtRx( void *pckt )
{
 800c460:	b580      	push	{r7, lr}
 800c462:	b086      	sub	sp, #24
 800c464:	af00      	add	r7, sp, #0
 800c466:	6078      	str	r0, [r7, #4]
  evt_blue_aci *blue_evt;
  SVCCTL_EvtAckStatus_t event_notification_status;
  SVCCTL_UserEvtFlowStatus_t return_status;
  uint8_t index;

  event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) pckt)->data;
 800c468:	687b      	ldr	r3, [r7, #4]
 800c46a:	3301      	adds	r3, #1
 800c46c:	613b      	str	r3, [r7, #16]
  event_notification_status = SVCCTL_EvtNotAck;
 800c46e:	2300      	movs	r3, #0
 800c470:	75fb      	strb	r3, [r7, #23]

  switch (event_pckt->evt)
 800c472:	693b      	ldr	r3, [r7, #16]
 800c474:	781b      	ldrb	r3, [r3, #0]
 800c476:	2bff      	cmp	r3, #255	; 0xff
 800c478:	d000      	beq.n	800c47c <SVCCTL_UserEvtRx+0x1c>
      }
    }
      break; /* HCI_EVT_VENDOR_SPECIFIC */

    default:
      break;
 800c47a:	e025      	b.n	800c4c8 <SVCCTL_UserEvtRx+0x68>
      blue_evt = (evt_blue_aci*) event_pckt->data;
 800c47c:	693b      	ldr	r3, [r7, #16]
 800c47e:	3302      	adds	r3, #2
 800c480:	60fb      	str	r3, [r7, #12]
      switch ((blue_evt->ecode) & SVCCTL_EGID_EVT_MASK)
 800c482:	68fb      	ldr	r3, [r7, #12]
 800c484:	881b      	ldrh	r3, [r3, #0]
 800c486:	b29b      	uxth	r3, r3
 800c488:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800c48c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800c490:	d000      	beq.n	800c494 <SVCCTL_UserEvtRx+0x34>
          break;
 800c492:	e018      	b.n	800c4c6 <SVCCTL_UserEvtRx+0x66>
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 800c494:	2300      	movs	r3, #0
 800c496:	757b      	strb	r3, [r7, #21]
 800c498:	e00d      	b.n	800c4b6 <SVCCTL_UserEvtRx+0x56>
            event_notification_status = SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[index](pckt);
 800c49a:	7d7b      	ldrb	r3, [r7, #21]
 800c49c:	4a18      	ldr	r2, [pc, #96]	; (800c500 <SVCCTL_UserEvtRx+0xa0>)
 800c49e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c4a2:	6878      	ldr	r0, [r7, #4]
 800c4a4:	4798      	blx	r3
 800c4a6:	4603      	mov	r3, r0
 800c4a8:	75fb      	strb	r3, [r7, #23]
            if (event_notification_status != SVCCTL_EvtNotAck)
 800c4aa:	7dfb      	ldrb	r3, [r7, #23]
 800c4ac:	2b00      	cmp	r3, #0
 800c4ae:	d108      	bne.n	800c4c2 <SVCCTL_UserEvtRx+0x62>
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 800c4b0:	7d7b      	ldrb	r3, [r7, #21]
 800c4b2:	3301      	adds	r3, #1
 800c4b4:	757b      	strb	r3, [r7, #21]
 800c4b6:	4b12      	ldr	r3, [pc, #72]	; (800c500 <SVCCTL_UserEvtRx+0xa0>)
 800c4b8:	7f1b      	ldrb	r3, [r3, #28]
 800c4ba:	7d7a      	ldrb	r2, [r7, #21]
 800c4bc:	429a      	cmp	r2, r3
 800c4be:	d3ec      	bcc.n	800c49a <SVCCTL_UserEvtRx+0x3a>
          break;
 800c4c0:	e000      	b.n	800c4c4 <SVCCTL_UserEvtRx+0x64>
              break;
 800c4c2:	bf00      	nop
          break;
 800c4c4:	bf00      	nop
      break; /* HCI_EVT_VENDOR_SPECIFIC */
 800c4c6:	bf00      	nop

  /**
   * When no registered handlers (either Service or Client) has acknowledged the GATT event, it is reported to the application
   * a GAP event is always reported to the applicaiton.
   */
  switch (event_notification_status)
 800c4c8:	7dfb      	ldrb	r3, [r7, #23]
 800c4ca:	2b01      	cmp	r3, #1
 800c4cc:	d009      	beq.n	800c4e2 <SVCCTL_UserEvtRx+0x82>
 800c4ce:	2b02      	cmp	r3, #2
 800c4d0:	d00a      	beq.n	800c4e8 <SVCCTL_UserEvtRx+0x88>
 800c4d2:	2b00      	cmp	r3, #0
 800c4d4:	d10b      	bne.n	800c4ee <SVCCTL_UserEvtRx+0x8e>
    case SVCCTL_EvtNotAck:
      /**
       *  The event has NOT been managed.
       *  It shall be passed to the application for processing
       */
      return_status = SVCCTL_App_Notification(pckt);
 800c4d6:	6878      	ldr	r0, [r7, #4]
 800c4d8:	f7f4 fd58 	bl	8000f8c <SVCCTL_App_Notification>
 800c4dc:	4603      	mov	r3, r0
 800c4de:	75bb      	strb	r3, [r7, #22]
      break;
 800c4e0:	e008      	b.n	800c4f4 <SVCCTL_UserEvtRx+0x94>

    case SVCCTL_EvtAckFlowEnable:
      return_status = SVCCTL_UserEvtFlowEnable;
 800c4e2:	2301      	movs	r3, #1
 800c4e4:	75bb      	strb	r3, [r7, #22]
      break;
 800c4e6:	e005      	b.n	800c4f4 <SVCCTL_UserEvtRx+0x94>

    case SVCCTL_EvtAckFlowDisable:
      return_status = SVCCTL_UserEvtFlowDisable;
 800c4e8:	2300      	movs	r3, #0
 800c4ea:	75bb      	strb	r3, [r7, #22]
      break;
 800c4ec:	e002      	b.n	800c4f4 <SVCCTL_UserEvtRx+0x94>

    default:
      return_status = SVCCTL_UserEvtFlowEnable;
 800c4ee:	2301      	movs	r3, #1
 800c4f0:	75bb      	strb	r3, [r7, #22]
      break;
 800c4f2:	bf00      	nop
  }

  return (return_status);
 800c4f4:	7dbb      	ldrb	r3, [r7, #22]
}
 800c4f6:	4618      	mov	r0, r3
 800c4f8:	3718      	adds	r7, #24
 800c4fa:	46bd      	mov	sp, r7
 800c4fc:	bd80      	pop	{r7, pc}
 800c4fe:	bf00      	nop
 800c500:	20000334 	.word	0x20000334

0800c504 <aci_gap_set_non_discoverable>:
 */

#include "ble_gap_aci.h"

tBleStatus aci_gap_set_non_discoverable( void )
{
 800c504:	b580      	push	{r7, lr}
 800c506:	b088      	sub	sp, #32
 800c508:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 800c50a:	2300      	movs	r3, #0
 800c50c:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800c50e:	f107 0308 	add.w	r3, r7, #8
 800c512:	2218      	movs	r2, #24
 800c514:	2100      	movs	r1, #0
 800c516:	4618      	mov	r0, r3
 800c518:	f000 ff9c 	bl	800d454 <Osal_MemSet>
  rq.ogf = 0x3f;
 800c51c:	233f      	movs	r3, #63	; 0x3f
 800c51e:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x081;
 800c520:	2381      	movs	r3, #129	; 0x81
 800c522:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 800c524:	1dfb      	adds	r3, r7, #7
 800c526:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 800c528:	2301      	movs	r3, #1
 800c52a:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 800c52c:	f107 0308 	add.w	r3, r7, #8
 800c530:	2100      	movs	r1, #0
 800c532:	4618      	mov	r0, r3
 800c534:	f001 f836 	bl	800d5a4 <hci_send_req>
 800c538:	4603      	mov	r3, r0
 800c53a:	2b00      	cmp	r3, #0
 800c53c:	da01      	bge.n	800c542 <aci_gap_set_non_discoverable+0x3e>
    return BLE_STATUS_TIMEOUT;
 800c53e:	23ff      	movs	r3, #255	; 0xff
 800c540:	e000      	b.n	800c544 <aci_gap_set_non_discoverable+0x40>
  return status;
 800c542:	79fb      	ldrb	r3, [r7, #7]
}
 800c544:	4618      	mov	r0, r3
 800c546:	3720      	adds	r7, #32
 800c548:	46bd      	mov	sp, r7
 800c54a:	bd80      	pop	{r7, pc}

0800c54c <aci_gap_set_discoverable>:
                                     const uint8_t* Local_Name,
                                     uint8_t Service_Uuid_length,
                                     const uint8_t* Service_Uuid_List,
                                     uint16_t Slave_Conn_Interval_Min,
                                     uint16_t Slave_Conn_Interval_Max )
{
 800c54c:	b5b0      	push	{r4, r5, r7, lr}
 800c54e:	b0ce      	sub	sp, #312	; 0x138
 800c550:	af00      	add	r7, sp, #0
 800c552:	4605      	mov	r5, r0
 800c554:	460c      	mov	r4, r1
 800c556:	4610      	mov	r0, r2
 800c558:	4619      	mov	r1, r3
 800c55a:	1dfb      	adds	r3, r7, #7
 800c55c:	462a      	mov	r2, r5
 800c55e:	701a      	strb	r2, [r3, #0]
 800c560:	1d3b      	adds	r3, r7, #4
 800c562:	4622      	mov	r2, r4
 800c564:	801a      	strh	r2, [r3, #0]
 800c566:	1cbb      	adds	r3, r7, #2
 800c568:	4602      	mov	r2, r0
 800c56a:	801a      	strh	r2, [r3, #0]
 800c56c:	1dbb      	adds	r3, r7, #6
 800c56e:	460a      	mov	r2, r1
 800c570:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_discoverable_cp0 *cp0 = (aci_gap_set_discoverable_cp0*)(cmd_buffer);
 800c572:	f107 0310 	add.w	r3, r7, #16
 800c576:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  aci_gap_set_discoverable_cp1 *cp1 = (aci_gap_set_discoverable_cp1*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)));
 800c57a:	f897 314c 	ldrb.w	r3, [r7, #332]	; 0x14c
 800c57e:	3308      	adds	r3, #8
 800c580:	f107 0210 	add.w	r2, r7, #16
 800c584:	4413      	add	r3, r2
 800c586:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  aci_gap_set_discoverable_cp2 *cp2 = (aci_gap_set_discoverable_cp2*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)) + 1 + Service_Uuid_length * (sizeof(uint8_t)));
 800c58a:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 800c58e:	f897 3154 	ldrb.w	r3, [r7, #340]	; 0x154
 800c592:	4413      	add	r3, r2
 800c594:	3309      	adds	r3, #9
 800c596:	f107 0210 	add.w	r2, r7, #16
 800c59a:	4413      	add	r3, r2
 800c59c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800c5a0:	f107 030f 	add.w	r3, r7, #15
 800c5a4:	2200      	movs	r2, #0
 800c5a6:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800c5a8:	2300      	movs	r3, #0
 800c5aa:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Type = Advertising_Type;
 800c5ae:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800c5b2:	1dfa      	adds	r2, r7, #7
 800c5b4:	7812      	ldrb	r2, [r2, #0]
 800c5b6:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800c5b8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800c5bc:	3301      	adds	r3, #1
 800c5be:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Interval_Min = Advertising_Interval_Min;
 800c5c2:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800c5c6:	1d3a      	adds	r2, r7, #4
 800c5c8:	8812      	ldrh	r2, [r2, #0]
 800c5ca:	f8a3 2001 	strh.w	r2, [r3, #1]
  index_input += 2;
 800c5ce:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800c5d2:	3302      	adds	r3, #2
 800c5d4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Interval_Max = Advertising_Interval_Max;
 800c5d8:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800c5dc:	1cba      	adds	r2, r7, #2
 800c5de:	8812      	ldrh	r2, [r2, #0]
 800c5e0:	f8a3 2003 	strh.w	r2, [r3, #3]
  index_input += 2;
 800c5e4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800c5e8:	3302      	adds	r3, #2
 800c5ea:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Own_Address_Type = Own_Address_Type;
 800c5ee:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800c5f2:	1dba      	adds	r2, r7, #6
 800c5f4:	7812      	ldrb	r2, [r2, #0]
 800c5f6:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 800c5f8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800c5fc:	3301      	adds	r3, #1
 800c5fe:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Filter_Policy = Advertising_Filter_Policy;
 800c602:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800c606:	f897 2148 	ldrb.w	r2, [r7, #328]	; 0x148
 800c60a:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 800c60c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800c610:	3301      	adds	r3, #1
 800c612:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Local_Name_Length = Local_Name_Length;
 800c616:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800c61a:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 800c61e:	71da      	strb	r2, [r3, #7]
  index_input += 1;
 800c620:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800c624:	3301      	adds	r3, #1
 800c626:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  /* var_len_data input */
  {
    Osal_MemCpy( (void*)&cp0->Local_Name, (const void*)Local_Name, Local_Name_Length );
 800c62a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800c62e:	3308      	adds	r3, #8
 800c630:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 800c634:	f8d7 1150 	ldr.w	r1, [r7, #336]	; 0x150
 800c638:	4618      	mov	r0, r3
 800c63a:	f000 fefb 	bl	800d434 <Osal_MemCpy>
    index_input += Local_Name_Length;
 800c63e:	f897 314c 	ldrb.w	r3, [r7, #332]	; 0x14c
 800c642:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800c646:	4413      	add	r3, r2
 800c648:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp1->Service_Uuid_length = Service_Uuid_length;
 800c64c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800c650:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 800c654:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 800c656:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800c65a:	3301      	adds	r3, #1
 800c65c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    Osal_MemCpy( (void*)&cp1->Service_Uuid_List, (const void*)Service_Uuid_List, Service_Uuid_length );
 800c660:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800c664:	3301      	adds	r3, #1
 800c666:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 800c66a:	f8d7 1158 	ldr.w	r1, [r7, #344]	; 0x158
 800c66e:	4618      	mov	r0, r3
 800c670:	f000 fee0 	bl	800d434 <Osal_MemCpy>
    index_input += Service_Uuid_length;
 800c674:	f897 3154 	ldrb.w	r3, [r7, #340]	; 0x154
 800c678:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800c67c:	4413      	add	r3, r2
 800c67e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp2->Slave_Conn_Interval_Min = Slave_Conn_Interval_Min;
 800c682:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800c686:	f8b7 215c 	ldrh.w	r2, [r7, #348]	; 0x15c
 800c68a:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 800c68c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800c690:	3302      	adds	r3, #2
 800c692:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp2->Slave_Conn_Interval_Max = Slave_Conn_Interval_Max;
 800c696:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800c69a:	f8b7 2160 	ldrh.w	r2, [r7, #352]	; 0x160
 800c69e:	805a      	strh	r2, [r3, #2]
    }
    index_input += 2;
 800c6a0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800c6a4:	3302      	adds	r3, #2
 800c6a6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800c6aa:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800c6ae:	2218      	movs	r2, #24
 800c6b0:	2100      	movs	r1, #0
 800c6b2:	4618      	mov	r0, r3
 800c6b4:	f000 fece 	bl	800d454 <Osal_MemSet>
  rq.ogf = 0x3f;
 800c6b8:	233f      	movs	r3, #63	; 0x3f
 800c6ba:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x083;
 800c6be:	2383      	movs	r3, #131	; 0x83
 800c6c0:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800c6c4:	f107 0310 	add.w	r3, r7, #16
 800c6c8:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800c6cc:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800c6d0:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800c6d4:	f107 030f 	add.w	r3, r7, #15
 800c6d8:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800c6dc:	2301      	movs	r3, #1
 800c6de:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800c6e2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800c6e6:	2100      	movs	r1, #0
 800c6e8:	4618      	mov	r0, r3
 800c6ea:	f000 ff5b 	bl	800d5a4 <hci_send_req>
 800c6ee:	4603      	mov	r3, r0
 800c6f0:	2b00      	cmp	r3, #0
 800c6f2:	da01      	bge.n	800c6f8 <aci_gap_set_discoverable+0x1ac>
    return BLE_STATUS_TIMEOUT;
 800c6f4:	23ff      	movs	r3, #255	; 0xff
 800c6f6:	e002      	b.n	800c6fe <aci_gap_set_discoverable+0x1b2>
  return status;
 800c6f8:	f107 030f 	add.w	r3, r7, #15
 800c6fc:	781b      	ldrb	r3, [r3, #0]
}
 800c6fe:	4618      	mov	r0, r3
 800c700:	f507 779c 	add.w	r7, r7, #312	; 0x138
 800c704:	46bd      	mov	sp, r7
 800c706:	bdb0      	pop	{r4, r5, r7, pc}

0800c708 <aci_gap_set_io_capability>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_set_io_capability( uint8_t IO_Capability )
{
 800c708:	b580      	push	{r7, lr}
 800c70a:	b0cc      	sub	sp, #304	; 0x130
 800c70c:	af00      	add	r7, sp, #0
 800c70e:	4602      	mov	r2, r0
 800c710:	1dfb      	adds	r3, r7, #7
 800c712:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_io_capability_cp0 *cp0 = (aci_gap_set_io_capability_cp0*)(cmd_buffer);
 800c714:	f107 0310 	add.w	r3, r7, #16
 800c718:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800c71c:	f107 030f 	add.w	r3, r7, #15
 800c720:	2200      	movs	r2, #0
 800c722:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800c724:	2300      	movs	r3, #0
 800c726:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->IO_Capability = IO_Capability;
 800c72a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800c72e:	1dfa      	adds	r2, r7, #7
 800c730:	7812      	ldrb	r2, [r2, #0]
 800c732:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800c734:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800c738:	3301      	adds	r3, #1
 800c73a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800c73e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800c742:	2218      	movs	r2, #24
 800c744:	2100      	movs	r1, #0
 800c746:	4618      	mov	r0, r3
 800c748:	f000 fe84 	bl	800d454 <Osal_MemSet>
  rq.ogf = 0x3f;
 800c74c:	233f      	movs	r3, #63	; 0x3f
 800c74e:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x085;
 800c752:	2385      	movs	r3, #133	; 0x85
 800c754:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800c758:	f107 0310 	add.w	r3, r7, #16
 800c75c:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800c760:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800c764:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800c768:	f107 030f 	add.w	r3, r7, #15
 800c76c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800c770:	2301      	movs	r3, #1
 800c772:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800c776:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800c77a:	2100      	movs	r1, #0
 800c77c:	4618      	mov	r0, r3
 800c77e:	f000 ff11 	bl	800d5a4 <hci_send_req>
 800c782:	4603      	mov	r3, r0
 800c784:	2b00      	cmp	r3, #0
 800c786:	da01      	bge.n	800c78c <aci_gap_set_io_capability+0x84>
    return BLE_STATUS_TIMEOUT;
 800c788:	23ff      	movs	r3, #255	; 0xff
 800c78a:	e002      	b.n	800c792 <aci_gap_set_io_capability+0x8a>
  return status;
 800c78c:	f107 030f 	add.w	r3, r7, #15
 800c790:	781b      	ldrb	r3, [r3, #0]
}
 800c792:	4618      	mov	r0, r3
 800c794:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800c798:	46bd      	mov	sp, r7
 800c79a:	bd80      	pop	{r7, pc}

0800c79c <aci_gap_set_authentication_requirement>:
                                                   uint8_t Min_Encryption_Key_Size,
                                                   uint8_t Max_Encryption_Key_Size,
                                                   uint8_t Use_Fixed_Pin,
                                                   uint32_t Fixed_Pin,
                                                   uint8_t Identity_Address_Type )
{
 800c79c:	b5b0      	push	{r4, r5, r7, lr}
 800c79e:	b0cc      	sub	sp, #304	; 0x130
 800c7a0:	af00      	add	r7, sp, #0
 800c7a2:	4605      	mov	r5, r0
 800c7a4:	460c      	mov	r4, r1
 800c7a6:	4610      	mov	r0, r2
 800c7a8:	4619      	mov	r1, r3
 800c7aa:	1dfb      	adds	r3, r7, #7
 800c7ac:	462a      	mov	r2, r5
 800c7ae:	701a      	strb	r2, [r3, #0]
 800c7b0:	1dbb      	adds	r3, r7, #6
 800c7b2:	4622      	mov	r2, r4
 800c7b4:	701a      	strb	r2, [r3, #0]
 800c7b6:	1d7b      	adds	r3, r7, #5
 800c7b8:	4602      	mov	r2, r0
 800c7ba:	701a      	strb	r2, [r3, #0]
 800c7bc:	1d3b      	adds	r3, r7, #4
 800c7be:	460a      	mov	r2, r1
 800c7c0:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_authentication_requirement_cp0 *cp0 = (aci_gap_set_authentication_requirement_cp0*)(cmd_buffer);
 800c7c2:	f107 0310 	add.w	r3, r7, #16
 800c7c6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800c7ca:	f107 030f 	add.w	r3, r7, #15
 800c7ce:	2200      	movs	r2, #0
 800c7d0:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800c7d2:	2300      	movs	r3, #0
 800c7d4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Bonding_Mode = Bonding_Mode;
 800c7d8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800c7dc:	1dfa      	adds	r2, r7, #7
 800c7de:	7812      	ldrb	r2, [r2, #0]
 800c7e0:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800c7e2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800c7e6:	3301      	adds	r3, #1
 800c7e8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->MITM_Mode = MITM_Mode;
 800c7ec:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800c7f0:	1dba      	adds	r2, r7, #6
 800c7f2:	7812      	ldrb	r2, [r2, #0]
 800c7f4:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800c7f6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800c7fa:	3301      	adds	r3, #1
 800c7fc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->SC_Support = SC_Support;
 800c800:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800c804:	1d7a      	adds	r2, r7, #5
 800c806:	7812      	ldrb	r2, [r2, #0]
 800c808:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800c80a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800c80e:	3301      	adds	r3, #1
 800c810:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->KeyPress_Notification_Support = KeyPress_Notification_Support;
 800c814:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800c818:	1d3a      	adds	r2, r7, #4
 800c81a:	7812      	ldrb	r2, [r2, #0]
 800c81c:	70da      	strb	r2, [r3, #3]
  index_input += 1;
 800c81e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800c822:	3301      	adds	r3, #1
 800c824:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Min_Encryption_Key_Size = Min_Encryption_Key_Size;
 800c828:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800c82c:	f897 2140 	ldrb.w	r2, [r7, #320]	; 0x140
 800c830:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 800c832:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800c836:	3301      	adds	r3, #1
 800c838:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Max_Encryption_Key_Size = Max_Encryption_Key_Size;
 800c83c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800c840:	f897 2144 	ldrb.w	r2, [r7, #324]	; 0x144
 800c844:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 800c846:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800c84a:	3301      	adds	r3, #1
 800c84c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Use_Fixed_Pin = Use_Fixed_Pin;
 800c850:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800c854:	f897 2148 	ldrb.w	r2, [r7, #328]	; 0x148
 800c858:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 800c85a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800c85e:	3301      	adds	r3, #1
 800c860:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Fixed_Pin = Fixed_Pin;
 800c864:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800c868:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 800c86c:	f8c3 2007 	str.w	r2, [r3, #7]
  index_input += 4;
 800c870:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800c874:	3304      	adds	r3, #4
 800c876:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Identity_Address_Type = Identity_Address_Type;
 800c87a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800c87e:	f897 2150 	ldrb.w	r2, [r7, #336]	; 0x150
 800c882:	72da      	strb	r2, [r3, #11]
  index_input += 1;
 800c884:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800c888:	3301      	adds	r3, #1
 800c88a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800c88e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800c892:	2218      	movs	r2, #24
 800c894:	2100      	movs	r1, #0
 800c896:	4618      	mov	r0, r3
 800c898:	f000 fddc 	bl	800d454 <Osal_MemSet>
  rq.ogf = 0x3f;
 800c89c:	233f      	movs	r3, #63	; 0x3f
 800c89e:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x086;
 800c8a2:	2386      	movs	r3, #134	; 0x86
 800c8a4:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800c8a8:	f107 0310 	add.w	r3, r7, #16
 800c8ac:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800c8b0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800c8b4:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800c8b8:	f107 030f 	add.w	r3, r7, #15
 800c8bc:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800c8c0:	2301      	movs	r3, #1
 800c8c2:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800c8c6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800c8ca:	2100      	movs	r1, #0
 800c8cc:	4618      	mov	r0, r3
 800c8ce:	f000 fe69 	bl	800d5a4 <hci_send_req>
 800c8d2:	4603      	mov	r3, r0
 800c8d4:	2b00      	cmp	r3, #0
 800c8d6:	da01      	bge.n	800c8dc <aci_gap_set_authentication_requirement+0x140>
    return BLE_STATUS_TIMEOUT;
 800c8d8:	23ff      	movs	r3, #255	; 0xff
 800c8da:	e002      	b.n	800c8e2 <aci_gap_set_authentication_requirement+0x146>
  return status;
 800c8dc:	f107 030f 	add.w	r3, r7, #15
 800c8e0:	781b      	ldrb	r3, [r3, #0]
}
 800c8e2:	4618      	mov	r0, r3
 800c8e4:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800c8e8:	46bd      	mov	sp, r7
 800c8ea:	bdb0      	pop	{r4, r5, r7, pc}

0800c8ec <aci_gap_init>:
                         uint8_t privacy_enabled,
                         uint8_t device_name_char_len,
                         uint16_t* Service_Handle,
                         uint16_t* Dev_Name_Char_Handle,
                         uint16_t* Appearance_Char_Handle )
{
 800c8ec:	b590      	push	{r4, r7, lr}
 800c8ee:	b0cd      	sub	sp, #308	; 0x134
 800c8f0:	af00      	add	r7, sp, #0
 800c8f2:	4604      	mov	r4, r0
 800c8f4:	4608      	mov	r0, r1
 800c8f6:	4611      	mov	r1, r2
 800c8f8:	463a      	mov	r2, r7
 800c8fa:	6013      	str	r3, [r2, #0]
 800c8fc:	1dfb      	adds	r3, r7, #7
 800c8fe:	4622      	mov	r2, r4
 800c900:	701a      	strb	r2, [r3, #0]
 800c902:	1dbb      	adds	r3, r7, #6
 800c904:	4602      	mov	r2, r0
 800c906:	701a      	strb	r2, [r3, #0]
 800c908:	1d7b      	adds	r3, r7, #5
 800c90a:	460a      	mov	r2, r1
 800c90c:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_init_cp0 *cp0 = (aci_gap_init_cp0*)(cmd_buffer);
 800c90e:	f107 0310 	add.w	r3, r7, #16
 800c912:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  aci_gap_init_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 800c916:	f107 0308 	add.w	r3, r7, #8
 800c91a:	2207      	movs	r2, #7
 800c91c:	2100      	movs	r1, #0
 800c91e:	4618      	mov	r0, r3
 800c920:	f000 fd98 	bl	800d454 <Osal_MemSet>
  int index_input = 0;
 800c924:	2300      	movs	r3, #0
 800c926:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Role = Role;
 800c92a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800c92e:	1dfa      	adds	r2, r7, #7
 800c930:	7812      	ldrb	r2, [r2, #0]
 800c932:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800c934:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800c938:	3301      	adds	r3, #1
 800c93a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->privacy_enabled = privacy_enabled;
 800c93e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800c942:	1dba      	adds	r2, r7, #6
 800c944:	7812      	ldrb	r2, [r2, #0]
 800c946:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800c948:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800c94c:	3301      	adds	r3, #1
 800c94e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->device_name_char_len = device_name_char_len;
 800c952:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800c956:	1d7a      	adds	r2, r7, #5
 800c958:	7812      	ldrb	r2, [r2, #0]
 800c95a:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800c95c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800c960:	3301      	adds	r3, #1
 800c962:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800c966:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800c96a:	2218      	movs	r2, #24
 800c96c:	2100      	movs	r1, #0
 800c96e:	4618      	mov	r0, r3
 800c970:	f000 fd70 	bl	800d454 <Osal_MemSet>
  rq.ogf = 0x3f;
 800c974:	233f      	movs	r3, #63	; 0x3f
 800c976:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x08a;
 800c97a:	238a      	movs	r3, #138	; 0x8a
 800c97c:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800c980:	f107 0310 	add.w	r3, r7, #16
 800c984:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800c988:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800c98c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &resp;
 800c990:	f107 0308 	add.w	r3, r7, #8
 800c994:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = sizeof(resp);
 800c998:	2307      	movs	r3, #7
 800c99a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800c99e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800c9a2:	2100      	movs	r1, #0
 800c9a4:	4618      	mov	r0, r3
 800c9a6:	f000 fdfd 	bl	800d5a4 <hci_send_req>
 800c9aa:	4603      	mov	r3, r0
 800c9ac:	2b00      	cmp	r3, #0
 800c9ae:	da01      	bge.n	800c9b4 <aci_gap_init+0xc8>
    return BLE_STATUS_TIMEOUT;
 800c9b0:	23ff      	movs	r3, #255	; 0xff
 800c9b2:	e021      	b.n	800c9f8 <aci_gap_init+0x10c>
  if ( resp.Status )
 800c9b4:	f107 0308 	add.w	r3, r7, #8
 800c9b8:	781b      	ldrb	r3, [r3, #0]
 800c9ba:	2b00      	cmp	r3, #0
 800c9bc:	d003      	beq.n	800c9c6 <aci_gap_init+0xda>
    return resp.Status;
 800c9be:	f107 0308 	add.w	r3, r7, #8
 800c9c2:	781b      	ldrb	r3, [r3, #0]
 800c9c4:	e018      	b.n	800c9f8 <aci_gap_init+0x10c>
  *Service_Handle = resp.Service_Handle;
 800c9c6:	f107 0308 	add.w	r3, r7, #8
 800c9ca:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800c9ce:	b29a      	uxth	r2, r3
 800c9d0:	463b      	mov	r3, r7
 800c9d2:	681b      	ldr	r3, [r3, #0]
 800c9d4:	801a      	strh	r2, [r3, #0]
  *Dev_Name_Char_Handle = resp.Dev_Name_Char_Handle;
 800c9d6:	f107 0308 	add.w	r3, r7, #8
 800c9da:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 800c9de:	b29a      	uxth	r2, r3
 800c9e0:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 800c9e4:	801a      	strh	r2, [r3, #0]
  *Appearance_Char_Handle = resp.Appearance_Char_Handle;
 800c9e6:	f107 0308 	add.w	r3, r7, #8
 800c9ea:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 800c9ee:	b29a      	uxth	r2, r3
 800c9f0:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 800c9f4:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 800c9f6:	2300      	movs	r3, #0
}
 800c9f8:	4618      	mov	r0, r3
 800c9fa:	f507 779a 	add.w	r7, r7, #308	; 0x134
 800c9fe:	46bd      	mov	sp, r7
 800ca00:	bd90      	pop	{r4, r7, pc}

0800ca02 <aci_gap_update_adv_data>:
  return status;
}

tBleStatus aci_gap_update_adv_data( uint8_t AdvDataLen,
                                    const uint8_t* AdvData )
{
 800ca02:	b580      	push	{r7, lr}
 800ca04:	b0cc      	sub	sp, #304	; 0x130
 800ca06:	af00      	add	r7, sp, #0
 800ca08:	4602      	mov	r2, r0
 800ca0a:	463b      	mov	r3, r7
 800ca0c:	6019      	str	r1, [r3, #0]
 800ca0e:	1dfb      	adds	r3, r7, #7
 800ca10:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_update_adv_data_cp0 *cp0 = (aci_gap_update_adv_data_cp0*)(cmd_buffer);
 800ca12:	f107 0310 	add.w	r3, r7, #16
 800ca16:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800ca1a:	f107 030f 	add.w	r3, r7, #15
 800ca1e:	2200      	movs	r2, #0
 800ca20:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800ca22:	2300      	movs	r3, #0
 800ca24:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->AdvDataLen = AdvDataLen;
 800ca28:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800ca2c:	1dfa      	adds	r2, r7, #7
 800ca2e:	7812      	ldrb	r2, [r2, #0]
 800ca30:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800ca32:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800ca36:	3301      	adds	r3, #1
 800ca38:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->AdvData, (const void*)AdvData, AdvDataLen );
 800ca3c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800ca40:	1c58      	adds	r0, r3, #1
 800ca42:	1dfb      	adds	r3, r7, #7
 800ca44:	781a      	ldrb	r2, [r3, #0]
 800ca46:	463b      	mov	r3, r7
 800ca48:	6819      	ldr	r1, [r3, #0]
 800ca4a:	f000 fcf3 	bl	800d434 <Osal_MemCpy>
  index_input += AdvDataLen;
 800ca4e:	1dfb      	adds	r3, r7, #7
 800ca50:	781b      	ldrb	r3, [r3, #0]
 800ca52:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800ca56:	4413      	add	r3, r2
 800ca58:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800ca5c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800ca60:	2218      	movs	r2, #24
 800ca62:	2100      	movs	r1, #0
 800ca64:	4618      	mov	r0, r3
 800ca66:	f000 fcf5 	bl	800d454 <Osal_MemSet>
  rq.ogf = 0x3f;
 800ca6a:	233f      	movs	r3, #63	; 0x3f
 800ca6c:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x08e;
 800ca70:	238e      	movs	r3, #142	; 0x8e
 800ca72:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800ca76:	f107 0310 	add.w	r3, r7, #16
 800ca7a:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800ca7e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800ca82:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800ca86:	f107 030f 	add.w	r3, r7, #15
 800ca8a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800ca8e:	2301      	movs	r3, #1
 800ca90:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800ca94:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800ca98:	2100      	movs	r1, #0
 800ca9a:	4618      	mov	r0, r3
 800ca9c:	f000 fd82 	bl	800d5a4 <hci_send_req>
 800caa0:	4603      	mov	r3, r0
 800caa2:	2b00      	cmp	r3, #0
 800caa4:	da01      	bge.n	800caaa <aci_gap_update_adv_data+0xa8>
    return BLE_STATUS_TIMEOUT;
 800caa6:	23ff      	movs	r3, #255	; 0xff
 800caa8:	e002      	b.n	800cab0 <aci_gap_update_adv_data+0xae>
  return status;
 800caaa:	f107 030f 	add.w	r3, r7, #15
 800caae:	781b      	ldrb	r3, [r3, #0]
}
 800cab0:	4618      	mov	r0, r3
 800cab2:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800cab6:	46bd      	mov	sp, r7
 800cab8:	bd80      	pop	{r7, pc}

0800caba <aci_gap_configure_whitelist>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_configure_whitelist( void )
{
 800caba:	b580      	push	{r7, lr}
 800cabc:	b088      	sub	sp, #32
 800cabe:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 800cac0:	2300      	movs	r3, #0
 800cac2:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800cac4:	f107 0308 	add.w	r3, r7, #8
 800cac8:	2218      	movs	r2, #24
 800caca:	2100      	movs	r1, #0
 800cacc:	4618      	mov	r0, r3
 800cace:	f000 fcc1 	bl	800d454 <Osal_MemSet>
  rq.ogf = 0x3f;
 800cad2:	233f      	movs	r3, #63	; 0x3f
 800cad4:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x092;
 800cad6:	2392      	movs	r3, #146	; 0x92
 800cad8:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 800cada:	1dfb      	adds	r3, r7, #7
 800cadc:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 800cade:	2301      	movs	r3, #1
 800cae0:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 800cae2:	f107 0308 	add.w	r3, r7, #8
 800cae6:	2100      	movs	r1, #0
 800cae8:	4618      	mov	r0, r3
 800caea:	f000 fd5b 	bl	800d5a4 <hci_send_req>
 800caee:	4603      	mov	r3, r0
 800caf0:	2b00      	cmp	r3, #0
 800caf2:	da01      	bge.n	800caf8 <aci_gap_configure_whitelist+0x3e>
    return BLE_STATUS_TIMEOUT;
 800caf4:	23ff      	movs	r3, #255	; 0xff
 800caf6:	e000      	b.n	800cafa <aci_gap_configure_whitelist+0x40>
  return status;
 800caf8:	79fb      	ldrb	r3, [r7, #7]
}
 800cafa:	4618      	mov	r0, r3
 800cafc:	3720      	adds	r7, #32
 800cafe:	46bd      	mov	sp, r7
 800cb00:	bd80      	pop	{r7, pc}

0800cb02 <aci_gap_allow_rebond>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_allow_rebond( uint16_t Connection_Handle )
{
 800cb02:	b580      	push	{r7, lr}
 800cb04:	b0cc      	sub	sp, #304	; 0x130
 800cb06:	af00      	add	r7, sp, #0
 800cb08:	4602      	mov	r2, r0
 800cb0a:	1dbb      	adds	r3, r7, #6
 800cb0c:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_allow_rebond_cp0 *cp0 = (aci_gap_allow_rebond_cp0*)(cmd_buffer);
 800cb0e:	f107 0310 	add.w	r3, r7, #16
 800cb12:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800cb16:	f107 030f 	add.w	r3, r7, #15
 800cb1a:	2200      	movs	r2, #0
 800cb1c:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800cb1e:	2300      	movs	r3, #0
 800cb20:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Connection_Handle = Connection_Handle;
 800cb24:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800cb28:	1dba      	adds	r2, r7, #6
 800cb2a:	8812      	ldrh	r2, [r2, #0]
 800cb2c:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800cb2e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800cb32:	3302      	adds	r3, #2
 800cb34:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800cb38:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800cb3c:	2218      	movs	r2, #24
 800cb3e:	2100      	movs	r1, #0
 800cb40:	4618      	mov	r0, r3
 800cb42:	f000 fc87 	bl	800d454 <Osal_MemSet>
  rq.ogf = 0x3f;
 800cb46:	233f      	movs	r3, #63	; 0x3f
 800cb48:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x095;
 800cb4c:	2395      	movs	r3, #149	; 0x95
 800cb4e:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800cb52:	f107 0310 	add.w	r3, r7, #16
 800cb56:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800cb5a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800cb5e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800cb62:	f107 030f 	add.w	r3, r7, #15
 800cb66:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800cb6a:	2301      	movs	r3, #1
 800cb6c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800cb70:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800cb74:	2100      	movs	r1, #0
 800cb76:	4618      	mov	r0, r3
 800cb78:	f000 fd14 	bl	800d5a4 <hci_send_req>
 800cb7c:	4603      	mov	r3, r0
 800cb7e:	2b00      	cmp	r3, #0
 800cb80:	da01      	bge.n	800cb86 <aci_gap_allow_rebond+0x84>
    return BLE_STATUS_TIMEOUT;
 800cb82:	23ff      	movs	r3, #255	; 0xff
 800cb84:	e002      	b.n	800cb8c <aci_gap_allow_rebond+0x8a>
  return status;
 800cb86:	f107 030f 	add.w	r3, r7, #15
 800cb8a:	781b      	ldrb	r3, [r3, #0]
}
 800cb8c:	4618      	mov	r0, r3
 800cb8e:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800cb92:	46bd      	mov	sp, r7
 800cb94:	bd80      	pop	{r7, pc}

0800cb96 <aci_gap_numeric_comparison_value_confirm_yesno>:
  return status;
}

tBleStatus aci_gap_numeric_comparison_value_confirm_yesno( uint16_t Connection_Handle,
                                                           uint8_t Confirm_Yes_No )
{
 800cb96:	b580      	push	{r7, lr}
 800cb98:	b0cc      	sub	sp, #304	; 0x130
 800cb9a:	af00      	add	r7, sp, #0
 800cb9c:	4602      	mov	r2, r0
 800cb9e:	1dbb      	adds	r3, r7, #6
 800cba0:	801a      	strh	r2, [r3, #0]
 800cba2:	1d7b      	adds	r3, r7, #5
 800cba4:	460a      	mov	r2, r1
 800cba6:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_numeric_comparison_value_confirm_yesno_cp0 *cp0 = (aci_gap_numeric_comparison_value_confirm_yesno_cp0*)(cmd_buffer);
 800cba8:	f107 0310 	add.w	r3, r7, #16
 800cbac:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800cbb0:	f107 030f 	add.w	r3, r7, #15
 800cbb4:	2200      	movs	r2, #0
 800cbb6:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800cbb8:	2300      	movs	r3, #0
 800cbba:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Connection_Handle = Connection_Handle;
 800cbbe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800cbc2:	1dba      	adds	r2, r7, #6
 800cbc4:	8812      	ldrh	r2, [r2, #0]
 800cbc6:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800cbc8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800cbcc:	3302      	adds	r3, #2
 800cbce:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Confirm_Yes_No = Confirm_Yes_No;
 800cbd2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800cbd6:	1d7a      	adds	r2, r7, #5
 800cbd8:	7812      	ldrb	r2, [r2, #0]
 800cbda:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800cbdc:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800cbe0:	3301      	adds	r3, #1
 800cbe2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800cbe6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800cbea:	2218      	movs	r2, #24
 800cbec:	2100      	movs	r1, #0
 800cbee:	4618      	mov	r0, r3
 800cbf0:	f000 fc30 	bl	800d454 <Osal_MemSet>
  rq.ogf = 0x3f;
 800cbf4:	233f      	movs	r3, #63	; 0x3f
 800cbf6:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x0a5;
 800cbfa:	23a5      	movs	r3, #165	; 0xa5
 800cbfc:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800cc00:	f107 0310 	add.w	r3, r7, #16
 800cc04:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800cc08:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800cc0c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800cc10:	f107 030f 	add.w	r3, r7, #15
 800cc14:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800cc18:	2301      	movs	r3, #1
 800cc1a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800cc1e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800cc22:	2100      	movs	r1, #0
 800cc24:	4618      	mov	r0, r3
 800cc26:	f000 fcbd 	bl	800d5a4 <hci_send_req>
 800cc2a:	4603      	mov	r3, r0
 800cc2c:	2b00      	cmp	r3, #0
 800cc2e:	da01      	bge.n	800cc34 <aci_gap_numeric_comparison_value_confirm_yesno+0x9e>
    return BLE_STATUS_TIMEOUT;
 800cc30:	23ff      	movs	r3, #255	; 0xff
 800cc32:	e002      	b.n	800cc3a <aci_gap_numeric_comparison_value_confirm_yesno+0xa4>
  return status;
 800cc34:	f107 030f 	add.w	r3, r7, #15
 800cc38:	781b      	ldrb	r3, [r3, #0]
}
 800cc3a:	4618      	mov	r0, r3
 800cc3c:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800cc40:	46bd      	mov	sp, r7
 800cc42:	bd80      	pop	{r7, pc}

0800cc44 <aci_gatt_init>:
 */

#include "ble_gatt_aci.h"

tBleStatus aci_gatt_init( void )
{
 800cc44:	b580      	push	{r7, lr}
 800cc46:	b088      	sub	sp, #32
 800cc48:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 800cc4a:	2300      	movs	r3, #0
 800cc4c:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800cc4e:	f107 0308 	add.w	r3, r7, #8
 800cc52:	2218      	movs	r2, #24
 800cc54:	2100      	movs	r1, #0
 800cc56:	4618      	mov	r0, r3
 800cc58:	f000 fbfc 	bl	800d454 <Osal_MemSet>
  rq.ogf = 0x3f;
 800cc5c:	233f      	movs	r3, #63	; 0x3f
 800cc5e:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x101;
 800cc60:	f240 1301 	movw	r3, #257	; 0x101
 800cc64:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 800cc66:	1dfb      	adds	r3, r7, #7
 800cc68:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 800cc6a:	2301      	movs	r3, #1
 800cc6c:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 800cc6e:	f107 0308 	add.w	r3, r7, #8
 800cc72:	2100      	movs	r1, #0
 800cc74:	4618      	mov	r0, r3
 800cc76:	f000 fc95 	bl	800d5a4 <hci_send_req>
 800cc7a:	4603      	mov	r3, r0
 800cc7c:	2b00      	cmp	r3, #0
 800cc7e:	da01      	bge.n	800cc84 <aci_gatt_init+0x40>
    return BLE_STATUS_TIMEOUT;
 800cc80:	23ff      	movs	r3, #255	; 0xff
 800cc82:	e000      	b.n	800cc86 <aci_gatt_init+0x42>
  return status;
 800cc84:	79fb      	ldrb	r3, [r7, #7]
}
 800cc86:	4618      	mov	r0, r3
 800cc88:	3720      	adds	r7, #32
 800cc8a:	46bd      	mov	sp, r7
 800cc8c:	bd80      	pop	{r7, pc}

0800cc8e <aci_gatt_add_service>:
tBleStatus aci_gatt_add_service( uint8_t Service_UUID_Type,
                                 const Service_UUID_t* Service_UUID,
                                 uint8_t Service_Type,
                                 uint8_t Max_Attribute_Records,
                                 uint16_t* Service_Handle )
{
 800cc8e:	b590      	push	{r4, r7, lr}
 800cc90:	b0cf      	sub	sp, #316	; 0x13c
 800cc92:	af00      	add	r7, sp, #0
 800cc94:	4604      	mov	r4, r0
 800cc96:	4638      	mov	r0, r7
 800cc98:	6001      	str	r1, [r0, #0]
 800cc9a:	4610      	mov	r0, r2
 800cc9c:	4619      	mov	r1, r3
 800cc9e:	1dfb      	adds	r3, r7, #7
 800cca0:	4622      	mov	r2, r4
 800cca2:	701a      	strb	r2, [r3, #0]
 800cca4:	1dbb      	adds	r3, r7, #6
 800cca6:	4602      	mov	r2, r0
 800cca8:	701a      	strb	r2, [r3, #0]
 800ccaa:	1d7b      	adds	r3, r7, #5
 800ccac:	460a      	mov	r2, r1
 800ccae:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_service_cp0 *cp0 = (aci_gatt_add_service_cp0*)(cmd_buffer);
 800ccb0:	f107 0310 	add.w	r3, r7, #16
 800ccb4:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  aci_gatt_add_service_cp1 *cp1 = (aci_gatt_add_service_cp1*)(cmd_buffer + 1 + (Service_UUID_Type == 1 ? 2 : (Service_UUID_Type == 2 ? 16 : 0)));
 800ccb8:	1dfb      	adds	r3, r7, #7
 800ccba:	781b      	ldrb	r3, [r3, #0]
 800ccbc:	2b01      	cmp	r3, #1
 800ccbe:	d007      	beq.n	800ccd0 <aci_gatt_add_service+0x42>
 800ccc0:	1dfb      	adds	r3, r7, #7
 800ccc2:	781b      	ldrb	r3, [r3, #0]
 800ccc4:	2b02      	cmp	r3, #2
 800ccc6:	d101      	bne.n	800cccc <aci_gatt_add_service+0x3e>
 800ccc8:	2311      	movs	r3, #17
 800ccca:	e002      	b.n	800ccd2 <aci_gatt_add_service+0x44>
 800cccc:	2301      	movs	r3, #1
 800ccce:	e000      	b.n	800ccd2 <aci_gatt_add_service+0x44>
 800ccd0:	2303      	movs	r3, #3
 800ccd2:	f107 0210 	add.w	r2, r7, #16
 800ccd6:	4413      	add	r3, r2
 800ccd8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  aci_gatt_add_service_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 800ccdc:	f107 030c 	add.w	r3, r7, #12
 800cce0:	2203      	movs	r2, #3
 800cce2:	2100      	movs	r1, #0
 800cce4:	4618      	mov	r0, r3
 800cce6:	f000 fbb5 	bl	800d454 <Osal_MemSet>
  int index_input = 0;
 800ccea:	2300      	movs	r3, #0
 800ccec:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Service_UUID_Type = Service_UUID_Type;
 800ccf0:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800ccf4:	1dfa      	adds	r2, r7, #7
 800ccf6:	7812      	ldrb	r2, [r2, #0]
 800ccf8:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800ccfa:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800ccfe:	3301      	adds	r3, #1
 800cd00:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  /* var_len_data input */
  {
    uint8_t size;
    switch ( Service_UUID_Type )
 800cd04:	1dfb      	adds	r3, r7, #7
 800cd06:	781b      	ldrb	r3, [r3, #0]
 800cd08:	2b01      	cmp	r3, #1
 800cd0a:	d002      	beq.n	800cd12 <aci_gatt_add_service+0x84>
 800cd0c:	2b02      	cmp	r3, #2
 800cd0e:	d004      	beq.n	800cd1a <aci_gatt_add_service+0x8c>
 800cd10:	e007      	b.n	800cd22 <aci_gatt_add_service+0x94>
    {
      case 1: size = 2; break;
 800cd12:	2302      	movs	r3, #2
 800cd14:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
 800cd18:	e005      	b.n	800cd26 <aci_gatt_add_service+0x98>
      case 2: size = 16; break;
 800cd1a:	2310      	movs	r3, #16
 800cd1c:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
 800cd20:	e001      	b.n	800cd26 <aci_gatt_add_service+0x98>
      default: return BLE_STATUS_ERROR;
 800cd22:	2347      	movs	r3, #71	; 0x47
 800cd24:	e05d      	b.n	800cde2 <aci_gatt_add_service+0x154>
    }
    Osal_MemCpy( (void*)&cp0->Service_UUID, (const void*)Service_UUID, size );
 800cd26:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800cd2a:	1c58      	adds	r0, r3, #1
 800cd2c:	f897 2137 	ldrb.w	r2, [r7, #311]	; 0x137
 800cd30:	463b      	mov	r3, r7
 800cd32:	6819      	ldr	r1, [r3, #0]
 800cd34:	f000 fb7e 	bl	800d434 <Osal_MemCpy>
    index_input += size;
 800cd38:	f897 3137 	ldrb.w	r3, [r7, #311]	; 0x137
 800cd3c:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800cd40:	4413      	add	r3, r2
 800cd42:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp1->Service_Type = Service_Type;
 800cd46:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800cd4a:	1dba      	adds	r2, r7, #6
 800cd4c:	7812      	ldrb	r2, [r2, #0]
 800cd4e:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 800cd50:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800cd54:	3301      	adds	r3, #1
 800cd56:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp1->Max_Attribute_Records = Max_Attribute_Records;
 800cd5a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800cd5e:	1d7a      	adds	r2, r7, #5
 800cd60:	7812      	ldrb	r2, [r2, #0]
 800cd62:	705a      	strb	r2, [r3, #1]
    }
    index_input += 1;
 800cd64:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800cd68:	3301      	adds	r3, #1
 800cd6a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800cd6e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800cd72:	2218      	movs	r2, #24
 800cd74:	2100      	movs	r1, #0
 800cd76:	4618      	mov	r0, r3
 800cd78:	f000 fb6c 	bl	800d454 <Osal_MemSet>
  rq.ogf = 0x3f;
 800cd7c:	233f      	movs	r3, #63	; 0x3f
 800cd7e:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x102;
 800cd82:	f44f 7381 	mov.w	r3, #258	; 0x102
 800cd86:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800cd8a:	f107 0310 	add.w	r3, r7, #16
 800cd8e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800cd92:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800cd96:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &resp;
 800cd9a:	f107 030c 	add.w	r3, r7, #12
 800cd9e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = sizeof(resp);
 800cda2:	2303      	movs	r3, #3
 800cda4:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800cda8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800cdac:	2100      	movs	r1, #0
 800cdae:	4618      	mov	r0, r3
 800cdb0:	f000 fbf8 	bl	800d5a4 <hci_send_req>
 800cdb4:	4603      	mov	r3, r0
 800cdb6:	2b00      	cmp	r3, #0
 800cdb8:	da01      	bge.n	800cdbe <aci_gatt_add_service+0x130>
    return BLE_STATUS_TIMEOUT;
 800cdba:	23ff      	movs	r3, #255	; 0xff
 800cdbc:	e011      	b.n	800cde2 <aci_gatt_add_service+0x154>
  if ( resp.Status )
 800cdbe:	f107 030c 	add.w	r3, r7, #12
 800cdc2:	781b      	ldrb	r3, [r3, #0]
 800cdc4:	2b00      	cmp	r3, #0
 800cdc6:	d003      	beq.n	800cdd0 <aci_gatt_add_service+0x142>
    return resp.Status;
 800cdc8:	f107 030c 	add.w	r3, r7, #12
 800cdcc:	781b      	ldrb	r3, [r3, #0]
 800cdce:	e008      	b.n	800cde2 <aci_gatt_add_service+0x154>
  *Service_Handle = resp.Service_Handle;
 800cdd0:	f107 030c 	add.w	r3, r7, #12
 800cdd4:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800cdd8:	b29a      	uxth	r2, r3
 800cdda:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800cdde:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 800cde0:	2300      	movs	r3, #0
}
 800cde2:	4618      	mov	r0, r3
 800cde4:	f507 779e 	add.w	r7, r7, #316	; 0x13c
 800cde8:	46bd      	mov	sp, r7
 800cdea:	bd90      	pop	{r4, r7, pc}

0800cdec <aci_gatt_add_char>:
                              uint8_t Security_Permissions,
                              uint8_t GATT_Evt_Mask,
                              uint8_t Enc_Key_Size,
                              uint8_t Is_Variable,
                              uint16_t* Char_Handle )
{
 800cdec:	b590      	push	{r4, r7, lr}
 800cdee:	b0d1      	sub	sp, #324	; 0x144
 800cdf0:	af00      	add	r7, sp, #0
 800cdf2:	4604      	mov	r4, r0
 800cdf4:	4608      	mov	r0, r1
 800cdf6:	f107 0108 	add.w	r1, r7, #8
 800cdfa:	600a      	str	r2, [r1, #0]
 800cdfc:	4619      	mov	r1, r3
 800cdfe:	f107 030e 	add.w	r3, r7, #14
 800ce02:	4622      	mov	r2, r4
 800ce04:	801a      	strh	r2, [r3, #0]
 800ce06:	f107 030d 	add.w	r3, r7, #13
 800ce0a:	4602      	mov	r2, r0
 800ce0c:	701a      	strb	r2, [r3, #0]
 800ce0e:	1dbb      	adds	r3, r7, #6
 800ce10:	460a      	mov	r2, r1
 800ce12:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_char_cp0 *cp0 = (aci_gatt_add_char_cp0*)(cmd_buffer);
 800ce14:	f107 0318 	add.w	r3, r7, #24
 800ce18:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  aci_gatt_add_char_cp1 *cp1 = (aci_gatt_add_char_cp1*)(cmd_buffer + 2 + 1 + (Char_UUID_Type == 1 ? 2 : (Char_UUID_Type == 2 ? 16 : 0)));
 800ce1c:	f107 030d 	add.w	r3, r7, #13
 800ce20:	781b      	ldrb	r3, [r3, #0]
 800ce22:	2b01      	cmp	r3, #1
 800ce24:	d008      	beq.n	800ce38 <aci_gatt_add_char+0x4c>
 800ce26:	f107 030d 	add.w	r3, r7, #13
 800ce2a:	781b      	ldrb	r3, [r3, #0]
 800ce2c:	2b02      	cmp	r3, #2
 800ce2e:	d101      	bne.n	800ce34 <aci_gatt_add_char+0x48>
 800ce30:	2313      	movs	r3, #19
 800ce32:	e002      	b.n	800ce3a <aci_gatt_add_char+0x4e>
 800ce34:	2303      	movs	r3, #3
 800ce36:	e000      	b.n	800ce3a <aci_gatt_add_char+0x4e>
 800ce38:	2305      	movs	r3, #5
 800ce3a:	f107 0218 	add.w	r2, r7, #24
 800ce3e:	4413      	add	r3, r2
 800ce40:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  aci_gatt_add_char_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 800ce44:	f107 0314 	add.w	r3, r7, #20
 800ce48:	2203      	movs	r2, #3
 800ce4a:	2100      	movs	r1, #0
 800ce4c:	4618      	mov	r0, r3
 800ce4e:	f000 fb01 	bl	800d454 <Osal_MemSet>
  int index_input = 0;
 800ce52:	2300      	movs	r3, #0
 800ce54:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Service_Handle = Service_Handle;
 800ce58:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800ce5c:	f107 020e 	add.w	r2, r7, #14
 800ce60:	8812      	ldrh	r2, [r2, #0]
 800ce62:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800ce64:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800ce68:	3302      	adds	r3, #2
 800ce6a:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Char_UUID_Type = Char_UUID_Type;
 800ce6e:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800ce72:	f107 020d 	add.w	r2, r7, #13
 800ce76:	7812      	ldrb	r2, [r2, #0]
 800ce78:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800ce7a:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800ce7e:	3301      	adds	r3, #1
 800ce80:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  /* var_len_data input */
  {
    uint8_t size;
    switch ( Char_UUID_Type )
 800ce84:	f107 030d 	add.w	r3, r7, #13
 800ce88:	781b      	ldrb	r3, [r3, #0]
 800ce8a:	2b01      	cmp	r3, #1
 800ce8c:	d002      	beq.n	800ce94 <aci_gatt_add_char+0xa8>
 800ce8e:	2b02      	cmp	r3, #2
 800ce90:	d004      	beq.n	800ce9c <aci_gatt_add_char+0xb0>
 800ce92:	e007      	b.n	800cea4 <aci_gatt_add_char+0xb8>
    {
      case 1: size = 2; break;
 800ce94:	2302      	movs	r3, #2
 800ce96:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
 800ce9a:	e005      	b.n	800cea8 <aci_gatt_add_char+0xbc>
      case 2: size = 16; break;
 800ce9c:	2310      	movs	r3, #16
 800ce9e:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
 800cea2:	e001      	b.n	800cea8 <aci_gatt_add_char+0xbc>
      default: return BLE_STATUS_ERROR;
 800cea4:	2347      	movs	r3, #71	; 0x47
 800cea6:	e086      	b.n	800cfb6 <aci_gatt_add_char+0x1ca>
    }
    Osal_MemCpy( (void*)&cp0->Char_UUID, (const void*)Char_UUID, size );
 800cea8:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800ceac:	1cd8      	adds	r0, r3, #3
 800ceae:	f897 213f 	ldrb.w	r2, [r7, #319]	; 0x13f
 800ceb2:	f107 0308 	add.w	r3, r7, #8
 800ceb6:	6819      	ldr	r1, [r3, #0]
 800ceb8:	f000 fabc 	bl	800d434 <Osal_MemCpy>
    index_input += size;
 800cebc:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
 800cec0:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 800cec4:	4413      	add	r3, r2
 800cec6:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Char_Value_Length = Char_Value_Length;
 800ceca:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800cece:	1dba      	adds	r2, r7, #6
 800ced0:	8812      	ldrh	r2, [r2, #0]
 800ced2:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 800ced4:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800ced8:	3302      	adds	r3, #2
 800ceda:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Char_Properties = Char_Properties;
 800cede:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800cee2:	f897 2150 	ldrb.w	r2, [r7, #336]	; 0x150
 800cee6:	709a      	strb	r2, [r3, #2]
    }
    index_input += 1;
 800cee8:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800ceec:	3301      	adds	r3, #1
 800ceee:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Security_Permissions = Security_Permissions;
 800cef2:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800cef6:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 800cefa:	70da      	strb	r2, [r3, #3]
    }
    index_input += 1;
 800cefc:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800cf00:	3301      	adds	r3, #1
 800cf02:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->GATT_Evt_Mask = GATT_Evt_Mask;
 800cf06:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800cf0a:	f897 2158 	ldrb.w	r2, [r7, #344]	; 0x158
 800cf0e:	711a      	strb	r2, [r3, #4]
    }
    index_input += 1;
 800cf10:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800cf14:	3301      	adds	r3, #1
 800cf16:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Enc_Key_Size = Enc_Key_Size;
 800cf1a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800cf1e:	f897 215c 	ldrb.w	r2, [r7, #348]	; 0x15c
 800cf22:	715a      	strb	r2, [r3, #5]
    }
    index_input += 1;
 800cf24:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800cf28:	3301      	adds	r3, #1
 800cf2a:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Is_Variable = Is_Variable;
 800cf2e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800cf32:	f897 2160 	ldrb.w	r2, [r7, #352]	; 0x160
 800cf36:	719a      	strb	r2, [r3, #6]
    }
    index_input += 1;
 800cf38:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800cf3c:	3301      	adds	r3, #1
 800cf3e:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800cf42:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800cf46:	2218      	movs	r2, #24
 800cf48:	2100      	movs	r1, #0
 800cf4a:	4618      	mov	r0, r3
 800cf4c:	f000 fa82 	bl	800d454 <Osal_MemSet>
  rq.ogf = 0x3f;
 800cf50:	233f      	movs	r3, #63	; 0x3f
 800cf52:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
  rq.ocf = 0x104;
 800cf56:	f44f 7382 	mov.w	r3, #260	; 0x104
 800cf5a:	f8a7 311a 	strh.w	r3, [r7, #282]	; 0x11a
  rq.cparam = cmd_buffer;
 800cf5e:	f107 0318 	add.w	r3, r7, #24
 800cf62:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.clen = index_input;
 800cf66:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800cf6a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  rq.rparam = &resp;
 800cf6e:	f107 0314 	add.w	r3, r7, #20
 800cf72:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  rq.rlen = sizeof(resp);
 800cf76:	2303      	movs	r3, #3
 800cf78:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if ( hci_send_req(&rq, FALSE) < 0 )
 800cf7c:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800cf80:	2100      	movs	r1, #0
 800cf82:	4618      	mov	r0, r3
 800cf84:	f000 fb0e 	bl	800d5a4 <hci_send_req>
 800cf88:	4603      	mov	r3, r0
 800cf8a:	2b00      	cmp	r3, #0
 800cf8c:	da01      	bge.n	800cf92 <aci_gatt_add_char+0x1a6>
    return BLE_STATUS_TIMEOUT;
 800cf8e:	23ff      	movs	r3, #255	; 0xff
 800cf90:	e011      	b.n	800cfb6 <aci_gatt_add_char+0x1ca>
  if ( resp.Status )
 800cf92:	f107 0314 	add.w	r3, r7, #20
 800cf96:	781b      	ldrb	r3, [r3, #0]
 800cf98:	2b00      	cmp	r3, #0
 800cf9a:	d003      	beq.n	800cfa4 <aci_gatt_add_char+0x1b8>
    return resp.Status;
 800cf9c:	f107 0314 	add.w	r3, r7, #20
 800cfa0:	781b      	ldrb	r3, [r3, #0]
 800cfa2:	e008      	b.n	800cfb6 <aci_gatt_add_char+0x1ca>
  *Char_Handle = resp.Char_Handle;
 800cfa4:	f107 0314 	add.w	r3, r7, #20
 800cfa8:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800cfac:	b29a      	uxth	r2, r3
 800cfae:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 800cfb2:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 800cfb4:	2300      	movs	r3, #0
}
 800cfb6:	4618      	mov	r0, r3
 800cfb8:	f507 77a2 	add.w	r7, r7, #324	; 0x144
 800cfbc:	46bd      	mov	sp, r7
 800cfbe:	bd90      	pop	{r4, r7, pc}

0800cfc0 <aci_gatt_update_char_value>:
tBleStatus aci_gatt_update_char_value( uint16_t Service_Handle,
                                       uint16_t Char_Handle,
                                       uint8_t Val_Offset,
                                       uint8_t Char_Value_Length,
                                       const uint8_t* Char_Value )
{
 800cfc0:	b5b0      	push	{r4, r5, r7, lr}
 800cfc2:	b0cc      	sub	sp, #304	; 0x130
 800cfc4:	af00      	add	r7, sp, #0
 800cfc6:	4605      	mov	r5, r0
 800cfc8:	460c      	mov	r4, r1
 800cfca:	4610      	mov	r0, r2
 800cfcc:	4619      	mov	r1, r3
 800cfce:	1dbb      	adds	r3, r7, #6
 800cfd0:	462a      	mov	r2, r5
 800cfd2:	801a      	strh	r2, [r3, #0]
 800cfd4:	1d3b      	adds	r3, r7, #4
 800cfd6:	4622      	mov	r2, r4
 800cfd8:	801a      	strh	r2, [r3, #0]
 800cfda:	1cfb      	adds	r3, r7, #3
 800cfdc:	4602      	mov	r2, r0
 800cfde:	701a      	strb	r2, [r3, #0]
 800cfe0:	1cbb      	adds	r3, r7, #2
 800cfe2:	460a      	mov	r2, r1
 800cfe4:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_update_char_value_cp0 *cp0 = (aci_gatt_update_char_value_cp0*)(cmd_buffer);
 800cfe6:	f107 0310 	add.w	r3, r7, #16
 800cfea:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800cfee:	f107 030f 	add.w	r3, r7, #15
 800cff2:	2200      	movs	r2, #0
 800cff4:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800cff6:	2300      	movs	r3, #0
 800cff8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Service_Handle = Service_Handle;
 800cffc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800d000:	1dba      	adds	r2, r7, #6
 800d002:	8812      	ldrh	r2, [r2, #0]
 800d004:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800d006:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800d00a:	3302      	adds	r3, #2
 800d00c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Char_Handle = Char_Handle;
 800d010:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800d014:	1d3a      	adds	r2, r7, #4
 800d016:	8812      	ldrh	r2, [r2, #0]
 800d018:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 800d01a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800d01e:	3302      	adds	r3, #2
 800d020:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Val_Offset = Val_Offset;
 800d024:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800d028:	1cfa      	adds	r2, r7, #3
 800d02a:	7812      	ldrb	r2, [r2, #0]
 800d02c:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 800d02e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800d032:	3301      	adds	r3, #1
 800d034:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Char_Value_Length = Char_Value_Length;
 800d038:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800d03c:	1cba      	adds	r2, r7, #2
 800d03e:	7812      	ldrb	r2, [r2, #0]
 800d040:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 800d042:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800d046:	3301      	adds	r3, #1
 800d048:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->Char_Value, (const void*)Char_Value, Char_Value_Length );
 800d04c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800d050:	1d98      	adds	r0, r3, #6
 800d052:	1cbb      	adds	r3, r7, #2
 800d054:	781b      	ldrb	r3, [r3, #0]
 800d056:	461a      	mov	r2, r3
 800d058:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 800d05c:	f000 f9ea 	bl	800d434 <Osal_MemCpy>
  index_input += Char_Value_Length;
 800d060:	1cbb      	adds	r3, r7, #2
 800d062:	781b      	ldrb	r3, [r3, #0]
 800d064:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800d068:	4413      	add	r3, r2
 800d06a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800d06e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800d072:	2218      	movs	r2, #24
 800d074:	2100      	movs	r1, #0
 800d076:	4618      	mov	r0, r3
 800d078:	f000 f9ec 	bl	800d454 <Osal_MemSet>
  rq.ogf = 0x3f;
 800d07c:	233f      	movs	r3, #63	; 0x3f
 800d07e:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x106;
 800d082:	f44f 7383 	mov.w	r3, #262	; 0x106
 800d086:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800d08a:	f107 0310 	add.w	r3, r7, #16
 800d08e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800d092:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800d096:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800d09a:	f107 030f 	add.w	r3, r7, #15
 800d09e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800d0a2:	2301      	movs	r3, #1
 800d0a4:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800d0a8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800d0ac:	2100      	movs	r1, #0
 800d0ae:	4618      	mov	r0, r3
 800d0b0:	f000 fa78 	bl	800d5a4 <hci_send_req>
 800d0b4:	4603      	mov	r3, r0
 800d0b6:	2b00      	cmp	r3, #0
 800d0b8:	da01      	bge.n	800d0be <aci_gatt_update_char_value+0xfe>
    return BLE_STATUS_TIMEOUT;
 800d0ba:	23ff      	movs	r3, #255	; 0xff
 800d0bc:	e002      	b.n	800d0c4 <aci_gatt_update_char_value+0x104>
  return status;
 800d0be:	f107 030f 	add.w	r3, r7, #15
 800d0c2:	781b      	ldrb	r3, [r3, #0]
}
 800d0c4:	4618      	mov	r0, r3
 800d0c6:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800d0ca:	46bd      	mov	sp, r7
 800d0cc:	bdb0      	pop	{r4, r5, r7, pc}

0800d0ce <aci_hal_write_config_data>:
}

tBleStatus aci_hal_write_config_data( uint8_t Offset,
                                      uint8_t Length,
                                      const uint8_t* Value )
{
 800d0ce:	b580      	push	{r7, lr}
 800d0d0:	b0cc      	sub	sp, #304	; 0x130
 800d0d2:	af00      	add	r7, sp, #0
 800d0d4:	463b      	mov	r3, r7
 800d0d6:	601a      	str	r2, [r3, #0]
 800d0d8:	1dfb      	adds	r3, r7, #7
 800d0da:	4602      	mov	r2, r0
 800d0dc:	701a      	strb	r2, [r3, #0]
 800d0de:	1dbb      	adds	r3, r7, #6
 800d0e0:	460a      	mov	r2, r1
 800d0e2:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_write_config_data_cp0 *cp0 = (aci_hal_write_config_data_cp0*)(cmd_buffer);
 800d0e4:	f107 0310 	add.w	r3, r7, #16
 800d0e8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800d0ec:	f107 030f 	add.w	r3, r7, #15
 800d0f0:	2200      	movs	r2, #0
 800d0f2:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800d0f4:	2300      	movs	r3, #0
 800d0f6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Offset = Offset;
 800d0fa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800d0fe:	1dfa      	adds	r2, r7, #7
 800d100:	7812      	ldrb	r2, [r2, #0]
 800d102:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800d104:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800d108:	3301      	adds	r3, #1
 800d10a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Length = Length;
 800d10e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800d112:	1dba      	adds	r2, r7, #6
 800d114:	7812      	ldrb	r2, [r2, #0]
 800d116:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800d118:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800d11c:	3301      	adds	r3, #1
 800d11e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->Value, (const void*)Value, Length );
 800d122:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800d126:	1c98      	adds	r0, r3, #2
 800d128:	1dbb      	adds	r3, r7, #6
 800d12a:	781a      	ldrb	r2, [r3, #0]
 800d12c:	463b      	mov	r3, r7
 800d12e:	6819      	ldr	r1, [r3, #0]
 800d130:	f000 f980 	bl	800d434 <Osal_MemCpy>
  index_input += Length;
 800d134:	1dbb      	adds	r3, r7, #6
 800d136:	781b      	ldrb	r3, [r3, #0]
 800d138:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800d13c:	4413      	add	r3, r2
 800d13e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800d142:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800d146:	2218      	movs	r2, #24
 800d148:	2100      	movs	r1, #0
 800d14a:	4618      	mov	r0, r3
 800d14c:	f000 f982 	bl	800d454 <Osal_MemSet>
  rq.ogf = 0x3f;
 800d150:	233f      	movs	r3, #63	; 0x3f
 800d152:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x00c;
 800d156:	230c      	movs	r3, #12
 800d158:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800d15c:	f107 0310 	add.w	r3, r7, #16
 800d160:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800d164:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800d168:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800d16c:	f107 030f 	add.w	r3, r7, #15
 800d170:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800d174:	2301      	movs	r3, #1
 800d176:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800d17a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800d17e:	2100      	movs	r1, #0
 800d180:	4618      	mov	r0, r3
 800d182:	f000 fa0f 	bl	800d5a4 <hci_send_req>
 800d186:	4603      	mov	r3, r0
 800d188:	2b00      	cmp	r3, #0
 800d18a:	da01      	bge.n	800d190 <aci_hal_write_config_data+0xc2>
    return BLE_STATUS_TIMEOUT;
 800d18c:	23ff      	movs	r3, #255	; 0xff
 800d18e:	e002      	b.n	800d196 <aci_hal_write_config_data+0xc8>
  return status;
 800d190:	f107 030f 	add.w	r3, r7, #15
 800d194:	781b      	ldrb	r3, [r3, #0]
}
 800d196:	4618      	mov	r0, r3
 800d198:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800d19c:	46bd      	mov	sp, r7
 800d19e:	bd80      	pop	{r7, pc}

0800d1a0 <aci_hal_set_tx_power_level>:
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_tx_power_level( uint8_t En_High_Power,
                                       uint8_t PA_Level )
{
 800d1a0:	b580      	push	{r7, lr}
 800d1a2:	b0cc      	sub	sp, #304	; 0x130
 800d1a4:	af00      	add	r7, sp, #0
 800d1a6:	4602      	mov	r2, r0
 800d1a8:	1dfb      	adds	r3, r7, #7
 800d1aa:	701a      	strb	r2, [r3, #0]
 800d1ac:	1dbb      	adds	r3, r7, #6
 800d1ae:	460a      	mov	r2, r1
 800d1b0:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_tx_power_level_cp0 *cp0 = (aci_hal_set_tx_power_level_cp0*)(cmd_buffer);
 800d1b2:	f107 0310 	add.w	r3, r7, #16
 800d1b6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800d1ba:	f107 030f 	add.w	r3, r7, #15
 800d1be:	2200      	movs	r2, #0
 800d1c0:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800d1c2:	2300      	movs	r3, #0
 800d1c4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->En_High_Power = En_High_Power;
 800d1c8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800d1cc:	1dfa      	adds	r2, r7, #7
 800d1ce:	7812      	ldrb	r2, [r2, #0]
 800d1d0:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800d1d2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800d1d6:	3301      	adds	r3, #1
 800d1d8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->PA_Level = PA_Level;
 800d1dc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800d1e0:	1dba      	adds	r2, r7, #6
 800d1e2:	7812      	ldrb	r2, [r2, #0]
 800d1e4:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800d1e6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800d1ea:	3301      	adds	r3, #1
 800d1ec:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800d1f0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800d1f4:	2218      	movs	r2, #24
 800d1f6:	2100      	movs	r1, #0
 800d1f8:	4618      	mov	r0, r3
 800d1fa:	f000 f92b 	bl	800d454 <Osal_MemSet>
  rq.ogf = 0x3f;
 800d1fe:	233f      	movs	r3, #63	; 0x3f
 800d200:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x00f;
 800d204:	230f      	movs	r3, #15
 800d206:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800d20a:	f107 0310 	add.w	r3, r7, #16
 800d20e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800d212:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800d216:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800d21a:	f107 030f 	add.w	r3, r7, #15
 800d21e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800d222:	2301      	movs	r3, #1
 800d224:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800d228:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800d22c:	2100      	movs	r1, #0
 800d22e:	4618      	mov	r0, r3
 800d230:	f000 f9b8 	bl	800d5a4 <hci_send_req>
 800d234:	4603      	mov	r3, r0
 800d236:	2b00      	cmp	r3, #0
 800d238:	da01      	bge.n	800d23e <aci_hal_set_tx_power_level+0x9e>
    return BLE_STATUS_TIMEOUT;
 800d23a:	23ff      	movs	r3, #255	; 0xff
 800d23c:	e002      	b.n	800d244 <aci_hal_set_tx_power_level+0xa4>
  return status;
 800d23e:	f107 030f 	add.w	r3, r7, #15
 800d242:	781b      	ldrb	r3, [r3, #0]
}
 800d244:	4618      	mov	r0, r3
 800d246:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800d24a:	46bd      	mov	sp, r7
 800d24c:	bd80      	pop	{r7, pc}

0800d24e <hci_reset>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus hci_reset( void )
{
 800d24e:	b580      	push	{r7, lr}
 800d250:	b088      	sub	sp, #32
 800d252:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 800d254:	2300      	movs	r3, #0
 800d256:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800d258:	f107 0308 	add.w	r3, r7, #8
 800d25c:	2218      	movs	r2, #24
 800d25e:	2100      	movs	r1, #0
 800d260:	4618      	mov	r0, r3
 800d262:	f000 f8f7 	bl	800d454 <Osal_MemSet>
  rq.ogf = 0x03;
 800d266:	2303      	movs	r3, #3
 800d268:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x003;
 800d26a:	2303      	movs	r3, #3
 800d26c:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 800d26e:	1dfb      	adds	r3, r7, #7
 800d270:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 800d272:	2301      	movs	r3, #1
 800d274:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 800d276:	f107 0308 	add.w	r3, r7, #8
 800d27a:	2100      	movs	r1, #0
 800d27c:	4618      	mov	r0, r3
 800d27e:	f000 f991 	bl	800d5a4 <hci_send_req>
 800d282:	4603      	mov	r3, r0
 800d284:	2b00      	cmp	r3, #0
 800d286:	da01      	bge.n	800d28c <hci_reset+0x3e>
    return BLE_STATUS_TIMEOUT;
 800d288:	23ff      	movs	r3, #255	; 0xff
 800d28a:	e000      	b.n	800d28e <hci_reset+0x40>
  return status;
 800d28c:	79fb      	ldrb	r3, [r7, #7]
}
 800d28e:	4618      	mov	r0, r3
 800d290:	3720      	adds	r7, #32
 800d292:	46bd      	mov	sp, r7
 800d294:	bd80      	pop	{r7, pc}

0800d296 <hci_le_read_phy>:
}

tBleStatus hci_le_read_phy( uint16_t Connection_Handle,
                            uint8_t* TX_PHY,
                            uint8_t* RX_PHY )
{
 800d296:	b580      	push	{r7, lr}
 800d298:	b0ce      	sub	sp, #312	; 0x138
 800d29a:	af00      	add	r7, sp, #0
 800d29c:	f107 0308 	add.w	r3, r7, #8
 800d2a0:	6019      	str	r1, [r3, #0]
 800d2a2:	1d3b      	adds	r3, r7, #4
 800d2a4:	601a      	str	r2, [r3, #0]
 800d2a6:	f107 030e 	add.w	r3, r7, #14
 800d2aa:	4602      	mov	r2, r0
 800d2ac:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  hci_le_read_phy_cp0 *cp0 = (hci_le_read_phy_cp0*)(cmd_buffer);
 800d2ae:	f107 0318 	add.w	r3, r7, #24
 800d2b2:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  hci_le_read_phy_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 800d2b6:	f107 0310 	add.w	r3, r7, #16
 800d2ba:	2205      	movs	r2, #5
 800d2bc:	2100      	movs	r1, #0
 800d2be:	4618      	mov	r0, r3
 800d2c0:	f000 f8c8 	bl	800d454 <Osal_MemSet>
  int index_input = 0;
 800d2c4:	2300      	movs	r3, #0
 800d2c6:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Connection_Handle = Connection_Handle;
 800d2ca:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800d2ce:	f107 020e 	add.w	r2, r7, #14
 800d2d2:	8812      	ldrh	r2, [r2, #0]
 800d2d4:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800d2d6:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800d2da:	3302      	adds	r3, #2
 800d2dc:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800d2e0:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800d2e4:	2218      	movs	r2, #24
 800d2e6:	2100      	movs	r1, #0
 800d2e8:	4618      	mov	r0, r3
 800d2ea:	f000 f8b3 	bl	800d454 <Osal_MemSet>
  rq.ogf = 0x08;
 800d2ee:	2308      	movs	r3, #8
 800d2f0:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
  rq.ocf = 0x030;
 800d2f4:	2330      	movs	r3, #48	; 0x30
 800d2f6:	f8a7 311a 	strh.w	r3, [r7, #282]	; 0x11a
  rq.cparam = cmd_buffer;
 800d2fa:	f107 0318 	add.w	r3, r7, #24
 800d2fe:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.clen = index_input;
 800d302:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800d306:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  rq.rparam = &resp;
 800d30a:	f107 0310 	add.w	r3, r7, #16
 800d30e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  rq.rlen = sizeof(resp);
 800d312:	2305      	movs	r3, #5
 800d314:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if ( hci_send_req(&rq, FALSE) < 0 )
 800d318:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800d31c:	2100      	movs	r1, #0
 800d31e:	4618      	mov	r0, r3
 800d320:	f000 f940 	bl	800d5a4 <hci_send_req>
 800d324:	4603      	mov	r3, r0
 800d326:	2b00      	cmp	r3, #0
 800d328:	da01      	bge.n	800d32e <hci_le_read_phy+0x98>
    return BLE_STATUS_TIMEOUT;
 800d32a:	23ff      	movs	r3, #255	; 0xff
 800d32c:	e016      	b.n	800d35c <hci_le_read_phy+0xc6>
  if ( resp.Status )
 800d32e:	f107 0310 	add.w	r3, r7, #16
 800d332:	781b      	ldrb	r3, [r3, #0]
 800d334:	2b00      	cmp	r3, #0
 800d336:	d003      	beq.n	800d340 <hci_le_read_phy+0xaa>
    return resp.Status;
 800d338:	f107 0310 	add.w	r3, r7, #16
 800d33c:	781b      	ldrb	r3, [r3, #0]
 800d33e:	e00d      	b.n	800d35c <hci_le_read_phy+0xc6>
  *TX_PHY = resp.TX_PHY;
 800d340:	f107 0310 	add.w	r3, r7, #16
 800d344:	78da      	ldrb	r2, [r3, #3]
 800d346:	f107 0308 	add.w	r3, r7, #8
 800d34a:	681b      	ldr	r3, [r3, #0]
 800d34c:	701a      	strb	r2, [r3, #0]
  *RX_PHY = resp.RX_PHY;
 800d34e:	f107 0310 	add.w	r3, r7, #16
 800d352:	791a      	ldrb	r2, [r3, #4]
 800d354:	1d3b      	adds	r3, r7, #4
 800d356:	681b      	ldr	r3, [r3, #0]
 800d358:	701a      	strb	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 800d35a:	2300      	movs	r3, #0
}
 800d35c:	4618      	mov	r0, r3
 800d35e:	f507 779c 	add.w	r7, r7, #312	; 0x138
 800d362:	46bd      	mov	sp, r7
 800d364:	bd80      	pop	{r7, pc}

0800d366 <hci_le_set_default_phy>:

tBleStatus hci_le_set_default_phy( uint8_t ALL_PHYS,
                                   uint8_t TX_PHYS,
                                   uint8_t RX_PHYS )
{
 800d366:	b590      	push	{r4, r7, lr}
 800d368:	b0cd      	sub	sp, #308	; 0x134
 800d36a:	af00      	add	r7, sp, #0
 800d36c:	4604      	mov	r4, r0
 800d36e:	4608      	mov	r0, r1
 800d370:	4611      	mov	r1, r2
 800d372:	1dfb      	adds	r3, r7, #7
 800d374:	4622      	mov	r2, r4
 800d376:	701a      	strb	r2, [r3, #0]
 800d378:	1dbb      	adds	r3, r7, #6
 800d37a:	4602      	mov	r2, r0
 800d37c:	701a      	strb	r2, [r3, #0]
 800d37e:	1d7b      	adds	r3, r7, #5
 800d380:	460a      	mov	r2, r1
 800d382:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  hci_le_set_default_phy_cp0 *cp0 = (hci_le_set_default_phy_cp0*)(cmd_buffer);
 800d384:	f107 0310 	add.w	r3, r7, #16
 800d388:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800d38c:	f107 030f 	add.w	r3, r7, #15
 800d390:	2200      	movs	r2, #0
 800d392:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800d394:	2300      	movs	r3, #0
 800d396:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->ALL_PHYS = ALL_PHYS;
 800d39a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800d39e:	1dfa      	adds	r2, r7, #7
 800d3a0:	7812      	ldrb	r2, [r2, #0]
 800d3a2:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800d3a4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800d3a8:	3301      	adds	r3, #1
 800d3aa:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->TX_PHYS = TX_PHYS;
 800d3ae:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800d3b2:	1dba      	adds	r2, r7, #6
 800d3b4:	7812      	ldrb	r2, [r2, #0]
 800d3b6:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800d3b8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800d3bc:	3301      	adds	r3, #1
 800d3be:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->RX_PHYS = RX_PHYS;
 800d3c2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800d3c6:	1d7a      	adds	r2, r7, #5
 800d3c8:	7812      	ldrb	r2, [r2, #0]
 800d3ca:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800d3cc:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800d3d0:	3301      	adds	r3, #1
 800d3d2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800d3d6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800d3da:	2218      	movs	r2, #24
 800d3dc:	2100      	movs	r1, #0
 800d3de:	4618      	mov	r0, r3
 800d3e0:	f000 f838 	bl	800d454 <Osal_MemSet>
  rq.ogf = 0x08;
 800d3e4:	2308      	movs	r3, #8
 800d3e6:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x031;
 800d3ea:	2331      	movs	r3, #49	; 0x31
 800d3ec:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800d3f0:	f107 0310 	add.w	r3, r7, #16
 800d3f4:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800d3f8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800d3fc:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800d400:	f107 030f 	add.w	r3, r7, #15
 800d404:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800d408:	2301      	movs	r3, #1
 800d40a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800d40e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800d412:	2100      	movs	r1, #0
 800d414:	4618      	mov	r0, r3
 800d416:	f000 f8c5 	bl	800d5a4 <hci_send_req>
 800d41a:	4603      	mov	r3, r0
 800d41c:	2b00      	cmp	r3, #0
 800d41e:	da01      	bge.n	800d424 <hci_le_set_default_phy+0xbe>
    return BLE_STATUS_TIMEOUT;
 800d420:	23ff      	movs	r3, #255	; 0xff
 800d422:	e002      	b.n	800d42a <hci_le_set_default_phy+0xc4>
  return status;
 800d424:	f107 030f 	add.w	r3, r7, #15
 800d428:	781b      	ldrb	r3, [r3, #0]
}
 800d42a:	4618      	mov	r0, r3
 800d42c:	f507 779a 	add.w	r7, r7, #308	; 0x134
 800d430:	46bd      	mov	sp, r7
 800d432:	bd90      	pop	{r4, r7, pc}

0800d434 <Osal_MemCpy>:
 * Osal_MemCpy
 * 
 */
 
void* Osal_MemCpy( void *dest, const void *src, unsigned int size )
{
 800d434:	b580      	push	{r7, lr}
 800d436:	b084      	sub	sp, #16
 800d438:	af00      	add	r7, sp, #0
 800d43a:	60f8      	str	r0, [r7, #12]
 800d43c:	60b9      	str	r1, [r7, #8]
 800d43e:	607a      	str	r2, [r7, #4]
  return memcpy( dest, src, size ); 
 800d440:	687a      	ldr	r2, [r7, #4]
 800d442:	68b9      	ldr	r1, [r7, #8]
 800d444:	68f8      	ldr	r0, [r7, #12]
 800d446:	f005 fdc1 	bl	8012fcc <memcpy>
 800d44a:	4603      	mov	r3, r0
}
 800d44c:	4618      	mov	r0, r3
 800d44e:	3710      	adds	r7, #16
 800d450:	46bd      	mov	sp, r7
 800d452:	bd80      	pop	{r7, pc}

0800d454 <Osal_MemSet>:
 * Osal_MemSet
 * 
 */
 
void* Osal_MemSet( void *ptr, int value, unsigned int size )
{
 800d454:	b580      	push	{r7, lr}
 800d456:	b084      	sub	sp, #16
 800d458:	af00      	add	r7, sp, #0
 800d45a:	60f8      	str	r0, [r7, #12]
 800d45c:	60b9      	str	r1, [r7, #8]
 800d45e:	607a      	str	r2, [r7, #4]
  return memset( ptr, value, size );
 800d460:	687a      	ldr	r2, [r7, #4]
 800d462:	68b9      	ldr	r1, [r7, #8]
 800d464:	68f8      	ldr	r0, [r7, #12]
 800d466:	f005 fdbc 	bl	8012fe2 <memset>
 800d46a:	4603      	mov	r3, r0
}
 800d46c:	4618      	mov	r0, r3
 800d46e:	3710      	adds	r7, #16
 800d470:	46bd      	mov	sp, r7
 800d472:	bd80      	pop	{r7, pc}

0800d474 <SHCI_C2_BLE_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_BLE_Init( SHCI_C2_Ble_Init_Cmd_Packet_t *pCmdPacket )
{
 800d474:	b580      	push	{r7, lr}
 800d476:	b088      	sub	sp, #32
 800d478:	af00      	add	r7, sp, #0
 800d47a:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CS_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 800d47c:	f107 030c 	add.w	r3, r7, #12
 800d480:	61fb      	str	r3, [r7, #28]

 shci_send( SHCI_OPCODE_C2_BLE_INIT,
            sizeof( SHCI_C2_Ble_Init_Cmd_Param_t ),
            (uint8_t*)&pCmdPacket->Param,
 800d482:	687b      	ldr	r3, [r7, #4]
 800d484:	f103 020c 	add.w	r2, r3, #12
 shci_send( SHCI_OPCODE_C2_BLE_INIT,
 800d488:	69fb      	ldr	r3, [r7, #28]
 800d48a:	2121      	movs	r1, #33	; 0x21
 800d48c:	f64f 4066 	movw	r0, #64614	; 0xfc66
 800d490:	f000 fa1e 	bl	800d8d0 <shci_send>
            p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 800d494:	69fb      	ldr	r3, [r7, #28]
 800d496:	330b      	adds	r3, #11
 800d498:	78db      	ldrb	r3, [r3, #3]
}
 800d49a:	4618      	mov	r0, r3
 800d49c:	3720      	adds	r7, #32
 800d49e:	46bd      	mov	sp, r7
 800d4a0:	bd80      	pop	{r7, pc}

0800d4a2 <SHCI_C2_DEBUG_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_DEBUG_Init( SHCI_C2_DEBUG_Init_Cmd_Packet_t *pCmdPacket  )
{
 800d4a2:	b580      	push	{r7, lr}
 800d4a4:	b088      	sub	sp, #32
 800d4a6:	af00      	add	r7, sp, #0
 800d4a8:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CS_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 800d4aa:	f107 030c 	add.w	r3, r7, #12
 800d4ae:	61fb      	str	r3, [r7, #28]

  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
             sizeof( SHCI_C2_DEBUG_init_Cmd_Param_t ),
             (uint8_t*)&pCmdPacket->Param,
 800d4b0:	687b      	ldr	r3, [r7, #4]
 800d4b2:	f103 020c 	add.w	r2, r3, #12
  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
 800d4b6:	69fb      	ldr	r3, [r7, #28]
 800d4b8:	210f      	movs	r1, #15
 800d4ba:	f64f 4068 	movw	r0, #64616	; 0xfc68
 800d4be:	f000 fa07 	bl	800d8d0 <shci_send>
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 800d4c2:	69fb      	ldr	r3, [r7, #28]
 800d4c4:	330b      	adds	r3, #11
 800d4c6:	78db      	ldrb	r3, [r3, #3]
}
 800d4c8:	4618      	mov	r0, r3
 800d4ca:	3720      	adds	r7, #32
 800d4cc:	46bd      	mov	sp, r7
 800d4ce:	bd80      	pop	{r7, pc}

0800d4d0 <hci_init>:
static void TlEvtReceived(TL_EvtPacket_t *hcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void hci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 800d4d0:	b580      	push	{r7, lr}
 800d4d2:	b082      	sub	sp, #8
 800d4d4:	af00      	add	r7, sp, #0
 800d4d6:	6078      	str	r0, [r7, #4]
 800d4d8:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((HCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 800d4da:	683b      	ldr	r3, [r7, #0]
 800d4dc:	685b      	ldr	r3, [r3, #4]
 800d4de:	4a08      	ldr	r2, [pc, #32]	; (800d500 <hci_init+0x30>)
 800d4e0:	6013      	str	r3, [r2, #0]
  hciContext.UserEvtRx = UserEvtRx;
 800d4e2:	4a08      	ldr	r2, [pc, #32]	; (800d504 <hci_init+0x34>)
 800d4e4:	687b      	ldr	r3, [r7, #4]
 800d4e6:	61d3      	str	r3, [r2, #28]

  hci_register_io_bus (&hciContext.io);
 800d4e8:	4806      	ldr	r0, [pc, #24]	; (800d504 <hci_init+0x34>)
 800d4ea:	f000 f973 	bl	800d7d4 <hci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((HCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 800d4ee:	683b      	ldr	r3, [r7, #0]
 800d4f0:	681b      	ldr	r3, [r3, #0]
 800d4f2:	4618      	mov	r0, r3
 800d4f4:	f000 f8d4 	bl	800d6a0 <TlInit>

  return;
 800d4f8:	bf00      	nop
}
 800d4fa:	3708      	adds	r7, #8
 800d4fc:	46bd      	mov	sp, r7
 800d4fe:	bd80      	pop	{r7, pc}
 800d500:	200003e8 	.word	0x200003e8
 800d504:	200003c0 	.word	0x200003c0

0800d508 <hci_user_evt_proc>:

void hci_user_evt_proc(void)
{
 800d508:	b580      	push	{r7, lr}
 800d50a:	b084      	sub	sp, #16
 800d50c:	af00      	add	r7, sp, #0
  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 800d50e:	4822      	ldr	r0, [pc, #136]	; (800d598 <hci_user_evt_proc+0x90>)
 800d510:	f000 ff04 	bl	800e31c <LST_is_empty>
 800d514:	4603      	mov	r3, r0
 800d516:	2b00      	cmp	r3, #0
 800d518:	d12b      	bne.n	800d572 <hci_user_evt_proc+0x6a>
 800d51a:	4b20      	ldr	r3, [pc, #128]	; (800d59c <hci_user_evt_proc+0x94>)
 800d51c:	781b      	ldrb	r3, [r3, #0]
 800d51e:	2b00      	cmp	r3, #0
 800d520:	d027      	beq.n	800d572 <hci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &HciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 800d522:	f107 030c 	add.w	r3, r7, #12
 800d526:	4619      	mov	r1, r3
 800d528:	481b      	ldr	r0, [pc, #108]	; (800d598 <hci_user_evt_proc+0x90>)
 800d52a:	f000 ff7e 	bl	800e42a <LST_remove_head>

    if (hciContext.UserEvtRx != NULL)
 800d52e:	4b1c      	ldr	r3, [pc, #112]	; (800d5a0 <hci_user_evt_proc+0x98>)
 800d530:	69db      	ldr	r3, [r3, #28]
 800d532:	2b00      	cmp	r3, #0
 800d534:	d00c      	beq.n	800d550 <hci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 800d536:	68fb      	ldr	r3, [r7, #12]
 800d538:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = HCI_TL_UserEventFlow_Enable;
 800d53a:	2301      	movs	r3, #1
 800d53c:	713b      	strb	r3, [r7, #4]
      hciContext.UserEvtRx((void *)&UserEvtRxParam);
 800d53e:	4b18      	ldr	r3, [pc, #96]	; (800d5a0 <hci_user_evt_proc+0x98>)
 800d540:	69db      	ldr	r3, [r3, #28]
 800d542:	1d3a      	adds	r2, r7, #4
 800d544:	4610      	mov	r0, r2
 800d546:	4798      	blx	r3
      UserEventFlow = UserEvtRxParam.status;
 800d548:	793a      	ldrb	r2, [r7, #4]
 800d54a:	4b14      	ldr	r3, [pc, #80]	; (800d59c <hci_user_evt_proc+0x94>)
 800d54c:	701a      	strb	r2, [r3, #0]
 800d54e:	e002      	b.n	800d556 <hci_user_evt_proc+0x4e>
    }
    else
    {
      UserEventFlow = HCI_TL_UserEventFlow_Enable;
 800d550:	4b12      	ldr	r3, [pc, #72]	; (800d59c <hci_user_evt_proc+0x94>)
 800d552:	2201      	movs	r2, #1
 800d554:	701a      	strb	r2, [r3, #0]
    }

    if(UserEventFlow != HCI_TL_UserEventFlow_Disable)
 800d556:	4b11      	ldr	r3, [pc, #68]	; (800d59c <hci_user_evt_proc+0x94>)
 800d558:	781b      	ldrb	r3, [r3, #0]
 800d55a:	2b00      	cmp	r3, #0
 800d55c:	d004      	beq.n	800d568 <hci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 800d55e:	68fb      	ldr	r3, [r7, #12]
 800d560:	4618      	mov	r0, r3
 800d562:	f000 fc03 	bl	800dd6c <TL_MM_EvtDone>
 800d566:	e004      	b.n	800d572 <hci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &HciAsynchEventQueue, (tListNode *)phcievtbuffer );
 800d568:	68fb      	ldr	r3, [r7, #12]
 800d56a:	4619      	mov	r1, r3
 800d56c:	480a      	ldr	r0, [pc, #40]	; (800d598 <hci_user_evt_proc+0x90>)
 800d56e:	f000 fef5 	bl	800e35c <LST_insert_head>
    }
  }

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 800d572:	4809      	ldr	r0, [pc, #36]	; (800d598 <hci_user_evt_proc+0x90>)
 800d574:	f000 fed2 	bl	800e31c <LST_is_empty>
 800d578:	4603      	mov	r3, r0
 800d57a:	2b00      	cmp	r3, #0
 800d57c:	d107      	bne.n	800d58e <hci_user_evt_proc+0x86>
 800d57e:	4b07      	ldr	r3, [pc, #28]	; (800d59c <hci_user_evt_proc+0x94>)
 800d580:	781b      	ldrb	r3, [r3, #0]
 800d582:	2b00      	cmp	r3, #0
 800d584:	d003      	beq.n	800d58e <hci_user_evt_proc+0x86>
  {
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue);
 800d586:	4804      	ldr	r0, [pc, #16]	; (800d598 <hci_user_evt_proc+0x90>)
 800d588:	f7f4 f8b4 	bl	80016f4 <hci_notify_asynch_evt>
  }


  return;
 800d58c:	bf00      	nop
 800d58e:	bf00      	nop
}
 800d590:	3710      	adds	r7, #16
 800d592:	46bd      	mov	sp, r7
 800d594:	bd80      	pop	{r7, pc}
 800d596:	bf00      	nop
 800d598:	2000035c 	.word	0x2000035c
 800d59c:	20000368 	.word	0x20000368
 800d5a0:	200003c0 	.word	0x200003c0

0800d5a4 <hci_send_req>:

  return;
}

int hci_send_req(struct hci_request *p_cmd, uint8_t async)
{
 800d5a4:	b580      	push	{r7, lr}
 800d5a6:	b088      	sub	sp, #32
 800d5a8:	af00      	add	r7, sp, #0
 800d5aa:	6078      	str	r0, [r7, #4]
 800d5ac:	460b      	mov	r3, r1
 800d5ae:	70fb      	strb	r3, [r7, #3]
  TL_CsEvt_t    *pcommand_status_event;
  TL_EvtPacket_t *pevtpacket;
  uint8_t hci_cmd_complete_return_parameters_length;
  HCI_TL_CmdStatus_t local_cmd_status;

  NotifyCmdStatus(HCI_TL_CmdBusy);
 800d5b0:	2000      	movs	r0, #0
 800d5b2:	f000 f8cb 	bl	800d74c <NotifyCmdStatus>
  local_cmd_status = HCI_TL_CmdBusy;
 800d5b6:	2300      	movs	r3, #0
 800d5b8:	77fb      	strb	r3, [r7, #31]
  opcode = ((p_cmd->ocf) & 0x03ff) | ((p_cmd->ogf) << 10);
 800d5ba:	687b      	ldr	r3, [r7, #4]
 800d5bc:	885b      	ldrh	r3, [r3, #2]
 800d5be:	b21b      	sxth	r3, r3
 800d5c0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800d5c4:	b21a      	sxth	r2, r3
 800d5c6:	687b      	ldr	r3, [r7, #4]
 800d5c8:	881b      	ldrh	r3, [r3, #0]
 800d5ca:	029b      	lsls	r3, r3, #10
 800d5cc:	b21b      	sxth	r3, r3
 800d5ce:	4313      	orrs	r3, r2
 800d5d0:	b21b      	sxth	r3, r3
 800d5d2:	83bb      	strh	r3, [r7, #28]
  SendCmd(opcode, p_cmd->clen, p_cmd->cparam);
 800d5d4:	687b      	ldr	r3, [r7, #4]
 800d5d6:	68db      	ldr	r3, [r3, #12]
 800d5d8:	b2d9      	uxtb	r1, r3
 800d5da:	687b      	ldr	r3, [r7, #4]
 800d5dc:	689a      	ldr	r2, [r3, #8]
 800d5de:	8bbb      	ldrh	r3, [r7, #28]
 800d5e0:	4618      	mov	r0, r3
 800d5e2:	f000 f88d 	bl	800d700 <SendCmd>

  while(local_cmd_status == HCI_TL_CmdBusy)
 800d5e6:	e04e      	b.n	800d686 <hci_send_req+0xe2>
  {
    hci_cmd_resp_wait(HCI_TL_DEFAULT_TIMEOUT);
 800d5e8:	f248 00e8 	movw	r0, #33000	; 0x80e8
 800d5ec:	f7f4 f8a2 	bl	8001734 <hci_cmd_resp_wait>

    /**
     * Process Cmd Event
     */
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 800d5f0:	e043      	b.n	800d67a <hci_send_req+0xd6>
    {
      LST_remove_head (&HciCmdEventQueue, (tListNode **)&pevtpacket);
 800d5f2:	f107 030c 	add.w	r3, r7, #12
 800d5f6:	4619      	mov	r1, r3
 800d5f8:	4828      	ldr	r0, [pc, #160]	; (800d69c <hci_send_req+0xf8>)
 800d5fa:	f000 ff16 	bl	800e42a <LST_remove_head>

      if(pevtpacket->evtserial.evt.evtcode == TL_BLEEVT_CS_OPCODE)
 800d5fe:	68fb      	ldr	r3, [r7, #12]
 800d600:	7a5b      	ldrb	r3, [r3, #9]
 800d602:	2b0f      	cmp	r3, #15
 800d604:	d114      	bne.n	800d630 <hci_send_req+0x8c>
      {
        pcommand_status_event = (TL_CsEvt_t*)pevtpacket->evtserial.evt.payload;
 800d606:	68fb      	ldr	r3, [r7, #12]
 800d608:	330b      	adds	r3, #11
 800d60a:	613b      	str	r3, [r7, #16]
        if(pcommand_status_event->cmdcode == opcode)
 800d60c:	693b      	ldr	r3, [r7, #16]
 800d60e:	885b      	ldrh	r3, [r3, #2]
 800d610:	b29b      	uxth	r3, r3
 800d612:	8bba      	ldrh	r2, [r7, #28]
 800d614:	429a      	cmp	r2, r3
 800d616:	d104      	bne.n	800d622 <hci_send_req+0x7e>
        {
          *(uint8_t *)(p_cmd->rparam) = pcommand_status_event->status;
 800d618:	687b      	ldr	r3, [r7, #4]
 800d61a:	691b      	ldr	r3, [r3, #16]
 800d61c:	693a      	ldr	r2, [r7, #16]
 800d61e:	7812      	ldrb	r2, [r2, #0]
 800d620:	701a      	strb	r2, [r3, #0]
        }

        if(pcommand_status_event->numcmd != 0)
 800d622:	693b      	ldr	r3, [r7, #16]
 800d624:	785b      	ldrb	r3, [r3, #1]
 800d626:	2b00      	cmp	r3, #0
 800d628:	d027      	beq.n	800d67a <hci_send_req+0xd6>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 800d62a:	2301      	movs	r3, #1
 800d62c:	77fb      	strb	r3, [r7, #31]
 800d62e:	e024      	b.n	800d67a <hci_send_req+0xd6>
        }
      }
      else
      {
        pcommand_complete_event = (TL_CcEvt_t*)pevtpacket->evtserial.evt.payload;
 800d630:	68fb      	ldr	r3, [r7, #12]
 800d632:	330b      	adds	r3, #11
 800d634:	61bb      	str	r3, [r7, #24]

        if(pcommand_complete_event->cmdcode == opcode)
 800d636:	69bb      	ldr	r3, [r7, #24]
 800d638:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800d63c:	b29b      	uxth	r3, r3
 800d63e:	8bba      	ldrh	r2, [r7, #28]
 800d640:	429a      	cmp	r2, r3
 800d642:	d114      	bne.n	800d66e <hci_send_req+0xca>
        {
          hci_cmd_complete_return_parameters_length = pevtpacket->evtserial.evt.plen - TL_EVT_HDR_SIZE;
 800d644:	68fb      	ldr	r3, [r7, #12]
 800d646:	7a9b      	ldrb	r3, [r3, #10]
 800d648:	3b03      	subs	r3, #3
 800d64a:	75fb      	strb	r3, [r7, #23]
          p_cmd->rlen = MIN(hci_cmd_complete_return_parameters_length, p_cmd->rlen);
 800d64c:	687b      	ldr	r3, [r7, #4]
 800d64e:	695a      	ldr	r2, [r3, #20]
 800d650:	7dfb      	ldrb	r3, [r7, #23]
 800d652:	429a      	cmp	r2, r3
 800d654:	bfa8      	it	ge
 800d656:	461a      	movge	r2, r3
 800d658:	687b      	ldr	r3, [r7, #4]
 800d65a:	615a      	str	r2, [r3, #20]
          memcpy(p_cmd->rparam, pcommand_complete_event->payload, p_cmd->rlen);
 800d65c:	687b      	ldr	r3, [r7, #4]
 800d65e:	6918      	ldr	r0, [r3, #16]
 800d660:	69bb      	ldr	r3, [r7, #24]
 800d662:	1cd9      	adds	r1, r3, #3
 800d664:	687b      	ldr	r3, [r7, #4]
 800d666:	695b      	ldr	r3, [r3, #20]
 800d668:	461a      	mov	r2, r3
 800d66a:	f005 fcaf 	bl	8012fcc <memcpy>
        }

        if(pcommand_complete_event->numcmd != 0)
 800d66e:	69bb      	ldr	r3, [r7, #24]
 800d670:	781b      	ldrb	r3, [r3, #0]
 800d672:	2b00      	cmp	r3, #0
 800d674:	d001      	beq.n	800d67a <hci_send_req+0xd6>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 800d676:	2301      	movs	r3, #1
 800d678:	77fb      	strb	r3, [r7, #31]
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 800d67a:	4808      	ldr	r0, [pc, #32]	; (800d69c <hci_send_req+0xf8>)
 800d67c:	f000 fe4e 	bl	800e31c <LST_is_empty>
 800d680:	4603      	mov	r3, r0
 800d682:	2b00      	cmp	r3, #0
 800d684:	d0b5      	beq.n	800d5f2 <hci_send_req+0x4e>
  while(local_cmd_status == HCI_TL_CmdBusy)
 800d686:	7ffb      	ldrb	r3, [r7, #31]
 800d688:	2b00      	cmp	r3, #0
 800d68a:	d0ad      	beq.n	800d5e8 <hci_send_req+0x44>
        }
      }
    }
  }

  NotifyCmdStatus(HCI_TL_CmdAvailable);
 800d68c:	2001      	movs	r0, #1
 800d68e:	f000 f85d 	bl	800d74c <NotifyCmdStatus>

  return 0;
 800d692:	2300      	movs	r3, #0
}
 800d694:	4618      	mov	r0, r3
 800d696:	3720      	adds	r7, #32
 800d698:	46bd      	mov	sp, r7
 800d69a:	bd80      	pop	{r7, pc}
 800d69c:	200003e0 	.word	0x200003e0

0800d6a0 <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 800d6a0:	b580      	push	{r7, lr}
 800d6a2:	b086      	sub	sp, #24
 800d6a4:	af00      	add	r7, sp, #0
 800d6a6:	6078      	str	r0, [r7, #4]
  TL_BLE_InitConf_t Conf;

  /**
   * Always initialize the command event queue
   */
  LST_init_head (&HciCmdEventQueue);
 800d6a8:	480f      	ldr	r0, [pc, #60]	; (800d6e8 <TlInit+0x48>)
 800d6aa:	f000 fe27 	bl	800e2fc <LST_init_head>

  pCmdBuffer = p_cmdbuffer;
 800d6ae:	4a0f      	ldr	r2, [pc, #60]	; (800d6ec <TlInit+0x4c>)
 800d6b0:	687b      	ldr	r3, [r7, #4]
 800d6b2:	6013      	str	r3, [r2, #0]

  LST_init_head (&HciAsynchEventQueue);
 800d6b4:	480e      	ldr	r0, [pc, #56]	; (800d6f0 <TlInit+0x50>)
 800d6b6:	f000 fe21 	bl	800e2fc <LST_init_head>

  UserEventFlow = HCI_TL_UserEventFlow_Enable;
 800d6ba:	4b0e      	ldr	r3, [pc, #56]	; (800d6f4 <TlInit+0x54>)
 800d6bc:	2201      	movs	r2, #1
 800d6be:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (hciContext.io.Init)
 800d6c0:	4b0d      	ldr	r3, [pc, #52]	; (800d6f8 <TlInit+0x58>)
 800d6c2:	681b      	ldr	r3, [r3, #0]
 800d6c4:	2b00      	cmp	r3, #0
 800d6c6:	d00a      	beq.n	800d6de <TlInit+0x3e>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 800d6c8:	687b      	ldr	r3, [r7, #4]
 800d6ca:	613b      	str	r3, [r7, #16]
    Conf.IoBusEvtCallBack = TlEvtReceived;
 800d6cc:	4b0b      	ldr	r3, [pc, #44]	; (800d6fc <TlInit+0x5c>)
 800d6ce:	60bb      	str	r3, [r7, #8]
    hciContext.io.Init(&Conf);
 800d6d0:	4b09      	ldr	r3, [pc, #36]	; (800d6f8 <TlInit+0x58>)
 800d6d2:	681b      	ldr	r3, [r3, #0]
 800d6d4:	f107 0208 	add.w	r2, r7, #8
 800d6d8:	4610      	mov	r0, r2
 800d6da:	4798      	blx	r3
  }

  return;
 800d6dc:	bf00      	nop
 800d6de:	bf00      	nop
}
 800d6e0:	3718      	adds	r7, #24
 800d6e2:	46bd      	mov	sp, r7
 800d6e4:	bd80      	pop	{r7, pc}
 800d6e6:	bf00      	nop
 800d6e8:	200003e0 	.word	0x200003e0
 800d6ec:	20000364 	.word	0x20000364
 800d6f0:	2000035c 	.word	0x2000035c
 800d6f4:	20000368 	.word	0x20000368
 800d6f8:	200003c0 	.word	0x200003c0
 800d6fc:	0800d78d 	.word	0x0800d78d

0800d700 <SendCmd>:

static void SendCmd(uint16_t opcode, uint8_t plen, void *param)
{
 800d700:	b580      	push	{r7, lr}
 800d702:	b082      	sub	sp, #8
 800d704:	af00      	add	r7, sp, #0
 800d706:	4603      	mov	r3, r0
 800d708:	603a      	str	r2, [r7, #0]
 800d70a:	80fb      	strh	r3, [r7, #6]
 800d70c:	460b      	mov	r3, r1
 800d70e:	717b      	strb	r3, [r7, #5]
  pCmdBuffer->cmdserial.cmd.cmdcode = opcode;
 800d710:	4b0c      	ldr	r3, [pc, #48]	; (800d744 <SendCmd+0x44>)
 800d712:	681b      	ldr	r3, [r3, #0]
 800d714:	88fa      	ldrh	r2, [r7, #6]
 800d716:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = plen;
 800d71a:	4b0a      	ldr	r3, [pc, #40]	; (800d744 <SendCmd+0x44>)
 800d71c:	681b      	ldr	r3, [r3, #0]
 800d71e:	797a      	ldrb	r2, [r7, #5]
 800d720:	72da      	strb	r2, [r3, #11]
  memcpy( pCmdBuffer->cmdserial.cmd.payload, param, plen );
 800d722:	4b08      	ldr	r3, [pc, #32]	; (800d744 <SendCmd+0x44>)
 800d724:	681b      	ldr	r3, [r3, #0]
 800d726:	330c      	adds	r3, #12
 800d728:	797a      	ldrb	r2, [r7, #5]
 800d72a:	6839      	ldr	r1, [r7, #0]
 800d72c:	4618      	mov	r0, r3
 800d72e:	f005 fc4d 	bl	8012fcc <memcpy>

  hciContext.io.Send(0,0);
 800d732:	4b05      	ldr	r3, [pc, #20]	; (800d748 <SendCmd+0x48>)
 800d734:	691b      	ldr	r3, [r3, #16]
 800d736:	2100      	movs	r1, #0
 800d738:	2000      	movs	r0, #0
 800d73a:	4798      	blx	r3

  return;
 800d73c:	bf00      	nop
}
 800d73e:	3708      	adds	r7, #8
 800d740:	46bd      	mov	sp, r7
 800d742:	bd80      	pop	{r7, pc}
 800d744:	20000364 	.word	0x20000364
 800d748:	200003c0 	.word	0x200003c0

0800d74c <NotifyCmdStatus>:

static void NotifyCmdStatus(HCI_TL_CmdStatus_t hcicmdstatus)
{
 800d74c:	b580      	push	{r7, lr}
 800d74e:	b082      	sub	sp, #8
 800d750:	af00      	add	r7, sp, #0
 800d752:	4603      	mov	r3, r0
 800d754:	71fb      	strb	r3, [r7, #7]
  if(hcicmdstatus == HCI_TL_CmdBusy)
 800d756:	79fb      	ldrb	r3, [r7, #7]
 800d758:	2b00      	cmp	r3, #0
 800d75a:	d108      	bne.n	800d76e <NotifyCmdStatus+0x22>
  {
    if(StatusNotCallBackFunction != 0)
 800d75c:	4b0a      	ldr	r3, [pc, #40]	; (800d788 <NotifyCmdStatus+0x3c>)
 800d75e:	681b      	ldr	r3, [r3, #0]
 800d760:	2b00      	cmp	r3, #0
 800d762:	d00d      	beq.n	800d780 <NotifyCmdStatus+0x34>
    {
      StatusNotCallBackFunction(HCI_TL_CmdBusy);
 800d764:	4b08      	ldr	r3, [pc, #32]	; (800d788 <NotifyCmdStatus+0x3c>)
 800d766:	681b      	ldr	r3, [r3, #0]
 800d768:	2000      	movs	r0, #0
 800d76a:	4798      	blx	r3
    {
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
    }
  }

  return;
 800d76c:	e008      	b.n	800d780 <NotifyCmdStatus+0x34>
    if(StatusNotCallBackFunction != 0)
 800d76e:	4b06      	ldr	r3, [pc, #24]	; (800d788 <NotifyCmdStatus+0x3c>)
 800d770:	681b      	ldr	r3, [r3, #0]
 800d772:	2b00      	cmp	r3, #0
 800d774:	d004      	beq.n	800d780 <NotifyCmdStatus+0x34>
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
 800d776:	4b04      	ldr	r3, [pc, #16]	; (800d788 <NotifyCmdStatus+0x3c>)
 800d778:	681b      	ldr	r3, [r3, #0]
 800d77a:	2001      	movs	r0, #1
 800d77c:	4798      	blx	r3
  return;
 800d77e:	bf00      	nop
 800d780:	bf00      	nop
}
 800d782:	3708      	adds	r7, #8
 800d784:	46bd      	mov	sp, r7
 800d786:	bd80      	pop	{r7, pc}
 800d788:	200003e8 	.word	0x200003e8

0800d78c <TlEvtReceived>:

static void TlEvtReceived(TL_EvtPacket_t *hcievt)
{
 800d78c:	b580      	push	{r7, lr}
 800d78e:	b082      	sub	sp, #8
 800d790:	af00      	add	r7, sp, #0
 800d792:	6078      	str	r0, [r7, #4]
  if ( ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 800d794:	687b      	ldr	r3, [r7, #4]
 800d796:	7a5b      	ldrb	r3, [r3, #9]
 800d798:	2b0f      	cmp	r3, #15
 800d79a:	d003      	beq.n	800d7a4 <TlEvtReceived+0x18>
 800d79c:	687b      	ldr	r3, [r7, #4]
 800d79e:	7a5b      	ldrb	r3, [r3, #9]
 800d7a0:	2b0e      	cmp	r3, #14
 800d7a2:	d107      	bne.n	800d7b4 <TlEvtReceived+0x28>
  {
    LST_insert_tail(&HciCmdEventQueue, (tListNode *)hcievt);
 800d7a4:	6879      	ldr	r1, [r7, #4]
 800d7a6:	4809      	ldr	r0, [pc, #36]	; (800d7cc <TlEvtReceived+0x40>)
 800d7a8:	f000 fdfc 	bl	800e3a4 <LST_insert_tail>
    hci_cmd_resp_release(0); /**< Notify the application a full Cmd Event has been received */
 800d7ac:	2000      	movs	r0, #0
 800d7ae:	f7f3 ffb1 	bl	8001714 <hci_cmd_resp_release>
 800d7b2:	e006      	b.n	800d7c2 <TlEvtReceived+0x36>
  }
  else
  {
    LST_insert_tail(&HciAsynchEventQueue, (tListNode *)hcievt);
 800d7b4:	6879      	ldr	r1, [r7, #4]
 800d7b6:	4806      	ldr	r0, [pc, #24]	; (800d7d0 <TlEvtReceived+0x44>)
 800d7b8:	f000 fdf4 	bl	800e3a4 <LST_insert_tail>
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 800d7bc:	4804      	ldr	r0, [pc, #16]	; (800d7d0 <TlEvtReceived+0x44>)
 800d7be:	f7f3 ff99 	bl	80016f4 <hci_notify_asynch_evt>
  }

  return;
 800d7c2:	bf00      	nop
}
 800d7c4:	3708      	adds	r7, #8
 800d7c6:	46bd      	mov	sp, r7
 800d7c8:	bd80      	pop	{r7, pc}
 800d7ca:	bf00      	nop
 800d7cc:	200003e0 	.word	0x200003e0
 800d7d0:	2000035c 	.word	0x2000035c

0800d7d4 <hci_register_io_bus>:
#include "hci_tl.h"
#include "tl.h"


void hci_register_io_bus(tHciIO* fops)
{
 800d7d4:	b480      	push	{r7}
 800d7d6:	b083      	sub	sp, #12
 800d7d8:	af00      	add	r7, sp, #0
 800d7da:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_BLE_Init;
 800d7dc:	687b      	ldr	r3, [r7, #4]
 800d7de:	4a05      	ldr	r2, [pc, #20]	; (800d7f4 <hci_register_io_bus+0x20>)
 800d7e0:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_BLE_SendCmd;
 800d7e2:	687b      	ldr	r3, [r7, #4]
 800d7e4:	4a04      	ldr	r2, [pc, #16]	; (800d7f8 <hci_register_io_bus+0x24>)
 800d7e6:	611a      	str	r2, [r3, #16]

  return;
 800d7e8:	bf00      	nop
}
 800d7ea:	370c      	adds	r7, #12
 800d7ec:	46bd      	mov	sp, r7
 800d7ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7f2:	4770      	bx	lr
 800d7f4:	0800dae5 	.word	0x0800dae5
 800d7f8:	0800db4d 	.word	0x0800db4d

0800d7fc <shci_init>:
static void TlUserEvtReceived(TL_EvtPacket_t *shcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void shci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 800d7fc:	b580      	push	{r7, lr}
 800d7fe:	b082      	sub	sp, #8
 800d800:	af00      	add	r7, sp, #0
 800d802:	6078      	str	r0, [r7, #4]
 800d804:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((SHCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 800d806:	683b      	ldr	r3, [r7, #0]
 800d808:	685b      	ldr	r3, [r3, #4]
 800d80a:	4a08      	ldr	r2, [pc, #32]	; (800d82c <shci_init+0x30>)
 800d80c:	6013      	str	r3, [r2, #0]
  shciContext.UserEvtRx = UserEvtRx;
 800d80e:	4a08      	ldr	r2, [pc, #32]	; (800d830 <shci_init+0x34>)
 800d810:	687b      	ldr	r3, [r7, #4]
 800d812:	61d3      	str	r3, [r2, #28]

  shci_register_io_bus (&shciContext.io);
 800d814:	4806      	ldr	r0, [pc, #24]	; (800d830 <shci_init+0x34>)
 800d816:	f000 f911 	bl	800da3c <shci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((SHCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 800d81a:	683b      	ldr	r3, [r7, #0]
 800d81c:	681b      	ldr	r3, [r3, #0]
 800d81e:	4618      	mov	r0, r3
 800d820:	f000 f894 	bl	800d94c <TlInit>

  return;
 800d824:	bf00      	nop
}
 800d826:	3708      	adds	r7, #8
 800d828:	46bd      	mov	sp, r7
 800d82a:	bd80      	pop	{r7, pc}
 800d82c:	2000040c 	.word	0x2000040c
 800d830:	200003ec 	.word	0x200003ec

0800d834 <shci_user_evt_proc>:

void shci_user_evt_proc(void)
{
 800d834:	b580      	push	{r7, lr}
 800d836:	b084      	sub	sp, #16
 800d838:	af00      	add	r7, sp, #0

  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */
  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 800d83a:	4822      	ldr	r0, [pc, #136]	; (800d8c4 <shci_user_evt_proc+0x90>)
 800d83c:	f000 fd6e 	bl	800e31c <LST_is_empty>
 800d840:	4603      	mov	r3, r0
 800d842:	2b00      	cmp	r3, #0
 800d844:	d12b      	bne.n	800d89e <shci_user_evt_proc+0x6a>
 800d846:	4b20      	ldr	r3, [pc, #128]	; (800d8c8 <shci_user_evt_proc+0x94>)
 800d848:	781b      	ldrb	r3, [r3, #0]
 800d84a:	2b00      	cmp	r3, #0
 800d84c:	d027      	beq.n	800d89e <shci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &SHciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 800d84e:	f107 030c 	add.w	r3, r7, #12
 800d852:	4619      	mov	r1, r3
 800d854:	481b      	ldr	r0, [pc, #108]	; (800d8c4 <shci_user_evt_proc+0x90>)
 800d856:	f000 fde8 	bl	800e42a <LST_remove_head>

    if (shciContext.UserEvtRx != NULL)
 800d85a:	4b1c      	ldr	r3, [pc, #112]	; (800d8cc <shci_user_evt_proc+0x98>)
 800d85c:	69db      	ldr	r3, [r3, #28]
 800d85e:	2b00      	cmp	r3, #0
 800d860:	d00c      	beq.n	800d87c <shci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 800d862:	68fb      	ldr	r3, [r7, #12]
 800d864:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = SHCI_TL_UserEventFlow_Enable;
 800d866:	2301      	movs	r3, #1
 800d868:	713b      	strb	r3, [r7, #4]
      shciContext.UserEvtRx((void *)&UserEvtRxParam);
 800d86a:	4b18      	ldr	r3, [pc, #96]	; (800d8cc <shci_user_evt_proc+0x98>)
 800d86c:	69db      	ldr	r3, [r3, #28]
 800d86e:	1d3a      	adds	r2, r7, #4
 800d870:	4610      	mov	r0, r2
 800d872:	4798      	blx	r3
      SHCI_TL_UserEventFlow = UserEvtRxParam.status;
 800d874:	793a      	ldrb	r2, [r7, #4]
 800d876:	4b14      	ldr	r3, [pc, #80]	; (800d8c8 <shci_user_evt_proc+0x94>)
 800d878:	701a      	strb	r2, [r3, #0]
 800d87a:	e002      	b.n	800d882 <shci_user_evt_proc+0x4e>
    }
    else
    {
      SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 800d87c:	4b12      	ldr	r3, [pc, #72]	; (800d8c8 <shci_user_evt_proc+0x94>)
 800d87e:	2201      	movs	r2, #1
 800d880:	701a      	strb	r2, [r3, #0]
    }

    if(SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable)
 800d882:	4b11      	ldr	r3, [pc, #68]	; (800d8c8 <shci_user_evt_proc+0x94>)
 800d884:	781b      	ldrb	r3, [r3, #0]
 800d886:	2b00      	cmp	r3, #0
 800d888:	d004      	beq.n	800d894 <shci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 800d88a:	68fb      	ldr	r3, [r7, #12]
 800d88c:	4618      	mov	r0, r3
 800d88e:	f000 fa6d 	bl	800dd6c <TL_MM_EvtDone>
 800d892:	e004      	b.n	800d89e <shci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &SHciAsynchEventQueue, (tListNode *)phcievtbuffer );
 800d894:	68fb      	ldr	r3, [r7, #12]
 800d896:	4619      	mov	r1, r3
 800d898:	480a      	ldr	r0, [pc, #40]	; (800d8c4 <shci_user_evt_proc+0x90>)
 800d89a:	f000 fd5f 	bl	800e35c <LST_insert_head>
    }
  }

  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 800d89e:	4809      	ldr	r0, [pc, #36]	; (800d8c4 <shci_user_evt_proc+0x90>)
 800d8a0:	f000 fd3c 	bl	800e31c <LST_is_empty>
 800d8a4:	4603      	mov	r3, r0
 800d8a6:	2b00      	cmp	r3, #0
 800d8a8:	d107      	bne.n	800d8ba <shci_user_evt_proc+0x86>
 800d8aa:	4b07      	ldr	r3, [pc, #28]	; (800d8c8 <shci_user_evt_proc+0x94>)
 800d8ac:	781b      	ldrb	r3, [r3, #0]
 800d8ae:	2b00      	cmp	r3, #0
 800d8b0:	d003      	beq.n	800d8ba <shci_user_evt_proc+0x86>
  {
    shci_notify_asynch_evt((void*) &SHciAsynchEventQueue);
 800d8b2:	4804      	ldr	r0, [pc, #16]	; (800d8c4 <shci_user_evt_proc+0x90>)
 800d8b4:	f7f4 fe2a 	bl	800250c <shci_notify_asynch_evt>
  }


  return;
 800d8b8:	bf00      	nop
 800d8ba:	bf00      	nop
}
 800d8bc:	3710      	adds	r7, #16
 800d8be:	46bd      	mov	sp, r7
 800d8c0:	bd80      	pop	{r7, pc}
 800d8c2:	bf00      	nop
 800d8c4:	20000374 	.word	0x20000374
 800d8c8:	20000384 	.word	0x20000384
 800d8cc:	200003ec 	.word	0x200003ec

0800d8d0 <shci_send>:

  return;
}

void shci_send( uint16_t cmd_code, uint8_t len_cmd_payload, uint8_t * p_cmd_payload, TL_EvtPacket_t * p_rsp )
{
 800d8d0:	b580      	push	{r7, lr}
 800d8d2:	b084      	sub	sp, #16
 800d8d4:	af00      	add	r7, sp, #0
 800d8d6:	60ba      	str	r2, [r7, #8]
 800d8d8:	607b      	str	r3, [r7, #4]
 800d8da:	4603      	mov	r3, r0
 800d8dc:	81fb      	strh	r3, [r7, #14]
 800d8de:	460b      	mov	r3, r1
 800d8e0:	737b      	strb	r3, [r7, #13]
  Cmd_SetStatus(SHCI_TL_CmdBusy);
 800d8e2:	2000      	movs	r0, #0
 800d8e4:	f000 f864 	bl	800d9b0 <Cmd_SetStatus>

  pCmdBuffer->cmdserial.cmd.cmdcode = cmd_code;
 800d8e8:	4b16      	ldr	r3, [pc, #88]	; (800d944 <shci_send+0x74>)
 800d8ea:	681b      	ldr	r3, [r3, #0]
 800d8ec:	89fa      	ldrh	r2, [r7, #14]
 800d8ee:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = len_cmd_payload;
 800d8f2:	4b14      	ldr	r3, [pc, #80]	; (800d944 <shci_send+0x74>)
 800d8f4:	681b      	ldr	r3, [r3, #0]
 800d8f6:	7b7a      	ldrb	r2, [r7, #13]
 800d8f8:	72da      	strb	r2, [r3, #11]

  memcpy(pCmdBuffer->cmdserial.cmd.payload, p_cmd_payload, len_cmd_payload );
 800d8fa:	4b12      	ldr	r3, [pc, #72]	; (800d944 <shci_send+0x74>)
 800d8fc:	681b      	ldr	r3, [r3, #0]
 800d8fe:	330c      	adds	r3, #12
 800d900:	7b7a      	ldrb	r2, [r7, #13]
 800d902:	68b9      	ldr	r1, [r7, #8]
 800d904:	4618      	mov	r0, r3
 800d906:	f005 fb61 	bl	8012fcc <memcpy>

  shciContext.io.Send(0,0);
 800d90a:	4b0f      	ldr	r3, [pc, #60]	; (800d948 <shci_send+0x78>)
 800d90c:	691b      	ldr	r3, [r3, #16]
 800d90e:	2100      	movs	r1, #0
 800d910:	2000      	movs	r0, #0
 800d912:	4798      	blx	r3

  shci_cmd_resp_wait(SHCI_TL_DEFAULT_TIMEOUT);
 800d914:	f248 00e8 	movw	r0, #33000	; 0x80e8
 800d918:	f7f4 fe18 	bl	800254c <shci_cmd_resp_wait>

  /**
   * The command complete of a system command does not have the header
   * It starts immediately with the evtserial field
   */
  memcpy( &(p_rsp->evtserial), pCmdBuffer, ((TL_EvtSerial_t*)pCmdBuffer)->evt.plen + TL_EVT_HDR_SIZE );
 800d91c:	687b      	ldr	r3, [r7, #4]
 800d91e:	f103 0008 	add.w	r0, r3, #8
 800d922:	4b08      	ldr	r3, [pc, #32]	; (800d944 <shci_send+0x74>)
 800d924:	6819      	ldr	r1, [r3, #0]
 800d926:	4b07      	ldr	r3, [pc, #28]	; (800d944 <shci_send+0x74>)
 800d928:	681b      	ldr	r3, [r3, #0]
 800d92a:	789b      	ldrb	r3, [r3, #2]
 800d92c:	3303      	adds	r3, #3
 800d92e:	461a      	mov	r2, r3
 800d930:	f005 fb4c 	bl	8012fcc <memcpy>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 800d934:	2001      	movs	r0, #1
 800d936:	f000 f83b 	bl	800d9b0 <Cmd_SetStatus>

  return;
 800d93a:	bf00      	nop
}
 800d93c:	3710      	adds	r7, #16
 800d93e:	46bd      	mov	sp, r7
 800d940:	bd80      	pop	{r7, pc}
 800d942:	bf00      	nop
 800d944:	20000380 	.word	0x20000380
 800d948:	200003ec 	.word	0x200003ec

0800d94c <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 800d94c:	b580      	push	{r7, lr}
 800d94e:	b086      	sub	sp, #24
 800d950:	af00      	add	r7, sp, #0
 800d952:	6078      	str	r0, [r7, #4]
  TL_SYS_InitConf_t Conf;

  pCmdBuffer = p_cmdbuffer;
 800d954:	4a10      	ldr	r2, [pc, #64]	; (800d998 <TlInit+0x4c>)
 800d956:	687b      	ldr	r3, [r7, #4]
 800d958:	6013      	str	r3, [r2, #0]

  LST_init_head (&SHciAsynchEventQueue);
 800d95a:	4810      	ldr	r0, [pc, #64]	; (800d99c <TlInit+0x50>)
 800d95c:	f000 fcce 	bl	800e2fc <LST_init_head>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 800d960:	2001      	movs	r0, #1
 800d962:	f000 f825 	bl	800d9b0 <Cmd_SetStatus>

  SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 800d966:	4b0e      	ldr	r3, [pc, #56]	; (800d9a0 <TlInit+0x54>)
 800d968:	2201      	movs	r2, #1
 800d96a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (shciContext.io.Init)
 800d96c:	4b0d      	ldr	r3, [pc, #52]	; (800d9a4 <TlInit+0x58>)
 800d96e:	681b      	ldr	r3, [r3, #0]
 800d970:	2b00      	cmp	r3, #0
 800d972:	d00c      	beq.n	800d98e <TlInit+0x42>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 800d974:	687b      	ldr	r3, [r7, #4]
 800d976:	617b      	str	r3, [r7, #20]
    Conf.IoBusCallBackCmdEvt = TlCmdEvtReceived;
 800d978:	4b0b      	ldr	r3, [pc, #44]	; (800d9a8 <TlInit+0x5c>)
 800d97a:	60fb      	str	r3, [r7, #12]
    Conf.IoBusCallBackUserEvt = TlUserEvtReceived;
 800d97c:	4b0b      	ldr	r3, [pc, #44]	; (800d9ac <TlInit+0x60>)
 800d97e:	613b      	str	r3, [r7, #16]
    shciContext.io.Init(&Conf);
 800d980:	4b08      	ldr	r3, [pc, #32]	; (800d9a4 <TlInit+0x58>)
 800d982:	681b      	ldr	r3, [r3, #0]
 800d984:	f107 020c 	add.w	r2, r7, #12
 800d988:	4610      	mov	r0, r2
 800d98a:	4798      	blx	r3
  }

  return;
 800d98c:	bf00      	nop
 800d98e:	bf00      	nop
}
 800d990:	3718      	adds	r7, #24
 800d992:	46bd      	mov	sp, r7
 800d994:	bd80      	pop	{r7, pc}
 800d996:	bf00      	nop
 800d998:	20000380 	.word	0x20000380
 800d99c:	20000374 	.word	0x20000374
 800d9a0:	20000384 	.word	0x20000384
 800d9a4:	200003ec 	.word	0x200003ec
 800d9a8:	0800da01 	.word	0x0800da01
 800d9ac:	0800da19 	.word	0x0800da19

0800d9b0 <Cmd_SetStatus>:

static void Cmd_SetStatus(SHCI_TL_CmdStatus_t shcicmdstatus)
{
 800d9b0:	b580      	push	{r7, lr}
 800d9b2:	b082      	sub	sp, #8
 800d9b4:	af00      	add	r7, sp, #0
 800d9b6:	4603      	mov	r3, r0
 800d9b8:	71fb      	strb	r3, [r7, #7]
  if(shcicmdstatus == SHCI_TL_CmdBusy)
 800d9ba:	79fb      	ldrb	r3, [r7, #7]
 800d9bc:	2b00      	cmp	r3, #0
 800d9be:	d10b      	bne.n	800d9d8 <Cmd_SetStatus+0x28>
  {
    if(StatusNotCallBackFunction != 0)
 800d9c0:	4b0d      	ldr	r3, [pc, #52]	; (800d9f8 <Cmd_SetStatus+0x48>)
 800d9c2:	681b      	ldr	r3, [r3, #0]
 800d9c4:	2b00      	cmp	r3, #0
 800d9c6:	d003      	beq.n	800d9d0 <Cmd_SetStatus+0x20>
    {
      StatusNotCallBackFunction( SHCI_TL_CmdBusy );
 800d9c8:	4b0b      	ldr	r3, [pc, #44]	; (800d9f8 <Cmd_SetStatus+0x48>)
 800d9ca:	681b      	ldr	r3, [r3, #0]
 800d9cc:	2000      	movs	r0, #0
 800d9ce:	4798      	blx	r3
    }
    SHCICmdStatus = SHCI_TL_CmdBusy;
 800d9d0:	4b0a      	ldr	r3, [pc, #40]	; (800d9fc <Cmd_SetStatus+0x4c>)
 800d9d2:	2200      	movs	r2, #0
 800d9d4:	701a      	strb	r2, [r3, #0]
    {
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
    }
  }

  return;
 800d9d6:	e00b      	b.n	800d9f0 <Cmd_SetStatus+0x40>
    SHCICmdStatus = SHCI_TL_CmdAvailable;
 800d9d8:	4b08      	ldr	r3, [pc, #32]	; (800d9fc <Cmd_SetStatus+0x4c>)
 800d9da:	2201      	movs	r2, #1
 800d9dc:	701a      	strb	r2, [r3, #0]
    if(StatusNotCallBackFunction != 0)
 800d9de:	4b06      	ldr	r3, [pc, #24]	; (800d9f8 <Cmd_SetStatus+0x48>)
 800d9e0:	681b      	ldr	r3, [r3, #0]
 800d9e2:	2b00      	cmp	r3, #0
 800d9e4:	d004      	beq.n	800d9f0 <Cmd_SetStatus+0x40>
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
 800d9e6:	4b04      	ldr	r3, [pc, #16]	; (800d9f8 <Cmd_SetStatus+0x48>)
 800d9e8:	681b      	ldr	r3, [r3, #0]
 800d9ea:	2001      	movs	r0, #1
 800d9ec:	4798      	blx	r3
  return;
 800d9ee:	bf00      	nop
 800d9f0:	bf00      	nop
}
 800d9f2:	3708      	adds	r7, #8
 800d9f4:	46bd      	mov	sp, r7
 800d9f6:	bd80      	pop	{r7, pc}
 800d9f8:	2000040c 	.word	0x2000040c
 800d9fc:	2000037c 	.word	0x2000037c

0800da00 <TlCmdEvtReceived>:

static void TlCmdEvtReceived(TL_EvtPacket_t *shcievt)
{
 800da00:	b580      	push	{r7, lr}
 800da02:	b082      	sub	sp, #8
 800da04:	af00      	add	r7, sp, #0
 800da06:	6078      	str	r0, [r7, #4]
  (void)(shcievt);
  shci_cmd_resp_release(0); /**< Notify the application the Cmd response has been received */
 800da08:	2000      	movs	r0, #0
 800da0a:	f7f4 fd8f 	bl	800252c <shci_cmd_resp_release>

  return;
 800da0e:	bf00      	nop
}
 800da10:	3708      	adds	r7, #8
 800da12:	46bd      	mov	sp, r7
 800da14:	bd80      	pop	{r7, pc}
	...

0800da18 <TlUserEvtReceived>:

static void TlUserEvtReceived(TL_EvtPacket_t *shcievt)
{
 800da18:	b580      	push	{r7, lr}
 800da1a:	b082      	sub	sp, #8
 800da1c:	af00      	add	r7, sp, #0
 800da1e:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&SHciAsynchEventQueue, (tListNode *)shcievt);
 800da20:	6879      	ldr	r1, [r7, #4]
 800da22:	4805      	ldr	r0, [pc, #20]	; (800da38 <TlUserEvtReceived+0x20>)
 800da24:	f000 fcbe 	bl	800e3a4 <LST_insert_tail>
  shci_notify_asynch_evt((void*) &SHciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 800da28:	4803      	ldr	r0, [pc, #12]	; (800da38 <TlUserEvtReceived+0x20>)
 800da2a:	f7f4 fd6f 	bl	800250c <shci_notify_asynch_evt>

  return;
 800da2e:	bf00      	nop
}
 800da30:	3708      	adds	r7, #8
 800da32:	46bd      	mov	sp, r7
 800da34:	bd80      	pop	{r7, pc}
 800da36:	bf00      	nop
 800da38:	20000374 	.word	0x20000374

0800da3c <shci_register_io_bus>:
#include "shci_tl.h"
#include "tl.h"


void shci_register_io_bus(tSHciIO* fops)
{
 800da3c:	b480      	push	{r7}
 800da3e:	b083      	sub	sp, #12
 800da40:	af00      	add	r7, sp, #0
 800da42:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_SYS_Init;
 800da44:	687b      	ldr	r3, [r7, #4]
 800da46:	4a05      	ldr	r2, [pc, #20]	; (800da5c <shci_register_io_bus+0x20>)
 800da48:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_SYS_SendCmd;
 800da4a:	687b      	ldr	r3, [r7, #4]
 800da4c:	4a04      	ldr	r2, [pc, #16]	; (800da60 <shci_register_io_bus+0x24>)
 800da4e:	611a      	str	r2, [r3, #16]

  return;
 800da50:	bf00      	nop
}
 800da52:	370c      	adds	r7, #12
 800da54:	46bd      	mov	sp, r7
 800da56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da5a:	4770      	bx	lr
 800da5c:	0800dbf9 	.word	0x0800dbf9
 800da60:	0800dc4d 	.word	0x0800dc4d

0800da64 <TL_Enable>:

/******************************************************************************
 * GENERAL
 ******************************************************************************/
void TL_Enable( void )
{
 800da64:	b580      	push	{r7, lr}
 800da66:	af00      	add	r7, sp, #0
  HW_IPCC_Enable();
 800da68:	f7f4 fa26 	bl	8001eb8 <HW_IPCC_Enable>

  return;
 800da6c:	bf00      	nop
}
 800da6e:	bd80      	pop	{r7, pc}

0800da70 <TL_Init>:


void TL_Init( void )
{
 800da70:	b580      	push	{r7, lr}
 800da72:	af00      	add	r7, sp, #0
  TL_RefTable.p_device_info_table = &TL_DeviceInfoTable;
 800da74:	4b10      	ldr	r3, [pc, #64]	; (800dab8 <TL_Init+0x48>)
 800da76:	4a11      	ldr	r2, [pc, #68]	; (800dabc <TL_Init+0x4c>)
 800da78:	601a      	str	r2, [r3, #0]
  TL_RefTable.p_ble_table = &TL_BleTable;
 800da7a:	4b0f      	ldr	r3, [pc, #60]	; (800dab8 <TL_Init+0x48>)
 800da7c:	4a10      	ldr	r2, [pc, #64]	; (800dac0 <TL_Init+0x50>)
 800da7e:	605a      	str	r2, [r3, #4]
  TL_RefTable.p_thread_table = &TL_ThreadTable;
 800da80:	4b0d      	ldr	r3, [pc, #52]	; (800dab8 <TL_Init+0x48>)
 800da82:	4a10      	ldr	r2, [pc, #64]	; (800dac4 <TL_Init+0x54>)
 800da84:	609a      	str	r2, [r3, #8]
  TL_RefTable.p_lld_tests_table = &TL_LldTestsTable;
 800da86:	4b0c      	ldr	r3, [pc, #48]	; (800dab8 <TL_Init+0x48>)
 800da88:	4a0f      	ldr	r2, [pc, #60]	; (800dac8 <TL_Init+0x58>)
 800da8a:	621a      	str	r2, [r3, #32]
  TL_RefTable.p_lld_ble_table = &TL_LldBleTable;
 800da8c:	4b0a      	ldr	r3, [pc, #40]	; (800dab8 <TL_Init+0x48>)
 800da8e:	4a0f      	ldr	r2, [pc, #60]	; (800dacc <TL_Init+0x5c>)
 800da90:	625a      	str	r2, [r3, #36]	; 0x24
  TL_RefTable.p_sys_table = &TL_SysTable;
 800da92:	4b09      	ldr	r3, [pc, #36]	; (800dab8 <TL_Init+0x48>)
 800da94:	4a0e      	ldr	r2, [pc, #56]	; (800dad0 <TL_Init+0x60>)
 800da96:	60da      	str	r2, [r3, #12]
  TL_RefTable.p_mem_manager_table = &TL_MemManagerTable;
 800da98:	4b07      	ldr	r3, [pc, #28]	; (800dab8 <TL_Init+0x48>)
 800da9a:	4a0e      	ldr	r2, [pc, #56]	; (800dad4 <TL_Init+0x64>)
 800da9c:	611a      	str	r2, [r3, #16]
  TL_RefTable.p_traces_table = &TL_TracesTable;
 800da9e:	4b06      	ldr	r3, [pc, #24]	; (800dab8 <TL_Init+0x48>)
 800daa0:	4a0d      	ldr	r2, [pc, #52]	; (800dad8 <TL_Init+0x68>)
 800daa2:	615a      	str	r2, [r3, #20]
  TL_RefTable.p_mac_802_15_4_table = &TL_Mac_802_15_4_Table;
 800daa4:	4b04      	ldr	r3, [pc, #16]	; (800dab8 <TL_Init+0x48>)
 800daa6:	4a0d      	ldr	r2, [pc, #52]	; (800dadc <TL_Init+0x6c>)
 800daa8:	619a      	str	r2, [r3, #24]
  TL_RefTable.p_zigbee_table = &TL_Zigbee_Table;
 800daaa:	4b03      	ldr	r3, [pc, #12]	; (800dab8 <TL_Init+0x48>)
 800daac:	4a0c      	ldr	r2, [pc, #48]	; (800dae0 <TL_Init+0x70>)
 800daae:	61da      	str	r2, [r3, #28]
  HW_IPCC_Init();
 800dab0:	f7f4 fa16 	bl	8001ee0 <HW_IPCC_Init>

  return;
 800dab4:	bf00      	nop
}
 800dab6:	bd80      	pop	{r7, pc}
 800dab8:	20030000 	.word	0x20030000
 800dabc:	20030134 	.word	0x20030134
 800dac0:	20030154 	.word	0x20030154
 800dac4:	20030164 	.word	0x20030164
 800dac8:	20030170 	.word	0x20030170
 800dacc:	20030178 	.word	0x20030178
 800dad0:	20030180 	.word	0x20030180
 800dad4:	20030188 	.word	0x20030188
 800dad8:	200301a4 	.word	0x200301a4
 800dadc:	200301a8 	.word	0x200301a8
 800dae0:	200301b4 	.word	0x200301b4

0800dae4 <TL_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
int32_t TL_BLE_Init( void* pConf )
{
 800dae4:	b580      	push	{r7, lr}
 800dae6:	b084      	sub	sp, #16
 800dae8:	af00      	add	r7, sp, #0
 800daea:	6078      	str	r0, [r7, #4]
  MB_BleTable_t  * p_bletable;

  TL_BLE_InitConf_t *pInitHciConf = (TL_BLE_InitConf_t *) pConf;
 800daec:	687b      	ldr	r3, [r7, #4]
 800daee:	60fb      	str	r3, [r7, #12]

  LST_init_head (&EvtQueue);
 800daf0:	4811      	ldr	r0, [pc, #68]	; (800db38 <TL_BLE_Init+0x54>)
 800daf2:	f000 fc03 	bl	800e2fc <LST_init_head>

  p_bletable = TL_RefTable.p_ble_table;
 800daf6:	4b11      	ldr	r3, [pc, #68]	; (800db3c <TL_BLE_Init+0x58>)
 800daf8:	685b      	ldr	r3, [r3, #4]
 800dafa:	60bb      	str	r3, [r7, #8]

  p_bletable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 800dafc:	68fb      	ldr	r3, [r7, #12]
 800dafe:	689a      	ldr	r2, [r3, #8]
 800db00:	68bb      	ldr	r3, [r7, #8]
 800db02:	601a      	str	r2, [r3, #0]
  p_bletable->phci_acl_data_buffer = pInitHciConf->p_AclDataBuffer;
 800db04:	68fb      	ldr	r3, [r7, #12]
 800db06:	68da      	ldr	r2, [r3, #12]
 800db08:	68bb      	ldr	r3, [r7, #8]
 800db0a:	60da      	str	r2, [r3, #12]
  p_bletable->pcs_buffer  = (uint8_t*)CsBuffer;
 800db0c:	68bb      	ldr	r3, [r7, #8]
 800db0e:	4a0c      	ldr	r2, [pc, #48]	; (800db40 <TL_BLE_Init+0x5c>)
 800db10:	605a      	str	r2, [r3, #4]
  p_bletable->pevt_queue  = (uint8_t*)&EvtQueue;
 800db12:	68bb      	ldr	r3, [r7, #8]
 800db14:	4a08      	ldr	r2, [pc, #32]	; (800db38 <TL_BLE_Init+0x54>)
 800db16:	609a      	str	r2, [r3, #8]

  HW_IPCC_BLE_Init();
 800db18:	f7f4 f9f8 	bl	8001f0c <HW_IPCC_BLE_Init>

  BLE_IoBusEvtCallBackFunction = pInitHciConf->IoBusEvtCallBack;
 800db1c:	68fb      	ldr	r3, [r7, #12]
 800db1e:	681b      	ldr	r3, [r3, #0]
 800db20:	4a08      	ldr	r2, [pc, #32]	; (800db44 <TL_BLE_Init+0x60>)
 800db22:	6013      	str	r3, [r2, #0]
  BLE_IoBusAclDataTxAck = pInitHciConf->IoBusAclDataTxAck;
 800db24:	68fb      	ldr	r3, [r7, #12]
 800db26:	685b      	ldr	r3, [r3, #4]
 800db28:	4a07      	ldr	r2, [pc, #28]	; (800db48 <TL_BLE_Init+0x64>)
 800db2a:	6013      	str	r3, [r2, #0]

  return 0;
 800db2c:	2300      	movs	r3, #0
}
 800db2e:	4618      	mov	r0, r3
 800db30:	3710      	adds	r7, #16
 800db32:	46bd      	mov	sp, r7
 800db34:	bd80      	pop	{r7, pc}
 800db36:	bf00      	nop
 800db38:	200301d0 	.word	0x200301d0
 800db3c:	20030000 	.word	0x20030000
 800db40:	20030a48 	.word	0x20030a48
 800db44:	20000418 	.word	0x20000418
 800db48:	2000041c 	.word	0x2000041c

0800db4c <TL_BLE_SendCmd>:

int32_t TL_BLE_SendCmd( uint8_t* buffer, uint16_t size )
{
 800db4c:	b580      	push	{r7, lr}
 800db4e:	b082      	sub	sp, #8
 800db50:	af00      	add	r7, sp, #0
 800db52:	6078      	str	r0, [r7, #4]
 800db54:	460b      	mov	r3, r1
 800db56:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t*)(TL_RefTable.p_ble_table->pcmd_buffer))->cmdserial.type = TL_BLECMD_PKT_TYPE;
 800db58:	4b09      	ldr	r3, [pc, #36]	; (800db80 <TL_BLE_SendCmd+0x34>)
 800db5a:	685b      	ldr	r3, [r3, #4]
 800db5c:	681b      	ldr	r3, [r3, #0]
 800db5e:	2201      	movs	r2, #1
 800db60:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_BLE_CMD, TL_RefTable.p_ble_table->pcmd_buffer);
 800db62:	4b07      	ldr	r3, [pc, #28]	; (800db80 <TL_BLE_SendCmd+0x34>)
 800db64:	685b      	ldr	r3, [r3, #4]
 800db66:	681b      	ldr	r3, [r3, #0]
 800db68:	4619      	mov	r1, r3
 800db6a:	2001      	movs	r0, #1
 800db6c:	f000 f96c 	bl	800de48 <OutputDbgTrace>

  HW_IPCC_BLE_SendCmd();
 800db70:	f7f4 f9d6 	bl	8001f20 <HW_IPCC_BLE_SendCmd>

  return 0;
 800db74:	2300      	movs	r3, #0
}
 800db76:	4618      	mov	r0, r3
 800db78:	3708      	adds	r7, #8
 800db7a:	46bd      	mov	sp, r7
 800db7c:	bd80      	pop	{r7, pc}
 800db7e:	bf00      	nop
 800db80:	20030000 	.word	0x20030000

0800db84 <HW_IPCC_BLE_RxEvtNot>:

void HW_IPCC_BLE_RxEvtNot(void)
{
 800db84:	b580      	push	{r7, lr}
 800db86:	b082      	sub	sp, #8
 800db88:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&EvtQueue) == FALSE)
 800db8a:	e01c      	b.n	800dbc6 <HW_IPCC_BLE_RxEvtNot+0x42>
  {
    LST_remove_head (&EvtQueue, (tListNode **)&phcievt);
 800db8c:	1d3b      	adds	r3, r7, #4
 800db8e:	4619      	mov	r1, r3
 800db90:	4812      	ldr	r0, [pc, #72]	; (800dbdc <HW_IPCC_BLE_RxEvtNot+0x58>)
 800db92:	f000 fc4a 	bl	800e42a <LST_remove_head>

    if ( ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 800db96:	687b      	ldr	r3, [r7, #4]
 800db98:	7a5b      	ldrb	r3, [r3, #9]
 800db9a:	2b0f      	cmp	r3, #15
 800db9c:	d003      	beq.n	800dba6 <HW_IPCC_BLE_RxEvtNot+0x22>
 800db9e:	687b      	ldr	r3, [r7, #4]
 800dba0:	7a5b      	ldrb	r3, [r3, #9]
 800dba2:	2b0e      	cmp	r3, #14
 800dba4:	d105      	bne.n	800dbb2 <HW_IPCC_BLE_RxEvtNot+0x2e>
    {
      OutputDbgTrace(TL_MB_BLE_CMD_RSP, (uint8_t*)phcievt);
 800dba6:	687b      	ldr	r3, [r7, #4]
 800dba8:	4619      	mov	r1, r3
 800dbaa:	2002      	movs	r0, #2
 800dbac:	f000 f94c 	bl	800de48 <OutputDbgTrace>
 800dbb0:	e004      	b.n	800dbbc <HW_IPCC_BLE_RxEvtNot+0x38>
    }
    else
    {
      OutputDbgTrace(TL_MB_BLE_ASYNCH_EVT, (uint8_t*)phcievt);
 800dbb2:	687b      	ldr	r3, [r7, #4]
 800dbb4:	4619      	mov	r1, r3
 800dbb6:	2003      	movs	r0, #3
 800dbb8:	f000 f946 	bl	800de48 <OutputDbgTrace>
    }

    BLE_IoBusEvtCallBackFunction(phcievt);
 800dbbc:	4b08      	ldr	r3, [pc, #32]	; (800dbe0 <HW_IPCC_BLE_RxEvtNot+0x5c>)
 800dbbe:	681b      	ldr	r3, [r3, #0]
 800dbc0:	687a      	ldr	r2, [r7, #4]
 800dbc2:	4610      	mov	r0, r2
 800dbc4:	4798      	blx	r3
  while(LST_is_empty(&EvtQueue) == FALSE)
 800dbc6:	4805      	ldr	r0, [pc, #20]	; (800dbdc <HW_IPCC_BLE_RxEvtNot+0x58>)
 800dbc8:	f000 fba8 	bl	800e31c <LST_is_empty>
 800dbcc:	4603      	mov	r3, r0
 800dbce:	2b00      	cmp	r3, #0
 800dbd0:	d0dc      	beq.n	800db8c <HW_IPCC_BLE_RxEvtNot+0x8>
  }

  return;
 800dbd2:	bf00      	nop
}
 800dbd4:	3708      	adds	r7, #8
 800dbd6:	46bd      	mov	sp, r7
 800dbd8:	bd80      	pop	{r7, pc}
 800dbda:	bf00      	nop
 800dbdc:	200301d0 	.word	0x200301d0
 800dbe0:	20000418 	.word	0x20000418

0800dbe4 <HW_IPCC_BLE_AclDataAckNot>:

  return 0;
}

void HW_IPCC_BLE_AclDataAckNot(void)
{
 800dbe4:	b580      	push	{r7, lr}
 800dbe6:	af00      	add	r7, sp, #0
  BLE_IoBusAclDataTxAck( );
 800dbe8:	4b02      	ldr	r3, [pc, #8]	; (800dbf4 <HW_IPCC_BLE_AclDataAckNot+0x10>)
 800dbea:	681b      	ldr	r3, [r3, #0]
 800dbec:	4798      	blx	r3

  return;
 800dbee:	bf00      	nop
}
 800dbf0:	bd80      	pop	{r7, pc}
 800dbf2:	bf00      	nop
 800dbf4:	2000041c 	.word	0x2000041c

0800dbf8 <TL_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
int32_t TL_SYS_Init( void* pConf  )
{
 800dbf8:	b580      	push	{r7, lr}
 800dbfa:	b084      	sub	sp, #16
 800dbfc:	af00      	add	r7, sp, #0
 800dbfe:	6078      	str	r0, [r7, #4]
  MB_SysTable_t  * p_systable;

  TL_SYS_InitConf_t *pInitHciConf = (TL_SYS_InitConf_t *) pConf;
 800dc00:	687b      	ldr	r3, [r7, #4]
 800dc02:	60fb      	str	r3, [r7, #12]

  LST_init_head (&SystemEvtQueue);
 800dc04:	480d      	ldr	r0, [pc, #52]	; (800dc3c <TL_SYS_Init+0x44>)
 800dc06:	f000 fb79 	bl	800e2fc <LST_init_head>
  p_systable = TL_RefTable.p_sys_table;
 800dc0a:	4b0d      	ldr	r3, [pc, #52]	; (800dc40 <TL_SYS_Init+0x48>)
 800dc0c:	68db      	ldr	r3, [r3, #12]
 800dc0e:	60bb      	str	r3, [r7, #8]
  p_systable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 800dc10:	68fb      	ldr	r3, [r7, #12]
 800dc12:	689a      	ldr	r2, [r3, #8]
 800dc14:	68bb      	ldr	r3, [r7, #8]
 800dc16:	601a      	str	r2, [r3, #0]
  p_systable->sys_queue = (uint8_t*)&SystemEvtQueue;
 800dc18:	68bb      	ldr	r3, [r7, #8]
 800dc1a:	4a08      	ldr	r2, [pc, #32]	; (800dc3c <TL_SYS_Init+0x44>)
 800dc1c:	605a      	str	r2, [r3, #4]

  HW_IPCC_SYS_Init();
 800dc1e:	f7f4 f9a1 	bl	8001f64 <HW_IPCC_SYS_Init>

  SYS_CMD_IoBusCallBackFunction = pInitHciConf->IoBusCallBackCmdEvt;
 800dc22:	68fb      	ldr	r3, [r7, #12]
 800dc24:	681b      	ldr	r3, [r3, #0]
 800dc26:	4a07      	ldr	r2, [pc, #28]	; (800dc44 <TL_SYS_Init+0x4c>)
 800dc28:	6013      	str	r3, [r2, #0]
  SYS_EVT_IoBusCallBackFunction = pInitHciConf->IoBusCallBackUserEvt;
 800dc2a:	68fb      	ldr	r3, [r7, #12]
 800dc2c:	685b      	ldr	r3, [r3, #4]
 800dc2e:	4a06      	ldr	r2, [pc, #24]	; (800dc48 <TL_SYS_Init+0x50>)
 800dc30:	6013      	str	r3, [r2, #0]

  return 0;
 800dc32:	2300      	movs	r3, #0
}
 800dc34:	4618      	mov	r0, r3
 800dc36:	3710      	adds	r7, #16
 800dc38:	46bd      	mov	sp, r7
 800dc3a:	bd80      	pop	{r7, pc}
 800dc3c:	200301d8 	.word	0x200301d8
 800dc40:	20030000 	.word	0x20030000
 800dc44:	20000420 	.word	0x20000420
 800dc48:	20000424 	.word	0x20000424

0800dc4c <TL_SYS_SendCmd>:

int32_t TL_SYS_SendCmd( uint8_t* buffer, uint16_t size )
{
 800dc4c:	b580      	push	{r7, lr}
 800dc4e:	b082      	sub	sp, #8
 800dc50:	af00      	add	r7, sp, #0
 800dc52:	6078      	str	r0, [r7, #4]
 800dc54:	460b      	mov	r3, r1
 800dc56:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t *)(TL_RefTable.p_sys_table->pcmd_buffer))->cmdserial.type = TL_SYSCMD_PKT_TYPE;
 800dc58:	4b09      	ldr	r3, [pc, #36]	; (800dc80 <TL_SYS_SendCmd+0x34>)
 800dc5a:	68db      	ldr	r3, [r3, #12]
 800dc5c:	681b      	ldr	r3, [r3, #0]
 800dc5e:	2210      	movs	r2, #16
 800dc60:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_SYS_CMD, TL_RefTable.p_sys_table->pcmd_buffer);
 800dc62:	4b07      	ldr	r3, [pc, #28]	; (800dc80 <TL_SYS_SendCmd+0x34>)
 800dc64:	68db      	ldr	r3, [r3, #12]
 800dc66:	681b      	ldr	r3, [r3, #0]
 800dc68:	4619      	mov	r1, r3
 800dc6a:	2004      	movs	r0, #4
 800dc6c:	f000 f8ec 	bl	800de48 <OutputDbgTrace>

  HW_IPCC_SYS_SendCmd();
 800dc70:	f7f4 f982 	bl	8001f78 <HW_IPCC_SYS_SendCmd>

  return 0;
 800dc74:	2300      	movs	r3, #0
}
 800dc76:	4618      	mov	r0, r3
 800dc78:	3708      	adds	r7, #8
 800dc7a:	46bd      	mov	sp, r7
 800dc7c:	bd80      	pop	{r7, pc}
 800dc7e:	bf00      	nop
 800dc80:	20030000 	.word	0x20030000

0800dc84 <HW_IPCC_SYS_CmdEvtNot>:

void HW_IPCC_SYS_CmdEvtNot(void)
{
 800dc84:	b580      	push	{r7, lr}
 800dc86:	af00      	add	r7, sp, #0
  OutputDbgTrace(TL_MB_SYS_CMD_RSP, (uint8_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 800dc88:	4b07      	ldr	r3, [pc, #28]	; (800dca8 <HW_IPCC_SYS_CmdEvtNot+0x24>)
 800dc8a:	68db      	ldr	r3, [r3, #12]
 800dc8c:	681b      	ldr	r3, [r3, #0]
 800dc8e:	4619      	mov	r1, r3
 800dc90:	2005      	movs	r0, #5
 800dc92:	f000 f8d9 	bl	800de48 <OutputDbgTrace>

  SYS_CMD_IoBusCallBackFunction( (TL_EvtPacket_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 800dc96:	4b05      	ldr	r3, [pc, #20]	; (800dcac <HW_IPCC_SYS_CmdEvtNot+0x28>)
 800dc98:	681b      	ldr	r3, [r3, #0]
 800dc9a:	4a03      	ldr	r2, [pc, #12]	; (800dca8 <HW_IPCC_SYS_CmdEvtNot+0x24>)
 800dc9c:	68d2      	ldr	r2, [r2, #12]
 800dc9e:	6812      	ldr	r2, [r2, #0]
 800dca0:	4610      	mov	r0, r2
 800dca2:	4798      	blx	r3

  return;
 800dca4:	bf00      	nop
}
 800dca6:	bd80      	pop	{r7, pc}
 800dca8:	20030000 	.word	0x20030000
 800dcac:	20000420 	.word	0x20000420

0800dcb0 <HW_IPCC_SYS_EvtNot>:

void HW_IPCC_SYS_EvtNot( void )
{
 800dcb0:	b580      	push	{r7, lr}
 800dcb2:	b082      	sub	sp, #8
 800dcb4:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *p_evt;

  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 800dcb6:	e00e      	b.n	800dcd6 <HW_IPCC_SYS_EvtNot+0x26>
  {
    LST_remove_head (&SystemEvtQueue, (tListNode **)&p_evt);
 800dcb8:	1d3b      	adds	r3, r7, #4
 800dcba:	4619      	mov	r1, r3
 800dcbc:	480b      	ldr	r0, [pc, #44]	; (800dcec <HW_IPCC_SYS_EvtNot+0x3c>)
 800dcbe:	f000 fbb4 	bl	800e42a <LST_remove_head>

    OutputDbgTrace(TL_MB_SYS_ASYNCH_EVT, (uint8_t*)p_evt );
 800dcc2:	687b      	ldr	r3, [r7, #4]
 800dcc4:	4619      	mov	r1, r3
 800dcc6:	2006      	movs	r0, #6
 800dcc8:	f000 f8be 	bl	800de48 <OutputDbgTrace>

    SYS_EVT_IoBusCallBackFunction( p_evt );
 800dccc:	4b08      	ldr	r3, [pc, #32]	; (800dcf0 <HW_IPCC_SYS_EvtNot+0x40>)
 800dcce:	681b      	ldr	r3, [r3, #0]
 800dcd0:	687a      	ldr	r2, [r7, #4]
 800dcd2:	4610      	mov	r0, r2
 800dcd4:	4798      	blx	r3
  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 800dcd6:	4805      	ldr	r0, [pc, #20]	; (800dcec <HW_IPCC_SYS_EvtNot+0x3c>)
 800dcd8:	f000 fb20 	bl	800e31c <LST_is_empty>
 800dcdc:	4603      	mov	r3, r0
 800dcde:	2b00      	cmp	r3, #0
 800dce0:	d0ea      	beq.n	800dcb8 <HW_IPCC_SYS_EvtNot+0x8>
  }

  return;
 800dce2:	bf00      	nop
}
 800dce4:	3708      	adds	r7, #8
 800dce6:	46bd      	mov	sp, r7
 800dce8:	bd80      	pop	{r7, pc}
 800dcea:	bf00      	nop
 800dcec:	200301d8 	.word	0x200301d8
 800dcf0:	20000424 	.word	0x20000424

0800dcf4 <TL_MM_Init>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void TL_MM_Init( TL_MM_Config_t *p_Config )
{
 800dcf4:	b580      	push	{r7, lr}
 800dcf6:	b082      	sub	sp, #8
 800dcf8:	af00      	add	r7, sp, #0
 800dcfa:	6078      	str	r0, [r7, #4]
  static MB_MemManagerTable_t  * p_mem_manager_table;

  LST_init_head (&FreeBufQueue);
 800dcfc:	4817      	ldr	r0, [pc, #92]	; (800dd5c <TL_MM_Init+0x68>)
 800dcfe:	f000 fafd 	bl	800e2fc <LST_init_head>
  LST_init_head (&LocalFreeBufQueue);
 800dd02:	4817      	ldr	r0, [pc, #92]	; (800dd60 <TL_MM_Init+0x6c>)
 800dd04:	f000 fafa 	bl	800e2fc <LST_init_head>

  p_mem_manager_table = TL_RefTable.p_mem_manager_table;
 800dd08:	4b16      	ldr	r3, [pc, #88]	; (800dd64 <TL_MM_Init+0x70>)
 800dd0a:	691b      	ldr	r3, [r3, #16]
 800dd0c:	4a16      	ldr	r2, [pc, #88]	; (800dd68 <TL_MM_Init+0x74>)
 800dd0e:	6013      	str	r3, [r2, #0]

  p_mem_manager_table->blepool = p_Config->p_AsynchEvtPool;
 800dd10:	4b15      	ldr	r3, [pc, #84]	; (800dd68 <TL_MM_Init+0x74>)
 800dd12:	681b      	ldr	r3, [r3, #0]
 800dd14:	687a      	ldr	r2, [r7, #4]
 800dd16:	6892      	ldr	r2, [r2, #8]
 800dd18:	609a      	str	r2, [r3, #8]
  p_mem_manager_table->blepoolsize = p_Config->AsynchEvtPoolSize;
 800dd1a:	4b13      	ldr	r3, [pc, #76]	; (800dd68 <TL_MM_Init+0x74>)
 800dd1c:	681b      	ldr	r3, [r3, #0]
 800dd1e:	687a      	ldr	r2, [r7, #4]
 800dd20:	68d2      	ldr	r2, [r2, #12]
 800dd22:	60da      	str	r2, [r3, #12]
  p_mem_manager_table->pevt_free_buffer_queue = (uint8_t*)&FreeBufQueue;
 800dd24:	4b10      	ldr	r3, [pc, #64]	; (800dd68 <TL_MM_Init+0x74>)
 800dd26:	681b      	ldr	r3, [r3, #0]
 800dd28:	4a0c      	ldr	r2, [pc, #48]	; (800dd5c <TL_MM_Init+0x68>)
 800dd2a:	611a      	str	r2, [r3, #16]
  p_mem_manager_table->spare_ble_buffer = p_Config->p_BleSpareEvtBuffer;
 800dd2c:	4b0e      	ldr	r3, [pc, #56]	; (800dd68 <TL_MM_Init+0x74>)
 800dd2e:	681b      	ldr	r3, [r3, #0]
 800dd30:	687a      	ldr	r2, [r7, #4]
 800dd32:	6812      	ldr	r2, [r2, #0]
 800dd34:	601a      	str	r2, [r3, #0]
  p_mem_manager_table->spare_sys_buffer = p_Config->p_SystemSpareEvtBuffer;
 800dd36:	4b0c      	ldr	r3, [pc, #48]	; (800dd68 <TL_MM_Init+0x74>)
 800dd38:	681b      	ldr	r3, [r3, #0]
 800dd3a:	687a      	ldr	r2, [r7, #4]
 800dd3c:	6852      	ldr	r2, [r2, #4]
 800dd3e:	605a      	str	r2, [r3, #4]
  p_mem_manager_table->traces_evt_pool = p_Config->p_TracesEvtPool;
 800dd40:	4b09      	ldr	r3, [pc, #36]	; (800dd68 <TL_MM_Init+0x74>)
 800dd42:	681b      	ldr	r3, [r3, #0]
 800dd44:	687a      	ldr	r2, [r7, #4]
 800dd46:	6912      	ldr	r2, [r2, #16]
 800dd48:	615a      	str	r2, [r3, #20]
  p_mem_manager_table->tracespoolsize = p_Config->TracesEvtPoolSize;
 800dd4a:	4b07      	ldr	r3, [pc, #28]	; (800dd68 <TL_MM_Init+0x74>)
 800dd4c:	681b      	ldr	r3, [r3, #0]
 800dd4e:	687a      	ldr	r2, [r7, #4]
 800dd50:	6952      	ldr	r2, [r2, #20]
 800dd52:	619a      	str	r2, [r3, #24]

  return;
 800dd54:	bf00      	nop
}
 800dd56:	3708      	adds	r7, #8
 800dd58:	46bd      	mov	sp, r7
 800dd5a:	bd80      	pop	{r7, pc}
 800dd5c:	200301c0 	.word	0x200301c0
 800dd60:	20000410 	.word	0x20000410
 800dd64:	20030000 	.word	0x20030000
 800dd68:	20000428 	.word	0x20000428

0800dd6c <TL_MM_EvtDone>:

void TL_MM_EvtDone(TL_EvtPacket_t * phcievt)
{
 800dd6c:	b580      	push	{r7, lr}
 800dd6e:	b082      	sub	sp, #8
 800dd70:	af00      	add	r7, sp, #0
 800dd72:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&LocalFreeBufQueue, (tListNode *)phcievt);
 800dd74:	6879      	ldr	r1, [r7, #4]
 800dd76:	4807      	ldr	r0, [pc, #28]	; (800dd94 <TL_MM_EvtDone+0x28>)
 800dd78:	f000 fb14 	bl	800e3a4 <LST_insert_tail>

  OutputDbgTrace(TL_MB_MM_RELEASE_BUFFER, (uint8_t*)phcievt);
 800dd7c:	6879      	ldr	r1, [r7, #4]
 800dd7e:	2000      	movs	r0, #0
 800dd80:	f000 f862 	bl	800de48 <OutputDbgTrace>

  HW_IPCC_MM_SendFreeBuf( SendFreeBuf );
 800dd84:	4804      	ldr	r0, [pc, #16]	; (800dd98 <TL_MM_EvtDone+0x2c>)
 800dd86:	f7f4 f91d 	bl	8001fc4 <HW_IPCC_MM_SendFreeBuf>

  return;
 800dd8a:	bf00      	nop
}
 800dd8c:	3708      	adds	r7, #8
 800dd8e:	46bd      	mov	sp, r7
 800dd90:	bd80      	pop	{r7, pc}
 800dd92:	bf00      	nop
 800dd94:	20000410 	.word	0x20000410
 800dd98:	0800dd9d 	.word	0x0800dd9d

0800dd9c <SendFreeBuf>:

static void SendFreeBuf( void )
{
 800dd9c:	b580      	push	{r7, lr}
 800dd9e:	b082      	sub	sp, #8
 800dda0:	af00      	add	r7, sp, #0
  tListNode *p_node;

  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 800dda2:	e00c      	b.n	800ddbe <SendFreeBuf+0x22>
  {
    LST_remove_head( &LocalFreeBufQueue, (tListNode **)&p_node );
 800dda4:	1d3b      	adds	r3, r7, #4
 800dda6:	4619      	mov	r1, r3
 800dda8:	480a      	ldr	r0, [pc, #40]	; (800ddd4 <SendFreeBuf+0x38>)
 800ddaa:	f000 fb3e 	bl	800e42a <LST_remove_head>
    LST_insert_tail( (tListNode*)(TL_RefTable.p_mem_manager_table->pevt_free_buffer_queue), p_node );
 800ddae:	4b0a      	ldr	r3, [pc, #40]	; (800ddd8 <SendFreeBuf+0x3c>)
 800ddb0:	691b      	ldr	r3, [r3, #16]
 800ddb2:	691b      	ldr	r3, [r3, #16]
 800ddb4:	687a      	ldr	r2, [r7, #4]
 800ddb6:	4611      	mov	r1, r2
 800ddb8:	4618      	mov	r0, r3
 800ddba:	f000 faf3 	bl	800e3a4 <LST_insert_tail>
  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 800ddbe:	4805      	ldr	r0, [pc, #20]	; (800ddd4 <SendFreeBuf+0x38>)
 800ddc0:	f000 faac 	bl	800e31c <LST_is_empty>
 800ddc4:	4603      	mov	r3, r0
 800ddc6:	2b00      	cmp	r3, #0
 800ddc8:	d0ec      	beq.n	800dda4 <SendFreeBuf+0x8>
  }

  return;
 800ddca:	bf00      	nop
}
 800ddcc:	3708      	adds	r7, #8
 800ddce:	46bd      	mov	sp, r7
 800ddd0:	bd80      	pop	{r7, pc}
 800ddd2:	bf00      	nop
 800ddd4:	20000410 	.word	0x20000410
 800ddd8:	20030000 	.word	0x20030000

0800dddc <TL_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void TL_TRACES_Init( void )
{
 800dddc:	b580      	push	{r7, lr}
 800ddde:	af00      	add	r7, sp, #0
  LST_init_head (&TracesEvtQueue);
 800dde0:	4805      	ldr	r0, [pc, #20]	; (800ddf8 <TL_TRACES_Init+0x1c>)
 800dde2:	f000 fa8b 	bl	800e2fc <LST_init_head>

  TL_RefTable.p_traces_table->traces_queue = (uint8_t*)&TracesEvtQueue;
 800dde6:	4b05      	ldr	r3, [pc, #20]	; (800ddfc <TL_TRACES_Init+0x20>)
 800dde8:	695b      	ldr	r3, [r3, #20]
 800ddea:	4a03      	ldr	r2, [pc, #12]	; (800ddf8 <TL_TRACES_Init+0x1c>)
 800ddec:	601a      	str	r2, [r3, #0]

  HW_IPCC_TRACES_Init();
 800ddee:	f7f4 f91f 	bl	8002030 <HW_IPCC_TRACES_Init>

  return;
 800ddf2:	bf00      	nop
}
 800ddf4:	bd80      	pop	{r7, pc}
 800ddf6:	bf00      	nop
 800ddf8:	200301c8 	.word	0x200301c8
 800ddfc:	20030000 	.word	0x20030000

0800de00 <HW_IPCC_TRACES_EvtNot>:

void HW_IPCC_TRACES_EvtNot(void)
{
 800de00:	b580      	push	{r7, lr}
 800de02:	b082      	sub	sp, #8
 800de04:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 800de06:	e008      	b.n	800de1a <HW_IPCC_TRACES_EvtNot+0x1a>
  {
    LST_remove_head (&TracesEvtQueue, (tListNode **)&phcievt);
 800de08:	1d3b      	adds	r3, r7, #4
 800de0a:	4619      	mov	r1, r3
 800de0c:	4808      	ldr	r0, [pc, #32]	; (800de30 <HW_IPCC_TRACES_EvtNot+0x30>)
 800de0e:	f000 fb0c 	bl	800e42a <LST_remove_head>
    TL_TRACES_EvtReceived( phcievt );
 800de12:	687b      	ldr	r3, [r7, #4]
 800de14:	4618      	mov	r0, r3
 800de16:	f000 f80d 	bl	800de34 <TL_TRACES_EvtReceived>
  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 800de1a:	4805      	ldr	r0, [pc, #20]	; (800de30 <HW_IPCC_TRACES_EvtNot+0x30>)
 800de1c:	f000 fa7e 	bl	800e31c <LST_is_empty>
 800de20:	4603      	mov	r3, r0
 800de22:	2b00      	cmp	r3, #0
 800de24:	d0f0      	beq.n	800de08 <HW_IPCC_TRACES_EvtNot+0x8>
  }

  return;
 800de26:	bf00      	nop
}
 800de28:	3708      	adds	r7, #8
 800de2a:	46bd      	mov	sp, r7
 800de2c:	bd80      	pop	{r7, pc}
 800de2e:	bf00      	nop
 800de30:	200301c8 	.word	0x200301c8

0800de34 <TL_TRACES_EvtReceived>:

__WEAK void TL_TRACES_EvtReceived( TL_EvtPacket_t * hcievt )
{
 800de34:	b480      	push	{r7}
 800de36:	b083      	sub	sp, #12
 800de38:	af00      	add	r7, sp, #0
 800de3a:	6078      	str	r0, [r7, #4]
  (void)(hcievt);
}
 800de3c:	bf00      	nop
 800de3e:	370c      	adds	r7, #12
 800de40:	46bd      	mov	sp, r7
 800de42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de46:	4770      	bx	lr

0800de48 <OutputDbgTrace>:

/******************************************************************************
 * DEBUG INFORMATION
 ******************************************************************************/
static void OutputDbgTrace(TL_MB_PacketType_t packet_type, uint8_t* buffer)
{
 800de48:	b480      	push	{r7}
 800de4a:	b085      	sub	sp, #20
 800de4c:	af00      	add	r7, sp, #0
 800de4e:	4603      	mov	r3, r0
 800de50:	6039      	str	r1, [r7, #0]
 800de52:	71fb      	strb	r3, [r7, #7]
  TL_EvtPacket_t *p_evt_packet;
  TL_CmdPacket_t *p_cmd_packet;

  switch(packet_type)
 800de54:	79fb      	ldrb	r3, [r7, #7]
 800de56:	2b06      	cmp	r3, #6
 800de58:	d849      	bhi.n	800deee <OutputDbgTrace+0xa6>
 800de5a:	a201      	add	r2, pc, #4	; (adr r2, 800de60 <OutputDbgTrace+0x18>)
 800de5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800de60:	0800de7d 	.word	0x0800de7d
 800de64:	0800de9f 	.word	0x0800de9f
 800de68:	0800dea5 	.word	0x0800dea5
 800de6c:	0800debf 	.word	0x0800debf
 800de70:	0800decb 	.word	0x0800decb
 800de74:	0800ded1 	.word	0x0800ded1
 800de78:	0800dee3 	.word	0x0800dee3
  {
    case TL_MB_MM_RELEASE_BUFFER:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800de7c:	683b      	ldr	r3, [r7, #0]
 800de7e:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 800de80:	68fb      	ldr	r3, [r7, #12]
 800de82:	7a5b      	ldrb	r3, [r3, #9]
 800de84:	2b0f      	cmp	r3, #15
 800de86:	d004      	beq.n	800de92 <OutputDbgTrace+0x4a>
 800de88:	2bff      	cmp	r3, #255	; 0xff
 800de8a:	d004      	beq.n	800de96 <OutputDbgTrace+0x4e>
 800de8c:	2b0e      	cmp	r3, #14
 800de8e:	d004      	beq.n	800de9a <OutputDbgTrace+0x52>
          break;

        default:
          TL_MM_DBG_MSG("mm evt released: 0x%02X", p_evt_packet->evtserial.evt.evtcode);
          TL_MM_DBG_MSG(" buffer addr: 0x%08X", p_evt_packet);
          break;
 800de90:	e004      	b.n	800de9c <OutputDbgTrace+0x54>
          break;
 800de92:	bf00      	nop
 800de94:	e02c      	b.n	800def0 <OutputDbgTrace+0xa8>
          break;
 800de96:	bf00      	nop
 800de98:	e02a      	b.n	800def0 <OutputDbgTrace+0xa8>
          break;
 800de9a:	bf00      	nop
      }

      TL_MM_DBG_MSG("\r\n");
      break;
 800de9c:	e028      	b.n	800def0 <OutputDbgTrace+0xa8>

    case TL_MB_BLE_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 800de9e:	683b      	ldr	r3, [r7, #0]
 800dea0:	60bb      	str	r3, [r7, #8]
        TL_HCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 800dea2:	e025      	b.n	800def0 <OutputDbgTrace+0xa8>

    case TL_MB_BLE_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800dea4:	683b      	ldr	r3, [r7, #0]
 800dea6:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 800dea8:	68fb      	ldr	r3, [r7, #12]
 800deaa:	7a5b      	ldrb	r3, [r3, #9]
 800deac:	2b0e      	cmp	r3, #14
 800deae:	d002      	beq.n	800deb6 <OutputDbgTrace+0x6e>
 800deb0:	2b0f      	cmp	r3, #15
 800deb2:	d002      	beq.n	800deba <OutputDbgTrace+0x72>
          }
          break;

        default:
          TL_HCI_CMD_DBG_MSG("unknown ble rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 800deb4:	e002      	b.n	800debc <OutputDbgTrace+0x74>
          break;
 800deb6:	bf00      	nop
 800deb8:	e01a      	b.n	800def0 <OutputDbgTrace+0xa8>
          break;
 800deba:	bf00      	nop
      }

      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800debc:	e018      	b.n	800def0 <OutputDbgTrace+0xa8>

    case TL_MB_BLE_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800debe:	683b      	ldr	r3, [r7, #0]
 800dec0:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 800dec2:	68fb      	ldr	r3, [r7, #12]
 800dec4:	7a5b      	ldrb	r3, [r3, #9]
 800dec6:	2bff      	cmp	r3, #255	; 0xff
      }

      TL_HCI_EVT_DBG_MSG("\r\n");

      TL_HCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800dec8:	e012      	b.n	800def0 <OutputDbgTrace+0xa8>

    case TL_MB_SYS_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 800deca:	683b      	ldr	r3, [r7, #0]
 800decc:	60bb      	str	r3, [r7, #8]
        TL_SHCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 800dece:	e00f      	b.n	800def0 <OutputDbgTrace+0xa8>

    case TL_MB_SYS_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800ded0:	683b      	ldr	r3, [r7, #0]
 800ded2:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 800ded4:	68fb      	ldr	r3, [r7, #12]
 800ded6:	7a5b      	ldrb	r3, [r3, #9]
 800ded8:	2b0e      	cmp	r3, #14
 800deda:	d000      	beq.n	800dede <OutputDbgTrace+0x96>
          }
          break;

        default:
          TL_SHCI_CMD_DBG_MSG("unknown sys rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 800dedc:	e000      	b.n	800dee0 <OutputDbgTrace+0x98>
          break;
 800dede:	bf00      	nop
      }

      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800dee0:	e006      	b.n	800def0 <OutputDbgTrace+0xa8>

    case  TL_MB_SYS_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800dee2:	683b      	ldr	r3, [r7, #0]
 800dee4:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 800dee6:	68fb      	ldr	r3, [r7, #12]
 800dee8:	7a5b      	ldrb	r3, [r3, #9]
 800deea:	2bff      	cmp	r3, #255	; 0xff
      }

      TL_SHCI_EVT_DBG_MSG("\r\n");

      TL_SHCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800deec:	e000      	b.n	800def0 <OutputDbgTrace+0xa8>

    default:
      break;
 800deee:	bf00      	nop
  }

  return;
 800def0:	bf00      	nop
}
 800def2:	3714      	adds	r7, #20
 800def4:	46bd      	mov	sp, r7
 800def6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800defa:	4770      	bx	lr

0800defc <PeerToPeer_Event_Handler>:
 * @brief  Event handler
 * @param  Event: Address of the buffer holding the Event
 * @retval Ack: Return whether the Event has been managed or not
 */
static SVCCTL_EvtAckStatus_t PeerToPeer_Event_Handler(void *Event)
{
 800defc:	b580      	push	{r7, lr}
 800defe:	b08a      	sub	sp, #40	; 0x28
 800df00:	af00      	add	r7, sp, #0
 800df02:	6078      	str	r0, [r7, #4]
  hci_event_pckt *event_pckt;
  evt_blue_aci *blue_evt;
  aci_gatt_attribute_modified_event_rp0    * attribute_modified;
  P2PS_STM_App_Notification_evt_t Notification;

  return_value = SVCCTL_EvtNotAck;
 800df04:	2300      	movs	r3, #0
 800df06:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  event_pckt = (hci_event_pckt *)(((hci_uart_pckt*)Event)->data);
 800df0a:	687b      	ldr	r3, [r7, #4]
 800df0c:	3301      	adds	r3, #1
 800df0e:	623b      	str	r3, [r7, #32]

  switch(event_pckt->evt)
 800df10:	6a3b      	ldr	r3, [r7, #32]
 800df12:	781b      	ldrb	r3, [r3, #0]
 800df14:	2bff      	cmp	r3, #255	; 0xff
 800df16:	d000      	beq.n	800df1a <PeerToPeer_Event_Handler+0x1e>
      }
    }
    break; /* HCI_EVT_VENDOR_SPECIFIC */

    default:
      break;
 800df18:	e04a      	b.n	800dfb0 <PeerToPeer_Event_Handler+0xb4>
      blue_evt = (evt_blue_aci*)event_pckt->data;
 800df1a:	6a3b      	ldr	r3, [r7, #32]
 800df1c:	3302      	adds	r3, #2
 800df1e:	61fb      	str	r3, [r7, #28]
      switch(blue_evt->ecode)
 800df20:	69fb      	ldr	r3, [r7, #28]
 800df22:	881b      	ldrh	r3, [r3, #0]
 800df24:	b29b      	uxth	r3, r3
 800df26:	461a      	mov	r2, r3
 800df28:	f640 4301 	movw	r3, #3073	; 0xc01
 800df2c:	429a      	cmp	r2, r3
 800df2e:	d000      	beq.n	800df32 <PeerToPeer_Event_Handler+0x36>
          break;
 800df30:	e03d      	b.n	800dfae <PeerToPeer_Event_Handler+0xb2>
          attribute_modified = (aci_gatt_attribute_modified_event_rp0*)blue_evt->data;
 800df32:	69fb      	ldr	r3, [r7, #28]
 800df34:	3302      	adds	r3, #2
 800df36:	61bb      	str	r3, [r7, #24]
            if(attribute_modified->Attr_Handle == (aPeerToPeerContext.P2PNotifyServerToClientCharHdle + 2))
 800df38:	69bb      	ldr	r3, [r7, #24]
 800df3a:	885b      	ldrh	r3, [r3, #2]
 800df3c:	b29b      	uxth	r3, r3
 800df3e:	461a      	mov	r2, r3
 800df40:	4b1e      	ldr	r3, [pc, #120]	; (800dfbc <PeerToPeer_Event_Handler+0xc0>)
 800df42:	889b      	ldrh	r3, [r3, #4]
 800df44:	3302      	adds	r3, #2
 800df46:	429a      	cmp	r2, r3
 800df48:	d118      	bne.n	800df7c <PeerToPeer_Event_Handler+0x80>
              return_value = SVCCTL_EvtAckFlowEnable;
 800df4a:	2301      	movs	r3, #1
 800df4c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
              if(attribute_modified->Attr_Data[0] & COMSVC_Notification)
 800df50:	69bb      	ldr	r3, [r7, #24]
 800df52:	7a1b      	ldrb	r3, [r3, #8]
 800df54:	f003 0301 	and.w	r3, r3, #1
 800df58:	2b00      	cmp	r3, #0
 800df5a:	d007      	beq.n	800df6c <PeerToPeer_Event_Handler+0x70>
                Notification.P2P_Evt_Opcode = P2PS_STM__NOTIFY_ENABLED_EVT;
 800df5c:	2300      	movs	r3, #0
 800df5e:	723b      	strb	r3, [r7, #8]
                P2PS_STM_App_Notification(&Notification);
 800df60:	f107 0308 	add.w	r3, r7, #8
 800df64:	4618      	mov	r0, r3
 800df66:	f7f3 fc33 	bl	80017d0 <P2PS_STM_App_Notification>
        break;
 800df6a:	e01f      	b.n	800dfac <PeerToPeer_Event_Handler+0xb0>
                Notification.P2P_Evt_Opcode = P2PS_STM_NOTIFY_DISABLED_EVT;
 800df6c:	2301      	movs	r3, #1
 800df6e:	723b      	strb	r3, [r7, #8]
                P2PS_STM_App_Notification(&Notification);
 800df70:	f107 0308 	add.w	r3, r7, #8
 800df74:	4618      	mov	r0, r3
 800df76:	f7f3 fc2b 	bl	80017d0 <P2PS_STM_App_Notification>
        break;
 800df7a:	e017      	b.n	800dfac <PeerToPeer_Event_Handler+0xb0>
            else if(attribute_modified->Attr_Handle == (aPeerToPeerContext.P2PWriteClientToServerCharHdle + 1))
 800df7c:	69bb      	ldr	r3, [r7, #24]
 800df7e:	885b      	ldrh	r3, [r3, #2]
 800df80:	b29b      	uxth	r3, r3
 800df82:	461a      	mov	r2, r3
 800df84:	4b0d      	ldr	r3, [pc, #52]	; (800dfbc <PeerToPeer_Event_Handler+0xc0>)
 800df86:	885b      	ldrh	r3, [r3, #2]
 800df88:	3301      	adds	r3, #1
 800df8a:	429a      	cmp	r2, r3
 800df8c:	d10e      	bne.n	800dfac <PeerToPeer_Event_Handler+0xb0>
              Notification.P2P_Evt_Opcode = P2PS_STM_WRITE_EVT;
 800df8e:	2303      	movs	r3, #3
 800df90:	723b      	strb	r3, [r7, #8]
              Notification.DataTransfered.Length=attribute_modified->Attr_Data_Length;
 800df92:	69bb      	ldr	r3, [r7, #24]
 800df94:	88db      	ldrh	r3, [r3, #6]
 800df96:	b29b      	uxth	r3, r3
 800df98:	b2db      	uxtb	r3, r3
 800df9a:	743b      	strb	r3, [r7, #16]
              Notification.DataTransfered.pPayload=attribute_modified->Attr_Data;
 800df9c:	69bb      	ldr	r3, [r7, #24]
 800df9e:	3308      	adds	r3, #8
 800dfa0:	60fb      	str	r3, [r7, #12]
              P2PS_STM_App_Notification(&Notification);
 800dfa2:	f107 0308 	add.w	r3, r7, #8
 800dfa6:	4618      	mov	r0, r3
 800dfa8:	f7f3 fc12 	bl	80017d0 <P2PS_STM_App_Notification>
        break;
 800dfac:	bf00      	nop
    break; /* HCI_EVT_VENDOR_SPECIFIC */
 800dfae:	bf00      	nop
  }

  return(return_value);
 800dfb0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}/* end SVCCTL_EvtAckStatus_t */
 800dfb4:	4618      	mov	r0, r3
 800dfb6:	3728      	adds	r7, #40	; 0x28
 800dfb8:	46bd      	mov	sp, r7
 800dfba:	bd80      	pop	{r7, pc}
 800dfbc:	2000036c 	.word	0x2000036c

0800dfc0 <P2PS_STM_Init>:
 * @brief  Service initialization
 * @param  None
 * @retval None
 */
void P2PS_STM_Init(void)
{
 800dfc0:	b580      	push	{r7, lr}
 800dfc2:	b08a      	sub	sp, #40	; 0x28
 800dfc4:	af06      	add	r7, sp, #24
  Char_UUID_t  uuid16;

  /**
   *	Register the event handler to the BLE controller
   */
  SVCCTL_RegisterSvcHandler(PeerToPeer_Event_Handler);
 800dfc6:	484a      	ldr	r0, [pc, #296]	; (800e0f0 <P2PS_STM_Init+0x130>)
 800dfc8:	f7fe fa30 	bl	800c42c <SVCCTL_RegisterSvcHandler>
     *                                2 for P2P Write characteristic +
     *                                2 for P2P Notify characteristic +
     *                                1 for client char configuration descriptor +
     *
     */
    COPY_P2P_SERVICE_UUID(uuid16.Char_UUID_128);
 800dfcc:	238f      	movs	r3, #143	; 0x8f
 800dfce:	703b      	strb	r3, [r7, #0]
 800dfd0:	23e5      	movs	r3, #229	; 0xe5
 800dfd2:	707b      	strb	r3, [r7, #1]
 800dfd4:	23b3      	movs	r3, #179	; 0xb3
 800dfd6:	70bb      	strb	r3, [r7, #2]
 800dfd8:	23d5      	movs	r3, #213	; 0xd5
 800dfda:	70fb      	strb	r3, [r7, #3]
 800dfdc:	232e      	movs	r3, #46	; 0x2e
 800dfde:	713b      	strb	r3, [r7, #4]
 800dfe0:	237f      	movs	r3, #127	; 0x7f
 800dfe2:	717b      	strb	r3, [r7, #5]
 800dfe4:	234a      	movs	r3, #74	; 0x4a
 800dfe6:	71bb      	strb	r3, [r7, #6]
 800dfe8:	2398      	movs	r3, #152	; 0x98
 800dfea:	71fb      	strb	r3, [r7, #7]
 800dfec:	232a      	movs	r3, #42	; 0x2a
 800dfee:	723b      	strb	r3, [r7, #8]
 800dff0:	2348      	movs	r3, #72	; 0x48
 800dff2:	727b      	strb	r3, [r7, #9]
 800dff4:	237a      	movs	r3, #122	; 0x7a
 800dff6:	72bb      	strb	r3, [r7, #10]
 800dff8:	23cc      	movs	r3, #204	; 0xcc
 800dffa:	72fb      	strb	r3, [r7, #11]
 800dffc:	2340      	movs	r3, #64	; 0x40
 800dffe:	733b      	strb	r3, [r7, #12]
 800e000:	23fe      	movs	r3, #254	; 0xfe
 800e002:	737b      	strb	r3, [r7, #13]
 800e004:	2300      	movs	r3, #0
 800e006:	73bb      	strb	r3, [r7, #14]
 800e008:	2300      	movs	r3, #0
 800e00a:	73fb      	strb	r3, [r7, #15]
    aci_gatt_add_service(UUID_TYPE_128,
 800e00c:	4639      	mov	r1, r7
 800e00e:	4b39      	ldr	r3, [pc, #228]	; (800e0f4 <P2PS_STM_Init+0x134>)
 800e010:	9300      	str	r3, [sp, #0]
 800e012:	2308      	movs	r3, #8
 800e014:	2201      	movs	r2, #1
 800e016:	2002      	movs	r0, #2
 800e018:	f7fe fe39 	bl	800cc8e <aci_gatt_add_service>
                      &(aPeerToPeerContext.PeerToPeerSvcHdle));

    /**
     *  Add LED Characteristic
     */
    COPY_P2P_WRITE_CHAR_UUID(uuid16.Char_UUID_128);
 800e01c:	2319      	movs	r3, #25
 800e01e:	703b      	strb	r3, [r7, #0]
 800e020:	23ed      	movs	r3, #237	; 0xed
 800e022:	707b      	strb	r3, [r7, #1]
 800e024:	2382      	movs	r3, #130	; 0x82
 800e026:	70bb      	strb	r3, [r7, #2]
 800e028:	23ae      	movs	r3, #174	; 0xae
 800e02a:	70fb      	strb	r3, [r7, #3]
 800e02c:	23ed      	movs	r3, #237	; 0xed
 800e02e:	713b      	strb	r3, [r7, #4]
 800e030:	2321      	movs	r3, #33	; 0x21
 800e032:	717b      	strb	r3, [r7, #5]
 800e034:	234c      	movs	r3, #76	; 0x4c
 800e036:	71bb      	strb	r3, [r7, #6]
 800e038:	239d      	movs	r3, #157	; 0x9d
 800e03a:	71fb      	strb	r3, [r7, #7]
 800e03c:	2341      	movs	r3, #65	; 0x41
 800e03e:	723b      	strb	r3, [r7, #8]
 800e040:	2345      	movs	r3, #69	; 0x45
 800e042:	727b      	strb	r3, [r7, #9]
 800e044:	2322      	movs	r3, #34	; 0x22
 800e046:	72bb      	strb	r3, [r7, #10]
 800e048:	238e      	movs	r3, #142	; 0x8e
 800e04a:	72fb      	strb	r3, [r7, #11]
 800e04c:	2341      	movs	r3, #65	; 0x41
 800e04e:	733b      	strb	r3, [r7, #12]
 800e050:	23fe      	movs	r3, #254	; 0xfe
 800e052:	737b      	strb	r3, [r7, #13]
 800e054:	2300      	movs	r3, #0
 800e056:	73bb      	strb	r3, [r7, #14]
 800e058:	2300      	movs	r3, #0
 800e05a:	73fb      	strb	r3, [r7, #15]
    aci_gatt_add_char(aPeerToPeerContext.PeerToPeerSvcHdle,
 800e05c:	4b25      	ldr	r3, [pc, #148]	; (800e0f4 <P2PS_STM_Init+0x134>)
 800e05e:	8818      	ldrh	r0, [r3, #0]
 800e060:	463a      	mov	r2, r7
 800e062:	4b25      	ldr	r3, [pc, #148]	; (800e0f8 <P2PS_STM_Init+0x138>)
 800e064:	9305      	str	r3, [sp, #20]
 800e066:	2301      	movs	r3, #1
 800e068:	9304      	str	r3, [sp, #16]
 800e06a:	230a      	movs	r3, #10
 800e06c:	9303      	str	r3, [sp, #12]
 800e06e:	2301      	movs	r3, #1
 800e070:	9302      	str	r3, [sp, #8]
 800e072:	2300      	movs	r3, #0
 800e074:	9301      	str	r3, [sp, #4]
 800e076:	2306      	movs	r3, #6
 800e078:	9300      	str	r3, [sp, #0]
 800e07a:	2314      	movs	r3, #20
 800e07c:	2102      	movs	r1, #2
 800e07e:	f7fe feb5 	bl	800cdec <aci_gatt_add_char>
                      &(aPeerToPeerContext.P2PWriteClientToServerCharHdle));

    /**
     *   Add Button Characteristic
     */
    COPY_P2P_NOTIFY_UUID(uuid16.Char_UUID_128);
 800e082:	2319      	movs	r3, #25
 800e084:	703b      	strb	r3, [r7, #0]
 800e086:	23ed      	movs	r3, #237	; 0xed
 800e088:	707b      	strb	r3, [r7, #1]
 800e08a:	2382      	movs	r3, #130	; 0x82
 800e08c:	70bb      	strb	r3, [r7, #2]
 800e08e:	23ae      	movs	r3, #174	; 0xae
 800e090:	70fb      	strb	r3, [r7, #3]
 800e092:	23ed      	movs	r3, #237	; 0xed
 800e094:	713b      	strb	r3, [r7, #4]
 800e096:	2321      	movs	r3, #33	; 0x21
 800e098:	717b      	strb	r3, [r7, #5]
 800e09a:	234c      	movs	r3, #76	; 0x4c
 800e09c:	71bb      	strb	r3, [r7, #6]
 800e09e:	239d      	movs	r3, #157	; 0x9d
 800e0a0:	71fb      	strb	r3, [r7, #7]
 800e0a2:	2341      	movs	r3, #65	; 0x41
 800e0a4:	723b      	strb	r3, [r7, #8]
 800e0a6:	2345      	movs	r3, #69	; 0x45
 800e0a8:	727b      	strb	r3, [r7, #9]
 800e0aa:	2322      	movs	r3, #34	; 0x22
 800e0ac:	72bb      	strb	r3, [r7, #10]
 800e0ae:	238e      	movs	r3, #142	; 0x8e
 800e0b0:	72fb      	strb	r3, [r7, #11]
 800e0b2:	2342      	movs	r3, #66	; 0x42
 800e0b4:	733b      	strb	r3, [r7, #12]
 800e0b6:	23fe      	movs	r3, #254	; 0xfe
 800e0b8:	737b      	strb	r3, [r7, #13]
 800e0ba:	2300      	movs	r3, #0
 800e0bc:	73bb      	strb	r3, [r7, #14]
 800e0be:	2300      	movs	r3, #0
 800e0c0:	73fb      	strb	r3, [r7, #15]
    aci_gatt_add_char(aPeerToPeerContext.PeerToPeerSvcHdle,
 800e0c2:	4b0c      	ldr	r3, [pc, #48]	; (800e0f4 <P2PS_STM_Init+0x134>)
 800e0c4:	8818      	ldrh	r0, [r3, #0]
 800e0c6:	463a      	mov	r2, r7
 800e0c8:	4b0c      	ldr	r3, [pc, #48]	; (800e0fc <P2PS_STM_Init+0x13c>)
 800e0ca:	9305      	str	r3, [sp, #20]
 800e0cc:	2301      	movs	r3, #1
 800e0ce:	9304      	str	r3, [sp, #16]
 800e0d0:	230a      	movs	r3, #10
 800e0d2:	9303      	str	r3, [sp, #12]
 800e0d4:	2301      	movs	r3, #1
 800e0d6:	9302      	str	r3, [sp, #8]
 800e0d8:	2300      	movs	r3, #0
 800e0da:	9301      	str	r3, [sp, #4]
 800e0dc:	2310      	movs	r3, #16
 800e0de:	9300      	str	r3, [sp, #0]
 800e0e0:	2314      	movs	r3, #20
 800e0e2:	2102      	movs	r1, #2
 800e0e4:	f7fe fe82 	bl	800cdec <aci_gatt_add_char>
                      0,
                      &(aPeerToPeerContext.RebootReqCharHdle));
#endif


  return;
 800e0e8:	bf00      	nop
}
 800e0ea:	3710      	adds	r7, #16
 800e0ec:	46bd      	mov	sp, r7
 800e0ee:	bd80      	pop	{r7, pc}
 800e0f0:	0800defd 	.word	0x0800defd
 800e0f4:	2000036c 	.word	0x2000036c
 800e0f8:	2000036e 	.word	0x2000036e
 800e0fc:	20000370 	.word	0x20000370

0800e100 <P2PS_STM_App_Update_Int8>:

  return result;
}

tBleStatus P2PS_STM_App_Update_Int8(uint16_t UUID, uint8_t *pPayload, uint8_t num_bytes)
{
 800e100:	b580      	push	{r7, lr}
 800e102:	b086      	sub	sp, #24
 800e104:	af02      	add	r7, sp, #8
 800e106:	4603      	mov	r3, r0
 800e108:	6039      	str	r1, [r7, #0]
 800e10a:	80fb      	strh	r3, [r7, #6]
 800e10c:	4613      	mov	r3, r2
 800e10e:	717b      	strb	r3, [r7, #5]
  tBleStatus result = BLE_STATUS_INVALID_PARAMS;
 800e110:	2342      	movs	r3, #66	; 0x42
 800e112:	73fb      	strb	r3, [r7, #15]
  switch(UUID)
 800e114:	88fb      	ldrh	r3, [r7, #6]
 800e116:	f64f 6242 	movw	r2, #65090	; 0xfe42
 800e11a:	4293      	cmp	r3, r2
 800e11c:	d000      	beq.n	800e120 <P2PS_STM_App_Update_Int8+0x20>
                             (uint8_t *)  pPayload);

      break;

    default:
      break;
 800e11e:	e00d      	b.n	800e13c <P2PS_STM_App_Update_Int8+0x3c>
     result = aci_gatt_update_char_value(aPeerToPeerContext.PeerToPeerSvcHdle,
 800e120:	4b09      	ldr	r3, [pc, #36]	; (800e148 <P2PS_STM_App_Update_Int8+0x48>)
 800e122:	8818      	ldrh	r0, [r3, #0]
 800e124:	4b08      	ldr	r3, [pc, #32]	; (800e148 <P2PS_STM_App_Update_Int8+0x48>)
 800e126:	8899      	ldrh	r1, [r3, #4]
 800e128:	797a      	ldrb	r2, [r7, #5]
 800e12a:	683b      	ldr	r3, [r7, #0]
 800e12c:	9300      	str	r3, [sp, #0]
 800e12e:	4613      	mov	r3, r2
 800e130:	2200      	movs	r2, #0
 800e132:	f7fe ff45 	bl	800cfc0 <aci_gatt_update_char_value>
 800e136:	4603      	mov	r3, r0
 800e138:	73fb      	strb	r3, [r7, #15]
      break;
 800e13a:	bf00      	nop
  }

  return result;
 800e13c:	7bfb      	ldrb	r3, [r7, #15]
}/* end P2PS_STM_Init() */
 800e13e:	4618      	mov	r0, r3
 800e140:	3710      	adds	r7, #16
 800e142:	46bd      	mov	sp, r7
 800e144:	bd80      	pop	{r7, pc}
 800e146:	bf00      	nop
 800e148:	2000036c 	.word	0x2000036c

0800e14c <DbgTrace_TxCpltCallback>:
 * @note   Indicate the end of the transmission of a DBG_TRACE trace buffer to DBG_TRACE USART. If queue
 *         contains new trace data to transmit, start a new transmission.
 * @retval None
 */
static void DbgTrace_TxCpltCallback(void)
{
 800e14c:	b580      	push	{r7, lr}
 800e14e:	b086      	sub	sp, #24
 800e150:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e152:	f3ef 8310 	mrs	r3, PRIMASK
 800e156:	60fb      	str	r3, [r7, #12]
  return(result);
 800e158:	68fb      	ldr	r3, [r7, #12]
#if (DBG_TRACE_USE_CIRCULAR_QUEUE != 0)
  uint8_t* buf;
  uint16_t bufSize;

  BACKUP_PRIMASK();
 800e15a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800e15c:	b672      	cpsid	i

  DISABLE_IRQ();			/**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  /* Remove element just sent to UART */
  CircularQueue_Remove(&MsgDbgTraceQueue,&bufSize);
 800e15e:	1cbb      	adds	r3, r7, #2
 800e160:	4619      	mov	r1, r3
 800e162:	4812      	ldr	r0, [pc, #72]	; (800e1ac <DbgTrace_TxCpltCallback+0x60>)
 800e164:	f000 fbd7 	bl	800e916 <CircularQueue_Remove>

  /* Sense if new data to be sent */
  buf=CircularQueue_Sense(&MsgDbgTraceQueue,&bufSize);
 800e168:	1cbb      	adds	r3, r7, #2
 800e16a:	4619      	mov	r1, r3
 800e16c:	480f      	ldr	r0, [pc, #60]	; (800e1ac <DbgTrace_TxCpltCallback+0x60>)
 800e16e:	f000 fcc6 	bl	800eafe <CircularQueue_Sense>
 800e172:	6138      	str	r0, [r7, #16]


  if ( buf != NULL) 
 800e174:	693b      	ldr	r3, [r7, #16]
 800e176:	2b00      	cmp	r3, #0
 800e178:	d00b      	beq.n	800e192 <DbgTrace_TxCpltCallback+0x46>
 800e17a:	697b      	ldr	r3, [r7, #20]
 800e17c:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e17e:	68bb      	ldr	r3, [r7, #8]
 800e180:	f383 8810 	msr	PRIMASK, r3
  {
    RESTORE_PRIMASK();
    DbgOutputTraces((uint8_t*)buf, bufSize, DbgTrace_TxCpltCallback);
 800e184:	887b      	ldrh	r3, [r7, #2]
 800e186:	4a0a      	ldr	r2, [pc, #40]	; (800e1b0 <DbgTrace_TxCpltCallback+0x64>)
 800e188:	4619      	mov	r1, r3
 800e18a:	6938      	ldr	r0, [r7, #16]
 800e18c:	f7f4 f8c3 	bl	8002316 <DbgOutputTraces>

  DbgTracePeripheralReady = SET;

  RESTORE_PRIMASK();
#endif
}
 800e190:	e007      	b.n	800e1a2 <DbgTrace_TxCpltCallback+0x56>
    DbgTracePeripheralReady = SET;
 800e192:	4b08      	ldr	r3, [pc, #32]	; (800e1b4 <DbgTrace_TxCpltCallback+0x68>)
 800e194:	2201      	movs	r2, #1
 800e196:	701a      	strb	r2, [r3, #0]
 800e198:	697b      	ldr	r3, [r7, #20]
 800e19a:	607b      	str	r3, [r7, #4]
 800e19c:	687b      	ldr	r3, [r7, #4]
 800e19e:	f383 8810 	msr	PRIMASK, r3
}
 800e1a2:	bf00      	nop
 800e1a4:	3718      	adds	r7, #24
 800e1a6:	46bd      	mov	sp, r7
 800e1a8:	bd80      	pop	{r7, pc}
 800e1aa:	bf00      	nop
 800e1ac:	2000042c 	.word	0x2000042c
 800e1b0:	0800e14d 	.word	0x0800e14d
 800e1b4:	2000001d 	.word	0x2000001d

0800e1b8 <DbgTraceInit>:
#endif

void DbgTraceInit( void )
{
 800e1b8:	b580      	push	{r7, lr}
 800e1ba:	b082      	sub	sp, #8
 800e1bc:	af02      	add	r7, sp, #8
#if (( CFG_DEBUG_TRACE_FULL != 0 ) || ( CFG_DEBUG_TRACE_LIGHT != 0 ))
  DbgOutputInit();
 800e1be:	f7f4 f8a4 	bl	800230a <DbgOutputInit>
#if (DBG_TRACE_USE_CIRCULAR_QUEUE != 0)
  CircularQueue_Init(&MsgDbgTraceQueue, MsgDbgTraceQueueBuff, DBG_TRACE_MSG_QUEUE_SIZE, 0, CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG);
 800e1c2:	2302      	movs	r3, #2
 800e1c4:	9300      	str	r3, [sp, #0]
 800e1c6:	2300      	movs	r3, #0
 800e1c8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800e1cc:	4903      	ldr	r1, [pc, #12]	; (800e1dc <DbgTraceInit+0x24>)
 800e1ce:	4804      	ldr	r0, [pc, #16]	; (800e1e0 <DbgTraceInit+0x28>)
 800e1d0:	f000 f948 	bl	800e464 <CircularQueue_Init>
#endif 
#endif
  return;
 800e1d4:	bf00      	nop
}
 800e1d6:	46bd      	mov	sp, r7
 800e1d8:	bd80      	pop	{r7, pc}
 800e1da:	bf00      	nop
 800e1dc:	2000044c 	.word	0x2000044c
 800e1e0:	2000042c 	.word	0x2000042c

0800e1e4 <_write>:
 * @param	bufsize buffer size
 * @param	...: arguments to be formatted in format string
 * @retval none
 */
size_t _write(int handle, const unsigned char * buf, size_t bufSize)
{
 800e1e4:	b580      	push	{r7, lr}
 800e1e6:	b084      	sub	sp, #16
 800e1e8:	af00      	add	r7, sp, #0
 800e1ea:	60f8      	str	r0, [r7, #12]
 800e1ec:	60b9      	str	r1, [r7, #8]
 800e1ee:	607a      	str	r2, [r7, #4]
  return ( DbgTraceWrite(handle, buf, bufSize) );
 800e1f0:	687a      	ldr	r2, [r7, #4]
 800e1f2:	68b9      	ldr	r1, [r7, #8]
 800e1f4:	68f8      	ldr	r0, [r7, #12]
 800e1f6:	f000 f805 	bl	800e204 <DbgTraceWrite>
 800e1fa:	4603      	mov	r3, r0
}
 800e1fc:	4618      	mov	r0, r3
 800e1fe:	3710      	adds	r7, #16
 800e200:	46bd      	mov	sp, r7
 800e202:	bd80      	pop	{r7, pc}

0800e204 <DbgTraceWrite>:
 * @param buf buffer to write
 * @param bufsize buffer size
 * @retval Number of elements written
 */
size_t DbgTraceWrite(int handle, const unsigned char * buf, size_t bufSize)
{
 800e204:	b580      	push	{r7, lr}
 800e206:	b08a      	sub	sp, #40	; 0x28
 800e208:	af00      	add	r7, sp, #0
 800e20a:	60f8      	str	r0, [r7, #12]
 800e20c:	60b9      	str	r1, [r7, #8]
 800e20e:	607a      	str	r2, [r7, #4]
  size_t chars_written = 0;
 800e210:	2300      	movs	r3, #0
 800e212:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e214:	f3ef 8310 	mrs	r3, PRIMASK
 800e218:	61bb      	str	r3, [r7, #24]
  return(result);
 800e21a:	69bb      	ldr	r3, [r7, #24]
  uint8_t* buffer;

  BACKUP_PRIMASK();
 800e21c:	623b      	str	r3, [r7, #32]

  /* Ignore flushes */
  if ( handle == -1 )
 800e21e:	68fb      	ldr	r3, [r7, #12]
 800e220:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e224:	d102      	bne.n	800e22c <DbgTraceWrite+0x28>
  {
    chars_written = ( size_t ) 0;
 800e226:	2300      	movs	r3, #0
 800e228:	627b      	str	r3, [r7, #36]	; 0x24
 800e22a:	e034      	b.n	800e296 <DbgTraceWrite+0x92>
  }
  /* Only allow stdout/stderr output */
  else if ( ( handle != 1 ) && ( handle != 2 ) )
 800e22c:	68fb      	ldr	r3, [r7, #12]
 800e22e:	2b01      	cmp	r3, #1
 800e230:	d006      	beq.n	800e240 <DbgTraceWrite+0x3c>
 800e232:	68fb      	ldr	r3, [r7, #12]
 800e234:	2b02      	cmp	r3, #2
 800e236:	d003      	beq.n	800e240 <DbgTraceWrite+0x3c>
  {
    chars_written = ( size_t ) - 1;
 800e238:	f04f 33ff 	mov.w	r3, #4294967295
 800e23c:	627b      	str	r3, [r7, #36]	; 0x24
 800e23e:	e02a      	b.n	800e296 <DbgTraceWrite+0x92>
  }
  /* Parameters OK, call the low-level character output routine */
  else if (bufSize != 0)
 800e240:	687b      	ldr	r3, [r7, #4]
 800e242:	2b00      	cmp	r3, #0
 800e244:	d027      	beq.n	800e296 <DbgTraceWrite+0x92>
  {
    chars_written = bufSize;
 800e246:	687b      	ldr	r3, [r7, #4]
 800e248:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("cpsid i" : : : "memory");
 800e24a:	b672      	cpsid	i
    /* If queue emepty and TX free, send directly */
    /* CS Start */

#if (DBG_TRACE_USE_CIRCULAR_QUEUE != 0)
    DISABLE_IRQ();      /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
    buffer=CircularQueue_Add(&MsgDbgTraceQueue,(uint8_t*)buf, bufSize,1);
 800e24c:	687b      	ldr	r3, [r7, #4]
 800e24e:	b29a      	uxth	r2, r3
 800e250:	2301      	movs	r3, #1
 800e252:	68b9      	ldr	r1, [r7, #8]
 800e254:	4812      	ldr	r0, [pc, #72]	; (800e2a0 <DbgTraceWrite+0x9c>)
 800e256:	f000 f937 	bl	800e4c8 <CircularQueue_Add>
 800e25a:	61f8      	str	r0, [r7, #28]
    if (buffer && DbgTracePeripheralReady)
 800e25c:	69fb      	ldr	r3, [r7, #28]
 800e25e:	2b00      	cmp	r3, #0
 800e260:	d014      	beq.n	800e28c <DbgTraceWrite+0x88>
 800e262:	4b10      	ldr	r3, [pc, #64]	; (800e2a4 <DbgTraceWrite+0xa0>)
 800e264:	781b      	ldrb	r3, [r3, #0]
 800e266:	b2db      	uxtb	r3, r3
 800e268:	2b00      	cmp	r3, #0
 800e26a:	d00f      	beq.n	800e28c <DbgTraceWrite+0x88>
    {
      DbgTracePeripheralReady = RESET;
 800e26c:	4b0d      	ldr	r3, [pc, #52]	; (800e2a4 <DbgTraceWrite+0xa0>)
 800e26e:	2200      	movs	r2, #0
 800e270:	701a      	strb	r2, [r3, #0]
 800e272:	6a3b      	ldr	r3, [r7, #32]
 800e274:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e276:	697b      	ldr	r3, [r7, #20]
 800e278:	f383 8810 	msr	PRIMASK, r3
      RESTORE_PRIMASK();
      DbgOutputTraces((uint8_t*)buffer, bufSize, DbgTrace_TxCpltCallback);
 800e27c:	687b      	ldr	r3, [r7, #4]
 800e27e:	b29b      	uxth	r3, r3
 800e280:	4a09      	ldr	r2, [pc, #36]	; (800e2a8 <DbgTraceWrite+0xa4>)
 800e282:	4619      	mov	r1, r3
 800e284:	69f8      	ldr	r0, [r7, #28]
 800e286:	f7f4 f846 	bl	8002316 <DbgOutputTraces>
 800e28a:	e004      	b.n	800e296 <DbgTraceWrite+0x92>
 800e28c:	6a3b      	ldr	r3, [r7, #32]
 800e28e:	613b      	str	r3, [r7, #16]
 800e290:	693b      	ldr	r3, [r7, #16]
 800e292:	f383 8810 	msr	PRIMASK, r3
    DbgOutputTraces((uint8_t*)buf, bufSize, DbgTrace_TxCpltCallback);
    while (!DbgTracePeripheralReady);
#endif
    /* CS END */
  }
  return ( chars_written );
 800e296:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800e298:	4618      	mov	r0, r3
 800e29a:	3728      	adds	r7, #40	; 0x28
 800e29c:	46bd      	mov	sp, r7
 800e29e:	bd80      	pop	{r7, pc}
 800e2a0:	2000042c 	.word	0x2000042c
 800e2a4:	2000001d 	.word	0x2000001d
 800e2a8:	0800e14d 	.word	0x0800e14d

0800e2ac <OTP_Read>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

uint8_t * OTP_Read( uint8_t id )
{
 800e2ac:	b480      	push	{r7}
 800e2ae:	b085      	sub	sp, #20
 800e2b0:	af00      	add	r7, sp, #0
 800e2b2:	4603      	mov	r3, r0
 800e2b4:	71fb      	strb	r3, [r7, #7]
  uint8_t *p_id;

  p_id = (uint8_t*)(CFG_OTP_END_ADRESS - 7) ;
 800e2b6:	4b0f      	ldr	r3, [pc, #60]	; (800e2f4 <OTP_Read+0x48>)
 800e2b8:	60fb      	str	r3, [r7, #12]

  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 800e2ba:	e002      	b.n	800e2c2 <OTP_Read+0x16>
  {
    p_id -= 8 ;
 800e2bc:	68fb      	ldr	r3, [r7, #12]
 800e2be:	3b08      	subs	r3, #8
 800e2c0:	60fb      	str	r3, [r7, #12]
  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 800e2c2:	68fb      	ldr	r3, [r7, #12]
 800e2c4:	3307      	adds	r3, #7
 800e2c6:	781b      	ldrb	r3, [r3, #0]
 800e2c8:	79fa      	ldrb	r2, [r7, #7]
 800e2ca:	429a      	cmp	r2, r3
 800e2cc:	d003      	beq.n	800e2d6 <OTP_Read+0x2a>
 800e2ce:	68fb      	ldr	r3, [r7, #12]
 800e2d0:	4a09      	ldr	r2, [pc, #36]	; (800e2f8 <OTP_Read+0x4c>)
 800e2d2:	4293      	cmp	r3, r2
 800e2d4:	d1f2      	bne.n	800e2bc <OTP_Read+0x10>
  }

  if((*( p_id + 7 )) != id)
 800e2d6:	68fb      	ldr	r3, [r7, #12]
 800e2d8:	3307      	adds	r3, #7
 800e2da:	781b      	ldrb	r3, [r3, #0]
 800e2dc:	79fa      	ldrb	r2, [r7, #7]
 800e2de:	429a      	cmp	r2, r3
 800e2e0:	d001      	beq.n	800e2e6 <OTP_Read+0x3a>
  {
    p_id = 0 ;
 800e2e2:	2300      	movs	r3, #0
 800e2e4:	60fb      	str	r3, [r7, #12]
  }

  return p_id ;
 800e2e6:	68fb      	ldr	r3, [r7, #12]
}
 800e2e8:	4618      	mov	r0, r3
 800e2ea:	3714      	adds	r7, #20
 800e2ec:	46bd      	mov	sp, r7
 800e2ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2f2:	4770      	bx	lr
 800e2f4:	1fff73f8 	.word	0x1fff73f8
 800e2f8:	1fff7000 	.word	0x1fff7000

0800e2fc <LST_init_head>:

/******************************************************************************
 * Function Definitions 
 ******************************************************************************/
void LST_init_head (tListNode * listHead)
{
 800e2fc:	b480      	push	{r7}
 800e2fe:	b083      	sub	sp, #12
 800e300:	af00      	add	r7, sp, #0
 800e302:	6078      	str	r0, [r7, #4]
  listHead->next = listHead;
 800e304:	687b      	ldr	r3, [r7, #4]
 800e306:	687a      	ldr	r2, [r7, #4]
 800e308:	601a      	str	r2, [r3, #0]
  listHead->prev = listHead;
 800e30a:	687b      	ldr	r3, [r7, #4]
 800e30c:	687a      	ldr	r2, [r7, #4]
 800e30e:	605a      	str	r2, [r3, #4]
}
 800e310:	bf00      	nop
 800e312:	370c      	adds	r7, #12
 800e314:	46bd      	mov	sp, r7
 800e316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e31a:	4770      	bx	lr

0800e31c <LST_is_empty>:

uint8_t LST_is_empty (tListNode * listHead)
{
 800e31c:	b480      	push	{r7}
 800e31e:	b087      	sub	sp, #28
 800e320:	af00      	add	r7, sp, #0
 800e322:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e324:	f3ef 8310 	mrs	r3, PRIMASK
 800e328:	60fb      	str	r3, [r7, #12]
  return(result);
 800e32a:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;
  uint8_t return_value;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800e32c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800e32e:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  if(listHead->next == listHead)
 800e330:	687b      	ldr	r3, [r7, #4]
 800e332:	681b      	ldr	r3, [r3, #0]
 800e334:	687a      	ldr	r2, [r7, #4]
 800e336:	429a      	cmp	r2, r3
 800e338:	d102      	bne.n	800e340 <LST_is_empty+0x24>
  {
    return_value = TRUE;
 800e33a:	2301      	movs	r3, #1
 800e33c:	75fb      	strb	r3, [r7, #23]
 800e33e:	e001      	b.n	800e344 <LST_is_empty+0x28>
  }
  else
  {
    return_value = FALSE;
 800e340:	2300      	movs	r3, #0
 800e342:	75fb      	strb	r3, [r7, #23]
 800e344:	693b      	ldr	r3, [r7, #16]
 800e346:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e348:	68bb      	ldr	r3, [r7, #8]
 800e34a:	f383 8810 	msr	PRIMASK, r3
  }
  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/

  return return_value;
 800e34e:	7dfb      	ldrb	r3, [r7, #23]
}
 800e350:	4618      	mov	r0, r3
 800e352:	371c      	adds	r7, #28
 800e354:	46bd      	mov	sp, r7
 800e356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e35a:	4770      	bx	lr

0800e35c <LST_insert_head>:

void LST_insert_head (tListNode * listHead, tListNode * node)
{
 800e35c:	b480      	push	{r7}
 800e35e:	b087      	sub	sp, #28
 800e360:	af00      	add	r7, sp, #0
 800e362:	6078      	str	r0, [r7, #4]
 800e364:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e366:	f3ef 8310 	mrs	r3, PRIMASK
 800e36a:	60fb      	str	r3, [r7, #12]
  return(result);
 800e36c:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800e36e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800e370:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead->next;
 800e372:	687b      	ldr	r3, [r7, #4]
 800e374:	681a      	ldr	r2, [r3, #0]
 800e376:	683b      	ldr	r3, [r7, #0]
 800e378:	601a      	str	r2, [r3, #0]
  node->prev = listHead;
 800e37a:	683b      	ldr	r3, [r7, #0]
 800e37c:	687a      	ldr	r2, [r7, #4]
 800e37e:	605a      	str	r2, [r3, #4]
  listHead->next = node;
 800e380:	687b      	ldr	r3, [r7, #4]
 800e382:	683a      	ldr	r2, [r7, #0]
 800e384:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node;
 800e386:	683b      	ldr	r3, [r7, #0]
 800e388:	681b      	ldr	r3, [r3, #0]
 800e38a:	683a      	ldr	r2, [r7, #0]
 800e38c:	605a      	str	r2, [r3, #4]
 800e38e:	697b      	ldr	r3, [r7, #20]
 800e390:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e392:	693b      	ldr	r3, [r7, #16]
 800e394:	f383 8810 	msr	PRIMASK, r3

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800e398:	bf00      	nop
 800e39a:	371c      	adds	r7, #28
 800e39c:	46bd      	mov	sp, r7
 800e39e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3a2:	4770      	bx	lr

0800e3a4 <LST_insert_tail>:


void LST_insert_tail (tListNode * listHead, tListNode * node)
{
 800e3a4:	b480      	push	{r7}
 800e3a6:	b087      	sub	sp, #28
 800e3a8:	af00      	add	r7, sp, #0
 800e3aa:	6078      	str	r0, [r7, #4]
 800e3ac:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e3ae:	f3ef 8310 	mrs	r3, PRIMASK
 800e3b2:	60fb      	str	r3, [r7, #12]
  return(result);
 800e3b4:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800e3b6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800e3b8:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead;
 800e3ba:	683b      	ldr	r3, [r7, #0]
 800e3bc:	687a      	ldr	r2, [r7, #4]
 800e3be:	601a      	str	r2, [r3, #0]
  node->prev = listHead->prev;
 800e3c0:	687b      	ldr	r3, [r7, #4]
 800e3c2:	685a      	ldr	r2, [r3, #4]
 800e3c4:	683b      	ldr	r3, [r7, #0]
 800e3c6:	605a      	str	r2, [r3, #4]
  listHead->prev = node;
 800e3c8:	687b      	ldr	r3, [r7, #4]
 800e3ca:	683a      	ldr	r2, [r7, #0]
 800e3cc:	605a      	str	r2, [r3, #4]
  (node->prev)->next = node;
 800e3ce:	683b      	ldr	r3, [r7, #0]
 800e3d0:	685b      	ldr	r3, [r3, #4]
 800e3d2:	683a      	ldr	r2, [r7, #0]
 800e3d4:	601a      	str	r2, [r3, #0]
 800e3d6:	697b      	ldr	r3, [r7, #20]
 800e3d8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e3da:	693b      	ldr	r3, [r7, #16]
 800e3dc:	f383 8810 	msr	PRIMASK, r3

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800e3e0:	bf00      	nop
 800e3e2:	371c      	adds	r7, #28
 800e3e4:	46bd      	mov	sp, r7
 800e3e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3ea:	4770      	bx	lr

0800e3ec <LST_remove_node>:


void LST_remove_node (tListNode * node)
{
 800e3ec:	b480      	push	{r7}
 800e3ee:	b087      	sub	sp, #28
 800e3f0:	af00      	add	r7, sp, #0
 800e3f2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e3f4:	f3ef 8310 	mrs	r3, PRIMASK
 800e3f8:	60fb      	str	r3, [r7, #12]
  return(result);
 800e3fa:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800e3fc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800e3fe:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  (node->prev)->next = node->next;
 800e400:	687b      	ldr	r3, [r7, #4]
 800e402:	685b      	ldr	r3, [r3, #4]
 800e404:	687a      	ldr	r2, [r7, #4]
 800e406:	6812      	ldr	r2, [r2, #0]
 800e408:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node->prev;
 800e40a:	687b      	ldr	r3, [r7, #4]
 800e40c:	681b      	ldr	r3, [r3, #0]
 800e40e:	687a      	ldr	r2, [r7, #4]
 800e410:	6852      	ldr	r2, [r2, #4]
 800e412:	605a      	str	r2, [r3, #4]
 800e414:	697b      	ldr	r3, [r7, #20]
 800e416:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e418:	693b      	ldr	r3, [r7, #16]
 800e41a:	f383 8810 	msr	PRIMASK, r3

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800e41e:	bf00      	nop
 800e420:	371c      	adds	r7, #28
 800e422:	46bd      	mov	sp, r7
 800e424:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e428:	4770      	bx	lr

0800e42a <LST_remove_head>:


void LST_remove_head (tListNode * listHead, tListNode ** node )
{
 800e42a:	b580      	push	{r7, lr}
 800e42c:	b086      	sub	sp, #24
 800e42e:	af00      	add	r7, sp, #0
 800e430:	6078      	str	r0, [r7, #4]
 800e432:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e434:	f3ef 8310 	mrs	r3, PRIMASK
 800e438:	60fb      	str	r3, [r7, #12]
  return(result);
 800e43a:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800e43c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800e43e:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  *node = listHead->next;
 800e440:	687b      	ldr	r3, [r7, #4]
 800e442:	681a      	ldr	r2, [r3, #0]
 800e444:	683b      	ldr	r3, [r7, #0]
 800e446:	601a      	str	r2, [r3, #0]
  LST_remove_node (listHead->next);
 800e448:	687b      	ldr	r3, [r7, #4]
 800e44a:	681b      	ldr	r3, [r3, #0]
 800e44c:	4618      	mov	r0, r3
 800e44e:	f7ff ffcd 	bl	800e3ec <LST_remove_node>
 800e452:	697b      	ldr	r3, [r7, #20]
 800e454:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e456:	693b      	ldr	r3, [r7, #16]
 800e458:	f383 8810 	msr	PRIMASK, r3

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800e45c:	bf00      	nop
 800e45e:	3718      	adds	r7, #24
 800e460:	46bd      	mov	sp, r7
 800e462:	bd80      	pop	{r7, pc}

0800e464 <CircularQueue_Init>:
  * @param  queueSize:  Size of Queue Buffer
  * @param  elementSize: Size of an element in the queue. if =0, the queue will manage variable sizze elements
  * @retval   always 0
  */
int CircularQueue_Init(queue_t *q, uint8_t* queueBuffer, uint32_t queueSize, uint16_t elementSize, uint8_t optionFlags)
{
 800e464:	b480      	push	{r7}
 800e466:	b085      	sub	sp, #20
 800e468:	af00      	add	r7, sp, #0
 800e46a:	60f8      	str	r0, [r7, #12]
 800e46c:	60b9      	str	r1, [r7, #8]
 800e46e:	607a      	str	r2, [r7, #4]
 800e470:	807b      	strh	r3, [r7, #2]
  q->qBuff = queueBuffer;
 800e472:	68fb      	ldr	r3, [r7, #12]
 800e474:	68ba      	ldr	r2, [r7, #8]
 800e476:	601a      	str	r2, [r3, #0]
  q->first = 0;
 800e478:	68fb      	ldr	r3, [r7, #12]
 800e47a:	2200      	movs	r2, #0
 800e47c:	60da      	str	r2, [r3, #12]
  q->last = 0; /* queueSize-1; */
 800e47e:	68fb      	ldr	r3, [r7, #12]
 800e480:	2200      	movs	r2, #0
 800e482:	611a      	str	r2, [r3, #16]
  q->byteCount = 0;
 800e484:	68fb      	ldr	r3, [r7, #12]
 800e486:	2200      	movs	r2, #0
 800e488:	615a      	str	r2, [r3, #20]
  q->elementCount = 0;
 800e48a:	68fb      	ldr	r3, [r7, #12]
 800e48c:	2200      	movs	r2, #0
 800e48e:	619a      	str	r2, [r3, #24]
  q->queueMaxSize = queueSize;
 800e490:	68fb      	ldr	r3, [r7, #12]
 800e492:	687a      	ldr	r2, [r7, #4]
 800e494:	605a      	str	r2, [r3, #4]
  q->elementSize = elementSize;
 800e496:	68fb      	ldr	r3, [r7, #12]
 800e498:	887a      	ldrh	r2, [r7, #2]
 800e49a:	811a      	strh	r2, [r3, #8]
  q->optionFlags = optionFlags;
 800e49c:	68fb      	ldr	r3, [r7, #12]
 800e49e:	7e3a      	ldrb	r2, [r7, #24]
 800e4a0:	771a      	strb	r2, [r3, #28]

   if ((optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG) && q-> elementSize)
 800e4a2:	7e3b      	ldrb	r3, [r7, #24]
 800e4a4:	f003 0302 	and.w	r3, r3, #2
 800e4a8:	2b00      	cmp	r3, #0
 800e4aa:	d006      	beq.n	800e4ba <CircularQueue_Init+0x56>
 800e4ac:	68fb      	ldr	r3, [r7, #12]
 800e4ae:	891b      	ldrh	r3, [r3, #8]
 800e4b0:	2b00      	cmp	r3, #0
 800e4b2:	d002      	beq.n	800e4ba <CircularQueue_Init+0x56>
   {
    /* can not deal with splitting at the end of buffer with fixed size element */
    return -1;
 800e4b4:	f04f 33ff 	mov.w	r3, #4294967295
 800e4b8:	e000      	b.n	800e4bc <CircularQueue_Init+0x58>
  }
  return 0;
 800e4ba:	2300      	movs	r3, #0
}
 800e4bc:	4618      	mov	r0, r3
 800e4be:	3714      	adds	r7, #20
 800e4c0:	46bd      	mov	sp, r7
 800e4c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4c6:	4770      	bx	lr

0800e4c8 <CircularQueue_Add>:
  * @param  elementSize:  Size of element to be added to the queue. Only used if the queue manage variable size elements
  * @param  nbElements:  number of elements in the in buffer pointed by x
  * @retval  pointer on last element just added to the queue, NULL if the element to be added do not fit in the queue (too big)
  */
uint8_t* CircularQueue_Add(queue_t *q, uint8_t* x, uint16_t elementSize, uint32_t nbElements)
{
 800e4c8:	b580      	push	{r7, lr}
 800e4ca:	b08e      	sub	sp, #56	; 0x38
 800e4cc:	af00      	add	r7, sp, #0
 800e4ce:	60f8      	str	r0, [r7, #12]
 800e4d0:	60b9      	str	r1, [r7, #8]
 800e4d2:	603b      	str	r3, [r7, #0]
 800e4d4:	4613      	mov	r3, r2
 800e4d6:	80fb      	strh	r3, [r7, #6]

  uint8_t* ptr = NULL;                      /* fct return ptr to the element freshly added, if no room fct return NULL */
 800e4d8:	2300      	movs	r3, #0
 800e4da:	623b      	str	r3, [r7, #32]
  uint16_t curElementSize = 0;              /* the size of the element currently  stored at q->last position */
 800e4dc:	2300      	movs	r3, #0
 800e4de:	86fb      	strh	r3, [r7, #54]	; 0x36
  uint8_t  elemSizeStorageRoom  = 0 ;       /* Indicate the header (which contain only size) of element in case of varaibale size elemenet (q->elementsize == 0) */
 800e4e0:	2300      	movs	r3, #0
 800e4e2:	77fb      	strb	r3, [r7, #31]
  uint32_t curBuffPosition;                  /* the current position in the queue buffer */
  uint32_t i;                               /* loop counter */
  uint32_t NbBytesToCopy = 0, NbCopiedBytes = 0 ; /* Indicators for copying bytes in queue */
 800e4e4:	2300      	movs	r3, #0
 800e4e6:	62bb      	str	r3, [r7, #40]	; 0x28
 800e4e8:	2300      	movs	r3, #0
 800e4ea:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t eob_free_size;                         /* Eof End of Quque Buffer Free Size */
  uint8_t  wrap_will_occur = 0;                   /* indicate if a wrap around will occurs */
 800e4ec:	2300      	movs	r3, #0
 800e4ee:	77bb      	strb	r3, [r7, #30]
  uint8_t  wrapped_element_eob_size;              /* In case of Wrap around, indicat size of parta of elemenet that fit at thened of the queuue  buffer */
  uint16_t overhead = 0;                          /* In case of CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG or CIRCULAR_QUEUE_NO_WRAP_FLAG options, 
 800e4f0:	2300      	movs	r3, #0
 800e4f2:	83bb      	strh	r3, [r7, #28]
                                                     indcate the size overhead that will be generated by adding the element with wrap management (split or no wrap ) */ 
  
  
  elemSizeStorageRoom  = (q->elementSize == 0) ? 2 : 0;
 800e4f4:	68fb      	ldr	r3, [r7, #12]
 800e4f6:	891b      	ldrh	r3, [r3, #8]
 800e4f8:	2b00      	cmp	r3, #0
 800e4fa:	d101      	bne.n	800e500 <CircularQueue_Add+0x38>
 800e4fc:	2302      	movs	r3, #2
 800e4fe:	e000      	b.n	800e502 <CircularQueue_Add+0x3a>
 800e500:	2300      	movs	r3, #0
 800e502:	77fb      	strb	r3, [r7, #31]
  /* retrieve the size of last element sored: the value stored at the beginning of the queue element if element size is variable otherwise take it from fixed element Size member */
  if (q->byteCount)
 800e504:	68fb      	ldr	r3, [r7, #12]
 800e506:	695b      	ldr	r3, [r3, #20]
 800e508:	2b00      	cmp	r3, #0
 800e50a:	d02a      	beq.n	800e562 <CircularQueue_Add+0x9a>
  {
    curElementSize = (q->elementSize == 0) ? q->qBuff[q->last] + ((q->qBuff[MOD((q->last+1), q->queueMaxSize)])<<8) + 2 : q->elementSize;
 800e50c:	68fb      	ldr	r3, [r7, #12]
 800e50e:	891b      	ldrh	r3, [r3, #8]
 800e510:	2b00      	cmp	r3, #0
 800e512:	d123      	bne.n	800e55c <CircularQueue_Add+0x94>
 800e514:	68fb      	ldr	r3, [r7, #12]
 800e516:	681a      	ldr	r2, [r3, #0]
 800e518:	68fb      	ldr	r3, [r7, #12]
 800e51a:	691b      	ldr	r3, [r3, #16]
 800e51c:	4413      	add	r3, r2
 800e51e:	781b      	ldrb	r3, [r3, #0]
 800e520:	b29a      	uxth	r2, r3
 800e522:	68fb      	ldr	r3, [r7, #12]
 800e524:	6819      	ldr	r1, [r3, #0]
 800e526:	68fb      	ldr	r3, [r7, #12]
 800e528:	691b      	ldr	r3, [r3, #16]
 800e52a:	1c58      	adds	r0, r3, #1
 800e52c:	68fb      	ldr	r3, [r7, #12]
 800e52e:	685b      	ldr	r3, [r3, #4]
 800e530:	4298      	cmp	r0, r3
 800e532:	d306      	bcc.n	800e542 <CircularQueue_Add+0x7a>
 800e534:	68fb      	ldr	r3, [r7, #12]
 800e536:	6918      	ldr	r0, [r3, #16]
 800e538:	68fb      	ldr	r3, [r7, #12]
 800e53a:	685b      	ldr	r3, [r3, #4]
 800e53c:	1ac3      	subs	r3, r0, r3
 800e53e:	3301      	adds	r3, #1
 800e540:	e002      	b.n	800e548 <CircularQueue_Add+0x80>
 800e542:	68fb      	ldr	r3, [r7, #12]
 800e544:	691b      	ldr	r3, [r3, #16]
 800e546:	3301      	adds	r3, #1
 800e548:	440b      	add	r3, r1
 800e54a:	781b      	ldrb	r3, [r3, #0]
 800e54c:	b29b      	uxth	r3, r3
 800e54e:	021b      	lsls	r3, r3, #8
 800e550:	b29b      	uxth	r3, r3
 800e552:	4413      	add	r3, r2
 800e554:	b29b      	uxth	r3, r3
 800e556:	3302      	adds	r3, #2
 800e558:	b29b      	uxth	r3, r3
 800e55a:	e001      	b.n	800e560 <CircularQueue_Add+0x98>
 800e55c:	68fb      	ldr	r3, [r7, #12]
 800e55e:	891b      	ldrh	r3, [r3, #8]
 800e560:	86fb      	strh	r3, [r7, #54]	; 0x36
  }
  /* if queue element have fixed size , reset the elementSize arg with fixed element size value */
  if (q->elementSize > 0)               
 800e562:	68fb      	ldr	r3, [r7, #12]
 800e564:	891b      	ldrh	r3, [r3, #8]
 800e566:	2b00      	cmp	r3, #0
 800e568:	d002      	beq.n	800e570 <CircularQueue_Add+0xa8>
  {
    elementSize = q->elementSize;
 800e56a:	68fb      	ldr	r3, [r7, #12]
 800e56c:	891b      	ldrh	r3, [r3, #8]
 800e56e:	80fb      	strh	r3, [r7, #6]
  }

   eob_free_size = (q->last >= q->first) ? q->queueMaxSize - (q->last + curElementSize) : 0;
 800e570:	68fb      	ldr	r3, [r7, #12]
 800e572:	691a      	ldr	r2, [r3, #16]
 800e574:	68fb      	ldr	r3, [r7, #12]
 800e576:	68db      	ldr	r3, [r3, #12]
 800e578:	429a      	cmp	r2, r3
 800e57a:	d307      	bcc.n	800e58c <CircularQueue_Add+0xc4>
 800e57c:	68fb      	ldr	r3, [r7, #12]
 800e57e:	685a      	ldr	r2, [r3, #4]
 800e580:	68fb      	ldr	r3, [r7, #12]
 800e582:	6919      	ldr	r1, [r3, #16]
 800e584:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800e586:	440b      	add	r3, r1
 800e588:	1ad3      	subs	r3, r2, r3
 800e58a:	e000      	b.n	800e58e <CircularQueue_Add+0xc6>
 800e58c:	2300      	movs	r3, #0
 800e58e:	61bb      	str	r3, [r7, #24]

   /* check how many bytes of wrapped element (if anay) are at end of buffer */
   wrapped_element_eob_size = (((elementSize + elemSizeStorageRoom )*nbElements) < eob_free_size) ? 0 : (eob_free_size % (elementSize + elemSizeStorageRoom));
 800e590:	88fa      	ldrh	r2, [r7, #6]
 800e592:	7ffb      	ldrb	r3, [r7, #31]
 800e594:	4413      	add	r3, r2
 800e596:	461a      	mov	r2, r3
 800e598:	683b      	ldr	r3, [r7, #0]
 800e59a:	fb03 f302 	mul.w	r3, r3, r2
 800e59e:	69ba      	ldr	r2, [r7, #24]
 800e5a0:	429a      	cmp	r2, r3
 800e5a2:	d80b      	bhi.n	800e5bc <CircularQueue_Add+0xf4>
 800e5a4:	88fa      	ldrh	r2, [r7, #6]
 800e5a6:	7ffb      	ldrb	r3, [r7, #31]
 800e5a8:	4413      	add	r3, r2
 800e5aa:	461a      	mov	r2, r3
 800e5ac:	69bb      	ldr	r3, [r7, #24]
 800e5ae:	fbb3 f1f2 	udiv	r1, r3, r2
 800e5b2:	fb02 f201 	mul.w	r2, r2, r1
 800e5b6:	1a9b      	subs	r3, r3, r2
 800e5b8:	b2db      	uxtb	r3, r3
 800e5ba:	e000      	b.n	800e5be <CircularQueue_Add+0xf6>
 800e5bc:	2300      	movs	r3, #0
 800e5be:	75fb      	strb	r3, [r7, #23]
   wrap_will_occur  = wrapped_element_eob_size > elemSizeStorageRoom;
 800e5c0:	7dfa      	ldrb	r2, [r7, #23]
 800e5c2:	7ffb      	ldrb	r3, [r7, #31]
 800e5c4:	429a      	cmp	r2, r3
 800e5c6:	bf8c      	ite	hi
 800e5c8:	2301      	movhi	r3, #1
 800e5ca:	2300      	movls	r3, #0
 800e5cc:	b2db      	uxtb	r3, r3
 800e5ce:	77bb      	strb	r3, [r7, #30]

   overhead = (wrap_will_occur && (q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG)) ? wrapped_element_eob_size : overhead;
 800e5d0:	7fbb      	ldrb	r3, [r7, #30]
 800e5d2:	2b00      	cmp	r3, #0
 800e5d4:	d008      	beq.n	800e5e8 <CircularQueue_Add+0x120>
 800e5d6:	68fb      	ldr	r3, [r7, #12]
 800e5d8:	7f1b      	ldrb	r3, [r3, #28]
 800e5da:	f003 0301 	and.w	r3, r3, #1
 800e5de:	2b00      	cmp	r3, #0
 800e5e0:	d002      	beq.n	800e5e8 <CircularQueue_Add+0x120>
 800e5e2:	7dfb      	ldrb	r3, [r7, #23]
 800e5e4:	b29b      	uxth	r3, r3
 800e5e6:	e000      	b.n	800e5ea <CircularQueue_Add+0x122>
 800e5e8:	8bbb      	ldrh	r3, [r7, #28]
 800e5ea:	83bb      	strh	r3, [r7, #28]
   overhead = (wrap_will_occur && (q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG)) ? elemSizeStorageRoom  : overhead;
 800e5ec:	7fbb      	ldrb	r3, [r7, #30]
 800e5ee:	2b00      	cmp	r3, #0
 800e5f0:	d008      	beq.n	800e604 <CircularQueue_Add+0x13c>
 800e5f2:	68fb      	ldr	r3, [r7, #12]
 800e5f4:	7f1b      	ldrb	r3, [r3, #28]
 800e5f6:	f003 0302 	and.w	r3, r3, #2
 800e5fa:	2b00      	cmp	r3, #0
 800e5fc:	d002      	beq.n	800e604 <CircularQueue_Add+0x13c>
 800e5fe:	7ffb      	ldrb	r3, [r7, #31]
 800e600:	b29b      	uxth	r3, r3
 800e602:	e000      	b.n	800e606 <CircularQueue_Add+0x13e>
 800e604:	8bbb      	ldrh	r3, [r7, #28]
 800e606:	83bb      	strh	r3, [r7, #28]
   
   
  /* Store now the elements if ennough room for all elements */
  if (elementSize && ((q->byteCount + ((elementSize + elemSizeStorageRoom )*nbElements) + overhead) <= q->queueMaxSize)) 
 800e608:	88fb      	ldrh	r3, [r7, #6]
 800e60a:	2b00      	cmp	r3, #0
 800e60c:	f000 817e 	beq.w	800e90c <CircularQueue_Add+0x444>
 800e610:	68fb      	ldr	r3, [r7, #12]
 800e612:	695a      	ldr	r2, [r3, #20]
 800e614:	88f9      	ldrh	r1, [r7, #6]
 800e616:	7ffb      	ldrb	r3, [r7, #31]
 800e618:	440b      	add	r3, r1
 800e61a:	4619      	mov	r1, r3
 800e61c:	683b      	ldr	r3, [r7, #0]
 800e61e:	fb03 f301 	mul.w	r3, r3, r1
 800e622:	441a      	add	r2, r3
 800e624:	8bbb      	ldrh	r3, [r7, #28]
 800e626:	441a      	add	r2, r3
 800e628:	68fb      	ldr	r3, [r7, #12]
 800e62a:	685b      	ldr	r3, [r3, #4]
 800e62c:	429a      	cmp	r2, r3
 800e62e:	f200 816d 	bhi.w	800e90c <CircularQueue_Add+0x444>
  { 
    /* loop to add all elements  */
    for (i=0; i < nbElements; i++) 
 800e632:	2300      	movs	r3, #0
 800e634:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e636:	e14a      	b.n	800e8ce <CircularQueue_Add+0x406>
    {
      q->last = MOD ((q->last + curElementSize),q->queueMaxSize);
 800e638:	68fb      	ldr	r3, [r7, #12]
 800e63a:	691a      	ldr	r2, [r3, #16]
 800e63c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800e63e:	441a      	add	r2, r3
 800e640:	68fb      	ldr	r3, [r7, #12]
 800e642:	685b      	ldr	r3, [r3, #4]
 800e644:	429a      	cmp	r2, r3
 800e646:	d307      	bcc.n	800e658 <CircularQueue_Add+0x190>
 800e648:	68fb      	ldr	r3, [r7, #12]
 800e64a:	691a      	ldr	r2, [r3, #16]
 800e64c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800e64e:	441a      	add	r2, r3
 800e650:	68fb      	ldr	r3, [r7, #12]
 800e652:	685b      	ldr	r3, [r3, #4]
 800e654:	1ad3      	subs	r3, r2, r3
 800e656:	e003      	b.n	800e660 <CircularQueue_Add+0x198>
 800e658:	68fb      	ldr	r3, [r7, #12]
 800e65a:	691a      	ldr	r2, [r3, #16]
 800e65c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800e65e:	4413      	add	r3, r2
 800e660:	68fa      	ldr	r2, [r7, #12]
 800e662:	6113      	str	r3, [r2, #16]
      curBuffPosition = q->last;
 800e664:	68fb      	ldr	r3, [r7, #12]
 800e666:	691b      	ldr	r3, [r3, #16]
 800e668:	633b      	str	r3, [r7, #48]	; 0x30
      
      /* store the element  */
      /* store fisrt the element size if element size is varaible */
      if (q->elementSize == 0) 
 800e66a:	68fb      	ldr	r3, [r7, #12]
 800e66c:	891b      	ldrh	r3, [r3, #8]
 800e66e:	2b00      	cmp	r3, #0
 800e670:	d130      	bne.n	800e6d4 <CircularQueue_Add+0x20c>
      {
        q->qBuff[curBuffPosition++]= elementSize & 0xFF;
 800e672:	68fb      	ldr	r3, [r7, #12]
 800e674:	681a      	ldr	r2, [r3, #0]
 800e676:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e678:	1c59      	adds	r1, r3, #1
 800e67a:	6339      	str	r1, [r7, #48]	; 0x30
 800e67c:	4413      	add	r3, r2
 800e67e:	88fa      	ldrh	r2, [r7, #6]
 800e680:	b2d2      	uxtb	r2, r2
 800e682:	701a      	strb	r2, [r3, #0]
        curBuffPosition = MOD(curBuffPosition, q->queueMaxSize);
 800e684:	68fb      	ldr	r3, [r7, #12]
 800e686:	685b      	ldr	r3, [r3, #4]
 800e688:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e68a:	429a      	cmp	r2, r3
 800e68c:	d304      	bcc.n	800e698 <CircularQueue_Add+0x1d0>
 800e68e:	68fb      	ldr	r3, [r7, #12]
 800e690:	685b      	ldr	r3, [r3, #4]
 800e692:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e694:	1ad3      	subs	r3, r2, r3
 800e696:	e000      	b.n	800e69a <CircularQueue_Add+0x1d2>
 800e698:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e69a:	633b      	str	r3, [r7, #48]	; 0x30
        q->qBuff[curBuffPosition++]= (elementSize & 0xFF00) >> 8 ;
 800e69c:	88fb      	ldrh	r3, [r7, #6]
 800e69e:	0a1b      	lsrs	r3, r3, #8
 800e6a0:	b298      	uxth	r0, r3
 800e6a2:	68fb      	ldr	r3, [r7, #12]
 800e6a4:	681a      	ldr	r2, [r3, #0]
 800e6a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e6a8:	1c59      	adds	r1, r3, #1
 800e6aa:	6339      	str	r1, [r7, #48]	; 0x30
 800e6ac:	4413      	add	r3, r2
 800e6ae:	b2c2      	uxtb	r2, r0
 800e6b0:	701a      	strb	r2, [r3, #0]
        curBuffPosition = MOD(curBuffPosition, q->queueMaxSize);
 800e6b2:	68fb      	ldr	r3, [r7, #12]
 800e6b4:	685b      	ldr	r3, [r3, #4]
 800e6b6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e6b8:	429a      	cmp	r2, r3
 800e6ba:	d304      	bcc.n	800e6c6 <CircularQueue_Add+0x1fe>
 800e6bc:	68fb      	ldr	r3, [r7, #12]
 800e6be:	685b      	ldr	r3, [r3, #4]
 800e6c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e6c2:	1ad3      	subs	r3, r2, r3
 800e6c4:	e000      	b.n	800e6c8 <CircularQueue_Add+0x200>
 800e6c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e6c8:	633b      	str	r3, [r7, #48]	; 0x30
        q->byteCount += 2;
 800e6ca:	68fb      	ldr	r3, [r7, #12]
 800e6cc:	695b      	ldr	r3, [r3, #20]
 800e6ce:	1c9a      	adds	r2, r3, #2
 800e6d0:	68fb      	ldr	r3, [r7, #12]
 800e6d2:	615a      	str	r2, [r3, #20]
      }
      
      /* Identify number of bytes of copy takeing account possible wrap, in this case NbBytesToCopy will contains size that fit at end of the queue buffer */
      NbBytesToCopy = MIN((q->queueMaxSize-curBuffPosition),elementSize);
 800e6d4:	88fa      	ldrh	r2, [r7, #6]
 800e6d6:	68fb      	ldr	r3, [r7, #12]
 800e6d8:	6859      	ldr	r1, [r3, #4]
 800e6da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e6dc:	1acb      	subs	r3, r1, r3
 800e6de:	4293      	cmp	r3, r2
 800e6e0:	bf28      	it	cs
 800e6e2:	4613      	movcs	r3, r2
 800e6e4:	62bb      	str	r3, [r7, #40]	; 0x28
      /* check if no wrap (NbBytesToCopy == elementSize) or if Wrap and no spsicf option; 
         In thi case part of data will copied at the end of the buffer and the rest a the beggining */
      if ((NbBytesToCopy == elementSize) || ((NbBytesToCopy < elementSize) && (q->optionFlags == CIRCULAR_QUEUE_NO_FLAG)))
 800e6e6:	88fb      	ldrh	r3, [r7, #6]
 800e6e8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e6ea:	429a      	cmp	r2, r3
 800e6ec:	d007      	beq.n	800e6fe <CircularQueue_Add+0x236>
 800e6ee:	88fb      	ldrh	r3, [r7, #6]
 800e6f0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e6f2:	429a      	cmp	r2, r3
 800e6f4:	d225      	bcs.n	800e742 <CircularQueue_Add+0x27a>
 800e6f6:	68fb      	ldr	r3, [r7, #12]
 800e6f8:	7f1b      	ldrb	r3, [r3, #28]
 800e6fa:	2b00      	cmp	r3, #0
 800e6fc:	d121      	bne.n	800e742 <CircularQueue_Add+0x27a>
      {
        /* Copy First part (or emtire buffer ) from current position up to the end of the buffer queue (or before if enough room)  */
        memcpy(&q->qBuff[curBuffPosition],&x[i*elementSize],NbBytesToCopy);
 800e6fe:	68fb      	ldr	r3, [r7, #12]
 800e700:	681a      	ldr	r2, [r3, #0]
 800e702:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e704:	18d0      	adds	r0, r2, r3
 800e706:	88fb      	ldrh	r3, [r7, #6]
 800e708:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e70a:	fb02 f303 	mul.w	r3, r2, r3
 800e70e:	68ba      	ldr	r2, [r7, #8]
 800e710:	4413      	add	r3, r2
 800e712:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e714:	4619      	mov	r1, r3
 800e716:	f004 fc59 	bl	8012fcc <memcpy>
        /* Adjust bytes count */
        q->byteCount += NbBytesToCopy;
 800e71a:	68fb      	ldr	r3, [r7, #12]
 800e71c:	695a      	ldr	r2, [r3, #20]
 800e71e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e720:	441a      	add	r2, r3
 800e722:	68fb      	ldr	r3, [r7, #12]
 800e724:	615a      	str	r2, [r3, #20]
        /* Wrap */
        curBuffPosition = 0; 
 800e726:	2300      	movs	r3, #0
 800e728:	633b      	str	r3, [r7, #48]	; 0x30
        /* set NbCopiedBytes bytes with  ampount copied */
        NbCopiedBytes = NbBytesToCopy;
 800e72a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e72c:	627b      	str	r3, [r7, #36]	; 0x24
        /* set the rest to copy if wrao , if no wrap will be 0 */
        NbBytesToCopy = elementSize - NbBytesToCopy;
 800e72e:	88fa      	ldrh	r2, [r7, #6]
 800e730:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e732:	1ad3      	subs	r3, r2, r3
 800e734:	62bb      	str	r3, [r7, #40]	; 0x28
        /* set the current element Size, will be used to calaculate next last position at beggining of loop */
        curElementSize = (elementSize) + elemSizeStorageRoom ;
 800e736:	7ffb      	ldrb	r3, [r7, #31]
 800e738:	b29a      	uxth	r2, r3
 800e73a:	88fb      	ldrh	r3, [r7, #6]
 800e73c:	4413      	add	r3, r2
 800e73e:	86fb      	strh	r3, [r7, #54]	; 0x36
 800e740:	e0a4      	b.n	800e88c <CircularQueue_Add+0x3c4>
      }
      else if (NbBytesToCopy)  /* We have a wrap  to manage */
 800e742:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e744:	2b00      	cmp	r3, #0
 800e746:	f000 80a1 	beq.w	800e88c <CircularQueue_Add+0x3c4>
      {
       /* case of CIRCULAR_QUEUE_NO_WRAP_FLAG option */
         if (q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG)
 800e74a:	68fb      	ldr	r3, [r7, #12]
 800e74c:	7f1b      	ldrb	r3, [r3, #28]
 800e74e:	f003 0301 	and.w	r3, r3, #1
 800e752:	2b00      	cmp	r3, #0
 800e754:	d03a      	beq.n	800e7cc <CircularQueue_Add+0x304>
        {
          /* if element size are variable and NO_WRAP option, Invalidate end of buffer setting 0xFFFF size*/
          if (q->elementSize == 0)
 800e756:	68fb      	ldr	r3, [r7, #12]
 800e758:	891b      	ldrh	r3, [r3, #8]
 800e75a:	2b00      	cmp	r3, #0
 800e75c:	d10d      	bne.n	800e77a <CircularQueue_Add+0x2b2>
          {
             q->qBuff[curBuffPosition-2] = 0xFF;
 800e75e:	68fb      	ldr	r3, [r7, #12]
 800e760:	681a      	ldr	r2, [r3, #0]
 800e762:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e764:	3b02      	subs	r3, #2
 800e766:	4413      	add	r3, r2
 800e768:	22ff      	movs	r2, #255	; 0xff
 800e76a:	701a      	strb	r2, [r3, #0]
             q->qBuff[curBuffPosition-1] = 0xFF;
 800e76c:	68fb      	ldr	r3, [r7, #12]
 800e76e:	681a      	ldr	r2, [r3, #0]
 800e770:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e772:	3b01      	subs	r3, #1
 800e774:	4413      	add	r3, r2
 800e776:	22ff      	movs	r2, #255	; 0xff
 800e778:	701a      	strb	r2, [r3, #0]
          }
          q->byteCount += NbBytesToCopy;  /* invalid data at the end of buffer are take into account in byteCount */
 800e77a:	68fb      	ldr	r3, [r7, #12]
 800e77c:	695a      	ldr	r2, [r3, #20]
 800e77e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e780:	441a      	add	r2, r3
 800e782:	68fb      	ldr	r3, [r7, #12]
 800e784:	615a      	str	r2, [r3, #20]
          /* No bytes coped a the end of buffer */
          NbCopiedBytes = 0;
 800e786:	2300      	movs	r3, #0
 800e788:	627b      	str	r3, [r7, #36]	; 0x24
          /* all element to be copied at the begnning of buffer */
          NbBytesToCopy = elementSize; 
 800e78a:	88fb      	ldrh	r3, [r7, #6]
 800e78c:	62bb      	str	r3, [r7, #40]	; 0x28
          /* Wrap */
          curBuffPosition = 0; 
 800e78e:	2300      	movs	r3, #0
 800e790:	633b      	str	r3, [r7, #48]	; 0x30
          /* if variable size element, invalidate end of buffer setting OxFFFF in element header (size) */
          if (q->elementSize == 0)
 800e792:	68fb      	ldr	r3, [r7, #12]
 800e794:	891b      	ldrh	r3, [r3, #8]
 800e796:	2b00      	cmp	r3, #0
 800e798:	d16f      	bne.n	800e87a <CircularQueue_Add+0x3b2>
          {
            q->qBuff[curBuffPosition++] = NbBytesToCopy & 0xFF;
 800e79a:	68fb      	ldr	r3, [r7, #12]
 800e79c:	681a      	ldr	r2, [r3, #0]
 800e79e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e7a0:	1c59      	adds	r1, r3, #1
 800e7a2:	6339      	str	r1, [r7, #48]	; 0x30
 800e7a4:	4413      	add	r3, r2
 800e7a6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e7a8:	b2d2      	uxtb	r2, r2
 800e7aa:	701a      	strb	r2, [r3, #0]
            q->qBuff[curBuffPosition++] = (NbBytesToCopy & 0xFF00) >> 8 ;
 800e7ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e7ae:	0a18      	lsrs	r0, r3, #8
 800e7b0:	68fb      	ldr	r3, [r7, #12]
 800e7b2:	681a      	ldr	r2, [r3, #0]
 800e7b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e7b6:	1c59      	adds	r1, r3, #1
 800e7b8:	6339      	str	r1, [r7, #48]	; 0x30
 800e7ba:	4413      	add	r3, r2
 800e7bc:	b2c2      	uxtb	r2, r0
 800e7be:	701a      	strb	r2, [r3, #0]
            q->byteCount += 2;   
 800e7c0:	68fb      	ldr	r3, [r7, #12]
 800e7c2:	695b      	ldr	r3, [r3, #20]
 800e7c4:	1c9a      	adds	r2, r3, #2
 800e7c6:	68fb      	ldr	r3, [r7, #12]
 800e7c8:	615a      	str	r2, [r3, #20]
 800e7ca:	e056      	b.n	800e87a <CircularQueue_Add+0x3b2>
          } 
           
        }
        /* case of CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG option */
        else if (q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG)
 800e7cc:	68fb      	ldr	r3, [r7, #12]
 800e7ce:	7f1b      	ldrb	r3, [r3, #28]
 800e7d0:	f003 0302 	and.w	r3, r3, #2
 800e7d4:	2b00      	cmp	r3, #0
 800e7d6:	d050      	beq.n	800e87a <CircularQueue_Add+0x3b2>
        {
          if (q->elementSize == 0)
 800e7d8:	68fb      	ldr	r3, [r7, #12]
 800e7da:	891b      	ldrh	r3, [r3, #8]
 800e7dc:	2b00      	cmp	r3, #0
 800e7de:	d14a      	bne.n	800e876 <CircularQueue_Add+0x3ae>
          {
            /* reset the size of current element to the nb bytes fitting at the end of buffer */
             q->qBuff[curBuffPosition-2] = NbBytesToCopy & 0xFF;
 800e7e0:	68fb      	ldr	r3, [r7, #12]
 800e7e2:	681a      	ldr	r2, [r3, #0]
 800e7e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e7e6:	3b02      	subs	r3, #2
 800e7e8:	4413      	add	r3, r2
 800e7ea:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e7ec:	b2d2      	uxtb	r2, r2
 800e7ee:	701a      	strb	r2, [r3, #0]
             q->qBuff[curBuffPosition-1] = (NbBytesToCopy & 0xFF00) >> 8 ;
 800e7f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e7f2:	0a19      	lsrs	r1, r3, #8
 800e7f4:	68fb      	ldr	r3, [r7, #12]
 800e7f6:	681a      	ldr	r2, [r3, #0]
 800e7f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e7fa:	3b01      	subs	r3, #1
 800e7fc:	4413      	add	r3, r2
 800e7fe:	b2ca      	uxtb	r2, r1
 800e800:	701a      	strb	r2, [r3, #0]
             /* copy the bytes */ 
             memcpy(&q->qBuff[curBuffPosition],&x[i*elementSize],NbBytesToCopy);
 800e802:	68fb      	ldr	r3, [r7, #12]
 800e804:	681a      	ldr	r2, [r3, #0]
 800e806:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e808:	18d0      	adds	r0, r2, r3
 800e80a:	88fb      	ldrh	r3, [r7, #6]
 800e80c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e80e:	fb02 f303 	mul.w	r3, r2, r3
 800e812:	68ba      	ldr	r2, [r7, #8]
 800e814:	4413      	add	r3, r2
 800e816:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e818:	4619      	mov	r1, r3
 800e81a:	f004 fbd7 	bl	8012fcc <memcpy>
             q->byteCount += NbBytesToCopy; 
 800e81e:	68fb      	ldr	r3, [r7, #12]
 800e820:	695a      	ldr	r2, [r3, #20]
 800e822:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e824:	441a      	add	r2, r3
 800e826:	68fb      	ldr	r3, [r7, #12]
 800e828:	615a      	str	r2, [r3, #20]
             /* set the number of copied bytes */
             NbCopiedBytes = NbBytesToCopy;             
 800e82a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e82c:	627b      	str	r3, [r7, #36]	; 0x24
             /* set rest of data to be copied to begnning of buffer */
             NbBytesToCopy = elementSize - NbBytesToCopy;
 800e82e:	88fa      	ldrh	r2, [r7, #6]
 800e830:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e832:	1ad3      	subs	r3, r2, r3
 800e834:	62bb      	str	r3, [r7, #40]	; 0x28
             /* one element more dur to split in 2 elements */
             q->elementCount++;
 800e836:	68fb      	ldr	r3, [r7, #12]
 800e838:	699b      	ldr	r3, [r3, #24]
 800e83a:	1c5a      	adds	r2, r3, #1
 800e83c:	68fb      	ldr	r3, [r7, #12]
 800e83e:	619a      	str	r2, [r3, #24]
             /* Wrap */
             curBuffPosition = 0; 
 800e840:	2300      	movs	r3, #0
 800e842:	633b      	str	r3, [r7, #48]	; 0x30
             /* Set new size for rest of data */
             q->qBuff[curBuffPosition++] = NbBytesToCopy & 0xFF;
 800e844:	68fb      	ldr	r3, [r7, #12]
 800e846:	681a      	ldr	r2, [r3, #0]
 800e848:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e84a:	1c59      	adds	r1, r3, #1
 800e84c:	6339      	str	r1, [r7, #48]	; 0x30
 800e84e:	4413      	add	r3, r2
 800e850:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e852:	b2d2      	uxtb	r2, r2
 800e854:	701a      	strb	r2, [r3, #0]
             q->qBuff[curBuffPosition++] = (NbBytesToCopy & 0xFF00) >> 8 ;
 800e856:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e858:	0a18      	lsrs	r0, r3, #8
 800e85a:	68fb      	ldr	r3, [r7, #12]
 800e85c:	681a      	ldr	r2, [r3, #0]
 800e85e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e860:	1c59      	adds	r1, r3, #1
 800e862:	6339      	str	r1, [r7, #48]	; 0x30
 800e864:	4413      	add	r3, r2
 800e866:	b2c2      	uxtb	r2, r0
 800e868:	701a      	strb	r2, [r3, #0]
             q->byteCount += 2;              
 800e86a:	68fb      	ldr	r3, [r7, #12]
 800e86c:	695b      	ldr	r3, [r3, #20]
 800e86e:	1c9a      	adds	r2, r3, #2
 800e870:	68fb      	ldr	r3, [r7, #12]
 800e872:	615a      	str	r2, [r3, #20]
 800e874:	e001      	b.n	800e87a <CircularQueue_Add+0x3b2>
          else
          {
            /* Should not occur */
            /* can not manage split Flag on Fixed size element */
            /* Buffer is corrupted */
            return NULL;
 800e876:	2300      	movs	r3, #0
 800e878:	e049      	b.n	800e90e <CircularQueue_Add+0x446>
          }
        }
        curElementSize = (NbBytesToCopy) + elemSizeStorageRoom ;
 800e87a:	7ffb      	ldrb	r3, [r7, #31]
 800e87c:	b29a      	uxth	r2, r3
 800e87e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e880:	b29b      	uxth	r3, r3
 800e882:	4413      	add	r3, r2
 800e884:	86fb      	strh	r3, [r7, #54]	; 0x36
        q->last = 0;        
 800e886:	68fb      	ldr	r3, [r7, #12]
 800e888:	2200      	movs	r2, #0
 800e88a:	611a      	str	r2, [r3, #16]
      }  
      
      /* some remaning byte to copy */
      if (NbBytesToCopy)      
 800e88c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e88e:	2b00      	cmp	r3, #0
 800e890:	d015      	beq.n	800e8be <CircularQueue_Add+0x3f6>
      {
        memcpy(&q->qBuff[curBuffPosition],&x[(i*elementSize)+NbCopiedBytes],NbBytesToCopy);
 800e892:	68fb      	ldr	r3, [r7, #12]
 800e894:	681a      	ldr	r2, [r3, #0]
 800e896:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e898:	18d0      	adds	r0, r2, r3
 800e89a:	88fb      	ldrh	r3, [r7, #6]
 800e89c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e89e:	fb02 f203 	mul.w	r2, r2, r3
 800e8a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e8a4:	4413      	add	r3, r2
 800e8a6:	68ba      	ldr	r2, [r7, #8]
 800e8a8:	4413      	add	r3, r2
 800e8aa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e8ac:	4619      	mov	r1, r3
 800e8ae:	f004 fb8d 	bl	8012fcc <memcpy>
        q->byteCount += NbBytesToCopy;
 800e8b2:	68fb      	ldr	r3, [r7, #12]
 800e8b4:	695a      	ldr	r2, [r3, #20]
 800e8b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e8b8:	441a      	add	r2, r3
 800e8ba:	68fb      	ldr	r3, [r7, #12]
 800e8bc:	615a      	str	r2, [r3, #20]
      }      
      
      /* One more element */
      q->elementCount++;
 800e8be:	68fb      	ldr	r3, [r7, #12]
 800e8c0:	699b      	ldr	r3, [r3, #24]
 800e8c2:	1c5a      	adds	r2, r3, #1
 800e8c4:	68fb      	ldr	r3, [r7, #12]
 800e8c6:	619a      	str	r2, [r3, #24]
    for (i=0; i < nbElements; i++) 
 800e8c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e8ca:	3301      	adds	r3, #1
 800e8cc:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e8ce:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e8d0:	683b      	ldr	r3, [r7, #0]
 800e8d2:	429a      	cmp	r2, r3
 800e8d4:	f4ff aeb0 	bcc.w	800e638 <CircularQueue_Add+0x170>
    }
    
    ptr = q->qBuff + (MOD((q->last+elemSizeStorageRoom ),q->queueMaxSize));
 800e8d8:	68fb      	ldr	r3, [r7, #12]
 800e8da:	681a      	ldr	r2, [r3, #0]
 800e8dc:	68fb      	ldr	r3, [r7, #12]
 800e8de:	6919      	ldr	r1, [r3, #16]
 800e8e0:	7ffb      	ldrb	r3, [r7, #31]
 800e8e2:	4419      	add	r1, r3
 800e8e4:	68fb      	ldr	r3, [r7, #12]
 800e8e6:	685b      	ldr	r3, [r3, #4]
 800e8e8:	4299      	cmp	r1, r3
 800e8ea:	d307      	bcc.n	800e8fc <CircularQueue_Add+0x434>
 800e8ec:	68fb      	ldr	r3, [r7, #12]
 800e8ee:	6919      	ldr	r1, [r3, #16]
 800e8f0:	7ffb      	ldrb	r3, [r7, #31]
 800e8f2:	4419      	add	r1, r3
 800e8f4:	68fb      	ldr	r3, [r7, #12]
 800e8f6:	685b      	ldr	r3, [r3, #4]
 800e8f8:	1acb      	subs	r3, r1, r3
 800e8fa:	e003      	b.n	800e904 <CircularQueue_Add+0x43c>
 800e8fc:	68fb      	ldr	r3, [r7, #12]
 800e8fe:	6919      	ldr	r1, [r3, #16]
 800e900:	7ffb      	ldrb	r3, [r7, #31]
 800e902:	440b      	add	r3, r1
 800e904:	4413      	add	r3, r2
 800e906:	623b      	str	r3, [r7, #32]
  /* for Breakpoint only...to remove */
  else
  {
    return NULL;
  }
  return ptr;
 800e908:	6a3b      	ldr	r3, [r7, #32]
 800e90a:	e000      	b.n	800e90e <CircularQueue_Add+0x446>
    return NULL;
 800e90c:	2300      	movs	r3, #0
}
 800e90e:	4618      	mov	r0, r3
 800e910:	3738      	adds	r7, #56	; 0x38
 800e912:	46bd      	mov	sp, r7
 800e914:	bd80      	pop	{r7, pc}

0800e916 <CircularQueue_Remove>:
  * @param  q: pointer on queue structure  to be handled
  * @param  elementSize: Pointer to return Size of element to be removed  
  * @retval Pointer on removed element. NULL if queue was empty
  */
uint8_t* CircularQueue_Remove(queue_t *q, uint16_t* elementSize)
{
 800e916:	b480      	push	{r7}
 800e918:	b085      	sub	sp, #20
 800e91a:	af00      	add	r7, sp, #0
 800e91c:	6078      	str	r0, [r7, #4]
 800e91e:	6039      	str	r1, [r7, #0]
  uint8_t  elemSizeStorageRoom = 0;
 800e920:	2300      	movs	r3, #0
 800e922:	72fb      	strb	r3, [r7, #11]
  uint8_t* ptr= NULL;
 800e924:	2300      	movs	r3, #0
 800e926:	60fb      	str	r3, [r7, #12]
  elemSizeStorageRoom = (q->elementSize == 0) ? 2 : 0;
 800e928:	687b      	ldr	r3, [r7, #4]
 800e92a:	891b      	ldrh	r3, [r3, #8]
 800e92c:	2b00      	cmp	r3, #0
 800e92e:	d101      	bne.n	800e934 <CircularQueue_Remove+0x1e>
 800e930:	2302      	movs	r3, #2
 800e932:	e000      	b.n	800e936 <CircularQueue_Remove+0x20>
 800e934:	2300      	movs	r3, #0
 800e936:	72fb      	strb	r3, [r7, #11]
  *elementSize = 0;
 800e938:	683b      	ldr	r3, [r7, #0]
 800e93a:	2200      	movs	r2, #0
 800e93c:	801a      	strh	r2, [r3, #0]
  if (q->byteCount > 0) 
 800e93e:	687b      	ldr	r3, [r7, #4]
 800e940:	695b      	ldr	r3, [r3, #20]
 800e942:	2b00      	cmp	r3, #0
 800e944:	f000 80d4 	beq.w	800eaf0 <CircularQueue_Remove+0x1da>
  {
    /* retreive element Size */
    *elementSize = (q->elementSize == 0) ? q->qBuff[q->first] + ((q->qBuff[MOD((q->first+1), q->queueMaxSize)])<<8) : q->elementSize;
 800e948:	687b      	ldr	r3, [r7, #4]
 800e94a:	891b      	ldrh	r3, [r3, #8]
 800e94c:	2b00      	cmp	r3, #0
 800e94e:	d121      	bne.n	800e994 <CircularQueue_Remove+0x7e>
 800e950:	687b      	ldr	r3, [r7, #4]
 800e952:	681a      	ldr	r2, [r3, #0]
 800e954:	687b      	ldr	r3, [r7, #4]
 800e956:	68db      	ldr	r3, [r3, #12]
 800e958:	4413      	add	r3, r2
 800e95a:	781b      	ldrb	r3, [r3, #0]
 800e95c:	b29a      	uxth	r2, r3
 800e95e:	687b      	ldr	r3, [r7, #4]
 800e960:	6819      	ldr	r1, [r3, #0]
 800e962:	687b      	ldr	r3, [r7, #4]
 800e964:	68db      	ldr	r3, [r3, #12]
 800e966:	1c58      	adds	r0, r3, #1
 800e968:	687b      	ldr	r3, [r7, #4]
 800e96a:	685b      	ldr	r3, [r3, #4]
 800e96c:	4298      	cmp	r0, r3
 800e96e:	d306      	bcc.n	800e97e <CircularQueue_Remove+0x68>
 800e970:	687b      	ldr	r3, [r7, #4]
 800e972:	68d8      	ldr	r0, [r3, #12]
 800e974:	687b      	ldr	r3, [r7, #4]
 800e976:	685b      	ldr	r3, [r3, #4]
 800e978:	1ac3      	subs	r3, r0, r3
 800e97a:	3301      	adds	r3, #1
 800e97c:	e002      	b.n	800e984 <CircularQueue_Remove+0x6e>
 800e97e:	687b      	ldr	r3, [r7, #4]
 800e980:	68db      	ldr	r3, [r3, #12]
 800e982:	3301      	adds	r3, #1
 800e984:	440b      	add	r3, r1
 800e986:	781b      	ldrb	r3, [r3, #0]
 800e988:	b29b      	uxth	r3, r3
 800e98a:	021b      	lsls	r3, r3, #8
 800e98c:	b29b      	uxth	r3, r3
 800e98e:	4413      	add	r3, r2
 800e990:	b29b      	uxth	r3, r3
 800e992:	e001      	b.n	800e998 <CircularQueue_Remove+0x82>
 800e994:	687b      	ldr	r3, [r7, #4]
 800e996:	891b      	ldrh	r3, [r3, #8]
 800e998:	683a      	ldr	r2, [r7, #0]
 800e99a:	8013      	strh	r3, [r2, #0]

     if ((q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG) && !(q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG))
 800e99c:	687b      	ldr	r3, [r7, #4]
 800e99e:	7f1b      	ldrb	r3, [r3, #28]
 800e9a0:	f003 0301 	and.w	r3, r3, #1
 800e9a4:	2b00      	cmp	r3, #0
 800e9a6:	d059      	beq.n	800ea5c <CircularQueue_Remove+0x146>
 800e9a8:	687b      	ldr	r3, [r7, #4]
 800e9aa:	7f1b      	ldrb	r3, [r3, #28]
 800e9ac:	f003 0302 	and.w	r3, r3, #2
 800e9b0:	2b00      	cmp	r3, #0
 800e9b2:	d153      	bne.n	800ea5c <CircularQueue_Remove+0x146>
     {
       if (((*elementSize == 0xFFFF) && q->elementSize == 0 ) || 
 800e9b4:	683b      	ldr	r3, [r7, #0]
 800e9b6:	881b      	ldrh	r3, [r3, #0]
 800e9b8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e9bc:	4293      	cmp	r3, r2
 800e9be:	d103      	bne.n	800e9c8 <CircularQueue_Remove+0xb2>
 800e9c0:	687b      	ldr	r3, [r7, #4]
 800e9c2:	891b      	ldrh	r3, [r3, #8]
 800e9c4:	2b00      	cmp	r3, #0
 800e9c6:	d012      	beq.n	800e9ee <CircularQueue_Remove+0xd8>
           ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 800e9c8:	687b      	ldr	r3, [r7, #4]
 800e9ca:	68da      	ldr	r2, [r3, #12]
 800e9cc:	687b      	ldr	r3, [r7, #4]
 800e9ce:	691b      	ldr	r3, [r3, #16]
       if (((*elementSize == 0xFFFF) && q->elementSize == 0 ) || 
 800e9d0:	429a      	cmp	r2, r3
 800e9d2:	d943      	bls.n	800ea5c <CircularQueue_Remove+0x146>
           ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 800e9d4:	687b      	ldr	r3, [r7, #4]
 800e9d6:	891b      	ldrh	r3, [r3, #8]
 800e9d8:	2b00      	cmp	r3, #0
 800e9da:	d03f      	beq.n	800ea5c <CircularQueue_Remove+0x146>
 800e9dc:	687b      	ldr	r3, [r7, #4]
 800e9de:	685a      	ldr	r2, [r3, #4]
 800e9e0:	687b      	ldr	r3, [r7, #4]
 800e9e2:	68db      	ldr	r3, [r3, #12]
 800e9e4:	1ad3      	subs	r3, r2, r3
 800e9e6:	687a      	ldr	r2, [r7, #4]
 800e9e8:	8912      	ldrh	r2, [r2, #8]
 800e9ea:	4293      	cmp	r3, r2
 800e9ec:	d236      	bcs.n	800ea5c <CircularQueue_Remove+0x146>
       {
          /* all data from current position up to the end of buffer are invalid */
          q->byteCount -= (q->queueMaxSize - q->first);
 800e9ee:	687b      	ldr	r3, [r7, #4]
 800e9f0:	695a      	ldr	r2, [r3, #20]
 800e9f2:	687b      	ldr	r3, [r7, #4]
 800e9f4:	68d9      	ldr	r1, [r3, #12]
 800e9f6:	687b      	ldr	r3, [r7, #4]
 800e9f8:	685b      	ldr	r3, [r3, #4]
 800e9fa:	1acb      	subs	r3, r1, r3
 800e9fc:	441a      	add	r2, r3
 800e9fe:	687b      	ldr	r3, [r7, #4]
 800ea00:	615a      	str	r2, [r3, #20]
          /* Adjust first element pos */
          q->first = 0;
 800ea02:	687b      	ldr	r3, [r7, #4]
 800ea04:	2200      	movs	r2, #0
 800ea06:	60da      	str	r2, [r3, #12]
          /* retrieve the rigth size after the wrap [if varaible size element] */
          *elementSize = (q->elementSize == 0) ? q->qBuff[q->first] + ((q->qBuff[MOD((q->first+1), q->queueMaxSize)])<<8) : q->elementSize;
 800ea08:	687b      	ldr	r3, [r7, #4]
 800ea0a:	891b      	ldrh	r3, [r3, #8]
 800ea0c:	2b00      	cmp	r3, #0
 800ea0e:	d121      	bne.n	800ea54 <CircularQueue_Remove+0x13e>
 800ea10:	687b      	ldr	r3, [r7, #4]
 800ea12:	681a      	ldr	r2, [r3, #0]
 800ea14:	687b      	ldr	r3, [r7, #4]
 800ea16:	68db      	ldr	r3, [r3, #12]
 800ea18:	4413      	add	r3, r2
 800ea1a:	781b      	ldrb	r3, [r3, #0]
 800ea1c:	b29a      	uxth	r2, r3
 800ea1e:	687b      	ldr	r3, [r7, #4]
 800ea20:	6819      	ldr	r1, [r3, #0]
 800ea22:	687b      	ldr	r3, [r7, #4]
 800ea24:	68db      	ldr	r3, [r3, #12]
 800ea26:	1c58      	adds	r0, r3, #1
 800ea28:	687b      	ldr	r3, [r7, #4]
 800ea2a:	685b      	ldr	r3, [r3, #4]
 800ea2c:	4298      	cmp	r0, r3
 800ea2e:	d306      	bcc.n	800ea3e <CircularQueue_Remove+0x128>
 800ea30:	687b      	ldr	r3, [r7, #4]
 800ea32:	68d8      	ldr	r0, [r3, #12]
 800ea34:	687b      	ldr	r3, [r7, #4]
 800ea36:	685b      	ldr	r3, [r3, #4]
 800ea38:	1ac3      	subs	r3, r0, r3
 800ea3a:	3301      	adds	r3, #1
 800ea3c:	e002      	b.n	800ea44 <CircularQueue_Remove+0x12e>
 800ea3e:	687b      	ldr	r3, [r7, #4]
 800ea40:	68db      	ldr	r3, [r3, #12]
 800ea42:	3301      	adds	r3, #1
 800ea44:	440b      	add	r3, r1
 800ea46:	781b      	ldrb	r3, [r3, #0]
 800ea48:	b29b      	uxth	r3, r3
 800ea4a:	021b      	lsls	r3, r3, #8
 800ea4c:	b29b      	uxth	r3, r3
 800ea4e:	4413      	add	r3, r2
 800ea50:	b29b      	uxth	r3, r3
 800ea52:	e001      	b.n	800ea58 <CircularQueue_Remove+0x142>
 800ea54:	687b      	ldr	r3, [r7, #4]
 800ea56:	891b      	ldrh	r3, [r3, #8]
 800ea58:	683a      	ldr	r2, [r7, #0]
 800ea5a:	8013      	strh	r3, [r2, #0]
       }
     }

    /* retreive element */
    ptr = q->qBuff + (MOD((q->first + elemSizeStorageRoom), q->queueMaxSize));
 800ea5c:	687b      	ldr	r3, [r7, #4]
 800ea5e:	681a      	ldr	r2, [r3, #0]
 800ea60:	687b      	ldr	r3, [r7, #4]
 800ea62:	68d9      	ldr	r1, [r3, #12]
 800ea64:	7afb      	ldrb	r3, [r7, #11]
 800ea66:	4419      	add	r1, r3
 800ea68:	687b      	ldr	r3, [r7, #4]
 800ea6a:	685b      	ldr	r3, [r3, #4]
 800ea6c:	4299      	cmp	r1, r3
 800ea6e:	d307      	bcc.n	800ea80 <CircularQueue_Remove+0x16a>
 800ea70:	687b      	ldr	r3, [r7, #4]
 800ea72:	68d9      	ldr	r1, [r3, #12]
 800ea74:	7afb      	ldrb	r3, [r7, #11]
 800ea76:	4419      	add	r1, r3
 800ea78:	687b      	ldr	r3, [r7, #4]
 800ea7a:	685b      	ldr	r3, [r3, #4]
 800ea7c:	1acb      	subs	r3, r1, r3
 800ea7e:	e003      	b.n	800ea88 <CircularQueue_Remove+0x172>
 800ea80:	687b      	ldr	r3, [r7, #4]
 800ea82:	68d9      	ldr	r1, [r3, #12]
 800ea84:	7afb      	ldrb	r3, [r7, #11]
 800ea86:	440b      	add	r3, r1
 800ea88:	4413      	add	r3, r2
 800ea8a:	60fb      	str	r3, [r7, #12]

    /* adjust byte count */
    q->byteCount -= (*elementSize + elemSizeStorageRoom) ;
 800ea8c:	687b      	ldr	r3, [r7, #4]
 800ea8e:	695b      	ldr	r3, [r3, #20]
 800ea90:	683a      	ldr	r2, [r7, #0]
 800ea92:	8812      	ldrh	r2, [r2, #0]
 800ea94:	4611      	mov	r1, r2
 800ea96:	7afa      	ldrb	r2, [r7, #11]
 800ea98:	440a      	add	r2, r1
 800ea9a:	1a9a      	subs	r2, r3, r2
 800ea9c:	687b      	ldr	r3, [r7, #4]
 800ea9e:	615a      	str	r2, [r3, #20]
    
    /* Adjust q->first */
    if (q->byteCount > 0)
 800eaa0:	687b      	ldr	r3, [r7, #4]
 800eaa2:	695b      	ldr	r3, [r3, #20]
 800eaa4:	2b00      	cmp	r3, #0
 800eaa6:	d01e      	beq.n	800eae6 <CircularQueue_Remove+0x1d0>
    {
      q->first = MOD((q->first+ *elementSize + elemSizeStorageRoom ), q->queueMaxSize);
 800eaa8:	687b      	ldr	r3, [r7, #4]
 800eaaa:	68db      	ldr	r3, [r3, #12]
 800eaac:	683a      	ldr	r2, [r7, #0]
 800eaae:	8812      	ldrh	r2, [r2, #0]
 800eab0:	441a      	add	r2, r3
 800eab2:	7afb      	ldrb	r3, [r7, #11]
 800eab4:	441a      	add	r2, r3
 800eab6:	687b      	ldr	r3, [r7, #4]
 800eab8:	685b      	ldr	r3, [r3, #4]
 800eaba:	429a      	cmp	r2, r3
 800eabc:	d30a      	bcc.n	800ead4 <CircularQueue_Remove+0x1be>
 800eabe:	687b      	ldr	r3, [r7, #4]
 800eac0:	68db      	ldr	r3, [r3, #12]
 800eac2:	683a      	ldr	r2, [r7, #0]
 800eac4:	8812      	ldrh	r2, [r2, #0]
 800eac6:	441a      	add	r2, r3
 800eac8:	7afb      	ldrb	r3, [r7, #11]
 800eaca:	441a      	add	r2, r3
 800eacc:	687b      	ldr	r3, [r7, #4]
 800eace:	685b      	ldr	r3, [r3, #4]
 800ead0:	1ad3      	subs	r3, r2, r3
 800ead2:	e006      	b.n	800eae2 <CircularQueue_Remove+0x1cc>
 800ead4:	687b      	ldr	r3, [r7, #4]
 800ead6:	68db      	ldr	r3, [r3, #12]
 800ead8:	683a      	ldr	r2, [r7, #0]
 800eada:	8812      	ldrh	r2, [r2, #0]
 800eadc:	441a      	add	r2, r3
 800eade:	7afb      	ldrb	r3, [r7, #11]
 800eae0:	4413      	add	r3, r2
 800eae2:	687a      	ldr	r2, [r7, #4]
 800eae4:	60d3      	str	r3, [r2, #12]
    }    
    /* adjust element count */    
    --q->elementCount;    
 800eae6:	687b      	ldr	r3, [r7, #4]
 800eae8:	699b      	ldr	r3, [r3, #24]
 800eaea:	1e5a      	subs	r2, r3, #1
 800eaec:	687b      	ldr	r3, [r7, #4]
 800eaee:	619a      	str	r2, [r3, #24]
  }
  return ptr;
 800eaf0:	68fb      	ldr	r3, [r7, #12]
}
 800eaf2:	4618      	mov	r0, r3
 800eaf4:	3714      	adds	r7, #20
 800eaf6:	46bd      	mov	sp, r7
 800eaf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eafc:	4770      	bx	lr

0800eafe <CircularQueue_Sense>:
  * @param  q: pointer on queue structure  to be handled
  * @param  elementSize:  Pointer to return Size of element to be removed  
  * @retval Pointer on sensed element. NULL if queue was empty
  */
uint8_t* CircularQueue_Sense(queue_t *q, uint16_t* elementSize)
{
 800eafe:	b480      	push	{r7}
 800eb00:	b087      	sub	sp, #28
 800eb02:	af00      	add	r7, sp, #0
 800eb04:	6078      	str	r0, [r7, #4]
 800eb06:	6039      	str	r1, [r7, #0]
  uint8_t  elemSizeStorageRoom = 0;
 800eb08:	2300      	movs	r3, #0
 800eb0a:	73fb      	strb	r3, [r7, #15]
  uint8_t* x= NULL;
 800eb0c:	2300      	movs	r3, #0
 800eb0e:	617b      	str	r3, [r7, #20]
  elemSizeStorageRoom = (q->elementSize == 0) ? 2 : 0;
 800eb10:	687b      	ldr	r3, [r7, #4]
 800eb12:	891b      	ldrh	r3, [r3, #8]
 800eb14:	2b00      	cmp	r3, #0
 800eb16:	d101      	bne.n	800eb1c <CircularQueue_Sense+0x1e>
 800eb18:	2302      	movs	r3, #2
 800eb1a:	e000      	b.n	800eb1e <CircularQueue_Sense+0x20>
 800eb1c:	2300      	movs	r3, #0
 800eb1e:	73fb      	strb	r3, [r7, #15]
  *elementSize = 0;
 800eb20:	683b      	ldr	r3, [r7, #0]
 800eb22:	2200      	movs	r2, #0
 800eb24:	801a      	strh	r2, [r3, #0]
  uint32_t FirstElemetPos = 0;
 800eb26:	2300      	movs	r3, #0
 800eb28:	613b      	str	r3, [r7, #16]
    
  if (q->byteCount > 0) 
 800eb2a:	687b      	ldr	r3, [r7, #4]
 800eb2c:	695b      	ldr	r3, [r3, #20]
 800eb2e:	2b00      	cmp	r3, #0
 800eb30:	f000 8093 	beq.w	800ec5a <CircularQueue_Sense+0x15c>
  {
    FirstElemetPos = q->first;
 800eb34:	687b      	ldr	r3, [r7, #4]
 800eb36:	68db      	ldr	r3, [r3, #12]
 800eb38:	613b      	str	r3, [r7, #16]
    *elementSize = (q->elementSize == 0) ? q->qBuff[q->first] + ((q->qBuff[MOD((q->first+1), q->queueMaxSize)])<<8) : q->elementSize;
 800eb3a:	687b      	ldr	r3, [r7, #4]
 800eb3c:	891b      	ldrh	r3, [r3, #8]
 800eb3e:	2b00      	cmp	r3, #0
 800eb40:	d121      	bne.n	800eb86 <CircularQueue_Sense+0x88>
 800eb42:	687b      	ldr	r3, [r7, #4]
 800eb44:	681a      	ldr	r2, [r3, #0]
 800eb46:	687b      	ldr	r3, [r7, #4]
 800eb48:	68db      	ldr	r3, [r3, #12]
 800eb4a:	4413      	add	r3, r2
 800eb4c:	781b      	ldrb	r3, [r3, #0]
 800eb4e:	b29a      	uxth	r2, r3
 800eb50:	687b      	ldr	r3, [r7, #4]
 800eb52:	6819      	ldr	r1, [r3, #0]
 800eb54:	687b      	ldr	r3, [r7, #4]
 800eb56:	68db      	ldr	r3, [r3, #12]
 800eb58:	1c58      	adds	r0, r3, #1
 800eb5a:	687b      	ldr	r3, [r7, #4]
 800eb5c:	685b      	ldr	r3, [r3, #4]
 800eb5e:	4298      	cmp	r0, r3
 800eb60:	d306      	bcc.n	800eb70 <CircularQueue_Sense+0x72>
 800eb62:	687b      	ldr	r3, [r7, #4]
 800eb64:	68d8      	ldr	r0, [r3, #12]
 800eb66:	687b      	ldr	r3, [r7, #4]
 800eb68:	685b      	ldr	r3, [r3, #4]
 800eb6a:	1ac3      	subs	r3, r0, r3
 800eb6c:	3301      	adds	r3, #1
 800eb6e:	e002      	b.n	800eb76 <CircularQueue_Sense+0x78>
 800eb70:	687b      	ldr	r3, [r7, #4]
 800eb72:	68db      	ldr	r3, [r3, #12]
 800eb74:	3301      	adds	r3, #1
 800eb76:	440b      	add	r3, r1
 800eb78:	781b      	ldrb	r3, [r3, #0]
 800eb7a:	b29b      	uxth	r3, r3
 800eb7c:	021b      	lsls	r3, r3, #8
 800eb7e:	b29b      	uxth	r3, r3
 800eb80:	4413      	add	r3, r2
 800eb82:	b29b      	uxth	r3, r3
 800eb84:	e001      	b.n	800eb8a <CircularQueue_Sense+0x8c>
 800eb86:	687b      	ldr	r3, [r7, #4]
 800eb88:	891b      	ldrh	r3, [r3, #8]
 800eb8a:	683a      	ldr	r2, [r7, #0]
 800eb8c:	8013      	strh	r3, [r2, #0]
    
    if ((q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG) && !(q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG))
 800eb8e:	687b      	ldr	r3, [r7, #4]
 800eb90:	7f1b      	ldrb	r3, [r3, #28]
 800eb92:	f003 0301 	and.w	r3, r3, #1
 800eb96:	2b00      	cmp	r3, #0
 800eb98:	d04a      	beq.n	800ec30 <CircularQueue_Sense+0x132>
 800eb9a:	687b      	ldr	r3, [r7, #4]
 800eb9c:	7f1b      	ldrb	r3, [r3, #28]
 800eb9e:	f003 0302 	and.w	r3, r3, #2
 800eba2:	2b00      	cmp	r3, #0
 800eba4:	d144      	bne.n	800ec30 <CircularQueue_Sense+0x132>
    { 
      if (((*elementSize == 0xFFFF) && q->elementSize == 0 ) || 
 800eba6:	683b      	ldr	r3, [r7, #0]
 800eba8:	881b      	ldrh	r3, [r3, #0]
 800ebaa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ebae:	4293      	cmp	r3, r2
 800ebb0:	d103      	bne.n	800ebba <CircularQueue_Sense+0xbc>
 800ebb2:	687b      	ldr	r3, [r7, #4]
 800ebb4:	891b      	ldrh	r3, [r3, #8]
 800ebb6:	2b00      	cmp	r3, #0
 800ebb8:	d012      	beq.n	800ebe0 <CircularQueue_Sense+0xe2>
          ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 800ebba:	687b      	ldr	r3, [r7, #4]
 800ebbc:	68da      	ldr	r2, [r3, #12]
 800ebbe:	687b      	ldr	r3, [r7, #4]
 800ebc0:	691b      	ldr	r3, [r3, #16]
      if (((*elementSize == 0xFFFF) && q->elementSize == 0 ) || 
 800ebc2:	429a      	cmp	r2, r3
 800ebc4:	d934      	bls.n	800ec30 <CircularQueue_Sense+0x132>
          ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 800ebc6:	687b      	ldr	r3, [r7, #4]
 800ebc8:	891b      	ldrh	r3, [r3, #8]
 800ebca:	2b00      	cmp	r3, #0
 800ebcc:	d030      	beq.n	800ec30 <CircularQueue_Sense+0x132>
 800ebce:	687b      	ldr	r3, [r7, #4]
 800ebd0:	685a      	ldr	r2, [r3, #4]
 800ebd2:	687b      	ldr	r3, [r7, #4]
 800ebd4:	68db      	ldr	r3, [r3, #12]
 800ebd6:	1ad3      	subs	r3, r2, r3
 800ebd8:	687a      	ldr	r2, [r7, #4]
 800ebda:	8912      	ldrh	r2, [r2, #8]
 800ebdc:	4293      	cmp	r3, r2
 800ebde:	d227      	bcs.n	800ec30 <CircularQueue_Sense+0x132>

      {
        /* all data from current position up to the end of buffer are invalid */
        FirstElemetPos = 0; /* wrap to the begiining of buffer */
 800ebe0:	2300      	movs	r3, #0
 800ebe2:	613b      	str	r3, [r7, #16]

        /* retrieve the rigth size after the wrap [if varaible size element] */
        *elementSize = (q->elementSize == 0) ? q->qBuff[FirstElemetPos]+ ((q->qBuff[MOD((FirstElemetPos+1), q->queueMaxSize)])<<8) : q->elementSize;
 800ebe4:	687b      	ldr	r3, [r7, #4]
 800ebe6:	891b      	ldrh	r3, [r3, #8]
 800ebe8:	2b00      	cmp	r3, #0
 800ebea:	d11d      	bne.n	800ec28 <CircularQueue_Sense+0x12a>
 800ebec:	687b      	ldr	r3, [r7, #4]
 800ebee:	681a      	ldr	r2, [r3, #0]
 800ebf0:	693b      	ldr	r3, [r7, #16]
 800ebf2:	4413      	add	r3, r2
 800ebf4:	781b      	ldrb	r3, [r3, #0]
 800ebf6:	b29a      	uxth	r2, r3
 800ebf8:	687b      	ldr	r3, [r7, #4]
 800ebfa:	6819      	ldr	r1, [r3, #0]
 800ebfc:	693b      	ldr	r3, [r7, #16]
 800ebfe:	1c58      	adds	r0, r3, #1
 800ec00:	687b      	ldr	r3, [r7, #4]
 800ec02:	685b      	ldr	r3, [r3, #4]
 800ec04:	4298      	cmp	r0, r3
 800ec06:	d305      	bcc.n	800ec14 <CircularQueue_Sense+0x116>
 800ec08:	687b      	ldr	r3, [r7, #4]
 800ec0a:	685b      	ldr	r3, [r3, #4]
 800ec0c:	6938      	ldr	r0, [r7, #16]
 800ec0e:	1ac3      	subs	r3, r0, r3
 800ec10:	3301      	adds	r3, #1
 800ec12:	e001      	b.n	800ec18 <CircularQueue_Sense+0x11a>
 800ec14:	693b      	ldr	r3, [r7, #16]
 800ec16:	3301      	adds	r3, #1
 800ec18:	440b      	add	r3, r1
 800ec1a:	781b      	ldrb	r3, [r3, #0]
 800ec1c:	b29b      	uxth	r3, r3
 800ec1e:	021b      	lsls	r3, r3, #8
 800ec20:	b29b      	uxth	r3, r3
 800ec22:	4413      	add	r3, r2
 800ec24:	b29b      	uxth	r3, r3
 800ec26:	e001      	b.n	800ec2c <CircularQueue_Sense+0x12e>
 800ec28:	687b      	ldr	r3, [r7, #4]
 800ec2a:	891b      	ldrh	r3, [r3, #8]
 800ec2c:	683a      	ldr	r2, [r7, #0]
 800ec2e:	8013      	strh	r3, [r2, #0]
      }
   }
   /* retrieve element */
    x = q->qBuff + (MOD((FirstElemetPos + elemSizeStorageRoom), q->queueMaxSize));
 800ec30:	687b      	ldr	r3, [r7, #4]
 800ec32:	681a      	ldr	r2, [r3, #0]
 800ec34:	7bf9      	ldrb	r1, [r7, #15]
 800ec36:	693b      	ldr	r3, [r7, #16]
 800ec38:	4419      	add	r1, r3
 800ec3a:	687b      	ldr	r3, [r7, #4]
 800ec3c:	685b      	ldr	r3, [r3, #4]
 800ec3e:	4299      	cmp	r1, r3
 800ec40:	d306      	bcc.n	800ec50 <CircularQueue_Sense+0x152>
 800ec42:	7bf9      	ldrb	r1, [r7, #15]
 800ec44:	693b      	ldr	r3, [r7, #16]
 800ec46:	4419      	add	r1, r3
 800ec48:	687b      	ldr	r3, [r7, #4]
 800ec4a:	685b      	ldr	r3, [r3, #4]
 800ec4c:	1acb      	subs	r3, r1, r3
 800ec4e:	e002      	b.n	800ec56 <CircularQueue_Sense+0x158>
 800ec50:	7bf9      	ldrb	r1, [r7, #15]
 800ec52:	693b      	ldr	r3, [r7, #16]
 800ec54:	440b      	add	r3, r1
 800ec56:	4413      	add	r3, r2
 800ec58:	617b      	str	r3, [r7, #20]
  }
  return x;
 800ec5a:	697b      	ldr	r3, [r7, #20]
}
 800ec5c:	4618      	mov	r0, r3
 800ec5e:	371c      	adds	r7, #28
 800ec60:	46bd      	mov	sp, r7
 800ec62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec66:	4770      	bx	lr

0800ec68 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800ec68:	b480      	push	{r7}
 800ec6a:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 800ec6c:	bf00      	nop
 800ec6e:	46bd      	mov	sp, r7
 800ec70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec74:	4770      	bx	lr
	...

0800ec78 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800ec78:	b480      	push	{r7}
 800ec7a:	b085      	sub	sp, #20
 800ec7c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ec7e:	f3ef 8305 	mrs	r3, IPSR
 800ec82:	60bb      	str	r3, [r7, #8]
  return(result);
 800ec84:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800ec86:	2b00      	cmp	r3, #0
 800ec88:	d10f      	bne.n	800ecaa <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ec8a:	f3ef 8310 	mrs	r3, PRIMASK
 800ec8e:	607b      	str	r3, [r7, #4]
  return(result);
 800ec90:	687b      	ldr	r3, [r7, #4]
 800ec92:	2b00      	cmp	r3, #0
 800ec94:	d105      	bne.n	800eca2 <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800ec96:	f3ef 8311 	mrs	r3, BASEPRI
 800ec9a:	603b      	str	r3, [r7, #0]
  return(result);
 800ec9c:	683b      	ldr	r3, [r7, #0]
 800ec9e:	2b00      	cmp	r3, #0
 800eca0:	d007      	beq.n	800ecb2 <osKernelInitialize+0x3a>
 800eca2:	4b0e      	ldr	r3, [pc, #56]	; (800ecdc <osKernelInitialize+0x64>)
 800eca4:	681b      	ldr	r3, [r3, #0]
 800eca6:	2b02      	cmp	r3, #2
 800eca8:	d103      	bne.n	800ecb2 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 800ecaa:	f06f 0305 	mvn.w	r3, #5
 800ecae:	60fb      	str	r3, [r7, #12]
 800ecb0:	e00c      	b.n	800eccc <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 800ecb2:	4b0a      	ldr	r3, [pc, #40]	; (800ecdc <osKernelInitialize+0x64>)
 800ecb4:	681b      	ldr	r3, [r3, #0]
 800ecb6:	2b00      	cmp	r3, #0
 800ecb8:	d105      	bne.n	800ecc6 <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800ecba:	4b08      	ldr	r3, [pc, #32]	; (800ecdc <osKernelInitialize+0x64>)
 800ecbc:	2201      	movs	r2, #1
 800ecbe:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800ecc0:	2300      	movs	r3, #0
 800ecc2:	60fb      	str	r3, [r7, #12]
 800ecc4:	e002      	b.n	800eccc <osKernelInitialize+0x54>
    } else {
      stat = osError;
 800ecc6:	f04f 33ff 	mov.w	r3, #4294967295
 800ecca:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800eccc:	68fb      	ldr	r3, [r7, #12]
}
 800ecce:	4618      	mov	r0, r3
 800ecd0:	3714      	adds	r7, #20
 800ecd2:	46bd      	mov	sp, r7
 800ecd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecd8:	4770      	bx	lr
 800ecda:	bf00      	nop
 800ecdc:	2000144c 	.word	0x2000144c

0800ece0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800ece0:	b580      	push	{r7, lr}
 800ece2:	b084      	sub	sp, #16
 800ece4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ece6:	f3ef 8305 	mrs	r3, IPSR
 800ecea:	60bb      	str	r3, [r7, #8]
  return(result);
 800ecec:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800ecee:	2b00      	cmp	r3, #0
 800ecf0:	d10f      	bne.n	800ed12 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ecf2:	f3ef 8310 	mrs	r3, PRIMASK
 800ecf6:	607b      	str	r3, [r7, #4]
  return(result);
 800ecf8:	687b      	ldr	r3, [r7, #4]
 800ecfa:	2b00      	cmp	r3, #0
 800ecfc:	d105      	bne.n	800ed0a <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800ecfe:	f3ef 8311 	mrs	r3, BASEPRI
 800ed02:	603b      	str	r3, [r7, #0]
  return(result);
 800ed04:	683b      	ldr	r3, [r7, #0]
 800ed06:	2b00      	cmp	r3, #0
 800ed08:	d007      	beq.n	800ed1a <osKernelStart+0x3a>
 800ed0a:	4b0f      	ldr	r3, [pc, #60]	; (800ed48 <osKernelStart+0x68>)
 800ed0c:	681b      	ldr	r3, [r3, #0]
 800ed0e:	2b02      	cmp	r3, #2
 800ed10:	d103      	bne.n	800ed1a <osKernelStart+0x3a>
    stat = osErrorISR;
 800ed12:	f06f 0305 	mvn.w	r3, #5
 800ed16:	60fb      	str	r3, [r7, #12]
 800ed18:	e010      	b.n	800ed3c <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 800ed1a:	4b0b      	ldr	r3, [pc, #44]	; (800ed48 <osKernelStart+0x68>)
 800ed1c:	681b      	ldr	r3, [r3, #0]
 800ed1e:	2b01      	cmp	r3, #1
 800ed20:	d109      	bne.n	800ed36 <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800ed22:	f7ff ffa1 	bl	800ec68 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800ed26:	4b08      	ldr	r3, [pc, #32]	; (800ed48 <osKernelStart+0x68>)
 800ed28:	2202      	movs	r2, #2
 800ed2a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800ed2c:	f002 fce6 	bl	80116fc <vTaskStartScheduler>
      stat = osOK;
 800ed30:	2300      	movs	r3, #0
 800ed32:	60fb      	str	r3, [r7, #12]
 800ed34:	e002      	b.n	800ed3c <osKernelStart+0x5c>
    } else {
      stat = osError;
 800ed36:	f04f 33ff 	mov.w	r3, #4294967295
 800ed3a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800ed3c:	68fb      	ldr	r3, [r7, #12]
}
 800ed3e:	4618      	mov	r0, r3
 800ed40:	3710      	adds	r7, #16
 800ed42:	46bd      	mov	sp, r7
 800ed44:	bd80      	pop	{r7, pc}
 800ed46:	bf00      	nop
 800ed48:	2000144c 	.word	0x2000144c

0800ed4c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800ed4c:	b580      	push	{r7, lr}
 800ed4e:	b090      	sub	sp, #64	; 0x40
 800ed50:	af04      	add	r7, sp, #16
 800ed52:	60f8      	str	r0, [r7, #12]
 800ed54:	60b9      	str	r1, [r7, #8]
 800ed56:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800ed58:	2300      	movs	r3, #0
 800ed5a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ed5c:	f3ef 8305 	mrs	r3, IPSR
 800ed60:	61fb      	str	r3, [r7, #28]
  return(result);
 800ed62:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 800ed64:	2b00      	cmp	r3, #0
 800ed66:	f040 808f 	bne.w	800ee88 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ed6a:	f3ef 8310 	mrs	r3, PRIMASK
 800ed6e:	61bb      	str	r3, [r7, #24]
  return(result);
 800ed70:	69bb      	ldr	r3, [r7, #24]
 800ed72:	2b00      	cmp	r3, #0
 800ed74:	d105      	bne.n	800ed82 <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800ed76:	f3ef 8311 	mrs	r3, BASEPRI
 800ed7a:	617b      	str	r3, [r7, #20]
  return(result);
 800ed7c:	697b      	ldr	r3, [r7, #20]
 800ed7e:	2b00      	cmp	r3, #0
 800ed80:	d003      	beq.n	800ed8a <osThreadNew+0x3e>
 800ed82:	4b44      	ldr	r3, [pc, #272]	; (800ee94 <osThreadNew+0x148>)
 800ed84:	681b      	ldr	r3, [r3, #0]
 800ed86:	2b02      	cmp	r3, #2
 800ed88:	d07e      	beq.n	800ee88 <osThreadNew+0x13c>
 800ed8a:	68fb      	ldr	r3, [r7, #12]
 800ed8c:	2b00      	cmp	r3, #0
 800ed8e:	d07b      	beq.n	800ee88 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 800ed90:	2380      	movs	r3, #128	; 0x80
 800ed92:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 800ed94:	2318      	movs	r3, #24
 800ed96:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 800ed98:	2300      	movs	r3, #0
 800ed9a:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 800ed9c:	f04f 33ff 	mov.w	r3, #4294967295
 800eda0:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800eda2:	687b      	ldr	r3, [r7, #4]
 800eda4:	2b00      	cmp	r3, #0
 800eda6:	d045      	beq.n	800ee34 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 800eda8:	687b      	ldr	r3, [r7, #4]
 800edaa:	681b      	ldr	r3, [r3, #0]
 800edac:	2b00      	cmp	r3, #0
 800edae:	d002      	beq.n	800edb6 <osThreadNew+0x6a>
        name = attr->name;
 800edb0:	687b      	ldr	r3, [r7, #4]
 800edb2:	681b      	ldr	r3, [r3, #0]
 800edb4:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 800edb6:	687b      	ldr	r3, [r7, #4]
 800edb8:	699b      	ldr	r3, [r3, #24]
 800edba:	2b00      	cmp	r3, #0
 800edbc:	d002      	beq.n	800edc4 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 800edbe:	687b      	ldr	r3, [r7, #4]
 800edc0:	699b      	ldr	r3, [r3, #24]
 800edc2:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800edc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800edc6:	2b00      	cmp	r3, #0
 800edc8:	d008      	beq.n	800eddc <osThreadNew+0x90>
 800edca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800edcc:	2b38      	cmp	r3, #56	; 0x38
 800edce:	d805      	bhi.n	800eddc <osThreadNew+0x90>
 800edd0:	687b      	ldr	r3, [r7, #4]
 800edd2:	685b      	ldr	r3, [r3, #4]
 800edd4:	f003 0301 	and.w	r3, r3, #1
 800edd8:	2b00      	cmp	r3, #0
 800edda:	d001      	beq.n	800ede0 <osThreadNew+0x94>
        return (NULL);
 800eddc:	2300      	movs	r3, #0
 800edde:	e054      	b.n	800ee8a <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 800ede0:	687b      	ldr	r3, [r7, #4]
 800ede2:	695b      	ldr	r3, [r3, #20]
 800ede4:	2b00      	cmp	r3, #0
 800ede6:	d003      	beq.n	800edf0 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800ede8:	687b      	ldr	r3, [r7, #4]
 800edea:	695b      	ldr	r3, [r3, #20]
 800edec:	089b      	lsrs	r3, r3, #2
 800edee:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800edf0:	687b      	ldr	r3, [r7, #4]
 800edf2:	689b      	ldr	r3, [r3, #8]
 800edf4:	2b00      	cmp	r3, #0
 800edf6:	d00e      	beq.n	800ee16 <osThreadNew+0xca>
 800edf8:	687b      	ldr	r3, [r7, #4]
 800edfa:	68db      	ldr	r3, [r3, #12]
 800edfc:	2b5b      	cmp	r3, #91	; 0x5b
 800edfe:	d90a      	bls.n	800ee16 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800ee00:	687b      	ldr	r3, [r7, #4]
 800ee02:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800ee04:	2b00      	cmp	r3, #0
 800ee06:	d006      	beq.n	800ee16 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800ee08:	687b      	ldr	r3, [r7, #4]
 800ee0a:	695b      	ldr	r3, [r3, #20]
 800ee0c:	2b00      	cmp	r3, #0
 800ee0e:	d002      	beq.n	800ee16 <osThreadNew+0xca>
        mem = 1;
 800ee10:	2301      	movs	r3, #1
 800ee12:	623b      	str	r3, [r7, #32]
 800ee14:	e010      	b.n	800ee38 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800ee16:	687b      	ldr	r3, [r7, #4]
 800ee18:	689b      	ldr	r3, [r3, #8]
 800ee1a:	2b00      	cmp	r3, #0
 800ee1c:	d10c      	bne.n	800ee38 <osThreadNew+0xec>
 800ee1e:	687b      	ldr	r3, [r7, #4]
 800ee20:	68db      	ldr	r3, [r3, #12]
 800ee22:	2b00      	cmp	r3, #0
 800ee24:	d108      	bne.n	800ee38 <osThreadNew+0xec>
 800ee26:	687b      	ldr	r3, [r7, #4]
 800ee28:	691b      	ldr	r3, [r3, #16]
 800ee2a:	2b00      	cmp	r3, #0
 800ee2c:	d104      	bne.n	800ee38 <osThreadNew+0xec>
          mem = 0;
 800ee2e:	2300      	movs	r3, #0
 800ee30:	623b      	str	r3, [r7, #32]
 800ee32:	e001      	b.n	800ee38 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 800ee34:	2300      	movs	r3, #0
 800ee36:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 800ee38:	6a3b      	ldr	r3, [r7, #32]
 800ee3a:	2b01      	cmp	r3, #1
 800ee3c:	d110      	bne.n	800ee60 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800ee3e:	687b      	ldr	r3, [r7, #4]
 800ee40:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 800ee42:	687a      	ldr	r2, [r7, #4]
 800ee44:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800ee46:	9202      	str	r2, [sp, #8]
 800ee48:	9301      	str	r3, [sp, #4]
 800ee4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee4c:	9300      	str	r3, [sp, #0]
 800ee4e:	68bb      	ldr	r3, [r7, #8]
 800ee50:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ee52:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ee54:	68f8      	ldr	r0, [r7, #12]
 800ee56:	f002 fa7f 	bl	8011358 <xTaskCreateStatic>
 800ee5a:	4603      	mov	r3, r0
 800ee5c:	613b      	str	r3, [r7, #16]
 800ee5e:	e013      	b.n	800ee88 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 800ee60:	6a3b      	ldr	r3, [r7, #32]
 800ee62:	2b00      	cmp	r3, #0
 800ee64:	d110      	bne.n	800ee88 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800ee66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee68:	b29a      	uxth	r2, r3
 800ee6a:	f107 0310 	add.w	r3, r7, #16
 800ee6e:	9301      	str	r3, [sp, #4]
 800ee70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee72:	9300      	str	r3, [sp, #0]
 800ee74:	68bb      	ldr	r3, [r7, #8]
 800ee76:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ee78:	68f8      	ldr	r0, [r7, #12]
 800ee7a:	f002 fac7 	bl	801140c <xTaskCreate>
 800ee7e:	4603      	mov	r3, r0
 800ee80:	2b01      	cmp	r3, #1
 800ee82:	d001      	beq.n	800ee88 <osThreadNew+0x13c>
          hTask = NULL;
 800ee84:	2300      	movs	r3, #0
 800ee86:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 800ee88:	693b      	ldr	r3, [r7, #16]
}
 800ee8a:	4618      	mov	r0, r3
 800ee8c:	3730      	adds	r7, #48	; 0x30
 800ee8e:	46bd      	mov	sp, r7
 800ee90:	bd80      	pop	{r7, pc}
 800ee92:	bf00      	nop
 800ee94:	2000144c 	.word	0x2000144c

0800ee98 <osThreadFlagsSet>:
  }

  return (count);
}

uint32_t osThreadFlagsSet (osThreadId_t thread_id, uint32_t flags) {
 800ee98:	b580      	push	{r7, lr}
 800ee9a:	b08a      	sub	sp, #40	; 0x28
 800ee9c:	af02      	add	r7, sp, #8
 800ee9e:	6078      	str	r0, [r7, #4]
 800eea0:	6039      	str	r1, [r7, #0]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 800eea2:	687b      	ldr	r3, [r7, #4]
 800eea4:	61fb      	str	r3, [r7, #28]
  uint32_t rflags;
  BaseType_t yield;

  if ((hTask == NULL) || ((flags & THREAD_FLAGS_INVALID_BITS) != 0U)) {
 800eea6:	69fb      	ldr	r3, [r7, #28]
 800eea8:	2b00      	cmp	r3, #0
 800eeaa:	d002      	beq.n	800eeb2 <osThreadFlagsSet+0x1a>
 800eeac:	683b      	ldr	r3, [r7, #0]
 800eeae:	2b00      	cmp	r3, #0
 800eeb0:	da03      	bge.n	800eeba <osThreadFlagsSet+0x22>
    rflags = (uint32_t)osErrorParameter;
 800eeb2:	f06f 0303 	mvn.w	r3, #3
 800eeb6:	60fb      	str	r3, [r7, #12]
 800eeb8:	e046      	b.n	800ef48 <osThreadFlagsSet+0xb0>
  }
  else {
    rflags = (uint32_t)osError;
 800eeba:	f04f 33ff 	mov.w	r3, #4294967295
 800eebe:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800eec0:	f3ef 8305 	mrs	r3, IPSR
 800eec4:	61bb      	str	r3, [r7, #24]
  return(result);
 800eec6:	69bb      	ldr	r3, [r7, #24]

    if (IS_IRQ()) {
 800eec8:	2b00      	cmp	r3, #0
 800eeca:	d10f      	bne.n	800eeec <osThreadFlagsSet+0x54>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800eecc:	f3ef 8310 	mrs	r3, PRIMASK
 800eed0:	617b      	str	r3, [r7, #20]
  return(result);
 800eed2:	697b      	ldr	r3, [r7, #20]
 800eed4:	2b00      	cmp	r3, #0
 800eed6:	d105      	bne.n	800eee4 <osThreadFlagsSet+0x4c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800eed8:	f3ef 8311 	mrs	r3, BASEPRI
 800eedc:	613b      	str	r3, [r7, #16]
  return(result);
 800eede:	693b      	ldr	r3, [r7, #16]
 800eee0:	2b00      	cmp	r3, #0
 800eee2:	d024      	beq.n	800ef2e <osThreadFlagsSet+0x96>
 800eee4:	4b1b      	ldr	r3, [pc, #108]	; (800ef54 <osThreadFlagsSet+0xbc>)
 800eee6:	681b      	ldr	r3, [r3, #0]
 800eee8:	2b02      	cmp	r3, #2
 800eeea:	d120      	bne.n	800ef2e <osThreadFlagsSet+0x96>
      yield = pdFALSE;
 800eeec:	2300      	movs	r3, #0
 800eeee:	60bb      	str	r3, [r7, #8]

      (void)xTaskNotifyFromISR (hTask, flags, eSetBits, &yield);
 800eef0:	f107 0308 	add.w	r3, r7, #8
 800eef4:	9300      	str	r3, [sp, #0]
 800eef6:	2300      	movs	r3, #0
 800eef8:	2201      	movs	r2, #1
 800eefa:	6839      	ldr	r1, [r7, #0]
 800eefc:	69f8      	ldr	r0, [r7, #28]
 800eefe:	f003 fb81 	bl	8012604 <xTaskGenericNotifyFromISR>
      (void)xTaskNotifyAndQueryFromISR (hTask, 0, eNoAction, &rflags, NULL);
 800ef02:	f107 020c 	add.w	r2, r7, #12
 800ef06:	2300      	movs	r3, #0
 800ef08:	9300      	str	r3, [sp, #0]
 800ef0a:	4613      	mov	r3, r2
 800ef0c:	2200      	movs	r2, #0
 800ef0e:	2100      	movs	r1, #0
 800ef10:	69f8      	ldr	r0, [r7, #28]
 800ef12:	f003 fb77 	bl	8012604 <xTaskGenericNotifyFromISR>

      portYIELD_FROM_ISR (yield);
 800ef16:	68bb      	ldr	r3, [r7, #8]
 800ef18:	2b00      	cmp	r3, #0
 800ef1a:	d015      	beq.n	800ef48 <osThreadFlagsSet+0xb0>
 800ef1c:	4b0e      	ldr	r3, [pc, #56]	; (800ef58 <osThreadFlagsSet+0xc0>)
 800ef1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ef22:	601a      	str	r2, [r3, #0]
 800ef24:	f3bf 8f4f 	dsb	sy
 800ef28:	f3bf 8f6f 	isb	sy
 800ef2c:	e00c      	b.n	800ef48 <osThreadFlagsSet+0xb0>
    }
    else {
      (void)xTaskNotify (hTask, flags, eSetBits);
 800ef2e:	2300      	movs	r3, #0
 800ef30:	2201      	movs	r2, #1
 800ef32:	6839      	ldr	r1, [r7, #0]
 800ef34:	69f8      	ldr	r0, [r7, #28]
 800ef36:	f003 faaf 	bl	8012498 <xTaskGenericNotify>
      (void)xTaskNotifyAndQuery (hTask, 0, eNoAction, &rflags);
 800ef3a:	f107 030c 	add.w	r3, r7, #12
 800ef3e:	2200      	movs	r2, #0
 800ef40:	2100      	movs	r1, #0
 800ef42:	69f8      	ldr	r0, [r7, #28]
 800ef44:	f003 faa8 	bl	8012498 <xTaskGenericNotify>
    }
  }
  /* Return flags after setting */
  return (rflags);
 800ef48:	68fb      	ldr	r3, [r7, #12]
}
 800ef4a:	4618      	mov	r0, r3
 800ef4c:	3720      	adds	r7, #32
 800ef4e:	46bd      	mov	sp, r7
 800ef50:	bd80      	pop	{r7, pc}
 800ef52:	bf00      	nop
 800ef54:	2000144c 	.word	0x2000144c
 800ef58:	e000ed04 	.word	0xe000ed04

0800ef5c <osThreadFlagsWait>:
  }

  return (rflags);
}

uint32_t osThreadFlagsWait (uint32_t flags, uint32_t options, uint32_t timeout) {
 800ef5c:	b580      	push	{r7, lr}
 800ef5e:	b08e      	sub	sp, #56	; 0x38
 800ef60:	af00      	add	r7, sp, #0
 800ef62:	60f8      	str	r0, [r7, #12]
 800ef64:	60b9      	str	r1, [r7, #8]
 800ef66:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ef68:	f3ef 8305 	mrs	r3, IPSR
 800ef6c:	61fb      	str	r3, [r7, #28]
  return(result);
 800ef6e:	69fb      	ldr	r3, [r7, #28]
  uint32_t rflags, nval;
  uint32_t clear;
  TickType_t t0, td, tout;
  BaseType_t rval;

  if (IS_IRQ()) {
 800ef70:	2b00      	cmp	r3, #0
 800ef72:	d10f      	bne.n	800ef94 <osThreadFlagsWait+0x38>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ef74:	f3ef 8310 	mrs	r3, PRIMASK
 800ef78:	61bb      	str	r3, [r7, #24]
  return(result);
 800ef7a:	69bb      	ldr	r3, [r7, #24]
 800ef7c:	2b00      	cmp	r3, #0
 800ef7e:	d105      	bne.n	800ef8c <osThreadFlagsWait+0x30>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800ef80:	f3ef 8311 	mrs	r3, BASEPRI
 800ef84:	617b      	str	r3, [r7, #20]
  return(result);
 800ef86:	697b      	ldr	r3, [r7, #20]
 800ef88:	2b00      	cmp	r3, #0
 800ef8a:	d007      	beq.n	800ef9c <osThreadFlagsWait+0x40>
 800ef8c:	4b3c      	ldr	r3, [pc, #240]	; (800f080 <osThreadFlagsWait+0x124>)
 800ef8e:	681b      	ldr	r3, [r3, #0]
 800ef90:	2b02      	cmp	r3, #2
 800ef92:	d103      	bne.n	800ef9c <osThreadFlagsWait+0x40>
    rflags = (uint32_t)osErrorISR;
 800ef94:	f06f 0305 	mvn.w	r3, #5
 800ef98:	637b      	str	r3, [r7, #52]	; 0x34
 800ef9a:	e06b      	b.n	800f074 <osThreadFlagsWait+0x118>
  }
  else if ((flags & THREAD_FLAGS_INVALID_BITS) != 0U) {
 800ef9c:	68fb      	ldr	r3, [r7, #12]
 800ef9e:	2b00      	cmp	r3, #0
 800efa0:	da03      	bge.n	800efaa <osThreadFlagsWait+0x4e>
    rflags = (uint32_t)osErrorParameter;
 800efa2:	f06f 0303 	mvn.w	r3, #3
 800efa6:	637b      	str	r3, [r7, #52]	; 0x34
 800efa8:	e064      	b.n	800f074 <osThreadFlagsWait+0x118>
  }
  else {
    if ((options & osFlagsNoClear) == osFlagsNoClear) {
 800efaa:	68bb      	ldr	r3, [r7, #8]
 800efac:	f003 0302 	and.w	r3, r3, #2
 800efb0:	2b00      	cmp	r3, #0
 800efb2:	d002      	beq.n	800efba <osThreadFlagsWait+0x5e>
      clear = 0U;
 800efb4:	2300      	movs	r3, #0
 800efb6:	633b      	str	r3, [r7, #48]	; 0x30
 800efb8:	e001      	b.n	800efbe <osThreadFlagsWait+0x62>
    } else {
      clear = flags;
 800efba:	68fb      	ldr	r3, [r7, #12]
 800efbc:	633b      	str	r3, [r7, #48]	; 0x30
    }

    rflags = 0U;
 800efbe:	2300      	movs	r3, #0
 800efc0:	637b      	str	r3, [r7, #52]	; 0x34
    tout   = timeout;
 800efc2:	687b      	ldr	r3, [r7, #4]
 800efc4:	62fb      	str	r3, [r7, #44]	; 0x2c

    t0 = xTaskGetTickCount();
 800efc6:	f002 fcdf 	bl	8011988 <xTaskGetTickCount>
 800efca:	62b8      	str	r0, [r7, #40]	; 0x28
    do {
      rval = xTaskNotifyWait (0, clear, &nval, tout);
 800efcc:	f107 0210 	add.w	r2, r7, #16
 800efd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800efd2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800efd4:	2000      	movs	r0, #0
 800efd6:	f003 fa05 	bl	80123e4 <xTaskNotifyWait>
 800efda:	6278      	str	r0, [r7, #36]	; 0x24

      if (rval == pdPASS) {
 800efdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800efde:	2b01      	cmp	r3, #1
 800efe0:	d137      	bne.n	800f052 <osThreadFlagsWait+0xf6>
        rflags &= flags;
 800efe2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800efe4:	68fb      	ldr	r3, [r7, #12]
 800efe6:	4013      	ands	r3, r2
 800efe8:	637b      	str	r3, [r7, #52]	; 0x34
        rflags |= nval;
 800efea:	693b      	ldr	r3, [r7, #16]
 800efec:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800efee:	4313      	orrs	r3, r2
 800eff0:	637b      	str	r3, [r7, #52]	; 0x34

        if ((options & osFlagsWaitAll) == osFlagsWaitAll) {
 800eff2:	68bb      	ldr	r3, [r7, #8]
 800eff4:	f003 0301 	and.w	r3, r3, #1
 800eff8:	2b00      	cmp	r3, #0
 800effa:	d00c      	beq.n	800f016 <osThreadFlagsWait+0xba>
          if ((flags & rflags) == flags) {
 800effc:	68fa      	ldr	r2, [r7, #12]
 800effe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f000:	4013      	ands	r3, r2
 800f002:	68fa      	ldr	r2, [r7, #12]
 800f004:	429a      	cmp	r2, r3
 800f006:	d032      	beq.n	800f06e <osThreadFlagsWait+0x112>
            break;
          } else {
            if (timeout == 0U) {
 800f008:	687b      	ldr	r3, [r7, #4]
 800f00a:	2b00      	cmp	r3, #0
 800f00c:	d10f      	bne.n	800f02e <osThreadFlagsWait+0xd2>
              rflags = (uint32_t)osErrorResource;
 800f00e:	f06f 0302 	mvn.w	r3, #2
 800f012:	637b      	str	r3, [r7, #52]	; 0x34
              break;
 800f014:	e02e      	b.n	800f074 <osThreadFlagsWait+0x118>
            }
          }
        }
        else {
          if ((flags & rflags) != 0) {
 800f016:	68fa      	ldr	r2, [r7, #12]
 800f018:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f01a:	4013      	ands	r3, r2
 800f01c:	2b00      	cmp	r3, #0
 800f01e:	d128      	bne.n	800f072 <osThreadFlagsWait+0x116>
            break;
          } else {
            if (timeout == 0U) {
 800f020:	687b      	ldr	r3, [r7, #4]
 800f022:	2b00      	cmp	r3, #0
 800f024:	d103      	bne.n	800f02e <osThreadFlagsWait+0xd2>
              rflags = (uint32_t)osErrorResource;
 800f026:	f06f 0302 	mvn.w	r3, #2
 800f02a:	637b      	str	r3, [r7, #52]	; 0x34
              break;
 800f02c:	e022      	b.n	800f074 <osThreadFlagsWait+0x118>
            }
          }
        }

        /* Update timeout */
        td = xTaskGetTickCount() - t0;
 800f02e:	f002 fcab 	bl	8011988 <xTaskGetTickCount>
 800f032:	4602      	mov	r2, r0
 800f034:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f036:	1ad3      	subs	r3, r2, r3
 800f038:	623b      	str	r3, [r7, #32]

        if (td > tout) {
 800f03a:	6a3a      	ldr	r2, [r7, #32]
 800f03c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f03e:	429a      	cmp	r2, r3
 800f040:	d902      	bls.n	800f048 <osThreadFlagsWait+0xec>
          tout  = 0;
 800f042:	2300      	movs	r3, #0
 800f044:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f046:	e00e      	b.n	800f066 <osThreadFlagsWait+0x10a>
        } else {
          tout -= td;
 800f048:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f04a:	6a3b      	ldr	r3, [r7, #32]
 800f04c:	1ad3      	subs	r3, r2, r3
 800f04e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f050:	e009      	b.n	800f066 <osThreadFlagsWait+0x10a>
        }
      }
      else {
        if (timeout == 0) {
 800f052:	687b      	ldr	r3, [r7, #4]
 800f054:	2b00      	cmp	r3, #0
 800f056:	d103      	bne.n	800f060 <osThreadFlagsWait+0x104>
          rflags = (uint32_t)osErrorResource;
 800f058:	f06f 0302 	mvn.w	r3, #2
 800f05c:	637b      	str	r3, [r7, #52]	; 0x34
 800f05e:	e002      	b.n	800f066 <osThreadFlagsWait+0x10a>
        } else {
          rflags = (uint32_t)osErrorTimeout;
 800f060:	f06f 0301 	mvn.w	r3, #1
 800f064:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
    }
    while (rval != pdFAIL);
 800f066:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f068:	2b00      	cmp	r3, #0
 800f06a:	d1af      	bne.n	800efcc <osThreadFlagsWait+0x70>
 800f06c:	e002      	b.n	800f074 <osThreadFlagsWait+0x118>
            break;
 800f06e:	bf00      	nop
 800f070:	e000      	b.n	800f074 <osThreadFlagsWait+0x118>
            break;
 800f072:	bf00      	nop
  }

  /* Return flags before clearing */
  return (rflags);
 800f074:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800f076:	4618      	mov	r0, r3
 800f078:	3738      	adds	r7, #56	; 0x38
 800f07a:	46bd      	mov	sp, r7
 800f07c:	bd80      	pop	{r7, pc}
 800f07e:	bf00      	nop
 800f080:	2000144c 	.word	0x2000144c

0800f084 <osDelay>:

osStatus_t osDelay (uint32_t ticks) {
 800f084:	b580      	push	{r7, lr}
 800f086:	b086      	sub	sp, #24
 800f088:	af00      	add	r7, sp, #0
 800f08a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f08c:	f3ef 8305 	mrs	r3, IPSR
 800f090:	613b      	str	r3, [r7, #16]
  return(result);
 800f092:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 800f094:	2b00      	cmp	r3, #0
 800f096:	d10f      	bne.n	800f0b8 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f098:	f3ef 8310 	mrs	r3, PRIMASK
 800f09c:	60fb      	str	r3, [r7, #12]
  return(result);
 800f09e:	68fb      	ldr	r3, [r7, #12]
 800f0a0:	2b00      	cmp	r3, #0
 800f0a2:	d105      	bne.n	800f0b0 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800f0a4:	f3ef 8311 	mrs	r3, BASEPRI
 800f0a8:	60bb      	str	r3, [r7, #8]
  return(result);
 800f0aa:	68bb      	ldr	r3, [r7, #8]
 800f0ac:	2b00      	cmp	r3, #0
 800f0ae:	d007      	beq.n	800f0c0 <osDelay+0x3c>
 800f0b0:	4b0a      	ldr	r3, [pc, #40]	; (800f0dc <osDelay+0x58>)
 800f0b2:	681b      	ldr	r3, [r3, #0]
 800f0b4:	2b02      	cmp	r3, #2
 800f0b6:	d103      	bne.n	800f0c0 <osDelay+0x3c>
    stat = osErrorISR;
 800f0b8:	f06f 0305 	mvn.w	r3, #5
 800f0bc:	617b      	str	r3, [r7, #20]
 800f0be:	e007      	b.n	800f0d0 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 800f0c0:	2300      	movs	r3, #0
 800f0c2:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 800f0c4:	687b      	ldr	r3, [r7, #4]
 800f0c6:	2b00      	cmp	r3, #0
 800f0c8:	d002      	beq.n	800f0d0 <osDelay+0x4c>
      vTaskDelay(ticks);
 800f0ca:	6878      	ldr	r0, [r7, #4]
 800f0cc:	f002 fae2 	bl	8011694 <vTaskDelay>
    }
  }

  return (stat);
 800f0d0:	697b      	ldr	r3, [r7, #20]
}
 800f0d2:	4618      	mov	r0, r3
 800f0d4:	3718      	adds	r7, #24
 800f0d6:	46bd      	mov	sp, r7
 800f0d8:	bd80      	pop	{r7, pc}
 800f0da:	bf00      	nop
 800f0dc:	2000144c 	.word	0x2000144c

0800f0e0 <osMutexNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 800f0e0:	b580      	push	{r7, lr}
 800f0e2:	b08a      	sub	sp, #40	; 0x28
 800f0e4:	af00      	add	r7, sp, #0
 800f0e6:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 800f0e8:	2300      	movs	r3, #0
 800f0ea:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f0ec:	f3ef 8305 	mrs	r3, IPSR
 800f0f0:	613b      	str	r3, [r7, #16]
  return(result);
 800f0f2:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ()) {
 800f0f4:	2b00      	cmp	r3, #0
 800f0f6:	f040 8085 	bne.w	800f204 <osMutexNew+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f0fa:	f3ef 8310 	mrs	r3, PRIMASK
 800f0fe:	60fb      	str	r3, [r7, #12]
  return(result);
 800f100:	68fb      	ldr	r3, [r7, #12]
 800f102:	2b00      	cmp	r3, #0
 800f104:	d105      	bne.n	800f112 <osMutexNew+0x32>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800f106:	f3ef 8311 	mrs	r3, BASEPRI
 800f10a:	60bb      	str	r3, [r7, #8]
  return(result);
 800f10c:	68bb      	ldr	r3, [r7, #8]
 800f10e:	2b00      	cmp	r3, #0
 800f110:	d003      	beq.n	800f11a <osMutexNew+0x3a>
 800f112:	4b3f      	ldr	r3, [pc, #252]	; (800f210 <osMutexNew+0x130>)
 800f114:	681b      	ldr	r3, [r3, #0]
 800f116:	2b02      	cmp	r3, #2
 800f118:	d074      	beq.n	800f204 <osMutexNew+0x124>
    if (attr != NULL) {
 800f11a:	687b      	ldr	r3, [r7, #4]
 800f11c:	2b00      	cmp	r3, #0
 800f11e:	d003      	beq.n	800f128 <osMutexNew+0x48>
      type = attr->attr_bits;
 800f120:	687b      	ldr	r3, [r7, #4]
 800f122:	685b      	ldr	r3, [r3, #4]
 800f124:	623b      	str	r3, [r7, #32]
 800f126:	e001      	b.n	800f12c <osMutexNew+0x4c>
    } else {
      type = 0U;
 800f128:	2300      	movs	r3, #0
 800f12a:	623b      	str	r3, [r7, #32]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 800f12c:	6a3b      	ldr	r3, [r7, #32]
 800f12e:	f003 0301 	and.w	r3, r3, #1
 800f132:	2b00      	cmp	r3, #0
 800f134:	d002      	beq.n	800f13c <osMutexNew+0x5c>
      rmtx = 1U;
 800f136:	2301      	movs	r3, #1
 800f138:	61fb      	str	r3, [r7, #28]
 800f13a:	e001      	b.n	800f140 <osMutexNew+0x60>
    } else {
      rmtx = 0U;
 800f13c:	2300      	movs	r3, #0
 800f13e:	61fb      	str	r3, [r7, #28]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 800f140:	6a3b      	ldr	r3, [r7, #32]
 800f142:	f003 0308 	and.w	r3, r3, #8
 800f146:	2b00      	cmp	r3, #0
 800f148:	d15c      	bne.n	800f204 <osMutexNew+0x124>
      mem = -1;
 800f14a:	f04f 33ff 	mov.w	r3, #4294967295
 800f14e:	61bb      	str	r3, [r7, #24]

      if (attr != NULL) {
 800f150:	687b      	ldr	r3, [r7, #4]
 800f152:	2b00      	cmp	r3, #0
 800f154:	d015      	beq.n	800f182 <osMutexNew+0xa2>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800f156:	687b      	ldr	r3, [r7, #4]
 800f158:	689b      	ldr	r3, [r3, #8]
 800f15a:	2b00      	cmp	r3, #0
 800f15c:	d006      	beq.n	800f16c <osMutexNew+0x8c>
 800f15e:	687b      	ldr	r3, [r7, #4]
 800f160:	68db      	ldr	r3, [r3, #12]
 800f162:	2b4f      	cmp	r3, #79	; 0x4f
 800f164:	d902      	bls.n	800f16c <osMutexNew+0x8c>
          mem = 1;
 800f166:	2301      	movs	r3, #1
 800f168:	61bb      	str	r3, [r7, #24]
 800f16a:	e00c      	b.n	800f186 <osMutexNew+0xa6>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800f16c:	687b      	ldr	r3, [r7, #4]
 800f16e:	689b      	ldr	r3, [r3, #8]
 800f170:	2b00      	cmp	r3, #0
 800f172:	d108      	bne.n	800f186 <osMutexNew+0xa6>
 800f174:	687b      	ldr	r3, [r7, #4]
 800f176:	68db      	ldr	r3, [r3, #12]
 800f178:	2b00      	cmp	r3, #0
 800f17a:	d104      	bne.n	800f186 <osMutexNew+0xa6>
            mem = 0;
 800f17c:	2300      	movs	r3, #0
 800f17e:	61bb      	str	r3, [r7, #24]
 800f180:	e001      	b.n	800f186 <osMutexNew+0xa6>
          }
        }
      }
      else {
        mem = 0;
 800f182:	2300      	movs	r3, #0
 800f184:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 800f186:	69bb      	ldr	r3, [r7, #24]
 800f188:	2b01      	cmp	r3, #1
 800f18a:	d112      	bne.n	800f1b2 <osMutexNew+0xd2>
        if (rmtx != 0U) {
 800f18c:	69fb      	ldr	r3, [r7, #28]
 800f18e:	2b00      	cmp	r3, #0
 800f190:	d007      	beq.n	800f1a2 <osMutexNew+0xc2>
          hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 800f192:	687b      	ldr	r3, [r7, #4]
 800f194:	689b      	ldr	r3, [r3, #8]
 800f196:	4619      	mov	r1, r3
 800f198:	2004      	movs	r0, #4
 800f19a:	f001 f9aa 	bl	80104f2 <xQueueCreateMutexStatic>
 800f19e:	6278      	str	r0, [r7, #36]	; 0x24
 800f1a0:	e016      	b.n	800f1d0 <osMutexNew+0xf0>
        }
        else {
          hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 800f1a2:	687b      	ldr	r3, [r7, #4]
 800f1a4:	689b      	ldr	r3, [r3, #8]
 800f1a6:	4619      	mov	r1, r3
 800f1a8:	2001      	movs	r0, #1
 800f1aa:	f001 f9a2 	bl	80104f2 <xQueueCreateMutexStatic>
 800f1ae:	6278      	str	r0, [r7, #36]	; 0x24
 800f1b0:	e00e      	b.n	800f1d0 <osMutexNew+0xf0>
        }
      }
      else {
        if (mem == 0) {
 800f1b2:	69bb      	ldr	r3, [r7, #24]
 800f1b4:	2b00      	cmp	r3, #0
 800f1b6:	d10b      	bne.n	800f1d0 <osMutexNew+0xf0>
          if (rmtx != 0U) {
 800f1b8:	69fb      	ldr	r3, [r7, #28]
 800f1ba:	2b00      	cmp	r3, #0
 800f1bc:	d004      	beq.n	800f1c8 <osMutexNew+0xe8>
            hMutex = xSemaphoreCreateRecursiveMutex ();
 800f1be:	2004      	movs	r0, #4
 800f1c0:	f001 f97f 	bl	80104c2 <xQueueCreateMutex>
 800f1c4:	6278      	str	r0, [r7, #36]	; 0x24
 800f1c6:	e003      	b.n	800f1d0 <osMutexNew+0xf0>
          } else {
            hMutex = xSemaphoreCreateMutex ();
 800f1c8:	2001      	movs	r0, #1
 800f1ca:	f001 f97a 	bl	80104c2 <xQueueCreateMutex>
 800f1ce:	6278      	str	r0, [r7, #36]	; 0x24
          }
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 800f1d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f1d2:	2b00      	cmp	r3, #0
 800f1d4:	d00c      	beq.n	800f1f0 <osMutexNew+0x110>
        if (attr != NULL) {
 800f1d6:	687b      	ldr	r3, [r7, #4]
 800f1d8:	2b00      	cmp	r3, #0
 800f1da:	d003      	beq.n	800f1e4 <osMutexNew+0x104>
          name = attr->name;
 800f1dc:	687b      	ldr	r3, [r7, #4]
 800f1de:	681b      	ldr	r3, [r3, #0]
 800f1e0:	617b      	str	r3, [r7, #20]
 800f1e2:	e001      	b.n	800f1e8 <osMutexNew+0x108>
        } else {
          name = NULL;
 800f1e4:	2300      	movs	r3, #0
 800f1e6:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hMutex, name);
 800f1e8:	6979      	ldr	r1, [r7, #20]
 800f1ea:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f1ec:	f002 f82e 	bl	801124c <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 800f1f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f1f2:	2b00      	cmp	r3, #0
 800f1f4:	d006      	beq.n	800f204 <osMutexNew+0x124>
 800f1f6:	69fb      	ldr	r3, [r7, #28]
 800f1f8:	2b00      	cmp	r3, #0
 800f1fa:	d003      	beq.n	800f204 <osMutexNew+0x124>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 800f1fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f1fe:	f043 0301 	orr.w	r3, r3, #1
 800f202:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }
  }

  return ((osMutexId_t)hMutex);
 800f204:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800f206:	4618      	mov	r0, r3
 800f208:	3728      	adds	r7, #40	; 0x28
 800f20a:	46bd      	mov	sp, r7
 800f20c:	bd80      	pop	{r7, pc}
 800f20e:	bf00      	nop
 800f210:	2000144c 	.word	0x2000144c

0800f214 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 800f214:	b580      	push	{r7, lr}
 800f216:	b088      	sub	sp, #32
 800f218:	af00      	add	r7, sp, #0
 800f21a:	6078      	str	r0, [r7, #4]
 800f21c:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800f21e:	687b      	ldr	r3, [r7, #4]
 800f220:	f023 0301 	bic.w	r3, r3, #1
 800f224:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 800f226:	687b      	ldr	r3, [r7, #4]
 800f228:	f003 0301 	and.w	r3, r3, #1
 800f22c:	617b      	str	r3, [r7, #20]

  stat = osOK;
 800f22e:	2300      	movs	r3, #0
 800f230:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f232:	f3ef 8305 	mrs	r3, IPSR
 800f236:	613b      	str	r3, [r7, #16]
  return(result);
 800f238:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 800f23a:	2b00      	cmp	r3, #0
 800f23c:	d10f      	bne.n	800f25e <osMutexAcquire+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f23e:	f3ef 8310 	mrs	r3, PRIMASK
 800f242:	60fb      	str	r3, [r7, #12]
  return(result);
 800f244:	68fb      	ldr	r3, [r7, #12]
 800f246:	2b00      	cmp	r3, #0
 800f248:	d105      	bne.n	800f256 <osMutexAcquire+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800f24a:	f3ef 8311 	mrs	r3, BASEPRI
 800f24e:	60bb      	str	r3, [r7, #8]
  return(result);
 800f250:	68bb      	ldr	r3, [r7, #8]
 800f252:	2b00      	cmp	r3, #0
 800f254:	d007      	beq.n	800f266 <osMutexAcquire+0x52>
 800f256:	4b1d      	ldr	r3, [pc, #116]	; (800f2cc <osMutexAcquire+0xb8>)
 800f258:	681b      	ldr	r3, [r3, #0]
 800f25a:	2b02      	cmp	r3, #2
 800f25c:	d103      	bne.n	800f266 <osMutexAcquire+0x52>
    stat = osErrorISR;
 800f25e:	f06f 0305 	mvn.w	r3, #5
 800f262:	61fb      	str	r3, [r7, #28]
 800f264:	e02c      	b.n	800f2c0 <osMutexAcquire+0xac>
  }
  else if (hMutex == NULL) {
 800f266:	69bb      	ldr	r3, [r7, #24]
 800f268:	2b00      	cmp	r3, #0
 800f26a:	d103      	bne.n	800f274 <osMutexAcquire+0x60>
    stat = osErrorParameter;
 800f26c:	f06f 0303 	mvn.w	r3, #3
 800f270:	61fb      	str	r3, [r7, #28]
 800f272:	e025      	b.n	800f2c0 <osMutexAcquire+0xac>
  }
  else {
    if (rmtx != 0U) {
 800f274:	697b      	ldr	r3, [r7, #20]
 800f276:	2b00      	cmp	r3, #0
 800f278:	d011      	beq.n	800f29e <osMutexAcquire+0x8a>
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 800f27a:	6839      	ldr	r1, [r7, #0]
 800f27c:	69b8      	ldr	r0, [r7, #24]
 800f27e:	f001 f986 	bl	801058e <xQueueTakeMutexRecursive>
 800f282:	4603      	mov	r3, r0
 800f284:	2b01      	cmp	r3, #1
 800f286:	d01b      	beq.n	800f2c0 <osMutexAcquire+0xac>
        if (timeout != 0U) {
 800f288:	683b      	ldr	r3, [r7, #0]
 800f28a:	2b00      	cmp	r3, #0
 800f28c:	d003      	beq.n	800f296 <osMutexAcquire+0x82>
          stat = osErrorTimeout;
 800f28e:	f06f 0301 	mvn.w	r3, #1
 800f292:	61fb      	str	r3, [r7, #28]
 800f294:	e014      	b.n	800f2c0 <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 800f296:	f06f 0302 	mvn.w	r3, #2
 800f29a:	61fb      	str	r3, [r7, #28]
 800f29c:	e010      	b.n	800f2c0 <osMutexAcquire+0xac>
        }
      }
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 800f29e:	6839      	ldr	r1, [r7, #0]
 800f2a0:	69b8      	ldr	r0, [r7, #24]
 800f2a2:	f001 fd03 	bl	8010cac <xQueueSemaphoreTake>
 800f2a6:	4603      	mov	r3, r0
 800f2a8:	2b01      	cmp	r3, #1
 800f2aa:	d009      	beq.n	800f2c0 <osMutexAcquire+0xac>
        if (timeout != 0U) {
 800f2ac:	683b      	ldr	r3, [r7, #0]
 800f2ae:	2b00      	cmp	r3, #0
 800f2b0:	d003      	beq.n	800f2ba <osMutexAcquire+0xa6>
          stat = osErrorTimeout;
 800f2b2:	f06f 0301 	mvn.w	r3, #1
 800f2b6:	61fb      	str	r3, [r7, #28]
 800f2b8:	e002      	b.n	800f2c0 <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 800f2ba:	f06f 0302 	mvn.w	r3, #2
 800f2be:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800f2c0:	69fb      	ldr	r3, [r7, #28]
}
 800f2c2:	4618      	mov	r0, r3
 800f2c4:	3720      	adds	r7, #32
 800f2c6:	46bd      	mov	sp, r7
 800f2c8:	bd80      	pop	{r7, pc}
 800f2ca:	bf00      	nop
 800f2cc:	2000144c 	.word	0x2000144c

0800f2d0 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 800f2d0:	b580      	push	{r7, lr}
 800f2d2:	b088      	sub	sp, #32
 800f2d4:	af00      	add	r7, sp, #0
 800f2d6:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800f2d8:	687b      	ldr	r3, [r7, #4]
 800f2da:	f023 0301 	bic.w	r3, r3, #1
 800f2de:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 800f2e0:	687b      	ldr	r3, [r7, #4]
 800f2e2:	f003 0301 	and.w	r3, r3, #1
 800f2e6:	617b      	str	r3, [r7, #20]

  stat = osOK;
 800f2e8:	2300      	movs	r3, #0
 800f2ea:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f2ec:	f3ef 8305 	mrs	r3, IPSR
 800f2f0:	613b      	str	r3, [r7, #16]
  return(result);
 800f2f2:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 800f2f4:	2b00      	cmp	r3, #0
 800f2f6:	d10f      	bne.n	800f318 <osMutexRelease+0x48>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f2f8:	f3ef 8310 	mrs	r3, PRIMASK
 800f2fc:	60fb      	str	r3, [r7, #12]
  return(result);
 800f2fe:	68fb      	ldr	r3, [r7, #12]
 800f300:	2b00      	cmp	r3, #0
 800f302:	d105      	bne.n	800f310 <osMutexRelease+0x40>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800f304:	f3ef 8311 	mrs	r3, BASEPRI
 800f308:	60bb      	str	r3, [r7, #8]
  return(result);
 800f30a:	68bb      	ldr	r3, [r7, #8]
 800f30c:	2b00      	cmp	r3, #0
 800f30e:	d007      	beq.n	800f320 <osMutexRelease+0x50>
 800f310:	4b16      	ldr	r3, [pc, #88]	; (800f36c <osMutexRelease+0x9c>)
 800f312:	681b      	ldr	r3, [r3, #0]
 800f314:	2b02      	cmp	r3, #2
 800f316:	d103      	bne.n	800f320 <osMutexRelease+0x50>
    stat = osErrorISR;
 800f318:	f06f 0305 	mvn.w	r3, #5
 800f31c:	61fb      	str	r3, [r7, #28]
 800f31e:	e01f      	b.n	800f360 <osMutexRelease+0x90>
  }
  else if (hMutex == NULL) {
 800f320:	69bb      	ldr	r3, [r7, #24]
 800f322:	2b00      	cmp	r3, #0
 800f324:	d103      	bne.n	800f32e <osMutexRelease+0x5e>
    stat = osErrorParameter;
 800f326:	f06f 0303 	mvn.w	r3, #3
 800f32a:	61fb      	str	r3, [r7, #28]
 800f32c:	e018      	b.n	800f360 <osMutexRelease+0x90>
  }
  else {
    if (rmtx != 0U) {
 800f32e:	697b      	ldr	r3, [r7, #20]
 800f330:	2b00      	cmp	r3, #0
 800f332:	d009      	beq.n	800f348 <osMutexRelease+0x78>
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 800f334:	69b8      	ldr	r0, [r7, #24]
 800f336:	f001 f8f7 	bl	8010528 <xQueueGiveMutexRecursive>
 800f33a:	4603      	mov	r3, r0
 800f33c:	2b01      	cmp	r3, #1
 800f33e:	d00f      	beq.n	800f360 <osMutexRelease+0x90>
        stat = osErrorResource;
 800f340:	f06f 0302 	mvn.w	r3, #2
 800f344:	61fb      	str	r3, [r7, #28]
 800f346:	e00b      	b.n	800f360 <osMutexRelease+0x90>
      }
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 800f348:	2300      	movs	r3, #0
 800f34a:	2200      	movs	r2, #0
 800f34c:	2100      	movs	r1, #0
 800f34e:	69b8      	ldr	r0, [r7, #24]
 800f350:	f001 f9b8 	bl	80106c4 <xQueueGenericSend>
 800f354:	4603      	mov	r3, r0
 800f356:	2b01      	cmp	r3, #1
 800f358:	d002      	beq.n	800f360 <osMutexRelease+0x90>
        stat = osErrorResource;
 800f35a:	f06f 0302 	mvn.w	r3, #2
 800f35e:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return (stat);
 800f360:	69fb      	ldr	r3, [r7, #28]
}
 800f362:	4618      	mov	r0, r3
 800f364:	3720      	adds	r7, #32
 800f366:	46bd      	mov	sp, r7
 800f368:	bd80      	pop	{r7, pc}
 800f36a:	bf00      	nop
 800f36c:	2000144c 	.word	0x2000144c

0800f370 <osSemaphoreNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800f370:	b580      	push	{r7, lr}
 800f372:	b08c      	sub	sp, #48	; 0x30
 800f374:	af02      	add	r7, sp, #8
 800f376:	60f8      	str	r0, [r7, #12]
 800f378:	60b9      	str	r1, [r7, #8]
 800f37a:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 800f37c:	2300      	movs	r3, #0
 800f37e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f380:	f3ef 8305 	mrs	r3, IPSR
 800f384:	61bb      	str	r3, [r7, #24]
  return(result);
 800f386:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800f388:	2b00      	cmp	r3, #0
 800f38a:	f040 8087 	bne.w	800f49c <osSemaphoreNew+0x12c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f38e:	f3ef 8310 	mrs	r3, PRIMASK
 800f392:	617b      	str	r3, [r7, #20]
  return(result);
 800f394:	697b      	ldr	r3, [r7, #20]
 800f396:	2b00      	cmp	r3, #0
 800f398:	d105      	bne.n	800f3a6 <osSemaphoreNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800f39a:	f3ef 8311 	mrs	r3, BASEPRI
 800f39e:	613b      	str	r3, [r7, #16]
  return(result);
 800f3a0:	693b      	ldr	r3, [r7, #16]
 800f3a2:	2b00      	cmp	r3, #0
 800f3a4:	d003      	beq.n	800f3ae <osSemaphoreNew+0x3e>
 800f3a6:	4b40      	ldr	r3, [pc, #256]	; (800f4a8 <osSemaphoreNew+0x138>)
 800f3a8:	681b      	ldr	r3, [r3, #0]
 800f3aa:	2b02      	cmp	r3, #2
 800f3ac:	d076      	beq.n	800f49c <osSemaphoreNew+0x12c>
 800f3ae:	68fb      	ldr	r3, [r7, #12]
 800f3b0:	2b00      	cmp	r3, #0
 800f3b2:	d073      	beq.n	800f49c <osSemaphoreNew+0x12c>
 800f3b4:	68ba      	ldr	r2, [r7, #8]
 800f3b6:	68fb      	ldr	r3, [r7, #12]
 800f3b8:	429a      	cmp	r2, r3
 800f3ba:	d86f      	bhi.n	800f49c <osSemaphoreNew+0x12c>
    mem = -1;
 800f3bc:	f04f 33ff 	mov.w	r3, #4294967295
 800f3c0:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800f3c2:	687b      	ldr	r3, [r7, #4]
 800f3c4:	2b00      	cmp	r3, #0
 800f3c6:	d015      	beq.n	800f3f4 <osSemaphoreNew+0x84>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800f3c8:	687b      	ldr	r3, [r7, #4]
 800f3ca:	689b      	ldr	r3, [r3, #8]
 800f3cc:	2b00      	cmp	r3, #0
 800f3ce:	d006      	beq.n	800f3de <osSemaphoreNew+0x6e>
 800f3d0:	687b      	ldr	r3, [r7, #4]
 800f3d2:	68db      	ldr	r3, [r3, #12]
 800f3d4:	2b4f      	cmp	r3, #79	; 0x4f
 800f3d6:	d902      	bls.n	800f3de <osSemaphoreNew+0x6e>
        mem = 1;
 800f3d8:	2301      	movs	r3, #1
 800f3da:	623b      	str	r3, [r7, #32]
 800f3dc:	e00c      	b.n	800f3f8 <osSemaphoreNew+0x88>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800f3de:	687b      	ldr	r3, [r7, #4]
 800f3e0:	689b      	ldr	r3, [r3, #8]
 800f3e2:	2b00      	cmp	r3, #0
 800f3e4:	d108      	bne.n	800f3f8 <osSemaphoreNew+0x88>
 800f3e6:	687b      	ldr	r3, [r7, #4]
 800f3e8:	68db      	ldr	r3, [r3, #12]
 800f3ea:	2b00      	cmp	r3, #0
 800f3ec:	d104      	bne.n	800f3f8 <osSemaphoreNew+0x88>
          mem = 0;
 800f3ee:	2300      	movs	r3, #0
 800f3f0:	623b      	str	r3, [r7, #32]
 800f3f2:	e001      	b.n	800f3f8 <osSemaphoreNew+0x88>
        }
      }
    }
    else {
      mem = 0;
 800f3f4:	2300      	movs	r3, #0
 800f3f6:	623b      	str	r3, [r7, #32]
    }

    if (mem != -1) {
 800f3f8:	6a3b      	ldr	r3, [r7, #32]
 800f3fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f3fe:	d04d      	beq.n	800f49c <osSemaphoreNew+0x12c>
      if (max_count == 1U) {
 800f400:	68fb      	ldr	r3, [r7, #12]
 800f402:	2b01      	cmp	r3, #1
 800f404:	d129      	bne.n	800f45a <osSemaphoreNew+0xea>
        if (mem == 1) {
 800f406:	6a3b      	ldr	r3, [r7, #32]
 800f408:	2b01      	cmp	r3, #1
 800f40a:	d10b      	bne.n	800f424 <osSemaphoreNew+0xb4>
          hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800f40c:	687b      	ldr	r3, [r7, #4]
 800f40e:	689a      	ldr	r2, [r3, #8]
 800f410:	2303      	movs	r3, #3
 800f412:	9300      	str	r3, [sp, #0]
 800f414:	4613      	mov	r3, r2
 800f416:	2200      	movs	r2, #0
 800f418:	2100      	movs	r1, #0
 800f41a:	2001      	movs	r0, #1
 800f41c:	f000 ff62 	bl	80102e4 <xQueueGenericCreateStatic>
 800f420:	6278      	str	r0, [r7, #36]	; 0x24
 800f422:	e005      	b.n	800f430 <osSemaphoreNew+0xc0>
        }
        else {
          hSemaphore = xSemaphoreCreateBinary();
 800f424:	2203      	movs	r2, #3
 800f426:	2100      	movs	r1, #0
 800f428:	2001      	movs	r0, #1
 800f42a:	f000 ffce 	bl	80103ca <xQueueGenericCreate>
 800f42e:	6278      	str	r0, [r7, #36]	; 0x24
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800f430:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f432:	2b00      	cmp	r3, #0
 800f434:	d022      	beq.n	800f47c <osSemaphoreNew+0x10c>
 800f436:	68bb      	ldr	r3, [r7, #8]
 800f438:	2b00      	cmp	r3, #0
 800f43a:	d01f      	beq.n	800f47c <osSemaphoreNew+0x10c>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800f43c:	2300      	movs	r3, #0
 800f43e:	2200      	movs	r2, #0
 800f440:	2100      	movs	r1, #0
 800f442:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f444:	f001 f93e 	bl	80106c4 <xQueueGenericSend>
 800f448:	4603      	mov	r3, r0
 800f44a:	2b01      	cmp	r3, #1
 800f44c:	d016      	beq.n	800f47c <osSemaphoreNew+0x10c>
            vSemaphoreDelete (hSemaphore);
 800f44e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f450:	f001 fdb1 	bl	8010fb6 <vQueueDelete>
            hSemaphore = NULL;
 800f454:	2300      	movs	r3, #0
 800f456:	627b      	str	r3, [r7, #36]	; 0x24
 800f458:	e010      	b.n	800f47c <osSemaphoreNew+0x10c>
          }
        }
      }
      else {
        if (mem == 1) {
 800f45a:	6a3b      	ldr	r3, [r7, #32]
 800f45c:	2b01      	cmp	r3, #1
 800f45e:	d108      	bne.n	800f472 <osSemaphoreNew+0x102>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800f460:	687b      	ldr	r3, [r7, #4]
 800f462:	689b      	ldr	r3, [r3, #8]
 800f464:	461a      	mov	r2, r3
 800f466:	68b9      	ldr	r1, [r7, #8]
 800f468:	68f8      	ldr	r0, [r7, #12]
 800f46a:	f001 f8c5 	bl	80105f8 <xQueueCreateCountingSemaphoreStatic>
 800f46e:	6278      	str	r0, [r7, #36]	; 0x24
 800f470:	e004      	b.n	800f47c <osSemaphoreNew+0x10c>
        }
        else {
          hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800f472:	68b9      	ldr	r1, [r7, #8]
 800f474:	68f8      	ldr	r0, [r7, #12]
 800f476:	f001 f8f4 	bl	8010662 <xQueueCreateCountingSemaphore>
 800f47a:	6278      	str	r0, [r7, #36]	; 0x24
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 800f47c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f47e:	2b00      	cmp	r3, #0
 800f480:	d00c      	beq.n	800f49c <osSemaphoreNew+0x12c>
        if (attr != NULL) {
 800f482:	687b      	ldr	r3, [r7, #4]
 800f484:	2b00      	cmp	r3, #0
 800f486:	d003      	beq.n	800f490 <osSemaphoreNew+0x120>
          name = attr->name;
 800f488:	687b      	ldr	r3, [r7, #4]
 800f48a:	681b      	ldr	r3, [r3, #0]
 800f48c:	61fb      	str	r3, [r7, #28]
 800f48e:	e001      	b.n	800f494 <osSemaphoreNew+0x124>
        } else {
          name = NULL;
 800f490:	2300      	movs	r3, #0
 800f492:	61fb      	str	r3, [r7, #28]
        }
        vQueueAddToRegistry (hSemaphore, name);
 800f494:	69f9      	ldr	r1, [r7, #28]
 800f496:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f498:	f001 fed8 	bl	801124c <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 800f49c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800f49e:	4618      	mov	r0, r3
 800f4a0:	3728      	adds	r7, #40	; 0x28
 800f4a2:	46bd      	mov	sp, r7
 800f4a4:	bd80      	pop	{r7, pc}
 800f4a6:	bf00      	nop
 800f4a8:	2000144c 	.word	0x2000144c

0800f4ac <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 800f4ac:	b580      	push	{r7, lr}
 800f4ae:	b088      	sub	sp, #32
 800f4b0:	af00      	add	r7, sp, #0
 800f4b2:	6078      	str	r0, [r7, #4]
 800f4b4:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800f4b6:	687b      	ldr	r3, [r7, #4]
 800f4b8:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800f4ba:	2300      	movs	r3, #0
 800f4bc:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 800f4be:	69bb      	ldr	r3, [r7, #24]
 800f4c0:	2b00      	cmp	r3, #0
 800f4c2:	d103      	bne.n	800f4cc <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 800f4c4:	f06f 0303 	mvn.w	r3, #3
 800f4c8:	61fb      	str	r3, [r7, #28]
 800f4ca:	e04b      	b.n	800f564 <osSemaphoreAcquire+0xb8>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f4cc:	f3ef 8305 	mrs	r3, IPSR
 800f4d0:	617b      	str	r3, [r7, #20]
  return(result);
 800f4d2:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 800f4d4:	2b00      	cmp	r3, #0
 800f4d6:	d10f      	bne.n	800f4f8 <osSemaphoreAcquire+0x4c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f4d8:	f3ef 8310 	mrs	r3, PRIMASK
 800f4dc:	613b      	str	r3, [r7, #16]
  return(result);
 800f4de:	693b      	ldr	r3, [r7, #16]
 800f4e0:	2b00      	cmp	r3, #0
 800f4e2:	d105      	bne.n	800f4f0 <osSemaphoreAcquire+0x44>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800f4e4:	f3ef 8311 	mrs	r3, BASEPRI
 800f4e8:	60fb      	str	r3, [r7, #12]
  return(result);
 800f4ea:	68fb      	ldr	r3, [r7, #12]
 800f4ec:	2b00      	cmp	r3, #0
 800f4ee:	d026      	beq.n	800f53e <osSemaphoreAcquire+0x92>
 800f4f0:	4b1f      	ldr	r3, [pc, #124]	; (800f570 <osSemaphoreAcquire+0xc4>)
 800f4f2:	681b      	ldr	r3, [r3, #0]
 800f4f4:	2b02      	cmp	r3, #2
 800f4f6:	d122      	bne.n	800f53e <osSemaphoreAcquire+0x92>
    if (timeout != 0U) {
 800f4f8:	683b      	ldr	r3, [r7, #0]
 800f4fa:	2b00      	cmp	r3, #0
 800f4fc:	d003      	beq.n	800f506 <osSemaphoreAcquire+0x5a>
      stat = osErrorParameter;
 800f4fe:	f06f 0303 	mvn.w	r3, #3
 800f502:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 800f504:	e02d      	b.n	800f562 <osSemaphoreAcquire+0xb6>
    }
    else {
      yield = pdFALSE;
 800f506:	2300      	movs	r3, #0
 800f508:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800f50a:	f107 0308 	add.w	r3, r7, #8
 800f50e:	461a      	mov	r2, r3
 800f510:	2100      	movs	r1, #0
 800f512:	69b8      	ldr	r0, [r7, #24]
 800f514:	f001 fcd2 	bl	8010ebc <xQueueReceiveFromISR>
 800f518:	4603      	mov	r3, r0
 800f51a:	2b01      	cmp	r3, #1
 800f51c:	d003      	beq.n	800f526 <osSemaphoreAcquire+0x7a>
        stat = osErrorResource;
 800f51e:	f06f 0302 	mvn.w	r3, #2
 800f522:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 800f524:	e01d      	b.n	800f562 <osSemaphoreAcquire+0xb6>
      } else {
        portYIELD_FROM_ISR (yield);
 800f526:	68bb      	ldr	r3, [r7, #8]
 800f528:	2b00      	cmp	r3, #0
 800f52a:	d01a      	beq.n	800f562 <osSemaphoreAcquire+0xb6>
 800f52c:	4b11      	ldr	r3, [pc, #68]	; (800f574 <osSemaphoreAcquire+0xc8>)
 800f52e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f532:	601a      	str	r2, [r3, #0]
 800f534:	f3bf 8f4f 	dsb	sy
 800f538:	f3bf 8f6f 	isb	sy
    if (timeout != 0U) {
 800f53c:	e011      	b.n	800f562 <osSemaphoreAcquire+0xb6>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800f53e:	6839      	ldr	r1, [r7, #0]
 800f540:	69b8      	ldr	r0, [r7, #24]
 800f542:	f001 fbb3 	bl	8010cac <xQueueSemaphoreTake>
 800f546:	4603      	mov	r3, r0
 800f548:	2b01      	cmp	r3, #1
 800f54a:	d00b      	beq.n	800f564 <osSemaphoreAcquire+0xb8>
      if (timeout != 0U) {
 800f54c:	683b      	ldr	r3, [r7, #0]
 800f54e:	2b00      	cmp	r3, #0
 800f550:	d003      	beq.n	800f55a <osSemaphoreAcquire+0xae>
        stat = osErrorTimeout;
 800f552:	f06f 0301 	mvn.w	r3, #1
 800f556:	61fb      	str	r3, [r7, #28]
 800f558:	e004      	b.n	800f564 <osSemaphoreAcquire+0xb8>
      } else {
        stat = osErrorResource;
 800f55a:	f06f 0302 	mvn.w	r3, #2
 800f55e:	61fb      	str	r3, [r7, #28]
 800f560:	e000      	b.n	800f564 <osSemaphoreAcquire+0xb8>
    if (timeout != 0U) {
 800f562:	bf00      	nop
      }
    }
  }

  return (stat);
 800f564:	69fb      	ldr	r3, [r7, #28]
}
 800f566:	4618      	mov	r0, r3
 800f568:	3720      	adds	r7, #32
 800f56a:	46bd      	mov	sp, r7
 800f56c:	bd80      	pop	{r7, pc}
 800f56e:	bf00      	nop
 800f570:	2000144c 	.word	0x2000144c
 800f574:	e000ed04 	.word	0xe000ed04

0800f578 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 800f578:	b580      	push	{r7, lr}
 800f57a:	b088      	sub	sp, #32
 800f57c:	af00      	add	r7, sp, #0
 800f57e:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800f580:	687b      	ldr	r3, [r7, #4]
 800f582:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800f584:	2300      	movs	r3, #0
 800f586:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 800f588:	69bb      	ldr	r3, [r7, #24]
 800f58a:	2b00      	cmp	r3, #0
 800f58c:	d103      	bne.n	800f596 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 800f58e:	f06f 0303 	mvn.w	r3, #3
 800f592:	61fb      	str	r3, [r7, #28]
 800f594:	e03e      	b.n	800f614 <osSemaphoreRelease+0x9c>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f596:	f3ef 8305 	mrs	r3, IPSR
 800f59a:	617b      	str	r3, [r7, #20]
  return(result);
 800f59c:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 800f59e:	2b00      	cmp	r3, #0
 800f5a0:	d10f      	bne.n	800f5c2 <osSemaphoreRelease+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f5a2:	f3ef 8310 	mrs	r3, PRIMASK
 800f5a6:	613b      	str	r3, [r7, #16]
  return(result);
 800f5a8:	693b      	ldr	r3, [r7, #16]
 800f5aa:	2b00      	cmp	r3, #0
 800f5ac:	d105      	bne.n	800f5ba <osSemaphoreRelease+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800f5ae:	f3ef 8311 	mrs	r3, BASEPRI
 800f5b2:	60fb      	str	r3, [r7, #12]
  return(result);
 800f5b4:	68fb      	ldr	r3, [r7, #12]
 800f5b6:	2b00      	cmp	r3, #0
 800f5b8:	d01e      	beq.n	800f5f8 <osSemaphoreRelease+0x80>
 800f5ba:	4b19      	ldr	r3, [pc, #100]	; (800f620 <osSemaphoreRelease+0xa8>)
 800f5bc:	681b      	ldr	r3, [r3, #0]
 800f5be:	2b02      	cmp	r3, #2
 800f5c0:	d11a      	bne.n	800f5f8 <osSemaphoreRelease+0x80>
    yield = pdFALSE;
 800f5c2:	2300      	movs	r3, #0
 800f5c4:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800f5c6:	f107 0308 	add.w	r3, r7, #8
 800f5ca:	4619      	mov	r1, r3
 800f5cc:	69b8      	ldr	r0, [r7, #24]
 800f5ce:	f001 fa07 	bl	80109e0 <xQueueGiveFromISR>
 800f5d2:	4603      	mov	r3, r0
 800f5d4:	2b01      	cmp	r3, #1
 800f5d6:	d003      	beq.n	800f5e0 <osSemaphoreRelease+0x68>
      stat = osErrorResource;
 800f5d8:	f06f 0302 	mvn.w	r3, #2
 800f5dc:	61fb      	str	r3, [r7, #28]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800f5de:	e018      	b.n	800f612 <osSemaphoreRelease+0x9a>
    } else {
      portYIELD_FROM_ISR (yield);
 800f5e0:	68bb      	ldr	r3, [r7, #8]
 800f5e2:	2b00      	cmp	r3, #0
 800f5e4:	d015      	beq.n	800f612 <osSemaphoreRelease+0x9a>
 800f5e6:	4b0f      	ldr	r3, [pc, #60]	; (800f624 <osSemaphoreRelease+0xac>)
 800f5e8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f5ec:	601a      	str	r2, [r3, #0]
 800f5ee:	f3bf 8f4f 	dsb	sy
 800f5f2:	f3bf 8f6f 	isb	sy
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800f5f6:	e00c      	b.n	800f612 <osSemaphoreRelease+0x9a>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800f5f8:	2300      	movs	r3, #0
 800f5fa:	2200      	movs	r2, #0
 800f5fc:	2100      	movs	r1, #0
 800f5fe:	69b8      	ldr	r0, [r7, #24]
 800f600:	f001 f860 	bl	80106c4 <xQueueGenericSend>
 800f604:	4603      	mov	r3, r0
 800f606:	2b01      	cmp	r3, #1
 800f608:	d004      	beq.n	800f614 <osSemaphoreRelease+0x9c>
      stat = osErrorResource;
 800f60a:	f06f 0302 	mvn.w	r3, #2
 800f60e:	61fb      	str	r3, [r7, #28]
 800f610:	e000      	b.n	800f614 <osSemaphoreRelease+0x9c>
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800f612:	bf00      	nop
    }
  }

  return (stat);
 800f614:	69fb      	ldr	r3, [r7, #28]
}
 800f616:	4618      	mov	r0, r3
 800f618:	3720      	adds	r7, #32
 800f61a:	46bd      	mov	sp, r7
 800f61c:	bd80      	pop	{r7, pc}
 800f61e:	bf00      	nop
 800f620:	2000144c 	.word	0x2000144c
 800f624:	e000ed04 	.word	0xe000ed04

0800f628 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800f628:	b580      	push	{r7, lr}
 800f62a:	b08c      	sub	sp, #48	; 0x30
 800f62c:	af02      	add	r7, sp, #8
 800f62e:	60f8      	str	r0, [r7, #12]
 800f630:	60b9      	str	r1, [r7, #8]
 800f632:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800f634:	2300      	movs	r3, #0
 800f636:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f638:	f3ef 8305 	mrs	r3, IPSR
 800f63c:	61bb      	str	r3, [r7, #24]
  return(result);
 800f63e:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800f640:	2b00      	cmp	r3, #0
 800f642:	d170      	bne.n	800f726 <osMessageQueueNew+0xfe>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f644:	f3ef 8310 	mrs	r3, PRIMASK
 800f648:	617b      	str	r3, [r7, #20]
  return(result);
 800f64a:	697b      	ldr	r3, [r7, #20]
 800f64c:	2b00      	cmp	r3, #0
 800f64e:	d105      	bne.n	800f65c <osMessageQueueNew+0x34>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800f650:	f3ef 8311 	mrs	r3, BASEPRI
 800f654:	613b      	str	r3, [r7, #16]
  return(result);
 800f656:	693b      	ldr	r3, [r7, #16]
 800f658:	2b00      	cmp	r3, #0
 800f65a:	d003      	beq.n	800f664 <osMessageQueueNew+0x3c>
 800f65c:	4b34      	ldr	r3, [pc, #208]	; (800f730 <osMessageQueueNew+0x108>)
 800f65e:	681b      	ldr	r3, [r3, #0]
 800f660:	2b02      	cmp	r3, #2
 800f662:	d060      	beq.n	800f726 <osMessageQueueNew+0xfe>
 800f664:	68fb      	ldr	r3, [r7, #12]
 800f666:	2b00      	cmp	r3, #0
 800f668:	d05d      	beq.n	800f726 <osMessageQueueNew+0xfe>
 800f66a:	68bb      	ldr	r3, [r7, #8]
 800f66c:	2b00      	cmp	r3, #0
 800f66e:	d05a      	beq.n	800f726 <osMessageQueueNew+0xfe>
    mem = -1;
 800f670:	f04f 33ff 	mov.w	r3, #4294967295
 800f674:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800f676:	687b      	ldr	r3, [r7, #4]
 800f678:	2b00      	cmp	r3, #0
 800f67a:	d029      	beq.n	800f6d0 <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800f67c:	687b      	ldr	r3, [r7, #4]
 800f67e:	689b      	ldr	r3, [r3, #8]
 800f680:	2b00      	cmp	r3, #0
 800f682:	d012      	beq.n	800f6aa <osMessageQueueNew+0x82>
 800f684:	687b      	ldr	r3, [r7, #4]
 800f686:	68db      	ldr	r3, [r3, #12]
 800f688:	2b4f      	cmp	r3, #79	; 0x4f
 800f68a:	d90e      	bls.n	800f6aa <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800f68c:	687b      	ldr	r3, [r7, #4]
 800f68e:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800f690:	2b00      	cmp	r3, #0
 800f692:	d00a      	beq.n	800f6aa <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800f694:	687b      	ldr	r3, [r7, #4]
 800f696:	695a      	ldr	r2, [r3, #20]
 800f698:	68fb      	ldr	r3, [r7, #12]
 800f69a:	68b9      	ldr	r1, [r7, #8]
 800f69c:	fb01 f303 	mul.w	r3, r1, r3
 800f6a0:	429a      	cmp	r2, r3
 800f6a2:	d302      	bcc.n	800f6aa <osMessageQueueNew+0x82>
        mem = 1;
 800f6a4:	2301      	movs	r3, #1
 800f6a6:	623b      	str	r3, [r7, #32]
 800f6a8:	e014      	b.n	800f6d4 <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800f6aa:	687b      	ldr	r3, [r7, #4]
 800f6ac:	689b      	ldr	r3, [r3, #8]
 800f6ae:	2b00      	cmp	r3, #0
 800f6b0:	d110      	bne.n	800f6d4 <osMessageQueueNew+0xac>
 800f6b2:	687b      	ldr	r3, [r7, #4]
 800f6b4:	68db      	ldr	r3, [r3, #12]
 800f6b6:	2b00      	cmp	r3, #0
 800f6b8:	d10c      	bne.n	800f6d4 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800f6ba:	687b      	ldr	r3, [r7, #4]
 800f6bc:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800f6be:	2b00      	cmp	r3, #0
 800f6c0:	d108      	bne.n	800f6d4 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800f6c2:	687b      	ldr	r3, [r7, #4]
 800f6c4:	695b      	ldr	r3, [r3, #20]
 800f6c6:	2b00      	cmp	r3, #0
 800f6c8:	d104      	bne.n	800f6d4 <osMessageQueueNew+0xac>
          mem = 0;
 800f6ca:	2300      	movs	r3, #0
 800f6cc:	623b      	str	r3, [r7, #32]
 800f6ce:	e001      	b.n	800f6d4 <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 800f6d0:	2300      	movs	r3, #0
 800f6d2:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 800f6d4:	6a3b      	ldr	r3, [r7, #32]
 800f6d6:	2b01      	cmp	r3, #1
 800f6d8:	d10c      	bne.n	800f6f4 <osMessageQueueNew+0xcc>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800f6da:	687b      	ldr	r3, [r7, #4]
 800f6dc:	691a      	ldr	r2, [r3, #16]
 800f6de:	687b      	ldr	r3, [r7, #4]
 800f6e0:	6899      	ldr	r1, [r3, #8]
 800f6e2:	2300      	movs	r3, #0
 800f6e4:	9300      	str	r3, [sp, #0]
 800f6e6:	460b      	mov	r3, r1
 800f6e8:	68b9      	ldr	r1, [r7, #8]
 800f6ea:	68f8      	ldr	r0, [r7, #12]
 800f6ec:	f000 fdfa 	bl	80102e4 <xQueueGenericCreateStatic>
 800f6f0:	6278      	str	r0, [r7, #36]	; 0x24
 800f6f2:	e008      	b.n	800f706 <osMessageQueueNew+0xde>
    }
    else {
      if (mem == 0) {
 800f6f4:	6a3b      	ldr	r3, [r7, #32]
 800f6f6:	2b00      	cmp	r3, #0
 800f6f8:	d105      	bne.n	800f706 <osMessageQueueNew+0xde>
        hQueue = xQueueCreate (msg_count, msg_size);
 800f6fa:	2200      	movs	r2, #0
 800f6fc:	68b9      	ldr	r1, [r7, #8]
 800f6fe:	68f8      	ldr	r0, [r7, #12]
 800f700:	f000 fe63 	bl	80103ca <xQueueGenericCreate>
 800f704:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800f706:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f708:	2b00      	cmp	r3, #0
 800f70a:	d00c      	beq.n	800f726 <osMessageQueueNew+0xfe>
      if (attr != NULL) {
 800f70c:	687b      	ldr	r3, [r7, #4]
 800f70e:	2b00      	cmp	r3, #0
 800f710:	d003      	beq.n	800f71a <osMessageQueueNew+0xf2>
        name = attr->name;
 800f712:	687b      	ldr	r3, [r7, #4]
 800f714:	681b      	ldr	r3, [r3, #0]
 800f716:	61fb      	str	r3, [r7, #28]
 800f718:	e001      	b.n	800f71e <osMessageQueueNew+0xf6>
      } else {
        name = NULL;
 800f71a:	2300      	movs	r3, #0
 800f71c:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 800f71e:	69f9      	ldr	r1, [r7, #28]
 800f720:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f722:	f001 fd93 	bl	801124c <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800f726:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800f728:	4618      	mov	r0, r3
 800f72a:	3728      	adds	r7, #40	; 0x28
 800f72c:	46bd      	mov	sp, r7
 800f72e:	bd80      	pop	{r7, pc}
 800f730:	2000144c 	.word	0x2000144c

0800f734 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800f734:	b580      	push	{r7, lr}
 800f736:	b08a      	sub	sp, #40	; 0x28
 800f738:	af00      	add	r7, sp, #0
 800f73a:	60f8      	str	r0, [r7, #12]
 800f73c:	60b9      	str	r1, [r7, #8]
 800f73e:	603b      	str	r3, [r7, #0]
 800f740:	4613      	mov	r3, r2
 800f742:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800f744:	68fb      	ldr	r3, [r7, #12]
 800f746:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800f748:	2300      	movs	r3, #0
 800f74a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f74c:	f3ef 8305 	mrs	r3, IPSR
 800f750:	61fb      	str	r3, [r7, #28]
  return(result);
 800f752:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 800f754:	2b00      	cmp	r3, #0
 800f756:	d10f      	bne.n	800f778 <osMessageQueuePut+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f758:	f3ef 8310 	mrs	r3, PRIMASK
 800f75c:	61bb      	str	r3, [r7, #24]
  return(result);
 800f75e:	69bb      	ldr	r3, [r7, #24]
 800f760:	2b00      	cmp	r3, #0
 800f762:	d105      	bne.n	800f770 <osMessageQueuePut+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800f764:	f3ef 8311 	mrs	r3, BASEPRI
 800f768:	617b      	str	r3, [r7, #20]
  return(result);
 800f76a:	697b      	ldr	r3, [r7, #20]
 800f76c:	2b00      	cmp	r3, #0
 800f76e:	d02c      	beq.n	800f7ca <osMessageQueuePut+0x96>
 800f770:	4b28      	ldr	r3, [pc, #160]	; (800f814 <osMessageQueuePut+0xe0>)
 800f772:	681b      	ldr	r3, [r3, #0]
 800f774:	2b02      	cmp	r3, #2
 800f776:	d128      	bne.n	800f7ca <osMessageQueuePut+0x96>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800f778:	6a3b      	ldr	r3, [r7, #32]
 800f77a:	2b00      	cmp	r3, #0
 800f77c:	d005      	beq.n	800f78a <osMessageQueuePut+0x56>
 800f77e:	68bb      	ldr	r3, [r7, #8]
 800f780:	2b00      	cmp	r3, #0
 800f782:	d002      	beq.n	800f78a <osMessageQueuePut+0x56>
 800f784:	683b      	ldr	r3, [r7, #0]
 800f786:	2b00      	cmp	r3, #0
 800f788:	d003      	beq.n	800f792 <osMessageQueuePut+0x5e>
      stat = osErrorParameter;
 800f78a:	f06f 0303 	mvn.w	r3, #3
 800f78e:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800f790:	e039      	b.n	800f806 <osMessageQueuePut+0xd2>
    }
    else {
      yield = pdFALSE;
 800f792:	2300      	movs	r3, #0
 800f794:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800f796:	f107 0210 	add.w	r2, r7, #16
 800f79a:	2300      	movs	r3, #0
 800f79c:	68b9      	ldr	r1, [r7, #8]
 800f79e:	6a38      	ldr	r0, [r7, #32]
 800f7a0:	f001 f88a 	bl	80108b8 <xQueueGenericSendFromISR>
 800f7a4:	4603      	mov	r3, r0
 800f7a6:	2b01      	cmp	r3, #1
 800f7a8:	d003      	beq.n	800f7b2 <osMessageQueuePut+0x7e>
        stat = osErrorResource;
 800f7aa:	f06f 0302 	mvn.w	r3, #2
 800f7ae:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800f7b0:	e029      	b.n	800f806 <osMessageQueuePut+0xd2>
      } else {
        portYIELD_FROM_ISR (yield);
 800f7b2:	693b      	ldr	r3, [r7, #16]
 800f7b4:	2b00      	cmp	r3, #0
 800f7b6:	d026      	beq.n	800f806 <osMessageQueuePut+0xd2>
 800f7b8:	4b17      	ldr	r3, [pc, #92]	; (800f818 <osMessageQueuePut+0xe4>)
 800f7ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f7be:	601a      	str	r2, [r3, #0]
 800f7c0:	f3bf 8f4f 	dsb	sy
 800f7c4:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800f7c8:	e01d      	b.n	800f806 <osMessageQueuePut+0xd2>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800f7ca:	6a3b      	ldr	r3, [r7, #32]
 800f7cc:	2b00      	cmp	r3, #0
 800f7ce:	d002      	beq.n	800f7d6 <osMessageQueuePut+0xa2>
 800f7d0:	68bb      	ldr	r3, [r7, #8]
 800f7d2:	2b00      	cmp	r3, #0
 800f7d4:	d103      	bne.n	800f7de <osMessageQueuePut+0xaa>
      stat = osErrorParameter;
 800f7d6:	f06f 0303 	mvn.w	r3, #3
 800f7da:	627b      	str	r3, [r7, #36]	; 0x24
 800f7dc:	e014      	b.n	800f808 <osMessageQueuePut+0xd4>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800f7de:	2300      	movs	r3, #0
 800f7e0:	683a      	ldr	r2, [r7, #0]
 800f7e2:	68b9      	ldr	r1, [r7, #8]
 800f7e4:	6a38      	ldr	r0, [r7, #32]
 800f7e6:	f000 ff6d 	bl	80106c4 <xQueueGenericSend>
 800f7ea:	4603      	mov	r3, r0
 800f7ec:	2b01      	cmp	r3, #1
 800f7ee:	d00b      	beq.n	800f808 <osMessageQueuePut+0xd4>
        if (timeout != 0U) {
 800f7f0:	683b      	ldr	r3, [r7, #0]
 800f7f2:	2b00      	cmp	r3, #0
 800f7f4:	d003      	beq.n	800f7fe <osMessageQueuePut+0xca>
          stat = osErrorTimeout;
 800f7f6:	f06f 0301 	mvn.w	r3, #1
 800f7fa:	627b      	str	r3, [r7, #36]	; 0x24
 800f7fc:	e004      	b.n	800f808 <osMessageQueuePut+0xd4>
        } else {
          stat = osErrorResource;
 800f7fe:	f06f 0302 	mvn.w	r3, #2
 800f802:	627b      	str	r3, [r7, #36]	; 0x24
 800f804:	e000      	b.n	800f808 <osMessageQueuePut+0xd4>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800f806:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 800f808:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800f80a:	4618      	mov	r0, r3
 800f80c:	3728      	adds	r7, #40	; 0x28
 800f80e:	46bd      	mov	sp, r7
 800f810:	bd80      	pop	{r7, pc}
 800f812:	bf00      	nop
 800f814:	2000144c 	.word	0x2000144c
 800f818:	e000ed04 	.word	0xe000ed04

0800f81c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800f81c:	b480      	push	{r7}
 800f81e:	b085      	sub	sp, #20
 800f820:	af00      	add	r7, sp, #0
 800f822:	60f8      	str	r0, [r7, #12]
 800f824:	60b9      	str	r1, [r7, #8]
 800f826:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800f828:	68fb      	ldr	r3, [r7, #12]
 800f82a:	4a07      	ldr	r2, [pc, #28]	; (800f848 <vApplicationGetIdleTaskMemory+0x2c>)
 800f82c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800f82e:	68bb      	ldr	r3, [r7, #8]
 800f830:	4a06      	ldr	r2, [pc, #24]	; (800f84c <vApplicationGetIdleTaskMemory+0x30>)
 800f832:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800f834:	687b      	ldr	r3, [r7, #4]
 800f836:	2280      	movs	r2, #128	; 0x80
 800f838:	601a      	str	r2, [r3, #0]
}
 800f83a:	bf00      	nop
 800f83c:	3714      	adds	r7, #20
 800f83e:	46bd      	mov	sp, r7
 800f840:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f844:	4770      	bx	lr
 800f846:	bf00      	nop
 800f848:	20001450 	.word	0x20001450
 800f84c:	200014ac 	.word	0x200014ac

0800f850 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800f850:	b480      	push	{r7}
 800f852:	b085      	sub	sp, #20
 800f854:	af00      	add	r7, sp, #0
 800f856:	60f8      	str	r0, [r7, #12]
 800f858:	60b9      	str	r1, [r7, #8]
 800f85a:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800f85c:	68fb      	ldr	r3, [r7, #12]
 800f85e:	4a07      	ldr	r2, [pc, #28]	; (800f87c <vApplicationGetTimerTaskMemory+0x2c>)
 800f860:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800f862:	68bb      	ldr	r3, [r7, #8]
 800f864:	4a06      	ldr	r2, [pc, #24]	; (800f880 <vApplicationGetTimerTaskMemory+0x30>)
 800f866:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800f868:	687b      	ldr	r3, [r7, #4]
 800f86a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800f86e:	601a      	str	r2, [r3, #0]
}
 800f870:	bf00      	nop
 800f872:	3714      	adds	r7, #20
 800f874:	46bd      	mov	sp, r7
 800f876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f87a:	4770      	bx	lr
 800f87c:	200016ac 	.word	0x200016ac
 800f880:	20001708 	.word	0x20001708

0800f884 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800f884:	b480      	push	{r7}
 800f886:	b085      	sub	sp, #20
 800f888:	af00      	add	r7, sp, #0
 800f88a:	60f8      	str	r0, [r7, #12]
 800f88c:	60b9      	str	r1, [r7, #8]
 800f88e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800f890:	68fb      	ldr	r3, [r7, #12]
 800f892:	3b04      	subs	r3, #4
 800f894:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800f896:	68fb      	ldr	r3, [r7, #12]
 800f898:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800f89c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800f89e:	68fb      	ldr	r3, [r7, #12]
 800f8a0:	3b04      	subs	r3, #4
 800f8a2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800f8a4:	68bb      	ldr	r3, [r7, #8]
 800f8a6:	f023 0201 	bic.w	r2, r3, #1
 800f8aa:	68fb      	ldr	r3, [r7, #12]
 800f8ac:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800f8ae:	68fb      	ldr	r3, [r7, #12]
 800f8b0:	3b04      	subs	r3, #4
 800f8b2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800f8b4:	4a0c      	ldr	r2, [pc, #48]	; (800f8e8 <pxPortInitialiseStack+0x64>)
 800f8b6:	68fb      	ldr	r3, [r7, #12]
 800f8b8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800f8ba:	68fb      	ldr	r3, [r7, #12]
 800f8bc:	3b14      	subs	r3, #20
 800f8be:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800f8c0:	687a      	ldr	r2, [r7, #4]
 800f8c2:	68fb      	ldr	r3, [r7, #12]
 800f8c4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800f8c6:	68fb      	ldr	r3, [r7, #12]
 800f8c8:	3b04      	subs	r3, #4
 800f8ca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800f8cc:	68fb      	ldr	r3, [r7, #12]
 800f8ce:	f06f 0202 	mvn.w	r2, #2
 800f8d2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800f8d4:	68fb      	ldr	r3, [r7, #12]
 800f8d6:	3b20      	subs	r3, #32
 800f8d8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800f8da:	68fb      	ldr	r3, [r7, #12]
}
 800f8dc:	4618      	mov	r0, r3
 800f8de:	3714      	adds	r7, #20
 800f8e0:	46bd      	mov	sp, r7
 800f8e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8e6:	4770      	bx	lr
 800f8e8:	0800f8ed 	.word	0x0800f8ed

0800f8ec <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800f8ec:	b480      	push	{r7}
 800f8ee:	b085      	sub	sp, #20
 800f8f0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800f8f2:	2300      	movs	r3, #0
 800f8f4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800f8f6:	4b11      	ldr	r3, [pc, #68]	; (800f93c <prvTaskExitError+0x50>)
 800f8f8:	681b      	ldr	r3, [r3, #0]
 800f8fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f8fe:	d009      	beq.n	800f914 <prvTaskExitError+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800f900:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f904:	f383 8811 	msr	BASEPRI, r3
 800f908:	f3bf 8f6f 	isb	sy
 800f90c:	f3bf 8f4f 	dsb	sy
 800f910:	60fb      	str	r3, [r7, #12]
 800f912:	e7fe      	b.n	800f912 <prvTaskExitError+0x26>
 800f914:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f918:	f383 8811 	msr	BASEPRI, r3
 800f91c:	f3bf 8f6f 	isb	sy
 800f920:	f3bf 8f4f 	dsb	sy
 800f924:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800f926:	bf00      	nop
 800f928:	687b      	ldr	r3, [r7, #4]
 800f92a:	2b00      	cmp	r3, #0
 800f92c:	d0fc      	beq.n	800f928 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800f92e:	bf00      	nop
 800f930:	3714      	adds	r7, #20
 800f932:	46bd      	mov	sp, r7
 800f934:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f938:	4770      	bx	lr
 800f93a:	bf00      	nop
 800f93c:	20000020 	.word	0x20000020

0800f940 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800f940:	4b07      	ldr	r3, [pc, #28]	; (800f960 <pxCurrentTCBConst2>)
 800f942:	6819      	ldr	r1, [r3, #0]
 800f944:	6808      	ldr	r0, [r1, #0]
 800f946:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f94a:	f380 8809 	msr	PSP, r0
 800f94e:	f3bf 8f6f 	isb	sy
 800f952:	f04f 0000 	mov.w	r0, #0
 800f956:	f380 8811 	msr	BASEPRI, r0
 800f95a:	4770      	bx	lr
 800f95c:	f3af 8000 	nop.w

0800f960 <pxCurrentTCBConst2>:
 800f960:	20004a08 	.word	0x20004a08
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800f964:	bf00      	nop
 800f966:	bf00      	nop

0800f968 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800f968:	4808      	ldr	r0, [pc, #32]	; (800f98c <prvPortStartFirstTask+0x24>)
 800f96a:	6800      	ldr	r0, [r0, #0]
 800f96c:	6800      	ldr	r0, [r0, #0]
 800f96e:	f380 8808 	msr	MSP, r0
 800f972:	f04f 0000 	mov.w	r0, #0
 800f976:	f380 8814 	msr	CONTROL, r0
 800f97a:	b662      	cpsie	i
 800f97c:	b661      	cpsie	f
 800f97e:	f3bf 8f4f 	dsb	sy
 800f982:	f3bf 8f6f 	isb	sy
 800f986:	df00      	svc	0
 800f988:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800f98a:	bf00      	nop
 800f98c:	e000ed08 	.word	0xe000ed08

0800f990 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800f990:	b580      	push	{r7, lr}
 800f992:	b086      	sub	sp, #24
 800f994:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800f996:	4b44      	ldr	r3, [pc, #272]	; (800faa8 <xPortStartScheduler+0x118>)
 800f998:	681b      	ldr	r3, [r3, #0]
 800f99a:	4a44      	ldr	r2, [pc, #272]	; (800faac <xPortStartScheduler+0x11c>)
 800f99c:	4293      	cmp	r3, r2
 800f99e:	d109      	bne.n	800f9b4 <xPortStartScheduler+0x24>
 800f9a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f9a4:	f383 8811 	msr	BASEPRI, r3
 800f9a8:	f3bf 8f6f 	isb	sy
 800f9ac:	f3bf 8f4f 	dsb	sy
 800f9b0:	613b      	str	r3, [r7, #16]
 800f9b2:	e7fe      	b.n	800f9b2 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800f9b4:	4b3c      	ldr	r3, [pc, #240]	; (800faa8 <xPortStartScheduler+0x118>)
 800f9b6:	681b      	ldr	r3, [r3, #0]
 800f9b8:	4a3d      	ldr	r2, [pc, #244]	; (800fab0 <xPortStartScheduler+0x120>)
 800f9ba:	4293      	cmp	r3, r2
 800f9bc:	d109      	bne.n	800f9d2 <xPortStartScheduler+0x42>
 800f9be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f9c2:	f383 8811 	msr	BASEPRI, r3
 800f9c6:	f3bf 8f6f 	isb	sy
 800f9ca:	f3bf 8f4f 	dsb	sy
 800f9ce:	60fb      	str	r3, [r7, #12]
 800f9d0:	e7fe      	b.n	800f9d0 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800f9d2:	4b38      	ldr	r3, [pc, #224]	; (800fab4 <xPortStartScheduler+0x124>)
 800f9d4:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800f9d6:	697b      	ldr	r3, [r7, #20]
 800f9d8:	781b      	ldrb	r3, [r3, #0]
 800f9da:	b2db      	uxtb	r3, r3
 800f9dc:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800f9de:	697b      	ldr	r3, [r7, #20]
 800f9e0:	22ff      	movs	r2, #255	; 0xff
 800f9e2:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800f9e4:	697b      	ldr	r3, [r7, #20]
 800f9e6:	781b      	ldrb	r3, [r3, #0]
 800f9e8:	b2db      	uxtb	r3, r3
 800f9ea:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800f9ec:	78fb      	ldrb	r3, [r7, #3]
 800f9ee:	b2db      	uxtb	r3, r3
 800f9f0:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800f9f4:	b2da      	uxtb	r2, r3
 800f9f6:	4b30      	ldr	r3, [pc, #192]	; (800fab8 <xPortStartScheduler+0x128>)
 800f9f8:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800f9fa:	4b30      	ldr	r3, [pc, #192]	; (800fabc <xPortStartScheduler+0x12c>)
 800f9fc:	2207      	movs	r2, #7
 800f9fe:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800fa00:	e009      	b.n	800fa16 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 800fa02:	4b2e      	ldr	r3, [pc, #184]	; (800fabc <xPortStartScheduler+0x12c>)
 800fa04:	681b      	ldr	r3, [r3, #0]
 800fa06:	3b01      	subs	r3, #1
 800fa08:	4a2c      	ldr	r2, [pc, #176]	; (800fabc <xPortStartScheduler+0x12c>)
 800fa0a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800fa0c:	78fb      	ldrb	r3, [r7, #3]
 800fa0e:	b2db      	uxtb	r3, r3
 800fa10:	005b      	lsls	r3, r3, #1
 800fa12:	b2db      	uxtb	r3, r3
 800fa14:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800fa16:	78fb      	ldrb	r3, [r7, #3]
 800fa18:	b2db      	uxtb	r3, r3
 800fa1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800fa1e:	2b80      	cmp	r3, #128	; 0x80
 800fa20:	d0ef      	beq.n	800fa02 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800fa22:	4b26      	ldr	r3, [pc, #152]	; (800fabc <xPortStartScheduler+0x12c>)
 800fa24:	681b      	ldr	r3, [r3, #0]
 800fa26:	f1c3 0307 	rsb	r3, r3, #7
 800fa2a:	2b04      	cmp	r3, #4
 800fa2c:	d009      	beq.n	800fa42 <xPortStartScheduler+0xb2>
 800fa2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fa32:	f383 8811 	msr	BASEPRI, r3
 800fa36:	f3bf 8f6f 	isb	sy
 800fa3a:	f3bf 8f4f 	dsb	sy
 800fa3e:	60bb      	str	r3, [r7, #8]
 800fa40:	e7fe      	b.n	800fa40 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800fa42:	4b1e      	ldr	r3, [pc, #120]	; (800fabc <xPortStartScheduler+0x12c>)
 800fa44:	681b      	ldr	r3, [r3, #0]
 800fa46:	021b      	lsls	r3, r3, #8
 800fa48:	4a1c      	ldr	r2, [pc, #112]	; (800fabc <xPortStartScheduler+0x12c>)
 800fa4a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800fa4c:	4b1b      	ldr	r3, [pc, #108]	; (800fabc <xPortStartScheduler+0x12c>)
 800fa4e:	681b      	ldr	r3, [r3, #0]
 800fa50:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800fa54:	4a19      	ldr	r2, [pc, #100]	; (800fabc <xPortStartScheduler+0x12c>)
 800fa56:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800fa58:	687b      	ldr	r3, [r7, #4]
 800fa5a:	b2da      	uxtb	r2, r3
 800fa5c:	697b      	ldr	r3, [r7, #20]
 800fa5e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800fa60:	4b17      	ldr	r3, [pc, #92]	; (800fac0 <xPortStartScheduler+0x130>)
 800fa62:	681b      	ldr	r3, [r3, #0]
 800fa64:	4a16      	ldr	r2, [pc, #88]	; (800fac0 <xPortStartScheduler+0x130>)
 800fa66:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800fa6a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800fa6c:	4b14      	ldr	r3, [pc, #80]	; (800fac0 <xPortStartScheduler+0x130>)
 800fa6e:	681b      	ldr	r3, [r3, #0]
 800fa70:	4a13      	ldr	r2, [pc, #76]	; (800fac0 <xPortStartScheduler+0x130>)
 800fa72:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800fa76:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800fa78:	f000 f8d6 	bl	800fc28 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800fa7c:	4b11      	ldr	r3, [pc, #68]	; (800fac4 <xPortStartScheduler+0x134>)
 800fa7e:	2200      	movs	r2, #0
 800fa80:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800fa82:	f000 f8f5 	bl	800fc70 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800fa86:	4b10      	ldr	r3, [pc, #64]	; (800fac8 <xPortStartScheduler+0x138>)
 800fa88:	681b      	ldr	r3, [r3, #0]
 800fa8a:	4a0f      	ldr	r2, [pc, #60]	; (800fac8 <xPortStartScheduler+0x138>)
 800fa8c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800fa90:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800fa92:	f7ff ff69 	bl	800f968 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800fa96:	f002 f83f 	bl	8011b18 <vTaskSwitchContext>
	prvTaskExitError();
 800fa9a:	f7ff ff27 	bl	800f8ec <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800fa9e:	2300      	movs	r3, #0
}
 800faa0:	4618      	mov	r0, r3
 800faa2:	3718      	adds	r7, #24
 800faa4:	46bd      	mov	sp, r7
 800faa6:	bd80      	pop	{r7, pc}
 800faa8:	e000ed00 	.word	0xe000ed00
 800faac:	410fc271 	.word	0x410fc271
 800fab0:	410fc270 	.word	0x410fc270
 800fab4:	e000e400 	.word	0xe000e400
 800fab8:	20001b08 	.word	0x20001b08
 800fabc:	20001b0c 	.word	0x20001b0c
 800fac0:	e000ed20 	.word	0xe000ed20
 800fac4:	20000020 	.word	0x20000020
 800fac8:	e000ef34 	.word	0xe000ef34

0800facc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800facc:	b480      	push	{r7}
 800face:	b083      	sub	sp, #12
 800fad0:	af00      	add	r7, sp, #0
 800fad2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fad6:	f383 8811 	msr	BASEPRI, r3
 800fada:	f3bf 8f6f 	isb	sy
 800fade:	f3bf 8f4f 	dsb	sy
 800fae2:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800fae4:	4b0e      	ldr	r3, [pc, #56]	; (800fb20 <vPortEnterCritical+0x54>)
 800fae6:	681b      	ldr	r3, [r3, #0]
 800fae8:	3301      	adds	r3, #1
 800faea:	4a0d      	ldr	r2, [pc, #52]	; (800fb20 <vPortEnterCritical+0x54>)
 800faec:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800faee:	4b0c      	ldr	r3, [pc, #48]	; (800fb20 <vPortEnterCritical+0x54>)
 800faf0:	681b      	ldr	r3, [r3, #0]
 800faf2:	2b01      	cmp	r3, #1
 800faf4:	d10e      	bne.n	800fb14 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800faf6:	4b0b      	ldr	r3, [pc, #44]	; (800fb24 <vPortEnterCritical+0x58>)
 800faf8:	681b      	ldr	r3, [r3, #0]
 800fafa:	b2db      	uxtb	r3, r3
 800fafc:	2b00      	cmp	r3, #0
 800fafe:	d009      	beq.n	800fb14 <vPortEnterCritical+0x48>
 800fb00:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fb04:	f383 8811 	msr	BASEPRI, r3
 800fb08:	f3bf 8f6f 	isb	sy
 800fb0c:	f3bf 8f4f 	dsb	sy
 800fb10:	603b      	str	r3, [r7, #0]
 800fb12:	e7fe      	b.n	800fb12 <vPortEnterCritical+0x46>
	}
}
 800fb14:	bf00      	nop
 800fb16:	370c      	adds	r7, #12
 800fb18:	46bd      	mov	sp, r7
 800fb1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb1e:	4770      	bx	lr
 800fb20:	20000020 	.word	0x20000020
 800fb24:	e000ed04 	.word	0xe000ed04

0800fb28 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800fb28:	b480      	push	{r7}
 800fb2a:	b083      	sub	sp, #12
 800fb2c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800fb2e:	4b11      	ldr	r3, [pc, #68]	; (800fb74 <vPortExitCritical+0x4c>)
 800fb30:	681b      	ldr	r3, [r3, #0]
 800fb32:	2b00      	cmp	r3, #0
 800fb34:	d109      	bne.n	800fb4a <vPortExitCritical+0x22>
 800fb36:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fb3a:	f383 8811 	msr	BASEPRI, r3
 800fb3e:	f3bf 8f6f 	isb	sy
 800fb42:	f3bf 8f4f 	dsb	sy
 800fb46:	607b      	str	r3, [r7, #4]
 800fb48:	e7fe      	b.n	800fb48 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 800fb4a:	4b0a      	ldr	r3, [pc, #40]	; (800fb74 <vPortExitCritical+0x4c>)
 800fb4c:	681b      	ldr	r3, [r3, #0]
 800fb4e:	3b01      	subs	r3, #1
 800fb50:	4a08      	ldr	r2, [pc, #32]	; (800fb74 <vPortExitCritical+0x4c>)
 800fb52:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800fb54:	4b07      	ldr	r3, [pc, #28]	; (800fb74 <vPortExitCritical+0x4c>)
 800fb56:	681b      	ldr	r3, [r3, #0]
 800fb58:	2b00      	cmp	r3, #0
 800fb5a:	d104      	bne.n	800fb66 <vPortExitCritical+0x3e>
 800fb5c:	2300      	movs	r3, #0
 800fb5e:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800fb60:	683b      	ldr	r3, [r7, #0]
 800fb62:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 800fb66:	bf00      	nop
 800fb68:	370c      	adds	r7, #12
 800fb6a:	46bd      	mov	sp, r7
 800fb6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb70:	4770      	bx	lr
 800fb72:	bf00      	nop
 800fb74:	20000020 	.word	0x20000020
	...

0800fb80 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800fb80:	f3ef 8009 	mrs	r0, PSP
 800fb84:	f3bf 8f6f 	isb	sy
 800fb88:	4b15      	ldr	r3, [pc, #84]	; (800fbe0 <pxCurrentTCBConst>)
 800fb8a:	681a      	ldr	r2, [r3, #0]
 800fb8c:	f01e 0f10 	tst.w	lr, #16
 800fb90:	bf08      	it	eq
 800fb92:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800fb96:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fb9a:	6010      	str	r0, [r2, #0]
 800fb9c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800fba0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800fba4:	f380 8811 	msr	BASEPRI, r0
 800fba8:	f3bf 8f4f 	dsb	sy
 800fbac:	f3bf 8f6f 	isb	sy
 800fbb0:	f001 ffb2 	bl	8011b18 <vTaskSwitchContext>
 800fbb4:	f04f 0000 	mov.w	r0, #0
 800fbb8:	f380 8811 	msr	BASEPRI, r0
 800fbbc:	bc09      	pop	{r0, r3}
 800fbbe:	6819      	ldr	r1, [r3, #0]
 800fbc0:	6808      	ldr	r0, [r1, #0]
 800fbc2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fbc6:	f01e 0f10 	tst.w	lr, #16
 800fbca:	bf08      	it	eq
 800fbcc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800fbd0:	f380 8809 	msr	PSP, r0
 800fbd4:	f3bf 8f6f 	isb	sy
 800fbd8:	4770      	bx	lr
 800fbda:	bf00      	nop
 800fbdc:	f3af 8000 	nop.w

0800fbe0 <pxCurrentTCBConst>:
 800fbe0:	20004a08 	.word	0x20004a08
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800fbe4:	bf00      	nop
 800fbe6:	bf00      	nop

0800fbe8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800fbe8:	b580      	push	{r7, lr}
 800fbea:	b082      	sub	sp, #8
 800fbec:	af00      	add	r7, sp, #0
	__asm volatile
 800fbee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fbf2:	f383 8811 	msr	BASEPRI, r3
 800fbf6:	f3bf 8f6f 	isb	sy
 800fbfa:	f3bf 8f4f 	dsb	sy
 800fbfe:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800fc00:	f001 fed2 	bl	80119a8 <xTaskIncrementTick>
 800fc04:	4603      	mov	r3, r0
 800fc06:	2b00      	cmp	r3, #0
 800fc08:	d003      	beq.n	800fc12 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800fc0a:	4b06      	ldr	r3, [pc, #24]	; (800fc24 <SysTick_Handler+0x3c>)
 800fc0c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fc10:	601a      	str	r2, [r3, #0]
 800fc12:	2300      	movs	r3, #0
 800fc14:	603b      	str	r3, [r7, #0]
	__asm volatile
 800fc16:	683b      	ldr	r3, [r7, #0]
 800fc18:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800fc1c:	bf00      	nop
 800fc1e:	3708      	adds	r7, #8
 800fc20:	46bd      	mov	sp, r7
 800fc22:	bd80      	pop	{r7, pc}
 800fc24:	e000ed04 	.word	0xe000ed04

0800fc28 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800fc28:	b480      	push	{r7}
 800fc2a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800fc2c:	4b0b      	ldr	r3, [pc, #44]	; (800fc5c <vPortSetupTimerInterrupt+0x34>)
 800fc2e:	2200      	movs	r2, #0
 800fc30:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800fc32:	4b0b      	ldr	r3, [pc, #44]	; (800fc60 <vPortSetupTimerInterrupt+0x38>)
 800fc34:	2200      	movs	r2, #0
 800fc36:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800fc38:	4b0a      	ldr	r3, [pc, #40]	; (800fc64 <vPortSetupTimerInterrupt+0x3c>)
 800fc3a:	681b      	ldr	r3, [r3, #0]
 800fc3c:	4a0a      	ldr	r2, [pc, #40]	; (800fc68 <vPortSetupTimerInterrupt+0x40>)
 800fc3e:	fba2 2303 	umull	r2, r3, r2, r3
 800fc42:	099b      	lsrs	r3, r3, #6
 800fc44:	4a09      	ldr	r2, [pc, #36]	; (800fc6c <vPortSetupTimerInterrupt+0x44>)
 800fc46:	3b01      	subs	r3, #1
 800fc48:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800fc4a:	4b04      	ldr	r3, [pc, #16]	; (800fc5c <vPortSetupTimerInterrupt+0x34>)
 800fc4c:	2207      	movs	r2, #7
 800fc4e:	601a      	str	r2, [r3, #0]
}
 800fc50:	bf00      	nop
 800fc52:	46bd      	mov	sp, r7
 800fc54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc58:	4770      	bx	lr
 800fc5a:	bf00      	nop
 800fc5c:	e000e010 	.word	0xe000e010
 800fc60:	e000e018 	.word	0xe000e018
 800fc64:	20000014 	.word	0x20000014
 800fc68:	10624dd3 	.word	0x10624dd3
 800fc6c:	e000e014 	.word	0xe000e014

0800fc70 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800fc70:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800fc80 <vPortEnableVFP+0x10>
 800fc74:	6801      	ldr	r1, [r0, #0]
 800fc76:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800fc7a:	6001      	str	r1, [r0, #0]
 800fc7c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800fc7e:	bf00      	nop
 800fc80:	e000ed88 	.word	0xe000ed88

0800fc84 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800fc84:	b480      	push	{r7}
 800fc86:	b085      	sub	sp, #20
 800fc88:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800fc8a:	f3ef 8305 	mrs	r3, IPSR
 800fc8e:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800fc90:	68fb      	ldr	r3, [r7, #12]
 800fc92:	2b0f      	cmp	r3, #15
 800fc94:	d913      	bls.n	800fcbe <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800fc96:	4a16      	ldr	r2, [pc, #88]	; (800fcf0 <vPortValidateInterruptPriority+0x6c>)
 800fc98:	68fb      	ldr	r3, [r7, #12]
 800fc9a:	4413      	add	r3, r2
 800fc9c:	781b      	ldrb	r3, [r3, #0]
 800fc9e:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800fca0:	4b14      	ldr	r3, [pc, #80]	; (800fcf4 <vPortValidateInterruptPriority+0x70>)
 800fca2:	781b      	ldrb	r3, [r3, #0]
 800fca4:	7afa      	ldrb	r2, [r7, #11]
 800fca6:	429a      	cmp	r2, r3
 800fca8:	d209      	bcs.n	800fcbe <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 800fcaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fcae:	f383 8811 	msr	BASEPRI, r3
 800fcb2:	f3bf 8f6f 	isb	sy
 800fcb6:	f3bf 8f4f 	dsb	sy
 800fcba:	607b      	str	r3, [r7, #4]
 800fcbc:	e7fe      	b.n	800fcbc <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800fcbe:	4b0e      	ldr	r3, [pc, #56]	; (800fcf8 <vPortValidateInterruptPriority+0x74>)
 800fcc0:	681b      	ldr	r3, [r3, #0]
 800fcc2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800fcc6:	4b0d      	ldr	r3, [pc, #52]	; (800fcfc <vPortValidateInterruptPriority+0x78>)
 800fcc8:	681b      	ldr	r3, [r3, #0]
 800fcca:	429a      	cmp	r2, r3
 800fccc:	d909      	bls.n	800fce2 <vPortValidateInterruptPriority+0x5e>
 800fcce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fcd2:	f383 8811 	msr	BASEPRI, r3
 800fcd6:	f3bf 8f6f 	isb	sy
 800fcda:	f3bf 8f4f 	dsb	sy
 800fcde:	603b      	str	r3, [r7, #0]
 800fce0:	e7fe      	b.n	800fce0 <vPortValidateInterruptPriority+0x5c>
	}
 800fce2:	bf00      	nop
 800fce4:	3714      	adds	r7, #20
 800fce6:	46bd      	mov	sp, r7
 800fce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcec:	4770      	bx	lr
 800fcee:	bf00      	nop
 800fcf0:	e000e3f0 	.word	0xe000e3f0
 800fcf4:	20001b08 	.word	0x20001b08
 800fcf8:	e000ed0c 	.word	0xe000ed0c
 800fcfc:	20001b0c 	.word	0x20001b0c

0800fd00 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800fd00:	b580      	push	{r7, lr}
 800fd02:	b08a      	sub	sp, #40	; 0x28
 800fd04:	af00      	add	r7, sp, #0
 800fd06:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800fd08:	2300      	movs	r3, #0
 800fd0a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800fd0c:	f001 fd5a 	bl	80117c4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800fd10:	4b57      	ldr	r3, [pc, #348]	; (800fe70 <pvPortMalloc+0x170>)
 800fd12:	681b      	ldr	r3, [r3, #0]
 800fd14:	2b00      	cmp	r3, #0
 800fd16:	d101      	bne.n	800fd1c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800fd18:	f000 f90c 	bl	800ff34 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800fd1c:	4b55      	ldr	r3, [pc, #340]	; (800fe74 <pvPortMalloc+0x174>)
 800fd1e:	681a      	ldr	r2, [r3, #0]
 800fd20:	687b      	ldr	r3, [r7, #4]
 800fd22:	4013      	ands	r3, r2
 800fd24:	2b00      	cmp	r3, #0
 800fd26:	f040 808c 	bne.w	800fe42 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800fd2a:	687b      	ldr	r3, [r7, #4]
 800fd2c:	2b00      	cmp	r3, #0
 800fd2e:	d01c      	beq.n	800fd6a <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 800fd30:	2208      	movs	r2, #8
 800fd32:	687b      	ldr	r3, [r7, #4]
 800fd34:	4413      	add	r3, r2
 800fd36:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800fd38:	687b      	ldr	r3, [r7, #4]
 800fd3a:	f003 0307 	and.w	r3, r3, #7
 800fd3e:	2b00      	cmp	r3, #0
 800fd40:	d013      	beq.n	800fd6a <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800fd42:	687b      	ldr	r3, [r7, #4]
 800fd44:	f023 0307 	bic.w	r3, r3, #7
 800fd48:	3308      	adds	r3, #8
 800fd4a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800fd4c:	687b      	ldr	r3, [r7, #4]
 800fd4e:	f003 0307 	and.w	r3, r3, #7
 800fd52:	2b00      	cmp	r3, #0
 800fd54:	d009      	beq.n	800fd6a <pvPortMalloc+0x6a>
 800fd56:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fd5a:	f383 8811 	msr	BASEPRI, r3
 800fd5e:	f3bf 8f6f 	isb	sy
 800fd62:	f3bf 8f4f 	dsb	sy
 800fd66:	617b      	str	r3, [r7, #20]
 800fd68:	e7fe      	b.n	800fd68 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800fd6a:	687b      	ldr	r3, [r7, #4]
 800fd6c:	2b00      	cmp	r3, #0
 800fd6e:	d068      	beq.n	800fe42 <pvPortMalloc+0x142>
 800fd70:	4b41      	ldr	r3, [pc, #260]	; (800fe78 <pvPortMalloc+0x178>)
 800fd72:	681b      	ldr	r3, [r3, #0]
 800fd74:	687a      	ldr	r2, [r7, #4]
 800fd76:	429a      	cmp	r2, r3
 800fd78:	d863      	bhi.n	800fe42 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800fd7a:	4b40      	ldr	r3, [pc, #256]	; (800fe7c <pvPortMalloc+0x17c>)
 800fd7c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800fd7e:	4b3f      	ldr	r3, [pc, #252]	; (800fe7c <pvPortMalloc+0x17c>)
 800fd80:	681b      	ldr	r3, [r3, #0]
 800fd82:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800fd84:	e004      	b.n	800fd90 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 800fd86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fd88:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800fd8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fd8c:	681b      	ldr	r3, [r3, #0]
 800fd8e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800fd90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fd92:	685b      	ldr	r3, [r3, #4]
 800fd94:	687a      	ldr	r2, [r7, #4]
 800fd96:	429a      	cmp	r2, r3
 800fd98:	d903      	bls.n	800fda2 <pvPortMalloc+0xa2>
 800fd9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fd9c:	681b      	ldr	r3, [r3, #0]
 800fd9e:	2b00      	cmp	r3, #0
 800fda0:	d1f1      	bne.n	800fd86 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800fda2:	4b33      	ldr	r3, [pc, #204]	; (800fe70 <pvPortMalloc+0x170>)
 800fda4:	681b      	ldr	r3, [r3, #0]
 800fda6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fda8:	429a      	cmp	r2, r3
 800fdaa:	d04a      	beq.n	800fe42 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800fdac:	6a3b      	ldr	r3, [r7, #32]
 800fdae:	681b      	ldr	r3, [r3, #0]
 800fdb0:	2208      	movs	r2, #8
 800fdb2:	4413      	add	r3, r2
 800fdb4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800fdb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fdb8:	681a      	ldr	r2, [r3, #0]
 800fdba:	6a3b      	ldr	r3, [r7, #32]
 800fdbc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800fdbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fdc0:	685a      	ldr	r2, [r3, #4]
 800fdc2:	687b      	ldr	r3, [r7, #4]
 800fdc4:	1ad2      	subs	r2, r2, r3
 800fdc6:	2308      	movs	r3, #8
 800fdc8:	005b      	lsls	r3, r3, #1
 800fdca:	429a      	cmp	r2, r3
 800fdcc:	d91e      	bls.n	800fe0c <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800fdce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fdd0:	687b      	ldr	r3, [r7, #4]
 800fdd2:	4413      	add	r3, r2
 800fdd4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800fdd6:	69bb      	ldr	r3, [r7, #24]
 800fdd8:	f003 0307 	and.w	r3, r3, #7
 800fddc:	2b00      	cmp	r3, #0
 800fdde:	d009      	beq.n	800fdf4 <pvPortMalloc+0xf4>
 800fde0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fde4:	f383 8811 	msr	BASEPRI, r3
 800fde8:	f3bf 8f6f 	isb	sy
 800fdec:	f3bf 8f4f 	dsb	sy
 800fdf0:	613b      	str	r3, [r7, #16]
 800fdf2:	e7fe      	b.n	800fdf2 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800fdf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fdf6:	685a      	ldr	r2, [r3, #4]
 800fdf8:	687b      	ldr	r3, [r7, #4]
 800fdfa:	1ad2      	subs	r2, r2, r3
 800fdfc:	69bb      	ldr	r3, [r7, #24]
 800fdfe:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800fe00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fe02:	687a      	ldr	r2, [r7, #4]
 800fe04:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800fe06:	69b8      	ldr	r0, [r7, #24]
 800fe08:	f000 f8f6 	bl	800fff8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800fe0c:	4b1a      	ldr	r3, [pc, #104]	; (800fe78 <pvPortMalloc+0x178>)
 800fe0e:	681a      	ldr	r2, [r3, #0]
 800fe10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fe12:	685b      	ldr	r3, [r3, #4]
 800fe14:	1ad3      	subs	r3, r2, r3
 800fe16:	4a18      	ldr	r2, [pc, #96]	; (800fe78 <pvPortMalloc+0x178>)
 800fe18:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800fe1a:	4b17      	ldr	r3, [pc, #92]	; (800fe78 <pvPortMalloc+0x178>)
 800fe1c:	681a      	ldr	r2, [r3, #0]
 800fe1e:	4b18      	ldr	r3, [pc, #96]	; (800fe80 <pvPortMalloc+0x180>)
 800fe20:	681b      	ldr	r3, [r3, #0]
 800fe22:	429a      	cmp	r2, r3
 800fe24:	d203      	bcs.n	800fe2e <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800fe26:	4b14      	ldr	r3, [pc, #80]	; (800fe78 <pvPortMalloc+0x178>)
 800fe28:	681b      	ldr	r3, [r3, #0]
 800fe2a:	4a15      	ldr	r2, [pc, #84]	; (800fe80 <pvPortMalloc+0x180>)
 800fe2c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800fe2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fe30:	685a      	ldr	r2, [r3, #4]
 800fe32:	4b10      	ldr	r3, [pc, #64]	; (800fe74 <pvPortMalloc+0x174>)
 800fe34:	681b      	ldr	r3, [r3, #0]
 800fe36:	431a      	orrs	r2, r3
 800fe38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fe3a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800fe3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fe3e:	2200      	movs	r2, #0
 800fe40:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800fe42:	f001 fd05 	bl	8011850 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800fe46:	69fb      	ldr	r3, [r7, #28]
 800fe48:	f003 0307 	and.w	r3, r3, #7
 800fe4c:	2b00      	cmp	r3, #0
 800fe4e:	d009      	beq.n	800fe64 <pvPortMalloc+0x164>
 800fe50:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fe54:	f383 8811 	msr	BASEPRI, r3
 800fe58:	f3bf 8f6f 	isb	sy
 800fe5c:	f3bf 8f4f 	dsb	sy
 800fe60:	60fb      	str	r3, [r7, #12]
 800fe62:	e7fe      	b.n	800fe62 <pvPortMalloc+0x162>
	return pvReturn;
 800fe64:	69fb      	ldr	r3, [r7, #28]
}
 800fe66:	4618      	mov	r0, r3
 800fe68:	3728      	adds	r7, #40	; 0x28
 800fe6a:	46bd      	mov	sp, r7
 800fe6c:	bd80      	pop	{r7, pc}
 800fe6e:	bf00      	nop
 800fe70:	200049f8 	.word	0x200049f8
 800fe74:	20004a04 	.word	0x20004a04
 800fe78:	200049fc 	.word	0x200049fc
 800fe7c:	200049f0 	.word	0x200049f0
 800fe80:	20004a00 	.word	0x20004a00

0800fe84 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800fe84:	b580      	push	{r7, lr}
 800fe86:	b086      	sub	sp, #24
 800fe88:	af00      	add	r7, sp, #0
 800fe8a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800fe8c:	687b      	ldr	r3, [r7, #4]
 800fe8e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800fe90:	687b      	ldr	r3, [r7, #4]
 800fe92:	2b00      	cmp	r3, #0
 800fe94:	d046      	beq.n	800ff24 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800fe96:	2308      	movs	r3, #8
 800fe98:	425b      	negs	r3, r3
 800fe9a:	697a      	ldr	r2, [r7, #20]
 800fe9c:	4413      	add	r3, r2
 800fe9e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800fea0:	697b      	ldr	r3, [r7, #20]
 800fea2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800fea4:	693b      	ldr	r3, [r7, #16]
 800fea6:	685a      	ldr	r2, [r3, #4]
 800fea8:	4b20      	ldr	r3, [pc, #128]	; (800ff2c <vPortFree+0xa8>)
 800feaa:	681b      	ldr	r3, [r3, #0]
 800feac:	4013      	ands	r3, r2
 800feae:	2b00      	cmp	r3, #0
 800feb0:	d109      	bne.n	800fec6 <vPortFree+0x42>
 800feb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800feb6:	f383 8811 	msr	BASEPRI, r3
 800feba:	f3bf 8f6f 	isb	sy
 800febe:	f3bf 8f4f 	dsb	sy
 800fec2:	60fb      	str	r3, [r7, #12]
 800fec4:	e7fe      	b.n	800fec4 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800fec6:	693b      	ldr	r3, [r7, #16]
 800fec8:	681b      	ldr	r3, [r3, #0]
 800feca:	2b00      	cmp	r3, #0
 800fecc:	d009      	beq.n	800fee2 <vPortFree+0x5e>
 800fece:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fed2:	f383 8811 	msr	BASEPRI, r3
 800fed6:	f3bf 8f6f 	isb	sy
 800feda:	f3bf 8f4f 	dsb	sy
 800fede:	60bb      	str	r3, [r7, #8]
 800fee0:	e7fe      	b.n	800fee0 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800fee2:	693b      	ldr	r3, [r7, #16]
 800fee4:	685a      	ldr	r2, [r3, #4]
 800fee6:	4b11      	ldr	r3, [pc, #68]	; (800ff2c <vPortFree+0xa8>)
 800fee8:	681b      	ldr	r3, [r3, #0]
 800feea:	4013      	ands	r3, r2
 800feec:	2b00      	cmp	r3, #0
 800feee:	d019      	beq.n	800ff24 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800fef0:	693b      	ldr	r3, [r7, #16]
 800fef2:	681b      	ldr	r3, [r3, #0]
 800fef4:	2b00      	cmp	r3, #0
 800fef6:	d115      	bne.n	800ff24 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800fef8:	693b      	ldr	r3, [r7, #16]
 800fefa:	685a      	ldr	r2, [r3, #4]
 800fefc:	4b0b      	ldr	r3, [pc, #44]	; (800ff2c <vPortFree+0xa8>)
 800fefe:	681b      	ldr	r3, [r3, #0]
 800ff00:	43db      	mvns	r3, r3
 800ff02:	401a      	ands	r2, r3
 800ff04:	693b      	ldr	r3, [r7, #16]
 800ff06:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800ff08:	f001 fc5c 	bl	80117c4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800ff0c:	693b      	ldr	r3, [r7, #16]
 800ff0e:	685a      	ldr	r2, [r3, #4]
 800ff10:	4b07      	ldr	r3, [pc, #28]	; (800ff30 <vPortFree+0xac>)
 800ff12:	681b      	ldr	r3, [r3, #0]
 800ff14:	4413      	add	r3, r2
 800ff16:	4a06      	ldr	r2, [pc, #24]	; (800ff30 <vPortFree+0xac>)
 800ff18:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800ff1a:	6938      	ldr	r0, [r7, #16]
 800ff1c:	f000 f86c 	bl	800fff8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800ff20:	f001 fc96 	bl	8011850 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800ff24:	bf00      	nop
 800ff26:	3718      	adds	r7, #24
 800ff28:	46bd      	mov	sp, r7
 800ff2a:	bd80      	pop	{r7, pc}
 800ff2c:	20004a04 	.word	0x20004a04
 800ff30:	200049fc 	.word	0x200049fc

0800ff34 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800ff34:	b480      	push	{r7}
 800ff36:	b085      	sub	sp, #20
 800ff38:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800ff3a:	f642 63e0 	movw	r3, #12000	; 0x2ee0
 800ff3e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800ff40:	4b27      	ldr	r3, [pc, #156]	; (800ffe0 <prvHeapInit+0xac>)
 800ff42:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800ff44:	68fb      	ldr	r3, [r7, #12]
 800ff46:	f003 0307 	and.w	r3, r3, #7
 800ff4a:	2b00      	cmp	r3, #0
 800ff4c:	d00c      	beq.n	800ff68 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800ff4e:	68fb      	ldr	r3, [r7, #12]
 800ff50:	3307      	adds	r3, #7
 800ff52:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ff54:	68fb      	ldr	r3, [r7, #12]
 800ff56:	f023 0307 	bic.w	r3, r3, #7
 800ff5a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800ff5c:	68ba      	ldr	r2, [r7, #8]
 800ff5e:	68fb      	ldr	r3, [r7, #12]
 800ff60:	1ad3      	subs	r3, r2, r3
 800ff62:	4a1f      	ldr	r2, [pc, #124]	; (800ffe0 <prvHeapInit+0xac>)
 800ff64:	4413      	add	r3, r2
 800ff66:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800ff68:	68fb      	ldr	r3, [r7, #12]
 800ff6a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800ff6c:	4a1d      	ldr	r2, [pc, #116]	; (800ffe4 <prvHeapInit+0xb0>)
 800ff6e:	687b      	ldr	r3, [r7, #4]
 800ff70:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800ff72:	4b1c      	ldr	r3, [pc, #112]	; (800ffe4 <prvHeapInit+0xb0>)
 800ff74:	2200      	movs	r2, #0
 800ff76:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800ff78:	687b      	ldr	r3, [r7, #4]
 800ff7a:	68ba      	ldr	r2, [r7, #8]
 800ff7c:	4413      	add	r3, r2
 800ff7e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800ff80:	2208      	movs	r2, #8
 800ff82:	68fb      	ldr	r3, [r7, #12]
 800ff84:	1a9b      	subs	r3, r3, r2
 800ff86:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ff88:	68fb      	ldr	r3, [r7, #12]
 800ff8a:	f023 0307 	bic.w	r3, r3, #7
 800ff8e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800ff90:	68fb      	ldr	r3, [r7, #12]
 800ff92:	4a15      	ldr	r2, [pc, #84]	; (800ffe8 <prvHeapInit+0xb4>)
 800ff94:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800ff96:	4b14      	ldr	r3, [pc, #80]	; (800ffe8 <prvHeapInit+0xb4>)
 800ff98:	681b      	ldr	r3, [r3, #0]
 800ff9a:	2200      	movs	r2, #0
 800ff9c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800ff9e:	4b12      	ldr	r3, [pc, #72]	; (800ffe8 <prvHeapInit+0xb4>)
 800ffa0:	681b      	ldr	r3, [r3, #0]
 800ffa2:	2200      	movs	r2, #0
 800ffa4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800ffa6:	687b      	ldr	r3, [r7, #4]
 800ffa8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800ffaa:	683b      	ldr	r3, [r7, #0]
 800ffac:	68fa      	ldr	r2, [r7, #12]
 800ffae:	1ad2      	subs	r2, r2, r3
 800ffb0:	683b      	ldr	r3, [r7, #0]
 800ffb2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800ffb4:	4b0c      	ldr	r3, [pc, #48]	; (800ffe8 <prvHeapInit+0xb4>)
 800ffb6:	681a      	ldr	r2, [r3, #0]
 800ffb8:	683b      	ldr	r3, [r7, #0]
 800ffba:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ffbc:	683b      	ldr	r3, [r7, #0]
 800ffbe:	685b      	ldr	r3, [r3, #4]
 800ffc0:	4a0a      	ldr	r2, [pc, #40]	; (800ffec <prvHeapInit+0xb8>)
 800ffc2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ffc4:	683b      	ldr	r3, [r7, #0]
 800ffc6:	685b      	ldr	r3, [r3, #4]
 800ffc8:	4a09      	ldr	r2, [pc, #36]	; (800fff0 <prvHeapInit+0xbc>)
 800ffca:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800ffcc:	4b09      	ldr	r3, [pc, #36]	; (800fff4 <prvHeapInit+0xc0>)
 800ffce:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800ffd2:	601a      	str	r2, [r3, #0]
}
 800ffd4:	bf00      	nop
 800ffd6:	3714      	adds	r7, #20
 800ffd8:	46bd      	mov	sp, r7
 800ffda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffde:	4770      	bx	lr
 800ffe0:	20001b10 	.word	0x20001b10
 800ffe4:	200049f0 	.word	0x200049f0
 800ffe8:	200049f8 	.word	0x200049f8
 800ffec:	20004a00 	.word	0x20004a00
 800fff0:	200049fc 	.word	0x200049fc
 800fff4:	20004a04 	.word	0x20004a04

0800fff8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800fff8:	b480      	push	{r7}
 800fffa:	b085      	sub	sp, #20
 800fffc:	af00      	add	r7, sp, #0
 800fffe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8010000:	4b28      	ldr	r3, [pc, #160]	; (80100a4 <prvInsertBlockIntoFreeList+0xac>)
 8010002:	60fb      	str	r3, [r7, #12]
 8010004:	e002      	b.n	801000c <prvInsertBlockIntoFreeList+0x14>
 8010006:	68fb      	ldr	r3, [r7, #12]
 8010008:	681b      	ldr	r3, [r3, #0]
 801000a:	60fb      	str	r3, [r7, #12]
 801000c:	68fb      	ldr	r3, [r7, #12]
 801000e:	681b      	ldr	r3, [r3, #0]
 8010010:	687a      	ldr	r2, [r7, #4]
 8010012:	429a      	cmp	r2, r3
 8010014:	d8f7      	bhi.n	8010006 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8010016:	68fb      	ldr	r3, [r7, #12]
 8010018:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 801001a:	68fb      	ldr	r3, [r7, #12]
 801001c:	685b      	ldr	r3, [r3, #4]
 801001e:	68ba      	ldr	r2, [r7, #8]
 8010020:	4413      	add	r3, r2
 8010022:	687a      	ldr	r2, [r7, #4]
 8010024:	429a      	cmp	r2, r3
 8010026:	d108      	bne.n	801003a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8010028:	68fb      	ldr	r3, [r7, #12]
 801002a:	685a      	ldr	r2, [r3, #4]
 801002c:	687b      	ldr	r3, [r7, #4]
 801002e:	685b      	ldr	r3, [r3, #4]
 8010030:	441a      	add	r2, r3
 8010032:	68fb      	ldr	r3, [r7, #12]
 8010034:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8010036:	68fb      	ldr	r3, [r7, #12]
 8010038:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 801003a:	687b      	ldr	r3, [r7, #4]
 801003c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 801003e:	687b      	ldr	r3, [r7, #4]
 8010040:	685b      	ldr	r3, [r3, #4]
 8010042:	68ba      	ldr	r2, [r7, #8]
 8010044:	441a      	add	r2, r3
 8010046:	68fb      	ldr	r3, [r7, #12]
 8010048:	681b      	ldr	r3, [r3, #0]
 801004a:	429a      	cmp	r2, r3
 801004c:	d118      	bne.n	8010080 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 801004e:	68fb      	ldr	r3, [r7, #12]
 8010050:	681a      	ldr	r2, [r3, #0]
 8010052:	4b15      	ldr	r3, [pc, #84]	; (80100a8 <prvInsertBlockIntoFreeList+0xb0>)
 8010054:	681b      	ldr	r3, [r3, #0]
 8010056:	429a      	cmp	r2, r3
 8010058:	d00d      	beq.n	8010076 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 801005a:	687b      	ldr	r3, [r7, #4]
 801005c:	685a      	ldr	r2, [r3, #4]
 801005e:	68fb      	ldr	r3, [r7, #12]
 8010060:	681b      	ldr	r3, [r3, #0]
 8010062:	685b      	ldr	r3, [r3, #4]
 8010064:	441a      	add	r2, r3
 8010066:	687b      	ldr	r3, [r7, #4]
 8010068:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 801006a:	68fb      	ldr	r3, [r7, #12]
 801006c:	681b      	ldr	r3, [r3, #0]
 801006e:	681a      	ldr	r2, [r3, #0]
 8010070:	687b      	ldr	r3, [r7, #4]
 8010072:	601a      	str	r2, [r3, #0]
 8010074:	e008      	b.n	8010088 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8010076:	4b0c      	ldr	r3, [pc, #48]	; (80100a8 <prvInsertBlockIntoFreeList+0xb0>)
 8010078:	681a      	ldr	r2, [r3, #0]
 801007a:	687b      	ldr	r3, [r7, #4]
 801007c:	601a      	str	r2, [r3, #0]
 801007e:	e003      	b.n	8010088 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8010080:	68fb      	ldr	r3, [r7, #12]
 8010082:	681a      	ldr	r2, [r3, #0]
 8010084:	687b      	ldr	r3, [r7, #4]
 8010086:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8010088:	68fa      	ldr	r2, [r7, #12]
 801008a:	687b      	ldr	r3, [r7, #4]
 801008c:	429a      	cmp	r2, r3
 801008e:	d002      	beq.n	8010096 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8010090:	68fb      	ldr	r3, [r7, #12]
 8010092:	687a      	ldr	r2, [r7, #4]
 8010094:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8010096:	bf00      	nop
 8010098:	3714      	adds	r7, #20
 801009a:	46bd      	mov	sp, r7
 801009c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100a0:	4770      	bx	lr
 80100a2:	bf00      	nop
 80100a4:	200049f0 	.word	0x200049f0
 80100a8:	200049f8 	.word	0x200049f8

080100ac <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80100ac:	b480      	push	{r7}
 80100ae:	b083      	sub	sp, #12
 80100b0:	af00      	add	r7, sp, #0
 80100b2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80100b4:	687b      	ldr	r3, [r7, #4]
 80100b6:	f103 0208 	add.w	r2, r3, #8
 80100ba:	687b      	ldr	r3, [r7, #4]
 80100bc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80100be:	687b      	ldr	r3, [r7, #4]
 80100c0:	f04f 32ff 	mov.w	r2, #4294967295
 80100c4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80100c6:	687b      	ldr	r3, [r7, #4]
 80100c8:	f103 0208 	add.w	r2, r3, #8
 80100cc:	687b      	ldr	r3, [r7, #4]
 80100ce:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80100d0:	687b      	ldr	r3, [r7, #4]
 80100d2:	f103 0208 	add.w	r2, r3, #8
 80100d6:	687b      	ldr	r3, [r7, #4]
 80100d8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80100da:	687b      	ldr	r3, [r7, #4]
 80100dc:	2200      	movs	r2, #0
 80100de:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80100e0:	bf00      	nop
 80100e2:	370c      	adds	r7, #12
 80100e4:	46bd      	mov	sp, r7
 80100e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100ea:	4770      	bx	lr

080100ec <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80100ec:	b480      	push	{r7}
 80100ee:	b083      	sub	sp, #12
 80100f0:	af00      	add	r7, sp, #0
 80100f2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80100f4:	687b      	ldr	r3, [r7, #4]
 80100f6:	2200      	movs	r2, #0
 80100f8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80100fa:	bf00      	nop
 80100fc:	370c      	adds	r7, #12
 80100fe:	46bd      	mov	sp, r7
 8010100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010104:	4770      	bx	lr

08010106 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8010106:	b480      	push	{r7}
 8010108:	b085      	sub	sp, #20
 801010a:	af00      	add	r7, sp, #0
 801010c:	6078      	str	r0, [r7, #4]
 801010e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8010110:	687b      	ldr	r3, [r7, #4]
 8010112:	685b      	ldr	r3, [r3, #4]
 8010114:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8010116:	683b      	ldr	r3, [r7, #0]
 8010118:	68fa      	ldr	r2, [r7, #12]
 801011a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 801011c:	68fb      	ldr	r3, [r7, #12]
 801011e:	689a      	ldr	r2, [r3, #8]
 8010120:	683b      	ldr	r3, [r7, #0]
 8010122:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8010124:	68fb      	ldr	r3, [r7, #12]
 8010126:	689b      	ldr	r3, [r3, #8]
 8010128:	683a      	ldr	r2, [r7, #0]
 801012a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 801012c:	68fb      	ldr	r3, [r7, #12]
 801012e:	683a      	ldr	r2, [r7, #0]
 8010130:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8010132:	683b      	ldr	r3, [r7, #0]
 8010134:	687a      	ldr	r2, [r7, #4]
 8010136:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8010138:	687b      	ldr	r3, [r7, #4]
 801013a:	681b      	ldr	r3, [r3, #0]
 801013c:	1c5a      	adds	r2, r3, #1
 801013e:	687b      	ldr	r3, [r7, #4]
 8010140:	601a      	str	r2, [r3, #0]
}
 8010142:	bf00      	nop
 8010144:	3714      	adds	r7, #20
 8010146:	46bd      	mov	sp, r7
 8010148:	f85d 7b04 	ldr.w	r7, [sp], #4
 801014c:	4770      	bx	lr

0801014e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 801014e:	b480      	push	{r7}
 8010150:	b085      	sub	sp, #20
 8010152:	af00      	add	r7, sp, #0
 8010154:	6078      	str	r0, [r7, #4]
 8010156:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8010158:	683b      	ldr	r3, [r7, #0]
 801015a:	681b      	ldr	r3, [r3, #0]
 801015c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 801015e:	68bb      	ldr	r3, [r7, #8]
 8010160:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010164:	d103      	bne.n	801016e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8010166:	687b      	ldr	r3, [r7, #4]
 8010168:	691b      	ldr	r3, [r3, #16]
 801016a:	60fb      	str	r3, [r7, #12]
 801016c:	e00c      	b.n	8010188 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 801016e:	687b      	ldr	r3, [r7, #4]
 8010170:	3308      	adds	r3, #8
 8010172:	60fb      	str	r3, [r7, #12]
 8010174:	e002      	b.n	801017c <vListInsert+0x2e>
 8010176:	68fb      	ldr	r3, [r7, #12]
 8010178:	685b      	ldr	r3, [r3, #4]
 801017a:	60fb      	str	r3, [r7, #12]
 801017c:	68fb      	ldr	r3, [r7, #12]
 801017e:	685b      	ldr	r3, [r3, #4]
 8010180:	681b      	ldr	r3, [r3, #0]
 8010182:	68ba      	ldr	r2, [r7, #8]
 8010184:	429a      	cmp	r2, r3
 8010186:	d2f6      	bcs.n	8010176 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8010188:	68fb      	ldr	r3, [r7, #12]
 801018a:	685a      	ldr	r2, [r3, #4]
 801018c:	683b      	ldr	r3, [r7, #0]
 801018e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8010190:	683b      	ldr	r3, [r7, #0]
 8010192:	685b      	ldr	r3, [r3, #4]
 8010194:	683a      	ldr	r2, [r7, #0]
 8010196:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8010198:	683b      	ldr	r3, [r7, #0]
 801019a:	68fa      	ldr	r2, [r7, #12]
 801019c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 801019e:	68fb      	ldr	r3, [r7, #12]
 80101a0:	683a      	ldr	r2, [r7, #0]
 80101a2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80101a4:	683b      	ldr	r3, [r7, #0]
 80101a6:	687a      	ldr	r2, [r7, #4]
 80101a8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80101aa:	687b      	ldr	r3, [r7, #4]
 80101ac:	681b      	ldr	r3, [r3, #0]
 80101ae:	1c5a      	adds	r2, r3, #1
 80101b0:	687b      	ldr	r3, [r7, #4]
 80101b2:	601a      	str	r2, [r3, #0]
}
 80101b4:	bf00      	nop
 80101b6:	3714      	adds	r7, #20
 80101b8:	46bd      	mov	sp, r7
 80101ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101be:	4770      	bx	lr

080101c0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80101c0:	b480      	push	{r7}
 80101c2:	b085      	sub	sp, #20
 80101c4:	af00      	add	r7, sp, #0
 80101c6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80101c8:	687b      	ldr	r3, [r7, #4]
 80101ca:	691b      	ldr	r3, [r3, #16]
 80101cc:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80101ce:	687b      	ldr	r3, [r7, #4]
 80101d0:	685b      	ldr	r3, [r3, #4]
 80101d2:	687a      	ldr	r2, [r7, #4]
 80101d4:	6892      	ldr	r2, [r2, #8]
 80101d6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80101d8:	687b      	ldr	r3, [r7, #4]
 80101da:	689b      	ldr	r3, [r3, #8]
 80101dc:	687a      	ldr	r2, [r7, #4]
 80101de:	6852      	ldr	r2, [r2, #4]
 80101e0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80101e2:	68fb      	ldr	r3, [r7, #12]
 80101e4:	685b      	ldr	r3, [r3, #4]
 80101e6:	687a      	ldr	r2, [r7, #4]
 80101e8:	429a      	cmp	r2, r3
 80101ea:	d103      	bne.n	80101f4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80101ec:	687b      	ldr	r3, [r7, #4]
 80101ee:	689a      	ldr	r2, [r3, #8]
 80101f0:	68fb      	ldr	r3, [r7, #12]
 80101f2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80101f4:	687b      	ldr	r3, [r7, #4]
 80101f6:	2200      	movs	r2, #0
 80101f8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80101fa:	68fb      	ldr	r3, [r7, #12]
 80101fc:	681b      	ldr	r3, [r3, #0]
 80101fe:	1e5a      	subs	r2, r3, #1
 8010200:	68fb      	ldr	r3, [r7, #12]
 8010202:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8010204:	68fb      	ldr	r3, [r7, #12]
 8010206:	681b      	ldr	r3, [r3, #0]
}
 8010208:	4618      	mov	r0, r3
 801020a:	3714      	adds	r7, #20
 801020c:	46bd      	mov	sp, r7
 801020e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010212:	4770      	bx	lr

08010214 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8010214:	b580      	push	{r7, lr}
 8010216:	b084      	sub	sp, #16
 8010218:	af00      	add	r7, sp, #0
 801021a:	6078      	str	r0, [r7, #4]
 801021c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 801021e:	687b      	ldr	r3, [r7, #4]
 8010220:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8010222:	68fb      	ldr	r3, [r7, #12]
 8010224:	2b00      	cmp	r3, #0
 8010226:	d109      	bne.n	801023c <xQueueGenericReset+0x28>
 8010228:	f04f 0350 	mov.w	r3, #80	; 0x50
 801022c:	f383 8811 	msr	BASEPRI, r3
 8010230:	f3bf 8f6f 	isb	sy
 8010234:	f3bf 8f4f 	dsb	sy
 8010238:	60bb      	str	r3, [r7, #8]
 801023a:	e7fe      	b.n	801023a <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 801023c:	f7ff fc46 	bl	800facc <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8010240:	68fb      	ldr	r3, [r7, #12]
 8010242:	681a      	ldr	r2, [r3, #0]
 8010244:	68fb      	ldr	r3, [r7, #12]
 8010246:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010248:	68f9      	ldr	r1, [r7, #12]
 801024a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 801024c:	fb01 f303 	mul.w	r3, r1, r3
 8010250:	441a      	add	r2, r3
 8010252:	68fb      	ldr	r3, [r7, #12]
 8010254:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8010256:	68fb      	ldr	r3, [r7, #12]
 8010258:	2200      	movs	r2, #0
 801025a:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 801025c:	68fb      	ldr	r3, [r7, #12]
 801025e:	681a      	ldr	r2, [r3, #0]
 8010260:	68fb      	ldr	r3, [r7, #12]
 8010262:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8010264:	68fb      	ldr	r3, [r7, #12]
 8010266:	681a      	ldr	r2, [r3, #0]
 8010268:	68fb      	ldr	r3, [r7, #12]
 801026a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801026c:	3b01      	subs	r3, #1
 801026e:	68f9      	ldr	r1, [r7, #12]
 8010270:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8010272:	fb01 f303 	mul.w	r3, r1, r3
 8010276:	441a      	add	r2, r3
 8010278:	68fb      	ldr	r3, [r7, #12]
 801027a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 801027c:	68fb      	ldr	r3, [r7, #12]
 801027e:	22ff      	movs	r2, #255	; 0xff
 8010280:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8010284:	68fb      	ldr	r3, [r7, #12]
 8010286:	22ff      	movs	r2, #255	; 0xff
 8010288:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 801028c:	683b      	ldr	r3, [r7, #0]
 801028e:	2b00      	cmp	r3, #0
 8010290:	d114      	bne.n	80102bc <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8010292:	68fb      	ldr	r3, [r7, #12]
 8010294:	691b      	ldr	r3, [r3, #16]
 8010296:	2b00      	cmp	r3, #0
 8010298:	d01a      	beq.n	80102d0 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801029a:	68fb      	ldr	r3, [r7, #12]
 801029c:	3310      	adds	r3, #16
 801029e:	4618      	mov	r0, r3
 80102a0:	f001 fce4 	bl	8011c6c <xTaskRemoveFromEventList>
 80102a4:	4603      	mov	r3, r0
 80102a6:	2b00      	cmp	r3, #0
 80102a8:	d012      	beq.n	80102d0 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80102aa:	4b0d      	ldr	r3, [pc, #52]	; (80102e0 <xQueueGenericReset+0xcc>)
 80102ac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80102b0:	601a      	str	r2, [r3, #0]
 80102b2:	f3bf 8f4f 	dsb	sy
 80102b6:	f3bf 8f6f 	isb	sy
 80102ba:	e009      	b.n	80102d0 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80102bc:	68fb      	ldr	r3, [r7, #12]
 80102be:	3310      	adds	r3, #16
 80102c0:	4618      	mov	r0, r3
 80102c2:	f7ff fef3 	bl	80100ac <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80102c6:	68fb      	ldr	r3, [r7, #12]
 80102c8:	3324      	adds	r3, #36	; 0x24
 80102ca:	4618      	mov	r0, r3
 80102cc:	f7ff feee 	bl	80100ac <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80102d0:	f7ff fc2a 	bl	800fb28 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80102d4:	2301      	movs	r3, #1
}
 80102d6:	4618      	mov	r0, r3
 80102d8:	3710      	adds	r7, #16
 80102da:	46bd      	mov	sp, r7
 80102dc:	bd80      	pop	{r7, pc}
 80102de:	bf00      	nop
 80102e0:	e000ed04 	.word	0xe000ed04

080102e4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80102e4:	b580      	push	{r7, lr}
 80102e6:	b08e      	sub	sp, #56	; 0x38
 80102e8:	af02      	add	r7, sp, #8
 80102ea:	60f8      	str	r0, [r7, #12]
 80102ec:	60b9      	str	r1, [r7, #8]
 80102ee:	607a      	str	r2, [r7, #4]
 80102f0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80102f2:	68fb      	ldr	r3, [r7, #12]
 80102f4:	2b00      	cmp	r3, #0
 80102f6:	d109      	bne.n	801030c <xQueueGenericCreateStatic+0x28>
 80102f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80102fc:	f383 8811 	msr	BASEPRI, r3
 8010300:	f3bf 8f6f 	isb	sy
 8010304:	f3bf 8f4f 	dsb	sy
 8010308:	62bb      	str	r3, [r7, #40]	; 0x28
 801030a:	e7fe      	b.n	801030a <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 801030c:	683b      	ldr	r3, [r7, #0]
 801030e:	2b00      	cmp	r3, #0
 8010310:	d109      	bne.n	8010326 <xQueueGenericCreateStatic+0x42>
 8010312:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010316:	f383 8811 	msr	BASEPRI, r3
 801031a:	f3bf 8f6f 	isb	sy
 801031e:	f3bf 8f4f 	dsb	sy
 8010322:	627b      	str	r3, [r7, #36]	; 0x24
 8010324:	e7fe      	b.n	8010324 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8010326:	687b      	ldr	r3, [r7, #4]
 8010328:	2b00      	cmp	r3, #0
 801032a:	d002      	beq.n	8010332 <xQueueGenericCreateStatic+0x4e>
 801032c:	68bb      	ldr	r3, [r7, #8]
 801032e:	2b00      	cmp	r3, #0
 8010330:	d001      	beq.n	8010336 <xQueueGenericCreateStatic+0x52>
 8010332:	2301      	movs	r3, #1
 8010334:	e000      	b.n	8010338 <xQueueGenericCreateStatic+0x54>
 8010336:	2300      	movs	r3, #0
 8010338:	2b00      	cmp	r3, #0
 801033a:	d109      	bne.n	8010350 <xQueueGenericCreateStatic+0x6c>
 801033c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010340:	f383 8811 	msr	BASEPRI, r3
 8010344:	f3bf 8f6f 	isb	sy
 8010348:	f3bf 8f4f 	dsb	sy
 801034c:	623b      	str	r3, [r7, #32]
 801034e:	e7fe      	b.n	801034e <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8010350:	687b      	ldr	r3, [r7, #4]
 8010352:	2b00      	cmp	r3, #0
 8010354:	d102      	bne.n	801035c <xQueueGenericCreateStatic+0x78>
 8010356:	68bb      	ldr	r3, [r7, #8]
 8010358:	2b00      	cmp	r3, #0
 801035a:	d101      	bne.n	8010360 <xQueueGenericCreateStatic+0x7c>
 801035c:	2301      	movs	r3, #1
 801035e:	e000      	b.n	8010362 <xQueueGenericCreateStatic+0x7e>
 8010360:	2300      	movs	r3, #0
 8010362:	2b00      	cmp	r3, #0
 8010364:	d109      	bne.n	801037a <xQueueGenericCreateStatic+0x96>
 8010366:	f04f 0350 	mov.w	r3, #80	; 0x50
 801036a:	f383 8811 	msr	BASEPRI, r3
 801036e:	f3bf 8f6f 	isb	sy
 8010372:	f3bf 8f4f 	dsb	sy
 8010376:	61fb      	str	r3, [r7, #28]
 8010378:	e7fe      	b.n	8010378 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 801037a:	2350      	movs	r3, #80	; 0x50
 801037c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 801037e:	697b      	ldr	r3, [r7, #20]
 8010380:	2b50      	cmp	r3, #80	; 0x50
 8010382:	d009      	beq.n	8010398 <xQueueGenericCreateStatic+0xb4>
 8010384:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010388:	f383 8811 	msr	BASEPRI, r3
 801038c:	f3bf 8f6f 	isb	sy
 8010390:	f3bf 8f4f 	dsb	sy
 8010394:	61bb      	str	r3, [r7, #24]
 8010396:	e7fe      	b.n	8010396 <xQueueGenericCreateStatic+0xb2>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8010398:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 801039a:	683b      	ldr	r3, [r7, #0]
 801039c:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 801039e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80103a0:	2b00      	cmp	r3, #0
 80103a2:	d00d      	beq.n	80103c0 <xQueueGenericCreateStatic+0xdc>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80103a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80103a6:	2201      	movs	r2, #1
 80103a8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80103ac:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80103b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80103b2:	9300      	str	r3, [sp, #0]
 80103b4:	4613      	mov	r3, r2
 80103b6:	687a      	ldr	r2, [r7, #4]
 80103b8:	68b9      	ldr	r1, [r7, #8]
 80103ba:	68f8      	ldr	r0, [r7, #12]
 80103bc:	f000 f844 	bl	8010448 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80103c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80103c2:	4618      	mov	r0, r3
 80103c4:	3730      	adds	r7, #48	; 0x30
 80103c6:	46bd      	mov	sp, r7
 80103c8:	bd80      	pop	{r7, pc}

080103ca <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80103ca:	b580      	push	{r7, lr}
 80103cc:	b08a      	sub	sp, #40	; 0x28
 80103ce:	af02      	add	r7, sp, #8
 80103d0:	60f8      	str	r0, [r7, #12]
 80103d2:	60b9      	str	r1, [r7, #8]
 80103d4:	4613      	mov	r3, r2
 80103d6:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80103d8:	68fb      	ldr	r3, [r7, #12]
 80103da:	2b00      	cmp	r3, #0
 80103dc:	d109      	bne.n	80103f2 <xQueueGenericCreate+0x28>
 80103de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80103e2:	f383 8811 	msr	BASEPRI, r3
 80103e6:	f3bf 8f6f 	isb	sy
 80103ea:	f3bf 8f4f 	dsb	sy
 80103ee:	613b      	str	r3, [r7, #16]
 80103f0:	e7fe      	b.n	80103f0 <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 80103f2:	68bb      	ldr	r3, [r7, #8]
 80103f4:	2b00      	cmp	r3, #0
 80103f6:	d102      	bne.n	80103fe <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 80103f8:	2300      	movs	r3, #0
 80103fa:	61fb      	str	r3, [r7, #28]
 80103fc:	e004      	b.n	8010408 <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80103fe:	68fb      	ldr	r3, [r7, #12]
 8010400:	68ba      	ldr	r2, [r7, #8]
 8010402:	fb02 f303 	mul.w	r3, r2, r3
 8010406:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8010408:	69fb      	ldr	r3, [r7, #28]
 801040a:	3350      	adds	r3, #80	; 0x50
 801040c:	4618      	mov	r0, r3
 801040e:	f7ff fc77 	bl	800fd00 <pvPortMalloc>
 8010412:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8010414:	69bb      	ldr	r3, [r7, #24]
 8010416:	2b00      	cmp	r3, #0
 8010418:	d011      	beq.n	801043e <xQueueGenericCreate+0x74>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 801041a:	69bb      	ldr	r3, [r7, #24]
 801041c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 801041e:	697b      	ldr	r3, [r7, #20]
 8010420:	3350      	adds	r3, #80	; 0x50
 8010422:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8010424:	69bb      	ldr	r3, [r7, #24]
 8010426:	2200      	movs	r2, #0
 8010428:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 801042c:	79fa      	ldrb	r2, [r7, #7]
 801042e:	69bb      	ldr	r3, [r7, #24]
 8010430:	9300      	str	r3, [sp, #0]
 8010432:	4613      	mov	r3, r2
 8010434:	697a      	ldr	r2, [r7, #20]
 8010436:	68b9      	ldr	r1, [r7, #8]
 8010438:	68f8      	ldr	r0, [r7, #12]
 801043a:	f000 f805 	bl	8010448 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 801043e:	69bb      	ldr	r3, [r7, #24]
	}
 8010440:	4618      	mov	r0, r3
 8010442:	3720      	adds	r7, #32
 8010444:	46bd      	mov	sp, r7
 8010446:	bd80      	pop	{r7, pc}

08010448 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8010448:	b580      	push	{r7, lr}
 801044a:	b084      	sub	sp, #16
 801044c:	af00      	add	r7, sp, #0
 801044e:	60f8      	str	r0, [r7, #12]
 8010450:	60b9      	str	r1, [r7, #8]
 8010452:	607a      	str	r2, [r7, #4]
 8010454:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8010456:	68bb      	ldr	r3, [r7, #8]
 8010458:	2b00      	cmp	r3, #0
 801045a:	d103      	bne.n	8010464 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 801045c:	69bb      	ldr	r3, [r7, #24]
 801045e:	69ba      	ldr	r2, [r7, #24]
 8010460:	601a      	str	r2, [r3, #0]
 8010462:	e002      	b.n	801046a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8010464:	69bb      	ldr	r3, [r7, #24]
 8010466:	687a      	ldr	r2, [r7, #4]
 8010468:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 801046a:	69bb      	ldr	r3, [r7, #24]
 801046c:	68fa      	ldr	r2, [r7, #12]
 801046e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8010470:	69bb      	ldr	r3, [r7, #24]
 8010472:	68ba      	ldr	r2, [r7, #8]
 8010474:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8010476:	2101      	movs	r1, #1
 8010478:	69b8      	ldr	r0, [r7, #24]
 801047a:	f7ff fecb 	bl	8010214 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 801047e:	69bb      	ldr	r3, [r7, #24]
 8010480:	78fa      	ldrb	r2, [r7, #3]
 8010482:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8010486:	bf00      	nop
 8010488:	3710      	adds	r7, #16
 801048a:	46bd      	mov	sp, r7
 801048c:	bd80      	pop	{r7, pc}

0801048e <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 801048e:	b580      	push	{r7, lr}
 8010490:	b082      	sub	sp, #8
 8010492:	af00      	add	r7, sp, #0
 8010494:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8010496:	687b      	ldr	r3, [r7, #4]
 8010498:	2b00      	cmp	r3, #0
 801049a:	d00e      	beq.n	80104ba <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 801049c:	687b      	ldr	r3, [r7, #4]
 801049e:	2200      	movs	r2, #0
 80104a0:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 80104a2:	687b      	ldr	r3, [r7, #4]
 80104a4:	2200      	movs	r2, #0
 80104a6:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 80104a8:	687b      	ldr	r3, [r7, #4]
 80104aa:	2200      	movs	r2, #0
 80104ac:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 80104ae:	2300      	movs	r3, #0
 80104b0:	2200      	movs	r2, #0
 80104b2:	2100      	movs	r1, #0
 80104b4:	6878      	ldr	r0, [r7, #4]
 80104b6:	f000 f905 	bl	80106c4 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 80104ba:	bf00      	nop
 80104bc:	3708      	adds	r7, #8
 80104be:	46bd      	mov	sp, r7
 80104c0:	bd80      	pop	{r7, pc}

080104c2 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 80104c2:	b580      	push	{r7, lr}
 80104c4:	b086      	sub	sp, #24
 80104c6:	af00      	add	r7, sp, #0
 80104c8:	4603      	mov	r3, r0
 80104ca:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80104cc:	2301      	movs	r3, #1
 80104ce:	617b      	str	r3, [r7, #20]
 80104d0:	2300      	movs	r3, #0
 80104d2:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 80104d4:	79fb      	ldrb	r3, [r7, #7]
 80104d6:	461a      	mov	r2, r3
 80104d8:	6939      	ldr	r1, [r7, #16]
 80104da:	6978      	ldr	r0, [r7, #20]
 80104dc:	f7ff ff75 	bl	80103ca <xQueueGenericCreate>
 80104e0:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80104e2:	68f8      	ldr	r0, [r7, #12]
 80104e4:	f7ff ffd3 	bl	801048e <prvInitialiseMutex>

		return xNewQueue;
 80104e8:	68fb      	ldr	r3, [r7, #12]
	}
 80104ea:	4618      	mov	r0, r3
 80104ec:	3718      	adds	r7, #24
 80104ee:	46bd      	mov	sp, r7
 80104f0:	bd80      	pop	{r7, pc}

080104f2 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 80104f2:	b580      	push	{r7, lr}
 80104f4:	b088      	sub	sp, #32
 80104f6:	af02      	add	r7, sp, #8
 80104f8:	4603      	mov	r3, r0
 80104fa:	6039      	str	r1, [r7, #0]
 80104fc:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80104fe:	2301      	movs	r3, #1
 8010500:	617b      	str	r3, [r7, #20]
 8010502:	2300      	movs	r3, #0
 8010504:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8010506:	79fb      	ldrb	r3, [r7, #7]
 8010508:	9300      	str	r3, [sp, #0]
 801050a:	683b      	ldr	r3, [r7, #0]
 801050c:	2200      	movs	r2, #0
 801050e:	6939      	ldr	r1, [r7, #16]
 8010510:	6978      	ldr	r0, [r7, #20]
 8010512:	f7ff fee7 	bl	80102e4 <xQueueGenericCreateStatic>
 8010516:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8010518:	68f8      	ldr	r0, [r7, #12]
 801051a:	f7ff ffb8 	bl	801048e <prvInitialiseMutex>

		return xNewQueue;
 801051e:	68fb      	ldr	r3, [r7, #12]
	}
 8010520:	4618      	mov	r0, r3
 8010522:	3718      	adds	r7, #24
 8010524:	46bd      	mov	sp, r7
 8010526:	bd80      	pop	{r7, pc}

08010528 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 8010528:	b590      	push	{r4, r7, lr}
 801052a:	b087      	sub	sp, #28
 801052c:	af00      	add	r7, sp, #0
 801052e:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8010530:	687b      	ldr	r3, [r7, #4]
 8010532:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8010534:	693b      	ldr	r3, [r7, #16]
 8010536:	2b00      	cmp	r3, #0
 8010538:	d109      	bne.n	801054e <xQueueGiveMutexRecursive+0x26>
 801053a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801053e:	f383 8811 	msr	BASEPRI, r3
 8010542:	f3bf 8f6f 	isb	sy
 8010546:	f3bf 8f4f 	dsb	sy
 801054a:	60fb      	str	r3, [r7, #12]
 801054c:	e7fe      	b.n	801054c <xQueueGiveMutexRecursive+0x24>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 801054e:	693b      	ldr	r3, [r7, #16]
 8010550:	689c      	ldr	r4, [r3, #8]
 8010552:	f001 fd69 	bl	8012028 <xTaskGetCurrentTaskHandle>
 8010556:	4603      	mov	r3, r0
 8010558:	429c      	cmp	r4, r3
 801055a:	d111      	bne.n	8010580 <xQueueGiveMutexRecursive+0x58>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 801055c:	693b      	ldr	r3, [r7, #16]
 801055e:	68db      	ldr	r3, [r3, #12]
 8010560:	1e5a      	subs	r2, r3, #1
 8010562:	693b      	ldr	r3, [r7, #16]
 8010564:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 8010566:	693b      	ldr	r3, [r7, #16]
 8010568:	68db      	ldr	r3, [r3, #12]
 801056a:	2b00      	cmp	r3, #0
 801056c:	d105      	bne.n	801057a <xQueueGiveMutexRecursive+0x52>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 801056e:	2300      	movs	r3, #0
 8010570:	2200      	movs	r2, #0
 8010572:	2100      	movs	r1, #0
 8010574:	6938      	ldr	r0, [r7, #16]
 8010576:	f000 f8a5 	bl	80106c4 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 801057a:	2301      	movs	r3, #1
 801057c:	617b      	str	r3, [r7, #20]
 801057e:	e001      	b.n	8010584 <xQueueGiveMutexRecursive+0x5c>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 8010580:	2300      	movs	r3, #0
 8010582:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 8010584:	697b      	ldr	r3, [r7, #20]
	}
 8010586:	4618      	mov	r0, r3
 8010588:	371c      	adds	r7, #28
 801058a:	46bd      	mov	sp, r7
 801058c:	bd90      	pop	{r4, r7, pc}

0801058e <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 801058e:	b590      	push	{r4, r7, lr}
 8010590:	b087      	sub	sp, #28
 8010592:	af00      	add	r7, sp, #0
 8010594:	6078      	str	r0, [r7, #4]
 8010596:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8010598:	687b      	ldr	r3, [r7, #4]
 801059a:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 801059c:	693b      	ldr	r3, [r7, #16]
 801059e:	2b00      	cmp	r3, #0
 80105a0:	d109      	bne.n	80105b6 <xQueueTakeMutexRecursive+0x28>
 80105a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80105a6:	f383 8811 	msr	BASEPRI, r3
 80105aa:	f3bf 8f6f 	isb	sy
 80105ae:	f3bf 8f4f 	dsb	sy
 80105b2:	60fb      	str	r3, [r7, #12]
 80105b4:	e7fe      	b.n	80105b4 <xQueueTakeMutexRecursive+0x26>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 80105b6:	693b      	ldr	r3, [r7, #16]
 80105b8:	689c      	ldr	r4, [r3, #8]
 80105ba:	f001 fd35 	bl	8012028 <xTaskGetCurrentTaskHandle>
 80105be:	4603      	mov	r3, r0
 80105c0:	429c      	cmp	r4, r3
 80105c2:	d107      	bne.n	80105d4 <xQueueTakeMutexRecursive+0x46>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 80105c4:	693b      	ldr	r3, [r7, #16]
 80105c6:	68db      	ldr	r3, [r3, #12]
 80105c8:	1c5a      	adds	r2, r3, #1
 80105ca:	693b      	ldr	r3, [r7, #16]
 80105cc:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 80105ce:	2301      	movs	r3, #1
 80105d0:	617b      	str	r3, [r7, #20]
 80105d2:	e00c      	b.n	80105ee <xQueueTakeMutexRecursive+0x60>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 80105d4:	6839      	ldr	r1, [r7, #0]
 80105d6:	6938      	ldr	r0, [r7, #16]
 80105d8:	f000 fb68 	bl	8010cac <xQueueSemaphoreTake>
 80105dc:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 80105de:	697b      	ldr	r3, [r7, #20]
 80105e0:	2b00      	cmp	r3, #0
 80105e2:	d004      	beq.n	80105ee <xQueueTakeMutexRecursive+0x60>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 80105e4:	693b      	ldr	r3, [r7, #16]
 80105e6:	68db      	ldr	r3, [r3, #12]
 80105e8:	1c5a      	adds	r2, r3, #1
 80105ea:	693b      	ldr	r3, [r7, #16]
 80105ec:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 80105ee:	697b      	ldr	r3, [r7, #20]
	}
 80105f0:	4618      	mov	r0, r3
 80105f2:	371c      	adds	r7, #28
 80105f4:	46bd      	mov	sp, r7
 80105f6:	bd90      	pop	{r4, r7, pc}

080105f8 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 80105f8:	b580      	push	{r7, lr}
 80105fa:	b08a      	sub	sp, #40	; 0x28
 80105fc:	af02      	add	r7, sp, #8
 80105fe:	60f8      	str	r0, [r7, #12]
 8010600:	60b9      	str	r1, [r7, #8]
 8010602:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8010604:	68fb      	ldr	r3, [r7, #12]
 8010606:	2b00      	cmp	r3, #0
 8010608:	d109      	bne.n	801061e <xQueueCreateCountingSemaphoreStatic+0x26>
 801060a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801060e:	f383 8811 	msr	BASEPRI, r3
 8010612:	f3bf 8f6f 	isb	sy
 8010616:	f3bf 8f4f 	dsb	sy
 801061a:	61bb      	str	r3, [r7, #24]
 801061c:	e7fe      	b.n	801061c <xQueueCreateCountingSemaphoreStatic+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 801061e:	68ba      	ldr	r2, [r7, #8]
 8010620:	68fb      	ldr	r3, [r7, #12]
 8010622:	429a      	cmp	r2, r3
 8010624:	d909      	bls.n	801063a <xQueueCreateCountingSemaphoreStatic+0x42>
 8010626:	f04f 0350 	mov.w	r3, #80	; 0x50
 801062a:	f383 8811 	msr	BASEPRI, r3
 801062e:	f3bf 8f6f 	isb	sy
 8010632:	f3bf 8f4f 	dsb	sy
 8010636:	617b      	str	r3, [r7, #20]
 8010638:	e7fe      	b.n	8010638 <xQueueCreateCountingSemaphoreStatic+0x40>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 801063a:	2302      	movs	r3, #2
 801063c:	9300      	str	r3, [sp, #0]
 801063e:	687b      	ldr	r3, [r7, #4]
 8010640:	2200      	movs	r2, #0
 8010642:	2100      	movs	r1, #0
 8010644:	68f8      	ldr	r0, [r7, #12]
 8010646:	f7ff fe4d 	bl	80102e4 <xQueueGenericCreateStatic>
 801064a:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 801064c:	69fb      	ldr	r3, [r7, #28]
 801064e:	2b00      	cmp	r3, #0
 8010650:	d002      	beq.n	8010658 <xQueueCreateCountingSemaphoreStatic+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8010652:	69fb      	ldr	r3, [r7, #28]
 8010654:	68ba      	ldr	r2, [r7, #8]
 8010656:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8010658:	69fb      	ldr	r3, [r7, #28]
	}
 801065a:	4618      	mov	r0, r3
 801065c:	3720      	adds	r7, #32
 801065e:	46bd      	mov	sp, r7
 8010660:	bd80      	pop	{r7, pc}

08010662 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8010662:	b580      	push	{r7, lr}
 8010664:	b086      	sub	sp, #24
 8010666:	af00      	add	r7, sp, #0
 8010668:	6078      	str	r0, [r7, #4]
 801066a:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 801066c:	687b      	ldr	r3, [r7, #4]
 801066e:	2b00      	cmp	r3, #0
 8010670:	d109      	bne.n	8010686 <xQueueCreateCountingSemaphore+0x24>
 8010672:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010676:	f383 8811 	msr	BASEPRI, r3
 801067a:	f3bf 8f6f 	isb	sy
 801067e:	f3bf 8f4f 	dsb	sy
 8010682:	613b      	str	r3, [r7, #16]
 8010684:	e7fe      	b.n	8010684 <xQueueCreateCountingSemaphore+0x22>
		configASSERT( uxInitialCount <= uxMaxCount );
 8010686:	683a      	ldr	r2, [r7, #0]
 8010688:	687b      	ldr	r3, [r7, #4]
 801068a:	429a      	cmp	r2, r3
 801068c:	d909      	bls.n	80106a2 <xQueueCreateCountingSemaphore+0x40>
 801068e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010692:	f383 8811 	msr	BASEPRI, r3
 8010696:	f3bf 8f6f 	isb	sy
 801069a:	f3bf 8f4f 	dsb	sy
 801069e:	60fb      	str	r3, [r7, #12]
 80106a0:	e7fe      	b.n	80106a0 <xQueueCreateCountingSemaphore+0x3e>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80106a2:	2202      	movs	r2, #2
 80106a4:	2100      	movs	r1, #0
 80106a6:	6878      	ldr	r0, [r7, #4]
 80106a8:	f7ff fe8f 	bl	80103ca <xQueueGenericCreate>
 80106ac:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 80106ae:	697b      	ldr	r3, [r7, #20]
 80106b0:	2b00      	cmp	r3, #0
 80106b2:	d002      	beq.n	80106ba <xQueueCreateCountingSemaphore+0x58>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80106b4:	697b      	ldr	r3, [r7, #20]
 80106b6:	683a      	ldr	r2, [r7, #0]
 80106b8:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 80106ba:	697b      	ldr	r3, [r7, #20]
	}
 80106bc:	4618      	mov	r0, r3
 80106be:	3718      	adds	r7, #24
 80106c0:	46bd      	mov	sp, r7
 80106c2:	bd80      	pop	{r7, pc}

080106c4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80106c4:	b580      	push	{r7, lr}
 80106c6:	b08e      	sub	sp, #56	; 0x38
 80106c8:	af00      	add	r7, sp, #0
 80106ca:	60f8      	str	r0, [r7, #12]
 80106cc:	60b9      	str	r1, [r7, #8]
 80106ce:	607a      	str	r2, [r7, #4]
 80106d0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80106d2:	2300      	movs	r3, #0
 80106d4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80106d6:	68fb      	ldr	r3, [r7, #12]
 80106d8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80106da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80106dc:	2b00      	cmp	r3, #0
 80106de:	d109      	bne.n	80106f4 <xQueueGenericSend+0x30>
 80106e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80106e4:	f383 8811 	msr	BASEPRI, r3
 80106e8:	f3bf 8f6f 	isb	sy
 80106ec:	f3bf 8f4f 	dsb	sy
 80106f0:	62bb      	str	r3, [r7, #40]	; 0x28
 80106f2:	e7fe      	b.n	80106f2 <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80106f4:	68bb      	ldr	r3, [r7, #8]
 80106f6:	2b00      	cmp	r3, #0
 80106f8:	d103      	bne.n	8010702 <xQueueGenericSend+0x3e>
 80106fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80106fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80106fe:	2b00      	cmp	r3, #0
 8010700:	d101      	bne.n	8010706 <xQueueGenericSend+0x42>
 8010702:	2301      	movs	r3, #1
 8010704:	e000      	b.n	8010708 <xQueueGenericSend+0x44>
 8010706:	2300      	movs	r3, #0
 8010708:	2b00      	cmp	r3, #0
 801070a:	d109      	bne.n	8010720 <xQueueGenericSend+0x5c>
 801070c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010710:	f383 8811 	msr	BASEPRI, r3
 8010714:	f3bf 8f6f 	isb	sy
 8010718:	f3bf 8f4f 	dsb	sy
 801071c:	627b      	str	r3, [r7, #36]	; 0x24
 801071e:	e7fe      	b.n	801071e <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8010720:	683b      	ldr	r3, [r7, #0]
 8010722:	2b02      	cmp	r3, #2
 8010724:	d103      	bne.n	801072e <xQueueGenericSend+0x6a>
 8010726:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010728:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801072a:	2b01      	cmp	r3, #1
 801072c:	d101      	bne.n	8010732 <xQueueGenericSend+0x6e>
 801072e:	2301      	movs	r3, #1
 8010730:	e000      	b.n	8010734 <xQueueGenericSend+0x70>
 8010732:	2300      	movs	r3, #0
 8010734:	2b00      	cmp	r3, #0
 8010736:	d109      	bne.n	801074c <xQueueGenericSend+0x88>
 8010738:	f04f 0350 	mov.w	r3, #80	; 0x50
 801073c:	f383 8811 	msr	BASEPRI, r3
 8010740:	f3bf 8f6f 	isb	sy
 8010744:	f3bf 8f4f 	dsb	sy
 8010748:	623b      	str	r3, [r7, #32]
 801074a:	e7fe      	b.n	801074a <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 801074c:	f001 fc7c 	bl	8012048 <xTaskGetSchedulerState>
 8010750:	4603      	mov	r3, r0
 8010752:	2b00      	cmp	r3, #0
 8010754:	d102      	bne.n	801075c <xQueueGenericSend+0x98>
 8010756:	687b      	ldr	r3, [r7, #4]
 8010758:	2b00      	cmp	r3, #0
 801075a:	d101      	bne.n	8010760 <xQueueGenericSend+0x9c>
 801075c:	2301      	movs	r3, #1
 801075e:	e000      	b.n	8010762 <xQueueGenericSend+0x9e>
 8010760:	2300      	movs	r3, #0
 8010762:	2b00      	cmp	r3, #0
 8010764:	d109      	bne.n	801077a <xQueueGenericSend+0xb6>
 8010766:	f04f 0350 	mov.w	r3, #80	; 0x50
 801076a:	f383 8811 	msr	BASEPRI, r3
 801076e:	f3bf 8f6f 	isb	sy
 8010772:	f3bf 8f4f 	dsb	sy
 8010776:	61fb      	str	r3, [r7, #28]
 8010778:	e7fe      	b.n	8010778 <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 801077a:	f7ff f9a7 	bl	800facc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 801077e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010780:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8010782:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010784:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010786:	429a      	cmp	r2, r3
 8010788:	d302      	bcc.n	8010790 <xQueueGenericSend+0xcc>
 801078a:	683b      	ldr	r3, [r7, #0]
 801078c:	2b02      	cmp	r3, #2
 801078e:	d129      	bne.n	80107e4 <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8010790:	683a      	ldr	r2, [r7, #0]
 8010792:	68b9      	ldr	r1, [r7, #8]
 8010794:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010796:	f000 fc48 	bl	801102a <prvCopyDataToQueue>
 801079a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801079c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801079e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80107a0:	2b00      	cmp	r3, #0
 80107a2:	d010      	beq.n	80107c6 <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80107a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80107a6:	3324      	adds	r3, #36	; 0x24
 80107a8:	4618      	mov	r0, r3
 80107aa:	f001 fa5f 	bl	8011c6c <xTaskRemoveFromEventList>
 80107ae:	4603      	mov	r3, r0
 80107b0:	2b00      	cmp	r3, #0
 80107b2:	d013      	beq.n	80107dc <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80107b4:	4b3f      	ldr	r3, [pc, #252]	; (80108b4 <xQueueGenericSend+0x1f0>)
 80107b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80107ba:	601a      	str	r2, [r3, #0]
 80107bc:	f3bf 8f4f 	dsb	sy
 80107c0:	f3bf 8f6f 	isb	sy
 80107c4:	e00a      	b.n	80107dc <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80107c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80107c8:	2b00      	cmp	r3, #0
 80107ca:	d007      	beq.n	80107dc <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80107cc:	4b39      	ldr	r3, [pc, #228]	; (80108b4 <xQueueGenericSend+0x1f0>)
 80107ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80107d2:	601a      	str	r2, [r3, #0]
 80107d4:	f3bf 8f4f 	dsb	sy
 80107d8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80107dc:	f7ff f9a4 	bl	800fb28 <vPortExitCritical>
				return pdPASS;
 80107e0:	2301      	movs	r3, #1
 80107e2:	e063      	b.n	80108ac <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80107e4:	687b      	ldr	r3, [r7, #4]
 80107e6:	2b00      	cmp	r3, #0
 80107e8:	d103      	bne.n	80107f2 <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80107ea:	f7ff f99d 	bl	800fb28 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80107ee:	2300      	movs	r3, #0
 80107f0:	e05c      	b.n	80108ac <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80107f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80107f4:	2b00      	cmp	r3, #0
 80107f6:	d106      	bne.n	8010806 <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80107f8:	f107 0314 	add.w	r3, r7, #20
 80107fc:	4618      	mov	r0, r3
 80107fe:	f001 fa99 	bl	8011d34 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8010802:	2301      	movs	r3, #1
 8010804:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8010806:	f7ff f98f 	bl	800fb28 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 801080a:	f000 ffdb 	bl	80117c4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 801080e:	f7ff f95d 	bl	800facc <vPortEnterCritical>
 8010812:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010814:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8010818:	b25b      	sxtb	r3, r3
 801081a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801081e:	d103      	bne.n	8010828 <xQueueGenericSend+0x164>
 8010820:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010822:	2200      	movs	r2, #0
 8010824:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8010828:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801082a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801082e:	b25b      	sxtb	r3, r3
 8010830:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010834:	d103      	bne.n	801083e <xQueueGenericSend+0x17a>
 8010836:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010838:	2200      	movs	r2, #0
 801083a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801083e:	f7ff f973 	bl	800fb28 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8010842:	1d3a      	adds	r2, r7, #4
 8010844:	f107 0314 	add.w	r3, r7, #20
 8010848:	4611      	mov	r1, r2
 801084a:	4618      	mov	r0, r3
 801084c:	f001 fa88 	bl	8011d60 <xTaskCheckForTimeOut>
 8010850:	4603      	mov	r3, r0
 8010852:	2b00      	cmp	r3, #0
 8010854:	d124      	bne.n	80108a0 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8010856:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010858:	f000 fcdf 	bl	801121a <prvIsQueueFull>
 801085c:	4603      	mov	r3, r0
 801085e:	2b00      	cmp	r3, #0
 8010860:	d018      	beq.n	8010894 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8010862:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010864:	3310      	adds	r3, #16
 8010866:	687a      	ldr	r2, [r7, #4]
 8010868:	4611      	mov	r1, r2
 801086a:	4618      	mov	r0, r3
 801086c:	f001 f9b0 	bl	8011bd0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8010870:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010872:	f000 fc6a 	bl	801114a <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8010876:	f000 ffeb 	bl	8011850 <xTaskResumeAll>
 801087a:	4603      	mov	r3, r0
 801087c:	2b00      	cmp	r3, #0
 801087e:	f47f af7c 	bne.w	801077a <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8010882:	4b0c      	ldr	r3, [pc, #48]	; (80108b4 <xQueueGenericSend+0x1f0>)
 8010884:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010888:	601a      	str	r2, [r3, #0]
 801088a:	f3bf 8f4f 	dsb	sy
 801088e:	f3bf 8f6f 	isb	sy
 8010892:	e772      	b.n	801077a <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8010894:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010896:	f000 fc58 	bl	801114a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 801089a:	f000 ffd9 	bl	8011850 <xTaskResumeAll>
 801089e:	e76c      	b.n	801077a <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80108a0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80108a2:	f000 fc52 	bl	801114a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80108a6:	f000 ffd3 	bl	8011850 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80108aa:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80108ac:	4618      	mov	r0, r3
 80108ae:	3738      	adds	r7, #56	; 0x38
 80108b0:	46bd      	mov	sp, r7
 80108b2:	bd80      	pop	{r7, pc}
 80108b4:	e000ed04 	.word	0xe000ed04

080108b8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80108b8:	b580      	push	{r7, lr}
 80108ba:	b08e      	sub	sp, #56	; 0x38
 80108bc:	af00      	add	r7, sp, #0
 80108be:	60f8      	str	r0, [r7, #12]
 80108c0:	60b9      	str	r1, [r7, #8]
 80108c2:	607a      	str	r2, [r7, #4]
 80108c4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80108c6:	68fb      	ldr	r3, [r7, #12]
 80108c8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80108ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80108cc:	2b00      	cmp	r3, #0
 80108ce:	d109      	bne.n	80108e4 <xQueueGenericSendFromISR+0x2c>
 80108d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80108d4:	f383 8811 	msr	BASEPRI, r3
 80108d8:	f3bf 8f6f 	isb	sy
 80108dc:	f3bf 8f4f 	dsb	sy
 80108e0:	627b      	str	r3, [r7, #36]	; 0x24
 80108e2:	e7fe      	b.n	80108e2 <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80108e4:	68bb      	ldr	r3, [r7, #8]
 80108e6:	2b00      	cmp	r3, #0
 80108e8:	d103      	bne.n	80108f2 <xQueueGenericSendFromISR+0x3a>
 80108ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80108ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80108ee:	2b00      	cmp	r3, #0
 80108f0:	d101      	bne.n	80108f6 <xQueueGenericSendFromISR+0x3e>
 80108f2:	2301      	movs	r3, #1
 80108f4:	e000      	b.n	80108f8 <xQueueGenericSendFromISR+0x40>
 80108f6:	2300      	movs	r3, #0
 80108f8:	2b00      	cmp	r3, #0
 80108fa:	d109      	bne.n	8010910 <xQueueGenericSendFromISR+0x58>
 80108fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010900:	f383 8811 	msr	BASEPRI, r3
 8010904:	f3bf 8f6f 	isb	sy
 8010908:	f3bf 8f4f 	dsb	sy
 801090c:	623b      	str	r3, [r7, #32]
 801090e:	e7fe      	b.n	801090e <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8010910:	683b      	ldr	r3, [r7, #0]
 8010912:	2b02      	cmp	r3, #2
 8010914:	d103      	bne.n	801091e <xQueueGenericSendFromISR+0x66>
 8010916:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010918:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801091a:	2b01      	cmp	r3, #1
 801091c:	d101      	bne.n	8010922 <xQueueGenericSendFromISR+0x6a>
 801091e:	2301      	movs	r3, #1
 8010920:	e000      	b.n	8010924 <xQueueGenericSendFromISR+0x6c>
 8010922:	2300      	movs	r3, #0
 8010924:	2b00      	cmp	r3, #0
 8010926:	d109      	bne.n	801093c <xQueueGenericSendFromISR+0x84>
 8010928:	f04f 0350 	mov.w	r3, #80	; 0x50
 801092c:	f383 8811 	msr	BASEPRI, r3
 8010930:	f3bf 8f6f 	isb	sy
 8010934:	f3bf 8f4f 	dsb	sy
 8010938:	61fb      	str	r3, [r7, #28]
 801093a:	e7fe      	b.n	801093a <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 801093c:	f7ff f9a2 	bl	800fc84 <vPortValidateInterruptPriority>
	__asm volatile
 8010940:	f3ef 8211 	mrs	r2, BASEPRI
 8010944:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010948:	f383 8811 	msr	BASEPRI, r3
 801094c:	f3bf 8f6f 	isb	sy
 8010950:	f3bf 8f4f 	dsb	sy
 8010954:	61ba      	str	r2, [r7, #24]
 8010956:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8010958:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 801095a:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 801095c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801095e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8010960:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010962:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010964:	429a      	cmp	r2, r3
 8010966:	d302      	bcc.n	801096e <xQueueGenericSendFromISR+0xb6>
 8010968:	683b      	ldr	r3, [r7, #0]
 801096a:	2b02      	cmp	r3, #2
 801096c:	d12c      	bne.n	80109c8 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 801096e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010970:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8010974:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8010978:	683a      	ldr	r2, [r7, #0]
 801097a:	68b9      	ldr	r1, [r7, #8]
 801097c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801097e:	f000 fb54 	bl	801102a <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8010982:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8010986:	f1b3 3fff 	cmp.w	r3, #4294967295
 801098a:	d112      	bne.n	80109b2 <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801098c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801098e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010990:	2b00      	cmp	r3, #0
 8010992:	d016      	beq.n	80109c2 <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8010994:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010996:	3324      	adds	r3, #36	; 0x24
 8010998:	4618      	mov	r0, r3
 801099a:	f001 f967 	bl	8011c6c <xTaskRemoveFromEventList>
 801099e:	4603      	mov	r3, r0
 80109a0:	2b00      	cmp	r3, #0
 80109a2:	d00e      	beq.n	80109c2 <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80109a4:	687b      	ldr	r3, [r7, #4]
 80109a6:	2b00      	cmp	r3, #0
 80109a8:	d00b      	beq.n	80109c2 <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80109aa:	687b      	ldr	r3, [r7, #4]
 80109ac:	2201      	movs	r2, #1
 80109ae:	601a      	str	r2, [r3, #0]
 80109b0:	e007      	b.n	80109c2 <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80109b2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80109b6:	3301      	adds	r3, #1
 80109b8:	b2db      	uxtb	r3, r3
 80109ba:	b25a      	sxtb	r2, r3
 80109bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80109be:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80109c2:	2301      	movs	r3, #1
 80109c4:	637b      	str	r3, [r7, #52]	; 0x34
		{
 80109c6:	e001      	b.n	80109cc <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80109c8:	2300      	movs	r3, #0
 80109ca:	637b      	str	r3, [r7, #52]	; 0x34
 80109cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80109ce:	613b      	str	r3, [r7, #16]
	__asm volatile
 80109d0:	693b      	ldr	r3, [r7, #16]
 80109d2:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80109d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80109d8:	4618      	mov	r0, r3
 80109da:	3738      	adds	r7, #56	; 0x38
 80109dc:	46bd      	mov	sp, r7
 80109de:	bd80      	pop	{r7, pc}

080109e0 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80109e0:	b580      	push	{r7, lr}
 80109e2:	b08e      	sub	sp, #56	; 0x38
 80109e4:	af00      	add	r7, sp, #0
 80109e6:	6078      	str	r0, [r7, #4]
 80109e8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80109ea:	687b      	ldr	r3, [r7, #4]
 80109ec:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 80109ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80109f0:	2b00      	cmp	r3, #0
 80109f2:	d109      	bne.n	8010a08 <xQueueGiveFromISR+0x28>
	__asm volatile
 80109f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80109f8:	f383 8811 	msr	BASEPRI, r3
 80109fc:	f3bf 8f6f 	isb	sy
 8010a00:	f3bf 8f4f 	dsb	sy
 8010a04:	623b      	str	r3, [r7, #32]
 8010a06:	e7fe      	b.n	8010a06 <xQueueGiveFromISR+0x26>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8010a08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010a0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010a0c:	2b00      	cmp	r3, #0
 8010a0e:	d009      	beq.n	8010a24 <xQueueGiveFromISR+0x44>
 8010a10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010a14:	f383 8811 	msr	BASEPRI, r3
 8010a18:	f3bf 8f6f 	isb	sy
 8010a1c:	f3bf 8f4f 	dsb	sy
 8010a20:	61fb      	str	r3, [r7, #28]
 8010a22:	e7fe      	b.n	8010a22 <xQueueGiveFromISR+0x42>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8010a24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010a26:	681b      	ldr	r3, [r3, #0]
 8010a28:	2b00      	cmp	r3, #0
 8010a2a:	d103      	bne.n	8010a34 <xQueueGiveFromISR+0x54>
 8010a2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010a2e:	689b      	ldr	r3, [r3, #8]
 8010a30:	2b00      	cmp	r3, #0
 8010a32:	d101      	bne.n	8010a38 <xQueueGiveFromISR+0x58>
 8010a34:	2301      	movs	r3, #1
 8010a36:	e000      	b.n	8010a3a <xQueueGiveFromISR+0x5a>
 8010a38:	2300      	movs	r3, #0
 8010a3a:	2b00      	cmp	r3, #0
 8010a3c:	d109      	bne.n	8010a52 <xQueueGiveFromISR+0x72>
 8010a3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010a42:	f383 8811 	msr	BASEPRI, r3
 8010a46:	f3bf 8f6f 	isb	sy
 8010a4a:	f3bf 8f4f 	dsb	sy
 8010a4e:	61bb      	str	r3, [r7, #24]
 8010a50:	e7fe      	b.n	8010a50 <xQueueGiveFromISR+0x70>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8010a52:	f7ff f917 	bl	800fc84 <vPortValidateInterruptPriority>
	__asm volatile
 8010a56:	f3ef 8211 	mrs	r2, BASEPRI
 8010a5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010a5e:	f383 8811 	msr	BASEPRI, r3
 8010a62:	f3bf 8f6f 	isb	sy
 8010a66:	f3bf 8f4f 	dsb	sy
 8010a6a:	617a      	str	r2, [r7, #20]
 8010a6c:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8010a6e:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8010a70:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8010a72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010a74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010a76:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8010a78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010a7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010a7c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010a7e:	429a      	cmp	r2, r3
 8010a80:	d22b      	bcs.n	8010ada <xQueueGiveFromISR+0xfa>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8010a82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010a84:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8010a88:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8010a8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010a8e:	1c5a      	adds	r2, r3, #1
 8010a90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010a92:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8010a94:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8010a98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010a9c:	d112      	bne.n	8010ac4 <xQueueGiveFromISR+0xe4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8010a9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010aa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010aa2:	2b00      	cmp	r3, #0
 8010aa4:	d016      	beq.n	8010ad4 <xQueueGiveFromISR+0xf4>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8010aa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010aa8:	3324      	adds	r3, #36	; 0x24
 8010aaa:	4618      	mov	r0, r3
 8010aac:	f001 f8de 	bl	8011c6c <xTaskRemoveFromEventList>
 8010ab0:	4603      	mov	r3, r0
 8010ab2:	2b00      	cmp	r3, #0
 8010ab4:	d00e      	beq.n	8010ad4 <xQueueGiveFromISR+0xf4>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8010ab6:	683b      	ldr	r3, [r7, #0]
 8010ab8:	2b00      	cmp	r3, #0
 8010aba:	d00b      	beq.n	8010ad4 <xQueueGiveFromISR+0xf4>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8010abc:	683b      	ldr	r3, [r7, #0]
 8010abe:	2201      	movs	r2, #1
 8010ac0:	601a      	str	r2, [r3, #0]
 8010ac2:	e007      	b.n	8010ad4 <xQueueGiveFromISR+0xf4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8010ac4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010ac8:	3301      	adds	r3, #1
 8010aca:	b2db      	uxtb	r3, r3
 8010acc:	b25a      	sxtb	r2, r3
 8010ace:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010ad0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8010ad4:	2301      	movs	r3, #1
 8010ad6:	637b      	str	r3, [r7, #52]	; 0x34
 8010ad8:	e001      	b.n	8010ade <xQueueGiveFromISR+0xfe>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8010ada:	2300      	movs	r3, #0
 8010adc:	637b      	str	r3, [r7, #52]	; 0x34
 8010ade:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010ae0:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8010ae2:	68fb      	ldr	r3, [r7, #12]
 8010ae4:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8010ae8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8010aea:	4618      	mov	r0, r3
 8010aec:	3738      	adds	r7, #56	; 0x38
 8010aee:	46bd      	mov	sp, r7
 8010af0:	bd80      	pop	{r7, pc}
	...

08010af4 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8010af4:	b580      	push	{r7, lr}
 8010af6:	b08c      	sub	sp, #48	; 0x30
 8010af8:	af00      	add	r7, sp, #0
 8010afa:	60f8      	str	r0, [r7, #12]
 8010afc:	60b9      	str	r1, [r7, #8]
 8010afe:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8010b00:	2300      	movs	r3, #0
 8010b02:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8010b04:	68fb      	ldr	r3, [r7, #12]
 8010b06:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8010b08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010b0a:	2b00      	cmp	r3, #0
 8010b0c:	d109      	bne.n	8010b22 <xQueueReceive+0x2e>
	__asm volatile
 8010b0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010b12:	f383 8811 	msr	BASEPRI, r3
 8010b16:	f3bf 8f6f 	isb	sy
 8010b1a:	f3bf 8f4f 	dsb	sy
 8010b1e:	623b      	str	r3, [r7, #32]
 8010b20:	e7fe      	b.n	8010b20 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8010b22:	68bb      	ldr	r3, [r7, #8]
 8010b24:	2b00      	cmp	r3, #0
 8010b26:	d103      	bne.n	8010b30 <xQueueReceive+0x3c>
 8010b28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010b2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010b2c:	2b00      	cmp	r3, #0
 8010b2e:	d101      	bne.n	8010b34 <xQueueReceive+0x40>
 8010b30:	2301      	movs	r3, #1
 8010b32:	e000      	b.n	8010b36 <xQueueReceive+0x42>
 8010b34:	2300      	movs	r3, #0
 8010b36:	2b00      	cmp	r3, #0
 8010b38:	d109      	bne.n	8010b4e <xQueueReceive+0x5a>
 8010b3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010b3e:	f383 8811 	msr	BASEPRI, r3
 8010b42:	f3bf 8f6f 	isb	sy
 8010b46:	f3bf 8f4f 	dsb	sy
 8010b4a:	61fb      	str	r3, [r7, #28]
 8010b4c:	e7fe      	b.n	8010b4c <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8010b4e:	f001 fa7b 	bl	8012048 <xTaskGetSchedulerState>
 8010b52:	4603      	mov	r3, r0
 8010b54:	2b00      	cmp	r3, #0
 8010b56:	d102      	bne.n	8010b5e <xQueueReceive+0x6a>
 8010b58:	687b      	ldr	r3, [r7, #4]
 8010b5a:	2b00      	cmp	r3, #0
 8010b5c:	d101      	bne.n	8010b62 <xQueueReceive+0x6e>
 8010b5e:	2301      	movs	r3, #1
 8010b60:	e000      	b.n	8010b64 <xQueueReceive+0x70>
 8010b62:	2300      	movs	r3, #0
 8010b64:	2b00      	cmp	r3, #0
 8010b66:	d109      	bne.n	8010b7c <xQueueReceive+0x88>
 8010b68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010b6c:	f383 8811 	msr	BASEPRI, r3
 8010b70:	f3bf 8f6f 	isb	sy
 8010b74:	f3bf 8f4f 	dsb	sy
 8010b78:	61bb      	str	r3, [r7, #24]
 8010b7a:	e7fe      	b.n	8010b7a <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8010b7c:	f7fe ffa6 	bl	800facc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8010b80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010b82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010b84:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8010b86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010b88:	2b00      	cmp	r3, #0
 8010b8a:	d01f      	beq.n	8010bcc <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8010b8c:	68b9      	ldr	r1, [r7, #8]
 8010b8e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010b90:	f000 fab5 	bl	80110fe <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8010b94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010b96:	1e5a      	subs	r2, r3, #1
 8010b98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010b9a:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8010b9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010b9e:	691b      	ldr	r3, [r3, #16]
 8010ba0:	2b00      	cmp	r3, #0
 8010ba2:	d00f      	beq.n	8010bc4 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8010ba4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010ba6:	3310      	adds	r3, #16
 8010ba8:	4618      	mov	r0, r3
 8010baa:	f001 f85f 	bl	8011c6c <xTaskRemoveFromEventList>
 8010bae:	4603      	mov	r3, r0
 8010bb0:	2b00      	cmp	r3, #0
 8010bb2:	d007      	beq.n	8010bc4 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8010bb4:	4b3c      	ldr	r3, [pc, #240]	; (8010ca8 <xQueueReceive+0x1b4>)
 8010bb6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010bba:	601a      	str	r2, [r3, #0]
 8010bbc:	f3bf 8f4f 	dsb	sy
 8010bc0:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8010bc4:	f7fe ffb0 	bl	800fb28 <vPortExitCritical>
				return pdPASS;
 8010bc8:	2301      	movs	r3, #1
 8010bca:	e069      	b.n	8010ca0 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8010bcc:	687b      	ldr	r3, [r7, #4]
 8010bce:	2b00      	cmp	r3, #0
 8010bd0:	d103      	bne.n	8010bda <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8010bd2:	f7fe ffa9 	bl	800fb28 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8010bd6:	2300      	movs	r3, #0
 8010bd8:	e062      	b.n	8010ca0 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 8010bda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010bdc:	2b00      	cmp	r3, #0
 8010bde:	d106      	bne.n	8010bee <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8010be0:	f107 0310 	add.w	r3, r7, #16
 8010be4:	4618      	mov	r0, r3
 8010be6:	f001 f8a5 	bl	8011d34 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8010bea:	2301      	movs	r3, #1
 8010bec:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8010bee:	f7fe ff9b 	bl	800fb28 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8010bf2:	f000 fde7 	bl	80117c4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8010bf6:	f7fe ff69 	bl	800facc <vPortEnterCritical>
 8010bfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010bfc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8010c00:	b25b      	sxtb	r3, r3
 8010c02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010c06:	d103      	bne.n	8010c10 <xQueueReceive+0x11c>
 8010c08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010c0a:	2200      	movs	r2, #0
 8010c0c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8010c10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010c12:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8010c16:	b25b      	sxtb	r3, r3
 8010c18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010c1c:	d103      	bne.n	8010c26 <xQueueReceive+0x132>
 8010c1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010c20:	2200      	movs	r2, #0
 8010c22:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8010c26:	f7fe ff7f 	bl	800fb28 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8010c2a:	1d3a      	adds	r2, r7, #4
 8010c2c:	f107 0310 	add.w	r3, r7, #16
 8010c30:	4611      	mov	r1, r2
 8010c32:	4618      	mov	r0, r3
 8010c34:	f001 f894 	bl	8011d60 <xTaskCheckForTimeOut>
 8010c38:	4603      	mov	r3, r0
 8010c3a:	2b00      	cmp	r3, #0
 8010c3c:	d123      	bne.n	8010c86 <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8010c3e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010c40:	f000 fad5 	bl	80111ee <prvIsQueueEmpty>
 8010c44:	4603      	mov	r3, r0
 8010c46:	2b00      	cmp	r3, #0
 8010c48:	d017      	beq.n	8010c7a <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8010c4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010c4c:	3324      	adds	r3, #36	; 0x24
 8010c4e:	687a      	ldr	r2, [r7, #4]
 8010c50:	4611      	mov	r1, r2
 8010c52:	4618      	mov	r0, r3
 8010c54:	f000 ffbc 	bl	8011bd0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8010c58:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010c5a:	f000 fa76 	bl	801114a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8010c5e:	f000 fdf7 	bl	8011850 <xTaskResumeAll>
 8010c62:	4603      	mov	r3, r0
 8010c64:	2b00      	cmp	r3, #0
 8010c66:	d189      	bne.n	8010b7c <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 8010c68:	4b0f      	ldr	r3, [pc, #60]	; (8010ca8 <xQueueReceive+0x1b4>)
 8010c6a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010c6e:	601a      	str	r2, [r3, #0]
 8010c70:	f3bf 8f4f 	dsb	sy
 8010c74:	f3bf 8f6f 	isb	sy
 8010c78:	e780      	b.n	8010b7c <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8010c7a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010c7c:	f000 fa65 	bl	801114a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8010c80:	f000 fde6 	bl	8011850 <xTaskResumeAll>
 8010c84:	e77a      	b.n	8010b7c <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8010c86:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010c88:	f000 fa5f 	bl	801114a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8010c8c:	f000 fde0 	bl	8011850 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8010c90:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010c92:	f000 faac 	bl	80111ee <prvIsQueueEmpty>
 8010c96:	4603      	mov	r3, r0
 8010c98:	2b00      	cmp	r3, #0
 8010c9a:	f43f af6f 	beq.w	8010b7c <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8010c9e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8010ca0:	4618      	mov	r0, r3
 8010ca2:	3730      	adds	r7, #48	; 0x30
 8010ca4:	46bd      	mov	sp, r7
 8010ca6:	bd80      	pop	{r7, pc}
 8010ca8:	e000ed04 	.word	0xe000ed04

08010cac <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8010cac:	b580      	push	{r7, lr}
 8010cae:	b08e      	sub	sp, #56	; 0x38
 8010cb0:	af00      	add	r7, sp, #0
 8010cb2:	6078      	str	r0, [r7, #4]
 8010cb4:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8010cb6:	2300      	movs	r3, #0
 8010cb8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8010cba:	687b      	ldr	r3, [r7, #4]
 8010cbc:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8010cbe:	2300      	movs	r3, #0
 8010cc0:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8010cc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010cc4:	2b00      	cmp	r3, #0
 8010cc6:	d109      	bne.n	8010cdc <xQueueSemaphoreTake+0x30>
 8010cc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010ccc:	f383 8811 	msr	BASEPRI, r3
 8010cd0:	f3bf 8f6f 	isb	sy
 8010cd4:	f3bf 8f4f 	dsb	sy
 8010cd8:	623b      	str	r3, [r7, #32]
 8010cda:	e7fe      	b.n	8010cda <xQueueSemaphoreTake+0x2e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8010cdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010cde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010ce0:	2b00      	cmp	r3, #0
 8010ce2:	d009      	beq.n	8010cf8 <xQueueSemaphoreTake+0x4c>
 8010ce4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010ce8:	f383 8811 	msr	BASEPRI, r3
 8010cec:	f3bf 8f6f 	isb	sy
 8010cf0:	f3bf 8f4f 	dsb	sy
 8010cf4:	61fb      	str	r3, [r7, #28]
 8010cf6:	e7fe      	b.n	8010cf6 <xQueueSemaphoreTake+0x4a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8010cf8:	f001 f9a6 	bl	8012048 <xTaskGetSchedulerState>
 8010cfc:	4603      	mov	r3, r0
 8010cfe:	2b00      	cmp	r3, #0
 8010d00:	d102      	bne.n	8010d08 <xQueueSemaphoreTake+0x5c>
 8010d02:	683b      	ldr	r3, [r7, #0]
 8010d04:	2b00      	cmp	r3, #0
 8010d06:	d101      	bne.n	8010d0c <xQueueSemaphoreTake+0x60>
 8010d08:	2301      	movs	r3, #1
 8010d0a:	e000      	b.n	8010d0e <xQueueSemaphoreTake+0x62>
 8010d0c:	2300      	movs	r3, #0
 8010d0e:	2b00      	cmp	r3, #0
 8010d10:	d109      	bne.n	8010d26 <xQueueSemaphoreTake+0x7a>
 8010d12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010d16:	f383 8811 	msr	BASEPRI, r3
 8010d1a:	f3bf 8f6f 	isb	sy
 8010d1e:	f3bf 8f4f 	dsb	sy
 8010d22:	61bb      	str	r3, [r7, #24]
 8010d24:	e7fe      	b.n	8010d24 <xQueueSemaphoreTake+0x78>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8010d26:	f7fe fed1 	bl	800facc <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8010d2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010d2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010d2e:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8010d30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010d32:	2b00      	cmp	r3, #0
 8010d34:	d024      	beq.n	8010d80 <xQueueSemaphoreTake+0xd4>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8010d36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010d38:	1e5a      	subs	r2, r3, #1
 8010d3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010d3c:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8010d3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010d40:	681b      	ldr	r3, [r3, #0]
 8010d42:	2b00      	cmp	r3, #0
 8010d44:	d104      	bne.n	8010d50 <xQueueSemaphoreTake+0xa4>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8010d46:	f001 faf1 	bl	801232c <pvTaskIncrementMutexHeldCount>
 8010d4a:	4602      	mov	r2, r0
 8010d4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010d4e:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8010d50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010d52:	691b      	ldr	r3, [r3, #16]
 8010d54:	2b00      	cmp	r3, #0
 8010d56:	d00f      	beq.n	8010d78 <xQueueSemaphoreTake+0xcc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8010d58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010d5a:	3310      	adds	r3, #16
 8010d5c:	4618      	mov	r0, r3
 8010d5e:	f000 ff85 	bl	8011c6c <xTaskRemoveFromEventList>
 8010d62:	4603      	mov	r3, r0
 8010d64:	2b00      	cmp	r3, #0
 8010d66:	d007      	beq.n	8010d78 <xQueueSemaphoreTake+0xcc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8010d68:	4b53      	ldr	r3, [pc, #332]	; (8010eb8 <xQueueSemaphoreTake+0x20c>)
 8010d6a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010d6e:	601a      	str	r2, [r3, #0]
 8010d70:	f3bf 8f4f 	dsb	sy
 8010d74:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8010d78:	f7fe fed6 	bl	800fb28 <vPortExitCritical>
				return pdPASS;
 8010d7c:	2301      	movs	r3, #1
 8010d7e:	e096      	b.n	8010eae <xQueueSemaphoreTake+0x202>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8010d80:	683b      	ldr	r3, [r7, #0]
 8010d82:	2b00      	cmp	r3, #0
 8010d84:	d110      	bne.n	8010da8 <xQueueSemaphoreTake+0xfc>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8010d86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010d88:	2b00      	cmp	r3, #0
 8010d8a:	d009      	beq.n	8010da0 <xQueueSemaphoreTake+0xf4>
 8010d8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010d90:	f383 8811 	msr	BASEPRI, r3
 8010d94:	f3bf 8f6f 	isb	sy
 8010d98:	f3bf 8f4f 	dsb	sy
 8010d9c:	617b      	str	r3, [r7, #20]
 8010d9e:	e7fe      	b.n	8010d9e <xQueueSemaphoreTake+0xf2>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8010da0:	f7fe fec2 	bl	800fb28 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8010da4:	2300      	movs	r3, #0
 8010da6:	e082      	b.n	8010eae <xQueueSemaphoreTake+0x202>
				}
				else if( xEntryTimeSet == pdFALSE )
 8010da8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010daa:	2b00      	cmp	r3, #0
 8010dac:	d106      	bne.n	8010dbc <xQueueSemaphoreTake+0x110>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8010dae:	f107 030c 	add.w	r3, r7, #12
 8010db2:	4618      	mov	r0, r3
 8010db4:	f000 ffbe 	bl	8011d34 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8010db8:	2301      	movs	r3, #1
 8010dba:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8010dbc:	f7fe feb4 	bl	800fb28 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8010dc0:	f000 fd00 	bl	80117c4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8010dc4:	f7fe fe82 	bl	800facc <vPortEnterCritical>
 8010dc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010dca:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8010dce:	b25b      	sxtb	r3, r3
 8010dd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010dd4:	d103      	bne.n	8010dde <xQueueSemaphoreTake+0x132>
 8010dd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010dd8:	2200      	movs	r2, #0
 8010dda:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8010dde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010de0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8010de4:	b25b      	sxtb	r3, r3
 8010de6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010dea:	d103      	bne.n	8010df4 <xQueueSemaphoreTake+0x148>
 8010dec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010dee:	2200      	movs	r2, #0
 8010df0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8010df4:	f7fe fe98 	bl	800fb28 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8010df8:	463a      	mov	r2, r7
 8010dfa:	f107 030c 	add.w	r3, r7, #12
 8010dfe:	4611      	mov	r1, r2
 8010e00:	4618      	mov	r0, r3
 8010e02:	f000 ffad 	bl	8011d60 <xTaskCheckForTimeOut>
 8010e06:	4603      	mov	r3, r0
 8010e08:	2b00      	cmp	r3, #0
 8010e0a:	d132      	bne.n	8010e72 <xQueueSemaphoreTake+0x1c6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8010e0c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8010e0e:	f000 f9ee 	bl	80111ee <prvIsQueueEmpty>
 8010e12:	4603      	mov	r3, r0
 8010e14:	2b00      	cmp	r3, #0
 8010e16:	d026      	beq.n	8010e66 <xQueueSemaphoreTake+0x1ba>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8010e18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010e1a:	681b      	ldr	r3, [r3, #0]
 8010e1c:	2b00      	cmp	r3, #0
 8010e1e:	d109      	bne.n	8010e34 <xQueueSemaphoreTake+0x188>
					{
						taskENTER_CRITICAL();
 8010e20:	f7fe fe54 	bl	800facc <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8010e24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010e26:	689b      	ldr	r3, [r3, #8]
 8010e28:	4618      	mov	r0, r3
 8010e2a:	f001 f92b 	bl	8012084 <xTaskPriorityInherit>
 8010e2e:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8010e30:	f7fe fe7a 	bl	800fb28 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8010e34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010e36:	3324      	adds	r3, #36	; 0x24
 8010e38:	683a      	ldr	r2, [r7, #0]
 8010e3a:	4611      	mov	r1, r2
 8010e3c:	4618      	mov	r0, r3
 8010e3e:	f000 fec7 	bl	8011bd0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8010e42:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8010e44:	f000 f981 	bl	801114a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8010e48:	f000 fd02 	bl	8011850 <xTaskResumeAll>
 8010e4c:	4603      	mov	r3, r0
 8010e4e:	2b00      	cmp	r3, #0
 8010e50:	f47f af69 	bne.w	8010d26 <xQueueSemaphoreTake+0x7a>
				{
					portYIELD_WITHIN_API();
 8010e54:	4b18      	ldr	r3, [pc, #96]	; (8010eb8 <xQueueSemaphoreTake+0x20c>)
 8010e56:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010e5a:	601a      	str	r2, [r3, #0]
 8010e5c:	f3bf 8f4f 	dsb	sy
 8010e60:	f3bf 8f6f 	isb	sy
 8010e64:	e75f      	b.n	8010d26 <xQueueSemaphoreTake+0x7a>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8010e66:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8010e68:	f000 f96f 	bl	801114a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8010e6c:	f000 fcf0 	bl	8011850 <xTaskResumeAll>
 8010e70:	e759      	b.n	8010d26 <xQueueSemaphoreTake+0x7a>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8010e72:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8010e74:	f000 f969 	bl	801114a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8010e78:	f000 fcea 	bl	8011850 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8010e7c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8010e7e:	f000 f9b6 	bl	80111ee <prvIsQueueEmpty>
 8010e82:	4603      	mov	r3, r0
 8010e84:	2b00      	cmp	r3, #0
 8010e86:	f43f af4e 	beq.w	8010d26 <xQueueSemaphoreTake+0x7a>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8010e8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010e8c:	2b00      	cmp	r3, #0
 8010e8e:	d00d      	beq.n	8010eac <xQueueSemaphoreTake+0x200>
					{
						taskENTER_CRITICAL();
 8010e90:	f7fe fe1c 	bl	800facc <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8010e94:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8010e96:	f000 f8b0 	bl	8010ffa <prvGetDisinheritPriorityAfterTimeout>
 8010e9a:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8010e9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010e9e:	689b      	ldr	r3, [r3, #8]
 8010ea0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8010ea2:	4618      	mov	r0, r3
 8010ea4:	f001 f9c2 	bl	801222c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8010ea8:	f7fe fe3e 	bl	800fb28 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8010eac:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8010eae:	4618      	mov	r0, r3
 8010eb0:	3738      	adds	r7, #56	; 0x38
 8010eb2:	46bd      	mov	sp, r7
 8010eb4:	bd80      	pop	{r7, pc}
 8010eb6:	bf00      	nop
 8010eb8:	e000ed04 	.word	0xe000ed04

08010ebc <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8010ebc:	b580      	push	{r7, lr}
 8010ebe:	b08e      	sub	sp, #56	; 0x38
 8010ec0:	af00      	add	r7, sp, #0
 8010ec2:	60f8      	str	r0, [r7, #12]
 8010ec4:	60b9      	str	r1, [r7, #8]
 8010ec6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8010ec8:	68fb      	ldr	r3, [r7, #12]
 8010eca:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8010ecc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010ece:	2b00      	cmp	r3, #0
 8010ed0:	d109      	bne.n	8010ee6 <xQueueReceiveFromISR+0x2a>
 8010ed2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010ed6:	f383 8811 	msr	BASEPRI, r3
 8010eda:	f3bf 8f6f 	isb	sy
 8010ede:	f3bf 8f4f 	dsb	sy
 8010ee2:	623b      	str	r3, [r7, #32]
 8010ee4:	e7fe      	b.n	8010ee4 <xQueueReceiveFromISR+0x28>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8010ee6:	68bb      	ldr	r3, [r7, #8]
 8010ee8:	2b00      	cmp	r3, #0
 8010eea:	d103      	bne.n	8010ef4 <xQueueReceiveFromISR+0x38>
 8010eec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010eee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010ef0:	2b00      	cmp	r3, #0
 8010ef2:	d101      	bne.n	8010ef8 <xQueueReceiveFromISR+0x3c>
 8010ef4:	2301      	movs	r3, #1
 8010ef6:	e000      	b.n	8010efa <xQueueReceiveFromISR+0x3e>
 8010ef8:	2300      	movs	r3, #0
 8010efa:	2b00      	cmp	r3, #0
 8010efc:	d109      	bne.n	8010f12 <xQueueReceiveFromISR+0x56>
 8010efe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010f02:	f383 8811 	msr	BASEPRI, r3
 8010f06:	f3bf 8f6f 	isb	sy
 8010f0a:	f3bf 8f4f 	dsb	sy
 8010f0e:	61fb      	str	r3, [r7, #28]
 8010f10:	e7fe      	b.n	8010f10 <xQueueReceiveFromISR+0x54>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8010f12:	f7fe feb7 	bl	800fc84 <vPortValidateInterruptPriority>
	__asm volatile
 8010f16:	f3ef 8211 	mrs	r2, BASEPRI
 8010f1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010f1e:	f383 8811 	msr	BASEPRI, r3
 8010f22:	f3bf 8f6f 	isb	sy
 8010f26:	f3bf 8f4f 	dsb	sy
 8010f2a:	61ba      	str	r2, [r7, #24]
 8010f2c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8010f2e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8010f30:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8010f32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010f34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010f36:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8010f38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010f3a:	2b00      	cmp	r3, #0
 8010f3c:	d02f      	beq.n	8010f9e <xQueueReceiveFromISR+0xe2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8010f3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010f40:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8010f44:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8010f48:	68b9      	ldr	r1, [r7, #8]
 8010f4a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010f4c:	f000 f8d7 	bl	80110fe <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8010f50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010f52:	1e5a      	subs	r2, r3, #1
 8010f54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010f56:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8010f58:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8010f5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010f60:	d112      	bne.n	8010f88 <xQueueReceiveFromISR+0xcc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8010f62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010f64:	691b      	ldr	r3, [r3, #16]
 8010f66:	2b00      	cmp	r3, #0
 8010f68:	d016      	beq.n	8010f98 <xQueueReceiveFromISR+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8010f6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010f6c:	3310      	adds	r3, #16
 8010f6e:	4618      	mov	r0, r3
 8010f70:	f000 fe7c 	bl	8011c6c <xTaskRemoveFromEventList>
 8010f74:	4603      	mov	r3, r0
 8010f76:	2b00      	cmp	r3, #0
 8010f78:	d00e      	beq.n	8010f98 <xQueueReceiveFromISR+0xdc>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8010f7a:	687b      	ldr	r3, [r7, #4]
 8010f7c:	2b00      	cmp	r3, #0
 8010f7e:	d00b      	beq.n	8010f98 <xQueueReceiveFromISR+0xdc>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8010f80:	687b      	ldr	r3, [r7, #4]
 8010f82:	2201      	movs	r2, #1
 8010f84:	601a      	str	r2, [r3, #0]
 8010f86:	e007      	b.n	8010f98 <xQueueReceiveFromISR+0xdc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8010f88:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010f8c:	3301      	adds	r3, #1
 8010f8e:	b2db      	uxtb	r3, r3
 8010f90:	b25a      	sxtb	r2, r3
 8010f92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010f94:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8010f98:	2301      	movs	r3, #1
 8010f9a:	637b      	str	r3, [r7, #52]	; 0x34
 8010f9c:	e001      	b.n	8010fa2 <xQueueReceiveFromISR+0xe6>
		}
		else
		{
			xReturn = pdFAIL;
 8010f9e:	2300      	movs	r3, #0
 8010fa0:	637b      	str	r3, [r7, #52]	; 0x34
 8010fa2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010fa4:	613b      	str	r3, [r7, #16]
	__asm volatile
 8010fa6:	693b      	ldr	r3, [r7, #16]
 8010fa8:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8010fac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8010fae:	4618      	mov	r0, r3
 8010fb0:	3738      	adds	r7, #56	; 0x38
 8010fb2:	46bd      	mov	sp, r7
 8010fb4:	bd80      	pop	{r7, pc}

08010fb6 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8010fb6:	b580      	push	{r7, lr}
 8010fb8:	b084      	sub	sp, #16
 8010fba:	af00      	add	r7, sp, #0
 8010fbc:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8010fbe:	687b      	ldr	r3, [r7, #4]
 8010fc0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8010fc2:	68fb      	ldr	r3, [r7, #12]
 8010fc4:	2b00      	cmp	r3, #0
 8010fc6:	d109      	bne.n	8010fdc <vQueueDelete+0x26>
	__asm volatile
 8010fc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010fcc:	f383 8811 	msr	BASEPRI, r3
 8010fd0:	f3bf 8f6f 	isb	sy
 8010fd4:	f3bf 8f4f 	dsb	sy
 8010fd8:	60bb      	str	r3, [r7, #8]
 8010fda:	e7fe      	b.n	8010fda <vQueueDelete+0x24>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8010fdc:	68f8      	ldr	r0, [r7, #12]
 8010fde:	f000 f95d 	bl	801129c <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8010fe2:	68fb      	ldr	r3, [r7, #12]
 8010fe4:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8010fe8:	2b00      	cmp	r3, #0
 8010fea:	d102      	bne.n	8010ff2 <vQueueDelete+0x3c>
		{
			vPortFree( pxQueue );
 8010fec:	68f8      	ldr	r0, [r7, #12]
 8010fee:	f7fe ff49 	bl	800fe84 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8010ff2:	bf00      	nop
 8010ff4:	3710      	adds	r7, #16
 8010ff6:	46bd      	mov	sp, r7
 8010ff8:	bd80      	pop	{r7, pc}

08010ffa <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8010ffa:	b480      	push	{r7}
 8010ffc:	b085      	sub	sp, #20
 8010ffe:	af00      	add	r7, sp, #0
 8011000:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8011002:	687b      	ldr	r3, [r7, #4]
 8011004:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011006:	2b00      	cmp	r3, #0
 8011008:	d006      	beq.n	8011018 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 801100a:	687b      	ldr	r3, [r7, #4]
 801100c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801100e:	681b      	ldr	r3, [r3, #0]
 8011010:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8011014:	60fb      	str	r3, [r7, #12]
 8011016:	e001      	b.n	801101c <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8011018:	2300      	movs	r3, #0
 801101a:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 801101c:	68fb      	ldr	r3, [r7, #12]
	}
 801101e:	4618      	mov	r0, r3
 8011020:	3714      	adds	r7, #20
 8011022:	46bd      	mov	sp, r7
 8011024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011028:	4770      	bx	lr

0801102a <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 801102a:	b580      	push	{r7, lr}
 801102c:	b086      	sub	sp, #24
 801102e:	af00      	add	r7, sp, #0
 8011030:	60f8      	str	r0, [r7, #12]
 8011032:	60b9      	str	r1, [r7, #8]
 8011034:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8011036:	2300      	movs	r3, #0
 8011038:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801103a:	68fb      	ldr	r3, [r7, #12]
 801103c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801103e:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8011040:	68fb      	ldr	r3, [r7, #12]
 8011042:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011044:	2b00      	cmp	r3, #0
 8011046:	d10d      	bne.n	8011064 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8011048:	68fb      	ldr	r3, [r7, #12]
 801104a:	681b      	ldr	r3, [r3, #0]
 801104c:	2b00      	cmp	r3, #0
 801104e:	d14d      	bne.n	80110ec <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8011050:	68fb      	ldr	r3, [r7, #12]
 8011052:	689b      	ldr	r3, [r3, #8]
 8011054:	4618      	mov	r0, r3
 8011056:	f001 f87d 	bl	8012154 <xTaskPriorityDisinherit>
 801105a:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 801105c:	68fb      	ldr	r3, [r7, #12]
 801105e:	2200      	movs	r2, #0
 8011060:	609a      	str	r2, [r3, #8]
 8011062:	e043      	b.n	80110ec <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8011064:	687b      	ldr	r3, [r7, #4]
 8011066:	2b00      	cmp	r3, #0
 8011068:	d119      	bne.n	801109e <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 801106a:	68fb      	ldr	r3, [r7, #12]
 801106c:	6858      	ldr	r0, [r3, #4]
 801106e:	68fb      	ldr	r3, [r7, #12]
 8011070:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011072:	461a      	mov	r2, r3
 8011074:	68b9      	ldr	r1, [r7, #8]
 8011076:	f001 ffa9 	bl	8012fcc <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 801107a:	68fb      	ldr	r3, [r7, #12]
 801107c:	685a      	ldr	r2, [r3, #4]
 801107e:	68fb      	ldr	r3, [r7, #12]
 8011080:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011082:	441a      	add	r2, r3
 8011084:	68fb      	ldr	r3, [r7, #12]
 8011086:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8011088:	68fb      	ldr	r3, [r7, #12]
 801108a:	685a      	ldr	r2, [r3, #4]
 801108c:	68fb      	ldr	r3, [r7, #12]
 801108e:	689b      	ldr	r3, [r3, #8]
 8011090:	429a      	cmp	r2, r3
 8011092:	d32b      	bcc.n	80110ec <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8011094:	68fb      	ldr	r3, [r7, #12]
 8011096:	681a      	ldr	r2, [r3, #0]
 8011098:	68fb      	ldr	r3, [r7, #12]
 801109a:	605a      	str	r2, [r3, #4]
 801109c:	e026      	b.n	80110ec <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 801109e:	68fb      	ldr	r3, [r7, #12]
 80110a0:	68d8      	ldr	r0, [r3, #12]
 80110a2:	68fb      	ldr	r3, [r7, #12]
 80110a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80110a6:	461a      	mov	r2, r3
 80110a8:	68b9      	ldr	r1, [r7, #8]
 80110aa:	f001 ff8f 	bl	8012fcc <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80110ae:	68fb      	ldr	r3, [r7, #12]
 80110b0:	68da      	ldr	r2, [r3, #12]
 80110b2:	68fb      	ldr	r3, [r7, #12]
 80110b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80110b6:	425b      	negs	r3, r3
 80110b8:	441a      	add	r2, r3
 80110ba:	68fb      	ldr	r3, [r7, #12]
 80110bc:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80110be:	68fb      	ldr	r3, [r7, #12]
 80110c0:	68da      	ldr	r2, [r3, #12]
 80110c2:	68fb      	ldr	r3, [r7, #12]
 80110c4:	681b      	ldr	r3, [r3, #0]
 80110c6:	429a      	cmp	r2, r3
 80110c8:	d207      	bcs.n	80110da <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80110ca:	68fb      	ldr	r3, [r7, #12]
 80110cc:	689a      	ldr	r2, [r3, #8]
 80110ce:	68fb      	ldr	r3, [r7, #12]
 80110d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80110d2:	425b      	negs	r3, r3
 80110d4:	441a      	add	r2, r3
 80110d6:	68fb      	ldr	r3, [r7, #12]
 80110d8:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80110da:	687b      	ldr	r3, [r7, #4]
 80110dc:	2b02      	cmp	r3, #2
 80110de:	d105      	bne.n	80110ec <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80110e0:	693b      	ldr	r3, [r7, #16]
 80110e2:	2b00      	cmp	r3, #0
 80110e4:	d002      	beq.n	80110ec <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80110e6:	693b      	ldr	r3, [r7, #16]
 80110e8:	3b01      	subs	r3, #1
 80110ea:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80110ec:	693b      	ldr	r3, [r7, #16]
 80110ee:	1c5a      	adds	r2, r3, #1
 80110f0:	68fb      	ldr	r3, [r7, #12]
 80110f2:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80110f4:	697b      	ldr	r3, [r7, #20]
}
 80110f6:	4618      	mov	r0, r3
 80110f8:	3718      	adds	r7, #24
 80110fa:	46bd      	mov	sp, r7
 80110fc:	bd80      	pop	{r7, pc}

080110fe <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80110fe:	b580      	push	{r7, lr}
 8011100:	b082      	sub	sp, #8
 8011102:	af00      	add	r7, sp, #0
 8011104:	6078      	str	r0, [r7, #4]
 8011106:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8011108:	687b      	ldr	r3, [r7, #4]
 801110a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801110c:	2b00      	cmp	r3, #0
 801110e:	d018      	beq.n	8011142 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8011110:	687b      	ldr	r3, [r7, #4]
 8011112:	68da      	ldr	r2, [r3, #12]
 8011114:	687b      	ldr	r3, [r7, #4]
 8011116:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011118:	441a      	add	r2, r3
 801111a:	687b      	ldr	r3, [r7, #4]
 801111c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 801111e:	687b      	ldr	r3, [r7, #4]
 8011120:	68da      	ldr	r2, [r3, #12]
 8011122:	687b      	ldr	r3, [r7, #4]
 8011124:	689b      	ldr	r3, [r3, #8]
 8011126:	429a      	cmp	r2, r3
 8011128:	d303      	bcc.n	8011132 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 801112a:	687b      	ldr	r3, [r7, #4]
 801112c:	681a      	ldr	r2, [r3, #0]
 801112e:	687b      	ldr	r3, [r7, #4]
 8011130:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8011132:	687b      	ldr	r3, [r7, #4]
 8011134:	68d9      	ldr	r1, [r3, #12]
 8011136:	687b      	ldr	r3, [r7, #4]
 8011138:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801113a:	461a      	mov	r2, r3
 801113c:	6838      	ldr	r0, [r7, #0]
 801113e:	f001 ff45 	bl	8012fcc <memcpy>
	}
}
 8011142:	bf00      	nop
 8011144:	3708      	adds	r7, #8
 8011146:	46bd      	mov	sp, r7
 8011148:	bd80      	pop	{r7, pc}

0801114a <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 801114a:	b580      	push	{r7, lr}
 801114c:	b084      	sub	sp, #16
 801114e:	af00      	add	r7, sp, #0
 8011150:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8011152:	f7fe fcbb 	bl	800facc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8011156:	687b      	ldr	r3, [r7, #4]
 8011158:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801115c:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 801115e:	e011      	b.n	8011184 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8011160:	687b      	ldr	r3, [r7, #4]
 8011162:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011164:	2b00      	cmp	r3, #0
 8011166:	d012      	beq.n	801118e <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8011168:	687b      	ldr	r3, [r7, #4]
 801116a:	3324      	adds	r3, #36	; 0x24
 801116c:	4618      	mov	r0, r3
 801116e:	f000 fd7d 	bl	8011c6c <xTaskRemoveFromEventList>
 8011172:	4603      	mov	r3, r0
 8011174:	2b00      	cmp	r3, #0
 8011176:	d001      	beq.n	801117c <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8011178:	f000 fe52 	bl	8011e20 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 801117c:	7bfb      	ldrb	r3, [r7, #15]
 801117e:	3b01      	subs	r3, #1
 8011180:	b2db      	uxtb	r3, r3
 8011182:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8011184:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011188:	2b00      	cmp	r3, #0
 801118a:	dce9      	bgt.n	8011160 <prvUnlockQueue+0x16>
 801118c:	e000      	b.n	8011190 <prvUnlockQueue+0x46>
					break;
 801118e:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8011190:	687b      	ldr	r3, [r7, #4]
 8011192:	22ff      	movs	r2, #255	; 0xff
 8011194:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8011198:	f7fe fcc6 	bl	800fb28 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 801119c:	f7fe fc96 	bl	800facc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80111a0:	687b      	ldr	r3, [r7, #4]
 80111a2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80111a6:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80111a8:	e011      	b.n	80111ce <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80111aa:	687b      	ldr	r3, [r7, #4]
 80111ac:	691b      	ldr	r3, [r3, #16]
 80111ae:	2b00      	cmp	r3, #0
 80111b0:	d012      	beq.n	80111d8 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80111b2:	687b      	ldr	r3, [r7, #4]
 80111b4:	3310      	adds	r3, #16
 80111b6:	4618      	mov	r0, r3
 80111b8:	f000 fd58 	bl	8011c6c <xTaskRemoveFromEventList>
 80111bc:	4603      	mov	r3, r0
 80111be:	2b00      	cmp	r3, #0
 80111c0:	d001      	beq.n	80111c6 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80111c2:	f000 fe2d 	bl	8011e20 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80111c6:	7bbb      	ldrb	r3, [r7, #14]
 80111c8:	3b01      	subs	r3, #1
 80111ca:	b2db      	uxtb	r3, r3
 80111cc:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80111ce:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80111d2:	2b00      	cmp	r3, #0
 80111d4:	dce9      	bgt.n	80111aa <prvUnlockQueue+0x60>
 80111d6:	e000      	b.n	80111da <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80111d8:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80111da:	687b      	ldr	r3, [r7, #4]
 80111dc:	22ff      	movs	r2, #255	; 0xff
 80111de:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80111e2:	f7fe fca1 	bl	800fb28 <vPortExitCritical>
}
 80111e6:	bf00      	nop
 80111e8:	3710      	adds	r7, #16
 80111ea:	46bd      	mov	sp, r7
 80111ec:	bd80      	pop	{r7, pc}

080111ee <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80111ee:	b580      	push	{r7, lr}
 80111f0:	b084      	sub	sp, #16
 80111f2:	af00      	add	r7, sp, #0
 80111f4:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80111f6:	f7fe fc69 	bl	800facc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80111fa:	687b      	ldr	r3, [r7, #4]
 80111fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80111fe:	2b00      	cmp	r3, #0
 8011200:	d102      	bne.n	8011208 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8011202:	2301      	movs	r3, #1
 8011204:	60fb      	str	r3, [r7, #12]
 8011206:	e001      	b.n	801120c <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8011208:	2300      	movs	r3, #0
 801120a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 801120c:	f7fe fc8c 	bl	800fb28 <vPortExitCritical>

	return xReturn;
 8011210:	68fb      	ldr	r3, [r7, #12]
}
 8011212:	4618      	mov	r0, r3
 8011214:	3710      	adds	r7, #16
 8011216:	46bd      	mov	sp, r7
 8011218:	bd80      	pop	{r7, pc}

0801121a <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 801121a:	b580      	push	{r7, lr}
 801121c:	b084      	sub	sp, #16
 801121e:	af00      	add	r7, sp, #0
 8011220:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8011222:	f7fe fc53 	bl	800facc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8011226:	687b      	ldr	r3, [r7, #4]
 8011228:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801122a:	687b      	ldr	r3, [r7, #4]
 801122c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801122e:	429a      	cmp	r2, r3
 8011230:	d102      	bne.n	8011238 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8011232:	2301      	movs	r3, #1
 8011234:	60fb      	str	r3, [r7, #12]
 8011236:	e001      	b.n	801123c <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8011238:	2300      	movs	r3, #0
 801123a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 801123c:	f7fe fc74 	bl	800fb28 <vPortExitCritical>

	return xReturn;
 8011240:	68fb      	ldr	r3, [r7, #12]
}
 8011242:	4618      	mov	r0, r3
 8011244:	3710      	adds	r7, #16
 8011246:	46bd      	mov	sp, r7
 8011248:	bd80      	pop	{r7, pc}
	...

0801124c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 801124c:	b480      	push	{r7}
 801124e:	b085      	sub	sp, #20
 8011250:	af00      	add	r7, sp, #0
 8011252:	6078      	str	r0, [r7, #4]
 8011254:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8011256:	2300      	movs	r3, #0
 8011258:	60fb      	str	r3, [r7, #12]
 801125a:	e014      	b.n	8011286 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 801125c:	4a0e      	ldr	r2, [pc, #56]	; (8011298 <vQueueAddToRegistry+0x4c>)
 801125e:	68fb      	ldr	r3, [r7, #12]
 8011260:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8011264:	2b00      	cmp	r3, #0
 8011266:	d10b      	bne.n	8011280 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8011268:	490b      	ldr	r1, [pc, #44]	; (8011298 <vQueueAddToRegistry+0x4c>)
 801126a:	68fb      	ldr	r3, [r7, #12]
 801126c:	683a      	ldr	r2, [r7, #0]
 801126e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8011272:	4a09      	ldr	r2, [pc, #36]	; (8011298 <vQueueAddToRegistry+0x4c>)
 8011274:	68fb      	ldr	r3, [r7, #12]
 8011276:	00db      	lsls	r3, r3, #3
 8011278:	4413      	add	r3, r2
 801127a:	687a      	ldr	r2, [r7, #4]
 801127c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 801127e:	e005      	b.n	801128c <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8011280:	68fb      	ldr	r3, [r7, #12]
 8011282:	3301      	adds	r3, #1
 8011284:	60fb      	str	r3, [r7, #12]
 8011286:	68fb      	ldr	r3, [r7, #12]
 8011288:	2b07      	cmp	r3, #7
 801128a:	d9e7      	bls.n	801125c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 801128c:	bf00      	nop
 801128e:	3714      	adds	r7, #20
 8011290:	46bd      	mov	sp, r7
 8011292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011296:	4770      	bx	lr
 8011298:	20005488 	.word	0x20005488

0801129c <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 801129c:	b480      	push	{r7}
 801129e:	b085      	sub	sp, #20
 80112a0:	af00      	add	r7, sp, #0
 80112a2:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80112a4:	2300      	movs	r3, #0
 80112a6:	60fb      	str	r3, [r7, #12]
 80112a8:	e016      	b.n	80112d8 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 80112aa:	4a10      	ldr	r2, [pc, #64]	; (80112ec <vQueueUnregisterQueue+0x50>)
 80112ac:	68fb      	ldr	r3, [r7, #12]
 80112ae:	00db      	lsls	r3, r3, #3
 80112b0:	4413      	add	r3, r2
 80112b2:	685b      	ldr	r3, [r3, #4]
 80112b4:	687a      	ldr	r2, [r7, #4]
 80112b6:	429a      	cmp	r2, r3
 80112b8:	d10b      	bne.n	80112d2 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 80112ba:	4a0c      	ldr	r2, [pc, #48]	; (80112ec <vQueueUnregisterQueue+0x50>)
 80112bc:	68fb      	ldr	r3, [r7, #12]
 80112be:	2100      	movs	r1, #0
 80112c0:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 80112c4:	4a09      	ldr	r2, [pc, #36]	; (80112ec <vQueueUnregisterQueue+0x50>)
 80112c6:	68fb      	ldr	r3, [r7, #12]
 80112c8:	00db      	lsls	r3, r3, #3
 80112ca:	4413      	add	r3, r2
 80112cc:	2200      	movs	r2, #0
 80112ce:	605a      	str	r2, [r3, #4]
				break;
 80112d0:	e005      	b.n	80112de <vQueueUnregisterQueue+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80112d2:	68fb      	ldr	r3, [r7, #12]
 80112d4:	3301      	adds	r3, #1
 80112d6:	60fb      	str	r3, [r7, #12]
 80112d8:	68fb      	ldr	r3, [r7, #12]
 80112da:	2b07      	cmp	r3, #7
 80112dc:	d9e5      	bls.n	80112aa <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 80112de:	bf00      	nop
 80112e0:	3714      	adds	r7, #20
 80112e2:	46bd      	mov	sp, r7
 80112e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112e8:	4770      	bx	lr
 80112ea:	bf00      	nop
 80112ec:	20005488 	.word	0x20005488

080112f0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80112f0:	b580      	push	{r7, lr}
 80112f2:	b086      	sub	sp, #24
 80112f4:	af00      	add	r7, sp, #0
 80112f6:	60f8      	str	r0, [r7, #12]
 80112f8:	60b9      	str	r1, [r7, #8]
 80112fa:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80112fc:	68fb      	ldr	r3, [r7, #12]
 80112fe:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8011300:	f7fe fbe4 	bl	800facc <vPortEnterCritical>
 8011304:	697b      	ldr	r3, [r7, #20]
 8011306:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801130a:	b25b      	sxtb	r3, r3
 801130c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011310:	d103      	bne.n	801131a <vQueueWaitForMessageRestricted+0x2a>
 8011312:	697b      	ldr	r3, [r7, #20]
 8011314:	2200      	movs	r2, #0
 8011316:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801131a:	697b      	ldr	r3, [r7, #20]
 801131c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8011320:	b25b      	sxtb	r3, r3
 8011322:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011326:	d103      	bne.n	8011330 <vQueueWaitForMessageRestricted+0x40>
 8011328:	697b      	ldr	r3, [r7, #20]
 801132a:	2200      	movs	r2, #0
 801132c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8011330:	f7fe fbfa 	bl	800fb28 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8011334:	697b      	ldr	r3, [r7, #20]
 8011336:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011338:	2b00      	cmp	r3, #0
 801133a:	d106      	bne.n	801134a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 801133c:	697b      	ldr	r3, [r7, #20]
 801133e:	3324      	adds	r3, #36	; 0x24
 8011340:	687a      	ldr	r2, [r7, #4]
 8011342:	68b9      	ldr	r1, [r7, #8]
 8011344:	4618      	mov	r0, r3
 8011346:	f000 fc67 	bl	8011c18 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 801134a:	6978      	ldr	r0, [r7, #20]
 801134c:	f7ff fefd 	bl	801114a <prvUnlockQueue>
	}
 8011350:	bf00      	nop
 8011352:	3718      	adds	r7, #24
 8011354:	46bd      	mov	sp, r7
 8011356:	bd80      	pop	{r7, pc}

08011358 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8011358:	b580      	push	{r7, lr}
 801135a:	b08e      	sub	sp, #56	; 0x38
 801135c:	af04      	add	r7, sp, #16
 801135e:	60f8      	str	r0, [r7, #12]
 8011360:	60b9      	str	r1, [r7, #8]
 8011362:	607a      	str	r2, [r7, #4]
 8011364:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8011366:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011368:	2b00      	cmp	r3, #0
 801136a:	d109      	bne.n	8011380 <xTaskCreateStatic+0x28>
 801136c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011370:	f383 8811 	msr	BASEPRI, r3
 8011374:	f3bf 8f6f 	isb	sy
 8011378:	f3bf 8f4f 	dsb	sy
 801137c:	623b      	str	r3, [r7, #32]
 801137e:	e7fe      	b.n	801137e <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8011380:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011382:	2b00      	cmp	r3, #0
 8011384:	d109      	bne.n	801139a <xTaskCreateStatic+0x42>
 8011386:	f04f 0350 	mov.w	r3, #80	; 0x50
 801138a:	f383 8811 	msr	BASEPRI, r3
 801138e:	f3bf 8f6f 	isb	sy
 8011392:	f3bf 8f4f 	dsb	sy
 8011396:	61fb      	str	r3, [r7, #28]
 8011398:	e7fe      	b.n	8011398 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 801139a:	235c      	movs	r3, #92	; 0x5c
 801139c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 801139e:	693b      	ldr	r3, [r7, #16]
 80113a0:	2b5c      	cmp	r3, #92	; 0x5c
 80113a2:	d009      	beq.n	80113b8 <xTaskCreateStatic+0x60>
 80113a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80113a8:	f383 8811 	msr	BASEPRI, r3
 80113ac:	f3bf 8f6f 	isb	sy
 80113b0:	f3bf 8f4f 	dsb	sy
 80113b4:	61bb      	str	r3, [r7, #24]
 80113b6:	e7fe      	b.n	80113b6 <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80113b8:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80113ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80113bc:	2b00      	cmp	r3, #0
 80113be:	d01e      	beq.n	80113fe <xTaskCreateStatic+0xa6>
 80113c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80113c2:	2b00      	cmp	r3, #0
 80113c4:	d01b      	beq.n	80113fe <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80113c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80113c8:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80113ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80113cc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80113ce:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80113d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80113d2:	2202      	movs	r2, #2
 80113d4:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80113d8:	2300      	movs	r3, #0
 80113da:	9303      	str	r3, [sp, #12]
 80113dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80113de:	9302      	str	r3, [sp, #8]
 80113e0:	f107 0314 	add.w	r3, r7, #20
 80113e4:	9301      	str	r3, [sp, #4]
 80113e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80113e8:	9300      	str	r3, [sp, #0]
 80113ea:	683b      	ldr	r3, [r7, #0]
 80113ec:	687a      	ldr	r2, [r7, #4]
 80113ee:	68b9      	ldr	r1, [r7, #8]
 80113f0:	68f8      	ldr	r0, [r7, #12]
 80113f2:	f000 f850 	bl	8011496 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80113f6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80113f8:	f000 f8dc 	bl	80115b4 <prvAddNewTaskToReadyList>
 80113fc:	e001      	b.n	8011402 <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 80113fe:	2300      	movs	r3, #0
 8011400:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8011402:	697b      	ldr	r3, [r7, #20]
	}
 8011404:	4618      	mov	r0, r3
 8011406:	3728      	adds	r7, #40	; 0x28
 8011408:	46bd      	mov	sp, r7
 801140a:	bd80      	pop	{r7, pc}

0801140c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 801140c:	b580      	push	{r7, lr}
 801140e:	b08c      	sub	sp, #48	; 0x30
 8011410:	af04      	add	r7, sp, #16
 8011412:	60f8      	str	r0, [r7, #12]
 8011414:	60b9      	str	r1, [r7, #8]
 8011416:	603b      	str	r3, [r7, #0]
 8011418:	4613      	mov	r3, r2
 801141a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 801141c:	88fb      	ldrh	r3, [r7, #6]
 801141e:	009b      	lsls	r3, r3, #2
 8011420:	4618      	mov	r0, r3
 8011422:	f7fe fc6d 	bl	800fd00 <pvPortMalloc>
 8011426:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8011428:	697b      	ldr	r3, [r7, #20]
 801142a:	2b00      	cmp	r3, #0
 801142c:	d00e      	beq.n	801144c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 801142e:	205c      	movs	r0, #92	; 0x5c
 8011430:	f7fe fc66 	bl	800fd00 <pvPortMalloc>
 8011434:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8011436:	69fb      	ldr	r3, [r7, #28]
 8011438:	2b00      	cmp	r3, #0
 801143a:	d003      	beq.n	8011444 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 801143c:	69fb      	ldr	r3, [r7, #28]
 801143e:	697a      	ldr	r2, [r7, #20]
 8011440:	631a      	str	r2, [r3, #48]	; 0x30
 8011442:	e005      	b.n	8011450 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8011444:	6978      	ldr	r0, [r7, #20]
 8011446:	f7fe fd1d 	bl	800fe84 <vPortFree>
 801144a:	e001      	b.n	8011450 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 801144c:	2300      	movs	r3, #0
 801144e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8011450:	69fb      	ldr	r3, [r7, #28]
 8011452:	2b00      	cmp	r3, #0
 8011454:	d017      	beq.n	8011486 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8011456:	69fb      	ldr	r3, [r7, #28]
 8011458:	2200      	movs	r2, #0
 801145a:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 801145e:	88fa      	ldrh	r2, [r7, #6]
 8011460:	2300      	movs	r3, #0
 8011462:	9303      	str	r3, [sp, #12]
 8011464:	69fb      	ldr	r3, [r7, #28]
 8011466:	9302      	str	r3, [sp, #8]
 8011468:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801146a:	9301      	str	r3, [sp, #4]
 801146c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801146e:	9300      	str	r3, [sp, #0]
 8011470:	683b      	ldr	r3, [r7, #0]
 8011472:	68b9      	ldr	r1, [r7, #8]
 8011474:	68f8      	ldr	r0, [r7, #12]
 8011476:	f000 f80e 	bl	8011496 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 801147a:	69f8      	ldr	r0, [r7, #28]
 801147c:	f000 f89a 	bl	80115b4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8011480:	2301      	movs	r3, #1
 8011482:	61bb      	str	r3, [r7, #24]
 8011484:	e002      	b.n	801148c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8011486:	f04f 33ff 	mov.w	r3, #4294967295
 801148a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 801148c:	69bb      	ldr	r3, [r7, #24]
	}
 801148e:	4618      	mov	r0, r3
 8011490:	3720      	adds	r7, #32
 8011492:	46bd      	mov	sp, r7
 8011494:	bd80      	pop	{r7, pc}

08011496 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8011496:	b580      	push	{r7, lr}
 8011498:	b088      	sub	sp, #32
 801149a:	af00      	add	r7, sp, #0
 801149c:	60f8      	str	r0, [r7, #12]
 801149e:	60b9      	str	r1, [r7, #8]
 80114a0:	607a      	str	r2, [r7, #4]
 80114a2:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80114a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80114a6:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80114a8:	687b      	ldr	r3, [r7, #4]
 80114aa:	009b      	lsls	r3, r3, #2
 80114ac:	461a      	mov	r2, r3
 80114ae:	21a5      	movs	r1, #165	; 0xa5
 80114b0:	f001 fd97 	bl	8012fe2 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80114b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80114b6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80114b8:	687b      	ldr	r3, [r7, #4]
 80114ba:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80114be:	3b01      	subs	r3, #1
 80114c0:	009b      	lsls	r3, r3, #2
 80114c2:	4413      	add	r3, r2
 80114c4:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80114c6:	69bb      	ldr	r3, [r7, #24]
 80114c8:	f023 0307 	bic.w	r3, r3, #7
 80114cc:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80114ce:	69bb      	ldr	r3, [r7, #24]
 80114d0:	f003 0307 	and.w	r3, r3, #7
 80114d4:	2b00      	cmp	r3, #0
 80114d6:	d009      	beq.n	80114ec <prvInitialiseNewTask+0x56>
 80114d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80114dc:	f383 8811 	msr	BASEPRI, r3
 80114e0:	f3bf 8f6f 	isb	sy
 80114e4:	f3bf 8f4f 	dsb	sy
 80114e8:	617b      	str	r3, [r7, #20]
 80114ea:	e7fe      	b.n	80114ea <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80114ec:	68bb      	ldr	r3, [r7, #8]
 80114ee:	2b00      	cmp	r3, #0
 80114f0:	d01f      	beq.n	8011532 <prvInitialiseNewTask+0x9c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80114f2:	2300      	movs	r3, #0
 80114f4:	61fb      	str	r3, [r7, #28]
 80114f6:	e012      	b.n	801151e <prvInitialiseNewTask+0x88>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80114f8:	68ba      	ldr	r2, [r7, #8]
 80114fa:	69fb      	ldr	r3, [r7, #28]
 80114fc:	4413      	add	r3, r2
 80114fe:	7819      	ldrb	r1, [r3, #0]
 8011500:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011502:	69fb      	ldr	r3, [r7, #28]
 8011504:	4413      	add	r3, r2
 8011506:	3334      	adds	r3, #52	; 0x34
 8011508:	460a      	mov	r2, r1
 801150a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 801150c:	68ba      	ldr	r2, [r7, #8]
 801150e:	69fb      	ldr	r3, [r7, #28]
 8011510:	4413      	add	r3, r2
 8011512:	781b      	ldrb	r3, [r3, #0]
 8011514:	2b00      	cmp	r3, #0
 8011516:	d006      	beq.n	8011526 <prvInitialiseNewTask+0x90>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8011518:	69fb      	ldr	r3, [r7, #28]
 801151a:	3301      	adds	r3, #1
 801151c:	61fb      	str	r3, [r7, #28]
 801151e:	69fb      	ldr	r3, [r7, #28]
 8011520:	2b0f      	cmp	r3, #15
 8011522:	d9e9      	bls.n	80114f8 <prvInitialiseNewTask+0x62>
 8011524:	e000      	b.n	8011528 <prvInitialiseNewTask+0x92>
			{
				break;
 8011526:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8011528:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801152a:	2200      	movs	r2, #0
 801152c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8011530:	e003      	b.n	801153a <prvInitialiseNewTask+0xa4>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8011532:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011534:	2200      	movs	r2, #0
 8011536:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 801153a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801153c:	2b37      	cmp	r3, #55	; 0x37
 801153e:	d901      	bls.n	8011544 <prvInitialiseNewTask+0xae>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8011540:	2337      	movs	r3, #55	; 0x37
 8011542:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8011544:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011546:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011548:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 801154a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801154c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801154e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8011550:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011552:	2200      	movs	r2, #0
 8011554:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8011556:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011558:	3304      	adds	r3, #4
 801155a:	4618      	mov	r0, r3
 801155c:	f7fe fdc6 	bl	80100ec <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8011560:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011562:	3318      	adds	r3, #24
 8011564:	4618      	mov	r0, r3
 8011566:	f7fe fdc1 	bl	80100ec <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 801156a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801156c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801156e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011570:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011572:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8011576:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011578:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 801157a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801157c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801157e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8011580:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011582:	2200      	movs	r2, #0
 8011584:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8011586:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011588:	2200      	movs	r2, #0
 801158a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 801158e:	683a      	ldr	r2, [r7, #0]
 8011590:	68f9      	ldr	r1, [r7, #12]
 8011592:	69b8      	ldr	r0, [r7, #24]
 8011594:	f7fe f976 	bl	800f884 <pxPortInitialiseStack>
 8011598:	4602      	mov	r2, r0
 801159a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801159c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 801159e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80115a0:	2b00      	cmp	r3, #0
 80115a2:	d002      	beq.n	80115aa <prvInitialiseNewTask+0x114>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80115a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80115a6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80115a8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80115aa:	bf00      	nop
 80115ac:	3720      	adds	r7, #32
 80115ae:	46bd      	mov	sp, r7
 80115b0:	bd80      	pop	{r7, pc}
	...

080115b4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80115b4:	b580      	push	{r7, lr}
 80115b6:	b082      	sub	sp, #8
 80115b8:	af00      	add	r7, sp, #0
 80115ba:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80115bc:	f7fe fa86 	bl	800facc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80115c0:	4b2d      	ldr	r3, [pc, #180]	; (8011678 <prvAddNewTaskToReadyList+0xc4>)
 80115c2:	681b      	ldr	r3, [r3, #0]
 80115c4:	3301      	adds	r3, #1
 80115c6:	4a2c      	ldr	r2, [pc, #176]	; (8011678 <prvAddNewTaskToReadyList+0xc4>)
 80115c8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80115ca:	4b2c      	ldr	r3, [pc, #176]	; (801167c <prvAddNewTaskToReadyList+0xc8>)
 80115cc:	681b      	ldr	r3, [r3, #0]
 80115ce:	2b00      	cmp	r3, #0
 80115d0:	d109      	bne.n	80115e6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80115d2:	4a2a      	ldr	r2, [pc, #168]	; (801167c <prvAddNewTaskToReadyList+0xc8>)
 80115d4:	687b      	ldr	r3, [r7, #4]
 80115d6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80115d8:	4b27      	ldr	r3, [pc, #156]	; (8011678 <prvAddNewTaskToReadyList+0xc4>)
 80115da:	681b      	ldr	r3, [r3, #0]
 80115dc:	2b01      	cmp	r3, #1
 80115de:	d110      	bne.n	8011602 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80115e0:	f000 fc68 	bl	8011eb4 <prvInitialiseTaskLists>
 80115e4:	e00d      	b.n	8011602 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80115e6:	4b26      	ldr	r3, [pc, #152]	; (8011680 <prvAddNewTaskToReadyList+0xcc>)
 80115e8:	681b      	ldr	r3, [r3, #0]
 80115ea:	2b00      	cmp	r3, #0
 80115ec:	d109      	bne.n	8011602 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80115ee:	4b23      	ldr	r3, [pc, #140]	; (801167c <prvAddNewTaskToReadyList+0xc8>)
 80115f0:	681b      	ldr	r3, [r3, #0]
 80115f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80115f4:	687b      	ldr	r3, [r7, #4]
 80115f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80115f8:	429a      	cmp	r2, r3
 80115fa:	d802      	bhi.n	8011602 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80115fc:	4a1f      	ldr	r2, [pc, #124]	; (801167c <prvAddNewTaskToReadyList+0xc8>)
 80115fe:	687b      	ldr	r3, [r7, #4]
 8011600:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8011602:	4b20      	ldr	r3, [pc, #128]	; (8011684 <prvAddNewTaskToReadyList+0xd0>)
 8011604:	681b      	ldr	r3, [r3, #0]
 8011606:	3301      	adds	r3, #1
 8011608:	4a1e      	ldr	r2, [pc, #120]	; (8011684 <prvAddNewTaskToReadyList+0xd0>)
 801160a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 801160c:	4b1d      	ldr	r3, [pc, #116]	; (8011684 <prvAddNewTaskToReadyList+0xd0>)
 801160e:	681a      	ldr	r2, [r3, #0]
 8011610:	687b      	ldr	r3, [r7, #4]
 8011612:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8011614:	687b      	ldr	r3, [r7, #4]
 8011616:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011618:	4b1b      	ldr	r3, [pc, #108]	; (8011688 <prvAddNewTaskToReadyList+0xd4>)
 801161a:	681b      	ldr	r3, [r3, #0]
 801161c:	429a      	cmp	r2, r3
 801161e:	d903      	bls.n	8011628 <prvAddNewTaskToReadyList+0x74>
 8011620:	687b      	ldr	r3, [r7, #4]
 8011622:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011624:	4a18      	ldr	r2, [pc, #96]	; (8011688 <prvAddNewTaskToReadyList+0xd4>)
 8011626:	6013      	str	r3, [r2, #0]
 8011628:	687b      	ldr	r3, [r7, #4]
 801162a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801162c:	4613      	mov	r3, r2
 801162e:	009b      	lsls	r3, r3, #2
 8011630:	4413      	add	r3, r2
 8011632:	009b      	lsls	r3, r3, #2
 8011634:	4a15      	ldr	r2, [pc, #84]	; (801168c <prvAddNewTaskToReadyList+0xd8>)
 8011636:	441a      	add	r2, r3
 8011638:	687b      	ldr	r3, [r7, #4]
 801163a:	3304      	adds	r3, #4
 801163c:	4619      	mov	r1, r3
 801163e:	4610      	mov	r0, r2
 8011640:	f7fe fd61 	bl	8010106 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8011644:	f7fe fa70 	bl	800fb28 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8011648:	4b0d      	ldr	r3, [pc, #52]	; (8011680 <prvAddNewTaskToReadyList+0xcc>)
 801164a:	681b      	ldr	r3, [r3, #0]
 801164c:	2b00      	cmp	r3, #0
 801164e:	d00e      	beq.n	801166e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8011650:	4b0a      	ldr	r3, [pc, #40]	; (801167c <prvAddNewTaskToReadyList+0xc8>)
 8011652:	681b      	ldr	r3, [r3, #0]
 8011654:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011656:	687b      	ldr	r3, [r7, #4]
 8011658:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801165a:	429a      	cmp	r2, r3
 801165c:	d207      	bcs.n	801166e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 801165e:	4b0c      	ldr	r3, [pc, #48]	; (8011690 <prvAddNewTaskToReadyList+0xdc>)
 8011660:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011664:	601a      	str	r2, [r3, #0]
 8011666:	f3bf 8f4f 	dsb	sy
 801166a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801166e:	bf00      	nop
 8011670:	3708      	adds	r7, #8
 8011672:	46bd      	mov	sp, r7
 8011674:	bd80      	pop	{r7, pc}
 8011676:	bf00      	nop
 8011678:	20004edc 	.word	0x20004edc
 801167c:	20004a08 	.word	0x20004a08
 8011680:	20004ee8 	.word	0x20004ee8
 8011684:	20004ef8 	.word	0x20004ef8
 8011688:	20004ee4 	.word	0x20004ee4
 801168c:	20004a0c 	.word	0x20004a0c
 8011690:	e000ed04 	.word	0xe000ed04

08011694 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8011694:	b580      	push	{r7, lr}
 8011696:	b084      	sub	sp, #16
 8011698:	af00      	add	r7, sp, #0
 801169a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 801169c:	2300      	movs	r3, #0
 801169e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80116a0:	687b      	ldr	r3, [r7, #4]
 80116a2:	2b00      	cmp	r3, #0
 80116a4:	d016      	beq.n	80116d4 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80116a6:	4b13      	ldr	r3, [pc, #76]	; (80116f4 <vTaskDelay+0x60>)
 80116a8:	681b      	ldr	r3, [r3, #0]
 80116aa:	2b00      	cmp	r3, #0
 80116ac:	d009      	beq.n	80116c2 <vTaskDelay+0x2e>
 80116ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80116b2:	f383 8811 	msr	BASEPRI, r3
 80116b6:	f3bf 8f6f 	isb	sy
 80116ba:	f3bf 8f4f 	dsb	sy
 80116be:	60bb      	str	r3, [r7, #8]
 80116c0:	e7fe      	b.n	80116c0 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 80116c2:	f000 f87f 	bl	80117c4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80116c6:	2100      	movs	r1, #0
 80116c8:	6878      	ldr	r0, [r7, #4]
 80116ca:	f001 f873 	bl	80127b4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80116ce:	f000 f8bf 	bl	8011850 <xTaskResumeAll>
 80116d2:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80116d4:	68fb      	ldr	r3, [r7, #12]
 80116d6:	2b00      	cmp	r3, #0
 80116d8:	d107      	bne.n	80116ea <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 80116da:	4b07      	ldr	r3, [pc, #28]	; (80116f8 <vTaskDelay+0x64>)
 80116dc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80116e0:	601a      	str	r2, [r3, #0]
 80116e2:	f3bf 8f4f 	dsb	sy
 80116e6:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80116ea:	bf00      	nop
 80116ec:	3710      	adds	r7, #16
 80116ee:	46bd      	mov	sp, r7
 80116f0:	bd80      	pop	{r7, pc}
 80116f2:	bf00      	nop
 80116f4:	20004f04 	.word	0x20004f04
 80116f8:	e000ed04 	.word	0xe000ed04

080116fc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80116fc:	b580      	push	{r7, lr}
 80116fe:	b08a      	sub	sp, #40	; 0x28
 8011700:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8011702:	2300      	movs	r3, #0
 8011704:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8011706:	2300      	movs	r3, #0
 8011708:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 801170a:	463a      	mov	r2, r7
 801170c:	1d39      	adds	r1, r7, #4
 801170e:	f107 0308 	add.w	r3, r7, #8
 8011712:	4618      	mov	r0, r3
 8011714:	f7fe f882 	bl	800f81c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8011718:	6839      	ldr	r1, [r7, #0]
 801171a:	687b      	ldr	r3, [r7, #4]
 801171c:	68ba      	ldr	r2, [r7, #8]
 801171e:	9202      	str	r2, [sp, #8]
 8011720:	9301      	str	r3, [sp, #4]
 8011722:	2300      	movs	r3, #0
 8011724:	9300      	str	r3, [sp, #0]
 8011726:	2300      	movs	r3, #0
 8011728:	460a      	mov	r2, r1
 801172a:	4920      	ldr	r1, [pc, #128]	; (80117ac <vTaskStartScheduler+0xb0>)
 801172c:	4820      	ldr	r0, [pc, #128]	; (80117b0 <vTaskStartScheduler+0xb4>)
 801172e:	f7ff fe13 	bl	8011358 <xTaskCreateStatic>
 8011732:	4602      	mov	r2, r0
 8011734:	4b1f      	ldr	r3, [pc, #124]	; (80117b4 <vTaskStartScheduler+0xb8>)
 8011736:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8011738:	4b1e      	ldr	r3, [pc, #120]	; (80117b4 <vTaskStartScheduler+0xb8>)
 801173a:	681b      	ldr	r3, [r3, #0]
 801173c:	2b00      	cmp	r3, #0
 801173e:	d002      	beq.n	8011746 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8011740:	2301      	movs	r3, #1
 8011742:	617b      	str	r3, [r7, #20]
 8011744:	e001      	b.n	801174a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8011746:	2300      	movs	r3, #0
 8011748:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 801174a:	697b      	ldr	r3, [r7, #20]
 801174c:	2b01      	cmp	r3, #1
 801174e:	d102      	bne.n	8011756 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8011750:	f001 f884 	bl	801285c <xTimerCreateTimerTask>
 8011754:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8011756:	697b      	ldr	r3, [r7, #20]
 8011758:	2b01      	cmp	r3, #1
 801175a:	d115      	bne.n	8011788 <vTaskStartScheduler+0x8c>
 801175c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011760:	f383 8811 	msr	BASEPRI, r3
 8011764:	f3bf 8f6f 	isb	sy
 8011768:	f3bf 8f4f 	dsb	sy
 801176c:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 801176e:	4b12      	ldr	r3, [pc, #72]	; (80117b8 <vTaskStartScheduler+0xbc>)
 8011770:	f04f 32ff 	mov.w	r2, #4294967295
 8011774:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8011776:	4b11      	ldr	r3, [pc, #68]	; (80117bc <vTaskStartScheduler+0xc0>)
 8011778:	2201      	movs	r2, #1
 801177a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 801177c:	4b10      	ldr	r3, [pc, #64]	; (80117c0 <vTaskStartScheduler+0xc4>)
 801177e:	2200      	movs	r2, #0
 8011780:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8011782:	f7fe f905 	bl	800f990 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8011786:	e00d      	b.n	80117a4 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8011788:	697b      	ldr	r3, [r7, #20]
 801178a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801178e:	d109      	bne.n	80117a4 <vTaskStartScheduler+0xa8>
 8011790:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011794:	f383 8811 	msr	BASEPRI, r3
 8011798:	f3bf 8f6f 	isb	sy
 801179c:	f3bf 8f4f 	dsb	sy
 80117a0:	60fb      	str	r3, [r7, #12]
 80117a2:	e7fe      	b.n	80117a2 <vTaskStartScheduler+0xa6>
}
 80117a4:	bf00      	nop
 80117a6:	3718      	adds	r7, #24
 80117a8:	46bd      	mov	sp, r7
 80117aa:	bd80      	pop	{r7, pc}
 80117ac:	080163f4 	.word	0x080163f4
 80117b0:	08011e39 	.word	0x08011e39
 80117b4:	20004f00 	.word	0x20004f00
 80117b8:	20004efc 	.word	0x20004efc
 80117bc:	20004ee8 	.word	0x20004ee8
 80117c0:	20004ee0 	.word	0x20004ee0

080117c4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80117c4:	b480      	push	{r7}
 80117c6:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80117c8:	4b04      	ldr	r3, [pc, #16]	; (80117dc <vTaskSuspendAll+0x18>)
 80117ca:	681b      	ldr	r3, [r3, #0]
 80117cc:	3301      	adds	r3, #1
 80117ce:	4a03      	ldr	r2, [pc, #12]	; (80117dc <vTaskSuspendAll+0x18>)
 80117d0:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 80117d2:	bf00      	nop
 80117d4:	46bd      	mov	sp, r7
 80117d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117da:	4770      	bx	lr
 80117dc:	20004f04 	.word	0x20004f04

080117e0 <prvGetExpectedIdleTime>:
/*----------------------------------------------------------*/

#if ( configUSE_TICKLESS_IDLE != 0 )

	static TickType_t prvGetExpectedIdleTime( void )
	{
 80117e0:	b480      	push	{r7}
 80117e2:	b083      	sub	sp, #12
 80117e4:	af00      	add	r7, sp, #0
	TickType_t xReturn;
	UBaseType_t uxHigherPriorityReadyTasks = pdFALSE;
 80117e6:	2300      	movs	r3, #0
 80117e8:	603b      	str	r3, [r7, #0]
		configUSE_PREEMPTION is 0, so there may be tasks above the idle priority
		task that are in the Ready state, even though the idle task is
		running. */
		#if( configUSE_PORT_OPTIMISED_TASK_SELECTION == 0 )
		{
			if( uxTopReadyPriority > tskIDLE_PRIORITY )
 80117ea:	4b14      	ldr	r3, [pc, #80]	; (801183c <prvGetExpectedIdleTime+0x5c>)
 80117ec:	681b      	ldr	r3, [r3, #0]
 80117ee:	2b00      	cmp	r3, #0
 80117f0:	d001      	beq.n	80117f6 <prvGetExpectedIdleTime+0x16>
			{
				uxHigherPriorityReadyTasks = pdTRUE;
 80117f2:	2301      	movs	r3, #1
 80117f4:	603b      	str	r3, [r7, #0]
				uxHigherPriorityReadyTasks = pdTRUE;
			}
		}
		#endif

		if( pxCurrentTCB->uxPriority > tskIDLE_PRIORITY )
 80117f6:	4b12      	ldr	r3, [pc, #72]	; (8011840 <prvGetExpectedIdleTime+0x60>)
 80117f8:	681b      	ldr	r3, [r3, #0]
 80117fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80117fc:	2b00      	cmp	r3, #0
 80117fe:	d002      	beq.n	8011806 <prvGetExpectedIdleTime+0x26>
		{
			xReturn = 0;
 8011800:	2300      	movs	r3, #0
 8011802:	607b      	str	r3, [r7, #4]
 8011804:	e012      	b.n	801182c <prvGetExpectedIdleTime+0x4c>
		}
		else if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > 1 )
 8011806:	4b0f      	ldr	r3, [pc, #60]	; (8011844 <prvGetExpectedIdleTime+0x64>)
 8011808:	681b      	ldr	r3, [r3, #0]
 801180a:	2b01      	cmp	r3, #1
 801180c:	d902      	bls.n	8011814 <prvGetExpectedIdleTime+0x34>
		{
			/* There are other idle priority tasks in the ready state.  If
			time slicing is used then the very next tick interrupt must be
			processed. */
			xReturn = 0;
 801180e:	2300      	movs	r3, #0
 8011810:	607b      	str	r3, [r7, #4]
 8011812:	e00b      	b.n	801182c <prvGetExpectedIdleTime+0x4c>
		}
		else if( uxHigherPriorityReadyTasks != pdFALSE )
 8011814:	683b      	ldr	r3, [r7, #0]
 8011816:	2b00      	cmp	r3, #0
 8011818:	d002      	beq.n	8011820 <prvGetExpectedIdleTime+0x40>
		{
			/* There are tasks in the Ready state that have a priority above the
			idle priority.  This path can only be reached if
			configUSE_PREEMPTION is 0. */
			xReturn = 0;
 801181a:	2300      	movs	r3, #0
 801181c:	607b      	str	r3, [r7, #4]
 801181e:	e005      	b.n	801182c <prvGetExpectedIdleTime+0x4c>
		}
		else
		{
			xReturn = xNextTaskUnblockTime - xTickCount;
 8011820:	4b09      	ldr	r3, [pc, #36]	; (8011848 <prvGetExpectedIdleTime+0x68>)
 8011822:	681a      	ldr	r2, [r3, #0]
 8011824:	4b09      	ldr	r3, [pc, #36]	; (801184c <prvGetExpectedIdleTime+0x6c>)
 8011826:	681b      	ldr	r3, [r3, #0]
 8011828:	1ad3      	subs	r3, r2, r3
 801182a:	607b      	str	r3, [r7, #4]
		}

		return xReturn;
 801182c:	687b      	ldr	r3, [r7, #4]
	}
 801182e:	4618      	mov	r0, r3
 8011830:	370c      	adds	r7, #12
 8011832:	46bd      	mov	sp, r7
 8011834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011838:	4770      	bx	lr
 801183a:	bf00      	nop
 801183c:	20004ee4 	.word	0x20004ee4
 8011840:	20004a08 	.word	0x20004a08
 8011844:	20004a0c 	.word	0x20004a0c
 8011848:	20004efc 	.word	0x20004efc
 801184c:	20004ee0 	.word	0x20004ee0

08011850 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8011850:	b580      	push	{r7, lr}
 8011852:	b084      	sub	sp, #16
 8011854:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8011856:	2300      	movs	r3, #0
 8011858:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 801185a:	2300      	movs	r3, #0
 801185c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 801185e:	4b41      	ldr	r3, [pc, #260]	; (8011964 <xTaskResumeAll+0x114>)
 8011860:	681b      	ldr	r3, [r3, #0]
 8011862:	2b00      	cmp	r3, #0
 8011864:	d109      	bne.n	801187a <xTaskResumeAll+0x2a>
 8011866:	f04f 0350 	mov.w	r3, #80	; 0x50
 801186a:	f383 8811 	msr	BASEPRI, r3
 801186e:	f3bf 8f6f 	isb	sy
 8011872:	f3bf 8f4f 	dsb	sy
 8011876:	603b      	str	r3, [r7, #0]
 8011878:	e7fe      	b.n	8011878 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 801187a:	f7fe f927 	bl	800facc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 801187e:	4b39      	ldr	r3, [pc, #228]	; (8011964 <xTaskResumeAll+0x114>)
 8011880:	681b      	ldr	r3, [r3, #0]
 8011882:	3b01      	subs	r3, #1
 8011884:	4a37      	ldr	r2, [pc, #220]	; (8011964 <xTaskResumeAll+0x114>)
 8011886:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8011888:	4b36      	ldr	r3, [pc, #216]	; (8011964 <xTaskResumeAll+0x114>)
 801188a:	681b      	ldr	r3, [r3, #0]
 801188c:	2b00      	cmp	r3, #0
 801188e:	d162      	bne.n	8011956 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8011890:	4b35      	ldr	r3, [pc, #212]	; (8011968 <xTaskResumeAll+0x118>)
 8011892:	681b      	ldr	r3, [r3, #0]
 8011894:	2b00      	cmp	r3, #0
 8011896:	d05e      	beq.n	8011956 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8011898:	e02f      	b.n	80118fa <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801189a:	4b34      	ldr	r3, [pc, #208]	; (801196c <xTaskResumeAll+0x11c>)
 801189c:	68db      	ldr	r3, [r3, #12]
 801189e:	68db      	ldr	r3, [r3, #12]
 80118a0:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80118a2:	68fb      	ldr	r3, [r7, #12]
 80118a4:	3318      	adds	r3, #24
 80118a6:	4618      	mov	r0, r3
 80118a8:	f7fe fc8a 	bl	80101c0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80118ac:	68fb      	ldr	r3, [r7, #12]
 80118ae:	3304      	adds	r3, #4
 80118b0:	4618      	mov	r0, r3
 80118b2:	f7fe fc85 	bl	80101c0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80118b6:	68fb      	ldr	r3, [r7, #12]
 80118b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80118ba:	4b2d      	ldr	r3, [pc, #180]	; (8011970 <xTaskResumeAll+0x120>)
 80118bc:	681b      	ldr	r3, [r3, #0]
 80118be:	429a      	cmp	r2, r3
 80118c0:	d903      	bls.n	80118ca <xTaskResumeAll+0x7a>
 80118c2:	68fb      	ldr	r3, [r7, #12]
 80118c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80118c6:	4a2a      	ldr	r2, [pc, #168]	; (8011970 <xTaskResumeAll+0x120>)
 80118c8:	6013      	str	r3, [r2, #0]
 80118ca:	68fb      	ldr	r3, [r7, #12]
 80118cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80118ce:	4613      	mov	r3, r2
 80118d0:	009b      	lsls	r3, r3, #2
 80118d2:	4413      	add	r3, r2
 80118d4:	009b      	lsls	r3, r3, #2
 80118d6:	4a27      	ldr	r2, [pc, #156]	; (8011974 <xTaskResumeAll+0x124>)
 80118d8:	441a      	add	r2, r3
 80118da:	68fb      	ldr	r3, [r7, #12]
 80118dc:	3304      	adds	r3, #4
 80118de:	4619      	mov	r1, r3
 80118e0:	4610      	mov	r0, r2
 80118e2:	f7fe fc10 	bl	8010106 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80118e6:	68fb      	ldr	r3, [r7, #12]
 80118e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80118ea:	4b23      	ldr	r3, [pc, #140]	; (8011978 <xTaskResumeAll+0x128>)
 80118ec:	681b      	ldr	r3, [r3, #0]
 80118ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80118f0:	429a      	cmp	r2, r3
 80118f2:	d302      	bcc.n	80118fa <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 80118f4:	4b21      	ldr	r3, [pc, #132]	; (801197c <xTaskResumeAll+0x12c>)
 80118f6:	2201      	movs	r2, #1
 80118f8:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80118fa:	4b1c      	ldr	r3, [pc, #112]	; (801196c <xTaskResumeAll+0x11c>)
 80118fc:	681b      	ldr	r3, [r3, #0]
 80118fe:	2b00      	cmp	r3, #0
 8011900:	d1cb      	bne.n	801189a <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8011902:	68fb      	ldr	r3, [r7, #12]
 8011904:	2b00      	cmp	r3, #0
 8011906:	d001      	beq.n	801190c <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8011908:	f000 fb6e 	bl	8011fe8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 801190c:	4b1c      	ldr	r3, [pc, #112]	; (8011980 <xTaskResumeAll+0x130>)
 801190e:	681b      	ldr	r3, [r3, #0]
 8011910:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8011912:	687b      	ldr	r3, [r7, #4]
 8011914:	2b00      	cmp	r3, #0
 8011916:	d010      	beq.n	801193a <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8011918:	f000 f846 	bl	80119a8 <xTaskIncrementTick>
 801191c:	4603      	mov	r3, r0
 801191e:	2b00      	cmp	r3, #0
 8011920:	d002      	beq.n	8011928 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8011922:	4b16      	ldr	r3, [pc, #88]	; (801197c <xTaskResumeAll+0x12c>)
 8011924:	2201      	movs	r2, #1
 8011926:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8011928:	687b      	ldr	r3, [r7, #4]
 801192a:	3b01      	subs	r3, #1
 801192c:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 801192e:	687b      	ldr	r3, [r7, #4]
 8011930:	2b00      	cmp	r3, #0
 8011932:	d1f1      	bne.n	8011918 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8011934:	4b12      	ldr	r3, [pc, #72]	; (8011980 <xTaskResumeAll+0x130>)
 8011936:	2200      	movs	r2, #0
 8011938:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 801193a:	4b10      	ldr	r3, [pc, #64]	; (801197c <xTaskResumeAll+0x12c>)
 801193c:	681b      	ldr	r3, [r3, #0]
 801193e:	2b00      	cmp	r3, #0
 8011940:	d009      	beq.n	8011956 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8011942:	2301      	movs	r3, #1
 8011944:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8011946:	4b0f      	ldr	r3, [pc, #60]	; (8011984 <xTaskResumeAll+0x134>)
 8011948:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801194c:	601a      	str	r2, [r3, #0]
 801194e:	f3bf 8f4f 	dsb	sy
 8011952:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8011956:	f7fe f8e7 	bl	800fb28 <vPortExitCritical>

	return xAlreadyYielded;
 801195a:	68bb      	ldr	r3, [r7, #8]
}
 801195c:	4618      	mov	r0, r3
 801195e:	3710      	adds	r7, #16
 8011960:	46bd      	mov	sp, r7
 8011962:	bd80      	pop	{r7, pc}
 8011964:	20004f04 	.word	0x20004f04
 8011968:	20004edc 	.word	0x20004edc
 801196c:	20004e9c 	.word	0x20004e9c
 8011970:	20004ee4 	.word	0x20004ee4
 8011974:	20004a0c 	.word	0x20004a0c
 8011978:	20004a08 	.word	0x20004a08
 801197c:	20004ef0 	.word	0x20004ef0
 8011980:	20004eec 	.word	0x20004eec
 8011984:	e000ed04 	.word	0xe000ed04

08011988 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8011988:	b480      	push	{r7}
 801198a:	b083      	sub	sp, #12
 801198c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 801198e:	4b05      	ldr	r3, [pc, #20]	; (80119a4 <xTaskGetTickCount+0x1c>)
 8011990:	681b      	ldr	r3, [r3, #0]
 8011992:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8011994:	687b      	ldr	r3, [r7, #4]
}
 8011996:	4618      	mov	r0, r3
 8011998:	370c      	adds	r7, #12
 801199a:	46bd      	mov	sp, r7
 801199c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119a0:	4770      	bx	lr
 80119a2:	bf00      	nop
 80119a4:	20004ee0 	.word	0x20004ee0

080119a8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80119a8:	b580      	push	{r7, lr}
 80119aa:	b086      	sub	sp, #24
 80119ac:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80119ae:	2300      	movs	r3, #0
 80119b0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80119b2:	4b4e      	ldr	r3, [pc, #312]	; (8011aec <xTaskIncrementTick+0x144>)
 80119b4:	681b      	ldr	r3, [r3, #0]
 80119b6:	2b00      	cmp	r3, #0
 80119b8:	f040 8088 	bne.w	8011acc <xTaskIncrementTick+0x124>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80119bc:	4b4c      	ldr	r3, [pc, #304]	; (8011af0 <xTaskIncrementTick+0x148>)
 80119be:	681b      	ldr	r3, [r3, #0]
 80119c0:	3301      	adds	r3, #1
 80119c2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80119c4:	4a4a      	ldr	r2, [pc, #296]	; (8011af0 <xTaskIncrementTick+0x148>)
 80119c6:	693b      	ldr	r3, [r7, #16]
 80119c8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80119ca:	693b      	ldr	r3, [r7, #16]
 80119cc:	2b00      	cmp	r3, #0
 80119ce:	d11f      	bne.n	8011a10 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 80119d0:	4b48      	ldr	r3, [pc, #288]	; (8011af4 <xTaskIncrementTick+0x14c>)
 80119d2:	681b      	ldr	r3, [r3, #0]
 80119d4:	681b      	ldr	r3, [r3, #0]
 80119d6:	2b00      	cmp	r3, #0
 80119d8:	d009      	beq.n	80119ee <xTaskIncrementTick+0x46>
 80119da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80119de:	f383 8811 	msr	BASEPRI, r3
 80119e2:	f3bf 8f6f 	isb	sy
 80119e6:	f3bf 8f4f 	dsb	sy
 80119ea:	603b      	str	r3, [r7, #0]
 80119ec:	e7fe      	b.n	80119ec <xTaskIncrementTick+0x44>
 80119ee:	4b41      	ldr	r3, [pc, #260]	; (8011af4 <xTaskIncrementTick+0x14c>)
 80119f0:	681b      	ldr	r3, [r3, #0]
 80119f2:	60fb      	str	r3, [r7, #12]
 80119f4:	4b40      	ldr	r3, [pc, #256]	; (8011af8 <xTaskIncrementTick+0x150>)
 80119f6:	681b      	ldr	r3, [r3, #0]
 80119f8:	4a3e      	ldr	r2, [pc, #248]	; (8011af4 <xTaskIncrementTick+0x14c>)
 80119fa:	6013      	str	r3, [r2, #0]
 80119fc:	4a3e      	ldr	r2, [pc, #248]	; (8011af8 <xTaskIncrementTick+0x150>)
 80119fe:	68fb      	ldr	r3, [r7, #12]
 8011a00:	6013      	str	r3, [r2, #0]
 8011a02:	4b3e      	ldr	r3, [pc, #248]	; (8011afc <xTaskIncrementTick+0x154>)
 8011a04:	681b      	ldr	r3, [r3, #0]
 8011a06:	3301      	adds	r3, #1
 8011a08:	4a3c      	ldr	r2, [pc, #240]	; (8011afc <xTaskIncrementTick+0x154>)
 8011a0a:	6013      	str	r3, [r2, #0]
 8011a0c:	f000 faec 	bl	8011fe8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8011a10:	4b3b      	ldr	r3, [pc, #236]	; (8011b00 <xTaskIncrementTick+0x158>)
 8011a12:	681b      	ldr	r3, [r3, #0]
 8011a14:	693a      	ldr	r2, [r7, #16]
 8011a16:	429a      	cmp	r2, r3
 8011a18:	d349      	bcc.n	8011aae <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8011a1a:	4b36      	ldr	r3, [pc, #216]	; (8011af4 <xTaskIncrementTick+0x14c>)
 8011a1c:	681b      	ldr	r3, [r3, #0]
 8011a1e:	681b      	ldr	r3, [r3, #0]
 8011a20:	2b00      	cmp	r3, #0
 8011a22:	d104      	bne.n	8011a2e <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011a24:	4b36      	ldr	r3, [pc, #216]	; (8011b00 <xTaskIncrementTick+0x158>)
 8011a26:	f04f 32ff 	mov.w	r2, #4294967295
 8011a2a:	601a      	str	r2, [r3, #0]
					break;
 8011a2c:	e03f      	b.n	8011aae <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011a2e:	4b31      	ldr	r3, [pc, #196]	; (8011af4 <xTaskIncrementTick+0x14c>)
 8011a30:	681b      	ldr	r3, [r3, #0]
 8011a32:	68db      	ldr	r3, [r3, #12]
 8011a34:	68db      	ldr	r3, [r3, #12]
 8011a36:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8011a38:	68bb      	ldr	r3, [r7, #8]
 8011a3a:	685b      	ldr	r3, [r3, #4]
 8011a3c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8011a3e:	693a      	ldr	r2, [r7, #16]
 8011a40:	687b      	ldr	r3, [r7, #4]
 8011a42:	429a      	cmp	r2, r3
 8011a44:	d203      	bcs.n	8011a4e <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8011a46:	4a2e      	ldr	r2, [pc, #184]	; (8011b00 <xTaskIncrementTick+0x158>)
 8011a48:	687b      	ldr	r3, [r7, #4]
 8011a4a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8011a4c:	e02f      	b.n	8011aae <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8011a4e:	68bb      	ldr	r3, [r7, #8]
 8011a50:	3304      	adds	r3, #4
 8011a52:	4618      	mov	r0, r3
 8011a54:	f7fe fbb4 	bl	80101c0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8011a58:	68bb      	ldr	r3, [r7, #8]
 8011a5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011a5c:	2b00      	cmp	r3, #0
 8011a5e:	d004      	beq.n	8011a6a <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8011a60:	68bb      	ldr	r3, [r7, #8]
 8011a62:	3318      	adds	r3, #24
 8011a64:	4618      	mov	r0, r3
 8011a66:	f7fe fbab 	bl	80101c0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8011a6a:	68bb      	ldr	r3, [r7, #8]
 8011a6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011a6e:	4b25      	ldr	r3, [pc, #148]	; (8011b04 <xTaskIncrementTick+0x15c>)
 8011a70:	681b      	ldr	r3, [r3, #0]
 8011a72:	429a      	cmp	r2, r3
 8011a74:	d903      	bls.n	8011a7e <xTaskIncrementTick+0xd6>
 8011a76:	68bb      	ldr	r3, [r7, #8]
 8011a78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011a7a:	4a22      	ldr	r2, [pc, #136]	; (8011b04 <xTaskIncrementTick+0x15c>)
 8011a7c:	6013      	str	r3, [r2, #0]
 8011a7e:	68bb      	ldr	r3, [r7, #8]
 8011a80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011a82:	4613      	mov	r3, r2
 8011a84:	009b      	lsls	r3, r3, #2
 8011a86:	4413      	add	r3, r2
 8011a88:	009b      	lsls	r3, r3, #2
 8011a8a:	4a1f      	ldr	r2, [pc, #124]	; (8011b08 <xTaskIncrementTick+0x160>)
 8011a8c:	441a      	add	r2, r3
 8011a8e:	68bb      	ldr	r3, [r7, #8]
 8011a90:	3304      	adds	r3, #4
 8011a92:	4619      	mov	r1, r3
 8011a94:	4610      	mov	r0, r2
 8011a96:	f7fe fb36 	bl	8010106 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8011a9a:	68bb      	ldr	r3, [r7, #8]
 8011a9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011a9e:	4b1b      	ldr	r3, [pc, #108]	; (8011b0c <xTaskIncrementTick+0x164>)
 8011aa0:	681b      	ldr	r3, [r3, #0]
 8011aa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011aa4:	429a      	cmp	r2, r3
 8011aa6:	d3b8      	bcc.n	8011a1a <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8011aa8:	2301      	movs	r3, #1
 8011aaa:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8011aac:	e7b5      	b.n	8011a1a <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8011aae:	4b17      	ldr	r3, [pc, #92]	; (8011b0c <xTaskIncrementTick+0x164>)
 8011ab0:	681b      	ldr	r3, [r3, #0]
 8011ab2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011ab4:	4914      	ldr	r1, [pc, #80]	; (8011b08 <xTaskIncrementTick+0x160>)
 8011ab6:	4613      	mov	r3, r2
 8011ab8:	009b      	lsls	r3, r3, #2
 8011aba:	4413      	add	r3, r2
 8011abc:	009b      	lsls	r3, r3, #2
 8011abe:	440b      	add	r3, r1
 8011ac0:	681b      	ldr	r3, [r3, #0]
 8011ac2:	2b01      	cmp	r3, #1
 8011ac4:	d907      	bls.n	8011ad6 <xTaskIncrementTick+0x12e>
			{
				xSwitchRequired = pdTRUE;
 8011ac6:	2301      	movs	r3, #1
 8011ac8:	617b      	str	r3, [r7, #20]
 8011aca:	e004      	b.n	8011ad6 <xTaskIncrementTick+0x12e>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8011acc:	4b10      	ldr	r3, [pc, #64]	; (8011b10 <xTaskIncrementTick+0x168>)
 8011ace:	681b      	ldr	r3, [r3, #0]
 8011ad0:	3301      	adds	r3, #1
 8011ad2:	4a0f      	ldr	r2, [pc, #60]	; (8011b10 <xTaskIncrementTick+0x168>)
 8011ad4:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8011ad6:	4b0f      	ldr	r3, [pc, #60]	; (8011b14 <xTaskIncrementTick+0x16c>)
 8011ad8:	681b      	ldr	r3, [r3, #0]
 8011ada:	2b00      	cmp	r3, #0
 8011adc:	d001      	beq.n	8011ae2 <xTaskIncrementTick+0x13a>
		{
			xSwitchRequired = pdTRUE;
 8011ade:	2301      	movs	r3, #1
 8011ae0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8011ae2:	697b      	ldr	r3, [r7, #20]
}
 8011ae4:	4618      	mov	r0, r3
 8011ae6:	3718      	adds	r7, #24
 8011ae8:	46bd      	mov	sp, r7
 8011aea:	bd80      	pop	{r7, pc}
 8011aec:	20004f04 	.word	0x20004f04
 8011af0:	20004ee0 	.word	0x20004ee0
 8011af4:	20004e94 	.word	0x20004e94
 8011af8:	20004e98 	.word	0x20004e98
 8011afc:	20004ef4 	.word	0x20004ef4
 8011b00:	20004efc 	.word	0x20004efc
 8011b04:	20004ee4 	.word	0x20004ee4
 8011b08:	20004a0c 	.word	0x20004a0c
 8011b0c:	20004a08 	.word	0x20004a08
 8011b10:	20004eec 	.word	0x20004eec
 8011b14:	20004ef0 	.word	0x20004ef0

08011b18 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8011b18:	b480      	push	{r7}
 8011b1a:	b085      	sub	sp, #20
 8011b1c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8011b1e:	4b27      	ldr	r3, [pc, #156]	; (8011bbc <vTaskSwitchContext+0xa4>)
 8011b20:	681b      	ldr	r3, [r3, #0]
 8011b22:	2b00      	cmp	r3, #0
 8011b24:	d003      	beq.n	8011b2e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8011b26:	4b26      	ldr	r3, [pc, #152]	; (8011bc0 <vTaskSwitchContext+0xa8>)
 8011b28:	2201      	movs	r2, #1
 8011b2a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8011b2c:	e040      	b.n	8011bb0 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 8011b2e:	4b24      	ldr	r3, [pc, #144]	; (8011bc0 <vTaskSwitchContext+0xa8>)
 8011b30:	2200      	movs	r2, #0
 8011b32:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011b34:	4b23      	ldr	r3, [pc, #140]	; (8011bc4 <vTaskSwitchContext+0xac>)
 8011b36:	681b      	ldr	r3, [r3, #0]
 8011b38:	60fb      	str	r3, [r7, #12]
 8011b3a:	e00f      	b.n	8011b5c <vTaskSwitchContext+0x44>
 8011b3c:	68fb      	ldr	r3, [r7, #12]
 8011b3e:	2b00      	cmp	r3, #0
 8011b40:	d109      	bne.n	8011b56 <vTaskSwitchContext+0x3e>
 8011b42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011b46:	f383 8811 	msr	BASEPRI, r3
 8011b4a:	f3bf 8f6f 	isb	sy
 8011b4e:	f3bf 8f4f 	dsb	sy
 8011b52:	607b      	str	r3, [r7, #4]
 8011b54:	e7fe      	b.n	8011b54 <vTaskSwitchContext+0x3c>
 8011b56:	68fb      	ldr	r3, [r7, #12]
 8011b58:	3b01      	subs	r3, #1
 8011b5a:	60fb      	str	r3, [r7, #12]
 8011b5c:	491a      	ldr	r1, [pc, #104]	; (8011bc8 <vTaskSwitchContext+0xb0>)
 8011b5e:	68fa      	ldr	r2, [r7, #12]
 8011b60:	4613      	mov	r3, r2
 8011b62:	009b      	lsls	r3, r3, #2
 8011b64:	4413      	add	r3, r2
 8011b66:	009b      	lsls	r3, r3, #2
 8011b68:	440b      	add	r3, r1
 8011b6a:	681b      	ldr	r3, [r3, #0]
 8011b6c:	2b00      	cmp	r3, #0
 8011b6e:	d0e5      	beq.n	8011b3c <vTaskSwitchContext+0x24>
 8011b70:	68fa      	ldr	r2, [r7, #12]
 8011b72:	4613      	mov	r3, r2
 8011b74:	009b      	lsls	r3, r3, #2
 8011b76:	4413      	add	r3, r2
 8011b78:	009b      	lsls	r3, r3, #2
 8011b7a:	4a13      	ldr	r2, [pc, #76]	; (8011bc8 <vTaskSwitchContext+0xb0>)
 8011b7c:	4413      	add	r3, r2
 8011b7e:	60bb      	str	r3, [r7, #8]
 8011b80:	68bb      	ldr	r3, [r7, #8]
 8011b82:	685b      	ldr	r3, [r3, #4]
 8011b84:	685a      	ldr	r2, [r3, #4]
 8011b86:	68bb      	ldr	r3, [r7, #8]
 8011b88:	605a      	str	r2, [r3, #4]
 8011b8a:	68bb      	ldr	r3, [r7, #8]
 8011b8c:	685a      	ldr	r2, [r3, #4]
 8011b8e:	68bb      	ldr	r3, [r7, #8]
 8011b90:	3308      	adds	r3, #8
 8011b92:	429a      	cmp	r2, r3
 8011b94:	d104      	bne.n	8011ba0 <vTaskSwitchContext+0x88>
 8011b96:	68bb      	ldr	r3, [r7, #8]
 8011b98:	685b      	ldr	r3, [r3, #4]
 8011b9a:	685a      	ldr	r2, [r3, #4]
 8011b9c:	68bb      	ldr	r3, [r7, #8]
 8011b9e:	605a      	str	r2, [r3, #4]
 8011ba0:	68bb      	ldr	r3, [r7, #8]
 8011ba2:	685b      	ldr	r3, [r3, #4]
 8011ba4:	68db      	ldr	r3, [r3, #12]
 8011ba6:	4a09      	ldr	r2, [pc, #36]	; (8011bcc <vTaskSwitchContext+0xb4>)
 8011ba8:	6013      	str	r3, [r2, #0]
 8011baa:	4a06      	ldr	r2, [pc, #24]	; (8011bc4 <vTaskSwitchContext+0xac>)
 8011bac:	68fb      	ldr	r3, [r7, #12]
 8011bae:	6013      	str	r3, [r2, #0]
}
 8011bb0:	bf00      	nop
 8011bb2:	3714      	adds	r7, #20
 8011bb4:	46bd      	mov	sp, r7
 8011bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011bba:	4770      	bx	lr
 8011bbc:	20004f04 	.word	0x20004f04
 8011bc0:	20004ef0 	.word	0x20004ef0
 8011bc4:	20004ee4 	.word	0x20004ee4
 8011bc8:	20004a0c 	.word	0x20004a0c
 8011bcc:	20004a08 	.word	0x20004a08

08011bd0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8011bd0:	b580      	push	{r7, lr}
 8011bd2:	b084      	sub	sp, #16
 8011bd4:	af00      	add	r7, sp, #0
 8011bd6:	6078      	str	r0, [r7, #4]
 8011bd8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8011bda:	687b      	ldr	r3, [r7, #4]
 8011bdc:	2b00      	cmp	r3, #0
 8011bde:	d109      	bne.n	8011bf4 <vTaskPlaceOnEventList+0x24>
 8011be0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011be4:	f383 8811 	msr	BASEPRI, r3
 8011be8:	f3bf 8f6f 	isb	sy
 8011bec:	f3bf 8f4f 	dsb	sy
 8011bf0:	60fb      	str	r3, [r7, #12]
 8011bf2:	e7fe      	b.n	8011bf2 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8011bf4:	4b07      	ldr	r3, [pc, #28]	; (8011c14 <vTaskPlaceOnEventList+0x44>)
 8011bf6:	681b      	ldr	r3, [r3, #0]
 8011bf8:	3318      	adds	r3, #24
 8011bfa:	4619      	mov	r1, r3
 8011bfc:	6878      	ldr	r0, [r7, #4]
 8011bfe:	f7fe faa6 	bl	801014e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8011c02:	2101      	movs	r1, #1
 8011c04:	6838      	ldr	r0, [r7, #0]
 8011c06:	f000 fdd5 	bl	80127b4 <prvAddCurrentTaskToDelayedList>
}
 8011c0a:	bf00      	nop
 8011c0c:	3710      	adds	r7, #16
 8011c0e:	46bd      	mov	sp, r7
 8011c10:	bd80      	pop	{r7, pc}
 8011c12:	bf00      	nop
 8011c14:	20004a08 	.word	0x20004a08

08011c18 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8011c18:	b580      	push	{r7, lr}
 8011c1a:	b086      	sub	sp, #24
 8011c1c:	af00      	add	r7, sp, #0
 8011c1e:	60f8      	str	r0, [r7, #12]
 8011c20:	60b9      	str	r1, [r7, #8]
 8011c22:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8011c24:	68fb      	ldr	r3, [r7, #12]
 8011c26:	2b00      	cmp	r3, #0
 8011c28:	d109      	bne.n	8011c3e <vTaskPlaceOnEventListRestricted+0x26>
 8011c2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011c2e:	f383 8811 	msr	BASEPRI, r3
 8011c32:	f3bf 8f6f 	isb	sy
 8011c36:	f3bf 8f4f 	dsb	sy
 8011c3a:	617b      	str	r3, [r7, #20]
 8011c3c:	e7fe      	b.n	8011c3c <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8011c3e:	4b0a      	ldr	r3, [pc, #40]	; (8011c68 <vTaskPlaceOnEventListRestricted+0x50>)
 8011c40:	681b      	ldr	r3, [r3, #0]
 8011c42:	3318      	adds	r3, #24
 8011c44:	4619      	mov	r1, r3
 8011c46:	68f8      	ldr	r0, [r7, #12]
 8011c48:	f7fe fa5d 	bl	8010106 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8011c4c:	687b      	ldr	r3, [r7, #4]
 8011c4e:	2b00      	cmp	r3, #0
 8011c50:	d002      	beq.n	8011c58 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 8011c52:	f04f 33ff 	mov.w	r3, #4294967295
 8011c56:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8011c58:	6879      	ldr	r1, [r7, #4]
 8011c5a:	68b8      	ldr	r0, [r7, #8]
 8011c5c:	f000 fdaa 	bl	80127b4 <prvAddCurrentTaskToDelayedList>
	}
 8011c60:	bf00      	nop
 8011c62:	3718      	adds	r7, #24
 8011c64:	46bd      	mov	sp, r7
 8011c66:	bd80      	pop	{r7, pc}
 8011c68:	20004a08 	.word	0x20004a08

08011c6c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8011c6c:	b580      	push	{r7, lr}
 8011c6e:	b086      	sub	sp, #24
 8011c70:	af00      	add	r7, sp, #0
 8011c72:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011c74:	687b      	ldr	r3, [r7, #4]
 8011c76:	68db      	ldr	r3, [r3, #12]
 8011c78:	68db      	ldr	r3, [r3, #12]
 8011c7a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8011c7c:	693b      	ldr	r3, [r7, #16]
 8011c7e:	2b00      	cmp	r3, #0
 8011c80:	d109      	bne.n	8011c96 <xTaskRemoveFromEventList+0x2a>
 8011c82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011c86:	f383 8811 	msr	BASEPRI, r3
 8011c8a:	f3bf 8f6f 	isb	sy
 8011c8e:	f3bf 8f4f 	dsb	sy
 8011c92:	60fb      	str	r3, [r7, #12]
 8011c94:	e7fe      	b.n	8011c94 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8011c96:	693b      	ldr	r3, [r7, #16]
 8011c98:	3318      	adds	r3, #24
 8011c9a:	4618      	mov	r0, r3
 8011c9c:	f7fe fa90 	bl	80101c0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8011ca0:	4b1e      	ldr	r3, [pc, #120]	; (8011d1c <xTaskRemoveFromEventList+0xb0>)
 8011ca2:	681b      	ldr	r3, [r3, #0]
 8011ca4:	2b00      	cmp	r3, #0
 8011ca6:	d11f      	bne.n	8011ce8 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8011ca8:	693b      	ldr	r3, [r7, #16]
 8011caa:	3304      	adds	r3, #4
 8011cac:	4618      	mov	r0, r3
 8011cae:	f7fe fa87 	bl	80101c0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8011cb2:	693b      	ldr	r3, [r7, #16]
 8011cb4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011cb6:	4b1a      	ldr	r3, [pc, #104]	; (8011d20 <xTaskRemoveFromEventList+0xb4>)
 8011cb8:	681b      	ldr	r3, [r3, #0]
 8011cba:	429a      	cmp	r2, r3
 8011cbc:	d903      	bls.n	8011cc6 <xTaskRemoveFromEventList+0x5a>
 8011cbe:	693b      	ldr	r3, [r7, #16]
 8011cc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011cc2:	4a17      	ldr	r2, [pc, #92]	; (8011d20 <xTaskRemoveFromEventList+0xb4>)
 8011cc4:	6013      	str	r3, [r2, #0]
 8011cc6:	693b      	ldr	r3, [r7, #16]
 8011cc8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011cca:	4613      	mov	r3, r2
 8011ccc:	009b      	lsls	r3, r3, #2
 8011cce:	4413      	add	r3, r2
 8011cd0:	009b      	lsls	r3, r3, #2
 8011cd2:	4a14      	ldr	r2, [pc, #80]	; (8011d24 <xTaskRemoveFromEventList+0xb8>)
 8011cd4:	441a      	add	r2, r3
 8011cd6:	693b      	ldr	r3, [r7, #16]
 8011cd8:	3304      	adds	r3, #4
 8011cda:	4619      	mov	r1, r3
 8011cdc:	4610      	mov	r0, r2
 8011cde:	f7fe fa12 	bl	8010106 <vListInsertEnd>
			normally left unchanged, because it is automatically reset to a new
			value when the tick count equals xNextTaskUnblockTime.  However if
			tickless idling is used it might be more important to enter sleep mode
			at the earliest possible time - so reset xNextTaskUnblockTime here to
			ensure it is updated at the earliest possible time. */
			prvResetNextTaskUnblockTime();
 8011ce2:	f000 f981 	bl	8011fe8 <prvResetNextTaskUnblockTime>
 8011ce6:	e005      	b.n	8011cf4 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8011ce8:	693b      	ldr	r3, [r7, #16]
 8011cea:	3318      	adds	r3, #24
 8011cec:	4619      	mov	r1, r3
 8011cee:	480e      	ldr	r0, [pc, #56]	; (8011d28 <xTaskRemoveFromEventList+0xbc>)
 8011cf0:	f7fe fa09 	bl	8010106 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8011cf4:	693b      	ldr	r3, [r7, #16]
 8011cf6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011cf8:	4b0c      	ldr	r3, [pc, #48]	; (8011d2c <xTaskRemoveFromEventList+0xc0>)
 8011cfa:	681b      	ldr	r3, [r3, #0]
 8011cfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011cfe:	429a      	cmp	r2, r3
 8011d00:	d905      	bls.n	8011d0e <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8011d02:	2301      	movs	r3, #1
 8011d04:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8011d06:	4b0a      	ldr	r3, [pc, #40]	; (8011d30 <xTaskRemoveFromEventList+0xc4>)
 8011d08:	2201      	movs	r2, #1
 8011d0a:	601a      	str	r2, [r3, #0]
 8011d0c:	e001      	b.n	8011d12 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8011d0e:	2300      	movs	r3, #0
 8011d10:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8011d12:	697b      	ldr	r3, [r7, #20]
}
 8011d14:	4618      	mov	r0, r3
 8011d16:	3718      	adds	r7, #24
 8011d18:	46bd      	mov	sp, r7
 8011d1a:	bd80      	pop	{r7, pc}
 8011d1c:	20004f04 	.word	0x20004f04
 8011d20:	20004ee4 	.word	0x20004ee4
 8011d24:	20004a0c 	.word	0x20004a0c
 8011d28:	20004e9c 	.word	0x20004e9c
 8011d2c:	20004a08 	.word	0x20004a08
 8011d30:	20004ef0 	.word	0x20004ef0

08011d34 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8011d34:	b480      	push	{r7}
 8011d36:	b083      	sub	sp, #12
 8011d38:	af00      	add	r7, sp, #0
 8011d3a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8011d3c:	4b06      	ldr	r3, [pc, #24]	; (8011d58 <vTaskInternalSetTimeOutState+0x24>)
 8011d3e:	681a      	ldr	r2, [r3, #0]
 8011d40:	687b      	ldr	r3, [r7, #4]
 8011d42:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8011d44:	4b05      	ldr	r3, [pc, #20]	; (8011d5c <vTaskInternalSetTimeOutState+0x28>)
 8011d46:	681a      	ldr	r2, [r3, #0]
 8011d48:	687b      	ldr	r3, [r7, #4]
 8011d4a:	605a      	str	r2, [r3, #4]
}
 8011d4c:	bf00      	nop
 8011d4e:	370c      	adds	r7, #12
 8011d50:	46bd      	mov	sp, r7
 8011d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d56:	4770      	bx	lr
 8011d58:	20004ef4 	.word	0x20004ef4
 8011d5c:	20004ee0 	.word	0x20004ee0

08011d60 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8011d60:	b580      	push	{r7, lr}
 8011d62:	b088      	sub	sp, #32
 8011d64:	af00      	add	r7, sp, #0
 8011d66:	6078      	str	r0, [r7, #4]
 8011d68:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8011d6a:	687b      	ldr	r3, [r7, #4]
 8011d6c:	2b00      	cmp	r3, #0
 8011d6e:	d109      	bne.n	8011d84 <xTaskCheckForTimeOut+0x24>
 8011d70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011d74:	f383 8811 	msr	BASEPRI, r3
 8011d78:	f3bf 8f6f 	isb	sy
 8011d7c:	f3bf 8f4f 	dsb	sy
 8011d80:	613b      	str	r3, [r7, #16]
 8011d82:	e7fe      	b.n	8011d82 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8011d84:	683b      	ldr	r3, [r7, #0]
 8011d86:	2b00      	cmp	r3, #0
 8011d88:	d109      	bne.n	8011d9e <xTaskCheckForTimeOut+0x3e>
 8011d8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011d8e:	f383 8811 	msr	BASEPRI, r3
 8011d92:	f3bf 8f6f 	isb	sy
 8011d96:	f3bf 8f4f 	dsb	sy
 8011d9a:	60fb      	str	r3, [r7, #12]
 8011d9c:	e7fe      	b.n	8011d9c <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8011d9e:	f7fd fe95 	bl	800facc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8011da2:	4b1d      	ldr	r3, [pc, #116]	; (8011e18 <xTaskCheckForTimeOut+0xb8>)
 8011da4:	681b      	ldr	r3, [r3, #0]
 8011da6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8011da8:	687b      	ldr	r3, [r7, #4]
 8011daa:	685b      	ldr	r3, [r3, #4]
 8011dac:	69ba      	ldr	r2, [r7, #24]
 8011dae:	1ad3      	subs	r3, r2, r3
 8011db0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8011db2:	683b      	ldr	r3, [r7, #0]
 8011db4:	681b      	ldr	r3, [r3, #0]
 8011db6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011dba:	d102      	bne.n	8011dc2 <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8011dbc:	2300      	movs	r3, #0
 8011dbe:	61fb      	str	r3, [r7, #28]
 8011dc0:	e023      	b.n	8011e0a <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8011dc2:	687b      	ldr	r3, [r7, #4]
 8011dc4:	681a      	ldr	r2, [r3, #0]
 8011dc6:	4b15      	ldr	r3, [pc, #84]	; (8011e1c <xTaskCheckForTimeOut+0xbc>)
 8011dc8:	681b      	ldr	r3, [r3, #0]
 8011dca:	429a      	cmp	r2, r3
 8011dcc:	d007      	beq.n	8011dde <xTaskCheckForTimeOut+0x7e>
 8011dce:	687b      	ldr	r3, [r7, #4]
 8011dd0:	685b      	ldr	r3, [r3, #4]
 8011dd2:	69ba      	ldr	r2, [r7, #24]
 8011dd4:	429a      	cmp	r2, r3
 8011dd6:	d302      	bcc.n	8011dde <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8011dd8:	2301      	movs	r3, #1
 8011dda:	61fb      	str	r3, [r7, #28]
 8011ddc:	e015      	b.n	8011e0a <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8011dde:	683b      	ldr	r3, [r7, #0]
 8011de0:	681b      	ldr	r3, [r3, #0]
 8011de2:	697a      	ldr	r2, [r7, #20]
 8011de4:	429a      	cmp	r2, r3
 8011de6:	d20b      	bcs.n	8011e00 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8011de8:	683b      	ldr	r3, [r7, #0]
 8011dea:	681a      	ldr	r2, [r3, #0]
 8011dec:	697b      	ldr	r3, [r7, #20]
 8011dee:	1ad2      	subs	r2, r2, r3
 8011df0:	683b      	ldr	r3, [r7, #0]
 8011df2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8011df4:	6878      	ldr	r0, [r7, #4]
 8011df6:	f7ff ff9d 	bl	8011d34 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8011dfa:	2300      	movs	r3, #0
 8011dfc:	61fb      	str	r3, [r7, #28]
 8011dfe:	e004      	b.n	8011e0a <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8011e00:	683b      	ldr	r3, [r7, #0]
 8011e02:	2200      	movs	r2, #0
 8011e04:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8011e06:	2301      	movs	r3, #1
 8011e08:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8011e0a:	f7fd fe8d 	bl	800fb28 <vPortExitCritical>

	return xReturn;
 8011e0e:	69fb      	ldr	r3, [r7, #28]
}
 8011e10:	4618      	mov	r0, r3
 8011e12:	3720      	adds	r7, #32
 8011e14:	46bd      	mov	sp, r7
 8011e16:	bd80      	pop	{r7, pc}
 8011e18:	20004ee0 	.word	0x20004ee0
 8011e1c:	20004ef4 	.word	0x20004ef4

08011e20 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8011e20:	b480      	push	{r7}
 8011e22:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8011e24:	4b03      	ldr	r3, [pc, #12]	; (8011e34 <vTaskMissedYield+0x14>)
 8011e26:	2201      	movs	r2, #1
 8011e28:	601a      	str	r2, [r3, #0]
}
 8011e2a:	bf00      	nop
 8011e2c:	46bd      	mov	sp, r7
 8011e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e32:	4770      	bx	lr
 8011e34:	20004ef0 	.word	0x20004ef0

08011e38 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8011e38:	b580      	push	{r7, lr}
 8011e3a:	b084      	sub	sp, #16
 8011e3c:	af00      	add	r7, sp, #0
 8011e3e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8011e40:	f000 f878 	bl	8011f34 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8011e44:	4b17      	ldr	r3, [pc, #92]	; (8011ea4 <prvIdleTask+0x6c>)
 8011e46:	681b      	ldr	r3, [r3, #0]
 8011e48:	2b01      	cmp	r3, #1
 8011e4a:	d907      	bls.n	8011e5c <prvIdleTask+0x24>
			{
				taskYIELD();
 8011e4c:	4b16      	ldr	r3, [pc, #88]	; (8011ea8 <prvIdleTask+0x70>)
 8011e4e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011e52:	601a      	str	r2, [r3, #0]
 8011e54:	f3bf 8f4f 	dsb	sy
 8011e58:	f3bf 8f6f 	isb	sy
			/* It is not desirable to suspend then resume the scheduler on
			each iteration of the idle task.  Therefore, a preliminary
			test of the expected idle time is performed without the
			scheduler suspended.  The result here is not necessarily
			valid. */
			xExpectedIdleTime = prvGetExpectedIdleTime();
 8011e5c:	f7ff fcc0 	bl	80117e0 <prvGetExpectedIdleTime>
 8011e60:	60f8      	str	r0, [r7, #12]

			if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
 8011e62:	68fb      	ldr	r3, [r7, #12]
 8011e64:	2b01      	cmp	r3, #1
 8011e66:	d9eb      	bls.n	8011e40 <prvIdleTask+0x8>
			{
				vTaskSuspendAll();
 8011e68:	f7ff fcac 	bl	80117c4 <vTaskSuspendAll>
				{
					/* Now the scheduler is suspended, the expected idle
					time can be sampled again, and this time its value can
					be used. */
					configASSERT( xNextTaskUnblockTime >= xTickCount );
 8011e6c:	4b0f      	ldr	r3, [pc, #60]	; (8011eac <prvIdleTask+0x74>)
 8011e6e:	681a      	ldr	r2, [r3, #0]
 8011e70:	4b0f      	ldr	r3, [pc, #60]	; (8011eb0 <prvIdleTask+0x78>)
 8011e72:	681b      	ldr	r3, [r3, #0]
 8011e74:	429a      	cmp	r2, r3
 8011e76:	d209      	bcs.n	8011e8c <prvIdleTask+0x54>
 8011e78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011e7c:	f383 8811 	msr	BASEPRI, r3
 8011e80:	f3bf 8f6f 	isb	sy
 8011e84:	f3bf 8f4f 	dsb	sy
 8011e88:	60bb      	str	r3, [r7, #8]
 8011e8a:	e7fe      	b.n	8011e8a <prvIdleTask+0x52>
					xExpectedIdleTime = prvGetExpectedIdleTime();
 8011e8c:	f7ff fca8 	bl	80117e0 <prvGetExpectedIdleTime>
 8011e90:	60f8      	str	r0, [r7, #12]
					/* Define the following macro to set xExpectedIdleTime to 0
					if the application does not want
					portSUPPRESS_TICKS_AND_SLEEP() to be called. */
					configPRE_SUPPRESS_TICKS_AND_SLEEP_PROCESSING( xExpectedIdleTime );

					if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
 8011e92:	68fb      	ldr	r3, [r7, #12]
 8011e94:	2b01      	cmp	r3, #1
 8011e96:	d902      	bls.n	8011e9e <prvIdleTask+0x66>
					{
						traceLOW_POWER_IDLE_BEGIN();
						portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime );
 8011e98:	68f8      	ldr	r0, [r7, #12]
 8011e9a:	f7f1 f87b 	bl	8002f94 <vPortSuppressTicksAndSleep>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}
				( void ) xTaskResumeAll();
 8011e9e:	f7ff fcd7 	bl	8011850 <xTaskResumeAll>
		prvCheckTasksWaitingTermination();
 8011ea2:	e7cd      	b.n	8011e40 <prvIdleTask+0x8>
 8011ea4:	20004a0c 	.word	0x20004a0c
 8011ea8:	e000ed04 	.word	0xe000ed04
 8011eac:	20004efc 	.word	0x20004efc
 8011eb0:	20004ee0 	.word	0x20004ee0

08011eb4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8011eb4:	b580      	push	{r7, lr}
 8011eb6:	b082      	sub	sp, #8
 8011eb8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8011eba:	2300      	movs	r3, #0
 8011ebc:	607b      	str	r3, [r7, #4]
 8011ebe:	e00c      	b.n	8011eda <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8011ec0:	687a      	ldr	r2, [r7, #4]
 8011ec2:	4613      	mov	r3, r2
 8011ec4:	009b      	lsls	r3, r3, #2
 8011ec6:	4413      	add	r3, r2
 8011ec8:	009b      	lsls	r3, r3, #2
 8011eca:	4a12      	ldr	r2, [pc, #72]	; (8011f14 <prvInitialiseTaskLists+0x60>)
 8011ecc:	4413      	add	r3, r2
 8011ece:	4618      	mov	r0, r3
 8011ed0:	f7fe f8ec 	bl	80100ac <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8011ed4:	687b      	ldr	r3, [r7, #4]
 8011ed6:	3301      	adds	r3, #1
 8011ed8:	607b      	str	r3, [r7, #4]
 8011eda:	687b      	ldr	r3, [r7, #4]
 8011edc:	2b37      	cmp	r3, #55	; 0x37
 8011ede:	d9ef      	bls.n	8011ec0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8011ee0:	480d      	ldr	r0, [pc, #52]	; (8011f18 <prvInitialiseTaskLists+0x64>)
 8011ee2:	f7fe f8e3 	bl	80100ac <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8011ee6:	480d      	ldr	r0, [pc, #52]	; (8011f1c <prvInitialiseTaskLists+0x68>)
 8011ee8:	f7fe f8e0 	bl	80100ac <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8011eec:	480c      	ldr	r0, [pc, #48]	; (8011f20 <prvInitialiseTaskLists+0x6c>)
 8011eee:	f7fe f8dd 	bl	80100ac <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8011ef2:	480c      	ldr	r0, [pc, #48]	; (8011f24 <prvInitialiseTaskLists+0x70>)
 8011ef4:	f7fe f8da 	bl	80100ac <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8011ef8:	480b      	ldr	r0, [pc, #44]	; (8011f28 <prvInitialiseTaskLists+0x74>)
 8011efa:	f7fe f8d7 	bl	80100ac <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8011efe:	4b0b      	ldr	r3, [pc, #44]	; (8011f2c <prvInitialiseTaskLists+0x78>)
 8011f00:	4a05      	ldr	r2, [pc, #20]	; (8011f18 <prvInitialiseTaskLists+0x64>)
 8011f02:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8011f04:	4b0a      	ldr	r3, [pc, #40]	; (8011f30 <prvInitialiseTaskLists+0x7c>)
 8011f06:	4a05      	ldr	r2, [pc, #20]	; (8011f1c <prvInitialiseTaskLists+0x68>)
 8011f08:	601a      	str	r2, [r3, #0]
}
 8011f0a:	bf00      	nop
 8011f0c:	3708      	adds	r7, #8
 8011f0e:	46bd      	mov	sp, r7
 8011f10:	bd80      	pop	{r7, pc}
 8011f12:	bf00      	nop
 8011f14:	20004a0c 	.word	0x20004a0c
 8011f18:	20004e6c 	.word	0x20004e6c
 8011f1c:	20004e80 	.word	0x20004e80
 8011f20:	20004e9c 	.word	0x20004e9c
 8011f24:	20004eb0 	.word	0x20004eb0
 8011f28:	20004ec8 	.word	0x20004ec8
 8011f2c:	20004e94 	.word	0x20004e94
 8011f30:	20004e98 	.word	0x20004e98

08011f34 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8011f34:	b580      	push	{r7, lr}
 8011f36:	b082      	sub	sp, #8
 8011f38:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8011f3a:	e019      	b.n	8011f70 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8011f3c:	f7fd fdc6 	bl	800facc <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011f40:	4b0f      	ldr	r3, [pc, #60]	; (8011f80 <prvCheckTasksWaitingTermination+0x4c>)
 8011f42:	68db      	ldr	r3, [r3, #12]
 8011f44:	68db      	ldr	r3, [r3, #12]
 8011f46:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8011f48:	687b      	ldr	r3, [r7, #4]
 8011f4a:	3304      	adds	r3, #4
 8011f4c:	4618      	mov	r0, r3
 8011f4e:	f7fe f937 	bl	80101c0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8011f52:	4b0c      	ldr	r3, [pc, #48]	; (8011f84 <prvCheckTasksWaitingTermination+0x50>)
 8011f54:	681b      	ldr	r3, [r3, #0]
 8011f56:	3b01      	subs	r3, #1
 8011f58:	4a0a      	ldr	r2, [pc, #40]	; (8011f84 <prvCheckTasksWaitingTermination+0x50>)
 8011f5a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8011f5c:	4b0a      	ldr	r3, [pc, #40]	; (8011f88 <prvCheckTasksWaitingTermination+0x54>)
 8011f5e:	681b      	ldr	r3, [r3, #0]
 8011f60:	3b01      	subs	r3, #1
 8011f62:	4a09      	ldr	r2, [pc, #36]	; (8011f88 <prvCheckTasksWaitingTermination+0x54>)
 8011f64:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8011f66:	f7fd fddf 	bl	800fb28 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8011f6a:	6878      	ldr	r0, [r7, #4]
 8011f6c:	f000 f80e 	bl	8011f8c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8011f70:	4b05      	ldr	r3, [pc, #20]	; (8011f88 <prvCheckTasksWaitingTermination+0x54>)
 8011f72:	681b      	ldr	r3, [r3, #0]
 8011f74:	2b00      	cmp	r3, #0
 8011f76:	d1e1      	bne.n	8011f3c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8011f78:	bf00      	nop
 8011f7a:	3708      	adds	r7, #8
 8011f7c:	46bd      	mov	sp, r7
 8011f7e:	bd80      	pop	{r7, pc}
 8011f80:	20004eb0 	.word	0x20004eb0
 8011f84:	20004edc 	.word	0x20004edc
 8011f88:	20004ec4 	.word	0x20004ec4

08011f8c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8011f8c:	b580      	push	{r7, lr}
 8011f8e:	b084      	sub	sp, #16
 8011f90:	af00      	add	r7, sp, #0
 8011f92:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8011f94:	687b      	ldr	r3, [r7, #4]
 8011f96:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8011f9a:	2b00      	cmp	r3, #0
 8011f9c:	d108      	bne.n	8011fb0 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8011f9e:	687b      	ldr	r3, [r7, #4]
 8011fa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011fa2:	4618      	mov	r0, r3
 8011fa4:	f7fd ff6e 	bl	800fe84 <vPortFree>
				vPortFree( pxTCB );
 8011fa8:	6878      	ldr	r0, [r7, #4]
 8011faa:	f7fd ff6b 	bl	800fe84 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8011fae:	e017      	b.n	8011fe0 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8011fb0:	687b      	ldr	r3, [r7, #4]
 8011fb2:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8011fb6:	2b01      	cmp	r3, #1
 8011fb8:	d103      	bne.n	8011fc2 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8011fba:	6878      	ldr	r0, [r7, #4]
 8011fbc:	f7fd ff62 	bl	800fe84 <vPortFree>
	}
 8011fc0:	e00e      	b.n	8011fe0 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8011fc2:	687b      	ldr	r3, [r7, #4]
 8011fc4:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8011fc8:	2b02      	cmp	r3, #2
 8011fca:	d009      	beq.n	8011fe0 <prvDeleteTCB+0x54>
 8011fcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011fd0:	f383 8811 	msr	BASEPRI, r3
 8011fd4:	f3bf 8f6f 	isb	sy
 8011fd8:	f3bf 8f4f 	dsb	sy
 8011fdc:	60fb      	str	r3, [r7, #12]
 8011fde:	e7fe      	b.n	8011fde <prvDeleteTCB+0x52>
	}
 8011fe0:	bf00      	nop
 8011fe2:	3710      	adds	r7, #16
 8011fe4:	46bd      	mov	sp, r7
 8011fe6:	bd80      	pop	{r7, pc}

08011fe8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8011fe8:	b480      	push	{r7}
 8011fea:	b083      	sub	sp, #12
 8011fec:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8011fee:	4b0c      	ldr	r3, [pc, #48]	; (8012020 <prvResetNextTaskUnblockTime+0x38>)
 8011ff0:	681b      	ldr	r3, [r3, #0]
 8011ff2:	681b      	ldr	r3, [r3, #0]
 8011ff4:	2b00      	cmp	r3, #0
 8011ff6:	d104      	bne.n	8012002 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8011ff8:	4b0a      	ldr	r3, [pc, #40]	; (8012024 <prvResetNextTaskUnblockTime+0x3c>)
 8011ffa:	f04f 32ff 	mov.w	r2, #4294967295
 8011ffe:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8012000:	e008      	b.n	8012014 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8012002:	4b07      	ldr	r3, [pc, #28]	; (8012020 <prvResetNextTaskUnblockTime+0x38>)
 8012004:	681b      	ldr	r3, [r3, #0]
 8012006:	68db      	ldr	r3, [r3, #12]
 8012008:	68db      	ldr	r3, [r3, #12]
 801200a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 801200c:	687b      	ldr	r3, [r7, #4]
 801200e:	685b      	ldr	r3, [r3, #4]
 8012010:	4a04      	ldr	r2, [pc, #16]	; (8012024 <prvResetNextTaskUnblockTime+0x3c>)
 8012012:	6013      	str	r3, [r2, #0]
}
 8012014:	bf00      	nop
 8012016:	370c      	adds	r7, #12
 8012018:	46bd      	mov	sp, r7
 801201a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801201e:	4770      	bx	lr
 8012020:	20004e94 	.word	0x20004e94
 8012024:	20004efc 	.word	0x20004efc

08012028 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8012028:	b480      	push	{r7}
 801202a:	b083      	sub	sp, #12
 801202c:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 801202e:	4b05      	ldr	r3, [pc, #20]	; (8012044 <xTaskGetCurrentTaskHandle+0x1c>)
 8012030:	681b      	ldr	r3, [r3, #0]
 8012032:	607b      	str	r3, [r7, #4]

		return xReturn;
 8012034:	687b      	ldr	r3, [r7, #4]
	}
 8012036:	4618      	mov	r0, r3
 8012038:	370c      	adds	r7, #12
 801203a:	46bd      	mov	sp, r7
 801203c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012040:	4770      	bx	lr
 8012042:	bf00      	nop
 8012044:	20004a08 	.word	0x20004a08

08012048 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8012048:	b480      	push	{r7}
 801204a:	b083      	sub	sp, #12
 801204c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 801204e:	4b0b      	ldr	r3, [pc, #44]	; (801207c <xTaskGetSchedulerState+0x34>)
 8012050:	681b      	ldr	r3, [r3, #0]
 8012052:	2b00      	cmp	r3, #0
 8012054:	d102      	bne.n	801205c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8012056:	2301      	movs	r3, #1
 8012058:	607b      	str	r3, [r7, #4]
 801205a:	e008      	b.n	801206e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801205c:	4b08      	ldr	r3, [pc, #32]	; (8012080 <xTaskGetSchedulerState+0x38>)
 801205e:	681b      	ldr	r3, [r3, #0]
 8012060:	2b00      	cmp	r3, #0
 8012062:	d102      	bne.n	801206a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8012064:	2302      	movs	r3, #2
 8012066:	607b      	str	r3, [r7, #4]
 8012068:	e001      	b.n	801206e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 801206a:	2300      	movs	r3, #0
 801206c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 801206e:	687b      	ldr	r3, [r7, #4]
	}
 8012070:	4618      	mov	r0, r3
 8012072:	370c      	adds	r7, #12
 8012074:	46bd      	mov	sp, r7
 8012076:	f85d 7b04 	ldr.w	r7, [sp], #4
 801207a:	4770      	bx	lr
 801207c:	20004ee8 	.word	0x20004ee8
 8012080:	20004f04 	.word	0x20004f04

08012084 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8012084:	b580      	push	{r7, lr}
 8012086:	b084      	sub	sp, #16
 8012088:	af00      	add	r7, sp, #0
 801208a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 801208c:	687b      	ldr	r3, [r7, #4]
 801208e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8012090:	2300      	movs	r3, #0
 8012092:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8012094:	687b      	ldr	r3, [r7, #4]
 8012096:	2b00      	cmp	r3, #0
 8012098:	d051      	beq.n	801213e <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 801209a:	68bb      	ldr	r3, [r7, #8]
 801209c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801209e:	4b2a      	ldr	r3, [pc, #168]	; (8012148 <xTaskPriorityInherit+0xc4>)
 80120a0:	681b      	ldr	r3, [r3, #0]
 80120a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80120a4:	429a      	cmp	r2, r3
 80120a6:	d241      	bcs.n	801212c <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80120a8:	68bb      	ldr	r3, [r7, #8]
 80120aa:	699b      	ldr	r3, [r3, #24]
 80120ac:	2b00      	cmp	r3, #0
 80120ae:	db06      	blt.n	80120be <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80120b0:	4b25      	ldr	r3, [pc, #148]	; (8012148 <xTaskPriorityInherit+0xc4>)
 80120b2:	681b      	ldr	r3, [r3, #0]
 80120b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80120b6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80120ba:	68bb      	ldr	r3, [r7, #8]
 80120bc:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80120be:	68bb      	ldr	r3, [r7, #8]
 80120c0:	6959      	ldr	r1, [r3, #20]
 80120c2:	68bb      	ldr	r3, [r7, #8]
 80120c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80120c6:	4613      	mov	r3, r2
 80120c8:	009b      	lsls	r3, r3, #2
 80120ca:	4413      	add	r3, r2
 80120cc:	009b      	lsls	r3, r3, #2
 80120ce:	4a1f      	ldr	r2, [pc, #124]	; (801214c <xTaskPriorityInherit+0xc8>)
 80120d0:	4413      	add	r3, r2
 80120d2:	4299      	cmp	r1, r3
 80120d4:	d122      	bne.n	801211c <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80120d6:	68bb      	ldr	r3, [r7, #8]
 80120d8:	3304      	adds	r3, #4
 80120da:	4618      	mov	r0, r3
 80120dc:	f7fe f870 	bl	80101c0 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80120e0:	4b19      	ldr	r3, [pc, #100]	; (8012148 <xTaskPriorityInherit+0xc4>)
 80120e2:	681b      	ldr	r3, [r3, #0]
 80120e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80120e6:	68bb      	ldr	r3, [r7, #8]
 80120e8:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80120ea:	68bb      	ldr	r3, [r7, #8]
 80120ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80120ee:	4b18      	ldr	r3, [pc, #96]	; (8012150 <xTaskPriorityInherit+0xcc>)
 80120f0:	681b      	ldr	r3, [r3, #0]
 80120f2:	429a      	cmp	r2, r3
 80120f4:	d903      	bls.n	80120fe <xTaskPriorityInherit+0x7a>
 80120f6:	68bb      	ldr	r3, [r7, #8]
 80120f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80120fa:	4a15      	ldr	r2, [pc, #84]	; (8012150 <xTaskPriorityInherit+0xcc>)
 80120fc:	6013      	str	r3, [r2, #0]
 80120fe:	68bb      	ldr	r3, [r7, #8]
 8012100:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012102:	4613      	mov	r3, r2
 8012104:	009b      	lsls	r3, r3, #2
 8012106:	4413      	add	r3, r2
 8012108:	009b      	lsls	r3, r3, #2
 801210a:	4a10      	ldr	r2, [pc, #64]	; (801214c <xTaskPriorityInherit+0xc8>)
 801210c:	441a      	add	r2, r3
 801210e:	68bb      	ldr	r3, [r7, #8]
 8012110:	3304      	adds	r3, #4
 8012112:	4619      	mov	r1, r3
 8012114:	4610      	mov	r0, r2
 8012116:	f7fd fff6 	bl	8010106 <vListInsertEnd>
 801211a:	e004      	b.n	8012126 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 801211c:	4b0a      	ldr	r3, [pc, #40]	; (8012148 <xTaskPriorityInherit+0xc4>)
 801211e:	681b      	ldr	r3, [r3, #0]
 8012120:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012122:	68bb      	ldr	r3, [r7, #8]
 8012124:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8012126:	2301      	movs	r3, #1
 8012128:	60fb      	str	r3, [r7, #12]
 801212a:	e008      	b.n	801213e <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 801212c:	68bb      	ldr	r3, [r7, #8]
 801212e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8012130:	4b05      	ldr	r3, [pc, #20]	; (8012148 <xTaskPriorityInherit+0xc4>)
 8012132:	681b      	ldr	r3, [r3, #0]
 8012134:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012136:	429a      	cmp	r2, r3
 8012138:	d201      	bcs.n	801213e <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 801213a:	2301      	movs	r3, #1
 801213c:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 801213e:	68fb      	ldr	r3, [r7, #12]
	}
 8012140:	4618      	mov	r0, r3
 8012142:	3710      	adds	r7, #16
 8012144:	46bd      	mov	sp, r7
 8012146:	bd80      	pop	{r7, pc}
 8012148:	20004a08 	.word	0x20004a08
 801214c:	20004a0c 	.word	0x20004a0c
 8012150:	20004ee4 	.word	0x20004ee4

08012154 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8012154:	b580      	push	{r7, lr}
 8012156:	b086      	sub	sp, #24
 8012158:	af00      	add	r7, sp, #0
 801215a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 801215c:	687b      	ldr	r3, [r7, #4]
 801215e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8012160:	2300      	movs	r3, #0
 8012162:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8012164:	687b      	ldr	r3, [r7, #4]
 8012166:	2b00      	cmp	r3, #0
 8012168:	d054      	beq.n	8012214 <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 801216a:	4b2d      	ldr	r3, [pc, #180]	; (8012220 <xTaskPriorityDisinherit+0xcc>)
 801216c:	681b      	ldr	r3, [r3, #0]
 801216e:	693a      	ldr	r2, [r7, #16]
 8012170:	429a      	cmp	r2, r3
 8012172:	d009      	beq.n	8012188 <xTaskPriorityDisinherit+0x34>
 8012174:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012178:	f383 8811 	msr	BASEPRI, r3
 801217c:	f3bf 8f6f 	isb	sy
 8012180:	f3bf 8f4f 	dsb	sy
 8012184:	60fb      	str	r3, [r7, #12]
 8012186:	e7fe      	b.n	8012186 <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8012188:	693b      	ldr	r3, [r7, #16]
 801218a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801218c:	2b00      	cmp	r3, #0
 801218e:	d109      	bne.n	80121a4 <xTaskPriorityDisinherit+0x50>
 8012190:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012194:	f383 8811 	msr	BASEPRI, r3
 8012198:	f3bf 8f6f 	isb	sy
 801219c:	f3bf 8f4f 	dsb	sy
 80121a0:	60bb      	str	r3, [r7, #8]
 80121a2:	e7fe      	b.n	80121a2 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 80121a4:	693b      	ldr	r3, [r7, #16]
 80121a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80121a8:	1e5a      	subs	r2, r3, #1
 80121aa:	693b      	ldr	r3, [r7, #16]
 80121ac:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80121ae:	693b      	ldr	r3, [r7, #16]
 80121b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80121b2:	693b      	ldr	r3, [r7, #16]
 80121b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80121b6:	429a      	cmp	r2, r3
 80121b8:	d02c      	beq.n	8012214 <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80121ba:	693b      	ldr	r3, [r7, #16]
 80121bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80121be:	2b00      	cmp	r3, #0
 80121c0:	d128      	bne.n	8012214 <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80121c2:	693b      	ldr	r3, [r7, #16]
 80121c4:	3304      	adds	r3, #4
 80121c6:	4618      	mov	r0, r3
 80121c8:	f7fd fffa 	bl	80101c0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80121cc:	693b      	ldr	r3, [r7, #16]
 80121ce:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80121d0:	693b      	ldr	r3, [r7, #16]
 80121d2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80121d4:	693b      	ldr	r3, [r7, #16]
 80121d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80121d8:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80121dc:	693b      	ldr	r3, [r7, #16]
 80121de:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80121e0:	693b      	ldr	r3, [r7, #16]
 80121e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80121e4:	4b0f      	ldr	r3, [pc, #60]	; (8012224 <xTaskPriorityDisinherit+0xd0>)
 80121e6:	681b      	ldr	r3, [r3, #0]
 80121e8:	429a      	cmp	r2, r3
 80121ea:	d903      	bls.n	80121f4 <xTaskPriorityDisinherit+0xa0>
 80121ec:	693b      	ldr	r3, [r7, #16]
 80121ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80121f0:	4a0c      	ldr	r2, [pc, #48]	; (8012224 <xTaskPriorityDisinherit+0xd0>)
 80121f2:	6013      	str	r3, [r2, #0]
 80121f4:	693b      	ldr	r3, [r7, #16]
 80121f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80121f8:	4613      	mov	r3, r2
 80121fa:	009b      	lsls	r3, r3, #2
 80121fc:	4413      	add	r3, r2
 80121fe:	009b      	lsls	r3, r3, #2
 8012200:	4a09      	ldr	r2, [pc, #36]	; (8012228 <xTaskPriorityDisinherit+0xd4>)
 8012202:	441a      	add	r2, r3
 8012204:	693b      	ldr	r3, [r7, #16]
 8012206:	3304      	adds	r3, #4
 8012208:	4619      	mov	r1, r3
 801220a:	4610      	mov	r0, r2
 801220c:	f7fd ff7b 	bl	8010106 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8012210:	2301      	movs	r3, #1
 8012212:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8012214:	697b      	ldr	r3, [r7, #20]
	}
 8012216:	4618      	mov	r0, r3
 8012218:	3718      	adds	r7, #24
 801221a:	46bd      	mov	sp, r7
 801221c:	bd80      	pop	{r7, pc}
 801221e:	bf00      	nop
 8012220:	20004a08 	.word	0x20004a08
 8012224:	20004ee4 	.word	0x20004ee4
 8012228:	20004a0c 	.word	0x20004a0c

0801222c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 801222c:	b580      	push	{r7, lr}
 801222e:	b088      	sub	sp, #32
 8012230:	af00      	add	r7, sp, #0
 8012232:	6078      	str	r0, [r7, #4]
 8012234:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8012236:	687b      	ldr	r3, [r7, #4]
 8012238:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 801223a:	2301      	movs	r3, #1
 801223c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 801223e:	687b      	ldr	r3, [r7, #4]
 8012240:	2b00      	cmp	r3, #0
 8012242:	d068      	beq.n	8012316 <vTaskPriorityDisinheritAfterTimeout+0xea>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8012244:	69bb      	ldr	r3, [r7, #24]
 8012246:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012248:	2b00      	cmp	r3, #0
 801224a:	d109      	bne.n	8012260 <vTaskPriorityDisinheritAfterTimeout+0x34>
 801224c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012250:	f383 8811 	msr	BASEPRI, r3
 8012254:	f3bf 8f6f 	isb	sy
 8012258:	f3bf 8f4f 	dsb	sy
 801225c:	60fb      	str	r3, [r7, #12]
 801225e:	e7fe      	b.n	801225e <vTaskPriorityDisinheritAfterTimeout+0x32>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8012260:	69bb      	ldr	r3, [r7, #24]
 8012262:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8012264:	683a      	ldr	r2, [r7, #0]
 8012266:	429a      	cmp	r2, r3
 8012268:	d902      	bls.n	8012270 <vTaskPriorityDisinheritAfterTimeout+0x44>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 801226a:	683b      	ldr	r3, [r7, #0]
 801226c:	61fb      	str	r3, [r7, #28]
 801226e:	e002      	b.n	8012276 <vTaskPriorityDisinheritAfterTimeout+0x4a>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8012270:	69bb      	ldr	r3, [r7, #24]
 8012272:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8012274:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8012276:	69bb      	ldr	r3, [r7, #24]
 8012278:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801227a:	69fa      	ldr	r2, [r7, #28]
 801227c:	429a      	cmp	r2, r3
 801227e:	d04a      	beq.n	8012316 <vTaskPriorityDisinheritAfterTimeout+0xea>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8012280:	69bb      	ldr	r3, [r7, #24]
 8012282:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012284:	697a      	ldr	r2, [r7, #20]
 8012286:	429a      	cmp	r2, r3
 8012288:	d145      	bne.n	8012316 <vTaskPriorityDisinheritAfterTimeout+0xea>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 801228a:	4b25      	ldr	r3, [pc, #148]	; (8012320 <vTaskPriorityDisinheritAfterTimeout+0xf4>)
 801228c:	681b      	ldr	r3, [r3, #0]
 801228e:	69ba      	ldr	r2, [r7, #24]
 8012290:	429a      	cmp	r2, r3
 8012292:	d109      	bne.n	80122a8 <vTaskPriorityDisinheritAfterTimeout+0x7c>
 8012294:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012298:	f383 8811 	msr	BASEPRI, r3
 801229c:	f3bf 8f6f 	isb	sy
 80122a0:	f3bf 8f4f 	dsb	sy
 80122a4:	60bb      	str	r3, [r7, #8]
 80122a6:	e7fe      	b.n	80122a6 <vTaskPriorityDisinheritAfterTimeout+0x7a>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80122a8:	69bb      	ldr	r3, [r7, #24]
 80122aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80122ac:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80122ae:	69bb      	ldr	r3, [r7, #24]
 80122b0:	69fa      	ldr	r2, [r7, #28]
 80122b2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80122b4:	69bb      	ldr	r3, [r7, #24]
 80122b6:	699b      	ldr	r3, [r3, #24]
 80122b8:	2b00      	cmp	r3, #0
 80122ba:	db04      	blt.n	80122c6 <vTaskPriorityDisinheritAfterTimeout+0x9a>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80122bc:	69fb      	ldr	r3, [r7, #28]
 80122be:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80122c2:	69bb      	ldr	r3, [r7, #24]
 80122c4:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80122c6:	69bb      	ldr	r3, [r7, #24]
 80122c8:	6959      	ldr	r1, [r3, #20]
 80122ca:	693a      	ldr	r2, [r7, #16]
 80122cc:	4613      	mov	r3, r2
 80122ce:	009b      	lsls	r3, r3, #2
 80122d0:	4413      	add	r3, r2
 80122d2:	009b      	lsls	r3, r3, #2
 80122d4:	4a13      	ldr	r2, [pc, #76]	; (8012324 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 80122d6:	4413      	add	r3, r2
 80122d8:	4299      	cmp	r1, r3
 80122da:	d11c      	bne.n	8012316 <vTaskPriorityDisinheritAfterTimeout+0xea>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80122dc:	69bb      	ldr	r3, [r7, #24]
 80122de:	3304      	adds	r3, #4
 80122e0:	4618      	mov	r0, r3
 80122e2:	f7fd ff6d 	bl	80101c0 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80122e6:	69bb      	ldr	r3, [r7, #24]
 80122e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80122ea:	4b0f      	ldr	r3, [pc, #60]	; (8012328 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 80122ec:	681b      	ldr	r3, [r3, #0]
 80122ee:	429a      	cmp	r2, r3
 80122f0:	d903      	bls.n	80122fa <vTaskPriorityDisinheritAfterTimeout+0xce>
 80122f2:	69bb      	ldr	r3, [r7, #24]
 80122f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80122f6:	4a0c      	ldr	r2, [pc, #48]	; (8012328 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 80122f8:	6013      	str	r3, [r2, #0]
 80122fa:	69bb      	ldr	r3, [r7, #24]
 80122fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80122fe:	4613      	mov	r3, r2
 8012300:	009b      	lsls	r3, r3, #2
 8012302:	4413      	add	r3, r2
 8012304:	009b      	lsls	r3, r3, #2
 8012306:	4a07      	ldr	r2, [pc, #28]	; (8012324 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 8012308:	441a      	add	r2, r3
 801230a:	69bb      	ldr	r3, [r7, #24]
 801230c:	3304      	adds	r3, #4
 801230e:	4619      	mov	r1, r3
 8012310:	4610      	mov	r0, r2
 8012312:	f7fd fef8 	bl	8010106 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8012316:	bf00      	nop
 8012318:	3720      	adds	r7, #32
 801231a:	46bd      	mov	sp, r7
 801231c:	bd80      	pop	{r7, pc}
 801231e:	bf00      	nop
 8012320:	20004a08 	.word	0x20004a08
 8012324:	20004a0c 	.word	0x20004a0c
 8012328:	20004ee4 	.word	0x20004ee4

0801232c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 801232c:	b480      	push	{r7}
 801232e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8012330:	4b07      	ldr	r3, [pc, #28]	; (8012350 <pvTaskIncrementMutexHeldCount+0x24>)
 8012332:	681b      	ldr	r3, [r3, #0]
 8012334:	2b00      	cmp	r3, #0
 8012336:	d004      	beq.n	8012342 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8012338:	4b05      	ldr	r3, [pc, #20]	; (8012350 <pvTaskIncrementMutexHeldCount+0x24>)
 801233a:	681b      	ldr	r3, [r3, #0]
 801233c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801233e:	3201      	adds	r2, #1
 8012340:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 8012342:	4b03      	ldr	r3, [pc, #12]	; (8012350 <pvTaskIncrementMutexHeldCount+0x24>)
 8012344:	681b      	ldr	r3, [r3, #0]
	}
 8012346:	4618      	mov	r0, r3
 8012348:	46bd      	mov	sp, r7
 801234a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801234e:	4770      	bx	lr
 8012350:	20004a08 	.word	0x20004a08

08012354 <ulTaskNotifyTake>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
	{
 8012354:	b580      	push	{r7, lr}
 8012356:	b084      	sub	sp, #16
 8012358:	af00      	add	r7, sp, #0
 801235a:	6078      	str	r0, [r7, #4]
 801235c:	6039      	str	r1, [r7, #0]
	uint32_t ulReturn;

		taskENTER_CRITICAL();
 801235e:	f7fd fbb5 	bl	800facc <vPortEnterCritical>
		{
			/* Only block if the notification count is not already non-zero. */
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 8012362:	4b1e      	ldr	r3, [pc, #120]	; (80123dc <ulTaskNotifyTake+0x88>)
 8012364:	681b      	ldr	r3, [r3, #0]
 8012366:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8012368:	2b00      	cmp	r3, #0
 801236a:	d113      	bne.n	8012394 <ulTaskNotifyTake+0x40>
			{
				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 801236c:	4b1b      	ldr	r3, [pc, #108]	; (80123dc <ulTaskNotifyTake+0x88>)
 801236e:	681b      	ldr	r3, [r3, #0]
 8012370:	2201      	movs	r2, #1
 8012372:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

				if( xTicksToWait > ( TickType_t ) 0 )
 8012376:	683b      	ldr	r3, [r7, #0]
 8012378:	2b00      	cmp	r3, #0
 801237a:	d00b      	beq.n	8012394 <ulTaskNotifyTake+0x40>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 801237c:	2101      	movs	r1, #1
 801237e:	6838      	ldr	r0, [r7, #0]
 8012380:	f000 fa18 	bl	80127b4 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 8012384:	4b16      	ldr	r3, [pc, #88]	; (80123e0 <ulTaskNotifyTake+0x8c>)
 8012386:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801238a:	601a      	str	r2, [r3, #0]
 801238c:	f3bf 8f4f 	dsb	sy
 8012390:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8012394:	f7fd fbc8 	bl	800fb28 <vPortExitCritical>

		taskENTER_CRITICAL();
 8012398:	f7fd fb98 	bl	800facc <vPortEnterCritical>
		{
			traceTASK_NOTIFY_TAKE();
			ulReturn = pxCurrentTCB->ulNotifiedValue;
 801239c:	4b0f      	ldr	r3, [pc, #60]	; (80123dc <ulTaskNotifyTake+0x88>)
 801239e:	681b      	ldr	r3, [r3, #0]
 80123a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80123a2:	60fb      	str	r3, [r7, #12]

			if( ulReturn != 0UL )
 80123a4:	68fb      	ldr	r3, [r7, #12]
 80123a6:	2b00      	cmp	r3, #0
 80123a8:	d00c      	beq.n	80123c4 <ulTaskNotifyTake+0x70>
			{
				if( xClearCountOnExit != pdFALSE )
 80123aa:	687b      	ldr	r3, [r7, #4]
 80123ac:	2b00      	cmp	r3, #0
 80123ae:	d004      	beq.n	80123ba <ulTaskNotifyTake+0x66>
				{
					pxCurrentTCB->ulNotifiedValue = 0UL;
 80123b0:	4b0a      	ldr	r3, [pc, #40]	; (80123dc <ulTaskNotifyTake+0x88>)
 80123b2:	681b      	ldr	r3, [r3, #0]
 80123b4:	2200      	movs	r2, #0
 80123b6:	655a      	str	r2, [r3, #84]	; 0x54
 80123b8:	e004      	b.n	80123c4 <ulTaskNotifyTake+0x70>
				}
				else
				{
					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
 80123ba:	4b08      	ldr	r3, [pc, #32]	; (80123dc <ulTaskNotifyTake+0x88>)
 80123bc:	681b      	ldr	r3, [r3, #0]
 80123be:	68fa      	ldr	r2, [r7, #12]
 80123c0:	3a01      	subs	r2, #1
 80123c2:	655a      	str	r2, [r3, #84]	; 0x54
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80123c4:	4b05      	ldr	r3, [pc, #20]	; (80123dc <ulTaskNotifyTake+0x88>)
 80123c6:	681b      	ldr	r3, [r3, #0]
 80123c8:	2200      	movs	r2, #0
 80123ca:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
		}
		taskEXIT_CRITICAL();
 80123ce:	f7fd fbab 	bl	800fb28 <vPortExitCritical>

		return ulReturn;
 80123d2:	68fb      	ldr	r3, [r7, #12]
	}
 80123d4:	4618      	mov	r0, r3
 80123d6:	3710      	adds	r7, #16
 80123d8:	46bd      	mov	sp, r7
 80123da:	bd80      	pop	{r7, pc}
 80123dc:	20004a08 	.word	0x20004a08
 80123e0:	e000ed04 	.word	0xe000ed04

080123e4 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 80123e4:	b580      	push	{r7, lr}
 80123e6:	b086      	sub	sp, #24
 80123e8:	af00      	add	r7, sp, #0
 80123ea:	60f8      	str	r0, [r7, #12]
 80123ec:	60b9      	str	r1, [r7, #8]
 80123ee:	607a      	str	r2, [r7, #4]
 80123f0:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 80123f2:	f7fd fb6b 	bl	800facc <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 80123f6:	4b26      	ldr	r3, [pc, #152]	; (8012490 <xTaskNotifyWait+0xac>)
 80123f8:	681b      	ldr	r3, [r3, #0]
 80123fa:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80123fe:	b2db      	uxtb	r3, r3
 8012400:	2b02      	cmp	r3, #2
 8012402:	d01a      	beq.n	801243a <xTaskNotifyWait+0x56>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 8012404:	4b22      	ldr	r3, [pc, #136]	; (8012490 <xTaskNotifyWait+0xac>)
 8012406:	681b      	ldr	r3, [r3, #0]
 8012408:	6d59      	ldr	r1, [r3, #84]	; 0x54
 801240a:	68fa      	ldr	r2, [r7, #12]
 801240c:	43d2      	mvns	r2, r2
 801240e:	400a      	ands	r2, r1
 8012410:	655a      	str	r2, [r3, #84]	; 0x54

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 8012412:	4b1f      	ldr	r3, [pc, #124]	; (8012490 <xTaskNotifyWait+0xac>)
 8012414:	681b      	ldr	r3, [r3, #0]
 8012416:	2201      	movs	r2, #1
 8012418:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

				if( xTicksToWait > ( TickType_t ) 0 )
 801241c:	683b      	ldr	r3, [r7, #0]
 801241e:	2b00      	cmp	r3, #0
 8012420:	d00b      	beq.n	801243a <xTaskNotifyWait+0x56>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8012422:	2101      	movs	r1, #1
 8012424:	6838      	ldr	r0, [r7, #0]
 8012426:	f000 f9c5 	bl	80127b4 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 801242a:	4b1a      	ldr	r3, [pc, #104]	; (8012494 <xTaskNotifyWait+0xb0>)
 801242c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012430:	601a      	str	r2, [r3, #0]
 8012432:	f3bf 8f4f 	dsb	sy
 8012436:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 801243a:	f7fd fb75 	bl	800fb28 <vPortExitCritical>

		taskENTER_CRITICAL();
 801243e:	f7fd fb45 	bl	800facc <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 8012442:	687b      	ldr	r3, [r7, #4]
 8012444:	2b00      	cmp	r3, #0
 8012446:	d004      	beq.n	8012452 <xTaskNotifyWait+0x6e>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 8012448:	4b11      	ldr	r3, [pc, #68]	; (8012490 <xTaskNotifyWait+0xac>)
 801244a:	681b      	ldr	r3, [r3, #0]
 801244c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 801244e:	687b      	ldr	r3, [r7, #4]
 8012450:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8012452:	4b0f      	ldr	r3, [pc, #60]	; (8012490 <xTaskNotifyWait+0xac>)
 8012454:	681b      	ldr	r3, [r3, #0]
 8012456:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 801245a:	b2db      	uxtb	r3, r3
 801245c:	2b02      	cmp	r3, #2
 801245e:	d002      	beq.n	8012466 <xTaskNotifyWait+0x82>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 8012460:	2300      	movs	r3, #0
 8012462:	617b      	str	r3, [r7, #20]
 8012464:	e008      	b.n	8012478 <xTaskNotifyWait+0x94>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 8012466:	4b0a      	ldr	r3, [pc, #40]	; (8012490 <xTaskNotifyWait+0xac>)
 8012468:	681b      	ldr	r3, [r3, #0]
 801246a:	6d59      	ldr	r1, [r3, #84]	; 0x54
 801246c:	68ba      	ldr	r2, [r7, #8]
 801246e:	43d2      	mvns	r2, r2
 8012470:	400a      	ands	r2, r1
 8012472:	655a      	str	r2, [r3, #84]	; 0x54
				xReturn = pdTRUE;
 8012474:	2301      	movs	r3, #1
 8012476:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8012478:	4b05      	ldr	r3, [pc, #20]	; (8012490 <xTaskNotifyWait+0xac>)
 801247a:	681b      	ldr	r3, [r3, #0]
 801247c:	2200      	movs	r2, #0
 801247e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
		}
		taskEXIT_CRITICAL();
 8012482:	f7fd fb51 	bl	800fb28 <vPortExitCritical>

		return xReturn;
 8012486:	697b      	ldr	r3, [r7, #20]
	}
 8012488:	4618      	mov	r0, r3
 801248a:	3718      	adds	r7, #24
 801248c:	46bd      	mov	sp, r7
 801248e:	bd80      	pop	{r7, pc}
 8012490:	20004a08 	.word	0x20004a08
 8012494:	e000ed04 	.word	0xe000ed04

08012498 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 8012498:	b580      	push	{r7, lr}
 801249a:	b08a      	sub	sp, #40	; 0x28
 801249c:	af00      	add	r7, sp, #0
 801249e:	60f8      	str	r0, [r7, #12]
 80124a0:	60b9      	str	r1, [r7, #8]
 80124a2:	603b      	str	r3, [r7, #0]
 80124a4:	4613      	mov	r3, r2
 80124a6:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 80124a8:	2301      	movs	r3, #1
 80124aa:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 80124ac:	68fb      	ldr	r3, [r7, #12]
 80124ae:	2b00      	cmp	r3, #0
 80124b0:	d109      	bne.n	80124c6 <xTaskGenericNotify+0x2e>
 80124b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80124b6:	f383 8811 	msr	BASEPRI, r3
 80124ba:	f3bf 8f6f 	isb	sy
 80124be:	f3bf 8f4f 	dsb	sy
 80124c2:	61bb      	str	r3, [r7, #24]
 80124c4:	e7fe      	b.n	80124c4 <xTaskGenericNotify+0x2c>
		pxTCB = xTaskToNotify;
 80124c6:	68fb      	ldr	r3, [r7, #12]
 80124c8:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 80124ca:	f7fd faff 	bl	800facc <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 80124ce:	683b      	ldr	r3, [r7, #0]
 80124d0:	2b00      	cmp	r3, #0
 80124d2:	d003      	beq.n	80124dc <xTaskGenericNotify+0x44>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 80124d4:	6a3b      	ldr	r3, [r7, #32]
 80124d6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80124d8:	683b      	ldr	r3, [r7, #0]
 80124da:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 80124dc:	6a3b      	ldr	r3, [r7, #32]
 80124de:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80124e2:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 80124e4:	6a3b      	ldr	r3, [r7, #32]
 80124e6:	2202      	movs	r2, #2
 80124e8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

			switch( eAction )
 80124ec:	79fb      	ldrb	r3, [r7, #7]
 80124ee:	2b04      	cmp	r3, #4
 80124f0:	d827      	bhi.n	8012542 <xTaskGenericNotify+0xaa>
 80124f2:	a201      	add	r2, pc, #4	; (adr r2, 80124f8 <xTaskGenericNotify+0x60>)
 80124f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80124f8:	08012561 	.word	0x08012561
 80124fc:	0801250d 	.word	0x0801250d
 8012500:	0801251b 	.word	0x0801251b
 8012504:	08012527 	.word	0x08012527
 8012508:	0801252f 	.word	0x0801252f
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 801250c:	6a3b      	ldr	r3, [r7, #32]
 801250e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8012510:	68bb      	ldr	r3, [r7, #8]
 8012512:	431a      	orrs	r2, r3
 8012514:	6a3b      	ldr	r3, [r7, #32]
 8012516:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 8012518:	e025      	b.n	8012566 <xTaskGenericNotify+0xce>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 801251a:	6a3b      	ldr	r3, [r7, #32]
 801251c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801251e:	1c5a      	adds	r2, r3, #1
 8012520:	6a3b      	ldr	r3, [r7, #32]
 8012522:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 8012524:	e01f      	b.n	8012566 <xTaskGenericNotify+0xce>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8012526:	6a3b      	ldr	r3, [r7, #32]
 8012528:	68ba      	ldr	r2, [r7, #8]
 801252a:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 801252c:	e01b      	b.n	8012566 <xTaskGenericNotify+0xce>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 801252e:	7ffb      	ldrb	r3, [r7, #31]
 8012530:	2b02      	cmp	r3, #2
 8012532:	d003      	beq.n	801253c <xTaskGenericNotify+0xa4>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8012534:	6a3b      	ldr	r3, [r7, #32]
 8012536:	68ba      	ldr	r2, [r7, #8]
 8012538:	655a      	str	r2, [r3, #84]	; 0x54
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 801253a:	e014      	b.n	8012566 <xTaskGenericNotify+0xce>
						xReturn = pdFAIL;
 801253c:	2300      	movs	r3, #0
 801253e:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 8012540:	e011      	b.n	8012566 <xTaskGenericNotify+0xce>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 8012542:	6a3b      	ldr	r3, [r7, #32]
 8012544:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8012546:	f1b3 3fff 	cmp.w	r3, #4294967295
 801254a:	d00b      	beq.n	8012564 <xTaskGenericNotify+0xcc>
 801254c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012550:	f383 8811 	msr	BASEPRI, r3
 8012554:	f3bf 8f6f 	isb	sy
 8012558:	f3bf 8f4f 	dsb	sy
 801255c:	617b      	str	r3, [r7, #20]
 801255e:	e7fe      	b.n	801255e <xTaskGenericNotify+0xc6>
					break;
 8012560:	bf00      	nop
 8012562:	e000      	b.n	8012566 <xTaskGenericNotify+0xce>

					break;
 8012564:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8012566:	7ffb      	ldrb	r3, [r7, #31]
 8012568:	2b01      	cmp	r3, #1
 801256a:	d13b      	bne.n	80125e4 <xTaskGenericNotify+0x14c>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801256c:	6a3b      	ldr	r3, [r7, #32]
 801256e:	3304      	adds	r3, #4
 8012570:	4618      	mov	r0, r3
 8012572:	f7fd fe25 	bl	80101c0 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 8012576:	6a3b      	ldr	r3, [r7, #32]
 8012578:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801257a:	4b1e      	ldr	r3, [pc, #120]	; (80125f4 <xTaskGenericNotify+0x15c>)
 801257c:	681b      	ldr	r3, [r3, #0]
 801257e:	429a      	cmp	r2, r3
 8012580:	d903      	bls.n	801258a <xTaskGenericNotify+0xf2>
 8012582:	6a3b      	ldr	r3, [r7, #32]
 8012584:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012586:	4a1b      	ldr	r2, [pc, #108]	; (80125f4 <xTaskGenericNotify+0x15c>)
 8012588:	6013      	str	r3, [r2, #0]
 801258a:	6a3b      	ldr	r3, [r7, #32]
 801258c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801258e:	4613      	mov	r3, r2
 8012590:	009b      	lsls	r3, r3, #2
 8012592:	4413      	add	r3, r2
 8012594:	009b      	lsls	r3, r3, #2
 8012596:	4a18      	ldr	r2, [pc, #96]	; (80125f8 <xTaskGenericNotify+0x160>)
 8012598:	441a      	add	r2, r3
 801259a:	6a3b      	ldr	r3, [r7, #32]
 801259c:	3304      	adds	r3, #4
 801259e:	4619      	mov	r1, r3
 80125a0:	4610      	mov	r0, r2
 80125a2:	f7fd fdb0 	bl	8010106 <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 80125a6:	6a3b      	ldr	r3, [r7, #32]
 80125a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80125aa:	2b00      	cmp	r3, #0
 80125ac:	d009      	beq.n	80125c2 <xTaskGenericNotify+0x12a>
 80125ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80125b2:	f383 8811 	msr	BASEPRI, r3
 80125b6:	f3bf 8f6f 	isb	sy
 80125ba:	f3bf 8f4f 	dsb	sy
 80125be:	613b      	str	r3, [r7, #16]
 80125c0:	e7fe      	b.n	80125c0 <xTaskGenericNotify+0x128>
					the tick count equals xNextTaskUnblockTime.  However if
					tickless idling is used it might be more important to enter
					sleep mode at the earliest possible time - so reset
					xNextTaskUnblockTime here to ensure it is updated at the
					earliest possible time. */
					prvResetNextTaskUnblockTime();
 80125c2:	f7ff fd11 	bl	8011fe8 <prvResetNextTaskUnblockTime>
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80125c6:	6a3b      	ldr	r3, [r7, #32]
 80125c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80125ca:	4b0c      	ldr	r3, [pc, #48]	; (80125fc <xTaskGenericNotify+0x164>)
 80125cc:	681b      	ldr	r3, [r3, #0]
 80125ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80125d0:	429a      	cmp	r2, r3
 80125d2:	d907      	bls.n	80125e4 <xTaskGenericNotify+0x14c>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 80125d4:	4b0a      	ldr	r3, [pc, #40]	; (8012600 <xTaskGenericNotify+0x168>)
 80125d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80125da:	601a      	str	r2, [r3, #0]
 80125dc:	f3bf 8f4f 	dsb	sy
 80125e0:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 80125e4:	f7fd faa0 	bl	800fb28 <vPortExitCritical>

		return xReturn;
 80125e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 80125ea:	4618      	mov	r0, r3
 80125ec:	3728      	adds	r7, #40	; 0x28
 80125ee:	46bd      	mov	sp, r7
 80125f0:	bd80      	pop	{r7, pc}
 80125f2:	bf00      	nop
 80125f4:	20004ee4 	.word	0x20004ee4
 80125f8:	20004a0c 	.word	0x20004a0c
 80125fc:	20004a08 	.word	0x20004a08
 8012600:	e000ed04 	.word	0xe000ed04

08012604 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8012604:	b580      	push	{r7, lr}
 8012606:	b08e      	sub	sp, #56	; 0x38
 8012608:	af00      	add	r7, sp, #0
 801260a:	60f8      	str	r0, [r7, #12]
 801260c:	60b9      	str	r1, [r7, #8]
 801260e:	603b      	str	r3, [r7, #0]
 8012610:	4613      	mov	r3, r2
 8012612:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 8012614:	2301      	movs	r3, #1
 8012616:	637b      	str	r3, [r7, #52]	; 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 8012618:	68fb      	ldr	r3, [r7, #12]
 801261a:	2b00      	cmp	r3, #0
 801261c:	d109      	bne.n	8012632 <xTaskGenericNotifyFromISR+0x2e>
 801261e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012622:	f383 8811 	msr	BASEPRI, r3
 8012626:	f3bf 8f6f 	isb	sy
 801262a:	f3bf 8f4f 	dsb	sy
 801262e:	627b      	str	r3, [r7, #36]	; 0x24
 8012630:	e7fe      	b.n	8012630 <xTaskGenericNotifyFromISR+0x2c>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8012632:	f7fd fb27 	bl	800fc84 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 8012636:	68fb      	ldr	r3, [r7, #12]
 8012638:	633b      	str	r3, [r7, #48]	; 0x30
	__asm volatile
 801263a:	f3ef 8211 	mrs	r2, BASEPRI
 801263e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012642:	f383 8811 	msr	BASEPRI, r3
 8012646:	f3bf 8f6f 	isb	sy
 801264a:	f3bf 8f4f 	dsb	sy
 801264e:	623a      	str	r2, [r7, #32]
 8012650:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 8012652:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8012654:	62fb      	str	r3, [r7, #44]	; 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 8012656:	683b      	ldr	r3, [r7, #0]
 8012658:	2b00      	cmp	r3, #0
 801265a:	d003      	beq.n	8012664 <xTaskGenericNotifyFromISR+0x60>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 801265c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801265e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8012660:	683b      	ldr	r3, [r7, #0]
 8012662:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8012664:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012666:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 801266a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 801266e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012670:	2202      	movs	r2, #2
 8012672:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

			switch( eAction )
 8012676:	79fb      	ldrb	r3, [r7, #7]
 8012678:	2b04      	cmp	r3, #4
 801267a:	d829      	bhi.n	80126d0 <xTaskGenericNotifyFromISR+0xcc>
 801267c:	a201      	add	r2, pc, #4	; (adr r2, 8012684 <xTaskGenericNotifyFromISR+0x80>)
 801267e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012682:	bf00      	nop
 8012684:	080126ef 	.word	0x080126ef
 8012688:	08012699 	.word	0x08012699
 801268c:	080126a7 	.word	0x080126a7
 8012690:	080126b3 	.word	0x080126b3
 8012694:	080126bb 	.word	0x080126bb
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8012698:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801269a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 801269c:	68bb      	ldr	r3, [r7, #8]
 801269e:	431a      	orrs	r2, r3
 80126a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80126a2:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 80126a4:	e026      	b.n	80126f4 <xTaskGenericNotifyFromISR+0xf0>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 80126a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80126a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80126aa:	1c5a      	adds	r2, r3, #1
 80126ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80126ae:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 80126b0:	e020      	b.n	80126f4 <xTaskGenericNotifyFromISR+0xf0>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 80126b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80126b4:	68ba      	ldr	r2, [r7, #8]
 80126b6:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 80126b8:	e01c      	b.n	80126f4 <xTaskGenericNotifyFromISR+0xf0>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 80126ba:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80126be:	2b02      	cmp	r3, #2
 80126c0:	d003      	beq.n	80126ca <xTaskGenericNotifyFromISR+0xc6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 80126c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80126c4:	68ba      	ldr	r2, [r7, #8]
 80126c6:	655a      	str	r2, [r3, #84]	; 0x54
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 80126c8:	e014      	b.n	80126f4 <xTaskGenericNotifyFromISR+0xf0>
						xReturn = pdFAIL;
 80126ca:	2300      	movs	r3, #0
 80126cc:	637b      	str	r3, [r7, #52]	; 0x34
					break;
 80126ce:	e011      	b.n	80126f4 <xTaskGenericNotifyFromISR+0xf0>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 80126d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80126d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80126d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80126d8:	d00b      	beq.n	80126f2 <xTaskGenericNotifyFromISR+0xee>
	__asm volatile
 80126da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80126de:	f383 8811 	msr	BASEPRI, r3
 80126e2:	f3bf 8f6f 	isb	sy
 80126e6:	f3bf 8f4f 	dsb	sy
 80126ea:	61bb      	str	r3, [r7, #24]
 80126ec:	e7fe      	b.n	80126ec <xTaskGenericNotifyFromISR+0xe8>
					break;
 80126ee:	bf00      	nop
 80126f0:	e000      	b.n	80126f4 <xTaskGenericNotifyFromISR+0xf0>
					break;
 80126f2:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 80126f4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80126f8:	2b01      	cmp	r3, #1
 80126fa:	d145      	bne.n	8012788 <xTaskGenericNotifyFromISR+0x184>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 80126fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80126fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012700:	2b00      	cmp	r3, #0
 8012702:	d009      	beq.n	8012718 <xTaskGenericNotifyFromISR+0x114>
 8012704:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012708:	f383 8811 	msr	BASEPRI, r3
 801270c:	f3bf 8f6f 	isb	sy
 8012710:	f3bf 8f4f 	dsb	sy
 8012714:	617b      	str	r3, [r7, #20]
 8012716:	e7fe      	b.n	8012716 <xTaskGenericNotifyFromISR+0x112>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8012718:	4b20      	ldr	r3, [pc, #128]	; (801279c <xTaskGenericNotifyFromISR+0x198>)
 801271a:	681b      	ldr	r3, [r3, #0]
 801271c:	2b00      	cmp	r3, #0
 801271e:	d11d      	bne.n	801275c <xTaskGenericNotifyFromISR+0x158>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8012720:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012722:	3304      	adds	r3, #4
 8012724:	4618      	mov	r0, r3
 8012726:	f7fd fd4b 	bl	80101c0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 801272a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801272c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801272e:	4b1c      	ldr	r3, [pc, #112]	; (80127a0 <xTaskGenericNotifyFromISR+0x19c>)
 8012730:	681b      	ldr	r3, [r3, #0]
 8012732:	429a      	cmp	r2, r3
 8012734:	d903      	bls.n	801273e <xTaskGenericNotifyFromISR+0x13a>
 8012736:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012738:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801273a:	4a19      	ldr	r2, [pc, #100]	; (80127a0 <xTaskGenericNotifyFromISR+0x19c>)
 801273c:	6013      	str	r3, [r2, #0]
 801273e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012740:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012742:	4613      	mov	r3, r2
 8012744:	009b      	lsls	r3, r3, #2
 8012746:	4413      	add	r3, r2
 8012748:	009b      	lsls	r3, r3, #2
 801274a:	4a16      	ldr	r2, [pc, #88]	; (80127a4 <xTaskGenericNotifyFromISR+0x1a0>)
 801274c:	441a      	add	r2, r3
 801274e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012750:	3304      	adds	r3, #4
 8012752:	4619      	mov	r1, r3
 8012754:	4610      	mov	r0, r2
 8012756:	f7fd fcd6 	bl	8010106 <vListInsertEnd>
 801275a:	e005      	b.n	8012768 <xTaskGenericNotifyFromISR+0x164>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 801275c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801275e:	3318      	adds	r3, #24
 8012760:	4619      	mov	r1, r3
 8012762:	4811      	ldr	r0, [pc, #68]	; (80127a8 <xTaskGenericNotifyFromISR+0x1a4>)
 8012764:	f7fd fccf 	bl	8010106 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8012768:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801276a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801276c:	4b0f      	ldr	r3, [pc, #60]	; (80127ac <xTaskGenericNotifyFromISR+0x1a8>)
 801276e:	681b      	ldr	r3, [r3, #0]
 8012770:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012772:	429a      	cmp	r2, r3
 8012774:	d908      	bls.n	8012788 <xTaskGenericNotifyFromISR+0x184>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 8012776:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012778:	2b00      	cmp	r3, #0
 801277a:	d002      	beq.n	8012782 <xTaskGenericNotifyFromISR+0x17e>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 801277c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801277e:	2201      	movs	r2, #1
 8012780:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 8012782:	4b0b      	ldr	r3, [pc, #44]	; (80127b0 <xTaskGenericNotifyFromISR+0x1ac>)
 8012784:	2201      	movs	r2, #1
 8012786:	601a      	str	r2, [r3, #0]
 8012788:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801278a:	613b      	str	r3, [r7, #16]
	__asm volatile
 801278c:	693b      	ldr	r3, [r7, #16]
 801278e:	f383 8811 	msr	BASEPRI, r3
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 8012792:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	}
 8012794:	4618      	mov	r0, r3
 8012796:	3738      	adds	r7, #56	; 0x38
 8012798:	46bd      	mov	sp, r7
 801279a:	bd80      	pop	{r7, pc}
 801279c:	20004f04 	.word	0x20004f04
 80127a0:	20004ee4 	.word	0x20004ee4
 80127a4:	20004a0c 	.word	0x20004a0c
 80127a8:	20004e9c 	.word	0x20004e9c
 80127ac:	20004a08 	.word	0x20004a08
 80127b0:	20004ef0 	.word	0x20004ef0

080127b4 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80127b4:	b580      	push	{r7, lr}
 80127b6:	b084      	sub	sp, #16
 80127b8:	af00      	add	r7, sp, #0
 80127ba:	6078      	str	r0, [r7, #4]
 80127bc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80127be:	4b21      	ldr	r3, [pc, #132]	; (8012844 <prvAddCurrentTaskToDelayedList+0x90>)
 80127c0:	681b      	ldr	r3, [r3, #0]
 80127c2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80127c4:	4b20      	ldr	r3, [pc, #128]	; (8012848 <prvAddCurrentTaskToDelayedList+0x94>)
 80127c6:	681b      	ldr	r3, [r3, #0]
 80127c8:	3304      	adds	r3, #4
 80127ca:	4618      	mov	r0, r3
 80127cc:	f7fd fcf8 	bl	80101c0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80127d0:	687b      	ldr	r3, [r7, #4]
 80127d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80127d6:	d10a      	bne.n	80127ee <prvAddCurrentTaskToDelayedList+0x3a>
 80127d8:	683b      	ldr	r3, [r7, #0]
 80127da:	2b00      	cmp	r3, #0
 80127dc:	d007      	beq.n	80127ee <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80127de:	4b1a      	ldr	r3, [pc, #104]	; (8012848 <prvAddCurrentTaskToDelayedList+0x94>)
 80127e0:	681b      	ldr	r3, [r3, #0]
 80127e2:	3304      	adds	r3, #4
 80127e4:	4619      	mov	r1, r3
 80127e6:	4819      	ldr	r0, [pc, #100]	; (801284c <prvAddCurrentTaskToDelayedList+0x98>)
 80127e8:	f7fd fc8d 	bl	8010106 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80127ec:	e026      	b.n	801283c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80127ee:	68fa      	ldr	r2, [r7, #12]
 80127f0:	687b      	ldr	r3, [r7, #4]
 80127f2:	4413      	add	r3, r2
 80127f4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80127f6:	4b14      	ldr	r3, [pc, #80]	; (8012848 <prvAddCurrentTaskToDelayedList+0x94>)
 80127f8:	681b      	ldr	r3, [r3, #0]
 80127fa:	68ba      	ldr	r2, [r7, #8]
 80127fc:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80127fe:	68ba      	ldr	r2, [r7, #8]
 8012800:	68fb      	ldr	r3, [r7, #12]
 8012802:	429a      	cmp	r2, r3
 8012804:	d209      	bcs.n	801281a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8012806:	4b12      	ldr	r3, [pc, #72]	; (8012850 <prvAddCurrentTaskToDelayedList+0x9c>)
 8012808:	681a      	ldr	r2, [r3, #0]
 801280a:	4b0f      	ldr	r3, [pc, #60]	; (8012848 <prvAddCurrentTaskToDelayedList+0x94>)
 801280c:	681b      	ldr	r3, [r3, #0]
 801280e:	3304      	adds	r3, #4
 8012810:	4619      	mov	r1, r3
 8012812:	4610      	mov	r0, r2
 8012814:	f7fd fc9b 	bl	801014e <vListInsert>
}
 8012818:	e010      	b.n	801283c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801281a:	4b0e      	ldr	r3, [pc, #56]	; (8012854 <prvAddCurrentTaskToDelayedList+0xa0>)
 801281c:	681a      	ldr	r2, [r3, #0]
 801281e:	4b0a      	ldr	r3, [pc, #40]	; (8012848 <prvAddCurrentTaskToDelayedList+0x94>)
 8012820:	681b      	ldr	r3, [r3, #0]
 8012822:	3304      	adds	r3, #4
 8012824:	4619      	mov	r1, r3
 8012826:	4610      	mov	r0, r2
 8012828:	f7fd fc91 	bl	801014e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 801282c:	4b0a      	ldr	r3, [pc, #40]	; (8012858 <prvAddCurrentTaskToDelayedList+0xa4>)
 801282e:	681b      	ldr	r3, [r3, #0]
 8012830:	68ba      	ldr	r2, [r7, #8]
 8012832:	429a      	cmp	r2, r3
 8012834:	d202      	bcs.n	801283c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8012836:	4a08      	ldr	r2, [pc, #32]	; (8012858 <prvAddCurrentTaskToDelayedList+0xa4>)
 8012838:	68bb      	ldr	r3, [r7, #8]
 801283a:	6013      	str	r3, [r2, #0]
}
 801283c:	bf00      	nop
 801283e:	3710      	adds	r7, #16
 8012840:	46bd      	mov	sp, r7
 8012842:	bd80      	pop	{r7, pc}
 8012844:	20004ee0 	.word	0x20004ee0
 8012848:	20004a08 	.word	0x20004a08
 801284c:	20004ec8 	.word	0x20004ec8
 8012850:	20004e98 	.word	0x20004e98
 8012854:	20004e94 	.word	0x20004e94
 8012858:	20004efc 	.word	0x20004efc

0801285c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 801285c:	b580      	push	{r7, lr}
 801285e:	b08a      	sub	sp, #40	; 0x28
 8012860:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8012862:	2300      	movs	r3, #0
 8012864:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8012866:	f000 faff 	bl	8012e68 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 801286a:	4b1c      	ldr	r3, [pc, #112]	; (80128dc <xTimerCreateTimerTask+0x80>)
 801286c:	681b      	ldr	r3, [r3, #0]
 801286e:	2b00      	cmp	r3, #0
 8012870:	d021      	beq.n	80128b6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8012872:	2300      	movs	r3, #0
 8012874:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8012876:	2300      	movs	r3, #0
 8012878:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 801287a:	1d3a      	adds	r2, r7, #4
 801287c:	f107 0108 	add.w	r1, r7, #8
 8012880:	f107 030c 	add.w	r3, r7, #12
 8012884:	4618      	mov	r0, r3
 8012886:	f7fc ffe3 	bl	800f850 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 801288a:	6879      	ldr	r1, [r7, #4]
 801288c:	68bb      	ldr	r3, [r7, #8]
 801288e:	68fa      	ldr	r2, [r7, #12]
 8012890:	9202      	str	r2, [sp, #8]
 8012892:	9301      	str	r3, [sp, #4]
 8012894:	2302      	movs	r3, #2
 8012896:	9300      	str	r3, [sp, #0]
 8012898:	2300      	movs	r3, #0
 801289a:	460a      	mov	r2, r1
 801289c:	4910      	ldr	r1, [pc, #64]	; (80128e0 <xTimerCreateTimerTask+0x84>)
 801289e:	4811      	ldr	r0, [pc, #68]	; (80128e4 <xTimerCreateTimerTask+0x88>)
 80128a0:	f7fe fd5a 	bl	8011358 <xTaskCreateStatic>
 80128a4:	4602      	mov	r2, r0
 80128a6:	4b10      	ldr	r3, [pc, #64]	; (80128e8 <xTimerCreateTimerTask+0x8c>)
 80128a8:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80128aa:	4b0f      	ldr	r3, [pc, #60]	; (80128e8 <xTimerCreateTimerTask+0x8c>)
 80128ac:	681b      	ldr	r3, [r3, #0]
 80128ae:	2b00      	cmp	r3, #0
 80128b0:	d001      	beq.n	80128b6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80128b2:	2301      	movs	r3, #1
 80128b4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80128b6:	697b      	ldr	r3, [r7, #20]
 80128b8:	2b00      	cmp	r3, #0
 80128ba:	d109      	bne.n	80128d0 <xTimerCreateTimerTask+0x74>
	__asm volatile
 80128bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80128c0:	f383 8811 	msr	BASEPRI, r3
 80128c4:	f3bf 8f6f 	isb	sy
 80128c8:	f3bf 8f4f 	dsb	sy
 80128cc:	613b      	str	r3, [r7, #16]
 80128ce:	e7fe      	b.n	80128ce <xTimerCreateTimerTask+0x72>
	return xReturn;
 80128d0:	697b      	ldr	r3, [r7, #20]
}
 80128d2:	4618      	mov	r0, r3
 80128d4:	3718      	adds	r7, #24
 80128d6:	46bd      	mov	sp, r7
 80128d8:	bd80      	pop	{r7, pc}
 80128da:	bf00      	nop
 80128dc:	20004f38 	.word	0x20004f38
 80128e0:	080163fc 	.word	0x080163fc
 80128e4:	08012a1d 	.word	0x08012a1d
 80128e8:	20004f3c 	.word	0x20004f3c

080128ec <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80128ec:	b580      	push	{r7, lr}
 80128ee:	b08a      	sub	sp, #40	; 0x28
 80128f0:	af00      	add	r7, sp, #0
 80128f2:	60f8      	str	r0, [r7, #12]
 80128f4:	60b9      	str	r1, [r7, #8]
 80128f6:	607a      	str	r2, [r7, #4]
 80128f8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80128fa:	2300      	movs	r3, #0
 80128fc:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80128fe:	68fb      	ldr	r3, [r7, #12]
 8012900:	2b00      	cmp	r3, #0
 8012902:	d109      	bne.n	8012918 <xTimerGenericCommand+0x2c>
 8012904:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012908:	f383 8811 	msr	BASEPRI, r3
 801290c:	f3bf 8f6f 	isb	sy
 8012910:	f3bf 8f4f 	dsb	sy
 8012914:	623b      	str	r3, [r7, #32]
 8012916:	e7fe      	b.n	8012916 <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8012918:	4b19      	ldr	r3, [pc, #100]	; (8012980 <xTimerGenericCommand+0x94>)
 801291a:	681b      	ldr	r3, [r3, #0]
 801291c:	2b00      	cmp	r3, #0
 801291e:	d02a      	beq.n	8012976 <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8012920:	68bb      	ldr	r3, [r7, #8]
 8012922:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8012924:	687b      	ldr	r3, [r7, #4]
 8012926:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8012928:	68fb      	ldr	r3, [r7, #12]
 801292a:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 801292c:	68bb      	ldr	r3, [r7, #8]
 801292e:	2b05      	cmp	r3, #5
 8012930:	dc18      	bgt.n	8012964 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8012932:	f7ff fb89 	bl	8012048 <xTaskGetSchedulerState>
 8012936:	4603      	mov	r3, r0
 8012938:	2b02      	cmp	r3, #2
 801293a:	d109      	bne.n	8012950 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 801293c:	4b10      	ldr	r3, [pc, #64]	; (8012980 <xTimerGenericCommand+0x94>)
 801293e:	6818      	ldr	r0, [r3, #0]
 8012940:	f107 0110 	add.w	r1, r7, #16
 8012944:	2300      	movs	r3, #0
 8012946:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012948:	f7fd febc 	bl	80106c4 <xQueueGenericSend>
 801294c:	6278      	str	r0, [r7, #36]	; 0x24
 801294e:	e012      	b.n	8012976 <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8012950:	4b0b      	ldr	r3, [pc, #44]	; (8012980 <xTimerGenericCommand+0x94>)
 8012952:	6818      	ldr	r0, [r3, #0]
 8012954:	f107 0110 	add.w	r1, r7, #16
 8012958:	2300      	movs	r3, #0
 801295a:	2200      	movs	r2, #0
 801295c:	f7fd feb2 	bl	80106c4 <xQueueGenericSend>
 8012960:	6278      	str	r0, [r7, #36]	; 0x24
 8012962:	e008      	b.n	8012976 <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8012964:	4b06      	ldr	r3, [pc, #24]	; (8012980 <xTimerGenericCommand+0x94>)
 8012966:	6818      	ldr	r0, [r3, #0]
 8012968:	f107 0110 	add.w	r1, r7, #16
 801296c:	2300      	movs	r3, #0
 801296e:	683a      	ldr	r2, [r7, #0]
 8012970:	f7fd ffa2 	bl	80108b8 <xQueueGenericSendFromISR>
 8012974:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8012976:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8012978:	4618      	mov	r0, r3
 801297a:	3728      	adds	r7, #40	; 0x28
 801297c:	46bd      	mov	sp, r7
 801297e:	bd80      	pop	{r7, pc}
 8012980:	20004f38 	.word	0x20004f38

08012984 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8012984:	b580      	push	{r7, lr}
 8012986:	b088      	sub	sp, #32
 8012988:	af02      	add	r7, sp, #8
 801298a:	6078      	str	r0, [r7, #4]
 801298c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801298e:	4b22      	ldr	r3, [pc, #136]	; (8012a18 <prvProcessExpiredTimer+0x94>)
 8012990:	681b      	ldr	r3, [r3, #0]
 8012992:	68db      	ldr	r3, [r3, #12]
 8012994:	68db      	ldr	r3, [r3, #12]
 8012996:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8012998:	697b      	ldr	r3, [r7, #20]
 801299a:	3304      	adds	r3, #4
 801299c:	4618      	mov	r0, r3
 801299e:	f7fd fc0f 	bl	80101c0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80129a2:	697b      	ldr	r3, [r7, #20]
 80129a4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80129a8:	f003 0304 	and.w	r3, r3, #4
 80129ac:	2b00      	cmp	r3, #0
 80129ae:	d021      	beq.n	80129f4 <prvProcessExpiredTimer+0x70>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80129b0:	697b      	ldr	r3, [r7, #20]
 80129b2:	699a      	ldr	r2, [r3, #24]
 80129b4:	687b      	ldr	r3, [r7, #4]
 80129b6:	18d1      	adds	r1, r2, r3
 80129b8:	687b      	ldr	r3, [r7, #4]
 80129ba:	683a      	ldr	r2, [r7, #0]
 80129bc:	6978      	ldr	r0, [r7, #20]
 80129be:	f000 f8d1 	bl	8012b64 <prvInsertTimerInActiveList>
 80129c2:	4603      	mov	r3, r0
 80129c4:	2b00      	cmp	r3, #0
 80129c6:	d01e      	beq.n	8012a06 <prvProcessExpiredTimer+0x82>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80129c8:	2300      	movs	r3, #0
 80129ca:	9300      	str	r3, [sp, #0]
 80129cc:	2300      	movs	r3, #0
 80129ce:	687a      	ldr	r2, [r7, #4]
 80129d0:	2100      	movs	r1, #0
 80129d2:	6978      	ldr	r0, [r7, #20]
 80129d4:	f7ff ff8a 	bl	80128ec <xTimerGenericCommand>
 80129d8:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80129da:	693b      	ldr	r3, [r7, #16]
 80129dc:	2b00      	cmp	r3, #0
 80129de:	d112      	bne.n	8012a06 <prvProcessExpiredTimer+0x82>
 80129e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80129e4:	f383 8811 	msr	BASEPRI, r3
 80129e8:	f3bf 8f6f 	isb	sy
 80129ec:	f3bf 8f4f 	dsb	sy
 80129f0:	60fb      	str	r3, [r7, #12]
 80129f2:	e7fe      	b.n	80129f2 <prvProcessExpiredTimer+0x6e>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80129f4:	697b      	ldr	r3, [r7, #20]
 80129f6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80129fa:	f023 0301 	bic.w	r3, r3, #1
 80129fe:	b2da      	uxtb	r2, r3
 8012a00:	697b      	ldr	r3, [r7, #20]
 8012a02:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8012a06:	697b      	ldr	r3, [r7, #20]
 8012a08:	6a1b      	ldr	r3, [r3, #32]
 8012a0a:	6978      	ldr	r0, [r7, #20]
 8012a0c:	4798      	blx	r3
}
 8012a0e:	bf00      	nop
 8012a10:	3718      	adds	r7, #24
 8012a12:	46bd      	mov	sp, r7
 8012a14:	bd80      	pop	{r7, pc}
 8012a16:	bf00      	nop
 8012a18:	20004f30 	.word	0x20004f30

08012a1c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8012a1c:	b580      	push	{r7, lr}
 8012a1e:	b084      	sub	sp, #16
 8012a20:	af00      	add	r7, sp, #0
 8012a22:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8012a24:	f107 0308 	add.w	r3, r7, #8
 8012a28:	4618      	mov	r0, r3
 8012a2a:	f000 f857 	bl	8012adc <prvGetNextExpireTime>
 8012a2e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8012a30:	68bb      	ldr	r3, [r7, #8]
 8012a32:	4619      	mov	r1, r3
 8012a34:	68f8      	ldr	r0, [r7, #12]
 8012a36:	f000 f803 	bl	8012a40 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8012a3a:	f000 f8d5 	bl	8012be8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8012a3e:	e7f1      	b.n	8012a24 <prvTimerTask+0x8>

08012a40 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8012a40:	b580      	push	{r7, lr}
 8012a42:	b084      	sub	sp, #16
 8012a44:	af00      	add	r7, sp, #0
 8012a46:	6078      	str	r0, [r7, #4]
 8012a48:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8012a4a:	f7fe febb 	bl	80117c4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8012a4e:	f107 0308 	add.w	r3, r7, #8
 8012a52:	4618      	mov	r0, r3
 8012a54:	f000 f866 	bl	8012b24 <prvSampleTimeNow>
 8012a58:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8012a5a:	68bb      	ldr	r3, [r7, #8]
 8012a5c:	2b00      	cmp	r3, #0
 8012a5e:	d130      	bne.n	8012ac2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8012a60:	683b      	ldr	r3, [r7, #0]
 8012a62:	2b00      	cmp	r3, #0
 8012a64:	d10a      	bne.n	8012a7c <prvProcessTimerOrBlockTask+0x3c>
 8012a66:	687a      	ldr	r2, [r7, #4]
 8012a68:	68fb      	ldr	r3, [r7, #12]
 8012a6a:	429a      	cmp	r2, r3
 8012a6c:	d806      	bhi.n	8012a7c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8012a6e:	f7fe feef 	bl	8011850 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8012a72:	68f9      	ldr	r1, [r7, #12]
 8012a74:	6878      	ldr	r0, [r7, #4]
 8012a76:	f7ff ff85 	bl	8012984 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8012a7a:	e024      	b.n	8012ac6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8012a7c:	683b      	ldr	r3, [r7, #0]
 8012a7e:	2b00      	cmp	r3, #0
 8012a80:	d008      	beq.n	8012a94 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8012a82:	4b13      	ldr	r3, [pc, #76]	; (8012ad0 <prvProcessTimerOrBlockTask+0x90>)
 8012a84:	681b      	ldr	r3, [r3, #0]
 8012a86:	681b      	ldr	r3, [r3, #0]
 8012a88:	2b00      	cmp	r3, #0
 8012a8a:	d101      	bne.n	8012a90 <prvProcessTimerOrBlockTask+0x50>
 8012a8c:	2301      	movs	r3, #1
 8012a8e:	e000      	b.n	8012a92 <prvProcessTimerOrBlockTask+0x52>
 8012a90:	2300      	movs	r3, #0
 8012a92:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8012a94:	4b0f      	ldr	r3, [pc, #60]	; (8012ad4 <prvProcessTimerOrBlockTask+0x94>)
 8012a96:	6818      	ldr	r0, [r3, #0]
 8012a98:	687a      	ldr	r2, [r7, #4]
 8012a9a:	68fb      	ldr	r3, [r7, #12]
 8012a9c:	1ad3      	subs	r3, r2, r3
 8012a9e:	683a      	ldr	r2, [r7, #0]
 8012aa0:	4619      	mov	r1, r3
 8012aa2:	f7fe fc25 	bl	80112f0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8012aa6:	f7fe fed3 	bl	8011850 <xTaskResumeAll>
 8012aaa:	4603      	mov	r3, r0
 8012aac:	2b00      	cmp	r3, #0
 8012aae:	d10a      	bne.n	8012ac6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8012ab0:	4b09      	ldr	r3, [pc, #36]	; (8012ad8 <prvProcessTimerOrBlockTask+0x98>)
 8012ab2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012ab6:	601a      	str	r2, [r3, #0]
 8012ab8:	f3bf 8f4f 	dsb	sy
 8012abc:	f3bf 8f6f 	isb	sy
}
 8012ac0:	e001      	b.n	8012ac6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8012ac2:	f7fe fec5 	bl	8011850 <xTaskResumeAll>
}
 8012ac6:	bf00      	nop
 8012ac8:	3710      	adds	r7, #16
 8012aca:	46bd      	mov	sp, r7
 8012acc:	bd80      	pop	{r7, pc}
 8012ace:	bf00      	nop
 8012ad0:	20004f34 	.word	0x20004f34
 8012ad4:	20004f38 	.word	0x20004f38
 8012ad8:	e000ed04 	.word	0xe000ed04

08012adc <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8012adc:	b480      	push	{r7}
 8012ade:	b085      	sub	sp, #20
 8012ae0:	af00      	add	r7, sp, #0
 8012ae2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8012ae4:	4b0e      	ldr	r3, [pc, #56]	; (8012b20 <prvGetNextExpireTime+0x44>)
 8012ae6:	681b      	ldr	r3, [r3, #0]
 8012ae8:	681b      	ldr	r3, [r3, #0]
 8012aea:	2b00      	cmp	r3, #0
 8012aec:	d101      	bne.n	8012af2 <prvGetNextExpireTime+0x16>
 8012aee:	2201      	movs	r2, #1
 8012af0:	e000      	b.n	8012af4 <prvGetNextExpireTime+0x18>
 8012af2:	2200      	movs	r2, #0
 8012af4:	687b      	ldr	r3, [r7, #4]
 8012af6:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8012af8:	687b      	ldr	r3, [r7, #4]
 8012afa:	681b      	ldr	r3, [r3, #0]
 8012afc:	2b00      	cmp	r3, #0
 8012afe:	d105      	bne.n	8012b0c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8012b00:	4b07      	ldr	r3, [pc, #28]	; (8012b20 <prvGetNextExpireTime+0x44>)
 8012b02:	681b      	ldr	r3, [r3, #0]
 8012b04:	68db      	ldr	r3, [r3, #12]
 8012b06:	681b      	ldr	r3, [r3, #0]
 8012b08:	60fb      	str	r3, [r7, #12]
 8012b0a:	e001      	b.n	8012b10 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8012b0c:	2300      	movs	r3, #0
 8012b0e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8012b10:	68fb      	ldr	r3, [r7, #12]
}
 8012b12:	4618      	mov	r0, r3
 8012b14:	3714      	adds	r7, #20
 8012b16:	46bd      	mov	sp, r7
 8012b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b1c:	4770      	bx	lr
 8012b1e:	bf00      	nop
 8012b20:	20004f30 	.word	0x20004f30

08012b24 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8012b24:	b580      	push	{r7, lr}
 8012b26:	b084      	sub	sp, #16
 8012b28:	af00      	add	r7, sp, #0
 8012b2a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8012b2c:	f7fe ff2c 	bl	8011988 <xTaskGetTickCount>
 8012b30:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8012b32:	4b0b      	ldr	r3, [pc, #44]	; (8012b60 <prvSampleTimeNow+0x3c>)
 8012b34:	681b      	ldr	r3, [r3, #0]
 8012b36:	68fa      	ldr	r2, [r7, #12]
 8012b38:	429a      	cmp	r2, r3
 8012b3a:	d205      	bcs.n	8012b48 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8012b3c:	f000 f930 	bl	8012da0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8012b40:	687b      	ldr	r3, [r7, #4]
 8012b42:	2201      	movs	r2, #1
 8012b44:	601a      	str	r2, [r3, #0]
 8012b46:	e002      	b.n	8012b4e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8012b48:	687b      	ldr	r3, [r7, #4]
 8012b4a:	2200      	movs	r2, #0
 8012b4c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8012b4e:	4a04      	ldr	r2, [pc, #16]	; (8012b60 <prvSampleTimeNow+0x3c>)
 8012b50:	68fb      	ldr	r3, [r7, #12]
 8012b52:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8012b54:	68fb      	ldr	r3, [r7, #12]
}
 8012b56:	4618      	mov	r0, r3
 8012b58:	3710      	adds	r7, #16
 8012b5a:	46bd      	mov	sp, r7
 8012b5c:	bd80      	pop	{r7, pc}
 8012b5e:	bf00      	nop
 8012b60:	20004f40 	.word	0x20004f40

08012b64 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8012b64:	b580      	push	{r7, lr}
 8012b66:	b086      	sub	sp, #24
 8012b68:	af00      	add	r7, sp, #0
 8012b6a:	60f8      	str	r0, [r7, #12]
 8012b6c:	60b9      	str	r1, [r7, #8]
 8012b6e:	607a      	str	r2, [r7, #4]
 8012b70:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8012b72:	2300      	movs	r3, #0
 8012b74:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8012b76:	68fb      	ldr	r3, [r7, #12]
 8012b78:	68ba      	ldr	r2, [r7, #8]
 8012b7a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8012b7c:	68fb      	ldr	r3, [r7, #12]
 8012b7e:	68fa      	ldr	r2, [r7, #12]
 8012b80:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8012b82:	68ba      	ldr	r2, [r7, #8]
 8012b84:	687b      	ldr	r3, [r7, #4]
 8012b86:	429a      	cmp	r2, r3
 8012b88:	d812      	bhi.n	8012bb0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8012b8a:	687a      	ldr	r2, [r7, #4]
 8012b8c:	683b      	ldr	r3, [r7, #0]
 8012b8e:	1ad2      	subs	r2, r2, r3
 8012b90:	68fb      	ldr	r3, [r7, #12]
 8012b92:	699b      	ldr	r3, [r3, #24]
 8012b94:	429a      	cmp	r2, r3
 8012b96:	d302      	bcc.n	8012b9e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8012b98:	2301      	movs	r3, #1
 8012b9a:	617b      	str	r3, [r7, #20]
 8012b9c:	e01b      	b.n	8012bd6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8012b9e:	4b10      	ldr	r3, [pc, #64]	; (8012be0 <prvInsertTimerInActiveList+0x7c>)
 8012ba0:	681a      	ldr	r2, [r3, #0]
 8012ba2:	68fb      	ldr	r3, [r7, #12]
 8012ba4:	3304      	adds	r3, #4
 8012ba6:	4619      	mov	r1, r3
 8012ba8:	4610      	mov	r0, r2
 8012baa:	f7fd fad0 	bl	801014e <vListInsert>
 8012bae:	e012      	b.n	8012bd6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8012bb0:	687a      	ldr	r2, [r7, #4]
 8012bb2:	683b      	ldr	r3, [r7, #0]
 8012bb4:	429a      	cmp	r2, r3
 8012bb6:	d206      	bcs.n	8012bc6 <prvInsertTimerInActiveList+0x62>
 8012bb8:	68ba      	ldr	r2, [r7, #8]
 8012bba:	683b      	ldr	r3, [r7, #0]
 8012bbc:	429a      	cmp	r2, r3
 8012bbe:	d302      	bcc.n	8012bc6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8012bc0:	2301      	movs	r3, #1
 8012bc2:	617b      	str	r3, [r7, #20]
 8012bc4:	e007      	b.n	8012bd6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8012bc6:	4b07      	ldr	r3, [pc, #28]	; (8012be4 <prvInsertTimerInActiveList+0x80>)
 8012bc8:	681a      	ldr	r2, [r3, #0]
 8012bca:	68fb      	ldr	r3, [r7, #12]
 8012bcc:	3304      	adds	r3, #4
 8012bce:	4619      	mov	r1, r3
 8012bd0:	4610      	mov	r0, r2
 8012bd2:	f7fd fabc 	bl	801014e <vListInsert>
		}
	}

	return xProcessTimerNow;
 8012bd6:	697b      	ldr	r3, [r7, #20]
}
 8012bd8:	4618      	mov	r0, r3
 8012bda:	3718      	adds	r7, #24
 8012bdc:	46bd      	mov	sp, r7
 8012bde:	bd80      	pop	{r7, pc}
 8012be0:	20004f34 	.word	0x20004f34
 8012be4:	20004f30 	.word	0x20004f30

08012be8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8012be8:	b580      	push	{r7, lr}
 8012bea:	b08e      	sub	sp, #56	; 0x38
 8012bec:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8012bee:	e0c6      	b.n	8012d7e <prvProcessReceivedCommands+0x196>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8012bf0:	687b      	ldr	r3, [r7, #4]
 8012bf2:	2b00      	cmp	r3, #0
 8012bf4:	da17      	bge.n	8012c26 <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8012bf6:	1d3b      	adds	r3, r7, #4
 8012bf8:	3304      	adds	r3, #4
 8012bfa:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8012bfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012bfe:	2b00      	cmp	r3, #0
 8012c00:	d109      	bne.n	8012c16 <prvProcessReceivedCommands+0x2e>
 8012c02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012c06:	f383 8811 	msr	BASEPRI, r3
 8012c0a:	f3bf 8f6f 	isb	sy
 8012c0e:	f3bf 8f4f 	dsb	sy
 8012c12:	61fb      	str	r3, [r7, #28]
 8012c14:	e7fe      	b.n	8012c14 <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8012c16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012c18:	681b      	ldr	r3, [r3, #0]
 8012c1a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012c1c:	6850      	ldr	r0, [r2, #4]
 8012c1e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012c20:	6892      	ldr	r2, [r2, #8]
 8012c22:	4611      	mov	r1, r2
 8012c24:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8012c26:	687b      	ldr	r3, [r7, #4]
 8012c28:	2b00      	cmp	r3, #0
 8012c2a:	f2c0 80a7 	blt.w	8012d7c <prvProcessReceivedCommands+0x194>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8012c2e:	68fb      	ldr	r3, [r7, #12]
 8012c30:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8012c32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012c34:	695b      	ldr	r3, [r3, #20]
 8012c36:	2b00      	cmp	r3, #0
 8012c38:	d004      	beq.n	8012c44 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8012c3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012c3c:	3304      	adds	r3, #4
 8012c3e:	4618      	mov	r0, r3
 8012c40:	f7fd fabe 	bl	80101c0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8012c44:	463b      	mov	r3, r7
 8012c46:	4618      	mov	r0, r3
 8012c48:	f7ff ff6c 	bl	8012b24 <prvSampleTimeNow>
 8012c4c:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8012c4e:	687b      	ldr	r3, [r7, #4]
 8012c50:	2b09      	cmp	r3, #9
 8012c52:	f200 8094 	bhi.w	8012d7e <prvProcessReceivedCommands+0x196>
 8012c56:	a201      	add	r2, pc, #4	; (adr r2, 8012c5c <prvProcessReceivedCommands+0x74>)
 8012c58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012c5c:	08012c85 	.word	0x08012c85
 8012c60:	08012c85 	.word	0x08012c85
 8012c64:	08012c85 	.word	0x08012c85
 8012c68:	08012cf7 	.word	0x08012cf7
 8012c6c:	08012d0b 	.word	0x08012d0b
 8012c70:	08012d53 	.word	0x08012d53
 8012c74:	08012c85 	.word	0x08012c85
 8012c78:	08012c85 	.word	0x08012c85
 8012c7c:	08012cf7 	.word	0x08012cf7
 8012c80:	08012d0b 	.word	0x08012d0b
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8012c84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012c86:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8012c8a:	f043 0301 	orr.w	r3, r3, #1
 8012c8e:	b2da      	uxtb	r2, r3
 8012c90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012c92:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8012c96:	68ba      	ldr	r2, [r7, #8]
 8012c98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012c9a:	699b      	ldr	r3, [r3, #24]
 8012c9c:	18d1      	adds	r1, r2, r3
 8012c9e:	68bb      	ldr	r3, [r7, #8]
 8012ca0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012ca2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012ca4:	f7ff ff5e 	bl	8012b64 <prvInsertTimerInActiveList>
 8012ca8:	4603      	mov	r3, r0
 8012caa:	2b00      	cmp	r3, #0
 8012cac:	d067      	beq.n	8012d7e <prvProcessReceivedCommands+0x196>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8012cae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012cb0:	6a1b      	ldr	r3, [r3, #32]
 8012cb2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012cb4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8012cb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012cb8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8012cbc:	f003 0304 	and.w	r3, r3, #4
 8012cc0:	2b00      	cmp	r3, #0
 8012cc2:	d05c      	beq.n	8012d7e <prvProcessReceivedCommands+0x196>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8012cc4:	68ba      	ldr	r2, [r7, #8]
 8012cc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012cc8:	699b      	ldr	r3, [r3, #24]
 8012cca:	441a      	add	r2, r3
 8012ccc:	2300      	movs	r3, #0
 8012cce:	9300      	str	r3, [sp, #0]
 8012cd0:	2300      	movs	r3, #0
 8012cd2:	2100      	movs	r1, #0
 8012cd4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012cd6:	f7ff fe09 	bl	80128ec <xTimerGenericCommand>
 8012cda:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8012cdc:	6a3b      	ldr	r3, [r7, #32]
 8012cde:	2b00      	cmp	r3, #0
 8012ce0:	d14d      	bne.n	8012d7e <prvProcessReceivedCommands+0x196>
 8012ce2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012ce6:	f383 8811 	msr	BASEPRI, r3
 8012cea:	f3bf 8f6f 	isb	sy
 8012cee:	f3bf 8f4f 	dsb	sy
 8012cf2:	61bb      	str	r3, [r7, #24]
 8012cf4:	e7fe      	b.n	8012cf4 <prvProcessReceivedCommands+0x10c>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8012cf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012cf8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8012cfc:	f023 0301 	bic.w	r3, r3, #1
 8012d00:	b2da      	uxtb	r2, r3
 8012d02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012d04:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8012d08:	e039      	b.n	8012d7e <prvProcessReceivedCommands+0x196>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8012d0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012d0c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8012d10:	f043 0301 	orr.w	r3, r3, #1
 8012d14:	b2da      	uxtb	r2, r3
 8012d16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012d18:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8012d1c:	68ba      	ldr	r2, [r7, #8]
 8012d1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012d20:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8012d22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012d24:	699b      	ldr	r3, [r3, #24]
 8012d26:	2b00      	cmp	r3, #0
 8012d28:	d109      	bne.n	8012d3e <prvProcessReceivedCommands+0x156>
 8012d2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012d2e:	f383 8811 	msr	BASEPRI, r3
 8012d32:	f3bf 8f6f 	isb	sy
 8012d36:	f3bf 8f4f 	dsb	sy
 8012d3a:	617b      	str	r3, [r7, #20]
 8012d3c:	e7fe      	b.n	8012d3c <prvProcessReceivedCommands+0x154>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8012d3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012d40:	699a      	ldr	r2, [r3, #24]
 8012d42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012d44:	18d1      	adds	r1, r2, r3
 8012d46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012d48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012d4a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012d4c:	f7ff ff0a 	bl	8012b64 <prvInsertTimerInActiveList>
					break;
 8012d50:	e015      	b.n	8012d7e <prvProcessReceivedCommands+0x196>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8012d52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012d54:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8012d58:	f003 0302 	and.w	r3, r3, #2
 8012d5c:	2b00      	cmp	r3, #0
 8012d5e:	d103      	bne.n	8012d68 <prvProcessReceivedCommands+0x180>
						{
							vPortFree( pxTimer );
 8012d60:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012d62:	f7fd f88f 	bl	800fe84 <vPortFree>
 8012d66:	e00a      	b.n	8012d7e <prvProcessReceivedCommands+0x196>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8012d68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012d6a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8012d6e:	f023 0301 	bic.w	r3, r3, #1
 8012d72:	b2da      	uxtb	r2, r3
 8012d74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012d76:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8012d7a:	e000      	b.n	8012d7e <prvProcessReceivedCommands+0x196>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8012d7c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8012d7e:	4b07      	ldr	r3, [pc, #28]	; (8012d9c <prvProcessReceivedCommands+0x1b4>)
 8012d80:	681b      	ldr	r3, [r3, #0]
 8012d82:	1d39      	adds	r1, r7, #4
 8012d84:	2200      	movs	r2, #0
 8012d86:	4618      	mov	r0, r3
 8012d88:	f7fd feb4 	bl	8010af4 <xQueueReceive>
 8012d8c:	4603      	mov	r3, r0
 8012d8e:	2b00      	cmp	r3, #0
 8012d90:	f47f af2e 	bne.w	8012bf0 <prvProcessReceivedCommands+0x8>
	}
}
 8012d94:	bf00      	nop
 8012d96:	3730      	adds	r7, #48	; 0x30
 8012d98:	46bd      	mov	sp, r7
 8012d9a:	bd80      	pop	{r7, pc}
 8012d9c:	20004f38 	.word	0x20004f38

08012da0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8012da0:	b580      	push	{r7, lr}
 8012da2:	b088      	sub	sp, #32
 8012da4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8012da6:	e047      	b.n	8012e38 <prvSwitchTimerLists+0x98>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8012da8:	4b2d      	ldr	r3, [pc, #180]	; (8012e60 <prvSwitchTimerLists+0xc0>)
 8012daa:	681b      	ldr	r3, [r3, #0]
 8012dac:	68db      	ldr	r3, [r3, #12]
 8012dae:	681b      	ldr	r3, [r3, #0]
 8012db0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8012db2:	4b2b      	ldr	r3, [pc, #172]	; (8012e60 <prvSwitchTimerLists+0xc0>)
 8012db4:	681b      	ldr	r3, [r3, #0]
 8012db6:	68db      	ldr	r3, [r3, #12]
 8012db8:	68db      	ldr	r3, [r3, #12]
 8012dba:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8012dbc:	68fb      	ldr	r3, [r7, #12]
 8012dbe:	3304      	adds	r3, #4
 8012dc0:	4618      	mov	r0, r3
 8012dc2:	f7fd f9fd 	bl	80101c0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8012dc6:	68fb      	ldr	r3, [r7, #12]
 8012dc8:	6a1b      	ldr	r3, [r3, #32]
 8012dca:	68f8      	ldr	r0, [r7, #12]
 8012dcc:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8012dce:	68fb      	ldr	r3, [r7, #12]
 8012dd0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8012dd4:	f003 0304 	and.w	r3, r3, #4
 8012dd8:	2b00      	cmp	r3, #0
 8012dda:	d02d      	beq.n	8012e38 <prvSwitchTimerLists+0x98>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8012ddc:	68fb      	ldr	r3, [r7, #12]
 8012dde:	699b      	ldr	r3, [r3, #24]
 8012de0:	693a      	ldr	r2, [r7, #16]
 8012de2:	4413      	add	r3, r2
 8012de4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8012de6:	68ba      	ldr	r2, [r7, #8]
 8012de8:	693b      	ldr	r3, [r7, #16]
 8012dea:	429a      	cmp	r2, r3
 8012dec:	d90e      	bls.n	8012e0c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8012dee:	68fb      	ldr	r3, [r7, #12]
 8012df0:	68ba      	ldr	r2, [r7, #8]
 8012df2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8012df4:	68fb      	ldr	r3, [r7, #12]
 8012df6:	68fa      	ldr	r2, [r7, #12]
 8012df8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8012dfa:	4b19      	ldr	r3, [pc, #100]	; (8012e60 <prvSwitchTimerLists+0xc0>)
 8012dfc:	681a      	ldr	r2, [r3, #0]
 8012dfe:	68fb      	ldr	r3, [r7, #12]
 8012e00:	3304      	adds	r3, #4
 8012e02:	4619      	mov	r1, r3
 8012e04:	4610      	mov	r0, r2
 8012e06:	f7fd f9a2 	bl	801014e <vListInsert>
 8012e0a:	e015      	b.n	8012e38 <prvSwitchTimerLists+0x98>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8012e0c:	2300      	movs	r3, #0
 8012e0e:	9300      	str	r3, [sp, #0]
 8012e10:	2300      	movs	r3, #0
 8012e12:	693a      	ldr	r2, [r7, #16]
 8012e14:	2100      	movs	r1, #0
 8012e16:	68f8      	ldr	r0, [r7, #12]
 8012e18:	f7ff fd68 	bl	80128ec <xTimerGenericCommand>
 8012e1c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8012e1e:	687b      	ldr	r3, [r7, #4]
 8012e20:	2b00      	cmp	r3, #0
 8012e22:	d109      	bne.n	8012e38 <prvSwitchTimerLists+0x98>
 8012e24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012e28:	f383 8811 	msr	BASEPRI, r3
 8012e2c:	f3bf 8f6f 	isb	sy
 8012e30:	f3bf 8f4f 	dsb	sy
 8012e34:	603b      	str	r3, [r7, #0]
 8012e36:	e7fe      	b.n	8012e36 <prvSwitchTimerLists+0x96>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8012e38:	4b09      	ldr	r3, [pc, #36]	; (8012e60 <prvSwitchTimerLists+0xc0>)
 8012e3a:	681b      	ldr	r3, [r3, #0]
 8012e3c:	681b      	ldr	r3, [r3, #0]
 8012e3e:	2b00      	cmp	r3, #0
 8012e40:	d1b2      	bne.n	8012da8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8012e42:	4b07      	ldr	r3, [pc, #28]	; (8012e60 <prvSwitchTimerLists+0xc0>)
 8012e44:	681b      	ldr	r3, [r3, #0]
 8012e46:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8012e48:	4b06      	ldr	r3, [pc, #24]	; (8012e64 <prvSwitchTimerLists+0xc4>)
 8012e4a:	681b      	ldr	r3, [r3, #0]
 8012e4c:	4a04      	ldr	r2, [pc, #16]	; (8012e60 <prvSwitchTimerLists+0xc0>)
 8012e4e:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8012e50:	4a04      	ldr	r2, [pc, #16]	; (8012e64 <prvSwitchTimerLists+0xc4>)
 8012e52:	697b      	ldr	r3, [r7, #20]
 8012e54:	6013      	str	r3, [r2, #0]
}
 8012e56:	bf00      	nop
 8012e58:	3718      	adds	r7, #24
 8012e5a:	46bd      	mov	sp, r7
 8012e5c:	bd80      	pop	{r7, pc}
 8012e5e:	bf00      	nop
 8012e60:	20004f30 	.word	0x20004f30
 8012e64:	20004f34 	.word	0x20004f34

08012e68 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8012e68:	b580      	push	{r7, lr}
 8012e6a:	b082      	sub	sp, #8
 8012e6c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8012e6e:	f7fc fe2d 	bl	800facc <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8012e72:	4b15      	ldr	r3, [pc, #84]	; (8012ec8 <prvCheckForValidListAndQueue+0x60>)
 8012e74:	681b      	ldr	r3, [r3, #0]
 8012e76:	2b00      	cmp	r3, #0
 8012e78:	d120      	bne.n	8012ebc <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8012e7a:	4814      	ldr	r0, [pc, #80]	; (8012ecc <prvCheckForValidListAndQueue+0x64>)
 8012e7c:	f7fd f916 	bl	80100ac <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8012e80:	4813      	ldr	r0, [pc, #76]	; (8012ed0 <prvCheckForValidListAndQueue+0x68>)
 8012e82:	f7fd f913 	bl	80100ac <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8012e86:	4b13      	ldr	r3, [pc, #76]	; (8012ed4 <prvCheckForValidListAndQueue+0x6c>)
 8012e88:	4a10      	ldr	r2, [pc, #64]	; (8012ecc <prvCheckForValidListAndQueue+0x64>)
 8012e8a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8012e8c:	4b12      	ldr	r3, [pc, #72]	; (8012ed8 <prvCheckForValidListAndQueue+0x70>)
 8012e8e:	4a10      	ldr	r2, [pc, #64]	; (8012ed0 <prvCheckForValidListAndQueue+0x68>)
 8012e90:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8012e92:	2300      	movs	r3, #0
 8012e94:	9300      	str	r3, [sp, #0]
 8012e96:	4b11      	ldr	r3, [pc, #68]	; (8012edc <prvCheckForValidListAndQueue+0x74>)
 8012e98:	4a11      	ldr	r2, [pc, #68]	; (8012ee0 <prvCheckForValidListAndQueue+0x78>)
 8012e9a:	2110      	movs	r1, #16
 8012e9c:	200a      	movs	r0, #10
 8012e9e:	f7fd fa21 	bl	80102e4 <xQueueGenericCreateStatic>
 8012ea2:	4602      	mov	r2, r0
 8012ea4:	4b08      	ldr	r3, [pc, #32]	; (8012ec8 <prvCheckForValidListAndQueue+0x60>)
 8012ea6:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8012ea8:	4b07      	ldr	r3, [pc, #28]	; (8012ec8 <prvCheckForValidListAndQueue+0x60>)
 8012eaa:	681b      	ldr	r3, [r3, #0]
 8012eac:	2b00      	cmp	r3, #0
 8012eae:	d005      	beq.n	8012ebc <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8012eb0:	4b05      	ldr	r3, [pc, #20]	; (8012ec8 <prvCheckForValidListAndQueue+0x60>)
 8012eb2:	681b      	ldr	r3, [r3, #0]
 8012eb4:	490b      	ldr	r1, [pc, #44]	; (8012ee4 <prvCheckForValidListAndQueue+0x7c>)
 8012eb6:	4618      	mov	r0, r3
 8012eb8:	f7fe f9c8 	bl	801124c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8012ebc:	f7fc fe34 	bl	800fb28 <vPortExitCritical>
}
 8012ec0:	bf00      	nop
 8012ec2:	46bd      	mov	sp, r7
 8012ec4:	bd80      	pop	{r7, pc}
 8012ec6:	bf00      	nop
 8012ec8:	20004f38 	.word	0x20004f38
 8012ecc:	20004f08 	.word	0x20004f08
 8012ed0:	20004f1c 	.word	0x20004f1c
 8012ed4:	20004f30 	.word	0x20004f30
 8012ed8:	20004f34 	.word	0x20004f34
 8012edc:	20004fe4 	.word	0x20004fe4
 8012ee0:	20004f44 	.word	0x20004f44
 8012ee4:	08016404 	.word	0x08016404

08012ee8 <UTIL_LPM_Init>:

/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
 8012ee8:	b480      	push	{r7}
 8012eea:	af00      	add	r7, sp, #0
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 8012eec:	4b05      	ldr	r3, [pc, #20]	; (8012f04 <UTIL_LPM_Init+0x1c>)
 8012eee:	2200      	movs	r2, #0
 8012ef0:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 8012ef2:	4b05      	ldr	r3, [pc, #20]	; (8012f08 <UTIL_LPM_Init+0x20>)
 8012ef4:	2200      	movs	r2, #0
 8012ef6:	601a      	str	r2, [r3, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 8012ef8:	bf00      	nop
 8012efa:	46bd      	mov	sp, r7
 8012efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f00:	4770      	bx	lr
 8012f02:	bf00      	nop
 8012f04:	20005034 	.word	0x20005034
 8012f08:	20005038 	.word	0x20005038

08012f0c <UTIL_LPM_SetOffMode>:
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 8012f0c:	b480      	push	{r7}
 8012f0e:	b087      	sub	sp, #28
 8012f10:	af00      	add	r7, sp, #0
 8012f12:	6078      	str	r0, [r7, #4]
 8012f14:	460b      	mov	r3, r1
 8012f16:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8012f18:	f3ef 8310 	mrs	r3, PRIMASK
 8012f1c:	613b      	str	r3, [r7, #16]
  return(result);
 8012f1e:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 8012f20:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8012f22:	b672      	cpsid	i
  
  switch(state)
 8012f24:	78fb      	ldrb	r3, [r7, #3]
 8012f26:	2b00      	cmp	r3, #0
 8012f28:	d009      	beq.n	8012f3e <UTIL_LPM_SetOffMode+0x32>
 8012f2a:	2b01      	cmp	r3, #1
 8012f2c:	d000      	beq.n	8012f30 <UTIL_LPM_SetOffMode+0x24>
      OffModeDisable &= ( ~lpm_id_bm );
      break;
    }
  default :
    {
      break;
 8012f2e:	e00e      	b.n	8012f4e <UTIL_LPM_SetOffMode+0x42>
      OffModeDisable |= lpm_id_bm;
 8012f30:	4b0c      	ldr	r3, [pc, #48]	; (8012f64 <UTIL_LPM_SetOffMode+0x58>)
 8012f32:	681a      	ldr	r2, [r3, #0]
 8012f34:	687b      	ldr	r3, [r7, #4]
 8012f36:	4313      	orrs	r3, r2
 8012f38:	4a0a      	ldr	r2, [pc, #40]	; (8012f64 <UTIL_LPM_SetOffMode+0x58>)
 8012f3a:	6013      	str	r3, [r2, #0]
      break;
 8012f3c:	e007      	b.n	8012f4e <UTIL_LPM_SetOffMode+0x42>
      OffModeDisable &= ( ~lpm_id_bm );
 8012f3e:	687b      	ldr	r3, [r7, #4]
 8012f40:	43da      	mvns	r2, r3
 8012f42:	4b08      	ldr	r3, [pc, #32]	; (8012f64 <UTIL_LPM_SetOffMode+0x58>)
 8012f44:	681b      	ldr	r3, [r3, #0]
 8012f46:	4013      	ands	r3, r2
 8012f48:	4a06      	ldr	r2, [pc, #24]	; (8012f64 <UTIL_LPM_SetOffMode+0x58>)
 8012f4a:	6013      	str	r3, [r2, #0]
      break;
 8012f4c:	bf00      	nop
 8012f4e:	697b      	ldr	r3, [r7, #20]
 8012f50:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012f52:	68fb      	ldr	r3, [r7, #12]
 8012f54:	f383 8810 	msr	PRIMASK, r3
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 8012f58:	bf00      	nop
 8012f5a:	371c      	adds	r7, #28
 8012f5c:	46bd      	mov	sp, r7
 8012f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f62:	4770      	bx	lr
 8012f64:	20005038 	.word	0x20005038

08012f68 <__errno>:
 8012f68:	4b01      	ldr	r3, [pc, #4]	; (8012f70 <__errno+0x8>)
 8012f6a:	6818      	ldr	r0, [r3, #0]
 8012f6c:	4770      	bx	lr
 8012f6e:	bf00      	nop
 8012f70:	20000024 	.word	0x20000024

08012f74 <__libc_init_array>:
 8012f74:	b570      	push	{r4, r5, r6, lr}
 8012f76:	4e0d      	ldr	r6, [pc, #52]	; (8012fac <__libc_init_array+0x38>)
 8012f78:	4c0d      	ldr	r4, [pc, #52]	; (8012fb0 <__libc_init_array+0x3c>)
 8012f7a:	1ba4      	subs	r4, r4, r6
 8012f7c:	10a4      	asrs	r4, r4, #2
 8012f7e:	2500      	movs	r5, #0
 8012f80:	42a5      	cmp	r5, r4
 8012f82:	d109      	bne.n	8012f98 <__libc_init_array+0x24>
 8012f84:	4e0b      	ldr	r6, [pc, #44]	; (8012fb4 <__libc_init_array+0x40>)
 8012f86:	4c0c      	ldr	r4, [pc, #48]	; (8012fb8 <__libc_init_array+0x44>)
 8012f88:	f002 fdc6 	bl	8015b18 <_init>
 8012f8c:	1ba4      	subs	r4, r4, r6
 8012f8e:	10a4      	asrs	r4, r4, #2
 8012f90:	2500      	movs	r5, #0
 8012f92:	42a5      	cmp	r5, r4
 8012f94:	d105      	bne.n	8012fa2 <__libc_init_array+0x2e>
 8012f96:	bd70      	pop	{r4, r5, r6, pc}
 8012f98:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8012f9c:	4798      	blx	r3
 8012f9e:	3501      	adds	r5, #1
 8012fa0:	e7ee      	b.n	8012f80 <__libc_init_array+0xc>
 8012fa2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8012fa6:	4798      	blx	r3
 8012fa8:	3501      	adds	r5, #1
 8012faa:	e7f2      	b.n	8012f92 <__libc_init_array+0x1e>
 8012fac:	08017b00 	.word	0x08017b00
 8012fb0:	08017b00 	.word	0x08017b00
 8012fb4:	08017b00 	.word	0x08017b00
 8012fb8:	08017b04 	.word	0x08017b04

08012fbc <malloc>:
 8012fbc:	4b02      	ldr	r3, [pc, #8]	; (8012fc8 <malloc+0xc>)
 8012fbe:	4601      	mov	r1, r0
 8012fc0:	6818      	ldr	r0, [r3, #0]
 8012fc2:	f000 b865 	b.w	8013090 <_malloc_r>
 8012fc6:	bf00      	nop
 8012fc8:	20000024 	.word	0x20000024

08012fcc <memcpy>:
 8012fcc:	b510      	push	{r4, lr}
 8012fce:	1e43      	subs	r3, r0, #1
 8012fd0:	440a      	add	r2, r1
 8012fd2:	4291      	cmp	r1, r2
 8012fd4:	d100      	bne.n	8012fd8 <memcpy+0xc>
 8012fd6:	bd10      	pop	{r4, pc}
 8012fd8:	f811 4b01 	ldrb.w	r4, [r1], #1
 8012fdc:	f803 4f01 	strb.w	r4, [r3, #1]!
 8012fe0:	e7f7      	b.n	8012fd2 <memcpy+0x6>

08012fe2 <memset>:
 8012fe2:	4402      	add	r2, r0
 8012fe4:	4603      	mov	r3, r0
 8012fe6:	4293      	cmp	r3, r2
 8012fe8:	d100      	bne.n	8012fec <memset+0xa>
 8012fea:	4770      	bx	lr
 8012fec:	f803 1b01 	strb.w	r1, [r3], #1
 8012ff0:	e7f9      	b.n	8012fe6 <memset+0x4>
	...

08012ff4 <_free_r>:
 8012ff4:	b538      	push	{r3, r4, r5, lr}
 8012ff6:	4605      	mov	r5, r0
 8012ff8:	2900      	cmp	r1, #0
 8012ffa:	d045      	beq.n	8013088 <_free_r+0x94>
 8012ffc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8013000:	1f0c      	subs	r4, r1, #4
 8013002:	2b00      	cmp	r3, #0
 8013004:	bfb8      	it	lt
 8013006:	18e4      	addlt	r4, r4, r3
 8013008:	f001 feaa 	bl	8014d60 <__malloc_lock>
 801300c:	4a1f      	ldr	r2, [pc, #124]	; (801308c <_free_r+0x98>)
 801300e:	6813      	ldr	r3, [r2, #0]
 8013010:	4610      	mov	r0, r2
 8013012:	b933      	cbnz	r3, 8013022 <_free_r+0x2e>
 8013014:	6063      	str	r3, [r4, #4]
 8013016:	6014      	str	r4, [r2, #0]
 8013018:	4628      	mov	r0, r5
 801301a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801301e:	f001 bea0 	b.w	8014d62 <__malloc_unlock>
 8013022:	42a3      	cmp	r3, r4
 8013024:	d90c      	bls.n	8013040 <_free_r+0x4c>
 8013026:	6821      	ldr	r1, [r4, #0]
 8013028:	1862      	adds	r2, r4, r1
 801302a:	4293      	cmp	r3, r2
 801302c:	bf04      	itt	eq
 801302e:	681a      	ldreq	r2, [r3, #0]
 8013030:	685b      	ldreq	r3, [r3, #4]
 8013032:	6063      	str	r3, [r4, #4]
 8013034:	bf04      	itt	eq
 8013036:	1852      	addeq	r2, r2, r1
 8013038:	6022      	streq	r2, [r4, #0]
 801303a:	6004      	str	r4, [r0, #0]
 801303c:	e7ec      	b.n	8013018 <_free_r+0x24>
 801303e:	4613      	mov	r3, r2
 8013040:	685a      	ldr	r2, [r3, #4]
 8013042:	b10a      	cbz	r2, 8013048 <_free_r+0x54>
 8013044:	42a2      	cmp	r2, r4
 8013046:	d9fa      	bls.n	801303e <_free_r+0x4a>
 8013048:	6819      	ldr	r1, [r3, #0]
 801304a:	1858      	adds	r0, r3, r1
 801304c:	42a0      	cmp	r0, r4
 801304e:	d10b      	bne.n	8013068 <_free_r+0x74>
 8013050:	6820      	ldr	r0, [r4, #0]
 8013052:	4401      	add	r1, r0
 8013054:	1858      	adds	r0, r3, r1
 8013056:	4282      	cmp	r2, r0
 8013058:	6019      	str	r1, [r3, #0]
 801305a:	d1dd      	bne.n	8013018 <_free_r+0x24>
 801305c:	6810      	ldr	r0, [r2, #0]
 801305e:	6852      	ldr	r2, [r2, #4]
 8013060:	605a      	str	r2, [r3, #4]
 8013062:	4401      	add	r1, r0
 8013064:	6019      	str	r1, [r3, #0]
 8013066:	e7d7      	b.n	8013018 <_free_r+0x24>
 8013068:	d902      	bls.n	8013070 <_free_r+0x7c>
 801306a:	230c      	movs	r3, #12
 801306c:	602b      	str	r3, [r5, #0]
 801306e:	e7d3      	b.n	8013018 <_free_r+0x24>
 8013070:	6820      	ldr	r0, [r4, #0]
 8013072:	1821      	adds	r1, r4, r0
 8013074:	428a      	cmp	r2, r1
 8013076:	bf04      	itt	eq
 8013078:	6811      	ldreq	r1, [r2, #0]
 801307a:	6852      	ldreq	r2, [r2, #4]
 801307c:	6062      	str	r2, [r4, #4]
 801307e:	bf04      	itt	eq
 8013080:	1809      	addeq	r1, r1, r0
 8013082:	6021      	streq	r1, [r4, #0]
 8013084:	605c      	str	r4, [r3, #4]
 8013086:	e7c7      	b.n	8013018 <_free_r+0x24>
 8013088:	bd38      	pop	{r3, r4, r5, pc}
 801308a:	bf00      	nop
 801308c:	2000503c 	.word	0x2000503c

08013090 <_malloc_r>:
 8013090:	b570      	push	{r4, r5, r6, lr}
 8013092:	1ccd      	adds	r5, r1, #3
 8013094:	f025 0503 	bic.w	r5, r5, #3
 8013098:	3508      	adds	r5, #8
 801309a:	2d0c      	cmp	r5, #12
 801309c:	bf38      	it	cc
 801309e:	250c      	movcc	r5, #12
 80130a0:	2d00      	cmp	r5, #0
 80130a2:	4606      	mov	r6, r0
 80130a4:	db01      	blt.n	80130aa <_malloc_r+0x1a>
 80130a6:	42a9      	cmp	r1, r5
 80130a8:	d903      	bls.n	80130b2 <_malloc_r+0x22>
 80130aa:	230c      	movs	r3, #12
 80130ac:	6033      	str	r3, [r6, #0]
 80130ae:	2000      	movs	r0, #0
 80130b0:	bd70      	pop	{r4, r5, r6, pc}
 80130b2:	f001 fe55 	bl	8014d60 <__malloc_lock>
 80130b6:	4a21      	ldr	r2, [pc, #132]	; (801313c <_malloc_r+0xac>)
 80130b8:	6814      	ldr	r4, [r2, #0]
 80130ba:	4621      	mov	r1, r4
 80130bc:	b991      	cbnz	r1, 80130e4 <_malloc_r+0x54>
 80130be:	4c20      	ldr	r4, [pc, #128]	; (8013140 <_malloc_r+0xb0>)
 80130c0:	6823      	ldr	r3, [r4, #0]
 80130c2:	b91b      	cbnz	r3, 80130cc <_malloc_r+0x3c>
 80130c4:	4630      	mov	r0, r6
 80130c6:	f000 fd15 	bl	8013af4 <_sbrk_r>
 80130ca:	6020      	str	r0, [r4, #0]
 80130cc:	4629      	mov	r1, r5
 80130ce:	4630      	mov	r0, r6
 80130d0:	f000 fd10 	bl	8013af4 <_sbrk_r>
 80130d4:	1c43      	adds	r3, r0, #1
 80130d6:	d124      	bne.n	8013122 <_malloc_r+0x92>
 80130d8:	230c      	movs	r3, #12
 80130da:	6033      	str	r3, [r6, #0]
 80130dc:	4630      	mov	r0, r6
 80130de:	f001 fe40 	bl	8014d62 <__malloc_unlock>
 80130e2:	e7e4      	b.n	80130ae <_malloc_r+0x1e>
 80130e4:	680b      	ldr	r3, [r1, #0]
 80130e6:	1b5b      	subs	r3, r3, r5
 80130e8:	d418      	bmi.n	801311c <_malloc_r+0x8c>
 80130ea:	2b0b      	cmp	r3, #11
 80130ec:	d90f      	bls.n	801310e <_malloc_r+0x7e>
 80130ee:	600b      	str	r3, [r1, #0]
 80130f0:	50cd      	str	r5, [r1, r3]
 80130f2:	18cc      	adds	r4, r1, r3
 80130f4:	4630      	mov	r0, r6
 80130f6:	f001 fe34 	bl	8014d62 <__malloc_unlock>
 80130fa:	f104 000b 	add.w	r0, r4, #11
 80130fe:	1d23      	adds	r3, r4, #4
 8013100:	f020 0007 	bic.w	r0, r0, #7
 8013104:	1ac3      	subs	r3, r0, r3
 8013106:	d0d3      	beq.n	80130b0 <_malloc_r+0x20>
 8013108:	425a      	negs	r2, r3
 801310a:	50e2      	str	r2, [r4, r3]
 801310c:	e7d0      	b.n	80130b0 <_malloc_r+0x20>
 801310e:	428c      	cmp	r4, r1
 8013110:	684b      	ldr	r3, [r1, #4]
 8013112:	bf16      	itet	ne
 8013114:	6063      	strne	r3, [r4, #4]
 8013116:	6013      	streq	r3, [r2, #0]
 8013118:	460c      	movne	r4, r1
 801311a:	e7eb      	b.n	80130f4 <_malloc_r+0x64>
 801311c:	460c      	mov	r4, r1
 801311e:	6849      	ldr	r1, [r1, #4]
 8013120:	e7cc      	b.n	80130bc <_malloc_r+0x2c>
 8013122:	1cc4      	adds	r4, r0, #3
 8013124:	f024 0403 	bic.w	r4, r4, #3
 8013128:	42a0      	cmp	r0, r4
 801312a:	d005      	beq.n	8013138 <_malloc_r+0xa8>
 801312c:	1a21      	subs	r1, r4, r0
 801312e:	4630      	mov	r0, r6
 8013130:	f000 fce0 	bl	8013af4 <_sbrk_r>
 8013134:	3001      	adds	r0, #1
 8013136:	d0cf      	beq.n	80130d8 <_malloc_r+0x48>
 8013138:	6025      	str	r5, [r4, #0]
 801313a:	e7db      	b.n	80130f4 <_malloc_r+0x64>
 801313c:	2000503c 	.word	0x2000503c
 8013140:	20005040 	.word	0x20005040

08013144 <__cvt>:
 8013144:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8013148:	ec55 4b10 	vmov	r4, r5, d0
 801314c:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 801314e:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8013152:	2d00      	cmp	r5, #0
 8013154:	460e      	mov	r6, r1
 8013156:	4691      	mov	r9, r2
 8013158:	4619      	mov	r1, r3
 801315a:	bfb8      	it	lt
 801315c:	4622      	movlt	r2, r4
 801315e:	462b      	mov	r3, r5
 8013160:	f027 0720 	bic.w	r7, r7, #32
 8013164:	bfbb      	ittet	lt
 8013166:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 801316a:	461d      	movlt	r5, r3
 801316c:	2300      	movge	r3, #0
 801316e:	232d      	movlt	r3, #45	; 0x2d
 8013170:	bfb8      	it	lt
 8013172:	4614      	movlt	r4, r2
 8013174:	2f46      	cmp	r7, #70	; 0x46
 8013176:	700b      	strb	r3, [r1, #0]
 8013178:	d004      	beq.n	8013184 <__cvt+0x40>
 801317a:	2f45      	cmp	r7, #69	; 0x45
 801317c:	d100      	bne.n	8013180 <__cvt+0x3c>
 801317e:	3601      	adds	r6, #1
 8013180:	2102      	movs	r1, #2
 8013182:	e000      	b.n	8013186 <__cvt+0x42>
 8013184:	2103      	movs	r1, #3
 8013186:	ab03      	add	r3, sp, #12
 8013188:	9301      	str	r3, [sp, #4]
 801318a:	ab02      	add	r3, sp, #8
 801318c:	9300      	str	r3, [sp, #0]
 801318e:	4632      	mov	r2, r6
 8013190:	4653      	mov	r3, sl
 8013192:	ec45 4b10 	vmov	d0, r4, r5
 8013196:	f000 fe3f 	bl	8013e18 <_dtoa_r>
 801319a:	2f47      	cmp	r7, #71	; 0x47
 801319c:	4680      	mov	r8, r0
 801319e:	d102      	bne.n	80131a6 <__cvt+0x62>
 80131a0:	f019 0f01 	tst.w	r9, #1
 80131a4:	d026      	beq.n	80131f4 <__cvt+0xb0>
 80131a6:	2f46      	cmp	r7, #70	; 0x46
 80131a8:	eb08 0906 	add.w	r9, r8, r6
 80131ac:	d111      	bne.n	80131d2 <__cvt+0x8e>
 80131ae:	f898 3000 	ldrb.w	r3, [r8]
 80131b2:	2b30      	cmp	r3, #48	; 0x30
 80131b4:	d10a      	bne.n	80131cc <__cvt+0x88>
 80131b6:	2200      	movs	r2, #0
 80131b8:	2300      	movs	r3, #0
 80131ba:	4620      	mov	r0, r4
 80131bc:	4629      	mov	r1, r5
 80131be:	f7ed fc5b 	bl	8000a78 <__aeabi_dcmpeq>
 80131c2:	b918      	cbnz	r0, 80131cc <__cvt+0x88>
 80131c4:	f1c6 0601 	rsb	r6, r6, #1
 80131c8:	f8ca 6000 	str.w	r6, [sl]
 80131cc:	f8da 3000 	ldr.w	r3, [sl]
 80131d0:	4499      	add	r9, r3
 80131d2:	2200      	movs	r2, #0
 80131d4:	2300      	movs	r3, #0
 80131d6:	4620      	mov	r0, r4
 80131d8:	4629      	mov	r1, r5
 80131da:	f7ed fc4d 	bl	8000a78 <__aeabi_dcmpeq>
 80131de:	b938      	cbnz	r0, 80131f0 <__cvt+0xac>
 80131e0:	2230      	movs	r2, #48	; 0x30
 80131e2:	9b03      	ldr	r3, [sp, #12]
 80131e4:	454b      	cmp	r3, r9
 80131e6:	d205      	bcs.n	80131f4 <__cvt+0xb0>
 80131e8:	1c59      	adds	r1, r3, #1
 80131ea:	9103      	str	r1, [sp, #12]
 80131ec:	701a      	strb	r2, [r3, #0]
 80131ee:	e7f8      	b.n	80131e2 <__cvt+0x9e>
 80131f0:	f8cd 900c 	str.w	r9, [sp, #12]
 80131f4:	9b03      	ldr	r3, [sp, #12]
 80131f6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80131f8:	eba3 0308 	sub.w	r3, r3, r8
 80131fc:	4640      	mov	r0, r8
 80131fe:	6013      	str	r3, [r2, #0]
 8013200:	b004      	add	sp, #16
 8013202:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08013206 <__exponent>:
 8013206:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8013208:	2900      	cmp	r1, #0
 801320a:	4604      	mov	r4, r0
 801320c:	bfba      	itte	lt
 801320e:	4249      	neglt	r1, r1
 8013210:	232d      	movlt	r3, #45	; 0x2d
 8013212:	232b      	movge	r3, #43	; 0x2b
 8013214:	2909      	cmp	r1, #9
 8013216:	f804 2b02 	strb.w	r2, [r4], #2
 801321a:	7043      	strb	r3, [r0, #1]
 801321c:	dd20      	ble.n	8013260 <__exponent+0x5a>
 801321e:	f10d 0307 	add.w	r3, sp, #7
 8013222:	461f      	mov	r7, r3
 8013224:	260a      	movs	r6, #10
 8013226:	fb91 f5f6 	sdiv	r5, r1, r6
 801322a:	fb06 1115 	mls	r1, r6, r5, r1
 801322e:	3130      	adds	r1, #48	; 0x30
 8013230:	2d09      	cmp	r5, #9
 8013232:	f803 1c01 	strb.w	r1, [r3, #-1]
 8013236:	f103 32ff 	add.w	r2, r3, #4294967295
 801323a:	4629      	mov	r1, r5
 801323c:	dc09      	bgt.n	8013252 <__exponent+0x4c>
 801323e:	3130      	adds	r1, #48	; 0x30
 8013240:	3b02      	subs	r3, #2
 8013242:	f802 1c01 	strb.w	r1, [r2, #-1]
 8013246:	42bb      	cmp	r3, r7
 8013248:	4622      	mov	r2, r4
 801324a:	d304      	bcc.n	8013256 <__exponent+0x50>
 801324c:	1a10      	subs	r0, r2, r0
 801324e:	b003      	add	sp, #12
 8013250:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013252:	4613      	mov	r3, r2
 8013254:	e7e7      	b.n	8013226 <__exponent+0x20>
 8013256:	f813 2b01 	ldrb.w	r2, [r3], #1
 801325a:	f804 2b01 	strb.w	r2, [r4], #1
 801325e:	e7f2      	b.n	8013246 <__exponent+0x40>
 8013260:	2330      	movs	r3, #48	; 0x30
 8013262:	4419      	add	r1, r3
 8013264:	7083      	strb	r3, [r0, #2]
 8013266:	1d02      	adds	r2, r0, #4
 8013268:	70c1      	strb	r1, [r0, #3]
 801326a:	e7ef      	b.n	801324c <__exponent+0x46>

0801326c <_printf_float>:
 801326c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013270:	b08d      	sub	sp, #52	; 0x34
 8013272:	460c      	mov	r4, r1
 8013274:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8013278:	4616      	mov	r6, r2
 801327a:	461f      	mov	r7, r3
 801327c:	4605      	mov	r5, r0
 801327e:	f001 fcfd 	bl	8014c7c <_localeconv_r>
 8013282:	6803      	ldr	r3, [r0, #0]
 8013284:	9304      	str	r3, [sp, #16]
 8013286:	4618      	mov	r0, r3
 8013288:	f7ec ff7a 	bl	8000180 <strlen>
 801328c:	2300      	movs	r3, #0
 801328e:	930a      	str	r3, [sp, #40]	; 0x28
 8013290:	f8d8 3000 	ldr.w	r3, [r8]
 8013294:	9005      	str	r0, [sp, #20]
 8013296:	3307      	adds	r3, #7
 8013298:	f023 0307 	bic.w	r3, r3, #7
 801329c:	f103 0208 	add.w	r2, r3, #8
 80132a0:	f894 a018 	ldrb.w	sl, [r4, #24]
 80132a4:	f8d4 b000 	ldr.w	fp, [r4]
 80132a8:	f8c8 2000 	str.w	r2, [r8]
 80132ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80132b0:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80132b4:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80132b8:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80132bc:	9307      	str	r3, [sp, #28]
 80132be:	f8cd 8018 	str.w	r8, [sp, #24]
 80132c2:	f04f 32ff 	mov.w	r2, #4294967295
 80132c6:	4ba7      	ldr	r3, [pc, #668]	; (8013564 <_printf_float+0x2f8>)
 80132c8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80132cc:	f7ed fc06 	bl	8000adc <__aeabi_dcmpun>
 80132d0:	bb70      	cbnz	r0, 8013330 <_printf_float+0xc4>
 80132d2:	f04f 32ff 	mov.w	r2, #4294967295
 80132d6:	4ba3      	ldr	r3, [pc, #652]	; (8013564 <_printf_float+0x2f8>)
 80132d8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80132dc:	f7ed fbe0 	bl	8000aa0 <__aeabi_dcmple>
 80132e0:	bb30      	cbnz	r0, 8013330 <_printf_float+0xc4>
 80132e2:	2200      	movs	r2, #0
 80132e4:	2300      	movs	r3, #0
 80132e6:	4640      	mov	r0, r8
 80132e8:	4649      	mov	r1, r9
 80132ea:	f7ed fbcf 	bl	8000a8c <__aeabi_dcmplt>
 80132ee:	b110      	cbz	r0, 80132f6 <_printf_float+0x8a>
 80132f0:	232d      	movs	r3, #45	; 0x2d
 80132f2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80132f6:	4a9c      	ldr	r2, [pc, #624]	; (8013568 <_printf_float+0x2fc>)
 80132f8:	4b9c      	ldr	r3, [pc, #624]	; (801356c <_printf_float+0x300>)
 80132fa:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 80132fe:	bf8c      	ite	hi
 8013300:	4690      	movhi	r8, r2
 8013302:	4698      	movls	r8, r3
 8013304:	2303      	movs	r3, #3
 8013306:	f02b 0204 	bic.w	r2, fp, #4
 801330a:	6123      	str	r3, [r4, #16]
 801330c:	6022      	str	r2, [r4, #0]
 801330e:	f04f 0900 	mov.w	r9, #0
 8013312:	9700      	str	r7, [sp, #0]
 8013314:	4633      	mov	r3, r6
 8013316:	aa0b      	add	r2, sp, #44	; 0x2c
 8013318:	4621      	mov	r1, r4
 801331a:	4628      	mov	r0, r5
 801331c:	f000 f9e6 	bl	80136ec <_printf_common>
 8013320:	3001      	adds	r0, #1
 8013322:	f040 808d 	bne.w	8013440 <_printf_float+0x1d4>
 8013326:	f04f 30ff 	mov.w	r0, #4294967295
 801332a:	b00d      	add	sp, #52	; 0x34
 801332c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013330:	4642      	mov	r2, r8
 8013332:	464b      	mov	r3, r9
 8013334:	4640      	mov	r0, r8
 8013336:	4649      	mov	r1, r9
 8013338:	f7ed fbd0 	bl	8000adc <__aeabi_dcmpun>
 801333c:	b110      	cbz	r0, 8013344 <_printf_float+0xd8>
 801333e:	4a8c      	ldr	r2, [pc, #560]	; (8013570 <_printf_float+0x304>)
 8013340:	4b8c      	ldr	r3, [pc, #560]	; (8013574 <_printf_float+0x308>)
 8013342:	e7da      	b.n	80132fa <_printf_float+0x8e>
 8013344:	6861      	ldr	r1, [r4, #4]
 8013346:	1c4b      	adds	r3, r1, #1
 8013348:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 801334c:	a80a      	add	r0, sp, #40	; 0x28
 801334e:	d13e      	bne.n	80133ce <_printf_float+0x162>
 8013350:	2306      	movs	r3, #6
 8013352:	6063      	str	r3, [r4, #4]
 8013354:	2300      	movs	r3, #0
 8013356:	e9cd 0302 	strd	r0, r3, [sp, #8]
 801335a:	ab09      	add	r3, sp, #36	; 0x24
 801335c:	9300      	str	r3, [sp, #0]
 801335e:	ec49 8b10 	vmov	d0, r8, r9
 8013362:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8013366:	6022      	str	r2, [r4, #0]
 8013368:	f8cd a004 	str.w	sl, [sp, #4]
 801336c:	6861      	ldr	r1, [r4, #4]
 801336e:	4628      	mov	r0, r5
 8013370:	f7ff fee8 	bl	8013144 <__cvt>
 8013374:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8013378:	2b47      	cmp	r3, #71	; 0x47
 801337a:	4680      	mov	r8, r0
 801337c:	d109      	bne.n	8013392 <_printf_float+0x126>
 801337e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013380:	1cd8      	adds	r0, r3, #3
 8013382:	db02      	blt.n	801338a <_printf_float+0x11e>
 8013384:	6862      	ldr	r2, [r4, #4]
 8013386:	4293      	cmp	r3, r2
 8013388:	dd47      	ble.n	801341a <_printf_float+0x1ae>
 801338a:	f1aa 0a02 	sub.w	sl, sl, #2
 801338e:	fa5f fa8a 	uxtb.w	sl, sl
 8013392:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8013396:	9909      	ldr	r1, [sp, #36]	; 0x24
 8013398:	d824      	bhi.n	80133e4 <_printf_float+0x178>
 801339a:	3901      	subs	r1, #1
 801339c:	4652      	mov	r2, sl
 801339e:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80133a2:	9109      	str	r1, [sp, #36]	; 0x24
 80133a4:	f7ff ff2f 	bl	8013206 <__exponent>
 80133a8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80133aa:	1813      	adds	r3, r2, r0
 80133ac:	2a01      	cmp	r2, #1
 80133ae:	4681      	mov	r9, r0
 80133b0:	6123      	str	r3, [r4, #16]
 80133b2:	dc02      	bgt.n	80133ba <_printf_float+0x14e>
 80133b4:	6822      	ldr	r2, [r4, #0]
 80133b6:	07d1      	lsls	r1, r2, #31
 80133b8:	d501      	bpl.n	80133be <_printf_float+0x152>
 80133ba:	3301      	adds	r3, #1
 80133bc:	6123      	str	r3, [r4, #16]
 80133be:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80133c2:	2b00      	cmp	r3, #0
 80133c4:	d0a5      	beq.n	8013312 <_printf_float+0xa6>
 80133c6:	232d      	movs	r3, #45	; 0x2d
 80133c8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80133cc:	e7a1      	b.n	8013312 <_printf_float+0xa6>
 80133ce:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 80133d2:	f000 8177 	beq.w	80136c4 <_printf_float+0x458>
 80133d6:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 80133da:	d1bb      	bne.n	8013354 <_printf_float+0xe8>
 80133dc:	2900      	cmp	r1, #0
 80133de:	d1b9      	bne.n	8013354 <_printf_float+0xe8>
 80133e0:	2301      	movs	r3, #1
 80133e2:	e7b6      	b.n	8013352 <_printf_float+0xe6>
 80133e4:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 80133e8:	d119      	bne.n	801341e <_printf_float+0x1b2>
 80133ea:	2900      	cmp	r1, #0
 80133ec:	6863      	ldr	r3, [r4, #4]
 80133ee:	dd0c      	ble.n	801340a <_printf_float+0x19e>
 80133f0:	6121      	str	r1, [r4, #16]
 80133f2:	b913      	cbnz	r3, 80133fa <_printf_float+0x18e>
 80133f4:	6822      	ldr	r2, [r4, #0]
 80133f6:	07d2      	lsls	r2, r2, #31
 80133f8:	d502      	bpl.n	8013400 <_printf_float+0x194>
 80133fa:	3301      	adds	r3, #1
 80133fc:	440b      	add	r3, r1
 80133fe:	6123      	str	r3, [r4, #16]
 8013400:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013402:	65a3      	str	r3, [r4, #88]	; 0x58
 8013404:	f04f 0900 	mov.w	r9, #0
 8013408:	e7d9      	b.n	80133be <_printf_float+0x152>
 801340a:	b913      	cbnz	r3, 8013412 <_printf_float+0x1a6>
 801340c:	6822      	ldr	r2, [r4, #0]
 801340e:	07d0      	lsls	r0, r2, #31
 8013410:	d501      	bpl.n	8013416 <_printf_float+0x1aa>
 8013412:	3302      	adds	r3, #2
 8013414:	e7f3      	b.n	80133fe <_printf_float+0x192>
 8013416:	2301      	movs	r3, #1
 8013418:	e7f1      	b.n	80133fe <_printf_float+0x192>
 801341a:	f04f 0a67 	mov.w	sl, #103	; 0x67
 801341e:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8013422:	4293      	cmp	r3, r2
 8013424:	db05      	blt.n	8013432 <_printf_float+0x1c6>
 8013426:	6822      	ldr	r2, [r4, #0]
 8013428:	6123      	str	r3, [r4, #16]
 801342a:	07d1      	lsls	r1, r2, #31
 801342c:	d5e8      	bpl.n	8013400 <_printf_float+0x194>
 801342e:	3301      	adds	r3, #1
 8013430:	e7e5      	b.n	80133fe <_printf_float+0x192>
 8013432:	2b00      	cmp	r3, #0
 8013434:	bfd4      	ite	le
 8013436:	f1c3 0302 	rsble	r3, r3, #2
 801343a:	2301      	movgt	r3, #1
 801343c:	4413      	add	r3, r2
 801343e:	e7de      	b.n	80133fe <_printf_float+0x192>
 8013440:	6823      	ldr	r3, [r4, #0]
 8013442:	055a      	lsls	r2, r3, #21
 8013444:	d407      	bmi.n	8013456 <_printf_float+0x1ea>
 8013446:	6923      	ldr	r3, [r4, #16]
 8013448:	4642      	mov	r2, r8
 801344a:	4631      	mov	r1, r6
 801344c:	4628      	mov	r0, r5
 801344e:	47b8      	blx	r7
 8013450:	3001      	adds	r0, #1
 8013452:	d12b      	bne.n	80134ac <_printf_float+0x240>
 8013454:	e767      	b.n	8013326 <_printf_float+0xba>
 8013456:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 801345a:	f240 80dc 	bls.w	8013616 <_printf_float+0x3aa>
 801345e:	2200      	movs	r2, #0
 8013460:	2300      	movs	r3, #0
 8013462:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8013466:	f7ed fb07 	bl	8000a78 <__aeabi_dcmpeq>
 801346a:	2800      	cmp	r0, #0
 801346c:	d033      	beq.n	80134d6 <_printf_float+0x26a>
 801346e:	2301      	movs	r3, #1
 8013470:	4a41      	ldr	r2, [pc, #260]	; (8013578 <_printf_float+0x30c>)
 8013472:	4631      	mov	r1, r6
 8013474:	4628      	mov	r0, r5
 8013476:	47b8      	blx	r7
 8013478:	3001      	adds	r0, #1
 801347a:	f43f af54 	beq.w	8013326 <_printf_float+0xba>
 801347e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8013482:	429a      	cmp	r2, r3
 8013484:	db02      	blt.n	801348c <_printf_float+0x220>
 8013486:	6823      	ldr	r3, [r4, #0]
 8013488:	07d8      	lsls	r0, r3, #31
 801348a:	d50f      	bpl.n	80134ac <_printf_float+0x240>
 801348c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8013490:	4631      	mov	r1, r6
 8013492:	4628      	mov	r0, r5
 8013494:	47b8      	blx	r7
 8013496:	3001      	adds	r0, #1
 8013498:	f43f af45 	beq.w	8013326 <_printf_float+0xba>
 801349c:	f04f 0800 	mov.w	r8, #0
 80134a0:	f104 091a 	add.w	r9, r4, #26
 80134a4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80134a6:	3b01      	subs	r3, #1
 80134a8:	4543      	cmp	r3, r8
 80134aa:	dc09      	bgt.n	80134c0 <_printf_float+0x254>
 80134ac:	6823      	ldr	r3, [r4, #0]
 80134ae:	079b      	lsls	r3, r3, #30
 80134b0:	f100 8103 	bmi.w	80136ba <_printf_float+0x44e>
 80134b4:	68e0      	ldr	r0, [r4, #12]
 80134b6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80134b8:	4298      	cmp	r0, r3
 80134ba:	bfb8      	it	lt
 80134bc:	4618      	movlt	r0, r3
 80134be:	e734      	b.n	801332a <_printf_float+0xbe>
 80134c0:	2301      	movs	r3, #1
 80134c2:	464a      	mov	r2, r9
 80134c4:	4631      	mov	r1, r6
 80134c6:	4628      	mov	r0, r5
 80134c8:	47b8      	blx	r7
 80134ca:	3001      	adds	r0, #1
 80134cc:	f43f af2b 	beq.w	8013326 <_printf_float+0xba>
 80134d0:	f108 0801 	add.w	r8, r8, #1
 80134d4:	e7e6      	b.n	80134a4 <_printf_float+0x238>
 80134d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80134d8:	2b00      	cmp	r3, #0
 80134da:	dc2b      	bgt.n	8013534 <_printf_float+0x2c8>
 80134dc:	2301      	movs	r3, #1
 80134de:	4a26      	ldr	r2, [pc, #152]	; (8013578 <_printf_float+0x30c>)
 80134e0:	4631      	mov	r1, r6
 80134e2:	4628      	mov	r0, r5
 80134e4:	47b8      	blx	r7
 80134e6:	3001      	adds	r0, #1
 80134e8:	f43f af1d 	beq.w	8013326 <_printf_float+0xba>
 80134ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80134ee:	b923      	cbnz	r3, 80134fa <_printf_float+0x28e>
 80134f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80134f2:	b913      	cbnz	r3, 80134fa <_printf_float+0x28e>
 80134f4:	6823      	ldr	r3, [r4, #0]
 80134f6:	07d9      	lsls	r1, r3, #31
 80134f8:	d5d8      	bpl.n	80134ac <_printf_float+0x240>
 80134fa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80134fe:	4631      	mov	r1, r6
 8013500:	4628      	mov	r0, r5
 8013502:	47b8      	blx	r7
 8013504:	3001      	adds	r0, #1
 8013506:	f43f af0e 	beq.w	8013326 <_printf_float+0xba>
 801350a:	f04f 0900 	mov.w	r9, #0
 801350e:	f104 0a1a 	add.w	sl, r4, #26
 8013512:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013514:	425b      	negs	r3, r3
 8013516:	454b      	cmp	r3, r9
 8013518:	dc01      	bgt.n	801351e <_printf_float+0x2b2>
 801351a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801351c:	e794      	b.n	8013448 <_printf_float+0x1dc>
 801351e:	2301      	movs	r3, #1
 8013520:	4652      	mov	r2, sl
 8013522:	4631      	mov	r1, r6
 8013524:	4628      	mov	r0, r5
 8013526:	47b8      	blx	r7
 8013528:	3001      	adds	r0, #1
 801352a:	f43f aefc 	beq.w	8013326 <_printf_float+0xba>
 801352e:	f109 0901 	add.w	r9, r9, #1
 8013532:	e7ee      	b.n	8013512 <_printf_float+0x2a6>
 8013534:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8013536:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8013538:	429a      	cmp	r2, r3
 801353a:	bfa8      	it	ge
 801353c:	461a      	movge	r2, r3
 801353e:	2a00      	cmp	r2, #0
 8013540:	4691      	mov	r9, r2
 8013542:	dd07      	ble.n	8013554 <_printf_float+0x2e8>
 8013544:	4613      	mov	r3, r2
 8013546:	4631      	mov	r1, r6
 8013548:	4642      	mov	r2, r8
 801354a:	4628      	mov	r0, r5
 801354c:	47b8      	blx	r7
 801354e:	3001      	adds	r0, #1
 8013550:	f43f aee9 	beq.w	8013326 <_printf_float+0xba>
 8013554:	f104 031a 	add.w	r3, r4, #26
 8013558:	f04f 0b00 	mov.w	fp, #0
 801355c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8013560:	9306      	str	r3, [sp, #24]
 8013562:	e015      	b.n	8013590 <_printf_float+0x324>
 8013564:	7fefffff 	.word	0x7fefffff
 8013568:	08017840 	.word	0x08017840
 801356c:	0801783c 	.word	0x0801783c
 8013570:	08017848 	.word	0x08017848
 8013574:	08017844 	.word	0x08017844
 8013578:	0801784c 	.word	0x0801784c
 801357c:	2301      	movs	r3, #1
 801357e:	9a06      	ldr	r2, [sp, #24]
 8013580:	4631      	mov	r1, r6
 8013582:	4628      	mov	r0, r5
 8013584:	47b8      	blx	r7
 8013586:	3001      	adds	r0, #1
 8013588:	f43f aecd 	beq.w	8013326 <_printf_float+0xba>
 801358c:	f10b 0b01 	add.w	fp, fp, #1
 8013590:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8013594:	ebaa 0309 	sub.w	r3, sl, r9
 8013598:	455b      	cmp	r3, fp
 801359a:	dcef      	bgt.n	801357c <_printf_float+0x310>
 801359c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80135a0:	429a      	cmp	r2, r3
 80135a2:	44d0      	add	r8, sl
 80135a4:	db15      	blt.n	80135d2 <_printf_float+0x366>
 80135a6:	6823      	ldr	r3, [r4, #0]
 80135a8:	07da      	lsls	r2, r3, #31
 80135aa:	d412      	bmi.n	80135d2 <_printf_float+0x366>
 80135ac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80135ae:	9909      	ldr	r1, [sp, #36]	; 0x24
 80135b0:	eba3 020a 	sub.w	r2, r3, sl
 80135b4:	eba3 0a01 	sub.w	sl, r3, r1
 80135b8:	4592      	cmp	sl, r2
 80135ba:	bfa8      	it	ge
 80135bc:	4692      	movge	sl, r2
 80135be:	f1ba 0f00 	cmp.w	sl, #0
 80135c2:	dc0e      	bgt.n	80135e2 <_printf_float+0x376>
 80135c4:	f04f 0800 	mov.w	r8, #0
 80135c8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80135cc:	f104 091a 	add.w	r9, r4, #26
 80135d0:	e019      	b.n	8013606 <_printf_float+0x39a>
 80135d2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80135d6:	4631      	mov	r1, r6
 80135d8:	4628      	mov	r0, r5
 80135da:	47b8      	blx	r7
 80135dc:	3001      	adds	r0, #1
 80135de:	d1e5      	bne.n	80135ac <_printf_float+0x340>
 80135e0:	e6a1      	b.n	8013326 <_printf_float+0xba>
 80135e2:	4653      	mov	r3, sl
 80135e4:	4642      	mov	r2, r8
 80135e6:	4631      	mov	r1, r6
 80135e8:	4628      	mov	r0, r5
 80135ea:	47b8      	blx	r7
 80135ec:	3001      	adds	r0, #1
 80135ee:	d1e9      	bne.n	80135c4 <_printf_float+0x358>
 80135f0:	e699      	b.n	8013326 <_printf_float+0xba>
 80135f2:	2301      	movs	r3, #1
 80135f4:	464a      	mov	r2, r9
 80135f6:	4631      	mov	r1, r6
 80135f8:	4628      	mov	r0, r5
 80135fa:	47b8      	blx	r7
 80135fc:	3001      	adds	r0, #1
 80135fe:	f43f ae92 	beq.w	8013326 <_printf_float+0xba>
 8013602:	f108 0801 	add.w	r8, r8, #1
 8013606:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801360a:	1a9b      	subs	r3, r3, r2
 801360c:	eba3 030a 	sub.w	r3, r3, sl
 8013610:	4543      	cmp	r3, r8
 8013612:	dcee      	bgt.n	80135f2 <_printf_float+0x386>
 8013614:	e74a      	b.n	80134ac <_printf_float+0x240>
 8013616:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8013618:	2a01      	cmp	r2, #1
 801361a:	dc01      	bgt.n	8013620 <_printf_float+0x3b4>
 801361c:	07db      	lsls	r3, r3, #31
 801361e:	d53a      	bpl.n	8013696 <_printf_float+0x42a>
 8013620:	2301      	movs	r3, #1
 8013622:	4642      	mov	r2, r8
 8013624:	4631      	mov	r1, r6
 8013626:	4628      	mov	r0, r5
 8013628:	47b8      	blx	r7
 801362a:	3001      	adds	r0, #1
 801362c:	f43f ae7b 	beq.w	8013326 <_printf_float+0xba>
 8013630:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8013634:	4631      	mov	r1, r6
 8013636:	4628      	mov	r0, r5
 8013638:	47b8      	blx	r7
 801363a:	3001      	adds	r0, #1
 801363c:	f108 0801 	add.w	r8, r8, #1
 8013640:	f43f ae71 	beq.w	8013326 <_printf_float+0xba>
 8013644:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013646:	2200      	movs	r2, #0
 8013648:	f103 3aff 	add.w	sl, r3, #4294967295
 801364c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8013650:	2300      	movs	r3, #0
 8013652:	f7ed fa11 	bl	8000a78 <__aeabi_dcmpeq>
 8013656:	b9c8      	cbnz	r0, 801368c <_printf_float+0x420>
 8013658:	4653      	mov	r3, sl
 801365a:	4642      	mov	r2, r8
 801365c:	4631      	mov	r1, r6
 801365e:	4628      	mov	r0, r5
 8013660:	47b8      	blx	r7
 8013662:	3001      	adds	r0, #1
 8013664:	d10e      	bne.n	8013684 <_printf_float+0x418>
 8013666:	e65e      	b.n	8013326 <_printf_float+0xba>
 8013668:	2301      	movs	r3, #1
 801366a:	4652      	mov	r2, sl
 801366c:	4631      	mov	r1, r6
 801366e:	4628      	mov	r0, r5
 8013670:	47b8      	blx	r7
 8013672:	3001      	adds	r0, #1
 8013674:	f43f ae57 	beq.w	8013326 <_printf_float+0xba>
 8013678:	f108 0801 	add.w	r8, r8, #1
 801367c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801367e:	3b01      	subs	r3, #1
 8013680:	4543      	cmp	r3, r8
 8013682:	dcf1      	bgt.n	8013668 <_printf_float+0x3fc>
 8013684:	464b      	mov	r3, r9
 8013686:	f104 0250 	add.w	r2, r4, #80	; 0x50
 801368a:	e6de      	b.n	801344a <_printf_float+0x1de>
 801368c:	f04f 0800 	mov.w	r8, #0
 8013690:	f104 0a1a 	add.w	sl, r4, #26
 8013694:	e7f2      	b.n	801367c <_printf_float+0x410>
 8013696:	2301      	movs	r3, #1
 8013698:	e7df      	b.n	801365a <_printf_float+0x3ee>
 801369a:	2301      	movs	r3, #1
 801369c:	464a      	mov	r2, r9
 801369e:	4631      	mov	r1, r6
 80136a0:	4628      	mov	r0, r5
 80136a2:	47b8      	blx	r7
 80136a4:	3001      	adds	r0, #1
 80136a6:	f43f ae3e 	beq.w	8013326 <_printf_float+0xba>
 80136aa:	f108 0801 	add.w	r8, r8, #1
 80136ae:	68e3      	ldr	r3, [r4, #12]
 80136b0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80136b2:	1a9b      	subs	r3, r3, r2
 80136b4:	4543      	cmp	r3, r8
 80136b6:	dcf0      	bgt.n	801369a <_printf_float+0x42e>
 80136b8:	e6fc      	b.n	80134b4 <_printf_float+0x248>
 80136ba:	f04f 0800 	mov.w	r8, #0
 80136be:	f104 0919 	add.w	r9, r4, #25
 80136c2:	e7f4      	b.n	80136ae <_printf_float+0x442>
 80136c4:	2900      	cmp	r1, #0
 80136c6:	f43f ae8b 	beq.w	80133e0 <_printf_float+0x174>
 80136ca:	2300      	movs	r3, #0
 80136cc:	e9cd 0302 	strd	r0, r3, [sp, #8]
 80136d0:	ab09      	add	r3, sp, #36	; 0x24
 80136d2:	9300      	str	r3, [sp, #0]
 80136d4:	ec49 8b10 	vmov	d0, r8, r9
 80136d8:	6022      	str	r2, [r4, #0]
 80136da:	f8cd a004 	str.w	sl, [sp, #4]
 80136de:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80136e2:	4628      	mov	r0, r5
 80136e4:	f7ff fd2e 	bl	8013144 <__cvt>
 80136e8:	4680      	mov	r8, r0
 80136ea:	e648      	b.n	801337e <_printf_float+0x112>

080136ec <_printf_common>:
 80136ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80136f0:	4691      	mov	r9, r2
 80136f2:	461f      	mov	r7, r3
 80136f4:	688a      	ldr	r2, [r1, #8]
 80136f6:	690b      	ldr	r3, [r1, #16]
 80136f8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80136fc:	4293      	cmp	r3, r2
 80136fe:	bfb8      	it	lt
 8013700:	4613      	movlt	r3, r2
 8013702:	f8c9 3000 	str.w	r3, [r9]
 8013706:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801370a:	4606      	mov	r6, r0
 801370c:	460c      	mov	r4, r1
 801370e:	b112      	cbz	r2, 8013716 <_printf_common+0x2a>
 8013710:	3301      	adds	r3, #1
 8013712:	f8c9 3000 	str.w	r3, [r9]
 8013716:	6823      	ldr	r3, [r4, #0]
 8013718:	0699      	lsls	r1, r3, #26
 801371a:	bf42      	ittt	mi
 801371c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8013720:	3302      	addmi	r3, #2
 8013722:	f8c9 3000 	strmi.w	r3, [r9]
 8013726:	6825      	ldr	r5, [r4, #0]
 8013728:	f015 0506 	ands.w	r5, r5, #6
 801372c:	d107      	bne.n	801373e <_printf_common+0x52>
 801372e:	f104 0a19 	add.w	sl, r4, #25
 8013732:	68e3      	ldr	r3, [r4, #12]
 8013734:	f8d9 2000 	ldr.w	r2, [r9]
 8013738:	1a9b      	subs	r3, r3, r2
 801373a:	42ab      	cmp	r3, r5
 801373c:	dc28      	bgt.n	8013790 <_printf_common+0xa4>
 801373e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8013742:	6822      	ldr	r2, [r4, #0]
 8013744:	3300      	adds	r3, #0
 8013746:	bf18      	it	ne
 8013748:	2301      	movne	r3, #1
 801374a:	0692      	lsls	r2, r2, #26
 801374c:	d42d      	bmi.n	80137aa <_printf_common+0xbe>
 801374e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8013752:	4639      	mov	r1, r7
 8013754:	4630      	mov	r0, r6
 8013756:	47c0      	blx	r8
 8013758:	3001      	adds	r0, #1
 801375a:	d020      	beq.n	801379e <_printf_common+0xb2>
 801375c:	6823      	ldr	r3, [r4, #0]
 801375e:	68e5      	ldr	r5, [r4, #12]
 8013760:	f8d9 2000 	ldr.w	r2, [r9]
 8013764:	f003 0306 	and.w	r3, r3, #6
 8013768:	2b04      	cmp	r3, #4
 801376a:	bf08      	it	eq
 801376c:	1aad      	subeq	r5, r5, r2
 801376e:	68a3      	ldr	r3, [r4, #8]
 8013770:	6922      	ldr	r2, [r4, #16]
 8013772:	bf0c      	ite	eq
 8013774:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8013778:	2500      	movne	r5, #0
 801377a:	4293      	cmp	r3, r2
 801377c:	bfc4      	itt	gt
 801377e:	1a9b      	subgt	r3, r3, r2
 8013780:	18ed      	addgt	r5, r5, r3
 8013782:	f04f 0900 	mov.w	r9, #0
 8013786:	341a      	adds	r4, #26
 8013788:	454d      	cmp	r5, r9
 801378a:	d11a      	bne.n	80137c2 <_printf_common+0xd6>
 801378c:	2000      	movs	r0, #0
 801378e:	e008      	b.n	80137a2 <_printf_common+0xb6>
 8013790:	2301      	movs	r3, #1
 8013792:	4652      	mov	r2, sl
 8013794:	4639      	mov	r1, r7
 8013796:	4630      	mov	r0, r6
 8013798:	47c0      	blx	r8
 801379a:	3001      	adds	r0, #1
 801379c:	d103      	bne.n	80137a6 <_printf_common+0xba>
 801379e:	f04f 30ff 	mov.w	r0, #4294967295
 80137a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80137a6:	3501      	adds	r5, #1
 80137a8:	e7c3      	b.n	8013732 <_printf_common+0x46>
 80137aa:	18e1      	adds	r1, r4, r3
 80137ac:	1c5a      	adds	r2, r3, #1
 80137ae:	2030      	movs	r0, #48	; 0x30
 80137b0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80137b4:	4422      	add	r2, r4
 80137b6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80137ba:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80137be:	3302      	adds	r3, #2
 80137c0:	e7c5      	b.n	801374e <_printf_common+0x62>
 80137c2:	2301      	movs	r3, #1
 80137c4:	4622      	mov	r2, r4
 80137c6:	4639      	mov	r1, r7
 80137c8:	4630      	mov	r0, r6
 80137ca:	47c0      	blx	r8
 80137cc:	3001      	adds	r0, #1
 80137ce:	d0e6      	beq.n	801379e <_printf_common+0xb2>
 80137d0:	f109 0901 	add.w	r9, r9, #1
 80137d4:	e7d8      	b.n	8013788 <_printf_common+0x9c>
	...

080137d8 <_printf_i>:
 80137d8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80137dc:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80137e0:	460c      	mov	r4, r1
 80137e2:	7e09      	ldrb	r1, [r1, #24]
 80137e4:	b085      	sub	sp, #20
 80137e6:	296e      	cmp	r1, #110	; 0x6e
 80137e8:	4617      	mov	r7, r2
 80137ea:	4606      	mov	r6, r0
 80137ec:	4698      	mov	r8, r3
 80137ee:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80137f0:	f000 80b3 	beq.w	801395a <_printf_i+0x182>
 80137f4:	d822      	bhi.n	801383c <_printf_i+0x64>
 80137f6:	2963      	cmp	r1, #99	; 0x63
 80137f8:	d036      	beq.n	8013868 <_printf_i+0x90>
 80137fa:	d80a      	bhi.n	8013812 <_printf_i+0x3a>
 80137fc:	2900      	cmp	r1, #0
 80137fe:	f000 80b9 	beq.w	8013974 <_printf_i+0x19c>
 8013802:	2958      	cmp	r1, #88	; 0x58
 8013804:	f000 8083 	beq.w	801390e <_printf_i+0x136>
 8013808:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801380c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8013810:	e032      	b.n	8013878 <_printf_i+0xa0>
 8013812:	2964      	cmp	r1, #100	; 0x64
 8013814:	d001      	beq.n	801381a <_printf_i+0x42>
 8013816:	2969      	cmp	r1, #105	; 0x69
 8013818:	d1f6      	bne.n	8013808 <_printf_i+0x30>
 801381a:	6820      	ldr	r0, [r4, #0]
 801381c:	6813      	ldr	r3, [r2, #0]
 801381e:	0605      	lsls	r5, r0, #24
 8013820:	f103 0104 	add.w	r1, r3, #4
 8013824:	d52a      	bpl.n	801387c <_printf_i+0xa4>
 8013826:	681b      	ldr	r3, [r3, #0]
 8013828:	6011      	str	r1, [r2, #0]
 801382a:	2b00      	cmp	r3, #0
 801382c:	da03      	bge.n	8013836 <_printf_i+0x5e>
 801382e:	222d      	movs	r2, #45	; 0x2d
 8013830:	425b      	negs	r3, r3
 8013832:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8013836:	486f      	ldr	r0, [pc, #444]	; (80139f4 <_printf_i+0x21c>)
 8013838:	220a      	movs	r2, #10
 801383a:	e039      	b.n	80138b0 <_printf_i+0xd8>
 801383c:	2973      	cmp	r1, #115	; 0x73
 801383e:	f000 809d 	beq.w	801397c <_printf_i+0x1a4>
 8013842:	d808      	bhi.n	8013856 <_printf_i+0x7e>
 8013844:	296f      	cmp	r1, #111	; 0x6f
 8013846:	d020      	beq.n	801388a <_printf_i+0xb2>
 8013848:	2970      	cmp	r1, #112	; 0x70
 801384a:	d1dd      	bne.n	8013808 <_printf_i+0x30>
 801384c:	6823      	ldr	r3, [r4, #0]
 801384e:	f043 0320 	orr.w	r3, r3, #32
 8013852:	6023      	str	r3, [r4, #0]
 8013854:	e003      	b.n	801385e <_printf_i+0x86>
 8013856:	2975      	cmp	r1, #117	; 0x75
 8013858:	d017      	beq.n	801388a <_printf_i+0xb2>
 801385a:	2978      	cmp	r1, #120	; 0x78
 801385c:	d1d4      	bne.n	8013808 <_printf_i+0x30>
 801385e:	2378      	movs	r3, #120	; 0x78
 8013860:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8013864:	4864      	ldr	r0, [pc, #400]	; (80139f8 <_printf_i+0x220>)
 8013866:	e055      	b.n	8013914 <_printf_i+0x13c>
 8013868:	6813      	ldr	r3, [r2, #0]
 801386a:	1d19      	adds	r1, r3, #4
 801386c:	681b      	ldr	r3, [r3, #0]
 801386e:	6011      	str	r1, [r2, #0]
 8013870:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8013874:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8013878:	2301      	movs	r3, #1
 801387a:	e08c      	b.n	8013996 <_printf_i+0x1be>
 801387c:	681b      	ldr	r3, [r3, #0]
 801387e:	6011      	str	r1, [r2, #0]
 8013880:	f010 0f40 	tst.w	r0, #64	; 0x40
 8013884:	bf18      	it	ne
 8013886:	b21b      	sxthne	r3, r3
 8013888:	e7cf      	b.n	801382a <_printf_i+0x52>
 801388a:	6813      	ldr	r3, [r2, #0]
 801388c:	6825      	ldr	r5, [r4, #0]
 801388e:	1d18      	adds	r0, r3, #4
 8013890:	6010      	str	r0, [r2, #0]
 8013892:	0628      	lsls	r0, r5, #24
 8013894:	d501      	bpl.n	801389a <_printf_i+0xc2>
 8013896:	681b      	ldr	r3, [r3, #0]
 8013898:	e002      	b.n	80138a0 <_printf_i+0xc8>
 801389a:	0668      	lsls	r0, r5, #25
 801389c:	d5fb      	bpl.n	8013896 <_printf_i+0xbe>
 801389e:	881b      	ldrh	r3, [r3, #0]
 80138a0:	4854      	ldr	r0, [pc, #336]	; (80139f4 <_printf_i+0x21c>)
 80138a2:	296f      	cmp	r1, #111	; 0x6f
 80138a4:	bf14      	ite	ne
 80138a6:	220a      	movne	r2, #10
 80138a8:	2208      	moveq	r2, #8
 80138aa:	2100      	movs	r1, #0
 80138ac:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80138b0:	6865      	ldr	r5, [r4, #4]
 80138b2:	60a5      	str	r5, [r4, #8]
 80138b4:	2d00      	cmp	r5, #0
 80138b6:	f2c0 8095 	blt.w	80139e4 <_printf_i+0x20c>
 80138ba:	6821      	ldr	r1, [r4, #0]
 80138bc:	f021 0104 	bic.w	r1, r1, #4
 80138c0:	6021      	str	r1, [r4, #0]
 80138c2:	2b00      	cmp	r3, #0
 80138c4:	d13d      	bne.n	8013942 <_printf_i+0x16a>
 80138c6:	2d00      	cmp	r5, #0
 80138c8:	f040 808e 	bne.w	80139e8 <_printf_i+0x210>
 80138cc:	4665      	mov	r5, ip
 80138ce:	2a08      	cmp	r2, #8
 80138d0:	d10b      	bne.n	80138ea <_printf_i+0x112>
 80138d2:	6823      	ldr	r3, [r4, #0]
 80138d4:	07db      	lsls	r3, r3, #31
 80138d6:	d508      	bpl.n	80138ea <_printf_i+0x112>
 80138d8:	6923      	ldr	r3, [r4, #16]
 80138da:	6862      	ldr	r2, [r4, #4]
 80138dc:	429a      	cmp	r2, r3
 80138de:	bfde      	ittt	le
 80138e0:	2330      	movle	r3, #48	; 0x30
 80138e2:	f805 3c01 	strble.w	r3, [r5, #-1]
 80138e6:	f105 35ff 	addle.w	r5, r5, #4294967295
 80138ea:	ebac 0305 	sub.w	r3, ip, r5
 80138ee:	6123      	str	r3, [r4, #16]
 80138f0:	f8cd 8000 	str.w	r8, [sp]
 80138f4:	463b      	mov	r3, r7
 80138f6:	aa03      	add	r2, sp, #12
 80138f8:	4621      	mov	r1, r4
 80138fa:	4630      	mov	r0, r6
 80138fc:	f7ff fef6 	bl	80136ec <_printf_common>
 8013900:	3001      	adds	r0, #1
 8013902:	d14d      	bne.n	80139a0 <_printf_i+0x1c8>
 8013904:	f04f 30ff 	mov.w	r0, #4294967295
 8013908:	b005      	add	sp, #20
 801390a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801390e:	4839      	ldr	r0, [pc, #228]	; (80139f4 <_printf_i+0x21c>)
 8013910:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8013914:	6813      	ldr	r3, [r2, #0]
 8013916:	6821      	ldr	r1, [r4, #0]
 8013918:	1d1d      	adds	r5, r3, #4
 801391a:	681b      	ldr	r3, [r3, #0]
 801391c:	6015      	str	r5, [r2, #0]
 801391e:	060a      	lsls	r2, r1, #24
 8013920:	d50b      	bpl.n	801393a <_printf_i+0x162>
 8013922:	07ca      	lsls	r2, r1, #31
 8013924:	bf44      	itt	mi
 8013926:	f041 0120 	orrmi.w	r1, r1, #32
 801392a:	6021      	strmi	r1, [r4, #0]
 801392c:	b91b      	cbnz	r3, 8013936 <_printf_i+0x15e>
 801392e:	6822      	ldr	r2, [r4, #0]
 8013930:	f022 0220 	bic.w	r2, r2, #32
 8013934:	6022      	str	r2, [r4, #0]
 8013936:	2210      	movs	r2, #16
 8013938:	e7b7      	b.n	80138aa <_printf_i+0xd2>
 801393a:	064d      	lsls	r5, r1, #25
 801393c:	bf48      	it	mi
 801393e:	b29b      	uxthmi	r3, r3
 8013940:	e7ef      	b.n	8013922 <_printf_i+0x14a>
 8013942:	4665      	mov	r5, ip
 8013944:	fbb3 f1f2 	udiv	r1, r3, r2
 8013948:	fb02 3311 	mls	r3, r2, r1, r3
 801394c:	5cc3      	ldrb	r3, [r0, r3]
 801394e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8013952:	460b      	mov	r3, r1
 8013954:	2900      	cmp	r1, #0
 8013956:	d1f5      	bne.n	8013944 <_printf_i+0x16c>
 8013958:	e7b9      	b.n	80138ce <_printf_i+0xf6>
 801395a:	6813      	ldr	r3, [r2, #0]
 801395c:	6825      	ldr	r5, [r4, #0]
 801395e:	6961      	ldr	r1, [r4, #20]
 8013960:	1d18      	adds	r0, r3, #4
 8013962:	6010      	str	r0, [r2, #0]
 8013964:	0628      	lsls	r0, r5, #24
 8013966:	681b      	ldr	r3, [r3, #0]
 8013968:	d501      	bpl.n	801396e <_printf_i+0x196>
 801396a:	6019      	str	r1, [r3, #0]
 801396c:	e002      	b.n	8013974 <_printf_i+0x19c>
 801396e:	066a      	lsls	r2, r5, #25
 8013970:	d5fb      	bpl.n	801396a <_printf_i+0x192>
 8013972:	8019      	strh	r1, [r3, #0]
 8013974:	2300      	movs	r3, #0
 8013976:	6123      	str	r3, [r4, #16]
 8013978:	4665      	mov	r5, ip
 801397a:	e7b9      	b.n	80138f0 <_printf_i+0x118>
 801397c:	6813      	ldr	r3, [r2, #0]
 801397e:	1d19      	adds	r1, r3, #4
 8013980:	6011      	str	r1, [r2, #0]
 8013982:	681d      	ldr	r5, [r3, #0]
 8013984:	6862      	ldr	r2, [r4, #4]
 8013986:	2100      	movs	r1, #0
 8013988:	4628      	mov	r0, r5
 801398a:	f7ec fc01 	bl	8000190 <memchr>
 801398e:	b108      	cbz	r0, 8013994 <_printf_i+0x1bc>
 8013990:	1b40      	subs	r0, r0, r5
 8013992:	6060      	str	r0, [r4, #4]
 8013994:	6863      	ldr	r3, [r4, #4]
 8013996:	6123      	str	r3, [r4, #16]
 8013998:	2300      	movs	r3, #0
 801399a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801399e:	e7a7      	b.n	80138f0 <_printf_i+0x118>
 80139a0:	6923      	ldr	r3, [r4, #16]
 80139a2:	462a      	mov	r2, r5
 80139a4:	4639      	mov	r1, r7
 80139a6:	4630      	mov	r0, r6
 80139a8:	47c0      	blx	r8
 80139aa:	3001      	adds	r0, #1
 80139ac:	d0aa      	beq.n	8013904 <_printf_i+0x12c>
 80139ae:	6823      	ldr	r3, [r4, #0]
 80139b0:	079b      	lsls	r3, r3, #30
 80139b2:	d413      	bmi.n	80139dc <_printf_i+0x204>
 80139b4:	68e0      	ldr	r0, [r4, #12]
 80139b6:	9b03      	ldr	r3, [sp, #12]
 80139b8:	4298      	cmp	r0, r3
 80139ba:	bfb8      	it	lt
 80139bc:	4618      	movlt	r0, r3
 80139be:	e7a3      	b.n	8013908 <_printf_i+0x130>
 80139c0:	2301      	movs	r3, #1
 80139c2:	464a      	mov	r2, r9
 80139c4:	4639      	mov	r1, r7
 80139c6:	4630      	mov	r0, r6
 80139c8:	47c0      	blx	r8
 80139ca:	3001      	adds	r0, #1
 80139cc:	d09a      	beq.n	8013904 <_printf_i+0x12c>
 80139ce:	3501      	adds	r5, #1
 80139d0:	68e3      	ldr	r3, [r4, #12]
 80139d2:	9a03      	ldr	r2, [sp, #12]
 80139d4:	1a9b      	subs	r3, r3, r2
 80139d6:	42ab      	cmp	r3, r5
 80139d8:	dcf2      	bgt.n	80139c0 <_printf_i+0x1e8>
 80139da:	e7eb      	b.n	80139b4 <_printf_i+0x1dc>
 80139dc:	2500      	movs	r5, #0
 80139de:	f104 0919 	add.w	r9, r4, #25
 80139e2:	e7f5      	b.n	80139d0 <_printf_i+0x1f8>
 80139e4:	2b00      	cmp	r3, #0
 80139e6:	d1ac      	bne.n	8013942 <_printf_i+0x16a>
 80139e8:	7803      	ldrb	r3, [r0, #0]
 80139ea:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80139ee:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80139f2:	e76c      	b.n	80138ce <_printf_i+0xf6>
 80139f4:	0801784e 	.word	0x0801784e
 80139f8:	0801785f 	.word	0x0801785f

080139fc <iprintf>:
 80139fc:	b40f      	push	{r0, r1, r2, r3}
 80139fe:	4b0a      	ldr	r3, [pc, #40]	; (8013a28 <iprintf+0x2c>)
 8013a00:	b513      	push	{r0, r1, r4, lr}
 8013a02:	681c      	ldr	r4, [r3, #0]
 8013a04:	b124      	cbz	r4, 8013a10 <iprintf+0x14>
 8013a06:	69a3      	ldr	r3, [r4, #24]
 8013a08:	b913      	cbnz	r3, 8013a10 <iprintf+0x14>
 8013a0a:	4620      	mov	r0, r4
 8013a0c:	f001 f8ac 	bl	8014b68 <__sinit>
 8013a10:	ab05      	add	r3, sp, #20
 8013a12:	9a04      	ldr	r2, [sp, #16]
 8013a14:	68a1      	ldr	r1, [r4, #8]
 8013a16:	9301      	str	r3, [sp, #4]
 8013a18:	4620      	mov	r0, r4
 8013a1a:	f001 fe09 	bl	8015630 <_vfiprintf_r>
 8013a1e:	b002      	add	sp, #8
 8013a20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013a24:	b004      	add	sp, #16
 8013a26:	4770      	bx	lr
 8013a28:	20000024 	.word	0x20000024

08013a2c <_puts_r>:
 8013a2c:	b570      	push	{r4, r5, r6, lr}
 8013a2e:	460e      	mov	r6, r1
 8013a30:	4605      	mov	r5, r0
 8013a32:	b118      	cbz	r0, 8013a3c <_puts_r+0x10>
 8013a34:	6983      	ldr	r3, [r0, #24]
 8013a36:	b90b      	cbnz	r3, 8013a3c <_puts_r+0x10>
 8013a38:	f001 f896 	bl	8014b68 <__sinit>
 8013a3c:	69ab      	ldr	r3, [r5, #24]
 8013a3e:	68ac      	ldr	r4, [r5, #8]
 8013a40:	b913      	cbnz	r3, 8013a48 <_puts_r+0x1c>
 8013a42:	4628      	mov	r0, r5
 8013a44:	f001 f890 	bl	8014b68 <__sinit>
 8013a48:	4b23      	ldr	r3, [pc, #140]	; (8013ad8 <_puts_r+0xac>)
 8013a4a:	429c      	cmp	r4, r3
 8013a4c:	d117      	bne.n	8013a7e <_puts_r+0x52>
 8013a4e:	686c      	ldr	r4, [r5, #4]
 8013a50:	89a3      	ldrh	r3, [r4, #12]
 8013a52:	071b      	lsls	r3, r3, #28
 8013a54:	d51d      	bpl.n	8013a92 <_puts_r+0x66>
 8013a56:	6923      	ldr	r3, [r4, #16]
 8013a58:	b1db      	cbz	r3, 8013a92 <_puts_r+0x66>
 8013a5a:	3e01      	subs	r6, #1
 8013a5c:	68a3      	ldr	r3, [r4, #8]
 8013a5e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8013a62:	3b01      	subs	r3, #1
 8013a64:	60a3      	str	r3, [r4, #8]
 8013a66:	b9e9      	cbnz	r1, 8013aa4 <_puts_r+0x78>
 8013a68:	2b00      	cmp	r3, #0
 8013a6a:	da2e      	bge.n	8013aca <_puts_r+0x9e>
 8013a6c:	4622      	mov	r2, r4
 8013a6e:	210a      	movs	r1, #10
 8013a70:	4628      	mov	r0, r5
 8013a72:	f000 f885 	bl	8013b80 <__swbuf_r>
 8013a76:	3001      	adds	r0, #1
 8013a78:	d011      	beq.n	8013a9e <_puts_r+0x72>
 8013a7a:	200a      	movs	r0, #10
 8013a7c:	e011      	b.n	8013aa2 <_puts_r+0x76>
 8013a7e:	4b17      	ldr	r3, [pc, #92]	; (8013adc <_puts_r+0xb0>)
 8013a80:	429c      	cmp	r4, r3
 8013a82:	d101      	bne.n	8013a88 <_puts_r+0x5c>
 8013a84:	68ac      	ldr	r4, [r5, #8]
 8013a86:	e7e3      	b.n	8013a50 <_puts_r+0x24>
 8013a88:	4b15      	ldr	r3, [pc, #84]	; (8013ae0 <_puts_r+0xb4>)
 8013a8a:	429c      	cmp	r4, r3
 8013a8c:	bf08      	it	eq
 8013a8e:	68ec      	ldreq	r4, [r5, #12]
 8013a90:	e7de      	b.n	8013a50 <_puts_r+0x24>
 8013a92:	4621      	mov	r1, r4
 8013a94:	4628      	mov	r0, r5
 8013a96:	f000 f8c5 	bl	8013c24 <__swsetup_r>
 8013a9a:	2800      	cmp	r0, #0
 8013a9c:	d0dd      	beq.n	8013a5a <_puts_r+0x2e>
 8013a9e:	f04f 30ff 	mov.w	r0, #4294967295
 8013aa2:	bd70      	pop	{r4, r5, r6, pc}
 8013aa4:	2b00      	cmp	r3, #0
 8013aa6:	da04      	bge.n	8013ab2 <_puts_r+0x86>
 8013aa8:	69a2      	ldr	r2, [r4, #24]
 8013aaa:	429a      	cmp	r2, r3
 8013aac:	dc06      	bgt.n	8013abc <_puts_r+0x90>
 8013aae:	290a      	cmp	r1, #10
 8013ab0:	d004      	beq.n	8013abc <_puts_r+0x90>
 8013ab2:	6823      	ldr	r3, [r4, #0]
 8013ab4:	1c5a      	adds	r2, r3, #1
 8013ab6:	6022      	str	r2, [r4, #0]
 8013ab8:	7019      	strb	r1, [r3, #0]
 8013aba:	e7cf      	b.n	8013a5c <_puts_r+0x30>
 8013abc:	4622      	mov	r2, r4
 8013abe:	4628      	mov	r0, r5
 8013ac0:	f000 f85e 	bl	8013b80 <__swbuf_r>
 8013ac4:	3001      	adds	r0, #1
 8013ac6:	d1c9      	bne.n	8013a5c <_puts_r+0x30>
 8013ac8:	e7e9      	b.n	8013a9e <_puts_r+0x72>
 8013aca:	6823      	ldr	r3, [r4, #0]
 8013acc:	200a      	movs	r0, #10
 8013ace:	1c5a      	adds	r2, r3, #1
 8013ad0:	6022      	str	r2, [r4, #0]
 8013ad2:	7018      	strb	r0, [r3, #0]
 8013ad4:	e7e5      	b.n	8013aa2 <_puts_r+0x76>
 8013ad6:	bf00      	nop
 8013ad8:	080178a0 	.word	0x080178a0
 8013adc:	080178c0 	.word	0x080178c0
 8013ae0:	08017880 	.word	0x08017880

08013ae4 <puts>:
 8013ae4:	4b02      	ldr	r3, [pc, #8]	; (8013af0 <puts+0xc>)
 8013ae6:	4601      	mov	r1, r0
 8013ae8:	6818      	ldr	r0, [r3, #0]
 8013aea:	f7ff bf9f 	b.w	8013a2c <_puts_r>
 8013aee:	bf00      	nop
 8013af0:	20000024 	.word	0x20000024

08013af4 <_sbrk_r>:
 8013af4:	b538      	push	{r3, r4, r5, lr}
 8013af6:	4c06      	ldr	r4, [pc, #24]	; (8013b10 <_sbrk_r+0x1c>)
 8013af8:	2300      	movs	r3, #0
 8013afa:	4605      	mov	r5, r0
 8013afc:	4608      	mov	r0, r1
 8013afe:	6023      	str	r3, [r4, #0]
 8013b00:	f7f2 f9c6 	bl	8005e90 <_sbrk>
 8013b04:	1c43      	adds	r3, r0, #1
 8013b06:	d102      	bne.n	8013b0e <_sbrk_r+0x1a>
 8013b08:	6823      	ldr	r3, [r4, #0]
 8013b0a:	b103      	cbz	r3, 8013b0e <_sbrk_r+0x1a>
 8013b0c:	602b      	str	r3, [r5, #0]
 8013b0e:	bd38      	pop	{r3, r4, r5, pc}
 8013b10:	200054c8 	.word	0x200054c8

08013b14 <siprintf>:
 8013b14:	b40e      	push	{r1, r2, r3}
 8013b16:	b500      	push	{lr}
 8013b18:	b09c      	sub	sp, #112	; 0x70
 8013b1a:	ab1d      	add	r3, sp, #116	; 0x74
 8013b1c:	9002      	str	r0, [sp, #8]
 8013b1e:	9006      	str	r0, [sp, #24]
 8013b20:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8013b24:	4809      	ldr	r0, [pc, #36]	; (8013b4c <siprintf+0x38>)
 8013b26:	9107      	str	r1, [sp, #28]
 8013b28:	9104      	str	r1, [sp, #16]
 8013b2a:	4909      	ldr	r1, [pc, #36]	; (8013b50 <siprintf+0x3c>)
 8013b2c:	f853 2b04 	ldr.w	r2, [r3], #4
 8013b30:	9105      	str	r1, [sp, #20]
 8013b32:	6800      	ldr	r0, [r0, #0]
 8013b34:	9301      	str	r3, [sp, #4]
 8013b36:	a902      	add	r1, sp, #8
 8013b38:	f001 fc58 	bl	80153ec <_svfiprintf_r>
 8013b3c:	9b02      	ldr	r3, [sp, #8]
 8013b3e:	2200      	movs	r2, #0
 8013b40:	701a      	strb	r2, [r3, #0]
 8013b42:	b01c      	add	sp, #112	; 0x70
 8013b44:	f85d eb04 	ldr.w	lr, [sp], #4
 8013b48:	b003      	add	sp, #12
 8013b4a:	4770      	bx	lr
 8013b4c:	20000024 	.word	0x20000024
 8013b50:	ffff0208 	.word	0xffff0208

08013b54 <strncpy>:
 8013b54:	b570      	push	{r4, r5, r6, lr}
 8013b56:	3901      	subs	r1, #1
 8013b58:	4604      	mov	r4, r0
 8013b5a:	b902      	cbnz	r2, 8013b5e <strncpy+0xa>
 8013b5c:	bd70      	pop	{r4, r5, r6, pc}
 8013b5e:	4623      	mov	r3, r4
 8013b60:	f811 5f01 	ldrb.w	r5, [r1, #1]!
 8013b64:	f803 5b01 	strb.w	r5, [r3], #1
 8013b68:	1e56      	subs	r6, r2, #1
 8013b6a:	b92d      	cbnz	r5, 8013b78 <strncpy+0x24>
 8013b6c:	4414      	add	r4, r2
 8013b6e:	42a3      	cmp	r3, r4
 8013b70:	d0f4      	beq.n	8013b5c <strncpy+0x8>
 8013b72:	f803 5b01 	strb.w	r5, [r3], #1
 8013b76:	e7fa      	b.n	8013b6e <strncpy+0x1a>
 8013b78:	461c      	mov	r4, r3
 8013b7a:	4632      	mov	r2, r6
 8013b7c:	e7ed      	b.n	8013b5a <strncpy+0x6>
	...

08013b80 <__swbuf_r>:
 8013b80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013b82:	460e      	mov	r6, r1
 8013b84:	4614      	mov	r4, r2
 8013b86:	4605      	mov	r5, r0
 8013b88:	b118      	cbz	r0, 8013b92 <__swbuf_r+0x12>
 8013b8a:	6983      	ldr	r3, [r0, #24]
 8013b8c:	b90b      	cbnz	r3, 8013b92 <__swbuf_r+0x12>
 8013b8e:	f000 ffeb 	bl	8014b68 <__sinit>
 8013b92:	4b21      	ldr	r3, [pc, #132]	; (8013c18 <__swbuf_r+0x98>)
 8013b94:	429c      	cmp	r4, r3
 8013b96:	d12a      	bne.n	8013bee <__swbuf_r+0x6e>
 8013b98:	686c      	ldr	r4, [r5, #4]
 8013b9a:	69a3      	ldr	r3, [r4, #24]
 8013b9c:	60a3      	str	r3, [r4, #8]
 8013b9e:	89a3      	ldrh	r3, [r4, #12]
 8013ba0:	071a      	lsls	r2, r3, #28
 8013ba2:	d52e      	bpl.n	8013c02 <__swbuf_r+0x82>
 8013ba4:	6923      	ldr	r3, [r4, #16]
 8013ba6:	b363      	cbz	r3, 8013c02 <__swbuf_r+0x82>
 8013ba8:	6923      	ldr	r3, [r4, #16]
 8013baa:	6820      	ldr	r0, [r4, #0]
 8013bac:	1ac0      	subs	r0, r0, r3
 8013bae:	6963      	ldr	r3, [r4, #20]
 8013bb0:	b2f6      	uxtb	r6, r6
 8013bb2:	4283      	cmp	r3, r0
 8013bb4:	4637      	mov	r7, r6
 8013bb6:	dc04      	bgt.n	8013bc2 <__swbuf_r+0x42>
 8013bb8:	4621      	mov	r1, r4
 8013bba:	4628      	mov	r0, r5
 8013bbc:	f000 ff6a 	bl	8014a94 <_fflush_r>
 8013bc0:	bb28      	cbnz	r0, 8013c0e <__swbuf_r+0x8e>
 8013bc2:	68a3      	ldr	r3, [r4, #8]
 8013bc4:	3b01      	subs	r3, #1
 8013bc6:	60a3      	str	r3, [r4, #8]
 8013bc8:	6823      	ldr	r3, [r4, #0]
 8013bca:	1c5a      	adds	r2, r3, #1
 8013bcc:	6022      	str	r2, [r4, #0]
 8013bce:	701e      	strb	r6, [r3, #0]
 8013bd0:	6963      	ldr	r3, [r4, #20]
 8013bd2:	3001      	adds	r0, #1
 8013bd4:	4283      	cmp	r3, r0
 8013bd6:	d004      	beq.n	8013be2 <__swbuf_r+0x62>
 8013bd8:	89a3      	ldrh	r3, [r4, #12]
 8013bda:	07db      	lsls	r3, r3, #31
 8013bdc:	d519      	bpl.n	8013c12 <__swbuf_r+0x92>
 8013bde:	2e0a      	cmp	r6, #10
 8013be0:	d117      	bne.n	8013c12 <__swbuf_r+0x92>
 8013be2:	4621      	mov	r1, r4
 8013be4:	4628      	mov	r0, r5
 8013be6:	f000 ff55 	bl	8014a94 <_fflush_r>
 8013bea:	b190      	cbz	r0, 8013c12 <__swbuf_r+0x92>
 8013bec:	e00f      	b.n	8013c0e <__swbuf_r+0x8e>
 8013bee:	4b0b      	ldr	r3, [pc, #44]	; (8013c1c <__swbuf_r+0x9c>)
 8013bf0:	429c      	cmp	r4, r3
 8013bf2:	d101      	bne.n	8013bf8 <__swbuf_r+0x78>
 8013bf4:	68ac      	ldr	r4, [r5, #8]
 8013bf6:	e7d0      	b.n	8013b9a <__swbuf_r+0x1a>
 8013bf8:	4b09      	ldr	r3, [pc, #36]	; (8013c20 <__swbuf_r+0xa0>)
 8013bfa:	429c      	cmp	r4, r3
 8013bfc:	bf08      	it	eq
 8013bfe:	68ec      	ldreq	r4, [r5, #12]
 8013c00:	e7cb      	b.n	8013b9a <__swbuf_r+0x1a>
 8013c02:	4621      	mov	r1, r4
 8013c04:	4628      	mov	r0, r5
 8013c06:	f000 f80d 	bl	8013c24 <__swsetup_r>
 8013c0a:	2800      	cmp	r0, #0
 8013c0c:	d0cc      	beq.n	8013ba8 <__swbuf_r+0x28>
 8013c0e:	f04f 37ff 	mov.w	r7, #4294967295
 8013c12:	4638      	mov	r0, r7
 8013c14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013c16:	bf00      	nop
 8013c18:	080178a0 	.word	0x080178a0
 8013c1c:	080178c0 	.word	0x080178c0
 8013c20:	08017880 	.word	0x08017880

08013c24 <__swsetup_r>:
 8013c24:	4b32      	ldr	r3, [pc, #200]	; (8013cf0 <__swsetup_r+0xcc>)
 8013c26:	b570      	push	{r4, r5, r6, lr}
 8013c28:	681d      	ldr	r5, [r3, #0]
 8013c2a:	4606      	mov	r6, r0
 8013c2c:	460c      	mov	r4, r1
 8013c2e:	b125      	cbz	r5, 8013c3a <__swsetup_r+0x16>
 8013c30:	69ab      	ldr	r3, [r5, #24]
 8013c32:	b913      	cbnz	r3, 8013c3a <__swsetup_r+0x16>
 8013c34:	4628      	mov	r0, r5
 8013c36:	f000 ff97 	bl	8014b68 <__sinit>
 8013c3a:	4b2e      	ldr	r3, [pc, #184]	; (8013cf4 <__swsetup_r+0xd0>)
 8013c3c:	429c      	cmp	r4, r3
 8013c3e:	d10f      	bne.n	8013c60 <__swsetup_r+0x3c>
 8013c40:	686c      	ldr	r4, [r5, #4]
 8013c42:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013c46:	b29a      	uxth	r2, r3
 8013c48:	0715      	lsls	r5, r2, #28
 8013c4a:	d42c      	bmi.n	8013ca6 <__swsetup_r+0x82>
 8013c4c:	06d0      	lsls	r0, r2, #27
 8013c4e:	d411      	bmi.n	8013c74 <__swsetup_r+0x50>
 8013c50:	2209      	movs	r2, #9
 8013c52:	6032      	str	r2, [r6, #0]
 8013c54:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013c58:	81a3      	strh	r3, [r4, #12]
 8013c5a:	f04f 30ff 	mov.w	r0, #4294967295
 8013c5e:	e03e      	b.n	8013cde <__swsetup_r+0xba>
 8013c60:	4b25      	ldr	r3, [pc, #148]	; (8013cf8 <__swsetup_r+0xd4>)
 8013c62:	429c      	cmp	r4, r3
 8013c64:	d101      	bne.n	8013c6a <__swsetup_r+0x46>
 8013c66:	68ac      	ldr	r4, [r5, #8]
 8013c68:	e7eb      	b.n	8013c42 <__swsetup_r+0x1e>
 8013c6a:	4b24      	ldr	r3, [pc, #144]	; (8013cfc <__swsetup_r+0xd8>)
 8013c6c:	429c      	cmp	r4, r3
 8013c6e:	bf08      	it	eq
 8013c70:	68ec      	ldreq	r4, [r5, #12]
 8013c72:	e7e6      	b.n	8013c42 <__swsetup_r+0x1e>
 8013c74:	0751      	lsls	r1, r2, #29
 8013c76:	d512      	bpl.n	8013c9e <__swsetup_r+0x7a>
 8013c78:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8013c7a:	b141      	cbz	r1, 8013c8e <__swsetup_r+0x6a>
 8013c7c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8013c80:	4299      	cmp	r1, r3
 8013c82:	d002      	beq.n	8013c8a <__swsetup_r+0x66>
 8013c84:	4630      	mov	r0, r6
 8013c86:	f7ff f9b5 	bl	8012ff4 <_free_r>
 8013c8a:	2300      	movs	r3, #0
 8013c8c:	6363      	str	r3, [r4, #52]	; 0x34
 8013c8e:	89a3      	ldrh	r3, [r4, #12]
 8013c90:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8013c94:	81a3      	strh	r3, [r4, #12]
 8013c96:	2300      	movs	r3, #0
 8013c98:	6063      	str	r3, [r4, #4]
 8013c9a:	6923      	ldr	r3, [r4, #16]
 8013c9c:	6023      	str	r3, [r4, #0]
 8013c9e:	89a3      	ldrh	r3, [r4, #12]
 8013ca0:	f043 0308 	orr.w	r3, r3, #8
 8013ca4:	81a3      	strh	r3, [r4, #12]
 8013ca6:	6923      	ldr	r3, [r4, #16]
 8013ca8:	b94b      	cbnz	r3, 8013cbe <__swsetup_r+0x9a>
 8013caa:	89a3      	ldrh	r3, [r4, #12]
 8013cac:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8013cb0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8013cb4:	d003      	beq.n	8013cbe <__swsetup_r+0x9a>
 8013cb6:	4621      	mov	r1, r4
 8013cb8:	4630      	mov	r0, r6
 8013cba:	f001 f811 	bl	8014ce0 <__smakebuf_r>
 8013cbe:	89a2      	ldrh	r2, [r4, #12]
 8013cc0:	f012 0301 	ands.w	r3, r2, #1
 8013cc4:	d00c      	beq.n	8013ce0 <__swsetup_r+0xbc>
 8013cc6:	2300      	movs	r3, #0
 8013cc8:	60a3      	str	r3, [r4, #8]
 8013cca:	6963      	ldr	r3, [r4, #20]
 8013ccc:	425b      	negs	r3, r3
 8013cce:	61a3      	str	r3, [r4, #24]
 8013cd0:	6923      	ldr	r3, [r4, #16]
 8013cd2:	b953      	cbnz	r3, 8013cea <__swsetup_r+0xc6>
 8013cd4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013cd8:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8013cdc:	d1ba      	bne.n	8013c54 <__swsetup_r+0x30>
 8013cde:	bd70      	pop	{r4, r5, r6, pc}
 8013ce0:	0792      	lsls	r2, r2, #30
 8013ce2:	bf58      	it	pl
 8013ce4:	6963      	ldrpl	r3, [r4, #20]
 8013ce6:	60a3      	str	r3, [r4, #8]
 8013ce8:	e7f2      	b.n	8013cd0 <__swsetup_r+0xac>
 8013cea:	2000      	movs	r0, #0
 8013cec:	e7f7      	b.n	8013cde <__swsetup_r+0xba>
 8013cee:	bf00      	nop
 8013cf0:	20000024 	.word	0x20000024
 8013cf4:	080178a0 	.word	0x080178a0
 8013cf8:	080178c0 	.word	0x080178c0
 8013cfc:	08017880 	.word	0x08017880

08013d00 <quorem>:
 8013d00:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013d04:	6903      	ldr	r3, [r0, #16]
 8013d06:	690c      	ldr	r4, [r1, #16]
 8013d08:	42a3      	cmp	r3, r4
 8013d0a:	4680      	mov	r8, r0
 8013d0c:	f2c0 8082 	blt.w	8013e14 <quorem+0x114>
 8013d10:	3c01      	subs	r4, #1
 8013d12:	f101 0714 	add.w	r7, r1, #20
 8013d16:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8013d1a:	f100 0614 	add.w	r6, r0, #20
 8013d1e:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8013d22:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8013d26:	eb06 030c 	add.w	r3, r6, ip
 8013d2a:	3501      	adds	r5, #1
 8013d2c:	eb07 090c 	add.w	r9, r7, ip
 8013d30:	9301      	str	r3, [sp, #4]
 8013d32:	fbb0 f5f5 	udiv	r5, r0, r5
 8013d36:	b395      	cbz	r5, 8013d9e <quorem+0x9e>
 8013d38:	f04f 0a00 	mov.w	sl, #0
 8013d3c:	4638      	mov	r0, r7
 8013d3e:	46b6      	mov	lr, r6
 8013d40:	46d3      	mov	fp, sl
 8013d42:	f850 2b04 	ldr.w	r2, [r0], #4
 8013d46:	b293      	uxth	r3, r2
 8013d48:	fb05 a303 	mla	r3, r5, r3, sl
 8013d4c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8013d50:	b29b      	uxth	r3, r3
 8013d52:	ebab 0303 	sub.w	r3, fp, r3
 8013d56:	0c12      	lsrs	r2, r2, #16
 8013d58:	f8de b000 	ldr.w	fp, [lr]
 8013d5c:	fb05 a202 	mla	r2, r5, r2, sl
 8013d60:	fa13 f38b 	uxtah	r3, r3, fp
 8013d64:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8013d68:	fa1f fb82 	uxth.w	fp, r2
 8013d6c:	f8de 2000 	ldr.w	r2, [lr]
 8013d70:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8013d74:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8013d78:	b29b      	uxth	r3, r3
 8013d7a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8013d7e:	4581      	cmp	r9, r0
 8013d80:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8013d84:	f84e 3b04 	str.w	r3, [lr], #4
 8013d88:	d2db      	bcs.n	8013d42 <quorem+0x42>
 8013d8a:	f856 300c 	ldr.w	r3, [r6, ip]
 8013d8e:	b933      	cbnz	r3, 8013d9e <quorem+0x9e>
 8013d90:	9b01      	ldr	r3, [sp, #4]
 8013d92:	3b04      	subs	r3, #4
 8013d94:	429e      	cmp	r6, r3
 8013d96:	461a      	mov	r2, r3
 8013d98:	d330      	bcc.n	8013dfc <quorem+0xfc>
 8013d9a:	f8c8 4010 	str.w	r4, [r8, #16]
 8013d9e:	4640      	mov	r0, r8
 8013da0:	f001 f9f6 	bl	8015190 <__mcmp>
 8013da4:	2800      	cmp	r0, #0
 8013da6:	db25      	blt.n	8013df4 <quorem+0xf4>
 8013da8:	3501      	adds	r5, #1
 8013daa:	4630      	mov	r0, r6
 8013dac:	f04f 0c00 	mov.w	ip, #0
 8013db0:	f857 2b04 	ldr.w	r2, [r7], #4
 8013db4:	f8d0 e000 	ldr.w	lr, [r0]
 8013db8:	b293      	uxth	r3, r2
 8013dba:	ebac 0303 	sub.w	r3, ip, r3
 8013dbe:	0c12      	lsrs	r2, r2, #16
 8013dc0:	fa13 f38e 	uxtah	r3, r3, lr
 8013dc4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8013dc8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8013dcc:	b29b      	uxth	r3, r3
 8013dce:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8013dd2:	45b9      	cmp	r9, r7
 8013dd4:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8013dd8:	f840 3b04 	str.w	r3, [r0], #4
 8013ddc:	d2e8      	bcs.n	8013db0 <quorem+0xb0>
 8013dde:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8013de2:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8013de6:	b92a      	cbnz	r2, 8013df4 <quorem+0xf4>
 8013de8:	3b04      	subs	r3, #4
 8013dea:	429e      	cmp	r6, r3
 8013dec:	461a      	mov	r2, r3
 8013dee:	d30b      	bcc.n	8013e08 <quorem+0x108>
 8013df0:	f8c8 4010 	str.w	r4, [r8, #16]
 8013df4:	4628      	mov	r0, r5
 8013df6:	b003      	add	sp, #12
 8013df8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013dfc:	6812      	ldr	r2, [r2, #0]
 8013dfe:	3b04      	subs	r3, #4
 8013e00:	2a00      	cmp	r2, #0
 8013e02:	d1ca      	bne.n	8013d9a <quorem+0x9a>
 8013e04:	3c01      	subs	r4, #1
 8013e06:	e7c5      	b.n	8013d94 <quorem+0x94>
 8013e08:	6812      	ldr	r2, [r2, #0]
 8013e0a:	3b04      	subs	r3, #4
 8013e0c:	2a00      	cmp	r2, #0
 8013e0e:	d1ef      	bne.n	8013df0 <quorem+0xf0>
 8013e10:	3c01      	subs	r4, #1
 8013e12:	e7ea      	b.n	8013dea <quorem+0xea>
 8013e14:	2000      	movs	r0, #0
 8013e16:	e7ee      	b.n	8013df6 <quorem+0xf6>

08013e18 <_dtoa_r>:
 8013e18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013e1c:	ec57 6b10 	vmov	r6, r7, d0
 8013e20:	b097      	sub	sp, #92	; 0x5c
 8013e22:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8013e24:	9106      	str	r1, [sp, #24]
 8013e26:	4604      	mov	r4, r0
 8013e28:	920b      	str	r2, [sp, #44]	; 0x2c
 8013e2a:	9312      	str	r3, [sp, #72]	; 0x48
 8013e2c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8013e30:	e9cd 6700 	strd	r6, r7, [sp]
 8013e34:	b93d      	cbnz	r5, 8013e46 <_dtoa_r+0x2e>
 8013e36:	2010      	movs	r0, #16
 8013e38:	f7ff f8c0 	bl	8012fbc <malloc>
 8013e3c:	6260      	str	r0, [r4, #36]	; 0x24
 8013e3e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8013e42:	6005      	str	r5, [r0, #0]
 8013e44:	60c5      	str	r5, [r0, #12]
 8013e46:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8013e48:	6819      	ldr	r1, [r3, #0]
 8013e4a:	b151      	cbz	r1, 8013e62 <_dtoa_r+0x4a>
 8013e4c:	685a      	ldr	r2, [r3, #4]
 8013e4e:	604a      	str	r2, [r1, #4]
 8013e50:	2301      	movs	r3, #1
 8013e52:	4093      	lsls	r3, r2
 8013e54:	608b      	str	r3, [r1, #8]
 8013e56:	4620      	mov	r0, r4
 8013e58:	f000 ffb8 	bl	8014dcc <_Bfree>
 8013e5c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8013e5e:	2200      	movs	r2, #0
 8013e60:	601a      	str	r2, [r3, #0]
 8013e62:	1e3b      	subs	r3, r7, #0
 8013e64:	bfbb      	ittet	lt
 8013e66:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8013e6a:	9301      	strlt	r3, [sp, #4]
 8013e6c:	2300      	movge	r3, #0
 8013e6e:	2201      	movlt	r2, #1
 8013e70:	bfac      	ite	ge
 8013e72:	f8c8 3000 	strge.w	r3, [r8]
 8013e76:	f8c8 2000 	strlt.w	r2, [r8]
 8013e7a:	4baf      	ldr	r3, [pc, #700]	; (8014138 <_dtoa_r+0x320>)
 8013e7c:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8013e80:	ea33 0308 	bics.w	r3, r3, r8
 8013e84:	d114      	bne.n	8013eb0 <_dtoa_r+0x98>
 8013e86:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8013e88:	f242 730f 	movw	r3, #9999	; 0x270f
 8013e8c:	6013      	str	r3, [r2, #0]
 8013e8e:	9b00      	ldr	r3, [sp, #0]
 8013e90:	b923      	cbnz	r3, 8013e9c <_dtoa_r+0x84>
 8013e92:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8013e96:	2800      	cmp	r0, #0
 8013e98:	f000 8542 	beq.w	8014920 <_dtoa_r+0xb08>
 8013e9c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8013e9e:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 801414c <_dtoa_r+0x334>
 8013ea2:	2b00      	cmp	r3, #0
 8013ea4:	f000 8544 	beq.w	8014930 <_dtoa_r+0xb18>
 8013ea8:	f10b 0303 	add.w	r3, fp, #3
 8013eac:	f000 bd3e 	b.w	801492c <_dtoa_r+0xb14>
 8013eb0:	e9dd 6700 	ldrd	r6, r7, [sp]
 8013eb4:	2200      	movs	r2, #0
 8013eb6:	2300      	movs	r3, #0
 8013eb8:	4630      	mov	r0, r6
 8013eba:	4639      	mov	r1, r7
 8013ebc:	f7ec fddc 	bl	8000a78 <__aeabi_dcmpeq>
 8013ec0:	4681      	mov	r9, r0
 8013ec2:	b168      	cbz	r0, 8013ee0 <_dtoa_r+0xc8>
 8013ec4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8013ec6:	2301      	movs	r3, #1
 8013ec8:	6013      	str	r3, [r2, #0]
 8013eca:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8013ecc:	2b00      	cmp	r3, #0
 8013ece:	f000 8524 	beq.w	801491a <_dtoa_r+0xb02>
 8013ed2:	4b9a      	ldr	r3, [pc, #616]	; (801413c <_dtoa_r+0x324>)
 8013ed4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8013ed6:	f103 3bff 	add.w	fp, r3, #4294967295
 8013eda:	6013      	str	r3, [r2, #0]
 8013edc:	f000 bd28 	b.w	8014930 <_dtoa_r+0xb18>
 8013ee0:	aa14      	add	r2, sp, #80	; 0x50
 8013ee2:	a915      	add	r1, sp, #84	; 0x54
 8013ee4:	ec47 6b10 	vmov	d0, r6, r7
 8013ee8:	4620      	mov	r0, r4
 8013eea:	f001 f9c8 	bl	801527e <__d2b>
 8013eee:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8013ef2:	9004      	str	r0, [sp, #16]
 8013ef4:	2d00      	cmp	r5, #0
 8013ef6:	d07c      	beq.n	8013ff2 <_dtoa_r+0x1da>
 8013ef8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8013efc:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8013f00:	46b2      	mov	sl, r6
 8013f02:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 8013f06:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8013f0a:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 8013f0e:	2200      	movs	r2, #0
 8013f10:	4b8b      	ldr	r3, [pc, #556]	; (8014140 <_dtoa_r+0x328>)
 8013f12:	4650      	mov	r0, sl
 8013f14:	4659      	mov	r1, fp
 8013f16:	f7ec f98f 	bl	8000238 <__aeabi_dsub>
 8013f1a:	a381      	add	r3, pc, #516	; (adr r3, 8014120 <_dtoa_r+0x308>)
 8013f1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013f20:	f7ec fb42 	bl	80005a8 <__aeabi_dmul>
 8013f24:	a380      	add	r3, pc, #512	; (adr r3, 8014128 <_dtoa_r+0x310>)
 8013f26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013f2a:	f7ec f987 	bl	800023c <__adddf3>
 8013f2e:	4606      	mov	r6, r0
 8013f30:	4628      	mov	r0, r5
 8013f32:	460f      	mov	r7, r1
 8013f34:	f7ec face 	bl	80004d4 <__aeabi_i2d>
 8013f38:	a37d      	add	r3, pc, #500	; (adr r3, 8014130 <_dtoa_r+0x318>)
 8013f3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013f3e:	f7ec fb33 	bl	80005a8 <__aeabi_dmul>
 8013f42:	4602      	mov	r2, r0
 8013f44:	460b      	mov	r3, r1
 8013f46:	4630      	mov	r0, r6
 8013f48:	4639      	mov	r1, r7
 8013f4a:	f7ec f977 	bl	800023c <__adddf3>
 8013f4e:	4606      	mov	r6, r0
 8013f50:	460f      	mov	r7, r1
 8013f52:	f7ec fdd9 	bl	8000b08 <__aeabi_d2iz>
 8013f56:	2200      	movs	r2, #0
 8013f58:	4682      	mov	sl, r0
 8013f5a:	2300      	movs	r3, #0
 8013f5c:	4630      	mov	r0, r6
 8013f5e:	4639      	mov	r1, r7
 8013f60:	f7ec fd94 	bl	8000a8c <__aeabi_dcmplt>
 8013f64:	b148      	cbz	r0, 8013f7a <_dtoa_r+0x162>
 8013f66:	4650      	mov	r0, sl
 8013f68:	f7ec fab4 	bl	80004d4 <__aeabi_i2d>
 8013f6c:	4632      	mov	r2, r6
 8013f6e:	463b      	mov	r3, r7
 8013f70:	f7ec fd82 	bl	8000a78 <__aeabi_dcmpeq>
 8013f74:	b908      	cbnz	r0, 8013f7a <_dtoa_r+0x162>
 8013f76:	f10a 3aff 	add.w	sl, sl, #4294967295
 8013f7a:	f1ba 0f16 	cmp.w	sl, #22
 8013f7e:	d859      	bhi.n	8014034 <_dtoa_r+0x21c>
 8013f80:	4970      	ldr	r1, [pc, #448]	; (8014144 <_dtoa_r+0x32c>)
 8013f82:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8013f86:	e9dd 2300 	ldrd	r2, r3, [sp]
 8013f8a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013f8e:	f7ec fd9b 	bl	8000ac8 <__aeabi_dcmpgt>
 8013f92:	2800      	cmp	r0, #0
 8013f94:	d050      	beq.n	8014038 <_dtoa_r+0x220>
 8013f96:	f10a 3aff 	add.w	sl, sl, #4294967295
 8013f9a:	2300      	movs	r3, #0
 8013f9c:	930f      	str	r3, [sp, #60]	; 0x3c
 8013f9e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8013fa0:	1b5d      	subs	r5, r3, r5
 8013fa2:	f1b5 0801 	subs.w	r8, r5, #1
 8013fa6:	bf49      	itett	mi
 8013fa8:	f1c5 0301 	rsbmi	r3, r5, #1
 8013fac:	2300      	movpl	r3, #0
 8013fae:	9305      	strmi	r3, [sp, #20]
 8013fb0:	f04f 0800 	movmi.w	r8, #0
 8013fb4:	bf58      	it	pl
 8013fb6:	9305      	strpl	r3, [sp, #20]
 8013fb8:	f1ba 0f00 	cmp.w	sl, #0
 8013fbc:	db3e      	blt.n	801403c <_dtoa_r+0x224>
 8013fbe:	2300      	movs	r3, #0
 8013fc0:	44d0      	add	r8, sl
 8013fc2:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8013fc6:	9307      	str	r3, [sp, #28]
 8013fc8:	9b06      	ldr	r3, [sp, #24]
 8013fca:	2b09      	cmp	r3, #9
 8013fcc:	f200 8090 	bhi.w	80140f0 <_dtoa_r+0x2d8>
 8013fd0:	2b05      	cmp	r3, #5
 8013fd2:	bfc4      	itt	gt
 8013fd4:	3b04      	subgt	r3, #4
 8013fd6:	9306      	strgt	r3, [sp, #24]
 8013fd8:	9b06      	ldr	r3, [sp, #24]
 8013fda:	f1a3 0302 	sub.w	r3, r3, #2
 8013fde:	bfcc      	ite	gt
 8013fe0:	2500      	movgt	r5, #0
 8013fe2:	2501      	movle	r5, #1
 8013fe4:	2b03      	cmp	r3, #3
 8013fe6:	f200 808f 	bhi.w	8014108 <_dtoa_r+0x2f0>
 8013fea:	e8df f003 	tbb	[pc, r3]
 8013fee:	7f7d      	.short	0x7f7d
 8013ff0:	7131      	.short	0x7131
 8013ff2:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 8013ff6:	441d      	add	r5, r3
 8013ff8:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8013ffc:	2820      	cmp	r0, #32
 8013ffe:	dd13      	ble.n	8014028 <_dtoa_r+0x210>
 8014000:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8014004:	9b00      	ldr	r3, [sp, #0]
 8014006:	fa08 f800 	lsl.w	r8, r8, r0
 801400a:	f205 4012 	addw	r0, r5, #1042	; 0x412
 801400e:	fa23 f000 	lsr.w	r0, r3, r0
 8014012:	ea48 0000 	orr.w	r0, r8, r0
 8014016:	f7ec fa4d 	bl	80004b4 <__aeabi_ui2d>
 801401a:	2301      	movs	r3, #1
 801401c:	4682      	mov	sl, r0
 801401e:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 8014022:	3d01      	subs	r5, #1
 8014024:	9313      	str	r3, [sp, #76]	; 0x4c
 8014026:	e772      	b.n	8013f0e <_dtoa_r+0xf6>
 8014028:	9b00      	ldr	r3, [sp, #0]
 801402a:	f1c0 0020 	rsb	r0, r0, #32
 801402e:	fa03 f000 	lsl.w	r0, r3, r0
 8014032:	e7f0      	b.n	8014016 <_dtoa_r+0x1fe>
 8014034:	2301      	movs	r3, #1
 8014036:	e7b1      	b.n	8013f9c <_dtoa_r+0x184>
 8014038:	900f      	str	r0, [sp, #60]	; 0x3c
 801403a:	e7b0      	b.n	8013f9e <_dtoa_r+0x186>
 801403c:	9b05      	ldr	r3, [sp, #20]
 801403e:	eba3 030a 	sub.w	r3, r3, sl
 8014042:	9305      	str	r3, [sp, #20]
 8014044:	f1ca 0300 	rsb	r3, sl, #0
 8014048:	9307      	str	r3, [sp, #28]
 801404a:	2300      	movs	r3, #0
 801404c:	930e      	str	r3, [sp, #56]	; 0x38
 801404e:	e7bb      	b.n	8013fc8 <_dtoa_r+0x1b0>
 8014050:	2301      	movs	r3, #1
 8014052:	930a      	str	r3, [sp, #40]	; 0x28
 8014054:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014056:	2b00      	cmp	r3, #0
 8014058:	dd59      	ble.n	801410e <_dtoa_r+0x2f6>
 801405a:	9302      	str	r3, [sp, #8]
 801405c:	4699      	mov	r9, r3
 801405e:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8014060:	2200      	movs	r2, #0
 8014062:	6072      	str	r2, [r6, #4]
 8014064:	2204      	movs	r2, #4
 8014066:	f102 0014 	add.w	r0, r2, #20
 801406a:	4298      	cmp	r0, r3
 801406c:	6871      	ldr	r1, [r6, #4]
 801406e:	d953      	bls.n	8014118 <_dtoa_r+0x300>
 8014070:	4620      	mov	r0, r4
 8014072:	f000 fe77 	bl	8014d64 <_Balloc>
 8014076:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8014078:	6030      	str	r0, [r6, #0]
 801407a:	f1b9 0f0e 	cmp.w	r9, #14
 801407e:	f8d3 b000 	ldr.w	fp, [r3]
 8014082:	f200 80e6 	bhi.w	8014252 <_dtoa_r+0x43a>
 8014086:	2d00      	cmp	r5, #0
 8014088:	f000 80e3 	beq.w	8014252 <_dtoa_r+0x43a>
 801408c:	ed9d 7b00 	vldr	d7, [sp]
 8014090:	f1ba 0f00 	cmp.w	sl, #0
 8014094:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8014098:	dd74      	ble.n	8014184 <_dtoa_r+0x36c>
 801409a:	4a2a      	ldr	r2, [pc, #168]	; (8014144 <_dtoa_r+0x32c>)
 801409c:	f00a 030f 	and.w	r3, sl, #15
 80140a0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80140a4:	ed93 7b00 	vldr	d7, [r3]
 80140a8:	ea4f 162a 	mov.w	r6, sl, asr #4
 80140ac:	06f0      	lsls	r0, r6, #27
 80140ae:	ed8d 7b08 	vstr	d7, [sp, #32]
 80140b2:	d565      	bpl.n	8014180 <_dtoa_r+0x368>
 80140b4:	4b24      	ldr	r3, [pc, #144]	; (8014148 <_dtoa_r+0x330>)
 80140b6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80140ba:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80140be:	f7ec fb9d 	bl	80007fc <__aeabi_ddiv>
 80140c2:	e9cd 0100 	strd	r0, r1, [sp]
 80140c6:	f006 060f 	and.w	r6, r6, #15
 80140ca:	2503      	movs	r5, #3
 80140cc:	4f1e      	ldr	r7, [pc, #120]	; (8014148 <_dtoa_r+0x330>)
 80140ce:	e04c      	b.n	801416a <_dtoa_r+0x352>
 80140d0:	2301      	movs	r3, #1
 80140d2:	930a      	str	r3, [sp, #40]	; 0x28
 80140d4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80140d6:	4453      	add	r3, sl
 80140d8:	f103 0901 	add.w	r9, r3, #1
 80140dc:	9302      	str	r3, [sp, #8]
 80140de:	464b      	mov	r3, r9
 80140e0:	2b01      	cmp	r3, #1
 80140e2:	bfb8      	it	lt
 80140e4:	2301      	movlt	r3, #1
 80140e6:	e7ba      	b.n	801405e <_dtoa_r+0x246>
 80140e8:	2300      	movs	r3, #0
 80140ea:	e7b2      	b.n	8014052 <_dtoa_r+0x23a>
 80140ec:	2300      	movs	r3, #0
 80140ee:	e7f0      	b.n	80140d2 <_dtoa_r+0x2ba>
 80140f0:	2501      	movs	r5, #1
 80140f2:	2300      	movs	r3, #0
 80140f4:	9306      	str	r3, [sp, #24]
 80140f6:	950a      	str	r5, [sp, #40]	; 0x28
 80140f8:	f04f 33ff 	mov.w	r3, #4294967295
 80140fc:	9302      	str	r3, [sp, #8]
 80140fe:	4699      	mov	r9, r3
 8014100:	2200      	movs	r2, #0
 8014102:	2312      	movs	r3, #18
 8014104:	920b      	str	r2, [sp, #44]	; 0x2c
 8014106:	e7aa      	b.n	801405e <_dtoa_r+0x246>
 8014108:	2301      	movs	r3, #1
 801410a:	930a      	str	r3, [sp, #40]	; 0x28
 801410c:	e7f4      	b.n	80140f8 <_dtoa_r+0x2e0>
 801410e:	2301      	movs	r3, #1
 8014110:	9302      	str	r3, [sp, #8]
 8014112:	4699      	mov	r9, r3
 8014114:	461a      	mov	r2, r3
 8014116:	e7f5      	b.n	8014104 <_dtoa_r+0x2ec>
 8014118:	3101      	adds	r1, #1
 801411a:	6071      	str	r1, [r6, #4]
 801411c:	0052      	lsls	r2, r2, #1
 801411e:	e7a2      	b.n	8014066 <_dtoa_r+0x24e>
 8014120:	636f4361 	.word	0x636f4361
 8014124:	3fd287a7 	.word	0x3fd287a7
 8014128:	8b60c8b3 	.word	0x8b60c8b3
 801412c:	3fc68a28 	.word	0x3fc68a28
 8014130:	509f79fb 	.word	0x509f79fb
 8014134:	3fd34413 	.word	0x3fd34413
 8014138:	7ff00000 	.word	0x7ff00000
 801413c:	0801784d 	.word	0x0801784d
 8014140:	3ff80000 	.word	0x3ff80000
 8014144:	08017908 	.word	0x08017908
 8014148:	080178e0 	.word	0x080178e0
 801414c:	08017879 	.word	0x08017879
 8014150:	07f1      	lsls	r1, r6, #31
 8014152:	d508      	bpl.n	8014166 <_dtoa_r+0x34e>
 8014154:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8014158:	e9d7 2300 	ldrd	r2, r3, [r7]
 801415c:	f7ec fa24 	bl	80005a8 <__aeabi_dmul>
 8014160:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8014164:	3501      	adds	r5, #1
 8014166:	1076      	asrs	r6, r6, #1
 8014168:	3708      	adds	r7, #8
 801416a:	2e00      	cmp	r6, #0
 801416c:	d1f0      	bne.n	8014150 <_dtoa_r+0x338>
 801416e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8014172:	e9dd 0100 	ldrd	r0, r1, [sp]
 8014176:	f7ec fb41 	bl	80007fc <__aeabi_ddiv>
 801417a:	e9cd 0100 	strd	r0, r1, [sp]
 801417e:	e01a      	b.n	80141b6 <_dtoa_r+0x39e>
 8014180:	2502      	movs	r5, #2
 8014182:	e7a3      	b.n	80140cc <_dtoa_r+0x2b4>
 8014184:	f000 80a0 	beq.w	80142c8 <_dtoa_r+0x4b0>
 8014188:	f1ca 0600 	rsb	r6, sl, #0
 801418c:	4b9f      	ldr	r3, [pc, #636]	; (801440c <_dtoa_r+0x5f4>)
 801418e:	4fa0      	ldr	r7, [pc, #640]	; (8014410 <_dtoa_r+0x5f8>)
 8014190:	f006 020f 	and.w	r2, r6, #15
 8014194:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8014198:	e9d3 2300 	ldrd	r2, r3, [r3]
 801419c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80141a0:	f7ec fa02 	bl	80005a8 <__aeabi_dmul>
 80141a4:	e9cd 0100 	strd	r0, r1, [sp]
 80141a8:	1136      	asrs	r6, r6, #4
 80141aa:	2300      	movs	r3, #0
 80141ac:	2502      	movs	r5, #2
 80141ae:	2e00      	cmp	r6, #0
 80141b0:	d17f      	bne.n	80142b2 <_dtoa_r+0x49a>
 80141b2:	2b00      	cmp	r3, #0
 80141b4:	d1e1      	bne.n	801417a <_dtoa_r+0x362>
 80141b6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80141b8:	2b00      	cmp	r3, #0
 80141ba:	f000 8087 	beq.w	80142cc <_dtoa_r+0x4b4>
 80141be:	e9dd 6700 	ldrd	r6, r7, [sp]
 80141c2:	2200      	movs	r2, #0
 80141c4:	4b93      	ldr	r3, [pc, #588]	; (8014414 <_dtoa_r+0x5fc>)
 80141c6:	4630      	mov	r0, r6
 80141c8:	4639      	mov	r1, r7
 80141ca:	f7ec fc5f 	bl	8000a8c <__aeabi_dcmplt>
 80141ce:	2800      	cmp	r0, #0
 80141d0:	d07c      	beq.n	80142cc <_dtoa_r+0x4b4>
 80141d2:	f1b9 0f00 	cmp.w	r9, #0
 80141d6:	d079      	beq.n	80142cc <_dtoa_r+0x4b4>
 80141d8:	9b02      	ldr	r3, [sp, #8]
 80141da:	2b00      	cmp	r3, #0
 80141dc:	dd35      	ble.n	801424a <_dtoa_r+0x432>
 80141de:	f10a 33ff 	add.w	r3, sl, #4294967295
 80141e2:	9308      	str	r3, [sp, #32]
 80141e4:	4639      	mov	r1, r7
 80141e6:	2200      	movs	r2, #0
 80141e8:	4b8b      	ldr	r3, [pc, #556]	; (8014418 <_dtoa_r+0x600>)
 80141ea:	4630      	mov	r0, r6
 80141ec:	f7ec f9dc 	bl	80005a8 <__aeabi_dmul>
 80141f0:	e9cd 0100 	strd	r0, r1, [sp]
 80141f4:	9f02      	ldr	r7, [sp, #8]
 80141f6:	3501      	adds	r5, #1
 80141f8:	4628      	mov	r0, r5
 80141fa:	f7ec f96b 	bl	80004d4 <__aeabi_i2d>
 80141fe:	e9dd 2300 	ldrd	r2, r3, [sp]
 8014202:	f7ec f9d1 	bl	80005a8 <__aeabi_dmul>
 8014206:	2200      	movs	r2, #0
 8014208:	4b84      	ldr	r3, [pc, #528]	; (801441c <_dtoa_r+0x604>)
 801420a:	f7ec f817 	bl	800023c <__adddf3>
 801420e:	4605      	mov	r5, r0
 8014210:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8014214:	2f00      	cmp	r7, #0
 8014216:	d15d      	bne.n	80142d4 <_dtoa_r+0x4bc>
 8014218:	2200      	movs	r2, #0
 801421a:	4b81      	ldr	r3, [pc, #516]	; (8014420 <_dtoa_r+0x608>)
 801421c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8014220:	f7ec f80a 	bl	8000238 <__aeabi_dsub>
 8014224:	462a      	mov	r2, r5
 8014226:	4633      	mov	r3, r6
 8014228:	e9cd 0100 	strd	r0, r1, [sp]
 801422c:	f7ec fc4c 	bl	8000ac8 <__aeabi_dcmpgt>
 8014230:	2800      	cmp	r0, #0
 8014232:	f040 8288 	bne.w	8014746 <_dtoa_r+0x92e>
 8014236:	462a      	mov	r2, r5
 8014238:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 801423c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8014240:	f7ec fc24 	bl	8000a8c <__aeabi_dcmplt>
 8014244:	2800      	cmp	r0, #0
 8014246:	f040 827c 	bne.w	8014742 <_dtoa_r+0x92a>
 801424a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 801424e:	e9cd 2300 	strd	r2, r3, [sp]
 8014252:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8014254:	2b00      	cmp	r3, #0
 8014256:	f2c0 8150 	blt.w	80144fa <_dtoa_r+0x6e2>
 801425a:	f1ba 0f0e 	cmp.w	sl, #14
 801425e:	f300 814c 	bgt.w	80144fa <_dtoa_r+0x6e2>
 8014262:	4b6a      	ldr	r3, [pc, #424]	; (801440c <_dtoa_r+0x5f4>)
 8014264:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8014268:	ed93 7b00 	vldr	d7, [r3]
 801426c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801426e:	2b00      	cmp	r3, #0
 8014270:	ed8d 7b02 	vstr	d7, [sp, #8]
 8014274:	f280 80d8 	bge.w	8014428 <_dtoa_r+0x610>
 8014278:	f1b9 0f00 	cmp.w	r9, #0
 801427c:	f300 80d4 	bgt.w	8014428 <_dtoa_r+0x610>
 8014280:	f040 825e 	bne.w	8014740 <_dtoa_r+0x928>
 8014284:	2200      	movs	r2, #0
 8014286:	4b66      	ldr	r3, [pc, #408]	; (8014420 <_dtoa_r+0x608>)
 8014288:	ec51 0b17 	vmov	r0, r1, d7
 801428c:	f7ec f98c 	bl	80005a8 <__aeabi_dmul>
 8014290:	e9dd 2300 	ldrd	r2, r3, [sp]
 8014294:	f7ec fc0e 	bl	8000ab4 <__aeabi_dcmpge>
 8014298:	464f      	mov	r7, r9
 801429a:	464e      	mov	r6, r9
 801429c:	2800      	cmp	r0, #0
 801429e:	f040 8234 	bne.w	801470a <_dtoa_r+0x8f2>
 80142a2:	2331      	movs	r3, #49	; 0x31
 80142a4:	f10b 0501 	add.w	r5, fp, #1
 80142a8:	f88b 3000 	strb.w	r3, [fp]
 80142ac:	f10a 0a01 	add.w	sl, sl, #1
 80142b0:	e22f      	b.n	8014712 <_dtoa_r+0x8fa>
 80142b2:	07f2      	lsls	r2, r6, #31
 80142b4:	d505      	bpl.n	80142c2 <_dtoa_r+0x4aa>
 80142b6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80142ba:	f7ec f975 	bl	80005a8 <__aeabi_dmul>
 80142be:	3501      	adds	r5, #1
 80142c0:	2301      	movs	r3, #1
 80142c2:	1076      	asrs	r6, r6, #1
 80142c4:	3708      	adds	r7, #8
 80142c6:	e772      	b.n	80141ae <_dtoa_r+0x396>
 80142c8:	2502      	movs	r5, #2
 80142ca:	e774      	b.n	80141b6 <_dtoa_r+0x39e>
 80142cc:	f8cd a020 	str.w	sl, [sp, #32]
 80142d0:	464f      	mov	r7, r9
 80142d2:	e791      	b.n	80141f8 <_dtoa_r+0x3e0>
 80142d4:	4b4d      	ldr	r3, [pc, #308]	; (801440c <_dtoa_r+0x5f4>)
 80142d6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80142da:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 80142de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80142e0:	2b00      	cmp	r3, #0
 80142e2:	d047      	beq.n	8014374 <_dtoa_r+0x55c>
 80142e4:	4602      	mov	r2, r0
 80142e6:	460b      	mov	r3, r1
 80142e8:	2000      	movs	r0, #0
 80142ea:	494e      	ldr	r1, [pc, #312]	; (8014424 <_dtoa_r+0x60c>)
 80142ec:	f7ec fa86 	bl	80007fc <__aeabi_ddiv>
 80142f0:	462a      	mov	r2, r5
 80142f2:	4633      	mov	r3, r6
 80142f4:	f7eb ffa0 	bl	8000238 <__aeabi_dsub>
 80142f8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80142fc:	465d      	mov	r5, fp
 80142fe:	e9dd 0100 	ldrd	r0, r1, [sp]
 8014302:	f7ec fc01 	bl	8000b08 <__aeabi_d2iz>
 8014306:	4606      	mov	r6, r0
 8014308:	f7ec f8e4 	bl	80004d4 <__aeabi_i2d>
 801430c:	4602      	mov	r2, r0
 801430e:	460b      	mov	r3, r1
 8014310:	e9dd 0100 	ldrd	r0, r1, [sp]
 8014314:	f7eb ff90 	bl	8000238 <__aeabi_dsub>
 8014318:	3630      	adds	r6, #48	; 0x30
 801431a:	f805 6b01 	strb.w	r6, [r5], #1
 801431e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8014322:	e9cd 0100 	strd	r0, r1, [sp]
 8014326:	f7ec fbb1 	bl	8000a8c <__aeabi_dcmplt>
 801432a:	2800      	cmp	r0, #0
 801432c:	d163      	bne.n	80143f6 <_dtoa_r+0x5de>
 801432e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8014332:	2000      	movs	r0, #0
 8014334:	4937      	ldr	r1, [pc, #220]	; (8014414 <_dtoa_r+0x5fc>)
 8014336:	f7eb ff7f 	bl	8000238 <__aeabi_dsub>
 801433a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 801433e:	f7ec fba5 	bl	8000a8c <__aeabi_dcmplt>
 8014342:	2800      	cmp	r0, #0
 8014344:	f040 80b7 	bne.w	80144b6 <_dtoa_r+0x69e>
 8014348:	eba5 030b 	sub.w	r3, r5, fp
 801434c:	429f      	cmp	r7, r3
 801434e:	f77f af7c 	ble.w	801424a <_dtoa_r+0x432>
 8014352:	2200      	movs	r2, #0
 8014354:	4b30      	ldr	r3, [pc, #192]	; (8014418 <_dtoa_r+0x600>)
 8014356:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801435a:	f7ec f925 	bl	80005a8 <__aeabi_dmul>
 801435e:	2200      	movs	r2, #0
 8014360:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8014364:	4b2c      	ldr	r3, [pc, #176]	; (8014418 <_dtoa_r+0x600>)
 8014366:	e9dd 0100 	ldrd	r0, r1, [sp]
 801436a:	f7ec f91d 	bl	80005a8 <__aeabi_dmul>
 801436e:	e9cd 0100 	strd	r0, r1, [sp]
 8014372:	e7c4      	b.n	80142fe <_dtoa_r+0x4e6>
 8014374:	462a      	mov	r2, r5
 8014376:	4633      	mov	r3, r6
 8014378:	f7ec f916 	bl	80005a8 <__aeabi_dmul>
 801437c:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8014380:	eb0b 0507 	add.w	r5, fp, r7
 8014384:	465e      	mov	r6, fp
 8014386:	e9dd 0100 	ldrd	r0, r1, [sp]
 801438a:	f7ec fbbd 	bl	8000b08 <__aeabi_d2iz>
 801438e:	4607      	mov	r7, r0
 8014390:	f7ec f8a0 	bl	80004d4 <__aeabi_i2d>
 8014394:	3730      	adds	r7, #48	; 0x30
 8014396:	4602      	mov	r2, r0
 8014398:	460b      	mov	r3, r1
 801439a:	e9dd 0100 	ldrd	r0, r1, [sp]
 801439e:	f7eb ff4b 	bl	8000238 <__aeabi_dsub>
 80143a2:	f806 7b01 	strb.w	r7, [r6], #1
 80143a6:	42ae      	cmp	r6, r5
 80143a8:	e9cd 0100 	strd	r0, r1, [sp]
 80143ac:	f04f 0200 	mov.w	r2, #0
 80143b0:	d126      	bne.n	8014400 <_dtoa_r+0x5e8>
 80143b2:	4b1c      	ldr	r3, [pc, #112]	; (8014424 <_dtoa_r+0x60c>)
 80143b4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80143b8:	f7eb ff40 	bl	800023c <__adddf3>
 80143bc:	4602      	mov	r2, r0
 80143be:	460b      	mov	r3, r1
 80143c0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80143c4:	f7ec fb80 	bl	8000ac8 <__aeabi_dcmpgt>
 80143c8:	2800      	cmp	r0, #0
 80143ca:	d174      	bne.n	80144b6 <_dtoa_r+0x69e>
 80143cc:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80143d0:	2000      	movs	r0, #0
 80143d2:	4914      	ldr	r1, [pc, #80]	; (8014424 <_dtoa_r+0x60c>)
 80143d4:	f7eb ff30 	bl	8000238 <__aeabi_dsub>
 80143d8:	4602      	mov	r2, r0
 80143da:	460b      	mov	r3, r1
 80143dc:	e9dd 0100 	ldrd	r0, r1, [sp]
 80143e0:	f7ec fb54 	bl	8000a8c <__aeabi_dcmplt>
 80143e4:	2800      	cmp	r0, #0
 80143e6:	f43f af30 	beq.w	801424a <_dtoa_r+0x432>
 80143ea:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80143ee:	2b30      	cmp	r3, #48	; 0x30
 80143f0:	f105 32ff 	add.w	r2, r5, #4294967295
 80143f4:	d002      	beq.n	80143fc <_dtoa_r+0x5e4>
 80143f6:	f8dd a020 	ldr.w	sl, [sp, #32]
 80143fa:	e04a      	b.n	8014492 <_dtoa_r+0x67a>
 80143fc:	4615      	mov	r5, r2
 80143fe:	e7f4      	b.n	80143ea <_dtoa_r+0x5d2>
 8014400:	4b05      	ldr	r3, [pc, #20]	; (8014418 <_dtoa_r+0x600>)
 8014402:	f7ec f8d1 	bl	80005a8 <__aeabi_dmul>
 8014406:	e9cd 0100 	strd	r0, r1, [sp]
 801440a:	e7bc      	b.n	8014386 <_dtoa_r+0x56e>
 801440c:	08017908 	.word	0x08017908
 8014410:	080178e0 	.word	0x080178e0
 8014414:	3ff00000 	.word	0x3ff00000
 8014418:	40240000 	.word	0x40240000
 801441c:	401c0000 	.word	0x401c0000
 8014420:	40140000 	.word	0x40140000
 8014424:	3fe00000 	.word	0x3fe00000
 8014428:	e9dd 6700 	ldrd	r6, r7, [sp]
 801442c:	465d      	mov	r5, fp
 801442e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8014432:	4630      	mov	r0, r6
 8014434:	4639      	mov	r1, r7
 8014436:	f7ec f9e1 	bl	80007fc <__aeabi_ddiv>
 801443a:	f7ec fb65 	bl	8000b08 <__aeabi_d2iz>
 801443e:	4680      	mov	r8, r0
 8014440:	f7ec f848 	bl	80004d4 <__aeabi_i2d>
 8014444:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8014448:	f7ec f8ae 	bl	80005a8 <__aeabi_dmul>
 801444c:	4602      	mov	r2, r0
 801444e:	460b      	mov	r3, r1
 8014450:	4630      	mov	r0, r6
 8014452:	4639      	mov	r1, r7
 8014454:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8014458:	f7eb feee 	bl	8000238 <__aeabi_dsub>
 801445c:	f805 6b01 	strb.w	r6, [r5], #1
 8014460:	eba5 060b 	sub.w	r6, r5, fp
 8014464:	45b1      	cmp	r9, r6
 8014466:	4602      	mov	r2, r0
 8014468:	460b      	mov	r3, r1
 801446a:	d139      	bne.n	80144e0 <_dtoa_r+0x6c8>
 801446c:	f7eb fee6 	bl	800023c <__adddf3>
 8014470:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8014474:	4606      	mov	r6, r0
 8014476:	460f      	mov	r7, r1
 8014478:	f7ec fb26 	bl	8000ac8 <__aeabi_dcmpgt>
 801447c:	b9c8      	cbnz	r0, 80144b2 <_dtoa_r+0x69a>
 801447e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8014482:	4630      	mov	r0, r6
 8014484:	4639      	mov	r1, r7
 8014486:	f7ec faf7 	bl	8000a78 <__aeabi_dcmpeq>
 801448a:	b110      	cbz	r0, 8014492 <_dtoa_r+0x67a>
 801448c:	f018 0f01 	tst.w	r8, #1
 8014490:	d10f      	bne.n	80144b2 <_dtoa_r+0x69a>
 8014492:	9904      	ldr	r1, [sp, #16]
 8014494:	4620      	mov	r0, r4
 8014496:	f000 fc99 	bl	8014dcc <_Bfree>
 801449a:	2300      	movs	r3, #0
 801449c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801449e:	702b      	strb	r3, [r5, #0]
 80144a0:	f10a 0301 	add.w	r3, sl, #1
 80144a4:	6013      	str	r3, [r2, #0]
 80144a6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80144a8:	2b00      	cmp	r3, #0
 80144aa:	f000 8241 	beq.w	8014930 <_dtoa_r+0xb18>
 80144ae:	601d      	str	r5, [r3, #0]
 80144b0:	e23e      	b.n	8014930 <_dtoa_r+0xb18>
 80144b2:	f8cd a020 	str.w	sl, [sp, #32]
 80144b6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80144ba:	2a39      	cmp	r2, #57	; 0x39
 80144bc:	f105 33ff 	add.w	r3, r5, #4294967295
 80144c0:	d108      	bne.n	80144d4 <_dtoa_r+0x6bc>
 80144c2:	459b      	cmp	fp, r3
 80144c4:	d10a      	bne.n	80144dc <_dtoa_r+0x6c4>
 80144c6:	9b08      	ldr	r3, [sp, #32]
 80144c8:	3301      	adds	r3, #1
 80144ca:	9308      	str	r3, [sp, #32]
 80144cc:	2330      	movs	r3, #48	; 0x30
 80144ce:	f88b 3000 	strb.w	r3, [fp]
 80144d2:	465b      	mov	r3, fp
 80144d4:	781a      	ldrb	r2, [r3, #0]
 80144d6:	3201      	adds	r2, #1
 80144d8:	701a      	strb	r2, [r3, #0]
 80144da:	e78c      	b.n	80143f6 <_dtoa_r+0x5de>
 80144dc:	461d      	mov	r5, r3
 80144de:	e7ea      	b.n	80144b6 <_dtoa_r+0x69e>
 80144e0:	2200      	movs	r2, #0
 80144e2:	4b9b      	ldr	r3, [pc, #620]	; (8014750 <_dtoa_r+0x938>)
 80144e4:	f7ec f860 	bl	80005a8 <__aeabi_dmul>
 80144e8:	2200      	movs	r2, #0
 80144ea:	2300      	movs	r3, #0
 80144ec:	4606      	mov	r6, r0
 80144ee:	460f      	mov	r7, r1
 80144f0:	f7ec fac2 	bl	8000a78 <__aeabi_dcmpeq>
 80144f4:	2800      	cmp	r0, #0
 80144f6:	d09a      	beq.n	801442e <_dtoa_r+0x616>
 80144f8:	e7cb      	b.n	8014492 <_dtoa_r+0x67a>
 80144fa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80144fc:	2a00      	cmp	r2, #0
 80144fe:	f000 808b 	beq.w	8014618 <_dtoa_r+0x800>
 8014502:	9a06      	ldr	r2, [sp, #24]
 8014504:	2a01      	cmp	r2, #1
 8014506:	dc6e      	bgt.n	80145e6 <_dtoa_r+0x7ce>
 8014508:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801450a:	2a00      	cmp	r2, #0
 801450c:	d067      	beq.n	80145de <_dtoa_r+0x7c6>
 801450e:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8014512:	9f07      	ldr	r7, [sp, #28]
 8014514:	9d05      	ldr	r5, [sp, #20]
 8014516:	9a05      	ldr	r2, [sp, #20]
 8014518:	2101      	movs	r1, #1
 801451a:	441a      	add	r2, r3
 801451c:	4620      	mov	r0, r4
 801451e:	9205      	str	r2, [sp, #20]
 8014520:	4498      	add	r8, r3
 8014522:	f000 fcf3 	bl	8014f0c <__i2b>
 8014526:	4606      	mov	r6, r0
 8014528:	2d00      	cmp	r5, #0
 801452a:	dd0c      	ble.n	8014546 <_dtoa_r+0x72e>
 801452c:	f1b8 0f00 	cmp.w	r8, #0
 8014530:	dd09      	ble.n	8014546 <_dtoa_r+0x72e>
 8014532:	4545      	cmp	r5, r8
 8014534:	9a05      	ldr	r2, [sp, #20]
 8014536:	462b      	mov	r3, r5
 8014538:	bfa8      	it	ge
 801453a:	4643      	movge	r3, r8
 801453c:	1ad2      	subs	r2, r2, r3
 801453e:	9205      	str	r2, [sp, #20]
 8014540:	1aed      	subs	r5, r5, r3
 8014542:	eba8 0803 	sub.w	r8, r8, r3
 8014546:	9b07      	ldr	r3, [sp, #28]
 8014548:	b1eb      	cbz	r3, 8014586 <_dtoa_r+0x76e>
 801454a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801454c:	2b00      	cmp	r3, #0
 801454e:	d067      	beq.n	8014620 <_dtoa_r+0x808>
 8014550:	b18f      	cbz	r7, 8014576 <_dtoa_r+0x75e>
 8014552:	4631      	mov	r1, r6
 8014554:	463a      	mov	r2, r7
 8014556:	4620      	mov	r0, r4
 8014558:	f000 fd78 	bl	801504c <__pow5mult>
 801455c:	9a04      	ldr	r2, [sp, #16]
 801455e:	4601      	mov	r1, r0
 8014560:	4606      	mov	r6, r0
 8014562:	4620      	mov	r0, r4
 8014564:	f000 fcdb 	bl	8014f1e <__multiply>
 8014568:	9904      	ldr	r1, [sp, #16]
 801456a:	9008      	str	r0, [sp, #32]
 801456c:	4620      	mov	r0, r4
 801456e:	f000 fc2d 	bl	8014dcc <_Bfree>
 8014572:	9b08      	ldr	r3, [sp, #32]
 8014574:	9304      	str	r3, [sp, #16]
 8014576:	9b07      	ldr	r3, [sp, #28]
 8014578:	1bda      	subs	r2, r3, r7
 801457a:	d004      	beq.n	8014586 <_dtoa_r+0x76e>
 801457c:	9904      	ldr	r1, [sp, #16]
 801457e:	4620      	mov	r0, r4
 8014580:	f000 fd64 	bl	801504c <__pow5mult>
 8014584:	9004      	str	r0, [sp, #16]
 8014586:	2101      	movs	r1, #1
 8014588:	4620      	mov	r0, r4
 801458a:	f000 fcbf 	bl	8014f0c <__i2b>
 801458e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8014590:	4607      	mov	r7, r0
 8014592:	2b00      	cmp	r3, #0
 8014594:	f000 81d0 	beq.w	8014938 <_dtoa_r+0xb20>
 8014598:	461a      	mov	r2, r3
 801459a:	4601      	mov	r1, r0
 801459c:	4620      	mov	r0, r4
 801459e:	f000 fd55 	bl	801504c <__pow5mult>
 80145a2:	9b06      	ldr	r3, [sp, #24]
 80145a4:	2b01      	cmp	r3, #1
 80145a6:	4607      	mov	r7, r0
 80145a8:	dc40      	bgt.n	801462c <_dtoa_r+0x814>
 80145aa:	9b00      	ldr	r3, [sp, #0]
 80145ac:	2b00      	cmp	r3, #0
 80145ae:	d139      	bne.n	8014624 <_dtoa_r+0x80c>
 80145b0:	9b01      	ldr	r3, [sp, #4]
 80145b2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80145b6:	2b00      	cmp	r3, #0
 80145b8:	d136      	bne.n	8014628 <_dtoa_r+0x810>
 80145ba:	9b01      	ldr	r3, [sp, #4]
 80145bc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80145c0:	0d1b      	lsrs	r3, r3, #20
 80145c2:	051b      	lsls	r3, r3, #20
 80145c4:	b12b      	cbz	r3, 80145d2 <_dtoa_r+0x7ba>
 80145c6:	9b05      	ldr	r3, [sp, #20]
 80145c8:	3301      	adds	r3, #1
 80145ca:	9305      	str	r3, [sp, #20]
 80145cc:	f108 0801 	add.w	r8, r8, #1
 80145d0:	2301      	movs	r3, #1
 80145d2:	9307      	str	r3, [sp, #28]
 80145d4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80145d6:	2b00      	cmp	r3, #0
 80145d8:	d12a      	bne.n	8014630 <_dtoa_r+0x818>
 80145da:	2001      	movs	r0, #1
 80145dc:	e030      	b.n	8014640 <_dtoa_r+0x828>
 80145de:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80145e0:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80145e4:	e795      	b.n	8014512 <_dtoa_r+0x6fa>
 80145e6:	9b07      	ldr	r3, [sp, #28]
 80145e8:	f109 37ff 	add.w	r7, r9, #4294967295
 80145ec:	42bb      	cmp	r3, r7
 80145ee:	bfbf      	itttt	lt
 80145f0:	9b07      	ldrlt	r3, [sp, #28]
 80145f2:	9707      	strlt	r7, [sp, #28]
 80145f4:	1afa      	sublt	r2, r7, r3
 80145f6:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 80145f8:	bfbb      	ittet	lt
 80145fa:	189b      	addlt	r3, r3, r2
 80145fc:	930e      	strlt	r3, [sp, #56]	; 0x38
 80145fe:	1bdf      	subge	r7, r3, r7
 8014600:	2700      	movlt	r7, #0
 8014602:	f1b9 0f00 	cmp.w	r9, #0
 8014606:	bfb5      	itete	lt
 8014608:	9b05      	ldrlt	r3, [sp, #20]
 801460a:	9d05      	ldrge	r5, [sp, #20]
 801460c:	eba3 0509 	sublt.w	r5, r3, r9
 8014610:	464b      	movge	r3, r9
 8014612:	bfb8      	it	lt
 8014614:	2300      	movlt	r3, #0
 8014616:	e77e      	b.n	8014516 <_dtoa_r+0x6fe>
 8014618:	9f07      	ldr	r7, [sp, #28]
 801461a:	9d05      	ldr	r5, [sp, #20]
 801461c:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 801461e:	e783      	b.n	8014528 <_dtoa_r+0x710>
 8014620:	9a07      	ldr	r2, [sp, #28]
 8014622:	e7ab      	b.n	801457c <_dtoa_r+0x764>
 8014624:	2300      	movs	r3, #0
 8014626:	e7d4      	b.n	80145d2 <_dtoa_r+0x7ba>
 8014628:	9b00      	ldr	r3, [sp, #0]
 801462a:	e7d2      	b.n	80145d2 <_dtoa_r+0x7ba>
 801462c:	2300      	movs	r3, #0
 801462e:	9307      	str	r3, [sp, #28]
 8014630:	693b      	ldr	r3, [r7, #16]
 8014632:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8014636:	6918      	ldr	r0, [r3, #16]
 8014638:	f000 fc1a 	bl	8014e70 <__hi0bits>
 801463c:	f1c0 0020 	rsb	r0, r0, #32
 8014640:	4440      	add	r0, r8
 8014642:	f010 001f 	ands.w	r0, r0, #31
 8014646:	d047      	beq.n	80146d8 <_dtoa_r+0x8c0>
 8014648:	f1c0 0320 	rsb	r3, r0, #32
 801464c:	2b04      	cmp	r3, #4
 801464e:	dd3b      	ble.n	80146c8 <_dtoa_r+0x8b0>
 8014650:	9b05      	ldr	r3, [sp, #20]
 8014652:	f1c0 001c 	rsb	r0, r0, #28
 8014656:	4403      	add	r3, r0
 8014658:	9305      	str	r3, [sp, #20]
 801465a:	4405      	add	r5, r0
 801465c:	4480      	add	r8, r0
 801465e:	9b05      	ldr	r3, [sp, #20]
 8014660:	2b00      	cmp	r3, #0
 8014662:	dd05      	ble.n	8014670 <_dtoa_r+0x858>
 8014664:	461a      	mov	r2, r3
 8014666:	9904      	ldr	r1, [sp, #16]
 8014668:	4620      	mov	r0, r4
 801466a:	f000 fd3d 	bl	80150e8 <__lshift>
 801466e:	9004      	str	r0, [sp, #16]
 8014670:	f1b8 0f00 	cmp.w	r8, #0
 8014674:	dd05      	ble.n	8014682 <_dtoa_r+0x86a>
 8014676:	4639      	mov	r1, r7
 8014678:	4642      	mov	r2, r8
 801467a:	4620      	mov	r0, r4
 801467c:	f000 fd34 	bl	80150e8 <__lshift>
 8014680:	4607      	mov	r7, r0
 8014682:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8014684:	b353      	cbz	r3, 80146dc <_dtoa_r+0x8c4>
 8014686:	4639      	mov	r1, r7
 8014688:	9804      	ldr	r0, [sp, #16]
 801468a:	f000 fd81 	bl	8015190 <__mcmp>
 801468e:	2800      	cmp	r0, #0
 8014690:	da24      	bge.n	80146dc <_dtoa_r+0x8c4>
 8014692:	2300      	movs	r3, #0
 8014694:	220a      	movs	r2, #10
 8014696:	9904      	ldr	r1, [sp, #16]
 8014698:	4620      	mov	r0, r4
 801469a:	f000 fbae 	bl	8014dfa <__multadd>
 801469e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80146a0:	9004      	str	r0, [sp, #16]
 80146a2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80146a6:	2b00      	cmp	r3, #0
 80146a8:	f000 814d 	beq.w	8014946 <_dtoa_r+0xb2e>
 80146ac:	2300      	movs	r3, #0
 80146ae:	4631      	mov	r1, r6
 80146b0:	220a      	movs	r2, #10
 80146b2:	4620      	mov	r0, r4
 80146b4:	f000 fba1 	bl	8014dfa <__multadd>
 80146b8:	9b02      	ldr	r3, [sp, #8]
 80146ba:	2b00      	cmp	r3, #0
 80146bc:	4606      	mov	r6, r0
 80146be:	dc4f      	bgt.n	8014760 <_dtoa_r+0x948>
 80146c0:	9b06      	ldr	r3, [sp, #24]
 80146c2:	2b02      	cmp	r3, #2
 80146c4:	dd4c      	ble.n	8014760 <_dtoa_r+0x948>
 80146c6:	e011      	b.n	80146ec <_dtoa_r+0x8d4>
 80146c8:	d0c9      	beq.n	801465e <_dtoa_r+0x846>
 80146ca:	9a05      	ldr	r2, [sp, #20]
 80146cc:	331c      	adds	r3, #28
 80146ce:	441a      	add	r2, r3
 80146d0:	9205      	str	r2, [sp, #20]
 80146d2:	441d      	add	r5, r3
 80146d4:	4498      	add	r8, r3
 80146d6:	e7c2      	b.n	801465e <_dtoa_r+0x846>
 80146d8:	4603      	mov	r3, r0
 80146da:	e7f6      	b.n	80146ca <_dtoa_r+0x8b2>
 80146dc:	f1b9 0f00 	cmp.w	r9, #0
 80146e0:	dc38      	bgt.n	8014754 <_dtoa_r+0x93c>
 80146e2:	9b06      	ldr	r3, [sp, #24]
 80146e4:	2b02      	cmp	r3, #2
 80146e6:	dd35      	ble.n	8014754 <_dtoa_r+0x93c>
 80146e8:	f8cd 9008 	str.w	r9, [sp, #8]
 80146ec:	9b02      	ldr	r3, [sp, #8]
 80146ee:	b963      	cbnz	r3, 801470a <_dtoa_r+0x8f2>
 80146f0:	4639      	mov	r1, r7
 80146f2:	2205      	movs	r2, #5
 80146f4:	4620      	mov	r0, r4
 80146f6:	f000 fb80 	bl	8014dfa <__multadd>
 80146fa:	4601      	mov	r1, r0
 80146fc:	4607      	mov	r7, r0
 80146fe:	9804      	ldr	r0, [sp, #16]
 8014700:	f000 fd46 	bl	8015190 <__mcmp>
 8014704:	2800      	cmp	r0, #0
 8014706:	f73f adcc 	bgt.w	80142a2 <_dtoa_r+0x48a>
 801470a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801470c:	465d      	mov	r5, fp
 801470e:	ea6f 0a03 	mvn.w	sl, r3
 8014712:	f04f 0900 	mov.w	r9, #0
 8014716:	4639      	mov	r1, r7
 8014718:	4620      	mov	r0, r4
 801471a:	f000 fb57 	bl	8014dcc <_Bfree>
 801471e:	2e00      	cmp	r6, #0
 8014720:	f43f aeb7 	beq.w	8014492 <_dtoa_r+0x67a>
 8014724:	f1b9 0f00 	cmp.w	r9, #0
 8014728:	d005      	beq.n	8014736 <_dtoa_r+0x91e>
 801472a:	45b1      	cmp	r9, r6
 801472c:	d003      	beq.n	8014736 <_dtoa_r+0x91e>
 801472e:	4649      	mov	r1, r9
 8014730:	4620      	mov	r0, r4
 8014732:	f000 fb4b 	bl	8014dcc <_Bfree>
 8014736:	4631      	mov	r1, r6
 8014738:	4620      	mov	r0, r4
 801473a:	f000 fb47 	bl	8014dcc <_Bfree>
 801473e:	e6a8      	b.n	8014492 <_dtoa_r+0x67a>
 8014740:	2700      	movs	r7, #0
 8014742:	463e      	mov	r6, r7
 8014744:	e7e1      	b.n	801470a <_dtoa_r+0x8f2>
 8014746:	f8dd a020 	ldr.w	sl, [sp, #32]
 801474a:	463e      	mov	r6, r7
 801474c:	e5a9      	b.n	80142a2 <_dtoa_r+0x48a>
 801474e:	bf00      	nop
 8014750:	40240000 	.word	0x40240000
 8014754:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014756:	f8cd 9008 	str.w	r9, [sp, #8]
 801475a:	2b00      	cmp	r3, #0
 801475c:	f000 80fa 	beq.w	8014954 <_dtoa_r+0xb3c>
 8014760:	2d00      	cmp	r5, #0
 8014762:	dd05      	ble.n	8014770 <_dtoa_r+0x958>
 8014764:	4631      	mov	r1, r6
 8014766:	462a      	mov	r2, r5
 8014768:	4620      	mov	r0, r4
 801476a:	f000 fcbd 	bl	80150e8 <__lshift>
 801476e:	4606      	mov	r6, r0
 8014770:	9b07      	ldr	r3, [sp, #28]
 8014772:	2b00      	cmp	r3, #0
 8014774:	d04c      	beq.n	8014810 <_dtoa_r+0x9f8>
 8014776:	6871      	ldr	r1, [r6, #4]
 8014778:	4620      	mov	r0, r4
 801477a:	f000 faf3 	bl	8014d64 <_Balloc>
 801477e:	6932      	ldr	r2, [r6, #16]
 8014780:	3202      	adds	r2, #2
 8014782:	4605      	mov	r5, r0
 8014784:	0092      	lsls	r2, r2, #2
 8014786:	f106 010c 	add.w	r1, r6, #12
 801478a:	300c      	adds	r0, #12
 801478c:	f7fe fc1e 	bl	8012fcc <memcpy>
 8014790:	2201      	movs	r2, #1
 8014792:	4629      	mov	r1, r5
 8014794:	4620      	mov	r0, r4
 8014796:	f000 fca7 	bl	80150e8 <__lshift>
 801479a:	9b00      	ldr	r3, [sp, #0]
 801479c:	f8cd b014 	str.w	fp, [sp, #20]
 80147a0:	f003 0301 	and.w	r3, r3, #1
 80147a4:	46b1      	mov	r9, r6
 80147a6:	9307      	str	r3, [sp, #28]
 80147a8:	4606      	mov	r6, r0
 80147aa:	4639      	mov	r1, r7
 80147ac:	9804      	ldr	r0, [sp, #16]
 80147ae:	f7ff faa7 	bl	8013d00 <quorem>
 80147b2:	4649      	mov	r1, r9
 80147b4:	4605      	mov	r5, r0
 80147b6:	f100 0830 	add.w	r8, r0, #48	; 0x30
 80147ba:	9804      	ldr	r0, [sp, #16]
 80147bc:	f000 fce8 	bl	8015190 <__mcmp>
 80147c0:	4632      	mov	r2, r6
 80147c2:	9000      	str	r0, [sp, #0]
 80147c4:	4639      	mov	r1, r7
 80147c6:	4620      	mov	r0, r4
 80147c8:	f000 fcfc 	bl	80151c4 <__mdiff>
 80147cc:	68c3      	ldr	r3, [r0, #12]
 80147ce:	4602      	mov	r2, r0
 80147d0:	bb03      	cbnz	r3, 8014814 <_dtoa_r+0x9fc>
 80147d2:	4601      	mov	r1, r0
 80147d4:	9008      	str	r0, [sp, #32]
 80147d6:	9804      	ldr	r0, [sp, #16]
 80147d8:	f000 fcda 	bl	8015190 <__mcmp>
 80147dc:	9a08      	ldr	r2, [sp, #32]
 80147de:	4603      	mov	r3, r0
 80147e0:	4611      	mov	r1, r2
 80147e2:	4620      	mov	r0, r4
 80147e4:	9308      	str	r3, [sp, #32]
 80147e6:	f000 faf1 	bl	8014dcc <_Bfree>
 80147ea:	9b08      	ldr	r3, [sp, #32]
 80147ec:	b9a3      	cbnz	r3, 8014818 <_dtoa_r+0xa00>
 80147ee:	9a06      	ldr	r2, [sp, #24]
 80147f0:	b992      	cbnz	r2, 8014818 <_dtoa_r+0xa00>
 80147f2:	9a07      	ldr	r2, [sp, #28]
 80147f4:	b982      	cbnz	r2, 8014818 <_dtoa_r+0xa00>
 80147f6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80147fa:	d029      	beq.n	8014850 <_dtoa_r+0xa38>
 80147fc:	9b00      	ldr	r3, [sp, #0]
 80147fe:	2b00      	cmp	r3, #0
 8014800:	dd01      	ble.n	8014806 <_dtoa_r+0x9ee>
 8014802:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8014806:	9b05      	ldr	r3, [sp, #20]
 8014808:	1c5d      	adds	r5, r3, #1
 801480a:	f883 8000 	strb.w	r8, [r3]
 801480e:	e782      	b.n	8014716 <_dtoa_r+0x8fe>
 8014810:	4630      	mov	r0, r6
 8014812:	e7c2      	b.n	801479a <_dtoa_r+0x982>
 8014814:	2301      	movs	r3, #1
 8014816:	e7e3      	b.n	80147e0 <_dtoa_r+0x9c8>
 8014818:	9a00      	ldr	r2, [sp, #0]
 801481a:	2a00      	cmp	r2, #0
 801481c:	db04      	blt.n	8014828 <_dtoa_r+0xa10>
 801481e:	d125      	bne.n	801486c <_dtoa_r+0xa54>
 8014820:	9a06      	ldr	r2, [sp, #24]
 8014822:	bb1a      	cbnz	r2, 801486c <_dtoa_r+0xa54>
 8014824:	9a07      	ldr	r2, [sp, #28]
 8014826:	bb0a      	cbnz	r2, 801486c <_dtoa_r+0xa54>
 8014828:	2b00      	cmp	r3, #0
 801482a:	ddec      	ble.n	8014806 <_dtoa_r+0x9ee>
 801482c:	2201      	movs	r2, #1
 801482e:	9904      	ldr	r1, [sp, #16]
 8014830:	4620      	mov	r0, r4
 8014832:	f000 fc59 	bl	80150e8 <__lshift>
 8014836:	4639      	mov	r1, r7
 8014838:	9004      	str	r0, [sp, #16]
 801483a:	f000 fca9 	bl	8015190 <__mcmp>
 801483e:	2800      	cmp	r0, #0
 8014840:	dc03      	bgt.n	801484a <_dtoa_r+0xa32>
 8014842:	d1e0      	bne.n	8014806 <_dtoa_r+0x9ee>
 8014844:	f018 0f01 	tst.w	r8, #1
 8014848:	d0dd      	beq.n	8014806 <_dtoa_r+0x9ee>
 801484a:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 801484e:	d1d8      	bne.n	8014802 <_dtoa_r+0x9ea>
 8014850:	9b05      	ldr	r3, [sp, #20]
 8014852:	9a05      	ldr	r2, [sp, #20]
 8014854:	1c5d      	adds	r5, r3, #1
 8014856:	2339      	movs	r3, #57	; 0x39
 8014858:	7013      	strb	r3, [r2, #0]
 801485a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 801485e:	2b39      	cmp	r3, #57	; 0x39
 8014860:	f105 32ff 	add.w	r2, r5, #4294967295
 8014864:	d04f      	beq.n	8014906 <_dtoa_r+0xaee>
 8014866:	3301      	adds	r3, #1
 8014868:	7013      	strb	r3, [r2, #0]
 801486a:	e754      	b.n	8014716 <_dtoa_r+0x8fe>
 801486c:	9a05      	ldr	r2, [sp, #20]
 801486e:	2b00      	cmp	r3, #0
 8014870:	f102 0501 	add.w	r5, r2, #1
 8014874:	dd06      	ble.n	8014884 <_dtoa_r+0xa6c>
 8014876:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 801487a:	d0e9      	beq.n	8014850 <_dtoa_r+0xa38>
 801487c:	f108 0801 	add.w	r8, r8, #1
 8014880:	9b05      	ldr	r3, [sp, #20]
 8014882:	e7c2      	b.n	801480a <_dtoa_r+0x9f2>
 8014884:	9a02      	ldr	r2, [sp, #8]
 8014886:	f805 8c01 	strb.w	r8, [r5, #-1]
 801488a:	eba5 030b 	sub.w	r3, r5, fp
 801488e:	4293      	cmp	r3, r2
 8014890:	d021      	beq.n	80148d6 <_dtoa_r+0xabe>
 8014892:	2300      	movs	r3, #0
 8014894:	220a      	movs	r2, #10
 8014896:	9904      	ldr	r1, [sp, #16]
 8014898:	4620      	mov	r0, r4
 801489a:	f000 faae 	bl	8014dfa <__multadd>
 801489e:	45b1      	cmp	r9, r6
 80148a0:	9004      	str	r0, [sp, #16]
 80148a2:	f04f 0300 	mov.w	r3, #0
 80148a6:	f04f 020a 	mov.w	r2, #10
 80148aa:	4649      	mov	r1, r9
 80148ac:	4620      	mov	r0, r4
 80148ae:	d105      	bne.n	80148bc <_dtoa_r+0xaa4>
 80148b0:	f000 faa3 	bl	8014dfa <__multadd>
 80148b4:	4681      	mov	r9, r0
 80148b6:	4606      	mov	r6, r0
 80148b8:	9505      	str	r5, [sp, #20]
 80148ba:	e776      	b.n	80147aa <_dtoa_r+0x992>
 80148bc:	f000 fa9d 	bl	8014dfa <__multadd>
 80148c0:	4631      	mov	r1, r6
 80148c2:	4681      	mov	r9, r0
 80148c4:	2300      	movs	r3, #0
 80148c6:	220a      	movs	r2, #10
 80148c8:	4620      	mov	r0, r4
 80148ca:	f000 fa96 	bl	8014dfa <__multadd>
 80148ce:	4606      	mov	r6, r0
 80148d0:	e7f2      	b.n	80148b8 <_dtoa_r+0xaa0>
 80148d2:	f04f 0900 	mov.w	r9, #0
 80148d6:	2201      	movs	r2, #1
 80148d8:	9904      	ldr	r1, [sp, #16]
 80148da:	4620      	mov	r0, r4
 80148dc:	f000 fc04 	bl	80150e8 <__lshift>
 80148e0:	4639      	mov	r1, r7
 80148e2:	9004      	str	r0, [sp, #16]
 80148e4:	f000 fc54 	bl	8015190 <__mcmp>
 80148e8:	2800      	cmp	r0, #0
 80148ea:	dcb6      	bgt.n	801485a <_dtoa_r+0xa42>
 80148ec:	d102      	bne.n	80148f4 <_dtoa_r+0xadc>
 80148ee:	f018 0f01 	tst.w	r8, #1
 80148f2:	d1b2      	bne.n	801485a <_dtoa_r+0xa42>
 80148f4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80148f8:	2b30      	cmp	r3, #48	; 0x30
 80148fa:	f105 32ff 	add.w	r2, r5, #4294967295
 80148fe:	f47f af0a 	bne.w	8014716 <_dtoa_r+0x8fe>
 8014902:	4615      	mov	r5, r2
 8014904:	e7f6      	b.n	80148f4 <_dtoa_r+0xadc>
 8014906:	4593      	cmp	fp, r2
 8014908:	d105      	bne.n	8014916 <_dtoa_r+0xafe>
 801490a:	2331      	movs	r3, #49	; 0x31
 801490c:	f10a 0a01 	add.w	sl, sl, #1
 8014910:	f88b 3000 	strb.w	r3, [fp]
 8014914:	e6ff      	b.n	8014716 <_dtoa_r+0x8fe>
 8014916:	4615      	mov	r5, r2
 8014918:	e79f      	b.n	801485a <_dtoa_r+0xa42>
 801491a:	f8df b064 	ldr.w	fp, [pc, #100]	; 8014980 <_dtoa_r+0xb68>
 801491e:	e007      	b.n	8014930 <_dtoa_r+0xb18>
 8014920:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8014922:	f8df b060 	ldr.w	fp, [pc, #96]	; 8014984 <_dtoa_r+0xb6c>
 8014926:	b11b      	cbz	r3, 8014930 <_dtoa_r+0xb18>
 8014928:	f10b 0308 	add.w	r3, fp, #8
 801492c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801492e:	6013      	str	r3, [r2, #0]
 8014930:	4658      	mov	r0, fp
 8014932:	b017      	add	sp, #92	; 0x5c
 8014934:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014938:	9b06      	ldr	r3, [sp, #24]
 801493a:	2b01      	cmp	r3, #1
 801493c:	f77f ae35 	ble.w	80145aa <_dtoa_r+0x792>
 8014940:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8014942:	9307      	str	r3, [sp, #28]
 8014944:	e649      	b.n	80145da <_dtoa_r+0x7c2>
 8014946:	9b02      	ldr	r3, [sp, #8]
 8014948:	2b00      	cmp	r3, #0
 801494a:	dc03      	bgt.n	8014954 <_dtoa_r+0xb3c>
 801494c:	9b06      	ldr	r3, [sp, #24]
 801494e:	2b02      	cmp	r3, #2
 8014950:	f73f aecc 	bgt.w	80146ec <_dtoa_r+0x8d4>
 8014954:	465d      	mov	r5, fp
 8014956:	4639      	mov	r1, r7
 8014958:	9804      	ldr	r0, [sp, #16]
 801495a:	f7ff f9d1 	bl	8013d00 <quorem>
 801495e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8014962:	f805 8b01 	strb.w	r8, [r5], #1
 8014966:	9a02      	ldr	r2, [sp, #8]
 8014968:	eba5 030b 	sub.w	r3, r5, fp
 801496c:	429a      	cmp	r2, r3
 801496e:	ddb0      	ble.n	80148d2 <_dtoa_r+0xaba>
 8014970:	2300      	movs	r3, #0
 8014972:	220a      	movs	r2, #10
 8014974:	9904      	ldr	r1, [sp, #16]
 8014976:	4620      	mov	r0, r4
 8014978:	f000 fa3f 	bl	8014dfa <__multadd>
 801497c:	9004      	str	r0, [sp, #16]
 801497e:	e7ea      	b.n	8014956 <_dtoa_r+0xb3e>
 8014980:	0801784c 	.word	0x0801784c
 8014984:	08017870 	.word	0x08017870

08014988 <__sflush_r>:
 8014988:	898a      	ldrh	r2, [r1, #12]
 801498a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801498e:	4605      	mov	r5, r0
 8014990:	0710      	lsls	r0, r2, #28
 8014992:	460c      	mov	r4, r1
 8014994:	d458      	bmi.n	8014a48 <__sflush_r+0xc0>
 8014996:	684b      	ldr	r3, [r1, #4]
 8014998:	2b00      	cmp	r3, #0
 801499a:	dc05      	bgt.n	80149a8 <__sflush_r+0x20>
 801499c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801499e:	2b00      	cmp	r3, #0
 80149a0:	dc02      	bgt.n	80149a8 <__sflush_r+0x20>
 80149a2:	2000      	movs	r0, #0
 80149a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80149a8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80149aa:	2e00      	cmp	r6, #0
 80149ac:	d0f9      	beq.n	80149a2 <__sflush_r+0x1a>
 80149ae:	2300      	movs	r3, #0
 80149b0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80149b4:	682f      	ldr	r7, [r5, #0]
 80149b6:	6a21      	ldr	r1, [r4, #32]
 80149b8:	602b      	str	r3, [r5, #0]
 80149ba:	d032      	beq.n	8014a22 <__sflush_r+0x9a>
 80149bc:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80149be:	89a3      	ldrh	r3, [r4, #12]
 80149c0:	075a      	lsls	r2, r3, #29
 80149c2:	d505      	bpl.n	80149d0 <__sflush_r+0x48>
 80149c4:	6863      	ldr	r3, [r4, #4]
 80149c6:	1ac0      	subs	r0, r0, r3
 80149c8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80149ca:	b10b      	cbz	r3, 80149d0 <__sflush_r+0x48>
 80149cc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80149ce:	1ac0      	subs	r0, r0, r3
 80149d0:	2300      	movs	r3, #0
 80149d2:	4602      	mov	r2, r0
 80149d4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80149d6:	6a21      	ldr	r1, [r4, #32]
 80149d8:	4628      	mov	r0, r5
 80149da:	47b0      	blx	r6
 80149dc:	1c43      	adds	r3, r0, #1
 80149de:	89a3      	ldrh	r3, [r4, #12]
 80149e0:	d106      	bne.n	80149f0 <__sflush_r+0x68>
 80149e2:	6829      	ldr	r1, [r5, #0]
 80149e4:	291d      	cmp	r1, #29
 80149e6:	d848      	bhi.n	8014a7a <__sflush_r+0xf2>
 80149e8:	4a29      	ldr	r2, [pc, #164]	; (8014a90 <__sflush_r+0x108>)
 80149ea:	40ca      	lsrs	r2, r1
 80149ec:	07d6      	lsls	r6, r2, #31
 80149ee:	d544      	bpl.n	8014a7a <__sflush_r+0xf2>
 80149f0:	2200      	movs	r2, #0
 80149f2:	6062      	str	r2, [r4, #4]
 80149f4:	04d9      	lsls	r1, r3, #19
 80149f6:	6922      	ldr	r2, [r4, #16]
 80149f8:	6022      	str	r2, [r4, #0]
 80149fa:	d504      	bpl.n	8014a06 <__sflush_r+0x7e>
 80149fc:	1c42      	adds	r2, r0, #1
 80149fe:	d101      	bne.n	8014a04 <__sflush_r+0x7c>
 8014a00:	682b      	ldr	r3, [r5, #0]
 8014a02:	b903      	cbnz	r3, 8014a06 <__sflush_r+0x7e>
 8014a04:	6560      	str	r0, [r4, #84]	; 0x54
 8014a06:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8014a08:	602f      	str	r7, [r5, #0]
 8014a0a:	2900      	cmp	r1, #0
 8014a0c:	d0c9      	beq.n	80149a2 <__sflush_r+0x1a>
 8014a0e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8014a12:	4299      	cmp	r1, r3
 8014a14:	d002      	beq.n	8014a1c <__sflush_r+0x94>
 8014a16:	4628      	mov	r0, r5
 8014a18:	f7fe faec 	bl	8012ff4 <_free_r>
 8014a1c:	2000      	movs	r0, #0
 8014a1e:	6360      	str	r0, [r4, #52]	; 0x34
 8014a20:	e7c0      	b.n	80149a4 <__sflush_r+0x1c>
 8014a22:	2301      	movs	r3, #1
 8014a24:	4628      	mov	r0, r5
 8014a26:	47b0      	blx	r6
 8014a28:	1c41      	adds	r1, r0, #1
 8014a2a:	d1c8      	bne.n	80149be <__sflush_r+0x36>
 8014a2c:	682b      	ldr	r3, [r5, #0]
 8014a2e:	2b00      	cmp	r3, #0
 8014a30:	d0c5      	beq.n	80149be <__sflush_r+0x36>
 8014a32:	2b1d      	cmp	r3, #29
 8014a34:	d001      	beq.n	8014a3a <__sflush_r+0xb2>
 8014a36:	2b16      	cmp	r3, #22
 8014a38:	d101      	bne.n	8014a3e <__sflush_r+0xb6>
 8014a3a:	602f      	str	r7, [r5, #0]
 8014a3c:	e7b1      	b.n	80149a2 <__sflush_r+0x1a>
 8014a3e:	89a3      	ldrh	r3, [r4, #12]
 8014a40:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014a44:	81a3      	strh	r3, [r4, #12]
 8014a46:	e7ad      	b.n	80149a4 <__sflush_r+0x1c>
 8014a48:	690f      	ldr	r7, [r1, #16]
 8014a4a:	2f00      	cmp	r7, #0
 8014a4c:	d0a9      	beq.n	80149a2 <__sflush_r+0x1a>
 8014a4e:	0793      	lsls	r3, r2, #30
 8014a50:	680e      	ldr	r6, [r1, #0]
 8014a52:	bf08      	it	eq
 8014a54:	694b      	ldreq	r3, [r1, #20]
 8014a56:	600f      	str	r7, [r1, #0]
 8014a58:	bf18      	it	ne
 8014a5a:	2300      	movne	r3, #0
 8014a5c:	eba6 0807 	sub.w	r8, r6, r7
 8014a60:	608b      	str	r3, [r1, #8]
 8014a62:	f1b8 0f00 	cmp.w	r8, #0
 8014a66:	dd9c      	ble.n	80149a2 <__sflush_r+0x1a>
 8014a68:	4643      	mov	r3, r8
 8014a6a:	463a      	mov	r2, r7
 8014a6c:	6a21      	ldr	r1, [r4, #32]
 8014a6e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8014a70:	4628      	mov	r0, r5
 8014a72:	47b0      	blx	r6
 8014a74:	2800      	cmp	r0, #0
 8014a76:	dc06      	bgt.n	8014a86 <__sflush_r+0xfe>
 8014a78:	89a3      	ldrh	r3, [r4, #12]
 8014a7a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014a7e:	81a3      	strh	r3, [r4, #12]
 8014a80:	f04f 30ff 	mov.w	r0, #4294967295
 8014a84:	e78e      	b.n	80149a4 <__sflush_r+0x1c>
 8014a86:	4407      	add	r7, r0
 8014a88:	eba8 0800 	sub.w	r8, r8, r0
 8014a8c:	e7e9      	b.n	8014a62 <__sflush_r+0xda>
 8014a8e:	bf00      	nop
 8014a90:	20400001 	.word	0x20400001

08014a94 <_fflush_r>:
 8014a94:	b538      	push	{r3, r4, r5, lr}
 8014a96:	690b      	ldr	r3, [r1, #16]
 8014a98:	4605      	mov	r5, r0
 8014a9a:	460c      	mov	r4, r1
 8014a9c:	b1db      	cbz	r3, 8014ad6 <_fflush_r+0x42>
 8014a9e:	b118      	cbz	r0, 8014aa8 <_fflush_r+0x14>
 8014aa0:	6983      	ldr	r3, [r0, #24]
 8014aa2:	b90b      	cbnz	r3, 8014aa8 <_fflush_r+0x14>
 8014aa4:	f000 f860 	bl	8014b68 <__sinit>
 8014aa8:	4b0c      	ldr	r3, [pc, #48]	; (8014adc <_fflush_r+0x48>)
 8014aaa:	429c      	cmp	r4, r3
 8014aac:	d109      	bne.n	8014ac2 <_fflush_r+0x2e>
 8014aae:	686c      	ldr	r4, [r5, #4]
 8014ab0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014ab4:	b17b      	cbz	r3, 8014ad6 <_fflush_r+0x42>
 8014ab6:	4621      	mov	r1, r4
 8014ab8:	4628      	mov	r0, r5
 8014aba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8014abe:	f7ff bf63 	b.w	8014988 <__sflush_r>
 8014ac2:	4b07      	ldr	r3, [pc, #28]	; (8014ae0 <_fflush_r+0x4c>)
 8014ac4:	429c      	cmp	r4, r3
 8014ac6:	d101      	bne.n	8014acc <_fflush_r+0x38>
 8014ac8:	68ac      	ldr	r4, [r5, #8]
 8014aca:	e7f1      	b.n	8014ab0 <_fflush_r+0x1c>
 8014acc:	4b05      	ldr	r3, [pc, #20]	; (8014ae4 <_fflush_r+0x50>)
 8014ace:	429c      	cmp	r4, r3
 8014ad0:	bf08      	it	eq
 8014ad2:	68ec      	ldreq	r4, [r5, #12]
 8014ad4:	e7ec      	b.n	8014ab0 <_fflush_r+0x1c>
 8014ad6:	2000      	movs	r0, #0
 8014ad8:	bd38      	pop	{r3, r4, r5, pc}
 8014ada:	bf00      	nop
 8014adc:	080178a0 	.word	0x080178a0
 8014ae0:	080178c0 	.word	0x080178c0
 8014ae4:	08017880 	.word	0x08017880

08014ae8 <std>:
 8014ae8:	2300      	movs	r3, #0
 8014aea:	b510      	push	{r4, lr}
 8014aec:	4604      	mov	r4, r0
 8014aee:	e9c0 3300 	strd	r3, r3, [r0]
 8014af2:	6083      	str	r3, [r0, #8]
 8014af4:	8181      	strh	r1, [r0, #12]
 8014af6:	6643      	str	r3, [r0, #100]	; 0x64
 8014af8:	81c2      	strh	r2, [r0, #14]
 8014afa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8014afe:	6183      	str	r3, [r0, #24]
 8014b00:	4619      	mov	r1, r3
 8014b02:	2208      	movs	r2, #8
 8014b04:	305c      	adds	r0, #92	; 0x5c
 8014b06:	f7fe fa6c 	bl	8012fe2 <memset>
 8014b0a:	4b05      	ldr	r3, [pc, #20]	; (8014b20 <std+0x38>)
 8014b0c:	6263      	str	r3, [r4, #36]	; 0x24
 8014b0e:	4b05      	ldr	r3, [pc, #20]	; (8014b24 <std+0x3c>)
 8014b10:	62a3      	str	r3, [r4, #40]	; 0x28
 8014b12:	4b05      	ldr	r3, [pc, #20]	; (8014b28 <std+0x40>)
 8014b14:	62e3      	str	r3, [r4, #44]	; 0x2c
 8014b16:	4b05      	ldr	r3, [pc, #20]	; (8014b2c <std+0x44>)
 8014b18:	6224      	str	r4, [r4, #32]
 8014b1a:	6323      	str	r3, [r4, #48]	; 0x30
 8014b1c:	bd10      	pop	{r4, pc}
 8014b1e:	bf00      	nop
 8014b20:	0801585d 	.word	0x0801585d
 8014b24:	0801587f 	.word	0x0801587f
 8014b28:	080158b7 	.word	0x080158b7
 8014b2c:	080158db 	.word	0x080158db

08014b30 <_cleanup_r>:
 8014b30:	4901      	ldr	r1, [pc, #4]	; (8014b38 <_cleanup_r+0x8>)
 8014b32:	f000 b885 	b.w	8014c40 <_fwalk_reent>
 8014b36:	bf00      	nop
 8014b38:	08014a95 	.word	0x08014a95

08014b3c <__sfmoreglue>:
 8014b3c:	b570      	push	{r4, r5, r6, lr}
 8014b3e:	1e4a      	subs	r2, r1, #1
 8014b40:	2568      	movs	r5, #104	; 0x68
 8014b42:	4355      	muls	r5, r2
 8014b44:	460e      	mov	r6, r1
 8014b46:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8014b4a:	f7fe faa1 	bl	8013090 <_malloc_r>
 8014b4e:	4604      	mov	r4, r0
 8014b50:	b140      	cbz	r0, 8014b64 <__sfmoreglue+0x28>
 8014b52:	2100      	movs	r1, #0
 8014b54:	e9c0 1600 	strd	r1, r6, [r0]
 8014b58:	300c      	adds	r0, #12
 8014b5a:	60a0      	str	r0, [r4, #8]
 8014b5c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8014b60:	f7fe fa3f 	bl	8012fe2 <memset>
 8014b64:	4620      	mov	r0, r4
 8014b66:	bd70      	pop	{r4, r5, r6, pc}

08014b68 <__sinit>:
 8014b68:	6983      	ldr	r3, [r0, #24]
 8014b6a:	b510      	push	{r4, lr}
 8014b6c:	4604      	mov	r4, r0
 8014b6e:	bb33      	cbnz	r3, 8014bbe <__sinit+0x56>
 8014b70:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8014b74:	6503      	str	r3, [r0, #80]	; 0x50
 8014b76:	4b12      	ldr	r3, [pc, #72]	; (8014bc0 <__sinit+0x58>)
 8014b78:	4a12      	ldr	r2, [pc, #72]	; (8014bc4 <__sinit+0x5c>)
 8014b7a:	681b      	ldr	r3, [r3, #0]
 8014b7c:	6282      	str	r2, [r0, #40]	; 0x28
 8014b7e:	4298      	cmp	r0, r3
 8014b80:	bf04      	itt	eq
 8014b82:	2301      	moveq	r3, #1
 8014b84:	6183      	streq	r3, [r0, #24]
 8014b86:	f000 f81f 	bl	8014bc8 <__sfp>
 8014b8a:	6060      	str	r0, [r4, #4]
 8014b8c:	4620      	mov	r0, r4
 8014b8e:	f000 f81b 	bl	8014bc8 <__sfp>
 8014b92:	60a0      	str	r0, [r4, #8]
 8014b94:	4620      	mov	r0, r4
 8014b96:	f000 f817 	bl	8014bc8 <__sfp>
 8014b9a:	2200      	movs	r2, #0
 8014b9c:	60e0      	str	r0, [r4, #12]
 8014b9e:	2104      	movs	r1, #4
 8014ba0:	6860      	ldr	r0, [r4, #4]
 8014ba2:	f7ff ffa1 	bl	8014ae8 <std>
 8014ba6:	2201      	movs	r2, #1
 8014ba8:	2109      	movs	r1, #9
 8014baa:	68a0      	ldr	r0, [r4, #8]
 8014bac:	f7ff ff9c 	bl	8014ae8 <std>
 8014bb0:	2202      	movs	r2, #2
 8014bb2:	2112      	movs	r1, #18
 8014bb4:	68e0      	ldr	r0, [r4, #12]
 8014bb6:	f7ff ff97 	bl	8014ae8 <std>
 8014bba:	2301      	movs	r3, #1
 8014bbc:	61a3      	str	r3, [r4, #24]
 8014bbe:	bd10      	pop	{r4, pc}
 8014bc0:	08017838 	.word	0x08017838
 8014bc4:	08014b31 	.word	0x08014b31

08014bc8 <__sfp>:
 8014bc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014bca:	4b1b      	ldr	r3, [pc, #108]	; (8014c38 <__sfp+0x70>)
 8014bcc:	681e      	ldr	r6, [r3, #0]
 8014bce:	69b3      	ldr	r3, [r6, #24]
 8014bd0:	4607      	mov	r7, r0
 8014bd2:	b913      	cbnz	r3, 8014bda <__sfp+0x12>
 8014bd4:	4630      	mov	r0, r6
 8014bd6:	f7ff ffc7 	bl	8014b68 <__sinit>
 8014bda:	3648      	adds	r6, #72	; 0x48
 8014bdc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8014be0:	3b01      	subs	r3, #1
 8014be2:	d503      	bpl.n	8014bec <__sfp+0x24>
 8014be4:	6833      	ldr	r3, [r6, #0]
 8014be6:	b133      	cbz	r3, 8014bf6 <__sfp+0x2e>
 8014be8:	6836      	ldr	r6, [r6, #0]
 8014bea:	e7f7      	b.n	8014bdc <__sfp+0x14>
 8014bec:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8014bf0:	b16d      	cbz	r5, 8014c0e <__sfp+0x46>
 8014bf2:	3468      	adds	r4, #104	; 0x68
 8014bf4:	e7f4      	b.n	8014be0 <__sfp+0x18>
 8014bf6:	2104      	movs	r1, #4
 8014bf8:	4638      	mov	r0, r7
 8014bfa:	f7ff ff9f 	bl	8014b3c <__sfmoreglue>
 8014bfe:	6030      	str	r0, [r6, #0]
 8014c00:	2800      	cmp	r0, #0
 8014c02:	d1f1      	bne.n	8014be8 <__sfp+0x20>
 8014c04:	230c      	movs	r3, #12
 8014c06:	603b      	str	r3, [r7, #0]
 8014c08:	4604      	mov	r4, r0
 8014c0a:	4620      	mov	r0, r4
 8014c0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014c0e:	4b0b      	ldr	r3, [pc, #44]	; (8014c3c <__sfp+0x74>)
 8014c10:	6665      	str	r5, [r4, #100]	; 0x64
 8014c12:	e9c4 5500 	strd	r5, r5, [r4]
 8014c16:	60a5      	str	r5, [r4, #8]
 8014c18:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8014c1c:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8014c20:	2208      	movs	r2, #8
 8014c22:	4629      	mov	r1, r5
 8014c24:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8014c28:	f7fe f9db 	bl	8012fe2 <memset>
 8014c2c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8014c30:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8014c34:	e7e9      	b.n	8014c0a <__sfp+0x42>
 8014c36:	bf00      	nop
 8014c38:	08017838 	.word	0x08017838
 8014c3c:	ffff0001 	.word	0xffff0001

08014c40 <_fwalk_reent>:
 8014c40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014c44:	4680      	mov	r8, r0
 8014c46:	4689      	mov	r9, r1
 8014c48:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8014c4c:	2600      	movs	r6, #0
 8014c4e:	b914      	cbnz	r4, 8014c56 <_fwalk_reent+0x16>
 8014c50:	4630      	mov	r0, r6
 8014c52:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014c56:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8014c5a:	3f01      	subs	r7, #1
 8014c5c:	d501      	bpl.n	8014c62 <_fwalk_reent+0x22>
 8014c5e:	6824      	ldr	r4, [r4, #0]
 8014c60:	e7f5      	b.n	8014c4e <_fwalk_reent+0xe>
 8014c62:	89ab      	ldrh	r3, [r5, #12]
 8014c64:	2b01      	cmp	r3, #1
 8014c66:	d907      	bls.n	8014c78 <_fwalk_reent+0x38>
 8014c68:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8014c6c:	3301      	adds	r3, #1
 8014c6e:	d003      	beq.n	8014c78 <_fwalk_reent+0x38>
 8014c70:	4629      	mov	r1, r5
 8014c72:	4640      	mov	r0, r8
 8014c74:	47c8      	blx	r9
 8014c76:	4306      	orrs	r6, r0
 8014c78:	3568      	adds	r5, #104	; 0x68
 8014c7a:	e7ee      	b.n	8014c5a <_fwalk_reent+0x1a>

08014c7c <_localeconv_r>:
 8014c7c:	4b04      	ldr	r3, [pc, #16]	; (8014c90 <_localeconv_r+0x14>)
 8014c7e:	681b      	ldr	r3, [r3, #0]
 8014c80:	6a18      	ldr	r0, [r3, #32]
 8014c82:	4b04      	ldr	r3, [pc, #16]	; (8014c94 <_localeconv_r+0x18>)
 8014c84:	2800      	cmp	r0, #0
 8014c86:	bf08      	it	eq
 8014c88:	4618      	moveq	r0, r3
 8014c8a:	30f0      	adds	r0, #240	; 0xf0
 8014c8c:	4770      	bx	lr
 8014c8e:	bf00      	nop
 8014c90:	20000024 	.word	0x20000024
 8014c94:	20000088 	.word	0x20000088

08014c98 <__swhatbuf_r>:
 8014c98:	b570      	push	{r4, r5, r6, lr}
 8014c9a:	460e      	mov	r6, r1
 8014c9c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014ca0:	2900      	cmp	r1, #0
 8014ca2:	b096      	sub	sp, #88	; 0x58
 8014ca4:	4614      	mov	r4, r2
 8014ca6:	461d      	mov	r5, r3
 8014ca8:	da07      	bge.n	8014cba <__swhatbuf_r+0x22>
 8014caa:	2300      	movs	r3, #0
 8014cac:	602b      	str	r3, [r5, #0]
 8014cae:	89b3      	ldrh	r3, [r6, #12]
 8014cb0:	061a      	lsls	r2, r3, #24
 8014cb2:	d410      	bmi.n	8014cd6 <__swhatbuf_r+0x3e>
 8014cb4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8014cb8:	e00e      	b.n	8014cd8 <__swhatbuf_r+0x40>
 8014cba:	466a      	mov	r2, sp
 8014cbc:	f000 fe34 	bl	8015928 <_fstat_r>
 8014cc0:	2800      	cmp	r0, #0
 8014cc2:	dbf2      	blt.n	8014caa <__swhatbuf_r+0x12>
 8014cc4:	9a01      	ldr	r2, [sp, #4]
 8014cc6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8014cca:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8014cce:	425a      	negs	r2, r3
 8014cd0:	415a      	adcs	r2, r3
 8014cd2:	602a      	str	r2, [r5, #0]
 8014cd4:	e7ee      	b.n	8014cb4 <__swhatbuf_r+0x1c>
 8014cd6:	2340      	movs	r3, #64	; 0x40
 8014cd8:	2000      	movs	r0, #0
 8014cda:	6023      	str	r3, [r4, #0]
 8014cdc:	b016      	add	sp, #88	; 0x58
 8014cde:	bd70      	pop	{r4, r5, r6, pc}

08014ce0 <__smakebuf_r>:
 8014ce0:	898b      	ldrh	r3, [r1, #12]
 8014ce2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8014ce4:	079d      	lsls	r5, r3, #30
 8014ce6:	4606      	mov	r6, r0
 8014ce8:	460c      	mov	r4, r1
 8014cea:	d507      	bpl.n	8014cfc <__smakebuf_r+0x1c>
 8014cec:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8014cf0:	6023      	str	r3, [r4, #0]
 8014cf2:	6123      	str	r3, [r4, #16]
 8014cf4:	2301      	movs	r3, #1
 8014cf6:	6163      	str	r3, [r4, #20]
 8014cf8:	b002      	add	sp, #8
 8014cfa:	bd70      	pop	{r4, r5, r6, pc}
 8014cfc:	ab01      	add	r3, sp, #4
 8014cfe:	466a      	mov	r2, sp
 8014d00:	f7ff ffca 	bl	8014c98 <__swhatbuf_r>
 8014d04:	9900      	ldr	r1, [sp, #0]
 8014d06:	4605      	mov	r5, r0
 8014d08:	4630      	mov	r0, r6
 8014d0a:	f7fe f9c1 	bl	8013090 <_malloc_r>
 8014d0e:	b948      	cbnz	r0, 8014d24 <__smakebuf_r+0x44>
 8014d10:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014d14:	059a      	lsls	r2, r3, #22
 8014d16:	d4ef      	bmi.n	8014cf8 <__smakebuf_r+0x18>
 8014d18:	f023 0303 	bic.w	r3, r3, #3
 8014d1c:	f043 0302 	orr.w	r3, r3, #2
 8014d20:	81a3      	strh	r3, [r4, #12]
 8014d22:	e7e3      	b.n	8014cec <__smakebuf_r+0xc>
 8014d24:	4b0d      	ldr	r3, [pc, #52]	; (8014d5c <__smakebuf_r+0x7c>)
 8014d26:	62b3      	str	r3, [r6, #40]	; 0x28
 8014d28:	89a3      	ldrh	r3, [r4, #12]
 8014d2a:	6020      	str	r0, [r4, #0]
 8014d2c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8014d30:	81a3      	strh	r3, [r4, #12]
 8014d32:	9b00      	ldr	r3, [sp, #0]
 8014d34:	6163      	str	r3, [r4, #20]
 8014d36:	9b01      	ldr	r3, [sp, #4]
 8014d38:	6120      	str	r0, [r4, #16]
 8014d3a:	b15b      	cbz	r3, 8014d54 <__smakebuf_r+0x74>
 8014d3c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8014d40:	4630      	mov	r0, r6
 8014d42:	f000 fe03 	bl	801594c <_isatty_r>
 8014d46:	b128      	cbz	r0, 8014d54 <__smakebuf_r+0x74>
 8014d48:	89a3      	ldrh	r3, [r4, #12]
 8014d4a:	f023 0303 	bic.w	r3, r3, #3
 8014d4e:	f043 0301 	orr.w	r3, r3, #1
 8014d52:	81a3      	strh	r3, [r4, #12]
 8014d54:	89a3      	ldrh	r3, [r4, #12]
 8014d56:	431d      	orrs	r5, r3
 8014d58:	81a5      	strh	r5, [r4, #12]
 8014d5a:	e7cd      	b.n	8014cf8 <__smakebuf_r+0x18>
 8014d5c:	08014b31 	.word	0x08014b31

08014d60 <__malloc_lock>:
 8014d60:	4770      	bx	lr

08014d62 <__malloc_unlock>:
 8014d62:	4770      	bx	lr

08014d64 <_Balloc>:
 8014d64:	b570      	push	{r4, r5, r6, lr}
 8014d66:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8014d68:	4604      	mov	r4, r0
 8014d6a:	460e      	mov	r6, r1
 8014d6c:	b93d      	cbnz	r5, 8014d7e <_Balloc+0x1a>
 8014d6e:	2010      	movs	r0, #16
 8014d70:	f7fe f924 	bl	8012fbc <malloc>
 8014d74:	6260      	str	r0, [r4, #36]	; 0x24
 8014d76:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8014d7a:	6005      	str	r5, [r0, #0]
 8014d7c:	60c5      	str	r5, [r0, #12]
 8014d7e:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8014d80:	68eb      	ldr	r3, [r5, #12]
 8014d82:	b183      	cbz	r3, 8014da6 <_Balloc+0x42>
 8014d84:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8014d86:	68db      	ldr	r3, [r3, #12]
 8014d88:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8014d8c:	b9b8      	cbnz	r0, 8014dbe <_Balloc+0x5a>
 8014d8e:	2101      	movs	r1, #1
 8014d90:	fa01 f506 	lsl.w	r5, r1, r6
 8014d94:	1d6a      	adds	r2, r5, #5
 8014d96:	0092      	lsls	r2, r2, #2
 8014d98:	4620      	mov	r0, r4
 8014d9a:	f000 fabf 	bl	801531c <_calloc_r>
 8014d9e:	b160      	cbz	r0, 8014dba <_Balloc+0x56>
 8014da0:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8014da4:	e00e      	b.n	8014dc4 <_Balloc+0x60>
 8014da6:	2221      	movs	r2, #33	; 0x21
 8014da8:	2104      	movs	r1, #4
 8014daa:	4620      	mov	r0, r4
 8014dac:	f000 fab6 	bl	801531c <_calloc_r>
 8014db0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8014db2:	60e8      	str	r0, [r5, #12]
 8014db4:	68db      	ldr	r3, [r3, #12]
 8014db6:	2b00      	cmp	r3, #0
 8014db8:	d1e4      	bne.n	8014d84 <_Balloc+0x20>
 8014dba:	2000      	movs	r0, #0
 8014dbc:	bd70      	pop	{r4, r5, r6, pc}
 8014dbe:	6802      	ldr	r2, [r0, #0]
 8014dc0:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8014dc4:	2300      	movs	r3, #0
 8014dc6:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8014dca:	e7f7      	b.n	8014dbc <_Balloc+0x58>

08014dcc <_Bfree>:
 8014dcc:	b570      	push	{r4, r5, r6, lr}
 8014dce:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8014dd0:	4606      	mov	r6, r0
 8014dd2:	460d      	mov	r5, r1
 8014dd4:	b93c      	cbnz	r4, 8014de6 <_Bfree+0x1a>
 8014dd6:	2010      	movs	r0, #16
 8014dd8:	f7fe f8f0 	bl	8012fbc <malloc>
 8014ddc:	6270      	str	r0, [r6, #36]	; 0x24
 8014dde:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8014de2:	6004      	str	r4, [r0, #0]
 8014de4:	60c4      	str	r4, [r0, #12]
 8014de6:	b13d      	cbz	r5, 8014df8 <_Bfree+0x2c>
 8014de8:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8014dea:	686a      	ldr	r2, [r5, #4]
 8014dec:	68db      	ldr	r3, [r3, #12]
 8014dee:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8014df2:	6029      	str	r1, [r5, #0]
 8014df4:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8014df8:	bd70      	pop	{r4, r5, r6, pc}

08014dfa <__multadd>:
 8014dfa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014dfe:	690d      	ldr	r5, [r1, #16]
 8014e00:	461f      	mov	r7, r3
 8014e02:	4606      	mov	r6, r0
 8014e04:	460c      	mov	r4, r1
 8014e06:	f101 0c14 	add.w	ip, r1, #20
 8014e0a:	2300      	movs	r3, #0
 8014e0c:	f8dc 0000 	ldr.w	r0, [ip]
 8014e10:	b281      	uxth	r1, r0
 8014e12:	fb02 7101 	mla	r1, r2, r1, r7
 8014e16:	0c0f      	lsrs	r7, r1, #16
 8014e18:	0c00      	lsrs	r0, r0, #16
 8014e1a:	fb02 7000 	mla	r0, r2, r0, r7
 8014e1e:	b289      	uxth	r1, r1
 8014e20:	3301      	adds	r3, #1
 8014e22:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8014e26:	429d      	cmp	r5, r3
 8014e28:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8014e2c:	f84c 1b04 	str.w	r1, [ip], #4
 8014e30:	dcec      	bgt.n	8014e0c <__multadd+0x12>
 8014e32:	b1d7      	cbz	r7, 8014e6a <__multadd+0x70>
 8014e34:	68a3      	ldr	r3, [r4, #8]
 8014e36:	42ab      	cmp	r3, r5
 8014e38:	dc12      	bgt.n	8014e60 <__multadd+0x66>
 8014e3a:	6861      	ldr	r1, [r4, #4]
 8014e3c:	4630      	mov	r0, r6
 8014e3e:	3101      	adds	r1, #1
 8014e40:	f7ff ff90 	bl	8014d64 <_Balloc>
 8014e44:	6922      	ldr	r2, [r4, #16]
 8014e46:	3202      	adds	r2, #2
 8014e48:	f104 010c 	add.w	r1, r4, #12
 8014e4c:	4680      	mov	r8, r0
 8014e4e:	0092      	lsls	r2, r2, #2
 8014e50:	300c      	adds	r0, #12
 8014e52:	f7fe f8bb 	bl	8012fcc <memcpy>
 8014e56:	4621      	mov	r1, r4
 8014e58:	4630      	mov	r0, r6
 8014e5a:	f7ff ffb7 	bl	8014dcc <_Bfree>
 8014e5e:	4644      	mov	r4, r8
 8014e60:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8014e64:	3501      	adds	r5, #1
 8014e66:	615f      	str	r7, [r3, #20]
 8014e68:	6125      	str	r5, [r4, #16]
 8014e6a:	4620      	mov	r0, r4
 8014e6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08014e70 <__hi0bits>:
 8014e70:	0c02      	lsrs	r2, r0, #16
 8014e72:	0412      	lsls	r2, r2, #16
 8014e74:	4603      	mov	r3, r0
 8014e76:	b9b2      	cbnz	r2, 8014ea6 <__hi0bits+0x36>
 8014e78:	0403      	lsls	r3, r0, #16
 8014e7a:	2010      	movs	r0, #16
 8014e7c:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8014e80:	bf04      	itt	eq
 8014e82:	021b      	lsleq	r3, r3, #8
 8014e84:	3008      	addeq	r0, #8
 8014e86:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8014e8a:	bf04      	itt	eq
 8014e8c:	011b      	lsleq	r3, r3, #4
 8014e8e:	3004      	addeq	r0, #4
 8014e90:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8014e94:	bf04      	itt	eq
 8014e96:	009b      	lsleq	r3, r3, #2
 8014e98:	3002      	addeq	r0, #2
 8014e9a:	2b00      	cmp	r3, #0
 8014e9c:	db06      	blt.n	8014eac <__hi0bits+0x3c>
 8014e9e:	005b      	lsls	r3, r3, #1
 8014ea0:	d503      	bpl.n	8014eaa <__hi0bits+0x3a>
 8014ea2:	3001      	adds	r0, #1
 8014ea4:	4770      	bx	lr
 8014ea6:	2000      	movs	r0, #0
 8014ea8:	e7e8      	b.n	8014e7c <__hi0bits+0xc>
 8014eaa:	2020      	movs	r0, #32
 8014eac:	4770      	bx	lr

08014eae <__lo0bits>:
 8014eae:	6803      	ldr	r3, [r0, #0]
 8014eb0:	f013 0207 	ands.w	r2, r3, #7
 8014eb4:	4601      	mov	r1, r0
 8014eb6:	d00b      	beq.n	8014ed0 <__lo0bits+0x22>
 8014eb8:	07da      	lsls	r2, r3, #31
 8014eba:	d423      	bmi.n	8014f04 <__lo0bits+0x56>
 8014ebc:	0798      	lsls	r0, r3, #30
 8014ebe:	bf49      	itett	mi
 8014ec0:	085b      	lsrmi	r3, r3, #1
 8014ec2:	089b      	lsrpl	r3, r3, #2
 8014ec4:	2001      	movmi	r0, #1
 8014ec6:	600b      	strmi	r3, [r1, #0]
 8014ec8:	bf5c      	itt	pl
 8014eca:	600b      	strpl	r3, [r1, #0]
 8014ecc:	2002      	movpl	r0, #2
 8014ece:	4770      	bx	lr
 8014ed0:	b298      	uxth	r0, r3
 8014ed2:	b9a8      	cbnz	r0, 8014f00 <__lo0bits+0x52>
 8014ed4:	0c1b      	lsrs	r3, r3, #16
 8014ed6:	2010      	movs	r0, #16
 8014ed8:	f013 0fff 	tst.w	r3, #255	; 0xff
 8014edc:	bf04      	itt	eq
 8014ede:	0a1b      	lsreq	r3, r3, #8
 8014ee0:	3008      	addeq	r0, #8
 8014ee2:	071a      	lsls	r2, r3, #28
 8014ee4:	bf04      	itt	eq
 8014ee6:	091b      	lsreq	r3, r3, #4
 8014ee8:	3004      	addeq	r0, #4
 8014eea:	079a      	lsls	r2, r3, #30
 8014eec:	bf04      	itt	eq
 8014eee:	089b      	lsreq	r3, r3, #2
 8014ef0:	3002      	addeq	r0, #2
 8014ef2:	07da      	lsls	r2, r3, #31
 8014ef4:	d402      	bmi.n	8014efc <__lo0bits+0x4e>
 8014ef6:	085b      	lsrs	r3, r3, #1
 8014ef8:	d006      	beq.n	8014f08 <__lo0bits+0x5a>
 8014efa:	3001      	adds	r0, #1
 8014efc:	600b      	str	r3, [r1, #0]
 8014efe:	4770      	bx	lr
 8014f00:	4610      	mov	r0, r2
 8014f02:	e7e9      	b.n	8014ed8 <__lo0bits+0x2a>
 8014f04:	2000      	movs	r0, #0
 8014f06:	4770      	bx	lr
 8014f08:	2020      	movs	r0, #32
 8014f0a:	4770      	bx	lr

08014f0c <__i2b>:
 8014f0c:	b510      	push	{r4, lr}
 8014f0e:	460c      	mov	r4, r1
 8014f10:	2101      	movs	r1, #1
 8014f12:	f7ff ff27 	bl	8014d64 <_Balloc>
 8014f16:	2201      	movs	r2, #1
 8014f18:	6144      	str	r4, [r0, #20]
 8014f1a:	6102      	str	r2, [r0, #16]
 8014f1c:	bd10      	pop	{r4, pc}

08014f1e <__multiply>:
 8014f1e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014f22:	4614      	mov	r4, r2
 8014f24:	690a      	ldr	r2, [r1, #16]
 8014f26:	6923      	ldr	r3, [r4, #16]
 8014f28:	429a      	cmp	r2, r3
 8014f2a:	bfb8      	it	lt
 8014f2c:	460b      	movlt	r3, r1
 8014f2e:	4688      	mov	r8, r1
 8014f30:	bfbc      	itt	lt
 8014f32:	46a0      	movlt	r8, r4
 8014f34:	461c      	movlt	r4, r3
 8014f36:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8014f3a:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8014f3e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8014f42:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8014f46:	eb07 0609 	add.w	r6, r7, r9
 8014f4a:	42b3      	cmp	r3, r6
 8014f4c:	bfb8      	it	lt
 8014f4e:	3101      	addlt	r1, #1
 8014f50:	f7ff ff08 	bl	8014d64 <_Balloc>
 8014f54:	f100 0514 	add.w	r5, r0, #20
 8014f58:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8014f5c:	462b      	mov	r3, r5
 8014f5e:	2200      	movs	r2, #0
 8014f60:	4573      	cmp	r3, lr
 8014f62:	d316      	bcc.n	8014f92 <__multiply+0x74>
 8014f64:	f104 0214 	add.w	r2, r4, #20
 8014f68:	f108 0114 	add.w	r1, r8, #20
 8014f6c:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8014f70:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8014f74:	9300      	str	r3, [sp, #0]
 8014f76:	9b00      	ldr	r3, [sp, #0]
 8014f78:	9201      	str	r2, [sp, #4]
 8014f7a:	4293      	cmp	r3, r2
 8014f7c:	d80c      	bhi.n	8014f98 <__multiply+0x7a>
 8014f7e:	2e00      	cmp	r6, #0
 8014f80:	dd03      	ble.n	8014f8a <__multiply+0x6c>
 8014f82:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8014f86:	2b00      	cmp	r3, #0
 8014f88:	d05d      	beq.n	8015046 <__multiply+0x128>
 8014f8a:	6106      	str	r6, [r0, #16]
 8014f8c:	b003      	add	sp, #12
 8014f8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014f92:	f843 2b04 	str.w	r2, [r3], #4
 8014f96:	e7e3      	b.n	8014f60 <__multiply+0x42>
 8014f98:	f8b2 b000 	ldrh.w	fp, [r2]
 8014f9c:	f1bb 0f00 	cmp.w	fp, #0
 8014fa0:	d023      	beq.n	8014fea <__multiply+0xcc>
 8014fa2:	4689      	mov	r9, r1
 8014fa4:	46ac      	mov	ip, r5
 8014fa6:	f04f 0800 	mov.w	r8, #0
 8014faa:	f859 4b04 	ldr.w	r4, [r9], #4
 8014fae:	f8dc a000 	ldr.w	sl, [ip]
 8014fb2:	b2a3      	uxth	r3, r4
 8014fb4:	fa1f fa8a 	uxth.w	sl, sl
 8014fb8:	fb0b a303 	mla	r3, fp, r3, sl
 8014fbc:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8014fc0:	f8dc 4000 	ldr.w	r4, [ip]
 8014fc4:	4443      	add	r3, r8
 8014fc6:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8014fca:	fb0b 840a 	mla	r4, fp, sl, r8
 8014fce:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8014fd2:	46e2      	mov	sl, ip
 8014fd4:	b29b      	uxth	r3, r3
 8014fd6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8014fda:	454f      	cmp	r7, r9
 8014fdc:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8014fe0:	f84a 3b04 	str.w	r3, [sl], #4
 8014fe4:	d82b      	bhi.n	801503e <__multiply+0x120>
 8014fe6:	f8cc 8004 	str.w	r8, [ip, #4]
 8014fea:	9b01      	ldr	r3, [sp, #4]
 8014fec:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8014ff0:	3204      	adds	r2, #4
 8014ff2:	f1ba 0f00 	cmp.w	sl, #0
 8014ff6:	d020      	beq.n	801503a <__multiply+0x11c>
 8014ff8:	682b      	ldr	r3, [r5, #0]
 8014ffa:	4689      	mov	r9, r1
 8014ffc:	46a8      	mov	r8, r5
 8014ffe:	f04f 0b00 	mov.w	fp, #0
 8015002:	f8b9 c000 	ldrh.w	ip, [r9]
 8015006:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 801500a:	fb0a 440c 	mla	r4, sl, ip, r4
 801500e:	445c      	add	r4, fp
 8015010:	46c4      	mov	ip, r8
 8015012:	b29b      	uxth	r3, r3
 8015014:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8015018:	f84c 3b04 	str.w	r3, [ip], #4
 801501c:	f859 3b04 	ldr.w	r3, [r9], #4
 8015020:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8015024:	0c1b      	lsrs	r3, r3, #16
 8015026:	fb0a b303 	mla	r3, sl, r3, fp
 801502a:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 801502e:	454f      	cmp	r7, r9
 8015030:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8015034:	d805      	bhi.n	8015042 <__multiply+0x124>
 8015036:	f8c8 3004 	str.w	r3, [r8, #4]
 801503a:	3504      	adds	r5, #4
 801503c:	e79b      	b.n	8014f76 <__multiply+0x58>
 801503e:	46d4      	mov	ip, sl
 8015040:	e7b3      	b.n	8014faa <__multiply+0x8c>
 8015042:	46e0      	mov	r8, ip
 8015044:	e7dd      	b.n	8015002 <__multiply+0xe4>
 8015046:	3e01      	subs	r6, #1
 8015048:	e799      	b.n	8014f7e <__multiply+0x60>
	...

0801504c <__pow5mult>:
 801504c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015050:	4615      	mov	r5, r2
 8015052:	f012 0203 	ands.w	r2, r2, #3
 8015056:	4606      	mov	r6, r0
 8015058:	460f      	mov	r7, r1
 801505a:	d007      	beq.n	801506c <__pow5mult+0x20>
 801505c:	3a01      	subs	r2, #1
 801505e:	4c21      	ldr	r4, [pc, #132]	; (80150e4 <__pow5mult+0x98>)
 8015060:	2300      	movs	r3, #0
 8015062:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8015066:	f7ff fec8 	bl	8014dfa <__multadd>
 801506a:	4607      	mov	r7, r0
 801506c:	10ad      	asrs	r5, r5, #2
 801506e:	d035      	beq.n	80150dc <__pow5mult+0x90>
 8015070:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8015072:	b93c      	cbnz	r4, 8015084 <__pow5mult+0x38>
 8015074:	2010      	movs	r0, #16
 8015076:	f7fd ffa1 	bl	8012fbc <malloc>
 801507a:	6270      	str	r0, [r6, #36]	; 0x24
 801507c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8015080:	6004      	str	r4, [r0, #0]
 8015082:	60c4      	str	r4, [r0, #12]
 8015084:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8015088:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801508c:	b94c      	cbnz	r4, 80150a2 <__pow5mult+0x56>
 801508e:	f240 2171 	movw	r1, #625	; 0x271
 8015092:	4630      	mov	r0, r6
 8015094:	f7ff ff3a 	bl	8014f0c <__i2b>
 8015098:	2300      	movs	r3, #0
 801509a:	f8c8 0008 	str.w	r0, [r8, #8]
 801509e:	4604      	mov	r4, r0
 80150a0:	6003      	str	r3, [r0, #0]
 80150a2:	f04f 0800 	mov.w	r8, #0
 80150a6:	07eb      	lsls	r3, r5, #31
 80150a8:	d50a      	bpl.n	80150c0 <__pow5mult+0x74>
 80150aa:	4639      	mov	r1, r7
 80150ac:	4622      	mov	r2, r4
 80150ae:	4630      	mov	r0, r6
 80150b0:	f7ff ff35 	bl	8014f1e <__multiply>
 80150b4:	4639      	mov	r1, r7
 80150b6:	4681      	mov	r9, r0
 80150b8:	4630      	mov	r0, r6
 80150ba:	f7ff fe87 	bl	8014dcc <_Bfree>
 80150be:	464f      	mov	r7, r9
 80150c0:	106d      	asrs	r5, r5, #1
 80150c2:	d00b      	beq.n	80150dc <__pow5mult+0x90>
 80150c4:	6820      	ldr	r0, [r4, #0]
 80150c6:	b938      	cbnz	r0, 80150d8 <__pow5mult+0x8c>
 80150c8:	4622      	mov	r2, r4
 80150ca:	4621      	mov	r1, r4
 80150cc:	4630      	mov	r0, r6
 80150ce:	f7ff ff26 	bl	8014f1e <__multiply>
 80150d2:	6020      	str	r0, [r4, #0]
 80150d4:	f8c0 8000 	str.w	r8, [r0]
 80150d8:	4604      	mov	r4, r0
 80150da:	e7e4      	b.n	80150a6 <__pow5mult+0x5a>
 80150dc:	4638      	mov	r0, r7
 80150de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80150e2:	bf00      	nop
 80150e4:	080179d0 	.word	0x080179d0

080150e8 <__lshift>:
 80150e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80150ec:	460c      	mov	r4, r1
 80150ee:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80150f2:	6923      	ldr	r3, [r4, #16]
 80150f4:	6849      	ldr	r1, [r1, #4]
 80150f6:	eb0a 0903 	add.w	r9, sl, r3
 80150fa:	68a3      	ldr	r3, [r4, #8]
 80150fc:	4607      	mov	r7, r0
 80150fe:	4616      	mov	r6, r2
 8015100:	f109 0501 	add.w	r5, r9, #1
 8015104:	42ab      	cmp	r3, r5
 8015106:	db32      	blt.n	801516e <__lshift+0x86>
 8015108:	4638      	mov	r0, r7
 801510a:	f7ff fe2b 	bl	8014d64 <_Balloc>
 801510e:	2300      	movs	r3, #0
 8015110:	4680      	mov	r8, r0
 8015112:	f100 0114 	add.w	r1, r0, #20
 8015116:	461a      	mov	r2, r3
 8015118:	4553      	cmp	r3, sl
 801511a:	db2b      	blt.n	8015174 <__lshift+0x8c>
 801511c:	6920      	ldr	r0, [r4, #16]
 801511e:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8015122:	f104 0314 	add.w	r3, r4, #20
 8015126:	f016 021f 	ands.w	r2, r6, #31
 801512a:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801512e:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8015132:	d025      	beq.n	8015180 <__lshift+0x98>
 8015134:	f1c2 0e20 	rsb	lr, r2, #32
 8015138:	2000      	movs	r0, #0
 801513a:	681e      	ldr	r6, [r3, #0]
 801513c:	468a      	mov	sl, r1
 801513e:	4096      	lsls	r6, r2
 8015140:	4330      	orrs	r0, r6
 8015142:	f84a 0b04 	str.w	r0, [sl], #4
 8015146:	f853 0b04 	ldr.w	r0, [r3], #4
 801514a:	459c      	cmp	ip, r3
 801514c:	fa20 f00e 	lsr.w	r0, r0, lr
 8015150:	d814      	bhi.n	801517c <__lshift+0x94>
 8015152:	6048      	str	r0, [r1, #4]
 8015154:	b108      	cbz	r0, 801515a <__lshift+0x72>
 8015156:	f109 0502 	add.w	r5, r9, #2
 801515a:	3d01      	subs	r5, #1
 801515c:	4638      	mov	r0, r7
 801515e:	f8c8 5010 	str.w	r5, [r8, #16]
 8015162:	4621      	mov	r1, r4
 8015164:	f7ff fe32 	bl	8014dcc <_Bfree>
 8015168:	4640      	mov	r0, r8
 801516a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801516e:	3101      	adds	r1, #1
 8015170:	005b      	lsls	r3, r3, #1
 8015172:	e7c7      	b.n	8015104 <__lshift+0x1c>
 8015174:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8015178:	3301      	adds	r3, #1
 801517a:	e7cd      	b.n	8015118 <__lshift+0x30>
 801517c:	4651      	mov	r1, sl
 801517e:	e7dc      	b.n	801513a <__lshift+0x52>
 8015180:	3904      	subs	r1, #4
 8015182:	f853 2b04 	ldr.w	r2, [r3], #4
 8015186:	f841 2f04 	str.w	r2, [r1, #4]!
 801518a:	459c      	cmp	ip, r3
 801518c:	d8f9      	bhi.n	8015182 <__lshift+0x9a>
 801518e:	e7e4      	b.n	801515a <__lshift+0x72>

08015190 <__mcmp>:
 8015190:	6903      	ldr	r3, [r0, #16]
 8015192:	690a      	ldr	r2, [r1, #16]
 8015194:	1a9b      	subs	r3, r3, r2
 8015196:	b530      	push	{r4, r5, lr}
 8015198:	d10c      	bne.n	80151b4 <__mcmp+0x24>
 801519a:	0092      	lsls	r2, r2, #2
 801519c:	3014      	adds	r0, #20
 801519e:	3114      	adds	r1, #20
 80151a0:	1884      	adds	r4, r0, r2
 80151a2:	4411      	add	r1, r2
 80151a4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80151a8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80151ac:	4295      	cmp	r5, r2
 80151ae:	d003      	beq.n	80151b8 <__mcmp+0x28>
 80151b0:	d305      	bcc.n	80151be <__mcmp+0x2e>
 80151b2:	2301      	movs	r3, #1
 80151b4:	4618      	mov	r0, r3
 80151b6:	bd30      	pop	{r4, r5, pc}
 80151b8:	42a0      	cmp	r0, r4
 80151ba:	d3f3      	bcc.n	80151a4 <__mcmp+0x14>
 80151bc:	e7fa      	b.n	80151b4 <__mcmp+0x24>
 80151be:	f04f 33ff 	mov.w	r3, #4294967295
 80151c2:	e7f7      	b.n	80151b4 <__mcmp+0x24>

080151c4 <__mdiff>:
 80151c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80151c8:	460d      	mov	r5, r1
 80151ca:	4607      	mov	r7, r0
 80151cc:	4611      	mov	r1, r2
 80151ce:	4628      	mov	r0, r5
 80151d0:	4614      	mov	r4, r2
 80151d2:	f7ff ffdd 	bl	8015190 <__mcmp>
 80151d6:	1e06      	subs	r6, r0, #0
 80151d8:	d108      	bne.n	80151ec <__mdiff+0x28>
 80151da:	4631      	mov	r1, r6
 80151dc:	4638      	mov	r0, r7
 80151de:	f7ff fdc1 	bl	8014d64 <_Balloc>
 80151e2:	2301      	movs	r3, #1
 80151e4:	e9c0 3604 	strd	r3, r6, [r0, #16]
 80151e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80151ec:	bfa4      	itt	ge
 80151ee:	4623      	movge	r3, r4
 80151f0:	462c      	movge	r4, r5
 80151f2:	4638      	mov	r0, r7
 80151f4:	6861      	ldr	r1, [r4, #4]
 80151f6:	bfa6      	itte	ge
 80151f8:	461d      	movge	r5, r3
 80151fa:	2600      	movge	r6, #0
 80151fc:	2601      	movlt	r6, #1
 80151fe:	f7ff fdb1 	bl	8014d64 <_Balloc>
 8015202:	692b      	ldr	r3, [r5, #16]
 8015204:	60c6      	str	r6, [r0, #12]
 8015206:	6926      	ldr	r6, [r4, #16]
 8015208:	f105 0914 	add.w	r9, r5, #20
 801520c:	f104 0214 	add.w	r2, r4, #20
 8015210:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8015214:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8015218:	f100 0514 	add.w	r5, r0, #20
 801521c:	f04f 0e00 	mov.w	lr, #0
 8015220:	f852 ab04 	ldr.w	sl, [r2], #4
 8015224:	f859 4b04 	ldr.w	r4, [r9], #4
 8015228:	fa1e f18a 	uxtah	r1, lr, sl
 801522c:	b2a3      	uxth	r3, r4
 801522e:	1ac9      	subs	r1, r1, r3
 8015230:	0c23      	lsrs	r3, r4, #16
 8015232:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 8015236:	eb03 4321 	add.w	r3, r3, r1, asr #16
 801523a:	b289      	uxth	r1, r1
 801523c:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8015240:	45c8      	cmp	r8, r9
 8015242:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8015246:	4694      	mov	ip, r2
 8015248:	f845 3b04 	str.w	r3, [r5], #4
 801524c:	d8e8      	bhi.n	8015220 <__mdiff+0x5c>
 801524e:	45bc      	cmp	ip, r7
 8015250:	d304      	bcc.n	801525c <__mdiff+0x98>
 8015252:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8015256:	b183      	cbz	r3, 801527a <__mdiff+0xb6>
 8015258:	6106      	str	r6, [r0, #16]
 801525a:	e7c5      	b.n	80151e8 <__mdiff+0x24>
 801525c:	f85c 1b04 	ldr.w	r1, [ip], #4
 8015260:	fa1e f381 	uxtah	r3, lr, r1
 8015264:	141a      	asrs	r2, r3, #16
 8015266:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 801526a:	b29b      	uxth	r3, r3
 801526c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8015270:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8015274:	f845 3b04 	str.w	r3, [r5], #4
 8015278:	e7e9      	b.n	801524e <__mdiff+0x8a>
 801527a:	3e01      	subs	r6, #1
 801527c:	e7e9      	b.n	8015252 <__mdiff+0x8e>

0801527e <__d2b>:
 801527e:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8015282:	460e      	mov	r6, r1
 8015284:	2101      	movs	r1, #1
 8015286:	ec59 8b10 	vmov	r8, r9, d0
 801528a:	4615      	mov	r5, r2
 801528c:	f7ff fd6a 	bl	8014d64 <_Balloc>
 8015290:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8015294:	4607      	mov	r7, r0
 8015296:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801529a:	bb34      	cbnz	r4, 80152ea <__d2b+0x6c>
 801529c:	9301      	str	r3, [sp, #4]
 801529e:	f1b8 0300 	subs.w	r3, r8, #0
 80152a2:	d027      	beq.n	80152f4 <__d2b+0x76>
 80152a4:	a802      	add	r0, sp, #8
 80152a6:	f840 3d08 	str.w	r3, [r0, #-8]!
 80152aa:	f7ff fe00 	bl	8014eae <__lo0bits>
 80152ae:	9900      	ldr	r1, [sp, #0]
 80152b0:	b1f0      	cbz	r0, 80152f0 <__d2b+0x72>
 80152b2:	9a01      	ldr	r2, [sp, #4]
 80152b4:	f1c0 0320 	rsb	r3, r0, #32
 80152b8:	fa02 f303 	lsl.w	r3, r2, r3
 80152bc:	430b      	orrs	r3, r1
 80152be:	40c2      	lsrs	r2, r0
 80152c0:	617b      	str	r3, [r7, #20]
 80152c2:	9201      	str	r2, [sp, #4]
 80152c4:	9b01      	ldr	r3, [sp, #4]
 80152c6:	61bb      	str	r3, [r7, #24]
 80152c8:	2b00      	cmp	r3, #0
 80152ca:	bf14      	ite	ne
 80152cc:	2102      	movne	r1, #2
 80152ce:	2101      	moveq	r1, #1
 80152d0:	6139      	str	r1, [r7, #16]
 80152d2:	b1c4      	cbz	r4, 8015306 <__d2b+0x88>
 80152d4:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 80152d8:	4404      	add	r4, r0
 80152da:	6034      	str	r4, [r6, #0]
 80152dc:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80152e0:	6028      	str	r0, [r5, #0]
 80152e2:	4638      	mov	r0, r7
 80152e4:	b003      	add	sp, #12
 80152e6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80152ea:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80152ee:	e7d5      	b.n	801529c <__d2b+0x1e>
 80152f0:	6179      	str	r1, [r7, #20]
 80152f2:	e7e7      	b.n	80152c4 <__d2b+0x46>
 80152f4:	a801      	add	r0, sp, #4
 80152f6:	f7ff fdda 	bl	8014eae <__lo0bits>
 80152fa:	9b01      	ldr	r3, [sp, #4]
 80152fc:	617b      	str	r3, [r7, #20]
 80152fe:	2101      	movs	r1, #1
 8015300:	6139      	str	r1, [r7, #16]
 8015302:	3020      	adds	r0, #32
 8015304:	e7e5      	b.n	80152d2 <__d2b+0x54>
 8015306:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 801530a:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 801530e:	6030      	str	r0, [r6, #0]
 8015310:	6918      	ldr	r0, [r3, #16]
 8015312:	f7ff fdad 	bl	8014e70 <__hi0bits>
 8015316:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 801531a:	e7e1      	b.n	80152e0 <__d2b+0x62>

0801531c <_calloc_r>:
 801531c:	b538      	push	{r3, r4, r5, lr}
 801531e:	fb02 f401 	mul.w	r4, r2, r1
 8015322:	4621      	mov	r1, r4
 8015324:	f7fd feb4 	bl	8013090 <_malloc_r>
 8015328:	4605      	mov	r5, r0
 801532a:	b118      	cbz	r0, 8015334 <_calloc_r+0x18>
 801532c:	4622      	mov	r2, r4
 801532e:	2100      	movs	r1, #0
 8015330:	f7fd fe57 	bl	8012fe2 <memset>
 8015334:	4628      	mov	r0, r5
 8015336:	bd38      	pop	{r3, r4, r5, pc}

08015338 <__ssputs_r>:
 8015338:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801533c:	688e      	ldr	r6, [r1, #8]
 801533e:	429e      	cmp	r6, r3
 8015340:	4682      	mov	sl, r0
 8015342:	460c      	mov	r4, r1
 8015344:	4690      	mov	r8, r2
 8015346:	4699      	mov	r9, r3
 8015348:	d837      	bhi.n	80153ba <__ssputs_r+0x82>
 801534a:	898a      	ldrh	r2, [r1, #12]
 801534c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8015350:	d031      	beq.n	80153b6 <__ssputs_r+0x7e>
 8015352:	6825      	ldr	r5, [r4, #0]
 8015354:	6909      	ldr	r1, [r1, #16]
 8015356:	1a6f      	subs	r7, r5, r1
 8015358:	6965      	ldr	r5, [r4, #20]
 801535a:	2302      	movs	r3, #2
 801535c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8015360:	fb95 f5f3 	sdiv	r5, r5, r3
 8015364:	f109 0301 	add.w	r3, r9, #1
 8015368:	443b      	add	r3, r7
 801536a:	429d      	cmp	r5, r3
 801536c:	bf38      	it	cc
 801536e:	461d      	movcc	r5, r3
 8015370:	0553      	lsls	r3, r2, #21
 8015372:	d530      	bpl.n	80153d6 <__ssputs_r+0x9e>
 8015374:	4629      	mov	r1, r5
 8015376:	f7fd fe8b 	bl	8013090 <_malloc_r>
 801537a:	4606      	mov	r6, r0
 801537c:	b950      	cbnz	r0, 8015394 <__ssputs_r+0x5c>
 801537e:	230c      	movs	r3, #12
 8015380:	f8ca 3000 	str.w	r3, [sl]
 8015384:	89a3      	ldrh	r3, [r4, #12]
 8015386:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801538a:	81a3      	strh	r3, [r4, #12]
 801538c:	f04f 30ff 	mov.w	r0, #4294967295
 8015390:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015394:	463a      	mov	r2, r7
 8015396:	6921      	ldr	r1, [r4, #16]
 8015398:	f7fd fe18 	bl	8012fcc <memcpy>
 801539c:	89a3      	ldrh	r3, [r4, #12]
 801539e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80153a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80153a6:	81a3      	strh	r3, [r4, #12]
 80153a8:	6126      	str	r6, [r4, #16]
 80153aa:	6165      	str	r5, [r4, #20]
 80153ac:	443e      	add	r6, r7
 80153ae:	1bed      	subs	r5, r5, r7
 80153b0:	6026      	str	r6, [r4, #0]
 80153b2:	60a5      	str	r5, [r4, #8]
 80153b4:	464e      	mov	r6, r9
 80153b6:	454e      	cmp	r6, r9
 80153b8:	d900      	bls.n	80153bc <__ssputs_r+0x84>
 80153ba:	464e      	mov	r6, r9
 80153bc:	4632      	mov	r2, r6
 80153be:	4641      	mov	r1, r8
 80153c0:	6820      	ldr	r0, [r4, #0]
 80153c2:	f000 faf7 	bl	80159b4 <memmove>
 80153c6:	68a3      	ldr	r3, [r4, #8]
 80153c8:	1b9b      	subs	r3, r3, r6
 80153ca:	60a3      	str	r3, [r4, #8]
 80153cc:	6823      	ldr	r3, [r4, #0]
 80153ce:	441e      	add	r6, r3
 80153d0:	6026      	str	r6, [r4, #0]
 80153d2:	2000      	movs	r0, #0
 80153d4:	e7dc      	b.n	8015390 <__ssputs_r+0x58>
 80153d6:	462a      	mov	r2, r5
 80153d8:	f000 fb05 	bl	80159e6 <_realloc_r>
 80153dc:	4606      	mov	r6, r0
 80153de:	2800      	cmp	r0, #0
 80153e0:	d1e2      	bne.n	80153a8 <__ssputs_r+0x70>
 80153e2:	6921      	ldr	r1, [r4, #16]
 80153e4:	4650      	mov	r0, sl
 80153e6:	f7fd fe05 	bl	8012ff4 <_free_r>
 80153ea:	e7c8      	b.n	801537e <__ssputs_r+0x46>

080153ec <_svfiprintf_r>:
 80153ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80153f0:	461d      	mov	r5, r3
 80153f2:	898b      	ldrh	r3, [r1, #12]
 80153f4:	061f      	lsls	r7, r3, #24
 80153f6:	b09d      	sub	sp, #116	; 0x74
 80153f8:	4680      	mov	r8, r0
 80153fa:	460c      	mov	r4, r1
 80153fc:	4616      	mov	r6, r2
 80153fe:	d50f      	bpl.n	8015420 <_svfiprintf_r+0x34>
 8015400:	690b      	ldr	r3, [r1, #16]
 8015402:	b96b      	cbnz	r3, 8015420 <_svfiprintf_r+0x34>
 8015404:	2140      	movs	r1, #64	; 0x40
 8015406:	f7fd fe43 	bl	8013090 <_malloc_r>
 801540a:	6020      	str	r0, [r4, #0]
 801540c:	6120      	str	r0, [r4, #16]
 801540e:	b928      	cbnz	r0, 801541c <_svfiprintf_r+0x30>
 8015410:	230c      	movs	r3, #12
 8015412:	f8c8 3000 	str.w	r3, [r8]
 8015416:	f04f 30ff 	mov.w	r0, #4294967295
 801541a:	e0c8      	b.n	80155ae <_svfiprintf_r+0x1c2>
 801541c:	2340      	movs	r3, #64	; 0x40
 801541e:	6163      	str	r3, [r4, #20]
 8015420:	2300      	movs	r3, #0
 8015422:	9309      	str	r3, [sp, #36]	; 0x24
 8015424:	2320      	movs	r3, #32
 8015426:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801542a:	2330      	movs	r3, #48	; 0x30
 801542c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8015430:	9503      	str	r5, [sp, #12]
 8015432:	f04f 0b01 	mov.w	fp, #1
 8015436:	4637      	mov	r7, r6
 8015438:	463d      	mov	r5, r7
 801543a:	f815 3b01 	ldrb.w	r3, [r5], #1
 801543e:	b10b      	cbz	r3, 8015444 <_svfiprintf_r+0x58>
 8015440:	2b25      	cmp	r3, #37	; 0x25
 8015442:	d13e      	bne.n	80154c2 <_svfiprintf_r+0xd6>
 8015444:	ebb7 0a06 	subs.w	sl, r7, r6
 8015448:	d00b      	beq.n	8015462 <_svfiprintf_r+0x76>
 801544a:	4653      	mov	r3, sl
 801544c:	4632      	mov	r2, r6
 801544e:	4621      	mov	r1, r4
 8015450:	4640      	mov	r0, r8
 8015452:	f7ff ff71 	bl	8015338 <__ssputs_r>
 8015456:	3001      	adds	r0, #1
 8015458:	f000 80a4 	beq.w	80155a4 <_svfiprintf_r+0x1b8>
 801545c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801545e:	4453      	add	r3, sl
 8015460:	9309      	str	r3, [sp, #36]	; 0x24
 8015462:	783b      	ldrb	r3, [r7, #0]
 8015464:	2b00      	cmp	r3, #0
 8015466:	f000 809d 	beq.w	80155a4 <_svfiprintf_r+0x1b8>
 801546a:	2300      	movs	r3, #0
 801546c:	f04f 32ff 	mov.w	r2, #4294967295
 8015470:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8015474:	9304      	str	r3, [sp, #16]
 8015476:	9307      	str	r3, [sp, #28]
 8015478:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801547c:	931a      	str	r3, [sp, #104]	; 0x68
 801547e:	462f      	mov	r7, r5
 8015480:	2205      	movs	r2, #5
 8015482:	f817 1b01 	ldrb.w	r1, [r7], #1
 8015486:	4850      	ldr	r0, [pc, #320]	; (80155c8 <_svfiprintf_r+0x1dc>)
 8015488:	f7ea fe82 	bl	8000190 <memchr>
 801548c:	9b04      	ldr	r3, [sp, #16]
 801548e:	b9d0      	cbnz	r0, 80154c6 <_svfiprintf_r+0xda>
 8015490:	06d9      	lsls	r1, r3, #27
 8015492:	bf44      	itt	mi
 8015494:	2220      	movmi	r2, #32
 8015496:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 801549a:	071a      	lsls	r2, r3, #28
 801549c:	bf44      	itt	mi
 801549e:	222b      	movmi	r2, #43	; 0x2b
 80154a0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80154a4:	782a      	ldrb	r2, [r5, #0]
 80154a6:	2a2a      	cmp	r2, #42	; 0x2a
 80154a8:	d015      	beq.n	80154d6 <_svfiprintf_r+0xea>
 80154aa:	9a07      	ldr	r2, [sp, #28]
 80154ac:	462f      	mov	r7, r5
 80154ae:	2000      	movs	r0, #0
 80154b0:	250a      	movs	r5, #10
 80154b2:	4639      	mov	r1, r7
 80154b4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80154b8:	3b30      	subs	r3, #48	; 0x30
 80154ba:	2b09      	cmp	r3, #9
 80154bc:	d94d      	bls.n	801555a <_svfiprintf_r+0x16e>
 80154be:	b1b8      	cbz	r0, 80154f0 <_svfiprintf_r+0x104>
 80154c0:	e00f      	b.n	80154e2 <_svfiprintf_r+0xf6>
 80154c2:	462f      	mov	r7, r5
 80154c4:	e7b8      	b.n	8015438 <_svfiprintf_r+0x4c>
 80154c6:	4a40      	ldr	r2, [pc, #256]	; (80155c8 <_svfiprintf_r+0x1dc>)
 80154c8:	1a80      	subs	r0, r0, r2
 80154ca:	fa0b f000 	lsl.w	r0, fp, r0
 80154ce:	4318      	orrs	r0, r3
 80154d0:	9004      	str	r0, [sp, #16]
 80154d2:	463d      	mov	r5, r7
 80154d4:	e7d3      	b.n	801547e <_svfiprintf_r+0x92>
 80154d6:	9a03      	ldr	r2, [sp, #12]
 80154d8:	1d11      	adds	r1, r2, #4
 80154da:	6812      	ldr	r2, [r2, #0]
 80154dc:	9103      	str	r1, [sp, #12]
 80154de:	2a00      	cmp	r2, #0
 80154e0:	db01      	blt.n	80154e6 <_svfiprintf_r+0xfa>
 80154e2:	9207      	str	r2, [sp, #28]
 80154e4:	e004      	b.n	80154f0 <_svfiprintf_r+0x104>
 80154e6:	4252      	negs	r2, r2
 80154e8:	f043 0302 	orr.w	r3, r3, #2
 80154ec:	9207      	str	r2, [sp, #28]
 80154ee:	9304      	str	r3, [sp, #16]
 80154f0:	783b      	ldrb	r3, [r7, #0]
 80154f2:	2b2e      	cmp	r3, #46	; 0x2e
 80154f4:	d10c      	bne.n	8015510 <_svfiprintf_r+0x124>
 80154f6:	787b      	ldrb	r3, [r7, #1]
 80154f8:	2b2a      	cmp	r3, #42	; 0x2a
 80154fa:	d133      	bne.n	8015564 <_svfiprintf_r+0x178>
 80154fc:	9b03      	ldr	r3, [sp, #12]
 80154fe:	1d1a      	adds	r2, r3, #4
 8015500:	681b      	ldr	r3, [r3, #0]
 8015502:	9203      	str	r2, [sp, #12]
 8015504:	2b00      	cmp	r3, #0
 8015506:	bfb8      	it	lt
 8015508:	f04f 33ff 	movlt.w	r3, #4294967295
 801550c:	3702      	adds	r7, #2
 801550e:	9305      	str	r3, [sp, #20]
 8015510:	4d2e      	ldr	r5, [pc, #184]	; (80155cc <_svfiprintf_r+0x1e0>)
 8015512:	7839      	ldrb	r1, [r7, #0]
 8015514:	2203      	movs	r2, #3
 8015516:	4628      	mov	r0, r5
 8015518:	f7ea fe3a 	bl	8000190 <memchr>
 801551c:	b138      	cbz	r0, 801552e <_svfiprintf_r+0x142>
 801551e:	2340      	movs	r3, #64	; 0x40
 8015520:	1b40      	subs	r0, r0, r5
 8015522:	fa03 f000 	lsl.w	r0, r3, r0
 8015526:	9b04      	ldr	r3, [sp, #16]
 8015528:	4303      	orrs	r3, r0
 801552a:	3701      	adds	r7, #1
 801552c:	9304      	str	r3, [sp, #16]
 801552e:	7839      	ldrb	r1, [r7, #0]
 8015530:	4827      	ldr	r0, [pc, #156]	; (80155d0 <_svfiprintf_r+0x1e4>)
 8015532:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8015536:	2206      	movs	r2, #6
 8015538:	1c7e      	adds	r6, r7, #1
 801553a:	f7ea fe29 	bl	8000190 <memchr>
 801553e:	2800      	cmp	r0, #0
 8015540:	d038      	beq.n	80155b4 <_svfiprintf_r+0x1c8>
 8015542:	4b24      	ldr	r3, [pc, #144]	; (80155d4 <_svfiprintf_r+0x1e8>)
 8015544:	bb13      	cbnz	r3, 801558c <_svfiprintf_r+0x1a0>
 8015546:	9b03      	ldr	r3, [sp, #12]
 8015548:	3307      	adds	r3, #7
 801554a:	f023 0307 	bic.w	r3, r3, #7
 801554e:	3308      	adds	r3, #8
 8015550:	9303      	str	r3, [sp, #12]
 8015552:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015554:	444b      	add	r3, r9
 8015556:	9309      	str	r3, [sp, #36]	; 0x24
 8015558:	e76d      	b.n	8015436 <_svfiprintf_r+0x4a>
 801555a:	fb05 3202 	mla	r2, r5, r2, r3
 801555e:	2001      	movs	r0, #1
 8015560:	460f      	mov	r7, r1
 8015562:	e7a6      	b.n	80154b2 <_svfiprintf_r+0xc6>
 8015564:	2300      	movs	r3, #0
 8015566:	3701      	adds	r7, #1
 8015568:	9305      	str	r3, [sp, #20]
 801556a:	4619      	mov	r1, r3
 801556c:	250a      	movs	r5, #10
 801556e:	4638      	mov	r0, r7
 8015570:	f810 2b01 	ldrb.w	r2, [r0], #1
 8015574:	3a30      	subs	r2, #48	; 0x30
 8015576:	2a09      	cmp	r2, #9
 8015578:	d903      	bls.n	8015582 <_svfiprintf_r+0x196>
 801557a:	2b00      	cmp	r3, #0
 801557c:	d0c8      	beq.n	8015510 <_svfiprintf_r+0x124>
 801557e:	9105      	str	r1, [sp, #20]
 8015580:	e7c6      	b.n	8015510 <_svfiprintf_r+0x124>
 8015582:	fb05 2101 	mla	r1, r5, r1, r2
 8015586:	2301      	movs	r3, #1
 8015588:	4607      	mov	r7, r0
 801558a:	e7f0      	b.n	801556e <_svfiprintf_r+0x182>
 801558c:	ab03      	add	r3, sp, #12
 801558e:	9300      	str	r3, [sp, #0]
 8015590:	4622      	mov	r2, r4
 8015592:	4b11      	ldr	r3, [pc, #68]	; (80155d8 <_svfiprintf_r+0x1ec>)
 8015594:	a904      	add	r1, sp, #16
 8015596:	4640      	mov	r0, r8
 8015598:	f7fd fe68 	bl	801326c <_printf_float>
 801559c:	f1b0 3fff 	cmp.w	r0, #4294967295
 80155a0:	4681      	mov	r9, r0
 80155a2:	d1d6      	bne.n	8015552 <_svfiprintf_r+0x166>
 80155a4:	89a3      	ldrh	r3, [r4, #12]
 80155a6:	065b      	lsls	r3, r3, #25
 80155a8:	f53f af35 	bmi.w	8015416 <_svfiprintf_r+0x2a>
 80155ac:	9809      	ldr	r0, [sp, #36]	; 0x24
 80155ae:	b01d      	add	sp, #116	; 0x74
 80155b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80155b4:	ab03      	add	r3, sp, #12
 80155b6:	9300      	str	r3, [sp, #0]
 80155b8:	4622      	mov	r2, r4
 80155ba:	4b07      	ldr	r3, [pc, #28]	; (80155d8 <_svfiprintf_r+0x1ec>)
 80155bc:	a904      	add	r1, sp, #16
 80155be:	4640      	mov	r0, r8
 80155c0:	f7fe f90a 	bl	80137d8 <_printf_i>
 80155c4:	e7ea      	b.n	801559c <_svfiprintf_r+0x1b0>
 80155c6:	bf00      	nop
 80155c8:	080179dc 	.word	0x080179dc
 80155cc:	080179e2 	.word	0x080179e2
 80155d0:	080179e6 	.word	0x080179e6
 80155d4:	0801326d 	.word	0x0801326d
 80155d8:	08015339 	.word	0x08015339

080155dc <__sfputc_r>:
 80155dc:	6893      	ldr	r3, [r2, #8]
 80155de:	3b01      	subs	r3, #1
 80155e0:	2b00      	cmp	r3, #0
 80155e2:	b410      	push	{r4}
 80155e4:	6093      	str	r3, [r2, #8]
 80155e6:	da08      	bge.n	80155fa <__sfputc_r+0x1e>
 80155e8:	6994      	ldr	r4, [r2, #24]
 80155ea:	42a3      	cmp	r3, r4
 80155ec:	db01      	blt.n	80155f2 <__sfputc_r+0x16>
 80155ee:	290a      	cmp	r1, #10
 80155f0:	d103      	bne.n	80155fa <__sfputc_r+0x1e>
 80155f2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80155f6:	f7fe bac3 	b.w	8013b80 <__swbuf_r>
 80155fa:	6813      	ldr	r3, [r2, #0]
 80155fc:	1c58      	adds	r0, r3, #1
 80155fe:	6010      	str	r0, [r2, #0]
 8015600:	7019      	strb	r1, [r3, #0]
 8015602:	4608      	mov	r0, r1
 8015604:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015608:	4770      	bx	lr

0801560a <__sfputs_r>:
 801560a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801560c:	4606      	mov	r6, r0
 801560e:	460f      	mov	r7, r1
 8015610:	4614      	mov	r4, r2
 8015612:	18d5      	adds	r5, r2, r3
 8015614:	42ac      	cmp	r4, r5
 8015616:	d101      	bne.n	801561c <__sfputs_r+0x12>
 8015618:	2000      	movs	r0, #0
 801561a:	e007      	b.n	801562c <__sfputs_r+0x22>
 801561c:	463a      	mov	r2, r7
 801561e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015622:	4630      	mov	r0, r6
 8015624:	f7ff ffda 	bl	80155dc <__sfputc_r>
 8015628:	1c43      	adds	r3, r0, #1
 801562a:	d1f3      	bne.n	8015614 <__sfputs_r+0xa>
 801562c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08015630 <_vfiprintf_r>:
 8015630:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015634:	460c      	mov	r4, r1
 8015636:	b09d      	sub	sp, #116	; 0x74
 8015638:	4617      	mov	r7, r2
 801563a:	461d      	mov	r5, r3
 801563c:	4606      	mov	r6, r0
 801563e:	b118      	cbz	r0, 8015648 <_vfiprintf_r+0x18>
 8015640:	6983      	ldr	r3, [r0, #24]
 8015642:	b90b      	cbnz	r3, 8015648 <_vfiprintf_r+0x18>
 8015644:	f7ff fa90 	bl	8014b68 <__sinit>
 8015648:	4b7c      	ldr	r3, [pc, #496]	; (801583c <_vfiprintf_r+0x20c>)
 801564a:	429c      	cmp	r4, r3
 801564c:	d158      	bne.n	8015700 <_vfiprintf_r+0xd0>
 801564e:	6874      	ldr	r4, [r6, #4]
 8015650:	89a3      	ldrh	r3, [r4, #12]
 8015652:	0718      	lsls	r0, r3, #28
 8015654:	d55e      	bpl.n	8015714 <_vfiprintf_r+0xe4>
 8015656:	6923      	ldr	r3, [r4, #16]
 8015658:	2b00      	cmp	r3, #0
 801565a:	d05b      	beq.n	8015714 <_vfiprintf_r+0xe4>
 801565c:	2300      	movs	r3, #0
 801565e:	9309      	str	r3, [sp, #36]	; 0x24
 8015660:	2320      	movs	r3, #32
 8015662:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8015666:	2330      	movs	r3, #48	; 0x30
 8015668:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801566c:	9503      	str	r5, [sp, #12]
 801566e:	f04f 0b01 	mov.w	fp, #1
 8015672:	46b8      	mov	r8, r7
 8015674:	4645      	mov	r5, r8
 8015676:	f815 3b01 	ldrb.w	r3, [r5], #1
 801567a:	b10b      	cbz	r3, 8015680 <_vfiprintf_r+0x50>
 801567c:	2b25      	cmp	r3, #37	; 0x25
 801567e:	d154      	bne.n	801572a <_vfiprintf_r+0xfa>
 8015680:	ebb8 0a07 	subs.w	sl, r8, r7
 8015684:	d00b      	beq.n	801569e <_vfiprintf_r+0x6e>
 8015686:	4653      	mov	r3, sl
 8015688:	463a      	mov	r2, r7
 801568a:	4621      	mov	r1, r4
 801568c:	4630      	mov	r0, r6
 801568e:	f7ff ffbc 	bl	801560a <__sfputs_r>
 8015692:	3001      	adds	r0, #1
 8015694:	f000 80c2 	beq.w	801581c <_vfiprintf_r+0x1ec>
 8015698:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801569a:	4453      	add	r3, sl
 801569c:	9309      	str	r3, [sp, #36]	; 0x24
 801569e:	f898 3000 	ldrb.w	r3, [r8]
 80156a2:	2b00      	cmp	r3, #0
 80156a4:	f000 80ba 	beq.w	801581c <_vfiprintf_r+0x1ec>
 80156a8:	2300      	movs	r3, #0
 80156aa:	f04f 32ff 	mov.w	r2, #4294967295
 80156ae:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80156b2:	9304      	str	r3, [sp, #16]
 80156b4:	9307      	str	r3, [sp, #28]
 80156b6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80156ba:	931a      	str	r3, [sp, #104]	; 0x68
 80156bc:	46a8      	mov	r8, r5
 80156be:	2205      	movs	r2, #5
 80156c0:	f818 1b01 	ldrb.w	r1, [r8], #1
 80156c4:	485e      	ldr	r0, [pc, #376]	; (8015840 <_vfiprintf_r+0x210>)
 80156c6:	f7ea fd63 	bl	8000190 <memchr>
 80156ca:	9b04      	ldr	r3, [sp, #16]
 80156cc:	bb78      	cbnz	r0, 801572e <_vfiprintf_r+0xfe>
 80156ce:	06d9      	lsls	r1, r3, #27
 80156d0:	bf44      	itt	mi
 80156d2:	2220      	movmi	r2, #32
 80156d4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80156d8:	071a      	lsls	r2, r3, #28
 80156da:	bf44      	itt	mi
 80156dc:	222b      	movmi	r2, #43	; 0x2b
 80156de:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80156e2:	782a      	ldrb	r2, [r5, #0]
 80156e4:	2a2a      	cmp	r2, #42	; 0x2a
 80156e6:	d02a      	beq.n	801573e <_vfiprintf_r+0x10e>
 80156e8:	9a07      	ldr	r2, [sp, #28]
 80156ea:	46a8      	mov	r8, r5
 80156ec:	2000      	movs	r0, #0
 80156ee:	250a      	movs	r5, #10
 80156f0:	4641      	mov	r1, r8
 80156f2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80156f6:	3b30      	subs	r3, #48	; 0x30
 80156f8:	2b09      	cmp	r3, #9
 80156fa:	d969      	bls.n	80157d0 <_vfiprintf_r+0x1a0>
 80156fc:	b360      	cbz	r0, 8015758 <_vfiprintf_r+0x128>
 80156fe:	e024      	b.n	801574a <_vfiprintf_r+0x11a>
 8015700:	4b50      	ldr	r3, [pc, #320]	; (8015844 <_vfiprintf_r+0x214>)
 8015702:	429c      	cmp	r4, r3
 8015704:	d101      	bne.n	801570a <_vfiprintf_r+0xda>
 8015706:	68b4      	ldr	r4, [r6, #8]
 8015708:	e7a2      	b.n	8015650 <_vfiprintf_r+0x20>
 801570a:	4b4f      	ldr	r3, [pc, #316]	; (8015848 <_vfiprintf_r+0x218>)
 801570c:	429c      	cmp	r4, r3
 801570e:	bf08      	it	eq
 8015710:	68f4      	ldreq	r4, [r6, #12]
 8015712:	e79d      	b.n	8015650 <_vfiprintf_r+0x20>
 8015714:	4621      	mov	r1, r4
 8015716:	4630      	mov	r0, r6
 8015718:	f7fe fa84 	bl	8013c24 <__swsetup_r>
 801571c:	2800      	cmp	r0, #0
 801571e:	d09d      	beq.n	801565c <_vfiprintf_r+0x2c>
 8015720:	f04f 30ff 	mov.w	r0, #4294967295
 8015724:	b01d      	add	sp, #116	; 0x74
 8015726:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801572a:	46a8      	mov	r8, r5
 801572c:	e7a2      	b.n	8015674 <_vfiprintf_r+0x44>
 801572e:	4a44      	ldr	r2, [pc, #272]	; (8015840 <_vfiprintf_r+0x210>)
 8015730:	1a80      	subs	r0, r0, r2
 8015732:	fa0b f000 	lsl.w	r0, fp, r0
 8015736:	4318      	orrs	r0, r3
 8015738:	9004      	str	r0, [sp, #16]
 801573a:	4645      	mov	r5, r8
 801573c:	e7be      	b.n	80156bc <_vfiprintf_r+0x8c>
 801573e:	9a03      	ldr	r2, [sp, #12]
 8015740:	1d11      	adds	r1, r2, #4
 8015742:	6812      	ldr	r2, [r2, #0]
 8015744:	9103      	str	r1, [sp, #12]
 8015746:	2a00      	cmp	r2, #0
 8015748:	db01      	blt.n	801574e <_vfiprintf_r+0x11e>
 801574a:	9207      	str	r2, [sp, #28]
 801574c:	e004      	b.n	8015758 <_vfiprintf_r+0x128>
 801574e:	4252      	negs	r2, r2
 8015750:	f043 0302 	orr.w	r3, r3, #2
 8015754:	9207      	str	r2, [sp, #28]
 8015756:	9304      	str	r3, [sp, #16]
 8015758:	f898 3000 	ldrb.w	r3, [r8]
 801575c:	2b2e      	cmp	r3, #46	; 0x2e
 801575e:	d10e      	bne.n	801577e <_vfiprintf_r+0x14e>
 8015760:	f898 3001 	ldrb.w	r3, [r8, #1]
 8015764:	2b2a      	cmp	r3, #42	; 0x2a
 8015766:	d138      	bne.n	80157da <_vfiprintf_r+0x1aa>
 8015768:	9b03      	ldr	r3, [sp, #12]
 801576a:	1d1a      	adds	r2, r3, #4
 801576c:	681b      	ldr	r3, [r3, #0]
 801576e:	9203      	str	r2, [sp, #12]
 8015770:	2b00      	cmp	r3, #0
 8015772:	bfb8      	it	lt
 8015774:	f04f 33ff 	movlt.w	r3, #4294967295
 8015778:	f108 0802 	add.w	r8, r8, #2
 801577c:	9305      	str	r3, [sp, #20]
 801577e:	4d33      	ldr	r5, [pc, #204]	; (801584c <_vfiprintf_r+0x21c>)
 8015780:	f898 1000 	ldrb.w	r1, [r8]
 8015784:	2203      	movs	r2, #3
 8015786:	4628      	mov	r0, r5
 8015788:	f7ea fd02 	bl	8000190 <memchr>
 801578c:	b140      	cbz	r0, 80157a0 <_vfiprintf_r+0x170>
 801578e:	2340      	movs	r3, #64	; 0x40
 8015790:	1b40      	subs	r0, r0, r5
 8015792:	fa03 f000 	lsl.w	r0, r3, r0
 8015796:	9b04      	ldr	r3, [sp, #16]
 8015798:	4303      	orrs	r3, r0
 801579a:	f108 0801 	add.w	r8, r8, #1
 801579e:	9304      	str	r3, [sp, #16]
 80157a0:	f898 1000 	ldrb.w	r1, [r8]
 80157a4:	482a      	ldr	r0, [pc, #168]	; (8015850 <_vfiprintf_r+0x220>)
 80157a6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80157aa:	2206      	movs	r2, #6
 80157ac:	f108 0701 	add.w	r7, r8, #1
 80157b0:	f7ea fcee 	bl	8000190 <memchr>
 80157b4:	2800      	cmp	r0, #0
 80157b6:	d037      	beq.n	8015828 <_vfiprintf_r+0x1f8>
 80157b8:	4b26      	ldr	r3, [pc, #152]	; (8015854 <_vfiprintf_r+0x224>)
 80157ba:	bb1b      	cbnz	r3, 8015804 <_vfiprintf_r+0x1d4>
 80157bc:	9b03      	ldr	r3, [sp, #12]
 80157be:	3307      	adds	r3, #7
 80157c0:	f023 0307 	bic.w	r3, r3, #7
 80157c4:	3308      	adds	r3, #8
 80157c6:	9303      	str	r3, [sp, #12]
 80157c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80157ca:	444b      	add	r3, r9
 80157cc:	9309      	str	r3, [sp, #36]	; 0x24
 80157ce:	e750      	b.n	8015672 <_vfiprintf_r+0x42>
 80157d0:	fb05 3202 	mla	r2, r5, r2, r3
 80157d4:	2001      	movs	r0, #1
 80157d6:	4688      	mov	r8, r1
 80157d8:	e78a      	b.n	80156f0 <_vfiprintf_r+0xc0>
 80157da:	2300      	movs	r3, #0
 80157dc:	f108 0801 	add.w	r8, r8, #1
 80157e0:	9305      	str	r3, [sp, #20]
 80157e2:	4619      	mov	r1, r3
 80157e4:	250a      	movs	r5, #10
 80157e6:	4640      	mov	r0, r8
 80157e8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80157ec:	3a30      	subs	r2, #48	; 0x30
 80157ee:	2a09      	cmp	r2, #9
 80157f0:	d903      	bls.n	80157fa <_vfiprintf_r+0x1ca>
 80157f2:	2b00      	cmp	r3, #0
 80157f4:	d0c3      	beq.n	801577e <_vfiprintf_r+0x14e>
 80157f6:	9105      	str	r1, [sp, #20]
 80157f8:	e7c1      	b.n	801577e <_vfiprintf_r+0x14e>
 80157fa:	fb05 2101 	mla	r1, r5, r1, r2
 80157fe:	2301      	movs	r3, #1
 8015800:	4680      	mov	r8, r0
 8015802:	e7f0      	b.n	80157e6 <_vfiprintf_r+0x1b6>
 8015804:	ab03      	add	r3, sp, #12
 8015806:	9300      	str	r3, [sp, #0]
 8015808:	4622      	mov	r2, r4
 801580a:	4b13      	ldr	r3, [pc, #76]	; (8015858 <_vfiprintf_r+0x228>)
 801580c:	a904      	add	r1, sp, #16
 801580e:	4630      	mov	r0, r6
 8015810:	f7fd fd2c 	bl	801326c <_printf_float>
 8015814:	f1b0 3fff 	cmp.w	r0, #4294967295
 8015818:	4681      	mov	r9, r0
 801581a:	d1d5      	bne.n	80157c8 <_vfiprintf_r+0x198>
 801581c:	89a3      	ldrh	r3, [r4, #12]
 801581e:	065b      	lsls	r3, r3, #25
 8015820:	f53f af7e 	bmi.w	8015720 <_vfiprintf_r+0xf0>
 8015824:	9809      	ldr	r0, [sp, #36]	; 0x24
 8015826:	e77d      	b.n	8015724 <_vfiprintf_r+0xf4>
 8015828:	ab03      	add	r3, sp, #12
 801582a:	9300      	str	r3, [sp, #0]
 801582c:	4622      	mov	r2, r4
 801582e:	4b0a      	ldr	r3, [pc, #40]	; (8015858 <_vfiprintf_r+0x228>)
 8015830:	a904      	add	r1, sp, #16
 8015832:	4630      	mov	r0, r6
 8015834:	f7fd ffd0 	bl	80137d8 <_printf_i>
 8015838:	e7ec      	b.n	8015814 <_vfiprintf_r+0x1e4>
 801583a:	bf00      	nop
 801583c:	080178a0 	.word	0x080178a0
 8015840:	080179dc 	.word	0x080179dc
 8015844:	080178c0 	.word	0x080178c0
 8015848:	08017880 	.word	0x08017880
 801584c:	080179e2 	.word	0x080179e2
 8015850:	080179e6 	.word	0x080179e6
 8015854:	0801326d 	.word	0x0801326d
 8015858:	0801560b 	.word	0x0801560b

0801585c <__sread>:
 801585c:	b510      	push	{r4, lr}
 801585e:	460c      	mov	r4, r1
 8015860:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015864:	f000 f8e6 	bl	8015a34 <_read_r>
 8015868:	2800      	cmp	r0, #0
 801586a:	bfab      	itete	ge
 801586c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801586e:	89a3      	ldrhlt	r3, [r4, #12]
 8015870:	181b      	addge	r3, r3, r0
 8015872:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8015876:	bfac      	ite	ge
 8015878:	6563      	strge	r3, [r4, #84]	; 0x54
 801587a:	81a3      	strhlt	r3, [r4, #12]
 801587c:	bd10      	pop	{r4, pc}

0801587e <__swrite>:
 801587e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015882:	461f      	mov	r7, r3
 8015884:	898b      	ldrh	r3, [r1, #12]
 8015886:	05db      	lsls	r3, r3, #23
 8015888:	4605      	mov	r5, r0
 801588a:	460c      	mov	r4, r1
 801588c:	4616      	mov	r6, r2
 801588e:	d505      	bpl.n	801589c <__swrite+0x1e>
 8015890:	2302      	movs	r3, #2
 8015892:	2200      	movs	r2, #0
 8015894:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015898:	f000 f868 	bl	801596c <_lseek_r>
 801589c:	89a3      	ldrh	r3, [r4, #12]
 801589e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80158a2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80158a6:	81a3      	strh	r3, [r4, #12]
 80158a8:	4632      	mov	r2, r6
 80158aa:	463b      	mov	r3, r7
 80158ac:	4628      	mov	r0, r5
 80158ae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80158b2:	f000 b817 	b.w	80158e4 <_write_r>

080158b6 <__sseek>:
 80158b6:	b510      	push	{r4, lr}
 80158b8:	460c      	mov	r4, r1
 80158ba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80158be:	f000 f855 	bl	801596c <_lseek_r>
 80158c2:	1c43      	adds	r3, r0, #1
 80158c4:	89a3      	ldrh	r3, [r4, #12]
 80158c6:	bf15      	itete	ne
 80158c8:	6560      	strne	r0, [r4, #84]	; 0x54
 80158ca:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80158ce:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80158d2:	81a3      	strheq	r3, [r4, #12]
 80158d4:	bf18      	it	ne
 80158d6:	81a3      	strhne	r3, [r4, #12]
 80158d8:	bd10      	pop	{r4, pc}

080158da <__sclose>:
 80158da:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80158de:	f000 b813 	b.w	8015908 <_close_r>
	...

080158e4 <_write_r>:
 80158e4:	b538      	push	{r3, r4, r5, lr}
 80158e6:	4c07      	ldr	r4, [pc, #28]	; (8015904 <_write_r+0x20>)
 80158e8:	4605      	mov	r5, r0
 80158ea:	4608      	mov	r0, r1
 80158ec:	4611      	mov	r1, r2
 80158ee:	2200      	movs	r2, #0
 80158f0:	6022      	str	r2, [r4, #0]
 80158f2:	461a      	mov	r2, r3
 80158f4:	f7f8 fc76 	bl	800e1e4 <_write>
 80158f8:	1c43      	adds	r3, r0, #1
 80158fa:	d102      	bne.n	8015902 <_write_r+0x1e>
 80158fc:	6823      	ldr	r3, [r4, #0]
 80158fe:	b103      	cbz	r3, 8015902 <_write_r+0x1e>
 8015900:	602b      	str	r3, [r5, #0]
 8015902:	bd38      	pop	{r3, r4, r5, pc}
 8015904:	200054c8 	.word	0x200054c8

08015908 <_close_r>:
 8015908:	b538      	push	{r3, r4, r5, lr}
 801590a:	4c06      	ldr	r4, [pc, #24]	; (8015924 <_close_r+0x1c>)
 801590c:	2300      	movs	r3, #0
 801590e:	4605      	mov	r5, r0
 8015910:	4608      	mov	r0, r1
 8015912:	6023      	str	r3, [r4, #0]
 8015914:	f7f0 fa87 	bl	8005e26 <_close>
 8015918:	1c43      	adds	r3, r0, #1
 801591a:	d102      	bne.n	8015922 <_close_r+0x1a>
 801591c:	6823      	ldr	r3, [r4, #0]
 801591e:	b103      	cbz	r3, 8015922 <_close_r+0x1a>
 8015920:	602b      	str	r3, [r5, #0]
 8015922:	bd38      	pop	{r3, r4, r5, pc}
 8015924:	200054c8 	.word	0x200054c8

08015928 <_fstat_r>:
 8015928:	b538      	push	{r3, r4, r5, lr}
 801592a:	4c07      	ldr	r4, [pc, #28]	; (8015948 <_fstat_r+0x20>)
 801592c:	2300      	movs	r3, #0
 801592e:	4605      	mov	r5, r0
 8015930:	4608      	mov	r0, r1
 8015932:	4611      	mov	r1, r2
 8015934:	6023      	str	r3, [r4, #0]
 8015936:	f7f0 fa82 	bl	8005e3e <_fstat>
 801593a:	1c43      	adds	r3, r0, #1
 801593c:	d102      	bne.n	8015944 <_fstat_r+0x1c>
 801593e:	6823      	ldr	r3, [r4, #0]
 8015940:	b103      	cbz	r3, 8015944 <_fstat_r+0x1c>
 8015942:	602b      	str	r3, [r5, #0]
 8015944:	bd38      	pop	{r3, r4, r5, pc}
 8015946:	bf00      	nop
 8015948:	200054c8 	.word	0x200054c8

0801594c <_isatty_r>:
 801594c:	b538      	push	{r3, r4, r5, lr}
 801594e:	4c06      	ldr	r4, [pc, #24]	; (8015968 <_isatty_r+0x1c>)
 8015950:	2300      	movs	r3, #0
 8015952:	4605      	mov	r5, r0
 8015954:	4608      	mov	r0, r1
 8015956:	6023      	str	r3, [r4, #0]
 8015958:	f7f0 fa81 	bl	8005e5e <_isatty>
 801595c:	1c43      	adds	r3, r0, #1
 801595e:	d102      	bne.n	8015966 <_isatty_r+0x1a>
 8015960:	6823      	ldr	r3, [r4, #0]
 8015962:	b103      	cbz	r3, 8015966 <_isatty_r+0x1a>
 8015964:	602b      	str	r3, [r5, #0]
 8015966:	bd38      	pop	{r3, r4, r5, pc}
 8015968:	200054c8 	.word	0x200054c8

0801596c <_lseek_r>:
 801596c:	b538      	push	{r3, r4, r5, lr}
 801596e:	4c07      	ldr	r4, [pc, #28]	; (801598c <_lseek_r+0x20>)
 8015970:	4605      	mov	r5, r0
 8015972:	4608      	mov	r0, r1
 8015974:	4611      	mov	r1, r2
 8015976:	2200      	movs	r2, #0
 8015978:	6022      	str	r2, [r4, #0]
 801597a:	461a      	mov	r2, r3
 801597c:	f7f0 fa7a 	bl	8005e74 <_lseek>
 8015980:	1c43      	adds	r3, r0, #1
 8015982:	d102      	bne.n	801598a <_lseek_r+0x1e>
 8015984:	6823      	ldr	r3, [r4, #0]
 8015986:	b103      	cbz	r3, 801598a <_lseek_r+0x1e>
 8015988:	602b      	str	r3, [r5, #0]
 801598a:	bd38      	pop	{r3, r4, r5, pc}
 801598c:	200054c8 	.word	0x200054c8

08015990 <__ascii_mbtowc>:
 8015990:	b082      	sub	sp, #8
 8015992:	b901      	cbnz	r1, 8015996 <__ascii_mbtowc+0x6>
 8015994:	a901      	add	r1, sp, #4
 8015996:	b142      	cbz	r2, 80159aa <__ascii_mbtowc+0x1a>
 8015998:	b14b      	cbz	r3, 80159ae <__ascii_mbtowc+0x1e>
 801599a:	7813      	ldrb	r3, [r2, #0]
 801599c:	600b      	str	r3, [r1, #0]
 801599e:	7812      	ldrb	r2, [r2, #0]
 80159a0:	1c10      	adds	r0, r2, #0
 80159a2:	bf18      	it	ne
 80159a4:	2001      	movne	r0, #1
 80159a6:	b002      	add	sp, #8
 80159a8:	4770      	bx	lr
 80159aa:	4610      	mov	r0, r2
 80159ac:	e7fb      	b.n	80159a6 <__ascii_mbtowc+0x16>
 80159ae:	f06f 0001 	mvn.w	r0, #1
 80159b2:	e7f8      	b.n	80159a6 <__ascii_mbtowc+0x16>

080159b4 <memmove>:
 80159b4:	4288      	cmp	r0, r1
 80159b6:	b510      	push	{r4, lr}
 80159b8:	eb01 0302 	add.w	r3, r1, r2
 80159bc:	d807      	bhi.n	80159ce <memmove+0x1a>
 80159be:	1e42      	subs	r2, r0, #1
 80159c0:	4299      	cmp	r1, r3
 80159c2:	d00a      	beq.n	80159da <memmove+0x26>
 80159c4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80159c8:	f802 4f01 	strb.w	r4, [r2, #1]!
 80159cc:	e7f8      	b.n	80159c0 <memmove+0xc>
 80159ce:	4283      	cmp	r3, r0
 80159d0:	d9f5      	bls.n	80159be <memmove+0xa>
 80159d2:	1881      	adds	r1, r0, r2
 80159d4:	1ad2      	subs	r2, r2, r3
 80159d6:	42d3      	cmn	r3, r2
 80159d8:	d100      	bne.n	80159dc <memmove+0x28>
 80159da:	bd10      	pop	{r4, pc}
 80159dc:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80159e0:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80159e4:	e7f7      	b.n	80159d6 <memmove+0x22>

080159e6 <_realloc_r>:
 80159e6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80159e8:	4607      	mov	r7, r0
 80159ea:	4614      	mov	r4, r2
 80159ec:	460e      	mov	r6, r1
 80159ee:	b921      	cbnz	r1, 80159fa <_realloc_r+0x14>
 80159f0:	4611      	mov	r1, r2
 80159f2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80159f6:	f7fd bb4b 	b.w	8013090 <_malloc_r>
 80159fa:	b922      	cbnz	r2, 8015a06 <_realloc_r+0x20>
 80159fc:	f7fd fafa 	bl	8012ff4 <_free_r>
 8015a00:	4625      	mov	r5, r4
 8015a02:	4628      	mov	r0, r5
 8015a04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015a06:	f000 f834 	bl	8015a72 <_malloc_usable_size_r>
 8015a0a:	42a0      	cmp	r0, r4
 8015a0c:	d20f      	bcs.n	8015a2e <_realloc_r+0x48>
 8015a0e:	4621      	mov	r1, r4
 8015a10:	4638      	mov	r0, r7
 8015a12:	f7fd fb3d 	bl	8013090 <_malloc_r>
 8015a16:	4605      	mov	r5, r0
 8015a18:	2800      	cmp	r0, #0
 8015a1a:	d0f2      	beq.n	8015a02 <_realloc_r+0x1c>
 8015a1c:	4631      	mov	r1, r6
 8015a1e:	4622      	mov	r2, r4
 8015a20:	f7fd fad4 	bl	8012fcc <memcpy>
 8015a24:	4631      	mov	r1, r6
 8015a26:	4638      	mov	r0, r7
 8015a28:	f7fd fae4 	bl	8012ff4 <_free_r>
 8015a2c:	e7e9      	b.n	8015a02 <_realloc_r+0x1c>
 8015a2e:	4635      	mov	r5, r6
 8015a30:	e7e7      	b.n	8015a02 <_realloc_r+0x1c>
	...

08015a34 <_read_r>:
 8015a34:	b538      	push	{r3, r4, r5, lr}
 8015a36:	4c07      	ldr	r4, [pc, #28]	; (8015a54 <_read_r+0x20>)
 8015a38:	4605      	mov	r5, r0
 8015a3a:	4608      	mov	r0, r1
 8015a3c:	4611      	mov	r1, r2
 8015a3e:	2200      	movs	r2, #0
 8015a40:	6022      	str	r2, [r4, #0]
 8015a42:	461a      	mov	r2, r3
 8015a44:	f7f0 f9d2 	bl	8005dec <_read>
 8015a48:	1c43      	adds	r3, r0, #1
 8015a4a:	d102      	bne.n	8015a52 <_read_r+0x1e>
 8015a4c:	6823      	ldr	r3, [r4, #0]
 8015a4e:	b103      	cbz	r3, 8015a52 <_read_r+0x1e>
 8015a50:	602b      	str	r3, [r5, #0]
 8015a52:	bd38      	pop	{r3, r4, r5, pc}
 8015a54:	200054c8 	.word	0x200054c8

08015a58 <__ascii_wctomb>:
 8015a58:	b149      	cbz	r1, 8015a6e <__ascii_wctomb+0x16>
 8015a5a:	2aff      	cmp	r2, #255	; 0xff
 8015a5c:	bf85      	ittet	hi
 8015a5e:	238a      	movhi	r3, #138	; 0x8a
 8015a60:	6003      	strhi	r3, [r0, #0]
 8015a62:	700a      	strbls	r2, [r1, #0]
 8015a64:	f04f 30ff 	movhi.w	r0, #4294967295
 8015a68:	bf98      	it	ls
 8015a6a:	2001      	movls	r0, #1
 8015a6c:	4770      	bx	lr
 8015a6e:	4608      	mov	r0, r1
 8015a70:	4770      	bx	lr

08015a72 <_malloc_usable_size_r>:
 8015a72:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8015a76:	1f18      	subs	r0, r3, #4
 8015a78:	2b00      	cmp	r3, #0
 8015a7a:	bfbc      	itt	lt
 8015a7c:	580b      	ldrlt	r3, [r1, r0]
 8015a7e:	18c0      	addlt	r0, r0, r3
 8015a80:	4770      	bx	lr
	...

08015a84 <round>:
 8015a84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015a86:	ec57 6b10 	vmov	r6, r7, d0
 8015a8a:	f3c7 500a 	ubfx	r0, r7, #20, #11
 8015a8e:	f2a0 34ff 	subw	r4, r0, #1023	; 0x3ff
 8015a92:	2c13      	cmp	r4, #19
 8015a94:	463b      	mov	r3, r7
 8015a96:	463d      	mov	r5, r7
 8015a98:	dc17      	bgt.n	8015aca <round+0x46>
 8015a9a:	2c00      	cmp	r4, #0
 8015a9c:	da09      	bge.n	8015ab2 <round+0x2e>
 8015a9e:	3401      	adds	r4, #1
 8015aa0:	f007 4300 	and.w	r3, r7, #2147483648	; 0x80000000
 8015aa4:	d103      	bne.n	8015aae <round+0x2a>
 8015aa6:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8015aaa:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8015aae:	2100      	movs	r1, #0
 8015ab0:	e02c      	b.n	8015b0c <round+0x88>
 8015ab2:	4a18      	ldr	r2, [pc, #96]	; (8015b14 <round+0x90>)
 8015ab4:	4122      	asrs	r2, r4
 8015ab6:	4217      	tst	r7, r2
 8015ab8:	d100      	bne.n	8015abc <round+0x38>
 8015aba:	b19e      	cbz	r6, 8015ae4 <round+0x60>
 8015abc:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8015ac0:	4123      	asrs	r3, r4
 8015ac2:	442b      	add	r3, r5
 8015ac4:	ea23 0302 	bic.w	r3, r3, r2
 8015ac8:	e7f1      	b.n	8015aae <round+0x2a>
 8015aca:	2c33      	cmp	r4, #51	; 0x33
 8015acc:	dd0d      	ble.n	8015aea <round+0x66>
 8015ace:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 8015ad2:	d107      	bne.n	8015ae4 <round+0x60>
 8015ad4:	4630      	mov	r0, r6
 8015ad6:	4639      	mov	r1, r7
 8015ad8:	ee10 2a10 	vmov	r2, s0
 8015adc:	f7ea fbae 	bl	800023c <__adddf3>
 8015ae0:	4606      	mov	r6, r0
 8015ae2:	460f      	mov	r7, r1
 8015ae4:	ec47 6b10 	vmov	d0, r6, r7
 8015ae8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015aea:	f2a0 4213 	subw	r2, r0, #1043	; 0x413
 8015aee:	f04f 30ff 	mov.w	r0, #4294967295
 8015af2:	40d0      	lsrs	r0, r2
 8015af4:	4206      	tst	r6, r0
 8015af6:	d0f5      	beq.n	8015ae4 <round+0x60>
 8015af8:	2201      	movs	r2, #1
 8015afa:	f1c4 0433 	rsb	r4, r4, #51	; 0x33
 8015afe:	fa02 f404 	lsl.w	r4, r2, r4
 8015b02:	1931      	adds	r1, r6, r4
 8015b04:	bf28      	it	cs
 8015b06:	189b      	addcs	r3, r3, r2
 8015b08:	ea21 0100 	bic.w	r1, r1, r0
 8015b0c:	461f      	mov	r7, r3
 8015b0e:	460e      	mov	r6, r1
 8015b10:	e7e8      	b.n	8015ae4 <round+0x60>
 8015b12:	bf00      	nop
 8015b14:	000fffff 	.word	0x000fffff

08015b18 <_init>:
 8015b18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015b1a:	bf00      	nop
 8015b1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8015b1e:	bc08      	pop	{r3}
 8015b20:	469e      	mov	lr, r3
 8015b22:	4770      	bx	lr

08015b24 <_fini>:
 8015b24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015b26:	bf00      	nop
 8015b28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8015b2a:	bc08      	pop	{r3}
 8015b2c:	469e      	mov	lr, r3
 8015b2e:	4770      	bx	lr
