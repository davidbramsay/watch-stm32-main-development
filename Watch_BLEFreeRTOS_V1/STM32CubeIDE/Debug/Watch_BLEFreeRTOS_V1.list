
Watch_BLEFreeRTOS_V1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000145b0  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001f88  080146f0  080146f0  000246f0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08016678  08016678  00026678  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  0801667c  0801667c  0002667c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         000001f0  20000004  08016680  00030004  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 BLE_APP_CONTEXT 000000d0  200001f8  08016870  000301f8  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  7 TIMERSERVER_CONTEXT 00000099  200002c8  08016940  000302c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 BLE_DRIVER_CONTEXT 0000003e  20000364  080169d9  00030364  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 SYSTEM_DRIVER_CONTEXT 00000011  200003a4  08016a17  000303a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          00005f08  200003b8  08016a28  000303b8  2**2
                  ALLOC
 11 ._user_heap_stack 00001400  200062c0  08016a28  000362c0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000303b5  2**0
                  CONTENTS, READONLY
 13 MAPPING_TABLE 00000028  20030000  20030000  00040000  2**2
                  ALLOC
 14 MB_MEM1       000001b8  20030028  20030028  00040000  2**2
                  ALLOC
 15 MB_MEM2       00000877  200301e0  200301e0  00040000  2**2
                  ALLOC
 16 .debug_info   0005131d  00000000  00000000  000303e5  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_abbrev 00008795  00000000  00000000  00081702  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_aranges 000036c0  00000000  00000000  00089e98  2**3
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_ranges 00003330  00000000  00000000  0008d558  2**3
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_macro  00032a99  00000000  00000000  00090888  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_line   00033962  00000000  00000000  000c3321  2**0
                  CONTENTS, READONLY, DEBUGGING
 22 .debug_str    001115ce  00000000  00000000  000f6c83  2**0
                  CONTENTS, READONLY, DEBUGGING
 23 .comment      0000007b  00000000  00000000  00208251  2**0
                  CONTENTS, READONLY
 24 .debug_frame  0000f4e8  00000000  00000000  002082cc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	200003b8 	.word	0x200003b8
 800015c:	00000000 	.word	0x00000000
 8000160:	080146d8 	.word	0x080146d8

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	200003bc 	.word	0x200003bc
 800017c:	080146d8 	.word	0x080146d8

08000180 <strlen>:
 8000180:	4603      	mov	r3, r0
 8000182:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000186:	2a00      	cmp	r2, #0
 8000188:	d1fb      	bne.n	8000182 <strlen+0x2>
 800018a:	1a18      	subs	r0, r3, r0
 800018c:	3801      	subs	r0, #1
 800018e:	4770      	bx	lr

08000190 <memchr>:
 8000190:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000194:	2a10      	cmp	r2, #16
 8000196:	db2b      	blt.n	80001f0 <memchr+0x60>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	d008      	beq.n	80001b0 <memchr+0x20>
 800019e:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001a2:	3a01      	subs	r2, #1
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d02d      	beq.n	8000204 <memchr+0x74>
 80001a8:	f010 0f07 	tst.w	r0, #7
 80001ac:	b342      	cbz	r2, 8000200 <memchr+0x70>
 80001ae:	d1f6      	bne.n	800019e <memchr+0xe>
 80001b0:	b4f0      	push	{r4, r5, r6, r7}
 80001b2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001b6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001ba:	f022 0407 	bic.w	r4, r2, #7
 80001be:	f07f 0700 	mvns.w	r7, #0
 80001c2:	2300      	movs	r3, #0
 80001c4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001c8:	3c08      	subs	r4, #8
 80001ca:	ea85 0501 	eor.w	r5, r5, r1
 80001ce:	ea86 0601 	eor.w	r6, r6, r1
 80001d2:	fa85 f547 	uadd8	r5, r5, r7
 80001d6:	faa3 f587 	sel	r5, r3, r7
 80001da:	fa86 f647 	uadd8	r6, r6, r7
 80001de:	faa5 f687 	sel	r6, r5, r7
 80001e2:	b98e      	cbnz	r6, 8000208 <memchr+0x78>
 80001e4:	d1ee      	bne.n	80001c4 <memchr+0x34>
 80001e6:	bcf0      	pop	{r4, r5, r6, r7}
 80001e8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001ec:	f002 0207 	and.w	r2, r2, #7
 80001f0:	b132      	cbz	r2, 8000200 <memchr+0x70>
 80001f2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f6:	3a01      	subs	r2, #1
 80001f8:	ea83 0301 	eor.w	r3, r3, r1
 80001fc:	b113      	cbz	r3, 8000204 <memchr+0x74>
 80001fe:	d1f8      	bne.n	80001f2 <memchr+0x62>
 8000200:	2000      	movs	r0, #0
 8000202:	4770      	bx	lr
 8000204:	3801      	subs	r0, #1
 8000206:	4770      	bx	lr
 8000208:	2d00      	cmp	r5, #0
 800020a:	bf06      	itte	eq
 800020c:	4635      	moveq	r5, r6
 800020e:	3803      	subeq	r0, #3
 8000210:	3807      	subne	r0, #7
 8000212:	f015 0f01 	tst.w	r5, #1
 8000216:	d107      	bne.n	8000228 <memchr+0x98>
 8000218:	3001      	adds	r0, #1
 800021a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800021e:	bf02      	ittt	eq
 8000220:	3001      	addeq	r0, #1
 8000222:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000226:	3001      	addeq	r0, #1
 8000228:	bcf0      	pop	{r4, r5, r6, r7}
 800022a:	3801      	subs	r0, #1
 800022c:	4770      	bx	lr
 800022e:	bf00      	nop

08000230 <__aeabi_drsub>:
 8000230:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000234:	e002      	b.n	800023c <__adddf3>
 8000236:	bf00      	nop

08000238 <__aeabi_dsub>:
 8000238:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800023c <__adddf3>:
 800023c:	b530      	push	{r4, r5, lr}
 800023e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000242:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000246:	ea94 0f05 	teq	r4, r5
 800024a:	bf08      	it	eq
 800024c:	ea90 0f02 	teqeq	r0, r2
 8000250:	bf1f      	itttt	ne
 8000252:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000256:	ea55 0c02 	orrsne.w	ip, r5, r2
 800025a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800025e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000262:	f000 80e2 	beq.w	800042a <__adddf3+0x1ee>
 8000266:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800026a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800026e:	bfb8      	it	lt
 8000270:	426d      	neglt	r5, r5
 8000272:	dd0c      	ble.n	800028e <__adddf3+0x52>
 8000274:	442c      	add	r4, r5
 8000276:	ea80 0202 	eor.w	r2, r0, r2
 800027a:	ea81 0303 	eor.w	r3, r1, r3
 800027e:	ea82 0000 	eor.w	r0, r2, r0
 8000282:	ea83 0101 	eor.w	r1, r3, r1
 8000286:	ea80 0202 	eor.w	r2, r0, r2
 800028a:	ea81 0303 	eor.w	r3, r1, r3
 800028e:	2d36      	cmp	r5, #54	; 0x36
 8000290:	bf88      	it	hi
 8000292:	bd30      	pophi	{r4, r5, pc}
 8000294:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000298:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800029c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002a0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002a4:	d002      	beq.n	80002ac <__adddf3+0x70>
 80002a6:	4240      	negs	r0, r0
 80002a8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ac:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002b4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002b8:	d002      	beq.n	80002c0 <__adddf3+0x84>
 80002ba:	4252      	negs	r2, r2
 80002bc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c0:	ea94 0f05 	teq	r4, r5
 80002c4:	f000 80a7 	beq.w	8000416 <__adddf3+0x1da>
 80002c8:	f1a4 0401 	sub.w	r4, r4, #1
 80002cc:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d0:	db0d      	blt.n	80002ee <__adddf3+0xb2>
 80002d2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002d6:	fa22 f205 	lsr.w	r2, r2, r5
 80002da:	1880      	adds	r0, r0, r2
 80002dc:	f141 0100 	adc.w	r1, r1, #0
 80002e0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002e4:	1880      	adds	r0, r0, r2
 80002e6:	fa43 f305 	asr.w	r3, r3, r5
 80002ea:	4159      	adcs	r1, r3
 80002ec:	e00e      	b.n	800030c <__adddf3+0xd0>
 80002ee:	f1a5 0520 	sub.w	r5, r5, #32
 80002f2:	f10e 0e20 	add.w	lr, lr, #32
 80002f6:	2a01      	cmp	r2, #1
 80002f8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002fc:	bf28      	it	cs
 80002fe:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000302:	fa43 f305 	asr.w	r3, r3, r5
 8000306:	18c0      	adds	r0, r0, r3
 8000308:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800030c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000310:	d507      	bpl.n	8000322 <__adddf3+0xe6>
 8000312:	f04f 0e00 	mov.w	lr, #0
 8000316:	f1dc 0c00 	rsbs	ip, ip, #0
 800031a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800031e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000322:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000326:	d31b      	bcc.n	8000360 <__adddf3+0x124>
 8000328:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800032c:	d30c      	bcc.n	8000348 <__adddf3+0x10c>
 800032e:	0849      	lsrs	r1, r1, #1
 8000330:	ea5f 0030 	movs.w	r0, r0, rrx
 8000334:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000338:	f104 0401 	add.w	r4, r4, #1
 800033c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000340:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000344:	f080 809a 	bcs.w	800047c <__adddf3+0x240>
 8000348:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800034c:	bf08      	it	eq
 800034e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000352:	f150 0000 	adcs.w	r0, r0, #0
 8000356:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800035a:	ea41 0105 	orr.w	r1, r1, r5
 800035e:	bd30      	pop	{r4, r5, pc}
 8000360:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000364:	4140      	adcs	r0, r0
 8000366:	eb41 0101 	adc.w	r1, r1, r1
 800036a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800036e:	f1a4 0401 	sub.w	r4, r4, #1
 8000372:	d1e9      	bne.n	8000348 <__adddf3+0x10c>
 8000374:	f091 0f00 	teq	r1, #0
 8000378:	bf04      	itt	eq
 800037a:	4601      	moveq	r1, r0
 800037c:	2000      	moveq	r0, #0
 800037e:	fab1 f381 	clz	r3, r1
 8000382:	bf08      	it	eq
 8000384:	3320      	addeq	r3, #32
 8000386:	f1a3 030b 	sub.w	r3, r3, #11
 800038a:	f1b3 0220 	subs.w	r2, r3, #32
 800038e:	da0c      	bge.n	80003aa <__adddf3+0x16e>
 8000390:	320c      	adds	r2, #12
 8000392:	dd08      	ble.n	80003a6 <__adddf3+0x16a>
 8000394:	f102 0c14 	add.w	ip, r2, #20
 8000398:	f1c2 020c 	rsb	r2, r2, #12
 800039c:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a0:	fa21 f102 	lsr.w	r1, r1, r2
 80003a4:	e00c      	b.n	80003c0 <__adddf3+0x184>
 80003a6:	f102 0214 	add.w	r2, r2, #20
 80003aa:	bfd8      	it	le
 80003ac:	f1c2 0c20 	rsble	ip, r2, #32
 80003b0:	fa01 f102 	lsl.w	r1, r1, r2
 80003b4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003b8:	bfdc      	itt	le
 80003ba:	ea41 010c 	orrle.w	r1, r1, ip
 80003be:	4090      	lslle	r0, r2
 80003c0:	1ae4      	subs	r4, r4, r3
 80003c2:	bfa2      	ittt	ge
 80003c4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003c8:	4329      	orrge	r1, r5
 80003ca:	bd30      	popge	{r4, r5, pc}
 80003cc:	ea6f 0404 	mvn.w	r4, r4
 80003d0:	3c1f      	subs	r4, #31
 80003d2:	da1c      	bge.n	800040e <__adddf3+0x1d2>
 80003d4:	340c      	adds	r4, #12
 80003d6:	dc0e      	bgt.n	80003f6 <__adddf3+0x1ba>
 80003d8:	f104 0414 	add.w	r4, r4, #20
 80003dc:	f1c4 0220 	rsb	r2, r4, #32
 80003e0:	fa20 f004 	lsr.w	r0, r0, r4
 80003e4:	fa01 f302 	lsl.w	r3, r1, r2
 80003e8:	ea40 0003 	orr.w	r0, r0, r3
 80003ec:	fa21 f304 	lsr.w	r3, r1, r4
 80003f0:	ea45 0103 	orr.w	r1, r5, r3
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	f1c4 040c 	rsb	r4, r4, #12
 80003fa:	f1c4 0220 	rsb	r2, r4, #32
 80003fe:	fa20 f002 	lsr.w	r0, r0, r2
 8000402:	fa01 f304 	lsl.w	r3, r1, r4
 8000406:	ea40 0003 	orr.w	r0, r0, r3
 800040a:	4629      	mov	r1, r5
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	fa21 f004 	lsr.w	r0, r1, r4
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	f094 0f00 	teq	r4, #0
 800041a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800041e:	bf06      	itte	eq
 8000420:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000424:	3401      	addeq	r4, #1
 8000426:	3d01      	subne	r5, #1
 8000428:	e74e      	b.n	80002c8 <__adddf3+0x8c>
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf18      	it	ne
 8000430:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000434:	d029      	beq.n	800048a <__adddf3+0x24e>
 8000436:	ea94 0f05 	teq	r4, r5
 800043a:	bf08      	it	eq
 800043c:	ea90 0f02 	teqeq	r0, r2
 8000440:	d005      	beq.n	800044e <__adddf3+0x212>
 8000442:	ea54 0c00 	orrs.w	ip, r4, r0
 8000446:	bf04      	itt	eq
 8000448:	4619      	moveq	r1, r3
 800044a:	4610      	moveq	r0, r2
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	ea91 0f03 	teq	r1, r3
 8000452:	bf1e      	ittt	ne
 8000454:	2100      	movne	r1, #0
 8000456:	2000      	movne	r0, #0
 8000458:	bd30      	popne	{r4, r5, pc}
 800045a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800045e:	d105      	bne.n	800046c <__adddf3+0x230>
 8000460:	0040      	lsls	r0, r0, #1
 8000462:	4149      	adcs	r1, r1
 8000464:	bf28      	it	cs
 8000466:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800046a:	bd30      	pop	{r4, r5, pc}
 800046c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000470:	bf3c      	itt	cc
 8000472:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000476:	bd30      	popcc	{r4, r5, pc}
 8000478:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800047c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000480:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000484:	f04f 0000 	mov.w	r0, #0
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf1a      	itte	ne
 8000490:	4619      	movne	r1, r3
 8000492:	4610      	movne	r0, r2
 8000494:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000498:	bf1c      	itt	ne
 800049a:	460b      	movne	r3, r1
 800049c:	4602      	movne	r2, r0
 800049e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004a2:	bf06      	itte	eq
 80004a4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004a8:	ea91 0f03 	teqeq	r1, r3
 80004ac:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004b0:	bd30      	pop	{r4, r5, pc}
 80004b2:	bf00      	nop

080004b4 <__aeabi_ui2d>:
 80004b4:	f090 0f00 	teq	r0, #0
 80004b8:	bf04      	itt	eq
 80004ba:	2100      	moveq	r1, #0
 80004bc:	4770      	bxeq	lr
 80004be:	b530      	push	{r4, r5, lr}
 80004c0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004c4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c8:	f04f 0500 	mov.w	r5, #0
 80004cc:	f04f 0100 	mov.w	r1, #0
 80004d0:	e750      	b.n	8000374 <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_i2d>:
 80004d4:	f090 0f00 	teq	r0, #0
 80004d8:	bf04      	itt	eq
 80004da:	2100      	moveq	r1, #0
 80004dc:	4770      	bxeq	lr
 80004de:	b530      	push	{r4, r5, lr}
 80004e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004e8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004ec:	bf48      	it	mi
 80004ee:	4240      	negmi	r0, r0
 80004f0:	f04f 0100 	mov.w	r1, #0
 80004f4:	e73e      	b.n	8000374 <__adddf3+0x138>
 80004f6:	bf00      	nop

080004f8 <__aeabi_f2d>:
 80004f8:	0042      	lsls	r2, r0, #1
 80004fa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004fe:	ea4f 0131 	mov.w	r1, r1, rrx
 8000502:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000506:	bf1f      	itttt	ne
 8000508:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800050c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000510:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000514:	4770      	bxne	lr
 8000516:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800051a:	bf08      	it	eq
 800051c:	4770      	bxeq	lr
 800051e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000522:	bf04      	itt	eq
 8000524:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000528:	4770      	bxeq	lr
 800052a:	b530      	push	{r4, r5, lr}
 800052c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000530:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000534:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000538:	e71c      	b.n	8000374 <__adddf3+0x138>
 800053a:	bf00      	nop

0800053c <__aeabi_ul2d>:
 800053c:	ea50 0201 	orrs.w	r2, r0, r1
 8000540:	bf08      	it	eq
 8000542:	4770      	bxeq	lr
 8000544:	b530      	push	{r4, r5, lr}
 8000546:	f04f 0500 	mov.w	r5, #0
 800054a:	e00a      	b.n	8000562 <__aeabi_l2d+0x16>

0800054c <__aeabi_l2d>:
 800054c:	ea50 0201 	orrs.w	r2, r0, r1
 8000550:	bf08      	it	eq
 8000552:	4770      	bxeq	lr
 8000554:	b530      	push	{r4, r5, lr}
 8000556:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800055a:	d502      	bpl.n	8000562 <__aeabi_l2d+0x16>
 800055c:	4240      	negs	r0, r0
 800055e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000562:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000566:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800056a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800056e:	f43f aed8 	beq.w	8000322 <__adddf3+0xe6>
 8000572:	f04f 0203 	mov.w	r2, #3
 8000576:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800057a:	bf18      	it	ne
 800057c:	3203      	addne	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800058a:	f1c2 0320 	rsb	r3, r2, #32
 800058e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000592:	fa20 f002 	lsr.w	r0, r0, r2
 8000596:	fa01 fe03 	lsl.w	lr, r1, r3
 800059a:	ea40 000e 	orr.w	r0, r0, lr
 800059e:	fa21 f102 	lsr.w	r1, r1, r2
 80005a2:	4414      	add	r4, r2
 80005a4:	e6bd      	b.n	8000322 <__adddf3+0xe6>
 80005a6:	bf00      	nop

080005a8 <__aeabi_dmul>:
 80005a8:	b570      	push	{r4, r5, r6, lr}
 80005aa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ae:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005b2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005b6:	bf1d      	ittte	ne
 80005b8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005bc:	ea94 0f0c 	teqne	r4, ip
 80005c0:	ea95 0f0c 	teqne	r5, ip
 80005c4:	f000 f8de 	bleq	8000784 <__aeabi_dmul+0x1dc>
 80005c8:	442c      	add	r4, r5
 80005ca:	ea81 0603 	eor.w	r6, r1, r3
 80005ce:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005d2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005d6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005da:	bf18      	it	ne
 80005dc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005e4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005e8:	d038      	beq.n	800065c <__aeabi_dmul+0xb4>
 80005ea:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ee:	f04f 0500 	mov.w	r5, #0
 80005f2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005f6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005fa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005fe:	f04f 0600 	mov.w	r6, #0
 8000602:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000606:	f09c 0f00 	teq	ip, #0
 800060a:	bf18      	it	ne
 800060c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000610:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000614:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000618:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800061c:	d204      	bcs.n	8000628 <__aeabi_dmul+0x80>
 800061e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000622:	416d      	adcs	r5, r5
 8000624:	eb46 0606 	adc.w	r6, r6, r6
 8000628:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800062c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000630:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000634:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000638:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800063c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000640:	bf88      	it	hi
 8000642:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000646:	d81e      	bhi.n	8000686 <__aeabi_dmul+0xde>
 8000648:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800064c:	bf08      	it	eq
 800064e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000652:	f150 0000 	adcs.w	r0, r0, #0
 8000656:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800065a:	bd70      	pop	{r4, r5, r6, pc}
 800065c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000660:	ea46 0101 	orr.w	r1, r6, r1
 8000664:	ea40 0002 	orr.w	r0, r0, r2
 8000668:	ea81 0103 	eor.w	r1, r1, r3
 800066c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000670:	bfc2      	ittt	gt
 8000672:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000676:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800067a:	bd70      	popgt	{r4, r5, r6, pc}
 800067c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000680:	f04f 0e00 	mov.w	lr, #0
 8000684:	3c01      	subs	r4, #1
 8000686:	f300 80ab 	bgt.w	80007e0 <__aeabi_dmul+0x238>
 800068a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800068e:	bfde      	ittt	le
 8000690:	2000      	movle	r0, #0
 8000692:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000696:	bd70      	pople	{r4, r5, r6, pc}
 8000698:	f1c4 0400 	rsb	r4, r4, #0
 800069c:	3c20      	subs	r4, #32
 800069e:	da35      	bge.n	800070c <__aeabi_dmul+0x164>
 80006a0:	340c      	adds	r4, #12
 80006a2:	dc1b      	bgt.n	80006dc <__aeabi_dmul+0x134>
 80006a4:	f104 0414 	add.w	r4, r4, #20
 80006a8:	f1c4 0520 	rsb	r5, r4, #32
 80006ac:	fa00 f305 	lsl.w	r3, r0, r5
 80006b0:	fa20 f004 	lsr.w	r0, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea40 0002 	orr.w	r0, r0, r2
 80006bc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006c0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006c8:	fa21 f604 	lsr.w	r6, r1, r4
 80006cc:	eb42 0106 	adc.w	r1, r2, r6
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f1c4 040c 	rsb	r4, r4, #12
 80006e0:	f1c4 0520 	rsb	r5, r4, #32
 80006e4:	fa00 f304 	lsl.w	r3, r0, r4
 80006e8:	fa20 f005 	lsr.w	r0, r0, r5
 80006ec:	fa01 f204 	lsl.w	r2, r1, r4
 80006f0:	ea40 0002 	orr.w	r0, r0, r2
 80006f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006f8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006fc:	f141 0100 	adc.w	r1, r1, #0
 8000700:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000704:	bf08      	it	eq
 8000706:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f1c4 0520 	rsb	r5, r4, #32
 8000710:	fa00 f205 	lsl.w	r2, r0, r5
 8000714:	ea4e 0e02 	orr.w	lr, lr, r2
 8000718:	fa20 f304 	lsr.w	r3, r0, r4
 800071c:	fa01 f205 	lsl.w	r2, r1, r5
 8000720:	ea43 0302 	orr.w	r3, r3, r2
 8000724:	fa21 f004 	lsr.w	r0, r1, r4
 8000728:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800072c:	fa21 f204 	lsr.w	r2, r1, r4
 8000730:	ea20 0002 	bic.w	r0, r0, r2
 8000734:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000738:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800073c:	bf08      	it	eq
 800073e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000742:	bd70      	pop	{r4, r5, r6, pc}
 8000744:	f094 0f00 	teq	r4, #0
 8000748:	d10f      	bne.n	800076a <__aeabi_dmul+0x1c2>
 800074a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800074e:	0040      	lsls	r0, r0, #1
 8000750:	eb41 0101 	adc.w	r1, r1, r1
 8000754:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000758:	bf08      	it	eq
 800075a:	3c01      	subeq	r4, #1
 800075c:	d0f7      	beq.n	800074e <__aeabi_dmul+0x1a6>
 800075e:	ea41 0106 	orr.w	r1, r1, r6
 8000762:	f095 0f00 	teq	r5, #0
 8000766:	bf18      	it	ne
 8000768:	4770      	bxne	lr
 800076a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800076e:	0052      	lsls	r2, r2, #1
 8000770:	eb43 0303 	adc.w	r3, r3, r3
 8000774:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000778:	bf08      	it	eq
 800077a:	3d01      	subeq	r5, #1
 800077c:	d0f7      	beq.n	800076e <__aeabi_dmul+0x1c6>
 800077e:	ea43 0306 	orr.w	r3, r3, r6
 8000782:	4770      	bx	lr
 8000784:	ea94 0f0c 	teq	r4, ip
 8000788:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800078c:	bf18      	it	ne
 800078e:	ea95 0f0c 	teqne	r5, ip
 8000792:	d00c      	beq.n	80007ae <__aeabi_dmul+0x206>
 8000794:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000798:	bf18      	it	ne
 800079a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800079e:	d1d1      	bne.n	8000744 <__aeabi_dmul+0x19c>
 80007a0:	ea81 0103 	eor.w	r1, r1, r3
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a8:	f04f 0000 	mov.w	r0, #0
 80007ac:	bd70      	pop	{r4, r5, r6, pc}
 80007ae:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007b2:	bf06      	itte	eq
 80007b4:	4610      	moveq	r0, r2
 80007b6:	4619      	moveq	r1, r3
 80007b8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007bc:	d019      	beq.n	80007f2 <__aeabi_dmul+0x24a>
 80007be:	ea94 0f0c 	teq	r4, ip
 80007c2:	d102      	bne.n	80007ca <__aeabi_dmul+0x222>
 80007c4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007c8:	d113      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007ca:	ea95 0f0c 	teq	r5, ip
 80007ce:	d105      	bne.n	80007dc <__aeabi_dmul+0x234>
 80007d0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007d4:	bf1c      	itt	ne
 80007d6:	4610      	movne	r0, r2
 80007d8:	4619      	movne	r1, r3
 80007da:	d10a      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007dc:	ea81 0103 	eor.w	r1, r1, r3
 80007e0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007e8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007ec:	f04f 0000 	mov.w	r0, #0
 80007f0:	bd70      	pop	{r4, r5, r6, pc}
 80007f2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007f6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007fa:	bd70      	pop	{r4, r5, r6, pc}

080007fc <__aeabi_ddiv>:
 80007fc:	b570      	push	{r4, r5, r6, lr}
 80007fe:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000802:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000806:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800080a:	bf1d      	ittte	ne
 800080c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000810:	ea94 0f0c 	teqne	r4, ip
 8000814:	ea95 0f0c 	teqne	r5, ip
 8000818:	f000 f8a7 	bleq	800096a <__aeabi_ddiv+0x16e>
 800081c:	eba4 0405 	sub.w	r4, r4, r5
 8000820:	ea81 0e03 	eor.w	lr, r1, r3
 8000824:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000828:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800082c:	f000 8088 	beq.w	8000940 <__aeabi_ddiv+0x144>
 8000830:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000834:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000838:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800083c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000840:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000844:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000848:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800084c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000850:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000854:	429d      	cmp	r5, r3
 8000856:	bf08      	it	eq
 8000858:	4296      	cmpeq	r6, r2
 800085a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800085e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000862:	d202      	bcs.n	800086a <__aeabi_ddiv+0x6e>
 8000864:	085b      	lsrs	r3, r3, #1
 8000866:	ea4f 0232 	mov.w	r2, r2, rrx
 800086a:	1ab6      	subs	r6, r6, r2
 800086c:	eb65 0503 	sbc.w	r5, r5, r3
 8000870:	085b      	lsrs	r3, r3, #1
 8000872:	ea4f 0232 	mov.w	r2, r2, rrx
 8000876:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800087a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ce:	bf22      	ittt	cs
 80008d0:	1ab6      	subcs	r6, r6, r2
 80008d2:	4675      	movcs	r5, lr
 80008d4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008d8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008dc:	d018      	beq.n	8000910 <__aeabi_ddiv+0x114>
 80008de:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008e2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008e6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008ea:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ee:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008f2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008f6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008fa:	d1c0      	bne.n	800087e <__aeabi_ddiv+0x82>
 80008fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000900:	d10b      	bne.n	800091a <__aeabi_ddiv+0x11e>
 8000902:	ea41 0100 	orr.w	r1, r1, r0
 8000906:	f04f 0000 	mov.w	r0, #0
 800090a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800090e:	e7b6      	b.n	800087e <__aeabi_ddiv+0x82>
 8000910:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000914:	bf04      	itt	eq
 8000916:	4301      	orreq	r1, r0
 8000918:	2000      	moveq	r0, #0
 800091a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800091e:	bf88      	it	hi
 8000920:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000924:	f63f aeaf 	bhi.w	8000686 <__aeabi_dmul+0xde>
 8000928:	ebb5 0c03 	subs.w	ip, r5, r3
 800092c:	bf04      	itt	eq
 800092e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000932:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000936:	f150 0000 	adcs.w	r0, r0, #0
 800093a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800093e:	bd70      	pop	{r4, r5, r6, pc}
 8000940:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000944:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000948:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800094c:	bfc2      	ittt	gt
 800094e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000952:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000956:	bd70      	popgt	{r4, r5, r6, pc}
 8000958:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800095c:	f04f 0e00 	mov.w	lr, #0
 8000960:	3c01      	subs	r4, #1
 8000962:	e690      	b.n	8000686 <__aeabi_dmul+0xde>
 8000964:	ea45 0e06 	orr.w	lr, r5, r6
 8000968:	e68d      	b.n	8000686 <__aeabi_dmul+0xde>
 800096a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800096e:	ea94 0f0c 	teq	r4, ip
 8000972:	bf08      	it	eq
 8000974:	ea95 0f0c 	teqeq	r5, ip
 8000978:	f43f af3b 	beq.w	80007f2 <__aeabi_dmul+0x24a>
 800097c:	ea94 0f0c 	teq	r4, ip
 8000980:	d10a      	bne.n	8000998 <__aeabi_ddiv+0x19c>
 8000982:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000986:	f47f af34 	bne.w	80007f2 <__aeabi_dmul+0x24a>
 800098a:	ea95 0f0c 	teq	r5, ip
 800098e:	f47f af25 	bne.w	80007dc <__aeabi_dmul+0x234>
 8000992:	4610      	mov	r0, r2
 8000994:	4619      	mov	r1, r3
 8000996:	e72c      	b.n	80007f2 <__aeabi_dmul+0x24a>
 8000998:	ea95 0f0c 	teq	r5, ip
 800099c:	d106      	bne.n	80009ac <__aeabi_ddiv+0x1b0>
 800099e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009a2:	f43f aefd 	beq.w	80007a0 <__aeabi_dmul+0x1f8>
 80009a6:	4610      	mov	r0, r2
 80009a8:	4619      	mov	r1, r3
 80009aa:	e722      	b.n	80007f2 <__aeabi_dmul+0x24a>
 80009ac:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b0:	bf18      	it	ne
 80009b2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009b6:	f47f aec5 	bne.w	8000744 <__aeabi_dmul+0x19c>
 80009ba:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009be:	f47f af0d 	bne.w	80007dc <__aeabi_dmul+0x234>
 80009c2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009c6:	f47f aeeb 	bne.w	80007a0 <__aeabi_dmul+0x1f8>
 80009ca:	e712      	b.n	80007f2 <__aeabi_dmul+0x24a>

080009cc <__gedf2>:
 80009cc:	f04f 3cff 	mov.w	ip, #4294967295
 80009d0:	e006      	b.n	80009e0 <__cmpdf2+0x4>
 80009d2:	bf00      	nop

080009d4 <__ledf2>:
 80009d4:	f04f 0c01 	mov.w	ip, #1
 80009d8:	e002      	b.n	80009e0 <__cmpdf2+0x4>
 80009da:	bf00      	nop

080009dc <__cmpdf2>:
 80009dc:	f04f 0c01 	mov.w	ip, #1
 80009e0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009e4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009e8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009ec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009f6:	d01b      	beq.n	8000a30 <__cmpdf2+0x54>
 80009f8:	b001      	add	sp, #4
 80009fa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009fe:	bf0c      	ite	eq
 8000a00:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a04:	ea91 0f03 	teqne	r1, r3
 8000a08:	bf02      	ittt	eq
 8000a0a:	ea90 0f02 	teqeq	r0, r2
 8000a0e:	2000      	moveq	r0, #0
 8000a10:	4770      	bxeq	lr
 8000a12:	f110 0f00 	cmn.w	r0, #0
 8000a16:	ea91 0f03 	teq	r1, r3
 8000a1a:	bf58      	it	pl
 8000a1c:	4299      	cmppl	r1, r3
 8000a1e:	bf08      	it	eq
 8000a20:	4290      	cmpeq	r0, r2
 8000a22:	bf2c      	ite	cs
 8000a24:	17d8      	asrcs	r0, r3, #31
 8000a26:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a2a:	f040 0001 	orr.w	r0, r0, #1
 8000a2e:	4770      	bx	lr
 8000a30:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a38:	d102      	bne.n	8000a40 <__cmpdf2+0x64>
 8000a3a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a3e:	d107      	bne.n	8000a50 <__cmpdf2+0x74>
 8000a40:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a44:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a48:	d1d6      	bne.n	80009f8 <__cmpdf2+0x1c>
 8000a4a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a4e:	d0d3      	beq.n	80009f8 <__cmpdf2+0x1c>
 8000a50:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a54:	4770      	bx	lr
 8000a56:	bf00      	nop

08000a58 <__aeabi_cdrcmple>:
 8000a58:	4684      	mov	ip, r0
 8000a5a:	4610      	mov	r0, r2
 8000a5c:	4662      	mov	r2, ip
 8000a5e:	468c      	mov	ip, r1
 8000a60:	4619      	mov	r1, r3
 8000a62:	4663      	mov	r3, ip
 8000a64:	e000      	b.n	8000a68 <__aeabi_cdcmpeq>
 8000a66:	bf00      	nop

08000a68 <__aeabi_cdcmpeq>:
 8000a68:	b501      	push	{r0, lr}
 8000a6a:	f7ff ffb7 	bl	80009dc <__cmpdf2>
 8000a6e:	2800      	cmp	r0, #0
 8000a70:	bf48      	it	mi
 8000a72:	f110 0f00 	cmnmi.w	r0, #0
 8000a76:	bd01      	pop	{r0, pc}

08000a78 <__aeabi_dcmpeq>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff fff4 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a80:	bf0c      	ite	eq
 8000a82:	2001      	moveq	r0, #1
 8000a84:	2000      	movne	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_dcmplt>:
 8000a8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a90:	f7ff ffea 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a94:	bf34      	ite	cc
 8000a96:	2001      	movcc	r0, #1
 8000a98:	2000      	movcs	r0, #0
 8000a9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_dcmple>:
 8000aa0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa4:	f7ff ffe0 	bl	8000a68 <__aeabi_cdcmpeq>
 8000aa8:	bf94      	ite	ls
 8000aaa:	2001      	movls	r0, #1
 8000aac:	2000      	movhi	r0, #0
 8000aae:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab2:	bf00      	nop

08000ab4 <__aeabi_dcmpge>:
 8000ab4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab8:	f7ff ffce 	bl	8000a58 <__aeabi_cdrcmple>
 8000abc:	bf94      	ite	ls
 8000abe:	2001      	movls	r0, #1
 8000ac0:	2000      	movhi	r0, #0
 8000ac2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_dcmpgt>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff ffc4 	bl	8000a58 <__aeabi_cdrcmple>
 8000ad0:	bf34      	ite	cc
 8000ad2:	2001      	movcc	r0, #1
 8000ad4:	2000      	movcs	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmpun>:
 8000adc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae4:	d102      	bne.n	8000aec <__aeabi_dcmpun+0x10>
 8000ae6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aea:	d10a      	bne.n	8000b02 <__aeabi_dcmpun+0x26>
 8000aec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af4:	d102      	bne.n	8000afc <__aeabi_dcmpun+0x20>
 8000af6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afa:	d102      	bne.n	8000b02 <__aeabi_dcmpun+0x26>
 8000afc:	f04f 0000 	mov.w	r0, #0
 8000b00:	4770      	bx	lr
 8000b02:	f04f 0001 	mov.w	r0, #1
 8000b06:	4770      	bx	lr

08000b08 <__aeabi_d2iz>:
 8000b08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b0c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b10:	d215      	bcs.n	8000b3e <__aeabi_d2iz+0x36>
 8000b12:	d511      	bpl.n	8000b38 <__aeabi_d2iz+0x30>
 8000b14:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b18:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b1c:	d912      	bls.n	8000b44 <__aeabi_d2iz+0x3c>
 8000b1e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b22:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b26:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b2a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b2e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b32:	bf18      	it	ne
 8000b34:	4240      	negne	r0, r0
 8000b36:	4770      	bx	lr
 8000b38:	f04f 0000 	mov.w	r0, #0
 8000b3c:	4770      	bx	lr
 8000b3e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b42:	d105      	bne.n	8000b50 <__aeabi_d2iz+0x48>
 8000b44:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b48:	bf08      	it	eq
 8000b4a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b4e:	4770      	bx	lr
 8000b50:	f04f 0000 	mov.w	r0, #0
 8000b54:	4770      	bx	lr
 8000b56:	bf00      	nop

08000b58 <LL_FLASH_GetUDN>:
  * @note   The 64-bit UID64 may be used by Firmware to derive BLE 48-bit Device Address EUI-48 or
  *         802.15.4 64-bit Device Address EUI-64.
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_FLASH_GetUDN(void)
{
 8000b58:	b480      	push	{r7}
 8000b5a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_REG(*((uint32_t *)UID64_BASE)));
 8000b5c:	4b03      	ldr	r3, [pc, #12]	; (8000b6c <LL_FLASH_GetUDN+0x14>)
 8000b5e:	681b      	ldr	r3, [r3, #0]
}
 8000b60:	4618      	mov	r0, r3
 8000b62:	46bd      	mov	sp, r7
 8000b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b68:	4770      	bx	lr
 8000b6a:	bf00      	nop
 8000b6c:	1fff7580 	.word	0x1fff7580

08000b70 <LL_FLASH_GetDeviceID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the device ID is 0x26
  * @retval Values between Min_Data=0x00 and Max_Data=0xFF (ex: Device ID is 0x26 fo STM32WB55x)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetDeviceID(void)
{
 8000b70:	b480      	push	{r7}
 8000b72:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_REG(*((uint32_t *)UID64_BASE + 1U))) & 0x000000FFU);
 8000b74:	4b03      	ldr	r3, [pc, #12]	; (8000b84 <LL_FLASH_GetDeviceID+0x14>)
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	b2db      	uxtb	r3, r3
}
 8000b7a:	4618      	mov	r0, r3
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b82:	4770      	bx	lr
 8000b84:	1fff7584 	.word	0x1fff7584

08000b88 <LL_FLASH_GetSTCompanyID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the ST Compagny ID is 0x0080E1
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFFFF (ex: ST Compagny ID is 0x0080E1)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetSTCompanyID(void)
{
 8000b88:	b480      	push	{r7}
 8000b8a:	af00      	add	r7, sp, #0
  return (uint32_t)(((READ_REG(*((uint32_t *)UID64_BASE + 1U))) >> 8U ) & 0x00FFFFFFU);
 8000b8c:	4b03      	ldr	r3, [pc, #12]	; (8000b9c <LL_FLASH_GetSTCompanyID+0x14>)
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	0a1b      	lsrs	r3, r3, #8
}
 8000b92:	4618      	mov	r0, r3
 8000b94:	46bd      	mov	sp, r7
 8000b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9a:	4770      	bx	lr
 8000b9c:	1fff7584 	.word	0x1fff7584

08000ba0 <APP_BLE_Init>:

/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void APP_BLE_Init( void )
{
 8000ba0:	b5b0      	push	{r4, r5, r7, lr}
 8000ba2:	b08c      	sub	sp, #48	; 0x30
 8000ba4:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APP_BLE_Init_1 */

/* USER CODE END APP_BLE_Init_1 */
  SHCI_C2_Ble_Init_Cmd_Packet_t ble_init_cmd_packet =
 8000ba6:	4b2b      	ldr	r3, [pc, #172]	; (8000c54 <APP_BLE_Init+0xb4>)
 8000ba8:	463c      	mov	r4, r7
 8000baa:	461d      	mov	r5, r3
 8000bac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000bae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000bb0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000bb2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000bb4:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000bb8:	c407      	stmia	r4!, {r0, r1, r2}
 8000bba:	7023      	strb	r3, [r4, #0]
  };

  /**
   * Initialize Ble Transport Layer
   */
  Ble_Tl_Init( );
 8000bbc:	f000 f9fe 	bl	8000fbc <Ble_Tl_Init>

  /**
   * Do not allow standby in the application
   */
  UTIL_LPM_SetOffMode(1 << CFG_LPM_APP_BLE, UTIL_LPM_DISABLE);
 8000bc0:	2101      	movs	r1, #1
 8000bc2:	2002      	movs	r0, #2
 8000bc4:	f010 ff82 	bl	8011acc <UTIL_LPM_SetOffMode>

  /**
   * Register the hci transport layer to handle BLE User Asynchronous Events
   */
  HciUserEvtProcessId = osThreadNew(HciUserEvtProcess, NULL, &HciUserEvtProcess_attr);
 8000bc8:	4a23      	ldr	r2, [pc, #140]	; (8000c58 <APP_BLE_Init+0xb8>)
 8000bca:	2100      	movs	r1, #0
 8000bcc:	4823      	ldr	r0, [pc, #140]	; (8000c5c <APP_BLE_Init+0xbc>)
 8000bce:	f00c fe25 	bl	800d81c <osThreadNew>
 8000bd2:	4602      	mov	r2, r0
 8000bd4:	4b22      	ldr	r3, [pc, #136]	; (8000c60 <APP_BLE_Init+0xc0>)
 8000bd6:	601a      	str	r2, [r3, #0]

  /**
   * Starts the BLE Stack on CPU2
   */
  if (SHCI_C2_BLE_Init( &ble_init_cmd_packet ) != SHCI_Success)
 8000bd8:	463b      	mov	r3, r7
 8000bda:	4618      	mov	r0, r3
 8000bdc:	f00b f9b2 	bl	800bf44 <SHCI_C2_BLE_Init>
 8000be0:	4603      	mov	r3, r0
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d001      	beq.n	8000bea <APP_BLE_Init+0x4a>
  {
    Error_Handler();
 8000be6:	f004 fc99 	bl	800551c <Error_Handler>
  }

  /**
   * Initialization of HCI & GATT & GAP layer
   */
  Ble_Hci_Gap_Gatt_Init();
 8000bea:	f000 fa0f 	bl	800100c <Ble_Hci_Gap_Gatt_Init>

  /**
   * Initialization of the BLE Services
   */
  SVCCTL_Init();
 8000bee:	f00a f955 	bl	800ae9c <SVCCTL_Init>

  /**
   * Initialization of the BLE App Context
   */
  BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 8000bf2:	4b1c      	ldr	r3, [pc, #112]	; (8000c64 <APP_BLE_Init+0xc4>)
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
  BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0xFFFF;
 8000bfa:	4b1a      	ldr	r3, [pc, #104]	; (8000c64 <APP_BLE_Init+0xc4>)
 8000bfc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000c00:	82da      	strh	r2, [r3, #22]
  /**
   * From here, all initialization are BLE application specific
   */
  AdvUpdateProcessId = osThreadNew(AdvUpdateProcess, NULL, &AdvUpdateProcess_attr);
 8000c02:	4a19      	ldr	r2, [pc, #100]	; (8000c68 <APP_BLE_Init+0xc8>)
 8000c04:	2100      	movs	r1, #0
 8000c06:	4819      	ldr	r0, [pc, #100]	; (8000c6c <APP_BLE_Init+0xcc>)
 8000c08:	f00c fe08 	bl	800d81c <osThreadNew>
 8000c0c:	4602      	mov	r2, r0
 8000c0e:	4b18      	ldr	r3, [pc, #96]	; (8000c70 <APP_BLE_Init+0xd0>)
 8000c10:	601a      	str	r2, [r3, #0]

  /**
   * Initialize HRS Application
   */
  //P2P FIX HRSAPP_Init();
  index_con_int = 0;
 8000c12:	4b18      	ldr	r3, [pc, #96]	; (8000c74 <APP_BLE_Init+0xd4>)
 8000c14:	2200      	movs	r2, #0
 8000c16:	701a      	strb	r2, [r3, #0]
  mutex = 1;
 8000c18:	4b17      	ldr	r3, [pc, #92]	; (8000c78 <APP_BLE_Init+0xd8>)
 8000c1a:	2201      	movs	r2, #1
 8000c1c:	701a      	strb	r2, [r3, #0]
  P2PS_APP_Init();
 8000c1e:	f000 fca3 	bl	8001568 <P2PS_APP_Init>

  /**
   * Create timer to handle the connection state machine
   */

  HW_TS_Create(CFG_TIM_PROC_ID_ISR, &(BleApplicationContext.Advertising_mgr_timer_Id), hw_ts_SingleShot, Adv_Mgr);
 8000c22:	4b16      	ldr	r3, [pc, #88]	; (8000c7c <APP_BLE_Init+0xdc>)
 8000c24:	2200      	movs	r2, #0
 8000c26:	4916      	ldr	r1, [pc, #88]	; (8000c80 <APP_BLE_Init+0xe0>)
 8000c28:	2000      	movs	r0, #0
 8000c2a:	f002 fc71 	bl	8003510 <HW_TS_Create>
  /**
   * Make device discoverable
   */

  //P2P FIX lines below
  BleApplicationContext.BleApplicationContext_legacy.advtServUUID[0] = NULL; //AD_TYPE_16_BIT_SERV_UUID;
 8000c2e:	4b0d      	ldr	r3, [pc, #52]	; (8000c64 <APP_BLE_Init+0xc4>)
 8000c30:	2200      	movs	r2, #0
 8000c32:	765a      	strb	r2, [r3, #25]
  BleApplicationContext.BleApplicationContext_legacy.advtServUUIDlen = 0;//1;
 8000c34:	4b0b      	ldr	r3, [pc, #44]	; (8000c64 <APP_BLE_Init+0xc4>)
 8000c36:	2200      	movs	r2, #0
 8000c38:	761a      	strb	r2, [r3, #24]
  //P2P FIX Add_Advertisment_Service_UUID(HEART_RATE_SERVICE_UUID);
  /* Initialize intervals for reconnexion without intervals update */
  AdvIntervalMin = CFG_FAST_CONN_ADV_INTERVAL_MIN;
 8000c3a:	4b12      	ldr	r3, [pc, #72]	; (8000c84 <APP_BLE_Init+0xe4>)
 8000c3c:	2280      	movs	r2, #128	; 0x80
 8000c3e:	801a      	strh	r2, [r3, #0]
  AdvIntervalMax = CFG_FAST_CONN_ADV_INTERVAL_MAX;
 8000c40:	4b11      	ldr	r3, [pc, #68]	; (8000c88 <APP_BLE_Init+0xe8>)
 8000c42:	22a0      	movs	r2, #160	; 0xa0
 8000c44:	801a      	strh	r2, [r3, #0]

  /**
  * Start to Advertise to be connected by Collector
   */
   Adv_Request(APP_BLE_FAST_ADV);
 8000c46:	2001      	movs	r0, #1
 8000c48:	f000 fabc 	bl	80011c4 <Adv_Request>

/* USER CODE BEGIN APP_BLE_Init_2 */

/* USER CODE END APP_BLE_Init_2 */
  return;
 8000c4c:	bf00      	nop
}
 8000c4e:	3730      	adds	r7, #48	; 0x30
 8000c50:	46bd      	mov	sp, r7
 8000c52:	bdb0      	pop	{r4, r5, r7, pc}
 8000c54:	0801471c 	.word	0x0801471c
 8000c58:	08014fdc 	.word	0x08014fdc
 8000c5c:	080013d9 	.word	0x080013d9
 8000c60:	20006018 	.word	0x20006018
 8000c64:	20000210 	.word	0x20000210
 8000c68:	08014fb8 	.word	0x08014fb8
 8000c6c:	080013b1 	.word	0x080013b1
 8000c70:	200060dc 	.word	0x200060dc
 8000c74:	20006029 	.word	0x20006029
 8000c78:	20006028 	.word	0x20006028
 8000c7c:	08001399 	.word	0x08001399
 8000c80:	20000291 	.word	0x20000291
 8000c84:	20000294 	.word	0x20000294
 8000c88:	20000296 	.word	0x20000296

08000c8c <SVCCTL_App_Notification>:

SVCCTL_UserEvtFlowStatus_t SVCCTL_App_Notification( void *pckt )
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b08c      	sub	sp, #48	; 0x30
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	6078      	str	r0, [r7, #4]
  hci_event_pckt *event_pckt;
  evt_le_meta_event *meta_evt;
  evt_blue_aci *blue_evt;
  hci_le_phy_update_complete_event_rp0 *evt_le_phy_update_complete;
  uint8_t TX_PHY, RX_PHY;
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 8000c94:	2342      	movs	r3, #66	; 0x42
 8000c96:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) pckt)->data;
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	3301      	adds	r3, #1
 8000c9e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* USER CODE BEGIN SVCCTL_App_Notification */

  /* USER CODE END SVCCTL_App_Notification */

  switch (event_pckt->evt)
 8000ca0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ca2:	781b      	ldrb	r3, [r3, #0]
 8000ca4:	2b3e      	cmp	r3, #62	; 0x3e
 8000ca6:	d028      	beq.n	8000cfa <SVCCTL_App_Notification+0x6e>
 8000ca8:	2bff      	cmp	r3, #255	; 0xff
 8000caa:	f000 80a5 	beq.w	8000df8 <SVCCTL_App_Notification+0x16c>
 8000cae:	2b05      	cmp	r3, #5
 8000cb0:	d000      	beq.n	8000cb4 <SVCCTL_App_Notification+0x28>

      default:
      /* USER CODE BEGIN ECODE_DEFAULT*/

      /* USER CODE END ECODE_DEFAULT*/
        break;
 8000cb2:	e145      	b.n	8000f40 <SVCCTL_App_Notification+0x2b4>
      disconnection_complete_event = (hci_disconnection_complete_event_rp0 *) event_pckt->data;
 8000cb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000cb6:	3302      	adds	r3, #2
 8000cb8:	613b      	str	r3, [r7, #16]
      if (disconnection_complete_event->Connection_Handle == BleApplicationContext.BleApplicationContext_legacy.connectionHandle)
 8000cba:	693b      	ldr	r3, [r7, #16]
 8000cbc:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8000cc0:	b29a      	uxth	r2, r3
 8000cc2:	4ba2      	ldr	r3, [pc, #648]	; (8000f4c <SVCCTL_App_Notification+0x2c0>)
 8000cc4:	8adb      	ldrh	r3, [r3, #22]
 8000cc6:	429a      	cmp	r2, r3
 8000cc8:	d109      	bne.n	8000cde <SVCCTL_App_Notification+0x52>
        BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0;
 8000cca:	4ba0      	ldr	r3, [pc, #640]	; (8000f4c <SVCCTL_App_Notification+0x2c0>)
 8000ccc:	2200      	movs	r2, #0
 8000cce:	82da      	strh	r2, [r3, #22]
        BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 8000cd0:	4b9e      	ldr	r3, [pc, #632]	; (8000f4c <SVCCTL_App_Notification+0x2c0>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
        APP_DBG_MSG("\r\n\r** DISCONNECTION EVENT WITH CLIENT \n");
 8000cd8:	489d      	ldr	r0, [pc, #628]	; (8000f50 <SVCCTL_App_Notification+0x2c4>)
 8000cda:	f011 fce3 	bl	80126a4 <puts>
      Adv_Request(APP_BLE_FAST_ADV);
 8000cde:	2001      	movs	r0, #1
 8000ce0:	f000 fa70 	bl	80011c4 <Adv_Request>
      handleNotification.P2P_Evt_Opcode = PEER_DISCON_HANDLE_EVT;
 8000ce4:	4b9b      	ldr	r3, [pc, #620]	; (8000f54 <SVCCTL_App_Notification+0x2c8>)
 8000ce6:	2201      	movs	r2, #1
 8000ce8:	701a      	strb	r2, [r3, #0]
      handleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 8000cea:	4b98      	ldr	r3, [pc, #608]	; (8000f4c <SVCCTL_App_Notification+0x2c0>)
 8000cec:	8ada      	ldrh	r2, [r3, #22]
 8000cee:	4b99      	ldr	r3, [pc, #612]	; (8000f54 <SVCCTL_App_Notification+0x2c8>)
 8000cf0:	805a      	strh	r2, [r3, #2]
      P2PS_APP_Notification(&handleNotification);
 8000cf2:	4898      	ldr	r0, [pc, #608]	; (8000f54 <SVCCTL_App_Notification+0x2c8>)
 8000cf4:	f000 fc24 	bl	8001540 <P2PS_APP_Notification>
    break; /* EVT_DISCONN_COMPLETE */
 8000cf8:	e122      	b.n	8000f40 <SVCCTL_App_Notification+0x2b4>
      meta_evt = (evt_le_meta_event*) event_pckt->data;
 8000cfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000cfc:	3302      	adds	r3, #2
 8000cfe:	61fb      	str	r3, [r7, #28]
      switch (meta_evt->subevent)
 8000d00:	69fb      	ldr	r3, [r7, #28]
 8000d02:	781b      	ldrb	r3, [r3, #0]
 8000d04:	2b03      	cmp	r3, #3
 8000d06:	d004      	beq.n	8000d12 <SVCCTL_App_Notification+0x86>
 8000d08:	2b0c      	cmp	r3, #12
 8000d0a:	d006      	beq.n	8000d1a <SVCCTL_App_Notification+0x8e>
 8000d0c:	2b01      	cmp	r3, #1
 8000d0e:	d042      	beq.n	8000d96 <SVCCTL_App_Notification+0x10a>
          break;
 8000d10:	e071      	b.n	8000df6 <SVCCTL_App_Notification+0x16a>
          APP_DBG_MSG("\r\n\r** CONNECTION UPDATE EVENT WITH CLIENT \n");
 8000d12:	4891      	ldr	r0, [pc, #580]	; (8000f58 <SVCCTL_App_Notification+0x2cc>)
 8000d14:	f011 fcc6 	bl	80126a4 <puts>
          break;
 8000d18:	e06d      	b.n	8000df6 <SVCCTL_App_Notification+0x16a>
          APP_DBG_MSG("EVT_UPDATE_PHY_COMPLETE \n");
 8000d1a:	4890      	ldr	r0, [pc, #576]	; (8000f5c <SVCCTL_App_Notification+0x2d0>)
 8000d1c:	f011 fcc2 	bl	80126a4 <puts>
          evt_le_phy_update_complete = (hci_le_phy_update_complete_event_rp0*)meta_evt->data;
 8000d20:	69fb      	ldr	r3, [r7, #28]
 8000d22:	3301      	adds	r3, #1
 8000d24:	61bb      	str	r3, [r7, #24]
          if (evt_le_phy_update_complete->Status == 0)
 8000d26:	69bb      	ldr	r3, [r7, #24]
 8000d28:	781b      	ldrb	r3, [r3, #0]
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d103      	bne.n	8000d36 <SVCCTL_App_Notification+0xaa>
            APP_DBG_MSG("EVT_UPDATE_PHY_COMPLETE, status ok \n");
 8000d2e:	488c      	ldr	r0, [pc, #560]	; (8000f60 <SVCCTL_App_Notification+0x2d4>)
 8000d30:	f011 fcb8 	bl	80126a4 <puts>
 8000d34:	e002      	b.n	8000d3c <SVCCTL_App_Notification+0xb0>
            APP_DBG_MSG("EVT_UPDATE_PHY_COMPLETE, status nok \n");
 8000d36:	488b      	ldr	r0, [pc, #556]	; (8000f64 <SVCCTL_App_Notification+0x2d8>)
 8000d38:	f011 fcb4 	bl	80126a4 <puts>
          ret = hci_le_read_phy(BleApplicationContext.BleApplicationContext_legacy.connectionHandle,&TX_PHY,&RX_PHY);
 8000d3c:	4b83      	ldr	r3, [pc, #524]	; (8000f4c <SVCCTL_App_Notification+0x2c0>)
 8000d3e:	8adb      	ldrh	r3, [r3, #22]
 8000d40:	f107 020e 	add.w	r2, r7, #14
 8000d44:	f107 010f 	add.w	r1, r7, #15
 8000d48:	4618      	mov	r0, r3
 8000d4a:	f00b f80c 	bl	800bd66 <hci_le_read_phy>
 8000d4e:	4603      	mov	r3, r0
 8000d50:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
          if (ret == BLE_STATUS_SUCCESS)
 8000d54:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d118      	bne.n	8000d8e <SVCCTL_App_Notification+0x102>
            APP_DBG_MSG("Read_PHY success \n");
 8000d5c:	4882      	ldr	r0, [pc, #520]	; (8000f68 <SVCCTL_App_Notification+0x2dc>)
 8000d5e:	f011 fca1 	bl	80126a4 <puts>
            if ((TX_PHY == TX_2M) && (RX_PHY == RX_2M))
 8000d62:	7bfb      	ldrb	r3, [r7, #15]
 8000d64:	2b02      	cmp	r3, #2
 8000d66:	d10a      	bne.n	8000d7e <SVCCTL_App_Notification+0xf2>
 8000d68:	7bbb      	ldrb	r3, [r7, #14]
 8000d6a:	2b02      	cmp	r3, #2
 8000d6c:	d107      	bne.n	8000d7e <SVCCTL_App_Notification+0xf2>
              APP_DBG_MSG("PHY Param  TX= %d, RX= %d \n", TX_PHY, RX_PHY);
 8000d6e:	7bfb      	ldrb	r3, [r7, #15]
 8000d70:	4619      	mov	r1, r3
 8000d72:	7bbb      	ldrb	r3, [r7, #14]
 8000d74:	461a      	mov	r2, r3
 8000d76:	487d      	ldr	r0, [pc, #500]	; (8000f6c <SVCCTL_App_Notification+0x2e0>)
 8000d78:	f011 fc20 	bl	80125bc <iprintf>
          break;
 8000d7c:	e03b      	b.n	8000df6 <SVCCTL_App_Notification+0x16a>
              APP_DBG_MSG("PHY Param  TX= %d, RX= %d \n", TX_PHY, RX_PHY);
 8000d7e:	7bfb      	ldrb	r3, [r7, #15]
 8000d80:	4619      	mov	r1, r3
 8000d82:	7bbb      	ldrb	r3, [r7, #14]
 8000d84:	461a      	mov	r2, r3
 8000d86:	4879      	ldr	r0, [pc, #484]	; (8000f6c <SVCCTL_App_Notification+0x2e0>)
 8000d88:	f011 fc18 	bl	80125bc <iprintf>
          break;
 8000d8c:	e033      	b.n	8000df6 <SVCCTL_App_Notification+0x16a>
            APP_DBG_MSG("Read conf not succeess \n");
 8000d8e:	4878      	ldr	r0, [pc, #480]	; (8000f70 <SVCCTL_App_Notification+0x2e4>)
 8000d90:	f011 fc88 	bl	80126a4 <puts>
          break;
 8000d94:	e02f      	b.n	8000df6 <SVCCTL_App_Notification+0x16a>
          connection_complete_event = (hci_le_connection_complete_event_rp0 *) meta_evt->data;
 8000d96:	69fb      	ldr	r3, [r7, #28]
 8000d98:	3301      	adds	r3, #1
 8000d9a:	617b      	str	r3, [r7, #20]
          HW_TS_Stop(BleApplicationContext.Advertising_mgr_timer_Id);
 8000d9c:	4b6b      	ldr	r3, [pc, #428]	; (8000f4c <SVCCTL_App_Notification+0x2c0>)
 8000d9e:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8000da2:	4618      	mov	r0, r3
 8000da4:	f002 fc2a 	bl	80035fc <HW_TS_Stop>
          APP_DBG_MSG("EVT_LE_CONN_COMPLETE for connection handle 0x%x\n", connection_complete_event->Connection_Handle);
 8000da8:	697b      	ldr	r3, [r7, #20]
 8000daa:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8000dae:	b29b      	uxth	r3, r3
 8000db0:	4619      	mov	r1, r3
 8000db2:	4870      	ldr	r0, [pc, #448]	; (8000f74 <SVCCTL_App_Notification+0x2e8>)
 8000db4:	f011 fc02 	bl	80125bc <iprintf>
          if (BleApplicationContext.Device_Connection_Status == APP_BLE_LP_CONNECTING)
 8000db8:	4b64      	ldr	r3, [pc, #400]	; (8000f4c <SVCCTL_App_Notification+0x2c0>)
 8000dba:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8000dbe:	2b04      	cmp	r3, #4
 8000dc0:	d104      	bne.n	8000dcc <SVCCTL_App_Notification+0x140>
            BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_CLIENT;
 8000dc2:	4b62      	ldr	r3, [pc, #392]	; (8000f4c <SVCCTL_App_Notification+0x2c0>)
 8000dc4:	2206      	movs	r2, #6
 8000dc6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
 8000dca:	e003      	b.n	8000dd4 <SVCCTL_App_Notification+0x148>
            BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_SERVER;
 8000dcc:	4b5f      	ldr	r3, [pc, #380]	; (8000f4c <SVCCTL_App_Notification+0x2c0>)
 8000dce:	2205      	movs	r2, #5
 8000dd0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
          BleApplicationContext.BleApplicationContext_legacy.connectionHandle = connection_complete_event->Connection_Handle;
 8000dd4:	697b      	ldr	r3, [r7, #20]
 8000dd6:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8000dda:	b29a      	uxth	r2, r3
 8000ddc:	4b5b      	ldr	r3, [pc, #364]	; (8000f4c <SVCCTL_App_Notification+0x2c0>)
 8000dde:	82da      	strh	r2, [r3, #22]
          handleNotification.P2P_Evt_Opcode = PEER_CONN_HANDLE_EVT;
 8000de0:	4b5c      	ldr	r3, [pc, #368]	; (8000f54 <SVCCTL_App_Notification+0x2c8>)
 8000de2:	2200      	movs	r2, #0
 8000de4:	701a      	strb	r2, [r3, #0]
          handleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 8000de6:	4b59      	ldr	r3, [pc, #356]	; (8000f4c <SVCCTL_App_Notification+0x2c0>)
 8000de8:	8ada      	ldrh	r2, [r3, #22]
 8000dea:	4b5a      	ldr	r3, [pc, #360]	; (8000f54 <SVCCTL_App_Notification+0x2c8>)
 8000dec:	805a      	strh	r2, [r3, #2]
          P2PS_APP_Notification(&handleNotification);
 8000dee:	4859      	ldr	r0, [pc, #356]	; (8000f54 <SVCCTL_App_Notification+0x2c8>)
 8000df0:	f000 fba6 	bl	8001540 <P2PS_APP_Notification>
        break; /* HCI_EVT_LE_CONN_COMPLETE */
 8000df4:	bf00      	nop
    break; /* HCI_EVT_LE_META_EVENT */
 8000df6:	e0a3      	b.n	8000f40 <SVCCTL_App_Notification+0x2b4>
      blue_evt = (evt_blue_aci*) event_pckt->data;
 8000df8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000dfa:	3302      	adds	r3, #2
 8000dfc:	627b      	str	r3, [r7, #36]	; 0x24
      switch (blue_evt->ecode)
 8000dfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e00:	881b      	ldrh	r3, [r3, #0]
 8000e02:	b29b      	uxth	r3, r3
 8000e04:	f240 4205 	movw	r2, #1029	; 0x405
 8000e08:	4293      	cmp	r3, r2
 8000e0a:	d04a      	beq.n	8000ea2 <SVCCTL_App_Notification+0x216>
 8000e0c:	f240 4205 	movw	r2, #1029	; 0x405
 8000e10:	4293      	cmp	r3, r2
 8000e12:	dc18      	bgt.n	8000e46 <SVCCTL_App_Notification+0x1ba>
 8000e14:	f240 4202 	movw	r2, #1026	; 0x402
 8000e18:	4293      	cmp	r3, r2
 8000e1a:	d033      	beq.n	8000e84 <SVCCTL_App_Notification+0x1f8>
 8000e1c:	f240 4202 	movw	r2, #1026	; 0x402
 8000e20:	4293      	cmp	r3, r2
 8000e22:	dc07      	bgt.n	8000e34 <SVCCTL_App_Notification+0x1a8>
 8000e24:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000e28:	d028      	beq.n	8000e7c <SVCCTL_App_Notification+0x1f0>
 8000e2a:	f240 4201 	movw	r2, #1025	; 0x401
 8000e2e:	4293      	cmp	r3, r2
 8000e30:	d069      	beq.n	8000f06 <SVCCTL_App_Notification+0x27a>
      break; /* EVT_VENDOR */
 8000e32:	e084      	b.n	8000f3e <SVCCTL_App_Notification+0x2b2>
      switch (blue_evt->ecode)
 8000e34:	f240 4203 	movw	r2, #1027	; 0x403
 8000e38:	4293      	cmp	r3, r2
 8000e3a:	d02a      	beq.n	8000e92 <SVCCTL_App_Notification+0x206>
 8000e3c:	f240 4204 	movw	r2, #1028	; 0x404
 8000e40:	4293      	cmp	r3, r2
 8000e42:	d02a      	beq.n	8000e9a <SVCCTL_App_Notification+0x20e>
      break; /* EVT_VENDOR */
 8000e44:	e07b      	b.n	8000f3e <SVCCTL_App_Notification+0x2b2>
      switch (blue_evt->ecode)
 8000e46:	f5b3 6f81 	cmp.w	r3, #1032	; 0x408
 8000e4a:	d03a      	beq.n	8000ec2 <SVCCTL_App_Notification+0x236>
 8000e4c:	f5b3 6f81 	cmp.w	r3, #1032	; 0x408
 8000e50:	dc08      	bgt.n	8000e64 <SVCCTL_App_Notification+0x1d8>
 8000e52:	f240 4206 	movw	r2, #1030	; 0x406
 8000e56:	4293      	cmp	r3, r2
 8000e58:	d02f      	beq.n	8000eba <SVCCTL_App_Notification+0x22e>
 8000e5a:	f240 4207 	movw	r2, #1031	; 0x407
 8000e5e:	4293      	cmp	r3, r2
 8000e60:	d069      	beq.n	8000f36 <SVCCTL_App_Notification+0x2aa>
      break; /* EVT_VENDOR */
 8000e62:	e06c      	b.n	8000f3e <SVCCTL_App_Notification+0x2b2>
      switch (blue_evt->ecode)
 8000e64:	f240 420a 	movw	r2, #1034	; 0x40a
 8000e68:	4293      	cmp	r3, r2
 8000e6a:	d02e      	beq.n	8000eca <SVCCTL_App_Notification+0x23e>
 8000e6c:	f240 420a 	movw	r2, #1034	; 0x40a
 8000e70:	4293      	cmp	r3, r2
 8000e72:	db2e      	blt.n	8000ed2 <SVCCTL_App_Notification+0x246>
 8000e74:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000e78:	d05a      	beq.n	8000f30 <SVCCTL_App_Notification+0x2a4>
      break; /* EVT_VENDOR */
 8000e7a:	e060      	b.n	8000f3e <SVCCTL_App_Notification+0x2b2>
        APP_DBG_MSG("\r\n\r** EVT_BLUE_GAP_LIMITED_DISCOVERABLE \n");
 8000e7c:	483e      	ldr	r0, [pc, #248]	; (8000f78 <SVCCTL_App_Notification+0x2ec>)
 8000e7e:	f011 fc11 	bl	80126a4 <puts>
          break; /* EVT_BLUE_GAP_LIMITED_DISCOVERABLE */
 8000e82:	e05c      	b.n	8000f3e <SVCCTL_App_Notification+0x2b2>
        APP_DBG_MSG("\r\n\r** EVT_BLUE_GAP_PASS_KEY_REQUEST \n");
 8000e84:	483d      	ldr	r0, [pc, #244]	; (8000f7c <SVCCTL_App_Notification+0x2f0>)
 8000e86:	f011 fc0d 	bl	80126a4 <puts>
        APP_DBG_MSG("\r\n\r** aci_gap_pass_key_resp \n");
 8000e8a:	483d      	ldr	r0, [pc, #244]	; (8000f80 <SVCCTL_App_Notification+0x2f4>)
 8000e8c:	f011 fc0a 	bl	80126a4 <puts>
          break; /* EVT_BLUE_GAP_PASS_KEY_REQUEST */
 8000e90:	e055      	b.n	8000f3e <SVCCTL_App_Notification+0x2b2>
        APP_DBG_MSG("\r\n\r** EVT_BLUE_GAP_AUTHORIZATION_REQUEST \n");
 8000e92:	483c      	ldr	r0, [pc, #240]	; (8000f84 <SVCCTL_App_Notification+0x2f8>)
 8000e94:	f011 fc06 	bl	80126a4 <puts>
          break; /* EVT_BLUE_GAP_AUTHORIZATION_REQUEST */
 8000e98:	e051      	b.n	8000f3e <SVCCTL_App_Notification+0x2b2>
        APP_DBG_MSG("\r\n\r** EVT_BLUE_GAP_SLAVE_SECURITY_INITIATED \n");
 8000e9a:	483b      	ldr	r0, [pc, #236]	; (8000f88 <SVCCTL_App_Notification+0x2fc>)
 8000e9c:	f011 fc02 	bl	80126a4 <puts>
          break; /* EVT_BLUE_GAP_SLAVE_SECURITY_INITIATED */
 8000ea0:	e04d      	b.n	8000f3e <SVCCTL_App_Notification+0x2b2>
        APP_DBG_MSG("\r\n\r** EVT_BLUE_GAP_BOND_LOST \n");
 8000ea2:	483a      	ldr	r0, [pc, #232]	; (8000f8c <SVCCTL_App_Notification+0x300>)
 8000ea4:	f011 fbfe 	bl	80126a4 <puts>
          aci_gap_allow_rebond(BleApplicationContext.BleApplicationContext_legacy.connectionHandle);
 8000ea8:	4b28      	ldr	r3, [pc, #160]	; (8000f4c <SVCCTL_App_Notification+0x2c0>)
 8000eaa:	8adb      	ldrh	r3, [r3, #22]
 8000eac:	4618      	mov	r0, r3
 8000eae:	f00a fb90 	bl	800b5d2 <aci_gap_allow_rebond>
        APP_DBG_MSG("\r\n\r** Send allow rebond \n");
 8000eb2:	4837      	ldr	r0, [pc, #220]	; (8000f90 <SVCCTL_App_Notification+0x304>)
 8000eb4:	f011 fbf6 	bl	80126a4 <puts>
          break; /* EVT_BLUE_GAP_BOND_LOST */
 8000eb8:	e041      	b.n	8000f3e <SVCCTL_App_Notification+0x2b2>
        APP_DBG_MSG("\r\n\r** EVT_BLUE_GAP_DEVICE_FOUND \n");
 8000eba:	4836      	ldr	r0, [pc, #216]	; (8000f94 <SVCCTL_App_Notification+0x308>)
 8000ebc:	f011 fbf2 	bl	80126a4 <puts>
          break; /* EVT_BLUE_GAP_DEVICE_FOUND */
 8000ec0:	e03d      	b.n	8000f3e <SVCCTL_App_Notification+0x2b2>
         APP_DBG_MSG("\r\n\r** EVT_BLUE_GAP_DEVICE_FOUND \n");
 8000ec2:	4834      	ldr	r0, [pc, #208]	; (8000f94 <SVCCTL_App_Notification+0x308>)
 8000ec4:	f011 fbee 	bl	80126a4 <puts>
          break; /* EVT_BLUE_GAP_DEVICE_FOUND */
 8000ec8:	e039      	b.n	8000f3e <SVCCTL_App_Notification+0x2b2>
         APP_DBG_MSG("\r\n\r** EVT_BLUE_GAP_KEYPRESS_NOTIFICATION \n");
 8000eca:	4833      	ldr	r0, [pc, #204]	; (8000f98 <SVCCTL_App_Notification+0x30c>)
 8000ecc:	f011 fbea 	bl	80126a4 <puts>
          break; /* EVT_BLUE_GAP_KEY_PRESS_NOTIFICATION */    
 8000ed0:	e035      	b.n	8000f3e <SVCCTL_App_Notification+0x2b2>
                      ((aci_gap_numeric_comparison_value_event_rp0 *)(blue_evt->data))->Numeric_Value);
 8000ed2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ed4:	3302      	adds	r3, #2
          APP_DBG_MSG("numeric_value = %ld\n",
 8000ed6:	f8d3 3002 	ldr.w	r3, [r3, #2]
 8000eda:	4619      	mov	r1, r3
 8000edc:	482f      	ldr	r0, [pc, #188]	; (8000f9c <SVCCTL_App_Notification+0x310>)
 8000ede:	f011 fb6d 	bl	80125bc <iprintf>
                      ((aci_gap_numeric_comparison_value_event_rp0 *)(blue_evt->data))->Numeric_Value);
 8000ee2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ee4:	3302      	adds	r3, #2
          APP_DBG_MSG("Hex_value = %lx\n",
 8000ee6:	f8d3 3002 	ldr.w	r3, [r3, #2]
 8000eea:	4619      	mov	r1, r3
 8000eec:	482c      	ldr	r0, [pc, #176]	; (8000fa0 <SVCCTL_App_Notification+0x314>)
 8000eee:	f011 fb65 	bl	80125bc <iprintf>
          aci_gap_numeric_comparison_value_confirm_yesno(BleApplicationContext.BleApplicationContext_legacy.connectionHandle, 1); /* CONFIRM_YES = 1 */
 8000ef2:	4b16      	ldr	r3, [pc, #88]	; (8000f4c <SVCCTL_App_Notification+0x2c0>)
 8000ef4:	8adb      	ldrh	r3, [r3, #22]
 8000ef6:	2101      	movs	r1, #1
 8000ef8:	4618      	mov	r0, r3
 8000efa:	f00a fbb4 	bl	800b666 <aci_gap_numeric_comparison_value_confirm_yesno>
          APP_DBG_MSG("\r\n\r** aci_gap_numeric_comparison_value_confirm_yesno-->YES \n");
 8000efe:	4829      	ldr	r0, [pc, #164]	; (8000fa4 <SVCCTL_App_Notification+0x318>)
 8000f00:	f011 fbd0 	bl	80126a4 <puts>
          break;
 8000f04:	e01b      	b.n	8000f3e <SVCCTL_App_Notification+0x2b2>
            pairing_complete = (aci_gap_pairing_complete_event_rp0*)blue_evt->data;
 8000f06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f08:	3302      	adds	r3, #2
 8000f0a:	623b      	str	r3, [r7, #32]
            APP_DBG_MSG("BLE_CTRL_App_Notification: EVT_BLUE_GAP_PAIRING_CMPLT, pairing_complete->Status = %d\n",pairing_complete->Status);
 8000f0c:	6a3b      	ldr	r3, [r7, #32]
 8000f0e:	789b      	ldrb	r3, [r3, #2]
 8000f10:	4619      	mov	r1, r3
 8000f12:	4825      	ldr	r0, [pc, #148]	; (8000fa8 <SVCCTL_App_Notification+0x31c>)
 8000f14:	f011 fb52 	bl	80125bc <iprintf>
            if (pairing_complete->Status == 0)
 8000f18:	6a3b      	ldr	r3, [r7, #32]
 8000f1a:	789b      	ldrb	r3, [r3, #2]
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d103      	bne.n	8000f28 <SVCCTL_App_Notification+0x29c>
              APP_DBG_MSG("\r\n\r** Pairing OK \n");
 8000f20:	4822      	ldr	r0, [pc, #136]	; (8000fac <SVCCTL_App_Notification+0x320>)
 8000f22:	f011 fbbf 	bl	80126a4 <puts>
           break;    
 8000f26:	e00a      	b.n	8000f3e <SVCCTL_App_Notification+0x2b2>
              APP_DBG_MSG("\r\n\r** Pairing KO \n");
 8000f28:	4821      	ldr	r0, [pc, #132]	; (8000fb0 <SVCCTL_App_Notification+0x324>)
 8000f2a:	f011 fbbb 	bl	80126a4 <puts>
           break;    
 8000f2e:	e006      	b.n	8000f3e <SVCCTL_App_Notification+0x2b2>
          mutex = 1;
 8000f30:	4b20      	ldr	r3, [pc, #128]	; (8000fb4 <SVCCTL_App_Notification+0x328>)
 8000f32:	2201      	movs	r2, #1
 8000f34:	701a      	strb	r2, [r3, #0]
        APP_DBG_MSG("\r\n\r** EVT_BLUE_GAP_PROCEDURE_COMPLETE \n");
 8000f36:	4820      	ldr	r0, [pc, #128]	; (8000fb8 <SVCCTL_App_Notification+0x32c>)
 8000f38:	f011 fbb4 	bl	80126a4 <puts>
          break; /* EVT_BLUE_GAP_PROCEDURE_COMPLETE */
 8000f3c:	bf00      	nop
      break; /* EVT_VENDOR */
 8000f3e:	bf00      	nop
  }

  return (SVCCTL_UserEvtFlowEnable);
 8000f40:	2301      	movs	r3, #1
}
 8000f42:	4618      	mov	r0, r3
 8000f44:	3730      	adds	r7, #48	; 0x30
 8000f46:	46bd      	mov	sp, r7
 8000f48:	bd80      	pop	{r7, pc}
 8000f4a:	bf00      	nop
 8000f4c:	20000210 	.word	0x20000210
 8000f50:	0801474c 	.word	0x0801474c
 8000f54:	2000601c 	.word	0x2000601c
 8000f58:	08014774 	.word	0x08014774
 8000f5c:	080147a0 	.word	0x080147a0
 8000f60:	080147bc 	.word	0x080147bc
 8000f64:	080147e0 	.word	0x080147e0
 8000f68:	08014808 	.word	0x08014808
 8000f6c:	0801481c 	.word	0x0801481c
 8000f70:	08014838 	.word	0x08014838
 8000f74:	08014850 	.word	0x08014850
 8000f78:	08014884 	.word	0x08014884
 8000f7c:	080148b0 	.word	0x080148b0
 8000f80:	080148d8 	.word	0x080148d8
 8000f84:	080148f8 	.word	0x080148f8
 8000f88:	08014924 	.word	0x08014924
 8000f8c:	08014954 	.word	0x08014954
 8000f90:	08014974 	.word	0x08014974
 8000f94:	08014990 	.word	0x08014990
 8000f98:	080149b4 	.word	0x080149b4
 8000f9c:	080149e0 	.word	0x080149e0
 8000fa0:	080149f8 	.word	0x080149f8
 8000fa4:	08014a0c 	.word	0x08014a0c
 8000fa8:	08014a48 	.word	0x08014a48
 8000fac:	08014aa0 	.word	0x08014aa0
 8000fb0:	08014ab4 	.word	0x08014ab4
 8000fb4:	20006028 	.word	0x20006028
 8000fb8:	08014ac8 	.word	0x08014ac8

08000fbc <Ble_Tl_Init>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Ble_Tl_Init( void )
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b082      	sub	sp, #8
 8000fc0:	af00      	add	r7, sp, #0
  HCI_TL_HciInitConf_t Hci_Tl_Init_Conf;

  MtxHciId = osMutexNew( NULL );
 8000fc2:	2000      	movs	r0, #0
 8000fc4:	f00c fdf4 	bl	800dbb0 <osMutexNew>
 8000fc8:	4602      	mov	r2, r0
 8000fca:	4b0b      	ldr	r3, [pc, #44]	; (8000ff8 <Ble_Tl_Init+0x3c>)
 8000fcc:	601a      	str	r2, [r3, #0]
  SemHciId = osSemaphoreNew( 1, 0, NULL ); /*< Create the semaphore and make it busy at initialization */
 8000fce:	2200      	movs	r2, #0
 8000fd0:	2100      	movs	r1, #0
 8000fd2:	2001      	movs	r0, #1
 8000fd4:	f00c ff34 	bl	800de40 <osSemaphoreNew>
 8000fd8:	4602      	mov	r2, r0
 8000fda:	4b08      	ldr	r3, [pc, #32]	; (8000ffc <Ble_Tl_Init+0x40>)
 8000fdc:	601a      	str	r2, [r3, #0]

  Hci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&BleCmdBuffer;
 8000fde:	4b08      	ldr	r3, [pc, #32]	; (8001000 <Ble_Tl_Init+0x44>)
 8000fe0:	603b      	str	r3, [r7, #0]
  Hci_Tl_Init_Conf.StatusNotCallBack = BLE_StatusNot;
 8000fe2:	4b08      	ldr	r3, [pc, #32]	; (8001004 <Ble_Tl_Init+0x48>)
 8000fe4:	607b      	str	r3, [r7, #4]
  hci_init(BLE_UserEvtRx, (void*) &Hci_Tl_Init_Conf);
 8000fe6:	463b      	mov	r3, r7
 8000fe8:	4619      	mov	r1, r3
 8000fea:	4807      	ldr	r0, [pc, #28]	; (8001008 <Ble_Tl_Init+0x4c>)
 8000fec:	f00a ffd8 	bl	800bfa0 <hci_init>

  return;
 8000ff0:	bf00      	nop
}
 8000ff2:	3708      	adds	r7, #8
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	bd80      	pop	{r7, pc}
 8000ff8:	2000602c 	.word	0x2000602c
 8000ffc:	20006014 	.word	0x20006014
 8001000:	20030028 	.word	0x20030028
 8001004:	08001491 	.word	0x08001491
 8001008:	08001459 	.word	0x08001459

0800100c <Ble_Hci_Gap_Gatt_Init>:

static void Ble_Hci_Gap_Gatt_Init(void){
 800100c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800100e:	b08f      	sub	sp, #60	; 0x3c
 8001010:	af06      	add	r7, sp, #24

  uint8_t role;
  uint16_t gap_service_handle, gap_dev_name_char_handle, gap_appearance_char_handle;
  const uint8_t *bd_addr;
  uint32_t srd_bd_addr[2];
  uint16_t appearance[1] = { BLE_CFG_GAP_APPEARANCE };
 8001012:	f44f 7350 	mov.w	r3, #832	; 0x340
 8001016:	803b      	strh	r3, [r7, #0]

  /**
   * Initialize HCI layer
   */
  /*HCI Reset to synchronise BLE Stack*/
  hci_reset();
 8001018:	f00a fe81 	bl	800bd1e <hci_reset>

  /**
   * Write the BD Address
   */

  bd_addr = BleGetBdAddress();
 800101c:	f000 f978 	bl	8001310 <BleGetBdAddress>
 8001020:	61f8      	str	r0, [r7, #28]
  aci_hal_write_config_data(CONFIG_DATA_PUBADDR_OFFSET,
 8001022:	69fa      	ldr	r2, [r7, #28]
 8001024:	2106      	movs	r1, #6
 8001026:	2000      	movs	r0, #0
 8001028:	f00a fdb9 	bl	800bb9e <aci_hal_write_config_data>
                            CONFIG_DATA_PUBADDR_LEN,
                            (uint8_t*) bd_addr);

  /* BLE MAC in ADV Packet */
  manuf_data[ sizeof(manuf_data)-6] = bd_addr[5];
 800102c:	69fb      	ldr	r3, [r7, #28]
 800102e:	795a      	ldrb	r2, [r3, #5]
 8001030:	4b5c      	ldr	r3, [pc, #368]	; (80011a4 <Ble_Hci_Gap_Gatt_Init+0x198>)
 8001032:	721a      	strb	r2, [r3, #8]
  manuf_data[ sizeof(manuf_data)-5] = bd_addr[4];
 8001034:	69fb      	ldr	r3, [r7, #28]
 8001036:	791a      	ldrb	r2, [r3, #4]
 8001038:	4b5a      	ldr	r3, [pc, #360]	; (80011a4 <Ble_Hci_Gap_Gatt_Init+0x198>)
 800103a:	725a      	strb	r2, [r3, #9]
  manuf_data[ sizeof(manuf_data)-4] = bd_addr[3];
 800103c:	69fb      	ldr	r3, [r7, #28]
 800103e:	78da      	ldrb	r2, [r3, #3]
 8001040:	4b58      	ldr	r3, [pc, #352]	; (80011a4 <Ble_Hci_Gap_Gatt_Init+0x198>)
 8001042:	729a      	strb	r2, [r3, #10]
  manuf_data[ sizeof(manuf_data)-3] = bd_addr[2];
 8001044:	69fb      	ldr	r3, [r7, #28]
 8001046:	789a      	ldrb	r2, [r3, #2]
 8001048:	4b56      	ldr	r3, [pc, #344]	; (80011a4 <Ble_Hci_Gap_Gatt_Init+0x198>)
 800104a:	72da      	strb	r2, [r3, #11]
  manuf_data[ sizeof(manuf_data)-2] = bd_addr[1];
 800104c:	69fb      	ldr	r3, [r7, #28]
 800104e:	785a      	ldrb	r2, [r3, #1]
 8001050:	4b54      	ldr	r3, [pc, #336]	; (80011a4 <Ble_Hci_Gap_Gatt_Init+0x198>)
 8001052:	731a      	strb	r2, [r3, #12]
  manuf_data[ sizeof(manuf_data)-1] = bd_addr[0];
 8001054:	69fb      	ldr	r3, [r7, #28]
 8001056:	781a      	ldrb	r2, [r3, #0]
 8001058:	4b52      	ldr	r3, [pc, #328]	; (80011a4 <Ble_Hci_Gap_Gatt_Init+0x198>)
 800105a:	735a      	strb	r2, [r3, #13]

  /**
   * Write Identity root key used to derive LTK and CSRK
   */
    aci_hal_write_config_data(CONFIG_DATA_IR_OFFSET,
 800105c:	4a52      	ldr	r2, [pc, #328]	; (80011a8 <Ble_Hci_Gap_Gatt_Init+0x19c>)
 800105e:	2110      	movs	r1, #16
 8001060:	2018      	movs	r0, #24
 8001062:	f00a fd9c 	bl	800bb9e <aci_hal_write_config_data>
                            (uint8_t*) BLE_CFG_IR_VALUE);

   /**
   * Write Encryption root key used to derive LTK and CSRK
   */
    aci_hal_write_config_data(CONFIG_DATA_ER_OFFSET,
 8001066:	4a51      	ldr	r2, [pc, #324]	; (80011ac <Ble_Hci_Gap_Gatt_Init+0x1a0>)
 8001068:	2110      	movs	r1, #16
 800106a:	2008      	movs	r0, #8
 800106c:	f00a fd97 	bl	800bb9e <aci_hal_write_config_data>
   * Static random Address
   * The two upper bits shall be set to 1
   * The lowest 32bits is read from the UDN to differentiate between devices
   * The RNG may be used to provide a random number on each power on
   */
  srd_bd_addr[1] =  0x0000ED6E;
 8001070:	f64e 536e 	movw	r3, #60782	; 0xed6e
 8001074:	60bb      	str	r3, [r7, #8]
  srd_bd_addr[0] =  LL_FLASH_GetUDN( );
 8001076:	f7ff fd6f 	bl	8000b58 <LL_FLASH_GetUDN>
 800107a:	4603      	mov	r3, r0
 800107c:	607b      	str	r3, [r7, #4]
  aci_hal_write_config_data( CONFIG_DATA_RANDOM_ADDRESS_OFFSET, CONFIG_DATA_RANDOM_ADDRESS_LEN, (uint8_t*)srd_bd_addr );
 800107e:	1d3b      	adds	r3, r7, #4
 8001080:	461a      	mov	r2, r3
 8001082:	2106      	movs	r1, #6
 8001084:	202e      	movs	r0, #46	; 0x2e
 8001086:	f00a fd8a 	bl	800bb9e <aci_hal_write_config_data>

  /**
   * Write Identity root key used to derive LTK and CSRK
   */
    aci_hal_write_config_data( CONFIG_DATA_IR_OFFSET, CONFIG_DATA_IR_LEN, (uint8_t*)BLE_CFG_IR_VALUE );
 800108a:	4a47      	ldr	r2, [pc, #284]	; (80011a8 <Ble_Hci_Gap_Gatt_Init+0x19c>)
 800108c:	2110      	movs	r1, #16
 800108e:	2018      	movs	r0, #24
 8001090:	f00a fd85 	bl	800bb9e <aci_hal_write_config_data>

   /**
   * Write Encryption root key used to derive LTK and CSRK
   */
    aci_hal_write_config_data( CONFIG_DATA_ER_OFFSET, CONFIG_DATA_ER_LEN, (uint8_t*)BLE_CFG_ER_VALUE );
 8001094:	4a45      	ldr	r2, [pc, #276]	; (80011ac <Ble_Hci_Gap_Gatt_Init+0x1a0>)
 8001096:	2110      	movs	r1, #16
 8001098:	2008      	movs	r0, #8
 800109a:	f00a fd80 	bl	800bb9e <aci_hal_write_config_data>

  /**
   * Set TX Power to 0dBm.
   */
  aci_hal_set_tx_power_level(1, CFG_TX_POWER);
 800109e:	2118      	movs	r1, #24
 80010a0:	2001      	movs	r0, #1
 80010a2:	f00a fde5 	bl	800bc70 <aci_hal_set_tx_power_level>

  /**
   * Initialize GATT interface
   */
  aci_gatt_init();
 80010a6:	f00a fb35 	bl	800b714 <aci_gatt_init>

  /**
   * Initialize GAP interface
   */
  role = 0;
 80010aa:	2300      	movs	r3, #0
 80010ac:	76fb      	strb	r3, [r7, #27]

#if (BLE_CFG_PERIPHERAL == 1)
  role |= GAP_PERIPHERAL_ROLE;
 80010ae:	7efb      	ldrb	r3, [r7, #27]
 80010b0:	f043 0301 	orr.w	r3, r3, #1
 80010b4:	76fb      	strb	r3, [r7, #27]

#if (BLE_CFG_CENTRAL == 1)
  role |= GAP_CENTRAL_ROLE;
#endif

  if (role > 0)
 80010b6:	7efb      	ldrb	r3, [r7, #27]
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d024      	beq.n	8001106 <Ble_Hci_Gap_Gatt_Init+0xfa>
  {
    const char *name = "DRAMSAY";
 80010bc:	4b3c      	ldr	r3, [pc, #240]	; (80011b0 <Ble_Hci_Gap_Gatt_Init+0x1a4>)
 80010be:	617b      	str	r3, [r7, #20]
    aci_gap_init(role, 0,
 80010c0:	f107 0212 	add.w	r2, r7, #18
 80010c4:	7ef8      	ldrb	r0, [r7, #27]
 80010c6:	f107 030e 	add.w	r3, r7, #14
 80010ca:	9301      	str	r3, [sp, #4]
 80010cc:	f107 0310 	add.w	r3, r7, #16
 80010d0:	9300      	str	r3, [sp, #0]
 80010d2:	4613      	mov	r3, r2
 80010d4:	2207      	movs	r2, #7
 80010d6:	2100      	movs	r1, #0
 80010d8:	f00a f970 	bl	800b3bc <aci_gap_init>
                 APPBLE_GAP_DEVICE_NAME_LENGTH,
                 &gap_service_handle, &gap_dev_name_char_handle, &gap_appearance_char_handle);

    if (aci_gatt_update_char_value(gap_service_handle, gap_dev_name_char_handle, 0, strlen(name), (uint8_t *) name))
 80010dc:	8a7c      	ldrh	r4, [r7, #18]
 80010de:	8a3d      	ldrh	r5, [r7, #16]
 80010e0:	6978      	ldr	r0, [r7, #20]
 80010e2:	f7ff f84d 	bl	8000180 <strlen>
 80010e6:	4603      	mov	r3, r0
 80010e8:	b2da      	uxtb	r2, r3
 80010ea:	697b      	ldr	r3, [r7, #20]
 80010ec:	9300      	str	r3, [sp, #0]
 80010ee:	4613      	mov	r3, r2
 80010f0:	2200      	movs	r2, #0
 80010f2:	4629      	mov	r1, r5
 80010f4:	4620      	mov	r0, r4
 80010f6:	f00a fccb 	bl	800ba90 <aci_gatt_update_char_value>
 80010fa:	4603      	mov	r3, r0
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d002      	beq.n	8001106 <Ble_Hci_Gap_Gatt_Init+0xfa>
    {
      BLE_DBG_SVCCTL_MSG("Device Name aci_gatt_update_char_value failed.\n");
 8001100:	482c      	ldr	r0, [pc, #176]	; (80011b4 <Ble_Hci_Gap_Gatt_Init+0x1a8>)
 8001102:	f011 facf 	bl	80126a4 <puts>
    }
  }

  if(aci_gatt_update_char_value(gap_service_handle,
 8001106:	8a78      	ldrh	r0, [r7, #18]
 8001108:	89f9      	ldrh	r1, [r7, #14]
 800110a:	463b      	mov	r3, r7
 800110c:	9300      	str	r3, [sp, #0]
 800110e:	2302      	movs	r3, #2
 8001110:	2200      	movs	r2, #0
 8001112:	f00a fcbd 	bl	800ba90 <aci_gatt_update_char_value>
 8001116:	4603      	mov	r3, r0
 8001118:	2b00      	cmp	r3, #0
 800111a:	d002      	beq.n	8001122 <Ble_Hci_Gap_Gatt_Init+0x116>
                                gap_appearance_char_handle,
                                0,
                                2,
                                (uint8_t *)&appearance))
  {
    BLE_DBG_SVCCTL_MSG("Appearance aci_gatt_update_char_value failed.\n");
 800111c:	4826      	ldr	r0, [pc, #152]	; (80011b8 <Ble_Hci_Gap_Gatt_Init+0x1ac>)
 800111e:	f011 fac1 	bl	80126a4 <puts>
  }
  /**
   * Initialize Default PHY
   */
  hci_le_set_default_phy(ALL_PHYS_PREFERENCE,TX_2M_PREFERRED,RX_2M_PREFERRED);
 8001122:	2202      	movs	r2, #2
 8001124:	2102      	movs	r1, #2
 8001126:	2000      	movs	r0, #0
 8001128:	f00a fe85 	bl	800be36 <hci_le_set_default_phy>

  /**
   * Initialize IO capability
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability = CFG_IO_CAPABILITY;
 800112c:	4b23      	ldr	r3, [pc, #140]	; (80011bc <Ble_Hci_Gap_Gatt_Init+0x1b0>)
 800112e:	2201      	movs	r2, #1
 8001130:	701a      	strb	r2, [r3, #0]
  aci_gap_set_io_capability(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability);
 8001132:	4b22      	ldr	r3, [pc, #136]	; (80011bc <Ble_Hci_Gap_Gatt_Init+0x1b0>)
 8001134:	781b      	ldrb	r3, [r3, #0]
 8001136:	4618      	mov	r0, r3
 8001138:	f00a f84e 	bl	800b1d8 <aci_gap_set_io_capability>

  /**
   * Initialize authentication
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.mitm_mode = CFG_MITM_PROTECTION;
 800113c:	4b1f      	ldr	r3, [pc, #124]	; (80011bc <Ble_Hci_Gap_Gatt_Init+0x1b0>)
 800113e:	2201      	movs	r2, #1
 8001140:	705a      	strb	r2, [r3, #1]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMin = CFG_ENCRYPTION_KEY_SIZE_MIN;
 8001142:	4b1e      	ldr	r3, [pc, #120]	; (80011bc <Ble_Hci_Gap_Gatt_Init+0x1b0>)
 8001144:	2208      	movs	r2, #8
 8001146:	711a      	strb	r2, [r3, #4]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMax = CFG_ENCRYPTION_KEY_SIZE_MAX;
 8001148:	4b1c      	ldr	r3, [pc, #112]	; (80011bc <Ble_Hci_Gap_Gatt_Init+0x1b0>)
 800114a:	2210      	movs	r2, #16
 800114c:	715a      	strb	r2, [r3, #5]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Use_Fixed_Pin = CFG_USED_FIXED_PIN;
 800114e:	4b1b      	ldr	r3, [pc, #108]	; (80011bc <Ble_Hci_Gap_Gatt_Init+0x1b0>)
 8001150:	2200      	movs	r2, #0
 8001152:	70da      	strb	r2, [r3, #3]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Fixed_Pin = CFG_FIXED_PIN;
 8001154:	4b19      	ldr	r3, [pc, #100]	; (80011bc <Ble_Hci_Gap_Gatt_Init+0x1b0>)
 8001156:	4a1a      	ldr	r2, [pc, #104]	; (80011c0 <Ble_Hci_Gap_Gatt_Init+0x1b4>)
 8001158:	609a      	str	r2, [r3, #8]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode = CFG_BONDING_MODE;
 800115a:	4b18      	ldr	r3, [pc, #96]	; (80011bc <Ble_Hci_Gap_Gatt_Init+0x1b0>)
 800115c:	2201      	movs	r2, #1
 800115e:	709a      	strb	r2, [r3, #2]

  aci_gap_set_authentication_requirement(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode,
 8001160:	4b16      	ldr	r3, [pc, #88]	; (80011bc <Ble_Hci_Gap_Gatt_Init+0x1b0>)
 8001162:	789d      	ldrb	r5, [r3, #2]
 8001164:	4b15      	ldr	r3, [pc, #84]	; (80011bc <Ble_Hci_Gap_Gatt_Init+0x1b0>)
 8001166:	785e      	ldrb	r6, [r3, #1]
 8001168:	4b14      	ldr	r3, [pc, #80]	; (80011bc <Ble_Hci_Gap_Gatt_Init+0x1b0>)
 800116a:	791b      	ldrb	r3, [r3, #4]
 800116c:	4a13      	ldr	r2, [pc, #76]	; (80011bc <Ble_Hci_Gap_Gatt_Init+0x1b0>)
 800116e:	7952      	ldrb	r2, [r2, #5]
 8001170:	4912      	ldr	r1, [pc, #72]	; (80011bc <Ble_Hci_Gap_Gatt_Init+0x1b0>)
 8001172:	78c9      	ldrb	r1, [r1, #3]
 8001174:	4811      	ldr	r0, [pc, #68]	; (80011bc <Ble_Hci_Gap_Gatt_Init+0x1b0>)
 8001176:	6880      	ldr	r0, [r0, #8]
 8001178:	2400      	movs	r4, #0
 800117a:	9404      	str	r4, [sp, #16]
 800117c:	9003      	str	r0, [sp, #12]
 800117e:	9102      	str	r1, [sp, #8]
 8001180:	9201      	str	r2, [sp, #4]
 8001182:	9300      	str	r3, [sp, #0]
 8001184:	2300      	movs	r3, #0
 8001186:	2201      	movs	r2, #1
 8001188:	4631      	mov	r1, r6
 800118a:	4628      	mov	r0, r5
 800118c:	f00a f86e 	bl	800b26c <aci_gap_set_authentication_requirement>
                                         );

  /**
   * Initialize whitelist
   */
   if (BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode)
 8001190:	4b0a      	ldr	r3, [pc, #40]	; (80011bc <Ble_Hci_Gap_Gatt_Init+0x1b0>)
 8001192:	789b      	ldrb	r3, [r3, #2]
 8001194:	2b00      	cmp	r3, #0
 8001196:	d001      	beq.n	800119c <Ble_Hci_Gap_Gatt_Init+0x190>
   {
     aci_gap_configure_whitelist();
 8001198:	f00a f9f7 	bl	800b58a <aci_gap_configure_whitelist>
   }
}
 800119c:	bf00      	nop
 800119e:	3724      	adds	r7, #36	; 0x24
 80011a0:	46bd      	mov	sp, r7
 80011a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80011a4:	20000004 	.word	0x20000004
 80011a8:	08014f90 	.word	0x08014f90
 80011ac:	08014fa0 	.word	0x08014fa0
 80011b0:	08014af0 	.word	0x08014af0
 80011b4:	08014af8 	.word	0x08014af8
 80011b8:	08014b28 	.word	0x08014b28
 80011bc:	20000210 	.word	0x20000210
 80011c0:	0001b207 	.word	0x0001b207

080011c4 <Adv_Request>:

static void Adv_Request(APP_BLE_ConnStatus_t New_Status)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b08c      	sub	sp, #48	; 0x30
 80011c8:	af08      	add	r7, sp, #32
 80011ca:	4603      	mov	r3, r0
 80011cc:	71fb      	strb	r3, [r7, #7]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 80011ce:	2342      	movs	r3, #66	; 0x42
 80011d0:	72fb      	strb	r3, [r7, #11]
  uint16_t Min_Inter, Max_Inter;

  if (New_Status == APP_BLE_FAST_ADV)
 80011d2:	79fb      	ldrb	r3, [r7, #7]
 80011d4:	2b01      	cmp	r3, #1
 80011d6:	d106      	bne.n	80011e6 <Adv_Request+0x22>
  {
    Min_Inter = AdvIntervalMin;
 80011d8:	4b3f      	ldr	r3, [pc, #252]	; (80012d8 <Adv_Request+0x114>)
 80011da:	881b      	ldrh	r3, [r3, #0]
 80011dc:	81fb      	strh	r3, [r7, #14]
    Max_Inter = AdvIntervalMax;
 80011de:	4b3f      	ldr	r3, [pc, #252]	; (80012dc <Adv_Request+0x118>)
 80011e0:	881b      	ldrh	r3, [r3, #0]
 80011e2:	81bb      	strh	r3, [r7, #12]
 80011e4:	e005      	b.n	80011f2 <Adv_Request+0x2e>
  }
  else
  {
    Min_Inter = CFG_LP_CONN_ADV_INTERVAL_MIN;
 80011e6:	f44f 63c8 	mov.w	r3, #1600	; 0x640
 80011ea:	81fb      	strh	r3, [r7, #14]
    Max_Inter = CFG_LP_CONN_ADV_INTERVAL_MAX;
 80011ec:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 80011f0:	81bb      	strh	r3, [r7, #12]

    /**
     * Stop the timer, it will be restarted for a new shot
     * It does not hurt if the timer was not running
     */
    HW_TS_Stop(BleApplicationContext.Advertising_mgr_timer_Id);
 80011f2:	4b3b      	ldr	r3, [pc, #236]	; (80012e0 <Adv_Request+0x11c>)
 80011f4:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80011f8:	4618      	mov	r0, r3
 80011fa:	f002 f9ff 	bl	80035fc <HW_TS_Stop>

    APP_DBG_MSG("First index in %d state \n", BleApplicationContext.Device_Connection_Status);
 80011fe:	4b38      	ldr	r3, [pc, #224]	; (80012e0 <Adv_Request+0x11c>)
 8001200:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8001204:	4619      	mov	r1, r3
 8001206:	4837      	ldr	r0, [pc, #220]	; (80012e4 <Adv_Request+0x120>)
 8001208:	f011 f9d8 	bl	80125bc <iprintf>

    if ((New_Status == APP_BLE_LP_ADV)
 800120c:	79fb      	ldrb	r3, [r7, #7]
 800120e:	2b02      	cmp	r3, #2
 8001210:	d119      	bne.n	8001246 <Adv_Request+0x82>
        && ((BleApplicationContext.Device_Connection_Status == APP_BLE_FAST_ADV)
 8001212:	4b33      	ldr	r3, [pc, #204]	; (80012e0 <Adv_Request+0x11c>)
 8001214:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8001218:	2b01      	cmp	r3, #1
 800121a:	d004      	beq.n	8001226 <Adv_Request+0x62>
            || (BleApplicationContext.Device_Connection_Status == APP_BLE_LP_ADV)))
 800121c:	4b30      	ldr	r3, [pc, #192]	; (80012e0 <Adv_Request+0x11c>)
 800121e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8001222:	2b02      	cmp	r3, #2
 8001224:	d10f      	bne.n	8001246 <Adv_Request+0x82>
    {
      /* Connection in ADVERTISE mode have to stop the current advertising */
      ret = aci_gap_set_non_discoverable();
 8001226:	f009 fed5 	bl	800afd4 <aci_gap_set_non_discoverable>
 800122a:	4603      	mov	r3, r0
 800122c:	72fb      	strb	r3, [r7, #11]
      if (ret == BLE_STATUS_SUCCESS)
 800122e:	7afb      	ldrb	r3, [r7, #11]
 8001230:	2b00      	cmp	r3, #0
 8001232:	d103      	bne.n	800123c <Adv_Request+0x78>
      {
        APP_DBG_MSG("Successfully Stopped Advertising \n");
 8001234:	482c      	ldr	r0, [pc, #176]	; (80012e8 <Adv_Request+0x124>)
 8001236:	f011 fa35 	bl	80126a4 <puts>
 800123a:	e004      	b.n	8001246 <Adv_Request+0x82>
      }
      else
      {
        APP_DBG_MSG("Stop Advertising Failed , result: %d \n", ret);
 800123c:	7afb      	ldrb	r3, [r7, #11]
 800123e:	4619      	mov	r1, r3
 8001240:	482a      	ldr	r0, [pc, #168]	; (80012ec <Adv_Request+0x128>)
 8001242:	f011 f9bb 	bl	80125bc <iprintf>
      }
    }

    BleApplicationContext.Device_Connection_Status = New_Status;
 8001246:	4a26      	ldr	r2, [pc, #152]	; (80012e0 <Adv_Request+0x11c>)
 8001248:	79fb      	ldrb	r3, [r7, #7]
 800124a:	f882 3080 	strb.w	r3, [r2, #128]	; 0x80
    /* Start Fast or Low Power Advertising */
    ret = aci_gap_set_discoverable(
 800124e:	4b24      	ldr	r3, [pc, #144]	; (80012e0 <Adv_Request+0x11c>)
 8001250:	7e1b      	ldrb	r3, [r3, #24]
 8001252:	89b8      	ldrh	r0, [r7, #12]
 8001254:	89f9      	ldrh	r1, [r7, #14]
 8001256:	2200      	movs	r2, #0
 8001258:	9206      	str	r2, [sp, #24]
 800125a:	2200      	movs	r2, #0
 800125c:	9205      	str	r2, [sp, #20]
 800125e:	4a24      	ldr	r2, [pc, #144]	; (80012f0 <Adv_Request+0x12c>)
 8001260:	9204      	str	r2, [sp, #16]
 8001262:	9303      	str	r3, [sp, #12]
 8001264:	4b23      	ldr	r3, [pc, #140]	; (80012f4 <Adv_Request+0x130>)
 8001266:	9302      	str	r3, [sp, #8]
 8001268:	2308      	movs	r3, #8
 800126a:	9301      	str	r3, [sp, #4]
 800126c:	2300      	movs	r3, #0
 800126e:	9300      	str	r3, [sp, #0]
 8001270:	2300      	movs	r3, #0
 8001272:	4602      	mov	r2, r0
 8001274:	2000      	movs	r0, #0
 8001276:	f009 fed1 	bl	800b01c <aci_gap_set_discoverable>
 800127a:	4603      	mov	r3, r0
 800127c:	72fb      	strb	r3, [r7, #11]
        BleApplicationContext.BleApplicationContext_legacy.advtServUUID,
        0,
        0);

    /* Update Advertising data */
    ret = aci_gap_update_adv_data(sizeof(manuf_data), (uint8_t*) manuf_data);
 800127e:	491e      	ldr	r1, [pc, #120]	; (80012f8 <Adv_Request+0x134>)
 8001280:	200e      	movs	r0, #14
 8001282:	f00a f926 	bl	800b4d2 <aci_gap_update_adv_data>
 8001286:	4603      	mov	r3, r0
 8001288:	72fb      	strb	r3, [r7, #11]
    if (ret == BLE_STATUS_SUCCESS)
 800128a:	7afb      	ldrb	r3, [r7, #11]
 800128c:	2b00      	cmp	r3, #0
 800128e:	d111      	bne.n	80012b4 <Adv_Request+0xf0>
    {
      if (New_Status == APP_BLE_FAST_ADV)
 8001290:	79fb      	ldrb	r3, [r7, #7]
 8001292:	2b01      	cmp	r3, #1
 8001294:	d10a      	bne.n	80012ac <Adv_Request+0xe8>
      {
        APP_DBG_MSG("Successfully Start Fast Advertising \n" );
 8001296:	4819      	ldr	r0, [pc, #100]	; (80012fc <Adv_Request+0x138>)
 8001298:	f011 fa04 	bl	80126a4 <puts>
        /* Start Timer to STOP ADV - TIMEOUT */
        HW_TS_Start(BleApplicationContext.Advertising_mgr_timer_Id, INITIAL_ADV_TIMEOUT);
 800129c:	4b10      	ldr	r3, [pc, #64]	; (80012e0 <Adv_Request+0x11c>)
 800129e:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80012a2:	4917      	ldr	r1, [pc, #92]	; (8001300 <Adv_Request+0x13c>)
 80012a4:	4618      	mov	r0, r3
 80012a6:	f002 fa33 	bl	8003710 <HW_TS_Start>
      {
        APP_DBG_MSG("Start Low Power Advertising Failed , result: %d \n", ret);
      }
    }

  return;
 80012aa:	e012      	b.n	80012d2 <Adv_Request+0x10e>
        APP_DBG_MSG("Successfully Start Low Power Advertising \n");
 80012ac:	4815      	ldr	r0, [pc, #84]	; (8001304 <Adv_Request+0x140>)
 80012ae:	f011 f9f9 	bl	80126a4 <puts>
  return;
 80012b2:	e00e      	b.n	80012d2 <Adv_Request+0x10e>
      if (New_Status == APP_BLE_FAST_ADV)
 80012b4:	79fb      	ldrb	r3, [r7, #7]
 80012b6:	2b01      	cmp	r3, #1
 80012b8:	d105      	bne.n	80012c6 <Adv_Request+0x102>
        APP_DBG_MSG("Start Fast Advertising Failed , result: %d \n", ret);
 80012ba:	7afb      	ldrb	r3, [r7, #11]
 80012bc:	4619      	mov	r1, r3
 80012be:	4812      	ldr	r0, [pc, #72]	; (8001308 <Adv_Request+0x144>)
 80012c0:	f011 f97c 	bl	80125bc <iprintf>
  return;
 80012c4:	e005      	b.n	80012d2 <Adv_Request+0x10e>
        APP_DBG_MSG("Start Low Power Advertising Failed , result: %d \n", ret);
 80012c6:	7afb      	ldrb	r3, [r7, #11]
 80012c8:	4619      	mov	r1, r3
 80012ca:	4810      	ldr	r0, [pc, #64]	; (800130c <Adv_Request+0x148>)
 80012cc:	f011 f976 	bl	80125bc <iprintf>
  return;
 80012d0:	bf00      	nop
}
 80012d2:	3710      	adds	r7, #16
 80012d4:	46bd      	mov	sp, r7
 80012d6:	bd80      	pop	{r7, pc}
 80012d8:	20000294 	.word	0x20000294
 80012dc:	20000296 	.word	0x20000296
 80012e0:	20000210 	.word	0x20000210
 80012e4:	08014b58 	.word	0x08014b58
 80012e8:	08014b74 	.word	0x08014b74
 80012ec:	08014b98 	.word	0x08014b98
 80012f0:	20000229 	.word	0x20000229
 80012f4:	08014fb0 	.word	0x08014fb0
 80012f8:	20000004 	.word	0x20000004
 80012fc:	08014bc0 	.word	0x08014bc0
 8001300:	0001e046 	.word	0x0001e046
 8001304:	08014be8 	.word	0x08014be8
 8001308:	08014c14 	.word	0x08014c14
 800130c:	08014c44 	.word	0x08014c44

08001310 <BleGetBdAddress>:

const uint8_t* BleGetBdAddress( void )
{
 8001310:	b580      	push	{r7, lr}
 8001312:	b086      	sub	sp, #24
 8001314:	af00      	add	r7, sp, #0
  const uint8_t *bd_addr;
  uint32_t udn;
  uint32_t company_id;
  uint32_t device_id;

  udn = LL_FLASH_GetUDN();
 8001316:	f7ff fc1f 	bl	8000b58 <LL_FLASH_GetUDN>
 800131a:	6138      	str	r0, [r7, #16]

  if(udn != 0xFFFFFFFF)
 800131c:	693b      	ldr	r3, [r7, #16]
 800131e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001322:	d023      	beq.n	800136c <BleGetBdAddress+0x5c>
  {
    company_id = LL_FLASH_GetSTCompanyID();
 8001324:	f7ff fc30 	bl	8000b88 <LL_FLASH_GetSTCompanyID>
 8001328:	60b8      	str	r0, [r7, #8]
    device_id = LL_FLASH_GetDeviceID();
 800132a:	f7ff fc21 	bl	8000b70 <LL_FLASH_GetDeviceID>
 800132e:	6078      	str	r0, [r7, #4]

    bd_addr_udn[0] = (uint8_t)(udn & 0x000000FF);
 8001330:	693b      	ldr	r3, [r7, #16]
 8001332:	b2da      	uxtb	r2, r3
 8001334:	4b16      	ldr	r3, [pc, #88]	; (8001390 <BleGetBdAddress+0x80>)
 8001336:	701a      	strb	r2, [r3, #0]
    bd_addr_udn[1] = (uint8_t)( (udn & 0x0000FF00) >> 8 );
 8001338:	693b      	ldr	r3, [r7, #16]
 800133a:	0a1b      	lsrs	r3, r3, #8
 800133c:	b2da      	uxtb	r2, r3
 800133e:	4b14      	ldr	r3, [pc, #80]	; (8001390 <BleGetBdAddress+0x80>)
 8001340:	705a      	strb	r2, [r3, #1]
    bd_addr_udn[2] = (uint8_t)( (udn & 0x00FF0000) >> 16 );
 8001342:	693b      	ldr	r3, [r7, #16]
 8001344:	0c1b      	lsrs	r3, r3, #16
 8001346:	b2da      	uxtb	r2, r3
 8001348:	4b11      	ldr	r3, [pc, #68]	; (8001390 <BleGetBdAddress+0x80>)
 800134a:	709a      	strb	r2, [r3, #2]
    bd_addr_udn[3] = (uint8_t)device_id;
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	b2da      	uxtb	r2, r3
 8001350:	4b0f      	ldr	r3, [pc, #60]	; (8001390 <BleGetBdAddress+0x80>)
 8001352:	70da      	strb	r2, [r3, #3]
    bd_addr_udn[4] = (uint8_t)(company_id & 0x000000FF);;
 8001354:	68bb      	ldr	r3, [r7, #8]
 8001356:	b2da      	uxtb	r2, r3
 8001358:	4b0d      	ldr	r3, [pc, #52]	; (8001390 <BleGetBdAddress+0x80>)
 800135a:	711a      	strb	r2, [r3, #4]
    bd_addr_udn[5] = (uint8_t)( (company_id & 0x0000FF00) >> 8 );
 800135c:	68bb      	ldr	r3, [r7, #8]
 800135e:	0a1b      	lsrs	r3, r3, #8
 8001360:	b2da      	uxtb	r2, r3
 8001362:	4b0b      	ldr	r3, [pc, #44]	; (8001390 <BleGetBdAddress+0x80>)
 8001364:	715a      	strb	r2, [r3, #5]

    bd_addr = (const uint8_t *)bd_addr_udn;
 8001366:	4b0a      	ldr	r3, [pc, #40]	; (8001390 <BleGetBdAddress+0x80>)
 8001368:	617b      	str	r3, [r7, #20]
 800136a:	e00b      	b.n	8001384 <BleGetBdAddress+0x74>
  }
  else
  {
    otp_addr = OTP_Read(0);
 800136c:	2000      	movs	r0, #0
 800136e:	f00b fd05 	bl	800cd7c <OTP_Read>
 8001372:	60f8      	str	r0, [r7, #12]
    if(otp_addr)
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	2b00      	cmp	r3, #0
 8001378:	d002      	beq.n	8001380 <BleGetBdAddress+0x70>
    {
      bd_addr = ((OTP_ID0_t*)otp_addr)->bd_address;
 800137a:	68fb      	ldr	r3, [r7, #12]
 800137c:	617b      	str	r3, [r7, #20]
 800137e:	e001      	b.n	8001384 <BleGetBdAddress+0x74>
    }
    else
    {
      bd_addr = M_bd_addr;
 8001380:	4b04      	ldr	r3, [pc, #16]	; (8001394 <BleGetBdAddress+0x84>)
 8001382:	617b      	str	r3, [r7, #20]
    }

  }

  return bd_addr;
 8001384:	697b      	ldr	r3, [r7, #20]
}
 8001386:	4618      	mov	r0, r3
 8001388:	3718      	adds	r7, #24
 800138a:	46bd      	mov	sp, r7
 800138c:	bd80      	pop	{r7, pc}
 800138e:	bf00      	nop
 8001390:	200003d4 	.word	0x200003d4
 8001394:	08014f88 	.word	0x08014f88

08001398 <Adv_Mgr>:
  return;
}
*/

static void Adv_Mgr( void )
{
 8001398:	b580      	push	{r7, lr}
 800139a:	af00      	add	r7, sp, #0
  /**
   * The code shall be executed in the background as an aci command may be sent
   * The background is the only place where the application can make sure a new aci command
   * is not sent if there is a pending one
   */
  osThreadFlagsSet( AdvUpdateProcessId, 1 );
 800139c:	4b03      	ldr	r3, [pc, #12]	; (80013ac <Adv_Mgr+0x14>)
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	2101      	movs	r1, #1
 80013a2:	4618      	mov	r0, r3
 80013a4:	f00c fae0 	bl	800d968 <osThreadFlagsSet>

  return;
 80013a8:	bf00      	nop
}
 80013aa:	bd80      	pop	{r7, pc}
 80013ac:	200060dc 	.word	0x200060dc

080013b0 <AdvUpdateProcess>:

static void AdvUpdateProcess(void *argument)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b082      	sub	sp, #8
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
  UNUSED(argument);

  for(;;)
  {
    osThreadFlagsWait( 1, osFlagsWaitAny, osWaitForever);
 80013b8:	f04f 32ff 	mov.w	r2, #4294967295
 80013bc:	2100      	movs	r1, #0
 80013be:	2001      	movs	r0, #1
 80013c0:	f00c fb34 	bl	800da2c <osThreadFlagsWait>
    Adv_Update( );
 80013c4:	f000 f801 	bl	80013ca <Adv_Update>
    osThreadFlagsWait( 1, osFlagsWaitAny, osWaitForever);
 80013c8:	e7f6      	b.n	80013b8 <AdvUpdateProcess+0x8>

080013ca <Adv_Update>:
  }
}

static void Adv_Update( void )
{
 80013ca:	b580      	push	{r7, lr}
 80013cc:	af00      	add	r7, sp, #0
  Adv_Request(APP_BLE_LP_ADV);
 80013ce:	2002      	movs	r0, #2
 80013d0:	f7ff fef8 	bl	80011c4 <Adv_Request>

  return;
 80013d4:	bf00      	nop
}
 80013d6:	bd80      	pop	{r7, pc}

080013d8 <HciUserEvtProcess>:
  }
  return;
}

static void HciUserEvtProcess(void *argument)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	b082      	sub	sp, #8
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]
  UNUSED(argument);

  for(;;)
  {
    osThreadFlagsWait( 1, osFlagsWaitAny, osWaitForever);
 80013e0:	f04f 32ff 	mov.w	r2, #4294967295
 80013e4:	2100      	movs	r1, #0
 80013e6:	2001      	movs	r0, #1
 80013e8:	f00c fb20 	bl	800da2c <osThreadFlagsWait>
    hci_user_evt_proc( );
 80013ec:	f00a fdf4 	bl	800bfd8 <hci_user_evt_proc>
    osThreadFlagsWait( 1, osFlagsWaitAny, osWaitForever);
 80013f0:	e7f6      	b.n	80013e0 <HciUserEvtProcess+0x8>
	...

080013f4 <hci_notify_asynch_evt>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void hci_notify_asynch_evt(void* pdata)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b082      	sub	sp, #8
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	6078      	str	r0, [r7, #4]
  UNUSED(pdata);
  osThreadFlagsSet( HciUserEvtProcessId, 1 );
 80013fc:	4b04      	ldr	r3, [pc, #16]	; (8001410 <hci_notify_asynch_evt+0x1c>)
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	2101      	movs	r1, #1
 8001402:	4618      	mov	r0, r3
 8001404:	f00c fab0 	bl	800d968 <osThreadFlagsSet>
  return;
 8001408:	bf00      	nop
}
 800140a:	3708      	adds	r7, #8
 800140c:	46bd      	mov	sp, r7
 800140e:	bd80      	pop	{r7, pc}
 8001410:	20006018 	.word	0x20006018

08001414 <hci_cmd_resp_release>:

void hci_cmd_resp_release(uint32_t flag)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	b082      	sub	sp, #8
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]
  UNUSED(flag);
  osSemaphoreRelease( SemHciId );
 800141c:	4b04      	ldr	r3, [pc, #16]	; (8001430 <hci_cmd_resp_release+0x1c>)
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	4618      	mov	r0, r3
 8001422:	f00c fe11 	bl	800e048 <osSemaphoreRelease>
  return;
 8001426:	bf00      	nop
}
 8001428:	3708      	adds	r7, #8
 800142a:	46bd      	mov	sp, r7
 800142c:	bd80      	pop	{r7, pc}
 800142e:	bf00      	nop
 8001430:	20006014 	.word	0x20006014

08001434 <hci_cmd_resp_wait>:

void hci_cmd_resp_wait(uint32_t timeout)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	b082      	sub	sp, #8
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
  UNUSED(timeout);
  osSemaphoreAcquire( SemHciId, osWaitForever );
 800143c:	4b05      	ldr	r3, [pc, #20]	; (8001454 <hci_cmd_resp_wait+0x20>)
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	f04f 31ff 	mov.w	r1, #4294967295
 8001444:	4618      	mov	r0, r3
 8001446:	f00c fd99 	bl	800df7c <osSemaphoreAcquire>
  return;
 800144a:	bf00      	nop
}
 800144c:	3708      	adds	r7, #8
 800144e:	46bd      	mov	sp, r7
 8001450:	bd80      	pop	{r7, pc}
 8001452:	bf00      	nop
 8001454:	20006014 	.word	0x20006014

08001458 <BLE_UserEvtRx>:

static void BLE_UserEvtRx( void * pPayload )
{
 8001458:	b580      	push	{r7, lr}
 800145a:	b084      	sub	sp, #16
 800145c:	af00      	add	r7, sp, #0
 800145e:	6078      	str	r0, [r7, #4]
  SVCCTL_UserEvtFlowStatus_t svctl_return_status;
  tHCI_UserEvtRxParam *pParam;

  pParam = (tHCI_UserEvtRxParam *)pPayload;
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	60fb      	str	r3, [r7, #12]

  svctl_return_status = SVCCTL_UserEvtRx((void *)&(pParam->pckt->evtserial));
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	685b      	ldr	r3, [r3, #4]
 8001468:	3308      	adds	r3, #8
 800146a:	4618      	mov	r0, r3
 800146c:	f009 fd60 	bl	800af30 <SVCCTL_UserEvtRx>
 8001470:	4603      	mov	r3, r0
 8001472:	72fb      	strb	r3, [r7, #11]
  if (svctl_return_status != SVCCTL_UserEvtFlowDisable)
 8001474:	7afb      	ldrb	r3, [r7, #11]
 8001476:	2b00      	cmp	r3, #0
 8001478:	d003      	beq.n	8001482 <BLE_UserEvtRx+0x2a>
  {
    pParam->status = HCI_TL_UserEventFlow_Enable;
 800147a:	68fb      	ldr	r3, [r7, #12]
 800147c:	2201      	movs	r2, #1
 800147e:	701a      	strb	r2, [r3, #0]
  }
  else
  {
    pParam->status = HCI_TL_UserEventFlow_Disable;
  }
}
 8001480:	e002      	b.n	8001488 <BLE_UserEvtRx+0x30>
    pParam->status = HCI_TL_UserEventFlow_Disable;
 8001482:	68fb      	ldr	r3, [r7, #12]
 8001484:	2200      	movs	r2, #0
 8001486:	701a      	strb	r2, [r3, #0]
}
 8001488:	bf00      	nop
 800148a:	3710      	adds	r7, #16
 800148c:	46bd      	mov	sp, r7
 800148e:	bd80      	pop	{r7, pc}

08001490 <BLE_StatusNot>:

static void BLE_StatusNot( HCI_TL_CmdStatus_t status )
{
 8001490:	b580      	push	{r7, lr}
 8001492:	b082      	sub	sp, #8
 8001494:	af00      	add	r7, sp, #0
 8001496:	4603      	mov	r3, r0
 8001498:	71fb      	strb	r3, [r7, #7]
  switch (status)
 800149a:	79fb      	ldrb	r3, [r7, #7]
 800149c:	2b00      	cmp	r3, #0
 800149e:	d002      	beq.n	80014a6 <BLE_StatusNot+0x16>
 80014a0:	2b01      	cmp	r3, #1
 80014a2:	d008      	beq.n	80014b6 <BLE_StatusNot+0x26>
    case HCI_TL_CmdAvailable:
      osMutexRelease( MtxHciId );
      break;

    default:
      break;
 80014a4:	e00d      	b.n	80014c2 <BLE_StatusNot+0x32>
      osMutexAcquire( MtxHciId, osWaitForever );
 80014a6:	4b09      	ldr	r3, [pc, #36]	; (80014cc <BLE_StatusNot+0x3c>)
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	f04f 31ff 	mov.w	r1, #4294967295
 80014ae:	4618      	mov	r0, r3
 80014b0:	f00c fc18 	bl	800dce4 <osMutexAcquire>
      break;
 80014b4:	e005      	b.n	80014c2 <BLE_StatusNot+0x32>
      osMutexRelease( MtxHciId );
 80014b6:	4b05      	ldr	r3, [pc, #20]	; (80014cc <BLE_StatusNot+0x3c>)
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	4618      	mov	r0, r3
 80014bc:	f00c fc70 	bl	800dda0 <osMutexRelease>
      break;
 80014c0:	bf00      	nop
  }
  return;
 80014c2:	bf00      	nop
}
 80014c4:	3708      	adds	r7, #8
 80014c6:	46bd      	mov	sp, r7
 80014c8:	bd80      	pop	{r7, pc}
 80014ca:	bf00      	nop
 80014cc:	2000602c 	.word	0x2000602c

080014d0 <P2PS_STM_App_Notification>:
/* Private function prototypes -----------------------------------------------*/
void P2PS_APP_Context_Init(void);

/* Functions Definition ------------------------------------------------------*/
void P2PS_STM_App_Notification(P2PS_STM_App_Notification_evt_t *pNotification)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b082      	sub	sp, #8
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
  switch(pNotification->P2P_Evt_Opcode)
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	781b      	ldrb	r3, [r3, #0]
 80014dc:	2b01      	cmp	r3, #1
 80014de:	d00e      	beq.n	80014fe <P2PS_STM_App_Notification+0x2e>
 80014e0:	2b03      	cmp	r3, #3
 80014e2:	d016      	beq.n	8001512 <P2PS_STM_App_Notification+0x42>
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d000      	beq.n	80014ea <P2PS_STM_App_Notification+0x1a>
    case P2PS_STM_WRITE_EVT:
		osMessageQueuePut(bleRXqueueHandle, &(pNotification->DataTransfered), 0, 0);
      break;

    default:
      break;
 80014e8:	e01c      	b.n	8001524 <P2PS_STM_App_Notification+0x54>
      P2P_Server_App_Context.Notification_Status = 1;
 80014ea:	4b10      	ldr	r3, [pc, #64]	; (800152c <P2PS_STM_App_Notification+0x5c>)
 80014ec:	2201      	movs	r2, #1
 80014ee:	701a      	strb	r2, [r3, #0]
      APP_DBG_MSG("-- P2P APPLICATION SERVER : NOTIFICATION ENABLED\n");
 80014f0:	480f      	ldr	r0, [pc, #60]	; (8001530 <P2PS_STM_App_Notification+0x60>)
 80014f2:	f011 f8d7 	bl	80126a4 <puts>
      APP_DBG_MSG(" \n\r");
 80014f6:	480f      	ldr	r0, [pc, #60]	; (8001534 <P2PS_STM_App_Notification+0x64>)
 80014f8:	f011 f860 	bl	80125bc <iprintf>
      break;
 80014fc:	e012      	b.n	8001524 <P2PS_STM_App_Notification+0x54>
      P2P_Server_App_Context.Notification_Status = 0;
 80014fe:	4b0b      	ldr	r3, [pc, #44]	; (800152c <P2PS_STM_App_Notification+0x5c>)
 8001500:	2200      	movs	r2, #0
 8001502:	701a      	strb	r2, [r3, #0]
      APP_DBG_MSG("-- P2P APPLICATION SERVER : NOTIFICATION DISABLED\n");
 8001504:	480c      	ldr	r0, [pc, #48]	; (8001538 <P2PS_STM_App_Notification+0x68>)
 8001506:	f011 f8cd 	bl	80126a4 <puts>
      APP_DBG_MSG(" \n\r");
 800150a:	480a      	ldr	r0, [pc, #40]	; (8001534 <P2PS_STM_App_Notification+0x64>)
 800150c:	f011 f856 	bl	80125bc <iprintf>
      break;
 8001510:	e008      	b.n	8001524 <P2PS_STM_App_Notification+0x54>
		osMessageQueuePut(bleRXqueueHandle, &(pNotification->DataTransfered), 0, 0);
 8001512:	4b0a      	ldr	r3, [pc, #40]	; (800153c <P2PS_STM_App_Notification+0x6c>)
 8001514:	6818      	ldr	r0, [r3, #0]
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	1d19      	adds	r1, r3, #4
 800151a:	2300      	movs	r3, #0
 800151c:	2200      	movs	r2, #0
 800151e:	f00c fe71 	bl	800e204 <osMessageQueuePut>
      break;
 8001522:	bf00      	nop
  }
  return;
 8001524:	bf00      	nop
}
 8001526:	3708      	adds	r7, #8
 8001528:	46bd      	mov	sp, r7
 800152a:	bd80      	pop	{r7, pc}
 800152c:	20000298 	.word	0x20000298
 8001530:	08014cd0 	.word	0x08014cd0
 8001534:	08014d04 	.word	0x08014d04
 8001538:	08014d08 	.word	0x08014d08
 800153c:	20006020 	.word	0x20006020

08001540 <P2PS_APP_Notification>:

void P2PS_APP_Notification(P2PS_APP_ConnHandle_Not_evt_t *pNotification)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	b082      	sub	sp, #8
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]
  switch(pNotification->P2P_Evt_Opcode)
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	781b      	ldrb	r3, [r3, #0]
 800154c:	2b00      	cmp	r3, #0
 800154e:	d005      	beq.n	800155c <P2PS_APP_Notification+0x1c>
 8001550:	2b01      	cmp	r3, #1
 8001552:	d000      	beq.n	8001556 <P2PS_APP_Notification+0x16>

    case PEER_DISCON_HANDLE_EVT :
       P2PS_APP_Context_Init();
       break;
    default:
      break;
 8001554:	e003      	b.n	800155e <P2PS_APP_Notification+0x1e>
       P2PS_APP_Context_Init();
 8001556:	f000 f813 	bl	8001580 <P2PS_APP_Context_Init>
       break;
 800155a:	e000      	b.n	800155e <P2PS_APP_Notification+0x1e>
    break;
 800155c:	bf00      	nop
  }
  return;
 800155e:	bf00      	nop
}
 8001560:	3708      	adds	r7, #8
 8001562:	46bd      	mov	sp, r7
 8001564:	bd80      	pop	{r7, pc}
	...

08001568 <P2PS_APP_Init>:

void P2PS_APP_Init(void)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	af00      	add	r7, sp, #0
  P2P_Server_App_Context.Notification_Status=0;
 800156c:	4b03      	ldr	r3, [pc, #12]	; (800157c <P2PS_APP_Init+0x14>)
 800156e:	2200      	movs	r2, #0
 8001570:	701a      	strb	r2, [r3, #0]
  P2PS_APP_Context_Init();
 8001572:	f000 f805 	bl	8001580 <P2PS_APP_Context_Init>
  return;
 8001576:	bf00      	nop
}
 8001578:	bd80      	pop	{r7, pc}
 800157a:	bf00      	nop
 800157c:	20000298 	.word	0x20000298

08001580 <P2PS_APP_Context_Init>:

void  P2PS_APP_Context_Init(void)
{
 8001580:	b490      	push	{r4, r7}
 8001582:	af00      	add	r7, sp, #0
	  //init context on app init and on reconnect events
	  P2P_Server_App_Context.LedControl.Device_Led_Selection=0x01; /* Device1 */
 8001584:	4b0e      	ldr	r3, [pc, #56]	; (80015c0 <P2PS_APP_Context_Init+0x40>)
 8001586:	2201      	movs	r2, #1
 8001588:	705a      	strb	r2, [r3, #1]
	  P2P_Server_App_Context.LedControl.Led1=0x00; /* led OFF */
 800158a:	4b0d      	ldr	r3, [pc, #52]	; (80015c0 <P2PS_APP_Context_Init+0x40>)
 800158c:	2200      	movs	r2, #0
 800158e:	709a      	strb	r2, [r3, #2]
	  P2P_Server_App_Context.ButtonControl.Device_Button_Selection=0x01;/* Device1 */
 8001590:	4b0b      	ldr	r3, [pc, #44]	; (80015c0 <P2PS_APP_Context_Init+0x40>)
 8001592:	2201      	movs	r2, #1
 8001594:	70da      	strb	r2, [r3, #3]
	  P2P_Server_App_Context.ButtonControl.ButtonStatus=0x00;
 8001596:	4b0a      	ldr	r3, [pc, #40]	; (80015c0 <P2PS_APP_Context_Init+0x40>)
 8001598:	2200      	movs	r2, #0
 800159a:	711a      	strb	r2, [r3, #4]
	  P2P_Server_App_Context.OTATimestamp=0x0000000000000000;
 800159c:	4a08      	ldr	r2, [pc, #32]	; (80015c0 <P2PS_APP_Context_Init+0x40>)
 800159e:	f04f 0300 	mov.w	r3, #0
 80015a2:	f04f 0400 	mov.w	r4, #0
 80015a6:	e9c2 3402 	strd	r3, r4, [r2, #8]
	  P2P_Server_App_Context.OTA12HrFormat=0x00;
 80015aa:	4b05      	ldr	r3, [pc, #20]	; (80015c0 <P2PS_APP_Context_Init+0x40>)
 80015ac:	2200      	movs	r2, #0
 80015ae:	741a      	strb	r2, [r3, #16]
	  P2P_Server_App_Context.OTADaylightSavings=0x00;
 80015b0:	4b03      	ldr	r3, [pc, #12]	; (80015c0 <P2PS_APP_Context_Init+0x40>)
 80015b2:	2200      	movs	r2, #0
 80015b4:	745a      	strb	r2, [r3, #17]
}
 80015b6:	bf00      	nop
 80015b8:	46bd      	mov	sp, r7
 80015ba:	bc90      	pop	{r4, r7}
 80015bc:	4770      	bx	lr
 80015be:	bf00      	nop
 80015c0:	20000298 	.word	0x20000298

080015c4 <P2PS_Send_Data>:

  return;
}

void P2PS_Send_Data(uint16_t data)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b08c      	sub	sp, #48	; 0x30
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	4603      	mov	r3, r0
 80015cc:	80fb      	strh	r3, [r7, #6]

   if(P2P_Server_App_Context.Notification_Status){
 80015ce:	4b40      	ldr	r3, [pc, #256]	; (80016d0 <P2PS_Send_Data+0x10c>)
 80015d0:	781b      	ldrb	r3, [r3, #0]
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d073      	beq.n	80016be <P2PS_Send_Data+0xfa>
    APP_DBG_MSG("-- P2P APPLICATION SERVER  : SEND TIMESTAMPED DATA \n ");
 80015d6:	483f      	ldr	r0, [pc, #252]	; (80016d4 <P2PS_Send_Data+0x110>)
 80015d8:	f010 fff0 	bl	80125bc <iprintf>
    APP_DBG_MSG(" \n\r");
 80015dc:	483e      	ldr	r0, [pc, #248]	; (80016d8 <P2PS_Send_Data+0x114>)
 80015de:	f010 ffed 	bl	80125bc <iprintf>

    RTC_TimeTypeDef cTime;
	RTC_DateTypeDef cDate;

	osMutexAcquire(rtcMutexHandle, portMAX_DELAY);
 80015e2:	4b3e      	ldr	r3, [pc, #248]	; (80016dc <P2PS_Send_Data+0x118>)
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	f04f 31ff 	mov.w	r1, #4294967295
 80015ea:	4618      	mov	r0, r3
 80015ec:	f00c fb7a 	bl	800dce4 <osMutexAcquire>
	HAL_RTC_GetTime(&hrtc, &cTime, RTC_FORMAT_BCD);
 80015f0:	f107 0318 	add.w	r3, r7, #24
 80015f4:	2201      	movs	r2, #1
 80015f6:	4619      	mov	r1, r3
 80015f8:	4839      	ldr	r0, [pc, #228]	; (80016e0 <P2PS_Send_Data+0x11c>)
 80015fa:	f007 fc3e 	bl	8008e7a <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &cDate, RTC_FORMAT_BCD);
 80015fe:	f107 0314 	add.w	r3, r7, #20
 8001602:	2201      	movs	r2, #1
 8001604:	4619      	mov	r1, r3
 8001606:	4836      	ldr	r0, [pc, #216]	; (80016e0 <P2PS_Send_Data+0x11c>)
 8001608:	f007 fd41 	bl	800908e <HAL_RTC_GetDate>
	osMutexRelease(rtcMutexHandle);
 800160c:	4b33      	ldr	r3, [pc, #204]	; (80016dc <P2PS_Send_Data+0x118>)
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	4618      	mov	r0, r3
 8001612:	f00c fbc5 	bl	800dda0 <osMutexRelease>

	uint16_t sendval[5] = {0};
 8001616:	f107 0308 	add.w	r3, r7, #8
 800161a:	2200      	movs	r2, #0
 800161c:	601a      	str	r2, [r3, #0]
 800161e:	605a      	str	r2, [r3, #4]
 8001620:	811a      	strh	r2, [r3, #8]

	sendval[4] = (cDate.WeekDay << (8*1)) | cDate.Month;
 8001622:	7d3b      	ldrb	r3, [r7, #20]
 8001624:	021b      	lsls	r3, r3, #8
 8001626:	b21a      	sxth	r2, r3
 8001628:	7d7b      	ldrb	r3, [r7, #21]
 800162a:	b21b      	sxth	r3, r3
 800162c:	4313      	orrs	r3, r2
 800162e:	b21b      	sxth	r3, r3
 8001630:	b29b      	uxth	r3, r3
 8001632:	823b      	strh	r3, [r7, #16]
	sendval[3] = (cDate.Date << (8*1)) | cDate.Year;
 8001634:	7dbb      	ldrb	r3, [r7, #22]
 8001636:	021b      	lsls	r3, r3, #8
 8001638:	b21a      	sxth	r2, r3
 800163a:	7dfb      	ldrb	r3, [r7, #23]
 800163c:	b21b      	sxth	r3, r3
 800163e:	4313      	orrs	r3, r2
 8001640:	b21b      	sxth	r3, r3
 8001642:	b29b      	uxth	r3, r3
 8001644:	81fb      	strh	r3, [r7, #14]

	sendval[2] = (cTime.Hours << (8*1)) | cTime.Minutes;
 8001646:	7e3b      	ldrb	r3, [r7, #24]
 8001648:	021b      	lsls	r3, r3, #8
 800164a:	b21a      	sxth	r2, r3
 800164c:	7e7b      	ldrb	r3, [r7, #25]
 800164e:	b21b      	sxth	r3, r3
 8001650:	4313      	orrs	r3, r2
 8001652:	b21b      	sxth	r3, r3
 8001654:	b29b      	uxth	r3, r3
 8001656:	81bb      	strh	r3, [r7, #12]
	sendval[1] = (cTime.Seconds << (8*1)) | cTime.TimeFormat;
 8001658:	7ebb      	ldrb	r3, [r7, #26]
 800165a:	021b      	lsls	r3, r3, #8
 800165c:	b21a      	sxth	r2, r3
 800165e:	7efb      	ldrb	r3, [r7, #27]
 8001660:	b21b      	sxth	r3, r3
 8001662:	4313      	orrs	r3, r2
 8001664:	b21b      	sxth	r3, r3
 8001666:	b29b      	uxth	r3, r3
 8001668:	817b      	strh	r3, [r7, #10]

	sendval[0] = data;
 800166a:	88fb      	ldrh	r3, [r7, #6]
 800166c:	813b      	strh	r3, [r7, #8]

	P2PS_STM_App_Update_Int8(P2P_NOTIFY_CHAR_UUID, (uint8_t *)&sendval, 10);
 800166e:	f107 0308 	add.w	r3, r7, #8
 8001672:	220a      	movs	r2, #10
 8001674:	4619      	mov	r1, r3
 8001676:	f64f 6042 	movw	r0, #65090	; 0xfe42
 800167a:	f00b faa9 	bl	800cbd0 <P2PS_STM_App_Update_Int8>

	//if sending text, send text
	if ((data & 0xFF00) == 0x6300){
 800167e:	88fb      	ldrh	r3, [r7, #6]
 8001680:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8001684:	f5b3 4fc6 	cmp.w	r3, #25344	; 0x6300
 8001688:	d11d      	bne.n	80016c6 <P2PS_Send_Data+0x102>
		P2PS_STM_App_Update_Int8(P2P_NOTIFY_CHAR_UUID, (uint8_t *)&ScreenState.screenText, sizeof(ScreenState.screenText));
 800168a:	2280      	movs	r2, #128	; 0x80
 800168c:	4915      	ldr	r1, [pc, #84]	; (80016e4 <P2PS_Send_Data+0x120>)
 800168e:	f64f 6042 	movw	r0, #65090	; 0xfe42
 8001692:	f00b fa9d 	bl	800cbd0 <P2PS_STM_App_Update_Int8>
		for (int i=0; i<8; i++){
 8001696:	2300      	movs	r3, #0
 8001698:	62fb      	str	r3, [r7, #44]	; 0x2c
 800169a:	e00c      	b.n	80016b6 <P2PS_Send_Data+0xf2>
			//send full 128 byte char array; 8 chunks of 16 bytes
			P2PS_STM_App_Update_Int8(P2P_NOTIFY_CHAR_UUID, (uint8_t *)&ScreenState.screenText[i*8], 16);
 800169c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800169e:	00db      	lsls	r3, r3, #3
 80016a0:	4a10      	ldr	r2, [pc, #64]	; (80016e4 <P2PS_Send_Data+0x120>)
 80016a2:	4413      	add	r3, r2
 80016a4:	2210      	movs	r2, #16
 80016a6:	4619      	mov	r1, r3
 80016a8:	f64f 6042 	movw	r0, #65090	; 0xfe42
 80016ac:	f00b fa90 	bl	800cbd0 <P2PS_STM_App_Update_Int8>
		for (int i=0; i<8; i++){
 80016b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016b2:	3301      	adds	r3, #1
 80016b4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80016b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016b8:	2b07      	cmp	r3, #7
 80016ba:	ddef      	ble.n	800169c <P2PS_Send_Data+0xd8>

   } else {
    APP_DBG_MSG("-- P2P APPLICATION SERVER : CAN'T INFORM CLIENT -  NOTIFICATION DISABLED\n ");
   }

  return;
 80016bc:	e003      	b.n	80016c6 <P2PS_Send_Data+0x102>
    APP_DBG_MSG("-- P2P APPLICATION SERVER : CAN'T INFORM CLIENT -  NOTIFICATION DISABLED\n ");
 80016be:	480a      	ldr	r0, [pc, #40]	; (80016e8 <P2PS_Send_Data+0x124>)
 80016c0:	f010 ff7c 	bl	80125bc <iprintf>
  return;
 80016c4:	bf00      	nop
 80016c6:	bf00      	nop
}
 80016c8:	3730      	adds	r7, #48	; 0x30
 80016ca:	46bd      	mov	sp, r7
 80016cc:	bd80      	pop	{r7, pc}
 80016ce:	bf00      	nop
 80016d0:	20000298 	.word	0x20000298
 80016d4:	08014dc0 	.word	0x08014dc0
 80016d8:	08014d04 	.word	0x08014d04
 80016dc:	20006054 	.word	0x20006054
 80016e0:	20006030 	.word	0x20006030
 80016e4:	20006058 	.word	0x20006058
 80016e8:	08014d74 	.word	0x08014d74

080016ec <LL_PWR_EnableBootC2>:
  * @brief  Boot CPU2 after reset or wakeup from stop or standby modes
  * @rmtoll CR4          C2BOOT        LL_PWR_EnableBootC2
  * @retval None
  */
__STATIC_INLINE void LL_PWR_EnableBootC2(void)
{
 80016ec:	b480      	push	{r7}
 80016ee:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR4, PWR_CR4_C2BOOT);
 80016f0:	4b05      	ldr	r3, [pc, #20]	; (8001708 <LL_PWR_EnableBootC2+0x1c>)
 80016f2:	68db      	ldr	r3, [r3, #12]
 80016f4:	4a04      	ldr	r2, [pc, #16]	; (8001708 <LL_PWR_EnableBootC2+0x1c>)
 80016f6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80016fa:	60d3      	str	r3, [r2, #12]
}
 80016fc:	bf00      	nop
 80016fe:	46bd      	mov	sp, r7
 8001700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001704:	4770      	bx	lr
 8001706:	bf00      	nop
 8001708:	58000400 	.word	0x58000400

0800170c <LL_C2_EXTI_EnableEvent_32_63>:
  *         @arg @ref LL_EXTI_LINE_40
  *         @arg @ref LL_EXTI_LINE_41
  * @retval None
  */
__STATIC_INLINE void LL_C2_EXTI_EnableEvent_32_63(uint32_t ExtiLine)
{
 800170c:	b480      	push	{r7}
 800170e:	b083      	sub	sp, #12
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->C2EMR2, ExtiLine);
 8001714:	4b06      	ldr	r3, [pc, #24]	; (8001730 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 8001716:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 800171a:	4905      	ldr	r1, [pc, #20]	; (8001730 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	4313      	orrs	r3, r2
 8001720:	f8c1 30d4 	str.w	r3, [r1, #212]	; 0xd4
}
 8001724:	bf00      	nop
 8001726:	370c      	adds	r7, #12
 8001728:	46bd      	mov	sp, r7
 800172a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172e:	4770      	bx	lr
 8001730:	58000800 	.word	0x58000800

08001734 <LL_EXTI_EnableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_32_63(uint32_t ExtiLine)
{
 8001734:	b480      	push	{r7}
 8001736:	b083      	sub	sp, #12
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 800173c:	4b05      	ldr	r3, [pc, #20]	; (8001754 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 800173e:	6a1a      	ldr	r2, [r3, #32]
 8001740:	4904      	ldr	r1, [pc, #16]	; (8001754 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	4313      	orrs	r3, r2
 8001746:	620b      	str	r3, [r1, #32]
}
 8001748:	bf00      	nop
 800174a:	370c      	adds	r7, #12
 800174c:	46bd      	mov	sp, r7
 800174e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001752:	4770      	bx	lr
 8001754:	58000800 	.word	0x58000800

08001758 <LL_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_AHB3_GRP1_PERIPH_FLASH
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 8001758:	b480      	push	{r7}
 800175a:	b085      	sub	sp, #20
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB3ENR, Periphs);
 8001760:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001764:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001766:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	4313      	orrs	r3, r2
 800176e:	650b      	str	r3, [r1, #80]	; 0x50
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8001770:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001774:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	4013      	ands	r3, r2
 800177a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800177c:	68fb      	ldr	r3, [r7, #12]
}
 800177e:	bf00      	nop
 8001780:	3714      	adds	r7, #20
 8001782:	46bd      	mov	sp, r7
 8001784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001788:	4770      	bx	lr

0800178a <LL_C2_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_IPCC
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_FLASH
  * @retval None
  */
__STATIC_INLINE void LL_C2_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 800178a:	b480      	push	{r7}
 800178c:	b085      	sub	sp, #20
 800178e:	af00      	add	r7, sp, #0
 8001790:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->C2AHB3ENR, Periphs);
 8001792:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001796:	f8d3 2150 	ldr.w	r2, [r3, #336]	; 0x150
 800179a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	4313      	orrs	r3, r2
 80017a2:	f8c1 3150 	str.w	r3, [r1, #336]	; 0x150
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->C2AHB3ENR, Periphs);
 80017a6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80017aa:	f8d3 2150 	ldr.w	r2, [r3, #336]	; 0x150
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	4013      	ands	r3, r2
 80017b2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80017b4:	68fb      	ldr	r3, [r7, #12]
}
 80017b6:	bf00      	nop
 80017b8:	3714      	adds	r7, #20
 80017ba:	46bd      	mov	sp, r7
 80017bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c0:	4770      	bx	lr

080017c2 <LL_C1_IPCC_EnableIT_TXF>:
  * @rmtoll C1CR          TXFIE         LL_C1_IPCC_EnableIT_TXF
  * @param  IPCCx IPCC Instance.
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableIT_TXF(IPCC_TypeDef *IPCCx)
{
 80017c2:	b480      	push	{r7}
 80017c4:	b083      	sub	sp, #12
 80017c6:	af00      	add	r7, sp, #0
 80017c8:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_TXFIE);
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	601a      	str	r2, [r3, #0]
}
 80017d6:	bf00      	nop
 80017d8:	370c      	adds	r7, #12
 80017da:	46bd      	mov	sp, r7
 80017dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e0:	4770      	bx	lr

080017e2 <LL_C1_IPCC_EnableIT_RXO>:
  * @rmtoll C1CR          RXOIE         LL_C1_IPCC_EnableIT_RXO
  * @param  IPCCx IPCC Instance.
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableIT_RXO(IPCC_TypeDef *IPCCx)
{
 80017e2:	b480      	push	{r7}
 80017e4:	b083      	sub	sp, #12
 80017e6:	af00      	add	r7, sp, #0
 80017e8:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_RXOIE);
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	f043 0201 	orr.w	r2, r3, #1
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	601a      	str	r2, [r3, #0]
}
 80017f6:	bf00      	nop
 80017f8:	370c      	adds	r7, #12
 80017fa:	46bd      	mov	sp, r7
 80017fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001800:	4770      	bx	lr

08001802 <LL_C1_IPCC_EnableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8001802:	b480      	push	{r7}
 8001804:	b083      	sub	sp, #12
 8001806:	af00      	add	r7, sp, #0
 8001808:	6078      	str	r0, [r7, #4]
 800180a:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	685a      	ldr	r2, [r3, #4]
 8001810:	683b      	ldr	r3, [r7, #0]
 8001812:	041b      	lsls	r3, r3, #16
 8001814:	43db      	mvns	r3, r3
 8001816:	401a      	ands	r2, r3
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	605a      	str	r2, [r3, #4]
}
 800181c:	bf00      	nop
 800181e:	370c      	adds	r7, #12
 8001820:	46bd      	mov	sp, r7
 8001822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001826:	4770      	bx	lr

08001828 <LL_C1_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8001828:	b480      	push	{r7}
 800182a:	b083      	sub	sp, #12
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
 8001830:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	685a      	ldr	r2, [r3, #4]
 8001836:	683b      	ldr	r3, [r7, #0]
 8001838:	041b      	lsls	r3, r3, #16
 800183a:	431a      	orrs	r2, r3
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	605a      	str	r2, [r3, #4]
}
 8001840:	bf00      	nop
 8001842:	370c      	adds	r7, #12
 8001844:	46bd      	mov	sp, r7
 8001846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184a:	4770      	bx	lr

0800184c <LL_C1_IPCC_EnableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800184c:	b480      	push	{r7}
 800184e:	b083      	sub	sp, #12
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]
 8001854:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel);
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	685a      	ldr	r2, [r3, #4]
 800185a:	683b      	ldr	r3, [r7, #0]
 800185c:	43db      	mvns	r3, r3
 800185e:	401a      	ands	r2, r3
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	605a      	str	r2, [r3, #4]
}
 8001864:	bf00      	nop
 8001866:	370c      	adds	r7, #12
 8001868:	46bd      	mov	sp, r7
 800186a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186e:	4770      	bx	lr

08001870 <LL_C1_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8001870:	b480      	push	{r7}
 8001872:	b083      	sub	sp, #12
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]
 8001878:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	683a      	ldr	r2, [r7, #0]
 800187e:	609a      	str	r2, [r3, #8]
}
 8001880:	bf00      	nop
 8001882:	370c      	adds	r7, #12
 8001884:	46bd      	mov	sp, r7
 8001886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188a:	4770      	bx	lr

0800188c <LL_C1_IPCC_SetFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_SetFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800188c:	b480      	push	{r7}
 800188e:	b083      	sub	sp, #12
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
 8001894:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel << IPCC_C1SCR_CH1S_Pos);
 8001896:	683b      	ldr	r3, [r7, #0]
 8001898:	041a      	lsls	r2, r3, #16
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	609a      	str	r2, [r3, #8]
}
 800189e:	bf00      	nop
 80018a0:	370c      	adds	r7, #12
 80018a2:	46bd      	mov	sp, r7
 80018a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a8:	4770      	bx	lr

080018aa <LL_C1_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C1_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 80018aa:	b480      	push	{r7}
 80018ac:	b083      	sub	sp, #12
 80018ae:	af00      	add	r7, sp, #0
 80018b0:	6078      	str	r0, [r7, #4]
 80018b2:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C1TOC2SR, Channel) == (Channel)) ? 1UL : 0UL);
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	68da      	ldr	r2, [r3, #12]
 80018b8:	683b      	ldr	r3, [r7, #0]
 80018ba:	4013      	ands	r3, r2
 80018bc:	683a      	ldr	r2, [r7, #0]
 80018be:	429a      	cmp	r2, r3
 80018c0:	d101      	bne.n	80018c6 <LL_C1_IPCC_IsActiveFlag_CHx+0x1c>
 80018c2:	2301      	movs	r3, #1
 80018c4:	e000      	b.n	80018c8 <LL_C1_IPCC_IsActiveFlag_CHx+0x1e>
 80018c6:	2300      	movs	r3, #0
}
 80018c8:	4618      	mov	r0, r3
 80018ca:	370c      	adds	r7, #12
 80018cc:	46bd      	mov	sp, r7
 80018ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d2:	4770      	bx	lr

080018d4 <LL_C2_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C2_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 80018d4:	b480      	push	{r7}
 80018d6:	b083      	sub	sp, #12
 80018d8:	af00      	add	r7, sp, #0
 80018da:	6078      	str	r0, [r7, #4]
 80018dc:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C2TOC1SR, Channel) == (Channel)) ? 1UL : 0UL);
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	69da      	ldr	r2, [r3, #28]
 80018e2:	683b      	ldr	r3, [r7, #0]
 80018e4:	4013      	ands	r3, r2
 80018e6:	683a      	ldr	r2, [r7, #0]
 80018e8:	429a      	cmp	r2, r3
 80018ea:	d101      	bne.n	80018f0 <LL_C2_IPCC_IsActiveFlag_CHx+0x1c>
 80018ec:	2301      	movs	r3, #1
 80018ee:	e000      	b.n	80018f2 <LL_C2_IPCC_IsActiveFlag_CHx+0x1e>
 80018f0:	2300      	movs	r3, #0
}
 80018f2:	4618      	mov	r0, r3
 80018f4:	370c      	adds	r7, #12
 80018f6:	46bd      	mov	sp, r7
 80018f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fc:	4770      	bx	lr
	...

08001900 <HW_IPCC_Rx_Handler>:

/******************************************************************************
 * INTERRUPT HANDLER
 ******************************************************************************/
void HW_IPCC_Rx_Handler( void )
{
 8001900:	b580      	push	{r7, lr}
 8001902:	af00      	add	r7, sp, #0
  if (HW_IPCC_RX_PENDING( HW_IPCC_SYSTEM_EVENT_CHANNEL ))
 8001904:	2102      	movs	r1, #2
 8001906:	4819      	ldr	r0, [pc, #100]	; (800196c <HW_IPCC_Rx_Handler+0x6c>)
 8001908:	f7ff ffe4 	bl	80018d4 <LL_C2_IPCC_IsActiveFlag_CHx>
 800190c:	4603      	mov	r3, r0
 800190e:	2b00      	cmp	r3, #0
 8001910:	d009      	beq.n	8001926 <HW_IPCC_Rx_Handler+0x26>
 8001912:	4b16      	ldr	r3, [pc, #88]	; (800196c <HW_IPCC_Rx_Handler+0x6c>)
 8001914:	685b      	ldr	r3, [r3, #4]
 8001916:	43db      	mvns	r3, r3
 8001918:	f003 0302 	and.w	r3, r3, #2
 800191c:	2b00      	cmp	r3, #0
 800191e:	d002      	beq.n	8001926 <HW_IPCC_Rx_Handler+0x26>
  {
      HW_IPCC_SYS_EvtHandler();
 8001920:	f000 f8ea 	bl	8001af8 <HW_IPCC_SYS_EvtHandler>
 8001924:	e01f      	b.n	8001966 <HW_IPCC_Rx_Handler+0x66>
  else if (HW_IPCC_RX_PENDING( HW_IPCC_ZIGBEE_M0_REQUEST_CHANNEL ))
  {
    HW_IPCC_ZIGBEE_StackM0RequestHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_RX_PENDING( HW_IPCC_BLE_EVENT_CHANNEL ))
 8001926:	2101      	movs	r1, #1
 8001928:	4810      	ldr	r0, [pc, #64]	; (800196c <HW_IPCC_Rx_Handler+0x6c>)
 800192a:	f7ff ffd3 	bl	80018d4 <LL_C2_IPCC_IsActiveFlag_CHx>
 800192e:	4603      	mov	r3, r0
 8001930:	2b00      	cmp	r3, #0
 8001932:	d008      	beq.n	8001946 <HW_IPCC_Rx_Handler+0x46>
 8001934:	4b0d      	ldr	r3, [pc, #52]	; (800196c <HW_IPCC_Rx_Handler+0x6c>)
 8001936:	685b      	ldr	r3, [r3, #4]
 8001938:	f003 0301 	and.w	r3, r3, #1
 800193c:	2b00      	cmp	r3, #0
 800193e:	d102      	bne.n	8001946 <HW_IPCC_Rx_Handler+0x46>
  {
    HW_IPCC_BLE_EvtHandler();
 8001940:	f000 f89e 	bl	8001a80 <HW_IPCC_BLE_EvtHandler>
 8001944:	e00f      	b.n	8001966 <HW_IPCC_Rx_Handler+0x66>
  }
  else if (HW_IPCC_RX_PENDING( HW_IPCC_TRACES_CHANNEL ))
 8001946:	2108      	movs	r1, #8
 8001948:	4808      	ldr	r0, [pc, #32]	; (800196c <HW_IPCC_Rx_Handler+0x6c>)
 800194a:	f7ff ffc3 	bl	80018d4 <LL_C2_IPCC_IsActiveFlag_CHx>
 800194e:	4603      	mov	r3, r0
 8001950:	2b00      	cmp	r3, #0
 8001952:	d009      	beq.n	8001968 <HW_IPCC_Rx_Handler+0x68>
 8001954:	4b05      	ldr	r3, [pc, #20]	; (800196c <HW_IPCC_Rx_Handler+0x6c>)
 8001956:	685b      	ldr	r3, [r3, #4]
 8001958:	43db      	mvns	r3, r3
 800195a:	f003 0308 	and.w	r3, r3, #8
 800195e:	2b00      	cmp	r3, #0
 8001960:	d002      	beq.n	8001968 <HW_IPCC_Rx_Handler+0x68>
  {
    HW_IPCC_TRACES_EvtHandler();
 8001962:	f000 f915 	bl	8001b90 <HW_IPCC_TRACES_EvtHandler>
  }

  return;
 8001966:	bf00      	nop
 8001968:	bf00      	nop
}
 800196a:	bd80      	pop	{r7, pc}
 800196c:	58000c00 	.word	0x58000c00

08001970 <HW_IPCC_Tx_Handler>:

void HW_IPCC_Tx_Handler( void )
{
 8001970:	b580      	push	{r7, lr}
 8001972:	af00      	add	r7, sp, #0
  if (HW_IPCC_TX_PENDING( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL ))
 8001974:	2102      	movs	r1, #2
 8001976:	4822      	ldr	r0, [pc, #136]	; (8001a00 <HW_IPCC_Tx_Handler+0x90>)
 8001978:	f7ff ff97 	bl	80018aa <LL_C1_IPCC_IsActiveFlag_CHx>
 800197c:	4603      	mov	r3, r0
 800197e:	2b00      	cmp	r3, #0
 8001980:	d109      	bne.n	8001996 <HW_IPCC_Tx_Handler+0x26>
 8001982:	4b1f      	ldr	r3, [pc, #124]	; (8001a00 <HW_IPCC_Tx_Handler+0x90>)
 8001984:	685b      	ldr	r3, [r3, #4]
 8001986:	43db      	mvns	r3, r3
 8001988:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800198c:	2b00      	cmp	r3, #0
 800198e:	d002      	beq.n	8001996 <HW_IPCC_Tx_Handler+0x26>
  {
    HW_IPCC_SYS_CmdEvtHandler();
 8001990:	f000 f8a6 	bl	8001ae0 <HW_IPCC_SYS_CmdEvtHandler>
 8001994:	e031      	b.n	80019fa <HW_IPCC_Tx_Handler+0x8a>
  if (HW_IPCC_TX_PENDING( HW_IPCC_ZIGBEE_CMD_APPLI_CHANNEL ))
  {
      HW_IPCC_ZIGBEE_CmdEvtHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_TX_PENDING( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL ))
 8001996:	2102      	movs	r1, #2
 8001998:	4819      	ldr	r0, [pc, #100]	; (8001a00 <HW_IPCC_Tx_Handler+0x90>)
 800199a:	f7ff ff86 	bl	80018aa <LL_C1_IPCC_IsActiveFlag_CHx>
 800199e:	4603      	mov	r3, r0
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d109      	bne.n	80019b8 <HW_IPCC_Tx_Handler+0x48>
 80019a4:	4b16      	ldr	r3, [pc, #88]	; (8001a00 <HW_IPCC_Tx_Handler+0x90>)
 80019a6:	685b      	ldr	r3, [r3, #4]
 80019a8:	43db      	mvns	r3, r3
 80019aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d002      	beq.n	80019b8 <HW_IPCC_Tx_Handler+0x48>
  {
    HW_IPCC_SYS_CmdEvtHandler();
 80019b2:	f000 f895 	bl	8001ae0 <HW_IPCC_SYS_CmdEvtHandler>
 80019b6:	e020      	b.n	80019fa <HW_IPCC_Tx_Handler+0x8a>
  }
  else if (HW_IPCC_TX_PENDING( HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ))
 80019b8:	2108      	movs	r1, #8
 80019ba:	4811      	ldr	r0, [pc, #68]	; (8001a00 <HW_IPCC_Tx_Handler+0x90>)
 80019bc:	f7ff ff75 	bl	80018aa <LL_C1_IPCC_IsActiveFlag_CHx>
 80019c0:	4603      	mov	r3, r0
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d109      	bne.n	80019da <HW_IPCC_Tx_Handler+0x6a>
 80019c6:	4b0e      	ldr	r3, [pc, #56]	; (8001a00 <HW_IPCC_Tx_Handler+0x90>)
 80019c8:	685b      	ldr	r3, [r3, #4]
 80019ca:	43db      	mvns	r3, r3
 80019cc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d002      	beq.n	80019da <HW_IPCC_Tx_Handler+0x6a>
  {
    HW_IPCC_MM_FreeBufHandler();
 80019d4:	f000 f8be 	bl	8001b54 <HW_IPCC_MM_FreeBufHandler>
 80019d8:	e00f      	b.n	80019fa <HW_IPCC_Tx_Handler+0x8a>
  }
  else if (HW_IPCC_TX_PENDING( HW_IPCC_HCI_ACL_DATA_CHANNEL ))
 80019da:	2120      	movs	r1, #32
 80019dc:	4808      	ldr	r0, [pc, #32]	; (8001a00 <HW_IPCC_Tx_Handler+0x90>)
 80019de:	f7ff ff64 	bl	80018aa <LL_C1_IPCC_IsActiveFlag_CHx>
 80019e2:	4603      	mov	r3, r0
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d109      	bne.n	80019fc <HW_IPCC_Tx_Handler+0x8c>
 80019e8:	4b05      	ldr	r3, [pc, #20]	; (8001a00 <HW_IPCC_Tx_Handler+0x90>)
 80019ea:	685b      	ldr	r3, [r3, #4]
 80019ec:	43db      	mvns	r3, r3
 80019ee:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d002      	beq.n	80019fc <HW_IPCC_Tx_Handler+0x8c>
  {
    HW_IPCC_BLE_AclDataEvtHandler();
 80019f6:	f000 f84f 	bl	8001a98 <HW_IPCC_BLE_AclDataEvtHandler>
  }

  return;
 80019fa:	bf00      	nop
 80019fc:	bf00      	nop
}
 80019fe:	bd80      	pop	{r7, pc}
 8001a00:	58000c00 	.word	0x58000c00

08001a04 <HW_IPCC_Enable>:
/******************************************************************************
 * GENERAL
 ******************************************************************************/
void HW_IPCC_Enable( void )
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	af00      	add	r7, sp, #0
  /**
  * Such as IPCC IP available to the CPU2, it is required to keep the IPCC clock running
    when FUS is running on CPU2 and CPU1 enters deep sleep mode
  */
  LL_C2_AHB3_GRP1_EnableClock(LL_C2_AHB3_GRP1_PERIPH_IPCC);
 8001a08:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8001a0c:	f7ff febd 	bl	800178a <LL_C2_AHB3_GRP1_EnableClock>

   /**
   * When the device is out of standby, it is required to use the EXTI mechanism to wakeup CPU2
   */
  LL_C2_EXTI_EnableEvent_32_63( LL_EXTI_LINE_41 );
 8001a10:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001a14:	f7ff fe7a 	bl	800170c <LL_C2_EXTI_EnableEvent_32_63>
  LL_EXTI_EnableRisingTrig_32_63( LL_EXTI_LINE_41 );
 8001a18:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001a1c:	f7ff fe8a 	bl	8001734 <LL_EXTI_EnableRisingTrig_32_63>
   * When the CPU2 receives that command, it waits for its event input to be set to restart the CPU2 firmware.
   * This is required because once C2BOOT has been set once, a clear/set on C2BOOT has no effect.
   * When SHCI_C2_Reinit( ) is not called, generating an event to the CPU2 does not have any effect
   * So, by default, the application shall both set the event flag and set the C2BOOT bit.
   */
  __SEV( );       /* Set the internal event flag and send an event to the CPU2 */
 8001a20:	bf40      	sev
  __WFE( );       /* Clear the internal event flag */
 8001a22:	bf20      	wfe
  LL_PWR_EnableBootC2( );
 8001a24:	f7ff fe62 	bl	80016ec <LL_PWR_EnableBootC2>

  return;
 8001a28:	bf00      	nop
}
 8001a2a:	bd80      	pop	{r7, pc}

08001a2c <HW_IPCC_Init>:

void HW_IPCC_Init( void )
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock( LL_AHB3_GRP1_PERIPH_IPCC );
 8001a30:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8001a34:	f7ff fe90 	bl	8001758 <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_EnableIT_RXO( IPCC );
 8001a38:	4806      	ldr	r0, [pc, #24]	; (8001a54 <HW_IPCC_Init+0x28>)
 8001a3a:	f7ff fed2 	bl	80017e2 <LL_C1_IPCC_EnableIT_RXO>
  LL_C1_IPCC_EnableIT_TXF( IPCC );
 8001a3e:	4805      	ldr	r0, [pc, #20]	; (8001a54 <HW_IPCC_Init+0x28>)
 8001a40:	f7ff febf 	bl	80017c2 <LL_C1_IPCC_EnableIT_TXF>

  HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 8001a44:	202c      	movs	r0, #44	; 0x2c
 8001a46:	f004 fa2f 	bl	8005ea8 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 8001a4a:	202d      	movs	r0, #45	; 0x2d
 8001a4c:	f004 fa2c 	bl	8005ea8 <HAL_NVIC_EnableIRQ>

  return;
 8001a50:	bf00      	nop
}
 8001a52:	bd80      	pop	{r7, pc}
 8001a54:	58000c00 	.word	0x58000c00

08001a58 <HW_IPCC_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
void HW_IPCC_BLE_Init( void )
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 8001a5c:	2101      	movs	r1, #1
 8001a5e:	4802      	ldr	r0, [pc, #8]	; (8001a68 <HW_IPCC_BLE_Init+0x10>)
 8001a60:	f7ff fef4 	bl	800184c <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8001a64:	bf00      	nop
}
 8001a66:	bd80      	pop	{r7, pc}
 8001a68:	58000c00 	.word	0x58000c00

08001a6c <HW_IPCC_BLE_SendCmd>:

void HW_IPCC_BLE_SendCmd( void )
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_BLE_CMD_CHANNEL );
 8001a70:	2101      	movs	r1, #1
 8001a72:	4802      	ldr	r0, [pc, #8]	; (8001a7c <HW_IPCC_BLE_SendCmd+0x10>)
 8001a74:	f7ff ff0a 	bl	800188c <LL_C1_IPCC_SetFlag_CHx>

  return;
 8001a78:	bf00      	nop
}
 8001a7a:	bd80      	pop	{r7, pc}
 8001a7c:	58000c00 	.word	0x58000c00

08001a80 <HW_IPCC_BLE_EvtHandler>:

static void HW_IPCC_BLE_EvtHandler( void )
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	af00      	add	r7, sp, #0
  HW_IPCC_BLE_RxEvtNot();
 8001a84:	f00a fde6 	bl	800c654 <HW_IPCC_BLE_RxEvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 8001a88:	2101      	movs	r1, #1
 8001a8a:	4802      	ldr	r0, [pc, #8]	; (8001a94 <HW_IPCC_BLE_EvtHandler+0x14>)
 8001a8c:	f7ff fef0 	bl	8001870 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 8001a90:	bf00      	nop
}
 8001a92:	bd80      	pop	{r7, pc}
 8001a94:	58000c00 	.word	0x58000c00

08001a98 <HW_IPCC_BLE_AclDataEvtHandler>:

  return;
}

static void HW_IPCC_BLE_AclDataEvtHandler( void )
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_HCI_ACL_DATA_CHANNEL );
 8001a9c:	2120      	movs	r1, #32
 8001a9e:	4803      	ldr	r0, [pc, #12]	; (8001aac <HW_IPCC_BLE_AclDataEvtHandler+0x14>)
 8001aa0:	f7ff fec2 	bl	8001828 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_BLE_AclDataAckNot();
 8001aa4:	f00a fe06 	bl	800c6b4 <HW_IPCC_BLE_AclDataAckNot>

  return;
 8001aa8:	bf00      	nop
}
 8001aaa:	bd80      	pop	{r7, pc}
 8001aac:	58000c00 	.word	0x58000c00

08001ab0 <HW_IPCC_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
void HW_IPCC_SYS_Init( void )
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 8001ab4:	2102      	movs	r1, #2
 8001ab6:	4802      	ldr	r0, [pc, #8]	; (8001ac0 <HW_IPCC_SYS_Init+0x10>)
 8001ab8:	f7ff fec8 	bl	800184c <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8001abc:	bf00      	nop
}
 8001abe:	bd80      	pop	{r7, pc}
 8001ac0:	58000c00 	.word	0x58000c00

08001ac4 <HW_IPCC_SYS_SendCmd>:

void HW_IPCC_SYS_SendCmd( void )
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8001ac8:	2102      	movs	r1, #2
 8001aca:	4804      	ldr	r0, [pc, #16]	; (8001adc <HW_IPCC_SYS_SendCmd+0x18>)
 8001acc:	f7ff fede 	bl	800188c <LL_C1_IPCC_SetFlag_CHx>
  LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8001ad0:	2102      	movs	r1, #2
 8001ad2:	4802      	ldr	r0, [pc, #8]	; (8001adc <HW_IPCC_SYS_SendCmd+0x18>)
 8001ad4:	f7ff fe95 	bl	8001802 <LL_C1_IPCC_EnableTransmitChannel>

  return;
 8001ad8:	bf00      	nop
}
 8001ada:	bd80      	pop	{r7, pc}
 8001adc:	58000c00 	.word	0x58000c00

08001ae0 <HW_IPCC_SYS_CmdEvtHandler>:

static void HW_IPCC_SYS_CmdEvtHandler( void )
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8001ae4:	2102      	movs	r1, #2
 8001ae6:	4803      	ldr	r0, [pc, #12]	; (8001af4 <HW_IPCC_SYS_CmdEvtHandler+0x14>)
 8001ae8:	f7ff fe9e 	bl	8001828 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_SYS_CmdEvtNot();
 8001aec:	f00a fe32 	bl	800c754 <HW_IPCC_SYS_CmdEvtNot>

  return;
 8001af0:	bf00      	nop
}
 8001af2:	bd80      	pop	{r7, pc}
 8001af4:	58000c00 	.word	0x58000c00

08001af8 <HW_IPCC_SYS_EvtHandler>:

static void HW_IPCC_SYS_EvtHandler( void )
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	af00      	add	r7, sp, #0
  HW_IPCC_SYS_EvtNot();
 8001afc:	f00a fe40 	bl	800c780 <HW_IPCC_SYS_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 8001b00:	2102      	movs	r1, #2
 8001b02:	4802      	ldr	r0, [pc, #8]	; (8001b0c <HW_IPCC_SYS_EvtHandler+0x14>)
 8001b04:	f7ff feb4 	bl	8001870 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 8001b08:	bf00      	nop
}
 8001b0a:	bd80      	pop	{r7, pc}
 8001b0c:	58000c00 	.word	0x58000c00

08001b10 <HW_IPCC_MM_SendFreeBuf>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void HW_IPCC_MM_SendFreeBuf( void (*cb)( void ) )
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	b082      	sub	sp, #8
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]
  if ( LL_C1_IPCC_IsActiveFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ) )
 8001b18:	2108      	movs	r1, #8
 8001b1a:	480c      	ldr	r0, [pc, #48]	; (8001b4c <HW_IPCC_MM_SendFreeBuf+0x3c>)
 8001b1c:	f7ff fec5 	bl	80018aa <LL_C1_IPCC_IsActiveFlag_CHx>
 8001b20:	4603      	mov	r3, r0
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d007      	beq.n	8001b36 <HW_IPCC_MM_SendFreeBuf+0x26>
  {
    FreeBufCb = cb;
 8001b26:	4a0a      	ldr	r2, [pc, #40]	; (8001b50 <HW_IPCC_MM_SendFreeBuf+0x40>)
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	6013      	str	r3, [r2, #0]
    LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8001b2c:	2108      	movs	r1, #8
 8001b2e:	4807      	ldr	r0, [pc, #28]	; (8001b4c <HW_IPCC_MM_SendFreeBuf+0x3c>)
 8001b30:	f7ff fe67 	bl	8001802 <LL_C1_IPCC_EnableTransmitChannel>
    cb();

    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
  }

  return;
 8001b34:	e006      	b.n	8001b44 <HW_IPCC_MM_SendFreeBuf+0x34>
    cb();
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	4798      	blx	r3
    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8001b3a:	2108      	movs	r1, #8
 8001b3c:	4803      	ldr	r0, [pc, #12]	; (8001b4c <HW_IPCC_MM_SendFreeBuf+0x3c>)
 8001b3e:	f7ff fea5 	bl	800188c <LL_C1_IPCC_SetFlag_CHx>
  return;
 8001b42:	bf00      	nop
}
 8001b44:	3708      	adds	r7, #8
 8001b46:	46bd      	mov	sp, r7
 8001b48:	bd80      	pop	{r7, pc}
 8001b4a:	bf00      	nop
 8001b4c:	58000c00 	.word	0x58000c00
 8001b50:	200003dc 	.word	0x200003dc

08001b54 <HW_IPCC_MM_FreeBufHandler>:

static void HW_IPCC_MM_FreeBufHandler( void )
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8001b58:	2108      	movs	r1, #8
 8001b5a:	4806      	ldr	r0, [pc, #24]	; (8001b74 <HW_IPCC_MM_FreeBufHandler+0x20>)
 8001b5c:	f7ff fe64 	bl	8001828 <LL_C1_IPCC_DisableTransmitChannel>

  FreeBufCb();
 8001b60:	4b05      	ldr	r3, [pc, #20]	; (8001b78 <HW_IPCC_MM_FreeBufHandler+0x24>)
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	4798      	blx	r3

  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8001b66:	2108      	movs	r1, #8
 8001b68:	4802      	ldr	r0, [pc, #8]	; (8001b74 <HW_IPCC_MM_FreeBufHandler+0x20>)
 8001b6a:	f7ff fe8f 	bl	800188c <LL_C1_IPCC_SetFlag_CHx>

  return;
 8001b6e:	bf00      	nop
}
 8001b70:	bd80      	pop	{r7, pc}
 8001b72:	bf00      	nop
 8001b74:	58000c00 	.word	0x58000c00
 8001b78:	200003dc 	.word	0x200003dc

08001b7c <HW_IPCC_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void HW_IPCC_TRACES_Init( void )
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_TRACES_CHANNEL );
 8001b80:	2108      	movs	r1, #8
 8001b82:	4802      	ldr	r0, [pc, #8]	; (8001b8c <HW_IPCC_TRACES_Init+0x10>)
 8001b84:	f7ff fe62 	bl	800184c <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8001b88:	bf00      	nop
}
 8001b8a:	bd80      	pop	{r7, pc}
 8001b8c:	58000c00 	.word	0x58000c00

08001b90 <HW_IPCC_TRACES_EvtHandler>:

static void HW_IPCC_TRACES_EvtHandler( void )
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	af00      	add	r7, sp, #0
  HW_IPCC_TRACES_EvtNot();
 8001b94:	f00a fe9c 	bl	800c8d0 <HW_IPCC_TRACES_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_TRACES_CHANNEL );
 8001b98:	2108      	movs	r1, #8
 8001b9a:	4802      	ldr	r0, [pc, #8]	; (8001ba4 <HW_IPCC_TRACES_EvtHandler+0x14>)
 8001b9c:	f7ff fe68 	bl	8001870 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 8001ba0:	bf00      	nop
}
 8001ba2:	bd80      	pop	{r7, pc}
 8001ba4:	58000c00 	.word	0x58000c00

08001ba8 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 8001ba8:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001baa:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001bac:	3304      	adds	r3, #4

08001bae <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001bae:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001bb0:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 8001bb2:	d3f9      	bcc.n	8001ba8 <CopyDataInit>
  bx lr
 8001bb4:	4770      	bx	lr

08001bb6 <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 8001bb6:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8001bb8:	3004      	adds	r0, #4

08001bba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 8001bba:	4288      	cmp	r0, r1
  bcc FillZerobss
 8001bbc:	d3fb      	bcc.n	8001bb6 <FillZerobss>
  bx lr
 8001bbe:	4770      	bx	lr

08001bc0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001bc0:	480c      	ldr	r0, [pc, #48]	; (8001bf4 <LoopForever+0x4>)
  mov   sp, r0          /* set stack pointer */
 8001bc2:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8001bc4:	f003 ff66 	bl	8005a94 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8001bc8:	480b      	ldr	r0, [pc, #44]	; (8001bf8 <LoopForever+0x8>)
 8001bca:	490c      	ldr	r1, [pc, #48]	; (8001bfc <LoopForever+0xc>)
 8001bcc:	4a0c      	ldr	r2, [pc, #48]	; (8001c00 <LoopForever+0x10>)
 8001bce:	2300      	movs	r3, #0
 8001bd0:	f7ff ffed 	bl	8001bae <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8001bd4:	480b      	ldr	r0, [pc, #44]	; (8001c04 <LoopForever+0x14>)
 8001bd6:	490c      	ldr	r1, [pc, #48]	; (8001c08 <LoopForever+0x18>)
 8001bd8:	2300      	movs	r3, #0
 8001bda:	f7ff ffee 	bl	8001bba <LoopFillZerobss>
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 8001bde:	480b      	ldr	r0, [pc, #44]	; (8001c0c <LoopForever+0x1c>)
 8001be0:	490b      	ldr	r1, [pc, #44]	; (8001c10 <LoopForever+0x20>)
 8001be2:	2300      	movs	r3, #0
 8001be4:	f7ff ffe9 	bl	8001bba <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001be8:	f00f ffa4 	bl	8011b34 <__libc_init_array>
/* Call the application s entry point.*/
	bl	main
 8001bec:	f002 f9c4 	bl	8003f78 <main>

08001bf0 <LoopForever>:

LoopForever:
  b LoopForever
 8001bf0:	e7fe      	b.n	8001bf0 <LoopForever>
 8001bf2:	0000      	.short	0x0000
  ldr   r0, =_estack
 8001bf4:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 8001bf8:	20000004 	.word	0x20000004
 8001bfc:	200001f4 	.word	0x200001f4
 8001c00:	08016680 	.word	0x08016680
  INIT_BSS _sbss, _ebss
 8001c04:	200003b8 	.word	0x200003b8
 8001c08:	200062c0 	.word	0x200062c0
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 8001c0c:	200301e0 	.word	0x200301e0
 8001c10:	20030a57 	.word	0x20030a57

08001c14 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001c14:	e7fe      	b.n	8001c14 <ADC1_IRQHandler>
	...

08001c18 <LL_EXTI_EnableIT_32_63>:
{
 8001c18:	b480      	push	{r7}
 8001c1a:	b083      	sub	sp, #12
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8001c20:	4b06      	ldr	r3, [pc, #24]	; (8001c3c <LL_EXTI_EnableIT_32_63+0x24>)
 8001c22:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8001c26:	4905      	ldr	r1, [pc, #20]	; (8001c3c <LL_EXTI_EnableIT_32_63+0x24>)
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	4313      	orrs	r3, r2
 8001c2c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8001c30:	bf00      	nop
 8001c32:	370c      	adds	r7, #12
 8001c34:	46bd      	mov	sp, r7
 8001c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3a:	4770      	bx	lr
 8001c3c:	58000800 	.word	0x58000800

08001c40 <LL_AHB2_GRP1_EnableClock>:
{
 8001c40:	b480      	push	{r7}
 8001c42:	b085      	sub	sp, #20
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001c48:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c4c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001c4e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	4313      	orrs	r3, r2
 8001c56:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001c58:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c5c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	4013      	ands	r3, r2
 8001c62:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001c64:	68fb      	ldr	r3, [r7, #12]
}
 8001c66:	bf00      	nop
 8001c68:	3714      	adds	r7, #20
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c70:	4770      	bx	lr

08001c72 <LL_C2_AHB2_GRP1_EnableClock>:
{
 8001c72:	b480      	push	{r7}
 8001c74:	b085      	sub	sp, #20
 8001c76:	af00      	add	r7, sp, #0
 8001c78:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->C2AHB2ENR, Periphs);
 8001c7a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c7e:	f8d3 214c 	ldr.w	r2, [r3, #332]	; 0x14c
 8001c82:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	4313      	orrs	r3, r2
 8001c8a:	f8c1 314c 	str.w	r3, [r1, #332]	; 0x14c
  tmpreg = READ_BIT(RCC->C2AHB2ENR, Periphs);
 8001c8e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c92:	f8d3 214c 	ldr.w	r2, [r3, #332]	; 0x14c
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	4013      	ands	r3, r2
 8001c9a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001c9c:	68fb      	ldr	r3, [r7, #12]
}
 8001c9e:	bf00      	nop
 8001ca0:	3714      	adds	r7, #20
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca8:	4770      	bx	lr

08001caa <APPD_Init>:
static void APPD_BleDtbCfg( void );
/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void APPD_Init( void )
{
 8001caa:	b580      	push	{r7, lr}
 8001cac:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APPD_Init */
#if (CFG_DEBUGGER_SUPPORTED == 1)
  /**
   * Keep debugger enabled while in any low power mode
   */
  HAL_DBGMCU_EnableDBGSleepMode();
 8001cae:	f003 ffbf 	bl	8005c30 <HAL_DBGMCU_EnableDBGSleepMode>
  HAL_DBGMCU_EnableDBGStopMode();
 8001cb2:	f003 ffc3 	bl	8005c3c <HAL_DBGMCU_EnableDBGStopMode>

  /***************** ENABLE DEBUGGER *************************************/
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_48);
 8001cb6:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8001cba:	f7ff ffad 	bl	8001c18 <LL_EXTI_EnableIT_32_63>
  HAL_DBGMCU_DisableDBGStandbyMode();

#endif /* (CFG_DEBUGGER_SUPPORTED == 1) */

#if(CFG_DEBUG_TRACE != 0)
  DbgTraceInit();
 8001cbe:	f00a ffe3 	bl	800cc88 <DbgTraceInit>
#endif

  APPD_SetCPU2GpioConfig( );
 8001cc2:	f000 f821 	bl	8001d08 <APPD_SetCPU2GpioConfig>
  APPD_BleDtbCfg( );
 8001cc6:	f000 f8bf 	bl	8001e48 <APPD_BleDtbCfg>

/* USER CODE END APPD_Init */
  return;
 8001cca:	bf00      	nop
}
 8001ccc:	bd80      	pop	{r7, pc}
	...

08001cd0 <APPD_EnableCPU2>:

void APPD_EnableCPU2( void )
{
 8001cd0:	b5b0      	push	{r4, r5, r7, lr}
 8001cd2:	b088      	sub	sp, #32
 8001cd4:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APPD_EnableCPU2 */
  SHCI_C2_DEBUG_Init_Cmd_Packet_t DebugCmdPacket =
 8001cd6:	4b0b      	ldr	r3, [pc, #44]	; (8001d04 <APPD_EnableCPU2+0x34>)
 8001cd8:	1d3c      	adds	r4, r7, #4
 8001cda:	461d      	mov	r5, r3
 8001cdc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001cde:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001ce0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001ce4:	c403      	stmia	r4!, {r0, r1}
 8001ce6:	8022      	strh	r2, [r4, #0]
 8001ce8:	3402      	adds	r4, #2
 8001cea:	0c13      	lsrs	r3, r2, #16
 8001cec:	7023      	strb	r3, [r4, #0]
    NBR_OF_TRACES_CONFIG_PARAMETERS,
    NBR_OF_GENERAL_CONFIG_PARAMETERS}
  };

  /**< Traces channel initialization */
  TL_TRACES_Init( );
 8001cee:	f00a fddd 	bl	800c8ac <TL_TRACES_Init>

  /** GPIO DEBUG Initialization */
  SHCI_C2_DEBUG_Init( &DebugCmdPacket  );
 8001cf2:	1d3b      	adds	r3, r7, #4
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	f00a f93c 	bl	800bf72 <SHCI_C2_DEBUG_Init>

/* USER CODE END APPD_EnableCPU2 */
  return;
 8001cfa:	bf00      	nop
}
 8001cfc:	3720      	adds	r7, #32
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	bdb0      	pop	{r4, r5, r7, pc}
 8001d02:	bf00      	nop
 8001d04:	08014df8 	.word	0x08014df8

08001d08 <APPD_SetCPU2GpioConfig>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void APPD_SetCPU2GpioConfig( void )
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	b088      	sub	sp, #32
 8001d0c:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APPD_SetCPU2GpioConfig */
  GPIO_InitTypeDef gpio_config = {0};
 8001d0e:	1d3b      	adds	r3, r7, #4
 8001d10:	2200      	movs	r2, #0
 8001d12:	601a      	str	r2, [r3, #0]
 8001d14:	605a      	str	r2, [r3, #4]
 8001d16:	609a      	str	r2, [r3, #8]
 8001d18:	60da      	str	r2, [r3, #12]
 8001d1a:	611a      	str	r2, [r3, #16]
  uint8_t local_loop;
  uint16_t gpioa_pin_list;
  uint16_t gpiob_pin_list;
  uint16_t gpioc_pin_list;

  gpioa_pin_list = 0;
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	83bb      	strh	r3, [r7, #28]
  gpiob_pin_list = 0;
 8001d20:	2300      	movs	r3, #0
 8001d22:	837b      	strh	r3, [r7, #26]
  gpioc_pin_list = 0;
 8001d24:	2300      	movs	r3, #0
 8001d26:	833b      	strh	r3, [r7, #24]

  for(local_loop = 0 ; local_loop < GPIO_CFG_NBR_OF_FEATURES; local_loop++)
 8001d28:	2300      	movs	r3, #0
 8001d2a:	77fb      	strb	r3, [r7, #31]
 8001d2c:	e033      	b.n	8001d96 <APPD_SetCPU2GpioConfig+0x8e>
  {
    if( aGpioConfigList[local_loop].enable != 0)
 8001d2e:	7ffb      	ldrb	r3, [r7, #31]
 8001d30:	4a42      	ldr	r2, [pc, #264]	; (8001e3c <APPD_SetCPU2GpioConfig+0x134>)
 8001d32:	00db      	lsls	r3, r3, #3
 8001d34:	4413      	add	r3, r2
 8001d36:	799b      	ldrb	r3, [r3, #6]
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d028      	beq.n	8001d8e <APPD_SetCPU2GpioConfig+0x86>
    {
      switch((uint32_t)aGpioConfigList[local_loop].port)
 8001d3c:	7ffb      	ldrb	r3, [r7, #31]
 8001d3e:	4a3f      	ldr	r2, [pc, #252]	; (8001e3c <APPD_SetCPU2GpioConfig+0x134>)
 8001d40:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8001d44:	4a3e      	ldr	r2, [pc, #248]	; (8001e40 <APPD_SetCPU2GpioConfig+0x138>)
 8001d46:	4293      	cmp	r3, r2
 8001d48:	d00f      	beq.n	8001d6a <APPD_SetCPU2GpioConfig+0x62>
 8001d4a:	4a3e      	ldr	r2, [pc, #248]	; (8001e44 <APPD_SetCPU2GpioConfig+0x13c>)
 8001d4c:	4293      	cmp	r3, r2
 8001d4e:	d015      	beq.n	8001d7c <APPD_SetCPU2GpioConfig+0x74>
 8001d50:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001d54:	d000      	beq.n	8001d58 <APPD_SetCPU2GpioConfig+0x50>
        case (uint32_t)GPIOC:
            gpioc_pin_list |= aGpioConfigList[local_loop].pin;
          break;

        default:
          break;
 8001d56:	e01b      	b.n	8001d90 <APPD_SetCPU2GpioConfig+0x88>
            gpioa_pin_list |= aGpioConfigList[local_loop].pin;
 8001d58:	7ffb      	ldrb	r3, [r7, #31]
 8001d5a:	4a38      	ldr	r2, [pc, #224]	; (8001e3c <APPD_SetCPU2GpioConfig+0x134>)
 8001d5c:	00db      	lsls	r3, r3, #3
 8001d5e:	4413      	add	r3, r2
 8001d60:	889a      	ldrh	r2, [r3, #4]
 8001d62:	8bbb      	ldrh	r3, [r7, #28]
 8001d64:	4313      	orrs	r3, r2
 8001d66:	83bb      	strh	r3, [r7, #28]
          break;
 8001d68:	e012      	b.n	8001d90 <APPD_SetCPU2GpioConfig+0x88>
            gpiob_pin_list |= aGpioConfigList[local_loop].pin;
 8001d6a:	7ffb      	ldrb	r3, [r7, #31]
 8001d6c:	4a33      	ldr	r2, [pc, #204]	; (8001e3c <APPD_SetCPU2GpioConfig+0x134>)
 8001d6e:	00db      	lsls	r3, r3, #3
 8001d70:	4413      	add	r3, r2
 8001d72:	889a      	ldrh	r2, [r3, #4]
 8001d74:	8b7b      	ldrh	r3, [r7, #26]
 8001d76:	4313      	orrs	r3, r2
 8001d78:	837b      	strh	r3, [r7, #26]
          break;
 8001d7a:	e009      	b.n	8001d90 <APPD_SetCPU2GpioConfig+0x88>
            gpioc_pin_list |= aGpioConfigList[local_loop].pin;
 8001d7c:	7ffb      	ldrb	r3, [r7, #31]
 8001d7e:	4a2f      	ldr	r2, [pc, #188]	; (8001e3c <APPD_SetCPU2GpioConfig+0x134>)
 8001d80:	00db      	lsls	r3, r3, #3
 8001d82:	4413      	add	r3, r2
 8001d84:	889a      	ldrh	r2, [r3, #4]
 8001d86:	8b3b      	ldrh	r3, [r7, #24]
 8001d88:	4313      	orrs	r3, r2
 8001d8a:	833b      	strh	r3, [r7, #24]
          break;
 8001d8c:	e000      	b.n	8001d90 <APPD_SetCPU2GpioConfig+0x88>
      }
    }
 8001d8e:	bf00      	nop
  for(local_loop = 0 ; local_loop < GPIO_CFG_NBR_OF_FEATURES; local_loop++)
 8001d90:	7ffb      	ldrb	r3, [r7, #31]
 8001d92:	3301      	adds	r3, #1
 8001d94:	77fb      	strb	r3, [r7, #31]
 8001d96:	7ffb      	ldrb	r3, [r7, #31]
 8001d98:	2b21      	cmp	r3, #33	; 0x21
 8001d9a:	d9c8      	bls.n	8001d2e <APPD_SetCPU2GpioConfig+0x26>
  }

  gpio_config.Pull = GPIO_NOPULL;
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	60fb      	str	r3, [r7, #12]
  gpio_config.Mode = GPIO_MODE_OUTPUT_PP;
 8001da0:	2301      	movs	r3, #1
 8001da2:	60bb      	str	r3, [r7, #8]
  gpio_config.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001da4:	2303      	movs	r3, #3
 8001da6:	613b      	str	r3, [r7, #16]

  if(gpioa_pin_list != 0)
 8001da8:	8bbb      	ldrh	r3, [r7, #28]
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d014      	beq.n	8001dd8 <APPD_SetCPU2GpioConfig+0xd0>
  {
    gpio_config.Pin = gpioa_pin_list;
 8001dae:	8bbb      	ldrh	r3, [r7, #28]
 8001db0:	607b      	str	r3, [r7, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001db2:	2001      	movs	r0, #1
 8001db4:	f7ff ff44 	bl	8001c40 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_C2GPIOA_CLK_ENABLE();
 8001db8:	2001      	movs	r0, #1
 8001dba:	f7ff ff5a 	bl	8001c72 <LL_C2_AHB2_GRP1_EnableClock>
    HAL_GPIO_Init(GPIOA, &gpio_config);
 8001dbe:	1d3b      	adds	r3, r7, #4
 8001dc0:	4619      	mov	r1, r3
 8001dc2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001dc6:	f004 f8a7 	bl	8005f18 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(GPIOA, gpioa_pin_list, GPIO_PIN_RESET);
 8001dca:	8bbb      	ldrh	r3, [r7, #28]
 8001dcc:	2200      	movs	r2, #0
 8001dce:	4619      	mov	r1, r3
 8001dd0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001dd4:	f004 fa28 	bl	8006228 <HAL_GPIO_WritePin>
  }

  if(gpiob_pin_list != 0)
 8001dd8:	8b7b      	ldrh	r3, [r7, #26]
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d012      	beq.n	8001e04 <APPD_SetCPU2GpioConfig+0xfc>
  {
    gpio_config.Pin = gpiob_pin_list;
 8001dde:	8b7b      	ldrh	r3, [r7, #26]
 8001de0:	607b      	str	r3, [r7, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001de2:	2002      	movs	r0, #2
 8001de4:	f7ff ff2c 	bl	8001c40 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_C2GPIOB_CLK_ENABLE();
 8001de8:	2002      	movs	r0, #2
 8001dea:	f7ff ff42 	bl	8001c72 <LL_C2_AHB2_GRP1_EnableClock>
    HAL_GPIO_Init(GPIOB, &gpio_config);
 8001dee:	1d3b      	adds	r3, r7, #4
 8001df0:	4619      	mov	r1, r3
 8001df2:	4813      	ldr	r0, [pc, #76]	; (8001e40 <APPD_SetCPU2GpioConfig+0x138>)
 8001df4:	f004 f890 	bl	8005f18 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(GPIOB, gpiob_pin_list, GPIO_PIN_RESET);
 8001df8:	8b7b      	ldrh	r3, [r7, #26]
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	4619      	mov	r1, r3
 8001dfe:	4810      	ldr	r0, [pc, #64]	; (8001e40 <APPD_SetCPU2GpioConfig+0x138>)
 8001e00:	f004 fa12 	bl	8006228 <HAL_GPIO_WritePin>
  }

  if(gpioc_pin_list != 0)
 8001e04:	8b3b      	ldrh	r3, [r7, #24]
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d013      	beq.n	8001e32 <APPD_SetCPU2GpioConfig+0x12a>
  {
    gpio_config.Pin = gpioc_pin_list;
 8001e0a:	8b3b      	ldrh	r3, [r7, #24]
 8001e0c:	607b      	str	r3, [r7, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e0e:	2004      	movs	r0, #4
 8001e10:	f7ff ff16 	bl	8001c40 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_C2GPIOC_CLK_ENABLE();
 8001e14:	2004      	movs	r0, #4
 8001e16:	f7ff ff2c 	bl	8001c72 <LL_C2_AHB2_GRP1_EnableClock>
    HAL_GPIO_Init(GPIOC, &gpio_config);
 8001e1a:	1d3b      	adds	r3, r7, #4
 8001e1c:	4619      	mov	r1, r3
 8001e1e:	4809      	ldr	r0, [pc, #36]	; (8001e44 <APPD_SetCPU2GpioConfig+0x13c>)
 8001e20:	f004 f87a 	bl	8005f18 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(GPIOC, gpioc_pin_list, GPIO_PIN_RESET);
 8001e24:	8b3b      	ldrh	r3, [r7, #24]
 8001e26:	2200      	movs	r2, #0
 8001e28:	4619      	mov	r1, r3
 8001e2a:	4806      	ldr	r0, [pc, #24]	; (8001e44 <APPD_SetCPU2GpioConfig+0x13c>)
 8001e2c:	f004 f9fc 	bl	8006228 <HAL_GPIO_WritePin>
  }
  
/* USER CODE END APPD_SetCPU2GpioConfig */
  return;
 8001e30:	bf00      	nop
 8001e32:	bf00      	nop
}
 8001e34:	3720      	adds	r7, #32
 8001e36:	46bd      	mov	sp, r7
 8001e38:	bd80      	pop	{r7, pc}
 8001e3a:	bf00      	nop
 8001e3c:	08015000 	.word	0x08015000
 8001e40:	48000400 	.word	0x48000400
 8001e44:	48000800 	.word	0x48000800

08001e48 <APPD_BleDtbCfg>:

static void APPD_BleDtbCfg( void )
{
 8001e48:	b480      	push	{r7}
 8001e4a:	af00      	add	r7, sp, #0
    HAL_GPIO_Init(GPIOB, &gpio_config);
  }
#endif

/* USER CODE END APPD_BleDtbCfg */
  return;
 8001e4c:	bf00      	nop
}
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e54:	4770      	bx	lr

08001e56 <DbgOutputInit>:
 * WRAP FUNCTIONS
 *
*************************************************************/
#if(CFG_DEBUG_TRACE != 0)
void DbgOutputInit( void )
{
 8001e56:	b480      	push	{r7}
 8001e58:	af00      	add	r7, sp, #0
#endif
}
#endif

/* USER CODE END DbgOutputInit */
  return;
 8001e5a:	bf00      	nop
}
 8001e5c:	46bd      	mov	sp, r7
 8001e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e62:	4770      	bx	lr

08001e64 <DbgOutputTraces>:

void DbgOutputTraces(  uint8_t *p_data, uint16_t size, void (*cb)(void) )
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	b084      	sub	sp, #16
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	60f8      	str	r0, [r7, #12]
 8001e6c:	460b      	mov	r3, r1
 8001e6e:	607a      	str	r2, [r7, #4]
 8001e70:	817b      	strh	r3, [r7, #10]
/* USER CODE END DbgOutputTraces */
  HW_UART_Transmit_DMA(CFG_DEBUG_TRACE_UART, p_data, size, cb);
 8001e72:	897a      	ldrh	r2, [r7, #10]
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	68f9      	ldr	r1, [r7, #12]
 8001e78:	2000      	movs	r0, #0
 8001e7a:	f001 fcdd 	bl	8003838 <HW_UART_Transmit_DMA>

/* USER CODE END DbgOutputTraces */
  return;
 8001e7e:	bf00      	nop
}
 8001e80:	3710      	adds	r7, #16
 8001e82:	46bd      	mov	sp, r7
 8001e84:	bd80      	pop	{r7, pc}
	...

08001e88 <LL_C2_PWR_SetPowerMode>:
  *
  *         (*) Not available on devices STM32WB15xx, STM32WB10xx
  * @retval None
  */
__STATIC_INLINE void LL_C2_PWR_SetPowerMode(uint32_t LowPowerMode)
{
 8001e88:	b480      	push	{r7}
 8001e8a:	b083      	sub	sp, #12
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, LowPowerMode);
 8001e90:	4b07      	ldr	r3, [pc, #28]	; (8001eb0 <LL_C2_PWR_SetPowerMode+0x28>)
 8001e92:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001e96:	f023 0207 	bic.w	r2, r3, #7
 8001e9a:	4905      	ldr	r1, [pc, #20]	; (8001eb0 <LL_C2_PWR_SetPowerMode+0x28>)
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	4313      	orrs	r3, r2
 8001ea0:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 8001ea4:	bf00      	nop
 8001ea6:	370c      	adds	r7, #12
 8001ea8:	46bd      	mov	sp, r7
 8001eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eae:	4770      	bx	lr
 8001eb0:	58000400 	.word	0x58000400

08001eb4 <LL_RCC_SetClkAfterWakeFromStop>:
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_MSI
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_HSI
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetClkAfterWakeFromStop(uint32_t Clock)
{
 8001eb4:	b480      	push	{r7}
 8001eb6:	b083      	sub	sp, #12
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 8001ebc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ec0:	689b      	ldr	r3, [r3, #8]
 8001ec2:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8001ec6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	4313      	orrs	r3, r2
 8001ece:	608b      	str	r3, [r1, #8]
}
 8001ed0:	bf00      	nop
 8001ed2:	370c      	adds	r7, #12
 8001ed4:	46bd      	mov	sp, r7
 8001ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eda:	4770      	bx	lr

08001edc <APPE_Init>:
static void Button_Init( void );
/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void APPE_Init( void )
{
 8001edc:	b580      	push	{r7, lr}
 8001ede:	af00      	add	r7, sp, #0
  SystemPower_Config(); /**< Configure the system Power Mode */
 8001ee0:	f000 f814 	bl	8001f0c <SystemPower_Config>

  HW_TS_Init(hw_ts_InitMode_Full, &hrtc); /**< Initialize the TimerServer */
 8001ee4:	4908      	ldr	r1, [pc, #32]	; (8001f08 <APPE_Init+0x2c>)
 8001ee6:	2000      	movs	r0, #0
 8001ee8:	f001 fa2c 	bl	8003344 <HW_TS_Init>

/* USER CODE BEGIN APPE_Init_1 */
  APPD_Init();
 8001eec:	f7ff fedd 	bl	8001caa <APPD_Init>

  /**
   * The Standby mode should not be entered before the initialization is over
   * The default state of the Low Power Manager is to allow the Standby Mode so an request is needed here
   */
  UTIL_LPM_SetOffMode(1 << CFG_LPM_APP, UTIL_LPM_DISABLE);
 8001ef0:	2101      	movs	r1, #1
 8001ef2:	2001      	movs	r0, #1
 8001ef4:	f00f fdea 	bl	8011acc <UTIL_LPM_SetOffMode>

  Led_Init();
 8001ef8:	f000 f8a1 	bl	800203e <Led_Init>

  Button_Init();
 8001efc:	f000 f8a6 	bl	800204c <Button_Init>
/* USER CODE END APPE_Init_1 */
  appe_Tl_Init();	/* Initialize all transport layers */
 8001f00:	f000 f812 	bl	8001f28 <appe_Tl_Init>
   * This system event is received with APPE_SysUserEvtRx()
   */
/* USER CODE BEGIN APPE_Init_2 */

/* USER CODE END APPE_Init_2 */
   return;
 8001f04:	bf00      	nop
}
 8001f06:	bd80      	pop	{r7, pc}
 8001f08:	20006030 	.word	0x20006030

08001f0c <SystemPower_Config>:
 *
 * @param  None
 * @retval None
 */
static void SystemPower_Config(void)
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	af00      	add	r7, sp, #0
  /**
   * Select HSI as system clock source after Wake Up from Stop mode
   */
  LL_RCC_SetClkAfterWakeFromStop(LL_RCC_STOP_WAKEUPCLOCK_HSI);
 8001f10:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8001f14:	f7ff ffce 	bl	8001eb4 <LL_RCC_SetClkAfterWakeFromStop>

  /* Initialize low power manager */
  UTIL_LPM_Init();
 8001f18:	f00f fdc6 	bl	8011aa8 <UTIL_LPM_Init>
  /* Initialize the CPU2 reset value before starting CPU2 with C2BOOT */
  LL_C2_PWR_SetPowerMode(LL_PWR_MODE_SHUTDOWN);
 8001f1c:	2004      	movs	r0, #4
 8001f1e:	f7ff ffb3 	bl	8001e88 <LL_C2_PWR_SetPowerMode>
   *  Enable USB power
   */
  HAL_PWREx_EnableVddUSB();
#endif

  return;
 8001f22:	bf00      	nop
}
 8001f24:	bd80      	pop	{r7, pc}
	...

08001f28 <appe_Tl_Init>:

static void appe_Tl_Init( void )
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	b088      	sub	sp, #32
 8001f2c:	af00      	add	r7, sp, #0
  TL_MM_Config_t tl_mm_config;
  SHCI_TL_HciInitConf_t SHci_Tl_Init_Conf;
  /**< Reference table initialization */
  TL_Init();
 8001f2e:	f00a fb07 	bl	800c540 <TL_Init>

  MtxShciId = osMutexNew( NULL );
 8001f32:	2000      	movs	r0, #0
 8001f34:	f00b fe3c 	bl	800dbb0 <osMutexNew>
 8001f38:	4602      	mov	r2, r0
 8001f3a:	4b17      	ldr	r3, [pc, #92]	; (8001f98 <appe_Tl_Init+0x70>)
 8001f3c:	601a      	str	r2, [r3, #0]
  SemShciId = osSemaphoreNew( 1, 0, NULL ); /*< Create the semaphore and make it busy at initialization */
 8001f3e:	2200      	movs	r2, #0
 8001f40:	2100      	movs	r1, #0
 8001f42:	2001      	movs	r0, #1
 8001f44:	f00b ff7c 	bl	800de40 <osSemaphoreNew>
 8001f48:	4602      	mov	r2, r0
 8001f4a:	4b14      	ldr	r3, [pc, #80]	; (8001f9c <appe_Tl_Init+0x74>)
 8001f4c:	601a      	str	r2, [r3, #0]

  /** FreeRTOS system task creation */
  ShciUserEvtProcessId = osThreadNew(ShciUserEvtProcess, NULL, &ShciUserEvtProcess_attr);
 8001f4e:	4a14      	ldr	r2, [pc, #80]	; (8001fa0 <appe_Tl_Init+0x78>)
 8001f50:	2100      	movs	r1, #0
 8001f52:	4814      	ldr	r0, [pc, #80]	; (8001fa4 <appe_Tl_Init+0x7c>)
 8001f54:	f00b fc62 	bl	800d81c <osThreadNew>
 8001f58:	4602      	mov	r2, r0
 8001f5a:	4b13      	ldr	r3, [pc, #76]	; (8001fa8 <appe_Tl_Init+0x80>)
 8001f5c:	601a      	str	r2, [r3, #0]

  /**< System channel initialization */
  SHci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&SystemCmdBuffer;
 8001f5e:	4b13      	ldr	r3, [pc, #76]	; (8001fac <appe_Tl_Init+0x84>)
 8001f60:	603b      	str	r3, [r7, #0]
  SHci_Tl_Init_Conf.StatusNotCallBack = APPE_SysStatusNot;
 8001f62:	4b13      	ldr	r3, [pc, #76]	; (8001fb0 <appe_Tl_Init+0x88>)
 8001f64:	607b      	str	r3, [r7, #4]
  shci_init(APPE_SysUserEvtRx, (void*) &SHci_Tl_Init_Conf);
 8001f66:	463b      	mov	r3, r7
 8001f68:	4619      	mov	r1, r3
 8001f6a:	4812      	ldr	r0, [pc, #72]	; (8001fb4 <appe_Tl_Init+0x8c>)
 8001f6c:	f00a f9ae 	bl	800c2cc <shci_init>

  /**< Memory Manager channel initialization */
  tl_mm_config.p_BleSpareEvtBuffer = BleSpareEvtBuffer;
 8001f70:	4b11      	ldr	r3, [pc, #68]	; (8001fb8 <appe_Tl_Init+0x90>)
 8001f72:	60bb      	str	r3, [r7, #8]
  tl_mm_config.p_SystemSpareEvtBuffer = SystemSpareEvtBuffer;
 8001f74:	4b11      	ldr	r3, [pc, #68]	; (8001fbc <appe_Tl_Init+0x94>)
 8001f76:	60fb      	str	r3, [r7, #12]
  tl_mm_config.p_AsynchEvtPool = EvtPool;
 8001f78:	4b11      	ldr	r3, [pc, #68]	; (8001fc0 <appe_Tl_Init+0x98>)
 8001f7a:	613b      	str	r3, [r7, #16]
  tl_mm_config.AsynchEvtPoolSize = POOL_SIZE;
 8001f7c:	f240 533c 	movw	r3, #1340	; 0x53c
 8001f80:	617b      	str	r3, [r7, #20]
  TL_MM_Init( &tl_mm_config );
 8001f82:	f107 0308 	add.w	r3, r7, #8
 8001f86:	4618      	mov	r0, r3
 8001f88:	f00a fc1c 	bl	800c7c4 <TL_MM_Init>

  TL_Enable();
 8001f8c:	f00a fad2 	bl	800c534 <TL_Enable>

  return;
 8001f90:	bf00      	nop
}
 8001f92:	3720      	adds	r7, #32
 8001f94:	46bd      	mov	sp, r7
 8001f96:	bd80      	pop	{r7, pc}
 8001f98:	200060e0 	.word	0x200060e0
 8001f9c:	200060e8 	.word	0x200060e8
 8001fa0:	08015110 	.word	0x08015110
 8001fa4:	08002025 	.word	0x08002025
 8001fa8:	200060e4 	.word	0x200060e4
 8001fac:	20030724 	.word	0x20030724
 8001fb0:	08001fc5 	.word	0x08001fc5
 8001fb4:	08002005 	.word	0x08002005
 8001fb8:	2003093c 	.word	0x2003093c
 8001fbc:	20030830 	.word	0x20030830
 8001fc0:	200301e8 	.word	0x200301e8

08001fc4 <APPE_SysStatusNot>:

static void APPE_SysStatusNot( SHCI_TL_CmdStatus_t status )
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	b082      	sub	sp, #8
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	4603      	mov	r3, r0
 8001fcc:	71fb      	strb	r3, [r7, #7]
  switch (status)
 8001fce:	79fb      	ldrb	r3, [r7, #7]
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d002      	beq.n	8001fda <APPE_SysStatusNot+0x16>
 8001fd4:	2b01      	cmp	r3, #1
 8001fd6:	d008      	beq.n	8001fea <APPE_SysStatusNot+0x26>
    case SHCI_TL_CmdAvailable:
      osMutexRelease( MtxShciId );
      break;

    default:
      break;
 8001fd8:	e00d      	b.n	8001ff6 <APPE_SysStatusNot+0x32>
      osMutexAcquire( MtxShciId, osWaitForever );
 8001fda:	4b09      	ldr	r3, [pc, #36]	; (8002000 <APPE_SysStatusNot+0x3c>)
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f04f 31ff 	mov.w	r1, #4294967295
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	f00b fe7e 	bl	800dce4 <osMutexAcquire>
      break;
 8001fe8:	e005      	b.n	8001ff6 <APPE_SysStatusNot+0x32>
      osMutexRelease( MtxShciId );
 8001fea:	4b05      	ldr	r3, [pc, #20]	; (8002000 <APPE_SysStatusNot+0x3c>)
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	4618      	mov	r0, r3
 8001ff0:	f00b fed6 	bl	800dda0 <osMutexRelease>
      break;
 8001ff4:	bf00      	nop
  }
  return;
 8001ff6:	bf00      	nop
}
 8001ff8:	3708      	adds	r7, #8
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	bd80      	pop	{r7, pc}
 8001ffe:	bf00      	nop
 8002000:	200060e0 	.word	0x200060e0

08002004 <APPE_SysUserEvtRx>:
 * The buffer shall not be released
 * ( eg ((tSHCI_UserEvtRxParam*)pPayload)->status shall be set to SHCI_TL_UserEventFlow_Disable )
 * When the status is not filled, the buffer is released by default
 */
static void APPE_SysUserEvtRx( void * pPayload )
{
 8002004:	b580      	push	{r7, lr}
 8002006:	b082      	sub	sp, #8
 8002008:	af00      	add	r7, sp, #0
 800200a:	6078      	str	r0, [r7, #4]
  UNUSED(pPayload);
  /* Traces channel initialization */
  APPD_EnableCPU2( );
 800200c:	f7ff fe60 	bl	8001cd0 <APPD_EnableCPU2>

  APP_BLE_Init( );
 8002010:	f7fe fdc6 	bl	8000ba0 <APP_BLE_Init>
  UTIL_LPM_SetOffMode(1U << CFG_LPM_APP, UTIL_LPM_ENABLE);
 8002014:	2100      	movs	r1, #0
 8002016:	2001      	movs	r0, #1
 8002018:	f00f fd58 	bl	8011acc <UTIL_LPM_SetOffMode>
  return;
 800201c:	bf00      	nop
}
 800201e:	3708      	adds	r7, #8
 8002020:	46bd      	mov	sp, r7
 8002022:	bd80      	pop	{r7, pc}

08002024 <ShciUserEvtProcess>:
 *
 * FREERTOS WRAPPER FUNCTIONS
 *
*************************************************************/
static void ShciUserEvtProcess(void *argument)
{
 8002024:	b580      	push	{r7, lr}
 8002026:	b082      	sub	sp, #8
 8002028:	af00      	add	r7, sp, #0
 800202a:	6078      	str	r0, [r7, #4]
  for(;;)
  {
    /* USER CODE BEGIN SHCI_USER_EVT_PROCESS_1 */

    /* USER CODE END SHCI_USER_EVT_PROCESS_1 */
     osThreadFlagsWait(1, osFlagsWaitAny, osWaitForever);
 800202c:	f04f 32ff 	mov.w	r2, #4294967295
 8002030:	2100      	movs	r1, #0
 8002032:	2001      	movs	r0, #1
 8002034:	f00b fcfa 	bl	800da2c <osThreadFlagsWait>
     shci_user_evt_proc();
 8002038:	f00a f964 	bl	800c304 <shci_user_evt_proc>
     osThreadFlagsWait(1, osFlagsWaitAny, osWaitForever);
 800203c:	e7f6      	b.n	800202c <ShciUserEvtProcess+0x8>

0800203e <Led_Init>:
    }
}

/* USER CODE BEGIN FD_LOCAL_FUNCTIONS */
static void Led_Init( void )
{
 800203e:	b480      	push	{r7}
 8002040:	af00      	add	r7, sp, #0
  BSP_LED_Init(LED_RED);

  BSP_LED_On(LED_GREEN);
#endif

  return;
 8002042:	bf00      	nop
}
 8002044:	46bd      	mov	sp, r7
 8002046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204a:	4770      	bx	lr

0800204c <Button_Init>:

static void Button_Init( void )
{
 800204c:	b480      	push	{r7}
 800204e:	af00      	add	r7, sp, #0
  BSP_PB_Init(BUTTON_SW1, BUTTON_MODE_EXTI);
  BSP_PB_Init(BUTTON_SW2, BUTTON_MODE_EXTI);
  BSP_PB_Init(BUTTON_SW3, BUTTON_MODE_EXTI);
#endif

  return;
 8002050:	bf00      	nop
}
 8002052:	46bd      	mov	sp, r7
 8002054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002058:	4770      	bx	lr
	...

0800205c <shci_notify_asynch_evt>:
 * WRAP FUNCTIONS
 *
 *************************************************************/

void shci_notify_asynch_evt(void* pdata)
{
 800205c:	b580      	push	{r7, lr}
 800205e:	b082      	sub	sp, #8
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]
  UNUSED(pdata);
  osThreadFlagsSet( ShciUserEvtProcessId, 1 );
 8002064:	4b04      	ldr	r3, [pc, #16]	; (8002078 <shci_notify_asynch_evt+0x1c>)
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	2101      	movs	r1, #1
 800206a:	4618      	mov	r0, r3
 800206c:	f00b fc7c 	bl	800d968 <osThreadFlagsSet>
  return;
 8002070:	bf00      	nop
}
 8002072:	3708      	adds	r7, #8
 8002074:	46bd      	mov	sp, r7
 8002076:	bd80      	pop	{r7, pc}
 8002078:	200060e4 	.word	0x200060e4

0800207c <shci_cmd_resp_release>:

void shci_cmd_resp_release(uint32_t flag)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	b082      	sub	sp, #8
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]
  UNUSED(flag);
  osSemaphoreRelease( SemShciId );
 8002084:	4b04      	ldr	r3, [pc, #16]	; (8002098 <shci_cmd_resp_release+0x1c>)
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	4618      	mov	r0, r3
 800208a:	f00b ffdd 	bl	800e048 <osSemaphoreRelease>
  return;
 800208e:	bf00      	nop
}
 8002090:	3708      	adds	r7, #8
 8002092:	46bd      	mov	sp, r7
 8002094:	bd80      	pop	{r7, pc}
 8002096:	bf00      	nop
 8002098:	200060e8 	.word	0x200060e8

0800209c <shci_cmd_resp_wait>:

void shci_cmd_resp_wait(uint32_t timeout)
{
 800209c:	b580      	push	{r7, lr}
 800209e:	b082      	sub	sp, #8
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]
  UNUSED(timeout);
  osSemaphoreAcquire( SemShciId, osWaitForever );
 80020a4:	4b05      	ldr	r3, [pc, #20]	; (80020bc <shci_cmd_resp_wait+0x20>)
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f04f 31ff 	mov.w	r1, #4294967295
 80020ac:	4618      	mov	r0, r3
 80020ae:	f00b ff65 	bl	800df7c <osSemaphoreAcquire>
  return;
 80020b2:	bf00      	nop
}
 80020b4:	3708      	adds	r7, #8
 80020b6:	46bd      	mov	sp, r7
 80020b8:	bd80      	pop	{r7, pc}
 80020ba:	bf00      	nop
 80020bc:	200060e8 	.word	0x200060e8

080020c0 <Dotstar_Init>:
} DotStar_State;


DotStar_State dotstar_state;

void Dotstar_Init(DotStar_InitHandle* dotstar_init){
 80020c0:	b580      	push	{r7, lr}
 80020c2:	b084      	sub	sp, #16
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]

   dotstar_state.spiHandle = dotstar_init->spiHandle;
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	4a23      	ldr	r2, [pc, #140]	; (800215c <Dotstar_Init+0x9c>)
 80020ce:	6013      	str	r3, [r2, #0]
   dotstar_state.numLEDs = dotstar_init->numLEDs;
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	889a      	ldrh	r2, [r3, #4]
 80020d4:	4b21      	ldr	r3, [pc, #132]	; (800215c <Dotstar_Init+0x9c>)
 80020d6:	809a      	strh	r2, [r3, #4]
   dotstar_state.brightness = 0;
 80020d8:	4b20      	ldr	r3, [pc, #128]	; (800215c <Dotstar_Init+0x9c>)
 80020da:	2200      	movs	r2, #0
 80020dc:	719a      	strb	r2, [r3, #6]
   dotstar_state.rOffset = dotstar_init->colorOrder & 3;
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	799b      	ldrb	r3, [r3, #6]
 80020e2:	f003 0303 	and.w	r3, r3, #3
 80020e6:	b2da      	uxtb	r2, r3
 80020e8:	4b1c      	ldr	r3, [pc, #112]	; (800215c <Dotstar_Init+0x9c>)
 80020ea:	731a      	strb	r2, [r3, #12]
   dotstar_state.gOffset = (dotstar_init->colorOrder >> 2) & 3;
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	799b      	ldrb	r3, [r3, #6]
 80020f0:	089b      	lsrs	r3, r3, #2
 80020f2:	b2db      	uxtb	r3, r3
 80020f4:	f003 0303 	and.w	r3, r3, #3
 80020f8:	b2da      	uxtb	r2, r3
 80020fa:	4b18      	ldr	r3, [pc, #96]	; (800215c <Dotstar_Init+0x9c>)
 80020fc:	735a      	strb	r2, [r3, #13]
   dotstar_state.bOffset = (dotstar_init->colorOrder >> 4) & 3;
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	799b      	ldrb	r3, [r3, #6]
 8002102:	091b      	lsrs	r3, r3, #4
 8002104:	b2db      	uxtb	r3, r3
 8002106:	f003 0303 	and.w	r3, r3, #3
 800210a:	b2da      	uxtb	r2, r3
 800210c:	4b13      	ldr	r3, [pc, #76]	; (800215c <Dotstar_Init+0x9c>)
 800210e:	739a      	strb	r2, [r3, #14]

   uint16_t bytes = (dotstar_state.rOffset == dotstar_state.gOffset) ?
 8002110:	4b12      	ldr	r3, [pc, #72]	; (800215c <Dotstar_Init+0x9c>)
 8002112:	7b1a      	ldrb	r2, [r3, #12]
 8002114:	4b11      	ldr	r3, [pc, #68]	; (800215c <Dotstar_Init+0x9c>)
 8002116:	7b5b      	ldrb	r3, [r3, #13]
 8002118:	429a      	cmp	r2, r3
 800211a:	d10c      	bne.n	8002136 <Dotstar_Init+0x76>
     dotstar_state.numLEDs + ((dotstar_state.numLEDs + 3) / 4) : // MONO: 10 bits/pixel, round up to next byte
 800211c:	4b0f      	ldr	r3, [pc, #60]	; (800215c <Dotstar_Init+0x9c>)
 800211e:	889a      	ldrh	r2, [r3, #4]
 8002120:	4b0e      	ldr	r3, [pc, #56]	; (800215c <Dotstar_Init+0x9c>)
 8002122:	889b      	ldrh	r3, [r3, #4]
 8002124:	3303      	adds	r3, #3
 8002126:	2b00      	cmp	r3, #0
 8002128:	da00      	bge.n	800212c <Dotstar_Init+0x6c>
 800212a:	3303      	adds	r3, #3
 800212c:	109b      	asrs	r3, r3, #2
 800212e:	b29b      	uxth	r3, r3
   uint16_t bytes = (dotstar_state.rOffset == dotstar_state.gOffset) ?
 8002130:	4413      	add	r3, r2
 8002132:	b29b      	uxth	r3, r3
 8002134:	e005      	b.n	8002142 <Dotstar_Init+0x82>
     dotstar_state.numLEDs * 3;              // COLOR: 3 bytes/pixel
 8002136:	4b09      	ldr	r3, [pc, #36]	; (800215c <Dotstar_Init+0x9c>)
 8002138:	889b      	ldrh	r3, [r3, #4]
   uint16_t bytes = (dotstar_state.rOffset == dotstar_state.gOffset) ?
 800213a:	461a      	mov	r2, r3
 800213c:	0052      	lsls	r2, r2, #1
 800213e:	4413      	add	r3, r2
 8002140:	b29b      	uxth	r3, r3
 8002142:	81fb      	strh	r3, [r7, #14]

   dotstar_state.pixels = (uint8_t *)malloc(bytes);
 8002144:	89fb      	ldrh	r3, [r7, #14]
 8002146:	4618      	mov	r0, r3
 8002148:	f00f fd18 	bl	8011b7c <malloc>
 800214c:	4603      	mov	r3, r0
 800214e:	461a      	mov	r2, r3
 8002150:	4b02      	ldr	r3, [pc, #8]	; (800215c <Dotstar_Init+0x9c>)
 8002152:	609a      	str	r2, [r3, #8]
}
 8002154:	bf00      	nop
 8002156:	3710      	adds	r7, #16
 8002158:	46bd      	mov	sp, r7
 800215a:	bd80      	pop	{r7, pc}
 800215c:	200060ec 	.word	0x200060ec

08002160 <ds_show>:
*/

/*!
  @brief   Transmit pixel data in RAM to DotStars.
*/
void ds_show(void) {
 8002160:	b580      	push	{r7, lr}
 8002162:	b084      	sub	sp, #16
 8002164:	af00      	add	r7, sp, #0

  if(!dotstar_state.pixels) return;
 8002166:	4b4b      	ldr	r3, [pc, #300]	; (8002294 <ds_show+0x134>)
 8002168:	689b      	ldr	r3, [r3, #8]
 800216a:	2b00      	cmp	r3, #0
 800216c:	f000 808e 	beq.w	800228c <ds_show+0x12c>

  uint8_t *ptr = dotstar_state.pixels, i;            // -> LED data
 8002170:	4b48      	ldr	r3, [pc, #288]	; (8002294 <ds_show+0x134>)
 8002172:	689b      	ldr	r3, [r3, #8]
 8002174:	60fb      	str	r3, [r7, #12]
  uint16_t n   = dotstar_state.numLEDs;              // Counter
 8002176:	4b47      	ldr	r3, [pc, #284]	; (8002294 <ds_show+0x134>)
 8002178:	889b      	ldrh	r3, [r3, #4]
 800217a:	813b      	strh	r3, [r7, #8]
  uint16_t b16 = (uint16_t)dotstar_state.brightness; // Type-convert for fixed-point math
 800217c:	4b45      	ldr	r3, [pc, #276]	; (8002294 <ds_show+0x134>)
 800217e:	799b      	ldrb	r3, [r3, #6]
 8002180:	80fb      	strh	r3, [r7, #6]
  uint8_t sendval;

    sendval = 0x00;
 8002182:	2300      	movs	r3, #0
 8002184:	717b      	strb	r3, [r7, #5]
    for(i=0; i<4; i++) spi_out(&sendval);    // 4 byte start-frame marker
 8002186:	2300      	movs	r3, #0
 8002188:	72fb      	strb	r3, [r7, #11]
 800218a:	e00a      	b.n	80021a2 <ds_show+0x42>
 800218c:	4b41      	ldr	r3, [pc, #260]	; (8002294 <ds_show+0x134>)
 800218e:	6818      	ldr	r0, [r3, #0]
 8002190:	1d79      	adds	r1, r7, #5
 8002192:	f04f 33ff 	mov.w	r3, #4294967295
 8002196:	2201      	movs	r2, #1
 8002198:	f007 f92b 	bl	80093f2 <HAL_SPI_Transmit>
 800219c:	7afb      	ldrb	r3, [r7, #11]
 800219e:	3301      	adds	r3, #1
 80021a0:	72fb      	strb	r3, [r7, #11]
 80021a2:	7afb      	ldrb	r3, [r7, #11]
 80021a4:	2b03      	cmp	r3, #3
 80021a6:	d9f1      	bls.n	800218c <ds_show+0x2c>

    if(dotstar_state.brightness) {                     // Scale pixel brightness on output
 80021a8:	4b3a      	ldr	r3, [pc, #232]	; (8002294 <ds_show+0x134>)
 80021aa:	799b      	ldrb	r3, [r3, #6]
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d02c      	beq.n	800220a <ds_show+0xaa>
      do {                               // For each pixel...
    	sendval = 0xFF;
 80021b0:	23ff      	movs	r3, #255	; 0xff
 80021b2:	717b      	strb	r3, [r7, #5]
        spi_out(&sendval);                   //  Pixel start
 80021b4:	4b37      	ldr	r3, [pc, #220]	; (8002294 <ds_show+0x134>)
 80021b6:	6818      	ldr	r0, [r3, #0]
 80021b8:	1d79      	adds	r1, r7, #5
 80021ba:	f04f 33ff 	mov.w	r3, #4294967295
 80021be:	2201      	movs	r2, #1
 80021c0:	f007 f917 	bl	80093f2 <HAL_SPI_Transmit>
        for(i=0; i<3; i++) {
 80021c4:	2300      	movs	r3, #0
 80021c6:	72fb      	strb	r3, [r7, #11]
 80021c8:	e015      	b.n	80021f6 <ds_show+0x96>
        	sendval = (*ptr++ * b16) >> 8;
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	1c5a      	adds	r2, r3, #1
 80021ce:	60fa      	str	r2, [r7, #12]
 80021d0:	781b      	ldrb	r3, [r3, #0]
 80021d2:	461a      	mov	r2, r3
 80021d4:	88fb      	ldrh	r3, [r7, #6]
 80021d6:	fb03 f302 	mul.w	r3, r3, r2
 80021da:	121b      	asrs	r3, r3, #8
 80021dc:	b2db      	uxtb	r3, r3
 80021de:	717b      	strb	r3, [r7, #5]
        	spi_out(&sendval); // Scale, write RGB
 80021e0:	4b2c      	ldr	r3, [pc, #176]	; (8002294 <ds_show+0x134>)
 80021e2:	6818      	ldr	r0, [r3, #0]
 80021e4:	1d79      	adds	r1, r7, #5
 80021e6:	f04f 33ff 	mov.w	r3, #4294967295
 80021ea:	2201      	movs	r2, #1
 80021ec:	f007 f901 	bl	80093f2 <HAL_SPI_Transmit>
        for(i=0; i<3; i++) {
 80021f0:	7afb      	ldrb	r3, [r7, #11]
 80021f2:	3301      	adds	r3, #1
 80021f4:	72fb      	strb	r3, [r7, #11]
 80021f6:	7afb      	ldrb	r3, [r7, #11]
 80021f8:	2b02      	cmp	r3, #2
 80021fa:	d9e6      	bls.n	80021ca <ds_show+0x6a>
        }
      } while(--n);
 80021fc:	893b      	ldrh	r3, [r7, #8]
 80021fe:	3b01      	subs	r3, #1
 8002200:	813b      	strh	r3, [r7, #8]
 8002202:	893b      	ldrh	r3, [r7, #8]
 8002204:	2b00      	cmp	r3, #0
 8002206:	d1d3      	bne.n	80021b0 <ds_show+0x50>
 8002208:	e025      	b.n	8002256 <ds_show+0xf6>
    } else {                             // Full brightness (no scaling)
      do {                               // For each pixel...
    	sendval = 0xFF;
 800220a:	23ff      	movs	r3, #255	; 0xff
 800220c:	717b      	strb	r3, [r7, #5]
        spi_out(&sendval);                   //  Pixel start
 800220e:	4b21      	ldr	r3, [pc, #132]	; (8002294 <ds_show+0x134>)
 8002210:	6818      	ldr	r0, [r3, #0]
 8002212:	1d79      	adds	r1, r7, #5
 8002214:	f04f 33ff 	mov.w	r3, #4294967295
 8002218:	2201      	movs	r2, #1
 800221a:	f007 f8ea 	bl	80093f2 <HAL_SPI_Transmit>
        for(i=0; i<3; i++) {
 800221e:	2300      	movs	r3, #0
 8002220:	72fb      	strb	r3, [r7, #11]
 8002222:	e00f      	b.n	8002244 <ds_show+0xe4>
        	sendval = *ptr++;
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	1c5a      	adds	r2, r3, #1
 8002228:	60fa      	str	r2, [r7, #12]
 800222a:	781b      	ldrb	r3, [r3, #0]
 800222c:	717b      	strb	r3, [r7, #5]
        	spi_out(&sendval); // Write R,G,B
 800222e:	4b19      	ldr	r3, [pc, #100]	; (8002294 <ds_show+0x134>)
 8002230:	6818      	ldr	r0, [r3, #0]
 8002232:	1d79      	adds	r1, r7, #5
 8002234:	f04f 33ff 	mov.w	r3, #4294967295
 8002238:	2201      	movs	r2, #1
 800223a:	f007 f8da 	bl	80093f2 <HAL_SPI_Transmit>
        for(i=0; i<3; i++) {
 800223e:	7afb      	ldrb	r3, [r7, #11]
 8002240:	3301      	adds	r3, #1
 8002242:	72fb      	strb	r3, [r7, #11]
 8002244:	7afb      	ldrb	r3, [r7, #11]
 8002246:	2b02      	cmp	r3, #2
 8002248:	d9ec      	bls.n	8002224 <ds_show+0xc4>
        }
      } while(--n);
 800224a:	893b      	ldrh	r3, [r7, #8]
 800224c:	3b01      	subs	r3, #1
 800224e:	813b      	strh	r3, [r7, #8]
 8002250:	893b      	ldrh	r3, [r7, #8]
 8002252:	2b00      	cmp	r3, #0
 8002254:	d1d9      	bne.n	800220a <ds_show+0xaa>
    // revisions are more strict (e.g. might mandate use of end-frame
    // before start-frame marker). i.e. let's not remove this. But after
    // testing a bit more the suggestion is to use at least (numLeds+1)/2
    // high values (1) or (numLeds+15)/16 full bytes as EndFrame. For details see also:
    // https://cpldcpu.wordpress.com/2014/11/30/understanding-the-apa102-superled/
    sendval = 0xFF;
 8002256:	23ff      	movs	r3, #255	; 0xff
 8002258:	717b      	strb	r3, [r7, #5]
    for(i=0; i<((dotstar_state.numLEDs + 15) / 16); i++) spi_out(&sendval);
 800225a:	2300      	movs	r3, #0
 800225c:	72fb      	strb	r3, [r7, #11]
 800225e:	e00a      	b.n	8002276 <ds_show+0x116>
 8002260:	4b0c      	ldr	r3, [pc, #48]	; (8002294 <ds_show+0x134>)
 8002262:	6818      	ldr	r0, [r3, #0]
 8002264:	1d79      	adds	r1, r7, #5
 8002266:	f04f 33ff 	mov.w	r3, #4294967295
 800226a:	2201      	movs	r2, #1
 800226c:	f007 f8c1 	bl	80093f2 <HAL_SPI_Transmit>
 8002270:	7afb      	ldrb	r3, [r7, #11]
 8002272:	3301      	adds	r3, #1
 8002274:	72fb      	strb	r3, [r7, #11]
 8002276:	7afa      	ldrb	r2, [r7, #11]
 8002278:	4b06      	ldr	r3, [pc, #24]	; (8002294 <ds_show+0x134>)
 800227a:	889b      	ldrh	r3, [r3, #4]
 800227c:	330f      	adds	r3, #15
 800227e:	2b00      	cmp	r3, #0
 8002280:	da00      	bge.n	8002284 <ds_show+0x124>
 8002282:	330f      	adds	r3, #15
 8002284:	111b      	asrs	r3, r3, #4
 8002286:	429a      	cmp	r2, r3
 8002288:	dbea      	blt.n	8002260 <ds_show+0x100>
 800228a:	e000      	b.n	800228e <ds_show+0x12e>
  if(!dotstar_state.pixels) return;
 800228c:	bf00      	nop

}
 800228e:	3710      	adds	r7, #16
 8002290:	46bd      	mov	sp, r7
 8002292:	bd80      	pop	{r7, pc}
 8002294:	200060ec 	.word	0x200060ec

08002298 <ds_clear>:

/*!
  @brief   Fill the whole DotStar strip with 0 / black / off.
*/
void ds_clear() {
 8002298:	b580      	push	{r7, lr}
 800229a:	af00      	add	r7, sp, #0
  memset(dotstar_state.pixels, 0, (dotstar_state.rOffset == dotstar_state.gOffset) ?
 800229c:	4b0f      	ldr	r3, [pc, #60]	; (80022dc <ds_clear+0x44>)
 800229e:	6898      	ldr	r0, [r3, #8]
 80022a0:	4b0e      	ldr	r3, [pc, #56]	; (80022dc <ds_clear+0x44>)
 80022a2:	7b1a      	ldrb	r2, [r3, #12]
 80022a4:	4b0d      	ldr	r3, [pc, #52]	; (80022dc <ds_clear+0x44>)
 80022a6:	7b5b      	ldrb	r3, [r3, #13]
 80022a8:	429a      	cmp	r2, r3
 80022aa:	d10b      	bne.n	80022c4 <ds_clear+0x2c>
    dotstar_state.numLEDs + ((dotstar_state.numLEDs + 3) / 4) : // MONO: 10 bits/pixel
 80022ac:	4b0b      	ldr	r3, [pc, #44]	; (80022dc <ds_clear+0x44>)
 80022ae:	889b      	ldrh	r3, [r3, #4]
 80022b0:	461a      	mov	r2, r3
 80022b2:	4b0a      	ldr	r3, [pc, #40]	; (80022dc <ds_clear+0x44>)
 80022b4:	889b      	ldrh	r3, [r3, #4]
 80022b6:	3303      	adds	r3, #3
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	da00      	bge.n	80022be <ds_clear+0x26>
 80022bc:	3303      	adds	r3, #3
 80022be:	109b      	asrs	r3, r3, #2
 80022c0:	4413      	add	r3, r2
 80022c2:	e005      	b.n	80022d0 <ds_clear+0x38>
    dotstar_state.numLEDs * 3);                   // COLOR: 3 bytes/pixel
 80022c4:	4b05      	ldr	r3, [pc, #20]	; (80022dc <ds_clear+0x44>)
 80022c6:	889b      	ldrh	r3, [r3, #4]
 80022c8:	461a      	mov	r2, r3
 80022ca:	4613      	mov	r3, r2
 80022cc:	005b      	lsls	r3, r3, #1
 80022ce:	4413      	add	r3, r2
  memset(dotstar_state.pixels, 0, (dotstar_state.rOffset == dotstar_state.gOffset) ?
 80022d0:	461a      	mov	r2, r3
 80022d2:	2100      	movs	r1, #0
 80022d4:	f00f fc65 	bl	8011ba2 <memset>
}
 80022d8:	bf00      	nop
 80022da:	bd80      	pop	{r7, pc}
 80022dc:	200060ec 	.word	0x200060ec

080022e0 <ds_setPixelColor32B>:
  @param   n  Pixel index, starting from 0.
  @param   c  32-bit color value. Most significant byte is 0, second is
              red, then green, and least significant byte is blue.
              e.g. 0x00RRGGBB
*/
void ds_setPixelColor32B(uint16_t n, uint32_t c) {
 80022e0:	b480      	push	{r7}
 80022e2:	b085      	sub	sp, #20
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	4603      	mov	r3, r0
 80022e8:	6039      	str	r1, [r7, #0]
 80022ea:	80fb      	strh	r3, [r7, #6]
  if(n < dotstar_state.numLEDs) {
 80022ec:	4b16      	ldr	r3, [pc, #88]	; (8002348 <ds_setPixelColor32B+0x68>)
 80022ee:	889b      	ldrh	r3, [r3, #4]
 80022f0:	88fa      	ldrh	r2, [r7, #6]
 80022f2:	429a      	cmp	r2, r3
 80022f4:	d221      	bcs.n	800233a <ds_setPixelColor32B+0x5a>
    uint8_t *p = &dotstar_state.pixels[n * 3];
 80022f6:	4b14      	ldr	r3, [pc, #80]	; (8002348 <ds_setPixelColor32B+0x68>)
 80022f8:	6899      	ldr	r1, [r3, #8]
 80022fa:	88fa      	ldrh	r2, [r7, #6]
 80022fc:	4613      	mov	r3, r2
 80022fe:	005b      	lsls	r3, r3, #1
 8002300:	4413      	add	r3, r2
 8002302:	440b      	add	r3, r1
 8002304:	60fb      	str	r3, [r7, #12]
    p[dotstar_state.rOffset] = (uint8_t)(c >> 16);
 8002306:	683b      	ldr	r3, [r7, #0]
 8002308:	0c1a      	lsrs	r2, r3, #16
 800230a:	4b0f      	ldr	r3, [pc, #60]	; (8002348 <ds_setPixelColor32B+0x68>)
 800230c:	7b1b      	ldrb	r3, [r3, #12]
 800230e:	4619      	mov	r1, r3
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	440b      	add	r3, r1
 8002314:	b2d2      	uxtb	r2, r2
 8002316:	701a      	strb	r2, [r3, #0]
    p[dotstar_state.gOffset] = (uint8_t)(c >>  8);
 8002318:	683b      	ldr	r3, [r7, #0]
 800231a:	0a1a      	lsrs	r2, r3, #8
 800231c:	4b0a      	ldr	r3, [pc, #40]	; (8002348 <ds_setPixelColor32B+0x68>)
 800231e:	7b5b      	ldrb	r3, [r3, #13]
 8002320:	4619      	mov	r1, r3
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	440b      	add	r3, r1
 8002326:	b2d2      	uxtb	r2, r2
 8002328:	701a      	strb	r2, [r3, #0]
    p[dotstar_state.bOffset] = (uint8_t)c;
 800232a:	4b07      	ldr	r3, [pc, #28]	; (8002348 <ds_setPixelColor32B+0x68>)
 800232c:	7b9b      	ldrb	r3, [r3, #14]
 800232e:	461a      	mov	r2, r3
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	4413      	add	r3, r2
 8002334:	683a      	ldr	r2, [r7, #0]
 8002336:	b2d2      	uxtb	r2, r2
 8002338:	701a      	strb	r2, [r3, #0]
  }
}
 800233a:	bf00      	nop
 800233c:	3714      	adds	r7, #20
 800233e:	46bd      	mov	sp, r7
 8002340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002344:	4770      	bx	lr
 8002346:	bf00      	nop
 8002348:	200060ec 	.word	0x200060ec

0800234c <ds_fill>:
  @param   first  Index of first pixel to fill, starting from 0. Must be
                  in-bounds, no clipping is performed. 0 if unspecified.
  @param   count  Number of pixels to fill, as a positive value. Passing
                  0 or leaving unspecified will fill to end of strip.
*/
void ds_fill(uint32_t c, uint16_t first, uint16_t count) {
 800234c:	b580      	push	{r7, lr}
 800234e:	b084      	sub	sp, #16
 8002350:	af00      	add	r7, sp, #0
 8002352:	6078      	str	r0, [r7, #4]
 8002354:	460b      	mov	r3, r1
 8002356:	807b      	strh	r3, [r7, #2]
 8002358:	4613      	mov	r3, r2
 800235a:	803b      	strh	r3, [r7, #0]
  uint16_t i, end;

  if(first >= dotstar_state.numLEDs) {
 800235c:	4b15      	ldr	r3, [pc, #84]	; (80023b4 <ds_fill+0x68>)
 800235e:	889b      	ldrh	r3, [r3, #4]
 8002360:	887a      	ldrh	r2, [r7, #2]
 8002362:	429a      	cmp	r2, r3
 8002364:	d222      	bcs.n	80023ac <ds_fill+0x60>
    return; // If first LED is past end of strip, nothing to do
  }

  // Calculate the index ONE AFTER the last pixel to fill
  if(count == 0) {
 8002366:	883b      	ldrh	r3, [r7, #0]
 8002368:	2b00      	cmp	r3, #0
 800236a:	d103      	bne.n	8002374 <ds_fill+0x28>
    // Fill to end of strip
    end = dotstar_state.numLEDs;
 800236c:	4b11      	ldr	r3, [pc, #68]	; (80023b4 <ds_fill+0x68>)
 800236e:	889b      	ldrh	r3, [r3, #4]
 8002370:	81bb      	strh	r3, [r7, #12]
 8002372:	e00b      	b.n	800238c <ds_fill+0x40>
  } else {
    // Ensure that the loop won't go past the last pixel
    end = first + count;
 8002374:	887a      	ldrh	r2, [r7, #2]
 8002376:	883b      	ldrh	r3, [r7, #0]
 8002378:	4413      	add	r3, r2
 800237a:	81bb      	strh	r3, [r7, #12]
    if(end > dotstar_state.numLEDs) end = dotstar_state.numLEDs;
 800237c:	4b0d      	ldr	r3, [pc, #52]	; (80023b4 <ds_fill+0x68>)
 800237e:	889b      	ldrh	r3, [r3, #4]
 8002380:	89ba      	ldrh	r2, [r7, #12]
 8002382:	429a      	cmp	r2, r3
 8002384:	d902      	bls.n	800238c <ds_fill+0x40>
 8002386:	4b0b      	ldr	r3, [pc, #44]	; (80023b4 <ds_fill+0x68>)
 8002388:	889b      	ldrh	r3, [r3, #4]
 800238a:	81bb      	strh	r3, [r7, #12]
  }

  for(i = first; i < end; i++) {
 800238c:	887b      	ldrh	r3, [r7, #2]
 800238e:	81fb      	strh	r3, [r7, #14]
 8002390:	e007      	b.n	80023a2 <ds_fill+0x56>
    ds_setPixelColor32B(i, c);
 8002392:	89fb      	ldrh	r3, [r7, #14]
 8002394:	6879      	ldr	r1, [r7, #4]
 8002396:	4618      	mov	r0, r3
 8002398:	f7ff ffa2 	bl	80022e0 <ds_setPixelColor32B>
  for(i = first; i < end; i++) {
 800239c:	89fb      	ldrh	r3, [r7, #14]
 800239e:	3301      	adds	r3, #1
 80023a0:	81fb      	strh	r3, [r7, #14]
 80023a2:	89fa      	ldrh	r2, [r7, #14]
 80023a4:	89bb      	ldrh	r3, [r7, #12]
 80023a6:	429a      	cmp	r2, r3
 80023a8:	d3f3      	bcc.n	8002392 <ds_fill+0x46>
 80023aa:	e000      	b.n	80023ae <ds_fill+0x62>
    return; // If first LED is past end of strip, nothing to do
 80023ac:	bf00      	nop
  }
}
 80023ae:	3710      	adds	r7, #16
 80023b0:	46bd      	mov	sp, r7
 80023b2:	bd80      	pop	{r7, pc}
 80023b4:	200060ec 	.word	0x200060ec

080023b8 <ds_setBrightness>:
           is 'non destructive' -- it's applied as color data is being
           issued to the strip, not during setPixelColor(), and also
           means that getPixelColor() returns the exact value originally
           stored.
*/
void ds_setBrightness(uint8_t b) {
 80023b8:	b480      	push	{r7}
 80023ba:	b083      	sub	sp, #12
 80023bc:	af00      	add	r7, sp, #0
 80023be:	4603      	mov	r3, r0
 80023c0:	71fb      	strb	r3, [r7, #7]
  // optimizes the actual scaling math later, allowing a fast 8x8-bit
  // multiply and taking the MSB. 'brightness' is a uint8_t, adding 1
  // here may (intentionally) roll over...so 0 = max brightness (color
  // values are interpreted literally; no scaling), 1 = min brightness
  // (off), 255 = just below max brightness.
  dotstar_state.brightness = b + 1;
 80023c2:	79fb      	ldrb	r3, [r7, #7]
 80023c4:	3301      	adds	r3, #1
 80023c6:	b2da      	uxtb	r2, r3
 80023c8:	4b03      	ldr	r3, [pc, #12]	; (80023d8 <ds_setBrightness+0x20>)
 80023ca:	719a      	strb	r2, [r3, #6]
}
 80023cc:	bf00      	nop
 80023ce:	370c      	adds	r7, #12
 80023d0:	46bd      	mov	sp, r7
 80023d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d6:	4770      	bx	lr
 80023d8:	200060ec 	.word	0x200060ec

080023dc <I2C_Write_Byte>:
//#include "stm32wbxx_hal_i2c.h"
//#include "stm32wbxx_hal.h"


void I2C_Write_Byte(uint8_t value, uint8_t Cmd)
{
 80023dc:	b580      	push	{r7, lr}
 80023de:	b086      	sub	sp, #24
 80023e0:	af02      	add	r7, sp, #8
 80023e2:	4603      	mov	r3, r0
 80023e4:	460a      	mov	r2, r1
 80023e6:	71fb      	strb	r3, [r7, #7]
 80023e8:	4613      	mov	r3, r2
 80023ea:	71bb      	strb	r3, [r7, #6]
  uint16_t Addr = 0x3C << 1;
 80023ec:	2378      	movs	r3, #120	; 0x78
 80023ee:	81fb      	strh	r3, [r7, #14]
  uint8_t Data[2];
  Data[0] = Cmd;
 80023f0:	79bb      	ldrb	r3, [r7, #6]
 80023f2:	733b      	strb	r3, [r7, #12]
  Data[1] = value;
 80023f4:	79fb      	ldrb	r3, [r7, #7]
 80023f6:	737b      	strb	r3, [r7, #13]

  HAL_I2C_Master_Transmit(&ER_OLED_I2C_PORT, Addr, Data, 2, HAL_MAX_DELAY);
 80023f8:	f107 020c 	add.w	r2, r7, #12
 80023fc:	89f9      	ldrh	r1, [r7, #14]
 80023fe:	f04f 33ff 	mov.w	r3, #4294967295
 8002402:	9300      	str	r3, [sp, #0]
 8002404:	2302      	movs	r3, #2
 8002406:	4803      	ldr	r0, [pc, #12]	; (8002414 <I2C_Write_Byte+0x38>)
 8002408:	f003 fff2 	bl	80063f0 <HAL_I2C_Master_Transmit>
}
 800240c:	bf00      	nop
 800240e:	3710      	adds	r7, #16
 8002410:	46bd      	mov	sp, r7
 8002412:	bd80      	pop	{r7, pc}
 8002414:	20006108 	.word	0x20006108

08002418 <er_oled_begin>:

void er_oled_begin()
{
 8002418:	b580      	push	{r7, lr}
 800241a:	af00      	add	r7, sp, #0
    command(0xae);//--turn off oled panel
 800241c:	2100      	movs	r1, #0
 800241e:	20ae      	movs	r0, #174	; 0xae
 8002420:	f7ff ffdc 	bl	80023dc <I2C_Write_Byte>

    command(0xd5);//--set display clock divide ratio/oscillator frequency
 8002424:	2100      	movs	r1, #0
 8002426:	20d5      	movs	r0, #213	; 0xd5
 8002428:	f7ff ffd8 	bl	80023dc <I2C_Write_Byte>
    command(0x80);//--set divide ratio
 800242c:	2100      	movs	r1, #0
 800242e:	2080      	movs	r0, #128	; 0x80
 8002430:	f7ff ffd4 	bl	80023dc <I2C_Write_Byte>

    command(0xa8);//--set multiplex ratio
 8002434:	2100      	movs	r1, #0
 8002436:	20a8      	movs	r0, #168	; 0xa8
 8002438:	f7ff ffd0 	bl	80023dc <I2C_Write_Byte>
    command(0x27);//--1/40 duty
 800243c:	2100      	movs	r1, #0
 800243e:	2027      	movs	r0, #39	; 0x27
 8002440:	f7ff ffcc 	bl	80023dc <I2C_Write_Byte>

    command(0xd3);//-set display offset
 8002444:	2100      	movs	r1, #0
 8002446:	20d3      	movs	r0, #211	; 0xd3
 8002448:	f7ff ffc8 	bl	80023dc <I2C_Write_Byte>
    command(0x00);//-not offset
 800244c:	2100      	movs	r1, #0
 800244e:	2000      	movs	r0, #0
 8002450:	f7ff ffc4 	bl	80023dc <I2C_Write_Byte>

    command(0xad);//--Internal IREF Setting
 8002454:	2100      	movs	r1, #0
 8002456:	20ad      	movs	r0, #173	; 0xad
 8002458:	f7ff ffc0 	bl	80023dc <I2C_Write_Byte>
    command(0x30);//--
 800245c:	2100      	movs	r1, #0
 800245e:	2030      	movs	r0, #48	; 0x30
 8002460:	f7ff ffbc 	bl	80023dc <I2C_Write_Byte>

    command(0x8d);//--set Charge Pump enable/disable
 8002464:	2100      	movs	r1, #0
 8002466:	208d      	movs	r0, #141	; 0x8d
 8002468:	f7ff ffb8 	bl	80023dc <I2C_Write_Byte>
    command(0x14);//--set(0x10) disable
 800246c:	2100      	movs	r1, #0
 800246e:	2014      	movs	r0, #20
 8002470:	f7ff ffb4 	bl	80023dc <I2C_Write_Byte>

    command(0x40);//--set start line address
 8002474:	2100      	movs	r1, #0
 8002476:	2040      	movs	r0, #64	; 0x40
 8002478:	f7ff ffb0 	bl	80023dc <I2C_Write_Byte>

    command(0xa6);//--set normal display
 800247c:	2100      	movs	r1, #0
 800247e:	20a6      	movs	r0, #166	; 0xa6
 8002480:	f7ff ffac 	bl	80023dc <I2C_Write_Byte>

    command(0xa4);//Disable Entire Display On
 8002484:	2100      	movs	r1, #0
 8002486:	20a4      	movs	r0, #164	; 0xa4
 8002488:	f7ff ffa8 	bl	80023dc <I2C_Write_Byte>

    command(0xa1);//--set segment re-map 128 to 0
 800248c:	2100      	movs	r1, #0
 800248e:	20a1      	movs	r0, #161	; 0xa1
 8002490:	f7ff ffa4 	bl	80023dc <I2C_Write_Byte>

    command(0xC8);//--Set COM Output Scan Direction 64 to 0
 8002494:	2100      	movs	r1, #0
 8002496:	20c8      	movs	r0, #200	; 0xc8
 8002498:	f7ff ffa0 	bl	80023dc <I2C_Write_Byte>

    command(0xda);//--set com pins hardware configuration
 800249c:	2100      	movs	r1, #0
 800249e:	20da      	movs	r0, #218	; 0xda
 80024a0:	f7ff ff9c 	bl	80023dc <I2C_Write_Byte>
    command(0x12);
 80024a4:	2100      	movs	r1, #0
 80024a6:	2012      	movs	r0, #18
 80024a8:	f7ff ff98 	bl	80023dc <I2C_Write_Byte>

    command(0x81);//--set contrast control register
 80024ac:	2100      	movs	r1, #0
 80024ae:	2081      	movs	r0, #129	; 0x81
 80024b0:	f7ff ff94 	bl	80023dc <I2C_Write_Byte>
    command(0xaf);
 80024b4:	2100      	movs	r1, #0
 80024b6:	20af      	movs	r0, #175	; 0xaf
 80024b8:	f7ff ff90 	bl	80023dc <I2C_Write_Byte>

    command(0xd9);//--set pre-charge period
 80024bc:	2100      	movs	r1, #0
 80024be:	20d9      	movs	r0, #217	; 0xd9
 80024c0:	f7ff ff8c 	bl	80023dc <I2C_Write_Byte>
    command(0x22);
 80024c4:	2100      	movs	r1, #0
 80024c6:	2022      	movs	r0, #34	; 0x22
 80024c8:	f7ff ff88 	bl	80023dc <I2C_Write_Byte>

    command(0xdb);//--set vcomh
 80024cc:	2100      	movs	r1, #0
 80024ce:	20db      	movs	r0, #219	; 0xdb
 80024d0:	f7ff ff84 	bl	80023dc <I2C_Write_Byte>
    command(0x20);
 80024d4:	2100      	movs	r1, #0
 80024d6:	2020      	movs	r0, #32
 80024d8:	f7ff ff80 	bl	80023dc <I2C_Write_Byte>

    command(0xaf);//--turn on oled panel
 80024dc:	2100      	movs	r1, #0
 80024de:	20af      	movs	r0, #175	; 0xaf
 80024e0:	f7ff ff7c 	bl	80023dc <I2C_Write_Byte>

}
 80024e4:	bf00      	nop
 80024e6:	bd80      	pop	{r7, pc}

080024e8 <er_oled_clear>:

void er_oled_clear(uint8_t* buffer)
{
 80024e8:	b480      	push	{r7}
 80024ea:	b085      	sub	sp, #20
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	6078      	str	r0, [r7, #4]
	int i;
	for(i = 0;i < WIDTH * HEIGHT / 8;i++)
 80024f0:	2300      	movs	r3, #0
 80024f2:	60fb      	str	r3, [r7, #12]
 80024f4:	e007      	b.n	8002506 <er_oled_clear+0x1e>
	{
		buffer[i] = 0;
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	687a      	ldr	r2, [r7, #4]
 80024fa:	4413      	add	r3, r2
 80024fc:	2200      	movs	r2, #0
 80024fe:	701a      	strb	r2, [r3, #0]
	for(i = 0;i < WIDTH * HEIGHT / 8;i++)
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	3301      	adds	r3, #1
 8002504:	60fb      	str	r3, [r7, #12]
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	f5b3 7fb4 	cmp.w	r3, #360	; 0x168
 800250c:	dbf3      	blt.n	80024f6 <er_oled_clear+0xe>
	}
}
 800250e:	bf00      	nop
 8002510:	3714      	adds	r7, #20
 8002512:	46bd      	mov	sp, r7
 8002514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002518:	4770      	bx	lr

0800251a <er_oled_pixel>:

void er_oled_pixel(int x, int y, char color, uint8_t* buffer)
{
 800251a:	b480      	push	{r7}
 800251c:	b085      	sub	sp, #20
 800251e:	af00      	add	r7, sp, #0
 8002520:	60f8      	str	r0, [r7, #12]
 8002522:	60b9      	str	r1, [r7, #8]
 8002524:	603b      	str	r3, [r7, #0]
 8002526:	4613      	mov	r3, r2
 8002528:	71fb      	strb	r3, [r7, #7]
    if(x > WIDTH || y > HEIGHT)return ;
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	2b48      	cmp	r3, #72	; 0x48
 800252e:	dc61      	bgt.n	80025f4 <er_oled_pixel+0xda>
 8002530:	68bb      	ldr	r3, [r7, #8]
 8002532:	2b28      	cmp	r3, #40	; 0x28
 8002534:	dc5e      	bgt.n	80025f4 <er_oled_pixel+0xda>
    if(color)
 8002536:	79fb      	ldrb	r3, [r7, #7]
 8002538:	2b00      	cmp	r3, #0
 800253a:	d02c      	beq.n	8002596 <er_oled_pixel+0x7c>
        buffer[x+(y/8)*WIDTH] |= 1<<(y%8);
 800253c:	68bb      	ldr	r3, [r7, #8]
 800253e:	2b00      	cmp	r3, #0
 8002540:	da00      	bge.n	8002544 <er_oled_pixel+0x2a>
 8002542:	3307      	adds	r3, #7
 8002544:	10db      	asrs	r3, r3, #3
 8002546:	461a      	mov	r2, r3
 8002548:	4613      	mov	r3, r2
 800254a:	00db      	lsls	r3, r3, #3
 800254c:	4413      	add	r3, r2
 800254e:	00db      	lsls	r3, r3, #3
 8002550:	4619      	mov	r1, r3
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	440b      	add	r3, r1
 8002556:	4619      	mov	r1, r3
 8002558:	683b      	ldr	r3, [r7, #0]
 800255a:	440b      	add	r3, r1
 800255c:	781b      	ldrb	r3, [r3, #0]
 800255e:	b259      	sxtb	r1, r3
 8002560:	68bb      	ldr	r3, [r7, #8]
 8002562:	4258      	negs	r0, r3
 8002564:	f003 0307 	and.w	r3, r3, #7
 8002568:	f000 0007 	and.w	r0, r0, #7
 800256c:	bf58      	it	pl
 800256e:	4243      	negpl	r3, r0
 8002570:	2001      	movs	r0, #1
 8002572:	fa00 f303 	lsl.w	r3, r0, r3
 8002576:	b25b      	sxtb	r3, r3
 8002578:	430b      	orrs	r3, r1
 800257a:	b259      	sxtb	r1, r3
 800257c:	4613      	mov	r3, r2
 800257e:	00db      	lsls	r3, r3, #3
 8002580:	4413      	add	r3, r2
 8002582:	00db      	lsls	r3, r3, #3
 8002584:	461a      	mov	r2, r3
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	4413      	add	r3, r2
 800258a:	461a      	mov	r2, r3
 800258c:	683b      	ldr	r3, [r7, #0]
 800258e:	4413      	add	r3, r2
 8002590:	b2ca      	uxtb	r2, r1
 8002592:	701a      	strb	r2, [r3, #0]
 8002594:	e02f      	b.n	80025f6 <er_oled_pixel+0xdc>
    else
        buffer[x+(y/8)*WIDTH] &= ~(1<<(y%8));
 8002596:	68bb      	ldr	r3, [r7, #8]
 8002598:	2b00      	cmp	r3, #0
 800259a:	da00      	bge.n	800259e <er_oled_pixel+0x84>
 800259c:	3307      	adds	r3, #7
 800259e:	10db      	asrs	r3, r3, #3
 80025a0:	461a      	mov	r2, r3
 80025a2:	4613      	mov	r3, r2
 80025a4:	00db      	lsls	r3, r3, #3
 80025a6:	4413      	add	r3, r2
 80025a8:	00db      	lsls	r3, r3, #3
 80025aa:	4619      	mov	r1, r3
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	440b      	add	r3, r1
 80025b0:	4619      	mov	r1, r3
 80025b2:	683b      	ldr	r3, [r7, #0]
 80025b4:	440b      	add	r3, r1
 80025b6:	781b      	ldrb	r3, [r3, #0]
 80025b8:	b259      	sxtb	r1, r3
 80025ba:	68bb      	ldr	r3, [r7, #8]
 80025bc:	4258      	negs	r0, r3
 80025be:	f003 0307 	and.w	r3, r3, #7
 80025c2:	f000 0007 	and.w	r0, r0, #7
 80025c6:	bf58      	it	pl
 80025c8:	4243      	negpl	r3, r0
 80025ca:	2001      	movs	r0, #1
 80025cc:	fa00 f303 	lsl.w	r3, r0, r3
 80025d0:	b25b      	sxtb	r3, r3
 80025d2:	43db      	mvns	r3, r3
 80025d4:	b25b      	sxtb	r3, r3
 80025d6:	400b      	ands	r3, r1
 80025d8:	b259      	sxtb	r1, r3
 80025da:	4613      	mov	r3, r2
 80025dc:	00db      	lsls	r3, r3, #3
 80025de:	4413      	add	r3, r2
 80025e0:	00db      	lsls	r3, r3, #3
 80025e2:	461a      	mov	r2, r3
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	4413      	add	r3, r2
 80025e8:	461a      	mov	r2, r3
 80025ea:	683b      	ldr	r3, [r7, #0]
 80025ec:	4413      	add	r3, r2
 80025ee:	b2ca      	uxtb	r2, r1
 80025f0:	701a      	strb	r2, [r3, #0]
 80025f2:	e000      	b.n	80025f6 <er_oled_pixel+0xdc>
    if(x > WIDTH || y > HEIGHT)return ;
 80025f4:	bf00      	nop
}
 80025f6:	3714      	adds	r7, #20
 80025f8:	46bd      	mov	sp, r7
 80025fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025fe:	4770      	bx	lr

08002600 <er_oled_char>:
		}
	}
}

void er_oled_char(unsigned char x, unsigned char y, char acsii, char size, char mode, uint8_t* buffer)
{
 8002600:	b590      	push	{r4, r7, lr}
 8002602:	b087      	sub	sp, #28
 8002604:	af00      	add	r7, sp, #0
 8002606:	4604      	mov	r4, r0
 8002608:	4608      	mov	r0, r1
 800260a:	4611      	mov	r1, r2
 800260c:	461a      	mov	r2, r3
 800260e:	4623      	mov	r3, r4
 8002610:	71fb      	strb	r3, [r7, #7]
 8002612:	4603      	mov	r3, r0
 8002614:	71bb      	strb	r3, [r7, #6]
 8002616:	460b      	mov	r3, r1
 8002618:	717b      	strb	r3, [r7, #5]
 800261a:	4613      	mov	r3, r2
 800261c:	713b      	strb	r3, [r7, #4]
    unsigned char i, j, y0=y;
 800261e:	79bb      	ldrb	r3, [r7, #6]
 8002620:	743b      	strb	r3, [r7, #16]
    uint16_t temp;
    uint16_t position = 0x80;
 8002622:	2380      	movs	r3, #128	; 0x80
 8002624:	827b      	strh	r3, [r7, #18]
    uint8_t maxindex = 8;
 8002626:	2308      	movs	r3, #8
 8002628:	747b      	strb	r3, [r7, #17]
    unsigned char ch = acsii - ' ';
 800262a:	797b      	ldrb	r3, [r7, #5]
 800262c:	3b20      	subs	r3, #32
 800262e:	73fb      	strb	r3, [r7, #15]

    if (size == 32){
 8002630:	793b      	ldrb	r3, [r7, #4]
 8002632:	2b20      	cmp	r3, #32
 8002634:	d104      	bne.n	8002640 <er_oled_char+0x40>
    	position = 0x8000;
 8002636:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800263a:	827b      	strh	r3, [r7, #18]
    	maxindex =16;
 800263c:	2310      	movs	r3, #16
 800263e:	747b      	strb	r3, [r7, #17]
    }

    for(i = 0;i<size;i++) {
 8002640:	2300      	movs	r3, #0
 8002642:	75fb      	strb	r3, [r7, #23]
 8002644:	e0b1      	b.n	80027aa <er_oled_char+0x1aa>
        if(size == 12)
 8002646:	793b      	ldrb	r3, [r7, #4]
 8002648:	2b0c      	cmp	r3, #12
 800264a:	d11d      	bne.n	8002688 <er_oled_char+0x88>
        {
            if(mode)temp = Font1206[ch][i];
 800264c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8002650:	2b00      	cmp	r3, #0
 8002652:	d00b      	beq.n	800266c <er_oled_char+0x6c>
 8002654:	7bfa      	ldrb	r2, [r7, #15]
 8002656:	7df9      	ldrb	r1, [r7, #23]
 8002658:	4858      	ldr	r0, [pc, #352]	; (80027bc <er_oled_char+0x1bc>)
 800265a:	4613      	mov	r3, r2
 800265c:	005b      	lsls	r3, r3, #1
 800265e:	4413      	add	r3, r2
 8002660:	009b      	lsls	r3, r3, #2
 8002662:	4403      	add	r3, r0
 8002664:	440b      	add	r3, r1
 8002666:	781b      	ldrb	r3, [r3, #0]
 8002668:	82bb      	strh	r3, [r7, #20]
 800266a:	e06c      	b.n	8002746 <er_oled_char+0x146>
            else temp = ~Font1206[ch][i];
 800266c:	7bfa      	ldrb	r2, [r7, #15]
 800266e:	7df9      	ldrb	r1, [r7, #23]
 8002670:	4852      	ldr	r0, [pc, #328]	; (80027bc <er_oled_char+0x1bc>)
 8002672:	4613      	mov	r3, r2
 8002674:	005b      	lsls	r3, r3, #1
 8002676:	4413      	add	r3, r2
 8002678:	009b      	lsls	r3, r3, #2
 800267a:	4403      	add	r3, r0
 800267c:	440b      	add	r3, r1
 800267e:	781b      	ldrb	r3, [r3, #0]
 8002680:	b29b      	uxth	r3, r3
 8002682:	43db      	mvns	r3, r3
 8002684:	82bb      	strh	r3, [r7, #20]
 8002686:	e05e      	b.n	8002746 <er_oled_char+0x146>
        }
        else if(size == 16)
 8002688:	793b      	ldrb	r3, [r7, #4]
 800268a:	2b10      	cmp	r3, #16
 800268c:	d117      	bne.n	80026be <er_oled_char+0xbe>
        {
            if(mode)temp = Font1608[ch][i];
 800268e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8002692:	2b00      	cmp	r3, #0
 8002694:	d008      	beq.n	80026a8 <er_oled_char+0xa8>
 8002696:	7bfa      	ldrb	r2, [r7, #15]
 8002698:	7dfb      	ldrb	r3, [r7, #23]
 800269a:	4949      	ldr	r1, [pc, #292]	; (80027c0 <er_oled_char+0x1c0>)
 800269c:	0112      	lsls	r2, r2, #4
 800269e:	440a      	add	r2, r1
 80026a0:	4413      	add	r3, r2
 80026a2:	781b      	ldrb	r3, [r3, #0]
 80026a4:	82bb      	strh	r3, [r7, #20]
 80026a6:	e04e      	b.n	8002746 <er_oled_char+0x146>
            else temp = ~Font1608[ch][i];
 80026a8:	7bfa      	ldrb	r2, [r7, #15]
 80026aa:	7dfb      	ldrb	r3, [r7, #23]
 80026ac:	4944      	ldr	r1, [pc, #272]	; (80027c0 <er_oled_char+0x1c0>)
 80026ae:	0112      	lsls	r2, r2, #4
 80026b0:	440a      	add	r2, r1
 80026b2:	4413      	add	r3, r2
 80026b4:	781b      	ldrb	r3, [r3, #0]
 80026b6:	b29b      	uxth	r3, r3
 80026b8:	43db      	mvns	r3, r3
 80026ba:	82bb      	strh	r3, [r7, #20]
 80026bc:	e043      	b.n	8002746 <er_oled_char+0x146>
        }
        else {
            if(mode) {
 80026be:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d01c      	beq.n	8002700 <er_oled_char+0x100>
            	temp = Font3216[ch - 16][2*i] << 8;
 80026c6:	7bfb      	ldrb	r3, [r7, #15]
 80026c8:	f1a3 0210 	sub.w	r2, r3, #16
 80026cc:	7dfb      	ldrb	r3, [r7, #23]
 80026ce:	005b      	lsls	r3, r3, #1
 80026d0:	493c      	ldr	r1, [pc, #240]	; (80027c4 <er_oled_char+0x1c4>)
 80026d2:	0192      	lsls	r2, r2, #6
 80026d4:	440a      	add	r2, r1
 80026d6:	4413      	add	r3, r2
 80026d8:	781b      	ldrb	r3, [r3, #0]
 80026da:	b29b      	uxth	r3, r3
 80026dc:	021b      	lsls	r3, r3, #8
 80026de:	82bb      	strh	r3, [r7, #20]
                temp |= Font3216[ch-16][2*i + 1];
 80026e0:	7bfb      	ldrb	r3, [r7, #15]
 80026e2:	f1a3 0210 	sub.w	r2, r3, #16
 80026e6:	7dfb      	ldrb	r3, [r7, #23]
 80026e8:	005b      	lsls	r3, r3, #1
 80026ea:	3301      	adds	r3, #1
 80026ec:	4935      	ldr	r1, [pc, #212]	; (80027c4 <er_oled_char+0x1c4>)
 80026ee:	0192      	lsls	r2, r2, #6
 80026f0:	440a      	add	r2, r1
 80026f2:	4413      	add	r3, r2
 80026f4:	781b      	ldrb	r3, [r3, #0]
 80026f6:	b29a      	uxth	r2, r3
 80026f8:	8abb      	ldrh	r3, [r7, #20]
 80026fa:	4313      	orrs	r3, r2
 80026fc:	82bb      	strh	r3, [r7, #20]
 80026fe:	e022      	b.n	8002746 <er_oled_char+0x146>
            }
            else {
            	temp = ~Font3216[ch - 16][2*i] << 8;
 8002700:	7bfb      	ldrb	r3, [r7, #15]
 8002702:	f1a3 0210 	sub.w	r2, r3, #16
 8002706:	7dfb      	ldrb	r3, [r7, #23]
 8002708:	005b      	lsls	r3, r3, #1
 800270a:	492e      	ldr	r1, [pc, #184]	; (80027c4 <er_oled_char+0x1c4>)
 800270c:	0192      	lsls	r2, r2, #6
 800270e:	440a      	add	r2, r1
 8002710:	4413      	add	r3, r2
 8002712:	781b      	ldrb	r3, [r3, #0]
 8002714:	b29b      	uxth	r3, r3
 8002716:	43db      	mvns	r3, r3
 8002718:	b29b      	uxth	r3, r3
 800271a:	021b      	lsls	r3, r3, #8
 800271c:	82bb      	strh	r3, [r7, #20]
            	temp |= ~Font3216[ch - 16][2*i + 1];
 800271e:	7bfb      	ldrb	r3, [r7, #15]
 8002720:	f1a3 0210 	sub.w	r2, r3, #16
 8002724:	7dfb      	ldrb	r3, [r7, #23]
 8002726:	005b      	lsls	r3, r3, #1
 8002728:	3301      	adds	r3, #1
 800272a:	4926      	ldr	r1, [pc, #152]	; (80027c4 <er_oled_char+0x1c4>)
 800272c:	0192      	lsls	r2, r2, #6
 800272e:	440a      	add	r2, r1
 8002730:	4413      	add	r3, r2
 8002732:	781b      	ldrb	r3, [r3, #0]
 8002734:	b29b      	uxth	r3, r3
 8002736:	43db      	mvns	r3, r3
 8002738:	b29b      	uxth	r3, r3
 800273a:	b21a      	sxth	r2, r3
 800273c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8002740:	4313      	orrs	r3, r2
 8002742:	b21b      	sxth	r3, r3
 8002744:	82bb      	strh	r3, [r7, #20]
            }
        }
        for(j =0;j<maxindex;j++)
 8002746:	2300      	movs	r3, #0
 8002748:	75bb      	strb	r3, [r7, #22]
 800274a:	e027      	b.n	800279c <er_oled_char+0x19c>
        {
            if(temp & position) er_oled_pixel(x, y, 1, buffer);
 800274c:	8aba      	ldrh	r2, [r7, #20]
 800274e:	8a7b      	ldrh	r3, [r7, #18]
 8002750:	4013      	ands	r3, r2
 8002752:	b29b      	uxth	r3, r3
 8002754:	2b00      	cmp	r3, #0
 8002756:	d006      	beq.n	8002766 <er_oled_char+0x166>
 8002758:	79f8      	ldrb	r0, [r7, #7]
 800275a:	79b9      	ldrb	r1, [r7, #6]
 800275c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800275e:	2201      	movs	r2, #1
 8002760:	f7ff fedb 	bl	800251a <er_oled_pixel>
 8002764:	e005      	b.n	8002772 <er_oled_char+0x172>
            else er_oled_pixel(x, y, 0, buffer);
 8002766:	79f8      	ldrb	r0, [r7, #7]
 8002768:	79b9      	ldrb	r1, [r7, #6]
 800276a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800276c:	2200      	movs	r2, #0
 800276e:	f7ff fed4 	bl	800251a <er_oled_pixel>
            temp <<= 1;
 8002772:	8abb      	ldrh	r3, [r7, #20]
 8002774:	005b      	lsls	r3, r3, #1
 8002776:	82bb      	strh	r3, [r7, #20]
            y++;
 8002778:	79bb      	ldrb	r3, [r7, #6]
 800277a:	3301      	adds	r3, #1
 800277c:	71bb      	strb	r3, [r7, #6]
            if((y-y0) == size)
 800277e:	79ba      	ldrb	r2, [r7, #6]
 8002780:	7c3b      	ldrb	r3, [r7, #16]
 8002782:	1ad2      	subs	r2, r2, r3
 8002784:	793b      	ldrb	r3, [r7, #4]
 8002786:	429a      	cmp	r2, r3
 8002788:	d105      	bne.n	8002796 <er_oled_char+0x196>
            {
                y = y0;
 800278a:	7c3b      	ldrb	r3, [r7, #16]
 800278c:	71bb      	strb	r3, [r7, #6]
                x++;
 800278e:	79fb      	ldrb	r3, [r7, #7]
 8002790:	3301      	adds	r3, #1
 8002792:	71fb      	strb	r3, [r7, #7]
                break;
 8002794:	e006      	b.n	80027a4 <er_oled_char+0x1a4>
        for(j =0;j<maxindex;j++)
 8002796:	7dbb      	ldrb	r3, [r7, #22]
 8002798:	3301      	adds	r3, #1
 800279a:	75bb      	strb	r3, [r7, #22]
 800279c:	7dba      	ldrb	r2, [r7, #22]
 800279e:	7c7b      	ldrb	r3, [r7, #17]
 80027a0:	429a      	cmp	r2, r3
 80027a2:	d3d3      	bcc.n	800274c <er_oled_char+0x14c>
    for(i = 0;i<size;i++) {
 80027a4:	7dfb      	ldrb	r3, [r7, #23]
 80027a6:	3301      	adds	r3, #1
 80027a8:	75fb      	strb	r3, [r7, #23]
 80027aa:	7dfa      	ldrb	r2, [r7, #23]
 80027ac:	793b      	ldrb	r3, [r7, #4]
 80027ae:	429a      	cmp	r2, r3
 80027b0:	f4ff af49 	bcc.w	8002646 <er_oled_char+0x46>
            }
        }
    }
}
 80027b4:	bf00      	nop
 80027b6:	371c      	adds	r7, #28
 80027b8:	46bd      	mov	sp, r7
 80027ba:	bd90      	pop	{r4, r7, pc}
 80027bc:	08015134 	.word	0x08015134
 80027c0:	080155a8 	.word	0x080155a8
 80027c4:	08015b98 	.word	0x08015b98

080027c8 <er_oled_string>:

void er_oled_string(uint8_t x, uint8_t y, const char *pString, uint8_t Size, uint8_t Mode, uint8_t* buffer)
{
 80027c8:	b590      	push	{r4, r7, lr}
 80027ca:	b085      	sub	sp, #20
 80027cc:	af02      	add	r7, sp, #8
 80027ce:	603a      	str	r2, [r7, #0]
 80027d0:	461a      	mov	r2, r3
 80027d2:	4603      	mov	r3, r0
 80027d4:	71fb      	strb	r3, [r7, #7]
 80027d6:	460b      	mov	r3, r1
 80027d8:	71bb      	strb	r3, [r7, #6]
 80027da:	4613      	mov	r3, r2
 80027dc:	717b      	strb	r3, [r7, #5]
    while (*pString != '\0') {
 80027de:	e02c      	b.n	800283a <er_oled_string+0x72>
        if (x > (WIDTH - Size / 2)) {
 80027e0:	79fa      	ldrb	r2, [r7, #7]
 80027e2:	797b      	ldrb	r3, [r7, #5]
 80027e4:	085b      	lsrs	r3, r3, #1
 80027e6:	b2db      	uxtb	r3, r3
 80027e8:	f1c3 0348 	rsb	r3, r3, #72	; 0x48
 80027ec:	429a      	cmp	r2, r3
 80027ee:	dd0f      	ble.n	8002810 <er_oled_string+0x48>
            x = 0;
 80027f0:	2300      	movs	r3, #0
 80027f2:	71fb      	strb	r3, [r7, #7]
            y += Size;
 80027f4:	79ba      	ldrb	r2, [r7, #6]
 80027f6:	797b      	ldrb	r3, [r7, #5]
 80027f8:	4413      	add	r3, r2
 80027fa:	71bb      	strb	r3, [r7, #6]
            if (y > (HEIGHT - Size)) {
 80027fc:	79ba      	ldrb	r2, [r7, #6]
 80027fe:	797b      	ldrb	r3, [r7, #5]
 8002800:	f1c3 0328 	rsb	r3, r3, #40	; 0x28
 8002804:	429a      	cmp	r2, r3
 8002806:	dd03      	ble.n	8002810 <er_oled_string+0x48>
                y = x = 0;
 8002808:	2300      	movs	r3, #0
 800280a:	71fb      	strb	r3, [r7, #7]
 800280c:	79fb      	ldrb	r3, [r7, #7]
 800280e:	71bb      	strb	r3, [r7, #6]
            }
        }

        er_oled_char(x, y, *pString, Size, Mode, buffer);
 8002810:	683b      	ldr	r3, [r7, #0]
 8002812:	781a      	ldrb	r2, [r3, #0]
 8002814:	797c      	ldrb	r4, [r7, #5]
 8002816:	79b9      	ldrb	r1, [r7, #6]
 8002818:	79f8      	ldrb	r0, [r7, #7]
 800281a:	69fb      	ldr	r3, [r7, #28]
 800281c:	9301      	str	r3, [sp, #4]
 800281e:	7e3b      	ldrb	r3, [r7, #24]
 8002820:	9300      	str	r3, [sp, #0]
 8002822:	4623      	mov	r3, r4
 8002824:	f7ff feec 	bl	8002600 <er_oled_char>
        x += Size / 2;
 8002828:	797b      	ldrb	r3, [r7, #5]
 800282a:	085b      	lsrs	r3, r3, #1
 800282c:	b2da      	uxtb	r2, r3
 800282e:	79fb      	ldrb	r3, [r7, #7]
 8002830:	4413      	add	r3, r2
 8002832:	71fb      	strb	r3, [r7, #7]
        pString++;
 8002834:	683b      	ldr	r3, [r7, #0]
 8002836:	3301      	adds	r3, #1
 8002838:	603b      	str	r3, [r7, #0]
    while (*pString != '\0') {
 800283a:	683b      	ldr	r3, [r7, #0]
 800283c:	781b      	ldrb	r3, [r3, #0]
 800283e:	2b00      	cmp	r3, #0
 8002840:	d1ce      	bne.n	80027e0 <er_oled_string+0x18>
    }
}
 8002842:	bf00      	nop
 8002844:	370c      	adds	r7, #12
 8002846:	46bd      	mov	sp, r7
 8002848:	bd90      	pop	{r4, r7, pc}

0800284a <er_oled_bitmap>:
        }
    }
}

void er_oled_bitmap(uint8_t x,uint8_t y,const uint8_t *pBmp, uint8_t chWidth, uint8_t chHeight, uint8_t* buffer)
{
 800284a:	b580      	push	{r7, lr}
 800284c:	b084      	sub	sp, #16
 800284e:	af00      	add	r7, sp, #0
 8002850:	603a      	str	r2, [r7, #0]
 8002852:	461a      	mov	r2, r3
 8002854:	4603      	mov	r3, r0
 8002856:	71fb      	strb	r3, [r7, #7]
 8002858:	460b      	mov	r3, r1
 800285a:	71bb      	strb	r3, [r7, #6]
 800285c:	4613      	mov	r3, r2
 800285e:	717b      	strb	r3, [r7, #5]
	uint8_t i, j, byteWidth = (chWidth + 7)/8;
 8002860:	797b      	ldrb	r3, [r7, #5]
 8002862:	3307      	adds	r3, #7
 8002864:	2b00      	cmp	r3, #0
 8002866:	da00      	bge.n	800286a <er_oled_bitmap+0x20>
 8002868:	3307      	adds	r3, #7
 800286a:	10db      	asrs	r3, r3, #3
 800286c:	737b      	strb	r3, [r7, #13]
	for(j = 0;j < chHeight;j++){
 800286e:	2300      	movs	r3, #0
 8002870:	73bb      	strb	r3, [r7, #14]
 8002872:	e02c      	b.n	80028ce <er_oled_bitmap+0x84>
		for(i = 0;i <chWidth;i++){
 8002874:	2300      	movs	r3, #0
 8002876:	73fb      	strb	r3, [r7, #15]
 8002878:	e022      	b.n	80028c0 <er_oled_bitmap+0x76>
			if((pBmp[j * byteWidth + i / 8]) & (128 >> (i & 7))){
 800287a:	7bbb      	ldrb	r3, [r7, #14]
 800287c:	7b7a      	ldrb	r2, [r7, #13]
 800287e:	fb02 f303 	mul.w	r3, r2, r3
 8002882:	7bfa      	ldrb	r2, [r7, #15]
 8002884:	08d2      	lsrs	r2, r2, #3
 8002886:	b2d2      	uxtb	r2, r2
 8002888:	4413      	add	r3, r2
 800288a:	461a      	mov	r2, r3
 800288c:	683b      	ldr	r3, [r7, #0]
 800288e:	4413      	add	r3, r2
 8002890:	781b      	ldrb	r3, [r3, #0]
 8002892:	4619      	mov	r1, r3
 8002894:	7bfb      	ldrb	r3, [r7, #15]
 8002896:	f003 0307 	and.w	r3, r3, #7
 800289a:	2280      	movs	r2, #128	; 0x80
 800289c:	fa42 f303 	asr.w	r3, r2, r3
 80028a0:	400b      	ands	r3, r1
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d009      	beq.n	80028ba <er_oled_bitmap+0x70>
				er_oled_pixel(x + i,y + j, 1, buffer);
 80028a6:	79fa      	ldrb	r2, [r7, #7]
 80028a8:	7bfb      	ldrb	r3, [r7, #15]
 80028aa:	18d0      	adds	r0, r2, r3
 80028ac:	79ba      	ldrb	r2, [r7, #6]
 80028ae:	7bbb      	ldrb	r3, [r7, #14]
 80028b0:	18d1      	adds	r1, r2, r3
 80028b2:	69fb      	ldr	r3, [r7, #28]
 80028b4:	2201      	movs	r2, #1
 80028b6:	f7ff fe30 	bl	800251a <er_oled_pixel>
		for(i = 0;i <chWidth;i++){
 80028ba:	7bfb      	ldrb	r3, [r7, #15]
 80028bc:	3301      	adds	r3, #1
 80028be:	73fb      	strb	r3, [r7, #15]
 80028c0:	7bfa      	ldrb	r2, [r7, #15]
 80028c2:	797b      	ldrb	r3, [r7, #5]
 80028c4:	429a      	cmp	r2, r3
 80028c6:	d3d8      	bcc.n	800287a <er_oled_bitmap+0x30>
	for(j = 0;j < chHeight;j++){
 80028c8:	7bbb      	ldrb	r3, [r7, #14]
 80028ca:	3301      	adds	r3, #1
 80028cc:	73bb      	strb	r3, [r7, #14]
 80028ce:	7bba      	ldrb	r2, [r7, #14]
 80028d0:	7e3b      	ldrb	r3, [r7, #24]
 80028d2:	429a      	cmp	r2, r3
 80028d4:	d3ce      	bcc.n	8002874 <er_oled_bitmap+0x2a>
			}
		}
	}
}
 80028d6:	bf00      	nop
 80028d8:	3710      	adds	r7, #16
 80028da:	46bd      	mov	sp, r7
 80028dc:	bd80      	pop	{r7, pc}

080028de <er_oled_display>:

void er_oled_display(uint8_t* pBuf)
{    uint8_t page,i;
 80028de:	b580      	push	{r7, lr}
 80028e0:	b084      	sub	sp, #16
 80028e2:	af00      	add	r7, sp, #0
 80028e4:	6078      	str	r0, [r7, #4]
    for (page = 0; page < PAGES; page++) {
 80028e6:	2300      	movs	r3, #0
 80028e8:	73fb      	strb	r3, [r7, #15]
 80028ea:	e029      	b.n	8002940 <er_oled_display+0x62>
        command(0xB0 + page);/* set page address */
 80028ec:	7bfb      	ldrb	r3, [r7, #15]
 80028ee:	3b50      	subs	r3, #80	; 0x50
 80028f0:	b2db      	uxtb	r3, r3
 80028f2:	2100      	movs	r1, #0
 80028f4:	4618      	mov	r0, r3
 80028f6:	f7ff fd71 	bl	80023dc <I2C_Write_Byte>
        command(0x0c);   /* set low column address */
 80028fa:	2100      	movs	r1, #0
 80028fc:	200c      	movs	r0, #12
 80028fe:	f7ff fd6d 	bl	80023dc <I2C_Write_Byte>
        command(0x11);  /* set high column address */
 8002902:	2100      	movs	r1, #0
 8002904:	2011      	movs	r0, #17
 8002906:	f7ff fd69 	bl	80023dc <I2C_Write_Byte>
        for(i = 0; i< WIDTH; i++ ) {
 800290a:	2300      	movs	r3, #0
 800290c:	73bb      	strb	r3, [r7, #14]
 800290e:	e011      	b.n	8002934 <er_oled_display+0x56>
          data(pBuf[i+page*WIDTH]);// write data one
 8002910:	7bb9      	ldrb	r1, [r7, #14]
 8002912:	7bfa      	ldrb	r2, [r7, #15]
 8002914:	4613      	mov	r3, r2
 8002916:	00db      	lsls	r3, r3, #3
 8002918:	4413      	add	r3, r2
 800291a:	00db      	lsls	r3, r3, #3
 800291c:	440b      	add	r3, r1
 800291e:	461a      	mov	r2, r3
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	4413      	add	r3, r2
 8002924:	781b      	ldrb	r3, [r3, #0]
 8002926:	2140      	movs	r1, #64	; 0x40
 8002928:	4618      	mov	r0, r3
 800292a:	f7ff fd57 	bl	80023dc <I2C_Write_Byte>
        for(i = 0; i< WIDTH; i++ ) {
 800292e:	7bbb      	ldrb	r3, [r7, #14]
 8002930:	3301      	adds	r3, #1
 8002932:	73bb      	strb	r3, [r7, #14]
 8002934:	7bbb      	ldrb	r3, [r7, #14]
 8002936:	2b47      	cmp	r3, #71	; 0x47
 8002938:	d9ea      	bls.n	8002910 <er_oled_display+0x32>
    for (page = 0; page < PAGES; page++) {
 800293a:	7bfb      	ldrb	r3, [r7, #15]
 800293c:	3301      	adds	r3, #1
 800293e:	73fb      	strb	r3, [r7, #15]
 8002940:	7bfb      	ldrb	r3, [r7, #15]
 8002942:	2b04      	cmp	r3, #4
 8002944:	d9d2      	bls.n	80028ec <er_oled_display+0xe>
        }
    }
}
 8002946:	bf00      	nop
 8002948:	3710      	adds	r7, #16
 800294a:	46bd      	mov	sp, r7
 800294c:	bd80      	pop	{r7, pc}

0800294e <er_oled_time>:

void er_oled_time(const char *pString)
{
 800294e:	b580      	push	{r7, lr}
 8002950:	b0de      	sub	sp, #376	; 0x178
 8002952:	af02      	add	r7, sp, #8
 8002954:	1d3b      	adds	r3, r7, #4
 8002956:	6018      	str	r0, [r3, #0]
	uint8_t oled_buf[WIDTH * HEIGHT / 8];

	er_oled_clear(oled_buf);
 8002958:	f107 0308 	add.w	r3, r7, #8
 800295c:	4618      	mov	r0, r3
 800295e:	f7ff fdc3 	bl	80024e8 <er_oled_clear>
    er_oled_char( 0, 4, *pString++,  32, 1, oled_buf);
 8002962:	1d3b      	adds	r3, r7, #4
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	1d3a      	adds	r2, r7, #4
 8002968:	1c59      	adds	r1, r3, #1
 800296a:	6011      	str	r1, [r2, #0]
 800296c:	781a      	ldrb	r2, [r3, #0]
 800296e:	f107 0308 	add.w	r3, r7, #8
 8002972:	9301      	str	r3, [sp, #4]
 8002974:	2301      	movs	r3, #1
 8002976:	9300      	str	r3, [sp, #0]
 8002978:	2320      	movs	r3, #32
 800297a:	2104      	movs	r1, #4
 800297c:	2000      	movs	r0, #0
 800297e:	f7ff fe3f 	bl	8002600 <er_oled_char>
    er_oled_char(16, 4, *pString++ , 32, 1, oled_buf);
 8002982:	1d3b      	adds	r3, r7, #4
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	1d3a      	adds	r2, r7, #4
 8002988:	1c59      	adds	r1, r3, #1
 800298a:	6011      	str	r1, [r2, #0]
 800298c:	781a      	ldrb	r2, [r3, #0]
 800298e:	f107 0308 	add.w	r3, r7, #8
 8002992:	9301      	str	r3, [sp, #4]
 8002994:	2301      	movs	r3, #1
 8002996:	9300      	str	r3, [sp, #0]
 8002998:	2320      	movs	r3, #32
 800299a:	2104      	movs	r1, #4
 800299c:	2010      	movs	r0, #16
 800299e:	f7ff fe2f 	bl	8002600 <er_oled_char>
    er_oled_char(40, 4, *pString++ , 32, 1, oled_buf);
 80029a2:	1d3b      	adds	r3, r7, #4
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	1d3a      	adds	r2, r7, #4
 80029a8:	1c59      	adds	r1, r3, #1
 80029aa:	6011      	str	r1, [r2, #0]
 80029ac:	781a      	ldrb	r2, [r3, #0]
 80029ae:	f107 0308 	add.w	r3, r7, #8
 80029b2:	9301      	str	r3, [sp, #4]
 80029b4:	2301      	movs	r3, #1
 80029b6:	9300      	str	r3, [sp, #0]
 80029b8:	2320      	movs	r3, #32
 80029ba:	2104      	movs	r1, #4
 80029bc:	2028      	movs	r0, #40	; 0x28
 80029be:	f7ff fe1f 	bl	8002600 <er_oled_char>
    er_oled_char(56, 4, *pString   , 32, 1, oled_buf);
 80029c2:	1d3b      	adds	r3, r7, #4
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	781a      	ldrb	r2, [r3, #0]
 80029c8:	f107 0308 	add.w	r3, r7, #8
 80029cc:	9301      	str	r3, [sp, #4]
 80029ce:	2301      	movs	r3, #1
 80029d0:	9300      	str	r3, [sp, #0]
 80029d2:	2320      	movs	r3, #32
 80029d4:	2104      	movs	r1, #4
 80029d6:	2038      	movs	r0, #56	; 0x38
 80029d8:	f7ff fe12 	bl	8002600 <er_oled_char>

    er_oled_pixel(36, 12, 1, oled_buf);
 80029dc:	f107 0308 	add.w	r3, r7, #8
 80029e0:	2201      	movs	r2, #1
 80029e2:	210c      	movs	r1, #12
 80029e4:	2024      	movs	r0, #36	; 0x24
 80029e6:	f7ff fd98 	bl	800251a <er_oled_pixel>
	er_oled_pixel(36, 13, 1, oled_buf);
 80029ea:	f107 0308 	add.w	r3, r7, #8
 80029ee:	2201      	movs	r2, #1
 80029f0:	210d      	movs	r1, #13
 80029f2:	2024      	movs	r0, #36	; 0x24
 80029f4:	f7ff fd91 	bl	800251a <er_oled_pixel>
	er_oled_pixel(36, 14, 1, oled_buf);
 80029f8:	f107 0308 	add.w	r3, r7, #8
 80029fc:	2201      	movs	r2, #1
 80029fe:	210e      	movs	r1, #14
 8002a00:	2024      	movs	r0, #36	; 0x24
 8002a02:	f7ff fd8a 	bl	800251a <er_oled_pixel>
	er_oled_pixel(36, 28, 1, oled_buf);
 8002a06:	f107 0308 	add.w	r3, r7, #8
 8002a0a:	2201      	movs	r2, #1
 8002a0c:	211c      	movs	r1, #28
 8002a0e:	2024      	movs	r0, #36	; 0x24
 8002a10:	f7ff fd83 	bl	800251a <er_oled_pixel>
	er_oled_pixel(36, 27, 1, oled_buf);
 8002a14:	f107 0308 	add.w	r3, r7, #8
 8002a18:	2201      	movs	r2, #1
 8002a1a:	211b      	movs	r1, #27
 8002a1c:	2024      	movs	r0, #36	; 0x24
 8002a1e:	f7ff fd7c 	bl	800251a <er_oled_pixel>
	er_oled_pixel(36, 26, 1, oled_buf);
 8002a22:	f107 0308 	add.w	r3, r7, #8
 8002a26:	2201      	movs	r2, #1
 8002a28:	211a      	movs	r1, #26
 8002a2a:	2024      	movs	r0, #36	; 0x24
 8002a2c:	f7ff fd75 	bl	800251a <er_oled_pixel>

	er_oled_display(oled_buf);
 8002a30:	f107 0308 	add.w	r3, r7, #8
 8002a34:	4618      	mov	r0, r3
 8002a36:	f7ff ff52 	bl	80028de <er_oled_display>
}
 8002a3a:	bf00      	nop
 8002a3c:	f507 77b8 	add.w	r7, r7, #368	; 0x170
 8002a40:	46bd      	mov	sp, r7
 8002a42:	bd80      	pop	{r7, pc}

08002a44 <er_oled_print_2digit>:

void er_oled_print_2digit(int value){
 8002a44:	b580      	push	{r7, lr}
 8002a46:	b0e0      	sub	sp, #384	; 0x180
 8002a48:	af02      	add	r7, sp, #8
 8002a4a:	1d3b      	adds	r3, r7, #4
 8002a4c:	6018      	str	r0, [r3, #0]
  uint8_t oled_buf[WIDTH * HEIGHT / 8] = {0};
 8002a4e:	f107 030c 	add.w	r3, r7, #12
 8002a52:	4618      	mov	r0, r3
 8002a54:	f44f 73b4 	mov.w	r3, #360	; 0x168
 8002a58:	461a      	mov	r2, r3
 8002a5a:	2100      	movs	r1, #0
 8002a5c:	f00f f8a1 	bl	8011ba2 <memset>
  char c = (char) ( ((int) '0') + (value % 10));
 8002a60:	1d3b      	adds	r3, r7, #4
 8002a62:	681a      	ldr	r2, [r3, #0]
 8002a64:	4b1e      	ldr	r3, [pc, #120]	; (8002ae0 <er_oled_print_2digit+0x9c>)
 8002a66:	fb83 1302 	smull	r1, r3, r3, r2
 8002a6a:	1099      	asrs	r1, r3, #2
 8002a6c:	17d3      	asrs	r3, r2, #31
 8002a6e:	1ac9      	subs	r1, r1, r3
 8002a70:	460b      	mov	r3, r1
 8002a72:	009b      	lsls	r3, r3, #2
 8002a74:	440b      	add	r3, r1
 8002a76:	005b      	lsls	r3, r3, #1
 8002a78:	1ad1      	subs	r1, r2, r3
 8002a7a:	b2cb      	uxtb	r3, r1
 8002a7c:	3330      	adds	r3, #48	; 0x30
 8002a7e:	f887 3177 	strb.w	r3, [r7, #375]	; 0x177
  char d = (char) ( ((int) '0') + (value / 10));
 8002a82:	1d3b      	adds	r3, r7, #4
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	4a16      	ldr	r2, [pc, #88]	; (8002ae0 <er_oled_print_2digit+0x9c>)
 8002a88:	fb82 1203 	smull	r1, r2, r2, r3
 8002a8c:	1092      	asrs	r2, r2, #2
 8002a8e:	17db      	asrs	r3, r3, #31
 8002a90:	1ad3      	subs	r3, r2, r3
 8002a92:	b2db      	uxtb	r3, r3
 8002a94:	3330      	adds	r3, #48	; 0x30
 8002a96:	f887 3176 	strb.w	r3, [r7, #374]	; 0x176
  er_oled_char(27, 14, d, 12, 1, oled_buf);
 8002a9a:	f897 2176 	ldrb.w	r2, [r7, #374]	; 0x176
 8002a9e:	f107 030c 	add.w	r3, r7, #12
 8002aa2:	9301      	str	r3, [sp, #4]
 8002aa4:	2301      	movs	r3, #1
 8002aa6:	9300      	str	r3, [sp, #0]
 8002aa8:	230c      	movs	r3, #12
 8002aaa:	210e      	movs	r1, #14
 8002aac:	201b      	movs	r0, #27
 8002aae:	f7ff fda7 	bl	8002600 <er_oled_char>
  er_oled_char(36, 14, c, 12, 1, oled_buf);
 8002ab2:	f897 2177 	ldrb.w	r2, [r7, #375]	; 0x177
 8002ab6:	f107 030c 	add.w	r3, r7, #12
 8002aba:	9301      	str	r3, [sp, #4]
 8002abc:	2301      	movs	r3, #1
 8002abe:	9300      	str	r3, [sp, #0]
 8002ac0:	230c      	movs	r3, #12
 8002ac2:	210e      	movs	r1, #14
 8002ac4:	2024      	movs	r0, #36	; 0x24
 8002ac6:	f7ff fd9b 	bl	8002600 <er_oled_char>
  er_oled_display(oled_buf);
 8002aca:	f107 030c 	add.w	r3, r7, #12
 8002ace:	4618      	mov	r0, r3
 8002ad0:	f7ff ff05 	bl	80028de <er_oled_display>

}
 8002ad4:	bf00      	nop
 8002ad6:	f507 77bc 	add.w	r7, r7, #376	; 0x178
 8002ada:	46bd      	mov	sp, r7
 8002adc:	bd80      	pop	{r7, pc}
 8002ade:	bf00      	nop
 8002ae0:	66666667 	.word	0x66666667

08002ae4 <vPortSuppressTicksAndSleep>:
 *
 * @param: xExpectedIdleTime is given in number of FreeRTOS Ticks
 * @retval: None
 */
void vPortSuppressTicksAndSleep( TickType_t xExpectedIdleTime )
{
 8002ae4:	b480      	push	{r7}
 8002ae6:	b083      	sub	sp, #12
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	6078      	str	r0, [r7, #4]

    /* Exit with interrUpts enabled. */
    __enable_irq();
  }
#endif
}
 8002aec:	bf00      	nop
 8002aee:	370c      	adds	r7, #12
 8002af0:	46bd      	mov	sp, r7
 8002af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af6:	4770      	bx	lr

08002af8 <LL_EXTI_EnableIT_0_31>:
{
 8002af8:	b480      	push	{r7}
 8002afa:	b083      	sub	sp, #12
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8002b00:	4b06      	ldr	r3, [pc, #24]	; (8002b1c <LL_EXTI_EnableIT_0_31+0x24>)
 8002b02:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8002b06:	4905      	ldr	r1, [pc, #20]	; (8002b1c <LL_EXTI_EnableIT_0_31+0x24>)
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	4313      	orrs	r3, r2
 8002b0c:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 8002b10:	bf00      	nop
 8002b12:	370c      	adds	r7, #12
 8002b14:	46bd      	mov	sp, r7
 8002b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b1a:	4770      	bx	lr
 8002b1c:	58000800 	.word	0x58000800

08002b20 <LL_EXTI_EnableRisingTrig_0_31>:
{
 8002b20:	b480      	push	{r7}
 8002b22:	b083      	sub	sp, #12
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8002b28:	4b05      	ldr	r3, [pc, #20]	; (8002b40 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8002b2a:	681a      	ldr	r2, [r3, #0]
 8002b2c:	4904      	ldr	r1, [pc, #16]	; (8002b40 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	4313      	orrs	r3, r2
 8002b32:	600b      	str	r3, [r1, #0]
}
 8002b34:	bf00      	nop
 8002b36:	370c      	adds	r7, #12
 8002b38:	46bd      	mov	sp, r7
 8002b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b3e:	4770      	bx	lr
 8002b40:	58000800 	.word	0x58000800

08002b44 <ReadRtcSsrValue>:
 *         reliability of the value
 * @param  None
 * @retval SSR value read
 */
static uint32_t ReadRtcSsrValue(void)
{
 8002b44:	b480      	push	{r7}
 8002b46:	b083      	sub	sp, #12
 8002b48:	af00      	add	r7, sp, #0
  uint32_t first_read;
  uint32_t second_read;

  first_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8002b4a:	4b0d      	ldr	r3, [pc, #52]	; (8002b80 <ReadRtcSsrValue+0x3c>)
 8002b4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b4e:	b29b      	uxth	r3, r3
 8002b50:	607b      	str	r3, [r7, #4]

  second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8002b52:	4b0b      	ldr	r3, [pc, #44]	; (8002b80 <ReadRtcSsrValue+0x3c>)
 8002b54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b56:	b29b      	uxth	r3, r3
 8002b58:	603b      	str	r3, [r7, #0]

  while(first_read != second_read)
 8002b5a:	e005      	b.n	8002b68 <ReadRtcSsrValue+0x24>
  {
    first_read = second_read;
 8002b5c:	683b      	ldr	r3, [r7, #0]
 8002b5e:	607b      	str	r3, [r7, #4]

    second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8002b60:	4b07      	ldr	r3, [pc, #28]	; (8002b80 <ReadRtcSsrValue+0x3c>)
 8002b62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b64:	b29b      	uxth	r3, r3
 8002b66:	603b      	str	r3, [r7, #0]
  while(first_read != second_read)
 8002b68:	687a      	ldr	r2, [r7, #4]
 8002b6a:	683b      	ldr	r3, [r7, #0]
 8002b6c:	429a      	cmp	r2, r3
 8002b6e:	d1f5      	bne.n	8002b5c <ReadRtcSsrValue+0x18>
  }

  return second_read;
 8002b70:	683b      	ldr	r3, [r7, #0]
}
 8002b72:	4618      	mov	r0, r3
 8002b74:	370c      	adds	r7, #12
 8002b76:	46bd      	mov	sp, r7
 8002b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b7c:	4770      	bx	lr
 8002b7e:	bf00      	nop
 8002b80:	40002800 	.word	0x40002800

08002b84 <LinkTimerAfter>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked after
 * @retval None
 */
static void LinkTimerAfter(uint8_t TimerID, uint8_t RefTimerID)
{
 8002b84:	b480      	push	{r7}
 8002b86:	b085      	sub	sp, #20
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	4603      	mov	r3, r0
 8002b8c:	460a      	mov	r2, r1
 8002b8e:	71fb      	strb	r3, [r7, #7]
 8002b90:	4613      	mov	r3, r2
 8002b92:	71bb      	strb	r3, [r7, #6]
  uint8_t next_id;

  next_id = aTimerContext[RefTimerID].NextID;
 8002b94:	79ba      	ldrb	r2, [r7, #6]
 8002b96:	491d      	ldr	r1, [pc, #116]	; (8002c0c <LinkTimerAfter+0x88>)
 8002b98:	4613      	mov	r3, r2
 8002b9a:	005b      	lsls	r3, r3, #1
 8002b9c:	4413      	add	r3, r2
 8002b9e:	00db      	lsls	r3, r3, #3
 8002ba0:	440b      	add	r3, r1
 8002ba2:	3315      	adds	r3, #21
 8002ba4:	781b      	ldrb	r3, [r3, #0]
 8002ba6:	73fb      	strb	r3, [r7, #15]

  if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8002ba8:	7bfb      	ldrb	r3, [r7, #15]
 8002baa:	2b06      	cmp	r3, #6
 8002bac:	d009      	beq.n	8002bc2 <LinkTimerAfter+0x3e>
  {
    aTimerContext[next_id].PreviousID = TimerID;
 8002bae:	7bfa      	ldrb	r2, [r7, #15]
 8002bb0:	4916      	ldr	r1, [pc, #88]	; (8002c0c <LinkTimerAfter+0x88>)
 8002bb2:	4613      	mov	r3, r2
 8002bb4:	005b      	lsls	r3, r3, #1
 8002bb6:	4413      	add	r3, r2
 8002bb8:	00db      	lsls	r3, r3, #3
 8002bba:	440b      	add	r3, r1
 8002bbc:	3314      	adds	r3, #20
 8002bbe:	79fa      	ldrb	r2, [r7, #7]
 8002bc0:	701a      	strb	r2, [r3, #0]
  }
  aTimerContext[TimerID].NextID = next_id;
 8002bc2:	79fa      	ldrb	r2, [r7, #7]
 8002bc4:	4911      	ldr	r1, [pc, #68]	; (8002c0c <LinkTimerAfter+0x88>)
 8002bc6:	4613      	mov	r3, r2
 8002bc8:	005b      	lsls	r3, r3, #1
 8002bca:	4413      	add	r3, r2
 8002bcc:	00db      	lsls	r3, r3, #3
 8002bce:	440b      	add	r3, r1
 8002bd0:	3315      	adds	r3, #21
 8002bd2:	7bfa      	ldrb	r2, [r7, #15]
 8002bd4:	701a      	strb	r2, [r3, #0]
  aTimerContext[TimerID].PreviousID = RefTimerID ;
 8002bd6:	79fa      	ldrb	r2, [r7, #7]
 8002bd8:	490c      	ldr	r1, [pc, #48]	; (8002c0c <LinkTimerAfter+0x88>)
 8002bda:	4613      	mov	r3, r2
 8002bdc:	005b      	lsls	r3, r3, #1
 8002bde:	4413      	add	r3, r2
 8002be0:	00db      	lsls	r3, r3, #3
 8002be2:	440b      	add	r3, r1
 8002be4:	3314      	adds	r3, #20
 8002be6:	79ba      	ldrb	r2, [r7, #6]
 8002be8:	701a      	strb	r2, [r3, #0]
  aTimerContext[RefTimerID].NextID = TimerID;
 8002bea:	79ba      	ldrb	r2, [r7, #6]
 8002bec:	4907      	ldr	r1, [pc, #28]	; (8002c0c <LinkTimerAfter+0x88>)
 8002bee:	4613      	mov	r3, r2
 8002bf0:	005b      	lsls	r3, r3, #1
 8002bf2:	4413      	add	r3, r2
 8002bf4:	00db      	lsls	r3, r3, #3
 8002bf6:	440b      	add	r3, r1
 8002bf8:	3315      	adds	r3, #21
 8002bfa:	79fa      	ldrb	r2, [r7, #7]
 8002bfc:	701a      	strb	r2, [r3, #0]

  return;
 8002bfe:	bf00      	nop
}
 8002c00:	3714      	adds	r7, #20
 8002c02:	46bd      	mov	sp, r7
 8002c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c08:	4770      	bx	lr
 8002c0a:	bf00      	nop
 8002c0c:	200002c8 	.word	0x200002c8

08002c10 <LinkTimerBefore>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked before
 * @retval None
 */
static void LinkTimerBefore(uint8_t TimerID, uint8_t RefTimerID)
{
 8002c10:	b480      	push	{r7}
 8002c12:	b085      	sub	sp, #20
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	4603      	mov	r3, r0
 8002c18:	460a      	mov	r2, r1
 8002c1a:	71fb      	strb	r3, [r7, #7]
 8002c1c:	4613      	mov	r3, r2
 8002c1e:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;

  if(RefTimerID != CurrentRunningTimerID)
 8002c20:	4b29      	ldr	r3, [pc, #164]	; (8002cc8 <LinkTimerBefore+0xb8>)
 8002c22:	781b      	ldrb	r3, [r3, #0]
 8002c24:	b2db      	uxtb	r3, r3
 8002c26:	79ba      	ldrb	r2, [r7, #6]
 8002c28:	429a      	cmp	r2, r3
 8002c2a:	d032      	beq.n	8002c92 <LinkTimerBefore+0x82>
  {
    previous_id = aTimerContext[RefTimerID].PreviousID;
 8002c2c:	79ba      	ldrb	r2, [r7, #6]
 8002c2e:	4927      	ldr	r1, [pc, #156]	; (8002ccc <LinkTimerBefore+0xbc>)
 8002c30:	4613      	mov	r3, r2
 8002c32:	005b      	lsls	r3, r3, #1
 8002c34:	4413      	add	r3, r2
 8002c36:	00db      	lsls	r3, r3, #3
 8002c38:	440b      	add	r3, r1
 8002c3a:	3314      	adds	r3, #20
 8002c3c:	781b      	ldrb	r3, [r3, #0]
 8002c3e:	73fb      	strb	r3, [r7, #15]

    aTimerContext[previous_id].NextID = TimerID;
 8002c40:	7bfa      	ldrb	r2, [r7, #15]
 8002c42:	4922      	ldr	r1, [pc, #136]	; (8002ccc <LinkTimerBefore+0xbc>)
 8002c44:	4613      	mov	r3, r2
 8002c46:	005b      	lsls	r3, r3, #1
 8002c48:	4413      	add	r3, r2
 8002c4a:	00db      	lsls	r3, r3, #3
 8002c4c:	440b      	add	r3, r1
 8002c4e:	3315      	adds	r3, #21
 8002c50:	79fa      	ldrb	r2, [r7, #7]
 8002c52:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].NextID = RefTimerID;
 8002c54:	79fa      	ldrb	r2, [r7, #7]
 8002c56:	491d      	ldr	r1, [pc, #116]	; (8002ccc <LinkTimerBefore+0xbc>)
 8002c58:	4613      	mov	r3, r2
 8002c5a:	005b      	lsls	r3, r3, #1
 8002c5c:	4413      	add	r3, r2
 8002c5e:	00db      	lsls	r3, r3, #3
 8002c60:	440b      	add	r3, r1
 8002c62:	3315      	adds	r3, #21
 8002c64:	79ba      	ldrb	r2, [r7, #6]
 8002c66:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].PreviousID = previous_id ;
 8002c68:	79fa      	ldrb	r2, [r7, #7]
 8002c6a:	4918      	ldr	r1, [pc, #96]	; (8002ccc <LinkTimerBefore+0xbc>)
 8002c6c:	4613      	mov	r3, r2
 8002c6e:	005b      	lsls	r3, r3, #1
 8002c70:	4413      	add	r3, r2
 8002c72:	00db      	lsls	r3, r3, #3
 8002c74:	440b      	add	r3, r1
 8002c76:	3314      	adds	r3, #20
 8002c78:	7bfa      	ldrb	r2, [r7, #15]
 8002c7a:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 8002c7c:	79ba      	ldrb	r2, [r7, #6]
 8002c7e:	4913      	ldr	r1, [pc, #76]	; (8002ccc <LinkTimerBefore+0xbc>)
 8002c80:	4613      	mov	r3, r2
 8002c82:	005b      	lsls	r3, r3, #1
 8002c84:	4413      	add	r3, r2
 8002c86:	00db      	lsls	r3, r3, #3
 8002c88:	440b      	add	r3, r1
 8002c8a:	3314      	adds	r3, #20
 8002c8c:	79fa      	ldrb	r2, [r7, #7]
 8002c8e:	701a      	strb	r2, [r3, #0]
  {
    aTimerContext[TimerID].NextID = RefTimerID;
    aTimerContext[RefTimerID].PreviousID = TimerID;
  }

  return;
 8002c90:	e014      	b.n	8002cbc <LinkTimerBefore+0xac>
    aTimerContext[TimerID].NextID = RefTimerID;
 8002c92:	79fa      	ldrb	r2, [r7, #7]
 8002c94:	490d      	ldr	r1, [pc, #52]	; (8002ccc <LinkTimerBefore+0xbc>)
 8002c96:	4613      	mov	r3, r2
 8002c98:	005b      	lsls	r3, r3, #1
 8002c9a:	4413      	add	r3, r2
 8002c9c:	00db      	lsls	r3, r3, #3
 8002c9e:	440b      	add	r3, r1
 8002ca0:	3315      	adds	r3, #21
 8002ca2:	79ba      	ldrb	r2, [r7, #6]
 8002ca4:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 8002ca6:	79ba      	ldrb	r2, [r7, #6]
 8002ca8:	4908      	ldr	r1, [pc, #32]	; (8002ccc <LinkTimerBefore+0xbc>)
 8002caa:	4613      	mov	r3, r2
 8002cac:	005b      	lsls	r3, r3, #1
 8002cae:	4413      	add	r3, r2
 8002cb0:	00db      	lsls	r3, r3, #3
 8002cb2:	440b      	add	r3, r1
 8002cb4:	3314      	adds	r3, #20
 8002cb6:	79fa      	ldrb	r2, [r7, #7]
 8002cb8:	701a      	strb	r2, [r3, #0]
  return;
 8002cba:	bf00      	nop
}
 8002cbc:	3714      	adds	r7, #20
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc4:	4770      	bx	lr
 8002cc6:	bf00      	nop
 8002cc8:	20000358 	.word	0x20000358
 8002ccc:	200002c8 	.word	0x200002c8

08002cd0 <linkTimer>:
 * @brief  Insert a Timer in the list
 * @param  TimerID:   The ID of the Timer
 * @retval None
 */
static uint16_t linkTimer(uint8_t TimerID)
{
 8002cd0:	b580      	push	{r7, lr}
 8002cd2:	b084      	sub	sp, #16
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	4603      	mov	r3, r0
 8002cd8:	71fb      	strb	r3, [r7, #7]
  uint32_t time_left;
  uint16_t time_elapsed;
  uint8_t timer_id_lookup;
  uint8_t next_id;

  if(CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8002cda:	4b4e      	ldr	r3, [pc, #312]	; (8002e14 <linkTimer+0x144>)
 8002cdc:	781b      	ldrb	r3, [r3, #0]
 8002cde:	b2db      	uxtb	r3, r3
 8002ce0:	2b06      	cmp	r3, #6
 8002ce2:	d118      	bne.n	8002d16 <linkTimer+0x46>
  {
    /**
     * No timer in the list
     */
    PreviousRunningTimerID = CurrentRunningTimerID;
 8002ce4:	4b4b      	ldr	r3, [pc, #300]	; (8002e14 <linkTimer+0x144>)
 8002ce6:	781b      	ldrb	r3, [r3, #0]
 8002ce8:	b2da      	uxtb	r2, r3
 8002cea:	4b4b      	ldr	r3, [pc, #300]	; (8002e18 <linkTimer+0x148>)
 8002cec:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = TimerID;
 8002cee:	4a49      	ldr	r2, [pc, #292]	; (8002e14 <linkTimer+0x144>)
 8002cf0:	79fb      	ldrb	r3, [r7, #7]
 8002cf2:	7013      	strb	r3, [r2, #0]
    aTimerContext[TimerID].NextID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;
 8002cf4:	79fa      	ldrb	r2, [r7, #7]
 8002cf6:	4949      	ldr	r1, [pc, #292]	; (8002e1c <linkTimer+0x14c>)
 8002cf8:	4613      	mov	r3, r2
 8002cfa:	005b      	lsls	r3, r3, #1
 8002cfc:	4413      	add	r3, r2
 8002cfe:	00db      	lsls	r3, r3, #3
 8002d00:	440b      	add	r3, r1
 8002d02:	3315      	adds	r3, #21
 8002d04:	2206      	movs	r2, #6
 8002d06:	701a      	strb	r2, [r3, #0]

    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8002d08:	4b45      	ldr	r3, [pc, #276]	; (8002e20 <linkTimer+0x150>)
 8002d0a:	f04f 32ff 	mov.w	r2, #4294967295
 8002d0e:	601a      	str	r2, [r3, #0]
    time_elapsed = 0;
 8002d10:	2300      	movs	r3, #0
 8002d12:	81fb      	strh	r3, [r7, #14]
 8002d14:	e078      	b.n	8002e08 <linkTimer+0x138>
  }
  else
  {
    time_elapsed = ReturnTimeElapsed();
 8002d16:	f000 f909 	bl	8002f2c <ReturnTimeElapsed>
 8002d1a:	4603      	mov	r3, r0
 8002d1c:	81fb      	strh	r3, [r7, #14]

    /**
     * update count of the timer to be linked
     */
    aTimerContext[TimerID].CountLeft += time_elapsed;
 8002d1e:	79fa      	ldrb	r2, [r7, #7]
 8002d20:	493e      	ldr	r1, [pc, #248]	; (8002e1c <linkTimer+0x14c>)
 8002d22:	4613      	mov	r3, r2
 8002d24:	005b      	lsls	r3, r3, #1
 8002d26:	4413      	add	r3, r2
 8002d28:	00db      	lsls	r3, r3, #3
 8002d2a:	440b      	add	r3, r1
 8002d2c:	3308      	adds	r3, #8
 8002d2e:	6819      	ldr	r1, [r3, #0]
 8002d30:	89fb      	ldrh	r3, [r7, #14]
 8002d32:	79fa      	ldrb	r2, [r7, #7]
 8002d34:	4419      	add	r1, r3
 8002d36:	4839      	ldr	r0, [pc, #228]	; (8002e1c <linkTimer+0x14c>)
 8002d38:	4613      	mov	r3, r2
 8002d3a:	005b      	lsls	r3, r3, #1
 8002d3c:	4413      	add	r3, r2
 8002d3e:	00db      	lsls	r3, r3, #3
 8002d40:	4403      	add	r3, r0
 8002d42:	3308      	adds	r3, #8
 8002d44:	6019      	str	r1, [r3, #0]
    time_left = aTimerContext[TimerID].CountLeft;
 8002d46:	79fa      	ldrb	r2, [r7, #7]
 8002d48:	4934      	ldr	r1, [pc, #208]	; (8002e1c <linkTimer+0x14c>)
 8002d4a:	4613      	mov	r3, r2
 8002d4c:	005b      	lsls	r3, r3, #1
 8002d4e:	4413      	add	r3, r2
 8002d50:	00db      	lsls	r3, r3, #3
 8002d52:	440b      	add	r3, r1
 8002d54:	3308      	adds	r3, #8
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	60bb      	str	r3, [r7, #8]

    /**
     * Search for index where the new timer shall be linked
     */
    if(aTimerContext[CurrentRunningTimerID].CountLeft <= time_left)
 8002d5a:	4b2e      	ldr	r3, [pc, #184]	; (8002e14 <linkTimer+0x144>)
 8002d5c:	781b      	ldrb	r3, [r3, #0]
 8002d5e:	b2db      	uxtb	r3, r3
 8002d60:	4619      	mov	r1, r3
 8002d62:	4a2e      	ldr	r2, [pc, #184]	; (8002e1c <linkTimer+0x14c>)
 8002d64:	460b      	mov	r3, r1
 8002d66:	005b      	lsls	r3, r3, #1
 8002d68:	440b      	add	r3, r1
 8002d6a:	00db      	lsls	r3, r3, #3
 8002d6c:	4413      	add	r3, r2
 8002d6e:	3308      	adds	r3, #8
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	68ba      	ldr	r2, [r7, #8]
 8002d74:	429a      	cmp	r2, r3
 8002d76:	d337      	bcc.n	8002de8 <linkTimer+0x118>
    {
      /**
       * Search for the ID after the first one
       */
      timer_id_lookup = CurrentRunningTimerID;
 8002d78:	4b26      	ldr	r3, [pc, #152]	; (8002e14 <linkTimer+0x144>)
 8002d7a:	781b      	ldrb	r3, [r3, #0]
 8002d7c:	737b      	strb	r3, [r7, #13]
      next_id = aTimerContext[timer_id_lookup].NextID;
 8002d7e:	7b7a      	ldrb	r2, [r7, #13]
 8002d80:	4926      	ldr	r1, [pc, #152]	; (8002e1c <linkTimer+0x14c>)
 8002d82:	4613      	mov	r3, r2
 8002d84:	005b      	lsls	r3, r3, #1
 8002d86:	4413      	add	r3, r2
 8002d88:	00db      	lsls	r3, r3, #3
 8002d8a:	440b      	add	r3, r1
 8002d8c:	3315      	adds	r3, #21
 8002d8e:	781b      	ldrb	r3, [r3, #0]
 8002d90:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 8002d92:	e013      	b.n	8002dbc <linkTimer+0xec>
      {
        timer_id_lookup = aTimerContext[timer_id_lookup].NextID;
 8002d94:	7b7a      	ldrb	r2, [r7, #13]
 8002d96:	4921      	ldr	r1, [pc, #132]	; (8002e1c <linkTimer+0x14c>)
 8002d98:	4613      	mov	r3, r2
 8002d9a:	005b      	lsls	r3, r3, #1
 8002d9c:	4413      	add	r3, r2
 8002d9e:	00db      	lsls	r3, r3, #3
 8002da0:	440b      	add	r3, r1
 8002da2:	3315      	adds	r3, #21
 8002da4:	781b      	ldrb	r3, [r3, #0]
 8002da6:	737b      	strb	r3, [r7, #13]
        next_id = aTimerContext[timer_id_lookup].NextID;
 8002da8:	7b7a      	ldrb	r2, [r7, #13]
 8002daa:	491c      	ldr	r1, [pc, #112]	; (8002e1c <linkTimer+0x14c>)
 8002dac:	4613      	mov	r3, r2
 8002dae:	005b      	lsls	r3, r3, #1
 8002db0:	4413      	add	r3, r2
 8002db2:	00db      	lsls	r3, r3, #3
 8002db4:	440b      	add	r3, r1
 8002db6:	3315      	adds	r3, #21
 8002db8:	781b      	ldrb	r3, [r3, #0]
 8002dba:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 8002dbc:	7b3b      	ldrb	r3, [r7, #12]
 8002dbe:	2b06      	cmp	r3, #6
 8002dc0:	d00b      	beq.n	8002dda <linkTimer+0x10a>
 8002dc2:	7b3a      	ldrb	r2, [r7, #12]
 8002dc4:	4915      	ldr	r1, [pc, #84]	; (8002e1c <linkTimer+0x14c>)
 8002dc6:	4613      	mov	r3, r2
 8002dc8:	005b      	lsls	r3, r3, #1
 8002dca:	4413      	add	r3, r2
 8002dcc:	00db      	lsls	r3, r3, #3
 8002dce:	440b      	add	r3, r1
 8002dd0:	3308      	adds	r3, #8
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	68ba      	ldr	r2, [r7, #8]
 8002dd6:	429a      	cmp	r2, r3
 8002dd8:	d2dc      	bcs.n	8002d94 <linkTimer+0xc4>
      }

      /**
       * Link after the ID
       */
      LinkTimerAfter(TimerID, timer_id_lookup);
 8002dda:	7b7a      	ldrb	r2, [r7, #13]
 8002ddc:	79fb      	ldrb	r3, [r7, #7]
 8002dde:	4611      	mov	r1, r2
 8002de0:	4618      	mov	r0, r3
 8002de2:	f7ff fecf 	bl	8002b84 <LinkTimerAfter>
 8002de6:	e00f      	b.n	8002e08 <linkTimer+0x138>
    else
    {
      /**
       * Link before the first ID
       */
      LinkTimerBefore(TimerID, CurrentRunningTimerID);
 8002de8:	4b0a      	ldr	r3, [pc, #40]	; (8002e14 <linkTimer+0x144>)
 8002dea:	781b      	ldrb	r3, [r3, #0]
 8002dec:	b2da      	uxtb	r2, r3
 8002dee:	79fb      	ldrb	r3, [r7, #7]
 8002df0:	4611      	mov	r1, r2
 8002df2:	4618      	mov	r0, r3
 8002df4:	f7ff ff0c 	bl	8002c10 <LinkTimerBefore>
      PreviousRunningTimerID = CurrentRunningTimerID;
 8002df8:	4b06      	ldr	r3, [pc, #24]	; (8002e14 <linkTimer+0x144>)
 8002dfa:	781b      	ldrb	r3, [r3, #0]
 8002dfc:	b2da      	uxtb	r2, r3
 8002dfe:	4b06      	ldr	r3, [pc, #24]	; (8002e18 <linkTimer+0x148>)
 8002e00:	701a      	strb	r2, [r3, #0]
      CurrentRunningTimerID = TimerID;
 8002e02:	4a04      	ldr	r2, [pc, #16]	; (8002e14 <linkTimer+0x144>)
 8002e04:	79fb      	ldrb	r3, [r7, #7]
 8002e06:	7013      	strb	r3, [r2, #0]
    }
  }

  return time_elapsed;
 8002e08:	89fb      	ldrh	r3, [r7, #14]
}
 8002e0a:	4618      	mov	r0, r3
 8002e0c:	3710      	adds	r7, #16
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	bd80      	pop	{r7, pc}
 8002e12:	bf00      	nop
 8002e14:	20000358 	.word	0x20000358
 8002e18:	20000359 	.word	0x20000359
 8002e1c:	200002c8 	.word	0x200002c8
 8002e20:	2000035c 	.word	0x2000035c

08002e24 <UnlinkTimer>:
 * @param  TimerID:   The ID of the Timer
 * @param  RequestReadSSR: Request to read the SSR register or not
 * @retval None
 */
static void UnlinkTimer(uint8_t TimerID, RequestReadSSR_t RequestReadSSR)
{
 8002e24:	b480      	push	{r7}
 8002e26:	b085      	sub	sp, #20
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	4603      	mov	r3, r0
 8002e2c:	460a      	mov	r2, r1
 8002e2e:	71fb      	strb	r3, [r7, #7]
 8002e30:	4613      	mov	r3, r2
 8002e32:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;
  uint8_t next_id;

  if(TimerID == CurrentRunningTimerID)
 8002e34:	4b39      	ldr	r3, [pc, #228]	; (8002f1c <UnlinkTimer+0xf8>)
 8002e36:	781b      	ldrb	r3, [r3, #0]
 8002e38:	b2db      	uxtb	r3, r3
 8002e3a:	79fa      	ldrb	r2, [r7, #7]
 8002e3c:	429a      	cmp	r2, r3
 8002e3e:	d111      	bne.n	8002e64 <UnlinkTimer+0x40>
  {
    PreviousRunningTimerID = CurrentRunningTimerID;
 8002e40:	4b36      	ldr	r3, [pc, #216]	; (8002f1c <UnlinkTimer+0xf8>)
 8002e42:	781b      	ldrb	r3, [r3, #0]
 8002e44:	b2da      	uxtb	r2, r3
 8002e46:	4b36      	ldr	r3, [pc, #216]	; (8002f20 <UnlinkTimer+0xfc>)
 8002e48:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = aTimerContext[TimerID].NextID;
 8002e4a:	79fa      	ldrb	r2, [r7, #7]
 8002e4c:	4935      	ldr	r1, [pc, #212]	; (8002f24 <UnlinkTimer+0x100>)
 8002e4e:	4613      	mov	r3, r2
 8002e50:	005b      	lsls	r3, r3, #1
 8002e52:	4413      	add	r3, r2
 8002e54:	00db      	lsls	r3, r3, #3
 8002e56:	440b      	add	r3, r1
 8002e58:	3315      	adds	r3, #21
 8002e5a:	781b      	ldrb	r3, [r3, #0]
 8002e5c:	b2da      	uxtb	r2, r3
 8002e5e:	4b2f      	ldr	r3, [pc, #188]	; (8002f1c <UnlinkTimer+0xf8>)
 8002e60:	701a      	strb	r2, [r3, #0]
 8002e62:	e03e      	b.n	8002ee2 <UnlinkTimer+0xbe>
  }
  else
  {
    previous_id = aTimerContext[TimerID].PreviousID;
 8002e64:	79fa      	ldrb	r2, [r7, #7]
 8002e66:	492f      	ldr	r1, [pc, #188]	; (8002f24 <UnlinkTimer+0x100>)
 8002e68:	4613      	mov	r3, r2
 8002e6a:	005b      	lsls	r3, r3, #1
 8002e6c:	4413      	add	r3, r2
 8002e6e:	00db      	lsls	r3, r3, #3
 8002e70:	440b      	add	r3, r1
 8002e72:	3314      	adds	r3, #20
 8002e74:	781b      	ldrb	r3, [r3, #0]
 8002e76:	73fb      	strb	r3, [r7, #15]
    next_id = aTimerContext[TimerID].NextID;
 8002e78:	79fa      	ldrb	r2, [r7, #7]
 8002e7a:	492a      	ldr	r1, [pc, #168]	; (8002f24 <UnlinkTimer+0x100>)
 8002e7c:	4613      	mov	r3, r2
 8002e7e:	005b      	lsls	r3, r3, #1
 8002e80:	4413      	add	r3, r2
 8002e82:	00db      	lsls	r3, r3, #3
 8002e84:	440b      	add	r3, r1
 8002e86:	3315      	adds	r3, #21
 8002e88:	781b      	ldrb	r3, [r3, #0]
 8002e8a:	73bb      	strb	r3, [r7, #14]

    aTimerContext[previous_id].NextID = aTimerContext[TimerID].NextID;
 8002e8c:	79f9      	ldrb	r1, [r7, #7]
 8002e8e:	7bfa      	ldrb	r2, [r7, #15]
 8002e90:	4824      	ldr	r0, [pc, #144]	; (8002f24 <UnlinkTimer+0x100>)
 8002e92:	460b      	mov	r3, r1
 8002e94:	005b      	lsls	r3, r3, #1
 8002e96:	440b      	add	r3, r1
 8002e98:	00db      	lsls	r3, r3, #3
 8002e9a:	4403      	add	r3, r0
 8002e9c:	3315      	adds	r3, #21
 8002e9e:	781b      	ldrb	r3, [r3, #0]
 8002ea0:	b2d8      	uxtb	r0, r3
 8002ea2:	4920      	ldr	r1, [pc, #128]	; (8002f24 <UnlinkTimer+0x100>)
 8002ea4:	4613      	mov	r3, r2
 8002ea6:	005b      	lsls	r3, r3, #1
 8002ea8:	4413      	add	r3, r2
 8002eaa:	00db      	lsls	r3, r3, #3
 8002eac:	440b      	add	r3, r1
 8002eae:	3315      	adds	r3, #21
 8002eb0:	4602      	mov	r2, r0
 8002eb2:	701a      	strb	r2, [r3, #0]
    if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8002eb4:	7bbb      	ldrb	r3, [r7, #14]
 8002eb6:	2b06      	cmp	r3, #6
 8002eb8:	d013      	beq.n	8002ee2 <UnlinkTimer+0xbe>
    {
      aTimerContext[next_id].PreviousID = aTimerContext[TimerID].PreviousID;
 8002eba:	79f9      	ldrb	r1, [r7, #7]
 8002ebc:	7bba      	ldrb	r2, [r7, #14]
 8002ebe:	4819      	ldr	r0, [pc, #100]	; (8002f24 <UnlinkTimer+0x100>)
 8002ec0:	460b      	mov	r3, r1
 8002ec2:	005b      	lsls	r3, r3, #1
 8002ec4:	440b      	add	r3, r1
 8002ec6:	00db      	lsls	r3, r3, #3
 8002ec8:	4403      	add	r3, r0
 8002eca:	3314      	adds	r3, #20
 8002ecc:	781b      	ldrb	r3, [r3, #0]
 8002ece:	b2d8      	uxtb	r0, r3
 8002ed0:	4914      	ldr	r1, [pc, #80]	; (8002f24 <UnlinkTimer+0x100>)
 8002ed2:	4613      	mov	r3, r2
 8002ed4:	005b      	lsls	r3, r3, #1
 8002ed6:	4413      	add	r3, r2
 8002ed8:	00db      	lsls	r3, r3, #3
 8002eda:	440b      	add	r3, r1
 8002edc:	3314      	adds	r3, #20
 8002ede:	4602      	mov	r2, r0
 8002ee0:	701a      	strb	r2, [r3, #0]
  }

  /**
   * Timer is out of the list
   */
  aTimerContext[TimerID].TimerIDStatus = TimerID_Created;
 8002ee2:	79fa      	ldrb	r2, [r7, #7]
 8002ee4:	490f      	ldr	r1, [pc, #60]	; (8002f24 <UnlinkTimer+0x100>)
 8002ee6:	4613      	mov	r3, r2
 8002ee8:	005b      	lsls	r3, r3, #1
 8002eea:	4413      	add	r3, r2
 8002eec:	00db      	lsls	r3, r3, #3
 8002eee:	440b      	add	r3, r1
 8002ef0:	330c      	adds	r3, #12
 8002ef2:	2201      	movs	r2, #1
 8002ef4:	701a      	strb	r2, [r3, #0]

  if((CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (RequestReadSSR == SSR_Read_Requested))
 8002ef6:	4b09      	ldr	r3, [pc, #36]	; (8002f1c <UnlinkTimer+0xf8>)
 8002ef8:	781b      	ldrb	r3, [r3, #0]
 8002efa:	b2db      	uxtb	r3, r3
 8002efc:	2b06      	cmp	r3, #6
 8002efe:	d107      	bne.n	8002f10 <UnlinkTimer+0xec>
 8002f00:	79bb      	ldrb	r3, [r7, #6]
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d104      	bne.n	8002f10 <UnlinkTimer+0xec>
  {
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8002f06:	4b08      	ldr	r3, [pc, #32]	; (8002f28 <UnlinkTimer+0x104>)
 8002f08:	f04f 32ff 	mov.w	r2, #4294967295
 8002f0c:	601a      	str	r2, [r3, #0]
  }

  return;
 8002f0e:	bf00      	nop
 8002f10:	bf00      	nop
}
 8002f12:	3714      	adds	r7, #20
 8002f14:	46bd      	mov	sp, r7
 8002f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f1a:	4770      	bx	lr
 8002f1c:	20000358 	.word	0x20000358
 8002f20:	20000359 	.word	0x20000359
 8002f24:	200002c8 	.word	0x200002c8
 8002f28:	2000035c 	.word	0x2000035c

08002f2c <ReturnTimeElapsed>:
 *        since the time the timer has been started
 * @param  None
 * @retval Time expired in Ticks
 */
static uint16_t ReturnTimeElapsed(void)
{
 8002f2c:	b580      	push	{r7, lr}
 8002f2e:	b082      	sub	sp, #8
 8002f30:	af00      	add	r7, sp, #0
  uint32_t  return_value;
  uint32_t  wrap_counter;

  if(SSRValueOnLastSetup != SSR_FORBIDDEN_VALUE)
 8002f32:	4b1a      	ldr	r3, [pc, #104]	; (8002f9c <ReturnTimeElapsed+0x70>)
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f3a:	d026      	beq.n	8002f8a <ReturnTimeElapsed+0x5e>
  {
    return_value = ReadRtcSsrValue(); /**< Read SSR register first */
 8002f3c:	f7ff fe02 	bl	8002b44 <ReadRtcSsrValue>
 8002f40:	6078      	str	r0, [r7, #4]

    if (SSRValueOnLastSetup >= return_value)
 8002f42:	4b16      	ldr	r3, [pc, #88]	; (8002f9c <ReturnTimeElapsed+0x70>)
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	687a      	ldr	r2, [r7, #4]
 8002f48:	429a      	cmp	r2, r3
 8002f4a:	d805      	bhi.n	8002f58 <ReturnTimeElapsed+0x2c>
    {
      return_value = SSRValueOnLastSetup - return_value;
 8002f4c:	4b13      	ldr	r3, [pc, #76]	; (8002f9c <ReturnTimeElapsed+0x70>)
 8002f4e:	681a      	ldr	r2, [r3, #0]
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	1ad3      	subs	r3, r2, r3
 8002f54:	607b      	str	r3, [r7, #4]
 8002f56:	e00a      	b.n	8002f6e <ReturnTimeElapsed+0x42>
    }
    else
    {
      wrap_counter = SynchPrescalerUserConfig - return_value;
 8002f58:	4b11      	ldr	r3, [pc, #68]	; (8002fa0 <ReturnTimeElapsed+0x74>)
 8002f5a:	881b      	ldrh	r3, [r3, #0]
 8002f5c:	461a      	mov	r2, r3
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	1ad3      	subs	r3, r2, r3
 8002f62:	603b      	str	r3, [r7, #0]
      return_value = SSRValueOnLastSetup + wrap_counter;
 8002f64:	4b0d      	ldr	r3, [pc, #52]	; (8002f9c <ReturnTimeElapsed+0x70>)
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	683a      	ldr	r2, [r7, #0]
 8002f6a:	4413      	add	r3, r2
 8002f6c:	607b      	str	r3, [r7, #4]

    /**
     * At this stage, ReturnValue holds the number of ticks counted by SSR
     * Need to translate in number of ticks counted by the Wakeuptimer
     */
    return_value = return_value*AsynchPrescalerUserConfig;
 8002f6e:	4b0d      	ldr	r3, [pc, #52]	; (8002fa4 <ReturnTimeElapsed+0x78>)
 8002f70:	781b      	ldrb	r3, [r3, #0]
 8002f72:	461a      	mov	r2, r3
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	fb02 f303 	mul.w	r3, r2, r3
 8002f7a:	607b      	str	r3, [r7, #4]
    return_value = return_value >> WakeupTimerDivider;
 8002f7c:	4b0a      	ldr	r3, [pc, #40]	; (8002fa8 <ReturnTimeElapsed+0x7c>)
 8002f7e:	781b      	ldrb	r3, [r3, #0]
 8002f80:	461a      	mov	r2, r3
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	40d3      	lsrs	r3, r2
 8002f86:	607b      	str	r3, [r7, #4]
 8002f88:	e001      	b.n	8002f8e <ReturnTimeElapsed+0x62>
  }
  else
  {
    return_value = 0;
 8002f8a:	2300      	movs	r3, #0
 8002f8c:	607b      	str	r3, [r7, #4]
  }

  return (uint16_t)return_value;
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	b29b      	uxth	r3, r3
}
 8002f92:	4618      	mov	r0, r3
 8002f94:	3708      	adds	r7, #8
 8002f96:	46bd      	mov	sp, r7
 8002f98:	bd80      	pop	{r7, pc}
 8002f9a:	bf00      	nop
 8002f9c:	2000035c 	.word	0x2000035c
 8002fa0:	200003e6 	.word	0x200003e6
 8002fa4:	200003e5 	.word	0x200003e5
 8002fa8:	200003e4 	.word	0x200003e4

08002fac <RestartWakeupCounter>:
 *    It assumes all condition are met to be allowed to write the wakeup counter
 * @param  Value: Value to be written in the counter
 * @retval None
 */
static void RestartWakeupCounter(uint16_t Value)
{
 8002fac:	b580      	push	{r7, lr}
 8002fae:	b082      	sub	sp, #8
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	4603      	mov	r3, r0
 8002fb4:	80fb      	strh	r3, [r7, #6]
   * The wakeuptimer has been disabled in the calling function to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   *  __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);
   */

  if(Value == 0)
 8002fb6:	88fb      	ldrh	r3, [r7, #6]
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d108      	bne.n	8002fce <RestartWakeupCounter+0x22>
  {
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8002fbc:	f7ff fdc2 	bl	8002b44 <ReadRtcSsrValue>
 8002fc0:	4602      	mov	r2, r0
 8002fc2:	4b24      	ldr	r3, [pc, #144]	; (8003054 <RestartWakeupCounter+0xa8>)
 8002fc4:	601a      	str	r2, [r3, #0]

    /**
     * Simulate that the Timer expired
     */
    HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 8002fc6:	2003      	movs	r0, #3
 8002fc8:	f002 ff8a 	bl	8005ee0 <HAL_NVIC_SetPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE(phrtc);    /**<  Enable the Wakeup Timer */

    HW_TS_RTC_CountUpdated_AppNot();
  }

  return ;
 8002fcc:	e03e      	b.n	800304c <RestartWakeupCounter+0xa0>
    if((Value > 1) ||(WakeupTimerDivider != 1))
 8002fce:	88fb      	ldrh	r3, [r7, #6]
 8002fd0:	2b01      	cmp	r3, #1
 8002fd2:	d803      	bhi.n	8002fdc <RestartWakeupCounter+0x30>
 8002fd4:	4b20      	ldr	r3, [pc, #128]	; (8003058 <RestartWakeupCounter+0xac>)
 8002fd6:	781b      	ldrb	r3, [r3, #0]
 8002fd8:	2b01      	cmp	r3, #1
 8002fda:	d002      	beq.n	8002fe2 <RestartWakeupCounter+0x36>
      Value -= 1;
 8002fdc:	88fb      	ldrh	r3, [r7, #6]
 8002fde:	3b01      	subs	r3, #1
 8002fe0:	80fb      	strh	r3, [r7, #6]
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == RESET);
 8002fe2:	bf00      	nop
 8002fe4:	4b1d      	ldr	r3, [pc, #116]	; (800305c <RestartWakeupCounter+0xb0>)
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	68db      	ldr	r3, [r3, #12]
 8002fec:	f003 0304 	and.w	r3, r3, #4
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d0f7      	beq.n	8002fe4 <RestartWakeupCounter+0x38>
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8002ff4:	4b19      	ldr	r3, [pc, #100]	; (800305c <RestartWakeupCounter+0xb0>)
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	68db      	ldr	r3, [r3, #12]
 8002ffc:	b2da      	uxtb	r2, r3
 8002ffe:	4b17      	ldr	r3, [pc, #92]	; (800305c <RestartWakeupCounter+0xb0>)
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8003008:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 800300a:	4b15      	ldr	r3, [pc, #84]	; (8003060 <RestartWakeupCounter+0xb4>)
 800300c:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8003010:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 8003012:	2003      	movs	r0, #3
 8003014:	f002 ff72 	bl	8005efc <HAL_NVIC_ClearPendingIRQ>
    MODIFY_REG(RTC->WUTR, RTC_WUTR_WUT, Value);
 8003018:	4b12      	ldr	r3, [pc, #72]	; (8003064 <RestartWakeupCounter+0xb8>)
 800301a:	695b      	ldr	r3, [r3, #20]
 800301c:	0c1b      	lsrs	r3, r3, #16
 800301e:	041b      	lsls	r3, r3, #16
 8003020:	88fa      	ldrh	r2, [r7, #6]
 8003022:	4910      	ldr	r1, [pc, #64]	; (8003064 <RestartWakeupCounter+0xb8>)
 8003024:	4313      	orrs	r3, r2
 8003026:	614b      	str	r3, [r1, #20]
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8003028:	f7ff fd8c 	bl	8002b44 <ReadRtcSsrValue>
 800302c:	4602      	mov	r2, r0
 800302e:	4b09      	ldr	r3, [pc, #36]	; (8003054 <RestartWakeupCounter+0xa8>)
 8003030:	601a      	str	r2, [r3, #0]
    __HAL_RTC_WAKEUPTIMER_ENABLE(phrtc);    /**<  Enable the Wakeup Timer */
 8003032:	4b0a      	ldr	r3, [pc, #40]	; (800305c <RestartWakeupCounter+0xb0>)
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	689a      	ldr	r2, [r3, #8]
 800303a:	4b08      	ldr	r3, [pc, #32]	; (800305c <RestartWakeupCounter+0xb0>)
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003044:	609a      	str	r2, [r3, #8]
    HW_TS_RTC_CountUpdated_AppNot();
 8003046:	f3af 8000 	nop.w
  return ;
 800304a:	bf00      	nop
}
 800304c:	3708      	adds	r7, #8
 800304e:	46bd      	mov	sp, r7
 8003050:	bd80      	pop	{r7, pc}
 8003052:	bf00      	nop
 8003054:	2000035c 	.word	0x2000035c
 8003058:	200003e4 	.word	0x200003e4
 800305c:	200003e0 	.word	0x200003e0
 8003060:	58000800 	.word	0x58000800
 8003064:	40002800 	.word	0x40002800

08003068 <RescheduleTimerList>:
 *    2) Setup the wakeuptimer
 * @param  None
 * @retval None
 */
static void RescheduleTimerList(void)
{
 8003068:	b580      	push	{r7, lr}
 800306a:	b084      	sub	sp, #16
 800306c:	af00      	add	r7, sp, #0

  /**
   * The wakeuptimer is disabled now to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   */
  if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 800306e:	4b47      	ldr	r3, [pc, #284]	; (800318c <RescheduleTimerList+0x124>)
 8003070:	689b      	ldr	r3, [r3, #8]
 8003072:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003076:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800307a:	d108      	bne.n	800308e <RescheduleTimerList+0x26>
  {
    /**
     * Wait for the flag to be back to 0 when the wakeup timer is enabled
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == SET);
 800307c:	bf00      	nop
 800307e:	4b44      	ldr	r3, [pc, #272]	; (8003190 <RescheduleTimerList+0x128>)
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	68db      	ldr	r3, [r3, #12]
 8003086:	f003 0304 	and.w	r3, r3, #4
 800308a:	2b00      	cmp	r3, #0
 800308c:	d1f7      	bne.n	800307e <RescheduleTimerList+0x16>
  }
  __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);   /**<  Disable the Wakeup Timer */
 800308e:	4b40      	ldr	r3, [pc, #256]	; (8003190 <RescheduleTimerList+0x128>)
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	689a      	ldr	r2, [r3, #8]
 8003096:	4b3e      	ldr	r3, [pc, #248]	; (8003190 <RescheduleTimerList+0x128>)
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80030a0:	609a      	str	r2, [r3, #8]

  localTimerID = CurrentRunningTimerID;
 80030a2:	4b3c      	ldr	r3, [pc, #240]	; (8003194 <RescheduleTimerList+0x12c>)
 80030a4:	781b      	ldrb	r3, [r3, #0]
 80030a6:	73fb      	strb	r3, [r7, #15]

  /**
   * Calculate what will be the value to write in the wakeuptimer
   */
  timecountleft = aTimerContext[localTimerID].CountLeft;
 80030a8:	7bfa      	ldrb	r2, [r7, #15]
 80030aa:	493b      	ldr	r1, [pc, #236]	; (8003198 <RescheduleTimerList+0x130>)
 80030ac:	4613      	mov	r3, r2
 80030ae:	005b      	lsls	r3, r3, #1
 80030b0:	4413      	add	r3, r2
 80030b2:	00db      	lsls	r3, r3, #3
 80030b4:	440b      	add	r3, r1
 80030b6:	3308      	adds	r3, #8
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	60bb      	str	r3, [r7, #8]

  /**
   * Read how much has been counted
   */
  time_elapsed = ReturnTimeElapsed();
 80030bc:	f7ff ff36 	bl	8002f2c <ReturnTimeElapsed>
 80030c0:	4603      	mov	r3, r0
 80030c2:	80fb      	strh	r3, [r7, #6]

  if(timecountleft < time_elapsed )
 80030c4:	88fb      	ldrh	r3, [r7, #6]
 80030c6:	68ba      	ldr	r2, [r7, #8]
 80030c8:	429a      	cmp	r2, r3
 80030ca:	d205      	bcs.n	80030d8 <RescheduleTimerList+0x70>
  {
    /**
     * There is no tick left to count
     */
    wakeup_timer_value = 0;
 80030cc:	2300      	movs	r3, #0
 80030ce:	81bb      	strh	r3, [r7, #12]
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 80030d0:	4b32      	ldr	r3, [pc, #200]	; (800319c <RescheduleTimerList+0x134>)
 80030d2:	2201      	movs	r2, #1
 80030d4:	701a      	strb	r2, [r3, #0]
 80030d6:	e04d      	b.n	8003174 <RescheduleTimerList+0x10c>
  }
  else
  {
    if(timecountleft > (time_elapsed + MaxWakeupTimerSetup))
 80030d8:	88fb      	ldrh	r3, [r7, #6]
 80030da:	4a31      	ldr	r2, [pc, #196]	; (80031a0 <RescheduleTimerList+0x138>)
 80030dc:	8812      	ldrh	r2, [r2, #0]
 80030de:	b292      	uxth	r2, r2
 80030e0:	4413      	add	r3, r2
 80030e2:	461a      	mov	r2, r3
 80030e4:	68bb      	ldr	r3, [r7, #8]
 80030e6:	4293      	cmp	r3, r2
 80030e8:	d906      	bls.n	80030f8 <RescheduleTimerList+0x90>
    {
      /**
       * The number of tick left is greater than the Wakeuptimer maximum value
       */
      wakeup_timer_value = MaxWakeupTimerSetup;
 80030ea:	4b2d      	ldr	r3, [pc, #180]	; (80031a0 <RescheduleTimerList+0x138>)
 80030ec:	881b      	ldrh	r3, [r3, #0]
 80030ee:	81bb      	strh	r3, [r7, #12]

      WakeupTimerLimitation = WakeupTimerValue_Overpassed;
 80030f0:	4b2a      	ldr	r3, [pc, #168]	; (800319c <RescheduleTimerList+0x134>)
 80030f2:	2200      	movs	r2, #0
 80030f4:	701a      	strb	r2, [r3, #0]
 80030f6:	e03d      	b.n	8003174 <RescheduleTimerList+0x10c>
    }
    else
    {
      wakeup_timer_value = timecountleft - time_elapsed;
 80030f8:	68bb      	ldr	r3, [r7, #8]
 80030fa:	b29a      	uxth	r2, r3
 80030fc:	88fb      	ldrh	r3, [r7, #6]
 80030fe:	1ad3      	subs	r3, r2, r3
 8003100:	81bb      	strh	r3, [r7, #12]
      WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8003102:	4b26      	ldr	r3, [pc, #152]	; (800319c <RescheduleTimerList+0x134>)
 8003104:	2201      	movs	r2, #1
 8003106:	701a      	strb	r2, [r3, #0]
  }

  /**
   * update ticks left to be counted for each timer
   */
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8003108:	e034      	b.n	8003174 <RescheduleTimerList+0x10c>
  {
    if (aTimerContext[localTimerID].CountLeft < time_elapsed)
 800310a:	7bfa      	ldrb	r2, [r7, #15]
 800310c:	4922      	ldr	r1, [pc, #136]	; (8003198 <RescheduleTimerList+0x130>)
 800310e:	4613      	mov	r3, r2
 8003110:	005b      	lsls	r3, r3, #1
 8003112:	4413      	add	r3, r2
 8003114:	00db      	lsls	r3, r3, #3
 8003116:	440b      	add	r3, r1
 8003118:	3308      	adds	r3, #8
 800311a:	681a      	ldr	r2, [r3, #0]
 800311c:	88fb      	ldrh	r3, [r7, #6]
 800311e:	429a      	cmp	r2, r3
 8003120:	d20a      	bcs.n	8003138 <RescheduleTimerList+0xd0>
    {
      aTimerContext[localTimerID].CountLeft = 0;
 8003122:	7bfa      	ldrb	r2, [r7, #15]
 8003124:	491c      	ldr	r1, [pc, #112]	; (8003198 <RescheduleTimerList+0x130>)
 8003126:	4613      	mov	r3, r2
 8003128:	005b      	lsls	r3, r3, #1
 800312a:	4413      	add	r3, r2
 800312c:	00db      	lsls	r3, r3, #3
 800312e:	440b      	add	r3, r1
 8003130:	3308      	adds	r3, #8
 8003132:	2200      	movs	r2, #0
 8003134:	601a      	str	r2, [r3, #0]
 8003136:	e013      	b.n	8003160 <RescheduleTimerList+0xf8>
    }
    else
    {
      aTimerContext[localTimerID].CountLeft -= time_elapsed;
 8003138:	7bfa      	ldrb	r2, [r7, #15]
 800313a:	4917      	ldr	r1, [pc, #92]	; (8003198 <RescheduleTimerList+0x130>)
 800313c:	4613      	mov	r3, r2
 800313e:	005b      	lsls	r3, r3, #1
 8003140:	4413      	add	r3, r2
 8003142:	00db      	lsls	r3, r3, #3
 8003144:	440b      	add	r3, r1
 8003146:	3308      	adds	r3, #8
 8003148:	6819      	ldr	r1, [r3, #0]
 800314a:	88fb      	ldrh	r3, [r7, #6]
 800314c:	7bfa      	ldrb	r2, [r7, #15]
 800314e:	1ac9      	subs	r1, r1, r3
 8003150:	4811      	ldr	r0, [pc, #68]	; (8003198 <RescheduleTimerList+0x130>)
 8003152:	4613      	mov	r3, r2
 8003154:	005b      	lsls	r3, r3, #1
 8003156:	4413      	add	r3, r2
 8003158:	00db      	lsls	r3, r3, #3
 800315a:	4403      	add	r3, r0
 800315c:	3308      	adds	r3, #8
 800315e:	6019      	str	r1, [r3, #0]
    }
    localTimerID = aTimerContext[localTimerID].NextID;
 8003160:	7bfa      	ldrb	r2, [r7, #15]
 8003162:	490d      	ldr	r1, [pc, #52]	; (8003198 <RescheduleTimerList+0x130>)
 8003164:	4613      	mov	r3, r2
 8003166:	005b      	lsls	r3, r3, #1
 8003168:	4413      	add	r3, r2
 800316a:	00db      	lsls	r3, r3, #3
 800316c:	440b      	add	r3, r1
 800316e:	3315      	adds	r3, #21
 8003170:	781b      	ldrb	r3, [r3, #0]
 8003172:	73fb      	strb	r3, [r7, #15]
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8003174:	7bfb      	ldrb	r3, [r7, #15]
 8003176:	2b06      	cmp	r3, #6
 8003178:	d1c7      	bne.n	800310a <RescheduleTimerList+0xa2>
  }

  /**
   * Write next count
   */
  RestartWakeupCounter(wakeup_timer_value);
 800317a:	89bb      	ldrh	r3, [r7, #12]
 800317c:	4618      	mov	r0, r3
 800317e:	f7ff ff15 	bl	8002fac <RestartWakeupCounter>

  return ;
 8003182:	bf00      	nop
}
 8003184:	3710      	adds	r7, #16
 8003186:	46bd      	mov	sp, r7
 8003188:	bd80      	pop	{r7, pc}
 800318a:	bf00      	nop
 800318c:	40002800 	.word	0x40002800
 8003190:	200003e0 	.word	0x200003e0
 8003194:	20000358 	.word	0x20000358
 8003198:	200002c8 	.word	0x200002c8
 800319c:	20000360 	.word	0x20000360
 80031a0:	200003e8 	.word	0x200003e8

080031a4 <HW_TS_RTC_Wakeup_Handler>:
 * In order to ease maintainability, the unlock is done at the top and the lock at then end
 * in case some new implementation is coming in the future
 */

void HW_TS_RTC_Wakeup_Handler(void)
{
 80031a4:	b580      	push	{r7, lr}
 80031a6:	b08a      	sub	sp, #40	; 0x28
 80031a8:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80031aa:	f3ef 8310 	mrs	r3, PRIMASK
 80031ae:	617b      	str	r3, [r7, #20]
  return(result);
 80031b0:	697b      	ldr	r3, [r7, #20]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80031b2:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("cpsid i" : : : "memory");
 80031b4:	b672      	cpsid	i
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

/* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 80031b6:	4b5e      	ldr	r3, [pc, #376]	; (8003330 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	22ca      	movs	r2, #202	; 0xca
 80031be:	625a      	str	r2, [r3, #36]	; 0x24
 80031c0:	4b5b      	ldr	r3, [pc, #364]	; (8003330 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	2253      	movs	r2, #83	; 0x53
 80031c8:	625a      	str	r2, [r3, #36]	; 0x24
  /**
   * Disable the Wakeup Timer
   * This may speed up a bit the processing to wait the timer to be disabled
   * The timer is still counting 2 RTCCLK
   */
  __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);
 80031ca:	4b59      	ldr	r3, [pc, #356]	; (8003330 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	689a      	ldr	r2, [r3, #8]
 80031d2:	4b57      	ldr	r3, [pc, #348]	; (8003330 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80031dc:	609a      	str	r2, [r3, #8]

  local_current_running_timer_id = CurrentRunningTimerID;
 80031de:	4b55      	ldr	r3, [pc, #340]	; (8003334 <HW_TS_RTC_Wakeup_Handler+0x190>)
 80031e0:	781b      	ldrb	r3, [r3, #0]
 80031e2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  if(aTimerContext[local_current_running_timer_id].TimerIDStatus == TimerID_Running)
 80031e6:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 80031ea:	4953      	ldr	r1, [pc, #332]	; (8003338 <HW_TS_RTC_Wakeup_Handler+0x194>)
 80031ec:	4613      	mov	r3, r2
 80031ee:	005b      	lsls	r3, r3, #1
 80031f0:	4413      	add	r3, r2
 80031f2:	00db      	lsls	r3, r3, #3
 80031f4:	440b      	add	r3, r1
 80031f6:	330c      	adds	r3, #12
 80031f8:	781b      	ldrb	r3, [r3, #0]
 80031fa:	b2db      	uxtb	r3, r3
 80031fc:	2b02      	cmp	r3, #2
 80031fe:	d170      	bne.n	80032e2 <HW_TS_RTC_Wakeup_Handler+0x13e>
  {
    ptimer_callback = aTimerContext[local_current_running_timer_id].pTimerCallBack;
 8003200:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8003204:	494c      	ldr	r1, [pc, #304]	; (8003338 <HW_TS_RTC_Wakeup_Handler+0x194>)
 8003206:	4613      	mov	r3, r2
 8003208:	005b      	lsls	r3, r3, #1
 800320a:	4413      	add	r3, r2
 800320c:	00db      	lsls	r3, r3, #3
 800320e:	440b      	add	r3, r1
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	61fb      	str	r3, [r7, #28]
    timer_process_id = aTimerContext[local_current_running_timer_id].TimerProcessID;
 8003214:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8003218:	4947      	ldr	r1, [pc, #284]	; (8003338 <HW_TS_RTC_Wakeup_Handler+0x194>)
 800321a:	4613      	mov	r3, r2
 800321c:	005b      	lsls	r3, r3, #1
 800321e:	4413      	add	r3, r2
 8003220:	00db      	lsls	r3, r3, #3
 8003222:	440b      	add	r3, r1
 8003224:	3310      	adds	r3, #16
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	61bb      	str	r3, [r7, #24]
     * However, due to the inaccuracy of the reading of the time elapsed, it may return there is 1 tick
     * to be left whereas the count is over
     * A more secure implementation has been done with a flag to state whereas the full count has been written
     * in the wakeuptimer or not
     */
    if(WakeupTimerLimitation != WakeupTimerValue_Overpassed)
 800322a:	4b44      	ldr	r3, [pc, #272]	; (800333c <HW_TS_RTC_Wakeup_Handler+0x198>)
 800322c:	781b      	ldrb	r3, [r3, #0]
 800322e:	b2db      	uxtb	r3, r3
 8003230:	2b00      	cmp	r3, #0
 8003232:	d04e      	beq.n	80032d2 <HW_TS_RTC_Wakeup_Handler+0x12e>
    {
      if(aTimerContext[local_current_running_timer_id].TimerMode == hw_ts_Repeated)
 8003234:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8003238:	493f      	ldr	r1, [pc, #252]	; (8003338 <HW_TS_RTC_Wakeup_Handler+0x194>)
 800323a:	4613      	mov	r3, r2
 800323c:	005b      	lsls	r3, r3, #1
 800323e:	4413      	add	r3, r2
 8003240:	00db      	lsls	r3, r3, #3
 8003242:	440b      	add	r3, r1
 8003244:	330d      	adds	r3, #13
 8003246:	781b      	ldrb	r3, [r3, #0]
 8003248:	b2db      	uxtb	r3, r3
 800324a:	2b01      	cmp	r3, #1
 800324c:	d125      	bne.n	800329a <HW_TS_RTC_Wakeup_Handler+0xf6>
      {
        UnlinkTimer(local_current_running_timer_id, SSR_Read_Not_Requested);
 800324e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003252:	2101      	movs	r1, #1
 8003254:	4618      	mov	r0, r3
 8003256:	f7ff fde5 	bl	8002e24 <UnlinkTimer>
 800325a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800325c:	613b      	str	r3, [r7, #16]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800325e:	693b      	ldr	r3, [r7, #16]
 8003260:	f383 8810 	msr	PRIMASK, r3
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Start(local_current_running_timer_id, aTimerContext[local_current_running_timer_id].CounterInit);
 8003264:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8003268:	4933      	ldr	r1, [pc, #204]	; (8003338 <HW_TS_RTC_Wakeup_Handler+0x194>)
 800326a:	4613      	mov	r3, r2
 800326c:	005b      	lsls	r3, r3, #1
 800326e:	4413      	add	r3, r2
 8003270:	00db      	lsls	r3, r3, #3
 8003272:	440b      	add	r3, r1
 8003274:	3304      	adds	r3, #4
 8003276:	681a      	ldr	r2, [r3, #0]
 8003278:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800327c:	4611      	mov	r1, r2
 800327e:	4618      	mov	r0, r3
 8003280:	f000 fa46 	bl	8003710 <HW_TS_Start>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8003284:	4b2a      	ldr	r3, [pc, #168]	; (8003330 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	22ca      	movs	r2, #202	; 0xca
 800328c:	625a      	str	r2, [r3, #36]	; 0x24
 800328e:	4b28      	ldr	r3, [pc, #160]	; (8003330 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	2253      	movs	r2, #83	; 0x53
 8003296:	625a      	str	r2, [r3, #36]	; 0x24
 8003298:	e013      	b.n	80032c2 <HW_TS_RTC_Wakeup_Handler+0x11e>
 800329a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800329c:	60fb      	str	r3, [r7, #12]
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	f383 8810 	msr	PRIMASK, r3
      else
      {
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Stop(local_current_running_timer_id);
 80032a4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80032a8:	4618      	mov	r0, r3
 80032aa:	f000 f9a7 	bl	80035fc <HW_TS_Stop>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 80032ae:	4b20      	ldr	r3, [pc, #128]	; (8003330 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	22ca      	movs	r2, #202	; 0xca
 80032b6:	625a      	str	r2, [r3, #36]	; 0x24
 80032b8:	4b1d      	ldr	r3, [pc, #116]	; (8003330 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	2253      	movs	r2, #83	; 0x53
 80032c0:	625a      	str	r2, [r3, #36]	; 0x24
        }

      HW_TS_RTC_Int_AppNot(timer_process_id, local_current_running_timer_id, ptimer_callback);
 80032c2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80032c6:	69fa      	ldr	r2, [r7, #28]
 80032c8:	4619      	mov	r1, r3
 80032ca:	69b8      	ldr	r0, [r7, #24]
 80032cc:	f000 faa6 	bl	800381c <HW_TS_RTC_Int_AppNot>
 80032d0:	e024      	b.n	800331c <HW_TS_RTC_Wakeup_Handler+0x178>
    }
    else
    {
      RescheduleTimerList();
 80032d2:	f7ff fec9 	bl	8003068 <RescheduleTimerList>
 80032d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032d8:	60bb      	str	r3, [r7, #8]
 80032da:	68bb      	ldr	r3, [r7, #8]
 80032dc:	f383 8810 	msr	PRIMASK, r3
 80032e0:	e01c      	b.n	800331c <HW_TS_RTC_Wakeup_Handler+0x178>
    /**
     * We should never end up in this case
     * However, if due to any bug in the timer server this is the case, the mistake may not impact the user.
     * We could just clean the interrupt flag and get out from this unexpected interrupt
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == RESET);
 80032e2:	bf00      	nop
 80032e4:	4b12      	ldr	r3, [pc, #72]	; (8003330 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	68db      	ldr	r3, [r3, #12]
 80032ec:	f003 0304 	and.w	r3, r3, #4
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d0f7      	beq.n	80032e4 <HW_TS_RTC_Wakeup_Handler+0x140>
     * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
     * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
     * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
     * due to the autoreload feature
     */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 80032f4:	4b0e      	ldr	r3, [pc, #56]	; (8003330 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	68db      	ldr	r3, [r3, #12]
 80032fc:	b2da      	uxtb	r2, r3
 80032fe:	4b0c      	ldr	r3, [pc, #48]	; (8003330 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8003308:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 800330a:	4b0d      	ldr	r3, [pc, #52]	; (8003340 <HW_TS_RTC_Wakeup_Handler+0x19c>)
 800330c:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8003310:	60da      	str	r2, [r3, #12]
 8003312:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003314:	607b      	str	r3, [r7, #4]
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	f383 8810 	msr	PRIMASK, r3
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 800331c:	4b04      	ldr	r3, [pc, #16]	; (8003330 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	22ff      	movs	r2, #255	; 0xff
 8003324:	625a      	str	r2, [r3, #36]	; 0x24

  return;
 8003326:	bf00      	nop
}
 8003328:	3728      	adds	r7, #40	; 0x28
 800332a:	46bd      	mov	sp, r7
 800332c:	bd80      	pop	{r7, pc}
 800332e:	bf00      	nop
 8003330:	200003e0 	.word	0x200003e0
 8003334:	20000358 	.word	0x20000358
 8003338:	200002c8 	.word	0x200002c8
 800333c:	20000360 	.word	0x20000360
 8003340:	58000800 	.word	0x58000800

08003344 <HW_TS_Init>:

void HW_TS_Init(HW_TS_InitMode_t TimerInitMode, RTC_HandleTypeDef *hrtc)
{
 8003344:	b580      	push	{r7, lr}
 8003346:	b088      	sub	sp, #32
 8003348:	af00      	add	r7, sp, #0
 800334a:	4603      	mov	r3, r0
 800334c:	6039      	str	r1, [r7, #0]
 800334e:	71fb      	strb	r3, [r7, #7]
  uint32_t localmaxwakeuptimersetup;

  /**
   * Get RTC handler
   */
  phrtc = hrtc;
 8003350:	4a64      	ldr	r2, [pc, #400]	; (80034e4 <HW_TS_Init+0x1a0>)
 8003352:	683b      	ldr	r3, [r7, #0]
 8003354:	6013      	str	r3, [r2, #0]

 /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8003356:	4b63      	ldr	r3, [pc, #396]	; (80034e4 <HW_TS_Init+0x1a0>)
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	22ca      	movs	r2, #202	; 0xca
 800335e:	625a      	str	r2, [r3, #36]	; 0x24
 8003360:	4b60      	ldr	r3, [pc, #384]	; (80034e4 <HW_TS_Init+0x1a0>)
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	2253      	movs	r2, #83	; 0x53
 8003368:	625a      	str	r2, [r3, #36]	; 0x24

  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800336a:	4b5f      	ldr	r3, [pc, #380]	; (80034e8 <HW_TS_Init+0x1a4>)
 800336c:	689b      	ldr	r3, [r3, #8]
 800336e:	4a5e      	ldr	r2, [pc, #376]	; (80034e8 <HW_TS_Init+0x1a4>)
 8003370:	f043 0320 	orr.w	r3, r3, #32
 8003374:	6093      	str	r3, [r2, #8]

  /**
   * Readout the user config
   */
  WakeupTimerDivider = (4 - ((uint32_t)(READ_BIT(RTC->CR, RTC_CR_WUCKSEL))));
 8003376:	4b5c      	ldr	r3, [pc, #368]	; (80034e8 <HW_TS_Init+0x1a4>)
 8003378:	689b      	ldr	r3, [r3, #8]
 800337a:	b2db      	uxtb	r3, r3
 800337c:	f003 0307 	and.w	r3, r3, #7
 8003380:	b2db      	uxtb	r3, r3
 8003382:	f1c3 0304 	rsb	r3, r3, #4
 8003386:	b2da      	uxtb	r2, r3
 8003388:	4b58      	ldr	r3, [pc, #352]	; (80034ec <HW_TS_Init+0x1a8>)
 800338a:	701a      	strb	r2, [r3, #0]

  AsynchPrescalerUserConfig = (uint8_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_A) >> (uint32_t)POSITION_VAL(RTC_PRER_PREDIV_A)) + 1;
 800338c:	4b56      	ldr	r3, [pc, #344]	; (80034e8 <HW_TS_Init+0x1a4>)
 800338e:	691b      	ldr	r3, [r3, #16]
 8003390:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003394:	f44f 02fe 	mov.w	r2, #8323072	; 0x7f0000
 8003398:	613a      	str	r2, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800339a:	693a      	ldr	r2, [r7, #16]
 800339c:	fa92 f2a2 	rbit	r2, r2
 80033a0:	60fa      	str	r2, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80033a2:	68fa      	ldr	r2, [r7, #12]
 80033a4:	617a      	str	r2, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80033a6:	697a      	ldr	r2, [r7, #20]
 80033a8:	2a00      	cmp	r2, #0
 80033aa:	d101      	bne.n	80033b0 <HW_TS_Init+0x6c>
  {
    return 32U;
 80033ac:	2220      	movs	r2, #32
 80033ae:	e003      	b.n	80033b8 <HW_TS_Init+0x74>
  }
  return __builtin_clz(value);
 80033b0:	697a      	ldr	r2, [r7, #20]
 80033b2:	fab2 f282 	clz	r2, r2
 80033b6:	b2d2      	uxtb	r2, r2
 80033b8:	40d3      	lsrs	r3, r2
 80033ba:	b2db      	uxtb	r3, r3
 80033bc:	3301      	adds	r3, #1
 80033be:	b2da      	uxtb	r2, r3
 80033c0:	4b4b      	ldr	r3, [pc, #300]	; (80034f0 <HW_TS_Init+0x1ac>)
 80033c2:	701a      	strb	r2, [r3, #0]

  SynchPrescalerUserConfig = (uint16_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_S)) + 1;
 80033c4:	4b48      	ldr	r3, [pc, #288]	; (80034e8 <HW_TS_Init+0x1a4>)
 80033c6:	691b      	ldr	r3, [r3, #16]
 80033c8:	b29b      	uxth	r3, r3
 80033ca:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80033ce:	b29b      	uxth	r3, r3
 80033d0:	3301      	adds	r3, #1
 80033d2:	b29a      	uxth	r2, r3
 80033d4:	4b47      	ldr	r3, [pc, #284]	; (80034f4 <HW_TS_Init+0x1b0>)
 80033d6:	801a      	strh	r2, [r3, #0]

  /**
   *  Margin is taken to avoid wrong calculation when the wrap around is there and some
   *  application interrupts may have delayed the reading
   */
  localmaxwakeuptimersetup = ((((SynchPrescalerUserConfig - 1)*AsynchPrescalerUserConfig) - CFG_HW_TS_RTC_HANDLER_MAX_DELAY) >> WakeupTimerDivider);
 80033d8:	4b46      	ldr	r3, [pc, #280]	; (80034f4 <HW_TS_Init+0x1b0>)
 80033da:	881b      	ldrh	r3, [r3, #0]
 80033dc:	3b01      	subs	r3, #1
 80033de:	4a44      	ldr	r2, [pc, #272]	; (80034f0 <HW_TS_Init+0x1ac>)
 80033e0:	7812      	ldrb	r2, [r2, #0]
 80033e2:	fb02 f303 	mul.w	r3, r2, r3
 80033e6:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80033ea:	4a40      	ldr	r2, [pc, #256]	; (80034ec <HW_TS_Init+0x1a8>)
 80033ec:	7812      	ldrb	r2, [r2, #0]
 80033ee:	40d3      	lsrs	r3, r2
 80033f0:	61bb      	str	r3, [r7, #24]

  if(localmaxwakeuptimersetup >= 0xFFFF)
 80033f2:	69bb      	ldr	r3, [r7, #24]
 80033f4:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80033f8:	4293      	cmp	r3, r2
 80033fa:	d904      	bls.n	8003406 <HW_TS_Init+0xc2>
  {
    MaxWakeupTimerSetup = 0xFFFF;
 80033fc:	4b3e      	ldr	r3, [pc, #248]	; (80034f8 <HW_TS_Init+0x1b4>)
 80033fe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003402:	801a      	strh	r2, [r3, #0]
 8003404:	e003      	b.n	800340e <HW_TS_Init+0xca>
  }
  else
  {
    MaxWakeupTimerSetup = (uint16_t)localmaxwakeuptimersetup;
 8003406:	69bb      	ldr	r3, [r7, #24]
 8003408:	b29a      	uxth	r2, r3
 800340a:	4b3b      	ldr	r3, [pc, #236]	; (80034f8 <HW_TS_Init+0x1b4>)
 800340c:	801a      	strh	r2, [r3, #0]
  }

  /**
   * Configure EXTI module
   */
  LL_EXTI_EnableRisingTrig_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 800340e:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8003412:	f7ff fb85 	bl	8002b20 <LL_EXTI_EnableRisingTrig_0_31>
  LL_EXTI_EnableIT_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 8003416:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800341a:	f7ff fb6d 	bl	8002af8 <LL_EXTI_EnableIT_0_31>

  if(TimerInitMode == hw_ts_InitMode_Full)
 800341e:	79fb      	ldrb	r3, [r7, #7]
 8003420:	2b00      	cmp	r3, #0
 8003422:	d143      	bne.n	80034ac <HW_TS_Init+0x168>
  {
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8003424:	4b35      	ldr	r3, [pc, #212]	; (80034fc <HW_TS_Init+0x1b8>)
 8003426:	2201      	movs	r2, #1
 8003428:	701a      	strb	r2, [r3, #0]
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 800342a:	4b35      	ldr	r3, [pc, #212]	; (8003500 <HW_TS_Init+0x1bc>)
 800342c:	f04f 32ff 	mov.w	r2, #4294967295
 8003430:	601a      	str	r2, [r3, #0]

    /**
     * Initialize the timer server
     */
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 8003432:	2300      	movs	r3, #0
 8003434:	77fb      	strb	r3, [r7, #31]
 8003436:	e00c      	b.n	8003452 <HW_TS_Init+0x10e>
    {
      aTimerContext[loop].TimerIDStatus = TimerID_Free;
 8003438:	7ffa      	ldrb	r2, [r7, #31]
 800343a:	4932      	ldr	r1, [pc, #200]	; (8003504 <HW_TS_Init+0x1c0>)
 800343c:	4613      	mov	r3, r2
 800343e:	005b      	lsls	r3, r3, #1
 8003440:	4413      	add	r3, r2
 8003442:	00db      	lsls	r3, r3, #3
 8003444:	440b      	add	r3, r1
 8003446:	330c      	adds	r3, #12
 8003448:	2200      	movs	r2, #0
 800344a:	701a      	strb	r2, [r3, #0]
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 800344c:	7ffb      	ldrb	r3, [r7, #31]
 800344e:	3301      	adds	r3, #1
 8003450:	77fb      	strb	r3, [r7, #31]
 8003452:	7ffb      	ldrb	r3, [r7, #31]
 8003454:	2b05      	cmp	r3, #5
 8003456:	d9ef      	bls.n	8003438 <HW_TS_Init+0xf4>
    }

    CurrentRunningTimerID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;   /**<  Set ID to non valid value */
 8003458:	4b2b      	ldr	r3, [pc, #172]	; (8003508 <HW_TS_Init+0x1c4>)
 800345a:	2206      	movs	r2, #6
 800345c:	701a      	strb	r2, [r3, #0]

    __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);                       /**<  Disable the Wakeup Timer */
 800345e:	4b21      	ldr	r3, [pc, #132]	; (80034e4 <HW_TS_Init+0x1a0>)
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	689a      	ldr	r2, [r3, #8]
 8003466:	4b1f      	ldr	r3, [pc, #124]	; (80034e4 <HW_TS_Init+0x1a0>)
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003470:	609a      	str	r2, [r3, #8]
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);     /**<  Clear flag in RTC module */
 8003472:	4b1c      	ldr	r3, [pc, #112]	; (80034e4 <HW_TS_Init+0x1a0>)
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	68db      	ldr	r3, [r3, #12]
 800347a:	b2da      	uxtb	r2, r3
 800347c:	4b19      	ldr	r3, [pc, #100]	; (80034e4 <HW_TS_Init+0x1a0>)
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8003486:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module  */
 8003488:	4b20      	ldr	r3, [pc, #128]	; (800350c <HW_TS_Init+0x1c8>)
 800348a:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800348e:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);       /**<  Clear pending bit in NVIC  */
 8003490:	2003      	movs	r0, #3
 8003492:	f002 fd33 	bl	8005efc <HAL_NVIC_ClearPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE_IT(phrtc, RTC_IT_WUT);         /**<  Enable interrupt in RTC module  */
 8003496:	4b13      	ldr	r3, [pc, #76]	; (80034e4 <HW_TS_Init+0x1a0>)
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	689a      	ldr	r2, [r3, #8]
 800349e:	4b11      	ldr	r3, [pc, #68]	; (80034e4 <HW_TS_Init+0x1a0>)
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80034a8:	609a      	str	r2, [r3, #8]
 80034aa:	e00a      	b.n	80034c2 <HW_TS_Init+0x17e>
  }
  else
  {
    if(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTF) != RESET)
 80034ac:	4b0d      	ldr	r3, [pc, #52]	; (80034e4 <HW_TS_Init+0x1a0>)
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	68db      	ldr	r3, [r3, #12]
 80034b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d002      	beq.n	80034c2 <HW_TS_Init+0x17e>
    {
      /**
       * Simulate that the Timer expired
       */
      HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 80034bc:	2003      	movs	r0, #3
 80034be:	f002 fd0f 	bl	8005ee0 <HAL_NVIC_SetPendingIRQ>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 80034c2:	4b08      	ldr	r3, [pc, #32]	; (80034e4 <HW_TS_Init+0x1a0>)
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	22ff      	movs	r2, #255	; 0xff
 80034ca:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_SetPriority(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_PREEMPTPRIO, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_SUBPRIO);   /**<  Set NVIC priority */
 80034cc:	2200      	movs	r2, #0
 80034ce:	2106      	movs	r1, #6
 80034d0:	2003      	movs	r0, #3
 80034d2:	f002 fccf 	bl	8005e74 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 80034d6:	2003      	movs	r0, #3
 80034d8:	f002 fce6 	bl	8005ea8 <HAL_NVIC_EnableIRQ>

  return;
 80034dc:	bf00      	nop
}
 80034de:	3720      	adds	r7, #32
 80034e0:	46bd      	mov	sp, r7
 80034e2:	bd80      	pop	{r7, pc}
 80034e4:	200003e0 	.word	0x200003e0
 80034e8:	40002800 	.word	0x40002800
 80034ec:	200003e4 	.word	0x200003e4
 80034f0:	200003e5 	.word	0x200003e5
 80034f4:	200003e6 	.word	0x200003e6
 80034f8:	200003e8 	.word	0x200003e8
 80034fc:	20000360 	.word	0x20000360
 8003500:	2000035c 	.word	0x2000035c
 8003504:	200002c8 	.word	0x200002c8
 8003508:	20000358 	.word	0x20000358
 800350c:	58000800 	.word	0x58000800

08003510 <HW_TS_Create>:

HW_TS_ReturnStatus_t HW_TS_Create(uint32_t TimerProcessID, uint8_t *pTimerId, HW_TS_Mode_t TimerMode, HW_TS_pTimerCb_t pftimeout_handler)
{
 8003510:	b480      	push	{r7}
 8003512:	b08b      	sub	sp, #44	; 0x2c
 8003514:	af00      	add	r7, sp, #0
 8003516:	60f8      	str	r0, [r7, #12]
 8003518:	60b9      	str	r1, [r7, #8]
 800351a:	603b      	str	r3, [r7, #0]
 800351c:	4613      	mov	r3, r2
 800351e:	71fb      	strb	r3, [r7, #7]
  HW_TS_ReturnStatus_t localreturnstatus;
  uint8_t loop = 0;
 8003520:	2300      	movs	r3, #0
 8003522:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003526:	f3ef 8310 	mrs	r3, PRIMASK
 800352a:	61fb      	str	r3, [r7, #28]
  return(result);
 800352c:	69fb      	ldr	r3, [r7, #28]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800352e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 8003530:	b672      	cpsid	i
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  while((loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[loop].TimerIDStatus != TimerID_Free))
 8003532:	e004      	b.n	800353e <HW_TS_Create+0x2e>
  {
    loop++;
 8003534:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8003538:	3301      	adds	r3, #1
 800353a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  while((loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[loop].TimerIDStatus != TimerID_Free))
 800353e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8003542:	2b05      	cmp	r3, #5
 8003544:	d80c      	bhi.n	8003560 <HW_TS_Create+0x50>
 8003546:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800354a:	492b      	ldr	r1, [pc, #172]	; (80035f8 <HW_TS_Create+0xe8>)
 800354c:	4613      	mov	r3, r2
 800354e:	005b      	lsls	r3, r3, #1
 8003550:	4413      	add	r3, r2
 8003552:	00db      	lsls	r3, r3, #3
 8003554:	440b      	add	r3, r1
 8003556:	330c      	adds	r3, #12
 8003558:	781b      	ldrb	r3, [r3, #0]
 800355a:	b2db      	uxtb	r3, r3
 800355c:	2b00      	cmp	r3, #0
 800355e:	d1e9      	bne.n	8003534 <HW_TS_Create+0x24>
  }

  if(loop != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8003560:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8003564:	2b06      	cmp	r3, #6
 8003566:	d037      	beq.n	80035d8 <HW_TS_Create+0xc8>
  {
    aTimerContext[loop].TimerIDStatus = TimerID_Created;
 8003568:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800356c:	4922      	ldr	r1, [pc, #136]	; (80035f8 <HW_TS_Create+0xe8>)
 800356e:	4613      	mov	r3, r2
 8003570:	005b      	lsls	r3, r3, #1
 8003572:	4413      	add	r3, r2
 8003574:	00db      	lsls	r3, r3, #3
 8003576:	440b      	add	r3, r1
 8003578:	330c      	adds	r3, #12
 800357a:	2201      	movs	r2, #1
 800357c:	701a      	strb	r2, [r3, #0]
 800357e:	6a3b      	ldr	r3, [r7, #32]
 8003580:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003582:	69bb      	ldr	r3, [r7, #24]
 8003584:	f383 8810 	msr	PRIMASK, r3

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

    aTimerContext[loop].TimerProcessID = TimerProcessID;
 8003588:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800358c:	491a      	ldr	r1, [pc, #104]	; (80035f8 <HW_TS_Create+0xe8>)
 800358e:	4613      	mov	r3, r2
 8003590:	005b      	lsls	r3, r3, #1
 8003592:	4413      	add	r3, r2
 8003594:	00db      	lsls	r3, r3, #3
 8003596:	440b      	add	r3, r1
 8003598:	3310      	adds	r3, #16
 800359a:	68fa      	ldr	r2, [r7, #12]
 800359c:	601a      	str	r2, [r3, #0]
    aTimerContext[loop].TimerMode = TimerMode;
 800359e:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80035a2:	4915      	ldr	r1, [pc, #84]	; (80035f8 <HW_TS_Create+0xe8>)
 80035a4:	4613      	mov	r3, r2
 80035a6:	005b      	lsls	r3, r3, #1
 80035a8:	4413      	add	r3, r2
 80035aa:	00db      	lsls	r3, r3, #3
 80035ac:	440b      	add	r3, r1
 80035ae:	330d      	adds	r3, #13
 80035b0:	79fa      	ldrb	r2, [r7, #7]
 80035b2:	701a      	strb	r2, [r3, #0]
    aTimerContext[loop].pTimerCallBack = pftimeout_handler;
 80035b4:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80035b8:	490f      	ldr	r1, [pc, #60]	; (80035f8 <HW_TS_Create+0xe8>)
 80035ba:	4613      	mov	r3, r2
 80035bc:	005b      	lsls	r3, r3, #1
 80035be:	4413      	add	r3, r2
 80035c0:	00db      	lsls	r3, r3, #3
 80035c2:	440b      	add	r3, r1
 80035c4:	683a      	ldr	r2, [r7, #0]
 80035c6:	601a      	str	r2, [r3, #0]
    *pTimerId = loop;
 80035c8:	68bb      	ldr	r3, [r7, #8]
 80035ca:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80035ce:	701a      	strb	r2, [r3, #0]

    localreturnstatus = hw_ts_Successful;
 80035d0:	2300      	movs	r3, #0
 80035d2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80035d6:	e007      	b.n	80035e8 <HW_TS_Create+0xd8>
 80035d8:	6a3b      	ldr	r3, [r7, #32]
 80035da:	617b      	str	r3, [r7, #20]
 80035dc:	697b      	ldr	r3, [r7, #20]
 80035de:	f383 8810 	msr	PRIMASK, r3
  {
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

    localreturnstatus = hw_ts_Failed;
 80035e2:	2301      	movs	r3, #1
 80035e4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  return(localreturnstatus);
 80035e8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80035ec:	4618      	mov	r0, r3
 80035ee:	372c      	adds	r7, #44	; 0x2c
 80035f0:	46bd      	mov	sp, r7
 80035f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f6:	4770      	bx	lr
 80035f8:	200002c8 	.word	0x200002c8

080035fc <HW_TS_Stop>:

  return;
}

void HW_TS_Stop(uint8_t timer_id)
{
 80035fc:	b580      	push	{r7, lr}
 80035fe:	b086      	sub	sp, #24
 8003600:	af00      	add	r7, sp, #0
 8003602:	4603      	mov	r3, r0
 8003604:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003606:	f3ef 8310 	mrs	r3, PRIMASK
 800360a:	60fb      	str	r3, [r7, #12]
  return(result);
 800360c:	68fb      	ldr	r3, [r7, #12]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800360e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8003610:	b672      	cpsid	i
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 8003612:	2003      	movs	r0, #3
 8003614:	f002 fc56 	bl	8005ec4 <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8003618:	4b37      	ldr	r3, [pc, #220]	; (80036f8 <HW_TS_Stop+0xfc>)
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	22ca      	movs	r2, #202	; 0xca
 8003620:	625a      	str	r2, [r3, #36]	; 0x24
 8003622:	4b35      	ldr	r3, [pc, #212]	; (80036f8 <HW_TS_Stop+0xfc>)
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	2253      	movs	r2, #83	; 0x53
 800362a:	625a      	str	r2, [r3, #36]	; 0x24

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 800362c:	79fa      	ldrb	r2, [r7, #7]
 800362e:	4933      	ldr	r1, [pc, #204]	; (80036fc <HW_TS_Stop+0x100>)
 8003630:	4613      	mov	r3, r2
 8003632:	005b      	lsls	r3, r3, #1
 8003634:	4413      	add	r3, r2
 8003636:	00db      	lsls	r3, r3, #3
 8003638:	440b      	add	r3, r1
 800363a:	330c      	adds	r3, #12
 800363c:	781b      	ldrb	r3, [r3, #0]
 800363e:	b2db      	uxtb	r3, r3
 8003640:	2b02      	cmp	r3, #2
 8003642:	d148      	bne.n	80036d6 <HW_TS_Stop+0xda>
  {
    UnlinkTimer(timer_id, SSR_Read_Requested);
 8003644:	79fb      	ldrb	r3, [r7, #7]
 8003646:	2100      	movs	r1, #0
 8003648:	4618      	mov	r0, r3
 800364a:	f7ff fbeb 	bl	8002e24 <UnlinkTimer>
    localcurrentrunningtimerid = CurrentRunningTimerID;
 800364e:	4b2c      	ldr	r3, [pc, #176]	; (8003700 <HW_TS_Stop+0x104>)
 8003650:	781b      	ldrb	r3, [r3, #0]
 8003652:	74fb      	strb	r3, [r7, #19]

    if(localcurrentrunningtimerid == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8003654:	7cfb      	ldrb	r3, [r7, #19]
 8003656:	2b06      	cmp	r3, #6
 8003658:	d135      	bne.n	80036c6 <HW_TS_Stop+0xca>
       */

      /**
       * Disable the timer
       */
      if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 800365a:	4b2a      	ldr	r3, [pc, #168]	; (8003704 <HW_TS_Stop+0x108>)
 800365c:	689b      	ldr	r3, [r3, #8]
 800365e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003662:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003666:	d108      	bne.n	800367a <HW_TS_Stop+0x7e>
      {
        /**
         * Wait for the flag to be back to 0 when the wakeup timer is enabled
         */
        while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == SET);
 8003668:	bf00      	nop
 800366a:	4b23      	ldr	r3, [pc, #140]	; (80036f8 <HW_TS_Stop+0xfc>)
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	68db      	ldr	r3, [r3, #12]
 8003672:	f003 0304 	and.w	r3, r3, #4
 8003676:	2b00      	cmp	r3, #0
 8003678:	d1f7      	bne.n	800366a <HW_TS_Stop+0x6e>
      }
      __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);   /**<  Disable the Wakeup Timer */
 800367a:	4b1f      	ldr	r3, [pc, #124]	; (80036f8 <HW_TS_Stop+0xfc>)
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	689a      	ldr	r2, [r3, #8]
 8003682:	4b1d      	ldr	r3, [pc, #116]	; (80036f8 <HW_TS_Stop+0xfc>)
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800368c:	609a      	str	r2, [r3, #8]

      while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == RESET);
 800368e:	bf00      	nop
 8003690:	4b19      	ldr	r3, [pc, #100]	; (80036f8 <HW_TS_Stop+0xfc>)
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	68db      	ldr	r3, [r3, #12]
 8003698:	f003 0304 	and.w	r3, r3, #4
 800369c:	2b00      	cmp	r3, #0
 800369e:	d0f7      	beq.n	8003690 <HW_TS_Stop+0x94>
       * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
       * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
       * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
       * due to the autoreload feature
       */
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 80036a0:	4b15      	ldr	r3, [pc, #84]	; (80036f8 <HW_TS_Stop+0xfc>)
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	68db      	ldr	r3, [r3, #12]
 80036a8:	b2da      	uxtb	r2, r3
 80036aa:	4b13      	ldr	r3, [pc, #76]	; (80036f8 <HW_TS_Stop+0xfc>)
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	f462 6290 	orn	r2, r2, #1152	; 0x480
 80036b4:	60da      	str	r2, [r3, #12]
      __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 80036b6:	4b14      	ldr	r3, [pc, #80]	; (8003708 <HW_TS_Stop+0x10c>)
 80036b8:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80036bc:	60da      	str	r2, [r3, #12]
      HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 80036be:	2003      	movs	r0, #3
 80036c0:	f002 fc1c 	bl	8005efc <HAL_NVIC_ClearPendingIRQ>
 80036c4:	e007      	b.n	80036d6 <HW_TS_Stop+0xda>
    }
    else if(PreviousRunningTimerID != localcurrentrunningtimerid)
 80036c6:	4b11      	ldr	r3, [pc, #68]	; (800370c <HW_TS_Stop+0x110>)
 80036c8:	781b      	ldrb	r3, [r3, #0]
 80036ca:	b2db      	uxtb	r3, r3
 80036cc:	7cfa      	ldrb	r2, [r7, #19]
 80036ce:	429a      	cmp	r2, r3
 80036d0:	d001      	beq.n	80036d6 <HW_TS_Stop+0xda>
    {
      RescheduleTimerList();
 80036d2:	f7ff fcc9 	bl	8003068 <RescheduleTimerList>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 80036d6:	4b08      	ldr	r3, [pc, #32]	; (80036f8 <HW_TS_Stop+0xfc>)
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	22ff      	movs	r2, #255	; 0xff
 80036de:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 80036e0:	2003      	movs	r0, #3
 80036e2:	f002 fbe1 	bl	8005ea8 <HAL_NVIC_EnableIRQ>
 80036e6:	697b      	ldr	r3, [r7, #20]
 80036e8:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80036ea:	68bb      	ldr	r3, [r7, #8]
 80036ec:	f383 8810 	msr	PRIMASK, r3

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 80036f0:	bf00      	nop
}
 80036f2:	3718      	adds	r7, #24
 80036f4:	46bd      	mov	sp, r7
 80036f6:	bd80      	pop	{r7, pc}
 80036f8:	200003e0 	.word	0x200003e0
 80036fc:	200002c8 	.word	0x200002c8
 8003700:	20000358 	.word	0x20000358
 8003704:	40002800 	.word	0x40002800
 8003708:	58000800 	.word	0x58000800
 800370c:	20000359 	.word	0x20000359

08003710 <HW_TS_Start>:

void HW_TS_Start(uint8_t timer_id, uint32_t timeout_ticks)
{
 8003710:	b580      	push	{r7, lr}
 8003712:	b086      	sub	sp, #24
 8003714:	af00      	add	r7, sp, #0
 8003716:	4603      	mov	r3, r0
 8003718:	6039      	str	r1, [r7, #0]
 800371a:	71fb      	strb	r3, [r7, #7]

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 800371c:	79fa      	ldrb	r2, [r7, #7]
 800371e:	493b      	ldr	r1, [pc, #236]	; (800380c <HW_TS_Start+0xfc>)
 8003720:	4613      	mov	r3, r2
 8003722:	005b      	lsls	r3, r3, #1
 8003724:	4413      	add	r3, r2
 8003726:	00db      	lsls	r3, r3, #3
 8003728:	440b      	add	r3, r1
 800372a:	330c      	adds	r3, #12
 800372c:	781b      	ldrb	r3, [r3, #0]
 800372e:	b2db      	uxtb	r3, r3
 8003730:	2b02      	cmp	r3, #2
 8003732:	d103      	bne.n	800373c <HW_TS_Start+0x2c>
  {
    HW_TS_Stop( timer_id );
 8003734:	79fb      	ldrb	r3, [r7, #7]
 8003736:	4618      	mov	r0, r3
 8003738:	f7ff ff60 	bl	80035fc <HW_TS_Stop>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800373c:	f3ef 8310 	mrs	r3, PRIMASK
 8003740:	60fb      	str	r3, [r7, #12]
  return(result);
 8003742:	68fb      	ldr	r3, [r7, #12]
  }

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8003744:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8003746:	b672      	cpsid	i
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 8003748:	2003      	movs	r0, #3
 800374a:	f002 fbbb 	bl	8005ec4 <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 800374e:	4b30      	ldr	r3, [pc, #192]	; (8003810 <HW_TS_Start+0x100>)
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	22ca      	movs	r2, #202	; 0xca
 8003756:	625a      	str	r2, [r3, #36]	; 0x24
 8003758:	4b2d      	ldr	r3, [pc, #180]	; (8003810 <HW_TS_Start+0x100>)
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	2253      	movs	r2, #83	; 0x53
 8003760:	625a      	str	r2, [r3, #36]	; 0x24

  aTimerContext[timer_id].TimerIDStatus = TimerID_Running;
 8003762:	79fa      	ldrb	r2, [r7, #7]
 8003764:	4929      	ldr	r1, [pc, #164]	; (800380c <HW_TS_Start+0xfc>)
 8003766:	4613      	mov	r3, r2
 8003768:	005b      	lsls	r3, r3, #1
 800376a:	4413      	add	r3, r2
 800376c:	00db      	lsls	r3, r3, #3
 800376e:	440b      	add	r3, r1
 8003770:	330c      	adds	r3, #12
 8003772:	2202      	movs	r2, #2
 8003774:	701a      	strb	r2, [r3, #0]

  aTimerContext[timer_id].CountLeft = timeout_ticks;
 8003776:	79fa      	ldrb	r2, [r7, #7]
 8003778:	4924      	ldr	r1, [pc, #144]	; (800380c <HW_TS_Start+0xfc>)
 800377a:	4613      	mov	r3, r2
 800377c:	005b      	lsls	r3, r3, #1
 800377e:	4413      	add	r3, r2
 8003780:	00db      	lsls	r3, r3, #3
 8003782:	440b      	add	r3, r1
 8003784:	3308      	adds	r3, #8
 8003786:	683a      	ldr	r2, [r7, #0]
 8003788:	601a      	str	r2, [r3, #0]
  aTimerContext[timer_id].CounterInit = timeout_ticks;
 800378a:	79fa      	ldrb	r2, [r7, #7]
 800378c:	491f      	ldr	r1, [pc, #124]	; (800380c <HW_TS_Start+0xfc>)
 800378e:	4613      	mov	r3, r2
 8003790:	005b      	lsls	r3, r3, #1
 8003792:	4413      	add	r3, r2
 8003794:	00db      	lsls	r3, r3, #3
 8003796:	440b      	add	r3, r1
 8003798:	3304      	adds	r3, #4
 800379a:	683a      	ldr	r2, [r7, #0]
 800379c:	601a      	str	r2, [r3, #0]

  time_elapsed =  linkTimer(timer_id);
 800379e:	79fb      	ldrb	r3, [r7, #7]
 80037a0:	4618      	mov	r0, r3
 80037a2:	f7ff fa95 	bl	8002cd0 <linkTimer>
 80037a6:	4603      	mov	r3, r0
 80037a8:	827b      	strh	r3, [r7, #18]

  localcurrentrunningtimerid = CurrentRunningTimerID;
 80037aa:	4b1a      	ldr	r3, [pc, #104]	; (8003814 <HW_TS_Start+0x104>)
 80037ac:	781b      	ldrb	r3, [r3, #0]
 80037ae:	747b      	strb	r3, [r7, #17]

  if(PreviousRunningTimerID != localcurrentrunningtimerid)
 80037b0:	4b19      	ldr	r3, [pc, #100]	; (8003818 <HW_TS_Start+0x108>)
 80037b2:	781b      	ldrb	r3, [r3, #0]
 80037b4:	b2db      	uxtb	r3, r3
 80037b6:	7c7a      	ldrb	r2, [r7, #17]
 80037b8:	429a      	cmp	r2, r3
 80037ba:	d002      	beq.n	80037c2 <HW_TS_Start+0xb2>
  {
    RescheduleTimerList();
 80037bc:	f7ff fc54 	bl	8003068 <RescheduleTimerList>
 80037c0:	e013      	b.n	80037ea <HW_TS_Start+0xda>
  }
  else
  {
    aTimerContext[timer_id].CountLeft -= time_elapsed;
 80037c2:	79fa      	ldrb	r2, [r7, #7]
 80037c4:	4911      	ldr	r1, [pc, #68]	; (800380c <HW_TS_Start+0xfc>)
 80037c6:	4613      	mov	r3, r2
 80037c8:	005b      	lsls	r3, r3, #1
 80037ca:	4413      	add	r3, r2
 80037cc:	00db      	lsls	r3, r3, #3
 80037ce:	440b      	add	r3, r1
 80037d0:	3308      	adds	r3, #8
 80037d2:	6819      	ldr	r1, [r3, #0]
 80037d4:	8a7b      	ldrh	r3, [r7, #18]
 80037d6:	79fa      	ldrb	r2, [r7, #7]
 80037d8:	1ac9      	subs	r1, r1, r3
 80037da:	480c      	ldr	r0, [pc, #48]	; (800380c <HW_TS_Start+0xfc>)
 80037dc:	4613      	mov	r3, r2
 80037de:	005b      	lsls	r3, r3, #1
 80037e0:	4413      	add	r3, r2
 80037e2:	00db      	lsls	r3, r3, #3
 80037e4:	4403      	add	r3, r0
 80037e6:	3308      	adds	r3, #8
 80037e8:	6019      	str	r1, [r3, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 80037ea:	4b09      	ldr	r3, [pc, #36]	; (8003810 <HW_TS_Start+0x100>)
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	22ff      	movs	r2, #255	; 0xff
 80037f2:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 80037f4:	2003      	movs	r0, #3
 80037f6:	f002 fb57 	bl	8005ea8 <HAL_NVIC_EnableIRQ>
 80037fa:	697b      	ldr	r3, [r7, #20]
 80037fc:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80037fe:	68bb      	ldr	r3, [r7, #8]
 8003800:	f383 8810 	msr	PRIMASK, r3

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 8003804:	bf00      	nop
}
 8003806:	3718      	adds	r7, #24
 8003808:	46bd      	mov	sp, r7
 800380a:	bd80      	pop	{r7, pc}
 800380c:	200002c8 	.word	0x200002c8
 8003810:	200003e0 	.word	0x200003e0
 8003814:	20000358 	.word	0x20000358
 8003818:	20000359 	.word	0x20000359

0800381c <HW_TS_RTC_Int_AppNot>:

  return (return_value);
}

__weak void HW_TS_RTC_Int_AppNot(uint32_t TimerProcessID, uint8_t TimerID, HW_TS_pTimerCb_t pTimerCallBack)
{
 800381c:	b580      	push	{r7, lr}
 800381e:	b084      	sub	sp, #16
 8003820:	af00      	add	r7, sp, #0
 8003822:	60f8      	str	r0, [r7, #12]
 8003824:	460b      	mov	r3, r1
 8003826:	607a      	str	r2, [r7, #4]
 8003828:	72fb      	strb	r3, [r7, #11]
  pTimerCallBack();
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	4798      	blx	r3

  return;
 800382e:	bf00      	nop
}
 8003830:	3710      	adds	r7, #16
 8003832:	46bd      	mov	sp, r7
 8003834:	bd80      	pop	{r7, pc}
	...

08003838 <HW_UART_Transmit_DMA>:

    return hw_status;
}

hw_status_t HW_UART_Transmit_DMA(hw_uart_id_t hw_uart_id, uint8_t *p_data, uint16_t size, void (*cb)(void))
{
 8003838:	b480      	push	{r7}
 800383a:	b087      	sub	sp, #28
 800383c:	af00      	add	r7, sp, #0
 800383e:	60b9      	str	r1, [r7, #8]
 8003840:	607b      	str	r3, [r7, #4]
 8003842:	4603      	mov	r3, r0
 8003844:	73fb      	strb	r3, [r7, #15]
 8003846:	4613      	mov	r3, r2
 8003848:	81bb      	strh	r3, [r7, #12]
    HAL_StatusTypeDef hal_status = HAL_OK;
 800384a:	2300      	movs	r3, #0
 800384c:	75bb      	strb	r3, [r7, #22]
    hw_status_t hw_status = hw_uart_ok;
 800384e:	2300      	movs	r3, #0
 8003850:	75fb      	strb	r3, [r7, #23]
            hal_status = HAL_UART_Transmit_DMA(&hlpuart1, p_data, size);
            break;
#endif

        default:
            break;
 8003852:	bf00      	nop
    }

    switch (hal_status)
 8003854:	7dbb      	ldrb	r3, [r7, #22]
 8003856:	2b03      	cmp	r3, #3
 8003858:	d816      	bhi.n	8003888 <HW_UART_Transmit_DMA+0x50>
 800385a:	a201      	add	r2, pc, #4	; (adr r2, 8003860 <HW_UART_Transmit_DMA+0x28>)
 800385c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003860:	08003871 	.word	0x08003871
 8003864:	08003877 	.word	0x08003877
 8003868:	0800387d 	.word	0x0800387d
 800386c:	08003883 	.word	0x08003883
    {
        case HAL_OK:
            hw_status = hw_uart_ok;
 8003870:	2300      	movs	r3, #0
 8003872:	75fb      	strb	r3, [r7, #23]
            break;
 8003874:	e009      	b.n	800388a <HW_UART_Transmit_DMA+0x52>

        case HAL_ERROR:
            hw_status = hw_uart_error;
 8003876:	2301      	movs	r3, #1
 8003878:	75fb      	strb	r3, [r7, #23]
            break;
 800387a:	e006      	b.n	800388a <HW_UART_Transmit_DMA+0x52>

        case HAL_BUSY:
            hw_status = hw_uart_busy;
 800387c:	2302      	movs	r3, #2
 800387e:	75fb      	strb	r3, [r7, #23]
            break;
 8003880:	e003      	b.n	800388a <HW_UART_Transmit_DMA+0x52>

        case HAL_TIMEOUT:
            hw_status = hw_uart_to;
 8003882:	2303      	movs	r3, #3
 8003884:	75fb      	strb	r3, [r7, #23]
            break;
 8003886:	e000      	b.n	800388a <HW_UART_Transmit_DMA+0x52>

        default:
            break;
 8003888:	bf00      	nop
    }

    return hw_status;
 800388a:	7dfb      	ldrb	r3, [r7, #23]
}
 800388c:	4618      	mov	r0, r3
 800388e:	371c      	adds	r7, #28
 8003890:	46bd      	mov	sp, r7
 8003892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003896:	4770      	bx	lr

08003898 <_angle_correction>:





int _angle_correction(int measured_angle){
 8003898:	b480      	push	{r7}
 800389a:	b089      	sub	sp, #36	; 0x24
 800389c:	af00      	add	r7, sp, #0
 800389e:	6078      	str	r0, [r7, #4]
  //given a measured angle, get back a warped angle interpolated from measured corrections
  int i=0;
 80038a0:	2300      	movs	r3, #0
 80038a2:	61fb      	str	r3, [r7, #28]
  while(measured_angle > MAP_ANGLE_MEASURED[i+1]) i++;
 80038a4:	e002      	b.n	80038ac <_angle_correction+0x14>
 80038a6:	69fb      	ldr	r3, [r7, #28]
 80038a8:	3301      	adds	r3, #1
 80038aa:	61fb      	str	r3, [r7, #28]
 80038ac:	69fb      	ldr	r3, [r7, #28]
 80038ae:	3301      	adds	r3, #1
 80038b0:	4a1f      	ldr	r2, [pc, #124]	; (8003930 <_angle_correction+0x98>)
 80038b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80038b6:	687a      	ldr	r2, [r7, #4]
 80038b8:	429a      	cmp	r2, r3
 80038ba:	dcf4      	bgt.n	80038a6 <_angle_correction+0xe>

  int low_m = MAP_ANGLE_MEASURED[i];
 80038bc:	4a1c      	ldr	r2, [pc, #112]	; (8003930 <_angle_correction+0x98>)
 80038be:	69fb      	ldr	r3, [r7, #28]
 80038c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80038c4:	61bb      	str	r3, [r7, #24]
  int high_m = MAP_ANGLE_MEASURED[i+1];
 80038c6:	69fb      	ldr	r3, [r7, #28]
 80038c8:	3301      	adds	r3, #1
 80038ca:	4a19      	ldr	r2, [pc, #100]	; (8003930 <_angle_correction+0x98>)
 80038cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80038d0:	617b      	str	r3, [r7, #20]
  int low_r = MAP_ANGLE_REAL[i];
 80038d2:	4a18      	ldr	r2, [pc, #96]	; (8003934 <_angle_correction+0x9c>)
 80038d4:	69fb      	ldr	r3, [r7, #28]
 80038d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80038da:	613b      	str	r3, [r7, #16]
  int high_r = MAP_ANGLE_REAL[i+1];
 80038dc:	69fb      	ldr	r3, [r7, #28]
 80038de:	3301      	adds	r3, #1
 80038e0:	4a14      	ldr	r2, [pc, #80]	; (8003934 <_angle_correction+0x9c>)
 80038e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80038e6:	60fb      	str	r3, [r7, #12]

  int scaled = (int)((high_r-low_r)*(measured_angle-low_m)/(float)(high_m-low_m));
 80038e8:	68fa      	ldr	r2, [r7, #12]
 80038ea:	693b      	ldr	r3, [r7, #16]
 80038ec:	1ad3      	subs	r3, r2, r3
 80038ee:	6879      	ldr	r1, [r7, #4]
 80038f0:	69ba      	ldr	r2, [r7, #24]
 80038f2:	1a8a      	subs	r2, r1, r2
 80038f4:	fb02 f303 	mul.w	r3, r2, r3
 80038f8:	ee07 3a90 	vmov	s15, r3
 80038fc:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8003900:	697a      	ldr	r2, [r7, #20]
 8003902:	69bb      	ldr	r3, [r7, #24]
 8003904:	1ad3      	subs	r3, r2, r3
 8003906:	ee07 3a90 	vmov	s15, r3
 800390a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800390e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003912:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003916:	ee17 3a90 	vmov	r3, s15
 800391a:	60bb      	str	r3, [r7, #8]
  return (low_r + scaled);
 800391c:	693a      	ldr	r2, [r7, #16]
 800391e:	68bb      	ldr	r3, [r7, #8]
 8003920:	4413      	add	r3, r2
}
 8003922:	4618      	mov	r0, r3
 8003924:	3724      	adds	r7, #36	; 0x24
 8003926:	46bd      	mov	sp, r7
 8003928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800392c:	4770      	bx	lr
 800392e:	bf00      	nop
 8003930:	08015e7c 	.word	0x08015e7c
 8003934:	08015e58 	.word	0x08015e58

08003938 <_get_pad_angle>:


int _get_pad_angle(int p1, int p2){
 8003938:	b590      	push	{r4, r7, lr}
 800393a:	b083      	sub	sp, #12
 800393c:	af00      	add	r7, sp, #0
 800393e:	6078      	str	r0, [r7, #4]
 8003940:	6039      	str	r1, [r7, #0]
    //return angle from 0 to 120 degrees between two pads given their two values
    if (p1 == 0) return 120;
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	2b00      	cmp	r3, #0
 8003946:	d101      	bne.n	800394c <_get_pad_angle+0x14>
 8003948:	2378      	movs	r3, #120	; 0x78
 800394a:	e02c      	b.n	80039a6 <_get_pad_angle+0x6e>
    if (p2 == 0) return 0;
 800394c:	683b      	ldr	r3, [r7, #0]
 800394e:	2b00      	cmp	r3, #0
 8003950:	d101      	bne.n	8003956 <_get_pad_angle+0x1e>
 8003952:	2300      	movs	r3, #0
 8003954:	e027      	b.n	80039a6 <_get_pad_angle+0x6e>
    return round(((float)(p2)/(float)(p1+p2))*120.0);
 8003956:	683b      	ldr	r3, [r7, #0]
 8003958:	ee07 3a90 	vmov	s15, r3
 800395c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003960:	687a      	ldr	r2, [r7, #4]
 8003962:	683b      	ldr	r3, [r7, #0]
 8003964:	4413      	add	r3, r2
 8003966:	ee07 3a90 	vmov	s15, r3
 800396a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800396e:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8003972:	ee16 0a90 	vmov	r0, s13
 8003976:	f7fc fdbf 	bl	80004f8 <__aeabi_f2d>
 800397a:	f04f 0200 	mov.w	r2, #0
 800397e:	4b0c      	ldr	r3, [pc, #48]	; (80039b0 <_get_pad_angle+0x78>)
 8003980:	f7fc fe12 	bl	80005a8 <__aeabi_dmul>
 8003984:	4603      	mov	r3, r0
 8003986:	460c      	mov	r4, r1
 8003988:	ec44 3b17 	vmov	d7, r3, r4
 800398c:	eeb0 0a47 	vmov.f32	s0, s14
 8003990:	eef0 0a67 	vmov.f32	s1, s15
 8003994:	f010 fe56 	bl	8014644 <round>
 8003998:	ec54 3b10 	vmov	r3, r4, d0
 800399c:	4618      	mov	r0, r3
 800399e:	4621      	mov	r1, r4
 80039a0:	f7fd f8b2 	bl	8000b08 <__aeabi_d2iz>
 80039a4:	4603      	mov	r3, r0
}
 80039a6:	4618      	mov	r0, r3
 80039a8:	370c      	adds	r7, #12
 80039aa:	46bd      	mov	sp, r7
 80039ac:	bd90      	pop	{r4, r7, pc}
 80039ae:	bf00      	nop
 80039b0:	405e0000 	.word	0x405e0000

080039b4 <_get_angle>:


int _get_angle(int* c) {
 80039b4:	b580      	push	{r7, lr}
 80039b6:	b08a      	sub	sp, #40	; 0x28
 80039b8:	af00      	add	r7, sp, #0
 80039ba:	6078      	str	r0, [r7, #4]
  //c[0] is proximity
  //60 min on clock, so 6 deg resolution
  //3 pads.  take top 2 values, map linearly to 120 degree slice.
  int angle = ANGLE_OFFSET;
 80039bc:	2300      	movs	r3, #0
 80039be:	627b      	str	r3, [r7, #36]	; 0x24
  int warped_angle;

  if (c[1] > c[3] && c[2] > c[3]) { //first third, between 1 and 2
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	3304      	adds	r3, #4
 80039c4:	681a      	ldr	r2, [r3, #0]
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	330c      	adds	r3, #12
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	429a      	cmp	r2, r3
 80039ce:	dd20      	ble.n	8003a12 <_get_angle+0x5e>
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	3308      	adds	r3, #8
 80039d4:	681a      	ldr	r2, [r3, #0]
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	330c      	adds	r3, #12
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	429a      	cmp	r2, r3
 80039de:	dd18      	ble.n	8003a12 <_get_angle+0x5e>
    int pos1 = c[1]-c[3];
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	3304      	adds	r3, #4
 80039e4:	681a      	ldr	r2, [r3, #0]
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	330c      	adds	r3, #12
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	1ad3      	subs	r3, r2, r3
 80039ee:	623b      	str	r3, [r7, #32]
    int pos2 = c[2]-c[3];
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	3308      	adds	r3, #8
 80039f4:	681a      	ldr	r2, [r3, #0]
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	330c      	adds	r3, #12
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	1ad3      	subs	r3, r2, r3
 80039fe:	61fb      	str	r3, [r7, #28]
    angle += _get_pad_angle(pos1, pos2);
 8003a00:	69f9      	ldr	r1, [r7, #28]
 8003a02:	6a38      	ldr	r0, [r7, #32]
 8003a04:	f7ff ff98 	bl	8003938 <_get_pad_angle>
 8003a08:	4602      	mov	r2, r0
 8003a0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a0c:	4413      	add	r3, r2
 8003a0e:	627b      	str	r3, [r7, #36]	; 0x24
  if (c[1] > c[3] && c[2] > c[3]) { //first third, between 1 and 2
 8003a10:	e042      	b.n	8003a98 <_get_angle+0xe4>
  }

  else if (c[2] > c[1] && c[3] > c[1]) { //second third, between 2 and 3
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	3308      	adds	r3, #8
 8003a16:	681a      	ldr	r2, [r3, #0]
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	3304      	adds	r3, #4
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	429a      	cmp	r2, r3
 8003a20:	dd21      	ble.n	8003a66 <_get_angle+0xb2>
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	330c      	adds	r3, #12
 8003a26:	681a      	ldr	r2, [r3, #0]
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	3304      	adds	r3, #4
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	429a      	cmp	r2, r3
 8003a30:	dd19      	ble.n	8003a66 <_get_angle+0xb2>
    int pos1 = c[2]-c[1];
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	3308      	adds	r3, #8
 8003a36:	681a      	ldr	r2, [r3, #0]
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	3304      	adds	r3, #4
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	1ad3      	subs	r3, r2, r3
 8003a40:	61bb      	str	r3, [r7, #24]
    int pos2 = c[3]-c[1];
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	330c      	adds	r3, #12
 8003a46:	681a      	ldr	r2, [r3, #0]
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	3304      	adds	r3, #4
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	1ad3      	subs	r3, r2, r3
 8003a50:	617b      	str	r3, [r7, #20]
    angle += _get_pad_angle(pos1, pos2) + 120;
 8003a52:	6979      	ldr	r1, [r7, #20]
 8003a54:	69b8      	ldr	r0, [r7, #24]
 8003a56:	f7ff ff6f 	bl	8003938 <_get_pad_angle>
 8003a5a:	4603      	mov	r3, r0
 8003a5c:	3378      	adds	r3, #120	; 0x78
 8003a5e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a60:	4413      	add	r3, r2
 8003a62:	627b      	str	r3, [r7, #36]	; 0x24
  else if (c[2] > c[1] && c[3] > c[1]) { //second third, between 2 and 3
 8003a64:	e018      	b.n	8003a98 <_get_angle+0xe4>
  }

  else { //third third, between 3 and 1
    int pos1 = c[3]-c[2];
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	330c      	adds	r3, #12
 8003a6a:	681a      	ldr	r2, [r3, #0]
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	3308      	adds	r3, #8
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	1ad3      	subs	r3, r2, r3
 8003a74:	613b      	str	r3, [r7, #16]
    int pos2 = c[1]-c[2];
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	3304      	adds	r3, #4
 8003a7a:	681a      	ldr	r2, [r3, #0]
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	3308      	adds	r3, #8
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	1ad3      	subs	r3, r2, r3
 8003a84:	60fb      	str	r3, [r7, #12]
    angle += _get_pad_angle(pos1, pos2) + 240;
 8003a86:	68f9      	ldr	r1, [r7, #12]
 8003a88:	6938      	ldr	r0, [r7, #16]
 8003a8a:	f7ff ff55 	bl	8003938 <_get_pad_angle>
 8003a8e:	4603      	mov	r3, r0
 8003a90:	33f0      	adds	r3, #240	; 0xf0
 8003a92:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a94:	4413      	add	r3, r2
 8003a96:	627b      	str	r3, [r7, #36]	; 0x24
  }

  angle %= 360;
 8003a98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a9a:	4a0b      	ldr	r2, [pc, #44]	; (8003ac8 <_get_angle+0x114>)
 8003a9c:	fb82 1203 	smull	r1, r2, r2, r3
 8003aa0:	441a      	add	r2, r3
 8003aa2:	1211      	asrs	r1, r2, #8
 8003aa4:	17da      	asrs	r2, r3, #31
 8003aa6:	1a8a      	subs	r2, r1, r2
 8003aa8:	f44f 71b4 	mov.w	r1, #360	; 0x168
 8003aac:	fb01 f202 	mul.w	r2, r1, r2
 8003ab0:	1a9b      	subs	r3, r3, r2
 8003ab2:	627b      	str	r3, [r7, #36]	; 0x24
  warped_angle = _angle_correction(angle);
 8003ab4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003ab6:	f7ff feef 	bl	8003898 <_angle_correction>
 8003aba:	60b8      	str	r0, [r7, #8]

  return warped_angle;
 8003abc:	68bb      	ldr	r3, [r7, #8]
}
 8003abe:	4618      	mov	r0, r3
 8003ac0:	3728      	adds	r7, #40	; 0x28
 8003ac2:	46bd      	mov	sp, r7
 8003ac4:	bd80      	pop	{r7, pc}
 8003ac6:	bf00      	nop
 8003ac8:	b60b60b7 	.word	0xb60b60b7

08003acc <_get_min>:


int _get_min(int* c) {
 8003acc:	b580      	push	{r7, lr}
 8003ace:	b084      	sub	sp, #16
 8003ad0:	af00      	add	r7, sp, #0
 8003ad2:	6078      	str	r0, [r7, #4]
	int angle = _get_angle(c);
 8003ad4:	6878      	ldr	r0, [r7, #4]
 8003ad6:	f7ff ff6d 	bl	80039b4 <_get_angle>
 8003ada:	60f8      	str	r0, [r7, #12]
	return angle/6;
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	4a04      	ldr	r2, [pc, #16]	; (8003af0 <_get_min+0x24>)
 8003ae0:	fb82 1203 	smull	r1, r2, r2, r3
 8003ae4:	17db      	asrs	r3, r3, #31
 8003ae6:	1ad3      	subs	r3, r2, r3
}
 8003ae8:	4618      	mov	r0, r3
 8003aea:	3710      	adds	r7, #16
 8003aec:	46bd      	mov	sp, r7
 8003aee:	bd80      	pop	{r7, pc}
 8003af0:	2aaaaaab 	.word	0x2aaaaaab

08003af4 <_get_min_if_pressed>:


int _get_min_if_pressed(int* c){
 8003af4:	b580      	push	{r7, lr}
 8003af6:	b082      	sub	sp, #8
 8003af8:	af00      	add	r7, sp, #0
 8003afa:	6078      	str	r0, [r7, #4]
	//return -1 if not pressed, otherwise return a logical minute value
	if (c[0] <= IQS_TOUCH_THRESH) return -1;
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	2b0a      	cmp	r3, #10
 8003b02:	dc02      	bgt.n	8003b0a <_get_min_if_pressed+0x16>
 8003b04:	f04f 33ff 	mov.w	r3, #4294967295
 8003b08:	e003      	b.n	8003b12 <_get_min_if_pressed+0x1e>
	else return _get_min(c);
 8003b0a:	6878      	ldr	r0, [r7, #4]
 8003b0c:	f7ff ffde 	bl	8003acc <_get_min>
 8003b10:	4603      	mov	r3, r0
}
 8003b12:	4618      	mov	r0, r3
 8003b14:	3708      	adds	r7, #8
 8003b16:	46bd      	mov	sp, r7
 8003b18:	bd80      	pop	{r7, pc}

08003b1a <iqs263_poll_raw>:


void iqs263_poll_raw(int* coords){
 8003b1a:	b580      	push	{r7, lr}
 8003b1c:	b086      	sub	sp, #24
 8003b1e:	af00      	add	r7, sp, #0
 8003b20:	6078      	str	r0, [r7, #4]

  //uint16_t coords[4];

  uint8_t coords_raw[8];

  iqs263_read(0x06, coords_raw, 8);
 8003b22:	f107 030c 	add.w	r3, r7, #12
 8003b26:	2208      	movs	r2, #8
 8003b28:	4619      	mov	r1, r3
 8003b2a:	2006      	movs	r0, #6
 8003b2c:	f000 f888 	bl	8003c40 <iqs263_read>

  for (int i=0; i<4; i++){
 8003b30:	2300      	movs	r3, #0
 8003b32:	617b      	str	r3, [r7, #20]
 8003b34:	e019      	b.n	8003b6a <iqs263_poll_raw+0x50>
	  coords[i] = (coords_raw[2*i+1] << 8) | (coords_raw[2*i] & 0xFF);
 8003b36:	697b      	ldr	r3, [r7, #20]
 8003b38:	005b      	lsls	r3, r3, #1
 8003b3a:	3301      	adds	r3, #1
 8003b3c:	f107 0218 	add.w	r2, r7, #24
 8003b40:	4413      	add	r3, r2
 8003b42:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8003b46:	021a      	lsls	r2, r3, #8
 8003b48:	697b      	ldr	r3, [r7, #20]
 8003b4a:	005b      	lsls	r3, r3, #1
 8003b4c:	f107 0118 	add.w	r1, r7, #24
 8003b50:	440b      	add	r3, r1
 8003b52:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8003b56:	4618      	mov	r0, r3
 8003b58:	697b      	ldr	r3, [r7, #20]
 8003b5a:	009b      	lsls	r3, r3, #2
 8003b5c:	6879      	ldr	r1, [r7, #4]
 8003b5e:	440b      	add	r3, r1
 8003b60:	4302      	orrs	r2, r0
 8003b62:	601a      	str	r2, [r3, #0]
  for (int i=0; i<4; i++){
 8003b64:	697b      	ldr	r3, [r7, #20]
 8003b66:	3301      	adds	r3, #1
 8003b68:	617b      	str	r3, [r7, #20]
 8003b6a:	697b      	ldr	r3, [r7, #20]
 8003b6c:	2b03      	cmp	r3, #3
 8003b6e:	dde2      	ble.n	8003b36 <iqs263_poll_raw+0x1c>
  }
  //c[0] is proximity

}
 8003b70:	bf00      	nop
 8003b72:	3718      	adds	r7, #24
 8003b74:	46bd      	mov	sp, r7
 8003b76:	bd80      	pop	{r7, pc}

08003b78 <setup_iqs263>:


HAL_StatusTypeDef setup_iqs263() {
 8003b78:	b580      	push	{r7, lr}
 8003b7a:	b086      	sub	sp, #24
 8003b7c:	af04      	add	r7, sp, #16

	uint8_t c;
	HAL_StatusTypeDef resp = HAL_ERROR;
 8003b7e:	2301      	movs	r3, #1
 8003b80:	71fb      	strb	r3, [r7, #7]
	uint8_t out_data[5] = {0x00, 0x00, 0x00, 0x00, 0x00};
 8003b82:	463b      	mov	r3, r7
 8003b84:	2200      	movs	r2, #0
 8003b86:	601a      	str	r2, [r3, #0]
 8003b88:	711a      	strb	r2, [r3, #4]

	//check product num
	while (resp == HAL_ERROR){
 8003b8a:	e00e      	b.n	8003baa <setup_iqs263+0x32>
		resp = HAL_I2C_Mem_Read(&IQS_I2C_PORT, IQS_ADDR, 0x00, sizeof(uint8_t), &c, sizeof(uint8_t), HAL_MAX_DELAY);
 8003b8c:	f04f 33ff 	mov.w	r3, #4294967295
 8003b90:	9302      	str	r3, [sp, #8]
 8003b92:	2301      	movs	r3, #1
 8003b94:	9301      	str	r3, [sp, #4]
 8003b96:	1dbb      	adds	r3, r7, #6
 8003b98:	9300      	str	r3, [sp, #0]
 8003b9a:	2301      	movs	r3, #1
 8003b9c:	2200      	movs	r2, #0
 8003b9e:	2188      	movs	r1, #136	; 0x88
 8003ba0:	4826      	ldr	r0, [pc, #152]	; (8003c3c <setup_iqs263+0xc4>)
 8003ba2:	f002 fe2d 	bl	8006800 <HAL_I2C_Mem_Read>
 8003ba6:	4603      	mov	r3, r0
 8003ba8:	71fb      	strb	r3, [r7, #7]
	while (resp == HAL_ERROR){
 8003baa:	79fb      	ldrb	r3, [r7, #7]
 8003bac:	2b01      	cmp	r3, #1
 8003bae:	d0ed      	beq.n	8003b8c <setup_iqs263+0x14>
	}

	if (c != 0x3C) {
 8003bb0:	79bb      	ldrb	r3, [r7, #6]
 8003bb2:	2b3c      	cmp	r3, #60	; 0x3c
 8003bb4:	d001      	beq.n	8003bba <setup_iqs263+0x42>
	  //ERROR - should read product code 0x3C
	  return HAL_ERROR;
 8003bb6:	2301      	movs	r3, #1
 8003bb8:	e03c      	b.n	8003c34 <setup_iqs263+0xbc>
	}

	HAL_Delay(100);
 8003bba:	2064      	movs	r0, #100	; 0x64
 8003bbc:	f001 fc77 	bl	80054ae <HAL_Delay>


	//now write and read 0x0E to address 0x0D
	out_data[0] = 0x0E;
 8003bc0:	230e      	movs	r3, #14
 8003bc2:	703b      	strb	r3, [r7, #0]

	resp = HAL_ERROR;
 8003bc4:	2301      	movs	r3, #1
 8003bc6:	71fb      	strb	r3, [r7, #7]
	while (resp == HAL_ERROR){
 8003bc8:	e00e      	b.n	8003be8 <setup_iqs263+0x70>
		  resp = HAL_I2C_Mem_Write(&IQS_I2C_PORT, IQS_ADDR, 0x0D, 1, out_data, 1, HAL_MAX_DELAY);
 8003bca:	f04f 33ff 	mov.w	r3, #4294967295
 8003bce:	9302      	str	r3, [sp, #8]
 8003bd0:	2301      	movs	r3, #1
 8003bd2:	9301      	str	r3, [sp, #4]
 8003bd4:	463b      	mov	r3, r7
 8003bd6:	9300      	str	r3, [sp, #0]
 8003bd8:	2301      	movs	r3, #1
 8003bda:	220d      	movs	r2, #13
 8003bdc:	2188      	movs	r1, #136	; 0x88
 8003bde:	4817      	ldr	r0, [pc, #92]	; (8003c3c <setup_iqs263+0xc4>)
 8003be0:	f002 fcfa 	bl	80065d8 <HAL_I2C_Mem_Write>
 8003be4:	4603      	mov	r3, r0
 8003be6:	71fb      	strb	r3, [r7, #7]
	while (resp == HAL_ERROR){
 8003be8:	79fb      	ldrb	r3, [r7, #7]
 8003bea:	2b01      	cmp	r3, #1
 8003bec:	d0ed      	beq.n	8003bca <setup_iqs263+0x52>
	}
	HAL_Delay(100);
 8003bee:	2064      	movs	r0, #100	; 0x64
 8003bf0:	f001 fc5d 	bl	80054ae <HAL_Delay>
	}

	HAL_Delay(50);
	*/

	out_data[0]=0x00;
 8003bf4:	2300      	movs	r3, #0
 8003bf6:	703b      	strb	r3, [r7, #0]
	//time average filter coef in bits 5:4 (00 is slowest, 11 is fastest), counts filtering for noise in bits 1:0 (00 is no filter, 11 is slowest).
	out_data[1]=0b00001001;
 8003bf8:	2309      	movs	r3, #9
 8003bfa:	707b      	strb	r3, [r7, #1]
	//lets go into Low Power mode if we have a prolonged state.	Wake on  movement on CH3
	out_data[2]=0x00;
 8003bfc:	2300      	movs	r3, #0
 8003bfe:	70bb      	strb	r3, [r7, #2]
	//out_data[2]=0b10001000;
	//lets disable turbo and only sample at fixed period 40Hz (given 2MHz clock)
	//out_data[3]=0x00;
	out_data[3]=0b00000110;
 8003c00:	2306      	movs	r3, #6
 8003c02:	70fb      	strb	r3, [r7, #3]
	out_data[4]=0x00;
 8003c04:	2300      	movs	r3, #0
 8003c06:	713b      	strb	r3, [r7, #4]

	resp = HAL_ERROR;
 8003c08:	2301      	movs	r3, #1
 8003c0a:	71fb      	strb	r3, [r7, #7]
	while (resp == HAL_ERROR){
 8003c0c:	e00e      	b.n	8003c2c <setup_iqs263+0xb4>
		  resp = HAL_I2C_Mem_Write(&IQS_I2C_PORT, IQS_ADDR, 0x09, 1, out_data, 5, HAL_MAX_DELAY);
 8003c0e:	f04f 33ff 	mov.w	r3, #4294967295
 8003c12:	9302      	str	r3, [sp, #8]
 8003c14:	2305      	movs	r3, #5
 8003c16:	9301      	str	r3, [sp, #4]
 8003c18:	463b      	mov	r3, r7
 8003c1a:	9300      	str	r3, [sp, #0]
 8003c1c:	2301      	movs	r3, #1
 8003c1e:	2209      	movs	r2, #9
 8003c20:	2188      	movs	r1, #136	; 0x88
 8003c22:	4806      	ldr	r0, [pc, #24]	; (8003c3c <setup_iqs263+0xc4>)
 8003c24:	f002 fcd8 	bl	80065d8 <HAL_I2C_Mem_Write>
 8003c28:	4603      	mov	r3, r0
 8003c2a:	71fb      	strb	r3, [r7, #7]
	while (resp == HAL_ERROR){
 8003c2c:	79fb      	ldrb	r3, [r7, #7]
 8003c2e:	2b01      	cmp	r3, #1
 8003c30:	d0ed      	beq.n	8003c0e <setup_iqs263+0x96>
	while (resp == HAL_ERROR){
	    resp = HAL_I2C_Mem_Read(&IQS_I2C_PORT, IQS_ADDR, 0x09, 1, readback, 5, HAL_MAX_DELAY);
	}
	*/

    return HAL_OK;
 8003c32:	2300      	movs	r3, #0
}
 8003c34:	4618      	mov	r0, r3
 8003c36:	3708      	adds	r7, #8
 8003c38:	46bd      	mov	sp, r7
 8003c3a:	bd80      	pop	{r7, pc}
 8003c3c:	20006108 	.word	0x20006108

08003c40 <iqs263_read>:

  return HAL_OK;

}

HAL_StatusTypeDef iqs263_read(uint8_t addr, uint8_t* buf, uint8_t size) {
 8003c40:	b580      	push	{r7, lr}
 8003c42:	b088      	sub	sp, #32
 8003c44:	af04      	add	r7, sp, #16
 8003c46:	4603      	mov	r3, r0
 8003c48:	6039      	str	r1, [r7, #0]
 8003c4a:	71fb      	strb	r3, [r7, #7]
 8003c4c:	4613      	mov	r3, r2
 8003c4e:	71bb      	strb	r3, [r7, #6]


  const uint16_t max_tries = 300;
 8003c50:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8003c54:	817b      	strh	r3, [r7, #10]
  uint16_t current_tries = 0;
 8003c56:	2300      	movs	r3, #0
 8003c58:	81fb      	strh	r3, [r7, #14]

  HAL_StatusTypeDef resp = HAL_ERROR;
 8003c5a:	2301      	movs	r3, #1
 8003c5c:	737b      	strb	r3, [r7, #13]

  while (resp == HAL_ERROR && current_tries < max_tries){
 8003c5e:	e014      	b.n	8003c8a <iqs263_read+0x4a>
    resp = HAL_I2C_Mem_Read(&IQS_I2C_PORT, IQS_ADDR, addr, 1, buf, size, HAL_MAX_DELAY);
 8003c60:	79fb      	ldrb	r3, [r7, #7]
 8003c62:	b299      	uxth	r1, r3
 8003c64:	79bb      	ldrb	r3, [r7, #6]
 8003c66:	b29b      	uxth	r3, r3
 8003c68:	f04f 32ff 	mov.w	r2, #4294967295
 8003c6c:	9202      	str	r2, [sp, #8]
 8003c6e:	9301      	str	r3, [sp, #4]
 8003c70:	683b      	ldr	r3, [r7, #0]
 8003c72:	9300      	str	r3, [sp, #0]
 8003c74:	2301      	movs	r3, #1
 8003c76:	460a      	mov	r2, r1
 8003c78:	2188      	movs	r1, #136	; 0x88
 8003c7a:	480d      	ldr	r0, [pc, #52]	; (8003cb0 <iqs263_read+0x70>)
 8003c7c:	f002 fdc0 	bl	8006800 <HAL_I2C_Mem_Read>
 8003c80:	4603      	mov	r3, r0
 8003c82:	737b      	strb	r3, [r7, #13]
    current_tries++;
 8003c84:	89fb      	ldrh	r3, [r7, #14]
 8003c86:	3301      	adds	r3, #1
 8003c88:	81fb      	strh	r3, [r7, #14]
  while (resp == HAL_ERROR && current_tries < max_tries){
 8003c8a:	7b7b      	ldrb	r3, [r7, #13]
 8003c8c:	2b01      	cmp	r3, #1
 8003c8e:	d103      	bne.n	8003c98 <iqs263_read+0x58>
 8003c90:	89fa      	ldrh	r2, [r7, #14]
 8003c92:	897b      	ldrh	r3, [r7, #10]
 8003c94:	429a      	cmp	r2, r3
 8003c96:	d3e3      	bcc.n	8003c60 <iqs263_read+0x20>
  }

  if (current_tries >= max_tries) {
 8003c98:	89fa      	ldrh	r2, [r7, #14]
 8003c9a:	897b      	ldrh	r3, [r7, #10]
 8003c9c:	429a      	cmp	r2, r3
 8003c9e:	d301      	bcc.n	8003ca4 <iqs263_read+0x64>
	  return HAL_ERROR;
 8003ca0:	2301      	movs	r3, #1
 8003ca2:	e000      	b.n	8003ca6 <iqs263_read+0x66>
  }

  return HAL_OK;
 8003ca4:	2300      	movs	r3, #0

}
 8003ca6:	4618      	mov	r0, r3
 8003ca8:	3710      	adds	r7, #16
 8003caa:	46bd      	mov	sp, r7
 8003cac:	bd80      	pop	{r7, pc}
 8003cae:	bf00      	nop
 8003cb0:	20006108 	.word	0x20006108

08003cb4 <iqs263_get_min_if_pressed>:
	iqs263_poll_raw(coords);
	return _get_min(coords);
}


int iqs263_get_min_if_pressed(){
 8003cb4:	b580      	push	{r7, lr}
 8003cb6:	b084      	sub	sp, #16
 8003cb8:	af00      	add	r7, sp, #0
	int* coords[4] = {0x0000, 0x0000, 0x0000, 0x0000};
 8003cba:	463b      	mov	r3, r7
 8003cbc:	2200      	movs	r2, #0
 8003cbe:	601a      	str	r2, [r3, #0]
 8003cc0:	605a      	str	r2, [r3, #4]
 8003cc2:	609a      	str	r2, [r3, #8]
 8003cc4:	60da      	str	r2, [r3, #12]
	iqs263_poll_raw(coords);
 8003cc6:	463b      	mov	r3, r7
 8003cc8:	4618      	mov	r0, r3
 8003cca:	f7ff ff26 	bl	8003b1a <iqs263_poll_raw>
	return _get_min_if_pressed(coords);
 8003cce:	463b      	mov	r3, r7
 8003cd0:	4618      	mov	r0, r3
 8003cd2:	f7ff ff0f 	bl	8003af4 <_get_min_if_pressed>
 8003cd6:	4603      	mov	r3, r0
}
 8003cd8:	4618      	mov	r0, r3
 8003cda:	3710      	adds	r7, #16
 8003cdc:	46bd      	mov	sp, r7
 8003cde:	bd80      	pop	{r7, pc}

08003ce0 <LL_EXTI_DisableIT_0_31>:
{
 8003ce0:	b480      	push	{r7}
 8003ce2:	b083      	sub	sp, #12
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 8003ce8:	4b07      	ldr	r3, [pc, #28]	; (8003d08 <LL_EXTI_DisableIT_0_31+0x28>)
 8003cea:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	43db      	mvns	r3, r3
 8003cf2:	4905      	ldr	r1, [pc, #20]	; (8003d08 <LL_EXTI_DisableIT_0_31+0x28>)
 8003cf4:	4013      	ands	r3, r2
 8003cf6:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 8003cfa:	bf00      	nop
 8003cfc:	370c      	adds	r7, #12
 8003cfe:	46bd      	mov	sp, r7
 8003d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d04:	4770      	bx	lr
 8003d06:	bf00      	nop
 8003d08:	58000800 	.word	0x58000800

08003d0c <LL_EXTI_DisableIT_32_63>:
{
 8003d0c:	b480      	push	{r7}
 8003d0e:	b083      	sub	sp, #12
 8003d10:	af00      	add	r7, sp, #0
 8003d12:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR2, ExtiLine);
 8003d14:	4b07      	ldr	r3, [pc, #28]	; (8003d34 <LL_EXTI_DisableIT_32_63+0x28>)
 8003d16:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	43db      	mvns	r3, r3
 8003d1e:	4905      	ldr	r1, [pc, #20]	; (8003d34 <LL_EXTI_DisableIT_32_63+0x28>)
 8003d20:	4013      	ands	r3, r2
 8003d22:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8003d26:	bf00      	nop
 8003d28:	370c      	adds	r7, #12
 8003d2a:	46bd      	mov	sp, r7
 8003d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d30:	4770      	bx	lr
 8003d32:	bf00      	nop
 8003d34:	58000800 	.word	0x58000800

08003d38 <LL_RCC_HSE_SetCapacitorTuning>:
{
 8003d38:	b480      	push	{r7}
 8003d3a:	b083      	sub	sp, #12
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	6078      	str	r0, [r7, #4]
  WRITE_REG(RCC->HSECR, HSE_CONTROL_UNLOCK_KEY);
 8003d40:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d44:	4a0a      	ldr	r2, [pc, #40]	; (8003d70 <LL_RCC_HSE_SetCapacitorTuning+0x38>)
 8003d46:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  MODIFY_REG(RCC->HSECR, RCC_HSECR_HSETUNE, Value << RCC_HSECR_HSETUNE_Pos);
 8003d4a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d4e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003d52:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	021b      	lsls	r3, r3, #8
 8003d5a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003d5e:	4313      	orrs	r3, r2
 8003d60:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
}
 8003d64:	bf00      	nop
 8003d66:	370c      	adds	r7, #12
 8003d68:	46bd      	mov	sp, r7
 8003d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d6e:	4770      	bx	lr
 8003d70:	cafecafe 	.word	0xcafecafe

08003d74 <LL_RCC_LSE_SetDriveCapability>:
{
 8003d74:	b480      	push	{r7}
 8003d76:	b083      	sub	sp, #12
 8003d78:	af00      	add	r7, sp, #0
 8003d7a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8003d7c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d80:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d84:	f023 0218 	bic.w	r2, r3, #24
 8003d88:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	4313      	orrs	r3, r2
 8003d90:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8003d94:	bf00      	nop
 8003d96:	370c      	adds	r7, #12
 8003d98:	46bd      	mov	sp, r7
 8003d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d9e:	4770      	bx	lr

08003da0 <LL_RCC_ForceBackupDomainReset>:
  * @brief  Force the Backup domain reset
  * @rmtoll BDCR         BDRST         LL_RCC_ForceBackupDomainReset
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ForceBackupDomainReset(void)
{
 8003da0:	b480      	push	{r7}
 8003da2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8003da4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003da8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003dac:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003db0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003db4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8003db8:	bf00      	nop
 8003dba:	46bd      	mov	sp, r7
 8003dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc0:	4770      	bx	lr

08003dc2 <LL_RCC_ReleaseBackupDomainReset>:
  * @brief  Release the Backup domain reset
  * @rmtoll BDCR         BDRST         LL_RCC_ReleaseBackupDomainReset
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ReleaseBackupDomainReset(void)
{
 8003dc2:	b480      	push	{r7}
 8003dc4:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8003dc6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003dca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003dce:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003dd2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003dd6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8003dda:	bf00      	nop
 8003ddc:	46bd      	mov	sp, r7
 8003dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de2:	4770      	bx	lr

08003de4 <LL_RCC_IsActiveFlag_PINRST>:
  * @brief  Check if RCC flag Pin reset is set or not.
  * @rmtoll CSR          PINRSTF       LL_RCC_IsActiveFlag_PINRST
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PINRST(void)
{
 8003de4:	b480      	push	{r7}
 8003de6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_PINRSTF) == (RCC_CSR_PINRSTF)) ? 1UL : 0UL);
 8003de8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003dec:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003df0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003df4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003df8:	d101      	bne.n	8003dfe <LL_RCC_IsActiveFlag_PINRST+0x1a>
 8003dfa:	2301      	movs	r3, #1
 8003dfc:	e000      	b.n	8003e00 <LL_RCC_IsActiveFlag_PINRST+0x1c>
 8003dfe:	2300      	movs	r3, #0
}
 8003e00:	4618      	mov	r0, r3
 8003e02:	46bd      	mov	sp, r7
 8003e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e08:	4770      	bx	lr

08003e0a <LL_RCC_IsActiveFlag_SFTRST>:
  * @brief  Check if RCC flag Software reset is set or not.
  * @rmtoll CSR          SFTRSTF       LL_RCC_IsActiveFlag_SFTRST
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SFTRST(void)
{
 8003e0a:	b480      	push	{r7}
 8003e0c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_SFTRSTF) == (RCC_CSR_SFTRSTF)) ? 1UL : 0UL);
 8003e0e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e12:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003e16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e1a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003e1e:	d101      	bne.n	8003e24 <LL_RCC_IsActiveFlag_SFTRST+0x1a>
 8003e20:	2301      	movs	r3, #1
 8003e22:	e000      	b.n	8003e26 <LL_RCC_IsActiveFlag_SFTRST+0x1c>
 8003e24:	2300      	movs	r3, #0
}
 8003e26:	4618      	mov	r0, r3
 8003e28:	46bd      	mov	sp, r7
 8003e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e2e:	4770      	bx	lr

08003e30 <LL_AHB2_GRP1_EnableClock>:
{
 8003e30:	b480      	push	{r7}
 8003e32:	b085      	sub	sp, #20
 8003e34:	af00      	add	r7, sp, #0
 8003e36:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8003e38:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e3c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003e3e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	4313      	orrs	r3, r2
 8003e46:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8003e48:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e4c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	4013      	ands	r3, r2
 8003e52:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003e54:	68fb      	ldr	r3, [r7, #12]
}
 8003e56:	bf00      	nop
 8003e58:	3714      	adds	r7, #20
 8003e5a:	46bd      	mov	sp, r7
 8003e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e60:	4770      	bx	lr

08003e62 <LL_AHB3_GRP1_EnableClock>:
{
 8003e62:	b480      	push	{r7}
 8003e64:	b085      	sub	sp, #20
 8003e66:	af00      	add	r7, sp, #0
 8003e68:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 8003e6a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e6e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003e70:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	4313      	orrs	r3, r2
 8003e78:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8003e7a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e7e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	4013      	ands	r3, r2
 8003e84:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003e86:	68fb      	ldr	r3, [r7, #12]
}
 8003e88:	bf00      	nop
 8003e8a:	3714      	adds	r7, #20
 8003e8c:	46bd      	mov	sp, r7
 8003e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e92:	4770      	bx	lr

08003e94 <LL_C1_IPCC_DisableTransmitChannel>:
{
 8003e94:	b480      	push	{r7}
 8003e96:	b083      	sub	sp, #12
 8003e98:	af00      	add	r7, sp, #0
 8003e9a:	6078      	str	r0, [r7, #4]
 8003e9c:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	685a      	ldr	r2, [r3, #4]
 8003ea2:	683b      	ldr	r3, [r7, #0]
 8003ea4:	041b      	lsls	r3, r3, #16
 8003ea6:	431a      	orrs	r2, r3
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	605a      	str	r2, [r3, #4]
}
 8003eac:	bf00      	nop
 8003eae:	370c      	adds	r7, #12
 8003eb0:	46bd      	mov	sp, r7
 8003eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb6:	4770      	bx	lr

08003eb8 <LL_C1_IPCC_DisableReceiveChannel>:
{
 8003eb8:	b480      	push	{r7}
 8003eba:	b083      	sub	sp, #12
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	6078      	str	r0, [r7, #4]
 8003ec0:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel);
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	685a      	ldr	r2, [r3, #4]
 8003ec6:	683b      	ldr	r3, [r7, #0]
 8003ec8:	431a      	orrs	r2, r3
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	605a      	str	r2, [r3, #4]
}
 8003ece:	bf00      	nop
 8003ed0:	370c      	adds	r7, #12
 8003ed2:	46bd      	mov	sp, r7
 8003ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed8:	4770      	bx	lr

08003eda <LL_C2_IPCC_DisableTransmitChannel>:
{
 8003eda:	b480      	push	{r7}
 8003edc:	b083      	sub	sp, #12
 8003ede:	af00      	add	r7, sp, #0
 8003ee0:	6078      	str	r0, [r7, #4]
 8003ee2:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C2MR, Channel << (IPCC_C2MR_CH1FM_Pos));
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	695a      	ldr	r2, [r3, #20]
 8003ee8:	683b      	ldr	r3, [r7, #0]
 8003eea:	041b      	lsls	r3, r3, #16
 8003eec:	431a      	orrs	r2, r3
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	615a      	str	r2, [r3, #20]
}
 8003ef2:	bf00      	nop
 8003ef4:	370c      	adds	r7, #12
 8003ef6:	46bd      	mov	sp, r7
 8003ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003efc:	4770      	bx	lr

08003efe <LL_C2_IPCC_DisableReceiveChannel>:
{
 8003efe:	b480      	push	{r7}
 8003f00:	b083      	sub	sp, #12
 8003f02:	af00      	add	r7, sp, #0
 8003f04:	6078      	str	r0, [r7, #4]
 8003f06:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C2MR, Channel);
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	695a      	ldr	r2, [r3, #20]
 8003f0c:	683b      	ldr	r3, [r7, #0]
 8003f0e:	431a      	orrs	r2, r3
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	615a      	str	r2, [r3, #20]
}
 8003f14:	bf00      	nop
 8003f16:	370c      	adds	r7, #12
 8003f18:	46bd      	mov	sp, r7
 8003f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f1e:	4770      	bx	lr

08003f20 <LL_C1_IPCC_ClearFlag_CHx>:
{
 8003f20:	b480      	push	{r7}
 8003f22:	b083      	sub	sp, #12
 8003f24:	af00      	add	r7, sp, #0
 8003f26:	6078      	str	r0, [r7, #4]
 8003f28:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	683a      	ldr	r2, [r7, #0]
 8003f2e:	609a      	str	r2, [r3, #8]
}
 8003f30:	bf00      	nop
 8003f32:	370c      	adds	r7, #12
 8003f34:	46bd      	mov	sp, r7
 8003f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f3a:	4770      	bx	lr

08003f3c <LL_C2_IPCC_ClearFlag_CHx>:
{
 8003f3c:	b480      	push	{r7}
 8003f3e:	b083      	sub	sp, #12
 8003f40:	af00      	add	r7, sp, #0
 8003f42:	6078      	str	r0, [r7, #4]
 8003f44:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C2SCR, Channel);
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	683a      	ldr	r2, [r7, #0]
 8003f4a:	619a      	str	r2, [r3, #24]
}
 8003f4c:	bf00      	nop
 8003f4e:	370c      	adds	r7, #12
 8003f50:	46bd      	mov	sp, r7
 8003f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f56:	4770      	bx	lr

08003f58 <LL_LPM_EnableSleep>:
  * @brief  Processor uses sleep as its low power mode
  * @rmtoll SCB_SCR      SLEEPDEEP     LL_LPM_EnableSleep
  * @retval None
  */
__STATIC_INLINE void LL_LPM_EnableSleep(void)
{
 8003f58:	b480      	push	{r7}
 8003f5a:	af00      	add	r7, sp, #0
  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8003f5c:	4b05      	ldr	r3, [pc, #20]	; (8003f74 <LL_LPM_EnableSleep+0x1c>)
 8003f5e:	691b      	ldr	r3, [r3, #16]
 8003f60:	4a04      	ldr	r2, [pc, #16]	; (8003f74 <LL_LPM_EnableSleep+0x1c>)
 8003f62:	f023 0304 	bic.w	r3, r3, #4
 8003f66:	6113      	str	r3, [r2, #16]
}
 8003f68:	bf00      	nop
 8003f6a:	46bd      	mov	sp, r7
 8003f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f70:	4770      	bx	lr
 8003f72:	bf00      	nop
 8003f74:	e000ed00 	.word	0xe000ed00

08003f78 <main>:
static void Reset_BackupDomain( void );
static void Init_Exti( void );
static void Config_HSE(void);

int main(void)
{
 8003f78:	b580      	push	{r7, lr}
 8003f7a:	af00      	add	r7, sp, #0
  /**
   * The OPTVERR flag is wrongly set at power on
   * It shall be cleared before using any HAL_FLASH_xxx() api
   */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8003f7c:	4b46      	ldr	r3, [pc, #280]	; (8004098 <main+0x120>)
 8003f7e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8003f82:	611a      	str	r2, [r3, #16]

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003f84:	f001 fdfc 	bl	8005b80 <HAL_Init>

  /* USER CODE BEGIN Init */
  Reset_Device();
 8003f88:	f001 fa43 	bl	8005412 <Reset_Device>
  Config_HSE();
 8003f8c:	f001 fa2d 	bl	80053ea <Config_HSE>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003f90:	f000 f8ce 	bl	8004130 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  PeriphClock_Config();
 8003f94:	f001 fa22 	bl	80053dc <PeriphClock_Config>
  Init_Exti(); /**< Configure the system Power Mode */
 8003f98:	f001 fa7d 	bl	8005496 <Init_Exti>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003f9c:	f000 fadc 	bl	8004558 <MX_GPIO_Init>
  MX_I2C1_Init();
 8003fa0:	f000 f946 	bl	8004230 <MX_I2C1_Init>
  MX_SPI1_Init();
 8003fa4:	f000 f9ea 	bl	800437c <MX_SPI1_Init>
  MX_RF_Init();
 8003fa8:	f000 f982 	bl	80042b0 <MX_RF_Init>
  MX_RTC_Init();
 8003fac:	f000 f988 	bl	80042c0 <MX_RTC_Init>
  MX_TIM1_Init();
 8003fb0:	f000 fa22 	bl	80043f8 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8003fb4:	f009 fbc8 	bl	800d748 <osKernelInitialize>

  /* USER CODE BEGIN RTOS_MUTEX */
    /* creation of rtcMutex */
    rtcMutexHandle = osMutexNew(&rtcMutex_attributes);
 8003fb8:	4838      	ldr	r0, [pc, #224]	; (800409c <main+0x124>)
 8003fba:	f009 fdf9 	bl	800dbb0 <osMutexNew>
 8003fbe:	4602      	mov	r2, r0
 8003fc0:	4b37      	ldr	r3, [pc, #220]	; (80040a0 <main+0x128>)
 8003fc2:	601a      	str	r2, [r3, #0]

    /* creation of screenTextMutex */
    screenTextMutexHandle = osMutexNew(&screenTextMutex_attributes);
 8003fc4:	4837      	ldr	r0, [pc, #220]	; (80040a4 <main+0x12c>)
 8003fc6:	f009 fdf3 	bl	800dbb0 <osMutexNew>
 8003fca:	4602      	mov	r2, r0
 8003fcc:	4b36      	ldr	r3, [pc, #216]	; (80040a8 <main+0x130>)
 8003fce:	601a      	str	r2, [r3, #0]

    /* creation of ledStateMutex */
    ledStateMutexHandle = osMutexNew(&ledStateMutex_attributes);
 8003fd0:	4836      	ldr	r0, [pc, #216]	; (80040ac <main+0x134>)
 8003fd2:	f009 fded 	bl	800dbb0 <osMutexNew>
 8003fd6:	4602      	mov	r2, r0
 8003fd8:	4b35      	ldr	r3, [pc, #212]	; (80040b0 <main+0x138>)
 8003fda:	601a      	str	r2, [r3, #0]

  /* USER CODE END RTOS_MUTEX */

  /* USER CODE BEGIN RTOS_QUEUES */
      /* creation of bleTXqueue */
      bleTXqueueHandle = osMessageQueueNew (16, sizeof(uint16_t), &bleTXqueue_attributes);
 8003fdc:	4a35      	ldr	r2, [pc, #212]	; (80040b4 <main+0x13c>)
 8003fde:	2102      	movs	r1, #2
 8003fe0:	2010      	movs	r0, #16
 8003fe2:	f00a f889 	bl	800e0f8 <osMessageQueueNew>
 8003fe6:	4602      	mov	r2, r0
 8003fe8:	4b33      	ldr	r3, [pc, #204]	; (80040b8 <main+0x140>)
 8003fea:	601a      	str	r2, [r3, #0]

      /* creation of bleRXqueue */
      bleRXqueueHandle = osMessageQueueNew (16, sizeof(P2PS_STM_Data_t), &bleRXqueue_attributes);
 8003fec:	4a33      	ldr	r2, [pc, #204]	; (80040bc <main+0x144>)
 8003fee:	2108      	movs	r1, #8
 8003ff0:	2010      	movs	r0, #16
 8003ff2:	f00a f881 	bl	800e0f8 <osMessageQueueNew>
 8003ff6:	4602      	mov	r2, r0
 8003ff8:	4b31      	ldr	r3, [pc, #196]	; (80040c0 <main+0x148>)
 8003ffa:	601a      	str	r2, [r3, #0]

  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
        /* creation of screenUpdate */
        screenUpdateHandle = osThreadNew(startScreenUpdate, NULL, &screenUpdate_attributes);
 8003ffc:	4a31      	ldr	r2, [pc, #196]	; (80040c4 <main+0x14c>)
 8003ffe:	2100      	movs	r1, #0
 8004000:	4831      	ldr	r0, [pc, #196]	; (80040c8 <main+0x150>)
 8004002:	f009 fc0b 	bl	800d81c <osThreadNew>
 8004006:	4602      	mov	r2, r0
 8004008:	4b30      	ldr	r3, [pc, #192]	; (80040cc <main+0x154>)
 800400a:	601a      	str	r2, [r3, #0]

        /* creation of LEDControl */
        LEDControlHandle = osThreadNew(startLEDControl, NULL, &LEDControl_attributes);
 800400c:	4a30      	ldr	r2, [pc, #192]	; (80040d0 <main+0x158>)
 800400e:	2100      	movs	r1, #0
 8004010:	4830      	ldr	r0, [pc, #192]	; (80040d4 <main+0x15c>)
 8004012:	f009 fc03 	bl	800d81c <osThreadNew>
 8004016:	4602      	mov	r2, r0
 8004018:	4b2f      	ldr	r3, [pc, #188]	; (80040d8 <main+0x160>)
 800401a:	601a      	str	r2, [r3, #0]

        /* creation of buttonPress */
        buttonPressHandle = osThreadNew(startButtonPress, NULL, &buttonPress_attributes);
 800401c:	4a2f      	ldr	r2, [pc, #188]	; (80040dc <main+0x164>)
 800401e:	2100      	movs	r1, #0
 8004020:	482f      	ldr	r0, [pc, #188]	; (80040e0 <main+0x168>)
 8004022:	f009 fbfb 	bl	800d81c <osThreadNew>
 8004026:	4602      	mov	r2, r0
 8004028:	4b2e      	ldr	r3, [pc, #184]	; (80040e4 <main+0x16c>)
 800402a:	601a      	str	r2, [r3, #0]

        /* creation of vibrateControl */
        vibrateControlHandle = osThreadNew(startVibrateControl, NULL, &vibrateControl_attributes);
 800402c:	4a2e      	ldr	r2, [pc, #184]	; (80040e8 <main+0x170>)
 800402e:	2100      	movs	r1, #0
 8004030:	482e      	ldr	r0, [pc, #184]	; (80040ec <main+0x174>)
 8004032:	f009 fbf3 	bl	800d81c <osThreadNew>
 8004036:	4602      	mov	r2, r0
 8004038:	4b2d      	ldr	r3, [pc, #180]	; (80040f0 <main+0x178>)
 800403a:	601a      	str	r2, [r3, #0]

        /* creation of rtcSecondTick */
        rtcSecondTickHandle = osThreadNew(startRTCTick, NULL, &rtcSecondTick_attributes);
 800403c:	4a2d      	ldr	r2, [pc, #180]	; (80040f4 <main+0x17c>)
 800403e:	2100      	movs	r1, #0
 8004040:	482d      	ldr	r0, [pc, #180]	; (80040f8 <main+0x180>)
 8004042:	f009 fbeb 	bl	800d81c <osThreadNew>
 8004046:	4602      	mov	r2, r0
 8004048:	4b2c      	ldr	r3, [pc, #176]	; (80040fc <main+0x184>)
 800404a:	601a      	str	r2, [r3, #0]

        /* creation of bleTX */
        bleTXHandle = osThreadNew(startBLETX, NULL, &bleTX_attributes);
 800404c:	4a2c      	ldr	r2, [pc, #176]	; (8004100 <main+0x188>)
 800404e:	2100      	movs	r1, #0
 8004050:	482c      	ldr	r0, [pc, #176]	; (8004104 <main+0x18c>)
 8004052:	f009 fbe3 	bl	800d81c <osThreadNew>
 8004056:	4602      	mov	r2, r0
 8004058:	4b2b      	ldr	r3, [pc, #172]	; (8004108 <main+0x190>)
 800405a:	601a      	str	r2, [r3, #0]

        /* creation of bleRX */
        bleRXHandle = osThreadNew(startBLERX, NULL, &bleRX_attributes);
 800405c:	4a2b      	ldr	r2, [pc, #172]	; (800410c <main+0x194>)
 800405e:	2100      	movs	r1, #0
 8004060:	482b      	ldr	r0, [pc, #172]	; (8004110 <main+0x198>)
 8004062:	f009 fbdb 	bl	800d81c <osThreadNew>
 8004066:	4602      	mov	r2, r0
 8004068:	4b2a      	ldr	r3, [pc, #168]	; (8004114 <main+0x19c>)
 800406a:	601a      	str	r2, [r3, #0]

        /* creation of LEDTimer */
        LEDTimerHandle = osThreadNew(startLEDTimer, NULL, &LEDTimer_attributes);
 800406c:	4a2a      	ldr	r2, [pc, #168]	; (8004118 <main+0x1a0>)
 800406e:	2100      	movs	r1, #0
 8004070:	482a      	ldr	r0, [pc, #168]	; (800411c <main+0x1a4>)
 8004072:	f009 fbd3 	bl	800d81c <osThreadNew>
 8004076:	4602      	mov	r2, r0
 8004078:	4b29      	ldr	r3, [pc, #164]	; (8004120 <main+0x1a8>)
 800407a:	601a      	str	r2, [r3, #0]

        /* creation of touchRead */
        touchReadHandle = osThreadNew(startTouchRead, NULL, &touchRead_attributes);
 800407c:	4a29      	ldr	r2, [pc, #164]	; (8004124 <main+0x1ac>)
 800407e:	2100      	movs	r1, #0
 8004080:	4829      	ldr	r0, [pc, #164]	; (8004128 <main+0x1b0>)
 8004082:	f009 fbcb 	bl	800d81c <osThreadNew>
 8004086:	4602      	mov	r2, r0
 8004088:	4b28      	ldr	r3, [pc, #160]	; (800412c <main+0x1b4>)
 800408a:	601a      	str	r2, [r3, #0]

  /* Init code for STM32_WPAN */
  APPE_Init();
 800408c:	f7fd ff26 	bl	8001edc <APPE_Init>
  /* Start scheduler */
  osKernelStart();
 8004090:	f009 fb8e 	bl	800d7b0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  while (1){}
 8004094:	e7fe      	b.n	8004094 <main+0x11c>
 8004096:	bf00      	nop
 8004098:	58004000 	.word	0x58004000
 800409c:	080162e4 	.word	0x080162e4
 80040a0:	20006054 	.word	0x20006054
 80040a4:	080162f4 	.word	0x080162f4
 80040a8:	20006024 	.word	0x20006024
 80040ac:	08016304 	.word	0x08016304
 80040b0:	20006170 	.word	0x20006170
 80040b4:	080162b4 	.word	0x080162b4
 80040b8:	200061c0 	.word	0x200061c0
 80040bc:	080162cc 	.word	0x080162cc
 80040c0:	20006020 	.word	0x20006020
 80040c4:	08016170 	.word	0x08016170
 80040c8:	080046e5 	.word	0x080046e5
 80040cc:	20006160 	.word	0x20006160
 80040d0:	08016194 	.word	0x08016194
 80040d4:	08004961 	.word	0x08004961
 80040d8:	20006100 	.word	0x20006100
 80040dc:	080161b8 	.word	0x080161b8
 80040e0:	08004bf5 	.word	0x08004bf5
 80040e4:	200060fc 	.word	0x200060fc
 80040e8:	080161dc 	.word	0x080161dc
 80040ec:	08004d1d 	.word	0x08004d1d
 80040f0:	200061c4 	.word	0x200061c4
 80040f4:	08016200 	.word	0x08016200
 80040f8:	08004d95 	.word	0x08004d95
 80040fc:	2000616c 	.word	0x2000616c
 8004100:	08016224 	.word	0x08016224
 8004104:	08004fad 	.word	0x08004fad
 8004108:	20006154 	.word	0x20006154
 800410c:	08016248 	.word	0x08016248
 8004110:	08004fdd 	.word	0x08004fdd
 8004114:	20006168 	.word	0x20006168
 8004118:	0801626c 	.word	0x0801626c
 800411c:	080051fd 	.word	0x080051fd
 8004120:	20006104 	.word	0x20006104
 8004124:	08016290 	.word	0x08016290
 8004128:	08005289 	.word	0x08005289
 800412c:	20006164 	.word	0x20006164

08004130 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004130:	b580      	push	{r7, lr}
 8004132:	b0ae      	sub	sp, #184	; 0xb8
 8004134:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004136:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800413a:	2248      	movs	r2, #72	; 0x48
 800413c:	2100      	movs	r1, #0
 800413e:	4618      	mov	r0, r3
 8004140:	f00d fd2f 	bl	8011ba2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004144:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8004148:	2200      	movs	r2, #0
 800414a:	601a      	str	r2, [r3, #0]
 800414c:	605a      	str	r2, [r3, #4]
 800414e:	609a      	str	r2, [r3, #8]
 8004150:	60da      	str	r2, [r3, #12]
 8004152:	611a      	str	r2, [r3, #16]
 8004154:	615a      	str	r2, [r3, #20]
 8004156:	619a      	str	r2, [r3, #24]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004158:	1d3b      	adds	r3, r7, #4
 800415a:	2250      	movs	r2, #80	; 0x50
 800415c:	2100      	movs	r1, #0
 800415e:	4618      	mov	r0, r3
 8004160:	f00d fd1f 	bl	8011ba2 <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8004164:	f002 ff1a 	bl	8006f9c <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8004168:	2000      	movs	r0, #0
 800416a:	f7ff fe03 	bl	8003d74 <LL_RCC_LSE_SetDriveCapability>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800416e:	4b2f      	ldr	r3, [pc, #188]	; (800422c <SystemClock_Config+0xfc>)
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004176:	4a2d      	ldr	r2, [pc, #180]	; (800422c <SystemClock_Config+0xfc>)
 8004178:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800417c:	6013      	str	r3, [r2, #0]
 800417e:	4b2b      	ldr	r3, [pc, #172]	; (800422c <SystemClock_Config+0xfc>)
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004186:	603b      	str	r3, [r7, #0]
 8004188:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 800418a:	2307      	movs	r3, #7
 800418c:	673b      	str	r3, [r7, #112]	; 0x70
                              |RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800418e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004192:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8004194:	2301      	movs	r3, #1
 8004196:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8004198:	f44f 7380 	mov.w	r3, #256	; 0x100
 800419c:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800419e:	2340      	movs	r3, #64	; 0x40
 80041a0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80041a4:	2300      	movs	r3, #0
 80041a6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80041aa:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80041ae:	4618      	mov	r0, r3
 80041b0:	f003 fa94 	bl	80076dc <HAL_RCC_OscConfig>
 80041b4:	4603      	mov	r3, r0
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d001      	beq.n	80041be <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80041ba:	f001 f9af 	bl	800551c <Error_Handler>
  }
  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 80041be:	236f      	movs	r3, #111	; 0x6f
 80041c0:	657b      	str	r3, [r7, #84]	; 0x54
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 80041c2:	2302      	movs	r3, #2
 80041c4:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80041c6:	2300      	movs	r3, #0
 80041c8:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80041ca:	2300      	movs	r3, #0
 80041cc:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80041ce:	2300      	movs	r3, #0
 80041d0:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 80041d2:	2300      	movs	r3, #0
 80041d4:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 80041d6:	2300      	movs	r3, #0
 80041d8:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80041da:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80041de:	2101      	movs	r1, #1
 80041e0:	4618      	mov	r0, r3
 80041e2:	f003 fe07 	bl	8007df4 <HAL_RCC_ClockConfig>
 80041e6:	4603      	mov	r3, r0
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d001      	beq.n	80041f0 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80041ec:	f001 f996 	bl	800551c <Error_Handler>
  }
  /** Initializes the peripherals clocks
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS|RCC_PERIPHCLK_RFWAKEUP
 80041f0:	f643 0303 	movw	r3, #14339	; 0x3803
 80041f4:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USART1
                              |RCC_PERIPHCLK_LPUART1;
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80041f6:	2300      	movs	r3, #0
 80041f8:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 80041fa:	2300      	movs	r3, #0
 80041fc:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80041fe:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004202:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInitStruct.RFWakeUpClockSelection = RCC_RFWKPCLKSOURCE_LSE;
 8004204:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004208:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSE;
 800420a:	2302      	movs	r3, #2
 800420c:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE1;
 800420e:	2310      	movs	r3, #16
 8004210:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004212:	1d3b      	adds	r3, r7, #4
 8004214:	4618      	mov	r0, r3
 8004216:	f004 fa48 	bl	80086aa <HAL_RCCEx_PeriphCLKConfig>
 800421a:	4603      	mov	r3, r0
 800421c:	2b00      	cmp	r3, #0
 800421e:	d001      	beq.n	8004224 <SystemClock_Config+0xf4>
  {
    Error_Handler();
 8004220:	f001 f97c 	bl	800551c <Error_Handler>
  LL_PWR_SMPS_SetOutputVoltageLevel(LL_PWR_SMPS_OUTPUT_VOLTAGE_1V40);
  LL_PWR_SMPS_Enable();
#endif

  /* USER CODE END Smps */
}
 8004224:	bf00      	nop
 8004226:	37b8      	adds	r7, #184	; 0xb8
 8004228:	46bd      	mov	sp, r7
 800422a:	bd80      	pop	{r7, pc}
 800422c:	58000400 	.word	0x58000400

08004230 <MX_I2C1_Init>:


static void MX_I2C1_Init(void)
{
 8004230:	b580      	push	{r7, lr}
 8004232:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8004234:	4b1b      	ldr	r3, [pc, #108]	; (80042a4 <MX_I2C1_Init+0x74>)
 8004236:	4a1c      	ldr	r2, [pc, #112]	; (80042a8 <MX_I2C1_Init+0x78>)
 8004238:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00300F38;
 800423a:	4b1a      	ldr	r3, [pc, #104]	; (80042a4 <MX_I2C1_Init+0x74>)
 800423c:	4a1b      	ldr	r2, [pc, #108]	; (80042ac <MX_I2C1_Init+0x7c>)
 800423e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8004240:	4b18      	ldr	r3, [pc, #96]	; (80042a4 <MX_I2C1_Init+0x74>)
 8004242:	2200      	movs	r2, #0
 8004244:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8004246:	4b17      	ldr	r3, [pc, #92]	; (80042a4 <MX_I2C1_Init+0x74>)
 8004248:	2201      	movs	r2, #1
 800424a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800424c:	4b15      	ldr	r3, [pc, #84]	; (80042a4 <MX_I2C1_Init+0x74>)
 800424e:	2200      	movs	r2, #0
 8004250:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8004252:	4b14      	ldr	r3, [pc, #80]	; (80042a4 <MX_I2C1_Init+0x74>)
 8004254:	2200      	movs	r2, #0
 8004256:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8004258:	4b12      	ldr	r3, [pc, #72]	; (80042a4 <MX_I2C1_Init+0x74>)
 800425a:	2200      	movs	r2, #0
 800425c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800425e:	4b11      	ldr	r3, [pc, #68]	; (80042a4 <MX_I2C1_Init+0x74>)
 8004260:	2200      	movs	r2, #0
 8004262:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8004264:	4b0f      	ldr	r3, [pc, #60]	; (80042a4 <MX_I2C1_Init+0x74>)
 8004266:	2200      	movs	r2, #0
 8004268:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800426a:	480e      	ldr	r0, [pc, #56]	; (80042a4 <MX_I2C1_Init+0x74>)
 800426c:	f002 f830 	bl	80062d0 <HAL_I2C_Init>
 8004270:	4603      	mov	r3, r0
 8004272:	2b00      	cmp	r3, #0
 8004274:	d001      	beq.n	800427a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8004276:	f001 f951 	bl	800551c <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800427a:	2100      	movs	r1, #0
 800427c:	4809      	ldr	r0, [pc, #36]	; (80042a4 <MX_I2C1_Init+0x74>)
 800427e:	f002 fdf5 	bl	8006e6c <HAL_I2CEx_ConfigAnalogFilter>
 8004282:	4603      	mov	r3, r0
 8004284:	2b00      	cmp	r3, #0
 8004286:	d001      	beq.n	800428c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8004288:	f001 f948 	bl	800551c <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800428c:	2100      	movs	r1, #0
 800428e:	4805      	ldr	r0, [pc, #20]	; (80042a4 <MX_I2C1_Init+0x74>)
 8004290:	f002 fe37 	bl	8006f02 <HAL_I2CEx_ConfigDigitalFilter>
 8004294:	4603      	mov	r3, r0
 8004296:	2b00      	cmp	r3, #0
 8004298:	d001      	beq.n	800429e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800429a:	f001 f93f 	bl	800551c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800429e:	bf00      	nop
 80042a0:	bd80      	pop	{r7, pc}
 80042a2:	bf00      	nop
 80042a4:	20006108 	.word	0x20006108
 80042a8:	40005400 	.word	0x40005400
 80042ac:	00300f38 	.word	0x00300f38

080042b0 <MX_RF_Init>:
  * @brief RF Initialization Function
  * @param None
  * @retval None
  */
static void MX_RF_Init(void)
{
 80042b0:	b480      	push	{r7}
 80042b2:	af00      	add	r7, sp, #0
  /* USER CODE END RF_Init 1 */
  /* USER CODE BEGIN RF_Init 2 */

  /* USER CODE END RF_Init 2 */

}
 80042b4:	bf00      	nop
 80042b6:	46bd      	mov	sp, r7
 80042b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042bc:	4770      	bx	lr
	...

080042c0 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80042c0:	b580      	push	{r7, lr}
 80042c2:	b086      	sub	sp, #24
 80042c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80042c6:	4b2b      	ldr	r3, [pc, #172]	; (8004374 <MX_RTC_Init+0xb4>)
 80042c8:	4a2b      	ldr	r2, [pc, #172]	; (8004378 <MX_RTC_Init+0xb8>)
 80042ca:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80042cc:	4b29      	ldr	r3, [pc, #164]	; (8004374 <MX_RTC_Init+0xb4>)
 80042ce:	2200      	movs	r2, #0
 80042d0:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80042d2:	4b28      	ldr	r3, [pc, #160]	; (8004374 <MX_RTC_Init+0xb4>)
 80042d4:	227f      	movs	r2, #127	; 0x7f
 80042d6:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80042d8:	4b26      	ldr	r3, [pc, #152]	; (8004374 <MX_RTC_Init+0xb4>)
 80042da:	22ff      	movs	r2, #255	; 0xff
 80042dc:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80042de:	4b25      	ldr	r3, [pc, #148]	; (8004374 <MX_RTC_Init+0xb4>)
 80042e0:	2200      	movs	r2, #0
 80042e2:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80042e4:	4b23      	ldr	r3, [pc, #140]	; (8004374 <MX_RTC_Init+0xb4>)
 80042e6:	2200      	movs	r2, #0
 80042e8:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80042ea:	4b22      	ldr	r3, [pc, #136]	; (8004374 <MX_RTC_Init+0xb4>)
 80042ec:	2200      	movs	r2, #0
 80042ee:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80042f0:	4b20      	ldr	r3, [pc, #128]	; (8004374 <MX_RTC_Init+0xb4>)
 80042f2:	2200      	movs	r2, #0
 80042f4:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80042f6:	481f      	ldr	r0, [pc, #124]	; (8004374 <MX_RTC_Init+0xb4>)
 80042f8:	f004 fc5d 	bl	8008bb6 <HAL_RTC_Init>
 80042fc:	4603      	mov	r3, r0
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d001      	beq.n	8004306 <MX_RTC_Init+0x46>
  {
    Error_Handler();
 8004302:	f001 f90b 	bl	800551c <Error_Handler>
  /* Enable RTC registers write protection */
  //LL_RTC_EnableWriteProtection(RTC);

  /** Initialize RTC and set the Time and Date
    */
    RTC_TimeTypeDef sTime = {0};
 8004306:	1d3b      	adds	r3, r7, #4
 8004308:	2200      	movs	r2, #0
 800430a:	601a      	str	r2, [r3, #0]
 800430c:	605a      	str	r2, [r3, #4]
 800430e:	609a      	str	r2, [r3, #8]
 8004310:	60da      	str	r2, [r3, #12]
 8004312:	611a      	str	r2, [r3, #16]
    RTC_DateTypeDef sDate = {0};
 8004314:	2300      	movs	r3, #0
 8004316:	603b      	str	r3, [r7, #0]

    sTime.Hours = 0x0;
 8004318:	2300      	movs	r3, #0
 800431a:	713b      	strb	r3, [r7, #4]
    sTime.Minutes = 0x0;
 800431c:	2300      	movs	r3, #0
 800431e:	717b      	strb	r3, [r7, #5]
    sTime.Seconds = 0x0;
 8004320:	2300      	movs	r3, #0
 8004322:	71bb      	strb	r3, [r7, #6]
    sTime.SubSeconds = 0x0;
 8004324:	2300      	movs	r3, #0
 8004326:	60bb      	str	r3, [r7, #8]
    sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8004328:	2300      	movs	r3, #0
 800432a:	613b      	str	r3, [r7, #16]
    sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800432c:	2300      	movs	r3, #0
 800432e:	617b      	str	r3, [r7, #20]
    if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8004330:	1d3b      	adds	r3, r7, #4
 8004332:	2201      	movs	r2, #1
 8004334:	4619      	mov	r1, r3
 8004336:	480f      	ldr	r0, [pc, #60]	; (8004374 <MX_RTC_Init+0xb4>)
 8004338:	f004 fcdb 	bl	8008cf2 <HAL_RTC_SetTime>
 800433c:	4603      	mov	r3, r0
 800433e:	2b00      	cmp	r3, #0
 8004340:	d001      	beq.n	8004346 <MX_RTC_Init+0x86>
    {
      Error_Handler();
 8004342:	f001 f8eb 	bl	800551c <Error_Handler>
    }
    sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8004346:	2301      	movs	r3, #1
 8004348:	703b      	strb	r3, [r7, #0]
    sDate.Month = RTC_MONTH_JANUARY;
 800434a:	2301      	movs	r3, #1
 800434c:	707b      	strb	r3, [r7, #1]
    sDate.Date = 0x1;
 800434e:	2301      	movs	r3, #1
 8004350:	70bb      	strb	r3, [r7, #2]
    sDate.Year = 0x0;
 8004352:	2300      	movs	r3, #0
 8004354:	70fb      	strb	r3, [r7, #3]

    if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8004356:	463b      	mov	r3, r7
 8004358:	2201      	movs	r2, #1
 800435a:	4619      	mov	r1, r3
 800435c:	4805      	ldr	r0, [pc, #20]	; (8004374 <MX_RTC_Init+0xb4>)
 800435e:	f004 fde8 	bl	8008f32 <HAL_RTC_SetDate>
 8004362:	4603      	mov	r3, r0
 8004364:	2b00      	cmp	r3, #0
 8004366:	d001      	beq.n	800436c <MX_RTC_Init+0xac>
    {
      Error_Handler();
 8004368:	f001 f8d8 	bl	800551c <Error_Handler>
    }


  /* USER CODE END RTC_Init 2 */

}
 800436c:	bf00      	nop
 800436e:	3718      	adds	r7, #24
 8004370:	46bd      	mov	sp, r7
 8004372:	bd80      	pop	{r7, pc}
 8004374:	20006030 	.word	0x20006030
 8004378:	40002800 	.word	0x40002800

0800437c <MX_SPI1_Init>:



/* USER CODE BEGIN 4 */
static void MX_SPI1_Init(void)
{
 800437c:	b580      	push	{r7, lr}
 800437e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8004380:	4b1b      	ldr	r3, [pc, #108]	; (80043f0 <MX_SPI1_Init+0x74>)
 8004382:	4a1c      	ldr	r2, [pc, #112]	; (80043f4 <MX_SPI1_Init+0x78>)
 8004384:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8004386:	4b1a      	ldr	r3, [pc, #104]	; (80043f0 <MX_SPI1_Init+0x74>)
 8004388:	f44f 7282 	mov.w	r2, #260	; 0x104
 800438c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_1LINE;
 800438e:	4b18      	ldr	r3, [pc, #96]	; (80043f0 <MX_SPI1_Init+0x74>)
 8004390:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8004394:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8004396:	4b16      	ldr	r3, [pc, #88]	; (80043f0 <MX_SPI1_Init+0x74>)
 8004398:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800439c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800439e:	4b14      	ldr	r3, [pc, #80]	; (80043f0 <MX_SPI1_Init+0x74>)
 80043a0:	2200      	movs	r2, #0
 80043a2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80043a4:	4b12      	ldr	r3, [pc, #72]	; (80043f0 <MX_SPI1_Init+0x74>)
 80043a6:	2200      	movs	r2, #0
 80043a8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80043aa:	4b11      	ldr	r3, [pc, #68]	; (80043f0 <MX_SPI1_Init+0x74>)
 80043ac:	f44f 7200 	mov.w	r2, #512	; 0x200
 80043b0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80043b2:	4b0f      	ldr	r3, [pc, #60]	; (80043f0 <MX_SPI1_Init+0x74>)
 80043b4:	2200      	movs	r2, #0
 80043b6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80043b8:	4b0d      	ldr	r3, [pc, #52]	; (80043f0 <MX_SPI1_Init+0x74>)
 80043ba:	2200      	movs	r2, #0
 80043bc:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80043be:	4b0c      	ldr	r3, [pc, #48]	; (80043f0 <MX_SPI1_Init+0x74>)
 80043c0:	2200      	movs	r2, #0
 80043c2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80043c4:	4b0a      	ldr	r3, [pc, #40]	; (80043f0 <MX_SPI1_Init+0x74>)
 80043c6:	2200      	movs	r2, #0
 80043c8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80043ca:	4b09      	ldr	r3, [pc, #36]	; (80043f0 <MX_SPI1_Init+0x74>)
 80043cc:	2207      	movs	r2, #7
 80043ce:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80043d0:	4b07      	ldr	r3, [pc, #28]	; (80043f0 <MX_SPI1_Init+0x74>)
 80043d2:	2200      	movs	r2, #0
 80043d4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80043d6:	4b06      	ldr	r3, [pc, #24]	; (80043f0 <MX_SPI1_Init+0x74>)
 80043d8:	2208      	movs	r2, #8
 80043da:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80043dc:	4804      	ldr	r0, [pc, #16]	; (80043f0 <MX_SPI1_Init+0x74>)
 80043de:	f004 ff65 	bl	80092ac <HAL_SPI_Init>
 80043e2:	4603      	mov	r3, r0
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d001      	beq.n	80043ec <MX_SPI1_Init+0x70>
  {
    Error_Handler();
 80043e8:	f001 f898 	bl	800551c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80043ec:	bf00      	nop
 80043ee:	bd80      	pop	{r7, pc}
 80043f0:	200061c8 	.word	0x200061c8
 80043f4:	40013000 	.word	0x40013000

080043f8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80043f8:	b580      	push	{r7, lr}
 80043fa:	b09c      	sub	sp, #112	; 0x70
 80043fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80043fe:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8004402:	2200      	movs	r2, #0
 8004404:	601a      	str	r2, [r3, #0]
 8004406:	605a      	str	r2, [r3, #4]
 8004408:	609a      	str	r2, [r3, #8]
 800440a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800440c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8004410:	2200      	movs	r2, #0
 8004412:	601a      	str	r2, [r3, #0]
 8004414:	605a      	str	r2, [r3, #4]
 8004416:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004418:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800441c:	2200      	movs	r2, #0
 800441e:	601a      	str	r2, [r3, #0]
 8004420:	605a      	str	r2, [r3, #4]
 8004422:	609a      	str	r2, [r3, #8]
 8004424:	60da      	str	r2, [r3, #12]
 8004426:	611a      	str	r2, [r3, #16]
 8004428:	615a      	str	r2, [r3, #20]
 800442a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800442c:	1d3b      	adds	r3, r7, #4
 800442e:	2234      	movs	r2, #52	; 0x34
 8004430:	2100      	movs	r1, #0
 8004432:	4618      	mov	r0, r3
 8004434:	f00d fbb5 	bl	8011ba2 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8004438:	4b45      	ldr	r3, [pc, #276]	; (8004550 <MX_TIM1_Init+0x158>)
 800443a:	4a46      	ldr	r2, [pc, #280]	; (8004554 <MX_TIM1_Init+0x15c>)
 800443c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800443e:	4b44      	ldr	r3, [pc, #272]	; (8004550 <MX_TIM1_Init+0x158>)
 8004440:	2200      	movs	r2, #0
 8004442:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004444:	4b42      	ldr	r3, [pc, #264]	; (8004550 <MX_TIM1_Init+0x158>)
 8004446:	2200      	movs	r2, #0
 8004448:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 100;
 800444a:	4b41      	ldr	r3, [pc, #260]	; (8004550 <MX_TIM1_Init+0x158>)
 800444c:	2264      	movs	r2, #100	; 0x64
 800444e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004450:	4b3f      	ldr	r3, [pc, #252]	; (8004550 <MX_TIM1_Init+0x158>)
 8004452:	2200      	movs	r2, #0
 8004454:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8004456:	4b3e      	ldr	r3, [pc, #248]	; (8004550 <MX_TIM1_Init+0x158>)
 8004458:	2200      	movs	r2, #0
 800445a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800445c:	4b3c      	ldr	r3, [pc, #240]	; (8004550 <MX_TIM1_Init+0x158>)
 800445e:	2200      	movs	r2, #0
 8004460:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8004462:	483b      	ldr	r0, [pc, #236]	; (8004550 <MX_TIM1_Init+0x158>)
 8004464:	f005 fa90 	bl	8009988 <HAL_TIM_Base_Init>
 8004468:	4603      	mov	r3, r0
 800446a:	2b00      	cmp	r3, #0
 800446c:	d001      	beq.n	8004472 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 800446e:	f001 f855 	bl	800551c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004472:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004476:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8004478:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800447c:	4619      	mov	r1, r3
 800447e:	4834      	ldr	r0, [pc, #208]	; (8004550 <MX_TIM1_Init+0x158>)
 8004480:	f005 ff1c 	bl	800a2bc <HAL_TIM_ConfigClockSource>
 8004484:	4603      	mov	r3, r0
 8004486:	2b00      	cmp	r3, #0
 8004488:	d001      	beq.n	800448e <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 800448a:	f001 f847 	bl	800551c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800448e:	4830      	ldr	r0, [pc, #192]	; (8004550 <MX_TIM1_Init+0x158>)
 8004490:	f005 fb20 	bl	8009ad4 <HAL_TIM_PWM_Init>
 8004494:	4603      	mov	r3, r0
 8004496:	2b00      	cmp	r3, #0
 8004498:	d001      	beq.n	800449e <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 800449a:	f001 f83f 	bl	800551c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800449e:	2300      	movs	r3, #0
 80044a0:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80044a2:	2300      	movs	r3, #0
 80044a4:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80044a6:	2300      	movs	r3, #0
 80044a8:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80044aa:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80044ae:	4619      	mov	r1, r3
 80044b0:	4827      	ldr	r0, [pc, #156]	; (8004550 <MX_TIM1_Init+0x158>)
 80044b2:	f006 fb89 	bl	800abc8 <HAL_TIMEx_MasterConfigSynchronization>
 80044b6:	4603      	mov	r3, r0
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d001      	beq.n	80044c0 <MX_TIM1_Init+0xc8>
  {
    Error_Handler();
 80044bc:	f001 f82e 	bl	800551c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80044c0:	2360      	movs	r3, #96	; 0x60
 80044c2:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 100;
 80044c4:	2364      	movs	r3, #100	; 0x64
 80044c6:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80044c8:	2300      	movs	r3, #0
 80044ca:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80044cc:	2300      	movs	r3, #0
 80044ce:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 80044d0:	2304      	movs	r3, #4
 80044d2:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80044d4:	2300      	movs	r3, #0
 80044d6:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80044d8:	2300      	movs	r3, #0
 80044da:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80044dc:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80044e0:	2200      	movs	r2, #0
 80044e2:	4619      	mov	r1, r3
 80044e4:	481a      	ldr	r0, [pc, #104]	; (8004550 <MX_TIM1_Init+0x158>)
 80044e6:	f005 fdd9 	bl	800a09c <HAL_TIM_PWM_ConfigChannel>
 80044ea:	4603      	mov	r3, r0
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d001      	beq.n	80044f4 <MX_TIM1_Init+0xfc>
  {
    Error_Handler();
 80044f0:	f001 f814 	bl	800551c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80044f4:	2300      	movs	r3, #0
 80044f6:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80044f8:	2300      	movs	r3, #0
 80044fa:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80044fc:	2300      	movs	r3, #0
 80044fe:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8004500:	2300      	movs	r3, #0
 8004502:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8004504:	2300      	movs	r3, #0
 8004506:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8004508:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800450c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800450e:	2300      	movs	r3, #0
 8004510:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8004512:	2300      	movs	r3, #0
 8004514:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8004516:	2300      	movs	r3, #0
 8004518:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800451a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800451e:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8004520:	2300      	movs	r3, #0
 8004522:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8004524:	2300      	movs	r3, #0
 8004526:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8004528:	2300      	movs	r3, #0
 800452a:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800452c:	1d3b      	adds	r3, r7, #4
 800452e:	4619      	mov	r1, r3
 8004530:	4807      	ldr	r0, [pc, #28]	; (8004550 <MX_TIM1_Init+0x158>)
 8004532:	f006 fba9 	bl	800ac88 <HAL_TIMEx_ConfigBreakDeadTime>
 8004536:	4603      	mov	r3, r0
 8004538:	2b00      	cmp	r3, #0
 800453a:	d001      	beq.n	8004540 <MX_TIM1_Init+0x148>
  {
    Error_Handler();
 800453c:	f000 ffee 	bl	800551c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8004540:	4803      	ldr	r0, [pc, #12]	; (8004550 <MX_TIM1_Init+0x158>)
 8004542:	f001 f93b 	bl	80057bc <HAL_TIM_MspPostInit>

}
 8004546:	bf00      	nop
 8004548:	3770      	adds	r7, #112	; 0x70
 800454a:	46bd      	mov	sp, r7
 800454c:	bd80      	pop	{r7, pc}
 800454e:	bf00      	nop
 8004550:	20006174 	.word	0x20006174
 8004554:	40012c00 	.word	0x40012c00

08004558 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8004558:	b580      	push	{r7, lr}
 800455a:	b086      	sub	sp, #24
 800455c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800455e:	1d3b      	adds	r3, r7, #4
 8004560:	2200      	movs	r2, #0
 8004562:	601a      	str	r2, [r3, #0]
 8004564:	605a      	str	r2, [r3, #4]
 8004566:	609a      	str	r2, [r3, #8]
 8004568:	60da      	str	r2, [r3, #12]
 800456a:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800456c:	2004      	movs	r0, #4
 800456e:	f7ff fc5f 	bl	8003e30 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004572:	2002      	movs	r0, #2
 8004574:	f7ff fc5c 	bl	8003e30 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004578:	2001      	movs	r0, #1
 800457a:	f7ff fc59 	bl	8003e30 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OLED_RESET_GPIO_Port, OLED_RESET_Pin, GPIO_PIN_RESET);
 800457e:	2200      	movs	r2, #0
 8004580:	2101      	movs	r1, #1
 8004582:	4821      	ldr	r0, [pc, #132]	; (8004608 <MX_GPIO_Init+0xb0>)
 8004584:	f001 fe50 	bl	8006228 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : OLED_RESET_Pin */
  GPIO_InitStruct.Pin = OLED_RESET_Pin;
 8004588:	2301      	movs	r3, #1
 800458a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800458c:	2301      	movs	r3, #1
 800458e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004590:	2300      	movs	r3, #0
 8004592:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004594:	2300      	movs	r3, #0
 8004596:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(OLED_RESET_GPIO_Port, &GPIO_InitStruct);
 8004598:	1d3b      	adds	r3, r7, #4
 800459a:	4619      	mov	r1, r3
 800459c:	481a      	ldr	r0, [pc, #104]	; (8004608 <MX_GPIO_Init+0xb0>)
 800459e:	f001 fcbb 	bl	8005f18 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON_1_Pin BUTTON_2_Pin BUTTON_3_Pin */
  GPIO_InitStruct.Pin = BUTTON_1_Pin|BUTTON_2_Pin|BUTTON_3_Pin;
 80045a2:	2338      	movs	r3, #56	; 0x38
 80045a4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80045a6:	4b19      	ldr	r3, [pc, #100]	; (800460c <MX_GPIO_Init+0xb4>)
 80045a8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80045aa:	2301      	movs	r3, #1
 80045ac:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80045ae:	1d3b      	adds	r3, r7, #4
 80045b0:	4619      	mov	r1, r3
 80045b2:	4815      	ldr	r0, [pc, #84]	; (8004608 <MX_GPIO_Init+0xb0>)
 80045b4:	f001 fcb0 	bl	8005f18 <HAL_GPIO_Init>

  /*Configure SPI_NSS pin to be GPIO, pulled up*/
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 80045b8:	2310      	movs	r3, #16
 80045ba:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80045bc:	2301      	movs	r3, #1
 80045be:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80045c0:	2301      	movs	r3, #1
 80045c2:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80045c4:	1d3b      	adds	r3, r7, #4
 80045c6:	4619      	mov	r1, r3
 80045c8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80045cc:	f001 fca4 	bl	8005f18 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI3_IRQn, 15, 0);
 80045d0:	2200      	movs	r2, #0
 80045d2:	210f      	movs	r1, #15
 80045d4:	2009      	movs	r0, #9
 80045d6:	f001 fc4d 	bl	8005e74 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 80045da:	2009      	movs	r0, #9
 80045dc:	f001 fc64 	bl	8005ea8 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 15, 0);
 80045e0:	2200      	movs	r2, #0
 80045e2:	210f      	movs	r1, #15
 80045e4:	200a      	movs	r0, #10
 80045e6:	f001 fc45 	bl	8005e74 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 80045ea:	200a      	movs	r0, #10
 80045ec:	f001 fc5c 	bl	8005ea8 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 15, 0);
 80045f0:	2200      	movs	r2, #0
 80045f2:	210f      	movs	r1, #15
 80045f4:	2017      	movs	r0, #23
 80045f6:	f001 fc3d 	bl	8005e74 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80045fa:	2017      	movs	r0, #23
 80045fc:	f001 fc54 	bl	8005ea8 <HAL_NVIC_EnableIRQ>

}
 8004600:	bf00      	nop
 8004602:	3718      	adds	r7, #24
 8004604:	46bd      	mov	sp, r7
 8004606:	bd80      	pop	{r7, pc}
 8004608:	48000400 	.word	0x48000400
 800460c:	10310000 	.word	0x10310000

08004610 <HAL_GPIO_EXTI_Callback>:
static inline void clear_bit(long *x, int bitNum) {
    *x &= (~(1L << bitNum));
}


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8004610:	b580      	push	{r7, lr}
 8004612:	b086      	sub	sp, #24
 8004614:	af02      	add	r7, sp, #8
 8004616:	4603      	mov	r3, r0
 8004618:	80fb      	strh	r3, [r7, #6]

	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 800461a:	2300      	movs	r3, #0
 800461c:	60fb      	str	r3, [r7, #12]
	xTaskNotifyFromISR(buttonPressHandle, GPIO_Pin, eSetValueWithOverwrite, &xHigherPriorityTaskWoken);
 800461e:	4b0c      	ldr	r3, [pc, #48]	; (8004650 <HAL_GPIO_EXTI_Callback+0x40>)
 8004620:	6818      	ldr	r0, [r3, #0]
 8004622:	88f9      	ldrh	r1, [r7, #6]
 8004624:	f107 030c 	add.w	r3, r7, #12
 8004628:	9300      	str	r3, [sp, #0]
 800462a:	2300      	movs	r3, #0
 800462c:	2203      	movs	r2, #3
 800462e:	f00c fdc9 	bl	80111c4 <xTaskGenericNotifyFromISR>
	portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	2b00      	cmp	r3, #0
 8004636:	d007      	beq.n	8004648 <HAL_GPIO_EXTI_Callback+0x38>
 8004638:	4b06      	ldr	r3, [pc, #24]	; (8004654 <HAL_GPIO_EXTI_Callback+0x44>)
 800463a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800463e:	601a      	str	r2, [r3, #0]
 8004640:	f3bf 8f4f 	dsb	sy
 8004644:	f3bf 8f6f 	isb	sy

}
 8004648:	bf00      	nop
 800464a:	3710      	adds	r7, #16
 800464c:	46bd      	mov	sp, r7
 800464e:	bd80      	pop	{r7, pc}
 8004650:	200060fc 	.word	0x200060fc
 8004654:	e000ed04 	.word	0xe000ed04

08004658 <get_RTC_hrmin>:
    return full_rtc_val;

}


void get_RTC_hrmin(char *dest) {
 8004658:	b580      	push	{r7, lr}
 800465a:	b08c      	sub	sp, #48	; 0x30
 800465c:	af00      	add	r7, sp, #0
 800465e:	6078      	str	r0, [r7, #4]

    RTC_TimeTypeDef cTime;
    RTC_DateTypeDef cDate;

    osMutexAcquire(rtcMutexHandle, portMAX_DELAY);
 8004660:	4b1d      	ldr	r3, [pc, #116]	; (80046d8 <get_RTC_hrmin+0x80>)
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	f04f 31ff 	mov.w	r1, #4294967295
 8004668:	4618      	mov	r0, r3
 800466a:	f009 fb3b 	bl	800dce4 <osMutexAcquire>
    HAL_RTC_GetTime(&hrtc, &cTime, RTC_FORMAT_BCD);
 800466e:	f107 0318 	add.w	r3, r7, #24
 8004672:	2201      	movs	r2, #1
 8004674:	4619      	mov	r1, r3
 8004676:	4819      	ldr	r0, [pc, #100]	; (80046dc <get_RTC_hrmin+0x84>)
 8004678:	f004 fbff 	bl	8008e7a <HAL_RTC_GetTime>
    //must get date as well; RTC shadow registers will error if both aren't accessed
    HAL_RTC_GetDate(&hrtc, &cDate, RTC_FORMAT_BCD);
 800467c:	f107 0314 	add.w	r3, r7, #20
 8004680:	2201      	movs	r2, #1
 8004682:	4619      	mov	r1, r3
 8004684:	4815      	ldr	r0, [pc, #84]	; (80046dc <get_RTC_hrmin+0x84>)
 8004686:	f004 fd02 	bl	800908e <HAL_RTC_GetDate>
    osMutexRelease(rtcMutexHandle);
 800468a:	4b13      	ldr	r3, [pc, #76]	; (80046d8 <get_RTC_hrmin+0x80>)
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	4618      	mov	r0, r3
 8004690:	f009 fb86 	bl	800dda0 <osMutexRelease>

    uint8_t  hrs = RTC_Bcd2ToByte(cTime.Hours);
 8004694:	7e3b      	ldrb	r3, [r7, #24]
 8004696:	4618      	mov	r0, r3
 8004698:	f004 fdb6 	bl	8009208 <RTC_Bcd2ToByte>
 800469c:	4603      	mov	r3, r0
 800469e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    uint8_t mins = RTC_Bcd2ToByte(cTime.Minutes);
 80046a2:	7e7b      	ldrb	r3, [r7, #25]
 80046a4:	4618      	mov	r0, r3
 80046a6:	f004 fdaf 	bl	8009208 <RTC_Bcd2ToByte>
 80046aa:	4603      	mov	r3, r0
 80046ac:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

    char time[5];
    sprintf (time, "%02d%02d", hrs, mins);
 80046b0:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 80046b4:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80046b8:	f107 000c 	add.w	r0, r7, #12
 80046bc:	4908      	ldr	r1, [pc, #32]	; (80046e0 <get_RTC_hrmin+0x88>)
 80046be:	f00e f809 	bl	80126d4 <siprintf>

    strncpy(dest, time, sizeof(time));
 80046c2:	f107 030c 	add.w	r3, r7, #12
 80046c6:	2205      	movs	r2, #5
 80046c8:	4619      	mov	r1, r3
 80046ca:	6878      	ldr	r0, [r7, #4]
 80046cc:	f00e f822 	bl	8012714 <strncpy>

}
 80046d0:	bf00      	nop
 80046d2:	3730      	adds	r7, #48	; 0x30
 80046d4:	46bd      	mov	sp, r7
 80046d6:	bd80      	pop	{r7, pc}
 80046d8:	20006054 	.word	0x20006054
 80046dc:	20006030 	.word	0x20006030
 80046e0:	08014ee0 	.word	0x08014ee0

080046e4 <startScreenUpdate>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_startScreenUpdate */
void startScreenUpdate(void *argument)
{
 80046e4:	b580      	push	{r7, lr}
 80046e6:	f5ad 7d04 	sub.w	sp, sp, #528	; 0x210
 80046ea:	af02      	add	r7, sp, #8
 80046ec:	1d3b      	adds	r3, r7, #4
 80046ee:	6018      	str	r0, [r3, #0]
  /* USER CODE BEGIN 5 */
  HAL_GPIO_WritePin(OLED_RESET_GPIO_Port, OLED_RESET_Pin, GPIO_PIN_SET);
 80046f0:	2201      	movs	r2, #1
 80046f2:	2101      	movs	r1, #1
 80046f4:	4892      	ldr	r0, [pc, #584]	; (8004940 <startScreenUpdate+0x25c>)
 80046f6:	f001 fd97 	bl	8006228 <HAL_GPIO_WritePin>

  uint8_t oled_buf[WIDTH * HEIGHT / 8];

  er_oled_begin();
 80046fa:	f7fd fe8d 	bl	8002418 <er_oled_begin>
  er_oled_clear(oled_buf);
 80046fe:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8004702:	4618      	mov	r0, r3
 8004704:	f7fd fef0 	bl	80024e8 <er_oled_clear>
  er_oled_string(6, 14, "DRAMSAY", 12, 1, oled_buf);
 8004708:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800470c:	9301      	str	r3, [sp, #4]
 800470e:	2301      	movs	r3, #1
 8004710:	9300      	str	r3, [sp, #0]
 8004712:	230c      	movs	r3, #12
 8004714:	4a8b      	ldr	r2, [pc, #556]	; (8004944 <startScreenUpdate+0x260>)
 8004716:	210e      	movs	r1, #14
 8004718:	2006      	movs	r0, #6
 800471a:	f7fe f855 	bl	80027c8 <er_oled_string>
  er_oled_display(oled_buf);
 800471e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8004722:	4618      	mov	r0, r3
 8004724:	f7fe f8db 	bl	80028de <er_oled_display>

  osDelay(3000);
 8004728:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800472c:	f009 fa12 	bl	800db54 <osDelay>
  er_oled_clear(oled_buf);
 8004730:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8004734:	4618      	mov	r0, r3
 8004736:	f7fd fed7 	bl	80024e8 <er_oled_clear>
  er_oled_display(oled_buf);
 800473a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800473e:	4618      	mov	r0, r3
 8004740:	f7fe f8cd 	bl	80028de <er_oled_display>


  ScreenStatus_t screenStatus= SCREEN_TIME;
 8004744:	f107 039b 	add.w	r3, r7, #155	; 0x9b
 8004748:	2201      	movs	r2, #1
 800474a:	701a      	strb	r2, [r3, #0]
  /* Infinite loop */
  for(;;)
  {

	  	//wait for someone to update screen state elsewhere and notify
	  	xTaskNotifyWait(0x00, 0x00, &screenStatus, portMAX_DELAY);
 800474c:	f107 029b 	add.w	r2, r7, #155	; 0x9b
 8004750:	f04f 33ff 	mov.w	r3, #4294967295
 8004754:	2100      	movs	r1, #0
 8004756:	2000      	movs	r0, #0
 8004758:	f00c fc24 	bl	8010fa4 <xTaskNotifyWait>
	  	switch(screenStatus){
 800475c:	f107 039b 	add.w	r3, r7, #155	; 0x9b
 8004760:	781b      	ldrb	r3, [r3, #0]
 8004762:	3b01      	subs	r3, #1
 8004764:	2b03      	cmp	r3, #3
 8004766:	f200 80d2 	bhi.w	800490e <startScreenUpdate+0x22a>
 800476a:	a201      	add	r2, pc, #4	; (adr r2, 8004770 <startScreenUpdate+0x8c>)
 800476c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004770:	08004781 	.word	0x08004781
 8004774:	080047b1 	.word	0x080047b1
 8004778:	0800489b 	.word	0x0800489b
 800477c:	080047cd 	.word	0x080047cd

	  			case SCREEN_TIME:

	  				//only hrmin
	  				get_RTC_hrmin(time);
 8004780:	f107 030c 	add.w	r3, r7, #12
 8004784:	4618      	mov	r0, r3
 8004786:	f7ff ff67 	bl	8004658 <get_RTC_hrmin>
	  				er_oled_time(time);
 800478a:	f107 030c 	add.w	r3, r7, #12
 800478e:	4618      	mov	r0, r3
 8004790:	f7fe f8dd 	bl	800294e <er_oled_time>
	  				//er_oled_clear(oled_buf);
	  				//er_oled_string(0, 14, time, 12, 1, oled_buf);
	  				//er_oled_display(oled_buf);

	  				//notify BLE
	  				bleval = 0x6100;
 8004794:	f107 030a 	add.w	r3, r7, #10
 8004798:	f44f 42c2 	mov.w	r2, #24832	; 0x6100
 800479c:	801a      	strh	r2, [r3, #0]
	  				osMessageQueuePut(bleTXqueueHandle, &bleval, 0, 0);
 800479e:	4b6a      	ldr	r3, [pc, #424]	; (8004948 <startScreenUpdate+0x264>)
 80047a0:	6818      	ldr	r0, [r3, #0]
 80047a2:	f107 010a 	add.w	r1, r7, #10
 80047a6:	2300      	movs	r3, #0
 80047a8:	2200      	movs	r2, #0
 80047aa:	f009 fd2b 	bl	800e204 <osMessageQueuePut>

	  				break;
 80047ae:	e0c6      	b.n	800493e <startScreenUpdate+0x25a>
	  			case SCREEN_TOUCH_TRACK:

	  				//NOT IMPLEMENTED

	  				//notify BLE
	  				bleval = 0x6200;
 80047b0:	f107 030a 	add.w	r3, r7, #10
 80047b4:	f44f 42c4 	mov.w	r2, #25088	; 0x6200
 80047b8:	801a      	strh	r2, [r3, #0]
	  			    osMessageQueuePut(bleTXqueueHandle, &bleval, 0, 0);
 80047ba:	4b63      	ldr	r3, [pc, #396]	; (8004948 <startScreenUpdate+0x264>)
 80047bc:	6818      	ldr	r0, [r3, #0]
 80047be:	f107 010a 	add.w	r1, r7, #10
 80047c2:	2300      	movs	r3, #0
 80047c4:	2200      	movs	r2, #0
 80047c6:	f009 fd1d 	bl	800e204 <osMessageQueuePut>

	  				break;
 80047ca:	e0b8      	b.n	800493e <startScreenUpdate+0x25a>

	  			case SCREEN_IMAGE:

	  				er_oled_clear(oled_buf);
 80047cc:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80047d0:	4618      	mov	r0, r3
 80047d2:	f7fd fe89 	bl	80024e8 <er_oled_clear>

	  				osMutexAcquire(screenTextMutexHandle, portMAX_DELAY);
 80047d6:	4b5d      	ldr	r3, [pc, #372]	; (800494c <startScreenUpdate+0x268>)
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	f04f 31ff 	mov.w	r1, #4294967295
 80047de:	4618      	mov	r0, r3
 80047e0:	f009 fa80 	bl	800dce4 <osMutexAcquire>
	  				imageNum = ScreenState.screenImage;
 80047e4:	4b5a      	ldr	r3, [pc, #360]	; (8004950 <startScreenUpdate+0x26c>)
 80047e6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80047ea:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
	  				osMutexRelease(screenTextMutexHandle);
 80047ee:	4b57      	ldr	r3, [pc, #348]	; (800494c <startScreenUpdate+0x268>)
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	4618      	mov	r0, r3
 80047f4:	f009 fad4 	bl	800dda0 <osMutexRelease>

	  				if (imageNum == 1){er_oled_bitmap(0, 0, PIC1, 72, 40, oled_buf);}
 80047f8:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 80047fc:	2b01      	cmp	r3, #1
 80047fe:	d10b      	bne.n	8004818 <startScreenUpdate+0x134>
 8004800:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8004804:	9301      	str	r3, [sp, #4]
 8004806:	2328      	movs	r3, #40	; 0x28
 8004808:	9300      	str	r3, [sp, #0]
 800480a:	2348      	movs	r3, #72	; 0x48
 800480c:	4a51      	ldr	r2, [pc, #324]	; (8004954 <startScreenUpdate+0x270>)
 800480e:	2100      	movs	r1, #0
 8004810:	2000      	movs	r0, #0
 8004812:	f7fe f81a 	bl	800284a <er_oled_bitmap>
 8004816:	e01a      	b.n	800484e <startScreenUpdate+0x16a>
	  				else if (imageNum == 2) {er_oled_bitmap(0, 0, PIC2, 72, 40, oled_buf);}
 8004818:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 800481c:	2b02      	cmp	r3, #2
 800481e:	d10b      	bne.n	8004838 <startScreenUpdate+0x154>
 8004820:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8004824:	9301      	str	r3, [sp, #4]
 8004826:	2328      	movs	r3, #40	; 0x28
 8004828:	9300      	str	r3, [sp, #0]
 800482a:	2348      	movs	r3, #72	; 0x48
 800482c:	4a4a      	ldr	r2, [pc, #296]	; (8004958 <startScreenUpdate+0x274>)
 800482e:	2100      	movs	r1, #0
 8004830:	2000      	movs	r0, #0
 8004832:	f7fe f80a 	bl	800284a <er_oled_bitmap>
 8004836:	e00a      	b.n	800484e <startScreenUpdate+0x16a>
	  				else {er_oled_string(0, 14, "invalid image number", 24, 1, oled_buf);}
 8004838:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800483c:	9301      	str	r3, [sp, #4]
 800483e:	2301      	movs	r3, #1
 8004840:	9300      	str	r3, [sp, #0]
 8004842:	2318      	movs	r3, #24
 8004844:	4a45      	ldr	r2, [pc, #276]	; (800495c <startScreenUpdate+0x278>)
 8004846:	210e      	movs	r1, #14
 8004848:	2000      	movs	r0, #0
 800484a:	f7fd ffbd 	bl	80027c8 <er_oled_string>

	  				er_oled_display(oled_buf);
 800484e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8004852:	4618      	mov	r0, r3
 8004854:	f7fe f843 	bl	80028de <er_oled_display>
	  				osDelay(100);
 8004858:	2064      	movs	r0, #100	; 0x64
 800485a:	f009 f97b 	bl	800db54 <osDelay>
	  				command(0xa7);//--set Negative display
 800485e:	2100      	movs	r1, #0
 8004860:	20a7      	movs	r0, #167	; 0xa7
 8004862:	f7fd fdbb 	bl	80023dc <I2C_Write_Byte>
	  				osDelay(100);
 8004866:	2064      	movs	r0, #100	; 0x64
 8004868:	f009 f974 	bl	800db54 <osDelay>
	  				command(0xa6);//--set normal display
 800486c:	2100      	movs	r1, #0
 800486e:	20a6      	movs	r0, #166	; 0xa6
 8004870:	f7fd fdb4 	bl	80023dc <I2C_Write_Byte>

	  				//notify BLE
	  				bleval = 0x6400 | imageNum;
 8004874:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 8004878:	b21b      	sxth	r3, r3
 800487a:	f443 43c8 	orr.w	r3, r3, #25600	; 0x6400
 800487e:	b21b      	sxth	r3, r3
 8004880:	b29a      	uxth	r2, r3
 8004882:	f107 030a 	add.w	r3, r7, #10
 8004886:	801a      	strh	r2, [r3, #0]
	  				osMessageQueuePut(bleTXqueueHandle, &bleval, 0, 0);
 8004888:	4b2f      	ldr	r3, [pc, #188]	; (8004948 <startScreenUpdate+0x264>)
 800488a:	6818      	ldr	r0, [r3, #0]
 800488c:	f107 010a 	add.w	r1, r7, #10
 8004890:	2300      	movs	r3, #0
 8004892:	2200      	movs	r2, #0
 8004894:	f009 fcb6 	bl	800e204 <osMessageQueuePut>

	  				break;
 8004898:	e051      	b.n	800493e <startScreenUpdate+0x25a>

	  			case SCREEN_TEXT:

	  				osMutexAcquire(screenTextMutexHandle, portMAX_DELAY);
 800489a:	4b2c      	ldr	r3, [pc, #176]	; (800494c <startScreenUpdate+0x268>)
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	f04f 31ff 	mov.w	r1, #4294967295
 80048a2:	4618      	mov	r0, r3
 80048a4:	f009 fa1e 	bl	800dce4 <osMutexAcquire>
	  				strncpy(screenText, ScreenState.screenText, sizeof(ScreenState.screenText));
 80048a8:	f107 0318 	add.w	r3, r7, #24
 80048ac:	2280      	movs	r2, #128	; 0x80
 80048ae:	4928      	ldr	r1, [pc, #160]	; (8004950 <startScreenUpdate+0x26c>)
 80048b0:	4618      	mov	r0, r3
 80048b2:	f00d ff2f 	bl	8012714 <strncpy>
	  				osMutexRelease(screenTextMutexHandle);
 80048b6:	4b25      	ldr	r3, [pc, #148]	; (800494c <startScreenUpdate+0x268>)
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	4618      	mov	r0, r3
 80048bc:	f009 fa70 	bl	800dda0 <osMutexRelease>
	  				er_oled_clear(oled_buf);
 80048c0:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80048c4:	4618      	mov	r0, r3
 80048c6:	f7fd fe0f 	bl	80024e8 <er_oled_clear>
	  				er_oled_string(0, 14, screenText, 12, 1, oled_buf);
 80048ca:	f107 0218 	add.w	r2, r7, #24
 80048ce:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80048d2:	9301      	str	r3, [sp, #4]
 80048d4:	2301      	movs	r3, #1
 80048d6:	9300      	str	r3, [sp, #0]
 80048d8:	230c      	movs	r3, #12
 80048da:	210e      	movs	r1, #14
 80048dc:	2000      	movs	r0, #0
 80048de:	f7fd ff73 	bl	80027c8 <er_oled_string>
	  				er_oled_display(oled_buf);
 80048e2:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80048e6:	4618      	mov	r0, r3
 80048e8:	f7fd fff9 	bl	80028de <er_oled_display>
	  				osDelay(5);
 80048ec:	2005      	movs	r0, #5
 80048ee:	f009 f931 	bl	800db54 <osDelay>

	  				//notify BLE
	  			    bleval = 0x6300 | sizeof(ScreenState.screenText);
 80048f2:	f107 030a 	add.w	r3, r7, #10
 80048f6:	f44f 42c7 	mov.w	r2, #25472	; 0x6380
 80048fa:	801a      	strh	r2, [r3, #0]
	  				osMessageQueuePut(bleTXqueueHandle, &bleval, 0, 0);
 80048fc:	4b12      	ldr	r3, [pc, #72]	; (8004948 <startScreenUpdate+0x264>)
 80048fe:	6818      	ldr	r0, [r3, #0]
 8004900:	f107 010a 	add.w	r1, r7, #10
 8004904:	2300      	movs	r3, #0
 8004906:	2200      	movs	r2, #0
 8004908:	f009 fc7c 	bl	800e204 <osMessageQueuePut>

	  				break;
 800490c:	e017      	b.n	800493e <startScreenUpdate+0x25a>

	  			default: //includes SCREEN_OFF
	  				er_oled_clear(oled_buf);
 800490e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8004912:	4618      	mov	r0, r3
 8004914:	f7fd fde8 	bl	80024e8 <er_oled_clear>
	  				er_oled_display(oled_buf);
 8004918:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800491c:	4618      	mov	r0, r3
 800491e:	f7fd ffde 	bl	80028de <er_oled_display>

	  				//notify BLE
	  				bleval = 0x6000;
 8004922:	f107 030a 	add.w	r3, r7, #10
 8004926:	f44f 42c0 	mov.w	r2, #24576	; 0x6000
 800492a:	801a      	strh	r2, [r3, #0]
	  				osMessageQueuePut(bleTXqueueHandle, &bleval, 0, 0);
 800492c:	4b06      	ldr	r3, [pc, #24]	; (8004948 <startScreenUpdate+0x264>)
 800492e:	6818      	ldr	r0, [r3, #0]
 8004930:	f107 010a 	add.w	r1, r7, #10
 8004934:	2300      	movs	r3, #0
 8004936:	2200      	movs	r2, #0
 8004938:	f009 fc64 	bl	800e204 <osMessageQueuePut>

	  				break;
 800493c:	bf00      	nop
	  	xTaskNotifyWait(0x00, 0x00, &screenStatus, portMAX_DELAY);
 800493e:	e705      	b.n	800474c <startScreenUpdate+0x68>
 8004940:	48000400 	.word	0x48000400
 8004944:	08014efc 	.word	0x08014efc
 8004948:	200061c0 	.word	0x200061c0
 800494c:	20006024 	.word	0x20006024
 8004950:	20006058 	.word	0x20006058
 8004954:	08015ea0 	.word	0x08015ea0
 8004958:	08016008 	.word	0x08016008
 800495c:	08014f04 	.word	0x08014f04

08004960 <startLEDControl>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_startLEDControl */
void startLEDControl(void *argument)
{
 8004960:	b580      	push	{r7, lr}
 8004962:	b08a      	sub	sp, #40	; 0x28
 8004964:	af00      	add	r7, sp, #0
 8004966:	6078      	str	r0, [r7, #4]
    //osMutexAcquire(ledStateMutexHandle, portMAX_DELAY);
   	//LedState.currentMode = LED_CONFIRM_FLASH;
   	//osMutexRelease(ledStateMutexHandle);

  //For LED to work on new board (multiplexed with SPI_NSS), we need to pull PA4 high
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8004968:	2201      	movs	r2, #1
 800496a:	2110      	movs	r1, #16
 800496c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004970:	f001 fc5a 	bl	8006228 <HAL_GPIO_WritePin>


  //LedState Init
  osMutexAcquire(ledStateMutexHandle, portMAX_DELAY);
 8004974:	4b98      	ldr	r3, [pc, #608]	; (8004bd8 <startLEDControl+0x278>)
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	f04f 31ff 	mov.w	r1, #4294967295
 800497c:	4618      	mov	r0, r3
 800497e:	f009 f9b1 	bl	800dce4 <osMutexAcquire>
  LedState.currentMode = LED_SPIRAL;
 8004982:	4b96      	ldr	r3, [pc, #600]	; (8004bdc <startLEDControl+0x27c>)
 8004984:	2205      	movs	r2, #5
 8004986:	701a      	strb	r2, [r3, #0]
  LedState.nextMode = LED_OFF;
 8004988:	4b94      	ldr	r3, [pc, #592]	; (8004bdc <startLEDControl+0x27c>)
 800498a:	2201      	movs	r2, #1
 800498c:	705a      	strb	r2, [r3, #1]
  LedState.modeTimeout = pdMS_TO_TICKS(5000);
 800498e:	4b93      	ldr	r3, [pc, #588]	; (8004bdc <startLEDControl+0x27c>)
 8004990:	f241 3288 	movw	r2, #5000	; 0x1388
 8004994:	605a      	str	r2, [r3, #4]
  osMutexRelease(ledStateMutexHandle);
 8004996:	4b90      	ldr	r3, [pc, #576]	; (8004bd8 <startLEDControl+0x278>)
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	4618      	mov	r0, r3
 800499c:	f009 fa00 	bl	800dda0 <osMutexRelease>

  //Dotstar Init
  DotStar_InitHandle dotstar;
  dotstar.spiHandle = &hspi1;
 80049a0:	4b8f      	ldr	r3, [pc, #572]	; (8004be0 <startLEDControl+0x280>)
 80049a2:	60fb      	str	r3, [r7, #12]
  dotstar.numLEDs = NUM_PIXELS;
 80049a4:	230c      	movs	r3, #12
 80049a6:	823b      	strh	r3, [r7, #16]
  dotstar.colorOrder = DOTSTAR_BGR;
 80049a8:	2306      	movs	r3, #6
 80049aa:	74bb      	strb	r3, [r7, #18]
  Dotstar_Init(&dotstar);
 80049ac:	f107 030c 	add.w	r3, r7, #12
 80049b0:	4618      	mov	r0, r3
 80049b2:	f7fd fb85 	bl	80020c0 <Dotstar_Init>

  ds_clear();  //turn off
 80049b6:	f7fd fc6f 	bl	8002298 <ds_clear>
  ds_show();
 80049ba:	f7fd fbd1 	bl	8002160 <ds_show>

  const uint8_t STANDARD_BRIGHTNESS = 20; //20, 0-255
 80049be:	2314      	movs	r3, #20
 80049c0:	75fb      	strb	r3, [r7, #23]
  const uint8_t MAX_BRIGHTNESS = 0x33; //max brightness, 0x01-0xFF
 80049c2:	2333      	movs	r3, #51	; 0x33
 80049c4:	75bb      	strb	r3, [r7, #22]

  ds_setBrightness(STANDARD_BRIGHTNESS);
 80049c6:	7dfb      	ldrb	r3, [r7, #23]
 80049c8:	4618      	mov	r0, r3
 80049ca:	f7fd fcf5 	bl	80023b8 <ds_setBrightness>
  osDelay(1000);
 80049ce:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80049d2:	f009 f8bf 	bl	800db54 <osDelay>

  LedStatus_t currentMode;
  LedStatus_t lastLoopMode = LED_OFF;
 80049d6:	2301      	movs	r3, #1
 80049d8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  uint16_t counter = 0;
 80049dc:	2300      	movs	r3, #0
 80049de:	84bb      	strh	r3, [r7, #36]	; 0x24
  uint8_t stateVar1 = 0;
 80049e0:	2300      	movs	r3, #0
 80049e2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t stateVar2 = 0;
 80049e6:	2300      	movs	r3, #0
 80049e8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  uint32_t color = 0x000000;
 80049ec:	2300      	movs	r3, #0
 80049ee:	61fb      	str	r3, [r7, #28]
  /* Infinite loop */
  for(;;)
  {
    //check state, get mode, call timer if necessary

    osMutexAcquire(ledStateMutexHandle, portMAX_DELAY);
 80049f0:	4b79      	ldr	r3, [pc, #484]	; (8004bd8 <startLEDControl+0x278>)
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	f04f 31ff 	mov.w	r1, #4294967295
 80049f8:	4618      	mov	r0, r3
 80049fa:	f009 f973 	bl	800dce4 <osMutexAcquire>
	currentMode = LedState.currentMode;
 80049fe:	4b77      	ldr	r3, [pc, #476]	; (8004bdc <startLEDControl+0x27c>)
 8004a00:	781b      	ldrb	r3, [r3, #0]
 8004a02:	757b      	strb	r3, [r7, #21]
	if (LedState.modeTimeout){
 8004a04:	4b75      	ldr	r3, [pc, #468]	; (8004bdc <startLEDControl+0x27c>)
 8004a06:	685b      	ldr	r3, [r3, #4]
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d006      	beq.n	8004a1a <startLEDControl+0xba>
		xTaskNotifyGive(LEDTimerHandle);
 8004a0c:	4b75      	ldr	r3, [pc, #468]	; (8004be4 <startLEDControl+0x284>)
 8004a0e:	6818      	ldr	r0, [r3, #0]
 8004a10:	2300      	movs	r3, #0
 8004a12:	2202      	movs	r2, #2
 8004a14:	2100      	movs	r1, #0
 8004a16:	f00c fb1f 	bl	8011058 <xTaskGenericNotify>
	}
	osMutexRelease(ledStateMutexHandle);
 8004a1a:	4b6f      	ldr	r3, [pc, #444]	; (8004bd8 <startLEDControl+0x278>)
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	4618      	mov	r0, r3
 8004a20:	f009 f9be 	bl	800dda0 <osMutexRelease>

	//reset count if we've switched modes
	if (lastLoopMode != currentMode) { counter = 0; stateVar1 = 0; stateVar2 = 0;}
 8004a24:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8004a28:	7d7b      	ldrb	r3, [r7, #21]
 8004a2a:	429a      	cmp	r2, r3
 8004a2c:	d007      	beq.n	8004a3e <startLEDControl+0xde>
 8004a2e:	2300      	movs	r3, #0
 8004a30:	84bb      	strh	r3, [r7, #36]	; 0x24
 8004a32:	2300      	movs	r3, #0
 8004a34:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004a38:	2300      	movs	r3, #0
 8004a3a:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

	switch(currentMode){
 8004a3e:	7d7b      	ldrb	r3, [r7, #21]
 8004a40:	3b02      	subs	r3, #2
 8004a42:	2b03      	cmp	r3, #3
 8004a44:	f200 80b3 	bhi.w	8004bae <startLEDControl+0x24e>
 8004a48:	a201      	add	r2, pc, #4	; (adr r2, 8004a50 <startLEDControl+0xf0>)
 8004a4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a4e:	bf00      	nop
 8004a50:	08004bc9 	.word	0x08004bc9
 8004a54:	08004bc9 	.word	0x08004bc9
 8004a58:	08004a61 	.word	0x08004a61
 8004a5c:	08004b07 	.word	0x08004b07

			break;
		case LED_CONFIRM_FLASH:

			//each color go from 00 to MAX_BRIGHTNESS to 00 over a second, 1000Hz=sec, ~512 steps, 2ms
			if (lastLoopMode != currentMode) { ds_fill(0xFFFFFF, 0, 12);}
 8004a60:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8004a64:	7d7b      	ldrb	r3, [r7, #21]
 8004a66:	429a      	cmp	r2, r3
 8004a68:	d005      	beq.n	8004a76 <startLEDControl+0x116>
 8004a6a:	220c      	movs	r2, #12
 8004a6c:	2100      	movs	r1, #0
 8004a6e:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8004a72:	f7fd fc6b 	bl	800234c <ds_fill>
		    ds_setBrightness(stateVar1);
 8004a76:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004a7a:	4618      	mov	r0, r3
 8004a7c:	f7fd fc9c 	bl	80023b8 <ds_setBrightness>
			ds_show();
 8004a80:	f7fd fb6e 	bl	8002160 <ds_show>

		    //increment color intensity
		    if (stateVar2) {stateVar1--;}
 8004a84:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d005      	beq.n	8004a98 <startLEDControl+0x138>
 8004a8c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004a90:	3b01      	subs	r3, #1
 8004a92:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004a96:	e004      	b.n	8004aa2 <startLEDControl+0x142>
		    else {stateVar1++;}
 8004a98:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004a9c:	3301      	adds	r3, #1
 8004a9e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

		    //if we hit a limit switch color scaling up or down
		    if (stateVar1 == MAX_BRIGHTNESS) {stateVar2 = 1;}
 8004aa2:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8004aa6:	7dbb      	ldrb	r3, [r7, #22]
 8004aa8:	429a      	cmp	r2, r3
 8004aaa:	d102      	bne.n	8004ab2 <startLEDControl+0x152>
 8004aac:	2301      	movs	r3, #1
 8004aae:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
		    if (stateVar1 == 0x00) {stateVar2 = 0;}
 8004ab2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d102      	bne.n	8004ac0 <startLEDControl+0x160>
 8004aba:	2300      	movs	r3, #0
 8004abc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

			osDelay(pdMS_TO_TICKS(2)); //2ms delay
 8004ac0:	2002      	movs	r0, #2
 8004ac2:	f009 f847 	bl	800db54 <osDelay>

			if (++counter == (MAX_BRIGHTNESS*4)) { //if we hit 1 cycle here (= MAX_BRIGHTNESS*2,could *4 to set to two full cycles), set state to off
 8004ac6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004ac8:	3301      	adds	r3, #1
 8004aca:	84bb      	strh	r3, [r7, #36]	; 0x24
 8004acc:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004ace:	7dbb      	ldrb	r3, [r7, #22]
 8004ad0:	009b      	lsls	r3, r3, #2
 8004ad2:	429a      	cmp	r2, r3
 8004ad4:	d17a      	bne.n	8004bcc <startLEDControl+0x26c>
				ds_clear();
 8004ad6:	f7fd fbdf 	bl	8002298 <ds_clear>
				ds_show();
 8004ada:	f7fd fb41 	bl	8002160 <ds_show>
				ds_setBrightness(STANDARD_BRIGHTNESS);
 8004ade:	7dfb      	ldrb	r3, [r7, #23]
 8004ae0:	4618      	mov	r0, r3
 8004ae2:	f7fd fc69 	bl	80023b8 <ds_setBrightness>

				osMutexAcquire(ledStateMutexHandle, portMAX_DELAY);
 8004ae6:	4b3c      	ldr	r3, [pc, #240]	; (8004bd8 <startLEDControl+0x278>)
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	f04f 31ff 	mov.w	r1, #4294967295
 8004aee:	4618      	mov	r0, r3
 8004af0:	f009 f8f8 	bl	800dce4 <osMutexAcquire>
				LedState.currentMode = LED_OFF;
 8004af4:	4b39      	ldr	r3, [pc, #228]	; (8004bdc <startLEDControl+0x27c>)
 8004af6:	2201      	movs	r2, #1
 8004af8:	701a      	strb	r2, [r3, #0]
				osMutexRelease(ledStateMutexHandle);
 8004afa:	4b37      	ldr	r3, [pc, #220]	; (8004bd8 <startLEDControl+0x278>)
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	4618      	mov	r0, r3
 8004b00:	f009 f94e 	bl	800dda0 <osMutexRelease>
			}

			break;
 8004b04:	e062      	b.n	8004bcc <startLEDControl+0x26c>

		case LED_SPIRAL:

			//rotate fixed pattern around 12
			//modulo 12
			for (int i=0; i< NUM_PIXELS; i++){
 8004b06:	2300      	movs	r3, #0
 8004b08:	61bb      	str	r3, [r7, #24]
 8004b0a:	e038      	b.n	8004b7e <startLEDControl+0x21e>

				if (i==(counter+2)%12){ color = 0xFFFFFF; }
 8004b0c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004b0e:	1c99      	adds	r1, r3, #2
 8004b10:	4b35      	ldr	r3, [pc, #212]	; (8004be8 <startLEDControl+0x288>)
 8004b12:	fb83 2301 	smull	r2, r3, r3, r1
 8004b16:	105a      	asrs	r2, r3, #1
 8004b18:	17cb      	asrs	r3, r1, #31
 8004b1a:	1ad2      	subs	r2, r2, r3
 8004b1c:	4613      	mov	r3, r2
 8004b1e:	005b      	lsls	r3, r3, #1
 8004b20:	4413      	add	r3, r2
 8004b22:	009b      	lsls	r3, r3, #2
 8004b24:	1aca      	subs	r2, r1, r3
 8004b26:	69bb      	ldr	r3, [r7, #24]
 8004b28:	4293      	cmp	r3, r2
 8004b2a:	d103      	bne.n	8004b34 <startLEDControl+0x1d4>
 8004b2c:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8004b30:	61fb      	str	r3, [r7, #28]
 8004b32:	e01b      	b.n	8004b6c <startLEDControl+0x20c>
				else if (i==(counter+1)%12){ color = 0xD0D0D0; }
 8004b34:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004b36:	1c59      	adds	r1, r3, #1
 8004b38:	4b2b      	ldr	r3, [pc, #172]	; (8004be8 <startLEDControl+0x288>)
 8004b3a:	fb83 2301 	smull	r2, r3, r3, r1
 8004b3e:	105a      	asrs	r2, r3, #1
 8004b40:	17cb      	asrs	r3, r1, #31
 8004b42:	1ad2      	subs	r2, r2, r3
 8004b44:	4613      	mov	r3, r2
 8004b46:	005b      	lsls	r3, r3, #1
 8004b48:	4413      	add	r3, r2
 8004b4a:	009b      	lsls	r3, r3, #2
 8004b4c:	1aca      	subs	r2, r1, r3
 8004b4e:	69bb      	ldr	r3, [r7, #24]
 8004b50:	4293      	cmp	r3, r2
 8004b52:	d102      	bne.n	8004b5a <startLEDControl+0x1fa>
 8004b54:	4b25      	ldr	r3, [pc, #148]	; (8004bec <startLEDControl+0x28c>)
 8004b56:	61fb      	str	r3, [r7, #28]
 8004b58:	e008      	b.n	8004b6c <startLEDControl+0x20c>
				else if (i==counter)       { color = 0xA0A0A0; }
 8004b5a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004b5c:	69ba      	ldr	r2, [r7, #24]
 8004b5e:	429a      	cmp	r2, r3
 8004b60:	d102      	bne.n	8004b68 <startLEDControl+0x208>
 8004b62:	4b23      	ldr	r3, [pc, #140]	; (8004bf0 <startLEDControl+0x290>)
 8004b64:	61fb      	str	r3, [r7, #28]
 8004b66:	e001      	b.n	8004b6c <startLEDControl+0x20c>
				else { color = 0x000000; }
 8004b68:	2300      	movs	r3, #0
 8004b6a:	61fb      	str	r3, [r7, #28]

				ds_setPixelColor32B(i, color); // 'off' pixel at head
 8004b6c:	69bb      	ldr	r3, [r7, #24]
 8004b6e:	b29b      	uxth	r3, r3
 8004b70:	69f9      	ldr	r1, [r7, #28]
 8004b72:	4618      	mov	r0, r3
 8004b74:	f7fd fbb4 	bl	80022e0 <ds_setPixelColor32B>
			for (int i=0; i< NUM_PIXELS; i++){
 8004b78:	69bb      	ldr	r3, [r7, #24]
 8004b7a:	3301      	adds	r3, #1
 8004b7c:	61bb      	str	r3, [r7, #24]
 8004b7e:	69bb      	ldr	r3, [r7, #24]
 8004b80:	2b0b      	cmp	r3, #11
 8004b82:	ddc3      	ble.n	8004b0c <startLEDControl+0x1ac>
			}

			ds_show();
 8004b84:	f7fd faec 	bl	8002160 <ds_show>
			counter = (counter+1)%12;
 8004b88:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004b8a:	1c5a      	adds	r2, r3, #1
 8004b8c:	4b16      	ldr	r3, [pc, #88]	; (8004be8 <startLEDControl+0x288>)
 8004b8e:	fb83 1302 	smull	r1, r3, r3, r2
 8004b92:	1059      	asrs	r1, r3, #1
 8004b94:	17d3      	asrs	r3, r2, #31
 8004b96:	1ac9      	subs	r1, r1, r3
 8004b98:	460b      	mov	r3, r1
 8004b9a:	005b      	lsls	r3, r3, #1
 8004b9c:	440b      	add	r3, r1
 8004b9e:	009b      	lsls	r3, r3, #2
 8004ba0:	1ad1      	subs	r1, r2, r3
 8004ba2:	460b      	mov	r3, r1
 8004ba4:	84bb      	strh	r3, [r7, #36]	; 0x24
			osDelay(pdMS_TO_TICKS(50));
 8004ba6:	2032      	movs	r0, #50	; 0x32
 8004ba8:	f008 ffd4 	bl	800db54 <osDelay>

			break;
 8004bac:	e00f      	b.n	8004bce <startLEDControl+0x26e>

		default: //case LED_OTHER, LED_OFF, LED_NONE
			if (lastLoopMode != currentMode) {
 8004bae:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8004bb2:	7d7b      	ldrb	r3, [r7, #21]
 8004bb4:	429a      	cmp	r2, r3
 8004bb6:	d003      	beq.n	8004bc0 <startLEDControl+0x260>
				ds_clear();
 8004bb8:	f7fd fb6e 	bl	8002298 <ds_clear>
				ds_show();
 8004bbc:	f7fd fad0 	bl	8002160 <ds_show>
			}
			osDelay(250);
 8004bc0:	20fa      	movs	r0, #250	; 0xfa
 8004bc2:	f008 ffc7 	bl	800db54 <osDelay>
			break;
 8004bc6:	e002      	b.n	8004bce <startLEDControl+0x26e>
			break;
 8004bc8:	bf00      	nop
 8004bca:	e000      	b.n	8004bce <startLEDControl+0x26e>
			break;
 8004bcc:	bf00      	nop
	}

	lastLoopMode = currentMode;
 8004bce:	7d7b      	ldrb	r3, [r7, #21]
 8004bd0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    osMutexAcquire(ledStateMutexHandle, portMAX_DELAY);
 8004bd4:	e70c      	b.n	80049f0 <startLEDControl+0x90>
 8004bd6:	bf00      	nop
 8004bd8:	20006170 	.word	0x20006170
 8004bdc:	20006158 	.word	0x20006158
 8004be0:	200061c8 	.word	0x200061c8
 8004be4:	20006104 	.word	0x20006104
 8004be8:	2aaaaaab 	.word	0x2aaaaaab
 8004bec:	00d0d0d0 	.word	0x00d0d0d0
 8004bf0:	00a0a0a0 	.word	0x00a0a0a0

08004bf4 <startButtonPress>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_startButtonPress */
void startButtonPress(void *argument)
{
 8004bf4:	b580      	push	{r7, lr}
 8004bf6:	b086      	sub	sp, #24
 8004bf8:	af00      	add	r7, sp, #0
 8004bfa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN startButtonPress */
  /* Infinite loop */

  //Buttons are PULLED UP and drop to 0 when pressed
  uint8_t buttonState[] = {1, 1, 1};
 8004bfc:	4a44      	ldr	r2, [pc, #272]	; (8004d10 <startButtonPress+0x11c>)
 8004bfe:	f107 0314 	add.w	r3, r7, #20
 8004c02:	6812      	ldr	r2, [r2, #0]
 8004c04:	4611      	mov	r1, r2
 8004c06:	8019      	strh	r1, [r3, #0]
 8004c08:	3302      	adds	r3, #2
 8004c0a:	0c12      	lsrs	r2, r2, #16
 8004c0c:	701a      	strb	r2, [r3, #0]
  uint32_t callingPin = 0x00;
 8004c0e:	2300      	movs	r3, #0
 8004c10:	613b      	str	r3, [r7, #16]

  for(;;)
  {
	//wait for rising or falling edge trigger, put calling pin in callingPin
	xTaskNotifyWait(0x00, 0x00, &callingPin, portMAX_DELAY);
 8004c12:	f107 0210 	add.w	r2, r7, #16
 8004c16:	f04f 33ff 	mov.w	r3, #4294967295
 8004c1a:	2100      	movs	r1, #0
 8004c1c:	2000      	movs	r0, #0
 8004c1e:	f00c f9c1 	bl	8010fa4 <xTaskNotifyWait>

	//check state of pin
	GPIO_PinState first_read = HAL_GPIO_ReadPin(GPIOB, callingPin);
 8004c22:	693b      	ldr	r3, [r7, #16]
 8004c24:	b29b      	uxth	r3, r3
 8004c26:	4619      	mov	r1, r3
 8004c28:	483a      	ldr	r0, [pc, #232]	; (8004d14 <startButtonPress+0x120>)
 8004c2a:	f001 fae5 	bl	80061f8 <HAL_GPIO_ReadPin>
 8004c2e:	4603      	mov	r3, r0
 8004c30:	75fb      	strb	r3, [r7, #23]

	//wait 50ms
    osDelay(50);
 8004c32:	2032      	movs	r0, #50	; 0x32
 8004c34:	f008 ff8e 	bl	800db54 <osDelay>

    //check again (debounce) to get a good reading
	if (first_read == HAL_GPIO_ReadPin(GPIOB, callingPin)){
 8004c38:	693b      	ldr	r3, [r7, #16]
 8004c3a:	b29b      	uxth	r3, r3
 8004c3c:	4619      	mov	r1, r3
 8004c3e:	4835      	ldr	r0, [pc, #212]	; (8004d14 <startButtonPress+0x120>)
 8004c40:	f001 fada 	bl	80061f8 <HAL_GPIO_ReadPin>
 8004c44:	4603      	mov	r3, r0
 8004c46:	461a      	mov	r2, r3
 8004c48:	7dfb      	ldrb	r3, [r7, #23]
 8004c4a:	4293      	cmp	r3, r2
 8004c4c:	d1e1      	bne.n	8004c12 <startButtonPress+0x1e>
		//when this happens (except during debouncing) so we expect this to be true
		//almost always

		//callingPin can be used as bitmask Pin 5/4/3 give 1000000/10000/1000

		if (callingPin == 0b1000 && first_read != buttonState[0]) { //button 1 trigger
 8004c4e:	693b      	ldr	r3, [r7, #16]
 8004c50:	2b08      	cmp	r3, #8
 8004c52:	d11b      	bne.n	8004c8c <startButtonPress+0x98>
 8004c54:	7d3b      	ldrb	r3, [r7, #20]
 8004c56:	7dfa      	ldrb	r2, [r7, #23]
 8004c58:	429a      	cmp	r2, r3
 8004c5a:	d017      	beq.n	8004c8c <startButtonPress+0x98>
		  //set buttonState
		  buttonState[0] = first_read;
 8004c5c:	7dfb      	ldrb	r3, [r7, #23]
 8004c5e:	753b      	strb	r3, [r7, #20]

		  //do stuff if button pressed
		  if (!first_read){
 8004c60:	7dfb      	ldrb	r3, [r7, #23]
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d102      	bne.n	8004c6c <startButtonPress+0x78>
		       	osDelay(100);
 8004c66:	2064      	movs	r0, #100	; 0x64
 8004c68:	f008 ff74 	bl	800db54 <osDelay>
		  } else { //do stuff if button is released

		  }

		  //send BLE queue indicator; button 1 = 0x0
		  uint16_t bleval = 0x0000 | ((!first_read) << 8);
 8004c6c:	7dfb      	ldrb	r3, [r7, #23]
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d102      	bne.n	8004c78 <startButtonPress+0x84>
 8004c72:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004c76:	e000      	b.n	8004c7a <startButtonPress+0x86>
 8004c78:	2300      	movs	r3, #0
 8004c7a:	81fb      	strh	r3, [r7, #14]
		  osMessageQueuePut(bleTXqueueHandle, &bleval, 0, 0);
 8004c7c:	4b26      	ldr	r3, [pc, #152]	; (8004d18 <startButtonPress+0x124>)
 8004c7e:	6818      	ldr	r0, [r3, #0]
 8004c80:	f107 010e 	add.w	r1, r7, #14
 8004c84:	2300      	movs	r3, #0
 8004c86:	2200      	movs	r2, #0
 8004c88:	f009 fabc 	bl	800e204 <osMessageQueuePut>
		}
		if (callingPin == 0b10000 && first_read != buttonState[1]) { //button 2 trigger
 8004c8c:	693b      	ldr	r3, [r7, #16]
 8004c8e:	2b10      	cmp	r3, #16
 8004c90:	d11c      	bne.n	8004ccc <startButtonPress+0xd8>
 8004c92:	7d7b      	ldrb	r3, [r7, #21]
 8004c94:	7dfa      	ldrb	r2, [r7, #23]
 8004c96:	429a      	cmp	r2, r3
 8004c98:	d018      	beq.n	8004ccc <startButtonPress+0xd8>
		    //set buttonState
		    buttonState[1] = first_read;
 8004c9a:	7dfb      	ldrb	r3, [r7, #23]
 8004c9c:	757b      	strb	r3, [r7, #21]

		    //do stuff if button pressed
		    if (!first_read){
 8004c9e:	7dfb      	ldrb	r3, [r7, #23]
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d102      	bne.n	8004caa <startButtonPress+0xb6>
		       	osDelay(100);
 8004ca4:	2064      	movs	r0, #100	; 0x64
 8004ca6:	f008 ff55 	bl	800db54 <osDelay>
		    } else { //do stuff if button is released

			}

		    //send BLE queue indicator; button 2 = 0x1
		    uint16_t bleval = 0x1000 | ((!first_read) << 8);
 8004caa:	7dfb      	ldrb	r3, [r7, #23]
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d102      	bne.n	8004cb6 <startButtonPress+0xc2>
 8004cb0:	f44f 5388 	mov.w	r3, #4352	; 0x1100
 8004cb4:	e001      	b.n	8004cba <startButtonPress+0xc6>
 8004cb6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004cba:	81bb      	strh	r3, [r7, #12]
		    osMessageQueuePut(bleTXqueueHandle, &bleval, 0, 0);
 8004cbc:	4b16      	ldr	r3, [pc, #88]	; (8004d18 <startButtonPress+0x124>)
 8004cbe:	6818      	ldr	r0, [r3, #0]
 8004cc0:	f107 010c 	add.w	r1, r7, #12
 8004cc4:	2300      	movs	r3, #0
 8004cc6:	2200      	movs	r2, #0
 8004cc8:	f009 fa9c 	bl	800e204 <osMessageQueuePut>
		}
		if (callingPin == 0b100000 && first_read != buttonState[2]) { //button 3 trigger
 8004ccc:	693b      	ldr	r3, [r7, #16]
 8004cce:	2b20      	cmp	r3, #32
 8004cd0:	d19f      	bne.n	8004c12 <startButtonPress+0x1e>
 8004cd2:	7dbb      	ldrb	r3, [r7, #22]
 8004cd4:	7dfa      	ldrb	r2, [r7, #23]
 8004cd6:	429a      	cmp	r2, r3
 8004cd8:	d09b      	beq.n	8004c12 <startButtonPress+0x1e>
		    //set buttonState
		    buttonState[2] = first_read;
 8004cda:	7dfb      	ldrb	r3, [r7, #23]
 8004cdc:	75bb      	strb	r3, [r7, #22]

		    //do stuff if button pressed
		    if (!first_read){
 8004cde:	7dfb      	ldrb	r3, [r7, #23]
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d102      	bne.n	8004cea <startButtonPress+0xf6>
		    	osDelay(100);
 8004ce4:	2064      	movs	r0, #100	; 0x64
 8004ce6:	f008 ff35 	bl	800db54 <osDelay>
		    }  else { //do stuff if button is released

			}

		    //send BLE queue indicator; button 3 = 0x2
		    uint16_t bleval = 0x2000 | ((!first_read) << 8);
 8004cea:	7dfb      	ldrb	r3, [r7, #23]
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d102      	bne.n	8004cf6 <startButtonPress+0x102>
 8004cf0:	f44f 5304 	mov.w	r3, #8448	; 0x2100
 8004cf4:	e001      	b.n	8004cfa <startButtonPress+0x106>
 8004cf6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004cfa:	817b      	strh	r3, [r7, #10]
		    osMessageQueuePut(bleTXqueueHandle, &bleval, 0, 0);
 8004cfc:	4b06      	ldr	r3, [pc, #24]	; (8004d18 <startButtonPress+0x124>)
 8004cfe:	6818      	ldr	r0, [r3, #0]
 8004d00:	f107 010a 	add.w	r1, r7, #10
 8004d04:	2300      	movs	r3, #0
 8004d06:	2200      	movs	r2, #0
 8004d08:	f009 fa7c 	bl	800e204 <osMessageQueuePut>
  {
 8004d0c:	e781      	b.n	8004c12 <startButtonPress+0x1e>
 8004d0e:	bf00      	nop
 8004d10:	08014f1c 	.word	0x08014f1c
 8004d14:	48000400 	.word	0x48000400
 8004d18:	200061c0 	.word	0x200061c0

08004d1c <startVibrateControl>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_startVibrateControl */
void startVibrateControl(void *argument)
{
 8004d1c:	b580      	push	{r7, lr}
 8004d1e:	b086      	sub	sp, #24
 8004d20:	af00      	add	r7, sp, #0
 8004d22:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN startVibrateControl */

  //HAL_GPIO_WritePin(VIBRATION_GPIO_Port, VIBRATION_Pin, GPIO_PIN_RESET);

  //Init Vibration Motor PWM Parameters
  int duty_cycle = 79; //0 is off, up to ~80
 8004d24:	234f      	movs	r3, #79	; 0x4f
 8004d26:	617b      	str	r3, [r7, #20]
  htim1.Instance->CCR2 = duty_cycle;
 8004d28:	4b18      	ldr	r3, [pc, #96]	; (8004d8c <startVibrateControl+0x70>)
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	697a      	ldr	r2, [r7, #20]
 8004d2e:	639a      	str	r2, [r3, #56]	; 0x38

  uint32_t pulse_dur = 1000;
 8004d30:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004d34:	613b      	str	r3, [r7, #16]
  uint16_t bleval;

  /* Infinite loop */
  for(;;)
  {
	xTaskNotifyWait(0x00, 0x00, &pulse_dur, portMAX_DELAY);
 8004d36:	f107 0210 	add.w	r2, r7, #16
 8004d3a:	f04f 33ff 	mov.w	r3, #4294967295
 8004d3e:	2100      	movs	r1, #0
 8004d40:	2000      	movs	r0, #0
 8004d42:	f00c f92f 	bl	8010fa4 <xTaskNotifyWait>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8004d46:	2100      	movs	r1, #0
 8004d48:	4810      	ldr	r0, [pc, #64]	; (8004d8c <startVibrateControl+0x70>)
 8004d4a:	f004 ff25 	bl	8009b98 <HAL_TIM_PWM_Start>

	//notify BLE
    bleval = 0x3100;
 8004d4e:	f44f 5344 	mov.w	r3, #12544	; 0x3100
 8004d52:	81fb      	strh	r3, [r7, #14]
	osMessageQueuePut(bleTXqueueHandle, &bleval, 0, 0);
 8004d54:	4b0e      	ldr	r3, [pc, #56]	; (8004d90 <startVibrateControl+0x74>)
 8004d56:	6818      	ldr	r0, [r3, #0]
 8004d58:	f107 010e 	add.w	r1, r7, #14
 8004d5c:	2300      	movs	r3, #0
 8004d5e:	2200      	movs	r2, #0
 8004d60:	f009 fa50 	bl	800e204 <osMessageQueuePut>

    osDelay(pulse_dur);
 8004d64:	693b      	ldr	r3, [r7, #16]
 8004d66:	4618      	mov	r0, r3
 8004d68:	f008 fef4 	bl	800db54 <osDelay>

    HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 8004d6c:	2100      	movs	r1, #0
 8004d6e:	4807      	ldr	r0, [pc, #28]	; (8004d8c <startVibrateControl+0x70>)
 8004d70:	f004 ffec 	bl	8009d4c <HAL_TIM_PWM_Stop>

    bleval = 0x3000;
 8004d74:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8004d78:	81fb      	strh	r3, [r7, #14]
   	osMessageQueuePut(bleTXqueueHandle, &bleval, 0, 0);
 8004d7a:	4b05      	ldr	r3, [pc, #20]	; (8004d90 <startVibrateControl+0x74>)
 8004d7c:	6818      	ldr	r0, [r3, #0]
 8004d7e:	f107 010e 	add.w	r1, r7, #14
 8004d82:	2300      	movs	r3, #0
 8004d84:	2200      	movs	r2, #0
 8004d86:	f009 fa3d 	bl	800e204 <osMessageQueuePut>
	xTaskNotifyWait(0x00, 0x00, &pulse_dur, portMAX_DELAY);
 8004d8a:	e7d4      	b.n	8004d36 <startVibrateControl+0x1a>
 8004d8c:	20006174 	.word	0x20006174
 8004d90:	200061c0 	.word	0x200061c0

08004d94 <startRTCTick>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_startRTCTick */
void startRTCTick(void *argument)
{
 8004d94:	b580      	push	{r7, lr}
 8004d96:	b088      	sub	sp, #32
 8004d98:	af00      	add	r7, sp, #0
 8004d9a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN startRTCTick */

	RTC_TimeTypeDef sTime = {0};
 8004d9c:	f107 0308 	add.w	r3, r7, #8
 8004da0:	2200      	movs	r2, #0
 8004da2:	601a      	str	r2, [r3, #0]
 8004da4:	605a      	str	r2, [r3, #4]
 8004da6:	609a      	str	r2, [r3, #8]
 8004da8:	60da      	str	r2, [r3, #12]
 8004daa:	611a      	str	r2, [r3, #16]
    sTime.Hours      = 0x15;
 8004dac:	2315      	movs	r3, #21
 8004dae:	723b      	strb	r3, [r7, #8]
    sTime.Minutes    = 0x41;
 8004db0:	2341      	movs	r3, #65	; 0x41
 8004db2:	727b      	strb	r3, [r7, #9]
    sTime.Seconds    = 0x57;
 8004db4:	2357      	movs	r3, #87	; 0x57
 8004db6:	72bb      	strb	r3, [r7, #10]
    sTime.SubSeconds = 0x0;
 8004db8:	2300      	movs	r3, #0
 8004dba:	60fb      	str	r3, [r7, #12]
    sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8004dbc:	2300      	movs	r3, #0
 8004dbe:	617b      	str	r3, [r7, #20]
   	sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8004dc0:	2300      	movs	r3, #0
 8004dc2:	61bb      	str	r3, [r7, #24]

   	osMutexAcquire(rtcMutexHandle, portMAX_DELAY);
 8004dc4:	4b70      	ldr	r3, [pc, #448]	; (8004f88 <startRTCTick+0x1f4>)
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	f04f 31ff 	mov.w	r1, #4294967295
 8004dcc:	4618      	mov	r0, r3
 8004dce:	f008 ff89 	bl	800dce4 <osMutexAcquire>
	if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK) {
 8004dd2:	f107 0308 	add.w	r3, r7, #8
 8004dd6:	2201      	movs	r2, #1
 8004dd8:	4619      	mov	r1, r3
 8004dda:	486c      	ldr	r0, [pc, #432]	; (8004f8c <startRTCTick+0x1f8>)
 8004ddc:	f003 ff89 	bl	8008cf2 <HAL_RTC_SetTime>
 8004de0:	4603      	mov	r3, r0
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d001      	beq.n	8004dea <startRTCTick+0x56>
	    Error_Handler();
 8004de6:	f000 fb99 	bl	800551c <Error_Handler>
	}
	osMutexRelease(rtcMutexHandle);
 8004dea:	4b67      	ldr	r3, [pc, #412]	; (8004f88 <startRTCTick+0x1f4>)
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	4618      	mov	r0, r3
 8004df0:	f008 ffd6 	bl	800dda0 <osMutexRelease>

  /* Infinite loop */
  for(;;)
  {
    osDelay(1000);
 8004df4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004df8:	f008 feac 	bl	800db54 <osDelay>

    osMutexAcquire(ledStateMutexHandle, portMAX_DELAY);
 8004dfc:	4b64      	ldr	r3, [pc, #400]	; (8004f90 <startRTCTick+0x1fc>)
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	f04f 31ff 	mov.w	r1, #4294967295
 8004e04:	4618      	mov	r0, r3
 8004e06:	f008 ff6d 	bl	800dce4 <osMutexAcquire>
    LedState.currentMode = LED_SPIRAL;
 8004e0a:	4b62      	ldr	r3, [pc, #392]	; (8004f94 <startRTCTick+0x200>)
 8004e0c:	2205      	movs	r2, #5
 8004e0e:	701a      	strb	r2, [r3, #0]
    osMutexRelease(ledStateMutexHandle);
 8004e10:	4b5f      	ldr	r3, [pc, #380]	; (8004f90 <startRTCTick+0x1fc>)
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	4618      	mov	r0, r3
 8004e16:	f008 ffc3 	bl	800dda0 <osMutexRelease>

    osDelay(1000);
 8004e1a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004e1e:	f008 fe99 	bl	800db54 <osDelay>

    ScreenStatus_t newScreen = SCREEN_TIME;
 8004e22:	2301      	movs	r3, #1
 8004e24:	77fb      	strb	r3, [r7, #31]
    xTaskNotify(screenUpdateHandle, (uint32_t)newScreen, eSetValueWithOverwrite);
 8004e26:	4b5c      	ldr	r3, [pc, #368]	; (8004f98 <startRTCTick+0x204>)
 8004e28:	6818      	ldr	r0, [r3, #0]
 8004e2a:	7ff9      	ldrb	r1, [r7, #31]
 8004e2c:	2300      	movs	r3, #0
 8004e2e:	2203      	movs	r2, #3
 8004e30:	f00c f912 	bl	8011058 <xTaskGenericNotify>
    xTaskNotify(vibrateControlHandle, 100, eSetValueWithOverwrite);
 8004e34:	4b59      	ldr	r3, [pc, #356]	; (8004f9c <startRTCTick+0x208>)
 8004e36:	6818      	ldr	r0, [r3, #0]
 8004e38:	2300      	movs	r3, #0
 8004e3a:	2203      	movs	r2, #3
 8004e3c:	2164      	movs	r1, #100	; 0x64
 8004e3e:	f00c f90b 	bl	8011058 <xTaskGenericNotify>

    osDelay(1000);
 8004e42:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004e46:	f008 fe85 	bl	800db54 <osDelay>

    osMutexAcquire(ledStateMutexHandle, portMAX_DELAY);
 8004e4a:	4b51      	ldr	r3, [pc, #324]	; (8004f90 <startRTCTick+0x1fc>)
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	f04f 31ff 	mov.w	r1, #4294967295
 8004e52:	4618      	mov	r0, r3
 8004e54:	f008 ff46 	bl	800dce4 <osMutexAcquire>
    LedState.currentMode = LED_CONFIRM_FLASH;
 8004e58:	4b4e      	ldr	r3, [pc, #312]	; (8004f94 <startRTCTick+0x200>)
 8004e5a:	2204      	movs	r2, #4
 8004e5c:	701a      	strb	r2, [r3, #0]
    osMutexRelease(ledStateMutexHandle);
 8004e5e:	4b4c      	ldr	r3, [pc, #304]	; (8004f90 <startRTCTick+0x1fc>)
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	4618      	mov	r0, r3
 8004e64:	f008 ff9c 	bl	800dda0 <osMutexRelease>

    osDelay(1000);
 8004e68:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004e6c:	f008 fe72 	bl	800db54 <osDelay>

    osMutexAcquire(ledStateMutexHandle, portMAX_DELAY);
 8004e70:	4b47      	ldr	r3, [pc, #284]	; (8004f90 <startRTCTick+0x1fc>)
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	f04f 31ff 	mov.w	r1, #4294967295
 8004e78:	4618      	mov	r0, r3
 8004e7a:	f008 ff33 	bl	800dce4 <osMutexAcquire>
    LedState.currentMode = LED_SPIRAL;
 8004e7e:	4b45      	ldr	r3, [pc, #276]	; (8004f94 <startRTCTick+0x200>)
 8004e80:	2205      	movs	r2, #5
 8004e82:	701a      	strb	r2, [r3, #0]
    osMutexRelease(ledStateMutexHandle);
 8004e84:	4b42      	ldr	r3, [pc, #264]	; (8004f90 <startRTCTick+0x1fc>)
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	4618      	mov	r0, r3
 8004e8a:	f008 ff89 	bl	800dda0 <osMutexRelease>

    osDelay(1000);
 8004e8e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004e92:	f008 fe5f 	bl	800db54 <osDelay>

    newScreen = SCREEN_TEXT;
 8004e96:	2303      	movs	r3, #3
 8004e98:	77fb      	strb	r3, [r7, #31]
	osMutexAcquire(screenTextMutexHandle, portMAX_DELAY);
 8004e9a:	4b41      	ldr	r3, [pc, #260]	; (8004fa0 <startRTCTick+0x20c>)
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	f04f 31ff 	mov.w	r1, #4294967295
 8004ea2:	4618      	mov	r0, r3
 8004ea4:	f008 ff1e 	bl	800dce4 <osMutexAcquire>
	strncpy(ScreenState.screenText, "arbitrary", sizeof("arbitrary"));
 8004ea8:	4a3e      	ldr	r2, [pc, #248]	; (8004fa4 <startRTCTick+0x210>)
 8004eaa:	4b3f      	ldr	r3, [pc, #252]	; (8004fa8 <startRTCTick+0x214>)
 8004eac:	cb03      	ldmia	r3!, {r0, r1}
 8004eae:	6010      	str	r0, [r2, #0]
 8004eb0:	6051      	str	r1, [r2, #4]
 8004eb2:	881b      	ldrh	r3, [r3, #0]
 8004eb4:	8113      	strh	r3, [r2, #8]
	osMutexRelease(screenTextMutexHandle);
 8004eb6:	4b3a      	ldr	r3, [pc, #232]	; (8004fa0 <startRTCTick+0x20c>)
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	4618      	mov	r0, r3
 8004ebc:	f008 ff70 	bl	800dda0 <osMutexRelease>
    xTaskNotify(screenUpdateHandle, (uint32_t)newScreen, eSetValueWithOverwrite);
 8004ec0:	4b35      	ldr	r3, [pc, #212]	; (8004f98 <startRTCTick+0x204>)
 8004ec2:	6818      	ldr	r0, [r3, #0]
 8004ec4:	7ff9      	ldrb	r1, [r7, #31]
 8004ec6:	2300      	movs	r3, #0
 8004ec8:	2203      	movs	r2, #3
 8004eca:	f00c f8c5 	bl	8011058 <xTaskGenericNotify>

    //xTaskNotify(vibrateControlHandle, 200, eSetValueWithOverwrite);

    osDelay(1000);
 8004ece:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004ed2:	f008 fe3f 	bl	800db54 <osDelay>
        Error_Handler();
    }
    osMutexRelease(rtcMutexHandle);
	*/

    newScreen = SCREEN_TIME;
 8004ed6:	2301      	movs	r3, #1
 8004ed8:	77fb      	strb	r3, [r7, #31]
    xTaskNotify(screenUpdateHandle, (uint32_t)newScreen, eSetValueWithOverwrite);
 8004eda:	4b2f      	ldr	r3, [pc, #188]	; (8004f98 <startRTCTick+0x204>)
 8004edc:	6818      	ldr	r0, [r3, #0]
 8004ede:	7ff9      	ldrb	r1, [r7, #31]
 8004ee0:	2300      	movs	r3, #0
 8004ee2:	2203      	movs	r2, #3
 8004ee4:	f00c f8b8 	bl	8011058 <xTaskGenericNotify>
    osDelay(1000);
 8004ee8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004eec:	f008 fe32 	bl	800db54 <osDelay>
    xTaskNotify(screenUpdateHandle, (uint32_t)newScreen, eSetValueWithOverwrite);
 8004ef0:	4b29      	ldr	r3, [pc, #164]	; (8004f98 <startRTCTick+0x204>)
 8004ef2:	6818      	ldr	r0, [r3, #0]
 8004ef4:	7ff9      	ldrb	r1, [r7, #31]
 8004ef6:	2300      	movs	r3, #0
 8004ef8:	2203      	movs	r2, #3
 8004efa:	f00c f8ad 	bl	8011058 <xTaskGenericNotify>
    osDelay(1000);
 8004efe:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004f02:	f008 fe27 	bl	800db54 <osDelay>
    xTaskNotify(screenUpdateHandle, (uint32_t)newScreen, eSetValueWithOverwrite);
 8004f06:	4b24      	ldr	r3, [pc, #144]	; (8004f98 <startRTCTick+0x204>)
 8004f08:	6818      	ldr	r0, [r3, #0]
 8004f0a:	7ff9      	ldrb	r1, [r7, #31]
 8004f0c:	2300      	movs	r3, #0
 8004f0e:	2203      	movs	r2, #3
 8004f10:	f00c f8a2 	bl	8011058 <xTaskGenericNotify>
    osDelay(1000);
 8004f14:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004f18:	f008 fe1c 	bl	800db54 <osDelay>
    xTaskNotify(screenUpdateHandle, (uint32_t)newScreen, eSetValueWithOverwrite);
 8004f1c:	4b1e      	ldr	r3, [pc, #120]	; (8004f98 <startRTCTick+0x204>)
 8004f1e:	6818      	ldr	r0, [r3, #0]
 8004f20:	7ff9      	ldrb	r1, [r7, #31]
 8004f22:	2300      	movs	r3, #0
 8004f24:	2203      	movs	r2, #3
 8004f26:	f00c f897 	bl	8011058 <xTaskGenericNotify>
    osDelay(1000);
 8004f2a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004f2e:	f008 fe11 	bl	800db54 <osDelay>


    osDelay(1000);
 8004f32:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004f36:	f008 fe0d 	bl	800db54 <osDelay>

    newScreen = SCREEN_IMAGE;
 8004f3a:	2304      	movs	r3, #4
 8004f3c:	77fb      	strb	r3, [r7, #31]
   	osMutexAcquire(screenTextMutexHandle, portMAX_DELAY);
 8004f3e:	4b18      	ldr	r3, [pc, #96]	; (8004fa0 <startRTCTick+0x20c>)
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	f04f 31ff 	mov.w	r1, #4294967295
 8004f46:	4618      	mov	r0, r3
 8004f48:	f008 fecc 	bl	800dce4 <osMutexAcquire>
   	ScreenState.screenImage = 1;
 8004f4c:	4b15      	ldr	r3, [pc, #84]	; (8004fa4 <startRTCTick+0x210>)
 8004f4e:	2201      	movs	r2, #1
 8004f50:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
   	osMutexRelease(screenTextMutexHandle);
 8004f54:	4b12      	ldr	r3, [pc, #72]	; (8004fa0 <startRTCTick+0x20c>)
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	4618      	mov	r0, r3
 8004f5a:	f008 ff21 	bl	800dda0 <osMutexRelease>
    xTaskNotify(screenUpdateHandle, (uint32_t)newScreen, eSetValueWithOverwrite);
 8004f5e:	4b0e      	ldr	r3, [pc, #56]	; (8004f98 <startRTCTick+0x204>)
 8004f60:	6818      	ldr	r0, [r3, #0]
 8004f62:	7ff9      	ldrb	r1, [r7, #31]
 8004f64:	2300      	movs	r3, #0
 8004f66:	2203      	movs	r2, #3
 8004f68:	f00c f876 	bl	8011058 <xTaskGenericNotify>

    osDelay(3000);
 8004f6c:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8004f70:	f008 fdf0 	bl	800db54 <osDelay>

    newScreen = SCREEN_OFF;
 8004f74:	2300      	movs	r3, #0
 8004f76:	77fb      	strb	r3, [r7, #31]
    xTaskNotify(screenUpdateHandle, (uint32_t)newScreen, eSetValueWithOverwrite);
 8004f78:	4b07      	ldr	r3, [pc, #28]	; (8004f98 <startRTCTick+0x204>)
 8004f7a:	6818      	ldr	r0, [r3, #0]
 8004f7c:	7ff9      	ldrb	r1, [r7, #31]
 8004f7e:	2300      	movs	r3, #0
 8004f80:	2203      	movs	r2, #3
 8004f82:	f00c f869 	bl	8011058 <xTaskGenericNotify>
  {
 8004f86:	e735      	b.n	8004df4 <startRTCTick+0x60>
 8004f88:	20006054 	.word	0x20006054
 8004f8c:	20006030 	.word	0x20006030
 8004f90:	20006170 	.word	0x20006170
 8004f94:	20006158 	.word	0x20006158
 8004f98:	20006160 	.word	0x20006160
 8004f9c:	200061c4 	.word	0x200061c4
 8004fa0:	20006024 	.word	0x20006024
 8004fa4:	20006058 	.word	0x20006058
 8004fa8:	08014f20 	.word	0x08014f20

08004fac <startBLETX>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_startBLETX */
void startBLETX(void *argument)
{
 8004fac:	b580      	push	{r7, lr}
 8004fae:	b084      	sub	sp, #16
 8004fb0:	af00      	add	r7, sp, #0
 8004fb2:	6078      	str	r0, [r7, #4]
  uint16_t sendData;

  /* Infinite loop */
  for(;;)
  {
    if (osMessageQueueGet(bleTXqueueHandle, &sendData, NULL, osWaitForever) == osOK){
 8004fb4:	4b08      	ldr	r3, [pc, #32]	; (8004fd8 <startBLETX+0x2c>)
 8004fb6:	6818      	ldr	r0, [r3, #0]
 8004fb8:	f107 010e 	add.w	r1, r7, #14
 8004fbc:	f04f 33ff 	mov.w	r3, #4294967295
 8004fc0:	2200      	movs	r2, #0
 8004fc2:	f009 f993 	bl	800e2ec <osMessageQueueGet>
 8004fc6:	4603      	mov	r3, r0
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d1f3      	bne.n	8004fb4 <startBLETX+0x8>
    	P2PS_Send_Data(sendData);
 8004fcc:	89fb      	ldrh	r3, [r7, #14]
 8004fce:	4618      	mov	r0, r3
 8004fd0:	f7fc faf8 	bl	80015c4 <P2PS_Send_Data>
    if (osMessageQueueGet(bleTXqueueHandle, &sendData, NULL, osWaitForever) == osOK){
 8004fd4:	e7ee      	b.n	8004fb4 <startBLETX+0x8>
 8004fd6:	bf00      	nop
 8004fd8:	200061c0 	.word	0x200061c0

08004fdc <startBLERX>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_startBLERX */
void startBLERX(void *argument)
{
 8004fdc:	b580      	push	{r7, lr}
 8004fde:	b0b0      	sub	sp, #192	; 0xc0
 8004fe0:	af00      	add	r7, sp, #0
 8004fe2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN startBLERX */
  /* Infinite loop */

  P2PS_STM_Data_t rxData;

  uint8_t continuing = 0;
 8004fe4:	2300      	movs	r3, #0
 8004fe6:	f887 30bf 	strb.w	r3, [r7, #191]	; 0xbf
  char textbuffer[128];

  for(;;)
  {

	if (osMessageQueueGet(bleRXqueueHandle, &rxData, NULL, osWaitForever) == osOK){
 8004fea:	4b7b      	ldr	r3, [pc, #492]	; (80051d8 <startBLERX+0x1fc>)
 8004fec:	6818      	ldr	r0, [r3, #0]
 8004fee:	f107 01ac 	add.w	r1, r7, #172	; 0xac
 8004ff2:	f04f 33ff 	mov.w	r3, #4294967295
 8004ff6:	2200      	movs	r2, #0
 8004ff8:	f009 f978 	bl	800e2ec <osMessageQueueGet>
 8004ffc:	4603      	mov	r3, r0
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d1f3      	bne.n	8004fea <startBLERX+0xe>
		strncpy(ScreenState.screenText, str, sizeof(str));
		osMutexRelease(screenTextMutexHandle);
		xTaskNotify(screenUpdateHandle, (uint32_t)SCREEN_TEXT, eSetValueWithOverwrite);
		*/

		if (rxData.pPayload[0] == 0x00) { // timestamp update starts with 0x00
 8005002:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005006:	781b      	ldrb	r3, [r3, #0]
 8005008:	2b00      	cmp	r3, #0
 800500a:	d166      	bne.n	80050da <startBLERX+0xfe>
			memcpy(&P2P_Server_App_Context.OTATimestamp, &(rxData.pPayload[1]), 8);
 800500c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005010:	3301      	adds	r3, #1
 8005012:	2208      	movs	r2, #8
 8005014:	4619      	mov	r1, r3
 8005016:	4871      	ldr	r0, [pc, #452]	; (80051dc <startBLERX+0x200>)
 8005018:	f00c fdb8 	bl	8011b8c <memcpy>
    	    P2P_Server_App_Context.OTA12HrFormat = rxData.pPayload[9];
 800501c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005020:	7a5a      	ldrb	r2, [r3, #9]
 8005022:	4b6f      	ldr	r3, [pc, #444]	; (80051e0 <startBLERX+0x204>)
 8005024:	741a      	strb	r2, [r3, #16]
    		P2P_Server_App_Context.OTADaylightSavings = rxData.pPayload[10];
 8005026:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800502a:	7a9a      	ldrb	r2, [r3, #10]
 800502c:	4b6c      	ldr	r3, [pc, #432]	; (80051e0 <startBLERX+0x204>)
 800502e:	745a      	strb	r2, [r3, #17]

    	    RTC_TimeTypeDef sTime = {0};
 8005030:	f107 0318 	add.w	r3, r7, #24
 8005034:	2200      	movs	r2, #0
 8005036:	601a      	str	r2, [r3, #0]
 8005038:	605a      	str	r2, [r3, #4]
 800503a:	609a      	str	r2, [r3, #8]
 800503c:	60da      	str	r2, [r3, #12]
 800503e:	611a      	str	r2, [r3, #16]
    		RTC_DateTypeDef sDate = {0};
 8005040:	2300      	movs	r3, #0
 8005042:	617b      	str	r3, [r7, #20]

    		uint8_t timestampvals[8];
    		memcpy(timestampvals, &(P2P_Server_App_Context.OTATimestamp), 8);
 8005044:	4a66      	ldr	r2, [pc, #408]	; (80051e0 <startBLERX+0x204>)
 8005046:	f107 030c 	add.w	r3, r7, #12
 800504a:	3208      	adds	r2, #8
 800504c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005050:	e883 0003 	stmia.w	r3, {r0, r1}

    		uint8_t AMPM = timestampvals[0];
 8005054:	7b3b      	ldrb	r3, [r7, #12]
 8005056:	f887 30b6 	strb.w	r3, [r7, #182]	; 0xb6

    		sTime.Hours      = timestampvals[4];
 800505a:	7c3b      	ldrb	r3, [r7, #16]
 800505c:	763b      	strb	r3, [r7, #24]
    		sTime.Minutes    = timestampvals[5];
 800505e:	7c7b      	ldrb	r3, [r7, #17]
 8005060:	767b      	strb	r3, [r7, #25]
    		sTime.Seconds    = timestampvals[6];
 8005062:	7cbb      	ldrb	r3, [r7, #18]
 8005064:	76bb      	strb	r3, [r7, #26]
    		sTime.SubSeconds = 0x0;
 8005066:	2300      	movs	r3, #0
 8005068:	61fb      	str	r3, [r7, #28]
    		sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800506a:	2300      	movs	r3, #0
 800506c:	627b      	str	r3, [r7, #36]	; 0x24

    		if (P2P_Server_App_Context.OTADaylightSavings){ sTime.DayLightSaving = RTC_DAYLIGHTSAVING_ADD1H; }
 800506e:	4b5c      	ldr	r3, [pc, #368]	; (80051e0 <startBLERX+0x204>)
 8005070:	7c5b      	ldrb	r3, [r3, #17]
 8005072:	2b00      	cmp	r3, #0
 8005074:	d002      	beq.n	800507c <startBLERX+0xa0>
 8005076:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800507a:	627b      	str	r3, [r7, #36]	; 0x24

    		sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800507c:	2300      	movs	r3, #0
 800507e:	62bb      	str	r3, [r7, #40]	; 0x28

    		sDate.WeekDay = timestampvals[0];
 8005080:	7b3b      	ldrb	r3, [r7, #12]
 8005082:	753b      	strb	r3, [r7, #20]
    		sDate.Month   = timestampvals[1];
 8005084:	7b7b      	ldrb	r3, [r7, #13]
 8005086:	757b      	strb	r3, [r7, #21]
    		sDate.Date    = timestampvals[2];
 8005088:	7bbb      	ldrb	r3, [r7, #14]
 800508a:	75bb      	strb	r3, [r7, #22]
    		sDate.Year    = timestampvals[3];
 800508c:	7bfb      	ldrb	r3, [r7, #15]
 800508e:	75fb      	strb	r3, [r7, #23]

    		osMutexAcquire(rtcMutexHandle, portMAX_DELAY);
 8005090:	4b54      	ldr	r3, [pc, #336]	; (80051e4 <startBLERX+0x208>)
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	f04f 31ff 	mov.w	r1, #4294967295
 8005098:	4618      	mov	r0, r3
 800509a:	f008 fe23 	bl	800dce4 <osMutexAcquire>
    		if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK) {Error_Handler();}
 800509e:	f107 0318 	add.w	r3, r7, #24
 80050a2:	2201      	movs	r2, #1
 80050a4:	4619      	mov	r1, r3
 80050a6:	4850      	ldr	r0, [pc, #320]	; (80051e8 <startBLERX+0x20c>)
 80050a8:	f003 fe23 	bl	8008cf2 <HAL_RTC_SetTime>
 80050ac:	4603      	mov	r3, r0
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d001      	beq.n	80050b6 <startBLERX+0xda>
 80050b2:	f000 fa33 	bl	800551c <Error_Handler>
    		if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK) {Error_Handler();}
 80050b6:	f107 0314 	add.w	r3, r7, #20
 80050ba:	2201      	movs	r2, #1
 80050bc:	4619      	mov	r1, r3
 80050be:	484a      	ldr	r0, [pc, #296]	; (80051e8 <startBLERX+0x20c>)
 80050c0:	f003 ff37 	bl	8008f32 <HAL_RTC_SetDate>
 80050c4:	4603      	mov	r3, r0
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d001      	beq.n	80050ce <startBLERX+0xf2>
 80050ca:	f000 fa27 	bl	800551c <Error_Handler>
    	    osMutexRelease(rtcMutexHandle);
 80050ce:	4b45      	ldr	r3, [pc, #276]	; (80051e4 <startBLERX+0x208>)
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	4618      	mov	r0, r3
 80050d4:	f008 fe64 	bl	800dda0 <osMutexRelease>
 80050d8:	e787      	b.n	8004fea <startBLERX+0xe>

		} else if (rxData.pPayload[0] == 0x06) {//screen text update starts with 0x06
 80050da:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80050de:	781b      	ldrb	r3, [r3, #0]
 80050e0:	2b06      	cmp	r3, #6
 80050e2:	d13f      	bne.n	8005164 <startBLERX+0x188>
			//should edit this to have a char buffer in place (128 byte) that copies over
			// rxData.pPayload[1] for rxData.Length - 1, check last byte.  if 00 stop,
			//otherwise wait and keep filling buffer with next packet.
			//write a complementary send function that adds a hex '00' and chops the full string
			//into 19 byte chunks when sending with 0x01 header from phone.
			strncpy(&(textbuffer[continuing*19]), &(rxData.pPayload[1]), rxData.Length - 1);
 80050e4:	f897 20bf 	ldrb.w	r2, [r7, #191]	; 0xbf
 80050e8:	4613      	mov	r3, r2
 80050ea:	00db      	lsls	r3, r3, #3
 80050ec:	4413      	add	r3, r2
 80050ee:	005b      	lsls	r3, r3, #1
 80050f0:	4413      	add	r3, r2
 80050f2:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 80050f6:	18d0      	adds	r0, r2, r3
 80050f8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80050fc:	3301      	adds	r3, #1
 80050fe:	f897 20b0 	ldrb.w	r2, [r7, #176]	; 0xb0
 8005102:	3a01      	subs	r2, #1
 8005104:	4619      	mov	r1, r3
 8005106:	f00d fb05 	bl	8012714 <strncpy>
			continuing += 1;
 800510a:	f897 30bf 	ldrb.w	r3, [r7, #191]	; 0xbf
 800510e:	3301      	adds	r3, #1
 8005110:	f887 30bf 	strb.w	r3, [r7, #191]	; 0xbf

			if (rxData.pPayload[rxData.Length-1] == 0x00) { //completed string
 8005114:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8005118:	f897 30b0 	ldrb.w	r3, [r7, #176]	; 0xb0
 800511c:	3b01      	subs	r3, #1
 800511e:	4413      	add	r3, r2
 8005120:	781b      	ldrb	r3, [r3, #0]
 8005122:	2b00      	cmp	r3, #0
 8005124:	f47f af61 	bne.w	8004fea <startBLERX+0xe>

				osMutexAcquire(screenTextMutexHandle, portMAX_DELAY);
 8005128:	4b30      	ldr	r3, [pc, #192]	; (80051ec <startBLERX+0x210>)
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	f04f 31ff 	mov.w	r1, #4294967295
 8005130:	4618      	mov	r0, r3
 8005132:	f008 fdd7 	bl	800dce4 <osMutexAcquire>
				strncpy(ScreenState.screenText, textbuffer, 128);
 8005136:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800513a:	2280      	movs	r2, #128	; 0x80
 800513c:	4619      	mov	r1, r3
 800513e:	482c      	ldr	r0, [pc, #176]	; (80051f0 <startBLERX+0x214>)
 8005140:	f00d fae8 	bl	8012714 <strncpy>
				osMutexRelease(screenTextMutexHandle);
 8005144:	4b29      	ldr	r3, [pc, #164]	; (80051ec <startBLERX+0x210>)
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	4618      	mov	r0, r3
 800514a:	f008 fe29 	bl	800dda0 <osMutexRelease>
				xTaskNotify(screenUpdateHandle, (uint32_t)SCREEN_TEXT, eSetValueWithOverwrite);
 800514e:	4b29      	ldr	r3, [pc, #164]	; (80051f4 <startBLERX+0x218>)
 8005150:	6818      	ldr	r0, [r3, #0]
 8005152:	2300      	movs	r3, #0
 8005154:	2203      	movs	r2, #3
 8005156:	2103      	movs	r1, #3
 8005158:	f00b ff7e 	bl	8011058 <xTaskGenericNotify>

				continuing = 0;
 800515c:	2300      	movs	r3, #0
 800515e:	f887 30bf 	strb.w	r3, [r7, #191]	; 0xbf
 8005162:	e742      	b.n	8004fea <startBLERX+0xe>
			//osMutexAcquire(screenTextMutexHandle, portMAX_DELAY);
			//strncpy(ScreenState.screenText, &(rxData.pPayload[1]), rxData.Length - 1);
			//osMutexRelease(screenTextMutexHandle);
			//xTaskNotify(screenUpdateHandle, (uint32_t)SCREEN_TEXT, eSetValueWithOverwrite);

		} else if (rxData.pPayload[0] == 0x03) { //vibrate payload with duration to vibrate
 8005164:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005168:	781b      	ldrb	r3, [r3, #0]
 800516a:	2b03      	cmp	r3, #3
 800516c:	f47f af3d 	bne.w	8004fea <startBLERX+0xe>

			//uint8_t duration[4] = {0};
	    	//memcpy(&(duration[4-(rxData.Length-1)]), &(rxData.pPayload[1]), rxData.Length-1);
	    	//uint32_t send_duration = duration[0] << 24 | duration[1] << 16 | duration[2] << 8 | duration[3];

	    	uint32_t send_duration = 0;
 8005170:	2300      	movs	r3, #0
 8005172:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
	    	for (uint8_t i=0; i<rxData.Length-1; i++){
 8005176:	2300      	movs	r3, #0
 8005178:	f887 30b7 	strb.w	r3, [r7, #183]	; 0xb7
 800517c:	e01b      	b.n	80051b6 <startBLERX+0x1da>
	    		send_duration |= rxData.pPayload[1+i] << ((rxData.Length-2-i)*8);
 800517e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005182:	f897 20b7 	ldrb.w	r2, [r7, #183]	; 0xb7
 8005186:	3201      	adds	r2, #1
 8005188:	4413      	add	r3, r2
 800518a:	781b      	ldrb	r3, [r3, #0]
 800518c:	4619      	mov	r1, r3
 800518e:	f897 30b0 	ldrb.w	r3, [r7, #176]	; 0xb0
 8005192:	1e9a      	subs	r2, r3, #2
 8005194:	f897 30b7 	ldrb.w	r3, [r7, #183]	; 0xb7
 8005198:	1ad3      	subs	r3, r2, r3
 800519a:	00db      	lsls	r3, r3, #3
 800519c:	fa01 f303 	lsl.w	r3, r1, r3
 80051a0:	461a      	mov	r2, r3
 80051a2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80051a6:	4313      	orrs	r3, r2
 80051a8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
	    	for (uint8_t i=0; i<rxData.Length-1; i++){
 80051ac:	f897 30b7 	ldrb.w	r3, [r7, #183]	; 0xb7
 80051b0:	3301      	adds	r3, #1
 80051b2:	f887 30b7 	strb.w	r3, [r7, #183]	; 0xb7
 80051b6:	f897 20b7 	ldrb.w	r2, [r7, #183]	; 0xb7
 80051ba:	f897 30b0 	ldrb.w	r3, [r7, #176]	; 0xb0
 80051be:	3b01      	subs	r3, #1
 80051c0:	429a      	cmp	r2, r3
 80051c2:	dbdc      	blt.n	800517e <startBLERX+0x1a2>
	    	}

	    	xTaskNotify(vibrateControlHandle, send_duration, eSetValueWithOverwrite);
 80051c4:	4b0c      	ldr	r3, [pc, #48]	; (80051f8 <startBLERX+0x21c>)
 80051c6:	6818      	ldr	r0, [r3, #0]
 80051c8:	2300      	movs	r3, #0
 80051ca:	2203      	movs	r2, #3
 80051cc:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 80051d0:	f00b ff42 	bl	8011058 <xTaskGenericNotify>
	if (osMessageQueueGet(bleRXqueueHandle, &rxData, NULL, osWaitForever) == osOK){
 80051d4:	e709      	b.n	8004fea <startBLERX+0xe>
 80051d6:	bf00      	nop
 80051d8:	20006020 	.word	0x20006020
 80051dc:	200002b8 	.word	0x200002b8
 80051e0:	200002b0 	.word	0x200002b0
 80051e4:	20006054 	.word	0x20006054
 80051e8:	20006030 	.word	0x20006030
 80051ec:	20006024 	.word	0x20006024
 80051f0:	20006058 	.word	0x20006058
 80051f4:	20006160 	.word	0x20006160
 80051f8:	200061c4 	.word	0x200061c4

080051fc <startLEDTimer>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_startLEDTimer */
void startLEDTimer(void *argument)
{
 80051fc:	b580      	push	{r7, lr}
 80051fe:	b084      	sub	sp, #16
 8005200:	af00      	add	r7, sp, #0
 8005202:	6078      	str	r0, [r7, #4]

  /* Infinite loop */
  for(;;)
  {
	  //wait until notified
	  ulTaskNotifyTake( pdTRUE, portMAX_DELAY);
 8005204:	f04f 31ff 	mov.w	r1, #4294967295
 8005208:	2001      	movs	r0, #1
 800520a:	f00b fe83 	bl	8010f14 <ulTaskNotifyTake>

	  //pull time of delay before updating LED state
	  osMutexAcquire(ledStateMutexHandle, portMAX_DELAY);
 800520e:	4b1c      	ldr	r3, [pc, #112]	; (8005280 <startLEDTimer+0x84>)
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	f04f 31ff 	mov.w	r1, #4294967295
 8005216:	4618      	mov	r0, r3
 8005218:	f008 fd64 	bl	800dce4 <osMutexAcquire>
	  waitState = LedState;
 800521c:	4a19      	ldr	r2, [pc, #100]	; (8005284 <startLEDTimer+0x88>)
 800521e:	f107 0308 	add.w	r3, r7, #8
 8005222:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005226:	e883 0003 	stmia.w	r3, {r0, r1}
	  LedState.modeTimeout = 0;
 800522a:	4b16      	ldr	r3, [pc, #88]	; (8005284 <startLEDTimer+0x88>)
 800522c:	2200      	movs	r2, #0
 800522e:	605a      	str	r2, [r3, #4]
	  osMutexRelease(ledStateMutexHandle);
 8005230:	4b13      	ldr	r3, [pc, #76]	; (8005280 <startLEDTimer+0x84>)
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	4618      	mov	r0, r3
 8005236:	f008 fdb3 	bl	800dda0 <osMutexRelease>

	  //delay
	  osDelay(waitState.modeTimeout);
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	4618      	mov	r0, r3
 800523e:	f008 fc89 	bl	800db54 <osDelay>

	  //update LED state in LedState
	  osMutexAcquire(ledStateMutexHandle, portMAX_DELAY);
 8005242:	4b0f      	ldr	r3, [pc, #60]	; (8005280 <startLEDTimer+0x84>)
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	f04f 31ff 	mov.w	r1, #4294967295
 800524a:	4618      	mov	r0, r3
 800524c:	f008 fd4a 	bl	800dce4 <osMutexAcquire>
	  //check that state values haven't changed since
	  //started waiting before updating state
	  if (waitState.currentMode == LedState.currentMode && waitState.nextMode == LedState.nextMode) {
 8005250:	7a3a      	ldrb	r2, [r7, #8]
 8005252:	4b0c      	ldr	r3, [pc, #48]	; (8005284 <startLEDTimer+0x88>)
 8005254:	781b      	ldrb	r3, [r3, #0]
 8005256:	429a      	cmp	r2, r3
 8005258:	d10b      	bne.n	8005272 <startLEDTimer+0x76>
 800525a:	7a7a      	ldrb	r2, [r7, #9]
 800525c:	4b09      	ldr	r3, [pc, #36]	; (8005284 <startLEDTimer+0x88>)
 800525e:	785b      	ldrb	r3, [r3, #1]
 8005260:	429a      	cmp	r2, r3
 8005262:	d106      	bne.n	8005272 <startLEDTimer+0x76>
		  LedState.currentMode = LedState.nextMode;
 8005264:	4b07      	ldr	r3, [pc, #28]	; (8005284 <startLEDTimer+0x88>)
 8005266:	785a      	ldrb	r2, [r3, #1]
 8005268:	4b06      	ldr	r3, [pc, #24]	; (8005284 <startLEDTimer+0x88>)
 800526a:	701a      	strb	r2, [r3, #0]
		  LedState.nextMode = LED_NONE;
 800526c:	4b05      	ldr	r3, [pc, #20]	; (8005284 <startLEDTimer+0x88>)
 800526e:	2200      	movs	r2, #0
 8005270:	705a      	strb	r2, [r3, #1]
	  }
	  osMutexRelease(ledStateMutexHandle);
 8005272:	4b03      	ldr	r3, [pc, #12]	; (8005280 <startLEDTimer+0x84>)
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	4618      	mov	r0, r3
 8005278:	f008 fd92 	bl	800dda0 <osMutexRelease>
	  ulTaskNotifyTake( pdTRUE, portMAX_DELAY);
 800527c:	e7c2      	b.n	8005204 <startLEDTimer+0x8>
 800527e:	bf00      	nop
 8005280:	20006170 	.word	0x20006170
 8005284:	20006158 	.word	0x20006158

08005288 <startTouchRead>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_startTouchRead */
void startTouchRead(void *argument)
{
 8005288:	b580      	push	{r7, lr}
 800528a:	b088      	sub	sp, #32
 800528c:	af00      	add	r7, sp, #0
 800528e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN startTouchRead */

  int16_t current_minute = -1;
 8005290:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005294:	837b      	strh	r3, [r7, #26]
  uint8_t touch_end_count = 0;
 8005296:	2300      	movs	r3, #0
 8005298:	77fb      	strb	r3, [r7, #31]
  uint16_t last_minute = -1;
 800529a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800529e:	83bb      	strh	r3, [r7, #28]
  #define TOUCH_END_TIMEOUT 6

  osDelay(3000); // give screen time to turn on.
 80052a0:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80052a4:	f008 fc56 	bl	800db54 <osDelay>

  //init peripheral (not turbo mode, poll every 250ms, if touch sample at 40Hz until no touch)
  if (setup_iqs263() == HAL_ERROR) {
 80052a8:	f7fe fc66 	bl	8003b78 <setup_iqs263>
 80052ac:	4603      	mov	r3, r0
 80052ae:	2b01      	cmp	r3, #1
 80052b0:	d11b      	bne.n	80052ea <startTouchRead+0x62>

	  osMutexAcquire(screenTextMutexHandle, portMAX_DELAY);
 80052b2:	4b44      	ldr	r3, [pc, #272]	; (80053c4 <startTouchRead+0x13c>)
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	f04f 31ff 	mov.w	r1, #4294967295
 80052ba:	4618      	mov	r0, r3
 80052bc:	f008 fd12 	bl	800dce4 <osMutexAcquire>
	  strncpy(ScreenState.screenText, "touch fail", sizeof("touch fail"));
 80052c0:	4a41      	ldr	r2, [pc, #260]	; (80053c8 <startTouchRead+0x140>)
 80052c2:	4b42      	ldr	r3, [pc, #264]	; (80053cc <startTouchRead+0x144>)
 80052c4:	cb03      	ldmia	r3!, {r0, r1}
 80052c6:	6010      	str	r0, [r2, #0]
 80052c8:	6051      	str	r1, [r2, #4]
 80052ca:	8819      	ldrh	r1, [r3, #0]
 80052cc:	789b      	ldrb	r3, [r3, #2]
 80052ce:	8111      	strh	r1, [r2, #8]
 80052d0:	7293      	strb	r3, [r2, #10]
	  osMutexRelease(screenTextMutexHandle);
 80052d2:	4b3c      	ldr	r3, [pc, #240]	; (80053c4 <startTouchRead+0x13c>)
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	4618      	mov	r0, r3
 80052d8:	f008 fd62 	bl	800dda0 <osMutexRelease>
	  xTaskNotify(screenUpdateHandle, (uint32_t)SCREEN_TEXT, eSetValueWithOverwrite);
 80052dc:	4b3c      	ldr	r3, [pc, #240]	; (80053d0 <startTouchRead+0x148>)
 80052de:	6818      	ldr	r0, [r3, #0]
 80052e0:	2300      	movs	r3, #0
 80052e2:	2203      	movs	r2, #3
 80052e4:	2103      	movs	r1, #3
 80052e6:	f00b feb7 	bl	8011058 <xTaskGenericNotify>
  }

  /* Infinite loop */
  for(;;)
  {
   current_minute = iqs263_get_min_if_pressed(); //returns -1 if no press
 80052ea:	f7fe fce3 	bl	8003cb4 <iqs263_get_min_if_pressed>
 80052ee:	4603      	mov	r3, r0
 80052f0:	837b      	strh	r3, [r7, #26]
   if (current_minute != -1) { //touch!
 80052f2:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80052f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052fa:	d01f      	beq.n	800533c <startTouchRead+0xb4>

	   touch_end_count = 1;
 80052fc:	2301      	movs	r3, #1
 80052fe:	77fb      	strb	r3, [r7, #31]

	   if (last_minute != current_minute) {
 8005300:	8bba      	ldrh	r2, [r7, #28]
 8005302:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8005306:	429a      	cmp	r2, r3
 8005308:	d014      	beq.n	8005334 <startTouchRead+0xac>
		   //update touch stuff!
		   last_minute = current_minute;
 800530a:	8b7b      	ldrh	r3, [r7, #26]
 800530c:	83bb      	strh	r3, [r7, #28]
	   	   er_oled_print_2digit(current_minute);
 800530e:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8005312:	4618      	mov	r0, r3
 8005314:	f7fd fb96 	bl	8002a44 <er_oled_print_2digit>

	   	   uint16_t touchval = 0x4000 | current_minute;
 8005318:	8b7b      	ldrh	r3, [r7, #26]
 800531a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800531e:	b21b      	sxth	r3, r3
 8005320:	b29b      	uxth	r3, r3
 8005322:	833b      	strh	r3, [r7, #24]
	   	   osMessageQueuePut(bleTXqueueHandle, &touchval, 0, 0);
 8005324:	4b2b      	ldr	r3, [pc, #172]	; (80053d4 <startTouchRead+0x14c>)
 8005326:	6818      	ldr	r0, [r3, #0]
 8005328:	f107 0118 	add.w	r1, r7, #24
 800532c:	2300      	movs	r3, #0
 800532e:	2200      	movs	r2, #0
 8005330:	f008 ff68 	bl	800e204 <osMessageQueuePut>
	   }

	   //optional
	   osDelay(25);
 8005334:	2019      	movs	r0, #25
 8005336:	f008 fc0d 	bl	800db54 <osDelay>
 800533a:	e7d6      	b.n	80052ea <startTouchRead+0x62>
	   strncpy(ScreenState.screenText, str, sizeof(str));
	   osMutexRelease(screenTextMutexHandle);
	   xTaskNotify(screenUpdateHandle, (uint32_t)SCREEN_TEXT, eSetValueWithOverwrite);
	   */

   } else if (touch_end_count > 0){
 800533c:	7ffb      	ldrb	r3, [r7, #31]
 800533e:	2b00      	cmp	r3, #0
 8005340:	d03c      	beq.n	80053bc <startTouchRead+0x134>

	   touch_end_count += 1;//increment touching_end_count
 8005342:	7ffb      	ldrb	r3, [r7, #31]
 8005344:	3301      	adds	r3, #1
 8005346:	77fb      	strb	r3, [r7, #31]

	   if (touch_end_count >= TOUCH_END_TIMEOUT){  //if it hits this value, we're done
 8005348:	7ffb      	ldrb	r3, [r7, #31]
 800534a:	2b05      	cmp	r3, #5
 800534c:	d932      	bls.n	80053b4 <startTouchRead+0x12c>

		   touch_end_count = 0;
 800534e:	2300      	movs	r3, #0
 8005350:	77fb      	strb	r3, [r7, #31]

		   //DO THINGS WITH CONFIRMED TOUCH == LAST_MINUTE
		   char out_text[10];
		   sprintf(out_text, "FINAL: %d", last_minute);
 8005352:	8bba      	ldrh	r2, [r7, #28]
 8005354:	f107 030c 	add.w	r3, r7, #12
 8005358:	491f      	ldr	r1, [pc, #124]	; (80053d8 <startTouchRead+0x150>)
 800535a:	4618      	mov	r0, r3
 800535c:	f00d f9ba 	bl	80126d4 <siprintf>
		   osMutexAcquire(screenTextMutexHandle, portMAX_DELAY);
 8005360:	4b18      	ldr	r3, [pc, #96]	; (80053c4 <startTouchRead+0x13c>)
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	f04f 31ff 	mov.w	r1, #4294967295
 8005368:	4618      	mov	r0, r3
 800536a:	f008 fcbb 	bl	800dce4 <osMutexAcquire>
		   strncpy(ScreenState.screenText, out_text, sizeof(out_text));
 800536e:	f107 030c 	add.w	r3, r7, #12
 8005372:	220a      	movs	r2, #10
 8005374:	4619      	mov	r1, r3
 8005376:	4814      	ldr	r0, [pc, #80]	; (80053c8 <startTouchRead+0x140>)
 8005378:	f00d f9cc 	bl	8012714 <strncpy>
		   osMutexRelease(screenTextMutexHandle);
 800537c:	4b11      	ldr	r3, [pc, #68]	; (80053c4 <startTouchRead+0x13c>)
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	4618      	mov	r0, r3
 8005382:	f008 fd0d 	bl	800dda0 <osMutexRelease>
		   xTaskNotify(screenUpdateHandle, (uint32_t)SCREEN_TEXT, eSetValueWithOverwrite);
 8005386:	4b12      	ldr	r3, [pc, #72]	; (80053d0 <startTouchRead+0x148>)
 8005388:	6818      	ldr	r0, [r3, #0]
 800538a:	2300      	movs	r3, #0
 800538c:	2203      	movs	r2, #3
 800538e:	2103      	movs	r1, #3
 8005390:	f00b fe62 	bl	8011058 <xTaskGenericNotify>

		   uint16_t touchval = 0x5000 | last_minute;
 8005394:	8bbb      	ldrh	r3, [r7, #28]
 8005396:	f443 43a0 	orr.w	r3, r3, #20480	; 0x5000
 800539a:	b29b      	uxth	r3, r3
 800539c:	817b      	strh	r3, [r7, #10]
		   osMessageQueuePut(bleTXqueueHandle, &touchval, 0, 0);
 800539e:	4b0d      	ldr	r3, [pc, #52]	; (80053d4 <startTouchRead+0x14c>)
 80053a0:	6818      	ldr	r0, [r3, #0]
 80053a2:	f107 010a 	add.w	r1, r7, #10
 80053a6:	2300      	movs	r3, #0
 80053a8:	2200      	movs	r2, #0
 80053aa:	f008 ff2b 	bl	800e204 <osMessageQueuePut>

		   last_minute = -1;
 80053ae:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80053b2:	83bb      	strh	r3, [r7, #28]

	   }

	   osDelay(25);
 80053b4:	2019      	movs	r0, #25
 80053b6:	f008 fbcd 	bl	800db54 <osDelay>
 80053ba:	e796      	b.n	80052ea <startTouchRead+0x62>


   }else { //no touch, wait for a touch
    osDelay(250);
 80053bc:	20fa      	movs	r0, #250	; 0xfa
 80053be:	f008 fbc9 	bl	800db54 <osDelay>
   current_minute = iqs263_get_min_if_pressed(); //returns -1 if no press
 80053c2:	e792      	b.n	80052ea <startTouchRead+0x62>
 80053c4:	20006024 	.word	0x20006024
 80053c8:	20006058 	.word	0x20006058
 80053cc:	08014f2c 	.word	0x08014f2c
 80053d0:	20006160 	.word	0x20006160
 80053d4:	200061c0 	.word	0x200061c0
 80053d8:	08014f38 	.word	0x08014f38

080053dc <PeriphClock_Config>:
  /* USER CODE END startTouchRead */
}


void PeriphClock_Config(void)
{
 80053dc:	b480      	push	{r7}
 80053de:	af00      	add	r7, sp, #0

	/* Start automatic synchronization */
	HAL_RCCEx_CRSConfig(&RCC_CRSInitStruct);
#endif

	return;
 80053e0:	bf00      	nop
}
 80053e2:	46bd      	mov	sp, r7
 80053e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e8:	4770      	bx	lr

080053ea <Config_HSE>:
 * LOCAL FUNCTIONS
 *
 *************************************************************/

static void Config_HSE(void)
{
 80053ea:	b580      	push	{r7, lr}
 80053ec:	b082      	sub	sp, #8
 80053ee:	af00      	add	r7, sp, #0
    OTP_ID0_t * p_otp;

  /**
   * Read HSE_Tuning from OTP
   */
  p_otp = (OTP_ID0_t *) OTP_Read(0);
 80053f0:	2000      	movs	r0, #0
 80053f2:	f007 fcc3 	bl	800cd7c <OTP_Read>
 80053f6:	6078      	str	r0, [r7, #4]
  if (p_otp)
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d005      	beq.n	800540a <Config_HSE+0x20>
  {
    LL_RCC_HSE_SetCapacitorTuning(p_otp->hse_tuning);
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	799b      	ldrb	r3, [r3, #6]
 8005402:	4618      	mov	r0, r3
 8005404:	f7fe fc98 	bl	8003d38 <LL_RCC_HSE_SetCapacitorTuning>
  }

  return;
 8005408:	bf00      	nop
 800540a:	bf00      	nop
}  
 800540c:	3708      	adds	r7, #8
 800540e:	46bd      	mov	sp, r7
 8005410:	bd80      	pop	{r7, pc}

08005412 <Reset_Device>:


static void Reset_Device( void )
{
 8005412:	b580      	push	{r7, lr}
 8005414:	af00      	add	r7, sp, #0
#if ( CFG_HW_RESET_BY_FW == 1 )
	Reset_BackupDomain();
 8005416:	f000 f827 	bl	8005468 <Reset_BackupDomain>

	Reset_IPCC();
 800541a:	f000 f803 	bl	8005424 <Reset_IPCC>
#endif

	return;
 800541e:	bf00      	nop
}
 8005420:	bd80      	pop	{r7, pc}
	...

08005424 <Reset_IPCC>:

static void Reset_IPCC( void )
{
 8005424:	b580      	push	{r7, lr}
 8005426:	af00      	add	r7, sp, #0
	LL_AHB3_GRP1_EnableClock(LL_AHB3_GRP1_PERIPH_IPCC);
 8005428:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800542c:	f7fe fd19 	bl	8003e62 <LL_AHB3_GRP1_EnableClock>

	LL_C1_IPCC_ClearFlag_CHx(
 8005430:	213f      	movs	r1, #63	; 0x3f
 8005432:	480c      	ldr	r0, [pc, #48]	; (8005464 <Reset_IPCC+0x40>)
 8005434:	f7fe fd74 	bl	8003f20 <LL_C1_IPCC_ClearFlag_CHx>
			IPCC,
			LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
			| LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

	LL_C2_IPCC_ClearFlag_CHx(
 8005438:	213f      	movs	r1, #63	; 0x3f
 800543a:	480a      	ldr	r0, [pc, #40]	; (8005464 <Reset_IPCC+0x40>)
 800543c:	f7fe fd7e 	bl	8003f3c <LL_C2_IPCC_ClearFlag_CHx>
			IPCC,
			LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
			| LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

	LL_C1_IPCC_DisableTransmitChannel(
 8005440:	213f      	movs	r1, #63	; 0x3f
 8005442:	4808      	ldr	r0, [pc, #32]	; (8005464 <Reset_IPCC+0x40>)
 8005444:	f7fe fd26 	bl	8003e94 <LL_C1_IPCC_DisableTransmitChannel>
			IPCC,
			LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
			| LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

	LL_C2_IPCC_DisableTransmitChannel(
 8005448:	213f      	movs	r1, #63	; 0x3f
 800544a:	4806      	ldr	r0, [pc, #24]	; (8005464 <Reset_IPCC+0x40>)
 800544c:	f7fe fd45 	bl	8003eda <LL_C2_IPCC_DisableTransmitChannel>
			IPCC,
			LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
			| LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

	LL_C1_IPCC_DisableReceiveChannel(
 8005450:	213f      	movs	r1, #63	; 0x3f
 8005452:	4804      	ldr	r0, [pc, #16]	; (8005464 <Reset_IPCC+0x40>)
 8005454:	f7fe fd30 	bl	8003eb8 <LL_C1_IPCC_DisableReceiveChannel>
			IPCC,
			LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
			| LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

	LL_C2_IPCC_DisableReceiveChannel(
 8005458:	213f      	movs	r1, #63	; 0x3f
 800545a:	4802      	ldr	r0, [pc, #8]	; (8005464 <Reset_IPCC+0x40>)
 800545c:	f7fe fd4f 	bl	8003efe <LL_C2_IPCC_DisableReceiveChannel>
			IPCC,
			LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
			| LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

	return;
 8005460:	bf00      	nop
}
 8005462:	bd80      	pop	{r7, pc}
 8005464:	58000c00 	.word	0x58000c00

08005468 <Reset_BackupDomain>:

static void Reset_BackupDomain( void )
{
 8005468:	b580      	push	{r7, lr}
 800546a:	af00      	add	r7, sp, #0
	if ((LL_RCC_IsActiveFlag_PINRST() != FALSE) && (LL_RCC_IsActiveFlag_SFTRST() == FALSE))
 800546c:	f7fe fcba 	bl	8003de4 <LL_RCC_IsActiveFlag_PINRST>
 8005470:	4603      	mov	r3, r0
 8005472:	2b00      	cmp	r3, #0
 8005474:	d00d      	beq.n	8005492 <Reset_BackupDomain+0x2a>
 8005476:	f7fe fcc8 	bl	8003e0a <LL_RCC_IsActiveFlag_SFTRST>
 800547a:	4603      	mov	r3, r0
 800547c:	2b00      	cmp	r3, #0
 800547e:	d108      	bne.n	8005492 <Reset_BackupDomain+0x2a>
	{
		HAL_PWR_EnableBkUpAccess(); /**< Enable access to the RTC registers */
 8005480:	f001 fd8c 	bl	8006f9c <HAL_PWR_EnableBkUpAccess>

		/**
		 *  Write twice the value to flush the APB-AHB bridge
		 *  This bit shall be written in the register before writing the next one
		 */
		HAL_PWR_EnableBkUpAccess();
 8005484:	f001 fd8a 	bl	8006f9c <HAL_PWR_EnableBkUpAccess>

		__HAL_RCC_BACKUPRESET_FORCE();
 8005488:	f7fe fc8a 	bl	8003da0 <LL_RCC_ForceBackupDomainReset>
		__HAL_RCC_BACKUPRESET_RELEASE();
 800548c:	f7fe fc99 	bl	8003dc2 <LL_RCC_ReleaseBackupDomainReset>
	}

	return;
 8005490:	bf00      	nop
 8005492:	bf00      	nop
}
 8005494:	bd80      	pop	{r7, pc}

08005496 <Init_Exti>:

static void Init_Exti( void )
{
 8005496:	b580      	push	{r7, lr}
 8005498:	af00      	add	r7, sp, #0
  /**< Disable all wakeup interrupt on CPU1  except IPCC(36), HSEM(38) */
  LL_EXTI_DisableIT_0_31(~0);
 800549a:	f04f 30ff 	mov.w	r0, #4294967295
 800549e:	f7fe fc1f 	bl	8003ce0 <LL_EXTI_DisableIT_0_31>
  LL_EXTI_DisableIT_32_63( (~0) & (~(LL_EXTI_LINE_36 | LL_EXTI_LINE_38)) );
 80054a2:	f06f 0050 	mvn.w	r0, #80	; 0x50
 80054a6:	f7fe fc31 	bl	8003d0c <LL_EXTI_DisableIT_32_63>

  return;
 80054aa:	bf00      	nop
}
 80054ac:	bd80      	pop	{r7, pc}

080054ae <HAL_Delay>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void HAL_Delay(uint32_t Delay)
{
 80054ae:	b580      	push	{r7, lr}
 80054b0:	b084      	sub	sp, #16
 80054b2:	af00      	add	r7, sp, #0
 80054b4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80054b6:	f000 fb97 	bl	8005be8 <HAL_GetTick>
 80054ba:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054c6:	d00a      	beq.n	80054de <HAL_Delay+0x30>
  {
    wait += HAL_GetTickFreq();
 80054c8:	f000 fba6 	bl	8005c18 <HAL_GetTickFreq>
 80054cc:	4603      	mov	r3, r0
 80054ce:	461a      	mov	r2, r3
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	4413      	add	r3, r2
 80054d4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80054d6:	e002      	b.n	80054de <HAL_Delay+0x30>
  {
    /************************************************************************************
     * ENTER SLEEP MODE
     ***********************************************************************************/
    LL_LPM_EnableSleep( ); /**< Clear SLEEPDEEP bit of Cortex System Control Register */
 80054d8:	f7fe fd3e 	bl	8003f58 <LL_LPM_EnableSleep>
     */
  #if defined ( __CC_ARM)
    __force_stores();
  #endif

    __WFI( );
 80054dc:	bf30      	wfi
  while ((HAL_GetTick() - tickstart) < wait)
 80054de:	f000 fb83 	bl	8005be8 <HAL_GetTick>
 80054e2:	4602      	mov	r2, r0
 80054e4:	68bb      	ldr	r3, [r7, #8]
 80054e6:	1ad3      	subs	r3, r2, r3
 80054e8:	68fa      	ldr	r2, [r7, #12]
 80054ea:	429a      	cmp	r2, r3
 80054ec:	d8f4      	bhi.n	80054d8 <HAL_Delay+0x2a>
  }
}
 80054ee:	bf00      	nop
 80054f0:	3710      	adds	r7, #16
 80054f2:	46bd      	mov	sp, r7
 80054f4:	bd80      	pop	{r7, pc}
	...

080054f8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80054f8:	b580      	push	{r7, lr}
 80054fa:	b082      	sub	sp, #8
 80054fc:	af00      	add	r7, sp, #0
 80054fe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM17) {
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	4a04      	ldr	r2, [pc, #16]	; (8005518 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8005506:	4293      	cmp	r3, r2
 8005508:	d101      	bne.n	800550e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800550a:	f000 fb59 	bl	8005bc0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800550e:	bf00      	nop
 8005510:	3708      	adds	r7, #8
 8005512:	46bd      	mov	sp, r7
 8005514:	bd80      	pop	{r7, pc}
 8005516:	bf00      	nop
 8005518:	40014800 	.word	0x40014800

0800551c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800551c:	b480      	push	{r7}
 800551e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
 
  /* USER CODE END Error_Handler_Debug */
}
 8005520:	bf00      	nop
 8005522:	46bd      	mov	sp, r7
 8005524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005528:	4770      	bx	lr

0800552a <LL_RCC_SetRTCClockSource>:
{
 800552a:	b480      	push	{r7}
 800552c:	b083      	sub	sp, #12
 800552e:	af00      	add	r7, sp, #0
 8005530:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8005532:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005536:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800553a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800553e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	4313      	orrs	r3, r2
 8005546:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 800554a:	bf00      	nop
 800554c:	370c      	adds	r7, #12
 800554e:	46bd      	mov	sp, r7
 8005550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005554:	4770      	bx	lr

08005556 <LL_RCC_EnableRTC>:
{
 8005556:	b480      	push	{r7}
 8005558:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 800555a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800555e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005562:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005566:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800556a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800556e:	bf00      	nop
 8005570:	46bd      	mov	sp, r7
 8005572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005576:	4770      	bx	lr

08005578 <LL_AHB2_GRP1_EnableClock>:
{
 8005578:	b480      	push	{r7}
 800557a:	b085      	sub	sp, #20
 800557c:	af00      	add	r7, sp, #0
 800557e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8005580:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005584:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005586:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	4313      	orrs	r3, r2
 800558e:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8005590:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005594:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	4013      	ands	r3, r2
 800559a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800559c:	68fb      	ldr	r3, [r7, #12]
}
 800559e:	bf00      	nop
 80055a0:	3714      	adds	r7, #20
 80055a2:	46bd      	mov	sp, r7
 80055a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a8:	4770      	bx	lr

080055aa <LL_AHB3_GRP1_EnableClock>:
{
 80055aa:	b480      	push	{r7}
 80055ac:	b085      	sub	sp, #20
 80055ae:	af00      	add	r7, sp, #0
 80055b0:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 80055b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80055b6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80055b8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	4313      	orrs	r3, r2
 80055c0:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 80055c2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80055c6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	4013      	ands	r3, r2
 80055cc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80055ce:	68fb      	ldr	r3, [r7, #12]
}
 80055d0:	bf00      	nop
 80055d2:	3714      	adds	r7, #20
 80055d4:	46bd      	mov	sp, r7
 80055d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055da:	4770      	bx	lr

080055dc <LL_APB1_GRP1_EnableClock>:
{
 80055dc:	b480      	push	{r7}
 80055de:	b085      	sub	sp, #20
 80055e0:	af00      	add	r7, sp, #0
 80055e2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 80055e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80055e8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80055ea:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	4313      	orrs	r3, r2
 80055f2:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80055f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80055f8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	4013      	ands	r3, r2
 80055fe:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8005600:	68fb      	ldr	r3, [r7, #12]
}
 8005602:	bf00      	nop
 8005604:	3714      	adds	r7, #20
 8005606:	46bd      	mov	sp, r7
 8005608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800560c:	4770      	bx	lr

0800560e <LL_APB2_GRP1_EnableClock>:
{
 800560e:	b480      	push	{r7}
 8005610:	b085      	sub	sp, #20
 8005612:	af00      	add	r7, sp, #0
 8005614:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8005616:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800561a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800561c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	4313      	orrs	r3, r2
 8005624:	660b      	str	r3, [r1, #96]	; 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8005626:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800562a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	4013      	ands	r3, r2
 8005630:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8005632:	68fb      	ldr	r3, [r7, #12]
}
 8005634:	bf00      	nop
 8005636:	3714      	adds	r7, #20
 8005638:	46bd      	mov	sp, r7
 800563a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800563e:	4770      	bx	lr

08005640 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005640:	b580      	push	{r7, lr}
 8005642:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_HSEM_CLK_ENABLE();
 8005644:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8005648:	f7ff ffaf 	bl	80055aa <LL_AHB3_GRP1_EnableClock>

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800564c:	2200      	movs	r2, #0
 800564e:	210f      	movs	r1, #15
 8005650:	f06f 0001 	mvn.w	r0, #1
 8005654:	f000 fc0e 	bl	8005e74 <HAL_NVIC_SetPriority>

  /* Peripheral interrupt init */
  /* HSEM_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HSEM_IRQn, 5, 0);
 8005658:	2200      	movs	r2, #0
 800565a:	2105      	movs	r1, #5
 800565c:	202e      	movs	r0, #46	; 0x2e
 800565e:	f000 fc09 	bl	8005e74 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HSEM_IRQn);
 8005662:	202e      	movs	r0, #46	; 0x2e
 8005664:	f000 fc20 	bl	8005ea8 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  HAL_NVIC_SetPriority(IPCC_C1_RX_IRQn , 6, 0);
 8005668:	2200      	movs	r2, #0
 800566a:	2106      	movs	r1, #6
 800566c:	202c      	movs	r0, #44	; 0x2c
 800566e:	f000 fc01 	bl	8005e74 <HAL_NVIC_SetPriority>
  HAL_NVIC_SetPriority(IPCC_C1_TX_IRQn , 6, 0);
 8005672:	2200      	movs	r2, #0
 8005674:	2106      	movs	r1, #6
 8005676:	202d      	movs	r0, #45	; 0x2d
 8005678:	f000 fbfc 	bl	8005e74 <HAL_NVIC_SetPriority>

  /* USER CODE END MspInit 1 */
}
 800567c:	bf00      	nop
 800567e:	bd80      	pop	{r7, pc}

08005680 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8005680:	b580      	push	{r7, lr}
 8005682:	b082      	sub	sp, #8
 8005684:	af00      	add	r7, sp, #0
 8005686:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	4a0b      	ldr	r2, [pc, #44]	; (80056bc <HAL_RTC_MspInit+0x3c>)
 800568e:	4293      	cmp	r3, r2
 8005690:	d110      	bne.n	80056b4 <HAL_RTC_MspInit+0x34>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */
  HAL_PWR_EnableBkUpAccess(); /**< Enable access to the RTC registers */
 8005692:	f001 fc83 	bl	8006f9c <HAL_PWR_EnableBkUpAccess>

  /**
  *  Write twice the value to flush the APB-AHB bridge
  *  This bit shall be written in the register before writing the next one
  */
  HAL_PWR_EnableBkUpAccess();
 8005696:	f001 fc81 	bl	8006f9c <HAL_PWR_EnableBkUpAccess>

  __HAL_RCC_RTC_CONFIG(RCC_RTCCLKSOURCE_LSE); /**< Select LSI as RTC Input */
 800569a:	f44f 7080 	mov.w	r0, #256	; 0x100
 800569e:	f7ff ff44 	bl	800552a <LL_RCC_SetRTCClockSource>
  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80056a2:	f7ff ff58 	bl	8005556 <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 80056a6:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80056aa:	f7ff ff97 	bl	80055dc <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN RTC_MspInit 1 */
  HAL_RTCEx_EnableBypassShadow(hrtc);
 80056ae:	6878      	ldr	r0, [r7, #4]
 80056b0:	f003 fdc6 	bl	8009240 <HAL_RTCEx_EnableBypassShadow>
  /* USER CODE END RTC_MspInit 1 */
  }

}
 80056b4:	bf00      	nop
 80056b6:	3708      	adds	r7, #8
 80056b8:	46bd      	mov	sp, r7
 80056ba:	bd80      	pop	{r7, pc}
 80056bc:	40002800 	.word	0x40002800

080056c0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80056c0:	b580      	push	{r7, lr}
 80056c2:	b088      	sub	sp, #32
 80056c4:	af00      	add	r7, sp, #0
 80056c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80056c8:	f107 030c 	add.w	r3, r7, #12
 80056cc:	2200      	movs	r2, #0
 80056ce:	601a      	str	r2, [r3, #0]
 80056d0:	605a      	str	r2, [r3, #4]
 80056d2:	609a      	str	r2, [r3, #8]
 80056d4:	60da      	str	r2, [r3, #12]
 80056d6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	4a0f      	ldr	r2, [pc, #60]	; (800571c <HAL_I2C_MspInit+0x5c>)
 80056de:	4293      	cmp	r3, r2
 80056e0:	d117      	bne.n	8005712 <HAL_I2C_MspInit+0x52>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80056e2:	2002      	movs	r0, #2
 80056e4:	f7ff ff48 	bl	8005578 <LL_AHB2_GRP1_EnableClock>
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80056e8:	f44f 7340 	mov.w	r3, #768	; 0x300
 80056ec:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80056ee:	2312      	movs	r3, #18
 80056f0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80056f2:	2301      	movs	r3, #1
 80056f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80056f6:	2300      	movs	r3, #0
 80056f8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80056fa:	2304      	movs	r3, #4
 80056fc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80056fe:	f107 030c 	add.w	r3, r7, #12
 8005702:	4619      	mov	r1, r3
 8005704:	4806      	ldr	r0, [pc, #24]	; (8005720 <HAL_I2C_MspInit+0x60>)
 8005706:	f000 fc07 	bl	8005f18 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800570a:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 800570e:	f7ff ff65 	bl	80055dc <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8005712:	bf00      	nop
 8005714:	3720      	adds	r7, #32
 8005716:	46bd      	mov	sp, r7
 8005718:	bd80      	pop	{r7, pc}
 800571a:	bf00      	nop
 800571c:	40005400 	.word	0x40005400
 8005720:	48000400 	.word	0x48000400

08005724 <HAL_SPI_MspInit>:
  }

}

void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8005724:	b580      	push	{r7, lr}
 8005726:	b088      	sub	sp, #32
 8005728:	af00      	add	r7, sp, #0
 800572a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800572c:	f107 030c 	add.w	r3, r7, #12
 8005730:	2200      	movs	r2, #0
 8005732:	601a      	str	r2, [r3, #0]
 8005734:	605a      	str	r2, [r3, #4]
 8005736:	609a      	str	r2, [r3, #8]
 8005738:	60da      	str	r2, [r3, #12]
 800573a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	4a0f      	ldr	r2, [pc, #60]	; (8005780 <HAL_SPI_MspInit+0x5c>)
 8005742:	4293      	cmp	r3, r2
 8005744:	d117      	bne.n	8005776 <HAL_SPI_MspInit+0x52>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8005746:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800574a:	f7ff ff60 	bl	800560e <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800574e:	2001      	movs	r0, #1
 8005750:	f7ff ff12 	bl	8005578 <LL_AHB2_GRP1_EnableClock>
    /**SPI1 GPIO Configuration
    PA1     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_7;
 8005754:	2382      	movs	r3, #130	; 0x82
 8005756:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005758:	2302      	movs	r3, #2
 800575a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800575c:	2300      	movs	r3, #0
 800575e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005760:	2300      	movs	r3, #0
 8005762:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8005764:	2305      	movs	r3, #5
 8005766:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005768:	f107 030c 	add.w	r3, r7, #12
 800576c:	4619      	mov	r1, r3
 800576e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005772:	f000 fbd1 	bl	8005f18 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8005776:	bf00      	nop
 8005778:	3720      	adds	r7, #32
 800577a:	46bd      	mov	sp, r7
 800577c:	bd80      	pop	{r7, pc}
 800577e:	bf00      	nop
 8005780:	40013000 	.word	0x40013000

08005784 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8005784:	b580      	push	{r7, lr}
 8005786:	b082      	sub	sp, #8
 8005788:	af00      	add	r7, sp, #0
 800578a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	4a09      	ldr	r2, [pc, #36]	; (80057b8 <HAL_TIM_Base_MspInit+0x34>)
 8005792:	4293      	cmp	r3, r2
 8005794:	d10b      	bne.n	80057ae <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8005796:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800579a:	f7ff ff38 	bl	800560e <LL_APB2_GRP1_EnableClock>
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 15, 0);
 800579e:	2200      	movs	r2, #0
 80057a0:	210f      	movs	r1, #15
 80057a2:	2019      	movs	r0, #25
 80057a4:	f000 fb66 	bl	8005e74 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 80057a8:	2019      	movs	r0, #25
 80057aa:	f000 fb7d 	bl	8005ea8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80057ae:	bf00      	nop
 80057b0:	3708      	adds	r7, #8
 80057b2:	46bd      	mov	sp, r7
 80057b4:	bd80      	pop	{r7, pc}
 80057b6:	bf00      	nop
 80057b8:	40012c00 	.word	0x40012c00

080057bc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80057bc:	b580      	push	{r7, lr}
 80057be:	b088      	sub	sp, #32
 80057c0:	af00      	add	r7, sp, #0
 80057c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80057c4:	f107 030c 	add.w	r3, r7, #12
 80057c8:	2200      	movs	r2, #0
 80057ca:	601a      	str	r2, [r3, #0]
 80057cc:	605a      	str	r2, [r3, #4]
 80057ce:	609a      	str	r2, [r3, #8]
 80057d0:	60da      	str	r2, [r3, #12]
 80057d2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	4a0d      	ldr	r2, [pc, #52]	; (8005810 <HAL_TIM_MspPostInit+0x54>)
 80057da:	4293      	cmp	r3, r2
 80057dc:	d114      	bne.n	8005808 <HAL_TIM_MspPostInit+0x4c>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80057de:	2001      	movs	r0, #1
 80057e0:	f7ff feca 	bl	8005578 <LL_AHB2_GRP1_EnableClock>
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80057e4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80057e8:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80057ea:	2302      	movs	r3, #2
 80057ec:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80057ee:	2300      	movs	r3, #0
 80057f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80057f2:	2300      	movs	r3, #0
 80057f4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80057f6:	2301      	movs	r3, #1
 80057f8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80057fa:	f107 030c 	add.w	r3, r7, #12
 80057fe:	4619      	mov	r1, r3
 8005800:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005804:	f000 fb88 	bl	8005f18 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8005808:	bf00      	nop
 800580a:	3720      	adds	r7, #32
 800580c:	46bd      	mov	sp, r7
 800580e:	bd80      	pop	{r7, pc}
 8005810:	40012c00 	.word	0x40012c00

08005814 <LL_APB2_GRP1_EnableClock>:
{
 8005814:	b480      	push	{r7}
 8005816:	b085      	sub	sp, #20
 8005818:	af00      	add	r7, sp, #0
 800581a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 800581c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005820:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8005822:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	4313      	orrs	r3, r2
 800582a:	660b      	str	r3, [r1, #96]	; 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 800582c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005830:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	4013      	ands	r3, r2
 8005836:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8005838:	68fb      	ldr	r3, [r7, #12]
}
 800583a:	bf00      	nop
 800583c:	3714      	adds	r7, #20
 800583e:	46bd      	mov	sp, r7
 8005840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005844:	4770      	bx	lr
	...

08005848 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005848:	b580      	push	{r7, lr}
 800584a:	b08c      	sub	sp, #48	; 0x30
 800584c:	af00      	add	r7, sp, #0
 800584e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8005850:	2300      	movs	r3, #0
 8005852:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8005854:	2300      	movs	r3, #0
 8005856:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM17 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, TickPriority ,0);
 8005858:	2200      	movs	r2, #0
 800585a:	6879      	ldr	r1, [r7, #4]
 800585c:	201a      	movs	r0, #26
 800585e:	f000 fb09 	bl	8005e74 <HAL_NVIC_SetPriority>

  /* Enable the TIM17 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 8005862:	201a      	movs	r0, #26
 8005864:	f000 fb20 	bl	8005ea8 <HAL_NVIC_EnableIRQ>
  /* Enable TIM17 clock */
  __HAL_RCC_TIM17_CLK_ENABLE();
 8005868:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 800586c:	f7ff ffd2 	bl	8005814 <LL_APB2_GRP1_EnableClock>

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8005870:	f107 0208 	add.w	r2, r7, #8
 8005874:	f107 030c 	add.w	r3, r7, #12
 8005878:	4611      	mov	r1, r2
 800587a:	4618      	mov	r0, r3
 800587c:	f002 fc8e 	bl	800819c <HAL_RCC_GetClockConfig>

  /* Compute TIM17 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8005880:	f002 fc76 	bl	8008170 <HAL_RCC_GetPCLK2Freq>
 8005884:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM17 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8005886:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005888:	4a12      	ldr	r2, [pc, #72]	; (80058d4 <HAL_InitTick+0x8c>)
 800588a:	fba2 2303 	umull	r2, r3, r2, r3
 800588e:	0c9b      	lsrs	r3, r3, #18
 8005890:	3b01      	subs	r3, #1
 8005892:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM17 */
  htim17.Instance = TIM17;
 8005894:	4b10      	ldr	r3, [pc, #64]	; (80058d8 <HAL_InitTick+0x90>)
 8005896:	4a11      	ldr	r2, [pc, #68]	; (80058dc <HAL_InitTick+0x94>)
 8005898:	601a      	str	r2, [r3, #0]
  + Period = [(TIM17CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim17.Init.Period = (1000000U / 1000U) - 1U;
 800589a:	4b0f      	ldr	r3, [pc, #60]	; (80058d8 <HAL_InitTick+0x90>)
 800589c:	f240 32e7 	movw	r2, #999	; 0x3e7
 80058a0:	60da      	str	r2, [r3, #12]
  htim17.Init.Prescaler = uwPrescalerValue;
 80058a2:	4a0d      	ldr	r2, [pc, #52]	; (80058d8 <HAL_InitTick+0x90>)
 80058a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058a6:	6053      	str	r3, [r2, #4]
  htim17.Init.ClockDivision = 0;
 80058a8:	4b0b      	ldr	r3, [pc, #44]	; (80058d8 <HAL_InitTick+0x90>)
 80058aa:	2200      	movs	r2, #0
 80058ac:	611a      	str	r2, [r3, #16]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 80058ae:	4b0a      	ldr	r3, [pc, #40]	; (80058d8 <HAL_InitTick+0x90>)
 80058b0:	2200      	movs	r2, #0
 80058b2:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim17) == HAL_OK)
 80058b4:	4808      	ldr	r0, [pc, #32]	; (80058d8 <HAL_InitTick+0x90>)
 80058b6:	f004 f867 	bl	8009988 <HAL_TIM_Base_Init>
 80058ba:	4603      	mov	r3, r0
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d104      	bne.n	80058ca <HAL_InitTick+0x82>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim17);
 80058c0:	4805      	ldr	r0, [pc, #20]	; (80058d8 <HAL_InitTick+0x90>)
 80058c2:	f004 f8b9 	bl	8009a38 <HAL_TIM_Base_Start_IT>
 80058c6:	4603      	mov	r3, r0
 80058c8:	e000      	b.n	80058cc <HAL_InitTick+0x84>
  }

  /* Return function status */
  return HAL_ERROR;
 80058ca:	2301      	movs	r3, #1
}
 80058cc:	4618      	mov	r0, r3
 80058ce:	3730      	adds	r7, #48	; 0x30
 80058d0:	46bd      	mov	sp, r7
 80058d2:	bd80      	pop	{r7, pc}
 80058d4:	431bde83 	.word	0x431bde83
 80058d8:	2000622c 	.word	0x2000622c
 80058dc:	40014800 	.word	0x40014800

080058e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80058e0:	b480      	push	{r7}
 80058e2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80058e4:	bf00      	nop
 80058e6:	46bd      	mov	sp, r7
 80058e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ec:	4770      	bx	lr

080058ee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80058ee:	b480      	push	{r7}
 80058f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80058f2:	e7fe      	b.n	80058f2 <HardFault_Handler+0x4>

080058f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80058f4:	b480      	push	{r7}
 80058f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80058f8:	e7fe      	b.n	80058f8 <MemManage_Handler+0x4>

080058fa <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80058fa:	b480      	push	{r7}
 80058fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80058fe:	e7fe      	b.n	80058fe <BusFault_Handler+0x4>

08005900 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005900:	b480      	push	{r7}
 8005902:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005904:	e7fe      	b.n	8005904 <UsageFault_Handler+0x4>

08005906 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005906:	b480      	push	{r7}
 8005908:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800590a:	bf00      	nop
 800590c:	46bd      	mov	sp, r7
 800590e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005912:	4770      	bx	lr

08005914 <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM17 global interrupt.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 8005914:	b580      	push	{r7, lr}
 8005916:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 8005918:	4802      	ldr	r0, [pc, #8]	; (8005924 <TIM1_TRG_COM_TIM17_IRQHandler+0x10>)
 800591a:	f004 fa9f 	bl	8009e5c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 800591e:	bf00      	nop
 8005920:	bd80      	pop	{r7, pc}
 8005922:	bf00      	nop
 8005924:	2000622c 	.word	0x2000622c

08005928 <HSEM_IRQHandler>:

/**
  * @brief This function handles HSEM global interrupt.
  */
void HSEM_IRQHandler(void)
{
 8005928:	b580      	push	{r7, lr}
 800592a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HSEM_IRQn 0 */

  /* USER CODE END HSEM_IRQn 0 */
  HAL_HSEM_IRQHandler();
 800592c:	f000 fcac 	bl	8006288 <HAL_HSEM_IRQHandler>
  /* USER CODE BEGIN HSEM_IRQn 1 */

  /* USER CODE END HSEM_IRQn 1 */
}
 8005930:	bf00      	nop
 8005932:	bd80      	pop	{r7, pc}

08005934 <EXTI3_IRQHandler>:
 *         interrupt request.
 * @param  None
 * @retval None
 */
void EXTI3_IRQHandler(void)
{
 8005934:	b580      	push	{r7, lr}
 8005936:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8005938:	2008      	movs	r0, #8
 800593a:	f000 fc8d 	bl	8006258 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 800593e:	bf00      	nop
 8005940:	bd80      	pop	{r7, pc}

08005942 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8005942:	b580      	push	{r7, lr}
 8005944:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8005946:	2010      	movs	r0, #16
 8005948:	f000 fc86 	bl	8006258 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 800594c:	bf00      	nop
 800594e:	bd80      	pop	{r7, pc}

08005950 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8005950:	b580      	push	{r7, lr}
 8005952:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8005954:	2020      	movs	r0, #32
 8005956:	f000 fc7f 	bl	8006258 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800595a:	bf00      	nop
 800595c:	bd80      	pop	{r7, pc}
	...

08005960 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8005960:	b580      	push	{r7, lr}
 8005962:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8005964:	4802      	ldr	r0, [pc, #8]	; (8005970 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8005966:	f004 fa79 	bl	8009e5c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 800596a:	bf00      	nop
 800596c:	bd80      	pop	{r7, pc}
 800596e:	bf00      	nop
 8005970:	20006174 	.word	0x20006174

08005974 <RTC_WKUP_IRQHandler>:

void RTC_WKUP_IRQHandler(void)
{
 8005974:	b580      	push	{r7, lr}
 8005976:	af00      	add	r7, sp, #0
  HW_TS_RTC_Wakeup_Handler();
 8005978:	f7fd fc14 	bl	80031a4 <HW_TS_RTC_Wakeup_Handler>
}
 800597c:	bf00      	nop
 800597e:	bd80      	pop	{r7, pc}

08005980 <IPCC_C1_TX_IRQHandler>:

void IPCC_C1_TX_IRQHandler(void)
{
 8005980:	b580      	push	{r7, lr}
 8005982:	af00      	add	r7, sp, #0
  HW_IPCC_Tx_Handler();
 8005984:	f7fb fff4 	bl	8001970 <HW_IPCC_Tx_Handler>

  return;
 8005988:	bf00      	nop
}
 800598a:	bd80      	pop	{r7, pc}

0800598c <IPCC_C1_RX_IRQHandler>:

void IPCC_C1_RX_IRQHandler(void)
{
 800598c:	b580      	push	{r7, lr}
 800598e:	af00      	add	r7, sp, #0
  HW_IPCC_Rx_Handler();
 8005990:	f7fb ffb6 	bl	8001900 <HW_IPCC_Rx_Handler>
  return;
 8005994:	bf00      	nop
}
 8005996:	bd80      	pop	{r7, pc}

08005998 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8005998:	b580      	push	{r7, lr}
 800599a:	b086      	sub	sp, #24
 800599c:	af00      	add	r7, sp, #0
 800599e:	60f8      	str	r0, [r7, #12]
 80059a0:	60b9      	str	r1, [r7, #8]
 80059a2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80059a4:	2300      	movs	r3, #0
 80059a6:	617b      	str	r3, [r7, #20]
 80059a8:	e00a      	b.n	80059c0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80059aa:	f3af 8000 	nop.w
 80059ae:	4601      	mov	r1, r0
 80059b0:	68bb      	ldr	r3, [r7, #8]
 80059b2:	1c5a      	adds	r2, r3, #1
 80059b4:	60ba      	str	r2, [r7, #8]
 80059b6:	b2ca      	uxtb	r2, r1
 80059b8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80059ba:	697b      	ldr	r3, [r7, #20]
 80059bc:	3301      	adds	r3, #1
 80059be:	617b      	str	r3, [r7, #20]
 80059c0:	697a      	ldr	r2, [r7, #20]
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	429a      	cmp	r2, r3
 80059c6:	dbf0      	blt.n	80059aa <_read+0x12>
	}

return len;
 80059c8:	687b      	ldr	r3, [r7, #4]
}
 80059ca:	4618      	mov	r0, r3
 80059cc:	3718      	adds	r7, #24
 80059ce:	46bd      	mov	sp, r7
 80059d0:	bd80      	pop	{r7, pc}

080059d2 <_close>:
	}
	return len;
}

int _close(int file)
{
 80059d2:	b480      	push	{r7}
 80059d4:	b083      	sub	sp, #12
 80059d6:	af00      	add	r7, sp, #0
 80059d8:	6078      	str	r0, [r7, #4]
	return -1;
 80059da:	f04f 33ff 	mov.w	r3, #4294967295
}
 80059de:	4618      	mov	r0, r3
 80059e0:	370c      	adds	r7, #12
 80059e2:	46bd      	mov	sp, r7
 80059e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e8:	4770      	bx	lr

080059ea <_fstat>:


int _fstat(int file, struct stat *st)
{
 80059ea:	b480      	push	{r7}
 80059ec:	b083      	sub	sp, #12
 80059ee:	af00      	add	r7, sp, #0
 80059f0:	6078      	str	r0, [r7, #4]
 80059f2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80059f4:	683b      	ldr	r3, [r7, #0]
 80059f6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80059fa:	605a      	str	r2, [r3, #4]
	return 0;
 80059fc:	2300      	movs	r3, #0
}
 80059fe:	4618      	mov	r0, r3
 8005a00:	370c      	adds	r7, #12
 8005a02:	46bd      	mov	sp, r7
 8005a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a08:	4770      	bx	lr

08005a0a <_isatty>:

int _isatty(int file)
{
 8005a0a:	b480      	push	{r7}
 8005a0c:	b083      	sub	sp, #12
 8005a0e:	af00      	add	r7, sp, #0
 8005a10:	6078      	str	r0, [r7, #4]
	return 1;
 8005a12:	2301      	movs	r3, #1
}
 8005a14:	4618      	mov	r0, r3
 8005a16:	370c      	adds	r7, #12
 8005a18:	46bd      	mov	sp, r7
 8005a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a1e:	4770      	bx	lr

08005a20 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8005a20:	b480      	push	{r7}
 8005a22:	b085      	sub	sp, #20
 8005a24:	af00      	add	r7, sp, #0
 8005a26:	60f8      	str	r0, [r7, #12]
 8005a28:	60b9      	str	r1, [r7, #8]
 8005a2a:	607a      	str	r2, [r7, #4]
	return 0;
 8005a2c:	2300      	movs	r3, #0
}
 8005a2e:	4618      	mov	r0, r3
 8005a30:	3714      	adds	r7, #20
 8005a32:	46bd      	mov	sp, r7
 8005a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a38:	4770      	bx	lr
	...

08005a3c <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8005a3c:	b580      	push	{r7, lr}
 8005a3e:	b084      	sub	sp, #16
 8005a40:	af00      	add	r7, sp, #0
 8005a42:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8005a44:	4b11      	ldr	r3, [pc, #68]	; (8005a8c <_sbrk+0x50>)
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d102      	bne.n	8005a52 <_sbrk+0x16>
		heap_end = &end;
 8005a4c:	4b0f      	ldr	r3, [pc, #60]	; (8005a8c <_sbrk+0x50>)
 8005a4e:	4a10      	ldr	r2, [pc, #64]	; (8005a90 <_sbrk+0x54>)
 8005a50:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8005a52:	4b0e      	ldr	r3, [pc, #56]	; (8005a8c <_sbrk+0x50>)
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8005a58:	4b0c      	ldr	r3, [pc, #48]	; (8005a8c <_sbrk+0x50>)
 8005a5a:	681a      	ldr	r2, [r3, #0]
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	4413      	add	r3, r2
 8005a60:	466a      	mov	r2, sp
 8005a62:	4293      	cmp	r3, r2
 8005a64:	d907      	bls.n	8005a76 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8005a66:	f00c f85f 	bl	8011b28 <__errno>
 8005a6a:	4602      	mov	r2, r0
 8005a6c:	230c      	movs	r3, #12
 8005a6e:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8005a70:	f04f 33ff 	mov.w	r3, #4294967295
 8005a74:	e006      	b.n	8005a84 <_sbrk+0x48>
	}

	heap_end += incr;
 8005a76:	4b05      	ldr	r3, [pc, #20]	; (8005a8c <_sbrk+0x50>)
 8005a78:	681a      	ldr	r2, [r3, #0]
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	4413      	add	r3, r2
 8005a7e:	4a03      	ldr	r2, [pc, #12]	; (8005a8c <_sbrk+0x50>)
 8005a80:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8005a82:	68fb      	ldr	r3, [r7, #12]
}
 8005a84:	4618      	mov	r0, r3
 8005a86:	3710      	adds	r7, #16
 8005a88:	46bd      	mov	sp, r7
 8005a8a:	bd80      	pop	{r7, pc}
 8005a8c:	200003ec 	.word	0x200003ec
 8005a90:	200062c0 	.word	0x200062c0

08005a94 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8005a94:	b480      	push	{r7}
 8005a96:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined(VECT_TAB_SRAM) && defined(VECT_TAB_BASE_ADDRESS)  
  /* program in SRAMx */
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;  /* Vector Table Relocation in Internal SRAMx for CPU1 */
#else    /* program in FLASH */
  SCB->VTOR = VECT_TAB_OFFSET;              /* Vector Table Relocation in Internal FLASH */
 8005a98:	4b26      	ldr	r3, [pc, #152]	; (8005b34 <SystemInit+0xa0>)
 8005a9a:	2200      	movs	r2, #0
 8005a9c:	609a      	str	r2, [r3, #8]
#endif

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
 8005a9e:	4b25      	ldr	r3, [pc, #148]	; (8005b34 <SystemInit+0xa0>)
 8005aa0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005aa4:	4a23      	ldr	r2, [pc, #140]	; (8005b34 <SystemInit+0xa0>)
 8005aa6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005aaa:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8005aae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005ab8:	f043 0301 	orr.w	r3, r3, #1
 8005abc:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 8005abe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005ac2:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 8005ac6:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 8005ac8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005acc:	681a      	ldr	r2, [r3, #0]
 8005ace:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005ad2:	4b19      	ldr	r3, [pc, #100]	; (8005b38 <SystemInit+0xa4>)
 8005ad4:	4013      	ands	r3, r2
 8005ad6:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 8005ad8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005adc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005ae0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005ae4:	f023 0305 	bic.w	r3, r3, #5
 8005ae8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  
  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8005aec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005af0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005af4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005af8:	f023 0301 	bic.w	r3, r3, #1
 8005afc:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
    
  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 8005b00:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005b04:	4a0d      	ldr	r2, [pc, #52]	; (8005b3c <SystemInit+0xa8>)
 8005b06:	60da      	str	r2, [r3, #12]

  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 8005b08:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005b0c:	4a0b      	ldr	r2, [pc, #44]	; (8005b3c <SystemInit+0xa8>)
 8005b0e:	611a      	str	r2, [r3, #16]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8005b10:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005b1a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005b1e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8005b20:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005b24:	2200      	movs	r2, #0
 8005b26:	619a      	str	r2, [r3, #24]
}
 8005b28:	bf00      	nop
 8005b2a:	46bd      	mov	sp, r7
 8005b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b30:	4770      	bx	lr
 8005b32:	bf00      	nop
 8005b34:	e000ed00 	.word	0xe000ed00
 8005b38:	faf6fefb 	.word	0xfaf6fefb
 8005b3c:	22041000 	.word	0x22041000

08005b40 <LL_DBGMCU_EnableDBGSleepMode>:
{
 8005b40:	b480      	push	{r7}
 8005b42:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 8005b44:	4b05      	ldr	r3, [pc, #20]	; (8005b5c <LL_DBGMCU_EnableDBGSleepMode+0x1c>)
 8005b46:	685b      	ldr	r3, [r3, #4]
 8005b48:	4a04      	ldr	r2, [pc, #16]	; (8005b5c <LL_DBGMCU_EnableDBGSleepMode+0x1c>)
 8005b4a:	f043 0301 	orr.w	r3, r3, #1
 8005b4e:	6053      	str	r3, [r2, #4]
}
 8005b50:	bf00      	nop
 8005b52:	46bd      	mov	sp, r7
 8005b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b58:	4770      	bx	lr
 8005b5a:	bf00      	nop
 8005b5c:	e0042000 	.word	0xe0042000

08005b60 <LL_DBGMCU_EnableDBGStopMode>:
{
 8005b60:	b480      	push	{r7}
 8005b62:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 8005b64:	4b05      	ldr	r3, [pc, #20]	; (8005b7c <LL_DBGMCU_EnableDBGStopMode+0x1c>)
 8005b66:	685b      	ldr	r3, [r3, #4]
 8005b68:	4a04      	ldr	r2, [pc, #16]	; (8005b7c <LL_DBGMCU_EnableDBGStopMode+0x1c>)
 8005b6a:	f043 0302 	orr.w	r3, r3, #2
 8005b6e:	6053      	str	r3, [r2, #4]
}
 8005b70:	bf00      	nop
 8005b72:	46bd      	mov	sp, r7
 8005b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b78:	4770      	bx	lr
 8005b7a:	bf00      	nop
 8005b7c:	e0042000 	.word	0xe0042000

08005b80 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005b80:	b580      	push	{r7, lr}
 8005b82:	b082      	sub	sp, #8
 8005b84:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8005b86:	2300      	movs	r3, #0
 8005b88:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005b8a:	4b0c      	ldr	r3, [pc, #48]	; (8005bbc <HAL_Init+0x3c>)
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	4a0b      	ldr	r2, [pc, #44]	; (8005bbc <HAL_Init+0x3c>)
 8005b90:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005b94:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005b96:	2003      	movs	r0, #3
 8005b98:	f000 f961 	bl	8005e5e <HAL_NVIC_SetPriorityGrouping>
  
  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8005b9c:	2000      	movs	r0, #0
 8005b9e:	f7ff fe53 	bl	8005848 <HAL_InitTick>
 8005ba2:	4603      	mov	r3, r0
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d002      	beq.n	8005bae <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8005ba8:	2301      	movs	r3, #1
 8005baa:	71fb      	strb	r3, [r7, #7]
 8005bac:	e001      	b.n	8005bb2 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8005bae:	f7ff fd47 	bl	8005640 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8005bb2:	79fb      	ldrb	r3, [r7, #7]
}
 8005bb4:	4618      	mov	r0, r3
 8005bb6:	3708      	adds	r7, #8
 8005bb8:	46bd      	mov	sp, r7
 8005bba:	bd80      	pop	{r7, pc}
 8005bbc:	58004000 	.word	0x58004000

08005bc0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005bc0:	b480      	push	{r7}
 8005bc2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8005bc4:	4b06      	ldr	r3, [pc, #24]	; (8005be0 <HAL_IncTick+0x20>)
 8005bc6:	781b      	ldrb	r3, [r3, #0]
 8005bc8:	461a      	mov	r2, r3
 8005bca:	4b06      	ldr	r3, [pc, #24]	; (8005be4 <HAL_IncTick+0x24>)
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	4413      	add	r3, r2
 8005bd0:	4a04      	ldr	r2, [pc, #16]	; (8005be4 <HAL_IncTick+0x24>)
 8005bd2:	6013      	str	r3, [r2, #0]
}
 8005bd4:	bf00      	nop
 8005bd6:	46bd      	mov	sp, r7
 8005bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bdc:	4770      	bx	lr
 8005bde:	bf00      	nop
 8005be0:	2000001c 	.word	0x2000001c
 8005be4:	20006278 	.word	0x20006278

08005be8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005be8:	b480      	push	{r7}
 8005bea:	af00      	add	r7, sp, #0
  return uwTick;
 8005bec:	4b03      	ldr	r3, [pc, #12]	; (8005bfc <HAL_GetTick+0x14>)
 8005bee:	681b      	ldr	r3, [r3, #0]
}
 8005bf0:	4618      	mov	r0, r3
 8005bf2:	46bd      	mov	sp, r7
 8005bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf8:	4770      	bx	lr
 8005bfa:	bf00      	nop
 8005bfc:	20006278 	.word	0x20006278

08005c00 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8005c00:	b480      	push	{r7}
 8005c02:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8005c04:	4b03      	ldr	r3, [pc, #12]	; (8005c14 <HAL_GetTickPrio+0x14>)
 8005c06:	681b      	ldr	r3, [r3, #0]
}
 8005c08:	4618      	mov	r0, r3
 8005c0a:	46bd      	mov	sp, r7
 8005c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c10:	4770      	bx	lr
 8005c12:	bf00      	nop
 8005c14:	20000018 	.word	0x20000018

08005c18 <HAL_GetTickFreq>:
/**
  * @brief Return tick frequency.
  * @retval tick period in Hz
  */
HAL_TickFreqTypeDef HAL_GetTickFreq(void)
{
 8005c18:	b480      	push	{r7}
 8005c1a:	af00      	add	r7, sp, #0
  return uwTickFreq;
 8005c1c:	4b03      	ldr	r3, [pc, #12]	; (8005c2c <HAL_GetTickFreq+0x14>)
 8005c1e:	781b      	ldrb	r3, [r3, #0]
}
 8005c20:	4618      	mov	r0, r3
 8005c22:	46bd      	mov	sp, r7
 8005c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c28:	4770      	bx	lr
 8005c2a:	bf00      	nop
 8005c2c:	2000001c 	.word	0x2000001c

08005c30 <HAL_DBGMCU_EnableDBGSleepMode>:
/**
  * @brief  Enable the Debug Module during SLEEP mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGSleepMode(void)
{
 8005c30:	b580      	push	{r7, lr}
 8005c32:	af00      	add	r7, sp, #0
  LL_DBGMCU_EnableDBGSleepMode();
 8005c34:	f7ff ff84 	bl	8005b40 <LL_DBGMCU_EnableDBGSleepMode>
}
 8005c38:	bf00      	nop
 8005c3a:	bd80      	pop	{r7, pc}

08005c3c <HAL_DBGMCU_EnableDBGStopMode>:
/**
  * @brief  Enable the Debug Module during STOP mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStopMode(void)
{
 8005c3c:	b580      	push	{r7, lr}
 8005c3e:	af00      	add	r7, sp, #0
  LL_DBGMCU_EnableDBGStopMode();
 8005c40:	f7ff ff8e 	bl	8005b60 <LL_DBGMCU_EnableDBGStopMode>
}
 8005c44:	bf00      	nop
 8005c46:	bd80      	pop	{r7, pc}

08005c48 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005c48:	b480      	push	{r7}
 8005c4a:	b085      	sub	sp, #20
 8005c4c:	af00      	add	r7, sp, #0
 8005c4e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	f003 0307 	and.w	r3, r3, #7
 8005c56:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005c58:	4b0c      	ldr	r3, [pc, #48]	; (8005c8c <__NVIC_SetPriorityGrouping+0x44>)
 8005c5a:	68db      	ldr	r3, [r3, #12]
 8005c5c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005c5e:	68ba      	ldr	r2, [r7, #8]
 8005c60:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005c64:	4013      	ands	r3, r2
 8005c66:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005c6c:	68bb      	ldr	r3, [r7, #8]
 8005c6e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005c70:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005c74:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005c78:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005c7a:	4a04      	ldr	r2, [pc, #16]	; (8005c8c <__NVIC_SetPriorityGrouping+0x44>)
 8005c7c:	68bb      	ldr	r3, [r7, #8]
 8005c7e:	60d3      	str	r3, [r2, #12]
}
 8005c80:	bf00      	nop
 8005c82:	3714      	adds	r7, #20
 8005c84:	46bd      	mov	sp, r7
 8005c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c8a:	4770      	bx	lr
 8005c8c:	e000ed00 	.word	0xe000ed00

08005c90 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005c90:	b480      	push	{r7}
 8005c92:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005c94:	4b04      	ldr	r3, [pc, #16]	; (8005ca8 <__NVIC_GetPriorityGrouping+0x18>)
 8005c96:	68db      	ldr	r3, [r3, #12]
 8005c98:	0a1b      	lsrs	r3, r3, #8
 8005c9a:	f003 0307 	and.w	r3, r3, #7
}
 8005c9e:	4618      	mov	r0, r3
 8005ca0:	46bd      	mov	sp, r7
 8005ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca6:	4770      	bx	lr
 8005ca8:	e000ed00 	.word	0xe000ed00

08005cac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005cac:	b480      	push	{r7}
 8005cae:	b083      	sub	sp, #12
 8005cb0:	af00      	add	r7, sp, #0
 8005cb2:	4603      	mov	r3, r0
 8005cb4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005cb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	db0b      	blt.n	8005cd6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005cbe:	79fb      	ldrb	r3, [r7, #7]
 8005cc0:	f003 021f 	and.w	r2, r3, #31
 8005cc4:	4907      	ldr	r1, [pc, #28]	; (8005ce4 <__NVIC_EnableIRQ+0x38>)
 8005cc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005cca:	095b      	lsrs	r3, r3, #5
 8005ccc:	2001      	movs	r0, #1
 8005cce:	fa00 f202 	lsl.w	r2, r0, r2
 8005cd2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8005cd6:	bf00      	nop
 8005cd8:	370c      	adds	r7, #12
 8005cda:	46bd      	mov	sp, r7
 8005cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ce0:	4770      	bx	lr
 8005ce2:	bf00      	nop
 8005ce4:	e000e100 	.word	0xe000e100

08005ce8 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8005ce8:	b480      	push	{r7}
 8005cea:	b083      	sub	sp, #12
 8005cec:	af00      	add	r7, sp, #0
 8005cee:	4603      	mov	r3, r0
 8005cf0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005cf2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	db10      	blt.n	8005d1c <__NVIC_DisableIRQ+0x34>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005cfa:	79fb      	ldrb	r3, [r7, #7]
 8005cfc:	f003 021f 	and.w	r2, r3, #31
 8005d00:	4909      	ldr	r1, [pc, #36]	; (8005d28 <__NVIC_DisableIRQ+0x40>)
 8005d02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005d06:	095b      	lsrs	r3, r3, #5
 8005d08:	2001      	movs	r0, #1
 8005d0a:	fa00 f202 	lsl.w	r2, r0, r2
 8005d0e:	3320      	adds	r3, #32
 8005d10:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8005d14:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8005d18:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  }
}
 8005d1c:	bf00      	nop
 8005d1e:	370c      	adds	r7, #12
 8005d20:	46bd      	mov	sp, r7
 8005d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d26:	4770      	bx	lr
 8005d28:	e000e100 	.word	0xe000e100

08005d2c <__NVIC_SetPendingIRQ>:
  \details Sets the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 8005d2c:	b480      	push	{r7}
 8005d2e:	b083      	sub	sp, #12
 8005d30:	af00      	add	r7, sp, #0
 8005d32:	4603      	mov	r3, r0
 8005d34:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005d36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	db0c      	blt.n	8005d58 <__NVIC_SetPendingIRQ+0x2c>
  {
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005d3e:	79fb      	ldrb	r3, [r7, #7]
 8005d40:	f003 021f 	and.w	r2, r3, #31
 8005d44:	4907      	ldr	r1, [pc, #28]	; (8005d64 <__NVIC_SetPendingIRQ+0x38>)
 8005d46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005d4a:	095b      	lsrs	r3, r3, #5
 8005d4c:	2001      	movs	r0, #1
 8005d4e:	fa00 f202 	lsl.w	r2, r0, r2
 8005d52:	3340      	adds	r3, #64	; 0x40
 8005d54:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8005d58:	bf00      	nop
 8005d5a:	370c      	adds	r7, #12
 8005d5c:	46bd      	mov	sp, r7
 8005d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d62:	4770      	bx	lr
 8005d64:	e000e100 	.word	0xe000e100

08005d68 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8005d68:	b480      	push	{r7}
 8005d6a:	b083      	sub	sp, #12
 8005d6c:	af00      	add	r7, sp, #0
 8005d6e:	4603      	mov	r3, r0
 8005d70:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005d72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	db0c      	blt.n	8005d94 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005d7a:	79fb      	ldrb	r3, [r7, #7]
 8005d7c:	f003 021f 	and.w	r2, r3, #31
 8005d80:	4907      	ldr	r1, [pc, #28]	; (8005da0 <__NVIC_ClearPendingIRQ+0x38>)
 8005d82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005d86:	095b      	lsrs	r3, r3, #5
 8005d88:	2001      	movs	r0, #1
 8005d8a:	fa00 f202 	lsl.w	r2, r0, r2
 8005d8e:	3360      	adds	r3, #96	; 0x60
 8005d90:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8005d94:	bf00      	nop
 8005d96:	370c      	adds	r7, #12
 8005d98:	46bd      	mov	sp, r7
 8005d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d9e:	4770      	bx	lr
 8005da0:	e000e100 	.word	0xe000e100

08005da4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005da4:	b480      	push	{r7}
 8005da6:	b083      	sub	sp, #12
 8005da8:	af00      	add	r7, sp, #0
 8005daa:	4603      	mov	r3, r0
 8005dac:	6039      	str	r1, [r7, #0]
 8005dae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005db0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	db0a      	blt.n	8005dce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005db8:	683b      	ldr	r3, [r7, #0]
 8005dba:	b2da      	uxtb	r2, r3
 8005dbc:	490c      	ldr	r1, [pc, #48]	; (8005df0 <__NVIC_SetPriority+0x4c>)
 8005dbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005dc2:	0112      	lsls	r2, r2, #4
 8005dc4:	b2d2      	uxtb	r2, r2
 8005dc6:	440b      	add	r3, r1
 8005dc8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005dcc:	e00a      	b.n	8005de4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005dce:	683b      	ldr	r3, [r7, #0]
 8005dd0:	b2da      	uxtb	r2, r3
 8005dd2:	4908      	ldr	r1, [pc, #32]	; (8005df4 <__NVIC_SetPriority+0x50>)
 8005dd4:	79fb      	ldrb	r3, [r7, #7]
 8005dd6:	f003 030f 	and.w	r3, r3, #15
 8005dda:	3b04      	subs	r3, #4
 8005ddc:	0112      	lsls	r2, r2, #4
 8005dde:	b2d2      	uxtb	r2, r2
 8005de0:	440b      	add	r3, r1
 8005de2:	761a      	strb	r2, [r3, #24]
}
 8005de4:	bf00      	nop
 8005de6:	370c      	adds	r7, #12
 8005de8:	46bd      	mov	sp, r7
 8005dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dee:	4770      	bx	lr
 8005df0:	e000e100 	.word	0xe000e100
 8005df4:	e000ed00 	.word	0xe000ed00

08005df8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005df8:	b480      	push	{r7}
 8005dfa:	b089      	sub	sp, #36	; 0x24
 8005dfc:	af00      	add	r7, sp, #0
 8005dfe:	60f8      	str	r0, [r7, #12]
 8005e00:	60b9      	str	r1, [r7, #8]
 8005e02:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	f003 0307 	and.w	r3, r3, #7
 8005e0a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005e0c:	69fb      	ldr	r3, [r7, #28]
 8005e0e:	f1c3 0307 	rsb	r3, r3, #7
 8005e12:	2b04      	cmp	r3, #4
 8005e14:	bf28      	it	cs
 8005e16:	2304      	movcs	r3, #4
 8005e18:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005e1a:	69fb      	ldr	r3, [r7, #28]
 8005e1c:	3304      	adds	r3, #4
 8005e1e:	2b06      	cmp	r3, #6
 8005e20:	d902      	bls.n	8005e28 <NVIC_EncodePriority+0x30>
 8005e22:	69fb      	ldr	r3, [r7, #28]
 8005e24:	3b03      	subs	r3, #3
 8005e26:	e000      	b.n	8005e2a <NVIC_EncodePriority+0x32>
 8005e28:	2300      	movs	r3, #0
 8005e2a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005e2c:	f04f 32ff 	mov.w	r2, #4294967295
 8005e30:	69bb      	ldr	r3, [r7, #24]
 8005e32:	fa02 f303 	lsl.w	r3, r2, r3
 8005e36:	43da      	mvns	r2, r3
 8005e38:	68bb      	ldr	r3, [r7, #8]
 8005e3a:	401a      	ands	r2, r3
 8005e3c:	697b      	ldr	r3, [r7, #20]
 8005e3e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005e40:	f04f 31ff 	mov.w	r1, #4294967295
 8005e44:	697b      	ldr	r3, [r7, #20]
 8005e46:	fa01 f303 	lsl.w	r3, r1, r3
 8005e4a:	43d9      	mvns	r1, r3
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005e50:	4313      	orrs	r3, r2
         );
}
 8005e52:	4618      	mov	r0, r3
 8005e54:	3724      	adds	r7, #36	; 0x24
 8005e56:	46bd      	mov	sp, r7
 8005e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e5c:	4770      	bx	lr

08005e5e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005e5e:	b580      	push	{r7, lr}
 8005e60:	b082      	sub	sp, #8
 8005e62:	af00      	add	r7, sp, #0
 8005e64:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005e66:	6878      	ldr	r0, [r7, #4]
 8005e68:	f7ff feee 	bl	8005c48 <__NVIC_SetPriorityGrouping>
}
 8005e6c:	bf00      	nop
 8005e6e:	3708      	adds	r7, #8
 8005e70:	46bd      	mov	sp, r7
 8005e72:	bd80      	pop	{r7, pc}

08005e74 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005e74:	b580      	push	{r7, lr}
 8005e76:	b086      	sub	sp, #24
 8005e78:	af00      	add	r7, sp, #0
 8005e7a:	4603      	mov	r3, r0
 8005e7c:	60b9      	str	r1, [r7, #8]
 8005e7e:	607a      	str	r2, [r7, #4]
 8005e80:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8005e82:	f7ff ff05 	bl	8005c90 <__NVIC_GetPriorityGrouping>
 8005e86:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005e88:	687a      	ldr	r2, [r7, #4]
 8005e8a:	68b9      	ldr	r1, [r7, #8]
 8005e8c:	6978      	ldr	r0, [r7, #20]
 8005e8e:	f7ff ffb3 	bl	8005df8 <NVIC_EncodePriority>
 8005e92:	4602      	mov	r2, r0
 8005e94:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005e98:	4611      	mov	r1, r2
 8005e9a:	4618      	mov	r0, r3
 8005e9c:	f7ff ff82 	bl	8005da4 <__NVIC_SetPriority>
}
 8005ea0:	bf00      	nop
 8005ea2:	3718      	adds	r7, #24
 8005ea4:	46bd      	mov	sp, r7
 8005ea6:	bd80      	pop	{r7, pc}

08005ea8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005ea8:	b580      	push	{r7, lr}
 8005eaa:	b082      	sub	sp, #8
 8005eac:	af00      	add	r7, sp, #0
 8005eae:	4603      	mov	r3, r0
 8005eb0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005eb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005eb6:	4618      	mov	r0, r3
 8005eb8:	f7ff fef8 	bl	8005cac <__NVIC_EnableIRQ>
}
 8005ebc:	bf00      	nop
 8005ebe:	3708      	adds	r7, #8
 8005ec0:	46bd      	mov	sp, r7
 8005ec2:	bd80      	pop	{r7, pc}

08005ec4 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8005ec4:	b580      	push	{r7, lr}
 8005ec6:	b082      	sub	sp, #8
 8005ec8:	af00      	add	r7, sp, #0
 8005eca:	4603      	mov	r3, r0
 8005ecc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8005ece:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005ed2:	4618      	mov	r0, r3
 8005ed4:	f7ff ff08 	bl	8005ce8 <__NVIC_DisableIRQ>
}
 8005ed8:	bf00      	nop
 8005eda:	3708      	adds	r7, #8
 8005edc:	46bd      	mov	sp, r7
 8005ede:	bd80      	pop	{r7, pc}

08005ee0 <HAL_NVIC_SetPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 8005ee0:	b580      	push	{r7, lr}
 8005ee2:	b082      	sub	sp, #8
 8005ee4:	af00      	add	r7, sp, #0
 8005ee6:	4603      	mov	r3, r0
 8005ee8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Set interrupt pending */
  NVIC_SetPendingIRQ(IRQn);
 8005eea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005eee:	4618      	mov	r0, r3
 8005ef0:	f7ff ff1c 	bl	8005d2c <__NVIC_SetPendingIRQ>
}
 8005ef4:	bf00      	nop
 8005ef6:	3708      	adds	r7, #8
 8005ef8:	46bd      	mov	sp, r7
 8005efa:	bd80      	pop	{r7, pc}

08005efc <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8005efc:	b580      	push	{r7, lr}
 8005efe:	b082      	sub	sp, #8
 8005f00:	af00      	add	r7, sp, #0
 8005f02:	4603      	mov	r3, r0
 8005f04:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 8005f06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005f0a:	4618      	mov	r0, r3
 8005f0c:	f7ff ff2c 	bl	8005d68 <__NVIC_ClearPendingIRQ>
}
 8005f10:	bf00      	nop
 8005f12:	3708      	adds	r7, #8
 8005f14:	46bd      	mov	sp, r7
 8005f16:	bd80      	pop	{r7, pc}

08005f18 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005f18:	b480      	push	{r7}
 8005f1a:	b087      	sub	sp, #28
 8005f1c:	af00      	add	r7, sp, #0
 8005f1e:	6078      	str	r0, [r7, #4]
 8005f20:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8005f22:	2300      	movs	r3, #0
 8005f24:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005f26:	e14c      	b.n	80061c2 <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8005f28:	683b      	ldr	r3, [r7, #0]
 8005f2a:	681a      	ldr	r2, [r3, #0]
 8005f2c:	2101      	movs	r1, #1
 8005f2e:	697b      	ldr	r3, [r7, #20]
 8005f30:	fa01 f303 	lsl.w	r3, r1, r3
 8005f34:	4013      	ands	r3, r2
 8005f36:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	f000 813e 	beq.w	80061bc <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005f40:	683b      	ldr	r3, [r7, #0]
 8005f42:	685b      	ldr	r3, [r3, #4]
 8005f44:	2b01      	cmp	r3, #1
 8005f46:	d00b      	beq.n	8005f60 <HAL_GPIO_Init+0x48>
 8005f48:	683b      	ldr	r3, [r7, #0]
 8005f4a:	685b      	ldr	r3, [r3, #4]
 8005f4c:	2b02      	cmp	r3, #2
 8005f4e:	d007      	beq.n	8005f60 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005f50:	683b      	ldr	r3, [r7, #0]
 8005f52:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005f54:	2b11      	cmp	r3, #17
 8005f56:	d003      	beq.n	8005f60 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005f58:	683b      	ldr	r3, [r7, #0]
 8005f5a:	685b      	ldr	r3, [r3, #4]
 8005f5c:	2b12      	cmp	r3, #18
 8005f5e:	d130      	bne.n	8005fc2 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	689b      	ldr	r3, [r3, #8]
 8005f64:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8005f66:	697b      	ldr	r3, [r7, #20]
 8005f68:	005b      	lsls	r3, r3, #1
 8005f6a:	2203      	movs	r2, #3
 8005f6c:	fa02 f303 	lsl.w	r3, r2, r3
 8005f70:	43db      	mvns	r3, r3
 8005f72:	693a      	ldr	r2, [r7, #16]
 8005f74:	4013      	ands	r3, r2
 8005f76:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8005f78:	683b      	ldr	r3, [r7, #0]
 8005f7a:	68da      	ldr	r2, [r3, #12]
 8005f7c:	697b      	ldr	r3, [r7, #20]
 8005f7e:	005b      	lsls	r3, r3, #1
 8005f80:	fa02 f303 	lsl.w	r3, r2, r3
 8005f84:	693a      	ldr	r2, [r7, #16]
 8005f86:	4313      	orrs	r3, r2
 8005f88:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	693a      	ldr	r2, [r7, #16]
 8005f8e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	685b      	ldr	r3, [r3, #4]
 8005f94:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005f96:	2201      	movs	r2, #1
 8005f98:	697b      	ldr	r3, [r7, #20]
 8005f9a:	fa02 f303 	lsl.w	r3, r2, r3
 8005f9e:	43db      	mvns	r3, r3
 8005fa0:	693a      	ldr	r2, [r7, #16]
 8005fa2:	4013      	ands	r3, r2
 8005fa4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8005fa6:	683b      	ldr	r3, [r7, #0]
 8005fa8:	685b      	ldr	r3, [r3, #4]
 8005faa:	091b      	lsrs	r3, r3, #4
 8005fac:	f003 0201 	and.w	r2, r3, #1
 8005fb0:	697b      	ldr	r3, [r7, #20]
 8005fb2:	fa02 f303 	lsl.w	r3, r2, r3
 8005fb6:	693a      	ldr	r2, [r7, #16]
 8005fb8:	4313      	orrs	r3, r2
 8005fba:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	693a      	ldr	r2, [r7, #16]
 8005fc0:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	68db      	ldr	r3, [r3, #12]
 8005fc6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8005fc8:	697b      	ldr	r3, [r7, #20]
 8005fca:	005b      	lsls	r3, r3, #1
 8005fcc:	2203      	movs	r2, #3
 8005fce:	fa02 f303 	lsl.w	r3, r2, r3
 8005fd2:	43db      	mvns	r3, r3
 8005fd4:	693a      	ldr	r2, [r7, #16]
 8005fd6:	4013      	ands	r3, r2
 8005fd8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8005fda:	683b      	ldr	r3, [r7, #0]
 8005fdc:	689a      	ldr	r2, [r3, #8]
 8005fde:	697b      	ldr	r3, [r7, #20]
 8005fe0:	005b      	lsls	r3, r3, #1
 8005fe2:	fa02 f303 	lsl.w	r3, r2, r3
 8005fe6:	693a      	ldr	r2, [r7, #16]
 8005fe8:	4313      	orrs	r3, r2
 8005fea:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	693a      	ldr	r2, [r7, #16]
 8005ff0:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005ff2:	683b      	ldr	r3, [r7, #0]
 8005ff4:	685b      	ldr	r3, [r3, #4]
 8005ff6:	2b02      	cmp	r3, #2
 8005ff8:	d003      	beq.n	8006002 <HAL_GPIO_Init+0xea>
 8005ffa:	683b      	ldr	r3, [r7, #0]
 8005ffc:	685b      	ldr	r3, [r3, #4]
 8005ffe:	2b12      	cmp	r3, #18
 8006000:	d123      	bne.n	800604a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8006002:	697b      	ldr	r3, [r7, #20]
 8006004:	08da      	lsrs	r2, r3, #3
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	3208      	adds	r2, #8
 800600a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800600e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8006010:	697b      	ldr	r3, [r7, #20]
 8006012:	f003 0307 	and.w	r3, r3, #7
 8006016:	009b      	lsls	r3, r3, #2
 8006018:	220f      	movs	r2, #15
 800601a:	fa02 f303 	lsl.w	r3, r2, r3
 800601e:	43db      	mvns	r3, r3
 8006020:	693a      	ldr	r2, [r7, #16]
 8006022:	4013      	ands	r3, r2
 8006024:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8006026:	683b      	ldr	r3, [r7, #0]
 8006028:	691a      	ldr	r2, [r3, #16]
 800602a:	697b      	ldr	r3, [r7, #20]
 800602c:	f003 0307 	and.w	r3, r3, #7
 8006030:	009b      	lsls	r3, r3, #2
 8006032:	fa02 f303 	lsl.w	r3, r2, r3
 8006036:	693a      	ldr	r2, [r7, #16]
 8006038:	4313      	orrs	r3, r2
 800603a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800603c:	697b      	ldr	r3, [r7, #20]
 800603e:	08da      	lsrs	r2, r3, #3
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	3208      	adds	r2, #8
 8006044:	6939      	ldr	r1, [r7, #16]
 8006046:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8006050:	697b      	ldr	r3, [r7, #20]
 8006052:	005b      	lsls	r3, r3, #1
 8006054:	2203      	movs	r2, #3
 8006056:	fa02 f303 	lsl.w	r3, r2, r3
 800605a:	43db      	mvns	r3, r3
 800605c:	693a      	ldr	r2, [r7, #16]
 800605e:	4013      	ands	r3, r2
 8006060:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8006062:	683b      	ldr	r3, [r7, #0]
 8006064:	685b      	ldr	r3, [r3, #4]
 8006066:	f003 0203 	and.w	r2, r3, #3
 800606a:	697b      	ldr	r3, [r7, #20]
 800606c:	005b      	lsls	r3, r3, #1
 800606e:	fa02 f303 	lsl.w	r3, r2, r3
 8006072:	693a      	ldr	r2, [r7, #16]
 8006074:	4313      	orrs	r3, r2
 8006076:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	693a      	ldr	r2, [r7, #16]
 800607c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800607e:	683b      	ldr	r3, [r7, #0]
 8006080:	685b      	ldr	r3, [r3, #4]
 8006082:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006086:	2b00      	cmp	r3, #0
 8006088:	f000 8098 	beq.w	80061bc <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 800608c:	4a54      	ldr	r2, [pc, #336]	; (80061e0 <HAL_GPIO_Init+0x2c8>)
 800608e:	697b      	ldr	r3, [r7, #20]
 8006090:	089b      	lsrs	r3, r3, #2
 8006092:	3302      	adds	r3, #2
 8006094:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006098:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800609a:	697b      	ldr	r3, [r7, #20]
 800609c:	f003 0303 	and.w	r3, r3, #3
 80060a0:	009b      	lsls	r3, r3, #2
 80060a2:	220f      	movs	r2, #15
 80060a4:	fa02 f303 	lsl.w	r3, r2, r3
 80060a8:	43db      	mvns	r3, r3
 80060aa:	693a      	ldr	r2, [r7, #16]
 80060ac:	4013      	ands	r3, r2
 80060ae:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80060b6:	d019      	beq.n	80060ec <HAL_GPIO_Init+0x1d4>
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	4a4a      	ldr	r2, [pc, #296]	; (80061e4 <HAL_GPIO_Init+0x2cc>)
 80060bc:	4293      	cmp	r3, r2
 80060be:	d013      	beq.n	80060e8 <HAL_GPIO_Init+0x1d0>
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	4a49      	ldr	r2, [pc, #292]	; (80061e8 <HAL_GPIO_Init+0x2d0>)
 80060c4:	4293      	cmp	r3, r2
 80060c6:	d00d      	beq.n	80060e4 <HAL_GPIO_Init+0x1cc>
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	4a48      	ldr	r2, [pc, #288]	; (80061ec <HAL_GPIO_Init+0x2d4>)
 80060cc:	4293      	cmp	r3, r2
 80060ce:	d007      	beq.n	80060e0 <HAL_GPIO_Init+0x1c8>
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	4a47      	ldr	r2, [pc, #284]	; (80061f0 <HAL_GPIO_Init+0x2d8>)
 80060d4:	4293      	cmp	r3, r2
 80060d6:	d101      	bne.n	80060dc <HAL_GPIO_Init+0x1c4>
 80060d8:	2304      	movs	r3, #4
 80060da:	e008      	b.n	80060ee <HAL_GPIO_Init+0x1d6>
 80060dc:	2307      	movs	r3, #7
 80060de:	e006      	b.n	80060ee <HAL_GPIO_Init+0x1d6>
 80060e0:	2303      	movs	r3, #3
 80060e2:	e004      	b.n	80060ee <HAL_GPIO_Init+0x1d6>
 80060e4:	2302      	movs	r3, #2
 80060e6:	e002      	b.n	80060ee <HAL_GPIO_Init+0x1d6>
 80060e8:	2301      	movs	r3, #1
 80060ea:	e000      	b.n	80060ee <HAL_GPIO_Init+0x1d6>
 80060ec:	2300      	movs	r3, #0
 80060ee:	697a      	ldr	r2, [r7, #20]
 80060f0:	f002 0203 	and.w	r2, r2, #3
 80060f4:	0092      	lsls	r2, r2, #2
 80060f6:	4093      	lsls	r3, r2
 80060f8:	693a      	ldr	r2, [r7, #16]
 80060fa:	4313      	orrs	r3, r2
 80060fc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80060fe:	4938      	ldr	r1, [pc, #224]	; (80061e0 <HAL_GPIO_Init+0x2c8>)
 8006100:	697b      	ldr	r3, [r7, #20]
 8006102:	089b      	lsrs	r3, r3, #2
 8006104:	3302      	adds	r3, #2
 8006106:	693a      	ldr	r2, [r7, #16]
 8006108:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800610c:	4b39      	ldr	r3, [pc, #228]	; (80061f4 <HAL_GPIO_Init+0x2dc>)
 800610e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006112:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	43db      	mvns	r3, r3
 8006118:	693a      	ldr	r2, [r7, #16]
 800611a:	4013      	ands	r3, r2
 800611c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800611e:	683b      	ldr	r3, [r7, #0]
 8006120:	685b      	ldr	r3, [r3, #4]
 8006122:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006126:	2b00      	cmp	r3, #0
 8006128:	d003      	beq.n	8006132 <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 800612a:	693a      	ldr	r2, [r7, #16]
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	4313      	orrs	r3, r2
 8006130:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8006132:	4a30      	ldr	r2, [pc, #192]	; (80061f4 <HAL_GPIO_Init+0x2dc>)
 8006134:	693b      	ldr	r3, [r7, #16]
 8006136:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 800613a:	4b2e      	ldr	r3, [pc, #184]	; (80061f4 <HAL_GPIO_Init+0x2dc>)
 800613c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006140:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	43db      	mvns	r3, r3
 8006146:	693a      	ldr	r2, [r7, #16]
 8006148:	4013      	ands	r3, r2
 800614a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800614c:	683b      	ldr	r3, [r7, #0]
 800614e:	685b      	ldr	r3, [r3, #4]
 8006150:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006154:	2b00      	cmp	r3, #0
 8006156:	d003      	beq.n	8006160 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8006158:	693a      	ldr	r2, [r7, #16]
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	4313      	orrs	r3, r2
 800615e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8006160:	4a24      	ldr	r2, [pc, #144]	; (80061f4 <HAL_GPIO_Init+0x2dc>)
 8006162:	693b      	ldr	r3, [r7, #16]
 8006164:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8006168:	4b22      	ldr	r3, [pc, #136]	; (80061f4 <HAL_GPIO_Init+0x2dc>)
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	43db      	mvns	r3, r3
 8006172:	693a      	ldr	r2, [r7, #16]
 8006174:	4013      	ands	r3, r2
 8006176:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8006178:	683b      	ldr	r3, [r7, #0]
 800617a:	685b      	ldr	r3, [r3, #4]
 800617c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006180:	2b00      	cmp	r3, #0
 8006182:	d003      	beq.n	800618c <HAL_GPIO_Init+0x274>
        {
          temp |= iocurrent;
 8006184:	693a      	ldr	r2, [r7, #16]
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	4313      	orrs	r3, r2
 800618a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800618c:	4a19      	ldr	r2, [pc, #100]	; (80061f4 <HAL_GPIO_Init+0x2dc>)
 800618e:	693b      	ldr	r3, [r7, #16]
 8006190:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8006192:	4b18      	ldr	r3, [pc, #96]	; (80061f4 <HAL_GPIO_Init+0x2dc>)
 8006194:	685b      	ldr	r3, [r3, #4]
 8006196:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	43db      	mvns	r3, r3
 800619c:	693a      	ldr	r2, [r7, #16]
 800619e:	4013      	ands	r3, r2
 80061a0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80061a2:	683b      	ldr	r3, [r7, #0]
 80061a4:	685b      	ldr	r3, [r3, #4]
 80061a6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d003      	beq.n	80061b6 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 80061ae:	693a      	ldr	r2, [r7, #16]
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	4313      	orrs	r3, r2
 80061b4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80061b6:	4a0f      	ldr	r2, [pc, #60]	; (80061f4 <HAL_GPIO_Init+0x2dc>)
 80061b8:	693b      	ldr	r3, [r7, #16]
 80061ba:	6053      	str	r3, [r2, #4]
      }
    }
    
    position++;
 80061bc:	697b      	ldr	r3, [r7, #20]
 80061be:	3301      	adds	r3, #1
 80061c0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80061c2:	683b      	ldr	r3, [r7, #0]
 80061c4:	681a      	ldr	r2, [r3, #0]
 80061c6:	697b      	ldr	r3, [r7, #20]
 80061c8:	fa22 f303 	lsr.w	r3, r2, r3
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	f47f aeab 	bne.w	8005f28 <HAL_GPIO_Init+0x10>
  }
}
 80061d2:	bf00      	nop
 80061d4:	371c      	adds	r7, #28
 80061d6:	46bd      	mov	sp, r7
 80061d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061dc:	4770      	bx	lr
 80061de:	bf00      	nop
 80061e0:	40010000 	.word	0x40010000
 80061e4:	48000400 	.word	0x48000400
 80061e8:	48000800 	.word	0x48000800
 80061ec:	48000c00 	.word	0x48000c00
 80061f0:	48001000 	.word	0x48001000
 80061f4:	58000800 	.word	0x58000800

080061f8 <HAL_GPIO_ReadPin>:
  * @param GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80061f8:	b480      	push	{r7}
 80061fa:	b085      	sub	sp, #20
 80061fc:	af00      	add	r7, sp, #0
 80061fe:	6078      	str	r0, [r7, #4]
 8006200:	460b      	mov	r3, r1
 8006202:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	691a      	ldr	r2, [r3, #16]
 8006208:	887b      	ldrh	r3, [r7, #2]
 800620a:	4013      	ands	r3, r2
 800620c:	2b00      	cmp	r3, #0
 800620e:	d002      	beq.n	8006216 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8006210:	2301      	movs	r3, #1
 8006212:	73fb      	strb	r3, [r7, #15]
 8006214:	e001      	b.n	800621a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8006216:	2300      	movs	r3, #0
 8006218:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800621a:	7bfb      	ldrb	r3, [r7, #15]
}
 800621c:	4618      	mov	r0, r3
 800621e:	3714      	adds	r7, #20
 8006220:	46bd      	mov	sp, r7
 8006222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006226:	4770      	bx	lr

08006228 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006228:	b480      	push	{r7}
 800622a:	b083      	sub	sp, #12
 800622c:	af00      	add	r7, sp, #0
 800622e:	6078      	str	r0, [r7, #4]
 8006230:	460b      	mov	r3, r1
 8006232:	807b      	strh	r3, [r7, #2]
 8006234:	4613      	mov	r3, r2
 8006236:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006238:	787b      	ldrb	r3, [r7, #1]
 800623a:	2b00      	cmp	r3, #0
 800623c:	d003      	beq.n	8006246 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800623e:	887a      	ldrh	r2, [r7, #2]
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8006244:	e002      	b.n	800624c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8006246:	887a      	ldrh	r2, [r7, #2]
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800624c:	bf00      	nop
 800624e:	370c      	adds	r7, #12
 8006250:	46bd      	mov	sp, r7
 8006252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006256:	4770      	bx	lr

08006258 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8006258:	b580      	push	{r7, lr}
 800625a:	b082      	sub	sp, #8
 800625c:	af00      	add	r7, sp, #0
 800625e:	4603      	mov	r3, r0
 8006260:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8006262:	4b08      	ldr	r3, [pc, #32]	; (8006284 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006264:	68da      	ldr	r2, [r3, #12]
 8006266:	88fb      	ldrh	r3, [r7, #6]
 8006268:	4013      	ands	r3, r2
 800626a:	2b00      	cmp	r3, #0
 800626c:	d006      	beq.n	800627c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800626e:	4a05      	ldr	r2, [pc, #20]	; (8006284 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006270:	88fb      	ldrh	r3, [r7, #6]
 8006272:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8006274:	88fb      	ldrh	r3, [r7, #6]
 8006276:	4618      	mov	r0, r3
 8006278:	f7fe f9ca 	bl	8004610 <HAL_GPIO_EXTI_Callback>
  }
}
 800627c:	bf00      	nop
 800627e:	3708      	adds	r7, #8
 8006280:	46bd      	mov	sp, r7
 8006282:	bd80      	pop	{r7, pc}
 8006284:	58000800 	.word	0x58000800

08006288 <HAL_HSEM_IRQHandler>:
/**
  * @brief  This function handles HSEM interrupt request
  * @retval None
  */
void HAL_HSEM_IRQHandler(void)
{
 8006288:	b580      	push	{r7, lr}
 800628a:	b082      	sub	sp, #8
 800628c:	af00      	add	r7, sp, #0
  uint32_t statusreg;
  /* Get the list of masked freed semaphores*/
  statusreg = HSEM_COMMON->MISR;
 800628e:	4b0a      	ldr	r3, [pc, #40]	; (80062b8 <HAL_HSEM_IRQHandler+0x30>)
 8006290:	68db      	ldr	r3, [r3, #12]
 8006292:	607b      	str	r3, [r7, #4]

  /*Disable Interrupts*/
  HSEM_COMMON->IER &= ~((uint32_t)statusreg);
 8006294:	4b08      	ldr	r3, [pc, #32]	; (80062b8 <HAL_HSEM_IRQHandler+0x30>)
 8006296:	681a      	ldr	r2, [r3, #0]
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	43db      	mvns	r3, r3
 800629c:	4906      	ldr	r1, [pc, #24]	; (80062b8 <HAL_HSEM_IRQHandler+0x30>)
 800629e:	4013      	ands	r3, r2
 80062a0:	600b      	str	r3, [r1, #0]

  /*Clear Flags*/
  HSEM_COMMON->ICR = ((uint32_t)statusreg);
 80062a2:	4a05      	ldr	r2, [pc, #20]	; (80062b8 <HAL_HSEM_IRQHandler+0x30>)
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	6053      	str	r3, [r2, #4]

  /* Call FreeCallback */
  HAL_HSEM_FreeCallback(statusreg);
 80062a8:	6878      	ldr	r0, [r7, #4]
 80062aa:	f000 f807 	bl	80062bc <HAL_HSEM_FreeCallback>
}
 80062ae:	bf00      	nop
 80062b0:	3708      	adds	r7, #8
 80062b2:	46bd      	mov	sp, r7
 80062b4:	bd80      	pop	{r7, pc}
 80062b6:	bf00      	nop
 80062b8:	58001500 	.word	0x58001500

080062bc <HAL_HSEM_FreeCallback>:
  * @brief Semaphore Released Callback.
  * @param SemMask: Mask of Released semaphores
  * @retval None
  */
__weak void HAL_HSEM_FreeCallback(uint32_t SemMask)
{
 80062bc:	b480      	push	{r7}
 80062be:	b083      	sub	sp, #12
 80062c0:	af00      	add	r7, sp, #0
 80062c2:	6078      	str	r0, [r7, #4]
  UNUSED(SemMask);

  /* NOTE : This function should not be modified, when the callback is needed,
  the HAL_HSEM_FreeCallback can be implemented in the user file
    */
}
 80062c4:	bf00      	nop
 80062c6:	370c      	adds	r7, #12
 80062c8:	46bd      	mov	sp, r7
 80062ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ce:	4770      	bx	lr

080062d0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80062d0:	b580      	push	{r7, lr}
 80062d2:	b082      	sub	sp, #8
 80062d4:	af00      	add	r7, sp, #0
 80062d6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d101      	bne.n	80062e2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80062de:	2301      	movs	r3, #1
 80062e0:	e081      	b.n	80063e6 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80062e8:	b2db      	uxtb	r3, r3
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d106      	bne.n	80062fc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	2200      	movs	r2, #0
 80062f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80062f6:	6878      	ldr	r0, [r7, #4]
 80062f8:	f7ff f9e2 	bl	80056c0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	2224      	movs	r2, #36	; 0x24
 8006300:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	681a      	ldr	r2, [r3, #0]
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	f022 0201 	bic.w	r2, r2, #1
 8006312:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	685a      	ldr	r2, [r3, #4]
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8006320:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	689a      	ldr	r2, [r3, #8]
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006330:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	68db      	ldr	r3, [r3, #12]
 8006336:	2b01      	cmp	r3, #1
 8006338:	d107      	bne.n	800634a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	689a      	ldr	r2, [r3, #8]
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006346:	609a      	str	r2, [r3, #8]
 8006348:	e006      	b.n	8006358 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	689a      	ldr	r2, [r3, #8]
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8006356:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	68db      	ldr	r3, [r3, #12]
 800635c:	2b02      	cmp	r3, #2
 800635e:	d104      	bne.n	800636a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006368:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	685b      	ldr	r3, [r3, #4]
 8006370:	687a      	ldr	r2, [r7, #4]
 8006372:	6812      	ldr	r2, [r2, #0]
 8006374:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8006378:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800637c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	68da      	ldr	r2, [r3, #12]
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800638c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	691a      	ldr	r2, [r3, #16]
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	695b      	ldr	r3, [r3, #20]
 8006396:	ea42 0103 	orr.w	r1, r2, r3
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	699b      	ldr	r3, [r3, #24]
 800639e:	021a      	lsls	r2, r3, #8
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	430a      	orrs	r2, r1
 80063a6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	69d9      	ldr	r1, [r3, #28]
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	6a1a      	ldr	r2, [r3, #32]
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	430a      	orrs	r2, r1
 80063b6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	681a      	ldr	r2, [r3, #0]
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	f042 0201 	orr.w	r2, r2, #1
 80063c6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	2200      	movs	r2, #0
 80063cc:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	2220      	movs	r2, #32
 80063d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	2200      	movs	r2, #0
 80063da:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	2200      	movs	r2, #0
 80063e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80063e4:	2300      	movs	r3, #0
}
 80063e6:	4618      	mov	r0, r3
 80063e8:	3708      	adds	r7, #8
 80063ea:	46bd      	mov	sp, r7
 80063ec:	bd80      	pop	{r7, pc}
	...

080063f0 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80063f0:	b580      	push	{r7, lr}
 80063f2:	b088      	sub	sp, #32
 80063f4:	af02      	add	r7, sp, #8
 80063f6:	60f8      	str	r0, [r7, #12]
 80063f8:	607a      	str	r2, [r7, #4]
 80063fa:	461a      	mov	r2, r3
 80063fc:	460b      	mov	r3, r1
 80063fe:	817b      	strh	r3, [r7, #10]
 8006400:	4613      	mov	r3, r2
 8006402:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800640a:	b2db      	uxtb	r3, r3
 800640c:	2b20      	cmp	r3, #32
 800640e:	f040 80da 	bne.w	80065c6 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006418:	2b01      	cmp	r3, #1
 800641a:	d101      	bne.n	8006420 <HAL_I2C_Master_Transmit+0x30>
 800641c:	2302      	movs	r3, #2
 800641e:	e0d3      	b.n	80065c8 <HAL_I2C_Master_Transmit+0x1d8>
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	2201      	movs	r2, #1
 8006424:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8006428:	f7ff fbde 	bl	8005be8 <HAL_GetTick>
 800642c:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800642e:	697b      	ldr	r3, [r7, #20]
 8006430:	9300      	str	r3, [sp, #0]
 8006432:	2319      	movs	r3, #25
 8006434:	2201      	movs	r2, #1
 8006436:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800643a:	68f8      	ldr	r0, [r7, #12]
 800643c:	f000 fbc6 	bl	8006bcc <I2C_WaitOnFlagUntilTimeout>
 8006440:	4603      	mov	r3, r0
 8006442:	2b00      	cmp	r3, #0
 8006444:	d001      	beq.n	800644a <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8006446:	2301      	movs	r3, #1
 8006448:	e0be      	b.n	80065c8 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	2221      	movs	r2, #33	; 0x21
 800644e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	2210      	movs	r2, #16
 8006456:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	2200      	movs	r2, #0
 800645e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	687a      	ldr	r2, [r7, #4]
 8006464:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	893a      	ldrh	r2, [r7, #8]
 800646a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	2200      	movs	r2, #0
 8006470:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006476:	b29b      	uxth	r3, r3
 8006478:	2bff      	cmp	r3, #255	; 0xff
 800647a:	d90e      	bls.n	800649a <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	22ff      	movs	r2, #255	; 0xff
 8006480:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006486:	b2da      	uxtb	r2, r3
 8006488:	8979      	ldrh	r1, [r7, #10]
 800648a:	4b51      	ldr	r3, [pc, #324]	; (80065d0 <HAL_I2C_Master_Transmit+0x1e0>)
 800648c:	9300      	str	r3, [sp, #0]
 800648e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006492:	68f8      	ldr	r0, [r7, #12]
 8006494:	f000 fcbc 	bl	8006e10 <I2C_TransferConfig>
 8006498:	e06c      	b.n	8006574 <HAL_I2C_Master_Transmit+0x184>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800649e:	b29a      	uxth	r2, r3
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80064a8:	b2da      	uxtb	r2, r3
 80064aa:	8979      	ldrh	r1, [r7, #10]
 80064ac:	4b48      	ldr	r3, [pc, #288]	; (80065d0 <HAL_I2C_Master_Transmit+0x1e0>)
 80064ae:	9300      	str	r3, [sp, #0]
 80064b0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80064b4:	68f8      	ldr	r0, [r7, #12]
 80064b6:	f000 fcab 	bl	8006e10 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 80064ba:	e05b      	b.n	8006574 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80064bc:	697a      	ldr	r2, [r7, #20]
 80064be:	6a39      	ldr	r1, [r7, #32]
 80064c0:	68f8      	ldr	r0, [r7, #12]
 80064c2:	f000 fbc3 	bl	8006c4c <I2C_WaitOnTXISFlagUntilTimeout>
 80064c6:	4603      	mov	r3, r0
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d001      	beq.n	80064d0 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 80064cc:	2301      	movs	r3, #1
 80064ce:	e07b      	b.n	80065c8 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064d4:	781a      	ldrb	r2, [r3, #0]
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064e0:	1c5a      	adds	r2, r3, #1
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80064ea:	b29b      	uxth	r3, r3
 80064ec:	3b01      	subs	r3, #1
 80064ee:	b29a      	uxth	r2, r3
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80064f8:	3b01      	subs	r3, #1
 80064fa:	b29a      	uxth	r2, r3
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006504:	b29b      	uxth	r3, r3
 8006506:	2b00      	cmp	r3, #0
 8006508:	d034      	beq.n	8006574 <HAL_I2C_Master_Transmit+0x184>
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800650e:	2b00      	cmp	r3, #0
 8006510:	d130      	bne.n	8006574 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8006512:	697b      	ldr	r3, [r7, #20]
 8006514:	9300      	str	r3, [sp, #0]
 8006516:	6a3b      	ldr	r3, [r7, #32]
 8006518:	2200      	movs	r2, #0
 800651a:	2180      	movs	r1, #128	; 0x80
 800651c:	68f8      	ldr	r0, [r7, #12]
 800651e:	f000 fb55 	bl	8006bcc <I2C_WaitOnFlagUntilTimeout>
 8006522:	4603      	mov	r3, r0
 8006524:	2b00      	cmp	r3, #0
 8006526:	d001      	beq.n	800652c <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8006528:	2301      	movs	r3, #1
 800652a:	e04d      	b.n	80065c8 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006530:	b29b      	uxth	r3, r3
 8006532:	2bff      	cmp	r3, #255	; 0xff
 8006534:	d90e      	bls.n	8006554 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	22ff      	movs	r2, #255	; 0xff
 800653a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006540:	b2da      	uxtb	r2, r3
 8006542:	8979      	ldrh	r1, [r7, #10]
 8006544:	2300      	movs	r3, #0
 8006546:	9300      	str	r3, [sp, #0]
 8006548:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800654c:	68f8      	ldr	r0, [r7, #12]
 800654e:	f000 fc5f 	bl	8006e10 <I2C_TransferConfig>
 8006552:	e00f      	b.n	8006574 <HAL_I2C_Master_Transmit+0x184>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006558:	b29a      	uxth	r2, r3
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006562:	b2da      	uxtb	r2, r3
 8006564:	8979      	ldrh	r1, [r7, #10]
 8006566:	2300      	movs	r3, #0
 8006568:	9300      	str	r3, [sp, #0]
 800656a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800656e:	68f8      	ldr	r0, [r7, #12]
 8006570:	f000 fc4e 	bl	8006e10 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006578:	b29b      	uxth	r3, r3
 800657a:	2b00      	cmp	r3, #0
 800657c:	d19e      	bne.n	80064bc <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800657e:	697a      	ldr	r2, [r7, #20]
 8006580:	6a39      	ldr	r1, [r7, #32]
 8006582:	68f8      	ldr	r0, [r7, #12]
 8006584:	f000 fba2 	bl	8006ccc <I2C_WaitOnSTOPFlagUntilTimeout>
 8006588:	4603      	mov	r3, r0
 800658a:	2b00      	cmp	r3, #0
 800658c:	d001      	beq.n	8006592 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 800658e:	2301      	movs	r3, #1
 8006590:	e01a      	b.n	80065c8 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	2220      	movs	r2, #32
 8006598:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	6859      	ldr	r1, [r3, #4]
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	681a      	ldr	r2, [r3, #0]
 80065a4:	4b0b      	ldr	r3, [pc, #44]	; (80065d4 <HAL_I2C_Master_Transmit+0x1e4>)
 80065a6:	400b      	ands	r3, r1
 80065a8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	2220      	movs	r2, #32
 80065ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	2200      	movs	r2, #0
 80065b6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	2200      	movs	r2, #0
 80065be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80065c2:	2300      	movs	r3, #0
 80065c4:	e000      	b.n	80065c8 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 80065c6:	2302      	movs	r3, #2
  }
}
 80065c8:	4618      	mov	r0, r3
 80065ca:	3718      	adds	r7, #24
 80065cc:	46bd      	mov	sp, r7
 80065ce:	bd80      	pop	{r7, pc}
 80065d0:	80002000 	.word	0x80002000
 80065d4:	fe00e800 	.word	0xfe00e800

080065d8 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80065d8:	b580      	push	{r7, lr}
 80065da:	b088      	sub	sp, #32
 80065dc:	af02      	add	r7, sp, #8
 80065de:	60f8      	str	r0, [r7, #12]
 80065e0:	4608      	mov	r0, r1
 80065e2:	4611      	mov	r1, r2
 80065e4:	461a      	mov	r2, r3
 80065e6:	4603      	mov	r3, r0
 80065e8:	817b      	strh	r3, [r7, #10]
 80065ea:	460b      	mov	r3, r1
 80065ec:	813b      	strh	r3, [r7, #8]
 80065ee:	4613      	mov	r3, r2
 80065f0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80065f8:	b2db      	uxtb	r3, r3
 80065fa:	2b20      	cmp	r3, #32
 80065fc:	f040 80f9 	bne.w	80067f2 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006600:	6a3b      	ldr	r3, [r7, #32]
 8006602:	2b00      	cmp	r3, #0
 8006604:	d002      	beq.n	800660c <HAL_I2C_Mem_Write+0x34>
 8006606:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006608:	2b00      	cmp	r3, #0
 800660a:	d105      	bne.n	8006618 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006612:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8006614:	2301      	movs	r3, #1
 8006616:	e0ed      	b.n	80067f4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800661e:	2b01      	cmp	r3, #1
 8006620:	d101      	bne.n	8006626 <HAL_I2C_Mem_Write+0x4e>
 8006622:	2302      	movs	r3, #2
 8006624:	e0e6      	b.n	80067f4 <HAL_I2C_Mem_Write+0x21c>
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	2201      	movs	r2, #1
 800662a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800662e:	f7ff fadb 	bl	8005be8 <HAL_GetTick>
 8006632:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8006634:	697b      	ldr	r3, [r7, #20]
 8006636:	9300      	str	r3, [sp, #0]
 8006638:	2319      	movs	r3, #25
 800663a:	2201      	movs	r2, #1
 800663c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006640:	68f8      	ldr	r0, [r7, #12]
 8006642:	f000 fac3 	bl	8006bcc <I2C_WaitOnFlagUntilTimeout>
 8006646:	4603      	mov	r3, r0
 8006648:	2b00      	cmp	r3, #0
 800664a:	d001      	beq.n	8006650 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 800664c:	2301      	movs	r3, #1
 800664e:	e0d1      	b.n	80067f4 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	2221      	movs	r2, #33	; 0x21
 8006654:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	2240      	movs	r2, #64	; 0x40
 800665c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	2200      	movs	r2, #0
 8006664:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	6a3a      	ldr	r2, [r7, #32]
 800666a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8006670:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	2200      	movs	r2, #0
 8006676:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006678:	88f8      	ldrh	r0, [r7, #6]
 800667a:	893a      	ldrh	r2, [r7, #8]
 800667c:	8979      	ldrh	r1, [r7, #10]
 800667e:	697b      	ldr	r3, [r7, #20]
 8006680:	9301      	str	r3, [sp, #4]
 8006682:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006684:	9300      	str	r3, [sp, #0]
 8006686:	4603      	mov	r3, r0
 8006688:	68f8      	ldr	r0, [r7, #12]
 800668a:	f000 f9d3 	bl	8006a34 <I2C_RequestMemoryWrite>
 800668e:	4603      	mov	r3, r0
 8006690:	2b00      	cmp	r3, #0
 8006692:	d005      	beq.n	80066a0 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	2200      	movs	r2, #0
 8006698:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800669c:	2301      	movs	r3, #1
 800669e:	e0a9      	b.n	80067f4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80066a4:	b29b      	uxth	r3, r3
 80066a6:	2bff      	cmp	r3, #255	; 0xff
 80066a8:	d90e      	bls.n	80066c8 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	22ff      	movs	r2, #255	; 0xff
 80066ae:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80066b4:	b2da      	uxtb	r2, r3
 80066b6:	8979      	ldrh	r1, [r7, #10]
 80066b8:	2300      	movs	r3, #0
 80066ba:	9300      	str	r3, [sp, #0]
 80066bc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80066c0:	68f8      	ldr	r0, [r7, #12]
 80066c2:	f000 fba5 	bl	8006e10 <I2C_TransferConfig>
 80066c6:	e00f      	b.n	80066e8 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80066cc:	b29a      	uxth	r2, r3
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80066d6:	b2da      	uxtb	r2, r3
 80066d8:	8979      	ldrh	r1, [r7, #10]
 80066da:	2300      	movs	r3, #0
 80066dc:	9300      	str	r3, [sp, #0]
 80066de:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80066e2:	68f8      	ldr	r0, [r7, #12]
 80066e4:	f000 fb94 	bl	8006e10 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80066e8:	697a      	ldr	r2, [r7, #20]
 80066ea:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80066ec:	68f8      	ldr	r0, [r7, #12]
 80066ee:	f000 faad 	bl	8006c4c <I2C_WaitOnTXISFlagUntilTimeout>
 80066f2:	4603      	mov	r3, r0
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d001      	beq.n	80066fc <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80066f8:	2301      	movs	r3, #1
 80066fa:	e07b      	b.n	80067f4 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006700:	781a      	ldrb	r2, [r3, #0]
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800670c:	1c5a      	adds	r2, r3, #1
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006716:	b29b      	uxth	r3, r3
 8006718:	3b01      	subs	r3, #1
 800671a:	b29a      	uxth	r2, r3
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006724:	3b01      	subs	r3, #1
 8006726:	b29a      	uxth	r2, r3
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006730:	b29b      	uxth	r3, r3
 8006732:	2b00      	cmp	r3, #0
 8006734:	d034      	beq.n	80067a0 <HAL_I2C_Mem_Write+0x1c8>
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800673a:	2b00      	cmp	r3, #0
 800673c:	d130      	bne.n	80067a0 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800673e:	697b      	ldr	r3, [r7, #20]
 8006740:	9300      	str	r3, [sp, #0]
 8006742:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006744:	2200      	movs	r2, #0
 8006746:	2180      	movs	r1, #128	; 0x80
 8006748:	68f8      	ldr	r0, [r7, #12]
 800674a:	f000 fa3f 	bl	8006bcc <I2C_WaitOnFlagUntilTimeout>
 800674e:	4603      	mov	r3, r0
 8006750:	2b00      	cmp	r3, #0
 8006752:	d001      	beq.n	8006758 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8006754:	2301      	movs	r3, #1
 8006756:	e04d      	b.n	80067f4 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800675c:	b29b      	uxth	r3, r3
 800675e:	2bff      	cmp	r3, #255	; 0xff
 8006760:	d90e      	bls.n	8006780 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	22ff      	movs	r2, #255	; 0xff
 8006766:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800676c:	b2da      	uxtb	r2, r3
 800676e:	8979      	ldrh	r1, [r7, #10]
 8006770:	2300      	movs	r3, #0
 8006772:	9300      	str	r3, [sp, #0]
 8006774:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006778:	68f8      	ldr	r0, [r7, #12]
 800677a:	f000 fb49 	bl	8006e10 <I2C_TransferConfig>
 800677e:	e00f      	b.n	80067a0 <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006784:	b29a      	uxth	r2, r3
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800678e:	b2da      	uxtb	r2, r3
 8006790:	8979      	ldrh	r1, [r7, #10]
 8006792:	2300      	movs	r3, #0
 8006794:	9300      	str	r3, [sp, #0]
 8006796:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800679a:	68f8      	ldr	r0, [r7, #12]
 800679c:	f000 fb38 	bl	8006e10 <I2C_TransferConfig>
        }
      }

    }
    while (hi2c->XferCount > 0U);
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80067a4:	b29b      	uxth	r3, r3
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d19e      	bne.n	80066e8 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80067aa:	697a      	ldr	r2, [r7, #20]
 80067ac:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80067ae:	68f8      	ldr	r0, [r7, #12]
 80067b0:	f000 fa8c 	bl	8006ccc <I2C_WaitOnSTOPFlagUntilTimeout>
 80067b4:	4603      	mov	r3, r0
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d001      	beq.n	80067be <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80067ba:	2301      	movs	r3, #1
 80067bc:	e01a      	b.n	80067f4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	2220      	movs	r2, #32
 80067c4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	6859      	ldr	r1, [r3, #4]
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	681a      	ldr	r2, [r3, #0]
 80067d0:	4b0a      	ldr	r3, [pc, #40]	; (80067fc <HAL_I2C_Mem_Write+0x224>)
 80067d2:	400b      	ands	r3, r1
 80067d4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	2220      	movs	r2, #32
 80067da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	2200      	movs	r2, #0
 80067e2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	2200      	movs	r2, #0
 80067ea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80067ee:	2300      	movs	r3, #0
 80067f0:	e000      	b.n	80067f4 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80067f2:	2302      	movs	r3, #2
  }
}
 80067f4:	4618      	mov	r0, r3
 80067f6:	3718      	adds	r7, #24
 80067f8:	46bd      	mov	sp, r7
 80067fa:	bd80      	pop	{r7, pc}
 80067fc:	fe00e800 	.word	0xfe00e800

08006800 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006800:	b580      	push	{r7, lr}
 8006802:	b088      	sub	sp, #32
 8006804:	af02      	add	r7, sp, #8
 8006806:	60f8      	str	r0, [r7, #12]
 8006808:	4608      	mov	r0, r1
 800680a:	4611      	mov	r1, r2
 800680c:	461a      	mov	r2, r3
 800680e:	4603      	mov	r3, r0
 8006810:	817b      	strh	r3, [r7, #10]
 8006812:	460b      	mov	r3, r1
 8006814:	813b      	strh	r3, [r7, #8]
 8006816:	4613      	mov	r3, r2
 8006818:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006820:	b2db      	uxtb	r3, r3
 8006822:	2b20      	cmp	r3, #32
 8006824:	f040 80fd 	bne.w	8006a22 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8006828:	6a3b      	ldr	r3, [r7, #32]
 800682a:	2b00      	cmp	r3, #0
 800682c:	d002      	beq.n	8006834 <HAL_I2C_Mem_Read+0x34>
 800682e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006830:	2b00      	cmp	r3, #0
 8006832:	d105      	bne.n	8006840 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	f44f 7200 	mov.w	r2, #512	; 0x200
 800683a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800683c:	2301      	movs	r3, #1
 800683e:	e0f1      	b.n	8006a24 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006846:	2b01      	cmp	r3, #1
 8006848:	d101      	bne.n	800684e <HAL_I2C_Mem_Read+0x4e>
 800684a:	2302      	movs	r3, #2
 800684c:	e0ea      	b.n	8006a24 <HAL_I2C_Mem_Read+0x224>
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	2201      	movs	r2, #1
 8006852:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8006856:	f7ff f9c7 	bl	8005be8 <HAL_GetTick>
 800685a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800685c:	697b      	ldr	r3, [r7, #20]
 800685e:	9300      	str	r3, [sp, #0]
 8006860:	2319      	movs	r3, #25
 8006862:	2201      	movs	r2, #1
 8006864:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006868:	68f8      	ldr	r0, [r7, #12]
 800686a:	f000 f9af 	bl	8006bcc <I2C_WaitOnFlagUntilTimeout>
 800686e:	4603      	mov	r3, r0
 8006870:	2b00      	cmp	r3, #0
 8006872:	d001      	beq.n	8006878 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8006874:	2301      	movs	r3, #1
 8006876:	e0d5      	b.n	8006a24 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	2222      	movs	r2, #34	; 0x22
 800687c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	2240      	movs	r2, #64	; 0x40
 8006884:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	2200      	movs	r2, #0
 800688c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	6a3a      	ldr	r2, [r7, #32]
 8006892:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8006898:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	2200      	movs	r2, #0
 800689e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80068a0:	88f8      	ldrh	r0, [r7, #6]
 80068a2:	893a      	ldrh	r2, [r7, #8]
 80068a4:	8979      	ldrh	r1, [r7, #10]
 80068a6:	697b      	ldr	r3, [r7, #20]
 80068a8:	9301      	str	r3, [sp, #4]
 80068aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068ac:	9300      	str	r3, [sp, #0]
 80068ae:	4603      	mov	r3, r0
 80068b0:	68f8      	ldr	r0, [r7, #12]
 80068b2:	f000 f913 	bl	8006adc <I2C_RequestMemoryRead>
 80068b6:	4603      	mov	r3, r0
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d005      	beq.n	80068c8 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	2200      	movs	r2, #0
 80068c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80068c4:	2301      	movs	r3, #1
 80068c6:	e0ad      	b.n	8006a24 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80068cc:	b29b      	uxth	r3, r3
 80068ce:	2bff      	cmp	r3, #255	; 0xff
 80068d0:	d90e      	bls.n	80068f0 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	22ff      	movs	r2, #255	; 0xff
 80068d6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80068dc:	b2da      	uxtb	r2, r3
 80068de:	8979      	ldrh	r1, [r7, #10]
 80068e0:	4b52      	ldr	r3, [pc, #328]	; (8006a2c <HAL_I2C_Mem_Read+0x22c>)
 80068e2:	9300      	str	r3, [sp, #0]
 80068e4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80068e8:	68f8      	ldr	r0, [r7, #12]
 80068ea:	f000 fa91 	bl	8006e10 <I2C_TransferConfig>
 80068ee:	e00f      	b.n	8006910 <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80068f4:	b29a      	uxth	r2, r3
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80068fe:	b2da      	uxtb	r2, r3
 8006900:	8979      	ldrh	r1, [r7, #10]
 8006902:	4b4a      	ldr	r3, [pc, #296]	; (8006a2c <HAL_I2C_Mem_Read+0x22c>)
 8006904:	9300      	str	r3, [sp, #0]
 8006906:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800690a:	68f8      	ldr	r0, [r7, #12]
 800690c:	f000 fa80 	bl	8006e10 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8006910:	697b      	ldr	r3, [r7, #20]
 8006912:	9300      	str	r3, [sp, #0]
 8006914:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006916:	2200      	movs	r2, #0
 8006918:	2104      	movs	r1, #4
 800691a:	68f8      	ldr	r0, [r7, #12]
 800691c:	f000 f956 	bl	8006bcc <I2C_WaitOnFlagUntilTimeout>
 8006920:	4603      	mov	r3, r0
 8006922:	2b00      	cmp	r3, #0
 8006924:	d001      	beq.n	800692a <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8006926:	2301      	movs	r3, #1
 8006928:	e07c      	b.n	8006a24 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006934:	b2d2      	uxtb	r2, r2
 8006936:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800693c:	1c5a      	adds	r2, r3, #1
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006946:	3b01      	subs	r3, #1
 8006948:	b29a      	uxth	r2, r3
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006952:	b29b      	uxth	r3, r3
 8006954:	3b01      	subs	r3, #1
 8006956:	b29a      	uxth	r2, r3
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006960:	b29b      	uxth	r3, r3
 8006962:	2b00      	cmp	r3, #0
 8006964:	d034      	beq.n	80069d0 <HAL_I2C_Mem_Read+0x1d0>
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800696a:	2b00      	cmp	r3, #0
 800696c:	d130      	bne.n	80069d0 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800696e:	697b      	ldr	r3, [r7, #20]
 8006970:	9300      	str	r3, [sp, #0]
 8006972:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006974:	2200      	movs	r2, #0
 8006976:	2180      	movs	r1, #128	; 0x80
 8006978:	68f8      	ldr	r0, [r7, #12]
 800697a:	f000 f927 	bl	8006bcc <I2C_WaitOnFlagUntilTimeout>
 800697e:	4603      	mov	r3, r0
 8006980:	2b00      	cmp	r3, #0
 8006982:	d001      	beq.n	8006988 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8006984:	2301      	movs	r3, #1
 8006986:	e04d      	b.n	8006a24 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800698c:	b29b      	uxth	r3, r3
 800698e:	2bff      	cmp	r3, #255	; 0xff
 8006990:	d90e      	bls.n	80069b0 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	22ff      	movs	r2, #255	; 0xff
 8006996:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800699c:	b2da      	uxtb	r2, r3
 800699e:	8979      	ldrh	r1, [r7, #10]
 80069a0:	2300      	movs	r3, #0
 80069a2:	9300      	str	r3, [sp, #0]
 80069a4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80069a8:	68f8      	ldr	r0, [r7, #12]
 80069aa:	f000 fa31 	bl	8006e10 <I2C_TransferConfig>
 80069ae:	e00f      	b.n	80069d0 <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80069b4:	b29a      	uxth	r2, r3
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80069be:	b2da      	uxtb	r2, r3
 80069c0:	8979      	ldrh	r1, [r7, #10]
 80069c2:	2300      	movs	r3, #0
 80069c4:	9300      	str	r3, [sp, #0]
 80069c6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80069ca:	68f8      	ldr	r0, [r7, #12]
 80069cc:	f000 fa20 	bl	8006e10 <I2C_TransferConfig>
        }
      }
    }
    while (hi2c->XferCount > 0U);
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80069d4:	b29b      	uxth	r3, r3
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d19a      	bne.n	8006910 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80069da:	697a      	ldr	r2, [r7, #20]
 80069dc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80069de:	68f8      	ldr	r0, [r7, #12]
 80069e0:	f000 f974 	bl	8006ccc <I2C_WaitOnSTOPFlagUntilTimeout>
 80069e4:	4603      	mov	r3, r0
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d001      	beq.n	80069ee <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80069ea:	2301      	movs	r3, #1
 80069ec:	e01a      	b.n	8006a24 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	2220      	movs	r2, #32
 80069f4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	6859      	ldr	r1, [r3, #4]
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	681a      	ldr	r2, [r3, #0]
 8006a00:	4b0b      	ldr	r3, [pc, #44]	; (8006a30 <HAL_I2C_Mem_Read+0x230>)
 8006a02:	400b      	ands	r3, r1
 8006a04:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	2220      	movs	r2, #32
 8006a0a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	2200      	movs	r2, #0
 8006a12:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	2200      	movs	r2, #0
 8006a1a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006a1e:	2300      	movs	r3, #0
 8006a20:	e000      	b.n	8006a24 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8006a22:	2302      	movs	r3, #2
  }
}
 8006a24:	4618      	mov	r0, r3
 8006a26:	3718      	adds	r7, #24
 8006a28:	46bd      	mov	sp, r7
 8006a2a:	bd80      	pop	{r7, pc}
 8006a2c:	80002400 	.word	0x80002400
 8006a30:	fe00e800 	.word	0xfe00e800

08006a34 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006a34:	b580      	push	{r7, lr}
 8006a36:	b086      	sub	sp, #24
 8006a38:	af02      	add	r7, sp, #8
 8006a3a:	60f8      	str	r0, [r7, #12]
 8006a3c:	4608      	mov	r0, r1
 8006a3e:	4611      	mov	r1, r2
 8006a40:	461a      	mov	r2, r3
 8006a42:	4603      	mov	r3, r0
 8006a44:	817b      	strh	r3, [r7, #10]
 8006a46:	460b      	mov	r3, r1
 8006a48:	813b      	strh	r3, [r7, #8]
 8006a4a:	4613      	mov	r3, r2
 8006a4c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8006a4e:	88fb      	ldrh	r3, [r7, #6]
 8006a50:	b2da      	uxtb	r2, r3
 8006a52:	8979      	ldrh	r1, [r7, #10]
 8006a54:	4b20      	ldr	r3, [pc, #128]	; (8006ad8 <I2C_RequestMemoryWrite+0xa4>)
 8006a56:	9300      	str	r3, [sp, #0]
 8006a58:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006a5c:	68f8      	ldr	r0, [r7, #12]
 8006a5e:	f000 f9d7 	bl	8006e10 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006a62:	69fa      	ldr	r2, [r7, #28]
 8006a64:	69b9      	ldr	r1, [r7, #24]
 8006a66:	68f8      	ldr	r0, [r7, #12]
 8006a68:	f000 f8f0 	bl	8006c4c <I2C_WaitOnTXISFlagUntilTimeout>
 8006a6c:	4603      	mov	r3, r0
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d001      	beq.n	8006a76 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8006a72:	2301      	movs	r3, #1
 8006a74:	e02c      	b.n	8006ad0 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006a76:	88fb      	ldrh	r3, [r7, #6]
 8006a78:	2b01      	cmp	r3, #1
 8006a7a:	d105      	bne.n	8006a88 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006a7c:	893b      	ldrh	r3, [r7, #8]
 8006a7e:	b2da      	uxtb	r2, r3
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	629a      	str	r2, [r3, #40]	; 0x28
 8006a86:	e015      	b.n	8006ab4 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8006a88:	893b      	ldrh	r3, [r7, #8]
 8006a8a:	0a1b      	lsrs	r3, r3, #8
 8006a8c:	b29b      	uxth	r3, r3
 8006a8e:	b2da      	uxtb	r2, r3
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006a96:	69fa      	ldr	r2, [r7, #28]
 8006a98:	69b9      	ldr	r1, [r7, #24]
 8006a9a:	68f8      	ldr	r0, [r7, #12]
 8006a9c:	f000 f8d6 	bl	8006c4c <I2C_WaitOnTXISFlagUntilTimeout>
 8006aa0:	4603      	mov	r3, r0
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d001      	beq.n	8006aaa <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8006aa6:	2301      	movs	r3, #1
 8006aa8:	e012      	b.n	8006ad0 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006aaa:	893b      	ldrh	r3, [r7, #8]
 8006aac:	b2da      	uxtb	r2, r3
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8006ab4:	69fb      	ldr	r3, [r7, #28]
 8006ab6:	9300      	str	r3, [sp, #0]
 8006ab8:	69bb      	ldr	r3, [r7, #24]
 8006aba:	2200      	movs	r2, #0
 8006abc:	2180      	movs	r1, #128	; 0x80
 8006abe:	68f8      	ldr	r0, [r7, #12]
 8006ac0:	f000 f884 	bl	8006bcc <I2C_WaitOnFlagUntilTimeout>
 8006ac4:	4603      	mov	r3, r0
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d001      	beq.n	8006ace <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8006aca:	2301      	movs	r3, #1
 8006acc:	e000      	b.n	8006ad0 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8006ace:	2300      	movs	r3, #0
}
 8006ad0:	4618      	mov	r0, r3
 8006ad2:	3710      	adds	r7, #16
 8006ad4:	46bd      	mov	sp, r7
 8006ad6:	bd80      	pop	{r7, pc}
 8006ad8:	80002000 	.word	0x80002000

08006adc <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006adc:	b580      	push	{r7, lr}
 8006ade:	b086      	sub	sp, #24
 8006ae0:	af02      	add	r7, sp, #8
 8006ae2:	60f8      	str	r0, [r7, #12]
 8006ae4:	4608      	mov	r0, r1
 8006ae6:	4611      	mov	r1, r2
 8006ae8:	461a      	mov	r2, r3
 8006aea:	4603      	mov	r3, r0
 8006aec:	817b      	strh	r3, [r7, #10]
 8006aee:	460b      	mov	r3, r1
 8006af0:	813b      	strh	r3, [r7, #8]
 8006af2:	4613      	mov	r3, r2
 8006af4:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8006af6:	88fb      	ldrh	r3, [r7, #6]
 8006af8:	b2da      	uxtb	r2, r3
 8006afa:	8979      	ldrh	r1, [r7, #10]
 8006afc:	4b20      	ldr	r3, [pc, #128]	; (8006b80 <I2C_RequestMemoryRead+0xa4>)
 8006afe:	9300      	str	r3, [sp, #0]
 8006b00:	2300      	movs	r3, #0
 8006b02:	68f8      	ldr	r0, [r7, #12]
 8006b04:	f000 f984 	bl	8006e10 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006b08:	69fa      	ldr	r2, [r7, #28]
 8006b0a:	69b9      	ldr	r1, [r7, #24]
 8006b0c:	68f8      	ldr	r0, [r7, #12]
 8006b0e:	f000 f89d 	bl	8006c4c <I2C_WaitOnTXISFlagUntilTimeout>
 8006b12:	4603      	mov	r3, r0
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d001      	beq.n	8006b1c <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8006b18:	2301      	movs	r3, #1
 8006b1a:	e02c      	b.n	8006b76 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006b1c:	88fb      	ldrh	r3, [r7, #6]
 8006b1e:	2b01      	cmp	r3, #1
 8006b20:	d105      	bne.n	8006b2e <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006b22:	893b      	ldrh	r3, [r7, #8]
 8006b24:	b2da      	uxtb	r2, r3
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	629a      	str	r2, [r3, #40]	; 0x28
 8006b2c:	e015      	b.n	8006b5a <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8006b2e:	893b      	ldrh	r3, [r7, #8]
 8006b30:	0a1b      	lsrs	r3, r3, #8
 8006b32:	b29b      	uxth	r3, r3
 8006b34:	b2da      	uxtb	r2, r3
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006b3c:	69fa      	ldr	r2, [r7, #28]
 8006b3e:	69b9      	ldr	r1, [r7, #24]
 8006b40:	68f8      	ldr	r0, [r7, #12]
 8006b42:	f000 f883 	bl	8006c4c <I2C_WaitOnTXISFlagUntilTimeout>
 8006b46:	4603      	mov	r3, r0
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d001      	beq.n	8006b50 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8006b4c:	2301      	movs	r3, #1
 8006b4e:	e012      	b.n	8006b76 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006b50:	893b      	ldrh	r3, [r7, #8]
 8006b52:	b2da      	uxtb	r2, r3
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8006b5a:	69fb      	ldr	r3, [r7, #28]
 8006b5c:	9300      	str	r3, [sp, #0]
 8006b5e:	69bb      	ldr	r3, [r7, #24]
 8006b60:	2200      	movs	r2, #0
 8006b62:	2140      	movs	r1, #64	; 0x40
 8006b64:	68f8      	ldr	r0, [r7, #12]
 8006b66:	f000 f831 	bl	8006bcc <I2C_WaitOnFlagUntilTimeout>
 8006b6a:	4603      	mov	r3, r0
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d001      	beq.n	8006b74 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8006b70:	2301      	movs	r3, #1
 8006b72:	e000      	b.n	8006b76 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8006b74:	2300      	movs	r3, #0
}
 8006b76:	4618      	mov	r0, r3
 8006b78:	3710      	adds	r7, #16
 8006b7a:	46bd      	mov	sp, r7
 8006b7c:	bd80      	pop	{r7, pc}
 8006b7e:	bf00      	nop
 8006b80:	80002000 	.word	0x80002000

08006b84 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8006b84:	b480      	push	{r7}
 8006b86:	b083      	sub	sp, #12
 8006b88:	af00      	add	r7, sp, #0
 8006b8a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	699b      	ldr	r3, [r3, #24]
 8006b92:	f003 0302 	and.w	r3, r3, #2
 8006b96:	2b02      	cmp	r3, #2
 8006b98:	d103      	bne.n	8006ba2 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	2200      	movs	r2, #0
 8006ba0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	699b      	ldr	r3, [r3, #24]
 8006ba8:	f003 0301 	and.w	r3, r3, #1
 8006bac:	2b01      	cmp	r3, #1
 8006bae:	d007      	beq.n	8006bc0 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	699a      	ldr	r2, [r3, #24]
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	f042 0201 	orr.w	r2, r2, #1
 8006bbe:	619a      	str	r2, [r3, #24]
  }
}
 8006bc0:	bf00      	nop
 8006bc2:	370c      	adds	r7, #12
 8006bc4:	46bd      	mov	sp, r7
 8006bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bca:	4770      	bx	lr

08006bcc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8006bcc:	b580      	push	{r7, lr}
 8006bce:	b084      	sub	sp, #16
 8006bd0:	af00      	add	r7, sp, #0
 8006bd2:	60f8      	str	r0, [r7, #12]
 8006bd4:	60b9      	str	r1, [r7, #8]
 8006bd6:	603b      	str	r3, [r7, #0]
 8006bd8:	4613      	mov	r3, r2
 8006bda:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006bdc:	e022      	b.n	8006c24 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006bde:	683b      	ldr	r3, [r7, #0]
 8006be0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006be4:	d01e      	beq.n	8006c24 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006be6:	f7fe ffff 	bl	8005be8 <HAL_GetTick>
 8006bea:	4602      	mov	r2, r0
 8006bec:	69bb      	ldr	r3, [r7, #24]
 8006bee:	1ad3      	subs	r3, r2, r3
 8006bf0:	683a      	ldr	r2, [r7, #0]
 8006bf2:	429a      	cmp	r2, r3
 8006bf4:	d302      	bcc.n	8006bfc <I2C_WaitOnFlagUntilTimeout+0x30>
 8006bf6:	683b      	ldr	r3, [r7, #0]
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d113      	bne.n	8006c24 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c00:	f043 0220 	orr.w	r2, r3, #32
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	2220      	movs	r2, #32
 8006c0c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	2200      	movs	r2, #0
 8006c14:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	2200      	movs	r2, #0
 8006c1c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8006c20:	2301      	movs	r3, #1
 8006c22:	e00f      	b.n	8006c44 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	699a      	ldr	r2, [r3, #24]
 8006c2a:	68bb      	ldr	r3, [r7, #8]
 8006c2c:	4013      	ands	r3, r2
 8006c2e:	68ba      	ldr	r2, [r7, #8]
 8006c30:	429a      	cmp	r2, r3
 8006c32:	bf0c      	ite	eq
 8006c34:	2301      	moveq	r3, #1
 8006c36:	2300      	movne	r3, #0
 8006c38:	b2db      	uxtb	r3, r3
 8006c3a:	461a      	mov	r2, r3
 8006c3c:	79fb      	ldrb	r3, [r7, #7]
 8006c3e:	429a      	cmp	r2, r3
 8006c40:	d0cd      	beq.n	8006bde <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006c42:	2300      	movs	r3, #0
}
 8006c44:	4618      	mov	r0, r3
 8006c46:	3710      	adds	r7, #16
 8006c48:	46bd      	mov	sp, r7
 8006c4a:	bd80      	pop	{r7, pc}

08006c4c <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006c4c:	b580      	push	{r7, lr}
 8006c4e:	b084      	sub	sp, #16
 8006c50:	af00      	add	r7, sp, #0
 8006c52:	60f8      	str	r0, [r7, #12]
 8006c54:	60b9      	str	r1, [r7, #8]
 8006c56:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006c58:	e02c      	b.n	8006cb4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8006c5a:	687a      	ldr	r2, [r7, #4]
 8006c5c:	68b9      	ldr	r1, [r7, #8]
 8006c5e:	68f8      	ldr	r0, [r7, #12]
 8006c60:	f000 f870 	bl	8006d44 <I2C_IsAcknowledgeFailed>
 8006c64:	4603      	mov	r3, r0
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d001      	beq.n	8006c6e <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006c6a:	2301      	movs	r3, #1
 8006c6c:	e02a      	b.n	8006cc4 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006c6e:	68bb      	ldr	r3, [r7, #8]
 8006c70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c74:	d01e      	beq.n	8006cb4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006c76:	f7fe ffb7 	bl	8005be8 <HAL_GetTick>
 8006c7a:	4602      	mov	r2, r0
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	1ad3      	subs	r3, r2, r3
 8006c80:	68ba      	ldr	r2, [r7, #8]
 8006c82:	429a      	cmp	r2, r3
 8006c84:	d302      	bcc.n	8006c8c <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8006c86:	68bb      	ldr	r3, [r7, #8]
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d113      	bne.n	8006cb4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c90:	f043 0220 	orr.w	r2, r3, #32
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	2220      	movs	r2, #32
 8006c9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	2200      	movs	r2, #0
 8006ca4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	2200      	movs	r2, #0
 8006cac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8006cb0:	2301      	movs	r3, #1
 8006cb2:	e007      	b.n	8006cc4 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	699b      	ldr	r3, [r3, #24]
 8006cba:	f003 0302 	and.w	r3, r3, #2
 8006cbe:	2b02      	cmp	r3, #2
 8006cc0:	d1cb      	bne.n	8006c5a <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006cc2:	2300      	movs	r3, #0
}
 8006cc4:	4618      	mov	r0, r3
 8006cc6:	3710      	adds	r7, #16
 8006cc8:	46bd      	mov	sp, r7
 8006cca:	bd80      	pop	{r7, pc}

08006ccc <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006ccc:	b580      	push	{r7, lr}
 8006cce:	b084      	sub	sp, #16
 8006cd0:	af00      	add	r7, sp, #0
 8006cd2:	60f8      	str	r0, [r7, #12]
 8006cd4:	60b9      	str	r1, [r7, #8]
 8006cd6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006cd8:	e028      	b.n	8006d2c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8006cda:	687a      	ldr	r2, [r7, #4]
 8006cdc:	68b9      	ldr	r1, [r7, #8]
 8006cde:	68f8      	ldr	r0, [r7, #12]
 8006ce0:	f000 f830 	bl	8006d44 <I2C_IsAcknowledgeFailed>
 8006ce4:	4603      	mov	r3, r0
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d001      	beq.n	8006cee <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006cea:	2301      	movs	r3, #1
 8006cec:	e026      	b.n	8006d3c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006cee:	f7fe ff7b 	bl	8005be8 <HAL_GetTick>
 8006cf2:	4602      	mov	r2, r0
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	1ad3      	subs	r3, r2, r3
 8006cf8:	68ba      	ldr	r2, [r7, #8]
 8006cfa:	429a      	cmp	r2, r3
 8006cfc:	d302      	bcc.n	8006d04 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8006cfe:	68bb      	ldr	r3, [r7, #8]
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d113      	bne.n	8006d2c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d08:	f043 0220 	orr.w	r2, r3, #32
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	2220      	movs	r2, #32
 8006d14:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	2200      	movs	r2, #0
 8006d1c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	2200      	movs	r2, #0
 8006d24:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8006d28:	2301      	movs	r3, #1
 8006d2a:	e007      	b.n	8006d3c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	699b      	ldr	r3, [r3, #24]
 8006d32:	f003 0320 	and.w	r3, r3, #32
 8006d36:	2b20      	cmp	r3, #32
 8006d38:	d1cf      	bne.n	8006cda <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8006d3a:	2300      	movs	r3, #0
}
 8006d3c:	4618      	mov	r0, r3
 8006d3e:	3710      	adds	r7, #16
 8006d40:	46bd      	mov	sp, r7
 8006d42:	bd80      	pop	{r7, pc}

08006d44 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006d44:	b580      	push	{r7, lr}
 8006d46:	b084      	sub	sp, #16
 8006d48:	af00      	add	r7, sp, #0
 8006d4a:	60f8      	str	r0, [r7, #12]
 8006d4c:	60b9      	str	r1, [r7, #8]
 8006d4e:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	699b      	ldr	r3, [r3, #24]
 8006d56:	f003 0310 	and.w	r3, r3, #16
 8006d5a:	2b10      	cmp	r3, #16
 8006d5c:	d151      	bne.n	8006e02 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006d5e:	e022      	b.n	8006da6 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8006d60:	68bb      	ldr	r3, [r7, #8]
 8006d62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d66:	d01e      	beq.n	8006da6 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006d68:	f7fe ff3e 	bl	8005be8 <HAL_GetTick>
 8006d6c:	4602      	mov	r2, r0
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	1ad3      	subs	r3, r2, r3
 8006d72:	68ba      	ldr	r2, [r7, #8]
 8006d74:	429a      	cmp	r2, r3
 8006d76:	d302      	bcc.n	8006d7e <I2C_IsAcknowledgeFailed+0x3a>
 8006d78:	68bb      	ldr	r3, [r7, #8]
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d113      	bne.n	8006da6 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d82:	f043 0220 	orr.w	r2, r3, #32
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	2220      	movs	r2, #32
 8006d8e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	2200      	movs	r2, #0
 8006d96:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	2200      	movs	r2, #0
 8006d9e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8006da2:	2301      	movs	r3, #1
 8006da4:	e02e      	b.n	8006e04 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	699b      	ldr	r3, [r3, #24]
 8006dac:	f003 0320 	and.w	r3, r3, #32
 8006db0:	2b20      	cmp	r3, #32
 8006db2:	d1d5      	bne.n	8006d60 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	2210      	movs	r2, #16
 8006dba:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	2220      	movs	r2, #32
 8006dc2:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8006dc4:	68f8      	ldr	r0, [r7, #12]
 8006dc6:	f7ff fedd 	bl	8006b84 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	6859      	ldr	r1, [r3, #4]
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	681a      	ldr	r2, [r3, #0]
 8006dd4:	4b0d      	ldr	r3, [pc, #52]	; (8006e0c <I2C_IsAcknowledgeFailed+0xc8>)
 8006dd6:	400b      	ands	r3, r1
 8006dd8:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006dde:	f043 0204 	orr.w	r2, r3, #4
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	2220      	movs	r2, #32
 8006dea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	2200      	movs	r2, #0
 8006df2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	2200      	movs	r2, #0
 8006dfa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8006dfe:	2301      	movs	r3, #1
 8006e00:	e000      	b.n	8006e04 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8006e02:	2300      	movs	r3, #0
}
 8006e04:	4618      	mov	r0, r3
 8006e06:	3710      	adds	r7, #16
 8006e08:	46bd      	mov	sp, r7
 8006e0a:	bd80      	pop	{r7, pc}
 8006e0c:	fe00e800 	.word	0xfe00e800

08006e10 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 8006e10:	b480      	push	{r7}
 8006e12:	b085      	sub	sp, #20
 8006e14:	af00      	add	r7, sp, #0
 8006e16:	60f8      	str	r0, [r7, #12]
 8006e18:	607b      	str	r3, [r7, #4]
 8006e1a:	460b      	mov	r3, r1
 8006e1c:	817b      	strh	r3, [r7, #10]
 8006e1e:	4613      	mov	r3, r2
 8006e20:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	685a      	ldr	r2, [r3, #4]
 8006e28:	69bb      	ldr	r3, [r7, #24]
 8006e2a:	0d5b      	lsrs	r3, r3, #21
 8006e2c:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8006e30:	4b0d      	ldr	r3, [pc, #52]	; (8006e68 <I2C_TransferConfig+0x58>)
 8006e32:	430b      	orrs	r3, r1
 8006e34:	43db      	mvns	r3, r3
 8006e36:	ea02 0103 	and.w	r1, r2, r3
 8006e3a:	897b      	ldrh	r3, [r7, #10]
 8006e3c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8006e40:	7a7b      	ldrb	r3, [r7, #9]
 8006e42:	041b      	lsls	r3, r3, #16
 8006e44:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006e48:	431a      	orrs	r2, r3
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	431a      	orrs	r2, r3
 8006e4e:	69bb      	ldr	r3, [r7, #24]
 8006e50:	431a      	orrs	r2, r3
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	430a      	orrs	r2, r1
 8006e58:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8006e5a:	bf00      	nop
 8006e5c:	3714      	adds	r7, #20
 8006e5e:	46bd      	mov	sp, r7
 8006e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e64:	4770      	bx	lr
 8006e66:	bf00      	nop
 8006e68:	03ff63ff 	.word	0x03ff63ff

08006e6c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8006e6c:	b480      	push	{r7}
 8006e6e:	b083      	sub	sp, #12
 8006e70:	af00      	add	r7, sp, #0
 8006e72:	6078      	str	r0, [r7, #4]
 8006e74:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006e7c:	b2db      	uxtb	r3, r3
 8006e7e:	2b20      	cmp	r3, #32
 8006e80:	d138      	bne.n	8006ef4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006e88:	2b01      	cmp	r3, #1
 8006e8a:	d101      	bne.n	8006e90 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8006e8c:	2302      	movs	r3, #2
 8006e8e:	e032      	b.n	8006ef6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	2201      	movs	r2, #1
 8006e94:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	2224      	movs	r2, #36	; 0x24
 8006e9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	681a      	ldr	r2, [r3, #0]
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	f022 0201 	bic.w	r2, r2, #1
 8006eae:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	681a      	ldr	r2, [r3, #0]
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006ebe:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	6819      	ldr	r1, [r3, #0]
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	683a      	ldr	r2, [r7, #0]
 8006ecc:	430a      	orrs	r2, r1
 8006ece:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	681a      	ldr	r2, [r3, #0]
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	f042 0201 	orr.w	r2, r2, #1
 8006ede:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	2220      	movs	r2, #32
 8006ee4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	2200      	movs	r2, #0
 8006eec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006ef0:	2300      	movs	r3, #0
 8006ef2:	e000      	b.n	8006ef6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006ef4:	2302      	movs	r3, #2
  }
}
 8006ef6:	4618      	mov	r0, r3
 8006ef8:	370c      	adds	r7, #12
 8006efa:	46bd      	mov	sp, r7
 8006efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f00:	4770      	bx	lr

08006f02 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8006f02:	b480      	push	{r7}
 8006f04:	b085      	sub	sp, #20
 8006f06:	af00      	add	r7, sp, #0
 8006f08:	6078      	str	r0, [r7, #4]
 8006f0a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006f12:	b2db      	uxtb	r3, r3
 8006f14:	2b20      	cmp	r3, #32
 8006f16:	d139      	bne.n	8006f8c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006f1e:	2b01      	cmp	r3, #1
 8006f20:	d101      	bne.n	8006f26 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8006f22:	2302      	movs	r3, #2
 8006f24:	e033      	b.n	8006f8e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	2201      	movs	r2, #1
 8006f2a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	2224      	movs	r2, #36	; 0x24
 8006f32:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	681a      	ldr	r2, [r3, #0]
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	f022 0201 	bic.w	r2, r2, #1
 8006f44:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8006f54:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8006f56:	683b      	ldr	r3, [r7, #0]
 8006f58:	021b      	lsls	r3, r3, #8
 8006f5a:	68fa      	ldr	r2, [r7, #12]
 8006f5c:	4313      	orrs	r3, r2
 8006f5e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	68fa      	ldr	r2, [r7, #12]
 8006f66:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	681a      	ldr	r2, [r3, #0]
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	f042 0201 	orr.w	r2, r2, #1
 8006f76:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	2220      	movs	r2, #32
 8006f7c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	2200      	movs	r2, #0
 8006f84:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006f88:	2300      	movs	r3, #0
 8006f8a:	e000      	b.n	8006f8e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8006f8c:	2302      	movs	r3, #2
  }
}
 8006f8e:	4618      	mov	r0, r3
 8006f90:	3714      	adds	r7, #20
 8006f92:	46bd      	mov	sp, r7
 8006f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f98:	4770      	bx	lr
	...

08006f9c <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8006f9c:	b480      	push	{r7}
 8006f9e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006fa0:	4b05      	ldr	r3, [pc, #20]	; (8006fb8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	4a04      	ldr	r2, [pc, #16]	; (8006fb8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8006fa6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006faa:	6013      	str	r3, [r2, #0]
}
 8006fac:	bf00      	nop
 8006fae:	46bd      	mov	sp, r7
 8006fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fb4:	4770      	bx	lr
 8006fb6:	bf00      	nop
 8006fb8:	58000400 	.word	0x58000400

08006fbc <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */  
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8006fbc:	b480      	push	{r7}
 8006fbe:	af00      	add	r7, sp, #0
  return  (PWR->CR1 & PWR_CR1_VOS);
 8006fc0:	4b04      	ldr	r3, [pc, #16]	; (8006fd4 <HAL_PWREx_GetVoltageRange+0x18>)
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8006fc8:	4618      	mov	r0, r3
 8006fca:	46bd      	mov	sp, r7
 8006fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fd0:	4770      	bx	lr
 8006fd2:	bf00      	nop
 8006fd4:	58000400 	.word	0x58000400

08006fd8 <LL_RCC_HSE_IsEnabledDiv2>:
{
 8006fd8:	b480      	push	{r7}
 8006fda:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8006fdc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006fe6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006fea:	d101      	bne.n	8006ff0 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8006fec:	2301      	movs	r3, #1
 8006fee:	e000      	b.n	8006ff2 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8006ff0:	2300      	movs	r3, #0
}
 8006ff2:	4618      	mov	r0, r3
 8006ff4:	46bd      	mov	sp, r7
 8006ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ffa:	4770      	bx	lr

08006ffc <LL_RCC_HSE_Enable>:
{
 8006ffc:	b480      	push	{r7}
 8006ffe:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8007000:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800700a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800700e:	6013      	str	r3, [r2, #0]
}
 8007010:	bf00      	nop
 8007012:	46bd      	mov	sp, r7
 8007014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007018:	4770      	bx	lr

0800701a <LL_RCC_HSE_Disable>:
{
 800701a:	b480      	push	{r7}
 800701c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 800701e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007028:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800702c:	6013      	str	r3, [r2, #0]
}
 800702e:	bf00      	nop
 8007030:	46bd      	mov	sp, r7
 8007032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007036:	4770      	bx	lr

08007038 <LL_RCC_HSE_IsReady>:
{
 8007038:	b480      	push	{r7}
 800703a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 800703c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007046:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800704a:	d101      	bne.n	8007050 <LL_RCC_HSE_IsReady+0x18>
 800704c:	2301      	movs	r3, #1
 800704e:	e000      	b.n	8007052 <LL_RCC_HSE_IsReady+0x1a>
 8007050:	2300      	movs	r3, #0
}
 8007052:	4618      	mov	r0, r3
 8007054:	46bd      	mov	sp, r7
 8007056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800705a:	4770      	bx	lr

0800705c <LL_RCC_HSI_Enable>:
{
 800705c:	b480      	push	{r7}
 800705e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8007060:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800706a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800706e:	6013      	str	r3, [r2, #0]
}
 8007070:	bf00      	nop
 8007072:	46bd      	mov	sp, r7
 8007074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007078:	4770      	bx	lr

0800707a <LL_RCC_HSI_Disable>:
{
 800707a:	b480      	push	{r7}
 800707c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 800707e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007088:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800708c:	6013      	str	r3, [r2, #0]
}
 800708e:	bf00      	nop
 8007090:	46bd      	mov	sp, r7
 8007092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007096:	4770      	bx	lr

08007098 <LL_RCC_HSI_IsReady>:
{
 8007098:	b480      	push	{r7}
 800709a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 800709c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80070a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80070aa:	d101      	bne.n	80070b0 <LL_RCC_HSI_IsReady+0x18>
 80070ac:	2301      	movs	r3, #1
 80070ae:	e000      	b.n	80070b2 <LL_RCC_HSI_IsReady+0x1a>
 80070b0:	2300      	movs	r3, #0
}
 80070b2:	4618      	mov	r0, r3
 80070b4:	46bd      	mov	sp, r7
 80070b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ba:	4770      	bx	lr

080070bc <LL_RCC_HSI_SetCalibTrimming>:
{
 80070bc:	b480      	push	{r7}
 80070be:	b083      	sub	sp, #12
 80070c0:	af00      	add	r7, sp, #0
 80070c2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 80070c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80070c8:	685b      	ldr	r3, [r3, #4]
 80070ca:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	061b      	lsls	r3, r3, #24
 80070d2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80070d6:	4313      	orrs	r3, r2
 80070d8:	604b      	str	r3, [r1, #4]
}
 80070da:	bf00      	nop
 80070dc:	370c      	adds	r7, #12
 80070de:	46bd      	mov	sp, r7
 80070e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070e4:	4770      	bx	lr

080070e6 <LL_RCC_HSI48_Enable>:
{
 80070e6:	b480      	push	{r7}
 80070e8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 80070ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80070ee:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80070f2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80070f6:	f043 0301 	orr.w	r3, r3, #1
 80070fa:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 80070fe:	bf00      	nop
 8007100:	46bd      	mov	sp, r7
 8007102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007106:	4770      	bx	lr

08007108 <LL_RCC_HSI48_Disable>:
{
 8007108:	b480      	push	{r7}
 800710a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 800710c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007110:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007114:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007118:	f023 0301 	bic.w	r3, r3, #1
 800711c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8007120:	bf00      	nop
 8007122:	46bd      	mov	sp, r7
 8007124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007128:	4770      	bx	lr

0800712a <LL_RCC_HSI48_IsReady>:
{
 800712a:	b480      	push	{r7}
 800712c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 800712e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007132:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007136:	f003 0302 	and.w	r3, r3, #2
 800713a:	2b02      	cmp	r3, #2
 800713c:	d101      	bne.n	8007142 <LL_RCC_HSI48_IsReady+0x18>
 800713e:	2301      	movs	r3, #1
 8007140:	e000      	b.n	8007144 <LL_RCC_HSI48_IsReady+0x1a>
 8007142:	2300      	movs	r3, #0
}
 8007144:	4618      	mov	r0, r3
 8007146:	46bd      	mov	sp, r7
 8007148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800714c:	4770      	bx	lr

0800714e <LL_RCC_LSE_Enable>:
{
 800714e:	b480      	push	{r7}
 8007150:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8007152:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007156:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800715a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800715e:	f043 0301 	orr.w	r3, r3, #1
 8007162:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8007166:	bf00      	nop
 8007168:	46bd      	mov	sp, r7
 800716a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800716e:	4770      	bx	lr

08007170 <LL_RCC_LSE_Disable>:
{
 8007170:	b480      	push	{r7}
 8007172:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8007174:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007178:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800717c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007180:	f023 0301 	bic.w	r3, r3, #1
 8007184:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8007188:	bf00      	nop
 800718a:	46bd      	mov	sp, r7
 800718c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007190:	4770      	bx	lr

08007192 <LL_RCC_LSE_EnableBypass>:
{
 8007192:	b480      	push	{r7}
 8007194:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8007196:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800719a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800719e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80071a2:	f043 0304 	orr.w	r3, r3, #4
 80071a6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80071aa:	bf00      	nop
 80071ac:	46bd      	mov	sp, r7
 80071ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071b2:	4770      	bx	lr

080071b4 <LL_RCC_LSE_DisableBypass>:
{
 80071b4:	b480      	push	{r7}
 80071b6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80071b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80071bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80071c0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80071c4:	f023 0304 	bic.w	r3, r3, #4
 80071c8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80071cc:	bf00      	nop
 80071ce:	46bd      	mov	sp, r7
 80071d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071d4:	4770      	bx	lr

080071d6 <LL_RCC_LSE_IsReady>:
{
 80071d6:	b480      	push	{r7}
 80071d8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80071da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80071de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80071e2:	f003 0302 	and.w	r3, r3, #2
 80071e6:	2b02      	cmp	r3, #2
 80071e8:	d101      	bne.n	80071ee <LL_RCC_LSE_IsReady+0x18>
 80071ea:	2301      	movs	r3, #1
 80071ec:	e000      	b.n	80071f0 <LL_RCC_LSE_IsReady+0x1a>
 80071ee:	2300      	movs	r3, #0
}
 80071f0:	4618      	mov	r0, r3
 80071f2:	46bd      	mov	sp, r7
 80071f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071f8:	4770      	bx	lr

080071fa <LL_RCC_LSI1_Enable>:
{
 80071fa:	b480      	push	{r7}
 80071fc:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 80071fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007202:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007206:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800720a:	f043 0301 	orr.w	r3, r3, #1
 800720e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8007212:	bf00      	nop
 8007214:	46bd      	mov	sp, r7
 8007216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800721a:	4770      	bx	lr

0800721c <LL_RCC_LSI1_Disable>:
{
 800721c:	b480      	push	{r7}
 800721e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8007220:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007224:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007228:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800722c:	f023 0301 	bic.w	r3, r3, #1
 8007230:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8007234:	bf00      	nop
 8007236:	46bd      	mov	sp, r7
 8007238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800723c:	4770      	bx	lr

0800723e <LL_RCC_LSI1_IsReady>:
{
 800723e:	b480      	push	{r7}
 8007240:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 8007242:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007246:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800724a:	f003 0302 	and.w	r3, r3, #2
 800724e:	2b02      	cmp	r3, #2
 8007250:	d101      	bne.n	8007256 <LL_RCC_LSI1_IsReady+0x18>
 8007252:	2301      	movs	r3, #1
 8007254:	e000      	b.n	8007258 <LL_RCC_LSI1_IsReady+0x1a>
 8007256:	2300      	movs	r3, #0
}
 8007258:	4618      	mov	r0, r3
 800725a:	46bd      	mov	sp, r7
 800725c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007260:	4770      	bx	lr

08007262 <LL_RCC_LSI2_Enable>:
{
 8007262:	b480      	push	{r7}
 8007264:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8007266:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800726a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800726e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007272:	f043 0304 	orr.w	r3, r3, #4
 8007276:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 800727a:	bf00      	nop
 800727c:	46bd      	mov	sp, r7
 800727e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007282:	4770      	bx	lr

08007284 <LL_RCC_LSI2_Disable>:
{
 8007284:	b480      	push	{r7}
 8007286:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8007288:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800728c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007290:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007294:	f023 0304 	bic.w	r3, r3, #4
 8007298:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 800729c:	bf00      	nop
 800729e:	46bd      	mov	sp, r7
 80072a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072a4:	4770      	bx	lr

080072a6 <LL_RCC_LSI2_IsReady>:
{
 80072a6:	b480      	push	{r7}
 80072a8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 80072aa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80072ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80072b2:	f003 0308 	and.w	r3, r3, #8
 80072b6:	2b08      	cmp	r3, #8
 80072b8:	d101      	bne.n	80072be <LL_RCC_LSI2_IsReady+0x18>
 80072ba:	2301      	movs	r3, #1
 80072bc:	e000      	b.n	80072c0 <LL_RCC_LSI2_IsReady+0x1a>
 80072be:	2300      	movs	r3, #0
}
 80072c0:	4618      	mov	r0, r3
 80072c2:	46bd      	mov	sp, r7
 80072c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072c8:	4770      	bx	lr

080072ca <LL_RCC_LSI2_SetTrimming>:
{
 80072ca:	b480      	push	{r7}
 80072cc:	b083      	sub	sp, #12
 80072ce:	af00      	add	r7, sp, #0
 80072d0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 80072d2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80072d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80072da:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	021b      	lsls	r3, r3, #8
 80072e2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80072e6:	4313      	orrs	r3, r2
 80072e8:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 80072ec:	bf00      	nop
 80072ee:	370c      	adds	r7, #12
 80072f0:	46bd      	mov	sp, r7
 80072f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072f6:	4770      	bx	lr

080072f8 <LL_RCC_MSI_Enable>:
{
 80072f8:	b480      	push	{r7}
 80072fa:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 80072fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007306:	f043 0301 	orr.w	r3, r3, #1
 800730a:	6013      	str	r3, [r2, #0]
}
 800730c:	bf00      	nop
 800730e:	46bd      	mov	sp, r7
 8007310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007314:	4770      	bx	lr

08007316 <LL_RCC_MSI_Disable>:
{
 8007316:	b480      	push	{r7}
 8007318:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 800731a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007324:	f023 0301 	bic.w	r3, r3, #1
 8007328:	6013      	str	r3, [r2, #0]
}
 800732a:	bf00      	nop
 800732c:	46bd      	mov	sp, r7
 800732e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007332:	4770      	bx	lr

08007334 <LL_RCC_MSI_IsReady>:
{
 8007334:	b480      	push	{r7}
 8007336:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8007338:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	f003 0302 	and.w	r3, r3, #2
 8007342:	2b02      	cmp	r3, #2
 8007344:	d101      	bne.n	800734a <LL_RCC_MSI_IsReady+0x16>
 8007346:	2301      	movs	r3, #1
 8007348:	e000      	b.n	800734c <LL_RCC_MSI_IsReady+0x18>
 800734a:	2300      	movs	r3, #0
}
 800734c:	4618      	mov	r0, r3
 800734e:	46bd      	mov	sp, r7
 8007350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007354:	4770      	bx	lr

08007356 <LL_RCC_MSI_SetRange>:
{
 8007356:	b480      	push	{r7}
 8007358:	b083      	sub	sp, #12
 800735a:	af00      	add	r7, sp, #0
 800735c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 800735e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007368:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	4313      	orrs	r3, r2
 8007370:	600b      	str	r3, [r1, #0]
}
 8007372:	bf00      	nop
 8007374:	370c      	adds	r7, #12
 8007376:	46bd      	mov	sp, r7
 8007378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800737c:	4770      	bx	lr

0800737e <LL_RCC_MSI_GetRange>:
{
 800737e:	b480      	push	{r7}
 8007380:	b083      	sub	sp, #12
 8007382:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8007384:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800738e:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	2bb0      	cmp	r3, #176	; 0xb0
 8007394:	d901      	bls.n	800739a <LL_RCC_MSI_GetRange+0x1c>
    msiRange = LL_RCC_MSIRANGE_11;
 8007396:	23b0      	movs	r3, #176	; 0xb0
 8007398:	607b      	str	r3, [r7, #4]
  return msiRange;
 800739a:	687b      	ldr	r3, [r7, #4]
}
 800739c:	4618      	mov	r0, r3
 800739e:	370c      	adds	r7, #12
 80073a0:	46bd      	mov	sp, r7
 80073a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073a6:	4770      	bx	lr

080073a8 <LL_RCC_MSI_SetCalibTrimming>:
{
 80073a8:	b480      	push	{r7}
 80073aa:	b083      	sub	sp, #12
 80073ac:	af00      	add	r7, sp, #0
 80073ae:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 80073b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80073b4:	685b      	ldr	r3, [r3, #4]
 80073b6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	021b      	lsls	r3, r3, #8
 80073be:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80073c2:	4313      	orrs	r3, r2
 80073c4:	604b      	str	r3, [r1, #4]
}
 80073c6:	bf00      	nop
 80073c8:	370c      	adds	r7, #12
 80073ca:	46bd      	mov	sp, r7
 80073cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073d0:	4770      	bx	lr

080073d2 <LL_RCC_SetSysClkSource>:
{
 80073d2:	b480      	push	{r7}
 80073d4:	b083      	sub	sp, #12
 80073d6:	af00      	add	r7, sp, #0
 80073d8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80073da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80073de:	689b      	ldr	r3, [r3, #8]
 80073e0:	f023 0203 	bic.w	r2, r3, #3
 80073e4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	4313      	orrs	r3, r2
 80073ec:	608b      	str	r3, [r1, #8]
}
 80073ee:	bf00      	nop
 80073f0:	370c      	adds	r7, #12
 80073f2:	46bd      	mov	sp, r7
 80073f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073f8:	4770      	bx	lr

080073fa <LL_RCC_GetSysClkSource>:
{
 80073fa:	b480      	push	{r7}
 80073fc:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80073fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007402:	689b      	ldr	r3, [r3, #8]
 8007404:	f003 030c 	and.w	r3, r3, #12
}
 8007408:	4618      	mov	r0, r3
 800740a:	46bd      	mov	sp, r7
 800740c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007410:	4770      	bx	lr

08007412 <LL_RCC_SetAHBPrescaler>:
{
 8007412:	b480      	push	{r7}
 8007414:	b083      	sub	sp, #12
 8007416:	af00      	add	r7, sp, #0
 8007418:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 800741a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800741e:	689b      	ldr	r3, [r3, #8]
 8007420:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007424:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	4313      	orrs	r3, r2
 800742c:	608b      	str	r3, [r1, #8]
}
 800742e:	bf00      	nop
 8007430:	370c      	adds	r7, #12
 8007432:	46bd      	mov	sp, r7
 8007434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007438:	4770      	bx	lr

0800743a <LL_C2_RCC_SetAHBPrescaler>:
{
 800743a:	b480      	push	{r7}
 800743c:	b083      	sub	sp, #12
 800743e:	af00      	add	r7, sp, #0
 8007440:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8007442:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007446:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800744a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800744e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	4313      	orrs	r3, r2
 8007456:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 800745a:	bf00      	nop
 800745c:	370c      	adds	r7, #12
 800745e:	46bd      	mov	sp, r7
 8007460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007464:	4770      	bx	lr

08007466 <LL_RCC_SetAHB4Prescaler>:
{
 8007466:	b480      	push	{r7}
 8007468:	b083      	sub	sp, #12
 800746a:	af00      	add	r7, sp, #0
 800746c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 800746e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007472:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8007476:	f023 020f 	bic.w	r2, r3, #15
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	091b      	lsrs	r3, r3, #4
 800747e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007482:	4313      	orrs	r3, r2
 8007484:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8007488:	bf00      	nop
 800748a:	370c      	adds	r7, #12
 800748c:	46bd      	mov	sp, r7
 800748e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007492:	4770      	bx	lr

08007494 <LL_RCC_SetAPB1Prescaler>:
{
 8007494:	b480      	push	{r7}
 8007496:	b083      	sub	sp, #12
 8007498:	af00      	add	r7, sp, #0
 800749a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 800749c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80074a0:	689b      	ldr	r3, [r3, #8]
 80074a2:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80074a6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	4313      	orrs	r3, r2
 80074ae:	608b      	str	r3, [r1, #8]
}
 80074b0:	bf00      	nop
 80074b2:	370c      	adds	r7, #12
 80074b4:	46bd      	mov	sp, r7
 80074b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ba:	4770      	bx	lr

080074bc <LL_RCC_SetAPB2Prescaler>:
{
 80074bc:	b480      	push	{r7}
 80074be:	b083      	sub	sp, #12
 80074c0:	af00      	add	r7, sp, #0
 80074c2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 80074c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80074c8:	689b      	ldr	r3, [r3, #8]
 80074ca:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80074ce:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	4313      	orrs	r3, r2
 80074d6:	608b      	str	r3, [r1, #8]
}
 80074d8:	bf00      	nop
 80074da:	370c      	adds	r7, #12
 80074dc:	46bd      	mov	sp, r7
 80074de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074e2:	4770      	bx	lr

080074e4 <LL_RCC_GetAHBPrescaler>:
{
 80074e4:	b480      	push	{r7}
 80074e6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 80074e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80074ec:	689b      	ldr	r3, [r3, #8]
 80074ee:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80074f2:	4618      	mov	r0, r3
 80074f4:	46bd      	mov	sp, r7
 80074f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074fa:	4770      	bx	lr

080074fc <LL_C2_RCC_GetAHBPrescaler>:
{
 80074fc:	b480      	push	{r7}
 80074fe:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE));
 8007500:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007504:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8007508:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 800750c:	4618      	mov	r0, r3
 800750e:	46bd      	mov	sp, r7
 8007510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007514:	4770      	bx	lr

08007516 <LL_RCC_GetAHB4Prescaler>:
{
 8007516:	b480      	push	{r7}
 8007518:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 800751a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800751e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8007522:	011b      	lsls	r3, r3, #4
 8007524:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8007528:	4618      	mov	r0, r3
 800752a:	46bd      	mov	sp, r7
 800752c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007530:	4770      	bx	lr

08007532 <LL_RCC_GetAPB1Prescaler>:
{
 8007532:	b480      	push	{r7}
 8007534:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8007536:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800753a:	689b      	ldr	r3, [r3, #8]
 800753c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8007540:	4618      	mov	r0, r3
 8007542:	46bd      	mov	sp, r7
 8007544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007548:	4770      	bx	lr

0800754a <LL_RCC_GetAPB2Prescaler>:
{
 800754a:	b480      	push	{r7}
 800754c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 800754e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007552:	689b      	ldr	r3, [r3, #8]
 8007554:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8007558:	4618      	mov	r0, r3
 800755a:	46bd      	mov	sp, r7
 800755c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007560:	4770      	bx	lr

08007562 <LL_RCC_PLL_Enable>:
{
 8007562:	b480      	push	{r7}
 8007564:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8007566:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007570:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007574:	6013      	str	r3, [r2, #0]
}
 8007576:	bf00      	nop
 8007578:	46bd      	mov	sp, r7
 800757a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800757e:	4770      	bx	lr

08007580 <LL_RCC_PLL_Disable>:
{
 8007580:	b480      	push	{r7}
 8007582:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8007584:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800758e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007592:	6013      	str	r3, [r2, #0]
}
 8007594:	bf00      	nop
 8007596:	46bd      	mov	sp, r7
 8007598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800759c:	4770      	bx	lr

0800759e <LL_RCC_PLL_IsReady>:
{
 800759e:	b480      	push	{r7}
 80075a0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 80075a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80075ac:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80075b0:	d101      	bne.n	80075b6 <LL_RCC_PLL_IsReady+0x18>
 80075b2:	2301      	movs	r3, #1
 80075b4:	e000      	b.n	80075b8 <LL_RCC_PLL_IsReady+0x1a>
 80075b6:	2300      	movs	r3, #0
}
 80075b8:	4618      	mov	r0, r3
 80075ba:	46bd      	mov	sp, r7
 80075bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075c0:	4770      	bx	lr

080075c2 <LL_RCC_PLL_GetN>:
{
 80075c2:	b480      	push	{r7}
 80075c4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 80075c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80075ca:	68db      	ldr	r3, [r3, #12]
 80075cc:	0a1b      	lsrs	r3, r3, #8
 80075ce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 80075d2:	4618      	mov	r0, r3
 80075d4:	46bd      	mov	sp, r7
 80075d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075da:	4770      	bx	lr

080075dc <LL_RCC_PLL_GetR>:
{
 80075dc:	b480      	push	{r7}
 80075de:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 80075e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80075e4:	68db      	ldr	r3, [r3, #12]
 80075e6:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 80075ea:	4618      	mov	r0, r3
 80075ec:	46bd      	mov	sp, r7
 80075ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075f2:	4770      	bx	lr

080075f4 <LL_RCC_PLL_GetDivider>:
{
 80075f4:	b480      	push	{r7}
 80075f6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 80075f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80075fc:	68db      	ldr	r3, [r3, #12]
 80075fe:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8007602:	4618      	mov	r0, r3
 8007604:	46bd      	mov	sp, r7
 8007606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800760a:	4770      	bx	lr

0800760c <LL_RCC_PLL_GetMainSource>:
{
 800760c:	b480      	push	{r7}
 800760e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8007610:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007614:	68db      	ldr	r3, [r3, #12]
 8007616:	f003 0303 	and.w	r3, r3, #3
}
 800761a:	4618      	mov	r0, r3
 800761c:	46bd      	mov	sp, r7
 800761e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007622:	4770      	bx	lr

08007624 <LL_RCC_IsActiveFlag_HPRE>:
{
 8007624:	b480      	push	{r7}
 8007626:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8007628:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800762c:	689b      	ldr	r3, [r3, #8]
 800762e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007632:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007636:	d101      	bne.n	800763c <LL_RCC_IsActiveFlag_HPRE+0x18>
 8007638:	2301      	movs	r3, #1
 800763a:	e000      	b.n	800763e <LL_RCC_IsActiveFlag_HPRE+0x1a>
 800763c:	2300      	movs	r3, #0
}
 800763e:	4618      	mov	r0, r3
 8007640:	46bd      	mov	sp, r7
 8007642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007646:	4770      	bx	lr

08007648 <LL_RCC_IsActiveFlag_C2HPRE>:
{
 8007648:	b480      	push	{r7}
 800764a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 800764c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007650:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8007654:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007658:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800765c:	d101      	bne.n	8007662 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 800765e:	2301      	movs	r3, #1
 8007660:	e000      	b.n	8007664 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8007662:	2300      	movs	r3, #0
}
 8007664:	4618      	mov	r0, r3
 8007666:	46bd      	mov	sp, r7
 8007668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800766c:	4770      	bx	lr

0800766e <LL_RCC_IsActiveFlag_SHDHPRE>:
{
 800766e:	b480      	push	{r7}
 8007670:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8007672:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007676:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800767a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800767e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007682:	d101      	bne.n	8007688 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8007684:	2301      	movs	r3, #1
 8007686:	e000      	b.n	800768a <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8007688:	2300      	movs	r3, #0
}
 800768a:	4618      	mov	r0, r3
 800768c:	46bd      	mov	sp, r7
 800768e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007692:	4770      	bx	lr

08007694 <LL_RCC_IsActiveFlag_PPRE1>:
{
 8007694:	b480      	push	{r7}
 8007696:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8007698:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800769c:	689b      	ldr	r3, [r3, #8]
 800769e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80076a2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80076a6:	d101      	bne.n	80076ac <LL_RCC_IsActiveFlag_PPRE1+0x18>
 80076a8:	2301      	movs	r3, #1
 80076aa:	e000      	b.n	80076ae <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 80076ac:	2300      	movs	r3, #0
}
 80076ae:	4618      	mov	r0, r3
 80076b0:	46bd      	mov	sp, r7
 80076b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076b6:	4770      	bx	lr

080076b8 <LL_RCC_IsActiveFlag_PPRE2>:
{
 80076b8:	b480      	push	{r7}
 80076ba:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 80076bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80076c0:	689b      	ldr	r3, [r3, #8]
 80076c2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80076c6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80076ca:	d101      	bne.n	80076d0 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 80076cc:	2301      	movs	r3, #1
 80076ce:	e000      	b.n	80076d2 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 80076d0:	2300      	movs	r3, #0
}
 80076d2:	4618      	mov	r0, r3
 80076d4:	46bd      	mov	sp, r7
 80076d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076da:	4770      	bx	lr

080076dc <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80076dc:	b590      	push	{r4, r7, lr}
 80076de:	b08d      	sub	sp, #52	; 0x34
 80076e0:	af00      	add	r7, sp, #0
 80076e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d101      	bne.n	80076ee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80076ea:	2301      	movs	r3, #1
 80076ec:	e37e      	b.n	8007dec <HAL_RCC_OscConfig+0x710>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	f003 0320 	and.w	r3, r3, #32
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	f000 8092 	beq.w	8007820 <HAL_RCC_OscConfig+0x144>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80076fc:	f7ff fe7d 	bl	80073fa <LL_RCC_GetSysClkSource>
 8007700:	62f8      	str	r0, [r7, #44]	; 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007702:	f7ff ff83 	bl	800760c <LL_RCC_PLL_GetMainSource>
 8007706:	62b8      	str	r0, [r7, #40]	; 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8007708:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800770a:	2b00      	cmp	r3, #0
 800770c:	d005      	beq.n	800771a <HAL_RCC_OscConfig+0x3e>
 800770e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007710:	2b0c      	cmp	r3, #12
 8007712:	d14c      	bne.n	80077ae <HAL_RCC_OscConfig+0xd2>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 8007714:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007716:	2b01      	cmp	r3, #1
 8007718:	d149      	bne.n	80077ae <HAL_RCC_OscConfig+0xd2>
    {
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800771a:	f7ff fe0b 	bl	8007334 <LL_RCC_MSI_IsReady>
 800771e:	4603      	mov	r3, r0
 8007720:	2b00      	cmp	r3, #0
 8007722:	d005      	beq.n	8007730 <HAL_RCC_OscConfig+0x54>
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	69db      	ldr	r3, [r3, #28]
 8007728:	2b00      	cmp	r3, #0
 800772a:	d101      	bne.n	8007730 <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 800772c:	2301      	movs	r3, #1
 800772e:	e35d      	b.n	8007dec <HAL_RCC_OscConfig+0x710>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8007734:	f7ff fe23 	bl	800737e <LL_RCC_MSI_GetRange>
 8007738:	4603      	mov	r3, r0
 800773a:	429c      	cmp	r4, r3
 800773c:	d914      	bls.n	8007768 <HAL_RCC_OscConfig+0x8c>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007742:	4618      	mov	r0, r3
 8007744:	f000 fd5c 	bl	8008200 <RCC_SetFlashLatencyFromMSIRange>
 8007748:	4603      	mov	r3, r0
 800774a:	2b00      	cmp	r3, #0
 800774c:	d001      	beq.n	8007752 <HAL_RCC_OscConfig+0x76>
          {
            return HAL_ERROR;
 800774e:	2301      	movs	r3, #1
 8007750:	e34c      	b.n	8007dec <HAL_RCC_OscConfig+0x710>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007756:	4618      	mov	r0, r3
 8007758:	f7ff fdfd 	bl	8007356 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	6a1b      	ldr	r3, [r3, #32]
 8007760:	4618      	mov	r0, r3
 8007762:	f7ff fe21 	bl	80073a8 <LL_RCC_MSI_SetCalibTrimming>
 8007766:	e013      	b.n	8007790 <HAL_RCC_OscConfig+0xb4>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800776c:	4618      	mov	r0, r3
 800776e:	f7ff fdf2 	bl	8007356 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	6a1b      	ldr	r3, [r3, #32]
 8007776:	4618      	mov	r0, r3
 8007778:	f7ff fe16 	bl	80073a8 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007780:	4618      	mov	r0, r3
 8007782:	f000 fd3d 	bl	8008200 <RCC_SetFlashLatencyFromMSIRange>
 8007786:	4603      	mov	r3, r0
 8007788:	2b00      	cmp	r3, #0
 800778a:	d001      	beq.n	8007790 <HAL_RCC_OscConfig+0xb4>
          {
            return HAL_ERROR;
 800778c:	2301      	movs	r3, #1
 800778e:	e32d      	b.n	8007dec <HAL_RCC_OscConfig+0x710>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8007790:	f000 fcda 	bl	8008148 <HAL_RCC_GetHCLKFreq>
 8007794:	4602      	mov	r2, r0
 8007796:	4bb3      	ldr	r3, [pc, #716]	; (8007a64 <HAL_RCC_OscConfig+0x388>)
 8007798:	601a      	str	r2, [r3, #0]
        
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800779a:	4bb3      	ldr	r3, [pc, #716]	; (8007a68 <HAL_RCC_OscConfig+0x38c>)
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	4618      	mov	r0, r3
 80077a0:	f7fe f852 	bl	8005848 <HAL_InitTick>
 80077a4:	4603      	mov	r3, r0
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	d039      	beq.n	800781e <HAL_RCC_OscConfig+0x142>
        {
          return HAL_ERROR;
 80077aa:	2301      	movs	r3, #1
 80077ac:	e31e      	b.n	8007dec <HAL_RCC_OscConfig+0x710>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	69db      	ldr	r3, [r3, #28]
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d01e      	beq.n	80077f4 <HAL_RCC_OscConfig+0x118>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80077b6:	f7ff fd9f 	bl	80072f8 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 80077ba:	f7fe fa15 	bl	8005be8 <HAL_GetTick>
 80077be:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 80077c0:	e008      	b.n	80077d4 <HAL_RCC_OscConfig+0xf8>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80077c2:	f7fe fa11 	bl	8005be8 <HAL_GetTick>
 80077c6:	4602      	mov	r2, r0
 80077c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077ca:	1ad3      	subs	r3, r2, r3
 80077cc:	2b02      	cmp	r3, #2
 80077ce:	d901      	bls.n	80077d4 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 80077d0:	2303      	movs	r3, #3
 80077d2:	e30b      	b.n	8007dec <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_MSI_IsReady() == 0U)
 80077d4:	f7ff fdae 	bl	8007334 <LL_RCC_MSI_IsReady>
 80077d8:	4603      	mov	r3, r0
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d0f1      	beq.n	80077c2 <HAL_RCC_OscConfig+0xe6>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077e2:	4618      	mov	r0, r3
 80077e4:	f7ff fdb7 	bl	8007356 <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	6a1b      	ldr	r3, [r3, #32]
 80077ec:	4618      	mov	r0, r3
 80077ee:	f7ff fddb 	bl	80073a8 <LL_RCC_MSI_SetCalibTrimming>
 80077f2:	e015      	b.n	8007820 <HAL_RCC_OscConfig+0x144>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80077f4:	f7ff fd8f 	bl	8007316 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 80077f8:	f7fe f9f6 	bl	8005be8 <HAL_GetTick>
 80077fc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 80077fe:	e008      	b.n	8007812 <HAL_RCC_OscConfig+0x136>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8007800:	f7fe f9f2 	bl	8005be8 <HAL_GetTick>
 8007804:	4602      	mov	r2, r0
 8007806:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007808:	1ad3      	subs	r3, r2, r3
 800780a:	2b02      	cmp	r3, #2
 800780c:	d901      	bls.n	8007812 <HAL_RCC_OscConfig+0x136>
          {
            return HAL_TIMEOUT;
 800780e:	2303      	movs	r3, #3
 8007810:	e2ec      	b.n	8007dec <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_MSI_IsReady() != 0U)
 8007812:	f7ff fd8f 	bl	8007334 <LL_RCC_MSI_IsReady>
 8007816:	4603      	mov	r3, r0
 8007818:	2b00      	cmp	r3, #0
 800781a:	d1f1      	bne.n	8007800 <HAL_RCC_OscConfig+0x124>
 800781c:	e000      	b.n	8007820 <HAL_RCC_OscConfig+0x144>
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800781e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	f003 0301 	and.w	r3, r3, #1
 8007828:	2b00      	cmp	r3, #0
 800782a:	d04e      	beq.n	80078ca <HAL_RCC_OscConfig+0x1ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800782c:	f7ff fde5 	bl	80073fa <LL_RCC_GetSysClkSource>
 8007830:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007832:	f7ff feeb 	bl	800760c <LL_RCC_PLL_GetMainSource>
 8007836:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8007838:	6a3b      	ldr	r3, [r7, #32]
 800783a:	2b08      	cmp	r3, #8
 800783c:	d005      	beq.n	800784a <HAL_RCC_OscConfig+0x16e>
 800783e:	6a3b      	ldr	r3, [r7, #32]
 8007840:	2b0c      	cmp	r3, #12
 8007842:	d10d      	bne.n	8007860 <HAL_RCC_OscConfig+0x184>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 8007844:	69fb      	ldr	r3, [r7, #28]
 8007846:	2b03      	cmp	r3, #3
 8007848:	d10a      	bne.n	8007860 <HAL_RCC_OscConfig+0x184>
    {
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800784a:	f7ff fbf5 	bl	8007038 <LL_RCC_HSE_IsReady>
 800784e:	4603      	mov	r3, r0
 8007850:	2b00      	cmp	r3, #0
 8007852:	d039      	beq.n	80078c8 <HAL_RCC_OscConfig+0x1ec>
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	685b      	ldr	r3, [r3, #4]
 8007858:	2b00      	cmp	r3, #0
 800785a:	d135      	bne.n	80078c8 <HAL_RCC_OscConfig+0x1ec>
      {
        return HAL_ERROR;
 800785c:	2301      	movs	r3, #1
 800785e:	e2c5      	b.n	8007dec <HAL_RCC_OscConfig+0x710>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	685b      	ldr	r3, [r3, #4]
 8007864:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007868:	d102      	bne.n	8007870 <HAL_RCC_OscConfig+0x194>
 800786a:	f7ff fbc7 	bl	8006ffc <LL_RCC_HSE_Enable>
 800786e:	e001      	b.n	8007874 <HAL_RCC_OscConfig+0x198>
 8007870:	f7ff fbd3 	bl	800701a <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	685b      	ldr	r3, [r3, #4]
 8007878:	2b00      	cmp	r3, #0
 800787a:	d012      	beq.n	80078a2 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800787c:	f7fe f9b4 	bl	8005be8 <HAL_GetTick>
 8007880:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8007882:	e008      	b.n	8007896 <HAL_RCC_OscConfig+0x1ba>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007884:	f7fe f9b0 	bl	8005be8 <HAL_GetTick>
 8007888:	4602      	mov	r2, r0
 800788a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800788c:	1ad3      	subs	r3, r2, r3
 800788e:	2b64      	cmp	r3, #100	; 0x64
 8007890:	d901      	bls.n	8007896 <HAL_RCC_OscConfig+0x1ba>
          {
            return HAL_TIMEOUT;
 8007892:	2303      	movs	r3, #3
 8007894:	e2aa      	b.n	8007dec <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_HSE_IsReady() == 0U)
 8007896:	f7ff fbcf 	bl	8007038 <LL_RCC_HSE_IsReady>
 800789a:	4603      	mov	r3, r0
 800789c:	2b00      	cmp	r3, #0
 800789e:	d0f1      	beq.n	8007884 <HAL_RCC_OscConfig+0x1a8>
 80078a0:	e013      	b.n	80078ca <HAL_RCC_OscConfig+0x1ee>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80078a2:	f7fe f9a1 	bl	8005be8 <HAL_GetTick>
 80078a6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 80078a8:	e008      	b.n	80078bc <HAL_RCC_OscConfig+0x1e0>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80078aa:	f7fe f99d 	bl	8005be8 <HAL_GetTick>
 80078ae:	4602      	mov	r2, r0
 80078b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078b2:	1ad3      	subs	r3, r2, r3
 80078b4:	2b64      	cmp	r3, #100	; 0x64
 80078b6:	d901      	bls.n	80078bc <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 80078b8:	2303      	movs	r3, #3
 80078ba:	e297      	b.n	8007dec <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_HSE_IsReady() != 0U)
 80078bc:	f7ff fbbc 	bl	8007038 <LL_RCC_HSE_IsReady>
 80078c0:	4603      	mov	r3, r0
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	d1f1      	bne.n	80078aa <HAL_RCC_OscConfig+0x1ce>
 80078c6:	e000      	b.n	80078ca <HAL_RCC_OscConfig+0x1ee>
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80078c8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	f003 0302 	and.w	r3, r3, #2
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	d051      	beq.n	800797a <HAL_RCC_OscConfig+0x29e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80078d6:	f7ff fd90 	bl	80073fa <LL_RCC_GetSysClkSource>
 80078da:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 80078dc:	f7ff fe96 	bl	800760c <LL_RCC_PLL_GetMainSource>
 80078e0:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 80078e2:	69bb      	ldr	r3, [r7, #24]
 80078e4:	2b04      	cmp	r3, #4
 80078e6:	d005      	beq.n	80078f4 <HAL_RCC_OscConfig+0x218>
 80078e8:	69bb      	ldr	r3, [r7, #24]
 80078ea:	2b0c      	cmp	r3, #12
 80078ec:	d113      	bne.n	8007916 <HAL_RCC_OscConfig+0x23a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 80078ee:	697b      	ldr	r3, [r7, #20]
 80078f0:	2b02      	cmp	r3, #2
 80078f2:	d110      	bne.n	8007916 <HAL_RCC_OscConfig+0x23a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80078f4:	f7ff fbd0 	bl	8007098 <LL_RCC_HSI_IsReady>
 80078f8:	4603      	mov	r3, r0
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	d005      	beq.n	800790a <HAL_RCC_OscConfig+0x22e>
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	68db      	ldr	r3, [r3, #12]
 8007902:	2b00      	cmp	r3, #0
 8007904:	d101      	bne.n	800790a <HAL_RCC_OscConfig+0x22e>
      {
        return HAL_ERROR;
 8007906:	2301      	movs	r3, #1
 8007908:	e270      	b.n	8007dec <HAL_RCC_OscConfig+0x710>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	691b      	ldr	r3, [r3, #16]
 800790e:	4618      	mov	r0, r3
 8007910:	f7ff fbd4 	bl	80070bc <LL_RCC_HSI_SetCalibTrimming>
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007914:	e031      	b.n	800797a <HAL_RCC_OscConfig+0x29e>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	68db      	ldr	r3, [r3, #12]
 800791a:	2b00      	cmp	r3, #0
 800791c:	d019      	beq.n	8007952 <HAL_RCC_OscConfig+0x276>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800791e:	f7ff fb9d 	bl	800705c <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007922:	f7fe f961 	bl	8005be8 <HAL_GetTick>
 8007926:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8007928:	e008      	b.n	800793c <HAL_RCC_OscConfig+0x260>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800792a:	f7fe f95d 	bl	8005be8 <HAL_GetTick>
 800792e:	4602      	mov	r2, r0
 8007930:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007932:	1ad3      	subs	r3, r2, r3
 8007934:	2b02      	cmp	r3, #2
 8007936:	d901      	bls.n	800793c <HAL_RCC_OscConfig+0x260>
          {
            return HAL_TIMEOUT;
 8007938:	2303      	movs	r3, #3
 800793a:	e257      	b.n	8007dec <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_HSI_IsReady() == 0U)
 800793c:	f7ff fbac 	bl	8007098 <LL_RCC_HSI_IsReady>
 8007940:	4603      	mov	r3, r0
 8007942:	2b00      	cmp	r3, #0
 8007944:	d0f1      	beq.n	800792a <HAL_RCC_OscConfig+0x24e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	691b      	ldr	r3, [r3, #16]
 800794a:	4618      	mov	r0, r3
 800794c:	f7ff fbb6 	bl	80070bc <LL_RCC_HSI_SetCalibTrimming>
 8007950:	e013      	b.n	800797a <HAL_RCC_OscConfig+0x29e>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007952:	f7ff fb92 	bl	800707a <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007956:	f7fe f947 	bl	8005be8 <HAL_GetTick>
 800795a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 800795c:	e008      	b.n	8007970 <HAL_RCC_OscConfig+0x294>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800795e:	f7fe f943 	bl	8005be8 <HAL_GetTick>
 8007962:	4602      	mov	r2, r0
 8007964:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007966:	1ad3      	subs	r3, r2, r3
 8007968:	2b02      	cmp	r3, #2
 800796a:	d901      	bls.n	8007970 <HAL_RCC_OscConfig+0x294>
          {
            return HAL_TIMEOUT;
 800796c:	2303      	movs	r3, #3
 800796e:	e23d      	b.n	8007dec <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_HSI_IsReady() != 0U)
 8007970:	f7ff fb92 	bl	8007098 <LL_RCC_HSI_IsReady>
 8007974:	4603      	mov	r3, r0
 8007976:	2b00      	cmp	r3, #0
 8007978:	d1f1      	bne.n	800795e <HAL_RCC_OscConfig+0x282>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	f003 0308 	and.w	r3, r3, #8
 8007982:	2b00      	cmp	r3, #0
 8007984:	d106      	bne.n	8007994 <HAL_RCC_OscConfig+0x2b8>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 800798e:	2b00      	cmp	r3, #0
 8007990:	f000 80a3 	beq.w	8007ada <HAL_RCC_OscConfig+0x3fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	695b      	ldr	r3, [r3, #20]
 8007998:	2b00      	cmp	r3, #0
 800799a:	d076      	beq.n	8007a8a <HAL_RCC_OscConfig+0x3ae>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	f003 0310 	and.w	r3, r3, #16
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	d046      	beq.n	8007a36 <HAL_RCC_OscConfig+0x35a>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 80079a8:	f7ff fc49 	bl	800723e <LL_RCC_LSI1_IsReady>
 80079ac:	4603      	mov	r3, r0
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	d113      	bne.n	80079da <HAL_RCC_OscConfig+0x2fe>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 80079b2:	f7ff fc22 	bl	80071fa <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80079b6:	f7fe f917 	bl	8005be8 <HAL_GetTick>
 80079ba:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 80079bc:	e008      	b.n	80079d0 <HAL_RCC_OscConfig+0x2f4>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80079be:	f7fe f913 	bl	8005be8 <HAL_GetTick>
 80079c2:	4602      	mov	r2, r0
 80079c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079c6:	1ad3      	subs	r3, r2, r3
 80079c8:	2b02      	cmp	r3, #2
 80079ca:	d901      	bls.n	80079d0 <HAL_RCC_OscConfig+0x2f4>
            {
              return HAL_TIMEOUT;
 80079cc:	2303      	movs	r3, #3
 80079ce:	e20d      	b.n	8007dec <HAL_RCC_OscConfig+0x710>
          while (LL_RCC_LSI1_IsReady() == 0U)
 80079d0:	f7ff fc35 	bl	800723e <LL_RCC_LSI1_IsReady>
 80079d4:	4603      	mov	r3, r0
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	d0f1      	beq.n	80079be <HAL_RCC_OscConfig+0x2e2>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 80079da:	f7ff fc42 	bl	8007262 <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80079de:	f7fe f903 	bl	8005be8 <HAL_GetTick>
 80079e2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 80079e4:	e008      	b.n	80079f8 <HAL_RCC_OscConfig+0x31c>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80079e6:	f7fe f8ff 	bl	8005be8 <HAL_GetTick>
 80079ea:	4602      	mov	r2, r0
 80079ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079ee:	1ad3      	subs	r3, r2, r3
 80079f0:	2b03      	cmp	r3, #3
 80079f2:	d901      	bls.n	80079f8 <HAL_RCC_OscConfig+0x31c>
          {
            return HAL_TIMEOUT;
 80079f4:	2303      	movs	r3, #3
 80079f6:	e1f9      	b.n	8007dec <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_LSI2_IsReady() == 0U)
 80079f8:	f7ff fc55 	bl	80072a6 <LL_RCC_LSI2_IsReady>
 80079fc:	4603      	mov	r3, r0
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	d0f1      	beq.n	80079e6 <HAL_RCC_OscConfig+0x30a>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	699b      	ldr	r3, [r3, #24]
 8007a06:	4618      	mov	r0, r3
 8007a08:	f7ff fc5f 	bl	80072ca <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 8007a0c:	f7ff fc06 	bl	800721c <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007a10:	f7fe f8ea 	bl	8005be8 <HAL_GetTick>
 8007a14:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 8007a16:	e008      	b.n	8007a2a <HAL_RCC_OscConfig+0x34e>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8007a18:	f7fe f8e6 	bl	8005be8 <HAL_GetTick>
 8007a1c:	4602      	mov	r2, r0
 8007a1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a20:	1ad3      	subs	r3, r2, r3
 8007a22:	2b02      	cmp	r3, #2
 8007a24:	d901      	bls.n	8007a2a <HAL_RCC_OscConfig+0x34e>
          {
            return HAL_TIMEOUT;
 8007a26:	2303      	movs	r3, #3
 8007a28:	e1e0      	b.n	8007dec <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_LSI1_IsReady() != 0U)
 8007a2a:	f7ff fc08 	bl	800723e <LL_RCC_LSI1_IsReady>
 8007a2e:	4603      	mov	r3, r0
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	d1f1      	bne.n	8007a18 <HAL_RCC_OscConfig+0x33c>
 8007a34:	e051      	b.n	8007ada <HAL_RCC_OscConfig+0x3fe>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 8007a36:	f7ff fbe0 	bl	80071fa <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007a3a:	f7fe f8d5 	bl	8005be8 <HAL_GetTick>
 8007a3e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 8007a40:	e008      	b.n	8007a54 <HAL_RCC_OscConfig+0x378>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8007a42:	f7fe f8d1 	bl	8005be8 <HAL_GetTick>
 8007a46:	4602      	mov	r2, r0
 8007a48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a4a:	1ad3      	subs	r3, r2, r3
 8007a4c:	2b02      	cmp	r3, #2
 8007a4e:	d901      	bls.n	8007a54 <HAL_RCC_OscConfig+0x378>
          {
            return HAL_TIMEOUT;
 8007a50:	2303      	movs	r3, #3
 8007a52:	e1cb      	b.n	8007dec <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_LSI1_IsReady() == 0U)
 8007a54:	f7ff fbf3 	bl	800723e <LL_RCC_LSI1_IsReady>
 8007a58:	4603      	mov	r3, r0
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	d0f1      	beq.n	8007a42 <HAL_RCC_OscConfig+0x366>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 8007a5e:	f7ff fc11 	bl	8007284 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 8007a62:	e00c      	b.n	8007a7e <HAL_RCC_OscConfig+0x3a2>
 8007a64:	20000014 	.word	0x20000014
 8007a68:	20000018 	.word	0x20000018
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8007a6c:	f7fe f8bc 	bl	8005be8 <HAL_GetTick>
 8007a70:	4602      	mov	r2, r0
 8007a72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a74:	1ad3      	subs	r3, r2, r3
 8007a76:	2b03      	cmp	r3, #3
 8007a78:	d901      	bls.n	8007a7e <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8007a7a:	2303      	movs	r3, #3
 8007a7c:	e1b6      	b.n	8007dec <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_LSI2_IsReady() != 0U)
 8007a7e:	f7ff fc12 	bl	80072a6 <LL_RCC_LSI2_IsReady>
 8007a82:	4603      	mov	r3, r0
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	d1f1      	bne.n	8007a6c <HAL_RCC_OscConfig+0x390>
 8007a88:	e027      	b.n	8007ada <HAL_RCC_OscConfig+0x3fe>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 8007a8a:	f7ff fbfb 	bl	8007284 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007a8e:	f7fe f8ab 	bl	8005be8 <HAL_GetTick>
 8007a92:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 8007a94:	e008      	b.n	8007aa8 <HAL_RCC_OscConfig+0x3cc>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8007a96:	f7fe f8a7 	bl	8005be8 <HAL_GetTick>
 8007a9a:	4602      	mov	r2, r0
 8007a9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a9e:	1ad3      	subs	r3, r2, r3
 8007aa0:	2b03      	cmp	r3, #3
 8007aa2:	d901      	bls.n	8007aa8 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8007aa4:	2303      	movs	r3, #3
 8007aa6:	e1a1      	b.n	8007dec <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_LSI2_IsReady() != 0U)
 8007aa8:	f7ff fbfd 	bl	80072a6 <LL_RCC_LSI2_IsReady>
 8007aac:	4603      	mov	r3, r0
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	d1f1      	bne.n	8007a96 <HAL_RCC_OscConfig+0x3ba>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 8007ab2:	f7ff fbb3 	bl	800721c <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007ab6:	f7fe f897 	bl	8005be8 <HAL_GetTick>
 8007aba:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 8007abc:	e008      	b.n	8007ad0 <HAL_RCC_OscConfig+0x3f4>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8007abe:	f7fe f893 	bl	8005be8 <HAL_GetTick>
 8007ac2:	4602      	mov	r2, r0
 8007ac4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ac6:	1ad3      	subs	r3, r2, r3
 8007ac8:	2b02      	cmp	r3, #2
 8007aca:	d901      	bls.n	8007ad0 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8007acc:	2303      	movs	r3, #3
 8007ace:	e18d      	b.n	8007dec <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_LSI1_IsReady() != 0U)
 8007ad0:	f7ff fbb5 	bl	800723e <LL_RCC_LSI1_IsReady>
 8007ad4:	4603      	mov	r3, r0
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	d1f1      	bne.n	8007abe <HAL_RCC_OscConfig+0x3e2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	f003 0304 	and.w	r3, r3, #4
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	d05b      	beq.n	8007b9e <HAL_RCC_OscConfig+0x4c2>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007ae6:	4bb5      	ldr	r3, [pc, #724]	; (8007dbc <HAL_RCC_OscConfig+0x6e0>)
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	d114      	bne.n	8007b1c <HAL_RCC_OscConfig+0x440>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8007af2:	f7ff fa53 	bl	8006f9c <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007af6:	f7fe f877 	bl	8005be8 <HAL_GetTick>
 8007afa:	6278      	str	r0, [r7, #36]	; 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007afc:	e008      	b.n	8007b10 <HAL_RCC_OscConfig+0x434>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007afe:	f7fe f873 	bl	8005be8 <HAL_GetTick>
 8007b02:	4602      	mov	r2, r0
 8007b04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b06:	1ad3      	subs	r3, r2, r3
 8007b08:	2b02      	cmp	r3, #2
 8007b0a:	d901      	bls.n	8007b10 <HAL_RCC_OscConfig+0x434>
        {
          return HAL_TIMEOUT;
 8007b0c:	2303      	movs	r3, #3
 8007b0e:	e16d      	b.n	8007dec <HAL_RCC_OscConfig+0x710>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007b10:	4baa      	ldr	r3, [pc, #680]	; (8007dbc <HAL_RCC_OscConfig+0x6e0>)
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	d0f0      	beq.n	8007afe <HAL_RCC_OscConfig+0x422>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	689b      	ldr	r3, [r3, #8]
 8007b20:	2b01      	cmp	r3, #1
 8007b22:	d102      	bne.n	8007b2a <HAL_RCC_OscConfig+0x44e>
 8007b24:	f7ff fb13 	bl	800714e <LL_RCC_LSE_Enable>
 8007b28:	e00c      	b.n	8007b44 <HAL_RCC_OscConfig+0x468>
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	689b      	ldr	r3, [r3, #8]
 8007b2e:	2b05      	cmp	r3, #5
 8007b30:	d104      	bne.n	8007b3c <HAL_RCC_OscConfig+0x460>
 8007b32:	f7ff fb2e 	bl	8007192 <LL_RCC_LSE_EnableBypass>
 8007b36:	f7ff fb0a 	bl	800714e <LL_RCC_LSE_Enable>
 8007b3a:	e003      	b.n	8007b44 <HAL_RCC_OscConfig+0x468>
 8007b3c:	f7ff fb18 	bl	8007170 <LL_RCC_LSE_Disable>
 8007b40:	f7ff fb38 	bl	80071b4 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	689b      	ldr	r3, [r3, #8]
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	d014      	beq.n	8007b76 <HAL_RCC_OscConfig+0x49a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007b4c:	f7fe f84c 	bl	8005be8 <HAL_GetTick>
 8007b50:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8007b52:	e00a      	b.n	8007b6a <HAL_RCC_OscConfig+0x48e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007b54:	f7fe f848 	bl	8005be8 <HAL_GetTick>
 8007b58:	4602      	mov	r2, r0
 8007b5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b5c:	1ad3      	subs	r3, r2, r3
 8007b5e:	f241 3288 	movw	r2, #5000	; 0x1388
 8007b62:	4293      	cmp	r3, r2
 8007b64:	d901      	bls.n	8007b6a <HAL_RCC_OscConfig+0x48e>
        {
          return HAL_TIMEOUT;
 8007b66:	2303      	movs	r3, #3
 8007b68:	e140      	b.n	8007dec <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_LSE_IsReady() == 0U)
 8007b6a:	f7ff fb34 	bl	80071d6 <LL_RCC_LSE_IsReady>
 8007b6e:	4603      	mov	r3, r0
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	d0ef      	beq.n	8007b54 <HAL_RCC_OscConfig+0x478>
 8007b74:	e013      	b.n	8007b9e <HAL_RCC_OscConfig+0x4c2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007b76:	f7fe f837 	bl	8005be8 <HAL_GetTick>
 8007b7a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8007b7c:	e00a      	b.n	8007b94 <HAL_RCC_OscConfig+0x4b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007b7e:	f7fe f833 	bl	8005be8 <HAL_GetTick>
 8007b82:	4602      	mov	r2, r0
 8007b84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b86:	1ad3      	subs	r3, r2, r3
 8007b88:	f241 3288 	movw	r2, #5000	; 0x1388
 8007b8c:	4293      	cmp	r3, r2
 8007b8e:	d901      	bls.n	8007b94 <HAL_RCC_OscConfig+0x4b8>
        {
          return HAL_TIMEOUT;
 8007b90:	2303      	movs	r3, #3
 8007b92:	e12b      	b.n	8007dec <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_LSE_IsReady() != 0U)
 8007b94:	f7ff fb1f 	bl	80071d6 <LL_RCC_LSE_IsReady>
 8007b98:	4603      	mov	r3, r0
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	d1ef      	bne.n	8007b7e <HAL_RCC_OscConfig+0x4a2>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d02c      	beq.n	8007c04 <HAL_RCC_OscConfig+0x528>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	d014      	beq.n	8007bdc <HAL_RCC_OscConfig+0x500>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8007bb2:	f7ff fa98 	bl	80070e6 <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007bb6:	f7fe f817 	bl	8005be8 <HAL_GetTick>
 8007bba:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 8007bbc:	e008      	b.n	8007bd0 <HAL_RCC_OscConfig+0x4f4>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007bbe:	f7fe f813 	bl	8005be8 <HAL_GetTick>
 8007bc2:	4602      	mov	r2, r0
 8007bc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bc6:	1ad3      	subs	r3, r2, r3
 8007bc8:	2b02      	cmp	r3, #2
 8007bca:	d901      	bls.n	8007bd0 <HAL_RCC_OscConfig+0x4f4>
        {
          return HAL_TIMEOUT;
 8007bcc:	2303      	movs	r3, #3
 8007bce:	e10d      	b.n	8007dec <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_HSI48_IsReady() == 0U)
 8007bd0:	f7ff faab 	bl	800712a <LL_RCC_HSI48_IsReady>
 8007bd4:	4603      	mov	r3, r0
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d0f1      	beq.n	8007bbe <HAL_RCC_OscConfig+0x4e2>
 8007bda:	e013      	b.n	8007c04 <HAL_RCC_OscConfig+0x528>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8007bdc:	f7ff fa94 	bl	8007108 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007be0:	f7fe f802 	bl	8005be8 <HAL_GetTick>
 8007be4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 8007be6:	e008      	b.n	8007bfa <HAL_RCC_OscConfig+0x51e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007be8:	f7fd fffe 	bl	8005be8 <HAL_GetTick>
 8007bec:	4602      	mov	r2, r0
 8007bee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bf0:	1ad3      	subs	r3, r2, r3
 8007bf2:	2b02      	cmp	r3, #2
 8007bf4:	d901      	bls.n	8007bfa <HAL_RCC_OscConfig+0x51e>
        {
          return HAL_TIMEOUT;
 8007bf6:	2303      	movs	r3, #3
 8007bf8:	e0f8      	b.n	8007dec <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_HSI48_IsReady() != 0U)
 8007bfa:	f7ff fa96 	bl	800712a <LL_RCC_HSI48_IsReady>
 8007bfe:	4603      	mov	r3, r0
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	d1f1      	bne.n	8007be8 <HAL_RCC_OscConfig+0x50c>
#endif
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	f000 80ee 	beq.w	8007dea <HAL_RCC_OscConfig+0x70e>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007c0e:	f7ff fbf4 	bl	80073fa <LL_RCC_GetSysClkSource>
 8007c12:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 8007c14:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007c18:	68db      	ldr	r3, [r3, #12]
 8007c1a:	60fb      	str	r3, [r7, #12]
    
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c20:	2b02      	cmp	r3, #2
 8007c22:	f040 80af 	bne.w	8007d84 <HAL_RCC_OscConfig+0x6a8>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
      
      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007c26:	68fb      	ldr	r3, [r7, #12]
 8007c28:	f003 0203 	and.w	r2, r3, #3
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c30:	429a      	cmp	r2, r3
 8007c32:	d123      	bne.n	8007c7c <HAL_RCC_OscConfig+0x5a0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8007c34:	68fb      	ldr	r3, [r7, #12]
 8007c36:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007c3e:	429a      	cmp	r2, r3
 8007c40:	d11c      	bne.n	8007c7c <HAL_RCC_OscConfig+0x5a0>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	0a1b      	lsrs	r3, r3, #8
 8007c46:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8007c4e:	429a      	cmp	r2, r3
 8007c50:	d114      	bne.n	8007c7c <HAL_RCC_OscConfig+0x5a0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8007c5c:	429a      	cmp	r2, r3
 8007c5e:	d10d      	bne.n	8007c7c <HAL_RCC_OscConfig+0x5a0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8007c6a:	429a      	cmp	r2, r3
 8007c6c:	d106      	bne.n	8007c7c <HAL_RCC_OscConfig+0x5a0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8007c78:	429a      	cmp	r2, r3
 8007c7a:	d05d      	beq.n	8007d38 <HAL_RCC_OscConfig+0x65c>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007c7c:	693b      	ldr	r3, [r7, #16]
 8007c7e:	2b0c      	cmp	r3, #12
 8007c80:	d058      	beq.n	8007d34 <HAL_RCC_OscConfig+0x658>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8007c82:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	d001      	beq.n	8007c94 <HAL_RCC_OscConfig+0x5b8>

          {
            return HAL_ERROR;
 8007c90:	2301      	movs	r3, #1
 8007c92:	e0ab      	b.n	8007dec <HAL_RCC_OscConfig+0x710>
          }
          else
#endif
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8007c94:	f7ff fc74 	bl	8007580 <LL_RCC_PLL_Disable>
            
            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8007c98:	f7fd ffa6 	bl	8005be8 <HAL_GetTick>
 8007c9c:	6278      	str	r0, [r7, #36]	; 0x24
            
            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007c9e:	e008      	b.n	8007cb2 <HAL_RCC_OscConfig+0x5d6>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007ca0:	f7fd ffa2 	bl	8005be8 <HAL_GetTick>
 8007ca4:	4602      	mov	r2, r0
 8007ca6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ca8:	1ad3      	subs	r3, r2, r3
 8007caa:	2b02      	cmp	r3, #2
 8007cac:	d901      	bls.n	8007cb2 <HAL_RCC_OscConfig+0x5d6>
              {
                return HAL_TIMEOUT;
 8007cae:	2303      	movs	r3, #3
 8007cb0:	e09c      	b.n	8007dec <HAL_RCC_OscConfig+0x710>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007cb2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	d1ef      	bne.n	8007ca0 <HAL_RCC_OscConfig+0x5c4>
              }
            }
            
            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007cc0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007cc4:	68da      	ldr	r2, [r3, #12]
 8007cc6:	4b3e      	ldr	r3, [pc, #248]	; (8007dc0 <HAL_RCC_OscConfig+0x6e4>)
 8007cc8:	4013      	ands	r3, r2
 8007cca:	687a      	ldr	r2, [r7, #4]
 8007ccc:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8007cce:	687a      	ldr	r2, [r7, #4]
 8007cd0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8007cd2:	4311      	orrs	r1, r2
 8007cd4:	687a      	ldr	r2, [r7, #4]
 8007cd6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007cd8:	0212      	lsls	r2, r2, #8
 8007cda:	4311      	orrs	r1, r2
 8007cdc:	687a      	ldr	r2, [r7, #4]
 8007cde:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8007ce0:	4311      	orrs	r1, r2
 8007ce2:	687a      	ldr	r2, [r7, #4]
 8007ce4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8007ce6:	4311      	orrs	r1, r2
 8007ce8:	687a      	ldr	r2, [r7, #4]
 8007cea:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8007cec:	430a      	orrs	r2, r1
 8007cee:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007cf2:	4313      	orrs	r3, r2
 8007cf4:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
            
            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8007cf6:	f7ff fc34 	bl	8007562 <LL_RCC_PLL_Enable>
            
            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8007cfa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007cfe:	68db      	ldr	r3, [r3, #12]
 8007d00:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007d04:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007d08:	60d3      	str	r3, [r2, #12]
            
            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8007d0a:	f7fd ff6d 	bl	8005be8 <HAL_GetTick>
 8007d0e:	6278      	str	r0, [r7, #36]	; 0x24
            
            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007d10:	e008      	b.n	8007d24 <HAL_RCC_OscConfig+0x648>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007d12:	f7fd ff69 	bl	8005be8 <HAL_GetTick>
 8007d16:	4602      	mov	r2, r0
 8007d18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d1a:	1ad3      	subs	r3, r2, r3
 8007d1c:	2b02      	cmp	r3, #2
 8007d1e:	d901      	bls.n	8007d24 <HAL_RCC_OscConfig+0x648>
              {
                return HAL_TIMEOUT;
 8007d20:	2303      	movs	r3, #3
 8007d22:	e063      	b.n	8007dec <HAL_RCC_OscConfig+0x710>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007d24:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	d0ef      	beq.n	8007d12 <HAL_RCC_OscConfig+0x636>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007d32:	e05a      	b.n	8007dea <HAL_RCC_OscConfig+0x70e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8007d34:	2301      	movs	r3, #1
 8007d36:	e059      	b.n	8007dec <HAL_RCC_OscConfig+0x710>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007d38:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	d151      	bne.n	8007dea <HAL_RCC_OscConfig+0x70e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8007d46:	f7ff fc0c 	bl	8007562 <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8007d4a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007d4e:	68db      	ldr	r3, [r3, #12]
 8007d50:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007d54:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007d58:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8007d5a:	f7fd ff45 	bl	8005be8 <HAL_GetTick>
 8007d5e:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007d60:	e008      	b.n	8007d74 <HAL_RCC_OscConfig+0x698>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007d62:	f7fd ff41 	bl	8005be8 <HAL_GetTick>
 8007d66:	4602      	mov	r2, r0
 8007d68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d6a:	1ad3      	subs	r3, r2, r3
 8007d6c:	2b02      	cmp	r3, #2
 8007d6e:	d901      	bls.n	8007d74 <HAL_RCC_OscConfig+0x698>
            {
              return HAL_TIMEOUT;
 8007d70:	2303      	movs	r3, #3
 8007d72:	e03b      	b.n	8007dec <HAL_RCC_OscConfig+0x710>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007d74:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	d0ef      	beq.n	8007d62 <HAL_RCC_OscConfig+0x686>
 8007d82:	e032      	b.n	8007dea <HAL_RCC_OscConfig+0x70e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007d84:	693b      	ldr	r3, [r7, #16]
 8007d86:	2b0c      	cmp	r3, #12
 8007d88:	d02d      	beq.n	8007de6 <HAL_RCC_OscConfig+0x70a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007d8a:	f7ff fbf9 	bl	8007580 <LL_RCC_PLL_Disable>
        

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 8007d8e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007d92:	68db      	ldr	r3, [r3, #12]
 8007d94:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007d98:	f023 0303 	bic.w	r3, r3, #3
 8007d9c:	60d3      	str	r3, [r2, #12]

#if defined(SAI1) && defined(USB)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_USBCLK | RCC_PLL_SAI1CLK);
 8007d9e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007da2:	68db      	ldr	r3, [r3, #12]
 8007da4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007da8:	f023 5388 	bic.w	r3, r3, #285212672	; 0x11000000
 8007dac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007db0:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK);
#endif

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007db2:	f7fd ff19 	bl	8005be8 <HAL_GetTick>
 8007db6:	6278      	str	r0, [r7, #36]	; 0x24
        
        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007db8:	e00d      	b.n	8007dd6 <HAL_RCC_OscConfig+0x6fa>
 8007dba:	bf00      	nop
 8007dbc:	58000400 	.word	0x58000400
 8007dc0:	11c1808c 	.word	0x11c1808c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007dc4:	f7fd ff10 	bl	8005be8 <HAL_GetTick>
 8007dc8:	4602      	mov	r2, r0
 8007dca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dcc:	1ad3      	subs	r3, r2, r3
 8007dce:	2b02      	cmp	r3, #2
 8007dd0:	d901      	bls.n	8007dd6 <HAL_RCC_OscConfig+0x6fa>
          {
            return HAL_TIMEOUT;
 8007dd2:	2303      	movs	r3, #3
 8007dd4:	e00a      	b.n	8007dec <HAL_RCC_OscConfig+0x710>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007dd6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	d1ef      	bne.n	8007dc4 <HAL_RCC_OscConfig+0x6e8>
 8007de4:	e001      	b.n	8007dea <HAL_RCC_OscConfig+0x70e>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8007de6:	2301      	movs	r3, #1
 8007de8:	e000      	b.n	8007dec <HAL_RCC_OscConfig+0x710>
      }
    }
  }
  return HAL_OK;
 8007dea:	2300      	movs	r3, #0
}
 8007dec:	4618      	mov	r0, r3
 8007dee:	3734      	adds	r7, #52	; 0x34
 8007df0:	46bd      	mov	sp, r7
 8007df2:	bd90      	pop	{r4, r7, pc}

08007df4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007df4:	b580      	push	{r7, lr}
 8007df6:	b084      	sub	sp, #16
 8007df8:	af00      	add	r7, sp, #0
 8007dfa:	6078      	str	r0, [r7, #4]
 8007dfc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	d101      	bne.n	8007e08 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007e04:	2301      	movs	r3, #1
 8007e06:	e12d      	b.n	8008064 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007e08:	4b98      	ldr	r3, [pc, #608]	; (800806c <HAL_RCC_ClockConfig+0x278>)
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	f003 0307 	and.w	r3, r3, #7
 8007e10:	683a      	ldr	r2, [r7, #0]
 8007e12:	429a      	cmp	r2, r3
 8007e14:	d91b      	bls.n	8007e4e <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007e16:	4b95      	ldr	r3, [pc, #596]	; (800806c <HAL_RCC_ClockConfig+0x278>)
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	f023 0207 	bic.w	r2, r3, #7
 8007e1e:	4993      	ldr	r1, [pc, #588]	; (800806c <HAL_RCC_ClockConfig+0x278>)
 8007e20:	683b      	ldr	r3, [r7, #0]
 8007e22:	4313      	orrs	r3, r2
 8007e24:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007e26:	f7fd fedf 	bl	8005be8 <HAL_GetTick>
 8007e2a:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007e2c:	e008      	b.n	8007e40 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8007e2e:	f7fd fedb 	bl	8005be8 <HAL_GetTick>
 8007e32:	4602      	mov	r2, r0
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	1ad3      	subs	r3, r2, r3
 8007e38:	2b02      	cmp	r3, #2
 8007e3a:	d901      	bls.n	8007e40 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8007e3c:	2303      	movs	r3, #3
 8007e3e:	e111      	b.n	8008064 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007e40:	4b8a      	ldr	r3, [pc, #552]	; (800806c <HAL_RCC_ClockConfig+0x278>)
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	f003 0307 	and.w	r3, r3, #7
 8007e48:	683a      	ldr	r2, [r7, #0]
 8007e4a:	429a      	cmp	r2, r3
 8007e4c:	d1ef      	bne.n	8007e2e <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	f003 0302 	and.w	r3, r3, #2
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	d016      	beq.n	8007e88 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	689b      	ldr	r3, [r3, #8]
 8007e5e:	4618      	mov	r0, r3
 8007e60:	f7ff fad7 	bl	8007412 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8007e64:	f7fd fec0 	bl	8005be8 <HAL_GetTick>
 8007e68:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8007e6a:	e008      	b.n	8007e7e <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8007e6c:	f7fd febc 	bl	8005be8 <HAL_GetTick>
 8007e70:	4602      	mov	r2, r0
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	1ad3      	subs	r3, r2, r3
 8007e76:	2b02      	cmp	r3, #2
 8007e78:	d901      	bls.n	8007e7e <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8007e7a:	2303      	movs	r3, #3
 8007e7c:	e0f2      	b.n	8008064 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8007e7e:	f7ff fbd1 	bl	8007624 <LL_RCC_IsActiveFlag_HPRE>
 8007e82:	4603      	mov	r3, r0
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	d0f1      	beq.n	8007e6c <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	f003 0320 	and.w	r3, r3, #32
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	d016      	beq.n	8007ec2 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	695b      	ldr	r3, [r3, #20]
 8007e98:	4618      	mov	r0, r3
 8007e9a:	f7ff face 	bl	800743a <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8007e9e:	f7fd fea3 	bl	8005be8 <HAL_GetTick>
 8007ea2:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8007ea4:	e008      	b.n	8007eb8 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8007ea6:	f7fd fe9f 	bl	8005be8 <HAL_GetTick>
 8007eaa:	4602      	mov	r2, r0
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	1ad3      	subs	r3, r2, r3
 8007eb0:	2b02      	cmp	r3, #2
 8007eb2:	d901      	bls.n	8007eb8 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8007eb4:	2303      	movs	r3, #3
 8007eb6:	e0d5      	b.n	8008064 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8007eb8:	f7ff fbc6 	bl	8007648 <LL_RCC_IsActiveFlag_C2HPRE>
 8007ebc:	4603      	mov	r3, r0
 8007ebe:	2b00      	cmp	r3, #0
 8007ec0:	d0f1      	beq.n	8007ea6 <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	d016      	beq.n	8007efc <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	699b      	ldr	r3, [r3, #24]
 8007ed2:	4618      	mov	r0, r3
 8007ed4:	f7ff fac7 	bl	8007466 <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8007ed8:	f7fd fe86 	bl	8005be8 <HAL_GetTick>
 8007edc:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8007ede:	e008      	b.n	8007ef2 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8007ee0:	f7fd fe82 	bl	8005be8 <HAL_GetTick>
 8007ee4:	4602      	mov	r2, r0
 8007ee6:	68fb      	ldr	r3, [r7, #12]
 8007ee8:	1ad3      	subs	r3, r2, r3
 8007eea:	2b02      	cmp	r3, #2
 8007eec:	d901      	bls.n	8007ef2 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8007eee:	2303      	movs	r3, #3
 8007ef0:	e0b8      	b.n	8008064 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8007ef2:	f7ff fbbc 	bl	800766e <LL_RCC_IsActiveFlag_SHDHPRE>
 8007ef6:	4603      	mov	r3, r0
 8007ef8:	2b00      	cmp	r3, #0
 8007efa:	d0f1      	beq.n	8007ee0 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	f003 0304 	and.w	r3, r3, #4
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	d016      	beq.n	8007f36 <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	68db      	ldr	r3, [r3, #12]
 8007f0c:	4618      	mov	r0, r3
 8007f0e:	f7ff fac1 	bl	8007494 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8007f12:	f7fd fe69 	bl	8005be8 <HAL_GetTick>
 8007f16:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8007f18:	e008      	b.n	8007f2c <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8007f1a:	f7fd fe65 	bl	8005be8 <HAL_GetTick>
 8007f1e:	4602      	mov	r2, r0
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	1ad3      	subs	r3, r2, r3
 8007f24:	2b02      	cmp	r3, #2
 8007f26:	d901      	bls.n	8007f2c <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8007f28:	2303      	movs	r3, #3
 8007f2a:	e09b      	b.n	8008064 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8007f2c:	f7ff fbb2 	bl	8007694 <LL_RCC_IsActiveFlag_PPRE1>
 8007f30:	4603      	mov	r3, r0
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	d0f1      	beq.n	8007f1a <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	f003 0308 	and.w	r3, r3, #8
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	d017      	beq.n	8007f72 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	691b      	ldr	r3, [r3, #16]
 8007f46:	00db      	lsls	r3, r3, #3
 8007f48:	4618      	mov	r0, r3
 8007f4a:	f7ff fab7 	bl	80074bc <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8007f4e:	f7fd fe4b 	bl	8005be8 <HAL_GetTick>
 8007f52:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8007f54:	e008      	b.n	8007f68 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8007f56:	f7fd fe47 	bl	8005be8 <HAL_GetTick>
 8007f5a:	4602      	mov	r2, r0
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	1ad3      	subs	r3, r2, r3
 8007f60:	2b02      	cmp	r3, #2
 8007f62:	d901      	bls.n	8007f68 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8007f64:	2303      	movs	r3, #3
 8007f66:	e07d      	b.n	8008064 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8007f68:	f7ff fba6 	bl	80076b8 <LL_RCC_IsActiveFlag_PPRE2>
 8007f6c:	4603      	mov	r3, r0
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	d0f1      	beq.n	8007f56 <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	f003 0301 	and.w	r3, r3, #1
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	d043      	beq.n	8008006 <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	685b      	ldr	r3, [r3, #4]
 8007f82:	2b02      	cmp	r3, #2
 8007f84:	d106      	bne.n	8007f94 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8007f86:	f7ff f857 	bl	8007038 <LL_RCC_HSE_IsReady>
 8007f8a:	4603      	mov	r3, r0
 8007f8c:	2b00      	cmp	r3, #0
 8007f8e:	d11e      	bne.n	8007fce <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8007f90:	2301      	movs	r3, #1
 8007f92:	e067      	b.n	8008064 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	685b      	ldr	r3, [r3, #4]
 8007f98:	2b03      	cmp	r3, #3
 8007f9a:	d106      	bne.n	8007faa <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8007f9c:	f7ff faff 	bl	800759e <LL_RCC_PLL_IsReady>
 8007fa0:	4603      	mov	r3, r0
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	d113      	bne.n	8007fce <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8007fa6:	2301      	movs	r3, #1
 8007fa8:	e05c      	b.n	8008064 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	685b      	ldr	r3, [r3, #4]
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	d106      	bne.n	8007fc0 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8007fb2:	f7ff f9bf 	bl	8007334 <LL_RCC_MSI_IsReady>
 8007fb6:	4603      	mov	r3, r0
 8007fb8:	2b00      	cmp	r3, #0
 8007fba:	d108      	bne.n	8007fce <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8007fbc:	2301      	movs	r3, #1
 8007fbe:	e051      	b.n	8008064 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8007fc0:	f7ff f86a 	bl	8007098 <LL_RCC_HSI_IsReady>
 8007fc4:	4603      	mov	r3, r0
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	d101      	bne.n	8007fce <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8007fca:	2301      	movs	r3, #1
 8007fcc:	e04a      	b.n	8008064 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	685b      	ldr	r3, [r3, #4]
 8007fd2:	4618      	mov	r0, r3
 8007fd4:	f7ff f9fd 	bl	80073d2 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007fd8:	f7fd fe06 	bl	8005be8 <HAL_GetTick>
 8007fdc:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007fde:	e00a      	b.n	8007ff6 <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007fe0:	f7fd fe02 	bl	8005be8 <HAL_GetTick>
 8007fe4:	4602      	mov	r2, r0
 8007fe6:	68fb      	ldr	r3, [r7, #12]
 8007fe8:	1ad3      	subs	r3, r2, r3
 8007fea:	f241 3288 	movw	r2, #5000	; 0x1388
 8007fee:	4293      	cmp	r3, r2
 8007ff0:	d901      	bls.n	8007ff6 <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8007ff2:	2303      	movs	r3, #3
 8007ff4:	e036      	b.n	8008064 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007ff6:	f7ff fa00 	bl	80073fa <LL_RCC_GetSysClkSource>
 8007ffa:	4602      	mov	r2, r0
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	685b      	ldr	r3, [r3, #4]
 8008000:	009b      	lsls	r3, r3, #2
 8008002:	429a      	cmp	r2, r3
 8008004:	d1ec      	bne.n	8007fe0 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8008006:	4b19      	ldr	r3, [pc, #100]	; (800806c <HAL_RCC_ClockConfig+0x278>)
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	f003 0307 	and.w	r3, r3, #7
 800800e:	683a      	ldr	r2, [r7, #0]
 8008010:	429a      	cmp	r2, r3
 8008012:	d21b      	bcs.n	800804c <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008014:	4b15      	ldr	r3, [pc, #84]	; (800806c <HAL_RCC_ClockConfig+0x278>)
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	f023 0207 	bic.w	r2, r3, #7
 800801c:	4913      	ldr	r1, [pc, #76]	; (800806c <HAL_RCC_ClockConfig+0x278>)
 800801e:	683b      	ldr	r3, [r7, #0]
 8008020:	4313      	orrs	r3, r2
 8008022:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008024:	f7fd fde0 	bl	8005be8 <HAL_GetTick>
 8008028:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800802a:	e008      	b.n	800803e <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800802c:	f7fd fddc 	bl	8005be8 <HAL_GetTick>
 8008030:	4602      	mov	r2, r0
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	1ad3      	subs	r3, r2, r3
 8008036:	2b02      	cmp	r3, #2
 8008038:	d901      	bls.n	800803e <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 800803a:	2303      	movs	r3, #3
 800803c:	e012      	b.n	8008064 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800803e:	4b0b      	ldr	r3, [pc, #44]	; (800806c <HAL_RCC_ClockConfig+0x278>)
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	f003 0307 	and.w	r3, r3, #7
 8008046:	683a      	ldr	r2, [r7, #0]
 8008048:	429a      	cmp	r2, r3
 800804a:	d1ef      	bne.n	800802c <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800804c:	f000 f87c 	bl	8008148 <HAL_RCC_GetHCLKFreq>
 8008050:	4602      	mov	r2, r0
 8008052:	4b07      	ldr	r3, [pc, #28]	; (8008070 <HAL_RCC_ClockConfig+0x27c>)
 8008054:	601a      	str	r2, [r3, #0]
  
  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 8008056:	f7fd fdd3 	bl	8005c00 <HAL_GetTickPrio>
 800805a:	4603      	mov	r3, r0
 800805c:	4618      	mov	r0, r3
 800805e:	f7fd fbf3 	bl	8005848 <HAL_InitTick>
 8008062:	4603      	mov	r3, r0
}
 8008064:	4618      	mov	r0, r3
 8008066:	3710      	adds	r7, #16
 8008068:	46bd      	mov	sp, r7
 800806a:	bd80      	pop	{r7, pc}
 800806c:	58004000 	.word	0x58004000
 8008070:	20000014 	.word	0x20000014

08008074 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008074:	b590      	push	{r4, r7, lr}
 8008076:	b085      	sub	sp, #20
 8008078:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq, pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800807a:	f7ff f9be 	bl	80073fa <LL_RCC_GetSysClkSource>
 800807e:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	2b00      	cmp	r3, #0
 8008084:	d10a      	bne.n	800809c <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8008086:	f7ff f97a 	bl	800737e <LL_RCC_MSI_GetRange>
 800808a:	4603      	mov	r3, r0
 800808c:	091b      	lsrs	r3, r3, #4
 800808e:	f003 030f 	and.w	r3, r3, #15
 8008092:	4a2a      	ldr	r2, [pc, #168]	; (800813c <HAL_RCC_GetSysClockFreq+0xc8>)
 8008094:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008098:	60fb      	str	r3, [r7, #12]
 800809a:	e04a      	b.n	8008132 <HAL_RCC_GetSysClockFreq+0xbe>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	2b04      	cmp	r3, #4
 80080a0:	d102      	bne.n	80080a8 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80080a2:	4b27      	ldr	r3, [pc, #156]	; (8008140 <HAL_RCC_GetSysClockFreq+0xcc>)
 80080a4:	60fb      	str	r3, [r7, #12]
 80080a6:	e044      	b.n	8008132 <HAL_RCC_GetSysClockFreq+0xbe>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	2b08      	cmp	r3, #8
 80080ac:	d10a      	bne.n	80080c4 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 80080ae:	f7fe ff93 	bl	8006fd8 <LL_RCC_HSE_IsEnabledDiv2>
 80080b2:	4603      	mov	r3, r0
 80080b4:	2b01      	cmp	r3, #1
 80080b6:	d102      	bne.n	80080be <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 80080b8:	4b21      	ldr	r3, [pc, #132]	; (8008140 <HAL_RCC_GetSysClockFreq+0xcc>)
 80080ba:	60fb      	str	r3, [r7, #12]
 80080bc:	e039      	b.n	8008132 <HAL_RCC_GetSysClockFreq+0xbe>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 80080be:	4b21      	ldr	r3, [pc, #132]	; (8008144 <HAL_RCC_GetSysClockFreq+0xd0>)
 80080c0:	60fb      	str	r3, [r7, #12]
 80080c2:	e036      	b.n	8008132 <HAL_RCC_GetSysClockFreq+0xbe>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 80080c4:	f7ff faa2 	bl	800760c <LL_RCC_PLL_GetMainSource>
 80080c8:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 80080ca:	683b      	ldr	r3, [r7, #0]
 80080cc:	2b02      	cmp	r3, #2
 80080ce:	d002      	beq.n	80080d6 <HAL_RCC_GetSysClockFreq+0x62>
 80080d0:	2b03      	cmp	r3, #3
 80080d2:	d003      	beq.n	80080dc <HAL_RCC_GetSysClockFreq+0x68>
 80080d4:	e00d      	b.n	80080f2 <HAL_RCC_GetSysClockFreq+0x7e>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 80080d6:	4b1a      	ldr	r3, [pc, #104]	; (8008140 <HAL_RCC_GetSysClockFreq+0xcc>)
 80080d8:	60bb      	str	r3, [r7, #8]
        break;
 80080da:	e015      	b.n	8008108 <HAL_RCC_GetSysClockFreq+0x94>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 80080dc:	f7fe ff7c 	bl	8006fd8 <LL_RCC_HSE_IsEnabledDiv2>
 80080e0:	4603      	mov	r3, r0
 80080e2:	2b01      	cmp	r3, #1
 80080e4:	d102      	bne.n	80080ec <HAL_RCC_GetSysClockFreq+0x78>
        {
          pllinputfreq = HSE_VALUE / 2U;
 80080e6:	4b16      	ldr	r3, [pc, #88]	; (8008140 <HAL_RCC_GetSysClockFreq+0xcc>)
 80080e8:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 80080ea:	e00d      	b.n	8008108 <HAL_RCC_GetSysClockFreq+0x94>
          pllinputfreq = HSE_VALUE;
 80080ec:	4b15      	ldr	r3, [pc, #84]	; (8008144 <HAL_RCC_GetSysClockFreq+0xd0>)
 80080ee:	60bb      	str	r3, [r7, #8]
        break;
 80080f0:	e00a      	b.n	8008108 <HAL_RCC_GetSysClockFreq+0x94>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 80080f2:	f7ff f944 	bl	800737e <LL_RCC_MSI_GetRange>
 80080f6:	4603      	mov	r3, r0
 80080f8:	091b      	lsrs	r3, r3, #4
 80080fa:	f003 030f 	and.w	r3, r3, #15
 80080fe:	4a0f      	ldr	r2, [pc, #60]	; (800813c <HAL_RCC_GetSysClockFreq+0xc8>)
 8008100:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008104:	60bb      	str	r3, [r7, #8]
        break;
 8008106:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
 8008108:	f7ff fa5b 	bl	80075c2 <LL_RCC_PLL_GetN>
 800810c:	4602      	mov	r2, r0
 800810e:	68bb      	ldr	r3, [r7, #8]
 8008110:	fb03 f402 	mul.w	r4, r3, r2
 8008114:	f7ff fa6e 	bl	80075f4 <LL_RCC_PLL_GetDivider>
 8008118:	4603      	mov	r3, r0
 800811a:	091b      	lsrs	r3, r3, #4
 800811c:	3301      	adds	r3, #1
 800811e:	fbb4 f4f3 	udiv	r4, r4, r3
 8008122:	f7ff fa5b 	bl	80075dc <LL_RCC_PLL_GetR>
 8008126:	4603      	mov	r3, r0
 8008128:	0f5b      	lsrs	r3, r3, #29
 800812a:	3301      	adds	r3, #1
 800812c:	fbb4 f3f3 	udiv	r3, r4, r3
 8008130:	60fb      	str	r3, [r7, #12]
  }

  return sysclockfreq;
 8008132:	68fb      	ldr	r3, [r7, #12]
}
 8008134:	4618      	mov	r0, r3
 8008136:	3714      	adds	r7, #20
 8008138:	46bd      	mov	sp, r7
 800813a:	bd90      	pop	{r4, r7, pc}
 800813c:	08016374 	.word	0x08016374
 8008140:	00f42400 	.word	0x00f42400
 8008144:	01e84800 	.word	0x01e84800

08008148 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008148:	b598      	push	{r3, r4, r7, lr}
 800814a:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 800814c:	f7ff ff92 	bl	8008074 <HAL_RCC_GetSysClockFreq>
 8008150:	4604      	mov	r4, r0
 8008152:	f7ff f9c7 	bl	80074e4 <LL_RCC_GetAHBPrescaler>
 8008156:	4603      	mov	r3, r0
 8008158:	091b      	lsrs	r3, r3, #4
 800815a:	f003 030f 	and.w	r3, r3, #15
 800815e:	4a03      	ldr	r2, [pc, #12]	; (800816c <HAL_RCC_GetHCLKFreq+0x24>)
 8008160:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008164:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8008168:	4618      	mov	r0, r3
 800816a:	bd98      	pop	{r3, r4, r7, pc}
 800816c:	08016314 	.word	0x08016314

08008170 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008170:	b598      	push	{r3, r4, r7, lr}
 8008172:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8008174:	f7ff ffe8 	bl	8008148 <HAL_RCC_GetHCLKFreq>
 8008178:	4604      	mov	r4, r0
 800817a:	f7ff f9e6 	bl	800754a <LL_RCC_GetAPB2Prescaler>
 800817e:	4603      	mov	r3, r0
 8008180:	0adb      	lsrs	r3, r3, #11
 8008182:	f003 0307 	and.w	r3, r3, #7
 8008186:	4a04      	ldr	r2, [pc, #16]	; (8008198 <HAL_RCC_GetPCLK2Freq+0x28>)
 8008188:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800818c:	f003 031f 	and.w	r3, r3, #31
 8008190:	fa24 f303 	lsr.w	r3, r4, r3
}
 8008194:	4618      	mov	r0, r3
 8008196:	bd98      	pop	{r3, r4, r7, pc}
 8008198:	08016354 	.word	0x08016354

0800819c <HAL_RCC_GetClockConfig>:
  *                           will be configured.
  * @param  pFLatency         Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800819c:	b580      	push	{r7, lr}
 800819e:	b082      	sub	sp, #8
 80081a0:	af00      	add	r7, sp, #0
 80081a2:	6078      	str	r0, [r7, #4]
 80081a4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2 |  \
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	226f      	movs	r2, #111	; 0x6f
 80081aa:	601a      	str	r2, [r3, #0]
                                  RCC_CLOCKTYPE_HCLK2 | RCC_CLOCKTYPE_HCLK4);

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = LL_RCC_GetSysClkSource();
 80081ac:	f7ff f925 	bl	80073fa <LL_RCC_GetSysClkSource>
 80081b0:	4602      	mov	r2, r0
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = LL_RCC_GetAHBPrescaler();
 80081b6:	f7ff f995 	bl	80074e4 <LL_RCC_GetAHBPrescaler>
 80081ba:	4602      	mov	r2, r0
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = LL_RCC_GetAPB1Prescaler();
 80081c0:	f7ff f9b7 	bl	8007532 <LL_RCC_GetAPB1Prescaler>
 80081c4:	4602      	mov	r2, r0
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = LL_RCC_GetAPB2Prescaler();
 80081ca:	f7ff f9be 	bl	800754a <LL_RCC_GetAPB2Prescaler>
 80081ce:	4602      	mov	r2, r0
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	611a      	str	r2, [r3, #16]

  /* Get the AHBCLK2Divider configuration ------------------------------------*/
  RCC_ClkInitStruct->AHBCLK2Divider = LL_C2_RCC_GetAHBPrescaler();
 80081d4:	f7ff f992 	bl	80074fc <LL_C2_RCC_GetAHBPrescaler>
 80081d8:	4602      	mov	r2, r0
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	615a      	str	r2, [r3, #20]

  /* Get the AHBCLK4Divider configuration ------------------------------------*/
  RCC_ClkInitStruct->AHBCLK4Divider = LL_RCC_GetAHB4Prescaler();
 80081de:	f7ff f99a 	bl	8007516 <LL_RCC_GetAHB4Prescaler>
 80081e2:	4602      	mov	r2, r0
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	619a      	str	r2, [r3, #24]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 80081e8:	4b04      	ldr	r3, [pc, #16]	; (80081fc <HAL_RCC_GetClockConfig+0x60>)
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	f003 0207 	and.w	r2, r3, #7
 80081f0:	683b      	ldr	r3, [r7, #0]
 80081f2:	601a      	str	r2, [r3, #0]
}
 80081f4:	bf00      	nop
 80081f6:	3708      	adds	r7, #8
 80081f8:	46bd      	mov	sp, r7
 80081fa:	bd80      	pop	{r7, pc}
 80081fc:	58004000 	.word	0x58004000

08008200 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8008200:	b590      	push	{r4, r7, lr}
 8008202:	b085      	sub	sp, #20
 8008204:	af00      	add	r7, sp, #0
 8008206:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	2bb0      	cmp	r3, #176	; 0xb0
 800820c:	d903      	bls.n	8008216 <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 800820e:	4b15      	ldr	r3, [pc, #84]	; (8008264 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8008210:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008212:	60fb      	str	r3, [r7, #12]
 8008214:	e007      	b.n	8008226 <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	091b      	lsrs	r3, r3, #4
 800821a:	f003 030f 	and.w	r3, r3, #15
 800821e:	4a11      	ldr	r2, [pc, #68]	; (8008264 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8008220:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008224:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 8008226:	f7ff f976 	bl	8007516 <LL_RCC_GetAHB4Prescaler>
 800822a:	4603      	mov	r3, r0
 800822c:	091b      	lsrs	r3, r3, #4
 800822e:	f003 030f 	and.w	r3, r3, #15
 8008232:	4a0d      	ldr	r2, [pc, #52]	; (8008268 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 8008234:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008238:	68fa      	ldr	r2, [r7, #12]
 800823a:	fbb2 f3f3 	udiv	r3, r2, r3
 800823e:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8008240:	68bb      	ldr	r3, [r7, #8]
 8008242:	4a0a      	ldr	r2, [pc, #40]	; (800826c <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 8008244:	fba2 2303 	umull	r2, r3, r2, r3
 8008248:	0c9c      	lsrs	r4, r3, #18
 800824a:	f7fe feb7 	bl	8006fbc <HAL_PWREx_GetVoltageRange>
 800824e:	4603      	mov	r3, r0
 8008250:	4619      	mov	r1, r3
 8008252:	4620      	mov	r0, r4
 8008254:	f000 f80c 	bl	8008270 <RCC_SetFlashLatency>
 8008258:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif
}
 800825a:	4618      	mov	r0, r3
 800825c:	3714      	adds	r7, #20
 800825e:	46bd      	mov	sp, r7
 8008260:	bd90      	pop	{r4, r7, pc}
 8008262:	bf00      	nop
 8008264:	08016374 	.word	0x08016374
 8008268:	08016314 	.word	0x08016314
 800826c:	431bde83 	.word	0x431bde83

08008270 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8008270:	b590      	push	{r4, r7, lr}
 8008272:	b093      	sub	sp, #76	; 0x4c
 8008274:	af00      	add	r7, sp, #0
 8008276:	6078      	str	r0, [r7, #4]
 8008278:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 800827a:	4b39      	ldr	r3, [pc, #228]	; (8008360 <RCC_SetFlashLatency+0xf0>)
 800827c:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8008280:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8008282:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 8008286:	4a37      	ldr	r2, [pc, #220]	; (8008364 <RCC_SetFlashLatency+0xf4>)
 8008288:	f107 031c 	add.w	r3, r7, #28
 800828c:	ca07      	ldmia	r2, {r0, r1, r2}
 800828e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 8008292:	4b35      	ldr	r3, [pc, #212]	; (8008368 <RCC_SetFlashLatency+0xf8>)
 8008294:	f107 040c 	add.w	r4, r7, #12
 8008298:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800829a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 800829e:	2300      	movs	r3, #0
 80082a0:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 80082a2:	683b      	ldr	r3, [r7, #0]
 80082a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80082a8:	d11c      	bne.n	80082e4 <RCC_SetFlashLatency+0x74>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 80082aa:	2300      	movs	r3, #0
 80082ac:	643b      	str	r3, [r7, #64]	; 0x40
 80082ae:	e015      	b.n	80082dc <RCC_SetFlashLatency+0x6c>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 80082b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80082b2:	009b      	lsls	r3, r3, #2
 80082b4:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80082b8:	4413      	add	r3, r2
 80082ba:	f853 3c20 	ldr.w	r3, [r3, #-32]
 80082be:	687a      	ldr	r2, [r7, #4]
 80082c0:	429a      	cmp	r2, r3
 80082c2:	d808      	bhi.n	80082d6 <RCC_SetFlashLatency+0x66>
      {
        latency = FLASH_LATENCY_RANGE[index];
 80082c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80082c6:	009b      	lsls	r3, r3, #2
 80082c8:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80082cc:	4413      	add	r3, r2
 80082ce:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 80082d2:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 80082d4:	e022      	b.n	800831c <RCC_SetFlashLatency+0xac>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 80082d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80082d8:	3301      	adds	r3, #1
 80082da:	643b      	str	r3, [r7, #64]	; 0x40
 80082dc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80082de:	2b03      	cmp	r3, #3
 80082e0:	d9e6      	bls.n	80082b0 <RCC_SetFlashLatency+0x40>
 80082e2:	e01b      	b.n	800831c <RCC_SetFlashLatency+0xac>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 80082e4:	2300      	movs	r3, #0
 80082e6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80082e8:	e015      	b.n	8008316 <RCC_SetFlashLatency+0xa6>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 80082ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80082ec:	009b      	lsls	r3, r3, #2
 80082ee:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80082f2:	4413      	add	r3, r2
 80082f4:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 80082f8:	687a      	ldr	r2, [r7, #4]
 80082fa:	429a      	cmp	r2, r3
 80082fc:	d808      	bhi.n	8008310 <RCC_SetFlashLatency+0xa0>
      {
        latency = FLASH_LATENCY_RANGE[index];
 80082fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008300:	009b      	lsls	r3, r3, #2
 8008302:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8008306:	4413      	add	r3, r2
 8008308:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 800830c:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 800830e:	e005      	b.n	800831c <RCC_SetFlashLatency+0xac>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8008310:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008312:	3301      	adds	r3, #1
 8008314:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008316:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008318:	2b02      	cmp	r3, #2
 800831a:	d9e6      	bls.n	80082ea <RCC_SetFlashLatency+0x7a>
      break;
    }
  }
#endif

  __HAL_FLASH_SET_LATENCY(latency);
 800831c:	4b13      	ldr	r3, [pc, #76]	; (800836c <RCC_SetFlashLatency+0xfc>)
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	f023 0207 	bic.w	r2, r3, #7
 8008324:	4911      	ldr	r1, [pc, #68]	; (800836c <RCC_SetFlashLatency+0xfc>)
 8008326:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008328:	4313      	orrs	r3, r2
 800832a:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800832c:	f7fd fc5c 	bl	8005be8 <HAL_GetTick>
 8008330:	63b8      	str	r0, [r7, #56]	; 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8008332:	e008      	b.n	8008346 <RCC_SetFlashLatency+0xd6>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8008334:	f7fd fc58 	bl	8005be8 <HAL_GetTick>
 8008338:	4602      	mov	r2, r0
 800833a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800833c:	1ad3      	subs	r3, r2, r3
 800833e:	2b02      	cmp	r3, #2
 8008340:	d901      	bls.n	8008346 <RCC_SetFlashLatency+0xd6>
    {
      return HAL_TIMEOUT;
 8008342:	2303      	movs	r3, #3
 8008344:	e007      	b.n	8008356 <RCC_SetFlashLatency+0xe6>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8008346:	4b09      	ldr	r3, [pc, #36]	; (800836c <RCC_SetFlashLatency+0xfc>)
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	f003 0307 	and.w	r3, r3, #7
 800834e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008350:	429a      	cmp	r2, r3
 8008352:	d1ef      	bne.n	8008334 <RCC_SetFlashLatency+0xc4>
    }
  }
  return HAL_OK;
 8008354:	2300      	movs	r3, #0
}
 8008356:	4618      	mov	r0, r3
 8008358:	374c      	adds	r7, #76	; 0x4c
 800835a:	46bd      	mov	sp, r7
 800835c:	bd90      	pop	{r4, r7, pc}
 800835e:	bf00      	nop
 8008360:	08014f44 	.word	0x08014f44
 8008364:	08014f54 	.word	0x08014f54
 8008368:	08014f60 	.word	0x08014f60
 800836c:	58004000 	.word	0x58004000

08008370 <LL_RCC_LSE_IsEnabled>:
{
 8008370:	b480      	push	{r7}
 8008372:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 8008374:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008378:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800837c:	f003 0301 	and.w	r3, r3, #1
 8008380:	2b01      	cmp	r3, #1
 8008382:	d101      	bne.n	8008388 <LL_RCC_LSE_IsEnabled+0x18>
 8008384:	2301      	movs	r3, #1
 8008386:	e000      	b.n	800838a <LL_RCC_LSE_IsEnabled+0x1a>
 8008388:	2300      	movs	r3, #0
}
 800838a:	4618      	mov	r0, r3
 800838c:	46bd      	mov	sp, r7
 800838e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008392:	4770      	bx	lr

08008394 <LL_RCC_LSE_IsReady>:
{
 8008394:	b480      	push	{r7}
 8008396:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8008398:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800839c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80083a0:	f003 0302 	and.w	r3, r3, #2
 80083a4:	2b02      	cmp	r3, #2
 80083a6:	d101      	bne.n	80083ac <LL_RCC_LSE_IsReady+0x18>
 80083a8:	2301      	movs	r3, #1
 80083aa:	e000      	b.n	80083ae <LL_RCC_LSE_IsReady+0x1a>
 80083ac:	2300      	movs	r3, #0
}
 80083ae:	4618      	mov	r0, r3
 80083b0:	46bd      	mov	sp, r7
 80083b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083b6:	4770      	bx	lr

080083b8 <LL_RCC_SetRFWKPClockSource>:
{
 80083b8:	b480      	push	{r7}
 80083ba:	b083      	sub	sp, #12
 80083bc:	af00      	add	r7, sp, #0
 80083be:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 80083c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80083c4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80083c8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80083cc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	4313      	orrs	r3, r2
 80083d4:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 80083d8:	bf00      	nop
 80083da:	370c      	adds	r7, #12
 80083dc:	46bd      	mov	sp, r7
 80083de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083e2:	4770      	bx	lr

080083e4 <LL_RCC_SetSMPSClockSource>:
{
 80083e4:	b480      	push	{r7}
 80083e6:	b083      	sub	sp, #12
 80083e8:	af00      	add	r7, sp, #0
 80083ea:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 80083ec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80083f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083f2:	f023 0203 	bic.w	r2, r3, #3
 80083f6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	4313      	orrs	r3, r2
 80083fe:	624b      	str	r3, [r1, #36]	; 0x24
}
 8008400:	bf00      	nop
 8008402:	370c      	adds	r7, #12
 8008404:	46bd      	mov	sp, r7
 8008406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800840a:	4770      	bx	lr

0800840c <LL_RCC_SetSMPSPrescaler>:
{
 800840c:	b480      	push	{r7}
 800840e:	b083      	sub	sp, #12
 8008410:	af00      	add	r7, sp, #0
 8008412:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 8008414:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008418:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800841a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800841e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	4313      	orrs	r3, r2
 8008426:	624b      	str	r3, [r1, #36]	; 0x24
}
 8008428:	bf00      	nop
 800842a:	370c      	adds	r7, #12
 800842c:	46bd      	mov	sp, r7
 800842e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008432:	4770      	bx	lr

08008434 <LL_RCC_SetUSARTClockSource>:
{
 8008434:	b480      	push	{r7}
 8008436:	b083      	sub	sp, #12
 8008438:	af00      	add	r7, sp, #0
 800843a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 800843c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008440:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008444:	f023 0203 	bic.w	r2, r3, #3
 8008448:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	4313      	orrs	r3, r2
 8008450:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8008454:	bf00      	nop
 8008456:	370c      	adds	r7, #12
 8008458:	46bd      	mov	sp, r7
 800845a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800845e:	4770      	bx	lr

08008460 <LL_RCC_SetLPUARTClockSource>:
{
 8008460:	b480      	push	{r7}
 8008462:	b083      	sub	sp, #12
 8008464:	af00      	add	r7, sp, #0
 8008466:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8008468:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800846c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008470:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8008474:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	4313      	orrs	r3, r2
 800847c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8008480:	bf00      	nop
 8008482:	370c      	adds	r7, #12
 8008484:	46bd      	mov	sp, r7
 8008486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800848a:	4770      	bx	lr

0800848c <LL_RCC_SetI2CClockSource>:
{
 800848c:	b480      	push	{r7}
 800848e:	b083      	sub	sp, #12
 8008490:	af00      	add	r7, sp, #0
 8008492:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8008494:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008498:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	091b      	lsrs	r3, r3, #4
 80084a0:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 80084a4:	43db      	mvns	r3, r3
 80084a6:	401a      	ands	r2, r3
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	011b      	lsls	r3, r3, #4
 80084ac:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 80084b0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80084b4:	4313      	orrs	r3, r2
 80084b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80084ba:	bf00      	nop
 80084bc:	370c      	adds	r7, #12
 80084be:	46bd      	mov	sp, r7
 80084c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084c4:	4770      	bx	lr

080084c6 <LL_RCC_SetLPTIMClockSource>:
{
 80084c6:	b480      	push	{r7}
 80084c8:	b083      	sub	sp, #12
 80084ca:	af00      	add	r7, sp, #0
 80084cc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 80084ce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80084d2:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	0c1b      	lsrs	r3, r3, #16
 80084da:	041b      	lsls	r3, r3, #16
 80084dc:	43db      	mvns	r3, r3
 80084de:	401a      	ands	r2, r3
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	041b      	lsls	r3, r3, #16
 80084e4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80084e8:	4313      	orrs	r3, r2
 80084ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80084ee:	bf00      	nop
 80084f0:	370c      	adds	r7, #12
 80084f2:	46bd      	mov	sp, r7
 80084f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084f8:	4770      	bx	lr

080084fa <LL_RCC_SetSAIClockSource>:
{
 80084fa:	b480      	push	{r7}
 80084fc:	b083      	sub	sp, #12
 80084fe:	af00      	add	r7, sp, #0
 8008500:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 8008502:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008506:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800850a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800850e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	4313      	orrs	r3, r2
 8008516:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800851a:	bf00      	nop
 800851c:	370c      	adds	r7, #12
 800851e:	46bd      	mov	sp, r7
 8008520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008524:	4770      	bx	lr

08008526 <LL_RCC_SetRNGClockSource>:
{
 8008526:	b480      	push	{r7}
 8008528:	b083      	sub	sp, #12
 800852a:	af00      	add	r7, sp, #0
 800852c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 800852e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008532:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008536:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 800853a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	4313      	orrs	r3, r2
 8008542:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8008546:	bf00      	nop
 8008548:	370c      	adds	r7, #12
 800854a:	46bd      	mov	sp, r7
 800854c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008550:	4770      	bx	lr

08008552 <LL_RCC_SetCLK48ClockSource>:
{
 8008552:	b480      	push	{r7}
 8008554:	b083      	sub	sp, #12
 8008556:	af00      	add	r7, sp, #0
 8008558:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 800855a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800855e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008562:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8008566:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	4313      	orrs	r3, r2
 800856e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8008572:	bf00      	nop
 8008574:	370c      	adds	r7, #12
 8008576:	46bd      	mov	sp, r7
 8008578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800857c:	4770      	bx	lr

0800857e <LL_RCC_SetUSBClockSource>:
{
 800857e:	b580      	push	{r7, lr}
 8008580:	b082      	sub	sp, #8
 8008582:	af00      	add	r7, sp, #0
 8008584:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 8008586:	6878      	ldr	r0, [r7, #4]
 8008588:	f7ff ffe3 	bl	8008552 <LL_RCC_SetCLK48ClockSource>
}
 800858c:	bf00      	nop
 800858e:	3708      	adds	r7, #8
 8008590:	46bd      	mov	sp, r7
 8008592:	bd80      	pop	{r7, pc}

08008594 <LL_RCC_SetADCClockSource>:
{
 8008594:	b480      	push	{r7}
 8008596:	b083      	sub	sp, #12
 8008598:	af00      	add	r7, sp, #0
 800859a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 800859c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80085a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80085a4:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80085a8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	4313      	orrs	r3, r2
 80085b0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80085b4:	bf00      	nop
 80085b6:	370c      	adds	r7, #12
 80085b8:	46bd      	mov	sp, r7
 80085ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085be:	4770      	bx	lr

080085c0 <LL_RCC_SetRTCClockSource>:
{
 80085c0:	b480      	push	{r7}
 80085c2:	b083      	sub	sp, #12
 80085c4:	af00      	add	r7, sp, #0
 80085c6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 80085c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80085cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80085d0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80085d4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	4313      	orrs	r3, r2
 80085dc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 80085e0:	bf00      	nop
 80085e2:	370c      	adds	r7, #12
 80085e4:	46bd      	mov	sp, r7
 80085e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ea:	4770      	bx	lr

080085ec <LL_RCC_GetRTCClockSource>:
{
 80085ec:	b480      	push	{r7}
 80085ee:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 80085f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80085f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80085f8:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 80085fc:	4618      	mov	r0, r3
 80085fe:	46bd      	mov	sp, r7
 8008600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008604:	4770      	bx	lr

08008606 <LL_RCC_ForceBackupDomainReset>:
{
 8008606:	b480      	push	{r7}
 8008608:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800860a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800860e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008612:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008616:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800861a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800861e:	bf00      	nop
 8008620:	46bd      	mov	sp, r7
 8008622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008626:	4770      	bx	lr

08008628 <LL_RCC_ReleaseBackupDomainReset>:
{
 8008628:	b480      	push	{r7}
 800862a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800862c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008630:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008634:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008638:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800863c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8008640:	bf00      	nop
 8008642:	46bd      	mov	sp, r7
 8008644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008648:	4770      	bx	lr

0800864a <LL_RCC_PLLSAI1_Enable>:
{
 800864a:	b480      	push	{r7}
 800864c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 800864e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008658:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800865c:	6013      	str	r3, [r2, #0]
}
 800865e:	bf00      	nop
 8008660:	46bd      	mov	sp, r7
 8008662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008666:	4770      	bx	lr

08008668 <LL_RCC_PLLSAI1_Disable>:
{
 8008668:	b480      	push	{r7}
 800866a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 800866c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008676:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800867a:	6013      	str	r3, [r2, #0]
}
 800867c:	bf00      	nop
 800867e:	46bd      	mov	sp, r7
 8008680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008684:	4770      	bx	lr

08008686 <LL_RCC_PLLSAI1_IsReady>:
{
 8008686:	b480      	push	{r7}
 8008688:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 800868a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008694:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008698:	d101      	bne.n	800869e <LL_RCC_PLLSAI1_IsReady+0x18>
 800869a:	2301      	movs	r3, #1
 800869c:	e000      	b.n	80086a0 <LL_RCC_PLLSAI1_IsReady+0x1a>
 800869e:	2300      	movs	r3, #0
}
 80086a0:	4618      	mov	r0, r3
 80086a2:	46bd      	mov	sp, r7
 80086a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086a8:	4770      	bx	lr

080086aa <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80086aa:	b580      	push	{r7, lr}
 80086ac:	b088      	sub	sp, #32
 80086ae:	af00      	add	r7, sp, #0
 80086b0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 80086b2:	2300      	movs	r3, #0
 80086b4:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 80086b6:	2300      	movs	r3, #0
 80086b8:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	681b      	ldr	r3, [r3, #0]
 80086be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80086c2:	2b00      	cmp	r3, #0
 80086c4:	d033      	beq.n	800872e <HAL_RCCEx_PeriphCLKConfig+0x84>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80086ca:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80086ce:	d00c      	beq.n	80086ea <HAL_RCCEx_PeriphCLKConfig+0x40>
 80086d0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80086d4:	d802      	bhi.n	80086dc <HAL_RCCEx_PeriphCLKConfig+0x32>
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	d010      	beq.n	80086fc <HAL_RCCEx_PeriphCLKConfig+0x52>
 80086da:	e017      	b.n	800870c <HAL_RCCEx_PeriphCLKConfig+0x62>
 80086dc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80086e0:	d017      	beq.n	8008712 <HAL_RCCEx_PeriphCLKConfig+0x68>
 80086e2:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80086e6:	d016      	beq.n	8008716 <HAL_RCCEx_PeriphCLKConfig+0x6c>
 80086e8:	e010      	b.n	800870c <HAL_RCCEx_PeriphCLKConfig+0x62>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 80086ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80086ee:	68db      	ldr	r3, [r3, #12]
 80086f0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80086f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80086f8:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 80086fa:	e00d      	b.n	8008718 <HAL_RCCEx_PeriphCLKConfig+0x6e>

#if defined(SAI1)
      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	3304      	adds	r3, #4
 8008700:	4618      	mov	r0, r3
 8008702:	f000 f947 	bl	8008994 <RCCEx_PLLSAI1_ConfigNP>
 8008706:	4603      	mov	r3, r0
 8008708:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 800870a:	e005      	b.n	8008718 <HAL_RCCEx_PeriphCLKConfig+0x6e>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 800870c:	2301      	movs	r3, #1
 800870e:	77fb      	strb	r3, [r7, #31]
        break;
 8008710:	e002      	b.n	8008718 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        break;
 8008712:	bf00      	nop
 8008714:	e000      	b.n	8008718 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        break;
 8008716:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008718:	7ffb      	ldrb	r3, [r7, #31]
 800871a:	2b00      	cmp	r3, #0
 800871c:	d105      	bne.n	800872a <HAL_RCCEx_PeriphCLKConfig+0x80>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008722:	4618      	mov	r0, r3
 8008724:	f7ff fee9 	bl	80084fa <LL_RCC_SetSAIClockSource>
 8008728:	e001      	b.n	800872e <HAL_RCCEx_PeriphCLKConfig+0x84>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800872a:	7ffb      	ldrb	r3, [r7, #31]
 800872c:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008736:	2b00      	cmp	r3, #0
 8008738:	d046      	beq.n	80087c8 <HAL_RCCEx_PeriphCLKConfig+0x11e>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 800873a:	f7ff ff57 	bl	80085ec <LL_RCC_GetRTCClockSource>
 800873e:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008744:	69ba      	ldr	r2, [r7, #24]
 8008746:	429a      	cmp	r2, r3
 8008748:	d03c      	beq.n	80087c4 <HAL_RCCEx_PeriphCLKConfig+0x11a>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 800874a:	f7fe fc27 	bl	8006f9c <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 800874e:	69bb      	ldr	r3, [r7, #24]
 8008750:	2b00      	cmp	r3, #0
 8008752:	d105      	bne.n	8008760 <HAL_RCCEx_PeriphCLKConfig+0xb6>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008758:	4618      	mov	r0, r3
 800875a:	f7ff ff31 	bl	80085c0 <LL_RCC_SetRTCClockSource>
 800875e:	e02e      	b.n	80087be <HAL_RCCEx_PeriphCLKConfig+0x114>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 8008760:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008764:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008768:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 800876a:	f7ff ff4c 	bl	8008606 <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 800876e:	f7ff ff5b 	bl	8008628 <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 8008772:	697b      	ldr	r3, [r7, #20]
 8008774:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800877c:	4313      	orrs	r3, r2
 800877e:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 8008780:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008784:	697b      	ldr	r3, [r7, #20]
 8008786:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 800878a:	f7ff fdf1 	bl	8008370 <LL_RCC_LSE_IsEnabled>
 800878e:	4603      	mov	r3, r0
 8008790:	2b01      	cmp	r3, #1
 8008792:	d114      	bne.n	80087be <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8008794:	f7fd fa28 	bl	8005be8 <HAL_GetTick>
 8008798:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 800879a:	e00b      	b.n	80087b4 <HAL_RCCEx_PeriphCLKConfig+0x10a>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800879c:	f7fd fa24 	bl	8005be8 <HAL_GetTick>
 80087a0:	4602      	mov	r2, r0
 80087a2:	693b      	ldr	r3, [r7, #16]
 80087a4:	1ad3      	subs	r3, r2, r3
 80087a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80087aa:	4293      	cmp	r3, r2
 80087ac:	d902      	bls.n	80087b4 <HAL_RCCEx_PeriphCLKConfig+0x10a>
            {
              ret = HAL_TIMEOUT;
 80087ae:	2303      	movs	r3, #3
 80087b0:	77fb      	strb	r3, [r7, #31]
              break;
 80087b2:	e004      	b.n	80087be <HAL_RCCEx_PeriphCLKConfig+0x114>
          while (LL_RCC_LSE_IsReady() != 1U)
 80087b4:	f7ff fdee 	bl	8008394 <LL_RCC_LSE_IsReady>
 80087b8:	4603      	mov	r3, r0
 80087ba:	2b01      	cmp	r3, #1
 80087bc:	d1ee      	bne.n	800879c <HAL_RCCEx_PeriphCLKConfig+0xf2>
          }
        }
      }

      /* set overall return value */
      status = ret;
 80087be:	7ffb      	ldrb	r3, [r7, #31]
 80087c0:	77bb      	strb	r3, [r7, #30]
 80087c2:	e001      	b.n	80087c8 <HAL_RCCEx_PeriphCLKConfig+0x11e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80087c4:	7ffb      	ldrb	r3, [r7, #31]
 80087c6:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	f003 0301 	and.w	r3, r3, #1
 80087d0:	2b00      	cmp	r3, #0
 80087d2:	d004      	beq.n	80087de <HAL_RCCEx_PeriphCLKConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	699b      	ldr	r3, [r3, #24]
 80087d8:	4618      	mov	r0, r3
 80087da:	f7ff fe2b 	bl	8008434 <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	681b      	ldr	r3, [r3, #0]
 80087e2:	f003 0302 	and.w	r3, r3, #2
 80087e6:	2b00      	cmp	r3, #0
 80087e8:	d004      	beq.n	80087f4 <HAL_RCCEx_PeriphCLKConfig+0x14a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	69db      	ldr	r3, [r3, #28]
 80087ee:	4618      	mov	r0, r3
 80087f0:	f7ff fe36 	bl	8008460 <LL_RCC_SetLPUARTClockSource>
  }
#endif

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	f003 0310 	and.w	r3, r3, #16
 80087fc:	2b00      	cmp	r3, #0
 80087fe:	d004      	beq.n	800880a <HAL_RCCEx_PeriphCLKConfig+0x160>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008804:	4618      	mov	r0, r3
 8008806:	f7ff fe5e 	bl	80084c6 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	f003 0320 	and.w	r3, r3, #32
 8008812:	2b00      	cmp	r3, #0
 8008814:	d004      	beq.n	8008820 <HAL_RCCEx_PeriphCLKConfig+0x176>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800881a:	4618      	mov	r0, r3
 800881c:	f7ff fe53 	bl	80084c6 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	f003 0304 	and.w	r3, r3, #4
 8008828:	2b00      	cmp	r3, #0
 800882a:	d004      	beq.n	8008836 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	6a1b      	ldr	r3, [r3, #32]
 8008830:	4618      	mov	r0, r3
 8008832:	f7ff fe2b 	bl	800848c <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	f003 0308 	and.w	r3, r3, #8
 800883e:	2b00      	cmp	r3, #0
 8008840:	d004      	beq.n	800884c <HAL_RCCEx_PeriphCLKConfig+0x1a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008846:	4618      	mov	r0, r3
 8008848:	f7ff fe20 	bl	800848c <LL_RCC_SetI2CClockSource>
  }
#endif

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008854:	2b00      	cmp	r3, #0
 8008856:	d022      	beq.n	800889e <HAL_RCCEx_PeriphCLKConfig+0x1f4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800885c:	4618      	mov	r0, r3
 800885e:	f7ff fe8e 	bl	800857e <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008866:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800886a:	d107      	bne.n	800887c <HAL_RCCEx_PeriphCLKConfig+0x1d2>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 800886c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008870:	68db      	ldr	r3, [r3, #12]
 8008872:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008876:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800887a:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
  if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008880:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008884:	d10b      	bne.n	800889e <HAL_RCCEx_PeriphCLKConfig+0x1f4>
  {
    /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
    ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	3304      	adds	r3, #4
 800888a:	4618      	mov	r0, r3
 800888c:	f000 f8dd 	bl	8008a4a <RCCEx_PLLSAI1_ConfigNQ>
 8008890:	4603      	mov	r3, r0
 8008892:	77fb      	strb	r3, [r7, #31]

    if (ret != HAL_OK)
 8008894:	7ffb      	ldrb	r3, [r7, #31]
 8008896:	2b00      	cmp	r3, #0
 8008898:	d001      	beq.n	800889e <HAL_RCCEx_PeriphCLKConfig+0x1f4>
    {
      /* set overall return value */
      status = ret;
 800889a:	7ffb      	ldrb	r3, [r7, #31]
 800889c:	77bb      	strb	r3, [r7, #30]
#endif
  }
#endif

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80088a6:	2b00      	cmp	r3, #0
 80088a8:	d02b      	beq.n	8008902 <HAL_RCCEx_PeriphCLKConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80088ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80088b2:	d008      	beq.n	80088c6 <HAL_RCCEx_PeriphCLKConfig+0x21c>
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80088b8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80088bc:	d003      	beq.n	80088c6 <HAL_RCCEx_PeriphCLKConfig+0x21c>
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80088c2:	2b00      	cmp	r3, #0
 80088c4:	d105      	bne.n	80088d2 <HAL_RCCEx_PeriphCLKConfig+0x228>
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80088ca:	4618      	mov	r0, r3
 80088cc:	f7ff fe2b 	bl	8008526 <LL_RCC_SetRNGClockSource>
 80088d0:	e00a      	b.n	80088e8 <HAL_RCCEx_PeriphCLKConfig+0x23e>
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80088d6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80088da:	60fb      	str	r3, [r7, #12]
 80088dc:	2000      	movs	r0, #0
 80088de:	f7ff fe22 	bl	8008526 <LL_RCC_SetRNGClockSource>
 80088e2:	68f8      	ldr	r0, [r7, #12]
 80088e4:	f7ff fe35 	bl	8008552 <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80088ec:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 80088f0:	d107      	bne.n	8008902 <HAL_RCCEx_PeriphCLKConfig+0x258>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 80088f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80088f6:	68db      	ldr	r3, [r3, #12]
 80088f8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80088fc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008900:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	681b      	ldr	r3, [r3, #0]
 8008906:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800890a:	2b00      	cmp	r3, #0
 800890c:	d022      	beq.n	8008954 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008912:	4618      	mov	r0, r3
 8008914:	f7ff fe3e 	bl	8008594 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800891c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008920:	d107      	bne.n	8008932 <HAL_RCCEx_PeriphCLKConfig+0x288>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8008922:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008926:	68db      	ldr	r3, [r3, #12]
 8008928:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800892c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008930:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
  if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008936:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800893a:	d10b      	bne.n	8008954 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
    ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	3304      	adds	r3, #4
 8008940:	4618      	mov	r0, r3
 8008942:	f000 f8dd 	bl	8008b00 <RCCEx_PLLSAI1_ConfigNR>
 8008946:	4603      	mov	r3, r0
 8008948:	77fb      	strb	r3, [r7, #31]

    if (ret != HAL_OK)
 800894a:	7ffb      	ldrb	r3, [r7, #31]
 800894c:	2b00      	cmp	r3, #0
 800894e:	d001      	beq.n	8008954 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
    {
      /* set overall return value */
      status = ret;
 8008950:	7ffb      	ldrb	r3, [r7, #31]
 8008952:	77bb      	strb	r3, [r7, #30]
  }
#endif
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800895c:	2b00      	cmp	r3, #0
 800895e:	d004      	beq.n	800896a <HAL_RCCEx_PeriphCLKConfig+0x2c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008964:	4618      	mov	r0, r3
 8008966:	f7ff fd27 	bl	80083b8 <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	681b      	ldr	r3, [r3, #0]
 800896e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008972:	2b00      	cmp	r3, #0
 8008974:	d009      	beq.n	800898a <HAL_RCCEx_PeriphCLKConfig+0x2e0>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800897a:	4618      	mov	r0, r3
 800897c:	f7ff fd46 	bl	800840c <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008984:	4618      	mov	r0, r3
 8008986:	f7ff fd2d 	bl	80083e4 <LL_RCC_SetSMPSClockSource>
  }
#endif


  return status;
 800898a:	7fbb      	ldrb	r3, [r7, #30]
}
 800898c:	4618      	mov	r0, r3
 800898e:	3720      	adds	r7, #32
 8008990:	46bd      	mov	sp, r7
 8008992:	bd80      	pop	{r7, pc}

08008994 <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8008994:	b580      	push	{r7, lr}
 8008996:	b084      	sub	sp, #16
 8008998:	af00      	add	r7, sp, #0
 800899a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800899c:	2300      	movs	r3, #0
 800899e:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 80089a0:	f7ff fe62 	bl	8008668 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80089a4:	f7fd f920 	bl	8005be8 <HAL_GetTick>
 80089a8:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80089aa:	e009      	b.n	80089c0 <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80089ac:	f7fd f91c 	bl	8005be8 <HAL_GetTick>
 80089b0:	4602      	mov	r2, r0
 80089b2:	68bb      	ldr	r3, [r7, #8]
 80089b4:	1ad3      	subs	r3, r2, r3
 80089b6:	2b02      	cmp	r3, #2
 80089b8:	d902      	bls.n	80089c0 <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 80089ba:	2303      	movs	r3, #3
 80089bc:	73fb      	strb	r3, [r7, #15]
      break;
 80089be:	e004      	b.n	80089ca <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80089c0:	f7ff fe61 	bl	8008686 <LL_RCC_PLLSAI1_IsReady>
 80089c4:	4603      	mov	r3, r0
 80089c6:	2b00      	cmp	r3, #0
 80089c8:	d1f0      	bne.n	80089ac <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 80089ca:	7bfb      	ldrb	r3, [r7, #15]
 80089cc:	2b00      	cmp	r3, #0
 80089ce:	d137      	bne.n	8008a40 <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 80089d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80089d4:	691b      	ldr	r3, [r3, #16]
 80089d6:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	021b      	lsls	r3, r3, #8
 80089e0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80089e4:	4313      	orrs	r3, r2
 80089e6:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 80089e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80089ec:	691b      	ldr	r3, [r3, #16]
 80089ee:	f423 1278 	bic.w	r2, r3, #4063232	; 0x3e0000
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	685b      	ldr	r3, [r3, #4]
 80089f6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80089fa:	4313      	orrs	r3, r2
 80089fc:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 80089fe:	f7ff fe24 	bl	800864a <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008a02:	f7fd f8f1 	bl	8005be8 <HAL_GetTick>
 8008a06:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8008a08:	e009      	b.n	8008a1e <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8008a0a:	f7fd f8ed 	bl	8005be8 <HAL_GetTick>
 8008a0e:	4602      	mov	r2, r0
 8008a10:	68bb      	ldr	r3, [r7, #8]
 8008a12:	1ad3      	subs	r3, r2, r3
 8008a14:	2b02      	cmp	r3, #2
 8008a16:	d902      	bls.n	8008a1e <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 8008a18:	2303      	movs	r3, #3
 8008a1a:	73fb      	strb	r3, [r7, #15]
        break;
 8008a1c:	e004      	b.n	8008a28 <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8008a1e:	f7ff fe32 	bl	8008686 <LL_RCC_PLLSAI1_IsReady>
 8008a22:	4603      	mov	r3, r0
 8008a24:	2b01      	cmp	r3, #1
 8008a26:	d1f0      	bne.n	8008a0a <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 8008a28:	7bfb      	ldrb	r3, [r7, #15]
 8008a2a:	2b00      	cmp	r3, #0
 8008a2c:	d108      	bne.n	8008a40 <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8008a2e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008a32:	691a      	ldr	r2, [r3, #16]
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	691b      	ldr	r3, [r3, #16]
 8008a38:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008a3c:	4313      	orrs	r3, r2
 8008a3e:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8008a40:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a42:	4618      	mov	r0, r3
 8008a44:	3710      	adds	r7, #16
 8008a46:	46bd      	mov	sp, r7
 8008a48:	bd80      	pop	{r7, pc}

08008a4a <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8008a4a:	b580      	push	{r7, lr}
 8008a4c:	b084      	sub	sp, #16
 8008a4e:	af00      	add	r7, sp, #0
 8008a50:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008a52:	2300      	movs	r3, #0
 8008a54:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8008a56:	f7ff fe07 	bl	8008668 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8008a5a:	f7fd f8c5 	bl	8005be8 <HAL_GetTick>
 8008a5e:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8008a60:	e009      	b.n	8008a76 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8008a62:	f7fd f8c1 	bl	8005be8 <HAL_GetTick>
 8008a66:	4602      	mov	r2, r0
 8008a68:	68bb      	ldr	r3, [r7, #8]
 8008a6a:	1ad3      	subs	r3, r2, r3
 8008a6c:	2b02      	cmp	r3, #2
 8008a6e:	d902      	bls.n	8008a76 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 8008a70:	2303      	movs	r3, #3
 8008a72:	73fb      	strb	r3, [r7, #15]
      break;
 8008a74:	e004      	b.n	8008a80 <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8008a76:	f7ff fe06 	bl	8008686 <LL_RCC_PLLSAI1_IsReady>
 8008a7a:	4603      	mov	r3, r0
 8008a7c:	2b00      	cmp	r3, #0
 8008a7e:	d1f0      	bne.n	8008a62 <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 8008a80:	7bfb      	ldrb	r3, [r7, #15]
 8008a82:	2b00      	cmp	r3, #0
 8008a84:	d137      	bne.n	8008af6 <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8008a86:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008a8a:	691b      	ldr	r3, [r3, #16]
 8008a8c:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	021b      	lsls	r3, r3, #8
 8008a96:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008a9a:	4313      	orrs	r3, r2
 8008a9c:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 8008a9e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008aa2:	691b      	ldr	r3, [r3, #16]
 8008aa4:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	689b      	ldr	r3, [r3, #8]
 8008aac:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008ab0:	4313      	orrs	r3, r2
 8008ab2:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8008ab4:	f7ff fdc9 	bl	800864a <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008ab8:	f7fd f896 	bl	8005be8 <HAL_GetTick>
 8008abc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8008abe:	e009      	b.n	8008ad4 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8008ac0:	f7fd f892 	bl	8005be8 <HAL_GetTick>
 8008ac4:	4602      	mov	r2, r0
 8008ac6:	68bb      	ldr	r3, [r7, #8]
 8008ac8:	1ad3      	subs	r3, r2, r3
 8008aca:	2b02      	cmp	r3, #2
 8008acc:	d902      	bls.n	8008ad4 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 8008ace:	2303      	movs	r3, #3
 8008ad0:	73fb      	strb	r3, [r7, #15]
        break;
 8008ad2:	e004      	b.n	8008ade <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8008ad4:	f7ff fdd7 	bl	8008686 <LL_RCC_PLLSAI1_IsReady>
 8008ad8:	4603      	mov	r3, r0
 8008ada:	2b01      	cmp	r3, #1
 8008adc:	d1f0      	bne.n	8008ac0 <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 8008ade:	7bfb      	ldrb	r3, [r7, #15]
 8008ae0:	2b00      	cmp	r3, #0
 8008ae2:	d108      	bne.n	8008af6 <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8008ae4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008ae8:	691a      	ldr	r2, [r3, #16]
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	691b      	ldr	r3, [r3, #16]
 8008aee:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008af2:	4313      	orrs	r3, r2
 8008af4:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8008af6:	7bfb      	ldrb	r3, [r7, #15]
}
 8008af8:	4618      	mov	r0, r3
 8008afa:	3710      	adds	r7, #16
 8008afc:	46bd      	mov	sp, r7
 8008afe:	bd80      	pop	{r7, pc}

08008b00 <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8008b00:	b580      	push	{r7, lr}
 8008b02:	b084      	sub	sp, #16
 8008b04:	af00      	add	r7, sp, #0
 8008b06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008b08:	2300      	movs	r3, #0
 8008b0a:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8008b0c:	f7ff fdac 	bl	8008668 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8008b10:	f7fd f86a 	bl	8005be8 <HAL_GetTick>
 8008b14:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8008b16:	e009      	b.n	8008b2c <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8008b18:	f7fd f866 	bl	8005be8 <HAL_GetTick>
 8008b1c:	4602      	mov	r2, r0
 8008b1e:	68bb      	ldr	r3, [r7, #8]
 8008b20:	1ad3      	subs	r3, r2, r3
 8008b22:	2b02      	cmp	r3, #2
 8008b24:	d902      	bls.n	8008b2c <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 8008b26:	2303      	movs	r3, #3
 8008b28:	73fb      	strb	r3, [r7, #15]
      break;
 8008b2a:	e004      	b.n	8008b36 <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8008b2c:	f7ff fdab 	bl	8008686 <LL_RCC_PLLSAI1_IsReady>
 8008b30:	4603      	mov	r3, r0
 8008b32:	2b00      	cmp	r3, #0
 8008b34:	d1f0      	bne.n	8008b18 <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 8008b36:	7bfb      	ldrb	r3, [r7, #15]
 8008b38:	2b00      	cmp	r3, #0
 8008b3a:	d137      	bne.n	8008bac <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8008b3c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008b40:	691b      	ldr	r3, [r3, #16]
 8008b42:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	021b      	lsls	r3, r3, #8
 8008b4c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008b50:	4313      	orrs	r3, r2
 8008b52:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 8008b54:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008b58:	691b      	ldr	r3, [r3, #16]
 8008b5a:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	68db      	ldr	r3, [r3, #12]
 8008b62:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008b66:	4313      	orrs	r3, r2
 8008b68:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8008b6a:	f7ff fd6e 	bl	800864a <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008b6e:	f7fd f83b 	bl	8005be8 <HAL_GetTick>
 8008b72:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8008b74:	e009      	b.n	8008b8a <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8008b76:	f7fd f837 	bl	8005be8 <HAL_GetTick>
 8008b7a:	4602      	mov	r2, r0
 8008b7c:	68bb      	ldr	r3, [r7, #8]
 8008b7e:	1ad3      	subs	r3, r2, r3
 8008b80:	2b02      	cmp	r3, #2
 8008b82:	d902      	bls.n	8008b8a <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 8008b84:	2303      	movs	r3, #3
 8008b86:	73fb      	strb	r3, [r7, #15]
        break;
 8008b88:	e004      	b.n	8008b94 <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8008b8a:	f7ff fd7c 	bl	8008686 <LL_RCC_PLLSAI1_IsReady>
 8008b8e:	4603      	mov	r3, r0
 8008b90:	2b01      	cmp	r3, #1
 8008b92:	d1f0      	bne.n	8008b76 <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 8008b94:	7bfb      	ldrb	r3, [r7, #15]
 8008b96:	2b00      	cmp	r3, #0
 8008b98:	d108      	bne.n	8008bac <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8008b9a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008b9e:	691a      	ldr	r2, [r3, #16]
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	691b      	ldr	r3, [r3, #16]
 8008ba4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008ba8:	4313      	orrs	r3, r2
 8008baa:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8008bac:	7bfb      	ldrb	r3, [r7, #15]
}
 8008bae:	4618      	mov	r0, r3
 8008bb0:	3710      	adds	r7, #16
 8008bb2:	46bd      	mov	sp, r7
 8008bb4:	bd80      	pop	{r7, pc}

08008bb6 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8008bb6:	b580      	push	{r7, lr}
 8008bb8:	b082      	sub	sp, #8
 8008bba:	af00      	add	r7, sp, #0
 8008bbc:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	2b00      	cmp	r3, #0
 8008bc2:	d101      	bne.n	8008bc8 <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 8008bc4:	2301      	movs	r3, #1
 8008bc6:	e090      	b.n	8008cea <HAL_RTC_Init+0x134>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8008bce:	b2db      	uxtb	r3, r3
 8008bd0:	2b00      	cmp	r3, #0
 8008bd2:	d106      	bne.n	8008be2 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	2200      	movs	r2, #0
 8008bd8:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8008bdc:	6878      	ldr	r0, [r7, #4]
 8008bde:	f7fc fd4f 	bl	8005680 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	2202      	movs	r2, #2
 8008be6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	681b      	ldr	r3, [r3, #0]
 8008bee:	22ca      	movs	r2, #202	; 0xca
 8008bf0:	625a      	str	r2, [r3, #36]	; 0x24
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	681b      	ldr	r3, [r3, #0]
 8008bf6:	2253      	movs	r2, #83	; 0x53
 8008bf8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8008bfa:	6878      	ldr	r0, [r7, #4]
 8008bfc:	f000 faba 	bl	8009174 <RTC_EnterInitMode>
 8008c00:	4603      	mov	r3, r0
 8008c02:	2b00      	cmp	r3, #0
 8008c04:	d009      	beq.n	8008c1a <HAL_RTC_Init+0x64>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	22ff      	movs	r2, #255	; 0xff
 8008c0c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	2204      	movs	r2, #4
 8008c12:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    return HAL_ERROR;
 8008c16:	2301      	movs	r3, #1
 8008c18:	e067      	b.n	8008cea <HAL_RTC_Init+0x134>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	681b      	ldr	r3, [r3, #0]
 8008c1e:	689b      	ldr	r3, [r3, #8]
 8008c20:	687a      	ldr	r2, [r7, #4]
 8008c22:	6812      	ldr	r2, [r2, #0]
 8008c24:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8008c28:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008c2c:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	681b      	ldr	r3, [r3, #0]
 8008c32:	6899      	ldr	r1, [r3, #8]
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	685a      	ldr	r2, [r3, #4]
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	691b      	ldr	r3, [r3, #16]
 8008c3c:	431a      	orrs	r2, r3
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	699b      	ldr	r3, [r3, #24]
 8008c42:	431a      	orrs	r2, r3
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	681b      	ldr	r3, [r3, #0]
 8008c48:	430a      	orrs	r2, r1
 8008c4a:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	681b      	ldr	r3, [r3, #0]
 8008c50:	687a      	ldr	r2, [r7, #4]
 8008c52:	68d2      	ldr	r2, [r2, #12]
 8008c54:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	681b      	ldr	r3, [r3, #0]
 8008c5a:	6919      	ldr	r1, [r3, #16]
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	689b      	ldr	r3, [r3, #8]
 8008c60:	041a      	lsls	r2, r3, #16
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	681b      	ldr	r3, [r3, #0]
 8008c66:	430a      	orrs	r2, r1
 8008c68:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	681b      	ldr	r3, [r3, #0]
 8008c6e:	68da      	ldr	r2, [r3, #12]
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	681b      	ldr	r3, [r3, #0]
 8008c74:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008c78:	60da      	str	r2, [r3, #12]

    hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	681b      	ldr	r3, [r3, #0]
 8008c7e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	f022 0203 	bic.w	r2, r2, #3
 8008c88:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	681b      	ldr	r3, [r3, #0]
 8008c8e:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	69da      	ldr	r2, [r3, #28]
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	695b      	ldr	r3, [r3, #20]
 8008c98:	431a      	orrs	r2, r3
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	681b      	ldr	r3, [r3, #0]
 8008c9e:	430a      	orrs	r2, r1
 8008ca0:	64da      	str	r2, [r3, #76]	; 0x4c

    /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	681b      	ldr	r3, [r3, #0]
 8008ca6:	689b      	ldr	r3, [r3, #8]
 8008ca8:	f003 0320 	and.w	r3, r3, #32
 8008cac:	2b00      	cmp	r3, #0
 8008cae:	d113      	bne.n	8008cd8 <HAL_RTC_Init+0x122>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8008cb0:	6878      	ldr	r0, [r7, #4]
 8008cb2:	f000 fa39 	bl	8009128 <HAL_RTC_WaitForSynchro>
 8008cb6:	4603      	mov	r3, r0
 8008cb8:	2b00      	cmp	r3, #0
 8008cba:	d00d      	beq.n	8008cd8 <HAL_RTC_Init+0x122>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	681b      	ldr	r3, [r3, #0]
 8008cc0:	22ff      	movs	r2, #255	; 0xff
 8008cc2:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	2204      	movs	r2, #4
 8008cc8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */ 
        __HAL_UNLOCK(hrtc);
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	2200      	movs	r2, #0
 8008cd0:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8008cd4:	2301      	movs	r3, #1
 8008cd6:	e008      	b.n	8008cea <HAL_RTC_Init+0x134>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	681b      	ldr	r3, [r3, #0]
 8008cdc:	22ff      	movs	r2, #255	; 0xff
 8008cde:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	2201      	movs	r2, #1
 8008ce4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    return HAL_OK;
 8008ce8:	2300      	movs	r3, #0
  }
}
 8008cea:	4618      	mov	r0, r3
 8008cec:	3708      	adds	r7, #8
 8008cee:	46bd      	mov	sp, r7
 8008cf0:	bd80      	pop	{r7, pc}

08008cf2 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format 
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8008cf2:	b590      	push	{r4, r7, lr}
 8008cf4:	b087      	sub	sp, #28
 8008cf6:	af00      	add	r7, sp, #0
 8008cf8:	60f8      	str	r0, [r7, #12]
 8008cfa:	60b9      	str	r1, [r7, #8]
 8008cfc:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */ 
  __HAL_LOCK(hrtc);
 8008cfe:	68fb      	ldr	r3, [r7, #12]
 8008d00:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008d04:	2b01      	cmp	r3, #1
 8008d06:	d101      	bne.n	8008d0c <HAL_RTC_SetTime+0x1a>
 8008d08:	2302      	movs	r3, #2
 8008d0a:	e0b2      	b.n	8008e72 <HAL_RTC_SetTime+0x180>
 8008d0c:	68fb      	ldr	r3, [r7, #12]
 8008d0e:	2201      	movs	r2, #1
 8008d10:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8008d14:	68fb      	ldr	r3, [r7, #12]
 8008d16:	2202      	movs	r2, #2
 8008d18:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if(Format == RTC_FORMAT_BIN)
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	2b00      	cmp	r3, #0
 8008d20:	d126      	bne.n	8008d70 <HAL_RTC_SetTime+0x7e>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8008d22:	68fb      	ldr	r3, [r7, #12]
 8008d24:	681b      	ldr	r3, [r3, #0]
 8008d26:	689b      	ldr	r3, [r3, #8]
 8008d28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008d2c:	2b00      	cmp	r3, #0
 8008d2e:	d102      	bne.n	8008d36 <HAL_RTC_SetTime+0x44>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8008d30:	68bb      	ldr	r3, [r7, #8]
 8008d32:	2200      	movs	r2, #0
 8008d34:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8008d36:	68bb      	ldr	r3, [r7, #8]
 8008d38:	781b      	ldrb	r3, [r3, #0]
 8008d3a:	4618      	mov	r0, r3
 8008d3c:	f000 fa44 	bl	80091c8 <RTC_ByteToBcd2>
 8008d40:	4603      	mov	r3, r0
 8008d42:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8008d44:	68bb      	ldr	r3, [r7, #8]
 8008d46:	785b      	ldrb	r3, [r3, #1]
 8008d48:	4618      	mov	r0, r3
 8008d4a:	f000 fa3d 	bl	80091c8 <RTC_ByteToBcd2>
 8008d4e:	4603      	mov	r3, r0
 8008d50:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8008d52:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8008d54:	68bb      	ldr	r3, [r7, #8]
 8008d56:	789b      	ldrb	r3, [r3, #2]
 8008d58:	4618      	mov	r0, r3
 8008d5a:	f000 fa35 	bl	80091c8 <RTC_ByteToBcd2>
 8008d5e:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8008d60:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 8008d64:	68bb      	ldr	r3, [r7, #8]
 8008d66:	78db      	ldrb	r3, [r3, #3]
 8008d68:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8008d6a:	4313      	orrs	r3, r2
 8008d6c:	617b      	str	r3, [r7, #20]
 8008d6e:	e018      	b.n	8008da2 <HAL_RTC_SetTime+0xb0>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8008d70:	68fb      	ldr	r3, [r7, #12]
 8008d72:	681b      	ldr	r3, [r3, #0]
 8008d74:	689b      	ldr	r3, [r3, #8]
 8008d76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008d7a:	2b00      	cmp	r3, #0
 8008d7c:	d102      	bne.n	8008d84 <HAL_RTC_SetTime+0x92>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8008d7e:	68bb      	ldr	r3, [r7, #8]
 8008d80:	2200      	movs	r2, #0
 8008d82:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8008d84:	68bb      	ldr	r3, [r7, #8]
 8008d86:	781b      	ldrb	r3, [r3, #0]
 8008d88:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8008d8a:	68bb      	ldr	r3, [r7, #8]
 8008d8c:	785b      	ldrb	r3, [r3, #1]
 8008d8e:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8008d90:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 8008d92:	68ba      	ldr	r2, [r7, #8]
 8008d94:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8008d96:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 8008d98:	68bb      	ldr	r3, [r7, #8]
 8008d9a:	78db      	ldrb	r3, [r3, #3]
 8008d9c:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8008d9e:	4313      	orrs	r3, r2
 8008da0:	617b      	str	r3, [r7, #20]
  }
  UNUSED(tmpreg);
  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008da2:	68fb      	ldr	r3, [r7, #12]
 8008da4:	681b      	ldr	r3, [r3, #0]
 8008da6:	22ca      	movs	r2, #202	; 0xca
 8008da8:	625a      	str	r2, [r3, #36]	; 0x24
 8008daa:	68fb      	ldr	r3, [r7, #12]
 8008dac:	681b      	ldr	r3, [r3, #0]
 8008dae:	2253      	movs	r2, #83	; 0x53
 8008db0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8008db2:	68f8      	ldr	r0, [r7, #12]
 8008db4:	f000 f9de 	bl	8009174 <RTC_EnterInitMode>
 8008db8:	4603      	mov	r3, r0
 8008dba:	2b00      	cmp	r3, #0
 8008dbc:	d00d      	beq.n	8008dda <HAL_RTC_SetTime+0xe8>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008dbe:	68fb      	ldr	r3, [r7, #12]
 8008dc0:	681b      	ldr	r3, [r3, #0]
 8008dc2:	22ff      	movs	r2, #255	; 0xff
 8008dc4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8008dc6:	68fb      	ldr	r3, [r7, #12]
 8008dc8:	2204      	movs	r2, #4
 8008dca:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */ 
    __HAL_UNLOCK(hrtc);
 8008dce:	68fb      	ldr	r3, [r7, #12]
 8008dd0:	2200      	movs	r2, #0
 8008dd2:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_ERROR;
 8008dd6:	2301      	movs	r3, #1
 8008dd8:	e04b      	b.n	8008e72 <HAL_RTC_SetTime+0x180>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8008dda:	68fb      	ldr	r3, [r7, #12]
 8008ddc:	681a      	ldr	r2, [r3, #0]
 8008dde:	697b      	ldr	r3, [r7, #20]
 8008de0:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8008de4:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8008de8:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8008dea:	68fb      	ldr	r3, [r7, #12]
 8008dec:	681b      	ldr	r3, [r3, #0]
 8008dee:	689a      	ldr	r2, [r3, #8]
 8008df0:	68fb      	ldr	r3, [r7, #12]
 8008df2:	681b      	ldr	r3, [r3, #0]
 8008df4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8008df8:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8008dfa:	68fb      	ldr	r3, [r7, #12]
 8008dfc:	681b      	ldr	r3, [r3, #0]
 8008dfe:	6899      	ldr	r1, [r3, #8]
 8008e00:	68bb      	ldr	r3, [r7, #8]
 8008e02:	68da      	ldr	r2, [r3, #12]
 8008e04:	68bb      	ldr	r3, [r7, #8]
 8008e06:	691b      	ldr	r3, [r3, #16]
 8008e08:	431a      	orrs	r2, r3
 8008e0a:	68fb      	ldr	r3, [r7, #12]
 8008e0c:	681b      	ldr	r3, [r3, #0]
 8008e0e:	430a      	orrs	r2, r1
 8008e10:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8008e12:	68fb      	ldr	r3, [r7, #12]
 8008e14:	681b      	ldr	r3, [r3, #0]
 8008e16:	68da      	ldr	r2, [r3, #12]
 8008e18:	68fb      	ldr	r3, [r7, #12]
 8008e1a:	681b      	ldr	r3, [r3, #0]
 8008e1c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008e20:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8008e22:	68fb      	ldr	r3, [r7, #12]
 8008e24:	681b      	ldr	r3, [r3, #0]
 8008e26:	689b      	ldr	r3, [r3, #8]
 8008e28:	f003 0320 	and.w	r3, r3, #32
 8008e2c:	2b00      	cmp	r3, #0
 8008e2e:	d113      	bne.n	8008e58 <HAL_RTC_SetTime+0x166>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8008e30:	68f8      	ldr	r0, [r7, #12]
 8008e32:	f000 f979 	bl	8009128 <HAL_RTC_WaitForSynchro>
 8008e36:	4603      	mov	r3, r0
 8008e38:	2b00      	cmp	r3, #0
 8008e3a:	d00d      	beq.n	8008e58 <HAL_RTC_SetTime+0x166>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008e3c:	68fb      	ldr	r3, [r7, #12]
 8008e3e:	681b      	ldr	r3, [r3, #0]
 8008e40:	22ff      	movs	r2, #255	; 0xff
 8008e42:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8008e44:	68fb      	ldr	r3, [r7, #12]
 8008e46:	2204      	movs	r2, #4
 8008e48:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */ 
        __HAL_UNLOCK(hrtc);
 8008e4c:	68fb      	ldr	r3, [r7, #12]
 8008e4e:	2200      	movs	r2, #0
 8008e50:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8008e54:	2301      	movs	r3, #1
 8008e56:	e00c      	b.n	8008e72 <HAL_RTC_SetTime+0x180>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008e58:	68fb      	ldr	r3, [r7, #12]
 8008e5a:	681b      	ldr	r3, [r3, #0]
 8008e5c:	22ff      	movs	r2, #255	; 0xff
 8008e5e:	625a      	str	r2, [r3, #36]	; 0x24
    
   hrtc->State = HAL_RTC_STATE_READY;
 8008e60:	68fb      	ldr	r3, [r7, #12]
 8008e62:	2201      	movs	r2, #1
 8008e64:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

   __HAL_UNLOCK(hrtc); 
 8008e68:	68fb      	ldr	r3, [r7, #12]
 8008e6a:	2200      	movs	r2, #0
 8008e6c:	f883 2020 	strb.w	r2, [r3, #32]

   return HAL_OK;
 8008e70:	2300      	movs	r3, #0
  }
}
 8008e72:	4618      	mov	r0, r3
 8008e74:	371c      	adds	r7, #28
 8008e76:	46bd      	mov	sp, r7
 8008e78:	bd90      	pop	{r4, r7, pc}

08008e7a <HAL_RTC_GetTime>:
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read
  *        to ensure consistency between the time and date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8008e7a:	b580      	push	{r7, lr}
 8008e7c:	b086      	sub	sp, #24
 8008e7e:	af00      	add	r7, sp, #0
 8008e80:	60f8      	str	r0, [r7, #12]
 8008e82:	60b9      	str	r1, [r7, #8]
 8008e84:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8008e86:	68fb      	ldr	r3, [r7, #12]
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008e8c:	68bb      	ldr	r3, [r7, #8]
 8008e8e:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8008e90:	68fb      	ldr	r3, [r7, #12]
 8008e92:	681b      	ldr	r3, [r3, #0]
 8008e94:	691b      	ldr	r3, [r3, #16]
 8008e96:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8008e9a:	68bb      	ldr	r3, [r7, #8]
 8008e9c:	609a      	str	r2, [r3, #8]
  
  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8008e9e:	68fb      	ldr	r3, [r7, #12]
 8008ea0:	681b      	ldr	r3, [r3, #0]
 8008ea2:	681b      	ldr	r3, [r3, #0]
 8008ea4:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8008ea8:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8008eac:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 8008eae:	697b      	ldr	r3, [r7, #20]
 8008eb0:	0c1b      	lsrs	r3, r3, #16
 8008eb2:	b2db      	uxtb	r3, r3
 8008eb4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008eb8:	b2da      	uxtb	r2, r3
 8008eba:	68bb      	ldr	r3, [r7, #8]
 8008ebc:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >>8U);
 8008ebe:	697b      	ldr	r3, [r7, #20]
 8008ec0:	0a1b      	lsrs	r3, r3, #8
 8008ec2:	b2db      	uxtb	r3, r3
 8008ec4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008ec8:	b2da      	uxtb	r2, r3
 8008eca:	68bb      	ldr	r3, [r7, #8]
 8008ecc:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 8008ece:	697b      	ldr	r3, [r7, #20]
 8008ed0:	b2db      	uxtb	r3, r3
 8008ed2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008ed6:	b2da      	uxtb	r2, r3
 8008ed8:	68bb      	ldr	r3, [r7, #8]
 8008eda:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 8008edc:	697b      	ldr	r3, [r7, #20]
 8008ede:	0c1b      	lsrs	r3, r3, #16
 8008ee0:	b2db      	uxtb	r3, r3
 8008ee2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008ee6:	b2da      	uxtb	r2, r3
 8008ee8:	68bb      	ldr	r3, [r7, #8]
 8008eea:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	2b00      	cmp	r3, #0
 8008ef0:	d11a      	bne.n	8008f28 <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8008ef2:	68bb      	ldr	r3, [r7, #8]
 8008ef4:	781b      	ldrb	r3, [r3, #0]
 8008ef6:	4618      	mov	r0, r3
 8008ef8:	f000 f986 	bl	8009208 <RTC_Bcd2ToByte>
 8008efc:	4603      	mov	r3, r0
 8008efe:	461a      	mov	r2, r3
 8008f00:	68bb      	ldr	r3, [r7, #8]
 8008f02:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8008f04:	68bb      	ldr	r3, [r7, #8]
 8008f06:	785b      	ldrb	r3, [r3, #1]
 8008f08:	4618      	mov	r0, r3
 8008f0a:	f000 f97d 	bl	8009208 <RTC_Bcd2ToByte>
 8008f0e:	4603      	mov	r3, r0
 8008f10:	461a      	mov	r2, r3
 8008f12:	68bb      	ldr	r3, [r7, #8]
 8008f14:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8008f16:	68bb      	ldr	r3, [r7, #8]
 8008f18:	789b      	ldrb	r3, [r3, #2]
 8008f1a:	4618      	mov	r0, r3
 8008f1c:	f000 f974 	bl	8009208 <RTC_Bcd2ToByte>
 8008f20:	4603      	mov	r3, r0
 8008f22:	461a      	mov	r2, r3
 8008f24:	68bb      	ldr	r3, [r7, #8]
 8008f26:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8008f28:	2300      	movs	r3, #0
}
 8008f2a:	4618      	mov	r0, r3
 8008f2c:	3718      	adds	r7, #24
 8008f2e:	46bd      	mov	sp, r7
 8008f30:	bd80      	pop	{r7, pc}

08008f32 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format 
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8008f32:	b590      	push	{r4, r7, lr}
 8008f34:	b087      	sub	sp, #28
 8008f36:	af00      	add	r7, sp, #0
 8008f38:	60f8      	str	r0, [r7, #12]
 8008f3a:	60b9      	str	r1, [r7, #8]
 8008f3c:	607a      	str	r2, [r7, #4]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 8008f3e:	68fb      	ldr	r3, [r7, #12]
 8008f40:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008f44:	2b01      	cmp	r3, #1
 8008f46:	d101      	bne.n	8008f4c <HAL_RTC_SetDate+0x1a>
 8008f48:	2302      	movs	r3, #2
 8008f4a:	e09c      	b.n	8009086 <HAL_RTC_SetDate+0x154>
 8008f4c:	68fb      	ldr	r3, [r7, #12]
 8008f4e:	2201      	movs	r2, #1
 8008f50:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8008f54:	68fb      	ldr	r3, [r7, #12]
 8008f56:	2202      	movs	r2, #2
 8008f58:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	2b00      	cmp	r3, #0
 8008f60:	d10e      	bne.n	8008f80 <HAL_RTC_SetDate+0x4e>
 8008f62:	68bb      	ldr	r3, [r7, #8]
 8008f64:	785b      	ldrb	r3, [r3, #1]
 8008f66:	f003 0310 	and.w	r3, r3, #16
 8008f6a:	2b00      	cmp	r3, #0
 8008f6c:	d008      	beq.n	8008f80 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8008f6e:	68bb      	ldr	r3, [r7, #8]
 8008f70:	785b      	ldrb	r3, [r3, #1]
 8008f72:	f023 0310 	bic.w	r3, r3, #16
 8008f76:	b2db      	uxtb	r3, r3
 8008f78:	330a      	adds	r3, #10
 8008f7a:	b2da      	uxtb	r2, r3
 8008f7c:	68bb      	ldr	r3, [r7, #8]
 8008f7e:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	2b00      	cmp	r3, #0
 8008f84:	d11c      	bne.n	8008fc0 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8008f86:	68bb      	ldr	r3, [r7, #8]
 8008f88:	78db      	ldrb	r3, [r3, #3]
 8008f8a:	4618      	mov	r0, r3
 8008f8c:	f000 f91c 	bl	80091c8 <RTC_ByteToBcd2>
 8008f90:	4603      	mov	r3, r0
 8008f92:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8008f94:	68bb      	ldr	r3, [r7, #8]
 8008f96:	785b      	ldrb	r3, [r3, #1]
 8008f98:	4618      	mov	r0, r3
 8008f9a:	f000 f915 	bl	80091c8 <RTC_ByteToBcd2>
 8008f9e:	4603      	mov	r3, r0
 8008fa0:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8008fa2:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8008fa4:	68bb      	ldr	r3, [r7, #8]
 8008fa6:	789b      	ldrb	r3, [r3, #2]
 8008fa8:	4618      	mov	r0, r3
 8008faa:	f000 f90d 	bl	80091c8 <RTC_ByteToBcd2>
 8008fae:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8008fb0:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13U));
 8008fb4:	68bb      	ldr	r3, [r7, #8]
 8008fb6:	781b      	ldrb	r3, [r3, #0]
 8008fb8:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8008fba:	4313      	orrs	r3, r2
 8008fbc:	617b      	str	r3, [r7, #20]
 8008fbe:	e00e      	b.n	8008fde <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8008fc0:	68bb      	ldr	r3, [r7, #8]
 8008fc2:	78db      	ldrb	r3, [r3, #3]
 8008fc4:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 8008fc6:	68bb      	ldr	r3, [r7, #8]
 8008fc8:	785b      	ldrb	r3, [r3, #1]
 8008fca:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8008fcc:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 8008fce:	68ba      	ldr	r2, [r7, #8]
 8008fd0:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 8008fd2:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 8008fd4:	68bb      	ldr	r3, [r7, #8]
 8008fd6:	781b      	ldrb	r3, [r3, #0]
 8008fd8:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8008fda:	4313      	orrs	r3, r2
 8008fdc:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008fde:	68fb      	ldr	r3, [r7, #12]
 8008fe0:	681b      	ldr	r3, [r3, #0]
 8008fe2:	22ca      	movs	r2, #202	; 0xca
 8008fe4:	625a      	str	r2, [r3, #36]	; 0x24
 8008fe6:	68fb      	ldr	r3, [r7, #12]
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	2253      	movs	r2, #83	; 0x53
 8008fec:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8008fee:	68f8      	ldr	r0, [r7, #12]
 8008ff0:	f000 f8c0 	bl	8009174 <RTC_EnterInitMode>
 8008ff4:	4603      	mov	r3, r0
 8008ff6:	2b00      	cmp	r3, #0
 8008ff8:	d00d      	beq.n	8009016 <HAL_RTC_SetDate+0xe4>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008ffa:	68fb      	ldr	r3, [r7, #12]
 8008ffc:	681b      	ldr	r3, [r3, #0]
 8008ffe:	22ff      	movs	r2, #255	; 0xff
 8009000:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 8009002:	68fb      	ldr	r3, [r7, #12]
 8009004:	2204      	movs	r2, #4
 8009006:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */ 
    __HAL_UNLOCK(hrtc);
 800900a:	68fb      	ldr	r3, [r7, #12]
 800900c:	2200      	movs	r2, #0
 800900e:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_ERROR;
 8009012:	2301      	movs	r3, #1
 8009014:	e037      	b.n	8009086 <HAL_RTC_SetDate+0x154>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8009016:	68fb      	ldr	r3, [r7, #12]
 8009018:	681a      	ldr	r2, [r3, #0]
 800901a:	697b      	ldr	r3, [r7, #20]
 800901c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8009020:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8009024:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8009026:	68fb      	ldr	r3, [r7, #12]
 8009028:	681b      	ldr	r3, [r3, #0]
 800902a:	68da      	ldr	r2, [r3, #12]
 800902c:	68fb      	ldr	r3, [r7, #12]
 800902e:	681b      	ldr	r3, [r3, #0]
 8009030:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009034:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8009036:	68fb      	ldr	r3, [r7, #12]
 8009038:	681b      	ldr	r3, [r3, #0]
 800903a:	689b      	ldr	r3, [r3, #8]
 800903c:	f003 0320 	and.w	r3, r3, #32
 8009040:	2b00      	cmp	r3, #0
 8009042:	d113      	bne.n	800906c <HAL_RTC_SetDate+0x13a>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8009044:	68f8      	ldr	r0, [r7, #12]
 8009046:	f000 f86f 	bl	8009128 <HAL_RTC_WaitForSynchro>
 800904a:	4603      	mov	r3, r0
 800904c:	2b00      	cmp	r3, #0
 800904e:	d00d      	beq.n	800906c <HAL_RTC_SetDate+0x13a>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);  
 8009050:	68fb      	ldr	r3, [r7, #12]
 8009052:	681b      	ldr	r3, [r3, #0]
 8009054:	22ff      	movs	r2, #255	; 0xff
 8009056:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8009058:	68fb      	ldr	r3, [r7, #12]
 800905a:	2204      	movs	r2, #4
 800905c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */ 
        __HAL_UNLOCK(hrtc);
 8009060:	68fb      	ldr	r3, [r7, #12]
 8009062:	2200      	movs	r2, #0
 8009064:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8009068:	2301      	movs	r3, #1
 800906a:	e00c      	b.n	8009086 <HAL_RTC_SetDate+0x154>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800906c:	68fb      	ldr	r3, [r7, #12]
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	22ff      	movs	r2, #255	; 0xff
 8009072:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 8009074:	68fb      	ldr	r3, [r7, #12]
 8009076:	2201      	movs	r2, #1
 8009078:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */ 
    __HAL_UNLOCK(hrtc);
 800907c:	68fb      	ldr	r3, [r7, #12]
 800907e:	2200      	movs	r2, #0
 8009080:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_OK;
 8009084:	2300      	movs	r3, #0
  }
}
 8009086:	4618      	mov	r0, r3
 8009088:	371c      	adds	r7, #28
 800908a:	46bd      	mov	sp, r7
 800908c:	bd90      	pop	{r4, r7, pc}

0800908e <HAL_RTC_GetDate>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800908e:	b580      	push	{r7, lr}
 8009090:	b086      	sub	sp, #24
 8009092:	af00      	add	r7, sp, #0
 8009094:	60f8      	str	r0, [r7, #12]
 8009096:	60b9      	str	r1, [r7, #8]
 8009098:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 800909a:	68fb      	ldr	r3, [r7, #12]
 800909c:	681b      	ldr	r3, [r3, #0]
 800909e:	685b      	ldr	r3, [r3, #4]
 80090a0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80090a4:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80090a8:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 80090aa:	697b      	ldr	r3, [r7, #20]
 80090ac:	0c1b      	lsrs	r3, r3, #16
 80090ae:	b2da      	uxtb	r2, r3
 80090b0:	68bb      	ldr	r3, [r7, #8]
 80090b2:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 80090b4:	697b      	ldr	r3, [r7, #20]
 80090b6:	0a1b      	lsrs	r3, r3, #8
 80090b8:	b2db      	uxtb	r3, r3
 80090ba:	f003 031f 	and.w	r3, r3, #31
 80090be:	b2da      	uxtb	r2, r3
 80090c0:	68bb      	ldr	r3, [r7, #8]
 80090c2:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 80090c4:	697b      	ldr	r3, [r7, #20]
 80090c6:	b2db      	uxtb	r3, r3
 80090c8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80090cc:	b2da      	uxtb	r2, r3
 80090ce:	68bb      	ldr	r3, [r7, #8]
 80090d0:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U); 
 80090d2:	697b      	ldr	r3, [r7, #20]
 80090d4:	0b5b      	lsrs	r3, r3, #13
 80090d6:	b2db      	uxtb	r3, r3
 80090d8:	f003 0307 	and.w	r3, r3, #7
 80090dc:	b2da      	uxtb	r2, r3
 80090de:	68bb      	ldr	r3, [r7, #8]
 80090e0:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	2b00      	cmp	r3, #0
 80090e6:	d11a      	bne.n	800911e <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 80090e8:	68bb      	ldr	r3, [r7, #8]
 80090ea:	78db      	ldrb	r3, [r3, #3]
 80090ec:	4618      	mov	r0, r3
 80090ee:	f000 f88b 	bl	8009208 <RTC_Bcd2ToByte>
 80090f2:	4603      	mov	r3, r0
 80090f4:	461a      	mov	r2, r3
 80090f6:	68bb      	ldr	r3, [r7, #8]
 80090f8:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 80090fa:	68bb      	ldr	r3, [r7, #8]
 80090fc:	785b      	ldrb	r3, [r3, #1]
 80090fe:	4618      	mov	r0, r3
 8009100:	f000 f882 	bl	8009208 <RTC_Bcd2ToByte>
 8009104:	4603      	mov	r3, r0
 8009106:	461a      	mov	r2, r3
 8009108:	68bb      	ldr	r3, [r7, #8]
 800910a:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800910c:	68bb      	ldr	r3, [r7, #8]
 800910e:	789b      	ldrb	r3, [r3, #2]
 8009110:	4618      	mov	r0, r3
 8009112:	f000 f879 	bl	8009208 <RTC_Bcd2ToByte>
 8009116:	4603      	mov	r3, r0
 8009118:	461a      	mov	r2, r3
 800911a:	68bb      	ldr	r3, [r7, #8]
 800911c:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 800911e:	2300      	movs	r3, #0
}
 8009120:	4618      	mov	r0, r3
 8009122:	3718      	adds	r7, #24
 8009124:	46bd      	mov	sp, r7
 8009126:	bd80      	pop	{r7, pc}

08009128 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8009128:	b580      	push	{r7, lr}
 800912a:	b084      	sub	sp, #16
 800912c:	af00      	add	r7, sp, #0
 800912e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	681b      	ldr	r3, [r3, #0]
 8009134:	68da      	ldr	r2, [r3, #12]
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	681b      	ldr	r3, [r3, #0]
 800913a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800913e:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8009140:	f7fc fd52 	bl	8005be8 <HAL_GetTick>
 8009144:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8009146:	e009      	b.n	800915c <HAL_RTC_WaitForSynchro+0x34>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8009148:	f7fc fd4e 	bl	8005be8 <HAL_GetTick>
 800914c:	4602      	mov	r2, r0
 800914e:	68fb      	ldr	r3, [r7, #12]
 8009150:	1ad3      	subs	r3, r2, r3
 8009152:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009156:	d901      	bls.n	800915c <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8009158:	2303      	movs	r3, #3
 800915a:	e007      	b.n	800916c <HAL_RTC_WaitForSynchro+0x44>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	68db      	ldr	r3, [r3, #12]
 8009162:	f003 0320 	and.w	r3, r3, #32
 8009166:	2b00      	cmp	r3, #0
 8009168:	d0ee      	beq.n	8009148 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 800916a:	2300      	movs	r3, #0
}
 800916c:	4618      	mov	r0, r3
 800916e:	3710      	adds	r7, #16
 8009170:	46bd      	mov	sp, r7
 8009172:	bd80      	pop	{r7, pc}

08009174 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8009174:	b580      	push	{r7, lr}
 8009176:	b084      	sub	sp, #16
 8009178:	af00      	add	r7, sp, #0
 800917a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	681b      	ldr	r3, [r3, #0]
 8009180:	68db      	ldr	r3, [r3, #12]
 8009182:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009186:	2b00      	cmp	r3, #0
 8009188:	d119      	bne.n	80091be <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	681b      	ldr	r3, [r3, #0]
 800918e:	f04f 32ff 	mov.w	r2, #4294967295
 8009192:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8009194:	f7fc fd28 	bl	8005be8 <HAL_GetTick>
 8009198:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800919a:	e009      	b.n	80091b0 <RTC_EnterInitMode+0x3c>
    {
      if((HAL_GetTick()  - tickstart ) > RTC_TIMEOUT_VALUE)
 800919c:	f7fc fd24 	bl	8005be8 <HAL_GetTick>
 80091a0:	4602      	mov	r2, r0
 80091a2:	68fb      	ldr	r3, [r7, #12]
 80091a4:	1ad3      	subs	r3, r2, r3
 80091a6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80091aa:	d901      	bls.n	80091b0 <RTC_EnterInitMode+0x3c>
      {
        return HAL_TIMEOUT;
 80091ac:	2303      	movs	r3, #3
 80091ae:	e007      	b.n	80091c0 <RTC_EnterInitMode+0x4c>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	681b      	ldr	r3, [r3, #0]
 80091b4:	68db      	ldr	r3, [r3, #12]
 80091b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80091ba:	2b00      	cmp	r3, #0
 80091bc:	d0ee      	beq.n	800919c <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 80091be:	2300      	movs	r3, #0
}
 80091c0:	4618      	mov	r0, r3
 80091c2:	3710      	adds	r7, #16
 80091c4:	46bd      	mov	sp, r7
 80091c6:	bd80      	pop	{r7, pc}

080091c8 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 80091c8:	b480      	push	{r7}
 80091ca:	b085      	sub	sp, #20
 80091cc:	af00      	add	r7, sp, #0
 80091ce:	4603      	mov	r3, r0
 80091d0:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 80091d2:	2300      	movs	r3, #0
 80091d4:	60fb      	str	r3, [r7, #12]
  uint8_t Param = Value;
 80091d6:	79fb      	ldrb	r3, [r7, #7]
 80091d8:	72fb      	strb	r3, [r7, #11]

  while(Param >= 10U)
 80091da:	e005      	b.n	80091e8 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 80091dc:	68fb      	ldr	r3, [r7, #12]
 80091de:	3301      	adds	r3, #1
 80091e0:	60fb      	str	r3, [r7, #12]
    Param -= 10U;
 80091e2:	7afb      	ldrb	r3, [r7, #11]
 80091e4:	3b0a      	subs	r3, #10
 80091e6:	72fb      	strb	r3, [r7, #11]
  while(Param >= 10U)
 80091e8:	7afb      	ldrb	r3, [r7, #11]
 80091ea:	2b09      	cmp	r3, #9
 80091ec:	d8f6      	bhi.n	80091dc <RTC_ByteToBcd2+0x14>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Param);
 80091ee:	68fb      	ldr	r3, [r7, #12]
 80091f0:	b2db      	uxtb	r3, r3
 80091f2:	011b      	lsls	r3, r3, #4
 80091f4:	b2da      	uxtb	r2, r3
 80091f6:	7afb      	ldrb	r3, [r7, #11]
 80091f8:	4313      	orrs	r3, r2
 80091fa:	b2db      	uxtb	r3, r3
}
 80091fc:	4618      	mov	r0, r3
 80091fe:	3714      	adds	r7, #20
 8009200:	46bd      	mov	sp, r7
 8009202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009206:	4770      	bx	lr

08009208 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8009208:	b480      	push	{r7}
 800920a:	b085      	sub	sp, #20
 800920c:	af00      	add	r7, sp, #0
 800920e:	4603      	mov	r3, r0
 8009210:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp;
  tmp = (((uint32_t)Value & 0xF0U) >> 4U) * 10U;
 8009212:	79fb      	ldrb	r3, [r7, #7]
 8009214:	091b      	lsrs	r3, r3, #4
 8009216:	b2db      	uxtb	r3, r3
 8009218:	461a      	mov	r2, r3
 800921a:	4613      	mov	r3, r2
 800921c:	009b      	lsls	r3, r3, #2
 800921e:	4413      	add	r3, r2
 8009220:	005b      	lsls	r3, r3, #1
 8009222:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tmp + ((uint32_t)Value & 0x0FU));
 8009224:	68fb      	ldr	r3, [r7, #12]
 8009226:	b2da      	uxtb	r2, r3
 8009228:	79fb      	ldrb	r3, [r7, #7]
 800922a:	f003 030f 	and.w	r3, r3, #15
 800922e:	b2db      	uxtb	r3, r3
 8009230:	4413      	add	r3, r2
 8009232:	b2db      	uxtb	r3, r3
}
 8009234:	4618      	mov	r0, r3
 8009236:	3714      	adds	r7, #20
 8009238:	46bd      	mov	sp, r7
 800923a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800923e:	4770      	bx	lr

08009240 <HAL_RTCEx_EnableBypassShadow>:
  * @note   When the Bypass Shadow is enabled the calendar value are taken
  *         directly from the Calendar counter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_EnableBypassShadow(RTC_HandleTypeDef* hrtc)
{
 8009240:	b480      	push	{r7}
 8009242:	b083      	sub	sp, #12
 8009244:	af00      	add	r7, sp, #0
 8009246:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hrtc);
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800924e:	2b01      	cmp	r3, #1
 8009250:	d101      	bne.n	8009256 <HAL_RTCEx_EnableBypassShadow+0x16>
 8009252:	2302      	movs	r3, #2
 8009254:	e024      	b.n	80092a0 <HAL_RTCEx_EnableBypassShadow+0x60>
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	2201      	movs	r2, #1
 800925a:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	2202      	movs	r2, #2
 8009262:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	681b      	ldr	r3, [r3, #0]
 800926a:	22ca      	movs	r2, #202	; 0xca
 800926c:	625a      	str	r2, [r3, #36]	; 0x24
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	681b      	ldr	r3, [r3, #0]
 8009272:	2253      	movs	r2, #83	; 0x53
 8009274:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the BYPSHAD bit */
  hrtc->Instance->CR |= (uint8_t)RTC_CR_BYPSHAD;
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	681b      	ldr	r3, [r3, #0]
 800927a:	689a      	ldr	r2, [r3, #8]
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	681b      	ldr	r3, [r3, #0]
 8009280:	f042 0220 	orr.w	r2, r2, #32
 8009284:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	681b      	ldr	r3, [r3, #0]
 800928a:	22ff      	movs	r2, #255	; 0xff
 800928c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	2201      	movs	r2, #1
 8009292:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	2200      	movs	r2, #0
 800929a:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 800929e:	2300      	movs	r3, #0
}
 80092a0:	4618      	mov	r0, r3
 80092a2:	370c      	adds	r7, #12
 80092a4:	46bd      	mov	sp, r7
 80092a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092aa:	4770      	bx	lr

080092ac <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80092ac:	b580      	push	{r7, lr}
 80092ae:	b084      	sub	sp, #16
 80092b0:	af00      	add	r7, sp, #0
 80092b2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	2b00      	cmp	r3, #0
 80092b8:	d101      	bne.n	80092be <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80092ba:	2301      	movs	r3, #1
 80092bc:	e095      	b.n	80093ea <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092c2:	2b00      	cmp	r3, #0
 80092c4:	d108      	bne.n	80092d8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	685b      	ldr	r3, [r3, #4]
 80092ca:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80092ce:	d009      	beq.n	80092e4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	2200      	movs	r2, #0
 80092d4:	61da      	str	r2, [r3, #28]
 80092d6:	e005      	b.n	80092e4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	2200      	movs	r2, #0
 80092dc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	2200      	movs	r2, #0
 80092e2:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	2200      	movs	r2, #0
 80092e8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80092f0:	b2db      	uxtb	r3, r3
 80092f2:	2b00      	cmp	r3, #0
 80092f4:	d106      	bne.n	8009304 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	2200      	movs	r2, #0
 80092fa:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80092fe:	6878      	ldr	r0, [r7, #4]
 8009300:	f7fc fa10 	bl	8005724 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	2202      	movs	r2, #2
 8009308:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	681b      	ldr	r3, [r3, #0]
 8009310:	681a      	ldr	r2, [r3, #0]
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	681b      	ldr	r3, [r3, #0]
 8009316:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800931a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	68db      	ldr	r3, [r3, #12]
 8009320:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8009324:	d902      	bls.n	800932c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8009326:	2300      	movs	r3, #0
 8009328:	60fb      	str	r3, [r7, #12]
 800932a:	e002      	b.n	8009332 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800932c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009330:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	68db      	ldr	r3, [r3, #12]
 8009336:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800933a:	d007      	beq.n	800934c <HAL_SPI_Init+0xa0>
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	68db      	ldr	r3, [r3, #12]
 8009340:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8009344:	d002      	beq.n	800934c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	2200      	movs	r2, #0
 800934a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	685b      	ldr	r3, [r3, #4]
 8009350:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	689b      	ldr	r3, [r3, #8]
 8009358:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800935c:	431a      	orrs	r2, r3
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	691b      	ldr	r3, [r3, #16]
 8009362:	f003 0302 	and.w	r3, r3, #2
 8009366:	431a      	orrs	r2, r3
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	695b      	ldr	r3, [r3, #20]
 800936c:	f003 0301 	and.w	r3, r3, #1
 8009370:	431a      	orrs	r2, r3
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	699b      	ldr	r3, [r3, #24]
 8009376:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800937a:	431a      	orrs	r2, r3
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	69db      	ldr	r3, [r3, #28]
 8009380:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009384:	431a      	orrs	r2, r3
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	6a1b      	ldr	r3, [r3, #32]
 800938a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800938e:	ea42 0103 	orr.w	r1, r2, r3
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009396:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	681b      	ldr	r3, [r3, #0]
 800939e:	430a      	orrs	r2, r1
 80093a0:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	699b      	ldr	r3, [r3, #24]
 80093a6:	0c1b      	lsrs	r3, r3, #16
 80093a8:	f003 0204 	and.w	r2, r3, #4
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093b0:	f003 0310 	and.w	r3, r3, #16
 80093b4:	431a      	orrs	r2, r3
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80093ba:	f003 0308 	and.w	r3, r3, #8
 80093be:	431a      	orrs	r2, r3
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	68db      	ldr	r3, [r3, #12]
 80093c4:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80093c8:	ea42 0103 	orr.w	r1, r2, r3
 80093cc:	68fb      	ldr	r3, [r7, #12]
 80093ce:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	681b      	ldr	r3, [r3, #0]
 80093d6:	430a      	orrs	r2, r1
 80093d8:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	2200      	movs	r2, #0
 80093de:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	2201      	movs	r2, #1
 80093e4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80093e8:	2300      	movs	r3, #0
}
 80093ea:	4618      	mov	r0, r3
 80093ec:	3710      	adds	r7, #16
 80093ee:	46bd      	mov	sp, r7
 80093f0:	bd80      	pop	{r7, pc}

080093f2 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80093f2:	b580      	push	{r7, lr}
 80093f4:	b088      	sub	sp, #32
 80093f6:	af00      	add	r7, sp, #0
 80093f8:	60f8      	str	r0, [r7, #12]
 80093fa:	60b9      	str	r1, [r7, #8]
 80093fc:	603b      	str	r3, [r7, #0]
 80093fe:	4613      	mov	r3, r2
 8009400:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8009402:	2300      	movs	r3, #0
 8009404:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8009406:	68fb      	ldr	r3, [r7, #12]
 8009408:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800940c:	2b01      	cmp	r3, #1
 800940e:	d101      	bne.n	8009414 <HAL_SPI_Transmit+0x22>
 8009410:	2302      	movs	r3, #2
 8009412:	e158      	b.n	80096c6 <HAL_SPI_Transmit+0x2d4>
 8009414:	68fb      	ldr	r3, [r7, #12]
 8009416:	2201      	movs	r2, #1
 8009418:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800941c:	f7fc fbe4 	bl	8005be8 <HAL_GetTick>
 8009420:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8009422:	88fb      	ldrh	r3, [r7, #6]
 8009424:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8009426:	68fb      	ldr	r3, [r7, #12]
 8009428:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800942c:	b2db      	uxtb	r3, r3
 800942e:	2b01      	cmp	r3, #1
 8009430:	d002      	beq.n	8009438 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8009432:	2302      	movs	r3, #2
 8009434:	77fb      	strb	r3, [r7, #31]
    goto error;
 8009436:	e13d      	b.n	80096b4 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8009438:	68bb      	ldr	r3, [r7, #8]
 800943a:	2b00      	cmp	r3, #0
 800943c:	d002      	beq.n	8009444 <HAL_SPI_Transmit+0x52>
 800943e:	88fb      	ldrh	r3, [r7, #6]
 8009440:	2b00      	cmp	r3, #0
 8009442:	d102      	bne.n	800944a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8009444:	2301      	movs	r3, #1
 8009446:	77fb      	strb	r3, [r7, #31]
    goto error;
 8009448:	e134      	b.n	80096b4 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800944a:	68fb      	ldr	r3, [r7, #12]
 800944c:	2203      	movs	r2, #3
 800944e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009452:	68fb      	ldr	r3, [r7, #12]
 8009454:	2200      	movs	r2, #0
 8009456:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8009458:	68fb      	ldr	r3, [r7, #12]
 800945a:	68ba      	ldr	r2, [r7, #8]
 800945c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800945e:	68fb      	ldr	r3, [r7, #12]
 8009460:	88fa      	ldrh	r2, [r7, #6]
 8009462:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8009464:	68fb      	ldr	r3, [r7, #12]
 8009466:	88fa      	ldrh	r2, [r7, #6]
 8009468:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800946a:	68fb      	ldr	r3, [r7, #12]
 800946c:	2200      	movs	r2, #0
 800946e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8009470:	68fb      	ldr	r3, [r7, #12]
 8009472:	2200      	movs	r2, #0
 8009474:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8009478:	68fb      	ldr	r3, [r7, #12]
 800947a:	2200      	movs	r2, #0
 800947c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8009480:	68fb      	ldr	r3, [r7, #12]
 8009482:	2200      	movs	r2, #0
 8009484:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8009486:	68fb      	ldr	r3, [r7, #12]
 8009488:	2200      	movs	r2, #0
 800948a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800948c:	68fb      	ldr	r3, [r7, #12]
 800948e:	689b      	ldr	r3, [r3, #8]
 8009490:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009494:	d10f      	bne.n	80094b6 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8009496:	68fb      	ldr	r3, [r7, #12]
 8009498:	681b      	ldr	r3, [r3, #0]
 800949a:	681a      	ldr	r2, [r3, #0]
 800949c:	68fb      	ldr	r3, [r7, #12]
 800949e:	681b      	ldr	r3, [r3, #0]
 80094a0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80094a4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80094a6:	68fb      	ldr	r3, [r7, #12]
 80094a8:	681b      	ldr	r3, [r3, #0]
 80094aa:	681a      	ldr	r2, [r3, #0]
 80094ac:	68fb      	ldr	r3, [r7, #12]
 80094ae:	681b      	ldr	r3, [r3, #0]
 80094b0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80094b4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80094b6:	68fb      	ldr	r3, [r7, #12]
 80094b8:	681b      	ldr	r3, [r3, #0]
 80094ba:	681b      	ldr	r3, [r3, #0]
 80094bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80094c0:	2b40      	cmp	r3, #64	; 0x40
 80094c2:	d007      	beq.n	80094d4 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80094c4:	68fb      	ldr	r3, [r7, #12]
 80094c6:	681b      	ldr	r3, [r3, #0]
 80094c8:	681a      	ldr	r2, [r3, #0]
 80094ca:	68fb      	ldr	r3, [r7, #12]
 80094cc:	681b      	ldr	r3, [r3, #0]
 80094ce:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80094d2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80094d4:	68fb      	ldr	r3, [r7, #12]
 80094d6:	68db      	ldr	r3, [r3, #12]
 80094d8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80094dc:	d94b      	bls.n	8009576 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80094de:	68fb      	ldr	r3, [r7, #12]
 80094e0:	685b      	ldr	r3, [r3, #4]
 80094e2:	2b00      	cmp	r3, #0
 80094e4:	d002      	beq.n	80094ec <HAL_SPI_Transmit+0xfa>
 80094e6:	8afb      	ldrh	r3, [r7, #22]
 80094e8:	2b01      	cmp	r3, #1
 80094ea:	d13e      	bne.n	800956a <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80094ec:	68fb      	ldr	r3, [r7, #12]
 80094ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80094f0:	881a      	ldrh	r2, [r3, #0]
 80094f2:	68fb      	ldr	r3, [r7, #12]
 80094f4:	681b      	ldr	r3, [r3, #0]
 80094f6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80094f8:	68fb      	ldr	r3, [r7, #12]
 80094fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80094fc:	1c9a      	adds	r2, r3, #2
 80094fe:	68fb      	ldr	r3, [r7, #12]
 8009500:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8009502:	68fb      	ldr	r3, [r7, #12]
 8009504:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009506:	b29b      	uxth	r3, r3
 8009508:	3b01      	subs	r3, #1
 800950a:	b29a      	uxth	r2, r3
 800950c:	68fb      	ldr	r3, [r7, #12]
 800950e:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8009510:	e02b      	b.n	800956a <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8009512:	68fb      	ldr	r3, [r7, #12]
 8009514:	681b      	ldr	r3, [r3, #0]
 8009516:	689b      	ldr	r3, [r3, #8]
 8009518:	f003 0302 	and.w	r3, r3, #2
 800951c:	2b02      	cmp	r3, #2
 800951e:	d112      	bne.n	8009546 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009520:	68fb      	ldr	r3, [r7, #12]
 8009522:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009524:	881a      	ldrh	r2, [r3, #0]
 8009526:	68fb      	ldr	r3, [r7, #12]
 8009528:	681b      	ldr	r3, [r3, #0]
 800952a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800952c:	68fb      	ldr	r3, [r7, #12]
 800952e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009530:	1c9a      	adds	r2, r3, #2
 8009532:	68fb      	ldr	r3, [r7, #12]
 8009534:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8009536:	68fb      	ldr	r3, [r7, #12]
 8009538:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800953a:	b29b      	uxth	r3, r3
 800953c:	3b01      	subs	r3, #1
 800953e:	b29a      	uxth	r2, r3
 8009540:	68fb      	ldr	r3, [r7, #12]
 8009542:	87da      	strh	r2, [r3, #62]	; 0x3e
 8009544:	e011      	b.n	800956a <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009546:	f7fc fb4f 	bl	8005be8 <HAL_GetTick>
 800954a:	4602      	mov	r2, r0
 800954c:	69bb      	ldr	r3, [r7, #24]
 800954e:	1ad3      	subs	r3, r2, r3
 8009550:	683a      	ldr	r2, [r7, #0]
 8009552:	429a      	cmp	r2, r3
 8009554:	d803      	bhi.n	800955e <HAL_SPI_Transmit+0x16c>
 8009556:	683b      	ldr	r3, [r7, #0]
 8009558:	f1b3 3fff 	cmp.w	r3, #4294967295
 800955c:	d102      	bne.n	8009564 <HAL_SPI_Transmit+0x172>
 800955e:	683b      	ldr	r3, [r7, #0]
 8009560:	2b00      	cmp	r3, #0
 8009562:	d102      	bne.n	800956a <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8009564:	2303      	movs	r3, #3
 8009566:	77fb      	strb	r3, [r7, #31]
          goto error;
 8009568:	e0a4      	b.n	80096b4 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 800956a:	68fb      	ldr	r3, [r7, #12]
 800956c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800956e:	b29b      	uxth	r3, r3
 8009570:	2b00      	cmp	r3, #0
 8009572:	d1ce      	bne.n	8009512 <HAL_SPI_Transmit+0x120>
 8009574:	e07c      	b.n	8009670 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009576:	68fb      	ldr	r3, [r7, #12]
 8009578:	685b      	ldr	r3, [r3, #4]
 800957a:	2b00      	cmp	r3, #0
 800957c:	d002      	beq.n	8009584 <HAL_SPI_Transmit+0x192>
 800957e:	8afb      	ldrh	r3, [r7, #22]
 8009580:	2b01      	cmp	r3, #1
 8009582:	d170      	bne.n	8009666 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8009584:	68fb      	ldr	r3, [r7, #12]
 8009586:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009588:	b29b      	uxth	r3, r3
 800958a:	2b01      	cmp	r3, #1
 800958c:	d912      	bls.n	80095b4 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800958e:	68fb      	ldr	r3, [r7, #12]
 8009590:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009592:	881a      	ldrh	r2, [r3, #0]
 8009594:	68fb      	ldr	r3, [r7, #12]
 8009596:	681b      	ldr	r3, [r3, #0]
 8009598:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800959a:	68fb      	ldr	r3, [r7, #12]
 800959c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800959e:	1c9a      	adds	r2, r3, #2
 80095a0:	68fb      	ldr	r3, [r7, #12]
 80095a2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80095a4:	68fb      	ldr	r3, [r7, #12]
 80095a6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80095a8:	b29b      	uxth	r3, r3
 80095aa:	3b02      	subs	r3, #2
 80095ac:	b29a      	uxth	r2, r3
 80095ae:	68fb      	ldr	r3, [r7, #12]
 80095b0:	87da      	strh	r2, [r3, #62]	; 0x3e
 80095b2:	e058      	b.n	8009666 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80095b4:	68fb      	ldr	r3, [r7, #12]
 80095b6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80095b8:	68fb      	ldr	r3, [r7, #12]
 80095ba:	681b      	ldr	r3, [r3, #0]
 80095bc:	330c      	adds	r3, #12
 80095be:	7812      	ldrb	r2, [r2, #0]
 80095c0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 80095c2:	68fb      	ldr	r3, [r7, #12]
 80095c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80095c6:	1c5a      	adds	r2, r3, #1
 80095c8:	68fb      	ldr	r3, [r7, #12]
 80095ca:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80095cc:	68fb      	ldr	r3, [r7, #12]
 80095ce:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80095d0:	b29b      	uxth	r3, r3
 80095d2:	3b01      	subs	r3, #1
 80095d4:	b29a      	uxth	r2, r3
 80095d6:	68fb      	ldr	r3, [r7, #12]
 80095d8:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 80095da:	e044      	b.n	8009666 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80095dc:	68fb      	ldr	r3, [r7, #12]
 80095de:	681b      	ldr	r3, [r3, #0]
 80095e0:	689b      	ldr	r3, [r3, #8]
 80095e2:	f003 0302 	and.w	r3, r3, #2
 80095e6:	2b02      	cmp	r3, #2
 80095e8:	d12b      	bne.n	8009642 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 80095ea:	68fb      	ldr	r3, [r7, #12]
 80095ec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80095ee:	b29b      	uxth	r3, r3
 80095f0:	2b01      	cmp	r3, #1
 80095f2:	d912      	bls.n	800961a <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80095f4:	68fb      	ldr	r3, [r7, #12]
 80095f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80095f8:	881a      	ldrh	r2, [r3, #0]
 80095fa:	68fb      	ldr	r3, [r7, #12]
 80095fc:	681b      	ldr	r3, [r3, #0]
 80095fe:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8009600:	68fb      	ldr	r3, [r7, #12]
 8009602:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009604:	1c9a      	adds	r2, r3, #2
 8009606:	68fb      	ldr	r3, [r7, #12]
 8009608:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800960a:	68fb      	ldr	r3, [r7, #12]
 800960c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800960e:	b29b      	uxth	r3, r3
 8009610:	3b02      	subs	r3, #2
 8009612:	b29a      	uxth	r2, r3
 8009614:	68fb      	ldr	r3, [r7, #12]
 8009616:	87da      	strh	r2, [r3, #62]	; 0x3e
 8009618:	e025      	b.n	8009666 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800961a:	68fb      	ldr	r3, [r7, #12]
 800961c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800961e:	68fb      	ldr	r3, [r7, #12]
 8009620:	681b      	ldr	r3, [r3, #0]
 8009622:	330c      	adds	r3, #12
 8009624:	7812      	ldrb	r2, [r2, #0]
 8009626:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8009628:	68fb      	ldr	r3, [r7, #12]
 800962a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800962c:	1c5a      	adds	r2, r3, #1
 800962e:	68fb      	ldr	r3, [r7, #12]
 8009630:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8009632:	68fb      	ldr	r3, [r7, #12]
 8009634:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009636:	b29b      	uxth	r3, r3
 8009638:	3b01      	subs	r3, #1
 800963a:	b29a      	uxth	r2, r3
 800963c:	68fb      	ldr	r3, [r7, #12]
 800963e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8009640:	e011      	b.n	8009666 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009642:	f7fc fad1 	bl	8005be8 <HAL_GetTick>
 8009646:	4602      	mov	r2, r0
 8009648:	69bb      	ldr	r3, [r7, #24]
 800964a:	1ad3      	subs	r3, r2, r3
 800964c:	683a      	ldr	r2, [r7, #0]
 800964e:	429a      	cmp	r2, r3
 8009650:	d803      	bhi.n	800965a <HAL_SPI_Transmit+0x268>
 8009652:	683b      	ldr	r3, [r7, #0]
 8009654:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009658:	d102      	bne.n	8009660 <HAL_SPI_Transmit+0x26e>
 800965a:	683b      	ldr	r3, [r7, #0]
 800965c:	2b00      	cmp	r3, #0
 800965e:	d102      	bne.n	8009666 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8009660:	2303      	movs	r3, #3
 8009662:	77fb      	strb	r3, [r7, #31]
          goto error;
 8009664:	e026      	b.n	80096b4 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8009666:	68fb      	ldr	r3, [r7, #12]
 8009668:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800966a:	b29b      	uxth	r3, r3
 800966c:	2b00      	cmp	r3, #0
 800966e:	d1b5      	bne.n	80095dc <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8009670:	69ba      	ldr	r2, [r7, #24]
 8009672:	6839      	ldr	r1, [r7, #0]
 8009674:	68f8      	ldr	r0, [r7, #12]
 8009676:	f000 f941 	bl	80098fc <SPI_EndRxTxTransaction>
 800967a:	4603      	mov	r3, r0
 800967c:	2b00      	cmp	r3, #0
 800967e:	d002      	beq.n	8009686 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8009680:	68fb      	ldr	r3, [r7, #12]
 8009682:	2220      	movs	r2, #32
 8009684:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8009686:	68fb      	ldr	r3, [r7, #12]
 8009688:	689b      	ldr	r3, [r3, #8]
 800968a:	2b00      	cmp	r3, #0
 800968c:	d10a      	bne.n	80096a4 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800968e:	2300      	movs	r3, #0
 8009690:	613b      	str	r3, [r7, #16]
 8009692:	68fb      	ldr	r3, [r7, #12]
 8009694:	681b      	ldr	r3, [r3, #0]
 8009696:	68db      	ldr	r3, [r3, #12]
 8009698:	613b      	str	r3, [r7, #16]
 800969a:	68fb      	ldr	r3, [r7, #12]
 800969c:	681b      	ldr	r3, [r3, #0]
 800969e:	689b      	ldr	r3, [r3, #8]
 80096a0:	613b      	str	r3, [r7, #16]
 80096a2:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80096a4:	68fb      	ldr	r3, [r7, #12]
 80096a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80096a8:	2b00      	cmp	r3, #0
 80096aa:	d002      	beq.n	80096b2 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 80096ac:	2301      	movs	r3, #1
 80096ae:	77fb      	strb	r3, [r7, #31]
 80096b0:	e000      	b.n	80096b4 <HAL_SPI_Transmit+0x2c2>
  }

error:
 80096b2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80096b4:	68fb      	ldr	r3, [r7, #12]
 80096b6:	2201      	movs	r2, #1
 80096b8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80096bc:	68fb      	ldr	r3, [r7, #12]
 80096be:	2200      	movs	r2, #0
 80096c0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80096c4:	7ffb      	ldrb	r3, [r7, #31]
}
 80096c6:	4618      	mov	r0, r3
 80096c8:	3720      	adds	r7, #32
 80096ca:	46bd      	mov	sp, r7
 80096cc:	bd80      	pop	{r7, pc}
	...

080096d0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80096d0:	b580      	push	{r7, lr}
 80096d2:	b088      	sub	sp, #32
 80096d4:	af00      	add	r7, sp, #0
 80096d6:	60f8      	str	r0, [r7, #12]
 80096d8:	60b9      	str	r1, [r7, #8]
 80096da:	603b      	str	r3, [r7, #0]
 80096dc:	4613      	mov	r3, r2
 80096de:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80096e0:	f7fc fa82 	bl	8005be8 <HAL_GetTick>
 80096e4:	4602      	mov	r2, r0
 80096e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096e8:	1a9b      	subs	r3, r3, r2
 80096ea:	683a      	ldr	r2, [r7, #0]
 80096ec:	4413      	add	r3, r2
 80096ee:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80096f0:	f7fc fa7a 	bl	8005be8 <HAL_GetTick>
 80096f4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80096f6:	4b39      	ldr	r3, [pc, #228]	; (80097dc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80096f8:	681b      	ldr	r3, [r3, #0]
 80096fa:	015b      	lsls	r3, r3, #5
 80096fc:	0d1b      	lsrs	r3, r3, #20
 80096fe:	69fa      	ldr	r2, [r7, #28]
 8009700:	fb02 f303 	mul.w	r3, r2, r3
 8009704:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009706:	e054      	b.n	80097b2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8009708:	683b      	ldr	r3, [r7, #0]
 800970a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800970e:	d050      	beq.n	80097b2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8009710:	f7fc fa6a 	bl	8005be8 <HAL_GetTick>
 8009714:	4602      	mov	r2, r0
 8009716:	69bb      	ldr	r3, [r7, #24]
 8009718:	1ad3      	subs	r3, r2, r3
 800971a:	69fa      	ldr	r2, [r7, #28]
 800971c:	429a      	cmp	r2, r3
 800971e:	d902      	bls.n	8009726 <SPI_WaitFlagStateUntilTimeout+0x56>
 8009720:	69fb      	ldr	r3, [r7, #28]
 8009722:	2b00      	cmp	r3, #0
 8009724:	d13d      	bne.n	80097a2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8009726:	68fb      	ldr	r3, [r7, #12]
 8009728:	681b      	ldr	r3, [r3, #0]
 800972a:	685a      	ldr	r2, [r3, #4]
 800972c:	68fb      	ldr	r3, [r7, #12]
 800972e:	681b      	ldr	r3, [r3, #0]
 8009730:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8009734:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009736:	68fb      	ldr	r3, [r7, #12]
 8009738:	685b      	ldr	r3, [r3, #4]
 800973a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800973e:	d111      	bne.n	8009764 <SPI_WaitFlagStateUntilTimeout+0x94>
 8009740:	68fb      	ldr	r3, [r7, #12]
 8009742:	689b      	ldr	r3, [r3, #8]
 8009744:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009748:	d004      	beq.n	8009754 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800974a:	68fb      	ldr	r3, [r7, #12]
 800974c:	689b      	ldr	r3, [r3, #8]
 800974e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009752:	d107      	bne.n	8009764 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8009754:	68fb      	ldr	r3, [r7, #12]
 8009756:	681b      	ldr	r3, [r3, #0]
 8009758:	681a      	ldr	r2, [r3, #0]
 800975a:	68fb      	ldr	r3, [r7, #12]
 800975c:	681b      	ldr	r3, [r3, #0]
 800975e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009762:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009764:	68fb      	ldr	r3, [r7, #12]
 8009766:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009768:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800976c:	d10f      	bne.n	800978e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800976e:	68fb      	ldr	r3, [r7, #12]
 8009770:	681b      	ldr	r3, [r3, #0]
 8009772:	681a      	ldr	r2, [r3, #0]
 8009774:	68fb      	ldr	r3, [r7, #12]
 8009776:	681b      	ldr	r3, [r3, #0]
 8009778:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800977c:	601a      	str	r2, [r3, #0]
 800977e:	68fb      	ldr	r3, [r7, #12]
 8009780:	681b      	ldr	r3, [r3, #0]
 8009782:	681a      	ldr	r2, [r3, #0]
 8009784:	68fb      	ldr	r3, [r7, #12]
 8009786:	681b      	ldr	r3, [r3, #0]
 8009788:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800978c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800978e:	68fb      	ldr	r3, [r7, #12]
 8009790:	2201      	movs	r2, #1
 8009792:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8009796:	68fb      	ldr	r3, [r7, #12]
 8009798:	2200      	movs	r2, #0
 800979a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800979e:	2303      	movs	r3, #3
 80097a0:	e017      	b.n	80097d2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80097a2:	697b      	ldr	r3, [r7, #20]
 80097a4:	2b00      	cmp	r3, #0
 80097a6:	d101      	bne.n	80097ac <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80097a8:	2300      	movs	r3, #0
 80097aa:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80097ac:	697b      	ldr	r3, [r7, #20]
 80097ae:	3b01      	subs	r3, #1
 80097b0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80097b2:	68fb      	ldr	r3, [r7, #12]
 80097b4:	681b      	ldr	r3, [r3, #0]
 80097b6:	689a      	ldr	r2, [r3, #8]
 80097b8:	68bb      	ldr	r3, [r7, #8]
 80097ba:	4013      	ands	r3, r2
 80097bc:	68ba      	ldr	r2, [r7, #8]
 80097be:	429a      	cmp	r2, r3
 80097c0:	bf0c      	ite	eq
 80097c2:	2301      	moveq	r3, #1
 80097c4:	2300      	movne	r3, #0
 80097c6:	b2db      	uxtb	r3, r3
 80097c8:	461a      	mov	r2, r3
 80097ca:	79fb      	ldrb	r3, [r7, #7]
 80097cc:	429a      	cmp	r2, r3
 80097ce:	d19b      	bne.n	8009708 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80097d0:	2300      	movs	r3, #0
}
 80097d2:	4618      	mov	r0, r3
 80097d4:	3720      	adds	r7, #32
 80097d6:	46bd      	mov	sp, r7
 80097d8:	bd80      	pop	{r7, pc}
 80097da:	bf00      	nop
 80097dc:	20000014 	.word	0x20000014

080097e0 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80097e0:	b580      	push	{r7, lr}
 80097e2:	b088      	sub	sp, #32
 80097e4:	af00      	add	r7, sp, #0
 80097e6:	60f8      	str	r0, [r7, #12]
 80097e8:	60b9      	str	r1, [r7, #8]
 80097ea:	607a      	str	r2, [r7, #4]
 80097ec:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80097ee:	f7fc f9fb 	bl	8005be8 <HAL_GetTick>
 80097f2:	4602      	mov	r2, r0
 80097f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097f6:	1a9b      	subs	r3, r3, r2
 80097f8:	683a      	ldr	r2, [r7, #0]
 80097fa:	4413      	add	r3, r2
 80097fc:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80097fe:	f7fc f9f3 	bl	8005be8 <HAL_GetTick>
 8009802:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8009804:	4b3c      	ldr	r3, [pc, #240]	; (80098f8 <SPI_WaitFifoStateUntilTimeout+0x118>)
 8009806:	681a      	ldr	r2, [r3, #0]
 8009808:	4613      	mov	r3, r2
 800980a:	009b      	lsls	r3, r3, #2
 800980c:	4413      	add	r3, r2
 800980e:	00da      	lsls	r2, r3, #3
 8009810:	1ad3      	subs	r3, r2, r3
 8009812:	0d1b      	lsrs	r3, r3, #20
 8009814:	69fa      	ldr	r2, [r7, #28]
 8009816:	fb02 f303 	mul.w	r3, r2, r3
 800981a:	617b      	str	r3, [r7, #20]

  while ((hspi->Instance->SR & Fifo) != State)
 800981c:	e05f      	b.n	80098de <SPI_WaitFifoStateUntilTimeout+0xfe>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800981e:	68bb      	ldr	r3, [r7, #8]
 8009820:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8009824:	d106      	bne.n	8009834 <SPI_WaitFifoStateUntilTimeout+0x54>
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	2b00      	cmp	r3, #0
 800982a:	d103      	bne.n	8009834 <SPI_WaitFifoStateUntilTimeout+0x54>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 800982c:	68fb      	ldr	r3, [r7, #12]
 800982e:	681b      	ldr	r3, [r3, #0]
 8009830:	330c      	adds	r3, #12
 8009832:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8009834:	683b      	ldr	r3, [r7, #0]
 8009836:	f1b3 3fff 	cmp.w	r3, #4294967295
 800983a:	d050      	beq.n	80098de <SPI_WaitFifoStateUntilTimeout+0xfe>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800983c:	f7fc f9d4 	bl	8005be8 <HAL_GetTick>
 8009840:	4602      	mov	r2, r0
 8009842:	69bb      	ldr	r3, [r7, #24]
 8009844:	1ad3      	subs	r3, r2, r3
 8009846:	69fa      	ldr	r2, [r7, #28]
 8009848:	429a      	cmp	r2, r3
 800984a:	d902      	bls.n	8009852 <SPI_WaitFifoStateUntilTimeout+0x72>
 800984c:	69fb      	ldr	r3, [r7, #28]
 800984e:	2b00      	cmp	r3, #0
 8009850:	d13d      	bne.n	80098ce <SPI_WaitFifoStateUntilTimeout+0xee>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8009852:	68fb      	ldr	r3, [r7, #12]
 8009854:	681b      	ldr	r3, [r3, #0]
 8009856:	685a      	ldr	r2, [r3, #4]
 8009858:	68fb      	ldr	r3, [r7, #12]
 800985a:	681b      	ldr	r3, [r3, #0]
 800985c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8009860:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009862:	68fb      	ldr	r3, [r7, #12]
 8009864:	685b      	ldr	r3, [r3, #4]
 8009866:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800986a:	d111      	bne.n	8009890 <SPI_WaitFifoStateUntilTimeout+0xb0>
 800986c:	68fb      	ldr	r3, [r7, #12]
 800986e:	689b      	ldr	r3, [r3, #8]
 8009870:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009874:	d004      	beq.n	8009880 <SPI_WaitFifoStateUntilTimeout+0xa0>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009876:	68fb      	ldr	r3, [r7, #12]
 8009878:	689b      	ldr	r3, [r3, #8]
 800987a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800987e:	d107      	bne.n	8009890 <SPI_WaitFifoStateUntilTimeout+0xb0>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8009880:	68fb      	ldr	r3, [r7, #12]
 8009882:	681b      	ldr	r3, [r3, #0]
 8009884:	681a      	ldr	r2, [r3, #0]
 8009886:	68fb      	ldr	r3, [r7, #12]
 8009888:	681b      	ldr	r3, [r3, #0]
 800988a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800988e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009890:	68fb      	ldr	r3, [r7, #12]
 8009892:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009894:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009898:	d10f      	bne.n	80098ba <SPI_WaitFifoStateUntilTimeout+0xda>
        {
          SPI_RESET_CRC(hspi);
 800989a:	68fb      	ldr	r3, [r7, #12]
 800989c:	681b      	ldr	r3, [r3, #0]
 800989e:	681a      	ldr	r2, [r3, #0]
 80098a0:	68fb      	ldr	r3, [r7, #12]
 80098a2:	681b      	ldr	r3, [r3, #0]
 80098a4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80098a8:	601a      	str	r2, [r3, #0]
 80098aa:	68fb      	ldr	r3, [r7, #12]
 80098ac:	681b      	ldr	r3, [r3, #0]
 80098ae:	681a      	ldr	r2, [r3, #0]
 80098b0:	68fb      	ldr	r3, [r7, #12]
 80098b2:	681b      	ldr	r3, [r3, #0]
 80098b4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80098b8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80098ba:	68fb      	ldr	r3, [r7, #12]
 80098bc:	2201      	movs	r2, #1
 80098be:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80098c2:	68fb      	ldr	r3, [r7, #12]
 80098c4:	2200      	movs	r2, #0
 80098c6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80098ca:	2303      	movs	r3, #3
 80098cc:	e010      	b.n	80098f0 <SPI_WaitFifoStateUntilTimeout+0x110>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80098ce:	697b      	ldr	r3, [r7, #20]
 80098d0:	2b00      	cmp	r3, #0
 80098d2:	d101      	bne.n	80098d8 <SPI_WaitFifoStateUntilTimeout+0xf8>
      {
        tmp_timeout = 0U;
 80098d4:	2300      	movs	r3, #0
 80098d6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80098d8:	697b      	ldr	r3, [r7, #20]
 80098da:	3b01      	subs	r3, #1
 80098dc:	617b      	str	r3, [r7, #20]
  while ((hspi->Instance->SR & Fifo) != State)
 80098de:	68fb      	ldr	r3, [r7, #12]
 80098e0:	681b      	ldr	r3, [r3, #0]
 80098e2:	689a      	ldr	r2, [r3, #8]
 80098e4:	68bb      	ldr	r3, [r7, #8]
 80098e6:	4013      	ands	r3, r2
 80098e8:	687a      	ldr	r2, [r7, #4]
 80098ea:	429a      	cmp	r2, r3
 80098ec:	d197      	bne.n	800981e <SPI_WaitFifoStateUntilTimeout+0x3e>
    }
  }

  return HAL_OK;
 80098ee:	2300      	movs	r3, #0
}
 80098f0:	4618      	mov	r0, r3
 80098f2:	3720      	adds	r7, #32
 80098f4:	46bd      	mov	sp, r7
 80098f6:	bd80      	pop	{r7, pc}
 80098f8:	20000014 	.word	0x20000014

080098fc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80098fc:	b580      	push	{r7, lr}
 80098fe:	b086      	sub	sp, #24
 8009900:	af02      	add	r7, sp, #8
 8009902:	60f8      	str	r0, [r7, #12]
 8009904:	60b9      	str	r1, [r7, #8]
 8009906:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	9300      	str	r3, [sp, #0]
 800990c:	68bb      	ldr	r3, [r7, #8]
 800990e:	2200      	movs	r2, #0
 8009910:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8009914:	68f8      	ldr	r0, [r7, #12]
 8009916:	f7ff ff63 	bl	80097e0 <SPI_WaitFifoStateUntilTimeout>
 800991a:	4603      	mov	r3, r0
 800991c:	2b00      	cmp	r3, #0
 800991e:	d007      	beq.n	8009930 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009920:	68fb      	ldr	r3, [r7, #12]
 8009922:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009924:	f043 0220 	orr.w	r2, r3, #32
 8009928:	68fb      	ldr	r3, [r7, #12]
 800992a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800992c:	2303      	movs	r3, #3
 800992e:	e027      	b.n	8009980 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	9300      	str	r3, [sp, #0]
 8009934:	68bb      	ldr	r3, [r7, #8]
 8009936:	2200      	movs	r2, #0
 8009938:	2180      	movs	r1, #128	; 0x80
 800993a:	68f8      	ldr	r0, [r7, #12]
 800993c:	f7ff fec8 	bl	80096d0 <SPI_WaitFlagStateUntilTimeout>
 8009940:	4603      	mov	r3, r0
 8009942:	2b00      	cmp	r3, #0
 8009944:	d007      	beq.n	8009956 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009946:	68fb      	ldr	r3, [r7, #12]
 8009948:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800994a:	f043 0220 	orr.w	r2, r3, #32
 800994e:	68fb      	ldr	r3, [r7, #12]
 8009950:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8009952:	2303      	movs	r3, #3
 8009954:	e014      	b.n	8009980 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	9300      	str	r3, [sp, #0]
 800995a:	68bb      	ldr	r3, [r7, #8]
 800995c:	2200      	movs	r2, #0
 800995e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8009962:	68f8      	ldr	r0, [r7, #12]
 8009964:	f7ff ff3c 	bl	80097e0 <SPI_WaitFifoStateUntilTimeout>
 8009968:	4603      	mov	r3, r0
 800996a:	2b00      	cmp	r3, #0
 800996c:	d007      	beq.n	800997e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800996e:	68fb      	ldr	r3, [r7, #12]
 8009970:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009972:	f043 0220 	orr.w	r2, r3, #32
 8009976:	68fb      	ldr	r3, [r7, #12]
 8009978:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800997a:	2303      	movs	r3, #3
 800997c:	e000      	b.n	8009980 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800997e:	2300      	movs	r3, #0
}
 8009980:	4618      	mov	r0, r3
 8009982:	3710      	adds	r7, #16
 8009984:	46bd      	mov	sp, r7
 8009986:	bd80      	pop	{r7, pc}

08009988 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009988:	b580      	push	{r7, lr}
 800998a:	b082      	sub	sp, #8
 800998c:	af00      	add	r7, sp, #0
 800998e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	2b00      	cmp	r3, #0
 8009994:	d101      	bne.n	800999a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009996:	2301      	movs	r3, #1
 8009998:	e049      	b.n	8009a2e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80099a0:	b2db      	uxtb	r3, r3
 80099a2:	2b00      	cmp	r3, #0
 80099a4:	d106      	bne.n	80099b4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	2200      	movs	r2, #0
 80099aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80099ae:	6878      	ldr	r0, [r7, #4]
 80099b0:	f7fb fee8 	bl	8005784 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	2202      	movs	r2, #2
 80099b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	681a      	ldr	r2, [r3, #0]
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	3304      	adds	r3, #4
 80099c4:	4619      	mov	r1, r3
 80099c6:	4610      	mov	r0, r2
 80099c8:	f000 fd5a 	bl	800a480 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	2201      	movs	r2, #1
 80099d0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	2201      	movs	r2, #1
 80099d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	2201      	movs	r2, #1
 80099e0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	2201      	movs	r2, #1
 80099e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	2201      	movs	r2, #1
 80099f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	2201      	movs	r2, #1
 80099f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	2201      	movs	r2, #1
 8009a00:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	2201      	movs	r2, #1
 8009a08:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	2201      	movs	r2, #1
 8009a10:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	2201      	movs	r2, #1
 8009a18:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	2201      	movs	r2, #1
 8009a20:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	2201      	movs	r2, #1
 8009a28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009a2c:	2300      	movs	r3, #0
}
 8009a2e:	4618      	mov	r0, r3
 8009a30:	3708      	adds	r7, #8
 8009a32:	46bd      	mov	sp, r7
 8009a34:	bd80      	pop	{r7, pc}
	...

08009a38 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009a38:	b480      	push	{r7}
 8009a3a:	b085      	sub	sp, #20
 8009a3c:	af00      	add	r7, sp, #0
 8009a3e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009a46:	b2db      	uxtb	r3, r3
 8009a48:	2b01      	cmp	r3, #1
 8009a4a:	d001      	beq.n	8009a50 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8009a4c:	2301      	movs	r3, #1
 8009a4e:	e036      	b.n	8009abe <HAL_TIM_Base_Start_IT+0x86>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	2202      	movs	r2, #2
 8009a54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	681b      	ldr	r3, [r3, #0]
 8009a5c:	68da      	ldr	r2, [r3, #12]
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	681b      	ldr	r3, [r3, #0]
 8009a62:	f042 0201 	orr.w	r2, r2, #1
 8009a66:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	681b      	ldr	r3, [r3, #0]
 8009a6c:	4a17      	ldr	r2, [pc, #92]	; (8009acc <HAL_TIM_Base_Start_IT+0x94>)
 8009a6e:	4293      	cmp	r3, r2
 8009a70:	d004      	beq.n	8009a7c <HAL_TIM_Base_Start_IT+0x44>
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	681b      	ldr	r3, [r3, #0]
 8009a76:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009a7a:	d115      	bne.n	8009aa8 <HAL_TIM_Base_Start_IT+0x70>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	681b      	ldr	r3, [r3, #0]
 8009a80:	689a      	ldr	r2, [r3, #8]
 8009a82:	4b13      	ldr	r3, [pc, #76]	; (8009ad0 <HAL_TIM_Base_Start_IT+0x98>)
 8009a84:	4013      	ands	r3, r2
 8009a86:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009a88:	68fb      	ldr	r3, [r7, #12]
 8009a8a:	2b06      	cmp	r3, #6
 8009a8c:	d015      	beq.n	8009aba <HAL_TIM_Base_Start_IT+0x82>
 8009a8e:	68fb      	ldr	r3, [r7, #12]
 8009a90:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009a94:	d011      	beq.n	8009aba <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	681b      	ldr	r3, [r3, #0]
 8009a9a:	681a      	ldr	r2, [r3, #0]
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	681b      	ldr	r3, [r3, #0]
 8009aa0:	f042 0201 	orr.w	r2, r2, #1
 8009aa4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009aa6:	e008      	b.n	8009aba <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	681b      	ldr	r3, [r3, #0]
 8009aac:	681a      	ldr	r2, [r3, #0]
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	681b      	ldr	r3, [r3, #0]
 8009ab2:	f042 0201 	orr.w	r2, r2, #1
 8009ab6:	601a      	str	r2, [r3, #0]
 8009ab8:	e000      	b.n	8009abc <HAL_TIM_Base_Start_IT+0x84>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009aba:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8009abc:	2300      	movs	r3, #0
}
 8009abe:	4618      	mov	r0, r3
 8009ac0:	3714      	adds	r7, #20
 8009ac2:	46bd      	mov	sp, r7
 8009ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ac8:	4770      	bx	lr
 8009aca:	bf00      	nop
 8009acc:	40012c00 	.word	0x40012c00
 8009ad0:	00010007 	.word	0x00010007

08009ad4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8009ad4:	b580      	push	{r7, lr}
 8009ad6:	b082      	sub	sp, #8
 8009ad8:	af00      	add	r7, sp, #0
 8009ada:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	2b00      	cmp	r3, #0
 8009ae0:	d101      	bne.n	8009ae6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8009ae2:	2301      	movs	r3, #1
 8009ae4:	e049      	b.n	8009b7a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009aec:	b2db      	uxtb	r3, r3
 8009aee:	2b00      	cmp	r3, #0
 8009af0:	d106      	bne.n	8009b00 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	2200      	movs	r2, #0
 8009af6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8009afa:	6878      	ldr	r0, [r7, #4]
 8009afc:	f000 f841 	bl	8009b82 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	2202      	movs	r2, #2
 8009b04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	681a      	ldr	r2, [r3, #0]
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	3304      	adds	r3, #4
 8009b10:	4619      	mov	r1, r3
 8009b12:	4610      	mov	r0, r2
 8009b14:	f000 fcb4 	bl	800a480 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	2201      	movs	r2, #1
 8009b1c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	2201      	movs	r2, #1
 8009b24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	2201      	movs	r2, #1
 8009b2c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	2201      	movs	r2, #1
 8009b34:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	2201      	movs	r2, #1
 8009b3c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	2201      	movs	r2, #1
 8009b44:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	2201      	movs	r2, #1
 8009b4c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	2201      	movs	r2, #1
 8009b54:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	2201      	movs	r2, #1
 8009b5c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	2201      	movs	r2, #1
 8009b64:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	2201      	movs	r2, #1
 8009b6c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	2201      	movs	r2, #1
 8009b74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009b78:	2300      	movs	r3, #0
}
 8009b7a:	4618      	mov	r0, r3
 8009b7c:	3708      	adds	r7, #8
 8009b7e:	46bd      	mov	sp, r7
 8009b80:	bd80      	pop	{r7, pc}

08009b82 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8009b82:	b480      	push	{r7}
 8009b84:	b083      	sub	sp, #12
 8009b86:	af00      	add	r7, sp, #0
 8009b88:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8009b8a:	bf00      	nop
 8009b8c:	370c      	adds	r7, #12
 8009b8e:	46bd      	mov	sp, r7
 8009b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b94:	4770      	bx	lr
	...

08009b98 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009b98:	b580      	push	{r7, lr}
 8009b9a:	b084      	sub	sp, #16
 8009b9c:	af00      	add	r7, sp, #0
 8009b9e:	6078      	str	r0, [r7, #4]
 8009ba0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8009ba2:	683b      	ldr	r3, [r7, #0]
 8009ba4:	2b00      	cmp	r3, #0
 8009ba6:	d109      	bne.n	8009bbc <HAL_TIM_PWM_Start+0x24>
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009bae:	b2db      	uxtb	r3, r3
 8009bb0:	2b01      	cmp	r3, #1
 8009bb2:	bf14      	ite	ne
 8009bb4:	2301      	movne	r3, #1
 8009bb6:	2300      	moveq	r3, #0
 8009bb8:	b2db      	uxtb	r3, r3
 8009bba:	e03c      	b.n	8009c36 <HAL_TIM_PWM_Start+0x9e>
 8009bbc:	683b      	ldr	r3, [r7, #0]
 8009bbe:	2b04      	cmp	r3, #4
 8009bc0:	d109      	bne.n	8009bd6 <HAL_TIM_PWM_Start+0x3e>
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8009bc8:	b2db      	uxtb	r3, r3
 8009bca:	2b01      	cmp	r3, #1
 8009bcc:	bf14      	ite	ne
 8009bce:	2301      	movne	r3, #1
 8009bd0:	2300      	moveq	r3, #0
 8009bd2:	b2db      	uxtb	r3, r3
 8009bd4:	e02f      	b.n	8009c36 <HAL_TIM_PWM_Start+0x9e>
 8009bd6:	683b      	ldr	r3, [r7, #0]
 8009bd8:	2b08      	cmp	r3, #8
 8009bda:	d109      	bne.n	8009bf0 <HAL_TIM_PWM_Start+0x58>
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009be2:	b2db      	uxtb	r3, r3
 8009be4:	2b01      	cmp	r3, #1
 8009be6:	bf14      	ite	ne
 8009be8:	2301      	movne	r3, #1
 8009bea:	2300      	moveq	r3, #0
 8009bec:	b2db      	uxtb	r3, r3
 8009bee:	e022      	b.n	8009c36 <HAL_TIM_PWM_Start+0x9e>
 8009bf0:	683b      	ldr	r3, [r7, #0]
 8009bf2:	2b0c      	cmp	r3, #12
 8009bf4:	d109      	bne.n	8009c0a <HAL_TIM_PWM_Start+0x72>
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009bfc:	b2db      	uxtb	r3, r3
 8009bfe:	2b01      	cmp	r3, #1
 8009c00:	bf14      	ite	ne
 8009c02:	2301      	movne	r3, #1
 8009c04:	2300      	moveq	r3, #0
 8009c06:	b2db      	uxtb	r3, r3
 8009c08:	e015      	b.n	8009c36 <HAL_TIM_PWM_Start+0x9e>
 8009c0a:	683b      	ldr	r3, [r7, #0]
 8009c0c:	2b10      	cmp	r3, #16
 8009c0e:	d109      	bne.n	8009c24 <HAL_TIM_PWM_Start+0x8c>
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8009c16:	b2db      	uxtb	r3, r3
 8009c18:	2b01      	cmp	r3, #1
 8009c1a:	bf14      	ite	ne
 8009c1c:	2301      	movne	r3, #1
 8009c1e:	2300      	moveq	r3, #0
 8009c20:	b2db      	uxtb	r3, r3
 8009c22:	e008      	b.n	8009c36 <HAL_TIM_PWM_Start+0x9e>
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8009c2a:	b2db      	uxtb	r3, r3
 8009c2c:	2b01      	cmp	r3, #1
 8009c2e:	bf14      	ite	ne
 8009c30:	2301      	movne	r3, #1
 8009c32:	2300      	moveq	r3, #0
 8009c34:	b2db      	uxtb	r3, r3
 8009c36:	2b00      	cmp	r3, #0
 8009c38:	d001      	beq.n	8009c3e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8009c3a:	2301      	movs	r3, #1
 8009c3c:	e079      	b.n	8009d32 <HAL_TIM_PWM_Start+0x19a>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8009c3e:	683b      	ldr	r3, [r7, #0]
 8009c40:	2b00      	cmp	r3, #0
 8009c42:	d104      	bne.n	8009c4e <HAL_TIM_PWM_Start+0xb6>
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	2202      	movs	r2, #2
 8009c48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009c4c:	e023      	b.n	8009c96 <HAL_TIM_PWM_Start+0xfe>
 8009c4e:	683b      	ldr	r3, [r7, #0]
 8009c50:	2b04      	cmp	r3, #4
 8009c52:	d104      	bne.n	8009c5e <HAL_TIM_PWM_Start+0xc6>
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	2202      	movs	r2, #2
 8009c58:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009c5c:	e01b      	b.n	8009c96 <HAL_TIM_PWM_Start+0xfe>
 8009c5e:	683b      	ldr	r3, [r7, #0]
 8009c60:	2b08      	cmp	r3, #8
 8009c62:	d104      	bne.n	8009c6e <HAL_TIM_PWM_Start+0xd6>
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	2202      	movs	r2, #2
 8009c68:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009c6c:	e013      	b.n	8009c96 <HAL_TIM_PWM_Start+0xfe>
 8009c6e:	683b      	ldr	r3, [r7, #0]
 8009c70:	2b0c      	cmp	r3, #12
 8009c72:	d104      	bne.n	8009c7e <HAL_TIM_PWM_Start+0xe6>
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	2202      	movs	r2, #2
 8009c78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009c7c:	e00b      	b.n	8009c96 <HAL_TIM_PWM_Start+0xfe>
 8009c7e:	683b      	ldr	r3, [r7, #0]
 8009c80:	2b10      	cmp	r3, #16
 8009c82:	d104      	bne.n	8009c8e <HAL_TIM_PWM_Start+0xf6>
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	2202      	movs	r2, #2
 8009c88:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009c8c:	e003      	b.n	8009c96 <HAL_TIM_PWM_Start+0xfe>
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	2202      	movs	r2, #2
 8009c92:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	681b      	ldr	r3, [r3, #0]
 8009c9a:	2201      	movs	r2, #1
 8009c9c:	6839      	ldr	r1, [r7, #0]
 8009c9e:	4618      	mov	r0, r3
 8009ca0:	f000 ff6c 	bl	800ab7c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	681b      	ldr	r3, [r3, #0]
 8009ca8:	4a24      	ldr	r2, [pc, #144]	; (8009d3c <HAL_TIM_PWM_Start+0x1a4>)
 8009caa:	4293      	cmp	r3, r2
 8009cac:	d009      	beq.n	8009cc2 <HAL_TIM_PWM_Start+0x12a>
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	681b      	ldr	r3, [r3, #0]
 8009cb2:	4a23      	ldr	r2, [pc, #140]	; (8009d40 <HAL_TIM_PWM_Start+0x1a8>)
 8009cb4:	4293      	cmp	r3, r2
 8009cb6:	d004      	beq.n	8009cc2 <HAL_TIM_PWM_Start+0x12a>
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	681b      	ldr	r3, [r3, #0]
 8009cbc:	4a21      	ldr	r2, [pc, #132]	; (8009d44 <HAL_TIM_PWM_Start+0x1ac>)
 8009cbe:	4293      	cmp	r3, r2
 8009cc0:	d101      	bne.n	8009cc6 <HAL_TIM_PWM_Start+0x12e>
 8009cc2:	2301      	movs	r3, #1
 8009cc4:	e000      	b.n	8009cc8 <HAL_TIM_PWM_Start+0x130>
 8009cc6:	2300      	movs	r3, #0
 8009cc8:	2b00      	cmp	r3, #0
 8009cca:	d007      	beq.n	8009cdc <HAL_TIM_PWM_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	681b      	ldr	r3, [r3, #0]
 8009cd0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	681b      	ldr	r3, [r3, #0]
 8009cd6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009cda:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	681b      	ldr	r3, [r3, #0]
 8009ce0:	4a16      	ldr	r2, [pc, #88]	; (8009d3c <HAL_TIM_PWM_Start+0x1a4>)
 8009ce2:	4293      	cmp	r3, r2
 8009ce4:	d004      	beq.n	8009cf0 <HAL_TIM_PWM_Start+0x158>
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	681b      	ldr	r3, [r3, #0]
 8009cea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009cee:	d115      	bne.n	8009d1c <HAL_TIM_PWM_Start+0x184>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	681b      	ldr	r3, [r3, #0]
 8009cf4:	689a      	ldr	r2, [r3, #8]
 8009cf6:	4b14      	ldr	r3, [pc, #80]	; (8009d48 <HAL_TIM_PWM_Start+0x1b0>)
 8009cf8:	4013      	ands	r3, r2
 8009cfa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009cfc:	68fb      	ldr	r3, [r7, #12]
 8009cfe:	2b06      	cmp	r3, #6
 8009d00:	d015      	beq.n	8009d2e <HAL_TIM_PWM_Start+0x196>
 8009d02:	68fb      	ldr	r3, [r7, #12]
 8009d04:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009d08:	d011      	beq.n	8009d2e <HAL_TIM_PWM_Start+0x196>
    {
      __HAL_TIM_ENABLE(htim);
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	681b      	ldr	r3, [r3, #0]
 8009d0e:	681a      	ldr	r2, [r3, #0]
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	681b      	ldr	r3, [r3, #0]
 8009d14:	f042 0201 	orr.w	r2, r2, #1
 8009d18:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009d1a:	e008      	b.n	8009d2e <HAL_TIM_PWM_Start+0x196>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	681b      	ldr	r3, [r3, #0]
 8009d20:	681a      	ldr	r2, [r3, #0]
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	681b      	ldr	r3, [r3, #0]
 8009d26:	f042 0201 	orr.w	r2, r2, #1
 8009d2a:	601a      	str	r2, [r3, #0]
 8009d2c:	e000      	b.n	8009d30 <HAL_TIM_PWM_Start+0x198>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009d2e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8009d30:	2300      	movs	r3, #0
}
 8009d32:	4618      	mov	r0, r3
 8009d34:	3710      	adds	r7, #16
 8009d36:	46bd      	mov	sp, r7
 8009d38:	bd80      	pop	{r7, pc}
 8009d3a:	bf00      	nop
 8009d3c:	40012c00 	.word	0x40012c00
 8009d40:	40014400 	.word	0x40014400
 8009d44:	40014800 	.word	0x40014800
 8009d48:	00010007 	.word	0x00010007

08009d4c <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009d4c:	b580      	push	{r7, lr}
 8009d4e:	b082      	sub	sp, #8
 8009d50:	af00      	add	r7, sp, #0
 8009d52:	6078      	str	r0, [r7, #4]
 8009d54:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	681b      	ldr	r3, [r3, #0]
 8009d5a:	2200      	movs	r2, #0
 8009d5c:	6839      	ldr	r1, [r7, #0]
 8009d5e:	4618      	mov	r0, r3
 8009d60:	f000 ff0c 	bl	800ab7c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	681b      	ldr	r3, [r3, #0]
 8009d68:	4a39      	ldr	r2, [pc, #228]	; (8009e50 <HAL_TIM_PWM_Stop+0x104>)
 8009d6a:	4293      	cmp	r3, r2
 8009d6c:	d009      	beq.n	8009d82 <HAL_TIM_PWM_Stop+0x36>
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	681b      	ldr	r3, [r3, #0]
 8009d72:	4a38      	ldr	r2, [pc, #224]	; (8009e54 <HAL_TIM_PWM_Stop+0x108>)
 8009d74:	4293      	cmp	r3, r2
 8009d76:	d004      	beq.n	8009d82 <HAL_TIM_PWM_Stop+0x36>
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	681b      	ldr	r3, [r3, #0]
 8009d7c:	4a36      	ldr	r2, [pc, #216]	; (8009e58 <HAL_TIM_PWM_Stop+0x10c>)
 8009d7e:	4293      	cmp	r3, r2
 8009d80:	d101      	bne.n	8009d86 <HAL_TIM_PWM_Stop+0x3a>
 8009d82:	2301      	movs	r3, #1
 8009d84:	e000      	b.n	8009d88 <HAL_TIM_PWM_Stop+0x3c>
 8009d86:	2300      	movs	r3, #0
 8009d88:	2b00      	cmp	r3, #0
 8009d8a:	d017      	beq.n	8009dbc <HAL_TIM_PWM_Stop+0x70>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	681b      	ldr	r3, [r3, #0]
 8009d90:	6a1a      	ldr	r2, [r3, #32]
 8009d92:	f241 1311 	movw	r3, #4369	; 0x1111
 8009d96:	4013      	ands	r3, r2
 8009d98:	2b00      	cmp	r3, #0
 8009d9a:	d10f      	bne.n	8009dbc <HAL_TIM_PWM_Stop+0x70>
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	681b      	ldr	r3, [r3, #0]
 8009da0:	6a1a      	ldr	r2, [r3, #32]
 8009da2:	f240 4344 	movw	r3, #1092	; 0x444
 8009da6:	4013      	ands	r3, r2
 8009da8:	2b00      	cmp	r3, #0
 8009daa:	d107      	bne.n	8009dbc <HAL_TIM_PWM_Stop+0x70>
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	681b      	ldr	r3, [r3, #0]
 8009db0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	681b      	ldr	r3, [r3, #0]
 8009db6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8009dba:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	681b      	ldr	r3, [r3, #0]
 8009dc0:	6a1a      	ldr	r2, [r3, #32]
 8009dc2:	f241 1311 	movw	r3, #4369	; 0x1111
 8009dc6:	4013      	ands	r3, r2
 8009dc8:	2b00      	cmp	r3, #0
 8009dca:	d10f      	bne.n	8009dec <HAL_TIM_PWM_Stop+0xa0>
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	681b      	ldr	r3, [r3, #0]
 8009dd0:	6a1a      	ldr	r2, [r3, #32]
 8009dd2:	f240 4344 	movw	r3, #1092	; 0x444
 8009dd6:	4013      	ands	r3, r2
 8009dd8:	2b00      	cmp	r3, #0
 8009dda:	d107      	bne.n	8009dec <HAL_TIM_PWM_Stop+0xa0>
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	681b      	ldr	r3, [r3, #0]
 8009de0:	681a      	ldr	r2, [r3, #0]
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	681b      	ldr	r3, [r3, #0]
 8009de6:	f022 0201 	bic.w	r2, r2, #1
 8009dea:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8009dec:	683b      	ldr	r3, [r7, #0]
 8009dee:	2b00      	cmp	r3, #0
 8009df0:	d104      	bne.n	8009dfc <HAL_TIM_PWM_Stop+0xb0>
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	2201      	movs	r2, #1
 8009df6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009dfa:	e023      	b.n	8009e44 <HAL_TIM_PWM_Stop+0xf8>
 8009dfc:	683b      	ldr	r3, [r7, #0]
 8009dfe:	2b04      	cmp	r3, #4
 8009e00:	d104      	bne.n	8009e0c <HAL_TIM_PWM_Stop+0xc0>
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	2201      	movs	r2, #1
 8009e06:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009e0a:	e01b      	b.n	8009e44 <HAL_TIM_PWM_Stop+0xf8>
 8009e0c:	683b      	ldr	r3, [r7, #0]
 8009e0e:	2b08      	cmp	r3, #8
 8009e10:	d104      	bne.n	8009e1c <HAL_TIM_PWM_Stop+0xd0>
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	2201      	movs	r2, #1
 8009e16:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009e1a:	e013      	b.n	8009e44 <HAL_TIM_PWM_Stop+0xf8>
 8009e1c:	683b      	ldr	r3, [r7, #0]
 8009e1e:	2b0c      	cmp	r3, #12
 8009e20:	d104      	bne.n	8009e2c <HAL_TIM_PWM_Stop+0xe0>
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	2201      	movs	r2, #1
 8009e26:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009e2a:	e00b      	b.n	8009e44 <HAL_TIM_PWM_Stop+0xf8>
 8009e2c:	683b      	ldr	r3, [r7, #0]
 8009e2e:	2b10      	cmp	r3, #16
 8009e30:	d104      	bne.n	8009e3c <HAL_TIM_PWM_Stop+0xf0>
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	2201      	movs	r2, #1
 8009e36:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009e3a:	e003      	b.n	8009e44 <HAL_TIM_PWM_Stop+0xf8>
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	2201      	movs	r2, #1
 8009e40:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 8009e44:	2300      	movs	r3, #0
}
 8009e46:	4618      	mov	r0, r3
 8009e48:	3708      	adds	r7, #8
 8009e4a:	46bd      	mov	sp, r7
 8009e4c:	bd80      	pop	{r7, pc}
 8009e4e:	bf00      	nop
 8009e50:	40012c00 	.word	0x40012c00
 8009e54:	40014400 	.word	0x40014400
 8009e58:	40014800 	.word	0x40014800

08009e5c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009e5c:	b580      	push	{r7, lr}
 8009e5e:	b082      	sub	sp, #8
 8009e60:	af00      	add	r7, sp, #0
 8009e62:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	681b      	ldr	r3, [r3, #0]
 8009e68:	691b      	ldr	r3, [r3, #16]
 8009e6a:	f003 0302 	and.w	r3, r3, #2
 8009e6e:	2b02      	cmp	r3, #2
 8009e70:	d122      	bne.n	8009eb8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	681b      	ldr	r3, [r3, #0]
 8009e76:	68db      	ldr	r3, [r3, #12]
 8009e78:	f003 0302 	and.w	r3, r3, #2
 8009e7c:	2b02      	cmp	r3, #2
 8009e7e:	d11b      	bne.n	8009eb8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	681b      	ldr	r3, [r3, #0]
 8009e84:	f06f 0202 	mvn.w	r2, #2
 8009e88:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	2201      	movs	r2, #1
 8009e8e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	681b      	ldr	r3, [r3, #0]
 8009e94:	699b      	ldr	r3, [r3, #24]
 8009e96:	f003 0303 	and.w	r3, r3, #3
 8009e9a:	2b00      	cmp	r3, #0
 8009e9c:	d003      	beq.n	8009ea6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009e9e:	6878      	ldr	r0, [r7, #4]
 8009ea0:	f000 facf 	bl	800a442 <HAL_TIM_IC_CaptureCallback>
 8009ea4:	e005      	b.n	8009eb2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009ea6:	6878      	ldr	r0, [r7, #4]
 8009ea8:	f000 fac1 	bl	800a42e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009eac:	6878      	ldr	r0, [r7, #4]
 8009eae:	f000 fad2 	bl	800a456 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	2200      	movs	r2, #0
 8009eb6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	681b      	ldr	r3, [r3, #0]
 8009ebc:	691b      	ldr	r3, [r3, #16]
 8009ebe:	f003 0304 	and.w	r3, r3, #4
 8009ec2:	2b04      	cmp	r3, #4
 8009ec4:	d122      	bne.n	8009f0c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	681b      	ldr	r3, [r3, #0]
 8009eca:	68db      	ldr	r3, [r3, #12]
 8009ecc:	f003 0304 	and.w	r3, r3, #4
 8009ed0:	2b04      	cmp	r3, #4
 8009ed2:	d11b      	bne.n	8009f0c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	681b      	ldr	r3, [r3, #0]
 8009ed8:	f06f 0204 	mvn.w	r2, #4
 8009edc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	2202      	movs	r2, #2
 8009ee2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	681b      	ldr	r3, [r3, #0]
 8009ee8:	699b      	ldr	r3, [r3, #24]
 8009eea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009eee:	2b00      	cmp	r3, #0
 8009ef0:	d003      	beq.n	8009efa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009ef2:	6878      	ldr	r0, [r7, #4]
 8009ef4:	f000 faa5 	bl	800a442 <HAL_TIM_IC_CaptureCallback>
 8009ef8:	e005      	b.n	8009f06 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009efa:	6878      	ldr	r0, [r7, #4]
 8009efc:	f000 fa97 	bl	800a42e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009f00:	6878      	ldr	r0, [r7, #4]
 8009f02:	f000 faa8 	bl	800a456 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	2200      	movs	r2, #0
 8009f0a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	681b      	ldr	r3, [r3, #0]
 8009f10:	691b      	ldr	r3, [r3, #16]
 8009f12:	f003 0308 	and.w	r3, r3, #8
 8009f16:	2b08      	cmp	r3, #8
 8009f18:	d122      	bne.n	8009f60 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	681b      	ldr	r3, [r3, #0]
 8009f1e:	68db      	ldr	r3, [r3, #12]
 8009f20:	f003 0308 	and.w	r3, r3, #8
 8009f24:	2b08      	cmp	r3, #8
 8009f26:	d11b      	bne.n	8009f60 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	681b      	ldr	r3, [r3, #0]
 8009f2c:	f06f 0208 	mvn.w	r2, #8
 8009f30:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	2204      	movs	r2, #4
 8009f36:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	681b      	ldr	r3, [r3, #0]
 8009f3c:	69db      	ldr	r3, [r3, #28]
 8009f3e:	f003 0303 	and.w	r3, r3, #3
 8009f42:	2b00      	cmp	r3, #0
 8009f44:	d003      	beq.n	8009f4e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009f46:	6878      	ldr	r0, [r7, #4]
 8009f48:	f000 fa7b 	bl	800a442 <HAL_TIM_IC_CaptureCallback>
 8009f4c:	e005      	b.n	8009f5a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009f4e:	6878      	ldr	r0, [r7, #4]
 8009f50:	f000 fa6d 	bl	800a42e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009f54:	6878      	ldr	r0, [r7, #4]
 8009f56:	f000 fa7e 	bl	800a456 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	2200      	movs	r2, #0
 8009f5e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	681b      	ldr	r3, [r3, #0]
 8009f64:	691b      	ldr	r3, [r3, #16]
 8009f66:	f003 0310 	and.w	r3, r3, #16
 8009f6a:	2b10      	cmp	r3, #16
 8009f6c:	d122      	bne.n	8009fb4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	681b      	ldr	r3, [r3, #0]
 8009f72:	68db      	ldr	r3, [r3, #12]
 8009f74:	f003 0310 	and.w	r3, r3, #16
 8009f78:	2b10      	cmp	r3, #16
 8009f7a:	d11b      	bne.n	8009fb4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	681b      	ldr	r3, [r3, #0]
 8009f80:	f06f 0210 	mvn.w	r2, #16
 8009f84:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	2208      	movs	r2, #8
 8009f8a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	681b      	ldr	r3, [r3, #0]
 8009f90:	69db      	ldr	r3, [r3, #28]
 8009f92:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009f96:	2b00      	cmp	r3, #0
 8009f98:	d003      	beq.n	8009fa2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009f9a:	6878      	ldr	r0, [r7, #4]
 8009f9c:	f000 fa51 	bl	800a442 <HAL_TIM_IC_CaptureCallback>
 8009fa0:	e005      	b.n	8009fae <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009fa2:	6878      	ldr	r0, [r7, #4]
 8009fa4:	f000 fa43 	bl	800a42e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009fa8:	6878      	ldr	r0, [r7, #4]
 8009faa:	f000 fa54 	bl	800a456 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	2200      	movs	r2, #0
 8009fb2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	681b      	ldr	r3, [r3, #0]
 8009fb8:	691b      	ldr	r3, [r3, #16]
 8009fba:	f003 0301 	and.w	r3, r3, #1
 8009fbe:	2b01      	cmp	r3, #1
 8009fc0:	d10e      	bne.n	8009fe0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	681b      	ldr	r3, [r3, #0]
 8009fc6:	68db      	ldr	r3, [r3, #12]
 8009fc8:	f003 0301 	and.w	r3, r3, #1
 8009fcc:	2b01      	cmp	r3, #1
 8009fce:	d107      	bne.n	8009fe0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	681b      	ldr	r3, [r3, #0]
 8009fd4:	f06f 0201 	mvn.w	r2, #1
 8009fd8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009fda:	6878      	ldr	r0, [r7, #4]
 8009fdc:	f7fb fa8c 	bl	80054f8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	681b      	ldr	r3, [r3, #0]
 8009fe4:	691b      	ldr	r3, [r3, #16]
 8009fe6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009fea:	2b80      	cmp	r3, #128	; 0x80
 8009fec:	d10e      	bne.n	800a00c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	681b      	ldr	r3, [r3, #0]
 8009ff2:	68db      	ldr	r3, [r3, #12]
 8009ff4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009ff8:	2b80      	cmp	r3, #128	; 0x80
 8009ffa:	d107      	bne.n	800a00c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	681b      	ldr	r3, [r3, #0]
 800a000:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800a004:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800a006:	6878      	ldr	r0, [r7, #4]
 800a008:	f000 fed8 	bl	800adbc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	681b      	ldr	r3, [r3, #0]
 800a010:	691b      	ldr	r3, [r3, #16]
 800a012:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a016:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a01a:	d10e      	bne.n	800a03a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	681b      	ldr	r3, [r3, #0]
 800a020:	68db      	ldr	r3, [r3, #12]
 800a022:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a026:	2b80      	cmp	r3, #128	; 0x80
 800a028:	d107      	bne.n	800a03a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	681b      	ldr	r3, [r3, #0]
 800a02e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800a032:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800a034:	6878      	ldr	r0, [r7, #4]
 800a036:	f000 fecb 	bl	800add0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	681b      	ldr	r3, [r3, #0]
 800a03e:	691b      	ldr	r3, [r3, #16]
 800a040:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a044:	2b40      	cmp	r3, #64	; 0x40
 800a046:	d10e      	bne.n	800a066 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	681b      	ldr	r3, [r3, #0]
 800a04c:	68db      	ldr	r3, [r3, #12]
 800a04e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a052:	2b40      	cmp	r3, #64	; 0x40
 800a054:	d107      	bne.n	800a066 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	681b      	ldr	r3, [r3, #0]
 800a05a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800a05e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800a060:	6878      	ldr	r0, [r7, #4]
 800a062:	f000 fa02 	bl	800a46a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	681b      	ldr	r3, [r3, #0]
 800a06a:	691b      	ldr	r3, [r3, #16]
 800a06c:	f003 0320 	and.w	r3, r3, #32
 800a070:	2b20      	cmp	r3, #32
 800a072:	d10e      	bne.n	800a092 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	681b      	ldr	r3, [r3, #0]
 800a078:	68db      	ldr	r3, [r3, #12]
 800a07a:	f003 0320 	and.w	r3, r3, #32
 800a07e:	2b20      	cmp	r3, #32
 800a080:	d107      	bne.n	800a092 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	681b      	ldr	r3, [r3, #0]
 800a086:	f06f 0220 	mvn.w	r2, #32
 800a08a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800a08c:	6878      	ldr	r0, [r7, #4]
 800a08e:	f000 fe8b 	bl	800ada8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a092:	bf00      	nop
 800a094:	3708      	adds	r7, #8
 800a096:	46bd      	mov	sp, r7
 800a098:	bd80      	pop	{r7, pc}
	...

0800a09c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800a09c:	b580      	push	{r7, lr}
 800a09e:	b084      	sub	sp, #16
 800a0a0:	af00      	add	r7, sp, #0
 800a0a2:	60f8      	str	r0, [r7, #12]
 800a0a4:	60b9      	str	r1, [r7, #8]
 800a0a6:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800a0a8:	68fb      	ldr	r3, [r7, #12]
 800a0aa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a0ae:	2b01      	cmp	r3, #1
 800a0b0:	d101      	bne.n	800a0b6 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800a0b2:	2302      	movs	r3, #2
 800a0b4:	e0fd      	b.n	800a2b2 <HAL_TIM_PWM_ConfigChannel+0x216>
 800a0b6:	68fb      	ldr	r3, [r7, #12]
 800a0b8:	2201      	movs	r2, #1
 800a0ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	2b14      	cmp	r3, #20
 800a0c2:	f200 80f0 	bhi.w	800a2a6 <HAL_TIM_PWM_ConfigChannel+0x20a>
 800a0c6:	a201      	add	r2, pc, #4	; (adr r2, 800a0cc <HAL_TIM_PWM_ConfigChannel+0x30>)
 800a0c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a0cc:	0800a121 	.word	0x0800a121
 800a0d0:	0800a2a7 	.word	0x0800a2a7
 800a0d4:	0800a2a7 	.word	0x0800a2a7
 800a0d8:	0800a2a7 	.word	0x0800a2a7
 800a0dc:	0800a161 	.word	0x0800a161
 800a0e0:	0800a2a7 	.word	0x0800a2a7
 800a0e4:	0800a2a7 	.word	0x0800a2a7
 800a0e8:	0800a2a7 	.word	0x0800a2a7
 800a0ec:	0800a1a3 	.word	0x0800a1a3
 800a0f0:	0800a2a7 	.word	0x0800a2a7
 800a0f4:	0800a2a7 	.word	0x0800a2a7
 800a0f8:	0800a2a7 	.word	0x0800a2a7
 800a0fc:	0800a1e3 	.word	0x0800a1e3
 800a100:	0800a2a7 	.word	0x0800a2a7
 800a104:	0800a2a7 	.word	0x0800a2a7
 800a108:	0800a2a7 	.word	0x0800a2a7
 800a10c:	0800a225 	.word	0x0800a225
 800a110:	0800a2a7 	.word	0x0800a2a7
 800a114:	0800a2a7 	.word	0x0800a2a7
 800a118:	0800a2a7 	.word	0x0800a2a7
 800a11c:	0800a265 	.word	0x0800a265
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800a120:	68fb      	ldr	r3, [r7, #12]
 800a122:	681b      	ldr	r3, [r3, #0]
 800a124:	68b9      	ldr	r1, [r7, #8]
 800a126:	4618      	mov	r0, r3
 800a128:	f000 fa0e 	bl	800a548 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800a12c:	68fb      	ldr	r3, [r7, #12]
 800a12e:	681b      	ldr	r3, [r3, #0]
 800a130:	699a      	ldr	r2, [r3, #24]
 800a132:	68fb      	ldr	r3, [r7, #12]
 800a134:	681b      	ldr	r3, [r3, #0]
 800a136:	f042 0208 	orr.w	r2, r2, #8
 800a13a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800a13c:	68fb      	ldr	r3, [r7, #12]
 800a13e:	681b      	ldr	r3, [r3, #0]
 800a140:	699a      	ldr	r2, [r3, #24]
 800a142:	68fb      	ldr	r3, [r7, #12]
 800a144:	681b      	ldr	r3, [r3, #0]
 800a146:	f022 0204 	bic.w	r2, r2, #4
 800a14a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800a14c:	68fb      	ldr	r3, [r7, #12]
 800a14e:	681b      	ldr	r3, [r3, #0]
 800a150:	6999      	ldr	r1, [r3, #24]
 800a152:	68bb      	ldr	r3, [r7, #8]
 800a154:	691a      	ldr	r2, [r3, #16]
 800a156:	68fb      	ldr	r3, [r7, #12]
 800a158:	681b      	ldr	r3, [r3, #0]
 800a15a:	430a      	orrs	r2, r1
 800a15c:	619a      	str	r2, [r3, #24]
      break;
 800a15e:	e0a3      	b.n	800a2a8 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800a160:	68fb      	ldr	r3, [r7, #12]
 800a162:	681b      	ldr	r3, [r3, #0]
 800a164:	68b9      	ldr	r1, [r7, #8]
 800a166:	4618      	mov	r0, r3
 800a168:	f000 fa6a 	bl	800a640 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800a16c:	68fb      	ldr	r3, [r7, #12]
 800a16e:	681b      	ldr	r3, [r3, #0]
 800a170:	699a      	ldr	r2, [r3, #24]
 800a172:	68fb      	ldr	r3, [r7, #12]
 800a174:	681b      	ldr	r3, [r3, #0]
 800a176:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a17a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800a17c:	68fb      	ldr	r3, [r7, #12]
 800a17e:	681b      	ldr	r3, [r3, #0]
 800a180:	699a      	ldr	r2, [r3, #24]
 800a182:	68fb      	ldr	r3, [r7, #12]
 800a184:	681b      	ldr	r3, [r3, #0]
 800a186:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a18a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800a18c:	68fb      	ldr	r3, [r7, #12]
 800a18e:	681b      	ldr	r3, [r3, #0]
 800a190:	6999      	ldr	r1, [r3, #24]
 800a192:	68bb      	ldr	r3, [r7, #8]
 800a194:	691b      	ldr	r3, [r3, #16]
 800a196:	021a      	lsls	r2, r3, #8
 800a198:	68fb      	ldr	r3, [r7, #12]
 800a19a:	681b      	ldr	r3, [r3, #0]
 800a19c:	430a      	orrs	r2, r1
 800a19e:	619a      	str	r2, [r3, #24]
      break;
 800a1a0:	e082      	b.n	800a2a8 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800a1a2:	68fb      	ldr	r3, [r7, #12]
 800a1a4:	681b      	ldr	r3, [r3, #0]
 800a1a6:	68b9      	ldr	r1, [r7, #8]
 800a1a8:	4618      	mov	r0, r3
 800a1aa:	f000 fac3 	bl	800a734 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800a1ae:	68fb      	ldr	r3, [r7, #12]
 800a1b0:	681b      	ldr	r3, [r3, #0]
 800a1b2:	69da      	ldr	r2, [r3, #28]
 800a1b4:	68fb      	ldr	r3, [r7, #12]
 800a1b6:	681b      	ldr	r3, [r3, #0]
 800a1b8:	f042 0208 	orr.w	r2, r2, #8
 800a1bc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800a1be:	68fb      	ldr	r3, [r7, #12]
 800a1c0:	681b      	ldr	r3, [r3, #0]
 800a1c2:	69da      	ldr	r2, [r3, #28]
 800a1c4:	68fb      	ldr	r3, [r7, #12]
 800a1c6:	681b      	ldr	r3, [r3, #0]
 800a1c8:	f022 0204 	bic.w	r2, r2, #4
 800a1cc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800a1ce:	68fb      	ldr	r3, [r7, #12]
 800a1d0:	681b      	ldr	r3, [r3, #0]
 800a1d2:	69d9      	ldr	r1, [r3, #28]
 800a1d4:	68bb      	ldr	r3, [r7, #8]
 800a1d6:	691a      	ldr	r2, [r3, #16]
 800a1d8:	68fb      	ldr	r3, [r7, #12]
 800a1da:	681b      	ldr	r3, [r3, #0]
 800a1dc:	430a      	orrs	r2, r1
 800a1de:	61da      	str	r2, [r3, #28]
      break;
 800a1e0:	e062      	b.n	800a2a8 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800a1e2:	68fb      	ldr	r3, [r7, #12]
 800a1e4:	681b      	ldr	r3, [r3, #0]
 800a1e6:	68b9      	ldr	r1, [r7, #8]
 800a1e8:	4618      	mov	r0, r3
 800a1ea:	f000 fb1b 	bl	800a824 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800a1ee:	68fb      	ldr	r3, [r7, #12]
 800a1f0:	681b      	ldr	r3, [r3, #0]
 800a1f2:	69da      	ldr	r2, [r3, #28]
 800a1f4:	68fb      	ldr	r3, [r7, #12]
 800a1f6:	681b      	ldr	r3, [r3, #0]
 800a1f8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a1fc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800a1fe:	68fb      	ldr	r3, [r7, #12]
 800a200:	681b      	ldr	r3, [r3, #0]
 800a202:	69da      	ldr	r2, [r3, #28]
 800a204:	68fb      	ldr	r3, [r7, #12]
 800a206:	681b      	ldr	r3, [r3, #0]
 800a208:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a20c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800a20e:	68fb      	ldr	r3, [r7, #12]
 800a210:	681b      	ldr	r3, [r3, #0]
 800a212:	69d9      	ldr	r1, [r3, #28]
 800a214:	68bb      	ldr	r3, [r7, #8]
 800a216:	691b      	ldr	r3, [r3, #16]
 800a218:	021a      	lsls	r2, r3, #8
 800a21a:	68fb      	ldr	r3, [r7, #12]
 800a21c:	681b      	ldr	r3, [r3, #0]
 800a21e:	430a      	orrs	r2, r1
 800a220:	61da      	str	r2, [r3, #28]
      break;
 800a222:	e041      	b.n	800a2a8 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800a224:	68fb      	ldr	r3, [r7, #12]
 800a226:	681b      	ldr	r3, [r3, #0]
 800a228:	68b9      	ldr	r1, [r7, #8]
 800a22a:	4618      	mov	r0, r3
 800a22c:	f000 fb58 	bl	800a8e0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800a230:	68fb      	ldr	r3, [r7, #12]
 800a232:	681b      	ldr	r3, [r3, #0]
 800a234:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a236:	68fb      	ldr	r3, [r7, #12]
 800a238:	681b      	ldr	r3, [r3, #0]
 800a23a:	f042 0208 	orr.w	r2, r2, #8
 800a23e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800a240:	68fb      	ldr	r3, [r7, #12]
 800a242:	681b      	ldr	r3, [r3, #0]
 800a244:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a246:	68fb      	ldr	r3, [r7, #12]
 800a248:	681b      	ldr	r3, [r3, #0]
 800a24a:	f022 0204 	bic.w	r2, r2, #4
 800a24e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800a250:	68fb      	ldr	r3, [r7, #12]
 800a252:	681b      	ldr	r3, [r3, #0]
 800a254:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800a256:	68bb      	ldr	r3, [r7, #8]
 800a258:	691a      	ldr	r2, [r3, #16]
 800a25a:	68fb      	ldr	r3, [r7, #12]
 800a25c:	681b      	ldr	r3, [r3, #0]
 800a25e:	430a      	orrs	r2, r1
 800a260:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800a262:	e021      	b.n	800a2a8 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800a264:	68fb      	ldr	r3, [r7, #12]
 800a266:	681b      	ldr	r3, [r3, #0]
 800a268:	68b9      	ldr	r1, [r7, #8]
 800a26a:	4618      	mov	r0, r3
 800a26c:	f000 fb90 	bl	800a990 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800a270:	68fb      	ldr	r3, [r7, #12]
 800a272:	681b      	ldr	r3, [r3, #0]
 800a274:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a276:	68fb      	ldr	r3, [r7, #12]
 800a278:	681b      	ldr	r3, [r3, #0]
 800a27a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a27e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800a280:	68fb      	ldr	r3, [r7, #12]
 800a282:	681b      	ldr	r3, [r3, #0]
 800a284:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a286:	68fb      	ldr	r3, [r7, #12]
 800a288:	681b      	ldr	r3, [r3, #0]
 800a28a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a28e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800a290:	68fb      	ldr	r3, [r7, #12]
 800a292:	681b      	ldr	r3, [r3, #0]
 800a294:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800a296:	68bb      	ldr	r3, [r7, #8]
 800a298:	691b      	ldr	r3, [r3, #16]
 800a29a:	021a      	lsls	r2, r3, #8
 800a29c:	68fb      	ldr	r3, [r7, #12]
 800a29e:	681b      	ldr	r3, [r3, #0]
 800a2a0:	430a      	orrs	r2, r1
 800a2a2:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800a2a4:	e000      	b.n	800a2a8 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 800a2a6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800a2a8:	68fb      	ldr	r3, [r7, #12]
 800a2aa:	2200      	movs	r2, #0
 800a2ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a2b0:	2300      	movs	r3, #0
}
 800a2b2:	4618      	mov	r0, r3
 800a2b4:	3710      	adds	r7, #16
 800a2b6:	46bd      	mov	sp, r7
 800a2b8:	bd80      	pop	{r7, pc}
 800a2ba:	bf00      	nop

0800a2bc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800a2bc:	b580      	push	{r7, lr}
 800a2be:	b084      	sub	sp, #16
 800a2c0:	af00      	add	r7, sp, #0
 800a2c2:	6078      	str	r0, [r7, #4]
 800a2c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a2cc:	2b01      	cmp	r3, #1
 800a2ce:	d101      	bne.n	800a2d4 <HAL_TIM_ConfigClockSource+0x18>
 800a2d0:	2302      	movs	r3, #2
 800a2d2:	e0a8      	b.n	800a426 <HAL_TIM_ConfigClockSource+0x16a>
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	2201      	movs	r2, #1
 800a2d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	2202      	movs	r2, #2
 800a2e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	681b      	ldr	r3, [r3, #0]
 800a2e8:	689b      	ldr	r3, [r3, #8]
 800a2ea:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800a2ec:	68fb      	ldr	r3, [r7, #12]
 800a2ee:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 800a2f2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800a2f6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a2f8:	68fb      	ldr	r3, [r7, #12]
 800a2fa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a2fe:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	681b      	ldr	r3, [r3, #0]
 800a304:	68fa      	ldr	r2, [r7, #12]
 800a306:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800a308:	683b      	ldr	r3, [r7, #0]
 800a30a:	681b      	ldr	r3, [r3, #0]
 800a30c:	2b40      	cmp	r3, #64	; 0x40
 800a30e:	d067      	beq.n	800a3e0 <HAL_TIM_ConfigClockSource+0x124>
 800a310:	2b40      	cmp	r3, #64	; 0x40
 800a312:	d80b      	bhi.n	800a32c <HAL_TIM_ConfigClockSource+0x70>
 800a314:	2b10      	cmp	r3, #16
 800a316:	d073      	beq.n	800a400 <HAL_TIM_ConfigClockSource+0x144>
 800a318:	2b10      	cmp	r3, #16
 800a31a:	d802      	bhi.n	800a322 <HAL_TIM_ConfigClockSource+0x66>
 800a31c:	2b00      	cmp	r3, #0
 800a31e:	d06f      	beq.n	800a400 <HAL_TIM_ConfigClockSource+0x144>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800a320:	e078      	b.n	800a414 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 800a322:	2b20      	cmp	r3, #32
 800a324:	d06c      	beq.n	800a400 <HAL_TIM_ConfigClockSource+0x144>
 800a326:	2b30      	cmp	r3, #48	; 0x30
 800a328:	d06a      	beq.n	800a400 <HAL_TIM_ConfigClockSource+0x144>
      break;
 800a32a:	e073      	b.n	800a414 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 800a32c:	2b70      	cmp	r3, #112	; 0x70
 800a32e:	d00d      	beq.n	800a34c <HAL_TIM_ConfigClockSource+0x90>
 800a330:	2b70      	cmp	r3, #112	; 0x70
 800a332:	d804      	bhi.n	800a33e <HAL_TIM_ConfigClockSource+0x82>
 800a334:	2b50      	cmp	r3, #80	; 0x50
 800a336:	d033      	beq.n	800a3a0 <HAL_TIM_ConfigClockSource+0xe4>
 800a338:	2b60      	cmp	r3, #96	; 0x60
 800a33a:	d041      	beq.n	800a3c0 <HAL_TIM_ConfigClockSource+0x104>
      break;
 800a33c:	e06a      	b.n	800a414 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 800a33e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a342:	d066      	beq.n	800a412 <HAL_TIM_ConfigClockSource+0x156>
 800a344:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a348:	d017      	beq.n	800a37a <HAL_TIM_ConfigClockSource+0xbe>
      break;
 800a34a:	e063      	b.n	800a414 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	6818      	ldr	r0, [r3, #0]
 800a350:	683b      	ldr	r3, [r7, #0]
 800a352:	6899      	ldr	r1, [r3, #8]
 800a354:	683b      	ldr	r3, [r7, #0]
 800a356:	685a      	ldr	r2, [r3, #4]
 800a358:	683b      	ldr	r3, [r7, #0]
 800a35a:	68db      	ldr	r3, [r3, #12]
 800a35c:	f000 fbee 	bl	800ab3c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	681b      	ldr	r3, [r3, #0]
 800a364:	689b      	ldr	r3, [r3, #8]
 800a366:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800a368:	68fb      	ldr	r3, [r7, #12]
 800a36a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800a36e:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	681b      	ldr	r3, [r3, #0]
 800a374:	68fa      	ldr	r2, [r7, #12]
 800a376:	609a      	str	r2, [r3, #8]
      break;
 800a378:	e04c      	b.n	800a414 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	6818      	ldr	r0, [r3, #0]
 800a37e:	683b      	ldr	r3, [r7, #0]
 800a380:	6899      	ldr	r1, [r3, #8]
 800a382:	683b      	ldr	r3, [r7, #0]
 800a384:	685a      	ldr	r2, [r3, #4]
 800a386:	683b      	ldr	r3, [r7, #0]
 800a388:	68db      	ldr	r3, [r3, #12]
 800a38a:	f000 fbd7 	bl	800ab3c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	681b      	ldr	r3, [r3, #0]
 800a392:	689a      	ldr	r2, [r3, #8]
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	681b      	ldr	r3, [r3, #0]
 800a398:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a39c:	609a      	str	r2, [r3, #8]
      break;
 800a39e:	e039      	b.n	800a414 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	6818      	ldr	r0, [r3, #0]
 800a3a4:	683b      	ldr	r3, [r7, #0]
 800a3a6:	6859      	ldr	r1, [r3, #4]
 800a3a8:	683b      	ldr	r3, [r7, #0]
 800a3aa:	68db      	ldr	r3, [r3, #12]
 800a3ac:	461a      	mov	r2, r3
 800a3ae:	f000 fb49 	bl	800aa44 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	681b      	ldr	r3, [r3, #0]
 800a3b6:	2150      	movs	r1, #80	; 0x50
 800a3b8:	4618      	mov	r0, r3
 800a3ba:	f000 fba2 	bl	800ab02 <TIM_ITRx_SetConfig>
      break;
 800a3be:	e029      	b.n	800a414 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	6818      	ldr	r0, [r3, #0]
 800a3c4:	683b      	ldr	r3, [r7, #0]
 800a3c6:	6859      	ldr	r1, [r3, #4]
 800a3c8:	683b      	ldr	r3, [r7, #0]
 800a3ca:	68db      	ldr	r3, [r3, #12]
 800a3cc:	461a      	mov	r2, r3
 800a3ce:	f000 fb68 	bl	800aaa2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	681b      	ldr	r3, [r3, #0]
 800a3d6:	2160      	movs	r1, #96	; 0x60
 800a3d8:	4618      	mov	r0, r3
 800a3da:	f000 fb92 	bl	800ab02 <TIM_ITRx_SetConfig>
      break;
 800a3de:	e019      	b.n	800a414 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	6818      	ldr	r0, [r3, #0]
 800a3e4:	683b      	ldr	r3, [r7, #0]
 800a3e6:	6859      	ldr	r1, [r3, #4]
 800a3e8:	683b      	ldr	r3, [r7, #0]
 800a3ea:	68db      	ldr	r3, [r3, #12]
 800a3ec:	461a      	mov	r2, r3
 800a3ee:	f000 fb29 	bl	800aa44 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	681b      	ldr	r3, [r3, #0]
 800a3f6:	2140      	movs	r1, #64	; 0x40
 800a3f8:	4618      	mov	r0, r3
 800a3fa:	f000 fb82 	bl	800ab02 <TIM_ITRx_SetConfig>
      break;
 800a3fe:	e009      	b.n	800a414 <HAL_TIM_ConfigClockSource+0x158>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	681a      	ldr	r2, [r3, #0]
 800a404:	683b      	ldr	r3, [r7, #0]
 800a406:	681b      	ldr	r3, [r3, #0]
 800a408:	4619      	mov	r1, r3
 800a40a:	4610      	mov	r0, r2
 800a40c:	f000 fb79 	bl	800ab02 <TIM_ITRx_SetConfig>
        break;
 800a410:	e000      	b.n	800a414 <HAL_TIM_ConfigClockSource+0x158>
      break;
 800a412:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	2201      	movs	r2, #1
 800a418:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	2200      	movs	r2, #0
 800a420:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a424:	2300      	movs	r3, #0
}
 800a426:	4618      	mov	r0, r3
 800a428:	3710      	adds	r7, #16
 800a42a:	46bd      	mov	sp, r7
 800a42c:	bd80      	pop	{r7, pc}

0800a42e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a42e:	b480      	push	{r7}
 800a430:	b083      	sub	sp, #12
 800a432:	af00      	add	r7, sp, #0
 800a434:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a436:	bf00      	nop
 800a438:	370c      	adds	r7, #12
 800a43a:	46bd      	mov	sp, r7
 800a43c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a440:	4770      	bx	lr

0800a442 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800a442:	b480      	push	{r7}
 800a444:	b083      	sub	sp, #12
 800a446:	af00      	add	r7, sp, #0
 800a448:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800a44a:	bf00      	nop
 800a44c:	370c      	adds	r7, #12
 800a44e:	46bd      	mov	sp, r7
 800a450:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a454:	4770      	bx	lr

0800a456 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a456:	b480      	push	{r7}
 800a458:	b083      	sub	sp, #12
 800a45a:	af00      	add	r7, sp, #0
 800a45c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a45e:	bf00      	nop
 800a460:	370c      	adds	r7, #12
 800a462:	46bd      	mov	sp, r7
 800a464:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a468:	4770      	bx	lr

0800a46a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a46a:	b480      	push	{r7}
 800a46c:	b083      	sub	sp, #12
 800a46e:	af00      	add	r7, sp, #0
 800a470:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a472:	bf00      	nop
 800a474:	370c      	adds	r7, #12
 800a476:	46bd      	mov	sp, r7
 800a478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a47c:	4770      	bx	lr
	...

0800a480 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800a480:	b480      	push	{r7}
 800a482:	b085      	sub	sp, #20
 800a484:	af00      	add	r7, sp, #0
 800a486:	6078      	str	r0, [r7, #4]
 800a488:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	681b      	ldr	r3, [r3, #0]
 800a48e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	4a2a      	ldr	r2, [pc, #168]	; (800a53c <TIM_Base_SetConfig+0xbc>)
 800a494:	4293      	cmp	r3, r2
 800a496:	d003      	beq.n	800a4a0 <TIM_Base_SetConfig+0x20>
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a49e:	d108      	bne.n	800a4b2 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a4a0:	68fb      	ldr	r3, [r7, #12]
 800a4a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a4a6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a4a8:	683b      	ldr	r3, [r7, #0]
 800a4aa:	685b      	ldr	r3, [r3, #4]
 800a4ac:	68fa      	ldr	r2, [r7, #12]
 800a4ae:	4313      	orrs	r3, r2
 800a4b0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	4a21      	ldr	r2, [pc, #132]	; (800a53c <TIM_Base_SetConfig+0xbc>)
 800a4b6:	4293      	cmp	r3, r2
 800a4b8:	d00b      	beq.n	800a4d2 <TIM_Base_SetConfig+0x52>
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a4c0:	d007      	beq.n	800a4d2 <TIM_Base_SetConfig+0x52>
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	4a1e      	ldr	r2, [pc, #120]	; (800a540 <TIM_Base_SetConfig+0xc0>)
 800a4c6:	4293      	cmp	r3, r2
 800a4c8:	d003      	beq.n	800a4d2 <TIM_Base_SetConfig+0x52>
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	4a1d      	ldr	r2, [pc, #116]	; (800a544 <TIM_Base_SetConfig+0xc4>)
 800a4ce:	4293      	cmp	r3, r2
 800a4d0:	d108      	bne.n	800a4e4 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a4d2:	68fb      	ldr	r3, [r7, #12]
 800a4d4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a4d8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a4da:	683b      	ldr	r3, [r7, #0]
 800a4dc:	68db      	ldr	r3, [r3, #12]
 800a4de:	68fa      	ldr	r2, [r7, #12]
 800a4e0:	4313      	orrs	r3, r2
 800a4e2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a4e4:	68fb      	ldr	r3, [r7, #12]
 800a4e6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800a4ea:	683b      	ldr	r3, [r7, #0]
 800a4ec:	695b      	ldr	r3, [r3, #20]
 800a4ee:	4313      	orrs	r3, r2
 800a4f0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	68fa      	ldr	r2, [r7, #12]
 800a4f6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a4f8:	683b      	ldr	r3, [r7, #0]
 800a4fa:	689a      	ldr	r2, [r3, #8]
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a500:	683b      	ldr	r3, [r7, #0]
 800a502:	681a      	ldr	r2, [r3, #0]
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	4a0c      	ldr	r2, [pc, #48]	; (800a53c <TIM_Base_SetConfig+0xbc>)
 800a50c:	4293      	cmp	r3, r2
 800a50e:	d007      	beq.n	800a520 <TIM_Base_SetConfig+0xa0>
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	4a0b      	ldr	r2, [pc, #44]	; (800a540 <TIM_Base_SetConfig+0xc0>)
 800a514:	4293      	cmp	r3, r2
 800a516:	d003      	beq.n	800a520 <TIM_Base_SetConfig+0xa0>
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	4a0a      	ldr	r2, [pc, #40]	; (800a544 <TIM_Base_SetConfig+0xc4>)
 800a51c:	4293      	cmp	r3, r2
 800a51e:	d103      	bne.n	800a528 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a520:	683b      	ldr	r3, [r7, #0]
 800a522:	691a      	ldr	r2, [r3, #16]
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	2201      	movs	r2, #1
 800a52c:	615a      	str	r2, [r3, #20]
}
 800a52e:	bf00      	nop
 800a530:	3714      	adds	r7, #20
 800a532:	46bd      	mov	sp, r7
 800a534:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a538:	4770      	bx	lr
 800a53a:	bf00      	nop
 800a53c:	40012c00 	.word	0x40012c00
 800a540:	40014400 	.word	0x40014400
 800a544:	40014800 	.word	0x40014800

0800a548 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a548:	b480      	push	{r7}
 800a54a:	b087      	sub	sp, #28
 800a54c:	af00      	add	r7, sp, #0
 800a54e:	6078      	str	r0, [r7, #4]
 800a550:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	6a1b      	ldr	r3, [r3, #32]
 800a556:	f023 0201 	bic.w	r2, r3, #1
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	6a1b      	ldr	r3, [r3, #32]
 800a562:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	685b      	ldr	r3, [r3, #4]
 800a568:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	699b      	ldr	r3, [r3, #24]
 800a56e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800a570:	68fb      	ldr	r3, [r7, #12]
 800a572:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a576:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a57a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800a57c:	68fb      	ldr	r3, [r7, #12]
 800a57e:	f023 0303 	bic.w	r3, r3, #3
 800a582:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a584:	683b      	ldr	r3, [r7, #0]
 800a586:	681b      	ldr	r3, [r3, #0]
 800a588:	68fa      	ldr	r2, [r7, #12]
 800a58a:	4313      	orrs	r3, r2
 800a58c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800a58e:	697b      	ldr	r3, [r7, #20]
 800a590:	f023 0302 	bic.w	r3, r3, #2
 800a594:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800a596:	683b      	ldr	r3, [r7, #0]
 800a598:	689b      	ldr	r3, [r3, #8]
 800a59a:	697a      	ldr	r2, [r7, #20]
 800a59c:	4313      	orrs	r3, r2
 800a59e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	4a24      	ldr	r2, [pc, #144]	; (800a634 <TIM_OC1_SetConfig+0xec>)
 800a5a4:	4293      	cmp	r3, r2
 800a5a6:	d007      	beq.n	800a5b8 <TIM_OC1_SetConfig+0x70>
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	4a23      	ldr	r2, [pc, #140]	; (800a638 <TIM_OC1_SetConfig+0xf0>)
 800a5ac:	4293      	cmp	r3, r2
 800a5ae:	d003      	beq.n	800a5b8 <TIM_OC1_SetConfig+0x70>
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	4a22      	ldr	r2, [pc, #136]	; (800a63c <TIM_OC1_SetConfig+0xf4>)
 800a5b4:	4293      	cmp	r3, r2
 800a5b6:	d10c      	bne.n	800a5d2 <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800a5b8:	697b      	ldr	r3, [r7, #20]
 800a5ba:	f023 0308 	bic.w	r3, r3, #8
 800a5be:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800a5c0:	683b      	ldr	r3, [r7, #0]
 800a5c2:	68db      	ldr	r3, [r3, #12]
 800a5c4:	697a      	ldr	r2, [r7, #20]
 800a5c6:	4313      	orrs	r3, r2
 800a5c8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800a5ca:	697b      	ldr	r3, [r7, #20]
 800a5cc:	f023 0304 	bic.w	r3, r3, #4
 800a5d0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	4a17      	ldr	r2, [pc, #92]	; (800a634 <TIM_OC1_SetConfig+0xec>)
 800a5d6:	4293      	cmp	r3, r2
 800a5d8:	d007      	beq.n	800a5ea <TIM_OC1_SetConfig+0xa2>
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	4a17      	ldr	r2, [pc, #92]	; (800a63c <TIM_OC1_SetConfig+0xf4>)
 800a5de:	4293      	cmp	r3, r2
 800a5e0:	d003      	beq.n	800a5ea <TIM_OC1_SetConfig+0xa2>
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	4a14      	ldr	r2, [pc, #80]	; (800a638 <TIM_OC1_SetConfig+0xf0>)
 800a5e6:	4293      	cmp	r3, r2
 800a5e8:	d111      	bne.n	800a60e <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800a5ea:	693b      	ldr	r3, [r7, #16]
 800a5ec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a5f0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800a5f2:	693b      	ldr	r3, [r7, #16]
 800a5f4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a5f8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800a5fa:	683b      	ldr	r3, [r7, #0]
 800a5fc:	695b      	ldr	r3, [r3, #20]
 800a5fe:	693a      	ldr	r2, [r7, #16]
 800a600:	4313      	orrs	r3, r2
 800a602:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800a604:	683b      	ldr	r3, [r7, #0]
 800a606:	699b      	ldr	r3, [r3, #24]
 800a608:	693a      	ldr	r2, [r7, #16]
 800a60a:	4313      	orrs	r3, r2
 800a60c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a60e:	687b      	ldr	r3, [r7, #4]
 800a610:	693a      	ldr	r2, [r7, #16]
 800a612:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	68fa      	ldr	r2, [r7, #12]
 800a618:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800a61a:	683b      	ldr	r3, [r7, #0]
 800a61c:	685a      	ldr	r2, [r3, #4]
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	697a      	ldr	r2, [r7, #20]
 800a626:	621a      	str	r2, [r3, #32]
}
 800a628:	bf00      	nop
 800a62a:	371c      	adds	r7, #28
 800a62c:	46bd      	mov	sp, r7
 800a62e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a632:	4770      	bx	lr
 800a634:	40012c00 	.word	0x40012c00
 800a638:	40014800 	.word	0x40014800
 800a63c:	40014400 	.word	0x40014400

0800a640 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a640:	b480      	push	{r7}
 800a642:	b087      	sub	sp, #28
 800a644:	af00      	add	r7, sp, #0
 800a646:	6078      	str	r0, [r7, #4]
 800a648:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	6a1b      	ldr	r3, [r3, #32]
 800a64e:	f023 0210 	bic.w	r2, r3, #16
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	6a1b      	ldr	r3, [r3, #32]
 800a65a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	685b      	ldr	r3, [r3, #4]
 800a660:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	699b      	ldr	r3, [r3, #24]
 800a666:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800a668:	68fb      	ldr	r3, [r7, #12]
 800a66a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a66e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a672:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800a674:	68fb      	ldr	r3, [r7, #12]
 800a676:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a67a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a67c:	683b      	ldr	r3, [r7, #0]
 800a67e:	681b      	ldr	r3, [r3, #0]
 800a680:	021b      	lsls	r3, r3, #8
 800a682:	68fa      	ldr	r2, [r7, #12]
 800a684:	4313      	orrs	r3, r2
 800a686:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800a688:	697b      	ldr	r3, [r7, #20]
 800a68a:	f023 0320 	bic.w	r3, r3, #32
 800a68e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800a690:	683b      	ldr	r3, [r7, #0]
 800a692:	689b      	ldr	r3, [r3, #8]
 800a694:	011b      	lsls	r3, r3, #4
 800a696:	697a      	ldr	r2, [r7, #20]
 800a698:	4313      	orrs	r3, r2
 800a69a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	4a22      	ldr	r2, [pc, #136]	; (800a728 <TIM_OC2_SetConfig+0xe8>)
 800a6a0:	4293      	cmp	r3, r2
 800a6a2:	d10d      	bne.n	800a6c0 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800a6a4:	697b      	ldr	r3, [r7, #20]
 800a6a6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a6aa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800a6ac:	683b      	ldr	r3, [r7, #0]
 800a6ae:	68db      	ldr	r3, [r3, #12]
 800a6b0:	011b      	lsls	r3, r3, #4
 800a6b2:	697a      	ldr	r2, [r7, #20]
 800a6b4:	4313      	orrs	r3, r2
 800a6b6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800a6b8:	697b      	ldr	r3, [r7, #20]
 800a6ba:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a6be:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	4a19      	ldr	r2, [pc, #100]	; (800a728 <TIM_OC2_SetConfig+0xe8>)
 800a6c4:	4293      	cmp	r3, r2
 800a6c6:	d007      	beq.n	800a6d8 <TIM_OC2_SetConfig+0x98>
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	4a18      	ldr	r2, [pc, #96]	; (800a72c <TIM_OC2_SetConfig+0xec>)
 800a6cc:	4293      	cmp	r3, r2
 800a6ce:	d003      	beq.n	800a6d8 <TIM_OC2_SetConfig+0x98>
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	4a17      	ldr	r2, [pc, #92]	; (800a730 <TIM_OC2_SetConfig+0xf0>)
 800a6d4:	4293      	cmp	r3, r2
 800a6d6:	d113      	bne.n	800a700 <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800a6d8:	693b      	ldr	r3, [r7, #16]
 800a6da:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a6de:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800a6e0:	693b      	ldr	r3, [r7, #16]
 800a6e2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a6e6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800a6e8:	683b      	ldr	r3, [r7, #0]
 800a6ea:	695b      	ldr	r3, [r3, #20]
 800a6ec:	009b      	lsls	r3, r3, #2
 800a6ee:	693a      	ldr	r2, [r7, #16]
 800a6f0:	4313      	orrs	r3, r2
 800a6f2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800a6f4:	683b      	ldr	r3, [r7, #0]
 800a6f6:	699b      	ldr	r3, [r3, #24]
 800a6f8:	009b      	lsls	r3, r3, #2
 800a6fa:	693a      	ldr	r2, [r7, #16]
 800a6fc:	4313      	orrs	r3, r2
 800a6fe:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	693a      	ldr	r2, [r7, #16]
 800a704:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	68fa      	ldr	r2, [r7, #12]
 800a70a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800a70c:	683b      	ldr	r3, [r7, #0]
 800a70e:	685a      	ldr	r2, [r3, #4]
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	697a      	ldr	r2, [r7, #20]
 800a718:	621a      	str	r2, [r3, #32]
}
 800a71a:	bf00      	nop
 800a71c:	371c      	adds	r7, #28
 800a71e:	46bd      	mov	sp, r7
 800a720:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a724:	4770      	bx	lr
 800a726:	bf00      	nop
 800a728:	40012c00 	.word	0x40012c00
 800a72c:	40014400 	.word	0x40014400
 800a730:	40014800 	.word	0x40014800

0800a734 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a734:	b480      	push	{r7}
 800a736:	b087      	sub	sp, #28
 800a738:	af00      	add	r7, sp, #0
 800a73a:	6078      	str	r0, [r7, #4]
 800a73c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	6a1b      	ldr	r3, [r3, #32]
 800a742:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	6a1b      	ldr	r3, [r3, #32]
 800a74e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	685b      	ldr	r3, [r3, #4]
 800a754:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	69db      	ldr	r3, [r3, #28]
 800a75a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800a75c:	68fb      	ldr	r3, [r7, #12]
 800a75e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a762:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a766:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800a768:	68fb      	ldr	r3, [r7, #12]
 800a76a:	f023 0303 	bic.w	r3, r3, #3
 800a76e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a770:	683b      	ldr	r3, [r7, #0]
 800a772:	681b      	ldr	r3, [r3, #0]
 800a774:	68fa      	ldr	r2, [r7, #12]
 800a776:	4313      	orrs	r3, r2
 800a778:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800a77a:	697b      	ldr	r3, [r7, #20]
 800a77c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a780:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800a782:	683b      	ldr	r3, [r7, #0]
 800a784:	689b      	ldr	r3, [r3, #8]
 800a786:	021b      	lsls	r3, r3, #8
 800a788:	697a      	ldr	r2, [r7, #20]
 800a78a:	4313      	orrs	r3, r2
 800a78c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	4a21      	ldr	r2, [pc, #132]	; (800a818 <TIM_OC3_SetConfig+0xe4>)
 800a792:	4293      	cmp	r3, r2
 800a794:	d10d      	bne.n	800a7b2 <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800a796:	697b      	ldr	r3, [r7, #20]
 800a798:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a79c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800a79e:	683b      	ldr	r3, [r7, #0]
 800a7a0:	68db      	ldr	r3, [r3, #12]
 800a7a2:	021b      	lsls	r3, r3, #8
 800a7a4:	697a      	ldr	r2, [r7, #20]
 800a7a6:	4313      	orrs	r3, r2
 800a7a8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800a7aa:	697b      	ldr	r3, [r7, #20]
 800a7ac:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a7b0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	4a18      	ldr	r2, [pc, #96]	; (800a818 <TIM_OC3_SetConfig+0xe4>)
 800a7b6:	4293      	cmp	r3, r2
 800a7b8:	d007      	beq.n	800a7ca <TIM_OC3_SetConfig+0x96>
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	4a17      	ldr	r2, [pc, #92]	; (800a81c <TIM_OC3_SetConfig+0xe8>)
 800a7be:	4293      	cmp	r3, r2
 800a7c0:	d003      	beq.n	800a7ca <TIM_OC3_SetConfig+0x96>
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	4a16      	ldr	r2, [pc, #88]	; (800a820 <TIM_OC3_SetConfig+0xec>)
 800a7c6:	4293      	cmp	r3, r2
 800a7c8:	d113      	bne.n	800a7f2 <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800a7ca:	693b      	ldr	r3, [r7, #16]
 800a7cc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a7d0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800a7d2:	693b      	ldr	r3, [r7, #16]
 800a7d4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a7d8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800a7da:	683b      	ldr	r3, [r7, #0]
 800a7dc:	695b      	ldr	r3, [r3, #20]
 800a7de:	011b      	lsls	r3, r3, #4
 800a7e0:	693a      	ldr	r2, [r7, #16]
 800a7e2:	4313      	orrs	r3, r2
 800a7e4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800a7e6:	683b      	ldr	r3, [r7, #0]
 800a7e8:	699b      	ldr	r3, [r3, #24]
 800a7ea:	011b      	lsls	r3, r3, #4
 800a7ec:	693a      	ldr	r2, [r7, #16]
 800a7ee:	4313      	orrs	r3, r2
 800a7f0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	693a      	ldr	r2, [r7, #16]
 800a7f6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	68fa      	ldr	r2, [r7, #12]
 800a7fc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800a7fe:	683b      	ldr	r3, [r7, #0]
 800a800:	685a      	ldr	r2, [r3, #4]
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	697a      	ldr	r2, [r7, #20]
 800a80a:	621a      	str	r2, [r3, #32]
}
 800a80c:	bf00      	nop
 800a80e:	371c      	adds	r7, #28
 800a810:	46bd      	mov	sp, r7
 800a812:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a816:	4770      	bx	lr
 800a818:	40012c00 	.word	0x40012c00
 800a81c:	40014400 	.word	0x40014400
 800a820:	40014800 	.word	0x40014800

0800a824 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a824:	b480      	push	{r7}
 800a826:	b087      	sub	sp, #28
 800a828:	af00      	add	r7, sp, #0
 800a82a:	6078      	str	r0, [r7, #4]
 800a82c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	6a1b      	ldr	r3, [r3, #32]
 800a832:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	6a1b      	ldr	r3, [r3, #32]
 800a83e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	685b      	ldr	r3, [r3, #4]
 800a844:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	69db      	ldr	r3, [r3, #28]
 800a84a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800a84c:	68fb      	ldr	r3, [r7, #12]
 800a84e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a852:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a856:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800a858:	68fb      	ldr	r3, [r7, #12]
 800a85a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a85e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a860:	683b      	ldr	r3, [r7, #0]
 800a862:	681b      	ldr	r3, [r3, #0]
 800a864:	021b      	lsls	r3, r3, #8
 800a866:	68fa      	ldr	r2, [r7, #12]
 800a868:	4313      	orrs	r3, r2
 800a86a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800a86c:	693b      	ldr	r3, [r7, #16]
 800a86e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a872:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800a874:	683b      	ldr	r3, [r7, #0]
 800a876:	689b      	ldr	r3, [r3, #8]
 800a878:	031b      	lsls	r3, r3, #12
 800a87a:	693a      	ldr	r2, [r7, #16]
 800a87c:	4313      	orrs	r3, r2
 800a87e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	4a14      	ldr	r2, [pc, #80]	; (800a8d4 <TIM_OC4_SetConfig+0xb0>)
 800a884:	4293      	cmp	r3, r2
 800a886:	d007      	beq.n	800a898 <TIM_OC4_SetConfig+0x74>
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	4a13      	ldr	r2, [pc, #76]	; (800a8d8 <TIM_OC4_SetConfig+0xb4>)
 800a88c:	4293      	cmp	r3, r2
 800a88e:	d003      	beq.n	800a898 <TIM_OC4_SetConfig+0x74>
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	4a12      	ldr	r2, [pc, #72]	; (800a8dc <TIM_OC4_SetConfig+0xb8>)
 800a894:	4293      	cmp	r3, r2
 800a896:	d109      	bne.n	800a8ac <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800a898:	697b      	ldr	r3, [r7, #20]
 800a89a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a89e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800a8a0:	683b      	ldr	r3, [r7, #0]
 800a8a2:	695b      	ldr	r3, [r3, #20]
 800a8a4:	019b      	lsls	r3, r3, #6
 800a8a6:	697a      	ldr	r2, [r7, #20]
 800a8a8:	4313      	orrs	r3, r2
 800a8aa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	697a      	ldr	r2, [r7, #20]
 800a8b0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	68fa      	ldr	r2, [r7, #12]
 800a8b6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800a8b8:	683b      	ldr	r3, [r7, #0]
 800a8ba:	685a      	ldr	r2, [r3, #4]
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	693a      	ldr	r2, [r7, #16]
 800a8c4:	621a      	str	r2, [r3, #32]
}
 800a8c6:	bf00      	nop
 800a8c8:	371c      	adds	r7, #28
 800a8ca:	46bd      	mov	sp, r7
 800a8cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8d0:	4770      	bx	lr
 800a8d2:	bf00      	nop
 800a8d4:	40012c00 	.word	0x40012c00
 800a8d8:	40014400 	.word	0x40014400
 800a8dc:	40014800 	.word	0x40014800

0800a8e0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800a8e0:	b480      	push	{r7}
 800a8e2:	b087      	sub	sp, #28
 800a8e4:	af00      	add	r7, sp, #0
 800a8e6:	6078      	str	r0, [r7, #4]
 800a8e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	6a1b      	ldr	r3, [r3, #32]
 800a8ee:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	6a1b      	ldr	r3, [r3, #32]
 800a8fa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	685b      	ldr	r3, [r3, #4]
 800a900:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a906:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800a908:	68fb      	ldr	r3, [r7, #12]
 800a90a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a90e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a912:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a914:	683b      	ldr	r3, [r7, #0]
 800a916:	681b      	ldr	r3, [r3, #0]
 800a918:	68fa      	ldr	r2, [r7, #12]
 800a91a:	4313      	orrs	r3, r2
 800a91c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800a91e:	693b      	ldr	r3, [r7, #16]
 800a920:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800a924:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800a926:	683b      	ldr	r3, [r7, #0]
 800a928:	689b      	ldr	r3, [r3, #8]
 800a92a:	041b      	lsls	r3, r3, #16
 800a92c:	693a      	ldr	r2, [r7, #16]
 800a92e:	4313      	orrs	r3, r2
 800a930:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	4a13      	ldr	r2, [pc, #76]	; (800a984 <TIM_OC5_SetConfig+0xa4>)
 800a936:	4293      	cmp	r3, r2
 800a938:	d007      	beq.n	800a94a <TIM_OC5_SetConfig+0x6a>
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	4a12      	ldr	r2, [pc, #72]	; (800a988 <TIM_OC5_SetConfig+0xa8>)
 800a93e:	4293      	cmp	r3, r2
 800a940:	d003      	beq.n	800a94a <TIM_OC5_SetConfig+0x6a>
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	4a11      	ldr	r2, [pc, #68]	; (800a98c <TIM_OC5_SetConfig+0xac>)
 800a946:	4293      	cmp	r3, r2
 800a948:	d109      	bne.n	800a95e <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800a94a:	697b      	ldr	r3, [r7, #20]
 800a94c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a950:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800a952:	683b      	ldr	r3, [r7, #0]
 800a954:	695b      	ldr	r3, [r3, #20]
 800a956:	021b      	lsls	r3, r3, #8
 800a958:	697a      	ldr	r2, [r7, #20]
 800a95a:	4313      	orrs	r3, r2
 800a95c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	697a      	ldr	r2, [r7, #20]
 800a962:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	68fa      	ldr	r2, [r7, #12]
 800a968:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800a96a:	683b      	ldr	r3, [r7, #0]
 800a96c:	685a      	ldr	r2, [r3, #4]
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	693a      	ldr	r2, [r7, #16]
 800a976:	621a      	str	r2, [r3, #32]
}
 800a978:	bf00      	nop
 800a97a:	371c      	adds	r7, #28
 800a97c:	46bd      	mov	sp, r7
 800a97e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a982:	4770      	bx	lr
 800a984:	40012c00 	.word	0x40012c00
 800a988:	40014400 	.word	0x40014400
 800a98c:	40014800 	.word	0x40014800

0800a990 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800a990:	b480      	push	{r7}
 800a992:	b087      	sub	sp, #28
 800a994:	af00      	add	r7, sp, #0
 800a996:	6078      	str	r0, [r7, #4]
 800a998:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	6a1b      	ldr	r3, [r3, #32]
 800a99e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	6a1b      	ldr	r3, [r3, #32]
 800a9aa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	685b      	ldr	r3, [r3, #4]
 800a9b0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a9b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800a9b8:	68fb      	ldr	r3, [r7, #12]
 800a9ba:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a9be:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a9c2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a9c4:	683b      	ldr	r3, [r7, #0]
 800a9c6:	681b      	ldr	r3, [r3, #0]
 800a9c8:	021b      	lsls	r3, r3, #8
 800a9ca:	68fa      	ldr	r2, [r7, #12]
 800a9cc:	4313      	orrs	r3, r2
 800a9ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800a9d0:	693b      	ldr	r3, [r7, #16]
 800a9d2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800a9d6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800a9d8:	683b      	ldr	r3, [r7, #0]
 800a9da:	689b      	ldr	r3, [r3, #8]
 800a9dc:	051b      	lsls	r3, r3, #20
 800a9de:	693a      	ldr	r2, [r7, #16]
 800a9e0:	4313      	orrs	r3, r2
 800a9e2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	4a14      	ldr	r2, [pc, #80]	; (800aa38 <TIM_OC6_SetConfig+0xa8>)
 800a9e8:	4293      	cmp	r3, r2
 800a9ea:	d007      	beq.n	800a9fc <TIM_OC6_SetConfig+0x6c>
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	4a13      	ldr	r2, [pc, #76]	; (800aa3c <TIM_OC6_SetConfig+0xac>)
 800a9f0:	4293      	cmp	r3, r2
 800a9f2:	d003      	beq.n	800a9fc <TIM_OC6_SetConfig+0x6c>
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	4a12      	ldr	r2, [pc, #72]	; (800aa40 <TIM_OC6_SetConfig+0xb0>)
 800a9f8:	4293      	cmp	r3, r2
 800a9fa:	d109      	bne.n	800aa10 <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800a9fc:	697b      	ldr	r3, [r7, #20]
 800a9fe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800aa02:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800aa04:	683b      	ldr	r3, [r7, #0]
 800aa06:	695b      	ldr	r3, [r3, #20]
 800aa08:	029b      	lsls	r3, r3, #10
 800aa0a:	697a      	ldr	r2, [r7, #20]
 800aa0c:	4313      	orrs	r3, r2
 800aa0e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	697a      	ldr	r2, [r7, #20]
 800aa14:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	68fa      	ldr	r2, [r7, #12]
 800aa1a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800aa1c:	683b      	ldr	r3, [r7, #0]
 800aa1e:	685a      	ldr	r2, [r3, #4]
 800aa20:	687b      	ldr	r3, [r7, #4]
 800aa22:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	693a      	ldr	r2, [r7, #16]
 800aa28:	621a      	str	r2, [r3, #32]
}
 800aa2a:	bf00      	nop
 800aa2c:	371c      	adds	r7, #28
 800aa2e:	46bd      	mov	sp, r7
 800aa30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa34:	4770      	bx	lr
 800aa36:	bf00      	nop
 800aa38:	40012c00 	.word	0x40012c00
 800aa3c:	40014400 	.word	0x40014400
 800aa40:	40014800 	.word	0x40014800

0800aa44 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800aa44:	b480      	push	{r7}
 800aa46:	b087      	sub	sp, #28
 800aa48:	af00      	add	r7, sp, #0
 800aa4a:	60f8      	str	r0, [r7, #12]
 800aa4c:	60b9      	str	r1, [r7, #8]
 800aa4e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800aa50:	68fb      	ldr	r3, [r7, #12]
 800aa52:	6a1b      	ldr	r3, [r3, #32]
 800aa54:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800aa56:	68fb      	ldr	r3, [r7, #12]
 800aa58:	6a1b      	ldr	r3, [r3, #32]
 800aa5a:	f023 0201 	bic.w	r2, r3, #1
 800aa5e:	68fb      	ldr	r3, [r7, #12]
 800aa60:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800aa62:	68fb      	ldr	r3, [r7, #12]
 800aa64:	699b      	ldr	r3, [r3, #24]
 800aa66:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800aa68:	693b      	ldr	r3, [r7, #16]
 800aa6a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800aa6e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	011b      	lsls	r3, r3, #4
 800aa74:	693a      	ldr	r2, [r7, #16]
 800aa76:	4313      	orrs	r3, r2
 800aa78:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800aa7a:	697b      	ldr	r3, [r7, #20]
 800aa7c:	f023 030a 	bic.w	r3, r3, #10
 800aa80:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800aa82:	697a      	ldr	r2, [r7, #20]
 800aa84:	68bb      	ldr	r3, [r7, #8]
 800aa86:	4313      	orrs	r3, r2
 800aa88:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800aa8a:	68fb      	ldr	r3, [r7, #12]
 800aa8c:	693a      	ldr	r2, [r7, #16]
 800aa8e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800aa90:	68fb      	ldr	r3, [r7, #12]
 800aa92:	697a      	ldr	r2, [r7, #20]
 800aa94:	621a      	str	r2, [r3, #32]
}
 800aa96:	bf00      	nop
 800aa98:	371c      	adds	r7, #28
 800aa9a:	46bd      	mov	sp, r7
 800aa9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaa0:	4770      	bx	lr

0800aaa2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800aaa2:	b480      	push	{r7}
 800aaa4:	b087      	sub	sp, #28
 800aaa6:	af00      	add	r7, sp, #0
 800aaa8:	60f8      	str	r0, [r7, #12]
 800aaaa:	60b9      	str	r1, [r7, #8]
 800aaac:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800aaae:	68fb      	ldr	r3, [r7, #12]
 800aab0:	6a1b      	ldr	r3, [r3, #32]
 800aab2:	f023 0210 	bic.w	r2, r3, #16
 800aab6:	68fb      	ldr	r3, [r7, #12]
 800aab8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800aaba:	68fb      	ldr	r3, [r7, #12]
 800aabc:	699b      	ldr	r3, [r3, #24]
 800aabe:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800aac0:	68fb      	ldr	r3, [r7, #12]
 800aac2:	6a1b      	ldr	r3, [r3, #32]
 800aac4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800aac6:	697b      	ldr	r3, [r7, #20]
 800aac8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800aacc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	031b      	lsls	r3, r3, #12
 800aad2:	697a      	ldr	r2, [r7, #20]
 800aad4:	4313      	orrs	r3, r2
 800aad6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800aad8:	693b      	ldr	r3, [r7, #16]
 800aada:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800aade:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800aae0:	68bb      	ldr	r3, [r7, #8]
 800aae2:	011b      	lsls	r3, r3, #4
 800aae4:	693a      	ldr	r2, [r7, #16]
 800aae6:	4313      	orrs	r3, r2
 800aae8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800aaea:	68fb      	ldr	r3, [r7, #12]
 800aaec:	697a      	ldr	r2, [r7, #20]
 800aaee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800aaf0:	68fb      	ldr	r3, [r7, #12]
 800aaf2:	693a      	ldr	r2, [r7, #16]
 800aaf4:	621a      	str	r2, [r3, #32]
}
 800aaf6:	bf00      	nop
 800aaf8:	371c      	adds	r7, #28
 800aafa:	46bd      	mov	sp, r7
 800aafc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab00:	4770      	bx	lr

0800ab02 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800ab02:	b480      	push	{r7}
 800ab04:	b085      	sub	sp, #20
 800ab06:	af00      	add	r7, sp, #0
 800ab08:	6078      	str	r0, [r7, #4]
 800ab0a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	689b      	ldr	r3, [r3, #8]
 800ab10:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800ab12:	68fb      	ldr	r3, [r7, #12]
 800ab14:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800ab18:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ab1c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800ab1e:	683a      	ldr	r2, [r7, #0]
 800ab20:	68fb      	ldr	r3, [r7, #12]
 800ab22:	4313      	orrs	r3, r2
 800ab24:	f043 0307 	orr.w	r3, r3, #7
 800ab28:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	68fa      	ldr	r2, [r7, #12]
 800ab2e:	609a      	str	r2, [r3, #8]
}
 800ab30:	bf00      	nop
 800ab32:	3714      	adds	r7, #20
 800ab34:	46bd      	mov	sp, r7
 800ab36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab3a:	4770      	bx	lr

0800ab3c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800ab3c:	b480      	push	{r7}
 800ab3e:	b087      	sub	sp, #28
 800ab40:	af00      	add	r7, sp, #0
 800ab42:	60f8      	str	r0, [r7, #12]
 800ab44:	60b9      	str	r1, [r7, #8]
 800ab46:	607a      	str	r2, [r7, #4]
 800ab48:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800ab4a:	68fb      	ldr	r3, [r7, #12]
 800ab4c:	689b      	ldr	r3, [r3, #8]
 800ab4e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800ab50:	697b      	ldr	r3, [r7, #20]
 800ab52:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800ab56:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800ab58:	683b      	ldr	r3, [r7, #0]
 800ab5a:	021a      	lsls	r2, r3, #8
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	431a      	orrs	r2, r3
 800ab60:	68bb      	ldr	r3, [r7, #8]
 800ab62:	4313      	orrs	r3, r2
 800ab64:	697a      	ldr	r2, [r7, #20]
 800ab66:	4313      	orrs	r3, r2
 800ab68:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ab6a:	68fb      	ldr	r3, [r7, #12]
 800ab6c:	697a      	ldr	r2, [r7, #20]
 800ab6e:	609a      	str	r2, [r3, #8]
}
 800ab70:	bf00      	nop
 800ab72:	371c      	adds	r7, #28
 800ab74:	46bd      	mov	sp, r7
 800ab76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab7a:	4770      	bx	lr

0800ab7c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800ab7c:	b480      	push	{r7}
 800ab7e:	b087      	sub	sp, #28
 800ab80:	af00      	add	r7, sp, #0
 800ab82:	60f8      	str	r0, [r7, #12]
 800ab84:	60b9      	str	r1, [r7, #8]
 800ab86:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800ab88:	68bb      	ldr	r3, [r7, #8]
 800ab8a:	f003 031f 	and.w	r3, r3, #31
 800ab8e:	2201      	movs	r2, #1
 800ab90:	fa02 f303 	lsl.w	r3, r2, r3
 800ab94:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800ab96:	68fb      	ldr	r3, [r7, #12]
 800ab98:	6a1a      	ldr	r2, [r3, #32]
 800ab9a:	697b      	ldr	r3, [r7, #20]
 800ab9c:	43db      	mvns	r3, r3
 800ab9e:	401a      	ands	r2, r3
 800aba0:	68fb      	ldr	r3, [r7, #12]
 800aba2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800aba4:	68fb      	ldr	r3, [r7, #12]
 800aba6:	6a1a      	ldr	r2, [r3, #32]
 800aba8:	68bb      	ldr	r3, [r7, #8]
 800abaa:	f003 031f 	and.w	r3, r3, #31
 800abae:	6879      	ldr	r1, [r7, #4]
 800abb0:	fa01 f303 	lsl.w	r3, r1, r3
 800abb4:	431a      	orrs	r2, r3
 800abb6:	68fb      	ldr	r3, [r7, #12]
 800abb8:	621a      	str	r2, [r3, #32]
}
 800abba:	bf00      	nop
 800abbc:	371c      	adds	r7, #28
 800abbe:	46bd      	mov	sp, r7
 800abc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abc4:	4770      	bx	lr
	...

0800abc8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800abc8:	b480      	push	{r7}
 800abca:	b085      	sub	sp, #20
 800abcc:	af00      	add	r7, sp, #0
 800abce:	6078      	str	r0, [r7, #4]
 800abd0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800abd8:	2b01      	cmp	r3, #1
 800abda:	d101      	bne.n	800abe0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800abdc:	2302      	movs	r3, #2
 800abde:	e04a      	b.n	800ac76 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	2201      	movs	r2, #1
 800abe4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	2202      	movs	r2, #2
 800abec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	681b      	ldr	r3, [r3, #0]
 800abf4:	685b      	ldr	r3, [r3, #4]
 800abf6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	681b      	ldr	r3, [r3, #0]
 800abfc:	689b      	ldr	r3, [r3, #8]
 800abfe:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	681b      	ldr	r3, [r3, #0]
 800ac04:	4a1f      	ldr	r2, [pc, #124]	; (800ac84 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 800ac06:	4293      	cmp	r3, r2
 800ac08:	d108      	bne.n	800ac1c <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800ac0a:	68fb      	ldr	r3, [r7, #12]
 800ac0c:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800ac10:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800ac12:	683b      	ldr	r3, [r7, #0]
 800ac14:	685b      	ldr	r3, [r3, #4]
 800ac16:	68fa      	ldr	r2, [r7, #12]
 800ac18:	4313      	orrs	r3, r2
 800ac1a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800ac1c:	68fb      	ldr	r3, [r7, #12]
 800ac1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ac22:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800ac24:	683b      	ldr	r3, [r7, #0]
 800ac26:	681b      	ldr	r3, [r3, #0]
 800ac28:	68fa      	ldr	r2, [r7, #12]
 800ac2a:	4313      	orrs	r3, r2
 800ac2c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800ac2e:	687b      	ldr	r3, [r7, #4]
 800ac30:	681b      	ldr	r3, [r3, #0]
 800ac32:	68fa      	ldr	r2, [r7, #12]
 800ac34:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ac36:	687b      	ldr	r3, [r7, #4]
 800ac38:	681b      	ldr	r3, [r3, #0]
 800ac3a:	4a12      	ldr	r2, [pc, #72]	; (800ac84 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 800ac3c:	4293      	cmp	r3, r2
 800ac3e:	d004      	beq.n	800ac4a <HAL_TIMEx_MasterConfigSynchronization+0x82>
 800ac40:	687b      	ldr	r3, [r7, #4]
 800ac42:	681b      	ldr	r3, [r3, #0]
 800ac44:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ac48:	d10c      	bne.n	800ac64 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800ac4a:	68bb      	ldr	r3, [r7, #8]
 800ac4c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ac50:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800ac52:	683b      	ldr	r3, [r7, #0]
 800ac54:	689b      	ldr	r3, [r3, #8]
 800ac56:	68ba      	ldr	r2, [r7, #8]
 800ac58:	4313      	orrs	r3, r2
 800ac5a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	681b      	ldr	r3, [r3, #0]
 800ac60:	68ba      	ldr	r2, [r7, #8]
 800ac62:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	2201      	movs	r2, #1
 800ac68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	2200      	movs	r2, #0
 800ac70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800ac74:	2300      	movs	r3, #0
}
 800ac76:	4618      	mov	r0, r3
 800ac78:	3714      	adds	r7, #20
 800ac7a:	46bd      	mov	sp, r7
 800ac7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac80:	4770      	bx	lr
 800ac82:	bf00      	nop
 800ac84:	40012c00 	.word	0x40012c00

0800ac88 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800ac88:	b480      	push	{r7}
 800ac8a:	b085      	sub	sp, #20
 800ac8c:	af00      	add	r7, sp, #0
 800ac8e:	6078      	str	r0, [r7, #4]
 800ac90:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800ac92:	2300      	movs	r3, #0
 800ac94:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800ac96:	687b      	ldr	r3, [r7, #4]
 800ac98:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ac9c:	2b01      	cmp	r3, #1
 800ac9e:	d101      	bne.n	800aca4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800aca0:	2302      	movs	r3, #2
 800aca2:	e078      	b.n	800ad96 <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 800aca4:	687b      	ldr	r3, [r7, #4]
 800aca6:	2201      	movs	r2, #1
 800aca8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800acac:	68fb      	ldr	r3, [r7, #12]
 800acae:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800acb2:	683b      	ldr	r3, [r7, #0]
 800acb4:	68db      	ldr	r3, [r3, #12]
 800acb6:	4313      	orrs	r3, r2
 800acb8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800acba:	68fb      	ldr	r3, [r7, #12]
 800acbc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800acc0:	683b      	ldr	r3, [r7, #0]
 800acc2:	689b      	ldr	r3, [r3, #8]
 800acc4:	4313      	orrs	r3, r2
 800acc6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800acc8:	68fb      	ldr	r3, [r7, #12]
 800acca:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800acce:	683b      	ldr	r3, [r7, #0]
 800acd0:	685b      	ldr	r3, [r3, #4]
 800acd2:	4313      	orrs	r3, r2
 800acd4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800acd6:	68fb      	ldr	r3, [r7, #12]
 800acd8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800acdc:	683b      	ldr	r3, [r7, #0]
 800acde:	681b      	ldr	r3, [r3, #0]
 800ace0:	4313      	orrs	r3, r2
 800ace2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800ace4:	68fb      	ldr	r3, [r7, #12]
 800ace6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800acea:	683b      	ldr	r3, [r7, #0]
 800acec:	691b      	ldr	r3, [r3, #16]
 800acee:	4313      	orrs	r3, r2
 800acf0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800acf2:	68fb      	ldr	r3, [r7, #12]
 800acf4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800acf8:	683b      	ldr	r3, [r7, #0]
 800acfa:	695b      	ldr	r3, [r3, #20]
 800acfc:	4313      	orrs	r3, r2
 800acfe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800ad00:	68fb      	ldr	r3, [r7, #12]
 800ad02:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800ad06:	683b      	ldr	r3, [r7, #0]
 800ad08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ad0a:	4313      	orrs	r3, r2
 800ad0c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800ad0e:	68fb      	ldr	r3, [r7, #12]
 800ad10:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800ad14:	683b      	ldr	r3, [r7, #0]
 800ad16:	699b      	ldr	r3, [r3, #24]
 800ad18:	041b      	lsls	r3, r3, #16
 800ad1a:	4313      	orrs	r3, r2
 800ad1c:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	681b      	ldr	r3, [r3, #0]
 800ad22:	4a20      	ldr	r2, [pc, #128]	; (800ada4 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 800ad24:	4293      	cmp	r3, r2
 800ad26:	d106      	bne.n	800ad36 <HAL_TIMEx_ConfigBreakDeadTime+0xae>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800ad28:	68fb      	ldr	r3, [r7, #12]
 800ad2a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800ad2e:	683b      	ldr	r3, [r7, #0]
 800ad30:	69db      	ldr	r3, [r3, #28]
 800ad32:	4313      	orrs	r3, r2
 800ad34:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	681b      	ldr	r3, [r3, #0]
 800ad3a:	4a1a      	ldr	r2, [pc, #104]	; (800ada4 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 800ad3c:	4293      	cmp	r3, r2
 800ad3e:	d121      	bne.n	800ad84 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800ad40:	68fb      	ldr	r3, [r7, #12]
 800ad42:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800ad46:	683b      	ldr	r3, [r7, #0]
 800ad48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ad4a:	051b      	lsls	r3, r3, #20
 800ad4c:	4313      	orrs	r3, r2
 800ad4e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800ad50:	68fb      	ldr	r3, [r7, #12]
 800ad52:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800ad56:	683b      	ldr	r3, [r7, #0]
 800ad58:	6a1b      	ldr	r3, [r3, #32]
 800ad5a:	4313      	orrs	r3, r2
 800ad5c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800ad5e:	68fb      	ldr	r3, [r7, #12]
 800ad60:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800ad64:	683b      	ldr	r3, [r7, #0]
 800ad66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad68:	4313      	orrs	r3, r2
 800ad6a:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	681b      	ldr	r3, [r3, #0]
 800ad70:	4a0c      	ldr	r2, [pc, #48]	; (800ada4 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 800ad72:	4293      	cmp	r3, r2
 800ad74:	d106      	bne.n	800ad84 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800ad76:	68fb      	ldr	r3, [r7, #12]
 800ad78:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800ad7c:	683b      	ldr	r3, [r7, #0]
 800ad7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad80:	4313      	orrs	r3, r2
 800ad82:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	681b      	ldr	r3, [r3, #0]
 800ad88:	68fa      	ldr	r2, [r7, #12]
 800ad8a:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	2200      	movs	r2, #0
 800ad90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800ad94:	2300      	movs	r3, #0
}
 800ad96:	4618      	mov	r0, r3
 800ad98:	3714      	adds	r7, #20
 800ad9a:	46bd      	mov	sp, r7
 800ad9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ada0:	4770      	bx	lr
 800ada2:	bf00      	nop
 800ada4:	40012c00 	.word	0x40012c00

0800ada8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800ada8:	b480      	push	{r7}
 800adaa:	b083      	sub	sp, #12
 800adac:	af00      	add	r7, sp, #0
 800adae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800adb0:	bf00      	nop
 800adb2:	370c      	adds	r7, #12
 800adb4:	46bd      	mov	sp, r7
 800adb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adba:	4770      	bx	lr

0800adbc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800adbc:	b480      	push	{r7}
 800adbe:	b083      	sub	sp, #12
 800adc0:	af00      	add	r7, sp, #0
 800adc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800adc4:	bf00      	nop
 800adc6:	370c      	adds	r7, #12
 800adc8:	46bd      	mov	sp, r7
 800adca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adce:	4770      	bx	lr

0800add0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800add0:	b480      	push	{r7}
 800add2:	b083      	sub	sp, #12
 800add4:	af00      	add	r7, sp, #0
 800add6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800add8:	bf00      	nop
 800adda:	370c      	adds	r7, #12
 800addc:	46bd      	mov	sp, r7
 800adde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ade2:	4770      	bx	lr

0800ade4 <BLS_Init>:
/* Private functions ----------------------------------------------------------*/
/* Weak functions ----------------------------------------------------------*/
void BVOPUS_STM_Init(void);

__weak void BLS_Init( void )
{
 800ade4:	b480      	push	{r7}
 800ade6:	af00      	add	r7, sp, #0
  return;
 800ade8:	bf00      	nop
}
 800adea:	46bd      	mov	sp, r7
 800adec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adf0:	4770      	bx	lr

0800adf2 <CRS_STM_Init>:
__weak void CRS_STM_Init( void )
{
 800adf2:	b480      	push	{r7}
 800adf4:	af00      	add	r7, sp, #0
  return;
 800adf6:	bf00      	nop
}
 800adf8:	46bd      	mov	sp, r7
 800adfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adfe:	4770      	bx	lr

0800ae00 <EDS_STM_Init>:
__weak void DIS_Init( void )
{
  return;
}
__weak void EDS_STM_Init( void )
{
 800ae00:	b480      	push	{r7}
 800ae02:	af00      	add	r7, sp, #0
  return;
 800ae04:	bf00      	nop
}
 800ae06:	46bd      	mov	sp, r7
 800ae08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae0c:	4770      	bx	lr

0800ae0e <HIDS_Init>:
__weak void HIDS_Init( void )
{
 800ae0e:	b480      	push	{r7}
 800ae10:	af00      	add	r7, sp, #0
  return;
 800ae12:	bf00      	nop
}
 800ae14:	46bd      	mov	sp, r7
 800ae16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae1a:	4770      	bx	lr

0800ae1c <HTS_Init>:
__weak void HRS_Init( void )
{
  return;
}
__weak void HTS_Init( void )
{
 800ae1c:	b480      	push	{r7}
 800ae1e:	af00      	add	r7, sp, #0
  return;
 800ae20:	bf00      	nop
}
 800ae22:	46bd      	mov	sp, r7
 800ae24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae28:	4770      	bx	lr

0800ae2a <IAS_Init>:
__weak void IAS_Init( void )
{
 800ae2a:	b480      	push	{r7}
 800ae2c:	af00      	add	r7, sp, #0
  return;
 800ae2e:	bf00      	nop
}
 800ae30:	46bd      	mov	sp, r7
 800ae32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae36:	4770      	bx	lr

0800ae38 <LLS_Init>:
__weak void LLS_Init( void )
{
 800ae38:	b480      	push	{r7}
 800ae3a:	af00      	add	r7, sp, #0
  return;
 800ae3c:	bf00      	nop
}
 800ae3e:	46bd      	mov	sp, r7
 800ae40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae44:	4770      	bx	lr

0800ae46 <TPS_Init>:
__weak void TPS_Init( void )
{
 800ae46:	b480      	push	{r7}
 800ae48:	af00      	add	r7, sp, #0
  return;
 800ae4a:	bf00      	nop
}
 800ae4c:	46bd      	mov	sp, r7
 800ae4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae52:	4770      	bx	lr

0800ae54 <MOTENV_STM_Init>:
__weak void MOTENV_STM_Init( void )
{
 800ae54:	b480      	push	{r7}
 800ae56:	af00      	add	r7, sp, #0
  return;
 800ae58:	bf00      	nop
}
 800ae5a:	46bd      	mov	sp, r7
 800ae5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae60:	4770      	bx	lr

0800ae62 <OTAS_STM_Init>:
__weak void P2PS_STM_Init( void )
{
  return;
}
__weak void OTAS_STM_Init( void )
{
 800ae62:	b480      	push	{r7}
 800ae64:	af00      	add	r7, sp, #0
  return;
 800ae66:	bf00      	nop
}
 800ae68:	46bd      	mov	sp, r7
 800ae6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae6e:	4770      	bx	lr

0800ae70 <MESH_Init>:
__weak void MESH_Init( void )
{
 800ae70:	b480      	push	{r7}
 800ae72:	af00      	add	r7, sp, #0
  return;
 800ae74:	bf00      	nop
}
 800ae76:	46bd      	mov	sp, r7
 800ae78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae7c:	4770      	bx	lr

0800ae7e <BVOPUS_STM_Init>:
__weak void BVOPUS_STM_Init( void )
{
 800ae7e:	b480      	push	{r7}
 800ae80:	af00      	add	r7, sp, #0
  return;
 800ae82:	bf00      	nop
}
 800ae84:	46bd      	mov	sp, r7
 800ae86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae8a:	4770      	bx	lr

0800ae8c <SVCCTL_InitCustomSvc>:
__weak void SVCCTL_InitCustomSvc( void )
{
 800ae8c:	b480      	push	{r7}
 800ae8e:	af00      	add	r7, sp, #0
  return;
 800ae90:	bf00      	nop
}
 800ae92:	46bd      	mov	sp, r7
 800ae94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae98:	4770      	bx	lr
	...

0800ae9c <SVCCTL_Init>:

/* Functions Definition ------------------------------------------------------*/

void SVCCTL_Init( void )
{
 800ae9c:	b580      	push	{r7, lr}
 800ae9e:	af00      	add	r7, sp, #0
 
  /**
   * Initialize the number of registered Handler
   */
  SVCCTL_EvtHandler.NbreOfRegisteredHandler = 0;
 800aea0:	4b04      	ldr	r3, [pc, #16]	; (800aeb4 <SVCCTL_Init+0x18>)
 800aea2:	2200      	movs	r2, #0
 800aea4:	771a      	strb	r2, [r3, #28]
  SVCCTL_CltHandler.NbreOfRegisteredHandler = 0;
 800aea6:	4b04      	ldr	r3, [pc, #16]	; (800aeb8 <SVCCTL_Init+0x1c>)
 800aea8:	2200      	movs	r2, #0
 800aeaa:	701a      	strb	r2, [r3, #0]

  /**
   * Add and Initialize requested services
   */
  SVCCTL_SvcInit();
 800aeac:	f000 f806 	bl	800aebc <SVCCTL_SvcInit>

  return;
 800aeb0:	bf00      	nop
}
 800aeb2:	bd80      	pop	{r7, pc}
 800aeb4:	20000364 	.word	0x20000364
 800aeb8:	20000384 	.word	0x20000384

0800aebc <SVCCTL_SvcInit>:

__weak void SVCCTL_SvcInit(void)
{
 800aebc:	b580      	push	{r7, lr}
 800aebe:	af00      	add	r7, sp, #0
  BLS_Init();
 800aec0:	f7ff ff90 	bl	800ade4 <BLS_Init>

  CRS_STM_Init();
 800aec4:	f7ff ff95 	bl	800adf2 <CRS_STM_Init>

  //DIS_Init();

  EDS_STM_Init();
 800aec8:	f7ff ff9a 	bl	800ae00 <EDS_STM_Init>

  HIDS_Init();
 800aecc:	f7ff ff9f 	bl	800ae0e <HIDS_Init>

  //HRS_Init();

  HTS_Init();
 800aed0:	f7ff ffa4 	bl	800ae1c <HTS_Init>

  IAS_Init();
 800aed4:	f7ff ffa9 	bl	800ae2a <IAS_Init>

  LLS_Init();
 800aed8:	f7ff ffae 	bl	800ae38 <LLS_Init>

  TPS_Init();
 800aedc:	f7ff ffb3 	bl	800ae46 <TPS_Init>

  MOTENV_STM_Init();
 800aee0:	f7ff ffb8 	bl	800ae54 <MOTENV_STM_Init>

  P2PS_STM_Init();
 800aee4:	f001 fdd4 	bl	800ca90 <P2PS_STM_Init>

  OTAS_STM_Init();
 800aee8:	f7ff ffbb 	bl	800ae62 <OTAS_STM_Init>
  
  BVOPUS_STM_Init();
 800aeec:	f7ff ffc7 	bl	800ae7e <BVOPUS_STM_Init>

  MESH_Init();
 800aef0:	f7ff ffbe 	bl	800ae70 <MESH_Init>

  SVCCTL_InitCustomSvc();
 800aef4:	f7ff ffca 	bl	800ae8c <SVCCTL_InitCustomSvc>
  
  return;
 800aef8:	bf00      	nop
}
 800aefa:	bd80      	pop	{r7, pc}

0800aefc <SVCCTL_RegisterSvcHandler>:
 * @brief  BLE Controller initialization
 * @param  None
 * @retval None
 */
void SVCCTL_RegisterSvcHandler( SVC_CTL_p_EvtHandler_t pfBLE_SVC_Service_Event_Handler )
{
 800aefc:	b480      	push	{r7}
 800aefe:	b083      	sub	sp, #12
 800af00:	af00      	add	r7, sp, #0
 800af02:	6078      	str	r0, [r7, #4]
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
  SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[SVCCTL_EvtHandler.NbreOfRegisteredHandler] = pfBLE_SVC_Service_Event_Handler;
 800af04:	4b09      	ldr	r3, [pc, #36]	; (800af2c <SVCCTL_RegisterSvcHandler+0x30>)
 800af06:	7f1b      	ldrb	r3, [r3, #28]
 800af08:	4619      	mov	r1, r3
 800af0a:	4a08      	ldr	r2, [pc, #32]	; (800af2c <SVCCTL_RegisterSvcHandler+0x30>)
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  SVCCTL_EvtHandler.NbreOfRegisteredHandler++;
 800af12:	4b06      	ldr	r3, [pc, #24]	; (800af2c <SVCCTL_RegisterSvcHandler+0x30>)
 800af14:	7f1b      	ldrb	r3, [r3, #28]
 800af16:	3301      	adds	r3, #1
 800af18:	b2da      	uxtb	r2, r3
 800af1a:	4b04      	ldr	r3, [pc, #16]	; (800af2c <SVCCTL_RegisterSvcHandler+0x30>)
 800af1c:	771a      	strb	r2, [r3, #28]
#else
  (void)(pfBLE_SVC_Service_Event_Handler);
#endif

  return;
 800af1e:	bf00      	nop
}
 800af20:	370c      	adds	r7, #12
 800af22:	46bd      	mov	sp, r7
 800af24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af28:	4770      	bx	lr
 800af2a:	bf00      	nop
 800af2c:	20000364 	.word	0x20000364

0800af30 <SVCCTL_UserEvtRx>:

  return;
}

SVCCTL_UserEvtFlowStatus_t SVCCTL_UserEvtRx( void *pckt )
{
 800af30:	b580      	push	{r7, lr}
 800af32:	b086      	sub	sp, #24
 800af34:	af00      	add	r7, sp, #0
 800af36:	6078      	str	r0, [r7, #4]
  evt_blue_aci *blue_evt;
  SVCCTL_EvtAckStatus_t event_notification_status;
  SVCCTL_UserEvtFlowStatus_t return_status;
  uint8_t index;

  event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) pckt)->data;
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	3301      	adds	r3, #1
 800af3c:	613b      	str	r3, [r7, #16]
  event_notification_status = SVCCTL_EvtNotAck;
 800af3e:	2300      	movs	r3, #0
 800af40:	75fb      	strb	r3, [r7, #23]

  switch (event_pckt->evt)
 800af42:	693b      	ldr	r3, [r7, #16]
 800af44:	781b      	ldrb	r3, [r3, #0]
 800af46:	2bff      	cmp	r3, #255	; 0xff
 800af48:	d000      	beq.n	800af4c <SVCCTL_UserEvtRx+0x1c>
      }
    }
      break; /* HCI_EVT_VENDOR_SPECIFIC */

    default:
      break;
 800af4a:	e025      	b.n	800af98 <SVCCTL_UserEvtRx+0x68>
      blue_evt = (evt_blue_aci*) event_pckt->data;
 800af4c:	693b      	ldr	r3, [r7, #16]
 800af4e:	3302      	adds	r3, #2
 800af50:	60fb      	str	r3, [r7, #12]
      switch ((blue_evt->ecode) & SVCCTL_EGID_EVT_MASK)
 800af52:	68fb      	ldr	r3, [r7, #12]
 800af54:	881b      	ldrh	r3, [r3, #0]
 800af56:	b29b      	uxth	r3, r3
 800af58:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800af5c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800af60:	d000      	beq.n	800af64 <SVCCTL_UserEvtRx+0x34>
          break;
 800af62:	e018      	b.n	800af96 <SVCCTL_UserEvtRx+0x66>
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 800af64:	2300      	movs	r3, #0
 800af66:	757b      	strb	r3, [r7, #21]
 800af68:	e00d      	b.n	800af86 <SVCCTL_UserEvtRx+0x56>
            event_notification_status = SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[index](pckt);
 800af6a:	7d7b      	ldrb	r3, [r7, #21]
 800af6c:	4a18      	ldr	r2, [pc, #96]	; (800afd0 <SVCCTL_UserEvtRx+0xa0>)
 800af6e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800af72:	6878      	ldr	r0, [r7, #4]
 800af74:	4798      	blx	r3
 800af76:	4603      	mov	r3, r0
 800af78:	75fb      	strb	r3, [r7, #23]
            if (event_notification_status != SVCCTL_EvtNotAck)
 800af7a:	7dfb      	ldrb	r3, [r7, #23]
 800af7c:	2b00      	cmp	r3, #0
 800af7e:	d108      	bne.n	800af92 <SVCCTL_UserEvtRx+0x62>
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 800af80:	7d7b      	ldrb	r3, [r7, #21]
 800af82:	3301      	adds	r3, #1
 800af84:	757b      	strb	r3, [r7, #21]
 800af86:	4b12      	ldr	r3, [pc, #72]	; (800afd0 <SVCCTL_UserEvtRx+0xa0>)
 800af88:	7f1b      	ldrb	r3, [r3, #28]
 800af8a:	7d7a      	ldrb	r2, [r7, #21]
 800af8c:	429a      	cmp	r2, r3
 800af8e:	d3ec      	bcc.n	800af6a <SVCCTL_UserEvtRx+0x3a>
          break;
 800af90:	e000      	b.n	800af94 <SVCCTL_UserEvtRx+0x64>
              break;
 800af92:	bf00      	nop
          break;
 800af94:	bf00      	nop
      break; /* HCI_EVT_VENDOR_SPECIFIC */
 800af96:	bf00      	nop

  /**
   * When no registered handlers (either Service or Client) has acknowledged the GATT event, it is reported to the application
   * a GAP event is always reported to the applicaiton.
   */
  switch (event_notification_status)
 800af98:	7dfb      	ldrb	r3, [r7, #23]
 800af9a:	2b01      	cmp	r3, #1
 800af9c:	d009      	beq.n	800afb2 <SVCCTL_UserEvtRx+0x82>
 800af9e:	2b02      	cmp	r3, #2
 800afa0:	d00a      	beq.n	800afb8 <SVCCTL_UserEvtRx+0x88>
 800afa2:	2b00      	cmp	r3, #0
 800afa4:	d10b      	bne.n	800afbe <SVCCTL_UserEvtRx+0x8e>
    case SVCCTL_EvtNotAck:
      /**
       *  The event has NOT been managed.
       *  It shall be passed to the application for processing
       */
      return_status = SVCCTL_App_Notification(pckt);
 800afa6:	6878      	ldr	r0, [r7, #4]
 800afa8:	f7f5 fe70 	bl	8000c8c <SVCCTL_App_Notification>
 800afac:	4603      	mov	r3, r0
 800afae:	75bb      	strb	r3, [r7, #22]
      break;
 800afb0:	e008      	b.n	800afc4 <SVCCTL_UserEvtRx+0x94>

    case SVCCTL_EvtAckFlowEnable:
      return_status = SVCCTL_UserEvtFlowEnable;
 800afb2:	2301      	movs	r3, #1
 800afb4:	75bb      	strb	r3, [r7, #22]
      break;
 800afb6:	e005      	b.n	800afc4 <SVCCTL_UserEvtRx+0x94>

    case SVCCTL_EvtAckFlowDisable:
      return_status = SVCCTL_UserEvtFlowDisable;
 800afb8:	2300      	movs	r3, #0
 800afba:	75bb      	strb	r3, [r7, #22]
      break;
 800afbc:	e002      	b.n	800afc4 <SVCCTL_UserEvtRx+0x94>

    default:
      return_status = SVCCTL_UserEvtFlowEnable;
 800afbe:	2301      	movs	r3, #1
 800afc0:	75bb      	strb	r3, [r7, #22]
      break;
 800afc2:	bf00      	nop
  }

  return (return_status);
 800afc4:	7dbb      	ldrb	r3, [r7, #22]
}
 800afc6:	4618      	mov	r0, r3
 800afc8:	3718      	adds	r7, #24
 800afca:	46bd      	mov	sp, r7
 800afcc:	bd80      	pop	{r7, pc}
 800afce:	bf00      	nop
 800afd0:	20000364 	.word	0x20000364

0800afd4 <aci_gap_set_non_discoverable>:
 */

#include "ble_gap_aci.h"

tBleStatus aci_gap_set_non_discoverable( void )
{
 800afd4:	b580      	push	{r7, lr}
 800afd6:	b088      	sub	sp, #32
 800afd8:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 800afda:	2300      	movs	r3, #0
 800afdc:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800afde:	f107 0308 	add.w	r3, r7, #8
 800afe2:	2218      	movs	r2, #24
 800afe4:	2100      	movs	r1, #0
 800afe6:	4618      	mov	r0, r3
 800afe8:	f000 ff9c 	bl	800bf24 <Osal_MemSet>
  rq.ogf = 0x3f;
 800afec:	233f      	movs	r3, #63	; 0x3f
 800afee:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x081;
 800aff0:	2381      	movs	r3, #129	; 0x81
 800aff2:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 800aff4:	1dfb      	adds	r3, r7, #7
 800aff6:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 800aff8:	2301      	movs	r3, #1
 800affa:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 800affc:	f107 0308 	add.w	r3, r7, #8
 800b000:	2100      	movs	r1, #0
 800b002:	4618      	mov	r0, r3
 800b004:	f001 f836 	bl	800c074 <hci_send_req>
 800b008:	4603      	mov	r3, r0
 800b00a:	2b00      	cmp	r3, #0
 800b00c:	da01      	bge.n	800b012 <aci_gap_set_non_discoverable+0x3e>
    return BLE_STATUS_TIMEOUT;
 800b00e:	23ff      	movs	r3, #255	; 0xff
 800b010:	e000      	b.n	800b014 <aci_gap_set_non_discoverable+0x40>
  return status;
 800b012:	79fb      	ldrb	r3, [r7, #7]
}
 800b014:	4618      	mov	r0, r3
 800b016:	3720      	adds	r7, #32
 800b018:	46bd      	mov	sp, r7
 800b01a:	bd80      	pop	{r7, pc}

0800b01c <aci_gap_set_discoverable>:
                                     const uint8_t* Local_Name,
                                     uint8_t Service_Uuid_length,
                                     const uint8_t* Service_Uuid_List,
                                     uint16_t Slave_Conn_Interval_Min,
                                     uint16_t Slave_Conn_Interval_Max )
{
 800b01c:	b5b0      	push	{r4, r5, r7, lr}
 800b01e:	b0ce      	sub	sp, #312	; 0x138
 800b020:	af00      	add	r7, sp, #0
 800b022:	4605      	mov	r5, r0
 800b024:	460c      	mov	r4, r1
 800b026:	4610      	mov	r0, r2
 800b028:	4619      	mov	r1, r3
 800b02a:	1dfb      	adds	r3, r7, #7
 800b02c:	462a      	mov	r2, r5
 800b02e:	701a      	strb	r2, [r3, #0]
 800b030:	1d3b      	adds	r3, r7, #4
 800b032:	4622      	mov	r2, r4
 800b034:	801a      	strh	r2, [r3, #0]
 800b036:	1cbb      	adds	r3, r7, #2
 800b038:	4602      	mov	r2, r0
 800b03a:	801a      	strh	r2, [r3, #0]
 800b03c:	1dbb      	adds	r3, r7, #6
 800b03e:	460a      	mov	r2, r1
 800b040:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_discoverable_cp0 *cp0 = (aci_gap_set_discoverable_cp0*)(cmd_buffer);
 800b042:	f107 0310 	add.w	r3, r7, #16
 800b046:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  aci_gap_set_discoverable_cp1 *cp1 = (aci_gap_set_discoverable_cp1*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)));
 800b04a:	f897 314c 	ldrb.w	r3, [r7, #332]	; 0x14c
 800b04e:	3308      	adds	r3, #8
 800b050:	f107 0210 	add.w	r2, r7, #16
 800b054:	4413      	add	r3, r2
 800b056:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  aci_gap_set_discoverable_cp2 *cp2 = (aci_gap_set_discoverable_cp2*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)) + 1 + Service_Uuid_length * (sizeof(uint8_t)));
 800b05a:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 800b05e:	f897 3154 	ldrb.w	r3, [r7, #340]	; 0x154
 800b062:	4413      	add	r3, r2
 800b064:	3309      	adds	r3, #9
 800b066:	f107 0210 	add.w	r2, r7, #16
 800b06a:	4413      	add	r3, r2
 800b06c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800b070:	f107 030f 	add.w	r3, r7, #15
 800b074:	2200      	movs	r2, #0
 800b076:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800b078:	2300      	movs	r3, #0
 800b07a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Type = Advertising_Type;
 800b07e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800b082:	1dfa      	adds	r2, r7, #7
 800b084:	7812      	ldrb	r2, [r2, #0]
 800b086:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800b088:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b08c:	3301      	adds	r3, #1
 800b08e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Interval_Min = Advertising_Interval_Min;
 800b092:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800b096:	1d3a      	adds	r2, r7, #4
 800b098:	8812      	ldrh	r2, [r2, #0]
 800b09a:	f8a3 2001 	strh.w	r2, [r3, #1]
  index_input += 2;
 800b09e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b0a2:	3302      	adds	r3, #2
 800b0a4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Interval_Max = Advertising_Interval_Max;
 800b0a8:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800b0ac:	1cba      	adds	r2, r7, #2
 800b0ae:	8812      	ldrh	r2, [r2, #0]
 800b0b0:	f8a3 2003 	strh.w	r2, [r3, #3]
  index_input += 2;
 800b0b4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b0b8:	3302      	adds	r3, #2
 800b0ba:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Own_Address_Type = Own_Address_Type;
 800b0be:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800b0c2:	1dba      	adds	r2, r7, #6
 800b0c4:	7812      	ldrb	r2, [r2, #0]
 800b0c6:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 800b0c8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b0cc:	3301      	adds	r3, #1
 800b0ce:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Filter_Policy = Advertising_Filter_Policy;
 800b0d2:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800b0d6:	f897 2148 	ldrb.w	r2, [r7, #328]	; 0x148
 800b0da:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 800b0dc:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b0e0:	3301      	adds	r3, #1
 800b0e2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Local_Name_Length = Local_Name_Length;
 800b0e6:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800b0ea:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 800b0ee:	71da      	strb	r2, [r3, #7]
  index_input += 1;
 800b0f0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b0f4:	3301      	adds	r3, #1
 800b0f6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  /* var_len_data input */
  {
    Osal_MemCpy( (void*)&cp0->Local_Name, (const void*)Local_Name, Local_Name_Length );
 800b0fa:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800b0fe:	3308      	adds	r3, #8
 800b100:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 800b104:	f8d7 1150 	ldr.w	r1, [r7, #336]	; 0x150
 800b108:	4618      	mov	r0, r3
 800b10a:	f000 fefb 	bl	800bf04 <Osal_MemCpy>
    index_input += Local_Name_Length;
 800b10e:	f897 314c 	ldrb.w	r3, [r7, #332]	; 0x14c
 800b112:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800b116:	4413      	add	r3, r2
 800b118:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp1->Service_Uuid_length = Service_Uuid_length;
 800b11c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800b120:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 800b124:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 800b126:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b12a:	3301      	adds	r3, #1
 800b12c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    Osal_MemCpy( (void*)&cp1->Service_Uuid_List, (const void*)Service_Uuid_List, Service_Uuid_length );
 800b130:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800b134:	3301      	adds	r3, #1
 800b136:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 800b13a:	f8d7 1158 	ldr.w	r1, [r7, #344]	; 0x158
 800b13e:	4618      	mov	r0, r3
 800b140:	f000 fee0 	bl	800bf04 <Osal_MemCpy>
    index_input += Service_Uuid_length;
 800b144:	f897 3154 	ldrb.w	r3, [r7, #340]	; 0x154
 800b148:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800b14c:	4413      	add	r3, r2
 800b14e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp2->Slave_Conn_Interval_Min = Slave_Conn_Interval_Min;
 800b152:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b156:	f8b7 215c 	ldrh.w	r2, [r7, #348]	; 0x15c
 800b15a:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 800b15c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b160:	3302      	adds	r3, #2
 800b162:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp2->Slave_Conn_Interval_Max = Slave_Conn_Interval_Max;
 800b166:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b16a:	f8b7 2160 	ldrh.w	r2, [r7, #352]	; 0x160
 800b16e:	805a      	strh	r2, [r3, #2]
    }
    index_input += 2;
 800b170:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b174:	3302      	adds	r3, #2
 800b176:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800b17a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800b17e:	2218      	movs	r2, #24
 800b180:	2100      	movs	r1, #0
 800b182:	4618      	mov	r0, r3
 800b184:	f000 fece 	bl	800bf24 <Osal_MemSet>
  rq.ogf = 0x3f;
 800b188:	233f      	movs	r3, #63	; 0x3f
 800b18a:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x083;
 800b18e:	2383      	movs	r3, #131	; 0x83
 800b190:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800b194:	f107 0310 	add.w	r3, r7, #16
 800b198:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800b19c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b1a0:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800b1a4:	f107 030f 	add.w	r3, r7, #15
 800b1a8:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800b1ac:	2301      	movs	r3, #1
 800b1ae:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800b1b2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800b1b6:	2100      	movs	r1, #0
 800b1b8:	4618      	mov	r0, r3
 800b1ba:	f000 ff5b 	bl	800c074 <hci_send_req>
 800b1be:	4603      	mov	r3, r0
 800b1c0:	2b00      	cmp	r3, #0
 800b1c2:	da01      	bge.n	800b1c8 <aci_gap_set_discoverable+0x1ac>
    return BLE_STATUS_TIMEOUT;
 800b1c4:	23ff      	movs	r3, #255	; 0xff
 800b1c6:	e002      	b.n	800b1ce <aci_gap_set_discoverable+0x1b2>
  return status;
 800b1c8:	f107 030f 	add.w	r3, r7, #15
 800b1cc:	781b      	ldrb	r3, [r3, #0]
}
 800b1ce:	4618      	mov	r0, r3
 800b1d0:	f507 779c 	add.w	r7, r7, #312	; 0x138
 800b1d4:	46bd      	mov	sp, r7
 800b1d6:	bdb0      	pop	{r4, r5, r7, pc}

0800b1d8 <aci_gap_set_io_capability>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_set_io_capability( uint8_t IO_Capability )
{
 800b1d8:	b580      	push	{r7, lr}
 800b1da:	b0cc      	sub	sp, #304	; 0x130
 800b1dc:	af00      	add	r7, sp, #0
 800b1de:	4602      	mov	r2, r0
 800b1e0:	1dfb      	adds	r3, r7, #7
 800b1e2:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_io_capability_cp0 *cp0 = (aci_gap_set_io_capability_cp0*)(cmd_buffer);
 800b1e4:	f107 0310 	add.w	r3, r7, #16
 800b1e8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800b1ec:	f107 030f 	add.w	r3, r7, #15
 800b1f0:	2200      	movs	r2, #0
 800b1f2:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800b1f4:	2300      	movs	r3, #0
 800b1f6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->IO_Capability = IO_Capability;
 800b1fa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b1fe:	1dfa      	adds	r2, r7, #7
 800b200:	7812      	ldrb	r2, [r2, #0]
 800b202:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800b204:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b208:	3301      	adds	r3, #1
 800b20a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800b20e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800b212:	2218      	movs	r2, #24
 800b214:	2100      	movs	r1, #0
 800b216:	4618      	mov	r0, r3
 800b218:	f000 fe84 	bl	800bf24 <Osal_MemSet>
  rq.ogf = 0x3f;
 800b21c:	233f      	movs	r3, #63	; 0x3f
 800b21e:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x085;
 800b222:	2385      	movs	r3, #133	; 0x85
 800b224:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800b228:	f107 0310 	add.w	r3, r7, #16
 800b22c:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800b230:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b234:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800b238:	f107 030f 	add.w	r3, r7, #15
 800b23c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800b240:	2301      	movs	r3, #1
 800b242:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800b246:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800b24a:	2100      	movs	r1, #0
 800b24c:	4618      	mov	r0, r3
 800b24e:	f000 ff11 	bl	800c074 <hci_send_req>
 800b252:	4603      	mov	r3, r0
 800b254:	2b00      	cmp	r3, #0
 800b256:	da01      	bge.n	800b25c <aci_gap_set_io_capability+0x84>
    return BLE_STATUS_TIMEOUT;
 800b258:	23ff      	movs	r3, #255	; 0xff
 800b25a:	e002      	b.n	800b262 <aci_gap_set_io_capability+0x8a>
  return status;
 800b25c:	f107 030f 	add.w	r3, r7, #15
 800b260:	781b      	ldrb	r3, [r3, #0]
}
 800b262:	4618      	mov	r0, r3
 800b264:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800b268:	46bd      	mov	sp, r7
 800b26a:	bd80      	pop	{r7, pc}

0800b26c <aci_gap_set_authentication_requirement>:
                                                   uint8_t Min_Encryption_Key_Size,
                                                   uint8_t Max_Encryption_Key_Size,
                                                   uint8_t Use_Fixed_Pin,
                                                   uint32_t Fixed_Pin,
                                                   uint8_t Identity_Address_Type )
{
 800b26c:	b5b0      	push	{r4, r5, r7, lr}
 800b26e:	b0cc      	sub	sp, #304	; 0x130
 800b270:	af00      	add	r7, sp, #0
 800b272:	4605      	mov	r5, r0
 800b274:	460c      	mov	r4, r1
 800b276:	4610      	mov	r0, r2
 800b278:	4619      	mov	r1, r3
 800b27a:	1dfb      	adds	r3, r7, #7
 800b27c:	462a      	mov	r2, r5
 800b27e:	701a      	strb	r2, [r3, #0]
 800b280:	1dbb      	adds	r3, r7, #6
 800b282:	4622      	mov	r2, r4
 800b284:	701a      	strb	r2, [r3, #0]
 800b286:	1d7b      	adds	r3, r7, #5
 800b288:	4602      	mov	r2, r0
 800b28a:	701a      	strb	r2, [r3, #0]
 800b28c:	1d3b      	adds	r3, r7, #4
 800b28e:	460a      	mov	r2, r1
 800b290:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_authentication_requirement_cp0 *cp0 = (aci_gap_set_authentication_requirement_cp0*)(cmd_buffer);
 800b292:	f107 0310 	add.w	r3, r7, #16
 800b296:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800b29a:	f107 030f 	add.w	r3, r7, #15
 800b29e:	2200      	movs	r2, #0
 800b2a0:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800b2a2:	2300      	movs	r3, #0
 800b2a4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Bonding_Mode = Bonding_Mode;
 800b2a8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b2ac:	1dfa      	adds	r2, r7, #7
 800b2ae:	7812      	ldrb	r2, [r2, #0]
 800b2b0:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800b2b2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b2b6:	3301      	adds	r3, #1
 800b2b8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->MITM_Mode = MITM_Mode;
 800b2bc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b2c0:	1dba      	adds	r2, r7, #6
 800b2c2:	7812      	ldrb	r2, [r2, #0]
 800b2c4:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800b2c6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b2ca:	3301      	adds	r3, #1
 800b2cc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->SC_Support = SC_Support;
 800b2d0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b2d4:	1d7a      	adds	r2, r7, #5
 800b2d6:	7812      	ldrb	r2, [r2, #0]
 800b2d8:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800b2da:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b2de:	3301      	adds	r3, #1
 800b2e0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->KeyPress_Notification_Support = KeyPress_Notification_Support;
 800b2e4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b2e8:	1d3a      	adds	r2, r7, #4
 800b2ea:	7812      	ldrb	r2, [r2, #0]
 800b2ec:	70da      	strb	r2, [r3, #3]
  index_input += 1;
 800b2ee:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b2f2:	3301      	adds	r3, #1
 800b2f4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Min_Encryption_Key_Size = Min_Encryption_Key_Size;
 800b2f8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b2fc:	f897 2140 	ldrb.w	r2, [r7, #320]	; 0x140
 800b300:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 800b302:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b306:	3301      	adds	r3, #1
 800b308:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Max_Encryption_Key_Size = Max_Encryption_Key_Size;
 800b30c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b310:	f897 2144 	ldrb.w	r2, [r7, #324]	; 0x144
 800b314:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 800b316:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b31a:	3301      	adds	r3, #1
 800b31c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Use_Fixed_Pin = Use_Fixed_Pin;
 800b320:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b324:	f897 2148 	ldrb.w	r2, [r7, #328]	; 0x148
 800b328:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 800b32a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b32e:	3301      	adds	r3, #1
 800b330:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Fixed_Pin = Fixed_Pin;
 800b334:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b338:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 800b33c:	f8c3 2007 	str.w	r2, [r3, #7]
  index_input += 4;
 800b340:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b344:	3304      	adds	r3, #4
 800b346:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Identity_Address_Type = Identity_Address_Type;
 800b34a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b34e:	f897 2150 	ldrb.w	r2, [r7, #336]	; 0x150
 800b352:	72da      	strb	r2, [r3, #11]
  index_input += 1;
 800b354:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b358:	3301      	adds	r3, #1
 800b35a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800b35e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800b362:	2218      	movs	r2, #24
 800b364:	2100      	movs	r1, #0
 800b366:	4618      	mov	r0, r3
 800b368:	f000 fddc 	bl	800bf24 <Osal_MemSet>
  rq.ogf = 0x3f;
 800b36c:	233f      	movs	r3, #63	; 0x3f
 800b36e:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x086;
 800b372:	2386      	movs	r3, #134	; 0x86
 800b374:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800b378:	f107 0310 	add.w	r3, r7, #16
 800b37c:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800b380:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b384:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800b388:	f107 030f 	add.w	r3, r7, #15
 800b38c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800b390:	2301      	movs	r3, #1
 800b392:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800b396:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800b39a:	2100      	movs	r1, #0
 800b39c:	4618      	mov	r0, r3
 800b39e:	f000 fe69 	bl	800c074 <hci_send_req>
 800b3a2:	4603      	mov	r3, r0
 800b3a4:	2b00      	cmp	r3, #0
 800b3a6:	da01      	bge.n	800b3ac <aci_gap_set_authentication_requirement+0x140>
    return BLE_STATUS_TIMEOUT;
 800b3a8:	23ff      	movs	r3, #255	; 0xff
 800b3aa:	e002      	b.n	800b3b2 <aci_gap_set_authentication_requirement+0x146>
  return status;
 800b3ac:	f107 030f 	add.w	r3, r7, #15
 800b3b0:	781b      	ldrb	r3, [r3, #0]
}
 800b3b2:	4618      	mov	r0, r3
 800b3b4:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800b3b8:	46bd      	mov	sp, r7
 800b3ba:	bdb0      	pop	{r4, r5, r7, pc}

0800b3bc <aci_gap_init>:
                         uint8_t privacy_enabled,
                         uint8_t device_name_char_len,
                         uint16_t* Service_Handle,
                         uint16_t* Dev_Name_Char_Handle,
                         uint16_t* Appearance_Char_Handle )
{
 800b3bc:	b590      	push	{r4, r7, lr}
 800b3be:	b0cd      	sub	sp, #308	; 0x134
 800b3c0:	af00      	add	r7, sp, #0
 800b3c2:	4604      	mov	r4, r0
 800b3c4:	4608      	mov	r0, r1
 800b3c6:	4611      	mov	r1, r2
 800b3c8:	463a      	mov	r2, r7
 800b3ca:	6013      	str	r3, [r2, #0]
 800b3cc:	1dfb      	adds	r3, r7, #7
 800b3ce:	4622      	mov	r2, r4
 800b3d0:	701a      	strb	r2, [r3, #0]
 800b3d2:	1dbb      	adds	r3, r7, #6
 800b3d4:	4602      	mov	r2, r0
 800b3d6:	701a      	strb	r2, [r3, #0]
 800b3d8:	1d7b      	adds	r3, r7, #5
 800b3da:	460a      	mov	r2, r1
 800b3dc:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_init_cp0 *cp0 = (aci_gap_init_cp0*)(cmd_buffer);
 800b3de:	f107 0310 	add.w	r3, r7, #16
 800b3e2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  aci_gap_init_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 800b3e6:	f107 0308 	add.w	r3, r7, #8
 800b3ea:	2207      	movs	r2, #7
 800b3ec:	2100      	movs	r1, #0
 800b3ee:	4618      	mov	r0, r3
 800b3f0:	f000 fd98 	bl	800bf24 <Osal_MemSet>
  int index_input = 0;
 800b3f4:	2300      	movs	r3, #0
 800b3f6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Role = Role;
 800b3fa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b3fe:	1dfa      	adds	r2, r7, #7
 800b400:	7812      	ldrb	r2, [r2, #0]
 800b402:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800b404:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b408:	3301      	adds	r3, #1
 800b40a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->privacy_enabled = privacy_enabled;
 800b40e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b412:	1dba      	adds	r2, r7, #6
 800b414:	7812      	ldrb	r2, [r2, #0]
 800b416:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800b418:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b41c:	3301      	adds	r3, #1
 800b41e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->device_name_char_len = device_name_char_len;
 800b422:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b426:	1d7a      	adds	r2, r7, #5
 800b428:	7812      	ldrb	r2, [r2, #0]
 800b42a:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800b42c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b430:	3301      	adds	r3, #1
 800b432:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800b436:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800b43a:	2218      	movs	r2, #24
 800b43c:	2100      	movs	r1, #0
 800b43e:	4618      	mov	r0, r3
 800b440:	f000 fd70 	bl	800bf24 <Osal_MemSet>
  rq.ogf = 0x3f;
 800b444:	233f      	movs	r3, #63	; 0x3f
 800b446:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x08a;
 800b44a:	238a      	movs	r3, #138	; 0x8a
 800b44c:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800b450:	f107 0310 	add.w	r3, r7, #16
 800b454:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800b458:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b45c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &resp;
 800b460:	f107 0308 	add.w	r3, r7, #8
 800b464:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = sizeof(resp);
 800b468:	2307      	movs	r3, #7
 800b46a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800b46e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800b472:	2100      	movs	r1, #0
 800b474:	4618      	mov	r0, r3
 800b476:	f000 fdfd 	bl	800c074 <hci_send_req>
 800b47a:	4603      	mov	r3, r0
 800b47c:	2b00      	cmp	r3, #0
 800b47e:	da01      	bge.n	800b484 <aci_gap_init+0xc8>
    return BLE_STATUS_TIMEOUT;
 800b480:	23ff      	movs	r3, #255	; 0xff
 800b482:	e021      	b.n	800b4c8 <aci_gap_init+0x10c>
  if ( resp.Status )
 800b484:	f107 0308 	add.w	r3, r7, #8
 800b488:	781b      	ldrb	r3, [r3, #0]
 800b48a:	2b00      	cmp	r3, #0
 800b48c:	d003      	beq.n	800b496 <aci_gap_init+0xda>
    return resp.Status;
 800b48e:	f107 0308 	add.w	r3, r7, #8
 800b492:	781b      	ldrb	r3, [r3, #0]
 800b494:	e018      	b.n	800b4c8 <aci_gap_init+0x10c>
  *Service_Handle = resp.Service_Handle;
 800b496:	f107 0308 	add.w	r3, r7, #8
 800b49a:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800b49e:	b29a      	uxth	r2, r3
 800b4a0:	463b      	mov	r3, r7
 800b4a2:	681b      	ldr	r3, [r3, #0]
 800b4a4:	801a      	strh	r2, [r3, #0]
  *Dev_Name_Char_Handle = resp.Dev_Name_Char_Handle;
 800b4a6:	f107 0308 	add.w	r3, r7, #8
 800b4aa:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 800b4ae:	b29a      	uxth	r2, r3
 800b4b0:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 800b4b4:	801a      	strh	r2, [r3, #0]
  *Appearance_Char_Handle = resp.Appearance_Char_Handle;
 800b4b6:	f107 0308 	add.w	r3, r7, #8
 800b4ba:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 800b4be:	b29a      	uxth	r2, r3
 800b4c0:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 800b4c4:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 800b4c6:	2300      	movs	r3, #0
}
 800b4c8:	4618      	mov	r0, r3
 800b4ca:	f507 779a 	add.w	r7, r7, #308	; 0x134
 800b4ce:	46bd      	mov	sp, r7
 800b4d0:	bd90      	pop	{r4, r7, pc}

0800b4d2 <aci_gap_update_adv_data>:
  return status;
}

tBleStatus aci_gap_update_adv_data( uint8_t AdvDataLen,
                                    const uint8_t* AdvData )
{
 800b4d2:	b580      	push	{r7, lr}
 800b4d4:	b0cc      	sub	sp, #304	; 0x130
 800b4d6:	af00      	add	r7, sp, #0
 800b4d8:	4602      	mov	r2, r0
 800b4da:	463b      	mov	r3, r7
 800b4dc:	6019      	str	r1, [r3, #0]
 800b4de:	1dfb      	adds	r3, r7, #7
 800b4e0:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_update_adv_data_cp0 *cp0 = (aci_gap_update_adv_data_cp0*)(cmd_buffer);
 800b4e2:	f107 0310 	add.w	r3, r7, #16
 800b4e6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800b4ea:	f107 030f 	add.w	r3, r7, #15
 800b4ee:	2200      	movs	r2, #0
 800b4f0:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800b4f2:	2300      	movs	r3, #0
 800b4f4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->AdvDataLen = AdvDataLen;
 800b4f8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b4fc:	1dfa      	adds	r2, r7, #7
 800b4fe:	7812      	ldrb	r2, [r2, #0]
 800b500:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800b502:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b506:	3301      	adds	r3, #1
 800b508:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->AdvData, (const void*)AdvData, AdvDataLen );
 800b50c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b510:	1c58      	adds	r0, r3, #1
 800b512:	1dfb      	adds	r3, r7, #7
 800b514:	781a      	ldrb	r2, [r3, #0]
 800b516:	463b      	mov	r3, r7
 800b518:	6819      	ldr	r1, [r3, #0]
 800b51a:	f000 fcf3 	bl	800bf04 <Osal_MemCpy>
  index_input += AdvDataLen;
 800b51e:	1dfb      	adds	r3, r7, #7
 800b520:	781b      	ldrb	r3, [r3, #0]
 800b522:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800b526:	4413      	add	r3, r2
 800b528:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800b52c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800b530:	2218      	movs	r2, #24
 800b532:	2100      	movs	r1, #0
 800b534:	4618      	mov	r0, r3
 800b536:	f000 fcf5 	bl	800bf24 <Osal_MemSet>
  rq.ogf = 0x3f;
 800b53a:	233f      	movs	r3, #63	; 0x3f
 800b53c:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x08e;
 800b540:	238e      	movs	r3, #142	; 0x8e
 800b542:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800b546:	f107 0310 	add.w	r3, r7, #16
 800b54a:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800b54e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b552:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800b556:	f107 030f 	add.w	r3, r7, #15
 800b55a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800b55e:	2301      	movs	r3, #1
 800b560:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800b564:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800b568:	2100      	movs	r1, #0
 800b56a:	4618      	mov	r0, r3
 800b56c:	f000 fd82 	bl	800c074 <hci_send_req>
 800b570:	4603      	mov	r3, r0
 800b572:	2b00      	cmp	r3, #0
 800b574:	da01      	bge.n	800b57a <aci_gap_update_adv_data+0xa8>
    return BLE_STATUS_TIMEOUT;
 800b576:	23ff      	movs	r3, #255	; 0xff
 800b578:	e002      	b.n	800b580 <aci_gap_update_adv_data+0xae>
  return status;
 800b57a:	f107 030f 	add.w	r3, r7, #15
 800b57e:	781b      	ldrb	r3, [r3, #0]
}
 800b580:	4618      	mov	r0, r3
 800b582:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800b586:	46bd      	mov	sp, r7
 800b588:	bd80      	pop	{r7, pc}

0800b58a <aci_gap_configure_whitelist>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_configure_whitelist( void )
{
 800b58a:	b580      	push	{r7, lr}
 800b58c:	b088      	sub	sp, #32
 800b58e:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 800b590:	2300      	movs	r3, #0
 800b592:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800b594:	f107 0308 	add.w	r3, r7, #8
 800b598:	2218      	movs	r2, #24
 800b59a:	2100      	movs	r1, #0
 800b59c:	4618      	mov	r0, r3
 800b59e:	f000 fcc1 	bl	800bf24 <Osal_MemSet>
  rq.ogf = 0x3f;
 800b5a2:	233f      	movs	r3, #63	; 0x3f
 800b5a4:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x092;
 800b5a6:	2392      	movs	r3, #146	; 0x92
 800b5a8:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 800b5aa:	1dfb      	adds	r3, r7, #7
 800b5ac:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 800b5ae:	2301      	movs	r3, #1
 800b5b0:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 800b5b2:	f107 0308 	add.w	r3, r7, #8
 800b5b6:	2100      	movs	r1, #0
 800b5b8:	4618      	mov	r0, r3
 800b5ba:	f000 fd5b 	bl	800c074 <hci_send_req>
 800b5be:	4603      	mov	r3, r0
 800b5c0:	2b00      	cmp	r3, #0
 800b5c2:	da01      	bge.n	800b5c8 <aci_gap_configure_whitelist+0x3e>
    return BLE_STATUS_TIMEOUT;
 800b5c4:	23ff      	movs	r3, #255	; 0xff
 800b5c6:	e000      	b.n	800b5ca <aci_gap_configure_whitelist+0x40>
  return status;
 800b5c8:	79fb      	ldrb	r3, [r7, #7]
}
 800b5ca:	4618      	mov	r0, r3
 800b5cc:	3720      	adds	r7, #32
 800b5ce:	46bd      	mov	sp, r7
 800b5d0:	bd80      	pop	{r7, pc}

0800b5d2 <aci_gap_allow_rebond>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_allow_rebond( uint16_t Connection_Handle )
{
 800b5d2:	b580      	push	{r7, lr}
 800b5d4:	b0cc      	sub	sp, #304	; 0x130
 800b5d6:	af00      	add	r7, sp, #0
 800b5d8:	4602      	mov	r2, r0
 800b5da:	1dbb      	adds	r3, r7, #6
 800b5dc:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_allow_rebond_cp0 *cp0 = (aci_gap_allow_rebond_cp0*)(cmd_buffer);
 800b5de:	f107 0310 	add.w	r3, r7, #16
 800b5e2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800b5e6:	f107 030f 	add.w	r3, r7, #15
 800b5ea:	2200      	movs	r2, #0
 800b5ec:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800b5ee:	2300      	movs	r3, #0
 800b5f0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Connection_Handle = Connection_Handle;
 800b5f4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b5f8:	1dba      	adds	r2, r7, #6
 800b5fa:	8812      	ldrh	r2, [r2, #0]
 800b5fc:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800b5fe:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b602:	3302      	adds	r3, #2
 800b604:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800b608:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800b60c:	2218      	movs	r2, #24
 800b60e:	2100      	movs	r1, #0
 800b610:	4618      	mov	r0, r3
 800b612:	f000 fc87 	bl	800bf24 <Osal_MemSet>
  rq.ogf = 0x3f;
 800b616:	233f      	movs	r3, #63	; 0x3f
 800b618:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x095;
 800b61c:	2395      	movs	r3, #149	; 0x95
 800b61e:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800b622:	f107 0310 	add.w	r3, r7, #16
 800b626:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800b62a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b62e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800b632:	f107 030f 	add.w	r3, r7, #15
 800b636:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800b63a:	2301      	movs	r3, #1
 800b63c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800b640:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800b644:	2100      	movs	r1, #0
 800b646:	4618      	mov	r0, r3
 800b648:	f000 fd14 	bl	800c074 <hci_send_req>
 800b64c:	4603      	mov	r3, r0
 800b64e:	2b00      	cmp	r3, #0
 800b650:	da01      	bge.n	800b656 <aci_gap_allow_rebond+0x84>
    return BLE_STATUS_TIMEOUT;
 800b652:	23ff      	movs	r3, #255	; 0xff
 800b654:	e002      	b.n	800b65c <aci_gap_allow_rebond+0x8a>
  return status;
 800b656:	f107 030f 	add.w	r3, r7, #15
 800b65a:	781b      	ldrb	r3, [r3, #0]
}
 800b65c:	4618      	mov	r0, r3
 800b65e:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800b662:	46bd      	mov	sp, r7
 800b664:	bd80      	pop	{r7, pc}

0800b666 <aci_gap_numeric_comparison_value_confirm_yesno>:
  return status;
}

tBleStatus aci_gap_numeric_comparison_value_confirm_yesno( uint16_t Connection_Handle,
                                                           uint8_t Confirm_Yes_No )
{
 800b666:	b580      	push	{r7, lr}
 800b668:	b0cc      	sub	sp, #304	; 0x130
 800b66a:	af00      	add	r7, sp, #0
 800b66c:	4602      	mov	r2, r0
 800b66e:	1dbb      	adds	r3, r7, #6
 800b670:	801a      	strh	r2, [r3, #0]
 800b672:	1d7b      	adds	r3, r7, #5
 800b674:	460a      	mov	r2, r1
 800b676:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_numeric_comparison_value_confirm_yesno_cp0 *cp0 = (aci_gap_numeric_comparison_value_confirm_yesno_cp0*)(cmd_buffer);
 800b678:	f107 0310 	add.w	r3, r7, #16
 800b67c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800b680:	f107 030f 	add.w	r3, r7, #15
 800b684:	2200      	movs	r2, #0
 800b686:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800b688:	2300      	movs	r3, #0
 800b68a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Connection_Handle = Connection_Handle;
 800b68e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b692:	1dba      	adds	r2, r7, #6
 800b694:	8812      	ldrh	r2, [r2, #0]
 800b696:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800b698:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b69c:	3302      	adds	r3, #2
 800b69e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Confirm_Yes_No = Confirm_Yes_No;
 800b6a2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b6a6:	1d7a      	adds	r2, r7, #5
 800b6a8:	7812      	ldrb	r2, [r2, #0]
 800b6aa:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800b6ac:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b6b0:	3301      	adds	r3, #1
 800b6b2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800b6b6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800b6ba:	2218      	movs	r2, #24
 800b6bc:	2100      	movs	r1, #0
 800b6be:	4618      	mov	r0, r3
 800b6c0:	f000 fc30 	bl	800bf24 <Osal_MemSet>
  rq.ogf = 0x3f;
 800b6c4:	233f      	movs	r3, #63	; 0x3f
 800b6c6:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x0a5;
 800b6ca:	23a5      	movs	r3, #165	; 0xa5
 800b6cc:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800b6d0:	f107 0310 	add.w	r3, r7, #16
 800b6d4:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800b6d8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b6dc:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800b6e0:	f107 030f 	add.w	r3, r7, #15
 800b6e4:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800b6e8:	2301      	movs	r3, #1
 800b6ea:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800b6ee:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800b6f2:	2100      	movs	r1, #0
 800b6f4:	4618      	mov	r0, r3
 800b6f6:	f000 fcbd 	bl	800c074 <hci_send_req>
 800b6fa:	4603      	mov	r3, r0
 800b6fc:	2b00      	cmp	r3, #0
 800b6fe:	da01      	bge.n	800b704 <aci_gap_numeric_comparison_value_confirm_yesno+0x9e>
    return BLE_STATUS_TIMEOUT;
 800b700:	23ff      	movs	r3, #255	; 0xff
 800b702:	e002      	b.n	800b70a <aci_gap_numeric_comparison_value_confirm_yesno+0xa4>
  return status;
 800b704:	f107 030f 	add.w	r3, r7, #15
 800b708:	781b      	ldrb	r3, [r3, #0]
}
 800b70a:	4618      	mov	r0, r3
 800b70c:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800b710:	46bd      	mov	sp, r7
 800b712:	bd80      	pop	{r7, pc}

0800b714 <aci_gatt_init>:
 */

#include "ble_gatt_aci.h"

tBleStatus aci_gatt_init( void )
{
 800b714:	b580      	push	{r7, lr}
 800b716:	b088      	sub	sp, #32
 800b718:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 800b71a:	2300      	movs	r3, #0
 800b71c:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800b71e:	f107 0308 	add.w	r3, r7, #8
 800b722:	2218      	movs	r2, #24
 800b724:	2100      	movs	r1, #0
 800b726:	4618      	mov	r0, r3
 800b728:	f000 fbfc 	bl	800bf24 <Osal_MemSet>
  rq.ogf = 0x3f;
 800b72c:	233f      	movs	r3, #63	; 0x3f
 800b72e:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x101;
 800b730:	f240 1301 	movw	r3, #257	; 0x101
 800b734:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 800b736:	1dfb      	adds	r3, r7, #7
 800b738:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 800b73a:	2301      	movs	r3, #1
 800b73c:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 800b73e:	f107 0308 	add.w	r3, r7, #8
 800b742:	2100      	movs	r1, #0
 800b744:	4618      	mov	r0, r3
 800b746:	f000 fc95 	bl	800c074 <hci_send_req>
 800b74a:	4603      	mov	r3, r0
 800b74c:	2b00      	cmp	r3, #0
 800b74e:	da01      	bge.n	800b754 <aci_gatt_init+0x40>
    return BLE_STATUS_TIMEOUT;
 800b750:	23ff      	movs	r3, #255	; 0xff
 800b752:	e000      	b.n	800b756 <aci_gatt_init+0x42>
  return status;
 800b754:	79fb      	ldrb	r3, [r7, #7]
}
 800b756:	4618      	mov	r0, r3
 800b758:	3720      	adds	r7, #32
 800b75a:	46bd      	mov	sp, r7
 800b75c:	bd80      	pop	{r7, pc}

0800b75e <aci_gatt_add_service>:
tBleStatus aci_gatt_add_service( uint8_t Service_UUID_Type,
                                 const Service_UUID_t* Service_UUID,
                                 uint8_t Service_Type,
                                 uint8_t Max_Attribute_Records,
                                 uint16_t* Service_Handle )
{
 800b75e:	b590      	push	{r4, r7, lr}
 800b760:	b0cf      	sub	sp, #316	; 0x13c
 800b762:	af00      	add	r7, sp, #0
 800b764:	4604      	mov	r4, r0
 800b766:	4638      	mov	r0, r7
 800b768:	6001      	str	r1, [r0, #0]
 800b76a:	4610      	mov	r0, r2
 800b76c:	4619      	mov	r1, r3
 800b76e:	1dfb      	adds	r3, r7, #7
 800b770:	4622      	mov	r2, r4
 800b772:	701a      	strb	r2, [r3, #0]
 800b774:	1dbb      	adds	r3, r7, #6
 800b776:	4602      	mov	r2, r0
 800b778:	701a      	strb	r2, [r3, #0]
 800b77a:	1d7b      	adds	r3, r7, #5
 800b77c:	460a      	mov	r2, r1
 800b77e:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_service_cp0 *cp0 = (aci_gatt_add_service_cp0*)(cmd_buffer);
 800b780:	f107 0310 	add.w	r3, r7, #16
 800b784:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  aci_gatt_add_service_cp1 *cp1 = (aci_gatt_add_service_cp1*)(cmd_buffer + 1 + (Service_UUID_Type == 1 ? 2 : (Service_UUID_Type == 2 ? 16 : 0)));
 800b788:	1dfb      	adds	r3, r7, #7
 800b78a:	781b      	ldrb	r3, [r3, #0]
 800b78c:	2b01      	cmp	r3, #1
 800b78e:	d007      	beq.n	800b7a0 <aci_gatt_add_service+0x42>
 800b790:	1dfb      	adds	r3, r7, #7
 800b792:	781b      	ldrb	r3, [r3, #0]
 800b794:	2b02      	cmp	r3, #2
 800b796:	d101      	bne.n	800b79c <aci_gatt_add_service+0x3e>
 800b798:	2311      	movs	r3, #17
 800b79a:	e002      	b.n	800b7a2 <aci_gatt_add_service+0x44>
 800b79c:	2301      	movs	r3, #1
 800b79e:	e000      	b.n	800b7a2 <aci_gatt_add_service+0x44>
 800b7a0:	2303      	movs	r3, #3
 800b7a2:	f107 0210 	add.w	r2, r7, #16
 800b7a6:	4413      	add	r3, r2
 800b7a8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  aci_gatt_add_service_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 800b7ac:	f107 030c 	add.w	r3, r7, #12
 800b7b0:	2203      	movs	r2, #3
 800b7b2:	2100      	movs	r1, #0
 800b7b4:	4618      	mov	r0, r3
 800b7b6:	f000 fbb5 	bl	800bf24 <Osal_MemSet>
  int index_input = 0;
 800b7ba:	2300      	movs	r3, #0
 800b7bc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Service_UUID_Type = Service_UUID_Type;
 800b7c0:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800b7c4:	1dfa      	adds	r2, r7, #7
 800b7c6:	7812      	ldrb	r2, [r2, #0]
 800b7c8:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800b7ca:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b7ce:	3301      	adds	r3, #1
 800b7d0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  /* var_len_data input */
  {
    uint8_t size;
    switch ( Service_UUID_Type )
 800b7d4:	1dfb      	adds	r3, r7, #7
 800b7d6:	781b      	ldrb	r3, [r3, #0]
 800b7d8:	2b01      	cmp	r3, #1
 800b7da:	d002      	beq.n	800b7e2 <aci_gatt_add_service+0x84>
 800b7dc:	2b02      	cmp	r3, #2
 800b7de:	d004      	beq.n	800b7ea <aci_gatt_add_service+0x8c>
 800b7e0:	e007      	b.n	800b7f2 <aci_gatt_add_service+0x94>
    {
      case 1: size = 2; break;
 800b7e2:	2302      	movs	r3, #2
 800b7e4:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
 800b7e8:	e005      	b.n	800b7f6 <aci_gatt_add_service+0x98>
      case 2: size = 16; break;
 800b7ea:	2310      	movs	r3, #16
 800b7ec:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
 800b7f0:	e001      	b.n	800b7f6 <aci_gatt_add_service+0x98>
      default: return BLE_STATUS_ERROR;
 800b7f2:	2347      	movs	r3, #71	; 0x47
 800b7f4:	e05d      	b.n	800b8b2 <aci_gatt_add_service+0x154>
    }
    Osal_MemCpy( (void*)&cp0->Service_UUID, (const void*)Service_UUID, size );
 800b7f6:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800b7fa:	1c58      	adds	r0, r3, #1
 800b7fc:	f897 2137 	ldrb.w	r2, [r7, #311]	; 0x137
 800b800:	463b      	mov	r3, r7
 800b802:	6819      	ldr	r1, [r3, #0]
 800b804:	f000 fb7e 	bl	800bf04 <Osal_MemCpy>
    index_input += size;
 800b808:	f897 3137 	ldrb.w	r3, [r7, #311]	; 0x137
 800b80c:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800b810:	4413      	add	r3, r2
 800b812:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp1->Service_Type = Service_Type;
 800b816:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b81a:	1dba      	adds	r2, r7, #6
 800b81c:	7812      	ldrb	r2, [r2, #0]
 800b81e:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 800b820:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b824:	3301      	adds	r3, #1
 800b826:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp1->Max_Attribute_Records = Max_Attribute_Records;
 800b82a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b82e:	1d7a      	adds	r2, r7, #5
 800b830:	7812      	ldrb	r2, [r2, #0]
 800b832:	705a      	strb	r2, [r3, #1]
    }
    index_input += 1;
 800b834:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b838:	3301      	adds	r3, #1
 800b83a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800b83e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800b842:	2218      	movs	r2, #24
 800b844:	2100      	movs	r1, #0
 800b846:	4618      	mov	r0, r3
 800b848:	f000 fb6c 	bl	800bf24 <Osal_MemSet>
  rq.ogf = 0x3f;
 800b84c:	233f      	movs	r3, #63	; 0x3f
 800b84e:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x102;
 800b852:	f44f 7381 	mov.w	r3, #258	; 0x102
 800b856:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800b85a:	f107 0310 	add.w	r3, r7, #16
 800b85e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800b862:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b866:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &resp;
 800b86a:	f107 030c 	add.w	r3, r7, #12
 800b86e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = sizeof(resp);
 800b872:	2303      	movs	r3, #3
 800b874:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800b878:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800b87c:	2100      	movs	r1, #0
 800b87e:	4618      	mov	r0, r3
 800b880:	f000 fbf8 	bl	800c074 <hci_send_req>
 800b884:	4603      	mov	r3, r0
 800b886:	2b00      	cmp	r3, #0
 800b888:	da01      	bge.n	800b88e <aci_gatt_add_service+0x130>
    return BLE_STATUS_TIMEOUT;
 800b88a:	23ff      	movs	r3, #255	; 0xff
 800b88c:	e011      	b.n	800b8b2 <aci_gatt_add_service+0x154>
  if ( resp.Status )
 800b88e:	f107 030c 	add.w	r3, r7, #12
 800b892:	781b      	ldrb	r3, [r3, #0]
 800b894:	2b00      	cmp	r3, #0
 800b896:	d003      	beq.n	800b8a0 <aci_gatt_add_service+0x142>
    return resp.Status;
 800b898:	f107 030c 	add.w	r3, r7, #12
 800b89c:	781b      	ldrb	r3, [r3, #0]
 800b89e:	e008      	b.n	800b8b2 <aci_gatt_add_service+0x154>
  *Service_Handle = resp.Service_Handle;
 800b8a0:	f107 030c 	add.w	r3, r7, #12
 800b8a4:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800b8a8:	b29a      	uxth	r2, r3
 800b8aa:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800b8ae:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 800b8b0:	2300      	movs	r3, #0
}
 800b8b2:	4618      	mov	r0, r3
 800b8b4:	f507 779e 	add.w	r7, r7, #316	; 0x13c
 800b8b8:	46bd      	mov	sp, r7
 800b8ba:	bd90      	pop	{r4, r7, pc}

0800b8bc <aci_gatt_add_char>:
                              uint8_t Security_Permissions,
                              uint8_t GATT_Evt_Mask,
                              uint8_t Enc_Key_Size,
                              uint8_t Is_Variable,
                              uint16_t* Char_Handle )
{
 800b8bc:	b590      	push	{r4, r7, lr}
 800b8be:	b0d1      	sub	sp, #324	; 0x144
 800b8c0:	af00      	add	r7, sp, #0
 800b8c2:	4604      	mov	r4, r0
 800b8c4:	4608      	mov	r0, r1
 800b8c6:	f107 0108 	add.w	r1, r7, #8
 800b8ca:	600a      	str	r2, [r1, #0]
 800b8cc:	4619      	mov	r1, r3
 800b8ce:	f107 030e 	add.w	r3, r7, #14
 800b8d2:	4622      	mov	r2, r4
 800b8d4:	801a      	strh	r2, [r3, #0]
 800b8d6:	f107 030d 	add.w	r3, r7, #13
 800b8da:	4602      	mov	r2, r0
 800b8dc:	701a      	strb	r2, [r3, #0]
 800b8de:	1dbb      	adds	r3, r7, #6
 800b8e0:	460a      	mov	r2, r1
 800b8e2:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_char_cp0 *cp0 = (aci_gatt_add_char_cp0*)(cmd_buffer);
 800b8e4:	f107 0318 	add.w	r3, r7, #24
 800b8e8:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  aci_gatt_add_char_cp1 *cp1 = (aci_gatt_add_char_cp1*)(cmd_buffer + 2 + 1 + (Char_UUID_Type == 1 ? 2 : (Char_UUID_Type == 2 ? 16 : 0)));
 800b8ec:	f107 030d 	add.w	r3, r7, #13
 800b8f0:	781b      	ldrb	r3, [r3, #0]
 800b8f2:	2b01      	cmp	r3, #1
 800b8f4:	d008      	beq.n	800b908 <aci_gatt_add_char+0x4c>
 800b8f6:	f107 030d 	add.w	r3, r7, #13
 800b8fa:	781b      	ldrb	r3, [r3, #0]
 800b8fc:	2b02      	cmp	r3, #2
 800b8fe:	d101      	bne.n	800b904 <aci_gatt_add_char+0x48>
 800b900:	2313      	movs	r3, #19
 800b902:	e002      	b.n	800b90a <aci_gatt_add_char+0x4e>
 800b904:	2303      	movs	r3, #3
 800b906:	e000      	b.n	800b90a <aci_gatt_add_char+0x4e>
 800b908:	2305      	movs	r3, #5
 800b90a:	f107 0218 	add.w	r2, r7, #24
 800b90e:	4413      	add	r3, r2
 800b910:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  aci_gatt_add_char_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 800b914:	f107 0314 	add.w	r3, r7, #20
 800b918:	2203      	movs	r2, #3
 800b91a:	2100      	movs	r1, #0
 800b91c:	4618      	mov	r0, r3
 800b91e:	f000 fb01 	bl	800bf24 <Osal_MemSet>
  int index_input = 0;
 800b922:	2300      	movs	r3, #0
 800b924:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Service_Handle = Service_Handle;
 800b928:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800b92c:	f107 020e 	add.w	r2, r7, #14
 800b930:	8812      	ldrh	r2, [r2, #0]
 800b932:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800b934:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800b938:	3302      	adds	r3, #2
 800b93a:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Char_UUID_Type = Char_UUID_Type;
 800b93e:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800b942:	f107 020d 	add.w	r2, r7, #13
 800b946:	7812      	ldrb	r2, [r2, #0]
 800b948:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800b94a:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800b94e:	3301      	adds	r3, #1
 800b950:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  /* var_len_data input */
  {
    uint8_t size;
    switch ( Char_UUID_Type )
 800b954:	f107 030d 	add.w	r3, r7, #13
 800b958:	781b      	ldrb	r3, [r3, #0]
 800b95a:	2b01      	cmp	r3, #1
 800b95c:	d002      	beq.n	800b964 <aci_gatt_add_char+0xa8>
 800b95e:	2b02      	cmp	r3, #2
 800b960:	d004      	beq.n	800b96c <aci_gatt_add_char+0xb0>
 800b962:	e007      	b.n	800b974 <aci_gatt_add_char+0xb8>
    {
      case 1: size = 2; break;
 800b964:	2302      	movs	r3, #2
 800b966:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
 800b96a:	e005      	b.n	800b978 <aci_gatt_add_char+0xbc>
      case 2: size = 16; break;
 800b96c:	2310      	movs	r3, #16
 800b96e:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
 800b972:	e001      	b.n	800b978 <aci_gatt_add_char+0xbc>
      default: return BLE_STATUS_ERROR;
 800b974:	2347      	movs	r3, #71	; 0x47
 800b976:	e086      	b.n	800ba86 <aci_gatt_add_char+0x1ca>
    }
    Osal_MemCpy( (void*)&cp0->Char_UUID, (const void*)Char_UUID, size );
 800b978:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800b97c:	1cd8      	adds	r0, r3, #3
 800b97e:	f897 213f 	ldrb.w	r2, [r7, #319]	; 0x13f
 800b982:	f107 0308 	add.w	r3, r7, #8
 800b986:	6819      	ldr	r1, [r3, #0]
 800b988:	f000 fabc 	bl	800bf04 <Osal_MemCpy>
    index_input += size;
 800b98c:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
 800b990:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 800b994:	4413      	add	r3, r2
 800b996:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Char_Value_Length = Char_Value_Length;
 800b99a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800b99e:	1dba      	adds	r2, r7, #6
 800b9a0:	8812      	ldrh	r2, [r2, #0]
 800b9a2:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 800b9a4:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800b9a8:	3302      	adds	r3, #2
 800b9aa:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Char_Properties = Char_Properties;
 800b9ae:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800b9b2:	f897 2150 	ldrb.w	r2, [r7, #336]	; 0x150
 800b9b6:	709a      	strb	r2, [r3, #2]
    }
    index_input += 1;
 800b9b8:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800b9bc:	3301      	adds	r3, #1
 800b9be:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Security_Permissions = Security_Permissions;
 800b9c2:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800b9c6:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 800b9ca:	70da      	strb	r2, [r3, #3]
    }
    index_input += 1;
 800b9cc:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800b9d0:	3301      	adds	r3, #1
 800b9d2:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->GATT_Evt_Mask = GATT_Evt_Mask;
 800b9d6:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800b9da:	f897 2158 	ldrb.w	r2, [r7, #344]	; 0x158
 800b9de:	711a      	strb	r2, [r3, #4]
    }
    index_input += 1;
 800b9e0:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800b9e4:	3301      	adds	r3, #1
 800b9e6:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Enc_Key_Size = Enc_Key_Size;
 800b9ea:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800b9ee:	f897 215c 	ldrb.w	r2, [r7, #348]	; 0x15c
 800b9f2:	715a      	strb	r2, [r3, #5]
    }
    index_input += 1;
 800b9f4:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800b9f8:	3301      	adds	r3, #1
 800b9fa:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Is_Variable = Is_Variable;
 800b9fe:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800ba02:	f897 2160 	ldrb.w	r2, [r7, #352]	; 0x160
 800ba06:	719a      	strb	r2, [r3, #6]
    }
    index_input += 1;
 800ba08:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800ba0c:	3301      	adds	r3, #1
 800ba0e:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800ba12:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800ba16:	2218      	movs	r2, #24
 800ba18:	2100      	movs	r1, #0
 800ba1a:	4618      	mov	r0, r3
 800ba1c:	f000 fa82 	bl	800bf24 <Osal_MemSet>
  rq.ogf = 0x3f;
 800ba20:	233f      	movs	r3, #63	; 0x3f
 800ba22:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
  rq.ocf = 0x104;
 800ba26:	f44f 7382 	mov.w	r3, #260	; 0x104
 800ba2a:	f8a7 311a 	strh.w	r3, [r7, #282]	; 0x11a
  rq.cparam = cmd_buffer;
 800ba2e:	f107 0318 	add.w	r3, r7, #24
 800ba32:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.clen = index_input;
 800ba36:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800ba3a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  rq.rparam = &resp;
 800ba3e:	f107 0314 	add.w	r3, r7, #20
 800ba42:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  rq.rlen = sizeof(resp);
 800ba46:	2303      	movs	r3, #3
 800ba48:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if ( hci_send_req(&rq, FALSE) < 0 )
 800ba4c:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800ba50:	2100      	movs	r1, #0
 800ba52:	4618      	mov	r0, r3
 800ba54:	f000 fb0e 	bl	800c074 <hci_send_req>
 800ba58:	4603      	mov	r3, r0
 800ba5a:	2b00      	cmp	r3, #0
 800ba5c:	da01      	bge.n	800ba62 <aci_gatt_add_char+0x1a6>
    return BLE_STATUS_TIMEOUT;
 800ba5e:	23ff      	movs	r3, #255	; 0xff
 800ba60:	e011      	b.n	800ba86 <aci_gatt_add_char+0x1ca>
  if ( resp.Status )
 800ba62:	f107 0314 	add.w	r3, r7, #20
 800ba66:	781b      	ldrb	r3, [r3, #0]
 800ba68:	2b00      	cmp	r3, #0
 800ba6a:	d003      	beq.n	800ba74 <aci_gatt_add_char+0x1b8>
    return resp.Status;
 800ba6c:	f107 0314 	add.w	r3, r7, #20
 800ba70:	781b      	ldrb	r3, [r3, #0]
 800ba72:	e008      	b.n	800ba86 <aci_gatt_add_char+0x1ca>
  *Char_Handle = resp.Char_Handle;
 800ba74:	f107 0314 	add.w	r3, r7, #20
 800ba78:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800ba7c:	b29a      	uxth	r2, r3
 800ba7e:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 800ba82:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 800ba84:	2300      	movs	r3, #0
}
 800ba86:	4618      	mov	r0, r3
 800ba88:	f507 77a2 	add.w	r7, r7, #324	; 0x144
 800ba8c:	46bd      	mov	sp, r7
 800ba8e:	bd90      	pop	{r4, r7, pc}

0800ba90 <aci_gatt_update_char_value>:
tBleStatus aci_gatt_update_char_value( uint16_t Service_Handle,
                                       uint16_t Char_Handle,
                                       uint8_t Val_Offset,
                                       uint8_t Char_Value_Length,
                                       const uint8_t* Char_Value )
{
 800ba90:	b5b0      	push	{r4, r5, r7, lr}
 800ba92:	b0cc      	sub	sp, #304	; 0x130
 800ba94:	af00      	add	r7, sp, #0
 800ba96:	4605      	mov	r5, r0
 800ba98:	460c      	mov	r4, r1
 800ba9a:	4610      	mov	r0, r2
 800ba9c:	4619      	mov	r1, r3
 800ba9e:	1dbb      	adds	r3, r7, #6
 800baa0:	462a      	mov	r2, r5
 800baa2:	801a      	strh	r2, [r3, #0]
 800baa4:	1d3b      	adds	r3, r7, #4
 800baa6:	4622      	mov	r2, r4
 800baa8:	801a      	strh	r2, [r3, #0]
 800baaa:	1cfb      	adds	r3, r7, #3
 800baac:	4602      	mov	r2, r0
 800baae:	701a      	strb	r2, [r3, #0]
 800bab0:	1cbb      	adds	r3, r7, #2
 800bab2:	460a      	mov	r2, r1
 800bab4:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_update_char_value_cp0 *cp0 = (aci_gatt_update_char_value_cp0*)(cmd_buffer);
 800bab6:	f107 0310 	add.w	r3, r7, #16
 800baba:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800babe:	f107 030f 	add.w	r3, r7, #15
 800bac2:	2200      	movs	r2, #0
 800bac4:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800bac6:	2300      	movs	r3, #0
 800bac8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Service_Handle = Service_Handle;
 800bacc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800bad0:	1dba      	adds	r2, r7, #6
 800bad2:	8812      	ldrh	r2, [r2, #0]
 800bad4:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800bad6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800bada:	3302      	adds	r3, #2
 800badc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Char_Handle = Char_Handle;
 800bae0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800bae4:	1d3a      	adds	r2, r7, #4
 800bae6:	8812      	ldrh	r2, [r2, #0]
 800bae8:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 800baea:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800baee:	3302      	adds	r3, #2
 800baf0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Val_Offset = Val_Offset;
 800baf4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800baf8:	1cfa      	adds	r2, r7, #3
 800bafa:	7812      	ldrb	r2, [r2, #0]
 800bafc:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 800bafe:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800bb02:	3301      	adds	r3, #1
 800bb04:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Char_Value_Length = Char_Value_Length;
 800bb08:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800bb0c:	1cba      	adds	r2, r7, #2
 800bb0e:	7812      	ldrb	r2, [r2, #0]
 800bb10:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 800bb12:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800bb16:	3301      	adds	r3, #1
 800bb18:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->Char_Value, (const void*)Char_Value, Char_Value_Length );
 800bb1c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800bb20:	1d98      	adds	r0, r3, #6
 800bb22:	1cbb      	adds	r3, r7, #2
 800bb24:	781b      	ldrb	r3, [r3, #0]
 800bb26:	461a      	mov	r2, r3
 800bb28:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 800bb2c:	f000 f9ea 	bl	800bf04 <Osal_MemCpy>
  index_input += Char_Value_Length;
 800bb30:	1cbb      	adds	r3, r7, #2
 800bb32:	781b      	ldrb	r3, [r3, #0]
 800bb34:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800bb38:	4413      	add	r3, r2
 800bb3a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800bb3e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800bb42:	2218      	movs	r2, #24
 800bb44:	2100      	movs	r1, #0
 800bb46:	4618      	mov	r0, r3
 800bb48:	f000 f9ec 	bl	800bf24 <Osal_MemSet>
  rq.ogf = 0x3f;
 800bb4c:	233f      	movs	r3, #63	; 0x3f
 800bb4e:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x106;
 800bb52:	f44f 7383 	mov.w	r3, #262	; 0x106
 800bb56:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800bb5a:	f107 0310 	add.w	r3, r7, #16
 800bb5e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800bb62:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800bb66:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800bb6a:	f107 030f 	add.w	r3, r7, #15
 800bb6e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800bb72:	2301      	movs	r3, #1
 800bb74:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800bb78:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800bb7c:	2100      	movs	r1, #0
 800bb7e:	4618      	mov	r0, r3
 800bb80:	f000 fa78 	bl	800c074 <hci_send_req>
 800bb84:	4603      	mov	r3, r0
 800bb86:	2b00      	cmp	r3, #0
 800bb88:	da01      	bge.n	800bb8e <aci_gatt_update_char_value+0xfe>
    return BLE_STATUS_TIMEOUT;
 800bb8a:	23ff      	movs	r3, #255	; 0xff
 800bb8c:	e002      	b.n	800bb94 <aci_gatt_update_char_value+0x104>
  return status;
 800bb8e:	f107 030f 	add.w	r3, r7, #15
 800bb92:	781b      	ldrb	r3, [r3, #0]
}
 800bb94:	4618      	mov	r0, r3
 800bb96:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800bb9a:	46bd      	mov	sp, r7
 800bb9c:	bdb0      	pop	{r4, r5, r7, pc}

0800bb9e <aci_hal_write_config_data>:
}

tBleStatus aci_hal_write_config_data( uint8_t Offset,
                                      uint8_t Length,
                                      const uint8_t* Value )
{
 800bb9e:	b580      	push	{r7, lr}
 800bba0:	b0cc      	sub	sp, #304	; 0x130
 800bba2:	af00      	add	r7, sp, #0
 800bba4:	463b      	mov	r3, r7
 800bba6:	601a      	str	r2, [r3, #0]
 800bba8:	1dfb      	adds	r3, r7, #7
 800bbaa:	4602      	mov	r2, r0
 800bbac:	701a      	strb	r2, [r3, #0]
 800bbae:	1dbb      	adds	r3, r7, #6
 800bbb0:	460a      	mov	r2, r1
 800bbb2:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_write_config_data_cp0 *cp0 = (aci_hal_write_config_data_cp0*)(cmd_buffer);
 800bbb4:	f107 0310 	add.w	r3, r7, #16
 800bbb8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800bbbc:	f107 030f 	add.w	r3, r7, #15
 800bbc0:	2200      	movs	r2, #0
 800bbc2:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800bbc4:	2300      	movs	r3, #0
 800bbc6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Offset = Offset;
 800bbca:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800bbce:	1dfa      	adds	r2, r7, #7
 800bbd0:	7812      	ldrb	r2, [r2, #0]
 800bbd2:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800bbd4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800bbd8:	3301      	adds	r3, #1
 800bbda:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Length = Length;
 800bbde:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800bbe2:	1dba      	adds	r2, r7, #6
 800bbe4:	7812      	ldrb	r2, [r2, #0]
 800bbe6:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800bbe8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800bbec:	3301      	adds	r3, #1
 800bbee:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->Value, (const void*)Value, Length );
 800bbf2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800bbf6:	1c98      	adds	r0, r3, #2
 800bbf8:	1dbb      	adds	r3, r7, #6
 800bbfa:	781a      	ldrb	r2, [r3, #0]
 800bbfc:	463b      	mov	r3, r7
 800bbfe:	6819      	ldr	r1, [r3, #0]
 800bc00:	f000 f980 	bl	800bf04 <Osal_MemCpy>
  index_input += Length;
 800bc04:	1dbb      	adds	r3, r7, #6
 800bc06:	781b      	ldrb	r3, [r3, #0]
 800bc08:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800bc0c:	4413      	add	r3, r2
 800bc0e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800bc12:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800bc16:	2218      	movs	r2, #24
 800bc18:	2100      	movs	r1, #0
 800bc1a:	4618      	mov	r0, r3
 800bc1c:	f000 f982 	bl	800bf24 <Osal_MemSet>
  rq.ogf = 0x3f;
 800bc20:	233f      	movs	r3, #63	; 0x3f
 800bc22:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x00c;
 800bc26:	230c      	movs	r3, #12
 800bc28:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800bc2c:	f107 0310 	add.w	r3, r7, #16
 800bc30:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800bc34:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800bc38:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800bc3c:	f107 030f 	add.w	r3, r7, #15
 800bc40:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800bc44:	2301      	movs	r3, #1
 800bc46:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800bc4a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800bc4e:	2100      	movs	r1, #0
 800bc50:	4618      	mov	r0, r3
 800bc52:	f000 fa0f 	bl	800c074 <hci_send_req>
 800bc56:	4603      	mov	r3, r0
 800bc58:	2b00      	cmp	r3, #0
 800bc5a:	da01      	bge.n	800bc60 <aci_hal_write_config_data+0xc2>
    return BLE_STATUS_TIMEOUT;
 800bc5c:	23ff      	movs	r3, #255	; 0xff
 800bc5e:	e002      	b.n	800bc66 <aci_hal_write_config_data+0xc8>
  return status;
 800bc60:	f107 030f 	add.w	r3, r7, #15
 800bc64:	781b      	ldrb	r3, [r3, #0]
}
 800bc66:	4618      	mov	r0, r3
 800bc68:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800bc6c:	46bd      	mov	sp, r7
 800bc6e:	bd80      	pop	{r7, pc}

0800bc70 <aci_hal_set_tx_power_level>:
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_tx_power_level( uint8_t En_High_Power,
                                       uint8_t PA_Level )
{
 800bc70:	b580      	push	{r7, lr}
 800bc72:	b0cc      	sub	sp, #304	; 0x130
 800bc74:	af00      	add	r7, sp, #0
 800bc76:	4602      	mov	r2, r0
 800bc78:	1dfb      	adds	r3, r7, #7
 800bc7a:	701a      	strb	r2, [r3, #0]
 800bc7c:	1dbb      	adds	r3, r7, #6
 800bc7e:	460a      	mov	r2, r1
 800bc80:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_tx_power_level_cp0 *cp0 = (aci_hal_set_tx_power_level_cp0*)(cmd_buffer);
 800bc82:	f107 0310 	add.w	r3, r7, #16
 800bc86:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800bc8a:	f107 030f 	add.w	r3, r7, #15
 800bc8e:	2200      	movs	r2, #0
 800bc90:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800bc92:	2300      	movs	r3, #0
 800bc94:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->En_High_Power = En_High_Power;
 800bc98:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800bc9c:	1dfa      	adds	r2, r7, #7
 800bc9e:	7812      	ldrb	r2, [r2, #0]
 800bca0:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800bca2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800bca6:	3301      	adds	r3, #1
 800bca8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->PA_Level = PA_Level;
 800bcac:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800bcb0:	1dba      	adds	r2, r7, #6
 800bcb2:	7812      	ldrb	r2, [r2, #0]
 800bcb4:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800bcb6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800bcba:	3301      	adds	r3, #1
 800bcbc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800bcc0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800bcc4:	2218      	movs	r2, #24
 800bcc6:	2100      	movs	r1, #0
 800bcc8:	4618      	mov	r0, r3
 800bcca:	f000 f92b 	bl	800bf24 <Osal_MemSet>
  rq.ogf = 0x3f;
 800bcce:	233f      	movs	r3, #63	; 0x3f
 800bcd0:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x00f;
 800bcd4:	230f      	movs	r3, #15
 800bcd6:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800bcda:	f107 0310 	add.w	r3, r7, #16
 800bcde:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800bce2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800bce6:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800bcea:	f107 030f 	add.w	r3, r7, #15
 800bcee:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800bcf2:	2301      	movs	r3, #1
 800bcf4:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800bcf8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800bcfc:	2100      	movs	r1, #0
 800bcfe:	4618      	mov	r0, r3
 800bd00:	f000 f9b8 	bl	800c074 <hci_send_req>
 800bd04:	4603      	mov	r3, r0
 800bd06:	2b00      	cmp	r3, #0
 800bd08:	da01      	bge.n	800bd0e <aci_hal_set_tx_power_level+0x9e>
    return BLE_STATUS_TIMEOUT;
 800bd0a:	23ff      	movs	r3, #255	; 0xff
 800bd0c:	e002      	b.n	800bd14 <aci_hal_set_tx_power_level+0xa4>
  return status;
 800bd0e:	f107 030f 	add.w	r3, r7, #15
 800bd12:	781b      	ldrb	r3, [r3, #0]
}
 800bd14:	4618      	mov	r0, r3
 800bd16:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800bd1a:	46bd      	mov	sp, r7
 800bd1c:	bd80      	pop	{r7, pc}

0800bd1e <hci_reset>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus hci_reset( void )
{
 800bd1e:	b580      	push	{r7, lr}
 800bd20:	b088      	sub	sp, #32
 800bd22:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 800bd24:	2300      	movs	r3, #0
 800bd26:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800bd28:	f107 0308 	add.w	r3, r7, #8
 800bd2c:	2218      	movs	r2, #24
 800bd2e:	2100      	movs	r1, #0
 800bd30:	4618      	mov	r0, r3
 800bd32:	f000 f8f7 	bl	800bf24 <Osal_MemSet>
  rq.ogf = 0x03;
 800bd36:	2303      	movs	r3, #3
 800bd38:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x003;
 800bd3a:	2303      	movs	r3, #3
 800bd3c:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 800bd3e:	1dfb      	adds	r3, r7, #7
 800bd40:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 800bd42:	2301      	movs	r3, #1
 800bd44:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 800bd46:	f107 0308 	add.w	r3, r7, #8
 800bd4a:	2100      	movs	r1, #0
 800bd4c:	4618      	mov	r0, r3
 800bd4e:	f000 f991 	bl	800c074 <hci_send_req>
 800bd52:	4603      	mov	r3, r0
 800bd54:	2b00      	cmp	r3, #0
 800bd56:	da01      	bge.n	800bd5c <hci_reset+0x3e>
    return BLE_STATUS_TIMEOUT;
 800bd58:	23ff      	movs	r3, #255	; 0xff
 800bd5a:	e000      	b.n	800bd5e <hci_reset+0x40>
  return status;
 800bd5c:	79fb      	ldrb	r3, [r7, #7]
}
 800bd5e:	4618      	mov	r0, r3
 800bd60:	3720      	adds	r7, #32
 800bd62:	46bd      	mov	sp, r7
 800bd64:	bd80      	pop	{r7, pc}

0800bd66 <hci_le_read_phy>:
}

tBleStatus hci_le_read_phy( uint16_t Connection_Handle,
                            uint8_t* TX_PHY,
                            uint8_t* RX_PHY )
{
 800bd66:	b580      	push	{r7, lr}
 800bd68:	b0ce      	sub	sp, #312	; 0x138
 800bd6a:	af00      	add	r7, sp, #0
 800bd6c:	f107 0308 	add.w	r3, r7, #8
 800bd70:	6019      	str	r1, [r3, #0]
 800bd72:	1d3b      	adds	r3, r7, #4
 800bd74:	601a      	str	r2, [r3, #0]
 800bd76:	f107 030e 	add.w	r3, r7, #14
 800bd7a:	4602      	mov	r2, r0
 800bd7c:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  hci_le_read_phy_cp0 *cp0 = (hci_le_read_phy_cp0*)(cmd_buffer);
 800bd7e:	f107 0318 	add.w	r3, r7, #24
 800bd82:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  hci_le_read_phy_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 800bd86:	f107 0310 	add.w	r3, r7, #16
 800bd8a:	2205      	movs	r2, #5
 800bd8c:	2100      	movs	r1, #0
 800bd8e:	4618      	mov	r0, r3
 800bd90:	f000 f8c8 	bl	800bf24 <Osal_MemSet>
  int index_input = 0;
 800bd94:	2300      	movs	r3, #0
 800bd96:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Connection_Handle = Connection_Handle;
 800bd9a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800bd9e:	f107 020e 	add.w	r2, r7, #14
 800bda2:	8812      	ldrh	r2, [r2, #0]
 800bda4:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800bda6:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800bdaa:	3302      	adds	r3, #2
 800bdac:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800bdb0:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800bdb4:	2218      	movs	r2, #24
 800bdb6:	2100      	movs	r1, #0
 800bdb8:	4618      	mov	r0, r3
 800bdba:	f000 f8b3 	bl	800bf24 <Osal_MemSet>
  rq.ogf = 0x08;
 800bdbe:	2308      	movs	r3, #8
 800bdc0:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
  rq.ocf = 0x030;
 800bdc4:	2330      	movs	r3, #48	; 0x30
 800bdc6:	f8a7 311a 	strh.w	r3, [r7, #282]	; 0x11a
  rq.cparam = cmd_buffer;
 800bdca:	f107 0318 	add.w	r3, r7, #24
 800bdce:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.clen = index_input;
 800bdd2:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800bdd6:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  rq.rparam = &resp;
 800bdda:	f107 0310 	add.w	r3, r7, #16
 800bdde:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  rq.rlen = sizeof(resp);
 800bde2:	2305      	movs	r3, #5
 800bde4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if ( hci_send_req(&rq, FALSE) < 0 )
 800bde8:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800bdec:	2100      	movs	r1, #0
 800bdee:	4618      	mov	r0, r3
 800bdf0:	f000 f940 	bl	800c074 <hci_send_req>
 800bdf4:	4603      	mov	r3, r0
 800bdf6:	2b00      	cmp	r3, #0
 800bdf8:	da01      	bge.n	800bdfe <hci_le_read_phy+0x98>
    return BLE_STATUS_TIMEOUT;
 800bdfa:	23ff      	movs	r3, #255	; 0xff
 800bdfc:	e016      	b.n	800be2c <hci_le_read_phy+0xc6>
  if ( resp.Status )
 800bdfe:	f107 0310 	add.w	r3, r7, #16
 800be02:	781b      	ldrb	r3, [r3, #0]
 800be04:	2b00      	cmp	r3, #0
 800be06:	d003      	beq.n	800be10 <hci_le_read_phy+0xaa>
    return resp.Status;
 800be08:	f107 0310 	add.w	r3, r7, #16
 800be0c:	781b      	ldrb	r3, [r3, #0]
 800be0e:	e00d      	b.n	800be2c <hci_le_read_phy+0xc6>
  *TX_PHY = resp.TX_PHY;
 800be10:	f107 0310 	add.w	r3, r7, #16
 800be14:	78da      	ldrb	r2, [r3, #3]
 800be16:	f107 0308 	add.w	r3, r7, #8
 800be1a:	681b      	ldr	r3, [r3, #0]
 800be1c:	701a      	strb	r2, [r3, #0]
  *RX_PHY = resp.RX_PHY;
 800be1e:	f107 0310 	add.w	r3, r7, #16
 800be22:	791a      	ldrb	r2, [r3, #4]
 800be24:	1d3b      	adds	r3, r7, #4
 800be26:	681b      	ldr	r3, [r3, #0]
 800be28:	701a      	strb	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 800be2a:	2300      	movs	r3, #0
}
 800be2c:	4618      	mov	r0, r3
 800be2e:	f507 779c 	add.w	r7, r7, #312	; 0x138
 800be32:	46bd      	mov	sp, r7
 800be34:	bd80      	pop	{r7, pc}

0800be36 <hci_le_set_default_phy>:

tBleStatus hci_le_set_default_phy( uint8_t ALL_PHYS,
                                   uint8_t TX_PHYS,
                                   uint8_t RX_PHYS )
{
 800be36:	b590      	push	{r4, r7, lr}
 800be38:	b0cd      	sub	sp, #308	; 0x134
 800be3a:	af00      	add	r7, sp, #0
 800be3c:	4604      	mov	r4, r0
 800be3e:	4608      	mov	r0, r1
 800be40:	4611      	mov	r1, r2
 800be42:	1dfb      	adds	r3, r7, #7
 800be44:	4622      	mov	r2, r4
 800be46:	701a      	strb	r2, [r3, #0]
 800be48:	1dbb      	adds	r3, r7, #6
 800be4a:	4602      	mov	r2, r0
 800be4c:	701a      	strb	r2, [r3, #0]
 800be4e:	1d7b      	adds	r3, r7, #5
 800be50:	460a      	mov	r2, r1
 800be52:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  hci_le_set_default_phy_cp0 *cp0 = (hci_le_set_default_phy_cp0*)(cmd_buffer);
 800be54:	f107 0310 	add.w	r3, r7, #16
 800be58:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800be5c:	f107 030f 	add.w	r3, r7, #15
 800be60:	2200      	movs	r2, #0
 800be62:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800be64:	2300      	movs	r3, #0
 800be66:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->ALL_PHYS = ALL_PHYS;
 800be6a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800be6e:	1dfa      	adds	r2, r7, #7
 800be70:	7812      	ldrb	r2, [r2, #0]
 800be72:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800be74:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800be78:	3301      	adds	r3, #1
 800be7a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->TX_PHYS = TX_PHYS;
 800be7e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800be82:	1dba      	adds	r2, r7, #6
 800be84:	7812      	ldrb	r2, [r2, #0]
 800be86:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800be88:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800be8c:	3301      	adds	r3, #1
 800be8e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->RX_PHYS = RX_PHYS;
 800be92:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800be96:	1d7a      	adds	r2, r7, #5
 800be98:	7812      	ldrb	r2, [r2, #0]
 800be9a:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800be9c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800bea0:	3301      	adds	r3, #1
 800bea2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800bea6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800beaa:	2218      	movs	r2, #24
 800beac:	2100      	movs	r1, #0
 800beae:	4618      	mov	r0, r3
 800beb0:	f000 f838 	bl	800bf24 <Osal_MemSet>
  rq.ogf = 0x08;
 800beb4:	2308      	movs	r3, #8
 800beb6:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x031;
 800beba:	2331      	movs	r3, #49	; 0x31
 800bebc:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800bec0:	f107 0310 	add.w	r3, r7, #16
 800bec4:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800bec8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800becc:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800bed0:	f107 030f 	add.w	r3, r7, #15
 800bed4:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800bed8:	2301      	movs	r3, #1
 800beda:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800bede:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800bee2:	2100      	movs	r1, #0
 800bee4:	4618      	mov	r0, r3
 800bee6:	f000 f8c5 	bl	800c074 <hci_send_req>
 800beea:	4603      	mov	r3, r0
 800beec:	2b00      	cmp	r3, #0
 800beee:	da01      	bge.n	800bef4 <hci_le_set_default_phy+0xbe>
    return BLE_STATUS_TIMEOUT;
 800bef0:	23ff      	movs	r3, #255	; 0xff
 800bef2:	e002      	b.n	800befa <hci_le_set_default_phy+0xc4>
  return status;
 800bef4:	f107 030f 	add.w	r3, r7, #15
 800bef8:	781b      	ldrb	r3, [r3, #0]
}
 800befa:	4618      	mov	r0, r3
 800befc:	f507 779a 	add.w	r7, r7, #308	; 0x134
 800bf00:	46bd      	mov	sp, r7
 800bf02:	bd90      	pop	{r4, r7, pc}

0800bf04 <Osal_MemCpy>:
 * Osal_MemCpy
 * 
 */
 
void* Osal_MemCpy( void *dest, const void *src, unsigned int size )
{
 800bf04:	b580      	push	{r7, lr}
 800bf06:	b084      	sub	sp, #16
 800bf08:	af00      	add	r7, sp, #0
 800bf0a:	60f8      	str	r0, [r7, #12]
 800bf0c:	60b9      	str	r1, [r7, #8]
 800bf0e:	607a      	str	r2, [r7, #4]
  return memcpy( dest, src, size ); 
 800bf10:	687a      	ldr	r2, [r7, #4]
 800bf12:	68b9      	ldr	r1, [r7, #8]
 800bf14:	68f8      	ldr	r0, [r7, #12]
 800bf16:	f005 fe39 	bl	8011b8c <memcpy>
 800bf1a:	4603      	mov	r3, r0
}
 800bf1c:	4618      	mov	r0, r3
 800bf1e:	3710      	adds	r7, #16
 800bf20:	46bd      	mov	sp, r7
 800bf22:	bd80      	pop	{r7, pc}

0800bf24 <Osal_MemSet>:
 * Osal_MemSet
 * 
 */
 
void* Osal_MemSet( void *ptr, int value, unsigned int size )
{
 800bf24:	b580      	push	{r7, lr}
 800bf26:	b084      	sub	sp, #16
 800bf28:	af00      	add	r7, sp, #0
 800bf2a:	60f8      	str	r0, [r7, #12]
 800bf2c:	60b9      	str	r1, [r7, #8]
 800bf2e:	607a      	str	r2, [r7, #4]
  return memset( ptr, value, size );
 800bf30:	687a      	ldr	r2, [r7, #4]
 800bf32:	68b9      	ldr	r1, [r7, #8]
 800bf34:	68f8      	ldr	r0, [r7, #12]
 800bf36:	f005 fe34 	bl	8011ba2 <memset>
 800bf3a:	4603      	mov	r3, r0
}
 800bf3c:	4618      	mov	r0, r3
 800bf3e:	3710      	adds	r7, #16
 800bf40:	46bd      	mov	sp, r7
 800bf42:	bd80      	pop	{r7, pc}

0800bf44 <SHCI_C2_BLE_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_BLE_Init( SHCI_C2_Ble_Init_Cmd_Packet_t *pCmdPacket )
{
 800bf44:	b580      	push	{r7, lr}
 800bf46:	b088      	sub	sp, #32
 800bf48:	af00      	add	r7, sp, #0
 800bf4a:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CS_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 800bf4c:	f107 030c 	add.w	r3, r7, #12
 800bf50:	61fb      	str	r3, [r7, #28]

 shci_send( SHCI_OPCODE_C2_BLE_INIT,
            sizeof( SHCI_C2_Ble_Init_Cmd_Param_t ),
            (uint8_t*)&pCmdPacket->Param,
 800bf52:	687b      	ldr	r3, [r7, #4]
 800bf54:	f103 020c 	add.w	r2, r3, #12
 shci_send( SHCI_OPCODE_C2_BLE_INIT,
 800bf58:	69fb      	ldr	r3, [r7, #28]
 800bf5a:	2121      	movs	r1, #33	; 0x21
 800bf5c:	f64f 4066 	movw	r0, #64614	; 0xfc66
 800bf60:	f000 fa1e 	bl	800c3a0 <shci_send>
            p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 800bf64:	69fb      	ldr	r3, [r7, #28]
 800bf66:	330b      	adds	r3, #11
 800bf68:	78db      	ldrb	r3, [r3, #3]
}
 800bf6a:	4618      	mov	r0, r3
 800bf6c:	3720      	adds	r7, #32
 800bf6e:	46bd      	mov	sp, r7
 800bf70:	bd80      	pop	{r7, pc}

0800bf72 <SHCI_C2_DEBUG_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_DEBUG_Init( SHCI_C2_DEBUG_Init_Cmd_Packet_t *pCmdPacket  )
{
 800bf72:	b580      	push	{r7, lr}
 800bf74:	b088      	sub	sp, #32
 800bf76:	af00      	add	r7, sp, #0
 800bf78:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CS_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 800bf7a:	f107 030c 	add.w	r3, r7, #12
 800bf7e:	61fb      	str	r3, [r7, #28]

  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
             sizeof( SHCI_C2_DEBUG_init_Cmd_Param_t ),
             (uint8_t*)&pCmdPacket->Param,
 800bf80:	687b      	ldr	r3, [r7, #4]
 800bf82:	f103 020c 	add.w	r2, r3, #12
  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
 800bf86:	69fb      	ldr	r3, [r7, #28]
 800bf88:	210f      	movs	r1, #15
 800bf8a:	f64f 4068 	movw	r0, #64616	; 0xfc68
 800bf8e:	f000 fa07 	bl	800c3a0 <shci_send>
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 800bf92:	69fb      	ldr	r3, [r7, #28]
 800bf94:	330b      	adds	r3, #11
 800bf96:	78db      	ldrb	r3, [r3, #3]
}
 800bf98:	4618      	mov	r0, r3
 800bf9a:	3720      	adds	r7, #32
 800bf9c:	46bd      	mov	sp, r7
 800bf9e:	bd80      	pop	{r7, pc}

0800bfa0 <hci_init>:
static void TlEvtReceived(TL_EvtPacket_t *hcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void hci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 800bfa0:	b580      	push	{r7, lr}
 800bfa2:	b082      	sub	sp, #8
 800bfa4:	af00      	add	r7, sp, #0
 800bfa6:	6078      	str	r0, [r7, #4]
 800bfa8:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((HCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 800bfaa:	683b      	ldr	r3, [r7, #0]
 800bfac:	685b      	ldr	r3, [r3, #4]
 800bfae:	4a08      	ldr	r2, [pc, #32]	; (800bfd0 <hci_init+0x30>)
 800bfb0:	6013      	str	r3, [r2, #0]
  hciContext.UserEvtRx = UserEvtRx;
 800bfb2:	4a08      	ldr	r2, [pc, #32]	; (800bfd4 <hci_init+0x34>)
 800bfb4:	687b      	ldr	r3, [r7, #4]
 800bfb6:	61d3      	str	r3, [r2, #28]

  hci_register_io_bus (&hciContext.io);
 800bfb8:	4806      	ldr	r0, [pc, #24]	; (800bfd4 <hci_init+0x34>)
 800bfba:	f000 f973 	bl	800c2a4 <hci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((HCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 800bfbe:	683b      	ldr	r3, [r7, #0]
 800bfc0:	681b      	ldr	r3, [r3, #0]
 800bfc2:	4618      	mov	r0, r3
 800bfc4:	f000 f8d4 	bl	800c170 <TlInit>

  return;
 800bfc8:	bf00      	nop
}
 800bfca:	3708      	adds	r7, #8
 800bfcc:	46bd      	mov	sp, r7
 800bfce:	bd80      	pop	{r7, pc}
 800bfd0:	20000418 	.word	0x20000418
 800bfd4:	200003f0 	.word	0x200003f0

0800bfd8 <hci_user_evt_proc>:

void hci_user_evt_proc(void)
{
 800bfd8:	b580      	push	{r7, lr}
 800bfda:	b084      	sub	sp, #16
 800bfdc:	af00      	add	r7, sp, #0
  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 800bfde:	4822      	ldr	r0, [pc, #136]	; (800c068 <hci_user_evt_proc+0x90>)
 800bfe0:	f000 ff04 	bl	800cdec <LST_is_empty>
 800bfe4:	4603      	mov	r3, r0
 800bfe6:	2b00      	cmp	r3, #0
 800bfe8:	d12b      	bne.n	800c042 <hci_user_evt_proc+0x6a>
 800bfea:	4b20      	ldr	r3, [pc, #128]	; (800c06c <hci_user_evt_proc+0x94>)
 800bfec:	781b      	ldrb	r3, [r3, #0]
 800bfee:	2b00      	cmp	r3, #0
 800bff0:	d027      	beq.n	800c042 <hci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &HciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 800bff2:	f107 030c 	add.w	r3, r7, #12
 800bff6:	4619      	mov	r1, r3
 800bff8:	481b      	ldr	r0, [pc, #108]	; (800c068 <hci_user_evt_proc+0x90>)
 800bffa:	f000 ff7e 	bl	800cefa <LST_remove_head>

    if (hciContext.UserEvtRx != NULL)
 800bffe:	4b1c      	ldr	r3, [pc, #112]	; (800c070 <hci_user_evt_proc+0x98>)
 800c000:	69db      	ldr	r3, [r3, #28]
 800c002:	2b00      	cmp	r3, #0
 800c004:	d00c      	beq.n	800c020 <hci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 800c006:	68fb      	ldr	r3, [r7, #12]
 800c008:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = HCI_TL_UserEventFlow_Enable;
 800c00a:	2301      	movs	r3, #1
 800c00c:	713b      	strb	r3, [r7, #4]
      hciContext.UserEvtRx((void *)&UserEvtRxParam);
 800c00e:	4b18      	ldr	r3, [pc, #96]	; (800c070 <hci_user_evt_proc+0x98>)
 800c010:	69db      	ldr	r3, [r3, #28]
 800c012:	1d3a      	adds	r2, r7, #4
 800c014:	4610      	mov	r0, r2
 800c016:	4798      	blx	r3
      UserEventFlow = UserEvtRxParam.status;
 800c018:	793a      	ldrb	r2, [r7, #4]
 800c01a:	4b14      	ldr	r3, [pc, #80]	; (800c06c <hci_user_evt_proc+0x94>)
 800c01c:	701a      	strb	r2, [r3, #0]
 800c01e:	e002      	b.n	800c026 <hci_user_evt_proc+0x4e>
    }
    else
    {
      UserEventFlow = HCI_TL_UserEventFlow_Enable;
 800c020:	4b12      	ldr	r3, [pc, #72]	; (800c06c <hci_user_evt_proc+0x94>)
 800c022:	2201      	movs	r2, #1
 800c024:	701a      	strb	r2, [r3, #0]
    }

    if(UserEventFlow != HCI_TL_UserEventFlow_Disable)
 800c026:	4b11      	ldr	r3, [pc, #68]	; (800c06c <hci_user_evt_proc+0x94>)
 800c028:	781b      	ldrb	r3, [r3, #0]
 800c02a:	2b00      	cmp	r3, #0
 800c02c:	d004      	beq.n	800c038 <hci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 800c02e:	68fb      	ldr	r3, [r7, #12]
 800c030:	4618      	mov	r0, r3
 800c032:	f000 fc03 	bl	800c83c <TL_MM_EvtDone>
 800c036:	e004      	b.n	800c042 <hci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &HciAsynchEventQueue, (tListNode *)phcievtbuffer );
 800c038:	68fb      	ldr	r3, [r7, #12]
 800c03a:	4619      	mov	r1, r3
 800c03c:	480a      	ldr	r0, [pc, #40]	; (800c068 <hci_user_evt_proc+0x90>)
 800c03e:	f000 fef5 	bl	800ce2c <LST_insert_head>
    }
  }

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 800c042:	4809      	ldr	r0, [pc, #36]	; (800c068 <hci_user_evt_proc+0x90>)
 800c044:	f000 fed2 	bl	800cdec <LST_is_empty>
 800c048:	4603      	mov	r3, r0
 800c04a:	2b00      	cmp	r3, #0
 800c04c:	d107      	bne.n	800c05e <hci_user_evt_proc+0x86>
 800c04e:	4b07      	ldr	r3, [pc, #28]	; (800c06c <hci_user_evt_proc+0x94>)
 800c050:	781b      	ldrb	r3, [r3, #0]
 800c052:	2b00      	cmp	r3, #0
 800c054:	d003      	beq.n	800c05e <hci_user_evt_proc+0x86>
  {
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue);
 800c056:	4804      	ldr	r0, [pc, #16]	; (800c068 <hci_user_evt_proc+0x90>)
 800c058:	f7f5 f9cc 	bl	80013f4 <hci_notify_asynch_evt>
  }


  return;
 800c05c:	bf00      	nop
 800c05e:	bf00      	nop
}
 800c060:	3710      	adds	r7, #16
 800c062:	46bd      	mov	sp, r7
 800c064:	bd80      	pop	{r7, pc}
 800c066:	bf00      	nop
 800c068:	2000038c 	.word	0x2000038c
 800c06c:	20000398 	.word	0x20000398
 800c070:	200003f0 	.word	0x200003f0

0800c074 <hci_send_req>:

  return;
}

int hci_send_req(struct hci_request *p_cmd, uint8_t async)
{
 800c074:	b580      	push	{r7, lr}
 800c076:	b088      	sub	sp, #32
 800c078:	af00      	add	r7, sp, #0
 800c07a:	6078      	str	r0, [r7, #4]
 800c07c:	460b      	mov	r3, r1
 800c07e:	70fb      	strb	r3, [r7, #3]
  TL_CsEvt_t    *pcommand_status_event;
  TL_EvtPacket_t *pevtpacket;
  uint8_t hci_cmd_complete_return_parameters_length;
  HCI_TL_CmdStatus_t local_cmd_status;

  NotifyCmdStatus(HCI_TL_CmdBusy);
 800c080:	2000      	movs	r0, #0
 800c082:	f000 f8cb 	bl	800c21c <NotifyCmdStatus>
  local_cmd_status = HCI_TL_CmdBusy;
 800c086:	2300      	movs	r3, #0
 800c088:	77fb      	strb	r3, [r7, #31]
  opcode = ((p_cmd->ocf) & 0x03ff) | ((p_cmd->ogf) << 10);
 800c08a:	687b      	ldr	r3, [r7, #4]
 800c08c:	885b      	ldrh	r3, [r3, #2]
 800c08e:	b21b      	sxth	r3, r3
 800c090:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800c094:	b21a      	sxth	r2, r3
 800c096:	687b      	ldr	r3, [r7, #4]
 800c098:	881b      	ldrh	r3, [r3, #0]
 800c09a:	029b      	lsls	r3, r3, #10
 800c09c:	b21b      	sxth	r3, r3
 800c09e:	4313      	orrs	r3, r2
 800c0a0:	b21b      	sxth	r3, r3
 800c0a2:	83bb      	strh	r3, [r7, #28]
  SendCmd(opcode, p_cmd->clen, p_cmd->cparam);
 800c0a4:	687b      	ldr	r3, [r7, #4]
 800c0a6:	68db      	ldr	r3, [r3, #12]
 800c0a8:	b2d9      	uxtb	r1, r3
 800c0aa:	687b      	ldr	r3, [r7, #4]
 800c0ac:	689a      	ldr	r2, [r3, #8]
 800c0ae:	8bbb      	ldrh	r3, [r7, #28]
 800c0b0:	4618      	mov	r0, r3
 800c0b2:	f000 f88d 	bl	800c1d0 <SendCmd>

  while(local_cmd_status == HCI_TL_CmdBusy)
 800c0b6:	e04e      	b.n	800c156 <hci_send_req+0xe2>
  {
    hci_cmd_resp_wait(HCI_TL_DEFAULT_TIMEOUT);
 800c0b8:	f248 00e8 	movw	r0, #33000	; 0x80e8
 800c0bc:	f7f5 f9ba 	bl	8001434 <hci_cmd_resp_wait>

    /**
     * Process Cmd Event
     */
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 800c0c0:	e043      	b.n	800c14a <hci_send_req+0xd6>
    {
      LST_remove_head (&HciCmdEventQueue, (tListNode **)&pevtpacket);
 800c0c2:	f107 030c 	add.w	r3, r7, #12
 800c0c6:	4619      	mov	r1, r3
 800c0c8:	4828      	ldr	r0, [pc, #160]	; (800c16c <hci_send_req+0xf8>)
 800c0ca:	f000 ff16 	bl	800cefa <LST_remove_head>

      if(pevtpacket->evtserial.evt.evtcode == TL_BLEEVT_CS_OPCODE)
 800c0ce:	68fb      	ldr	r3, [r7, #12]
 800c0d0:	7a5b      	ldrb	r3, [r3, #9]
 800c0d2:	2b0f      	cmp	r3, #15
 800c0d4:	d114      	bne.n	800c100 <hci_send_req+0x8c>
      {
        pcommand_status_event = (TL_CsEvt_t*)pevtpacket->evtserial.evt.payload;
 800c0d6:	68fb      	ldr	r3, [r7, #12]
 800c0d8:	330b      	adds	r3, #11
 800c0da:	613b      	str	r3, [r7, #16]
        if(pcommand_status_event->cmdcode == opcode)
 800c0dc:	693b      	ldr	r3, [r7, #16]
 800c0de:	885b      	ldrh	r3, [r3, #2]
 800c0e0:	b29b      	uxth	r3, r3
 800c0e2:	8bba      	ldrh	r2, [r7, #28]
 800c0e4:	429a      	cmp	r2, r3
 800c0e6:	d104      	bne.n	800c0f2 <hci_send_req+0x7e>
        {
          *(uint8_t *)(p_cmd->rparam) = pcommand_status_event->status;
 800c0e8:	687b      	ldr	r3, [r7, #4]
 800c0ea:	691b      	ldr	r3, [r3, #16]
 800c0ec:	693a      	ldr	r2, [r7, #16]
 800c0ee:	7812      	ldrb	r2, [r2, #0]
 800c0f0:	701a      	strb	r2, [r3, #0]
        }

        if(pcommand_status_event->numcmd != 0)
 800c0f2:	693b      	ldr	r3, [r7, #16]
 800c0f4:	785b      	ldrb	r3, [r3, #1]
 800c0f6:	2b00      	cmp	r3, #0
 800c0f8:	d027      	beq.n	800c14a <hci_send_req+0xd6>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 800c0fa:	2301      	movs	r3, #1
 800c0fc:	77fb      	strb	r3, [r7, #31]
 800c0fe:	e024      	b.n	800c14a <hci_send_req+0xd6>
        }
      }
      else
      {
        pcommand_complete_event = (TL_CcEvt_t*)pevtpacket->evtserial.evt.payload;
 800c100:	68fb      	ldr	r3, [r7, #12]
 800c102:	330b      	adds	r3, #11
 800c104:	61bb      	str	r3, [r7, #24]

        if(pcommand_complete_event->cmdcode == opcode)
 800c106:	69bb      	ldr	r3, [r7, #24]
 800c108:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800c10c:	b29b      	uxth	r3, r3
 800c10e:	8bba      	ldrh	r2, [r7, #28]
 800c110:	429a      	cmp	r2, r3
 800c112:	d114      	bne.n	800c13e <hci_send_req+0xca>
        {
          hci_cmd_complete_return_parameters_length = pevtpacket->evtserial.evt.plen - TL_EVT_HDR_SIZE;
 800c114:	68fb      	ldr	r3, [r7, #12]
 800c116:	7a9b      	ldrb	r3, [r3, #10]
 800c118:	3b03      	subs	r3, #3
 800c11a:	75fb      	strb	r3, [r7, #23]
          p_cmd->rlen = MIN(hci_cmd_complete_return_parameters_length, p_cmd->rlen);
 800c11c:	687b      	ldr	r3, [r7, #4]
 800c11e:	695a      	ldr	r2, [r3, #20]
 800c120:	7dfb      	ldrb	r3, [r7, #23]
 800c122:	429a      	cmp	r2, r3
 800c124:	bfa8      	it	ge
 800c126:	461a      	movge	r2, r3
 800c128:	687b      	ldr	r3, [r7, #4]
 800c12a:	615a      	str	r2, [r3, #20]
          memcpy(p_cmd->rparam, pcommand_complete_event->payload, p_cmd->rlen);
 800c12c:	687b      	ldr	r3, [r7, #4]
 800c12e:	6918      	ldr	r0, [r3, #16]
 800c130:	69bb      	ldr	r3, [r7, #24]
 800c132:	1cd9      	adds	r1, r3, #3
 800c134:	687b      	ldr	r3, [r7, #4]
 800c136:	695b      	ldr	r3, [r3, #20]
 800c138:	461a      	mov	r2, r3
 800c13a:	f005 fd27 	bl	8011b8c <memcpy>
        }

        if(pcommand_complete_event->numcmd != 0)
 800c13e:	69bb      	ldr	r3, [r7, #24]
 800c140:	781b      	ldrb	r3, [r3, #0]
 800c142:	2b00      	cmp	r3, #0
 800c144:	d001      	beq.n	800c14a <hci_send_req+0xd6>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 800c146:	2301      	movs	r3, #1
 800c148:	77fb      	strb	r3, [r7, #31]
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 800c14a:	4808      	ldr	r0, [pc, #32]	; (800c16c <hci_send_req+0xf8>)
 800c14c:	f000 fe4e 	bl	800cdec <LST_is_empty>
 800c150:	4603      	mov	r3, r0
 800c152:	2b00      	cmp	r3, #0
 800c154:	d0b5      	beq.n	800c0c2 <hci_send_req+0x4e>
  while(local_cmd_status == HCI_TL_CmdBusy)
 800c156:	7ffb      	ldrb	r3, [r7, #31]
 800c158:	2b00      	cmp	r3, #0
 800c15a:	d0ad      	beq.n	800c0b8 <hci_send_req+0x44>
        }
      }
    }
  }

  NotifyCmdStatus(HCI_TL_CmdAvailable);
 800c15c:	2001      	movs	r0, #1
 800c15e:	f000 f85d 	bl	800c21c <NotifyCmdStatus>

  return 0;
 800c162:	2300      	movs	r3, #0
}
 800c164:	4618      	mov	r0, r3
 800c166:	3720      	adds	r7, #32
 800c168:	46bd      	mov	sp, r7
 800c16a:	bd80      	pop	{r7, pc}
 800c16c:	20000410 	.word	0x20000410

0800c170 <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 800c170:	b580      	push	{r7, lr}
 800c172:	b086      	sub	sp, #24
 800c174:	af00      	add	r7, sp, #0
 800c176:	6078      	str	r0, [r7, #4]
  TL_BLE_InitConf_t Conf;

  /**
   * Always initialize the command event queue
   */
  LST_init_head (&HciCmdEventQueue);
 800c178:	480f      	ldr	r0, [pc, #60]	; (800c1b8 <TlInit+0x48>)
 800c17a:	f000 fe27 	bl	800cdcc <LST_init_head>

  pCmdBuffer = p_cmdbuffer;
 800c17e:	4a0f      	ldr	r2, [pc, #60]	; (800c1bc <TlInit+0x4c>)
 800c180:	687b      	ldr	r3, [r7, #4]
 800c182:	6013      	str	r3, [r2, #0]

  LST_init_head (&HciAsynchEventQueue);
 800c184:	480e      	ldr	r0, [pc, #56]	; (800c1c0 <TlInit+0x50>)
 800c186:	f000 fe21 	bl	800cdcc <LST_init_head>

  UserEventFlow = HCI_TL_UserEventFlow_Enable;
 800c18a:	4b0e      	ldr	r3, [pc, #56]	; (800c1c4 <TlInit+0x54>)
 800c18c:	2201      	movs	r2, #1
 800c18e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (hciContext.io.Init)
 800c190:	4b0d      	ldr	r3, [pc, #52]	; (800c1c8 <TlInit+0x58>)
 800c192:	681b      	ldr	r3, [r3, #0]
 800c194:	2b00      	cmp	r3, #0
 800c196:	d00a      	beq.n	800c1ae <TlInit+0x3e>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 800c198:	687b      	ldr	r3, [r7, #4]
 800c19a:	613b      	str	r3, [r7, #16]
    Conf.IoBusEvtCallBack = TlEvtReceived;
 800c19c:	4b0b      	ldr	r3, [pc, #44]	; (800c1cc <TlInit+0x5c>)
 800c19e:	60bb      	str	r3, [r7, #8]
    hciContext.io.Init(&Conf);
 800c1a0:	4b09      	ldr	r3, [pc, #36]	; (800c1c8 <TlInit+0x58>)
 800c1a2:	681b      	ldr	r3, [r3, #0]
 800c1a4:	f107 0208 	add.w	r2, r7, #8
 800c1a8:	4610      	mov	r0, r2
 800c1aa:	4798      	blx	r3
  }

  return;
 800c1ac:	bf00      	nop
 800c1ae:	bf00      	nop
}
 800c1b0:	3718      	adds	r7, #24
 800c1b2:	46bd      	mov	sp, r7
 800c1b4:	bd80      	pop	{r7, pc}
 800c1b6:	bf00      	nop
 800c1b8:	20000410 	.word	0x20000410
 800c1bc:	20000394 	.word	0x20000394
 800c1c0:	2000038c 	.word	0x2000038c
 800c1c4:	20000398 	.word	0x20000398
 800c1c8:	200003f0 	.word	0x200003f0
 800c1cc:	0800c25d 	.word	0x0800c25d

0800c1d0 <SendCmd>:

static void SendCmd(uint16_t opcode, uint8_t plen, void *param)
{
 800c1d0:	b580      	push	{r7, lr}
 800c1d2:	b082      	sub	sp, #8
 800c1d4:	af00      	add	r7, sp, #0
 800c1d6:	4603      	mov	r3, r0
 800c1d8:	603a      	str	r2, [r7, #0]
 800c1da:	80fb      	strh	r3, [r7, #6]
 800c1dc:	460b      	mov	r3, r1
 800c1de:	717b      	strb	r3, [r7, #5]
  pCmdBuffer->cmdserial.cmd.cmdcode = opcode;
 800c1e0:	4b0c      	ldr	r3, [pc, #48]	; (800c214 <SendCmd+0x44>)
 800c1e2:	681b      	ldr	r3, [r3, #0]
 800c1e4:	88fa      	ldrh	r2, [r7, #6]
 800c1e6:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = plen;
 800c1ea:	4b0a      	ldr	r3, [pc, #40]	; (800c214 <SendCmd+0x44>)
 800c1ec:	681b      	ldr	r3, [r3, #0]
 800c1ee:	797a      	ldrb	r2, [r7, #5]
 800c1f0:	72da      	strb	r2, [r3, #11]
  memcpy( pCmdBuffer->cmdserial.cmd.payload, param, plen );
 800c1f2:	4b08      	ldr	r3, [pc, #32]	; (800c214 <SendCmd+0x44>)
 800c1f4:	681b      	ldr	r3, [r3, #0]
 800c1f6:	330c      	adds	r3, #12
 800c1f8:	797a      	ldrb	r2, [r7, #5]
 800c1fa:	6839      	ldr	r1, [r7, #0]
 800c1fc:	4618      	mov	r0, r3
 800c1fe:	f005 fcc5 	bl	8011b8c <memcpy>

  hciContext.io.Send(0,0);
 800c202:	4b05      	ldr	r3, [pc, #20]	; (800c218 <SendCmd+0x48>)
 800c204:	691b      	ldr	r3, [r3, #16]
 800c206:	2100      	movs	r1, #0
 800c208:	2000      	movs	r0, #0
 800c20a:	4798      	blx	r3

  return;
 800c20c:	bf00      	nop
}
 800c20e:	3708      	adds	r7, #8
 800c210:	46bd      	mov	sp, r7
 800c212:	bd80      	pop	{r7, pc}
 800c214:	20000394 	.word	0x20000394
 800c218:	200003f0 	.word	0x200003f0

0800c21c <NotifyCmdStatus>:

static void NotifyCmdStatus(HCI_TL_CmdStatus_t hcicmdstatus)
{
 800c21c:	b580      	push	{r7, lr}
 800c21e:	b082      	sub	sp, #8
 800c220:	af00      	add	r7, sp, #0
 800c222:	4603      	mov	r3, r0
 800c224:	71fb      	strb	r3, [r7, #7]
  if(hcicmdstatus == HCI_TL_CmdBusy)
 800c226:	79fb      	ldrb	r3, [r7, #7]
 800c228:	2b00      	cmp	r3, #0
 800c22a:	d108      	bne.n	800c23e <NotifyCmdStatus+0x22>
  {
    if(StatusNotCallBackFunction != 0)
 800c22c:	4b0a      	ldr	r3, [pc, #40]	; (800c258 <NotifyCmdStatus+0x3c>)
 800c22e:	681b      	ldr	r3, [r3, #0]
 800c230:	2b00      	cmp	r3, #0
 800c232:	d00d      	beq.n	800c250 <NotifyCmdStatus+0x34>
    {
      StatusNotCallBackFunction(HCI_TL_CmdBusy);
 800c234:	4b08      	ldr	r3, [pc, #32]	; (800c258 <NotifyCmdStatus+0x3c>)
 800c236:	681b      	ldr	r3, [r3, #0]
 800c238:	2000      	movs	r0, #0
 800c23a:	4798      	blx	r3
    {
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
    }
  }

  return;
 800c23c:	e008      	b.n	800c250 <NotifyCmdStatus+0x34>
    if(StatusNotCallBackFunction != 0)
 800c23e:	4b06      	ldr	r3, [pc, #24]	; (800c258 <NotifyCmdStatus+0x3c>)
 800c240:	681b      	ldr	r3, [r3, #0]
 800c242:	2b00      	cmp	r3, #0
 800c244:	d004      	beq.n	800c250 <NotifyCmdStatus+0x34>
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
 800c246:	4b04      	ldr	r3, [pc, #16]	; (800c258 <NotifyCmdStatus+0x3c>)
 800c248:	681b      	ldr	r3, [r3, #0]
 800c24a:	2001      	movs	r0, #1
 800c24c:	4798      	blx	r3
  return;
 800c24e:	bf00      	nop
 800c250:	bf00      	nop
}
 800c252:	3708      	adds	r7, #8
 800c254:	46bd      	mov	sp, r7
 800c256:	bd80      	pop	{r7, pc}
 800c258:	20000418 	.word	0x20000418

0800c25c <TlEvtReceived>:

static void TlEvtReceived(TL_EvtPacket_t *hcievt)
{
 800c25c:	b580      	push	{r7, lr}
 800c25e:	b082      	sub	sp, #8
 800c260:	af00      	add	r7, sp, #0
 800c262:	6078      	str	r0, [r7, #4]
  if ( ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 800c264:	687b      	ldr	r3, [r7, #4]
 800c266:	7a5b      	ldrb	r3, [r3, #9]
 800c268:	2b0f      	cmp	r3, #15
 800c26a:	d003      	beq.n	800c274 <TlEvtReceived+0x18>
 800c26c:	687b      	ldr	r3, [r7, #4]
 800c26e:	7a5b      	ldrb	r3, [r3, #9]
 800c270:	2b0e      	cmp	r3, #14
 800c272:	d107      	bne.n	800c284 <TlEvtReceived+0x28>
  {
    LST_insert_tail(&HciCmdEventQueue, (tListNode *)hcievt);
 800c274:	6879      	ldr	r1, [r7, #4]
 800c276:	4809      	ldr	r0, [pc, #36]	; (800c29c <TlEvtReceived+0x40>)
 800c278:	f000 fdfc 	bl	800ce74 <LST_insert_tail>
    hci_cmd_resp_release(0); /**< Notify the application a full Cmd Event has been received */
 800c27c:	2000      	movs	r0, #0
 800c27e:	f7f5 f8c9 	bl	8001414 <hci_cmd_resp_release>
 800c282:	e006      	b.n	800c292 <TlEvtReceived+0x36>
  }
  else
  {
    LST_insert_tail(&HciAsynchEventQueue, (tListNode *)hcievt);
 800c284:	6879      	ldr	r1, [r7, #4]
 800c286:	4806      	ldr	r0, [pc, #24]	; (800c2a0 <TlEvtReceived+0x44>)
 800c288:	f000 fdf4 	bl	800ce74 <LST_insert_tail>
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 800c28c:	4804      	ldr	r0, [pc, #16]	; (800c2a0 <TlEvtReceived+0x44>)
 800c28e:	f7f5 f8b1 	bl	80013f4 <hci_notify_asynch_evt>
  }

  return;
 800c292:	bf00      	nop
}
 800c294:	3708      	adds	r7, #8
 800c296:	46bd      	mov	sp, r7
 800c298:	bd80      	pop	{r7, pc}
 800c29a:	bf00      	nop
 800c29c:	20000410 	.word	0x20000410
 800c2a0:	2000038c 	.word	0x2000038c

0800c2a4 <hci_register_io_bus>:
#include "hci_tl.h"
#include "tl.h"


void hci_register_io_bus(tHciIO* fops)
{
 800c2a4:	b480      	push	{r7}
 800c2a6:	b083      	sub	sp, #12
 800c2a8:	af00      	add	r7, sp, #0
 800c2aa:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_BLE_Init;
 800c2ac:	687b      	ldr	r3, [r7, #4]
 800c2ae:	4a05      	ldr	r2, [pc, #20]	; (800c2c4 <hci_register_io_bus+0x20>)
 800c2b0:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_BLE_SendCmd;
 800c2b2:	687b      	ldr	r3, [r7, #4]
 800c2b4:	4a04      	ldr	r2, [pc, #16]	; (800c2c8 <hci_register_io_bus+0x24>)
 800c2b6:	611a      	str	r2, [r3, #16]

  return;
 800c2b8:	bf00      	nop
}
 800c2ba:	370c      	adds	r7, #12
 800c2bc:	46bd      	mov	sp, r7
 800c2be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2c2:	4770      	bx	lr
 800c2c4:	0800c5b5 	.word	0x0800c5b5
 800c2c8:	0800c61d 	.word	0x0800c61d

0800c2cc <shci_init>:
static void TlUserEvtReceived(TL_EvtPacket_t *shcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void shci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 800c2cc:	b580      	push	{r7, lr}
 800c2ce:	b082      	sub	sp, #8
 800c2d0:	af00      	add	r7, sp, #0
 800c2d2:	6078      	str	r0, [r7, #4]
 800c2d4:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((SHCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 800c2d6:	683b      	ldr	r3, [r7, #0]
 800c2d8:	685b      	ldr	r3, [r3, #4]
 800c2da:	4a08      	ldr	r2, [pc, #32]	; (800c2fc <shci_init+0x30>)
 800c2dc:	6013      	str	r3, [r2, #0]
  shciContext.UserEvtRx = UserEvtRx;
 800c2de:	4a08      	ldr	r2, [pc, #32]	; (800c300 <shci_init+0x34>)
 800c2e0:	687b      	ldr	r3, [r7, #4]
 800c2e2:	61d3      	str	r3, [r2, #28]

  shci_register_io_bus (&shciContext.io);
 800c2e4:	4806      	ldr	r0, [pc, #24]	; (800c300 <shci_init+0x34>)
 800c2e6:	f000 f911 	bl	800c50c <shci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((SHCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 800c2ea:	683b      	ldr	r3, [r7, #0]
 800c2ec:	681b      	ldr	r3, [r3, #0]
 800c2ee:	4618      	mov	r0, r3
 800c2f0:	f000 f894 	bl	800c41c <TlInit>

  return;
 800c2f4:	bf00      	nop
}
 800c2f6:	3708      	adds	r7, #8
 800c2f8:	46bd      	mov	sp, r7
 800c2fa:	bd80      	pop	{r7, pc}
 800c2fc:	2000043c 	.word	0x2000043c
 800c300:	2000041c 	.word	0x2000041c

0800c304 <shci_user_evt_proc>:

void shci_user_evt_proc(void)
{
 800c304:	b580      	push	{r7, lr}
 800c306:	b084      	sub	sp, #16
 800c308:	af00      	add	r7, sp, #0

  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */
  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 800c30a:	4822      	ldr	r0, [pc, #136]	; (800c394 <shci_user_evt_proc+0x90>)
 800c30c:	f000 fd6e 	bl	800cdec <LST_is_empty>
 800c310:	4603      	mov	r3, r0
 800c312:	2b00      	cmp	r3, #0
 800c314:	d12b      	bne.n	800c36e <shci_user_evt_proc+0x6a>
 800c316:	4b20      	ldr	r3, [pc, #128]	; (800c398 <shci_user_evt_proc+0x94>)
 800c318:	781b      	ldrb	r3, [r3, #0]
 800c31a:	2b00      	cmp	r3, #0
 800c31c:	d027      	beq.n	800c36e <shci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &SHciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 800c31e:	f107 030c 	add.w	r3, r7, #12
 800c322:	4619      	mov	r1, r3
 800c324:	481b      	ldr	r0, [pc, #108]	; (800c394 <shci_user_evt_proc+0x90>)
 800c326:	f000 fde8 	bl	800cefa <LST_remove_head>

    if (shciContext.UserEvtRx != NULL)
 800c32a:	4b1c      	ldr	r3, [pc, #112]	; (800c39c <shci_user_evt_proc+0x98>)
 800c32c:	69db      	ldr	r3, [r3, #28]
 800c32e:	2b00      	cmp	r3, #0
 800c330:	d00c      	beq.n	800c34c <shci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 800c332:	68fb      	ldr	r3, [r7, #12]
 800c334:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = SHCI_TL_UserEventFlow_Enable;
 800c336:	2301      	movs	r3, #1
 800c338:	713b      	strb	r3, [r7, #4]
      shciContext.UserEvtRx((void *)&UserEvtRxParam);
 800c33a:	4b18      	ldr	r3, [pc, #96]	; (800c39c <shci_user_evt_proc+0x98>)
 800c33c:	69db      	ldr	r3, [r3, #28]
 800c33e:	1d3a      	adds	r2, r7, #4
 800c340:	4610      	mov	r0, r2
 800c342:	4798      	blx	r3
      SHCI_TL_UserEventFlow = UserEvtRxParam.status;
 800c344:	793a      	ldrb	r2, [r7, #4]
 800c346:	4b14      	ldr	r3, [pc, #80]	; (800c398 <shci_user_evt_proc+0x94>)
 800c348:	701a      	strb	r2, [r3, #0]
 800c34a:	e002      	b.n	800c352 <shci_user_evt_proc+0x4e>
    }
    else
    {
      SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 800c34c:	4b12      	ldr	r3, [pc, #72]	; (800c398 <shci_user_evt_proc+0x94>)
 800c34e:	2201      	movs	r2, #1
 800c350:	701a      	strb	r2, [r3, #0]
    }

    if(SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable)
 800c352:	4b11      	ldr	r3, [pc, #68]	; (800c398 <shci_user_evt_proc+0x94>)
 800c354:	781b      	ldrb	r3, [r3, #0]
 800c356:	2b00      	cmp	r3, #0
 800c358:	d004      	beq.n	800c364 <shci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 800c35a:	68fb      	ldr	r3, [r7, #12]
 800c35c:	4618      	mov	r0, r3
 800c35e:	f000 fa6d 	bl	800c83c <TL_MM_EvtDone>
 800c362:	e004      	b.n	800c36e <shci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &SHciAsynchEventQueue, (tListNode *)phcievtbuffer );
 800c364:	68fb      	ldr	r3, [r7, #12]
 800c366:	4619      	mov	r1, r3
 800c368:	480a      	ldr	r0, [pc, #40]	; (800c394 <shci_user_evt_proc+0x90>)
 800c36a:	f000 fd5f 	bl	800ce2c <LST_insert_head>
    }
  }

  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 800c36e:	4809      	ldr	r0, [pc, #36]	; (800c394 <shci_user_evt_proc+0x90>)
 800c370:	f000 fd3c 	bl	800cdec <LST_is_empty>
 800c374:	4603      	mov	r3, r0
 800c376:	2b00      	cmp	r3, #0
 800c378:	d107      	bne.n	800c38a <shci_user_evt_proc+0x86>
 800c37a:	4b07      	ldr	r3, [pc, #28]	; (800c398 <shci_user_evt_proc+0x94>)
 800c37c:	781b      	ldrb	r3, [r3, #0]
 800c37e:	2b00      	cmp	r3, #0
 800c380:	d003      	beq.n	800c38a <shci_user_evt_proc+0x86>
  {
    shci_notify_asynch_evt((void*) &SHciAsynchEventQueue);
 800c382:	4804      	ldr	r0, [pc, #16]	; (800c394 <shci_user_evt_proc+0x90>)
 800c384:	f7f5 fe6a 	bl	800205c <shci_notify_asynch_evt>
  }


  return;
 800c388:	bf00      	nop
 800c38a:	bf00      	nop
}
 800c38c:	3710      	adds	r7, #16
 800c38e:	46bd      	mov	sp, r7
 800c390:	bd80      	pop	{r7, pc}
 800c392:	bf00      	nop
 800c394:	200003a4 	.word	0x200003a4
 800c398:	200003b4 	.word	0x200003b4
 800c39c:	2000041c 	.word	0x2000041c

0800c3a0 <shci_send>:

  return;
}

void shci_send( uint16_t cmd_code, uint8_t len_cmd_payload, uint8_t * p_cmd_payload, TL_EvtPacket_t * p_rsp )
{
 800c3a0:	b580      	push	{r7, lr}
 800c3a2:	b084      	sub	sp, #16
 800c3a4:	af00      	add	r7, sp, #0
 800c3a6:	60ba      	str	r2, [r7, #8]
 800c3a8:	607b      	str	r3, [r7, #4]
 800c3aa:	4603      	mov	r3, r0
 800c3ac:	81fb      	strh	r3, [r7, #14]
 800c3ae:	460b      	mov	r3, r1
 800c3b0:	737b      	strb	r3, [r7, #13]
  Cmd_SetStatus(SHCI_TL_CmdBusy);
 800c3b2:	2000      	movs	r0, #0
 800c3b4:	f000 f864 	bl	800c480 <Cmd_SetStatus>

  pCmdBuffer->cmdserial.cmd.cmdcode = cmd_code;
 800c3b8:	4b16      	ldr	r3, [pc, #88]	; (800c414 <shci_send+0x74>)
 800c3ba:	681b      	ldr	r3, [r3, #0]
 800c3bc:	89fa      	ldrh	r2, [r7, #14]
 800c3be:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = len_cmd_payload;
 800c3c2:	4b14      	ldr	r3, [pc, #80]	; (800c414 <shci_send+0x74>)
 800c3c4:	681b      	ldr	r3, [r3, #0]
 800c3c6:	7b7a      	ldrb	r2, [r7, #13]
 800c3c8:	72da      	strb	r2, [r3, #11]

  memcpy(pCmdBuffer->cmdserial.cmd.payload, p_cmd_payload, len_cmd_payload );
 800c3ca:	4b12      	ldr	r3, [pc, #72]	; (800c414 <shci_send+0x74>)
 800c3cc:	681b      	ldr	r3, [r3, #0]
 800c3ce:	330c      	adds	r3, #12
 800c3d0:	7b7a      	ldrb	r2, [r7, #13]
 800c3d2:	68b9      	ldr	r1, [r7, #8]
 800c3d4:	4618      	mov	r0, r3
 800c3d6:	f005 fbd9 	bl	8011b8c <memcpy>

  shciContext.io.Send(0,0);
 800c3da:	4b0f      	ldr	r3, [pc, #60]	; (800c418 <shci_send+0x78>)
 800c3dc:	691b      	ldr	r3, [r3, #16]
 800c3de:	2100      	movs	r1, #0
 800c3e0:	2000      	movs	r0, #0
 800c3e2:	4798      	blx	r3

  shci_cmd_resp_wait(SHCI_TL_DEFAULT_TIMEOUT);
 800c3e4:	f248 00e8 	movw	r0, #33000	; 0x80e8
 800c3e8:	f7f5 fe58 	bl	800209c <shci_cmd_resp_wait>

  /**
   * The command complete of a system command does not have the header
   * It starts immediately with the evtserial field
   */
  memcpy( &(p_rsp->evtserial), pCmdBuffer, ((TL_EvtSerial_t*)pCmdBuffer)->evt.plen + TL_EVT_HDR_SIZE );
 800c3ec:	687b      	ldr	r3, [r7, #4]
 800c3ee:	f103 0008 	add.w	r0, r3, #8
 800c3f2:	4b08      	ldr	r3, [pc, #32]	; (800c414 <shci_send+0x74>)
 800c3f4:	6819      	ldr	r1, [r3, #0]
 800c3f6:	4b07      	ldr	r3, [pc, #28]	; (800c414 <shci_send+0x74>)
 800c3f8:	681b      	ldr	r3, [r3, #0]
 800c3fa:	789b      	ldrb	r3, [r3, #2]
 800c3fc:	3303      	adds	r3, #3
 800c3fe:	461a      	mov	r2, r3
 800c400:	f005 fbc4 	bl	8011b8c <memcpy>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 800c404:	2001      	movs	r0, #1
 800c406:	f000 f83b 	bl	800c480 <Cmd_SetStatus>

  return;
 800c40a:	bf00      	nop
}
 800c40c:	3710      	adds	r7, #16
 800c40e:	46bd      	mov	sp, r7
 800c410:	bd80      	pop	{r7, pc}
 800c412:	bf00      	nop
 800c414:	200003b0 	.word	0x200003b0
 800c418:	2000041c 	.word	0x2000041c

0800c41c <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 800c41c:	b580      	push	{r7, lr}
 800c41e:	b086      	sub	sp, #24
 800c420:	af00      	add	r7, sp, #0
 800c422:	6078      	str	r0, [r7, #4]
  TL_SYS_InitConf_t Conf;

  pCmdBuffer = p_cmdbuffer;
 800c424:	4a10      	ldr	r2, [pc, #64]	; (800c468 <TlInit+0x4c>)
 800c426:	687b      	ldr	r3, [r7, #4]
 800c428:	6013      	str	r3, [r2, #0]

  LST_init_head (&SHciAsynchEventQueue);
 800c42a:	4810      	ldr	r0, [pc, #64]	; (800c46c <TlInit+0x50>)
 800c42c:	f000 fcce 	bl	800cdcc <LST_init_head>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 800c430:	2001      	movs	r0, #1
 800c432:	f000 f825 	bl	800c480 <Cmd_SetStatus>

  SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 800c436:	4b0e      	ldr	r3, [pc, #56]	; (800c470 <TlInit+0x54>)
 800c438:	2201      	movs	r2, #1
 800c43a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (shciContext.io.Init)
 800c43c:	4b0d      	ldr	r3, [pc, #52]	; (800c474 <TlInit+0x58>)
 800c43e:	681b      	ldr	r3, [r3, #0]
 800c440:	2b00      	cmp	r3, #0
 800c442:	d00c      	beq.n	800c45e <TlInit+0x42>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 800c444:	687b      	ldr	r3, [r7, #4]
 800c446:	617b      	str	r3, [r7, #20]
    Conf.IoBusCallBackCmdEvt = TlCmdEvtReceived;
 800c448:	4b0b      	ldr	r3, [pc, #44]	; (800c478 <TlInit+0x5c>)
 800c44a:	60fb      	str	r3, [r7, #12]
    Conf.IoBusCallBackUserEvt = TlUserEvtReceived;
 800c44c:	4b0b      	ldr	r3, [pc, #44]	; (800c47c <TlInit+0x60>)
 800c44e:	613b      	str	r3, [r7, #16]
    shciContext.io.Init(&Conf);
 800c450:	4b08      	ldr	r3, [pc, #32]	; (800c474 <TlInit+0x58>)
 800c452:	681b      	ldr	r3, [r3, #0]
 800c454:	f107 020c 	add.w	r2, r7, #12
 800c458:	4610      	mov	r0, r2
 800c45a:	4798      	blx	r3
  }

  return;
 800c45c:	bf00      	nop
 800c45e:	bf00      	nop
}
 800c460:	3718      	adds	r7, #24
 800c462:	46bd      	mov	sp, r7
 800c464:	bd80      	pop	{r7, pc}
 800c466:	bf00      	nop
 800c468:	200003b0 	.word	0x200003b0
 800c46c:	200003a4 	.word	0x200003a4
 800c470:	200003b4 	.word	0x200003b4
 800c474:	2000041c 	.word	0x2000041c
 800c478:	0800c4d1 	.word	0x0800c4d1
 800c47c:	0800c4e9 	.word	0x0800c4e9

0800c480 <Cmd_SetStatus>:

static void Cmd_SetStatus(SHCI_TL_CmdStatus_t shcicmdstatus)
{
 800c480:	b580      	push	{r7, lr}
 800c482:	b082      	sub	sp, #8
 800c484:	af00      	add	r7, sp, #0
 800c486:	4603      	mov	r3, r0
 800c488:	71fb      	strb	r3, [r7, #7]
  if(shcicmdstatus == SHCI_TL_CmdBusy)
 800c48a:	79fb      	ldrb	r3, [r7, #7]
 800c48c:	2b00      	cmp	r3, #0
 800c48e:	d10b      	bne.n	800c4a8 <Cmd_SetStatus+0x28>
  {
    if(StatusNotCallBackFunction != 0)
 800c490:	4b0d      	ldr	r3, [pc, #52]	; (800c4c8 <Cmd_SetStatus+0x48>)
 800c492:	681b      	ldr	r3, [r3, #0]
 800c494:	2b00      	cmp	r3, #0
 800c496:	d003      	beq.n	800c4a0 <Cmd_SetStatus+0x20>
    {
      StatusNotCallBackFunction( SHCI_TL_CmdBusy );
 800c498:	4b0b      	ldr	r3, [pc, #44]	; (800c4c8 <Cmd_SetStatus+0x48>)
 800c49a:	681b      	ldr	r3, [r3, #0]
 800c49c:	2000      	movs	r0, #0
 800c49e:	4798      	blx	r3
    }
    SHCICmdStatus = SHCI_TL_CmdBusy;
 800c4a0:	4b0a      	ldr	r3, [pc, #40]	; (800c4cc <Cmd_SetStatus+0x4c>)
 800c4a2:	2200      	movs	r2, #0
 800c4a4:	701a      	strb	r2, [r3, #0]
    {
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
    }
  }

  return;
 800c4a6:	e00b      	b.n	800c4c0 <Cmd_SetStatus+0x40>
    SHCICmdStatus = SHCI_TL_CmdAvailable;
 800c4a8:	4b08      	ldr	r3, [pc, #32]	; (800c4cc <Cmd_SetStatus+0x4c>)
 800c4aa:	2201      	movs	r2, #1
 800c4ac:	701a      	strb	r2, [r3, #0]
    if(StatusNotCallBackFunction != 0)
 800c4ae:	4b06      	ldr	r3, [pc, #24]	; (800c4c8 <Cmd_SetStatus+0x48>)
 800c4b0:	681b      	ldr	r3, [r3, #0]
 800c4b2:	2b00      	cmp	r3, #0
 800c4b4:	d004      	beq.n	800c4c0 <Cmd_SetStatus+0x40>
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
 800c4b6:	4b04      	ldr	r3, [pc, #16]	; (800c4c8 <Cmd_SetStatus+0x48>)
 800c4b8:	681b      	ldr	r3, [r3, #0]
 800c4ba:	2001      	movs	r0, #1
 800c4bc:	4798      	blx	r3
  return;
 800c4be:	bf00      	nop
 800c4c0:	bf00      	nop
}
 800c4c2:	3708      	adds	r7, #8
 800c4c4:	46bd      	mov	sp, r7
 800c4c6:	bd80      	pop	{r7, pc}
 800c4c8:	2000043c 	.word	0x2000043c
 800c4cc:	200003ac 	.word	0x200003ac

0800c4d0 <TlCmdEvtReceived>:

static void TlCmdEvtReceived(TL_EvtPacket_t *shcievt)
{
 800c4d0:	b580      	push	{r7, lr}
 800c4d2:	b082      	sub	sp, #8
 800c4d4:	af00      	add	r7, sp, #0
 800c4d6:	6078      	str	r0, [r7, #4]
  (void)(shcievt);
  shci_cmd_resp_release(0); /**< Notify the application the Cmd response has been received */
 800c4d8:	2000      	movs	r0, #0
 800c4da:	f7f5 fdcf 	bl	800207c <shci_cmd_resp_release>

  return;
 800c4de:	bf00      	nop
}
 800c4e0:	3708      	adds	r7, #8
 800c4e2:	46bd      	mov	sp, r7
 800c4e4:	bd80      	pop	{r7, pc}
	...

0800c4e8 <TlUserEvtReceived>:

static void TlUserEvtReceived(TL_EvtPacket_t *shcievt)
{
 800c4e8:	b580      	push	{r7, lr}
 800c4ea:	b082      	sub	sp, #8
 800c4ec:	af00      	add	r7, sp, #0
 800c4ee:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&SHciAsynchEventQueue, (tListNode *)shcievt);
 800c4f0:	6879      	ldr	r1, [r7, #4]
 800c4f2:	4805      	ldr	r0, [pc, #20]	; (800c508 <TlUserEvtReceived+0x20>)
 800c4f4:	f000 fcbe 	bl	800ce74 <LST_insert_tail>
  shci_notify_asynch_evt((void*) &SHciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 800c4f8:	4803      	ldr	r0, [pc, #12]	; (800c508 <TlUserEvtReceived+0x20>)
 800c4fa:	f7f5 fdaf 	bl	800205c <shci_notify_asynch_evt>

  return;
 800c4fe:	bf00      	nop
}
 800c500:	3708      	adds	r7, #8
 800c502:	46bd      	mov	sp, r7
 800c504:	bd80      	pop	{r7, pc}
 800c506:	bf00      	nop
 800c508:	200003a4 	.word	0x200003a4

0800c50c <shci_register_io_bus>:
#include "shci_tl.h"
#include "tl.h"


void shci_register_io_bus(tSHciIO* fops)
{
 800c50c:	b480      	push	{r7}
 800c50e:	b083      	sub	sp, #12
 800c510:	af00      	add	r7, sp, #0
 800c512:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_SYS_Init;
 800c514:	687b      	ldr	r3, [r7, #4]
 800c516:	4a05      	ldr	r2, [pc, #20]	; (800c52c <shci_register_io_bus+0x20>)
 800c518:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_SYS_SendCmd;
 800c51a:	687b      	ldr	r3, [r7, #4]
 800c51c:	4a04      	ldr	r2, [pc, #16]	; (800c530 <shci_register_io_bus+0x24>)
 800c51e:	611a      	str	r2, [r3, #16]

  return;
 800c520:	bf00      	nop
}
 800c522:	370c      	adds	r7, #12
 800c524:	46bd      	mov	sp, r7
 800c526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c52a:	4770      	bx	lr
 800c52c:	0800c6c9 	.word	0x0800c6c9
 800c530:	0800c71d 	.word	0x0800c71d

0800c534 <TL_Enable>:

/******************************************************************************
 * GENERAL
 ******************************************************************************/
void TL_Enable( void )
{
 800c534:	b580      	push	{r7, lr}
 800c536:	af00      	add	r7, sp, #0
  HW_IPCC_Enable();
 800c538:	f7f5 fa64 	bl	8001a04 <HW_IPCC_Enable>

  return;
 800c53c:	bf00      	nop
}
 800c53e:	bd80      	pop	{r7, pc}

0800c540 <TL_Init>:


void TL_Init( void )
{
 800c540:	b580      	push	{r7, lr}
 800c542:	af00      	add	r7, sp, #0
  TL_RefTable.p_device_info_table = &TL_DeviceInfoTable;
 800c544:	4b10      	ldr	r3, [pc, #64]	; (800c588 <TL_Init+0x48>)
 800c546:	4a11      	ldr	r2, [pc, #68]	; (800c58c <TL_Init+0x4c>)
 800c548:	601a      	str	r2, [r3, #0]
  TL_RefTable.p_ble_table = &TL_BleTable;
 800c54a:	4b0f      	ldr	r3, [pc, #60]	; (800c588 <TL_Init+0x48>)
 800c54c:	4a10      	ldr	r2, [pc, #64]	; (800c590 <TL_Init+0x50>)
 800c54e:	605a      	str	r2, [r3, #4]
  TL_RefTable.p_thread_table = &TL_ThreadTable;
 800c550:	4b0d      	ldr	r3, [pc, #52]	; (800c588 <TL_Init+0x48>)
 800c552:	4a10      	ldr	r2, [pc, #64]	; (800c594 <TL_Init+0x54>)
 800c554:	609a      	str	r2, [r3, #8]
  TL_RefTable.p_lld_tests_table = &TL_LldTestsTable;
 800c556:	4b0c      	ldr	r3, [pc, #48]	; (800c588 <TL_Init+0x48>)
 800c558:	4a0f      	ldr	r2, [pc, #60]	; (800c598 <TL_Init+0x58>)
 800c55a:	621a      	str	r2, [r3, #32]
  TL_RefTable.p_lld_ble_table = &TL_LldBleTable;
 800c55c:	4b0a      	ldr	r3, [pc, #40]	; (800c588 <TL_Init+0x48>)
 800c55e:	4a0f      	ldr	r2, [pc, #60]	; (800c59c <TL_Init+0x5c>)
 800c560:	625a      	str	r2, [r3, #36]	; 0x24
  TL_RefTable.p_sys_table = &TL_SysTable;
 800c562:	4b09      	ldr	r3, [pc, #36]	; (800c588 <TL_Init+0x48>)
 800c564:	4a0e      	ldr	r2, [pc, #56]	; (800c5a0 <TL_Init+0x60>)
 800c566:	60da      	str	r2, [r3, #12]
  TL_RefTable.p_mem_manager_table = &TL_MemManagerTable;
 800c568:	4b07      	ldr	r3, [pc, #28]	; (800c588 <TL_Init+0x48>)
 800c56a:	4a0e      	ldr	r2, [pc, #56]	; (800c5a4 <TL_Init+0x64>)
 800c56c:	611a      	str	r2, [r3, #16]
  TL_RefTable.p_traces_table = &TL_TracesTable;
 800c56e:	4b06      	ldr	r3, [pc, #24]	; (800c588 <TL_Init+0x48>)
 800c570:	4a0d      	ldr	r2, [pc, #52]	; (800c5a8 <TL_Init+0x68>)
 800c572:	615a      	str	r2, [r3, #20]
  TL_RefTable.p_mac_802_15_4_table = &TL_Mac_802_15_4_Table;
 800c574:	4b04      	ldr	r3, [pc, #16]	; (800c588 <TL_Init+0x48>)
 800c576:	4a0d      	ldr	r2, [pc, #52]	; (800c5ac <TL_Init+0x6c>)
 800c578:	619a      	str	r2, [r3, #24]
  TL_RefTable.p_zigbee_table = &TL_Zigbee_Table;
 800c57a:	4b03      	ldr	r3, [pc, #12]	; (800c588 <TL_Init+0x48>)
 800c57c:	4a0c      	ldr	r2, [pc, #48]	; (800c5b0 <TL_Init+0x70>)
 800c57e:	61da      	str	r2, [r3, #28]
  HW_IPCC_Init();
 800c580:	f7f5 fa54 	bl	8001a2c <HW_IPCC_Init>

  return;
 800c584:	bf00      	nop
}
 800c586:	bd80      	pop	{r7, pc}
 800c588:	20030000 	.word	0x20030000
 800c58c:	20030134 	.word	0x20030134
 800c590:	20030154 	.word	0x20030154
 800c594:	20030164 	.word	0x20030164
 800c598:	20030170 	.word	0x20030170
 800c59c:	20030178 	.word	0x20030178
 800c5a0:	20030180 	.word	0x20030180
 800c5a4:	20030188 	.word	0x20030188
 800c5a8:	200301a4 	.word	0x200301a4
 800c5ac:	200301a8 	.word	0x200301a8
 800c5b0:	200301b4 	.word	0x200301b4

0800c5b4 <TL_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
int32_t TL_BLE_Init( void* pConf )
{
 800c5b4:	b580      	push	{r7, lr}
 800c5b6:	b084      	sub	sp, #16
 800c5b8:	af00      	add	r7, sp, #0
 800c5ba:	6078      	str	r0, [r7, #4]
  MB_BleTable_t  * p_bletable;

  TL_BLE_InitConf_t *pInitHciConf = (TL_BLE_InitConf_t *) pConf;
 800c5bc:	687b      	ldr	r3, [r7, #4]
 800c5be:	60fb      	str	r3, [r7, #12]

  LST_init_head (&EvtQueue);
 800c5c0:	4811      	ldr	r0, [pc, #68]	; (800c608 <TL_BLE_Init+0x54>)
 800c5c2:	f000 fc03 	bl	800cdcc <LST_init_head>

  p_bletable = TL_RefTable.p_ble_table;
 800c5c6:	4b11      	ldr	r3, [pc, #68]	; (800c60c <TL_BLE_Init+0x58>)
 800c5c8:	685b      	ldr	r3, [r3, #4]
 800c5ca:	60bb      	str	r3, [r7, #8]

  p_bletable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 800c5cc:	68fb      	ldr	r3, [r7, #12]
 800c5ce:	689a      	ldr	r2, [r3, #8]
 800c5d0:	68bb      	ldr	r3, [r7, #8]
 800c5d2:	601a      	str	r2, [r3, #0]
  p_bletable->phci_acl_data_buffer = pInitHciConf->p_AclDataBuffer;
 800c5d4:	68fb      	ldr	r3, [r7, #12]
 800c5d6:	68da      	ldr	r2, [r3, #12]
 800c5d8:	68bb      	ldr	r3, [r7, #8]
 800c5da:	60da      	str	r2, [r3, #12]
  p_bletable->pcs_buffer  = (uint8_t*)CsBuffer;
 800c5dc:	68bb      	ldr	r3, [r7, #8]
 800c5de:	4a0c      	ldr	r2, [pc, #48]	; (800c610 <TL_BLE_Init+0x5c>)
 800c5e0:	605a      	str	r2, [r3, #4]
  p_bletable->pevt_queue  = (uint8_t*)&EvtQueue;
 800c5e2:	68bb      	ldr	r3, [r7, #8]
 800c5e4:	4a08      	ldr	r2, [pc, #32]	; (800c608 <TL_BLE_Init+0x54>)
 800c5e6:	609a      	str	r2, [r3, #8]

  HW_IPCC_BLE_Init();
 800c5e8:	f7f5 fa36 	bl	8001a58 <HW_IPCC_BLE_Init>

  BLE_IoBusEvtCallBackFunction = pInitHciConf->IoBusEvtCallBack;
 800c5ec:	68fb      	ldr	r3, [r7, #12]
 800c5ee:	681b      	ldr	r3, [r3, #0]
 800c5f0:	4a08      	ldr	r2, [pc, #32]	; (800c614 <TL_BLE_Init+0x60>)
 800c5f2:	6013      	str	r3, [r2, #0]
  BLE_IoBusAclDataTxAck = pInitHciConf->IoBusAclDataTxAck;
 800c5f4:	68fb      	ldr	r3, [r7, #12]
 800c5f6:	685b      	ldr	r3, [r3, #4]
 800c5f8:	4a07      	ldr	r2, [pc, #28]	; (800c618 <TL_BLE_Init+0x64>)
 800c5fa:	6013      	str	r3, [r2, #0]

  return 0;
 800c5fc:	2300      	movs	r3, #0
}
 800c5fe:	4618      	mov	r0, r3
 800c600:	3710      	adds	r7, #16
 800c602:	46bd      	mov	sp, r7
 800c604:	bd80      	pop	{r7, pc}
 800c606:	bf00      	nop
 800c608:	200301d0 	.word	0x200301d0
 800c60c:	20030000 	.word	0x20030000
 800c610:	20030a48 	.word	0x20030a48
 800c614:	20000448 	.word	0x20000448
 800c618:	2000044c 	.word	0x2000044c

0800c61c <TL_BLE_SendCmd>:

int32_t TL_BLE_SendCmd( uint8_t* buffer, uint16_t size )
{
 800c61c:	b580      	push	{r7, lr}
 800c61e:	b082      	sub	sp, #8
 800c620:	af00      	add	r7, sp, #0
 800c622:	6078      	str	r0, [r7, #4]
 800c624:	460b      	mov	r3, r1
 800c626:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t*)(TL_RefTable.p_ble_table->pcmd_buffer))->cmdserial.type = TL_BLECMD_PKT_TYPE;
 800c628:	4b09      	ldr	r3, [pc, #36]	; (800c650 <TL_BLE_SendCmd+0x34>)
 800c62a:	685b      	ldr	r3, [r3, #4]
 800c62c:	681b      	ldr	r3, [r3, #0]
 800c62e:	2201      	movs	r2, #1
 800c630:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_BLE_CMD, TL_RefTable.p_ble_table->pcmd_buffer);
 800c632:	4b07      	ldr	r3, [pc, #28]	; (800c650 <TL_BLE_SendCmd+0x34>)
 800c634:	685b      	ldr	r3, [r3, #4]
 800c636:	681b      	ldr	r3, [r3, #0]
 800c638:	4619      	mov	r1, r3
 800c63a:	2001      	movs	r0, #1
 800c63c:	f000 f96c 	bl	800c918 <OutputDbgTrace>

  HW_IPCC_BLE_SendCmd();
 800c640:	f7f5 fa14 	bl	8001a6c <HW_IPCC_BLE_SendCmd>

  return 0;
 800c644:	2300      	movs	r3, #0
}
 800c646:	4618      	mov	r0, r3
 800c648:	3708      	adds	r7, #8
 800c64a:	46bd      	mov	sp, r7
 800c64c:	bd80      	pop	{r7, pc}
 800c64e:	bf00      	nop
 800c650:	20030000 	.word	0x20030000

0800c654 <HW_IPCC_BLE_RxEvtNot>:

void HW_IPCC_BLE_RxEvtNot(void)
{
 800c654:	b580      	push	{r7, lr}
 800c656:	b082      	sub	sp, #8
 800c658:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&EvtQueue) == FALSE)
 800c65a:	e01c      	b.n	800c696 <HW_IPCC_BLE_RxEvtNot+0x42>
  {
    LST_remove_head (&EvtQueue, (tListNode **)&phcievt);
 800c65c:	1d3b      	adds	r3, r7, #4
 800c65e:	4619      	mov	r1, r3
 800c660:	4812      	ldr	r0, [pc, #72]	; (800c6ac <HW_IPCC_BLE_RxEvtNot+0x58>)
 800c662:	f000 fc4a 	bl	800cefa <LST_remove_head>

    if ( ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 800c666:	687b      	ldr	r3, [r7, #4]
 800c668:	7a5b      	ldrb	r3, [r3, #9]
 800c66a:	2b0f      	cmp	r3, #15
 800c66c:	d003      	beq.n	800c676 <HW_IPCC_BLE_RxEvtNot+0x22>
 800c66e:	687b      	ldr	r3, [r7, #4]
 800c670:	7a5b      	ldrb	r3, [r3, #9]
 800c672:	2b0e      	cmp	r3, #14
 800c674:	d105      	bne.n	800c682 <HW_IPCC_BLE_RxEvtNot+0x2e>
    {
      OutputDbgTrace(TL_MB_BLE_CMD_RSP, (uint8_t*)phcievt);
 800c676:	687b      	ldr	r3, [r7, #4]
 800c678:	4619      	mov	r1, r3
 800c67a:	2002      	movs	r0, #2
 800c67c:	f000 f94c 	bl	800c918 <OutputDbgTrace>
 800c680:	e004      	b.n	800c68c <HW_IPCC_BLE_RxEvtNot+0x38>
    }
    else
    {
      OutputDbgTrace(TL_MB_BLE_ASYNCH_EVT, (uint8_t*)phcievt);
 800c682:	687b      	ldr	r3, [r7, #4]
 800c684:	4619      	mov	r1, r3
 800c686:	2003      	movs	r0, #3
 800c688:	f000 f946 	bl	800c918 <OutputDbgTrace>
    }

    BLE_IoBusEvtCallBackFunction(phcievt);
 800c68c:	4b08      	ldr	r3, [pc, #32]	; (800c6b0 <HW_IPCC_BLE_RxEvtNot+0x5c>)
 800c68e:	681b      	ldr	r3, [r3, #0]
 800c690:	687a      	ldr	r2, [r7, #4]
 800c692:	4610      	mov	r0, r2
 800c694:	4798      	blx	r3
  while(LST_is_empty(&EvtQueue) == FALSE)
 800c696:	4805      	ldr	r0, [pc, #20]	; (800c6ac <HW_IPCC_BLE_RxEvtNot+0x58>)
 800c698:	f000 fba8 	bl	800cdec <LST_is_empty>
 800c69c:	4603      	mov	r3, r0
 800c69e:	2b00      	cmp	r3, #0
 800c6a0:	d0dc      	beq.n	800c65c <HW_IPCC_BLE_RxEvtNot+0x8>
  }

  return;
 800c6a2:	bf00      	nop
}
 800c6a4:	3708      	adds	r7, #8
 800c6a6:	46bd      	mov	sp, r7
 800c6a8:	bd80      	pop	{r7, pc}
 800c6aa:	bf00      	nop
 800c6ac:	200301d0 	.word	0x200301d0
 800c6b0:	20000448 	.word	0x20000448

0800c6b4 <HW_IPCC_BLE_AclDataAckNot>:

  return 0;
}

void HW_IPCC_BLE_AclDataAckNot(void)
{
 800c6b4:	b580      	push	{r7, lr}
 800c6b6:	af00      	add	r7, sp, #0
  BLE_IoBusAclDataTxAck( );
 800c6b8:	4b02      	ldr	r3, [pc, #8]	; (800c6c4 <HW_IPCC_BLE_AclDataAckNot+0x10>)
 800c6ba:	681b      	ldr	r3, [r3, #0]
 800c6bc:	4798      	blx	r3

  return;
 800c6be:	bf00      	nop
}
 800c6c0:	bd80      	pop	{r7, pc}
 800c6c2:	bf00      	nop
 800c6c4:	2000044c 	.word	0x2000044c

0800c6c8 <TL_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
int32_t TL_SYS_Init( void* pConf  )
{
 800c6c8:	b580      	push	{r7, lr}
 800c6ca:	b084      	sub	sp, #16
 800c6cc:	af00      	add	r7, sp, #0
 800c6ce:	6078      	str	r0, [r7, #4]
  MB_SysTable_t  * p_systable;

  TL_SYS_InitConf_t *pInitHciConf = (TL_SYS_InitConf_t *) pConf;
 800c6d0:	687b      	ldr	r3, [r7, #4]
 800c6d2:	60fb      	str	r3, [r7, #12]

  LST_init_head (&SystemEvtQueue);
 800c6d4:	480d      	ldr	r0, [pc, #52]	; (800c70c <TL_SYS_Init+0x44>)
 800c6d6:	f000 fb79 	bl	800cdcc <LST_init_head>
  p_systable = TL_RefTable.p_sys_table;
 800c6da:	4b0d      	ldr	r3, [pc, #52]	; (800c710 <TL_SYS_Init+0x48>)
 800c6dc:	68db      	ldr	r3, [r3, #12]
 800c6de:	60bb      	str	r3, [r7, #8]
  p_systable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 800c6e0:	68fb      	ldr	r3, [r7, #12]
 800c6e2:	689a      	ldr	r2, [r3, #8]
 800c6e4:	68bb      	ldr	r3, [r7, #8]
 800c6e6:	601a      	str	r2, [r3, #0]
  p_systable->sys_queue = (uint8_t*)&SystemEvtQueue;
 800c6e8:	68bb      	ldr	r3, [r7, #8]
 800c6ea:	4a08      	ldr	r2, [pc, #32]	; (800c70c <TL_SYS_Init+0x44>)
 800c6ec:	605a      	str	r2, [r3, #4]

  HW_IPCC_SYS_Init();
 800c6ee:	f7f5 f9df 	bl	8001ab0 <HW_IPCC_SYS_Init>

  SYS_CMD_IoBusCallBackFunction = pInitHciConf->IoBusCallBackCmdEvt;
 800c6f2:	68fb      	ldr	r3, [r7, #12]
 800c6f4:	681b      	ldr	r3, [r3, #0]
 800c6f6:	4a07      	ldr	r2, [pc, #28]	; (800c714 <TL_SYS_Init+0x4c>)
 800c6f8:	6013      	str	r3, [r2, #0]
  SYS_EVT_IoBusCallBackFunction = pInitHciConf->IoBusCallBackUserEvt;
 800c6fa:	68fb      	ldr	r3, [r7, #12]
 800c6fc:	685b      	ldr	r3, [r3, #4]
 800c6fe:	4a06      	ldr	r2, [pc, #24]	; (800c718 <TL_SYS_Init+0x50>)
 800c700:	6013      	str	r3, [r2, #0]

  return 0;
 800c702:	2300      	movs	r3, #0
}
 800c704:	4618      	mov	r0, r3
 800c706:	3710      	adds	r7, #16
 800c708:	46bd      	mov	sp, r7
 800c70a:	bd80      	pop	{r7, pc}
 800c70c:	200301d8 	.word	0x200301d8
 800c710:	20030000 	.word	0x20030000
 800c714:	20000450 	.word	0x20000450
 800c718:	20000454 	.word	0x20000454

0800c71c <TL_SYS_SendCmd>:

int32_t TL_SYS_SendCmd( uint8_t* buffer, uint16_t size )
{
 800c71c:	b580      	push	{r7, lr}
 800c71e:	b082      	sub	sp, #8
 800c720:	af00      	add	r7, sp, #0
 800c722:	6078      	str	r0, [r7, #4]
 800c724:	460b      	mov	r3, r1
 800c726:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t *)(TL_RefTable.p_sys_table->pcmd_buffer))->cmdserial.type = TL_SYSCMD_PKT_TYPE;
 800c728:	4b09      	ldr	r3, [pc, #36]	; (800c750 <TL_SYS_SendCmd+0x34>)
 800c72a:	68db      	ldr	r3, [r3, #12]
 800c72c:	681b      	ldr	r3, [r3, #0]
 800c72e:	2210      	movs	r2, #16
 800c730:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_SYS_CMD, TL_RefTable.p_sys_table->pcmd_buffer);
 800c732:	4b07      	ldr	r3, [pc, #28]	; (800c750 <TL_SYS_SendCmd+0x34>)
 800c734:	68db      	ldr	r3, [r3, #12]
 800c736:	681b      	ldr	r3, [r3, #0]
 800c738:	4619      	mov	r1, r3
 800c73a:	2004      	movs	r0, #4
 800c73c:	f000 f8ec 	bl	800c918 <OutputDbgTrace>

  HW_IPCC_SYS_SendCmd();
 800c740:	f7f5 f9c0 	bl	8001ac4 <HW_IPCC_SYS_SendCmd>

  return 0;
 800c744:	2300      	movs	r3, #0
}
 800c746:	4618      	mov	r0, r3
 800c748:	3708      	adds	r7, #8
 800c74a:	46bd      	mov	sp, r7
 800c74c:	bd80      	pop	{r7, pc}
 800c74e:	bf00      	nop
 800c750:	20030000 	.word	0x20030000

0800c754 <HW_IPCC_SYS_CmdEvtNot>:

void HW_IPCC_SYS_CmdEvtNot(void)
{
 800c754:	b580      	push	{r7, lr}
 800c756:	af00      	add	r7, sp, #0
  OutputDbgTrace(TL_MB_SYS_CMD_RSP, (uint8_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 800c758:	4b07      	ldr	r3, [pc, #28]	; (800c778 <HW_IPCC_SYS_CmdEvtNot+0x24>)
 800c75a:	68db      	ldr	r3, [r3, #12]
 800c75c:	681b      	ldr	r3, [r3, #0]
 800c75e:	4619      	mov	r1, r3
 800c760:	2005      	movs	r0, #5
 800c762:	f000 f8d9 	bl	800c918 <OutputDbgTrace>

  SYS_CMD_IoBusCallBackFunction( (TL_EvtPacket_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 800c766:	4b05      	ldr	r3, [pc, #20]	; (800c77c <HW_IPCC_SYS_CmdEvtNot+0x28>)
 800c768:	681b      	ldr	r3, [r3, #0]
 800c76a:	4a03      	ldr	r2, [pc, #12]	; (800c778 <HW_IPCC_SYS_CmdEvtNot+0x24>)
 800c76c:	68d2      	ldr	r2, [r2, #12]
 800c76e:	6812      	ldr	r2, [r2, #0]
 800c770:	4610      	mov	r0, r2
 800c772:	4798      	blx	r3

  return;
 800c774:	bf00      	nop
}
 800c776:	bd80      	pop	{r7, pc}
 800c778:	20030000 	.word	0x20030000
 800c77c:	20000450 	.word	0x20000450

0800c780 <HW_IPCC_SYS_EvtNot>:

void HW_IPCC_SYS_EvtNot( void )
{
 800c780:	b580      	push	{r7, lr}
 800c782:	b082      	sub	sp, #8
 800c784:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *p_evt;

  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 800c786:	e00e      	b.n	800c7a6 <HW_IPCC_SYS_EvtNot+0x26>
  {
    LST_remove_head (&SystemEvtQueue, (tListNode **)&p_evt);
 800c788:	1d3b      	adds	r3, r7, #4
 800c78a:	4619      	mov	r1, r3
 800c78c:	480b      	ldr	r0, [pc, #44]	; (800c7bc <HW_IPCC_SYS_EvtNot+0x3c>)
 800c78e:	f000 fbb4 	bl	800cefa <LST_remove_head>

    OutputDbgTrace(TL_MB_SYS_ASYNCH_EVT, (uint8_t*)p_evt );
 800c792:	687b      	ldr	r3, [r7, #4]
 800c794:	4619      	mov	r1, r3
 800c796:	2006      	movs	r0, #6
 800c798:	f000 f8be 	bl	800c918 <OutputDbgTrace>

    SYS_EVT_IoBusCallBackFunction( p_evt );
 800c79c:	4b08      	ldr	r3, [pc, #32]	; (800c7c0 <HW_IPCC_SYS_EvtNot+0x40>)
 800c79e:	681b      	ldr	r3, [r3, #0]
 800c7a0:	687a      	ldr	r2, [r7, #4]
 800c7a2:	4610      	mov	r0, r2
 800c7a4:	4798      	blx	r3
  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 800c7a6:	4805      	ldr	r0, [pc, #20]	; (800c7bc <HW_IPCC_SYS_EvtNot+0x3c>)
 800c7a8:	f000 fb20 	bl	800cdec <LST_is_empty>
 800c7ac:	4603      	mov	r3, r0
 800c7ae:	2b00      	cmp	r3, #0
 800c7b0:	d0ea      	beq.n	800c788 <HW_IPCC_SYS_EvtNot+0x8>
  }

  return;
 800c7b2:	bf00      	nop
}
 800c7b4:	3708      	adds	r7, #8
 800c7b6:	46bd      	mov	sp, r7
 800c7b8:	bd80      	pop	{r7, pc}
 800c7ba:	bf00      	nop
 800c7bc:	200301d8 	.word	0x200301d8
 800c7c0:	20000454 	.word	0x20000454

0800c7c4 <TL_MM_Init>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void TL_MM_Init( TL_MM_Config_t *p_Config )
{
 800c7c4:	b580      	push	{r7, lr}
 800c7c6:	b082      	sub	sp, #8
 800c7c8:	af00      	add	r7, sp, #0
 800c7ca:	6078      	str	r0, [r7, #4]
  static MB_MemManagerTable_t  * p_mem_manager_table;

  LST_init_head (&FreeBufQueue);
 800c7cc:	4817      	ldr	r0, [pc, #92]	; (800c82c <TL_MM_Init+0x68>)
 800c7ce:	f000 fafd 	bl	800cdcc <LST_init_head>
  LST_init_head (&LocalFreeBufQueue);
 800c7d2:	4817      	ldr	r0, [pc, #92]	; (800c830 <TL_MM_Init+0x6c>)
 800c7d4:	f000 fafa 	bl	800cdcc <LST_init_head>

  p_mem_manager_table = TL_RefTable.p_mem_manager_table;
 800c7d8:	4b16      	ldr	r3, [pc, #88]	; (800c834 <TL_MM_Init+0x70>)
 800c7da:	691b      	ldr	r3, [r3, #16]
 800c7dc:	4a16      	ldr	r2, [pc, #88]	; (800c838 <TL_MM_Init+0x74>)
 800c7de:	6013      	str	r3, [r2, #0]

  p_mem_manager_table->blepool = p_Config->p_AsynchEvtPool;
 800c7e0:	4b15      	ldr	r3, [pc, #84]	; (800c838 <TL_MM_Init+0x74>)
 800c7e2:	681b      	ldr	r3, [r3, #0]
 800c7e4:	687a      	ldr	r2, [r7, #4]
 800c7e6:	6892      	ldr	r2, [r2, #8]
 800c7e8:	609a      	str	r2, [r3, #8]
  p_mem_manager_table->blepoolsize = p_Config->AsynchEvtPoolSize;
 800c7ea:	4b13      	ldr	r3, [pc, #76]	; (800c838 <TL_MM_Init+0x74>)
 800c7ec:	681b      	ldr	r3, [r3, #0]
 800c7ee:	687a      	ldr	r2, [r7, #4]
 800c7f0:	68d2      	ldr	r2, [r2, #12]
 800c7f2:	60da      	str	r2, [r3, #12]
  p_mem_manager_table->pevt_free_buffer_queue = (uint8_t*)&FreeBufQueue;
 800c7f4:	4b10      	ldr	r3, [pc, #64]	; (800c838 <TL_MM_Init+0x74>)
 800c7f6:	681b      	ldr	r3, [r3, #0]
 800c7f8:	4a0c      	ldr	r2, [pc, #48]	; (800c82c <TL_MM_Init+0x68>)
 800c7fa:	611a      	str	r2, [r3, #16]
  p_mem_manager_table->spare_ble_buffer = p_Config->p_BleSpareEvtBuffer;
 800c7fc:	4b0e      	ldr	r3, [pc, #56]	; (800c838 <TL_MM_Init+0x74>)
 800c7fe:	681b      	ldr	r3, [r3, #0]
 800c800:	687a      	ldr	r2, [r7, #4]
 800c802:	6812      	ldr	r2, [r2, #0]
 800c804:	601a      	str	r2, [r3, #0]
  p_mem_manager_table->spare_sys_buffer = p_Config->p_SystemSpareEvtBuffer;
 800c806:	4b0c      	ldr	r3, [pc, #48]	; (800c838 <TL_MM_Init+0x74>)
 800c808:	681b      	ldr	r3, [r3, #0]
 800c80a:	687a      	ldr	r2, [r7, #4]
 800c80c:	6852      	ldr	r2, [r2, #4]
 800c80e:	605a      	str	r2, [r3, #4]
  p_mem_manager_table->traces_evt_pool = p_Config->p_TracesEvtPool;
 800c810:	4b09      	ldr	r3, [pc, #36]	; (800c838 <TL_MM_Init+0x74>)
 800c812:	681b      	ldr	r3, [r3, #0]
 800c814:	687a      	ldr	r2, [r7, #4]
 800c816:	6912      	ldr	r2, [r2, #16]
 800c818:	615a      	str	r2, [r3, #20]
  p_mem_manager_table->tracespoolsize = p_Config->TracesEvtPoolSize;
 800c81a:	4b07      	ldr	r3, [pc, #28]	; (800c838 <TL_MM_Init+0x74>)
 800c81c:	681b      	ldr	r3, [r3, #0]
 800c81e:	687a      	ldr	r2, [r7, #4]
 800c820:	6952      	ldr	r2, [r2, #20]
 800c822:	619a      	str	r2, [r3, #24]

  return;
 800c824:	bf00      	nop
}
 800c826:	3708      	adds	r7, #8
 800c828:	46bd      	mov	sp, r7
 800c82a:	bd80      	pop	{r7, pc}
 800c82c:	200301c0 	.word	0x200301c0
 800c830:	20000440 	.word	0x20000440
 800c834:	20030000 	.word	0x20030000
 800c838:	20000458 	.word	0x20000458

0800c83c <TL_MM_EvtDone>:

void TL_MM_EvtDone(TL_EvtPacket_t * phcievt)
{
 800c83c:	b580      	push	{r7, lr}
 800c83e:	b082      	sub	sp, #8
 800c840:	af00      	add	r7, sp, #0
 800c842:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&LocalFreeBufQueue, (tListNode *)phcievt);
 800c844:	6879      	ldr	r1, [r7, #4]
 800c846:	4807      	ldr	r0, [pc, #28]	; (800c864 <TL_MM_EvtDone+0x28>)
 800c848:	f000 fb14 	bl	800ce74 <LST_insert_tail>

  OutputDbgTrace(TL_MB_MM_RELEASE_BUFFER, (uint8_t*)phcievt);
 800c84c:	6879      	ldr	r1, [r7, #4]
 800c84e:	2000      	movs	r0, #0
 800c850:	f000 f862 	bl	800c918 <OutputDbgTrace>

  HW_IPCC_MM_SendFreeBuf( SendFreeBuf );
 800c854:	4804      	ldr	r0, [pc, #16]	; (800c868 <TL_MM_EvtDone+0x2c>)
 800c856:	f7f5 f95b 	bl	8001b10 <HW_IPCC_MM_SendFreeBuf>

  return;
 800c85a:	bf00      	nop
}
 800c85c:	3708      	adds	r7, #8
 800c85e:	46bd      	mov	sp, r7
 800c860:	bd80      	pop	{r7, pc}
 800c862:	bf00      	nop
 800c864:	20000440 	.word	0x20000440
 800c868:	0800c86d 	.word	0x0800c86d

0800c86c <SendFreeBuf>:

static void SendFreeBuf( void )
{
 800c86c:	b580      	push	{r7, lr}
 800c86e:	b082      	sub	sp, #8
 800c870:	af00      	add	r7, sp, #0
  tListNode *p_node;

  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 800c872:	e00c      	b.n	800c88e <SendFreeBuf+0x22>
  {
    LST_remove_head( &LocalFreeBufQueue, (tListNode **)&p_node );
 800c874:	1d3b      	adds	r3, r7, #4
 800c876:	4619      	mov	r1, r3
 800c878:	480a      	ldr	r0, [pc, #40]	; (800c8a4 <SendFreeBuf+0x38>)
 800c87a:	f000 fb3e 	bl	800cefa <LST_remove_head>
    LST_insert_tail( (tListNode*)(TL_RefTable.p_mem_manager_table->pevt_free_buffer_queue), p_node );
 800c87e:	4b0a      	ldr	r3, [pc, #40]	; (800c8a8 <SendFreeBuf+0x3c>)
 800c880:	691b      	ldr	r3, [r3, #16]
 800c882:	691b      	ldr	r3, [r3, #16]
 800c884:	687a      	ldr	r2, [r7, #4]
 800c886:	4611      	mov	r1, r2
 800c888:	4618      	mov	r0, r3
 800c88a:	f000 faf3 	bl	800ce74 <LST_insert_tail>
  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 800c88e:	4805      	ldr	r0, [pc, #20]	; (800c8a4 <SendFreeBuf+0x38>)
 800c890:	f000 faac 	bl	800cdec <LST_is_empty>
 800c894:	4603      	mov	r3, r0
 800c896:	2b00      	cmp	r3, #0
 800c898:	d0ec      	beq.n	800c874 <SendFreeBuf+0x8>
  }

  return;
 800c89a:	bf00      	nop
}
 800c89c:	3708      	adds	r7, #8
 800c89e:	46bd      	mov	sp, r7
 800c8a0:	bd80      	pop	{r7, pc}
 800c8a2:	bf00      	nop
 800c8a4:	20000440 	.word	0x20000440
 800c8a8:	20030000 	.word	0x20030000

0800c8ac <TL_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void TL_TRACES_Init( void )
{
 800c8ac:	b580      	push	{r7, lr}
 800c8ae:	af00      	add	r7, sp, #0
  LST_init_head (&TracesEvtQueue);
 800c8b0:	4805      	ldr	r0, [pc, #20]	; (800c8c8 <TL_TRACES_Init+0x1c>)
 800c8b2:	f000 fa8b 	bl	800cdcc <LST_init_head>

  TL_RefTable.p_traces_table->traces_queue = (uint8_t*)&TracesEvtQueue;
 800c8b6:	4b05      	ldr	r3, [pc, #20]	; (800c8cc <TL_TRACES_Init+0x20>)
 800c8b8:	695b      	ldr	r3, [r3, #20]
 800c8ba:	4a03      	ldr	r2, [pc, #12]	; (800c8c8 <TL_TRACES_Init+0x1c>)
 800c8bc:	601a      	str	r2, [r3, #0]

  HW_IPCC_TRACES_Init();
 800c8be:	f7f5 f95d 	bl	8001b7c <HW_IPCC_TRACES_Init>

  return;
 800c8c2:	bf00      	nop
}
 800c8c4:	bd80      	pop	{r7, pc}
 800c8c6:	bf00      	nop
 800c8c8:	200301c8 	.word	0x200301c8
 800c8cc:	20030000 	.word	0x20030000

0800c8d0 <HW_IPCC_TRACES_EvtNot>:

void HW_IPCC_TRACES_EvtNot(void)
{
 800c8d0:	b580      	push	{r7, lr}
 800c8d2:	b082      	sub	sp, #8
 800c8d4:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 800c8d6:	e008      	b.n	800c8ea <HW_IPCC_TRACES_EvtNot+0x1a>
  {
    LST_remove_head (&TracesEvtQueue, (tListNode **)&phcievt);
 800c8d8:	1d3b      	adds	r3, r7, #4
 800c8da:	4619      	mov	r1, r3
 800c8dc:	4808      	ldr	r0, [pc, #32]	; (800c900 <HW_IPCC_TRACES_EvtNot+0x30>)
 800c8de:	f000 fb0c 	bl	800cefa <LST_remove_head>
    TL_TRACES_EvtReceived( phcievt );
 800c8e2:	687b      	ldr	r3, [r7, #4]
 800c8e4:	4618      	mov	r0, r3
 800c8e6:	f000 f80d 	bl	800c904 <TL_TRACES_EvtReceived>
  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 800c8ea:	4805      	ldr	r0, [pc, #20]	; (800c900 <HW_IPCC_TRACES_EvtNot+0x30>)
 800c8ec:	f000 fa7e 	bl	800cdec <LST_is_empty>
 800c8f0:	4603      	mov	r3, r0
 800c8f2:	2b00      	cmp	r3, #0
 800c8f4:	d0f0      	beq.n	800c8d8 <HW_IPCC_TRACES_EvtNot+0x8>
  }

  return;
 800c8f6:	bf00      	nop
}
 800c8f8:	3708      	adds	r7, #8
 800c8fa:	46bd      	mov	sp, r7
 800c8fc:	bd80      	pop	{r7, pc}
 800c8fe:	bf00      	nop
 800c900:	200301c8 	.word	0x200301c8

0800c904 <TL_TRACES_EvtReceived>:

__WEAK void TL_TRACES_EvtReceived( TL_EvtPacket_t * hcievt )
{
 800c904:	b480      	push	{r7}
 800c906:	b083      	sub	sp, #12
 800c908:	af00      	add	r7, sp, #0
 800c90a:	6078      	str	r0, [r7, #4]
  (void)(hcievt);
}
 800c90c:	bf00      	nop
 800c90e:	370c      	adds	r7, #12
 800c910:	46bd      	mov	sp, r7
 800c912:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c916:	4770      	bx	lr

0800c918 <OutputDbgTrace>:

/******************************************************************************
 * DEBUG INFORMATION
 ******************************************************************************/
static void OutputDbgTrace(TL_MB_PacketType_t packet_type, uint8_t* buffer)
{
 800c918:	b480      	push	{r7}
 800c91a:	b085      	sub	sp, #20
 800c91c:	af00      	add	r7, sp, #0
 800c91e:	4603      	mov	r3, r0
 800c920:	6039      	str	r1, [r7, #0]
 800c922:	71fb      	strb	r3, [r7, #7]
  TL_EvtPacket_t *p_evt_packet;
  TL_CmdPacket_t *p_cmd_packet;

  switch(packet_type)
 800c924:	79fb      	ldrb	r3, [r7, #7]
 800c926:	2b06      	cmp	r3, #6
 800c928:	d849      	bhi.n	800c9be <OutputDbgTrace+0xa6>
 800c92a:	a201      	add	r2, pc, #4	; (adr r2, 800c930 <OutputDbgTrace+0x18>)
 800c92c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c930:	0800c94d 	.word	0x0800c94d
 800c934:	0800c96f 	.word	0x0800c96f
 800c938:	0800c975 	.word	0x0800c975
 800c93c:	0800c98f 	.word	0x0800c98f
 800c940:	0800c99b 	.word	0x0800c99b
 800c944:	0800c9a1 	.word	0x0800c9a1
 800c948:	0800c9b3 	.word	0x0800c9b3
  {
    case TL_MB_MM_RELEASE_BUFFER:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800c94c:	683b      	ldr	r3, [r7, #0]
 800c94e:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 800c950:	68fb      	ldr	r3, [r7, #12]
 800c952:	7a5b      	ldrb	r3, [r3, #9]
 800c954:	2b0f      	cmp	r3, #15
 800c956:	d004      	beq.n	800c962 <OutputDbgTrace+0x4a>
 800c958:	2bff      	cmp	r3, #255	; 0xff
 800c95a:	d004      	beq.n	800c966 <OutputDbgTrace+0x4e>
 800c95c:	2b0e      	cmp	r3, #14
 800c95e:	d004      	beq.n	800c96a <OutputDbgTrace+0x52>
          break;

        default:
          TL_MM_DBG_MSG("mm evt released: 0x%02X", p_evt_packet->evtserial.evt.evtcode);
          TL_MM_DBG_MSG(" buffer addr: 0x%08X", p_evt_packet);
          break;
 800c960:	e004      	b.n	800c96c <OutputDbgTrace+0x54>
          break;
 800c962:	bf00      	nop
 800c964:	e02c      	b.n	800c9c0 <OutputDbgTrace+0xa8>
          break;
 800c966:	bf00      	nop
 800c968:	e02a      	b.n	800c9c0 <OutputDbgTrace+0xa8>
          break;
 800c96a:	bf00      	nop
      }

      TL_MM_DBG_MSG("\r\n");
      break;
 800c96c:	e028      	b.n	800c9c0 <OutputDbgTrace+0xa8>

    case TL_MB_BLE_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 800c96e:	683b      	ldr	r3, [r7, #0]
 800c970:	60bb      	str	r3, [r7, #8]
        TL_HCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 800c972:	e025      	b.n	800c9c0 <OutputDbgTrace+0xa8>

    case TL_MB_BLE_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800c974:	683b      	ldr	r3, [r7, #0]
 800c976:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 800c978:	68fb      	ldr	r3, [r7, #12]
 800c97a:	7a5b      	ldrb	r3, [r3, #9]
 800c97c:	2b0e      	cmp	r3, #14
 800c97e:	d002      	beq.n	800c986 <OutputDbgTrace+0x6e>
 800c980:	2b0f      	cmp	r3, #15
 800c982:	d002      	beq.n	800c98a <OutputDbgTrace+0x72>
          }
          break;

        default:
          TL_HCI_CMD_DBG_MSG("unknown ble rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 800c984:	e002      	b.n	800c98c <OutputDbgTrace+0x74>
          break;
 800c986:	bf00      	nop
 800c988:	e01a      	b.n	800c9c0 <OutputDbgTrace+0xa8>
          break;
 800c98a:	bf00      	nop
      }

      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800c98c:	e018      	b.n	800c9c0 <OutputDbgTrace+0xa8>

    case TL_MB_BLE_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800c98e:	683b      	ldr	r3, [r7, #0]
 800c990:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 800c992:	68fb      	ldr	r3, [r7, #12]
 800c994:	7a5b      	ldrb	r3, [r3, #9]
 800c996:	2bff      	cmp	r3, #255	; 0xff
      }

      TL_HCI_EVT_DBG_MSG("\r\n");

      TL_HCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800c998:	e012      	b.n	800c9c0 <OutputDbgTrace+0xa8>

    case TL_MB_SYS_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 800c99a:	683b      	ldr	r3, [r7, #0]
 800c99c:	60bb      	str	r3, [r7, #8]
        TL_SHCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 800c99e:	e00f      	b.n	800c9c0 <OutputDbgTrace+0xa8>

    case TL_MB_SYS_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800c9a0:	683b      	ldr	r3, [r7, #0]
 800c9a2:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 800c9a4:	68fb      	ldr	r3, [r7, #12]
 800c9a6:	7a5b      	ldrb	r3, [r3, #9]
 800c9a8:	2b0e      	cmp	r3, #14
 800c9aa:	d000      	beq.n	800c9ae <OutputDbgTrace+0x96>
          }
          break;

        default:
          TL_SHCI_CMD_DBG_MSG("unknown sys rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 800c9ac:	e000      	b.n	800c9b0 <OutputDbgTrace+0x98>
          break;
 800c9ae:	bf00      	nop
      }

      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800c9b0:	e006      	b.n	800c9c0 <OutputDbgTrace+0xa8>

    case  TL_MB_SYS_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800c9b2:	683b      	ldr	r3, [r7, #0]
 800c9b4:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 800c9b6:	68fb      	ldr	r3, [r7, #12]
 800c9b8:	7a5b      	ldrb	r3, [r3, #9]
 800c9ba:	2bff      	cmp	r3, #255	; 0xff
      }

      TL_SHCI_EVT_DBG_MSG("\r\n");

      TL_SHCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800c9bc:	e000      	b.n	800c9c0 <OutputDbgTrace+0xa8>

    default:
      break;
 800c9be:	bf00      	nop
  }

  return;
 800c9c0:	bf00      	nop
}
 800c9c2:	3714      	adds	r7, #20
 800c9c4:	46bd      	mov	sp, r7
 800c9c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9ca:	4770      	bx	lr

0800c9cc <PeerToPeer_Event_Handler>:
 * @brief  Event handler
 * @param  Event: Address of the buffer holding the Event
 * @retval Ack: Return whether the Event has been managed or not
 */
static SVCCTL_EvtAckStatus_t PeerToPeer_Event_Handler(void *Event)
{
 800c9cc:	b580      	push	{r7, lr}
 800c9ce:	b08a      	sub	sp, #40	; 0x28
 800c9d0:	af00      	add	r7, sp, #0
 800c9d2:	6078      	str	r0, [r7, #4]
  hci_event_pckt *event_pckt;
  evt_blue_aci *blue_evt;
  aci_gatt_attribute_modified_event_rp0    * attribute_modified;
  P2PS_STM_App_Notification_evt_t Notification;

  return_value = SVCCTL_EvtNotAck;
 800c9d4:	2300      	movs	r3, #0
 800c9d6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  event_pckt = (hci_event_pckt *)(((hci_uart_pckt*)Event)->data);
 800c9da:	687b      	ldr	r3, [r7, #4]
 800c9dc:	3301      	adds	r3, #1
 800c9de:	623b      	str	r3, [r7, #32]

  switch(event_pckt->evt)
 800c9e0:	6a3b      	ldr	r3, [r7, #32]
 800c9e2:	781b      	ldrb	r3, [r3, #0]
 800c9e4:	2bff      	cmp	r3, #255	; 0xff
 800c9e6:	d000      	beq.n	800c9ea <PeerToPeer_Event_Handler+0x1e>
      }
    }
    break; /* HCI_EVT_VENDOR_SPECIFIC */

    default:
      break;
 800c9e8:	e04a      	b.n	800ca80 <PeerToPeer_Event_Handler+0xb4>
      blue_evt = (evt_blue_aci*)event_pckt->data;
 800c9ea:	6a3b      	ldr	r3, [r7, #32]
 800c9ec:	3302      	adds	r3, #2
 800c9ee:	61fb      	str	r3, [r7, #28]
      switch(blue_evt->ecode)
 800c9f0:	69fb      	ldr	r3, [r7, #28]
 800c9f2:	881b      	ldrh	r3, [r3, #0]
 800c9f4:	b29b      	uxth	r3, r3
 800c9f6:	461a      	mov	r2, r3
 800c9f8:	f640 4301 	movw	r3, #3073	; 0xc01
 800c9fc:	429a      	cmp	r2, r3
 800c9fe:	d000      	beq.n	800ca02 <PeerToPeer_Event_Handler+0x36>
          break;
 800ca00:	e03d      	b.n	800ca7e <PeerToPeer_Event_Handler+0xb2>
          attribute_modified = (aci_gatt_attribute_modified_event_rp0*)blue_evt->data;
 800ca02:	69fb      	ldr	r3, [r7, #28]
 800ca04:	3302      	adds	r3, #2
 800ca06:	61bb      	str	r3, [r7, #24]
            if(attribute_modified->Attr_Handle == (aPeerToPeerContext.P2PNotifyServerToClientCharHdle + 2))
 800ca08:	69bb      	ldr	r3, [r7, #24]
 800ca0a:	885b      	ldrh	r3, [r3, #2]
 800ca0c:	b29b      	uxth	r3, r3
 800ca0e:	461a      	mov	r2, r3
 800ca10:	4b1e      	ldr	r3, [pc, #120]	; (800ca8c <PeerToPeer_Event_Handler+0xc0>)
 800ca12:	889b      	ldrh	r3, [r3, #4]
 800ca14:	3302      	adds	r3, #2
 800ca16:	429a      	cmp	r2, r3
 800ca18:	d118      	bne.n	800ca4c <PeerToPeer_Event_Handler+0x80>
              return_value = SVCCTL_EvtAckFlowEnable;
 800ca1a:	2301      	movs	r3, #1
 800ca1c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
              if(attribute_modified->Attr_Data[0] & COMSVC_Notification)
 800ca20:	69bb      	ldr	r3, [r7, #24]
 800ca22:	7a1b      	ldrb	r3, [r3, #8]
 800ca24:	f003 0301 	and.w	r3, r3, #1
 800ca28:	2b00      	cmp	r3, #0
 800ca2a:	d007      	beq.n	800ca3c <PeerToPeer_Event_Handler+0x70>
                Notification.P2P_Evt_Opcode = P2PS_STM__NOTIFY_ENABLED_EVT;
 800ca2c:	2300      	movs	r3, #0
 800ca2e:	723b      	strb	r3, [r7, #8]
                P2PS_STM_App_Notification(&Notification);
 800ca30:	f107 0308 	add.w	r3, r7, #8
 800ca34:	4618      	mov	r0, r3
 800ca36:	f7f4 fd4b 	bl	80014d0 <P2PS_STM_App_Notification>
        break;
 800ca3a:	e01f      	b.n	800ca7c <PeerToPeer_Event_Handler+0xb0>
                Notification.P2P_Evt_Opcode = P2PS_STM_NOTIFY_DISABLED_EVT;
 800ca3c:	2301      	movs	r3, #1
 800ca3e:	723b      	strb	r3, [r7, #8]
                P2PS_STM_App_Notification(&Notification);
 800ca40:	f107 0308 	add.w	r3, r7, #8
 800ca44:	4618      	mov	r0, r3
 800ca46:	f7f4 fd43 	bl	80014d0 <P2PS_STM_App_Notification>
        break;
 800ca4a:	e017      	b.n	800ca7c <PeerToPeer_Event_Handler+0xb0>
            else if(attribute_modified->Attr_Handle == (aPeerToPeerContext.P2PWriteClientToServerCharHdle + 1))
 800ca4c:	69bb      	ldr	r3, [r7, #24]
 800ca4e:	885b      	ldrh	r3, [r3, #2]
 800ca50:	b29b      	uxth	r3, r3
 800ca52:	461a      	mov	r2, r3
 800ca54:	4b0d      	ldr	r3, [pc, #52]	; (800ca8c <PeerToPeer_Event_Handler+0xc0>)
 800ca56:	885b      	ldrh	r3, [r3, #2]
 800ca58:	3301      	adds	r3, #1
 800ca5a:	429a      	cmp	r2, r3
 800ca5c:	d10e      	bne.n	800ca7c <PeerToPeer_Event_Handler+0xb0>
              Notification.P2P_Evt_Opcode = P2PS_STM_WRITE_EVT;
 800ca5e:	2303      	movs	r3, #3
 800ca60:	723b      	strb	r3, [r7, #8]
              Notification.DataTransfered.Length=attribute_modified->Attr_Data_Length;
 800ca62:	69bb      	ldr	r3, [r7, #24]
 800ca64:	88db      	ldrh	r3, [r3, #6]
 800ca66:	b29b      	uxth	r3, r3
 800ca68:	b2db      	uxtb	r3, r3
 800ca6a:	743b      	strb	r3, [r7, #16]
              Notification.DataTransfered.pPayload=attribute_modified->Attr_Data;
 800ca6c:	69bb      	ldr	r3, [r7, #24]
 800ca6e:	3308      	adds	r3, #8
 800ca70:	60fb      	str	r3, [r7, #12]
              P2PS_STM_App_Notification(&Notification);
 800ca72:	f107 0308 	add.w	r3, r7, #8
 800ca76:	4618      	mov	r0, r3
 800ca78:	f7f4 fd2a 	bl	80014d0 <P2PS_STM_App_Notification>
        break;
 800ca7c:	bf00      	nop
    break; /* HCI_EVT_VENDOR_SPECIFIC */
 800ca7e:	bf00      	nop
  }

  return(return_value);
 800ca80:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}/* end SVCCTL_EvtAckStatus_t */
 800ca84:	4618      	mov	r0, r3
 800ca86:	3728      	adds	r7, #40	; 0x28
 800ca88:	46bd      	mov	sp, r7
 800ca8a:	bd80      	pop	{r7, pc}
 800ca8c:	2000039c 	.word	0x2000039c

0800ca90 <P2PS_STM_Init>:
 * @brief  Service initialization
 * @param  None
 * @retval None
 */
void P2PS_STM_Init(void)
{
 800ca90:	b580      	push	{r7, lr}
 800ca92:	b08a      	sub	sp, #40	; 0x28
 800ca94:	af06      	add	r7, sp, #24
  Char_UUID_t  uuid16;

  /**
   *	Register the event handler to the BLE controller
   */
  SVCCTL_RegisterSvcHandler(PeerToPeer_Event_Handler);
 800ca96:	484a      	ldr	r0, [pc, #296]	; (800cbc0 <P2PS_STM_Init+0x130>)
 800ca98:	f7fe fa30 	bl	800aefc <SVCCTL_RegisterSvcHandler>
     *                                2 for P2P Write characteristic +
     *                                2 for P2P Notify characteristic +
     *                                1 for client char configuration descriptor +
     *
     */
    COPY_P2P_SERVICE_UUID(uuid16.Char_UUID_128);
 800ca9c:	238f      	movs	r3, #143	; 0x8f
 800ca9e:	703b      	strb	r3, [r7, #0]
 800caa0:	23e5      	movs	r3, #229	; 0xe5
 800caa2:	707b      	strb	r3, [r7, #1]
 800caa4:	23b3      	movs	r3, #179	; 0xb3
 800caa6:	70bb      	strb	r3, [r7, #2]
 800caa8:	23d5      	movs	r3, #213	; 0xd5
 800caaa:	70fb      	strb	r3, [r7, #3]
 800caac:	232e      	movs	r3, #46	; 0x2e
 800caae:	713b      	strb	r3, [r7, #4]
 800cab0:	237f      	movs	r3, #127	; 0x7f
 800cab2:	717b      	strb	r3, [r7, #5]
 800cab4:	234a      	movs	r3, #74	; 0x4a
 800cab6:	71bb      	strb	r3, [r7, #6]
 800cab8:	2398      	movs	r3, #152	; 0x98
 800caba:	71fb      	strb	r3, [r7, #7]
 800cabc:	232a      	movs	r3, #42	; 0x2a
 800cabe:	723b      	strb	r3, [r7, #8]
 800cac0:	2348      	movs	r3, #72	; 0x48
 800cac2:	727b      	strb	r3, [r7, #9]
 800cac4:	237a      	movs	r3, #122	; 0x7a
 800cac6:	72bb      	strb	r3, [r7, #10]
 800cac8:	23cc      	movs	r3, #204	; 0xcc
 800caca:	72fb      	strb	r3, [r7, #11]
 800cacc:	2340      	movs	r3, #64	; 0x40
 800cace:	733b      	strb	r3, [r7, #12]
 800cad0:	23fe      	movs	r3, #254	; 0xfe
 800cad2:	737b      	strb	r3, [r7, #13]
 800cad4:	2300      	movs	r3, #0
 800cad6:	73bb      	strb	r3, [r7, #14]
 800cad8:	2300      	movs	r3, #0
 800cada:	73fb      	strb	r3, [r7, #15]
    aci_gatt_add_service(UUID_TYPE_128,
 800cadc:	4639      	mov	r1, r7
 800cade:	4b39      	ldr	r3, [pc, #228]	; (800cbc4 <P2PS_STM_Init+0x134>)
 800cae0:	9300      	str	r3, [sp, #0]
 800cae2:	2308      	movs	r3, #8
 800cae4:	2201      	movs	r2, #1
 800cae6:	2002      	movs	r0, #2
 800cae8:	f7fe fe39 	bl	800b75e <aci_gatt_add_service>
                      &(aPeerToPeerContext.PeerToPeerSvcHdle));

    /**
     *  Add LED Characteristic
     */
    COPY_P2P_WRITE_CHAR_UUID(uuid16.Char_UUID_128);
 800caec:	2319      	movs	r3, #25
 800caee:	703b      	strb	r3, [r7, #0]
 800caf0:	23ed      	movs	r3, #237	; 0xed
 800caf2:	707b      	strb	r3, [r7, #1]
 800caf4:	2382      	movs	r3, #130	; 0x82
 800caf6:	70bb      	strb	r3, [r7, #2]
 800caf8:	23ae      	movs	r3, #174	; 0xae
 800cafa:	70fb      	strb	r3, [r7, #3]
 800cafc:	23ed      	movs	r3, #237	; 0xed
 800cafe:	713b      	strb	r3, [r7, #4]
 800cb00:	2321      	movs	r3, #33	; 0x21
 800cb02:	717b      	strb	r3, [r7, #5]
 800cb04:	234c      	movs	r3, #76	; 0x4c
 800cb06:	71bb      	strb	r3, [r7, #6]
 800cb08:	239d      	movs	r3, #157	; 0x9d
 800cb0a:	71fb      	strb	r3, [r7, #7]
 800cb0c:	2341      	movs	r3, #65	; 0x41
 800cb0e:	723b      	strb	r3, [r7, #8]
 800cb10:	2345      	movs	r3, #69	; 0x45
 800cb12:	727b      	strb	r3, [r7, #9]
 800cb14:	2322      	movs	r3, #34	; 0x22
 800cb16:	72bb      	strb	r3, [r7, #10]
 800cb18:	238e      	movs	r3, #142	; 0x8e
 800cb1a:	72fb      	strb	r3, [r7, #11]
 800cb1c:	2341      	movs	r3, #65	; 0x41
 800cb1e:	733b      	strb	r3, [r7, #12]
 800cb20:	23fe      	movs	r3, #254	; 0xfe
 800cb22:	737b      	strb	r3, [r7, #13]
 800cb24:	2300      	movs	r3, #0
 800cb26:	73bb      	strb	r3, [r7, #14]
 800cb28:	2300      	movs	r3, #0
 800cb2a:	73fb      	strb	r3, [r7, #15]
    aci_gatt_add_char(aPeerToPeerContext.PeerToPeerSvcHdle,
 800cb2c:	4b25      	ldr	r3, [pc, #148]	; (800cbc4 <P2PS_STM_Init+0x134>)
 800cb2e:	8818      	ldrh	r0, [r3, #0]
 800cb30:	463a      	mov	r2, r7
 800cb32:	4b25      	ldr	r3, [pc, #148]	; (800cbc8 <P2PS_STM_Init+0x138>)
 800cb34:	9305      	str	r3, [sp, #20]
 800cb36:	2301      	movs	r3, #1
 800cb38:	9304      	str	r3, [sp, #16]
 800cb3a:	230a      	movs	r3, #10
 800cb3c:	9303      	str	r3, [sp, #12]
 800cb3e:	2301      	movs	r3, #1
 800cb40:	9302      	str	r3, [sp, #8]
 800cb42:	2300      	movs	r3, #0
 800cb44:	9301      	str	r3, [sp, #4]
 800cb46:	2306      	movs	r3, #6
 800cb48:	9300      	str	r3, [sp, #0]
 800cb4a:	2314      	movs	r3, #20
 800cb4c:	2102      	movs	r1, #2
 800cb4e:	f7fe feb5 	bl	800b8bc <aci_gatt_add_char>
                      &(aPeerToPeerContext.P2PWriteClientToServerCharHdle));

    /**
     *   Add Button Characteristic
     */
    COPY_P2P_NOTIFY_UUID(uuid16.Char_UUID_128);
 800cb52:	2319      	movs	r3, #25
 800cb54:	703b      	strb	r3, [r7, #0]
 800cb56:	23ed      	movs	r3, #237	; 0xed
 800cb58:	707b      	strb	r3, [r7, #1]
 800cb5a:	2382      	movs	r3, #130	; 0x82
 800cb5c:	70bb      	strb	r3, [r7, #2]
 800cb5e:	23ae      	movs	r3, #174	; 0xae
 800cb60:	70fb      	strb	r3, [r7, #3]
 800cb62:	23ed      	movs	r3, #237	; 0xed
 800cb64:	713b      	strb	r3, [r7, #4]
 800cb66:	2321      	movs	r3, #33	; 0x21
 800cb68:	717b      	strb	r3, [r7, #5]
 800cb6a:	234c      	movs	r3, #76	; 0x4c
 800cb6c:	71bb      	strb	r3, [r7, #6]
 800cb6e:	239d      	movs	r3, #157	; 0x9d
 800cb70:	71fb      	strb	r3, [r7, #7]
 800cb72:	2341      	movs	r3, #65	; 0x41
 800cb74:	723b      	strb	r3, [r7, #8]
 800cb76:	2345      	movs	r3, #69	; 0x45
 800cb78:	727b      	strb	r3, [r7, #9]
 800cb7a:	2322      	movs	r3, #34	; 0x22
 800cb7c:	72bb      	strb	r3, [r7, #10]
 800cb7e:	238e      	movs	r3, #142	; 0x8e
 800cb80:	72fb      	strb	r3, [r7, #11]
 800cb82:	2342      	movs	r3, #66	; 0x42
 800cb84:	733b      	strb	r3, [r7, #12]
 800cb86:	23fe      	movs	r3, #254	; 0xfe
 800cb88:	737b      	strb	r3, [r7, #13]
 800cb8a:	2300      	movs	r3, #0
 800cb8c:	73bb      	strb	r3, [r7, #14]
 800cb8e:	2300      	movs	r3, #0
 800cb90:	73fb      	strb	r3, [r7, #15]
    aci_gatt_add_char(aPeerToPeerContext.PeerToPeerSvcHdle,
 800cb92:	4b0c      	ldr	r3, [pc, #48]	; (800cbc4 <P2PS_STM_Init+0x134>)
 800cb94:	8818      	ldrh	r0, [r3, #0]
 800cb96:	463a      	mov	r2, r7
 800cb98:	4b0c      	ldr	r3, [pc, #48]	; (800cbcc <P2PS_STM_Init+0x13c>)
 800cb9a:	9305      	str	r3, [sp, #20]
 800cb9c:	2301      	movs	r3, #1
 800cb9e:	9304      	str	r3, [sp, #16]
 800cba0:	230a      	movs	r3, #10
 800cba2:	9303      	str	r3, [sp, #12]
 800cba4:	2301      	movs	r3, #1
 800cba6:	9302      	str	r3, [sp, #8]
 800cba8:	2300      	movs	r3, #0
 800cbaa:	9301      	str	r3, [sp, #4]
 800cbac:	2310      	movs	r3, #16
 800cbae:	9300      	str	r3, [sp, #0]
 800cbb0:	2314      	movs	r3, #20
 800cbb2:	2102      	movs	r1, #2
 800cbb4:	f7fe fe82 	bl	800b8bc <aci_gatt_add_char>
                      0,
                      &(aPeerToPeerContext.RebootReqCharHdle));
#endif


  return;
 800cbb8:	bf00      	nop
}
 800cbba:	3710      	adds	r7, #16
 800cbbc:	46bd      	mov	sp, r7
 800cbbe:	bd80      	pop	{r7, pc}
 800cbc0:	0800c9cd 	.word	0x0800c9cd
 800cbc4:	2000039c 	.word	0x2000039c
 800cbc8:	2000039e 	.word	0x2000039e
 800cbcc:	200003a0 	.word	0x200003a0

0800cbd0 <P2PS_STM_App_Update_Int8>:

  return result;
}

tBleStatus P2PS_STM_App_Update_Int8(uint16_t UUID, uint8_t *pPayload, uint8_t num_bytes)
{
 800cbd0:	b580      	push	{r7, lr}
 800cbd2:	b086      	sub	sp, #24
 800cbd4:	af02      	add	r7, sp, #8
 800cbd6:	4603      	mov	r3, r0
 800cbd8:	6039      	str	r1, [r7, #0]
 800cbda:	80fb      	strh	r3, [r7, #6]
 800cbdc:	4613      	mov	r3, r2
 800cbde:	717b      	strb	r3, [r7, #5]
  tBleStatus result = BLE_STATUS_INVALID_PARAMS;
 800cbe0:	2342      	movs	r3, #66	; 0x42
 800cbe2:	73fb      	strb	r3, [r7, #15]
  switch(UUID)
 800cbe4:	88fb      	ldrh	r3, [r7, #6]
 800cbe6:	f64f 6242 	movw	r2, #65090	; 0xfe42
 800cbea:	4293      	cmp	r3, r2
 800cbec:	d000      	beq.n	800cbf0 <P2PS_STM_App_Update_Int8+0x20>
                             (uint8_t *)  pPayload);

      break;

    default:
      break;
 800cbee:	e00d      	b.n	800cc0c <P2PS_STM_App_Update_Int8+0x3c>
     result = aci_gatt_update_char_value(aPeerToPeerContext.PeerToPeerSvcHdle,
 800cbf0:	4b09      	ldr	r3, [pc, #36]	; (800cc18 <P2PS_STM_App_Update_Int8+0x48>)
 800cbf2:	8818      	ldrh	r0, [r3, #0]
 800cbf4:	4b08      	ldr	r3, [pc, #32]	; (800cc18 <P2PS_STM_App_Update_Int8+0x48>)
 800cbf6:	8899      	ldrh	r1, [r3, #4]
 800cbf8:	797a      	ldrb	r2, [r7, #5]
 800cbfa:	683b      	ldr	r3, [r7, #0]
 800cbfc:	9300      	str	r3, [sp, #0]
 800cbfe:	4613      	mov	r3, r2
 800cc00:	2200      	movs	r2, #0
 800cc02:	f7fe ff45 	bl	800ba90 <aci_gatt_update_char_value>
 800cc06:	4603      	mov	r3, r0
 800cc08:	73fb      	strb	r3, [r7, #15]
      break;
 800cc0a:	bf00      	nop
  }

  return result;
 800cc0c:	7bfb      	ldrb	r3, [r7, #15]
}/* end P2PS_STM_Init() */
 800cc0e:	4618      	mov	r0, r3
 800cc10:	3710      	adds	r7, #16
 800cc12:	46bd      	mov	sp, r7
 800cc14:	bd80      	pop	{r7, pc}
 800cc16:	bf00      	nop
 800cc18:	2000039c 	.word	0x2000039c

0800cc1c <DbgTrace_TxCpltCallback>:
 * @note   Indicate the end of the transmission of a DBG_TRACE trace buffer to DBG_TRACE USART. If queue
 *         contains new trace data to transmit, start a new transmission.
 * @retval None
 */
static void DbgTrace_TxCpltCallback(void)
{
 800cc1c:	b580      	push	{r7, lr}
 800cc1e:	b086      	sub	sp, #24
 800cc20:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800cc22:	f3ef 8310 	mrs	r3, PRIMASK
 800cc26:	60fb      	str	r3, [r7, #12]
  return(result);
 800cc28:	68fb      	ldr	r3, [r7, #12]
#if (DBG_TRACE_USE_CIRCULAR_QUEUE != 0)
  uint8_t* buf;
  uint16_t bufSize;

  BACKUP_PRIMASK();
 800cc2a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800cc2c:	b672      	cpsid	i

  DISABLE_IRQ();			/**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  /* Remove element just sent to UART */
  CircularQueue_Remove(&MsgDbgTraceQueue,&bufSize);
 800cc2e:	1cbb      	adds	r3, r7, #2
 800cc30:	4619      	mov	r1, r3
 800cc32:	4812      	ldr	r0, [pc, #72]	; (800cc7c <DbgTrace_TxCpltCallback+0x60>)
 800cc34:	f000 fbd7 	bl	800d3e6 <CircularQueue_Remove>

  /* Sense if new data to be sent */
  buf=CircularQueue_Sense(&MsgDbgTraceQueue,&bufSize);
 800cc38:	1cbb      	adds	r3, r7, #2
 800cc3a:	4619      	mov	r1, r3
 800cc3c:	480f      	ldr	r0, [pc, #60]	; (800cc7c <DbgTrace_TxCpltCallback+0x60>)
 800cc3e:	f000 fcc6 	bl	800d5ce <CircularQueue_Sense>
 800cc42:	6138      	str	r0, [r7, #16]


  if ( buf != NULL) 
 800cc44:	693b      	ldr	r3, [r7, #16]
 800cc46:	2b00      	cmp	r3, #0
 800cc48:	d00b      	beq.n	800cc62 <DbgTrace_TxCpltCallback+0x46>
 800cc4a:	697b      	ldr	r3, [r7, #20]
 800cc4c:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800cc4e:	68bb      	ldr	r3, [r7, #8]
 800cc50:	f383 8810 	msr	PRIMASK, r3
  {
    RESTORE_PRIMASK();
    DbgOutputTraces((uint8_t*)buf, bufSize, DbgTrace_TxCpltCallback);
 800cc54:	887b      	ldrh	r3, [r7, #2]
 800cc56:	4a0a      	ldr	r2, [pc, #40]	; (800cc80 <DbgTrace_TxCpltCallback+0x64>)
 800cc58:	4619      	mov	r1, r3
 800cc5a:	6938      	ldr	r0, [r7, #16]
 800cc5c:	f7f5 f902 	bl	8001e64 <DbgOutputTraces>

  DbgTracePeripheralReady = SET;

  RESTORE_PRIMASK();
#endif
}
 800cc60:	e007      	b.n	800cc72 <DbgTrace_TxCpltCallback+0x56>
    DbgTracePeripheralReady = SET;
 800cc62:	4b08      	ldr	r3, [pc, #32]	; (800cc84 <DbgTrace_TxCpltCallback+0x68>)
 800cc64:	2201      	movs	r2, #1
 800cc66:	701a      	strb	r2, [r3, #0]
 800cc68:	697b      	ldr	r3, [r7, #20]
 800cc6a:	607b      	str	r3, [r7, #4]
 800cc6c:	687b      	ldr	r3, [r7, #4]
 800cc6e:	f383 8810 	msr	PRIMASK, r3
}
 800cc72:	bf00      	nop
 800cc74:	3718      	adds	r7, #24
 800cc76:	46bd      	mov	sp, r7
 800cc78:	bd80      	pop	{r7, pc}
 800cc7a:	bf00      	nop
 800cc7c:	2000045c 	.word	0x2000045c
 800cc80:	0800cc1d 	.word	0x0800cc1d
 800cc84:	2000001d 	.word	0x2000001d

0800cc88 <DbgTraceInit>:
#endif

void DbgTraceInit( void )
{
 800cc88:	b580      	push	{r7, lr}
 800cc8a:	b082      	sub	sp, #8
 800cc8c:	af02      	add	r7, sp, #8
#if (( CFG_DEBUG_TRACE_FULL != 0 ) || ( CFG_DEBUG_TRACE_LIGHT != 0 ))
  DbgOutputInit();
 800cc8e:	f7f5 f8e2 	bl	8001e56 <DbgOutputInit>
#if (DBG_TRACE_USE_CIRCULAR_QUEUE != 0)
  CircularQueue_Init(&MsgDbgTraceQueue, MsgDbgTraceQueueBuff, DBG_TRACE_MSG_QUEUE_SIZE, 0, CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG);
 800cc92:	2302      	movs	r3, #2
 800cc94:	9300      	str	r3, [sp, #0]
 800cc96:	2300      	movs	r3, #0
 800cc98:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800cc9c:	4903      	ldr	r1, [pc, #12]	; (800ccac <DbgTraceInit+0x24>)
 800cc9e:	4804      	ldr	r0, [pc, #16]	; (800ccb0 <DbgTraceInit+0x28>)
 800cca0:	f000 f948 	bl	800cf34 <CircularQueue_Init>
#endif 
#endif
  return;
 800cca4:	bf00      	nop
}
 800cca6:	46bd      	mov	sp, r7
 800cca8:	bd80      	pop	{r7, pc}
 800ccaa:	bf00      	nop
 800ccac:	2000047c 	.word	0x2000047c
 800ccb0:	2000045c 	.word	0x2000045c

0800ccb4 <_write>:
 * @param	bufsize buffer size
 * @param	...: arguments to be formatted in format string
 * @retval none
 */
size_t _write(int handle, const unsigned char * buf, size_t bufSize)
{
 800ccb4:	b580      	push	{r7, lr}
 800ccb6:	b084      	sub	sp, #16
 800ccb8:	af00      	add	r7, sp, #0
 800ccba:	60f8      	str	r0, [r7, #12]
 800ccbc:	60b9      	str	r1, [r7, #8]
 800ccbe:	607a      	str	r2, [r7, #4]
  return ( DbgTraceWrite(handle, buf, bufSize) );
 800ccc0:	687a      	ldr	r2, [r7, #4]
 800ccc2:	68b9      	ldr	r1, [r7, #8]
 800ccc4:	68f8      	ldr	r0, [r7, #12]
 800ccc6:	f000 f805 	bl	800ccd4 <DbgTraceWrite>
 800ccca:	4603      	mov	r3, r0
}
 800cccc:	4618      	mov	r0, r3
 800ccce:	3710      	adds	r7, #16
 800ccd0:	46bd      	mov	sp, r7
 800ccd2:	bd80      	pop	{r7, pc}

0800ccd4 <DbgTraceWrite>:
 * @param buf buffer to write
 * @param bufsize buffer size
 * @retval Number of elements written
 */
size_t DbgTraceWrite(int handle, const unsigned char * buf, size_t bufSize)
{
 800ccd4:	b580      	push	{r7, lr}
 800ccd6:	b08a      	sub	sp, #40	; 0x28
 800ccd8:	af00      	add	r7, sp, #0
 800ccda:	60f8      	str	r0, [r7, #12]
 800ccdc:	60b9      	str	r1, [r7, #8]
 800ccde:	607a      	str	r2, [r7, #4]
  size_t chars_written = 0;
 800cce0:	2300      	movs	r3, #0
 800cce2:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800cce4:	f3ef 8310 	mrs	r3, PRIMASK
 800cce8:	61bb      	str	r3, [r7, #24]
  return(result);
 800ccea:	69bb      	ldr	r3, [r7, #24]
  uint8_t* buffer;

  BACKUP_PRIMASK();
 800ccec:	623b      	str	r3, [r7, #32]

  /* Ignore flushes */
  if ( handle == -1 )
 800ccee:	68fb      	ldr	r3, [r7, #12]
 800ccf0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ccf4:	d102      	bne.n	800ccfc <DbgTraceWrite+0x28>
  {
    chars_written = ( size_t ) 0;
 800ccf6:	2300      	movs	r3, #0
 800ccf8:	627b      	str	r3, [r7, #36]	; 0x24
 800ccfa:	e034      	b.n	800cd66 <DbgTraceWrite+0x92>
  }
  /* Only allow stdout/stderr output */
  else if ( ( handle != 1 ) && ( handle != 2 ) )
 800ccfc:	68fb      	ldr	r3, [r7, #12]
 800ccfe:	2b01      	cmp	r3, #1
 800cd00:	d006      	beq.n	800cd10 <DbgTraceWrite+0x3c>
 800cd02:	68fb      	ldr	r3, [r7, #12]
 800cd04:	2b02      	cmp	r3, #2
 800cd06:	d003      	beq.n	800cd10 <DbgTraceWrite+0x3c>
  {
    chars_written = ( size_t ) - 1;
 800cd08:	f04f 33ff 	mov.w	r3, #4294967295
 800cd0c:	627b      	str	r3, [r7, #36]	; 0x24
 800cd0e:	e02a      	b.n	800cd66 <DbgTraceWrite+0x92>
  }
  /* Parameters OK, call the low-level character output routine */
  else if (bufSize != 0)
 800cd10:	687b      	ldr	r3, [r7, #4]
 800cd12:	2b00      	cmp	r3, #0
 800cd14:	d027      	beq.n	800cd66 <DbgTraceWrite+0x92>
  {
    chars_written = bufSize;
 800cd16:	687b      	ldr	r3, [r7, #4]
 800cd18:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("cpsid i" : : : "memory");
 800cd1a:	b672      	cpsid	i
    /* If queue emepty and TX free, send directly */
    /* CS Start */

#if (DBG_TRACE_USE_CIRCULAR_QUEUE != 0)
    DISABLE_IRQ();      /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
    buffer=CircularQueue_Add(&MsgDbgTraceQueue,(uint8_t*)buf, bufSize,1);
 800cd1c:	687b      	ldr	r3, [r7, #4]
 800cd1e:	b29a      	uxth	r2, r3
 800cd20:	2301      	movs	r3, #1
 800cd22:	68b9      	ldr	r1, [r7, #8]
 800cd24:	4812      	ldr	r0, [pc, #72]	; (800cd70 <DbgTraceWrite+0x9c>)
 800cd26:	f000 f937 	bl	800cf98 <CircularQueue_Add>
 800cd2a:	61f8      	str	r0, [r7, #28]
    if (buffer && DbgTracePeripheralReady)
 800cd2c:	69fb      	ldr	r3, [r7, #28]
 800cd2e:	2b00      	cmp	r3, #0
 800cd30:	d014      	beq.n	800cd5c <DbgTraceWrite+0x88>
 800cd32:	4b10      	ldr	r3, [pc, #64]	; (800cd74 <DbgTraceWrite+0xa0>)
 800cd34:	781b      	ldrb	r3, [r3, #0]
 800cd36:	b2db      	uxtb	r3, r3
 800cd38:	2b00      	cmp	r3, #0
 800cd3a:	d00f      	beq.n	800cd5c <DbgTraceWrite+0x88>
    {
      DbgTracePeripheralReady = RESET;
 800cd3c:	4b0d      	ldr	r3, [pc, #52]	; (800cd74 <DbgTraceWrite+0xa0>)
 800cd3e:	2200      	movs	r2, #0
 800cd40:	701a      	strb	r2, [r3, #0]
 800cd42:	6a3b      	ldr	r3, [r7, #32]
 800cd44:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800cd46:	697b      	ldr	r3, [r7, #20]
 800cd48:	f383 8810 	msr	PRIMASK, r3
      RESTORE_PRIMASK();
      DbgOutputTraces((uint8_t*)buffer, bufSize, DbgTrace_TxCpltCallback);
 800cd4c:	687b      	ldr	r3, [r7, #4]
 800cd4e:	b29b      	uxth	r3, r3
 800cd50:	4a09      	ldr	r2, [pc, #36]	; (800cd78 <DbgTraceWrite+0xa4>)
 800cd52:	4619      	mov	r1, r3
 800cd54:	69f8      	ldr	r0, [r7, #28]
 800cd56:	f7f5 f885 	bl	8001e64 <DbgOutputTraces>
 800cd5a:	e004      	b.n	800cd66 <DbgTraceWrite+0x92>
 800cd5c:	6a3b      	ldr	r3, [r7, #32]
 800cd5e:	613b      	str	r3, [r7, #16]
 800cd60:	693b      	ldr	r3, [r7, #16]
 800cd62:	f383 8810 	msr	PRIMASK, r3
    DbgOutputTraces((uint8_t*)buf, bufSize, DbgTrace_TxCpltCallback);
    while (!DbgTracePeripheralReady);
#endif
    /* CS END */
  }
  return ( chars_written );
 800cd66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800cd68:	4618      	mov	r0, r3
 800cd6a:	3728      	adds	r7, #40	; 0x28
 800cd6c:	46bd      	mov	sp, r7
 800cd6e:	bd80      	pop	{r7, pc}
 800cd70:	2000045c 	.word	0x2000045c
 800cd74:	2000001d 	.word	0x2000001d
 800cd78:	0800cc1d 	.word	0x0800cc1d

0800cd7c <OTP_Read>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

uint8_t * OTP_Read( uint8_t id )
{
 800cd7c:	b480      	push	{r7}
 800cd7e:	b085      	sub	sp, #20
 800cd80:	af00      	add	r7, sp, #0
 800cd82:	4603      	mov	r3, r0
 800cd84:	71fb      	strb	r3, [r7, #7]
  uint8_t *p_id;

  p_id = (uint8_t*)(CFG_OTP_END_ADRESS - 7) ;
 800cd86:	4b0f      	ldr	r3, [pc, #60]	; (800cdc4 <OTP_Read+0x48>)
 800cd88:	60fb      	str	r3, [r7, #12]

  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 800cd8a:	e002      	b.n	800cd92 <OTP_Read+0x16>
  {
    p_id -= 8 ;
 800cd8c:	68fb      	ldr	r3, [r7, #12]
 800cd8e:	3b08      	subs	r3, #8
 800cd90:	60fb      	str	r3, [r7, #12]
  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 800cd92:	68fb      	ldr	r3, [r7, #12]
 800cd94:	3307      	adds	r3, #7
 800cd96:	781b      	ldrb	r3, [r3, #0]
 800cd98:	79fa      	ldrb	r2, [r7, #7]
 800cd9a:	429a      	cmp	r2, r3
 800cd9c:	d003      	beq.n	800cda6 <OTP_Read+0x2a>
 800cd9e:	68fb      	ldr	r3, [r7, #12]
 800cda0:	4a09      	ldr	r2, [pc, #36]	; (800cdc8 <OTP_Read+0x4c>)
 800cda2:	4293      	cmp	r3, r2
 800cda4:	d1f2      	bne.n	800cd8c <OTP_Read+0x10>
  }

  if((*( p_id + 7 )) != id)
 800cda6:	68fb      	ldr	r3, [r7, #12]
 800cda8:	3307      	adds	r3, #7
 800cdaa:	781b      	ldrb	r3, [r3, #0]
 800cdac:	79fa      	ldrb	r2, [r7, #7]
 800cdae:	429a      	cmp	r2, r3
 800cdb0:	d001      	beq.n	800cdb6 <OTP_Read+0x3a>
  {
    p_id = 0 ;
 800cdb2:	2300      	movs	r3, #0
 800cdb4:	60fb      	str	r3, [r7, #12]
  }

  return p_id ;
 800cdb6:	68fb      	ldr	r3, [r7, #12]
}
 800cdb8:	4618      	mov	r0, r3
 800cdba:	3714      	adds	r7, #20
 800cdbc:	46bd      	mov	sp, r7
 800cdbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdc2:	4770      	bx	lr
 800cdc4:	1fff73f8 	.word	0x1fff73f8
 800cdc8:	1fff7000 	.word	0x1fff7000

0800cdcc <LST_init_head>:

/******************************************************************************
 * Function Definitions 
 ******************************************************************************/
void LST_init_head (tListNode * listHead)
{
 800cdcc:	b480      	push	{r7}
 800cdce:	b083      	sub	sp, #12
 800cdd0:	af00      	add	r7, sp, #0
 800cdd2:	6078      	str	r0, [r7, #4]
  listHead->next = listHead;
 800cdd4:	687b      	ldr	r3, [r7, #4]
 800cdd6:	687a      	ldr	r2, [r7, #4]
 800cdd8:	601a      	str	r2, [r3, #0]
  listHead->prev = listHead;
 800cdda:	687b      	ldr	r3, [r7, #4]
 800cddc:	687a      	ldr	r2, [r7, #4]
 800cdde:	605a      	str	r2, [r3, #4]
}
 800cde0:	bf00      	nop
 800cde2:	370c      	adds	r7, #12
 800cde4:	46bd      	mov	sp, r7
 800cde6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdea:	4770      	bx	lr

0800cdec <LST_is_empty>:

uint8_t LST_is_empty (tListNode * listHead)
{
 800cdec:	b480      	push	{r7}
 800cdee:	b087      	sub	sp, #28
 800cdf0:	af00      	add	r7, sp, #0
 800cdf2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800cdf4:	f3ef 8310 	mrs	r3, PRIMASK
 800cdf8:	60fb      	str	r3, [r7, #12]
  return(result);
 800cdfa:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;
  uint8_t return_value;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800cdfc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800cdfe:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  if(listHead->next == listHead)
 800ce00:	687b      	ldr	r3, [r7, #4]
 800ce02:	681b      	ldr	r3, [r3, #0]
 800ce04:	687a      	ldr	r2, [r7, #4]
 800ce06:	429a      	cmp	r2, r3
 800ce08:	d102      	bne.n	800ce10 <LST_is_empty+0x24>
  {
    return_value = TRUE;
 800ce0a:	2301      	movs	r3, #1
 800ce0c:	75fb      	strb	r3, [r7, #23]
 800ce0e:	e001      	b.n	800ce14 <LST_is_empty+0x28>
  }
  else
  {
    return_value = FALSE;
 800ce10:	2300      	movs	r3, #0
 800ce12:	75fb      	strb	r3, [r7, #23]
 800ce14:	693b      	ldr	r3, [r7, #16]
 800ce16:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ce18:	68bb      	ldr	r3, [r7, #8]
 800ce1a:	f383 8810 	msr	PRIMASK, r3
  }
  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/

  return return_value;
 800ce1e:	7dfb      	ldrb	r3, [r7, #23]
}
 800ce20:	4618      	mov	r0, r3
 800ce22:	371c      	adds	r7, #28
 800ce24:	46bd      	mov	sp, r7
 800ce26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce2a:	4770      	bx	lr

0800ce2c <LST_insert_head>:

void LST_insert_head (tListNode * listHead, tListNode * node)
{
 800ce2c:	b480      	push	{r7}
 800ce2e:	b087      	sub	sp, #28
 800ce30:	af00      	add	r7, sp, #0
 800ce32:	6078      	str	r0, [r7, #4]
 800ce34:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ce36:	f3ef 8310 	mrs	r3, PRIMASK
 800ce3a:	60fb      	str	r3, [r7, #12]
  return(result);
 800ce3c:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800ce3e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800ce40:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead->next;
 800ce42:	687b      	ldr	r3, [r7, #4]
 800ce44:	681a      	ldr	r2, [r3, #0]
 800ce46:	683b      	ldr	r3, [r7, #0]
 800ce48:	601a      	str	r2, [r3, #0]
  node->prev = listHead;
 800ce4a:	683b      	ldr	r3, [r7, #0]
 800ce4c:	687a      	ldr	r2, [r7, #4]
 800ce4e:	605a      	str	r2, [r3, #4]
  listHead->next = node;
 800ce50:	687b      	ldr	r3, [r7, #4]
 800ce52:	683a      	ldr	r2, [r7, #0]
 800ce54:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node;
 800ce56:	683b      	ldr	r3, [r7, #0]
 800ce58:	681b      	ldr	r3, [r3, #0]
 800ce5a:	683a      	ldr	r2, [r7, #0]
 800ce5c:	605a      	str	r2, [r3, #4]
 800ce5e:	697b      	ldr	r3, [r7, #20]
 800ce60:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ce62:	693b      	ldr	r3, [r7, #16]
 800ce64:	f383 8810 	msr	PRIMASK, r3

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800ce68:	bf00      	nop
 800ce6a:	371c      	adds	r7, #28
 800ce6c:	46bd      	mov	sp, r7
 800ce6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce72:	4770      	bx	lr

0800ce74 <LST_insert_tail>:


void LST_insert_tail (tListNode * listHead, tListNode * node)
{
 800ce74:	b480      	push	{r7}
 800ce76:	b087      	sub	sp, #28
 800ce78:	af00      	add	r7, sp, #0
 800ce7a:	6078      	str	r0, [r7, #4]
 800ce7c:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ce7e:	f3ef 8310 	mrs	r3, PRIMASK
 800ce82:	60fb      	str	r3, [r7, #12]
  return(result);
 800ce84:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800ce86:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800ce88:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead;
 800ce8a:	683b      	ldr	r3, [r7, #0]
 800ce8c:	687a      	ldr	r2, [r7, #4]
 800ce8e:	601a      	str	r2, [r3, #0]
  node->prev = listHead->prev;
 800ce90:	687b      	ldr	r3, [r7, #4]
 800ce92:	685a      	ldr	r2, [r3, #4]
 800ce94:	683b      	ldr	r3, [r7, #0]
 800ce96:	605a      	str	r2, [r3, #4]
  listHead->prev = node;
 800ce98:	687b      	ldr	r3, [r7, #4]
 800ce9a:	683a      	ldr	r2, [r7, #0]
 800ce9c:	605a      	str	r2, [r3, #4]
  (node->prev)->next = node;
 800ce9e:	683b      	ldr	r3, [r7, #0]
 800cea0:	685b      	ldr	r3, [r3, #4]
 800cea2:	683a      	ldr	r2, [r7, #0]
 800cea4:	601a      	str	r2, [r3, #0]
 800cea6:	697b      	ldr	r3, [r7, #20]
 800cea8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ceaa:	693b      	ldr	r3, [r7, #16]
 800ceac:	f383 8810 	msr	PRIMASK, r3

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800ceb0:	bf00      	nop
 800ceb2:	371c      	adds	r7, #28
 800ceb4:	46bd      	mov	sp, r7
 800ceb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ceba:	4770      	bx	lr

0800cebc <LST_remove_node>:


void LST_remove_node (tListNode * node)
{
 800cebc:	b480      	push	{r7}
 800cebe:	b087      	sub	sp, #28
 800cec0:	af00      	add	r7, sp, #0
 800cec2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800cec4:	f3ef 8310 	mrs	r3, PRIMASK
 800cec8:	60fb      	str	r3, [r7, #12]
  return(result);
 800ceca:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800cecc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800cece:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  (node->prev)->next = node->next;
 800ced0:	687b      	ldr	r3, [r7, #4]
 800ced2:	685b      	ldr	r3, [r3, #4]
 800ced4:	687a      	ldr	r2, [r7, #4]
 800ced6:	6812      	ldr	r2, [r2, #0]
 800ced8:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node->prev;
 800ceda:	687b      	ldr	r3, [r7, #4]
 800cedc:	681b      	ldr	r3, [r3, #0]
 800cede:	687a      	ldr	r2, [r7, #4]
 800cee0:	6852      	ldr	r2, [r2, #4]
 800cee2:	605a      	str	r2, [r3, #4]
 800cee4:	697b      	ldr	r3, [r7, #20]
 800cee6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800cee8:	693b      	ldr	r3, [r7, #16]
 800ceea:	f383 8810 	msr	PRIMASK, r3

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800ceee:	bf00      	nop
 800cef0:	371c      	adds	r7, #28
 800cef2:	46bd      	mov	sp, r7
 800cef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cef8:	4770      	bx	lr

0800cefa <LST_remove_head>:


void LST_remove_head (tListNode * listHead, tListNode ** node )
{
 800cefa:	b580      	push	{r7, lr}
 800cefc:	b086      	sub	sp, #24
 800cefe:	af00      	add	r7, sp, #0
 800cf00:	6078      	str	r0, [r7, #4]
 800cf02:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800cf04:	f3ef 8310 	mrs	r3, PRIMASK
 800cf08:	60fb      	str	r3, [r7, #12]
  return(result);
 800cf0a:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800cf0c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800cf0e:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  *node = listHead->next;
 800cf10:	687b      	ldr	r3, [r7, #4]
 800cf12:	681a      	ldr	r2, [r3, #0]
 800cf14:	683b      	ldr	r3, [r7, #0]
 800cf16:	601a      	str	r2, [r3, #0]
  LST_remove_node (listHead->next);
 800cf18:	687b      	ldr	r3, [r7, #4]
 800cf1a:	681b      	ldr	r3, [r3, #0]
 800cf1c:	4618      	mov	r0, r3
 800cf1e:	f7ff ffcd 	bl	800cebc <LST_remove_node>
 800cf22:	697b      	ldr	r3, [r7, #20]
 800cf24:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800cf26:	693b      	ldr	r3, [r7, #16]
 800cf28:	f383 8810 	msr	PRIMASK, r3

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800cf2c:	bf00      	nop
 800cf2e:	3718      	adds	r7, #24
 800cf30:	46bd      	mov	sp, r7
 800cf32:	bd80      	pop	{r7, pc}

0800cf34 <CircularQueue_Init>:
  * @param  queueSize:  Size of Queue Buffer
  * @param  elementSize: Size of an element in the queue. if =0, the queue will manage variable sizze elements
  * @retval   always 0
  */
int CircularQueue_Init(queue_t *q, uint8_t* queueBuffer, uint32_t queueSize, uint16_t elementSize, uint8_t optionFlags)
{
 800cf34:	b480      	push	{r7}
 800cf36:	b085      	sub	sp, #20
 800cf38:	af00      	add	r7, sp, #0
 800cf3a:	60f8      	str	r0, [r7, #12]
 800cf3c:	60b9      	str	r1, [r7, #8]
 800cf3e:	607a      	str	r2, [r7, #4]
 800cf40:	807b      	strh	r3, [r7, #2]
  q->qBuff = queueBuffer;
 800cf42:	68fb      	ldr	r3, [r7, #12]
 800cf44:	68ba      	ldr	r2, [r7, #8]
 800cf46:	601a      	str	r2, [r3, #0]
  q->first = 0;
 800cf48:	68fb      	ldr	r3, [r7, #12]
 800cf4a:	2200      	movs	r2, #0
 800cf4c:	60da      	str	r2, [r3, #12]
  q->last = 0; /* queueSize-1; */
 800cf4e:	68fb      	ldr	r3, [r7, #12]
 800cf50:	2200      	movs	r2, #0
 800cf52:	611a      	str	r2, [r3, #16]
  q->byteCount = 0;
 800cf54:	68fb      	ldr	r3, [r7, #12]
 800cf56:	2200      	movs	r2, #0
 800cf58:	615a      	str	r2, [r3, #20]
  q->elementCount = 0;
 800cf5a:	68fb      	ldr	r3, [r7, #12]
 800cf5c:	2200      	movs	r2, #0
 800cf5e:	619a      	str	r2, [r3, #24]
  q->queueMaxSize = queueSize;
 800cf60:	68fb      	ldr	r3, [r7, #12]
 800cf62:	687a      	ldr	r2, [r7, #4]
 800cf64:	605a      	str	r2, [r3, #4]
  q->elementSize = elementSize;
 800cf66:	68fb      	ldr	r3, [r7, #12]
 800cf68:	887a      	ldrh	r2, [r7, #2]
 800cf6a:	811a      	strh	r2, [r3, #8]
  q->optionFlags = optionFlags;
 800cf6c:	68fb      	ldr	r3, [r7, #12]
 800cf6e:	7e3a      	ldrb	r2, [r7, #24]
 800cf70:	771a      	strb	r2, [r3, #28]

   if ((optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG) && q-> elementSize)
 800cf72:	7e3b      	ldrb	r3, [r7, #24]
 800cf74:	f003 0302 	and.w	r3, r3, #2
 800cf78:	2b00      	cmp	r3, #0
 800cf7a:	d006      	beq.n	800cf8a <CircularQueue_Init+0x56>
 800cf7c:	68fb      	ldr	r3, [r7, #12]
 800cf7e:	891b      	ldrh	r3, [r3, #8]
 800cf80:	2b00      	cmp	r3, #0
 800cf82:	d002      	beq.n	800cf8a <CircularQueue_Init+0x56>
   {
    /* can not deal with splitting at the end of buffer with fixed size element */
    return -1;
 800cf84:	f04f 33ff 	mov.w	r3, #4294967295
 800cf88:	e000      	b.n	800cf8c <CircularQueue_Init+0x58>
  }
  return 0;
 800cf8a:	2300      	movs	r3, #0
}
 800cf8c:	4618      	mov	r0, r3
 800cf8e:	3714      	adds	r7, #20
 800cf90:	46bd      	mov	sp, r7
 800cf92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf96:	4770      	bx	lr

0800cf98 <CircularQueue_Add>:
  * @param  elementSize:  Size of element to be added to the queue. Only used if the queue manage variable size elements
  * @param  nbElements:  number of elements in the in buffer pointed by x
  * @retval  pointer on last element just added to the queue, NULL if the element to be added do not fit in the queue (too big)
  */
uint8_t* CircularQueue_Add(queue_t *q, uint8_t* x, uint16_t elementSize, uint32_t nbElements)
{
 800cf98:	b580      	push	{r7, lr}
 800cf9a:	b08e      	sub	sp, #56	; 0x38
 800cf9c:	af00      	add	r7, sp, #0
 800cf9e:	60f8      	str	r0, [r7, #12]
 800cfa0:	60b9      	str	r1, [r7, #8]
 800cfa2:	603b      	str	r3, [r7, #0]
 800cfa4:	4613      	mov	r3, r2
 800cfa6:	80fb      	strh	r3, [r7, #6]

  uint8_t* ptr = NULL;                      /* fct return ptr to the element freshly added, if no room fct return NULL */
 800cfa8:	2300      	movs	r3, #0
 800cfaa:	623b      	str	r3, [r7, #32]
  uint16_t curElementSize = 0;              /* the size of the element currently  stored at q->last position */
 800cfac:	2300      	movs	r3, #0
 800cfae:	86fb      	strh	r3, [r7, #54]	; 0x36
  uint8_t  elemSizeStorageRoom  = 0 ;       /* Indicate the header (which contain only size) of element in case of varaibale size elemenet (q->elementsize == 0) */
 800cfb0:	2300      	movs	r3, #0
 800cfb2:	77fb      	strb	r3, [r7, #31]
  uint32_t curBuffPosition;                  /* the current position in the queue buffer */
  uint32_t i;                               /* loop counter */
  uint32_t NbBytesToCopy = 0, NbCopiedBytes = 0 ; /* Indicators for copying bytes in queue */
 800cfb4:	2300      	movs	r3, #0
 800cfb6:	62bb      	str	r3, [r7, #40]	; 0x28
 800cfb8:	2300      	movs	r3, #0
 800cfba:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t eob_free_size;                         /* Eof End of Quque Buffer Free Size */
  uint8_t  wrap_will_occur = 0;                   /* indicate if a wrap around will occurs */
 800cfbc:	2300      	movs	r3, #0
 800cfbe:	77bb      	strb	r3, [r7, #30]
  uint8_t  wrapped_element_eob_size;              /* In case of Wrap around, indicat size of parta of elemenet that fit at thened of the queuue  buffer */
  uint16_t overhead = 0;                          /* In case of CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG or CIRCULAR_QUEUE_NO_WRAP_FLAG options, 
 800cfc0:	2300      	movs	r3, #0
 800cfc2:	83bb      	strh	r3, [r7, #28]
                                                     indcate the size overhead that will be generated by adding the element with wrap management (split or no wrap ) */ 
  
  
  elemSizeStorageRoom  = (q->elementSize == 0) ? 2 : 0;
 800cfc4:	68fb      	ldr	r3, [r7, #12]
 800cfc6:	891b      	ldrh	r3, [r3, #8]
 800cfc8:	2b00      	cmp	r3, #0
 800cfca:	d101      	bne.n	800cfd0 <CircularQueue_Add+0x38>
 800cfcc:	2302      	movs	r3, #2
 800cfce:	e000      	b.n	800cfd2 <CircularQueue_Add+0x3a>
 800cfd0:	2300      	movs	r3, #0
 800cfd2:	77fb      	strb	r3, [r7, #31]
  /* retrieve the size of last element sored: the value stored at the beginning of the queue element if element size is variable otherwise take it from fixed element Size member */
  if (q->byteCount)
 800cfd4:	68fb      	ldr	r3, [r7, #12]
 800cfd6:	695b      	ldr	r3, [r3, #20]
 800cfd8:	2b00      	cmp	r3, #0
 800cfda:	d02a      	beq.n	800d032 <CircularQueue_Add+0x9a>
  {
    curElementSize = (q->elementSize == 0) ? q->qBuff[q->last] + ((q->qBuff[MOD((q->last+1), q->queueMaxSize)])<<8) + 2 : q->elementSize;
 800cfdc:	68fb      	ldr	r3, [r7, #12]
 800cfde:	891b      	ldrh	r3, [r3, #8]
 800cfe0:	2b00      	cmp	r3, #0
 800cfe2:	d123      	bne.n	800d02c <CircularQueue_Add+0x94>
 800cfe4:	68fb      	ldr	r3, [r7, #12]
 800cfe6:	681a      	ldr	r2, [r3, #0]
 800cfe8:	68fb      	ldr	r3, [r7, #12]
 800cfea:	691b      	ldr	r3, [r3, #16]
 800cfec:	4413      	add	r3, r2
 800cfee:	781b      	ldrb	r3, [r3, #0]
 800cff0:	b29a      	uxth	r2, r3
 800cff2:	68fb      	ldr	r3, [r7, #12]
 800cff4:	6819      	ldr	r1, [r3, #0]
 800cff6:	68fb      	ldr	r3, [r7, #12]
 800cff8:	691b      	ldr	r3, [r3, #16]
 800cffa:	1c58      	adds	r0, r3, #1
 800cffc:	68fb      	ldr	r3, [r7, #12]
 800cffe:	685b      	ldr	r3, [r3, #4]
 800d000:	4298      	cmp	r0, r3
 800d002:	d306      	bcc.n	800d012 <CircularQueue_Add+0x7a>
 800d004:	68fb      	ldr	r3, [r7, #12]
 800d006:	6918      	ldr	r0, [r3, #16]
 800d008:	68fb      	ldr	r3, [r7, #12]
 800d00a:	685b      	ldr	r3, [r3, #4]
 800d00c:	1ac3      	subs	r3, r0, r3
 800d00e:	3301      	adds	r3, #1
 800d010:	e002      	b.n	800d018 <CircularQueue_Add+0x80>
 800d012:	68fb      	ldr	r3, [r7, #12]
 800d014:	691b      	ldr	r3, [r3, #16]
 800d016:	3301      	adds	r3, #1
 800d018:	440b      	add	r3, r1
 800d01a:	781b      	ldrb	r3, [r3, #0]
 800d01c:	b29b      	uxth	r3, r3
 800d01e:	021b      	lsls	r3, r3, #8
 800d020:	b29b      	uxth	r3, r3
 800d022:	4413      	add	r3, r2
 800d024:	b29b      	uxth	r3, r3
 800d026:	3302      	adds	r3, #2
 800d028:	b29b      	uxth	r3, r3
 800d02a:	e001      	b.n	800d030 <CircularQueue_Add+0x98>
 800d02c:	68fb      	ldr	r3, [r7, #12]
 800d02e:	891b      	ldrh	r3, [r3, #8]
 800d030:	86fb      	strh	r3, [r7, #54]	; 0x36
  }
  /* if queue element have fixed size , reset the elementSize arg with fixed element size value */
  if (q->elementSize > 0)               
 800d032:	68fb      	ldr	r3, [r7, #12]
 800d034:	891b      	ldrh	r3, [r3, #8]
 800d036:	2b00      	cmp	r3, #0
 800d038:	d002      	beq.n	800d040 <CircularQueue_Add+0xa8>
  {
    elementSize = q->elementSize;
 800d03a:	68fb      	ldr	r3, [r7, #12]
 800d03c:	891b      	ldrh	r3, [r3, #8]
 800d03e:	80fb      	strh	r3, [r7, #6]
  }

   eob_free_size = (q->last >= q->first) ? q->queueMaxSize - (q->last + curElementSize) : 0;
 800d040:	68fb      	ldr	r3, [r7, #12]
 800d042:	691a      	ldr	r2, [r3, #16]
 800d044:	68fb      	ldr	r3, [r7, #12]
 800d046:	68db      	ldr	r3, [r3, #12]
 800d048:	429a      	cmp	r2, r3
 800d04a:	d307      	bcc.n	800d05c <CircularQueue_Add+0xc4>
 800d04c:	68fb      	ldr	r3, [r7, #12]
 800d04e:	685a      	ldr	r2, [r3, #4]
 800d050:	68fb      	ldr	r3, [r7, #12]
 800d052:	6919      	ldr	r1, [r3, #16]
 800d054:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800d056:	440b      	add	r3, r1
 800d058:	1ad3      	subs	r3, r2, r3
 800d05a:	e000      	b.n	800d05e <CircularQueue_Add+0xc6>
 800d05c:	2300      	movs	r3, #0
 800d05e:	61bb      	str	r3, [r7, #24]

   /* check how many bytes of wrapped element (if anay) are at end of buffer */
   wrapped_element_eob_size = (((elementSize + elemSizeStorageRoom )*nbElements) < eob_free_size) ? 0 : (eob_free_size % (elementSize + elemSizeStorageRoom));
 800d060:	88fa      	ldrh	r2, [r7, #6]
 800d062:	7ffb      	ldrb	r3, [r7, #31]
 800d064:	4413      	add	r3, r2
 800d066:	461a      	mov	r2, r3
 800d068:	683b      	ldr	r3, [r7, #0]
 800d06a:	fb03 f302 	mul.w	r3, r3, r2
 800d06e:	69ba      	ldr	r2, [r7, #24]
 800d070:	429a      	cmp	r2, r3
 800d072:	d80b      	bhi.n	800d08c <CircularQueue_Add+0xf4>
 800d074:	88fa      	ldrh	r2, [r7, #6]
 800d076:	7ffb      	ldrb	r3, [r7, #31]
 800d078:	4413      	add	r3, r2
 800d07a:	461a      	mov	r2, r3
 800d07c:	69bb      	ldr	r3, [r7, #24]
 800d07e:	fbb3 f1f2 	udiv	r1, r3, r2
 800d082:	fb02 f201 	mul.w	r2, r2, r1
 800d086:	1a9b      	subs	r3, r3, r2
 800d088:	b2db      	uxtb	r3, r3
 800d08a:	e000      	b.n	800d08e <CircularQueue_Add+0xf6>
 800d08c:	2300      	movs	r3, #0
 800d08e:	75fb      	strb	r3, [r7, #23]
   wrap_will_occur  = wrapped_element_eob_size > elemSizeStorageRoom;
 800d090:	7dfa      	ldrb	r2, [r7, #23]
 800d092:	7ffb      	ldrb	r3, [r7, #31]
 800d094:	429a      	cmp	r2, r3
 800d096:	bf8c      	ite	hi
 800d098:	2301      	movhi	r3, #1
 800d09a:	2300      	movls	r3, #0
 800d09c:	b2db      	uxtb	r3, r3
 800d09e:	77bb      	strb	r3, [r7, #30]

   overhead = (wrap_will_occur && (q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG)) ? wrapped_element_eob_size : overhead;
 800d0a0:	7fbb      	ldrb	r3, [r7, #30]
 800d0a2:	2b00      	cmp	r3, #0
 800d0a4:	d008      	beq.n	800d0b8 <CircularQueue_Add+0x120>
 800d0a6:	68fb      	ldr	r3, [r7, #12]
 800d0a8:	7f1b      	ldrb	r3, [r3, #28]
 800d0aa:	f003 0301 	and.w	r3, r3, #1
 800d0ae:	2b00      	cmp	r3, #0
 800d0b0:	d002      	beq.n	800d0b8 <CircularQueue_Add+0x120>
 800d0b2:	7dfb      	ldrb	r3, [r7, #23]
 800d0b4:	b29b      	uxth	r3, r3
 800d0b6:	e000      	b.n	800d0ba <CircularQueue_Add+0x122>
 800d0b8:	8bbb      	ldrh	r3, [r7, #28]
 800d0ba:	83bb      	strh	r3, [r7, #28]
   overhead = (wrap_will_occur && (q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG)) ? elemSizeStorageRoom  : overhead;
 800d0bc:	7fbb      	ldrb	r3, [r7, #30]
 800d0be:	2b00      	cmp	r3, #0
 800d0c0:	d008      	beq.n	800d0d4 <CircularQueue_Add+0x13c>
 800d0c2:	68fb      	ldr	r3, [r7, #12]
 800d0c4:	7f1b      	ldrb	r3, [r3, #28]
 800d0c6:	f003 0302 	and.w	r3, r3, #2
 800d0ca:	2b00      	cmp	r3, #0
 800d0cc:	d002      	beq.n	800d0d4 <CircularQueue_Add+0x13c>
 800d0ce:	7ffb      	ldrb	r3, [r7, #31]
 800d0d0:	b29b      	uxth	r3, r3
 800d0d2:	e000      	b.n	800d0d6 <CircularQueue_Add+0x13e>
 800d0d4:	8bbb      	ldrh	r3, [r7, #28]
 800d0d6:	83bb      	strh	r3, [r7, #28]
   
   
  /* Store now the elements if ennough room for all elements */
  if (elementSize && ((q->byteCount + ((elementSize + elemSizeStorageRoom )*nbElements) + overhead) <= q->queueMaxSize)) 
 800d0d8:	88fb      	ldrh	r3, [r7, #6]
 800d0da:	2b00      	cmp	r3, #0
 800d0dc:	f000 817e 	beq.w	800d3dc <CircularQueue_Add+0x444>
 800d0e0:	68fb      	ldr	r3, [r7, #12]
 800d0e2:	695a      	ldr	r2, [r3, #20]
 800d0e4:	88f9      	ldrh	r1, [r7, #6]
 800d0e6:	7ffb      	ldrb	r3, [r7, #31]
 800d0e8:	440b      	add	r3, r1
 800d0ea:	4619      	mov	r1, r3
 800d0ec:	683b      	ldr	r3, [r7, #0]
 800d0ee:	fb03 f301 	mul.w	r3, r3, r1
 800d0f2:	441a      	add	r2, r3
 800d0f4:	8bbb      	ldrh	r3, [r7, #28]
 800d0f6:	441a      	add	r2, r3
 800d0f8:	68fb      	ldr	r3, [r7, #12]
 800d0fa:	685b      	ldr	r3, [r3, #4]
 800d0fc:	429a      	cmp	r2, r3
 800d0fe:	f200 816d 	bhi.w	800d3dc <CircularQueue_Add+0x444>
  { 
    /* loop to add all elements  */
    for (i=0; i < nbElements; i++) 
 800d102:	2300      	movs	r3, #0
 800d104:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d106:	e14a      	b.n	800d39e <CircularQueue_Add+0x406>
    {
      q->last = MOD ((q->last + curElementSize),q->queueMaxSize);
 800d108:	68fb      	ldr	r3, [r7, #12]
 800d10a:	691a      	ldr	r2, [r3, #16]
 800d10c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800d10e:	441a      	add	r2, r3
 800d110:	68fb      	ldr	r3, [r7, #12]
 800d112:	685b      	ldr	r3, [r3, #4]
 800d114:	429a      	cmp	r2, r3
 800d116:	d307      	bcc.n	800d128 <CircularQueue_Add+0x190>
 800d118:	68fb      	ldr	r3, [r7, #12]
 800d11a:	691a      	ldr	r2, [r3, #16]
 800d11c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800d11e:	441a      	add	r2, r3
 800d120:	68fb      	ldr	r3, [r7, #12]
 800d122:	685b      	ldr	r3, [r3, #4]
 800d124:	1ad3      	subs	r3, r2, r3
 800d126:	e003      	b.n	800d130 <CircularQueue_Add+0x198>
 800d128:	68fb      	ldr	r3, [r7, #12]
 800d12a:	691a      	ldr	r2, [r3, #16]
 800d12c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800d12e:	4413      	add	r3, r2
 800d130:	68fa      	ldr	r2, [r7, #12]
 800d132:	6113      	str	r3, [r2, #16]
      curBuffPosition = q->last;
 800d134:	68fb      	ldr	r3, [r7, #12]
 800d136:	691b      	ldr	r3, [r3, #16]
 800d138:	633b      	str	r3, [r7, #48]	; 0x30
      
      /* store the element  */
      /* store fisrt the element size if element size is varaible */
      if (q->elementSize == 0) 
 800d13a:	68fb      	ldr	r3, [r7, #12]
 800d13c:	891b      	ldrh	r3, [r3, #8]
 800d13e:	2b00      	cmp	r3, #0
 800d140:	d130      	bne.n	800d1a4 <CircularQueue_Add+0x20c>
      {
        q->qBuff[curBuffPosition++]= elementSize & 0xFF;
 800d142:	68fb      	ldr	r3, [r7, #12]
 800d144:	681a      	ldr	r2, [r3, #0]
 800d146:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d148:	1c59      	adds	r1, r3, #1
 800d14a:	6339      	str	r1, [r7, #48]	; 0x30
 800d14c:	4413      	add	r3, r2
 800d14e:	88fa      	ldrh	r2, [r7, #6]
 800d150:	b2d2      	uxtb	r2, r2
 800d152:	701a      	strb	r2, [r3, #0]
        curBuffPosition = MOD(curBuffPosition, q->queueMaxSize);
 800d154:	68fb      	ldr	r3, [r7, #12]
 800d156:	685b      	ldr	r3, [r3, #4]
 800d158:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d15a:	429a      	cmp	r2, r3
 800d15c:	d304      	bcc.n	800d168 <CircularQueue_Add+0x1d0>
 800d15e:	68fb      	ldr	r3, [r7, #12]
 800d160:	685b      	ldr	r3, [r3, #4]
 800d162:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d164:	1ad3      	subs	r3, r2, r3
 800d166:	e000      	b.n	800d16a <CircularQueue_Add+0x1d2>
 800d168:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d16a:	633b      	str	r3, [r7, #48]	; 0x30
        q->qBuff[curBuffPosition++]= (elementSize & 0xFF00) >> 8 ;
 800d16c:	88fb      	ldrh	r3, [r7, #6]
 800d16e:	0a1b      	lsrs	r3, r3, #8
 800d170:	b298      	uxth	r0, r3
 800d172:	68fb      	ldr	r3, [r7, #12]
 800d174:	681a      	ldr	r2, [r3, #0]
 800d176:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d178:	1c59      	adds	r1, r3, #1
 800d17a:	6339      	str	r1, [r7, #48]	; 0x30
 800d17c:	4413      	add	r3, r2
 800d17e:	b2c2      	uxtb	r2, r0
 800d180:	701a      	strb	r2, [r3, #0]
        curBuffPosition = MOD(curBuffPosition, q->queueMaxSize);
 800d182:	68fb      	ldr	r3, [r7, #12]
 800d184:	685b      	ldr	r3, [r3, #4]
 800d186:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d188:	429a      	cmp	r2, r3
 800d18a:	d304      	bcc.n	800d196 <CircularQueue_Add+0x1fe>
 800d18c:	68fb      	ldr	r3, [r7, #12]
 800d18e:	685b      	ldr	r3, [r3, #4]
 800d190:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d192:	1ad3      	subs	r3, r2, r3
 800d194:	e000      	b.n	800d198 <CircularQueue_Add+0x200>
 800d196:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d198:	633b      	str	r3, [r7, #48]	; 0x30
        q->byteCount += 2;
 800d19a:	68fb      	ldr	r3, [r7, #12]
 800d19c:	695b      	ldr	r3, [r3, #20]
 800d19e:	1c9a      	adds	r2, r3, #2
 800d1a0:	68fb      	ldr	r3, [r7, #12]
 800d1a2:	615a      	str	r2, [r3, #20]
      }
      
      /* Identify number of bytes of copy takeing account possible wrap, in this case NbBytesToCopy will contains size that fit at end of the queue buffer */
      NbBytesToCopy = MIN((q->queueMaxSize-curBuffPosition),elementSize);
 800d1a4:	88fa      	ldrh	r2, [r7, #6]
 800d1a6:	68fb      	ldr	r3, [r7, #12]
 800d1a8:	6859      	ldr	r1, [r3, #4]
 800d1aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d1ac:	1acb      	subs	r3, r1, r3
 800d1ae:	4293      	cmp	r3, r2
 800d1b0:	bf28      	it	cs
 800d1b2:	4613      	movcs	r3, r2
 800d1b4:	62bb      	str	r3, [r7, #40]	; 0x28
      /* check if no wrap (NbBytesToCopy == elementSize) or if Wrap and no spsicf option; 
         In thi case part of data will copied at the end of the buffer and the rest a the beggining */
      if ((NbBytesToCopy == elementSize) || ((NbBytesToCopy < elementSize) && (q->optionFlags == CIRCULAR_QUEUE_NO_FLAG)))
 800d1b6:	88fb      	ldrh	r3, [r7, #6]
 800d1b8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d1ba:	429a      	cmp	r2, r3
 800d1bc:	d007      	beq.n	800d1ce <CircularQueue_Add+0x236>
 800d1be:	88fb      	ldrh	r3, [r7, #6]
 800d1c0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d1c2:	429a      	cmp	r2, r3
 800d1c4:	d225      	bcs.n	800d212 <CircularQueue_Add+0x27a>
 800d1c6:	68fb      	ldr	r3, [r7, #12]
 800d1c8:	7f1b      	ldrb	r3, [r3, #28]
 800d1ca:	2b00      	cmp	r3, #0
 800d1cc:	d121      	bne.n	800d212 <CircularQueue_Add+0x27a>
      {
        /* Copy First part (or emtire buffer ) from current position up to the end of the buffer queue (or before if enough room)  */
        memcpy(&q->qBuff[curBuffPosition],&x[i*elementSize],NbBytesToCopy);
 800d1ce:	68fb      	ldr	r3, [r7, #12]
 800d1d0:	681a      	ldr	r2, [r3, #0]
 800d1d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d1d4:	18d0      	adds	r0, r2, r3
 800d1d6:	88fb      	ldrh	r3, [r7, #6]
 800d1d8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d1da:	fb02 f303 	mul.w	r3, r2, r3
 800d1de:	68ba      	ldr	r2, [r7, #8]
 800d1e0:	4413      	add	r3, r2
 800d1e2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d1e4:	4619      	mov	r1, r3
 800d1e6:	f004 fcd1 	bl	8011b8c <memcpy>
        /* Adjust bytes count */
        q->byteCount += NbBytesToCopy;
 800d1ea:	68fb      	ldr	r3, [r7, #12]
 800d1ec:	695a      	ldr	r2, [r3, #20]
 800d1ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d1f0:	441a      	add	r2, r3
 800d1f2:	68fb      	ldr	r3, [r7, #12]
 800d1f4:	615a      	str	r2, [r3, #20]
        /* Wrap */
        curBuffPosition = 0; 
 800d1f6:	2300      	movs	r3, #0
 800d1f8:	633b      	str	r3, [r7, #48]	; 0x30
        /* set NbCopiedBytes bytes with  ampount copied */
        NbCopiedBytes = NbBytesToCopy;
 800d1fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d1fc:	627b      	str	r3, [r7, #36]	; 0x24
        /* set the rest to copy if wrao , if no wrap will be 0 */
        NbBytesToCopy = elementSize - NbBytesToCopy;
 800d1fe:	88fa      	ldrh	r2, [r7, #6]
 800d200:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d202:	1ad3      	subs	r3, r2, r3
 800d204:	62bb      	str	r3, [r7, #40]	; 0x28
        /* set the current element Size, will be used to calaculate next last position at beggining of loop */
        curElementSize = (elementSize) + elemSizeStorageRoom ;
 800d206:	7ffb      	ldrb	r3, [r7, #31]
 800d208:	b29a      	uxth	r2, r3
 800d20a:	88fb      	ldrh	r3, [r7, #6]
 800d20c:	4413      	add	r3, r2
 800d20e:	86fb      	strh	r3, [r7, #54]	; 0x36
 800d210:	e0a4      	b.n	800d35c <CircularQueue_Add+0x3c4>
      }
      else if (NbBytesToCopy)  /* We have a wrap  to manage */
 800d212:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d214:	2b00      	cmp	r3, #0
 800d216:	f000 80a1 	beq.w	800d35c <CircularQueue_Add+0x3c4>
      {
       /* case of CIRCULAR_QUEUE_NO_WRAP_FLAG option */
         if (q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG)
 800d21a:	68fb      	ldr	r3, [r7, #12]
 800d21c:	7f1b      	ldrb	r3, [r3, #28]
 800d21e:	f003 0301 	and.w	r3, r3, #1
 800d222:	2b00      	cmp	r3, #0
 800d224:	d03a      	beq.n	800d29c <CircularQueue_Add+0x304>
        {
          /* if element size are variable and NO_WRAP option, Invalidate end of buffer setting 0xFFFF size*/
          if (q->elementSize == 0)
 800d226:	68fb      	ldr	r3, [r7, #12]
 800d228:	891b      	ldrh	r3, [r3, #8]
 800d22a:	2b00      	cmp	r3, #0
 800d22c:	d10d      	bne.n	800d24a <CircularQueue_Add+0x2b2>
          {
             q->qBuff[curBuffPosition-2] = 0xFF;
 800d22e:	68fb      	ldr	r3, [r7, #12]
 800d230:	681a      	ldr	r2, [r3, #0]
 800d232:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d234:	3b02      	subs	r3, #2
 800d236:	4413      	add	r3, r2
 800d238:	22ff      	movs	r2, #255	; 0xff
 800d23a:	701a      	strb	r2, [r3, #0]
             q->qBuff[curBuffPosition-1] = 0xFF;
 800d23c:	68fb      	ldr	r3, [r7, #12]
 800d23e:	681a      	ldr	r2, [r3, #0]
 800d240:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d242:	3b01      	subs	r3, #1
 800d244:	4413      	add	r3, r2
 800d246:	22ff      	movs	r2, #255	; 0xff
 800d248:	701a      	strb	r2, [r3, #0]
          }
          q->byteCount += NbBytesToCopy;  /* invalid data at the end of buffer are take into account in byteCount */
 800d24a:	68fb      	ldr	r3, [r7, #12]
 800d24c:	695a      	ldr	r2, [r3, #20]
 800d24e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d250:	441a      	add	r2, r3
 800d252:	68fb      	ldr	r3, [r7, #12]
 800d254:	615a      	str	r2, [r3, #20]
          /* No bytes coped a the end of buffer */
          NbCopiedBytes = 0;
 800d256:	2300      	movs	r3, #0
 800d258:	627b      	str	r3, [r7, #36]	; 0x24
          /* all element to be copied at the begnning of buffer */
          NbBytesToCopy = elementSize; 
 800d25a:	88fb      	ldrh	r3, [r7, #6]
 800d25c:	62bb      	str	r3, [r7, #40]	; 0x28
          /* Wrap */
          curBuffPosition = 0; 
 800d25e:	2300      	movs	r3, #0
 800d260:	633b      	str	r3, [r7, #48]	; 0x30
          /* if variable size element, invalidate end of buffer setting OxFFFF in element header (size) */
          if (q->elementSize == 0)
 800d262:	68fb      	ldr	r3, [r7, #12]
 800d264:	891b      	ldrh	r3, [r3, #8]
 800d266:	2b00      	cmp	r3, #0
 800d268:	d16f      	bne.n	800d34a <CircularQueue_Add+0x3b2>
          {
            q->qBuff[curBuffPosition++] = NbBytesToCopy & 0xFF;
 800d26a:	68fb      	ldr	r3, [r7, #12]
 800d26c:	681a      	ldr	r2, [r3, #0]
 800d26e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d270:	1c59      	adds	r1, r3, #1
 800d272:	6339      	str	r1, [r7, #48]	; 0x30
 800d274:	4413      	add	r3, r2
 800d276:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d278:	b2d2      	uxtb	r2, r2
 800d27a:	701a      	strb	r2, [r3, #0]
            q->qBuff[curBuffPosition++] = (NbBytesToCopy & 0xFF00) >> 8 ;
 800d27c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d27e:	0a18      	lsrs	r0, r3, #8
 800d280:	68fb      	ldr	r3, [r7, #12]
 800d282:	681a      	ldr	r2, [r3, #0]
 800d284:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d286:	1c59      	adds	r1, r3, #1
 800d288:	6339      	str	r1, [r7, #48]	; 0x30
 800d28a:	4413      	add	r3, r2
 800d28c:	b2c2      	uxtb	r2, r0
 800d28e:	701a      	strb	r2, [r3, #0]
            q->byteCount += 2;   
 800d290:	68fb      	ldr	r3, [r7, #12]
 800d292:	695b      	ldr	r3, [r3, #20]
 800d294:	1c9a      	adds	r2, r3, #2
 800d296:	68fb      	ldr	r3, [r7, #12]
 800d298:	615a      	str	r2, [r3, #20]
 800d29a:	e056      	b.n	800d34a <CircularQueue_Add+0x3b2>
          } 
           
        }
        /* case of CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG option */
        else if (q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG)
 800d29c:	68fb      	ldr	r3, [r7, #12]
 800d29e:	7f1b      	ldrb	r3, [r3, #28]
 800d2a0:	f003 0302 	and.w	r3, r3, #2
 800d2a4:	2b00      	cmp	r3, #0
 800d2a6:	d050      	beq.n	800d34a <CircularQueue_Add+0x3b2>
        {
          if (q->elementSize == 0)
 800d2a8:	68fb      	ldr	r3, [r7, #12]
 800d2aa:	891b      	ldrh	r3, [r3, #8]
 800d2ac:	2b00      	cmp	r3, #0
 800d2ae:	d14a      	bne.n	800d346 <CircularQueue_Add+0x3ae>
          {
            /* reset the size of current element to the nb bytes fitting at the end of buffer */
             q->qBuff[curBuffPosition-2] = NbBytesToCopy & 0xFF;
 800d2b0:	68fb      	ldr	r3, [r7, #12]
 800d2b2:	681a      	ldr	r2, [r3, #0]
 800d2b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d2b6:	3b02      	subs	r3, #2
 800d2b8:	4413      	add	r3, r2
 800d2ba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d2bc:	b2d2      	uxtb	r2, r2
 800d2be:	701a      	strb	r2, [r3, #0]
             q->qBuff[curBuffPosition-1] = (NbBytesToCopy & 0xFF00) >> 8 ;
 800d2c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d2c2:	0a19      	lsrs	r1, r3, #8
 800d2c4:	68fb      	ldr	r3, [r7, #12]
 800d2c6:	681a      	ldr	r2, [r3, #0]
 800d2c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d2ca:	3b01      	subs	r3, #1
 800d2cc:	4413      	add	r3, r2
 800d2ce:	b2ca      	uxtb	r2, r1
 800d2d0:	701a      	strb	r2, [r3, #0]
             /* copy the bytes */ 
             memcpy(&q->qBuff[curBuffPosition],&x[i*elementSize],NbBytesToCopy);
 800d2d2:	68fb      	ldr	r3, [r7, #12]
 800d2d4:	681a      	ldr	r2, [r3, #0]
 800d2d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d2d8:	18d0      	adds	r0, r2, r3
 800d2da:	88fb      	ldrh	r3, [r7, #6]
 800d2dc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d2de:	fb02 f303 	mul.w	r3, r2, r3
 800d2e2:	68ba      	ldr	r2, [r7, #8]
 800d2e4:	4413      	add	r3, r2
 800d2e6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d2e8:	4619      	mov	r1, r3
 800d2ea:	f004 fc4f 	bl	8011b8c <memcpy>
             q->byteCount += NbBytesToCopy; 
 800d2ee:	68fb      	ldr	r3, [r7, #12]
 800d2f0:	695a      	ldr	r2, [r3, #20]
 800d2f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d2f4:	441a      	add	r2, r3
 800d2f6:	68fb      	ldr	r3, [r7, #12]
 800d2f8:	615a      	str	r2, [r3, #20]
             /* set the number of copied bytes */
             NbCopiedBytes = NbBytesToCopy;             
 800d2fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d2fc:	627b      	str	r3, [r7, #36]	; 0x24
             /* set rest of data to be copied to begnning of buffer */
             NbBytesToCopy = elementSize - NbBytesToCopy;
 800d2fe:	88fa      	ldrh	r2, [r7, #6]
 800d300:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d302:	1ad3      	subs	r3, r2, r3
 800d304:	62bb      	str	r3, [r7, #40]	; 0x28
             /* one element more dur to split in 2 elements */
             q->elementCount++;
 800d306:	68fb      	ldr	r3, [r7, #12]
 800d308:	699b      	ldr	r3, [r3, #24]
 800d30a:	1c5a      	adds	r2, r3, #1
 800d30c:	68fb      	ldr	r3, [r7, #12]
 800d30e:	619a      	str	r2, [r3, #24]
             /* Wrap */
             curBuffPosition = 0; 
 800d310:	2300      	movs	r3, #0
 800d312:	633b      	str	r3, [r7, #48]	; 0x30
             /* Set new size for rest of data */
             q->qBuff[curBuffPosition++] = NbBytesToCopy & 0xFF;
 800d314:	68fb      	ldr	r3, [r7, #12]
 800d316:	681a      	ldr	r2, [r3, #0]
 800d318:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d31a:	1c59      	adds	r1, r3, #1
 800d31c:	6339      	str	r1, [r7, #48]	; 0x30
 800d31e:	4413      	add	r3, r2
 800d320:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d322:	b2d2      	uxtb	r2, r2
 800d324:	701a      	strb	r2, [r3, #0]
             q->qBuff[curBuffPosition++] = (NbBytesToCopy & 0xFF00) >> 8 ;
 800d326:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d328:	0a18      	lsrs	r0, r3, #8
 800d32a:	68fb      	ldr	r3, [r7, #12]
 800d32c:	681a      	ldr	r2, [r3, #0]
 800d32e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d330:	1c59      	adds	r1, r3, #1
 800d332:	6339      	str	r1, [r7, #48]	; 0x30
 800d334:	4413      	add	r3, r2
 800d336:	b2c2      	uxtb	r2, r0
 800d338:	701a      	strb	r2, [r3, #0]
             q->byteCount += 2;              
 800d33a:	68fb      	ldr	r3, [r7, #12]
 800d33c:	695b      	ldr	r3, [r3, #20]
 800d33e:	1c9a      	adds	r2, r3, #2
 800d340:	68fb      	ldr	r3, [r7, #12]
 800d342:	615a      	str	r2, [r3, #20]
 800d344:	e001      	b.n	800d34a <CircularQueue_Add+0x3b2>
          else
          {
            /* Should not occur */
            /* can not manage split Flag on Fixed size element */
            /* Buffer is corrupted */
            return NULL;
 800d346:	2300      	movs	r3, #0
 800d348:	e049      	b.n	800d3de <CircularQueue_Add+0x446>
          }
        }
        curElementSize = (NbBytesToCopy) + elemSizeStorageRoom ;
 800d34a:	7ffb      	ldrb	r3, [r7, #31]
 800d34c:	b29a      	uxth	r2, r3
 800d34e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d350:	b29b      	uxth	r3, r3
 800d352:	4413      	add	r3, r2
 800d354:	86fb      	strh	r3, [r7, #54]	; 0x36
        q->last = 0;        
 800d356:	68fb      	ldr	r3, [r7, #12]
 800d358:	2200      	movs	r2, #0
 800d35a:	611a      	str	r2, [r3, #16]
      }  
      
      /* some remaning byte to copy */
      if (NbBytesToCopy)      
 800d35c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d35e:	2b00      	cmp	r3, #0
 800d360:	d015      	beq.n	800d38e <CircularQueue_Add+0x3f6>
      {
        memcpy(&q->qBuff[curBuffPosition],&x[(i*elementSize)+NbCopiedBytes],NbBytesToCopy);
 800d362:	68fb      	ldr	r3, [r7, #12]
 800d364:	681a      	ldr	r2, [r3, #0]
 800d366:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d368:	18d0      	adds	r0, r2, r3
 800d36a:	88fb      	ldrh	r3, [r7, #6]
 800d36c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d36e:	fb02 f203 	mul.w	r2, r2, r3
 800d372:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d374:	4413      	add	r3, r2
 800d376:	68ba      	ldr	r2, [r7, #8]
 800d378:	4413      	add	r3, r2
 800d37a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d37c:	4619      	mov	r1, r3
 800d37e:	f004 fc05 	bl	8011b8c <memcpy>
        q->byteCount += NbBytesToCopy;
 800d382:	68fb      	ldr	r3, [r7, #12]
 800d384:	695a      	ldr	r2, [r3, #20]
 800d386:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d388:	441a      	add	r2, r3
 800d38a:	68fb      	ldr	r3, [r7, #12]
 800d38c:	615a      	str	r2, [r3, #20]
      }      
      
      /* One more element */
      q->elementCount++;
 800d38e:	68fb      	ldr	r3, [r7, #12]
 800d390:	699b      	ldr	r3, [r3, #24]
 800d392:	1c5a      	adds	r2, r3, #1
 800d394:	68fb      	ldr	r3, [r7, #12]
 800d396:	619a      	str	r2, [r3, #24]
    for (i=0; i < nbElements; i++) 
 800d398:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d39a:	3301      	adds	r3, #1
 800d39c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d39e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d3a0:	683b      	ldr	r3, [r7, #0]
 800d3a2:	429a      	cmp	r2, r3
 800d3a4:	f4ff aeb0 	bcc.w	800d108 <CircularQueue_Add+0x170>
    }
    
    ptr = q->qBuff + (MOD((q->last+elemSizeStorageRoom ),q->queueMaxSize));
 800d3a8:	68fb      	ldr	r3, [r7, #12]
 800d3aa:	681a      	ldr	r2, [r3, #0]
 800d3ac:	68fb      	ldr	r3, [r7, #12]
 800d3ae:	6919      	ldr	r1, [r3, #16]
 800d3b0:	7ffb      	ldrb	r3, [r7, #31]
 800d3b2:	4419      	add	r1, r3
 800d3b4:	68fb      	ldr	r3, [r7, #12]
 800d3b6:	685b      	ldr	r3, [r3, #4]
 800d3b8:	4299      	cmp	r1, r3
 800d3ba:	d307      	bcc.n	800d3cc <CircularQueue_Add+0x434>
 800d3bc:	68fb      	ldr	r3, [r7, #12]
 800d3be:	6919      	ldr	r1, [r3, #16]
 800d3c0:	7ffb      	ldrb	r3, [r7, #31]
 800d3c2:	4419      	add	r1, r3
 800d3c4:	68fb      	ldr	r3, [r7, #12]
 800d3c6:	685b      	ldr	r3, [r3, #4]
 800d3c8:	1acb      	subs	r3, r1, r3
 800d3ca:	e003      	b.n	800d3d4 <CircularQueue_Add+0x43c>
 800d3cc:	68fb      	ldr	r3, [r7, #12]
 800d3ce:	6919      	ldr	r1, [r3, #16]
 800d3d0:	7ffb      	ldrb	r3, [r7, #31]
 800d3d2:	440b      	add	r3, r1
 800d3d4:	4413      	add	r3, r2
 800d3d6:	623b      	str	r3, [r7, #32]
  /* for Breakpoint only...to remove */
  else
  {
    return NULL;
  }
  return ptr;
 800d3d8:	6a3b      	ldr	r3, [r7, #32]
 800d3da:	e000      	b.n	800d3de <CircularQueue_Add+0x446>
    return NULL;
 800d3dc:	2300      	movs	r3, #0
}
 800d3de:	4618      	mov	r0, r3
 800d3e0:	3738      	adds	r7, #56	; 0x38
 800d3e2:	46bd      	mov	sp, r7
 800d3e4:	bd80      	pop	{r7, pc}

0800d3e6 <CircularQueue_Remove>:
  * @param  q: pointer on queue structure  to be handled
  * @param  elementSize: Pointer to return Size of element to be removed  
  * @retval Pointer on removed element. NULL if queue was empty
  */
uint8_t* CircularQueue_Remove(queue_t *q, uint16_t* elementSize)
{
 800d3e6:	b480      	push	{r7}
 800d3e8:	b085      	sub	sp, #20
 800d3ea:	af00      	add	r7, sp, #0
 800d3ec:	6078      	str	r0, [r7, #4]
 800d3ee:	6039      	str	r1, [r7, #0]
  uint8_t  elemSizeStorageRoom = 0;
 800d3f0:	2300      	movs	r3, #0
 800d3f2:	72fb      	strb	r3, [r7, #11]
  uint8_t* ptr= NULL;
 800d3f4:	2300      	movs	r3, #0
 800d3f6:	60fb      	str	r3, [r7, #12]
  elemSizeStorageRoom = (q->elementSize == 0) ? 2 : 0;
 800d3f8:	687b      	ldr	r3, [r7, #4]
 800d3fa:	891b      	ldrh	r3, [r3, #8]
 800d3fc:	2b00      	cmp	r3, #0
 800d3fe:	d101      	bne.n	800d404 <CircularQueue_Remove+0x1e>
 800d400:	2302      	movs	r3, #2
 800d402:	e000      	b.n	800d406 <CircularQueue_Remove+0x20>
 800d404:	2300      	movs	r3, #0
 800d406:	72fb      	strb	r3, [r7, #11]
  *elementSize = 0;
 800d408:	683b      	ldr	r3, [r7, #0]
 800d40a:	2200      	movs	r2, #0
 800d40c:	801a      	strh	r2, [r3, #0]
  if (q->byteCount > 0) 
 800d40e:	687b      	ldr	r3, [r7, #4]
 800d410:	695b      	ldr	r3, [r3, #20]
 800d412:	2b00      	cmp	r3, #0
 800d414:	f000 80d4 	beq.w	800d5c0 <CircularQueue_Remove+0x1da>
  {
    /* retreive element Size */
    *elementSize = (q->elementSize == 0) ? q->qBuff[q->first] + ((q->qBuff[MOD((q->first+1), q->queueMaxSize)])<<8) : q->elementSize;
 800d418:	687b      	ldr	r3, [r7, #4]
 800d41a:	891b      	ldrh	r3, [r3, #8]
 800d41c:	2b00      	cmp	r3, #0
 800d41e:	d121      	bne.n	800d464 <CircularQueue_Remove+0x7e>
 800d420:	687b      	ldr	r3, [r7, #4]
 800d422:	681a      	ldr	r2, [r3, #0]
 800d424:	687b      	ldr	r3, [r7, #4]
 800d426:	68db      	ldr	r3, [r3, #12]
 800d428:	4413      	add	r3, r2
 800d42a:	781b      	ldrb	r3, [r3, #0]
 800d42c:	b29a      	uxth	r2, r3
 800d42e:	687b      	ldr	r3, [r7, #4]
 800d430:	6819      	ldr	r1, [r3, #0]
 800d432:	687b      	ldr	r3, [r7, #4]
 800d434:	68db      	ldr	r3, [r3, #12]
 800d436:	1c58      	adds	r0, r3, #1
 800d438:	687b      	ldr	r3, [r7, #4]
 800d43a:	685b      	ldr	r3, [r3, #4]
 800d43c:	4298      	cmp	r0, r3
 800d43e:	d306      	bcc.n	800d44e <CircularQueue_Remove+0x68>
 800d440:	687b      	ldr	r3, [r7, #4]
 800d442:	68d8      	ldr	r0, [r3, #12]
 800d444:	687b      	ldr	r3, [r7, #4]
 800d446:	685b      	ldr	r3, [r3, #4]
 800d448:	1ac3      	subs	r3, r0, r3
 800d44a:	3301      	adds	r3, #1
 800d44c:	e002      	b.n	800d454 <CircularQueue_Remove+0x6e>
 800d44e:	687b      	ldr	r3, [r7, #4]
 800d450:	68db      	ldr	r3, [r3, #12]
 800d452:	3301      	adds	r3, #1
 800d454:	440b      	add	r3, r1
 800d456:	781b      	ldrb	r3, [r3, #0]
 800d458:	b29b      	uxth	r3, r3
 800d45a:	021b      	lsls	r3, r3, #8
 800d45c:	b29b      	uxth	r3, r3
 800d45e:	4413      	add	r3, r2
 800d460:	b29b      	uxth	r3, r3
 800d462:	e001      	b.n	800d468 <CircularQueue_Remove+0x82>
 800d464:	687b      	ldr	r3, [r7, #4]
 800d466:	891b      	ldrh	r3, [r3, #8]
 800d468:	683a      	ldr	r2, [r7, #0]
 800d46a:	8013      	strh	r3, [r2, #0]

     if ((q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG) && !(q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG))
 800d46c:	687b      	ldr	r3, [r7, #4]
 800d46e:	7f1b      	ldrb	r3, [r3, #28]
 800d470:	f003 0301 	and.w	r3, r3, #1
 800d474:	2b00      	cmp	r3, #0
 800d476:	d059      	beq.n	800d52c <CircularQueue_Remove+0x146>
 800d478:	687b      	ldr	r3, [r7, #4]
 800d47a:	7f1b      	ldrb	r3, [r3, #28]
 800d47c:	f003 0302 	and.w	r3, r3, #2
 800d480:	2b00      	cmp	r3, #0
 800d482:	d153      	bne.n	800d52c <CircularQueue_Remove+0x146>
     {
       if (((*elementSize == 0xFFFF) && q->elementSize == 0 ) || 
 800d484:	683b      	ldr	r3, [r7, #0]
 800d486:	881b      	ldrh	r3, [r3, #0]
 800d488:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d48c:	4293      	cmp	r3, r2
 800d48e:	d103      	bne.n	800d498 <CircularQueue_Remove+0xb2>
 800d490:	687b      	ldr	r3, [r7, #4]
 800d492:	891b      	ldrh	r3, [r3, #8]
 800d494:	2b00      	cmp	r3, #0
 800d496:	d012      	beq.n	800d4be <CircularQueue_Remove+0xd8>
           ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 800d498:	687b      	ldr	r3, [r7, #4]
 800d49a:	68da      	ldr	r2, [r3, #12]
 800d49c:	687b      	ldr	r3, [r7, #4]
 800d49e:	691b      	ldr	r3, [r3, #16]
       if (((*elementSize == 0xFFFF) && q->elementSize == 0 ) || 
 800d4a0:	429a      	cmp	r2, r3
 800d4a2:	d943      	bls.n	800d52c <CircularQueue_Remove+0x146>
           ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 800d4a4:	687b      	ldr	r3, [r7, #4]
 800d4a6:	891b      	ldrh	r3, [r3, #8]
 800d4a8:	2b00      	cmp	r3, #0
 800d4aa:	d03f      	beq.n	800d52c <CircularQueue_Remove+0x146>
 800d4ac:	687b      	ldr	r3, [r7, #4]
 800d4ae:	685a      	ldr	r2, [r3, #4]
 800d4b0:	687b      	ldr	r3, [r7, #4]
 800d4b2:	68db      	ldr	r3, [r3, #12]
 800d4b4:	1ad3      	subs	r3, r2, r3
 800d4b6:	687a      	ldr	r2, [r7, #4]
 800d4b8:	8912      	ldrh	r2, [r2, #8]
 800d4ba:	4293      	cmp	r3, r2
 800d4bc:	d236      	bcs.n	800d52c <CircularQueue_Remove+0x146>
       {
          /* all data from current position up to the end of buffer are invalid */
          q->byteCount -= (q->queueMaxSize - q->first);
 800d4be:	687b      	ldr	r3, [r7, #4]
 800d4c0:	695a      	ldr	r2, [r3, #20]
 800d4c2:	687b      	ldr	r3, [r7, #4]
 800d4c4:	68d9      	ldr	r1, [r3, #12]
 800d4c6:	687b      	ldr	r3, [r7, #4]
 800d4c8:	685b      	ldr	r3, [r3, #4]
 800d4ca:	1acb      	subs	r3, r1, r3
 800d4cc:	441a      	add	r2, r3
 800d4ce:	687b      	ldr	r3, [r7, #4]
 800d4d0:	615a      	str	r2, [r3, #20]
          /* Adjust first element pos */
          q->first = 0;
 800d4d2:	687b      	ldr	r3, [r7, #4]
 800d4d4:	2200      	movs	r2, #0
 800d4d6:	60da      	str	r2, [r3, #12]
          /* retrieve the rigth size after the wrap [if varaible size element] */
          *elementSize = (q->elementSize == 0) ? q->qBuff[q->first] + ((q->qBuff[MOD((q->first+1), q->queueMaxSize)])<<8) : q->elementSize;
 800d4d8:	687b      	ldr	r3, [r7, #4]
 800d4da:	891b      	ldrh	r3, [r3, #8]
 800d4dc:	2b00      	cmp	r3, #0
 800d4de:	d121      	bne.n	800d524 <CircularQueue_Remove+0x13e>
 800d4e0:	687b      	ldr	r3, [r7, #4]
 800d4e2:	681a      	ldr	r2, [r3, #0]
 800d4e4:	687b      	ldr	r3, [r7, #4]
 800d4e6:	68db      	ldr	r3, [r3, #12]
 800d4e8:	4413      	add	r3, r2
 800d4ea:	781b      	ldrb	r3, [r3, #0]
 800d4ec:	b29a      	uxth	r2, r3
 800d4ee:	687b      	ldr	r3, [r7, #4]
 800d4f0:	6819      	ldr	r1, [r3, #0]
 800d4f2:	687b      	ldr	r3, [r7, #4]
 800d4f4:	68db      	ldr	r3, [r3, #12]
 800d4f6:	1c58      	adds	r0, r3, #1
 800d4f8:	687b      	ldr	r3, [r7, #4]
 800d4fa:	685b      	ldr	r3, [r3, #4]
 800d4fc:	4298      	cmp	r0, r3
 800d4fe:	d306      	bcc.n	800d50e <CircularQueue_Remove+0x128>
 800d500:	687b      	ldr	r3, [r7, #4]
 800d502:	68d8      	ldr	r0, [r3, #12]
 800d504:	687b      	ldr	r3, [r7, #4]
 800d506:	685b      	ldr	r3, [r3, #4]
 800d508:	1ac3      	subs	r3, r0, r3
 800d50a:	3301      	adds	r3, #1
 800d50c:	e002      	b.n	800d514 <CircularQueue_Remove+0x12e>
 800d50e:	687b      	ldr	r3, [r7, #4]
 800d510:	68db      	ldr	r3, [r3, #12]
 800d512:	3301      	adds	r3, #1
 800d514:	440b      	add	r3, r1
 800d516:	781b      	ldrb	r3, [r3, #0]
 800d518:	b29b      	uxth	r3, r3
 800d51a:	021b      	lsls	r3, r3, #8
 800d51c:	b29b      	uxth	r3, r3
 800d51e:	4413      	add	r3, r2
 800d520:	b29b      	uxth	r3, r3
 800d522:	e001      	b.n	800d528 <CircularQueue_Remove+0x142>
 800d524:	687b      	ldr	r3, [r7, #4]
 800d526:	891b      	ldrh	r3, [r3, #8]
 800d528:	683a      	ldr	r2, [r7, #0]
 800d52a:	8013      	strh	r3, [r2, #0]
       }
     }

    /* retreive element */
    ptr = q->qBuff + (MOD((q->first + elemSizeStorageRoom), q->queueMaxSize));
 800d52c:	687b      	ldr	r3, [r7, #4]
 800d52e:	681a      	ldr	r2, [r3, #0]
 800d530:	687b      	ldr	r3, [r7, #4]
 800d532:	68d9      	ldr	r1, [r3, #12]
 800d534:	7afb      	ldrb	r3, [r7, #11]
 800d536:	4419      	add	r1, r3
 800d538:	687b      	ldr	r3, [r7, #4]
 800d53a:	685b      	ldr	r3, [r3, #4]
 800d53c:	4299      	cmp	r1, r3
 800d53e:	d307      	bcc.n	800d550 <CircularQueue_Remove+0x16a>
 800d540:	687b      	ldr	r3, [r7, #4]
 800d542:	68d9      	ldr	r1, [r3, #12]
 800d544:	7afb      	ldrb	r3, [r7, #11]
 800d546:	4419      	add	r1, r3
 800d548:	687b      	ldr	r3, [r7, #4]
 800d54a:	685b      	ldr	r3, [r3, #4]
 800d54c:	1acb      	subs	r3, r1, r3
 800d54e:	e003      	b.n	800d558 <CircularQueue_Remove+0x172>
 800d550:	687b      	ldr	r3, [r7, #4]
 800d552:	68d9      	ldr	r1, [r3, #12]
 800d554:	7afb      	ldrb	r3, [r7, #11]
 800d556:	440b      	add	r3, r1
 800d558:	4413      	add	r3, r2
 800d55a:	60fb      	str	r3, [r7, #12]

    /* adjust byte count */
    q->byteCount -= (*elementSize + elemSizeStorageRoom) ;
 800d55c:	687b      	ldr	r3, [r7, #4]
 800d55e:	695b      	ldr	r3, [r3, #20]
 800d560:	683a      	ldr	r2, [r7, #0]
 800d562:	8812      	ldrh	r2, [r2, #0]
 800d564:	4611      	mov	r1, r2
 800d566:	7afa      	ldrb	r2, [r7, #11]
 800d568:	440a      	add	r2, r1
 800d56a:	1a9a      	subs	r2, r3, r2
 800d56c:	687b      	ldr	r3, [r7, #4]
 800d56e:	615a      	str	r2, [r3, #20]
    
    /* Adjust q->first */
    if (q->byteCount > 0)
 800d570:	687b      	ldr	r3, [r7, #4]
 800d572:	695b      	ldr	r3, [r3, #20]
 800d574:	2b00      	cmp	r3, #0
 800d576:	d01e      	beq.n	800d5b6 <CircularQueue_Remove+0x1d0>
    {
      q->first = MOD((q->first+ *elementSize + elemSizeStorageRoom ), q->queueMaxSize);
 800d578:	687b      	ldr	r3, [r7, #4]
 800d57a:	68db      	ldr	r3, [r3, #12]
 800d57c:	683a      	ldr	r2, [r7, #0]
 800d57e:	8812      	ldrh	r2, [r2, #0]
 800d580:	441a      	add	r2, r3
 800d582:	7afb      	ldrb	r3, [r7, #11]
 800d584:	441a      	add	r2, r3
 800d586:	687b      	ldr	r3, [r7, #4]
 800d588:	685b      	ldr	r3, [r3, #4]
 800d58a:	429a      	cmp	r2, r3
 800d58c:	d30a      	bcc.n	800d5a4 <CircularQueue_Remove+0x1be>
 800d58e:	687b      	ldr	r3, [r7, #4]
 800d590:	68db      	ldr	r3, [r3, #12]
 800d592:	683a      	ldr	r2, [r7, #0]
 800d594:	8812      	ldrh	r2, [r2, #0]
 800d596:	441a      	add	r2, r3
 800d598:	7afb      	ldrb	r3, [r7, #11]
 800d59a:	441a      	add	r2, r3
 800d59c:	687b      	ldr	r3, [r7, #4]
 800d59e:	685b      	ldr	r3, [r3, #4]
 800d5a0:	1ad3      	subs	r3, r2, r3
 800d5a2:	e006      	b.n	800d5b2 <CircularQueue_Remove+0x1cc>
 800d5a4:	687b      	ldr	r3, [r7, #4]
 800d5a6:	68db      	ldr	r3, [r3, #12]
 800d5a8:	683a      	ldr	r2, [r7, #0]
 800d5aa:	8812      	ldrh	r2, [r2, #0]
 800d5ac:	441a      	add	r2, r3
 800d5ae:	7afb      	ldrb	r3, [r7, #11]
 800d5b0:	4413      	add	r3, r2
 800d5b2:	687a      	ldr	r2, [r7, #4]
 800d5b4:	60d3      	str	r3, [r2, #12]
    }    
    /* adjust element count */    
    --q->elementCount;    
 800d5b6:	687b      	ldr	r3, [r7, #4]
 800d5b8:	699b      	ldr	r3, [r3, #24]
 800d5ba:	1e5a      	subs	r2, r3, #1
 800d5bc:	687b      	ldr	r3, [r7, #4]
 800d5be:	619a      	str	r2, [r3, #24]
  }
  return ptr;
 800d5c0:	68fb      	ldr	r3, [r7, #12]
}
 800d5c2:	4618      	mov	r0, r3
 800d5c4:	3714      	adds	r7, #20
 800d5c6:	46bd      	mov	sp, r7
 800d5c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5cc:	4770      	bx	lr

0800d5ce <CircularQueue_Sense>:
  * @param  q: pointer on queue structure  to be handled
  * @param  elementSize:  Pointer to return Size of element to be removed  
  * @retval Pointer on sensed element. NULL if queue was empty
  */
uint8_t* CircularQueue_Sense(queue_t *q, uint16_t* elementSize)
{
 800d5ce:	b480      	push	{r7}
 800d5d0:	b087      	sub	sp, #28
 800d5d2:	af00      	add	r7, sp, #0
 800d5d4:	6078      	str	r0, [r7, #4]
 800d5d6:	6039      	str	r1, [r7, #0]
  uint8_t  elemSizeStorageRoom = 0;
 800d5d8:	2300      	movs	r3, #0
 800d5da:	73fb      	strb	r3, [r7, #15]
  uint8_t* x= NULL;
 800d5dc:	2300      	movs	r3, #0
 800d5de:	617b      	str	r3, [r7, #20]
  elemSizeStorageRoom = (q->elementSize == 0) ? 2 : 0;
 800d5e0:	687b      	ldr	r3, [r7, #4]
 800d5e2:	891b      	ldrh	r3, [r3, #8]
 800d5e4:	2b00      	cmp	r3, #0
 800d5e6:	d101      	bne.n	800d5ec <CircularQueue_Sense+0x1e>
 800d5e8:	2302      	movs	r3, #2
 800d5ea:	e000      	b.n	800d5ee <CircularQueue_Sense+0x20>
 800d5ec:	2300      	movs	r3, #0
 800d5ee:	73fb      	strb	r3, [r7, #15]
  *elementSize = 0;
 800d5f0:	683b      	ldr	r3, [r7, #0]
 800d5f2:	2200      	movs	r2, #0
 800d5f4:	801a      	strh	r2, [r3, #0]
  uint32_t FirstElemetPos = 0;
 800d5f6:	2300      	movs	r3, #0
 800d5f8:	613b      	str	r3, [r7, #16]
    
  if (q->byteCount > 0) 
 800d5fa:	687b      	ldr	r3, [r7, #4]
 800d5fc:	695b      	ldr	r3, [r3, #20]
 800d5fe:	2b00      	cmp	r3, #0
 800d600:	f000 8093 	beq.w	800d72a <CircularQueue_Sense+0x15c>
  {
    FirstElemetPos = q->first;
 800d604:	687b      	ldr	r3, [r7, #4]
 800d606:	68db      	ldr	r3, [r3, #12]
 800d608:	613b      	str	r3, [r7, #16]
    *elementSize = (q->elementSize == 0) ? q->qBuff[q->first] + ((q->qBuff[MOD((q->first+1), q->queueMaxSize)])<<8) : q->elementSize;
 800d60a:	687b      	ldr	r3, [r7, #4]
 800d60c:	891b      	ldrh	r3, [r3, #8]
 800d60e:	2b00      	cmp	r3, #0
 800d610:	d121      	bne.n	800d656 <CircularQueue_Sense+0x88>
 800d612:	687b      	ldr	r3, [r7, #4]
 800d614:	681a      	ldr	r2, [r3, #0]
 800d616:	687b      	ldr	r3, [r7, #4]
 800d618:	68db      	ldr	r3, [r3, #12]
 800d61a:	4413      	add	r3, r2
 800d61c:	781b      	ldrb	r3, [r3, #0]
 800d61e:	b29a      	uxth	r2, r3
 800d620:	687b      	ldr	r3, [r7, #4]
 800d622:	6819      	ldr	r1, [r3, #0]
 800d624:	687b      	ldr	r3, [r7, #4]
 800d626:	68db      	ldr	r3, [r3, #12]
 800d628:	1c58      	adds	r0, r3, #1
 800d62a:	687b      	ldr	r3, [r7, #4]
 800d62c:	685b      	ldr	r3, [r3, #4]
 800d62e:	4298      	cmp	r0, r3
 800d630:	d306      	bcc.n	800d640 <CircularQueue_Sense+0x72>
 800d632:	687b      	ldr	r3, [r7, #4]
 800d634:	68d8      	ldr	r0, [r3, #12]
 800d636:	687b      	ldr	r3, [r7, #4]
 800d638:	685b      	ldr	r3, [r3, #4]
 800d63a:	1ac3      	subs	r3, r0, r3
 800d63c:	3301      	adds	r3, #1
 800d63e:	e002      	b.n	800d646 <CircularQueue_Sense+0x78>
 800d640:	687b      	ldr	r3, [r7, #4]
 800d642:	68db      	ldr	r3, [r3, #12]
 800d644:	3301      	adds	r3, #1
 800d646:	440b      	add	r3, r1
 800d648:	781b      	ldrb	r3, [r3, #0]
 800d64a:	b29b      	uxth	r3, r3
 800d64c:	021b      	lsls	r3, r3, #8
 800d64e:	b29b      	uxth	r3, r3
 800d650:	4413      	add	r3, r2
 800d652:	b29b      	uxth	r3, r3
 800d654:	e001      	b.n	800d65a <CircularQueue_Sense+0x8c>
 800d656:	687b      	ldr	r3, [r7, #4]
 800d658:	891b      	ldrh	r3, [r3, #8]
 800d65a:	683a      	ldr	r2, [r7, #0]
 800d65c:	8013      	strh	r3, [r2, #0]
    
    if ((q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG) && !(q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG))
 800d65e:	687b      	ldr	r3, [r7, #4]
 800d660:	7f1b      	ldrb	r3, [r3, #28]
 800d662:	f003 0301 	and.w	r3, r3, #1
 800d666:	2b00      	cmp	r3, #0
 800d668:	d04a      	beq.n	800d700 <CircularQueue_Sense+0x132>
 800d66a:	687b      	ldr	r3, [r7, #4]
 800d66c:	7f1b      	ldrb	r3, [r3, #28]
 800d66e:	f003 0302 	and.w	r3, r3, #2
 800d672:	2b00      	cmp	r3, #0
 800d674:	d144      	bne.n	800d700 <CircularQueue_Sense+0x132>
    { 
      if (((*elementSize == 0xFFFF) && q->elementSize == 0 ) || 
 800d676:	683b      	ldr	r3, [r7, #0]
 800d678:	881b      	ldrh	r3, [r3, #0]
 800d67a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d67e:	4293      	cmp	r3, r2
 800d680:	d103      	bne.n	800d68a <CircularQueue_Sense+0xbc>
 800d682:	687b      	ldr	r3, [r7, #4]
 800d684:	891b      	ldrh	r3, [r3, #8]
 800d686:	2b00      	cmp	r3, #0
 800d688:	d012      	beq.n	800d6b0 <CircularQueue_Sense+0xe2>
          ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 800d68a:	687b      	ldr	r3, [r7, #4]
 800d68c:	68da      	ldr	r2, [r3, #12]
 800d68e:	687b      	ldr	r3, [r7, #4]
 800d690:	691b      	ldr	r3, [r3, #16]
      if (((*elementSize == 0xFFFF) && q->elementSize == 0 ) || 
 800d692:	429a      	cmp	r2, r3
 800d694:	d934      	bls.n	800d700 <CircularQueue_Sense+0x132>
          ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 800d696:	687b      	ldr	r3, [r7, #4]
 800d698:	891b      	ldrh	r3, [r3, #8]
 800d69a:	2b00      	cmp	r3, #0
 800d69c:	d030      	beq.n	800d700 <CircularQueue_Sense+0x132>
 800d69e:	687b      	ldr	r3, [r7, #4]
 800d6a0:	685a      	ldr	r2, [r3, #4]
 800d6a2:	687b      	ldr	r3, [r7, #4]
 800d6a4:	68db      	ldr	r3, [r3, #12]
 800d6a6:	1ad3      	subs	r3, r2, r3
 800d6a8:	687a      	ldr	r2, [r7, #4]
 800d6aa:	8912      	ldrh	r2, [r2, #8]
 800d6ac:	4293      	cmp	r3, r2
 800d6ae:	d227      	bcs.n	800d700 <CircularQueue_Sense+0x132>

      {
        /* all data from current position up to the end of buffer are invalid */
        FirstElemetPos = 0; /* wrap to the begiining of buffer */
 800d6b0:	2300      	movs	r3, #0
 800d6b2:	613b      	str	r3, [r7, #16]

        /* retrieve the rigth size after the wrap [if varaible size element] */
        *elementSize = (q->elementSize == 0) ? q->qBuff[FirstElemetPos]+ ((q->qBuff[MOD((FirstElemetPos+1), q->queueMaxSize)])<<8) : q->elementSize;
 800d6b4:	687b      	ldr	r3, [r7, #4]
 800d6b6:	891b      	ldrh	r3, [r3, #8]
 800d6b8:	2b00      	cmp	r3, #0
 800d6ba:	d11d      	bne.n	800d6f8 <CircularQueue_Sense+0x12a>
 800d6bc:	687b      	ldr	r3, [r7, #4]
 800d6be:	681a      	ldr	r2, [r3, #0]
 800d6c0:	693b      	ldr	r3, [r7, #16]
 800d6c2:	4413      	add	r3, r2
 800d6c4:	781b      	ldrb	r3, [r3, #0]
 800d6c6:	b29a      	uxth	r2, r3
 800d6c8:	687b      	ldr	r3, [r7, #4]
 800d6ca:	6819      	ldr	r1, [r3, #0]
 800d6cc:	693b      	ldr	r3, [r7, #16]
 800d6ce:	1c58      	adds	r0, r3, #1
 800d6d0:	687b      	ldr	r3, [r7, #4]
 800d6d2:	685b      	ldr	r3, [r3, #4]
 800d6d4:	4298      	cmp	r0, r3
 800d6d6:	d305      	bcc.n	800d6e4 <CircularQueue_Sense+0x116>
 800d6d8:	687b      	ldr	r3, [r7, #4]
 800d6da:	685b      	ldr	r3, [r3, #4]
 800d6dc:	6938      	ldr	r0, [r7, #16]
 800d6de:	1ac3      	subs	r3, r0, r3
 800d6e0:	3301      	adds	r3, #1
 800d6e2:	e001      	b.n	800d6e8 <CircularQueue_Sense+0x11a>
 800d6e4:	693b      	ldr	r3, [r7, #16]
 800d6e6:	3301      	adds	r3, #1
 800d6e8:	440b      	add	r3, r1
 800d6ea:	781b      	ldrb	r3, [r3, #0]
 800d6ec:	b29b      	uxth	r3, r3
 800d6ee:	021b      	lsls	r3, r3, #8
 800d6f0:	b29b      	uxth	r3, r3
 800d6f2:	4413      	add	r3, r2
 800d6f4:	b29b      	uxth	r3, r3
 800d6f6:	e001      	b.n	800d6fc <CircularQueue_Sense+0x12e>
 800d6f8:	687b      	ldr	r3, [r7, #4]
 800d6fa:	891b      	ldrh	r3, [r3, #8]
 800d6fc:	683a      	ldr	r2, [r7, #0]
 800d6fe:	8013      	strh	r3, [r2, #0]
      }
   }
   /* retrieve element */
    x = q->qBuff + (MOD((FirstElemetPos + elemSizeStorageRoom), q->queueMaxSize));
 800d700:	687b      	ldr	r3, [r7, #4]
 800d702:	681a      	ldr	r2, [r3, #0]
 800d704:	7bf9      	ldrb	r1, [r7, #15]
 800d706:	693b      	ldr	r3, [r7, #16]
 800d708:	4419      	add	r1, r3
 800d70a:	687b      	ldr	r3, [r7, #4]
 800d70c:	685b      	ldr	r3, [r3, #4]
 800d70e:	4299      	cmp	r1, r3
 800d710:	d306      	bcc.n	800d720 <CircularQueue_Sense+0x152>
 800d712:	7bf9      	ldrb	r1, [r7, #15]
 800d714:	693b      	ldr	r3, [r7, #16]
 800d716:	4419      	add	r1, r3
 800d718:	687b      	ldr	r3, [r7, #4]
 800d71a:	685b      	ldr	r3, [r3, #4]
 800d71c:	1acb      	subs	r3, r1, r3
 800d71e:	e002      	b.n	800d726 <CircularQueue_Sense+0x158>
 800d720:	7bf9      	ldrb	r1, [r7, #15]
 800d722:	693b      	ldr	r3, [r7, #16]
 800d724:	440b      	add	r3, r1
 800d726:	4413      	add	r3, r2
 800d728:	617b      	str	r3, [r7, #20]
  }
  return x;
 800d72a:	697b      	ldr	r3, [r7, #20]
}
 800d72c:	4618      	mov	r0, r3
 800d72e:	371c      	adds	r7, #28
 800d730:	46bd      	mov	sp, r7
 800d732:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d736:	4770      	bx	lr

0800d738 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800d738:	b480      	push	{r7}
 800d73a:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 800d73c:	bf00      	nop
 800d73e:	46bd      	mov	sp, r7
 800d740:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d744:	4770      	bx	lr
	...

0800d748 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800d748:	b480      	push	{r7}
 800d74a:	b085      	sub	sp, #20
 800d74c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d74e:	f3ef 8305 	mrs	r3, IPSR
 800d752:	60bb      	str	r3, [r7, #8]
  return(result);
 800d754:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800d756:	2b00      	cmp	r3, #0
 800d758:	d10f      	bne.n	800d77a <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d75a:	f3ef 8310 	mrs	r3, PRIMASK
 800d75e:	607b      	str	r3, [r7, #4]
  return(result);
 800d760:	687b      	ldr	r3, [r7, #4]
 800d762:	2b00      	cmp	r3, #0
 800d764:	d105      	bne.n	800d772 <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800d766:	f3ef 8311 	mrs	r3, BASEPRI
 800d76a:	603b      	str	r3, [r7, #0]
  return(result);
 800d76c:	683b      	ldr	r3, [r7, #0]
 800d76e:	2b00      	cmp	r3, #0
 800d770:	d007      	beq.n	800d782 <osKernelInitialize+0x3a>
 800d772:	4b0e      	ldr	r3, [pc, #56]	; (800d7ac <osKernelInitialize+0x64>)
 800d774:	681b      	ldr	r3, [r3, #0]
 800d776:	2b02      	cmp	r3, #2
 800d778:	d103      	bne.n	800d782 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 800d77a:	f06f 0305 	mvn.w	r3, #5
 800d77e:	60fb      	str	r3, [r7, #12]
 800d780:	e00c      	b.n	800d79c <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 800d782:	4b0a      	ldr	r3, [pc, #40]	; (800d7ac <osKernelInitialize+0x64>)
 800d784:	681b      	ldr	r3, [r3, #0]
 800d786:	2b00      	cmp	r3, #0
 800d788:	d105      	bne.n	800d796 <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800d78a:	4b08      	ldr	r3, [pc, #32]	; (800d7ac <osKernelInitialize+0x64>)
 800d78c:	2201      	movs	r2, #1
 800d78e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800d790:	2300      	movs	r3, #0
 800d792:	60fb      	str	r3, [r7, #12]
 800d794:	e002      	b.n	800d79c <osKernelInitialize+0x54>
    } else {
      stat = osError;
 800d796:	f04f 33ff 	mov.w	r3, #4294967295
 800d79a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800d79c:	68fb      	ldr	r3, [r7, #12]
}
 800d79e:	4618      	mov	r0, r3
 800d7a0:	3714      	adds	r7, #20
 800d7a2:	46bd      	mov	sp, r7
 800d7a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7a8:	4770      	bx	lr
 800d7aa:	bf00      	nop
 800d7ac:	2000147c 	.word	0x2000147c

0800d7b0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800d7b0:	b580      	push	{r7, lr}
 800d7b2:	b084      	sub	sp, #16
 800d7b4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d7b6:	f3ef 8305 	mrs	r3, IPSR
 800d7ba:	60bb      	str	r3, [r7, #8]
  return(result);
 800d7bc:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800d7be:	2b00      	cmp	r3, #0
 800d7c0:	d10f      	bne.n	800d7e2 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d7c2:	f3ef 8310 	mrs	r3, PRIMASK
 800d7c6:	607b      	str	r3, [r7, #4]
  return(result);
 800d7c8:	687b      	ldr	r3, [r7, #4]
 800d7ca:	2b00      	cmp	r3, #0
 800d7cc:	d105      	bne.n	800d7da <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800d7ce:	f3ef 8311 	mrs	r3, BASEPRI
 800d7d2:	603b      	str	r3, [r7, #0]
  return(result);
 800d7d4:	683b      	ldr	r3, [r7, #0]
 800d7d6:	2b00      	cmp	r3, #0
 800d7d8:	d007      	beq.n	800d7ea <osKernelStart+0x3a>
 800d7da:	4b0f      	ldr	r3, [pc, #60]	; (800d818 <osKernelStart+0x68>)
 800d7dc:	681b      	ldr	r3, [r3, #0]
 800d7de:	2b02      	cmp	r3, #2
 800d7e0:	d103      	bne.n	800d7ea <osKernelStart+0x3a>
    stat = osErrorISR;
 800d7e2:	f06f 0305 	mvn.w	r3, #5
 800d7e6:	60fb      	str	r3, [r7, #12]
 800d7e8:	e010      	b.n	800d80c <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 800d7ea:	4b0b      	ldr	r3, [pc, #44]	; (800d818 <osKernelStart+0x68>)
 800d7ec:	681b      	ldr	r3, [r3, #0]
 800d7ee:	2b01      	cmp	r3, #1
 800d7f0:	d109      	bne.n	800d806 <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800d7f2:	f7ff ffa1 	bl	800d738 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800d7f6:	4b08      	ldr	r3, [pc, #32]	; (800d818 <osKernelStart+0x68>)
 800d7f8:	2202      	movs	r2, #2
 800d7fa:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800d7fc:	f002 fd5e 	bl	80102bc <vTaskStartScheduler>
      stat = osOK;
 800d800:	2300      	movs	r3, #0
 800d802:	60fb      	str	r3, [r7, #12]
 800d804:	e002      	b.n	800d80c <osKernelStart+0x5c>
    } else {
      stat = osError;
 800d806:	f04f 33ff 	mov.w	r3, #4294967295
 800d80a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800d80c:	68fb      	ldr	r3, [r7, #12]
}
 800d80e:	4618      	mov	r0, r3
 800d810:	3710      	adds	r7, #16
 800d812:	46bd      	mov	sp, r7
 800d814:	bd80      	pop	{r7, pc}
 800d816:	bf00      	nop
 800d818:	2000147c 	.word	0x2000147c

0800d81c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800d81c:	b580      	push	{r7, lr}
 800d81e:	b090      	sub	sp, #64	; 0x40
 800d820:	af04      	add	r7, sp, #16
 800d822:	60f8      	str	r0, [r7, #12]
 800d824:	60b9      	str	r1, [r7, #8]
 800d826:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800d828:	2300      	movs	r3, #0
 800d82a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d82c:	f3ef 8305 	mrs	r3, IPSR
 800d830:	61fb      	str	r3, [r7, #28]
  return(result);
 800d832:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 800d834:	2b00      	cmp	r3, #0
 800d836:	f040 808f 	bne.w	800d958 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d83a:	f3ef 8310 	mrs	r3, PRIMASK
 800d83e:	61bb      	str	r3, [r7, #24]
  return(result);
 800d840:	69bb      	ldr	r3, [r7, #24]
 800d842:	2b00      	cmp	r3, #0
 800d844:	d105      	bne.n	800d852 <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800d846:	f3ef 8311 	mrs	r3, BASEPRI
 800d84a:	617b      	str	r3, [r7, #20]
  return(result);
 800d84c:	697b      	ldr	r3, [r7, #20]
 800d84e:	2b00      	cmp	r3, #0
 800d850:	d003      	beq.n	800d85a <osThreadNew+0x3e>
 800d852:	4b44      	ldr	r3, [pc, #272]	; (800d964 <osThreadNew+0x148>)
 800d854:	681b      	ldr	r3, [r3, #0]
 800d856:	2b02      	cmp	r3, #2
 800d858:	d07e      	beq.n	800d958 <osThreadNew+0x13c>
 800d85a:	68fb      	ldr	r3, [r7, #12]
 800d85c:	2b00      	cmp	r3, #0
 800d85e:	d07b      	beq.n	800d958 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 800d860:	2380      	movs	r3, #128	; 0x80
 800d862:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 800d864:	2318      	movs	r3, #24
 800d866:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 800d868:	2300      	movs	r3, #0
 800d86a:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 800d86c:	f04f 33ff 	mov.w	r3, #4294967295
 800d870:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800d872:	687b      	ldr	r3, [r7, #4]
 800d874:	2b00      	cmp	r3, #0
 800d876:	d045      	beq.n	800d904 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 800d878:	687b      	ldr	r3, [r7, #4]
 800d87a:	681b      	ldr	r3, [r3, #0]
 800d87c:	2b00      	cmp	r3, #0
 800d87e:	d002      	beq.n	800d886 <osThreadNew+0x6a>
        name = attr->name;
 800d880:	687b      	ldr	r3, [r7, #4]
 800d882:	681b      	ldr	r3, [r3, #0]
 800d884:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 800d886:	687b      	ldr	r3, [r7, #4]
 800d888:	699b      	ldr	r3, [r3, #24]
 800d88a:	2b00      	cmp	r3, #0
 800d88c:	d002      	beq.n	800d894 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 800d88e:	687b      	ldr	r3, [r7, #4]
 800d890:	699b      	ldr	r3, [r3, #24]
 800d892:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800d894:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d896:	2b00      	cmp	r3, #0
 800d898:	d008      	beq.n	800d8ac <osThreadNew+0x90>
 800d89a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d89c:	2b38      	cmp	r3, #56	; 0x38
 800d89e:	d805      	bhi.n	800d8ac <osThreadNew+0x90>
 800d8a0:	687b      	ldr	r3, [r7, #4]
 800d8a2:	685b      	ldr	r3, [r3, #4]
 800d8a4:	f003 0301 	and.w	r3, r3, #1
 800d8a8:	2b00      	cmp	r3, #0
 800d8aa:	d001      	beq.n	800d8b0 <osThreadNew+0x94>
        return (NULL);
 800d8ac:	2300      	movs	r3, #0
 800d8ae:	e054      	b.n	800d95a <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 800d8b0:	687b      	ldr	r3, [r7, #4]
 800d8b2:	695b      	ldr	r3, [r3, #20]
 800d8b4:	2b00      	cmp	r3, #0
 800d8b6:	d003      	beq.n	800d8c0 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800d8b8:	687b      	ldr	r3, [r7, #4]
 800d8ba:	695b      	ldr	r3, [r3, #20]
 800d8bc:	089b      	lsrs	r3, r3, #2
 800d8be:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800d8c0:	687b      	ldr	r3, [r7, #4]
 800d8c2:	689b      	ldr	r3, [r3, #8]
 800d8c4:	2b00      	cmp	r3, #0
 800d8c6:	d00e      	beq.n	800d8e6 <osThreadNew+0xca>
 800d8c8:	687b      	ldr	r3, [r7, #4]
 800d8ca:	68db      	ldr	r3, [r3, #12]
 800d8cc:	2b5b      	cmp	r3, #91	; 0x5b
 800d8ce:	d90a      	bls.n	800d8e6 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800d8d0:	687b      	ldr	r3, [r7, #4]
 800d8d2:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800d8d4:	2b00      	cmp	r3, #0
 800d8d6:	d006      	beq.n	800d8e6 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800d8d8:	687b      	ldr	r3, [r7, #4]
 800d8da:	695b      	ldr	r3, [r3, #20]
 800d8dc:	2b00      	cmp	r3, #0
 800d8de:	d002      	beq.n	800d8e6 <osThreadNew+0xca>
        mem = 1;
 800d8e0:	2301      	movs	r3, #1
 800d8e2:	623b      	str	r3, [r7, #32]
 800d8e4:	e010      	b.n	800d908 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800d8e6:	687b      	ldr	r3, [r7, #4]
 800d8e8:	689b      	ldr	r3, [r3, #8]
 800d8ea:	2b00      	cmp	r3, #0
 800d8ec:	d10c      	bne.n	800d908 <osThreadNew+0xec>
 800d8ee:	687b      	ldr	r3, [r7, #4]
 800d8f0:	68db      	ldr	r3, [r3, #12]
 800d8f2:	2b00      	cmp	r3, #0
 800d8f4:	d108      	bne.n	800d908 <osThreadNew+0xec>
 800d8f6:	687b      	ldr	r3, [r7, #4]
 800d8f8:	691b      	ldr	r3, [r3, #16]
 800d8fa:	2b00      	cmp	r3, #0
 800d8fc:	d104      	bne.n	800d908 <osThreadNew+0xec>
          mem = 0;
 800d8fe:	2300      	movs	r3, #0
 800d900:	623b      	str	r3, [r7, #32]
 800d902:	e001      	b.n	800d908 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 800d904:	2300      	movs	r3, #0
 800d906:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 800d908:	6a3b      	ldr	r3, [r7, #32]
 800d90a:	2b01      	cmp	r3, #1
 800d90c:	d110      	bne.n	800d930 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800d90e:	687b      	ldr	r3, [r7, #4]
 800d910:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 800d912:	687a      	ldr	r2, [r7, #4]
 800d914:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800d916:	9202      	str	r2, [sp, #8]
 800d918:	9301      	str	r3, [sp, #4]
 800d91a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d91c:	9300      	str	r3, [sp, #0]
 800d91e:	68bb      	ldr	r3, [r7, #8]
 800d920:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d922:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d924:	68f8      	ldr	r0, [r7, #12]
 800d926:	f002 faf7 	bl	800ff18 <xTaskCreateStatic>
 800d92a:	4603      	mov	r3, r0
 800d92c:	613b      	str	r3, [r7, #16]
 800d92e:	e013      	b.n	800d958 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 800d930:	6a3b      	ldr	r3, [r7, #32]
 800d932:	2b00      	cmp	r3, #0
 800d934:	d110      	bne.n	800d958 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800d936:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d938:	b29a      	uxth	r2, r3
 800d93a:	f107 0310 	add.w	r3, r7, #16
 800d93e:	9301      	str	r3, [sp, #4]
 800d940:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d942:	9300      	str	r3, [sp, #0]
 800d944:	68bb      	ldr	r3, [r7, #8]
 800d946:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d948:	68f8      	ldr	r0, [r7, #12]
 800d94a:	f002 fb3f 	bl	800ffcc <xTaskCreate>
 800d94e:	4603      	mov	r3, r0
 800d950:	2b01      	cmp	r3, #1
 800d952:	d001      	beq.n	800d958 <osThreadNew+0x13c>
          hTask = NULL;
 800d954:	2300      	movs	r3, #0
 800d956:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 800d958:	693b      	ldr	r3, [r7, #16]
}
 800d95a:	4618      	mov	r0, r3
 800d95c:	3730      	adds	r7, #48	; 0x30
 800d95e:	46bd      	mov	sp, r7
 800d960:	bd80      	pop	{r7, pc}
 800d962:	bf00      	nop
 800d964:	2000147c 	.word	0x2000147c

0800d968 <osThreadFlagsSet>:
  }

  return (count);
}

uint32_t osThreadFlagsSet (osThreadId_t thread_id, uint32_t flags) {
 800d968:	b580      	push	{r7, lr}
 800d96a:	b08a      	sub	sp, #40	; 0x28
 800d96c:	af02      	add	r7, sp, #8
 800d96e:	6078      	str	r0, [r7, #4]
 800d970:	6039      	str	r1, [r7, #0]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 800d972:	687b      	ldr	r3, [r7, #4]
 800d974:	61fb      	str	r3, [r7, #28]
  uint32_t rflags;
  BaseType_t yield;

  if ((hTask == NULL) || ((flags & THREAD_FLAGS_INVALID_BITS) != 0U)) {
 800d976:	69fb      	ldr	r3, [r7, #28]
 800d978:	2b00      	cmp	r3, #0
 800d97a:	d002      	beq.n	800d982 <osThreadFlagsSet+0x1a>
 800d97c:	683b      	ldr	r3, [r7, #0]
 800d97e:	2b00      	cmp	r3, #0
 800d980:	da03      	bge.n	800d98a <osThreadFlagsSet+0x22>
    rflags = (uint32_t)osErrorParameter;
 800d982:	f06f 0303 	mvn.w	r3, #3
 800d986:	60fb      	str	r3, [r7, #12]
 800d988:	e046      	b.n	800da18 <osThreadFlagsSet+0xb0>
  }
  else {
    rflags = (uint32_t)osError;
 800d98a:	f04f 33ff 	mov.w	r3, #4294967295
 800d98e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d990:	f3ef 8305 	mrs	r3, IPSR
 800d994:	61bb      	str	r3, [r7, #24]
  return(result);
 800d996:	69bb      	ldr	r3, [r7, #24]

    if (IS_IRQ()) {
 800d998:	2b00      	cmp	r3, #0
 800d99a:	d10f      	bne.n	800d9bc <osThreadFlagsSet+0x54>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d99c:	f3ef 8310 	mrs	r3, PRIMASK
 800d9a0:	617b      	str	r3, [r7, #20]
  return(result);
 800d9a2:	697b      	ldr	r3, [r7, #20]
 800d9a4:	2b00      	cmp	r3, #0
 800d9a6:	d105      	bne.n	800d9b4 <osThreadFlagsSet+0x4c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800d9a8:	f3ef 8311 	mrs	r3, BASEPRI
 800d9ac:	613b      	str	r3, [r7, #16]
  return(result);
 800d9ae:	693b      	ldr	r3, [r7, #16]
 800d9b0:	2b00      	cmp	r3, #0
 800d9b2:	d024      	beq.n	800d9fe <osThreadFlagsSet+0x96>
 800d9b4:	4b1b      	ldr	r3, [pc, #108]	; (800da24 <osThreadFlagsSet+0xbc>)
 800d9b6:	681b      	ldr	r3, [r3, #0]
 800d9b8:	2b02      	cmp	r3, #2
 800d9ba:	d120      	bne.n	800d9fe <osThreadFlagsSet+0x96>
      yield = pdFALSE;
 800d9bc:	2300      	movs	r3, #0
 800d9be:	60bb      	str	r3, [r7, #8]

      (void)xTaskNotifyFromISR (hTask, flags, eSetBits, &yield);
 800d9c0:	f107 0308 	add.w	r3, r7, #8
 800d9c4:	9300      	str	r3, [sp, #0]
 800d9c6:	2300      	movs	r3, #0
 800d9c8:	2201      	movs	r2, #1
 800d9ca:	6839      	ldr	r1, [r7, #0]
 800d9cc:	69f8      	ldr	r0, [r7, #28]
 800d9ce:	f003 fbf9 	bl	80111c4 <xTaskGenericNotifyFromISR>
      (void)xTaskNotifyAndQueryFromISR (hTask, 0, eNoAction, &rflags, NULL);
 800d9d2:	f107 020c 	add.w	r2, r7, #12
 800d9d6:	2300      	movs	r3, #0
 800d9d8:	9300      	str	r3, [sp, #0]
 800d9da:	4613      	mov	r3, r2
 800d9dc:	2200      	movs	r2, #0
 800d9de:	2100      	movs	r1, #0
 800d9e0:	69f8      	ldr	r0, [r7, #28]
 800d9e2:	f003 fbef 	bl	80111c4 <xTaskGenericNotifyFromISR>

      portYIELD_FROM_ISR (yield);
 800d9e6:	68bb      	ldr	r3, [r7, #8]
 800d9e8:	2b00      	cmp	r3, #0
 800d9ea:	d015      	beq.n	800da18 <osThreadFlagsSet+0xb0>
 800d9ec:	4b0e      	ldr	r3, [pc, #56]	; (800da28 <osThreadFlagsSet+0xc0>)
 800d9ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d9f2:	601a      	str	r2, [r3, #0]
 800d9f4:	f3bf 8f4f 	dsb	sy
 800d9f8:	f3bf 8f6f 	isb	sy
 800d9fc:	e00c      	b.n	800da18 <osThreadFlagsSet+0xb0>
    }
    else {
      (void)xTaskNotify (hTask, flags, eSetBits);
 800d9fe:	2300      	movs	r3, #0
 800da00:	2201      	movs	r2, #1
 800da02:	6839      	ldr	r1, [r7, #0]
 800da04:	69f8      	ldr	r0, [r7, #28]
 800da06:	f003 fb27 	bl	8011058 <xTaskGenericNotify>
      (void)xTaskNotifyAndQuery (hTask, 0, eNoAction, &rflags);
 800da0a:	f107 030c 	add.w	r3, r7, #12
 800da0e:	2200      	movs	r2, #0
 800da10:	2100      	movs	r1, #0
 800da12:	69f8      	ldr	r0, [r7, #28]
 800da14:	f003 fb20 	bl	8011058 <xTaskGenericNotify>
    }
  }
  /* Return flags after setting */
  return (rflags);
 800da18:	68fb      	ldr	r3, [r7, #12]
}
 800da1a:	4618      	mov	r0, r3
 800da1c:	3720      	adds	r7, #32
 800da1e:	46bd      	mov	sp, r7
 800da20:	bd80      	pop	{r7, pc}
 800da22:	bf00      	nop
 800da24:	2000147c 	.word	0x2000147c
 800da28:	e000ed04 	.word	0xe000ed04

0800da2c <osThreadFlagsWait>:
  }

  return (rflags);
}

uint32_t osThreadFlagsWait (uint32_t flags, uint32_t options, uint32_t timeout) {
 800da2c:	b580      	push	{r7, lr}
 800da2e:	b08e      	sub	sp, #56	; 0x38
 800da30:	af00      	add	r7, sp, #0
 800da32:	60f8      	str	r0, [r7, #12]
 800da34:	60b9      	str	r1, [r7, #8]
 800da36:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800da38:	f3ef 8305 	mrs	r3, IPSR
 800da3c:	61fb      	str	r3, [r7, #28]
  return(result);
 800da3e:	69fb      	ldr	r3, [r7, #28]
  uint32_t rflags, nval;
  uint32_t clear;
  TickType_t t0, td, tout;
  BaseType_t rval;

  if (IS_IRQ()) {
 800da40:	2b00      	cmp	r3, #0
 800da42:	d10f      	bne.n	800da64 <osThreadFlagsWait+0x38>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800da44:	f3ef 8310 	mrs	r3, PRIMASK
 800da48:	61bb      	str	r3, [r7, #24]
  return(result);
 800da4a:	69bb      	ldr	r3, [r7, #24]
 800da4c:	2b00      	cmp	r3, #0
 800da4e:	d105      	bne.n	800da5c <osThreadFlagsWait+0x30>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800da50:	f3ef 8311 	mrs	r3, BASEPRI
 800da54:	617b      	str	r3, [r7, #20]
  return(result);
 800da56:	697b      	ldr	r3, [r7, #20]
 800da58:	2b00      	cmp	r3, #0
 800da5a:	d007      	beq.n	800da6c <osThreadFlagsWait+0x40>
 800da5c:	4b3c      	ldr	r3, [pc, #240]	; (800db50 <osThreadFlagsWait+0x124>)
 800da5e:	681b      	ldr	r3, [r3, #0]
 800da60:	2b02      	cmp	r3, #2
 800da62:	d103      	bne.n	800da6c <osThreadFlagsWait+0x40>
    rflags = (uint32_t)osErrorISR;
 800da64:	f06f 0305 	mvn.w	r3, #5
 800da68:	637b      	str	r3, [r7, #52]	; 0x34
 800da6a:	e06b      	b.n	800db44 <osThreadFlagsWait+0x118>
  }
  else if ((flags & THREAD_FLAGS_INVALID_BITS) != 0U) {
 800da6c:	68fb      	ldr	r3, [r7, #12]
 800da6e:	2b00      	cmp	r3, #0
 800da70:	da03      	bge.n	800da7a <osThreadFlagsWait+0x4e>
    rflags = (uint32_t)osErrorParameter;
 800da72:	f06f 0303 	mvn.w	r3, #3
 800da76:	637b      	str	r3, [r7, #52]	; 0x34
 800da78:	e064      	b.n	800db44 <osThreadFlagsWait+0x118>
  }
  else {
    if ((options & osFlagsNoClear) == osFlagsNoClear) {
 800da7a:	68bb      	ldr	r3, [r7, #8]
 800da7c:	f003 0302 	and.w	r3, r3, #2
 800da80:	2b00      	cmp	r3, #0
 800da82:	d002      	beq.n	800da8a <osThreadFlagsWait+0x5e>
      clear = 0U;
 800da84:	2300      	movs	r3, #0
 800da86:	633b      	str	r3, [r7, #48]	; 0x30
 800da88:	e001      	b.n	800da8e <osThreadFlagsWait+0x62>
    } else {
      clear = flags;
 800da8a:	68fb      	ldr	r3, [r7, #12]
 800da8c:	633b      	str	r3, [r7, #48]	; 0x30
    }

    rflags = 0U;
 800da8e:	2300      	movs	r3, #0
 800da90:	637b      	str	r3, [r7, #52]	; 0x34
    tout   = timeout;
 800da92:	687b      	ldr	r3, [r7, #4]
 800da94:	62fb      	str	r3, [r7, #44]	; 0x2c

    t0 = xTaskGetTickCount();
 800da96:	f002 fd57 	bl	8010548 <xTaskGetTickCount>
 800da9a:	62b8      	str	r0, [r7, #40]	; 0x28
    do {
      rval = xTaskNotifyWait (0, clear, &nval, tout);
 800da9c:	f107 0210 	add.w	r2, r7, #16
 800daa0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800daa2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800daa4:	2000      	movs	r0, #0
 800daa6:	f003 fa7d 	bl	8010fa4 <xTaskNotifyWait>
 800daaa:	6278      	str	r0, [r7, #36]	; 0x24

      if (rval == pdPASS) {
 800daac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800daae:	2b01      	cmp	r3, #1
 800dab0:	d137      	bne.n	800db22 <osThreadFlagsWait+0xf6>
        rflags &= flags;
 800dab2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800dab4:	68fb      	ldr	r3, [r7, #12]
 800dab6:	4013      	ands	r3, r2
 800dab8:	637b      	str	r3, [r7, #52]	; 0x34
        rflags |= nval;
 800daba:	693b      	ldr	r3, [r7, #16]
 800dabc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800dabe:	4313      	orrs	r3, r2
 800dac0:	637b      	str	r3, [r7, #52]	; 0x34

        if ((options & osFlagsWaitAll) == osFlagsWaitAll) {
 800dac2:	68bb      	ldr	r3, [r7, #8]
 800dac4:	f003 0301 	and.w	r3, r3, #1
 800dac8:	2b00      	cmp	r3, #0
 800daca:	d00c      	beq.n	800dae6 <osThreadFlagsWait+0xba>
          if ((flags & rflags) == flags) {
 800dacc:	68fa      	ldr	r2, [r7, #12]
 800dace:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dad0:	4013      	ands	r3, r2
 800dad2:	68fa      	ldr	r2, [r7, #12]
 800dad4:	429a      	cmp	r2, r3
 800dad6:	d032      	beq.n	800db3e <osThreadFlagsWait+0x112>
            break;
          } else {
            if (timeout == 0U) {
 800dad8:	687b      	ldr	r3, [r7, #4]
 800dada:	2b00      	cmp	r3, #0
 800dadc:	d10f      	bne.n	800dafe <osThreadFlagsWait+0xd2>
              rflags = (uint32_t)osErrorResource;
 800dade:	f06f 0302 	mvn.w	r3, #2
 800dae2:	637b      	str	r3, [r7, #52]	; 0x34
              break;
 800dae4:	e02e      	b.n	800db44 <osThreadFlagsWait+0x118>
            }
          }
        }
        else {
          if ((flags & rflags) != 0) {
 800dae6:	68fa      	ldr	r2, [r7, #12]
 800dae8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800daea:	4013      	ands	r3, r2
 800daec:	2b00      	cmp	r3, #0
 800daee:	d128      	bne.n	800db42 <osThreadFlagsWait+0x116>
            break;
          } else {
            if (timeout == 0U) {
 800daf0:	687b      	ldr	r3, [r7, #4]
 800daf2:	2b00      	cmp	r3, #0
 800daf4:	d103      	bne.n	800dafe <osThreadFlagsWait+0xd2>
              rflags = (uint32_t)osErrorResource;
 800daf6:	f06f 0302 	mvn.w	r3, #2
 800dafa:	637b      	str	r3, [r7, #52]	; 0x34
              break;
 800dafc:	e022      	b.n	800db44 <osThreadFlagsWait+0x118>
            }
          }
        }

        /* Update timeout */
        td = xTaskGetTickCount() - t0;
 800dafe:	f002 fd23 	bl	8010548 <xTaskGetTickCount>
 800db02:	4602      	mov	r2, r0
 800db04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db06:	1ad3      	subs	r3, r2, r3
 800db08:	623b      	str	r3, [r7, #32]

        if (td > tout) {
 800db0a:	6a3a      	ldr	r2, [r7, #32]
 800db0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db0e:	429a      	cmp	r2, r3
 800db10:	d902      	bls.n	800db18 <osThreadFlagsWait+0xec>
          tout  = 0;
 800db12:	2300      	movs	r3, #0
 800db14:	62fb      	str	r3, [r7, #44]	; 0x2c
 800db16:	e00e      	b.n	800db36 <osThreadFlagsWait+0x10a>
        } else {
          tout -= td;
 800db18:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800db1a:	6a3b      	ldr	r3, [r7, #32]
 800db1c:	1ad3      	subs	r3, r2, r3
 800db1e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800db20:	e009      	b.n	800db36 <osThreadFlagsWait+0x10a>
        }
      }
      else {
        if (timeout == 0) {
 800db22:	687b      	ldr	r3, [r7, #4]
 800db24:	2b00      	cmp	r3, #0
 800db26:	d103      	bne.n	800db30 <osThreadFlagsWait+0x104>
          rflags = (uint32_t)osErrorResource;
 800db28:	f06f 0302 	mvn.w	r3, #2
 800db2c:	637b      	str	r3, [r7, #52]	; 0x34
 800db2e:	e002      	b.n	800db36 <osThreadFlagsWait+0x10a>
        } else {
          rflags = (uint32_t)osErrorTimeout;
 800db30:	f06f 0301 	mvn.w	r3, #1
 800db34:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
    }
    while (rval != pdFAIL);
 800db36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db38:	2b00      	cmp	r3, #0
 800db3a:	d1af      	bne.n	800da9c <osThreadFlagsWait+0x70>
 800db3c:	e002      	b.n	800db44 <osThreadFlagsWait+0x118>
            break;
 800db3e:	bf00      	nop
 800db40:	e000      	b.n	800db44 <osThreadFlagsWait+0x118>
            break;
 800db42:	bf00      	nop
  }

  /* Return flags before clearing */
  return (rflags);
 800db44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800db46:	4618      	mov	r0, r3
 800db48:	3738      	adds	r7, #56	; 0x38
 800db4a:	46bd      	mov	sp, r7
 800db4c:	bd80      	pop	{r7, pc}
 800db4e:	bf00      	nop
 800db50:	2000147c 	.word	0x2000147c

0800db54 <osDelay>:

osStatus_t osDelay (uint32_t ticks) {
 800db54:	b580      	push	{r7, lr}
 800db56:	b086      	sub	sp, #24
 800db58:	af00      	add	r7, sp, #0
 800db5a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800db5c:	f3ef 8305 	mrs	r3, IPSR
 800db60:	613b      	str	r3, [r7, #16]
  return(result);
 800db62:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 800db64:	2b00      	cmp	r3, #0
 800db66:	d10f      	bne.n	800db88 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800db68:	f3ef 8310 	mrs	r3, PRIMASK
 800db6c:	60fb      	str	r3, [r7, #12]
  return(result);
 800db6e:	68fb      	ldr	r3, [r7, #12]
 800db70:	2b00      	cmp	r3, #0
 800db72:	d105      	bne.n	800db80 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800db74:	f3ef 8311 	mrs	r3, BASEPRI
 800db78:	60bb      	str	r3, [r7, #8]
  return(result);
 800db7a:	68bb      	ldr	r3, [r7, #8]
 800db7c:	2b00      	cmp	r3, #0
 800db7e:	d007      	beq.n	800db90 <osDelay+0x3c>
 800db80:	4b0a      	ldr	r3, [pc, #40]	; (800dbac <osDelay+0x58>)
 800db82:	681b      	ldr	r3, [r3, #0]
 800db84:	2b02      	cmp	r3, #2
 800db86:	d103      	bne.n	800db90 <osDelay+0x3c>
    stat = osErrorISR;
 800db88:	f06f 0305 	mvn.w	r3, #5
 800db8c:	617b      	str	r3, [r7, #20]
 800db8e:	e007      	b.n	800dba0 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 800db90:	2300      	movs	r3, #0
 800db92:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 800db94:	687b      	ldr	r3, [r7, #4]
 800db96:	2b00      	cmp	r3, #0
 800db98:	d002      	beq.n	800dba0 <osDelay+0x4c>
      vTaskDelay(ticks);
 800db9a:	6878      	ldr	r0, [r7, #4]
 800db9c:	f002 fb5a 	bl	8010254 <vTaskDelay>
    }
  }

  return (stat);
 800dba0:	697b      	ldr	r3, [r7, #20]
}
 800dba2:	4618      	mov	r0, r3
 800dba4:	3718      	adds	r7, #24
 800dba6:	46bd      	mov	sp, r7
 800dba8:	bd80      	pop	{r7, pc}
 800dbaa:	bf00      	nop
 800dbac:	2000147c 	.word	0x2000147c

0800dbb0 <osMutexNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 800dbb0:	b580      	push	{r7, lr}
 800dbb2:	b08a      	sub	sp, #40	; 0x28
 800dbb4:	af00      	add	r7, sp, #0
 800dbb6:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 800dbb8:	2300      	movs	r3, #0
 800dbba:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800dbbc:	f3ef 8305 	mrs	r3, IPSR
 800dbc0:	613b      	str	r3, [r7, #16]
  return(result);
 800dbc2:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ()) {
 800dbc4:	2b00      	cmp	r3, #0
 800dbc6:	f040 8085 	bne.w	800dcd4 <osMutexNew+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800dbca:	f3ef 8310 	mrs	r3, PRIMASK
 800dbce:	60fb      	str	r3, [r7, #12]
  return(result);
 800dbd0:	68fb      	ldr	r3, [r7, #12]
 800dbd2:	2b00      	cmp	r3, #0
 800dbd4:	d105      	bne.n	800dbe2 <osMutexNew+0x32>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800dbd6:	f3ef 8311 	mrs	r3, BASEPRI
 800dbda:	60bb      	str	r3, [r7, #8]
  return(result);
 800dbdc:	68bb      	ldr	r3, [r7, #8]
 800dbde:	2b00      	cmp	r3, #0
 800dbe0:	d003      	beq.n	800dbea <osMutexNew+0x3a>
 800dbe2:	4b3f      	ldr	r3, [pc, #252]	; (800dce0 <osMutexNew+0x130>)
 800dbe4:	681b      	ldr	r3, [r3, #0]
 800dbe6:	2b02      	cmp	r3, #2
 800dbe8:	d074      	beq.n	800dcd4 <osMutexNew+0x124>
    if (attr != NULL) {
 800dbea:	687b      	ldr	r3, [r7, #4]
 800dbec:	2b00      	cmp	r3, #0
 800dbee:	d003      	beq.n	800dbf8 <osMutexNew+0x48>
      type = attr->attr_bits;
 800dbf0:	687b      	ldr	r3, [r7, #4]
 800dbf2:	685b      	ldr	r3, [r3, #4]
 800dbf4:	623b      	str	r3, [r7, #32]
 800dbf6:	e001      	b.n	800dbfc <osMutexNew+0x4c>
    } else {
      type = 0U;
 800dbf8:	2300      	movs	r3, #0
 800dbfa:	623b      	str	r3, [r7, #32]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 800dbfc:	6a3b      	ldr	r3, [r7, #32]
 800dbfe:	f003 0301 	and.w	r3, r3, #1
 800dc02:	2b00      	cmp	r3, #0
 800dc04:	d002      	beq.n	800dc0c <osMutexNew+0x5c>
      rmtx = 1U;
 800dc06:	2301      	movs	r3, #1
 800dc08:	61fb      	str	r3, [r7, #28]
 800dc0a:	e001      	b.n	800dc10 <osMutexNew+0x60>
    } else {
      rmtx = 0U;
 800dc0c:	2300      	movs	r3, #0
 800dc0e:	61fb      	str	r3, [r7, #28]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 800dc10:	6a3b      	ldr	r3, [r7, #32]
 800dc12:	f003 0308 	and.w	r3, r3, #8
 800dc16:	2b00      	cmp	r3, #0
 800dc18:	d15c      	bne.n	800dcd4 <osMutexNew+0x124>
      mem = -1;
 800dc1a:	f04f 33ff 	mov.w	r3, #4294967295
 800dc1e:	61bb      	str	r3, [r7, #24]

      if (attr != NULL) {
 800dc20:	687b      	ldr	r3, [r7, #4]
 800dc22:	2b00      	cmp	r3, #0
 800dc24:	d015      	beq.n	800dc52 <osMutexNew+0xa2>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800dc26:	687b      	ldr	r3, [r7, #4]
 800dc28:	689b      	ldr	r3, [r3, #8]
 800dc2a:	2b00      	cmp	r3, #0
 800dc2c:	d006      	beq.n	800dc3c <osMutexNew+0x8c>
 800dc2e:	687b      	ldr	r3, [r7, #4]
 800dc30:	68db      	ldr	r3, [r3, #12]
 800dc32:	2b4f      	cmp	r3, #79	; 0x4f
 800dc34:	d902      	bls.n	800dc3c <osMutexNew+0x8c>
          mem = 1;
 800dc36:	2301      	movs	r3, #1
 800dc38:	61bb      	str	r3, [r7, #24]
 800dc3a:	e00c      	b.n	800dc56 <osMutexNew+0xa6>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800dc3c:	687b      	ldr	r3, [r7, #4]
 800dc3e:	689b      	ldr	r3, [r3, #8]
 800dc40:	2b00      	cmp	r3, #0
 800dc42:	d108      	bne.n	800dc56 <osMutexNew+0xa6>
 800dc44:	687b      	ldr	r3, [r7, #4]
 800dc46:	68db      	ldr	r3, [r3, #12]
 800dc48:	2b00      	cmp	r3, #0
 800dc4a:	d104      	bne.n	800dc56 <osMutexNew+0xa6>
            mem = 0;
 800dc4c:	2300      	movs	r3, #0
 800dc4e:	61bb      	str	r3, [r7, #24]
 800dc50:	e001      	b.n	800dc56 <osMutexNew+0xa6>
          }
        }
      }
      else {
        mem = 0;
 800dc52:	2300      	movs	r3, #0
 800dc54:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 800dc56:	69bb      	ldr	r3, [r7, #24]
 800dc58:	2b01      	cmp	r3, #1
 800dc5a:	d112      	bne.n	800dc82 <osMutexNew+0xd2>
        if (rmtx != 0U) {
 800dc5c:	69fb      	ldr	r3, [r7, #28]
 800dc5e:	2b00      	cmp	r3, #0
 800dc60:	d007      	beq.n	800dc72 <osMutexNew+0xc2>
          hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 800dc62:	687b      	ldr	r3, [r7, #4]
 800dc64:	689b      	ldr	r3, [r3, #8]
 800dc66:	4619      	mov	r1, r3
 800dc68:	2004      	movs	r0, #4
 800dc6a:	f001 fa22 	bl	800f0b2 <xQueueCreateMutexStatic>
 800dc6e:	6278      	str	r0, [r7, #36]	; 0x24
 800dc70:	e016      	b.n	800dca0 <osMutexNew+0xf0>
        }
        else {
          hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 800dc72:	687b      	ldr	r3, [r7, #4]
 800dc74:	689b      	ldr	r3, [r3, #8]
 800dc76:	4619      	mov	r1, r3
 800dc78:	2001      	movs	r0, #1
 800dc7a:	f001 fa1a 	bl	800f0b2 <xQueueCreateMutexStatic>
 800dc7e:	6278      	str	r0, [r7, #36]	; 0x24
 800dc80:	e00e      	b.n	800dca0 <osMutexNew+0xf0>
        }
      }
      else {
        if (mem == 0) {
 800dc82:	69bb      	ldr	r3, [r7, #24]
 800dc84:	2b00      	cmp	r3, #0
 800dc86:	d10b      	bne.n	800dca0 <osMutexNew+0xf0>
          if (rmtx != 0U) {
 800dc88:	69fb      	ldr	r3, [r7, #28]
 800dc8a:	2b00      	cmp	r3, #0
 800dc8c:	d004      	beq.n	800dc98 <osMutexNew+0xe8>
            hMutex = xSemaphoreCreateRecursiveMutex ();
 800dc8e:	2004      	movs	r0, #4
 800dc90:	f001 f9f7 	bl	800f082 <xQueueCreateMutex>
 800dc94:	6278      	str	r0, [r7, #36]	; 0x24
 800dc96:	e003      	b.n	800dca0 <osMutexNew+0xf0>
          } else {
            hMutex = xSemaphoreCreateMutex ();
 800dc98:	2001      	movs	r0, #1
 800dc9a:	f001 f9f2 	bl	800f082 <xQueueCreateMutex>
 800dc9e:	6278      	str	r0, [r7, #36]	; 0x24
          }
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 800dca0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dca2:	2b00      	cmp	r3, #0
 800dca4:	d00c      	beq.n	800dcc0 <osMutexNew+0x110>
        if (attr != NULL) {
 800dca6:	687b      	ldr	r3, [r7, #4]
 800dca8:	2b00      	cmp	r3, #0
 800dcaa:	d003      	beq.n	800dcb4 <osMutexNew+0x104>
          name = attr->name;
 800dcac:	687b      	ldr	r3, [r7, #4]
 800dcae:	681b      	ldr	r3, [r3, #0]
 800dcb0:	617b      	str	r3, [r7, #20]
 800dcb2:	e001      	b.n	800dcb8 <osMutexNew+0x108>
        } else {
          name = NULL;
 800dcb4:	2300      	movs	r3, #0
 800dcb6:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hMutex, name);
 800dcb8:	6979      	ldr	r1, [r7, #20]
 800dcba:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800dcbc:	f002 f8a6 	bl	800fe0c <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 800dcc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dcc2:	2b00      	cmp	r3, #0
 800dcc4:	d006      	beq.n	800dcd4 <osMutexNew+0x124>
 800dcc6:	69fb      	ldr	r3, [r7, #28]
 800dcc8:	2b00      	cmp	r3, #0
 800dcca:	d003      	beq.n	800dcd4 <osMutexNew+0x124>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 800dccc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dcce:	f043 0301 	orr.w	r3, r3, #1
 800dcd2:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }
  }

  return ((osMutexId_t)hMutex);
 800dcd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800dcd6:	4618      	mov	r0, r3
 800dcd8:	3728      	adds	r7, #40	; 0x28
 800dcda:	46bd      	mov	sp, r7
 800dcdc:	bd80      	pop	{r7, pc}
 800dcde:	bf00      	nop
 800dce0:	2000147c 	.word	0x2000147c

0800dce4 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 800dce4:	b580      	push	{r7, lr}
 800dce6:	b088      	sub	sp, #32
 800dce8:	af00      	add	r7, sp, #0
 800dcea:	6078      	str	r0, [r7, #4]
 800dcec:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800dcee:	687b      	ldr	r3, [r7, #4]
 800dcf0:	f023 0301 	bic.w	r3, r3, #1
 800dcf4:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 800dcf6:	687b      	ldr	r3, [r7, #4]
 800dcf8:	f003 0301 	and.w	r3, r3, #1
 800dcfc:	617b      	str	r3, [r7, #20]

  stat = osOK;
 800dcfe:	2300      	movs	r3, #0
 800dd00:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800dd02:	f3ef 8305 	mrs	r3, IPSR
 800dd06:	613b      	str	r3, [r7, #16]
  return(result);
 800dd08:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 800dd0a:	2b00      	cmp	r3, #0
 800dd0c:	d10f      	bne.n	800dd2e <osMutexAcquire+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800dd0e:	f3ef 8310 	mrs	r3, PRIMASK
 800dd12:	60fb      	str	r3, [r7, #12]
  return(result);
 800dd14:	68fb      	ldr	r3, [r7, #12]
 800dd16:	2b00      	cmp	r3, #0
 800dd18:	d105      	bne.n	800dd26 <osMutexAcquire+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800dd1a:	f3ef 8311 	mrs	r3, BASEPRI
 800dd1e:	60bb      	str	r3, [r7, #8]
  return(result);
 800dd20:	68bb      	ldr	r3, [r7, #8]
 800dd22:	2b00      	cmp	r3, #0
 800dd24:	d007      	beq.n	800dd36 <osMutexAcquire+0x52>
 800dd26:	4b1d      	ldr	r3, [pc, #116]	; (800dd9c <osMutexAcquire+0xb8>)
 800dd28:	681b      	ldr	r3, [r3, #0]
 800dd2a:	2b02      	cmp	r3, #2
 800dd2c:	d103      	bne.n	800dd36 <osMutexAcquire+0x52>
    stat = osErrorISR;
 800dd2e:	f06f 0305 	mvn.w	r3, #5
 800dd32:	61fb      	str	r3, [r7, #28]
 800dd34:	e02c      	b.n	800dd90 <osMutexAcquire+0xac>
  }
  else if (hMutex == NULL) {
 800dd36:	69bb      	ldr	r3, [r7, #24]
 800dd38:	2b00      	cmp	r3, #0
 800dd3a:	d103      	bne.n	800dd44 <osMutexAcquire+0x60>
    stat = osErrorParameter;
 800dd3c:	f06f 0303 	mvn.w	r3, #3
 800dd40:	61fb      	str	r3, [r7, #28]
 800dd42:	e025      	b.n	800dd90 <osMutexAcquire+0xac>
  }
  else {
    if (rmtx != 0U) {
 800dd44:	697b      	ldr	r3, [r7, #20]
 800dd46:	2b00      	cmp	r3, #0
 800dd48:	d011      	beq.n	800dd6e <osMutexAcquire+0x8a>
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 800dd4a:	6839      	ldr	r1, [r7, #0]
 800dd4c:	69b8      	ldr	r0, [r7, #24]
 800dd4e:	f001 f9fe 	bl	800f14e <xQueueTakeMutexRecursive>
 800dd52:	4603      	mov	r3, r0
 800dd54:	2b01      	cmp	r3, #1
 800dd56:	d01b      	beq.n	800dd90 <osMutexAcquire+0xac>
        if (timeout != 0U) {
 800dd58:	683b      	ldr	r3, [r7, #0]
 800dd5a:	2b00      	cmp	r3, #0
 800dd5c:	d003      	beq.n	800dd66 <osMutexAcquire+0x82>
          stat = osErrorTimeout;
 800dd5e:	f06f 0301 	mvn.w	r3, #1
 800dd62:	61fb      	str	r3, [r7, #28]
 800dd64:	e014      	b.n	800dd90 <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 800dd66:	f06f 0302 	mvn.w	r3, #2
 800dd6a:	61fb      	str	r3, [r7, #28]
 800dd6c:	e010      	b.n	800dd90 <osMutexAcquire+0xac>
        }
      }
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 800dd6e:	6839      	ldr	r1, [r7, #0]
 800dd70:	69b8      	ldr	r0, [r7, #24]
 800dd72:	f001 fd7b 	bl	800f86c <xQueueSemaphoreTake>
 800dd76:	4603      	mov	r3, r0
 800dd78:	2b01      	cmp	r3, #1
 800dd7a:	d009      	beq.n	800dd90 <osMutexAcquire+0xac>
        if (timeout != 0U) {
 800dd7c:	683b      	ldr	r3, [r7, #0]
 800dd7e:	2b00      	cmp	r3, #0
 800dd80:	d003      	beq.n	800dd8a <osMutexAcquire+0xa6>
          stat = osErrorTimeout;
 800dd82:	f06f 0301 	mvn.w	r3, #1
 800dd86:	61fb      	str	r3, [r7, #28]
 800dd88:	e002      	b.n	800dd90 <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 800dd8a:	f06f 0302 	mvn.w	r3, #2
 800dd8e:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800dd90:	69fb      	ldr	r3, [r7, #28]
}
 800dd92:	4618      	mov	r0, r3
 800dd94:	3720      	adds	r7, #32
 800dd96:	46bd      	mov	sp, r7
 800dd98:	bd80      	pop	{r7, pc}
 800dd9a:	bf00      	nop
 800dd9c:	2000147c 	.word	0x2000147c

0800dda0 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 800dda0:	b580      	push	{r7, lr}
 800dda2:	b088      	sub	sp, #32
 800dda4:	af00      	add	r7, sp, #0
 800dda6:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800dda8:	687b      	ldr	r3, [r7, #4]
 800ddaa:	f023 0301 	bic.w	r3, r3, #1
 800ddae:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 800ddb0:	687b      	ldr	r3, [r7, #4]
 800ddb2:	f003 0301 	and.w	r3, r3, #1
 800ddb6:	617b      	str	r3, [r7, #20]

  stat = osOK;
 800ddb8:	2300      	movs	r3, #0
 800ddba:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ddbc:	f3ef 8305 	mrs	r3, IPSR
 800ddc0:	613b      	str	r3, [r7, #16]
  return(result);
 800ddc2:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 800ddc4:	2b00      	cmp	r3, #0
 800ddc6:	d10f      	bne.n	800dde8 <osMutexRelease+0x48>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ddc8:	f3ef 8310 	mrs	r3, PRIMASK
 800ddcc:	60fb      	str	r3, [r7, #12]
  return(result);
 800ddce:	68fb      	ldr	r3, [r7, #12]
 800ddd0:	2b00      	cmp	r3, #0
 800ddd2:	d105      	bne.n	800dde0 <osMutexRelease+0x40>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800ddd4:	f3ef 8311 	mrs	r3, BASEPRI
 800ddd8:	60bb      	str	r3, [r7, #8]
  return(result);
 800ddda:	68bb      	ldr	r3, [r7, #8]
 800dddc:	2b00      	cmp	r3, #0
 800ddde:	d007      	beq.n	800ddf0 <osMutexRelease+0x50>
 800dde0:	4b16      	ldr	r3, [pc, #88]	; (800de3c <osMutexRelease+0x9c>)
 800dde2:	681b      	ldr	r3, [r3, #0]
 800dde4:	2b02      	cmp	r3, #2
 800dde6:	d103      	bne.n	800ddf0 <osMutexRelease+0x50>
    stat = osErrorISR;
 800dde8:	f06f 0305 	mvn.w	r3, #5
 800ddec:	61fb      	str	r3, [r7, #28]
 800ddee:	e01f      	b.n	800de30 <osMutexRelease+0x90>
  }
  else if (hMutex == NULL) {
 800ddf0:	69bb      	ldr	r3, [r7, #24]
 800ddf2:	2b00      	cmp	r3, #0
 800ddf4:	d103      	bne.n	800ddfe <osMutexRelease+0x5e>
    stat = osErrorParameter;
 800ddf6:	f06f 0303 	mvn.w	r3, #3
 800ddfa:	61fb      	str	r3, [r7, #28]
 800ddfc:	e018      	b.n	800de30 <osMutexRelease+0x90>
  }
  else {
    if (rmtx != 0U) {
 800ddfe:	697b      	ldr	r3, [r7, #20]
 800de00:	2b00      	cmp	r3, #0
 800de02:	d009      	beq.n	800de18 <osMutexRelease+0x78>
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 800de04:	69b8      	ldr	r0, [r7, #24]
 800de06:	f001 f96f 	bl	800f0e8 <xQueueGiveMutexRecursive>
 800de0a:	4603      	mov	r3, r0
 800de0c:	2b01      	cmp	r3, #1
 800de0e:	d00f      	beq.n	800de30 <osMutexRelease+0x90>
        stat = osErrorResource;
 800de10:	f06f 0302 	mvn.w	r3, #2
 800de14:	61fb      	str	r3, [r7, #28]
 800de16:	e00b      	b.n	800de30 <osMutexRelease+0x90>
      }
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 800de18:	2300      	movs	r3, #0
 800de1a:	2200      	movs	r2, #0
 800de1c:	2100      	movs	r1, #0
 800de1e:	69b8      	ldr	r0, [r7, #24]
 800de20:	f001 fa30 	bl	800f284 <xQueueGenericSend>
 800de24:	4603      	mov	r3, r0
 800de26:	2b01      	cmp	r3, #1
 800de28:	d002      	beq.n	800de30 <osMutexRelease+0x90>
        stat = osErrorResource;
 800de2a:	f06f 0302 	mvn.w	r3, #2
 800de2e:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return (stat);
 800de30:	69fb      	ldr	r3, [r7, #28]
}
 800de32:	4618      	mov	r0, r3
 800de34:	3720      	adds	r7, #32
 800de36:	46bd      	mov	sp, r7
 800de38:	bd80      	pop	{r7, pc}
 800de3a:	bf00      	nop
 800de3c:	2000147c 	.word	0x2000147c

0800de40 <osSemaphoreNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800de40:	b580      	push	{r7, lr}
 800de42:	b08c      	sub	sp, #48	; 0x30
 800de44:	af02      	add	r7, sp, #8
 800de46:	60f8      	str	r0, [r7, #12]
 800de48:	60b9      	str	r1, [r7, #8]
 800de4a:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 800de4c:	2300      	movs	r3, #0
 800de4e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800de50:	f3ef 8305 	mrs	r3, IPSR
 800de54:	61bb      	str	r3, [r7, #24]
  return(result);
 800de56:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800de58:	2b00      	cmp	r3, #0
 800de5a:	f040 8087 	bne.w	800df6c <osSemaphoreNew+0x12c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800de5e:	f3ef 8310 	mrs	r3, PRIMASK
 800de62:	617b      	str	r3, [r7, #20]
  return(result);
 800de64:	697b      	ldr	r3, [r7, #20]
 800de66:	2b00      	cmp	r3, #0
 800de68:	d105      	bne.n	800de76 <osSemaphoreNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800de6a:	f3ef 8311 	mrs	r3, BASEPRI
 800de6e:	613b      	str	r3, [r7, #16]
  return(result);
 800de70:	693b      	ldr	r3, [r7, #16]
 800de72:	2b00      	cmp	r3, #0
 800de74:	d003      	beq.n	800de7e <osSemaphoreNew+0x3e>
 800de76:	4b40      	ldr	r3, [pc, #256]	; (800df78 <osSemaphoreNew+0x138>)
 800de78:	681b      	ldr	r3, [r3, #0]
 800de7a:	2b02      	cmp	r3, #2
 800de7c:	d076      	beq.n	800df6c <osSemaphoreNew+0x12c>
 800de7e:	68fb      	ldr	r3, [r7, #12]
 800de80:	2b00      	cmp	r3, #0
 800de82:	d073      	beq.n	800df6c <osSemaphoreNew+0x12c>
 800de84:	68ba      	ldr	r2, [r7, #8]
 800de86:	68fb      	ldr	r3, [r7, #12]
 800de88:	429a      	cmp	r2, r3
 800de8a:	d86f      	bhi.n	800df6c <osSemaphoreNew+0x12c>
    mem = -1;
 800de8c:	f04f 33ff 	mov.w	r3, #4294967295
 800de90:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800de92:	687b      	ldr	r3, [r7, #4]
 800de94:	2b00      	cmp	r3, #0
 800de96:	d015      	beq.n	800dec4 <osSemaphoreNew+0x84>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800de98:	687b      	ldr	r3, [r7, #4]
 800de9a:	689b      	ldr	r3, [r3, #8]
 800de9c:	2b00      	cmp	r3, #0
 800de9e:	d006      	beq.n	800deae <osSemaphoreNew+0x6e>
 800dea0:	687b      	ldr	r3, [r7, #4]
 800dea2:	68db      	ldr	r3, [r3, #12]
 800dea4:	2b4f      	cmp	r3, #79	; 0x4f
 800dea6:	d902      	bls.n	800deae <osSemaphoreNew+0x6e>
        mem = 1;
 800dea8:	2301      	movs	r3, #1
 800deaa:	623b      	str	r3, [r7, #32]
 800deac:	e00c      	b.n	800dec8 <osSemaphoreNew+0x88>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800deae:	687b      	ldr	r3, [r7, #4]
 800deb0:	689b      	ldr	r3, [r3, #8]
 800deb2:	2b00      	cmp	r3, #0
 800deb4:	d108      	bne.n	800dec8 <osSemaphoreNew+0x88>
 800deb6:	687b      	ldr	r3, [r7, #4]
 800deb8:	68db      	ldr	r3, [r3, #12]
 800deba:	2b00      	cmp	r3, #0
 800debc:	d104      	bne.n	800dec8 <osSemaphoreNew+0x88>
          mem = 0;
 800debe:	2300      	movs	r3, #0
 800dec0:	623b      	str	r3, [r7, #32]
 800dec2:	e001      	b.n	800dec8 <osSemaphoreNew+0x88>
        }
      }
    }
    else {
      mem = 0;
 800dec4:	2300      	movs	r3, #0
 800dec6:	623b      	str	r3, [r7, #32]
    }

    if (mem != -1) {
 800dec8:	6a3b      	ldr	r3, [r7, #32]
 800deca:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dece:	d04d      	beq.n	800df6c <osSemaphoreNew+0x12c>
      if (max_count == 1U) {
 800ded0:	68fb      	ldr	r3, [r7, #12]
 800ded2:	2b01      	cmp	r3, #1
 800ded4:	d129      	bne.n	800df2a <osSemaphoreNew+0xea>
        if (mem == 1) {
 800ded6:	6a3b      	ldr	r3, [r7, #32]
 800ded8:	2b01      	cmp	r3, #1
 800deda:	d10b      	bne.n	800def4 <osSemaphoreNew+0xb4>
          hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800dedc:	687b      	ldr	r3, [r7, #4]
 800dede:	689a      	ldr	r2, [r3, #8]
 800dee0:	2303      	movs	r3, #3
 800dee2:	9300      	str	r3, [sp, #0]
 800dee4:	4613      	mov	r3, r2
 800dee6:	2200      	movs	r2, #0
 800dee8:	2100      	movs	r1, #0
 800deea:	2001      	movs	r0, #1
 800deec:	f000 ffda 	bl	800eea4 <xQueueGenericCreateStatic>
 800def0:	6278      	str	r0, [r7, #36]	; 0x24
 800def2:	e005      	b.n	800df00 <osSemaphoreNew+0xc0>
        }
        else {
          hSemaphore = xSemaphoreCreateBinary();
 800def4:	2203      	movs	r2, #3
 800def6:	2100      	movs	r1, #0
 800def8:	2001      	movs	r0, #1
 800defa:	f001 f846 	bl	800ef8a <xQueueGenericCreate>
 800defe:	6278      	str	r0, [r7, #36]	; 0x24
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800df00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df02:	2b00      	cmp	r3, #0
 800df04:	d022      	beq.n	800df4c <osSemaphoreNew+0x10c>
 800df06:	68bb      	ldr	r3, [r7, #8]
 800df08:	2b00      	cmp	r3, #0
 800df0a:	d01f      	beq.n	800df4c <osSemaphoreNew+0x10c>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800df0c:	2300      	movs	r3, #0
 800df0e:	2200      	movs	r2, #0
 800df10:	2100      	movs	r1, #0
 800df12:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800df14:	f001 f9b6 	bl	800f284 <xQueueGenericSend>
 800df18:	4603      	mov	r3, r0
 800df1a:	2b01      	cmp	r3, #1
 800df1c:	d016      	beq.n	800df4c <osSemaphoreNew+0x10c>
            vSemaphoreDelete (hSemaphore);
 800df1e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800df20:	f001 fe29 	bl	800fb76 <vQueueDelete>
            hSemaphore = NULL;
 800df24:	2300      	movs	r3, #0
 800df26:	627b      	str	r3, [r7, #36]	; 0x24
 800df28:	e010      	b.n	800df4c <osSemaphoreNew+0x10c>
          }
        }
      }
      else {
        if (mem == 1) {
 800df2a:	6a3b      	ldr	r3, [r7, #32]
 800df2c:	2b01      	cmp	r3, #1
 800df2e:	d108      	bne.n	800df42 <osSemaphoreNew+0x102>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800df30:	687b      	ldr	r3, [r7, #4]
 800df32:	689b      	ldr	r3, [r3, #8]
 800df34:	461a      	mov	r2, r3
 800df36:	68b9      	ldr	r1, [r7, #8]
 800df38:	68f8      	ldr	r0, [r7, #12]
 800df3a:	f001 f93d 	bl	800f1b8 <xQueueCreateCountingSemaphoreStatic>
 800df3e:	6278      	str	r0, [r7, #36]	; 0x24
 800df40:	e004      	b.n	800df4c <osSemaphoreNew+0x10c>
        }
        else {
          hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800df42:	68b9      	ldr	r1, [r7, #8]
 800df44:	68f8      	ldr	r0, [r7, #12]
 800df46:	f001 f96c 	bl	800f222 <xQueueCreateCountingSemaphore>
 800df4a:	6278      	str	r0, [r7, #36]	; 0x24
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 800df4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df4e:	2b00      	cmp	r3, #0
 800df50:	d00c      	beq.n	800df6c <osSemaphoreNew+0x12c>
        if (attr != NULL) {
 800df52:	687b      	ldr	r3, [r7, #4]
 800df54:	2b00      	cmp	r3, #0
 800df56:	d003      	beq.n	800df60 <osSemaphoreNew+0x120>
          name = attr->name;
 800df58:	687b      	ldr	r3, [r7, #4]
 800df5a:	681b      	ldr	r3, [r3, #0]
 800df5c:	61fb      	str	r3, [r7, #28]
 800df5e:	e001      	b.n	800df64 <osSemaphoreNew+0x124>
        } else {
          name = NULL;
 800df60:	2300      	movs	r3, #0
 800df62:	61fb      	str	r3, [r7, #28]
        }
        vQueueAddToRegistry (hSemaphore, name);
 800df64:	69f9      	ldr	r1, [r7, #28]
 800df66:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800df68:	f001 ff50 	bl	800fe0c <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 800df6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800df6e:	4618      	mov	r0, r3
 800df70:	3728      	adds	r7, #40	; 0x28
 800df72:	46bd      	mov	sp, r7
 800df74:	bd80      	pop	{r7, pc}
 800df76:	bf00      	nop
 800df78:	2000147c 	.word	0x2000147c

0800df7c <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 800df7c:	b580      	push	{r7, lr}
 800df7e:	b088      	sub	sp, #32
 800df80:	af00      	add	r7, sp, #0
 800df82:	6078      	str	r0, [r7, #4]
 800df84:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800df86:	687b      	ldr	r3, [r7, #4]
 800df88:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800df8a:	2300      	movs	r3, #0
 800df8c:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 800df8e:	69bb      	ldr	r3, [r7, #24]
 800df90:	2b00      	cmp	r3, #0
 800df92:	d103      	bne.n	800df9c <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 800df94:	f06f 0303 	mvn.w	r3, #3
 800df98:	61fb      	str	r3, [r7, #28]
 800df9a:	e04b      	b.n	800e034 <osSemaphoreAcquire+0xb8>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800df9c:	f3ef 8305 	mrs	r3, IPSR
 800dfa0:	617b      	str	r3, [r7, #20]
  return(result);
 800dfa2:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 800dfa4:	2b00      	cmp	r3, #0
 800dfa6:	d10f      	bne.n	800dfc8 <osSemaphoreAcquire+0x4c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800dfa8:	f3ef 8310 	mrs	r3, PRIMASK
 800dfac:	613b      	str	r3, [r7, #16]
  return(result);
 800dfae:	693b      	ldr	r3, [r7, #16]
 800dfb0:	2b00      	cmp	r3, #0
 800dfb2:	d105      	bne.n	800dfc0 <osSemaphoreAcquire+0x44>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800dfb4:	f3ef 8311 	mrs	r3, BASEPRI
 800dfb8:	60fb      	str	r3, [r7, #12]
  return(result);
 800dfba:	68fb      	ldr	r3, [r7, #12]
 800dfbc:	2b00      	cmp	r3, #0
 800dfbe:	d026      	beq.n	800e00e <osSemaphoreAcquire+0x92>
 800dfc0:	4b1f      	ldr	r3, [pc, #124]	; (800e040 <osSemaphoreAcquire+0xc4>)
 800dfc2:	681b      	ldr	r3, [r3, #0]
 800dfc4:	2b02      	cmp	r3, #2
 800dfc6:	d122      	bne.n	800e00e <osSemaphoreAcquire+0x92>
    if (timeout != 0U) {
 800dfc8:	683b      	ldr	r3, [r7, #0]
 800dfca:	2b00      	cmp	r3, #0
 800dfcc:	d003      	beq.n	800dfd6 <osSemaphoreAcquire+0x5a>
      stat = osErrorParameter;
 800dfce:	f06f 0303 	mvn.w	r3, #3
 800dfd2:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 800dfd4:	e02d      	b.n	800e032 <osSemaphoreAcquire+0xb6>
    }
    else {
      yield = pdFALSE;
 800dfd6:	2300      	movs	r3, #0
 800dfd8:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800dfda:	f107 0308 	add.w	r3, r7, #8
 800dfde:	461a      	mov	r2, r3
 800dfe0:	2100      	movs	r1, #0
 800dfe2:	69b8      	ldr	r0, [r7, #24]
 800dfe4:	f001 fd4a 	bl	800fa7c <xQueueReceiveFromISR>
 800dfe8:	4603      	mov	r3, r0
 800dfea:	2b01      	cmp	r3, #1
 800dfec:	d003      	beq.n	800dff6 <osSemaphoreAcquire+0x7a>
        stat = osErrorResource;
 800dfee:	f06f 0302 	mvn.w	r3, #2
 800dff2:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 800dff4:	e01d      	b.n	800e032 <osSemaphoreAcquire+0xb6>
      } else {
        portYIELD_FROM_ISR (yield);
 800dff6:	68bb      	ldr	r3, [r7, #8]
 800dff8:	2b00      	cmp	r3, #0
 800dffa:	d01a      	beq.n	800e032 <osSemaphoreAcquire+0xb6>
 800dffc:	4b11      	ldr	r3, [pc, #68]	; (800e044 <osSemaphoreAcquire+0xc8>)
 800dffe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e002:	601a      	str	r2, [r3, #0]
 800e004:	f3bf 8f4f 	dsb	sy
 800e008:	f3bf 8f6f 	isb	sy
    if (timeout != 0U) {
 800e00c:	e011      	b.n	800e032 <osSemaphoreAcquire+0xb6>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800e00e:	6839      	ldr	r1, [r7, #0]
 800e010:	69b8      	ldr	r0, [r7, #24]
 800e012:	f001 fc2b 	bl	800f86c <xQueueSemaphoreTake>
 800e016:	4603      	mov	r3, r0
 800e018:	2b01      	cmp	r3, #1
 800e01a:	d00b      	beq.n	800e034 <osSemaphoreAcquire+0xb8>
      if (timeout != 0U) {
 800e01c:	683b      	ldr	r3, [r7, #0]
 800e01e:	2b00      	cmp	r3, #0
 800e020:	d003      	beq.n	800e02a <osSemaphoreAcquire+0xae>
        stat = osErrorTimeout;
 800e022:	f06f 0301 	mvn.w	r3, #1
 800e026:	61fb      	str	r3, [r7, #28]
 800e028:	e004      	b.n	800e034 <osSemaphoreAcquire+0xb8>
      } else {
        stat = osErrorResource;
 800e02a:	f06f 0302 	mvn.w	r3, #2
 800e02e:	61fb      	str	r3, [r7, #28]
 800e030:	e000      	b.n	800e034 <osSemaphoreAcquire+0xb8>
    if (timeout != 0U) {
 800e032:	bf00      	nop
      }
    }
  }

  return (stat);
 800e034:	69fb      	ldr	r3, [r7, #28]
}
 800e036:	4618      	mov	r0, r3
 800e038:	3720      	adds	r7, #32
 800e03a:	46bd      	mov	sp, r7
 800e03c:	bd80      	pop	{r7, pc}
 800e03e:	bf00      	nop
 800e040:	2000147c 	.word	0x2000147c
 800e044:	e000ed04 	.word	0xe000ed04

0800e048 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 800e048:	b580      	push	{r7, lr}
 800e04a:	b088      	sub	sp, #32
 800e04c:	af00      	add	r7, sp, #0
 800e04e:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800e050:	687b      	ldr	r3, [r7, #4]
 800e052:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800e054:	2300      	movs	r3, #0
 800e056:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 800e058:	69bb      	ldr	r3, [r7, #24]
 800e05a:	2b00      	cmp	r3, #0
 800e05c:	d103      	bne.n	800e066 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 800e05e:	f06f 0303 	mvn.w	r3, #3
 800e062:	61fb      	str	r3, [r7, #28]
 800e064:	e03e      	b.n	800e0e4 <osSemaphoreRelease+0x9c>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e066:	f3ef 8305 	mrs	r3, IPSR
 800e06a:	617b      	str	r3, [r7, #20]
  return(result);
 800e06c:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 800e06e:	2b00      	cmp	r3, #0
 800e070:	d10f      	bne.n	800e092 <osSemaphoreRelease+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e072:	f3ef 8310 	mrs	r3, PRIMASK
 800e076:	613b      	str	r3, [r7, #16]
  return(result);
 800e078:	693b      	ldr	r3, [r7, #16]
 800e07a:	2b00      	cmp	r3, #0
 800e07c:	d105      	bne.n	800e08a <osSemaphoreRelease+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800e07e:	f3ef 8311 	mrs	r3, BASEPRI
 800e082:	60fb      	str	r3, [r7, #12]
  return(result);
 800e084:	68fb      	ldr	r3, [r7, #12]
 800e086:	2b00      	cmp	r3, #0
 800e088:	d01e      	beq.n	800e0c8 <osSemaphoreRelease+0x80>
 800e08a:	4b19      	ldr	r3, [pc, #100]	; (800e0f0 <osSemaphoreRelease+0xa8>)
 800e08c:	681b      	ldr	r3, [r3, #0]
 800e08e:	2b02      	cmp	r3, #2
 800e090:	d11a      	bne.n	800e0c8 <osSemaphoreRelease+0x80>
    yield = pdFALSE;
 800e092:	2300      	movs	r3, #0
 800e094:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800e096:	f107 0308 	add.w	r3, r7, #8
 800e09a:	4619      	mov	r1, r3
 800e09c:	69b8      	ldr	r0, [r7, #24]
 800e09e:	f001 fa7f 	bl	800f5a0 <xQueueGiveFromISR>
 800e0a2:	4603      	mov	r3, r0
 800e0a4:	2b01      	cmp	r3, #1
 800e0a6:	d003      	beq.n	800e0b0 <osSemaphoreRelease+0x68>
      stat = osErrorResource;
 800e0a8:	f06f 0302 	mvn.w	r3, #2
 800e0ac:	61fb      	str	r3, [r7, #28]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800e0ae:	e018      	b.n	800e0e2 <osSemaphoreRelease+0x9a>
    } else {
      portYIELD_FROM_ISR (yield);
 800e0b0:	68bb      	ldr	r3, [r7, #8]
 800e0b2:	2b00      	cmp	r3, #0
 800e0b4:	d015      	beq.n	800e0e2 <osSemaphoreRelease+0x9a>
 800e0b6:	4b0f      	ldr	r3, [pc, #60]	; (800e0f4 <osSemaphoreRelease+0xac>)
 800e0b8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e0bc:	601a      	str	r2, [r3, #0]
 800e0be:	f3bf 8f4f 	dsb	sy
 800e0c2:	f3bf 8f6f 	isb	sy
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800e0c6:	e00c      	b.n	800e0e2 <osSemaphoreRelease+0x9a>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800e0c8:	2300      	movs	r3, #0
 800e0ca:	2200      	movs	r2, #0
 800e0cc:	2100      	movs	r1, #0
 800e0ce:	69b8      	ldr	r0, [r7, #24]
 800e0d0:	f001 f8d8 	bl	800f284 <xQueueGenericSend>
 800e0d4:	4603      	mov	r3, r0
 800e0d6:	2b01      	cmp	r3, #1
 800e0d8:	d004      	beq.n	800e0e4 <osSemaphoreRelease+0x9c>
      stat = osErrorResource;
 800e0da:	f06f 0302 	mvn.w	r3, #2
 800e0de:	61fb      	str	r3, [r7, #28]
 800e0e0:	e000      	b.n	800e0e4 <osSemaphoreRelease+0x9c>
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800e0e2:	bf00      	nop
    }
  }

  return (stat);
 800e0e4:	69fb      	ldr	r3, [r7, #28]
}
 800e0e6:	4618      	mov	r0, r3
 800e0e8:	3720      	adds	r7, #32
 800e0ea:	46bd      	mov	sp, r7
 800e0ec:	bd80      	pop	{r7, pc}
 800e0ee:	bf00      	nop
 800e0f0:	2000147c 	.word	0x2000147c
 800e0f4:	e000ed04 	.word	0xe000ed04

0800e0f8 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800e0f8:	b580      	push	{r7, lr}
 800e0fa:	b08c      	sub	sp, #48	; 0x30
 800e0fc:	af02      	add	r7, sp, #8
 800e0fe:	60f8      	str	r0, [r7, #12]
 800e100:	60b9      	str	r1, [r7, #8]
 800e102:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800e104:	2300      	movs	r3, #0
 800e106:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e108:	f3ef 8305 	mrs	r3, IPSR
 800e10c:	61bb      	str	r3, [r7, #24]
  return(result);
 800e10e:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800e110:	2b00      	cmp	r3, #0
 800e112:	d170      	bne.n	800e1f6 <osMessageQueueNew+0xfe>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e114:	f3ef 8310 	mrs	r3, PRIMASK
 800e118:	617b      	str	r3, [r7, #20]
  return(result);
 800e11a:	697b      	ldr	r3, [r7, #20]
 800e11c:	2b00      	cmp	r3, #0
 800e11e:	d105      	bne.n	800e12c <osMessageQueueNew+0x34>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800e120:	f3ef 8311 	mrs	r3, BASEPRI
 800e124:	613b      	str	r3, [r7, #16]
  return(result);
 800e126:	693b      	ldr	r3, [r7, #16]
 800e128:	2b00      	cmp	r3, #0
 800e12a:	d003      	beq.n	800e134 <osMessageQueueNew+0x3c>
 800e12c:	4b34      	ldr	r3, [pc, #208]	; (800e200 <osMessageQueueNew+0x108>)
 800e12e:	681b      	ldr	r3, [r3, #0]
 800e130:	2b02      	cmp	r3, #2
 800e132:	d060      	beq.n	800e1f6 <osMessageQueueNew+0xfe>
 800e134:	68fb      	ldr	r3, [r7, #12]
 800e136:	2b00      	cmp	r3, #0
 800e138:	d05d      	beq.n	800e1f6 <osMessageQueueNew+0xfe>
 800e13a:	68bb      	ldr	r3, [r7, #8]
 800e13c:	2b00      	cmp	r3, #0
 800e13e:	d05a      	beq.n	800e1f6 <osMessageQueueNew+0xfe>
    mem = -1;
 800e140:	f04f 33ff 	mov.w	r3, #4294967295
 800e144:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800e146:	687b      	ldr	r3, [r7, #4]
 800e148:	2b00      	cmp	r3, #0
 800e14a:	d029      	beq.n	800e1a0 <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800e14c:	687b      	ldr	r3, [r7, #4]
 800e14e:	689b      	ldr	r3, [r3, #8]
 800e150:	2b00      	cmp	r3, #0
 800e152:	d012      	beq.n	800e17a <osMessageQueueNew+0x82>
 800e154:	687b      	ldr	r3, [r7, #4]
 800e156:	68db      	ldr	r3, [r3, #12]
 800e158:	2b4f      	cmp	r3, #79	; 0x4f
 800e15a:	d90e      	bls.n	800e17a <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800e15c:	687b      	ldr	r3, [r7, #4]
 800e15e:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800e160:	2b00      	cmp	r3, #0
 800e162:	d00a      	beq.n	800e17a <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800e164:	687b      	ldr	r3, [r7, #4]
 800e166:	695a      	ldr	r2, [r3, #20]
 800e168:	68fb      	ldr	r3, [r7, #12]
 800e16a:	68b9      	ldr	r1, [r7, #8]
 800e16c:	fb01 f303 	mul.w	r3, r1, r3
 800e170:	429a      	cmp	r2, r3
 800e172:	d302      	bcc.n	800e17a <osMessageQueueNew+0x82>
        mem = 1;
 800e174:	2301      	movs	r3, #1
 800e176:	623b      	str	r3, [r7, #32]
 800e178:	e014      	b.n	800e1a4 <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800e17a:	687b      	ldr	r3, [r7, #4]
 800e17c:	689b      	ldr	r3, [r3, #8]
 800e17e:	2b00      	cmp	r3, #0
 800e180:	d110      	bne.n	800e1a4 <osMessageQueueNew+0xac>
 800e182:	687b      	ldr	r3, [r7, #4]
 800e184:	68db      	ldr	r3, [r3, #12]
 800e186:	2b00      	cmp	r3, #0
 800e188:	d10c      	bne.n	800e1a4 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800e18a:	687b      	ldr	r3, [r7, #4]
 800e18c:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800e18e:	2b00      	cmp	r3, #0
 800e190:	d108      	bne.n	800e1a4 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800e192:	687b      	ldr	r3, [r7, #4]
 800e194:	695b      	ldr	r3, [r3, #20]
 800e196:	2b00      	cmp	r3, #0
 800e198:	d104      	bne.n	800e1a4 <osMessageQueueNew+0xac>
          mem = 0;
 800e19a:	2300      	movs	r3, #0
 800e19c:	623b      	str	r3, [r7, #32]
 800e19e:	e001      	b.n	800e1a4 <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 800e1a0:	2300      	movs	r3, #0
 800e1a2:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 800e1a4:	6a3b      	ldr	r3, [r7, #32]
 800e1a6:	2b01      	cmp	r3, #1
 800e1a8:	d10c      	bne.n	800e1c4 <osMessageQueueNew+0xcc>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800e1aa:	687b      	ldr	r3, [r7, #4]
 800e1ac:	691a      	ldr	r2, [r3, #16]
 800e1ae:	687b      	ldr	r3, [r7, #4]
 800e1b0:	6899      	ldr	r1, [r3, #8]
 800e1b2:	2300      	movs	r3, #0
 800e1b4:	9300      	str	r3, [sp, #0]
 800e1b6:	460b      	mov	r3, r1
 800e1b8:	68b9      	ldr	r1, [r7, #8]
 800e1ba:	68f8      	ldr	r0, [r7, #12]
 800e1bc:	f000 fe72 	bl	800eea4 <xQueueGenericCreateStatic>
 800e1c0:	6278      	str	r0, [r7, #36]	; 0x24
 800e1c2:	e008      	b.n	800e1d6 <osMessageQueueNew+0xde>
    }
    else {
      if (mem == 0) {
 800e1c4:	6a3b      	ldr	r3, [r7, #32]
 800e1c6:	2b00      	cmp	r3, #0
 800e1c8:	d105      	bne.n	800e1d6 <osMessageQueueNew+0xde>
        hQueue = xQueueCreate (msg_count, msg_size);
 800e1ca:	2200      	movs	r2, #0
 800e1cc:	68b9      	ldr	r1, [r7, #8]
 800e1ce:	68f8      	ldr	r0, [r7, #12]
 800e1d0:	f000 fedb 	bl	800ef8a <xQueueGenericCreate>
 800e1d4:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800e1d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e1d8:	2b00      	cmp	r3, #0
 800e1da:	d00c      	beq.n	800e1f6 <osMessageQueueNew+0xfe>
      if (attr != NULL) {
 800e1dc:	687b      	ldr	r3, [r7, #4]
 800e1de:	2b00      	cmp	r3, #0
 800e1e0:	d003      	beq.n	800e1ea <osMessageQueueNew+0xf2>
        name = attr->name;
 800e1e2:	687b      	ldr	r3, [r7, #4]
 800e1e4:	681b      	ldr	r3, [r3, #0]
 800e1e6:	61fb      	str	r3, [r7, #28]
 800e1e8:	e001      	b.n	800e1ee <osMessageQueueNew+0xf6>
      } else {
        name = NULL;
 800e1ea:	2300      	movs	r3, #0
 800e1ec:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 800e1ee:	69f9      	ldr	r1, [r7, #28]
 800e1f0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e1f2:	f001 fe0b 	bl	800fe0c <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800e1f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800e1f8:	4618      	mov	r0, r3
 800e1fa:	3728      	adds	r7, #40	; 0x28
 800e1fc:	46bd      	mov	sp, r7
 800e1fe:	bd80      	pop	{r7, pc}
 800e200:	2000147c 	.word	0x2000147c

0800e204 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800e204:	b580      	push	{r7, lr}
 800e206:	b08a      	sub	sp, #40	; 0x28
 800e208:	af00      	add	r7, sp, #0
 800e20a:	60f8      	str	r0, [r7, #12]
 800e20c:	60b9      	str	r1, [r7, #8]
 800e20e:	603b      	str	r3, [r7, #0]
 800e210:	4613      	mov	r3, r2
 800e212:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800e214:	68fb      	ldr	r3, [r7, #12]
 800e216:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800e218:	2300      	movs	r3, #0
 800e21a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e21c:	f3ef 8305 	mrs	r3, IPSR
 800e220:	61fb      	str	r3, [r7, #28]
  return(result);
 800e222:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 800e224:	2b00      	cmp	r3, #0
 800e226:	d10f      	bne.n	800e248 <osMessageQueuePut+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e228:	f3ef 8310 	mrs	r3, PRIMASK
 800e22c:	61bb      	str	r3, [r7, #24]
  return(result);
 800e22e:	69bb      	ldr	r3, [r7, #24]
 800e230:	2b00      	cmp	r3, #0
 800e232:	d105      	bne.n	800e240 <osMessageQueuePut+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800e234:	f3ef 8311 	mrs	r3, BASEPRI
 800e238:	617b      	str	r3, [r7, #20]
  return(result);
 800e23a:	697b      	ldr	r3, [r7, #20]
 800e23c:	2b00      	cmp	r3, #0
 800e23e:	d02c      	beq.n	800e29a <osMessageQueuePut+0x96>
 800e240:	4b28      	ldr	r3, [pc, #160]	; (800e2e4 <osMessageQueuePut+0xe0>)
 800e242:	681b      	ldr	r3, [r3, #0]
 800e244:	2b02      	cmp	r3, #2
 800e246:	d128      	bne.n	800e29a <osMessageQueuePut+0x96>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800e248:	6a3b      	ldr	r3, [r7, #32]
 800e24a:	2b00      	cmp	r3, #0
 800e24c:	d005      	beq.n	800e25a <osMessageQueuePut+0x56>
 800e24e:	68bb      	ldr	r3, [r7, #8]
 800e250:	2b00      	cmp	r3, #0
 800e252:	d002      	beq.n	800e25a <osMessageQueuePut+0x56>
 800e254:	683b      	ldr	r3, [r7, #0]
 800e256:	2b00      	cmp	r3, #0
 800e258:	d003      	beq.n	800e262 <osMessageQueuePut+0x5e>
      stat = osErrorParameter;
 800e25a:	f06f 0303 	mvn.w	r3, #3
 800e25e:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800e260:	e039      	b.n	800e2d6 <osMessageQueuePut+0xd2>
    }
    else {
      yield = pdFALSE;
 800e262:	2300      	movs	r3, #0
 800e264:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800e266:	f107 0210 	add.w	r2, r7, #16
 800e26a:	2300      	movs	r3, #0
 800e26c:	68b9      	ldr	r1, [r7, #8]
 800e26e:	6a38      	ldr	r0, [r7, #32]
 800e270:	f001 f902 	bl	800f478 <xQueueGenericSendFromISR>
 800e274:	4603      	mov	r3, r0
 800e276:	2b01      	cmp	r3, #1
 800e278:	d003      	beq.n	800e282 <osMessageQueuePut+0x7e>
        stat = osErrorResource;
 800e27a:	f06f 0302 	mvn.w	r3, #2
 800e27e:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800e280:	e029      	b.n	800e2d6 <osMessageQueuePut+0xd2>
      } else {
        portYIELD_FROM_ISR (yield);
 800e282:	693b      	ldr	r3, [r7, #16]
 800e284:	2b00      	cmp	r3, #0
 800e286:	d026      	beq.n	800e2d6 <osMessageQueuePut+0xd2>
 800e288:	4b17      	ldr	r3, [pc, #92]	; (800e2e8 <osMessageQueuePut+0xe4>)
 800e28a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e28e:	601a      	str	r2, [r3, #0]
 800e290:	f3bf 8f4f 	dsb	sy
 800e294:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800e298:	e01d      	b.n	800e2d6 <osMessageQueuePut+0xd2>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800e29a:	6a3b      	ldr	r3, [r7, #32]
 800e29c:	2b00      	cmp	r3, #0
 800e29e:	d002      	beq.n	800e2a6 <osMessageQueuePut+0xa2>
 800e2a0:	68bb      	ldr	r3, [r7, #8]
 800e2a2:	2b00      	cmp	r3, #0
 800e2a4:	d103      	bne.n	800e2ae <osMessageQueuePut+0xaa>
      stat = osErrorParameter;
 800e2a6:	f06f 0303 	mvn.w	r3, #3
 800e2aa:	627b      	str	r3, [r7, #36]	; 0x24
 800e2ac:	e014      	b.n	800e2d8 <osMessageQueuePut+0xd4>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800e2ae:	2300      	movs	r3, #0
 800e2b0:	683a      	ldr	r2, [r7, #0]
 800e2b2:	68b9      	ldr	r1, [r7, #8]
 800e2b4:	6a38      	ldr	r0, [r7, #32]
 800e2b6:	f000 ffe5 	bl	800f284 <xQueueGenericSend>
 800e2ba:	4603      	mov	r3, r0
 800e2bc:	2b01      	cmp	r3, #1
 800e2be:	d00b      	beq.n	800e2d8 <osMessageQueuePut+0xd4>
        if (timeout != 0U) {
 800e2c0:	683b      	ldr	r3, [r7, #0]
 800e2c2:	2b00      	cmp	r3, #0
 800e2c4:	d003      	beq.n	800e2ce <osMessageQueuePut+0xca>
          stat = osErrorTimeout;
 800e2c6:	f06f 0301 	mvn.w	r3, #1
 800e2ca:	627b      	str	r3, [r7, #36]	; 0x24
 800e2cc:	e004      	b.n	800e2d8 <osMessageQueuePut+0xd4>
        } else {
          stat = osErrorResource;
 800e2ce:	f06f 0302 	mvn.w	r3, #2
 800e2d2:	627b      	str	r3, [r7, #36]	; 0x24
 800e2d4:	e000      	b.n	800e2d8 <osMessageQueuePut+0xd4>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800e2d6:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 800e2d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800e2da:	4618      	mov	r0, r3
 800e2dc:	3728      	adds	r7, #40	; 0x28
 800e2de:	46bd      	mov	sp, r7
 800e2e0:	bd80      	pop	{r7, pc}
 800e2e2:	bf00      	nop
 800e2e4:	2000147c 	.word	0x2000147c
 800e2e8:	e000ed04 	.word	0xe000ed04

0800e2ec <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800e2ec:	b580      	push	{r7, lr}
 800e2ee:	b08a      	sub	sp, #40	; 0x28
 800e2f0:	af00      	add	r7, sp, #0
 800e2f2:	60f8      	str	r0, [r7, #12]
 800e2f4:	60b9      	str	r1, [r7, #8]
 800e2f6:	607a      	str	r2, [r7, #4]
 800e2f8:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800e2fa:	68fb      	ldr	r3, [r7, #12]
 800e2fc:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800e2fe:	2300      	movs	r3, #0
 800e300:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e302:	f3ef 8305 	mrs	r3, IPSR
 800e306:	61fb      	str	r3, [r7, #28]
  return(result);
 800e308:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 800e30a:	2b00      	cmp	r3, #0
 800e30c:	d10f      	bne.n	800e32e <osMessageQueueGet+0x42>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e30e:	f3ef 8310 	mrs	r3, PRIMASK
 800e312:	61bb      	str	r3, [r7, #24]
  return(result);
 800e314:	69bb      	ldr	r3, [r7, #24]
 800e316:	2b00      	cmp	r3, #0
 800e318:	d105      	bne.n	800e326 <osMessageQueueGet+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800e31a:	f3ef 8311 	mrs	r3, BASEPRI
 800e31e:	617b      	str	r3, [r7, #20]
  return(result);
 800e320:	697b      	ldr	r3, [r7, #20]
 800e322:	2b00      	cmp	r3, #0
 800e324:	d02c      	beq.n	800e380 <osMessageQueueGet+0x94>
 800e326:	4b28      	ldr	r3, [pc, #160]	; (800e3c8 <osMessageQueueGet+0xdc>)
 800e328:	681b      	ldr	r3, [r3, #0]
 800e32a:	2b02      	cmp	r3, #2
 800e32c:	d128      	bne.n	800e380 <osMessageQueueGet+0x94>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800e32e:	6a3b      	ldr	r3, [r7, #32]
 800e330:	2b00      	cmp	r3, #0
 800e332:	d005      	beq.n	800e340 <osMessageQueueGet+0x54>
 800e334:	68bb      	ldr	r3, [r7, #8]
 800e336:	2b00      	cmp	r3, #0
 800e338:	d002      	beq.n	800e340 <osMessageQueueGet+0x54>
 800e33a:	683b      	ldr	r3, [r7, #0]
 800e33c:	2b00      	cmp	r3, #0
 800e33e:	d003      	beq.n	800e348 <osMessageQueueGet+0x5c>
      stat = osErrorParameter;
 800e340:	f06f 0303 	mvn.w	r3, #3
 800e344:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800e346:	e038      	b.n	800e3ba <osMessageQueueGet+0xce>
    }
    else {
      yield = pdFALSE;
 800e348:	2300      	movs	r3, #0
 800e34a:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800e34c:	f107 0310 	add.w	r3, r7, #16
 800e350:	461a      	mov	r2, r3
 800e352:	68b9      	ldr	r1, [r7, #8]
 800e354:	6a38      	ldr	r0, [r7, #32]
 800e356:	f001 fb91 	bl	800fa7c <xQueueReceiveFromISR>
 800e35a:	4603      	mov	r3, r0
 800e35c:	2b01      	cmp	r3, #1
 800e35e:	d003      	beq.n	800e368 <osMessageQueueGet+0x7c>
        stat = osErrorResource;
 800e360:	f06f 0302 	mvn.w	r3, #2
 800e364:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800e366:	e028      	b.n	800e3ba <osMessageQueueGet+0xce>
      } else {
        portYIELD_FROM_ISR (yield);
 800e368:	693b      	ldr	r3, [r7, #16]
 800e36a:	2b00      	cmp	r3, #0
 800e36c:	d025      	beq.n	800e3ba <osMessageQueueGet+0xce>
 800e36e:	4b17      	ldr	r3, [pc, #92]	; (800e3cc <osMessageQueueGet+0xe0>)
 800e370:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e374:	601a      	str	r2, [r3, #0]
 800e376:	f3bf 8f4f 	dsb	sy
 800e37a:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800e37e:	e01c      	b.n	800e3ba <osMessageQueueGet+0xce>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800e380:	6a3b      	ldr	r3, [r7, #32]
 800e382:	2b00      	cmp	r3, #0
 800e384:	d002      	beq.n	800e38c <osMessageQueueGet+0xa0>
 800e386:	68bb      	ldr	r3, [r7, #8]
 800e388:	2b00      	cmp	r3, #0
 800e38a:	d103      	bne.n	800e394 <osMessageQueueGet+0xa8>
      stat = osErrorParameter;
 800e38c:	f06f 0303 	mvn.w	r3, #3
 800e390:	627b      	str	r3, [r7, #36]	; 0x24
 800e392:	e013      	b.n	800e3bc <osMessageQueueGet+0xd0>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800e394:	683a      	ldr	r2, [r7, #0]
 800e396:	68b9      	ldr	r1, [r7, #8]
 800e398:	6a38      	ldr	r0, [r7, #32]
 800e39a:	f001 f98b 	bl	800f6b4 <xQueueReceive>
 800e39e:	4603      	mov	r3, r0
 800e3a0:	2b01      	cmp	r3, #1
 800e3a2:	d00b      	beq.n	800e3bc <osMessageQueueGet+0xd0>
        if (timeout != 0U) {
 800e3a4:	683b      	ldr	r3, [r7, #0]
 800e3a6:	2b00      	cmp	r3, #0
 800e3a8:	d003      	beq.n	800e3b2 <osMessageQueueGet+0xc6>
          stat = osErrorTimeout;
 800e3aa:	f06f 0301 	mvn.w	r3, #1
 800e3ae:	627b      	str	r3, [r7, #36]	; 0x24
 800e3b0:	e004      	b.n	800e3bc <osMessageQueueGet+0xd0>
        } else {
          stat = osErrorResource;
 800e3b2:	f06f 0302 	mvn.w	r3, #2
 800e3b6:	627b      	str	r3, [r7, #36]	; 0x24
 800e3b8:	e000      	b.n	800e3bc <osMessageQueueGet+0xd0>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800e3ba:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 800e3bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800e3be:	4618      	mov	r0, r3
 800e3c0:	3728      	adds	r7, #40	; 0x28
 800e3c2:	46bd      	mov	sp, r7
 800e3c4:	bd80      	pop	{r7, pc}
 800e3c6:	bf00      	nop
 800e3c8:	2000147c 	.word	0x2000147c
 800e3cc:	e000ed04 	.word	0xe000ed04

0800e3d0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800e3d0:	b480      	push	{r7}
 800e3d2:	b085      	sub	sp, #20
 800e3d4:	af00      	add	r7, sp, #0
 800e3d6:	60f8      	str	r0, [r7, #12]
 800e3d8:	60b9      	str	r1, [r7, #8]
 800e3da:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800e3dc:	68fb      	ldr	r3, [r7, #12]
 800e3de:	4a07      	ldr	r2, [pc, #28]	; (800e3fc <vApplicationGetIdleTaskMemory+0x2c>)
 800e3e0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800e3e2:	68bb      	ldr	r3, [r7, #8]
 800e3e4:	4a06      	ldr	r2, [pc, #24]	; (800e400 <vApplicationGetIdleTaskMemory+0x30>)
 800e3e6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800e3e8:	687b      	ldr	r3, [r7, #4]
 800e3ea:	2280      	movs	r2, #128	; 0x80
 800e3ec:	601a      	str	r2, [r3, #0]
}
 800e3ee:	bf00      	nop
 800e3f0:	3714      	adds	r7, #20
 800e3f2:	46bd      	mov	sp, r7
 800e3f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3f8:	4770      	bx	lr
 800e3fa:	bf00      	nop
 800e3fc:	20001480 	.word	0x20001480
 800e400:	200014dc 	.word	0x200014dc

0800e404 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800e404:	b480      	push	{r7}
 800e406:	b085      	sub	sp, #20
 800e408:	af00      	add	r7, sp, #0
 800e40a:	60f8      	str	r0, [r7, #12]
 800e40c:	60b9      	str	r1, [r7, #8]
 800e40e:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800e410:	68fb      	ldr	r3, [r7, #12]
 800e412:	4a07      	ldr	r2, [pc, #28]	; (800e430 <vApplicationGetTimerTaskMemory+0x2c>)
 800e414:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800e416:	68bb      	ldr	r3, [r7, #8]
 800e418:	4a06      	ldr	r2, [pc, #24]	; (800e434 <vApplicationGetTimerTaskMemory+0x30>)
 800e41a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800e41c:	687b      	ldr	r3, [r7, #4]
 800e41e:	f44f 7280 	mov.w	r2, #256	; 0x100
 800e422:	601a      	str	r2, [r3, #0]
}
 800e424:	bf00      	nop
 800e426:	3714      	adds	r7, #20
 800e428:	46bd      	mov	sp, r7
 800e42a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e42e:	4770      	bx	lr
 800e430:	200016dc 	.word	0x200016dc
 800e434:	20001738 	.word	0x20001738

0800e438 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800e438:	b480      	push	{r7}
 800e43a:	b085      	sub	sp, #20
 800e43c:	af00      	add	r7, sp, #0
 800e43e:	60f8      	str	r0, [r7, #12]
 800e440:	60b9      	str	r1, [r7, #8]
 800e442:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800e444:	68fb      	ldr	r3, [r7, #12]
 800e446:	3b04      	subs	r3, #4
 800e448:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800e44a:	68fb      	ldr	r3, [r7, #12]
 800e44c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800e450:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800e452:	68fb      	ldr	r3, [r7, #12]
 800e454:	3b04      	subs	r3, #4
 800e456:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800e458:	68bb      	ldr	r3, [r7, #8]
 800e45a:	f023 0201 	bic.w	r2, r3, #1
 800e45e:	68fb      	ldr	r3, [r7, #12]
 800e460:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800e462:	68fb      	ldr	r3, [r7, #12]
 800e464:	3b04      	subs	r3, #4
 800e466:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800e468:	4a0c      	ldr	r2, [pc, #48]	; (800e49c <pxPortInitialiseStack+0x64>)
 800e46a:	68fb      	ldr	r3, [r7, #12]
 800e46c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800e46e:	68fb      	ldr	r3, [r7, #12]
 800e470:	3b14      	subs	r3, #20
 800e472:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800e474:	687a      	ldr	r2, [r7, #4]
 800e476:	68fb      	ldr	r3, [r7, #12]
 800e478:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800e47a:	68fb      	ldr	r3, [r7, #12]
 800e47c:	3b04      	subs	r3, #4
 800e47e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800e480:	68fb      	ldr	r3, [r7, #12]
 800e482:	f06f 0202 	mvn.w	r2, #2
 800e486:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800e488:	68fb      	ldr	r3, [r7, #12]
 800e48a:	3b20      	subs	r3, #32
 800e48c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800e48e:	68fb      	ldr	r3, [r7, #12]
}
 800e490:	4618      	mov	r0, r3
 800e492:	3714      	adds	r7, #20
 800e494:	46bd      	mov	sp, r7
 800e496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e49a:	4770      	bx	lr
 800e49c:	0800e4a1 	.word	0x0800e4a1

0800e4a0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800e4a0:	b480      	push	{r7}
 800e4a2:	b085      	sub	sp, #20
 800e4a4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800e4a6:	2300      	movs	r3, #0
 800e4a8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800e4aa:	4b11      	ldr	r3, [pc, #68]	; (800e4f0 <prvTaskExitError+0x50>)
 800e4ac:	681b      	ldr	r3, [r3, #0]
 800e4ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e4b2:	d009      	beq.n	800e4c8 <prvTaskExitError+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800e4b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e4b8:	f383 8811 	msr	BASEPRI, r3
 800e4bc:	f3bf 8f6f 	isb	sy
 800e4c0:	f3bf 8f4f 	dsb	sy
 800e4c4:	60fb      	str	r3, [r7, #12]
 800e4c6:	e7fe      	b.n	800e4c6 <prvTaskExitError+0x26>
 800e4c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e4cc:	f383 8811 	msr	BASEPRI, r3
 800e4d0:	f3bf 8f6f 	isb	sy
 800e4d4:	f3bf 8f4f 	dsb	sy
 800e4d8:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800e4da:	bf00      	nop
 800e4dc:	687b      	ldr	r3, [r7, #4]
 800e4de:	2b00      	cmp	r3, #0
 800e4e0:	d0fc      	beq.n	800e4dc <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800e4e2:	bf00      	nop
 800e4e4:	3714      	adds	r7, #20
 800e4e6:	46bd      	mov	sp, r7
 800e4e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4ec:	4770      	bx	lr
 800e4ee:	bf00      	nop
 800e4f0:	20000020 	.word	0x20000020
	...

0800e500 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800e500:	4b07      	ldr	r3, [pc, #28]	; (800e520 <pxCurrentTCBConst2>)
 800e502:	6819      	ldr	r1, [r3, #0]
 800e504:	6808      	ldr	r0, [r1, #0]
 800e506:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e50a:	f380 8809 	msr	PSP, r0
 800e50e:	f3bf 8f6f 	isb	sy
 800e512:	f04f 0000 	mov.w	r0, #0
 800e516:	f380 8811 	msr	BASEPRI, r0
 800e51a:	4770      	bx	lr
 800e51c:	f3af 8000 	nop.w

0800e520 <pxCurrentTCBConst2>:
 800e520:	200059d8 	.word	0x200059d8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800e524:	bf00      	nop
 800e526:	bf00      	nop

0800e528 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800e528:	4808      	ldr	r0, [pc, #32]	; (800e54c <prvPortStartFirstTask+0x24>)
 800e52a:	6800      	ldr	r0, [r0, #0]
 800e52c:	6800      	ldr	r0, [r0, #0]
 800e52e:	f380 8808 	msr	MSP, r0
 800e532:	f04f 0000 	mov.w	r0, #0
 800e536:	f380 8814 	msr	CONTROL, r0
 800e53a:	b662      	cpsie	i
 800e53c:	b661      	cpsie	f
 800e53e:	f3bf 8f4f 	dsb	sy
 800e542:	f3bf 8f6f 	isb	sy
 800e546:	df00      	svc	0
 800e548:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800e54a:	bf00      	nop
 800e54c:	e000ed08 	.word	0xe000ed08

0800e550 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800e550:	b580      	push	{r7, lr}
 800e552:	b086      	sub	sp, #24
 800e554:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800e556:	4b44      	ldr	r3, [pc, #272]	; (800e668 <xPortStartScheduler+0x118>)
 800e558:	681b      	ldr	r3, [r3, #0]
 800e55a:	4a44      	ldr	r2, [pc, #272]	; (800e66c <xPortStartScheduler+0x11c>)
 800e55c:	4293      	cmp	r3, r2
 800e55e:	d109      	bne.n	800e574 <xPortStartScheduler+0x24>
 800e560:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e564:	f383 8811 	msr	BASEPRI, r3
 800e568:	f3bf 8f6f 	isb	sy
 800e56c:	f3bf 8f4f 	dsb	sy
 800e570:	613b      	str	r3, [r7, #16]
 800e572:	e7fe      	b.n	800e572 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800e574:	4b3c      	ldr	r3, [pc, #240]	; (800e668 <xPortStartScheduler+0x118>)
 800e576:	681b      	ldr	r3, [r3, #0]
 800e578:	4a3d      	ldr	r2, [pc, #244]	; (800e670 <xPortStartScheduler+0x120>)
 800e57a:	4293      	cmp	r3, r2
 800e57c:	d109      	bne.n	800e592 <xPortStartScheduler+0x42>
 800e57e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e582:	f383 8811 	msr	BASEPRI, r3
 800e586:	f3bf 8f6f 	isb	sy
 800e58a:	f3bf 8f4f 	dsb	sy
 800e58e:	60fb      	str	r3, [r7, #12]
 800e590:	e7fe      	b.n	800e590 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800e592:	4b38      	ldr	r3, [pc, #224]	; (800e674 <xPortStartScheduler+0x124>)
 800e594:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800e596:	697b      	ldr	r3, [r7, #20]
 800e598:	781b      	ldrb	r3, [r3, #0]
 800e59a:	b2db      	uxtb	r3, r3
 800e59c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800e59e:	697b      	ldr	r3, [r7, #20]
 800e5a0:	22ff      	movs	r2, #255	; 0xff
 800e5a2:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800e5a4:	697b      	ldr	r3, [r7, #20]
 800e5a6:	781b      	ldrb	r3, [r3, #0]
 800e5a8:	b2db      	uxtb	r3, r3
 800e5aa:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800e5ac:	78fb      	ldrb	r3, [r7, #3]
 800e5ae:	b2db      	uxtb	r3, r3
 800e5b0:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800e5b4:	b2da      	uxtb	r2, r3
 800e5b6:	4b30      	ldr	r3, [pc, #192]	; (800e678 <xPortStartScheduler+0x128>)
 800e5b8:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800e5ba:	4b30      	ldr	r3, [pc, #192]	; (800e67c <xPortStartScheduler+0x12c>)
 800e5bc:	2207      	movs	r2, #7
 800e5be:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800e5c0:	e009      	b.n	800e5d6 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 800e5c2:	4b2e      	ldr	r3, [pc, #184]	; (800e67c <xPortStartScheduler+0x12c>)
 800e5c4:	681b      	ldr	r3, [r3, #0]
 800e5c6:	3b01      	subs	r3, #1
 800e5c8:	4a2c      	ldr	r2, [pc, #176]	; (800e67c <xPortStartScheduler+0x12c>)
 800e5ca:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800e5cc:	78fb      	ldrb	r3, [r7, #3]
 800e5ce:	b2db      	uxtb	r3, r3
 800e5d0:	005b      	lsls	r3, r3, #1
 800e5d2:	b2db      	uxtb	r3, r3
 800e5d4:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800e5d6:	78fb      	ldrb	r3, [r7, #3]
 800e5d8:	b2db      	uxtb	r3, r3
 800e5da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e5de:	2b80      	cmp	r3, #128	; 0x80
 800e5e0:	d0ef      	beq.n	800e5c2 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800e5e2:	4b26      	ldr	r3, [pc, #152]	; (800e67c <xPortStartScheduler+0x12c>)
 800e5e4:	681b      	ldr	r3, [r3, #0]
 800e5e6:	f1c3 0307 	rsb	r3, r3, #7
 800e5ea:	2b04      	cmp	r3, #4
 800e5ec:	d009      	beq.n	800e602 <xPortStartScheduler+0xb2>
 800e5ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e5f2:	f383 8811 	msr	BASEPRI, r3
 800e5f6:	f3bf 8f6f 	isb	sy
 800e5fa:	f3bf 8f4f 	dsb	sy
 800e5fe:	60bb      	str	r3, [r7, #8]
 800e600:	e7fe      	b.n	800e600 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800e602:	4b1e      	ldr	r3, [pc, #120]	; (800e67c <xPortStartScheduler+0x12c>)
 800e604:	681b      	ldr	r3, [r3, #0]
 800e606:	021b      	lsls	r3, r3, #8
 800e608:	4a1c      	ldr	r2, [pc, #112]	; (800e67c <xPortStartScheduler+0x12c>)
 800e60a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800e60c:	4b1b      	ldr	r3, [pc, #108]	; (800e67c <xPortStartScheduler+0x12c>)
 800e60e:	681b      	ldr	r3, [r3, #0]
 800e610:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800e614:	4a19      	ldr	r2, [pc, #100]	; (800e67c <xPortStartScheduler+0x12c>)
 800e616:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800e618:	687b      	ldr	r3, [r7, #4]
 800e61a:	b2da      	uxtb	r2, r3
 800e61c:	697b      	ldr	r3, [r7, #20]
 800e61e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800e620:	4b17      	ldr	r3, [pc, #92]	; (800e680 <xPortStartScheduler+0x130>)
 800e622:	681b      	ldr	r3, [r3, #0]
 800e624:	4a16      	ldr	r2, [pc, #88]	; (800e680 <xPortStartScheduler+0x130>)
 800e626:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800e62a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800e62c:	4b14      	ldr	r3, [pc, #80]	; (800e680 <xPortStartScheduler+0x130>)
 800e62e:	681b      	ldr	r3, [r3, #0]
 800e630:	4a13      	ldr	r2, [pc, #76]	; (800e680 <xPortStartScheduler+0x130>)
 800e632:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800e636:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800e638:	f000 f8d6 	bl	800e7e8 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800e63c:	4b11      	ldr	r3, [pc, #68]	; (800e684 <xPortStartScheduler+0x134>)
 800e63e:	2200      	movs	r2, #0
 800e640:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800e642:	f000 f8f5 	bl	800e830 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800e646:	4b10      	ldr	r3, [pc, #64]	; (800e688 <xPortStartScheduler+0x138>)
 800e648:	681b      	ldr	r3, [r3, #0]
 800e64a:	4a0f      	ldr	r2, [pc, #60]	; (800e688 <xPortStartScheduler+0x138>)
 800e64c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800e650:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800e652:	f7ff ff69 	bl	800e528 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800e656:	f002 f83f 	bl	80106d8 <vTaskSwitchContext>
	prvTaskExitError();
 800e65a:	f7ff ff21 	bl	800e4a0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800e65e:	2300      	movs	r3, #0
}
 800e660:	4618      	mov	r0, r3
 800e662:	3718      	adds	r7, #24
 800e664:	46bd      	mov	sp, r7
 800e666:	bd80      	pop	{r7, pc}
 800e668:	e000ed00 	.word	0xe000ed00
 800e66c:	410fc271 	.word	0x410fc271
 800e670:	410fc270 	.word	0x410fc270
 800e674:	e000e400 	.word	0xe000e400
 800e678:	20001b38 	.word	0x20001b38
 800e67c:	20001b3c 	.word	0x20001b3c
 800e680:	e000ed20 	.word	0xe000ed20
 800e684:	20000020 	.word	0x20000020
 800e688:	e000ef34 	.word	0xe000ef34

0800e68c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800e68c:	b480      	push	{r7}
 800e68e:	b083      	sub	sp, #12
 800e690:	af00      	add	r7, sp, #0
 800e692:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e696:	f383 8811 	msr	BASEPRI, r3
 800e69a:	f3bf 8f6f 	isb	sy
 800e69e:	f3bf 8f4f 	dsb	sy
 800e6a2:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800e6a4:	4b0e      	ldr	r3, [pc, #56]	; (800e6e0 <vPortEnterCritical+0x54>)
 800e6a6:	681b      	ldr	r3, [r3, #0]
 800e6a8:	3301      	adds	r3, #1
 800e6aa:	4a0d      	ldr	r2, [pc, #52]	; (800e6e0 <vPortEnterCritical+0x54>)
 800e6ac:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800e6ae:	4b0c      	ldr	r3, [pc, #48]	; (800e6e0 <vPortEnterCritical+0x54>)
 800e6b0:	681b      	ldr	r3, [r3, #0]
 800e6b2:	2b01      	cmp	r3, #1
 800e6b4:	d10e      	bne.n	800e6d4 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800e6b6:	4b0b      	ldr	r3, [pc, #44]	; (800e6e4 <vPortEnterCritical+0x58>)
 800e6b8:	681b      	ldr	r3, [r3, #0]
 800e6ba:	b2db      	uxtb	r3, r3
 800e6bc:	2b00      	cmp	r3, #0
 800e6be:	d009      	beq.n	800e6d4 <vPortEnterCritical+0x48>
 800e6c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e6c4:	f383 8811 	msr	BASEPRI, r3
 800e6c8:	f3bf 8f6f 	isb	sy
 800e6cc:	f3bf 8f4f 	dsb	sy
 800e6d0:	603b      	str	r3, [r7, #0]
 800e6d2:	e7fe      	b.n	800e6d2 <vPortEnterCritical+0x46>
	}
}
 800e6d4:	bf00      	nop
 800e6d6:	370c      	adds	r7, #12
 800e6d8:	46bd      	mov	sp, r7
 800e6da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6de:	4770      	bx	lr
 800e6e0:	20000020 	.word	0x20000020
 800e6e4:	e000ed04 	.word	0xe000ed04

0800e6e8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800e6e8:	b480      	push	{r7}
 800e6ea:	b083      	sub	sp, #12
 800e6ec:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800e6ee:	4b11      	ldr	r3, [pc, #68]	; (800e734 <vPortExitCritical+0x4c>)
 800e6f0:	681b      	ldr	r3, [r3, #0]
 800e6f2:	2b00      	cmp	r3, #0
 800e6f4:	d109      	bne.n	800e70a <vPortExitCritical+0x22>
 800e6f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e6fa:	f383 8811 	msr	BASEPRI, r3
 800e6fe:	f3bf 8f6f 	isb	sy
 800e702:	f3bf 8f4f 	dsb	sy
 800e706:	607b      	str	r3, [r7, #4]
 800e708:	e7fe      	b.n	800e708 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 800e70a:	4b0a      	ldr	r3, [pc, #40]	; (800e734 <vPortExitCritical+0x4c>)
 800e70c:	681b      	ldr	r3, [r3, #0]
 800e70e:	3b01      	subs	r3, #1
 800e710:	4a08      	ldr	r2, [pc, #32]	; (800e734 <vPortExitCritical+0x4c>)
 800e712:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800e714:	4b07      	ldr	r3, [pc, #28]	; (800e734 <vPortExitCritical+0x4c>)
 800e716:	681b      	ldr	r3, [r3, #0]
 800e718:	2b00      	cmp	r3, #0
 800e71a:	d104      	bne.n	800e726 <vPortExitCritical+0x3e>
 800e71c:	2300      	movs	r3, #0
 800e71e:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800e720:	683b      	ldr	r3, [r7, #0]
 800e722:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 800e726:	bf00      	nop
 800e728:	370c      	adds	r7, #12
 800e72a:	46bd      	mov	sp, r7
 800e72c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e730:	4770      	bx	lr
 800e732:	bf00      	nop
 800e734:	20000020 	.word	0x20000020
	...

0800e740 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800e740:	f3ef 8009 	mrs	r0, PSP
 800e744:	f3bf 8f6f 	isb	sy
 800e748:	4b15      	ldr	r3, [pc, #84]	; (800e7a0 <pxCurrentTCBConst>)
 800e74a:	681a      	ldr	r2, [r3, #0]
 800e74c:	f01e 0f10 	tst.w	lr, #16
 800e750:	bf08      	it	eq
 800e752:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800e756:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e75a:	6010      	str	r0, [r2, #0]
 800e75c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800e760:	f04f 0050 	mov.w	r0, #80	; 0x50
 800e764:	f380 8811 	msr	BASEPRI, r0
 800e768:	f3bf 8f4f 	dsb	sy
 800e76c:	f3bf 8f6f 	isb	sy
 800e770:	f001 ffb2 	bl	80106d8 <vTaskSwitchContext>
 800e774:	f04f 0000 	mov.w	r0, #0
 800e778:	f380 8811 	msr	BASEPRI, r0
 800e77c:	bc09      	pop	{r0, r3}
 800e77e:	6819      	ldr	r1, [r3, #0]
 800e780:	6808      	ldr	r0, [r1, #0]
 800e782:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e786:	f01e 0f10 	tst.w	lr, #16
 800e78a:	bf08      	it	eq
 800e78c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800e790:	f380 8809 	msr	PSP, r0
 800e794:	f3bf 8f6f 	isb	sy
 800e798:	4770      	bx	lr
 800e79a:	bf00      	nop
 800e79c:	f3af 8000 	nop.w

0800e7a0 <pxCurrentTCBConst>:
 800e7a0:	200059d8 	.word	0x200059d8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800e7a4:	bf00      	nop
 800e7a6:	bf00      	nop

0800e7a8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800e7a8:	b580      	push	{r7, lr}
 800e7aa:	b082      	sub	sp, #8
 800e7ac:	af00      	add	r7, sp, #0
	__asm volatile
 800e7ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e7b2:	f383 8811 	msr	BASEPRI, r3
 800e7b6:	f3bf 8f6f 	isb	sy
 800e7ba:	f3bf 8f4f 	dsb	sy
 800e7be:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800e7c0:	f001 fed2 	bl	8010568 <xTaskIncrementTick>
 800e7c4:	4603      	mov	r3, r0
 800e7c6:	2b00      	cmp	r3, #0
 800e7c8:	d003      	beq.n	800e7d2 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800e7ca:	4b06      	ldr	r3, [pc, #24]	; (800e7e4 <SysTick_Handler+0x3c>)
 800e7cc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e7d0:	601a      	str	r2, [r3, #0]
 800e7d2:	2300      	movs	r3, #0
 800e7d4:	603b      	str	r3, [r7, #0]
	__asm volatile
 800e7d6:	683b      	ldr	r3, [r7, #0]
 800e7d8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800e7dc:	bf00      	nop
 800e7de:	3708      	adds	r7, #8
 800e7e0:	46bd      	mov	sp, r7
 800e7e2:	bd80      	pop	{r7, pc}
 800e7e4:	e000ed04 	.word	0xe000ed04

0800e7e8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800e7e8:	b480      	push	{r7}
 800e7ea:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800e7ec:	4b0b      	ldr	r3, [pc, #44]	; (800e81c <vPortSetupTimerInterrupt+0x34>)
 800e7ee:	2200      	movs	r2, #0
 800e7f0:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800e7f2:	4b0b      	ldr	r3, [pc, #44]	; (800e820 <vPortSetupTimerInterrupt+0x38>)
 800e7f4:	2200      	movs	r2, #0
 800e7f6:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800e7f8:	4b0a      	ldr	r3, [pc, #40]	; (800e824 <vPortSetupTimerInterrupt+0x3c>)
 800e7fa:	681b      	ldr	r3, [r3, #0]
 800e7fc:	4a0a      	ldr	r2, [pc, #40]	; (800e828 <vPortSetupTimerInterrupt+0x40>)
 800e7fe:	fba2 2303 	umull	r2, r3, r2, r3
 800e802:	099b      	lsrs	r3, r3, #6
 800e804:	4a09      	ldr	r2, [pc, #36]	; (800e82c <vPortSetupTimerInterrupt+0x44>)
 800e806:	3b01      	subs	r3, #1
 800e808:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800e80a:	4b04      	ldr	r3, [pc, #16]	; (800e81c <vPortSetupTimerInterrupt+0x34>)
 800e80c:	2207      	movs	r2, #7
 800e80e:	601a      	str	r2, [r3, #0]
}
 800e810:	bf00      	nop
 800e812:	46bd      	mov	sp, r7
 800e814:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e818:	4770      	bx	lr
 800e81a:	bf00      	nop
 800e81c:	e000e010 	.word	0xe000e010
 800e820:	e000e018 	.word	0xe000e018
 800e824:	20000014 	.word	0x20000014
 800e828:	10624dd3 	.word	0x10624dd3
 800e82c:	e000e014 	.word	0xe000e014

0800e830 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800e830:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800e840 <vPortEnableVFP+0x10>
 800e834:	6801      	ldr	r1, [r0, #0]
 800e836:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800e83a:	6001      	str	r1, [r0, #0]
 800e83c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800e83e:	bf00      	nop
 800e840:	e000ed88 	.word	0xe000ed88

0800e844 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800e844:	b480      	push	{r7}
 800e846:	b085      	sub	sp, #20
 800e848:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800e84a:	f3ef 8305 	mrs	r3, IPSR
 800e84e:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800e850:	68fb      	ldr	r3, [r7, #12]
 800e852:	2b0f      	cmp	r3, #15
 800e854:	d913      	bls.n	800e87e <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800e856:	4a16      	ldr	r2, [pc, #88]	; (800e8b0 <vPortValidateInterruptPriority+0x6c>)
 800e858:	68fb      	ldr	r3, [r7, #12]
 800e85a:	4413      	add	r3, r2
 800e85c:	781b      	ldrb	r3, [r3, #0]
 800e85e:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800e860:	4b14      	ldr	r3, [pc, #80]	; (800e8b4 <vPortValidateInterruptPriority+0x70>)
 800e862:	781b      	ldrb	r3, [r3, #0]
 800e864:	7afa      	ldrb	r2, [r7, #11]
 800e866:	429a      	cmp	r2, r3
 800e868:	d209      	bcs.n	800e87e <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 800e86a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e86e:	f383 8811 	msr	BASEPRI, r3
 800e872:	f3bf 8f6f 	isb	sy
 800e876:	f3bf 8f4f 	dsb	sy
 800e87a:	607b      	str	r3, [r7, #4]
 800e87c:	e7fe      	b.n	800e87c <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800e87e:	4b0e      	ldr	r3, [pc, #56]	; (800e8b8 <vPortValidateInterruptPriority+0x74>)
 800e880:	681b      	ldr	r3, [r3, #0]
 800e882:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800e886:	4b0d      	ldr	r3, [pc, #52]	; (800e8bc <vPortValidateInterruptPriority+0x78>)
 800e888:	681b      	ldr	r3, [r3, #0]
 800e88a:	429a      	cmp	r2, r3
 800e88c:	d909      	bls.n	800e8a2 <vPortValidateInterruptPriority+0x5e>
 800e88e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e892:	f383 8811 	msr	BASEPRI, r3
 800e896:	f3bf 8f6f 	isb	sy
 800e89a:	f3bf 8f4f 	dsb	sy
 800e89e:	603b      	str	r3, [r7, #0]
 800e8a0:	e7fe      	b.n	800e8a0 <vPortValidateInterruptPriority+0x5c>
	}
 800e8a2:	bf00      	nop
 800e8a4:	3714      	adds	r7, #20
 800e8a6:	46bd      	mov	sp, r7
 800e8a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8ac:	4770      	bx	lr
 800e8ae:	bf00      	nop
 800e8b0:	e000e3f0 	.word	0xe000e3f0
 800e8b4:	20001b38 	.word	0x20001b38
 800e8b8:	e000ed0c 	.word	0xe000ed0c
 800e8bc:	20001b3c 	.word	0x20001b3c

0800e8c0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800e8c0:	b580      	push	{r7, lr}
 800e8c2:	b08a      	sub	sp, #40	; 0x28
 800e8c4:	af00      	add	r7, sp, #0
 800e8c6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800e8c8:	2300      	movs	r3, #0
 800e8ca:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800e8cc:	f001 fd5a 	bl	8010384 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800e8d0:	4b57      	ldr	r3, [pc, #348]	; (800ea30 <pvPortMalloc+0x170>)
 800e8d2:	681b      	ldr	r3, [r3, #0]
 800e8d4:	2b00      	cmp	r3, #0
 800e8d6:	d101      	bne.n	800e8dc <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800e8d8:	f000 f90c 	bl	800eaf4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800e8dc:	4b55      	ldr	r3, [pc, #340]	; (800ea34 <pvPortMalloc+0x174>)
 800e8de:	681a      	ldr	r2, [r3, #0]
 800e8e0:	687b      	ldr	r3, [r7, #4]
 800e8e2:	4013      	ands	r3, r2
 800e8e4:	2b00      	cmp	r3, #0
 800e8e6:	f040 808c 	bne.w	800ea02 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800e8ea:	687b      	ldr	r3, [r7, #4]
 800e8ec:	2b00      	cmp	r3, #0
 800e8ee:	d01c      	beq.n	800e92a <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 800e8f0:	2208      	movs	r2, #8
 800e8f2:	687b      	ldr	r3, [r7, #4]
 800e8f4:	4413      	add	r3, r2
 800e8f6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800e8f8:	687b      	ldr	r3, [r7, #4]
 800e8fa:	f003 0307 	and.w	r3, r3, #7
 800e8fe:	2b00      	cmp	r3, #0
 800e900:	d013      	beq.n	800e92a <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800e902:	687b      	ldr	r3, [r7, #4]
 800e904:	f023 0307 	bic.w	r3, r3, #7
 800e908:	3308      	adds	r3, #8
 800e90a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800e90c:	687b      	ldr	r3, [r7, #4]
 800e90e:	f003 0307 	and.w	r3, r3, #7
 800e912:	2b00      	cmp	r3, #0
 800e914:	d009      	beq.n	800e92a <pvPortMalloc+0x6a>
 800e916:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e91a:	f383 8811 	msr	BASEPRI, r3
 800e91e:	f3bf 8f6f 	isb	sy
 800e922:	f3bf 8f4f 	dsb	sy
 800e926:	617b      	str	r3, [r7, #20]
 800e928:	e7fe      	b.n	800e928 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800e92a:	687b      	ldr	r3, [r7, #4]
 800e92c:	2b00      	cmp	r3, #0
 800e92e:	d068      	beq.n	800ea02 <pvPortMalloc+0x142>
 800e930:	4b41      	ldr	r3, [pc, #260]	; (800ea38 <pvPortMalloc+0x178>)
 800e932:	681b      	ldr	r3, [r3, #0]
 800e934:	687a      	ldr	r2, [r7, #4]
 800e936:	429a      	cmp	r2, r3
 800e938:	d863      	bhi.n	800ea02 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800e93a:	4b40      	ldr	r3, [pc, #256]	; (800ea3c <pvPortMalloc+0x17c>)
 800e93c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800e93e:	4b3f      	ldr	r3, [pc, #252]	; (800ea3c <pvPortMalloc+0x17c>)
 800e940:	681b      	ldr	r3, [r3, #0]
 800e942:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800e944:	e004      	b.n	800e950 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 800e946:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e948:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800e94a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e94c:	681b      	ldr	r3, [r3, #0]
 800e94e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800e950:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e952:	685b      	ldr	r3, [r3, #4]
 800e954:	687a      	ldr	r2, [r7, #4]
 800e956:	429a      	cmp	r2, r3
 800e958:	d903      	bls.n	800e962 <pvPortMalloc+0xa2>
 800e95a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e95c:	681b      	ldr	r3, [r3, #0]
 800e95e:	2b00      	cmp	r3, #0
 800e960:	d1f1      	bne.n	800e946 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800e962:	4b33      	ldr	r3, [pc, #204]	; (800ea30 <pvPortMalloc+0x170>)
 800e964:	681b      	ldr	r3, [r3, #0]
 800e966:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e968:	429a      	cmp	r2, r3
 800e96a:	d04a      	beq.n	800ea02 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800e96c:	6a3b      	ldr	r3, [r7, #32]
 800e96e:	681b      	ldr	r3, [r3, #0]
 800e970:	2208      	movs	r2, #8
 800e972:	4413      	add	r3, r2
 800e974:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800e976:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e978:	681a      	ldr	r2, [r3, #0]
 800e97a:	6a3b      	ldr	r3, [r7, #32]
 800e97c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800e97e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e980:	685a      	ldr	r2, [r3, #4]
 800e982:	687b      	ldr	r3, [r7, #4]
 800e984:	1ad2      	subs	r2, r2, r3
 800e986:	2308      	movs	r3, #8
 800e988:	005b      	lsls	r3, r3, #1
 800e98a:	429a      	cmp	r2, r3
 800e98c:	d91e      	bls.n	800e9cc <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800e98e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e990:	687b      	ldr	r3, [r7, #4]
 800e992:	4413      	add	r3, r2
 800e994:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800e996:	69bb      	ldr	r3, [r7, #24]
 800e998:	f003 0307 	and.w	r3, r3, #7
 800e99c:	2b00      	cmp	r3, #0
 800e99e:	d009      	beq.n	800e9b4 <pvPortMalloc+0xf4>
 800e9a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e9a4:	f383 8811 	msr	BASEPRI, r3
 800e9a8:	f3bf 8f6f 	isb	sy
 800e9ac:	f3bf 8f4f 	dsb	sy
 800e9b0:	613b      	str	r3, [r7, #16]
 800e9b2:	e7fe      	b.n	800e9b2 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800e9b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e9b6:	685a      	ldr	r2, [r3, #4]
 800e9b8:	687b      	ldr	r3, [r7, #4]
 800e9ba:	1ad2      	subs	r2, r2, r3
 800e9bc:	69bb      	ldr	r3, [r7, #24]
 800e9be:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800e9c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e9c2:	687a      	ldr	r2, [r7, #4]
 800e9c4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800e9c6:	69b8      	ldr	r0, [r7, #24]
 800e9c8:	f000 f8f6 	bl	800ebb8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800e9cc:	4b1a      	ldr	r3, [pc, #104]	; (800ea38 <pvPortMalloc+0x178>)
 800e9ce:	681a      	ldr	r2, [r3, #0]
 800e9d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e9d2:	685b      	ldr	r3, [r3, #4]
 800e9d4:	1ad3      	subs	r3, r2, r3
 800e9d6:	4a18      	ldr	r2, [pc, #96]	; (800ea38 <pvPortMalloc+0x178>)
 800e9d8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800e9da:	4b17      	ldr	r3, [pc, #92]	; (800ea38 <pvPortMalloc+0x178>)
 800e9dc:	681a      	ldr	r2, [r3, #0]
 800e9de:	4b18      	ldr	r3, [pc, #96]	; (800ea40 <pvPortMalloc+0x180>)
 800e9e0:	681b      	ldr	r3, [r3, #0]
 800e9e2:	429a      	cmp	r2, r3
 800e9e4:	d203      	bcs.n	800e9ee <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800e9e6:	4b14      	ldr	r3, [pc, #80]	; (800ea38 <pvPortMalloc+0x178>)
 800e9e8:	681b      	ldr	r3, [r3, #0]
 800e9ea:	4a15      	ldr	r2, [pc, #84]	; (800ea40 <pvPortMalloc+0x180>)
 800e9ec:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800e9ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e9f0:	685a      	ldr	r2, [r3, #4]
 800e9f2:	4b10      	ldr	r3, [pc, #64]	; (800ea34 <pvPortMalloc+0x174>)
 800e9f4:	681b      	ldr	r3, [r3, #0]
 800e9f6:	431a      	orrs	r2, r3
 800e9f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e9fa:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800e9fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e9fe:	2200      	movs	r2, #0
 800ea00:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800ea02:	f001 fd05 	bl	8010410 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800ea06:	69fb      	ldr	r3, [r7, #28]
 800ea08:	f003 0307 	and.w	r3, r3, #7
 800ea0c:	2b00      	cmp	r3, #0
 800ea0e:	d009      	beq.n	800ea24 <pvPortMalloc+0x164>
 800ea10:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ea14:	f383 8811 	msr	BASEPRI, r3
 800ea18:	f3bf 8f6f 	isb	sy
 800ea1c:	f3bf 8f4f 	dsb	sy
 800ea20:	60fb      	str	r3, [r7, #12]
 800ea22:	e7fe      	b.n	800ea22 <pvPortMalloc+0x162>
	return pvReturn;
 800ea24:	69fb      	ldr	r3, [r7, #28]
}
 800ea26:	4618      	mov	r0, r3
 800ea28:	3728      	adds	r7, #40	; 0x28
 800ea2a:	46bd      	mov	sp, r7
 800ea2c:	bd80      	pop	{r7, pc}
 800ea2e:	bf00      	nop
 800ea30:	200059c8 	.word	0x200059c8
 800ea34:	200059d4 	.word	0x200059d4
 800ea38:	200059cc 	.word	0x200059cc
 800ea3c:	200059c0 	.word	0x200059c0
 800ea40:	200059d0 	.word	0x200059d0

0800ea44 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800ea44:	b580      	push	{r7, lr}
 800ea46:	b086      	sub	sp, #24
 800ea48:	af00      	add	r7, sp, #0
 800ea4a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800ea4c:	687b      	ldr	r3, [r7, #4]
 800ea4e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800ea50:	687b      	ldr	r3, [r7, #4]
 800ea52:	2b00      	cmp	r3, #0
 800ea54:	d046      	beq.n	800eae4 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800ea56:	2308      	movs	r3, #8
 800ea58:	425b      	negs	r3, r3
 800ea5a:	697a      	ldr	r2, [r7, #20]
 800ea5c:	4413      	add	r3, r2
 800ea5e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800ea60:	697b      	ldr	r3, [r7, #20]
 800ea62:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800ea64:	693b      	ldr	r3, [r7, #16]
 800ea66:	685a      	ldr	r2, [r3, #4]
 800ea68:	4b20      	ldr	r3, [pc, #128]	; (800eaec <vPortFree+0xa8>)
 800ea6a:	681b      	ldr	r3, [r3, #0]
 800ea6c:	4013      	ands	r3, r2
 800ea6e:	2b00      	cmp	r3, #0
 800ea70:	d109      	bne.n	800ea86 <vPortFree+0x42>
 800ea72:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ea76:	f383 8811 	msr	BASEPRI, r3
 800ea7a:	f3bf 8f6f 	isb	sy
 800ea7e:	f3bf 8f4f 	dsb	sy
 800ea82:	60fb      	str	r3, [r7, #12]
 800ea84:	e7fe      	b.n	800ea84 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800ea86:	693b      	ldr	r3, [r7, #16]
 800ea88:	681b      	ldr	r3, [r3, #0]
 800ea8a:	2b00      	cmp	r3, #0
 800ea8c:	d009      	beq.n	800eaa2 <vPortFree+0x5e>
 800ea8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ea92:	f383 8811 	msr	BASEPRI, r3
 800ea96:	f3bf 8f6f 	isb	sy
 800ea9a:	f3bf 8f4f 	dsb	sy
 800ea9e:	60bb      	str	r3, [r7, #8]
 800eaa0:	e7fe      	b.n	800eaa0 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800eaa2:	693b      	ldr	r3, [r7, #16]
 800eaa4:	685a      	ldr	r2, [r3, #4]
 800eaa6:	4b11      	ldr	r3, [pc, #68]	; (800eaec <vPortFree+0xa8>)
 800eaa8:	681b      	ldr	r3, [r3, #0]
 800eaaa:	4013      	ands	r3, r2
 800eaac:	2b00      	cmp	r3, #0
 800eaae:	d019      	beq.n	800eae4 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800eab0:	693b      	ldr	r3, [r7, #16]
 800eab2:	681b      	ldr	r3, [r3, #0]
 800eab4:	2b00      	cmp	r3, #0
 800eab6:	d115      	bne.n	800eae4 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800eab8:	693b      	ldr	r3, [r7, #16]
 800eaba:	685a      	ldr	r2, [r3, #4]
 800eabc:	4b0b      	ldr	r3, [pc, #44]	; (800eaec <vPortFree+0xa8>)
 800eabe:	681b      	ldr	r3, [r3, #0]
 800eac0:	43db      	mvns	r3, r3
 800eac2:	401a      	ands	r2, r3
 800eac4:	693b      	ldr	r3, [r7, #16]
 800eac6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800eac8:	f001 fc5c 	bl	8010384 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800eacc:	693b      	ldr	r3, [r7, #16]
 800eace:	685a      	ldr	r2, [r3, #4]
 800ead0:	4b07      	ldr	r3, [pc, #28]	; (800eaf0 <vPortFree+0xac>)
 800ead2:	681b      	ldr	r3, [r3, #0]
 800ead4:	4413      	add	r3, r2
 800ead6:	4a06      	ldr	r2, [pc, #24]	; (800eaf0 <vPortFree+0xac>)
 800ead8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800eada:	6938      	ldr	r0, [r7, #16]
 800eadc:	f000 f86c 	bl	800ebb8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800eae0:	f001 fc96 	bl	8010410 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800eae4:	bf00      	nop
 800eae6:	3718      	adds	r7, #24
 800eae8:	46bd      	mov	sp, r7
 800eaea:	bd80      	pop	{r7, pc}
 800eaec:	200059d4 	.word	0x200059d4
 800eaf0:	200059cc 	.word	0x200059cc

0800eaf4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800eaf4:	b480      	push	{r7}
 800eaf6:	b085      	sub	sp, #20
 800eaf8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800eafa:	f44f 537a 	mov.w	r3, #16000	; 0x3e80
 800eafe:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800eb00:	4b27      	ldr	r3, [pc, #156]	; (800eba0 <prvHeapInit+0xac>)
 800eb02:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800eb04:	68fb      	ldr	r3, [r7, #12]
 800eb06:	f003 0307 	and.w	r3, r3, #7
 800eb0a:	2b00      	cmp	r3, #0
 800eb0c:	d00c      	beq.n	800eb28 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800eb0e:	68fb      	ldr	r3, [r7, #12]
 800eb10:	3307      	adds	r3, #7
 800eb12:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800eb14:	68fb      	ldr	r3, [r7, #12]
 800eb16:	f023 0307 	bic.w	r3, r3, #7
 800eb1a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800eb1c:	68ba      	ldr	r2, [r7, #8]
 800eb1e:	68fb      	ldr	r3, [r7, #12]
 800eb20:	1ad3      	subs	r3, r2, r3
 800eb22:	4a1f      	ldr	r2, [pc, #124]	; (800eba0 <prvHeapInit+0xac>)
 800eb24:	4413      	add	r3, r2
 800eb26:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800eb28:	68fb      	ldr	r3, [r7, #12]
 800eb2a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800eb2c:	4a1d      	ldr	r2, [pc, #116]	; (800eba4 <prvHeapInit+0xb0>)
 800eb2e:	687b      	ldr	r3, [r7, #4]
 800eb30:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800eb32:	4b1c      	ldr	r3, [pc, #112]	; (800eba4 <prvHeapInit+0xb0>)
 800eb34:	2200      	movs	r2, #0
 800eb36:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800eb38:	687b      	ldr	r3, [r7, #4]
 800eb3a:	68ba      	ldr	r2, [r7, #8]
 800eb3c:	4413      	add	r3, r2
 800eb3e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800eb40:	2208      	movs	r2, #8
 800eb42:	68fb      	ldr	r3, [r7, #12]
 800eb44:	1a9b      	subs	r3, r3, r2
 800eb46:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800eb48:	68fb      	ldr	r3, [r7, #12]
 800eb4a:	f023 0307 	bic.w	r3, r3, #7
 800eb4e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800eb50:	68fb      	ldr	r3, [r7, #12]
 800eb52:	4a15      	ldr	r2, [pc, #84]	; (800eba8 <prvHeapInit+0xb4>)
 800eb54:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800eb56:	4b14      	ldr	r3, [pc, #80]	; (800eba8 <prvHeapInit+0xb4>)
 800eb58:	681b      	ldr	r3, [r3, #0]
 800eb5a:	2200      	movs	r2, #0
 800eb5c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800eb5e:	4b12      	ldr	r3, [pc, #72]	; (800eba8 <prvHeapInit+0xb4>)
 800eb60:	681b      	ldr	r3, [r3, #0]
 800eb62:	2200      	movs	r2, #0
 800eb64:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800eb66:	687b      	ldr	r3, [r7, #4]
 800eb68:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800eb6a:	683b      	ldr	r3, [r7, #0]
 800eb6c:	68fa      	ldr	r2, [r7, #12]
 800eb6e:	1ad2      	subs	r2, r2, r3
 800eb70:	683b      	ldr	r3, [r7, #0]
 800eb72:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800eb74:	4b0c      	ldr	r3, [pc, #48]	; (800eba8 <prvHeapInit+0xb4>)
 800eb76:	681a      	ldr	r2, [r3, #0]
 800eb78:	683b      	ldr	r3, [r7, #0]
 800eb7a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800eb7c:	683b      	ldr	r3, [r7, #0]
 800eb7e:	685b      	ldr	r3, [r3, #4]
 800eb80:	4a0a      	ldr	r2, [pc, #40]	; (800ebac <prvHeapInit+0xb8>)
 800eb82:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800eb84:	683b      	ldr	r3, [r7, #0]
 800eb86:	685b      	ldr	r3, [r3, #4]
 800eb88:	4a09      	ldr	r2, [pc, #36]	; (800ebb0 <prvHeapInit+0xbc>)
 800eb8a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800eb8c:	4b09      	ldr	r3, [pc, #36]	; (800ebb4 <prvHeapInit+0xc0>)
 800eb8e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800eb92:	601a      	str	r2, [r3, #0]
}
 800eb94:	bf00      	nop
 800eb96:	3714      	adds	r7, #20
 800eb98:	46bd      	mov	sp, r7
 800eb9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb9e:	4770      	bx	lr
 800eba0:	20001b40 	.word	0x20001b40
 800eba4:	200059c0 	.word	0x200059c0
 800eba8:	200059c8 	.word	0x200059c8
 800ebac:	200059d0 	.word	0x200059d0
 800ebb0:	200059cc 	.word	0x200059cc
 800ebb4:	200059d4 	.word	0x200059d4

0800ebb8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800ebb8:	b480      	push	{r7}
 800ebba:	b085      	sub	sp, #20
 800ebbc:	af00      	add	r7, sp, #0
 800ebbe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800ebc0:	4b28      	ldr	r3, [pc, #160]	; (800ec64 <prvInsertBlockIntoFreeList+0xac>)
 800ebc2:	60fb      	str	r3, [r7, #12]
 800ebc4:	e002      	b.n	800ebcc <prvInsertBlockIntoFreeList+0x14>
 800ebc6:	68fb      	ldr	r3, [r7, #12]
 800ebc8:	681b      	ldr	r3, [r3, #0]
 800ebca:	60fb      	str	r3, [r7, #12]
 800ebcc:	68fb      	ldr	r3, [r7, #12]
 800ebce:	681b      	ldr	r3, [r3, #0]
 800ebd0:	687a      	ldr	r2, [r7, #4]
 800ebd2:	429a      	cmp	r2, r3
 800ebd4:	d8f7      	bhi.n	800ebc6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800ebd6:	68fb      	ldr	r3, [r7, #12]
 800ebd8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800ebda:	68fb      	ldr	r3, [r7, #12]
 800ebdc:	685b      	ldr	r3, [r3, #4]
 800ebde:	68ba      	ldr	r2, [r7, #8]
 800ebe0:	4413      	add	r3, r2
 800ebe2:	687a      	ldr	r2, [r7, #4]
 800ebe4:	429a      	cmp	r2, r3
 800ebe6:	d108      	bne.n	800ebfa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800ebe8:	68fb      	ldr	r3, [r7, #12]
 800ebea:	685a      	ldr	r2, [r3, #4]
 800ebec:	687b      	ldr	r3, [r7, #4]
 800ebee:	685b      	ldr	r3, [r3, #4]
 800ebf0:	441a      	add	r2, r3
 800ebf2:	68fb      	ldr	r3, [r7, #12]
 800ebf4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800ebf6:	68fb      	ldr	r3, [r7, #12]
 800ebf8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800ebfa:	687b      	ldr	r3, [r7, #4]
 800ebfc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800ebfe:	687b      	ldr	r3, [r7, #4]
 800ec00:	685b      	ldr	r3, [r3, #4]
 800ec02:	68ba      	ldr	r2, [r7, #8]
 800ec04:	441a      	add	r2, r3
 800ec06:	68fb      	ldr	r3, [r7, #12]
 800ec08:	681b      	ldr	r3, [r3, #0]
 800ec0a:	429a      	cmp	r2, r3
 800ec0c:	d118      	bne.n	800ec40 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800ec0e:	68fb      	ldr	r3, [r7, #12]
 800ec10:	681a      	ldr	r2, [r3, #0]
 800ec12:	4b15      	ldr	r3, [pc, #84]	; (800ec68 <prvInsertBlockIntoFreeList+0xb0>)
 800ec14:	681b      	ldr	r3, [r3, #0]
 800ec16:	429a      	cmp	r2, r3
 800ec18:	d00d      	beq.n	800ec36 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800ec1a:	687b      	ldr	r3, [r7, #4]
 800ec1c:	685a      	ldr	r2, [r3, #4]
 800ec1e:	68fb      	ldr	r3, [r7, #12]
 800ec20:	681b      	ldr	r3, [r3, #0]
 800ec22:	685b      	ldr	r3, [r3, #4]
 800ec24:	441a      	add	r2, r3
 800ec26:	687b      	ldr	r3, [r7, #4]
 800ec28:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800ec2a:	68fb      	ldr	r3, [r7, #12]
 800ec2c:	681b      	ldr	r3, [r3, #0]
 800ec2e:	681a      	ldr	r2, [r3, #0]
 800ec30:	687b      	ldr	r3, [r7, #4]
 800ec32:	601a      	str	r2, [r3, #0]
 800ec34:	e008      	b.n	800ec48 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800ec36:	4b0c      	ldr	r3, [pc, #48]	; (800ec68 <prvInsertBlockIntoFreeList+0xb0>)
 800ec38:	681a      	ldr	r2, [r3, #0]
 800ec3a:	687b      	ldr	r3, [r7, #4]
 800ec3c:	601a      	str	r2, [r3, #0]
 800ec3e:	e003      	b.n	800ec48 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800ec40:	68fb      	ldr	r3, [r7, #12]
 800ec42:	681a      	ldr	r2, [r3, #0]
 800ec44:	687b      	ldr	r3, [r7, #4]
 800ec46:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800ec48:	68fa      	ldr	r2, [r7, #12]
 800ec4a:	687b      	ldr	r3, [r7, #4]
 800ec4c:	429a      	cmp	r2, r3
 800ec4e:	d002      	beq.n	800ec56 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800ec50:	68fb      	ldr	r3, [r7, #12]
 800ec52:	687a      	ldr	r2, [r7, #4]
 800ec54:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ec56:	bf00      	nop
 800ec58:	3714      	adds	r7, #20
 800ec5a:	46bd      	mov	sp, r7
 800ec5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec60:	4770      	bx	lr
 800ec62:	bf00      	nop
 800ec64:	200059c0 	.word	0x200059c0
 800ec68:	200059c8 	.word	0x200059c8

0800ec6c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800ec6c:	b480      	push	{r7}
 800ec6e:	b083      	sub	sp, #12
 800ec70:	af00      	add	r7, sp, #0
 800ec72:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ec74:	687b      	ldr	r3, [r7, #4]
 800ec76:	f103 0208 	add.w	r2, r3, #8
 800ec7a:	687b      	ldr	r3, [r7, #4]
 800ec7c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800ec7e:	687b      	ldr	r3, [r7, #4]
 800ec80:	f04f 32ff 	mov.w	r2, #4294967295
 800ec84:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ec86:	687b      	ldr	r3, [r7, #4]
 800ec88:	f103 0208 	add.w	r2, r3, #8
 800ec8c:	687b      	ldr	r3, [r7, #4]
 800ec8e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ec90:	687b      	ldr	r3, [r7, #4]
 800ec92:	f103 0208 	add.w	r2, r3, #8
 800ec96:	687b      	ldr	r3, [r7, #4]
 800ec98:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800ec9a:	687b      	ldr	r3, [r7, #4]
 800ec9c:	2200      	movs	r2, #0
 800ec9e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800eca0:	bf00      	nop
 800eca2:	370c      	adds	r7, #12
 800eca4:	46bd      	mov	sp, r7
 800eca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecaa:	4770      	bx	lr

0800ecac <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800ecac:	b480      	push	{r7}
 800ecae:	b083      	sub	sp, #12
 800ecb0:	af00      	add	r7, sp, #0
 800ecb2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800ecb4:	687b      	ldr	r3, [r7, #4]
 800ecb6:	2200      	movs	r2, #0
 800ecb8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800ecba:	bf00      	nop
 800ecbc:	370c      	adds	r7, #12
 800ecbe:	46bd      	mov	sp, r7
 800ecc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecc4:	4770      	bx	lr

0800ecc6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800ecc6:	b480      	push	{r7}
 800ecc8:	b085      	sub	sp, #20
 800ecca:	af00      	add	r7, sp, #0
 800eccc:	6078      	str	r0, [r7, #4]
 800ecce:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800ecd0:	687b      	ldr	r3, [r7, #4]
 800ecd2:	685b      	ldr	r3, [r3, #4]
 800ecd4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800ecd6:	683b      	ldr	r3, [r7, #0]
 800ecd8:	68fa      	ldr	r2, [r7, #12]
 800ecda:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800ecdc:	68fb      	ldr	r3, [r7, #12]
 800ecde:	689a      	ldr	r2, [r3, #8]
 800ece0:	683b      	ldr	r3, [r7, #0]
 800ece2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800ece4:	68fb      	ldr	r3, [r7, #12]
 800ece6:	689b      	ldr	r3, [r3, #8]
 800ece8:	683a      	ldr	r2, [r7, #0]
 800ecea:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800ecec:	68fb      	ldr	r3, [r7, #12]
 800ecee:	683a      	ldr	r2, [r7, #0]
 800ecf0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800ecf2:	683b      	ldr	r3, [r7, #0]
 800ecf4:	687a      	ldr	r2, [r7, #4]
 800ecf6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800ecf8:	687b      	ldr	r3, [r7, #4]
 800ecfa:	681b      	ldr	r3, [r3, #0]
 800ecfc:	1c5a      	adds	r2, r3, #1
 800ecfe:	687b      	ldr	r3, [r7, #4]
 800ed00:	601a      	str	r2, [r3, #0]
}
 800ed02:	bf00      	nop
 800ed04:	3714      	adds	r7, #20
 800ed06:	46bd      	mov	sp, r7
 800ed08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed0c:	4770      	bx	lr

0800ed0e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800ed0e:	b480      	push	{r7}
 800ed10:	b085      	sub	sp, #20
 800ed12:	af00      	add	r7, sp, #0
 800ed14:	6078      	str	r0, [r7, #4]
 800ed16:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800ed18:	683b      	ldr	r3, [r7, #0]
 800ed1a:	681b      	ldr	r3, [r3, #0]
 800ed1c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800ed1e:	68bb      	ldr	r3, [r7, #8]
 800ed20:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ed24:	d103      	bne.n	800ed2e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800ed26:	687b      	ldr	r3, [r7, #4]
 800ed28:	691b      	ldr	r3, [r3, #16]
 800ed2a:	60fb      	str	r3, [r7, #12]
 800ed2c:	e00c      	b.n	800ed48 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800ed2e:	687b      	ldr	r3, [r7, #4]
 800ed30:	3308      	adds	r3, #8
 800ed32:	60fb      	str	r3, [r7, #12]
 800ed34:	e002      	b.n	800ed3c <vListInsert+0x2e>
 800ed36:	68fb      	ldr	r3, [r7, #12]
 800ed38:	685b      	ldr	r3, [r3, #4]
 800ed3a:	60fb      	str	r3, [r7, #12]
 800ed3c:	68fb      	ldr	r3, [r7, #12]
 800ed3e:	685b      	ldr	r3, [r3, #4]
 800ed40:	681b      	ldr	r3, [r3, #0]
 800ed42:	68ba      	ldr	r2, [r7, #8]
 800ed44:	429a      	cmp	r2, r3
 800ed46:	d2f6      	bcs.n	800ed36 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800ed48:	68fb      	ldr	r3, [r7, #12]
 800ed4a:	685a      	ldr	r2, [r3, #4]
 800ed4c:	683b      	ldr	r3, [r7, #0]
 800ed4e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800ed50:	683b      	ldr	r3, [r7, #0]
 800ed52:	685b      	ldr	r3, [r3, #4]
 800ed54:	683a      	ldr	r2, [r7, #0]
 800ed56:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800ed58:	683b      	ldr	r3, [r7, #0]
 800ed5a:	68fa      	ldr	r2, [r7, #12]
 800ed5c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800ed5e:	68fb      	ldr	r3, [r7, #12]
 800ed60:	683a      	ldr	r2, [r7, #0]
 800ed62:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800ed64:	683b      	ldr	r3, [r7, #0]
 800ed66:	687a      	ldr	r2, [r7, #4]
 800ed68:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800ed6a:	687b      	ldr	r3, [r7, #4]
 800ed6c:	681b      	ldr	r3, [r3, #0]
 800ed6e:	1c5a      	adds	r2, r3, #1
 800ed70:	687b      	ldr	r3, [r7, #4]
 800ed72:	601a      	str	r2, [r3, #0]
}
 800ed74:	bf00      	nop
 800ed76:	3714      	adds	r7, #20
 800ed78:	46bd      	mov	sp, r7
 800ed7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed7e:	4770      	bx	lr

0800ed80 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800ed80:	b480      	push	{r7}
 800ed82:	b085      	sub	sp, #20
 800ed84:	af00      	add	r7, sp, #0
 800ed86:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800ed88:	687b      	ldr	r3, [r7, #4]
 800ed8a:	691b      	ldr	r3, [r3, #16]
 800ed8c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800ed8e:	687b      	ldr	r3, [r7, #4]
 800ed90:	685b      	ldr	r3, [r3, #4]
 800ed92:	687a      	ldr	r2, [r7, #4]
 800ed94:	6892      	ldr	r2, [r2, #8]
 800ed96:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800ed98:	687b      	ldr	r3, [r7, #4]
 800ed9a:	689b      	ldr	r3, [r3, #8]
 800ed9c:	687a      	ldr	r2, [r7, #4]
 800ed9e:	6852      	ldr	r2, [r2, #4]
 800eda0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800eda2:	68fb      	ldr	r3, [r7, #12]
 800eda4:	685b      	ldr	r3, [r3, #4]
 800eda6:	687a      	ldr	r2, [r7, #4]
 800eda8:	429a      	cmp	r2, r3
 800edaa:	d103      	bne.n	800edb4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800edac:	687b      	ldr	r3, [r7, #4]
 800edae:	689a      	ldr	r2, [r3, #8]
 800edb0:	68fb      	ldr	r3, [r7, #12]
 800edb2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800edb4:	687b      	ldr	r3, [r7, #4]
 800edb6:	2200      	movs	r2, #0
 800edb8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800edba:	68fb      	ldr	r3, [r7, #12]
 800edbc:	681b      	ldr	r3, [r3, #0]
 800edbe:	1e5a      	subs	r2, r3, #1
 800edc0:	68fb      	ldr	r3, [r7, #12]
 800edc2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800edc4:	68fb      	ldr	r3, [r7, #12]
 800edc6:	681b      	ldr	r3, [r3, #0]
}
 800edc8:	4618      	mov	r0, r3
 800edca:	3714      	adds	r7, #20
 800edcc:	46bd      	mov	sp, r7
 800edce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edd2:	4770      	bx	lr

0800edd4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800edd4:	b580      	push	{r7, lr}
 800edd6:	b084      	sub	sp, #16
 800edd8:	af00      	add	r7, sp, #0
 800edda:	6078      	str	r0, [r7, #4]
 800eddc:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800edde:	687b      	ldr	r3, [r7, #4]
 800ede0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800ede2:	68fb      	ldr	r3, [r7, #12]
 800ede4:	2b00      	cmp	r3, #0
 800ede6:	d109      	bne.n	800edfc <xQueueGenericReset+0x28>
 800ede8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800edec:	f383 8811 	msr	BASEPRI, r3
 800edf0:	f3bf 8f6f 	isb	sy
 800edf4:	f3bf 8f4f 	dsb	sy
 800edf8:	60bb      	str	r3, [r7, #8]
 800edfa:	e7fe      	b.n	800edfa <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 800edfc:	f7ff fc46 	bl	800e68c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ee00:	68fb      	ldr	r3, [r7, #12]
 800ee02:	681a      	ldr	r2, [r3, #0]
 800ee04:	68fb      	ldr	r3, [r7, #12]
 800ee06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ee08:	68f9      	ldr	r1, [r7, #12]
 800ee0a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800ee0c:	fb01 f303 	mul.w	r3, r1, r3
 800ee10:	441a      	add	r2, r3
 800ee12:	68fb      	ldr	r3, [r7, #12]
 800ee14:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800ee16:	68fb      	ldr	r3, [r7, #12]
 800ee18:	2200      	movs	r2, #0
 800ee1a:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800ee1c:	68fb      	ldr	r3, [r7, #12]
 800ee1e:	681a      	ldr	r2, [r3, #0]
 800ee20:	68fb      	ldr	r3, [r7, #12]
 800ee22:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ee24:	68fb      	ldr	r3, [r7, #12]
 800ee26:	681a      	ldr	r2, [r3, #0]
 800ee28:	68fb      	ldr	r3, [r7, #12]
 800ee2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ee2c:	3b01      	subs	r3, #1
 800ee2e:	68f9      	ldr	r1, [r7, #12]
 800ee30:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800ee32:	fb01 f303 	mul.w	r3, r1, r3
 800ee36:	441a      	add	r2, r3
 800ee38:	68fb      	ldr	r3, [r7, #12]
 800ee3a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800ee3c:	68fb      	ldr	r3, [r7, #12]
 800ee3e:	22ff      	movs	r2, #255	; 0xff
 800ee40:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800ee44:	68fb      	ldr	r3, [r7, #12]
 800ee46:	22ff      	movs	r2, #255	; 0xff
 800ee48:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800ee4c:	683b      	ldr	r3, [r7, #0]
 800ee4e:	2b00      	cmp	r3, #0
 800ee50:	d114      	bne.n	800ee7c <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ee52:	68fb      	ldr	r3, [r7, #12]
 800ee54:	691b      	ldr	r3, [r3, #16]
 800ee56:	2b00      	cmp	r3, #0
 800ee58:	d01a      	beq.n	800ee90 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ee5a:	68fb      	ldr	r3, [r7, #12]
 800ee5c:	3310      	adds	r3, #16
 800ee5e:	4618      	mov	r0, r3
 800ee60:	f001 fce4 	bl	801082c <xTaskRemoveFromEventList>
 800ee64:	4603      	mov	r3, r0
 800ee66:	2b00      	cmp	r3, #0
 800ee68:	d012      	beq.n	800ee90 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800ee6a:	4b0d      	ldr	r3, [pc, #52]	; (800eea0 <xQueueGenericReset+0xcc>)
 800ee6c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ee70:	601a      	str	r2, [r3, #0]
 800ee72:	f3bf 8f4f 	dsb	sy
 800ee76:	f3bf 8f6f 	isb	sy
 800ee7a:	e009      	b.n	800ee90 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800ee7c:	68fb      	ldr	r3, [r7, #12]
 800ee7e:	3310      	adds	r3, #16
 800ee80:	4618      	mov	r0, r3
 800ee82:	f7ff fef3 	bl	800ec6c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800ee86:	68fb      	ldr	r3, [r7, #12]
 800ee88:	3324      	adds	r3, #36	; 0x24
 800ee8a:	4618      	mov	r0, r3
 800ee8c:	f7ff feee 	bl	800ec6c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800ee90:	f7ff fc2a 	bl	800e6e8 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800ee94:	2301      	movs	r3, #1
}
 800ee96:	4618      	mov	r0, r3
 800ee98:	3710      	adds	r7, #16
 800ee9a:	46bd      	mov	sp, r7
 800ee9c:	bd80      	pop	{r7, pc}
 800ee9e:	bf00      	nop
 800eea0:	e000ed04 	.word	0xe000ed04

0800eea4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800eea4:	b580      	push	{r7, lr}
 800eea6:	b08e      	sub	sp, #56	; 0x38
 800eea8:	af02      	add	r7, sp, #8
 800eeaa:	60f8      	str	r0, [r7, #12]
 800eeac:	60b9      	str	r1, [r7, #8]
 800eeae:	607a      	str	r2, [r7, #4]
 800eeb0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800eeb2:	68fb      	ldr	r3, [r7, #12]
 800eeb4:	2b00      	cmp	r3, #0
 800eeb6:	d109      	bne.n	800eecc <xQueueGenericCreateStatic+0x28>
 800eeb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eebc:	f383 8811 	msr	BASEPRI, r3
 800eec0:	f3bf 8f6f 	isb	sy
 800eec4:	f3bf 8f4f 	dsb	sy
 800eec8:	62bb      	str	r3, [r7, #40]	; 0x28
 800eeca:	e7fe      	b.n	800eeca <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800eecc:	683b      	ldr	r3, [r7, #0]
 800eece:	2b00      	cmp	r3, #0
 800eed0:	d109      	bne.n	800eee6 <xQueueGenericCreateStatic+0x42>
 800eed2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eed6:	f383 8811 	msr	BASEPRI, r3
 800eeda:	f3bf 8f6f 	isb	sy
 800eede:	f3bf 8f4f 	dsb	sy
 800eee2:	627b      	str	r3, [r7, #36]	; 0x24
 800eee4:	e7fe      	b.n	800eee4 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800eee6:	687b      	ldr	r3, [r7, #4]
 800eee8:	2b00      	cmp	r3, #0
 800eeea:	d002      	beq.n	800eef2 <xQueueGenericCreateStatic+0x4e>
 800eeec:	68bb      	ldr	r3, [r7, #8]
 800eeee:	2b00      	cmp	r3, #0
 800eef0:	d001      	beq.n	800eef6 <xQueueGenericCreateStatic+0x52>
 800eef2:	2301      	movs	r3, #1
 800eef4:	e000      	b.n	800eef8 <xQueueGenericCreateStatic+0x54>
 800eef6:	2300      	movs	r3, #0
 800eef8:	2b00      	cmp	r3, #0
 800eefa:	d109      	bne.n	800ef10 <xQueueGenericCreateStatic+0x6c>
 800eefc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ef00:	f383 8811 	msr	BASEPRI, r3
 800ef04:	f3bf 8f6f 	isb	sy
 800ef08:	f3bf 8f4f 	dsb	sy
 800ef0c:	623b      	str	r3, [r7, #32]
 800ef0e:	e7fe      	b.n	800ef0e <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800ef10:	687b      	ldr	r3, [r7, #4]
 800ef12:	2b00      	cmp	r3, #0
 800ef14:	d102      	bne.n	800ef1c <xQueueGenericCreateStatic+0x78>
 800ef16:	68bb      	ldr	r3, [r7, #8]
 800ef18:	2b00      	cmp	r3, #0
 800ef1a:	d101      	bne.n	800ef20 <xQueueGenericCreateStatic+0x7c>
 800ef1c:	2301      	movs	r3, #1
 800ef1e:	e000      	b.n	800ef22 <xQueueGenericCreateStatic+0x7e>
 800ef20:	2300      	movs	r3, #0
 800ef22:	2b00      	cmp	r3, #0
 800ef24:	d109      	bne.n	800ef3a <xQueueGenericCreateStatic+0x96>
 800ef26:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ef2a:	f383 8811 	msr	BASEPRI, r3
 800ef2e:	f3bf 8f6f 	isb	sy
 800ef32:	f3bf 8f4f 	dsb	sy
 800ef36:	61fb      	str	r3, [r7, #28]
 800ef38:	e7fe      	b.n	800ef38 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800ef3a:	2350      	movs	r3, #80	; 0x50
 800ef3c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800ef3e:	697b      	ldr	r3, [r7, #20]
 800ef40:	2b50      	cmp	r3, #80	; 0x50
 800ef42:	d009      	beq.n	800ef58 <xQueueGenericCreateStatic+0xb4>
 800ef44:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ef48:	f383 8811 	msr	BASEPRI, r3
 800ef4c:	f3bf 8f6f 	isb	sy
 800ef50:	f3bf 8f4f 	dsb	sy
 800ef54:	61bb      	str	r3, [r7, #24]
 800ef56:	e7fe      	b.n	800ef56 <xQueueGenericCreateStatic+0xb2>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800ef58:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800ef5a:	683b      	ldr	r3, [r7, #0]
 800ef5c:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800ef5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef60:	2b00      	cmp	r3, #0
 800ef62:	d00d      	beq.n	800ef80 <xQueueGenericCreateStatic+0xdc>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800ef64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef66:	2201      	movs	r2, #1
 800ef68:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800ef6c:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800ef70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef72:	9300      	str	r3, [sp, #0]
 800ef74:	4613      	mov	r3, r2
 800ef76:	687a      	ldr	r2, [r7, #4]
 800ef78:	68b9      	ldr	r1, [r7, #8]
 800ef7a:	68f8      	ldr	r0, [r7, #12]
 800ef7c:	f000 f844 	bl	800f008 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800ef80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800ef82:	4618      	mov	r0, r3
 800ef84:	3730      	adds	r7, #48	; 0x30
 800ef86:	46bd      	mov	sp, r7
 800ef88:	bd80      	pop	{r7, pc}

0800ef8a <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800ef8a:	b580      	push	{r7, lr}
 800ef8c:	b08a      	sub	sp, #40	; 0x28
 800ef8e:	af02      	add	r7, sp, #8
 800ef90:	60f8      	str	r0, [r7, #12]
 800ef92:	60b9      	str	r1, [r7, #8]
 800ef94:	4613      	mov	r3, r2
 800ef96:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800ef98:	68fb      	ldr	r3, [r7, #12]
 800ef9a:	2b00      	cmp	r3, #0
 800ef9c:	d109      	bne.n	800efb2 <xQueueGenericCreate+0x28>
 800ef9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800efa2:	f383 8811 	msr	BASEPRI, r3
 800efa6:	f3bf 8f6f 	isb	sy
 800efaa:	f3bf 8f4f 	dsb	sy
 800efae:	613b      	str	r3, [r7, #16]
 800efb0:	e7fe      	b.n	800efb0 <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800efb2:	68bb      	ldr	r3, [r7, #8]
 800efb4:	2b00      	cmp	r3, #0
 800efb6:	d102      	bne.n	800efbe <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800efb8:	2300      	movs	r3, #0
 800efba:	61fb      	str	r3, [r7, #28]
 800efbc:	e004      	b.n	800efc8 <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800efbe:	68fb      	ldr	r3, [r7, #12]
 800efc0:	68ba      	ldr	r2, [r7, #8]
 800efc2:	fb02 f303 	mul.w	r3, r2, r3
 800efc6:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800efc8:	69fb      	ldr	r3, [r7, #28]
 800efca:	3350      	adds	r3, #80	; 0x50
 800efcc:	4618      	mov	r0, r3
 800efce:	f7ff fc77 	bl	800e8c0 <pvPortMalloc>
 800efd2:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800efd4:	69bb      	ldr	r3, [r7, #24]
 800efd6:	2b00      	cmp	r3, #0
 800efd8:	d011      	beq.n	800effe <xQueueGenericCreate+0x74>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800efda:	69bb      	ldr	r3, [r7, #24]
 800efdc:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800efde:	697b      	ldr	r3, [r7, #20]
 800efe0:	3350      	adds	r3, #80	; 0x50
 800efe2:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800efe4:	69bb      	ldr	r3, [r7, #24]
 800efe6:	2200      	movs	r2, #0
 800efe8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800efec:	79fa      	ldrb	r2, [r7, #7]
 800efee:	69bb      	ldr	r3, [r7, #24]
 800eff0:	9300      	str	r3, [sp, #0]
 800eff2:	4613      	mov	r3, r2
 800eff4:	697a      	ldr	r2, [r7, #20]
 800eff6:	68b9      	ldr	r1, [r7, #8]
 800eff8:	68f8      	ldr	r0, [r7, #12]
 800effa:	f000 f805 	bl	800f008 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800effe:	69bb      	ldr	r3, [r7, #24]
	}
 800f000:	4618      	mov	r0, r3
 800f002:	3720      	adds	r7, #32
 800f004:	46bd      	mov	sp, r7
 800f006:	bd80      	pop	{r7, pc}

0800f008 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800f008:	b580      	push	{r7, lr}
 800f00a:	b084      	sub	sp, #16
 800f00c:	af00      	add	r7, sp, #0
 800f00e:	60f8      	str	r0, [r7, #12]
 800f010:	60b9      	str	r1, [r7, #8]
 800f012:	607a      	str	r2, [r7, #4]
 800f014:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800f016:	68bb      	ldr	r3, [r7, #8]
 800f018:	2b00      	cmp	r3, #0
 800f01a:	d103      	bne.n	800f024 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800f01c:	69bb      	ldr	r3, [r7, #24]
 800f01e:	69ba      	ldr	r2, [r7, #24]
 800f020:	601a      	str	r2, [r3, #0]
 800f022:	e002      	b.n	800f02a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800f024:	69bb      	ldr	r3, [r7, #24]
 800f026:	687a      	ldr	r2, [r7, #4]
 800f028:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800f02a:	69bb      	ldr	r3, [r7, #24]
 800f02c:	68fa      	ldr	r2, [r7, #12]
 800f02e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800f030:	69bb      	ldr	r3, [r7, #24]
 800f032:	68ba      	ldr	r2, [r7, #8]
 800f034:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800f036:	2101      	movs	r1, #1
 800f038:	69b8      	ldr	r0, [r7, #24]
 800f03a:	f7ff fecb 	bl	800edd4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800f03e:	69bb      	ldr	r3, [r7, #24]
 800f040:	78fa      	ldrb	r2, [r7, #3]
 800f042:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800f046:	bf00      	nop
 800f048:	3710      	adds	r7, #16
 800f04a:	46bd      	mov	sp, r7
 800f04c:	bd80      	pop	{r7, pc}

0800f04e <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800f04e:	b580      	push	{r7, lr}
 800f050:	b082      	sub	sp, #8
 800f052:	af00      	add	r7, sp, #0
 800f054:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800f056:	687b      	ldr	r3, [r7, #4]
 800f058:	2b00      	cmp	r3, #0
 800f05a:	d00e      	beq.n	800f07a <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800f05c:	687b      	ldr	r3, [r7, #4]
 800f05e:	2200      	movs	r2, #0
 800f060:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800f062:	687b      	ldr	r3, [r7, #4]
 800f064:	2200      	movs	r2, #0
 800f066:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800f068:	687b      	ldr	r3, [r7, #4]
 800f06a:	2200      	movs	r2, #0
 800f06c:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800f06e:	2300      	movs	r3, #0
 800f070:	2200      	movs	r2, #0
 800f072:	2100      	movs	r1, #0
 800f074:	6878      	ldr	r0, [r7, #4]
 800f076:	f000 f905 	bl	800f284 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800f07a:	bf00      	nop
 800f07c:	3708      	adds	r7, #8
 800f07e:	46bd      	mov	sp, r7
 800f080:	bd80      	pop	{r7, pc}

0800f082 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800f082:	b580      	push	{r7, lr}
 800f084:	b086      	sub	sp, #24
 800f086:	af00      	add	r7, sp, #0
 800f088:	4603      	mov	r3, r0
 800f08a:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800f08c:	2301      	movs	r3, #1
 800f08e:	617b      	str	r3, [r7, #20]
 800f090:	2300      	movs	r3, #0
 800f092:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800f094:	79fb      	ldrb	r3, [r7, #7]
 800f096:	461a      	mov	r2, r3
 800f098:	6939      	ldr	r1, [r7, #16]
 800f09a:	6978      	ldr	r0, [r7, #20]
 800f09c:	f7ff ff75 	bl	800ef8a <xQueueGenericCreate>
 800f0a0:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800f0a2:	68f8      	ldr	r0, [r7, #12]
 800f0a4:	f7ff ffd3 	bl	800f04e <prvInitialiseMutex>

		return xNewQueue;
 800f0a8:	68fb      	ldr	r3, [r7, #12]
	}
 800f0aa:	4618      	mov	r0, r3
 800f0ac:	3718      	adds	r7, #24
 800f0ae:	46bd      	mov	sp, r7
 800f0b0:	bd80      	pop	{r7, pc}

0800f0b2 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800f0b2:	b580      	push	{r7, lr}
 800f0b4:	b088      	sub	sp, #32
 800f0b6:	af02      	add	r7, sp, #8
 800f0b8:	4603      	mov	r3, r0
 800f0ba:	6039      	str	r1, [r7, #0]
 800f0bc:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800f0be:	2301      	movs	r3, #1
 800f0c0:	617b      	str	r3, [r7, #20]
 800f0c2:	2300      	movs	r3, #0
 800f0c4:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800f0c6:	79fb      	ldrb	r3, [r7, #7]
 800f0c8:	9300      	str	r3, [sp, #0]
 800f0ca:	683b      	ldr	r3, [r7, #0]
 800f0cc:	2200      	movs	r2, #0
 800f0ce:	6939      	ldr	r1, [r7, #16]
 800f0d0:	6978      	ldr	r0, [r7, #20]
 800f0d2:	f7ff fee7 	bl	800eea4 <xQueueGenericCreateStatic>
 800f0d6:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800f0d8:	68f8      	ldr	r0, [r7, #12]
 800f0da:	f7ff ffb8 	bl	800f04e <prvInitialiseMutex>

		return xNewQueue;
 800f0de:	68fb      	ldr	r3, [r7, #12]
	}
 800f0e0:	4618      	mov	r0, r3
 800f0e2:	3718      	adds	r7, #24
 800f0e4:	46bd      	mov	sp, r7
 800f0e6:	bd80      	pop	{r7, pc}

0800f0e8 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 800f0e8:	b590      	push	{r4, r7, lr}
 800f0ea:	b087      	sub	sp, #28
 800f0ec:	af00      	add	r7, sp, #0
 800f0ee:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800f0f0:	687b      	ldr	r3, [r7, #4]
 800f0f2:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800f0f4:	693b      	ldr	r3, [r7, #16]
 800f0f6:	2b00      	cmp	r3, #0
 800f0f8:	d109      	bne.n	800f10e <xQueueGiveMutexRecursive+0x26>
 800f0fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f0fe:	f383 8811 	msr	BASEPRI, r3
 800f102:	f3bf 8f6f 	isb	sy
 800f106:	f3bf 8f4f 	dsb	sy
 800f10a:	60fb      	str	r3, [r7, #12]
 800f10c:	e7fe      	b.n	800f10c <xQueueGiveMutexRecursive+0x24>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800f10e:	693b      	ldr	r3, [r7, #16]
 800f110:	689c      	ldr	r4, [r3, #8]
 800f112:	f001 fd69 	bl	8010be8 <xTaskGetCurrentTaskHandle>
 800f116:	4603      	mov	r3, r0
 800f118:	429c      	cmp	r4, r3
 800f11a:	d111      	bne.n	800f140 <xQueueGiveMutexRecursive+0x58>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 800f11c:	693b      	ldr	r3, [r7, #16]
 800f11e:	68db      	ldr	r3, [r3, #12]
 800f120:	1e5a      	subs	r2, r3, #1
 800f122:	693b      	ldr	r3, [r7, #16]
 800f124:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 800f126:	693b      	ldr	r3, [r7, #16]
 800f128:	68db      	ldr	r3, [r3, #12]
 800f12a:	2b00      	cmp	r3, #0
 800f12c:	d105      	bne.n	800f13a <xQueueGiveMutexRecursive+0x52>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 800f12e:	2300      	movs	r3, #0
 800f130:	2200      	movs	r2, #0
 800f132:	2100      	movs	r1, #0
 800f134:	6938      	ldr	r0, [r7, #16]
 800f136:	f000 f8a5 	bl	800f284 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 800f13a:	2301      	movs	r3, #1
 800f13c:	617b      	str	r3, [r7, #20]
 800f13e:	e001      	b.n	800f144 <xQueueGiveMutexRecursive+0x5c>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 800f140:	2300      	movs	r3, #0
 800f142:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 800f144:	697b      	ldr	r3, [r7, #20]
	}
 800f146:	4618      	mov	r0, r3
 800f148:	371c      	adds	r7, #28
 800f14a:	46bd      	mov	sp, r7
 800f14c:	bd90      	pop	{r4, r7, pc}

0800f14e <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 800f14e:	b590      	push	{r4, r7, lr}
 800f150:	b087      	sub	sp, #28
 800f152:	af00      	add	r7, sp, #0
 800f154:	6078      	str	r0, [r7, #4]
 800f156:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800f158:	687b      	ldr	r3, [r7, #4]
 800f15a:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800f15c:	693b      	ldr	r3, [r7, #16]
 800f15e:	2b00      	cmp	r3, #0
 800f160:	d109      	bne.n	800f176 <xQueueTakeMutexRecursive+0x28>
 800f162:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f166:	f383 8811 	msr	BASEPRI, r3
 800f16a:	f3bf 8f6f 	isb	sy
 800f16e:	f3bf 8f4f 	dsb	sy
 800f172:	60fb      	str	r3, [r7, #12]
 800f174:	e7fe      	b.n	800f174 <xQueueTakeMutexRecursive+0x26>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800f176:	693b      	ldr	r3, [r7, #16]
 800f178:	689c      	ldr	r4, [r3, #8]
 800f17a:	f001 fd35 	bl	8010be8 <xTaskGetCurrentTaskHandle>
 800f17e:	4603      	mov	r3, r0
 800f180:	429c      	cmp	r4, r3
 800f182:	d107      	bne.n	800f194 <xQueueTakeMutexRecursive+0x46>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800f184:	693b      	ldr	r3, [r7, #16]
 800f186:	68db      	ldr	r3, [r3, #12]
 800f188:	1c5a      	adds	r2, r3, #1
 800f18a:	693b      	ldr	r3, [r7, #16]
 800f18c:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 800f18e:	2301      	movs	r3, #1
 800f190:	617b      	str	r3, [r7, #20]
 800f192:	e00c      	b.n	800f1ae <xQueueTakeMutexRecursive+0x60>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 800f194:	6839      	ldr	r1, [r7, #0]
 800f196:	6938      	ldr	r0, [r7, #16]
 800f198:	f000 fb68 	bl	800f86c <xQueueSemaphoreTake>
 800f19c:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 800f19e:	697b      	ldr	r3, [r7, #20]
 800f1a0:	2b00      	cmp	r3, #0
 800f1a2:	d004      	beq.n	800f1ae <xQueueTakeMutexRecursive+0x60>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800f1a4:	693b      	ldr	r3, [r7, #16]
 800f1a6:	68db      	ldr	r3, [r3, #12]
 800f1a8:	1c5a      	adds	r2, r3, #1
 800f1aa:	693b      	ldr	r3, [r7, #16]
 800f1ac:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 800f1ae:	697b      	ldr	r3, [r7, #20]
	}
 800f1b0:	4618      	mov	r0, r3
 800f1b2:	371c      	adds	r7, #28
 800f1b4:	46bd      	mov	sp, r7
 800f1b6:	bd90      	pop	{r4, r7, pc}

0800f1b8 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 800f1b8:	b580      	push	{r7, lr}
 800f1ba:	b08a      	sub	sp, #40	; 0x28
 800f1bc:	af02      	add	r7, sp, #8
 800f1be:	60f8      	str	r0, [r7, #12]
 800f1c0:	60b9      	str	r1, [r7, #8]
 800f1c2:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800f1c4:	68fb      	ldr	r3, [r7, #12]
 800f1c6:	2b00      	cmp	r3, #0
 800f1c8:	d109      	bne.n	800f1de <xQueueCreateCountingSemaphoreStatic+0x26>
 800f1ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f1ce:	f383 8811 	msr	BASEPRI, r3
 800f1d2:	f3bf 8f6f 	isb	sy
 800f1d6:	f3bf 8f4f 	dsb	sy
 800f1da:	61bb      	str	r3, [r7, #24]
 800f1dc:	e7fe      	b.n	800f1dc <xQueueCreateCountingSemaphoreStatic+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 800f1de:	68ba      	ldr	r2, [r7, #8]
 800f1e0:	68fb      	ldr	r3, [r7, #12]
 800f1e2:	429a      	cmp	r2, r3
 800f1e4:	d909      	bls.n	800f1fa <xQueueCreateCountingSemaphoreStatic+0x42>
 800f1e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f1ea:	f383 8811 	msr	BASEPRI, r3
 800f1ee:	f3bf 8f6f 	isb	sy
 800f1f2:	f3bf 8f4f 	dsb	sy
 800f1f6:	617b      	str	r3, [r7, #20]
 800f1f8:	e7fe      	b.n	800f1f8 <xQueueCreateCountingSemaphoreStatic+0x40>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800f1fa:	2302      	movs	r3, #2
 800f1fc:	9300      	str	r3, [sp, #0]
 800f1fe:	687b      	ldr	r3, [r7, #4]
 800f200:	2200      	movs	r2, #0
 800f202:	2100      	movs	r1, #0
 800f204:	68f8      	ldr	r0, [r7, #12]
 800f206:	f7ff fe4d 	bl	800eea4 <xQueueGenericCreateStatic>
 800f20a:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800f20c:	69fb      	ldr	r3, [r7, #28]
 800f20e:	2b00      	cmp	r3, #0
 800f210:	d002      	beq.n	800f218 <xQueueCreateCountingSemaphoreStatic+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800f212:	69fb      	ldr	r3, [r7, #28]
 800f214:	68ba      	ldr	r2, [r7, #8]
 800f216:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800f218:	69fb      	ldr	r3, [r7, #28]
	}
 800f21a:	4618      	mov	r0, r3
 800f21c:	3720      	adds	r7, #32
 800f21e:	46bd      	mov	sp, r7
 800f220:	bd80      	pop	{r7, pc}

0800f222 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800f222:	b580      	push	{r7, lr}
 800f224:	b086      	sub	sp, #24
 800f226:	af00      	add	r7, sp, #0
 800f228:	6078      	str	r0, [r7, #4]
 800f22a:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800f22c:	687b      	ldr	r3, [r7, #4]
 800f22e:	2b00      	cmp	r3, #0
 800f230:	d109      	bne.n	800f246 <xQueueCreateCountingSemaphore+0x24>
 800f232:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f236:	f383 8811 	msr	BASEPRI, r3
 800f23a:	f3bf 8f6f 	isb	sy
 800f23e:	f3bf 8f4f 	dsb	sy
 800f242:	613b      	str	r3, [r7, #16]
 800f244:	e7fe      	b.n	800f244 <xQueueCreateCountingSemaphore+0x22>
		configASSERT( uxInitialCount <= uxMaxCount );
 800f246:	683a      	ldr	r2, [r7, #0]
 800f248:	687b      	ldr	r3, [r7, #4]
 800f24a:	429a      	cmp	r2, r3
 800f24c:	d909      	bls.n	800f262 <xQueueCreateCountingSemaphore+0x40>
 800f24e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f252:	f383 8811 	msr	BASEPRI, r3
 800f256:	f3bf 8f6f 	isb	sy
 800f25a:	f3bf 8f4f 	dsb	sy
 800f25e:	60fb      	str	r3, [r7, #12]
 800f260:	e7fe      	b.n	800f260 <xQueueCreateCountingSemaphore+0x3e>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800f262:	2202      	movs	r2, #2
 800f264:	2100      	movs	r1, #0
 800f266:	6878      	ldr	r0, [r7, #4]
 800f268:	f7ff fe8f 	bl	800ef8a <xQueueGenericCreate>
 800f26c:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800f26e:	697b      	ldr	r3, [r7, #20]
 800f270:	2b00      	cmp	r3, #0
 800f272:	d002      	beq.n	800f27a <xQueueCreateCountingSemaphore+0x58>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800f274:	697b      	ldr	r3, [r7, #20]
 800f276:	683a      	ldr	r2, [r7, #0]
 800f278:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800f27a:	697b      	ldr	r3, [r7, #20]
	}
 800f27c:	4618      	mov	r0, r3
 800f27e:	3718      	adds	r7, #24
 800f280:	46bd      	mov	sp, r7
 800f282:	bd80      	pop	{r7, pc}

0800f284 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800f284:	b580      	push	{r7, lr}
 800f286:	b08e      	sub	sp, #56	; 0x38
 800f288:	af00      	add	r7, sp, #0
 800f28a:	60f8      	str	r0, [r7, #12]
 800f28c:	60b9      	str	r1, [r7, #8]
 800f28e:	607a      	str	r2, [r7, #4]
 800f290:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800f292:	2300      	movs	r3, #0
 800f294:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800f296:	68fb      	ldr	r3, [r7, #12]
 800f298:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800f29a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f29c:	2b00      	cmp	r3, #0
 800f29e:	d109      	bne.n	800f2b4 <xQueueGenericSend+0x30>
 800f2a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f2a4:	f383 8811 	msr	BASEPRI, r3
 800f2a8:	f3bf 8f6f 	isb	sy
 800f2ac:	f3bf 8f4f 	dsb	sy
 800f2b0:	62bb      	str	r3, [r7, #40]	; 0x28
 800f2b2:	e7fe      	b.n	800f2b2 <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800f2b4:	68bb      	ldr	r3, [r7, #8]
 800f2b6:	2b00      	cmp	r3, #0
 800f2b8:	d103      	bne.n	800f2c2 <xQueueGenericSend+0x3e>
 800f2ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f2bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f2be:	2b00      	cmp	r3, #0
 800f2c0:	d101      	bne.n	800f2c6 <xQueueGenericSend+0x42>
 800f2c2:	2301      	movs	r3, #1
 800f2c4:	e000      	b.n	800f2c8 <xQueueGenericSend+0x44>
 800f2c6:	2300      	movs	r3, #0
 800f2c8:	2b00      	cmp	r3, #0
 800f2ca:	d109      	bne.n	800f2e0 <xQueueGenericSend+0x5c>
 800f2cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f2d0:	f383 8811 	msr	BASEPRI, r3
 800f2d4:	f3bf 8f6f 	isb	sy
 800f2d8:	f3bf 8f4f 	dsb	sy
 800f2dc:	627b      	str	r3, [r7, #36]	; 0x24
 800f2de:	e7fe      	b.n	800f2de <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800f2e0:	683b      	ldr	r3, [r7, #0]
 800f2e2:	2b02      	cmp	r3, #2
 800f2e4:	d103      	bne.n	800f2ee <xQueueGenericSend+0x6a>
 800f2e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f2e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f2ea:	2b01      	cmp	r3, #1
 800f2ec:	d101      	bne.n	800f2f2 <xQueueGenericSend+0x6e>
 800f2ee:	2301      	movs	r3, #1
 800f2f0:	e000      	b.n	800f2f4 <xQueueGenericSend+0x70>
 800f2f2:	2300      	movs	r3, #0
 800f2f4:	2b00      	cmp	r3, #0
 800f2f6:	d109      	bne.n	800f30c <xQueueGenericSend+0x88>
 800f2f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f2fc:	f383 8811 	msr	BASEPRI, r3
 800f300:	f3bf 8f6f 	isb	sy
 800f304:	f3bf 8f4f 	dsb	sy
 800f308:	623b      	str	r3, [r7, #32]
 800f30a:	e7fe      	b.n	800f30a <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800f30c:	f001 fc7c 	bl	8010c08 <xTaskGetSchedulerState>
 800f310:	4603      	mov	r3, r0
 800f312:	2b00      	cmp	r3, #0
 800f314:	d102      	bne.n	800f31c <xQueueGenericSend+0x98>
 800f316:	687b      	ldr	r3, [r7, #4]
 800f318:	2b00      	cmp	r3, #0
 800f31a:	d101      	bne.n	800f320 <xQueueGenericSend+0x9c>
 800f31c:	2301      	movs	r3, #1
 800f31e:	e000      	b.n	800f322 <xQueueGenericSend+0x9e>
 800f320:	2300      	movs	r3, #0
 800f322:	2b00      	cmp	r3, #0
 800f324:	d109      	bne.n	800f33a <xQueueGenericSend+0xb6>
 800f326:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f32a:	f383 8811 	msr	BASEPRI, r3
 800f32e:	f3bf 8f6f 	isb	sy
 800f332:	f3bf 8f4f 	dsb	sy
 800f336:	61fb      	str	r3, [r7, #28]
 800f338:	e7fe      	b.n	800f338 <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800f33a:	f7ff f9a7 	bl	800e68c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800f33e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f340:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f342:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f344:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f346:	429a      	cmp	r2, r3
 800f348:	d302      	bcc.n	800f350 <xQueueGenericSend+0xcc>
 800f34a:	683b      	ldr	r3, [r7, #0]
 800f34c:	2b02      	cmp	r3, #2
 800f34e:	d129      	bne.n	800f3a4 <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800f350:	683a      	ldr	r2, [r7, #0]
 800f352:	68b9      	ldr	r1, [r7, #8]
 800f354:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f356:	f000 fc48 	bl	800fbea <prvCopyDataToQueue>
 800f35a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800f35c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f35e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f360:	2b00      	cmp	r3, #0
 800f362:	d010      	beq.n	800f386 <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800f364:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f366:	3324      	adds	r3, #36	; 0x24
 800f368:	4618      	mov	r0, r3
 800f36a:	f001 fa5f 	bl	801082c <xTaskRemoveFromEventList>
 800f36e:	4603      	mov	r3, r0
 800f370:	2b00      	cmp	r3, #0
 800f372:	d013      	beq.n	800f39c <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800f374:	4b3f      	ldr	r3, [pc, #252]	; (800f474 <xQueueGenericSend+0x1f0>)
 800f376:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f37a:	601a      	str	r2, [r3, #0]
 800f37c:	f3bf 8f4f 	dsb	sy
 800f380:	f3bf 8f6f 	isb	sy
 800f384:	e00a      	b.n	800f39c <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800f386:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f388:	2b00      	cmp	r3, #0
 800f38a:	d007      	beq.n	800f39c <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800f38c:	4b39      	ldr	r3, [pc, #228]	; (800f474 <xQueueGenericSend+0x1f0>)
 800f38e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f392:	601a      	str	r2, [r3, #0]
 800f394:	f3bf 8f4f 	dsb	sy
 800f398:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800f39c:	f7ff f9a4 	bl	800e6e8 <vPortExitCritical>
				return pdPASS;
 800f3a0:	2301      	movs	r3, #1
 800f3a2:	e063      	b.n	800f46c <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800f3a4:	687b      	ldr	r3, [r7, #4]
 800f3a6:	2b00      	cmp	r3, #0
 800f3a8:	d103      	bne.n	800f3b2 <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800f3aa:	f7ff f99d 	bl	800e6e8 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800f3ae:	2300      	movs	r3, #0
 800f3b0:	e05c      	b.n	800f46c <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800f3b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f3b4:	2b00      	cmp	r3, #0
 800f3b6:	d106      	bne.n	800f3c6 <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800f3b8:	f107 0314 	add.w	r3, r7, #20
 800f3bc:	4618      	mov	r0, r3
 800f3be:	f001 fa99 	bl	80108f4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800f3c2:	2301      	movs	r3, #1
 800f3c4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800f3c6:	f7ff f98f 	bl	800e6e8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800f3ca:	f000 ffdb 	bl	8010384 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800f3ce:	f7ff f95d 	bl	800e68c <vPortEnterCritical>
 800f3d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f3d4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800f3d8:	b25b      	sxtb	r3, r3
 800f3da:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f3de:	d103      	bne.n	800f3e8 <xQueueGenericSend+0x164>
 800f3e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f3e2:	2200      	movs	r2, #0
 800f3e4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800f3e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f3ea:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800f3ee:	b25b      	sxtb	r3, r3
 800f3f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f3f4:	d103      	bne.n	800f3fe <xQueueGenericSend+0x17a>
 800f3f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f3f8:	2200      	movs	r2, #0
 800f3fa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800f3fe:	f7ff f973 	bl	800e6e8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800f402:	1d3a      	adds	r2, r7, #4
 800f404:	f107 0314 	add.w	r3, r7, #20
 800f408:	4611      	mov	r1, r2
 800f40a:	4618      	mov	r0, r3
 800f40c:	f001 fa88 	bl	8010920 <xTaskCheckForTimeOut>
 800f410:	4603      	mov	r3, r0
 800f412:	2b00      	cmp	r3, #0
 800f414:	d124      	bne.n	800f460 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800f416:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f418:	f000 fcdf 	bl	800fdda <prvIsQueueFull>
 800f41c:	4603      	mov	r3, r0
 800f41e:	2b00      	cmp	r3, #0
 800f420:	d018      	beq.n	800f454 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800f422:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f424:	3310      	adds	r3, #16
 800f426:	687a      	ldr	r2, [r7, #4]
 800f428:	4611      	mov	r1, r2
 800f42a:	4618      	mov	r0, r3
 800f42c:	f001 f9b0 	bl	8010790 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800f430:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f432:	f000 fc6a 	bl	800fd0a <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800f436:	f000 ffeb 	bl	8010410 <xTaskResumeAll>
 800f43a:	4603      	mov	r3, r0
 800f43c:	2b00      	cmp	r3, #0
 800f43e:	f47f af7c 	bne.w	800f33a <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 800f442:	4b0c      	ldr	r3, [pc, #48]	; (800f474 <xQueueGenericSend+0x1f0>)
 800f444:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f448:	601a      	str	r2, [r3, #0]
 800f44a:	f3bf 8f4f 	dsb	sy
 800f44e:	f3bf 8f6f 	isb	sy
 800f452:	e772      	b.n	800f33a <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800f454:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f456:	f000 fc58 	bl	800fd0a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800f45a:	f000 ffd9 	bl	8010410 <xTaskResumeAll>
 800f45e:	e76c      	b.n	800f33a <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800f460:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f462:	f000 fc52 	bl	800fd0a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800f466:	f000 ffd3 	bl	8010410 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800f46a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800f46c:	4618      	mov	r0, r3
 800f46e:	3738      	adds	r7, #56	; 0x38
 800f470:	46bd      	mov	sp, r7
 800f472:	bd80      	pop	{r7, pc}
 800f474:	e000ed04 	.word	0xe000ed04

0800f478 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800f478:	b580      	push	{r7, lr}
 800f47a:	b08e      	sub	sp, #56	; 0x38
 800f47c:	af00      	add	r7, sp, #0
 800f47e:	60f8      	str	r0, [r7, #12]
 800f480:	60b9      	str	r1, [r7, #8]
 800f482:	607a      	str	r2, [r7, #4]
 800f484:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800f486:	68fb      	ldr	r3, [r7, #12]
 800f488:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800f48a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f48c:	2b00      	cmp	r3, #0
 800f48e:	d109      	bne.n	800f4a4 <xQueueGenericSendFromISR+0x2c>
 800f490:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f494:	f383 8811 	msr	BASEPRI, r3
 800f498:	f3bf 8f6f 	isb	sy
 800f49c:	f3bf 8f4f 	dsb	sy
 800f4a0:	627b      	str	r3, [r7, #36]	; 0x24
 800f4a2:	e7fe      	b.n	800f4a2 <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800f4a4:	68bb      	ldr	r3, [r7, #8]
 800f4a6:	2b00      	cmp	r3, #0
 800f4a8:	d103      	bne.n	800f4b2 <xQueueGenericSendFromISR+0x3a>
 800f4aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f4ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f4ae:	2b00      	cmp	r3, #0
 800f4b0:	d101      	bne.n	800f4b6 <xQueueGenericSendFromISR+0x3e>
 800f4b2:	2301      	movs	r3, #1
 800f4b4:	e000      	b.n	800f4b8 <xQueueGenericSendFromISR+0x40>
 800f4b6:	2300      	movs	r3, #0
 800f4b8:	2b00      	cmp	r3, #0
 800f4ba:	d109      	bne.n	800f4d0 <xQueueGenericSendFromISR+0x58>
 800f4bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f4c0:	f383 8811 	msr	BASEPRI, r3
 800f4c4:	f3bf 8f6f 	isb	sy
 800f4c8:	f3bf 8f4f 	dsb	sy
 800f4cc:	623b      	str	r3, [r7, #32]
 800f4ce:	e7fe      	b.n	800f4ce <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800f4d0:	683b      	ldr	r3, [r7, #0]
 800f4d2:	2b02      	cmp	r3, #2
 800f4d4:	d103      	bne.n	800f4de <xQueueGenericSendFromISR+0x66>
 800f4d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f4d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f4da:	2b01      	cmp	r3, #1
 800f4dc:	d101      	bne.n	800f4e2 <xQueueGenericSendFromISR+0x6a>
 800f4de:	2301      	movs	r3, #1
 800f4e0:	e000      	b.n	800f4e4 <xQueueGenericSendFromISR+0x6c>
 800f4e2:	2300      	movs	r3, #0
 800f4e4:	2b00      	cmp	r3, #0
 800f4e6:	d109      	bne.n	800f4fc <xQueueGenericSendFromISR+0x84>
 800f4e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f4ec:	f383 8811 	msr	BASEPRI, r3
 800f4f0:	f3bf 8f6f 	isb	sy
 800f4f4:	f3bf 8f4f 	dsb	sy
 800f4f8:	61fb      	str	r3, [r7, #28]
 800f4fa:	e7fe      	b.n	800f4fa <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800f4fc:	f7ff f9a2 	bl	800e844 <vPortValidateInterruptPriority>
	__asm volatile
 800f500:	f3ef 8211 	mrs	r2, BASEPRI
 800f504:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f508:	f383 8811 	msr	BASEPRI, r3
 800f50c:	f3bf 8f6f 	isb	sy
 800f510:	f3bf 8f4f 	dsb	sy
 800f514:	61ba      	str	r2, [r7, #24]
 800f516:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800f518:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800f51a:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800f51c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f51e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f520:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f522:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f524:	429a      	cmp	r2, r3
 800f526:	d302      	bcc.n	800f52e <xQueueGenericSendFromISR+0xb6>
 800f528:	683b      	ldr	r3, [r7, #0]
 800f52a:	2b02      	cmp	r3, #2
 800f52c:	d12c      	bne.n	800f588 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800f52e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f530:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800f534:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800f538:	683a      	ldr	r2, [r7, #0]
 800f53a:	68b9      	ldr	r1, [r7, #8]
 800f53c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f53e:	f000 fb54 	bl	800fbea <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800f542:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800f546:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f54a:	d112      	bne.n	800f572 <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800f54c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f54e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f550:	2b00      	cmp	r3, #0
 800f552:	d016      	beq.n	800f582 <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800f554:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f556:	3324      	adds	r3, #36	; 0x24
 800f558:	4618      	mov	r0, r3
 800f55a:	f001 f967 	bl	801082c <xTaskRemoveFromEventList>
 800f55e:	4603      	mov	r3, r0
 800f560:	2b00      	cmp	r3, #0
 800f562:	d00e      	beq.n	800f582 <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800f564:	687b      	ldr	r3, [r7, #4]
 800f566:	2b00      	cmp	r3, #0
 800f568:	d00b      	beq.n	800f582 <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800f56a:	687b      	ldr	r3, [r7, #4]
 800f56c:	2201      	movs	r2, #1
 800f56e:	601a      	str	r2, [r3, #0]
 800f570:	e007      	b.n	800f582 <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800f572:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800f576:	3301      	adds	r3, #1
 800f578:	b2db      	uxtb	r3, r3
 800f57a:	b25a      	sxtb	r2, r3
 800f57c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f57e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800f582:	2301      	movs	r3, #1
 800f584:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800f586:	e001      	b.n	800f58c <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800f588:	2300      	movs	r3, #0
 800f58a:	637b      	str	r3, [r7, #52]	; 0x34
 800f58c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f58e:	613b      	str	r3, [r7, #16]
	__asm volatile
 800f590:	693b      	ldr	r3, [r7, #16]
 800f592:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800f596:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800f598:	4618      	mov	r0, r3
 800f59a:	3738      	adds	r7, #56	; 0x38
 800f59c:	46bd      	mov	sp, r7
 800f59e:	bd80      	pop	{r7, pc}

0800f5a0 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800f5a0:	b580      	push	{r7, lr}
 800f5a2:	b08e      	sub	sp, #56	; 0x38
 800f5a4:	af00      	add	r7, sp, #0
 800f5a6:	6078      	str	r0, [r7, #4]
 800f5a8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800f5aa:	687b      	ldr	r3, [r7, #4]
 800f5ac:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800f5ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f5b0:	2b00      	cmp	r3, #0
 800f5b2:	d109      	bne.n	800f5c8 <xQueueGiveFromISR+0x28>
	__asm volatile
 800f5b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f5b8:	f383 8811 	msr	BASEPRI, r3
 800f5bc:	f3bf 8f6f 	isb	sy
 800f5c0:	f3bf 8f4f 	dsb	sy
 800f5c4:	623b      	str	r3, [r7, #32]
 800f5c6:	e7fe      	b.n	800f5c6 <xQueueGiveFromISR+0x26>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800f5c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f5ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f5cc:	2b00      	cmp	r3, #0
 800f5ce:	d009      	beq.n	800f5e4 <xQueueGiveFromISR+0x44>
 800f5d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f5d4:	f383 8811 	msr	BASEPRI, r3
 800f5d8:	f3bf 8f6f 	isb	sy
 800f5dc:	f3bf 8f4f 	dsb	sy
 800f5e0:	61fb      	str	r3, [r7, #28]
 800f5e2:	e7fe      	b.n	800f5e2 <xQueueGiveFromISR+0x42>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800f5e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f5e6:	681b      	ldr	r3, [r3, #0]
 800f5e8:	2b00      	cmp	r3, #0
 800f5ea:	d103      	bne.n	800f5f4 <xQueueGiveFromISR+0x54>
 800f5ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f5ee:	689b      	ldr	r3, [r3, #8]
 800f5f0:	2b00      	cmp	r3, #0
 800f5f2:	d101      	bne.n	800f5f8 <xQueueGiveFromISR+0x58>
 800f5f4:	2301      	movs	r3, #1
 800f5f6:	e000      	b.n	800f5fa <xQueueGiveFromISR+0x5a>
 800f5f8:	2300      	movs	r3, #0
 800f5fa:	2b00      	cmp	r3, #0
 800f5fc:	d109      	bne.n	800f612 <xQueueGiveFromISR+0x72>
 800f5fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f602:	f383 8811 	msr	BASEPRI, r3
 800f606:	f3bf 8f6f 	isb	sy
 800f60a:	f3bf 8f4f 	dsb	sy
 800f60e:	61bb      	str	r3, [r7, #24]
 800f610:	e7fe      	b.n	800f610 <xQueueGiveFromISR+0x70>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800f612:	f7ff f917 	bl	800e844 <vPortValidateInterruptPriority>
	__asm volatile
 800f616:	f3ef 8211 	mrs	r2, BASEPRI
 800f61a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f61e:	f383 8811 	msr	BASEPRI, r3
 800f622:	f3bf 8f6f 	isb	sy
 800f626:	f3bf 8f4f 	dsb	sy
 800f62a:	617a      	str	r2, [r7, #20]
 800f62c:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800f62e:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800f630:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800f632:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f634:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f636:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800f638:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f63a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f63c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f63e:	429a      	cmp	r2, r3
 800f640:	d22b      	bcs.n	800f69a <xQueueGiveFromISR+0xfa>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800f642:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f644:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800f648:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800f64c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f64e:	1c5a      	adds	r2, r3, #1
 800f650:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f652:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800f654:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800f658:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f65c:	d112      	bne.n	800f684 <xQueueGiveFromISR+0xe4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800f65e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f660:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f662:	2b00      	cmp	r3, #0
 800f664:	d016      	beq.n	800f694 <xQueueGiveFromISR+0xf4>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800f666:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f668:	3324      	adds	r3, #36	; 0x24
 800f66a:	4618      	mov	r0, r3
 800f66c:	f001 f8de 	bl	801082c <xTaskRemoveFromEventList>
 800f670:	4603      	mov	r3, r0
 800f672:	2b00      	cmp	r3, #0
 800f674:	d00e      	beq.n	800f694 <xQueueGiveFromISR+0xf4>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800f676:	683b      	ldr	r3, [r7, #0]
 800f678:	2b00      	cmp	r3, #0
 800f67a:	d00b      	beq.n	800f694 <xQueueGiveFromISR+0xf4>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800f67c:	683b      	ldr	r3, [r7, #0]
 800f67e:	2201      	movs	r2, #1
 800f680:	601a      	str	r2, [r3, #0]
 800f682:	e007      	b.n	800f694 <xQueueGiveFromISR+0xf4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800f684:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f688:	3301      	adds	r3, #1
 800f68a:	b2db      	uxtb	r3, r3
 800f68c:	b25a      	sxtb	r2, r3
 800f68e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f690:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800f694:	2301      	movs	r3, #1
 800f696:	637b      	str	r3, [r7, #52]	; 0x34
 800f698:	e001      	b.n	800f69e <xQueueGiveFromISR+0xfe>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800f69a:	2300      	movs	r3, #0
 800f69c:	637b      	str	r3, [r7, #52]	; 0x34
 800f69e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f6a0:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800f6a2:	68fb      	ldr	r3, [r7, #12]
 800f6a4:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800f6a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800f6aa:	4618      	mov	r0, r3
 800f6ac:	3738      	adds	r7, #56	; 0x38
 800f6ae:	46bd      	mov	sp, r7
 800f6b0:	bd80      	pop	{r7, pc}
	...

0800f6b4 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800f6b4:	b580      	push	{r7, lr}
 800f6b6:	b08c      	sub	sp, #48	; 0x30
 800f6b8:	af00      	add	r7, sp, #0
 800f6ba:	60f8      	str	r0, [r7, #12]
 800f6bc:	60b9      	str	r1, [r7, #8]
 800f6be:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800f6c0:	2300      	movs	r3, #0
 800f6c2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800f6c4:	68fb      	ldr	r3, [r7, #12]
 800f6c6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800f6c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f6ca:	2b00      	cmp	r3, #0
 800f6cc:	d109      	bne.n	800f6e2 <xQueueReceive+0x2e>
	__asm volatile
 800f6ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f6d2:	f383 8811 	msr	BASEPRI, r3
 800f6d6:	f3bf 8f6f 	isb	sy
 800f6da:	f3bf 8f4f 	dsb	sy
 800f6de:	623b      	str	r3, [r7, #32]
 800f6e0:	e7fe      	b.n	800f6e0 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800f6e2:	68bb      	ldr	r3, [r7, #8]
 800f6e4:	2b00      	cmp	r3, #0
 800f6e6:	d103      	bne.n	800f6f0 <xQueueReceive+0x3c>
 800f6e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f6ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f6ec:	2b00      	cmp	r3, #0
 800f6ee:	d101      	bne.n	800f6f4 <xQueueReceive+0x40>
 800f6f0:	2301      	movs	r3, #1
 800f6f2:	e000      	b.n	800f6f6 <xQueueReceive+0x42>
 800f6f4:	2300      	movs	r3, #0
 800f6f6:	2b00      	cmp	r3, #0
 800f6f8:	d109      	bne.n	800f70e <xQueueReceive+0x5a>
 800f6fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f6fe:	f383 8811 	msr	BASEPRI, r3
 800f702:	f3bf 8f6f 	isb	sy
 800f706:	f3bf 8f4f 	dsb	sy
 800f70a:	61fb      	str	r3, [r7, #28]
 800f70c:	e7fe      	b.n	800f70c <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800f70e:	f001 fa7b 	bl	8010c08 <xTaskGetSchedulerState>
 800f712:	4603      	mov	r3, r0
 800f714:	2b00      	cmp	r3, #0
 800f716:	d102      	bne.n	800f71e <xQueueReceive+0x6a>
 800f718:	687b      	ldr	r3, [r7, #4]
 800f71a:	2b00      	cmp	r3, #0
 800f71c:	d101      	bne.n	800f722 <xQueueReceive+0x6e>
 800f71e:	2301      	movs	r3, #1
 800f720:	e000      	b.n	800f724 <xQueueReceive+0x70>
 800f722:	2300      	movs	r3, #0
 800f724:	2b00      	cmp	r3, #0
 800f726:	d109      	bne.n	800f73c <xQueueReceive+0x88>
 800f728:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f72c:	f383 8811 	msr	BASEPRI, r3
 800f730:	f3bf 8f6f 	isb	sy
 800f734:	f3bf 8f4f 	dsb	sy
 800f738:	61bb      	str	r3, [r7, #24]
 800f73a:	e7fe      	b.n	800f73a <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800f73c:	f7fe ffa6 	bl	800e68c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800f740:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f742:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f744:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800f746:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f748:	2b00      	cmp	r3, #0
 800f74a:	d01f      	beq.n	800f78c <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800f74c:	68b9      	ldr	r1, [r7, #8]
 800f74e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f750:	f000 fab5 	bl	800fcbe <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800f754:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f756:	1e5a      	subs	r2, r3, #1
 800f758:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f75a:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f75c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f75e:	691b      	ldr	r3, [r3, #16]
 800f760:	2b00      	cmp	r3, #0
 800f762:	d00f      	beq.n	800f784 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800f764:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f766:	3310      	adds	r3, #16
 800f768:	4618      	mov	r0, r3
 800f76a:	f001 f85f 	bl	801082c <xTaskRemoveFromEventList>
 800f76e:	4603      	mov	r3, r0
 800f770:	2b00      	cmp	r3, #0
 800f772:	d007      	beq.n	800f784 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800f774:	4b3c      	ldr	r3, [pc, #240]	; (800f868 <xQueueReceive+0x1b4>)
 800f776:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f77a:	601a      	str	r2, [r3, #0]
 800f77c:	f3bf 8f4f 	dsb	sy
 800f780:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800f784:	f7fe ffb0 	bl	800e6e8 <vPortExitCritical>
				return pdPASS;
 800f788:	2301      	movs	r3, #1
 800f78a:	e069      	b.n	800f860 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800f78c:	687b      	ldr	r3, [r7, #4]
 800f78e:	2b00      	cmp	r3, #0
 800f790:	d103      	bne.n	800f79a <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800f792:	f7fe ffa9 	bl	800e6e8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800f796:	2300      	movs	r3, #0
 800f798:	e062      	b.n	800f860 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 800f79a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f79c:	2b00      	cmp	r3, #0
 800f79e:	d106      	bne.n	800f7ae <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800f7a0:	f107 0310 	add.w	r3, r7, #16
 800f7a4:	4618      	mov	r0, r3
 800f7a6:	f001 f8a5 	bl	80108f4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800f7aa:	2301      	movs	r3, #1
 800f7ac:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800f7ae:	f7fe ff9b 	bl	800e6e8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800f7b2:	f000 fde7 	bl	8010384 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800f7b6:	f7fe ff69 	bl	800e68c <vPortEnterCritical>
 800f7ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f7bc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800f7c0:	b25b      	sxtb	r3, r3
 800f7c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f7c6:	d103      	bne.n	800f7d0 <xQueueReceive+0x11c>
 800f7c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f7ca:	2200      	movs	r2, #0
 800f7cc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800f7d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f7d2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800f7d6:	b25b      	sxtb	r3, r3
 800f7d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f7dc:	d103      	bne.n	800f7e6 <xQueueReceive+0x132>
 800f7de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f7e0:	2200      	movs	r2, #0
 800f7e2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800f7e6:	f7fe ff7f 	bl	800e6e8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800f7ea:	1d3a      	adds	r2, r7, #4
 800f7ec:	f107 0310 	add.w	r3, r7, #16
 800f7f0:	4611      	mov	r1, r2
 800f7f2:	4618      	mov	r0, r3
 800f7f4:	f001 f894 	bl	8010920 <xTaskCheckForTimeOut>
 800f7f8:	4603      	mov	r3, r0
 800f7fa:	2b00      	cmp	r3, #0
 800f7fc:	d123      	bne.n	800f846 <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800f7fe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f800:	f000 fad5 	bl	800fdae <prvIsQueueEmpty>
 800f804:	4603      	mov	r3, r0
 800f806:	2b00      	cmp	r3, #0
 800f808:	d017      	beq.n	800f83a <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800f80a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f80c:	3324      	adds	r3, #36	; 0x24
 800f80e:	687a      	ldr	r2, [r7, #4]
 800f810:	4611      	mov	r1, r2
 800f812:	4618      	mov	r0, r3
 800f814:	f000 ffbc 	bl	8010790 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800f818:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f81a:	f000 fa76 	bl	800fd0a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800f81e:	f000 fdf7 	bl	8010410 <xTaskResumeAll>
 800f822:	4603      	mov	r3, r0
 800f824:	2b00      	cmp	r3, #0
 800f826:	d189      	bne.n	800f73c <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 800f828:	4b0f      	ldr	r3, [pc, #60]	; (800f868 <xQueueReceive+0x1b4>)
 800f82a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f82e:	601a      	str	r2, [r3, #0]
 800f830:	f3bf 8f4f 	dsb	sy
 800f834:	f3bf 8f6f 	isb	sy
 800f838:	e780      	b.n	800f73c <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800f83a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f83c:	f000 fa65 	bl	800fd0a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800f840:	f000 fde6 	bl	8010410 <xTaskResumeAll>
 800f844:	e77a      	b.n	800f73c <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800f846:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f848:	f000 fa5f 	bl	800fd0a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800f84c:	f000 fde0 	bl	8010410 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800f850:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f852:	f000 faac 	bl	800fdae <prvIsQueueEmpty>
 800f856:	4603      	mov	r3, r0
 800f858:	2b00      	cmp	r3, #0
 800f85a:	f43f af6f 	beq.w	800f73c <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800f85e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800f860:	4618      	mov	r0, r3
 800f862:	3730      	adds	r7, #48	; 0x30
 800f864:	46bd      	mov	sp, r7
 800f866:	bd80      	pop	{r7, pc}
 800f868:	e000ed04 	.word	0xe000ed04

0800f86c <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800f86c:	b580      	push	{r7, lr}
 800f86e:	b08e      	sub	sp, #56	; 0x38
 800f870:	af00      	add	r7, sp, #0
 800f872:	6078      	str	r0, [r7, #4]
 800f874:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800f876:	2300      	movs	r3, #0
 800f878:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800f87a:	687b      	ldr	r3, [r7, #4]
 800f87c:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800f87e:	2300      	movs	r3, #0
 800f880:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800f882:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f884:	2b00      	cmp	r3, #0
 800f886:	d109      	bne.n	800f89c <xQueueSemaphoreTake+0x30>
 800f888:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f88c:	f383 8811 	msr	BASEPRI, r3
 800f890:	f3bf 8f6f 	isb	sy
 800f894:	f3bf 8f4f 	dsb	sy
 800f898:	623b      	str	r3, [r7, #32]
 800f89a:	e7fe      	b.n	800f89a <xQueueSemaphoreTake+0x2e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800f89c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f89e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f8a0:	2b00      	cmp	r3, #0
 800f8a2:	d009      	beq.n	800f8b8 <xQueueSemaphoreTake+0x4c>
 800f8a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f8a8:	f383 8811 	msr	BASEPRI, r3
 800f8ac:	f3bf 8f6f 	isb	sy
 800f8b0:	f3bf 8f4f 	dsb	sy
 800f8b4:	61fb      	str	r3, [r7, #28]
 800f8b6:	e7fe      	b.n	800f8b6 <xQueueSemaphoreTake+0x4a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800f8b8:	f001 f9a6 	bl	8010c08 <xTaskGetSchedulerState>
 800f8bc:	4603      	mov	r3, r0
 800f8be:	2b00      	cmp	r3, #0
 800f8c0:	d102      	bne.n	800f8c8 <xQueueSemaphoreTake+0x5c>
 800f8c2:	683b      	ldr	r3, [r7, #0]
 800f8c4:	2b00      	cmp	r3, #0
 800f8c6:	d101      	bne.n	800f8cc <xQueueSemaphoreTake+0x60>
 800f8c8:	2301      	movs	r3, #1
 800f8ca:	e000      	b.n	800f8ce <xQueueSemaphoreTake+0x62>
 800f8cc:	2300      	movs	r3, #0
 800f8ce:	2b00      	cmp	r3, #0
 800f8d0:	d109      	bne.n	800f8e6 <xQueueSemaphoreTake+0x7a>
 800f8d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f8d6:	f383 8811 	msr	BASEPRI, r3
 800f8da:	f3bf 8f6f 	isb	sy
 800f8de:	f3bf 8f4f 	dsb	sy
 800f8e2:	61bb      	str	r3, [r7, #24]
 800f8e4:	e7fe      	b.n	800f8e4 <xQueueSemaphoreTake+0x78>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800f8e6:	f7fe fed1 	bl	800e68c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800f8ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f8ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f8ee:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800f8f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f8f2:	2b00      	cmp	r3, #0
 800f8f4:	d024      	beq.n	800f940 <xQueueSemaphoreTake+0xd4>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800f8f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f8f8:	1e5a      	subs	r2, r3, #1
 800f8fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f8fc:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800f8fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f900:	681b      	ldr	r3, [r3, #0]
 800f902:	2b00      	cmp	r3, #0
 800f904:	d104      	bne.n	800f910 <xQueueSemaphoreTake+0xa4>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800f906:	f001 faf1 	bl	8010eec <pvTaskIncrementMutexHeldCount>
 800f90a:	4602      	mov	r2, r0
 800f90c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f90e:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f910:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f912:	691b      	ldr	r3, [r3, #16]
 800f914:	2b00      	cmp	r3, #0
 800f916:	d00f      	beq.n	800f938 <xQueueSemaphoreTake+0xcc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800f918:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f91a:	3310      	adds	r3, #16
 800f91c:	4618      	mov	r0, r3
 800f91e:	f000 ff85 	bl	801082c <xTaskRemoveFromEventList>
 800f922:	4603      	mov	r3, r0
 800f924:	2b00      	cmp	r3, #0
 800f926:	d007      	beq.n	800f938 <xQueueSemaphoreTake+0xcc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800f928:	4b53      	ldr	r3, [pc, #332]	; (800fa78 <xQueueSemaphoreTake+0x20c>)
 800f92a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f92e:	601a      	str	r2, [r3, #0]
 800f930:	f3bf 8f4f 	dsb	sy
 800f934:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800f938:	f7fe fed6 	bl	800e6e8 <vPortExitCritical>
				return pdPASS;
 800f93c:	2301      	movs	r3, #1
 800f93e:	e096      	b.n	800fa6e <xQueueSemaphoreTake+0x202>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800f940:	683b      	ldr	r3, [r7, #0]
 800f942:	2b00      	cmp	r3, #0
 800f944:	d110      	bne.n	800f968 <xQueueSemaphoreTake+0xfc>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800f946:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f948:	2b00      	cmp	r3, #0
 800f94a:	d009      	beq.n	800f960 <xQueueSemaphoreTake+0xf4>
 800f94c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f950:	f383 8811 	msr	BASEPRI, r3
 800f954:	f3bf 8f6f 	isb	sy
 800f958:	f3bf 8f4f 	dsb	sy
 800f95c:	617b      	str	r3, [r7, #20]
 800f95e:	e7fe      	b.n	800f95e <xQueueSemaphoreTake+0xf2>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800f960:	f7fe fec2 	bl	800e6e8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800f964:	2300      	movs	r3, #0
 800f966:	e082      	b.n	800fa6e <xQueueSemaphoreTake+0x202>
				}
				else if( xEntryTimeSet == pdFALSE )
 800f968:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f96a:	2b00      	cmp	r3, #0
 800f96c:	d106      	bne.n	800f97c <xQueueSemaphoreTake+0x110>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800f96e:	f107 030c 	add.w	r3, r7, #12
 800f972:	4618      	mov	r0, r3
 800f974:	f000 ffbe 	bl	80108f4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800f978:	2301      	movs	r3, #1
 800f97a:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800f97c:	f7fe feb4 	bl	800e6e8 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800f980:	f000 fd00 	bl	8010384 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800f984:	f7fe fe82 	bl	800e68c <vPortEnterCritical>
 800f988:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f98a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800f98e:	b25b      	sxtb	r3, r3
 800f990:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f994:	d103      	bne.n	800f99e <xQueueSemaphoreTake+0x132>
 800f996:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f998:	2200      	movs	r2, #0
 800f99a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800f99e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f9a0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800f9a4:	b25b      	sxtb	r3, r3
 800f9a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f9aa:	d103      	bne.n	800f9b4 <xQueueSemaphoreTake+0x148>
 800f9ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f9ae:	2200      	movs	r2, #0
 800f9b0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800f9b4:	f7fe fe98 	bl	800e6e8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800f9b8:	463a      	mov	r2, r7
 800f9ba:	f107 030c 	add.w	r3, r7, #12
 800f9be:	4611      	mov	r1, r2
 800f9c0:	4618      	mov	r0, r3
 800f9c2:	f000 ffad 	bl	8010920 <xTaskCheckForTimeOut>
 800f9c6:	4603      	mov	r3, r0
 800f9c8:	2b00      	cmp	r3, #0
 800f9ca:	d132      	bne.n	800fa32 <xQueueSemaphoreTake+0x1c6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800f9cc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f9ce:	f000 f9ee 	bl	800fdae <prvIsQueueEmpty>
 800f9d2:	4603      	mov	r3, r0
 800f9d4:	2b00      	cmp	r3, #0
 800f9d6:	d026      	beq.n	800fa26 <xQueueSemaphoreTake+0x1ba>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800f9d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f9da:	681b      	ldr	r3, [r3, #0]
 800f9dc:	2b00      	cmp	r3, #0
 800f9de:	d109      	bne.n	800f9f4 <xQueueSemaphoreTake+0x188>
					{
						taskENTER_CRITICAL();
 800f9e0:	f7fe fe54 	bl	800e68c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800f9e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f9e6:	689b      	ldr	r3, [r3, #8]
 800f9e8:	4618      	mov	r0, r3
 800f9ea:	f001 f92b 	bl	8010c44 <xTaskPriorityInherit>
 800f9ee:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800f9f0:	f7fe fe7a 	bl	800e6e8 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800f9f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f9f6:	3324      	adds	r3, #36	; 0x24
 800f9f8:	683a      	ldr	r2, [r7, #0]
 800f9fa:	4611      	mov	r1, r2
 800f9fc:	4618      	mov	r0, r3
 800f9fe:	f000 fec7 	bl	8010790 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800fa02:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800fa04:	f000 f981 	bl	800fd0a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800fa08:	f000 fd02 	bl	8010410 <xTaskResumeAll>
 800fa0c:	4603      	mov	r3, r0
 800fa0e:	2b00      	cmp	r3, #0
 800fa10:	f47f af69 	bne.w	800f8e6 <xQueueSemaphoreTake+0x7a>
				{
					portYIELD_WITHIN_API();
 800fa14:	4b18      	ldr	r3, [pc, #96]	; (800fa78 <xQueueSemaphoreTake+0x20c>)
 800fa16:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fa1a:	601a      	str	r2, [r3, #0]
 800fa1c:	f3bf 8f4f 	dsb	sy
 800fa20:	f3bf 8f6f 	isb	sy
 800fa24:	e75f      	b.n	800f8e6 <xQueueSemaphoreTake+0x7a>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800fa26:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800fa28:	f000 f96f 	bl	800fd0a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800fa2c:	f000 fcf0 	bl	8010410 <xTaskResumeAll>
 800fa30:	e759      	b.n	800f8e6 <xQueueSemaphoreTake+0x7a>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800fa32:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800fa34:	f000 f969 	bl	800fd0a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800fa38:	f000 fcea 	bl	8010410 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800fa3c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800fa3e:	f000 f9b6 	bl	800fdae <prvIsQueueEmpty>
 800fa42:	4603      	mov	r3, r0
 800fa44:	2b00      	cmp	r3, #0
 800fa46:	f43f af4e 	beq.w	800f8e6 <xQueueSemaphoreTake+0x7a>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800fa4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fa4c:	2b00      	cmp	r3, #0
 800fa4e:	d00d      	beq.n	800fa6c <xQueueSemaphoreTake+0x200>
					{
						taskENTER_CRITICAL();
 800fa50:	f7fe fe1c 	bl	800e68c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800fa54:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800fa56:	f000 f8b0 	bl	800fbba <prvGetDisinheritPriorityAfterTimeout>
 800fa5a:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800fa5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fa5e:	689b      	ldr	r3, [r3, #8]
 800fa60:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800fa62:	4618      	mov	r0, r3
 800fa64:	f001 f9c2 	bl	8010dec <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800fa68:	f7fe fe3e 	bl	800e6e8 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800fa6c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800fa6e:	4618      	mov	r0, r3
 800fa70:	3738      	adds	r7, #56	; 0x38
 800fa72:	46bd      	mov	sp, r7
 800fa74:	bd80      	pop	{r7, pc}
 800fa76:	bf00      	nop
 800fa78:	e000ed04 	.word	0xe000ed04

0800fa7c <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800fa7c:	b580      	push	{r7, lr}
 800fa7e:	b08e      	sub	sp, #56	; 0x38
 800fa80:	af00      	add	r7, sp, #0
 800fa82:	60f8      	str	r0, [r7, #12]
 800fa84:	60b9      	str	r1, [r7, #8]
 800fa86:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800fa88:	68fb      	ldr	r3, [r7, #12]
 800fa8a:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800fa8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fa8e:	2b00      	cmp	r3, #0
 800fa90:	d109      	bne.n	800faa6 <xQueueReceiveFromISR+0x2a>
 800fa92:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fa96:	f383 8811 	msr	BASEPRI, r3
 800fa9a:	f3bf 8f6f 	isb	sy
 800fa9e:	f3bf 8f4f 	dsb	sy
 800faa2:	623b      	str	r3, [r7, #32]
 800faa4:	e7fe      	b.n	800faa4 <xQueueReceiveFromISR+0x28>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800faa6:	68bb      	ldr	r3, [r7, #8]
 800faa8:	2b00      	cmp	r3, #0
 800faaa:	d103      	bne.n	800fab4 <xQueueReceiveFromISR+0x38>
 800faac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800faae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fab0:	2b00      	cmp	r3, #0
 800fab2:	d101      	bne.n	800fab8 <xQueueReceiveFromISR+0x3c>
 800fab4:	2301      	movs	r3, #1
 800fab6:	e000      	b.n	800faba <xQueueReceiveFromISR+0x3e>
 800fab8:	2300      	movs	r3, #0
 800faba:	2b00      	cmp	r3, #0
 800fabc:	d109      	bne.n	800fad2 <xQueueReceiveFromISR+0x56>
 800fabe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fac2:	f383 8811 	msr	BASEPRI, r3
 800fac6:	f3bf 8f6f 	isb	sy
 800faca:	f3bf 8f4f 	dsb	sy
 800face:	61fb      	str	r3, [r7, #28]
 800fad0:	e7fe      	b.n	800fad0 <xQueueReceiveFromISR+0x54>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800fad2:	f7fe feb7 	bl	800e844 <vPortValidateInterruptPriority>
	__asm volatile
 800fad6:	f3ef 8211 	mrs	r2, BASEPRI
 800fada:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fade:	f383 8811 	msr	BASEPRI, r3
 800fae2:	f3bf 8f6f 	isb	sy
 800fae6:	f3bf 8f4f 	dsb	sy
 800faea:	61ba      	str	r2, [r7, #24]
 800faec:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800faee:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800faf0:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800faf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800faf4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800faf6:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800faf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fafa:	2b00      	cmp	r3, #0
 800fafc:	d02f      	beq.n	800fb5e <xQueueReceiveFromISR+0xe2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800fafe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fb00:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800fb04:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800fb08:	68b9      	ldr	r1, [r7, #8]
 800fb0a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800fb0c:	f000 f8d7 	bl	800fcbe <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800fb10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fb12:	1e5a      	subs	r2, r3, #1
 800fb14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fb16:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800fb18:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800fb1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fb20:	d112      	bne.n	800fb48 <xQueueReceiveFromISR+0xcc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800fb22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fb24:	691b      	ldr	r3, [r3, #16]
 800fb26:	2b00      	cmp	r3, #0
 800fb28:	d016      	beq.n	800fb58 <xQueueReceiveFromISR+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800fb2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fb2c:	3310      	adds	r3, #16
 800fb2e:	4618      	mov	r0, r3
 800fb30:	f000 fe7c 	bl	801082c <xTaskRemoveFromEventList>
 800fb34:	4603      	mov	r3, r0
 800fb36:	2b00      	cmp	r3, #0
 800fb38:	d00e      	beq.n	800fb58 <xQueueReceiveFromISR+0xdc>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800fb3a:	687b      	ldr	r3, [r7, #4]
 800fb3c:	2b00      	cmp	r3, #0
 800fb3e:	d00b      	beq.n	800fb58 <xQueueReceiveFromISR+0xdc>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800fb40:	687b      	ldr	r3, [r7, #4]
 800fb42:	2201      	movs	r2, #1
 800fb44:	601a      	str	r2, [r3, #0]
 800fb46:	e007      	b.n	800fb58 <xQueueReceiveFromISR+0xdc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800fb48:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800fb4c:	3301      	adds	r3, #1
 800fb4e:	b2db      	uxtb	r3, r3
 800fb50:	b25a      	sxtb	r2, r3
 800fb52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fb54:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800fb58:	2301      	movs	r3, #1
 800fb5a:	637b      	str	r3, [r7, #52]	; 0x34
 800fb5c:	e001      	b.n	800fb62 <xQueueReceiveFromISR+0xe6>
		}
		else
		{
			xReturn = pdFAIL;
 800fb5e:	2300      	movs	r3, #0
 800fb60:	637b      	str	r3, [r7, #52]	; 0x34
 800fb62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb64:	613b      	str	r3, [r7, #16]
	__asm volatile
 800fb66:	693b      	ldr	r3, [r7, #16]
 800fb68:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800fb6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800fb6e:	4618      	mov	r0, r3
 800fb70:	3738      	adds	r7, #56	; 0x38
 800fb72:	46bd      	mov	sp, r7
 800fb74:	bd80      	pop	{r7, pc}

0800fb76 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800fb76:	b580      	push	{r7, lr}
 800fb78:	b084      	sub	sp, #16
 800fb7a:	af00      	add	r7, sp, #0
 800fb7c:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800fb7e:	687b      	ldr	r3, [r7, #4]
 800fb80:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800fb82:	68fb      	ldr	r3, [r7, #12]
 800fb84:	2b00      	cmp	r3, #0
 800fb86:	d109      	bne.n	800fb9c <vQueueDelete+0x26>
	__asm volatile
 800fb88:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fb8c:	f383 8811 	msr	BASEPRI, r3
 800fb90:	f3bf 8f6f 	isb	sy
 800fb94:	f3bf 8f4f 	dsb	sy
 800fb98:	60bb      	str	r3, [r7, #8]
 800fb9a:	e7fe      	b.n	800fb9a <vQueueDelete+0x24>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800fb9c:	68f8      	ldr	r0, [r7, #12]
 800fb9e:	f000 f95d 	bl	800fe5c <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800fba2:	68fb      	ldr	r3, [r7, #12]
 800fba4:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800fba8:	2b00      	cmp	r3, #0
 800fbaa:	d102      	bne.n	800fbb2 <vQueueDelete+0x3c>
		{
			vPortFree( pxQueue );
 800fbac:	68f8      	ldr	r0, [r7, #12]
 800fbae:	f7fe ff49 	bl	800ea44 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800fbb2:	bf00      	nop
 800fbb4:	3710      	adds	r7, #16
 800fbb6:	46bd      	mov	sp, r7
 800fbb8:	bd80      	pop	{r7, pc}

0800fbba <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800fbba:	b480      	push	{r7}
 800fbbc:	b085      	sub	sp, #20
 800fbbe:	af00      	add	r7, sp, #0
 800fbc0:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800fbc2:	687b      	ldr	r3, [r7, #4]
 800fbc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fbc6:	2b00      	cmp	r3, #0
 800fbc8:	d006      	beq.n	800fbd8 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800fbca:	687b      	ldr	r3, [r7, #4]
 800fbcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fbce:	681b      	ldr	r3, [r3, #0]
 800fbd0:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 800fbd4:	60fb      	str	r3, [r7, #12]
 800fbd6:	e001      	b.n	800fbdc <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800fbd8:	2300      	movs	r3, #0
 800fbda:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800fbdc:	68fb      	ldr	r3, [r7, #12]
	}
 800fbde:	4618      	mov	r0, r3
 800fbe0:	3714      	adds	r7, #20
 800fbe2:	46bd      	mov	sp, r7
 800fbe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbe8:	4770      	bx	lr

0800fbea <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800fbea:	b580      	push	{r7, lr}
 800fbec:	b086      	sub	sp, #24
 800fbee:	af00      	add	r7, sp, #0
 800fbf0:	60f8      	str	r0, [r7, #12]
 800fbf2:	60b9      	str	r1, [r7, #8]
 800fbf4:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800fbf6:	2300      	movs	r3, #0
 800fbf8:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800fbfa:	68fb      	ldr	r3, [r7, #12]
 800fbfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fbfe:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800fc00:	68fb      	ldr	r3, [r7, #12]
 800fc02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fc04:	2b00      	cmp	r3, #0
 800fc06:	d10d      	bne.n	800fc24 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800fc08:	68fb      	ldr	r3, [r7, #12]
 800fc0a:	681b      	ldr	r3, [r3, #0]
 800fc0c:	2b00      	cmp	r3, #0
 800fc0e:	d14d      	bne.n	800fcac <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800fc10:	68fb      	ldr	r3, [r7, #12]
 800fc12:	689b      	ldr	r3, [r3, #8]
 800fc14:	4618      	mov	r0, r3
 800fc16:	f001 f87d 	bl	8010d14 <xTaskPriorityDisinherit>
 800fc1a:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800fc1c:	68fb      	ldr	r3, [r7, #12]
 800fc1e:	2200      	movs	r2, #0
 800fc20:	609a      	str	r2, [r3, #8]
 800fc22:	e043      	b.n	800fcac <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800fc24:	687b      	ldr	r3, [r7, #4]
 800fc26:	2b00      	cmp	r3, #0
 800fc28:	d119      	bne.n	800fc5e <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800fc2a:	68fb      	ldr	r3, [r7, #12]
 800fc2c:	6858      	ldr	r0, [r3, #4]
 800fc2e:	68fb      	ldr	r3, [r7, #12]
 800fc30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fc32:	461a      	mov	r2, r3
 800fc34:	68b9      	ldr	r1, [r7, #8]
 800fc36:	f001 ffa9 	bl	8011b8c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800fc3a:	68fb      	ldr	r3, [r7, #12]
 800fc3c:	685a      	ldr	r2, [r3, #4]
 800fc3e:	68fb      	ldr	r3, [r7, #12]
 800fc40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fc42:	441a      	add	r2, r3
 800fc44:	68fb      	ldr	r3, [r7, #12]
 800fc46:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800fc48:	68fb      	ldr	r3, [r7, #12]
 800fc4a:	685a      	ldr	r2, [r3, #4]
 800fc4c:	68fb      	ldr	r3, [r7, #12]
 800fc4e:	689b      	ldr	r3, [r3, #8]
 800fc50:	429a      	cmp	r2, r3
 800fc52:	d32b      	bcc.n	800fcac <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800fc54:	68fb      	ldr	r3, [r7, #12]
 800fc56:	681a      	ldr	r2, [r3, #0]
 800fc58:	68fb      	ldr	r3, [r7, #12]
 800fc5a:	605a      	str	r2, [r3, #4]
 800fc5c:	e026      	b.n	800fcac <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800fc5e:	68fb      	ldr	r3, [r7, #12]
 800fc60:	68d8      	ldr	r0, [r3, #12]
 800fc62:	68fb      	ldr	r3, [r7, #12]
 800fc64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fc66:	461a      	mov	r2, r3
 800fc68:	68b9      	ldr	r1, [r7, #8]
 800fc6a:	f001 ff8f 	bl	8011b8c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800fc6e:	68fb      	ldr	r3, [r7, #12]
 800fc70:	68da      	ldr	r2, [r3, #12]
 800fc72:	68fb      	ldr	r3, [r7, #12]
 800fc74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fc76:	425b      	negs	r3, r3
 800fc78:	441a      	add	r2, r3
 800fc7a:	68fb      	ldr	r3, [r7, #12]
 800fc7c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800fc7e:	68fb      	ldr	r3, [r7, #12]
 800fc80:	68da      	ldr	r2, [r3, #12]
 800fc82:	68fb      	ldr	r3, [r7, #12]
 800fc84:	681b      	ldr	r3, [r3, #0]
 800fc86:	429a      	cmp	r2, r3
 800fc88:	d207      	bcs.n	800fc9a <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800fc8a:	68fb      	ldr	r3, [r7, #12]
 800fc8c:	689a      	ldr	r2, [r3, #8]
 800fc8e:	68fb      	ldr	r3, [r7, #12]
 800fc90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fc92:	425b      	negs	r3, r3
 800fc94:	441a      	add	r2, r3
 800fc96:	68fb      	ldr	r3, [r7, #12]
 800fc98:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800fc9a:	687b      	ldr	r3, [r7, #4]
 800fc9c:	2b02      	cmp	r3, #2
 800fc9e:	d105      	bne.n	800fcac <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800fca0:	693b      	ldr	r3, [r7, #16]
 800fca2:	2b00      	cmp	r3, #0
 800fca4:	d002      	beq.n	800fcac <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800fca6:	693b      	ldr	r3, [r7, #16]
 800fca8:	3b01      	subs	r3, #1
 800fcaa:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800fcac:	693b      	ldr	r3, [r7, #16]
 800fcae:	1c5a      	adds	r2, r3, #1
 800fcb0:	68fb      	ldr	r3, [r7, #12]
 800fcb2:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800fcb4:	697b      	ldr	r3, [r7, #20]
}
 800fcb6:	4618      	mov	r0, r3
 800fcb8:	3718      	adds	r7, #24
 800fcba:	46bd      	mov	sp, r7
 800fcbc:	bd80      	pop	{r7, pc}

0800fcbe <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800fcbe:	b580      	push	{r7, lr}
 800fcc0:	b082      	sub	sp, #8
 800fcc2:	af00      	add	r7, sp, #0
 800fcc4:	6078      	str	r0, [r7, #4]
 800fcc6:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800fcc8:	687b      	ldr	r3, [r7, #4]
 800fcca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fccc:	2b00      	cmp	r3, #0
 800fcce:	d018      	beq.n	800fd02 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800fcd0:	687b      	ldr	r3, [r7, #4]
 800fcd2:	68da      	ldr	r2, [r3, #12]
 800fcd4:	687b      	ldr	r3, [r7, #4]
 800fcd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fcd8:	441a      	add	r2, r3
 800fcda:	687b      	ldr	r3, [r7, #4]
 800fcdc:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800fcde:	687b      	ldr	r3, [r7, #4]
 800fce0:	68da      	ldr	r2, [r3, #12]
 800fce2:	687b      	ldr	r3, [r7, #4]
 800fce4:	689b      	ldr	r3, [r3, #8]
 800fce6:	429a      	cmp	r2, r3
 800fce8:	d303      	bcc.n	800fcf2 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800fcea:	687b      	ldr	r3, [r7, #4]
 800fcec:	681a      	ldr	r2, [r3, #0]
 800fcee:	687b      	ldr	r3, [r7, #4]
 800fcf0:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800fcf2:	687b      	ldr	r3, [r7, #4]
 800fcf4:	68d9      	ldr	r1, [r3, #12]
 800fcf6:	687b      	ldr	r3, [r7, #4]
 800fcf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fcfa:	461a      	mov	r2, r3
 800fcfc:	6838      	ldr	r0, [r7, #0]
 800fcfe:	f001 ff45 	bl	8011b8c <memcpy>
	}
}
 800fd02:	bf00      	nop
 800fd04:	3708      	adds	r7, #8
 800fd06:	46bd      	mov	sp, r7
 800fd08:	bd80      	pop	{r7, pc}

0800fd0a <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800fd0a:	b580      	push	{r7, lr}
 800fd0c:	b084      	sub	sp, #16
 800fd0e:	af00      	add	r7, sp, #0
 800fd10:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800fd12:	f7fe fcbb 	bl	800e68c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800fd16:	687b      	ldr	r3, [r7, #4]
 800fd18:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800fd1c:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800fd1e:	e011      	b.n	800fd44 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800fd20:	687b      	ldr	r3, [r7, #4]
 800fd22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fd24:	2b00      	cmp	r3, #0
 800fd26:	d012      	beq.n	800fd4e <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800fd28:	687b      	ldr	r3, [r7, #4]
 800fd2a:	3324      	adds	r3, #36	; 0x24
 800fd2c:	4618      	mov	r0, r3
 800fd2e:	f000 fd7d 	bl	801082c <xTaskRemoveFromEventList>
 800fd32:	4603      	mov	r3, r0
 800fd34:	2b00      	cmp	r3, #0
 800fd36:	d001      	beq.n	800fd3c <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800fd38:	f000 fe52 	bl	80109e0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800fd3c:	7bfb      	ldrb	r3, [r7, #15]
 800fd3e:	3b01      	subs	r3, #1
 800fd40:	b2db      	uxtb	r3, r3
 800fd42:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800fd44:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800fd48:	2b00      	cmp	r3, #0
 800fd4a:	dce9      	bgt.n	800fd20 <prvUnlockQueue+0x16>
 800fd4c:	e000      	b.n	800fd50 <prvUnlockQueue+0x46>
					break;
 800fd4e:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800fd50:	687b      	ldr	r3, [r7, #4]
 800fd52:	22ff      	movs	r2, #255	; 0xff
 800fd54:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800fd58:	f7fe fcc6 	bl	800e6e8 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800fd5c:	f7fe fc96 	bl	800e68c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800fd60:	687b      	ldr	r3, [r7, #4]
 800fd62:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800fd66:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800fd68:	e011      	b.n	800fd8e <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800fd6a:	687b      	ldr	r3, [r7, #4]
 800fd6c:	691b      	ldr	r3, [r3, #16]
 800fd6e:	2b00      	cmp	r3, #0
 800fd70:	d012      	beq.n	800fd98 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800fd72:	687b      	ldr	r3, [r7, #4]
 800fd74:	3310      	adds	r3, #16
 800fd76:	4618      	mov	r0, r3
 800fd78:	f000 fd58 	bl	801082c <xTaskRemoveFromEventList>
 800fd7c:	4603      	mov	r3, r0
 800fd7e:	2b00      	cmp	r3, #0
 800fd80:	d001      	beq.n	800fd86 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800fd82:	f000 fe2d 	bl	80109e0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800fd86:	7bbb      	ldrb	r3, [r7, #14]
 800fd88:	3b01      	subs	r3, #1
 800fd8a:	b2db      	uxtb	r3, r3
 800fd8c:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800fd8e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800fd92:	2b00      	cmp	r3, #0
 800fd94:	dce9      	bgt.n	800fd6a <prvUnlockQueue+0x60>
 800fd96:	e000      	b.n	800fd9a <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800fd98:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800fd9a:	687b      	ldr	r3, [r7, #4]
 800fd9c:	22ff      	movs	r2, #255	; 0xff
 800fd9e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800fda2:	f7fe fca1 	bl	800e6e8 <vPortExitCritical>
}
 800fda6:	bf00      	nop
 800fda8:	3710      	adds	r7, #16
 800fdaa:	46bd      	mov	sp, r7
 800fdac:	bd80      	pop	{r7, pc}

0800fdae <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800fdae:	b580      	push	{r7, lr}
 800fdb0:	b084      	sub	sp, #16
 800fdb2:	af00      	add	r7, sp, #0
 800fdb4:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800fdb6:	f7fe fc69 	bl	800e68c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800fdba:	687b      	ldr	r3, [r7, #4]
 800fdbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fdbe:	2b00      	cmp	r3, #0
 800fdc0:	d102      	bne.n	800fdc8 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800fdc2:	2301      	movs	r3, #1
 800fdc4:	60fb      	str	r3, [r7, #12]
 800fdc6:	e001      	b.n	800fdcc <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800fdc8:	2300      	movs	r3, #0
 800fdca:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800fdcc:	f7fe fc8c 	bl	800e6e8 <vPortExitCritical>

	return xReturn;
 800fdd0:	68fb      	ldr	r3, [r7, #12]
}
 800fdd2:	4618      	mov	r0, r3
 800fdd4:	3710      	adds	r7, #16
 800fdd6:	46bd      	mov	sp, r7
 800fdd8:	bd80      	pop	{r7, pc}

0800fdda <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800fdda:	b580      	push	{r7, lr}
 800fddc:	b084      	sub	sp, #16
 800fdde:	af00      	add	r7, sp, #0
 800fde0:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800fde2:	f7fe fc53 	bl	800e68c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800fde6:	687b      	ldr	r3, [r7, #4]
 800fde8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800fdea:	687b      	ldr	r3, [r7, #4]
 800fdec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fdee:	429a      	cmp	r2, r3
 800fdf0:	d102      	bne.n	800fdf8 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800fdf2:	2301      	movs	r3, #1
 800fdf4:	60fb      	str	r3, [r7, #12]
 800fdf6:	e001      	b.n	800fdfc <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800fdf8:	2300      	movs	r3, #0
 800fdfa:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800fdfc:	f7fe fc74 	bl	800e6e8 <vPortExitCritical>

	return xReturn;
 800fe00:	68fb      	ldr	r3, [r7, #12]
}
 800fe02:	4618      	mov	r0, r3
 800fe04:	3710      	adds	r7, #16
 800fe06:	46bd      	mov	sp, r7
 800fe08:	bd80      	pop	{r7, pc}
	...

0800fe0c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800fe0c:	b480      	push	{r7}
 800fe0e:	b085      	sub	sp, #20
 800fe10:	af00      	add	r7, sp, #0
 800fe12:	6078      	str	r0, [r7, #4]
 800fe14:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800fe16:	2300      	movs	r3, #0
 800fe18:	60fb      	str	r3, [r7, #12]
 800fe1a:	e014      	b.n	800fe46 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800fe1c:	4a0e      	ldr	r2, [pc, #56]	; (800fe58 <vQueueAddToRegistry+0x4c>)
 800fe1e:	68fb      	ldr	r3, [r7, #12]
 800fe20:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800fe24:	2b00      	cmp	r3, #0
 800fe26:	d10b      	bne.n	800fe40 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800fe28:	490b      	ldr	r1, [pc, #44]	; (800fe58 <vQueueAddToRegistry+0x4c>)
 800fe2a:	68fb      	ldr	r3, [r7, #12]
 800fe2c:	683a      	ldr	r2, [r7, #0]
 800fe2e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800fe32:	4a09      	ldr	r2, [pc, #36]	; (800fe58 <vQueueAddToRegistry+0x4c>)
 800fe34:	68fb      	ldr	r3, [r7, #12]
 800fe36:	00db      	lsls	r3, r3, #3
 800fe38:	4413      	add	r3, r2
 800fe3a:	687a      	ldr	r2, [r7, #4]
 800fe3c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800fe3e:	e005      	b.n	800fe4c <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800fe40:	68fb      	ldr	r3, [r7, #12]
 800fe42:	3301      	adds	r3, #1
 800fe44:	60fb      	str	r3, [r7, #12]
 800fe46:	68fb      	ldr	r3, [r7, #12]
 800fe48:	2b07      	cmp	r3, #7
 800fe4a:	d9e7      	bls.n	800fe1c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800fe4c:	bf00      	nop
 800fe4e:	3714      	adds	r7, #20
 800fe50:	46bd      	mov	sp, r7
 800fe52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe56:	4770      	bx	lr
 800fe58:	2000627c 	.word	0x2000627c

0800fe5c <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800fe5c:	b480      	push	{r7}
 800fe5e:	b085      	sub	sp, #20
 800fe60:	af00      	add	r7, sp, #0
 800fe62:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800fe64:	2300      	movs	r3, #0
 800fe66:	60fb      	str	r3, [r7, #12]
 800fe68:	e016      	b.n	800fe98 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800fe6a:	4a10      	ldr	r2, [pc, #64]	; (800feac <vQueueUnregisterQueue+0x50>)
 800fe6c:	68fb      	ldr	r3, [r7, #12]
 800fe6e:	00db      	lsls	r3, r3, #3
 800fe70:	4413      	add	r3, r2
 800fe72:	685b      	ldr	r3, [r3, #4]
 800fe74:	687a      	ldr	r2, [r7, #4]
 800fe76:	429a      	cmp	r2, r3
 800fe78:	d10b      	bne.n	800fe92 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800fe7a:	4a0c      	ldr	r2, [pc, #48]	; (800feac <vQueueUnregisterQueue+0x50>)
 800fe7c:	68fb      	ldr	r3, [r7, #12]
 800fe7e:	2100      	movs	r1, #0
 800fe80:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800fe84:	4a09      	ldr	r2, [pc, #36]	; (800feac <vQueueUnregisterQueue+0x50>)
 800fe86:	68fb      	ldr	r3, [r7, #12]
 800fe88:	00db      	lsls	r3, r3, #3
 800fe8a:	4413      	add	r3, r2
 800fe8c:	2200      	movs	r2, #0
 800fe8e:	605a      	str	r2, [r3, #4]
				break;
 800fe90:	e005      	b.n	800fe9e <vQueueUnregisterQueue+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800fe92:	68fb      	ldr	r3, [r7, #12]
 800fe94:	3301      	adds	r3, #1
 800fe96:	60fb      	str	r3, [r7, #12]
 800fe98:	68fb      	ldr	r3, [r7, #12]
 800fe9a:	2b07      	cmp	r3, #7
 800fe9c:	d9e5      	bls.n	800fe6a <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800fe9e:	bf00      	nop
 800fea0:	3714      	adds	r7, #20
 800fea2:	46bd      	mov	sp, r7
 800fea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fea8:	4770      	bx	lr
 800feaa:	bf00      	nop
 800feac:	2000627c 	.word	0x2000627c

0800feb0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800feb0:	b580      	push	{r7, lr}
 800feb2:	b086      	sub	sp, #24
 800feb4:	af00      	add	r7, sp, #0
 800feb6:	60f8      	str	r0, [r7, #12]
 800feb8:	60b9      	str	r1, [r7, #8]
 800feba:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800febc:	68fb      	ldr	r3, [r7, #12]
 800febe:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800fec0:	f7fe fbe4 	bl	800e68c <vPortEnterCritical>
 800fec4:	697b      	ldr	r3, [r7, #20]
 800fec6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800feca:	b25b      	sxtb	r3, r3
 800fecc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fed0:	d103      	bne.n	800feda <vQueueWaitForMessageRestricted+0x2a>
 800fed2:	697b      	ldr	r3, [r7, #20]
 800fed4:	2200      	movs	r2, #0
 800fed6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800feda:	697b      	ldr	r3, [r7, #20]
 800fedc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800fee0:	b25b      	sxtb	r3, r3
 800fee2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fee6:	d103      	bne.n	800fef0 <vQueueWaitForMessageRestricted+0x40>
 800fee8:	697b      	ldr	r3, [r7, #20]
 800feea:	2200      	movs	r2, #0
 800feec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800fef0:	f7fe fbfa 	bl	800e6e8 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800fef4:	697b      	ldr	r3, [r7, #20]
 800fef6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fef8:	2b00      	cmp	r3, #0
 800fefa:	d106      	bne.n	800ff0a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800fefc:	697b      	ldr	r3, [r7, #20]
 800fefe:	3324      	adds	r3, #36	; 0x24
 800ff00:	687a      	ldr	r2, [r7, #4]
 800ff02:	68b9      	ldr	r1, [r7, #8]
 800ff04:	4618      	mov	r0, r3
 800ff06:	f000 fc67 	bl	80107d8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800ff0a:	6978      	ldr	r0, [r7, #20]
 800ff0c:	f7ff fefd 	bl	800fd0a <prvUnlockQueue>
	}
 800ff10:	bf00      	nop
 800ff12:	3718      	adds	r7, #24
 800ff14:	46bd      	mov	sp, r7
 800ff16:	bd80      	pop	{r7, pc}

0800ff18 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800ff18:	b580      	push	{r7, lr}
 800ff1a:	b08e      	sub	sp, #56	; 0x38
 800ff1c:	af04      	add	r7, sp, #16
 800ff1e:	60f8      	str	r0, [r7, #12]
 800ff20:	60b9      	str	r1, [r7, #8]
 800ff22:	607a      	str	r2, [r7, #4]
 800ff24:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800ff26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ff28:	2b00      	cmp	r3, #0
 800ff2a:	d109      	bne.n	800ff40 <xTaskCreateStatic+0x28>
 800ff2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ff30:	f383 8811 	msr	BASEPRI, r3
 800ff34:	f3bf 8f6f 	isb	sy
 800ff38:	f3bf 8f4f 	dsb	sy
 800ff3c:	623b      	str	r3, [r7, #32]
 800ff3e:	e7fe      	b.n	800ff3e <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 800ff40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff42:	2b00      	cmp	r3, #0
 800ff44:	d109      	bne.n	800ff5a <xTaskCreateStatic+0x42>
 800ff46:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ff4a:	f383 8811 	msr	BASEPRI, r3
 800ff4e:	f3bf 8f6f 	isb	sy
 800ff52:	f3bf 8f4f 	dsb	sy
 800ff56:	61fb      	str	r3, [r7, #28]
 800ff58:	e7fe      	b.n	800ff58 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800ff5a:	235c      	movs	r3, #92	; 0x5c
 800ff5c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800ff5e:	693b      	ldr	r3, [r7, #16]
 800ff60:	2b5c      	cmp	r3, #92	; 0x5c
 800ff62:	d009      	beq.n	800ff78 <xTaskCreateStatic+0x60>
 800ff64:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ff68:	f383 8811 	msr	BASEPRI, r3
 800ff6c:	f3bf 8f6f 	isb	sy
 800ff70:	f3bf 8f4f 	dsb	sy
 800ff74:	61bb      	str	r3, [r7, #24]
 800ff76:	e7fe      	b.n	800ff76 <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800ff78:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800ff7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff7c:	2b00      	cmp	r3, #0
 800ff7e:	d01e      	beq.n	800ffbe <xTaskCreateStatic+0xa6>
 800ff80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ff82:	2b00      	cmp	r3, #0
 800ff84:	d01b      	beq.n	800ffbe <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800ff86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff88:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800ff8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ff8c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ff8e:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800ff90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ff92:	2202      	movs	r2, #2
 800ff94:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800ff98:	2300      	movs	r3, #0
 800ff9a:	9303      	str	r3, [sp, #12]
 800ff9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ff9e:	9302      	str	r3, [sp, #8]
 800ffa0:	f107 0314 	add.w	r3, r7, #20
 800ffa4:	9301      	str	r3, [sp, #4]
 800ffa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ffa8:	9300      	str	r3, [sp, #0]
 800ffaa:	683b      	ldr	r3, [r7, #0]
 800ffac:	687a      	ldr	r2, [r7, #4]
 800ffae:	68b9      	ldr	r1, [r7, #8]
 800ffb0:	68f8      	ldr	r0, [r7, #12]
 800ffb2:	f000 f850 	bl	8010056 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800ffb6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ffb8:	f000 f8dc 	bl	8010174 <prvAddNewTaskToReadyList>
 800ffbc:	e001      	b.n	800ffc2 <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 800ffbe:	2300      	movs	r3, #0
 800ffc0:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800ffc2:	697b      	ldr	r3, [r7, #20]
	}
 800ffc4:	4618      	mov	r0, r3
 800ffc6:	3728      	adds	r7, #40	; 0x28
 800ffc8:	46bd      	mov	sp, r7
 800ffca:	bd80      	pop	{r7, pc}

0800ffcc <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800ffcc:	b580      	push	{r7, lr}
 800ffce:	b08c      	sub	sp, #48	; 0x30
 800ffd0:	af04      	add	r7, sp, #16
 800ffd2:	60f8      	str	r0, [r7, #12]
 800ffd4:	60b9      	str	r1, [r7, #8]
 800ffd6:	603b      	str	r3, [r7, #0]
 800ffd8:	4613      	mov	r3, r2
 800ffda:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800ffdc:	88fb      	ldrh	r3, [r7, #6]
 800ffde:	009b      	lsls	r3, r3, #2
 800ffe0:	4618      	mov	r0, r3
 800ffe2:	f7fe fc6d 	bl	800e8c0 <pvPortMalloc>
 800ffe6:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800ffe8:	697b      	ldr	r3, [r7, #20]
 800ffea:	2b00      	cmp	r3, #0
 800ffec:	d00e      	beq.n	801000c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800ffee:	205c      	movs	r0, #92	; 0x5c
 800fff0:	f7fe fc66 	bl	800e8c0 <pvPortMalloc>
 800fff4:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800fff6:	69fb      	ldr	r3, [r7, #28]
 800fff8:	2b00      	cmp	r3, #0
 800fffa:	d003      	beq.n	8010004 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800fffc:	69fb      	ldr	r3, [r7, #28]
 800fffe:	697a      	ldr	r2, [r7, #20]
 8010000:	631a      	str	r2, [r3, #48]	; 0x30
 8010002:	e005      	b.n	8010010 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8010004:	6978      	ldr	r0, [r7, #20]
 8010006:	f7fe fd1d 	bl	800ea44 <vPortFree>
 801000a:	e001      	b.n	8010010 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 801000c:	2300      	movs	r3, #0
 801000e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8010010:	69fb      	ldr	r3, [r7, #28]
 8010012:	2b00      	cmp	r3, #0
 8010014:	d017      	beq.n	8010046 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8010016:	69fb      	ldr	r3, [r7, #28]
 8010018:	2200      	movs	r2, #0
 801001a:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 801001e:	88fa      	ldrh	r2, [r7, #6]
 8010020:	2300      	movs	r3, #0
 8010022:	9303      	str	r3, [sp, #12]
 8010024:	69fb      	ldr	r3, [r7, #28]
 8010026:	9302      	str	r3, [sp, #8]
 8010028:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801002a:	9301      	str	r3, [sp, #4]
 801002c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801002e:	9300      	str	r3, [sp, #0]
 8010030:	683b      	ldr	r3, [r7, #0]
 8010032:	68b9      	ldr	r1, [r7, #8]
 8010034:	68f8      	ldr	r0, [r7, #12]
 8010036:	f000 f80e 	bl	8010056 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 801003a:	69f8      	ldr	r0, [r7, #28]
 801003c:	f000 f89a 	bl	8010174 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8010040:	2301      	movs	r3, #1
 8010042:	61bb      	str	r3, [r7, #24]
 8010044:	e002      	b.n	801004c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8010046:	f04f 33ff 	mov.w	r3, #4294967295
 801004a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 801004c:	69bb      	ldr	r3, [r7, #24]
	}
 801004e:	4618      	mov	r0, r3
 8010050:	3720      	adds	r7, #32
 8010052:	46bd      	mov	sp, r7
 8010054:	bd80      	pop	{r7, pc}

08010056 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8010056:	b580      	push	{r7, lr}
 8010058:	b088      	sub	sp, #32
 801005a:	af00      	add	r7, sp, #0
 801005c:	60f8      	str	r0, [r7, #12]
 801005e:	60b9      	str	r1, [r7, #8]
 8010060:	607a      	str	r2, [r7, #4]
 8010062:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8010064:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010066:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8010068:	687b      	ldr	r3, [r7, #4]
 801006a:	009b      	lsls	r3, r3, #2
 801006c:	461a      	mov	r2, r3
 801006e:	21a5      	movs	r1, #165	; 0xa5
 8010070:	f001 fd97 	bl	8011ba2 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8010074:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010076:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8010078:	687b      	ldr	r3, [r7, #4]
 801007a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 801007e:	3b01      	subs	r3, #1
 8010080:	009b      	lsls	r3, r3, #2
 8010082:	4413      	add	r3, r2
 8010084:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8010086:	69bb      	ldr	r3, [r7, #24]
 8010088:	f023 0307 	bic.w	r3, r3, #7
 801008c:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 801008e:	69bb      	ldr	r3, [r7, #24]
 8010090:	f003 0307 	and.w	r3, r3, #7
 8010094:	2b00      	cmp	r3, #0
 8010096:	d009      	beq.n	80100ac <prvInitialiseNewTask+0x56>
 8010098:	f04f 0350 	mov.w	r3, #80	; 0x50
 801009c:	f383 8811 	msr	BASEPRI, r3
 80100a0:	f3bf 8f6f 	isb	sy
 80100a4:	f3bf 8f4f 	dsb	sy
 80100a8:	617b      	str	r3, [r7, #20]
 80100aa:	e7fe      	b.n	80100aa <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80100ac:	68bb      	ldr	r3, [r7, #8]
 80100ae:	2b00      	cmp	r3, #0
 80100b0:	d01f      	beq.n	80100f2 <prvInitialiseNewTask+0x9c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80100b2:	2300      	movs	r3, #0
 80100b4:	61fb      	str	r3, [r7, #28]
 80100b6:	e012      	b.n	80100de <prvInitialiseNewTask+0x88>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80100b8:	68ba      	ldr	r2, [r7, #8]
 80100ba:	69fb      	ldr	r3, [r7, #28]
 80100bc:	4413      	add	r3, r2
 80100be:	7819      	ldrb	r1, [r3, #0]
 80100c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80100c2:	69fb      	ldr	r3, [r7, #28]
 80100c4:	4413      	add	r3, r2
 80100c6:	3334      	adds	r3, #52	; 0x34
 80100c8:	460a      	mov	r2, r1
 80100ca:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80100cc:	68ba      	ldr	r2, [r7, #8]
 80100ce:	69fb      	ldr	r3, [r7, #28]
 80100d0:	4413      	add	r3, r2
 80100d2:	781b      	ldrb	r3, [r3, #0]
 80100d4:	2b00      	cmp	r3, #0
 80100d6:	d006      	beq.n	80100e6 <prvInitialiseNewTask+0x90>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80100d8:	69fb      	ldr	r3, [r7, #28]
 80100da:	3301      	adds	r3, #1
 80100dc:	61fb      	str	r3, [r7, #28]
 80100de:	69fb      	ldr	r3, [r7, #28]
 80100e0:	2b0f      	cmp	r3, #15
 80100e2:	d9e9      	bls.n	80100b8 <prvInitialiseNewTask+0x62>
 80100e4:	e000      	b.n	80100e8 <prvInitialiseNewTask+0x92>
			{
				break;
 80100e6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80100e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80100ea:	2200      	movs	r2, #0
 80100ec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80100f0:	e003      	b.n	80100fa <prvInitialiseNewTask+0xa4>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80100f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80100f4:	2200      	movs	r2, #0
 80100f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80100fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80100fc:	2b37      	cmp	r3, #55	; 0x37
 80100fe:	d901      	bls.n	8010104 <prvInitialiseNewTask+0xae>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8010100:	2337      	movs	r3, #55	; 0x37
 8010102:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8010104:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010106:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010108:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 801010a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801010c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801010e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8010110:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010112:	2200      	movs	r2, #0
 8010114:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8010116:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010118:	3304      	adds	r3, #4
 801011a:	4618      	mov	r0, r3
 801011c:	f7fe fdc6 	bl	800ecac <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8010120:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010122:	3318      	adds	r3, #24
 8010124:	4618      	mov	r0, r3
 8010126:	f7fe fdc1 	bl	800ecac <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 801012a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801012c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801012e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010130:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010132:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8010136:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010138:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 801013a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801013c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801013e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8010140:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010142:	2200      	movs	r2, #0
 8010144:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8010146:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010148:	2200      	movs	r2, #0
 801014a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 801014e:	683a      	ldr	r2, [r7, #0]
 8010150:	68f9      	ldr	r1, [r7, #12]
 8010152:	69b8      	ldr	r0, [r7, #24]
 8010154:	f7fe f970 	bl	800e438 <pxPortInitialiseStack>
 8010158:	4602      	mov	r2, r0
 801015a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801015c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 801015e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010160:	2b00      	cmp	r3, #0
 8010162:	d002      	beq.n	801016a <prvInitialiseNewTask+0x114>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8010164:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010166:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010168:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801016a:	bf00      	nop
 801016c:	3720      	adds	r7, #32
 801016e:	46bd      	mov	sp, r7
 8010170:	bd80      	pop	{r7, pc}
	...

08010174 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8010174:	b580      	push	{r7, lr}
 8010176:	b082      	sub	sp, #8
 8010178:	af00      	add	r7, sp, #0
 801017a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 801017c:	f7fe fa86 	bl	800e68c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8010180:	4b2d      	ldr	r3, [pc, #180]	; (8010238 <prvAddNewTaskToReadyList+0xc4>)
 8010182:	681b      	ldr	r3, [r3, #0]
 8010184:	3301      	adds	r3, #1
 8010186:	4a2c      	ldr	r2, [pc, #176]	; (8010238 <prvAddNewTaskToReadyList+0xc4>)
 8010188:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 801018a:	4b2c      	ldr	r3, [pc, #176]	; (801023c <prvAddNewTaskToReadyList+0xc8>)
 801018c:	681b      	ldr	r3, [r3, #0]
 801018e:	2b00      	cmp	r3, #0
 8010190:	d109      	bne.n	80101a6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8010192:	4a2a      	ldr	r2, [pc, #168]	; (801023c <prvAddNewTaskToReadyList+0xc8>)
 8010194:	687b      	ldr	r3, [r7, #4]
 8010196:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8010198:	4b27      	ldr	r3, [pc, #156]	; (8010238 <prvAddNewTaskToReadyList+0xc4>)
 801019a:	681b      	ldr	r3, [r3, #0]
 801019c:	2b01      	cmp	r3, #1
 801019e:	d110      	bne.n	80101c2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80101a0:	f000 fc68 	bl	8010a74 <prvInitialiseTaskLists>
 80101a4:	e00d      	b.n	80101c2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80101a6:	4b26      	ldr	r3, [pc, #152]	; (8010240 <prvAddNewTaskToReadyList+0xcc>)
 80101a8:	681b      	ldr	r3, [r3, #0]
 80101aa:	2b00      	cmp	r3, #0
 80101ac:	d109      	bne.n	80101c2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80101ae:	4b23      	ldr	r3, [pc, #140]	; (801023c <prvAddNewTaskToReadyList+0xc8>)
 80101b0:	681b      	ldr	r3, [r3, #0]
 80101b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80101b4:	687b      	ldr	r3, [r7, #4]
 80101b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80101b8:	429a      	cmp	r2, r3
 80101ba:	d802      	bhi.n	80101c2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80101bc:	4a1f      	ldr	r2, [pc, #124]	; (801023c <prvAddNewTaskToReadyList+0xc8>)
 80101be:	687b      	ldr	r3, [r7, #4]
 80101c0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80101c2:	4b20      	ldr	r3, [pc, #128]	; (8010244 <prvAddNewTaskToReadyList+0xd0>)
 80101c4:	681b      	ldr	r3, [r3, #0]
 80101c6:	3301      	adds	r3, #1
 80101c8:	4a1e      	ldr	r2, [pc, #120]	; (8010244 <prvAddNewTaskToReadyList+0xd0>)
 80101ca:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80101cc:	4b1d      	ldr	r3, [pc, #116]	; (8010244 <prvAddNewTaskToReadyList+0xd0>)
 80101ce:	681a      	ldr	r2, [r3, #0]
 80101d0:	687b      	ldr	r3, [r7, #4]
 80101d2:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80101d4:	687b      	ldr	r3, [r7, #4]
 80101d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80101d8:	4b1b      	ldr	r3, [pc, #108]	; (8010248 <prvAddNewTaskToReadyList+0xd4>)
 80101da:	681b      	ldr	r3, [r3, #0]
 80101dc:	429a      	cmp	r2, r3
 80101de:	d903      	bls.n	80101e8 <prvAddNewTaskToReadyList+0x74>
 80101e0:	687b      	ldr	r3, [r7, #4]
 80101e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80101e4:	4a18      	ldr	r2, [pc, #96]	; (8010248 <prvAddNewTaskToReadyList+0xd4>)
 80101e6:	6013      	str	r3, [r2, #0]
 80101e8:	687b      	ldr	r3, [r7, #4]
 80101ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80101ec:	4613      	mov	r3, r2
 80101ee:	009b      	lsls	r3, r3, #2
 80101f0:	4413      	add	r3, r2
 80101f2:	009b      	lsls	r3, r3, #2
 80101f4:	4a15      	ldr	r2, [pc, #84]	; (801024c <prvAddNewTaskToReadyList+0xd8>)
 80101f6:	441a      	add	r2, r3
 80101f8:	687b      	ldr	r3, [r7, #4]
 80101fa:	3304      	adds	r3, #4
 80101fc:	4619      	mov	r1, r3
 80101fe:	4610      	mov	r0, r2
 8010200:	f7fe fd61 	bl	800ecc6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8010204:	f7fe fa70 	bl	800e6e8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8010208:	4b0d      	ldr	r3, [pc, #52]	; (8010240 <prvAddNewTaskToReadyList+0xcc>)
 801020a:	681b      	ldr	r3, [r3, #0]
 801020c:	2b00      	cmp	r3, #0
 801020e:	d00e      	beq.n	801022e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8010210:	4b0a      	ldr	r3, [pc, #40]	; (801023c <prvAddNewTaskToReadyList+0xc8>)
 8010212:	681b      	ldr	r3, [r3, #0]
 8010214:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010216:	687b      	ldr	r3, [r7, #4]
 8010218:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801021a:	429a      	cmp	r2, r3
 801021c:	d207      	bcs.n	801022e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 801021e:	4b0c      	ldr	r3, [pc, #48]	; (8010250 <prvAddNewTaskToReadyList+0xdc>)
 8010220:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010224:	601a      	str	r2, [r3, #0]
 8010226:	f3bf 8f4f 	dsb	sy
 801022a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801022e:	bf00      	nop
 8010230:	3708      	adds	r7, #8
 8010232:	46bd      	mov	sp, r7
 8010234:	bd80      	pop	{r7, pc}
 8010236:	bf00      	nop
 8010238:	20005eac 	.word	0x20005eac
 801023c:	200059d8 	.word	0x200059d8
 8010240:	20005eb8 	.word	0x20005eb8
 8010244:	20005ec8 	.word	0x20005ec8
 8010248:	20005eb4 	.word	0x20005eb4
 801024c:	200059dc 	.word	0x200059dc
 8010250:	e000ed04 	.word	0xe000ed04

08010254 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8010254:	b580      	push	{r7, lr}
 8010256:	b084      	sub	sp, #16
 8010258:	af00      	add	r7, sp, #0
 801025a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 801025c:	2300      	movs	r3, #0
 801025e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8010260:	687b      	ldr	r3, [r7, #4]
 8010262:	2b00      	cmp	r3, #0
 8010264:	d016      	beq.n	8010294 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8010266:	4b13      	ldr	r3, [pc, #76]	; (80102b4 <vTaskDelay+0x60>)
 8010268:	681b      	ldr	r3, [r3, #0]
 801026a:	2b00      	cmp	r3, #0
 801026c:	d009      	beq.n	8010282 <vTaskDelay+0x2e>
 801026e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010272:	f383 8811 	msr	BASEPRI, r3
 8010276:	f3bf 8f6f 	isb	sy
 801027a:	f3bf 8f4f 	dsb	sy
 801027e:	60bb      	str	r3, [r7, #8]
 8010280:	e7fe      	b.n	8010280 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8010282:	f000 f87f 	bl	8010384 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8010286:	2100      	movs	r1, #0
 8010288:	6878      	ldr	r0, [r7, #4]
 801028a:	f001 f873 	bl	8011374 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 801028e:	f000 f8bf 	bl	8010410 <xTaskResumeAll>
 8010292:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8010294:	68fb      	ldr	r3, [r7, #12]
 8010296:	2b00      	cmp	r3, #0
 8010298:	d107      	bne.n	80102aa <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 801029a:	4b07      	ldr	r3, [pc, #28]	; (80102b8 <vTaskDelay+0x64>)
 801029c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80102a0:	601a      	str	r2, [r3, #0]
 80102a2:	f3bf 8f4f 	dsb	sy
 80102a6:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80102aa:	bf00      	nop
 80102ac:	3710      	adds	r7, #16
 80102ae:	46bd      	mov	sp, r7
 80102b0:	bd80      	pop	{r7, pc}
 80102b2:	bf00      	nop
 80102b4:	20005ed4 	.word	0x20005ed4
 80102b8:	e000ed04 	.word	0xe000ed04

080102bc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80102bc:	b580      	push	{r7, lr}
 80102be:	b08a      	sub	sp, #40	; 0x28
 80102c0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80102c2:	2300      	movs	r3, #0
 80102c4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80102c6:	2300      	movs	r3, #0
 80102c8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80102ca:	463a      	mov	r2, r7
 80102cc:	1d39      	adds	r1, r7, #4
 80102ce:	f107 0308 	add.w	r3, r7, #8
 80102d2:	4618      	mov	r0, r3
 80102d4:	f7fe f87c 	bl	800e3d0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80102d8:	6839      	ldr	r1, [r7, #0]
 80102da:	687b      	ldr	r3, [r7, #4]
 80102dc:	68ba      	ldr	r2, [r7, #8]
 80102de:	9202      	str	r2, [sp, #8]
 80102e0:	9301      	str	r3, [sp, #4]
 80102e2:	2300      	movs	r3, #0
 80102e4:	9300      	str	r3, [sp, #0]
 80102e6:	2300      	movs	r3, #0
 80102e8:	460a      	mov	r2, r1
 80102ea:	4920      	ldr	r1, [pc, #128]	; (801036c <vTaskStartScheduler+0xb0>)
 80102ec:	4820      	ldr	r0, [pc, #128]	; (8010370 <vTaskStartScheduler+0xb4>)
 80102ee:	f7ff fe13 	bl	800ff18 <xTaskCreateStatic>
 80102f2:	4602      	mov	r2, r0
 80102f4:	4b1f      	ldr	r3, [pc, #124]	; (8010374 <vTaskStartScheduler+0xb8>)
 80102f6:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80102f8:	4b1e      	ldr	r3, [pc, #120]	; (8010374 <vTaskStartScheduler+0xb8>)
 80102fa:	681b      	ldr	r3, [r3, #0]
 80102fc:	2b00      	cmp	r3, #0
 80102fe:	d002      	beq.n	8010306 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8010300:	2301      	movs	r3, #1
 8010302:	617b      	str	r3, [r7, #20]
 8010304:	e001      	b.n	801030a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8010306:	2300      	movs	r3, #0
 8010308:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 801030a:	697b      	ldr	r3, [r7, #20]
 801030c:	2b01      	cmp	r3, #1
 801030e:	d102      	bne.n	8010316 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8010310:	f001 f884 	bl	801141c <xTimerCreateTimerTask>
 8010314:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8010316:	697b      	ldr	r3, [r7, #20]
 8010318:	2b01      	cmp	r3, #1
 801031a:	d115      	bne.n	8010348 <vTaskStartScheduler+0x8c>
 801031c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010320:	f383 8811 	msr	BASEPRI, r3
 8010324:	f3bf 8f6f 	isb	sy
 8010328:	f3bf 8f4f 	dsb	sy
 801032c:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 801032e:	4b12      	ldr	r3, [pc, #72]	; (8010378 <vTaskStartScheduler+0xbc>)
 8010330:	f04f 32ff 	mov.w	r2, #4294967295
 8010334:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8010336:	4b11      	ldr	r3, [pc, #68]	; (801037c <vTaskStartScheduler+0xc0>)
 8010338:	2201      	movs	r2, #1
 801033a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 801033c:	4b10      	ldr	r3, [pc, #64]	; (8010380 <vTaskStartScheduler+0xc4>)
 801033e:	2200      	movs	r2, #0
 8010340:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8010342:	f7fe f905 	bl	800e550 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8010346:	e00d      	b.n	8010364 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8010348:	697b      	ldr	r3, [r7, #20]
 801034a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801034e:	d109      	bne.n	8010364 <vTaskStartScheduler+0xa8>
 8010350:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010354:	f383 8811 	msr	BASEPRI, r3
 8010358:	f3bf 8f6f 	isb	sy
 801035c:	f3bf 8f4f 	dsb	sy
 8010360:	60fb      	str	r3, [r7, #12]
 8010362:	e7fe      	b.n	8010362 <vTaskStartScheduler+0xa6>
}
 8010364:	bf00      	nop
 8010366:	3718      	adds	r7, #24
 8010368:	46bd      	mov	sp, r7
 801036a:	bd80      	pop	{r7, pc}
 801036c:	08014f70 	.word	0x08014f70
 8010370:	080109f9 	.word	0x080109f9
 8010374:	20005ed0 	.word	0x20005ed0
 8010378:	20005ecc 	.word	0x20005ecc
 801037c:	20005eb8 	.word	0x20005eb8
 8010380:	20005eb0 	.word	0x20005eb0

08010384 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8010384:	b480      	push	{r7}
 8010386:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8010388:	4b04      	ldr	r3, [pc, #16]	; (801039c <vTaskSuspendAll+0x18>)
 801038a:	681b      	ldr	r3, [r3, #0]
 801038c:	3301      	adds	r3, #1
 801038e:	4a03      	ldr	r2, [pc, #12]	; (801039c <vTaskSuspendAll+0x18>)
 8010390:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8010392:	bf00      	nop
 8010394:	46bd      	mov	sp, r7
 8010396:	f85d 7b04 	ldr.w	r7, [sp], #4
 801039a:	4770      	bx	lr
 801039c:	20005ed4 	.word	0x20005ed4

080103a0 <prvGetExpectedIdleTime>:
/*----------------------------------------------------------*/

#if ( configUSE_TICKLESS_IDLE != 0 )

	static TickType_t prvGetExpectedIdleTime( void )
	{
 80103a0:	b480      	push	{r7}
 80103a2:	b083      	sub	sp, #12
 80103a4:	af00      	add	r7, sp, #0
	TickType_t xReturn;
	UBaseType_t uxHigherPriorityReadyTasks = pdFALSE;
 80103a6:	2300      	movs	r3, #0
 80103a8:	603b      	str	r3, [r7, #0]
		configUSE_PREEMPTION is 0, so there may be tasks above the idle priority
		task that are in the Ready state, even though the idle task is
		running. */
		#if( configUSE_PORT_OPTIMISED_TASK_SELECTION == 0 )
		{
			if( uxTopReadyPriority > tskIDLE_PRIORITY )
 80103aa:	4b14      	ldr	r3, [pc, #80]	; (80103fc <prvGetExpectedIdleTime+0x5c>)
 80103ac:	681b      	ldr	r3, [r3, #0]
 80103ae:	2b00      	cmp	r3, #0
 80103b0:	d001      	beq.n	80103b6 <prvGetExpectedIdleTime+0x16>
			{
				uxHigherPriorityReadyTasks = pdTRUE;
 80103b2:	2301      	movs	r3, #1
 80103b4:	603b      	str	r3, [r7, #0]
				uxHigherPriorityReadyTasks = pdTRUE;
			}
		}
		#endif

		if( pxCurrentTCB->uxPriority > tskIDLE_PRIORITY )
 80103b6:	4b12      	ldr	r3, [pc, #72]	; (8010400 <prvGetExpectedIdleTime+0x60>)
 80103b8:	681b      	ldr	r3, [r3, #0]
 80103ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80103bc:	2b00      	cmp	r3, #0
 80103be:	d002      	beq.n	80103c6 <prvGetExpectedIdleTime+0x26>
		{
			xReturn = 0;
 80103c0:	2300      	movs	r3, #0
 80103c2:	607b      	str	r3, [r7, #4]
 80103c4:	e012      	b.n	80103ec <prvGetExpectedIdleTime+0x4c>
		}
		else if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > 1 )
 80103c6:	4b0f      	ldr	r3, [pc, #60]	; (8010404 <prvGetExpectedIdleTime+0x64>)
 80103c8:	681b      	ldr	r3, [r3, #0]
 80103ca:	2b01      	cmp	r3, #1
 80103cc:	d902      	bls.n	80103d4 <prvGetExpectedIdleTime+0x34>
		{
			/* There are other idle priority tasks in the ready state.  If
			time slicing is used then the very next tick interrupt must be
			processed. */
			xReturn = 0;
 80103ce:	2300      	movs	r3, #0
 80103d0:	607b      	str	r3, [r7, #4]
 80103d2:	e00b      	b.n	80103ec <prvGetExpectedIdleTime+0x4c>
		}
		else if( uxHigherPriorityReadyTasks != pdFALSE )
 80103d4:	683b      	ldr	r3, [r7, #0]
 80103d6:	2b00      	cmp	r3, #0
 80103d8:	d002      	beq.n	80103e0 <prvGetExpectedIdleTime+0x40>
		{
			/* There are tasks in the Ready state that have a priority above the
			idle priority.  This path can only be reached if
			configUSE_PREEMPTION is 0. */
			xReturn = 0;
 80103da:	2300      	movs	r3, #0
 80103dc:	607b      	str	r3, [r7, #4]
 80103de:	e005      	b.n	80103ec <prvGetExpectedIdleTime+0x4c>
		}
		else
		{
			xReturn = xNextTaskUnblockTime - xTickCount;
 80103e0:	4b09      	ldr	r3, [pc, #36]	; (8010408 <prvGetExpectedIdleTime+0x68>)
 80103e2:	681a      	ldr	r2, [r3, #0]
 80103e4:	4b09      	ldr	r3, [pc, #36]	; (801040c <prvGetExpectedIdleTime+0x6c>)
 80103e6:	681b      	ldr	r3, [r3, #0]
 80103e8:	1ad3      	subs	r3, r2, r3
 80103ea:	607b      	str	r3, [r7, #4]
		}

		return xReturn;
 80103ec:	687b      	ldr	r3, [r7, #4]
	}
 80103ee:	4618      	mov	r0, r3
 80103f0:	370c      	adds	r7, #12
 80103f2:	46bd      	mov	sp, r7
 80103f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103f8:	4770      	bx	lr
 80103fa:	bf00      	nop
 80103fc:	20005eb4 	.word	0x20005eb4
 8010400:	200059d8 	.word	0x200059d8
 8010404:	200059dc 	.word	0x200059dc
 8010408:	20005ecc 	.word	0x20005ecc
 801040c:	20005eb0 	.word	0x20005eb0

08010410 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8010410:	b580      	push	{r7, lr}
 8010412:	b084      	sub	sp, #16
 8010414:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8010416:	2300      	movs	r3, #0
 8010418:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 801041a:	2300      	movs	r3, #0
 801041c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 801041e:	4b41      	ldr	r3, [pc, #260]	; (8010524 <xTaskResumeAll+0x114>)
 8010420:	681b      	ldr	r3, [r3, #0]
 8010422:	2b00      	cmp	r3, #0
 8010424:	d109      	bne.n	801043a <xTaskResumeAll+0x2a>
 8010426:	f04f 0350 	mov.w	r3, #80	; 0x50
 801042a:	f383 8811 	msr	BASEPRI, r3
 801042e:	f3bf 8f6f 	isb	sy
 8010432:	f3bf 8f4f 	dsb	sy
 8010436:	603b      	str	r3, [r7, #0]
 8010438:	e7fe      	b.n	8010438 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 801043a:	f7fe f927 	bl	800e68c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 801043e:	4b39      	ldr	r3, [pc, #228]	; (8010524 <xTaskResumeAll+0x114>)
 8010440:	681b      	ldr	r3, [r3, #0]
 8010442:	3b01      	subs	r3, #1
 8010444:	4a37      	ldr	r2, [pc, #220]	; (8010524 <xTaskResumeAll+0x114>)
 8010446:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8010448:	4b36      	ldr	r3, [pc, #216]	; (8010524 <xTaskResumeAll+0x114>)
 801044a:	681b      	ldr	r3, [r3, #0]
 801044c:	2b00      	cmp	r3, #0
 801044e:	d162      	bne.n	8010516 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8010450:	4b35      	ldr	r3, [pc, #212]	; (8010528 <xTaskResumeAll+0x118>)
 8010452:	681b      	ldr	r3, [r3, #0]
 8010454:	2b00      	cmp	r3, #0
 8010456:	d05e      	beq.n	8010516 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8010458:	e02f      	b.n	80104ba <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801045a:	4b34      	ldr	r3, [pc, #208]	; (801052c <xTaskResumeAll+0x11c>)
 801045c:	68db      	ldr	r3, [r3, #12]
 801045e:	68db      	ldr	r3, [r3, #12]
 8010460:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8010462:	68fb      	ldr	r3, [r7, #12]
 8010464:	3318      	adds	r3, #24
 8010466:	4618      	mov	r0, r3
 8010468:	f7fe fc8a 	bl	800ed80 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801046c:	68fb      	ldr	r3, [r7, #12]
 801046e:	3304      	adds	r3, #4
 8010470:	4618      	mov	r0, r3
 8010472:	f7fe fc85 	bl	800ed80 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8010476:	68fb      	ldr	r3, [r7, #12]
 8010478:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801047a:	4b2d      	ldr	r3, [pc, #180]	; (8010530 <xTaskResumeAll+0x120>)
 801047c:	681b      	ldr	r3, [r3, #0]
 801047e:	429a      	cmp	r2, r3
 8010480:	d903      	bls.n	801048a <xTaskResumeAll+0x7a>
 8010482:	68fb      	ldr	r3, [r7, #12]
 8010484:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010486:	4a2a      	ldr	r2, [pc, #168]	; (8010530 <xTaskResumeAll+0x120>)
 8010488:	6013      	str	r3, [r2, #0]
 801048a:	68fb      	ldr	r3, [r7, #12]
 801048c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801048e:	4613      	mov	r3, r2
 8010490:	009b      	lsls	r3, r3, #2
 8010492:	4413      	add	r3, r2
 8010494:	009b      	lsls	r3, r3, #2
 8010496:	4a27      	ldr	r2, [pc, #156]	; (8010534 <xTaskResumeAll+0x124>)
 8010498:	441a      	add	r2, r3
 801049a:	68fb      	ldr	r3, [r7, #12]
 801049c:	3304      	adds	r3, #4
 801049e:	4619      	mov	r1, r3
 80104a0:	4610      	mov	r0, r2
 80104a2:	f7fe fc10 	bl	800ecc6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80104a6:	68fb      	ldr	r3, [r7, #12]
 80104a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80104aa:	4b23      	ldr	r3, [pc, #140]	; (8010538 <xTaskResumeAll+0x128>)
 80104ac:	681b      	ldr	r3, [r3, #0]
 80104ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80104b0:	429a      	cmp	r2, r3
 80104b2:	d302      	bcc.n	80104ba <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 80104b4:	4b21      	ldr	r3, [pc, #132]	; (801053c <xTaskResumeAll+0x12c>)
 80104b6:	2201      	movs	r2, #1
 80104b8:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80104ba:	4b1c      	ldr	r3, [pc, #112]	; (801052c <xTaskResumeAll+0x11c>)
 80104bc:	681b      	ldr	r3, [r3, #0]
 80104be:	2b00      	cmp	r3, #0
 80104c0:	d1cb      	bne.n	801045a <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80104c2:	68fb      	ldr	r3, [r7, #12]
 80104c4:	2b00      	cmp	r3, #0
 80104c6:	d001      	beq.n	80104cc <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80104c8:	f000 fb6e 	bl	8010ba8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80104cc:	4b1c      	ldr	r3, [pc, #112]	; (8010540 <xTaskResumeAll+0x130>)
 80104ce:	681b      	ldr	r3, [r3, #0]
 80104d0:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80104d2:	687b      	ldr	r3, [r7, #4]
 80104d4:	2b00      	cmp	r3, #0
 80104d6:	d010      	beq.n	80104fa <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80104d8:	f000 f846 	bl	8010568 <xTaskIncrementTick>
 80104dc:	4603      	mov	r3, r0
 80104de:	2b00      	cmp	r3, #0
 80104e0:	d002      	beq.n	80104e8 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 80104e2:	4b16      	ldr	r3, [pc, #88]	; (801053c <xTaskResumeAll+0x12c>)
 80104e4:	2201      	movs	r2, #1
 80104e6:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80104e8:	687b      	ldr	r3, [r7, #4]
 80104ea:	3b01      	subs	r3, #1
 80104ec:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80104ee:	687b      	ldr	r3, [r7, #4]
 80104f0:	2b00      	cmp	r3, #0
 80104f2:	d1f1      	bne.n	80104d8 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 80104f4:	4b12      	ldr	r3, [pc, #72]	; (8010540 <xTaskResumeAll+0x130>)
 80104f6:	2200      	movs	r2, #0
 80104f8:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80104fa:	4b10      	ldr	r3, [pc, #64]	; (801053c <xTaskResumeAll+0x12c>)
 80104fc:	681b      	ldr	r3, [r3, #0]
 80104fe:	2b00      	cmp	r3, #0
 8010500:	d009      	beq.n	8010516 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8010502:	2301      	movs	r3, #1
 8010504:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8010506:	4b0f      	ldr	r3, [pc, #60]	; (8010544 <xTaskResumeAll+0x134>)
 8010508:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801050c:	601a      	str	r2, [r3, #0]
 801050e:	f3bf 8f4f 	dsb	sy
 8010512:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8010516:	f7fe f8e7 	bl	800e6e8 <vPortExitCritical>

	return xAlreadyYielded;
 801051a:	68bb      	ldr	r3, [r7, #8]
}
 801051c:	4618      	mov	r0, r3
 801051e:	3710      	adds	r7, #16
 8010520:	46bd      	mov	sp, r7
 8010522:	bd80      	pop	{r7, pc}
 8010524:	20005ed4 	.word	0x20005ed4
 8010528:	20005eac 	.word	0x20005eac
 801052c:	20005e6c 	.word	0x20005e6c
 8010530:	20005eb4 	.word	0x20005eb4
 8010534:	200059dc 	.word	0x200059dc
 8010538:	200059d8 	.word	0x200059d8
 801053c:	20005ec0 	.word	0x20005ec0
 8010540:	20005ebc 	.word	0x20005ebc
 8010544:	e000ed04 	.word	0xe000ed04

08010548 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8010548:	b480      	push	{r7}
 801054a:	b083      	sub	sp, #12
 801054c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 801054e:	4b05      	ldr	r3, [pc, #20]	; (8010564 <xTaskGetTickCount+0x1c>)
 8010550:	681b      	ldr	r3, [r3, #0]
 8010552:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8010554:	687b      	ldr	r3, [r7, #4]
}
 8010556:	4618      	mov	r0, r3
 8010558:	370c      	adds	r7, #12
 801055a:	46bd      	mov	sp, r7
 801055c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010560:	4770      	bx	lr
 8010562:	bf00      	nop
 8010564:	20005eb0 	.word	0x20005eb0

08010568 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8010568:	b580      	push	{r7, lr}
 801056a:	b086      	sub	sp, #24
 801056c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 801056e:	2300      	movs	r3, #0
 8010570:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8010572:	4b4e      	ldr	r3, [pc, #312]	; (80106ac <xTaskIncrementTick+0x144>)
 8010574:	681b      	ldr	r3, [r3, #0]
 8010576:	2b00      	cmp	r3, #0
 8010578:	f040 8088 	bne.w	801068c <xTaskIncrementTick+0x124>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 801057c:	4b4c      	ldr	r3, [pc, #304]	; (80106b0 <xTaskIncrementTick+0x148>)
 801057e:	681b      	ldr	r3, [r3, #0]
 8010580:	3301      	adds	r3, #1
 8010582:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8010584:	4a4a      	ldr	r2, [pc, #296]	; (80106b0 <xTaskIncrementTick+0x148>)
 8010586:	693b      	ldr	r3, [r7, #16]
 8010588:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 801058a:	693b      	ldr	r3, [r7, #16]
 801058c:	2b00      	cmp	r3, #0
 801058e:	d11f      	bne.n	80105d0 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8010590:	4b48      	ldr	r3, [pc, #288]	; (80106b4 <xTaskIncrementTick+0x14c>)
 8010592:	681b      	ldr	r3, [r3, #0]
 8010594:	681b      	ldr	r3, [r3, #0]
 8010596:	2b00      	cmp	r3, #0
 8010598:	d009      	beq.n	80105ae <xTaskIncrementTick+0x46>
 801059a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801059e:	f383 8811 	msr	BASEPRI, r3
 80105a2:	f3bf 8f6f 	isb	sy
 80105a6:	f3bf 8f4f 	dsb	sy
 80105aa:	603b      	str	r3, [r7, #0]
 80105ac:	e7fe      	b.n	80105ac <xTaskIncrementTick+0x44>
 80105ae:	4b41      	ldr	r3, [pc, #260]	; (80106b4 <xTaskIncrementTick+0x14c>)
 80105b0:	681b      	ldr	r3, [r3, #0]
 80105b2:	60fb      	str	r3, [r7, #12]
 80105b4:	4b40      	ldr	r3, [pc, #256]	; (80106b8 <xTaskIncrementTick+0x150>)
 80105b6:	681b      	ldr	r3, [r3, #0]
 80105b8:	4a3e      	ldr	r2, [pc, #248]	; (80106b4 <xTaskIncrementTick+0x14c>)
 80105ba:	6013      	str	r3, [r2, #0]
 80105bc:	4a3e      	ldr	r2, [pc, #248]	; (80106b8 <xTaskIncrementTick+0x150>)
 80105be:	68fb      	ldr	r3, [r7, #12]
 80105c0:	6013      	str	r3, [r2, #0]
 80105c2:	4b3e      	ldr	r3, [pc, #248]	; (80106bc <xTaskIncrementTick+0x154>)
 80105c4:	681b      	ldr	r3, [r3, #0]
 80105c6:	3301      	adds	r3, #1
 80105c8:	4a3c      	ldr	r2, [pc, #240]	; (80106bc <xTaskIncrementTick+0x154>)
 80105ca:	6013      	str	r3, [r2, #0]
 80105cc:	f000 faec 	bl	8010ba8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80105d0:	4b3b      	ldr	r3, [pc, #236]	; (80106c0 <xTaskIncrementTick+0x158>)
 80105d2:	681b      	ldr	r3, [r3, #0]
 80105d4:	693a      	ldr	r2, [r7, #16]
 80105d6:	429a      	cmp	r2, r3
 80105d8:	d349      	bcc.n	801066e <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80105da:	4b36      	ldr	r3, [pc, #216]	; (80106b4 <xTaskIncrementTick+0x14c>)
 80105dc:	681b      	ldr	r3, [r3, #0]
 80105de:	681b      	ldr	r3, [r3, #0]
 80105e0:	2b00      	cmp	r3, #0
 80105e2:	d104      	bne.n	80105ee <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80105e4:	4b36      	ldr	r3, [pc, #216]	; (80106c0 <xTaskIncrementTick+0x158>)
 80105e6:	f04f 32ff 	mov.w	r2, #4294967295
 80105ea:	601a      	str	r2, [r3, #0]
					break;
 80105ec:	e03f      	b.n	801066e <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80105ee:	4b31      	ldr	r3, [pc, #196]	; (80106b4 <xTaskIncrementTick+0x14c>)
 80105f0:	681b      	ldr	r3, [r3, #0]
 80105f2:	68db      	ldr	r3, [r3, #12]
 80105f4:	68db      	ldr	r3, [r3, #12]
 80105f6:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80105f8:	68bb      	ldr	r3, [r7, #8]
 80105fa:	685b      	ldr	r3, [r3, #4]
 80105fc:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80105fe:	693a      	ldr	r2, [r7, #16]
 8010600:	687b      	ldr	r3, [r7, #4]
 8010602:	429a      	cmp	r2, r3
 8010604:	d203      	bcs.n	801060e <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8010606:	4a2e      	ldr	r2, [pc, #184]	; (80106c0 <xTaskIncrementTick+0x158>)
 8010608:	687b      	ldr	r3, [r7, #4]
 801060a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 801060c:	e02f      	b.n	801066e <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801060e:	68bb      	ldr	r3, [r7, #8]
 8010610:	3304      	adds	r3, #4
 8010612:	4618      	mov	r0, r3
 8010614:	f7fe fbb4 	bl	800ed80 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8010618:	68bb      	ldr	r3, [r7, #8]
 801061a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801061c:	2b00      	cmp	r3, #0
 801061e:	d004      	beq.n	801062a <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8010620:	68bb      	ldr	r3, [r7, #8]
 8010622:	3318      	adds	r3, #24
 8010624:	4618      	mov	r0, r3
 8010626:	f7fe fbab 	bl	800ed80 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 801062a:	68bb      	ldr	r3, [r7, #8]
 801062c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801062e:	4b25      	ldr	r3, [pc, #148]	; (80106c4 <xTaskIncrementTick+0x15c>)
 8010630:	681b      	ldr	r3, [r3, #0]
 8010632:	429a      	cmp	r2, r3
 8010634:	d903      	bls.n	801063e <xTaskIncrementTick+0xd6>
 8010636:	68bb      	ldr	r3, [r7, #8]
 8010638:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801063a:	4a22      	ldr	r2, [pc, #136]	; (80106c4 <xTaskIncrementTick+0x15c>)
 801063c:	6013      	str	r3, [r2, #0]
 801063e:	68bb      	ldr	r3, [r7, #8]
 8010640:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010642:	4613      	mov	r3, r2
 8010644:	009b      	lsls	r3, r3, #2
 8010646:	4413      	add	r3, r2
 8010648:	009b      	lsls	r3, r3, #2
 801064a:	4a1f      	ldr	r2, [pc, #124]	; (80106c8 <xTaskIncrementTick+0x160>)
 801064c:	441a      	add	r2, r3
 801064e:	68bb      	ldr	r3, [r7, #8]
 8010650:	3304      	adds	r3, #4
 8010652:	4619      	mov	r1, r3
 8010654:	4610      	mov	r0, r2
 8010656:	f7fe fb36 	bl	800ecc6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 801065a:	68bb      	ldr	r3, [r7, #8]
 801065c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801065e:	4b1b      	ldr	r3, [pc, #108]	; (80106cc <xTaskIncrementTick+0x164>)
 8010660:	681b      	ldr	r3, [r3, #0]
 8010662:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010664:	429a      	cmp	r2, r3
 8010666:	d3b8      	bcc.n	80105da <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8010668:	2301      	movs	r3, #1
 801066a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801066c:	e7b5      	b.n	80105da <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 801066e:	4b17      	ldr	r3, [pc, #92]	; (80106cc <xTaskIncrementTick+0x164>)
 8010670:	681b      	ldr	r3, [r3, #0]
 8010672:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010674:	4914      	ldr	r1, [pc, #80]	; (80106c8 <xTaskIncrementTick+0x160>)
 8010676:	4613      	mov	r3, r2
 8010678:	009b      	lsls	r3, r3, #2
 801067a:	4413      	add	r3, r2
 801067c:	009b      	lsls	r3, r3, #2
 801067e:	440b      	add	r3, r1
 8010680:	681b      	ldr	r3, [r3, #0]
 8010682:	2b01      	cmp	r3, #1
 8010684:	d907      	bls.n	8010696 <xTaskIncrementTick+0x12e>
			{
				xSwitchRequired = pdTRUE;
 8010686:	2301      	movs	r3, #1
 8010688:	617b      	str	r3, [r7, #20]
 801068a:	e004      	b.n	8010696 <xTaskIncrementTick+0x12e>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 801068c:	4b10      	ldr	r3, [pc, #64]	; (80106d0 <xTaskIncrementTick+0x168>)
 801068e:	681b      	ldr	r3, [r3, #0]
 8010690:	3301      	adds	r3, #1
 8010692:	4a0f      	ldr	r2, [pc, #60]	; (80106d0 <xTaskIncrementTick+0x168>)
 8010694:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8010696:	4b0f      	ldr	r3, [pc, #60]	; (80106d4 <xTaskIncrementTick+0x16c>)
 8010698:	681b      	ldr	r3, [r3, #0]
 801069a:	2b00      	cmp	r3, #0
 801069c:	d001      	beq.n	80106a2 <xTaskIncrementTick+0x13a>
		{
			xSwitchRequired = pdTRUE;
 801069e:	2301      	movs	r3, #1
 80106a0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80106a2:	697b      	ldr	r3, [r7, #20]
}
 80106a4:	4618      	mov	r0, r3
 80106a6:	3718      	adds	r7, #24
 80106a8:	46bd      	mov	sp, r7
 80106aa:	bd80      	pop	{r7, pc}
 80106ac:	20005ed4 	.word	0x20005ed4
 80106b0:	20005eb0 	.word	0x20005eb0
 80106b4:	20005e64 	.word	0x20005e64
 80106b8:	20005e68 	.word	0x20005e68
 80106bc:	20005ec4 	.word	0x20005ec4
 80106c0:	20005ecc 	.word	0x20005ecc
 80106c4:	20005eb4 	.word	0x20005eb4
 80106c8:	200059dc 	.word	0x200059dc
 80106cc:	200059d8 	.word	0x200059d8
 80106d0:	20005ebc 	.word	0x20005ebc
 80106d4:	20005ec0 	.word	0x20005ec0

080106d8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80106d8:	b480      	push	{r7}
 80106da:	b085      	sub	sp, #20
 80106dc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80106de:	4b27      	ldr	r3, [pc, #156]	; (801077c <vTaskSwitchContext+0xa4>)
 80106e0:	681b      	ldr	r3, [r3, #0]
 80106e2:	2b00      	cmp	r3, #0
 80106e4:	d003      	beq.n	80106ee <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80106e6:	4b26      	ldr	r3, [pc, #152]	; (8010780 <vTaskSwitchContext+0xa8>)
 80106e8:	2201      	movs	r2, #1
 80106ea:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80106ec:	e040      	b.n	8010770 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 80106ee:	4b24      	ldr	r3, [pc, #144]	; (8010780 <vTaskSwitchContext+0xa8>)
 80106f0:	2200      	movs	r2, #0
 80106f2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80106f4:	4b23      	ldr	r3, [pc, #140]	; (8010784 <vTaskSwitchContext+0xac>)
 80106f6:	681b      	ldr	r3, [r3, #0]
 80106f8:	60fb      	str	r3, [r7, #12]
 80106fa:	e00f      	b.n	801071c <vTaskSwitchContext+0x44>
 80106fc:	68fb      	ldr	r3, [r7, #12]
 80106fe:	2b00      	cmp	r3, #0
 8010700:	d109      	bne.n	8010716 <vTaskSwitchContext+0x3e>
 8010702:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010706:	f383 8811 	msr	BASEPRI, r3
 801070a:	f3bf 8f6f 	isb	sy
 801070e:	f3bf 8f4f 	dsb	sy
 8010712:	607b      	str	r3, [r7, #4]
 8010714:	e7fe      	b.n	8010714 <vTaskSwitchContext+0x3c>
 8010716:	68fb      	ldr	r3, [r7, #12]
 8010718:	3b01      	subs	r3, #1
 801071a:	60fb      	str	r3, [r7, #12]
 801071c:	491a      	ldr	r1, [pc, #104]	; (8010788 <vTaskSwitchContext+0xb0>)
 801071e:	68fa      	ldr	r2, [r7, #12]
 8010720:	4613      	mov	r3, r2
 8010722:	009b      	lsls	r3, r3, #2
 8010724:	4413      	add	r3, r2
 8010726:	009b      	lsls	r3, r3, #2
 8010728:	440b      	add	r3, r1
 801072a:	681b      	ldr	r3, [r3, #0]
 801072c:	2b00      	cmp	r3, #0
 801072e:	d0e5      	beq.n	80106fc <vTaskSwitchContext+0x24>
 8010730:	68fa      	ldr	r2, [r7, #12]
 8010732:	4613      	mov	r3, r2
 8010734:	009b      	lsls	r3, r3, #2
 8010736:	4413      	add	r3, r2
 8010738:	009b      	lsls	r3, r3, #2
 801073a:	4a13      	ldr	r2, [pc, #76]	; (8010788 <vTaskSwitchContext+0xb0>)
 801073c:	4413      	add	r3, r2
 801073e:	60bb      	str	r3, [r7, #8]
 8010740:	68bb      	ldr	r3, [r7, #8]
 8010742:	685b      	ldr	r3, [r3, #4]
 8010744:	685a      	ldr	r2, [r3, #4]
 8010746:	68bb      	ldr	r3, [r7, #8]
 8010748:	605a      	str	r2, [r3, #4]
 801074a:	68bb      	ldr	r3, [r7, #8]
 801074c:	685a      	ldr	r2, [r3, #4]
 801074e:	68bb      	ldr	r3, [r7, #8]
 8010750:	3308      	adds	r3, #8
 8010752:	429a      	cmp	r2, r3
 8010754:	d104      	bne.n	8010760 <vTaskSwitchContext+0x88>
 8010756:	68bb      	ldr	r3, [r7, #8]
 8010758:	685b      	ldr	r3, [r3, #4]
 801075a:	685a      	ldr	r2, [r3, #4]
 801075c:	68bb      	ldr	r3, [r7, #8]
 801075e:	605a      	str	r2, [r3, #4]
 8010760:	68bb      	ldr	r3, [r7, #8]
 8010762:	685b      	ldr	r3, [r3, #4]
 8010764:	68db      	ldr	r3, [r3, #12]
 8010766:	4a09      	ldr	r2, [pc, #36]	; (801078c <vTaskSwitchContext+0xb4>)
 8010768:	6013      	str	r3, [r2, #0]
 801076a:	4a06      	ldr	r2, [pc, #24]	; (8010784 <vTaskSwitchContext+0xac>)
 801076c:	68fb      	ldr	r3, [r7, #12]
 801076e:	6013      	str	r3, [r2, #0]
}
 8010770:	bf00      	nop
 8010772:	3714      	adds	r7, #20
 8010774:	46bd      	mov	sp, r7
 8010776:	f85d 7b04 	ldr.w	r7, [sp], #4
 801077a:	4770      	bx	lr
 801077c:	20005ed4 	.word	0x20005ed4
 8010780:	20005ec0 	.word	0x20005ec0
 8010784:	20005eb4 	.word	0x20005eb4
 8010788:	200059dc 	.word	0x200059dc
 801078c:	200059d8 	.word	0x200059d8

08010790 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8010790:	b580      	push	{r7, lr}
 8010792:	b084      	sub	sp, #16
 8010794:	af00      	add	r7, sp, #0
 8010796:	6078      	str	r0, [r7, #4]
 8010798:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 801079a:	687b      	ldr	r3, [r7, #4]
 801079c:	2b00      	cmp	r3, #0
 801079e:	d109      	bne.n	80107b4 <vTaskPlaceOnEventList+0x24>
 80107a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80107a4:	f383 8811 	msr	BASEPRI, r3
 80107a8:	f3bf 8f6f 	isb	sy
 80107ac:	f3bf 8f4f 	dsb	sy
 80107b0:	60fb      	str	r3, [r7, #12]
 80107b2:	e7fe      	b.n	80107b2 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80107b4:	4b07      	ldr	r3, [pc, #28]	; (80107d4 <vTaskPlaceOnEventList+0x44>)
 80107b6:	681b      	ldr	r3, [r3, #0]
 80107b8:	3318      	adds	r3, #24
 80107ba:	4619      	mov	r1, r3
 80107bc:	6878      	ldr	r0, [r7, #4]
 80107be:	f7fe faa6 	bl	800ed0e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80107c2:	2101      	movs	r1, #1
 80107c4:	6838      	ldr	r0, [r7, #0]
 80107c6:	f000 fdd5 	bl	8011374 <prvAddCurrentTaskToDelayedList>
}
 80107ca:	bf00      	nop
 80107cc:	3710      	adds	r7, #16
 80107ce:	46bd      	mov	sp, r7
 80107d0:	bd80      	pop	{r7, pc}
 80107d2:	bf00      	nop
 80107d4:	200059d8 	.word	0x200059d8

080107d8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80107d8:	b580      	push	{r7, lr}
 80107da:	b086      	sub	sp, #24
 80107dc:	af00      	add	r7, sp, #0
 80107de:	60f8      	str	r0, [r7, #12]
 80107e0:	60b9      	str	r1, [r7, #8]
 80107e2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80107e4:	68fb      	ldr	r3, [r7, #12]
 80107e6:	2b00      	cmp	r3, #0
 80107e8:	d109      	bne.n	80107fe <vTaskPlaceOnEventListRestricted+0x26>
 80107ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80107ee:	f383 8811 	msr	BASEPRI, r3
 80107f2:	f3bf 8f6f 	isb	sy
 80107f6:	f3bf 8f4f 	dsb	sy
 80107fa:	617b      	str	r3, [r7, #20]
 80107fc:	e7fe      	b.n	80107fc <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80107fe:	4b0a      	ldr	r3, [pc, #40]	; (8010828 <vTaskPlaceOnEventListRestricted+0x50>)
 8010800:	681b      	ldr	r3, [r3, #0]
 8010802:	3318      	adds	r3, #24
 8010804:	4619      	mov	r1, r3
 8010806:	68f8      	ldr	r0, [r7, #12]
 8010808:	f7fe fa5d 	bl	800ecc6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 801080c:	687b      	ldr	r3, [r7, #4]
 801080e:	2b00      	cmp	r3, #0
 8010810:	d002      	beq.n	8010818 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 8010812:	f04f 33ff 	mov.w	r3, #4294967295
 8010816:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8010818:	6879      	ldr	r1, [r7, #4]
 801081a:	68b8      	ldr	r0, [r7, #8]
 801081c:	f000 fdaa 	bl	8011374 <prvAddCurrentTaskToDelayedList>
	}
 8010820:	bf00      	nop
 8010822:	3718      	adds	r7, #24
 8010824:	46bd      	mov	sp, r7
 8010826:	bd80      	pop	{r7, pc}
 8010828:	200059d8 	.word	0x200059d8

0801082c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 801082c:	b580      	push	{r7, lr}
 801082e:	b086      	sub	sp, #24
 8010830:	af00      	add	r7, sp, #0
 8010832:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010834:	687b      	ldr	r3, [r7, #4]
 8010836:	68db      	ldr	r3, [r3, #12]
 8010838:	68db      	ldr	r3, [r3, #12]
 801083a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 801083c:	693b      	ldr	r3, [r7, #16]
 801083e:	2b00      	cmp	r3, #0
 8010840:	d109      	bne.n	8010856 <xTaskRemoveFromEventList+0x2a>
 8010842:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010846:	f383 8811 	msr	BASEPRI, r3
 801084a:	f3bf 8f6f 	isb	sy
 801084e:	f3bf 8f4f 	dsb	sy
 8010852:	60fb      	str	r3, [r7, #12]
 8010854:	e7fe      	b.n	8010854 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8010856:	693b      	ldr	r3, [r7, #16]
 8010858:	3318      	adds	r3, #24
 801085a:	4618      	mov	r0, r3
 801085c:	f7fe fa90 	bl	800ed80 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8010860:	4b1e      	ldr	r3, [pc, #120]	; (80108dc <xTaskRemoveFromEventList+0xb0>)
 8010862:	681b      	ldr	r3, [r3, #0]
 8010864:	2b00      	cmp	r3, #0
 8010866:	d11f      	bne.n	80108a8 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8010868:	693b      	ldr	r3, [r7, #16]
 801086a:	3304      	adds	r3, #4
 801086c:	4618      	mov	r0, r3
 801086e:	f7fe fa87 	bl	800ed80 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8010872:	693b      	ldr	r3, [r7, #16]
 8010874:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010876:	4b1a      	ldr	r3, [pc, #104]	; (80108e0 <xTaskRemoveFromEventList+0xb4>)
 8010878:	681b      	ldr	r3, [r3, #0]
 801087a:	429a      	cmp	r2, r3
 801087c:	d903      	bls.n	8010886 <xTaskRemoveFromEventList+0x5a>
 801087e:	693b      	ldr	r3, [r7, #16]
 8010880:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010882:	4a17      	ldr	r2, [pc, #92]	; (80108e0 <xTaskRemoveFromEventList+0xb4>)
 8010884:	6013      	str	r3, [r2, #0]
 8010886:	693b      	ldr	r3, [r7, #16]
 8010888:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801088a:	4613      	mov	r3, r2
 801088c:	009b      	lsls	r3, r3, #2
 801088e:	4413      	add	r3, r2
 8010890:	009b      	lsls	r3, r3, #2
 8010892:	4a14      	ldr	r2, [pc, #80]	; (80108e4 <xTaskRemoveFromEventList+0xb8>)
 8010894:	441a      	add	r2, r3
 8010896:	693b      	ldr	r3, [r7, #16]
 8010898:	3304      	adds	r3, #4
 801089a:	4619      	mov	r1, r3
 801089c:	4610      	mov	r0, r2
 801089e:	f7fe fa12 	bl	800ecc6 <vListInsertEnd>
			normally left unchanged, because it is automatically reset to a new
			value when the tick count equals xNextTaskUnblockTime.  However if
			tickless idling is used it might be more important to enter sleep mode
			at the earliest possible time - so reset xNextTaskUnblockTime here to
			ensure it is updated at the earliest possible time. */
			prvResetNextTaskUnblockTime();
 80108a2:	f000 f981 	bl	8010ba8 <prvResetNextTaskUnblockTime>
 80108a6:	e005      	b.n	80108b4 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80108a8:	693b      	ldr	r3, [r7, #16]
 80108aa:	3318      	adds	r3, #24
 80108ac:	4619      	mov	r1, r3
 80108ae:	480e      	ldr	r0, [pc, #56]	; (80108e8 <xTaskRemoveFromEventList+0xbc>)
 80108b0:	f7fe fa09 	bl	800ecc6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80108b4:	693b      	ldr	r3, [r7, #16]
 80108b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80108b8:	4b0c      	ldr	r3, [pc, #48]	; (80108ec <xTaskRemoveFromEventList+0xc0>)
 80108ba:	681b      	ldr	r3, [r3, #0]
 80108bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80108be:	429a      	cmp	r2, r3
 80108c0:	d905      	bls.n	80108ce <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80108c2:	2301      	movs	r3, #1
 80108c4:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80108c6:	4b0a      	ldr	r3, [pc, #40]	; (80108f0 <xTaskRemoveFromEventList+0xc4>)
 80108c8:	2201      	movs	r2, #1
 80108ca:	601a      	str	r2, [r3, #0]
 80108cc:	e001      	b.n	80108d2 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 80108ce:	2300      	movs	r3, #0
 80108d0:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80108d2:	697b      	ldr	r3, [r7, #20]
}
 80108d4:	4618      	mov	r0, r3
 80108d6:	3718      	adds	r7, #24
 80108d8:	46bd      	mov	sp, r7
 80108da:	bd80      	pop	{r7, pc}
 80108dc:	20005ed4 	.word	0x20005ed4
 80108e0:	20005eb4 	.word	0x20005eb4
 80108e4:	200059dc 	.word	0x200059dc
 80108e8:	20005e6c 	.word	0x20005e6c
 80108ec:	200059d8 	.word	0x200059d8
 80108f0:	20005ec0 	.word	0x20005ec0

080108f4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80108f4:	b480      	push	{r7}
 80108f6:	b083      	sub	sp, #12
 80108f8:	af00      	add	r7, sp, #0
 80108fa:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80108fc:	4b06      	ldr	r3, [pc, #24]	; (8010918 <vTaskInternalSetTimeOutState+0x24>)
 80108fe:	681a      	ldr	r2, [r3, #0]
 8010900:	687b      	ldr	r3, [r7, #4]
 8010902:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8010904:	4b05      	ldr	r3, [pc, #20]	; (801091c <vTaskInternalSetTimeOutState+0x28>)
 8010906:	681a      	ldr	r2, [r3, #0]
 8010908:	687b      	ldr	r3, [r7, #4]
 801090a:	605a      	str	r2, [r3, #4]
}
 801090c:	bf00      	nop
 801090e:	370c      	adds	r7, #12
 8010910:	46bd      	mov	sp, r7
 8010912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010916:	4770      	bx	lr
 8010918:	20005ec4 	.word	0x20005ec4
 801091c:	20005eb0 	.word	0x20005eb0

08010920 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8010920:	b580      	push	{r7, lr}
 8010922:	b088      	sub	sp, #32
 8010924:	af00      	add	r7, sp, #0
 8010926:	6078      	str	r0, [r7, #4]
 8010928:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 801092a:	687b      	ldr	r3, [r7, #4]
 801092c:	2b00      	cmp	r3, #0
 801092e:	d109      	bne.n	8010944 <xTaskCheckForTimeOut+0x24>
 8010930:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010934:	f383 8811 	msr	BASEPRI, r3
 8010938:	f3bf 8f6f 	isb	sy
 801093c:	f3bf 8f4f 	dsb	sy
 8010940:	613b      	str	r3, [r7, #16]
 8010942:	e7fe      	b.n	8010942 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8010944:	683b      	ldr	r3, [r7, #0]
 8010946:	2b00      	cmp	r3, #0
 8010948:	d109      	bne.n	801095e <xTaskCheckForTimeOut+0x3e>
 801094a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801094e:	f383 8811 	msr	BASEPRI, r3
 8010952:	f3bf 8f6f 	isb	sy
 8010956:	f3bf 8f4f 	dsb	sy
 801095a:	60fb      	str	r3, [r7, #12]
 801095c:	e7fe      	b.n	801095c <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 801095e:	f7fd fe95 	bl	800e68c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8010962:	4b1d      	ldr	r3, [pc, #116]	; (80109d8 <xTaskCheckForTimeOut+0xb8>)
 8010964:	681b      	ldr	r3, [r3, #0]
 8010966:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8010968:	687b      	ldr	r3, [r7, #4]
 801096a:	685b      	ldr	r3, [r3, #4]
 801096c:	69ba      	ldr	r2, [r7, #24]
 801096e:	1ad3      	subs	r3, r2, r3
 8010970:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8010972:	683b      	ldr	r3, [r7, #0]
 8010974:	681b      	ldr	r3, [r3, #0]
 8010976:	f1b3 3fff 	cmp.w	r3, #4294967295
 801097a:	d102      	bne.n	8010982 <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 801097c:	2300      	movs	r3, #0
 801097e:	61fb      	str	r3, [r7, #28]
 8010980:	e023      	b.n	80109ca <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8010982:	687b      	ldr	r3, [r7, #4]
 8010984:	681a      	ldr	r2, [r3, #0]
 8010986:	4b15      	ldr	r3, [pc, #84]	; (80109dc <xTaskCheckForTimeOut+0xbc>)
 8010988:	681b      	ldr	r3, [r3, #0]
 801098a:	429a      	cmp	r2, r3
 801098c:	d007      	beq.n	801099e <xTaskCheckForTimeOut+0x7e>
 801098e:	687b      	ldr	r3, [r7, #4]
 8010990:	685b      	ldr	r3, [r3, #4]
 8010992:	69ba      	ldr	r2, [r7, #24]
 8010994:	429a      	cmp	r2, r3
 8010996:	d302      	bcc.n	801099e <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8010998:	2301      	movs	r3, #1
 801099a:	61fb      	str	r3, [r7, #28]
 801099c:	e015      	b.n	80109ca <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 801099e:	683b      	ldr	r3, [r7, #0]
 80109a0:	681b      	ldr	r3, [r3, #0]
 80109a2:	697a      	ldr	r2, [r7, #20]
 80109a4:	429a      	cmp	r2, r3
 80109a6:	d20b      	bcs.n	80109c0 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80109a8:	683b      	ldr	r3, [r7, #0]
 80109aa:	681a      	ldr	r2, [r3, #0]
 80109ac:	697b      	ldr	r3, [r7, #20]
 80109ae:	1ad2      	subs	r2, r2, r3
 80109b0:	683b      	ldr	r3, [r7, #0]
 80109b2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80109b4:	6878      	ldr	r0, [r7, #4]
 80109b6:	f7ff ff9d 	bl	80108f4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80109ba:	2300      	movs	r3, #0
 80109bc:	61fb      	str	r3, [r7, #28]
 80109be:	e004      	b.n	80109ca <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 80109c0:	683b      	ldr	r3, [r7, #0]
 80109c2:	2200      	movs	r2, #0
 80109c4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80109c6:	2301      	movs	r3, #1
 80109c8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80109ca:	f7fd fe8d 	bl	800e6e8 <vPortExitCritical>

	return xReturn;
 80109ce:	69fb      	ldr	r3, [r7, #28]
}
 80109d0:	4618      	mov	r0, r3
 80109d2:	3720      	adds	r7, #32
 80109d4:	46bd      	mov	sp, r7
 80109d6:	bd80      	pop	{r7, pc}
 80109d8:	20005eb0 	.word	0x20005eb0
 80109dc:	20005ec4 	.word	0x20005ec4

080109e0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80109e0:	b480      	push	{r7}
 80109e2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80109e4:	4b03      	ldr	r3, [pc, #12]	; (80109f4 <vTaskMissedYield+0x14>)
 80109e6:	2201      	movs	r2, #1
 80109e8:	601a      	str	r2, [r3, #0]
}
 80109ea:	bf00      	nop
 80109ec:	46bd      	mov	sp, r7
 80109ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109f2:	4770      	bx	lr
 80109f4:	20005ec0 	.word	0x20005ec0

080109f8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80109f8:	b580      	push	{r7, lr}
 80109fa:	b084      	sub	sp, #16
 80109fc:	af00      	add	r7, sp, #0
 80109fe:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8010a00:	f000 f878 	bl	8010af4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8010a04:	4b17      	ldr	r3, [pc, #92]	; (8010a64 <prvIdleTask+0x6c>)
 8010a06:	681b      	ldr	r3, [r3, #0]
 8010a08:	2b01      	cmp	r3, #1
 8010a0a:	d907      	bls.n	8010a1c <prvIdleTask+0x24>
			{
				taskYIELD();
 8010a0c:	4b16      	ldr	r3, [pc, #88]	; (8010a68 <prvIdleTask+0x70>)
 8010a0e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010a12:	601a      	str	r2, [r3, #0]
 8010a14:	f3bf 8f4f 	dsb	sy
 8010a18:	f3bf 8f6f 	isb	sy
			/* It is not desirable to suspend then resume the scheduler on
			each iteration of the idle task.  Therefore, a preliminary
			test of the expected idle time is performed without the
			scheduler suspended.  The result here is not necessarily
			valid. */
			xExpectedIdleTime = prvGetExpectedIdleTime();
 8010a1c:	f7ff fcc0 	bl	80103a0 <prvGetExpectedIdleTime>
 8010a20:	60f8      	str	r0, [r7, #12]

			if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
 8010a22:	68fb      	ldr	r3, [r7, #12]
 8010a24:	2b01      	cmp	r3, #1
 8010a26:	d9eb      	bls.n	8010a00 <prvIdleTask+0x8>
			{
				vTaskSuspendAll();
 8010a28:	f7ff fcac 	bl	8010384 <vTaskSuspendAll>
				{
					/* Now the scheduler is suspended, the expected idle
					time can be sampled again, and this time its value can
					be used. */
					configASSERT( xNextTaskUnblockTime >= xTickCount );
 8010a2c:	4b0f      	ldr	r3, [pc, #60]	; (8010a6c <prvIdleTask+0x74>)
 8010a2e:	681a      	ldr	r2, [r3, #0]
 8010a30:	4b0f      	ldr	r3, [pc, #60]	; (8010a70 <prvIdleTask+0x78>)
 8010a32:	681b      	ldr	r3, [r3, #0]
 8010a34:	429a      	cmp	r2, r3
 8010a36:	d209      	bcs.n	8010a4c <prvIdleTask+0x54>
 8010a38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010a3c:	f383 8811 	msr	BASEPRI, r3
 8010a40:	f3bf 8f6f 	isb	sy
 8010a44:	f3bf 8f4f 	dsb	sy
 8010a48:	60bb      	str	r3, [r7, #8]
 8010a4a:	e7fe      	b.n	8010a4a <prvIdleTask+0x52>
					xExpectedIdleTime = prvGetExpectedIdleTime();
 8010a4c:	f7ff fca8 	bl	80103a0 <prvGetExpectedIdleTime>
 8010a50:	60f8      	str	r0, [r7, #12]
					/* Define the following macro to set xExpectedIdleTime to 0
					if the application does not want
					portSUPPRESS_TICKS_AND_SLEEP() to be called. */
					configPRE_SUPPRESS_TICKS_AND_SLEEP_PROCESSING( xExpectedIdleTime );

					if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
 8010a52:	68fb      	ldr	r3, [r7, #12]
 8010a54:	2b01      	cmp	r3, #1
 8010a56:	d902      	bls.n	8010a5e <prvIdleTask+0x66>
					{
						traceLOW_POWER_IDLE_BEGIN();
						portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime );
 8010a58:	68f8      	ldr	r0, [r7, #12]
 8010a5a:	f7f2 f843 	bl	8002ae4 <vPortSuppressTicksAndSleep>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}
				( void ) xTaskResumeAll();
 8010a5e:	f7ff fcd7 	bl	8010410 <xTaskResumeAll>
		prvCheckTasksWaitingTermination();
 8010a62:	e7cd      	b.n	8010a00 <prvIdleTask+0x8>
 8010a64:	200059dc 	.word	0x200059dc
 8010a68:	e000ed04 	.word	0xe000ed04
 8010a6c:	20005ecc 	.word	0x20005ecc
 8010a70:	20005eb0 	.word	0x20005eb0

08010a74 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8010a74:	b580      	push	{r7, lr}
 8010a76:	b082      	sub	sp, #8
 8010a78:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8010a7a:	2300      	movs	r3, #0
 8010a7c:	607b      	str	r3, [r7, #4]
 8010a7e:	e00c      	b.n	8010a9a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8010a80:	687a      	ldr	r2, [r7, #4]
 8010a82:	4613      	mov	r3, r2
 8010a84:	009b      	lsls	r3, r3, #2
 8010a86:	4413      	add	r3, r2
 8010a88:	009b      	lsls	r3, r3, #2
 8010a8a:	4a12      	ldr	r2, [pc, #72]	; (8010ad4 <prvInitialiseTaskLists+0x60>)
 8010a8c:	4413      	add	r3, r2
 8010a8e:	4618      	mov	r0, r3
 8010a90:	f7fe f8ec 	bl	800ec6c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8010a94:	687b      	ldr	r3, [r7, #4]
 8010a96:	3301      	adds	r3, #1
 8010a98:	607b      	str	r3, [r7, #4]
 8010a9a:	687b      	ldr	r3, [r7, #4]
 8010a9c:	2b37      	cmp	r3, #55	; 0x37
 8010a9e:	d9ef      	bls.n	8010a80 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8010aa0:	480d      	ldr	r0, [pc, #52]	; (8010ad8 <prvInitialiseTaskLists+0x64>)
 8010aa2:	f7fe f8e3 	bl	800ec6c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8010aa6:	480d      	ldr	r0, [pc, #52]	; (8010adc <prvInitialiseTaskLists+0x68>)
 8010aa8:	f7fe f8e0 	bl	800ec6c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8010aac:	480c      	ldr	r0, [pc, #48]	; (8010ae0 <prvInitialiseTaskLists+0x6c>)
 8010aae:	f7fe f8dd 	bl	800ec6c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8010ab2:	480c      	ldr	r0, [pc, #48]	; (8010ae4 <prvInitialiseTaskLists+0x70>)
 8010ab4:	f7fe f8da 	bl	800ec6c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8010ab8:	480b      	ldr	r0, [pc, #44]	; (8010ae8 <prvInitialiseTaskLists+0x74>)
 8010aba:	f7fe f8d7 	bl	800ec6c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8010abe:	4b0b      	ldr	r3, [pc, #44]	; (8010aec <prvInitialiseTaskLists+0x78>)
 8010ac0:	4a05      	ldr	r2, [pc, #20]	; (8010ad8 <prvInitialiseTaskLists+0x64>)
 8010ac2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8010ac4:	4b0a      	ldr	r3, [pc, #40]	; (8010af0 <prvInitialiseTaskLists+0x7c>)
 8010ac6:	4a05      	ldr	r2, [pc, #20]	; (8010adc <prvInitialiseTaskLists+0x68>)
 8010ac8:	601a      	str	r2, [r3, #0]
}
 8010aca:	bf00      	nop
 8010acc:	3708      	adds	r7, #8
 8010ace:	46bd      	mov	sp, r7
 8010ad0:	bd80      	pop	{r7, pc}
 8010ad2:	bf00      	nop
 8010ad4:	200059dc 	.word	0x200059dc
 8010ad8:	20005e3c 	.word	0x20005e3c
 8010adc:	20005e50 	.word	0x20005e50
 8010ae0:	20005e6c 	.word	0x20005e6c
 8010ae4:	20005e80 	.word	0x20005e80
 8010ae8:	20005e98 	.word	0x20005e98
 8010aec:	20005e64 	.word	0x20005e64
 8010af0:	20005e68 	.word	0x20005e68

08010af4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8010af4:	b580      	push	{r7, lr}
 8010af6:	b082      	sub	sp, #8
 8010af8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8010afa:	e019      	b.n	8010b30 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8010afc:	f7fd fdc6 	bl	800e68c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010b00:	4b0f      	ldr	r3, [pc, #60]	; (8010b40 <prvCheckTasksWaitingTermination+0x4c>)
 8010b02:	68db      	ldr	r3, [r3, #12]
 8010b04:	68db      	ldr	r3, [r3, #12]
 8010b06:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8010b08:	687b      	ldr	r3, [r7, #4]
 8010b0a:	3304      	adds	r3, #4
 8010b0c:	4618      	mov	r0, r3
 8010b0e:	f7fe f937 	bl	800ed80 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8010b12:	4b0c      	ldr	r3, [pc, #48]	; (8010b44 <prvCheckTasksWaitingTermination+0x50>)
 8010b14:	681b      	ldr	r3, [r3, #0]
 8010b16:	3b01      	subs	r3, #1
 8010b18:	4a0a      	ldr	r2, [pc, #40]	; (8010b44 <prvCheckTasksWaitingTermination+0x50>)
 8010b1a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8010b1c:	4b0a      	ldr	r3, [pc, #40]	; (8010b48 <prvCheckTasksWaitingTermination+0x54>)
 8010b1e:	681b      	ldr	r3, [r3, #0]
 8010b20:	3b01      	subs	r3, #1
 8010b22:	4a09      	ldr	r2, [pc, #36]	; (8010b48 <prvCheckTasksWaitingTermination+0x54>)
 8010b24:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8010b26:	f7fd fddf 	bl	800e6e8 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8010b2a:	6878      	ldr	r0, [r7, #4]
 8010b2c:	f000 f80e 	bl	8010b4c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8010b30:	4b05      	ldr	r3, [pc, #20]	; (8010b48 <prvCheckTasksWaitingTermination+0x54>)
 8010b32:	681b      	ldr	r3, [r3, #0]
 8010b34:	2b00      	cmp	r3, #0
 8010b36:	d1e1      	bne.n	8010afc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8010b38:	bf00      	nop
 8010b3a:	3708      	adds	r7, #8
 8010b3c:	46bd      	mov	sp, r7
 8010b3e:	bd80      	pop	{r7, pc}
 8010b40:	20005e80 	.word	0x20005e80
 8010b44:	20005eac 	.word	0x20005eac
 8010b48:	20005e94 	.word	0x20005e94

08010b4c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8010b4c:	b580      	push	{r7, lr}
 8010b4e:	b084      	sub	sp, #16
 8010b50:	af00      	add	r7, sp, #0
 8010b52:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8010b54:	687b      	ldr	r3, [r7, #4]
 8010b56:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8010b5a:	2b00      	cmp	r3, #0
 8010b5c:	d108      	bne.n	8010b70 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8010b5e:	687b      	ldr	r3, [r7, #4]
 8010b60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010b62:	4618      	mov	r0, r3
 8010b64:	f7fd ff6e 	bl	800ea44 <vPortFree>
				vPortFree( pxTCB );
 8010b68:	6878      	ldr	r0, [r7, #4]
 8010b6a:	f7fd ff6b 	bl	800ea44 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8010b6e:	e017      	b.n	8010ba0 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8010b70:	687b      	ldr	r3, [r7, #4]
 8010b72:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8010b76:	2b01      	cmp	r3, #1
 8010b78:	d103      	bne.n	8010b82 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8010b7a:	6878      	ldr	r0, [r7, #4]
 8010b7c:	f7fd ff62 	bl	800ea44 <vPortFree>
	}
 8010b80:	e00e      	b.n	8010ba0 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8010b82:	687b      	ldr	r3, [r7, #4]
 8010b84:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8010b88:	2b02      	cmp	r3, #2
 8010b8a:	d009      	beq.n	8010ba0 <prvDeleteTCB+0x54>
 8010b8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010b90:	f383 8811 	msr	BASEPRI, r3
 8010b94:	f3bf 8f6f 	isb	sy
 8010b98:	f3bf 8f4f 	dsb	sy
 8010b9c:	60fb      	str	r3, [r7, #12]
 8010b9e:	e7fe      	b.n	8010b9e <prvDeleteTCB+0x52>
	}
 8010ba0:	bf00      	nop
 8010ba2:	3710      	adds	r7, #16
 8010ba4:	46bd      	mov	sp, r7
 8010ba6:	bd80      	pop	{r7, pc}

08010ba8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8010ba8:	b480      	push	{r7}
 8010baa:	b083      	sub	sp, #12
 8010bac:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8010bae:	4b0c      	ldr	r3, [pc, #48]	; (8010be0 <prvResetNextTaskUnblockTime+0x38>)
 8010bb0:	681b      	ldr	r3, [r3, #0]
 8010bb2:	681b      	ldr	r3, [r3, #0]
 8010bb4:	2b00      	cmp	r3, #0
 8010bb6:	d104      	bne.n	8010bc2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8010bb8:	4b0a      	ldr	r3, [pc, #40]	; (8010be4 <prvResetNextTaskUnblockTime+0x3c>)
 8010bba:	f04f 32ff 	mov.w	r2, #4294967295
 8010bbe:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8010bc0:	e008      	b.n	8010bd4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010bc2:	4b07      	ldr	r3, [pc, #28]	; (8010be0 <prvResetNextTaskUnblockTime+0x38>)
 8010bc4:	681b      	ldr	r3, [r3, #0]
 8010bc6:	68db      	ldr	r3, [r3, #12]
 8010bc8:	68db      	ldr	r3, [r3, #12]
 8010bca:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8010bcc:	687b      	ldr	r3, [r7, #4]
 8010bce:	685b      	ldr	r3, [r3, #4]
 8010bd0:	4a04      	ldr	r2, [pc, #16]	; (8010be4 <prvResetNextTaskUnblockTime+0x3c>)
 8010bd2:	6013      	str	r3, [r2, #0]
}
 8010bd4:	bf00      	nop
 8010bd6:	370c      	adds	r7, #12
 8010bd8:	46bd      	mov	sp, r7
 8010bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010bde:	4770      	bx	lr
 8010be0:	20005e64 	.word	0x20005e64
 8010be4:	20005ecc 	.word	0x20005ecc

08010be8 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8010be8:	b480      	push	{r7}
 8010bea:	b083      	sub	sp, #12
 8010bec:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 8010bee:	4b05      	ldr	r3, [pc, #20]	; (8010c04 <xTaskGetCurrentTaskHandle+0x1c>)
 8010bf0:	681b      	ldr	r3, [r3, #0]
 8010bf2:	607b      	str	r3, [r7, #4]

		return xReturn;
 8010bf4:	687b      	ldr	r3, [r7, #4]
	}
 8010bf6:	4618      	mov	r0, r3
 8010bf8:	370c      	adds	r7, #12
 8010bfa:	46bd      	mov	sp, r7
 8010bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c00:	4770      	bx	lr
 8010c02:	bf00      	nop
 8010c04:	200059d8 	.word	0x200059d8

08010c08 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8010c08:	b480      	push	{r7}
 8010c0a:	b083      	sub	sp, #12
 8010c0c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8010c0e:	4b0b      	ldr	r3, [pc, #44]	; (8010c3c <xTaskGetSchedulerState+0x34>)
 8010c10:	681b      	ldr	r3, [r3, #0]
 8010c12:	2b00      	cmp	r3, #0
 8010c14:	d102      	bne.n	8010c1c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8010c16:	2301      	movs	r3, #1
 8010c18:	607b      	str	r3, [r7, #4]
 8010c1a:	e008      	b.n	8010c2e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8010c1c:	4b08      	ldr	r3, [pc, #32]	; (8010c40 <xTaskGetSchedulerState+0x38>)
 8010c1e:	681b      	ldr	r3, [r3, #0]
 8010c20:	2b00      	cmp	r3, #0
 8010c22:	d102      	bne.n	8010c2a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8010c24:	2302      	movs	r3, #2
 8010c26:	607b      	str	r3, [r7, #4]
 8010c28:	e001      	b.n	8010c2e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8010c2a:	2300      	movs	r3, #0
 8010c2c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8010c2e:	687b      	ldr	r3, [r7, #4]
	}
 8010c30:	4618      	mov	r0, r3
 8010c32:	370c      	adds	r7, #12
 8010c34:	46bd      	mov	sp, r7
 8010c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c3a:	4770      	bx	lr
 8010c3c:	20005eb8 	.word	0x20005eb8
 8010c40:	20005ed4 	.word	0x20005ed4

08010c44 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8010c44:	b580      	push	{r7, lr}
 8010c46:	b084      	sub	sp, #16
 8010c48:	af00      	add	r7, sp, #0
 8010c4a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8010c4c:	687b      	ldr	r3, [r7, #4]
 8010c4e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8010c50:	2300      	movs	r3, #0
 8010c52:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8010c54:	687b      	ldr	r3, [r7, #4]
 8010c56:	2b00      	cmp	r3, #0
 8010c58:	d051      	beq.n	8010cfe <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8010c5a:	68bb      	ldr	r3, [r7, #8]
 8010c5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010c5e:	4b2a      	ldr	r3, [pc, #168]	; (8010d08 <xTaskPriorityInherit+0xc4>)
 8010c60:	681b      	ldr	r3, [r3, #0]
 8010c62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010c64:	429a      	cmp	r2, r3
 8010c66:	d241      	bcs.n	8010cec <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8010c68:	68bb      	ldr	r3, [r7, #8]
 8010c6a:	699b      	ldr	r3, [r3, #24]
 8010c6c:	2b00      	cmp	r3, #0
 8010c6e:	db06      	blt.n	8010c7e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010c70:	4b25      	ldr	r3, [pc, #148]	; (8010d08 <xTaskPriorityInherit+0xc4>)
 8010c72:	681b      	ldr	r3, [r3, #0]
 8010c74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010c76:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8010c7a:	68bb      	ldr	r3, [r7, #8]
 8010c7c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8010c7e:	68bb      	ldr	r3, [r7, #8]
 8010c80:	6959      	ldr	r1, [r3, #20]
 8010c82:	68bb      	ldr	r3, [r7, #8]
 8010c84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010c86:	4613      	mov	r3, r2
 8010c88:	009b      	lsls	r3, r3, #2
 8010c8a:	4413      	add	r3, r2
 8010c8c:	009b      	lsls	r3, r3, #2
 8010c8e:	4a1f      	ldr	r2, [pc, #124]	; (8010d0c <xTaskPriorityInherit+0xc8>)
 8010c90:	4413      	add	r3, r2
 8010c92:	4299      	cmp	r1, r3
 8010c94:	d122      	bne.n	8010cdc <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8010c96:	68bb      	ldr	r3, [r7, #8]
 8010c98:	3304      	adds	r3, #4
 8010c9a:	4618      	mov	r0, r3
 8010c9c:	f7fe f870 	bl	800ed80 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8010ca0:	4b19      	ldr	r3, [pc, #100]	; (8010d08 <xTaskPriorityInherit+0xc4>)
 8010ca2:	681b      	ldr	r3, [r3, #0]
 8010ca4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010ca6:	68bb      	ldr	r3, [r7, #8]
 8010ca8:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8010caa:	68bb      	ldr	r3, [r7, #8]
 8010cac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010cae:	4b18      	ldr	r3, [pc, #96]	; (8010d10 <xTaskPriorityInherit+0xcc>)
 8010cb0:	681b      	ldr	r3, [r3, #0]
 8010cb2:	429a      	cmp	r2, r3
 8010cb4:	d903      	bls.n	8010cbe <xTaskPriorityInherit+0x7a>
 8010cb6:	68bb      	ldr	r3, [r7, #8]
 8010cb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010cba:	4a15      	ldr	r2, [pc, #84]	; (8010d10 <xTaskPriorityInherit+0xcc>)
 8010cbc:	6013      	str	r3, [r2, #0]
 8010cbe:	68bb      	ldr	r3, [r7, #8]
 8010cc0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010cc2:	4613      	mov	r3, r2
 8010cc4:	009b      	lsls	r3, r3, #2
 8010cc6:	4413      	add	r3, r2
 8010cc8:	009b      	lsls	r3, r3, #2
 8010cca:	4a10      	ldr	r2, [pc, #64]	; (8010d0c <xTaskPriorityInherit+0xc8>)
 8010ccc:	441a      	add	r2, r3
 8010cce:	68bb      	ldr	r3, [r7, #8]
 8010cd0:	3304      	adds	r3, #4
 8010cd2:	4619      	mov	r1, r3
 8010cd4:	4610      	mov	r0, r2
 8010cd6:	f7fd fff6 	bl	800ecc6 <vListInsertEnd>
 8010cda:	e004      	b.n	8010ce6 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8010cdc:	4b0a      	ldr	r3, [pc, #40]	; (8010d08 <xTaskPriorityInherit+0xc4>)
 8010cde:	681b      	ldr	r3, [r3, #0]
 8010ce0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010ce2:	68bb      	ldr	r3, [r7, #8]
 8010ce4:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8010ce6:	2301      	movs	r3, #1
 8010ce8:	60fb      	str	r3, [r7, #12]
 8010cea:	e008      	b.n	8010cfe <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8010cec:	68bb      	ldr	r3, [r7, #8]
 8010cee:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8010cf0:	4b05      	ldr	r3, [pc, #20]	; (8010d08 <xTaskPriorityInherit+0xc4>)
 8010cf2:	681b      	ldr	r3, [r3, #0]
 8010cf4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010cf6:	429a      	cmp	r2, r3
 8010cf8:	d201      	bcs.n	8010cfe <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8010cfa:	2301      	movs	r3, #1
 8010cfc:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8010cfe:	68fb      	ldr	r3, [r7, #12]
	}
 8010d00:	4618      	mov	r0, r3
 8010d02:	3710      	adds	r7, #16
 8010d04:	46bd      	mov	sp, r7
 8010d06:	bd80      	pop	{r7, pc}
 8010d08:	200059d8 	.word	0x200059d8
 8010d0c:	200059dc 	.word	0x200059dc
 8010d10:	20005eb4 	.word	0x20005eb4

08010d14 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8010d14:	b580      	push	{r7, lr}
 8010d16:	b086      	sub	sp, #24
 8010d18:	af00      	add	r7, sp, #0
 8010d1a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8010d1c:	687b      	ldr	r3, [r7, #4]
 8010d1e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8010d20:	2300      	movs	r3, #0
 8010d22:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8010d24:	687b      	ldr	r3, [r7, #4]
 8010d26:	2b00      	cmp	r3, #0
 8010d28:	d054      	beq.n	8010dd4 <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8010d2a:	4b2d      	ldr	r3, [pc, #180]	; (8010de0 <xTaskPriorityDisinherit+0xcc>)
 8010d2c:	681b      	ldr	r3, [r3, #0]
 8010d2e:	693a      	ldr	r2, [r7, #16]
 8010d30:	429a      	cmp	r2, r3
 8010d32:	d009      	beq.n	8010d48 <xTaskPriorityDisinherit+0x34>
 8010d34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010d38:	f383 8811 	msr	BASEPRI, r3
 8010d3c:	f3bf 8f6f 	isb	sy
 8010d40:	f3bf 8f4f 	dsb	sy
 8010d44:	60fb      	str	r3, [r7, #12]
 8010d46:	e7fe      	b.n	8010d46 <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8010d48:	693b      	ldr	r3, [r7, #16]
 8010d4a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010d4c:	2b00      	cmp	r3, #0
 8010d4e:	d109      	bne.n	8010d64 <xTaskPriorityDisinherit+0x50>
 8010d50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010d54:	f383 8811 	msr	BASEPRI, r3
 8010d58:	f3bf 8f6f 	isb	sy
 8010d5c:	f3bf 8f4f 	dsb	sy
 8010d60:	60bb      	str	r3, [r7, #8]
 8010d62:	e7fe      	b.n	8010d62 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8010d64:	693b      	ldr	r3, [r7, #16]
 8010d66:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010d68:	1e5a      	subs	r2, r3, #1
 8010d6a:	693b      	ldr	r3, [r7, #16]
 8010d6c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8010d6e:	693b      	ldr	r3, [r7, #16]
 8010d70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010d72:	693b      	ldr	r3, [r7, #16]
 8010d74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010d76:	429a      	cmp	r2, r3
 8010d78:	d02c      	beq.n	8010dd4 <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8010d7a:	693b      	ldr	r3, [r7, #16]
 8010d7c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010d7e:	2b00      	cmp	r3, #0
 8010d80:	d128      	bne.n	8010dd4 <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8010d82:	693b      	ldr	r3, [r7, #16]
 8010d84:	3304      	adds	r3, #4
 8010d86:	4618      	mov	r0, r3
 8010d88:	f7fd fffa 	bl	800ed80 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8010d8c:	693b      	ldr	r3, [r7, #16]
 8010d8e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8010d90:	693b      	ldr	r3, [r7, #16]
 8010d92:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010d94:	693b      	ldr	r3, [r7, #16]
 8010d96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010d98:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8010d9c:	693b      	ldr	r3, [r7, #16]
 8010d9e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8010da0:	693b      	ldr	r3, [r7, #16]
 8010da2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010da4:	4b0f      	ldr	r3, [pc, #60]	; (8010de4 <xTaskPriorityDisinherit+0xd0>)
 8010da6:	681b      	ldr	r3, [r3, #0]
 8010da8:	429a      	cmp	r2, r3
 8010daa:	d903      	bls.n	8010db4 <xTaskPriorityDisinherit+0xa0>
 8010dac:	693b      	ldr	r3, [r7, #16]
 8010dae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010db0:	4a0c      	ldr	r2, [pc, #48]	; (8010de4 <xTaskPriorityDisinherit+0xd0>)
 8010db2:	6013      	str	r3, [r2, #0]
 8010db4:	693b      	ldr	r3, [r7, #16]
 8010db6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010db8:	4613      	mov	r3, r2
 8010dba:	009b      	lsls	r3, r3, #2
 8010dbc:	4413      	add	r3, r2
 8010dbe:	009b      	lsls	r3, r3, #2
 8010dc0:	4a09      	ldr	r2, [pc, #36]	; (8010de8 <xTaskPriorityDisinherit+0xd4>)
 8010dc2:	441a      	add	r2, r3
 8010dc4:	693b      	ldr	r3, [r7, #16]
 8010dc6:	3304      	adds	r3, #4
 8010dc8:	4619      	mov	r1, r3
 8010dca:	4610      	mov	r0, r2
 8010dcc:	f7fd ff7b 	bl	800ecc6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8010dd0:	2301      	movs	r3, #1
 8010dd2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8010dd4:	697b      	ldr	r3, [r7, #20]
	}
 8010dd6:	4618      	mov	r0, r3
 8010dd8:	3718      	adds	r7, #24
 8010dda:	46bd      	mov	sp, r7
 8010ddc:	bd80      	pop	{r7, pc}
 8010dde:	bf00      	nop
 8010de0:	200059d8 	.word	0x200059d8
 8010de4:	20005eb4 	.word	0x20005eb4
 8010de8:	200059dc 	.word	0x200059dc

08010dec <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8010dec:	b580      	push	{r7, lr}
 8010dee:	b088      	sub	sp, #32
 8010df0:	af00      	add	r7, sp, #0
 8010df2:	6078      	str	r0, [r7, #4]
 8010df4:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8010df6:	687b      	ldr	r3, [r7, #4]
 8010df8:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8010dfa:	2301      	movs	r3, #1
 8010dfc:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8010dfe:	687b      	ldr	r3, [r7, #4]
 8010e00:	2b00      	cmp	r3, #0
 8010e02:	d068      	beq.n	8010ed6 <vTaskPriorityDisinheritAfterTimeout+0xea>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8010e04:	69bb      	ldr	r3, [r7, #24]
 8010e06:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010e08:	2b00      	cmp	r3, #0
 8010e0a:	d109      	bne.n	8010e20 <vTaskPriorityDisinheritAfterTimeout+0x34>
 8010e0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010e10:	f383 8811 	msr	BASEPRI, r3
 8010e14:	f3bf 8f6f 	isb	sy
 8010e18:	f3bf 8f4f 	dsb	sy
 8010e1c:	60fb      	str	r3, [r7, #12]
 8010e1e:	e7fe      	b.n	8010e1e <vTaskPriorityDisinheritAfterTimeout+0x32>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8010e20:	69bb      	ldr	r3, [r7, #24]
 8010e22:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010e24:	683a      	ldr	r2, [r7, #0]
 8010e26:	429a      	cmp	r2, r3
 8010e28:	d902      	bls.n	8010e30 <vTaskPriorityDisinheritAfterTimeout+0x44>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8010e2a:	683b      	ldr	r3, [r7, #0]
 8010e2c:	61fb      	str	r3, [r7, #28]
 8010e2e:	e002      	b.n	8010e36 <vTaskPriorityDisinheritAfterTimeout+0x4a>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8010e30:	69bb      	ldr	r3, [r7, #24]
 8010e32:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010e34:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8010e36:	69bb      	ldr	r3, [r7, #24]
 8010e38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010e3a:	69fa      	ldr	r2, [r7, #28]
 8010e3c:	429a      	cmp	r2, r3
 8010e3e:	d04a      	beq.n	8010ed6 <vTaskPriorityDisinheritAfterTimeout+0xea>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8010e40:	69bb      	ldr	r3, [r7, #24]
 8010e42:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010e44:	697a      	ldr	r2, [r7, #20]
 8010e46:	429a      	cmp	r2, r3
 8010e48:	d145      	bne.n	8010ed6 <vTaskPriorityDisinheritAfterTimeout+0xea>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8010e4a:	4b25      	ldr	r3, [pc, #148]	; (8010ee0 <vTaskPriorityDisinheritAfterTimeout+0xf4>)
 8010e4c:	681b      	ldr	r3, [r3, #0]
 8010e4e:	69ba      	ldr	r2, [r7, #24]
 8010e50:	429a      	cmp	r2, r3
 8010e52:	d109      	bne.n	8010e68 <vTaskPriorityDisinheritAfterTimeout+0x7c>
 8010e54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010e58:	f383 8811 	msr	BASEPRI, r3
 8010e5c:	f3bf 8f6f 	isb	sy
 8010e60:	f3bf 8f4f 	dsb	sy
 8010e64:	60bb      	str	r3, [r7, #8]
 8010e66:	e7fe      	b.n	8010e66 <vTaskPriorityDisinheritAfterTimeout+0x7a>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8010e68:	69bb      	ldr	r3, [r7, #24]
 8010e6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010e6c:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8010e6e:	69bb      	ldr	r3, [r7, #24]
 8010e70:	69fa      	ldr	r2, [r7, #28]
 8010e72:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8010e74:	69bb      	ldr	r3, [r7, #24]
 8010e76:	699b      	ldr	r3, [r3, #24]
 8010e78:	2b00      	cmp	r3, #0
 8010e7a:	db04      	blt.n	8010e86 <vTaskPriorityDisinheritAfterTimeout+0x9a>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010e7c:	69fb      	ldr	r3, [r7, #28]
 8010e7e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8010e82:	69bb      	ldr	r3, [r7, #24]
 8010e84:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8010e86:	69bb      	ldr	r3, [r7, #24]
 8010e88:	6959      	ldr	r1, [r3, #20]
 8010e8a:	693a      	ldr	r2, [r7, #16]
 8010e8c:	4613      	mov	r3, r2
 8010e8e:	009b      	lsls	r3, r3, #2
 8010e90:	4413      	add	r3, r2
 8010e92:	009b      	lsls	r3, r3, #2
 8010e94:	4a13      	ldr	r2, [pc, #76]	; (8010ee4 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 8010e96:	4413      	add	r3, r2
 8010e98:	4299      	cmp	r1, r3
 8010e9a:	d11c      	bne.n	8010ed6 <vTaskPriorityDisinheritAfterTimeout+0xea>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8010e9c:	69bb      	ldr	r3, [r7, #24]
 8010e9e:	3304      	adds	r3, #4
 8010ea0:	4618      	mov	r0, r3
 8010ea2:	f7fd ff6d 	bl	800ed80 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8010ea6:	69bb      	ldr	r3, [r7, #24]
 8010ea8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010eaa:	4b0f      	ldr	r3, [pc, #60]	; (8010ee8 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8010eac:	681b      	ldr	r3, [r3, #0]
 8010eae:	429a      	cmp	r2, r3
 8010eb0:	d903      	bls.n	8010eba <vTaskPriorityDisinheritAfterTimeout+0xce>
 8010eb2:	69bb      	ldr	r3, [r7, #24]
 8010eb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010eb6:	4a0c      	ldr	r2, [pc, #48]	; (8010ee8 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8010eb8:	6013      	str	r3, [r2, #0]
 8010eba:	69bb      	ldr	r3, [r7, #24]
 8010ebc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010ebe:	4613      	mov	r3, r2
 8010ec0:	009b      	lsls	r3, r3, #2
 8010ec2:	4413      	add	r3, r2
 8010ec4:	009b      	lsls	r3, r3, #2
 8010ec6:	4a07      	ldr	r2, [pc, #28]	; (8010ee4 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 8010ec8:	441a      	add	r2, r3
 8010eca:	69bb      	ldr	r3, [r7, #24]
 8010ecc:	3304      	adds	r3, #4
 8010ece:	4619      	mov	r1, r3
 8010ed0:	4610      	mov	r0, r2
 8010ed2:	f7fd fef8 	bl	800ecc6 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8010ed6:	bf00      	nop
 8010ed8:	3720      	adds	r7, #32
 8010eda:	46bd      	mov	sp, r7
 8010edc:	bd80      	pop	{r7, pc}
 8010ede:	bf00      	nop
 8010ee0:	200059d8 	.word	0x200059d8
 8010ee4:	200059dc 	.word	0x200059dc
 8010ee8:	20005eb4 	.word	0x20005eb4

08010eec <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8010eec:	b480      	push	{r7}
 8010eee:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8010ef0:	4b07      	ldr	r3, [pc, #28]	; (8010f10 <pvTaskIncrementMutexHeldCount+0x24>)
 8010ef2:	681b      	ldr	r3, [r3, #0]
 8010ef4:	2b00      	cmp	r3, #0
 8010ef6:	d004      	beq.n	8010f02 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8010ef8:	4b05      	ldr	r3, [pc, #20]	; (8010f10 <pvTaskIncrementMutexHeldCount+0x24>)
 8010efa:	681b      	ldr	r3, [r3, #0]
 8010efc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8010efe:	3201      	adds	r2, #1
 8010f00:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 8010f02:	4b03      	ldr	r3, [pc, #12]	; (8010f10 <pvTaskIncrementMutexHeldCount+0x24>)
 8010f04:	681b      	ldr	r3, [r3, #0]
	}
 8010f06:	4618      	mov	r0, r3
 8010f08:	46bd      	mov	sp, r7
 8010f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f0e:	4770      	bx	lr
 8010f10:	200059d8 	.word	0x200059d8

08010f14 <ulTaskNotifyTake>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
	{
 8010f14:	b580      	push	{r7, lr}
 8010f16:	b084      	sub	sp, #16
 8010f18:	af00      	add	r7, sp, #0
 8010f1a:	6078      	str	r0, [r7, #4]
 8010f1c:	6039      	str	r1, [r7, #0]
	uint32_t ulReturn;

		taskENTER_CRITICAL();
 8010f1e:	f7fd fbb5 	bl	800e68c <vPortEnterCritical>
		{
			/* Only block if the notification count is not already non-zero. */
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 8010f22:	4b1e      	ldr	r3, [pc, #120]	; (8010f9c <ulTaskNotifyTake+0x88>)
 8010f24:	681b      	ldr	r3, [r3, #0]
 8010f26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010f28:	2b00      	cmp	r3, #0
 8010f2a:	d113      	bne.n	8010f54 <ulTaskNotifyTake+0x40>
			{
				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 8010f2c:	4b1b      	ldr	r3, [pc, #108]	; (8010f9c <ulTaskNotifyTake+0x88>)
 8010f2e:	681b      	ldr	r3, [r3, #0]
 8010f30:	2201      	movs	r2, #1
 8010f32:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

				if( xTicksToWait > ( TickType_t ) 0 )
 8010f36:	683b      	ldr	r3, [r7, #0]
 8010f38:	2b00      	cmp	r3, #0
 8010f3a:	d00b      	beq.n	8010f54 <ulTaskNotifyTake+0x40>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8010f3c:	2101      	movs	r1, #1
 8010f3e:	6838      	ldr	r0, [r7, #0]
 8010f40:	f000 fa18 	bl	8011374 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 8010f44:	4b16      	ldr	r3, [pc, #88]	; (8010fa0 <ulTaskNotifyTake+0x8c>)
 8010f46:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010f4a:	601a      	str	r2, [r3, #0]
 8010f4c:	f3bf 8f4f 	dsb	sy
 8010f50:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8010f54:	f7fd fbc8 	bl	800e6e8 <vPortExitCritical>

		taskENTER_CRITICAL();
 8010f58:	f7fd fb98 	bl	800e68c <vPortEnterCritical>
		{
			traceTASK_NOTIFY_TAKE();
			ulReturn = pxCurrentTCB->ulNotifiedValue;
 8010f5c:	4b0f      	ldr	r3, [pc, #60]	; (8010f9c <ulTaskNotifyTake+0x88>)
 8010f5e:	681b      	ldr	r3, [r3, #0]
 8010f60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010f62:	60fb      	str	r3, [r7, #12]

			if( ulReturn != 0UL )
 8010f64:	68fb      	ldr	r3, [r7, #12]
 8010f66:	2b00      	cmp	r3, #0
 8010f68:	d00c      	beq.n	8010f84 <ulTaskNotifyTake+0x70>
			{
				if( xClearCountOnExit != pdFALSE )
 8010f6a:	687b      	ldr	r3, [r7, #4]
 8010f6c:	2b00      	cmp	r3, #0
 8010f6e:	d004      	beq.n	8010f7a <ulTaskNotifyTake+0x66>
				{
					pxCurrentTCB->ulNotifiedValue = 0UL;
 8010f70:	4b0a      	ldr	r3, [pc, #40]	; (8010f9c <ulTaskNotifyTake+0x88>)
 8010f72:	681b      	ldr	r3, [r3, #0]
 8010f74:	2200      	movs	r2, #0
 8010f76:	655a      	str	r2, [r3, #84]	; 0x54
 8010f78:	e004      	b.n	8010f84 <ulTaskNotifyTake+0x70>
				}
				else
				{
					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
 8010f7a:	4b08      	ldr	r3, [pc, #32]	; (8010f9c <ulTaskNotifyTake+0x88>)
 8010f7c:	681b      	ldr	r3, [r3, #0]
 8010f7e:	68fa      	ldr	r2, [r7, #12]
 8010f80:	3a01      	subs	r2, #1
 8010f82:	655a      	str	r2, [r3, #84]	; 0x54
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8010f84:	4b05      	ldr	r3, [pc, #20]	; (8010f9c <ulTaskNotifyTake+0x88>)
 8010f86:	681b      	ldr	r3, [r3, #0]
 8010f88:	2200      	movs	r2, #0
 8010f8a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
		}
		taskEXIT_CRITICAL();
 8010f8e:	f7fd fbab 	bl	800e6e8 <vPortExitCritical>

		return ulReturn;
 8010f92:	68fb      	ldr	r3, [r7, #12]
	}
 8010f94:	4618      	mov	r0, r3
 8010f96:	3710      	adds	r7, #16
 8010f98:	46bd      	mov	sp, r7
 8010f9a:	bd80      	pop	{r7, pc}
 8010f9c:	200059d8 	.word	0x200059d8
 8010fa0:	e000ed04 	.word	0xe000ed04

08010fa4 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 8010fa4:	b580      	push	{r7, lr}
 8010fa6:	b086      	sub	sp, #24
 8010fa8:	af00      	add	r7, sp, #0
 8010faa:	60f8      	str	r0, [r7, #12]
 8010fac:	60b9      	str	r1, [r7, #8]
 8010fae:	607a      	str	r2, [r7, #4]
 8010fb0:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 8010fb2:	f7fd fb6b 	bl	800e68c <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8010fb6:	4b26      	ldr	r3, [pc, #152]	; (8011050 <xTaskNotifyWait+0xac>)
 8010fb8:	681b      	ldr	r3, [r3, #0]
 8010fba:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8010fbe:	b2db      	uxtb	r3, r3
 8010fc0:	2b02      	cmp	r3, #2
 8010fc2:	d01a      	beq.n	8010ffa <xTaskNotifyWait+0x56>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 8010fc4:	4b22      	ldr	r3, [pc, #136]	; (8011050 <xTaskNotifyWait+0xac>)
 8010fc6:	681b      	ldr	r3, [r3, #0]
 8010fc8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8010fca:	68fa      	ldr	r2, [r7, #12]
 8010fcc:	43d2      	mvns	r2, r2
 8010fce:	400a      	ands	r2, r1
 8010fd0:	655a      	str	r2, [r3, #84]	; 0x54

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 8010fd2:	4b1f      	ldr	r3, [pc, #124]	; (8011050 <xTaskNotifyWait+0xac>)
 8010fd4:	681b      	ldr	r3, [r3, #0]
 8010fd6:	2201      	movs	r2, #1
 8010fd8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

				if( xTicksToWait > ( TickType_t ) 0 )
 8010fdc:	683b      	ldr	r3, [r7, #0]
 8010fde:	2b00      	cmp	r3, #0
 8010fe0:	d00b      	beq.n	8010ffa <xTaskNotifyWait+0x56>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8010fe2:	2101      	movs	r1, #1
 8010fe4:	6838      	ldr	r0, [r7, #0]
 8010fe6:	f000 f9c5 	bl	8011374 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 8010fea:	4b1a      	ldr	r3, [pc, #104]	; (8011054 <xTaskNotifyWait+0xb0>)
 8010fec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010ff0:	601a      	str	r2, [r3, #0]
 8010ff2:	f3bf 8f4f 	dsb	sy
 8010ff6:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8010ffa:	f7fd fb75 	bl	800e6e8 <vPortExitCritical>

		taskENTER_CRITICAL();
 8010ffe:	f7fd fb45 	bl	800e68c <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 8011002:	687b      	ldr	r3, [r7, #4]
 8011004:	2b00      	cmp	r3, #0
 8011006:	d004      	beq.n	8011012 <xTaskNotifyWait+0x6e>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 8011008:	4b11      	ldr	r3, [pc, #68]	; (8011050 <xTaskNotifyWait+0xac>)
 801100a:	681b      	ldr	r3, [r3, #0]
 801100c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 801100e:	687b      	ldr	r3, [r7, #4]
 8011010:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8011012:	4b0f      	ldr	r3, [pc, #60]	; (8011050 <xTaskNotifyWait+0xac>)
 8011014:	681b      	ldr	r3, [r3, #0]
 8011016:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 801101a:	b2db      	uxtb	r3, r3
 801101c:	2b02      	cmp	r3, #2
 801101e:	d002      	beq.n	8011026 <xTaskNotifyWait+0x82>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 8011020:	2300      	movs	r3, #0
 8011022:	617b      	str	r3, [r7, #20]
 8011024:	e008      	b.n	8011038 <xTaskNotifyWait+0x94>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 8011026:	4b0a      	ldr	r3, [pc, #40]	; (8011050 <xTaskNotifyWait+0xac>)
 8011028:	681b      	ldr	r3, [r3, #0]
 801102a:	6d59      	ldr	r1, [r3, #84]	; 0x54
 801102c:	68ba      	ldr	r2, [r7, #8]
 801102e:	43d2      	mvns	r2, r2
 8011030:	400a      	ands	r2, r1
 8011032:	655a      	str	r2, [r3, #84]	; 0x54
				xReturn = pdTRUE;
 8011034:	2301      	movs	r3, #1
 8011036:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8011038:	4b05      	ldr	r3, [pc, #20]	; (8011050 <xTaskNotifyWait+0xac>)
 801103a:	681b      	ldr	r3, [r3, #0]
 801103c:	2200      	movs	r2, #0
 801103e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
		}
		taskEXIT_CRITICAL();
 8011042:	f7fd fb51 	bl	800e6e8 <vPortExitCritical>

		return xReturn;
 8011046:	697b      	ldr	r3, [r7, #20]
	}
 8011048:	4618      	mov	r0, r3
 801104a:	3718      	adds	r7, #24
 801104c:	46bd      	mov	sp, r7
 801104e:	bd80      	pop	{r7, pc}
 8011050:	200059d8 	.word	0x200059d8
 8011054:	e000ed04 	.word	0xe000ed04

08011058 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 8011058:	b580      	push	{r7, lr}
 801105a:	b08a      	sub	sp, #40	; 0x28
 801105c:	af00      	add	r7, sp, #0
 801105e:	60f8      	str	r0, [r7, #12]
 8011060:	60b9      	str	r1, [r7, #8]
 8011062:	603b      	str	r3, [r7, #0]
 8011064:	4613      	mov	r3, r2
 8011066:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 8011068:	2301      	movs	r3, #1
 801106a:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 801106c:	68fb      	ldr	r3, [r7, #12]
 801106e:	2b00      	cmp	r3, #0
 8011070:	d109      	bne.n	8011086 <xTaskGenericNotify+0x2e>
 8011072:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011076:	f383 8811 	msr	BASEPRI, r3
 801107a:	f3bf 8f6f 	isb	sy
 801107e:	f3bf 8f4f 	dsb	sy
 8011082:	61bb      	str	r3, [r7, #24]
 8011084:	e7fe      	b.n	8011084 <xTaskGenericNotify+0x2c>
		pxTCB = xTaskToNotify;
 8011086:	68fb      	ldr	r3, [r7, #12]
 8011088:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 801108a:	f7fd faff 	bl	800e68c <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 801108e:	683b      	ldr	r3, [r7, #0]
 8011090:	2b00      	cmp	r3, #0
 8011092:	d003      	beq.n	801109c <xTaskGenericNotify+0x44>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8011094:	6a3b      	ldr	r3, [r7, #32]
 8011096:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8011098:	683b      	ldr	r3, [r7, #0]
 801109a:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 801109c:	6a3b      	ldr	r3, [r7, #32]
 801109e:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80110a2:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 80110a4:	6a3b      	ldr	r3, [r7, #32]
 80110a6:	2202      	movs	r2, #2
 80110a8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

			switch( eAction )
 80110ac:	79fb      	ldrb	r3, [r7, #7]
 80110ae:	2b04      	cmp	r3, #4
 80110b0:	d827      	bhi.n	8011102 <xTaskGenericNotify+0xaa>
 80110b2:	a201      	add	r2, pc, #4	; (adr r2, 80110b8 <xTaskGenericNotify+0x60>)
 80110b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80110b8:	08011121 	.word	0x08011121
 80110bc:	080110cd 	.word	0x080110cd
 80110c0:	080110db 	.word	0x080110db
 80110c4:	080110e7 	.word	0x080110e7
 80110c8:	080110ef 	.word	0x080110ef
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 80110cc:	6a3b      	ldr	r3, [r7, #32]
 80110ce:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80110d0:	68bb      	ldr	r3, [r7, #8]
 80110d2:	431a      	orrs	r2, r3
 80110d4:	6a3b      	ldr	r3, [r7, #32]
 80110d6:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 80110d8:	e025      	b.n	8011126 <xTaskGenericNotify+0xce>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 80110da:	6a3b      	ldr	r3, [r7, #32]
 80110dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80110de:	1c5a      	adds	r2, r3, #1
 80110e0:	6a3b      	ldr	r3, [r7, #32]
 80110e2:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 80110e4:	e01f      	b.n	8011126 <xTaskGenericNotify+0xce>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 80110e6:	6a3b      	ldr	r3, [r7, #32]
 80110e8:	68ba      	ldr	r2, [r7, #8]
 80110ea:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 80110ec:	e01b      	b.n	8011126 <xTaskGenericNotify+0xce>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 80110ee:	7ffb      	ldrb	r3, [r7, #31]
 80110f0:	2b02      	cmp	r3, #2
 80110f2:	d003      	beq.n	80110fc <xTaskGenericNotify+0xa4>
					{
						pxTCB->ulNotifiedValue = ulValue;
 80110f4:	6a3b      	ldr	r3, [r7, #32]
 80110f6:	68ba      	ldr	r2, [r7, #8]
 80110f8:	655a      	str	r2, [r3, #84]	; 0x54
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 80110fa:	e014      	b.n	8011126 <xTaskGenericNotify+0xce>
						xReturn = pdFAIL;
 80110fc:	2300      	movs	r3, #0
 80110fe:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 8011100:	e011      	b.n	8011126 <xTaskGenericNotify+0xce>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 8011102:	6a3b      	ldr	r3, [r7, #32]
 8011104:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011106:	f1b3 3fff 	cmp.w	r3, #4294967295
 801110a:	d00b      	beq.n	8011124 <xTaskGenericNotify+0xcc>
 801110c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011110:	f383 8811 	msr	BASEPRI, r3
 8011114:	f3bf 8f6f 	isb	sy
 8011118:	f3bf 8f4f 	dsb	sy
 801111c:	617b      	str	r3, [r7, #20]
 801111e:	e7fe      	b.n	801111e <xTaskGenericNotify+0xc6>
					break;
 8011120:	bf00      	nop
 8011122:	e000      	b.n	8011126 <xTaskGenericNotify+0xce>

					break;
 8011124:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8011126:	7ffb      	ldrb	r3, [r7, #31]
 8011128:	2b01      	cmp	r3, #1
 801112a:	d13b      	bne.n	80111a4 <xTaskGenericNotify+0x14c>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801112c:	6a3b      	ldr	r3, [r7, #32]
 801112e:	3304      	adds	r3, #4
 8011130:	4618      	mov	r0, r3
 8011132:	f7fd fe25 	bl	800ed80 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 8011136:	6a3b      	ldr	r3, [r7, #32]
 8011138:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801113a:	4b1e      	ldr	r3, [pc, #120]	; (80111b4 <xTaskGenericNotify+0x15c>)
 801113c:	681b      	ldr	r3, [r3, #0]
 801113e:	429a      	cmp	r2, r3
 8011140:	d903      	bls.n	801114a <xTaskGenericNotify+0xf2>
 8011142:	6a3b      	ldr	r3, [r7, #32]
 8011144:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011146:	4a1b      	ldr	r2, [pc, #108]	; (80111b4 <xTaskGenericNotify+0x15c>)
 8011148:	6013      	str	r3, [r2, #0]
 801114a:	6a3b      	ldr	r3, [r7, #32]
 801114c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801114e:	4613      	mov	r3, r2
 8011150:	009b      	lsls	r3, r3, #2
 8011152:	4413      	add	r3, r2
 8011154:	009b      	lsls	r3, r3, #2
 8011156:	4a18      	ldr	r2, [pc, #96]	; (80111b8 <xTaskGenericNotify+0x160>)
 8011158:	441a      	add	r2, r3
 801115a:	6a3b      	ldr	r3, [r7, #32]
 801115c:	3304      	adds	r3, #4
 801115e:	4619      	mov	r1, r3
 8011160:	4610      	mov	r0, r2
 8011162:	f7fd fdb0 	bl	800ecc6 <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8011166:	6a3b      	ldr	r3, [r7, #32]
 8011168:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801116a:	2b00      	cmp	r3, #0
 801116c:	d009      	beq.n	8011182 <xTaskGenericNotify+0x12a>
 801116e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011172:	f383 8811 	msr	BASEPRI, r3
 8011176:	f3bf 8f6f 	isb	sy
 801117a:	f3bf 8f4f 	dsb	sy
 801117e:	613b      	str	r3, [r7, #16]
 8011180:	e7fe      	b.n	8011180 <xTaskGenericNotify+0x128>
					the tick count equals xNextTaskUnblockTime.  However if
					tickless idling is used it might be more important to enter
					sleep mode at the earliest possible time - so reset
					xNextTaskUnblockTime here to ensure it is updated at the
					earliest possible time. */
					prvResetNextTaskUnblockTime();
 8011182:	f7ff fd11 	bl	8010ba8 <prvResetNextTaskUnblockTime>
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8011186:	6a3b      	ldr	r3, [r7, #32]
 8011188:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801118a:	4b0c      	ldr	r3, [pc, #48]	; (80111bc <xTaskGenericNotify+0x164>)
 801118c:	681b      	ldr	r3, [r3, #0]
 801118e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011190:	429a      	cmp	r2, r3
 8011192:	d907      	bls.n	80111a4 <xTaskGenericNotify+0x14c>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 8011194:	4b0a      	ldr	r3, [pc, #40]	; (80111c0 <xTaskGenericNotify+0x168>)
 8011196:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801119a:	601a      	str	r2, [r3, #0]
 801119c:	f3bf 8f4f 	dsb	sy
 80111a0:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 80111a4:	f7fd faa0 	bl	800e6e8 <vPortExitCritical>

		return xReturn;
 80111a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 80111aa:	4618      	mov	r0, r3
 80111ac:	3728      	adds	r7, #40	; 0x28
 80111ae:	46bd      	mov	sp, r7
 80111b0:	bd80      	pop	{r7, pc}
 80111b2:	bf00      	nop
 80111b4:	20005eb4 	.word	0x20005eb4
 80111b8:	200059dc 	.word	0x200059dc
 80111bc:	200059d8 	.word	0x200059d8
 80111c0:	e000ed04 	.word	0xe000ed04

080111c4 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 80111c4:	b580      	push	{r7, lr}
 80111c6:	b08e      	sub	sp, #56	; 0x38
 80111c8:	af00      	add	r7, sp, #0
 80111ca:	60f8      	str	r0, [r7, #12]
 80111cc:	60b9      	str	r1, [r7, #8]
 80111ce:	603b      	str	r3, [r7, #0]
 80111d0:	4613      	mov	r3, r2
 80111d2:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 80111d4:	2301      	movs	r3, #1
 80111d6:	637b      	str	r3, [r7, #52]	; 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 80111d8:	68fb      	ldr	r3, [r7, #12]
 80111da:	2b00      	cmp	r3, #0
 80111dc:	d109      	bne.n	80111f2 <xTaskGenericNotifyFromISR+0x2e>
 80111de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80111e2:	f383 8811 	msr	BASEPRI, r3
 80111e6:	f3bf 8f6f 	isb	sy
 80111ea:	f3bf 8f4f 	dsb	sy
 80111ee:	627b      	str	r3, [r7, #36]	; 0x24
 80111f0:	e7fe      	b.n	80111f0 <xTaskGenericNotifyFromISR+0x2c>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80111f2:	f7fd fb27 	bl	800e844 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 80111f6:	68fb      	ldr	r3, [r7, #12]
 80111f8:	633b      	str	r3, [r7, #48]	; 0x30
	__asm volatile
 80111fa:	f3ef 8211 	mrs	r2, BASEPRI
 80111fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011202:	f383 8811 	msr	BASEPRI, r3
 8011206:	f3bf 8f6f 	isb	sy
 801120a:	f3bf 8f4f 	dsb	sy
 801120e:	623a      	str	r2, [r7, #32]
 8011210:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 8011212:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8011214:	62fb      	str	r3, [r7, #44]	; 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 8011216:	683b      	ldr	r3, [r7, #0]
 8011218:	2b00      	cmp	r3, #0
 801121a:	d003      	beq.n	8011224 <xTaskGenericNotifyFromISR+0x60>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 801121c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801121e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8011220:	683b      	ldr	r3, [r7, #0]
 8011222:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8011224:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011226:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 801122a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 801122e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011230:	2202      	movs	r2, #2
 8011232:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

			switch( eAction )
 8011236:	79fb      	ldrb	r3, [r7, #7]
 8011238:	2b04      	cmp	r3, #4
 801123a:	d829      	bhi.n	8011290 <xTaskGenericNotifyFromISR+0xcc>
 801123c:	a201      	add	r2, pc, #4	; (adr r2, 8011244 <xTaskGenericNotifyFromISR+0x80>)
 801123e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011242:	bf00      	nop
 8011244:	080112af 	.word	0x080112af
 8011248:	08011259 	.word	0x08011259
 801124c:	08011267 	.word	0x08011267
 8011250:	08011273 	.word	0x08011273
 8011254:	0801127b 	.word	0x0801127b
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8011258:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801125a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 801125c:	68bb      	ldr	r3, [r7, #8]
 801125e:	431a      	orrs	r2, r3
 8011260:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011262:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 8011264:	e026      	b.n	80112b4 <xTaskGenericNotifyFromISR+0xf0>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8011266:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011268:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801126a:	1c5a      	adds	r2, r3, #1
 801126c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801126e:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 8011270:	e020      	b.n	80112b4 <xTaskGenericNotifyFromISR+0xf0>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8011272:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011274:	68ba      	ldr	r2, [r7, #8]
 8011276:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 8011278:	e01c      	b.n	80112b4 <xTaskGenericNotifyFromISR+0xf0>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 801127a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 801127e:	2b02      	cmp	r3, #2
 8011280:	d003      	beq.n	801128a <xTaskGenericNotifyFromISR+0xc6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8011282:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011284:	68ba      	ldr	r2, [r7, #8]
 8011286:	655a      	str	r2, [r3, #84]	; 0x54
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8011288:	e014      	b.n	80112b4 <xTaskGenericNotifyFromISR+0xf0>
						xReturn = pdFAIL;
 801128a:	2300      	movs	r3, #0
 801128c:	637b      	str	r3, [r7, #52]	; 0x34
					break;
 801128e:	e011      	b.n	80112b4 <xTaskGenericNotifyFromISR+0xf0>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 8011290:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011292:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011294:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011298:	d00b      	beq.n	80112b2 <xTaskGenericNotifyFromISR+0xee>
	__asm volatile
 801129a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801129e:	f383 8811 	msr	BASEPRI, r3
 80112a2:	f3bf 8f6f 	isb	sy
 80112a6:	f3bf 8f4f 	dsb	sy
 80112aa:	61bb      	str	r3, [r7, #24]
 80112ac:	e7fe      	b.n	80112ac <xTaskGenericNotifyFromISR+0xe8>
					break;
 80112ae:	bf00      	nop
 80112b0:	e000      	b.n	80112b4 <xTaskGenericNotifyFromISR+0xf0>
					break;
 80112b2:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 80112b4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80112b8:	2b01      	cmp	r3, #1
 80112ba:	d145      	bne.n	8011348 <xTaskGenericNotifyFromISR+0x184>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 80112bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80112be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80112c0:	2b00      	cmp	r3, #0
 80112c2:	d009      	beq.n	80112d8 <xTaskGenericNotifyFromISR+0x114>
 80112c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80112c8:	f383 8811 	msr	BASEPRI, r3
 80112cc:	f3bf 8f6f 	isb	sy
 80112d0:	f3bf 8f4f 	dsb	sy
 80112d4:	617b      	str	r3, [r7, #20]
 80112d6:	e7fe      	b.n	80112d6 <xTaskGenericNotifyFromISR+0x112>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80112d8:	4b20      	ldr	r3, [pc, #128]	; (801135c <xTaskGenericNotifyFromISR+0x198>)
 80112da:	681b      	ldr	r3, [r3, #0]
 80112dc:	2b00      	cmp	r3, #0
 80112de:	d11d      	bne.n	801131c <xTaskGenericNotifyFromISR+0x158>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80112e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80112e2:	3304      	adds	r3, #4
 80112e4:	4618      	mov	r0, r3
 80112e6:	f7fd fd4b 	bl	800ed80 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80112ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80112ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80112ee:	4b1c      	ldr	r3, [pc, #112]	; (8011360 <xTaskGenericNotifyFromISR+0x19c>)
 80112f0:	681b      	ldr	r3, [r3, #0]
 80112f2:	429a      	cmp	r2, r3
 80112f4:	d903      	bls.n	80112fe <xTaskGenericNotifyFromISR+0x13a>
 80112f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80112f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80112fa:	4a19      	ldr	r2, [pc, #100]	; (8011360 <xTaskGenericNotifyFromISR+0x19c>)
 80112fc:	6013      	str	r3, [r2, #0]
 80112fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011300:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011302:	4613      	mov	r3, r2
 8011304:	009b      	lsls	r3, r3, #2
 8011306:	4413      	add	r3, r2
 8011308:	009b      	lsls	r3, r3, #2
 801130a:	4a16      	ldr	r2, [pc, #88]	; (8011364 <xTaskGenericNotifyFromISR+0x1a0>)
 801130c:	441a      	add	r2, r3
 801130e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011310:	3304      	adds	r3, #4
 8011312:	4619      	mov	r1, r3
 8011314:	4610      	mov	r0, r2
 8011316:	f7fd fcd6 	bl	800ecc6 <vListInsertEnd>
 801131a:	e005      	b.n	8011328 <xTaskGenericNotifyFromISR+0x164>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 801131c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801131e:	3318      	adds	r3, #24
 8011320:	4619      	mov	r1, r3
 8011322:	4811      	ldr	r0, [pc, #68]	; (8011368 <xTaskGenericNotifyFromISR+0x1a4>)
 8011324:	f7fd fccf 	bl	800ecc6 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8011328:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801132a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801132c:	4b0f      	ldr	r3, [pc, #60]	; (801136c <xTaskGenericNotifyFromISR+0x1a8>)
 801132e:	681b      	ldr	r3, [r3, #0]
 8011330:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011332:	429a      	cmp	r2, r3
 8011334:	d908      	bls.n	8011348 <xTaskGenericNotifyFromISR+0x184>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 8011336:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011338:	2b00      	cmp	r3, #0
 801133a:	d002      	beq.n	8011342 <xTaskGenericNotifyFromISR+0x17e>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 801133c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801133e:	2201      	movs	r2, #1
 8011340:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 8011342:	4b0b      	ldr	r3, [pc, #44]	; (8011370 <xTaskGenericNotifyFromISR+0x1ac>)
 8011344:	2201      	movs	r2, #1
 8011346:	601a      	str	r2, [r3, #0]
 8011348:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801134a:	613b      	str	r3, [r7, #16]
	__asm volatile
 801134c:	693b      	ldr	r3, [r7, #16]
 801134e:	f383 8811 	msr	BASEPRI, r3
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 8011352:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	}
 8011354:	4618      	mov	r0, r3
 8011356:	3738      	adds	r7, #56	; 0x38
 8011358:	46bd      	mov	sp, r7
 801135a:	bd80      	pop	{r7, pc}
 801135c:	20005ed4 	.word	0x20005ed4
 8011360:	20005eb4 	.word	0x20005eb4
 8011364:	200059dc 	.word	0x200059dc
 8011368:	20005e6c 	.word	0x20005e6c
 801136c:	200059d8 	.word	0x200059d8
 8011370:	20005ec0 	.word	0x20005ec0

08011374 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8011374:	b580      	push	{r7, lr}
 8011376:	b084      	sub	sp, #16
 8011378:	af00      	add	r7, sp, #0
 801137a:	6078      	str	r0, [r7, #4]
 801137c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 801137e:	4b21      	ldr	r3, [pc, #132]	; (8011404 <prvAddCurrentTaskToDelayedList+0x90>)
 8011380:	681b      	ldr	r3, [r3, #0]
 8011382:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8011384:	4b20      	ldr	r3, [pc, #128]	; (8011408 <prvAddCurrentTaskToDelayedList+0x94>)
 8011386:	681b      	ldr	r3, [r3, #0]
 8011388:	3304      	adds	r3, #4
 801138a:	4618      	mov	r0, r3
 801138c:	f7fd fcf8 	bl	800ed80 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8011390:	687b      	ldr	r3, [r7, #4]
 8011392:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011396:	d10a      	bne.n	80113ae <prvAddCurrentTaskToDelayedList+0x3a>
 8011398:	683b      	ldr	r3, [r7, #0]
 801139a:	2b00      	cmp	r3, #0
 801139c:	d007      	beq.n	80113ae <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801139e:	4b1a      	ldr	r3, [pc, #104]	; (8011408 <prvAddCurrentTaskToDelayedList+0x94>)
 80113a0:	681b      	ldr	r3, [r3, #0]
 80113a2:	3304      	adds	r3, #4
 80113a4:	4619      	mov	r1, r3
 80113a6:	4819      	ldr	r0, [pc, #100]	; (801140c <prvAddCurrentTaskToDelayedList+0x98>)
 80113a8:	f7fd fc8d 	bl	800ecc6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80113ac:	e026      	b.n	80113fc <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80113ae:	68fa      	ldr	r2, [r7, #12]
 80113b0:	687b      	ldr	r3, [r7, #4]
 80113b2:	4413      	add	r3, r2
 80113b4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80113b6:	4b14      	ldr	r3, [pc, #80]	; (8011408 <prvAddCurrentTaskToDelayedList+0x94>)
 80113b8:	681b      	ldr	r3, [r3, #0]
 80113ba:	68ba      	ldr	r2, [r7, #8]
 80113bc:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80113be:	68ba      	ldr	r2, [r7, #8]
 80113c0:	68fb      	ldr	r3, [r7, #12]
 80113c2:	429a      	cmp	r2, r3
 80113c4:	d209      	bcs.n	80113da <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80113c6:	4b12      	ldr	r3, [pc, #72]	; (8011410 <prvAddCurrentTaskToDelayedList+0x9c>)
 80113c8:	681a      	ldr	r2, [r3, #0]
 80113ca:	4b0f      	ldr	r3, [pc, #60]	; (8011408 <prvAddCurrentTaskToDelayedList+0x94>)
 80113cc:	681b      	ldr	r3, [r3, #0]
 80113ce:	3304      	adds	r3, #4
 80113d0:	4619      	mov	r1, r3
 80113d2:	4610      	mov	r0, r2
 80113d4:	f7fd fc9b 	bl	800ed0e <vListInsert>
}
 80113d8:	e010      	b.n	80113fc <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80113da:	4b0e      	ldr	r3, [pc, #56]	; (8011414 <prvAddCurrentTaskToDelayedList+0xa0>)
 80113dc:	681a      	ldr	r2, [r3, #0]
 80113de:	4b0a      	ldr	r3, [pc, #40]	; (8011408 <prvAddCurrentTaskToDelayedList+0x94>)
 80113e0:	681b      	ldr	r3, [r3, #0]
 80113e2:	3304      	adds	r3, #4
 80113e4:	4619      	mov	r1, r3
 80113e6:	4610      	mov	r0, r2
 80113e8:	f7fd fc91 	bl	800ed0e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80113ec:	4b0a      	ldr	r3, [pc, #40]	; (8011418 <prvAddCurrentTaskToDelayedList+0xa4>)
 80113ee:	681b      	ldr	r3, [r3, #0]
 80113f0:	68ba      	ldr	r2, [r7, #8]
 80113f2:	429a      	cmp	r2, r3
 80113f4:	d202      	bcs.n	80113fc <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80113f6:	4a08      	ldr	r2, [pc, #32]	; (8011418 <prvAddCurrentTaskToDelayedList+0xa4>)
 80113f8:	68bb      	ldr	r3, [r7, #8]
 80113fa:	6013      	str	r3, [r2, #0]
}
 80113fc:	bf00      	nop
 80113fe:	3710      	adds	r7, #16
 8011400:	46bd      	mov	sp, r7
 8011402:	bd80      	pop	{r7, pc}
 8011404:	20005eb0 	.word	0x20005eb0
 8011408:	200059d8 	.word	0x200059d8
 801140c:	20005e98 	.word	0x20005e98
 8011410:	20005e68 	.word	0x20005e68
 8011414:	20005e64 	.word	0x20005e64
 8011418:	20005ecc 	.word	0x20005ecc

0801141c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 801141c:	b580      	push	{r7, lr}
 801141e:	b08a      	sub	sp, #40	; 0x28
 8011420:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8011422:	2300      	movs	r3, #0
 8011424:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8011426:	f000 faff 	bl	8011a28 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 801142a:	4b1c      	ldr	r3, [pc, #112]	; (801149c <xTimerCreateTimerTask+0x80>)
 801142c:	681b      	ldr	r3, [r3, #0]
 801142e:	2b00      	cmp	r3, #0
 8011430:	d021      	beq.n	8011476 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8011432:	2300      	movs	r3, #0
 8011434:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8011436:	2300      	movs	r3, #0
 8011438:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 801143a:	1d3a      	adds	r2, r7, #4
 801143c:	f107 0108 	add.w	r1, r7, #8
 8011440:	f107 030c 	add.w	r3, r7, #12
 8011444:	4618      	mov	r0, r3
 8011446:	f7fc ffdd 	bl	800e404 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 801144a:	6879      	ldr	r1, [r7, #4]
 801144c:	68bb      	ldr	r3, [r7, #8]
 801144e:	68fa      	ldr	r2, [r7, #12]
 8011450:	9202      	str	r2, [sp, #8]
 8011452:	9301      	str	r3, [sp, #4]
 8011454:	2302      	movs	r3, #2
 8011456:	9300      	str	r3, [sp, #0]
 8011458:	2300      	movs	r3, #0
 801145a:	460a      	mov	r2, r1
 801145c:	4910      	ldr	r1, [pc, #64]	; (80114a0 <xTimerCreateTimerTask+0x84>)
 801145e:	4811      	ldr	r0, [pc, #68]	; (80114a4 <xTimerCreateTimerTask+0x88>)
 8011460:	f7fe fd5a 	bl	800ff18 <xTaskCreateStatic>
 8011464:	4602      	mov	r2, r0
 8011466:	4b10      	ldr	r3, [pc, #64]	; (80114a8 <xTimerCreateTimerTask+0x8c>)
 8011468:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 801146a:	4b0f      	ldr	r3, [pc, #60]	; (80114a8 <xTimerCreateTimerTask+0x8c>)
 801146c:	681b      	ldr	r3, [r3, #0]
 801146e:	2b00      	cmp	r3, #0
 8011470:	d001      	beq.n	8011476 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8011472:	2301      	movs	r3, #1
 8011474:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8011476:	697b      	ldr	r3, [r7, #20]
 8011478:	2b00      	cmp	r3, #0
 801147a:	d109      	bne.n	8011490 <xTimerCreateTimerTask+0x74>
	__asm volatile
 801147c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011480:	f383 8811 	msr	BASEPRI, r3
 8011484:	f3bf 8f6f 	isb	sy
 8011488:	f3bf 8f4f 	dsb	sy
 801148c:	613b      	str	r3, [r7, #16]
 801148e:	e7fe      	b.n	801148e <xTimerCreateTimerTask+0x72>
	return xReturn;
 8011490:	697b      	ldr	r3, [r7, #20]
}
 8011492:	4618      	mov	r0, r3
 8011494:	3718      	adds	r7, #24
 8011496:	46bd      	mov	sp, r7
 8011498:	bd80      	pop	{r7, pc}
 801149a:	bf00      	nop
 801149c:	20005f08 	.word	0x20005f08
 80114a0:	08014f78 	.word	0x08014f78
 80114a4:	080115dd 	.word	0x080115dd
 80114a8:	20005f0c 	.word	0x20005f0c

080114ac <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80114ac:	b580      	push	{r7, lr}
 80114ae:	b08a      	sub	sp, #40	; 0x28
 80114b0:	af00      	add	r7, sp, #0
 80114b2:	60f8      	str	r0, [r7, #12]
 80114b4:	60b9      	str	r1, [r7, #8]
 80114b6:	607a      	str	r2, [r7, #4]
 80114b8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80114ba:	2300      	movs	r3, #0
 80114bc:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80114be:	68fb      	ldr	r3, [r7, #12]
 80114c0:	2b00      	cmp	r3, #0
 80114c2:	d109      	bne.n	80114d8 <xTimerGenericCommand+0x2c>
 80114c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80114c8:	f383 8811 	msr	BASEPRI, r3
 80114cc:	f3bf 8f6f 	isb	sy
 80114d0:	f3bf 8f4f 	dsb	sy
 80114d4:	623b      	str	r3, [r7, #32]
 80114d6:	e7fe      	b.n	80114d6 <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80114d8:	4b19      	ldr	r3, [pc, #100]	; (8011540 <xTimerGenericCommand+0x94>)
 80114da:	681b      	ldr	r3, [r3, #0]
 80114dc:	2b00      	cmp	r3, #0
 80114de:	d02a      	beq.n	8011536 <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80114e0:	68bb      	ldr	r3, [r7, #8]
 80114e2:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80114e4:	687b      	ldr	r3, [r7, #4]
 80114e6:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80114e8:	68fb      	ldr	r3, [r7, #12]
 80114ea:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80114ec:	68bb      	ldr	r3, [r7, #8]
 80114ee:	2b05      	cmp	r3, #5
 80114f0:	dc18      	bgt.n	8011524 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80114f2:	f7ff fb89 	bl	8010c08 <xTaskGetSchedulerState>
 80114f6:	4603      	mov	r3, r0
 80114f8:	2b02      	cmp	r3, #2
 80114fa:	d109      	bne.n	8011510 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80114fc:	4b10      	ldr	r3, [pc, #64]	; (8011540 <xTimerGenericCommand+0x94>)
 80114fe:	6818      	ldr	r0, [r3, #0]
 8011500:	f107 0110 	add.w	r1, r7, #16
 8011504:	2300      	movs	r3, #0
 8011506:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011508:	f7fd febc 	bl	800f284 <xQueueGenericSend>
 801150c:	6278      	str	r0, [r7, #36]	; 0x24
 801150e:	e012      	b.n	8011536 <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8011510:	4b0b      	ldr	r3, [pc, #44]	; (8011540 <xTimerGenericCommand+0x94>)
 8011512:	6818      	ldr	r0, [r3, #0]
 8011514:	f107 0110 	add.w	r1, r7, #16
 8011518:	2300      	movs	r3, #0
 801151a:	2200      	movs	r2, #0
 801151c:	f7fd feb2 	bl	800f284 <xQueueGenericSend>
 8011520:	6278      	str	r0, [r7, #36]	; 0x24
 8011522:	e008      	b.n	8011536 <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8011524:	4b06      	ldr	r3, [pc, #24]	; (8011540 <xTimerGenericCommand+0x94>)
 8011526:	6818      	ldr	r0, [r3, #0]
 8011528:	f107 0110 	add.w	r1, r7, #16
 801152c:	2300      	movs	r3, #0
 801152e:	683a      	ldr	r2, [r7, #0]
 8011530:	f7fd ffa2 	bl	800f478 <xQueueGenericSendFromISR>
 8011534:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8011536:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8011538:	4618      	mov	r0, r3
 801153a:	3728      	adds	r7, #40	; 0x28
 801153c:	46bd      	mov	sp, r7
 801153e:	bd80      	pop	{r7, pc}
 8011540:	20005f08 	.word	0x20005f08

08011544 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8011544:	b580      	push	{r7, lr}
 8011546:	b088      	sub	sp, #32
 8011548:	af02      	add	r7, sp, #8
 801154a:	6078      	str	r0, [r7, #4]
 801154c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801154e:	4b22      	ldr	r3, [pc, #136]	; (80115d8 <prvProcessExpiredTimer+0x94>)
 8011550:	681b      	ldr	r3, [r3, #0]
 8011552:	68db      	ldr	r3, [r3, #12]
 8011554:	68db      	ldr	r3, [r3, #12]
 8011556:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8011558:	697b      	ldr	r3, [r7, #20]
 801155a:	3304      	adds	r3, #4
 801155c:	4618      	mov	r0, r3
 801155e:	f7fd fc0f 	bl	800ed80 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8011562:	697b      	ldr	r3, [r7, #20]
 8011564:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8011568:	f003 0304 	and.w	r3, r3, #4
 801156c:	2b00      	cmp	r3, #0
 801156e:	d021      	beq.n	80115b4 <prvProcessExpiredTimer+0x70>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8011570:	697b      	ldr	r3, [r7, #20]
 8011572:	699a      	ldr	r2, [r3, #24]
 8011574:	687b      	ldr	r3, [r7, #4]
 8011576:	18d1      	adds	r1, r2, r3
 8011578:	687b      	ldr	r3, [r7, #4]
 801157a:	683a      	ldr	r2, [r7, #0]
 801157c:	6978      	ldr	r0, [r7, #20]
 801157e:	f000 f8d1 	bl	8011724 <prvInsertTimerInActiveList>
 8011582:	4603      	mov	r3, r0
 8011584:	2b00      	cmp	r3, #0
 8011586:	d01e      	beq.n	80115c6 <prvProcessExpiredTimer+0x82>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8011588:	2300      	movs	r3, #0
 801158a:	9300      	str	r3, [sp, #0]
 801158c:	2300      	movs	r3, #0
 801158e:	687a      	ldr	r2, [r7, #4]
 8011590:	2100      	movs	r1, #0
 8011592:	6978      	ldr	r0, [r7, #20]
 8011594:	f7ff ff8a 	bl	80114ac <xTimerGenericCommand>
 8011598:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 801159a:	693b      	ldr	r3, [r7, #16]
 801159c:	2b00      	cmp	r3, #0
 801159e:	d112      	bne.n	80115c6 <prvProcessExpiredTimer+0x82>
 80115a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80115a4:	f383 8811 	msr	BASEPRI, r3
 80115a8:	f3bf 8f6f 	isb	sy
 80115ac:	f3bf 8f4f 	dsb	sy
 80115b0:	60fb      	str	r3, [r7, #12]
 80115b2:	e7fe      	b.n	80115b2 <prvProcessExpiredTimer+0x6e>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80115b4:	697b      	ldr	r3, [r7, #20]
 80115b6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80115ba:	f023 0301 	bic.w	r3, r3, #1
 80115be:	b2da      	uxtb	r2, r3
 80115c0:	697b      	ldr	r3, [r7, #20]
 80115c2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80115c6:	697b      	ldr	r3, [r7, #20]
 80115c8:	6a1b      	ldr	r3, [r3, #32]
 80115ca:	6978      	ldr	r0, [r7, #20]
 80115cc:	4798      	blx	r3
}
 80115ce:	bf00      	nop
 80115d0:	3718      	adds	r7, #24
 80115d2:	46bd      	mov	sp, r7
 80115d4:	bd80      	pop	{r7, pc}
 80115d6:	bf00      	nop
 80115d8:	20005f00 	.word	0x20005f00

080115dc <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80115dc:	b580      	push	{r7, lr}
 80115de:	b084      	sub	sp, #16
 80115e0:	af00      	add	r7, sp, #0
 80115e2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80115e4:	f107 0308 	add.w	r3, r7, #8
 80115e8:	4618      	mov	r0, r3
 80115ea:	f000 f857 	bl	801169c <prvGetNextExpireTime>
 80115ee:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80115f0:	68bb      	ldr	r3, [r7, #8]
 80115f2:	4619      	mov	r1, r3
 80115f4:	68f8      	ldr	r0, [r7, #12]
 80115f6:	f000 f803 	bl	8011600 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80115fa:	f000 f8d5 	bl	80117a8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80115fe:	e7f1      	b.n	80115e4 <prvTimerTask+0x8>

08011600 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8011600:	b580      	push	{r7, lr}
 8011602:	b084      	sub	sp, #16
 8011604:	af00      	add	r7, sp, #0
 8011606:	6078      	str	r0, [r7, #4]
 8011608:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 801160a:	f7fe febb 	bl	8010384 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 801160e:	f107 0308 	add.w	r3, r7, #8
 8011612:	4618      	mov	r0, r3
 8011614:	f000 f866 	bl	80116e4 <prvSampleTimeNow>
 8011618:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 801161a:	68bb      	ldr	r3, [r7, #8]
 801161c:	2b00      	cmp	r3, #0
 801161e:	d130      	bne.n	8011682 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8011620:	683b      	ldr	r3, [r7, #0]
 8011622:	2b00      	cmp	r3, #0
 8011624:	d10a      	bne.n	801163c <prvProcessTimerOrBlockTask+0x3c>
 8011626:	687a      	ldr	r2, [r7, #4]
 8011628:	68fb      	ldr	r3, [r7, #12]
 801162a:	429a      	cmp	r2, r3
 801162c:	d806      	bhi.n	801163c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 801162e:	f7fe feef 	bl	8010410 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8011632:	68f9      	ldr	r1, [r7, #12]
 8011634:	6878      	ldr	r0, [r7, #4]
 8011636:	f7ff ff85 	bl	8011544 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 801163a:	e024      	b.n	8011686 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 801163c:	683b      	ldr	r3, [r7, #0]
 801163e:	2b00      	cmp	r3, #0
 8011640:	d008      	beq.n	8011654 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8011642:	4b13      	ldr	r3, [pc, #76]	; (8011690 <prvProcessTimerOrBlockTask+0x90>)
 8011644:	681b      	ldr	r3, [r3, #0]
 8011646:	681b      	ldr	r3, [r3, #0]
 8011648:	2b00      	cmp	r3, #0
 801164a:	d101      	bne.n	8011650 <prvProcessTimerOrBlockTask+0x50>
 801164c:	2301      	movs	r3, #1
 801164e:	e000      	b.n	8011652 <prvProcessTimerOrBlockTask+0x52>
 8011650:	2300      	movs	r3, #0
 8011652:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8011654:	4b0f      	ldr	r3, [pc, #60]	; (8011694 <prvProcessTimerOrBlockTask+0x94>)
 8011656:	6818      	ldr	r0, [r3, #0]
 8011658:	687a      	ldr	r2, [r7, #4]
 801165a:	68fb      	ldr	r3, [r7, #12]
 801165c:	1ad3      	subs	r3, r2, r3
 801165e:	683a      	ldr	r2, [r7, #0]
 8011660:	4619      	mov	r1, r3
 8011662:	f7fe fc25 	bl	800feb0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8011666:	f7fe fed3 	bl	8010410 <xTaskResumeAll>
 801166a:	4603      	mov	r3, r0
 801166c:	2b00      	cmp	r3, #0
 801166e:	d10a      	bne.n	8011686 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8011670:	4b09      	ldr	r3, [pc, #36]	; (8011698 <prvProcessTimerOrBlockTask+0x98>)
 8011672:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011676:	601a      	str	r2, [r3, #0]
 8011678:	f3bf 8f4f 	dsb	sy
 801167c:	f3bf 8f6f 	isb	sy
}
 8011680:	e001      	b.n	8011686 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8011682:	f7fe fec5 	bl	8010410 <xTaskResumeAll>
}
 8011686:	bf00      	nop
 8011688:	3710      	adds	r7, #16
 801168a:	46bd      	mov	sp, r7
 801168c:	bd80      	pop	{r7, pc}
 801168e:	bf00      	nop
 8011690:	20005f04 	.word	0x20005f04
 8011694:	20005f08 	.word	0x20005f08
 8011698:	e000ed04 	.word	0xe000ed04

0801169c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 801169c:	b480      	push	{r7}
 801169e:	b085      	sub	sp, #20
 80116a0:	af00      	add	r7, sp, #0
 80116a2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80116a4:	4b0e      	ldr	r3, [pc, #56]	; (80116e0 <prvGetNextExpireTime+0x44>)
 80116a6:	681b      	ldr	r3, [r3, #0]
 80116a8:	681b      	ldr	r3, [r3, #0]
 80116aa:	2b00      	cmp	r3, #0
 80116ac:	d101      	bne.n	80116b2 <prvGetNextExpireTime+0x16>
 80116ae:	2201      	movs	r2, #1
 80116b0:	e000      	b.n	80116b4 <prvGetNextExpireTime+0x18>
 80116b2:	2200      	movs	r2, #0
 80116b4:	687b      	ldr	r3, [r7, #4]
 80116b6:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80116b8:	687b      	ldr	r3, [r7, #4]
 80116ba:	681b      	ldr	r3, [r3, #0]
 80116bc:	2b00      	cmp	r3, #0
 80116be:	d105      	bne.n	80116cc <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80116c0:	4b07      	ldr	r3, [pc, #28]	; (80116e0 <prvGetNextExpireTime+0x44>)
 80116c2:	681b      	ldr	r3, [r3, #0]
 80116c4:	68db      	ldr	r3, [r3, #12]
 80116c6:	681b      	ldr	r3, [r3, #0]
 80116c8:	60fb      	str	r3, [r7, #12]
 80116ca:	e001      	b.n	80116d0 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80116cc:	2300      	movs	r3, #0
 80116ce:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80116d0:	68fb      	ldr	r3, [r7, #12]
}
 80116d2:	4618      	mov	r0, r3
 80116d4:	3714      	adds	r7, #20
 80116d6:	46bd      	mov	sp, r7
 80116d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116dc:	4770      	bx	lr
 80116de:	bf00      	nop
 80116e0:	20005f00 	.word	0x20005f00

080116e4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80116e4:	b580      	push	{r7, lr}
 80116e6:	b084      	sub	sp, #16
 80116e8:	af00      	add	r7, sp, #0
 80116ea:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80116ec:	f7fe ff2c 	bl	8010548 <xTaskGetTickCount>
 80116f0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80116f2:	4b0b      	ldr	r3, [pc, #44]	; (8011720 <prvSampleTimeNow+0x3c>)
 80116f4:	681b      	ldr	r3, [r3, #0]
 80116f6:	68fa      	ldr	r2, [r7, #12]
 80116f8:	429a      	cmp	r2, r3
 80116fa:	d205      	bcs.n	8011708 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80116fc:	f000 f930 	bl	8011960 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8011700:	687b      	ldr	r3, [r7, #4]
 8011702:	2201      	movs	r2, #1
 8011704:	601a      	str	r2, [r3, #0]
 8011706:	e002      	b.n	801170e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8011708:	687b      	ldr	r3, [r7, #4]
 801170a:	2200      	movs	r2, #0
 801170c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 801170e:	4a04      	ldr	r2, [pc, #16]	; (8011720 <prvSampleTimeNow+0x3c>)
 8011710:	68fb      	ldr	r3, [r7, #12]
 8011712:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8011714:	68fb      	ldr	r3, [r7, #12]
}
 8011716:	4618      	mov	r0, r3
 8011718:	3710      	adds	r7, #16
 801171a:	46bd      	mov	sp, r7
 801171c:	bd80      	pop	{r7, pc}
 801171e:	bf00      	nop
 8011720:	20005f10 	.word	0x20005f10

08011724 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8011724:	b580      	push	{r7, lr}
 8011726:	b086      	sub	sp, #24
 8011728:	af00      	add	r7, sp, #0
 801172a:	60f8      	str	r0, [r7, #12]
 801172c:	60b9      	str	r1, [r7, #8]
 801172e:	607a      	str	r2, [r7, #4]
 8011730:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8011732:	2300      	movs	r3, #0
 8011734:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8011736:	68fb      	ldr	r3, [r7, #12]
 8011738:	68ba      	ldr	r2, [r7, #8]
 801173a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 801173c:	68fb      	ldr	r3, [r7, #12]
 801173e:	68fa      	ldr	r2, [r7, #12]
 8011740:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8011742:	68ba      	ldr	r2, [r7, #8]
 8011744:	687b      	ldr	r3, [r7, #4]
 8011746:	429a      	cmp	r2, r3
 8011748:	d812      	bhi.n	8011770 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801174a:	687a      	ldr	r2, [r7, #4]
 801174c:	683b      	ldr	r3, [r7, #0]
 801174e:	1ad2      	subs	r2, r2, r3
 8011750:	68fb      	ldr	r3, [r7, #12]
 8011752:	699b      	ldr	r3, [r3, #24]
 8011754:	429a      	cmp	r2, r3
 8011756:	d302      	bcc.n	801175e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8011758:	2301      	movs	r3, #1
 801175a:	617b      	str	r3, [r7, #20]
 801175c:	e01b      	b.n	8011796 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 801175e:	4b10      	ldr	r3, [pc, #64]	; (80117a0 <prvInsertTimerInActiveList+0x7c>)
 8011760:	681a      	ldr	r2, [r3, #0]
 8011762:	68fb      	ldr	r3, [r7, #12]
 8011764:	3304      	adds	r3, #4
 8011766:	4619      	mov	r1, r3
 8011768:	4610      	mov	r0, r2
 801176a:	f7fd fad0 	bl	800ed0e <vListInsert>
 801176e:	e012      	b.n	8011796 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8011770:	687a      	ldr	r2, [r7, #4]
 8011772:	683b      	ldr	r3, [r7, #0]
 8011774:	429a      	cmp	r2, r3
 8011776:	d206      	bcs.n	8011786 <prvInsertTimerInActiveList+0x62>
 8011778:	68ba      	ldr	r2, [r7, #8]
 801177a:	683b      	ldr	r3, [r7, #0]
 801177c:	429a      	cmp	r2, r3
 801177e:	d302      	bcc.n	8011786 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8011780:	2301      	movs	r3, #1
 8011782:	617b      	str	r3, [r7, #20]
 8011784:	e007      	b.n	8011796 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8011786:	4b07      	ldr	r3, [pc, #28]	; (80117a4 <prvInsertTimerInActiveList+0x80>)
 8011788:	681a      	ldr	r2, [r3, #0]
 801178a:	68fb      	ldr	r3, [r7, #12]
 801178c:	3304      	adds	r3, #4
 801178e:	4619      	mov	r1, r3
 8011790:	4610      	mov	r0, r2
 8011792:	f7fd fabc 	bl	800ed0e <vListInsert>
		}
	}

	return xProcessTimerNow;
 8011796:	697b      	ldr	r3, [r7, #20]
}
 8011798:	4618      	mov	r0, r3
 801179a:	3718      	adds	r7, #24
 801179c:	46bd      	mov	sp, r7
 801179e:	bd80      	pop	{r7, pc}
 80117a0:	20005f04 	.word	0x20005f04
 80117a4:	20005f00 	.word	0x20005f00

080117a8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80117a8:	b580      	push	{r7, lr}
 80117aa:	b08e      	sub	sp, #56	; 0x38
 80117ac:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80117ae:	e0c6      	b.n	801193e <prvProcessReceivedCommands+0x196>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80117b0:	687b      	ldr	r3, [r7, #4]
 80117b2:	2b00      	cmp	r3, #0
 80117b4:	da17      	bge.n	80117e6 <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80117b6:	1d3b      	adds	r3, r7, #4
 80117b8:	3304      	adds	r3, #4
 80117ba:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80117bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80117be:	2b00      	cmp	r3, #0
 80117c0:	d109      	bne.n	80117d6 <prvProcessReceivedCommands+0x2e>
 80117c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80117c6:	f383 8811 	msr	BASEPRI, r3
 80117ca:	f3bf 8f6f 	isb	sy
 80117ce:	f3bf 8f4f 	dsb	sy
 80117d2:	61fb      	str	r3, [r7, #28]
 80117d4:	e7fe      	b.n	80117d4 <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80117d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80117d8:	681b      	ldr	r3, [r3, #0]
 80117da:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80117dc:	6850      	ldr	r0, [r2, #4]
 80117de:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80117e0:	6892      	ldr	r2, [r2, #8]
 80117e2:	4611      	mov	r1, r2
 80117e4:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80117e6:	687b      	ldr	r3, [r7, #4]
 80117e8:	2b00      	cmp	r3, #0
 80117ea:	f2c0 80a7 	blt.w	801193c <prvProcessReceivedCommands+0x194>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80117ee:	68fb      	ldr	r3, [r7, #12]
 80117f0:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80117f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80117f4:	695b      	ldr	r3, [r3, #20]
 80117f6:	2b00      	cmp	r3, #0
 80117f8:	d004      	beq.n	8011804 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80117fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80117fc:	3304      	adds	r3, #4
 80117fe:	4618      	mov	r0, r3
 8011800:	f7fd fabe 	bl	800ed80 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8011804:	463b      	mov	r3, r7
 8011806:	4618      	mov	r0, r3
 8011808:	f7ff ff6c 	bl	80116e4 <prvSampleTimeNow>
 801180c:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 801180e:	687b      	ldr	r3, [r7, #4]
 8011810:	2b09      	cmp	r3, #9
 8011812:	f200 8094 	bhi.w	801193e <prvProcessReceivedCommands+0x196>
 8011816:	a201      	add	r2, pc, #4	; (adr r2, 801181c <prvProcessReceivedCommands+0x74>)
 8011818:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801181c:	08011845 	.word	0x08011845
 8011820:	08011845 	.word	0x08011845
 8011824:	08011845 	.word	0x08011845
 8011828:	080118b7 	.word	0x080118b7
 801182c:	080118cb 	.word	0x080118cb
 8011830:	08011913 	.word	0x08011913
 8011834:	08011845 	.word	0x08011845
 8011838:	08011845 	.word	0x08011845
 801183c:	080118b7 	.word	0x080118b7
 8011840:	080118cb 	.word	0x080118cb
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8011844:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011846:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801184a:	f043 0301 	orr.w	r3, r3, #1
 801184e:	b2da      	uxtb	r2, r3
 8011850:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011852:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8011856:	68ba      	ldr	r2, [r7, #8]
 8011858:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801185a:	699b      	ldr	r3, [r3, #24]
 801185c:	18d1      	adds	r1, r2, r3
 801185e:	68bb      	ldr	r3, [r7, #8]
 8011860:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011862:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011864:	f7ff ff5e 	bl	8011724 <prvInsertTimerInActiveList>
 8011868:	4603      	mov	r3, r0
 801186a:	2b00      	cmp	r3, #0
 801186c:	d067      	beq.n	801193e <prvProcessReceivedCommands+0x196>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801186e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011870:	6a1b      	ldr	r3, [r3, #32]
 8011872:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011874:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8011876:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011878:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801187c:	f003 0304 	and.w	r3, r3, #4
 8011880:	2b00      	cmp	r3, #0
 8011882:	d05c      	beq.n	801193e <prvProcessReceivedCommands+0x196>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8011884:	68ba      	ldr	r2, [r7, #8]
 8011886:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011888:	699b      	ldr	r3, [r3, #24]
 801188a:	441a      	add	r2, r3
 801188c:	2300      	movs	r3, #0
 801188e:	9300      	str	r3, [sp, #0]
 8011890:	2300      	movs	r3, #0
 8011892:	2100      	movs	r1, #0
 8011894:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011896:	f7ff fe09 	bl	80114ac <xTimerGenericCommand>
 801189a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 801189c:	6a3b      	ldr	r3, [r7, #32]
 801189e:	2b00      	cmp	r3, #0
 80118a0:	d14d      	bne.n	801193e <prvProcessReceivedCommands+0x196>
 80118a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80118a6:	f383 8811 	msr	BASEPRI, r3
 80118aa:	f3bf 8f6f 	isb	sy
 80118ae:	f3bf 8f4f 	dsb	sy
 80118b2:	61bb      	str	r3, [r7, #24]
 80118b4:	e7fe      	b.n	80118b4 <prvProcessReceivedCommands+0x10c>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80118b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80118b8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80118bc:	f023 0301 	bic.w	r3, r3, #1
 80118c0:	b2da      	uxtb	r2, r3
 80118c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80118c4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80118c8:	e039      	b.n	801193e <prvProcessReceivedCommands+0x196>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80118ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80118cc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80118d0:	f043 0301 	orr.w	r3, r3, #1
 80118d4:	b2da      	uxtb	r2, r3
 80118d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80118d8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80118dc:	68ba      	ldr	r2, [r7, #8]
 80118de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80118e0:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80118e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80118e4:	699b      	ldr	r3, [r3, #24]
 80118e6:	2b00      	cmp	r3, #0
 80118e8:	d109      	bne.n	80118fe <prvProcessReceivedCommands+0x156>
 80118ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80118ee:	f383 8811 	msr	BASEPRI, r3
 80118f2:	f3bf 8f6f 	isb	sy
 80118f6:	f3bf 8f4f 	dsb	sy
 80118fa:	617b      	str	r3, [r7, #20]
 80118fc:	e7fe      	b.n	80118fc <prvProcessReceivedCommands+0x154>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80118fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011900:	699a      	ldr	r2, [r3, #24]
 8011902:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011904:	18d1      	adds	r1, r2, r3
 8011906:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011908:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801190a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801190c:	f7ff ff0a 	bl	8011724 <prvInsertTimerInActiveList>
					break;
 8011910:	e015      	b.n	801193e <prvProcessReceivedCommands+0x196>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8011912:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011914:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8011918:	f003 0302 	and.w	r3, r3, #2
 801191c:	2b00      	cmp	r3, #0
 801191e:	d103      	bne.n	8011928 <prvProcessReceivedCommands+0x180>
						{
							vPortFree( pxTimer );
 8011920:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011922:	f7fd f88f 	bl	800ea44 <vPortFree>
 8011926:	e00a      	b.n	801193e <prvProcessReceivedCommands+0x196>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8011928:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801192a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801192e:	f023 0301 	bic.w	r3, r3, #1
 8011932:	b2da      	uxtb	r2, r3
 8011934:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011936:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 801193a:	e000      	b.n	801193e <prvProcessReceivedCommands+0x196>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 801193c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 801193e:	4b07      	ldr	r3, [pc, #28]	; (801195c <prvProcessReceivedCommands+0x1b4>)
 8011940:	681b      	ldr	r3, [r3, #0]
 8011942:	1d39      	adds	r1, r7, #4
 8011944:	2200      	movs	r2, #0
 8011946:	4618      	mov	r0, r3
 8011948:	f7fd feb4 	bl	800f6b4 <xQueueReceive>
 801194c:	4603      	mov	r3, r0
 801194e:	2b00      	cmp	r3, #0
 8011950:	f47f af2e 	bne.w	80117b0 <prvProcessReceivedCommands+0x8>
	}
}
 8011954:	bf00      	nop
 8011956:	3730      	adds	r7, #48	; 0x30
 8011958:	46bd      	mov	sp, r7
 801195a:	bd80      	pop	{r7, pc}
 801195c:	20005f08 	.word	0x20005f08

08011960 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8011960:	b580      	push	{r7, lr}
 8011962:	b088      	sub	sp, #32
 8011964:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8011966:	e047      	b.n	80119f8 <prvSwitchTimerLists+0x98>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8011968:	4b2d      	ldr	r3, [pc, #180]	; (8011a20 <prvSwitchTimerLists+0xc0>)
 801196a:	681b      	ldr	r3, [r3, #0]
 801196c:	68db      	ldr	r3, [r3, #12]
 801196e:	681b      	ldr	r3, [r3, #0]
 8011970:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011972:	4b2b      	ldr	r3, [pc, #172]	; (8011a20 <prvSwitchTimerLists+0xc0>)
 8011974:	681b      	ldr	r3, [r3, #0]
 8011976:	68db      	ldr	r3, [r3, #12]
 8011978:	68db      	ldr	r3, [r3, #12]
 801197a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 801197c:	68fb      	ldr	r3, [r7, #12]
 801197e:	3304      	adds	r3, #4
 8011980:	4618      	mov	r0, r3
 8011982:	f7fd f9fd 	bl	800ed80 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8011986:	68fb      	ldr	r3, [r7, #12]
 8011988:	6a1b      	ldr	r3, [r3, #32]
 801198a:	68f8      	ldr	r0, [r7, #12]
 801198c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801198e:	68fb      	ldr	r3, [r7, #12]
 8011990:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8011994:	f003 0304 	and.w	r3, r3, #4
 8011998:	2b00      	cmp	r3, #0
 801199a:	d02d      	beq.n	80119f8 <prvSwitchTimerLists+0x98>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 801199c:	68fb      	ldr	r3, [r7, #12]
 801199e:	699b      	ldr	r3, [r3, #24]
 80119a0:	693a      	ldr	r2, [r7, #16]
 80119a2:	4413      	add	r3, r2
 80119a4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80119a6:	68ba      	ldr	r2, [r7, #8]
 80119a8:	693b      	ldr	r3, [r7, #16]
 80119aa:	429a      	cmp	r2, r3
 80119ac:	d90e      	bls.n	80119cc <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80119ae:	68fb      	ldr	r3, [r7, #12]
 80119b0:	68ba      	ldr	r2, [r7, #8]
 80119b2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80119b4:	68fb      	ldr	r3, [r7, #12]
 80119b6:	68fa      	ldr	r2, [r7, #12]
 80119b8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80119ba:	4b19      	ldr	r3, [pc, #100]	; (8011a20 <prvSwitchTimerLists+0xc0>)
 80119bc:	681a      	ldr	r2, [r3, #0]
 80119be:	68fb      	ldr	r3, [r7, #12]
 80119c0:	3304      	adds	r3, #4
 80119c2:	4619      	mov	r1, r3
 80119c4:	4610      	mov	r0, r2
 80119c6:	f7fd f9a2 	bl	800ed0e <vListInsert>
 80119ca:	e015      	b.n	80119f8 <prvSwitchTimerLists+0x98>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80119cc:	2300      	movs	r3, #0
 80119ce:	9300      	str	r3, [sp, #0]
 80119d0:	2300      	movs	r3, #0
 80119d2:	693a      	ldr	r2, [r7, #16]
 80119d4:	2100      	movs	r1, #0
 80119d6:	68f8      	ldr	r0, [r7, #12]
 80119d8:	f7ff fd68 	bl	80114ac <xTimerGenericCommand>
 80119dc:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80119de:	687b      	ldr	r3, [r7, #4]
 80119e0:	2b00      	cmp	r3, #0
 80119e2:	d109      	bne.n	80119f8 <prvSwitchTimerLists+0x98>
 80119e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80119e8:	f383 8811 	msr	BASEPRI, r3
 80119ec:	f3bf 8f6f 	isb	sy
 80119f0:	f3bf 8f4f 	dsb	sy
 80119f4:	603b      	str	r3, [r7, #0]
 80119f6:	e7fe      	b.n	80119f6 <prvSwitchTimerLists+0x96>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80119f8:	4b09      	ldr	r3, [pc, #36]	; (8011a20 <prvSwitchTimerLists+0xc0>)
 80119fa:	681b      	ldr	r3, [r3, #0]
 80119fc:	681b      	ldr	r3, [r3, #0]
 80119fe:	2b00      	cmp	r3, #0
 8011a00:	d1b2      	bne.n	8011968 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8011a02:	4b07      	ldr	r3, [pc, #28]	; (8011a20 <prvSwitchTimerLists+0xc0>)
 8011a04:	681b      	ldr	r3, [r3, #0]
 8011a06:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8011a08:	4b06      	ldr	r3, [pc, #24]	; (8011a24 <prvSwitchTimerLists+0xc4>)
 8011a0a:	681b      	ldr	r3, [r3, #0]
 8011a0c:	4a04      	ldr	r2, [pc, #16]	; (8011a20 <prvSwitchTimerLists+0xc0>)
 8011a0e:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8011a10:	4a04      	ldr	r2, [pc, #16]	; (8011a24 <prvSwitchTimerLists+0xc4>)
 8011a12:	697b      	ldr	r3, [r7, #20]
 8011a14:	6013      	str	r3, [r2, #0]
}
 8011a16:	bf00      	nop
 8011a18:	3718      	adds	r7, #24
 8011a1a:	46bd      	mov	sp, r7
 8011a1c:	bd80      	pop	{r7, pc}
 8011a1e:	bf00      	nop
 8011a20:	20005f00 	.word	0x20005f00
 8011a24:	20005f04 	.word	0x20005f04

08011a28 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8011a28:	b580      	push	{r7, lr}
 8011a2a:	b082      	sub	sp, #8
 8011a2c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8011a2e:	f7fc fe2d 	bl	800e68c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8011a32:	4b15      	ldr	r3, [pc, #84]	; (8011a88 <prvCheckForValidListAndQueue+0x60>)
 8011a34:	681b      	ldr	r3, [r3, #0]
 8011a36:	2b00      	cmp	r3, #0
 8011a38:	d120      	bne.n	8011a7c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8011a3a:	4814      	ldr	r0, [pc, #80]	; (8011a8c <prvCheckForValidListAndQueue+0x64>)
 8011a3c:	f7fd f916 	bl	800ec6c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8011a40:	4813      	ldr	r0, [pc, #76]	; (8011a90 <prvCheckForValidListAndQueue+0x68>)
 8011a42:	f7fd f913 	bl	800ec6c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8011a46:	4b13      	ldr	r3, [pc, #76]	; (8011a94 <prvCheckForValidListAndQueue+0x6c>)
 8011a48:	4a10      	ldr	r2, [pc, #64]	; (8011a8c <prvCheckForValidListAndQueue+0x64>)
 8011a4a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8011a4c:	4b12      	ldr	r3, [pc, #72]	; (8011a98 <prvCheckForValidListAndQueue+0x70>)
 8011a4e:	4a10      	ldr	r2, [pc, #64]	; (8011a90 <prvCheckForValidListAndQueue+0x68>)
 8011a50:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8011a52:	2300      	movs	r3, #0
 8011a54:	9300      	str	r3, [sp, #0]
 8011a56:	4b11      	ldr	r3, [pc, #68]	; (8011a9c <prvCheckForValidListAndQueue+0x74>)
 8011a58:	4a11      	ldr	r2, [pc, #68]	; (8011aa0 <prvCheckForValidListAndQueue+0x78>)
 8011a5a:	2110      	movs	r1, #16
 8011a5c:	200a      	movs	r0, #10
 8011a5e:	f7fd fa21 	bl	800eea4 <xQueueGenericCreateStatic>
 8011a62:	4602      	mov	r2, r0
 8011a64:	4b08      	ldr	r3, [pc, #32]	; (8011a88 <prvCheckForValidListAndQueue+0x60>)
 8011a66:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8011a68:	4b07      	ldr	r3, [pc, #28]	; (8011a88 <prvCheckForValidListAndQueue+0x60>)
 8011a6a:	681b      	ldr	r3, [r3, #0]
 8011a6c:	2b00      	cmp	r3, #0
 8011a6e:	d005      	beq.n	8011a7c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8011a70:	4b05      	ldr	r3, [pc, #20]	; (8011a88 <prvCheckForValidListAndQueue+0x60>)
 8011a72:	681b      	ldr	r3, [r3, #0]
 8011a74:	490b      	ldr	r1, [pc, #44]	; (8011aa4 <prvCheckForValidListAndQueue+0x7c>)
 8011a76:	4618      	mov	r0, r3
 8011a78:	f7fe f9c8 	bl	800fe0c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8011a7c:	f7fc fe34 	bl	800e6e8 <vPortExitCritical>
}
 8011a80:	bf00      	nop
 8011a82:	46bd      	mov	sp, r7
 8011a84:	bd80      	pop	{r7, pc}
 8011a86:	bf00      	nop
 8011a88:	20005f08 	.word	0x20005f08
 8011a8c:	20005ed8 	.word	0x20005ed8
 8011a90:	20005eec 	.word	0x20005eec
 8011a94:	20005f00 	.word	0x20005f00
 8011a98:	20005f04 	.word	0x20005f04
 8011a9c:	20005fb4 	.word	0x20005fb4
 8011aa0:	20005f14 	.word	0x20005f14
 8011aa4:	08014f80 	.word	0x08014f80

08011aa8 <UTIL_LPM_Init>:

/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
 8011aa8:	b480      	push	{r7}
 8011aaa:	af00      	add	r7, sp, #0
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 8011aac:	4b05      	ldr	r3, [pc, #20]	; (8011ac4 <UTIL_LPM_Init+0x1c>)
 8011aae:	2200      	movs	r2, #0
 8011ab0:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 8011ab2:	4b05      	ldr	r3, [pc, #20]	; (8011ac8 <UTIL_LPM_Init+0x20>)
 8011ab4:	2200      	movs	r2, #0
 8011ab6:	601a      	str	r2, [r3, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 8011ab8:	bf00      	nop
 8011aba:	46bd      	mov	sp, r7
 8011abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ac0:	4770      	bx	lr
 8011ac2:	bf00      	nop
 8011ac4:	20006004 	.word	0x20006004
 8011ac8:	20006008 	.word	0x20006008

08011acc <UTIL_LPM_SetOffMode>:
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 8011acc:	b480      	push	{r7}
 8011ace:	b087      	sub	sp, #28
 8011ad0:	af00      	add	r7, sp, #0
 8011ad2:	6078      	str	r0, [r7, #4]
 8011ad4:	460b      	mov	r3, r1
 8011ad6:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8011ad8:	f3ef 8310 	mrs	r3, PRIMASK
 8011adc:	613b      	str	r3, [r7, #16]
  return(result);
 8011ade:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 8011ae0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8011ae2:	b672      	cpsid	i
  
  switch(state)
 8011ae4:	78fb      	ldrb	r3, [r7, #3]
 8011ae6:	2b00      	cmp	r3, #0
 8011ae8:	d009      	beq.n	8011afe <UTIL_LPM_SetOffMode+0x32>
 8011aea:	2b01      	cmp	r3, #1
 8011aec:	d000      	beq.n	8011af0 <UTIL_LPM_SetOffMode+0x24>
      OffModeDisable &= ( ~lpm_id_bm );
      break;
    }
  default :
    {
      break;
 8011aee:	e00e      	b.n	8011b0e <UTIL_LPM_SetOffMode+0x42>
      OffModeDisable |= lpm_id_bm;
 8011af0:	4b0c      	ldr	r3, [pc, #48]	; (8011b24 <UTIL_LPM_SetOffMode+0x58>)
 8011af2:	681a      	ldr	r2, [r3, #0]
 8011af4:	687b      	ldr	r3, [r7, #4]
 8011af6:	4313      	orrs	r3, r2
 8011af8:	4a0a      	ldr	r2, [pc, #40]	; (8011b24 <UTIL_LPM_SetOffMode+0x58>)
 8011afa:	6013      	str	r3, [r2, #0]
      break;
 8011afc:	e007      	b.n	8011b0e <UTIL_LPM_SetOffMode+0x42>
      OffModeDisable &= ( ~lpm_id_bm );
 8011afe:	687b      	ldr	r3, [r7, #4]
 8011b00:	43da      	mvns	r2, r3
 8011b02:	4b08      	ldr	r3, [pc, #32]	; (8011b24 <UTIL_LPM_SetOffMode+0x58>)
 8011b04:	681b      	ldr	r3, [r3, #0]
 8011b06:	4013      	ands	r3, r2
 8011b08:	4a06      	ldr	r2, [pc, #24]	; (8011b24 <UTIL_LPM_SetOffMode+0x58>)
 8011b0a:	6013      	str	r3, [r2, #0]
      break;
 8011b0c:	bf00      	nop
 8011b0e:	697b      	ldr	r3, [r7, #20]
 8011b10:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011b12:	68fb      	ldr	r3, [r7, #12]
 8011b14:	f383 8810 	msr	PRIMASK, r3
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 8011b18:	bf00      	nop
 8011b1a:	371c      	adds	r7, #28
 8011b1c:	46bd      	mov	sp, r7
 8011b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b22:	4770      	bx	lr
 8011b24:	20006008 	.word	0x20006008

08011b28 <__errno>:
 8011b28:	4b01      	ldr	r3, [pc, #4]	; (8011b30 <__errno+0x8>)
 8011b2a:	6818      	ldr	r0, [r3, #0]
 8011b2c:	4770      	bx	lr
 8011b2e:	bf00      	nop
 8011b30:	20000024 	.word	0x20000024

08011b34 <__libc_init_array>:
 8011b34:	b570      	push	{r4, r5, r6, lr}
 8011b36:	4e0d      	ldr	r6, [pc, #52]	; (8011b6c <__libc_init_array+0x38>)
 8011b38:	4c0d      	ldr	r4, [pc, #52]	; (8011b70 <__libc_init_array+0x3c>)
 8011b3a:	1ba4      	subs	r4, r4, r6
 8011b3c:	10a4      	asrs	r4, r4, #2
 8011b3e:	2500      	movs	r5, #0
 8011b40:	42a5      	cmp	r5, r4
 8011b42:	d109      	bne.n	8011b58 <__libc_init_array+0x24>
 8011b44:	4e0b      	ldr	r6, [pc, #44]	; (8011b74 <__libc_init_array+0x40>)
 8011b46:	4c0c      	ldr	r4, [pc, #48]	; (8011b78 <__libc_init_array+0x44>)
 8011b48:	f002 fdc6 	bl	80146d8 <_init>
 8011b4c:	1ba4      	subs	r4, r4, r6
 8011b4e:	10a4      	asrs	r4, r4, #2
 8011b50:	2500      	movs	r5, #0
 8011b52:	42a5      	cmp	r5, r4
 8011b54:	d105      	bne.n	8011b62 <__libc_init_array+0x2e>
 8011b56:	bd70      	pop	{r4, r5, r6, pc}
 8011b58:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8011b5c:	4798      	blx	r3
 8011b5e:	3501      	adds	r5, #1
 8011b60:	e7ee      	b.n	8011b40 <__libc_init_array+0xc>
 8011b62:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8011b66:	4798      	blx	r3
 8011b68:	3501      	adds	r5, #1
 8011b6a:	e7f2      	b.n	8011b52 <__libc_init_array+0x1e>
 8011b6c:	08016678 	.word	0x08016678
 8011b70:	08016678 	.word	0x08016678
 8011b74:	08016678 	.word	0x08016678
 8011b78:	0801667c 	.word	0x0801667c

08011b7c <malloc>:
 8011b7c:	4b02      	ldr	r3, [pc, #8]	; (8011b88 <malloc+0xc>)
 8011b7e:	4601      	mov	r1, r0
 8011b80:	6818      	ldr	r0, [r3, #0]
 8011b82:	f000 b865 	b.w	8011c50 <_malloc_r>
 8011b86:	bf00      	nop
 8011b88:	20000024 	.word	0x20000024

08011b8c <memcpy>:
 8011b8c:	b510      	push	{r4, lr}
 8011b8e:	1e43      	subs	r3, r0, #1
 8011b90:	440a      	add	r2, r1
 8011b92:	4291      	cmp	r1, r2
 8011b94:	d100      	bne.n	8011b98 <memcpy+0xc>
 8011b96:	bd10      	pop	{r4, pc}
 8011b98:	f811 4b01 	ldrb.w	r4, [r1], #1
 8011b9c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8011ba0:	e7f7      	b.n	8011b92 <memcpy+0x6>

08011ba2 <memset>:
 8011ba2:	4402      	add	r2, r0
 8011ba4:	4603      	mov	r3, r0
 8011ba6:	4293      	cmp	r3, r2
 8011ba8:	d100      	bne.n	8011bac <memset+0xa>
 8011baa:	4770      	bx	lr
 8011bac:	f803 1b01 	strb.w	r1, [r3], #1
 8011bb0:	e7f9      	b.n	8011ba6 <memset+0x4>
	...

08011bb4 <_free_r>:
 8011bb4:	b538      	push	{r3, r4, r5, lr}
 8011bb6:	4605      	mov	r5, r0
 8011bb8:	2900      	cmp	r1, #0
 8011bba:	d045      	beq.n	8011c48 <_free_r+0x94>
 8011bbc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011bc0:	1f0c      	subs	r4, r1, #4
 8011bc2:	2b00      	cmp	r3, #0
 8011bc4:	bfb8      	it	lt
 8011bc6:	18e4      	addlt	r4, r4, r3
 8011bc8:	f001 feaa 	bl	8013920 <__malloc_lock>
 8011bcc:	4a1f      	ldr	r2, [pc, #124]	; (8011c4c <_free_r+0x98>)
 8011bce:	6813      	ldr	r3, [r2, #0]
 8011bd0:	4610      	mov	r0, r2
 8011bd2:	b933      	cbnz	r3, 8011be2 <_free_r+0x2e>
 8011bd4:	6063      	str	r3, [r4, #4]
 8011bd6:	6014      	str	r4, [r2, #0]
 8011bd8:	4628      	mov	r0, r5
 8011bda:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011bde:	f001 bea0 	b.w	8013922 <__malloc_unlock>
 8011be2:	42a3      	cmp	r3, r4
 8011be4:	d90c      	bls.n	8011c00 <_free_r+0x4c>
 8011be6:	6821      	ldr	r1, [r4, #0]
 8011be8:	1862      	adds	r2, r4, r1
 8011bea:	4293      	cmp	r3, r2
 8011bec:	bf04      	itt	eq
 8011bee:	681a      	ldreq	r2, [r3, #0]
 8011bf0:	685b      	ldreq	r3, [r3, #4]
 8011bf2:	6063      	str	r3, [r4, #4]
 8011bf4:	bf04      	itt	eq
 8011bf6:	1852      	addeq	r2, r2, r1
 8011bf8:	6022      	streq	r2, [r4, #0]
 8011bfa:	6004      	str	r4, [r0, #0]
 8011bfc:	e7ec      	b.n	8011bd8 <_free_r+0x24>
 8011bfe:	4613      	mov	r3, r2
 8011c00:	685a      	ldr	r2, [r3, #4]
 8011c02:	b10a      	cbz	r2, 8011c08 <_free_r+0x54>
 8011c04:	42a2      	cmp	r2, r4
 8011c06:	d9fa      	bls.n	8011bfe <_free_r+0x4a>
 8011c08:	6819      	ldr	r1, [r3, #0]
 8011c0a:	1858      	adds	r0, r3, r1
 8011c0c:	42a0      	cmp	r0, r4
 8011c0e:	d10b      	bne.n	8011c28 <_free_r+0x74>
 8011c10:	6820      	ldr	r0, [r4, #0]
 8011c12:	4401      	add	r1, r0
 8011c14:	1858      	adds	r0, r3, r1
 8011c16:	4282      	cmp	r2, r0
 8011c18:	6019      	str	r1, [r3, #0]
 8011c1a:	d1dd      	bne.n	8011bd8 <_free_r+0x24>
 8011c1c:	6810      	ldr	r0, [r2, #0]
 8011c1e:	6852      	ldr	r2, [r2, #4]
 8011c20:	605a      	str	r2, [r3, #4]
 8011c22:	4401      	add	r1, r0
 8011c24:	6019      	str	r1, [r3, #0]
 8011c26:	e7d7      	b.n	8011bd8 <_free_r+0x24>
 8011c28:	d902      	bls.n	8011c30 <_free_r+0x7c>
 8011c2a:	230c      	movs	r3, #12
 8011c2c:	602b      	str	r3, [r5, #0]
 8011c2e:	e7d3      	b.n	8011bd8 <_free_r+0x24>
 8011c30:	6820      	ldr	r0, [r4, #0]
 8011c32:	1821      	adds	r1, r4, r0
 8011c34:	428a      	cmp	r2, r1
 8011c36:	bf04      	itt	eq
 8011c38:	6811      	ldreq	r1, [r2, #0]
 8011c3a:	6852      	ldreq	r2, [r2, #4]
 8011c3c:	6062      	str	r2, [r4, #4]
 8011c3e:	bf04      	itt	eq
 8011c40:	1809      	addeq	r1, r1, r0
 8011c42:	6021      	streq	r1, [r4, #0]
 8011c44:	605c      	str	r4, [r3, #4]
 8011c46:	e7c7      	b.n	8011bd8 <_free_r+0x24>
 8011c48:	bd38      	pop	{r3, r4, r5, pc}
 8011c4a:	bf00      	nop
 8011c4c:	2000600c 	.word	0x2000600c

08011c50 <_malloc_r>:
 8011c50:	b570      	push	{r4, r5, r6, lr}
 8011c52:	1ccd      	adds	r5, r1, #3
 8011c54:	f025 0503 	bic.w	r5, r5, #3
 8011c58:	3508      	adds	r5, #8
 8011c5a:	2d0c      	cmp	r5, #12
 8011c5c:	bf38      	it	cc
 8011c5e:	250c      	movcc	r5, #12
 8011c60:	2d00      	cmp	r5, #0
 8011c62:	4606      	mov	r6, r0
 8011c64:	db01      	blt.n	8011c6a <_malloc_r+0x1a>
 8011c66:	42a9      	cmp	r1, r5
 8011c68:	d903      	bls.n	8011c72 <_malloc_r+0x22>
 8011c6a:	230c      	movs	r3, #12
 8011c6c:	6033      	str	r3, [r6, #0]
 8011c6e:	2000      	movs	r0, #0
 8011c70:	bd70      	pop	{r4, r5, r6, pc}
 8011c72:	f001 fe55 	bl	8013920 <__malloc_lock>
 8011c76:	4a21      	ldr	r2, [pc, #132]	; (8011cfc <_malloc_r+0xac>)
 8011c78:	6814      	ldr	r4, [r2, #0]
 8011c7a:	4621      	mov	r1, r4
 8011c7c:	b991      	cbnz	r1, 8011ca4 <_malloc_r+0x54>
 8011c7e:	4c20      	ldr	r4, [pc, #128]	; (8011d00 <_malloc_r+0xb0>)
 8011c80:	6823      	ldr	r3, [r4, #0]
 8011c82:	b91b      	cbnz	r3, 8011c8c <_malloc_r+0x3c>
 8011c84:	4630      	mov	r0, r6
 8011c86:	f000 fd15 	bl	80126b4 <_sbrk_r>
 8011c8a:	6020      	str	r0, [r4, #0]
 8011c8c:	4629      	mov	r1, r5
 8011c8e:	4630      	mov	r0, r6
 8011c90:	f000 fd10 	bl	80126b4 <_sbrk_r>
 8011c94:	1c43      	adds	r3, r0, #1
 8011c96:	d124      	bne.n	8011ce2 <_malloc_r+0x92>
 8011c98:	230c      	movs	r3, #12
 8011c9a:	6033      	str	r3, [r6, #0]
 8011c9c:	4630      	mov	r0, r6
 8011c9e:	f001 fe40 	bl	8013922 <__malloc_unlock>
 8011ca2:	e7e4      	b.n	8011c6e <_malloc_r+0x1e>
 8011ca4:	680b      	ldr	r3, [r1, #0]
 8011ca6:	1b5b      	subs	r3, r3, r5
 8011ca8:	d418      	bmi.n	8011cdc <_malloc_r+0x8c>
 8011caa:	2b0b      	cmp	r3, #11
 8011cac:	d90f      	bls.n	8011cce <_malloc_r+0x7e>
 8011cae:	600b      	str	r3, [r1, #0]
 8011cb0:	50cd      	str	r5, [r1, r3]
 8011cb2:	18cc      	adds	r4, r1, r3
 8011cb4:	4630      	mov	r0, r6
 8011cb6:	f001 fe34 	bl	8013922 <__malloc_unlock>
 8011cba:	f104 000b 	add.w	r0, r4, #11
 8011cbe:	1d23      	adds	r3, r4, #4
 8011cc0:	f020 0007 	bic.w	r0, r0, #7
 8011cc4:	1ac3      	subs	r3, r0, r3
 8011cc6:	d0d3      	beq.n	8011c70 <_malloc_r+0x20>
 8011cc8:	425a      	negs	r2, r3
 8011cca:	50e2      	str	r2, [r4, r3]
 8011ccc:	e7d0      	b.n	8011c70 <_malloc_r+0x20>
 8011cce:	428c      	cmp	r4, r1
 8011cd0:	684b      	ldr	r3, [r1, #4]
 8011cd2:	bf16      	itet	ne
 8011cd4:	6063      	strne	r3, [r4, #4]
 8011cd6:	6013      	streq	r3, [r2, #0]
 8011cd8:	460c      	movne	r4, r1
 8011cda:	e7eb      	b.n	8011cb4 <_malloc_r+0x64>
 8011cdc:	460c      	mov	r4, r1
 8011cde:	6849      	ldr	r1, [r1, #4]
 8011ce0:	e7cc      	b.n	8011c7c <_malloc_r+0x2c>
 8011ce2:	1cc4      	adds	r4, r0, #3
 8011ce4:	f024 0403 	bic.w	r4, r4, #3
 8011ce8:	42a0      	cmp	r0, r4
 8011cea:	d005      	beq.n	8011cf8 <_malloc_r+0xa8>
 8011cec:	1a21      	subs	r1, r4, r0
 8011cee:	4630      	mov	r0, r6
 8011cf0:	f000 fce0 	bl	80126b4 <_sbrk_r>
 8011cf4:	3001      	adds	r0, #1
 8011cf6:	d0cf      	beq.n	8011c98 <_malloc_r+0x48>
 8011cf8:	6025      	str	r5, [r4, #0]
 8011cfa:	e7db      	b.n	8011cb4 <_malloc_r+0x64>
 8011cfc:	2000600c 	.word	0x2000600c
 8011d00:	20006010 	.word	0x20006010

08011d04 <__cvt>:
 8011d04:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8011d08:	ec55 4b10 	vmov	r4, r5, d0
 8011d0c:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8011d0e:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8011d12:	2d00      	cmp	r5, #0
 8011d14:	460e      	mov	r6, r1
 8011d16:	4691      	mov	r9, r2
 8011d18:	4619      	mov	r1, r3
 8011d1a:	bfb8      	it	lt
 8011d1c:	4622      	movlt	r2, r4
 8011d1e:	462b      	mov	r3, r5
 8011d20:	f027 0720 	bic.w	r7, r7, #32
 8011d24:	bfbb      	ittet	lt
 8011d26:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8011d2a:	461d      	movlt	r5, r3
 8011d2c:	2300      	movge	r3, #0
 8011d2e:	232d      	movlt	r3, #45	; 0x2d
 8011d30:	bfb8      	it	lt
 8011d32:	4614      	movlt	r4, r2
 8011d34:	2f46      	cmp	r7, #70	; 0x46
 8011d36:	700b      	strb	r3, [r1, #0]
 8011d38:	d004      	beq.n	8011d44 <__cvt+0x40>
 8011d3a:	2f45      	cmp	r7, #69	; 0x45
 8011d3c:	d100      	bne.n	8011d40 <__cvt+0x3c>
 8011d3e:	3601      	adds	r6, #1
 8011d40:	2102      	movs	r1, #2
 8011d42:	e000      	b.n	8011d46 <__cvt+0x42>
 8011d44:	2103      	movs	r1, #3
 8011d46:	ab03      	add	r3, sp, #12
 8011d48:	9301      	str	r3, [sp, #4]
 8011d4a:	ab02      	add	r3, sp, #8
 8011d4c:	9300      	str	r3, [sp, #0]
 8011d4e:	4632      	mov	r2, r6
 8011d50:	4653      	mov	r3, sl
 8011d52:	ec45 4b10 	vmov	d0, r4, r5
 8011d56:	f000 fe3f 	bl	80129d8 <_dtoa_r>
 8011d5a:	2f47      	cmp	r7, #71	; 0x47
 8011d5c:	4680      	mov	r8, r0
 8011d5e:	d102      	bne.n	8011d66 <__cvt+0x62>
 8011d60:	f019 0f01 	tst.w	r9, #1
 8011d64:	d026      	beq.n	8011db4 <__cvt+0xb0>
 8011d66:	2f46      	cmp	r7, #70	; 0x46
 8011d68:	eb08 0906 	add.w	r9, r8, r6
 8011d6c:	d111      	bne.n	8011d92 <__cvt+0x8e>
 8011d6e:	f898 3000 	ldrb.w	r3, [r8]
 8011d72:	2b30      	cmp	r3, #48	; 0x30
 8011d74:	d10a      	bne.n	8011d8c <__cvt+0x88>
 8011d76:	2200      	movs	r2, #0
 8011d78:	2300      	movs	r3, #0
 8011d7a:	4620      	mov	r0, r4
 8011d7c:	4629      	mov	r1, r5
 8011d7e:	f7ee fe7b 	bl	8000a78 <__aeabi_dcmpeq>
 8011d82:	b918      	cbnz	r0, 8011d8c <__cvt+0x88>
 8011d84:	f1c6 0601 	rsb	r6, r6, #1
 8011d88:	f8ca 6000 	str.w	r6, [sl]
 8011d8c:	f8da 3000 	ldr.w	r3, [sl]
 8011d90:	4499      	add	r9, r3
 8011d92:	2200      	movs	r2, #0
 8011d94:	2300      	movs	r3, #0
 8011d96:	4620      	mov	r0, r4
 8011d98:	4629      	mov	r1, r5
 8011d9a:	f7ee fe6d 	bl	8000a78 <__aeabi_dcmpeq>
 8011d9e:	b938      	cbnz	r0, 8011db0 <__cvt+0xac>
 8011da0:	2230      	movs	r2, #48	; 0x30
 8011da2:	9b03      	ldr	r3, [sp, #12]
 8011da4:	454b      	cmp	r3, r9
 8011da6:	d205      	bcs.n	8011db4 <__cvt+0xb0>
 8011da8:	1c59      	adds	r1, r3, #1
 8011daa:	9103      	str	r1, [sp, #12]
 8011dac:	701a      	strb	r2, [r3, #0]
 8011dae:	e7f8      	b.n	8011da2 <__cvt+0x9e>
 8011db0:	f8cd 900c 	str.w	r9, [sp, #12]
 8011db4:	9b03      	ldr	r3, [sp, #12]
 8011db6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8011db8:	eba3 0308 	sub.w	r3, r3, r8
 8011dbc:	4640      	mov	r0, r8
 8011dbe:	6013      	str	r3, [r2, #0]
 8011dc0:	b004      	add	sp, #16
 8011dc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08011dc6 <__exponent>:
 8011dc6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8011dc8:	2900      	cmp	r1, #0
 8011dca:	4604      	mov	r4, r0
 8011dcc:	bfba      	itte	lt
 8011dce:	4249      	neglt	r1, r1
 8011dd0:	232d      	movlt	r3, #45	; 0x2d
 8011dd2:	232b      	movge	r3, #43	; 0x2b
 8011dd4:	2909      	cmp	r1, #9
 8011dd6:	f804 2b02 	strb.w	r2, [r4], #2
 8011dda:	7043      	strb	r3, [r0, #1]
 8011ddc:	dd20      	ble.n	8011e20 <__exponent+0x5a>
 8011dde:	f10d 0307 	add.w	r3, sp, #7
 8011de2:	461f      	mov	r7, r3
 8011de4:	260a      	movs	r6, #10
 8011de6:	fb91 f5f6 	sdiv	r5, r1, r6
 8011dea:	fb06 1115 	mls	r1, r6, r5, r1
 8011dee:	3130      	adds	r1, #48	; 0x30
 8011df0:	2d09      	cmp	r5, #9
 8011df2:	f803 1c01 	strb.w	r1, [r3, #-1]
 8011df6:	f103 32ff 	add.w	r2, r3, #4294967295
 8011dfa:	4629      	mov	r1, r5
 8011dfc:	dc09      	bgt.n	8011e12 <__exponent+0x4c>
 8011dfe:	3130      	adds	r1, #48	; 0x30
 8011e00:	3b02      	subs	r3, #2
 8011e02:	f802 1c01 	strb.w	r1, [r2, #-1]
 8011e06:	42bb      	cmp	r3, r7
 8011e08:	4622      	mov	r2, r4
 8011e0a:	d304      	bcc.n	8011e16 <__exponent+0x50>
 8011e0c:	1a10      	subs	r0, r2, r0
 8011e0e:	b003      	add	sp, #12
 8011e10:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011e12:	4613      	mov	r3, r2
 8011e14:	e7e7      	b.n	8011de6 <__exponent+0x20>
 8011e16:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011e1a:	f804 2b01 	strb.w	r2, [r4], #1
 8011e1e:	e7f2      	b.n	8011e06 <__exponent+0x40>
 8011e20:	2330      	movs	r3, #48	; 0x30
 8011e22:	4419      	add	r1, r3
 8011e24:	7083      	strb	r3, [r0, #2]
 8011e26:	1d02      	adds	r2, r0, #4
 8011e28:	70c1      	strb	r1, [r0, #3]
 8011e2a:	e7ef      	b.n	8011e0c <__exponent+0x46>

08011e2c <_printf_float>:
 8011e2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011e30:	b08d      	sub	sp, #52	; 0x34
 8011e32:	460c      	mov	r4, r1
 8011e34:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8011e38:	4616      	mov	r6, r2
 8011e3a:	461f      	mov	r7, r3
 8011e3c:	4605      	mov	r5, r0
 8011e3e:	f001 fcfd 	bl	801383c <_localeconv_r>
 8011e42:	6803      	ldr	r3, [r0, #0]
 8011e44:	9304      	str	r3, [sp, #16]
 8011e46:	4618      	mov	r0, r3
 8011e48:	f7ee f99a 	bl	8000180 <strlen>
 8011e4c:	2300      	movs	r3, #0
 8011e4e:	930a      	str	r3, [sp, #40]	; 0x28
 8011e50:	f8d8 3000 	ldr.w	r3, [r8]
 8011e54:	9005      	str	r0, [sp, #20]
 8011e56:	3307      	adds	r3, #7
 8011e58:	f023 0307 	bic.w	r3, r3, #7
 8011e5c:	f103 0208 	add.w	r2, r3, #8
 8011e60:	f894 a018 	ldrb.w	sl, [r4, #24]
 8011e64:	f8d4 b000 	ldr.w	fp, [r4]
 8011e68:	f8c8 2000 	str.w	r2, [r8]
 8011e6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011e70:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8011e74:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8011e78:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8011e7c:	9307      	str	r3, [sp, #28]
 8011e7e:	f8cd 8018 	str.w	r8, [sp, #24]
 8011e82:	f04f 32ff 	mov.w	r2, #4294967295
 8011e86:	4ba7      	ldr	r3, [pc, #668]	; (8012124 <_printf_float+0x2f8>)
 8011e88:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8011e8c:	f7ee fe26 	bl	8000adc <__aeabi_dcmpun>
 8011e90:	bb70      	cbnz	r0, 8011ef0 <_printf_float+0xc4>
 8011e92:	f04f 32ff 	mov.w	r2, #4294967295
 8011e96:	4ba3      	ldr	r3, [pc, #652]	; (8012124 <_printf_float+0x2f8>)
 8011e98:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8011e9c:	f7ee fe00 	bl	8000aa0 <__aeabi_dcmple>
 8011ea0:	bb30      	cbnz	r0, 8011ef0 <_printf_float+0xc4>
 8011ea2:	2200      	movs	r2, #0
 8011ea4:	2300      	movs	r3, #0
 8011ea6:	4640      	mov	r0, r8
 8011ea8:	4649      	mov	r1, r9
 8011eaa:	f7ee fdef 	bl	8000a8c <__aeabi_dcmplt>
 8011eae:	b110      	cbz	r0, 8011eb6 <_printf_float+0x8a>
 8011eb0:	232d      	movs	r3, #45	; 0x2d
 8011eb2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011eb6:	4a9c      	ldr	r2, [pc, #624]	; (8012128 <_printf_float+0x2fc>)
 8011eb8:	4b9c      	ldr	r3, [pc, #624]	; (801212c <_printf_float+0x300>)
 8011eba:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8011ebe:	bf8c      	ite	hi
 8011ec0:	4690      	movhi	r8, r2
 8011ec2:	4698      	movls	r8, r3
 8011ec4:	2303      	movs	r3, #3
 8011ec6:	f02b 0204 	bic.w	r2, fp, #4
 8011eca:	6123      	str	r3, [r4, #16]
 8011ecc:	6022      	str	r2, [r4, #0]
 8011ece:	f04f 0900 	mov.w	r9, #0
 8011ed2:	9700      	str	r7, [sp, #0]
 8011ed4:	4633      	mov	r3, r6
 8011ed6:	aa0b      	add	r2, sp, #44	; 0x2c
 8011ed8:	4621      	mov	r1, r4
 8011eda:	4628      	mov	r0, r5
 8011edc:	f000 f9e6 	bl	80122ac <_printf_common>
 8011ee0:	3001      	adds	r0, #1
 8011ee2:	f040 808d 	bne.w	8012000 <_printf_float+0x1d4>
 8011ee6:	f04f 30ff 	mov.w	r0, #4294967295
 8011eea:	b00d      	add	sp, #52	; 0x34
 8011eec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011ef0:	4642      	mov	r2, r8
 8011ef2:	464b      	mov	r3, r9
 8011ef4:	4640      	mov	r0, r8
 8011ef6:	4649      	mov	r1, r9
 8011ef8:	f7ee fdf0 	bl	8000adc <__aeabi_dcmpun>
 8011efc:	b110      	cbz	r0, 8011f04 <_printf_float+0xd8>
 8011efe:	4a8c      	ldr	r2, [pc, #560]	; (8012130 <_printf_float+0x304>)
 8011f00:	4b8c      	ldr	r3, [pc, #560]	; (8012134 <_printf_float+0x308>)
 8011f02:	e7da      	b.n	8011eba <_printf_float+0x8e>
 8011f04:	6861      	ldr	r1, [r4, #4]
 8011f06:	1c4b      	adds	r3, r1, #1
 8011f08:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8011f0c:	a80a      	add	r0, sp, #40	; 0x28
 8011f0e:	d13e      	bne.n	8011f8e <_printf_float+0x162>
 8011f10:	2306      	movs	r3, #6
 8011f12:	6063      	str	r3, [r4, #4]
 8011f14:	2300      	movs	r3, #0
 8011f16:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8011f1a:	ab09      	add	r3, sp, #36	; 0x24
 8011f1c:	9300      	str	r3, [sp, #0]
 8011f1e:	ec49 8b10 	vmov	d0, r8, r9
 8011f22:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8011f26:	6022      	str	r2, [r4, #0]
 8011f28:	f8cd a004 	str.w	sl, [sp, #4]
 8011f2c:	6861      	ldr	r1, [r4, #4]
 8011f2e:	4628      	mov	r0, r5
 8011f30:	f7ff fee8 	bl	8011d04 <__cvt>
 8011f34:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8011f38:	2b47      	cmp	r3, #71	; 0x47
 8011f3a:	4680      	mov	r8, r0
 8011f3c:	d109      	bne.n	8011f52 <_printf_float+0x126>
 8011f3e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011f40:	1cd8      	adds	r0, r3, #3
 8011f42:	db02      	blt.n	8011f4a <_printf_float+0x11e>
 8011f44:	6862      	ldr	r2, [r4, #4]
 8011f46:	4293      	cmp	r3, r2
 8011f48:	dd47      	ble.n	8011fda <_printf_float+0x1ae>
 8011f4a:	f1aa 0a02 	sub.w	sl, sl, #2
 8011f4e:	fa5f fa8a 	uxtb.w	sl, sl
 8011f52:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8011f56:	9909      	ldr	r1, [sp, #36]	; 0x24
 8011f58:	d824      	bhi.n	8011fa4 <_printf_float+0x178>
 8011f5a:	3901      	subs	r1, #1
 8011f5c:	4652      	mov	r2, sl
 8011f5e:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8011f62:	9109      	str	r1, [sp, #36]	; 0x24
 8011f64:	f7ff ff2f 	bl	8011dc6 <__exponent>
 8011f68:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8011f6a:	1813      	adds	r3, r2, r0
 8011f6c:	2a01      	cmp	r2, #1
 8011f6e:	4681      	mov	r9, r0
 8011f70:	6123      	str	r3, [r4, #16]
 8011f72:	dc02      	bgt.n	8011f7a <_printf_float+0x14e>
 8011f74:	6822      	ldr	r2, [r4, #0]
 8011f76:	07d1      	lsls	r1, r2, #31
 8011f78:	d501      	bpl.n	8011f7e <_printf_float+0x152>
 8011f7a:	3301      	adds	r3, #1
 8011f7c:	6123      	str	r3, [r4, #16]
 8011f7e:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8011f82:	2b00      	cmp	r3, #0
 8011f84:	d0a5      	beq.n	8011ed2 <_printf_float+0xa6>
 8011f86:	232d      	movs	r3, #45	; 0x2d
 8011f88:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011f8c:	e7a1      	b.n	8011ed2 <_printf_float+0xa6>
 8011f8e:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 8011f92:	f000 8177 	beq.w	8012284 <_printf_float+0x458>
 8011f96:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8011f9a:	d1bb      	bne.n	8011f14 <_printf_float+0xe8>
 8011f9c:	2900      	cmp	r1, #0
 8011f9e:	d1b9      	bne.n	8011f14 <_printf_float+0xe8>
 8011fa0:	2301      	movs	r3, #1
 8011fa2:	e7b6      	b.n	8011f12 <_printf_float+0xe6>
 8011fa4:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 8011fa8:	d119      	bne.n	8011fde <_printf_float+0x1b2>
 8011faa:	2900      	cmp	r1, #0
 8011fac:	6863      	ldr	r3, [r4, #4]
 8011fae:	dd0c      	ble.n	8011fca <_printf_float+0x19e>
 8011fb0:	6121      	str	r1, [r4, #16]
 8011fb2:	b913      	cbnz	r3, 8011fba <_printf_float+0x18e>
 8011fb4:	6822      	ldr	r2, [r4, #0]
 8011fb6:	07d2      	lsls	r2, r2, #31
 8011fb8:	d502      	bpl.n	8011fc0 <_printf_float+0x194>
 8011fba:	3301      	adds	r3, #1
 8011fbc:	440b      	add	r3, r1
 8011fbe:	6123      	str	r3, [r4, #16]
 8011fc0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011fc2:	65a3      	str	r3, [r4, #88]	; 0x58
 8011fc4:	f04f 0900 	mov.w	r9, #0
 8011fc8:	e7d9      	b.n	8011f7e <_printf_float+0x152>
 8011fca:	b913      	cbnz	r3, 8011fd2 <_printf_float+0x1a6>
 8011fcc:	6822      	ldr	r2, [r4, #0]
 8011fce:	07d0      	lsls	r0, r2, #31
 8011fd0:	d501      	bpl.n	8011fd6 <_printf_float+0x1aa>
 8011fd2:	3302      	adds	r3, #2
 8011fd4:	e7f3      	b.n	8011fbe <_printf_float+0x192>
 8011fd6:	2301      	movs	r3, #1
 8011fd8:	e7f1      	b.n	8011fbe <_printf_float+0x192>
 8011fda:	f04f 0a67 	mov.w	sl, #103	; 0x67
 8011fde:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8011fe2:	4293      	cmp	r3, r2
 8011fe4:	db05      	blt.n	8011ff2 <_printf_float+0x1c6>
 8011fe6:	6822      	ldr	r2, [r4, #0]
 8011fe8:	6123      	str	r3, [r4, #16]
 8011fea:	07d1      	lsls	r1, r2, #31
 8011fec:	d5e8      	bpl.n	8011fc0 <_printf_float+0x194>
 8011fee:	3301      	adds	r3, #1
 8011ff0:	e7e5      	b.n	8011fbe <_printf_float+0x192>
 8011ff2:	2b00      	cmp	r3, #0
 8011ff4:	bfd4      	ite	le
 8011ff6:	f1c3 0302 	rsble	r3, r3, #2
 8011ffa:	2301      	movgt	r3, #1
 8011ffc:	4413      	add	r3, r2
 8011ffe:	e7de      	b.n	8011fbe <_printf_float+0x192>
 8012000:	6823      	ldr	r3, [r4, #0]
 8012002:	055a      	lsls	r2, r3, #21
 8012004:	d407      	bmi.n	8012016 <_printf_float+0x1ea>
 8012006:	6923      	ldr	r3, [r4, #16]
 8012008:	4642      	mov	r2, r8
 801200a:	4631      	mov	r1, r6
 801200c:	4628      	mov	r0, r5
 801200e:	47b8      	blx	r7
 8012010:	3001      	adds	r0, #1
 8012012:	d12b      	bne.n	801206c <_printf_float+0x240>
 8012014:	e767      	b.n	8011ee6 <_printf_float+0xba>
 8012016:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 801201a:	f240 80dc 	bls.w	80121d6 <_printf_float+0x3aa>
 801201e:	2200      	movs	r2, #0
 8012020:	2300      	movs	r3, #0
 8012022:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8012026:	f7ee fd27 	bl	8000a78 <__aeabi_dcmpeq>
 801202a:	2800      	cmp	r0, #0
 801202c:	d033      	beq.n	8012096 <_printf_float+0x26a>
 801202e:	2301      	movs	r3, #1
 8012030:	4a41      	ldr	r2, [pc, #260]	; (8012138 <_printf_float+0x30c>)
 8012032:	4631      	mov	r1, r6
 8012034:	4628      	mov	r0, r5
 8012036:	47b8      	blx	r7
 8012038:	3001      	adds	r0, #1
 801203a:	f43f af54 	beq.w	8011ee6 <_printf_float+0xba>
 801203e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8012042:	429a      	cmp	r2, r3
 8012044:	db02      	blt.n	801204c <_printf_float+0x220>
 8012046:	6823      	ldr	r3, [r4, #0]
 8012048:	07d8      	lsls	r0, r3, #31
 801204a:	d50f      	bpl.n	801206c <_printf_float+0x240>
 801204c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8012050:	4631      	mov	r1, r6
 8012052:	4628      	mov	r0, r5
 8012054:	47b8      	blx	r7
 8012056:	3001      	adds	r0, #1
 8012058:	f43f af45 	beq.w	8011ee6 <_printf_float+0xba>
 801205c:	f04f 0800 	mov.w	r8, #0
 8012060:	f104 091a 	add.w	r9, r4, #26
 8012064:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012066:	3b01      	subs	r3, #1
 8012068:	4543      	cmp	r3, r8
 801206a:	dc09      	bgt.n	8012080 <_printf_float+0x254>
 801206c:	6823      	ldr	r3, [r4, #0]
 801206e:	079b      	lsls	r3, r3, #30
 8012070:	f100 8103 	bmi.w	801227a <_printf_float+0x44e>
 8012074:	68e0      	ldr	r0, [r4, #12]
 8012076:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012078:	4298      	cmp	r0, r3
 801207a:	bfb8      	it	lt
 801207c:	4618      	movlt	r0, r3
 801207e:	e734      	b.n	8011eea <_printf_float+0xbe>
 8012080:	2301      	movs	r3, #1
 8012082:	464a      	mov	r2, r9
 8012084:	4631      	mov	r1, r6
 8012086:	4628      	mov	r0, r5
 8012088:	47b8      	blx	r7
 801208a:	3001      	adds	r0, #1
 801208c:	f43f af2b 	beq.w	8011ee6 <_printf_float+0xba>
 8012090:	f108 0801 	add.w	r8, r8, #1
 8012094:	e7e6      	b.n	8012064 <_printf_float+0x238>
 8012096:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012098:	2b00      	cmp	r3, #0
 801209a:	dc2b      	bgt.n	80120f4 <_printf_float+0x2c8>
 801209c:	2301      	movs	r3, #1
 801209e:	4a26      	ldr	r2, [pc, #152]	; (8012138 <_printf_float+0x30c>)
 80120a0:	4631      	mov	r1, r6
 80120a2:	4628      	mov	r0, r5
 80120a4:	47b8      	blx	r7
 80120a6:	3001      	adds	r0, #1
 80120a8:	f43f af1d 	beq.w	8011ee6 <_printf_float+0xba>
 80120ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80120ae:	b923      	cbnz	r3, 80120ba <_printf_float+0x28e>
 80120b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80120b2:	b913      	cbnz	r3, 80120ba <_printf_float+0x28e>
 80120b4:	6823      	ldr	r3, [r4, #0]
 80120b6:	07d9      	lsls	r1, r3, #31
 80120b8:	d5d8      	bpl.n	801206c <_printf_float+0x240>
 80120ba:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80120be:	4631      	mov	r1, r6
 80120c0:	4628      	mov	r0, r5
 80120c2:	47b8      	blx	r7
 80120c4:	3001      	adds	r0, #1
 80120c6:	f43f af0e 	beq.w	8011ee6 <_printf_float+0xba>
 80120ca:	f04f 0900 	mov.w	r9, #0
 80120ce:	f104 0a1a 	add.w	sl, r4, #26
 80120d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80120d4:	425b      	negs	r3, r3
 80120d6:	454b      	cmp	r3, r9
 80120d8:	dc01      	bgt.n	80120de <_printf_float+0x2b2>
 80120da:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80120dc:	e794      	b.n	8012008 <_printf_float+0x1dc>
 80120de:	2301      	movs	r3, #1
 80120e0:	4652      	mov	r2, sl
 80120e2:	4631      	mov	r1, r6
 80120e4:	4628      	mov	r0, r5
 80120e6:	47b8      	blx	r7
 80120e8:	3001      	adds	r0, #1
 80120ea:	f43f aefc 	beq.w	8011ee6 <_printf_float+0xba>
 80120ee:	f109 0901 	add.w	r9, r9, #1
 80120f2:	e7ee      	b.n	80120d2 <_printf_float+0x2a6>
 80120f4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80120f6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80120f8:	429a      	cmp	r2, r3
 80120fa:	bfa8      	it	ge
 80120fc:	461a      	movge	r2, r3
 80120fe:	2a00      	cmp	r2, #0
 8012100:	4691      	mov	r9, r2
 8012102:	dd07      	ble.n	8012114 <_printf_float+0x2e8>
 8012104:	4613      	mov	r3, r2
 8012106:	4631      	mov	r1, r6
 8012108:	4642      	mov	r2, r8
 801210a:	4628      	mov	r0, r5
 801210c:	47b8      	blx	r7
 801210e:	3001      	adds	r0, #1
 8012110:	f43f aee9 	beq.w	8011ee6 <_printf_float+0xba>
 8012114:	f104 031a 	add.w	r3, r4, #26
 8012118:	f04f 0b00 	mov.w	fp, #0
 801211c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8012120:	9306      	str	r3, [sp, #24]
 8012122:	e015      	b.n	8012150 <_printf_float+0x324>
 8012124:	7fefffff 	.word	0x7fefffff
 8012128:	080163bc 	.word	0x080163bc
 801212c:	080163b8 	.word	0x080163b8
 8012130:	080163c4 	.word	0x080163c4
 8012134:	080163c0 	.word	0x080163c0
 8012138:	080163c8 	.word	0x080163c8
 801213c:	2301      	movs	r3, #1
 801213e:	9a06      	ldr	r2, [sp, #24]
 8012140:	4631      	mov	r1, r6
 8012142:	4628      	mov	r0, r5
 8012144:	47b8      	blx	r7
 8012146:	3001      	adds	r0, #1
 8012148:	f43f aecd 	beq.w	8011ee6 <_printf_float+0xba>
 801214c:	f10b 0b01 	add.w	fp, fp, #1
 8012150:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8012154:	ebaa 0309 	sub.w	r3, sl, r9
 8012158:	455b      	cmp	r3, fp
 801215a:	dcef      	bgt.n	801213c <_printf_float+0x310>
 801215c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8012160:	429a      	cmp	r2, r3
 8012162:	44d0      	add	r8, sl
 8012164:	db15      	blt.n	8012192 <_printf_float+0x366>
 8012166:	6823      	ldr	r3, [r4, #0]
 8012168:	07da      	lsls	r2, r3, #31
 801216a:	d412      	bmi.n	8012192 <_printf_float+0x366>
 801216c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801216e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8012170:	eba3 020a 	sub.w	r2, r3, sl
 8012174:	eba3 0a01 	sub.w	sl, r3, r1
 8012178:	4592      	cmp	sl, r2
 801217a:	bfa8      	it	ge
 801217c:	4692      	movge	sl, r2
 801217e:	f1ba 0f00 	cmp.w	sl, #0
 8012182:	dc0e      	bgt.n	80121a2 <_printf_float+0x376>
 8012184:	f04f 0800 	mov.w	r8, #0
 8012188:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801218c:	f104 091a 	add.w	r9, r4, #26
 8012190:	e019      	b.n	80121c6 <_printf_float+0x39a>
 8012192:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8012196:	4631      	mov	r1, r6
 8012198:	4628      	mov	r0, r5
 801219a:	47b8      	blx	r7
 801219c:	3001      	adds	r0, #1
 801219e:	d1e5      	bne.n	801216c <_printf_float+0x340>
 80121a0:	e6a1      	b.n	8011ee6 <_printf_float+0xba>
 80121a2:	4653      	mov	r3, sl
 80121a4:	4642      	mov	r2, r8
 80121a6:	4631      	mov	r1, r6
 80121a8:	4628      	mov	r0, r5
 80121aa:	47b8      	blx	r7
 80121ac:	3001      	adds	r0, #1
 80121ae:	d1e9      	bne.n	8012184 <_printf_float+0x358>
 80121b0:	e699      	b.n	8011ee6 <_printf_float+0xba>
 80121b2:	2301      	movs	r3, #1
 80121b4:	464a      	mov	r2, r9
 80121b6:	4631      	mov	r1, r6
 80121b8:	4628      	mov	r0, r5
 80121ba:	47b8      	blx	r7
 80121bc:	3001      	adds	r0, #1
 80121be:	f43f ae92 	beq.w	8011ee6 <_printf_float+0xba>
 80121c2:	f108 0801 	add.w	r8, r8, #1
 80121c6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80121ca:	1a9b      	subs	r3, r3, r2
 80121cc:	eba3 030a 	sub.w	r3, r3, sl
 80121d0:	4543      	cmp	r3, r8
 80121d2:	dcee      	bgt.n	80121b2 <_printf_float+0x386>
 80121d4:	e74a      	b.n	801206c <_printf_float+0x240>
 80121d6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80121d8:	2a01      	cmp	r2, #1
 80121da:	dc01      	bgt.n	80121e0 <_printf_float+0x3b4>
 80121dc:	07db      	lsls	r3, r3, #31
 80121de:	d53a      	bpl.n	8012256 <_printf_float+0x42a>
 80121e0:	2301      	movs	r3, #1
 80121e2:	4642      	mov	r2, r8
 80121e4:	4631      	mov	r1, r6
 80121e6:	4628      	mov	r0, r5
 80121e8:	47b8      	blx	r7
 80121ea:	3001      	adds	r0, #1
 80121ec:	f43f ae7b 	beq.w	8011ee6 <_printf_float+0xba>
 80121f0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80121f4:	4631      	mov	r1, r6
 80121f6:	4628      	mov	r0, r5
 80121f8:	47b8      	blx	r7
 80121fa:	3001      	adds	r0, #1
 80121fc:	f108 0801 	add.w	r8, r8, #1
 8012200:	f43f ae71 	beq.w	8011ee6 <_printf_float+0xba>
 8012204:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012206:	2200      	movs	r2, #0
 8012208:	f103 3aff 	add.w	sl, r3, #4294967295
 801220c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8012210:	2300      	movs	r3, #0
 8012212:	f7ee fc31 	bl	8000a78 <__aeabi_dcmpeq>
 8012216:	b9c8      	cbnz	r0, 801224c <_printf_float+0x420>
 8012218:	4653      	mov	r3, sl
 801221a:	4642      	mov	r2, r8
 801221c:	4631      	mov	r1, r6
 801221e:	4628      	mov	r0, r5
 8012220:	47b8      	blx	r7
 8012222:	3001      	adds	r0, #1
 8012224:	d10e      	bne.n	8012244 <_printf_float+0x418>
 8012226:	e65e      	b.n	8011ee6 <_printf_float+0xba>
 8012228:	2301      	movs	r3, #1
 801222a:	4652      	mov	r2, sl
 801222c:	4631      	mov	r1, r6
 801222e:	4628      	mov	r0, r5
 8012230:	47b8      	blx	r7
 8012232:	3001      	adds	r0, #1
 8012234:	f43f ae57 	beq.w	8011ee6 <_printf_float+0xba>
 8012238:	f108 0801 	add.w	r8, r8, #1
 801223c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801223e:	3b01      	subs	r3, #1
 8012240:	4543      	cmp	r3, r8
 8012242:	dcf1      	bgt.n	8012228 <_printf_float+0x3fc>
 8012244:	464b      	mov	r3, r9
 8012246:	f104 0250 	add.w	r2, r4, #80	; 0x50
 801224a:	e6de      	b.n	801200a <_printf_float+0x1de>
 801224c:	f04f 0800 	mov.w	r8, #0
 8012250:	f104 0a1a 	add.w	sl, r4, #26
 8012254:	e7f2      	b.n	801223c <_printf_float+0x410>
 8012256:	2301      	movs	r3, #1
 8012258:	e7df      	b.n	801221a <_printf_float+0x3ee>
 801225a:	2301      	movs	r3, #1
 801225c:	464a      	mov	r2, r9
 801225e:	4631      	mov	r1, r6
 8012260:	4628      	mov	r0, r5
 8012262:	47b8      	blx	r7
 8012264:	3001      	adds	r0, #1
 8012266:	f43f ae3e 	beq.w	8011ee6 <_printf_float+0xba>
 801226a:	f108 0801 	add.w	r8, r8, #1
 801226e:	68e3      	ldr	r3, [r4, #12]
 8012270:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8012272:	1a9b      	subs	r3, r3, r2
 8012274:	4543      	cmp	r3, r8
 8012276:	dcf0      	bgt.n	801225a <_printf_float+0x42e>
 8012278:	e6fc      	b.n	8012074 <_printf_float+0x248>
 801227a:	f04f 0800 	mov.w	r8, #0
 801227e:	f104 0919 	add.w	r9, r4, #25
 8012282:	e7f4      	b.n	801226e <_printf_float+0x442>
 8012284:	2900      	cmp	r1, #0
 8012286:	f43f ae8b 	beq.w	8011fa0 <_printf_float+0x174>
 801228a:	2300      	movs	r3, #0
 801228c:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8012290:	ab09      	add	r3, sp, #36	; 0x24
 8012292:	9300      	str	r3, [sp, #0]
 8012294:	ec49 8b10 	vmov	d0, r8, r9
 8012298:	6022      	str	r2, [r4, #0]
 801229a:	f8cd a004 	str.w	sl, [sp, #4]
 801229e:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80122a2:	4628      	mov	r0, r5
 80122a4:	f7ff fd2e 	bl	8011d04 <__cvt>
 80122a8:	4680      	mov	r8, r0
 80122aa:	e648      	b.n	8011f3e <_printf_float+0x112>

080122ac <_printf_common>:
 80122ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80122b0:	4691      	mov	r9, r2
 80122b2:	461f      	mov	r7, r3
 80122b4:	688a      	ldr	r2, [r1, #8]
 80122b6:	690b      	ldr	r3, [r1, #16]
 80122b8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80122bc:	4293      	cmp	r3, r2
 80122be:	bfb8      	it	lt
 80122c0:	4613      	movlt	r3, r2
 80122c2:	f8c9 3000 	str.w	r3, [r9]
 80122c6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80122ca:	4606      	mov	r6, r0
 80122cc:	460c      	mov	r4, r1
 80122ce:	b112      	cbz	r2, 80122d6 <_printf_common+0x2a>
 80122d0:	3301      	adds	r3, #1
 80122d2:	f8c9 3000 	str.w	r3, [r9]
 80122d6:	6823      	ldr	r3, [r4, #0]
 80122d8:	0699      	lsls	r1, r3, #26
 80122da:	bf42      	ittt	mi
 80122dc:	f8d9 3000 	ldrmi.w	r3, [r9]
 80122e0:	3302      	addmi	r3, #2
 80122e2:	f8c9 3000 	strmi.w	r3, [r9]
 80122e6:	6825      	ldr	r5, [r4, #0]
 80122e8:	f015 0506 	ands.w	r5, r5, #6
 80122ec:	d107      	bne.n	80122fe <_printf_common+0x52>
 80122ee:	f104 0a19 	add.w	sl, r4, #25
 80122f2:	68e3      	ldr	r3, [r4, #12]
 80122f4:	f8d9 2000 	ldr.w	r2, [r9]
 80122f8:	1a9b      	subs	r3, r3, r2
 80122fa:	42ab      	cmp	r3, r5
 80122fc:	dc28      	bgt.n	8012350 <_printf_common+0xa4>
 80122fe:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8012302:	6822      	ldr	r2, [r4, #0]
 8012304:	3300      	adds	r3, #0
 8012306:	bf18      	it	ne
 8012308:	2301      	movne	r3, #1
 801230a:	0692      	lsls	r2, r2, #26
 801230c:	d42d      	bmi.n	801236a <_printf_common+0xbe>
 801230e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8012312:	4639      	mov	r1, r7
 8012314:	4630      	mov	r0, r6
 8012316:	47c0      	blx	r8
 8012318:	3001      	adds	r0, #1
 801231a:	d020      	beq.n	801235e <_printf_common+0xb2>
 801231c:	6823      	ldr	r3, [r4, #0]
 801231e:	68e5      	ldr	r5, [r4, #12]
 8012320:	f8d9 2000 	ldr.w	r2, [r9]
 8012324:	f003 0306 	and.w	r3, r3, #6
 8012328:	2b04      	cmp	r3, #4
 801232a:	bf08      	it	eq
 801232c:	1aad      	subeq	r5, r5, r2
 801232e:	68a3      	ldr	r3, [r4, #8]
 8012330:	6922      	ldr	r2, [r4, #16]
 8012332:	bf0c      	ite	eq
 8012334:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8012338:	2500      	movne	r5, #0
 801233a:	4293      	cmp	r3, r2
 801233c:	bfc4      	itt	gt
 801233e:	1a9b      	subgt	r3, r3, r2
 8012340:	18ed      	addgt	r5, r5, r3
 8012342:	f04f 0900 	mov.w	r9, #0
 8012346:	341a      	adds	r4, #26
 8012348:	454d      	cmp	r5, r9
 801234a:	d11a      	bne.n	8012382 <_printf_common+0xd6>
 801234c:	2000      	movs	r0, #0
 801234e:	e008      	b.n	8012362 <_printf_common+0xb6>
 8012350:	2301      	movs	r3, #1
 8012352:	4652      	mov	r2, sl
 8012354:	4639      	mov	r1, r7
 8012356:	4630      	mov	r0, r6
 8012358:	47c0      	blx	r8
 801235a:	3001      	adds	r0, #1
 801235c:	d103      	bne.n	8012366 <_printf_common+0xba>
 801235e:	f04f 30ff 	mov.w	r0, #4294967295
 8012362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012366:	3501      	adds	r5, #1
 8012368:	e7c3      	b.n	80122f2 <_printf_common+0x46>
 801236a:	18e1      	adds	r1, r4, r3
 801236c:	1c5a      	adds	r2, r3, #1
 801236e:	2030      	movs	r0, #48	; 0x30
 8012370:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8012374:	4422      	add	r2, r4
 8012376:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801237a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801237e:	3302      	adds	r3, #2
 8012380:	e7c5      	b.n	801230e <_printf_common+0x62>
 8012382:	2301      	movs	r3, #1
 8012384:	4622      	mov	r2, r4
 8012386:	4639      	mov	r1, r7
 8012388:	4630      	mov	r0, r6
 801238a:	47c0      	blx	r8
 801238c:	3001      	adds	r0, #1
 801238e:	d0e6      	beq.n	801235e <_printf_common+0xb2>
 8012390:	f109 0901 	add.w	r9, r9, #1
 8012394:	e7d8      	b.n	8012348 <_printf_common+0x9c>
	...

08012398 <_printf_i>:
 8012398:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801239c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80123a0:	460c      	mov	r4, r1
 80123a2:	7e09      	ldrb	r1, [r1, #24]
 80123a4:	b085      	sub	sp, #20
 80123a6:	296e      	cmp	r1, #110	; 0x6e
 80123a8:	4617      	mov	r7, r2
 80123aa:	4606      	mov	r6, r0
 80123ac:	4698      	mov	r8, r3
 80123ae:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80123b0:	f000 80b3 	beq.w	801251a <_printf_i+0x182>
 80123b4:	d822      	bhi.n	80123fc <_printf_i+0x64>
 80123b6:	2963      	cmp	r1, #99	; 0x63
 80123b8:	d036      	beq.n	8012428 <_printf_i+0x90>
 80123ba:	d80a      	bhi.n	80123d2 <_printf_i+0x3a>
 80123bc:	2900      	cmp	r1, #0
 80123be:	f000 80b9 	beq.w	8012534 <_printf_i+0x19c>
 80123c2:	2958      	cmp	r1, #88	; 0x58
 80123c4:	f000 8083 	beq.w	80124ce <_printf_i+0x136>
 80123c8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80123cc:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80123d0:	e032      	b.n	8012438 <_printf_i+0xa0>
 80123d2:	2964      	cmp	r1, #100	; 0x64
 80123d4:	d001      	beq.n	80123da <_printf_i+0x42>
 80123d6:	2969      	cmp	r1, #105	; 0x69
 80123d8:	d1f6      	bne.n	80123c8 <_printf_i+0x30>
 80123da:	6820      	ldr	r0, [r4, #0]
 80123dc:	6813      	ldr	r3, [r2, #0]
 80123de:	0605      	lsls	r5, r0, #24
 80123e0:	f103 0104 	add.w	r1, r3, #4
 80123e4:	d52a      	bpl.n	801243c <_printf_i+0xa4>
 80123e6:	681b      	ldr	r3, [r3, #0]
 80123e8:	6011      	str	r1, [r2, #0]
 80123ea:	2b00      	cmp	r3, #0
 80123ec:	da03      	bge.n	80123f6 <_printf_i+0x5e>
 80123ee:	222d      	movs	r2, #45	; 0x2d
 80123f0:	425b      	negs	r3, r3
 80123f2:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80123f6:	486f      	ldr	r0, [pc, #444]	; (80125b4 <_printf_i+0x21c>)
 80123f8:	220a      	movs	r2, #10
 80123fa:	e039      	b.n	8012470 <_printf_i+0xd8>
 80123fc:	2973      	cmp	r1, #115	; 0x73
 80123fe:	f000 809d 	beq.w	801253c <_printf_i+0x1a4>
 8012402:	d808      	bhi.n	8012416 <_printf_i+0x7e>
 8012404:	296f      	cmp	r1, #111	; 0x6f
 8012406:	d020      	beq.n	801244a <_printf_i+0xb2>
 8012408:	2970      	cmp	r1, #112	; 0x70
 801240a:	d1dd      	bne.n	80123c8 <_printf_i+0x30>
 801240c:	6823      	ldr	r3, [r4, #0]
 801240e:	f043 0320 	orr.w	r3, r3, #32
 8012412:	6023      	str	r3, [r4, #0]
 8012414:	e003      	b.n	801241e <_printf_i+0x86>
 8012416:	2975      	cmp	r1, #117	; 0x75
 8012418:	d017      	beq.n	801244a <_printf_i+0xb2>
 801241a:	2978      	cmp	r1, #120	; 0x78
 801241c:	d1d4      	bne.n	80123c8 <_printf_i+0x30>
 801241e:	2378      	movs	r3, #120	; 0x78
 8012420:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8012424:	4864      	ldr	r0, [pc, #400]	; (80125b8 <_printf_i+0x220>)
 8012426:	e055      	b.n	80124d4 <_printf_i+0x13c>
 8012428:	6813      	ldr	r3, [r2, #0]
 801242a:	1d19      	adds	r1, r3, #4
 801242c:	681b      	ldr	r3, [r3, #0]
 801242e:	6011      	str	r1, [r2, #0]
 8012430:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8012434:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8012438:	2301      	movs	r3, #1
 801243a:	e08c      	b.n	8012556 <_printf_i+0x1be>
 801243c:	681b      	ldr	r3, [r3, #0]
 801243e:	6011      	str	r1, [r2, #0]
 8012440:	f010 0f40 	tst.w	r0, #64	; 0x40
 8012444:	bf18      	it	ne
 8012446:	b21b      	sxthne	r3, r3
 8012448:	e7cf      	b.n	80123ea <_printf_i+0x52>
 801244a:	6813      	ldr	r3, [r2, #0]
 801244c:	6825      	ldr	r5, [r4, #0]
 801244e:	1d18      	adds	r0, r3, #4
 8012450:	6010      	str	r0, [r2, #0]
 8012452:	0628      	lsls	r0, r5, #24
 8012454:	d501      	bpl.n	801245a <_printf_i+0xc2>
 8012456:	681b      	ldr	r3, [r3, #0]
 8012458:	e002      	b.n	8012460 <_printf_i+0xc8>
 801245a:	0668      	lsls	r0, r5, #25
 801245c:	d5fb      	bpl.n	8012456 <_printf_i+0xbe>
 801245e:	881b      	ldrh	r3, [r3, #0]
 8012460:	4854      	ldr	r0, [pc, #336]	; (80125b4 <_printf_i+0x21c>)
 8012462:	296f      	cmp	r1, #111	; 0x6f
 8012464:	bf14      	ite	ne
 8012466:	220a      	movne	r2, #10
 8012468:	2208      	moveq	r2, #8
 801246a:	2100      	movs	r1, #0
 801246c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8012470:	6865      	ldr	r5, [r4, #4]
 8012472:	60a5      	str	r5, [r4, #8]
 8012474:	2d00      	cmp	r5, #0
 8012476:	f2c0 8095 	blt.w	80125a4 <_printf_i+0x20c>
 801247a:	6821      	ldr	r1, [r4, #0]
 801247c:	f021 0104 	bic.w	r1, r1, #4
 8012480:	6021      	str	r1, [r4, #0]
 8012482:	2b00      	cmp	r3, #0
 8012484:	d13d      	bne.n	8012502 <_printf_i+0x16a>
 8012486:	2d00      	cmp	r5, #0
 8012488:	f040 808e 	bne.w	80125a8 <_printf_i+0x210>
 801248c:	4665      	mov	r5, ip
 801248e:	2a08      	cmp	r2, #8
 8012490:	d10b      	bne.n	80124aa <_printf_i+0x112>
 8012492:	6823      	ldr	r3, [r4, #0]
 8012494:	07db      	lsls	r3, r3, #31
 8012496:	d508      	bpl.n	80124aa <_printf_i+0x112>
 8012498:	6923      	ldr	r3, [r4, #16]
 801249a:	6862      	ldr	r2, [r4, #4]
 801249c:	429a      	cmp	r2, r3
 801249e:	bfde      	ittt	le
 80124a0:	2330      	movle	r3, #48	; 0x30
 80124a2:	f805 3c01 	strble.w	r3, [r5, #-1]
 80124a6:	f105 35ff 	addle.w	r5, r5, #4294967295
 80124aa:	ebac 0305 	sub.w	r3, ip, r5
 80124ae:	6123      	str	r3, [r4, #16]
 80124b0:	f8cd 8000 	str.w	r8, [sp]
 80124b4:	463b      	mov	r3, r7
 80124b6:	aa03      	add	r2, sp, #12
 80124b8:	4621      	mov	r1, r4
 80124ba:	4630      	mov	r0, r6
 80124bc:	f7ff fef6 	bl	80122ac <_printf_common>
 80124c0:	3001      	adds	r0, #1
 80124c2:	d14d      	bne.n	8012560 <_printf_i+0x1c8>
 80124c4:	f04f 30ff 	mov.w	r0, #4294967295
 80124c8:	b005      	add	sp, #20
 80124ca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80124ce:	4839      	ldr	r0, [pc, #228]	; (80125b4 <_printf_i+0x21c>)
 80124d0:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80124d4:	6813      	ldr	r3, [r2, #0]
 80124d6:	6821      	ldr	r1, [r4, #0]
 80124d8:	1d1d      	adds	r5, r3, #4
 80124da:	681b      	ldr	r3, [r3, #0]
 80124dc:	6015      	str	r5, [r2, #0]
 80124de:	060a      	lsls	r2, r1, #24
 80124e0:	d50b      	bpl.n	80124fa <_printf_i+0x162>
 80124e2:	07ca      	lsls	r2, r1, #31
 80124e4:	bf44      	itt	mi
 80124e6:	f041 0120 	orrmi.w	r1, r1, #32
 80124ea:	6021      	strmi	r1, [r4, #0]
 80124ec:	b91b      	cbnz	r3, 80124f6 <_printf_i+0x15e>
 80124ee:	6822      	ldr	r2, [r4, #0]
 80124f0:	f022 0220 	bic.w	r2, r2, #32
 80124f4:	6022      	str	r2, [r4, #0]
 80124f6:	2210      	movs	r2, #16
 80124f8:	e7b7      	b.n	801246a <_printf_i+0xd2>
 80124fa:	064d      	lsls	r5, r1, #25
 80124fc:	bf48      	it	mi
 80124fe:	b29b      	uxthmi	r3, r3
 8012500:	e7ef      	b.n	80124e2 <_printf_i+0x14a>
 8012502:	4665      	mov	r5, ip
 8012504:	fbb3 f1f2 	udiv	r1, r3, r2
 8012508:	fb02 3311 	mls	r3, r2, r1, r3
 801250c:	5cc3      	ldrb	r3, [r0, r3]
 801250e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8012512:	460b      	mov	r3, r1
 8012514:	2900      	cmp	r1, #0
 8012516:	d1f5      	bne.n	8012504 <_printf_i+0x16c>
 8012518:	e7b9      	b.n	801248e <_printf_i+0xf6>
 801251a:	6813      	ldr	r3, [r2, #0]
 801251c:	6825      	ldr	r5, [r4, #0]
 801251e:	6961      	ldr	r1, [r4, #20]
 8012520:	1d18      	adds	r0, r3, #4
 8012522:	6010      	str	r0, [r2, #0]
 8012524:	0628      	lsls	r0, r5, #24
 8012526:	681b      	ldr	r3, [r3, #0]
 8012528:	d501      	bpl.n	801252e <_printf_i+0x196>
 801252a:	6019      	str	r1, [r3, #0]
 801252c:	e002      	b.n	8012534 <_printf_i+0x19c>
 801252e:	066a      	lsls	r2, r5, #25
 8012530:	d5fb      	bpl.n	801252a <_printf_i+0x192>
 8012532:	8019      	strh	r1, [r3, #0]
 8012534:	2300      	movs	r3, #0
 8012536:	6123      	str	r3, [r4, #16]
 8012538:	4665      	mov	r5, ip
 801253a:	e7b9      	b.n	80124b0 <_printf_i+0x118>
 801253c:	6813      	ldr	r3, [r2, #0]
 801253e:	1d19      	adds	r1, r3, #4
 8012540:	6011      	str	r1, [r2, #0]
 8012542:	681d      	ldr	r5, [r3, #0]
 8012544:	6862      	ldr	r2, [r4, #4]
 8012546:	2100      	movs	r1, #0
 8012548:	4628      	mov	r0, r5
 801254a:	f7ed fe21 	bl	8000190 <memchr>
 801254e:	b108      	cbz	r0, 8012554 <_printf_i+0x1bc>
 8012550:	1b40      	subs	r0, r0, r5
 8012552:	6060      	str	r0, [r4, #4]
 8012554:	6863      	ldr	r3, [r4, #4]
 8012556:	6123      	str	r3, [r4, #16]
 8012558:	2300      	movs	r3, #0
 801255a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801255e:	e7a7      	b.n	80124b0 <_printf_i+0x118>
 8012560:	6923      	ldr	r3, [r4, #16]
 8012562:	462a      	mov	r2, r5
 8012564:	4639      	mov	r1, r7
 8012566:	4630      	mov	r0, r6
 8012568:	47c0      	blx	r8
 801256a:	3001      	adds	r0, #1
 801256c:	d0aa      	beq.n	80124c4 <_printf_i+0x12c>
 801256e:	6823      	ldr	r3, [r4, #0]
 8012570:	079b      	lsls	r3, r3, #30
 8012572:	d413      	bmi.n	801259c <_printf_i+0x204>
 8012574:	68e0      	ldr	r0, [r4, #12]
 8012576:	9b03      	ldr	r3, [sp, #12]
 8012578:	4298      	cmp	r0, r3
 801257a:	bfb8      	it	lt
 801257c:	4618      	movlt	r0, r3
 801257e:	e7a3      	b.n	80124c8 <_printf_i+0x130>
 8012580:	2301      	movs	r3, #1
 8012582:	464a      	mov	r2, r9
 8012584:	4639      	mov	r1, r7
 8012586:	4630      	mov	r0, r6
 8012588:	47c0      	blx	r8
 801258a:	3001      	adds	r0, #1
 801258c:	d09a      	beq.n	80124c4 <_printf_i+0x12c>
 801258e:	3501      	adds	r5, #1
 8012590:	68e3      	ldr	r3, [r4, #12]
 8012592:	9a03      	ldr	r2, [sp, #12]
 8012594:	1a9b      	subs	r3, r3, r2
 8012596:	42ab      	cmp	r3, r5
 8012598:	dcf2      	bgt.n	8012580 <_printf_i+0x1e8>
 801259a:	e7eb      	b.n	8012574 <_printf_i+0x1dc>
 801259c:	2500      	movs	r5, #0
 801259e:	f104 0919 	add.w	r9, r4, #25
 80125a2:	e7f5      	b.n	8012590 <_printf_i+0x1f8>
 80125a4:	2b00      	cmp	r3, #0
 80125a6:	d1ac      	bne.n	8012502 <_printf_i+0x16a>
 80125a8:	7803      	ldrb	r3, [r0, #0]
 80125aa:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80125ae:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80125b2:	e76c      	b.n	801248e <_printf_i+0xf6>
 80125b4:	080163ca 	.word	0x080163ca
 80125b8:	080163db 	.word	0x080163db

080125bc <iprintf>:
 80125bc:	b40f      	push	{r0, r1, r2, r3}
 80125be:	4b0a      	ldr	r3, [pc, #40]	; (80125e8 <iprintf+0x2c>)
 80125c0:	b513      	push	{r0, r1, r4, lr}
 80125c2:	681c      	ldr	r4, [r3, #0]
 80125c4:	b124      	cbz	r4, 80125d0 <iprintf+0x14>
 80125c6:	69a3      	ldr	r3, [r4, #24]
 80125c8:	b913      	cbnz	r3, 80125d0 <iprintf+0x14>
 80125ca:	4620      	mov	r0, r4
 80125cc:	f001 f8ac 	bl	8013728 <__sinit>
 80125d0:	ab05      	add	r3, sp, #20
 80125d2:	9a04      	ldr	r2, [sp, #16]
 80125d4:	68a1      	ldr	r1, [r4, #8]
 80125d6:	9301      	str	r3, [sp, #4]
 80125d8:	4620      	mov	r0, r4
 80125da:	f001 fe09 	bl	80141f0 <_vfiprintf_r>
 80125de:	b002      	add	sp, #8
 80125e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80125e4:	b004      	add	sp, #16
 80125e6:	4770      	bx	lr
 80125e8:	20000024 	.word	0x20000024

080125ec <_puts_r>:
 80125ec:	b570      	push	{r4, r5, r6, lr}
 80125ee:	460e      	mov	r6, r1
 80125f0:	4605      	mov	r5, r0
 80125f2:	b118      	cbz	r0, 80125fc <_puts_r+0x10>
 80125f4:	6983      	ldr	r3, [r0, #24]
 80125f6:	b90b      	cbnz	r3, 80125fc <_puts_r+0x10>
 80125f8:	f001 f896 	bl	8013728 <__sinit>
 80125fc:	69ab      	ldr	r3, [r5, #24]
 80125fe:	68ac      	ldr	r4, [r5, #8]
 8012600:	b913      	cbnz	r3, 8012608 <_puts_r+0x1c>
 8012602:	4628      	mov	r0, r5
 8012604:	f001 f890 	bl	8013728 <__sinit>
 8012608:	4b23      	ldr	r3, [pc, #140]	; (8012698 <_puts_r+0xac>)
 801260a:	429c      	cmp	r4, r3
 801260c:	d117      	bne.n	801263e <_puts_r+0x52>
 801260e:	686c      	ldr	r4, [r5, #4]
 8012610:	89a3      	ldrh	r3, [r4, #12]
 8012612:	071b      	lsls	r3, r3, #28
 8012614:	d51d      	bpl.n	8012652 <_puts_r+0x66>
 8012616:	6923      	ldr	r3, [r4, #16]
 8012618:	b1db      	cbz	r3, 8012652 <_puts_r+0x66>
 801261a:	3e01      	subs	r6, #1
 801261c:	68a3      	ldr	r3, [r4, #8]
 801261e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8012622:	3b01      	subs	r3, #1
 8012624:	60a3      	str	r3, [r4, #8]
 8012626:	b9e9      	cbnz	r1, 8012664 <_puts_r+0x78>
 8012628:	2b00      	cmp	r3, #0
 801262a:	da2e      	bge.n	801268a <_puts_r+0x9e>
 801262c:	4622      	mov	r2, r4
 801262e:	210a      	movs	r1, #10
 8012630:	4628      	mov	r0, r5
 8012632:	f000 f885 	bl	8012740 <__swbuf_r>
 8012636:	3001      	adds	r0, #1
 8012638:	d011      	beq.n	801265e <_puts_r+0x72>
 801263a:	200a      	movs	r0, #10
 801263c:	e011      	b.n	8012662 <_puts_r+0x76>
 801263e:	4b17      	ldr	r3, [pc, #92]	; (801269c <_puts_r+0xb0>)
 8012640:	429c      	cmp	r4, r3
 8012642:	d101      	bne.n	8012648 <_puts_r+0x5c>
 8012644:	68ac      	ldr	r4, [r5, #8]
 8012646:	e7e3      	b.n	8012610 <_puts_r+0x24>
 8012648:	4b15      	ldr	r3, [pc, #84]	; (80126a0 <_puts_r+0xb4>)
 801264a:	429c      	cmp	r4, r3
 801264c:	bf08      	it	eq
 801264e:	68ec      	ldreq	r4, [r5, #12]
 8012650:	e7de      	b.n	8012610 <_puts_r+0x24>
 8012652:	4621      	mov	r1, r4
 8012654:	4628      	mov	r0, r5
 8012656:	f000 f8c5 	bl	80127e4 <__swsetup_r>
 801265a:	2800      	cmp	r0, #0
 801265c:	d0dd      	beq.n	801261a <_puts_r+0x2e>
 801265e:	f04f 30ff 	mov.w	r0, #4294967295
 8012662:	bd70      	pop	{r4, r5, r6, pc}
 8012664:	2b00      	cmp	r3, #0
 8012666:	da04      	bge.n	8012672 <_puts_r+0x86>
 8012668:	69a2      	ldr	r2, [r4, #24]
 801266a:	429a      	cmp	r2, r3
 801266c:	dc06      	bgt.n	801267c <_puts_r+0x90>
 801266e:	290a      	cmp	r1, #10
 8012670:	d004      	beq.n	801267c <_puts_r+0x90>
 8012672:	6823      	ldr	r3, [r4, #0]
 8012674:	1c5a      	adds	r2, r3, #1
 8012676:	6022      	str	r2, [r4, #0]
 8012678:	7019      	strb	r1, [r3, #0]
 801267a:	e7cf      	b.n	801261c <_puts_r+0x30>
 801267c:	4622      	mov	r2, r4
 801267e:	4628      	mov	r0, r5
 8012680:	f000 f85e 	bl	8012740 <__swbuf_r>
 8012684:	3001      	adds	r0, #1
 8012686:	d1c9      	bne.n	801261c <_puts_r+0x30>
 8012688:	e7e9      	b.n	801265e <_puts_r+0x72>
 801268a:	6823      	ldr	r3, [r4, #0]
 801268c:	200a      	movs	r0, #10
 801268e:	1c5a      	adds	r2, r3, #1
 8012690:	6022      	str	r2, [r4, #0]
 8012692:	7018      	strb	r0, [r3, #0]
 8012694:	e7e5      	b.n	8012662 <_puts_r+0x76>
 8012696:	bf00      	nop
 8012698:	0801641c 	.word	0x0801641c
 801269c:	0801643c 	.word	0x0801643c
 80126a0:	080163fc 	.word	0x080163fc

080126a4 <puts>:
 80126a4:	4b02      	ldr	r3, [pc, #8]	; (80126b0 <puts+0xc>)
 80126a6:	4601      	mov	r1, r0
 80126a8:	6818      	ldr	r0, [r3, #0]
 80126aa:	f7ff bf9f 	b.w	80125ec <_puts_r>
 80126ae:	bf00      	nop
 80126b0:	20000024 	.word	0x20000024

080126b4 <_sbrk_r>:
 80126b4:	b538      	push	{r3, r4, r5, lr}
 80126b6:	4c06      	ldr	r4, [pc, #24]	; (80126d0 <_sbrk_r+0x1c>)
 80126b8:	2300      	movs	r3, #0
 80126ba:	4605      	mov	r5, r0
 80126bc:	4608      	mov	r0, r1
 80126be:	6023      	str	r3, [r4, #0]
 80126c0:	f7f3 f9bc 	bl	8005a3c <_sbrk>
 80126c4:	1c43      	adds	r3, r0, #1
 80126c6:	d102      	bne.n	80126ce <_sbrk_r+0x1a>
 80126c8:	6823      	ldr	r3, [r4, #0]
 80126ca:	b103      	cbz	r3, 80126ce <_sbrk_r+0x1a>
 80126cc:	602b      	str	r3, [r5, #0]
 80126ce:	bd38      	pop	{r3, r4, r5, pc}
 80126d0:	200062bc 	.word	0x200062bc

080126d4 <siprintf>:
 80126d4:	b40e      	push	{r1, r2, r3}
 80126d6:	b500      	push	{lr}
 80126d8:	b09c      	sub	sp, #112	; 0x70
 80126da:	ab1d      	add	r3, sp, #116	; 0x74
 80126dc:	9002      	str	r0, [sp, #8]
 80126de:	9006      	str	r0, [sp, #24]
 80126e0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80126e4:	4809      	ldr	r0, [pc, #36]	; (801270c <siprintf+0x38>)
 80126e6:	9107      	str	r1, [sp, #28]
 80126e8:	9104      	str	r1, [sp, #16]
 80126ea:	4909      	ldr	r1, [pc, #36]	; (8012710 <siprintf+0x3c>)
 80126ec:	f853 2b04 	ldr.w	r2, [r3], #4
 80126f0:	9105      	str	r1, [sp, #20]
 80126f2:	6800      	ldr	r0, [r0, #0]
 80126f4:	9301      	str	r3, [sp, #4]
 80126f6:	a902      	add	r1, sp, #8
 80126f8:	f001 fc58 	bl	8013fac <_svfiprintf_r>
 80126fc:	9b02      	ldr	r3, [sp, #8]
 80126fe:	2200      	movs	r2, #0
 8012700:	701a      	strb	r2, [r3, #0]
 8012702:	b01c      	add	sp, #112	; 0x70
 8012704:	f85d eb04 	ldr.w	lr, [sp], #4
 8012708:	b003      	add	sp, #12
 801270a:	4770      	bx	lr
 801270c:	20000024 	.word	0x20000024
 8012710:	ffff0208 	.word	0xffff0208

08012714 <strncpy>:
 8012714:	b570      	push	{r4, r5, r6, lr}
 8012716:	3901      	subs	r1, #1
 8012718:	4604      	mov	r4, r0
 801271a:	b902      	cbnz	r2, 801271e <strncpy+0xa>
 801271c:	bd70      	pop	{r4, r5, r6, pc}
 801271e:	4623      	mov	r3, r4
 8012720:	f811 5f01 	ldrb.w	r5, [r1, #1]!
 8012724:	f803 5b01 	strb.w	r5, [r3], #1
 8012728:	1e56      	subs	r6, r2, #1
 801272a:	b92d      	cbnz	r5, 8012738 <strncpy+0x24>
 801272c:	4414      	add	r4, r2
 801272e:	42a3      	cmp	r3, r4
 8012730:	d0f4      	beq.n	801271c <strncpy+0x8>
 8012732:	f803 5b01 	strb.w	r5, [r3], #1
 8012736:	e7fa      	b.n	801272e <strncpy+0x1a>
 8012738:	461c      	mov	r4, r3
 801273a:	4632      	mov	r2, r6
 801273c:	e7ed      	b.n	801271a <strncpy+0x6>
	...

08012740 <__swbuf_r>:
 8012740:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012742:	460e      	mov	r6, r1
 8012744:	4614      	mov	r4, r2
 8012746:	4605      	mov	r5, r0
 8012748:	b118      	cbz	r0, 8012752 <__swbuf_r+0x12>
 801274a:	6983      	ldr	r3, [r0, #24]
 801274c:	b90b      	cbnz	r3, 8012752 <__swbuf_r+0x12>
 801274e:	f000 ffeb 	bl	8013728 <__sinit>
 8012752:	4b21      	ldr	r3, [pc, #132]	; (80127d8 <__swbuf_r+0x98>)
 8012754:	429c      	cmp	r4, r3
 8012756:	d12a      	bne.n	80127ae <__swbuf_r+0x6e>
 8012758:	686c      	ldr	r4, [r5, #4]
 801275a:	69a3      	ldr	r3, [r4, #24]
 801275c:	60a3      	str	r3, [r4, #8]
 801275e:	89a3      	ldrh	r3, [r4, #12]
 8012760:	071a      	lsls	r2, r3, #28
 8012762:	d52e      	bpl.n	80127c2 <__swbuf_r+0x82>
 8012764:	6923      	ldr	r3, [r4, #16]
 8012766:	b363      	cbz	r3, 80127c2 <__swbuf_r+0x82>
 8012768:	6923      	ldr	r3, [r4, #16]
 801276a:	6820      	ldr	r0, [r4, #0]
 801276c:	1ac0      	subs	r0, r0, r3
 801276e:	6963      	ldr	r3, [r4, #20]
 8012770:	b2f6      	uxtb	r6, r6
 8012772:	4283      	cmp	r3, r0
 8012774:	4637      	mov	r7, r6
 8012776:	dc04      	bgt.n	8012782 <__swbuf_r+0x42>
 8012778:	4621      	mov	r1, r4
 801277a:	4628      	mov	r0, r5
 801277c:	f000 ff6a 	bl	8013654 <_fflush_r>
 8012780:	bb28      	cbnz	r0, 80127ce <__swbuf_r+0x8e>
 8012782:	68a3      	ldr	r3, [r4, #8]
 8012784:	3b01      	subs	r3, #1
 8012786:	60a3      	str	r3, [r4, #8]
 8012788:	6823      	ldr	r3, [r4, #0]
 801278a:	1c5a      	adds	r2, r3, #1
 801278c:	6022      	str	r2, [r4, #0]
 801278e:	701e      	strb	r6, [r3, #0]
 8012790:	6963      	ldr	r3, [r4, #20]
 8012792:	3001      	adds	r0, #1
 8012794:	4283      	cmp	r3, r0
 8012796:	d004      	beq.n	80127a2 <__swbuf_r+0x62>
 8012798:	89a3      	ldrh	r3, [r4, #12]
 801279a:	07db      	lsls	r3, r3, #31
 801279c:	d519      	bpl.n	80127d2 <__swbuf_r+0x92>
 801279e:	2e0a      	cmp	r6, #10
 80127a0:	d117      	bne.n	80127d2 <__swbuf_r+0x92>
 80127a2:	4621      	mov	r1, r4
 80127a4:	4628      	mov	r0, r5
 80127a6:	f000 ff55 	bl	8013654 <_fflush_r>
 80127aa:	b190      	cbz	r0, 80127d2 <__swbuf_r+0x92>
 80127ac:	e00f      	b.n	80127ce <__swbuf_r+0x8e>
 80127ae:	4b0b      	ldr	r3, [pc, #44]	; (80127dc <__swbuf_r+0x9c>)
 80127b0:	429c      	cmp	r4, r3
 80127b2:	d101      	bne.n	80127b8 <__swbuf_r+0x78>
 80127b4:	68ac      	ldr	r4, [r5, #8]
 80127b6:	e7d0      	b.n	801275a <__swbuf_r+0x1a>
 80127b8:	4b09      	ldr	r3, [pc, #36]	; (80127e0 <__swbuf_r+0xa0>)
 80127ba:	429c      	cmp	r4, r3
 80127bc:	bf08      	it	eq
 80127be:	68ec      	ldreq	r4, [r5, #12]
 80127c0:	e7cb      	b.n	801275a <__swbuf_r+0x1a>
 80127c2:	4621      	mov	r1, r4
 80127c4:	4628      	mov	r0, r5
 80127c6:	f000 f80d 	bl	80127e4 <__swsetup_r>
 80127ca:	2800      	cmp	r0, #0
 80127cc:	d0cc      	beq.n	8012768 <__swbuf_r+0x28>
 80127ce:	f04f 37ff 	mov.w	r7, #4294967295
 80127d2:	4638      	mov	r0, r7
 80127d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80127d6:	bf00      	nop
 80127d8:	0801641c 	.word	0x0801641c
 80127dc:	0801643c 	.word	0x0801643c
 80127e0:	080163fc 	.word	0x080163fc

080127e4 <__swsetup_r>:
 80127e4:	4b32      	ldr	r3, [pc, #200]	; (80128b0 <__swsetup_r+0xcc>)
 80127e6:	b570      	push	{r4, r5, r6, lr}
 80127e8:	681d      	ldr	r5, [r3, #0]
 80127ea:	4606      	mov	r6, r0
 80127ec:	460c      	mov	r4, r1
 80127ee:	b125      	cbz	r5, 80127fa <__swsetup_r+0x16>
 80127f0:	69ab      	ldr	r3, [r5, #24]
 80127f2:	b913      	cbnz	r3, 80127fa <__swsetup_r+0x16>
 80127f4:	4628      	mov	r0, r5
 80127f6:	f000 ff97 	bl	8013728 <__sinit>
 80127fa:	4b2e      	ldr	r3, [pc, #184]	; (80128b4 <__swsetup_r+0xd0>)
 80127fc:	429c      	cmp	r4, r3
 80127fe:	d10f      	bne.n	8012820 <__swsetup_r+0x3c>
 8012800:	686c      	ldr	r4, [r5, #4]
 8012802:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012806:	b29a      	uxth	r2, r3
 8012808:	0715      	lsls	r5, r2, #28
 801280a:	d42c      	bmi.n	8012866 <__swsetup_r+0x82>
 801280c:	06d0      	lsls	r0, r2, #27
 801280e:	d411      	bmi.n	8012834 <__swsetup_r+0x50>
 8012810:	2209      	movs	r2, #9
 8012812:	6032      	str	r2, [r6, #0]
 8012814:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012818:	81a3      	strh	r3, [r4, #12]
 801281a:	f04f 30ff 	mov.w	r0, #4294967295
 801281e:	e03e      	b.n	801289e <__swsetup_r+0xba>
 8012820:	4b25      	ldr	r3, [pc, #148]	; (80128b8 <__swsetup_r+0xd4>)
 8012822:	429c      	cmp	r4, r3
 8012824:	d101      	bne.n	801282a <__swsetup_r+0x46>
 8012826:	68ac      	ldr	r4, [r5, #8]
 8012828:	e7eb      	b.n	8012802 <__swsetup_r+0x1e>
 801282a:	4b24      	ldr	r3, [pc, #144]	; (80128bc <__swsetup_r+0xd8>)
 801282c:	429c      	cmp	r4, r3
 801282e:	bf08      	it	eq
 8012830:	68ec      	ldreq	r4, [r5, #12]
 8012832:	e7e6      	b.n	8012802 <__swsetup_r+0x1e>
 8012834:	0751      	lsls	r1, r2, #29
 8012836:	d512      	bpl.n	801285e <__swsetup_r+0x7a>
 8012838:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801283a:	b141      	cbz	r1, 801284e <__swsetup_r+0x6a>
 801283c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8012840:	4299      	cmp	r1, r3
 8012842:	d002      	beq.n	801284a <__swsetup_r+0x66>
 8012844:	4630      	mov	r0, r6
 8012846:	f7ff f9b5 	bl	8011bb4 <_free_r>
 801284a:	2300      	movs	r3, #0
 801284c:	6363      	str	r3, [r4, #52]	; 0x34
 801284e:	89a3      	ldrh	r3, [r4, #12]
 8012850:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8012854:	81a3      	strh	r3, [r4, #12]
 8012856:	2300      	movs	r3, #0
 8012858:	6063      	str	r3, [r4, #4]
 801285a:	6923      	ldr	r3, [r4, #16]
 801285c:	6023      	str	r3, [r4, #0]
 801285e:	89a3      	ldrh	r3, [r4, #12]
 8012860:	f043 0308 	orr.w	r3, r3, #8
 8012864:	81a3      	strh	r3, [r4, #12]
 8012866:	6923      	ldr	r3, [r4, #16]
 8012868:	b94b      	cbnz	r3, 801287e <__swsetup_r+0x9a>
 801286a:	89a3      	ldrh	r3, [r4, #12]
 801286c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8012870:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8012874:	d003      	beq.n	801287e <__swsetup_r+0x9a>
 8012876:	4621      	mov	r1, r4
 8012878:	4630      	mov	r0, r6
 801287a:	f001 f811 	bl	80138a0 <__smakebuf_r>
 801287e:	89a2      	ldrh	r2, [r4, #12]
 8012880:	f012 0301 	ands.w	r3, r2, #1
 8012884:	d00c      	beq.n	80128a0 <__swsetup_r+0xbc>
 8012886:	2300      	movs	r3, #0
 8012888:	60a3      	str	r3, [r4, #8]
 801288a:	6963      	ldr	r3, [r4, #20]
 801288c:	425b      	negs	r3, r3
 801288e:	61a3      	str	r3, [r4, #24]
 8012890:	6923      	ldr	r3, [r4, #16]
 8012892:	b953      	cbnz	r3, 80128aa <__swsetup_r+0xc6>
 8012894:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012898:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 801289c:	d1ba      	bne.n	8012814 <__swsetup_r+0x30>
 801289e:	bd70      	pop	{r4, r5, r6, pc}
 80128a0:	0792      	lsls	r2, r2, #30
 80128a2:	bf58      	it	pl
 80128a4:	6963      	ldrpl	r3, [r4, #20]
 80128a6:	60a3      	str	r3, [r4, #8]
 80128a8:	e7f2      	b.n	8012890 <__swsetup_r+0xac>
 80128aa:	2000      	movs	r0, #0
 80128ac:	e7f7      	b.n	801289e <__swsetup_r+0xba>
 80128ae:	bf00      	nop
 80128b0:	20000024 	.word	0x20000024
 80128b4:	0801641c 	.word	0x0801641c
 80128b8:	0801643c 	.word	0x0801643c
 80128bc:	080163fc 	.word	0x080163fc

080128c0 <quorem>:
 80128c0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80128c4:	6903      	ldr	r3, [r0, #16]
 80128c6:	690c      	ldr	r4, [r1, #16]
 80128c8:	42a3      	cmp	r3, r4
 80128ca:	4680      	mov	r8, r0
 80128cc:	f2c0 8082 	blt.w	80129d4 <quorem+0x114>
 80128d0:	3c01      	subs	r4, #1
 80128d2:	f101 0714 	add.w	r7, r1, #20
 80128d6:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 80128da:	f100 0614 	add.w	r6, r0, #20
 80128de:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 80128e2:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 80128e6:	eb06 030c 	add.w	r3, r6, ip
 80128ea:	3501      	adds	r5, #1
 80128ec:	eb07 090c 	add.w	r9, r7, ip
 80128f0:	9301      	str	r3, [sp, #4]
 80128f2:	fbb0 f5f5 	udiv	r5, r0, r5
 80128f6:	b395      	cbz	r5, 801295e <quorem+0x9e>
 80128f8:	f04f 0a00 	mov.w	sl, #0
 80128fc:	4638      	mov	r0, r7
 80128fe:	46b6      	mov	lr, r6
 8012900:	46d3      	mov	fp, sl
 8012902:	f850 2b04 	ldr.w	r2, [r0], #4
 8012906:	b293      	uxth	r3, r2
 8012908:	fb05 a303 	mla	r3, r5, r3, sl
 801290c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8012910:	b29b      	uxth	r3, r3
 8012912:	ebab 0303 	sub.w	r3, fp, r3
 8012916:	0c12      	lsrs	r2, r2, #16
 8012918:	f8de b000 	ldr.w	fp, [lr]
 801291c:	fb05 a202 	mla	r2, r5, r2, sl
 8012920:	fa13 f38b 	uxtah	r3, r3, fp
 8012924:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8012928:	fa1f fb82 	uxth.w	fp, r2
 801292c:	f8de 2000 	ldr.w	r2, [lr]
 8012930:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8012934:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8012938:	b29b      	uxth	r3, r3
 801293a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801293e:	4581      	cmp	r9, r0
 8012940:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8012944:	f84e 3b04 	str.w	r3, [lr], #4
 8012948:	d2db      	bcs.n	8012902 <quorem+0x42>
 801294a:	f856 300c 	ldr.w	r3, [r6, ip]
 801294e:	b933      	cbnz	r3, 801295e <quorem+0x9e>
 8012950:	9b01      	ldr	r3, [sp, #4]
 8012952:	3b04      	subs	r3, #4
 8012954:	429e      	cmp	r6, r3
 8012956:	461a      	mov	r2, r3
 8012958:	d330      	bcc.n	80129bc <quorem+0xfc>
 801295a:	f8c8 4010 	str.w	r4, [r8, #16]
 801295e:	4640      	mov	r0, r8
 8012960:	f001 f9f6 	bl	8013d50 <__mcmp>
 8012964:	2800      	cmp	r0, #0
 8012966:	db25      	blt.n	80129b4 <quorem+0xf4>
 8012968:	3501      	adds	r5, #1
 801296a:	4630      	mov	r0, r6
 801296c:	f04f 0c00 	mov.w	ip, #0
 8012970:	f857 2b04 	ldr.w	r2, [r7], #4
 8012974:	f8d0 e000 	ldr.w	lr, [r0]
 8012978:	b293      	uxth	r3, r2
 801297a:	ebac 0303 	sub.w	r3, ip, r3
 801297e:	0c12      	lsrs	r2, r2, #16
 8012980:	fa13 f38e 	uxtah	r3, r3, lr
 8012984:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8012988:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801298c:	b29b      	uxth	r3, r3
 801298e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8012992:	45b9      	cmp	r9, r7
 8012994:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8012998:	f840 3b04 	str.w	r3, [r0], #4
 801299c:	d2e8      	bcs.n	8012970 <quorem+0xb0>
 801299e:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 80129a2:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 80129a6:	b92a      	cbnz	r2, 80129b4 <quorem+0xf4>
 80129a8:	3b04      	subs	r3, #4
 80129aa:	429e      	cmp	r6, r3
 80129ac:	461a      	mov	r2, r3
 80129ae:	d30b      	bcc.n	80129c8 <quorem+0x108>
 80129b0:	f8c8 4010 	str.w	r4, [r8, #16]
 80129b4:	4628      	mov	r0, r5
 80129b6:	b003      	add	sp, #12
 80129b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80129bc:	6812      	ldr	r2, [r2, #0]
 80129be:	3b04      	subs	r3, #4
 80129c0:	2a00      	cmp	r2, #0
 80129c2:	d1ca      	bne.n	801295a <quorem+0x9a>
 80129c4:	3c01      	subs	r4, #1
 80129c6:	e7c5      	b.n	8012954 <quorem+0x94>
 80129c8:	6812      	ldr	r2, [r2, #0]
 80129ca:	3b04      	subs	r3, #4
 80129cc:	2a00      	cmp	r2, #0
 80129ce:	d1ef      	bne.n	80129b0 <quorem+0xf0>
 80129d0:	3c01      	subs	r4, #1
 80129d2:	e7ea      	b.n	80129aa <quorem+0xea>
 80129d4:	2000      	movs	r0, #0
 80129d6:	e7ee      	b.n	80129b6 <quorem+0xf6>

080129d8 <_dtoa_r>:
 80129d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80129dc:	ec57 6b10 	vmov	r6, r7, d0
 80129e0:	b097      	sub	sp, #92	; 0x5c
 80129e2:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80129e4:	9106      	str	r1, [sp, #24]
 80129e6:	4604      	mov	r4, r0
 80129e8:	920b      	str	r2, [sp, #44]	; 0x2c
 80129ea:	9312      	str	r3, [sp, #72]	; 0x48
 80129ec:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80129f0:	e9cd 6700 	strd	r6, r7, [sp]
 80129f4:	b93d      	cbnz	r5, 8012a06 <_dtoa_r+0x2e>
 80129f6:	2010      	movs	r0, #16
 80129f8:	f7ff f8c0 	bl	8011b7c <malloc>
 80129fc:	6260      	str	r0, [r4, #36]	; 0x24
 80129fe:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8012a02:	6005      	str	r5, [r0, #0]
 8012a04:	60c5      	str	r5, [r0, #12]
 8012a06:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8012a08:	6819      	ldr	r1, [r3, #0]
 8012a0a:	b151      	cbz	r1, 8012a22 <_dtoa_r+0x4a>
 8012a0c:	685a      	ldr	r2, [r3, #4]
 8012a0e:	604a      	str	r2, [r1, #4]
 8012a10:	2301      	movs	r3, #1
 8012a12:	4093      	lsls	r3, r2
 8012a14:	608b      	str	r3, [r1, #8]
 8012a16:	4620      	mov	r0, r4
 8012a18:	f000 ffb8 	bl	801398c <_Bfree>
 8012a1c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8012a1e:	2200      	movs	r2, #0
 8012a20:	601a      	str	r2, [r3, #0]
 8012a22:	1e3b      	subs	r3, r7, #0
 8012a24:	bfbb      	ittet	lt
 8012a26:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8012a2a:	9301      	strlt	r3, [sp, #4]
 8012a2c:	2300      	movge	r3, #0
 8012a2e:	2201      	movlt	r2, #1
 8012a30:	bfac      	ite	ge
 8012a32:	f8c8 3000 	strge.w	r3, [r8]
 8012a36:	f8c8 2000 	strlt.w	r2, [r8]
 8012a3a:	4baf      	ldr	r3, [pc, #700]	; (8012cf8 <_dtoa_r+0x320>)
 8012a3c:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8012a40:	ea33 0308 	bics.w	r3, r3, r8
 8012a44:	d114      	bne.n	8012a70 <_dtoa_r+0x98>
 8012a46:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8012a48:	f242 730f 	movw	r3, #9999	; 0x270f
 8012a4c:	6013      	str	r3, [r2, #0]
 8012a4e:	9b00      	ldr	r3, [sp, #0]
 8012a50:	b923      	cbnz	r3, 8012a5c <_dtoa_r+0x84>
 8012a52:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8012a56:	2800      	cmp	r0, #0
 8012a58:	f000 8542 	beq.w	80134e0 <_dtoa_r+0xb08>
 8012a5c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8012a5e:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 8012d0c <_dtoa_r+0x334>
 8012a62:	2b00      	cmp	r3, #0
 8012a64:	f000 8544 	beq.w	80134f0 <_dtoa_r+0xb18>
 8012a68:	f10b 0303 	add.w	r3, fp, #3
 8012a6c:	f000 bd3e 	b.w	80134ec <_dtoa_r+0xb14>
 8012a70:	e9dd 6700 	ldrd	r6, r7, [sp]
 8012a74:	2200      	movs	r2, #0
 8012a76:	2300      	movs	r3, #0
 8012a78:	4630      	mov	r0, r6
 8012a7a:	4639      	mov	r1, r7
 8012a7c:	f7ed fffc 	bl	8000a78 <__aeabi_dcmpeq>
 8012a80:	4681      	mov	r9, r0
 8012a82:	b168      	cbz	r0, 8012aa0 <_dtoa_r+0xc8>
 8012a84:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8012a86:	2301      	movs	r3, #1
 8012a88:	6013      	str	r3, [r2, #0]
 8012a8a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8012a8c:	2b00      	cmp	r3, #0
 8012a8e:	f000 8524 	beq.w	80134da <_dtoa_r+0xb02>
 8012a92:	4b9a      	ldr	r3, [pc, #616]	; (8012cfc <_dtoa_r+0x324>)
 8012a94:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8012a96:	f103 3bff 	add.w	fp, r3, #4294967295
 8012a9a:	6013      	str	r3, [r2, #0]
 8012a9c:	f000 bd28 	b.w	80134f0 <_dtoa_r+0xb18>
 8012aa0:	aa14      	add	r2, sp, #80	; 0x50
 8012aa2:	a915      	add	r1, sp, #84	; 0x54
 8012aa4:	ec47 6b10 	vmov	d0, r6, r7
 8012aa8:	4620      	mov	r0, r4
 8012aaa:	f001 f9c8 	bl	8013e3e <__d2b>
 8012aae:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8012ab2:	9004      	str	r0, [sp, #16]
 8012ab4:	2d00      	cmp	r5, #0
 8012ab6:	d07c      	beq.n	8012bb2 <_dtoa_r+0x1da>
 8012ab8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8012abc:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8012ac0:	46b2      	mov	sl, r6
 8012ac2:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 8012ac6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8012aca:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 8012ace:	2200      	movs	r2, #0
 8012ad0:	4b8b      	ldr	r3, [pc, #556]	; (8012d00 <_dtoa_r+0x328>)
 8012ad2:	4650      	mov	r0, sl
 8012ad4:	4659      	mov	r1, fp
 8012ad6:	f7ed fbaf 	bl	8000238 <__aeabi_dsub>
 8012ada:	a381      	add	r3, pc, #516	; (adr r3, 8012ce0 <_dtoa_r+0x308>)
 8012adc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012ae0:	f7ed fd62 	bl	80005a8 <__aeabi_dmul>
 8012ae4:	a380      	add	r3, pc, #512	; (adr r3, 8012ce8 <_dtoa_r+0x310>)
 8012ae6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012aea:	f7ed fba7 	bl	800023c <__adddf3>
 8012aee:	4606      	mov	r6, r0
 8012af0:	4628      	mov	r0, r5
 8012af2:	460f      	mov	r7, r1
 8012af4:	f7ed fcee 	bl	80004d4 <__aeabi_i2d>
 8012af8:	a37d      	add	r3, pc, #500	; (adr r3, 8012cf0 <_dtoa_r+0x318>)
 8012afa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012afe:	f7ed fd53 	bl	80005a8 <__aeabi_dmul>
 8012b02:	4602      	mov	r2, r0
 8012b04:	460b      	mov	r3, r1
 8012b06:	4630      	mov	r0, r6
 8012b08:	4639      	mov	r1, r7
 8012b0a:	f7ed fb97 	bl	800023c <__adddf3>
 8012b0e:	4606      	mov	r6, r0
 8012b10:	460f      	mov	r7, r1
 8012b12:	f7ed fff9 	bl	8000b08 <__aeabi_d2iz>
 8012b16:	2200      	movs	r2, #0
 8012b18:	4682      	mov	sl, r0
 8012b1a:	2300      	movs	r3, #0
 8012b1c:	4630      	mov	r0, r6
 8012b1e:	4639      	mov	r1, r7
 8012b20:	f7ed ffb4 	bl	8000a8c <__aeabi_dcmplt>
 8012b24:	b148      	cbz	r0, 8012b3a <_dtoa_r+0x162>
 8012b26:	4650      	mov	r0, sl
 8012b28:	f7ed fcd4 	bl	80004d4 <__aeabi_i2d>
 8012b2c:	4632      	mov	r2, r6
 8012b2e:	463b      	mov	r3, r7
 8012b30:	f7ed ffa2 	bl	8000a78 <__aeabi_dcmpeq>
 8012b34:	b908      	cbnz	r0, 8012b3a <_dtoa_r+0x162>
 8012b36:	f10a 3aff 	add.w	sl, sl, #4294967295
 8012b3a:	f1ba 0f16 	cmp.w	sl, #22
 8012b3e:	d859      	bhi.n	8012bf4 <_dtoa_r+0x21c>
 8012b40:	4970      	ldr	r1, [pc, #448]	; (8012d04 <_dtoa_r+0x32c>)
 8012b42:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8012b46:	e9dd 2300 	ldrd	r2, r3, [sp]
 8012b4a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012b4e:	f7ed ffbb 	bl	8000ac8 <__aeabi_dcmpgt>
 8012b52:	2800      	cmp	r0, #0
 8012b54:	d050      	beq.n	8012bf8 <_dtoa_r+0x220>
 8012b56:	f10a 3aff 	add.w	sl, sl, #4294967295
 8012b5a:	2300      	movs	r3, #0
 8012b5c:	930f      	str	r3, [sp, #60]	; 0x3c
 8012b5e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8012b60:	1b5d      	subs	r5, r3, r5
 8012b62:	f1b5 0801 	subs.w	r8, r5, #1
 8012b66:	bf49      	itett	mi
 8012b68:	f1c5 0301 	rsbmi	r3, r5, #1
 8012b6c:	2300      	movpl	r3, #0
 8012b6e:	9305      	strmi	r3, [sp, #20]
 8012b70:	f04f 0800 	movmi.w	r8, #0
 8012b74:	bf58      	it	pl
 8012b76:	9305      	strpl	r3, [sp, #20]
 8012b78:	f1ba 0f00 	cmp.w	sl, #0
 8012b7c:	db3e      	blt.n	8012bfc <_dtoa_r+0x224>
 8012b7e:	2300      	movs	r3, #0
 8012b80:	44d0      	add	r8, sl
 8012b82:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8012b86:	9307      	str	r3, [sp, #28]
 8012b88:	9b06      	ldr	r3, [sp, #24]
 8012b8a:	2b09      	cmp	r3, #9
 8012b8c:	f200 8090 	bhi.w	8012cb0 <_dtoa_r+0x2d8>
 8012b90:	2b05      	cmp	r3, #5
 8012b92:	bfc4      	itt	gt
 8012b94:	3b04      	subgt	r3, #4
 8012b96:	9306      	strgt	r3, [sp, #24]
 8012b98:	9b06      	ldr	r3, [sp, #24]
 8012b9a:	f1a3 0302 	sub.w	r3, r3, #2
 8012b9e:	bfcc      	ite	gt
 8012ba0:	2500      	movgt	r5, #0
 8012ba2:	2501      	movle	r5, #1
 8012ba4:	2b03      	cmp	r3, #3
 8012ba6:	f200 808f 	bhi.w	8012cc8 <_dtoa_r+0x2f0>
 8012baa:	e8df f003 	tbb	[pc, r3]
 8012bae:	7f7d      	.short	0x7f7d
 8012bb0:	7131      	.short	0x7131
 8012bb2:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 8012bb6:	441d      	add	r5, r3
 8012bb8:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8012bbc:	2820      	cmp	r0, #32
 8012bbe:	dd13      	ble.n	8012be8 <_dtoa_r+0x210>
 8012bc0:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8012bc4:	9b00      	ldr	r3, [sp, #0]
 8012bc6:	fa08 f800 	lsl.w	r8, r8, r0
 8012bca:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8012bce:	fa23 f000 	lsr.w	r0, r3, r0
 8012bd2:	ea48 0000 	orr.w	r0, r8, r0
 8012bd6:	f7ed fc6d 	bl	80004b4 <__aeabi_ui2d>
 8012bda:	2301      	movs	r3, #1
 8012bdc:	4682      	mov	sl, r0
 8012bde:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 8012be2:	3d01      	subs	r5, #1
 8012be4:	9313      	str	r3, [sp, #76]	; 0x4c
 8012be6:	e772      	b.n	8012ace <_dtoa_r+0xf6>
 8012be8:	9b00      	ldr	r3, [sp, #0]
 8012bea:	f1c0 0020 	rsb	r0, r0, #32
 8012bee:	fa03 f000 	lsl.w	r0, r3, r0
 8012bf2:	e7f0      	b.n	8012bd6 <_dtoa_r+0x1fe>
 8012bf4:	2301      	movs	r3, #1
 8012bf6:	e7b1      	b.n	8012b5c <_dtoa_r+0x184>
 8012bf8:	900f      	str	r0, [sp, #60]	; 0x3c
 8012bfa:	e7b0      	b.n	8012b5e <_dtoa_r+0x186>
 8012bfc:	9b05      	ldr	r3, [sp, #20]
 8012bfe:	eba3 030a 	sub.w	r3, r3, sl
 8012c02:	9305      	str	r3, [sp, #20]
 8012c04:	f1ca 0300 	rsb	r3, sl, #0
 8012c08:	9307      	str	r3, [sp, #28]
 8012c0a:	2300      	movs	r3, #0
 8012c0c:	930e      	str	r3, [sp, #56]	; 0x38
 8012c0e:	e7bb      	b.n	8012b88 <_dtoa_r+0x1b0>
 8012c10:	2301      	movs	r3, #1
 8012c12:	930a      	str	r3, [sp, #40]	; 0x28
 8012c14:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012c16:	2b00      	cmp	r3, #0
 8012c18:	dd59      	ble.n	8012cce <_dtoa_r+0x2f6>
 8012c1a:	9302      	str	r3, [sp, #8]
 8012c1c:	4699      	mov	r9, r3
 8012c1e:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8012c20:	2200      	movs	r2, #0
 8012c22:	6072      	str	r2, [r6, #4]
 8012c24:	2204      	movs	r2, #4
 8012c26:	f102 0014 	add.w	r0, r2, #20
 8012c2a:	4298      	cmp	r0, r3
 8012c2c:	6871      	ldr	r1, [r6, #4]
 8012c2e:	d953      	bls.n	8012cd8 <_dtoa_r+0x300>
 8012c30:	4620      	mov	r0, r4
 8012c32:	f000 fe77 	bl	8013924 <_Balloc>
 8012c36:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8012c38:	6030      	str	r0, [r6, #0]
 8012c3a:	f1b9 0f0e 	cmp.w	r9, #14
 8012c3e:	f8d3 b000 	ldr.w	fp, [r3]
 8012c42:	f200 80e6 	bhi.w	8012e12 <_dtoa_r+0x43a>
 8012c46:	2d00      	cmp	r5, #0
 8012c48:	f000 80e3 	beq.w	8012e12 <_dtoa_r+0x43a>
 8012c4c:	ed9d 7b00 	vldr	d7, [sp]
 8012c50:	f1ba 0f00 	cmp.w	sl, #0
 8012c54:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8012c58:	dd74      	ble.n	8012d44 <_dtoa_r+0x36c>
 8012c5a:	4a2a      	ldr	r2, [pc, #168]	; (8012d04 <_dtoa_r+0x32c>)
 8012c5c:	f00a 030f 	and.w	r3, sl, #15
 8012c60:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8012c64:	ed93 7b00 	vldr	d7, [r3]
 8012c68:	ea4f 162a 	mov.w	r6, sl, asr #4
 8012c6c:	06f0      	lsls	r0, r6, #27
 8012c6e:	ed8d 7b08 	vstr	d7, [sp, #32]
 8012c72:	d565      	bpl.n	8012d40 <_dtoa_r+0x368>
 8012c74:	4b24      	ldr	r3, [pc, #144]	; (8012d08 <_dtoa_r+0x330>)
 8012c76:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8012c7a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8012c7e:	f7ed fdbd 	bl	80007fc <__aeabi_ddiv>
 8012c82:	e9cd 0100 	strd	r0, r1, [sp]
 8012c86:	f006 060f 	and.w	r6, r6, #15
 8012c8a:	2503      	movs	r5, #3
 8012c8c:	4f1e      	ldr	r7, [pc, #120]	; (8012d08 <_dtoa_r+0x330>)
 8012c8e:	e04c      	b.n	8012d2a <_dtoa_r+0x352>
 8012c90:	2301      	movs	r3, #1
 8012c92:	930a      	str	r3, [sp, #40]	; 0x28
 8012c94:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012c96:	4453      	add	r3, sl
 8012c98:	f103 0901 	add.w	r9, r3, #1
 8012c9c:	9302      	str	r3, [sp, #8]
 8012c9e:	464b      	mov	r3, r9
 8012ca0:	2b01      	cmp	r3, #1
 8012ca2:	bfb8      	it	lt
 8012ca4:	2301      	movlt	r3, #1
 8012ca6:	e7ba      	b.n	8012c1e <_dtoa_r+0x246>
 8012ca8:	2300      	movs	r3, #0
 8012caa:	e7b2      	b.n	8012c12 <_dtoa_r+0x23a>
 8012cac:	2300      	movs	r3, #0
 8012cae:	e7f0      	b.n	8012c92 <_dtoa_r+0x2ba>
 8012cb0:	2501      	movs	r5, #1
 8012cb2:	2300      	movs	r3, #0
 8012cb4:	9306      	str	r3, [sp, #24]
 8012cb6:	950a      	str	r5, [sp, #40]	; 0x28
 8012cb8:	f04f 33ff 	mov.w	r3, #4294967295
 8012cbc:	9302      	str	r3, [sp, #8]
 8012cbe:	4699      	mov	r9, r3
 8012cc0:	2200      	movs	r2, #0
 8012cc2:	2312      	movs	r3, #18
 8012cc4:	920b      	str	r2, [sp, #44]	; 0x2c
 8012cc6:	e7aa      	b.n	8012c1e <_dtoa_r+0x246>
 8012cc8:	2301      	movs	r3, #1
 8012cca:	930a      	str	r3, [sp, #40]	; 0x28
 8012ccc:	e7f4      	b.n	8012cb8 <_dtoa_r+0x2e0>
 8012cce:	2301      	movs	r3, #1
 8012cd0:	9302      	str	r3, [sp, #8]
 8012cd2:	4699      	mov	r9, r3
 8012cd4:	461a      	mov	r2, r3
 8012cd6:	e7f5      	b.n	8012cc4 <_dtoa_r+0x2ec>
 8012cd8:	3101      	adds	r1, #1
 8012cda:	6071      	str	r1, [r6, #4]
 8012cdc:	0052      	lsls	r2, r2, #1
 8012cde:	e7a2      	b.n	8012c26 <_dtoa_r+0x24e>
 8012ce0:	636f4361 	.word	0x636f4361
 8012ce4:	3fd287a7 	.word	0x3fd287a7
 8012ce8:	8b60c8b3 	.word	0x8b60c8b3
 8012cec:	3fc68a28 	.word	0x3fc68a28
 8012cf0:	509f79fb 	.word	0x509f79fb
 8012cf4:	3fd34413 	.word	0x3fd34413
 8012cf8:	7ff00000 	.word	0x7ff00000
 8012cfc:	080163c9 	.word	0x080163c9
 8012d00:	3ff80000 	.word	0x3ff80000
 8012d04:	08016488 	.word	0x08016488
 8012d08:	08016460 	.word	0x08016460
 8012d0c:	080163f5 	.word	0x080163f5
 8012d10:	07f1      	lsls	r1, r6, #31
 8012d12:	d508      	bpl.n	8012d26 <_dtoa_r+0x34e>
 8012d14:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8012d18:	e9d7 2300 	ldrd	r2, r3, [r7]
 8012d1c:	f7ed fc44 	bl	80005a8 <__aeabi_dmul>
 8012d20:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8012d24:	3501      	adds	r5, #1
 8012d26:	1076      	asrs	r6, r6, #1
 8012d28:	3708      	adds	r7, #8
 8012d2a:	2e00      	cmp	r6, #0
 8012d2c:	d1f0      	bne.n	8012d10 <_dtoa_r+0x338>
 8012d2e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8012d32:	e9dd 0100 	ldrd	r0, r1, [sp]
 8012d36:	f7ed fd61 	bl	80007fc <__aeabi_ddiv>
 8012d3a:	e9cd 0100 	strd	r0, r1, [sp]
 8012d3e:	e01a      	b.n	8012d76 <_dtoa_r+0x39e>
 8012d40:	2502      	movs	r5, #2
 8012d42:	e7a3      	b.n	8012c8c <_dtoa_r+0x2b4>
 8012d44:	f000 80a0 	beq.w	8012e88 <_dtoa_r+0x4b0>
 8012d48:	f1ca 0600 	rsb	r6, sl, #0
 8012d4c:	4b9f      	ldr	r3, [pc, #636]	; (8012fcc <_dtoa_r+0x5f4>)
 8012d4e:	4fa0      	ldr	r7, [pc, #640]	; (8012fd0 <_dtoa_r+0x5f8>)
 8012d50:	f006 020f 	and.w	r2, r6, #15
 8012d54:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8012d58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012d5c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8012d60:	f7ed fc22 	bl	80005a8 <__aeabi_dmul>
 8012d64:	e9cd 0100 	strd	r0, r1, [sp]
 8012d68:	1136      	asrs	r6, r6, #4
 8012d6a:	2300      	movs	r3, #0
 8012d6c:	2502      	movs	r5, #2
 8012d6e:	2e00      	cmp	r6, #0
 8012d70:	d17f      	bne.n	8012e72 <_dtoa_r+0x49a>
 8012d72:	2b00      	cmp	r3, #0
 8012d74:	d1e1      	bne.n	8012d3a <_dtoa_r+0x362>
 8012d76:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8012d78:	2b00      	cmp	r3, #0
 8012d7a:	f000 8087 	beq.w	8012e8c <_dtoa_r+0x4b4>
 8012d7e:	e9dd 6700 	ldrd	r6, r7, [sp]
 8012d82:	2200      	movs	r2, #0
 8012d84:	4b93      	ldr	r3, [pc, #588]	; (8012fd4 <_dtoa_r+0x5fc>)
 8012d86:	4630      	mov	r0, r6
 8012d88:	4639      	mov	r1, r7
 8012d8a:	f7ed fe7f 	bl	8000a8c <__aeabi_dcmplt>
 8012d8e:	2800      	cmp	r0, #0
 8012d90:	d07c      	beq.n	8012e8c <_dtoa_r+0x4b4>
 8012d92:	f1b9 0f00 	cmp.w	r9, #0
 8012d96:	d079      	beq.n	8012e8c <_dtoa_r+0x4b4>
 8012d98:	9b02      	ldr	r3, [sp, #8]
 8012d9a:	2b00      	cmp	r3, #0
 8012d9c:	dd35      	ble.n	8012e0a <_dtoa_r+0x432>
 8012d9e:	f10a 33ff 	add.w	r3, sl, #4294967295
 8012da2:	9308      	str	r3, [sp, #32]
 8012da4:	4639      	mov	r1, r7
 8012da6:	2200      	movs	r2, #0
 8012da8:	4b8b      	ldr	r3, [pc, #556]	; (8012fd8 <_dtoa_r+0x600>)
 8012daa:	4630      	mov	r0, r6
 8012dac:	f7ed fbfc 	bl	80005a8 <__aeabi_dmul>
 8012db0:	e9cd 0100 	strd	r0, r1, [sp]
 8012db4:	9f02      	ldr	r7, [sp, #8]
 8012db6:	3501      	adds	r5, #1
 8012db8:	4628      	mov	r0, r5
 8012dba:	f7ed fb8b 	bl	80004d4 <__aeabi_i2d>
 8012dbe:	e9dd 2300 	ldrd	r2, r3, [sp]
 8012dc2:	f7ed fbf1 	bl	80005a8 <__aeabi_dmul>
 8012dc6:	2200      	movs	r2, #0
 8012dc8:	4b84      	ldr	r3, [pc, #528]	; (8012fdc <_dtoa_r+0x604>)
 8012dca:	f7ed fa37 	bl	800023c <__adddf3>
 8012dce:	4605      	mov	r5, r0
 8012dd0:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8012dd4:	2f00      	cmp	r7, #0
 8012dd6:	d15d      	bne.n	8012e94 <_dtoa_r+0x4bc>
 8012dd8:	2200      	movs	r2, #0
 8012dda:	4b81      	ldr	r3, [pc, #516]	; (8012fe0 <_dtoa_r+0x608>)
 8012ddc:	e9dd 0100 	ldrd	r0, r1, [sp]
 8012de0:	f7ed fa2a 	bl	8000238 <__aeabi_dsub>
 8012de4:	462a      	mov	r2, r5
 8012de6:	4633      	mov	r3, r6
 8012de8:	e9cd 0100 	strd	r0, r1, [sp]
 8012dec:	f7ed fe6c 	bl	8000ac8 <__aeabi_dcmpgt>
 8012df0:	2800      	cmp	r0, #0
 8012df2:	f040 8288 	bne.w	8013306 <_dtoa_r+0x92e>
 8012df6:	462a      	mov	r2, r5
 8012df8:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8012dfc:	e9dd 0100 	ldrd	r0, r1, [sp]
 8012e00:	f7ed fe44 	bl	8000a8c <__aeabi_dcmplt>
 8012e04:	2800      	cmp	r0, #0
 8012e06:	f040 827c 	bne.w	8013302 <_dtoa_r+0x92a>
 8012e0a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8012e0e:	e9cd 2300 	strd	r2, r3, [sp]
 8012e12:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8012e14:	2b00      	cmp	r3, #0
 8012e16:	f2c0 8150 	blt.w	80130ba <_dtoa_r+0x6e2>
 8012e1a:	f1ba 0f0e 	cmp.w	sl, #14
 8012e1e:	f300 814c 	bgt.w	80130ba <_dtoa_r+0x6e2>
 8012e22:	4b6a      	ldr	r3, [pc, #424]	; (8012fcc <_dtoa_r+0x5f4>)
 8012e24:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8012e28:	ed93 7b00 	vldr	d7, [r3]
 8012e2c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012e2e:	2b00      	cmp	r3, #0
 8012e30:	ed8d 7b02 	vstr	d7, [sp, #8]
 8012e34:	f280 80d8 	bge.w	8012fe8 <_dtoa_r+0x610>
 8012e38:	f1b9 0f00 	cmp.w	r9, #0
 8012e3c:	f300 80d4 	bgt.w	8012fe8 <_dtoa_r+0x610>
 8012e40:	f040 825e 	bne.w	8013300 <_dtoa_r+0x928>
 8012e44:	2200      	movs	r2, #0
 8012e46:	4b66      	ldr	r3, [pc, #408]	; (8012fe0 <_dtoa_r+0x608>)
 8012e48:	ec51 0b17 	vmov	r0, r1, d7
 8012e4c:	f7ed fbac 	bl	80005a8 <__aeabi_dmul>
 8012e50:	e9dd 2300 	ldrd	r2, r3, [sp]
 8012e54:	f7ed fe2e 	bl	8000ab4 <__aeabi_dcmpge>
 8012e58:	464f      	mov	r7, r9
 8012e5a:	464e      	mov	r6, r9
 8012e5c:	2800      	cmp	r0, #0
 8012e5e:	f040 8234 	bne.w	80132ca <_dtoa_r+0x8f2>
 8012e62:	2331      	movs	r3, #49	; 0x31
 8012e64:	f10b 0501 	add.w	r5, fp, #1
 8012e68:	f88b 3000 	strb.w	r3, [fp]
 8012e6c:	f10a 0a01 	add.w	sl, sl, #1
 8012e70:	e22f      	b.n	80132d2 <_dtoa_r+0x8fa>
 8012e72:	07f2      	lsls	r2, r6, #31
 8012e74:	d505      	bpl.n	8012e82 <_dtoa_r+0x4aa>
 8012e76:	e9d7 2300 	ldrd	r2, r3, [r7]
 8012e7a:	f7ed fb95 	bl	80005a8 <__aeabi_dmul>
 8012e7e:	3501      	adds	r5, #1
 8012e80:	2301      	movs	r3, #1
 8012e82:	1076      	asrs	r6, r6, #1
 8012e84:	3708      	adds	r7, #8
 8012e86:	e772      	b.n	8012d6e <_dtoa_r+0x396>
 8012e88:	2502      	movs	r5, #2
 8012e8a:	e774      	b.n	8012d76 <_dtoa_r+0x39e>
 8012e8c:	f8cd a020 	str.w	sl, [sp, #32]
 8012e90:	464f      	mov	r7, r9
 8012e92:	e791      	b.n	8012db8 <_dtoa_r+0x3e0>
 8012e94:	4b4d      	ldr	r3, [pc, #308]	; (8012fcc <_dtoa_r+0x5f4>)
 8012e96:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8012e9a:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8012e9e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012ea0:	2b00      	cmp	r3, #0
 8012ea2:	d047      	beq.n	8012f34 <_dtoa_r+0x55c>
 8012ea4:	4602      	mov	r2, r0
 8012ea6:	460b      	mov	r3, r1
 8012ea8:	2000      	movs	r0, #0
 8012eaa:	494e      	ldr	r1, [pc, #312]	; (8012fe4 <_dtoa_r+0x60c>)
 8012eac:	f7ed fca6 	bl	80007fc <__aeabi_ddiv>
 8012eb0:	462a      	mov	r2, r5
 8012eb2:	4633      	mov	r3, r6
 8012eb4:	f7ed f9c0 	bl	8000238 <__aeabi_dsub>
 8012eb8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8012ebc:	465d      	mov	r5, fp
 8012ebe:	e9dd 0100 	ldrd	r0, r1, [sp]
 8012ec2:	f7ed fe21 	bl	8000b08 <__aeabi_d2iz>
 8012ec6:	4606      	mov	r6, r0
 8012ec8:	f7ed fb04 	bl	80004d4 <__aeabi_i2d>
 8012ecc:	4602      	mov	r2, r0
 8012ece:	460b      	mov	r3, r1
 8012ed0:	e9dd 0100 	ldrd	r0, r1, [sp]
 8012ed4:	f7ed f9b0 	bl	8000238 <__aeabi_dsub>
 8012ed8:	3630      	adds	r6, #48	; 0x30
 8012eda:	f805 6b01 	strb.w	r6, [r5], #1
 8012ede:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8012ee2:	e9cd 0100 	strd	r0, r1, [sp]
 8012ee6:	f7ed fdd1 	bl	8000a8c <__aeabi_dcmplt>
 8012eea:	2800      	cmp	r0, #0
 8012eec:	d163      	bne.n	8012fb6 <_dtoa_r+0x5de>
 8012eee:	e9dd 2300 	ldrd	r2, r3, [sp]
 8012ef2:	2000      	movs	r0, #0
 8012ef4:	4937      	ldr	r1, [pc, #220]	; (8012fd4 <_dtoa_r+0x5fc>)
 8012ef6:	f7ed f99f 	bl	8000238 <__aeabi_dsub>
 8012efa:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8012efe:	f7ed fdc5 	bl	8000a8c <__aeabi_dcmplt>
 8012f02:	2800      	cmp	r0, #0
 8012f04:	f040 80b7 	bne.w	8013076 <_dtoa_r+0x69e>
 8012f08:	eba5 030b 	sub.w	r3, r5, fp
 8012f0c:	429f      	cmp	r7, r3
 8012f0e:	f77f af7c 	ble.w	8012e0a <_dtoa_r+0x432>
 8012f12:	2200      	movs	r2, #0
 8012f14:	4b30      	ldr	r3, [pc, #192]	; (8012fd8 <_dtoa_r+0x600>)
 8012f16:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8012f1a:	f7ed fb45 	bl	80005a8 <__aeabi_dmul>
 8012f1e:	2200      	movs	r2, #0
 8012f20:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8012f24:	4b2c      	ldr	r3, [pc, #176]	; (8012fd8 <_dtoa_r+0x600>)
 8012f26:	e9dd 0100 	ldrd	r0, r1, [sp]
 8012f2a:	f7ed fb3d 	bl	80005a8 <__aeabi_dmul>
 8012f2e:	e9cd 0100 	strd	r0, r1, [sp]
 8012f32:	e7c4      	b.n	8012ebe <_dtoa_r+0x4e6>
 8012f34:	462a      	mov	r2, r5
 8012f36:	4633      	mov	r3, r6
 8012f38:	f7ed fb36 	bl	80005a8 <__aeabi_dmul>
 8012f3c:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8012f40:	eb0b 0507 	add.w	r5, fp, r7
 8012f44:	465e      	mov	r6, fp
 8012f46:	e9dd 0100 	ldrd	r0, r1, [sp]
 8012f4a:	f7ed fddd 	bl	8000b08 <__aeabi_d2iz>
 8012f4e:	4607      	mov	r7, r0
 8012f50:	f7ed fac0 	bl	80004d4 <__aeabi_i2d>
 8012f54:	3730      	adds	r7, #48	; 0x30
 8012f56:	4602      	mov	r2, r0
 8012f58:	460b      	mov	r3, r1
 8012f5a:	e9dd 0100 	ldrd	r0, r1, [sp]
 8012f5e:	f7ed f96b 	bl	8000238 <__aeabi_dsub>
 8012f62:	f806 7b01 	strb.w	r7, [r6], #1
 8012f66:	42ae      	cmp	r6, r5
 8012f68:	e9cd 0100 	strd	r0, r1, [sp]
 8012f6c:	f04f 0200 	mov.w	r2, #0
 8012f70:	d126      	bne.n	8012fc0 <_dtoa_r+0x5e8>
 8012f72:	4b1c      	ldr	r3, [pc, #112]	; (8012fe4 <_dtoa_r+0x60c>)
 8012f74:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8012f78:	f7ed f960 	bl	800023c <__adddf3>
 8012f7c:	4602      	mov	r2, r0
 8012f7e:	460b      	mov	r3, r1
 8012f80:	e9dd 0100 	ldrd	r0, r1, [sp]
 8012f84:	f7ed fda0 	bl	8000ac8 <__aeabi_dcmpgt>
 8012f88:	2800      	cmp	r0, #0
 8012f8a:	d174      	bne.n	8013076 <_dtoa_r+0x69e>
 8012f8c:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8012f90:	2000      	movs	r0, #0
 8012f92:	4914      	ldr	r1, [pc, #80]	; (8012fe4 <_dtoa_r+0x60c>)
 8012f94:	f7ed f950 	bl	8000238 <__aeabi_dsub>
 8012f98:	4602      	mov	r2, r0
 8012f9a:	460b      	mov	r3, r1
 8012f9c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8012fa0:	f7ed fd74 	bl	8000a8c <__aeabi_dcmplt>
 8012fa4:	2800      	cmp	r0, #0
 8012fa6:	f43f af30 	beq.w	8012e0a <_dtoa_r+0x432>
 8012faa:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8012fae:	2b30      	cmp	r3, #48	; 0x30
 8012fb0:	f105 32ff 	add.w	r2, r5, #4294967295
 8012fb4:	d002      	beq.n	8012fbc <_dtoa_r+0x5e4>
 8012fb6:	f8dd a020 	ldr.w	sl, [sp, #32]
 8012fba:	e04a      	b.n	8013052 <_dtoa_r+0x67a>
 8012fbc:	4615      	mov	r5, r2
 8012fbe:	e7f4      	b.n	8012faa <_dtoa_r+0x5d2>
 8012fc0:	4b05      	ldr	r3, [pc, #20]	; (8012fd8 <_dtoa_r+0x600>)
 8012fc2:	f7ed faf1 	bl	80005a8 <__aeabi_dmul>
 8012fc6:	e9cd 0100 	strd	r0, r1, [sp]
 8012fca:	e7bc      	b.n	8012f46 <_dtoa_r+0x56e>
 8012fcc:	08016488 	.word	0x08016488
 8012fd0:	08016460 	.word	0x08016460
 8012fd4:	3ff00000 	.word	0x3ff00000
 8012fd8:	40240000 	.word	0x40240000
 8012fdc:	401c0000 	.word	0x401c0000
 8012fe0:	40140000 	.word	0x40140000
 8012fe4:	3fe00000 	.word	0x3fe00000
 8012fe8:	e9dd 6700 	ldrd	r6, r7, [sp]
 8012fec:	465d      	mov	r5, fp
 8012fee:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8012ff2:	4630      	mov	r0, r6
 8012ff4:	4639      	mov	r1, r7
 8012ff6:	f7ed fc01 	bl	80007fc <__aeabi_ddiv>
 8012ffa:	f7ed fd85 	bl	8000b08 <__aeabi_d2iz>
 8012ffe:	4680      	mov	r8, r0
 8013000:	f7ed fa68 	bl	80004d4 <__aeabi_i2d>
 8013004:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8013008:	f7ed face 	bl	80005a8 <__aeabi_dmul>
 801300c:	4602      	mov	r2, r0
 801300e:	460b      	mov	r3, r1
 8013010:	4630      	mov	r0, r6
 8013012:	4639      	mov	r1, r7
 8013014:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8013018:	f7ed f90e 	bl	8000238 <__aeabi_dsub>
 801301c:	f805 6b01 	strb.w	r6, [r5], #1
 8013020:	eba5 060b 	sub.w	r6, r5, fp
 8013024:	45b1      	cmp	r9, r6
 8013026:	4602      	mov	r2, r0
 8013028:	460b      	mov	r3, r1
 801302a:	d139      	bne.n	80130a0 <_dtoa_r+0x6c8>
 801302c:	f7ed f906 	bl	800023c <__adddf3>
 8013030:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8013034:	4606      	mov	r6, r0
 8013036:	460f      	mov	r7, r1
 8013038:	f7ed fd46 	bl	8000ac8 <__aeabi_dcmpgt>
 801303c:	b9c8      	cbnz	r0, 8013072 <_dtoa_r+0x69a>
 801303e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8013042:	4630      	mov	r0, r6
 8013044:	4639      	mov	r1, r7
 8013046:	f7ed fd17 	bl	8000a78 <__aeabi_dcmpeq>
 801304a:	b110      	cbz	r0, 8013052 <_dtoa_r+0x67a>
 801304c:	f018 0f01 	tst.w	r8, #1
 8013050:	d10f      	bne.n	8013072 <_dtoa_r+0x69a>
 8013052:	9904      	ldr	r1, [sp, #16]
 8013054:	4620      	mov	r0, r4
 8013056:	f000 fc99 	bl	801398c <_Bfree>
 801305a:	2300      	movs	r3, #0
 801305c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801305e:	702b      	strb	r3, [r5, #0]
 8013060:	f10a 0301 	add.w	r3, sl, #1
 8013064:	6013      	str	r3, [r2, #0]
 8013066:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8013068:	2b00      	cmp	r3, #0
 801306a:	f000 8241 	beq.w	80134f0 <_dtoa_r+0xb18>
 801306e:	601d      	str	r5, [r3, #0]
 8013070:	e23e      	b.n	80134f0 <_dtoa_r+0xb18>
 8013072:	f8cd a020 	str.w	sl, [sp, #32]
 8013076:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 801307a:	2a39      	cmp	r2, #57	; 0x39
 801307c:	f105 33ff 	add.w	r3, r5, #4294967295
 8013080:	d108      	bne.n	8013094 <_dtoa_r+0x6bc>
 8013082:	459b      	cmp	fp, r3
 8013084:	d10a      	bne.n	801309c <_dtoa_r+0x6c4>
 8013086:	9b08      	ldr	r3, [sp, #32]
 8013088:	3301      	adds	r3, #1
 801308a:	9308      	str	r3, [sp, #32]
 801308c:	2330      	movs	r3, #48	; 0x30
 801308e:	f88b 3000 	strb.w	r3, [fp]
 8013092:	465b      	mov	r3, fp
 8013094:	781a      	ldrb	r2, [r3, #0]
 8013096:	3201      	adds	r2, #1
 8013098:	701a      	strb	r2, [r3, #0]
 801309a:	e78c      	b.n	8012fb6 <_dtoa_r+0x5de>
 801309c:	461d      	mov	r5, r3
 801309e:	e7ea      	b.n	8013076 <_dtoa_r+0x69e>
 80130a0:	2200      	movs	r2, #0
 80130a2:	4b9b      	ldr	r3, [pc, #620]	; (8013310 <_dtoa_r+0x938>)
 80130a4:	f7ed fa80 	bl	80005a8 <__aeabi_dmul>
 80130a8:	2200      	movs	r2, #0
 80130aa:	2300      	movs	r3, #0
 80130ac:	4606      	mov	r6, r0
 80130ae:	460f      	mov	r7, r1
 80130b0:	f7ed fce2 	bl	8000a78 <__aeabi_dcmpeq>
 80130b4:	2800      	cmp	r0, #0
 80130b6:	d09a      	beq.n	8012fee <_dtoa_r+0x616>
 80130b8:	e7cb      	b.n	8013052 <_dtoa_r+0x67a>
 80130ba:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80130bc:	2a00      	cmp	r2, #0
 80130be:	f000 808b 	beq.w	80131d8 <_dtoa_r+0x800>
 80130c2:	9a06      	ldr	r2, [sp, #24]
 80130c4:	2a01      	cmp	r2, #1
 80130c6:	dc6e      	bgt.n	80131a6 <_dtoa_r+0x7ce>
 80130c8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80130ca:	2a00      	cmp	r2, #0
 80130cc:	d067      	beq.n	801319e <_dtoa_r+0x7c6>
 80130ce:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80130d2:	9f07      	ldr	r7, [sp, #28]
 80130d4:	9d05      	ldr	r5, [sp, #20]
 80130d6:	9a05      	ldr	r2, [sp, #20]
 80130d8:	2101      	movs	r1, #1
 80130da:	441a      	add	r2, r3
 80130dc:	4620      	mov	r0, r4
 80130de:	9205      	str	r2, [sp, #20]
 80130e0:	4498      	add	r8, r3
 80130e2:	f000 fcf3 	bl	8013acc <__i2b>
 80130e6:	4606      	mov	r6, r0
 80130e8:	2d00      	cmp	r5, #0
 80130ea:	dd0c      	ble.n	8013106 <_dtoa_r+0x72e>
 80130ec:	f1b8 0f00 	cmp.w	r8, #0
 80130f0:	dd09      	ble.n	8013106 <_dtoa_r+0x72e>
 80130f2:	4545      	cmp	r5, r8
 80130f4:	9a05      	ldr	r2, [sp, #20]
 80130f6:	462b      	mov	r3, r5
 80130f8:	bfa8      	it	ge
 80130fa:	4643      	movge	r3, r8
 80130fc:	1ad2      	subs	r2, r2, r3
 80130fe:	9205      	str	r2, [sp, #20]
 8013100:	1aed      	subs	r5, r5, r3
 8013102:	eba8 0803 	sub.w	r8, r8, r3
 8013106:	9b07      	ldr	r3, [sp, #28]
 8013108:	b1eb      	cbz	r3, 8013146 <_dtoa_r+0x76e>
 801310a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801310c:	2b00      	cmp	r3, #0
 801310e:	d067      	beq.n	80131e0 <_dtoa_r+0x808>
 8013110:	b18f      	cbz	r7, 8013136 <_dtoa_r+0x75e>
 8013112:	4631      	mov	r1, r6
 8013114:	463a      	mov	r2, r7
 8013116:	4620      	mov	r0, r4
 8013118:	f000 fd78 	bl	8013c0c <__pow5mult>
 801311c:	9a04      	ldr	r2, [sp, #16]
 801311e:	4601      	mov	r1, r0
 8013120:	4606      	mov	r6, r0
 8013122:	4620      	mov	r0, r4
 8013124:	f000 fcdb 	bl	8013ade <__multiply>
 8013128:	9904      	ldr	r1, [sp, #16]
 801312a:	9008      	str	r0, [sp, #32]
 801312c:	4620      	mov	r0, r4
 801312e:	f000 fc2d 	bl	801398c <_Bfree>
 8013132:	9b08      	ldr	r3, [sp, #32]
 8013134:	9304      	str	r3, [sp, #16]
 8013136:	9b07      	ldr	r3, [sp, #28]
 8013138:	1bda      	subs	r2, r3, r7
 801313a:	d004      	beq.n	8013146 <_dtoa_r+0x76e>
 801313c:	9904      	ldr	r1, [sp, #16]
 801313e:	4620      	mov	r0, r4
 8013140:	f000 fd64 	bl	8013c0c <__pow5mult>
 8013144:	9004      	str	r0, [sp, #16]
 8013146:	2101      	movs	r1, #1
 8013148:	4620      	mov	r0, r4
 801314a:	f000 fcbf 	bl	8013acc <__i2b>
 801314e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8013150:	4607      	mov	r7, r0
 8013152:	2b00      	cmp	r3, #0
 8013154:	f000 81d0 	beq.w	80134f8 <_dtoa_r+0xb20>
 8013158:	461a      	mov	r2, r3
 801315a:	4601      	mov	r1, r0
 801315c:	4620      	mov	r0, r4
 801315e:	f000 fd55 	bl	8013c0c <__pow5mult>
 8013162:	9b06      	ldr	r3, [sp, #24]
 8013164:	2b01      	cmp	r3, #1
 8013166:	4607      	mov	r7, r0
 8013168:	dc40      	bgt.n	80131ec <_dtoa_r+0x814>
 801316a:	9b00      	ldr	r3, [sp, #0]
 801316c:	2b00      	cmp	r3, #0
 801316e:	d139      	bne.n	80131e4 <_dtoa_r+0x80c>
 8013170:	9b01      	ldr	r3, [sp, #4]
 8013172:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8013176:	2b00      	cmp	r3, #0
 8013178:	d136      	bne.n	80131e8 <_dtoa_r+0x810>
 801317a:	9b01      	ldr	r3, [sp, #4]
 801317c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8013180:	0d1b      	lsrs	r3, r3, #20
 8013182:	051b      	lsls	r3, r3, #20
 8013184:	b12b      	cbz	r3, 8013192 <_dtoa_r+0x7ba>
 8013186:	9b05      	ldr	r3, [sp, #20]
 8013188:	3301      	adds	r3, #1
 801318a:	9305      	str	r3, [sp, #20]
 801318c:	f108 0801 	add.w	r8, r8, #1
 8013190:	2301      	movs	r3, #1
 8013192:	9307      	str	r3, [sp, #28]
 8013194:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8013196:	2b00      	cmp	r3, #0
 8013198:	d12a      	bne.n	80131f0 <_dtoa_r+0x818>
 801319a:	2001      	movs	r0, #1
 801319c:	e030      	b.n	8013200 <_dtoa_r+0x828>
 801319e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80131a0:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80131a4:	e795      	b.n	80130d2 <_dtoa_r+0x6fa>
 80131a6:	9b07      	ldr	r3, [sp, #28]
 80131a8:	f109 37ff 	add.w	r7, r9, #4294967295
 80131ac:	42bb      	cmp	r3, r7
 80131ae:	bfbf      	itttt	lt
 80131b0:	9b07      	ldrlt	r3, [sp, #28]
 80131b2:	9707      	strlt	r7, [sp, #28]
 80131b4:	1afa      	sublt	r2, r7, r3
 80131b6:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 80131b8:	bfbb      	ittet	lt
 80131ba:	189b      	addlt	r3, r3, r2
 80131bc:	930e      	strlt	r3, [sp, #56]	; 0x38
 80131be:	1bdf      	subge	r7, r3, r7
 80131c0:	2700      	movlt	r7, #0
 80131c2:	f1b9 0f00 	cmp.w	r9, #0
 80131c6:	bfb5      	itete	lt
 80131c8:	9b05      	ldrlt	r3, [sp, #20]
 80131ca:	9d05      	ldrge	r5, [sp, #20]
 80131cc:	eba3 0509 	sublt.w	r5, r3, r9
 80131d0:	464b      	movge	r3, r9
 80131d2:	bfb8      	it	lt
 80131d4:	2300      	movlt	r3, #0
 80131d6:	e77e      	b.n	80130d6 <_dtoa_r+0x6fe>
 80131d8:	9f07      	ldr	r7, [sp, #28]
 80131da:	9d05      	ldr	r5, [sp, #20]
 80131dc:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 80131de:	e783      	b.n	80130e8 <_dtoa_r+0x710>
 80131e0:	9a07      	ldr	r2, [sp, #28]
 80131e2:	e7ab      	b.n	801313c <_dtoa_r+0x764>
 80131e4:	2300      	movs	r3, #0
 80131e6:	e7d4      	b.n	8013192 <_dtoa_r+0x7ba>
 80131e8:	9b00      	ldr	r3, [sp, #0]
 80131ea:	e7d2      	b.n	8013192 <_dtoa_r+0x7ba>
 80131ec:	2300      	movs	r3, #0
 80131ee:	9307      	str	r3, [sp, #28]
 80131f0:	693b      	ldr	r3, [r7, #16]
 80131f2:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 80131f6:	6918      	ldr	r0, [r3, #16]
 80131f8:	f000 fc1a 	bl	8013a30 <__hi0bits>
 80131fc:	f1c0 0020 	rsb	r0, r0, #32
 8013200:	4440      	add	r0, r8
 8013202:	f010 001f 	ands.w	r0, r0, #31
 8013206:	d047      	beq.n	8013298 <_dtoa_r+0x8c0>
 8013208:	f1c0 0320 	rsb	r3, r0, #32
 801320c:	2b04      	cmp	r3, #4
 801320e:	dd3b      	ble.n	8013288 <_dtoa_r+0x8b0>
 8013210:	9b05      	ldr	r3, [sp, #20]
 8013212:	f1c0 001c 	rsb	r0, r0, #28
 8013216:	4403      	add	r3, r0
 8013218:	9305      	str	r3, [sp, #20]
 801321a:	4405      	add	r5, r0
 801321c:	4480      	add	r8, r0
 801321e:	9b05      	ldr	r3, [sp, #20]
 8013220:	2b00      	cmp	r3, #0
 8013222:	dd05      	ble.n	8013230 <_dtoa_r+0x858>
 8013224:	461a      	mov	r2, r3
 8013226:	9904      	ldr	r1, [sp, #16]
 8013228:	4620      	mov	r0, r4
 801322a:	f000 fd3d 	bl	8013ca8 <__lshift>
 801322e:	9004      	str	r0, [sp, #16]
 8013230:	f1b8 0f00 	cmp.w	r8, #0
 8013234:	dd05      	ble.n	8013242 <_dtoa_r+0x86a>
 8013236:	4639      	mov	r1, r7
 8013238:	4642      	mov	r2, r8
 801323a:	4620      	mov	r0, r4
 801323c:	f000 fd34 	bl	8013ca8 <__lshift>
 8013240:	4607      	mov	r7, r0
 8013242:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8013244:	b353      	cbz	r3, 801329c <_dtoa_r+0x8c4>
 8013246:	4639      	mov	r1, r7
 8013248:	9804      	ldr	r0, [sp, #16]
 801324a:	f000 fd81 	bl	8013d50 <__mcmp>
 801324e:	2800      	cmp	r0, #0
 8013250:	da24      	bge.n	801329c <_dtoa_r+0x8c4>
 8013252:	2300      	movs	r3, #0
 8013254:	220a      	movs	r2, #10
 8013256:	9904      	ldr	r1, [sp, #16]
 8013258:	4620      	mov	r0, r4
 801325a:	f000 fbae 	bl	80139ba <__multadd>
 801325e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013260:	9004      	str	r0, [sp, #16]
 8013262:	f10a 3aff 	add.w	sl, sl, #4294967295
 8013266:	2b00      	cmp	r3, #0
 8013268:	f000 814d 	beq.w	8013506 <_dtoa_r+0xb2e>
 801326c:	2300      	movs	r3, #0
 801326e:	4631      	mov	r1, r6
 8013270:	220a      	movs	r2, #10
 8013272:	4620      	mov	r0, r4
 8013274:	f000 fba1 	bl	80139ba <__multadd>
 8013278:	9b02      	ldr	r3, [sp, #8]
 801327a:	2b00      	cmp	r3, #0
 801327c:	4606      	mov	r6, r0
 801327e:	dc4f      	bgt.n	8013320 <_dtoa_r+0x948>
 8013280:	9b06      	ldr	r3, [sp, #24]
 8013282:	2b02      	cmp	r3, #2
 8013284:	dd4c      	ble.n	8013320 <_dtoa_r+0x948>
 8013286:	e011      	b.n	80132ac <_dtoa_r+0x8d4>
 8013288:	d0c9      	beq.n	801321e <_dtoa_r+0x846>
 801328a:	9a05      	ldr	r2, [sp, #20]
 801328c:	331c      	adds	r3, #28
 801328e:	441a      	add	r2, r3
 8013290:	9205      	str	r2, [sp, #20]
 8013292:	441d      	add	r5, r3
 8013294:	4498      	add	r8, r3
 8013296:	e7c2      	b.n	801321e <_dtoa_r+0x846>
 8013298:	4603      	mov	r3, r0
 801329a:	e7f6      	b.n	801328a <_dtoa_r+0x8b2>
 801329c:	f1b9 0f00 	cmp.w	r9, #0
 80132a0:	dc38      	bgt.n	8013314 <_dtoa_r+0x93c>
 80132a2:	9b06      	ldr	r3, [sp, #24]
 80132a4:	2b02      	cmp	r3, #2
 80132a6:	dd35      	ble.n	8013314 <_dtoa_r+0x93c>
 80132a8:	f8cd 9008 	str.w	r9, [sp, #8]
 80132ac:	9b02      	ldr	r3, [sp, #8]
 80132ae:	b963      	cbnz	r3, 80132ca <_dtoa_r+0x8f2>
 80132b0:	4639      	mov	r1, r7
 80132b2:	2205      	movs	r2, #5
 80132b4:	4620      	mov	r0, r4
 80132b6:	f000 fb80 	bl	80139ba <__multadd>
 80132ba:	4601      	mov	r1, r0
 80132bc:	4607      	mov	r7, r0
 80132be:	9804      	ldr	r0, [sp, #16]
 80132c0:	f000 fd46 	bl	8013d50 <__mcmp>
 80132c4:	2800      	cmp	r0, #0
 80132c6:	f73f adcc 	bgt.w	8012e62 <_dtoa_r+0x48a>
 80132ca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80132cc:	465d      	mov	r5, fp
 80132ce:	ea6f 0a03 	mvn.w	sl, r3
 80132d2:	f04f 0900 	mov.w	r9, #0
 80132d6:	4639      	mov	r1, r7
 80132d8:	4620      	mov	r0, r4
 80132da:	f000 fb57 	bl	801398c <_Bfree>
 80132de:	2e00      	cmp	r6, #0
 80132e0:	f43f aeb7 	beq.w	8013052 <_dtoa_r+0x67a>
 80132e4:	f1b9 0f00 	cmp.w	r9, #0
 80132e8:	d005      	beq.n	80132f6 <_dtoa_r+0x91e>
 80132ea:	45b1      	cmp	r9, r6
 80132ec:	d003      	beq.n	80132f6 <_dtoa_r+0x91e>
 80132ee:	4649      	mov	r1, r9
 80132f0:	4620      	mov	r0, r4
 80132f2:	f000 fb4b 	bl	801398c <_Bfree>
 80132f6:	4631      	mov	r1, r6
 80132f8:	4620      	mov	r0, r4
 80132fa:	f000 fb47 	bl	801398c <_Bfree>
 80132fe:	e6a8      	b.n	8013052 <_dtoa_r+0x67a>
 8013300:	2700      	movs	r7, #0
 8013302:	463e      	mov	r6, r7
 8013304:	e7e1      	b.n	80132ca <_dtoa_r+0x8f2>
 8013306:	f8dd a020 	ldr.w	sl, [sp, #32]
 801330a:	463e      	mov	r6, r7
 801330c:	e5a9      	b.n	8012e62 <_dtoa_r+0x48a>
 801330e:	bf00      	nop
 8013310:	40240000 	.word	0x40240000
 8013314:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013316:	f8cd 9008 	str.w	r9, [sp, #8]
 801331a:	2b00      	cmp	r3, #0
 801331c:	f000 80fa 	beq.w	8013514 <_dtoa_r+0xb3c>
 8013320:	2d00      	cmp	r5, #0
 8013322:	dd05      	ble.n	8013330 <_dtoa_r+0x958>
 8013324:	4631      	mov	r1, r6
 8013326:	462a      	mov	r2, r5
 8013328:	4620      	mov	r0, r4
 801332a:	f000 fcbd 	bl	8013ca8 <__lshift>
 801332e:	4606      	mov	r6, r0
 8013330:	9b07      	ldr	r3, [sp, #28]
 8013332:	2b00      	cmp	r3, #0
 8013334:	d04c      	beq.n	80133d0 <_dtoa_r+0x9f8>
 8013336:	6871      	ldr	r1, [r6, #4]
 8013338:	4620      	mov	r0, r4
 801333a:	f000 faf3 	bl	8013924 <_Balloc>
 801333e:	6932      	ldr	r2, [r6, #16]
 8013340:	3202      	adds	r2, #2
 8013342:	4605      	mov	r5, r0
 8013344:	0092      	lsls	r2, r2, #2
 8013346:	f106 010c 	add.w	r1, r6, #12
 801334a:	300c      	adds	r0, #12
 801334c:	f7fe fc1e 	bl	8011b8c <memcpy>
 8013350:	2201      	movs	r2, #1
 8013352:	4629      	mov	r1, r5
 8013354:	4620      	mov	r0, r4
 8013356:	f000 fca7 	bl	8013ca8 <__lshift>
 801335a:	9b00      	ldr	r3, [sp, #0]
 801335c:	f8cd b014 	str.w	fp, [sp, #20]
 8013360:	f003 0301 	and.w	r3, r3, #1
 8013364:	46b1      	mov	r9, r6
 8013366:	9307      	str	r3, [sp, #28]
 8013368:	4606      	mov	r6, r0
 801336a:	4639      	mov	r1, r7
 801336c:	9804      	ldr	r0, [sp, #16]
 801336e:	f7ff faa7 	bl	80128c0 <quorem>
 8013372:	4649      	mov	r1, r9
 8013374:	4605      	mov	r5, r0
 8013376:	f100 0830 	add.w	r8, r0, #48	; 0x30
 801337a:	9804      	ldr	r0, [sp, #16]
 801337c:	f000 fce8 	bl	8013d50 <__mcmp>
 8013380:	4632      	mov	r2, r6
 8013382:	9000      	str	r0, [sp, #0]
 8013384:	4639      	mov	r1, r7
 8013386:	4620      	mov	r0, r4
 8013388:	f000 fcfc 	bl	8013d84 <__mdiff>
 801338c:	68c3      	ldr	r3, [r0, #12]
 801338e:	4602      	mov	r2, r0
 8013390:	bb03      	cbnz	r3, 80133d4 <_dtoa_r+0x9fc>
 8013392:	4601      	mov	r1, r0
 8013394:	9008      	str	r0, [sp, #32]
 8013396:	9804      	ldr	r0, [sp, #16]
 8013398:	f000 fcda 	bl	8013d50 <__mcmp>
 801339c:	9a08      	ldr	r2, [sp, #32]
 801339e:	4603      	mov	r3, r0
 80133a0:	4611      	mov	r1, r2
 80133a2:	4620      	mov	r0, r4
 80133a4:	9308      	str	r3, [sp, #32]
 80133a6:	f000 faf1 	bl	801398c <_Bfree>
 80133aa:	9b08      	ldr	r3, [sp, #32]
 80133ac:	b9a3      	cbnz	r3, 80133d8 <_dtoa_r+0xa00>
 80133ae:	9a06      	ldr	r2, [sp, #24]
 80133b0:	b992      	cbnz	r2, 80133d8 <_dtoa_r+0xa00>
 80133b2:	9a07      	ldr	r2, [sp, #28]
 80133b4:	b982      	cbnz	r2, 80133d8 <_dtoa_r+0xa00>
 80133b6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80133ba:	d029      	beq.n	8013410 <_dtoa_r+0xa38>
 80133bc:	9b00      	ldr	r3, [sp, #0]
 80133be:	2b00      	cmp	r3, #0
 80133c0:	dd01      	ble.n	80133c6 <_dtoa_r+0x9ee>
 80133c2:	f105 0831 	add.w	r8, r5, #49	; 0x31
 80133c6:	9b05      	ldr	r3, [sp, #20]
 80133c8:	1c5d      	adds	r5, r3, #1
 80133ca:	f883 8000 	strb.w	r8, [r3]
 80133ce:	e782      	b.n	80132d6 <_dtoa_r+0x8fe>
 80133d0:	4630      	mov	r0, r6
 80133d2:	e7c2      	b.n	801335a <_dtoa_r+0x982>
 80133d4:	2301      	movs	r3, #1
 80133d6:	e7e3      	b.n	80133a0 <_dtoa_r+0x9c8>
 80133d8:	9a00      	ldr	r2, [sp, #0]
 80133da:	2a00      	cmp	r2, #0
 80133dc:	db04      	blt.n	80133e8 <_dtoa_r+0xa10>
 80133de:	d125      	bne.n	801342c <_dtoa_r+0xa54>
 80133e0:	9a06      	ldr	r2, [sp, #24]
 80133e2:	bb1a      	cbnz	r2, 801342c <_dtoa_r+0xa54>
 80133e4:	9a07      	ldr	r2, [sp, #28]
 80133e6:	bb0a      	cbnz	r2, 801342c <_dtoa_r+0xa54>
 80133e8:	2b00      	cmp	r3, #0
 80133ea:	ddec      	ble.n	80133c6 <_dtoa_r+0x9ee>
 80133ec:	2201      	movs	r2, #1
 80133ee:	9904      	ldr	r1, [sp, #16]
 80133f0:	4620      	mov	r0, r4
 80133f2:	f000 fc59 	bl	8013ca8 <__lshift>
 80133f6:	4639      	mov	r1, r7
 80133f8:	9004      	str	r0, [sp, #16]
 80133fa:	f000 fca9 	bl	8013d50 <__mcmp>
 80133fe:	2800      	cmp	r0, #0
 8013400:	dc03      	bgt.n	801340a <_dtoa_r+0xa32>
 8013402:	d1e0      	bne.n	80133c6 <_dtoa_r+0x9ee>
 8013404:	f018 0f01 	tst.w	r8, #1
 8013408:	d0dd      	beq.n	80133c6 <_dtoa_r+0x9ee>
 801340a:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 801340e:	d1d8      	bne.n	80133c2 <_dtoa_r+0x9ea>
 8013410:	9b05      	ldr	r3, [sp, #20]
 8013412:	9a05      	ldr	r2, [sp, #20]
 8013414:	1c5d      	adds	r5, r3, #1
 8013416:	2339      	movs	r3, #57	; 0x39
 8013418:	7013      	strb	r3, [r2, #0]
 801341a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 801341e:	2b39      	cmp	r3, #57	; 0x39
 8013420:	f105 32ff 	add.w	r2, r5, #4294967295
 8013424:	d04f      	beq.n	80134c6 <_dtoa_r+0xaee>
 8013426:	3301      	adds	r3, #1
 8013428:	7013      	strb	r3, [r2, #0]
 801342a:	e754      	b.n	80132d6 <_dtoa_r+0x8fe>
 801342c:	9a05      	ldr	r2, [sp, #20]
 801342e:	2b00      	cmp	r3, #0
 8013430:	f102 0501 	add.w	r5, r2, #1
 8013434:	dd06      	ble.n	8013444 <_dtoa_r+0xa6c>
 8013436:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 801343a:	d0e9      	beq.n	8013410 <_dtoa_r+0xa38>
 801343c:	f108 0801 	add.w	r8, r8, #1
 8013440:	9b05      	ldr	r3, [sp, #20]
 8013442:	e7c2      	b.n	80133ca <_dtoa_r+0x9f2>
 8013444:	9a02      	ldr	r2, [sp, #8]
 8013446:	f805 8c01 	strb.w	r8, [r5, #-1]
 801344a:	eba5 030b 	sub.w	r3, r5, fp
 801344e:	4293      	cmp	r3, r2
 8013450:	d021      	beq.n	8013496 <_dtoa_r+0xabe>
 8013452:	2300      	movs	r3, #0
 8013454:	220a      	movs	r2, #10
 8013456:	9904      	ldr	r1, [sp, #16]
 8013458:	4620      	mov	r0, r4
 801345a:	f000 faae 	bl	80139ba <__multadd>
 801345e:	45b1      	cmp	r9, r6
 8013460:	9004      	str	r0, [sp, #16]
 8013462:	f04f 0300 	mov.w	r3, #0
 8013466:	f04f 020a 	mov.w	r2, #10
 801346a:	4649      	mov	r1, r9
 801346c:	4620      	mov	r0, r4
 801346e:	d105      	bne.n	801347c <_dtoa_r+0xaa4>
 8013470:	f000 faa3 	bl	80139ba <__multadd>
 8013474:	4681      	mov	r9, r0
 8013476:	4606      	mov	r6, r0
 8013478:	9505      	str	r5, [sp, #20]
 801347a:	e776      	b.n	801336a <_dtoa_r+0x992>
 801347c:	f000 fa9d 	bl	80139ba <__multadd>
 8013480:	4631      	mov	r1, r6
 8013482:	4681      	mov	r9, r0
 8013484:	2300      	movs	r3, #0
 8013486:	220a      	movs	r2, #10
 8013488:	4620      	mov	r0, r4
 801348a:	f000 fa96 	bl	80139ba <__multadd>
 801348e:	4606      	mov	r6, r0
 8013490:	e7f2      	b.n	8013478 <_dtoa_r+0xaa0>
 8013492:	f04f 0900 	mov.w	r9, #0
 8013496:	2201      	movs	r2, #1
 8013498:	9904      	ldr	r1, [sp, #16]
 801349a:	4620      	mov	r0, r4
 801349c:	f000 fc04 	bl	8013ca8 <__lshift>
 80134a0:	4639      	mov	r1, r7
 80134a2:	9004      	str	r0, [sp, #16]
 80134a4:	f000 fc54 	bl	8013d50 <__mcmp>
 80134a8:	2800      	cmp	r0, #0
 80134aa:	dcb6      	bgt.n	801341a <_dtoa_r+0xa42>
 80134ac:	d102      	bne.n	80134b4 <_dtoa_r+0xadc>
 80134ae:	f018 0f01 	tst.w	r8, #1
 80134b2:	d1b2      	bne.n	801341a <_dtoa_r+0xa42>
 80134b4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80134b8:	2b30      	cmp	r3, #48	; 0x30
 80134ba:	f105 32ff 	add.w	r2, r5, #4294967295
 80134be:	f47f af0a 	bne.w	80132d6 <_dtoa_r+0x8fe>
 80134c2:	4615      	mov	r5, r2
 80134c4:	e7f6      	b.n	80134b4 <_dtoa_r+0xadc>
 80134c6:	4593      	cmp	fp, r2
 80134c8:	d105      	bne.n	80134d6 <_dtoa_r+0xafe>
 80134ca:	2331      	movs	r3, #49	; 0x31
 80134cc:	f10a 0a01 	add.w	sl, sl, #1
 80134d0:	f88b 3000 	strb.w	r3, [fp]
 80134d4:	e6ff      	b.n	80132d6 <_dtoa_r+0x8fe>
 80134d6:	4615      	mov	r5, r2
 80134d8:	e79f      	b.n	801341a <_dtoa_r+0xa42>
 80134da:	f8df b064 	ldr.w	fp, [pc, #100]	; 8013540 <_dtoa_r+0xb68>
 80134de:	e007      	b.n	80134f0 <_dtoa_r+0xb18>
 80134e0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80134e2:	f8df b060 	ldr.w	fp, [pc, #96]	; 8013544 <_dtoa_r+0xb6c>
 80134e6:	b11b      	cbz	r3, 80134f0 <_dtoa_r+0xb18>
 80134e8:	f10b 0308 	add.w	r3, fp, #8
 80134ec:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80134ee:	6013      	str	r3, [r2, #0]
 80134f0:	4658      	mov	r0, fp
 80134f2:	b017      	add	sp, #92	; 0x5c
 80134f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80134f8:	9b06      	ldr	r3, [sp, #24]
 80134fa:	2b01      	cmp	r3, #1
 80134fc:	f77f ae35 	ble.w	801316a <_dtoa_r+0x792>
 8013500:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8013502:	9307      	str	r3, [sp, #28]
 8013504:	e649      	b.n	801319a <_dtoa_r+0x7c2>
 8013506:	9b02      	ldr	r3, [sp, #8]
 8013508:	2b00      	cmp	r3, #0
 801350a:	dc03      	bgt.n	8013514 <_dtoa_r+0xb3c>
 801350c:	9b06      	ldr	r3, [sp, #24]
 801350e:	2b02      	cmp	r3, #2
 8013510:	f73f aecc 	bgt.w	80132ac <_dtoa_r+0x8d4>
 8013514:	465d      	mov	r5, fp
 8013516:	4639      	mov	r1, r7
 8013518:	9804      	ldr	r0, [sp, #16]
 801351a:	f7ff f9d1 	bl	80128c0 <quorem>
 801351e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8013522:	f805 8b01 	strb.w	r8, [r5], #1
 8013526:	9a02      	ldr	r2, [sp, #8]
 8013528:	eba5 030b 	sub.w	r3, r5, fp
 801352c:	429a      	cmp	r2, r3
 801352e:	ddb0      	ble.n	8013492 <_dtoa_r+0xaba>
 8013530:	2300      	movs	r3, #0
 8013532:	220a      	movs	r2, #10
 8013534:	9904      	ldr	r1, [sp, #16]
 8013536:	4620      	mov	r0, r4
 8013538:	f000 fa3f 	bl	80139ba <__multadd>
 801353c:	9004      	str	r0, [sp, #16]
 801353e:	e7ea      	b.n	8013516 <_dtoa_r+0xb3e>
 8013540:	080163c8 	.word	0x080163c8
 8013544:	080163ec 	.word	0x080163ec

08013548 <__sflush_r>:
 8013548:	898a      	ldrh	r2, [r1, #12]
 801354a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801354e:	4605      	mov	r5, r0
 8013550:	0710      	lsls	r0, r2, #28
 8013552:	460c      	mov	r4, r1
 8013554:	d458      	bmi.n	8013608 <__sflush_r+0xc0>
 8013556:	684b      	ldr	r3, [r1, #4]
 8013558:	2b00      	cmp	r3, #0
 801355a:	dc05      	bgt.n	8013568 <__sflush_r+0x20>
 801355c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801355e:	2b00      	cmp	r3, #0
 8013560:	dc02      	bgt.n	8013568 <__sflush_r+0x20>
 8013562:	2000      	movs	r0, #0
 8013564:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013568:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801356a:	2e00      	cmp	r6, #0
 801356c:	d0f9      	beq.n	8013562 <__sflush_r+0x1a>
 801356e:	2300      	movs	r3, #0
 8013570:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8013574:	682f      	ldr	r7, [r5, #0]
 8013576:	6a21      	ldr	r1, [r4, #32]
 8013578:	602b      	str	r3, [r5, #0]
 801357a:	d032      	beq.n	80135e2 <__sflush_r+0x9a>
 801357c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801357e:	89a3      	ldrh	r3, [r4, #12]
 8013580:	075a      	lsls	r2, r3, #29
 8013582:	d505      	bpl.n	8013590 <__sflush_r+0x48>
 8013584:	6863      	ldr	r3, [r4, #4]
 8013586:	1ac0      	subs	r0, r0, r3
 8013588:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801358a:	b10b      	cbz	r3, 8013590 <__sflush_r+0x48>
 801358c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801358e:	1ac0      	subs	r0, r0, r3
 8013590:	2300      	movs	r3, #0
 8013592:	4602      	mov	r2, r0
 8013594:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8013596:	6a21      	ldr	r1, [r4, #32]
 8013598:	4628      	mov	r0, r5
 801359a:	47b0      	blx	r6
 801359c:	1c43      	adds	r3, r0, #1
 801359e:	89a3      	ldrh	r3, [r4, #12]
 80135a0:	d106      	bne.n	80135b0 <__sflush_r+0x68>
 80135a2:	6829      	ldr	r1, [r5, #0]
 80135a4:	291d      	cmp	r1, #29
 80135a6:	d848      	bhi.n	801363a <__sflush_r+0xf2>
 80135a8:	4a29      	ldr	r2, [pc, #164]	; (8013650 <__sflush_r+0x108>)
 80135aa:	40ca      	lsrs	r2, r1
 80135ac:	07d6      	lsls	r6, r2, #31
 80135ae:	d544      	bpl.n	801363a <__sflush_r+0xf2>
 80135b0:	2200      	movs	r2, #0
 80135b2:	6062      	str	r2, [r4, #4]
 80135b4:	04d9      	lsls	r1, r3, #19
 80135b6:	6922      	ldr	r2, [r4, #16]
 80135b8:	6022      	str	r2, [r4, #0]
 80135ba:	d504      	bpl.n	80135c6 <__sflush_r+0x7e>
 80135bc:	1c42      	adds	r2, r0, #1
 80135be:	d101      	bne.n	80135c4 <__sflush_r+0x7c>
 80135c0:	682b      	ldr	r3, [r5, #0]
 80135c2:	b903      	cbnz	r3, 80135c6 <__sflush_r+0x7e>
 80135c4:	6560      	str	r0, [r4, #84]	; 0x54
 80135c6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80135c8:	602f      	str	r7, [r5, #0]
 80135ca:	2900      	cmp	r1, #0
 80135cc:	d0c9      	beq.n	8013562 <__sflush_r+0x1a>
 80135ce:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80135d2:	4299      	cmp	r1, r3
 80135d4:	d002      	beq.n	80135dc <__sflush_r+0x94>
 80135d6:	4628      	mov	r0, r5
 80135d8:	f7fe faec 	bl	8011bb4 <_free_r>
 80135dc:	2000      	movs	r0, #0
 80135de:	6360      	str	r0, [r4, #52]	; 0x34
 80135e0:	e7c0      	b.n	8013564 <__sflush_r+0x1c>
 80135e2:	2301      	movs	r3, #1
 80135e4:	4628      	mov	r0, r5
 80135e6:	47b0      	blx	r6
 80135e8:	1c41      	adds	r1, r0, #1
 80135ea:	d1c8      	bne.n	801357e <__sflush_r+0x36>
 80135ec:	682b      	ldr	r3, [r5, #0]
 80135ee:	2b00      	cmp	r3, #0
 80135f0:	d0c5      	beq.n	801357e <__sflush_r+0x36>
 80135f2:	2b1d      	cmp	r3, #29
 80135f4:	d001      	beq.n	80135fa <__sflush_r+0xb2>
 80135f6:	2b16      	cmp	r3, #22
 80135f8:	d101      	bne.n	80135fe <__sflush_r+0xb6>
 80135fa:	602f      	str	r7, [r5, #0]
 80135fc:	e7b1      	b.n	8013562 <__sflush_r+0x1a>
 80135fe:	89a3      	ldrh	r3, [r4, #12]
 8013600:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013604:	81a3      	strh	r3, [r4, #12]
 8013606:	e7ad      	b.n	8013564 <__sflush_r+0x1c>
 8013608:	690f      	ldr	r7, [r1, #16]
 801360a:	2f00      	cmp	r7, #0
 801360c:	d0a9      	beq.n	8013562 <__sflush_r+0x1a>
 801360e:	0793      	lsls	r3, r2, #30
 8013610:	680e      	ldr	r6, [r1, #0]
 8013612:	bf08      	it	eq
 8013614:	694b      	ldreq	r3, [r1, #20]
 8013616:	600f      	str	r7, [r1, #0]
 8013618:	bf18      	it	ne
 801361a:	2300      	movne	r3, #0
 801361c:	eba6 0807 	sub.w	r8, r6, r7
 8013620:	608b      	str	r3, [r1, #8]
 8013622:	f1b8 0f00 	cmp.w	r8, #0
 8013626:	dd9c      	ble.n	8013562 <__sflush_r+0x1a>
 8013628:	4643      	mov	r3, r8
 801362a:	463a      	mov	r2, r7
 801362c:	6a21      	ldr	r1, [r4, #32]
 801362e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8013630:	4628      	mov	r0, r5
 8013632:	47b0      	blx	r6
 8013634:	2800      	cmp	r0, #0
 8013636:	dc06      	bgt.n	8013646 <__sflush_r+0xfe>
 8013638:	89a3      	ldrh	r3, [r4, #12]
 801363a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801363e:	81a3      	strh	r3, [r4, #12]
 8013640:	f04f 30ff 	mov.w	r0, #4294967295
 8013644:	e78e      	b.n	8013564 <__sflush_r+0x1c>
 8013646:	4407      	add	r7, r0
 8013648:	eba8 0800 	sub.w	r8, r8, r0
 801364c:	e7e9      	b.n	8013622 <__sflush_r+0xda>
 801364e:	bf00      	nop
 8013650:	20400001 	.word	0x20400001

08013654 <_fflush_r>:
 8013654:	b538      	push	{r3, r4, r5, lr}
 8013656:	690b      	ldr	r3, [r1, #16]
 8013658:	4605      	mov	r5, r0
 801365a:	460c      	mov	r4, r1
 801365c:	b1db      	cbz	r3, 8013696 <_fflush_r+0x42>
 801365e:	b118      	cbz	r0, 8013668 <_fflush_r+0x14>
 8013660:	6983      	ldr	r3, [r0, #24]
 8013662:	b90b      	cbnz	r3, 8013668 <_fflush_r+0x14>
 8013664:	f000 f860 	bl	8013728 <__sinit>
 8013668:	4b0c      	ldr	r3, [pc, #48]	; (801369c <_fflush_r+0x48>)
 801366a:	429c      	cmp	r4, r3
 801366c:	d109      	bne.n	8013682 <_fflush_r+0x2e>
 801366e:	686c      	ldr	r4, [r5, #4]
 8013670:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013674:	b17b      	cbz	r3, 8013696 <_fflush_r+0x42>
 8013676:	4621      	mov	r1, r4
 8013678:	4628      	mov	r0, r5
 801367a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801367e:	f7ff bf63 	b.w	8013548 <__sflush_r>
 8013682:	4b07      	ldr	r3, [pc, #28]	; (80136a0 <_fflush_r+0x4c>)
 8013684:	429c      	cmp	r4, r3
 8013686:	d101      	bne.n	801368c <_fflush_r+0x38>
 8013688:	68ac      	ldr	r4, [r5, #8]
 801368a:	e7f1      	b.n	8013670 <_fflush_r+0x1c>
 801368c:	4b05      	ldr	r3, [pc, #20]	; (80136a4 <_fflush_r+0x50>)
 801368e:	429c      	cmp	r4, r3
 8013690:	bf08      	it	eq
 8013692:	68ec      	ldreq	r4, [r5, #12]
 8013694:	e7ec      	b.n	8013670 <_fflush_r+0x1c>
 8013696:	2000      	movs	r0, #0
 8013698:	bd38      	pop	{r3, r4, r5, pc}
 801369a:	bf00      	nop
 801369c:	0801641c 	.word	0x0801641c
 80136a0:	0801643c 	.word	0x0801643c
 80136a4:	080163fc 	.word	0x080163fc

080136a8 <std>:
 80136a8:	2300      	movs	r3, #0
 80136aa:	b510      	push	{r4, lr}
 80136ac:	4604      	mov	r4, r0
 80136ae:	e9c0 3300 	strd	r3, r3, [r0]
 80136b2:	6083      	str	r3, [r0, #8]
 80136b4:	8181      	strh	r1, [r0, #12]
 80136b6:	6643      	str	r3, [r0, #100]	; 0x64
 80136b8:	81c2      	strh	r2, [r0, #14]
 80136ba:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80136be:	6183      	str	r3, [r0, #24]
 80136c0:	4619      	mov	r1, r3
 80136c2:	2208      	movs	r2, #8
 80136c4:	305c      	adds	r0, #92	; 0x5c
 80136c6:	f7fe fa6c 	bl	8011ba2 <memset>
 80136ca:	4b05      	ldr	r3, [pc, #20]	; (80136e0 <std+0x38>)
 80136cc:	6263      	str	r3, [r4, #36]	; 0x24
 80136ce:	4b05      	ldr	r3, [pc, #20]	; (80136e4 <std+0x3c>)
 80136d0:	62a3      	str	r3, [r4, #40]	; 0x28
 80136d2:	4b05      	ldr	r3, [pc, #20]	; (80136e8 <std+0x40>)
 80136d4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80136d6:	4b05      	ldr	r3, [pc, #20]	; (80136ec <std+0x44>)
 80136d8:	6224      	str	r4, [r4, #32]
 80136da:	6323      	str	r3, [r4, #48]	; 0x30
 80136dc:	bd10      	pop	{r4, pc}
 80136de:	bf00      	nop
 80136e0:	0801441d 	.word	0x0801441d
 80136e4:	0801443f 	.word	0x0801443f
 80136e8:	08014477 	.word	0x08014477
 80136ec:	0801449b 	.word	0x0801449b

080136f0 <_cleanup_r>:
 80136f0:	4901      	ldr	r1, [pc, #4]	; (80136f8 <_cleanup_r+0x8>)
 80136f2:	f000 b885 	b.w	8013800 <_fwalk_reent>
 80136f6:	bf00      	nop
 80136f8:	08013655 	.word	0x08013655

080136fc <__sfmoreglue>:
 80136fc:	b570      	push	{r4, r5, r6, lr}
 80136fe:	1e4a      	subs	r2, r1, #1
 8013700:	2568      	movs	r5, #104	; 0x68
 8013702:	4355      	muls	r5, r2
 8013704:	460e      	mov	r6, r1
 8013706:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801370a:	f7fe faa1 	bl	8011c50 <_malloc_r>
 801370e:	4604      	mov	r4, r0
 8013710:	b140      	cbz	r0, 8013724 <__sfmoreglue+0x28>
 8013712:	2100      	movs	r1, #0
 8013714:	e9c0 1600 	strd	r1, r6, [r0]
 8013718:	300c      	adds	r0, #12
 801371a:	60a0      	str	r0, [r4, #8]
 801371c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8013720:	f7fe fa3f 	bl	8011ba2 <memset>
 8013724:	4620      	mov	r0, r4
 8013726:	bd70      	pop	{r4, r5, r6, pc}

08013728 <__sinit>:
 8013728:	6983      	ldr	r3, [r0, #24]
 801372a:	b510      	push	{r4, lr}
 801372c:	4604      	mov	r4, r0
 801372e:	bb33      	cbnz	r3, 801377e <__sinit+0x56>
 8013730:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8013734:	6503      	str	r3, [r0, #80]	; 0x50
 8013736:	4b12      	ldr	r3, [pc, #72]	; (8013780 <__sinit+0x58>)
 8013738:	4a12      	ldr	r2, [pc, #72]	; (8013784 <__sinit+0x5c>)
 801373a:	681b      	ldr	r3, [r3, #0]
 801373c:	6282      	str	r2, [r0, #40]	; 0x28
 801373e:	4298      	cmp	r0, r3
 8013740:	bf04      	itt	eq
 8013742:	2301      	moveq	r3, #1
 8013744:	6183      	streq	r3, [r0, #24]
 8013746:	f000 f81f 	bl	8013788 <__sfp>
 801374a:	6060      	str	r0, [r4, #4]
 801374c:	4620      	mov	r0, r4
 801374e:	f000 f81b 	bl	8013788 <__sfp>
 8013752:	60a0      	str	r0, [r4, #8]
 8013754:	4620      	mov	r0, r4
 8013756:	f000 f817 	bl	8013788 <__sfp>
 801375a:	2200      	movs	r2, #0
 801375c:	60e0      	str	r0, [r4, #12]
 801375e:	2104      	movs	r1, #4
 8013760:	6860      	ldr	r0, [r4, #4]
 8013762:	f7ff ffa1 	bl	80136a8 <std>
 8013766:	2201      	movs	r2, #1
 8013768:	2109      	movs	r1, #9
 801376a:	68a0      	ldr	r0, [r4, #8]
 801376c:	f7ff ff9c 	bl	80136a8 <std>
 8013770:	2202      	movs	r2, #2
 8013772:	2112      	movs	r1, #18
 8013774:	68e0      	ldr	r0, [r4, #12]
 8013776:	f7ff ff97 	bl	80136a8 <std>
 801377a:	2301      	movs	r3, #1
 801377c:	61a3      	str	r3, [r4, #24]
 801377e:	bd10      	pop	{r4, pc}
 8013780:	080163b4 	.word	0x080163b4
 8013784:	080136f1 	.word	0x080136f1

08013788 <__sfp>:
 8013788:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801378a:	4b1b      	ldr	r3, [pc, #108]	; (80137f8 <__sfp+0x70>)
 801378c:	681e      	ldr	r6, [r3, #0]
 801378e:	69b3      	ldr	r3, [r6, #24]
 8013790:	4607      	mov	r7, r0
 8013792:	b913      	cbnz	r3, 801379a <__sfp+0x12>
 8013794:	4630      	mov	r0, r6
 8013796:	f7ff ffc7 	bl	8013728 <__sinit>
 801379a:	3648      	adds	r6, #72	; 0x48
 801379c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80137a0:	3b01      	subs	r3, #1
 80137a2:	d503      	bpl.n	80137ac <__sfp+0x24>
 80137a4:	6833      	ldr	r3, [r6, #0]
 80137a6:	b133      	cbz	r3, 80137b6 <__sfp+0x2e>
 80137a8:	6836      	ldr	r6, [r6, #0]
 80137aa:	e7f7      	b.n	801379c <__sfp+0x14>
 80137ac:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80137b0:	b16d      	cbz	r5, 80137ce <__sfp+0x46>
 80137b2:	3468      	adds	r4, #104	; 0x68
 80137b4:	e7f4      	b.n	80137a0 <__sfp+0x18>
 80137b6:	2104      	movs	r1, #4
 80137b8:	4638      	mov	r0, r7
 80137ba:	f7ff ff9f 	bl	80136fc <__sfmoreglue>
 80137be:	6030      	str	r0, [r6, #0]
 80137c0:	2800      	cmp	r0, #0
 80137c2:	d1f1      	bne.n	80137a8 <__sfp+0x20>
 80137c4:	230c      	movs	r3, #12
 80137c6:	603b      	str	r3, [r7, #0]
 80137c8:	4604      	mov	r4, r0
 80137ca:	4620      	mov	r0, r4
 80137cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80137ce:	4b0b      	ldr	r3, [pc, #44]	; (80137fc <__sfp+0x74>)
 80137d0:	6665      	str	r5, [r4, #100]	; 0x64
 80137d2:	e9c4 5500 	strd	r5, r5, [r4]
 80137d6:	60a5      	str	r5, [r4, #8]
 80137d8:	e9c4 3503 	strd	r3, r5, [r4, #12]
 80137dc:	e9c4 5505 	strd	r5, r5, [r4, #20]
 80137e0:	2208      	movs	r2, #8
 80137e2:	4629      	mov	r1, r5
 80137e4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80137e8:	f7fe f9db 	bl	8011ba2 <memset>
 80137ec:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80137f0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80137f4:	e7e9      	b.n	80137ca <__sfp+0x42>
 80137f6:	bf00      	nop
 80137f8:	080163b4 	.word	0x080163b4
 80137fc:	ffff0001 	.word	0xffff0001

08013800 <_fwalk_reent>:
 8013800:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013804:	4680      	mov	r8, r0
 8013806:	4689      	mov	r9, r1
 8013808:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801380c:	2600      	movs	r6, #0
 801380e:	b914      	cbnz	r4, 8013816 <_fwalk_reent+0x16>
 8013810:	4630      	mov	r0, r6
 8013812:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013816:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 801381a:	3f01      	subs	r7, #1
 801381c:	d501      	bpl.n	8013822 <_fwalk_reent+0x22>
 801381e:	6824      	ldr	r4, [r4, #0]
 8013820:	e7f5      	b.n	801380e <_fwalk_reent+0xe>
 8013822:	89ab      	ldrh	r3, [r5, #12]
 8013824:	2b01      	cmp	r3, #1
 8013826:	d907      	bls.n	8013838 <_fwalk_reent+0x38>
 8013828:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801382c:	3301      	adds	r3, #1
 801382e:	d003      	beq.n	8013838 <_fwalk_reent+0x38>
 8013830:	4629      	mov	r1, r5
 8013832:	4640      	mov	r0, r8
 8013834:	47c8      	blx	r9
 8013836:	4306      	orrs	r6, r0
 8013838:	3568      	adds	r5, #104	; 0x68
 801383a:	e7ee      	b.n	801381a <_fwalk_reent+0x1a>

0801383c <_localeconv_r>:
 801383c:	4b04      	ldr	r3, [pc, #16]	; (8013850 <_localeconv_r+0x14>)
 801383e:	681b      	ldr	r3, [r3, #0]
 8013840:	6a18      	ldr	r0, [r3, #32]
 8013842:	4b04      	ldr	r3, [pc, #16]	; (8013854 <_localeconv_r+0x18>)
 8013844:	2800      	cmp	r0, #0
 8013846:	bf08      	it	eq
 8013848:	4618      	moveq	r0, r3
 801384a:	30f0      	adds	r0, #240	; 0xf0
 801384c:	4770      	bx	lr
 801384e:	bf00      	nop
 8013850:	20000024 	.word	0x20000024
 8013854:	20000088 	.word	0x20000088

08013858 <__swhatbuf_r>:
 8013858:	b570      	push	{r4, r5, r6, lr}
 801385a:	460e      	mov	r6, r1
 801385c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013860:	2900      	cmp	r1, #0
 8013862:	b096      	sub	sp, #88	; 0x58
 8013864:	4614      	mov	r4, r2
 8013866:	461d      	mov	r5, r3
 8013868:	da07      	bge.n	801387a <__swhatbuf_r+0x22>
 801386a:	2300      	movs	r3, #0
 801386c:	602b      	str	r3, [r5, #0]
 801386e:	89b3      	ldrh	r3, [r6, #12]
 8013870:	061a      	lsls	r2, r3, #24
 8013872:	d410      	bmi.n	8013896 <__swhatbuf_r+0x3e>
 8013874:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8013878:	e00e      	b.n	8013898 <__swhatbuf_r+0x40>
 801387a:	466a      	mov	r2, sp
 801387c:	f000 fe34 	bl	80144e8 <_fstat_r>
 8013880:	2800      	cmp	r0, #0
 8013882:	dbf2      	blt.n	801386a <__swhatbuf_r+0x12>
 8013884:	9a01      	ldr	r2, [sp, #4]
 8013886:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801388a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801388e:	425a      	negs	r2, r3
 8013890:	415a      	adcs	r2, r3
 8013892:	602a      	str	r2, [r5, #0]
 8013894:	e7ee      	b.n	8013874 <__swhatbuf_r+0x1c>
 8013896:	2340      	movs	r3, #64	; 0x40
 8013898:	2000      	movs	r0, #0
 801389a:	6023      	str	r3, [r4, #0]
 801389c:	b016      	add	sp, #88	; 0x58
 801389e:	bd70      	pop	{r4, r5, r6, pc}

080138a0 <__smakebuf_r>:
 80138a0:	898b      	ldrh	r3, [r1, #12]
 80138a2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80138a4:	079d      	lsls	r5, r3, #30
 80138a6:	4606      	mov	r6, r0
 80138a8:	460c      	mov	r4, r1
 80138aa:	d507      	bpl.n	80138bc <__smakebuf_r+0x1c>
 80138ac:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80138b0:	6023      	str	r3, [r4, #0]
 80138b2:	6123      	str	r3, [r4, #16]
 80138b4:	2301      	movs	r3, #1
 80138b6:	6163      	str	r3, [r4, #20]
 80138b8:	b002      	add	sp, #8
 80138ba:	bd70      	pop	{r4, r5, r6, pc}
 80138bc:	ab01      	add	r3, sp, #4
 80138be:	466a      	mov	r2, sp
 80138c0:	f7ff ffca 	bl	8013858 <__swhatbuf_r>
 80138c4:	9900      	ldr	r1, [sp, #0]
 80138c6:	4605      	mov	r5, r0
 80138c8:	4630      	mov	r0, r6
 80138ca:	f7fe f9c1 	bl	8011c50 <_malloc_r>
 80138ce:	b948      	cbnz	r0, 80138e4 <__smakebuf_r+0x44>
 80138d0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80138d4:	059a      	lsls	r2, r3, #22
 80138d6:	d4ef      	bmi.n	80138b8 <__smakebuf_r+0x18>
 80138d8:	f023 0303 	bic.w	r3, r3, #3
 80138dc:	f043 0302 	orr.w	r3, r3, #2
 80138e0:	81a3      	strh	r3, [r4, #12]
 80138e2:	e7e3      	b.n	80138ac <__smakebuf_r+0xc>
 80138e4:	4b0d      	ldr	r3, [pc, #52]	; (801391c <__smakebuf_r+0x7c>)
 80138e6:	62b3      	str	r3, [r6, #40]	; 0x28
 80138e8:	89a3      	ldrh	r3, [r4, #12]
 80138ea:	6020      	str	r0, [r4, #0]
 80138ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80138f0:	81a3      	strh	r3, [r4, #12]
 80138f2:	9b00      	ldr	r3, [sp, #0]
 80138f4:	6163      	str	r3, [r4, #20]
 80138f6:	9b01      	ldr	r3, [sp, #4]
 80138f8:	6120      	str	r0, [r4, #16]
 80138fa:	b15b      	cbz	r3, 8013914 <__smakebuf_r+0x74>
 80138fc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8013900:	4630      	mov	r0, r6
 8013902:	f000 fe03 	bl	801450c <_isatty_r>
 8013906:	b128      	cbz	r0, 8013914 <__smakebuf_r+0x74>
 8013908:	89a3      	ldrh	r3, [r4, #12]
 801390a:	f023 0303 	bic.w	r3, r3, #3
 801390e:	f043 0301 	orr.w	r3, r3, #1
 8013912:	81a3      	strh	r3, [r4, #12]
 8013914:	89a3      	ldrh	r3, [r4, #12]
 8013916:	431d      	orrs	r5, r3
 8013918:	81a5      	strh	r5, [r4, #12]
 801391a:	e7cd      	b.n	80138b8 <__smakebuf_r+0x18>
 801391c:	080136f1 	.word	0x080136f1

08013920 <__malloc_lock>:
 8013920:	4770      	bx	lr

08013922 <__malloc_unlock>:
 8013922:	4770      	bx	lr

08013924 <_Balloc>:
 8013924:	b570      	push	{r4, r5, r6, lr}
 8013926:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8013928:	4604      	mov	r4, r0
 801392a:	460e      	mov	r6, r1
 801392c:	b93d      	cbnz	r5, 801393e <_Balloc+0x1a>
 801392e:	2010      	movs	r0, #16
 8013930:	f7fe f924 	bl	8011b7c <malloc>
 8013934:	6260      	str	r0, [r4, #36]	; 0x24
 8013936:	e9c0 5501 	strd	r5, r5, [r0, #4]
 801393a:	6005      	str	r5, [r0, #0]
 801393c:	60c5      	str	r5, [r0, #12]
 801393e:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8013940:	68eb      	ldr	r3, [r5, #12]
 8013942:	b183      	cbz	r3, 8013966 <_Balloc+0x42>
 8013944:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8013946:	68db      	ldr	r3, [r3, #12]
 8013948:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 801394c:	b9b8      	cbnz	r0, 801397e <_Balloc+0x5a>
 801394e:	2101      	movs	r1, #1
 8013950:	fa01 f506 	lsl.w	r5, r1, r6
 8013954:	1d6a      	adds	r2, r5, #5
 8013956:	0092      	lsls	r2, r2, #2
 8013958:	4620      	mov	r0, r4
 801395a:	f000 fabf 	bl	8013edc <_calloc_r>
 801395e:	b160      	cbz	r0, 801397a <_Balloc+0x56>
 8013960:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8013964:	e00e      	b.n	8013984 <_Balloc+0x60>
 8013966:	2221      	movs	r2, #33	; 0x21
 8013968:	2104      	movs	r1, #4
 801396a:	4620      	mov	r0, r4
 801396c:	f000 fab6 	bl	8013edc <_calloc_r>
 8013970:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8013972:	60e8      	str	r0, [r5, #12]
 8013974:	68db      	ldr	r3, [r3, #12]
 8013976:	2b00      	cmp	r3, #0
 8013978:	d1e4      	bne.n	8013944 <_Balloc+0x20>
 801397a:	2000      	movs	r0, #0
 801397c:	bd70      	pop	{r4, r5, r6, pc}
 801397e:	6802      	ldr	r2, [r0, #0]
 8013980:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8013984:	2300      	movs	r3, #0
 8013986:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801398a:	e7f7      	b.n	801397c <_Balloc+0x58>

0801398c <_Bfree>:
 801398c:	b570      	push	{r4, r5, r6, lr}
 801398e:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8013990:	4606      	mov	r6, r0
 8013992:	460d      	mov	r5, r1
 8013994:	b93c      	cbnz	r4, 80139a6 <_Bfree+0x1a>
 8013996:	2010      	movs	r0, #16
 8013998:	f7fe f8f0 	bl	8011b7c <malloc>
 801399c:	6270      	str	r0, [r6, #36]	; 0x24
 801399e:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80139a2:	6004      	str	r4, [r0, #0]
 80139a4:	60c4      	str	r4, [r0, #12]
 80139a6:	b13d      	cbz	r5, 80139b8 <_Bfree+0x2c>
 80139a8:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80139aa:	686a      	ldr	r2, [r5, #4]
 80139ac:	68db      	ldr	r3, [r3, #12]
 80139ae:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80139b2:	6029      	str	r1, [r5, #0]
 80139b4:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 80139b8:	bd70      	pop	{r4, r5, r6, pc}

080139ba <__multadd>:
 80139ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80139be:	690d      	ldr	r5, [r1, #16]
 80139c0:	461f      	mov	r7, r3
 80139c2:	4606      	mov	r6, r0
 80139c4:	460c      	mov	r4, r1
 80139c6:	f101 0c14 	add.w	ip, r1, #20
 80139ca:	2300      	movs	r3, #0
 80139cc:	f8dc 0000 	ldr.w	r0, [ip]
 80139d0:	b281      	uxth	r1, r0
 80139d2:	fb02 7101 	mla	r1, r2, r1, r7
 80139d6:	0c0f      	lsrs	r7, r1, #16
 80139d8:	0c00      	lsrs	r0, r0, #16
 80139da:	fb02 7000 	mla	r0, r2, r0, r7
 80139de:	b289      	uxth	r1, r1
 80139e0:	3301      	adds	r3, #1
 80139e2:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 80139e6:	429d      	cmp	r5, r3
 80139e8:	ea4f 4710 	mov.w	r7, r0, lsr #16
 80139ec:	f84c 1b04 	str.w	r1, [ip], #4
 80139f0:	dcec      	bgt.n	80139cc <__multadd+0x12>
 80139f2:	b1d7      	cbz	r7, 8013a2a <__multadd+0x70>
 80139f4:	68a3      	ldr	r3, [r4, #8]
 80139f6:	42ab      	cmp	r3, r5
 80139f8:	dc12      	bgt.n	8013a20 <__multadd+0x66>
 80139fa:	6861      	ldr	r1, [r4, #4]
 80139fc:	4630      	mov	r0, r6
 80139fe:	3101      	adds	r1, #1
 8013a00:	f7ff ff90 	bl	8013924 <_Balloc>
 8013a04:	6922      	ldr	r2, [r4, #16]
 8013a06:	3202      	adds	r2, #2
 8013a08:	f104 010c 	add.w	r1, r4, #12
 8013a0c:	4680      	mov	r8, r0
 8013a0e:	0092      	lsls	r2, r2, #2
 8013a10:	300c      	adds	r0, #12
 8013a12:	f7fe f8bb 	bl	8011b8c <memcpy>
 8013a16:	4621      	mov	r1, r4
 8013a18:	4630      	mov	r0, r6
 8013a1a:	f7ff ffb7 	bl	801398c <_Bfree>
 8013a1e:	4644      	mov	r4, r8
 8013a20:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8013a24:	3501      	adds	r5, #1
 8013a26:	615f      	str	r7, [r3, #20]
 8013a28:	6125      	str	r5, [r4, #16]
 8013a2a:	4620      	mov	r0, r4
 8013a2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08013a30 <__hi0bits>:
 8013a30:	0c02      	lsrs	r2, r0, #16
 8013a32:	0412      	lsls	r2, r2, #16
 8013a34:	4603      	mov	r3, r0
 8013a36:	b9b2      	cbnz	r2, 8013a66 <__hi0bits+0x36>
 8013a38:	0403      	lsls	r3, r0, #16
 8013a3a:	2010      	movs	r0, #16
 8013a3c:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8013a40:	bf04      	itt	eq
 8013a42:	021b      	lsleq	r3, r3, #8
 8013a44:	3008      	addeq	r0, #8
 8013a46:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8013a4a:	bf04      	itt	eq
 8013a4c:	011b      	lsleq	r3, r3, #4
 8013a4e:	3004      	addeq	r0, #4
 8013a50:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8013a54:	bf04      	itt	eq
 8013a56:	009b      	lsleq	r3, r3, #2
 8013a58:	3002      	addeq	r0, #2
 8013a5a:	2b00      	cmp	r3, #0
 8013a5c:	db06      	blt.n	8013a6c <__hi0bits+0x3c>
 8013a5e:	005b      	lsls	r3, r3, #1
 8013a60:	d503      	bpl.n	8013a6a <__hi0bits+0x3a>
 8013a62:	3001      	adds	r0, #1
 8013a64:	4770      	bx	lr
 8013a66:	2000      	movs	r0, #0
 8013a68:	e7e8      	b.n	8013a3c <__hi0bits+0xc>
 8013a6a:	2020      	movs	r0, #32
 8013a6c:	4770      	bx	lr

08013a6e <__lo0bits>:
 8013a6e:	6803      	ldr	r3, [r0, #0]
 8013a70:	f013 0207 	ands.w	r2, r3, #7
 8013a74:	4601      	mov	r1, r0
 8013a76:	d00b      	beq.n	8013a90 <__lo0bits+0x22>
 8013a78:	07da      	lsls	r2, r3, #31
 8013a7a:	d423      	bmi.n	8013ac4 <__lo0bits+0x56>
 8013a7c:	0798      	lsls	r0, r3, #30
 8013a7e:	bf49      	itett	mi
 8013a80:	085b      	lsrmi	r3, r3, #1
 8013a82:	089b      	lsrpl	r3, r3, #2
 8013a84:	2001      	movmi	r0, #1
 8013a86:	600b      	strmi	r3, [r1, #0]
 8013a88:	bf5c      	itt	pl
 8013a8a:	600b      	strpl	r3, [r1, #0]
 8013a8c:	2002      	movpl	r0, #2
 8013a8e:	4770      	bx	lr
 8013a90:	b298      	uxth	r0, r3
 8013a92:	b9a8      	cbnz	r0, 8013ac0 <__lo0bits+0x52>
 8013a94:	0c1b      	lsrs	r3, r3, #16
 8013a96:	2010      	movs	r0, #16
 8013a98:	f013 0fff 	tst.w	r3, #255	; 0xff
 8013a9c:	bf04      	itt	eq
 8013a9e:	0a1b      	lsreq	r3, r3, #8
 8013aa0:	3008      	addeq	r0, #8
 8013aa2:	071a      	lsls	r2, r3, #28
 8013aa4:	bf04      	itt	eq
 8013aa6:	091b      	lsreq	r3, r3, #4
 8013aa8:	3004      	addeq	r0, #4
 8013aaa:	079a      	lsls	r2, r3, #30
 8013aac:	bf04      	itt	eq
 8013aae:	089b      	lsreq	r3, r3, #2
 8013ab0:	3002      	addeq	r0, #2
 8013ab2:	07da      	lsls	r2, r3, #31
 8013ab4:	d402      	bmi.n	8013abc <__lo0bits+0x4e>
 8013ab6:	085b      	lsrs	r3, r3, #1
 8013ab8:	d006      	beq.n	8013ac8 <__lo0bits+0x5a>
 8013aba:	3001      	adds	r0, #1
 8013abc:	600b      	str	r3, [r1, #0]
 8013abe:	4770      	bx	lr
 8013ac0:	4610      	mov	r0, r2
 8013ac2:	e7e9      	b.n	8013a98 <__lo0bits+0x2a>
 8013ac4:	2000      	movs	r0, #0
 8013ac6:	4770      	bx	lr
 8013ac8:	2020      	movs	r0, #32
 8013aca:	4770      	bx	lr

08013acc <__i2b>:
 8013acc:	b510      	push	{r4, lr}
 8013ace:	460c      	mov	r4, r1
 8013ad0:	2101      	movs	r1, #1
 8013ad2:	f7ff ff27 	bl	8013924 <_Balloc>
 8013ad6:	2201      	movs	r2, #1
 8013ad8:	6144      	str	r4, [r0, #20]
 8013ada:	6102      	str	r2, [r0, #16]
 8013adc:	bd10      	pop	{r4, pc}

08013ade <__multiply>:
 8013ade:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013ae2:	4614      	mov	r4, r2
 8013ae4:	690a      	ldr	r2, [r1, #16]
 8013ae6:	6923      	ldr	r3, [r4, #16]
 8013ae8:	429a      	cmp	r2, r3
 8013aea:	bfb8      	it	lt
 8013aec:	460b      	movlt	r3, r1
 8013aee:	4688      	mov	r8, r1
 8013af0:	bfbc      	itt	lt
 8013af2:	46a0      	movlt	r8, r4
 8013af4:	461c      	movlt	r4, r3
 8013af6:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8013afa:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8013afe:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8013b02:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8013b06:	eb07 0609 	add.w	r6, r7, r9
 8013b0a:	42b3      	cmp	r3, r6
 8013b0c:	bfb8      	it	lt
 8013b0e:	3101      	addlt	r1, #1
 8013b10:	f7ff ff08 	bl	8013924 <_Balloc>
 8013b14:	f100 0514 	add.w	r5, r0, #20
 8013b18:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8013b1c:	462b      	mov	r3, r5
 8013b1e:	2200      	movs	r2, #0
 8013b20:	4573      	cmp	r3, lr
 8013b22:	d316      	bcc.n	8013b52 <__multiply+0x74>
 8013b24:	f104 0214 	add.w	r2, r4, #20
 8013b28:	f108 0114 	add.w	r1, r8, #20
 8013b2c:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8013b30:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8013b34:	9300      	str	r3, [sp, #0]
 8013b36:	9b00      	ldr	r3, [sp, #0]
 8013b38:	9201      	str	r2, [sp, #4]
 8013b3a:	4293      	cmp	r3, r2
 8013b3c:	d80c      	bhi.n	8013b58 <__multiply+0x7a>
 8013b3e:	2e00      	cmp	r6, #0
 8013b40:	dd03      	ble.n	8013b4a <__multiply+0x6c>
 8013b42:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8013b46:	2b00      	cmp	r3, #0
 8013b48:	d05d      	beq.n	8013c06 <__multiply+0x128>
 8013b4a:	6106      	str	r6, [r0, #16]
 8013b4c:	b003      	add	sp, #12
 8013b4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013b52:	f843 2b04 	str.w	r2, [r3], #4
 8013b56:	e7e3      	b.n	8013b20 <__multiply+0x42>
 8013b58:	f8b2 b000 	ldrh.w	fp, [r2]
 8013b5c:	f1bb 0f00 	cmp.w	fp, #0
 8013b60:	d023      	beq.n	8013baa <__multiply+0xcc>
 8013b62:	4689      	mov	r9, r1
 8013b64:	46ac      	mov	ip, r5
 8013b66:	f04f 0800 	mov.w	r8, #0
 8013b6a:	f859 4b04 	ldr.w	r4, [r9], #4
 8013b6e:	f8dc a000 	ldr.w	sl, [ip]
 8013b72:	b2a3      	uxth	r3, r4
 8013b74:	fa1f fa8a 	uxth.w	sl, sl
 8013b78:	fb0b a303 	mla	r3, fp, r3, sl
 8013b7c:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8013b80:	f8dc 4000 	ldr.w	r4, [ip]
 8013b84:	4443      	add	r3, r8
 8013b86:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8013b8a:	fb0b 840a 	mla	r4, fp, sl, r8
 8013b8e:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8013b92:	46e2      	mov	sl, ip
 8013b94:	b29b      	uxth	r3, r3
 8013b96:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8013b9a:	454f      	cmp	r7, r9
 8013b9c:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8013ba0:	f84a 3b04 	str.w	r3, [sl], #4
 8013ba4:	d82b      	bhi.n	8013bfe <__multiply+0x120>
 8013ba6:	f8cc 8004 	str.w	r8, [ip, #4]
 8013baa:	9b01      	ldr	r3, [sp, #4]
 8013bac:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8013bb0:	3204      	adds	r2, #4
 8013bb2:	f1ba 0f00 	cmp.w	sl, #0
 8013bb6:	d020      	beq.n	8013bfa <__multiply+0x11c>
 8013bb8:	682b      	ldr	r3, [r5, #0]
 8013bba:	4689      	mov	r9, r1
 8013bbc:	46a8      	mov	r8, r5
 8013bbe:	f04f 0b00 	mov.w	fp, #0
 8013bc2:	f8b9 c000 	ldrh.w	ip, [r9]
 8013bc6:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8013bca:	fb0a 440c 	mla	r4, sl, ip, r4
 8013bce:	445c      	add	r4, fp
 8013bd0:	46c4      	mov	ip, r8
 8013bd2:	b29b      	uxth	r3, r3
 8013bd4:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8013bd8:	f84c 3b04 	str.w	r3, [ip], #4
 8013bdc:	f859 3b04 	ldr.w	r3, [r9], #4
 8013be0:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8013be4:	0c1b      	lsrs	r3, r3, #16
 8013be6:	fb0a b303 	mla	r3, sl, r3, fp
 8013bea:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8013bee:	454f      	cmp	r7, r9
 8013bf0:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8013bf4:	d805      	bhi.n	8013c02 <__multiply+0x124>
 8013bf6:	f8c8 3004 	str.w	r3, [r8, #4]
 8013bfa:	3504      	adds	r5, #4
 8013bfc:	e79b      	b.n	8013b36 <__multiply+0x58>
 8013bfe:	46d4      	mov	ip, sl
 8013c00:	e7b3      	b.n	8013b6a <__multiply+0x8c>
 8013c02:	46e0      	mov	r8, ip
 8013c04:	e7dd      	b.n	8013bc2 <__multiply+0xe4>
 8013c06:	3e01      	subs	r6, #1
 8013c08:	e799      	b.n	8013b3e <__multiply+0x60>
	...

08013c0c <__pow5mult>:
 8013c0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013c10:	4615      	mov	r5, r2
 8013c12:	f012 0203 	ands.w	r2, r2, #3
 8013c16:	4606      	mov	r6, r0
 8013c18:	460f      	mov	r7, r1
 8013c1a:	d007      	beq.n	8013c2c <__pow5mult+0x20>
 8013c1c:	3a01      	subs	r2, #1
 8013c1e:	4c21      	ldr	r4, [pc, #132]	; (8013ca4 <__pow5mult+0x98>)
 8013c20:	2300      	movs	r3, #0
 8013c22:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8013c26:	f7ff fec8 	bl	80139ba <__multadd>
 8013c2a:	4607      	mov	r7, r0
 8013c2c:	10ad      	asrs	r5, r5, #2
 8013c2e:	d035      	beq.n	8013c9c <__pow5mult+0x90>
 8013c30:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8013c32:	b93c      	cbnz	r4, 8013c44 <__pow5mult+0x38>
 8013c34:	2010      	movs	r0, #16
 8013c36:	f7fd ffa1 	bl	8011b7c <malloc>
 8013c3a:	6270      	str	r0, [r6, #36]	; 0x24
 8013c3c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8013c40:	6004      	str	r4, [r0, #0]
 8013c42:	60c4      	str	r4, [r0, #12]
 8013c44:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8013c48:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8013c4c:	b94c      	cbnz	r4, 8013c62 <__pow5mult+0x56>
 8013c4e:	f240 2171 	movw	r1, #625	; 0x271
 8013c52:	4630      	mov	r0, r6
 8013c54:	f7ff ff3a 	bl	8013acc <__i2b>
 8013c58:	2300      	movs	r3, #0
 8013c5a:	f8c8 0008 	str.w	r0, [r8, #8]
 8013c5e:	4604      	mov	r4, r0
 8013c60:	6003      	str	r3, [r0, #0]
 8013c62:	f04f 0800 	mov.w	r8, #0
 8013c66:	07eb      	lsls	r3, r5, #31
 8013c68:	d50a      	bpl.n	8013c80 <__pow5mult+0x74>
 8013c6a:	4639      	mov	r1, r7
 8013c6c:	4622      	mov	r2, r4
 8013c6e:	4630      	mov	r0, r6
 8013c70:	f7ff ff35 	bl	8013ade <__multiply>
 8013c74:	4639      	mov	r1, r7
 8013c76:	4681      	mov	r9, r0
 8013c78:	4630      	mov	r0, r6
 8013c7a:	f7ff fe87 	bl	801398c <_Bfree>
 8013c7e:	464f      	mov	r7, r9
 8013c80:	106d      	asrs	r5, r5, #1
 8013c82:	d00b      	beq.n	8013c9c <__pow5mult+0x90>
 8013c84:	6820      	ldr	r0, [r4, #0]
 8013c86:	b938      	cbnz	r0, 8013c98 <__pow5mult+0x8c>
 8013c88:	4622      	mov	r2, r4
 8013c8a:	4621      	mov	r1, r4
 8013c8c:	4630      	mov	r0, r6
 8013c8e:	f7ff ff26 	bl	8013ade <__multiply>
 8013c92:	6020      	str	r0, [r4, #0]
 8013c94:	f8c0 8000 	str.w	r8, [r0]
 8013c98:	4604      	mov	r4, r0
 8013c9a:	e7e4      	b.n	8013c66 <__pow5mult+0x5a>
 8013c9c:	4638      	mov	r0, r7
 8013c9e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013ca2:	bf00      	nop
 8013ca4:	08016550 	.word	0x08016550

08013ca8 <__lshift>:
 8013ca8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013cac:	460c      	mov	r4, r1
 8013cae:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8013cb2:	6923      	ldr	r3, [r4, #16]
 8013cb4:	6849      	ldr	r1, [r1, #4]
 8013cb6:	eb0a 0903 	add.w	r9, sl, r3
 8013cba:	68a3      	ldr	r3, [r4, #8]
 8013cbc:	4607      	mov	r7, r0
 8013cbe:	4616      	mov	r6, r2
 8013cc0:	f109 0501 	add.w	r5, r9, #1
 8013cc4:	42ab      	cmp	r3, r5
 8013cc6:	db32      	blt.n	8013d2e <__lshift+0x86>
 8013cc8:	4638      	mov	r0, r7
 8013cca:	f7ff fe2b 	bl	8013924 <_Balloc>
 8013cce:	2300      	movs	r3, #0
 8013cd0:	4680      	mov	r8, r0
 8013cd2:	f100 0114 	add.w	r1, r0, #20
 8013cd6:	461a      	mov	r2, r3
 8013cd8:	4553      	cmp	r3, sl
 8013cda:	db2b      	blt.n	8013d34 <__lshift+0x8c>
 8013cdc:	6920      	ldr	r0, [r4, #16]
 8013cde:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8013ce2:	f104 0314 	add.w	r3, r4, #20
 8013ce6:	f016 021f 	ands.w	r2, r6, #31
 8013cea:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8013cee:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8013cf2:	d025      	beq.n	8013d40 <__lshift+0x98>
 8013cf4:	f1c2 0e20 	rsb	lr, r2, #32
 8013cf8:	2000      	movs	r0, #0
 8013cfa:	681e      	ldr	r6, [r3, #0]
 8013cfc:	468a      	mov	sl, r1
 8013cfe:	4096      	lsls	r6, r2
 8013d00:	4330      	orrs	r0, r6
 8013d02:	f84a 0b04 	str.w	r0, [sl], #4
 8013d06:	f853 0b04 	ldr.w	r0, [r3], #4
 8013d0a:	459c      	cmp	ip, r3
 8013d0c:	fa20 f00e 	lsr.w	r0, r0, lr
 8013d10:	d814      	bhi.n	8013d3c <__lshift+0x94>
 8013d12:	6048      	str	r0, [r1, #4]
 8013d14:	b108      	cbz	r0, 8013d1a <__lshift+0x72>
 8013d16:	f109 0502 	add.w	r5, r9, #2
 8013d1a:	3d01      	subs	r5, #1
 8013d1c:	4638      	mov	r0, r7
 8013d1e:	f8c8 5010 	str.w	r5, [r8, #16]
 8013d22:	4621      	mov	r1, r4
 8013d24:	f7ff fe32 	bl	801398c <_Bfree>
 8013d28:	4640      	mov	r0, r8
 8013d2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013d2e:	3101      	adds	r1, #1
 8013d30:	005b      	lsls	r3, r3, #1
 8013d32:	e7c7      	b.n	8013cc4 <__lshift+0x1c>
 8013d34:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8013d38:	3301      	adds	r3, #1
 8013d3a:	e7cd      	b.n	8013cd8 <__lshift+0x30>
 8013d3c:	4651      	mov	r1, sl
 8013d3e:	e7dc      	b.n	8013cfa <__lshift+0x52>
 8013d40:	3904      	subs	r1, #4
 8013d42:	f853 2b04 	ldr.w	r2, [r3], #4
 8013d46:	f841 2f04 	str.w	r2, [r1, #4]!
 8013d4a:	459c      	cmp	ip, r3
 8013d4c:	d8f9      	bhi.n	8013d42 <__lshift+0x9a>
 8013d4e:	e7e4      	b.n	8013d1a <__lshift+0x72>

08013d50 <__mcmp>:
 8013d50:	6903      	ldr	r3, [r0, #16]
 8013d52:	690a      	ldr	r2, [r1, #16]
 8013d54:	1a9b      	subs	r3, r3, r2
 8013d56:	b530      	push	{r4, r5, lr}
 8013d58:	d10c      	bne.n	8013d74 <__mcmp+0x24>
 8013d5a:	0092      	lsls	r2, r2, #2
 8013d5c:	3014      	adds	r0, #20
 8013d5e:	3114      	adds	r1, #20
 8013d60:	1884      	adds	r4, r0, r2
 8013d62:	4411      	add	r1, r2
 8013d64:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8013d68:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8013d6c:	4295      	cmp	r5, r2
 8013d6e:	d003      	beq.n	8013d78 <__mcmp+0x28>
 8013d70:	d305      	bcc.n	8013d7e <__mcmp+0x2e>
 8013d72:	2301      	movs	r3, #1
 8013d74:	4618      	mov	r0, r3
 8013d76:	bd30      	pop	{r4, r5, pc}
 8013d78:	42a0      	cmp	r0, r4
 8013d7a:	d3f3      	bcc.n	8013d64 <__mcmp+0x14>
 8013d7c:	e7fa      	b.n	8013d74 <__mcmp+0x24>
 8013d7e:	f04f 33ff 	mov.w	r3, #4294967295
 8013d82:	e7f7      	b.n	8013d74 <__mcmp+0x24>

08013d84 <__mdiff>:
 8013d84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013d88:	460d      	mov	r5, r1
 8013d8a:	4607      	mov	r7, r0
 8013d8c:	4611      	mov	r1, r2
 8013d8e:	4628      	mov	r0, r5
 8013d90:	4614      	mov	r4, r2
 8013d92:	f7ff ffdd 	bl	8013d50 <__mcmp>
 8013d96:	1e06      	subs	r6, r0, #0
 8013d98:	d108      	bne.n	8013dac <__mdiff+0x28>
 8013d9a:	4631      	mov	r1, r6
 8013d9c:	4638      	mov	r0, r7
 8013d9e:	f7ff fdc1 	bl	8013924 <_Balloc>
 8013da2:	2301      	movs	r3, #1
 8013da4:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8013da8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013dac:	bfa4      	itt	ge
 8013dae:	4623      	movge	r3, r4
 8013db0:	462c      	movge	r4, r5
 8013db2:	4638      	mov	r0, r7
 8013db4:	6861      	ldr	r1, [r4, #4]
 8013db6:	bfa6      	itte	ge
 8013db8:	461d      	movge	r5, r3
 8013dba:	2600      	movge	r6, #0
 8013dbc:	2601      	movlt	r6, #1
 8013dbe:	f7ff fdb1 	bl	8013924 <_Balloc>
 8013dc2:	692b      	ldr	r3, [r5, #16]
 8013dc4:	60c6      	str	r6, [r0, #12]
 8013dc6:	6926      	ldr	r6, [r4, #16]
 8013dc8:	f105 0914 	add.w	r9, r5, #20
 8013dcc:	f104 0214 	add.w	r2, r4, #20
 8013dd0:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8013dd4:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8013dd8:	f100 0514 	add.w	r5, r0, #20
 8013ddc:	f04f 0e00 	mov.w	lr, #0
 8013de0:	f852 ab04 	ldr.w	sl, [r2], #4
 8013de4:	f859 4b04 	ldr.w	r4, [r9], #4
 8013de8:	fa1e f18a 	uxtah	r1, lr, sl
 8013dec:	b2a3      	uxth	r3, r4
 8013dee:	1ac9      	subs	r1, r1, r3
 8013df0:	0c23      	lsrs	r3, r4, #16
 8013df2:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 8013df6:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8013dfa:	b289      	uxth	r1, r1
 8013dfc:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8013e00:	45c8      	cmp	r8, r9
 8013e02:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8013e06:	4694      	mov	ip, r2
 8013e08:	f845 3b04 	str.w	r3, [r5], #4
 8013e0c:	d8e8      	bhi.n	8013de0 <__mdiff+0x5c>
 8013e0e:	45bc      	cmp	ip, r7
 8013e10:	d304      	bcc.n	8013e1c <__mdiff+0x98>
 8013e12:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8013e16:	b183      	cbz	r3, 8013e3a <__mdiff+0xb6>
 8013e18:	6106      	str	r6, [r0, #16]
 8013e1a:	e7c5      	b.n	8013da8 <__mdiff+0x24>
 8013e1c:	f85c 1b04 	ldr.w	r1, [ip], #4
 8013e20:	fa1e f381 	uxtah	r3, lr, r1
 8013e24:	141a      	asrs	r2, r3, #16
 8013e26:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8013e2a:	b29b      	uxth	r3, r3
 8013e2c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8013e30:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8013e34:	f845 3b04 	str.w	r3, [r5], #4
 8013e38:	e7e9      	b.n	8013e0e <__mdiff+0x8a>
 8013e3a:	3e01      	subs	r6, #1
 8013e3c:	e7e9      	b.n	8013e12 <__mdiff+0x8e>

08013e3e <__d2b>:
 8013e3e:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8013e42:	460e      	mov	r6, r1
 8013e44:	2101      	movs	r1, #1
 8013e46:	ec59 8b10 	vmov	r8, r9, d0
 8013e4a:	4615      	mov	r5, r2
 8013e4c:	f7ff fd6a 	bl	8013924 <_Balloc>
 8013e50:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8013e54:	4607      	mov	r7, r0
 8013e56:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8013e5a:	bb34      	cbnz	r4, 8013eaa <__d2b+0x6c>
 8013e5c:	9301      	str	r3, [sp, #4]
 8013e5e:	f1b8 0300 	subs.w	r3, r8, #0
 8013e62:	d027      	beq.n	8013eb4 <__d2b+0x76>
 8013e64:	a802      	add	r0, sp, #8
 8013e66:	f840 3d08 	str.w	r3, [r0, #-8]!
 8013e6a:	f7ff fe00 	bl	8013a6e <__lo0bits>
 8013e6e:	9900      	ldr	r1, [sp, #0]
 8013e70:	b1f0      	cbz	r0, 8013eb0 <__d2b+0x72>
 8013e72:	9a01      	ldr	r2, [sp, #4]
 8013e74:	f1c0 0320 	rsb	r3, r0, #32
 8013e78:	fa02 f303 	lsl.w	r3, r2, r3
 8013e7c:	430b      	orrs	r3, r1
 8013e7e:	40c2      	lsrs	r2, r0
 8013e80:	617b      	str	r3, [r7, #20]
 8013e82:	9201      	str	r2, [sp, #4]
 8013e84:	9b01      	ldr	r3, [sp, #4]
 8013e86:	61bb      	str	r3, [r7, #24]
 8013e88:	2b00      	cmp	r3, #0
 8013e8a:	bf14      	ite	ne
 8013e8c:	2102      	movne	r1, #2
 8013e8e:	2101      	moveq	r1, #1
 8013e90:	6139      	str	r1, [r7, #16]
 8013e92:	b1c4      	cbz	r4, 8013ec6 <__d2b+0x88>
 8013e94:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8013e98:	4404      	add	r4, r0
 8013e9a:	6034      	str	r4, [r6, #0]
 8013e9c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8013ea0:	6028      	str	r0, [r5, #0]
 8013ea2:	4638      	mov	r0, r7
 8013ea4:	b003      	add	sp, #12
 8013ea6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013eaa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8013eae:	e7d5      	b.n	8013e5c <__d2b+0x1e>
 8013eb0:	6179      	str	r1, [r7, #20]
 8013eb2:	e7e7      	b.n	8013e84 <__d2b+0x46>
 8013eb4:	a801      	add	r0, sp, #4
 8013eb6:	f7ff fdda 	bl	8013a6e <__lo0bits>
 8013eba:	9b01      	ldr	r3, [sp, #4]
 8013ebc:	617b      	str	r3, [r7, #20]
 8013ebe:	2101      	movs	r1, #1
 8013ec0:	6139      	str	r1, [r7, #16]
 8013ec2:	3020      	adds	r0, #32
 8013ec4:	e7e5      	b.n	8013e92 <__d2b+0x54>
 8013ec6:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8013eca:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8013ece:	6030      	str	r0, [r6, #0]
 8013ed0:	6918      	ldr	r0, [r3, #16]
 8013ed2:	f7ff fdad 	bl	8013a30 <__hi0bits>
 8013ed6:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8013eda:	e7e1      	b.n	8013ea0 <__d2b+0x62>

08013edc <_calloc_r>:
 8013edc:	b538      	push	{r3, r4, r5, lr}
 8013ede:	fb02 f401 	mul.w	r4, r2, r1
 8013ee2:	4621      	mov	r1, r4
 8013ee4:	f7fd feb4 	bl	8011c50 <_malloc_r>
 8013ee8:	4605      	mov	r5, r0
 8013eea:	b118      	cbz	r0, 8013ef4 <_calloc_r+0x18>
 8013eec:	4622      	mov	r2, r4
 8013eee:	2100      	movs	r1, #0
 8013ef0:	f7fd fe57 	bl	8011ba2 <memset>
 8013ef4:	4628      	mov	r0, r5
 8013ef6:	bd38      	pop	{r3, r4, r5, pc}

08013ef8 <__ssputs_r>:
 8013ef8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013efc:	688e      	ldr	r6, [r1, #8]
 8013efe:	429e      	cmp	r6, r3
 8013f00:	4682      	mov	sl, r0
 8013f02:	460c      	mov	r4, r1
 8013f04:	4690      	mov	r8, r2
 8013f06:	4699      	mov	r9, r3
 8013f08:	d837      	bhi.n	8013f7a <__ssputs_r+0x82>
 8013f0a:	898a      	ldrh	r2, [r1, #12]
 8013f0c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8013f10:	d031      	beq.n	8013f76 <__ssputs_r+0x7e>
 8013f12:	6825      	ldr	r5, [r4, #0]
 8013f14:	6909      	ldr	r1, [r1, #16]
 8013f16:	1a6f      	subs	r7, r5, r1
 8013f18:	6965      	ldr	r5, [r4, #20]
 8013f1a:	2302      	movs	r3, #2
 8013f1c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8013f20:	fb95 f5f3 	sdiv	r5, r5, r3
 8013f24:	f109 0301 	add.w	r3, r9, #1
 8013f28:	443b      	add	r3, r7
 8013f2a:	429d      	cmp	r5, r3
 8013f2c:	bf38      	it	cc
 8013f2e:	461d      	movcc	r5, r3
 8013f30:	0553      	lsls	r3, r2, #21
 8013f32:	d530      	bpl.n	8013f96 <__ssputs_r+0x9e>
 8013f34:	4629      	mov	r1, r5
 8013f36:	f7fd fe8b 	bl	8011c50 <_malloc_r>
 8013f3a:	4606      	mov	r6, r0
 8013f3c:	b950      	cbnz	r0, 8013f54 <__ssputs_r+0x5c>
 8013f3e:	230c      	movs	r3, #12
 8013f40:	f8ca 3000 	str.w	r3, [sl]
 8013f44:	89a3      	ldrh	r3, [r4, #12]
 8013f46:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013f4a:	81a3      	strh	r3, [r4, #12]
 8013f4c:	f04f 30ff 	mov.w	r0, #4294967295
 8013f50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013f54:	463a      	mov	r2, r7
 8013f56:	6921      	ldr	r1, [r4, #16]
 8013f58:	f7fd fe18 	bl	8011b8c <memcpy>
 8013f5c:	89a3      	ldrh	r3, [r4, #12]
 8013f5e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8013f62:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013f66:	81a3      	strh	r3, [r4, #12]
 8013f68:	6126      	str	r6, [r4, #16]
 8013f6a:	6165      	str	r5, [r4, #20]
 8013f6c:	443e      	add	r6, r7
 8013f6e:	1bed      	subs	r5, r5, r7
 8013f70:	6026      	str	r6, [r4, #0]
 8013f72:	60a5      	str	r5, [r4, #8]
 8013f74:	464e      	mov	r6, r9
 8013f76:	454e      	cmp	r6, r9
 8013f78:	d900      	bls.n	8013f7c <__ssputs_r+0x84>
 8013f7a:	464e      	mov	r6, r9
 8013f7c:	4632      	mov	r2, r6
 8013f7e:	4641      	mov	r1, r8
 8013f80:	6820      	ldr	r0, [r4, #0]
 8013f82:	f000 faf7 	bl	8014574 <memmove>
 8013f86:	68a3      	ldr	r3, [r4, #8]
 8013f88:	1b9b      	subs	r3, r3, r6
 8013f8a:	60a3      	str	r3, [r4, #8]
 8013f8c:	6823      	ldr	r3, [r4, #0]
 8013f8e:	441e      	add	r6, r3
 8013f90:	6026      	str	r6, [r4, #0]
 8013f92:	2000      	movs	r0, #0
 8013f94:	e7dc      	b.n	8013f50 <__ssputs_r+0x58>
 8013f96:	462a      	mov	r2, r5
 8013f98:	f000 fb05 	bl	80145a6 <_realloc_r>
 8013f9c:	4606      	mov	r6, r0
 8013f9e:	2800      	cmp	r0, #0
 8013fa0:	d1e2      	bne.n	8013f68 <__ssputs_r+0x70>
 8013fa2:	6921      	ldr	r1, [r4, #16]
 8013fa4:	4650      	mov	r0, sl
 8013fa6:	f7fd fe05 	bl	8011bb4 <_free_r>
 8013faa:	e7c8      	b.n	8013f3e <__ssputs_r+0x46>

08013fac <_svfiprintf_r>:
 8013fac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013fb0:	461d      	mov	r5, r3
 8013fb2:	898b      	ldrh	r3, [r1, #12]
 8013fb4:	061f      	lsls	r7, r3, #24
 8013fb6:	b09d      	sub	sp, #116	; 0x74
 8013fb8:	4680      	mov	r8, r0
 8013fba:	460c      	mov	r4, r1
 8013fbc:	4616      	mov	r6, r2
 8013fbe:	d50f      	bpl.n	8013fe0 <_svfiprintf_r+0x34>
 8013fc0:	690b      	ldr	r3, [r1, #16]
 8013fc2:	b96b      	cbnz	r3, 8013fe0 <_svfiprintf_r+0x34>
 8013fc4:	2140      	movs	r1, #64	; 0x40
 8013fc6:	f7fd fe43 	bl	8011c50 <_malloc_r>
 8013fca:	6020      	str	r0, [r4, #0]
 8013fcc:	6120      	str	r0, [r4, #16]
 8013fce:	b928      	cbnz	r0, 8013fdc <_svfiprintf_r+0x30>
 8013fd0:	230c      	movs	r3, #12
 8013fd2:	f8c8 3000 	str.w	r3, [r8]
 8013fd6:	f04f 30ff 	mov.w	r0, #4294967295
 8013fda:	e0c8      	b.n	801416e <_svfiprintf_r+0x1c2>
 8013fdc:	2340      	movs	r3, #64	; 0x40
 8013fde:	6163      	str	r3, [r4, #20]
 8013fe0:	2300      	movs	r3, #0
 8013fe2:	9309      	str	r3, [sp, #36]	; 0x24
 8013fe4:	2320      	movs	r3, #32
 8013fe6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8013fea:	2330      	movs	r3, #48	; 0x30
 8013fec:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8013ff0:	9503      	str	r5, [sp, #12]
 8013ff2:	f04f 0b01 	mov.w	fp, #1
 8013ff6:	4637      	mov	r7, r6
 8013ff8:	463d      	mov	r5, r7
 8013ffa:	f815 3b01 	ldrb.w	r3, [r5], #1
 8013ffe:	b10b      	cbz	r3, 8014004 <_svfiprintf_r+0x58>
 8014000:	2b25      	cmp	r3, #37	; 0x25
 8014002:	d13e      	bne.n	8014082 <_svfiprintf_r+0xd6>
 8014004:	ebb7 0a06 	subs.w	sl, r7, r6
 8014008:	d00b      	beq.n	8014022 <_svfiprintf_r+0x76>
 801400a:	4653      	mov	r3, sl
 801400c:	4632      	mov	r2, r6
 801400e:	4621      	mov	r1, r4
 8014010:	4640      	mov	r0, r8
 8014012:	f7ff ff71 	bl	8013ef8 <__ssputs_r>
 8014016:	3001      	adds	r0, #1
 8014018:	f000 80a4 	beq.w	8014164 <_svfiprintf_r+0x1b8>
 801401c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801401e:	4453      	add	r3, sl
 8014020:	9309      	str	r3, [sp, #36]	; 0x24
 8014022:	783b      	ldrb	r3, [r7, #0]
 8014024:	2b00      	cmp	r3, #0
 8014026:	f000 809d 	beq.w	8014164 <_svfiprintf_r+0x1b8>
 801402a:	2300      	movs	r3, #0
 801402c:	f04f 32ff 	mov.w	r2, #4294967295
 8014030:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8014034:	9304      	str	r3, [sp, #16]
 8014036:	9307      	str	r3, [sp, #28]
 8014038:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801403c:	931a      	str	r3, [sp, #104]	; 0x68
 801403e:	462f      	mov	r7, r5
 8014040:	2205      	movs	r2, #5
 8014042:	f817 1b01 	ldrb.w	r1, [r7], #1
 8014046:	4850      	ldr	r0, [pc, #320]	; (8014188 <_svfiprintf_r+0x1dc>)
 8014048:	f7ec f8a2 	bl	8000190 <memchr>
 801404c:	9b04      	ldr	r3, [sp, #16]
 801404e:	b9d0      	cbnz	r0, 8014086 <_svfiprintf_r+0xda>
 8014050:	06d9      	lsls	r1, r3, #27
 8014052:	bf44      	itt	mi
 8014054:	2220      	movmi	r2, #32
 8014056:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 801405a:	071a      	lsls	r2, r3, #28
 801405c:	bf44      	itt	mi
 801405e:	222b      	movmi	r2, #43	; 0x2b
 8014060:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8014064:	782a      	ldrb	r2, [r5, #0]
 8014066:	2a2a      	cmp	r2, #42	; 0x2a
 8014068:	d015      	beq.n	8014096 <_svfiprintf_r+0xea>
 801406a:	9a07      	ldr	r2, [sp, #28]
 801406c:	462f      	mov	r7, r5
 801406e:	2000      	movs	r0, #0
 8014070:	250a      	movs	r5, #10
 8014072:	4639      	mov	r1, r7
 8014074:	f811 3b01 	ldrb.w	r3, [r1], #1
 8014078:	3b30      	subs	r3, #48	; 0x30
 801407a:	2b09      	cmp	r3, #9
 801407c:	d94d      	bls.n	801411a <_svfiprintf_r+0x16e>
 801407e:	b1b8      	cbz	r0, 80140b0 <_svfiprintf_r+0x104>
 8014080:	e00f      	b.n	80140a2 <_svfiprintf_r+0xf6>
 8014082:	462f      	mov	r7, r5
 8014084:	e7b8      	b.n	8013ff8 <_svfiprintf_r+0x4c>
 8014086:	4a40      	ldr	r2, [pc, #256]	; (8014188 <_svfiprintf_r+0x1dc>)
 8014088:	1a80      	subs	r0, r0, r2
 801408a:	fa0b f000 	lsl.w	r0, fp, r0
 801408e:	4318      	orrs	r0, r3
 8014090:	9004      	str	r0, [sp, #16]
 8014092:	463d      	mov	r5, r7
 8014094:	e7d3      	b.n	801403e <_svfiprintf_r+0x92>
 8014096:	9a03      	ldr	r2, [sp, #12]
 8014098:	1d11      	adds	r1, r2, #4
 801409a:	6812      	ldr	r2, [r2, #0]
 801409c:	9103      	str	r1, [sp, #12]
 801409e:	2a00      	cmp	r2, #0
 80140a0:	db01      	blt.n	80140a6 <_svfiprintf_r+0xfa>
 80140a2:	9207      	str	r2, [sp, #28]
 80140a4:	e004      	b.n	80140b0 <_svfiprintf_r+0x104>
 80140a6:	4252      	negs	r2, r2
 80140a8:	f043 0302 	orr.w	r3, r3, #2
 80140ac:	9207      	str	r2, [sp, #28]
 80140ae:	9304      	str	r3, [sp, #16]
 80140b0:	783b      	ldrb	r3, [r7, #0]
 80140b2:	2b2e      	cmp	r3, #46	; 0x2e
 80140b4:	d10c      	bne.n	80140d0 <_svfiprintf_r+0x124>
 80140b6:	787b      	ldrb	r3, [r7, #1]
 80140b8:	2b2a      	cmp	r3, #42	; 0x2a
 80140ba:	d133      	bne.n	8014124 <_svfiprintf_r+0x178>
 80140bc:	9b03      	ldr	r3, [sp, #12]
 80140be:	1d1a      	adds	r2, r3, #4
 80140c0:	681b      	ldr	r3, [r3, #0]
 80140c2:	9203      	str	r2, [sp, #12]
 80140c4:	2b00      	cmp	r3, #0
 80140c6:	bfb8      	it	lt
 80140c8:	f04f 33ff 	movlt.w	r3, #4294967295
 80140cc:	3702      	adds	r7, #2
 80140ce:	9305      	str	r3, [sp, #20]
 80140d0:	4d2e      	ldr	r5, [pc, #184]	; (801418c <_svfiprintf_r+0x1e0>)
 80140d2:	7839      	ldrb	r1, [r7, #0]
 80140d4:	2203      	movs	r2, #3
 80140d6:	4628      	mov	r0, r5
 80140d8:	f7ec f85a 	bl	8000190 <memchr>
 80140dc:	b138      	cbz	r0, 80140ee <_svfiprintf_r+0x142>
 80140de:	2340      	movs	r3, #64	; 0x40
 80140e0:	1b40      	subs	r0, r0, r5
 80140e2:	fa03 f000 	lsl.w	r0, r3, r0
 80140e6:	9b04      	ldr	r3, [sp, #16]
 80140e8:	4303      	orrs	r3, r0
 80140ea:	3701      	adds	r7, #1
 80140ec:	9304      	str	r3, [sp, #16]
 80140ee:	7839      	ldrb	r1, [r7, #0]
 80140f0:	4827      	ldr	r0, [pc, #156]	; (8014190 <_svfiprintf_r+0x1e4>)
 80140f2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80140f6:	2206      	movs	r2, #6
 80140f8:	1c7e      	adds	r6, r7, #1
 80140fa:	f7ec f849 	bl	8000190 <memchr>
 80140fe:	2800      	cmp	r0, #0
 8014100:	d038      	beq.n	8014174 <_svfiprintf_r+0x1c8>
 8014102:	4b24      	ldr	r3, [pc, #144]	; (8014194 <_svfiprintf_r+0x1e8>)
 8014104:	bb13      	cbnz	r3, 801414c <_svfiprintf_r+0x1a0>
 8014106:	9b03      	ldr	r3, [sp, #12]
 8014108:	3307      	adds	r3, #7
 801410a:	f023 0307 	bic.w	r3, r3, #7
 801410e:	3308      	adds	r3, #8
 8014110:	9303      	str	r3, [sp, #12]
 8014112:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014114:	444b      	add	r3, r9
 8014116:	9309      	str	r3, [sp, #36]	; 0x24
 8014118:	e76d      	b.n	8013ff6 <_svfiprintf_r+0x4a>
 801411a:	fb05 3202 	mla	r2, r5, r2, r3
 801411e:	2001      	movs	r0, #1
 8014120:	460f      	mov	r7, r1
 8014122:	e7a6      	b.n	8014072 <_svfiprintf_r+0xc6>
 8014124:	2300      	movs	r3, #0
 8014126:	3701      	adds	r7, #1
 8014128:	9305      	str	r3, [sp, #20]
 801412a:	4619      	mov	r1, r3
 801412c:	250a      	movs	r5, #10
 801412e:	4638      	mov	r0, r7
 8014130:	f810 2b01 	ldrb.w	r2, [r0], #1
 8014134:	3a30      	subs	r2, #48	; 0x30
 8014136:	2a09      	cmp	r2, #9
 8014138:	d903      	bls.n	8014142 <_svfiprintf_r+0x196>
 801413a:	2b00      	cmp	r3, #0
 801413c:	d0c8      	beq.n	80140d0 <_svfiprintf_r+0x124>
 801413e:	9105      	str	r1, [sp, #20]
 8014140:	e7c6      	b.n	80140d0 <_svfiprintf_r+0x124>
 8014142:	fb05 2101 	mla	r1, r5, r1, r2
 8014146:	2301      	movs	r3, #1
 8014148:	4607      	mov	r7, r0
 801414a:	e7f0      	b.n	801412e <_svfiprintf_r+0x182>
 801414c:	ab03      	add	r3, sp, #12
 801414e:	9300      	str	r3, [sp, #0]
 8014150:	4622      	mov	r2, r4
 8014152:	4b11      	ldr	r3, [pc, #68]	; (8014198 <_svfiprintf_r+0x1ec>)
 8014154:	a904      	add	r1, sp, #16
 8014156:	4640      	mov	r0, r8
 8014158:	f7fd fe68 	bl	8011e2c <_printf_float>
 801415c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8014160:	4681      	mov	r9, r0
 8014162:	d1d6      	bne.n	8014112 <_svfiprintf_r+0x166>
 8014164:	89a3      	ldrh	r3, [r4, #12]
 8014166:	065b      	lsls	r3, r3, #25
 8014168:	f53f af35 	bmi.w	8013fd6 <_svfiprintf_r+0x2a>
 801416c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801416e:	b01d      	add	sp, #116	; 0x74
 8014170:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014174:	ab03      	add	r3, sp, #12
 8014176:	9300      	str	r3, [sp, #0]
 8014178:	4622      	mov	r2, r4
 801417a:	4b07      	ldr	r3, [pc, #28]	; (8014198 <_svfiprintf_r+0x1ec>)
 801417c:	a904      	add	r1, sp, #16
 801417e:	4640      	mov	r0, r8
 8014180:	f7fe f90a 	bl	8012398 <_printf_i>
 8014184:	e7ea      	b.n	801415c <_svfiprintf_r+0x1b0>
 8014186:	bf00      	nop
 8014188:	0801655c 	.word	0x0801655c
 801418c:	08016562 	.word	0x08016562
 8014190:	08016566 	.word	0x08016566
 8014194:	08011e2d 	.word	0x08011e2d
 8014198:	08013ef9 	.word	0x08013ef9

0801419c <__sfputc_r>:
 801419c:	6893      	ldr	r3, [r2, #8]
 801419e:	3b01      	subs	r3, #1
 80141a0:	2b00      	cmp	r3, #0
 80141a2:	b410      	push	{r4}
 80141a4:	6093      	str	r3, [r2, #8]
 80141a6:	da08      	bge.n	80141ba <__sfputc_r+0x1e>
 80141a8:	6994      	ldr	r4, [r2, #24]
 80141aa:	42a3      	cmp	r3, r4
 80141ac:	db01      	blt.n	80141b2 <__sfputc_r+0x16>
 80141ae:	290a      	cmp	r1, #10
 80141b0:	d103      	bne.n	80141ba <__sfputc_r+0x1e>
 80141b2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80141b6:	f7fe bac3 	b.w	8012740 <__swbuf_r>
 80141ba:	6813      	ldr	r3, [r2, #0]
 80141bc:	1c58      	adds	r0, r3, #1
 80141be:	6010      	str	r0, [r2, #0]
 80141c0:	7019      	strb	r1, [r3, #0]
 80141c2:	4608      	mov	r0, r1
 80141c4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80141c8:	4770      	bx	lr

080141ca <__sfputs_r>:
 80141ca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80141cc:	4606      	mov	r6, r0
 80141ce:	460f      	mov	r7, r1
 80141d0:	4614      	mov	r4, r2
 80141d2:	18d5      	adds	r5, r2, r3
 80141d4:	42ac      	cmp	r4, r5
 80141d6:	d101      	bne.n	80141dc <__sfputs_r+0x12>
 80141d8:	2000      	movs	r0, #0
 80141da:	e007      	b.n	80141ec <__sfputs_r+0x22>
 80141dc:	463a      	mov	r2, r7
 80141de:	f814 1b01 	ldrb.w	r1, [r4], #1
 80141e2:	4630      	mov	r0, r6
 80141e4:	f7ff ffda 	bl	801419c <__sfputc_r>
 80141e8:	1c43      	adds	r3, r0, #1
 80141ea:	d1f3      	bne.n	80141d4 <__sfputs_r+0xa>
 80141ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080141f0 <_vfiprintf_r>:
 80141f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80141f4:	460c      	mov	r4, r1
 80141f6:	b09d      	sub	sp, #116	; 0x74
 80141f8:	4617      	mov	r7, r2
 80141fa:	461d      	mov	r5, r3
 80141fc:	4606      	mov	r6, r0
 80141fe:	b118      	cbz	r0, 8014208 <_vfiprintf_r+0x18>
 8014200:	6983      	ldr	r3, [r0, #24]
 8014202:	b90b      	cbnz	r3, 8014208 <_vfiprintf_r+0x18>
 8014204:	f7ff fa90 	bl	8013728 <__sinit>
 8014208:	4b7c      	ldr	r3, [pc, #496]	; (80143fc <_vfiprintf_r+0x20c>)
 801420a:	429c      	cmp	r4, r3
 801420c:	d158      	bne.n	80142c0 <_vfiprintf_r+0xd0>
 801420e:	6874      	ldr	r4, [r6, #4]
 8014210:	89a3      	ldrh	r3, [r4, #12]
 8014212:	0718      	lsls	r0, r3, #28
 8014214:	d55e      	bpl.n	80142d4 <_vfiprintf_r+0xe4>
 8014216:	6923      	ldr	r3, [r4, #16]
 8014218:	2b00      	cmp	r3, #0
 801421a:	d05b      	beq.n	80142d4 <_vfiprintf_r+0xe4>
 801421c:	2300      	movs	r3, #0
 801421e:	9309      	str	r3, [sp, #36]	; 0x24
 8014220:	2320      	movs	r3, #32
 8014222:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8014226:	2330      	movs	r3, #48	; 0x30
 8014228:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801422c:	9503      	str	r5, [sp, #12]
 801422e:	f04f 0b01 	mov.w	fp, #1
 8014232:	46b8      	mov	r8, r7
 8014234:	4645      	mov	r5, r8
 8014236:	f815 3b01 	ldrb.w	r3, [r5], #1
 801423a:	b10b      	cbz	r3, 8014240 <_vfiprintf_r+0x50>
 801423c:	2b25      	cmp	r3, #37	; 0x25
 801423e:	d154      	bne.n	80142ea <_vfiprintf_r+0xfa>
 8014240:	ebb8 0a07 	subs.w	sl, r8, r7
 8014244:	d00b      	beq.n	801425e <_vfiprintf_r+0x6e>
 8014246:	4653      	mov	r3, sl
 8014248:	463a      	mov	r2, r7
 801424a:	4621      	mov	r1, r4
 801424c:	4630      	mov	r0, r6
 801424e:	f7ff ffbc 	bl	80141ca <__sfputs_r>
 8014252:	3001      	adds	r0, #1
 8014254:	f000 80c2 	beq.w	80143dc <_vfiprintf_r+0x1ec>
 8014258:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801425a:	4453      	add	r3, sl
 801425c:	9309      	str	r3, [sp, #36]	; 0x24
 801425e:	f898 3000 	ldrb.w	r3, [r8]
 8014262:	2b00      	cmp	r3, #0
 8014264:	f000 80ba 	beq.w	80143dc <_vfiprintf_r+0x1ec>
 8014268:	2300      	movs	r3, #0
 801426a:	f04f 32ff 	mov.w	r2, #4294967295
 801426e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8014272:	9304      	str	r3, [sp, #16]
 8014274:	9307      	str	r3, [sp, #28]
 8014276:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801427a:	931a      	str	r3, [sp, #104]	; 0x68
 801427c:	46a8      	mov	r8, r5
 801427e:	2205      	movs	r2, #5
 8014280:	f818 1b01 	ldrb.w	r1, [r8], #1
 8014284:	485e      	ldr	r0, [pc, #376]	; (8014400 <_vfiprintf_r+0x210>)
 8014286:	f7eb ff83 	bl	8000190 <memchr>
 801428a:	9b04      	ldr	r3, [sp, #16]
 801428c:	bb78      	cbnz	r0, 80142ee <_vfiprintf_r+0xfe>
 801428e:	06d9      	lsls	r1, r3, #27
 8014290:	bf44      	itt	mi
 8014292:	2220      	movmi	r2, #32
 8014294:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8014298:	071a      	lsls	r2, r3, #28
 801429a:	bf44      	itt	mi
 801429c:	222b      	movmi	r2, #43	; 0x2b
 801429e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80142a2:	782a      	ldrb	r2, [r5, #0]
 80142a4:	2a2a      	cmp	r2, #42	; 0x2a
 80142a6:	d02a      	beq.n	80142fe <_vfiprintf_r+0x10e>
 80142a8:	9a07      	ldr	r2, [sp, #28]
 80142aa:	46a8      	mov	r8, r5
 80142ac:	2000      	movs	r0, #0
 80142ae:	250a      	movs	r5, #10
 80142b0:	4641      	mov	r1, r8
 80142b2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80142b6:	3b30      	subs	r3, #48	; 0x30
 80142b8:	2b09      	cmp	r3, #9
 80142ba:	d969      	bls.n	8014390 <_vfiprintf_r+0x1a0>
 80142bc:	b360      	cbz	r0, 8014318 <_vfiprintf_r+0x128>
 80142be:	e024      	b.n	801430a <_vfiprintf_r+0x11a>
 80142c0:	4b50      	ldr	r3, [pc, #320]	; (8014404 <_vfiprintf_r+0x214>)
 80142c2:	429c      	cmp	r4, r3
 80142c4:	d101      	bne.n	80142ca <_vfiprintf_r+0xda>
 80142c6:	68b4      	ldr	r4, [r6, #8]
 80142c8:	e7a2      	b.n	8014210 <_vfiprintf_r+0x20>
 80142ca:	4b4f      	ldr	r3, [pc, #316]	; (8014408 <_vfiprintf_r+0x218>)
 80142cc:	429c      	cmp	r4, r3
 80142ce:	bf08      	it	eq
 80142d0:	68f4      	ldreq	r4, [r6, #12]
 80142d2:	e79d      	b.n	8014210 <_vfiprintf_r+0x20>
 80142d4:	4621      	mov	r1, r4
 80142d6:	4630      	mov	r0, r6
 80142d8:	f7fe fa84 	bl	80127e4 <__swsetup_r>
 80142dc:	2800      	cmp	r0, #0
 80142de:	d09d      	beq.n	801421c <_vfiprintf_r+0x2c>
 80142e0:	f04f 30ff 	mov.w	r0, #4294967295
 80142e4:	b01d      	add	sp, #116	; 0x74
 80142e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80142ea:	46a8      	mov	r8, r5
 80142ec:	e7a2      	b.n	8014234 <_vfiprintf_r+0x44>
 80142ee:	4a44      	ldr	r2, [pc, #272]	; (8014400 <_vfiprintf_r+0x210>)
 80142f0:	1a80      	subs	r0, r0, r2
 80142f2:	fa0b f000 	lsl.w	r0, fp, r0
 80142f6:	4318      	orrs	r0, r3
 80142f8:	9004      	str	r0, [sp, #16]
 80142fa:	4645      	mov	r5, r8
 80142fc:	e7be      	b.n	801427c <_vfiprintf_r+0x8c>
 80142fe:	9a03      	ldr	r2, [sp, #12]
 8014300:	1d11      	adds	r1, r2, #4
 8014302:	6812      	ldr	r2, [r2, #0]
 8014304:	9103      	str	r1, [sp, #12]
 8014306:	2a00      	cmp	r2, #0
 8014308:	db01      	blt.n	801430e <_vfiprintf_r+0x11e>
 801430a:	9207      	str	r2, [sp, #28]
 801430c:	e004      	b.n	8014318 <_vfiprintf_r+0x128>
 801430e:	4252      	negs	r2, r2
 8014310:	f043 0302 	orr.w	r3, r3, #2
 8014314:	9207      	str	r2, [sp, #28]
 8014316:	9304      	str	r3, [sp, #16]
 8014318:	f898 3000 	ldrb.w	r3, [r8]
 801431c:	2b2e      	cmp	r3, #46	; 0x2e
 801431e:	d10e      	bne.n	801433e <_vfiprintf_r+0x14e>
 8014320:	f898 3001 	ldrb.w	r3, [r8, #1]
 8014324:	2b2a      	cmp	r3, #42	; 0x2a
 8014326:	d138      	bne.n	801439a <_vfiprintf_r+0x1aa>
 8014328:	9b03      	ldr	r3, [sp, #12]
 801432a:	1d1a      	adds	r2, r3, #4
 801432c:	681b      	ldr	r3, [r3, #0]
 801432e:	9203      	str	r2, [sp, #12]
 8014330:	2b00      	cmp	r3, #0
 8014332:	bfb8      	it	lt
 8014334:	f04f 33ff 	movlt.w	r3, #4294967295
 8014338:	f108 0802 	add.w	r8, r8, #2
 801433c:	9305      	str	r3, [sp, #20]
 801433e:	4d33      	ldr	r5, [pc, #204]	; (801440c <_vfiprintf_r+0x21c>)
 8014340:	f898 1000 	ldrb.w	r1, [r8]
 8014344:	2203      	movs	r2, #3
 8014346:	4628      	mov	r0, r5
 8014348:	f7eb ff22 	bl	8000190 <memchr>
 801434c:	b140      	cbz	r0, 8014360 <_vfiprintf_r+0x170>
 801434e:	2340      	movs	r3, #64	; 0x40
 8014350:	1b40      	subs	r0, r0, r5
 8014352:	fa03 f000 	lsl.w	r0, r3, r0
 8014356:	9b04      	ldr	r3, [sp, #16]
 8014358:	4303      	orrs	r3, r0
 801435a:	f108 0801 	add.w	r8, r8, #1
 801435e:	9304      	str	r3, [sp, #16]
 8014360:	f898 1000 	ldrb.w	r1, [r8]
 8014364:	482a      	ldr	r0, [pc, #168]	; (8014410 <_vfiprintf_r+0x220>)
 8014366:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801436a:	2206      	movs	r2, #6
 801436c:	f108 0701 	add.w	r7, r8, #1
 8014370:	f7eb ff0e 	bl	8000190 <memchr>
 8014374:	2800      	cmp	r0, #0
 8014376:	d037      	beq.n	80143e8 <_vfiprintf_r+0x1f8>
 8014378:	4b26      	ldr	r3, [pc, #152]	; (8014414 <_vfiprintf_r+0x224>)
 801437a:	bb1b      	cbnz	r3, 80143c4 <_vfiprintf_r+0x1d4>
 801437c:	9b03      	ldr	r3, [sp, #12]
 801437e:	3307      	adds	r3, #7
 8014380:	f023 0307 	bic.w	r3, r3, #7
 8014384:	3308      	adds	r3, #8
 8014386:	9303      	str	r3, [sp, #12]
 8014388:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801438a:	444b      	add	r3, r9
 801438c:	9309      	str	r3, [sp, #36]	; 0x24
 801438e:	e750      	b.n	8014232 <_vfiprintf_r+0x42>
 8014390:	fb05 3202 	mla	r2, r5, r2, r3
 8014394:	2001      	movs	r0, #1
 8014396:	4688      	mov	r8, r1
 8014398:	e78a      	b.n	80142b0 <_vfiprintf_r+0xc0>
 801439a:	2300      	movs	r3, #0
 801439c:	f108 0801 	add.w	r8, r8, #1
 80143a0:	9305      	str	r3, [sp, #20]
 80143a2:	4619      	mov	r1, r3
 80143a4:	250a      	movs	r5, #10
 80143a6:	4640      	mov	r0, r8
 80143a8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80143ac:	3a30      	subs	r2, #48	; 0x30
 80143ae:	2a09      	cmp	r2, #9
 80143b0:	d903      	bls.n	80143ba <_vfiprintf_r+0x1ca>
 80143b2:	2b00      	cmp	r3, #0
 80143b4:	d0c3      	beq.n	801433e <_vfiprintf_r+0x14e>
 80143b6:	9105      	str	r1, [sp, #20]
 80143b8:	e7c1      	b.n	801433e <_vfiprintf_r+0x14e>
 80143ba:	fb05 2101 	mla	r1, r5, r1, r2
 80143be:	2301      	movs	r3, #1
 80143c0:	4680      	mov	r8, r0
 80143c2:	e7f0      	b.n	80143a6 <_vfiprintf_r+0x1b6>
 80143c4:	ab03      	add	r3, sp, #12
 80143c6:	9300      	str	r3, [sp, #0]
 80143c8:	4622      	mov	r2, r4
 80143ca:	4b13      	ldr	r3, [pc, #76]	; (8014418 <_vfiprintf_r+0x228>)
 80143cc:	a904      	add	r1, sp, #16
 80143ce:	4630      	mov	r0, r6
 80143d0:	f7fd fd2c 	bl	8011e2c <_printf_float>
 80143d4:	f1b0 3fff 	cmp.w	r0, #4294967295
 80143d8:	4681      	mov	r9, r0
 80143da:	d1d5      	bne.n	8014388 <_vfiprintf_r+0x198>
 80143dc:	89a3      	ldrh	r3, [r4, #12]
 80143de:	065b      	lsls	r3, r3, #25
 80143e0:	f53f af7e 	bmi.w	80142e0 <_vfiprintf_r+0xf0>
 80143e4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80143e6:	e77d      	b.n	80142e4 <_vfiprintf_r+0xf4>
 80143e8:	ab03      	add	r3, sp, #12
 80143ea:	9300      	str	r3, [sp, #0]
 80143ec:	4622      	mov	r2, r4
 80143ee:	4b0a      	ldr	r3, [pc, #40]	; (8014418 <_vfiprintf_r+0x228>)
 80143f0:	a904      	add	r1, sp, #16
 80143f2:	4630      	mov	r0, r6
 80143f4:	f7fd ffd0 	bl	8012398 <_printf_i>
 80143f8:	e7ec      	b.n	80143d4 <_vfiprintf_r+0x1e4>
 80143fa:	bf00      	nop
 80143fc:	0801641c 	.word	0x0801641c
 8014400:	0801655c 	.word	0x0801655c
 8014404:	0801643c 	.word	0x0801643c
 8014408:	080163fc 	.word	0x080163fc
 801440c:	08016562 	.word	0x08016562
 8014410:	08016566 	.word	0x08016566
 8014414:	08011e2d 	.word	0x08011e2d
 8014418:	080141cb 	.word	0x080141cb

0801441c <__sread>:
 801441c:	b510      	push	{r4, lr}
 801441e:	460c      	mov	r4, r1
 8014420:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014424:	f000 f8e6 	bl	80145f4 <_read_r>
 8014428:	2800      	cmp	r0, #0
 801442a:	bfab      	itete	ge
 801442c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801442e:	89a3      	ldrhlt	r3, [r4, #12]
 8014430:	181b      	addge	r3, r3, r0
 8014432:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8014436:	bfac      	ite	ge
 8014438:	6563      	strge	r3, [r4, #84]	; 0x54
 801443a:	81a3      	strhlt	r3, [r4, #12]
 801443c:	bd10      	pop	{r4, pc}

0801443e <__swrite>:
 801443e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014442:	461f      	mov	r7, r3
 8014444:	898b      	ldrh	r3, [r1, #12]
 8014446:	05db      	lsls	r3, r3, #23
 8014448:	4605      	mov	r5, r0
 801444a:	460c      	mov	r4, r1
 801444c:	4616      	mov	r6, r2
 801444e:	d505      	bpl.n	801445c <__swrite+0x1e>
 8014450:	2302      	movs	r3, #2
 8014452:	2200      	movs	r2, #0
 8014454:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014458:	f000 f868 	bl	801452c <_lseek_r>
 801445c:	89a3      	ldrh	r3, [r4, #12]
 801445e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8014462:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8014466:	81a3      	strh	r3, [r4, #12]
 8014468:	4632      	mov	r2, r6
 801446a:	463b      	mov	r3, r7
 801446c:	4628      	mov	r0, r5
 801446e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8014472:	f000 b817 	b.w	80144a4 <_write_r>

08014476 <__sseek>:
 8014476:	b510      	push	{r4, lr}
 8014478:	460c      	mov	r4, r1
 801447a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801447e:	f000 f855 	bl	801452c <_lseek_r>
 8014482:	1c43      	adds	r3, r0, #1
 8014484:	89a3      	ldrh	r3, [r4, #12]
 8014486:	bf15      	itete	ne
 8014488:	6560      	strne	r0, [r4, #84]	; 0x54
 801448a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801448e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8014492:	81a3      	strheq	r3, [r4, #12]
 8014494:	bf18      	it	ne
 8014496:	81a3      	strhne	r3, [r4, #12]
 8014498:	bd10      	pop	{r4, pc}

0801449a <__sclose>:
 801449a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801449e:	f000 b813 	b.w	80144c8 <_close_r>
	...

080144a4 <_write_r>:
 80144a4:	b538      	push	{r3, r4, r5, lr}
 80144a6:	4c07      	ldr	r4, [pc, #28]	; (80144c4 <_write_r+0x20>)
 80144a8:	4605      	mov	r5, r0
 80144aa:	4608      	mov	r0, r1
 80144ac:	4611      	mov	r1, r2
 80144ae:	2200      	movs	r2, #0
 80144b0:	6022      	str	r2, [r4, #0]
 80144b2:	461a      	mov	r2, r3
 80144b4:	f7f8 fbfe 	bl	800ccb4 <_write>
 80144b8:	1c43      	adds	r3, r0, #1
 80144ba:	d102      	bne.n	80144c2 <_write_r+0x1e>
 80144bc:	6823      	ldr	r3, [r4, #0]
 80144be:	b103      	cbz	r3, 80144c2 <_write_r+0x1e>
 80144c0:	602b      	str	r3, [r5, #0]
 80144c2:	bd38      	pop	{r3, r4, r5, pc}
 80144c4:	200062bc 	.word	0x200062bc

080144c8 <_close_r>:
 80144c8:	b538      	push	{r3, r4, r5, lr}
 80144ca:	4c06      	ldr	r4, [pc, #24]	; (80144e4 <_close_r+0x1c>)
 80144cc:	2300      	movs	r3, #0
 80144ce:	4605      	mov	r5, r0
 80144d0:	4608      	mov	r0, r1
 80144d2:	6023      	str	r3, [r4, #0]
 80144d4:	f7f1 fa7d 	bl	80059d2 <_close>
 80144d8:	1c43      	adds	r3, r0, #1
 80144da:	d102      	bne.n	80144e2 <_close_r+0x1a>
 80144dc:	6823      	ldr	r3, [r4, #0]
 80144de:	b103      	cbz	r3, 80144e2 <_close_r+0x1a>
 80144e0:	602b      	str	r3, [r5, #0]
 80144e2:	bd38      	pop	{r3, r4, r5, pc}
 80144e4:	200062bc 	.word	0x200062bc

080144e8 <_fstat_r>:
 80144e8:	b538      	push	{r3, r4, r5, lr}
 80144ea:	4c07      	ldr	r4, [pc, #28]	; (8014508 <_fstat_r+0x20>)
 80144ec:	2300      	movs	r3, #0
 80144ee:	4605      	mov	r5, r0
 80144f0:	4608      	mov	r0, r1
 80144f2:	4611      	mov	r1, r2
 80144f4:	6023      	str	r3, [r4, #0]
 80144f6:	f7f1 fa78 	bl	80059ea <_fstat>
 80144fa:	1c43      	adds	r3, r0, #1
 80144fc:	d102      	bne.n	8014504 <_fstat_r+0x1c>
 80144fe:	6823      	ldr	r3, [r4, #0]
 8014500:	b103      	cbz	r3, 8014504 <_fstat_r+0x1c>
 8014502:	602b      	str	r3, [r5, #0]
 8014504:	bd38      	pop	{r3, r4, r5, pc}
 8014506:	bf00      	nop
 8014508:	200062bc 	.word	0x200062bc

0801450c <_isatty_r>:
 801450c:	b538      	push	{r3, r4, r5, lr}
 801450e:	4c06      	ldr	r4, [pc, #24]	; (8014528 <_isatty_r+0x1c>)
 8014510:	2300      	movs	r3, #0
 8014512:	4605      	mov	r5, r0
 8014514:	4608      	mov	r0, r1
 8014516:	6023      	str	r3, [r4, #0]
 8014518:	f7f1 fa77 	bl	8005a0a <_isatty>
 801451c:	1c43      	adds	r3, r0, #1
 801451e:	d102      	bne.n	8014526 <_isatty_r+0x1a>
 8014520:	6823      	ldr	r3, [r4, #0]
 8014522:	b103      	cbz	r3, 8014526 <_isatty_r+0x1a>
 8014524:	602b      	str	r3, [r5, #0]
 8014526:	bd38      	pop	{r3, r4, r5, pc}
 8014528:	200062bc 	.word	0x200062bc

0801452c <_lseek_r>:
 801452c:	b538      	push	{r3, r4, r5, lr}
 801452e:	4c07      	ldr	r4, [pc, #28]	; (801454c <_lseek_r+0x20>)
 8014530:	4605      	mov	r5, r0
 8014532:	4608      	mov	r0, r1
 8014534:	4611      	mov	r1, r2
 8014536:	2200      	movs	r2, #0
 8014538:	6022      	str	r2, [r4, #0]
 801453a:	461a      	mov	r2, r3
 801453c:	f7f1 fa70 	bl	8005a20 <_lseek>
 8014540:	1c43      	adds	r3, r0, #1
 8014542:	d102      	bne.n	801454a <_lseek_r+0x1e>
 8014544:	6823      	ldr	r3, [r4, #0]
 8014546:	b103      	cbz	r3, 801454a <_lseek_r+0x1e>
 8014548:	602b      	str	r3, [r5, #0]
 801454a:	bd38      	pop	{r3, r4, r5, pc}
 801454c:	200062bc 	.word	0x200062bc

08014550 <__ascii_mbtowc>:
 8014550:	b082      	sub	sp, #8
 8014552:	b901      	cbnz	r1, 8014556 <__ascii_mbtowc+0x6>
 8014554:	a901      	add	r1, sp, #4
 8014556:	b142      	cbz	r2, 801456a <__ascii_mbtowc+0x1a>
 8014558:	b14b      	cbz	r3, 801456e <__ascii_mbtowc+0x1e>
 801455a:	7813      	ldrb	r3, [r2, #0]
 801455c:	600b      	str	r3, [r1, #0]
 801455e:	7812      	ldrb	r2, [r2, #0]
 8014560:	1c10      	adds	r0, r2, #0
 8014562:	bf18      	it	ne
 8014564:	2001      	movne	r0, #1
 8014566:	b002      	add	sp, #8
 8014568:	4770      	bx	lr
 801456a:	4610      	mov	r0, r2
 801456c:	e7fb      	b.n	8014566 <__ascii_mbtowc+0x16>
 801456e:	f06f 0001 	mvn.w	r0, #1
 8014572:	e7f8      	b.n	8014566 <__ascii_mbtowc+0x16>

08014574 <memmove>:
 8014574:	4288      	cmp	r0, r1
 8014576:	b510      	push	{r4, lr}
 8014578:	eb01 0302 	add.w	r3, r1, r2
 801457c:	d807      	bhi.n	801458e <memmove+0x1a>
 801457e:	1e42      	subs	r2, r0, #1
 8014580:	4299      	cmp	r1, r3
 8014582:	d00a      	beq.n	801459a <memmove+0x26>
 8014584:	f811 4b01 	ldrb.w	r4, [r1], #1
 8014588:	f802 4f01 	strb.w	r4, [r2, #1]!
 801458c:	e7f8      	b.n	8014580 <memmove+0xc>
 801458e:	4283      	cmp	r3, r0
 8014590:	d9f5      	bls.n	801457e <memmove+0xa>
 8014592:	1881      	adds	r1, r0, r2
 8014594:	1ad2      	subs	r2, r2, r3
 8014596:	42d3      	cmn	r3, r2
 8014598:	d100      	bne.n	801459c <memmove+0x28>
 801459a:	bd10      	pop	{r4, pc}
 801459c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80145a0:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80145a4:	e7f7      	b.n	8014596 <memmove+0x22>

080145a6 <_realloc_r>:
 80145a6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80145a8:	4607      	mov	r7, r0
 80145aa:	4614      	mov	r4, r2
 80145ac:	460e      	mov	r6, r1
 80145ae:	b921      	cbnz	r1, 80145ba <_realloc_r+0x14>
 80145b0:	4611      	mov	r1, r2
 80145b2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80145b6:	f7fd bb4b 	b.w	8011c50 <_malloc_r>
 80145ba:	b922      	cbnz	r2, 80145c6 <_realloc_r+0x20>
 80145bc:	f7fd fafa 	bl	8011bb4 <_free_r>
 80145c0:	4625      	mov	r5, r4
 80145c2:	4628      	mov	r0, r5
 80145c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80145c6:	f000 f834 	bl	8014632 <_malloc_usable_size_r>
 80145ca:	42a0      	cmp	r0, r4
 80145cc:	d20f      	bcs.n	80145ee <_realloc_r+0x48>
 80145ce:	4621      	mov	r1, r4
 80145d0:	4638      	mov	r0, r7
 80145d2:	f7fd fb3d 	bl	8011c50 <_malloc_r>
 80145d6:	4605      	mov	r5, r0
 80145d8:	2800      	cmp	r0, #0
 80145da:	d0f2      	beq.n	80145c2 <_realloc_r+0x1c>
 80145dc:	4631      	mov	r1, r6
 80145de:	4622      	mov	r2, r4
 80145e0:	f7fd fad4 	bl	8011b8c <memcpy>
 80145e4:	4631      	mov	r1, r6
 80145e6:	4638      	mov	r0, r7
 80145e8:	f7fd fae4 	bl	8011bb4 <_free_r>
 80145ec:	e7e9      	b.n	80145c2 <_realloc_r+0x1c>
 80145ee:	4635      	mov	r5, r6
 80145f0:	e7e7      	b.n	80145c2 <_realloc_r+0x1c>
	...

080145f4 <_read_r>:
 80145f4:	b538      	push	{r3, r4, r5, lr}
 80145f6:	4c07      	ldr	r4, [pc, #28]	; (8014614 <_read_r+0x20>)
 80145f8:	4605      	mov	r5, r0
 80145fa:	4608      	mov	r0, r1
 80145fc:	4611      	mov	r1, r2
 80145fe:	2200      	movs	r2, #0
 8014600:	6022      	str	r2, [r4, #0]
 8014602:	461a      	mov	r2, r3
 8014604:	f7f1 f9c8 	bl	8005998 <_read>
 8014608:	1c43      	adds	r3, r0, #1
 801460a:	d102      	bne.n	8014612 <_read_r+0x1e>
 801460c:	6823      	ldr	r3, [r4, #0]
 801460e:	b103      	cbz	r3, 8014612 <_read_r+0x1e>
 8014610:	602b      	str	r3, [r5, #0]
 8014612:	bd38      	pop	{r3, r4, r5, pc}
 8014614:	200062bc 	.word	0x200062bc

08014618 <__ascii_wctomb>:
 8014618:	b149      	cbz	r1, 801462e <__ascii_wctomb+0x16>
 801461a:	2aff      	cmp	r2, #255	; 0xff
 801461c:	bf85      	ittet	hi
 801461e:	238a      	movhi	r3, #138	; 0x8a
 8014620:	6003      	strhi	r3, [r0, #0]
 8014622:	700a      	strbls	r2, [r1, #0]
 8014624:	f04f 30ff 	movhi.w	r0, #4294967295
 8014628:	bf98      	it	ls
 801462a:	2001      	movls	r0, #1
 801462c:	4770      	bx	lr
 801462e:	4608      	mov	r0, r1
 8014630:	4770      	bx	lr

08014632 <_malloc_usable_size_r>:
 8014632:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8014636:	1f18      	subs	r0, r3, #4
 8014638:	2b00      	cmp	r3, #0
 801463a:	bfbc      	itt	lt
 801463c:	580b      	ldrlt	r3, [r1, r0]
 801463e:	18c0      	addlt	r0, r0, r3
 8014640:	4770      	bx	lr
	...

08014644 <round>:
 8014644:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014646:	ec57 6b10 	vmov	r6, r7, d0
 801464a:	f3c7 500a 	ubfx	r0, r7, #20, #11
 801464e:	f2a0 34ff 	subw	r4, r0, #1023	; 0x3ff
 8014652:	2c13      	cmp	r4, #19
 8014654:	463b      	mov	r3, r7
 8014656:	463d      	mov	r5, r7
 8014658:	dc17      	bgt.n	801468a <round+0x46>
 801465a:	2c00      	cmp	r4, #0
 801465c:	da09      	bge.n	8014672 <round+0x2e>
 801465e:	3401      	adds	r4, #1
 8014660:	f007 4300 	and.w	r3, r7, #2147483648	; 0x80000000
 8014664:	d103      	bne.n	801466e <round+0x2a>
 8014666:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 801466a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 801466e:	2100      	movs	r1, #0
 8014670:	e02c      	b.n	80146cc <round+0x88>
 8014672:	4a18      	ldr	r2, [pc, #96]	; (80146d4 <round+0x90>)
 8014674:	4122      	asrs	r2, r4
 8014676:	4217      	tst	r7, r2
 8014678:	d100      	bne.n	801467c <round+0x38>
 801467a:	b19e      	cbz	r6, 80146a4 <round+0x60>
 801467c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8014680:	4123      	asrs	r3, r4
 8014682:	442b      	add	r3, r5
 8014684:	ea23 0302 	bic.w	r3, r3, r2
 8014688:	e7f1      	b.n	801466e <round+0x2a>
 801468a:	2c33      	cmp	r4, #51	; 0x33
 801468c:	dd0d      	ble.n	80146aa <round+0x66>
 801468e:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 8014692:	d107      	bne.n	80146a4 <round+0x60>
 8014694:	4630      	mov	r0, r6
 8014696:	4639      	mov	r1, r7
 8014698:	ee10 2a10 	vmov	r2, s0
 801469c:	f7eb fdce 	bl	800023c <__adddf3>
 80146a0:	4606      	mov	r6, r0
 80146a2:	460f      	mov	r7, r1
 80146a4:	ec47 6b10 	vmov	d0, r6, r7
 80146a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80146aa:	f2a0 4213 	subw	r2, r0, #1043	; 0x413
 80146ae:	f04f 30ff 	mov.w	r0, #4294967295
 80146b2:	40d0      	lsrs	r0, r2
 80146b4:	4206      	tst	r6, r0
 80146b6:	d0f5      	beq.n	80146a4 <round+0x60>
 80146b8:	2201      	movs	r2, #1
 80146ba:	f1c4 0433 	rsb	r4, r4, #51	; 0x33
 80146be:	fa02 f404 	lsl.w	r4, r2, r4
 80146c2:	1931      	adds	r1, r6, r4
 80146c4:	bf28      	it	cs
 80146c6:	189b      	addcs	r3, r3, r2
 80146c8:	ea21 0100 	bic.w	r1, r1, r0
 80146cc:	461f      	mov	r7, r3
 80146ce:	460e      	mov	r6, r1
 80146d0:	e7e8      	b.n	80146a4 <round+0x60>
 80146d2:	bf00      	nop
 80146d4:	000fffff 	.word	0x000fffff

080146d8 <_init>:
 80146d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80146da:	bf00      	nop
 80146dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80146de:	bc08      	pop	{r3}
 80146e0:	469e      	mov	lr, r3
 80146e2:	4770      	bx	lr

080146e4 <_fini>:
 80146e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80146e6:	bf00      	nop
 80146e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80146ea:	bc08      	pop	{r3}
 80146ec:	469e      	mov	lr, r3
 80146ee:	4770      	bx	lr
