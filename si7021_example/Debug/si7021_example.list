
si7021_example.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007190  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000010b0  080072d0  080072d0  000172d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08008380  08008380  00018380  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08008384  08008384  00018384  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         000001dc  20000004  08008388  00020004  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000000f0  200001e0  08008564  000201e0  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  200002d0  08008564  000202d0  2**0
                  ALLOC
  8 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
  9 .debug_info   000135a1  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000026ef  00000000  00000000  000337b1  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00001520  00000000  00000000  00035ea0  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000013f8  00000000  00000000  000373c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  000226ab  00000000  00000000  000387b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0000d988  00000000  00000000  0005ae63  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000d4e6d  00000000  00000000  000687eb  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007b  00000000  00000000  0013d658  2**0
                  CONTENTS, READONLY
 17 .debug_frame  000061bc  00000000  00000000  0013d6d4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	200001e0 	.word	0x200001e0
 800015c:	00000000 	.word	0x00000000
 8000160:	080072b8 	.word	0x080072b8

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	200001e4 	.word	0x200001e4
 800017c:	080072b8 	.word	0x080072b8

08000180 <strlen>:
 8000180:	4603      	mov	r3, r0
 8000182:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000186:	2a00      	cmp	r2, #0
 8000188:	d1fb      	bne.n	8000182 <strlen+0x2>
 800018a:	1a18      	subs	r0, r3, r0
 800018c:	3801      	subs	r0, #1
 800018e:	4770      	bx	lr

08000190 <memchr>:
 8000190:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000194:	2a10      	cmp	r2, #16
 8000196:	db2b      	blt.n	80001f0 <memchr+0x60>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	d008      	beq.n	80001b0 <memchr+0x20>
 800019e:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001a2:	3a01      	subs	r2, #1
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d02d      	beq.n	8000204 <memchr+0x74>
 80001a8:	f010 0f07 	tst.w	r0, #7
 80001ac:	b342      	cbz	r2, 8000200 <memchr+0x70>
 80001ae:	d1f6      	bne.n	800019e <memchr+0xe>
 80001b0:	b4f0      	push	{r4, r5, r6, r7}
 80001b2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001b6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001ba:	f022 0407 	bic.w	r4, r2, #7
 80001be:	f07f 0700 	mvns.w	r7, #0
 80001c2:	2300      	movs	r3, #0
 80001c4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001c8:	3c08      	subs	r4, #8
 80001ca:	ea85 0501 	eor.w	r5, r5, r1
 80001ce:	ea86 0601 	eor.w	r6, r6, r1
 80001d2:	fa85 f547 	uadd8	r5, r5, r7
 80001d6:	faa3 f587 	sel	r5, r3, r7
 80001da:	fa86 f647 	uadd8	r6, r6, r7
 80001de:	faa5 f687 	sel	r6, r5, r7
 80001e2:	b98e      	cbnz	r6, 8000208 <memchr+0x78>
 80001e4:	d1ee      	bne.n	80001c4 <memchr+0x34>
 80001e6:	bcf0      	pop	{r4, r5, r6, r7}
 80001e8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001ec:	f002 0207 	and.w	r2, r2, #7
 80001f0:	b132      	cbz	r2, 8000200 <memchr+0x70>
 80001f2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f6:	3a01      	subs	r2, #1
 80001f8:	ea83 0301 	eor.w	r3, r3, r1
 80001fc:	b113      	cbz	r3, 8000204 <memchr+0x74>
 80001fe:	d1f8      	bne.n	80001f2 <memchr+0x62>
 8000200:	2000      	movs	r0, #0
 8000202:	4770      	bx	lr
 8000204:	3801      	subs	r0, #1
 8000206:	4770      	bx	lr
 8000208:	2d00      	cmp	r5, #0
 800020a:	bf06      	itte	eq
 800020c:	4635      	moveq	r5, r6
 800020e:	3803      	subeq	r0, #3
 8000210:	3807      	subne	r0, #7
 8000212:	f015 0f01 	tst.w	r5, #1
 8000216:	d107      	bne.n	8000228 <memchr+0x98>
 8000218:	3001      	adds	r0, #1
 800021a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800021e:	bf02      	ittt	eq
 8000220:	3001      	addeq	r0, #1
 8000222:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000226:	3001      	addeq	r0, #1
 8000228:	bcf0      	pop	{r4, r5, r6, r7}
 800022a:	3801      	subs	r0, #1
 800022c:	4770      	bx	lr
 800022e:	bf00      	nop

08000230 <__aeabi_drsub>:
 8000230:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000234:	e002      	b.n	800023c <__adddf3>
 8000236:	bf00      	nop

08000238 <__aeabi_dsub>:
 8000238:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800023c <__adddf3>:
 800023c:	b530      	push	{r4, r5, lr}
 800023e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000242:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000246:	ea94 0f05 	teq	r4, r5
 800024a:	bf08      	it	eq
 800024c:	ea90 0f02 	teqeq	r0, r2
 8000250:	bf1f      	itttt	ne
 8000252:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000256:	ea55 0c02 	orrsne.w	ip, r5, r2
 800025a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800025e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000262:	f000 80e2 	beq.w	800042a <__adddf3+0x1ee>
 8000266:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800026a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800026e:	bfb8      	it	lt
 8000270:	426d      	neglt	r5, r5
 8000272:	dd0c      	ble.n	800028e <__adddf3+0x52>
 8000274:	442c      	add	r4, r5
 8000276:	ea80 0202 	eor.w	r2, r0, r2
 800027a:	ea81 0303 	eor.w	r3, r1, r3
 800027e:	ea82 0000 	eor.w	r0, r2, r0
 8000282:	ea83 0101 	eor.w	r1, r3, r1
 8000286:	ea80 0202 	eor.w	r2, r0, r2
 800028a:	ea81 0303 	eor.w	r3, r1, r3
 800028e:	2d36      	cmp	r5, #54	; 0x36
 8000290:	bf88      	it	hi
 8000292:	bd30      	pophi	{r4, r5, pc}
 8000294:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000298:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800029c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002a0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002a4:	d002      	beq.n	80002ac <__adddf3+0x70>
 80002a6:	4240      	negs	r0, r0
 80002a8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ac:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002b4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002b8:	d002      	beq.n	80002c0 <__adddf3+0x84>
 80002ba:	4252      	negs	r2, r2
 80002bc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c0:	ea94 0f05 	teq	r4, r5
 80002c4:	f000 80a7 	beq.w	8000416 <__adddf3+0x1da>
 80002c8:	f1a4 0401 	sub.w	r4, r4, #1
 80002cc:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d0:	db0d      	blt.n	80002ee <__adddf3+0xb2>
 80002d2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002d6:	fa22 f205 	lsr.w	r2, r2, r5
 80002da:	1880      	adds	r0, r0, r2
 80002dc:	f141 0100 	adc.w	r1, r1, #0
 80002e0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002e4:	1880      	adds	r0, r0, r2
 80002e6:	fa43 f305 	asr.w	r3, r3, r5
 80002ea:	4159      	adcs	r1, r3
 80002ec:	e00e      	b.n	800030c <__adddf3+0xd0>
 80002ee:	f1a5 0520 	sub.w	r5, r5, #32
 80002f2:	f10e 0e20 	add.w	lr, lr, #32
 80002f6:	2a01      	cmp	r2, #1
 80002f8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002fc:	bf28      	it	cs
 80002fe:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000302:	fa43 f305 	asr.w	r3, r3, r5
 8000306:	18c0      	adds	r0, r0, r3
 8000308:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800030c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000310:	d507      	bpl.n	8000322 <__adddf3+0xe6>
 8000312:	f04f 0e00 	mov.w	lr, #0
 8000316:	f1dc 0c00 	rsbs	ip, ip, #0
 800031a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800031e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000322:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000326:	d31b      	bcc.n	8000360 <__adddf3+0x124>
 8000328:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800032c:	d30c      	bcc.n	8000348 <__adddf3+0x10c>
 800032e:	0849      	lsrs	r1, r1, #1
 8000330:	ea5f 0030 	movs.w	r0, r0, rrx
 8000334:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000338:	f104 0401 	add.w	r4, r4, #1
 800033c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000340:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000344:	f080 809a 	bcs.w	800047c <__adddf3+0x240>
 8000348:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800034c:	bf08      	it	eq
 800034e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000352:	f150 0000 	adcs.w	r0, r0, #0
 8000356:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800035a:	ea41 0105 	orr.w	r1, r1, r5
 800035e:	bd30      	pop	{r4, r5, pc}
 8000360:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000364:	4140      	adcs	r0, r0
 8000366:	eb41 0101 	adc.w	r1, r1, r1
 800036a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800036e:	f1a4 0401 	sub.w	r4, r4, #1
 8000372:	d1e9      	bne.n	8000348 <__adddf3+0x10c>
 8000374:	f091 0f00 	teq	r1, #0
 8000378:	bf04      	itt	eq
 800037a:	4601      	moveq	r1, r0
 800037c:	2000      	moveq	r0, #0
 800037e:	fab1 f381 	clz	r3, r1
 8000382:	bf08      	it	eq
 8000384:	3320      	addeq	r3, #32
 8000386:	f1a3 030b 	sub.w	r3, r3, #11
 800038a:	f1b3 0220 	subs.w	r2, r3, #32
 800038e:	da0c      	bge.n	80003aa <__adddf3+0x16e>
 8000390:	320c      	adds	r2, #12
 8000392:	dd08      	ble.n	80003a6 <__adddf3+0x16a>
 8000394:	f102 0c14 	add.w	ip, r2, #20
 8000398:	f1c2 020c 	rsb	r2, r2, #12
 800039c:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a0:	fa21 f102 	lsr.w	r1, r1, r2
 80003a4:	e00c      	b.n	80003c0 <__adddf3+0x184>
 80003a6:	f102 0214 	add.w	r2, r2, #20
 80003aa:	bfd8      	it	le
 80003ac:	f1c2 0c20 	rsble	ip, r2, #32
 80003b0:	fa01 f102 	lsl.w	r1, r1, r2
 80003b4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003b8:	bfdc      	itt	le
 80003ba:	ea41 010c 	orrle.w	r1, r1, ip
 80003be:	4090      	lslle	r0, r2
 80003c0:	1ae4      	subs	r4, r4, r3
 80003c2:	bfa2      	ittt	ge
 80003c4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003c8:	4329      	orrge	r1, r5
 80003ca:	bd30      	popge	{r4, r5, pc}
 80003cc:	ea6f 0404 	mvn.w	r4, r4
 80003d0:	3c1f      	subs	r4, #31
 80003d2:	da1c      	bge.n	800040e <__adddf3+0x1d2>
 80003d4:	340c      	adds	r4, #12
 80003d6:	dc0e      	bgt.n	80003f6 <__adddf3+0x1ba>
 80003d8:	f104 0414 	add.w	r4, r4, #20
 80003dc:	f1c4 0220 	rsb	r2, r4, #32
 80003e0:	fa20 f004 	lsr.w	r0, r0, r4
 80003e4:	fa01 f302 	lsl.w	r3, r1, r2
 80003e8:	ea40 0003 	orr.w	r0, r0, r3
 80003ec:	fa21 f304 	lsr.w	r3, r1, r4
 80003f0:	ea45 0103 	orr.w	r1, r5, r3
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	f1c4 040c 	rsb	r4, r4, #12
 80003fa:	f1c4 0220 	rsb	r2, r4, #32
 80003fe:	fa20 f002 	lsr.w	r0, r0, r2
 8000402:	fa01 f304 	lsl.w	r3, r1, r4
 8000406:	ea40 0003 	orr.w	r0, r0, r3
 800040a:	4629      	mov	r1, r5
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	fa21 f004 	lsr.w	r0, r1, r4
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	f094 0f00 	teq	r4, #0
 800041a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800041e:	bf06      	itte	eq
 8000420:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000424:	3401      	addeq	r4, #1
 8000426:	3d01      	subne	r5, #1
 8000428:	e74e      	b.n	80002c8 <__adddf3+0x8c>
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf18      	it	ne
 8000430:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000434:	d029      	beq.n	800048a <__adddf3+0x24e>
 8000436:	ea94 0f05 	teq	r4, r5
 800043a:	bf08      	it	eq
 800043c:	ea90 0f02 	teqeq	r0, r2
 8000440:	d005      	beq.n	800044e <__adddf3+0x212>
 8000442:	ea54 0c00 	orrs.w	ip, r4, r0
 8000446:	bf04      	itt	eq
 8000448:	4619      	moveq	r1, r3
 800044a:	4610      	moveq	r0, r2
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	ea91 0f03 	teq	r1, r3
 8000452:	bf1e      	ittt	ne
 8000454:	2100      	movne	r1, #0
 8000456:	2000      	movne	r0, #0
 8000458:	bd30      	popne	{r4, r5, pc}
 800045a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800045e:	d105      	bne.n	800046c <__adddf3+0x230>
 8000460:	0040      	lsls	r0, r0, #1
 8000462:	4149      	adcs	r1, r1
 8000464:	bf28      	it	cs
 8000466:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800046a:	bd30      	pop	{r4, r5, pc}
 800046c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000470:	bf3c      	itt	cc
 8000472:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000476:	bd30      	popcc	{r4, r5, pc}
 8000478:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800047c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000480:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000484:	f04f 0000 	mov.w	r0, #0
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf1a      	itte	ne
 8000490:	4619      	movne	r1, r3
 8000492:	4610      	movne	r0, r2
 8000494:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000498:	bf1c      	itt	ne
 800049a:	460b      	movne	r3, r1
 800049c:	4602      	movne	r2, r0
 800049e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004a2:	bf06      	itte	eq
 80004a4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004a8:	ea91 0f03 	teqeq	r1, r3
 80004ac:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004b0:	bd30      	pop	{r4, r5, pc}
 80004b2:	bf00      	nop

080004b4 <__aeabi_ui2d>:
 80004b4:	f090 0f00 	teq	r0, #0
 80004b8:	bf04      	itt	eq
 80004ba:	2100      	moveq	r1, #0
 80004bc:	4770      	bxeq	lr
 80004be:	b530      	push	{r4, r5, lr}
 80004c0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004c4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c8:	f04f 0500 	mov.w	r5, #0
 80004cc:	f04f 0100 	mov.w	r1, #0
 80004d0:	e750      	b.n	8000374 <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_i2d>:
 80004d4:	f090 0f00 	teq	r0, #0
 80004d8:	bf04      	itt	eq
 80004da:	2100      	moveq	r1, #0
 80004dc:	4770      	bxeq	lr
 80004de:	b530      	push	{r4, r5, lr}
 80004e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004e8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004ec:	bf48      	it	mi
 80004ee:	4240      	negmi	r0, r0
 80004f0:	f04f 0100 	mov.w	r1, #0
 80004f4:	e73e      	b.n	8000374 <__adddf3+0x138>
 80004f6:	bf00      	nop

080004f8 <__aeabi_f2d>:
 80004f8:	0042      	lsls	r2, r0, #1
 80004fa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004fe:	ea4f 0131 	mov.w	r1, r1, rrx
 8000502:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000506:	bf1f      	itttt	ne
 8000508:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800050c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000510:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000514:	4770      	bxne	lr
 8000516:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800051a:	bf08      	it	eq
 800051c:	4770      	bxeq	lr
 800051e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000522:	bf04      	itt	eq
 8000524:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000528:	4770      	bxeq	lr
 800052a:	b530      	push	{r4, r5, lr}
 800052c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000530:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000534:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000538:	e71c      	b.n	8000374 <__adddf3+0x138>
 800053a:	bf00      	nop

0800053c <__aeabi_ul2d>:
 800053c:	ea50 0201 	orrs.w	r2, r0, r1
 8000540:	bf08      	it	eq
 8000542:	4770      	bxeq	lr
 8000544:	b530      	push	{r4, r5, lr}
 8000546:	f04f 0500 	mov.w	r5, #0
 800054a:	e00a      	b.n	8000562 <__aeabi_l2d+0x16>

0800054c <__aeabi_l2d>:
 800054c:	ea50 0201 	orrs.w	r2, r0, r1
 8000550:	bf08      	it	eq
 8000552:	4770      	bxeq	lr
 8000554:	b530      	push	{r4, r5, lr}
 8000556:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800055a:	d502      	bpl.n	8000562 <__aeabi_l2d+0x16>
 800055c:	4240      	negs	r0, r0
 800055e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000562:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000566:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800056a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800056e:	f43f aed8 	beq.w	8000322 <__adddf3+0xe6>
 8000572:	f04f 0203 	mov.w	r2, #3
 8000576:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800057a:	bf18      	it	ne
 800057c:	3203      	addne	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800058a:	f1c2 0320 	rsb	r3, r2, #32
 800058e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000592:	fa20 f002 	lsr.w	r0, r0, r2
 8000596:	fa01 fe03 	lsl.w	lr, r1, r3
 800059a:	ea40 000e 	orr.w	r0, r0, lr
 800059e:	fa21 f102 	lsr.w	r1, r1, r2
 80005a2:	4414      	add	r4, r2
 80005a4:	e6bd      	b.n	8000322 <__adddf3+0xe6>
 80005a6:	bf00      	nop

080005a8 <__aeabi_dmul>:
 80005a8:	b570      	push	{r4, r5, r6, lr}
 80005aa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ae:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005b2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005b6:	bf1d      	ittte	ne
 80005b8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005bc:	ea94 0f0c 	teqne	r4, ip
 80005c0:	ea95 0f0c 	teqne	r5, ip
 80005c4:	f000 f8de 	bleq	8000784 <__aeabi_dmul+0x1dc>
 80005c8:	442c      	add	r4, r5
 80005ca:	ea81 0603 	eor.w	r6, r1, r3
 80005ce:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005d2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005d6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005da:	bf18      	it	ne
 80005dc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005e4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005e8:	d038      	beq.n	800065c <__aeabi_dmul+0xb4>
 80005ea:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ee:	f04f 0500 	mov.w	r5, #0
 80005f2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005f6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005fa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005fe:	f04f 0600 	mov.w	r6, #0
 8000602:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000606:	f09c 0f00 	teq	ip, #0
 800060a:	bf18      	it	ne
 800060c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000610:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000614:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000618:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800061c:	d204      	bcs.n	8000628 <__aeabi_dmul+0x80>
 800061e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000622:	416d      	adcs	r5, r5
 8000624:	eb46 0606 	adc.w	r6, r6, r6
 8000628:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800062c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000630:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000634:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000638:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800063c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000640:	bf88      	it	hi
 8000642:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000646:	d81e      	bhi.n	8000686 <__aeabi_dmul+0xde>
 8000648:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800064c:	bf08      	it	eq
 800064e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000652:	f150 0000 	adcs.w	r0, r0, #0
 8000656:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800065a:	bd70      	pop	{r4, r5, r6, pc}
 800065c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000660:	ea46 0101 	orr.w	r1, r6, r1
 8000664:	ea40 0002 	orr.w	r0, r0, r2
 8000668:	ea81 0103 	eor.w	r1, r1, r3
 800066c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000670:	bfc2      	ittt	gt
 8000672:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000676:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800067a:	bd70      	popgt	{r4, r5, r6, pc}
 800067c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000680:	f04f 0e00 	mov.w	lr, #0
 8000684:	3c01      	subs	r4, #1
 8000686:	f300 80ab 	bgt.w	80007e0 <__aeabi_dmul+0x238>
 800068a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800068e:	bfde      	ittt	le
 8000690:	2000      	movle	r0, #0
 8000692:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000696:	bd70      	pople	{r4, r5, r6, pc}
 8000698:	f1c4 0400 	rsb	r4, r4, #0
 800069c:	3c20      	subs	r4, #32
 800069e:	da35      	bge.n	800070c <__aeabi_dmul+0x164>
 80006a0:	340c      	adds	r4, #12
 80006a2:	dc1b      	bgt.n	80006dc <__aeabi_dmul+0x134>
 80006a4:	f104 0414 	add.w	r4, r4, #20
 80006a8:	f1c4 0520 	rsb	r5, r4, #32
 80006ac:	fa00 f305 	lsl.w	r3, r0, r5
 80006b0:	fa20 f004 	lsr.w	r0, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea40 0002 	orr.w	r0, r0, r2
 80006bc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006c0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006c8:	fa21 f604 	lsr.w	r6, r1, r4
 80006cc:	eb42 0106 	adc.w	r1, r2, r6
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f1c4 040c 	rsb	r4, r4, #12
 80006e0:	f1c4 0520 	rsb	r5, r4, #32
 80006e4:	fa00 f304 	lsl.w	r3, r0, r4
 80006e8:	fa20 f005 	lsr.w	r0, r0, r5
 80006ec:	fa01 f204 	lsl.w	r2, r1, r4
 80006f0:	ea40 0002 	orr.w	r0, r0, r2
 80006f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006f8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006fc:	f141 0100 	adc.w	r1, r1, #0
 8000700:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000704:	bf08      	it	eq
 8000706:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f1c4 0520 	rsb	r5, r4, #32
 8000710:	fa00 f205 	lsl.w	r2, r0, r5
 8000714:	ea4e 0e02 	orr.w	lr, lr, r2
 8000718:	fa20 f304 	lsr.w	r3, r0, r4
 800071c:	fa01 f205 	lsl.w	r2, r1, r5
 8000720:	ea43 0302 	orr.w	r3, r3, r2
 8000724:	fa21 f004 	lsr.w	r0, r1, r4
 8000728:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800072c:	fa21 f204 	lsr.w	r2, r1, r4
 8000730:	ea20 0002 	bic.w	r0, r0, r2
 8000734:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000738:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800073c:	bf08      	it	eq
 800073e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000742:	bd70      	pop	{r4, r5, r6, pc}
 8000744:	f094 0f00 	teq	r4, #0
 8000748:	d10f      	bne.n	800076a <__aeabi_dmul+0x1c2>
 800074a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800074e:	0040      	lsls	r0, r0, #1
 8000750:	eb41 0101 	adc.w	r1, r1, r1
 8000754:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000758:	bf08      	it	eq
 800075a:	3c01      	subeq	r4, #1
 800075c:	d0f7      	beq.n	800074e <__aeabi_dmul+0x1a6>
 800075e:	ea41 0106 	orr.w	r1, r1, r6
 8000762:	f095 0f00 	teq	r5, #0
 8000766:	bf18      	it	ne
 8000768:	4770      	bxne	lr
 800076a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800076e:	0052      	lsls	r2, r2, #1
 8000770:	eb43 0303 	adc.w	r3, r3, r3
 8000774:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000778:	bf08      	it	eq
 800077a:	3d01      	subeq	r5, #1
 800077c:	d0f7      	beq.n	800076e <__aeabi_dmul+0x1c6>
 800077e:	ea43 0306 	orr.w	r3, r3, r6
 8000782:	4770      	bx	lr
 8000784:	ea94 0f0c 	teq	r4, ip
 8000788:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800078c:	bf18      	it	ne
 800078e:	ea95 0f0c 	teqne	r5, ip
 8000792:	d00c      	beq.n	80007ae <__aeabi_dmul+0x206>
 8000794:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000798:	bf18      	it	ne
 800079a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800079e:	d1d1      	bne.n	8000744 <__aeabi_dmul+0x19c>
 80007a0:	ea81 0103 	eor.w	r1, r1, r3
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a8:	f04f 0000 	mov.w	r0, #0
 80007ac:	bd70      	pop	{r4, r5, r6, pc}
 80007ae:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007b2:	bf06      	itte	eq
 80007b4:	4610      	moveq	r0, r2
 80007b6:	4619      	moveq	r1, r3
 80007b8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007bc:	d019      	beq.n	80007f2 <__aeabi_dmul+0x24a>
 80007be:	ea94 0f0c 	teq	r4, ip
 80007c2:	d102      	bne.n	80007ca <__aeabi_dmul+0x222>
 80007c4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007c8:	d113      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007ca:	ea95 0f0c 	teq	r5, ip
 80007ce:	d105      	bne.n	80007dc <__aeabi_dmul+0x234>
 80007d0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007d4:	bf1c      	itt	ne
 80007d6:	4610      	movne	r0, r2
 80007d8:	4619      	movne	r1, r3
 80007da:	d10a      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007dc:	ea81 0103 	eor.w	r1, r1, r3
 80007e0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007e8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007ec:	f04f 0000 	mov.w	r0, #0
 80007f0:	bd70      	pop	{r4, r5, r6, pc}
 80007f2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007f6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007fa:	bd70      	pop	{r4, r5, r6, pc}

080007fc <__aeabi_ddiv>:
 80007fc:	b570      	push	{r4, r5, r6, lr}
 80007fe:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000802:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000806:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800080a:	bf1d      	ittte	ne
 800080c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000810:	ea94 0f0c 	teqne	r4, ip
 8000814:	ea95 0f0c 	teqne	r5, ip
 8000818:	f000 f8a7 	bleq	800096a <__aeabi_ddiv+0x16e>
 800081c:	eba4 0405 	sub.w	r4, r4, r5
 8000820:	ea81 0e03 	eor.w	lr, r1, r3
 8000824:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000828:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800082c:	f000 8088 	beq.w	8000940 <__aeabi_ddiv+0x144>
 8000830:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000834:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000838:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800083c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000840:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000844:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000848:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800084c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000850:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000854:	429d      	cmp	r5, r3
 8000856:	bf08      	it	eq
 8000858:	4296      	cmpeq	r6, r2
 800085a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800085e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000862:	d202      	bcs.n	800086a <__aeabi_ddiv+0x6e>
 8000864:	085b      	lsrs	r3, r3, #1
 8000866:	ea4f 0232 	mov.w	r2, r2, rrx
 800086a:	1ab6      	subs	r6, r6, r2
 800086c:	eb65 0503 	sbc.w	r5, r5, r3
 8000870:	085b      	lsrs	r3, r3, #1
 8000872:	ea4f 0232 	mov.w	r2, r2, rrx
 8000876:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800087a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ce:	bf22      	ittt	cs
 80008d0:	1ab6      	subcs	r6, r6, r2
 80008d2:	4675      	movcs	r5, lr
 80008d4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008d8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008dc:	d018      	beq.n	8000910 <__aeabi_ddiv+0x114>
 80008de:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008e2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008e6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008ea:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ee:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008f2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008f6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008fa:	d1c0      	bne.n	800087e <__aeabi_ddiv+0x82>
 80008fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000900:	d10b      	bne.n	800091a <__aeabi_ddiv+0x11e>
 8000902:	ea41 0100 	orr.w	r1, r1, r0
 8000906:	f04f 0000 	mov.w	r0, #0
 800090a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800090e:	e7b6      	b.n	800087e <__aeabi_ddiv+0x82>
 8000910:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000914:	bf04      	itt	eq
 8000916:	4301      	orreq	r1, r0
 8000918:	2000      	moveq	r0, #0
 800091a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800091e:	bf88      	it	hi
 8000920:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000924:	f63f aeaf 	bhi.w	8000686 <__aeabi_dmul+0xde>
 8000928:	ebb5 0c03 	subs.w	ip, r5, r3
 800092c:	bf04      	itt	eq
 800092e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000932:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000936:	f150 0000 	adcs.w	r0, r0, #0
 800093a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800093e:	bd70      	pop	{r4, r5, r6, pc}
 8000940:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000944:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000948:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800094c:	bfc2      	ittt	gt
 800094e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000952:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000956:	bd70      	popgt	{r4, r5, r6, pc}
 8000958:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800095c:	f04f 0e00 	mov.w	lr, #0
 8000960:	3c01      	subs	r4, #1
 8000962:	e690      	b.n	8000686 <__aeabi_dmul+0xde>
 8000964:	ea45 0e06 	orr.w	lr, r5, r6
 8000968:	e68d      	b.n	8000686 <__aeabi_dmul+0xde>
 800096a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800096e:	ea94 0f0c 	teq	r4, ip
 8000972:	bf08      	it	eq
 8000974:	ea95 0f0c 	teqeq	r5, ip
 8000978:	f43f af3b 	beq.w	80007f2 <__aeabi_dmul+0x24a>
 800097c:	ea94 0f0c 	teq	r4, ip
 8000980:	d10a      	bne.n	8000998 <__aeabi_ddiv+0x19c>
 8000982:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000986:	f47f af34 	bne.w	80007f2 <__aeabi_dmul+0x24a>
 800098a:	ea95 0f0c 	teq	r5, ip
 800098e:	f47f af25 	bne.w	80007dc <__aeabi_dmul+0x234>
 8000992:	4610      	mov	r0, r2
 8000994:	4619      	mov	r1, r3
 8000996:	e72c      	b.n	80007f2 <__aeabi_dmul+0x24a>
 8000998:	ea95 0f0c 	teq	r5, ip
 800099c:	d106      	bne.n	80009ac <__aeabi_ddiv+0x1b0>
 800099e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009a2:	f43f aefd 	beq.w	80007a0 <__aeabi_dmul+0x1f8>
 80009a6:	4610      	mov	r0, r2
 80009a8:	4619      	mov	r1, r3
 80009aa:	e722      	b.n	80007f2 <__aeabi_dmul+0x24a>
 80009ac:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b0:	bf18      	it	ne
 80009b2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009b6:	f47f aec5 	bne.w	8000744 <__aeabi_dmul+0x19c>
 80009ba:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009be:	f47f af0d 	bne.w	80007dc <__aeabi_dmul+0x234>
 80009c2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009c6:	f47f aeeb 	bne.w	80007a0 <__aeabi_dmul+0x1f8>
 80009ca:	e712      	b.n	80007f2 <__aeabi_dmul+0x24a>

080009cc <__gedf2>:
 80009cc:	f04f 3cff 	mov.w	ip, #4294967295
 80009d0:	e006      	b.n	80009e0 <__cmpdf2+0x4>
 80009d2:	bf00      	nop

080009d4 <__ledf2>:
 80009d4:	f04f 0c01 	mov.w	ip, #1
 80009d8:	e002      	b.n	80009e0 <__cmpdf2+0x4>
 80009da:	bf00      	nop

080009dc <__cmpdf2>:
 80009dc:	f04f 0c01 	mov.w	ip, #1
 80009e0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009e4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009e8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009ec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009f6:	d01b      	beq.n	8000a30 <__cmpdf2+0x54>
 80009f8:	b001      	add	sp, #4
 80009fa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009fe:	bf0c      	ite	eq
 8000a00:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a04:	ea91 0f03 	teqne	r1, r3
 8000a08:	bf02      	ittt	eq
 8000a0a:	ea90 0f02 	teqeq	r0, r2
 8000a0e:	2000      	moveq	r0, #0
 8000a10:	4770      	bxeq	lr
 8000a12:	f110 0f00 	cmn.w	r0, #0
 8000a16:	ea91 0f03 	teq	r1, r3
 8000a1a:	bf58      	it	pl
 8000a1c:	4299      	cmppl	r1, r3
 8000a1e:	bf08      	it	eq
 8000a20:	4290      	cmpeq	r0, r2
 8000a22:	bf2c      	ite	cs
 8000a24:	17d8      	asrcs	r0, r3, #31
 8000a26:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a2a:	f040 0001 	orr.w	r0, r0, #1
 8000a2e:	4770      	bx	lr
 8000a30:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a38:	d102      	bne.n	8000a40 <__cmpdf2+0x64>
 8000a3a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a3e:	d107      	bne.n	8000a50 <__cmpdf2+0x74>
 8000a40:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a44:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a48:	d1d6      	bne.n	80009f8 <__cmpdf2+0x1c>
 8000a4a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a4e:	d0d3      	beq.n	80009f8 <__cmpdf2+0x1c>
 8000a50:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a54:	4770      	bx	lr
 8000a56:	bf00      	nop

08000a58 <__aeabi_cdrcmple>:
 8000a58:	4684      	mov	ip, r0
 8000a5a:	4610      	mov	r0, r2
 8000a5c:	4662      	mov	r2, ip
 8000a5e:	468c      	mov	ip, r1
 8000a60:	4619      	mov	r1, r3
 8000a62:	4663      	mov	r3, ip
 8000a64:	e000      	b.n	8000a68 <__aeabi_cdcmpeq>
 8000a66:	bf00      	nop

08000a68 <__aeabi_cdcmpeq>:
 8000a68:	b501      	push	{r0, lr}
 8000a6a:	f7ff ffb7 	bl	80009dc <__cmpdf2>
 8000a6e:	2800      	cmp	r0, #0
 8000a70:	bf48      	it	mi
 8000a72:	f110 0f00 	cmnmi.w	r0, #0
 8000a76:	bd01      	pop	{r0, pc}

08000a78 <__aeabi_dcmpeq>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff fff4 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a80:	bf0c      	ite	eq
 8000a82:	2001      	moveq	r0, #1
 8000a84:	2000      	movne	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_dcmplt>:
 8000a8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a90:	f7ff ffea 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a94:	bf34      	ite	cc
 8000a96:	2001      	movcc	r0, #1
 8000a98:	2000      	movcs	r0, #0
 8000a9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_dcmple>:
 8000aa0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa4:	f7ff ffe0 	bl	8000a68 <__aeabi_cdcmpeq>
 8000aa8:	bf94      	ite	ls
 8000aaa:	2001      	movls	r0, #1
 8000aac:	2000      	movhi	r0, #0
 8000aae:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab2:	bf00      	nop

08000ab4 <__aeabi_dcmpge>:
 8000ab4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab8:	f7ff ffce 	bl	8000a58 <__aeabi_cdrcmple>
 8000abc:	bf94      	ite	ls
 8000abe:	2001      	movls	r0, #1
 8000ac0:	2000      	movhi	r0, #0
 8000ac2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_dcmpgt>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff ffc4 	bl	8000a58 <__aeabi_cdrcmple>
 8000ad0:	bf34      	ite	cc
 8000ad2:	2001      	movcc	r0, #1
 8000ad4:	2000      	movcs	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmpun>:
 8000adc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae4:	d102      	bne.n	8000aec <__aeabi_dcmpun+0x10>
 8000ae6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aea:	d10a      	bne.n	8000b02 <__aeabi_dcmpun+0x26>
 8000aec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af4:	d102      	bne.n	8000afc <__aeabi_dcmpun+0x20>
 8000af6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afa:	d102      	bne.n	8000b02 <__aeabi_dcmpun+0x26>
 8000afc:	f04f 0000 	mov.w	r0, #0
 8000b00:	4770      	bx	lr
 8000b02:	f04f 0001 	mov.w	r0, #1
 8000b06:	4770      	bx	lr

08000b08 <__aeabi_d2iz>:
 8000b08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b0c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b10:	d215      	bcs.n	8000b3e <__aeabi_d2iz+0x36>
 8000b12:	d511      	bpl.n	8000b38 <__aeabi_d2iz+0x30>
 8000b14:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b18:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b1c:	d912      	bls.n	8000b44 <__aeabi_d2iz+0x3c>
 8000b1e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b22:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b26:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b2a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b2e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b32:	bf18      	it	ne
 8000b34:	4240      	negne	r0, r0
 8000b36:	4770      	bx	lr
 8000b38:	f04f 0000 	mov.w	r0, #0
 8000b3c:	4770      	bx	lr
 8000b3e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b42:	d105      	bne.n	8000b50 <__aeabi_d2iz+0x48>
 8000b44:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b48:	bf08      	it	eq
 8000b4a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b4e:	4770      	bx	lr
 8000b50:	f04f 0000 	mov.w	r0, #0
 8000b54:	4770      	bx	lr
 8000b56:	bf00      	nop

08000b58 <__aeabi_d2f>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b60:	bf24      	itt	cs
 8000b62:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b66:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b6a:	d90d      	bls.n	8000b88 <__aeabi_d2f+0x30>
 8000b6c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b70:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b74:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b78:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b7c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b80:	bf08      	it	eq
 8000b82:	f020 0001 	biceq.w	r0, r0, #1
 8000b86:	4770      	bx	lr
 8000b88:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b8c:	d121      	bne.n	8000bd2 <__aeabi_d2f+0x7a>
 8000b8e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b92:	bfbc      	itt	lt
 8000b94:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	4770      	bxlt	lr
 8000b9a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b9e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ba2:	f1c2 0218 	rsb	r2, r2, #24
 8000ba6:	f1c2 0c20 	rsb	ip, r2, #32
 8000baa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bae:	fa20 f002 	lsr.w	r0, r0, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	f040 0001 	orrne.w	r0, r0, #1
 8000bb8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bbc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000bc0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bc4:	ea40 000c 	orr.w	r0, r0, ip
 8000bc8:	fa23 f302 	lsr.w	r3, r3, r2
 8000bcc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bd0:	e7cc      	b.n	8000b6c <__aeabi_d2f+0x14>
 8000bd2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bd6:	d107      	bne.n	8000be8 <__aeabi_d2f+0x90>
 8000bd8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bdc:	bf1e      	ittt	ne
 8000bde:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000be2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000be6:	4770      	bxne	lr
 8000be8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000bec:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000bf0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <Dotstar_Init>:
} DotStar_State;


DotStar_State dotstar_state;

void Dotstar_Init(DotStar_InitHandle* dotstar_init){
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b084      	sub	sp, #16
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	6078      	str	r0, [r7, #4]

   dotstar_state.spiHandle = dotstar_init->spiHandle;
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	4a23      	ldr	r2, [pc, #140]	; (8000c94 <Dotstar_Init+0x9c>)
 8000c06:	6013      	str	r3, [r2, #0]
   dotstar_state.numLEDs = dotstar_init->numLEDs;
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	889a      	ldrh	r2, [r3, #4]
 8000c0c:	4b21      	ldr	r3, [pc, #132]	; (8000c94 <Dotstar_Init+0x9c>)
 8000c0e:	809a      	strh	r2, [r3, #4]
   dotstar_state.brightness = 0;
 8000c10:	4b20      	ldr	r3, [pc, #128]	; (8000c94 <Dotstar_Init+0x9c>)
 8000c12:	2200      	movs	r2, #0
 8000c14:	719a      	strb	r2, [r3, #6]
   dotstar_state.rOffset = dotstar_init->colorOrder & 3;
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	799b      	ldrb	r3, [r3, #6]
 8000c1a:	f003 0303 	and.w	r3, r3, #3
 8000c1e:	b2da      	uxtb	r2, r3
 8000c20:	4b1c      	ldr	r3, [pc, #112]	; (8000c94 <Dotstar_Init+0x9c>)
 8000c22:	731a      	strb	r2, [r3, #12]
   dotstar_state.gOffset = (dotstar_init->colorOrder >> 2) & 3;
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	799b      	ldrb	r3, [r3, #6]
 8000c28:	089b      	lsrs	r3, r3, #2
 8000c2a:	b2db      	uxtb	r3, r3
 8000c2c:	f003 0303 	and.w	r3, r3, #3
 8000c30:	b2da      	uxtb	r2, r3
 8000c32:	4b18      	ldr	r3, [pc, #96]	; (8000c94 <Dotstar_Init+0x9c>)
 8000c34:	735a      	strb	r2, [r3, #13]
   dotstar_state.bOffset = (dotstar_init->colorOrder >> 4) & 3;
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	799b      	ldrb	r3, [r3, #6]
 8000c3a:	091b      	lsrs	r3, r3, #4
 8000c3c:	b2db      	uxtb	r3, r3
 8000c3e:	f003 0303 	and.w	r3, r3, #3
 8000c42:	b2da      	uxtb	r2, r3
 8000c44:	4b13      	ldr	r3, [pc, #76]	; (8000c94 <Dotstar_Init+0x9c>)
 8000c46:	739a      	strb	r2, [r3, #14]

   uint16_t bytes = (dotstar_state.rOffset == dotstar_state.gOffset) ?
 8000c48:	4b12      	ldr	r3, [pc, #72]	; (8000c94 <Dotstar_Init+0x9c>)
 8000c4a:	7b1a      	ldrb	r2, [r3, #12]
 8000c4c:	4b11      	ldr	r3, [pc, #68]	; (8000c94 <Dotstar_Init+0x9c>)
 8000c4e:	7b5b      	ldrb	r3, [r3, #13]
 8000c50:	429a      	cmp	r2, r3
 8000c52:	d10c      	bne.n	8000c6e <Dotstar_Init+0x76>
     dotstar_state.numLEDs + ((dotstar_state.numLEDs + 3) / 4) : // MONO: 10 bits/pixel, round up to next byte
 8000c54:	4b0f      	ldr	r3, [pc, #60]	; (8000c94 <Dotstar_Init+0x9c>)
 8000c56:	889a      	ldrh	r2, [r3, #4]
 8000c58:	4b0e      	ldr	r3, [pc, #56]	; (8000c94 <Dotstar_Init+0x9c>)
 8000c5a:	889b      	ldrh	r3, [r3, #4]
 8000c5c:	3303      	adds	r3, #3
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	da00      	bge.n	8000c64 <Dotstar_Init+0x6c>
 8000c62:	3303      	adds	r3, #3
 8000c64:	109b      	asrs	r3, r3, #2
 8000c66:	b29b      	uxth	r3, r3
   uint16_t bytes = (dotstar_state.rOffset == dotstar_state.gOffset) ?
 8000c68:	4413      	add	r3, r2
 8000c6a:	b29b      	uxth	r3, r3
 8000c6c:	e005      	b.n	8000c7a <Dotstar_Init+0x82>
     dotstar_state.numLEDs * 3;              // COLOR: 3 bytes/pixel
 8000c6e:	4b09      	ldr	r3, [pc, #36]	; (8000c94 <Dotstar_Init+0x9c>)
 8000c70:	889b      	ldrh	r3, [r3, #4]
   uint16_t bytes = (dotstar_state.rOffset == dotstar_state.gOffset) ?
 8000c72:	461a      	mov	r2, r3
 8000c74:	0052      	lsls	r2, r2, #1
 8000c76:	4413      	add	r3, r2
 8000c78:	b29b      	uxth	r3, r3
 8000c7a:	81fb      	strh	r3, [r7, #14]

   dotstar_state.pixels = (uint8_t *)malloc(bytes);
 8000c7c:	89fb      	ldrh	r3, [r7, #14]
 8000c7e:	4618      	mov	r0, r3
 8000c80:	f004 fad4 	bl	800522c <malloc>
 8000c84:	4603      	mov	r3, r0
 8000c86:	461a      	mov	r2, r3
 8000c88:	4b02      	ldr	r3, [pc, #8]	; (8000c94 <Dotstar_Init+0x9c>)
 8000c8a:	609a      	str	r2, [r3, #8]
}
 8000c8c:	bf00      	nop
 8000c8e:	3710      	adds	r7, #16
 8000c90:	46bd      	mov	sp, r7
 8000c92:	bd80      	pop	{r7, pc}
 8000c94:	20000208 	.word	0x20000208

08000c98 <ds_show>:
*/

/*!
  @brief   Transmit pixel data in RAM to DotStars.
*/
void ds_show(void) {
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b084      	sub	sp, #16
 8000c9c:	af00      	add	r7, sp, #0

  if(!dotstar_state.pixels) return;
 8000c9e:	4b4b      	ldr	r3, [pc, #300]	; (8000dcc <ds_show+0x134>)
 8000ca0:	689b      	ldr	r3, [r3, #8]
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	f000 808e 	beq.w	8000dc4 <ds_show+0x12c>

  uint8_t *ptr = dotstar_state.pixels, i;            // -> LED data
 8000ca8:	4b48      	ldr	r3, [pc, #288]	; (8000dcc <ds_show+0x134>)
 8000caa:	689b      	ldr	r3, [r3, #8]
 8000cac:	60fb      	str	r3, [r7, #12]
  uint16_t n   = dotstar_state.numLEDs;              // Counter
 8000cae:	4b47      	ldr	r3, [pc, #284]	; (8000dcc <ds_show+0x134>)
 8000cb0:	889b      	ldrh	r3, [r3, #4]
 8000cb2:	813b      	strh	r3, [r7, #8]
  uint16_t b16 = (uint16_t)dotstar_state.brightness; // Type-convert for fixed-point math
 8000cb4:	4b45      	ldr	r3, [pc, #276]	; (8000dcc <ds_show+0x134>)
 8000cb6:	799b      	ldrb	r3, [r3, #6]
 8000cb8:	80fb      	strh	r3, [r7, #6]
  uint8_t sendval;

    sendval = 0x00;
 8000cba:	2300      	movs	r3, #0
 8000cbc:	717b      	strb	r3, [r7, #5]
    for(i=0; i<4; i++) spi_out(&sendval);    // 4 byte start-frame marker
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	72fb      	strb	r3, [r7, #11]
 8000cc2:	e00a      	b.n	8000cda <ds_show+0x42>
 8000cc4:	4b41      	ldr	r3, [pc, #260]	; (8000dcc <ds_show+0x134>)
 8000cc6:	6818      	ldr	r0, [r3, #0]
 8000cc8:	1d79      	adds	r1, r7, #5
 8000cca:	f04f 33ff 	mov.w	r3, #4294967295
 8000cce:	2201      	movs	r2, #1
 8000cd0:	f003 ffb8 	bl	8004c44 <HAL_SPI_Transmit>
 8000cd4:	7afb      	ldrb	r3, [r7, #11]
 8000cd6:	3301      	adds	r3, #1
 8000cd8:	72fb      	strb	r3, [r7, #11]
 8000cda:	7afb      	ldrb	r3, [r7, #11]
 8000cdc:	2b03      	cmp	r3, #3
 8000cde:	d9f1      	bls.n	8000cc4 <ds_show+0x2c>

    if(dotstar_state.brightness) {                     // Scale pixel brightness on output
 8000ce0:	4b3a      	ldr	r3, [pc, #232]	; (8000dcc <ds_show+0x134>)
 8000ce2:	799b      	ldrb	r3, [r3, #6]
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d02c      	beq.n	8000d42 <ds_show+0xaa>
      do {                               // For each pixel...
    	sendval = 0xFF;
 8000ce8:	23ff      	movs	r3, #255	; 0xff
 8000cea:	717b      	strb	r3, [r7, #5]
        spi_out(&sendval);                   //  Pixel start
 8000cec:	4b37      	ldr	r3, [pc, #220]	; (8000dcc <ds_show+0x134>)
 8000cee:	6818      	ldr	r0, [r3, #0]
 8000cf0:	1d79      	adds	r1, r7, #5
 8000cf2:	f04f 33ff 	mov.w	r3, #4294967295
 8000cf6:	2201      	movs	r2, #1
 8000cf8:	f003 ffa4 	bl	8004c44 <HAL_SPI_Transmit>
        for(i=0; i<3; i++) {
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	72fb      	strb	r3, [r7, #11]
 8000d00:	e015      	b.n	8000d2e <ds_show+0x96>
        	sendval = (*ptr++ * b16) >> 8;
 8000d02:	68fb      	ldr	r3, [r7, #12]
 8000d04:	1c5a      	adds	r2, r3, #1
 8000d06:	60fa      	str	r2, [r7, #12]
 8000d08:	781b      	ldrb	r3, [r3, #0]
 8000d0a:	461a      	mov	r2, r3
 8000d0c:	88fb      	ldrh	r3, [r7, #6]
 8000d0e:	fb03 f302 	mul.w	r3, r3, r2
 8000d12:	121b      	asrs	r3, r3, #8
 8000d14:	b2db      	uxtb	r3, r3
 8000d16:	717b      	strb	r3, [r7, #5]
        	spi_out(&sendval); // Scale, write RGB
 8000d18:	4b2c      	ldr	r3, [pc, #176]	; (8000dcc <ds_show+0x134>)
 8000d1a:	6818      	ldr	r0, [r3, #0]
 8000d1c:	1d79      	adds	r1, r7, #5
 8000d1e:	f04f 33ff 	mov.w	r3, #4294967295
 8000d22:	2201      	movs	r2, #1
 8000d24:	f003 ff8e 	bl	8004c44 <HAL_SPI_Transmit>
        for(i=0; i<3; i++) {
 8000d28:	7afb      	ldrb	r3, [r7, #11]
 8000d2a:	3301      	adds	r3, #1
 8000d2c:	72fb      	strb	r3, [r7, #11]
 8000d2e:	7afb      	ldrb	r3, [r7, #11]
 8000d30:	2b02      	cmp	r3, #2
 8000d32:	d9e6      	bls.n	8000d02 <ds_show+0x6a>
        }
      } while(--n);
 8000d34:	893b      	ldrh	r3, [r7, #8]
 8000d36:	3b01      	subs	r3, #1
 8000d38:	813b      	strh	r3, [r7, #8]
 8000d3a:	893b      	ldrh	r3, [r7, #8]
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d1d3      	bne.n	8000ce8 <ds_show+0x50>
 8000d40:	e025      	b.n	8000d8e <ds_show+0xf6>
    } else {                             // Full brightness (no scaling)
      do {                               // For each pixel...
    	sendval = 0xFF;
 8000d42:	23ff      	movs	r3, #255	; 0xff
 8000d44:	717b      	strb	r3, [r7, #5]
        spi_out(&sendval);                   //  Pixel start
 8000d46:	4b21      	ldr	r3, [pc, #132]	; (8000dcc <ds_show+0x134>)
 8000d48:	6818      	ldr	r0, [r3, #0]
 8000d4a:	1d79      	adds	r1, r7, #5
 8000d4c:	f04f 33ff 	mov.w	r3, #4294967295
 8000d50:	2201      	movs	r2, #1
 8000d52:	f003 ff77 	bl	8004c44 <HAL_SPI_Transmit>
        for(i=0; i<3; i++) {
 8000d56:	2300      	movs	r3, #0
 8000d58:	72fb      	strb	r3, [r7, #11]
 8000d5a:	e00f      	b.n	8000d7c <ds_show+0xe4>
        	sendval = *ptr++;
 8000d5c:	68fb      	ldr	r3, [r7, #12]
 8000d5e:	1c5a      	adds	r2, r3, #1
 8000d60:	60fa      	str	r2, [r7, #12]
 8000d62:	781b      	ldrb	r3, [r3, #0]
 8000d64:	717b      	strb	r3, [r7, #5]
        	spi_out(&sendval); // Write R,G,B
 8000d66:	4b19      	ldr	r3, [pc, #100]	; (8000dcc <ds_show+0x134>)
 8000d68:	6818      	ldr	r0, [r3, #0]
 8000d6a:	1d79      	adds	r1, r7, #5
 8000d6c:	f04f 33ff 	mov.w	r3, #4294967295
 8000d70:	2201      	movs	r2, #1
 8000d72:	f003 ff67 	bl	8004c44 <HAL_SPI_Transmit>
        for(i=0; i<3; i++) {
 8000d76:	7afb      	ldrb	r3, [r7, #11]
 8000d78:	3301      	adds	r3, #1
 8000d7a:	72fb      	strb	r3, [r7, #11]
 8000d7c:	7afb      	ldrb	r3, [r7, #11]
 8000d7e:	2b02      	cmp	r3, #2
 8000d80:	d9ec      	bls.n	8000d5c <ds_show+0xc4>
        }
      } while(--n);
 8000d82:	893b      	ldrh	r3, [r7, #8]
 8000d84:	3b01      	subs	r3, #1
 8000d86:	813b      	strh	r3, [r7, #8]
 8000d88:	893b      	ldrh	r3, [r7, #8]
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d1d9      	bne.n	8000d42 <ds_show+0xaa>
    // revisions are more strict (e.g. might mandate use of end-frame
    // before start-frame marker). i.e. let's not remove this. But after
    // testing a bit more the suggestion is to use at least (numLeds+1)/2
    // high values (1) or (numLeds+15)/16 full bytes as EndFrame. For details see also:
    // https://cpldcpu.wordpress.com/2014/11/30/understanding-the-apa102-superled/
    sendval = 0xFF;
 8000d8e:	23ff      	movs	r3, #255	; 0xff
 8000d90:	717b      	strb	r3, [r7, #5]
    for(i=0; i<((dotstar_state.numLEDs + 15) / 16); i++) spi_out(&sendval);
 8000d92:	2300      	movs	r3, #0
 8000d94:	72fb      	strb	r3, [r7, #11]
 8000d96:	e00a      	b.n	8000dae <ds_show+0x116>
 8000d98:	4b0c      	ldr	r3, [pc, #48]	; (8000dcc <ds_show+0x134>)
 8000d9a:	6818      	ldr	r0, [r3, #0]
 8000d9c:	1d79      	adds	r1, r7, #5
 8000d9e:	f04f 33ff 	mov.w	r3, #4294967295
 8000da2:	2201      	movs	r2, #1
 8000da4:	f003 ff4e 	bl	8004c44 <HAL_SPI_Transmit>
 8000da8:	7afb      	ldrb	r3, [r7, #11]
 8000daa:	3301      	adds	r3, #1
 8000dac:	72fb      	strb	r3, [r7, #11]
 8000dae:	7afa      	ldrb	r2, [r7, #11]
 8000db0:	4b06      	ldr	r3, [pc, #24]	; (8000dcc <ds_show+0x134>)
 8000db2:	889b      	ldrh	r3, [r3, #4]
 8000db4:	330f      	adds	r3, #15
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	da00      	bge.n	8000dbc <ds_show+0x124>
 8000dba:	330f      	adds	r3, #15
 8000dbc:	111b      	asrs	r3, r3, #4
 8000dbe:	429a      	cmp	r2, r3
 8000dc0:	dbea      	blt.n	8000d98 <ds_show+0x100>
 8000dc2:	e000      	b.n	8000dc6 <ds_show+0x12e>
  if(!dotstar_state.pixels) return;
 8000dc4:	bf00      	nop

}
 8000dc6:	3710      	adds	r7, #16
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	bd80      	pop	{r7, pc}
 8000dcc:	20000208 	.word	0x20000208

08000dd0 <ds_clear>:

/*!
  @brief   Fill the whole DotStar strip with 0 / black / off.
*/
void ds_clear() {
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	af00      	add	r7, sp, #0
  memset(dotstar_state.pixels, 0, (dotstar_state.rOffset == dotstar_state.gOffset) ?
 8000dd4:	4b0f      	ldr	r3, [pc, #60]	; (8000e14 <ds_clear+0x44>)
 8000dd6:	6898      	ldr	r0, [r3, #8]
 8000dd8:	4b0e      	ldr	r3, [pc, #56]	; (8000e14 <ds_clear+0x44>)
 8000dda:	7b1a      	ldrb	r2, [r3, #12]
 8000ddc:	4b0d      	ldr	r3, [pc, #52]	; (8000e14 <ds_clear+0x44>)
 8000dde:	7b5b      	ldrb	r3, [r3, #13]
 8000de0:	429a      	cmp	r2, r3
 8000de2:	d10b      	bne.n	8000dfc <ds_clear+0x2c>
    dotstar_state.numLEDs + ((dotstar_state.numLEDs + 3) / 4) : // MONO: 10 bits/pixel
 8000de4:	4b0b      	ldr	r3, [pc, #44]	; (8000e14 <ds_clear+0x44>)
 8000de6:	889b      	ldrh	r3, [r3, #4]
 8000de8:	461a      	mov	r2, r3
 8000dea:	4b0a      	ldr	r3, [pc, #40]	; (8000e14 <ds_clear+0x44>)
 8000dec:	889b      	ldrh	r3, [r3, #4]
 8000dee:	3303      	adds	r3, #3
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	da00      	bge.n	8000df6 <ds_clear+0x26>
 8000df4:	3303      	adds	r3, #3
 8000df6:	109b      	asrs	r3, r3, #2
 8000df8:	4413      	add	r3, r2
 8000dfa:	e005      	b.n	8000e08 <ds_clear+0x38>
    dotstar_state.numLEDs * 3);                   // COLOR: 3 bytes/pixel
 8000dfc:	4b05      	ldr	r3, [pc, #20]	; (8000e14 <ds_clear+0x44>)
 8000dfe:	889b      	ldrh	r3, [r3, #4]
 8000e00:	461a      	mov	r2, r3
 8000e02:	4613      	mov	r3, r2
 8000e04:	005b      	lsls	r3, r3, #1
 8000e06:	4413      	add	r3, r2
  memset(dotstar_state.pixels, 0, (dotstar_state.rOffset == dotstar_state.gOffset) ?
 8000e08:	461a      	mov	r2, r3
 8000e0a:	2100      	movs	r1, #0
 8000e0c:	f004 fa16 	bl	800523c <memset>
}
 8000e10:	bf00      	nop
 8000e12:	bd80      	pop	{r7, pc}
 8000e14:	20000208 	.word	0x20000208

08000e18 <ds_setPixelColor32B>:
  @param   n  Pixel index, starting from 0.
  @param   c  32-bit color value. Most significant byte is 0, second is
              red, then green, and least significant byte is blue.
              e.g. 0x00RRGGBB
*/
void ds_setPixelColor32B(uint16_t n, uint32_t c) {
 8000e18:	b480      	push	{r7}
 8000e1a:	b085      	sub	sp, #20
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	4603      	mov	r3, r0
 8000e20:	6039      	str	r1, [r7, #0]
 8000e22:	80fb      	strh	r3, [r7, #6]
  if(n < dotstar_state.numLEDs) {
 8000e24:	4b16      	ldr	r3, [pc, #88]	; (8000e80 <ds_setPixelColor32B+0x68>)
 8000e26:	889b      	ldrh	r3, [r3, #4]
 8000e28:	88fa      	ldrh	r2, [r7, #6]
 8000e2a:	429a      	cmp	r2, r3
 8000e2c:	d221      	bcs.n	8000e72 <ds_setPixelColor32B+0x5a>
    uint8_t *p = &dotstar_state.pixels[n * 3];
 8000e2e:	4b14      	ldr	r3, [pc, #80]	; (8000e80 <ds_setPixelColor32B+0x68>)
 8000e30:	6899      	ldr	r1, [r3, #8]
 8000e32:	88fa      	ldrh	r2, [r7, #6]
 8000e34:	4613      	mov	r3, r2
 8000e36:	005b      	lsls	r3, r3, #1
 8000e38:	4413      	add	r3, r2
 8000e3a:	440b      	add	r3, r1
 8000e3c:	60fb      	str	r3, [r7, #12]
    p[dotstar_state.rOffset] = (uint8_t)(c >> 16);
 8000e3e:	683b      	ldr	r3, [r7, #0]
 8000e40:	0c1a      	lsrs	r2, r3, #16
 8000e42:	4b0f      	ldr	r3, [pc, #60]	; (8000e80 <ds_setPixelColor32B+0x68>)
 8000e44:	7b1b      	ldrb	r3, [r3, #12]
 8000e46:	4619      	mov	r1, r3
 8000e48:	68fb      	ldr	r3, [r7, #12]
 8000e4a:	440b      	add	r3, r1
 8000e4c:	b2d2      	uxtb	r2, r2
 8000e4e:	701a      	strb	r2, [r3, #0]
    p[dotstar_state.gOffset] = (uint8_t)(c >>  8);
 8000e50:	683b      	ldr	r3, [r7, #0]
 8000e52:	0a1a      	lsrs	r2, r3, #8
 8000e54:	4b0a      	ldr	r3, [pc, #40]	; (8000e80 <ds_setPixelColor32B+0x68>)
 8000e56:	7b5b      	ldrb	r3, [r3, #13]
 8000e58:	4619      	mov	r1, r3
 8000e5a:	68fb      	ldr	r3, [r7, #12]
 8000e5c:	440b      	add	r3, r1
 8000e5e:	b2d2      	uxtb	r2, r2
 8000e60:	701a      	strb	r2, [r3, #0]
    p[dotstar_state.bOffset] = (uint8_t)c;
 8000e62:	4b07      	ldr	r3, [pc, #28]	; (8000e80 <ds_setPixelColor32B+0x68>)
 8000e64:	7b9b      	ldrb	r3, [r3, #14]
 8000e66:	461a      	mov	r2, r3
 8000e68:	68fb      	ldr	r3, [r7, #12]
 8000e6a:	4413      	add	r3, r2
 8000e6c:	683a      	ldr	r2, [r7, #0]
 8000e6e:	b2d2      	uxtb	r2, r2
 8000e70:	701a      	strb	r2, [r3, #0]
  }
}
 8000e72:	bf00      	nop
 8000e74:	3714      	adds	r7, #20
 8000e76:	46bd      	mov	sp, r7
 8000e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7c:	4770      	bx	lr
 8000e7e:	bf00      	nop
 8000e80:	20000208 	.word	0x20000208

08000e84 <ds_setBrightness>:
           is 'non destructive' -- it's applied as color data is being
           issued to the strip, not during setPixelColor(), and also
           means that getPixelColor() returns the exact value originally
           stored.
*/
void ds_setBrightness(uint8_t b) {
 8000e84:	b480      	push	{r7}
 8000e86:	b083      	sub	sp, #12
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	4603      	mov	r3, r0
 8000e8c:	71fb      	strb	r3, [r7, #7]
  // optimizes the actual scaling math later, allowing a fast 8x8-bit
  // multiply and taking the MSB. 'brightness' is a uint8_t, adding 1
  // here may (intentionally) roll over...so 0 = max brightness (color
  // values are interpreted literally; no scaling), 1 = min brightness
  // (off), 255 = just below max brightness.
  dotstar_state.brightness = b + 1;
 8000e8e:	79fb      	ldrb	r3, [r7, #7]
 8000e90:	3301      	adds	r3, #1
 8000e92:	b2da      	uxtb	r2, r3
 8000e94:	4b03      	ldr	r3, [pc, #12]	; (8000ea4 <ds_setBrightness+0x20>)
 8000e96:	719a      	strb	r2, [r3, #6]
}
 8000e98:	bf00      	nop
 8000e9a:	370c      	adds	r7, #12
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea2:	4770      	bx	lr
 8000ea4:	20000208 	.word	0x20000208

08000ea8 <I2C_Write_Byte>:
#include "stm32wbxx_hal_i2c.h"
#include "stm32wbxx_hal.h"


void I2C_Write_Byte(uint8_t value, uint8_t Cmd)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b086      	sub	sp, #24
 8000eac:	af02      	add	r7, sp, #8
 8000eae:	4603      	mov	r3, r0
 8000eb0:	460a      	mov	r2, r1
 8000eb2:	71fb      	strb	r3, [r7, #7]
 8000eb4:	4613      	mov	r3, r2
 8000eb6:	71bb      	strb	r3, [r7, #6]
  uint16_t Addr = 0x3C << 1;
 8000eb8:	2378      	movs	r3, #120	; 0x78
 8000eba:	81fb      	strh	r3, [r7, #14]
  uint8_t Data[2];
  Data[0] = Cmd;
 8000ebc:	79bb      	ldrb	r3, [r7, #6]
 8000ebe:	733b      	strb	r3, [r7, #12]
  Data[1] = value;
 8000ec0:	79fb      	ldrb	r3, [r7, #7]
 8000ec2:	737b      	strb	r3, [r7, #13]

  HAL_I2C_Master_Transmit(&ER_OLED_I2C_PORT, Addr, Data, 2, HAL_MAX_DELAY);
 8000ec4:	f107 020c 	add.w	r2, r7, #12
 8000ec8:	89f9      	ldrh	r1, [r7, #14]
 8000eca:	f04f 33ff 	mov.w	r3, #4294967295
 8000ece:	9300      	str	r3, [sp, #0]
 8000ed0:	2302      	movs	r3, #2
 8000ed2:	4803      	ldr	r0, [pc, #12]	; (8000ee0 <I2C_Write_Byte+0x38>)
 8000ed4:	f001 fc0e 	bl	80026f4 <HAL_I2C_Master_Transmit>
}
 8000ed8:	bf00      	nop
 8000eda:	3710      	adds	r7, #16
 8000edc:	46bd      	mov	sp, r7
 8000ede:	bd80      	pop	{r7, pc}
 8000ee0:	20000218 	.word	0x20000218

08000ee4 <er_oled_begin>:

void er_oled_begin()
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	af00      	add	r7, sp, #0
    command(0xae);//--turn off oled panel
 8000ee8:	2100      	movs	r1, #0
 8000eea:	20ae      	movs	r0, #174	; 0xae
 8000eec:	f7ff ffdc 	bl	8000ea8 <I2C_Write_Byte>

    command(0xd5);//--set display clock divide ratio/oscillator frequency
 8000ef0:	2100      	movs	r1, #0
 8000ef2:	20d5      	movs	r0, #213	; 0xd5
 8000ef4:	f7ff ffd8 	bl	8000ea8 <I2C_Write_Byte>
    command(0x80);//--set divide ratio
 8000ef8:	2100      	movs	r1, #0
 8000efa:	2080      	movs	r0, #128	; 0x80
 8000efc:	f7ff ffd4 	bl	8000ea8 <I2C_Write_Byte>

    command(0xa8);//--set multiplex ratio
 8000f00:	2100      	movs	r1, #0
 8000f02:	20a8      	movs	r0, #168	; 0xa8
 8000f04:	f7ff ffd0 	bl	8000ea8 <I2C_Write_Byte>
    command(0x27);//--1/40 duty
 8000f08:	2100      	movs	r1, #0
 8000f0a:	2027      	movs	r0, #39	; 0x27
 8000f0c:	f7ff ffcc 	bl	8000ea8 <I2C_Write_Byte>

    command(0xd3);//-set display offset
 8000f10:	2100      	movs	r1, #0
 8000f12:	20d3      	movs	r0, #211	; 0xd3
 8000f14:	f7ff ffc8 	bl	8000ea8 <I2C_Write_Byte>
    command(0x00);//-not offset
 8000f18:	2100      	movs	r1, #0
 8000f1a:	2000      	movs	r0, #0
 8000f1c:	f7ff ffc4 	bl	8000ea8 <I2C_Write_Byte>

    command(0xad);//--Internal IREF Setting
 8000f20:	2100      	movs	r1, #0
 8000f22:	20ad      	movs	r0, #173	; 0xad
 8000f24:	f7ff ffc0 	bl	8000ea8 <I2C_Write_Byte>
    command(0x30);//--
 8000f28:	2100      	movs	r1, #0
 8000f2a:	2030      	movs	r0, #48	; 0x30
 8000f2c:	f7ff ffbc 	bl	8000ea8 <I2C_Write_Byte>

    command(0x8d);//--set Charge Pump enable/disable
 8000f30:	2100      	movs	r1, #0
 8000f32:	208d      	movs	r0, #141	; 0x8d
 8000f34:	f7ff ffb8 	bl	8000ea8 <I2C_Write_Byte>
    command(0x14);//--set(0x10) disable
 8000f38:	2100      	movs	r1, #0
 8000f3a:	2014      	movs	r0, #20
 8000f3c:	f7ff ffb4 	bl	8000ea8 <I2C_Write_Byte>

    command(0x40);//--set start line address
 8000f40:	2100      	movs	r1, #0
 8000f42:	2040      	movs	r0, #64	; 0x40
 8000f44:	f7ff ffb0 	bl	8000ea8 <I2C_Write_Byte>

    command(0xa6);//--set normal display
 8000f48:	2100      	movs	r1, #0
 8000f4a:	20a6      	movs	r0, #166	; 0xa6
 8000f4c:	f7ff ffac 	bl	8000ea8 <I2C_Write_Byte>

    command(0xa4);//Disable Entire Display On
 8000f50:	2100      	movs	r1, #0
 8000f52:	20a4      	movs	r0, #164	; 0xa4
 8000f54:	f7ff ffa8 	bl	8000ea8 <I2C_Write_Byte>

    command(0xa1);//--set segment re-map 128 to 0
 8000f58:	2100      	movs	r1, #0
 8000f5a:	20a1      	movs	r0, #161	; 0xa1
 8000f5c:	f7ff ffa4 	bl	8000ea8 <I2C_Write_Byte>

    command(0xC8);//--Set COM Output Scan Direction 64 to 0
 8000f60:	2100      	movs	r1, #0
 8000f62:	20c8      	movs	r0, #200	; 0xc8
 8000f64:	f7ff ffa0 	bl	8000ea8 <I2C_Write_Byte>

    command(0xda);//--set com pins hardware configuration
 8000f68:	2100      	movs	r1, #0
 8000f6a:	20da      	movs	r0, #218	; 0xda
 8000f6c:	f7ff ff9c 	bl	8000ea8 <I2C_Write_Byte>
    command(0x12);
 8000f70:	2100      	movs	r1, #0
 8000f72:	2012      	movs	r0, #18
 8000f74:	f7ff ff98 	bl	8000ea8 <I2C_Write_Byte>

    command(0x81);//--set contrast control register
 8000f78:	2100      	movs	r1, #0
 8000f7a:	2081      	movs	r0, #129	; 0x81
 8000f7c:	f7ff ff94 	bl	8000ea8 <I2C_Write_Byte>
    command(0xaf);
 8000f80:	2100      	movs	r1, #0
 8000f82:	20af      	movs	r0, #175	; 0xaf
 8000f84:	f7ff ff90 	bl	8000ea8 <I2C_Write_Byte>

    command(0xd9);//--set pre-charge period
 8000f88:	2100      	movs	r1, #0
 8000f8a:	20d9      	movs	r0, #217	; 0xd9
 8000f8c:	f7ff ff8c 	bl	8000ea8 <I2C_Write_Byte>
    command(0x22);
 8000f90:	2100      	movs	r1, #0
 8000f92:	2022      	movs	r0, #34	; 0x22
 8000f94:	f7ff ff88 	bl	8000ea8 <I2C_Write_Byte>

    command(0xdb);//--set vcomh
 8000f98:	2100      	movs	r1, #0
 8000f9a:	20db      	movs	r0, #219	; 0xdb
 8000f9c:	f7ff ff84 	bl	8000ea8 <I2C_Write_Byte>
    command(0x20);
 8000fa0:	2100      	movs	r1, #0
 8000fa2:	2020      	movs	r0, #32
 8000fa4:	f7ff ff80 	bl	8000ea8 <I2C_Write_Byte>

    command(0xaf);//--turn on oled panel
 8000fa8:	2100      	movs	r1, #0
 8000faa:	20af      	movs	r0, #175	; 0xaf
 8000fac:	f7ff ff7c 	bl	8000ea8 <I2C_Write_Byte>

}
 8000fb0:	bf00      	nop
 8000fb2:	bd80      	pop	{r7, pc}

08000fb4 <er_oled_clear>:

void er_oled_clear(uint8_t* buffer)
{
 8000fb4:	b480      	push	{r7}
 8000fb6:	b085      	sub	sp, #20
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]
	int i;
	for(i = 0;i < WIDTH * HEIGHT / 8;i++)
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	60fb      	str	r3, [r7, #12]
 8000fc0:	e007      	b.n	8000fd2 <er_oled_clear+0x1e>
	{
		buffer[i] = 0;
 8000fc2:	68fb      	ldr	r3, [r7, #12]
 8000fc4:	687a      	ldr	r2, [r7, #4]
 8000fc6:	4413      	add	r3, r2
 8000fc8:	2200      	movs	r2, #0
 8000fca:	701a      	strb	r2, [r3, #0]
	for(i = 0;i < WIDTH * HEIGHT / 8;i++)
 8000fcc:	68fb      	ldr	r3, [r7, #12]
 8000fce:	3301      	adds	r3, #1
 8000fd0:	60fb      	str	r3, [r7, #12]
 8000fd2:	68fb      	ldr	r3, [r7, #12]
 8000fd4:	f5b3 7fb4 	cmp.w	r3, #360	; 0x168
 8000fd8:	dbf3      	blt.n	8000fc2 <er_oled_clear+0xe>
	}
}
 8000fda:	bf00      	nop
 8000fdc:	3714      	adds	r7, #20
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe4:	4770      	bx	lr

08000fe6 <er_oled_pixel>:

void er_oled_pixel(int x, int y, char color, uint8_t* buffer)
{
 8000fe6:	b480      	push	{r7}
 8000fe8:	b085      	sub	sp, #20
 8000fea:	af00      	add	r7, sp, #0
 8000fec:	60f8      	str	r0, [r7, #12]
 8000fee:	60b9      	str	r1, [r7, #8]
 8000ff0:	603b      	str	r3, [r7, #0]
 8000ff2:	4613      	mov	r3, r2
 8000ff4:	71fb      	strb	r3, [r7, #7]
    if(x > WIDTH || y > HEIGHT)return ;
 8000ff6:	68fb      	ldr	r3, [r7, #12]
 8000ff8:	2b48      	cmp	r3, #72	; 0x48
 8000ffa:	dc61      	bgt.n	80010c0 <er_oled_pixel+0xda>
 8000ffc:	68bb      	ldr	r3, [r7, #8]
 8000ffe:	2b28      	cmp	r3, #40	; 0x28
 8001000:	dc5e      	bgt.n	80010c0 <er_oled_pixel+0xda>
    if(color)
 8001002:	79fb      	ldrb	r3, [r7, #7]
 8001004:	2b00      	cmp	r3, #0
 8001006:	d02c      	beq.n	8001062 <er_oled_pixel+0x7c>
        buffer[x+(y/8)*WIDTH] |= 1<<(y%8);
 8001008:	68bb      	ldr	r3, [r7, #8]
 800100a:	2b00      	cmp	r3, #0
 800100c:	da00      	bge.n	8001010 <er_oled_pixel+0x2a>
 800100e:	3307      	adds	r3, #7
 8001010:	10db      	asrs	r3, r3, #3
 8001012:	461a      	mov	r2, r3
 8001014:	4613      	mov	r3, r2
 8001016:	00db      	lsls	r3, r3, #3
 8001018:	4413      	add	r3, r2
 800101a:	00db      	lsls	r3, r3, #3
 800101c:	4619      	mov	r1, r3
 800101e:	68fb      	ldr	r3, [r7, #12]
 8001020:	440b      	add	r3, r1
 8001022:	4619      	mov	r1, r3
 8001024:	683b      	ldr	r3, [r7, #0]
 8001026:	440b      	add	r3, r1
 8001028:	781b      	ldrb	r3, [r3, #0]
 800102a:	b259      	sxtb	r1, r3
 800102c:	68bb      	ldr	r3, [r7, #8]
 800102e:	4258      	negs	r0, r3
 8001030:	f003 0307 	and.w	r3, r3, #7
 8001034:	f000 0007 	and.w	r0, r0, #7
 8001038:	bf58      	it	pl
 800103a:	4243      	negpl	r3, r0
 800103c:	2001      	movs	r0, #1
 800103e:	fa00 f303 	lsl.w	r3, r0, r3
 8001042:	b25b      	sxtb	r3, r3
 8001044:	430b      	orrs	r3, r1
 8001046:	b259      	sxtb	r1, r3
 8001048:	4613      	mov	r3, r2
 800104a:	00db      	lsls	r3, r3, #3
 800104c:	4413      	add	r3, r2
 800104e:	00db      	lsls	r3, r3, #3
 8001050:	461a      	mov	r2, r3
 8001052:	68fb      	ldr	r3, [r7, #12]
 8001054:	4413      	add	r3, r2
 8001056:	461a      	mov	r2, r3
 8001058:	683b      	ldr	r3, [r7, #0]
 800105a:	4413      	add	r3, r2
 800105c:	b2ca      	uxtb	r2, r1
 800105e:	701a      	strb	r2, [r3, #0]
 8001060:	e02f      	b.n	80010c2 <er_oled_pixel+0xdc>
    else
        buffer[x+(y/8)*WIDTH] &= ~(1<<(y%8));
 8001062:	68bb      	ldr	r3, [r7, #8]
 8001064:	2b00      	cmp	r3, #0
 8001066:	da00      	bge.n	800106a <er_oled_pixel+0x84>
 8001068:	3307      	adds	r3, #7
 800106a:	10db      	asrs	r3, r3, #3
 800106c:	461a      	mov	r2, r3
 800106e:	4613      	mov	r3, r2
 8001070:	00db      	lsls	r3, r3, #3
 8001072:	4413      	add	r3, r2
 8001074:	00db      	lsls	r3, r3, #3
 8001076:	4619      	mov	r1, r3
 8001078:	68fb      	ldr	r3, [r7, #12]
 800107a:	440b      	add	r3, r1
 800107c:	4619      	mov	r1, r3
 800107e:	683b      	ldr	r3, [r7, #0]
 8001080:	440b      	add	r3, r1
 8001082:	781b      	ldrb	r3, [r3, #0]
 8001084:	b259      	sxtb	r1, r3
 8001086:	68bb      	ldr	r3, [r7, #8]
 8001088:	4258      	negs	r0, r3
 800108a:	f003 0307 	and.w	r3, r3, #7
 800108e:	f000 0007 	and.w	r0, r0, #7
 8001092:	bf58      	it	pl
 8001094:	4243      	negpl	r3, r0
 8001096:	2001      	movs	r0, #1
 8001098:	fa00 f303 	lsl.w	r3, r0, r3
 800109c:	b25b      	sxtb	r3, r3
 800109e:	43db      	mvns	r3, r3
 80010a0:	b25b      	sxtb	r3, r3
 80010a2:	400b      	ands	r3, r1
 80010a4:	b259      	sxtb	r1, r3
 80010a6:	4613      	mov	r3, r2
 80010a8:	00db      	lsls	r3, r3, #3
 80010aa:	4413      	add	r3, r2
 80010ac:	00db      	lsls	r3, r3, #3
 80010ae:	461a      	mov	r2, r3
 80010b0:	68fb      	ldr	r3, [r7, #12]
 80010b2:	4413      	add	r3, r2
 80010b4:	461a      	mov	r2, r3
 80010b6:	683b      	ldr	r3, [r7, #0]
 80010b8:	4413      	add	r3, r2
 80010ba:	b2ca      	uxtb	r2, r1
 80010bc:	701a      	strb	r2, [r3, #0]
 80010be:	e000      	b.n	80010c2 <er_oled_pixel+0xdc>
    if(x > WIDTH || y > HEIGHT)return ;
 80010c0:	bf00      	nop
}
 80010c2:	3714      	adds	r7, #20
 80010c4:	46bd      	mov	sp, r7
 80010c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ca:	4770      	bx	lr

080010cc <er_oled_char>:
		}
	}
}

void er_oled_char(unsigned char x, unsigned char y, char acsii, char size, char mode, uint8_t* buffer)
{
 80010cc:	b590      	push	{r4, r7, lr}
 80010ce:	b087      	sub	sp, #28
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	4604      	mov	r4, r0
 80010d4:	4608      	mov	r0, r1
 80010d6:	4611      	mov	r1, r2
 80010d8:	461a      	mov	r2, r3
 80010da:	4623      	mov	r3, r4
 80010dc:	71fb      	strb	r3, [r7, #7]
 80010de:	4603      	mov	r3, r0
 80010e0:	71bb      	strb	r3, [r7, #6]
 80010e2:	460b      	mov	r3, r1
 80010e4:	717b      	strb	r3, [r7, #5]
 80010e6:	4613      	mov	r3, r2
 80010e8:	713b      	strb	r3, [r7, #4]
    unsigned char i, j, y0=y;
 80010ea:	79bb      	ldrb	r3, [r7, #6]
 80010ec:	743b      	strb	r3, [r7, #16]
    uint16_t temp;
    uint16_t position = 0x80;
 80010ee:	2380      	movs	r3, #128	; 0x80
 80010f0:	827b      	strh	r3, [r7, #18]
    uint8_t maxindex = 8;
 80010f2:	2308      	movs	r3, #8
 80010f4:	747b      	strb	r3, [r7, #17]
    unsigned char ch = acsii - ' ';
 80010f6:	797b      	ldrb	r3, [r7, #5]
 80010f8:	3b20      	subs	r3, #32
 80010fa:	73fb      	strb	r3, [r7, #15]

    if (size == 32){
 80010fc:	793b      	ldrb	r3, [r7, #4]
 80010fe:	2b20      	cmp	r3, #32
 8001100:	d104      	bne.n	800110c <er_oled_char+0x40>
    	position = 0x8000;
 8001102:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001106:	827b      	strh	r3, [r7, #18]
    	maxindex =16;
 8001108:	2310      	movs	r3, #16
 800110a:	747b      	strb	r3, [r7, #17]
    }

    for(i = 0;i<size;i++) {
 800110c:	2300      	movs	r3, #0
 800110e:	75fb      	strb	r3, [r7, #23]
 8001110:	e0b1      	b.n	8001276 <er_oled_char+0x1aa>
        if(size == 12)
 8001112:	793b      	ldrb	r3, [r7, #4]
 8001114:	2b0c      	cmp	r3, #12
 8001116:	d11d      	bne.n	8001154 <er_oled_char+0x88>
        {
            if(mode)temp = Font1206[ch][i];
 8001118:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800111c:	2b00      	cmp	r3, #0
 800111e:	d00b      	beq.n	8001138 <er_oled_char+0x6c>
 8001120:	7bfa      	ldrb	r2, [r7, #15]
 8001122:	7df9      	ldrb	r1, [r7, #23]
 8001124:	4858      	ldr	r0, [pc, #352]	; (8001288 <er_oled_char+0x1bc>)
 8001126:	4613      	mov	r3, r2
 8001128:	005b      	lsls	r3, r3, #1
 800112a:	4413      	add	r3, r2
 800112c:	009b      	lsls	r3, r3, #2
 800112e:	4403      	add	r3, r0
 8001130:	440b      	add	r3, r1
 8001132:	781b      	ldrb	r3, [r3, #0]
 8001134:	82bb      	strh	r3, [r7, #20]
 8001136:	e06c      	b.n	8001212 <er_oled_char+0x146>
            else temp = ~Font1206[ch][i];
 8001138:	7bfa      	ldrb	r2, [r7, #15]
 800113a:	7df9      	ldrb	r1, [r7, #23]
 800113c:	4852      	ldr	r0, [pc, #328]	; (8001288 <er_oled_char+0x1bc>)
 800113e:	4613      	mov	r3, r2
 8001140:	005b      	lsls	r3, r3, #1
 8001142:	4413      	add	r3, r2
 8001144:	009b      	lsls	r3, r3, #2
 8001146:	4403      	add	r3, r0
 8001148:	440b      	add	r3, r1
 800114a:	781b      	ldrb	r3, [r3, #0]
 800114c:	b29b      	uxth	r3, r3
 800114e:	43db      	mvns	r3, r3
 8001150:	82bb      	strh	r3, [r7, #20]
 8001152:	e05e      	b.n	8001212 <er_oled_char+0x146>
        }
        else if(size == 16)
 8001154:	793b      	ldrb	r3, [r7, #4]
 8001156:	2b10      	cmp	r3, #16
 8001158:	d117      	bne.n	800118a <er_oled_char+0xbe>
        {
            if(mode)temp = Font1608[ch][i];
 800115a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800115e:	2b00      	cmp	r3, #0
 8001160:	d008      	beq.n	8001174 <er_oled_char+0xa8>
 8001162:	7bfa      	ldrb	r2, [r7, #15]
 8001164:	7dfb      	ldrb	r3, [r7, #23]
 8001166:	4949      	ldr	r1, [pc, #292]	; (800128c <er_oled_char+0x1c0>)
 8001168:	0112      	lsls	r2, r2, #4
 800116a:	440a      	add	r2, r1
 800116c:	4413      	add	r3, r2
 800116e:	781b      	ldrb	r3, [r3, #0]
 8001170:	82bb      	strh	r3, [r7, #20]
 8001172:	e04e      	b.n	8001212 <er_oled_char+0x146>
            else temp = ~Font1608[ch][i];
 8001174:	7bfa      	ldrb	r2, [r7, #15]
 8001176:	7dfb      	ldrb	r3, [r7, #23]
 8001178:	4944      	ldr	r1, [pc, #272]	; (800128c <er_oled_char+0x1c0>)
 800117a:	0112      	lsls	r2, r2, #4
 800117c:	440a      	add	r2, r1
 800117e:	4413      	add	r3, r2
 8001180:	781b      	ldrb	r3, [r3, #0]
 8001182:	b29b      	uxth	r3, r3
 8001184:	43db      	mvns	r3, r3
 8001186:	82bb      	strh	r3, [r7, #20]
 8001188:	e043      	b.n	8001212 <er_oled_char+0x146>
        }
        else {
            if(mode) {
 800118a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800118e:	2b00      	cmp	r3, #0
 8001190:	d01c      	beq.n	80011cc <er_oled_char+0x100>
            	temp = Font3216[ch - 16][2*i] << 8;
 8001192:	7bfb      	ldrb	r3, [r7, #15]
 8001194:	f1a3 0210 	sub.w	r2, r3, #16
 8001198:	7dfb      	ldrb	r3, [r7, #23]
 800119a:	005b      	lsls	r3, r3, #1
 800119c:	493c      	ldr	r1, [pc, #240]	; (8001290 <er_oled_char+0x1c4>)
 800119e:	0192      	lsls	r2, r2, #6
 80011a0:	440a      	add	r2, r1
 80011a2:	4413      	add	r3, r2
 80011a4:	781b      	ldrb	r3, [r3, #0]
 80011a6:	b29b      	uxth	r3, r3
 80011a8:	021b      	lsls	r3, r3, #8
 80011aa:	82bb      	strh	r3, [r7, #20]
                temp |= Font3216[ch-16][2*i + 1];
 80011ac:	7bfb      	ldrb	r3, [r7, #15]
 80011ae:	f1a3 0210 	sub.w	r2, r3, #16
 80011b2:	7dfb      	ldrb	r3, [r7, #23]
 80011b4:	005b      	lsls	r3, r3, #1
 80011b6:	3301      	adds	r3, #1
 80011b8:	4935      	ldr	r1, [pc, #212]	; (8001290 <er_oled_char+0x1c4>)
 80011ba:	0192      	lsls	r2, r2, #6
 80011bc:	440a      	add	r2, r1
 80011be:	4413      	add	r3, r2
 80011c0:	781b      	ldrb	r3, [r3, #0]
 80011c2:	b29a      	uxth	r2, r3
 80011c4:	8abb      	ldrh	r3, [r7, #20]
 80011c6:	4313      	orrs	r3, r2
 80011c8:	82bb      	strh	r3, [r7, #20]
 80011ca:	e022      	b.n	8001212 <er_oled_char+0x146>
            }
            else {
            	temp = ~Font3216[ch - 16][2*i] << 8;
 80011cc:	7bfb      	ldrb	r3, [r7, #15]
 80011ce:	f1a3 0210 	sub.w	r2, r3, #16
 80011d2:	7dfb      	ldrb	r3, [r7, #23]
 80011d4:	005b      	lsls	r3, r3, #1
 80011d6:	492e      	ldr	r1, [pc, #184]	; (8001290 <er_oled_char+0x1c4>)
 80011d8:	0192      	lsls	r2, r2, #6
 80011da:	440a      	add	r2, r1
 80011dc:	4413      	add	r3, r2
 80011de:	781b      	ldrb	r3, [r3, #0]
 80011e0:	b29b      	uxth	r3, r3
 80011e2:	43db      	mvns	r3, r3
 80011e4:	b29b      	uxth	r3, r3
 80011e6:	021b      	lsls	r3, r3, #8
 80011e8:	82bb      	strh	r3, [r7, #20]
            	temp |= ~Font3216[ch - 16][2*i + 1];
 80011ea:	7bfb      	ldrb	r3, [r7, #15]
 80011ec:	f1a3 0210 	sub.w	r2, r3, #16
 80011f0:	7dfb      	ldrb	r3, [r7, #23]
 80011f2:	005b      	lsls	r3, r3, #1
 80011f4:	3301      	adds	r3, #1
 80011f6:	4926      	ldr	r1, [pc, #152]	; (8001290 <er_oled_char+0x1c4>)
 80011f8:	0192      	lsls	r2, r2, #6
 80011fa:	440a      	add	r2, r1
 80011fc:	4413      	add	r3, r2
 80011fe:	781b      	ldrb	r3, [r3, #0]
 8001200:	b29b      	uxth	r3, r3
 8001202:	43db      	mvns	r3, r3
 8001204:	b29b      	uxth	r3, r3
 8001206:	b21a      	sxth	r2, r3
 8001208:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800120c:	4313      	orrs	r3, r2
 800120e:	b21b      	sxth	r3, r3
 8001210:	82bb      	strh	r3, [r7, #20]
            }
        }
        for(j =0;j<maxindex;j++)
 8001212:	2300      	movs	r3, #0
 8001214:	75bb      	strb	r3, [r7, #22]
 8001216:	e027      	b.n	8001268 <er_oled_char+0x19c>
        {
            if(temp & position) er_oled_pixel(x, y, 1, buffer);
 8001218:	8aba      	ldrh	r2, [r7, #20]
 800121a:	8a7b      	ldrh	r3, [r7, #18]
 800121c:	4013      	ands	r3, r2
 800121e:	b29b      	uxth	r3, r3
 8001220:	2b00      	cmp	r3, #0
 8001222:	d006      	beq.n	8001232 <er_oled_char+0x166>
 8001224:	79f8      	ldrb	r0, [r7, #7]
 8001226:	79b9      	ldrb	r1, [r7, #6]
 8001228:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800122a:	2201      	movs	r2, #1
 800122c:	f7ff fedb 	bl	8000fe6 <er_oled_pixel>
 8001230:	e005      	b.n	800123e <er_oled_char+0x172>
            else er_oled_pixel(x, y, 0, buffer);
 8001232:	79f8      	ldrb	r0, [r7, #7]
 8001234:	79b9      	ldrb	r1, [r7, #6]
 8001236:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001238:	2200      	movs	r2, #0
 800123a:	f7ff fed4 	bl	8000fe6 <er_oled_pixel>
            temp <<= 1;
 800123e:	8abb      	ldrh	r3, [r7, #20]
 8001240:	005b      	lsls	r3, r3, #1
 8001242:	82bb      	strh	r3, [r7, #20]
            y++;
 8001244:	79bb      	ldrb	r3, [r7, #6]
 8001246:	3301      	adds	r3, #1
 8001248:	71bb      	strb	r3, [r7, #6]
            if((y-y0) == size)
 800124a:	79ba      	ldrb	r2, [r7, #6]
 800124c:	7c3b      	ldrb	r3, [r7, #16]
 800124e:	1ad2      	subs	r2, r2, r3
 8001250:	793b      	ldrb	r3, [r7, #4]
 8001252:	429a      	cmp	r2, r3
 8001254:	d105      	bne.n	8001262 <er_oled_char+0x196>
            {
                y = y0;
 8001256:	7c3b      	ldrb	r3, [r7, #16]
 8001258:	71bb      	strb	r3, [r7, #6]
                x++;
 800125a:	79fb      	ldrb	r3, [r7, #7]
 800125c:	3301      	adds	r3, #1
 800125e:	71fb      	strb	r3, [r7, #7]
                break;
 8001260:	e006      	b.n	8001270 <er_oled_char+0x1a4>
        for(j =0;j<maxindex;j++)
 8001262:	7dbb      	ldrb	r3, [r7, #22]
 8001264:	3301      	adds	r3, #1
 8001266:	75bb      	strb	r3, [r7, #22]
 8001268:	7dba      	ldrb	r2, [r7, #22]
 800126a:	7c7b      	ldrb	r3, [r7, #17]
 800126c:	429a      	cmp	r2, r3
 800126e:	d3d3      	bcc.n	8001218 <er_oled_char+0x14c>
    for(i = 0;i<size;i++) {
 8001270:	7dfb      	ldrb	r3, [r7, #23]
 8001272:	3301      	adds	r3, #1
 8001274:	75fb      	strb	r3, [r7, #23]
 8001276:	7dfa      	ldrb	r2, [r7, #23]
 8001278:	793b      	ldrb	r3, [r7, #4]
 800127a:	429a      	cmp	r2, r3
 800127c:	f4ff af49 	bcc.w	8001112 <er_oled_char+0x46>
            }
        }
    }
}
 8001280:	bf00      	nop
 8001282:	371c      	adds	r7, #28
 8001284:	46bd      	mov	sp, r7
 8001286:	bd90      	pop	{r4, r7, pc}
 8001288:	0800737c 	.word	0x0800737c
 800128c:	080077f0 	.word	0x080077f0
 8001290:	08007de0 	.word	0x08007de0

08001294 <er_oled_string>:

void er_oled_string(uint8_t x, uint8_t y, const char *pString, uint8_t Size, uint8_t Mode, uint8_t* buffer)
{
 8001294:	b590      	push	{r4, r7, lr}
 8001296:	b085      	sub	sp, #20
 8001298:	af02      	add	r7, sp, #8
 800129a:	603a      	str	r2, [r7, #0]
 800129c:	461a      	mov	r2, r3
 800129e:	4603      	mov	r3, r0
 80012a0:	71fb      	strb	r3, [r7, #7]
 80012a2:	460b      	mov	r3, r1
 80012a4:	71bb      	strb	r3, [r7, #6]
 80012a6:	4613      	mov	r3, r2
 80012a8:	717b      	strb	r3, [r7, #5]
    while (*pString != '\0') {
 80012aa:	e02c      	b.n	8001306 <er_oled_string+0x72>
        if (x > (WIDTH - Size / 2)) {
 80012ac:	79fa      	ldrb	r2, [r7, #7]
 80012ae:	797b      	ldrb	r3, [r7, #5]
 80012b0:	085b      	lsrs	r3, r3, #1
 80012b2:	b2db      	uxtb	r3, r3
 80012b4:	f1c3 0348 	rsb	r3, r3, #72	; 0x48
 80012b8:	429a      	cmp	r2, r3
 80012ba:	dd0f      	ble.n	80012dc <er_oled_string+0x48>
            x = 0;
 80012bc:	2300      	movs	r3, #0
 80012be:	71fb      	strb	r3, [r7, #7]
            y += Size;
 80012c0:	79ba      	ldrb	r2, [r7, #6]
 80012c2:	797b      	ldrb	r3, [r7, #5]
 80012c4:	4413      	add	r3, r2
 80012c6:	71bb      	strb	r3, [r7, #6]
            if (y > (HEIGHT - Size)) {
 80012c8:	79ba      	ldrb	r2, [r7, #6]
 80012ca:	797b      	ldrb	r3, [r7, #5]
 80012cc:	f1c3 0328 	rsb	r3, r3, #40	; 0x28
 80012d0:	429a      	cmp	r2, r3
 80012d2:	dd03      	ble.n	80012dc <er_oled_string+0x48>
                y = x = 0;
 80012d4:	2300      	movs	r3, #0
 80012d6:	71fb      	strb	r3, [r7, #7]
 80012d8:	79fb      	ldrb	r3, [r7, #7]
 80012da:	71bb      	strb	r3, [r7, #6]
            }
        }

        er_oled_char(x, y, *pString, Size, Mode, buffer);
 80012dc:	683b      	ldr	r3, [r7, #0]
 80012de:	781a      	ldrb	r2, [r3, #0]
 80012e0:	797c      	ldrb	r4, [r7, #5]
 80012e2:	79b9      	ldrb	r1, [r7, #6]
 80012e4:	79f8      	ldrb	r0, [r7, #7]
 80012e6:	69fb      	ldr	r3, [r7, #28]
 80012e8:	9301      	str	r3, [sp, #4]
 80012ea:	7e3b      	ldrb	r3, [r7, #24]
 80012ec:	9300      	str	r3, [sp, #0]
 80012ee:	4623      	mov	r3, r4
 80012f0:	f7ff feec 	bl	80010cc <er_oled_char>
        x += Size / 2;
 80012f4:	797b      	ldrb	r3, [r7, #5]
 80012f6:	085b      	lsrs	r3, r3, #1
 80012f8:	b2da      	uxtb	r2, r3
 80012fa:	79fb      	ldrb	r3, [r7, #7]
 80012fc:	4413      	add	r3, r2
 80012fe:	71fb      	strb	r3, [r7, #7]
        pString++;
 8001300:	683b      	ldr	r3, [r7, #0]
 8001302:	3301      	adds	r3, #1
 8001304:	603b      	str	r3, [r7, #0]
    while (*pString != '\0') {
 8001306:	683b      	ldr	r3, [r7, #0]
 8001308:	781b      	ldrb	r3, [r3, #0]
 800130a:	2b00      	cmp	r3, #0
 800130c:	d1ce      	bne.n	80012ac <er_oled_string+0x18>
    }
}
 800130e:	bf00      	nop
 8001310:	370c      	adds	r7, #12
 8001312:	46bd      	mov	sp, r7
 8001314:	bd90      	pop	{r4, r7, pc}

08001316 <er_oled_display>:
		}
	}
}

void er_oled_display(uint8_t* pBuf)
{    uint8_t page,i;
 8001316:	b580      	push	{r7, lr}
 8001318:	b084      	sub	sp, #16
 800131a:	af00      	add	r7, sp, #0
 800131c:	6078      	str	r0, [r7, #4]
    for (page = 0; page < PAGES; page++) {
 800131e:	2300      	movs	r3, #0
 8001320:	73fb      	strb	r3, [r7, #15]
 8001322:	e029      	b.n	8001378 <er_oled_display+0x62>
        command(0xB0 + page);/* set page address */
 8001324:	7bfb      	ldrb	r3, [r7, #15]
 8001326:	3b50      	subs	r3, #80	; 0x50
 8001328:	b2db      	uxtb	r3, r3
 800132a:	2100      	movs	r1, #0
 800132c:	4618      	mov	r0, r3
 800132e:	f7ff fdbb 	bl	8000ea8 <I2C_Write_Byte>
        command(0x0c);   /* set low column address */
 8001332:	2100      	movs	r1, #0
 8001334:	200c      	movs	r0, #12
 8001336:	f7ff fdb7 	bl	8000ea8 <I2C_Write_Byte>
        command(0x11);  /* set high column address */
 800133a:	2100      	movs	r1, #0
 800133c:	2011      	movs	r0, #17
 800133e:	f7ff fdb3 	bl	8000ea8 <I2C_Write_Byte>
        for(i = 0; i< WIDTH; i++ ) {
 8001342:	2300      	movs	r3, #0
 8001344:	73bb      	strb	r3, [r7, #14]
 8001346:	e011      	b.n	800136c <er_oled_display+0x56>
          data(pBuf[i+page*WIDTH]);// write data one
 8001348:	7bb9      	ldrb	r1, [r7, #14]
 800134a:	7bfa      	ldrb	r2, [r7, #15]
 800134c:	4613      	mov	r3, r2
 800134e:	00db      	lsls	r3, r3, #3
 8001350:	4413      	add	r3, r2
 8001352:	00db      	lsls	r3, r3, #3
 8001354:	440b      	add	r3, r1
 8001356:	461a      	mov	r2, r3
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	4413      	add	r3, r2
 800135c:	781b      	ldrb	r3, [r3, #0]
 800135e:	2140      	movs	r1, #64	; 0x40
 8001360:	4618      	mov	r0, r3
 8001362:	f7ff fda1 	bl	8000ea8 <I2C_Write_Byte>
        for(i = 0; i< WIDTH; i++ ) {
 8001366:	7bbb      	ldrb	r3, [r7, #14]
 8001368:	3301      	adds	r3, #1
 800136a:	73bb      	strb	r3, [r7, #14]
 800136c:	7bbb      	ldrb	r3, [r7, #14]
 800136e:	2b47      	cmp	r3, #71	; 0x47
 8001370:	d9ea      	bls.n	8001348 <er_oled_display+0x32>
    for (page = 0; page < PAGES; page++) {
 8001372:	7bfb      	ldrb	r3, [r7, #15]
 8001374:	3301      	adds	r3, #1
 8001376:	73fb      	strb	r3, [r7, #15]
 8001378:	7bfb      	ldrb	r3, [r7, #15]
 800137a:	2b04      	cmp	r3, #4
 800137c:	d9d2      	bls.n	8001324 <er_oled_display+0xe>
        }
    }
}
 800137e:	bf00      	nop
 8001380:	3710      	adds	r7, #16
 8001382:	46bd      	mov	sp, r7
 8001384:	bd80      	pop	{r7, pc}

08001386 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001386:	b480      	push	{r7}
 8001388:	b085      	sub	sp, #20
 800138a:	af00      	add	r7, sp, #0
 800138c:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 800138e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001392:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001394:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	4313      	orrs	r3, r2
 800139c:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800139e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80013a2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	4013      	ands	r3, r2
 80013a8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80013aa:	68fb      	ldr	r3, [r7, #12]
}
 80013ac:	bf00      	nop
 80013ae:	3714      	adds	r7, #20
 80013b0:	46bd      	mov	sp, r7
 80013b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b6:	4770      	bx	lr

080013b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80013b8:	b590      	push	{r4, r7, lr}
 80013ba:	f5ad 7d07 	sub.w	sp, sp, #540	; 0x21c
 80013be:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80013c0:	f000 fdf4 	bl	8001fac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80013c4:	f000 f970 	bl	80016a8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80013c8:	f000 fa64 	bl	8001894 <MX_GPIO_Init>
  MX_SPI1_Init();
 80013cc:	f000 fa24 	bl	8001818 <MX_SPI1_Init>
  MX_I2C1_Init();
 80013d0:	f000 f9e2 	bl	8001798 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  DotStar_InitHandle dotstar;
  dotstar.spiHandle = &hspi1;
 80013d4:	4ba9      	ldr	r3, [pc, #676]	; (800167c <main+0x2c4>)
 80013d6:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
  dotstar.numLEDs = NUM_PIXELS;
 80013da:	230c      	movs	r3, #12
 80013dc:	f8a7 31ec 	strh.w	r3, [r7, #492]	; 0x1ec
  dotstar.colorOrder = DOTSTAR_BGR;
 80013e0:	2306      	movs	r3, #6
 80013e2:	f887 31ee 	strb.w	r3, [r7, #494]	; 0x1ee
  Dotstar_Init(&dotstar);
 80013e6:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 80013ea:	4618      	mov	r0, r3
 80013ec:	f7ff fc04 	bl	8000bf8 <Dotstar_Init>

  ds_clear();  //turn off
 80013f0:	f7ff fcee 	bl	8000dd0 <ds_clear>
  ds_show();
 80013f4:	f7ff fc50 	bl	8000c98 <ds_show>

  ds_setBrightness(40);
 80013f8:	2028      	movs	r0, #40	; 0x28
 80013fa:	f7ff fd43 	bl	8000e84 <ds_setBrightness>
  HAL_Delay(3000);
 80013fe:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8001402:	f000 fe59 	bl	80020b8 <HAL_Delay>

  int head = 0;
 8001406:	2300      	movs	r3, #0
 8001408:	f8c7 320c 	str.w	r3, [r7, #524]	; 0x20c
  uint32_t color = 0xFF0000;
 800140c:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
 8001410:	f8c7 3208 	str.w	r3, [r7, #520]	; 0x208
  int delay = 0;
 8001414:	2300      	movs	r3, #0
 8001416:	f8c7 3204 	str.w	r3, [r7, #516]	; 0x204


  uint8_t oled_buf[WIDTH * HEIGHT / 8];
  char printstring[128];

  er_oled_begin();
 800141a:	f7ff fd63 	bl	8000ee4 <er_oled_begin>
  er_oled_clear(oled_buf);
 800141e:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001422:	4618      	mov	r0, r3
 8001424:	f7ff fdc6 	bl	8000fb4 <er_oled_clear>
  er_oled_string(6, 14, "  DRAMSAY", 12, 1, oled_buf);
 8001428:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800142c:	9301      	str	r3, [sp, #4]
 800142e:	2301      	movs	r3, #1
 8001430:	9300      	str	r3, [sp, #0]
 8001432:	230c      	movs	r3, #12
 8001434:	4a92      	ldr	r2, [pc, #584]	; (8001680 <main+0x2c8>)
 8001436:	210e      	movs	r1, #14
 8001438:	2006      	movs	r0, #6
 800143a:	f7ff ff2b 	bl	8001294 <er_oled_string>
  er_oled_display(oled_buf);
 800143e:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001442:	4618      	mov	r0, r3
 8001444:	f7ff ff67 	bl	8001316 <er_oled_display>
  HAL_Delay(3000);
 8001448:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800144c:	f000 fe34 	bl	80020b8 <HAL_Delay>

  //read ID from si7021 and print
  uint64_t si7021_id = si7021_read_id(&hi2c1);
 8001450:	488c      	ldr	r0, [pc, #560]	; (8001684 <main+0x2cc>)
 8001452:	f000 fb1b 	bl	8001a8c <si7021_read_id>
 8001456:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 800145a:	e9c3 0100 	strd	r0, r1, [r3]
  sprintf(printstring, "SI_ID:%x", si7021_id);
 800145e:	4638      	mov	r0, r7
 8001460:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 8001464:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001468:	4987      	ldr	r1, [pc, #540]	; (8001688 <main+0x2d0>)
 800146a:	f004 fc03 	bl	8005c74 <siprintf>

  er_oled_clear(oled_buf);
 800146e:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001472:	4618      	mov	r0, r3
 8001474:	f7ff fd9e 	bl	8000fb4 <er_oled_clear>
  er_oled_string(6, 14, printstring, 12, 1, oled_buf);
 8001478:	463a      	mov	r2, r7
 800147a:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800147e:	9301      	str	r3, [sp, #4]
 8001480:	2301      	movs	r3, #1
 8001482:	9300      	str	r3, [sp, #0]
 8001484:	230c      	movs	r3, #12
 8001486:	210e      	movs	r1, #14
 8001488:	2006      	movs	r0, #6
 800148a:	f7ff ff03 	bl	8001294 <er_oled_string>
  er_oled_display(oled_buf);
 800148e:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001492:	4618      	mov	r0, r3
 8001494:	f7ff ff3f 	bl	8001316 <er_oled_display>
  HAL_Delay(3000);
 8001498:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800149c:	f000 fe0c 	bl	80020b8 <HAL_Delay>

  //set config
  if (si7021_set_config(&hi2c1, SI7021_HEATER_OFF, SI7021_RESOLUTION_RH12_TEMP14) == HAL_ERROR) {
 80014a0:	2200      	movs	r2, #0
 80014a2:	2100      	movs	r1, #0
 80014a4:	4877      	ldr	r0, [pc, #476]	; (8001684 <main+0x2cc>)
 80014a6:	f000 fb26 	bl	8001af6 <si7021_set_config>
 80014aa:	4603      	mov	r3, r0
 80014ac:	2b01      	cmp	r3, #1
 80014ae:	d118      	bne.n	80014e2 <main+0x12a>
	  er_oled_clear(oled_buf);
 80014b0:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80014b4:	4618      	mov	r0, r3
 80014b6:	f7ff fd7d 	bl	8000fb4 <er_oled_clear>
	  er_oled_string(6, 14, "FAIL: Config Set", 12, 1, oled_buf);
 80014ba:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80014be:	9301      	str	r3, [sp, #4]
 80014c0:	2301      	movs	r3, #1
 80014c2:	9300      	str	r3, [sp, #0]
 80014c4:	230c      	movs	r3, #12
 80014c6:	4a71      	ldr	r2, [pc, #452]	; (800168c <main+0x2d4>)
 80014c8:	210e      	movs	r1, #14
 80014ca:	2006      	movs	r0, #6
 80014cc:	f7ff fee2 	bl	8001294 <er_oled_string>
	  er_oled_display(oled_buf);
 80014d0:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80014d4:	4618      	mov	r0, r3
 80014d6:	f7ff ff1e 	bl	8001316 <er_oled_display>
	  HAL_Delay(3000);
 80014da:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80014de:	f000 fdeb 	bl	80020b8 <HAL_Delay>
  }

  //set heater power
  if (si7021_set_heater_power(&hi2c1, SI7021_HEATER_POWER_3MA) == HAL_ERROR) {
 80014e2:	2100      	movs	r1, #0
 80014e4:	4867      	ldr	r0, [pc, #412]	; (8001684 <main+0x2cc>)
 80014e6:	f000 fb23 	bl	8001b30 <si7021_set_heater_power>
 80014ea:	4603      	mov	r3, r0
 80014ec:	2b01      	cmp	r3, #1
 80014ee:	d118      	bne.n	8001522 <main+0x16a>
	  er_oled_clear(oled_buf);
 80014f0:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80014f4:	4618      	mov	r0, r3
 80014f6:	f7ff fd5d 	bl	8000fb4 <er_oled_clear>
	  er_oled_string(6, 14, "FAIL: Heater Set", 12, 1, oled_buf);
 80014fa:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80014fe:	9301      	str	r3, [sp, #4]
 8001500:	2301      	movs	r3, #1
 8001502:	9300      	str	r3, [sp, #0]
 8001504:	230c      	movs	r3, #12
 8001506:	4a62      	ldr	r2, [pc, #392]	; (8001690 <main+0x2d8>)
 8001508:	210e      	movs	r1, #14
 800150a:	2006      	movs	r0, #6
 800150c:	f7ff fec2 	bl	8001294 <er_oled_string>
	  er_oled_display(oled_buf);
 8001510:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001514:	4618      	mov	r0, r3
 8001516:	f7ff fefe 	bl	8001316 <er_oled_display>
	  HAL_Delay(3000);
 800151a:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800151e:	f000 fdcb 	bl	80020b8 <HAL_Delay>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  temperature = si7021_measure_temperature(&hi2c1);
 8001522:	4858      	ldr	r0, [pc, #352]	; (8001684 <main+0x2cc>)
 8001524:	f000 fb7a 	bl	8001c1c <si7021_measure_temperature>
 8001528:	ed87 0a7d 	vstr	s0, [r7, #500]	; 0x1f4

	  if (temperature == SI7021_MEASURE_FAILED){
 800152c:	edd7 7a7d 	vldr	s15, [r7, #500]	; 0x1f4
 8001530:	ed9f 7a58 	vldr	s14, [pc, #352]	; 8001694 <main+0x2dc>
 8001534:	eef4 7a47 	vcmp.f32	s15, s14
 8001538:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800153c:	d118      	bne.n	8001570 <main+0x1b8>
		  er_oled_clear(oled_buf);
 800153e:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001542:	4618      	mov	r0, r3
 8001544:	f7ff fd36 	bl	8000fb4 <er_oled_clear>
		  	  er_oled_string(6, 14, "FAIL: Temp Measure", 12, 1, oled_buf);
 8001548:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800154c:	9301      	str	r3, [sp, #4]
 800154e:	2301      	movs	r3, #1
 8001550:	9300      	str	r3, [sp, #0]
 8001552:	230c      	movs	r3, #12
 8001554:	4a50      	ldr	r2, [pc, #320]	; (8001698 <main+0x2e0>)
 8001556:	210e      	movs	r1, #14
 8001558:	2006      	movs	r0, #6
 800155a:	f7ff fe9b 	bl	8001294 <er_oled_string>
		  	  er_oled_display(oled_buf);
 800155e:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001562:	4618      	mov	r0, r3
 8001564:	f7ff fed7 	bl	8001316 <er_oled_display>
		  	  HAL_Delay(3000);
 8001568:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800156c:	f000 fda4 	bl	80020b8 <HAL_Delay>
	  }

	  humidity = si7021_measure_humidity(&hi2c1);
 8001570:	4844      	ldr	r0, [pc, #272]	; (8001684 <main+0x2cc>)
 8001572:	f000 faf5 	bl	8001b60 <si7021_measure_humidity>
 8001576:	ed87 0a7c 	vstr	s0, [r7, #496]	; 0x1f0

	  if (humidity == SI7021_MEASURE_FAILED){
 800157a:	edd7 7a7c 	vldr	s15, [r7, #496]	; 0x1f0
 800157e:	ed9f 7a45 	vldr	s14, [pc, #276]	; 8001694 <main+0x2dc>
 8001582:	eef4 7a47 	vcmp.f32	s15, s14
 8001586:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800158a:	d118      	bne.n	80015be <main+0x206>
	 		  er_oled_clear(oled_buf);
 800158c:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001590:	4618      	mov	r0, r3
 8001592:	f7ff fd0f 	bl	8000fb4 <er_oled_clear>
	 		  	  er_oled_string(6, 14, "FAIL: Humd Measure", 12, 1, oled_buf);
 8001596:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800159a:	9301      	str	r3, [sp, #4]
 800159c:	2301      	movs	r3, #1
 800159e:	9300      	str	r3, [sp, #0]
 80015a0:	230c      	movs	r3, #12
 80015a2:	4a3e      	ldr	r2, [pc, #248]	; (800169c <main+0x2e4>)
 80015a4:	210e      	movs	r1, #14
 80015a6:	2006      	movs	r0, #6
 80015a8:	f7ff fe74 	bl	8001294 <er_oled_string>
	 		  	  er_oled_display(oled_buf);
 80015ac:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80015b0:	4618      	mov	r0, r3
 80015b2:	f7ff feb0 	bl	8001316 <er_oled_display>
	 		  	  HAL_Delay(3000);
 80015b6:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80015ba:	f000 fd7d 	bl	80020b8 <HAL_Delay>
	  }

	  er_oled_clear(oled_buf);
 80015be:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80015c2:	4618      	mov	r0, r3
 80015c4:	f7ff fcf6 	bl	8000fb4 <er_oled_clear>
	  sprintf(printstring, "temp:%.2f", temperature);
 80015c8:	f8d7 01f4 	ldr.w	r0, [r7, #500]	; 0x1f4
 80015cc:	f7fe ff94 	bl	80004f8 <__aeabi_f2d>
 80015d0:	4603      	mov	r3, r0
 80015d2:	460c      	mov	r4, r1
 80015d4:	4638      	mov	r0, r7
 80015d6:	461a      	mov	r2, r3
 80015d8:	4623      	mov	r3, r4
 80015da:	4931      	ldr	r1, [pc, #196]	; (80016a0 <main+0x2e8>)
 80015dc:	f004 fb4a 	bl	8005c74 <siprintf>
	  er_oled_string(6, 14, printstring, 12, 1, oled_buf);
 80015e0:	463a      	mov	r2, r7
 80015e2:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80015e6:	9301      	str	r3, [sp, #4]
 80015e8:	2301      	movs	r3, #1
 80015ea:	9300      	str	r3, [sp, #0]
 80015ec:	230c      	movs	r3, #12
 80015ee:	210e      	movs	r1, #14
 80015f0:	2006      	movs	r0, #6
 80015f2:	f7ff fe4f 	bl	8001294 <er_oled_string>
	  sprintf(printstring, "humd:%.2f", humidity);
 80015f6:	f8d7 01f0 	ldr.w	r0, [r7, #496]	; 0x1f0
 80015fa:	f7fe ff7d 	bl	80004f8 <__aeabi_f2d>
 80015fe:	4603      	mov	r3, r0
 8001600:	460c      	mov	r4, r1
 8001602:	4638      	mov	r0, r7
 8001604:	461a      	mov	r2, r3
 8001606:	4623      	mov	r3, r4
 8001608:	4926      	ldr	r1, [pc, #152]	; (80016a4 <main+0x2ec>)
 800160a:	f004 fb33 	bl	8005c74 <siprintf>
	  er_oled_string(6, 28, printstring, 12, 1, oled_buf);
 800160e:	463a      	mov	r2, r7
 8001610:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001614:	9301      	str	r3, [sp, #4]
 8001616:	2301      	movs	r3, #1
 8001618:	9300      	str	r3, [sp, #0]
 800161a:	230c      	movs	r3, #12
 800161c:	211c      	movs	r1, #28
 800161e:	2006      	movs	r0, #6
 8001620:	f7ff fe38 	bl	8001294 <er_oled_string>
	  er_oled_display(oled_buf);
 8001624:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001628:	4618      	mov	r0, r3
 800162a:	f7ff fe74 	bl	8001316 <er_oled_display>

	  ds_setPixelColor32B(head, color); // 'On' pixel at head
 800162e:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8001632:	b29b      	uxth	r3, r3
 8001634:	f8d7 1208 	ldr.w	r1, [r7, #520]	; 0x208
 8001638:	4618      	mov	r0, r3
 800163a:	f7ff fbed 	bl	8000e18 <ds_setPixelColor32B>
	  ds_show();                     // Refresh strip
 800163e:	f7ff fb2b 	bl	8000c98 <ds_show>

	  if(++head >= NUM_PIXELS) {         // Increment head index.  Off end of strip?
 8001642:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8001646:	3301      	adds	r3, #1
 8001648:	f8c7 320c 	str.w	r3, [r7, #524]	; 0x20c
 800164c:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8001650:	2b0b      	cmp	r3, #11
 8001652:	dd0f      	ble.n	8001674 <main+0x2bc>
	  	     head = 0;                       //  Yes, reset head index to start
 8001654:	2300      	movs	r3, #0
 8001656:	f8c7 320c 	str.w	r3, [r7, #524]	; 0x20c
	  	     if((color >>= 8) == 0)          //  Next color (R->G->B) ... past blue now?
 800165a:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 800165e:	0a1b      	lsrs	r3, r3, #8
 8001660:	f8c7 3208 	str.w	r3, [r7, #520]	; 0x208
 8001664:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 8001668:	2b00      	cmp	r3, #0
 800166a:	d103      	bne.n	8001674 <main+0x2bc>
	  	       color = 0xFF0000;             //   Yes, reset to red
 800166c:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
 8001670:	f8c7 3208 	str.w	r3, [r7, #520]	; 0x208
	  }

	  HAL_Delay(80);
 8001674:	2050      	movs	r0, #80	; 0x50
 8001676:	f000 fd1f 	bl	80020b8 <HAL_Delay>
	  temperature = si7021_measure_temperature(&hi2c1);
 800167a:	e752      	b.n	8001522 <main+0x16a>
 800167c:	20000264 	.word	0x20000264
 8001680:	080072d0 	.word	0x080072d0
 8001684:	20000218 	.word	0x20000218
 8001688:	080072dc 	.word	0x080072dc
 800168c:	080072e8 	.word	0x080072e8
 8001690:	080072fc 	.word	0x080072fc
 8001694:	477fff00 	.word	0x477fff00
 8001698:	08007310 	.word	0x08007310
 800169c:	08007324 	.word	0x08007324
 80016a0:	08007338 	.word	0x08007338
 80016a4:	08007344 	.word	0x08007344

080016a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b0ae      	sub	sp, #184	; 0xb8
 80016ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80016ae:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80016b2:	2248      	movs	r2, #72	; 0x48
 80016b4:	2100      	movs	r1, #0
 80016b6:	4618      	mov	r0, r3
 80016b8:	f003 fdc0 	bl	800523c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80016bc:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80016c0:	2200      	movs	r2, #0
 80016c2:	601a      	str	r2, [r3, #0]
 80016c4:	605a      	str	r2, [r3, #4]
 80016c6:	609a      	str	r2, [r3, #8]
 80016c8:	60da      	str	r2, [r3, #12]
 80016ca:	611a      	str	r2, [r3, #16]
 80016cc:	615a      	str	r2, [r3, #20]
 80016ce:	619a      	str	r2, [r3, #24]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80016d0:	1d3b      	adds	r3, r7, #4
 80016d2:	2250      	movs	r2, #80	; 0x50
 80016d4:	2100      	movs	r1, #0
 80016d6:	4618      	mov	r0, r3
 80016d8:	f003 fdb0 	bl	800523c <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80016dc:	4b2d      	ldr	r3, [pc, #180]	; (8001794 <SystemClock_Config+0xec>)
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80016e4:	4a2b      	ldr	r2, [pc, #172]	; (8001794 <SystemClock_Config+0xec>)
 80016e6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80016ea:	6013      	str	r3, [r2, #0]
 80016ec:	4b29      	ldr	r3, [pc, #164]	; (8001794 <SystemClock_Config+0xec>)
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80016f4:	603b      	str	r3, [r7, #0]
 80016f6:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_MSI;
 80016f8:	2322      	movs	r3, #34	; 0x22
 80016fa:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80016fc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001700:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001702:	2301      	movs	r3, #1
 8001704:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001708:	2340      	movs	r3, #64	; 0x40
 800170a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 800170e:	2300      	movs	r3, #0
 8001710:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001714:	2360      	movs	r3, #96	; 0x60
 8001716:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800171a:	2300      	movs	r3, #0
 800171c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001720:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001724:	4618      	mov	r0, r3
 8001726:	f001 ffc3 	bl	80036b0 <HAL_RCC_OscConfig>
 800172a:	4603      	mov	r3, r0
 800172c:	2b00      	cmp	r3, #0
 800172e:	d001      	beq.n	8001734 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8001730:	f000 f8f2 	bl	8001918 <Error_Handler>
  }
  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 8001734:	236f      	movs	r3, #111	; 0x6f
 8001736:	657b      	str	r3, [r7, #84]	; 0x54
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8001738:	2300      	movs	r3, #0
 800173a:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800173c:	2300      	movs	r3, #0
 800173e:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001740:	2300      	movs	r3, #0
 8001742:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001744:	2300      	movs	r3, #0
 8001746:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 8001748:	2300      	movs	r3, #0
 800174a:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 800174c:	2300      	movs	r3, #0
 800174e:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001750:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001754:	2100      	movs	r1, #0
 8001756:	4618      	mov	r0, r3
 8001758:	f002 fb36 	bl	8003dc8 <HAL_RCC_ClockConfig>
 800175c:	4603      	mov	r3, r0
 800175e:	2b00      	cmp	r3, #0
 8001760:	d001      	beq.n	8001766 <SystemClock_Config+0xbe>
  {
    Error_Handler();
 8001762:	f000 f8d9 	bl	8001918 <Error_Handler>
  }
  /** Initializes the peripherals clocks
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS|RCC_PERIPHCLK_I2C1;
 8001766:	f242 0304 	movw	r3, #8196	; 0x2004
 800176a:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800176c:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8001770:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 8001772:	2300      	movs	r3, #0
 8001774:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE1;
 8001776:	2310      	movs	r3, #16
 8001778:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800177a:	1d3b      	adds	r3, r7, #4
 800177c:	4618      	mov	r0, r3
 800177e:	f002 ff38 	bl	80045f2 <HAL_RCCEx_PeriphCLKConfig>
 8001782:	4603      	mov	r3, r0
 8001784:	2b00      	cmp	r3, #0
 8001786:	d001      	beq.n	800178c <SystemClock_Config+0xe4>
  {
    Error_Handler();
 8001788:	f000 f8c6 	bl	8001918 <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 800178c:	bf00      	nop
 800178e:	37b8      	adds	r7, #184	; 0xb8
 8001790:	46bd      	mov	sp, r7
 8001792:	bd80      	pop	{r7, pc}
 8001794:	58000400 	.word	0x58000400

08001798 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800179c:	4b1b      	ldr	r3, [pc, #108]	; (800180c <MX_I2C1_Init+0x74>)
 800179e:	4a1c      	ldr	r2, [pc, #112]	; (8001810 <MX_I2C1_Init+0x78>)
 80017a0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00300F38;
 80017a2:	4b1a      	ldr	r3, [pc, #104]	; (800180c <MX_I2C1_Init+0x74>)
 80017a4:	4a1b      	ldr	r2, [pc, #108]	; (8001814 <MX_I2C1_Init+0x7c>)
 80017a6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80017a8:	4b18      	ldr	r3, [pc, #96]	; (800180c <MX_I2C1_Init+0x74>)
 80017aa:	2200      	movs	r2, #0
 80017ac:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80017ae:	4b17      	ldr	r3, [pc, #92]	; (800180c <MX_I2C1_Init+0x74>)
 80017b0:	2201      	movs	r2, #1
 80017b2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80017b4:	4b15      	ldr	r3, [pc, #84]	; (800180c <MX_I2C1_Init+0x74>)
 80017b6:	2200      	movs	r2, #0
 80017b8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80017ba:	4b14      	ldr	r3, [pc, #80]	; (800180c <MX_I2C1_Init+0x74>)
 80017bc:	2200      	movs	r2, #0
 80017be:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80017c0:	4b12      	ldr	r3, [pc, #72]	; (800180c <MX_I2C1_Init+0x74>)
 80017c2:	2200      	movs	r2, #0
 80017c4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80017c6:	4b11      	ldr	r3, [pc, #68]	; (800180c <MX_I2C1_Init+0x74>)
 80017c8:	2200      	movs	r2, #0
 80017ca:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80017cc:	4b0f      	ldr	r3, [pc, #60]	; (800180c <MX_I2C1_Init+0x74>)
 80017ce:	2200      	movs	r2, #0
 80017d0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80017d2:	480e      	ldr	r0, [pc, #56]	; (800180c <MX_I2C1_Init+0x74>)
 80017d4:	f000 fefe 	bl	80025d4 <HAL_I2C_Init>
 80017d8:	4603      	mov	r3, r0
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d001      	beq.n	80017e2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80017de:	f000 f89b 	bl	8001918 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80017e2:	2100      	movs	r1, #0
 80017e4:	4809      	ldr	r0, [pc, #36]	; (800180c <MX_I2C1_Init+0x74>)
 80017e6:	f001 fb4f 	bl	8002e88 <HAL_I2CEx_ConfigAnalogFilter>
 80017ea:	4603      	mov	r3, r0
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d001      	beq.n	80017f4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80017f0:	f000 f892 	bl	8001918 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80017f4:	2100      	movs	r1, #0
 80017f6:	4805      	ldr	r0, [pc, #20]	; (800180c <MX_I2C1_Init+0x74>)
 80017f8:	f001 fb91 	bl	8002f1e <HAL_I2CEx_ConfigDigitalFilter>
 80017fc:	4603      	mov	r3, r0
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d001      	beq.n	8001806 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001802:	f000 f889 	bl	8001918 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001806:	bf00      	nop
 8001808:	bd80      	pop	{r7, pc}
 800180a:	bf00      	nop
 800180c:	20000218 	.word	0x20000218
 8001810:	40005400 	.word	0x40005400
 8001814:	00300f38 	.word	0x00300f38

08001818 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800181c:	4b1b      	ldr	r3, [pc, #108]	; (800188c <MX_SPI1_Init+0x74>)
 800181e:	4a1c      	ldr	r2, [pc, #112]	; (8001890 <MX_SPI1_Init+0x78>)
 8001820:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001822:	4b1a      	ldr	r3, [pc, #104]	; (800188c <MX_SPI1_Init+0x74>)
 8001824:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001828:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800182a:	4b18      	ldr	r3, [pc, #96]	; (800188c <MX_SPI1_Init+0x74>)
 800182c:	2200      	movs	r2, #0
 800182e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001830:	4b16      	ldr	r3, [pc, #88]	; (800188c <MX_SPI1_Init+0x74>)
 8001832:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001836:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001838:	4b14      	ldr	r3, [pc, #80]	; (800188c <MX_SPI1_Init+0x74>)
 800183a:	2200      	movs	r2, #0
 800183c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800183e:	4b13      	ldr	r3, [pc, #76]	; (800188c <MX_SPI1_Init+0x74>)
 8001840:	2200      	movs	r2, #0
 8001842:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001844:	4b11      	ldr	r3, [pc, #68]	; (800188c <MX_SPI1_Init+0x74>)
 8001846:	f44f 7200 	mov.w	r2, #512	; 0x200
 800184a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 800184c:	4b0f      	ldr	r3, [pc, #60]	; (800188c <MX_SPI1_Init+0x74>)
 800184e:	2208      	movs	r2, #8
 8001850:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001852:	4b0e      	ldr	r3, [pc, #56]	; (800188c <MX_SPI1_Init+0x74>)
 8001854:	2200      	movs	r2, #0
 8001856:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001858:	4b0c      	ldr	r3, [pc, #48]	; (800188c <MX_SPI1_Init+0x74>)
 800185a:	2200      	movs	r2, #0
 800185c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800185e:	4b0b      	ldr	r3, [pc, #44]	; (800188c <MX_SPI1_Init+0x74>)
 8001860:	2200      	movs	r2, #0
 8001862:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001864:	4b09      	ldr	r3, [pc, #36]	; (800188c <MX_SPI1_Init+0x74>)
 8001866:	2207      	movs	r2, #7
 8001868:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800186a:	4b08      	ldr	r3, [pc, #32]	; (800188c <MX_SPI1_Init+0x74>)
 800186c:	2200      	movs	r2, #0
 800186e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8001870:	4b06      	ldr	r3, [pc, #24]	; (800188c <MX_SPI1_Init+0x74>)
 8001872:	2200      	movs	r2, #0
 8001874:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001876:	4805      	ldr	r0, [pc, #20]	; (800188c <MX_SPI1_Init+0x74>)
 8001878:	f003 f941 	bl	8004afe <HAL_SPI_Init>
 800187c:	4603      	mov	r3, r0
 800187e:	2b00      	cmp	r3, #0
 8001880:	d001      	beq.n	8001886 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8001882:	f000 f849 	bl	8001918 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001886:	bf00      	nop
 8001888:	bd80      	pop	{r7, pc}
 800188a:	bf00      	nop
 800188c:	20000264 	.word	0x20000264
 8001890:	40013000 	.word	0x40013000

08001894 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	b086      	sub	sp, #24
 8001898:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800189a:	1d3b      	adds	r3, r7, #4
 800189c:	2200      	movs	r2, #0
 800189e:	601a      	str	r2, [r3, #0]
 80018a0:	605a      	str	r2, [r3, #4]
 80018a2:	609a      	str	r2, [r3, #8]
 80018a4:	60da      	str	r2, [r3, #12]
 80018a6:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80018a8:	2002      	movs	r0, #2
 80018aa:	f7ff fd6c 	bl	8001386 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80018ae:	2001      	movs	r0, #1
 80018b0:	f7ff fd69 	bl	8001386 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 80018b4:	2201      	movs	r2, #1
 80018b6:	2110      	movs	r1, #16
 80018b8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80018bc:	f000 fe72 	bl	80025a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 80018c0:	2310      	movs	r3, #16
 80018c2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018c4:	2301      	movs	r3, #1
 80018c6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018c8:	2300      	movs	r3, #0
 80018ca:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018cc:	2300      	movs	r3, #0
 80018ce:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018d0:	1d3b      	adds	r3, r7, #4
 80018d2:	4619      	mov	r1, r3
 80018d4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80018d8:	f000 fcf4 	bl	80022c4 <HAL_GPIO_Init>

  HAL_GPIO_WritePin(OLED_RESET_GPIO_Port, OLED_RESET_Pin, GPIO_PIN_RESET);
 80018dc:	2200      	movs	r2, #0
 80018de:	2101      	movs	r1, #1
 80018e0:	480c      	ldr	r0, [pc, #48]	; (8001914 <MX_GPIO_Init+0x80>)
 80018e2:	f000 fe5f 	bl	80025a4 <HAL_GPIO_WritePin>

    /*Configure GPIO pin : OLED_RESET_Pin */
    GPIO_InitStruct.Pin = OLED_RESET_Pin;
 80018e6:	2301      	movs	r3, #1
 80018e8:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018ea:	2301      	movs	r3, #1
 80018ec:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ee:	2300      	movs	r3, #0
 80018f0:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018f2:	2300      	movs	r3, #0
 80018f4:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(OLED_RESET_GPIO_Port, &GPIO_InitStruct);
 80018f6:	1d3b      	adds	r3, r7, #4
 80018f8:	4619      	mov	r1, r3
 80018fa:	4806      	ldr	r0, [pc, #24]	; (8001914 <MX_GPIO_Init+0x80>)
 80018fc:	f000 fce2 	bl	80022c4 <HAL_GPIO_Init>

    HAL_GPIO_WritePin(OLED_RESET_GPIO_Port, OLED_RESET_Pin, GPIO_PIN_SET);
 8001900:	2201      	movs	r2, #1
 8001902:	2101      	movs	r1, #1
 8001904:	4803      	ldr	r0, [pc, #12]	; (8001914 <MX_GPIO_Init+0x80>)
 8001906:	f000 fe4d 	bl	80025a4 <HAL_GPIO_WritePin>

}
 800190a:	bf00      	nop
 800190c:	3718      	adds	r7, #24
 800190e:	46bd      	mov	sp, r7
 8001910:	bd80      	pop	{r7, pc}
 8001912:	bf00      	nop
 8001914:	48000400 	.word	0x48000400

08001918 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001918:	b480      	push	{r7}
 800191a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800191c:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800191e:	e7fe      	b.n	800191e <Error_Handler+0x6>

08001920 <_read_id>:
#define SI7021_READ_ID2               0xFCC9 // Read Electronic ID 2nd Byte
#define SI7021_FIRMWARE_VERSION       0x84B8 // Read Firmware Revision

// Helper to read 2 bytes of device ID
static uint32_t _read_id(I2C_HandleTypeDef *hi2c, uint32_t reg)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	b088      	sub	sp, #32
 8001924:	af02      	add	r7, sp, #8
 8001926:	6078      	str	r0, [r7, #4]
 8001928:	6039      	str	r1, [r7, #0]
  uint32_t id = 0;
 800192a:	2300      	movs	r3, #0
 800192c:	617b      	str	r3, [r7, #20]
  uint8_t si7021_buf[4];

  si7021_buf[0] = reg >> 8;
 800192e:	683b      	ldr	r3, [r7, #0]
 8001930:	0a1b      	lsrs	r3, r3, #8
 8001932:	b2db      	uxtb	r3, r3
 8001934:	733b      	strb	r3, [r7, #12]
  si7021_buf[1] = reg & 0xff;
 8001936:	683b      	ldr	r3, [r7, #0]
 8001938:	b2db      	uxtb	r3, r3
 800193a:	737b      	strb	r3, [r7, #13]

  int res = HAL_I2C_Master_Transmit(hi2c, SI7021_ADDRESS_WRITE, &si7021_buf[0], 2, 100);
 800193c:	f107 020c 	add.w	r2, r7, #12
 8001940:	2364      	movs	r3, #100	; 0x64
 8001942:	9300      	str	r3, [sp, #0]
 8001944:	2302      	movs	r3, #2
 8001946:	2180      	movs	r1, #128	; 0x80
 8001948:	6878      	ldr	r0, [r7, #4]
 800194a:	f000 fed3 	bl	80026f4 <HAL_I2C_Master_Transmit>
 800194e:	4603      	mov	r3, r0
 8001950:	613b      	str	r3, [r7, #16]
  if (res != HAL_OK) {
 8001952:	693b      	ldr	r3, [r7, #16]
 8001954:	2b00      	cmp	r3, #0
 8001956:	d122      	bne.n	800199e <_read_id+0x7e>
    goto out;
  }
  res = HAL_I2C_Master_Receive(hi2c, SI7021_ADDRESS_READ, &si7021_buf[0], 4, 100);
 8001958:	f107 020c 	add.w	r2, r7, #12
 800195c:	2364      	movs	r3, #100	; 0x64
 800195e:	9300      	str	r3, [sp, #0]
 8001960:	2304      	movs	r3, #4
 8001962:	2181      	movs	r1, #129	; 0x81
 8001964:	6878      	ldr	r0, [r7, #4]
 8001966:	f000 ffb9 	bl	80028dc <HAL_I2C_Master_Receive>
 800196a:	4603      	mov	r3, r0
 800196c:	613b      	str	r3, [r7, #16]
  if (res != HAL_OK) {
 800196e:	693b      	ldr	r3, [r7, #16]
 8001970:	2b00      	cmp	r3, #0
 8001972:	d116      	bne.n	80019a2 <_read_id+0x82>
    goto out;
  }

  id = si7021_buf[0] << 24;
 8001974:	7b3b      	ldrb	r3, [r7, #12]
 8001976:	061b      	lsls	r3, r3, #24
 8001978:	617b      	str	r3, [r7, #20]
  id |= si7021_buf[1] << 16;
 800197a:	7b7b      	ldrb	r3, [r7, #13]
 800197c:	041b      	lsls	r3, r3, #16
 800197e:	461a      	mov	r2, r3
 8001980:	697b      	ldr	r3, [r7, #20]
 8001982:	4313      	orrs	r3, r2
 8001984:	617b      	str	r3, [r7, #20]
  id |= si7021_buf[2] << 8;
 8001986:	7bbb      	ldrb	r3, [r7, #14]
 8001988:	021b      	lsls	r3, r3, #8
 800198a:	461a      	mov	r2, r3
 800198c:	697b      	ldr	r3, [r7, #20]
 800198e:	4313      	orrs	r3, r2
 8001990:	617b      	str	r3, [r7, #20]
  id |= si7021_buf[3];
 8001992:	7bfb      	ldrb	r3, [r7, #15]
 8001994:	461a      	mov	r2, r3
 8001996:	697b      	ldr	r3, [r7, #20]
 8001998:	4313      	orrs	r3, r2
 800199a:	617b      	str	r3, [r7, #20]
 800199c:	e002      	b.n	80019a4 <_read_id+0x84>
    goto out;
 800199e:	bf00      	nop
 80019a0:	e000      	b.n	80019a4 <_read_id+0x84>
    goto out;
 80019a2:	bf00      	nop

out:
  return id;
 80019a4:	697b      	ldr	r3, [r7, #20]
}
 80019a6:	4618      	mov	r0, r3
 80019a8:	3718      	adds	r7, #24
 80019aa:	46bd      	mov	sp, r7
 80019ac:	bd80      	pop	{r7, pc}
	...

080019b0 <_read_and_convert_temperature>:

// Helper to read and convert temperature into uint format
static float _read_and_convert_temperature(I2C_HandleTypeDef *hi2c)
{
 80019b0:	b590      	push	{r4, r7, lr}
 80019b2:	b089      	sub	sp, #36	; 0x24
 80019b4:	af02      	add	r7, sp, #8
 80019b6:	6078      	str	r0, [r7, #4]
  uint8_t si7021_buf[4];
  int res = HAL_I2C_Master_Receive(hi2c, SI7021_ADDRESS_READ, si7021_buf, 2, 100);
 80019b8:	f107 0208 	add.w	r2, r7, #8
 80019bc:	2364      	movs	r3, #100	; 0x64
 80019be:	9300      	str	r3, [sp, #0]
 80019c0:	2302      	movs	r3, #2
 80019c2:	2181      	movs	r1, #129	; 0x81
 80019c4:	6878      	ldr	r0, [r7, #4]
 80019c6:	f000 ff89 	bl	80028dc <HAL_I2C_Master_Receive>
 80019ca:	4603      	mov	r3, r0
 80019cc:	617b      	str	r3, [r7, #20]

  if (res != HAL_OK) {
 80019ce:	697b      	ldr	r3, [r7, #20]
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d001      	beq.n	80019d8 <_read_and_convert_temperature+0x28>
    return SI7021_MEASURE_FAILED;
 80019d4:	4b2a      	ldr	r3, [pc, #168]	; (8001a80 <_read_and_convert_temperature+0xd0>)
 80019d6:	e03f      	b.n	8001a58 <_read_and_convert_temperature+0xa8>
  }

  int16_t temp_code = (si7021_buf[0] << 8 | si7021_buf[1]);
 80019d8:	7a3b      	ldrb	r3, [r7, #8]
 80019da:	021b      	lsls	r3, r3, #8
 80019dc:	b21a      	sxth	r2, r3
 80019de:	7a7b      	ldrb	r3, [r7, #9]
 80019e0:	b21b      	sxth	r3, r3
 80019e2:	4313      	orrs	r3, r2
 80019e4:	827b      	strh	r3, [r7, #18]
  float temp = 175.72 * temp_code / 65535.00 - 46.85;
 80019e6:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80019ea:	4618      	mov	r0, r3
 80019ec:	f7fe fd72 	bl	80004d4 <__aeabi_i2d>
 80019f0:	a31d      	add	r3, pc, #116	; (adr r3, 8001a68 <_read_and_convert_temperature+0xb8>)
 80019f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019f6:	f7fe fdd7 	bl	80005a8 <__aeabi_dmul>
 80019fa:	4603      	mov	r3, r0
 80019fc:	460c      	mov	r4, r1
 80019fe:	4618      	mov	r0, r3
 8001a00:	4621      	mov	r1, r4
 8001a02:	a31b      	add	r3, pc, #108	; (adr r3, 8001a70 <_read_and_convert_temperature+0xc0>)
 8001a04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a08:	f7fe fef8 	bl	80007fc <__aeabi_ddiv>
 8001a0c:	4603      	mov	r3, r0
 8001a0e:	460c      	mov	r4, r1
 8001a10:	4618      	mov	r0, r3
 8001a12:	4621      	mov	r1, r4
 8001a14:	a318      	add	r3, pc, #96	; (adr r3, 8001a78 <_read_and_convert_temperature+0xc8>)
 8001a16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a1a:	f7fe fc0d 	bl	8000238 <__aeabi_dsub>
 8001a1e:	4603      	mov	r3, r0
 8001a20:	460c      	mov	r4, r1
 8001a22:	4618      	mov	r0, r3
 8001a24:	4621      	mov	r1, r4
 8001a26:	f7ff f897 	bl	8000b58 <__aeabi_d2f>
 8001a2a:	4603      	mov	r3, r0
 8001a2c:	60fb      	str	r3, [r7, #12]

  if (temp > 125.00 || temp < -40.00) {
 8001a2e:	edd7 7a03 	vldr	s15, [r7, #12]
 8001a32:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8001a84 <_read_and_convert_temperature+0xd4>
 8001a36:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001a3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a3e:	dc08      	bgt.n	8001a52 <_read_and_convert_temperature+0xa2>
 8001a40:	edd7 7a03 	vldr	s15, [r7, #12]
 8001a44:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8001a88 <_read_and_convert_temperature+0xd8>
 8001a48:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001a4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a50:	d501      	bpl.n	8001a56 <_read_and_convert_temperature+0xa6>
    return SI7021_MEASURE_FAILED;
 8001a52:	4b0b      	ldr	r3, [pc, #44]	; (8001a80 <_read_and_convert_temperature+0xd0>)
 8001a54:	e000      	b.n	8001a58 <_read_and_convert_temperature+0xa8>
  }

  return temp;
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	ee07 3a90 	vmov	s15, r3
}
 8001a5c:	eeb0 0a67 	vmov.f32	s0, s15
 8001a60:	371c      	adds	r7, #28
 8001a62:	46bd      	mov	sp, r7
 8001a64:	bd90      	pop	{r4, r7, pc}
 8001a66:	bf00      	nop
 8001a68:	3d70a3d7 	.word	0x3d70a3d7
 8001a6c:	4065f70a 	.word	0x4065f70a
 8001a70:	00000000 	.word	0x00000000
 8001a74:	40efffe0 	.word	0x40efffe0
 8001a78:	cccccccd 	.word	0xcccccccd
 8001a7c:	40476ccc 	.word	0x40476ccc
 8001a80:	477fff00 	.word	0x477fff00
 8001a84:	42fa0000 	.word	0x42fa0000
 8001a88:	c2200000 	.word	0xc2200000

08001a8c <si7021_read_id>:

uint64_t si7021_read_id(I2C_HandleTypeDef *hi2c)
{
 8001a8c:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8001a90:	b084      	sub	sp, #16
 8001a92:	af00      	add	r7, sp, #0
 8001a94:	6078      	str	r0, [r7, #4]
  uint32_t id1 = _read_id(hi2c, SI7021_READ_ID1);
 8001a96:	f64f 210f 	movw	r1, #64015	; 0xfa0f
 8001a9a:	6878      	ldr	r0, [r7, #4]
 8001a9c:	f7ff ff40 	bl	8001920 <_read_id>
 8001aa0:	60f8      	str	r0, [r7, #12]
  uint32_t id2 = _read_id(hi2c, SI7021_READ_ID2);
 8001aa2:	f64f 41c9 	movw	r1, #64713	; 0xfcc9
 8001aa6:	6878      	ldr	r0, [r7, #4]
 8001aa8:	f7ff ff3a 	bl	8001920 <_read_id>
 8001aac:	60b8      	str	r0, [r7, #8]

  if (id1 == 0 || id2 == 0) {
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d002      	beq.n	8001aba <si7021_read_id+0x2e>
 8001ab4:	68bb      	ldr	r3, [r7, #8]
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d104      	bne.n	8001ac4 <si7021_read_id+0x38>
    return 0;
 8001aba:	f04f 0300 	mov.w	r3, #0
 8001abe:	f04f 0400 	mov.w	r4, #0
 8001ac2:	e012      	b.n	8001aea <si7021_read_id+0x5e>
  }

  return (uint64_t)id1 << 32 | id2;
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	4619      	mov	r1, r3
 8001ac8:	f04f 0200 	mov.w	r2, #0
 8001acc:	f04f 0b00 	mov.w	fp, #0
 8001ad0:	f04f 0c00 	mov.w	ip, #0
 8001ad4:	468c      	mov	ip, r1
 8001ad6:	f04f 0b00 	mov.w	fp, #0
 8001ada:	68ba      	ldr	r2, [r7, #8]
 8001adc:	4611      	mov	r1, r2
 8001ade:	f04f 0200 	mov.w	r2, #0
 8001ae2:	ea4b 0301 	orr.w	r3, fp, r1
 8001ae6:	ea4c 0402 	orr.w	r4, ip, r2
}
 8001aea:	4618      	mov	r0, r3
 8001aec:	4621      	mov	r1, r4
 8001aee:	3710      	adds	r7, #16
 8001af0:	46bd      	mov	sp, r7
 8001af2:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}

08001af6 <si7021_set_config>:

uint32_t si7021_set_config(I2C_HandleTypeDef *hi2c, uint8_t heater, uint8_t resolution)
{
 8001af6:	b580      	push	{r7, lr}
 8001af8:	b086      	sub	sp, #24
 8001afa:	af02      	add	r7, sp, #8
 8001afc:	6078      	str	r0, [r7, #4]
 8001afe:	460b      	mov	r3, r1
 8001b00:	70fb      	strb	r3, [r7, #3]
 8001b02:	4613      	mov	r3, r2
 8001b04:	70bb      	strb	r3, [r7, #2]
  uint8_t si7021_buf[4];
  si7021_buf[0] = SI7021_WRITE_USER_REG1;
 8001b06:	23e6      	movs	r3, #230	; 0xe6
 8001b08:	733b      	strb	r3, [r7, #12]
  si7021_buf[1] = heater | resolution;
 8001b0a:	78fa      	ldrb	r2, [r7, #3]
 8001b0c:	78bb      	ldrb	r3, [r7, #2]
 8001b0e:	4313      	orrs	r3, r2
 8001b10:	b2db      	uxtb	r3, r3
 8001b12:	737b      	strb	r3, [r7, #13]

  return HAL_I2C_Master_Transmit(hi2c, SI7021_ADDRESS_WRITE, &si7021_buf[0], 2, 100);
 8001b14:	f107 020c 	add.w	r2, r7, #12
 8001b18:	2364      	movs	r3, #100	; 0x64
 8001b1a:	9300      	str	r3, [sp, #0]
 8001b1c:	2302      	movs	r3, #2
 8001b1e:	2180      	movs	r1, #128	; 0x80
 8001b20:	6878      	ldr	r0, [r7, #4]
 8001b22:	f000 fde7 	bl	80026f4 <HAL_I2C_Master_Transmit>
 8001b26:	4603      	mov	r3, r0
}
 8001b28:	4618      	mov	r0, r3
 8001b2a:	3710      	adds	r7, #16
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	bd80      	pop	{r7, pc}

08001b30 <si7021_set_heater_power>:

uint32_t si7021_set_heater_power(I2C_HandleTypeDef *hi2c, uint8_t power)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	b086      	sub	sp, #24
 8001b34:	af02      	add	r7, sp, #8
 8001b36:	6078      	str	r0, [r7, #4]
 8001b38:	460b      	mov	r3, r1
 8001b3a:	70fb      	strb	r3, [r7, #3]
  uint8_t si7021_buf[4];
  si7021_buf[0] = SI7021_WRITE_HEATER_REG;
 8001b3c:	2351      	movs	r3, #81	; 0x51
 8001b3e:	733b      	strb	r3, [r7, #12]
  si7021_buf[1] = power;
 8001b40:	78fb      	ldrb	r3, [r7, #3]
 8001b42:	737b      	strb	r3, [r7, #13]

  return HAL_I2C_Master_Transmit(hi2c, SI7021_ADDRESS_WRITE, si7021_buf, 2, 100);
 8001b44:	f107 020c 	add.w	r2, r7, #12
 8001b48:	2364      	movs	r3, #100	; 0x64
 8001b4a:	9300      	str	r3, [sp, #0]
 8001b4c:	2302      	movs	r3, #2
 8001b4e:	2180      	movs	r1, #128	; 0x80
 8001b50:	6878      	ldr	r0, [r7, #4]
 8001b52:	f000 fdcf 	bl	80026f4 <HAL_I2C_Master_Transmit>
 8001b56:	4603      	mov	r3, r0
}
 8001b58:	4618      	mov	r0, r3
 8001b5a:	3710      	adds	r7, #16
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	bd80      	pop	{r7, pc}

08001b60 <si7021_measure_humidity>:

float si7021_measure_humidity(I2C_HandleTypeDef *hi2c)
{
 8001b60:	b590      	push	{r4, r7, lr}
 8001b62:	b087      	sub	sp, #28
 8001b64:	af02      	add	r7, sp, #8
 8001b66:	6078      	str	r0, [r7, #4]
  uint8_t si7021_buf[4];
  si7021_buf[0] = SI7021_MEASURE_NOHOLD;
 8001b68:	23f5      	movs	r3, #245	; 0xf5
 8001b6a:	723b      	strb	r3, [r7, #8]

  // Start measure
  int res = HAL_I2C_Master_Transmit(hi2c, SI7021_ADDRESS_WRITE, si7021_buf, 1, 100);
 8001b6c:	f107 0208 	add.w	r2, r7, #8
 8001b70:	2364      	movs	r3, #100	; 0x64
 8001b72:	9300      	str	r3, [sp, #0]
 8001b74:	2301      	movs	r3, #1
 8001b76:	2180      	movs	r1, #128	; 0x80
 8001b78:	6878      	ldr	r0, [r7, #4]
 8001b7a:	f000 fdbb 	bl	80026f4 <HAL_I2C_Master_Transmit>
 8001b7e:	4603      	mov	r3, r0
 8001b80:	60fb      	str	r3, [r7, #12]
  if (res != HAL_OK) {
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d001      	beq.n	8001b8c <si7021_measure_humidity+0x2c>
    return SI7021_MEASURE_FAILED;
 8001b88:	4b20      	ldr	r3, [pc, #128]	; (8001c0c <si7021_measure_humidity+0xac>)
 8001b8a:	e037      	b.n	8001bfc <si7021_measure_humidity+0x9c>
  }
  HAL_Delay(30);
 8001b8c:	201e      	movs	r0, #30
 8001b8e:	f000 fa93 	bl	80020b8 <HAL_Delay>

  // Read result
  res = HAL_I2C_Master_Receive(hi2c, SI7021_ADDRESS_READ, si7021_buf, 2, 100);
 8001b92:	f107 0208 	add.w	r2, r7, #8
 8001b96:	2364      	movs	r3, #100	; 0x64
 8001b98:	9300      	str	r3, [sp, #0]
 8001b9a:	2302      	movs	r3, #2
 8001b9c:	2181      	movs	r1, #129	; 0x81
 8001b9e:	6878      	ldr	r0, [r7, #4]
 8001ba0:	f000 fe9c 	bl	80028dc <HAL_I2C_Master_Receive>
 8001ba4:	4603      	mov	r3, r0
 8001ba6:	60fb      	str	r3, [r7, #12]
  if (res != HAL_OK) {
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d001      	beq.n	8001bb2 <si7021_measure_humidity+0x52>
    return SI7021_MEASURE_FAILED;
 8001bae:	4b17      	ldr	r3, [pc, #92]	; (8001c0c <si7021_measure_humidity+0xac>)
 8001bb0:	e024      	b.n	8001bfc <si7021_measure_humidity+0x9c>
  }

  return (si7021_buf[0] << 8 | si7021_buf[1]) * 125.0 / 65536.0 - 6.0;
 8001bb2:	7a3b      	ldrb	r3, [r7, #8]
 8001bb4:	021b      	lsls	r3, r3, #8
 8001bb6:	7a7a      	ldrb	r2, [r7, #9]
 8001bb8:	4313      	orrs	r3, r2
 8001bba:	4618      	mov	r0, r3
 8001bbc:	f7fe fc8a 	bl	80004d4 <__aeabi_i2d>
 8001bc0:	f04f 0200 	mov.w	r2, #0
 8001bc4:	4b12      	ldr	r3, [pc, #72]	; (8001c10 <si7021_measure_humidity+0xb0>)
 8001bc6:	f7fe fcef 	bl	80005a8 <__aeabi_dmul>
 8001bca:	4603      	mov	r3, r0
 8001bcc:	460c      	mov	r4, r1
 8001bce:	4618      	mov	r0, r3
 8001bd0:	4621      	mov	r1, r4
 8001bd2:	f04f 0200 	mov.w	r2, #0
 8001bd6:	4b0f      	ldr	r3, [pc, #60]	; (8001c14 <si7021_measure_humidity+0xb4>)
 8001bd8:	f7fe fe10 	bl	80007fc <__aeabi_ddiv>
 8001bdc:	4603      	mov	r3, r0
 8001bde:	460c      	mov	r4, r1
 8001be0:	4618      	mov	r0, r3
 8001be2:	4621      	mov	r1, r4
 8001be4:	f04f 0200 	mov.w	r2, #0
 8001be8:	4b0b      	ldr	r3, [pc, #44]	; (8001c18 <si7021_measure_humidity+0xb8>)
 8001bea:	f7fe fb25 	bl	8000238 <__aeabi_dsub>
 8001bee:	4603      	mov	r3, r0
 8001bf0:	460c      	mov	r4, r1
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	4621      	mov	r1, r4
 8001bf6:	f7fe ffaf 	bl	8000b58 <__aeabi_d2f>
 8001bfa:	4603      	mov	r3, r0
 8001bfc:	ee07 3a90 	vmov	s15, r3
}
 8001c00:	eeb0 0a67 	vmov.f32	s0, s15
 8001c04:	3714      	adds	r7, #20
 8001c06:	46bd      	mov	sp, r7
 8001c08:	bd90      	pop	{r4, r7, pc}
 8001c0a:	bf00      	nop
 8001c0c:	477fff00 	.word	0x477fff00
 8001c10:	405f4000 	.word	0x405f4000
 8001c14:	40f00000 	.word	0x40f00000
 8001c18:	40180000 	.word	0x40180000

08001c1c <si7021_measure_temperature>:

float si7021_measure_temperature(I2C_HandleTypeDef *hi2c)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	b086      	sub	sp, #24
 8001c20:	af02      	add	r7, sp, #8
 8001c22:	6078      	str	r0, [r7, #4]
  uint8_t si7021_buf[4];
  si7021_buf[0] = SI7021_MEASURE_TEMP_NOHOLD;
 8001c24:	23f3      	movs	r3, #243	; 0xf3
 8001c26:	723b      	strb	r3, [r7, #8]

  int res = HAL_I2C_Master_Transmit(hi2c, SI7021_ADDRESS_WRITE, &si7021_buf[0], 1, 100);
 8001c28:	f107 0208 	add.w	r2, r7, #8
 8001c2c:	2364      	movs	r3, #100	; 0x64
 8001c2e:	9300      	str	r3, [sp, #0]
 8001c30:	2301      	movs	r3, #1
 8001c32:	2180      	movs	r1, #128	; 0x80
 8001c34:	6878      	ldr	r0, [r7, #4]
 8001c36:	f000 fd5d 	bl	80026f4 <HAL_I2C_Master_Transmit>
 8001c3a:	4603      	mov	r3, r0
 8001c3c:	60fb      	str	r3, [r7, #12]
  if (res != HAL_OK) {
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d002      	beq.n	8001c4a <si7021_measure_temperature+0x2e>
    return SI7021_MEASURE_FAILED;
 8001c44:	eddf 7a07 	vldr	s15, [pc, #28]	; 8001c64 <si7021_measure_temperature+0x48>
 8001c48:	e007      	b.n	8001c5a <si7021_measure_temperature+0x3e>
  }
  HAL_Delay(30);
 8001c4a:	201e      	movs	r0, #30
 8001c4c:	f000 fa34 	bl	80020b8 <HAL_Delay>

  return _read_and_convert_temperature(hi2c);
 8001c50:	6878      	ldr	r0, [r7, #4]
 8001c52:	f7ff fead 	bl	80019b0 <_read_and_convert_temperature>
 8001c56:	eef0 7a40 	vmov.f32	s15, s0
}
 8001c5a:	eeb0 0a67 	vmov.f32	s0, s15
 8001c5e:	3710      	adds	r7, #16
 8001c60:	46bd      	mov	sp, r7
 8001c62:	bd80      	pop	{r7, pc}
 8001c64:	477fff00 	.word	0x477fff00

08001c68 <LL_AHB2_GRP1_EnableClock>:
{
 8001c68:	b480      	push	{r7}
 8001c6a:	b085      	sub	sp, #20
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001c70:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c74:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001c76:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	4313      	orrs	r3, r2
 8001c7e:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001c80:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c84:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	4013      	ands	r3, r2
 8001c8a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001c8c:	68fb      	ldr	r3, [r7, #12]
}
 8001c8e:	bf00      	nop
 8001c90:	3714      	adds	r7, #20
 8001c92:	46bd      	mov	sp, r7
 8001c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c98:	4770      	bx	lr

08001c9a <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8001c9a:	b480      	push	{r7}
 8001c9c:	b085      	sub	sp, #20
 8001c9e:	af00      	add	r7, sp, #0
 8001ca0:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8001ca2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ca6:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001ca8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	4313      	orrs	r3, r2
 8001cb0:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8001cb2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001cb6:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	4013      	ands	r3, r2
 8001cbc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001cbe:	68fb      	ldr	r3, [r7, #12]
}
 8001cc0:	bf00      	nop
 8001cc2:	3714      	adds	r7, #20
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cca:	4770      	bx	lr

08001ccc <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001ccc:	b480      	push	{r7}
 8001cce:	b085      	sub	sp, #20
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8001cd4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001cd8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001cda:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	4313      	orrs	r3, r2
 8001ce2:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001ce4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ce8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	4013      	ands	r3, r2
 8001cee:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001cf0:	68fb      	ldr	r3, [r7, #12]
}
 8001cf2:	bf00      	nop
 8001cf4:	3714      	adds	r7, #20
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfc:	4770      	bx	lr

08001cfe <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001cfe:	b480      	push	{r7}
 8001d00:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d02:	bf00      	nop
 8001d04:	46bd      	mov	sp, r7
 8001d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0a:	4770      	bx	lr

08001d0c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	b088      	sub	sp, #32
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d14:	f107 030c 	add.w	r3, r7, #12
 8001d18:	2200      	movs	r2, #0
 8001d1a:	601a      	str	r2, [r3, #0]
 8001d1c:	605a      	str	r2, [r3, #4]
 8001d1e:	609a      	str	r2, [r3, #8]
 8001d20:	60da      	str	r2, [r3, #12]
 8001d22:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	4a0f      	ldr	r2, [pc, #60]	; (8001d68 <HAL_I2C_MspInit+0x5c>)
 8001d2a:	4293      	cmp	r3, r2
 8001d2c:	d117      	bne.n	8001d5e <HAL_I2C_MspInit+0x52>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d2e:	2002      	movs	r0, #2
 8001d30:	f7ff ff9a 	bl	8001c68 <LL_AHB2_GRP1_EnableClock>
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001d34:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001d38:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001d3a:	2312      	movs	r3, #18
 8001d3c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001d3e:	2301      	movs	r3, #1
 8001d40:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d42:	2300      	movs	r3, #0
 8001d44:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001d46:	2304      	movs	r3, #4
 8001d48:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d4a:	f107 030c 	add.w	r3, r7, #12
 8001d4e:	4619      	mov	r1, r3
 8001d50:	4806      	ldr	r0, [pc, #24]	; (8001d6c <HAL_I2C_MspInit+0x60>)
 8001d52:	f000 fab7 	bl	80022c4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001d56:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8001d5a:	f7ff ff9e 	bl	8001c9a <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001d5e:	bf00      	nop
 8001d60:	3720      	adds	r7, #32
 8001d62:	46bd      	mov	sp, r7
 8001d64:	bd80      	pop	{r7, pc}
 8001d66:	bf00      	nop
 8001d68:	40005400 	.word	0x40005400
 8001d6c:	48000400 	.word	0x48000400

08001d70 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001d70:	b580      	push	{r7, lr}
 8001d72:	b088      	sub	sp, #32
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d78:	f107 030c 	add.w	r3, r7, #12
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	601a      	str	r2, [r3, #0]
 8001d80:	605a      	str	r2, [r3, #4]
 8001d82:	609a      	str	r2, [r3, #8]
 8001d84:	60da      	str	r2, [r3, #12]
 8001d86:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	4a0f      	ldr	r2, [pc, #60]	; (8001dcc <HAL_SPI_MspInit+0x5c>)
 8001d8e:	4293      	cmp	r3, r2
 8001d90:	d117      	bne.n	8001dc2 <HAL_SPI_MspInit+0x52>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001d92:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8001d96:	f7ff ff99 	bl	8001ccc <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d9a:	2001      	movs	r0, #1
 8001d9c:	f7ff ff64 	bl	8001c68 <LL_AHB2_GRP1_EnableClock>
    /**SPI1 GPIO Configuration
    PA1     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_7;
 8001da0:	2382      	movs	r3, #130	; 0x82
 8001da2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001da4:	2302      	movs	r3, #2
 8001da6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001da8:	2300      	movs	r3, #0
 8001daa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dac:	2300      	movs	r3, #0
 8001dae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001db0:	2305      	movs	r3, #5
 8001db2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001db4:	f107 030c 	add.w	r3, r7, #12
 8001db8:	4619      	mov	r1, r3
 8001dba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001dbe:	f000 fa81 	bl	80022c4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001dc2:	bf00      	nop
 8001dc4:	3720      	adds	r7, #32
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	bd80      	pop	{r7, pc}
 8001dca:	bf00      	nop
 8001dcc:	40013000 	.word	0x40013000

08001dd0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001dd0:	b480      	push	{r7}
 8001dd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001dd4:	e7fe      	b.n	8001dd4 <NMI_Handler+0x4>

08001dd6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001dd6:	b480      	push	{r7}
 8001dd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001dda:	e7fe      	b.n	8001dda <HardFault_Handler+0x4>

08001ddc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ddc:	b480      	push	{r7}
 8001dde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001de0:	e7fe      	b.n	8001de0 <MemManage_Handler+0x4>

08001de2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001de2:	b480      	push	{r7}
 8001de4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001de6:	e7fe      	b.n	8001de6 <BusFault_Handler+0x4>

08001de8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001de8:	b480      	push	{r7}
 8001dea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001dec:	e7fe      	b.n	8001dec <UsageFault_Handler+0x4>

08001dee <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001dee:	b480      	push	{r7}
 8001df0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001df2:	bf00      	nop
 8001df4:	46bd      	mov	sp, r7
 8001df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfa:	4770      	bx	lr

08001dfc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001dfc:	b480      	push	{r7}
 8001dfe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e00:	bf00      	nop
 8001e02:	46bd      	mov	sp, r7
 8001e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e08:	4770      	bx	lr

08001e0a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001e0a:	b480      	push	{r7}
 8001e0c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001e0e:	bf00      	nop
 8001e10:	46bd      	mov	sp, r7
 8001e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e16:	4770      	bx	lr

08001e18 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001e1c:	f000 f920 	bl	8002060 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001e20:	bf00      	nop
 8001e22:	bd80      	pop	{r7, pc}

08001e24 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	b086      	sub	sp, #24
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001e2c:	4a14      	ldr	r2, [pc, #80]	; (8001e80 <_sbrk+0x5c>)
 8001e2e:	4b15      	ldr	r3, [pc, #84]	; (8001e84 <_sbrk+0x60>)
 8001e30:	1ad3      	subs	r3, r2, r3
 8001e32:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001e34:	697b      	ldr	r3, [r7, #20]
 8001e36:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001e38:	4b13      	ldr	r3, [pc, #76]	; (8001e88 <_sbrk+0x64>)
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d102      	bne.n	8001e46 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001e40:	4b11      	ldr	r3, [pc, #68]	; (8001e88 <_sbrk+0x64>)
 8001e42:	4a12      	ldr	r2, [pc, #72]	; (8001e8c <_sbrk+0x68>)
 8001e44:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001e46:	4b10      	ldr	r3, [pc, #64]	; (8001e88 <_sbrk+0x64>)
 8001e48:	681a      	ldr	r2, [r3, #0]
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	4413      	add	r3, r2
 8001e4e:	693a      	ldr	r2, [r7, #16]
 8001e50:	429a      	cmp	r2, r3
 8001e52:	d207      	bcs.n	8001e64 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001e54:	f003 f9c0 	bl	80051d8 <__errno>
 8001e58:	4602      	mov	r2, r0
 8001e5a:	230c      	movs	r3, #12
 8001e5c:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8001e5e:	f04f 33ff 	mov.w	r3, #4294967295
 8001e62:	e009      	b.n	8001e78 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001e64:	4b08      	ldr	r3, [pc, #32]	; (8001e88 <_sbrk+0x64>)
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001e6a:	4b07      	ldr	r3, [pc, #28]	; (8001e88 <_sbrk+0x64>)
 8001e6c:	681a      	ldr	r2, [r3, #0]
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	4413      	add	r3, r2
 8001e72:	4a05      	ldr	r2, [pc, #20]	; (8001e88 <_sbrk+0x64>)
 8001e74:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001e76:	68fb      	ldr	r3, [r7, #12]
}
 8001e78:	4618      	mov	r0, r3
 8001e7a:	3718      	adds	r7, #24
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	bd80      	pop	{r7, pc}
 8001e80:	20030000 	.word	0x20030000
 8001e84:	00000400 	.word	0x00000400
 8001e88:	200001fc 	.word	0x200001fc
 8001e8c:	200002d0 	.word	0x200002d0

08001e90 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001e90:	b480      	push	{r7}
 8001e92:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined(VECT_TAB_SRAM) && defined(VECT_TAB_BASE_ADDRESS)  
  /* program in SRAMx */
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;  /* Vector Table Relocation in Internal SRAMx for CPU1 */
#else    /* program in FLASH */
  SCB->VTOR = VECT_TAB_OFFSET;              /* Vector Table Relocation in Internal FLASH */
 8001e94:	4b26      	ldr	r3, [pc, #152]	; (8001f30 <SystemInit+0xa0>)
 8001e96:	2200      	movs	r2, #0
 8001e98:	609a      	str	r2, [r3, #8]
#endif

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
 8001e9a:	4b25      	ldr	r3, [pc, #148]	; (8001f30 <SystemInit+0xa0>)
 8001e9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ea0:	4a23      	ldr	r2, [pc, #140]	; (8001f30 <SystemInit+0xa0>)
 8001ea2:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001ea6:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001eaa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001eb4:	f043 0301 	orr.w	r3, r3, #1
 8001eb8:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 8001eba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ebe:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 8001ec2:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 8001ec4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ec8:	681a      	ldr	r2, [r3, #0]
 8001eca:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001ece:	4b19      	ldr	r3, [pc, #100]	; (8001f34 <SystemInit+0xa4>)
 8001ed0:	4013      	ands	r3, r2
 8001ed2:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 8001ed4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ed8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001edc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001ee0:	f023 0305 	bic.w	r3, r3, #5
 8001ee4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  
  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8001ee8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001eec:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001ef0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001ef4:	f023 0301 	bic.w	r3, r3, #1
 8001ef8:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
    
  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 8001efc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f00:	4a0d      	ldr	r2, [pc, #52]	; (8001f38 <SystemInit+0xa8>)
 8001f02:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 8001f04:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f08:	4a0b      	ldr	r2, [pc, #44]	; (8001f38 <SystemInit+0xa8>)
 8001f0a:	611a      	str	r2, [r3, #16]
#endif
  
  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001f0c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001f16:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f1a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001f1c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f20:	2200      	movs	r2, #0
 8001f22:	619a      	str	r2, [r3, #24]
}
 8001f24:	bf00      	nop
 8001f26:	46bd      	mov	sp, r7
 8001f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2c:	4770      	bx	lr
 8001f2e:	bf00      	nop
 8001f30:	e000ed00 	.word	0xe000ed00
 8001f34:	faf6fefb 	.word	0xfaf6fefb
 8001f38:	22041000 	.word	0x22041000

08001f3c <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 8001f3c:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001f3e:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001f40:	3304      	adds	r3, #4

08001f42 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001f42:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001f44:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 8001f46:	d3f9      	bcc.n	8001f3c <CopyDataInit>
  bx lr
 8001f48:	4770      	bx	lr

08001f4a <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 8001f4a:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8001f4c:	3004      	adds	r0, #4

08001f4e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 8001f4e:	4288      	cmp	r0, r1
  bcc FillZerobss
 8001f50:	d3fb      	bcc.n	8001f4a <FillZerobss>
  bx lr
 8001f52:	4770      	bx	lr

08001f54 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001f54:	480c      	ldr	r0, [pc, #48]	; (8001f88 <LoopForever+0x4>)
  mov   sp, r0          /* set stack pointer */
 8001f56:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8001f58:	f7ff ff9a 	bl	8001e90 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8001f5c:	480b      	ldr	r0, [pc, #44]	; (8001f8c <LoopForever+0x8>)
 8001f5e:	490c      	ldr	r1, [pc, #48]	; (8001f90 <LoopForever+0xc>)
 8001f60:	4a0c      	ldr	r2, [pc, #48]	; (8001f94 <LoopForever+0x10>)
 8001f62:	2300      	movs	r3, #0
 8001f64:	f7ff ffed 	bl	8001f42 <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8001f68:	480b      	ldr	r0, [pc, #44]	; (8001f98 <LoopForever+0x14>)
 8001f6a:	490c      	ldr	r1, [pc, #48]	; (8001f9c <LoopForever+0x18>)
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	f7ff ffee 	bl	8001f4e <LoopFillZerobss>
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 8001f72:	480b      	ldr	r0, [pc, #44]	; (8001fa0 <LoopForever+0x1c>)
 8001f74:	490b      	ldr	r1, [pc, #44]	; (8001fa4 <LoopForever+0x20>)
 8001f76:	2300      	movs	r3, #0
 8001f78:	f7ff ffe9 	bl	8001f4e <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001f7c:	f003 f932 	bl	80051e4 <__libc_init_array>
/* Call the application s entry point.*/
	bl	main
 8001f80:	f7ff fa1a 	bl	80013b8 <main>

08001f84 <LoopForever>:

LoopForever:
  b LoopForever
 8001f84:	e7fe      	b.n	8001f84 <LoopForever>
 8001f86:	0000      	.short	0x0000
  ldr   r0, =_estack
 8001f88:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 8001f8c:	20000004 	.word	0x20000004
 8001f90:	200001e0 	.word	0x200001e0
 8001f94:	08008388 	.word	0x08008388
  INIT_BSS _sbss, _ebss
 8001f98:	200001e0 	.word	0x200001e0
 8001f9c:	200002d0 	.word	0x200002d0
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 8001fa0:	20030000 	.word	0x20030000
 8001fa4:	20030000 	.word	0x20030000

08001fa8 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001fa8:	e7fe      	b.n	8001fa8 <ADC1_IRQHandler>
	...

08001fac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001fac:	b580      	push	{r7, lr}
 8001fae:	b082      	sub	sp, #8
 8001fb0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001fb6:	4b0c      	ldr	r3, [pc, #48]	; (8001fe8 <HAL_Init+0x3c>)
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	4a0b      	ldr	r2, [pc, #44]	; (8001fe8 <HAL_Init+0x3c>)
 8001fbc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001fc0:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001fc2:	2003      	movs	r0, #3
 8001fc4:	f000 f94c 	bl	8002260 <HAL_NVIC_SetPriorityGrouping>
  
  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001fc8:	2000      	movs	r0, #0
 8001fca:	f000 f80f 	bl	8001fec <HAL_InitTick>
 8001fce:	4603      	mov	r3, r0
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d002      	beq.n	8001fda <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001fd4:	2301      	movs	r3, #1
 8001fd6:	71fb      	strb	r3, [r7, #7]
 8001fd8:	e001      	b.n	8001fde <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001fda:	f7ff fe90 	bl	8001cfe <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001fde:	79fb      	ldrb	r3, [r7, #7]
}
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	3708      	adds	r7, #8
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	bd80      	pop	{r7, pc}
 8001fe8:	58004000 	.word	0x58004000

08001fec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	b084      	sub	sp, #16
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001ff4:	2300      	movs	r3, #0
 8001ff6:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 8001ff8:	4b17      	ldr	r3, [pc, #92]	; (8002058 <HAL_InitTick+0x6c>)
 8001ffa:	781b      	ldrb	r3, [r3, #0]
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d024      	beq.n	800204a <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/ (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002000:	f002 f88e 	bl	8004120 <HAL_RCC_GetHCLKFreq>
 8002004:	4602      	mov	r2, r0
 8002006:	4b14      	ldr	r3, [pc, #80]	; (8002058 <HAL_InitTick+0x6c>)
 8002008:	781b      	ldrb	r3, [r3, #0]
 800200a:	4619      	mov	r1, r3
 800200c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002010:	fbb3 f3f1 	udiv	r3, r3, r1
 8002014:	fbb2 f3f3 	udiv	r3, r2, r3
 8002018:	4618      	mov	r0, r3
 800201a:	f000 f946 	bl	80022aa <HAL_SYSTICK_Config>
 800201e:	4603      	mov	r3, r0
 8002020:	2b00      	cmp	r3, #0
 8002022:	d10f      	bne.n	8002044 <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	2b0f      	cmp	r3, #15
 8002028:	d809      	bhi.n	800203e <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800202a:	2200      	movs	r2, #0
 800202c:	6879      	ldr	r1, [r7, #4]
 800202e:	f04f 30ff 	mov.w	r0, #4294967295
 8002032:	f000 f920 	bl	8002276 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002036:	4a09      	ldr	r2, [pc, #36]	; (800205c <HAL_InitTick+0x70>)
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	6013      	str	r3, [r2, #0]
 800203c:	e007      	b.n	800204e <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 800203e:	2301      	movs	r3, #1
 8002040:	73fb      	strb	r3, [r7, #15]
 8002042:	e004      	b.n	800204e <HAL_InitTick+0x62>
      }
    }
    else
    {  
      status = HAL_ERROR;
 8002044:	2301      	movs	r3, #1
 8002046:	73fb      	strb	r3, [r7, #15]
 8002048:	e001      	b.n	800204e <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 800204a:	2301      	movs	r3, #1
 800204c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800204e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002050:	4618      	mov	r0, r3
 8002052:	3710      	adds	r7, #16
 8002054:	46bd      	mov	sp, r7
 8002056:	bd80      	pop	{r7, pc}
 8002058:	2000000c 	.word	0x2000000c
 800205c:	20000008 	.word	0x20000008

08002060 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002060:	b480      	push	{r7}
 8002062:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002064:	4b06      	ldr	r3, [pc, #24]	; (8002080 <HAL_IncTick+0x20>)
 8002066:	781b      	ldrb	r3, [r3, #0]
 8002068:	461a      	mov	r2, r3
 800206a:	4b06      	ldr	r3, [pc, #24]	; (8002084 <HAL_IncTick+0x24>)
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	4413      	add	r3, r2
 8002070:	4a04      	ldr	r2, [pc, #16]	; (8002084 <HAL_IncTick+0x24>)
 8002072:	6013      	str	r3, [r2, #0]
}
 8002074:	bf00      	nop
 8002076:	46bd      	mov	sp, r7
 8002078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207c:	4770      	bx	lr
 800207e:	bf00      	nop
 8002080:	2000000c 	.word	0x2000000c
 8002084:	200002c8 	.word	0x200002c8

08002088 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002088:	b480      	push	{r7}
 800208a:	af00      	add	r7, sp, #0
  return uwTick;
 800208c:	4b03      	ldr	r3, [pc, #12]	; (800209c <HAL_GetTick+0x14>)
 800208e:	681b      	ldr	r3, [r3, #0]
}
 8002090:	4618      	mov	r0, r3
 8002092:	46bd      	mov	sp, r7
 8002094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002098:	4770      	bx	lr
 800209a:	bf00      	nop
 800209c:	200002c8 	.word	0x200002c8

080020a0 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 80020a0:	b480      	push	{r7}
 80020a2:	af00      	add	r7, sp, #0
  return uwTickPrio;
 80020a4:	4b03      	ldr	r3, [pc, #12]	; (80020b4 <HAL_GetTickPrio+0x14>)
 80020a6:	681b      	ldr	r3, [r3, #0]
}
 80020a8:	4618      	mov	r0, r3
 80020aa:	46bd      	mov	sp, r7
 80020ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b0:	4770      	bx	lr
 80020b2:	bf00      	nop
 80020b4:	20000008 	.word	0x20000008

080020b8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
  __weak void HAL_Delay(uint32_t Delay)
  {
 80020b8:	b580      	push	{r7, lr}
 80020ba:	b084      	sub	sp, #16
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]
    uint32_t tickstart = HAL_GetTick();
 80020c0:	f7ff ffe2 	bl	8002088 <HAL_GetTick>
 80020c4:	60b8      	str	r0, [r7, #8]
    uint32_t wait = Delay;
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	60fb      	str	r3, [r7, #12]
  
    /* Add a freq to guarantee minimum wait */
    if (wait < HAL_MAX_DELAY)
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020d0:	d005      	beq.n	80020de <HAL_Delay+0x26>
    {
      wait += (uint32_t)(uwTickFreq);
 80020d2:	4b09      	ldr	r3, [pc, #36]	; (80020f8 <HAL_Delay+0x40>)
 80020d4:	781b      	ldrb	r3, [r3, #0]
 80020d6:	461a      	mov	r2, r3
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	4413      	add	r3, r2
 80020dc:	60fb      	str	r3, [r7, #12]
    }
  
    while ((HAL_GetTick() - tickstart) < wait)
 80020de:	bf00      	nop
 80020e0:	f7ff ffd2 	bl	8002088 <HAL_GetTick>
 80020e4:	4602      	mov	r2, r0
 80020e6:	68bb      	ldr	r3, [r7, #8]
 80020e8:	1ad3      	subs	r3, r2, r3
 80020ea:	68fa      	ldr	r2, [r7, #12]
 80020ec:	429a      	cmp	r2, r3
 80020ee:	d8f7      	bhi.n	80020e0 <HAL_Delay+0x28>
    {
    }
  }
 80020f0:	bf00      	nop
 80020f2:	3710      	adds	r7, #16
 80020f4:	46bd      	mov	sp, r7
 80020f6:	bd80      	pop	{r7, pc}
 80020f8:	2000000c 	.word	0x2000000c

080020fc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020fc:	b480      	push	{r7}
 80020fe:	b085      	sub	sp, #20
 8002100:	af00      	add	r7, sp, #0
 8002102:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	f003 0307 	and.w	r3, r3, #7
 800210a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800210c:	4b0c      	ldr	r3, [pc, #48]	; (8002140 <__NVIC_SetPriorityGrouping+0x44>)
 800210e:	68db      	ldr	r3, [r3, #12]
 8002110:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002112:	68ba      	ldr	r2, [r7, #8]
 8002114:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002118:	4013      	ands	r3, r2
 800211a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002120:	68bb      	ldr	r3, [r7, #8]
 8002122:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002124:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002128:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800212c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800212e:	4a04      	ldr	r2, [pc, #16]	; (8002140 <__NVIC_SetPriorityGrouping+0x44>)
 8002130:	68bb      	ldr	r3, [r7, #8]
 8002132:	60d3      	str	r3, [r2, #12]
}
 8002134:	bf00      	nop
 8002136:	3714      	adds	r7, #20
 8002138:	46bd      	mov	sp, r7
 800213a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213e:	4770      	bx	lr
 8002140:	e000ed00 	.word	0xe000ed00

08002144 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002144:	b480      	push	{r7}
 8002146:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002148:	4b04      	ldr	r3, [pc, #16]	; (800215c <__NVIC_GetPriorityGrouping+0x18>)
 800214a:	68db      	ldr	r3, [r3, #12]
 800214c:	0a1b      	lsrs	r3, r3, #8
 800214e:	f003 0307 	and.w	r3, r3, #7
}
 8002152:	4618      	mov	r0, r3
 8002154:	46bd      	mov	sp, r7
 8002156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215a:	4770      	bx	lr
 800215c:	e000ed00 	.word	0xe000ed00

08002160 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002160:	b480      	push	{r7}
 8002162:	b083      	sub	sp, #12
 8002164:	af00      	add	r7, sp, #0
 8002166:	4603      	mov	r3, r0
 8002168:	6039      	str	r1, [r7, #0]
 800216a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800216c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002170:	2b00      	cmp	r3, #0
 8002172:	db0a      	blt.n	800218a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002174:	683b      	ldr	r3, [r7, #0]
 8002176:	b2da      	uxtb	r2, r3
 8002178:	490c      	ldr	r1, [pc, #48]	; (80021ac <__NVIC_SetPriority+0x4c>)
 800217a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800217e:	0112      	lsls	r2, r2, #4
 8002180:	b2d2      	uxtb	r2, r2
 8002182:	440b      	add	r3, r1
 8002184:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002188:	e00a      	b.n	80021a0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800218a:	683b      	ldr	r3, [r7, #0]
 800218c:	b2da      	uxtb	r2, r3
 800218e:	4908      	ldr	r1, [pc, #32]	; (80021b0 <__NVIC_SetPriority+0x50>)
 8002190:	79fb      	ldrb	r3, [r7, #7]
 8002192:	f003 030f 	and.w	r3, r3, #15
 8002196:	3b04      	subs	r3, #4
 8002198:	0112      	lsls	r2, r2, #4
 800219a:	b2d2      	uxtb	r2, r2
 800219c:	440b      	add	r3, r1
 800219e:	761a      	strb	r2, [r3, #24]
}
 80021a0:	bf00      	nop
 80021a2:	370c      	adds	r7, #12
 80021a4:	46bd      	mov	sp, r7
 80021a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021aa:	4770      	bx	lr
 80021ac:	e000e100 	.word	0xe000e100
 80021b0:	e000ed00 	.word	0xe000ed00

080021b4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80021b4:	b480      	push	{r7}
 80021b6:	b089      	sub	sp, #36	; 0x24
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	60f8      	str	r0, [r7, #12]
 80021bc:	60b9      	str	r1, [r7, #8]
 80021be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	f003 0307 	and.w	r3, r3, #7
 80021c6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80021c8:	69fb      	ldr	r3, [r7, #28]
 80021ca:	f1c3 0307 	rsb	r3, r3, #7
 80021ce:	2b04      	cmp	r3, #4
 80021d0:	bf28      	it	cs
 80021d2:	2304      	movcs	r3, #4
 80021d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80021d6:	69fb      	ldr	r3, [r7, #28]
 80021d8:	3304      	adds	r3, #4
 80021da:	2b06      	cmp	r3, #6
 80021dc:	d902      	bls.n	80021e4 <NVIC_EncodePriority+0x30>
 80021de:	69fb      	ldr	r3, [r7, #28]
 80021e0:	3b03      	subs	r3, #3
 80021e2:	e000      	b.n	80021e6 <NVIC_EncodePriority+0x32>
 80021e4:	2300      	movs	r3, #0
 80021e6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021e8:	f04f 32ff 	mov.w	r2, #4294967295
 80021ec:	69bb      	ldr	r3, [r7, #24]
 80021ee:	fa02 f303 	lsl.w	r3, r2, r3
 80021f2:	43da      	mvns	r2, r3
 80021f4:	68bb      	ldr	r3, [r7, #8]
 80021f6:	401a      	ands	r2, r3
 80021f8:	697b      	ldr	r3, [r7, #20]
 80021fa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80021fc:	f04f 31ff 	mov.w	r1, #4294967295
 8002200:	697b      	ldr	r3, [r7, #20]
 8002202:	fa01 f303 	lsl.w	r3, r1, r3
 8002206:	43d9      	mvns	r1, r3
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800220c:	4313      	orrs	r3, r2
         );
}
 800220e:	4618      	mov	r0, r3
 8002210:	3724      	adds	r7, #36	; 0x24
 8002212:	46bd      	mov	sp, r7
 8002214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002218:	4770      	bx	lr
	...

0800221c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800221c:	b580      	push	{r7, lr}
 800221e:	b082      	sub	sp, #8
 8002220:	af00      	add	r7, sp, #0
 8002222:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	3b01      	subs	r3, #1
 8002228:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800222c:	d301      	bcc.n	8002232 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800222e:	2301      	movs	r3, #1
 8002230:	e00f      	b.n	8002252 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002232:	4a0a      	ldr	r2, [pc, #40]	; (800225c <SysTick_Config+0x40>)
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	3b01      	subs	r3, #1
 8002238:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800223a:	210f      	movs	r1, #15
 800223c:	f04f 30ff 	mov.w	r0, #4294967295
 8002240:	f7ff ff8e 	bl	8002160 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002244:	4b05      	ldr	r3, [pc, #20]	; (800225c <SysTick_Config+0x40>)
 8002246:	2200      	movs	r2, #0
 8002248:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800224a:	4b04      	ldr	r3, [pc, #16]	; (800225c <SysTick_Config+0x40>)
 800224c:	2207      	movs	r2, #7
 800224e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002250:	2300      	movs	r3, #0
}
 8002252:	4618      	mov	r0, r3
 8002254:	3708      	adds	r7, #8
 8002256:	46bd      	mov	sp, r7
 8002258:	bd80      	pop	{r7, pc}
 800225a:	bf00      	nop
 800225c:	e000e010 	.word	0xe000e010

08002260 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002260:	b580      	push	{r7, lr}
 8002262:	b082      	sub	sp, #8
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002268:	6878      	ldr	r0, [r7, #4]
 800226a:	f7ff ff47 	bl	80020fc <__NVIC_SetPriorityGrouping>
}
 800226e:	bf00      	nop
 8002270:	3708      	adds	r7, #8
 8002272:	46bd      	mov	sp, r7
 8002274:	bd80      	pop	{r7, pc}

08002276 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002276:	b580      	push	{r7, lr}
 8002278:	b086      	sub	sp, #24
 800227a:	af00      	add	r7, sp, #0
 800227c:	4603      	mov	r3, r0
 800227e:	60b9      	str	r1, [r7, #8]
 8002280:	607a      	str	r2, [r7, #4]
 8002282:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002284:	f7ff ff5e 	bl	8002144 <__NVIC_GetPriorityGrouping>
 8002288:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800228a:	687a      	ldr	r2, [r7, #4]
 800228c:	68b9      	ldr	r1, [r7, #8]
 800228e:	6978      	ldr	r0, [r7, #20]
 8002290:	f7ff ff90 	bl	80021b4 <NVIC_EncodePriority>
 8002294:	4602      	mov	r2, r0
 8002296:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800229a:	4611      	mov	r1, r2
 800229c:	4618      	mov	r0, r3
 800229e:	f7ff ff5f 	bl	8002160 <__NVIC_SetPriority>
}
 80022a2:	bf00      	nop
 80022a4:	3718      	adds	r7, #24
 80022a6:	46bd      	mov	sp, r7
 80022a8:	bd80      	pop	{r7, pc}

080022aa <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80022aa:	b580      	push	{r7, lr}
 80022ac:	b082      	sub	sp, #8
 80022ae:	af00      	add	r7, sp, #0
 80022b0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80022b2:	6878      	ldr	r0, [r7, #4]
 80022b4:	f7ff ffb2 	bl	800221c <SysTick_Config>
 80022b8:	4603      	mov	r3, r0
}
 80022ba:	4618      	mov	r0, r3
 80022bc:	3708      	adds	r7, #8
 80022be:	46bd      	mov	sp, r7
 80022c0:	bd80      	pop	{r7, pc}
	...

080022c4 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80022c4:	b480      	push	{r7}
 80022c6:	b087      	sub	sp, #28
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]
 80022cc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80022ce:	2300      	movs	r3, #0
 80022d0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80022d2:	e14c      	b.n	800256e <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80022d4:	683b      	ldr	r3, [r7, #0]
 80022d6:	681a      	ldr	r2, [r3, #0]
 80022d8:	2101      	movs	r1, #1
 80022da:	697b      	ldr	r3, [r7, #20]
 80022dc:	fa01 f303 	lsl.w	r3, r1, r3
 80022e0:	4013      	ands	r3, r2
 80022e2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	f000 813e 	beq.w	8002568 <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80022ec:	683b      	ldr	r3, [r7, #0]
 80022ee:	685b      	ldr	r3, [r3, #4]
 80022f0:	2b01      	cmp	r3, #1
 80022f2:	d00b      	beq.n	800230c <HAL_GPIO_Init+0x48>
 80022f4:	683b      	ldr	r3, [r7, #0]
 80022f6:	685b      	ldr	r3, [r3, #4]
 80022f8:	2b02      	cmp	r3, #2
 80022fa:	d007      	beq.n	800230c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80022fc:	683b      	ldr	r3, [r7, #0]
 80022fe:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002300:	2b11      	cmp	r3, #17
 8002302:	d003      	beq.n	800230c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002304:	683b      	ldr	r3, [r7, #0]
 8002306:	685b      	ldr	r3, [r3, #4]
 8002308:	2b12      	cmp	r3, #18
 800230a:	d130      	bne.n	800236e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	689b      	ldr	r3, [r3, #8]
 8002310:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002312:	697b      	ldr	r3, [r7, #20]
 8002314:	005b      	lsls	r3, r3, #1
 8002316:	2203      	movs	r2, #3
 8002318:	fa02 f303 	lsl.w	r3, r2, r3
 800231c:	43db      	mvns	r3, r3
 800231e:	693a      	ldr	r2, [r7, #16]
 8002320:	4013      	ands	r3, r2
 8002322:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002324:	683b      	ldr	r3, [r7, #0]
 8002326:	68da      	ldr	r2, [r3, #12]
 8002328:	697b      	ldr	r3, [r7, #20]
 800232a:	005b      	lsls	r3, r3, #1
 800232c:	fa02 f303 	lsl.w	r3, r2, r3
 8002330:	693a      	ldr	r2, [r7, #16]
 8002332:	4313      	orrs	r3, r2
 8002334:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	693a      	ldr	r2, [r7, #16]
 800233a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	685b      	ldr	r3, [r3, #4]
 8002340:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002342:	2201      	movs	r2, #1
 8002344:	697b      	ldr	r3, [r7, #20]
 8002346:	fa02 f303 	lsl.w	r3, r2, r3
 800234a:	43db      	mvns	r3, r3
 800234c:	693a      	ldr	r2, [r7, #16]
 800234e:	4013      	ands	r3, r2
 8002350:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8002352:	683b      	ldr	r3, [r7, #0]
 8002354:	685b      	ldr	r3, [r3, #4]
 8002356:	091b      	lsrs	r3, r3, #4
 8002358:	f003 0201 	and.w	r2, r3, #1
 800235c:	697b      	ldr	r3, [r7, #20]
 800235e:	fa02 f303 	lsl.w	r3, r2, r3
 8002362:	693a      	ldr	r2, [r7, #16]
 8002364:	4313      	orrs	r3, r2
 8002366:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	693a      	ldr	r2, [r7, #16]
 800236c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	68db      	ldr	r3, [r3, #12]
 8002372:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002374:	697b      	ldr	r3, [r7, #20]
 8002376:	005b      	lsls	r3, r3, #1
 8002378:	2203      	movs	r2, #3
 800237a:	fa02 f303 	lsl.w	r3, r2, r3
 800237e:	43db      	mvns	r3, r3
 8002380:	693a      	ldr	r2, [r7, #16]
 8002382:	4013      	ands	r3, r2
 8002384:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002386:	683b      	ldr	r3, [r7, #0]
 8002388:	689a      	ldr	r2, [r3, #8]
 800238a:	697b      	ldr	r3, [r7, #20]
 800238c:	005b      	lsls	r3, r3, #1
 800238e:	fa02 f303 	lsl.w	r3, r2, r3
 8002392:	693a      	ldr	r2, [r7, #16]
 8002394:	4313      	orrs	r3, r2
 8002396:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	693a      	ldr	r2, [r7, #16]
 800239c:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800239e:	683b      	ldr	r3, [r7, #0]
 80023a0:	685b      	ldr	r3, [r3, #4]
 80023a2:	2b02      	cmp	r3, #2
 80023a4:	d003      	beq.n	80023ae <HAL_GPIO_Init+0xea>
 80023a6:	683b      	ldr	r3, [r7, #0]
 80023a8:	685b      	ldr	r3, [r3, #4]
 80023aa:	2b12      	cmp	r3, #18
 80023ac:	d123      	bne.n	80023f6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80023ae:	697b      	ldr	r3, [r7, #20]
 80023b0:	08da      	lsrs	r2, r3, #3
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	3208      	adds	r2, #8
 80023b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80023ba:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80023bc:	697b      	ldr	r3, [r7, #20]
 80023be:	f003 0307 	and.w	r3, r3, #7
 80023c2:	009b      	lsls	r3, r3, #2
 80023c4:	220f      	movs	r2, #15
 80023c6:	fa02 f303 	lsl.w	r3, r2, r3
 80023ca:	43db      	mvns	r3, r3
 80023cc:	693a      	ldr	r2, [r7, #16]
 80023ce:	4013      	ands	r3, r2
 80023d0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80023d2:	683b      	ldr	r3, [r7, #0]
 80023d4:	691a      	ldr	r2, [r3, #16]
 80023d6:	697b      	ldr	r3, [r7, #20]
 80023d8:	f003 0307 	and.w	r3, r3, #7
 80023dc:	009b      	lsls	r3, r3, #2
 80023de:	fa02 f303 	lsl.w	r3, r2, r3
 80023e2:	693a      	ldr	r2, [r7, #16]
 80023e4:	4313      	orrs	r3, r2
 80023e6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80023e8:	697b      	ldr	r3, [r7, #20]
 80023ea:	08da      	lsrs	r2, r3, #3
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	3208      	adds	r2, #8
 80023f0:	6939      	ldr	r1, [r7, #16]
 80023f2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80023fc:	697b      	ldr	r3, [r7, #20]
 80023fe:	005b      	lsls	r3, r3, #1
 8002400:	2203      	movs	r2, #3
 8002402:	fa02 f303 	lsl.w	r3, r2, r3
 8002406:	43db      	mvns	r3, r3
 8002408:	693a      	ldr	r2, [r7, #16]
 800240a:	4013      	ands	r3, r2
 800240c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800240e:	683b      	ldr	r3, [r7, #0]
 8002410:	685b      	ldr	r3, [r3, #4]
 8002412:	f003 0203 	and.w	r2, r3, #3
 8002416:	697b      	ldr	r3, [r7, #20]
 8002418:	005b      	lsls	r3, r3, #1
 800241a:	fa02 f303 	lsl.w	r3, r2, r3
 800241e:	693a      	ldr	r2, [r7, #16]
 8002420:	4313      	orrs	r3, r2
 8002422:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	693a      	ldr	r2, [r7, #16]
 8002428:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800242a:	683b      	ldr	r3, [r7, #0]
 800242c:	685b      	ldr	r3, [r3, #4]
 800242e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002432:	2b00      	cmp	r3, #0
 8002434:	f000 8098 	beq.w	8002568 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8002438:	4a54      	ldr	r2, [pc, #336]	; (800258c <HAL_GPIO_Init+0x2c8>)
 800243a:	697b      	ldr	r3, [r7, #20]
 800243c:	089b      	lsrs	r3, r3, #2
 800243e:	3302      	adds	r3, #2
 8002440:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002444:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002446:	697b      	ldr	r3, [r7, #20]
 8002448:	f003 0303 	and.w	r3, r3, #3
 800244c:	009b      	lsls	r3, r3, #2
 800244e:	220f      	movs	r2, #15
 8002450:	fa02 f303 	lsl.w	r3, r2, r3
 8002454:	43db      	mvns	r3, r3
 8002456:	693a      	ldr	r2, [r7, #16]
 8002458:	4013      	ands	r3, r2
 800245a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002462:	d019      	beq.n	8002498 <HAL_GPIO_Init+0x1d4>
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	4a4a      	ldr	r2, [pc, #296]	; (8002590 <HAL_GPIO_Init+0x2cc>)
 8002468:	4293      	cmp	r3, r2
 800246a:	d013      	beq.n	8002494 <HAL_GPIO_Init+0x1d0>
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	4a49      	ldr	r2, [pc, #292]	; (8002594 <HAL_GPIO_Init+0x2d0>)
 8002470:	4293      	cmp	r3, r2
 8002472:	d00d      	beq.n	8002490 <HAL_GPIO_Init+0x1cc>
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	4a48      	ldr	r2, [pc, #288]	; (8002598 <HAL_GPIO_Init+0x2d4>)
 8002478:	4293      	cmp	r3, r2
 800247a:	d007      	beq.n	800248c <HAL_GPIO_Init+0x1c8>
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	4a47      	ldr	r2, [pc, #284]	; (800259c <HAL_GPIO_Init+0x2d8>)
 8002480:	4293      	cmp	r3, r2
 8002482:	d101      	bne.n	8002488 <HAL_GPIO_Init+0x1c4>
 8002484:	2304      	movs	r3, #4
 8002486:	e008      	b.n	800249a <HAL_GPIO_Init+0x1d6>
 8002488:	2307      	movs	r3, #7
 800248a:	e006      	b.n	800249a <HAL_GPIO_Init+0x1d6>
 800248c:	2303      	movs	r3, #3
 800248e:	e004      	b.n	800249a <HAL_GPIO_Init+0x1d6>
 8002490:	2302      	movs	r3, #2
 8002492:	e002      	b.n	800249a <HAL_GPIO_Init+0x1d6>
 8002494:	2301      	movs	r3, #1
 8002496:	e000      	b.n	800249a <HAL_GPIO_Init+0x1d6>
 8002498:	2300      	movs	r3, #0
 800249a:	697a      	ldr	r2, [r7, #20]
 800249c:	f002 0203 	and.w	r2, r2, #3
 80024a0:	0092      	lsls	r2, r2, #2
 80024a2:	4093      	lsls	r3, r2
 80024a4:	693a      	ldr	r2, [r7, #16]
 80024a6:	4313      	orrs	r3, r2
 80024a8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80024aa:	4938      	ldr	r1, [pc, #224]	; (800258c <HAL_GPIO_Init+0x2c8>)
 80024ac:	697b      	ldr	r3, [r7, #20]
 80024ae:	089b      	lsrs	r3, r3, #2
 80024b0:	3302      	adds	r3, #2
 80024b2:	693a      	ldr	r2, [r7, #16]
 80024b4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80024b8:	4b39      	ldr	r3, [pc, #228]	; (80025a0 <HAL_GPIO_Init+0x2dc>)
 80024ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80024be:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	43db      	mvns	r3, r3
 80024c4:	693a      	ldr	r2, [r7, #16]
 80024c6:	4013      	ands	r3, r2
 80024c8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80024ca:	683b      	ldr	r3, [r7, #0]
 80024cc:	685b      	ldr	r3, [r3, #4]
 80024ce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d003      	beq.n	80024de <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 80024d6:	693a      	ldr	r2, [r7, #16]
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	4313      	orrs	r3, r2
 80024dc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80024de:	4a30      	ldr	r2, [pc, #192]	; (80025a0 <HAL_GPIO_Init+0x2dc>)
 80024e0:	693b      	ldr	r3, [r7, #16]
 80024e2:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 80024e6:	4b2e      	ldr	r3, [pc, #184]	; (80025a0 <HAL_GPIO_Init+0x2dc>)
 80024e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80024ec:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	43db      	mvns	r3, r3
 80024f2:	693a      	ldr	r2, [r7, #16]
 80024f4:	4013      	ands	r3, r2
 80024f6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80024f8:	683b      	ldr	r3, [r7, #0]
 80024fa:	685b      	ldr	r3, [r3, #4]
 80024fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002500:	2b00      	cmp	r3, #0
 8002502:	d003      	beq.n	800250c <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8002504:	693a      	ldr	r2, [r7, #16]
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	4313      	orrs	r3, r2
 800250a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800250c:	4a24      	ldr	r2, [pc, #144]	; (80025a0 <HAL_GPIO_Init+0x2dc>)
 800250e:	693b      	ldr	r3, [r7, #16]
 8002510:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002514:	4b22      	ldr	r3, [pc, #136]	; (80025a0 <HAL_GPIO_Init+0x2dc>)
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	43db      	mvns	r3, r3
 800251e:	693a      	ldr	r2, [r7, #16]
 8002520:	4013      	ands	r3, r2
 8002522:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002524:	683b      	ldr	r3, [r7, #0]
 8002526:	685b      	ldr	r3, [r3, #4]
 8002528:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800252c:	2b00      	cmp	r3, #0
 800252e:	d003      	beq.n	8002538 <HAL_GPIO_Init+0x274>
        {
          temp |= iocurrent;
 8002530:	693a      	ldr	r2, [r7, #16]
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	4313      	orrs	r3, r2
 8002536:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002538:	4a19      	ldr	r2, [pc, #100]	; (80025a0 <HAL_GPIO_Init+0x2dc>)
 800253a:	693b      	ldr	r3, [r7, #16]
 800253c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800253e:	4b18      	ldr	r3, [pc, #96]	; (80025a0 <HAL_GPIO_Init+0x2dc>)
 8002540:	685b      	ldr	r3, [r3, #4]
 8002542:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	43db      	mvns	r3, r3
 8002548:	693a      	ldr	r2, [r7, #16]
 800254a:	4013      	ands	r3, r2
 800254c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800254e:	683b      	ldr	r3, [r7, #0]
 8002550:	685b      	ldr	r3, [r3, #4]
 8002552:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002556:	2b00      	cmp	r3, #0
 8002558:	d003      	beq.n	8002562 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 800255a:	693a      	ldr	r2, [r7, #16]
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	4313      	orrs	r3, r2
 8002560:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002562:	4a0f      	ldr	r2, [pc, #60]	; (80025a0 <HAL_GPIO_Init+0x2dc>)
 8002564:	693b      	ldr	r3, [r7, #16]
 8002566:	6053      	str	r3, [r2, #4]
      }
    }
    
    position++;
 8002568:	697b      	ldr	r3, [r7, #20]
 800256a:	3301      	adds	r3, #1
 800256c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800256e:	683b      	ldr	r3, [r7, #0]
 8002570:	681a      	ldr	r2, [r3, #0]
 8002572:	697b      	ldr	r3, [r7, #20]
 8002574:	fa22 f303 	lsr.w	r3, r2, r3
 8002578:	2b00      	cmp	r3, #0
 800257a:	f47f aeab 	bne.w	80022d4 <HAL_GPIO_Init+0x10>
  }
}
 800257e:	bf00      	nop
 8002580:	371c      	adds	r7, #28
 8002582:	46bd      	mov	sp, r7
 8002584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002588:	4770      	bx	lr
 800258a:	bf00      	nop
 800258c:	40010000 	.word	0x40010000
 8002590:	48000400 	.word	0x48000400
 8002594:	48000800 	.word	0x48000800
 8002598:	48000c00 	.word	0x48000c00
 800259c:	48001000 	.word	0x48001000
 80025a0:	58000800 	.word	0x58000800

080025a4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80025a4:	b480      	push	{r7}
 80025a6:	b083      	sub	sp, #12
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	6078      	str	r0, [r7, #4]
 80025ac:	460b      	mov	r3, r1
 80025ae:	807b      	strh	r3, [r7, #2]
 80025b0:	4613      	mov	r3, r2
 80025b2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80025b4:	787b      	ldrb	r3, [r7, #1]
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d003      	beq.n	80025c2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80025ba:	887a      	ldrh	r2, [r7, #2]
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80025c0:	e002      	b.n	80025c8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80025c2:	887a      	ldrh	r2, [r7, #2]
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80025c8:	bf00      	nop
 80025ca:	370c      	adds	r7, #12
 80025cc:	46bd      	mov	sp, r7
 80025ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d2:	4770      	bx	lr

080025d4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80025d4:	b580      	push	{r7, lr}
 80025d6:	b082      	sub	sp, #8
 80025d8:	af00      	add	r7, sp, #0
 80025da:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d101      	bne.n	80025e6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80025e2:	2301      	movs	r3, #1
 80025e4:	e081      	b.n	80026ea <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80025ec:	b2db      	uxtb	r3, r3
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d106      	bne.n	8002600 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	2200      	movs	r2, #0
 80025f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80025fa:	6878      	ldr	r0, [r7, #4]
 80025fc:	f7ff fb86 	bl	8001d0c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	2224      	movs	r2, #36	; 0x24
 8002604:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	681a      	ldr	r2, [r3, #0]
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f022 0201 	bic.w	r2, r2, #1
 8002616:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	685a      	ldr	r2, [r3, #4]
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002624:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	689a      	ldr	r2, [r3, #8]
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002634:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	68db      	ldr	r3, [r3, #12]
 800263a:	2b01      	cmp	r3, #1
 800263c:	d107      	bne.n	800264e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	689a      	ldr	r2, [r3, #8]
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800264a:	609a      	str	r2, [r3, #8]
 800264c:	e006      	b.n	800265c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	689a      	ldr	r2, [r3, #8]
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800265a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	68db      	ldr	r3, [r3, #12]
 8002660:	2b02      	cmp	r3, #2
 8002662:	d104      	bne.n	800266e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800266c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	685b      	ldr	r3, [r3, #4]
 8002674:	687a      	ldr	r2, [r7, #4]
 8002676:	6812      	ldr	r2, [r2, #0]
 8002678:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800267c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002680:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	68da      	ldr	r2, [r3, #12]
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002690:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	691a      	ldr	r2, [r3, #16]
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	695b      	ldr	r3, [r3, #20]
 800269a:	ea42 0103 	orr.w	r1, r2, r3
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	699b      	ldr	r3, [r3, #24]
 80026a2:	021a      	lsls	r2, r3, #8
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	430a      	orrs	r2, r1
 80026aa:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	69d9      	ldr	r1, [r3, #28]
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	6a1a      	ldr	r2, [r3, #32]
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	430a      	orrs	r2, r1
 80026ba:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	681a      	ldr	r2, [r3, #0]
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f042 0201 	orr.w	r2, r2, #1
 80026ca:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	2200      	movs	r2, #0
 80026d0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	2220      	movs	r2, #32
 80026d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	2200      	movs	r2, #0
 80026de:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	2200      	movs	r2, #0
 80026e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80026e8:	2300      	movs	r3, #0
}
 80026ea:	4618      	mov	r0, r3
 80026ec:	3708      	adds	r7, #8
 80026ee:	46bd      	mov	sp, r7
 80026f0:	bd80      	pop	{r7, pc}
	...

080026f4 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80026f4:	b580      	push	{r7, lr}
 80026f6:	b088      	sub	sp, #32
 80026f8:	af02      	add	r7, sp, #8
 80026fa:	60f8      	str	r0, [r7, #12]
 80026fc:	607a      	str	r2, [r7, #4]
 80026fe:	461a      	mov	r2, r3
 8002700:	460b      	mov	r3, r1
 8002702:	817b      	strh	r3, [r7, #10]
 8002704:	4613      	mov	r3, r2
 8002706:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800270e:	b2db      	uxtb	r3, r3
 8002710:	2b20      	cmp	r3, #32
 8002712:	f040 80da 	bne.w	80028ca <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800271c:	2b01      	cmp	r3, #1
 800271e:	d101      	bne.n	8002724 <HAL_I2C_Master_Transmit+0x30>
 8002720:	2302      	movs	r3, #2
 8002722:	e0d3      	b.n	80028cc <HAL_I2C_Master_Transmit+0x1d8>
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	2201      	movs	r2, #1
 8002728:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800272c:	f7ff fcac 	bl	8002088 <HAL_GetTick>
 8002730:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002732:	697b      	ldr	r3, [r7, #20]
 8002734:	9300      	str	r3, [sp, #0]
 8002736:	2319      	movs	r3, #25
 8002738:	2201      	movs	r2, #1
 800273a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800273e:	68f8      	ldr	r0, [r7, #12]
 8002740:	f000 f9e6 	bl	8002b10 <I2C_WaitOnFlagUntilTimeout>
 8002744:	4603      	mov	r3, r0
 8002746:	2b00      	cmp	r3, #0
 8002748:	d001      	beq.n	800274e <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800274a:	2301      	movs	r3, #1
 800274c:	e0be      	b.n	80028cc <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	2221      	movs	r2, #33	; 0x21
 8002752:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	2210      	movs	r2, #16
 800275a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	2200      	movs	r2, #0
 8002762:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	687a      	ldr	r2, [r7, #4]
 8002768:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	893a      	ldrh	r2, [r7, #8]
 800276e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	2200      	movs	r2, #0
 8002774:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800277a:	b29b      	uxth	r3, r3
 800277c:	2bff      	cmp	r3, #255	; 0xff
 800277e:	d90e      	bls.n	800279e <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	22ff      	movs	r2, #255	; 0xff
 8002784:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800278a:	b2da      	uxtb	r2, r3
 800278c:	8979      	ldrh	r1, [r7, #10]
 800278e:	4b51      	ldr	r3, [pc, #324]	; (80028d4 <HAL_I2C_Master_Transmit+0x1e0>)
 8002790:	9300      	str	r3, [sp, #0]
 8002792:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002796:	68f8      	ldr	r0, [r7, #12]
 8002798:	f000 fb48 	bl	8002e2c <I2C_TransferConfig>
 800279c:	e06c      	b.n	8002878 <HAL_I2C_Master_Transmit+0x184>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027a2:	b29a      	uxth	r2, r3
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027ac:	b2da      	uxtb	r2, r3
 80027ae:	8979      	ldrh	r1, [r7, #10]
 80027b0:	4b48      	ldr	r3, [pc, #288]	; (80028d4 <HAL_I2C_Master_Transmit+0x1e0>)
 80027b2:	9300      	str	r3, [sp, #0]
 80027b4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80027b8:	68f8      	ldr	r0, [r7, #12]
 80027ba:	f000 fb37 	bl	8002e2c <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 80027be:	e05b      	b.n	8002878 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80027c0:	697a      	ldr	r2, [r7, #20]
 80027c2:	6a39      	ldr	r1, [r7, #32]
 80027c4:	68f8      	ldr	r0, [r7, #12]
 80027c6:	f000 f9e3 	bl	8002b90 <I2C_WaitOnTXISFlagUntilTimeout>
 80027ca:	4603      	mov	r3, r0
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d001      	beq.n	80027d4 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 80027d0:	2301      	movs	r3, #1
 80027d2:	e07b      	b.n	80028cc <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027d8:	781a      	ldrb	r2, [r3, #0]
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027e4:	1c5a      	adds	r2, r3, #1
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027ee:	b29b      	uxth	r3, r3
 80027f0:	3b01      	subs	r3, #1
 80027f2:	b29a      	uxth	r2, r3
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027fc:	3b01      	subs	r3, #1
 80027fe:	b29a      	uxth	r2, r3
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002808:	b29b      	uxth	r3, r3
 800280a:	2b00      	cmp	r3, #0
 800280c:	d034      	beq.n	8002878 <HAL_I2C_Master_Transmit+0x184>
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002812:	2b00      	cmp	r3, #0
 8002814:	d130      	bne.n	8002878 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002816:	697b      	ldr	r3, [r7, #20]
 8002818:	9300      	str	r3, [sp, #0]
 800281a:	6a3b      	ldr	r3, [r7, #32]
 800281c:	2200      	movs	r2, #0
 800281e:	2180      	movs	r1, #128	; 0x80
 8002820:	68f8      	ldr	r0, [r7, #12]
 8002822:	f000 f975 	bl	8002b10 <I2C_WaitOnFlagUntilTimeout>
 8002826:	4603      	mov	r3, r0
 8002828:	2b00      	cmp	r3, #0
 800282a:	d001      	beq.n	8002830 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 800282c:	2301      	movs	r3, #1
 800282e:	e04d      	b.n	80028cc <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002834:	b29b      	uxth	r3, r3
 8002836:	2bff      	cmp	r3, #255	; 0xff
 8002838:	d90e      	bls.n	8002858 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	22ff      	movs	r2, #255	; 0xff
 800283e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002844:	b2da      	uxtb	r2, r3
 8002846:	8979      	ldrh	r1, [r7, #10]
 8002848:	2300      	movs	r3, #0
 800284a:	9300      	str	r3, [sp, #0]
 800284c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002850:	68f8      	ldr	r0, [r7, #12]
 8002852:	f000 faeb 	bl	8002e2c <I2C_TransferConfig>
 8002856:	e00f      	b.n	8002878 <HAL_I2C_Master_Transmit+0x184>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800285c:	b29a      	uxth	r2, r3
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002866:	b2da      	uxtb	r2, r3
 8002868:	8979      	ldrh	r1, [r7, #10]
 800286a:	2300      	movs	r3, #0
 800286c:	9300      	str	r3, [sp, #0]
 800286e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002872:	68f8      	ldr	r0, [r7, #12]
 8002874:	f000 fada 	bl	8002e2c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800287c:	b29b      	uxth	r3, r3
 800287e:	2b00      	cmp	r3, #0
 8002880:	d19e      	bne.n	80027c0 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002882:	697a      	ldr	r2, [r7, #20]
 8002884:	6a39      	ldr	r1, [r7, #32]
 8002886:	68f8      	ldr	r0, [r7, #12]
 8002888:	f000 f9c2 	bl	8002c10 <I2C_WaitOnSTOPFlagUntilTimeout>
 800288c:	4603      	mov	r3, r0
 800288e:	2b00      	cmp	r3, #0
 8002890:	d001      	beq.n	8002896 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8002892:	2301      	movs	r3, #1
 8002894:	e01a      	b.n	80028cc <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	2220      	movs	r2, #32
 800289c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	6859      	ldr	r1, [r3, #4]
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	681a      	ldr	r2, [r3, #0]
 80028a8:	4b0b      	ldr	r3, [pc, #44]	; (80028d8 <HAL_I2C_Master_Transmit+0x1e4>)
 80028aa:	400b      	ands	r3, r1
 80028ac:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	2220      	movs	r2, #32
 80028b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	2200      	movs	r2, #0
 80028ba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	2200      	movs	r2, #0
 80028c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80028c6:	2300      	movs	r3, #0
 80028c8:	e000      	b.n	80028cc <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 80028ca:	2302      	movs	r3, #2
  }
}
 80028cc:	4618      	mov	r0, r3
 80028ce:	3718      	adds	r7, #24
 80028d0:	46bd      	mov	sp, r7
 80028d2:	bd80      	pop	{r7, pc}
 80028d4:	80002000 	.word	0x80002000
 80028d8:	fe00e800 	.word	0xfe00e800

080028dc <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80028dc:	b580      	push	{r7, lr}
 80028de:	b088      	sub	sp, #32
 80028e0:	af02      	add	r7, sp, #8
 80028e2:	60f8      	str	r0, [r7, #12]
 80028e4:	607a      	str	r2, [r7, #4]
 80028e6:	461a      	mov	r2, r3
 80028e8:	460b      	mov	r3, r1
 80028ea:	817b      	strh	r3, [r7, #10]
 80028ec:	4613      	mov	r3, r2
 80028ee:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80028f6:	b2db      	uxtb	r3, r3
 80028f8:	2b20      	cmp	r3, #32
 80028fa:	f040 80db 	bne.w	8002ab4 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002904:	2b01      	cmp	r3, #1
 8002906:	d101      	bne.n	800290c <HAL_I2C_Master_Receive+0x30>
 8002908:	2302      	movs	r3, #2
 800290a:	e0d4      	b.n	8002ab6 <HAL_I2C_Master_Receive+0x1da>
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	2201      	movs	r2, #1
 8002910:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002914:	f7ff fbb8 	bl	8002088 <HAL_GetTick>
 8002918:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800291a:	697b      	ldr	r3, [r7, #20]
 800291c:	9300      	str	r3, [sp, #0]
 800291e:	2319      	movs	r3, #25
 8002920:	2201      	movs	r2, #1
 8002922:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002926:	68f8      	ldr	r0, [r7, #12]
 8002928:	f000 f8f2 	bl	8002b10 <I2C_WaitOnFlagUntilTimeout>
 800292c:	4603      	mov	r3, r0
 800292e:	2b00      	cmp	r3, #0
 8002930:	d001      	beq.n	8002936 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8002932:	2301      	movs	r3, #1
 8002934:	e0bf      	b.n	8002ab6 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	2222      	movs	r2, #34	; 0x22
 800293a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	2210      	movs	r2, #16
 8002942:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	2200      	movs	r2, #0
 800294a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	687a      	ldr	r2, [r7, #4]
 8002950:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	893a      	ldrh	r2, [r7, #8]
 8002956:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	2200      	movs	r2, #0
 800295c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002962:	b29b      	uxth	r3, r3
 8002964:	2bff      	cmp	r3, #255	; 0xff
 8002966:	d90e      	bls.n	8002986 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	22ff      	movs	r2, #255	; 0xff
 800296c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002972:	b2da      	uxtb	r2, r3
 8002974:	8979      	ldrh	r1, [r7, #10]
 8002976:	4b52      	ldr	r3, [pc, #328]	; (8002ac0 <HAL_I2C_Master_Receive+0x1e4>)
 8002978:	9300      	str	r3, [sp, #0]
 800297a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800297e:	68f8      	ldr	r0, [r7, #12]
 8002980:	f000 fa54 	bl	8002e2c <I2C_TransferConfig>
 8002984:	e06d      	b.n	8002a62 <HAL_I2C_Master_Receive+0x186>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800298a:	b29a      	uxth	r2, r3
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002994:	b2da      	uxtb	r2, r3
 8002996:	8979      	ldrh	r1, [r7, #10]
 8002998:	4b49      	ldr	r3, [pc, #292]	; (8002ac0 <HAL_I2C_Master_Receive+0x1e4>)
 800299a:	9300      	str	r3, [sp, #0]
 800299c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80029a0:	68f8      	ldr	r0, [r7, #12]
 80029a2:	f000 fa43 	bl	8002e2c <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 80029a6:	e05c      	b.n	8002a62 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80029a8:	697a      	ldr	r2, [r7, #20]
 80029aa:	6a39      	ldr	r1, [r7, #32]
 80029ac:	68f8      	ldr	r0, [r7, #12]
 80029ae:	f000 f96b 	bl	8002c88 <I2C_WaitOnRXNEFlagUntilTimeout>
 80029b2:	4603      	mov	r3, r0
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d001      	beq.n	80029bc <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 80029b8:	2301      	movs	r3, #1
 80029ba:	e07c      	b.n	8002ab6 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029c6:	b2d2      	uxtb	r2, r2
 80029c8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029ce:	1c5a      	adds	r2, r3, #1
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029d8:	3b01      	subs	r3, #1
 80029da:	b29a      	uxth	r2, r3
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029e4:	b29b      	uxth	r3, r3
 80029e6:	3b01      	subs	r3, #1
 80029e8:	b29a      	uxth	r2, r3
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029f2:	b29b      	uxth	r3, r3
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d034      	beq.n	8002a62 <HAL_I2C_Master_Receive+0x186>
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d130      	bne.n	8002a62 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002a00:	697b      	ldr	r3, [r7, #20]
 8002a02:	9300      	str	r3, [sp, #0]
 8002a04:	6a3b      	ldr	r3, [r7, #32]
 8002a06:	2200      	movs	r2, #0
 8002a08:	2180      	movs	r1, #128	; 0x80
 8002a0a:	68f8      	ldr	r0, [r7, #12]
 8002a0c:	f000 f880 	bl	8002b10 <I2C_WaitOnFlagUntilTimeout>
 8002a10:	4603      	mov	r3, r0
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d001      	beq.n	8002a1a <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8002a16:	2301      	movs	r3, #1
 8002a18:	e04d      	b.n	8002ab6 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a1e:	b29b      	uxth	r3, r3
 8002a20:	2bff      	cmp	r3, #255	; 0xff
 8002a22:	d90e      	bls.n	8002a42 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	22ff      	movs	r2, #255	; 0xff
 8002a28:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a2e:	b2da      	uxtb	r2, r3
 8002a30:	8979      	ldrh	r1, [r7, #10]
 8002a32:	2300      	movs	r3, #0
 8002a34:	9300      	str	r3, [sp, #0]
 8002a36:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002a3a:	68f8      	ldr	r0, [r7, #12]
 8002a3c:	f000 f9f6 	bl	8002e2c <I2C_TransferConfig>
 8002a40:	e00f      	b.n	8002a62 <HAL_I2C_Master_Receive+0x186>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a46:	b29a      	uxth	r2, r3
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a50:	b2da      	uxtb	r2, r3
 8002a52:	8979      	ldrh	r1, [r7, #10]
 8002a54:	2300      	movs	r3, #0
 8002a56:	9300      	str	r3, [sp, #0]
 8002a58:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002a5c:	68f8      	ldr	r0, [r7, #12]
 8002a5e:	f000 f9e5 	bl	8002e2c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a66:	b29b      	uxth	r3, r3
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d19d      	bne.n	80029a8 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002a6c:	697a      	ldr	r2, [r7, #20]
 8002a6e:	6a39      	ldr	r1, [r7, #32]
 8002a70:	68f8      	ldr	r0, [r7, #12]
 8002a72:	f000 f8cd 	bl	8002c10 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002a76:	4603      	mov	r3, r0
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d001      	beq.n	8002a80 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8002a7c:	2301      	movs	r3, #1
 8002a7e:	e01a      	b.n	8002ab6 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	2220      	movs	r2, #32
 8002a86:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	6859      	ldr	r1, [r3, #4]
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	681a      	ldr	r2, [r3, #0]
 8002a92:	4b0c      	ldr	r3, [pc, #48]	; (8002ac4 <HAL_I2C_Master_Receive+0x1e8>)
 8002a94:	400b      	ands	r3, r1
 8002a96:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	2220      	movs	r2, #32
 8002a9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	2200      	movs	r2, #0
 8002aa4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	2200      	movs	r2, #0
 8002aac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002ab0:	2300      	movs	r3, #0
 8002ab2:	e000      	b.n	8002ab6 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8002ab4:	2302      	movs	r3, #2
  }
}
 8002ab6:	4618      	mov	r0, r3
 8002ab8:	3718      	adds	r7, #24
 8002aba:	46bd      	mov	sp, r7
 8002abc:	bd80      	pop	{r7, pc}
 8002abe:	bf00      	nop
 8002ac0:	80002400 	.word	0x80002400
 8002ac4:	fe00e800 	.word	0xfe00e800

08002ac8 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002ac8:	b480      	push	{r7}
 8002aca:	b083      	sub	sp, #12
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	699b      	ldr	r3, [r3, #24]
 8002ad6:	f003 0302 	and.w	r3, r3, #2
 8002ada:	2b02      	cmp	r3, #2
 8002adc:	d103      	bne.n	8002ae6 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	699b      	ldr	r3, [r3, #24]
 8002aec:	f003 0301 	and.w	r3, r3, #1
 8002af0:	2b01      	cmp	r3, #1
 8002af2:	d007      	beq.n	8002b04 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	699a      	ldr	r2, [r3, #24]
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f042 0201 	orr.w	r2, r2, #1
 8002b02:	619a      	str	r2, [r3, #24]
  }
}
 8002b04:	bf00      	nop
 8002b06:	370c      	adds	r7, #12
 8002b08:	46bd      	mov	sp, r7
 8002b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b0e:	4770      	bx	lr

08002b10 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002b10:	b580      	push	{r7, lr}
 8002b12:	b084      	sub	sp, #16
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	60f8      	str	r0, [r7, #12]
 8002b18:	60b9      	str	r1, [r7, #8]
 8002b1a:	603b      	str	r3, [r7, #0]
 8002b1c:	4613      	mov	r3, r2
 8002b1e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002b20:	e022      	b.n	8002b68 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002b22:	683b      	ldr	r3, [r7, #0]
 8002b24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b28:	d01e      	beq.n	8002b68 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b2a:	f7ff faad 	bl	8002088 <HAL_GetTick>
 8002b2e:	4602      	mov	r2, r0
 8002b30:	69bb      	ldr	r3, [r7, #24]
 8002b32:	1ad3      	subs	r3, r2, r3
 8002b34:	683a      	ldr	r2, [r7, #0]
 8002b36:	429a      	cmp	r2, r3
 8002b38:	d302      	bcc.n	8002b40 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002b3a:	683b      	ldr	r3, [r7, #0]
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d113      	bne.n	8002b68 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b44:	f043 0220 	orr.w	r2, r3, #32
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	2220      	movs	r2, #32
 8002b50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	2200      	movs	r2, #0
 8002b58:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	2200      	movs	r2, #0
 8002b60:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8002b64:	2301      	movs	r3, #1
 8002b66:	e00f      	b.n	8002b88 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	699a      	ldr	r2, [r3, #24]
 8002b6e:	68bb      	ldr	r3, [r7, #8]
 8002b70:	4013      	ands	r3, r2
 8002b72:	68ba      	ldr	r2, [r7, #8]
 8002b74:	429a      	cmp	r2, r3
 8002b76:	bf0c      	ite	eq
 8002b78:	2301      	moveq	r3, #1
 8002b7a:	2300      	movne	r3, #0
 8002b7c:	b2db      	uxtb	r3, r3
 8002b7e:	461a      	mov	r2, r3
 8002b80:	79fb      	ldrb	r3, [r7, #7]
 8002b82:	429a      	cmp	r2, r3
 8002b84:	d0cd      	beq.n	8002b22 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002b86:	2300      	movs	r3, #0
}
 8002b88:	4618      	mov	r0, r3
 8002b8a:	3710      	adds	r7, #16
 8002b8c:	46bd      	mov	sp, r7
 8002b8e:	bd80      	pop	{r7, pc}

08002b90 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002b90:	b580      	push	{r7, lr}
 8002b92:	b084      	sub	sp, #16
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	60f8      	str	r0, [r7, #12]
 8002b98:	60b9      	str	r1, [r7, #8]
 8002b9a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002b9c:	e02c      	b.n	8002bf8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8002b9e:	687a      	ldr	r2, [r7, #4]
 8002ba0:	68b9      	ldr	r1, [r7, #8]
 8002ba2:	68f8      	ldr	r0, [r7, #12]
 8002ba4:	f000 f8dc 	bl	8002d60 <I2C_IsAcknowledgeFailed>
 8002ba8:	4603      	mov	r3, r0
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d001      	beq.n	8002bb2 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002bae:	2301      	movs	r3, #1
 8002bb0:	e02a      	b.n	8002c08 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002bb2:	68bb      	ldr	r3, [r7, #8]
 8002bb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bb8:	d01e      	beq.n	8002bf8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002bba:	f7ff fa65 	bl	8002088 <HAL_GetTick>
 8002bbe:	4602      	mov	r2, r0
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	1ad3      	subs	r3, r2, r3
 8002bc4:	68ba      	ldr	r2, [r7, #8]
 8002bc6:	429a      	cmp	r2, r3
 8002bc8:	d302      	bcc.n	8002bd0 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002bca:	68bb      	ldr	r3, [r7, #8]
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d113      	bne.n	8002bf8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bd4:	f043 0220 	orr.w	r2, r3, #32
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	2220      	movs	r2, #32
 8002be0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	2200      	movs	r2, #0
 8002be8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	2200      	movs	r2, #0
 8002bf0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002bf4:	2301      	movs	r3, #1
 8002bf6:	e007      	b.n	8002c08 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	699b      	ldr	r3, [r3, #24]
 8002bfe:	f003 0302 	and.w	r3, r3, #2
 8002c02:	2b02      	cmp	r3, #2
 8002c04:	d1cb      	bne.n	8002b9e <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002c06:	2300      	movs	r3, #0
}
 8002c08:	4618      	mov	r0, r3
 8002c0a:	3710      	adds	r7, #16
 8002c0c:	46bd      	mov	sp, r7
 8002c0e:	bd80      	pop	{r7, pc}

08002c10 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002c10:	b580      	push	{r7, lr}
 8002c12:	b084      	sub	sp, #16
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	60f8      	str	r0, [r7, #12]
 8002c18:	60b9      	str	r1, [r7, #8]
 8002c1a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002c1c:	e028      	b.n	8002c70 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8002c1e:	687a      	ldr	r2, [r7, #4]
 8002c20:	68b9      	ldr	r1, [r7, #8]
 8002c22:	68f8      	ldr	r0, [r7, #12]
 8002c24:	f000 f89c 	bl	8002d60 <I2C_IsAcknowledgeFailed>
 8002c28:	4603      	mov	r3, r0
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d001      	beq.n	8002c32 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002c2e:	2301      	movs	r3, #1
 8002c30:	e026      	b.n	8002c80 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c32:	f7ff fa29 	bl	8002088 <HAL_GetTick>
 8002c36:	4602      	mov	r2, r0
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	1ad3      	subs	r3, r2, r3
 8002c3c:	68ba      	ldr	r2, [r7, #8]
 8002c3e:	429a      	cmp	r2, r3
 8002c40:	d302      	bcc.n	8002c48 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002c42:	68bb      	ldr	r3, [r7, #8]
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d113      	bne.n	8002c70 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c4c:	f043 0220 	orr.w	r2, r3, #32
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	2220      	movs	r2, #32
 8002c58:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	2200      	movs	r2, #0
 8002c60:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	2200      	movs	r2, #0
 8002c68:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8002c6c:	2301      	movs	r3, #1
 8002c6e:	e007      	b.n	8002c80 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	699b      	ldr	r3, [r3, #24]
 8002c76:	f003 0320 	and.w	r3, r3, #32
 8002c7a:	2b20      	cmp	r3, #32
 8002c7c:	d1cf      	bne.n	8002c1e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002c7e:	2300      	movs	r3, #0
}
 8002c80:	4618      	mov	r0, r3
 8002c82:	3710      	adds	r7, #16
 8002c84:	46bd      	mov	sp, r7
 8002c86:	bd80      	pop	{r7, pc}

08002c88 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002c88:	b580      	push	{r7, lr}
 8002c8a:	b084      	sub	sp, #16
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	60f8      	str	r0, [r7, #12]
 8002c90:	60b9      	str	r1, [r7, #8]
 8002c92:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002c94:	e055      	b.n	8002d42 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8002c96:	687a      	ldr	r2, [r7, #4]
 8002c98:	68b9      	ldr	r1, [r7, #8]
 8002c9a:	68f8      	ldr	r0, [r7, #12]
 8002c9c:	f000 f860 	bl	8002d60 <I2C_IsAcknowledgeFailed>
 8002ca0:	4603      	mov	r3, r0
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d001      	beq.n	8002caa <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002ca6:	2301      	movs	r3, #1
 8002ca8:	e053      	b.n	8002d52 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	699b      	ldr	r3, [r3, #24]
 8002cb0:	f003 0320 	and.w	r3, r3, #32
 8002cb4:	2b20      	cmp	r3, #32
 8002cb6:	d129      	bne.n	8002d0c <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	699b      	ldr	r3, [r3, #24]
 8002cbe:	f003 0304 	and.w	r3, r3, #4
 8002cc2:	2b04      	cmp	r3, #4
 8002cc4:	d105      	bne.n	8002cd2 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d001      	beq.n	8002cd2 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8002cce:	2300      	movs	r3, #0
 8002cd0:	e03f      	b.n	8002d52 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	2220      	movs	r2, #32
 8002cd8:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	6859      	ldr	r1, [r3, #4]
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	681a      	ldr	r2, [r3, #0]
 8002ce4:	4b1d      	ldr	r3, [pc, #116]	; (8002d5c <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 8002ce6:	400b      	ands	r3, r1
 8002ce8:	6053      	str	r3, [r2, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	2200      	movs	r2, #0
 8002cee:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	2220      	movs	r2, #32
 8002cf4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	2200      	movs	r2, #0
 8002cfc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	2200      	movs	r2, #0
 8002d04:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002d08:	2301      	movs	r3, #1
 8002d0a:	e022      	b.n	8002d52 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d0c:	f7ff f9bc 	bl	8002088 <HAL_GetTick>
 8002d10:	4602      	mov	r2, r0
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	1ad3      	subs	r3, r2, r3
 8002d16:	68ba      	ldr	r2, [r7, #8]
 8002d18:	429a      	cmp	r2, r3
 8002d1a:	d302      	bcc.n	8002d22 <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 8002d1c:	68bb      	ldr	r3, [r7, #8]
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d10f      	bne.n	8002d42 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d26:	f043 0220 	orr.w	r2, r3, #32
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	2220      	movs	r2, #32
 8002d32:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	2200      	movs	r2, #0
 8002d3a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8002d3e:	2301      	movs	r3, #1
 8002d40:	e007      	b.n	8002d52 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	699b      	ldr	r3, [r3, #24]
 8002d48:	f003 0304 	and.w	r3, r3, #4
 8002d4c:	2b04      	cmp	r3, #4
 8002d4e:	d1a2      	bne.n	8002c96 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002d50:	2300      	movs	r3, #0
}
 8002d52:	4618      	mov	r0, r3
 8002d54:	3710      	adds	r7, #16
 8002d56:	46bd      	mov	sp, r7
 8002d58:	bd80      	pop	{r7, pc}
 8002d5a:	bf00      	nop
 8002d5c:	fe00e800 	.word	0xfe00e800

08002d60 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002d60:	b580      	push	{r7, lr}
 8002d62:	b084      	sub	sp, #16
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	60f8      	str	r0, [r7, #12]
 8002d68:	60b9      	str	r1, [r7, #8]
 8002d6a:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	699b      	ldr	r3, [r3, #24]
 8002d72:	f003 0310 	and.w	r3, r3, #16
 8002d76:	2b10      	cmp	r3, #16
 8002d78:	d151      	bne.n	8002e1e <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002d7a:	e022      	b.n	8002dc2 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002d7c:	68bb      	ldr	r3, [r7, #8]
 8002d7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d82:	d01e      	beq.n	8002dc2 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d84:	f7ff f980 	bl	8002088 <HAL_GetTick>
 8002d88:	4602      	mov	r2, r0
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	1ad3      	subs	r3, r2, r3
 8002d8e:	68ba      	ldr	r2, [r7, #8]
 8002d90:	429a      	cmp	r2, r3
 8002d92:	d302      	bcc.n	8002d9a <I2C_IsAcknowledgeFailed+0x3a>
 8002d94:	68bb      	ldr	r3, [r7, #8]
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d113      	bne.n	8002dc2 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d9e:	f043 0220 	orr.w	r2, r3, #32
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	2220      	movs	r2, #32
 8002daa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	2200      	movs	r2, #0
 8002db2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	2200      	movs	r2, #0
 8002dba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8002dbe:	2301      	movs	r3, #1
 8002dc0:	e02e      	b.n	8002e20 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	699b      	ldr	r3, [r3, #24]
 8002dc8:	f003 0320 	and.w	r3, r3, #32
 8002dcc:	2b20      	cmp	r3, #32
 8002dce:	d1d5      	bne.n	8002d7c <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	2210      	movs	r2, #16
 8002dd6:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	2220      	movs	r2, #32
 8002dde:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002de0:	68f8      	ldr	r0, [r7, #12]
 8002de2:	f7ff fe71 	bl	8002ac8 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	6859      	ldr	r1, [r3, #4]
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	681a      	ldr	r2, [r3, #0]
 8002df0:	4b0d      	ldr	r3, [pc, #52]	; (8002e28 <I2C_IsAcknowledgeFailed+0xc8>)
 8002df2:	400b      	ands	r3, r1
 8002df4:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dfa:	f043 0204 	orr.w	r2, r3, #4
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	2220      	movs	r2, #32
 8002e06:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	2200      	movs	r2, #0
 8002e0e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	2200      	movs	r2, #0
 8002e16:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8002e1a:	2301      	movs	r3, #1
 8002e1c:	e000      	b.n	8002e20 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8002e1e:	2300      	movs	r3, #0
}
 8002e20:	4618      	mov	r0, r3
 8002e22:	3710      	adds	r7, #16
 8002e24:	46bd      	mov	sp, r7
 8002e26:	bd80      	pop	{r7, pc}
 8002e28:	fe00e800 	.word	0xfe00e800

08002e2c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 8002e2c:	b480      	push	{r7}
 8002e2e:	b085      	sub	sp, #20
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	60f8      	str	r0, [r7, #12]
 8002e34:	607b      	str	r3, [r7, #4]
 8002e36:	460b      	mov	r3, r1
 8002e38:	817b      	strh	r3, [r7, #10]
 8002e3a:	4613      	mov	r3, r2
 8002e3c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	685a      	ldr	r2, [r3, #4]
 8002e44:	69bb      	ldr	r3, [r7, #24]
 8002e46:	0d5b      	lsrs	r3, r3, #21
 8002e48:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8002e4c:	4b0d      	ldr	r3, [pc, #52]	; (8002e84 <I2C_TransferConfig+0x58>)
 8002e4e:	430b      	orrs	r3, r1
 8002e50:	43db      	mvns	r3, r3
 8002e52:	ea02 0103 	and.w	r1, r2, r3
 8002e56:	897b      	ldrh	r3, [r7, #10]
 8002e58:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002e5c:	7a7b      	ldrb	r3, [r7, #9]
 8002e5e:	041b      	lsls	r3, r3, #16
 8002e60:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8002e64:	431a      	orrs	r2, r3
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	431a      	orrs	r2, r3
 8002e6a:	69bb      	ldr	r3, [r7, #24]
 8002e6c:	431a      	orrs	r2, r3
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	430a      	orrs	r2, r1
 8002e74:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8002e76:	bf00      	nop
 8002e78:	3714      	adds	r7, #20
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e80:	4770      	bx	lr
 8002e82:	bf00      	nop
 8002e84:	03ff63ff 	.word	0x03ff63ff

08002e88 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002e88:	b480      	push	{r7}
 8002e8a:	b083      	sub	sp, #12
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	6078      	str	r0, [r7, #4]
 8002e90:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002e98:	b2db      	uxtb	r3, r3
 8002e9a:	2b20      	cmp	r3, #32
 8002e9c:	d138      	bne.n	8002f10 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002ea4:	2b01      	cmp	r3, #1
 8002ea6:	d101      	bne.n	8002eac <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002ea8:	2302      	movs	r3, #2
 8002eaa:	e032      	b.n	8002f12 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	2201      	movs	r2, #1
 8002eb0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	2224      	movs	r2, #36	; 0x24
 8002eb8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	681a      	ldr	r2, [r3, #0]
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f022 0201 	bic.w	r2, r2, #1
 8002eca:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	681a      	ldr	r2, [r3, #0]
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002eda:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	6819      	ldr	r1, [r3, #0]
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	683a      	ldr	r2, [r7, #0]
 8002ee8:	430a      	orrs	r2, r1
 8002eea:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	681a      	ldr	r2, [r3, #0]
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f042 0201 	orr.w	r2, r2, #1
 8002efa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	2220      	movs	r2, #32
 8002f00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	2200      	movs	r2, #0
 8002f08:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002f0c:	2300      	movs	r3, #0
 8002f0e:	e000      	b.n	8002f12 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002f10:	2302      	movs	r3, #2
  }
}
 8002f12:	4618      	mov	r0, r3
 8002f14:	370c      	adds	r7, #12
 8002f16:	46bd      	mov	sp, r7
 8002f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f1c:	4770      	bx	lr

08002f1e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002f1e:	b480      	push	{r7}
 8002f20:	b085      	sub	sp, #20
 8002f22:	af00      	add	r7, sp, #0
 8002f24:	6078      	str	r0, [r7, #4]
 8002f26:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002f2e:	b2db      	uxtb	r3, r3
 8002f30:	2b20      	cmp	r3, #32
 8002f32:	d139      	bne.n	8002fa8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002f3a:	2b01      	cmp	r3, #1
 8002f3c:	d101      	bne.n	8002f42 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002f3e:	2302      	movs	r3, #2
 8002f40:	e033      	b.n	8002faa <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	2201      	movs	r2, #1
 8002f46:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	2224      	movs	r2, #36	; 0x24
 8002f4e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	681a      	ldr	r2, [r3, #0]
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	f022 0201 	bic.w	r2, r2, #1
 8002f60:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002f70:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002f72:	683b      	ldr	r3, [r7, #0]
 8002f74:	021b      	lsls	r3, r3, #8
 8002f76:	68fa      	ldr	r2, [r7, #12]
 8002f78:	4313      	orrs	r3, r2
 8002f7a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	68fa      	ldr	r2, [r7, #12]
 8002f82:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	681a      	ldr	r2, [r3, #0]
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f042 0201 	orr.w	r2, r2, #1
 8002f92:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	2220      	movs	r2, #32
 8002f98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	2200      	movs	r2, #0
 8002fa0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002fa4:	2300      	movs	r3, #0
 8002fa6:	e000      	b.n	8002faa <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002fa8:	2302      	movs	r3, #2
  }
}
 8002faa:	4618      	mov	r0, r3
 8002fac:	3714      	adds	r7, #20
 8002fae:	46bd      	mov	sp, r7
 8002fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb4:	4770      	bx	lr
	...

08002fb8 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002fb8:	b480      	push	{r7}
 8002fba:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002fbc:	4b05      	ldr	r3, [pc, #20]	; (8002fd4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	4a04      	ldr	r2, [pc, #16]	; (8002fd4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002fc2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002fc6:	6013      	str	r3, [r2, #0]
}
 8002fc8:	bf00      	nop
 8002fca:	46bd      	mov	sp, r7
 8002fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd0:	4770      	bx	lr
 8002fd2:	bf00      	nop
 8002fd4:	58000400 	.word	0x58000400

08002fd8 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */  
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002fd8:	b480      	push	{r7}
 8002fda:	af00      	add	r7, sp, #0
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002fdc:	4b04      	ldr	r3, [pc, #16]	; (8002ff0 <HAL_PWREx_GetVoltageRange+0x18>)
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8002fe4:	4618      	mov	r0, r3
 8002fe6:	46bd      	mov	sp, r7
 8002fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fec:	4770      	bx	lr
 8002fee:	bf00      	nop
 8002ff0:	58000400 	.word	0x58000400

08002ff4 <LL_RCC_HSE_IsEnabledDiv2>:
  * @brief  Get HSE sysclk and pll prescaler
  * @rmtoll CR           HSEPRE        LL_RCC_HSE_IsEnabledDiv2
  * @retval None
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsEnabledDiv2(void)
{
 8002ff4:	b480      	push	{r7}
 8002ff6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8002ff8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003002:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003006:	d101      	bne.n	800300c <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8003008:	2301      	movs	r3, #1
 800300a:	e000      	b.n	800300e <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 800300c:	2300      	movs	r3, #0
}
 800300e:	4618      	mov	r0, r3
 8003010:	46bd      	mov	sp, r7
 8003012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003016:	4770      	bx	lr

08003018 <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 8003018:	b480      	push	{r7}
 800301a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 800301c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003026:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800302a:	6013      	str	r3, [r2, #0]
}
 800302c:	bf00      	nop
 800302e:	46bd      	mov	sp, r7
 8003030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003034:	4770      	bx	lr

08003036 <LL_RCC_HSE_Disable>:
  * @brief  Disable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Disable(void)
{
 8003036:	b480      	push	{r7}
 8003038:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 800303a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003044:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003048:	6013      	str	r3, [r2, #0]
}
 800304a:	bf00      	nop
 800304c:	46bd      	mov	sp, r7
 800304e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003052:	4770      	bx	lr

08003054 <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 8003054:	b480      	push	{r7}
 8003056:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8003058:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003062:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003066:	d101      	bne.n	800306c <LL_RCC_HSE_IsReady+0x18>
 8003068:	2301      	movs	r3, #1
 800306a:	e000      	b.n	800306e <LL_RCC_HSE_IsReady+0x1a>
 800306c:	2300      	movs	r3, #0
}
 800306e:	4618      	mov	r0, r3
 8003070:	46bd      	mov	sp, r7
 8003072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003076:	4770      	bx	lr

08003078 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 8003078:	b480      	push	{r7}
 800307a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 800307c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003086:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800308a:	6013      	str	r3, [r2, #0]
}
 800308c:	bf00      	nop
 800308e:	46bd      	mov	sp, r7
 8003090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003094:	4770      	bx	lr

08003096 <LL_RCC_HSI_Disable>:
  * @brief  Disable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Disable(void)
{
 8003096:	b480      	push	{r7}
 8003098:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 800309a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80030a4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80030a8:	6013      	str	r3, [r2, #0]
}
 80030aa:	bf00      	nop
 80030ac:	46bd      	mov	sp, r7
 80030ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b2:	4770      	bx	lr

080030b4 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 80030b4:	b480      	push	{r7}
 80030b6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 80030b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80030c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80030c6:	d101      	bne.n	80030cc <LL_RCC_HSI_IsReady+0x18>
 80030c8:	2301      	movs	r3, #1
 80030ca:	e000      	b.n	80030ce <LL_RCC_HSI_IsReady+0x1a>
 80030cc:	2300      	movs	r3, #0
}
 80030ce:	4618      	mov	r0, r3
 80030d0:	46bd      	mov	sp, r7
 80030d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d6:	4770      	bx	lr

080030d8 <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll ICSCR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 127
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 80030d8:	b480      	push	{r7}
 80030da:	b083      	sub	sp, #12
 80030dc:	af00      	add	r7, sp, #0
 80030de:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 80030e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80030e4:	685b      	ldr	r3, [r3, #4]
 80030e6:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	061b      	lsls	r3, r3, #24
 80030ee:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80030f2:	4313      	orrs	r3, r2
 80030f4:	604b      	str	r3, [r1, #4]
}
 80030f6:	bf00      	nop
 80030f8:	370c      	adds	r7, #12
 80030fa:	46bd      	mov	sp, r7
 80030fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003100:	4770      	bx	lr

08003102 <LL_RCC_HSI48_Enable>:
  * @brief  Enable HSI48
  * @rmtoll CRRCR          HSI48ON       LL_RCC_HSI48_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI48_Enable(void)
{
 8003102:	b480      	push	{r7}
 8003104:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8003106:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800310a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800310e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003112:	f043 0301 	orr.w	r3, r3, #1
 8003116:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 800311a:	bf00      	nop
 800311c:	46bd      	mov	sp, r7
 800311e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003122:	4770      	bx	lr

08003124 <LL_RCC_HSI48_Disable>:
  * @brief  Disable HSI48
  * @rmtoll CRRCR          HSI48ON       LL_RCC_HSI48_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI48_Disable(void)
{
 8003124:	b480      	push	{r7}
 8003126:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8003128:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800312c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003130:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003134:	f023 0301 	bic.w	r3, r3, #1
 8003138:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 800313c:	bf00      	nop
 800313e:	46bd      	mov	sp, r7
 8003140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003144:	4770      	bx	lr

08003146 <LL_RCC_HSI48_IsReady>:
  * @brief  Check if HSI48 oscillator Ready
  * @rmtoll CRRCR          HSI48RDY      LL_RCC_HSI48_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI48_IsReady(void)
{
 8003146:	b480      	push	{r7}
 8003148:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 800314a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800314e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003152:	f003 0302 	and.w	r3, r3, #2
 8003156:	2b02      	cmp	r3, #2
 8003158:	d101      	bne.n	800315e <LL_RCC_HSI48_IsReady+0x18>
 800315a:	2301      	movs	r3, #1
 800315c:	e000      	b.n	8003160 <LL_RCC_HSI48_IsReady+0x1a>
 800315e:	2300      	movs	r3, #0
}
 8003160:	4618      	mov	r0, r3
 8003162:	46bd      	mov	sp, r7
 8003164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003168:	4770      	bx	lr

0800316a <LL_RCC_LSE_Enable>:
  * @brief  Enable  Low Speed External (LSE) crystal.
  * @rmtoll BDCR         LSEON         LL_RCC_LSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_Enable(void)
{
 800316a:	b480      	push	{r7}
 800316c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800316e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003172:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003176:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800317a:	f043 0301 	orr.w	r3, r3, #1
 800317e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8003182:	bf00      	nop
 8003184:	46bd      	mov	sp, r7
 8003186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800318a:	4770      	bx	lr

0800318c <LL_RCC_LSE_Disable>:
  * @brief  Disable  Low Speed External (LSE) crystal.
  * @rmtoll BDCR         LSEON         LL_RCC_LSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_Disable(void)
{
 800318c:	b480      	push	{r7}
 800318e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003190:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003194:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003198:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800319c:	f023 0301 	bic.w	r3, r3, #1
 80031a0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80031a4:	bf00      	nop
 80031a6:	46bd      	mov	sp, r7
 80031a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ac:	4770      	bx	lr

080031ae <LL_RCC_LSE_EnableBypass>:
  * @brief  Enable external clock source (LSE bypass).
  * @rmtoll BDCR         LSEBYP        LL_RCC_LSE_EnableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_EnableBypass(void)
{
 80031ae:	b480      	push	{r7}
 80031b0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80031b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80031b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031ba:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80031be:	f043 0304 	orr.w	r3, r3, #4
 80031c2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80031c6:	bf00      	nop
 80031c8:	46bd      	mov	sp, r7
 80031ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ce:	4770      	bx	lr

080031d0 <LL_RCC_LSE_DisableBypass>:
  * @brief  Disable external clock source (LSE bypass).
  * @rmtoll BDCR         LSEBYP        LL_RCC_LSE_DisableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_DisableBypass(void)
{
 80031d0:	b480      	push	{r7}
 80031d2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80031d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80031d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031dc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80031e0:	f023 0304 	bic.w	r3, r3, #4
 80031e4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80031e8:	bf00      	nop
 80031ea:	46bd      	mov	sp, r7
 80031ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f0:	4770      	bx	lr

080031f2 <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 80031f2:	b480      	push	{r7}
 80031f4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80031f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80031fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031fe:	f003 0302 	and.w	r3, r3, #2
 8003202:	2b02      	cmp	r3, #2
 8003204:	d101      	bne.n	800320a <LL_RCC_LSE_IsReady+0x18>
 8003206:	2301      	movs	r3, #1
 8003208:	e000      	b.n	800320c <LL_RCC_LSE_IsReady+0x1a>
 800320a:	2300      	movs	r3, #0
}
 800320c:	4618      	mov	r0, r3
 800320e:	46bd      	mov	sp, r7
 8003210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003214:	4770      	bx	lr

08003216 <LL_RCC_LSI1_Enable>:
  * @brief  Enable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Enable(void)
{
 8003216:	b480      	push	{r7}
 8003218:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 800321a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800321e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003222:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003226:	f043 0301 	orr.w	r3, r3, #1
 800322a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 800322e:	bf00      	nop
 8003230:	46bd      	mov	sp, r7
 8003232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003236:	4770      	bx	lr

08003238 <LL_RCC_LSI1_Disable>:
  * @brief  Disable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Disable(void)
{
 8003238:	b480      	push	{r7}
 800323a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 800323c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003240:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003244:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003248:	f023 0301 	bic.w	r3, r3, #1
 800324c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8003250:	bf00      	nop
 8003252:	46bd      	mov	sp, r7
 8003254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003258:	4770      	bx	lr

0800325a <LL_RCC_LSI1_IsReady>:
  * @brief  Check if LSI1 is Ready
  * @rmtoll CSR          LSI1RDY        LL_RCC_LSI1_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI1_IsReady(void)
{
 800325a:	b480      	push	{r7}
 800325c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 800325e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003262:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003266:	f003 0302 	and.w	r3, r3, #2
 800326a:	2b02      	cmp	r3, #2
 800326c:	d101      	bne.n	8003272 <LL_RCC_LSI1_IsReady+0x18>
 800326e:	2301      	movs	r3, #1
 8003270:	e000      	b.n	8003274 <LL_RCC_LSI1_IsReady+0x1a>
 8003272:	2300      	movs	r3, #0
}
 8003274:	4618      	mov	r0, r3
 8003276:	46bd      	mov	sp, r7
 8003278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800327c:	4770      	bx	lr

0800327e <LL_RCC_LSI2_Enable>:
  * @brief  Enable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Enable(void)
{
 800327e:	b480      	push	{r7}
 8003280:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8003282:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003286:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800328a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800328e:	f043 0304 	orr.w	r3, r3, #4
 8003292:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8003296:	bf00      	nop
 8003298:	46bd      	mov	sp, r7
 800329a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800329e:	4770      	bx	lr

080032a0 <LL_RCC_LSI2_Disable>:
  * @brief  Disable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Disable(void)
{
 80032a0:	b480      	push	{r7}
 80032a2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 80032a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80032a8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80032ac:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80032b0:	f023 0304 	bic.w	r3, r3, #4
 80032b4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80032b8:	bf00      	nop
 80032ba:	46bd      	mov	sp, r7
 80032bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c0:	4770      	bx	lr

080032c2 <LL_RCC_LSI2_IsReady>:
  * @brief  Check if LSI2 is Ready
  * @rmtoll CSR          LSI2RDY        LL_RCC_LSI2_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI2_IsReady(void)
{
 80032c2:	b480      	push	{r7}
 80032c4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 80032c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80032ca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80032ce:	f003 0308 	and.w	r3, r3, #8
 80032d2:	2b08      	cmp	r3, #8
 80032d4:	d101      	bne.n	80032da <LL_RCC_LSI2_IsReady+0x18>
 80032d6:	2301      	movs	r3, #1
 80032d8:	e000      	b.n	80032dc <LL_RCC_LSI2_IsReady+0x1a>
 80032da:	2300      	movs	r3, #0
}
 80032dc:	4618      	mov	r0, r3
 80032de:	46bd      	mov	sp, r7
 80032e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e4:	4770      	bx	lr

080032e6 <LL_RCC_LSI2_SetTrimming>:
  * @rmtoll CSR        LSI2TRIM       LL_RCC_LSI2_SetTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 15
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_SetTrimming(uint32_t Value)
{
 80032e6:	b480      	push	{r7}
 80032e8:	b083      	sub	sp, #12
 80032ea:	af00      	add	r7, sp, #0
 80032ec:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 80032ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80032f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80032f6:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	021b      	lsls	r3, r3, #8
 80032fe:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003302:	4313      	orrs	r3, r2
 8003304:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8003308:	bf00      	nop
 800330a:	370c      	adds	r7, #12
 800330c:	46bd      	mov	sp, r7
 800330e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003312:	4770      	bx	lr

08003314 <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 8003314:	b480      	push	{r7}
 8003316:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8003318:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003322:	f043 0301 	orr.w	r3, r3, #1
 8003326:	6013      	str	r3, [r2, #0]
}
 8003328:	bf00      	nop
 800332a:	46bd      	mov	sp, r7
 800332c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003330:	4770      	bx	lr

08003332 <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 8003332:	b480      	push	{r7}
 8003334:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8003336:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003340:	f023 0301 	bic.w	r3, r3, #1
 8003344:	6013      	str	r3, [r2, #0]
}
 8003346:	bf00      	nop
 8003348:	46bd      	mov	sp, r7
 800334a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800334e:	4770      	bx	lr

08003350 <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 8003350:	b480      	push	{r7}
 8003352:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8003354:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f003 0302 	and.w	r3, r3, #2
 800335e:	2b02      	cmp	r3, #2
 8003360:	d101      	bne.n	8003366 <LL_RCC_MSI_IsReady+0x16>
 8003362:	2301      	movs	r3, #1
 8003364:	e000      	b.n	8003368 <LL_RCC_MSI_IsReady+0x18>
 8003366:	2300      	movs	r3, #0
}
 8003368:	4618      	mov	r0, r3
 800336a:	46bd      	mov	sp, r7
 800336c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003370:	4770      	bx	lr

08003372 <LL_RCC_MSI_SetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetRange(uint32_t Range)
{
 8003372:	b480      	push	{r7}
 8003374:	b083      	sub	sp, #12
 8003376:	af00      	add	r7, sp, #0
 8003378:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 800337a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003384:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	4313      	orrs	r3, r2
 800338c:	600b      	str	r3, [r1, #0]
}
 800338e:	bf00      	nop
 8003390:	370c      	adds	r7, #12
 8003392:	46bd      	mov	sp, r7
 8003394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003398:	4770      	bx	lr

0800339a <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 800339a:	b480      	push	{r7}
 800339c:	b083      	sub	sp, #12
 800339e:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 80033a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80033aa:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	2bb0      	cmp	r3, #176	; 0xb0
 80033b0:	d901      	bls.n	80033b6 <LL_RCC_MSI_GetRange+0x1c>
  {
    msiRange = LL_RCC_MSIRANGE_11;
 80033b2:	23b0      	movs	r3, #176	; 0xb0
 80033b4:	607b      	str	r3, [r7, #4]
  }
  return msiRange;
 80033b6:	687b      	ldr	r3, [r7, #4]
}
 80033b8:	4618      	mov	r0, r3
 80033ba:	370c      	adds	r7, #12
 80033bc:	46bd      	mov	sp, r7
 80033be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c2:	4770      	bx	lr

080033c4 <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 80033c4:	b480      	push	{r7}
 80033c6:	b083      	sub	sp, #12
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 80033cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80033d0:	685b      	ldr	r3, [r3, #4]
 80033d2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	021b      	lsls	r3, r3, #8
 80033da:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80033de:	4313      	orrs	r3, r2
 80033e0:	604b      	str	r3, [r1, #4]
}
 80033e2:	bf00      	nop
 80033e4:	370c      	adds	r7, #12
 80033e6:	46bd      	mov	sp, r7
 80033e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ec:	4770      	bx	lr

080033ee <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 80033ee:	b480      	push	{r7}
 80033f0:	b083      	sub	sp, #12
 80033f2:	af00      	add	r7, sp, #0
 80033f4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80033f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80033fa:	689b      	ldr	r3, [r3, #8]
 80033fc:	f023 0203 	bic.w	r2, r3, #3
 8003400:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	4313      	orrs	r3, r2
 8003408:	608b      	str	r3, [r1, #8]
}
 800340a:	bf00      	nop
 800340c:	370c      	adds	r7, #12
 800340e:	46bd      	mov	sp, r7
 8003410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003414:	4770      	bx	lr

08003416 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8003416:	b480      	push	{r7}
 8003418:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800341a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800341e:	689b      	ldr	r3, [r3, #8]
 8003420:	f003 030c 	and.w	r3, r3, #12
}
 8003424:	4618      	mov	r0, r3
 8003426:	46bd      	mov	sp, r7
 8003428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800342c:	4770      	bx	lr

0800342e <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 800342e:	b480      	push	{r7}
 8003430:	b083      	sub	sp, #12
 8003432:	af00      	add	r7, sp, #0
 8003434:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8003436:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800343a:	689b      	ldr	r3, [r3, #8]
 800343c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003440:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	4313      	orrs	r3, r2
 8003448:	608b      	str	r3, [r1, #8]
}
 800344a:	bf00      	nop
 800344c:	370c      	adds	r7, #12
 800344e:	46bd      	mov	sp, r7
 8003450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003454:	4770      	bx	lr

08003456 <LL_C2_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_C2_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8003456:	b480      	push	{r7}
 8003458:	b083      	sub	sp, #12
 800345a:	af00      	add	r7, sp, #0
 800345c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 800345e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003462:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8003466:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800346a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	4313      	orrs	r3, r2
 8003472:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8003476:	bf00      	nop
 8003478:	370c      	adds	r7, #12
 800347a:	46bd      	mov	sp, r7
 800347c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003480:	4770      	bx	lr

08003482 <LL_RCC_SetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB4Prescaler(uint32_t Prescaler)
{
 8003482:	b480      	push	{r7}
 8003484:	b083      	sub	sp, #12
 8003486:	af00      	add	r7, sp, #0
 8003488:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 800348a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800348e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8003492:	f023 020f 	bic.w	r2, r3, #15
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	091b      	lsrs	r3, r3, #4
 800349a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800349e:	4313      	orrs	r3, r2
 80034a0:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 80034a4:	bf00      	nop
 80034a6:	370c      	adds	r7, #12
 80034a8:	46bd      	mov	sp, r7
 80034aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ae:	4770      	bx	lr

080034b0 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 80034b0:	b480      	push	{r7}
 80034b2:	b083      	sub	sp, #12
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 80034b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80034bc:	689b      	ldr	r3, [r3, #8]
 80034be:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80034c2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	4313      	orrs	r3, r2
 80034ca:	608b      	str	r3, [r1, #8]
}
 80034cc:	bf00      	nop
 80034ce:	370c      	adds	r7, #12
 80034d0:	46bd      	mov	sp, r7
 80034d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d6:	4770      	bx	lr

080034d8 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 80034d8:	b480      	push	{r7}
 80034da:	b083      	sub	sp, #12
 80034dc:	af00      	add	r7, sp, #0
 80034de:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 80034e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80034e4:	689b      	ldr	r3, [r3, #8]
 80034e6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80034ea:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	4313      	orrs	r3, r2
 80034f2:	608b      	str	r3, [r1, #8]
}
 80034f4:	bf00      	nop
 80034f6:	370c      	adds	r7, #12
 80034f8:	46bd      	mov	sp, r7
 80034fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034fe:	4770      	bx	lr

08003500 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8003500:	b480      	push	{r7}
 8003502:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8003504:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003508:	689b      	ldr	r3, [r3, #8]
 800350a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 800350e:	4618      	mov	r0, r3
 8003510:	46bd      	mov	sp, r7
 8003512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003516:	4770      	bx	lr

08003518 <LL_RCC_GetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB4Prescaler(void)
{
 8003518:	b480      	push	{r7}
 800351a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 800351c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003520:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8003524:	011b      	lsls	r3, r3, #4
 8003526:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 800352a:	4618      	mov	r0, r3
 800352c:	46bd      	mov	sp, r7
 800352e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003532:	4770      	bx	lr

08003534 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8003534:	b480      	push	{r7}
 8003536:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8003538:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003542:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003546:	6013      	str	r3, [r2, #0]
}
 8003548:	bf00      	nop
 800354a:	46bd      	mov	sp, r7
 800354c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003550:	4770      	bx	lr

08003552 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8003552:	b480      	push	{r7}
 8003554:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8003556:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003560:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003564:	6013      	str	r3, [r2, #0]
}
 8003566:	bf00      	nop
 8003568:	46bd      	mov	sp, r7
 800356a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800356e:	4770      	bx	lr

08003570 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8003570:	b480      	push	{r7}
 8003572:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8003574:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800357e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003582:	d101      	bne.n	8003588 <LL_RCC_PLL_IsReady+0x18>
 8003584:	2301      	movs	r3, #1
 8003586:	e000      	b.n	800358a <LL_RCC_PLL_IsReady+0x1a>
 8003588:	2300      	movs	r3, #0
}
 800358a:	4618      	mov	r0, r3
 800358c:	46bd      	mov	sp, r7
 800358e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003592:	4770      	bx	lr

08003594 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8003594:	b480      	push	{r7}
 8003596:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8003598:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800359c:	68db      	ldr	r3, [r3, #12]
 800359e:	0a1b      	lsrs	r3, r3, #8
 80035a0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 80035a4:	4618      	mov	r0, r3
 80035a6:	46bd      	mov	sp, r7
 80035a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ac:	4770      	bx	lr

080035ae <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 80035ae:	b480      	push	{r7}
 80035b0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 80035b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80035b6:	68db      	ldr	r3, [r3, #12]
 80035b8:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 80035bc:	4618      	mov	r0, r3
 80035be:	46bd      	mov	sp, r7
 80035c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c4:	4770      	bx	lr

080035c6 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 80035c6:	b480      	push	{r7}
 80035c8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 80035ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80035ce:	68db      	ldr	r3, [r3, #12]
 80035d0:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 80035d4:	4618      	mov	r0, r3
 80035d6:	46bd      	mov	sp, r7
 80035d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035dc:	4770      	bx	lr

080035de <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 80035de:	b480      	push	{r7}
 80035e0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 80035e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80035e6:	68db      	ldr	r3, [r3, #12]
 80035e8:	f003 0303 	and.w	r3, r3, #3
}
 80035ec:	4618      	mov	r0, r3
 80035ee:	46bd      	mov	sp, r7
 80035f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f4:	4770      	bx	lr

080035f6 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 80035f6:	b480      	push	{r7}
 80035f8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 80035fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80035fe:	689b      	ldr	r3, [r3, #8]
 8003600:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003604:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003608:	d101      	bne.n	800360e <LL_RCC_IsActiveFlag_HPRE+0x18>
 800360a:	2301      	movs	r3, #1
 800360c:	e000      	b.n	8003610 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 800360e:	2300      	movs	r3, #0
}
 8003610:	4618      	mov	r0, r3
 8003612:	46bd      	mov	sp, r7
 8003614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003618:	4770      	bx	lr

0800361a <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 800361a:	b480      	push	{r7}
 800361c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 800361e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003622:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8003626:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800362a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800362e:	d101      	bne.n	8003634 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8003630:	2301      	movs	r3, #1
 8003632:	e000      	b.n	8003636 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8003634:	2300      	movs	r3, #0
}
 8003636:	4618      	mov	r0, r3
 8003638:	46bd      	mov	sp, r7
 800363a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800363e:	4770      	bx	lr

08003640 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8003640:	b480      	push	{r7}
 8003642:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8003644:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003648:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800364c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003650:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003654:	d101      	bne.n	800365a <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8003656:	2301      	movs	r3, #1
 8003658:	e000      	b.n	800365c <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 800365a:	2300      	movs	r3, #0
}
 800365c:	4618      	mov	r0, r3
 800365e:	46bd      	mov	sp, r7
 8003660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003664:	4770      	bx	lr

08003666 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8003666:	b480      	push	{r7}
 8003668:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 800366a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800366e:	689b      	ldr	r3, [r3, #8]
 8003670:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003674:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003678:	d101      	bne.n	800367e <LL_RCC_IsActiveFlag_PPRE1+0x18>
 800367a:	2301      	movs	r3, #1
 800367c:	e000      	b.n	8003680 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 800367e:	2300      	movs	r3, #0
}
 8003680:	4618      	mov	r0, r3
 8003682:	46bd      	mov	sp, r7
 8003684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003688:	4770      	bx	lr

0800368a <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 800368a:	b480      	push	{r7}
 800368c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 800368e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003692:	689b      	ldr	r3, [r3, #8]
 8003694:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003698:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800369c:	d101      	bne.n	80036a2 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 800369e:	2301      	movs	r3, #1
 80036a0:	e000      	b.n	80036a4 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 80036a2:	2300      	movs	r3, #0
}
 80036a4:	4618      	mov	r0, r3
 80036a6:	46bd      	mov	sp, r7
 80036a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ac:	4770      	bx	lr
	...

080036b0 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80036b0:	b590      	push	{r4, r7, lr}
 80036b2:	b08d      	sub	sp, #52	; 0x34
 80036b4:	af00      	add	r7, sp, #0
 80036b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d101      	bne.n	80036c2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80036be:	2301      	movs	r3, #1
 80036c0:	e37e      	b.n	8003dc0 <HAL_RCC_OscConfig+0x710>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f003 0320 	and.w	r3, r3, #32
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	f000 8092 	beq.w	80037f4 <HAL_RCC_OscConfig+0x144>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80036d0:	f7ff fea1 	bl	8003416 <LL_RCC_GetSysClkSource>
 80036d4:	62f8      	str	r0, [r7, #44]	; 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 80036d6:	f7ff ff82 	bl	80035de <LL_RCC_PLL_GetMainSource>
 80036da:	62b8      	str	r0, [r7, #40]	; 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80036dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d005      	beq.n	80036ee <HAL_RCC_OscConfig+0x3e>
 80036e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036e4:	2b0c      	cmp	r3, #12
 80036e6:	d14c      	bne.n	8003782 <HAL_RCC_OscConfig+0xd2>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 80036e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036ea:	2b01      	cmp	r3, #1
 80036ec:	d149      	bne.n	8003782 <HAL_RCC_OscConfig+0xd2>
    {
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80036ee:	f7ff fe2f 	bl	8003350 <LL_RCC_MSI_IsReady>
 80036f2:	4603      	mov	r3, r0
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d005      	beq.n	8003704 <HAL_RCC_OscConfig+0x54>
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	69db      	ldr	r3, [r3, #28]
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d101      	bne.n	8003704 <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 8003700:	2301      	movs	r3, #1
 8003702:	e35d      	b.n	8003dc0 <HAL_RCC_OscConfig+0x710>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8003708:	f7ff fe47 	bl	800339a <LL_RCC_MSI_GetRange>
 800370c:	4603      	mov	r3, r0
 800370e:	429c      	cmp	r4, r3
 8003710:	d914      	bls.n	800373c <HAL_RCC_OscConfig+0x8c>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003716:	4618      	mov	r0, r3
 8003718:	f000 fd16 	bl	8004148 <RCC_SetFlashLatencyFromMSIRange>
 800371c:	4603      	mov	r3, r0
 800371e:	2b00      	cmp	r3, #0
 8003720:	d001      	beq.n	8003726 <HAL_RCC_OscConfig+0x76>
          {
            return HAL_ERROR;
 8003722:	2301      	movs	r3, #1
 8003724:	e34c      	b.n	8003dc0 <HAL_RCC_OscConfig+0x710>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800372a:	4618      	mov	r0, r3
 800372c:	f7ff fe21 	bl	8003372 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	6a1b      	ldr	r3, [r3, #32]
 8003734:	4618      	mov	r0, r3
 8003736:	f7ff fe45 	bl	80033c4 <LL_RCC_MSI_SetCalibTrimming>
 800373a:	e013      	b.n	8003764 <HAL_RCC_OscConfig+0xb4>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003740:	4618      	mov	r0, r3
 8003742:	f7ff fe16 	bl	8003372 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	6a1b      	ldr	r3, [r3, #32]
 800374a:	4618      	mov	r0, r3
 800374c:	f7ff fe3a 	bl	80033c4 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003754:	4618      	mov	r0, r3
 8003756:	f000 fcf7 	bl	8004148 <RCC_SetFlashLatencyFromMSIRange>
 800375a:	4603      	mov	r3, r0
 800375c:	2b00      	cmp	r3, #0
 800375e:	d001      	beq.n	8003764 <HAL_RCC_OscConfig+0xb4>
          {
            return HAL_ERROR;
 8003760:	2301      	movs	r3, #1
 8003762:	e32d      	b.n	8003dc0 <HAL_RCC_OscConfig+0x710>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8003764:	f000 fcdc 	bl	8004120 <HAL_RCC_GetHCLKFreq>
 8003768:	4602      	mov	r2, r0
 800376a:	4bb3      	ldr	r3, [pc, #716]	; (8003a38 <HAL_RCC_OscConfig+0x388>)
 800376c:	601a      	str	r2, [r3, #0]
        
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800376e:	4bb3      	ldr	r3, [pc, #716]	; (8003a3c <HAL_RCC_OscConfig+0x38c>)
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	4618      	mov	r0, r3
 8003774:	f7fe fc3a 	bl	8001fec <HAL_InitTick>
 8003778:	4603      	mov	r3, r0
 800377a:	2b00      	cmp	r3, #0
 800377c:	d039      	beq.n	80037f2 <HAL_RCC_OscConfig+0x142>
        {
          return HAL_ERROR;
 800377e:	2301      	movs	r3, #1
 8003780:	e31e      	b.n	8003dc0 <HAL_RCC_OscConfig+0x710>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	69db      	ldr	r3, [r3, #28]
 8003786:	2b00      	cmp	r3, #0
 8003788:	d01e      	beq.n	80037c8 <HAL_RCC_OscConfig+0x118>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800378a:	f7ff fdc3 	bl	8003314 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 800378e:	f7fe fc7b 	bl	8002088 <HAL_GetTick>
 8003792:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8003794:	e008      	b.n	80037a8 <HAL_RCC_OscConfig+0xf8>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003796:	f7fe fc77 	bl	8002088 <HAL_GetTick>
 800379a:	4602      	mov	r2, r0
 800379c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800379e:	1ad3      	subs	r3, r2, r3
 80037a0:	2b02      	cmp	r3, #2
 80037a2:	d901      	bls.n	80037a8 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 80037a4:	2303      	movs	r3, #3
 80037a6:	e30b      	b.n	8003dc0 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_MSI_IsReady() == 0U)
 80037a8:	f7ff fdd2 	bl	8003350 <LL_RCC_MSI_IsReady>
 80037ac:	4603      	mov	r3, r0
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d0f1      	beq.n	8003796 <HAL_RCC_OscConfig+0xe6>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037b6:	4618      	mov	r0, r3
 80037b8:	f7ff fddb 	bl	8003372 <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	6a1b      	ldr	r3, [r3, #32]
 80037c0:	4618      	mov	r0, r3
 80037c2:	f7ff fdff 	bl	80033c4 <LL_RCC_MSI_SetCalibTrimming>
 80037c6:	e015      	b.n	80037f4 <HAL_RCC_OscConfig+0x144>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80037c8:	f7ff fdb3 	bl	8003332 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 80037cc:	f7fe fc5c 	bl	8002088 <HAL_GetTick>
 80037d0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 80037d2:	e008      	b.n	80037e6 <HAL_RCC_OscConfig+0x136>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80037d4:	f7fe fc58 	bl	8002088 <HAL_GetTick>
 80037d8:	4602      	mov	r2, r0
 80037da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037dc:	1ad3      	subs	r3, r2, r3
 80037de:	2b02      	cmp	r3, #2
 80037e0:	d901      	bls.n	80037e6 <HAL_RCC_OscConfig+0x136>
          {
            return HAL_TIMEOUT;
 80037e2:	2303      	movs	r3, #3
 80037e4:	e2ec      	b.n	8003dc0 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_MSI_IsReady() != 0U)
 80037e6:	f7ff fdb3 	bl	8003350 <LL_RCC_MSI_IsReady>
 80037ea:	4603      	mov	r3, r0
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d1f1      	bne.n	80037d4 <HAL_RCC_OscConfig+0x124>
 80037f0:	e000      	b.n	80037f4 <HAL_RCC_OscConfig+0x144>
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80037f2:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	f003 0301 	and.w	r3, r3, #1
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d04e      	beq.n	800389e <HAL_RCC_OscConfig+0x1ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003800:	f7ff fe09 	bl	8003416 <LL_RCC_GetSysClkSource>
 8003804:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003806:	f7ff feea 	bl	80035de <LL_RCC_PLL_GetMainSource>
 800380a:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 800380c:	6a3b      	ldr	r3, [r7, #32]
 800380e:	2b08      	cmp	r3, #8
 8003810:	d005      	beq.n	800381e <HAL_RCC_OscConfig+0x16e>
 8003812:	6a3b      	ldr	r3, [r7, #32]
 8003814:	2b0c      	cmp	r3, #12
 8003816:	d10d      	bne.n	8003834 <HAL_RCC_OscConfig+0x184>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 8003818:	69fb      	ldr	r3, [r7, #28]
 800381a:	2b03      	cmp	r3, #3
 800381c:	d10a      	bne.n	8003834 <HAL_RCC_OscConfig+0x184>
    {
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800381e:	f7ff fc19 	bl	8003054 <LL_RCC_HSE_IsReady>
 8003822:	4603      	mov	r3, r0
 8003824:	2b00      	cmp	r3, #0
 8003826:	d039      	beq.n	800389c <HAL_RCC_OscConfig+0x1ec>
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	685b      	ldr	r3, [r3, #4]
 800382c:	2b00      	cmp	r3, #0
 800382e:	d135      	bne.n	800389c <HAL_RCC_OscConfig+0x1ec>
      {
        return HAL_ERROR;
 8003830:	2301      	movs	r3, #1
 8003832:	e2c5      	b.n	8003dc0 <HAL_RCC_OscConfig+0x710>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	685b      	ldr	r3, [r3, #4]
 8003838:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800383c:	d102      	bne.n	8003844 <HAL_RCC_OscConfig+0x194>
 800383e:	f7ff fbeb 	bl	8003018 <LL_RCC_HSE_Enable>
 8003842:	e001      	b.n	8003848 <HAL_RCC_OscConfig+0x198>
 8003844:	f7ff fbf7 	bl	8003036 <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	685b      	ldr	r3, [r3, #4]
 800384c:	2b00      	cmp	r3, #0
 800384e:	d012      	beq.n	8003876 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003850:	f7fe fc1a 	bl	8002088 <HAL_GetTick>
 8003854:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8003856:	e008      	b.n	800386a <HAL_RCC_OscConfig+0x1ba>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003858:	f7fe fc16 	bl	8002088 <HAL_GetTick>
 800385c:	4602      	mov	r2, r0
 800385e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003860:	1ad3      	subs	r3, r2, r3
 8003862:	2b64      	cmp	r3, #100	; 0x64
 8003864:	d901      	bls.n	800386a <HAL_RCC_OscConfig+0x1ba>
          {
            return HAL_TIMEOUT;
 8003866:	2303      	movs	r3, #3
 8003868:	e2aa      	b.n	8003dc0 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_HSE_IsReady() == 0U)
 800386a:	f7ff fbf3 	bl	8003054 <LL_RCC_HSE_IsReady>
 800386e:	4603      	mov	r3, r0
 8003870:	2b00      	cmp	r3, #0
 8003872:	d0f1      	beq.n	8003858 <HAL_RCC_OscConfig+0x1a8>
 8003874:	e013      	b.n	800389e <HAL_RCC_OscConfig+0x1ee>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003876:	f7fe fc07 	bl	8002088 <HAL_GetTick>
 800387a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 800387c:	e008      	b.n	8003890 <HAL_RCC_OscConfig+0x1e0>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800387e:	f7fe fc03 	bl	8002088 <HAL_GetTick>
 8003882:	4602      	mov	r2, r0
 8003884:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003886:	1ad3      	subs	r3, r2, r3
 8003888:	2b64      	cmp	r3, #100	; 0x64
 800388a:	d901      	bls.n	8003890 <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 800388c:	2303      	movs	r3, #3
 800388e:	e297      	b.n	8003dc0 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_HSE_IsReady() != 0U)
 8003890:	f7ff fbe0 	bl	8003054 <LL_RCC_HSE_IsReady>
 8003894:	4603      	mov	r3, r0
 8003896:	2b00      	cmp	r3, #0
 8003898:	d1f1      	bne.n	800387e <HAL_RCC_OscConfig+0x1ce>
 800389a:	e000      	b.n	800389e <HAL_RCC_OscConfig+0x1ee>
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800389c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f003 0302 	and.w	r3, r3, #2
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d051      	beq.n	800394e <HAL_RCC_OscConfig+0x29e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80038aa:	f7ff fdb4 	bl	8003416 <LL_RCC_GetSysClkSource>
 80038ae:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 80038b0:	f7ff fe95 	bl	80035de <LL_RCC_PLL_GetMainSource>
 80038b4:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 80038b6:	69bb      	ldr	r3, [r7, #24]
 80038b8:	2b04      	cmp	r3, #4
 80038ba:	d005      	beq.n	80038c8 <HAL_RCC_OscConfig+0x218>
 80038bc:	69bb      	ldr	r3, [r7, #24]
 80038be:	2b0c      	cmp	r3, #12
 80038c0:	d113      	bne.n	80038ea <HAL_RCC_OscConfig+0x23a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 80038c2:	697b      	ldr	r3, [r7, #20]
 80038c4:	2b02      	cmp	r3, #2
 80038c6:	d110      	bne.n	80038ea <HAL_RCC_OscConfig+0x23a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80038c8:	f7ff fbf4 	bl	80030b4 <LL_RCC_HSI_IsReady>
 80038cc:	4603      	mov	r3, r0
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d005      	beq.n	80038de <HAL_RCC_OscConfig+0x22e>
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	68db      	ldr	r3, [r3, #12]
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d101      	bne.n	80038de <HAL_RCC_OscConfig+0x22e>
      {
        return HAL_ERROR;
 80038da:	2301      	movs	r3, #1
 80038dc:	e270      	b.n	8003dc0 <HAL_RCC_OscConfig+0x710>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	691b      	ldr	r3, [r3, #16]
 80038e2:	4618      	mov	r0, r3
 80038e4:	f7ff fbf8 	bl	80030d8 <LL_RCC_HSI_SetCalibTrimming>
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80038e8:	e031      	b.n	800394e <HAL_RCC_OscConfig+0x29e>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	68db      	ldr	r3, [r3, #12]
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d019      	beq.n	8003926 <HAL_RCC_OscConfig+0x276>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80038f2:	f7ff fbc1 	bl	8003078 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038f6:	f7fe fbc7 	bl	8002088 <HAL_GetTick>
 80038fa:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 80038fc:	e008      	b.n	8003910 <HAL_RCC_OscConfig+0x260>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80038fe:	f7fe fbc3 	bl	8002088 <HAL_GetTick>
 8003902:	4602      	mov	r2, r0
 8003904:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003906:	1ad3      	subs	r3, r2, r3
 8003908:	2b02      	cmp	r3, #2
 800390a:	d901      	bls.n	8003910 <HAL_RCC_OscConfig+0x260>
          {
            return HAL_TIMEOUT;
 800390c:	2303      	movs	r3, #3
 800390e:	e257      	b.n	8003dc0 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_HSI_IsReady() == 0U)
 8003910:	f7ff fbd0 	bl	80030b4 <LL_RCC_HSI_IsReady>
 8003914:	4603      	mov	r3, r0
 8003916:	2b00      	cmp	r3, #0
 8003918:	d0f1      	beq.n	80038fe <HAL_RCC_OscConfig+0x24e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	691b      	ldr	r3, [r3, #16]
 800391e:	4618      	mov	r0, r3
 8003920:	f7ff fbda 	bl	80030d8 <LL_RCC_HSI_SetCalibTrimming>
 8003924:	e013      	b.n	800394e <HAL_RCC_OscConfig+0x29e>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003926:	f7ff fbb6 	bl	8003096 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800392a:	f7fe fbad 	bl	8002088 <HAL_GetTick>
 800392e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8003930:	e008      	b.n	8003944 <HAL_RCC_OscConfig+0x294>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003932:	f7fe fba9 	bl	8002088 <HAL_GetTick>
 8003936:	4602      	mov	r2, r0
 8003938:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800393a:	1ad3      	subs	r3, r2, r3
 800393c:	2b02      	cmp	r3, #2
 800393e:	d901      	bls.n	8003944 <HAL_RCC_OscConfig+0x294>
          {
            return HAL_TIMEOUT;
 8003940:	2303      	movs	r3, #3
 8003942:	e23d      	b.n	8003dc0 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_HSI_IsReady() != 0U)
 8003944:	f7ff fbb6 	bl	80030b4 <LL_RCC_HSI_IsReady>
 8003948:	4603      	mov	r3, r0
 800394a:	2b00      	cmp	r3, #0
 800394c:	d1f1      	bne.n	8003932 <HAL_RCC_OscConfig+0x282>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f003 0308 	and.w	r3, r3, #8
 8003956:	2b00      	cmp	r3, #0
 8003958:	d106      	bne.n	8003968 <HAL_RCC_OscConfig+0x2b8>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8003962:	2b00      	cmp	r3, #0
 8003964:	f000 80a3 	beq.w	8003aae <HAL_RCC_OscConfig+0x3fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	695b      	ldr	r3, [r3, #20]
 800396c:	2b00      	cmp	r3, #0
 800396e:	d076      	beq.n	8003a5e <HAL_RCC_OscConfig+0x3ae>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	f003 0310 	and.w	r3, r3, #16
 8003978:	2b00      	cmp	r3, #0
 800397a:	d046      	beq.n	8003a0a <HAL_RCC_OscConfig+0x35a>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 800397c:	f7ff fc6d 	bl	800325a <LL_RCC_LSI1_IsReady>
 8003980:	4603      	mov	r3, r0
 8003982:	2b00      	cmp	r3, #0
 8003984:	d113      	bne.n	80039ae <HAL_RCC_OscConfig+0x2fe>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 8003986:	f7ff fc46 	bl	8003216 <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800398a:	f7fe fb7d 	bl	8002088 <HAL_GetTick>
 800398e:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 8003990:	e008      	b.n	80039a4 <HAL_RCC_OscConfig+0x2f4>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8003992:	f7fe fb79 	bl	8002088 <HAL_GetTick>
 8003996:	4602      	mov	r2, r0
 8003998:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800399a:	1ad3      	subs	r3, r2, r3
 800399c:	2b02      	cmp	r3, #2
 800399e:	d901      	bls.n	80039a4 <HAL_RCC_OscConfig+0x2f4>
            {
              return HAL_TIMEOUT;
 80039a0:	2303      	movs	r3, #3
 80039a2:	e20d      	b.n	8003dc0 <HAL_RCC_OscConfig+0x710>
          while (LL_RCC_LSI1_IsReady() == 0U)
 80039a4:	f7ff fc59 	bl	800325a <LL_RCC_LSI1_IsReady>
 80039a8:	4603      	mov	r3, r0
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d0f1      	beq.n	8003992 <HAL_RCC_OscConfig+0x2e2>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 80039ae:	f7ff fc66 	bl	800327e <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039b2:	f7fe fb69 	bl	8002088 <HAL_GetTick>
 80039b6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 80039b8:	e008      	b.n	80039cc <HAL_RCC_OscConfig+0x31c>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80039ba:	f7fe fb65 	bl	8002088 <HAL_GetTick>
 80039be:	4602      	mov	r2, r0
 80039c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039c2:	1ad3      	subs	r3, r2, r3
 80039c4:	2b03      	cmp	r3, #3
 80039c6:	d901      	bls.n	80039cc <HAL_RCC_OscConfig+0x31c>
          {
            return HAL_TIMEOUT;
 80039c8:	2303      	movs	r3, #3
 80039ca:	e1f9      	b.n	8003dc0 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_LSI2_IsReady() == 0U)
 80039cc:	f7ff fc79 	bl	80032c2 <LL_RCC_LSI2_IsReady>
 80039d0:	4603      	mov	r3, r0
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d0f1      	beq.n	80039ba <HAL_RCC_OscConfig+0x30a>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	699b      	ldr	r3, [r3, #24]
 80039da:	4618      	mov	r0, r3
 80039dc:	f7ff fc83 	bl	80032e6 <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 80039e0:	f7ff fc2a 	bl	8003238 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039e4:	f7fe fb50 	bl	8002088 <HAL_GetTick>
 80039e8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 80039ea:	e008      	b.n	80039fe <HAL_RCC_OscConfig+0x34e>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80039ec:	f7fe fb4c 	bl	8002088 <HAL_GetTick>
 80039f0:	4602      	mov	r2, r0
 80039f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039f4:	1ad3      	subs	r3, r2, r3
 80039f6:	2b02      	cmp	r3, #2
 80039f8:	d901      	bls.n	80039fe <HAL_RCC_OscConfig+0x34e>
          {
            return HAL_TIMEOUT;
 80039fa:	2303      	movs	r3, #3
 80039fc:	e1e0      	b.n	8003dc0 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_LSI1_IsReady() != 0U)
 80039fe:	f7ff fc2c 	bl	800325a <LL_RCC_LSI1_IsReady>
 8003a02:	4603      	mov	r3, r0
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d1f1      	bne.n	80039ec <HAL_RCC_OscConfig+0x33c>
 8003a08:	e051      	b.n	8003aae <HAL_RCC_OscConfig+0x3fe>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 8003a0a:	f7ff fc04 	bl	8003216 <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a0e:	f7fe fb3b 	bl	8002088 <HAL_GetTick>
 8003a12:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 8003a14:	e008      	b.n	8003a28 <HAL_RCC_OscConfig+0x378>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8003a16:	f7fe fb37 	bl	8002088 <HAL_GetTick>
 8003a1a:	4602      	mov	r2, r0
 8003a1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a1e:	1ad3      	subs	r3, r2, r3
 8003a20:	2b02      	cmp	r3, #2
 8003a22:	d901      	bls.n	8003a28 <HAL_RCC_OscConfig+0x378>
          {
            return HAL_TIMEOUT;
 8003a24:	2303      	movs	r3, #3
 8003a26:	e1cb      	b.n	8003dc0 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_LSI1_IsReady() == 0U)
 8003a28:	f7ff fc17 	bl	800325a <LL_RCC_LSI1_IsReady>
 8003a2c:	4603      	mov	r3, r0
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d0f1      	beq.n	8003a16 <HAL_RCC_OscConfig+0x366>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 8003a32:	f7ff fc35 	bl	80032a0 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 8003a36:	e00c      	b.n	8003a52 <HAL_RCC_OscConfig+0x3a2>
 8003a38:	20000004 	.word	0x20000004
 8003a3c:	20000008 	.word	0x20000008
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8003a40:	f7fe fb22 	bl	8002088 <HAL_GetTick>
 8003a44:	4602      	mov	r2, r0
 8003a46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a48:	1ad3      	subs	r3, r2, r3
 8003a4a:	2b03      	cmp	r3, #3
 8003a4c:	d901      	bls.n	8003a52 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8003a4e:	2303      	movs	r3, #3
 8003a50:	e1b6      	b.n	8003dc0 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_LSI2_IsReady() != 0U)
 8003a52:	f7ff fc36 	bl	80032c2 <LL_RCC_LSI2_IsReady>
 8003a56:	4603      	mov	r3, r0
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d1f1      	bne.n	8003a40 <HAL_RCC_OscConfig+0x390>
 8003a5c:	e027      	b.n	8003aae <HAL_RCC_OscConfig+0x3fe>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 8003a5e:	f7ff fc1f 	bl	80032a0 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a62:	f7fe fb11 	bl	8002088 <HAL_GetTick>
 8003a66:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 8003a68:	e008      	b.n	8003a7c <HAL_RCC_OscConfig+0x3cc>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8003a6a:	f7fe fb0d 	bl	8002088 <HAL_GetTick>
 8003a6e:	4602      	mov	r2, r0
 8003a70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a72:	1ad3      	subs	r3, r2, r3
 8003a74:	2b03      	cmp	r3, #3
 8003a76:	d901      	bls.n	8003a7c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8003a78:	2303      	movs	r3, #3
 8003a7a:	e1a1      	b.n	8003dc0 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_LSI2_IsReady() != 0U)
 8003a7c:	f7ff fc21 	bl	80032c2 <LL_RCC_LSI2_IsReady>
 8003a80:	4603      	mov	r3, r0
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d1f1      	bne.n	8003a6a <HAL_RCC_OscConfig+0x3ba>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 8003a86:	f7ff fbd7 	bl	8003238 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a8a:	f7fe fafd 	bl	8002088 <HAL_GetTick>
 8003a8e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 8003a90:	e008      	b.n	8003aa4 <HAL_RCC_OscConfig+0x3f4>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8003a92:	f7fe faf9 	bl	8002088 <HAL_GetTick>
 8003a96:	4602      	mov	r2, r0
 8003a98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a9a:	1ad3      	subs	r3, r2, r3
 8003a9c:	2b02      	cmp	r3, #2
 8003a9e:	d901      	bls.n	8003aa4 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8003aa0:	2303      	movs	r3, #3
 8003aa2:	e18d      	b.n	8003dc0 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_LSI1_IsReady() != 0U)
 8003aa4:	f7ff fbd9 	bl	800325a <LL_RCC_LSI1_IsReady>
 8003aa8:	4603      	mov	r3, r0
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d1f1      	bne.n	8003a92 <HAL_RCC_OscConfig+0x3e2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	f003 0304 	and.w	r3, r3, #4
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d05b      	beq.n	8003b72 <HAL_RCC_OscConfig+0x4c2>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003aba:	4bb5      	ldr	r3, [pc, #724]	; (8003d90 <HAL_RCC_OscConfig+0x6e0>)
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d114      	bne.n	8003af0 <HAL_RCC_OscConfig+0x440>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8003ac6:	f7ff fa77 	bl	8002fb8 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003aca:	f7fe fadd 	bl	8002088 <HAL_GetTick>
 8003ace:	6278      	str	r0, [r7, #36]	; 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003ad0:	e008      	b.n	8003ae4 <HAL_RCC_OscConfig+0x434>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ad2:	f7fe fad9 	bl	8002088 <HAL_GetTick>
 8003ad6:	4602      	mov	r2, r0
 8003ad8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ada:	1ad3      	subs	r3, r2, r3
 8003adc:	2b02      	cmp	r3, #2
 8003ade:	d901      	bls.n	8003ae4 <HAL_RCC_OscConfig+0x434>
        {
          return HAL_TIMEOUT;
 8003ae0:	2303      	movs	r3, #3
 8003ae2:	e16d      	b.n	8003dc0 <HAL_RCC_OscConfig+0x710>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003ae4:	4baa      	ldr	r3, [pc, #680]	; (8003d90 <HAL_RCC_OscConfig+0x6e0>)
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d0f0      	beq.n	8003ad2 <HAL_RCC_OscConfig+0x422>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	689b      	ldr	r3, [r3, #8]
 8003af4:	2b01      	cmp	r3, #1
 8003af6:	d102      	bne.n	8003afe <HAL_RCC_OscConfig+0x44e>
 8003af8:	f7ff fb37 	bl	800316a <LL_RCC_LSE_Enable>
 8003afc:	e00c      	b.n	8003b18 <HAL_RCC_OscConfig+0x468>
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	689b      	ldr	r3, [r3, #8]
 8003b02:	2b05      	cmp	r3, #5
 8003b04:	d104      	bne.n	8003b10 <HAL_RCC_OscConfig+0x460>
 8003b06:	f7ff fb52 	bl	80031ae <LL_RCC_LSE_EnableBypass>
 8003b0a:	f7ff fb2e 	bl	800316a <LL_RCC_LSE_Enable>
 8003b0e:	e003      	b.n	8003b18 <HAL_RCC_OscConfig+0x468>
 8003b10:	f7ff fb3c 	bl	800318c <LL_RCC_LSE_Disable>
 8003b14:	f7ff fb5c 	bl	80031d0 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	689b      	ldr	r3, [r3, #8]
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d014      	beq.n	8003b4a <HAL_RCC_OscConfig+0x49a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b20:	f7fe fab2 	bl	8002088 <HAL_GetTick>
 8003b24:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8003b26:	e00a      	b.n	8003b3e <HAL_RCC_OscConfig+0x48e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b28:	f7fe faae 	bl	8002088 <HAL_GetTick>
 8003b2c:	4602      	mov	r2, r0
 8003b2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b30:	1ad3      	subs	r3, r2, r3
 8003b32:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b36:	4293      	cmp	r3, r2
 8003b38:	d901      	bls.n	8003b3e <HAL_RCC_OscConfig+0x48e>
        {
          return HAL_TIMEOUT;
 8003b3a:	2303      	movs	r3, #3
 8003b3c:	e140      	b.n	8003dc0 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_LSE_IsReady() == 0U)
 8003b3e:	f7ff fb58 	bl	80031f2 <LL_RCC_LSE_IsReady>
 8003b42:	4603      	mov	r3, r0
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d0ef      	beq.n	8003b28 <HAL_RCC_OscConfig+0x478>
 8003b48:	e013      	b.n	8003b72 <HAL_RCC_OscConfig+0x4c2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b4a:	f7fe fa9d 	bl	8002088 <HAL_GetTick>
 8003b4e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8003b50:	e00a      	b.n	8003b68 <HAL_RCC_OscConfig+0x4b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b52:	f7fe fa99 	bl	8002088 <HAL_GetTick>
 8003b56:	4602      	mov	r2, r0
 8003b58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b5a:	1ad3      	subs	r3, r2, r3
 8003b5c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b60:	4293      	cmp	r3, r2
 8003b62:	d901      	bls.n	8003b68 <HAL_RCC_OscConfig+0x4b8>
        {
          return HAL_TIMEOUT;
 8003b64:	2303      	movs	r3, #3
 8003b66:	e12b      	b.n	8003dc0 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_LSE_IsReady() != 0U)
 8003b68:	f7ff fb43 	bl	80031f2 <LL_RCC_LSE_IsReady>
 8003b6c:	4603      	mov	r3, r0
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d1ef      	bne.n	8003b52 <HAL_RCC_OscConfig+0x4a2>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d02c      	beq.n	8003bd8 <HAL_RCC_OscConfig+0x528>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d014      	beq.n	8003bb0 <HAL_RCC_OscConfig+0x500>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003b86:	f7ff fabc 	bl	8003102 <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b8a:	f7fe fa7d 	bl	8002088 <HAL_GetTick>
 8003b8e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 8003b90:	e008      	b.n	8003ba4 <HAL_RCC_OscConfig+0x4f4>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003b92:	f7fe fa79 	bl	8002088 <HAL_GetTick>
 8003b96:	4602      	mov	r2, r0
 8003b98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b9a:	1ad3      	subs	r3, r2, r3
 8003b9c:	2b02      	cmp	r3, #2
 8003b9e:	d901      	bls.n	8003ba4 <HAL_RCC_OscConfig+0x4f4>
        {
          return HAL_TIMEOUT;
 8003ba0:	2303      	movs	r3, #3
 8003ba2:	e10d      	b.n	8003dc0 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_HSI48_IsReady() == 0U)
 8003ba4:	f7ff facf 	bl	8003146 <LL_RCC_HSI48_IsReady>
 8003ba8:	4603      	mov	r3, r0
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d0f1      	beq.n	8003b92 <HAL_RCC_OscConfig+0x4e2>
 8003bae:	e013      	b.n	8003bd8 <HAL_RCC_OscConfig+0x528>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003bb0:	f7ff fab8 	bl	8003124 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003bb4:	f7fe fa68 	bl	8002088 <HAL_GetTick>
 8003bb8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 8003bba:	e008      	b.n	8003bce <HAL_RCC_OscConfig+0x51e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003bbc:	f7fe fa64 	bl	8002088 <HAL_GetTick>
 8003bc0:	4602      	mov	r2, r0
 8003bc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bc4:	1ad3      	subs	r3, r2, r3
 8003bc6:	2b02      	cmp	r3, #2
 8003bc8:	d901      	bls.n	8003bce <HAL_RCC_OscConfig+0x51e>
        {
          return HAL_TIMEOUT;
 8003bca:	2303      	movs	r3, #3
 8003bcc:	e0f8      	b.n	8003dc0 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_HSI48_IsReady() != 0U)
 8003bce:	f7ff faba 	bl	8003146 <LL_RCC_HSI48_IsReady>
 8003bd2:	4603      	mov	r3, r0
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d1f1      	bne.n	8003bbc <HAL_RCC_OscConfig+0x50c>
#endif
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	f000 80ee 	beq.w	8003dbe <HAL_RCC_OscConfig+0x70e>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003be2:	f7ff fc18 	bl	8003416 <LL_RCC_GetSysClkSource>
 8003be6:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 8003be8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003bec:	68db      	ldr	r3, [r3, #12]
 8003bee:	60fb      	str	r3, [r7, #12]
    
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bf4:	2b02      	cmp	r3, #2
 8003bf6:	f040 80af 	bne.w	8003d58 <HAL_RCC_OscConfig+0x6a8>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
      
      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	f003 0203 	and.w	r2, r3, #3
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c04:	429a      	cmp	r2, r3
 8003c06:	d123      	bne.n	8003c50 <HAL_RCC_OscConfig+0x5a0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c12:	429a      	cmp	r2, r3
 8003c14:	d11c      	bne.n	8003c50 <HAL_RCC_OscConfig+0x5a0>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	0a1b      	lsrs	r3, r3, #8
 8003c1a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003c22:	429a      	cmp	r2, r3
 8003c24:	d114      	bne.n	8003c50 <HAL_RCC_OscConfig+0x5a0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8003c30:	429a      	cmp	r2, r3
 8003c32:	d10d      	bne.n	8003c50 <HAL_RCC_OscConfig+0x5a0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003c3e:	429a      	cmp	r2, r3
 8003c40:	d106      	bne.n	8003c50 <HAL_RCC_OscConfig+0x5a0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8003c4c:	429a      	cmp	r2, r3
 8003c4e:	d05d      	beq.n	8003d0c <HAL_RCC_OscConfig+0x65c>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003c50:	693b      	ldr	r3, [r7, #16]
 8003c52:	2b0c      	cmp	r3, #12
 8003c54:	d058      	beq.n	8003d08 <HAL_RCC_OscConfig+0x658>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003c56:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d001      	beq.n	8003c68 <HAL_RCC_OscConfig+0x5b8>

          {
            return HAL_ERROR;
 8003c64:	2301      	movs	r3, #1
 8003c66:	e0ab      	b.n	8003dc0 <HAL_RCC_OscConfig+0x710>
          }
          else
#endif
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003c68:	f7ff fc73 	bl	8003552 <LL_RCC_PLL_Disable>
            
            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003c6c:	f7fe fa0c 	bl	8002088 <HAL_GetTick>
 8003c70:	6278      	str	r0, [r7, #36]	; 0x24
            
            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003c72:	e008      	b.n	8003c86 <HAL_RCC_OscConfig+0x5d6>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c74:	f7fe fa08 	bl	8002088 <HAL_GetTick>
 8003c78:	4602      	mov	r2, r0
 8003c7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c7c:	1ad3      	subs	r3, r2, r3
 8003c7e:	2b02      	cmp	r3, #2
 8003c80:	d901      	bls.n	8003c86 <HAL_RCC_OscConfig+0x5d6>
              {
                return HAL_TIMEOUT;
 8003c82:	2303      	movs	r3, #3
 8003c84:	e09c      	b.n	8003dc0 <HAL_RCC_OscConfig+0x710>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003c86:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d1ef      	bne.n	8003c74 <HAL_RCC_OscConfig+0x5c4>
              }
            }
            
            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003c94:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c98:	68da      	ldr	r2, [r3, #12]
 8003c9a:	4b3e      	ldr	r3, [pc, #248]	; (8003d94 <HAL_RCC_OscConfig+0x6e4>)
 8003c9c:	4013      	ands	r3, r2
 8003c9e:	687a      	ldr	r2, [r7, #4]
 8003ca0:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8003ca2:	687a      	ldr	r2, [r7, #4]
 8003ca4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003ca6:	4311      	orrs	r1, r2
 8003ca8:	687a      	ldr	r2, [r7, #4]
 8003caa:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003cac:	0212      	lsls	r2, r2, #8
 8003cae:	4311      	orrs	r1, r2
 8003cb0:	687a      	ldr	r2, [r7, #4]
 8003cb2:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003cb4:	4311      	orrs	r1, r2
 8003cb6:	687a      	ldr	r2, [r7, #4]
 8003cb8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003cba:	4311      	orrs	r1, r2
 8003cbc:	687a      	ldr	r2, [r7, #4]
 8003cbe:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8003cc0:	430a      	orrs	r2, r1
 8003cc2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003cc6:	4313      	orrs	r3, r2
 8003cc8:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
            
            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003cca:	f7ff fc33 	bl	8003534 <LL_RCC_PLL_Enable>
            
            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003cce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003cd2:	68db      	ldr	r3, [r3, #12]
 8003cd4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003cd8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003cdc:	60d3      	str	r3, [r2, #12]
            
            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003cde:	f7fe f9d3 	bl	8002088 <HAL_GetTick>
 8003ce2:	6278      	str	r0, [r7, #36]	; 0x24
            
            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003ce4:	e008      	b.n	8003cf8 <HAL_RCC_OscConfig+0x648>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ce6:	f7fe f9cf 	bl	8002088 <HAL_GetTick>
 8003cea:	4602      	mov	r2, r0
 8003cec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cee:	1ad3      	subs	r3, r2, r3
 8003cf0:	2b02      	cmp	r3, #2
 8003cf2:	d901      	bls.n	8003cf8 <HAL_RCC_OscConfig+0x648>
              {
                return HAL_TIMEOUT;
 8003cf4:	2303      	movs	r3, #3
 8003cf6:	e063      	b.n	8003dc0 <HAL_RCC_OscConfig+0x710>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003cf8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d0ef      	beq.n	8003ce6 <HAL_RCC_OscConfig+0x636>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003d06:	e05a      	b.n	8003dbe <HAL_RCC_OscConfig+0x70e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003d08:	2301      	movs	r3, #1
 8003d0a:	e059      	b.n	8003dc0 <HAL_RCC_OscConfig+0x710>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003d0c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d151      	bne.n	8003dbe <HAL_RCC_OscConfig+0x70e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003d1a:	f7ff fc0b 	bl	8003534 <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003d1e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d22:	68db      	ldr	r3, [r3, #12]
 8003d24:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003d28:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d2c:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003d2e:	f7fe f9ab 	bl	8002088 <HAL_GetTick>
 8003d32:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003d34:	e008      	b.n	8003d48 <HAL_RCC_OscConfig+0x698>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d36:	f7fe f9a7 	bl	8002088 <HAL_GetTick>
 8003d3a:	4602      	mov	r2, r0
 8003d3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d3e:	1ad3      	subs	r3, r2, r3
 8003d40:	2b02      	cmp	r3, #2
 8003d42:	d901      	bls.n	8003d48 <HAL_RCC_OscConfig+0x698>
            {
              return HAL_TIMEOUT;
 8003d44:	2303      	movs	r3, #3
 8003d46:	e03b      	b.n	8003dc0 <HAL_RCC_OscConfig+0x710>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003d48:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d0ef      	beq.n	8003d36 <HAL_RCC_OscConfig+0x686>
 8003d56:	e032      	b.n	8003dbe <HAL_RCC_OscConfig+0x70e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003d58:	693b      	ldr	r3, [r7, #16]
 8003d5a:	2b0c      	cmp	r3, #12
 8003d5c:	d02d      	beq.n	8003dba <HAL_RCC_OscConfig+0x70a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d5e:	f7ff fbf8 	bl	8003552 <LL_RCC_PLL_Disable>
        

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 8003d62:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d66:	68db      	ldr	r3, [r3, #12]
 8003d68:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003d6c:	f023 0303 	bic.w	r3, r3, #3
 8003d70:	60d3      	str	r3, [r2, #12]

#if defined(SAI1) && defined(USB)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_USBCLK | RCC_PLL_SAI1CLK);
 8003d72:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d76:	68db      	ldr	r3, [r3, #12]
 8003d78:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003d7c:	f023 5388 	bic.w	r3, r3, #285212672	; 0x11000000
 8003d80:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d84:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK);
#endif

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d86:	f7fe f97f 	bl	8002088 <HAL_GetTick>
 8003d8a:	6278      	str	r0, [r7, #36]	; 0x24
        
        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003d8c:	e00d      	b.n	8003daa <HAL_RCC_OscConfig+0x6fa>
 8003d8e:	bf00      	nop
 8003d90:	58000400 	.word	0x58000400
 8003d94:	11c1808c 	.word	0x11c1808c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d98:	f7fe f976 	bl	8002088 <HAL_GetTick>
 8003d9c:	4602      	mov	r2, r0
 8003d9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003da0:	1ad3      	subs	r3, r2, r3
 8003da2:	2b02      	cmp	r3, #2
 8003da4:	d901      	bls.n	8003daa <HAL_RCC_OscConfig+0x6fa>
          {
            return HAL_TIMEOUT;
 8003da6:	2303      	movs	r3, #3
 8003da8:	e00a      	b.n	8003dc0 <HAL_RCC_OscConfig+0x710>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003daa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d1ef      	bne.n	8003d98 <HAL_RCC_OscConfig+0x6e8>
 8003db8:	e001      	b.n	8003dbe <HAL_RCC_OscConfig+0x70e>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003dba:	2301      	movs	r3, #1
 8003dbc:	e000      	b.n	8003dc0 <HAL_RCC_OscConfig+0x710>
      }
    }
  }
  return HAL_OK;
 8003dbe:	2300      	movs	r3, #0
}
 8003dc0:	4618      	mov	r0, r3
 8003dc2:	3734      	adds	r7, #52	; 0x34
 8003dc4:	46bd      	mov	sp, r7
 8003dc6:	bd90      	pop	{r4, r7, pc}

08003dc8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003dc8:	b580      	push	{r7, lr}
 8003dca:	b084      	sub	sp, #16
 8003dcc:	af00      	add	r7, sp, #0
 8003dce:	6078      	str	r0, [r7, #4]
 8003dd0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d101      	bne.n	8003ddc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003dd8:	2301      	movs	r3, #1
 8003dda:	e12d      	b.n	8004038 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003ddc:	4b98      	ldr	r3, [pc, #608]	; (8004040 <HAL_RCC_ClockConfig+0x278>)
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	f003 0307 	and.w	r3, r3, #7
 8003de4:	683a      	ldr	r2, [r7, #0]
 8003de6:	429a      	cmp	r2, r3
 8003de8:	d91b      	bls.n	8003e22 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003dea:	4b95      	ldr	r3, [pc, #596]	; (8004040 <HAL_RCC_ClockConfig+0x278>)
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	f023 0207 	bic.w	r2, r3, #7
 8003df2:	4993      	ldr	r1, [pc, #588]	; (8004040 <HAL_RCC_ClockConfig+0x278>)
 8003df4:	683b      	ldr	r3, [r7, #0]
 8003df6:	4313      	orrs	r3, r2
 8003df8:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003dfa:	f7fe f945 	bl	8002088 <HAL_GetTick>
 8003dfe:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e00:	e008      	b.n	8003e14 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8003e02:	f7fe f941 	bl	8002088 <HAL_GetTick>
 8003e06:	4602      	mov	r2, r0
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	1ad3      	subs	r3, r2, r3
 8003e0c:	2b02      	cmp	r3, #2
 8003e0e:	d901      	bls.n	8003e14 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8003e10:	2303      	movs	r3, #3
 8003e12:	e111      	b.n	8004038 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e14:	4b8a      	ldr	r3, [pc, #552]	; (8004040 <HAL_RCC_ClockConfig+0x278>)
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	f003 0307 	and.w	r3, r3, #7
 8003e1c:	683a      	ldr	r2, [r7, #0]
 8003e1e:	429a      	cmp	r2, r3
 8003e20:	d1ef      	bne.n	8003e02 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	f003 0302 	and.w	r3, r3, #2
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d016      	beq.n	8003e5c <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	689b      	ldr	r3, [r3, #8]
 8003e32:	4618      	mov	r0, r3
 8003e34:	f7ff fafb 	bl	800342e <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003e38:	f7fe f926 	bl	8002088 <HAL_GetTick>
 8003e3c:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8003e3e:	e008      	b.n	8003e52 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003e40:	f7fe f922 	bl	8002088 <HAL_GetTick>
 8003e44:	4602      	mov	r2, r0
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	1ad3      	subs	r3, r2, r3
 8003e4a:	2b02      	cmp	r3, #2
 8003e4c:	d901      	bls.n	8003e52 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8003e4e:	2303      	movs	r3, #3
 8003e50:	e0f2      	b.n	8004038 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8003e52:	f7ff fbd0 	bl	80035f6 <LL_RCC_IsActiveFlag_HPRE>
 8003e56:	4603      	mov	r3, r0
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d0f1      	beq.n	8003e40 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	f003 0320 	and.w	r3, r3, #32
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d016      	beq.n	8003e96 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	695b      	ldr	r3, [r3, #20]
 8003e6c:	4618      	mov	r0, r3
 8003e6e:	f7ff faf2 	bl	8003456 <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003e72:	f7fe f909 	bl	8002088 <HAL_GetTick>
 8003e76:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8003e78:	e008      	b.n	8003e8c <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003e7a:	f7fe f905 	bl	8002088 <HAL_GetTick>
 8003e7e:	4602      	mov	r2, r0
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	1ad3      	subs	r3, r2, r3
 8003e84:	2b02      	cmp	r3, #2
 8003e86:	d901      	bls.n	8003e8c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8003e88:	2303      	movs	r3, #3
 8003e8a:	e0d5      	b.n	8004038 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8003e8c:	f7ff fbc5 	bl	800361a <LL_RCC_IsActiveFlag_C2HPRE>
 8003e90:	4603      	mov	r3, r0
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d0f1      	beq.n	8003e7a <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d016      	beq.n	8003ed0 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	699b      	ldr	r3, [r3, #24]
 8003ea6:	4618      	mov	r0, r3
 8003ea8:	f7ff faeb 	bl	8003482 <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003eac:	f7fe f8ec 	bl	8002088 <HAL_GetTick>
 8003eb0:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8003eb2:	e008      	b.n	8003ec6 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003eb4:	f7fe f8e8 	bl	8002088 <HAL_GetTick>
 8003eb8:	4602      	mov	r2, r0
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	1ad3      	subs	r3, r2, r3
 8003ebe:	2b02      	cmp	r3, #2
 8003ec0:	d901      	bls.n	8003ec6 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8003ec2:	2303      	movs	r3, #3
 8003ec4:	e0b8      	b.n	8004038 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8003ec6:	f7ff fbbb 	bl	8003640 <LL_RCC_IsActiveFlag_SHDHPRE>
 8003eca:	4603      	mov	r3, r0
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d0f1      	beq.n	8003eb4 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	f003 0304 	and.w	r3, r3, #4
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d016      	beq.n	8003f0a <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	68db      	ldr	r3, [r3, #12]
 8003ee0:	4618      	mov	r0, r3
 8003ee2:	f7ff fae5 	bl	80034b0 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003ee6:	f7fe f8cf 	bl	8002088 <HAL_GetTick>
 8003eea:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8003eec:	e008      	b.n	8003f00 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003eee:	f7fe f8cb 	bl	8002088 <HAL_GetTick>
 8003ef2:	4602      	mov	r2, r0
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	1ad3      	subs	r3, r2, r3
 8003ef8:	2b02      	cmp	r3, #2
 8003efa:	d901      	bls.n	8003f00 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8003efc:	2303      	movs	r3, #3
 8003efe:	e09b      	b.n	8004038 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8003f00:	f7ff fbb1 	bl	8003666 <LL_RCC_IsActiveFlag_PPRE1>
 8003f04:	4603      	mov	r3, r0
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d0f1      	beq.n	8003eee <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	f003 0308 	and.w	r3, r3, #8
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d017      	beq.n	8003f46 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	691b      	ldr	r3, [r3, #16]
 8003f1a:	00db      	lsls	r3, r3, #3
 8003f1c:	4618      	mov	r0, r3
 8003f1e:	f7ff fadb 	bl	80034d8 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003f22:	f7fe f8b1 	bl	8002088 <HAL_GetTick>
 8003f26:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8003f28:	e008      	b.n	8003f3c <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003f2a:	f7fe f8ad 	bl	8002088 <HAL_GetTick>
 8003f2e:	4602      	mov	r2, r0
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	1ad3      	subs	r3, r2, r3
 8003f34:	2b02      	cmp	r3, #2
 8003f36:	d901      	bls.n	8003f3c <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8003f38:	2303      	movs	r3, #3
 8003f3a:	e07d      	b.n	8004038 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8003f3c:	f7ff fba5 	bl	800368a <LL_RCC_IsActiveFlag_PPRE2>
 8003f40:	4603      	mov	r3, r0
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d0f1      	beq.n	8003f2a <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	f003 0301 	and.w	r3, r3, #1
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d043      	beq.n	8003fda <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	685b      	ldr	r3, [r3, #4]
 8003f56:	2b02      	cmp	r3, #2
 8003f58:	d106      	bne.n	8003f68 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8003f5a:	f7ff f87b 	bl	8003054 <LL_RCC_HSE_IsReady>
 8003f5e:	4603      	mov	r3, r0
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d11e      	bne.n	8003fa2 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8003f64:	2301      	movs	r3, #1
 8003f66:	e067      	b.n	8004038 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	685b      	ldr	r3, [r3, #4]
 8003f6c:	2b03      	cmp	r3, #3
 8003f6e:	d106      	bne.n	8003f7e <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8003f70:	f7ff fafe 	bl	8003570 <LL_RCC_PLL_IsReady>
 8003f74:	4603      	mov	r3, r0
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d113      	bne.n	8003fa2 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8003f7a:	2301      	movs	r3, #1
 8003f7c:	e05c      	b.n	8004038 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	685b      	ldr	r3, [r3, #4]
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d106      	bne.n	8003f94 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8003f86:	f7ff f9e3 	bl	8003350 <LL_RCC_MSI_IsReady>
 8003f8a:	4603      	mov	r3, r0
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d108      	bne.n	8003fa2 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8003f90:	2301      	movs	r3, #1
 8003f92:	e051      	b.n	8004038 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8003f94:	f7ff f88e 	bl	80030b4 <LL_RCC_HSI_IsReady>
 8003f98:	4603      	mov	r3, r0
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d101      	bne.n	8003fa2 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8003f9e:	2301      	movs	r3, #1
 8003fa0:	e04a      	b.n	8004038 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	685b      	ldr	r3, [r3, #4]
 8003fa6:	4618      	mov	r0, r3
 8003fa8:	f7ff fa21 	bl	80033ee <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003fac:	f7fe f86c 	bl	8002088 <HAL_GetTick>
 8003fb0:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003fb2:	e00a      	b.n	8003fca <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003fb4:	f7fe f868 	bl	8002088 <HAL_GetTick>
 8003fb8:	4602      	mov	r2, r0
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	1ad3      	subs	r3, r2, r3
 8003fbe:	f241 3288 	movw	r2, #5000	; 0x1388
 8003fc2:	4293      	cmp	r3, r2
 8003fc4:	d901      	bls.n	8003fca <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8003fc6:	2303      	movs	r3, #3
 8003fc8:	e036      	b.n	8004038 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003fca:	f7ff fa24 	bl	8003416 <LL_RCC_GetSysClkSource>
 8003fce:	4602      	mov	r2, r0
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	685b      	ldr	r3, [r3, #4]
 8003fd4:	009b      	lsls	r3, r3, #2
 8003fd6:	429a      	cmp	r2, r3
 8003fd8:	d1ec      	bne.n	8003fb4 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003fda:	4b19      	ldr	r3, [pc, #100]	; (8004040 <HAL_RCC_ClockConfig+0x278>)
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	f003 0307 	and.w	r3, r3, #7
 8003fe2:	683a      	ldr	r2, [r7, #0]
 8003fe4:	429a      	cmp	r2, r3
 8003fe6:	d21b      	bcs.n	8004020 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003fe8:	4b15      	ldr	r3, [pc, #84]	; (8004040 <HAL_RCC_ClockConfig+0x278>)
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	f023 0207 	bic.w	r2, r3, #7
 8003ff0:	4913      	ldr	r1, [pc, #76]	; (8004040 <HAL_RCC_ClockConfig+0x278>)
 8003ff2:	683b      	ldr	r3, [r7, #0]
 8003ff4:	4313      	orrs	r3, r2
 8003ff6:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003ff8:	f7fe f846 	bl	8002088 <HAL_GetTick>
 8003ffc:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ffe:	e008      	b.n	8004012 <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8004000:	f7fe f842 	bl	8002088 <HAL_GetTick>
 8004004:	4602      	mov	r2, r0
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	1ad3      	subs	r3, r2, r3
 800400a:	2b02      	cmp	r3, #2
 800400c:	d901      	bls.n	8004012 <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 800400e:	2303      	movs	r3, #3
 8004010:	e012      	b.n	8004038 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004012:	4b0b      	ldr	r3, [pc, #44]	; (8004040 <HAL_RCC_ClockConfig+0x278>)
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	f003 0307 	and.w	r3, r3, #7
 800401a:	683a      	ldr	r2, [r7, #0]
 800401c:	429a      	cmp	r2, r3
 800401e:	d1ef      	bne.n	8004000 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8004020:	f000 f87e 	bl	8004120 <HAL_RCC_GetHCLKFreq>
 8004024:	4602      	mov	r2, r0
 8004026:	4b07      	ldr	r3, [pc, #28]	; (8004044 <HAL_RCC_ClockConfig+0x27c>)
 8004028:	601a      	str	r2, [r3, #0]
  
  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 800402a:	f7fe f839 	bl	80020a0 <HAL_GetTickPrio>
 800402e:	4603      	mov	r3, r0
 8004030:	4618      	mov	r0, r3
 8004032:	f7fd ffdb 	bl	8001fec <HAL_InitTick>
 8004036:	4603      	mov	r3, r0
}
 8004038:	4618      	mov	r0, r3
 800403a:	3710      	adds	r7, #16
 800403c:	46bd      	mov	sp, r7
 800403e:	bd80      	pop	{r7, pc}
 8004040:	58004000 	.word	0x58004000
 8004044:	20000004 	.word	0x20000004

08004048 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004048:	b590      	push	{r4, r7, lr}
 800404a:	b085      	sub	sp, #20
 800404c:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq, pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800404e:	f7ff f9e2 	bl	8003416 <LL_RCC_GetSysClkSource>
 8004052:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	2b00      	cmp	r3, #0
 8004058:	d10a      	bne.n	8004070 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 800405a:	f7ff f99e 	bl	800339a <LL_RCC_MSI_GetRange>
 800405e:	4603      	mov	r3, r0
 8004060:	091b      	lsrs	r3, r3, #4
 8004062:	f003 030f 	and.w	r3, r3, #15
 8004066:	4a2a      	ldr	r2, [pc, #168]	; (8004110 <HAL_RCC_GetSysClockFreq+0xc8>)
 8004068:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800406c:	60fb      	str	r3, [r7, #12]
 800406e:	e04a      	b.n	8004106 <HAL_RCC_GetSysClockFreq+0xbe>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	2b04      	cmp	r3, #4
 8004074:	d102      	bne.n	800407c <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004076:	4b27      	ldr	r3, [pc, #156]	; (8004114 <HAL_RCC_GetSysClockFreq+0xcc>)
 8004078:	60fb      	str	r3, [r7, #12]
 800407a:	e044      	b.n	8004106 <HAL_RCC_GetSysClockFreq+0xbe>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	2b08      	cmp	r3, #8
 8004080:	d10a      	bne.n	8004098 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8004082:	f7fe ffb7 	bl	8002ff4 <LL_RCC_HSE_IsEnabledDiv2>
 8004086:	4603      	mov	r3, r0
 8004088:	2b01      	cmp	r3, #1
 800408a:	d102      	bne.n	8004092 <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 800408c:	4b22      	ldr	r3, [pc, #136]	; (8004118 <HAL_RCC_GetSysClockFreq+0xd0>)
 800408e:	60fb      	str	r3, [r7, #12]
 8004090:	e039      	b.n	8004106 <HAL_RCC_GetSysClockFreq+0xbe>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8004092:	4b22      	ldr	r3, [pc, #136]	; (800411c <HAL_RCC_GetSysClockFreq+0xd4>)
 8004094:	60fb      	str	r3, [r7, #12]
 8004096:	e036      	b.n	8004106 <HAL_RCC_GetSysClockFreq+0xbe>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8004098:	f7ff faa1 	bl	80035de <LL_RCC_PLL_GetMainSource>
 800409c:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 800409e:	683b      	ldr	r3, [r7, #0]
 80040a0:	2b02      	cmp	r3, #2
 80040a2:	d002      	beq.n	80040aa <HAL_RCC_GetSysClockFreq+0x62>
 80040a4:	2b03      	cmp	r3, #3
 80040a6:	d003      	beq.n	80040b0 <HAL_RCC_GetSysClockFreq+0x68>
 80040a8:	e00d      	b.n	80040c6 <HAL_RCC_GetSysClockFreq+0x7e>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 80040aa:	4b1a      	ldr	r3, [pc, #104]	; (8004114 <HAL_RCC_GetSysClockFreq+0xcc>)
 80040ac:	60bb      	str	r3, [r7, #8]
        break;
 80040ae:	e015      	b.n	80040dc <HAL_RCC_GetSysClockFreq+0x94>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 80040b0:	f7fe ffa0 	bl	8002ff4 <LL_RCC_HSE_IsEnabledDiv2>
 80040b4:	4603      	mov	r3, r0
 80040b6:	2b01      	cmp	r3, #1
 80040b8:	d102      	bne.n	80040c0 <HAL_RCC_GetSysClockFreq+0x78>
        {
          pllinputfreq = HSE_VALUE / 2U;
 80040ba:	4b17      	ldr	r3, [pc, #92]	; (8004118 <HAL_RCC_GetSysClockFreq+0xd0>)
 80040bc:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 80040be:	e00d      	b.n	80040dc <HAL_RCC_GetSysClockFreq+0x94>
          pllinputfreq = HSE_VALUE;
 80040c0:	4b16      	ldr	r3, [pc, #88]	; (800411c <HAL_RCC_GetSysClockFreq+0xd4>)
 80040c2:	60bb      	str	r3, [r7, #8]
        break;
 80040c4:	e00a      	b.n	80040dc <HAL_RCC_GetSysClockFreq+0x94>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 80040c6:	f7ff f968 	bl	800339a <LL_RCC_MSI_GetRange>
 80040ca:	4603      	mov	r3, r0
 80040cc:	091b      	lsrs	r3, r3, #4
 80040ce:	f003 030f 	and.w	r3, r3, #15
 80040d2:	4a0f      	ldr	r2, [pc, #60]	; (8004110 <HAL_RCC_GetSysClockFreq+0xc8>)
 80040d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80040d8:	60bb      	str	r3, [r7, #8]
        break;
 80040da:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
 80040dc:	f7ff fa5a 	bl	8003594 <LL_RCC_PLL_GetN>
 80040e0:	4602      	mov	r2, r0
 80040e2:	68bb      	ldr	r3, [r7, #8]
 80040e4:	fb03 f402 	mul.w	r4, r3, r2
 80040e8:	f7ff fa6d 	bl	80035c6 <LL_RCC_PLL_GetDivider>
 80040ec:	4603      	mov	r3, r0
 80040ee:	091b      	lsrs	r3, r3, #4
 80040f0:	3301      	adds	r3, #1
 80040f2:	fbb4 f4f3 	udiv	r4, r4, r3
 80040f6:	f7ff fa5a 	bl	80035ae <LL_RCC_PLL_GetR>
 80040fa:	4603      	mov	r3, r0
 80040fc:	0f5b      	lsrs	r3, r3, #29
 80040fe:	3301      	adds	r3, #1
 8004100:	fbb4 f3f3 	udiv	r3, r4, r3
 8004104:	60fb      	str	r3, [r7, #12]
  }

  return sysclockfreq;
 8004106:	68fb      	ldr	r3, [r7, #12]
}
 8004108:	4618      	mov	r0, r3
 800410a:	3714      	adds	r7, #20
 800410c:	46bd      	mov	sp, r7
 800410e:	bd90      	pop	{r4, r7, pc}
 8004110:	080080e0 	.word	0x080080e0
 8004114:	00f42400 	.word	0x00f42400
 8004118:	003d0900 	.word	0x003d0900
 800411c:	007a1200 	.word	0x007a1200

08004120 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004120:	b598      	push	{r3, r4, r7, lr}
 8004122:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8004124:	f7ff ff90 	bl	8004048 <HAL_RCC_GetSysClockFreq>
 8004128:	4604      	mov	r4, r0
 800412a:	f7ff f9e9 	bl	8003500 <LL_RCC_GetAHBPrescaler>
 800412e:	4603      	mov	r3, r0
 8004130:	091b      	lsrs	r3, r3, #4
 8004132:	f003 030f 	and.w	r3, r3, #15
 8004136:	4a03      	ldr	r2, [pc, #12]	; (8004144 <HAL_RCC_GetHCLKFreq+0x24>)
 8004138:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800413c:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8004140:	4618      	mov	r0, r3
 8004142:	bd98      	pop	{r3, r4, r7, pc}
 8004144:	080080a0 	.word	0x080080a0

08004148 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8004148:	b590      	push	{r4, r7, lr}
 800414a:	b085      	sub	sp, #20
 800414c:	af00      	add	r7, sp, #0
 800414e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	2bb0      	cmp	r3, #176	; 0xb0
 8004154:	d903      	bls.n	800415e <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 8004156:	4b15      	ldr	r3, [pc, #84]	; (80041ac <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8004158:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800415a:	60fb      	str	r3, [r7, #12]
 800415c:	e007      	b.n	800416e <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	091b      	lsrs	r3, r3, #4
 8004162:	f003 030f 	and.w	r3, r3, #15
 8004166:	4a11      	ldr	r2, [pc, #68]	; (80041ac <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8004168:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800416c:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 800416e:	f7ff f9d3 	bl	8003518 <LL_RCC_GetAHB4Prescaler>
 8004172:	4603      	mov	r3, r0
 8004174:	091b      	lsrs	r3, r3, #4
 8004176:	f003 030f 	and.w	r3, r3, #15
 800417a:	4a0d      	ldr	r2, [pc, #52]	; (80041b0 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 800417c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004180:	68fa      	ldr	r2, [r7, #12]
 8004182:	fbb2 f3f3 	udiv	r3, r2, r3
 8004186:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8004188:	68bb      	ldr	r3, [r7, #8]
 800418a:	4a0a      	ldr	r2, [pc, #40]	; (80041b4 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 800418c:	fba2 2303 	umull	r2, r3, r2, r3
 8004190:	0c9c      	lsrs	r4, r3, #18
 8004192:	f7fe ff21 	bl	8002fd8 <HAL_PWREx_GetVoltageRange>
 8004196:	4603      	mov	r3, r0
 8004198:	4619      	mov	r1, r3
 800419a:	4620      	mov	r0, r4
 800419c:	f000 f80c 	bl	80041b8 <RCC_SetFlashLatency>
 80041a0:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif
}
 80041a2:	4618      	mov	r0, r3
 80041a4:	3714      	adds	r7, #20
 80041a6:	46bd      	mov	sp, r7
 80041a8:	bd90      	pop	{r4, r7, pc}
 80041aa:	bf00      	nop
 80041ac:	080080e0 	.word	0x080080e0
 80041b0:	080080a0 	.word	0x080080a0
 80041b4:	431bde83 	.word	0x431bde83

080041b8 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 80041b8:	b590      	push	{r4, r7, lr}
 80041ba:	b093      	sub	sp, #76	; 0x4c
 80041bc:	af00      	add	r7, sp, #0
 80041be:	6078      	str	r0, [r7, #4]
 80041c0:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 80041c2:	4b39      	ldr	r3, [pc, #228]	; (80042a8 <RCC_SetFlashLatency+0xf0>)
 80041c4:	f107 0428 	add.w	r4, r7, #40	; 0x28
 80041c8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80041ca:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 80041ce:	4a37      	ldr	r2, [pc, #220]	; (80042ac <RCC_SetFlashLatency+0xf4>)
 80041d0:	f107 031c 	add.w	r3, r7, #28
 80041d4:	ca07      	ldmia	r2, {r0, r1, r2}
 80041d6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 80041da:	4b35      	ldr	r3, [pc, #212]	; (80042b0 <RCC_SetFlashLatency+0xf8>)
 80041dc:	f107 040c 	add.w	r4, r7, #12
 80041e0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80041e2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 80041e6:	2300      	movs	r3, #0
 80041e8:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 80041ea:	683b      	ldr	r3, [r7, #0]
 80041ec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80041f0:	d11c      	bne.n	800422c <RCC_SetFlashLatency+0x74>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 80041f2:	2300      	movs	r3, #0
 80041f4:	643b      	str	r3, [r7, #64]	; 0x40
 80041f6:	e015      	b.n	8004224 <RCC_SetFlashLatency+0x6c>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 80041f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80041fa:	009b      	lsls	r3, r3, #2
 80041fc:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8004200:	4413      	add	r3, r2
 8004202:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8004206:	687a      	ldr	r2, [r7, #4]
 8004208:	429a      	cmp	r2, r3
 800420a:	d808      	bhi.n	800421e <RCC_SetFlashLatency+0x66>
      {
        latency = FLASH_LATENCY_RANGE[index];
 800420c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800420e:	009b      	lsls	r3, r3, #2
 8004210:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8004214:	4413      	add	r3, r2
 8004216:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 800421a:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 800421c:	e022      	b.n	8004264 <RCC_SetFlashLatency+0xac>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800421e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004220:	3301      	adds	r3, #1
 8004222:	643b      	str	r3, [r7, #64]	; 0x40
 8004224:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004226:	2b03      	cmp	r3, #3
 8004228:	d9e6      	bls.n	80041f8 <RCC_SetFlashLatency+0x40>
 800422a:	e01b      	b.n	8004264 <RCC_SetFlashLatency+0xac>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 800422c:	2300      	movs	r3, #0
 800422e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004230:	e015      	b.n	800425e <RCC_SetFlashLatency+0xa6>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8004232:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004234:	009b      	lsls	r3, r3, #2
 8004236:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800423a:	4413      	add	r3, r2
 800423c:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8004240:	687a      	ldr	r2, [r7, #4]
 8004242:	429a      	cmp	r2, r3
 8004244:	d808      	bhi.n	8004258 <RCC_SetFlashLatency+0xa0>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8004246:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004248:	009b      	lsls	r3, r3, #2
 800424a:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800424e:	4413      	add	r3, r2
 8004250:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8004254:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8004256:	e005      	b.n	8004264 <RCC_SetFlashLatency+0xac>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8004258:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800425a:	3301      	adds	r3, #1
 800425c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800425e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004260:	2b02      	cmp	r3, #2
 8004262:	d9e6      	bls.n	8004232 <RCC_SetFlashLatency+0x7a>
      break;
    }
  }
#endif

  __HAL_FLASH_SET_LATENCY(latency);
 8004264:	4b13      	ldr	r3, [pc, #76]	; (80042b4 <RCC_SetFlashLatency+0xfc>)
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	f023 0207 	bic.w	r2, r3, #7
 800426c:	4911      	ldr	r1, [pc, #68]	; (80042b4 <RCC_SetFlashLatency+0xfc>)
 800426e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004270:	4313      	orrs	r3, r2
 8004272:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8004274:	f7fd ff08 	bl	8002088 <HAL_GetTick>
 8004278:	63b8      	str	r0, [r7, #56]	; 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800427a:	e008      	b.n	800428e <RCC_SetFlashLatency+0xd6>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800427c:	f7fd ff04 	bl	8002088 <HAL_GetTick>
 8004280:	4602      	mov	r2, r0
 8004282:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004284:	1ad3      	subs	r3, r2, r3
 8004286:	2b02      	cmp	r3, #2
 8004288:	d901      	bls.n	800428e <RCC_SetFlashLatency+0xd6>
    {
      return HAL_TIMEOUT;
 800428a:	2303      	movs	r3, #3
 800428c:	e007      	b.n	800429e <RCC_SetFlashLatency+0xe6>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800428e:	4b09      	ldr	r3, [pc, #36]	; (80042b4 <RCC_SetFlashLatency+0xfc>)
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	f003 0307 	and.w	r3, r3, #7
 8004296:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004298:	429a      	cmp	r2, r3
 800429a:	d1ef      	bne.n	800427c <RCC_SetFlashLatency+0xc4>
    }
  }
  return HAL_OK;
 800429c:	2300      	movs	r3, #0
}
 800429e:	4618      	mov	r0, r3
 80042a0:	374c      	adds	r7, #76	; 0x4c
 80042a2:	46bd      	mov	sp, r7
 80042a4:	bd90      	pop	{r4, r7, pc}
 80042a6:	bf00      	nop
 80042a8:	08007350 	.word	0x08007350
 80042ac:	08007360 	.word	0x08007360
 80042b0:	0800736c 	.word	0x0800736c
 80042b4:	58004000 	.word	0x58004000

080042b8 <LL_RCC_LSE_IsEnabled>:
{
 80042b8:	b480      	push	{r7}
 80042ba:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 80042bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80042c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042c4:	f003 0301 	and.w	r3, r3, #1
 80042c8:	2b01      	cmp	r3, #1
 80042ca:	d101      	bne.n	80042d0 <LL_RCC_LSE_IsEnabled+0x18>
 80042cc:	2301      	movs	r3, #1
 80042ce:	e000      	b.n	80042d2 <LL_RCC_LSE_IsEnabled+0x1a>
 80042d0:	2300      	movs	r3, #0
}
 80042d2:	4618      	mov	r0, r3
 80042d4:	46bd      	mov	sp, r7
 80042d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042da:	4770      	bx	lr

080042dc <LL_RCC_LSE_IsReady>:
{
 80042dc:	b480      	push	{r7}
 80042de:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80042e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80042e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042e8:	f003 0302 	and.w	r3, r3, #2
 80042ec:	2b02      	cmp	r3, #2
 80042ee:	d101      	bne.n	80042f4 <LL_RCC_LSE_IsReady+0x18>
 80042f0:	2301      	movs	r3, #1
 80042f2:	e000      	b.n	80042f6 <LL_RCC_LSE_IsReady+0x1a>
 80042f4:	2300      	movs	r3, #0
}
 80042f6:	4618      	mov	r0, r3
 80042f8:	46bd      	mov	sp, r7
 80042fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042fe:	4770      	bx	lr

08004300 <LL_RCC_SetRFWKPClockSource>:
{
 8004300:	b480      	push	{r7}
 8004302:	b083      	sub	sp, #12
 8004304:	af00      	add	r7, sp, #0
 8004306:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 8004308:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800430c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004310:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004314:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	4313      	orrs	r3, r2
 800431c:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8004320:	bf00      	nop
 8004322:	370c      	adds	r7, #12
 8004324:	46bd      	mov	sp, r7
 8004326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800432a:	4770      	bx	lr

0800432c <LL_RCC_SetSMPSClockSource>:
{
 800432c:	b480      	push	{r7}
 800432e:	b083      	sub	sp, #12
 8004330:	af00      	add	r7, sp, #0
 8004332:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 8004334:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004338:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800433a:	f023 0203 	bic.w	r2, r3, #3
 800433e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	4313      	orrs	r3, r2
 8004346:	624b      	str	r3, [r1, #36]	; 0x24
}
 8004348:	bf00      	nop
 800434a:	370c      	adds	r7, #12
 800434c:	46bd      	mov	sp, r7
 800434e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004352:	4770      	bx	lr

08004354 <LL_RCC_SetSMPSPrescaler>:
{
 8004354:	b480      	push	{r7}
 8004356:	b083      	sub	sp, #12
 8004358:	af00      	add	r7, sp, #0
 800435a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 800435c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004360:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004362:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004366:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	4313      	orrs	r3, r2
 800436e:	624b      	str	r3, [r1, #36]	; 0x24
}
 8004370:	bf00      	nop
 8004372:	370c      	adds	r7, #12
 8004374:	46bd      	mov	sp, r7
 8004376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800437a:	4770      	bx	lr

0800437c <LL_RCC_SetUSARTClockSource>:
{
 800437c:	b480      	push	{r7}
 800437e:	b083      	sub	sp, #12
 8004380:	af00      	add	r7, sp, #0
 8004382:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 8004384:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004388:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800438c:	f023 0203 	bic.w	r2, r3, #3
 8004390:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	4313      	orrs	r3, r2
 8004398:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800439c:	bf00      	nop
 800439e:	370c      	adds	r7, #12
 80043a0:	46bd      	mov	sp, r7
 80043a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a6:	4770      	bx	lr

080043a8 <LL_RCC_SetLPUARTClockSource>:
{
 80043a8:	b480      	push	{r7}
 80043aa:	b083      	sub	sp, #12
 80043ac:	af00      	add	r7, sp, #0
 80043ae:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 80043b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80043b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043b8:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80043bc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	4313      	orrs	r3, r2
 80043c4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80043c8:	bf00      	nop
 80043ca:	370c      	adds	r7, #12
 80043cc:	46bd      	mov	sp, r7
 80043ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d2:	4770      	bx	lr

080043d4 <LL_RCC_SetI2CClockSource>:
{
 80043d4:	b480      	push	{r7}
 80043d6:	b083      	sub	sp, #12
 80043d8:	af00      	add	r7, sp, #0
 80043da:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 80043dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80043e0:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	091b      	lsrs	r3, r3, #4
 80043e8:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 80043ec:	43db      	mvns	r3, r3
 80043ee:	401a      	ands	r2, r3
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	011b      	lsls	r3, r3, #4
 80043f4:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 80043f8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80043fc:	4313      	orrs	r3, r2
 80043fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004402:	bf00      	nop
 8004404:	370c      	adds	r7, #12
 8004406:	46bd      	mov	sp, r7
 8004408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800440c:	4770      	bx	lr

0800440e <LL_RCC_SetLPTIMClockSource>:
{
 800440e:	b480      	push	{r7}
 8004410:	b083      	sub	sp, #12
 8004412:	af00      	add	r7, sp, #0
 8004414:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8004416:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800441a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	0c1b      	lsrs	r3, r3, #16
 8004422:	041b      	lsls	r3, r3, #16
 8004424:	43db      	mvns	r3, r3
 8004426:	401a      	ands	r2, r3
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	041b      	lsls	r3, r3, #16
 800442c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004430:	4313      	orrs	r3, r2
 8004432:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004436:	bf00      	nop
 8004438:	370c      	adds	r7, #12
 800443a:	46bd      	mov	sp, r7
 800443c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004440:	4770      	bx	lr

08004442 <LL_RCC_SetSAIClockSource>:
{
 8004442:	b480      	push	{r7}
 8004444:	b083      	sub	sp, #12
 8004446:	af00      	add	r7, sp, #0
 8004448:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 800444a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800444e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004452:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004456:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	4313      	orrs	r3, r2
 800445e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004462:	bf00      	nop
 8004464:	370c      	adds	r7, #12
 8004466:	46bd      	mov	sp, r7
 8004468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800446c:	4770      	bx	lr

0800446e <LL_RCC_SetRNGClockSource>:
{
 800446e:	b480      	push	{r7}
 8004470:	b083      	sub	sp, #12
 8004472:	af00      	add	r7, sp, #0
 8004474:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8004476:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800447a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800447e:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8004482:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	4313      	orrs	r3, r2
 800448a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800448e:	bf00      	nop
 8004490:	370c      	adds	r7, #12
 8004492:	46bd      	mov	sp, r7
 8004494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004498:	4770      	bx	lr

0800449a <LL_RCC_SetCLK48ClockSource>:
{
 800449a:	b480      	push	{r7}
 800449c:	b083      	sub	sp, #12
 800449e:	af00      	add	r7, sp, #0
 80044a0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 80044a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80044a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044aa:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80044ae:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	4313      	orrs	r3, r2
 80044b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80044ba:	bf00      	nop
 80044bc:	370c      	adds	r7, #12
 80044be:	46bd      	mov	sp, r7
 80044c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c4:	4770      	bx	lr

080044c6 <LL_RCC_SetUSBClockSource>:
{
 80044c6:	b580      	push	{r7, lr}
 80044c8:	b082      	sub	sp, #8
 80044ca:	af00      	add	r7, sp, #0
 80044cc:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 80044ce:	6878      	ldr	r0, [r7, #4]
 80044d0:	f7ff ffe3 	bl	800449a <LL_RCC_SetCLK48ClockSource>
}
 80044d4:	bf00      	nop
 80044d6:	3708      	adds	r7, #8
 80044d8:	46bd      	mov	sp, r7
 80044da:	bd80      	pop	{r7, pc}

080044dc <LL_RCC_SetADCClockSource>:
{
 80044dc:	b480      	push	{r7}
 80044de:	b083      	sub	sp, #12
 80044e0:	af00      	add	r7, sp, #0
 80044e2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 80044e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80044e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044ec:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80044f0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	4313      	orrs	r3, r2
 80044f8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80044fc:	bf00      	nop
 80044fe:	370c      	adds	r7, #12
 8004500:	46bd      	mov	sp, r7
 8004502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004506:	4770      	bx	lr

08004508 <LL_RCC_SetRTCClockSource>:
{
 8004508:	b480      	push	{r7}
 800450a:	b083      	sub	sp, #12
 800450c:	af00      	add	r7, sp, #0
 800450e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8004510:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004514:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004518:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800451c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	4313      	orrs	r3, r2
 8004524:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8004528:	bf00      	nop
 800452a:	370c      	adds	r7, #12
 800452c:	46bd      	mov	sp, r7
 800452e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004532:	4770      	bx	lr

08004534 <LL_RCC_GetRTCClockSource>:
{
 8004534:	b480      	push	{r7}
 8004536:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8004538:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800453c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004540:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 8004544:	4618      	mov	r0, r3
 8004546:	46bd      	mov	sp, r7
 8004548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800454c:	4770      	bx	lr

0800454e <LL_RCC_ForceBackupDomainReset>:
{
 800454e:	b480      	push	{r7}
 8004550:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8004552:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004556:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800455a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800455e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004562:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8004566:	bf00      	nop
 8004568:	46bd      	mov	sp, r7
 800456a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800456e:	4770      	bx	lr

08004570 <LL_RCC_ReleaseBackupDomainReset>:
{
 8004570:	b480      	push	{r7}
 8004572:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8004574:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004578:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800457c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004580:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004584:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8004588:	bf00      	nop
 800458a:	46bd      	mov	sp, r7
 800458c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004590:	4770      	bx	lr

08004592 <LL_RCC_PLLSAI1_Enable>:
{
 8004592:	b480      	push	{r7}
 8004594:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8004596:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80045a0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80045a4:	6013      	str	r3, [r2, #0]
}
 80045a6:	bf00      	nop
 80045a8:	46bd      	mov	sp, r7
 80045aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ae:	4770      	bx	lr

080045b0 <LL_RCC_PLLSAI1_Disable>:
{
 80045b0:	b480      	push	{r7}
 80045b2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 80045b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80045be:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80045c2:	6013      	str	r3, [r2, #0]
}
 80045c4:	bf00      	nop
 80045c6:	46bd      	mov	sp, r7
 80045c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045cc:	4770      	bx	lr

080045ce <LL_RCC_PLLSAI1_IsReady>:
{
 80045ce:	b480      	push	{r7}
 80045d0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 80045d2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80045dc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80045e0:	d101      	bne.n	80045e6 <LL_RCC_PLLSAI1_IsReady+0x18>
 80045e2:	2301      	movs	r3, #1
 80045e4:	e000      	b.n	80045e8 <LL_RCC_PLLSAI1_IsReady+0x1a>
 80045e6:	2300      	movs	r3, #0
}
 80045e8:	4618      	mov	r0, r3
 80045ea:	46bd      	mov	sp, r7
 80045ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f0:	4770      	bx	lr

080045f2 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80045f2:	b580      	push	{r7, lr}
 80045f4:	b088      	sub	sp, #32
 80045f6:	af00      	add	r7, sp, #0
 80045f8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 80045fa:	2300      	movs	r3, #0
 80045fc:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 80045fe:	2300      	movs	r3, #0
 8004600:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800460a:	2b00      	cmp	r3, #0
 800460c:	d033      	beq.n	8004676 <HAL_RCCEx_PeriphCLKConfig+0x84>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004612:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004616:	d00c      	beq.n	8004632 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8004618:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800461c:	d802      	bhi.n	8004624 <HAL_RCCEx_PeriphCLKConfig+0x32>
 800461e:	2b00      	cmp	r3, #0
 8004620:	d010      	beq.n	8004644 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8004622:	e017      	b.n	8004654 <HAL_RCCEx_PeriphCLKConfig+0x62>
 8004624:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004628:	d017      	beq.n	800465a <HAL_RCCEx_PeriphCLKConfig+0x68>
 800462a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800462e:	d016      	beq.n	800465e <HAL_RCCEx_PeriphCLKConfig+0x6c>
 8004630:	e010      	b.n	8004654 <HAL_RCCEx_PeriphCLKConfig+0x62>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 8004632:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004636:	68db      	ldr	r3, [r3, #12]
 8004638:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800463c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004640:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 8004642:	e00d      	b.n	8004660 <HAL_RCCEx_PeriphCLKConfig+0x6e>

#if defined(SAI1)
      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	3304      	adds	r3, #4
 8004648:	4618      	mov	r0, r3
 800464a:	f000 f947 	bl	80048dc <RCCEx_PLLSAI1_ConfigNP>
 800464e:	4603      	mov	r3, r0
 8004650:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8004652:	e005      	b.n	8004660 <HAL_RCCEx_PeriphCLKConfig+0x6e>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 8004654:	2301      	movs	r3, #1
 8004656:	77fb      	strb	r3, [r7, #31]
        break;
 8004658:	e002      	b.n	8004660 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        break;
 800465a:	bf00      	nop
 800465c:	e000      	b.n	8004660 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        break;
 800465e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004660:	7ffb      	ldrb	r3, [r7, #31]
 8004662:	2b00      	cmp	r3, #0
 8004664:	d105      	bne.n	8004672 <HAL_RCCEx_PeriphCLKConfig+0x80>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800466a:	4618      	mov	r0, r3
 800466c:	f7ff fee9 	bl	8004442 <LL_RCC_SetSAIClockSource>
 8004670:	e001      	b.n	8004676 <HAL_RCCEx_PeriphCLKConfig+0x84>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004672:	7ffb      	ldrb	r3, [r7, #31]
 8004674:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800467e:	2b00      	cmp	r3, #0
 8004680:	d046      	beq.n	8004710 <HAL_RCCEx_PeriphCLKConfig+0x11e>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 8004682:	f7ff ff57 	bl	8004534 <LL_RCC_GetRTCClockSource>
 8004686:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800468c:	69ba      	ldr	r2, [r7, #24]
 800468e:	429a      	cmp	r2, r3
 8004690:	d03c      	beq.n	800470c <HAL_RCCEx_PeriphCLKConfig+0x11a>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8004692:	f7fe fc91 	bl	8002fb8 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 8004696:	69bb      	ldr	r3, [r7, #24]
 8004698:	2b00      	cmp	r3, #0
 800469a:	d105      	bne.n	80046a8 <HAL_RCCEx_PeriphCLKConfig+0xb6>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046a0:	4618      	mov	r0, r3
 80046a2:	f7ff ff31 	bl	8004508 <LL_RCC_SetRTCClockSource>
 80046a6:	e02e      	b.n	8004706 <HAL_RCCEx_PeriphCLKConfig+0x114>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 80046a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80046ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046b0:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 80046b2:	f7ff ff4c 	bl	800454e <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 80046b6:	f7ff ff5b 	bl	8004570 <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 80046ba:	697b      	ldr	r3, [r7, #20]
 80046bc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046c4:	4313      	orrs	r3, r2
 80046c6:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 80046c8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80046cc:	697b      	ldr	r3, [r7, #20]
 80046ce:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 80046d2:	f7ff fdf1 	bl	80042b8 <LL_RCC_LSE_IsEnabled>
 80046d6:	4603      	mov	r3, r0
 80046d8:	2b01      	cmp	r3, #1
 80046da:	d114      	bne.n	8004706 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80046dc:	f7fd fcd4 	bl	8002088 <HAL_GetTick>
 80046e0:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 80046e2:	e00b      	b.n	80046fc <HAL_RCCEx_PeriphCLKConfig+0x10a>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80046e4:	f7fd fcd0 	bl	8002088 <HAL_GetTick>
 80046e8:	4602      	mov	r2, r0
 80046ea:	693b      	ldr	r3, [r7, #16]
 80046ec:	1ad3      	subs	r3, r2, r3
 80046ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80046f2:	4293      	cmp	r3, r2
 80046f4:	d902      	bls.n	80046fc <HAL_RCCEx_PeriphCLKConfig+0x10a>
            {
              ret = HAL_TIMEOUT;
 80046f6:	2303      	movs	r3, #3
 80046f8:	77fb      	strb	r3, [r7, #31]
              break;
 80046fa:	e004      	b.n	8004706 <HAL_RCCEx_PeriphCLKConfig+0x114>
          while (LL_RCC_LSE_IsReady() != 1U)
 80046fc:	f7ff fdee 	bl	80042dc <LL_RCC_LSE_IsReady>
 8004700:	4603      	mov	r3, r0
 8004702:	2b01      	cmp	r3, #1
 8004704:	d1ee      	bne.n	80046e4 <HAL_RCCEx_PeriphCLKConfig+0xf2>
          }
        }
      }

      /* set overall return value */
      status = ret;
 8004706:	7ffb      	ldrb	r3, [r7, #31]
 8004708:	77bb      	strb	r3, [r7, #30]
 800470a:	e001      	b.n	8004710 <HAL_RCCEx_PeriphCLKConfig+0x11e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800470c:	7ffb      	ldrb	r3, [r7, #31]
 800470e:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	f003 0301 	and.w	r3, r3, #1
 8004718:	2b00      	cmp	r3, #0
 800471a:	d004      	beq.n	8004726 <HAL_RCCEx_PeriphCLKConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	699b      	ldr	r3, [r3, #24]
 8004720:	4618      	mov	r0, r3
 8004722:	f7ff fe2b 	bl	800437c <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	f003 0302 	and.w	r3, r3, #2
 800472e:	2b00      	cmp	r3, #0
 8004730:	d004      	beq.n	800473c <HAL_RCCEx_PeriphCLKConfig+0x14a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	69db      	ldr	r3, [r3, #28]
 8004736:	4618      	mov	r0, r3
 8004738:	f7ff fe36 	bl	80043a8 <LL_RCC_SetLPUARTClockSource>
  }
#endif

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	f003 0310 	and.w	r3, r3, #16
 8004744:	2b00      	cmp	r3, #0
 8004746:	d004      	beq.n	8004752 <HAL_RCCEx_PeriphCLKConfig+0x160>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800474c:	4618      	mov	r0, r3
 800474e:	f7ff fe5e 	bl	800440e <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	f003 0320 	and.w	r3, r3, #32
 800475a:	2b00      	cmp	r3, #0
 800475c:	d004      	beq.n	8004768 <HAL_RCCEx_PeriphCLKConfig+0x176>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004762:	4618      	mov	r0, r3
 8004764:	f7ff fe53 	bl	800440e <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	f003 0304 	and.w	r3, r3, #4
 8004770:	2b00      	cmp	r3, #0
 8004772:	d004      	beq.n	800477e <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	6a1b      	ldr	r3, [r3, #32]
 8004778:	4618      	mov	r0, r3
 800477a:	f7ff fe2b 	bl	80043d4 <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	f003 0308 	and.w	r3, r3, #8
 8004786:	2b00      	cmp	r3, #0
 8004788:	d004      	beq.n	8004794 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800478e:	4618      	mov	r0, r3
 8004790:	f7ff fe20 	bl	80043d4 <LL_RCC_SetI2CClockSource>
  }
#endif

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800479c:	2b00      	cmp	r3, #0
 800479e:	d022      	beq.n	80047e6 <HAL_RCCEx_PeriphCLKConfig+0x1f4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047a4:	4618      	mov	r0, r3
 80047a6:	f7ff fe8e 	bl	80044c6 <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047ae:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80047b2:	d107      	bne.n	80047c4 <HAL_RCCEx_PeriphCLKConfig+0x1d2>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 80047b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80047b8:	68db      	ldr	r3, [r3, #12]
 80047ba:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80047be:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80047c2:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
  if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047c8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80047cc:	d10b      	bne.n	80047e6 <HAL_RCCEx_PeriphCLKConfig+0x1f4>
  {
    /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
    ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	3304      	adds	r3, #4
 80047d2:	4618      	mov	r0, r3
 80047d4:	f000 f8dd 	bl	8004992 <RCCEx_PLLSAI1_ConfigNQ>
 80047d8:	4603      	mov	r3, r0
 80047da:	77fb      	strb	r3, [r7, #31]

    if (ret != HAL_OK)
 80047dc:	7ffb      	ldrb	r3, [r7, #31]
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d001      	beq.n	80047e6 <HAL_RCCEx_PeriphCLKConfig+0x1f4>
    {
      /* set overall return value */
      status = ret;
 80047e2:	7ffb      	ldrb	r3, [r7, #31]
 80047e4:	77bb      	strb	r3, [r7, #30]
#endif
  }
#endif

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d02b      	beq.n	800484a <HAL_RCCEx_PeriphCLKConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80047fa:	d008      	beq.n	800480e <HAL_RCCEx_PeriphCLKConfig+0x21c>
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004800:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004804:	d003      	beq.n	800480e <HAL_RCCEx_PeriphCLKConfig+0x21c>
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800480a:	2b00      	cmp	r3, #0
 800480c:	d105      	bne.n	800481a <HAL_RCCEx_PeriphCLKConfig+0x228>
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004812:	4618      	mov	r0, r3
 8004814:	f7ff fe2b 	bl	800446e <LL_RCC_SetRNGClockSource>
 8004818:	e00a      	b.n	8004830 <HAL_RCCEx_PeriphCLKConfig+0x23e>
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800481e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004822:	60fb      	str	r3, [r7, #12]
 8004824:	2000      	movs	r0, #0
 8004826:	f7ff fe22 	bl	800446e <LL_RCC_SetRNGClockSource>
 800482a:	68f8      	ldr	r0, [r7, #12]
 800482c:	f7ff fe35 	bl	800449a <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004834:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 8004838:	d107      	bne.n	800484a <HAL_RCCEx_PeriphCLKConfig+0x258>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 800483a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800483e:	68db      	ldr	r3, [r3, #12]
 8004840:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004844:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004848:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004852:	2b00      	cmp	r3, #0
 8004854:	d022      	beq.n	800489c <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800485a:	4618      	mov	r0, r3
 800485c:	f7ff fe3e 	bl	80044dc <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004864:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004868:	d107      	bne.n	800487a <HAL_RCCEx_PeriphCLKConfig+0x288>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800486a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800486e:	68db      	ldr	r3, [r3, #12]
 8004870:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004874:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004878:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
  if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800487e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004882:	d10b      	bne.n	800489c <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
    ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	3304      	adds	r3, #4
 8004888:	4618      	mov	r0, r3
 800488a:	f000 f8dd 	bl	8004a48 <RCCEx_PLLSAI1_ConfigNR>
 800488e:	4603      	mov	r3, r0
 8004890:	77fb      	strb	r3, [r7, #31]

    if (ret != HAL_OK)
 8004892:	7ffb      	ldrb	r3, [r7, #31]
 8004894:	2b00      	cmp	r3, #0
 8004896:	d001      	beq.n	800489c <HAL_RCCEx_PeriphCLKConfig+0x2aa>
    {
      /* set overall return value */
      status = ret;
 8004898:	7ffb      	ldrb	r3, [r7, #31]
 800489a:	77bb      	strb	r3, [r7, #30]
  }
#endif
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d004      	beq.n	80048b2 <HAL_RCCEx_PeriphCLKConfig+0x2c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048ac:	4618      	mov	r0, r3
 80048ae:	f7ff fd27 	bl	8004300 <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d009      	beq.n	80048d2 <HAL_RCCEx_PeriphCLKConfig+0x2e0>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80048c2:	4618      	mov	r0, r3
 80048c4:	f7ff fd46 	bl	8004354 <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80048cc:	4618      	mov	r0, r3
 80048ce:	f7ff fd2d 	bl	800432c <LL_RCC_SetSMPSClockSource>
  }
#endif


  return status;
 80048d2:	7fbb      	ldrb	r3, [r7, #30]
}
 80048d4:	4618      	mov	r0, r3
 80048d6:	3720      	adds	r7, #32
 80048d8:	46bd      	mov	sp, r7
 80048da:	bd80      	pop	{r7, pc}

080048dc <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 80048dc:	b580      	push	{r7, lr}
 80048de:	b084      	sub	sp, #16
 80048e0:	af00      	add	r7, sp, #0
 80048e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80048e4:	2300      	movs	r3, #0
 80048e6:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 80048e8:	f7ff fe62 	bl	80045b0 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80048ec:	f7fd fbcc 	bl	8002088 <HAL_GetTick>
 80048f0:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80048f2:	e009      	b.n	8004908 <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80048f4:	f7fd fbc8 	bl	8002088 <HAL_GetTick>
 80048f8:	4602      	mov	r2, r0
 80048fa:	68bb      	ldr	r3, [r7, #8]
 80048fc:	1ad3      	subs	r3, r2, r3
 80048fe:	2b02      	cmp	r3, #2
 8004900:	d902      	bls.n	8004908 <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 8004902:	2303      	movs	r3, #3
 8004904:	73fb      	strb	r3, [r7, #15]
      break;
 8004906:	e004      	b.n	8004912 <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8004908:	f7ff fe61 	bl	80045ce <LL_RCC_PLLSAI1_IsReady>
 800490c:	4603      	mov	r3, r0
 800490e:	2b00      	cmp	r3, #0
 8004910:	d1f0      	bne.n	80048f4 <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 8004912:	7bfb      	ldrb	r3, [r7, #15]
 8004914:	2b00      	cmp	r3, #0
 8004916:	d137      	bne.n	8004988 <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8004918:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800491c:	691b      	ldr	r3, [r3, #16]
 800491e:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	021b      	lsls	r3, r3, #8
 8004928:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800492c:	4313      	orrs	r3, r2
 800492e:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 8004930:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004934:	691b      	ldr	r3, [r3, #16]
 8004936:	f423 1278 	bic.w	r2, r3, #4063232	; 0x3e0000
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	685b      	ldr	r3, [r3, #4]
 800493e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004942:	4313      	orrs	r3, r2
 8004944:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8004946:	f7ff fe24 	bl	8004592 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800494a:	f7fd fb9d 	bl	8002088 <HAL_GetTick>
 800494e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8004950:	e009      	b.n	8004966 <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004952:	f7fd fb99 	bl	8002088 <HAL_GetTick>
 8004956:	4602      	mov	r2, r0
 8004958:	68bb      	ldr	r3, [r7, #8]
 800495a:	1ad3      	subs	r3, r2, r3
 800495c:	2b02      	cmp	r3, #2
 800495e:	d902      	bls.n	8004966 <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 8004960:	2303      	movs	r3, #3
 8004962:	73fb      	strb	r3, [r7, #15]
        break;
 8004964:	e004      	b.n	8004970 <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8004966:	f7ff fe32 	bl	80045ce <LL_RCC_PLLSAI1_IsReady>
 800496a:	4603      	mov	r3, r0
 800496c:	2b01      	cmp	r3, #1
 800496e:	d1f0      	bne.n	8004952 <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 8004970:	7bfb      	ldrb	r3, [r7, #15]
 8004972:	2b00      	cmp	r3, #0
 8004974:	d108      	bne.n	8004988 <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8004976:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800497a:	691a      	ldr	r2, [r3, #16]
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	691b      	ldr	r3, [r3, #16]
 8004980:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004984:	4313      	orrs	r3, r2
 8004986:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8004988:	7bfb      	ldrb	r3, [r7, #15]
}
 800498a:	4618      	mov	r0, r3
 800498c:	3710      	adds	r7, #16
 800498e:	46bd      	mov	sp, r7
 8004990:	bd80      	pop	{r7, pc}

08004992 <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8004992:	b580      	push	{r7, lr}
 8004994:	b084      	sub	sp, #16
 8004996:	af00      	add	r7, sp, #0
 8004998:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800499a:	2300      	movs	r3, #0
 800499c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800499e:	f7ff fe07 	bl	80045b0 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80049a2:	f7fd fb71 	bl	8002088 <HAL_GetTick>
 80049a6:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80049a8:	e009      	b.n	80049be <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80049aa:	f7fd fb6d 	bl	8002088 <HAL_GetTick>
 80049ae:	4602      	mov	r2, r0
 80049b0:	68bb      	ldr	r3, [r7, #8]
 80049b2:	1ad3      	subs	r3, r2, r3
 80049b4:	2b02      	cmp	r3, #2
 80049b6:	d902      	bls.n	80049be <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 80049b8:	2303      	movs	r3, #3
 80049ba:	73fb      	strb	r3, [r7, #15]
      break;
 80049bc:	e004      	b.n	80049c8 <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80049be:	f7ff fe06 	bl	80045ce <LL_RCC_PLLSAI1_IsReady>
 80049c2:	4603      	mov	r3, r0
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d1f0      	bne.n	80049aa <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 80049c8:	7bfb      	ldrb	r3, [r7, #15]
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d137      	bne.n	8004a3e <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 80049ce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80049d2:	691b      	ldr	r3, [r3, #16]
 80049d4:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	021b      	lsls	r3, r3, #8
 80049de:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80049e2:	4313      	orrs	r3, r2
 80049e4:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 80049e6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80049ea:	691b      	ldr	r3, [r3, #16]
 80049ec:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	689b      	ldr	r3, [r3, #8]
 80049f4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80049f8:	4313      	orrs	r3, r2
 80049fa:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 80049fc:	f7ff fdc9 	bl	8004592 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004a00:	f7fd fb42 	bl	8002088 <HAL_GetTick>
 8004a04:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8004a06:	e009      	b.n	8004a1c <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004a08:	f7fd fb3e 	bl	8002088 <HAL_GetTick>
 8004a0c:	4602      	mov	r2, r0
 8004a0e:	68bb      	ldr	r3, [r7, #8]
 8004a10:	1ad3      	subs	r3, r2, r3
 8004a12:	2b02      	cmp	r3, #2
 8004a14:	d902      	bls.n	8004a1c <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 8004a16:	2303      	movs	r3, #3
 8004a18:	73fb      	strb	r3, [r7, #15]
        break;
 8004a1a:	e004      	b.n	8004a26 <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8004a1c:	f7ff fdd7 	bl	80045ce <LL_RCC_PLLSAI1_IsReady>
 8004a20:	4603      	mov	r3, r0
 8004a22:	2b01      	cmp	r3, #1
 8004a24:	d1f0      	bne.n	8004a08 <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 8004a26:	7bfb      	ldrb	r3, [r7, #15]
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d108      	bne.n	8004a3e <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8004a2c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a30:	691a      	ldr	r2, [r3, #16]
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	691b      	ldr	r3, [r3, #16]
 8004a36:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004a3a:	4313      	orrs	r3, r2
 8004a3c:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8004a3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a40:	4618      	mov	r0, r3
 8004a42:	3710      	adds	r7, #16
 8004a44:	46bd      	mov	sp, r7
 8004a46:	bd80      	pop	{r7, pc}

08004a48 <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8004a48:	b580      	push	{r7, lr}
 8004a4a:	b084      	sub	sp, #16
 8004a4c:	af00      	add	r7, sp, #0
 8004a4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004a50:	2300      	movs	r3, #0
 8004a52:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8004a54:	f7ff fdac 	bl	80045b0 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8004a58:	f7fd fb16 	bl	8002088 <HAL_GetTick>
 8004a5c:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8004a5e:	e009      	b.n	8004a74 <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004a60:	f7fd fb12 	bl	8002088 <HAL_GetTick>
 8004a64:	4602      	mov	r2, r0
 8004a66:	68bb      	ldr	r3, [r7, #8]
 8004a68:	1ad3      	subs	r3, r2, r3
 8004a6a:	2b02      	cmp	r3, #2
 8004a6c:	d902      	bls.n	8004a74 <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 8004a6e:	2303      	movs	r3, #3
 8004a70:	73fb      	strb	r3, [r7, #15]
      break;
 8004a72:	e004      	b.n	8004a7e <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8004a74:	f7ff fdab 	bl	80045ce <LL_RCC_PLLSAI1_IsReady>
 8004a78:	4603      	mov	r3, r0
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d1f0      	bne.n	8004a60 <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 8004a7e:	7bfb      	ldrb	r3, [r7, #15]
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d137      	bne.n	8004af4 <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8004a84:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a88:	691b      	ldr	r3, [r3, #16]
 8004a8a:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	021b      	lsls	r3, r3, #8
 8004a94:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004a98:	4313      	orrs	r3, r2
 8004a9a:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 8004a9c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004aa0:	691b      	ldr	r3, [r3, #16]
 8004aa2:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	68db      	ldr	r3, [r3, #12]
 8004aaa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004aae:	4313      	orrs	r3, r2
 8004ab0:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8004ab2:	f7ff fd6e 	bl	8004592 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004ab6:	f7fd fae7 	bl	8002088 <HAL_GetTick>
 8004aba:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8004abc:	e009      	b.n	8004ad2 <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004abe:	f7fd fae3 	bl	8002088 <HAL_GetTick>
 8004ac2:	4602      	mov	r2, r0
 8004ac4:	68bb      	ldr	r3, [r7, #8]
 8004ac6:	1ad3      	subs	r3, r2, r3
 8004ac8:	2b02      	cmp	r3, #2
 8004aca:	d902      	bls.n	8004ad2 <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 8004acc:	2303      	movs	r3, #3
 8004ace:	73fb      	strb	r3, [r7, #15]
        break;
 8004ad0:	e004      	b.n	8004adc <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8004ad2:	f7ff fd7c 	bl	80045ce <LL_RCC_PLLSAI1_IsReady>
 8004ad6:	4603      	mov	r3, r0
 8004ad8:	2b01      	cmp	r3, #1
 8004ada:	d1f0      	bne.n	8004abe <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 8004adc:	7bfb      	ldrb	r3, [r7, #15]
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d108      	bne.n	8004af4 <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8004ae2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004ae6:	691a      	ldr	r2, [r3, #16]
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	691b      	ldr	r3, [r3, #16]
 8004aec:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004af0:	4313      	orrs	r3, r2
 8004af2:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8004af4:	7bfb      	ldrb	r3, [r7, #15]
}
 8004af6:	4618      	mov	r0, r3
 8004af8:	3710      	adds	r7, #16
 8004afa:	46bd      	mov	sp, r7
 8004afc:	bd80      	pop	{r7, pc}

08004afe <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004afe:	b580      	push	{r7, lr}
 8004b00:	b084      	sub	sp, #16
 8004b02:	af00      	add	r7, sp, #0
 8004b04:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d101      	bne.n	8004b10 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004b0c:	2301      	movs	r3, #1
 8004b0e:	e095      	b.n	8004c3c <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d108      	bne.n	8004b2a <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	685b      	ldr	r3, [r3, #4]
 8004b1c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004b20:	d009      	beq.n	8004b36 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	2200      	movs	r2, #0
 8004b26:	61da      	str	r2, [r3, #28]
 8004b28:	e005      	b.n	8004b36 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	2200      	movs	r2, #0
 8004b2e:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	2200      	movs	r2, #0
 8004b34:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	2200      	movs	r2, #0
 8004b3a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004b42:	b2db      	uxtb	r3, r3
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d106      	bne.n	8004b56 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	2200      	movs	r2, #0
 8004b4c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004b50:	6878      	ldr	r0, [r7, #4]
 8004b52:	f7fd f90d 	bl	8001d70 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	2202      	movs	r2, #2
 8004b5a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	681a      	ldr	r2, [r3, #0]
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004b6c:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	68db      	ldr	r3, [r3, #12]
 8004b72:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004b76:	d902      	bls.n	8004b7e <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004b78:	2300      	movs	r3, #0
 8004b7a:	60fb      	str	r3, [r7, #12]
 8004b7c:	e002      	b.n	8004b84 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004b7e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004b82:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	68db      	ldr	r3, [r3, #12]
 8004b88:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8004b8c:	d007      	beq.n	8004b9e <HAL_SPI_Init+0xa0>
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	68db      	ldr	r3, [r3, #12]
 8004b92:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004b96:	d002      	beq.n	8004b9e <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	2200      	movs	r2, #0
 8004b9c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	685b      	ldr	r3, [r3, #4]
 8004ba2:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	689b      	ldr	r3, [r3, #8]
 8004baa:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004bae:	431a      	orrs	r2, r3
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	691b      	ldr	r3, [r3, #16]
 8004bb4:	f003 0302 	and.w	r3, r3, #2
 8004bb8:	431a      	orrs	r2, r3
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	695b      	ldr	r3, [r3, #20]
 8004bbe:	f003 0301 	and.w	r3, r3, #1
 8004bc2:	431a      	orrs	r2, r3
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	699b      	ldr	r3, [r3, #24]
 8004bc8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004bcc:	431a      	orrs	r2, r3
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	69db      	ldr	r3, [r3, #28]
 8004bd2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004bd6:	431a      	orrs	r2, r3
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	6a1b      	ldr	r3, [r3, #32]
 8004bdc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004be0:	ea42 0103 	orr.w	r1, r2, r3
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004be8:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	430a      	orrs	r2, r1
 8004bf2:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	699b      	ldr	r3, [r3, #24]
 8004bf8:	0c1b      	lsrs	r3, r3, #16
 8004bfa:	f003 0204 	and.w	r2, r3, #4
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c02:	f003 0310 	and.w	r3, r3, #16
 8004c06:	431a      	orrs	r2, r3
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c0c:	f003 0308 	and.w	r3, r3, #8
 8004c10:	431a      	orrs	r2, r3
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	68db      	ldr	r3, [r3, #12]
 8004c16:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8004c1a:	ea42 0103 	orr.w	r1, r2, r3
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	430a      	orrs	r2, r1
 8004c2a:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	2200      	movs	r2, #0
 8004c30:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	2201      	movs	r2, #1
 8004c36:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8004c3a:	2300      	movs	r3, #0
}
 8004c3c:	4618      	mov	r0, r3
 8004c3e:	3710      	adds	r7, #16
 8004c40:	46bd      	mov	sp, r7
 8004c42:	bd80      	pop	{r7, pc}

08004c44 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004c44:	b580      	push	{r7, lr}
 8004c46:	b088      	sub	sp, #32
 8004c48:	af00      	add	r7, sp, #0
 8004c4a:	60f8      	str	r0, [r7, #12]
 8004c4c:	60b9      	str	r1, [r7, #8]
 8004c4e:	603b      	str	r3, [r7, #0]
 8004c50:	4613      	mov	r3, r2
 8004c52:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004c54:	2300      	movs	r3, #0
 8004c56:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004c5e:	2b01      	cmp	r3, #1
 8004c60:	d101      	bne.n	8004c66 <HAL_SPI_Transmit+0x22>
 8004c62:	2302      	movs	r3, #2
 8004c64:	e158      	b.n	8004f18 <HAL_SPI_Transmit+0x2d4>
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	2201      	movs	r2, #1
 8004c6a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004c6e:	f7fd fa0b 	bl	8002088 <HAL_GetTick>
 8004c72:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004c74:	88fb      	ldrh	r3, [r7, #6]
 8004c76:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004c7e:	b2db      	uxtb	r3, r3
 8004c80:	2b01      	cmp	r3, #1
 8004c82:	d002      	beq.n	8004c8a <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004c84:	2302      	movs	r3, #2
 8004c86:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004c88:	e13d      	b.n	8004f06 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8004c8a:	68bb      	ldr	r3, [r7, #8]
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d002      	beq.n	8004c96 <HAL_SPI_Transmit+0x52>
 8004c90:	88fb      	ldrh	r3, [r7, #6]
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d102      	bne.n	8004c9c <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004c96:	2301      	movs	r3, #1
 8004c98:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004c9a:	e134      	b.n	8004f06 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	2203      	movs	r2, #3
 8004ca0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	2200      	movs	r2, #0
 8004ca8:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	68ba      	ldr	r2, [r7, #8]
 8004cae:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	88fa      	ldrh	r2, [r7, #6]
 8004cb4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	88fa      	ldrh	r2, [r7, #6]
 8004cba:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	2200      	movs	r2, #0
 8004cc0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	2200      	movs	r2, #0
 8004cc6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	2200      	movs	r2, #0
 8004cce:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	2200      	movs	r2, #0
 8004cd6:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	2200      	movs	r2, #0
 8004cdc:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	689b      	ldr	r3, [r3, #8]
 8004ce2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004ce6:	d10f      	bne.n	8004d08 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	681a      	ldr	r2, [r3, #0]
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004cf6:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	681a      	ldr	r2, [r3, #0]
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004d06:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d12:	2b40      	cmp	r3, #64	; 0x40
 8004d14:	d007      	beq.n	8004d26 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	681a      	ldr	r2, [r3, #0]
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004d24:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	68db      	ldr	r3, [r3, #12]
 8004d2a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004d2e:	d94b      	bls.n	8004dc8 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	685b      	ldr	r3, [r3, #4]
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d002      	beq.n	8004d3e <HAL_SPI_Transmit+0xfa>
 8004d38:	8afb      	ldrh	r3, [r7, #22]
 8004d3a:	2b01      	cmp	r3, #1
 8004d3c:	d13e      	bne.n	8004dbc <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d42:	881a      	ldrh	r2, [r3, #0]
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d4e:	1c9a      	adds	r2, r3, #2
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004d58:	b29b      	uxth	r3, r3
 8004d5a:	3b01      	subs	r3, #1
 8004d5c:	b29a      	uxth	r2, r3
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004d62:	e02b      	b.n	8004dbc <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	689b      	ldr	r3, [r3, #8]
 8004d6a:	f003 0302 	and.w	r3, r3, #2
 8004d6e:	2b02      	cmp	r3, #2
 8004d70:	d112      	bne.n	8004d98 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d76:	881a      	ldrh	r2, [r3, #0]
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d82:	1c9a      	adds	r2, r3, #2
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004d8c:	b29b      	uxth	r3, r3
 8004d8e:	3b01      	subs	r3, #1
 8004d90:	b29a      	uxth	r2, r3
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004d96:	e011      	b.n	8004dbc <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004d98:	f7fd f976 	bl	8002088 <HAL_GetTick>
 8004d9c:	4602      	mov	r2, r0
 8004d9e:	69bb      	ldr	r3, [r7, #24]
 8004da0:	1ad3      	subs	r3, r2, r3
 8004da2:	683a      	ldr	r2, [r7, #0]
 8004da4:	429a      	cmp	r2, r3
 8004da6:	d803      	bhi.n	8004db0 <HAL_SPI_Transmit+0x16c>
 8004da8:	683b      	ldr	r3, [r7, #0]
 8004daa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004dae:	d102      	bne.n	8004db6 <HAL_SPI_Transmit+0x172>
 8004db0:	683b      	ldr	r3, [r7, #0]
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d102      	bne.n	8004dbc <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8004db6:	2303      	movs	r3, #3
 8004db8:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004dba:	e0a4      	b.n	8004f06 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004dc0:	b29b      	uxth	r3, r3
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d1ce      	bne.n	8004d64 <HAL_SPI_Transmit+0x120>
 8004dc6:	e07c      	b.n	8004ec2 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	685b      	ldr	r3, [r3, #4]
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d002      	beq.n	8004dd6 <HAL_SPI_Transmit+0x192>
 8004dd0:	8afb      	ldrh	r3, [r7, #22]
 8004dd2:	2b01      	cmp	r3, #1
 8004dd4:	d170      	bne.n	8004eb8 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004dda:	b29b      	uxth	r3, r3
 8004ddc:	2b01      	cmp	r3, #1
 8004dde:	d912      	bls.n	8004e06 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004de4:	881a      	ldrh	r2, [r3, #0]
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004df0:	1c9a      	adds	r2, r3, #2
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004dfa:	b29b      	uxth	r3, r3
 8004dfc:	3b02      	subs	r3, #2
 8004dfe:	b29a      	uxth	r2, r3
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004e04:	e058      	b.n	8004eb8 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	330c      	adds	r3, #12
 8004e10:	7812      	ldrb	r2, [r2, #0]
 8004e12:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e18:	1c5a      	adds	r2, r3, #1
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e22:	b29b      	uxth	r3, r3
 8004e24:	3b01      	subs	r3, #1
 8004e26:	b29a      	uxth	r2, r3
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8004e2c:	e044      	b.n	8004eb8 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	689b      	ldr	r3, [r3, #8]
 8004e34:	f003 0302 	and.w	r3, r3, #2
 8004e38:	2b02      	cmp	r3, #2
 8004e3a:	d12b      	bne.n	8004e94 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e40:	b29b      	uxth	r3, r3
 8004e42:	2b01      	cmp	r3, #1
 8004e44:	d912      	bls.n	8004e6c <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e4a:	881a      	ldrh	r2, [r3, #0]
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e56:	1c9a      	adds	r2, r3, #2
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e60:	b29b      	uxth	r3, r3
 8004e62:	3b02      	subs	r3, #2
 8004e64:	b29a      	uxth	r2, r3
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004e6a:	e025      	b.n	8004eb8 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	330c      	adds	r3, #12
 8004e76:	7812      	ldrb	r2, [r2, #0]
 8004e78:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e7e:	1c5a      	adds	r2, r3, #1
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e88:	b29b      	uxth	r3, r3
 8004e8a:	3b01      	subs	r3, #1
 8004e8c:	b29a      	uxth	r2, r3
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004e92:	e011      	b.n	8004eb8 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004e94:	f7fd f8f8 	bl	8002088 <HAL_GetTick>
 8004e98:	4602      	mov	r2, r0
 8004e9a:	69bb      	ldr	r3, [r7, #24]
 8004e9c:	1ad3      	subs	r3, r2, r3
 8004e9e:	683a      	ldr	r2, [r7, #0]
 8004ea0:	429a      	cmp	r2, r3
 8004ea2:	d803      	bhi.n	8004eac <HAL_SPI_Transmit+0x268>
 8004ea4:	683b      	ldr	r3, [r7, #0]
 8004ea6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004eaa:	d102      	bne.n	8004eb2 <HAL_SPI_Transmit+0x26e>
 8004eac:	683b      	ldr	r3, [r7, #0]
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d102      	bne.n	8004eb8 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8004eb2:	2303      	movs	r3, #3
 8004eb4:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004eb6:	e026      	b.n	8004f06 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004ebc:	b29b      	uxth	r3, r3
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d1b5      	bne.n	8004e2e <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004ec2:	69ba      	ldr	r2, [r7, #24]
 8004ec4:	6839      	ldr	r1, [r7, #0]
 8004ec6:	68f8      	ldr	r0, [r7, #12]
 8004ec8:	f000 f940 	bl	800514c <SPI_EndRxTxTransaction>
 8004ecc:	4603      	mov	r3, r0
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d002      	beq.n	8004ed8 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	2220      	movs	r2, #32
 8004ed6:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	689b      	ldr	r3, [r3, #8]
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d10a      	bne.n	8004ef6 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004ee0:	2300      	movs	r3, #0
 8004ee2:	613b      	str	r3, [r7, #16]
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	68db      	ldr	r3, [r3, #12]
 8004eea:	613b      	str	r3, [r7, #16]
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	689b      	ldr	r3, [r3, #8]
 8004ef2:	613b      	str	r3, [r7, #16]
 8004ef4:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d002      	beq.n	8004f04 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8004efe:	2301      	movs	r3, #1
 8004f00:	77fb      	strb	r3, [r7, #31]
 8004f02:	e000      	b.n	8004f06 <HAL_SPI_Transmit+0x2c2>
  }

error:
 8004f04:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	2201      	movs	r2, #1
 8004f0a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	2200      	movs	r2, #0
 8004f12:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004f16:	7ffb      	ldrb	r3, [r7, #31]
}
 8004f18:	4618      	mov	r0, r3
 8004f1a:	3720      	adds	r7, #32
 8004f1c:	46bd      	mov	sp, r7
 8004f1e:	bd80      	pop	{r7, pc}

08004f20 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004f20:	b580      	push	{r7, lr}
 8004f22:	b088      	sub	sp, #32
 8004f24:	af00      	add	r7, sp, #0
 8004f26:	60f8      	str	r0, [r7, #12]
 8004f28:	60b9      	str	r1, [r7, #8]
 8004f2a:	603b      	str	r3, [r7, #0]
 8004f2c:	4613      	mov	r3, r2
 8004f2e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004f30:	f7fd f8aa 	bl	8002088 <HAL_GetTick>
 8004f34:	4602      	mov	r2, r0
 8004f36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f38:	1a9b      	subs	r3, r3, r2
 8004f3a:	683a      	ldr	r2, [r7, #0]
 8004f3c:	4413      	add	r3, r2
 8004f3e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004f40:	f7fd f8a2 	bl	8002088 <HAL_GetTick>
 8004f44:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004f46:	4b39      	ldr	r3, [pc, #228]	; (800502c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	015b      	lsls	r3, r3, #5
 8004f4c:	0d1b      	lsrs	r3, r3, #20
 8004f4e:	69fa      	ldr	r2, [r7, #28]
 8004f50:	fb02 f303 	mul.w	r3, r2, r3
 8004f54:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004f56:	e054      	b.n	8005002 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004f58:	683b      	ldr	r3, [r7, #0]
 8004f5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f5e:	d050      	beq.n	8005002 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004f60:	f7fd f892 	bl	8002088 <HAL_GetTick>
 8004f64:	4602      	mov	r2, r0
 8004f66:	69bb      	ldr	r3, [r7, #24]
 8004f68:	1ad3      	subs	r3, r2, r3
 8004f6a:	69fa      	ldr	r2, [r7, #28]
 8004f6c:	429a      	cmp	r2, r3
 8004f6e:	d902      	bls.n	8004f76 <SPI_WaitFlagStateUntilTimeout+0x56>
 8004f70:	69fb      	ldr	r3, [r7, #28]
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d13d      	bne.n	8004ff2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	685a      	ldr	r2, [r3, #4]
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004f84:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	685b      	ldr	r3, [r3, #4]
 8004f8a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004f8e:	d111      	bne.n	8004fb4 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	689b      	ldr	r3, [r3, #8]
 8004f94:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004f98:	d004      	beq.n	8004fa4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	689b      	ldr	r3, [r3, #8]
 8004f9e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004fa2:	d107      	bne.n	8004fb4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	681a      	ldr	r2, [r3, #0]
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004fb2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fb8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004fbc:	d10f      	bne.n	8004fde <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	681a      	ldr	r2, [r3, #0]
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004fcc:	601a      	str	r2, [r3, #0]
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	681a      	ldr	r2, [r3, #0]
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004fdc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	2201      	movs	r2, #1
 8004fe2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	2200      	movs	r2, #0
 8004fea:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8004fee:	2303      	movs	r3, #3
 8004ff0:	e017      	b.n	8005022 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8004ff2:	697b      	ldr	r3, [r7, #20]
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d101      	bne.n	8004ffc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004ff8:	2300      	movs	r3, #0
 8004ffa:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004ffc:	697b      	ldr	r3, [r7, #20]
 8004ffe:	3b01      	subs	r3, #1
 8005000:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	689a      	ldr	r2, [r3, #8]
 8005008:	68bb      	ldr	r3, [r7, #8]
 800500a:	4013      	ands	r3, r2
 800500c:	68ba      	ldr	r2, [r7, #8]
 800500e:	429a      	cmp	r2, r3
 8005010:	bf0c      	ite	eq
 8005012:	2301      	moveq	r3, #1
 8005014:	2300      	movne	r3, #0
 8005016:	b2db      	uxtb	r3, r3
 8005018:	461a      	mov	r2, r3
 800501a:	79fb      	ldrb	r3, [r7, #7]
 800501c:	429a      	cmp	r2, r3
 800501e:	d19b      	bne.n	8004f58 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005020:	2300      	movs	r3, #0
}
 8005022:	4618      	mov	r0, r3
 8005024:	3720      	adds	r7, #32
 8005026:	46bd      	mov	sp, r7
 8005028:	bd80      	pop	{r7, pc}
 800502a:	bf00      	nop
 800502c:	20000004 	.word	0x20000004

08005030 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005030:	b580      	push	{r7, lr}
 8005032:	b088      	sub	sp, #32
 8005034:	af00      	add	r7, sp, #0
 8005036:	60f8      	str	r0, [r7, #12]
 8005038:	60b9      	str	r1, [r7, #8]
 800503a:	607a      	str	r2, [r7, #4]
 800503c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800503e:	f7fd f823 	bl	8002088 <HAL_GetTick>
 8005042:	4602      	mov	r2, r0
 8005044:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005046:	1a9b      	subs	r3, r3, r2
 8005048:	683a      	ldr	r2, [r7, #0]
 800504a:	4413      	add	r3, r2
 800504c:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800504e:	f7fd f81b 	bl	8002088 <HAL_GetTick>
 8005052:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8005054:	4b3c      	ldr	r3, [pc, #240]	; (8005148 <SPI_WaitFifoStateUntilTimeout+0x118>)
 8005056:	681a      	ldr	r2, [r3, #0]
 8005058:	4613      	mov	r3, r2
 800505a:	009b      	lsls	r3, r3, #2
 800505c:	4413      	add	r3, r2
 800505e:	00da      	lsls	r2, r3, #3
 8005060:	1ad3      	subs	r3, r2, r3
 8005062:	0d1b      	lsrs	r3, r3, #20
 8005064:	69fa      	ldr	r2, [r7, #28]
 8005066:	fb02 f303 	mul.w	r3, r2, r3
 800506a:	617b      	str	r3, [r7, #20]

  while ((hspi->Instance->SR & Fifo) != State)
 800506c:	e05f      	b.n	800512e <SPI_WaitFifoStateUntilTimeout+0xfe>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800506e:	68bb      	ldr	r3, [r7, #8]
 8005070:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8005074:	d106      	bne.n	8005084 <SPI_WaitFifoStateUntilTimeout+0x54>
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	2b00      	cmp	r3, #0
 800507a:	d103      	bne.n	8005084 <SPI_WaitFifoStateUntilTimeout+0x54>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	330c      	adds	r3, #12
 8005082:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8005084:	683b      	ldr	r3, [r7, #0]
 8005086:	f1b3 3fff 	cmp.w	r3, #4294967295
 800508a:	d050      	beq.n	800512e <SPI_WaitFifoStateUntilTimeout+0xfe>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800508c:	f7fc fffc 	bl	8002088 <HAL_GetTick>
 8005090:	4602      	mov	r2, r0
 8005092:	69bb      	ldr	r3, [r7, #24]
 8005094:	1ad3      	subs	r3, r2, r3
 8005096:	69fa      	ldr	r2, [r7, #28]
 8005098:	429a      	cmp	r2, r3
 800509a:	d902      	bls.n	80050a2 <SPI_WaitFifoStateUntilTimeout+0x72>
 800509c:	69fb      	ldr	r3, [r7, #28]
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d13d      	bne.n	800511e <SPI_WaitFifoStateUntilTimeout+0xee>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	685a      	ldr	r2, [r3, #4]
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80050b0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	685b      	ldr	r3, [r3, #4]
 80050b6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80050ba:	d111      	bne.n	80050e0 <SPI_WaitFifoStateUntilTimeout+0xb0>
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	689b      	ldr	r3, [r3, #8]
 80050c0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80050c4:	d004      	beq.n	80050d0 <SPI_WaitFifoStateUntilTimeout+0xa0>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	689b      	ldr	r3, [r3, #8]
 80050ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80050ce:	d107      	bne.n	80050e0 <SPI_WaitFifoStateUntilTimeout+0xb0>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	681a      	ldr	r2, [r3, #0]
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80050de:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050e4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80050e8:	d10f      	bne.n	800510a <SPI_WaitFifoStateUntilTimeout+0xda>
        {
          SPI_RESET_CRC(hspi);
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	681a      	ldr	r2, [r3, #0]
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80050f8:	601a      	str	r2, [r3, #0]
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	681a      	ldr	r2, [r3, #0]
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005108:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	2201      	movs	r2, #1
 800510e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	2200      	movs	r2, #0
 8005116:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800511a:	2303      	movs	r3, #3
 800511c:	e010      	b.n	8005140 <SPI_WaitFifoStateUntilTimeout+0x110>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800511e:	697b      	ldr	r3, [r7, #20]
 8005120:	2b00      	cmp	r3, #0
 8005122:	d101      	bne.n	8005128 <SPI_WaitFifoStateUntilTimeout+0xf8>
      {
        tmp_timeout = 0U;
 8005124:	2300      	movs	r3, #0
 8005126:	61fb      	str	r3, [r7, #28]
      }      
      count--;
 8005128:	697b      	ldr	r3, [r7, #20]
 800512a:	3b01      	subs	r3, #1
 800512c:	617b      	str	r3, [r7, #20]
  while ((hspi->Instance->SR & Fifo) != State)
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	689a      	ldr	r2, [r3, #8]
 8005134:	68bb      	ldr	r3, [r7, #8]
 8005136:	4013      	ands	r3, r2
 8005138:	687a      	ldr	r2, [r7, #4]
 800513a:	429a      	cmp	r2, r3
 800513c:	d197      	bne.n	800506e <SPI_WaitFifoStateUntilTimeout+0x3e>
    }
  }

  return HAL_OK;
 800513e:	2300      	movs	r3, #0
}
 8005140:	4618      	mov	r0, r3
 8005142:	3720      	adds	r7, #32
 8005144:	46bd      	mov	sp, r7
 8005146:	bd80      	pop	{r7, pc}
 8005148:	20000004 	.word	0x20000004

0800514c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800514c:	b580      	push	{r7, lr}
 800514e:	b086      	sub	sp, #24
 8005150:	af02      	add	r7, sp, #8
 8005152:	60f8      	str	r0, [r7, #12]
 8005154:	60b9      	str	r1, [r7, #8]
 8005156:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	9300      	str	r3, [sp, #0]
 800515c:	68bb      	ldr	r3, [r7, #8]
 800515e:	2200      	movs	r2, #0
 8005160:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8005164:	68f8      	ldr	r0, [r7, #12]
 8005166:	f7ff ff63 	bl	8005030 <SPI_WaitFifoStateUntilTimeout>
 800516a:	4603      	mov	r3, r0
 800516c:	2b00      	cmp	r3, #0
 800516e:	d007      	beq.n	8005180 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005174:	f043 0220 	orr.w	r2, r3, #32
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800517c:	2303      	movs	r3, #3
 800517e:	e027      	b.n	80051d0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	9300      	str	r3, [sp, #0]
 8005184:	68bb      	ldr	r3, [r7, #8]
 8005186:	2200      	movs	r2, #0
 8005188:	2180      	movs	r1, #128	; 0x80
 800518a:	68f8      	ldr	r0, [r7, #12]
 800518c:	f7ff fec8 	bl	8004f20 <SPI_WaitFlagStateUntilTimeout>
 8005190:	4603      	mov	r3, r0
 8005192:	2b00      	cmp	r3, #0
 8005194:	d007      	beq.n	80051a6 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800519a:	f043 0220 	orr.w	r2, r3, #32
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80051a2:	2303      	movs	r3, #3
 80051a4:	e014      	b.n	80051d0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	9300      	str	r3, [sp, #0]
 80051aa:	68bb      	ldr	r3, [r7, #8]
 80051ac:	2200      	movs	r2, #0
 80051ae:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80051b2:	68f8      	ldr	r0, [r7, #12]
 80051b4:	f7ff ff3c 	bl	8005030 <SPI_WaitFifoStateUntilTimeout>
 80051b8:	4603      	mov	r3, r0
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d007      	beq.n	80051ce <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80051c2:	f043 0220 	orr.w	r2, r3, #32
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80051ca:	2303      	movs	r3, #3
 80051cc:	e000      	b.n	80051d0 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80051ce:	2300      	movs	r3, #0
}
 80051d0:	4618      	mov	r0, r3
 80051d2:	3710      	adds	r7, #16
 80051d4:	46bd      	mov	sp, r7
 80051d6:	bd80      	pop	{r7, pc}

080051d8 <__errno>:
 80051d8:	4b01      	ldr	r3, [pc, #4]	; (80051e0 <__errno+0x8>)
 80051da:	6818      	ldr	r0, [r3, #0]
 80051dc:	4770      	bx	lr
 80051de:	bf00      	nop
 80051e0:	20000010 	.word	0x20000010

080051e4 <__libc_init_array>:
 80051e4:	b570      	push	{r4, r5, r6, lr}
 80051e6:	4e0d      	ldr	r6, [pc, #52]	; (800521c <__libc_init_array+0x38>)
 80051e8:	4c0d      	ldr	r4, [pc, #52]	; (8005220 <__libc_init_array+0x3c>)
 80051ea:	1ba4      	subs	r4, r4, r6
 80051ec:	10a4      	asrs	r4, r4, #2
 80051ee:	2500      	movs	r5, #0
 80051f0:	42a5      	cmp	r5, r4
 80051f2:	d109      	bne.n	8005208 <__libc_init_array+0x24>
 80051f4:	4e0b      	ldr	r6, [pc, #44]	; (8005224 <__libc_init_array+0x40>)
 80051f6:	4c0c      	ldr	r4, [pc, #48]	; (8005228 <__libc_init_array+0x44>)
 80051f8:	f002 f85e 	bl	80072b8 <_init>
 80051fc:	1ba4      	subs	r4, r4, r6
 80051fe:	10a4      	asrs	r4, r4, #2
 8005200:	2500      	movs	r5, #0
 8005202:	42a5      	cmp	r5, r4
 8005204:	d105      	bne.n	8005212 <__libc_init_array+0x2e>
 8005206:	bd70      	pop	{r4, r5, r6, pc}
 8005208:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800520c:	4798      	blx	r3
 800520e:	3501      	adds	r5, #1
 8005210:	e7ee      	b.n	80051f0 <__libc_init_array+0xc>
 8005212:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005216:	4798      	blx	r3
 8005218:	3501      	adds	r5, #1
 800521a:	e7f2      	b.n	8005202 <__libc_init_array+0x1e>
 800521c:	08008380 	.word	0x08008380
 8005220:	08008380 	.word	0x08008380
 8005224:	08008380 	.word	0x08008380
 8005228:	08008384 	.word	0x08008384

0800522c <malloc>:
 800522c:	4b02      	ldr	r3, [pc, #8]	; (8005238 <malloc+0xc>)
 800522e:	4601      	mov	r1, r0
 8005230:	6818      	ldr	r0, [r3, #0]
 8005232:	f000 b859 	b.w	80052e8 <_malloc_r>
 8005236:	bf00      	nop
 8005238:	20000010 	.word	0x20000010

0800523c <memset>:
 800523c:	4402      	add	r2, r0
 800523e:	4603      	mov	r3, r0
 8005240:	4293      	cmp	r3, r2
 8005242:	d100      	bne.n	8005246 <memset+0xa>
 8005244:	4770      	bx	lr
 8005246:	f803 1b01 	strb.w	r1, [r3], #1
 800524a:	e7f9      	b.n	8005240 <memset+0x4>

0800524c <_free_r>:
 800524c:	b538      	push	{r3, r4, r5, lr}
 800524e:	4605      	mov	r5, r0
 8005250:	2900      	cmp	r1, #0
 8005252:	d045      	beq.n	80052e0 <_free_r+0x94>
 8005254:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005258:	1f0c      	subs	r4, r1, #4
 800525a:	2b00      	cmp	r3, #0
 800525c:	bfb8      	it	lt
 800525e:	18e4      	addlt	r4, r4, r3
 8005260:	f001 fb87 	bl	8006972 <__malloc_lock>
 8005264:	4a1f      	ldr	r2, [pc, #124]	; (80052e4 <_free_r+0x98>)
 8005266:	6813      	ldr	r3, [r2, #0]
 8005268:	4610      	mov	r0, r2
 800526a:	b933      	cbnz	r3, 800527a <_free_r+0x2e>
 800526c:	6063      	str	r3, [r4, #4]
 800526e:	6014      	str	r4, [r2, #0]
 8005270:	4628      	mov	r0, r5
 8005272:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005276:	f001 bb7d 	b.w	8006974 <__malloc_unlock>
 800527a:	42a3      	cmp	r3, r4
 800527c:	d90c      	bls.n	8005298 <_free_r+0x4c>
 800527e:	6821      	ldr	r1, [r4, #0]
 8005280:	1862      	adds	r2, r4, r1
 8005282:	4293      	cmp	r3, r2
 8005284:	bf04      	itt	eq
 8005286:	681a      	ldreq	r2, [r3, #0]
 8005288:	685b      	ldreq	r3, [r3, #4]
 800528a:	6063      	str	r3, [r4, #4]
 800528c:	bf04      	itt	eq
 800528e:	1852      	addeq	r2, r2, r1
 8005290:	6022      	streq	r2, [r4, #0]
 8005292:	6004      	str	r4, [r0, #0]
 8005294:	e7ec      	b.n	8005270 <_free_r+0x24>
 8005296:	4613      	mov	r3, r2
 8005298:	685a      	ldr	r2, [r3, #4]
 800529a:	b10a      	cbz	r2, 80052a0 <_free_r+0x54>
 800529c:	42a2      	cmp	r2, r4
 800529e:	d9fa      	bls.n	8005296 <_free_r+0x4a>
 80052a0:	6819      	ldr	r1, [r3, #0]
 80052a2:	1858      	adds	r0, r3, r1
 80052a4:	42a0      	cmp	r0, r4
 80052a6:	d10b      	bne.n	80052c0 <_free_r+0x74>
 80052a8:	6820      	ldr	r0, [r4, #0]
 80052aa:	4401      	add	r1, r0
 80052ac:	1858      	adds	r0, r3, r1
 80052ae:	4282      	cmp	r2, r0
 80052b0:	6019      	str	r1, [r3, #0]
 80052b2:	d1dd      	bne.n	8005270 <_free_r+0x24>
 80052b4:	6810      	ldr	r0, [r2, #0]
 80052b6:	6852      	ldr	r2, [r2, #4]
 80052b8:	605a      	str	r2, [r3, #4]
 80052ba:	4401      	add	r1, r0
 80052bc:	6019      	str	r1, [r3, #0]
 80052be:	e7d7      	b.n	8005270 <_free_r+0x24>
 80052c0:	d902      	bls.n	80052c8 <_free_r+0x7c>
 80052c2:	230c      	movs	r3, #12
 80052c4:	602b      	str	r3, [r5, #0]
 80052c6:	e7d3      	b.n	8005270 <_free_r+0x24>
 80052c8:	6820      	ldr	r0, [r4, #0]
 80052ca:	1821      	adds	r1, r4, r0
 80052cc:	428a      	cmp	r2, r1
 80052ce:	bf04      	itt	eq
 80052d0:	6811      	ldreq	r1, [r2, #0]
 80052d2:	6852      	ldreq	r2, [r2, #4]
 80052d4:	6062      	str	r2, [r4, #4]
 80052d6:	bf04      	itt	eq
 80052d8:	1809      	addeq	r1, r1, r0
 80052da:	6021      	streq	r1, [r4, #0]
 80052dc:	605c      	str	r4, [r3, #4]
 80052de:	e7c7      	b.n	8005270 <_free_r+0x24>
 80052e0:	bd38      	pop	{r3, r4, r5, pc}
 80052e2:	bf00      	nop
 80052e4:	20000200 	.word	0x20000200

080052e8 <_malloc_r>:
 80052e8:	b570      	push	{r4, r5, r6, lr}
 80052ea:	1ccd      	adds	r5, r1, #3
 80052ec:	f025 0503 	bic.w	r5, r5, #3
 80052f0:	3508      	adds	r5, #8
 80052f2:	2d0c      	cmp	r5, #12
 80052f4:	bf38      	it	cc
 80052f6:	250c      	movcc	r5, #12
 80052f8:	2d00      	cmp	r5, #0
 80052fa:	4606      	mov	r6, r0
 80052fc:	db01      	blt.n	8005302 <_malloc_r+0x1a>
 80052fe:	42a9      	cmp	r1, r5
 8005300:	d903      	bls.n	800530a <_malloc_r+0x22>
 8005302:	230c      	movs	r3, #12
 8005304:	6033      	str	r3, [r6, #0]
 8005306:	2000      	movs	r0, #0
 8005308:	bd70      	pop	{r4, r5, r6, pc}
 800530a:	f001 fb32 	bl	8006972 <__malloc_lock>
 800530e:	4a21      	ldr	r2, [pc, #132]	; (8005394 <_malloc_r+0xac>)
 8005310:	6814      	ldr	r4, [r2, #0]
 8005312:	4621      	mov	r1, r4
 8005314:	b991      	cbnz	r1, 800533c <_malloc_r+0x54>
 8005316:	4c20      	ldr	r4, [pc, #128]	; (8005398 <_malloc_r+0xb0>)
 8005318:	6823      	ldr	r3, [r4, #0]
 800531a:	b91b      	cbnz	r3, 8005324 <_malloc_r+0x3c>
 800531c:	4630      	mov	r0, r6
 800531e:	f000 fc99 	bl	8005c54 <_sbrk_r>
 8005322:	6020      	str	r0, [r4, #0]
 8005324:	4629      	mov	r1, r5
 8005326:	4630      	mov	r0, r6
 8005328:	f000 fc94 	bl	8005c54 <_sbrk_r>
 800532c:	1c43      	adds	r3, r0, #1
 800532e:	d124      	bne.n	800537a <_malloc_r+0x92>
 8005330:	230c      	movs	r3, #12
 8005332:	6033      	str	r3, [r6, #0]
 8005334:	4630      	mov	r0, r6
 8005336:	f001 fb1d 	bl	8006974 <__malloc_unlock>
 800533a:	e7e4      	b.n	8005306 <_malloc_r+0x1e>
 800533c:	680b      	ldr	r3, [r1, #0]
 800533e:	1b5b      	subs	r3, r3, r5
 8005340:	d418      	bmi.n	8005374 <_malloc_r+0x8c>
 8005342:	2b0b      	cmp	r3, #11
 8005344:	d90f      	bls.n	8005366 <_malloc_r+0x7e>
 8005346:	600b      	str	r3, [r1, #0]
 8005348:	50cd      	str	r5, [r1, r3]
 800534a:	18cc      	adds	r4, r1, r3
 800534c:	4630      	mov	r0, r6
 800534e:	f001 fb11 	bl	8006974 <__malloc_unlock>
 8005352:	f104 000b 	add.w	r0, r4, #11
 8005356:	1d23      	adds	r3, r4, #4
 8005358:	f020 0007 	bic.w	r0, r0, #7
 800535c:	1ac3      	subs	r3, r0, r3
 800535e:	d0d3      	beq.n	8005308 <_malloc_r+0x20>
 8005360:	425a      	negs	r2, r3
 8005362:	50e2      	str	r2, [r4, r3]
 8005364:	e7d0      	b.n	8005308 <_malloc_r+0x20>
 8005366:	428c      	cmp	r4, r1
 8005368:	684b      	ldr	r3, [r1, #4]
 800536a:	bf16      	itet	ne
 800536c:	6063      	strne	r3, [r4, #4]
 800536e:	6013      	streq	r3, [r2, #0]
 8005370:	460c      	movne	r4, r1
 8005372:	e7eb      	b.n	800534c <_malloc_r+0x64>
 8005374:	460c      	mov	r4, r1
 8005376:	6849      	ldr	r1, [r1, #4]
 8005378:	e7cc      	b.n	8005314 <_malloc_r+0x2c>
 800537a:	1cc4      	adds	r4, r0, #3
 800537c:	f024 0403 	bic.w	r4, r4, #3
 8005380:	42a0      	cmp	r0, r4
 8005382:	d005      	beq.n	8005390 <_malloc_r+0xa8>
 8005384:	1a21      	subs	r1, r4, r0
 8005386:	4630      	mov	r0, r6
 8005388:	f000 fc64 	bl	8005c54 <_sbrk_r>
 800538c:	3001      	adds	r0, #1
 800538e:	d0cf      	beq.n	8005330 <_malloc_r+0x48>
 8005390:	6025      	str	r5, [r4, #0]
 8005392:	e7db      	b.n	800534c <_malloc_r+0x64>
 8005394:	20000200 	.word	0x20000200
 8005398:	20000204 	.word	0x20000204

0800539c <__cvt>:
 800539c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80053a0:	ec55 4b10 	vmov	r4, r5, d0
 80053a4:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 80053a6:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80053aa:	2d00      	cmp	r5, #0
 80053ac:	460e      	mov	r6, r1
 80053ae:	4691      	mov	r9, r2
 80053b0:	4619      	mov	r1, r3
 80053b2:	bfb8      	it	lt
 80053b4:	4622      	movlt	r2, r4
 80053b6:	462b      	mov	r3, r5
 80053b8:	f027 0720 	bic.w	r7, r7, #32
 80053bc:	bfbb      	ittet	lt
 80053be:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80053c2:	461d      	movlt	r5, r3
 80053c4:	2300      	movge	r3, #0
 80053c6:	232d      	movlt	r3, #45	; 0x2d
 80053c8:	bfb8      	it	lt
 80053ca:	4614      	movlt	r4, r2
 80053cc:	2f46      	cmp	r7, #70	; 0x46
 80053ce:	700b      	strb	r3, [r1, #0]
 80053d0:	d004      	beq.n	80053dc <__cvt+0x40>
 80053d2:	2f45      	cmp	r7, #69	; 0x45
 80053d4:	d100      	bne.n	80053d8 <__cvt+0x3c>
 80053d6:	3601      	adds	r6, #1
 80053d8:	2102      	movs	r1, #2
 80053da:	e000      	b.n	80053de <__cvt+0x42>
 80053dc:	2103      	movs	r1, #3
 80053de:	ab03      	add	r3, sp, #12
 80053e0:	9301      	str	r3, [sp, #4]
 80053e2:	ab02      	add	r3, sp, #8
 80053e4:	9300      	str	r3, [sp, #0]
 80053e6:	4632      	mov	r2, r6
 80053e8:	4653      	mov	r3, sl
 80053ea:	ec45 4b10 	vmov	d0, r4, r5
 80053ee:	f000 fcef 	bl	8005dd0 <_dtoa_r>
 80053f2:	2f47      	cmp	r7, #71	; 0x47
 80053f4:	4680      	mov	r8, r0
 80053f6:	d102      	bne.n	80053fe <__cvt+0x62>
 80053f8:	f019 0f01 	tst.w	r9, #1
 80053fc:	d026      	beq.n	800544c <__cvt+0xb0>
 80053fe:	2f46      	cmp	r7, #70	; 0x46
 8005400:	eb08 0906 	add.w	r9, r8, r6
 8005404:	d111      	bne.n	800542a <__cvt+0x8e>
 8005406:	f898 3000 	ldrb.w	r3, [r8]
 800540a:	2b30      	cmp	r3, #48	; 0x30
 800540c:	d10a      	bne.n	8005424 <__cvt+0x88>
 800540e:	2200      	movs	r2, #0
 8005410:	2300      	movs	r3, #0
 8005412:	4620      	mov	r0, r4
 8005414:	4629      	mov	r1, r5
 8005416:	f7fb fb2f 	bl	8000a78 <__aeabi_dcmpeq>
 800541a:	b918      	cbnz	r0, 8005424 <__cvt+0x88>
 800541c:	f1c6 0601 	rsb	r6, r6, #1
 8005420:	f8ca 6000 	str.w	r6, [sl]
 8005424:	f8da 3000 	ldr.w	r3, [sl]
 8005428:	4499      	add	r9, r3
 800542a:	2200      	movs	r2, #0
 800542c:	2300      	movs	r3, #0
 800542e:	4620      	mov	r0, r4
 8005430:	4629      	mov	r1, r5
 8005432:	f7fb fb21 	bl	8000a78 <__aeabi_dcmpeq>
 8005436:	b938      	cbnz	r0, 8005448 <__cvt+0xac>
 8005438:	2230      	movs	r2, #48	; 0x30
 800543a:	9b03      	ldr	r3, [sp, #12]
 800543c:	454b      	cmp	r3, r9
 800543e:	d205      	bcs.n	800544c <__cvt+0xb0>
 8005440:	1c59      	adds	r1, r3, #1
 8005442:	9103      	str	r1, [sp, #12]
 8005444:	701a      	strb	r2, [r3, #0]
 8005446:	e7f8      	b.n	800543a <__cvt+0x9e>
 8005448:	f8cd 900c 	str.w	r9, [sp, #12]
 800544c:	9b03      	ldr	r3, [sp, #12]
 800544e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005450:	eba3 0308 	sub.w	r3, r3, r8
 8005454:	4640      	mov	r0, r8
 8005456:	6013      	str	r3, [r2, #0]
 8005458:	b004      	add	sp, #16
 800545a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800545e <__exponent>:
 800545e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005460:	2900      	cmp	r1, #0
 8005462:	4604      	mov	r4, r0
 8005464:	bfba      	itte	lt
 8005466:	4249      	neglt	r1, r1
 8005468:	232d      	movlt	r3, #45	; 0x2d
 800546a:	232b      	movge	r3, #43	; 0x2b
 800546c:	2909      	cmp	r1, #9
 800546e:	f804 2b02 	strb.w	r2, [r4], #2
 8005472:	7043      	strb	r3, [r0, #1]
 8005474:	dd20      	ble.n	80054b8 <__exponent+0x5a>
 8005476:	f10d 0307 	add.w	r3, sp, #7
 800547a:	461f      	mov	r7, r3
 800547c:	260a      	movs	r6, #10
 800547e:	fb91 f5f6 	sdiv	r5, r1, r6
 8005482:	fb06 1115 	mls	r1, r6, r5, r1
 8005486:	3130      	adds	r1, #48	; 0x30
 8005488:	2d09      	cmp	r5, #9
 800548a:	f803 1c01 	strb.w	r1, [r3, #-1]
 800548e:	f103 32ff 	add.w	r2, r3, #4294967295
 8005492:	4629      	mov	r1, r5
 8005494:	dc09      	bgt.n	80054aa <__exponent+0x4c>
 8005496:	3130      	adds	r1, #48	; 0x30
 8005498:	3b02      	subs	r3, #2
 800549a:	f802 1c01 	strb.w	r1, [r2, #-1]
 800549e:	42bb      	cmp	r3, r7
 80054a0:	4622      	mov	r2, r4
 80054a2:	d304      	bcc.n	80054ae <__exponent+0x50>
 80054a4:	1a10      	subs	r0, r2, r0
 80054a6:	b003      	add	sp, #12
 80054a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80054aa:	4613      	mov	r3, r2
 80054ac:	e7e7      	b.n	800547e <__exponent+0x20>
 80054ae:	f813 2b01 	ldrb.w	r2, [r3], #1
 80054b2:	f804 2b01 	strb.w	r2, [r4], #1
 80054b6:	e7f2      	b.n	800549e <__exponent+0x40>
 80054b8:	2330      	movs	r3, #48	; 0x30
 80054ba:	4419      	add	r1, r3
 80054bc:	7083      	strb	r3, [r0, #2]
 80054be:	1d02      	adds	r2, r0, #4
 80054c0:	70c1      	strb	r1, [r0, #3]
 80054c2:	e7ef      	b.n	80054a4 <__exponent+0x46>

080054c4 <_printf_float>:
 80054c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80054c8:	b08d      	sub	sp, #52	; 0x34
 80054ca:	460c      	mov	r4, r1
 80054cc:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 80054d0:	4616      	mov	r6, r2
 80054d2:	461f      	mov	r7, r3
 80054d4:	4605      	mov	r5, r0
 80054d6:	f001 fa33 	bl	8006940 <_localeconv_r>
 80054da:	6803      	ldr	r3, [r0, #0]
 80054dc:	9304      	str	r3, [sp, #16]
 80054de:	4618      	mov	r0, r3
 80054e0:	f7fa fe4e 	bl	8000180 <strlen>
 80054e4:	2300      	movs	r3, #0
 80054e6:	930a      	str	r3, [sp, #40]	; 0x28
 80054e8:	f8d8 3000 	ldr.w	r3, [r8]
 80054ec:	9005      	str	r0, [sp, #20]
 80054ee:	3307      	adds	r3, #7
 80054f0:	f023 0307 	bic.w	r3, r3, #7
 80054f4:	f103 0208 	add.w	r2, r3, #8
 80054f8:	f894 a018 	ldrb.w	sl, [r4, #24]
 80054fc:	f8d4 b000 	ldr.w	fp, [r4]
 8005500:	f8c8 2000 	str.w	r2, [r8]
 8005504:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005508:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800550c:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8005510:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8005514:	9307      	str	r3, [sp, #28]
 8005516:	f8cd 8018 	str.w	r8, [sp, #24]
 800551a:	f04f 32ff 	mov.w	r2, #4294967295
 800551e:	4ba7      	ldr	r3, [pc, #668]	; (80057bc <_printf_float+0x2f8>)
 8005520:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005524:	f7fb fada 	bl	8000adc <__aeabi_dcmpun>
 8005528:	bb70      	cbnz	r0, 8005588 <_printf_float+0xc4>
 800552a:	f04f 32ff 	mov.w	r2, #4294967295
 800552e:	4ba3      	ldr	r3, [pc, #652]	; (80057bc <_printf_float+0x2f8>)
 8005530:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005534:	f7fb fab4 	bl	8000aa0 <__aeabi_dcmple>
 8005538:	bb30      	cbnz	r0, 8005588 <_printf_float+0xc4>
 800553a:	2200      	movs	r2, #0
 800553c:	2300      	movs	r3, #0
 800553e:	4640      	mov	r0, r8
 8005540:	4649      	mov	r1, r9
 8005542:	f7fb faa3 	bl	8000a8c <__aeabi_dcmplt>
 8005546:	b110      	cbz	r0, 800554e <_printf_float+0x8a>
 8005548:	232d      	movs	r3, #45	; 0x2d
 800554a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800554e:	4a9c      	ldr	r2, [pc, #624]	; (80057c0 <_printf_float+0x2fc>)
 8005550:	4b9c      	ldr	r3, [pc, #624]	; (80057c4 <_printf_float+0x300>)
 8005552:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8005556:	bf8c      	ite	hi
 8005558:	4690      	movhi	r8, r2
 800555a:	4698      	movls	r8, r3
 800555c:	2303      	movs	r3, #3
 800555e:	f02b 0204 	bic.w	r2, fp, #4
 8005562:	6123      	str	r3, [r4, #16]
 8005564:	6022      	str	r2, [r4, #0]
 8005566:	f04f 0900 	mov.w	r9, #0
 800556a:	9700      	str	r7, [sp, #0]
 800556c:	4633      	mov	r3, r6
 800556e:	aa0b      	add	r2, sp, #44	; 0x2c
 8005570:	4621      	mov	r1, r4
 8005572:	4628      	mov	r0, r5
 8005574:	f000 f9e6 	bl	8005944 <_printf_common>
 8005578:	3001      	adds	r0, #1
 800557a:	f040 808d 	bne.w	8005698 <_printf_float+0x1d4>
 800557e:	f04f 30ff 	mov.w	r0, #4294967295
 8005582:	b00d      	add	sp, #52	; 0x34
 8005584:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005588:	4642      	mov	r2, r8
 800558a:	464b      	mov	r3, r9
 800558c:	4640      	mov	r0, r8
 800558e:	4649      	mov	r1, r9
 8005590:	f7fb faa4 	bl	8000adc <__aeabi_dcmpun>
 8005594:	b110      	cbz	r0, 800559c <_printf_float+0xd8>
 8005596:	4a8c      	ldr	r2, [pc, #560]	; (80057c8 <_printf_float+0x304>)
 8005598:	4b8c      	ldr	r3, [pc, #560]	; (80057cc <_printf_float+0x308>)
 800559a:	e7da      	b.n	8005552 <_printf_float+0x8e>
 800559c:	6861      	ldr	r1, [r4, #4]
 800559e:	1c4b      	adds	r3, r1, #1
 80055a0:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 80055a4:	a80a      	add	r0, sp, #40	; 0x28
 80055a6:	d13e      	bne.n	8005626 <_printf_float+0x162>
 80055a8:	2306      	movs	r3, #6
 80055aa:	6063      	str	r3, [r4, #4]
 80055ac:	2300      	movs	r3, #0
 80055ae:	e9cd 0302 	strd	r0, r3, [sp, #8]
 80055b2:	ab09      	add	r3, sp, #36	; 0x24
 80055b4:	9300      	str	r3, [sp, #0]
 80055b6:	ec49 8b10 	vmov	d0, r8, r9
 80055ba:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80055be:	6022      	str	r2, [r4, #0]
 80055c0:	f8cd a004 	str.w	sl, [sp, #4]
 80055c4:	6861      	ldr	r1, [r4, #4]
 80055c6:	4628      	mov	r0, r5
 80055c8:	f7ff fee8 	bl	800539c <__cvt>
 80055cc:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 80055d0:	2b47      	cmp	r3, #71	; 0x47
 80055d2:	4680      	mov	r8, r0
 80055d4:	d109      	bne.n	80055ea <_printf_float+0x126>
 80055d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80055d8:	1cd8      	adds	r0, r3, #3
 80055da:	db02      	blt.n	80055e2 <_printf_float+0x11e>
 80055dc:	6862      	ldr	r2, [r4, #4]
 80055de:	4293      	cmp	r3, r2
 80055e0:	dd47      	ble.n	8005672 <_printf_float+0x1ae>
 80055e2:	f1aa 0a02 	sub.w	sl, sl, #2
 80055e6:	fa5f fa8a 	uxtb.w	sl, sl
 80055ea:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 80055ee:	9909      	ldr	r1, [sp, #36]	; 0x24
 80055f0:	d824      	bhi.n	800563c <_printf_float+0x178>
 80055f2:	3901      	subs	r1, #1
 80055f4:	4652      	mov	r2, sl
 80055f6:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80055fa:	9109      	str	r1, [sp, #36]	; 0x24
 80055fc:	f7ff ff2f 	bl	800545e <__exponent>
 8005600:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005602:	1813      	adds	r3, r2, r0
 8005604:	2a01      	cmp	r2, #1
 8005606:	4681      	mov	r9, r0
 8005608:	6123      	str	r3, [r4, #16]
 800560a:	dc02      	bgt.n	8005612 <_printf_float+0x14e>
 800560c:	6822      	ldr	r2, [r4, #0]
 800560e:	07d1      	lsls	r1, r2, #31
 8005610:	d501      	bpl.n	8005616 <_printf_float+0x152>
 8005612:	3301      	adds	r3, #1
 8005614:	6123      	str	r3, [r4, #16]
 8005616:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800561a:	2b00      	cmp	r3, #0
 800561c:	d0a5      	beq.n	800556a <_printf_float+0xa6>
 800561e:	232d      	movs	r3, #45	; 0x2d
 8005620:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005624:	e7a1      	b.n	800556a <_printf_float+0xa6>
 8005626:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 800562a:	f000 8177 	beq.w	800591c <_printf_float+0x458>
 800562e:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8005632:	d1bb      	bne.n	80055ac <_printf_float+0xe8>
 8005634:	2900      	cmp	r1, #0
 8005636:	d1b9      	bne.n	80055ac <_printf_float+0xe8>
 8005638:	2301      	movs	r3, #1
 800563a:	e7b6      	b.n	80055aa <_printf_float+0xe6>
 800563c:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 8005640:	d119      	bne.n	8005676 <_printf_float+0x1b2>
 8005642:	2900      	cmp	r1, #0
 8005644:	6863      	ldr	r3, [r4, #4]
 8005646:	dd0c      	ble.n	8005662 <_printf_float+0x19e>
 8005648:	6121      	str	r1, [r4, #16]
 800564a:	b913      	cbnz	r3, 8005652 <_printf_float+0x18e>
 800564c:	6822      	ldr	r2, [r4, #0]
 800564e:	07d2      	lsls	r2, r2, #31
 8005650:	d502      	bpl.n	8005658 <_printf_float+0x194>
 8005652:	3301      	adds	r3, #1
 8005654:	440b      	add	r3, r1
 8005656:	6123      	str	r3, [r4, #16]
 8005658:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800565a:	65a3      	str	r3, [r4, #88]	; 0x58
 800565c:	f04f 0900 	mov.w	r9, #0
 8005660:	e7d9      	b.n	8005616 <_printf_float+0x152>
 8005662:	b913      	cbnz	r3, 800566a <_printf_float+0x1a6>
 8005664:	6822      	ldr	r2, [r4, #0]
 8005666:	07d0      	lsls	r0, r2, #31
 8005668:	d501      	bpl.n	800566e <_printf_float+0x1aa>
 800566a:	3302      	adds	r3, #2
 800566c:	e7f3      	b.n	8005656 <_printf_float+0x192>
 800566e:	2301      	movs	r3, #1
 8005670:	e7f1      	b.n	8005656 <_printf_float+0x192>
 8005672:	f04f 0a67 	mov.w	sl, #103	; 0x67
 8005676:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800567a:	4293      	cmp	r3, r2
 800567c:	db05      	blt.n	800568a <_printf_float+0x1c6>
 800567e:	6822      	ldr	r2, [r4, #0]
 8005680:	6123      	str	r3, [r4, #16]
 8005682:	07d1      	lsls	r1, r2, #31
 8005684:	d5e8      	bpl.n	8005658 <_printf_float+0x194>
 8005686:	3301      	adds	r3, #1
 8005688:	e7e5      	b.n	8005656 <_printf_float+0x192>
 800568a:	2b00      	cmp	r3, #0
 800568c:	bfd4      	ite	le
 800568e:	f1c3 0302 	rsble	r3, r3, #2
 8005692:	2301      	movgt	r3, #1
 8005694:	4413      	add	r3, r2
 8005696:	e7de      	b.n	8005656 <_printf_float+0x192>
 8005698:	6823      	ldr	r3, [r4, #0]
 800569a:	055a      	lsls	r2, r3, #21
 800569c:	d407      	bmi.n	80056ae <_printf_float+0x1ea>
 800569e:	6923      	ldr	r3, [r4, #16]
 80056a0:	4642      	mov	r2, r8
 80056a2:	4631      	mov	r1, r6
 80056a4:	4628      	mov	r0, r5
 80056a6:	47b8      	blx	r7
 80056a8:	3001      	adds	r0, #1
 80056aa:	d12b      	bne.n	8005704 <_printf_float+0x240>
 80056ac:	e767      	b.n	800557e <_printf_float+0xba>
 80056ae:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 80056b2:	f240 80dc 	bls.w	800586e <_printf_float+0x3aa>
 80056b6:	2200      	movs	r2, #0
 80056b8:	2300      	movs	r3, #0
 80056ba:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80056be:	f7fb f9db 	bl	8000a78 <__aeabi_dcmpeq>
 80056c2:	2800      	cmp	r0, #0
 80056c4:	d033      	beq.n	800572e <_printf_float+0x26a>
 80056c6:	2301      	movs	r3, #1
 80056c8:	4a41      	ldr	r2, [pc, #260]	; (80057d0 <_printf_float+0x30c>)
 80056ca:	4631      	mov	r1, r6
 80056cc:	4628      	mov	r0, r5
 80056ce:	47b8      	blx	r7
 80056d0:	3001      	adds	r0, #1
 80056d2:	f43f af54 	beq.w	800557e <_printf_float+0xba>
 80056d6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80056da:	429a      	cmp	r2, r3
 80056dc:	db02      	blt.n	80056e4 <_printf_float+0x220>
 80056de:	6823      	ldr	r3, [r4, #0]
 80056e0:	07d8      	lsls	r0, r3, #31
 80056e2:	d50f      	bpl.n	8005704 <_printf_float+0x240>
 80056e4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80056e8:	4631      	mov	r1, r6
 80056ea:	4628      	mov	r0, r5
 80056ec:	47b8      	blx	r7
 80056ee:	3001      	adds	r0, #1
 80056f0:	f43f af45 	beq.w	800557e <_printf_float+0xba>
 80056f4:	f04f 0800 	mov.w	r8, #0
 80056f8:	f104 091a 	add.w	r9, r4, #26
 80056fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80056fe:	3b01      	subs	r3, #1
 8005700:	4543      	cmp	r3, r8
 8005702:	dc09      	bgt.n	8005718 <_printf_float+0x254>
 8005704:	6823      	ldr	r3, [r4, #0]
 8005706:	079b      	lsls	r3, r3, #30
 8005708:	f100 8103 	bmi.w	8005912 <_printf_float+0x44e>
 800570c:	68e0      	ldr	r0, [r4, #12]
 800570e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005710:	4298      	cmp	r0, r3
 8005712:	bfb8      	it	lt
 8005714:	4618      	movlt	r0, r3
 8005716:	e734      	b.n	8005582 <_printf_float+0xbe>
 8005718:	2301      	movs	r3, #1
 800571a:	464a      	mov	r2, r9
 800571c:	4631      	mov	r1, r6
 800571e:	4628      	mov	r0, r5
 8005720:	47b8      	blx	r7
 8005722:	3001      	adds	r0, #1
 8005724:	f43f af2b 	beq.w	800557e <_printf_float+0xba>
 8005728:	f108 0801 	add.w	r8, r8, #1
 800572c:	e7e6      	b.n	80056fc <_printf_float+0x238>
 800572e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005730:	2b00      	cmp	r3, #0
 8005732:	dc2b      	bgt.n	800578c <_printf_float+0x2c8>
 8005734:	2301      	movs	r3, #1
 8005736:	4a26      	ldr	r2, [pc, #152]	; (80057d0 <_printf_float+0x30c>)
 8005738:	4631      	mov	r1, r6
 800573a:	4628      	mov	r0, r5
 800573c:	47b8      	blx	r7
 800573e:	3001      	adds	r0, #1
 8005740:	f43f af1d 	beq.w	800557e <_printf_float+0xba>
 8005744:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005746:	b923      	cbnz	r3, 8005752 <_printf_float+0x28e>
 8005748:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800574a:	b913      	cbnz	r3, 8005752 <_printf_float+0x28e>
 800574c:	6823      	ldr	r3, [r4, #0]
 800574e:	07d9      	lsls	r1, r3, #31
 8005750:	d5d8      	bpl.n	8005704 <_printf_float+0x240>
 8005752:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005756:	4631      	mov	r1, r6
 8005758:	4628      	mov	r0, r5
 800575a:	47b8      	blx	r7
 800575c:	3001      	adds	r0, #1
 800575e:	f43f af0e 	beq.w	800557e <_printf_float+0xba>
 8005762:	f04f 0900 	mov.w	r9, #0
 8005766:	f104 0a1a 	add.w	sl, r4, #26
 800576a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800576c:	425b      	negs	r3, r3
 800576e:	454b      	cmp	r3, r9
 8005770:	dc01      	bgt.n	8005776 <_printf_float+0x2b2>
 8005772:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005774:	e794      	b.n	80056a0 <_printf_float+0x1dc>
 8005776:	2301      	movs	r3, #1
 8005778:	4652      	mov	r2, sl
 800577a:	4631      	mov	r1, r6
 800577c:	4628      	mov	r0, r5
 800577e:	47b8      	blx	r7
 8005780:	3001      	adds	r0, #1
 8005782:	f43f aefc 	beq.w	800557e <_printf_float+0xba>
 8005786:	f109 0901 	add.w	r9, r9, #1
 800578a:	e7ee      	b.n	800576a <_printf_float+0x2a6>
 800578c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800578e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005790:	429a      	cmp	r2, r3
 8005792:	bfa8      	it	ge
 8005794:	461a      	movge	r2, r3
 8005796:	2a00      	cmp	r2, #0
 8005798:	4691      	mov	r9, r2
 800579a:	dd07      	ble.n	80057ac <_printf_float+0x2e8>
 800579c:	4613      	mov	r3, r2
 800579e:	4631      	mov	r1, r6
 80057a0:	4642      	mov	r2, r8
 80057a2:	4628      	mov	r0, r5
 80057a4:	47b8      	blx	r7
 80057a6:	3001      	adds	r0, #1
 80057a8:	f43f aee9 	beq.w	800557e <_printf_float+0xba>
 80057ac:	f104 031a 	add.w	r3, r4, #26
 80057b0:	f04f 0b00 	mov.w	fp, #0
 80057b4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80057b8:	9306      	str	r3, [sp, #24]
 80057ba:	e015      	b.n	80057e8 <_printf_float+0x324>
 80057bc:	7fefffff 	.word	0x7fefffff
 80057c0:	08008124 	.word	0x08008124
 80057c4:	08008120 	.word	0x08008120
 80057c8:	0800812c 	.word	0x0800812c
 80057cc:	08008128 	.word	0x08008128
 80057d0:	08008130 	.word	0x08008130
 80057d4:	2301      	movs	r3, #1
 80057d6:	9a06      	ldr	r2, [sp, #24]
 80057d8:	4631      	mov	r1, r6
 80057da:	4628      	mov	r0, r5
 80057dc:	47b8      	blx	r7
 80057de:	3001      	adds	r0, #1
 80057e0:	f43f aecd 	beq.w	800557e <_printf_float+0xba>
 80057e4:	f10b 0b01 	add.w	fp, fp, #1
 80057e8:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 80057ec:	ebaa 0309 	sub.w	r3, sl, r9
 80057f0:	455b      	cmp	r3, fp
 80057f2:	dcef      	bgt.n	80057d4 <_printf_float+0x310>
 80057f4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80057f8:	429a      	cmp	r2, r3
 80057fa:	44d0      	add	r8, sl
 80057fc:	db15      	blt.n	800582a <_printf_float+0x366>
 80057fe:	6823      	ldr	r3, [r4, #0]
 8005800:	07da      	lsls	r2, r3, #31
 8005802:	d412      	bmi.n	800582a <_printf_float+0x366>
 8005804:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005806:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005808:	eba3 020a 	sub.w	r2, r3, sl
 800580c:	eba3 0a01 	sub.w	sl, r3, r1
 8005810:	4592      	cmp	sl, r2
 8005812:	bfa8      	it	ge
 8005814:	4692      	movge	sl, r2
 8005816:	f1ba 0f00 	cmp.w	sl, #0
 800581a:	dc0e      	bgt.n	800583a <_printf_float+0x376>
 800581c:	f04f 0800 	mov.w	r8, #0
 8005820:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8005824:	f104 091a 	add.w	r9, r4, #26
 8005828:	e019      	b.n	800585e <_printf_float+0x39a>
 800582a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800582e:	4631      	mov	r1, r6
 8005830:	4628      	mov	r0, r5
 8005832:	47b8      	blx	r7
 8005834:	3001      	adds	r0, #1
 8005836:	d1e5      	bne.n	8005804 <_printf_float+0x340>
 8005838:	e6a1      	b.n	800557e <_printf_float+0xba>
 800583a:	4653      	mov	r3, sl
 800583c:	4642      	mov	r2, r8
 800583e:	4631      	mov	r1, r6
 8005840:	4628      	mov	r0, r5
 8005842:	47b8      	blx	r7
 8005844:	3001      	adds	r0, #1
 8005846:	d1e9      	bne.n	800581c <_printf_float+0x358>
 8005848:	e699      	b.n	800557e <_printf_float+0xba>
 800584a:	2301      	movs	r3, #1
 800584c:	464a      	mov	r2, r9
 800584e:	4631      	mov	r1, r6
 8005850:	4628      	mov	r0, r5
 8005852:	47b8      	blx	r7
 8005854:	3001      	adds	r0, #1
 8005856:	f43f ae92 	beq.w	800557e <_printf_float+0xba>
 800585a:	f108 0801 	add.w	r8, r8, #1
 800585e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005862:	1a9b      	subs	r3, r3, r2
 8005864:	eba3 030a 	sub.w	r3, r3, sl
 8005868:	4543      	cmp	r3, r8
 800586a:	dcee      	bgt.n	800584a <_printf_float+0x386>
 800586c:	e74a      	b.n	8005704 <_printf_float+0x240>
 800586e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005870:	2a01      	cmp	r2, #1
 8005872:	dc01      	bgt.n	8005878 <_printf_float+0x3b4>
 8005874:	07db      	lsls	r3, r3, #31
 8005876:	d53a      	bpl.n	80058ee <_printf_float+0x42a>
 8005878:	2301      	movs	r3, #1
 800587a:	4642      	mov	r2, r8
 800587c:	4631      	mov	r1, r6
 800587e:	4628      	mov	r0, r5
 8005880:	47b8      	blx	r7
 8005882:	3001      	adds	r0, #1
 8005884:	f43f ae7b 	beq.w	800557e <_printf_float+0xba>
 8005888:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800588c:	4631      	mov	r1, r6
 800588e:	4628      	mov	r0, r5
 8005890:	47b8      	blx	r7
 8005892:	3001      	adds	r0, #1
 8005894:	f108 0801 	add.w	r8, r8, #1
 8005898:	f43f ae71 	beq.w	800557e <_printf_float+0xba>
 800589c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800589e:	2200      	movs	r2, #0
 80058a0:	f103 3aff 	add.w	sl, r3, #4294967295
 80058a4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80058a8:	2300      	movs	r3, #0
 80058aa:	f7fb f8e5 	bl	8000a78 <__aeabi_dcmpeq>
 80058ae:	b9c8      	cbnz	r0, 80058e4 <_printf_float+0x420>
 80058b0:	4653      	mov	r3, sl
 80058b2:	4642      	mov	r2, r8
 80058b4:	4631      	mov	r1, r6
 80058b6:	4628      	mov	r0, r5
 80058b8:	47b8      	blx	r7
 80058ba:	3001      	adds	r0, #1
 80058bc:	d10e      	bne.n	80058dc <_printf_float+0x418>
 80058be:	e65e      	b.n	800557e <_printf_float+0xba>
 80058c0:	2301      	movs	r3, #1
 80058c2:	4652      	mov	r2, sl
 80058c4:	4631      	mov	r1, r6
 80058c6:	4628      	mov	r0, r5
 80058c8:	47b8      	blx	r7
 80058ca:	3001      	adds	r0, #1
 80058cc:	f43f ae57 	beq.w	800557e <_printf_float+0xba>
 80058d0:	f108 0801 	add.w	r8, r8, #1
 80058d4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80058d6:	3b01      	subs	r3, #1
 80058d8:	4543      	cmp	r3, r8
 80058da:	dcf1      	bgt.n	80058c0 <_printf_float+0x3fc>
 80058dc:	464b      	mov	r3, r9
 80058de:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80058e2:	e6de      	b.n	80056a2 <_printf_float+0x1de>
 80058e4:	f04f 0800 	mov.w	r8, #0
 80058e8:	f104 0a1a 	add.w	sl, r4, #26
 80058ec:	e7f2      	b.n	80058d4 <_printf_float+0x410>
 80058ee:	2301      	movs	r3, #1
 80058f0:	e7df      	b.n	80058b2 <_printf_float+0x3ee>
 80058f2:	2301      	movs	r3, #1
 80058f4:	464a      	mov	r2, r9
 80058f6:	4631      	mov	r1, r6
 80058f8:	4628      	mov	r0, r5
 80058fa:	47b8      	blx	r7
 80058fc:	3001      	adds	r0, #1
 80058fe:	f43f ae3e 	beq.w	800557e <_printf_float+0xba>
 8005902:	f108 0801 	add.w	r8, r8, #1
 8005906:	68e3      	ldr	r3, [r4, #12]
 8005908:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800590a:	1a9b      	subs	r3, r3, r2
 800590c:	4543      	cmp	r3, r8
 800590e:	dcf0      	bgt.n	80058f2 <_printf_float+0x42e>
 8005910:	e6fc      	b.n	800570c <_printf_float+0x248>
 8005912:	f04f 0800 	mov.w	r8, #0
 8005916:	f104 0919 	add.w	r9, r4, #25
 800591a:	e7f4      	b.n	8005906 <_printf_float+0x442>
 800591c:	2900      	cmp	r1, #0
 800591e:	f43f ae8b 	beq.w	8005638 <_printf_float+0x174>
 8005922:	2300      	movs	r3, #0
 8005924:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8005928:	ab09      	add	r3, sp, #36	; 0x24
 800592a:	9300      	str	r3, [sp, #0]
 800592c:	ec49 8b10 	vmov	d0, r8, r9
 8005930:	6022      	str	r2, [r4, #0]
 8005932:	f8cd a004 	str.w	sl, [sp, #4]
 8005936:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800593a:	4628      	mov	r0, r5
 800593c:	f7ff fd2e 	bl	800539c <__cvt>
 8005940:	4680      	mov	r8, r0
 8005942:	e648      	b.n	80055d6 <_printf_float+0x112>

08005944 <_printf_common>:
 8005944:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005948:	4691      	mov	r9, r2
 800594a:	461f      	mov	r7, r3
 800594c:	688a      	ldr	r2, [r1, #8]
 800594e:	690b      	ldr	r3, [r1, #16]
 8005950:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005954:	4293      	cmp	r3, r2
 8005956:	bfb8      	it	lt
 8005958:	4613      	movlt	r3, r2
 800595a:	f8c9 3000 	str.w	r3, [r9]
 800595e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005962:	4606      	mov	r6, r0
 8005964:	460c      	mov	r4, r1
 8005966:	b112      	cbz	r2, 800596e <_printf_common+0x2a>
 8005968:	3301      	adds	r3, #1
 800596a:	f8c9 3000 	str.w	r3, [r9]
 800596e:	6823      	ldr	r3, [r4, #0]
 8005970:	0699      	lsls	r1, r3, #26
 8005972:	bf42      	ittt	mi
 8005974:	f8d9 3000 	ldrmi.w	r3, [r9]
 8005978:	3302      	addmi	r3, #2
 800597a:	f8c9 3000 	strmi.w	r3, [r9]
 800597e:	6825      	ldr	r5, [r4, #0]
 8005980:	f015 0506 	ands.w	r5, r5, #6
 8005984:	d107      	bne.n	8005996 <_printf_common+0x52>
 8005986:	f104 0a19 	add.w	sl, r4, #25
 800598a:	68e3      	ldr	r3, [r4, #12]
 800598c:	f8d9 2000 	ldr.w	r2, [r9]
 8005990:	1a9b      	subs	r3, r3, r2
 8005992:	42ab      	cmp	r3, r5
 8005994:	dc28      	bgt.n	80059e8 <_printf_common+0xa4>
 8005996:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800599a:	6822      	ldr	r2, [r4, #0]
 800599c:	3300      	adds	r3, #0
 800599e:	bf18      	it	ne
 80059a0:	2301      	movne	r3, #1
 80059a2:	0692      	lsls	r2, r2, #26
 80059a4:	d42d      	bmi.n	8005a02 <_printf_common+0xbe>
 80059a6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80059aa:	4639      	mov	r1, r7
 80059ac:	4630      	mov	r0, r6
 80059ae:	47c0      	blx	r8
 80059b0:	3001      	adds	r0, #1
 80059b2:	d020      	beq.n	80059f6 <_printf_common+0xb2>
 80059b4:	6823      	ldr	r3, [r4, #0]
 80059b6:	68e5      	ldr	r5, [r4, #12]
 80059b8:	f8d9 2000 	ldr.w	r2, [r9]
 80059bc:	f003 0306 	and.w	r3, r3, #6
 80059c0:	2b04      	cmp	r3, #4
 80059c2:	bf08      	it	eq
 80059c4:	1aad      	subeq	r5, r5, r2
 80059c6:	68a3      	ldr	r3, [r4, #8]
 80059c8:	6922      	ldr	r2, [r4, #16]
 80059ca:	bf0c      	ite	eq
 80059cc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80059d0:	2500      	movne	r5, #0
 80059d2:	4293      	cmp	r3, r2
 80059d4:	bfc4      	itt	gt
 80059d6:	1a9b      	subgt	r3, r3, r2
 80059d8:	18ed      	addgt	r5, r5, r3
 80059da:	f04f 0900 	mov.w	r9, #0
 80059de:	341a      	adds	r4, #26
 80059e0:	454d      	cmp	r5, r9
 80059e2:	d11a      	bne.n	8005a1a <_printf_common+0xd6>
 80059e4:	2000      	movs	r0, #0
 80059e6:	e008      	b.n	80059fa <_printf_common+0xb6>
 80059e8:	2301      	movs	r3, #1
 80059ea:	4652      	mov	r2, sl
 80059ec:	4639      	mov	r1, r7
 80059ee:	4630      	mov	r0, r6
 80059f0:	47c0      	blx	r8
 80059f2:	3001      	adds	r0, #1
 80059f4:	d103      	bne.n	80059fe <_printf_common+0xba>
 80059f6:	f04f 30ff 	mov.w	r0, #4294967295
 80059fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80059fe:	3501      	adds	r5, #1
 8005a00:	e7c3      	b.n	800598a <_printf_common+0x46>
 8005a02:	18e1      	adds	r1, r4, r3
 8005a04:	1c5a      	adds	r2, r3, #1
 8005a06:	2030      	movs	r0, #48	; 0x30
 8005a08:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005a0c:	4422      	add	r2, r4
 8005a0e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005a12:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005a16:	3302      	adds	r3, #2
 8005a18:	e7c5      	b.n	80059a6 <_printf_common+0x62>
 8005a1a:	2301      	movs	r3, #1
 8005a1c:	4622      	mov	r2, r4
 8005a1e:	4639      	mov	r1, r7
 8005a20:	4630      	mov	r0, r6
 8005a22:	47c0      	blx	r8
 8005a24:	3001      	adds	r0, #1
 8005a26:	d0e6      	beq.n	80059f6 <_printf_common+0xb2>
 8005a28:	f109 0901 	add.w	r9, r9, #1
 8005a2c:	e7d8      	b.n	80059e0 <_printf_common+0x9c>
	...

08005a30 <_printf_i>:
 8005a30:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005a34:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8005a38:	460c      	mov	r4, r1
 8005a3a:	7e09      	ldrb	r1, [r1, #24]
 8005a3c:	b085      	sub	sp, #20
 8005a3e:	296e      	cmp	r1, #110	; 0x6e
 8005a40:	4617      	mov	r7, r2
 8005a42:	4606      	mov	r6, r0
 8005a44:	4698      	mov	r8, r3
 8005a46:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005a48:	f000 80b3 	beq.w	8005bb2 <_printf_i+0x182>
 8005a4c:	d822      	bhi.n	8005a94 <_printf_i+0x64>
 8005a4e:	2963      	cmp	r1, #99	; 0x63
 8005a50:	d036      	beq.n	8005ac0 <_printf_i+0x90>
 8005a52:	d80a      	bhi.n	8005a6a <_printf_i+0x3a>
 8005a54:	2900      	cmp	r1, #0
 8005a56:	f000 80b9 	beq.w	8005bcc <_printf_i+0x19c>
 8005a5a:	2958      	cmp	r1, #88	; 0x58
 8005a5c:	f000 8083 	beq.w	8005b66 <_printf_i+0x136>
 8005a60:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005a64:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8005a68:	e032      	b.n	8005ad0 <_printf_i+0xa0>
 8005a6a:	2964      	cmp	r1, #100	; 0x64
 8005a6c:	d001      	beq.n	8005a72 <_printf_i+0x42>
 8005a6e:	2969      	cmp	r1, #105	; 0x69
 8005a70:	d1f6      	bne.n	8005a60 <_printf_i+0x30>
 8005a72:	6820      	ldr	r0, [r4, #0]
 8005a74:	6813      	ldr	r3, [r2, #0]
 8005a76:	0605      	lsls	r5, r0, #24
 8005a78:	f103 0104 	add.w	r1, r3, #4
 8005a7c:	d52a      	bpl.n	8005ad4 <_printf_i+0xa4>
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	6011      	str	r1, [r2, #0]
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	da03      	bge.n	8005a8e <_printf_i+0x5e>
 8005a86:	222d      	movs	r2, #45	; 0x2d
 8005a88:	425b      	negs	r3, r3
 8005a8a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8005a8e:	486f      	ldr	r0, [pc, #444]	; (8005c4c <_printf_i+0x21c>)
 8005a90:	220a      	movs	r2, #10
 8005a92:	e039      	b.n	8005b08 <_printf_i+0xd8>
 8005a94:	2973      	cmp	r1, #115	; 0x73
 8005a96:	f000 809d 	beq.w	8005bd4 <_printf_i+0x1a4>
 8005a9a:	d808      	bhi.n	8005aae <_printf_i+0x7e>
 8005a9c:	296f      	cmp	r1, #111	; 0x6f
 8005a9e:	d020      	beq.n	8005ae2 <_printf_i+0xb2>
 8005aa0:	2970      	cmp	r1, #112	; 0x70
 8005aa2:	d1dd      	bne.n	8005a60 <_printf_i+0x30>
 8005aa4:	6823      	ldr	r3, [r4, #0]
 8005aa6:	f043 0320 	orr.w	r3, r3, #32
 8005aaa:	6023      	str	r3, [r4, #0]
 8005aac:	e003      	b.n	8005ab6 <_printf_i+0x86>
 8005aae:	2975      	cmp	r1, #117	; 0x75
 8005ab0:	d017      	beq.n	8005ae2 <_printf_i+0xb2>
 8005ab2:	2978      	cmp	r1, #120	; 0x78
 8005ab4:	d1d4      	bne.n	8005a60 <_printf_i+0x30>
 8005ab6:	2378      	movs	r3, #120	; 0x78
 8005ab8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005abc:	4864      	ldr	r0, [pc, #400]	; (8005c50 <_printf_i+0x220>)
 8005abe:	e055      	b.n	8005b6c <_printf_i+0x13c>
 8005ac0:	6813      	ldr	r3, [r2, #0]
 8005ac2:	1d19      	adds	r1, r3, #4
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	6011      	str	r1, [r2, #0]
 8005ac8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005acc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005ad0:	2301      	movs	r3, #1
 8005ad2:	e08c      	b.n	8005bee <_printf_i+0x1be>
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	6011      	str	r1, [r2, #0]
 8005ad8:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005adc:	bf18      	it	ne
 8005ade:	b21b      	sxthne	r3, r3
 8005ae0:	e7cf      	b.n	8005a82 <_printf_i+0x52>
 8005ae2:	6813      	ldr	r3, [r2, #0]
 8005ae4:	6825      	ldr	r5, [r4, #0]
 8005ae6:	1d18      	adds	r0, r3, #4
 8005ae8:	6010      	str	r0, [r2, #0]
 8005aea:	0628      	lsls	r0, r5, #24
 8005aec:	d501      	bpl.n	8005af2 <_printf_i+0xc2>
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	e002      	b.n	8005af8 <_printf_i+0xc8>
 8005af2:	0668      	lsls	r0, r5, #25
 8005af4:	d5fb      	bpl.n	8005aee <_printf_i+0xbe>
 8005af6:	881b      	ldrh	r3, [r3, #0]
 8005af8:	4854      	ldr	r0, [pc, #336]	; (8005c4c <_printf_i+0x21c>)
 8005afa:	296f      	cmp	r1, #111	; 0x6f
 8005afc:	bf14      	ite	ne
 8005afe:	220a      	movne	r2, #10
 8005b00:	2208      	moveq	r2, #8
 8005b02:	2100      	movs	r1, #0
 8005b04:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005b08:	6865      	ldr	r5, [r4, #4]
 8005b0a:	60a5      	str	r5, [r4, #8]
 8005b0c:	2d00      	cmp	r5, #0
 8005b0e:	f2c0 8095 	blt.w	8005c3c <_printf_i+0x20c>
 8005b12:	6821      	ldr	r1, [r4, #0]
 8005b14:	f021 0104 	bic.w	r1, r1, #4
 8005b18:	6021      	str	r1, [r4, #0]
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d13d      	bne.n	8005b9a <_printf_i+0x16a>
 8005b1e:	2d00      	cmp	r5, #0
 8005b20:	f040 808e 	bne.w	8005c40 <_printf_i+0x210>
 8005b24:	4665      	mov	r5, ip
 8005b26:	2a08      	cmp	r2, #8
 8005b28:	d10b      	bne.n	8005b42 <_printf_i+0x112>
 8005b2a:	6823      	ldr	r3, [r4, #0]
 8005b2c:	07db      	lsls	r3, r3, #31
 8005b2e:	d508      	bpl.n	8005b42 <_printf_i+0x112>
 8005b30:	6923      	ldr	r3, [r4, #16]
 8005b32:	6862      	ldr	r2, [r4, #4]
 8005b34:	429a      	cmp	r2, r3
 8005b36:	bfde      	ittt	le
 8005b38:	2330      	movle	r3, #48	; 0x30
 8005b3a:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005b3e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005b42:	ebac 0305 	sub.w	r3, ip, r5
 8005b46:	6123      	str	r3, [r4, #16]
 8005b48:	f8cd 8000 	str.w	r8, [sp]
 8005b4c:	463b      	mov	r3, r7
 8005b4e:	aa03      	add	r2, sp, #12
 8005b50:	4621      	mov	r1, r4
 8005b52:	4630      	mov	r0, r6
 8005b54:	f7ff fef6 	bl	8005944 <_printf_common>
 8005b58:	3001      	adds	r0, #1
 8005b5a:	d14d      	bne.n	8005bf8 <_printf_i+0x1c8>
 8005b5c:	f04f 30ff 	mov.w	r0, #4294967295
 8005b60:	b005      	add	sp, #20
 8005b62:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005b66:	4839      	ldr	r0, [pc, #228]	; (8005c4c <_printf_i+0x21c>)
 8005b68:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8005b6c:	6813      	ldr	r3, [r2, #0]
 8005b6e:	6821      	ldr	r1, [r4, #0]
 8005b70:	1d1d      	adds	r5, r3, #4
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	6015      	str	r5, [r2, #0]
 8005b76:	060a      	lsls	r2, r1, #24
 8005b78:	d50b      	bpl.n	8005b92 <_printf_i+0x162>
 8005b7a:	07ca      	lsls	r2, r1, #31
 8005b7c:	bf44      	itt	mi
 8005b7e:	f041 0120 	orrmi.w	r1, r1, #32
 8005b82:	6021      	strmi	r1, [r4, #0]
 8005b84:	b91b      	cbnz	r3, 8005b8e <_printf_i+0x15e>
 8005b86:	6822      	ldr	r2, [r4, #0]
 8005b88:	f022 0220 	bic.w	r2, r2, #32
 8005b8c:	6022      	str	r2, [r4, #0]
 8005b8e:	2210      	movs	r2, #16
 8005b90:	e7b7      	b.n	8005b02 <_printf_i+0xd2>
 8005b92:	064d      	lsls	r5, r1, #25
 8005b94:	bf48      	it	mi
 8005b96:	b29b      	uxthmi	r3, r3
 8005b98:	e7ef      	b.n	8005b7a <_printf_i+0x14a>
 8005b9a:	4665      	mov	r5, ip
 8005b9c:	fbb3 f1f2 	udiv	r1, r3, r2
 8005ba0:	fb02 3311 	mls	r3, r2, r1, r3
 8005ba4:	5cc3      	ldrb	r3, [r0, r3]
 8005ba6:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8005baa:	460b      	mov	r3, r1
 8005bac:	2900      	cmp	r1, #0
 8005bae:	d1f5      	bne.n	8005b9c <_printf_i+0x16c>
 8005bb0:	e7b9      	b.n	8005b26 <_printf_i+0xf6>
 8005bb2:	6813      	ldr	r3, [r2, #0]
 8005bb4:	6825      	ldr	r5, [r4, #0]
 8005bb6:	6961      	ldr	r1, [r4, #20]
 8005bb8:	1d18      	adds	r0, r3, #4
 8005bba:	6010      	str	r0, [r2, #0]
 8005bbc:	0628      	lsls	r0, r5, #24
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	d501      	bpl.n	8005bc6 <_printf_i+0x196>
 8005bc2:	6019      	str	r1, [r3, #0]
 8005bc4:	e002      	b.n	8005bcc <_printf_i+0x19c>
 8005bc6:	066a      	lsls	r2, r5, #25
 8005bc8:	d5fb      	bpl.n	8005bc2 <_printf_i+0x192>
 8005bca:	8019      	strh	r1, [r3, #0]
 8005bcc:	2300      	movs	r3, #0
 8005bce:	6123      	str	r3, [r4, #16]
 8005bd0:	4665      	mov	r5, ip
 8005bd2:	e7b9      	b.n	8005b48 <_printf_i+0x118>
 8005bd4:	6813      	ldr	r3, [r2, #0]
 8005bd6:	1d19      	adds	r1, r3, #4
 8005bd8:	6011      	str	r1, [r2, #0]
 8005bda:	681d      	ldr	r5, [r3, #0]
 8005bdc:	6862      	ldr	r2, [r4, #4]
 8005bde:	2100      	movs	r1, #0
 8005be0:	4628      	mov	r0, r5
 8005be2:	f7fa fad5 	bl	8000190 <memchr>
 8005be6:	b108      	cbz	r0, 8005bec <_printf_i+0x1bc>
 8005be8:	1b40      	subs	r0, r0, r5
 8005bea:	6060      	str	r0, [r4, #4]
 8005bec:	6863      	ldr	r3, [r4, #4]
 8005bee:	6123      	str	r3, [r4, #16]
 8005bf0:	2300      	movs	r3, #0
 8005bf2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005bf6:	e7a7      	b.n	8005b48 <_printf_i+0x118>
 8005bf8:	6923      	ldr	r3, [r4, #16]
 8005bfa:	462a      	mov	r2, r5
 8005bfc:	4639      	mov	r1, r7
 8005bfe:	4630      	mov	r0, r6
 8005c00:	47c0      	blx	r8
 8005c02:	3001      	adds	r0, #1
 8005c04:	d0aa      	beq.n	8005b5c <_printf_i+0x12c>
 8005c06:	6823      	ldr	r3, [r4, #0]
 8005c08:	079b      	lsls	r3, r3, #30
 8005c0a:	d413      	bmi.n	8005c34 <_printf_i+0x204>
 8005c0c:	68e0      	ldr	r0, [r4, #12]
 8005c0e:	9b03      	ldr	r3, [sp, #12]
 8005c10:	4298      	cmp	r0, r3
 8005c12:	bfb8      	it	lt
 8005c14:	4618      	movlt	r0, r3
 8005c16:	e7a3      	b.n	8005b60 <_printf_i+0x130>
 8005c18:	2301      	movs	r3, #1
 8005c1a:	464a      	mov	r2, r9
 8005c1c:	4639      	mov	r1, r7
 8005c1e:	4630      	mov	r0, r6
 8005c20:	47c0      	blx	r8
 8005c22:	3001      	adds	r0, #1
 8005c24:	d09a      	beq.n	8005b5c <_printf_i+0x12c>
 8005c26:	3501      	adds	r5, #1
 8005c28:	68e3      	ldr	r3, [r4, #12]
 8005c2a:	9a03      	ldr	r2, [sp, #12]
 8005c2c:	1a9b      	subs	r3, r3, r2
 8005c2e:	42ab      	cmp	r3, r5
 8005c30:	dcf2      	bgt.n	8005c18 <_printf_i+0x1e8>
 8005c32:	e7eb      	b.n	8005c0c <_printf_i+0x1dc>
 8005c34:	2500      	movs	r5, #0
 8005c36:	f104 0919 	add.w	r9, r4, #25
 8005c3a:	e7f5      	b.n	8005c28 <_printf_i+0x1f8>
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d1ac      	bne.n	8005b9a <_printf_i+0x16a>
 8005c40:	7803      	ldrb	r3, [r0, #0]
 8005c42:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005c46:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005c4a:	e76c      	b.n	8005b26 <_printf_i+0xf6>
 8005c4c:	08008132 	.word	0x08008132
 8005c50:	08008143 	.word	0x08008143

08005c54 <_sbrk_r>:
 8005c54:	b538      	push	{r3, r4, r5, lr}
 8005c56:	4c06      	ldr	r4, [pc, #24]	; (8005c70 <_sbrk_r+0x1c>)
 8005c58:	2300      	movs	r3, #0
 8005c5a:	4605      	mov	r5, r0
 8005c5c:	4608      	mov	r0, r1
 8005c5e:	6023      	str	r3, [r4, #0]
 8005c60:	f7fc f8e0 	bl	8001e24 <_sbrk>
 8005c64:	1c43      	adds	r3, r0, #1
 8005c66:	d102      	bne.n	8005c6e <_sbrk_r+0x1a>
 8005c68:	6823      	ldr	r3, [r4, #0]
 8005c6a:	b103      	cbz	r3, 8005c6e <_sbrk_r+0x1a>
 8005c6c:	602b      	str	r3, [r5, #0]
 8005c6e:	bd38      	pop	{r3, r4, r5, pc}
 8005c70:	200002cc 	.word	0x200002cc

08005c74 <siprintf>:
 8005c74:	b40e      	push	{r1, r2, r3}
 8005c76:	b500      	push	{lr}
 8005c78:	b09c      	sub	sp, #112	; 0x70
 8005c7a:	ab1d      	add	r3, sp, #116	; 0x74
 8005c7c:	9002      	str	r0, [sp, #8]
 8005c7e:	9006      	str	r0, [sp, #24]
 8005c80:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005c84:	4809      	ldr	r0, [pc, #36]	; (8005cac <siprintf+0x38>)
 8005c86:	9107      	str	r1, [sp, #28]
 8005c88:	9104      	str	r1, [sp, #16]
 8005c8a:	4909      	ldr	r1, [pc, #36]	; (8005cb0 <siprintf+0x3c>)
 8005c8c:	f853 2b04 	ldr.w	r2, [r3], #4
 8005c90:	9105      	str	r1, [sp, #20]
 8005c92:	6800      	ldr	r0, [r0, #0]
 8005c94:	9301      	str	r3, [sp, #4]
 8005c96:	a902      	add	r1, sp, #8
 8005c98:	f001 f9b0 	bl	8006ffc <_svfiprintf_r>
 8005c9c:	9b02      	ldr	r3, [sp, #8]
 8005c9e:	2200      	movs	r2, #0
 8005ca0:	701a      	strb	r2, [r3, #0]
 8005ca2:	b01c      	add	sp, #112	; 0x70
 8005ca4:	f85d eb04 	ldr.w	lr, [sp], #4
 8005ca8:	b003      	add	sp, #12
 8005caa:	4770      	bx	lr
 8005cac:	20000010 	.word	0x20000010
 8005cb0:	ffff0208 	.word	0xffff0208

08005cb4 <quorem>:
 8005cb4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005cb8:	6903      	ldr	r3, [r0, #16]
 8005cba:	690c      	ldr	r4, [r1, #16]
 8005cbc:	42a3      	cmp	r3, r4
 8005cbe:	4680      	mov	r8, r0
 8005cc0:	f2c0 8082 	blt.w	8005dc8 <quorem+0x114>
 8005cc4:	3c01      	subs	r4, #1
 8005cc6:	f101 0714 	add.w	r7, r1, #20
 8005cca:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8005cce:	f100 0614 	add.w	r6, r0, #20
 8005cd2:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8005cd6:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8005cda:	eb06 030c 	add.w	r3, r6, ip
 8005cde:	3501      	adds	r5, #1
 8005ce0:	eb07 090c 	add.w	r9, r7, ip
 8005ce4:	9301      	str	r3, [sp, #4]
 8005ce6:	fbb0 f5f5 	udiv	r5, r0, r5
 8005cea:	b395      	cbz	r5, 8005d52 <quorem+0x9e>
 8005cec:	f04f 0a00 	mov.w	sl, #0
 8005cf0:	4638      	mov	r0, r7
 8005cf2:	46b6      	mov	lr, r6
 8005cf4:	46d3      	mov	fp, sl
 8005cf6:	f850 2b04 	ldr.w	r2, [r0], #4
 8005cfa:	b293      	uxth	r3, r2
 8005cfc:	fb05 a303 	mla	r3, r5, r3, sl
 8005d00:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005d04:	b29b      	uxth	r3, r3
 8005d06:	ebab 0303 	sub.w	r3, fp, r3
 8005d0a:	0c12      	lsrs	r2, r2, #16
 8005d0c:	f8de b000 	ldr.w	fp, [lr]
 8005d10:	fb05 a202 	mla	r2, r5, r2, sl
 8005d14:	fa13 f38b 	uxtah	r3, r3, fp
 8005d18:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8005d1c:	fa1f fb82 	uxth.w	fp, r2
 8005d20:	f8de 2000 	ldr.w	r2, [lr]
 8005d24:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8005d28:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005d2c:	b29b      	uxth	r3, r3
 8005d2e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005d32:	4581      	cmp	r9, r0
 8005d34:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8005d38:	f84e 3b04 	str.w	r3, [lr], #4
 8005d3c:	d2db      	bcs.n	8005cf6 <quorem+0x42>
 8005d3e:	f856 300c 	ldr.w	r3, [r6, ip]
 8005d42:	b933      	cbnz	r3, 8005d52 <quorem+0x9e>
 8005d44:	9b01      	ldr	r3, [sp, #4]
 8005d46:	3b04      	subs	r3, #4
 8005d48:	429e      	cmp	r6, r3
 8005d4a:	461a      	mov	r2, r3
 8005d4c:	d330      	bcc.n	8005db0 <quorem+0xfc>
 8005d4e:	f8c8 4010 	str.w	r4, [r8, #16]
 8005d52:	4640      	mov	r0, r8
 8005d54:	f001 f824 	bl	8006da0 <__mcmp>
 8005d58:	2800      	cmp	r0, #0
 8005d5a:	db25      	blt.n	8005da8 <quorem+0xf4>
 8005d5c:	3501      	adds	r5, #1
 8005d5e:	4630      	mov	r0, r6
 8005d60:	f04f 0c00 	mov.w	ip, #0
 8005d64:	f857 2b04 	ldr.w	r2, [r7], #4
 8005d68:	f8d0 e000 	ldr.w	lr, [r0]
 8005d6c:	b293      	uxth	r3, r2
 8005d6e:	ebac 0303 	sub.w	r3, ip, r3
 8005d72:	0c12      	lsrs	r2, r2, #16
 8005d74:	fa13 f38e 	uxtah	r3, r3, lr
 8005d78:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8005d7c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005d80:	b29b      	uxth	r3, r3
 8005d82:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005d86:	45b9      	cmp	r9, r7
 8005d88:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8005d8c:	f840 3b04 	str.w	r3, [r0], #4
 8005d90:	d2e8      	bcs.n	8005d64 <quorem+0xb0>
 8005d92:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8005d96:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8005d9a:	b92a      	cbnz	r2, 8005da8 <quorem+0xf4>
 8005d9c:	3b04      	subs	r3, #4
 8005d9e:	429e      	cmp	r6, r3
 8005da0:	461a      	mov	r2, r3
 8005da2:	d30b      	bcc.n	8005dbc <quorem+0x108>
 8005da4:	f8c8 4010 	str.w	r4, [r8, #16]
 8005da8:	4628      	mov	r0, r5
 8005daa:	b003      	add	sp, #12
 8005dac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005db0:	6812      	ldr	r2, [r2, #0]
 8005db2:	3b04      	subs	r3, #4
 8005db4:	2a00      	cmp	r2, #0
 8005db6:	d1ca      	bne.n	8005d4e <quorem+0x9a>
 8005db8:	3c01      	subs	r4, #1
 8005dba:	e7c5      	b.n	8005d48 <quorem+0x94>
 8005dbc:	6812      	ldr	r2, [r2, #0]
 8005dbe:	3b04      	subs	r3, #4
 8005dc0:	2a00      	cmp	r2, #0
 8005dc2:	d1ef      	bne.n	8005da4 <quorem+0xf0>
 8005dc4:	3c01      	subs	r4, #1
 8005dc6:	e7ea      	b.n	8005d9e <quorem+0xea>
 8005dc8:	2000      	movs	r0, #0
 8005dca:	e7ee      	b.n	8005daa <quorem+0xf6>
 8005dcc:	0000      	movs	r0, r0
	...

08005dd0 <_dtoa_r>:
 8005dd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005dd4:	ec57 6b10 	vmov	r6, r7, d0
 8005dd8:	b097      	sub	sp, #92	; 0x5c
 8005dda:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8005ddc:	9106      	str	r1, [sp, #24]
 8005dde:	4604      	mov	r4, r0
 8005de0:	920b      	str	r2, [sp, #44]	; 0x2c
 8005de2:	9312      	str	r3, [sp, #72]	; 0x48
 8005de4:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8005de8:	e9cd 6700 	strd	r6, r7, [sp]
 8005dec:	b93d      	cbnz	r5, 8005dfe <_dtoa_r+0x2e>
 8005dee:	2010      	movs	r0, #16
 8005df0:	f7ff fa1c 	bl	800522c <malloc>
 8005df4:	6260      	str	r0, [r4, #36]	; 0x24
 8005df6:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8005dfa:	6005      	str	r5, [r0, #0]
 8005dfc:	60c5      	str	r5, [r0, #12]
 8005dfe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005e00:	6819      	ldr	r1, [r3, #0]
 8005e02:	b151      	cbz	r1, 8005e1a <_dtoa_r+0x4a>
 8005e04:	685a      	ldr	r2, [r3, #4]
 8005e06:	604a      	str	r2, [r1, #4]
 8005e08:	2301      	movs	r3, #1
 8005e0a:	4093      	lsls	r3, r2
 8005e0c:	608b      	str	r3, [r1, #8]
 8005e0e:	4620      	mov	r0, r4
 8005e10:	f000 fde5 	bl	80069de <_Bfree>
 8005e14:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005e16:	2200      	movs	r2, #0
 8005e18:	601a      	str	r2, [r3, #0]
 8005e1a:	1e3b      	subs	r3, r7, #0
 8005e1c:	bfbb      	ittet	lt
 8005e1e:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8005e22:	9301      	strlt	r3, [sp, #4]
 8005e24:	2300      	movge	r3, #0
 8005e26:	2201      	movlt	r2, #1
 8005e28:	bfac      	ite	ge
 8005e2a:	f8c8 3000 	strge.w	r3, [r8]
 8005e2e:	f8c8 2000 	strlt.w	r2, [r8]
 8005e32:	4baf      	ldr	r3, [pc, #700]	; (80060f0 <_dtoa_r+0x320>)
 8005e34:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8005e38:	ea33 0308 	bics.w	r3, r3, r8
 8005e3c:	d114      	bne.n	8005e68 <_dtoa_r+0x98>
 8005e3e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005e40:	f242 730f 	movw	r3, #9999	; 0x270f
 8005e44:	6013      	str	r3, [r2, #0]
 8005e46:	9b00      	ldr	r3, [sp, #0]
 8005e48:	b923      	cbnz	r3, 8005e54 <_dtoa_r+0x84>
 8005e4a:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8005e4e:	2800      	cmp	r0, #0
 8005e50:	f000 8542 	beq.w	80068d8 <_dtoa_r+0xb08>
 8005e54:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005e56:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 8006104 <_dtoa_r+0x334>
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	f000 8544 	beq.w	80068e8 <_dtoa_r+0xb18>
 8005e60:	f10b 0303 	add.w	r3, fp, #3
 8005e64:	f000 bd3e 	b.w	80068e4 <_dtoa_r+0xb14>
 8005e68:	e9dd 6700 	ldrd	r6, r7, [sp]
 8005e6c:	2200      	movs	r2, #0
 8005e6e:	2300      	movs	r3, #0
 8005e70:	4630      	mov	r0, r6
 8005e72:	4639      	mov	r1, r7
 8005e74:	f7fa fe00 	bl	8000a78 <__aeabi_dcmpeq>
 8005e78:	4681      	mov	r9, r0
 8005e7a:	b168      	cbz	r0, 8005e98 <_dtoa_r+0xc8>
 8005e7c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005e7e:	2301      	movs	r3, #1
 8005e80:	6013      	str	r3, [r2, #0]
 8005e82:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	f000 8524 	beq.w	80068d2 <_dtoa_r+0xb02>
 8005e8a:	4b9a      	ldr	r3, [pc, #616]	; (80060f4 <_dtoa_r+0x324>)
 8005e8c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8005e8e:	f103 3bff 	add.w	fp, r3, #4294967295
 8005e92:	6013      	str	r3, [r2, #0]
 8005e94:	f000 bd28 	b.w	80068e8 <_dtoa_r+0xb18>
 8005e98:	aa14      	add	r2, sp, #80	; 0x50
 8005e9a:	a915      	add	r1, sp, #84	; 0x54
 8005e9c:	ec47 6b10 	vmov	d0, r6, r7
 8005ea0:	4620      	mov	r0, r4
 8005ea2:	f000 fff4 	bl	8006e8e <__d2b>
 8005ea6:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8005eaa:	9004      	str	r0, [sp, #16]
 8005eac:	2d00      	cmp	r5, #0
 8005eae:	d07c      	beq.n	8005faa <_dtoa_r+0x1da>
 8005eb0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8005eb4:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8005eb8:	46b2      	mov	sl, r6
 8005eba:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 8005ebe:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8005ec2:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 8005ec6:	2200      	movs	r2, #0
 8005ec8:	4b8b      	ldr	r3, [pc, #556]	; (80060f8 <_dtoa_r+0x328>)
 8005eca:	4650      	mov	r0, sl
 8005ecc:	4659      	mov	r1, fp
 8005ece:	f7fa f9b3 	bl	8000238 <__aeabi_dsub>
 8005ed2:	a381      	add	r3, pc, #516	; (adr r3, 80060d8 <_dtoa_r+0x308>)
 8005ed4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ed8:	f7fa fb66 	bl	80005a8 <__aeabi_dmul>
 8005edc:	a380      	add	r3, pc, #512	; (adr r3, 80060e0 <_dtoa_r+0x310>)
 8005ede:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ee2:	f7fa f9ab 	bl	800023c <__adddf3>
 8005ee6:	4606      	mov	r6, r0
 8005ee8:	4628      	mov	r0, r5
 8005eea:	460f      	mov	r7, r1
 8005eec:	f7fa faf2 	bl	80004d4 <__aeabi_i2d>
 8005ef0:	a37d      	add	r3, pc, #500	; (adr r3, 80060e8 <_dtoa_r+0x318>)
 8005ef2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ef6:	f7fa fb57 	bl	80005a8 <__aeabi_dmul>
 8005efa:	4602      	mov	r2, r0
 8005efc:	460b      	mov	r3, r1
 8005efe:	4630      	mov	r0, r6
 8005f00:	4639      	mov	r1, r7
 8005f02:	f7fa f99b 	bl	800023c <__adddf3>
 8005f06:	4606      	mov	r6, r0
 8005f08:	460f      	mov	r7, r1
 8005f0a:	f7fa fdfd 	bl	8000b08 <__aeabi_d2iz>
 8005f0e:	2200      	movs	r2, #0
 8005f10:	4682      	mov	sl, r0
 8005f12:	2300      	movs	r3, #0
 8005f14:	4630      	mov	r0, r6
 8005f16:	4639      	mov	r1, r7
 8005f18:	f7fa fdb8 	bl	8000a8c <__aeabi_dcmplt>
 8005f1c:	b148      	cbz	r0, 8005f32 <_dtoa_r+0x162>
 8005f1e:	4650      	mov	r0, sl
 8005f20:	f7fa fad8 	bl	80004d4 <__aeabi_i2d>
 8005f24:	4632      	mov	r2, r6
 8005f26:	463b      	mov	r3, r7
 8005f28:	f7fa fda6 	bl	8000a78 <__aeabi_dcmpeq>
 8005f2c:	b908      	cbnz	r0, 8005f32 <_dtoa_r+0x162>
 8005f2e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005f32:	f1ba 0f16 	cmp.w	sl, #22
 8005f36:	d859      	bhi.n	8005fec <_dtoa_r+0x21c>
 8005f38:	4970      	ldr	r1, [pc, #448]	; (80060fc <_dtoa_r+0x32c>)
 8005f3a:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8005f3e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005f42:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005f46:	f7fa fdbf 	bl	8000ac8 <__aeabi_dcmpgt>
 8005f4a:	2800      	cmp	r0, #0
 8005f4c:	d050      	beq.n	8005ff0 <_dtoa_r+0x220>
 8005f4e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005f52:	2300      	movs	r3, #0
 8005f54:	930f      	str	r3, [sp, #60]	; 0x3c
 8005f56:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8005f58:	1b5d      	subs	r5, r3, r5
 8005f5a:	f1b5 0801 	subs.w	r8, r5, #1
 8005f5e:	bf49      	itett	mi
 8005f60:	f1c5 0301 	rsbmi	r3, r5, #1
 8005f64:	2300      	movpl	r3, #0
 8005f66:	9305      	strmi	r3, [sp, #20]
 8005f68:	f04f 0800 	movmi.w	r8, #0
 8005f6c:	bf58      	it	pl
 8005f6e:	9305      	strpl	r3, [sp, #20]
 8005f70:	f1ba 0f00 	cmp.w	sl, #0
 8005f74:	db3e      	blt.n	8005ff4 <_dtoa_r+0x224>
 8005f76:	2300      	movs	r3, #0
 8005f78:	44d0      	add	r8, sl
 8005f7a:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8005f7e:	9307      	str	r3, [sp, #28]
 8005f80:	9b06      	ldr	r3, [sp, #24]
 8005f82:	2b09      	cmp	r3, #9
 8005f84:	f200 8090 	bhi.w	80060a8 <_dtoa_r+0x2d8>
 8005f88:	2b05      	cmp	r3, #5
 8005f8a:	bfc4      	itt	gt
 8005f8c:	3b04      	subgt	r3, #4
 8005f8e:	9306      	strgt	r3, [sp, #24]
 8005f90:	9b06      	ldr	r3, [sp, #24]
 8005f92:	f1a3 0302 	sub.w	r3, r3, #2
 8005f96:	bfcc      	ite	gt
 8005f98:	2500      	movgt	r5, #0
 8005f9a:	2501      	movle	r5, #1
 8005f9c:	2b03      	cmp	r3, #3
 8005f9e:	f200 808f 	bhi.w	80060c0 <_dtoa_r+0x2f0>
 8005fa2:	e8df f003 	tbb	[pc, r3]
 8005fa6:	7f7d      	.short	0x7f7d
 8005fa8:	7131      	.short	0x7131
 8005faa:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 8005fae:	441d      	add	r5, r3
 8005fb0:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8005fb4:	2820      	cmp	r0, #32
 8005fb6:	dd13      	ble.n	8005fe0 <_dtoa_r+0x210>
 8005fb8:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8005fbc:	9b00      	ldr	r3, [sp, #0]
 8005fbe:	fa08 f800 	lsl.w	r8, r8, r0
 8005fc2:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8005fc6:	fa23 f000 	lsr.w	r0, r3, r0
 8005fca:	ea48 0000 	orr.w	r0, r8, r0
 8005fce:	f7fa fa71 	bl	80004b4 <__aeabi_ui2d>
 8005fd2:	2301      	movs	r3, #1
 8005fd4:	4682      	mov	sl, r0
 8005fd6:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 8005fda:	3d01      	subs	r5, #1
 8005fdc:	9313      	str	r3, [sp, #76]	; 0x4c
 8005fde:	e772      	b.n	8005ec6 <_dtoa_r+0xf6>
 8005fe0:	9b00      	ldr	r3, [sp, #0]
 8005fe2:	f1c0 0020 	rsb	r0, r0, #32
 8005fe6:	fa03 f000 	lsl.w	r0, r3, r0
 8005fea:	e7f0      	b.n	8005fce <_dtoa_r+0x1fe>
 8005fec:	2301      	movs	r3, #1
 8005fee:	e7b1      	b.n	8005f54 <_dtoa_r+0x184>
 8005ff0:	900f      	str	r0, [sp, #60]	; 0x3c
 8005ff2:	e7b0      	b.n	8005f56 <_dtoa_r+0x186>
 8005ff4:	9b05      	ldr	r3, [sp, #20]
 8005ff6:	eba3 030a 	sub.w	r3, r3, sl
 8005ffa:	9305      	str	r3, [sp, #20]
 8005ffc:	f1ca 0300 	rsb	r3, sl, #0
 8006000:	9307      	str	r3, [sp, #28]
 8006002:	2300      	movs	r3, #0
 8006004:	930e      	str	r3, [sp, #56]	; 0x38
 8006006:	e7bb      	b.n	8005f80 <_dtoa_r+0x1b0>
 8006008:	2301      	movs	r3, #1
 800600a:	930a      	str	r3, [sp, #40]	; 0x28
 800600c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800600e:	2b00      	cmp	r3, #0
 8006010:	dd59      	ble.n	80060c6 <_dtoa_r+0x2f6>
 8006012:	9302      	str	r3, [sp, #8]
 8006014:	4699      	mov	r9, r3
 8006016:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8006018:	2200      	movs	r2, #0
 800601a:	6072      	str	r2, [r6, #4]
 800601c:	2204      	movs	r2, #4
 800601e:	f102 0014 	add.w	r0, r2, #20
 8006022:	4298      	cmp	r0, r3
 8006024:	6871      	ldr	r1, [r6, #4]
 8006026:	d953      	bls.n	80060d0 <_dtoa_r+0x300>
 8006028:	4620      	mov	r0, r4
 800602a:	f000 fca4 	bl	8006976 <_Balloc>
 800602e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006030:	6030      	str	r0, [r6, #0]
 8006032:	f1b9 0f0e 	cmp.w	r9, #14
 8006036:	f8d3 b000 	ldr.w	fp, [r3]
 800603a:	f200 80e6 	bhi.w	800620a <_dtoa_r+0x43a>
 800603e:	2d00      	cmp	r5, #0
 8006040:	f000 80e3 	beq.w	800620a <_dtoa_r+0x43a>
 8006044:	ed9d 7b00 	vldr	d7, [sp]
 8006048:	f1ba 0f00 	cmp.w	sl, #0
 800604c:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8006050:	dd74      	ble.n	800613c <_dtoa_r+0x36c>
 8006052:	4a2a      	ldr	r2, [pc, #168]	; (80060fc <_dtoa_r+0x32c>)
 8006054:	f00a 030f 	and.w	r3, sl, #15
 8006058:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800605c:	ed93 7b00 	vldr	d7, [r3]
 8006060:	ea4f 162a 	mov.w	r6, sl, asr #4
 8006064:	06f0      	lsls	r0, r6, #27
 8006066:	ed8d 7b08 	vstr	d7, [sp, #32]
 800606a:	d565      	bpl.n	8006138 <_dtoa_r+0x368>
 800606c:	4b24      	ldr	r3, [pc, #144]	; (8006100 <_dtoa_r+0x330>)
 800606e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006072:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006076:	f7fa fbc1 	bl	80007fc <__aeabi_ddiv>
 800607a:	e9cd 0100 	strd	r0, r1, [sp]
 800607e:	f006 060f 	and.w	r6, r6, #15
 8006082:	2503      	movs	r5, #3
 8006084:	4f1e      	ldr	r7, [pc, #120]	; (8006100 <_dtoa_r+0x330>)
 8006086:	e04c      	b.n	8006122 <_dtoa_r+0x352>
 8006088:	2301      	movs	r3, #1
 800608a:	930a      	str	r3, [sp, #40]	; 0x28
 800608c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800608e:	4453      	add	r3, sl
 8006090:	f103 0901 	add.w	r9, r3, #1
 8006094:	9302      	str	r3, [sp, #8]
 8006096:	464b      	mov	r3, r9
 8006098:	2b01      	cmp	r3, #1
 800609a:	bfb8      	it	lt
 800609c:	2301      	movlt	r3, #1
 800609e:	e7ba      	b.n	8006016 <_dtoa_r+0x246>
 80060a0:	2300      	movs	r3, #0
 80060a2:	e7b2      	b.n	800600a <_dtoa_r+0x23a>
 80060a4:	2300      	movs	r3, #0
 80060a6:	e7f0      	b.n	800608a <_dtoa_r+0x2ba>
 80060a8:	2501      	movs	r5, #1
 80060aa:	2300      	movs	r3, #0
 80060ac:	9306      	str	r3, [sp, #24]
 80060ae:	950a      	str	r5, [sp, #40]	; 0x28
 80060b0:	f04f 33ff 	mov.w	r3, #4294967295
 80060b4:	9302      	str	r3, [sp, #8]
 80060b6:	4699      	mov	r9, r3
 80060b8:	2200      	movs	r2, #0
 80060ba:	2312      	movs	r3, #18
 80060bc:	920b      	str	r2, [sp, #44]	; 0x2c
 80060be:	e7aa      	b.n	8006016 <_dtoa_r+0x246>
 80060c0:	2301      	movs	r3, #1
 80060c2:	930a      	str	r3, [sp, #40]	; 0x28
 80060c4:	e7f4      	b.n	80060b0 <_dtoa_r+0x2e0>
 80060c6:	2301      	movs	r3, #1
 80060c8:	9302      	str	r3, [sp, #8]
 80060ca:	4699      	mov	r9, r3
 80060cc:	461a      	mov	r2, r3
 80060ce:	e7f5      	b.n	80060bc <_dtoa_r+0x2ec>
 80060d0:	3101      	adds	r1, #1
 80060d2:	6071      	str	r1, [r6, #4]
 80060d4:	0052      	lsls	r2, r2, #1
 80060d6:	e7a2      	b.n	800601e <_dtoa_r+0x24e>
 80060d8:	636f4361 	.word	0x636f4361
 80060dc:	3fd287a7 	.word	0x3fd287a7
 80060e0:	8b60c8b3 	.word	0x8b60c8b3
 80060e4:	3fc68a28 	.word	0x3fc68a28
 80060e8:	509f79fb 	.word	0x509f79fb
 80060ec:	3fd34413 	.word	0x3fd34413
 80060f0:	7ff00000 	.word	0x7ff00000
 80060f4:	08008131 	.word	0x08008131
 80060f8:	3ff80000 	.word	0x3ff80000
 80060fc:	08008190 	.word	0x08008190
 8006100:	08008168 	.word	0x08008168
 8006104:	0800815d 	.word	0x0800815d
 8006108:	07f1      	lsls	r1, r6, #31
 800610a:	d508      	bpl.n	800611e <_dtoa_r+0x34e>
 800610c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8006110:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006114:	f7fa fa48 	bl	80005a8 <__aeabi_dmul>
 8006118:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800611c:	3501      	adds	r5, #1
 800611e:	1076      	asrs	r6, r6, #1
 8006120:	3708      	adds	r7, #8
 8006122:	2e00      	cmp	r6, #0
 8006124:	d1f0      	bne.n	8006108 <_dtoa_r+0x338>
 8006126:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800612a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800612e:	f7fa fb65 	bl	80007fc <__aeabi_ddiv>
 8006132:	e9cd 0100 	strd	r0, r1, [sp]
 8006136:	e01a      	b.n	800616e <_dtoa_r+0x39e>
 8006138:	2502      	movs	r5, #2
 800613a:	e7a3      	b.n	8006084 <_dtoa_r+0x2b4>
 800613c:	f000 80a0 	beq.w	8006280 <_dtoa_r+0x4b0>
 8006140:	f1ca 0600 	rsb	r6, sl, #0
 8006144:	4b9f      	ldr	r3, [pc, #636]	; (80063c4 <_dtoa_r+0x5f4>)
 8006146:	4fa0      	ldr	r7, [pc, #640]	; (80063c8 <_dtoa_r+0x5f8>)
 8006148:	f006 020f 	and.w	r2, r6, #15
 800614c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006150:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006154:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006158:	f7fa fa26 	bl	80005a8 <__aeabi_dmul>
 800615c:	e9cd 0100 	strd	r0, r1, [sp]
 8006160:	1136      	asrs	r6, r6, #4
 8006162:	2300      	movs	r3, #0
 8006164:	2502      	movs	r5, #2
 8006166:	2e00      	cmp	r6, #0
 8006168:	d17f      	bne.n	800626a <_dtoa_r+0x49a>
 800616a:	2b00      	cmp	r3, #0
 800616c:	d1e1      	bne.n	8006132 <_dtoa_r+0x362>
 800616e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006170:	2b00      	cmp	r3, #0
 8006172:	f000 8087 	beq.w	8006284 <_dtoa_r+0x4b4>
 8006176:	e9dd 6700 	ldrd	r6, r7, [sp]
 800617a:	2200      	movs	r2, #0
 800617c:	4b93      	ldr	r3, [pc, #588]	; (80063cc <_dtoa_r+0x5fc>)
 800617e:	4630      	mov	r0, r6
 8006180:	4639      	mov	r1, r7
 8006182:	f7fa fc83 	bl	8000a8c <__aeabi_dcmplt>
 8006186:	2800      	cmp	r0, #0
 8006188:	d07c      	beq.n	8006284 <_dtoa_r+0x4b4>
 800618a:	f1b9 0f00 	cmp.w	r9, #0
 800618e:	d079      	beq.n	8006284 <_dtoa_r+0x4b4>
 8006190:	9b02      	ldr	r3, [sp, #8]
 8006192:	2b00      	cmp	r3, #0
 8006194:	dd35      	ble.n	8006202 <_dtoa_r+0x432>
 8006196:	f10a 33ff 	add.w	r3, sl, #4294967295
 800619a:	9308      	str	r3, [sp, #32]
 800619c:	4639      	mov	r1, r7
 800619e:	2200      	movs	r2, #0
 80061a0:	4b8b      	ldr	r3, [pc, #556]	; (80063d0 <_dtoa_r+0x600>)
 80061a2:	4630      	mov	r0, r6
 80061a4:	f7fa fa00 	bl	80005a8 <__aeabi_dmul>
 80061a8:	e9cd 0100 	strd	r0, r1, [sp]
 80061ac:	9f02      	ldr	r7, [sp, #8]
 80061ae:	3501      	adds	r5, #1
 80061b0:	4628      	mov	r0, r5
 80061b2:	f7fa f98f 	bl	80004d4 <__aeabi_i2d>
 80061b6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80061ba:	f7fa f9f5 	bl	80005a8 <__aeabi_dmul>
 80061be:	2200      	movs	r2, #0
 80061c0:	4b84      	ldr	r3, [pc, #528]	; (80063d4 <_dtoa_r+0x604>)
 80061c2:	f7fa f83b 	bl	800023c <__adddf3>
 80061c6:	4605      	mov	r5, r0
 80061c8:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 80061cc:	2f00      	cmp	r7, #0
 80061ce:	d15d      	bne.n	800628c <_dtoa_r+0x4bc>
 80061d0:	2200      	movs	r2, #0
 80061d2:	4b81      	ldr	r3, [pc, #516]	; (80063d8 <_dtoa_r+0x608>)
 80061d4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80061d8:	f7fa f82e 	bl	8000238 <__aeabi_dsub>
 80061dc:	462a      	mov	r2, r5
 80061de:	4633      	mov	r3, r6
 80061e0:	e9cd 0100 	strd	r0, r1, [sp]
 80061e4:	f7fa fc70 	bl	8000ac8 <__aeabi_dcmpgt>
 80061e8:	2800      	cmp	r0, #0
 80061ea:	f040 8288 	bne.w	80066fe <_dtoa_r+0x92e>
 80061ee:	462a      	mov	r2, r5
 80061f0:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80061f4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80061f8:	f7fa fc48 	bl	8000a8c <__aeabi_dcmplt>
 80061fc:	2800      	cmp	r0, #0
 80061fe:	f040 827c 	bne.w	80066fa <_dtoa_r+0x92a>
 8006202:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006206:	e9cd 2300 	strd	r2, r3, [sp]
 800620a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800620c:	2b00      	cmp	r3, #0
 800620e:	f2c0 8150 	blt.w	80064b2 <_dtoa_r+0x6e2>
 8006212:	f1ba 0f0e 	cmp.w	sl, #14
 8006216:	f300 814c 	bgt.w	80064b2 <_dtoa_r+0x6e2>
 800621a:	4b6a      	ldr	r3, [pc, #424]	; (80063c4 <_dtoa_r+0x5f4>)
 800621c:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8006220:	ed93 7b00 	vldr	d7, [r3]
 8006224:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006226:	2b00      	cmp	r3, #0
 8006228:	ed8d 7b02 	vstr	d7, [sp, #8]
 800622c:	f280 80d8 	bge.w	80063e0 <_dtoa_r+0x610>
 8006230:	f1b9 0f00 	cmp.w	r9, #0
 8006234:	f300 80d4 	bgt.w	80063e0 <_dtoa_r+0x610>
 8006238:	f040 825e 	bne.w	80066f8 <_dtoa_r+0x928>
 800623c:	2200      	movs	r2, #0
 800623e:	4b66      	ldr	r3, [pc, #408]	; (80063d8 <_dtoa_r+0x608>)
 8006240:	ec51 0b17 	vmov	r0, r1, d7
 8006244:	f7fa f9b0 	bl	80005a8 <__aeabi_dmul>
 8006248:	e9dd 2300 	ldrd	r2, r3, [sp]
 800624c:	f7fa fc32 	bl	8000ab4 <__aeabi_dcmpge>
 8006250:	464f      	mov	r7, r9
 8006252:	464e      	mov	r6, r9
 8006254:	2800      	cmp	r0, #0
 8006256:	f040 8234 	bne.w	80066c2 <_dtoa_r+0x8f2>
 800625a:	2331      	movs	r3, #49	; 0x31
 800625c:	f10b 0501 	add.w	r5, fp, #1
 8006260:	f88b 3000 	strb.w	r3, [fp]
 8006264:	f10a 0a01 	add.w	sl, sl, #1
 8006268:	e22f      	b.n	80066ca <_dtoa_r+0x8fa>
 800626a:	07f2      	lsls	r2, r6, #31
 800626c:	d505      	bpl.n	800627a <_dtoa_r+0x4aa>
 800626e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006272:	f7fa f999 	bl	80005a8 <__aeabi_dmul>
 8006276:	3501      	adds	r5, #1
 8006278:	2301      	movs	r3, #1
 800627a:	1076      	asrs	r6, r6, #1
 800627c:	3708      	adds	r7, #8
 800627e:	e772      	b.n	8006166 <_dtoa_r+0x396>
 8006280:	2502      	movs	r5, #2
 8006282:	e774      	b.n	800616e <_dtoa_r+0x39e>
 8006284:	f8cd a020 	str.w	sl, [sp, #32]
 8006288:	464f      	mov	r7, r9
 800628a:	e791      	b.n	80061b0 <_dtoa_r+0x3e0>
 800628c:	4b4d      	ldr	r3, [pc, #308]	; (80063c4 <_dtoa_r+0x5f4>)
 800628e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006292:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8006296:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006298:	2b00      	cmp	r3, #0
 800629a:	d047      	beq.n	800632c <_dtoa_r+0x55c>
 800629c:	4602      	mov	r2, r0
 800629e:	460b      	mov	r3, r1
 80062a0:	2000      	movs	r0, #0
 80062a2:	494e      	ldr	r1, [pc, #312]	; (80063dc <_dtoa_r+0x60c>)
 80062a4:	f7fa faaa 	bl	80007fc <__aeabi_ddiv>
 80062a8:	462a      	mov	r2, r5
 80062aa:	4633      	mov	r3, r6
 80062ac:	f7f9 ffc4 	bl	8000238 <__aeabi_dsub>
 80062b0:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80062b4:	465d      	mov	r5, fp
 80062b6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80062ba:	f7fa fc25 	bl	8000b08 <__aeabi_d2iz>
 80062be:	4606      	mov	r6, r0
 80062c0:	f7fa f908 	bl	80004d4 <__aeabi_i2d>
 80062c4:	4602      	mov	r2, r0
 80062c6:	460b      	mov	r3, r1
 80062c8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80062cc:	f7f9 ffb4 	bl	8000238 <__aeabi_dsub>
 80062d0:	3630      	adds	r6, #48	; 0x30
 80062d2:	f805 6b01 	strb.w	r6, [r5], #1
 80062d6:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80062da:	e9cd 0100 	strd	r0, r1, [sp]
 80062de:	f7fa fbd5 	bl	8000a8c <__aeabi_dcmplt>
 80062e2:	2800      	cmp	r0, #0
 80062e4:	d163      	bne.n	80063ae <_dtoa_r+0x5de>
 80062e6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80062ea:	2000      	movs	r0, #0
 80062ec:	4937      	ldr	r1, [pc, #220]	; (80063cc <_dtoa_r+0x5fc>)
 80062ee:	f7f9 ffa3 	bl	8000238 <__aeabi_dsub>
 80062f2:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80062f6:	f7fa fbc9 	bl	8000a8c <__aeabi_dcmplt>
 80062fa:	2800      	cmp	r0, #0
 80062fc:	f040 80b7 	bne.w	800646e <_dtoa_r+0x69e>
 8006300:	eba5 030b 	sub.w	r3, r5, fp
 8006304:	429f      	cmp	r7, r3
 8006306:	f77f af7c 	ble.w	8006202 <_dtoa_r+0x432>
 800630a:	2200      	movs	r2, #0
 800630c:	4b30      	ldr	r3, [pc, #192]	; (80063d0 <_dtoa_r+0x600>)
 800630e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006312:	f7fa f949 	bl	80005a8 <__aeabi_dmul>
 8006316:	2200      	movs	r2, #0
 8006318:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800631c:	4b2c      	ldr	r3, [pc, #176]	; (80063d0 <_dtoa_r+0x600>)
 800631e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006322:	f7fa f941 	bl	80005a8 <__aeabi_dmul>
 8006326:	e9cd 0100 	strd	r0, r1, [sp]
 800632a:	e7c4      	b.n	80062b6 <_dtoa_r+0x4e6>
 800632c:	462a      	mov	r2, r5
 800632e:	4633      	mov	r3, r6
 8006330:	f7fa f93a 	bl	80005a8 <__aeabi_dmul>
 8006334:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8006338:	eb0b 0507 	add.w	r5, fp, r7
 800633c:	465e      	mov	r6, fp
 800633e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006342:	f7fa fbe1 	bl	8000b08 <__aeabi_d2iz>
 8006346:	4607      	mov	r7, r0
 8006348:	f7fa f8c4 	bl	80004d4 <__aeabi_i2d>
 800634c:	3730      	adds	r7, #48	; 0x30
 800634e:	4602      	mov	r2, r0
 8006350:	460b      	mov	r3, r1
 8006352:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006356:	f7f9 ff6f 	bl	8000238 <__aeabi_dsub>
 800635a:	f806 7b01 	strb.w	r7, [r6], #1
 800635e:	42ae      	cmp	r6, r5
 8006360:	e9cd 0100 	strd	r0, r1, [sp]
 8006364:	f04f 0200 	mov.w	r2, #0
 8006368:	d126      	bne.n	80063b8 <_dtoa_r+0x5e8>
 800636a:	4b1c      	ldr	r3, [pc, #112]	; (80063dc <_dtoa_r+0x60c>)
 800636c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006370:	f7f9 ff64 	bl	800023c <__adddf3>
 8006374:	4602      	mov	r2, r0
 8006376:	460b      	mov	r3, r1
 8006378:	e9dd 0100 	ldrd	r0, r1, [sp]
 800637c:	f7fa fba4 	bl	8000ac8 <__aeabi_dcmpgt>
 8006380:	2800      	cmp	r0, #0
 8006382:	d174      	bne.n	800646e <_dtoa_r+0x69e>
 8006384:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8006388:	2000      	movs	r0, #0
 800638a:	4914      	ldr	r1, [pc, #80]	; (80063dc <_dtoa_r+0x60c>)
 800638c:	f7f9 ff54 	bl	8000238 <__aeabi_dsub>
 8006390:	4602      	mov	r2, r0
 8006392:	460b      	mov	r3, r1
 8006394:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006398:	f7fa fb78 	bl	8000a8c <__aeabi_dcmplt>
 800639c:	2800      	cmp	r0, #0
 800639e:	f43f af30 	beq.w	8006202 <_dtoa_r+0x432>
 80063a2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80063a6:	2b30      	cmp	r3, #48	; 0x30
 80063a8:	f105 32ff 	add.w	r2, r5, #4294967295
 80063ac:	d002      	beq.n	80063b4 <_dtoa_r+0x5e4>
 80063ae:	f8dd a020 	ldr.w	sl, [sp, #32]
 80063b2:	e04a      	b.n	800644a <_dtoa_r+0x67a>
 80063b4:	4615      	mov	r5, r2
 80063b6:	e7f4      	b.n	80063a2 <_dtoa_r+0x5d2>
 80063b8:	4b05      	ldr	r3, [pc, #20]	; (80063d0 <_dtoa_r+0x600>)
 80063ba:	f7fa f8f5 	bl	80005a8 <__aeabi_dmul>
 80063be:	e9cd 0100 	strd	r0, r1, [sp]
 80063c2:	e7bc      	b.n	800633e <_dtoa_r+0x56e>
 80063c4:	08008190 	.word	0x08008190
 80063c8:	08008168 	.word	0x08008168
 80063cc:	3ff00000 	.word	0x3ff00000
 80063d0:	40240000 	.word	0x40240000
 80063d4:	401c0000 	.word	0x401c0000
 80063d8:	40140000 	.word	0x40140000
 80063dc:	3fe00000 	.word	0x3fe00000
 80063e0:	e9dd 6700 	ldrd	r6, r7, [sp]
 80063e4:	465d      	mov	r5, fp
 80063e6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80063ea:	4630      	mov	r0, r6
 80063ec:	4639      	mov	r1, r7
 80063ee:	f7fa fa05 	bl	80007fc <__aeabi_ddiv>
 80063f2:	f7fa fb89 	bl	8000b08 <__aeabi_d2iz>
 80063f6:	4680      	mov	r8, r0
 80063f8:	f7fa f86c 	bl	80004d4 <__aeabi_i2d>
 80063fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006400:	f7fa f8d2 	bl	80005a8 <__aeabi_dmul>
 8006404:	4602      	mov	r2, r0
 8006406:	460b      	mov	r3, r1
 8006408:	4630      	mov	r0, r6
 800640a:	4639      	mov	r1, r7
 800640c:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8006410:	f7f9 ff12 	bl	8000238 <__aeabi_dsub>
 8006414:	f805 6b01 	strb.w	r6, [r5], #1
 8006418:	eba5 060b 	sub.w	r6, r5, fp
 800641c:	45b1      	cmp	r9, r6
 800641e:	4602      	mov	r2, r0
 8006420:	460b      	mov	r3, r1
 8006422:	d139      	bne.n	8006498 <_dtoa_r+0x6c8>
 8006424:	f7f9 ff0a 	bl	800023c <__adddf3>
 8006428:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800642c:	4606      	mov	r6, r0
 800642e:	460f      	mov	r7, r1
 8006430:	f7fa fb4a 	bl	8000ac8 <__aeabi_dcmpgt>
 8006434:	b9c8      	cbnz	r0, 800646a <_dtoa_r+0x69a>
 8006436:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800643a:	4630      	mov	r0, r6
 800643c:	4639      	mov	r1, r7
 800643e:	f7fa fb1b 	bl	8000a78 <__aeabi_dcmpeq>
 8006442:	b110      	cbz	r0, 800644a <_dtoa_r+0x67a>
 8006444:	f018 0f01 	tst.w	r8, #1
 8006448:	d10f      	bne.n	800646a <_dtoa_r+0x69a>
 800644a:	9904      	ldr	r1, [sp, #16]
 800644c:	4620      	mov	r0, r4
 800644e:	f000 fac6 	bl	80069de <_Bfree>
 8006452:	2300      	movs	r3, #0
 8006454:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006456:	702b      	strb	r3, [r5, #0]
 8006458:	f10a 0301 	add.w	r3, sl, #1
 800645c:	6013      	str	r3, [r2, #0]
 800645e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006460:	2b00      	cmp	r3, #0
 8006462:	f000 8241 	beq.w	80068e8 <_dtoa_r+0xb18>
 8006466:	601d      	str	r5, [r3, #0]
 8006468:	e23e      	b.n	80068e8 <_dtoa_r+0xb18>
 800646a:	f8cd a020 	str.w	sl, [sp, #32]
 800646e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8006472:	2a39      	cmp	r2, #57	; 0x39
 8006474:	f105 33ff 	add.w	r3, r5, #4294967295
 8006478:	d108      	bne.n	800648c <_dtoa_r+0x6bc>
 800647a:	459b      	cmp	fp, r3
 800647c:	d10a      	bne.n	8006494 <_dtoa_r+0x6c4>
 800647e:	9b08      	ldr	r3, [sp, #32]
 8006480:	3301      	adds	r3, #1
 8006482:	9308      	str	r3, [sp, #32]
 8006484:	2330      	movs	r3, #48	; 0x30
 8006486:	f88b 3000 	strb.w	r3, [fp]
 800648a:	465b      	mov	r3, fp
 800648c:	781a      	ldrb	r2, [r3, #0]
 800648e:	3201      	adds	r2, #1
 8006490:	701a      	strb	r2, [r3, #0]
 8006492:	e78c      	b.n	80063ae <_dtoa_r+0x5de>
 8006494:	461d      	mov	r5, r3
 8006496:	e7ea      	b.n	800646e <_dtoa_r+0x69e>
 8006498:	2200      	movs	r2, #0
 800649a:	4b9b      	ldr	r3, [pc, #620]	; (8006708 <_dtoa_r+0x938>)
 800649c:	f7fa f884 	bl	80005a8 <__aeabi_dmul>
 80064a0:	2200      	movs	r2, #0
 80064a2:	2300      	movs	r3, #0
 80064a4:	4606      	mov	r6, r0
 80064a6:	460f      	mov	r7, r1
 80064a8:	f7fa fae6 	bl	8000a78 <__aeabi_dcmpeq>
 80064ac:	2800      	cmp	r0, #0
 80064ae:	d09a      	beq.n	80063e6 <_dtoa_r+0x616>
 80064b0:	e7cb      	b.n	800644a <_dtoa_r+0x67a>
 80064b2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80064b4:	2a00      	cmp	r2, #0
 80064b6:	f000 808b 	beq.w	80065d0 <_dtoa_r+0x800>
 80064ba:	9a06      	ldr	r2, [sp, #24]
 80064bc:	2a01      	cmp	r2, #1
 80064be:	dc6e      	bgt.n	800659e <_dtoa_r+0x7ce>
 80064c0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80064c2:	2a00      	cmp	r2, #0
 80064c4:	d067      	beq.n	8006596 <_dtoa_r+0x7c6>
 80064c6:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80064ca:	9f07      	ldr	r7, [sp, #28]
 80064cc:	9d05      	ldr	r5, [sp, #20]
 80064ce:	9a05      	ldr	r2, [sp, #20]
 80064d0:	2101      	movs	r1, #1
 80064d2:	441a      	add	r2, r3
 80064d4:	4620      	mov	r0, r4
 80064d6:	9205      	str	r2, [sp, #20]
 80064d8:	4498      	add	r8, r3
 80064da:	f000 fb20 	bl	8006b1e <__i2b>
 80064de:	4606      	mov	r6, r0
 80064e0:	2d00      	cmp	r5, #0
 80064e2:	dd0c      	ble.n	80064fe <_dtoa_r+0x72e>
 80064e4:	f1b8 0f00 	cmp.w	r8, #0
 80064e8:	dd09      	ble.n	80064fe <_dtoa_r+0x72e>
 80064ea:	4545      	cmp	r5, r8
 80064ec:	9a05      	ldr	r2, [sp, #20]
 80064ee:	462b      	mov	r3, r5
 80064f0:	bfa8      	it	ge
 80064f2:	4643      	movge	r3, r8
 80064f4:	1ad2      	subs	r2, r2, r3
 80064f6:	9205      	str	r2, [sp, #20]
 80064f8:	1aed      	subs	r5, r5, r3
 80064fa:	eba8 0803 	sub.w	r8, r8, r3
 80064fe:	9b07      	ldr	r3, [sp, #28]
 8006500:	b1eb      	cbz	r3, 800653e <_dtoa_r+0x76e>
 8006502:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006504:	2b00      	cmp	r3, #0
 8006506:	d067      	beq.n	80065d8 <_dtoa_r+0x808>
 8006508:	b18f      	cbz	r7, 800652e <_dtoa_r+0x75e>
 800650a:	4631      	mov	r1, r6
 800650c:	463a      	mov	r2, r7
 800650e:	4620      	mov	r0, r4
 8006510:	f000 fba4 	bl	8006c5c <__pow5mult>
 8006514:	9a04      	ldr	r2, [sp, #16]
 8006516:	4601      	mov	r1, r0
 8006518:	4606      	mov	r6, r0
 800651a:	4620      	mov	r0, r4
 800651c:	f000 fb08 	bl	8006b30 <__multiply>
 8006520:	9904      	ldr	r1, [sp, #16]
 8006522:	9008      	str	r0, [sp, #32]
 8006524:	4620      	mov	r0, r4
 8006526:	f000 fa5a 	bl	80069de <_Bfree>
 800652a:	9b08      	ldr	r3, [sp, #32]
 800652c:	9304      	str	r3, [sp, #16]
 800652e:	9b07      	ldr	r3, [sp, #28]
 8006530:	1bda      	subs	r2, r3, r7
 8006532:	d004      	beq.n	800653e <_dtoa_r+0x76e>
 8006534:	9904      	ldr	r1, [sp, #16]
 8006536:	4620      	mov	r0, r4
 8006538:	f000 fb90 	bl	8006c5c <__pow5mult>
 800653c:	9004      	str	r0, [sp, #16]
 800653e:	2101      	movs	r1, #1
 8006540:	4620      	mov	r0, r4
 8006542:	f000 faec 	bl	8006b1e <__i2b>
 8006546:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006548:	4607      	mov	r7, r0
 800654a:	2b00      	cmp	r3, #0
 800654c:	f000 81d0 	beq.w	80068f0 <_dtoa_r+0xb20>
 8006550:	461a      	mov	r2, r3
 8006552:	4601      	mov	r1, r0
 8006554:	4620      	mov	r0, r4
 8006556:	f000 fb81 	bl	8006c5c <__pow5mult>
 800655a:	9b06      	ldr	r3, [sp, #24]
 800655c:	2b01      	cmp	r3, #1
 800655e:	4607      	mov	r7, r0
 8006560:	dc40      	bgt.n	80065e4 <_dtoa_r+0x814>
 8006562:	9b00      	ldr	r3, [sp, #0]
 8006564:	2b00      	cmp	r3, #0
 8006566:	d139      	bne.n	80065dc <_dtoa_r+0x80c>
 8006568:	9b01      	ldr	r3, [sp, #4]
 800656a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800656e:	2b00      	cmp	r3, #0
 8006570:	d136      	bne.n	80065e0 <_dtoa_r+0x810>
 8006572:	9b01      	ldr	r3, [sp, #4]
 8006574:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006578:	0d1b      	lsrs	r3, r3, #20
 800657a:	051b      	lsls	r3, r3, #20
 800657c:	b12b      	cbz	r3, 800658a <_dtoa_r+0x7ba>
 800657e:	9b05      	ldr	r3, [sp, #20]
 8006580:	3301      	adds	r3, #1
 8006582:	9305      	str	r3, [sp, #20]
 8006584:	f108 0801 	add.w	r8, r8, #1
 8006588:	2301      	movs	r3, #1
 800658a:	9307      	str	r3, [sp, #28]
 800658c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800658e:	2b00      	cmp	r3, #0
 8006590:	d12a      	bne.n	80065e8 <_dtoa_r+0x818>
 8006592:	2001      	movs	r0, #1
 8006594:	e030      	b.n	80065f8 <_dtoa_r+0x828>
 8006596:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006598:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800659c:	e795      	b.n	80064ca <_dtoa_r+0x6fa>
 800659e:	9b07      	ldr	r3, [sp, #28]
 80065a0:	f109 37ff 	add.w	r7, r9, #4294967295
 80065a4:	42bb      	cmp	r3, r7
 80065a6:	bfbf      	itttt	lt
 80065a8:	9b07      	ldrlt	r3, [sp, #28]
 80065aa:	9707      	strlt	r7, [sp, #28]
 80065ac:	1afa      	sublt	r2, r7, r3
 80065ae:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 80065b0:	bfbb      	ittet	lt
 80065b2:	189b      	addlt	r3, r3, r2
 80065b4:	930e      	strlt	r3, [sp, #56]	; 0x38
 80065b6:	1bdf      	subge	r7, r3, r7
 80065b8:	2700      	movlt	r7, #0
 80065ba:	f1b9 0f00 	cmp.w	r9, #0
 80065be:	bfb5      	itete	lt
 80065c0:	9b05      	ldrlt	r3, [sp, #20]
 80065c2:	9d05      	ldrge	r5, [sp, #20]
 80065c4:	eba3 0509 	sublt.w	r5, r3, r9
 80065c8:	464b      	movge	r3, r9
 80065ca:	bfb8      	it	lt
 80065cc:	2300      	movlt	r3, #0
 80065ce:	e77e      	b.n	80064ce <_dtoa_r+0x6fe>
 80065d0:	9f07      	ldr	r7, [sp, #28]
 80065d2:	9d05      	ldr	r5, [sp, #20]
 80065d4:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 80065d6:	e783      	b.n	80064e0 <_dtoa_r+0x710>
 80065d8:	9a07      	ldr	r2, [sp, #28]
 80065da:	e7ab      	b.n	8006534 <_dtoa_r+0x764>
 80065dc:	2300      	movs	r3, #0
 80065de:	e7d4      	b.n	800658a <_dtoa_r+0x7ba>
 80065e0:	9b00      	ldr	r3, [sp, #0]
 80065e2:	e7d2      	b.n	800658a <_dtoa_r+0x7ba>
 80065e4:	2300      	movs	r3, #0
 80065e6:	9307      	str	r3, [sp, #28]
 80065e8:	693b      	ldr	r3, [r7, #16]
 80065ea:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 80065ee:	6918      	ldr	r0, [r3, #16]
 80065f0:	f000 fa47 	bl	8006a82 <__hi0bits>
 80065f4:	f1c0 0020 	rsb	r0, r0, #32
 80065f8:	4440      	add	r0, r8
 80065fa:	f010 001f 	ands.w	r0, r0, #31
 80065fe:	d047      	beq.n	8006690 <_dtoa_r+0x8c0>
 8006600:	f1c0 0320 	rsb	r3, r0, #32
 8006604:	2b04      	cmp	r3, #4
 8006606:	dd3b      	ble.n	8006680 <_dtoa_r+0x8b0>
 8006608:	9b05      	ldr	r3, [sp, #20]
 800660a:	f1c0 001c 	rsb	r0, r0, #28
 800660e:	4403      	add	r3, r0
 8006610:	9305      	str	r3, [sp, #20]
 8006612:	4405      	add	r5, r0
 8006614:	4480      	add	r8, r0
 8006616:	9b05      	ldr	r3, [sp, #20]
 8006618:	2b00      	cmp	r3, #0
 800661a:	dd05      	ble.n	8006628 <_dtoa_r+0x858>
 800661c:	461a      	mov	r2, r3
 800661e:	9904      	ldr	r1, [sp, #16]
 8006620:	4620      	mov	r0, r4
 8006622:	f000 fb69 	bl	8006cf8 <__lshift>
 8006626:	9004      	str	r0, [sp, #16]
 8006628:	f1b8 0f00 	cmp.w	r8, #0
 800662c:	dd05      	ble.n	800663a <_dtoa_r+0x86a>
 800662e:	4639      	mov	r1, r7
 8006630:	4642      	mov	r2, r8
 8006632:	4620      	mov	r0, r4
 8006634:	f000 fb60 	bl	8006cf8 <__lshift>
 8006638:	4607      	mov	r7, r0
 800663a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800663c:	b353      	cbz	r3, 8006694 <_dtoa_r+0x8c4>
 800663e:	4639      	mov	r1, r7
 8006640:	9804      	ldr	r0, [sp, #16]
 8006642:	f000 fbad 	bl	8006da0 <__mcmp>
 8006646:	2800      	cmp	r0, #0
 8006648:	da24      	bge.n	8006694 <_dtoa_r+0x8c4>
 800664a:	2300      	movs	r3, #0
 800664c:	220a      	movs	r2, #10
 800664e:	9904      	ldr	r1, [sp, #16]
 8006650:	4620      	mov	r0, r4
 8006652:	f000 f9db 	bl	8006a0c <__multadd>
 8006656:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006658:	9004      	str	r0, [sp, #16]
 800665a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800665e:	2b00      	cmp	r3, #0
 8006660:	f000 814d 	beq.w	80068fe <_dtoa_r+0xb2e>
 8006664:	2300      	movs	r3, #0
 8006666:	4631      	mov	r1, r6
 8006668:	220a      	movs	r2, #10
 800666a:	4620      	mov	r0, r4
 800666c:	f000 f9ce 	bl	8006a0c <__multadd>
 8006670:	9b02      	ldr	r3, [sp, #8]
 8006672:	2b00      	cmp	r3, #0
 8006674:	4606      	mov	r6, r0
 8006676:	dc4f      	bgt.n	8006718 <_dtoa_r+0x948>
 8006678:	9b06      	ldr	r3, [sp, #24]
 800667a:	2b02      	cmp	r3, #2
 800667c:	dd4c      	ble.n	8006718 <_dtoa_r+0x948>
 800667e:	e011      	b.n	80066a4 <_dtoa_r+0x8d4>
 8006680:	d0c9      	beq.n	8006616 <_dtoa_r+0x846>
 8006682:	9a05      	ldr	r2, [sp, #20]
 8006684:	331c      	adds	r3, #28
 8006686:	441a      	add	r2, r3
 8006688:	9205      	str	r2, [sp, #20]
 800668a:	441d      	add	r5, r3
 800668c:	4498      	add	r8, r3
 800668e:	e7c2      	b.n	8006616 <_dtoa_r+0x846>
 8006690:	4603      	mov	r3, r0
 8006692:	e7f6      	b.n	8006682 <_dtoa_r+0x8b2>
 8006694:	f1b9 0f00 	cmp.w	r9, #0
 8006698:	dc38      	bgt.n	800670c <_dtoa_r+0x93c>
 800669a:	9b06      	ldr	r3, [sp, #24]
 800669c:	2b02      	cmp	r3, #2
 800669e:	dd35      	ble.n	800670c <_dtoa_r+0x93c>
 80066a0:	f8cd 9008 	str.w	r9, [sp, #8]
 80066a4:	9b02      	ldr	r3, [sp, #8]
 80066a6:	b963      	cbnz	r3, 80066c2 <_dtoa_r+0x8f2>
 80066a8:	4639      	mov	r1, r7
 80066aa:	2205      	movs	r2, #5
 80066ac:	4620      	mov	r0, r4
 80066ae:	f000 f9ad 	bl	8006a0c <__multadd>
 80066b2:	4601      	mov	r1, r0
 80066b4:	4607      	mov	r7, r0
 80066b6:	9804      	ldr	r0, [sp, #16]
 80066b8:	f000 fb72 	bl	8006da0 <__mcmp>
 80066bc:	2800      	cmp	r0, #0
 80066be:	f73f adcc 	bgt.w	800625a <_dtoa_r+0x48a>
 80066c2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80066c4:	465d      	mov	r5, fp
 80066c6:	ea6f 0a03 	mvn.w	sl, r3
 80066ca:	f04f 0900 	mov.w	r9, #0
 80066ce:	4639      	mov	r1, r7
 80066d0:	4620      	mov	r0, r4
 80066d2:	f000 f984 	bl	80069de <_Bfree>
 80066d6:	2e00      	cmp	r6, #0
 80066d8:	f43f aeb7 	beq.w	800644a <_dtoa_r+0x67a>
 80066dc:	f1b9 0f00 	cmp.w	r9, #0
 80066e0:	d005      	beq.n	80066ee <_dtoa_r+0x91e>
 80066e2:	45b1      	cmp	r9, r6
 80066e4:	d003      	beq.n	80066ee <_dtoa_r+0x91e>
 80066e6:	4649      	mov	r1, r9
 80066e8:	4620      	mov	r0, r4
 80066ea:	f000 f978 	bl	80069de <_Bfree>
 80066ee:	4631      	mov	r1, r6
 80066f0:	4620      	mov	r0, r4
 80066f2:	f000 f974 	bl	80069de <_Bfree>
 80066f6:	e6a8      	b.n	800644a <_dtoa_r+0x67a>
 80066f8:	2700      	movs	r7, #0
 80066fa:	463e      	mov	r6, r7
 80066fc:	e7e1      	b.n	80066c2 <_dtoa_r+0x8f2>
 80066fe:	f8dd a020 	ldr.w	sl, [sp, #32]
 8006702:	463e      	mov	r6, r7
 8006704:	e5a9      	b.n	800625a <_dtoa_r+0x48a>
 8006706:	bf00      	nop
 8006708:	40240000 	.word	0x40240000
 800670c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800670e:	f8cd 9008 	str.w	r9, [sp, #8]
 8006712:	2b00      	cmp	r3, #0
 8006714:	f000 80fa 	beq.w	800690c <_dtoa_r+0xb3c>
 8006718:	2d00      	cmp	r5, #0
 800671a:	dd05      	ble.n	8006728 <_dtoa_r+0x958>
 800671c:	4631      	mov	r1, r6
 800671e:	462a      	mov	r2, r5
 8006720:	4620      	mov	r0, r4
 8006722:	f000 fae9 	bl	8006cf8 <__lshift>
 8006726:	4606      	mov	r6, r0
 8006728:	9b07      	ldr	r3, [sp, #28]
 800672a:	2b00      	cmp	r3, #0
 800672c:	d04c      	beq.n	80067c8 <_dtoa_r+0x9f8>
 800672e:	6871      	ldr	r1, [r6, #4]
 8006730:	4620      	mov	r0, r4
 8006732:	f000 f920 	bl	8006976 <_Balloc>
 8006736:	6932      	ldr	r2, [r6, #16]
 8006738:	3202      	adds	r2, #2
 800673a:	4605      	mov	r5, r0
 800673c:	0092      	lsls	r2, r2, #2
 800673e:	f106 010c 	add.w	r1, r6, #12
 8006742:	300c      	adds	r0, #12
 8006744:	f000 f90a 	bl	800695c <memcpy>
 8006748:	2201      	movs	r2, #1
 800674a:	4629      	mov	r1, r5
 800674c:	4620      	mov	r0, r4
 800674e:	f000 fad3 	bl	8006cf8 <__lshift>
 8006752:	9b00      	ldr	r3, [sp, #0]
 8006754:	f8cd b014 	str.w	fp, [sp, #20]
 8006758:	f003 0301 	and.w	r3, r3, #1
 800675c:	46b1      	mov	r9, r6
 800675e:	9307      	str	r3, [sp, #28]
 8006760:	4606      	mov	r6, r0
 8006762:	4639      	mov	r1, r7
 8006764:	9804      	ldr	r0, [sp, #16]
 8006766:	f7ff faa5 	bl	8005cb4 <quorem>
 800676a:	4649      	mov	r1, r9
 800676c:	4605      	mov	r5, r0
 800676e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8006772:	9804      	ldr	r0, [sp, #16]
 8006774:	f000 fb14 	bl	8006da0 <__mcmp>
 8006778:	4632      	mov	r2, r6
 800677a:	9000      	str	r0, [sp, #0]
 800677c:	4639      	mov	r1, r7
 800677e:	4620      	mov	r0, r4
 8006780:	f000 fb28 	bl	8006dd4 <__mdiff>
 8006784:	68c3      	ldr	r3, [r0, #12]
 8006786:	4602      	mov	r2, r0
 8006788:	bb03      	cbnz	r3, 80067cc <_dtoa_r+0x9fc>
 800678a:	4601      	mov	r1, r0
 800678c:	9008      	str	r0, [sp, #32]
 800678e:	9804      	ldr	r0, [sp, #16]
 8006790:	f000 fb06 	bl	8006da0 <__mcmp>
 8006794:	9a08      	ldr	r2, [sp, #32]
 8006796:	4603      	mov	r3, r0
 8006798:	4611      	mov	r1, r2
 800679a:	4620      	mov	r0, r4
 800679c:	9308      	str	r3, [sp, #32]
 800679e:	f000 f91e 	bl	80069de <_Bfree>
 80067a2:	9b08      	ldr	r3, [sp, #32]
 80067a4:	b9a3      	cbnz	r3, 80067d0 <_dtoa_r+0xa00>
 80067a6:	9a06      	ldr	r2, [sp, #24]
 80067a8:	b992      	cbnz	r2, 80067d0 <_dtoa_r+0xa00>
 80067aa:	9a07      	ldr	r2, [sp, #28]
 80067ac:	b982      	cbnz	r2, 80067d0 <_dtoa_r+0xa00>
 80067ae:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80067b2:	d029      	beq.n	8006808 <_dtoa_r+0xa38>
 80067b4:	9b00      	ldr	r3, [sp, #0]
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	dd01      	ble.n	80067be <_dtoa_r+0x9ee>
 80067ba:	f105 0831 	add.w	r8, r5, #49	; 0x31
 80067be:	9b05      	ldr	r3, [sp, #20]
 80067c0:	1c5d      	adds	r5, r3, #1
 80067c2:	f883 8000 	strb.w	r8, [r3]
 80067c6:	e782      	b.n	80066ce <_dtoa_r+0x8fe>
 80067c8:	4630      	mov	r0, r6
 80067ca:	e7c2      	b.n	8006752 <_dtoa_r+0x982>
 80067cc:	2301      	movs	r3, #1
 80067ce:	e7e3      	b.n	8006798 <_dtoa_r+0x9c8>
 80067d0:	9a00      	ldr	r2, [sp, #0]
 80067d2:	2a00      	cmp	r2, #0
 80067d4:	db04      	blt.n	80067e0 <_dtoa_r+0xa10>
 80067d6:	d125      	bne.n	8006824 <_dtoa_r+0xa54>
 80067d8:	9a06      	ldr	r2, [sp, #24]
 80067da:	bb1a      	cbnz	r2, 8006824 <_dtoa_r+0xa54>
 80067dc:	9a07      	ldr	r2, [sp, #28]
 80067de:	bb0a      	cbnz	r2, 8006824 <_dtoa_r+0xa54>
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	ddec      	ble.n	80067be <_dtoa_r+0x9ee>
 80067e4:	2201      	movs	r2, #1
 80067e6:	9904      	ldr	r1, [sp, #16]
 80067e8:	4620      	mov	r0, r4
 80067ea:	f000 fa85 	bl	8006cf8 <__lshift>
 80067ee:	4639      	mov	r1, r7
 80067f0:	9004      	str	r0, [sp, #16]
 80067f2:	f000 fad5 	bl	8006da0 <__mcmp>
 80067f6:	2800      	cmp	r0, #0
 80067f8:	dc03      	bgt.n	8006802 <_dtoa_r+0xa32>
 80067fa:	d1e0      	bne.n	80067be <_dtoa_r+0x9ee>
 80067fc:	f018 0f01 	tst.w	r8, #1
 8006800:	d0dd      	beq.n	80067be <_dtoa_r+0x9ee>
 8006802:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8006806:	d1d8      	bne.n	80067ba <_dtoa_r+0x9ea>
 8006808:	9b05      	ldr	r3, [sp, #20]
 800680a:	9a05      	ldr	r2, [sp, #20]
 800680c:	1c5d      	adds	r5, r3, #1
 800680e:	2339      	movs	r3, #57	; 0x39
 8006810:	7013      	strb	r3, [r2, #0]
 8006812:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006816:	2b39      	cmp	r3, #57	; 0x39
 8006818:	f105 32ff 	add.w	r2, r5, #4294967295
 800681c:	d04f      	beq.n	80068be <_dtoa_r+0xaee>
 800681e:	3301      	adds	r3, #1
 8006820:	7013      	strb	r3, [r2, #0]
 8006822:	e754      	b.n	80066ce <_dtoa_r+0x8fe>
 8006824:	9a05      	ldr	r2, [sp, #20]
 8006826:	2b00      	cmp	r3, #0
 8006828:	f102 0501 	add.w	r5, r2, #1
 800682c:	dd06      	ble.n	800683c <_dtoa_r+0xa6c>
 800682e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8006832:	d0e9      	beq.n	8006808 <_dtoa_r+0xa38>
 8006834:	f108 0801 	add.w	r8, r8, #1
 8006838:	9b05      	ldr	r3, [sp, #20]
 800683a:	e7c2      	b.n	80067c2 <_dtoa_r+0x9f2>
 800683c:	9a02      	ldr	r2, [sp, #8]
 800683e:	f805 8c01 	strb.w	r8, [r5, #-1]
 8006842:	eba5 030b 	sub.w	r3, r5, fp
 8006846:	4293      	cmp	r3, r2
 8006848:	d021      	beq.n	800688e <_dtoa_r+0xabe>
 800684a:	2300      	movs	r3, #0
 800684c:	220a      	movs	r2, #10
 800684e:	9904      	ldr	r1, [sp, #16]
 8006850:	4620      	mov	r0, r4
 8006852:	f000 f8db 	bl	8006a0c <__multadd>
 8006856:	45b1      	cmp	r9, r6
 8006858:	9004      	str	r0, [sp, #16]
 800685a:	f04f 0300 	mov.w	r3, #0
 800685e:	f04f 020a 	mov.w	r2, #10
 8006862:	4649      	mov	r1, r9
 8006864:	4620      	mov	r0, r4
 8006866:	d105      	bne.n	8006874 <_dtoa_r+0xaa4>
 8006868:	f000 f8d0 	bl	8006a0c <__multadd>
 800686c:	4681      	mov	r9, r0
 800686e:	4606      	mov	r6, r0
 8006870:	9505      	str	r5, [sp, #20]
 8006872:	e776      	b.n	8006762 <_dtoa_r+0x992>
 8006874:	f000 f8ca 	bl	8006a0c <__multadd>
 8006878:	4631      	mov	r1, r6
 800687a:	4681      	mov	r9, r0
 800687c:	2300      	movs	r3, #0
 800687e:	220a      	movs	r2, #10
 8006880:	4620      	mov	r0, r4
 8006882:	f000 f8c3 	bl	8006a0c <__multadd>
 8006886:	4606      	mov	r6, r0
 8006888:	e7f2      	b.n	8006870 <_dtoa_r+0xaa0>
 800688a:	f04f 0900 	mov.w	r9, #0
 800688e:	2201      	movs	r2, #1
 8006890:	9904      	ldr	r1, [sp, #16]
 8006892:	4620      	mov	r0, r4
 8006894:	f000 fa30 	bl	8006cf8 <__lshift>
 8006898:	4639      	mov	r1, r7
 800689a:	9004      	str	r0, [sp, #16]
 800689c:	f000 fa80 	bl	8006da0 <__mcmp>
 80068a0:	2800      	cmp	r0, #0
 80068a2:	dcb6      	bgt.n	8006812 <_dtoa_r+0xa42>
 80068a4:	d102      	bne.n	80068ac <_dtoa_r+0xadc>
 80068a6:	f018 0f01 	tst.w	r8, #1
 80068aa:	d1b2      	bne.n	8006812 <_dtoa_r+0xa42>
 80068ac:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80068b0:	2b30      	cmp	r3, #48	; 0x30
 80068b2:	f105 32ff 	add.w	r2, r5, #4294967295
 80068b6:	f47f af0a 	bne.w	80066ce <_dtoa_r+0x8fe>
 80068ba:	4615      	mov	r5, r2
 80068bc:	e7f6      	b.n	80068ac <_dtoa_r+0xadc>
 80068be:	4593      	cmp	fp, r2
 80068c0:	d105      	bne.n	80068ce <_dtoa_r+0xafe>
 80068c2:	2331      	movs	r3, #49	; 0x31
 80068c4:	f10a 0a01 	add.w	sl, sl, #1
 80068c8:	f88b 3000 	strb.w	r3, [fp]
 80068cc:	e6ff      	b.n	80066ce <_dtoa_r+0x8fe>
 80068ce:	4615      	mov	r5, r2
 80068d0:	e79f      	b.n	8006812 <_dtoa_r+0xa42>
 80068d2:	f8df b064 	ldr.w	fp, [pc, #100]	; 8006938 <_dtoa_r+0xb68>
 80068d6:	e007      	b.n	80068e8 <_dtoa_r+0xb18>
 80068d8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80068da:	f8df b060 	ldr.w	fp, [pc, #96]	; 800693c <_dtoa_r+0xb6c>
 80068de:	b11b      	cbz	r3, 80068e8 <_dtoa_r+0xb18>
 80068e0:	f10b 0308 	add.w	r3, fp, #8
 80068e4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80068e6:	6013      	str	r3, [r2, #0]
 80068e8:	4658      	mov	r0, fp
 80068ea:	b017      	add	sp, #92	; 0x5c
 80068ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80068f0:	9b06      	ldr	r3, [sp, #24]
 80068f2:	2b01      	cmp	r3, #1
 80068f4:	f77f ae35 	ble.w	8006562 <_dtoa_r+0x792>
 80068f8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80068fa:	9307      	str	r3, [sp, #28]
 80068fc:	e649      	b.n	8006592 <_dtoa_r+0x7c2>
 80068fe:	9b02      	ldr	r3, [sp, #8]
 8006900:	2b00      	cmp	r3, #0
 8006902:	dc03      	bgt.n	800690c <_dtoa_r+0xb3c>
 8006904:	9b06      	ldr	r3, [sp, #24]
 8006906:	2b02      	cmp	r3, #2
 8006908:	f73f aecc 	bgt.w	80066a4 <_dtoa_r+0x8d4>
 800690c:	465d      	mov	r5, fp
 800690e:	4639      	mov	r1, r7
 8006910:	9804      	ldr	r0, [sp, #16]
 8006912:	f7ff f9cf 	bl	8005cb4 <quorem>
 8006916:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800691a:	f805 8b01 	strb.w	r8, [r5], #1
 800691e:	9a02      	ldr	r2, [sp, #8]
 8006920:	eba5 030b 	sub.w	r3, r5, fp
 8006924:	429a      	cmp	r2, r3
 8006926:	ddb0      	ble.n	800688a <_dtoa_r+0xaba>
 8006928:	2300      	movs	r3, #0
 800692a:	220a      	movs	r2, #10
 800692c:	9904      	ldr	r1, [sp, #16]
 800692e:	4620      	mov	r0, r4
 8006930:	f000 f86c 	bl	8006a0c <__multadd>
 8006934:	9004      	str	r0, [sp, #16]
 8006936:	e7ea      	b.n	800690e <_dtoa_r+0xb3e>
 8006938:	08008130 	.word	0x08008130
 800693c:	08008154 	.word	0x08008154

08006940 <_localeconv_r>:
 8006940:	4b04      	ldr	r3, [pc, #16]	; (8006954 <_localeconv_r+0x14>)
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	6a18      	ldr	r0, [r3, #32]
 8006946:	4b04      	ldr	r3, [pc, #16]	; (8006958 <_localeconv_r+0x18>)
 8006948:	2800      	cmp	r0, #0
 800694a:	bf08      	it	eq
 800694c:	4618      	moveq	r0, r3
 800694e:	30f0      	adds	r0, #240	; 0xf0
 8006950:	4770      	bx	lr
 8006952:	bf00      	nop
 8006954:	20000010 	.word	0x20000010
 8006958:	20000074 	.word	0x20000074

0800695c <memcpy>:
 800695c:	b510      	push	{r4, lr}
 800695e:	1e43      	subs	r3, r0, #1
 8006960:	440a      	add	r2, r1
 8006962:	4291      	cmp	r1, r2
 8006964:	d100      	bne.n	8006968 <memcpy+0xc>
 8006966:	bd10      	pop	{r4, pc}
 8006968:	f811 4b01 	ldrb.w	r4, [r1], #1
 800696c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006970:	e7f7      	b.n	8006962 <memcpy+0x6>

08006972 <__malloc_lock>:
 8006972:	4770      	bx	lr

08006974 <__malloc_unlock>:
 8006974:	4770      	bx	lr

08006976 <_Balloc>:
 8006976:	b570      	push	{r4, r5, r6, lr}
 8006978:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800697a:	4604      	mov	r4, r0
 800697c:	460e      	mov	r6, r1
 800697e:	b93d      	cbnz	r5, 8006990 <_Balloc+0x1a>
 8006980:	2010      	movs	r0, #16
 8006982:	f7fe fc53 	bl	800522c <malloc>
 8006986:	6260      	str	r0, [r4, #36]	; 0x24
 8006988:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800698c:	6005      	str	r5, [r0, #0]
 800698e:	60c5      	str	r5, [r0, #12]
 8006990:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8006992:	68eb      	ldr	r3, [r5, #12]
 8006994:	b183      	cbz	r3, 80069b8 <_Balloc+0x42>
 8006996:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006998:	68db      	ldr	r3, [r3, #12]
 800699a:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800699e:	b9b8      	cbnz	r0, 80069d0 <_Balloc+0x5a>
 80069a0:	2101      	movs	r1, #1
 80069a2:	fa01 f506 	lsl.w	r5, r1, r6
 80069a6:	1d6a      	adds	r2, r5, #5
 80069a8:	0092      	lsls	r2, r2, #2
 80069aa:	4620      	mov	r0, r4
 80069ac:	f000 fabe 	bl	8006f2c <_calloc_r>
 80069b0:	b160      	cbz	r0, 80069cc <_Balloc+0x56>
 80069b2:	e9c0 6501 	strd	r6, r5, [r0, #4]
 80069b6:	e00e      	b.n	80069d6 <_Balloc+0x60>
 80069b8:	2221      	movs	r2, #33	; 0x21
 80069ba:	2104      	movs	r1, #4
 80069bc:	4620      	mov	r0, r4
 80069be:	f000 fab5 	bl	8006f2c <_calloc_r>
 80069c2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80069c4:	60e8      	str	r0, [r5, #12]
 80069c6:	68db      	ldr	r3, [r3, #12]
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d1e4      	bne.n	8006996 <_Balloc+0x20>
 80069cc:	2000      	movs	r0, #0
 80069ce:	bd70      	pop	{r4, r5, r6, pc}
 80069d0:	6802      	ldr	r2, [r0, #0]
 80069d2:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 80069d6:	2300      	movs	r3, #0
 80069d8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80069dc:	e7f7      	b.n	80069ce <_Balloc+0x58>

080069de <_Bfree>:
 80069de:	b570      	push	{r4, r5, r6, lr}
 80069e0:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80069e2:	4606      	mov	r6, r0
 80069e4:	460d      	mov	r5, r1
 80069e6:	b93c      	cbnz	r4, 80069f8 <_Bfree+0x1a>
 80069e8:	2010      	movs	r0, #16
 80069ea:	f7fe fc1f 	bl	800522c <malloc>
 80069ee:	6270      	str	r0, [r6, #36]	; 0x24
 80069f0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80069f4:	6004      	str	r4, [r0, #0]
 80069f6:	60c4      	str	r4, [r0, #12]
 80069f8:	b13d      	cbz	r5, 8006a0a <_Bfree+0x2c>
 80069fa:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80069fc:	686a      	ldr	r2, [r5, #4]
 80069fe:	68db      	ldr	r3, [r3, #12]
 8006a00:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006a04:	6029      	str	r1, [r5, #0]
 8006a06:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8006a0a:	bd70      	pop	{r4, r5, r6, pc}

08006a0c <__multadd>:
 8006a0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006a10:	690d      	ldr	r5, [r1, #16]
 8006a12:	461f      	mov	r7, r3
 8006a14:	4606      	mov	r6, r0
 8006a16:	460c      	mov	r4, r1
 8006a18:	f101 0c14 	add.w	ip, r1, #20
 8006a1c:	2300      	movs	r3, #0
 8006a1e:	f8dc 0000 	ldr.w	r0, [ip]
 8006a22:	b281      	uxth	r1, r0
 8006a24:	fb02 7101 	mla	r1, r2, r1, r7
 8006a28:	0c0f      	lsrs	r7, r1, #16
 8006a2a:	0c00      	lsrs	r0, r0, #16
 8006a2c:	fb02 7000 	mla	r0, r2, r0, r7
 8006a30:	b289      	uxth	r1, r1
 8006a32:	3301      	adds	r3, #1
 8006a34:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8006a38:	429d      	cmp	r5, r3
 8006a3a:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8006a3e:	f84c 1b04 	str.w	r1, [ip], #4
 8006a42:	dcec      	bgt.n	8006a1e <__multadd+0x12>
 8006a44:	b1d7      	cbz	r7, 8006a7c <__multadd+0x70>
 8006a46:	68a3      	ldr	r3, [r4, #8]
 8006a48:	42ab      	cmp	r3, r5
 8006a4a:	dc12      	bgt.n	8006a72 <__multadd+0x66>
 8006a4c:	6861      	ldr	r1, [r4, #4]
 8006a4e:	4630      	mov	r0, r6
 8006a50:	3101      	adds	r1, #1
 8006a52:	f7ff ff90 	bl	8006976 <_Balloc>
 8006a56:	6922      	ldr	r2, [r4, #16]
 8006a58:	3202      	adds	r2, #2
 8006a5a:	f104 010c 	add.w	r1, r4, #12
 8006a5e:	4680      	mov	r8, r0
 8006a60:	0092      	lsls	r2, r2, #2
 8006a62:	300c      	adds	r0, #12
 8006a64:	f7ff ff7a 	bl	800695c <memcpy>
 8006a68:	4621      	mov	r1, r4
 8006a6a:	4630      	mov	r0, r6
 8006a6c:	f7ff ffb7 	bl	80069de <_Bfree>
 8006a70:	4644      	mov	r4, r8
 8006a72:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006a76:	3501      	adds	r5, #1
 8006a78:	615f      	str	r7, [r3, #20]
 8006a7a:	6125      	str	r5, [r4, #16]
 8006a7c:	4620      	mov	r0, r4
 8006a7e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08006a82 <__hi0bits>:
 8006a82:	0c02      	lsrs	r2, r0, #16
 8006a84:	0412      	lsls	r2, r2, #16
 8006a86:	4603      	mov	r3, r0
 8006a88:	b9b2      	cbnz	r2, 8006ab8 <__hi0bits+0x36>
 8006a8a:	0403      	lsls	r3, r0, #16
 8006a8c:	2010      	movs	r0, #16
 8006a8e:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8006a92:	bf04      	itt	eq
 8006a94:	021b      	lsleq	r3, r3, #8
 8006a96:	3008      	addeq	r0, #8
 8006a98:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8006a9c:	bf04      	itt	eq
 8006a9e:	011b      	lsleq	r3, r3, #4
 8006aa0:	3004      	addeq	r0, #4
 8006aa2:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8006aa6:	bf04      	itt	eq
 8006aa8:	009b      	lsleq	r3, r3, #2
 8006aaa:	3002      	addeq	r0, #2
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	db06      	blt.n	8006abe <__hi0bits+0x3c>
 8006ab0:	005b      	lsls	r3, r3, #1
 8006ab2:	d503      	bpl.n	8006abc <__hi0bits+0x3a>
 8006ab4:	3001      	adds	r0, #1
 8006ab6:	4770      	bx	lr
 8006ab8:	2000      	movs	r0, #0
 8006aba:	e7e8      	b.n	8006a8e <__hi0bits+0xc>
 8006abc:	2020      	movs	r0, #32
 8006abe:	4770      	bx	lr

08006ac0 <__lo0bits>:
 8006ac0:	6803      	ldr	r3, [r0, #0]
 8006ac2:	f013 0207 	ands.w	r2, r3, #7
 8006ac6:	4601      	mov	r1, r0
 8006ac8:	d00b      	beq.n	8006ae2 <__lo0bits+0x22>
 8006aca:	07da      	lsls	r2, r3, #31
 8006acc:	d423      	bmi.n	8006b16 <__lo0bits+0x56>
 8006ace:	0798      	lsls	r0, r3, #30
 8006ad0:	bf49      	itett	mi
 8006ad2:	085b      	lsrmi	r3, r3, #1
 8006ad4:	089b      	lsrpl	r3, r3, #2
 8006ad6:	2001      	movmi	r0, #1
 8006ad8:	600b      	strmi	r3, [r1, #0]
 8006ada:	bf5c      	itt	pl
 8006adc:	600b      	strpl	r3, [r1, #0]
 8006ade:	2002      	movpl	r0, #2
 8006ae0:	4770      	bx	lr
 8006ae2:	b298      	uxth	r0, r3
 8006ae4:	b9a8      	cbnz	r0, 8006b12 <__lo0bits+0x52>
 8006ae6:	0c1b      	lsrs	r3, r3, #16
 8006ae8:	2010      	movs	r0, #16
 8006aea:	f013 0fff 	tst.w	r3, #255	; 0xff
 8006aee:	bf04      	itt	eq
 8006af0:	0a1b      	lsreq	r3, r3, #8
 8006af2:	3008      	addeq	r0, #8
 8006af4:	071a      	lsls	r2, r3, #28
 8006af6:	bf04      	itt	eq
 8006af8:	091b      	lsreq	r3, r3, #4
 8006afa:	3004      	addeq	r0, #4
 8006afc:	079a      	lsls	r2, r3, #30
 8006afe:	bf04      	itt	eq
 8006b00:	089b      	lsreq	r3, r3, #2
 8006b02:	3002      	addeq	r0, #2
 8006b04:	07da      	lsls	r2, r3, #31
 8006b06:	d402      	bmi.n	8006b0e <__lo0bits+0x4e>
 8006b08:	085b      	lsrs	r3, r3, #1
 8006b0a:	d006      	beq.n	8006b1a <__lo0bits+0x5a>
 8006b0c:	3001      	adds	r0, #1
 8006b0e:	600b      	str	r3, [r1, #0]
 8006b10:	4770      	bx	lr
 8006b12:	4610      	mov	r0, r2
 8006b14:	e7e9      	b.n	8006aea <__lo0bits+0x2a>
 8006b16:	2000      	movs	r0, #0
 8006b18:	4770      	bx	lr
 8006b1a:	2020      	movs	r0, #32
 8006b1c:	4770      	bx	lr

08006b1e <__i2b>:
 8006b1e:	b510      	push	{r4, lr}
 8006b20:	460c      	mov	r4, r1
 8006b22:	2101      	movs	r1, #1
 8006b24:	f7ff ff27 	bl	8006976 <_Balloc>
 8006b28:	2201      	movs	r2, #1
 8006b2a:	6144      	str	r4, [r0, #20]
 8006b2c:	6102      	str	r2, [r0, #16]
 8006b2e:	bd10      	pop	{r4, pc}

08006b30 <__multiply>:
 8006b30:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b34:	4614      	mov	r4, r2
 8006b36:	690a      	ldr	r2, [r1, #16]
 8006b38:	6923      	ldr	r3, [r4, #16]
 8006b3a:	429a      	cmp	r2, r3
 8006b3c:	bfb8      	it	lt
 8006b3e:	460b      	movlt	r3, r1
 8006b40:	4688      	mov	r8, r1
 8006b42:	bfbc      	itt	lt
 8006b44:	46a0      	movlt	r8, r4
 8006b46:	461c      	movlt	r4, r3
 8006b48:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8006b4c:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8006b50:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8006b54:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8006b58:	eb07 0609 	add.w	r6, r7, r9
 8006b5c:	42b3      	cmp	r3, r6
 8006b5e:	bfb8      	it	lt
 8006b60:	3101      	addlt	r1, #1
 8006b62:	f7ff ff08 	bl	8006976 <_Balloc>
 8006b66:	f100 0514 	add.w	r5, r0, #20
 8006b6a:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8006b6e:	462b      	mov	r3, r5
 8006b70:	2200      	movs	r2, #0
 8006b72:	4573      	cmp	r3, lr
 8006b74:	d316      	bcc.n	8006ba4 <__multiply+0x74>
 8006b76:	f104 0214 	add.w	r2, r4, #20
 8006b7a:	f108 0114 	add.w	r1, r8, #20
 8006b7e:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8006b82:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8006b86:	9300      	str	r3, [sp, #0]
 8006b88:	9b00      	ldr	r3, [sp, #0]
 8006b8a:	9201      	str	r2, [sp, #4]
 8006b8c:	4293      	cmp	r3, r2
 8006b8e:	d80c      	bhi.n	8006baa <__multiply+0x7a>
 8006b90:	2e00      	cmp	r6, #0
 8006b92:	dd03      	ble.n	8006b9c <__multiply+0x6c>
 8006b94:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d05d      	beq.n	8006c58 <__multiply+0x128>
 8006b9c:	6106      	str	r6, [r0, #16]
 8006b9e:	b003      	add	sp, #12
 8006ba0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006ba4:	f843 2b04 	str.w	r2, [r3], #4
 8006ba8:	e7e3      	b.n	8006b72 <__multiply+0x42>
 8006baa:	f8b2 b000 	ldrh.w	fp, [r2]
 8006bae:	f1bb 0f00 	cmp.w	fp, #0
 8006bb2:	d023      	beq.n	8006bfc <__multiply+0xcc>
 8006bb4:	4689      	mov	r9, r1
 8006bb6:	46ac      	mov	ip, r5
 8006bb8:	f04f 0800 	mov.w	r8, #0
 8006bbc:	f859 4b04 	ldr.w	r4, [r9], #4
 8006bc0:	f8dc a000 	ldr.w	sl, [ip]
 8006bc4:	b2a3      	uxth	r3, r4
 8006bc6:	fa1f fa8a 	uxth.w	sl, sl
 8006bca:	fb0b a303 	mla	r3, fp, r3, sl
 8006bce:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8006bd2:	f8dc 4000 	ldr.w	r4, [ip]
 8006bd6:	4443      	add	r3, r8
 8006bd8:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8006bdc:	fb0b 840a 	mla	r4, fp, sl, r8
 8006be0:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8006be4:	46e2      	mov	sl, ip
 8006be6:	b29b      	uxth	r3, r3
 8006be8:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8006bec:	454f      	cmp	r7, r9
 8006bee:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8006bf2:	f84a 3b04 	str.w	r3, [sl], #4
 8006bf6:	d82b      	bhi.n	8006c50 <__multiply+0x120>
 8006bf8:	f8cc 8004 	str.w	r8, [ip, #4]
 8006bfc:	9b01      	ldr	r3, [sp, #4]
 8006bfe:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8006c02:	3204      	adds	r2, #4
 8006c04:	f1ba 0f00 	cmp.w	sl, #0
 8006c08:	d020      	beq.n	8006c4c <__multiply+0x11c>
 8006c0a:	682b      	ldr	r3, [r5, #0]
 8006c0c:	4689      	mov	r9, r1
 8006c0e:	46a8      	mov	r8, r5
 8006c10:	f04f 0b00 	mov.w	fp, #0
 8006c14:	f8b9 c000 	ldrh.w	ip, [r9]
 8006c18:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8006c1c:	fb0a 440c 	mla	r4, sl, ip, r4
 8006c20:	445c      	add	r4, fp
 8006c22:	46c4      	mov	ip, r8
 8006c24:	b29b      	uxth	r3, r3
 8006c26:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8006c2a:	f84c 3b04 	str.w	r3, [ip], #4
 8006c2e:	f859 3b04 	ldr.w	r3, [r9], #4
 8006c32:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8006c36:	0c1b      	lsrs	r3, r3, #16
 8006c38:	fb0a b303 	mla	r3, sl, r3, fp
 8006c3c:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8006c40:	454f      	cmp	r7, r9
 8006c42:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8006c46:	d805      	bhi.n	8006c54 <__multiply+0x124>
 8006c48:	f8c8 3004 	str.w	r3, [r8, #4]
 8006c4c:	3504      	adds	r5, #4
 8006c4e:	e79b      	b.n	8006b88 <__multiply+0x58>
 8006c50:	46d4      	mov	ip, sl
 8006c52:	e7b3      	b.n	8006bbc <__multiply+0x8c>
 8006c54:	46e0      	mov	r8, ip
 8006c56:	e7dd      	b.n	8006c14 <__multiply+0xe4>
 8006c58:	3e01      	subs	r6, #1
 8006c5a:	e799      	b.n	8006b90 <__multiply+0x60>

08006c5c <__pow5mult>:
 8006c5c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006c60:	4615      	mov	r5, r2
 8006c62:	f012 0203 	ands.w	r2, r2, #3
 8006c66:	4606      	mov	r6, r0
 8006c68:	460f      	mov	r7, r1
 8006c6a:	d007      	beq.n	8006c7c <__pow5mult+0x20>
 8006c6c:	3a01      	subs	r2, #1
 8006c6e:	4c21      	ldr	r4, [pc, #132]	; (8006cf4 <__pow5mult+0x98>)
 8006c70:	2300      	movs	r3, #0
 8006c72:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006c76:	f7ff fec9 	bl	8006a0c <__multadd>
 8006c7a:	4607      	mov	r7, r0
 8006c7c:	10ad      	asrs	r5, r5, #2
 8006c7e:	d035      	beq.n	8006cec <__pow5mult+0x90>
 8006c80:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8006c82:	b93c      	cbnz	r4, 8006c94 <__pow5mult+0x38>
 8006c84:	2010      	movs	r0, #16
 8006c86:	f7fe fad1 	bl	800522c <malloc>
 8006c8a:	6270      	str	r0, [r6, #36]	; 0x24
 8006c8c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006c90:	6004      	str	r4, [r0, #0]
 8006c92:	60c4      	str	r4, [r0, #12]
 8006c94:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8006c98:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006c9c:	b94c      	cbnz	r4, 8006cb2 <__pow5mult+0x56>
 8006c9e:	f240 2171 	movw	r1, #625	; 0x271
 8006ca2:	4630      	mov	r0, r6
 8006ca4:	f7ff ff3b 	bl	8006b1e <__i2b>
 8006ca8:	2300      	movs	r3, #0
 8006caa:	f8c8 0008 	str.w	r0, [r8, #8]
 8006cae:	4604      	mov	r4, r0
 8006cb0:	6003      	str	r3, [r0, #0]
 8006cb2:	f04f 0800 	mov.w	r8, #0
 8006cb6:	07eb      	lsls	r3, r5, #31
 8006cb8:	d50a      	bpl.n	8006cd0 <__pow5mult+0x74>
 8006cba:	4639      	mov	r1, r7
 8006cbc:	4622      	mov	r2, r4
 8006cbe:	4630      	mov	r0, r6
 8006cc0:	f7ff ff36 	bl	8006b30 <__multiply>
 8006cc4:	4639      	mov	r1, r7
 8006cc6:	4681      	mov	r9, r0
 8006cc8:	4630      	mov	r0, r6
 8006cca:	f7ff fe88 	bl	80069de <_Bfree>
 8006cce:	464f      	mov	r7, r9
 8006cd0:	106d      	asrs	r5, r5, #1
 8006cd2:	d00b      	beq.n	8006cec <__pow5mult+0x90>
 8006cd4:	6820      	ldr	r0, [r4, #0]
 8006cd6:	b938      	cbnz	r0, 8006ce8 <__pow5mult+0x8c>
 8006cd8:	4622      	mov	r2, r4
 8006cda:	4621      	mov	r1, r4
 8006cdc:	4630      	mov	r0, r6
 8006cde:	f7ff ff27 	bl	8006b30 <__multiply>
 8006ce2:	6020      	str	r0, [r4, #0]
 8006ce4:	f8c0 8000 	str.w	r8, [r0]
 8006ce8:	4604      	mov	r4, r0
 8006cea:	e7e4      	b.n	8006cb6 <__pow5mult+0x5a>
 8006cec:	4638      	mov	r0, r7
 8006cee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006cf2:	bf00      	nop
 8006cf4:	08008258 	.word	0x08008258

08006cf8 <__lshift>:
 8006cf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006cfc:	460c      	mov	r4, r1
 8006cfe:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006d02:	6923      	ldr	r3, [r4, #16]
 8006d04:	6849      	ldr	r1, [r1, #4]
 8006d06:	eb0a 0903 	add.w	r9, sl, r3
 8006d0a:	68a3      	ldr	r3, [r4, #8]
 8006d0c:	4607      	mov	r7, r0
 8006d0e:	4616      	mov	r6, r2
 8006d10:	f109 0501 	add.w	r5, r9, #1
 8006d14:	42ab      	cmp	r3, r5
 8006d16:	db32      	blt.n	8006d7e <__lshift+0x86>
 8006d18:	4638      	mov	r0, r7
 8006d1a:	f7ff fe2c 	bl	8006976 <_Balloc>
 8006d1e:	2300      	movs	r3, #0
 8006d20:	4680      	mov	r8, r0
 8006d22:	f100 0114 	add.w	r1, r0, #20
 8006d26:	461a      	mov	r2, r3
 8006d28:	4553      	cmp	r3, sl
 8006d2a:	db2b      	blt.n	8006d84 <__lshift+0x8c>
 8006d2c:	6920      	ldr	r0, [r4, #16]
 8006d2e:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006d32:	f104 0314 	add.w	r3, r4, #20
 8006d36:	f016 021f 	ands.w	r2, r6, #31
 8006d3a:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006d3e:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8006d42:	d025      	beq.n	8006d90 <__lshift+0x98>
 8006d44:	f1c2 0e20 	rsb	lr, r2, #32
 8006d48:	2000      	movs	r0, #0
 8006d4a:	681e      	ldr	r6, [r3, #0]
 8006d4c:	468a      	mov	sl, r1
 8006d4e:	4096      	lsls	r6, r2
 8006d50:	4330      	orrs	r0, r6
 8006d52:	f84a 0b04 	str.w	r0, [sl], #4
 8006d56:	f853 0b04 	ldr.w	r0, [r3], #4
 8006d5a:	459c      	cmp	ip, r3
 8006d5c:	fa20 f00e 	lsr.w	r0, r0, lr
 8006d60:	d814      	bhi.n	8006d8c <__lshift+0x94>
 8006d62:	6048      	str	r0, [r1, #4]
 8006d64:	b108      	cbz	r0, 8006d6a <__lshift+0x72>
 8006d66:	f109 0502 	add.w	r5, r9, #2
 8006d6a:	3d01      	subs	r5, #1
 8006d6c:	4638      	mov	r0, r7
 8006d6e:	f8c8 5010 	str.w	r5, [r8, #16]
 8006d72:	4621      	mov	r1, r4
 8006d74:	f7ff fe33 	bl	80069de <_Bfree>
 8006d78:	4640      	mov	r0, r8
 8006d7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006d7e:	3101      	adds	r1, #1
 8006d80:	005b      	lsls	r3, r3, #1
 8006d82:	e7c7      	b.n	8006d14 <__lshift+0x1c>
 8006d84:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8006d88:	3301      	adds	r3, #1
 8006d8a:	e7cd      	b.n	8006d28 <__lshift+0x30>
 8006d8c:	4651      	mov	r1, sl
 8006d8e:	e7dc      	b.n	8006d4a <__lshift+0x52>
 8006d90:	3904      	subs	r1, #4
 8006d92:	f853 2b04 	ldr.w	r2, [r3], #4
 8006d96:	f841 2f04 	str.w	r2, [r1, #4]!
 8006d9a:	459c      	cmp	ip, r3
 8006d9c:	d8f9      	bhi.n	8006d92 <__lshift+0x9a>
 8006d9e:	e7e4      	b.n	8006d6a <__lshift+0x72>

08006da0 <__mcmp>:
 8006da0:	6903      	ldr	r3, [r0, #16]
 8006da2:	690a      	ldr	r2, [r1, #16]
 8006da4:	1a9b      	subs	r3, r3, r2
 8006da6:	b530      	push	{r4, r5, lr}
 8006da8:	d10c      	bne.n	8006dc4 <__mcmp+0x24>
 8006daa:	0092      	lsls	r2, r2, #2
 8006dac:	3014      	adds	r0, #20
 8006dae:	3114      	adds	r1, #20
 8006db0:	1884      	adds	r4, r0, r2
 8006db2:	4411      	add	r1, r2
 8006db4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8006db8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8006dbc:	4295      	cmp	r5, r2
 8006dbe:	d003      	beq.n	8006dc8 <__mcmp+0x28>
 8006dc0:	d305      	bcc.n	8006dce <__mcmp+0x2e>
 8006dc2:	2301      	movs	r3, #1
 8006dc4:	4618      	mov	r0, r3
 8006dc6:	bd30      	pop	{r4, r5, pc}
 8006dc8:	42a0      	cmp	r0, r4
 8006dca:	d3f3      	bcc.n	8006db4 <__mcmp+0x14>
 8006dcc:	e7fa      	b.n	8006dc4 <__mcmp+0x24>
 8006dce:	f04f 33ff 	mov.w	r3, #4294967295
 8006dd2:	e7f7      	b.n	8006dc4 <__mcmp+0x24>

08006dd4 <__mdiff>:
 8006dd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006dd8:	460d      	mov	r5, r1
 8006dda:	4607      	mov	r7, r0
 8006ddc:	4611      	mov	r1, r2
 8006dde:	4628      	mov	r0, r5
 8006de0:	4614      	mov	r4, r2
 8006de2:	f7ff ffdd 	bl	8006da0 <__mcmp>
 8006de6:	1e06      	subs	r6, r0, #0
 8006de8:	d108      	bne.n	8006dfc <__mdiff+0x28>
 8006dea:	4631      	mov	r1, r6
 8006dec:	4638      	mov	r0, r7
 8006dee:	f7ff fdc2 	bl	8006976 <_Balloc>
 8006df2:	2301      	movs	r3, #1
 8006df4:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8006df8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006dfc:	bfa4      	itt	ge
 8006dfe:	4623      	movge	r3, r4
 8006e00:	462c      	movge	r4, r5
 8006e02:	4638      	mov	r0, r7
 8006e04:	6861      	ldr	r1, [r4, #4]
 8006e06:	bfa6      	itte	ge
 8006e08:	461d      	movge	r5, r3
 8006e0a:	2600      	movge	r6, #0
 8006e0c:	2601      	movlt	r6, #1
 8006e0e:	f7ff fdb2 	bl	8006976 <_Balloc>
 8006e12:	692b      	ldr	r3, [r5, #16]
 8006e14:	60c6      	str	r6, [r0, #12]
 8006e16:	6926      	ldr	r6, [r4, #16]
 8006e18:	f105 0914 	add.w	r9, r5, #20
 8006e1c:	f104 0214 	add.w	r2, r4, #20
 8006e20:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8006e24:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8006e28:	f100 0514 	add.w	r5, r0, #20
 8006e2c:	f04f 0e00 	mov.w	lr, #0
 8006e30:	f852 ab04 	ldr.w	sl, [r2], #4
 8006e34:	f859 4b04 	ldr.w	r4, [r9], #4
 8006e38:	fa1e f18a 	uxtah	r1, lr, sl
 8006e3c:	b2a3      	uxth	r3, r4
 8006e3e:	1ac9      	subs	r1, r1, r3
 8006e40:	0c23      	lsrs	r3, r4, #16
 8006e42:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 8006e46:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8006e4a:	b289      	uxth	r1, r1
 8006e4c:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8006e50:	45c8      	cmp	r8, r9
 8006e52:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8006e56:	4694      	mov	ip, r2
 8006e58:	f845 3b04 	str.w	r3, [r5], #4
 8006e5c:	d8e8      	bhi.n	8006e30 <__mdiff+0x5c>
 8006e5e:	45bc      	cmp	ip, r7
 8006e60:	d304      	bcc.n	8006e6c <__mdiff+0x98>
 8006e62:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8006e66:	b183      	cbz	r3, 8006e8a <__mdiff+0xb6>
 8006e68:	6106      	str	r6, [r0, #16]
 8006e6a:	e7c5      	b.n	8006df8 <__mdiff+0x24>
 8006e6c:	f85c 1b04 	ldr.w	r1, [ip], #4
 8006e70:	fa1e f381 	uxtah	r3, lr, r1
 8006e74:	141a      	asrs	r2, r3, #16
 8006e76:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8006e7a:	b29b      	uxth	r3, r3
 8006e7c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006e80:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8006e84:	f845 3b04 	str.w	r3, [r5], #4
 8006e88:	e7e9      	b.n	8006e5e <__mdiff+0x8a>
 8006e8a:	3e01      	subs	r6, #1
 8006e8c:	e7e9      	b.n	8006e62 <__mdiff+0x8e>

08006e8e <__d2b>:
 8006e8e:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006e92:	460e      	mov	r6, r1
 8006e94:	2101      	movs	r1, #1
 8006e96:	ec59 8b10 	vmov	r8, r9, d0
 8006e9a:	4615      	mov	r5, r2
 8006e9c:	f7ff fd6b 	bl	8006976 <_Balloc>
 8006ea0:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8006ea4:	4607      	mov	r7, r0
 8006ea6:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006eaa:	bb34      	cbnz	r4, 8006efa <__d2b+0x6c>
 8006eac:	9301      	str	r3, [sp, #4]
 8006eae:	f1b8 0300 	subs.w	r3, r8, #0
 8006eb2:	d027      	beq.n	8006f04 <__d2b+0x76>
 8006eb4:	a802      	add	r0, sp, #8
 8006eb6:	f840 3d08 	str.w	r3, [r0, #-8]!
 8006eba:	f7ff fe01 	bl	8006ac0 <__lo0bits>
 8006ebe:	9900      	ldr	r1, [sp, #0]
 8006ec0:	b1f0      	cbz	r0, 8006f00 <__d2b+0x72>
 8006ec2:	9a01      	ldr	r2, [sp, #4]
 8006ec4:	f1c0 0320 	rsb	r3, r0, #32
 8006ec8:	fa02 f303 	lsl.w	r3, r2, r3
 8006ecc:	430b      	orrs	r3, r1
 8006ece:	40c2      	lsrs	r2, r0
 8006ed0:	617b      	str	r3, [r7, #20]
 8006ed2:	9201      	str	r2, [sp, #4]
 8006ed4:	9b01      	ldr	r3, [sp, #4]
 8006ed6:	61bb      	str	r3, [r7, #24]
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	bf14      	ite	ne
 8006edc:	2102      	movne	r1, #2
 8006ede:	2101      	moveq	r1, #1
 8006ee0:	6139      	str	r1, [r7, #16]
 8006ee2:	b1c4      	cbz	r4, 8006f16 <__d2b+0x88>
 8006ee4:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8006ee8:	4404      	add	r4, r0
 8006eea:	6034      	str	r4, [r6, #0]
 8006eec:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8006ef0:	6028      	str	r0, [r5, #0]
 8006ef2:	4638      	mov	r0, r7
 8006ef4:	b003      	add	sp, #12
 8006ef6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006efa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006efe:	e7d5      	b.n	8006eac <__d2b+0x1e>
 8006f00:	6179      	str	r1, [r7, #20]
 8006f02:	e7e7      	b.n	8006ed4 <__d2b+0x46>
 8006f04:	a801      	add	r0, sp, #4
 8006f06:	f7ff fddb 	bl	8006ac0 <__lo0bits>
 8006f0a:	9b01      	ldr	r3, [sp, #4]
 8006f0c:	617b      	str	r3, [r7, #20]
 8006f0e:	2101      	movs	r1, #1
 8006f10:	6139      	str	r1, [r7, #16]
 8006f12:	3020      	adds	r0, #32
 8006f14:	e7e5      	b.n	8006ee2 <__d2b+0x54>
 8006f16:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8006f1a:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8006f1e:	6030      	str	r0, [r6, #0]
 8006f20:	6918      	ldr	r0, [r3, #16]
 8006f22:	f7ff fdae 	bl	8006a82 <__hi0bits>
 8006f26:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8006f2a:	e7e1      	b.n	8006ef0 <__d2b+0x62>

08006f2c <_calloc_r>:
 8006f2c:	b538      	push	{r3, r4, r5, lr}
 8006f2e:	fb02 f401 	mul.w	r4, r2, r1
 8006f32:	4621      	mov	r1, r4
 8006f34:	f7fe f9d8 	bl	80052e8 <_malloc_r>
 8006f38:	4605      	mov	r5, r0
 8006f3a:	b118      	cbz	r0, 8006f44 <_calloc_r+0x18>
 8006f3c:	4622      	mov	r2, r4
 8006f3e:	2100      	movs	r1, #0
 8006f40:	f7fe f97c 	bl	800523c <memset>
 8006f44:	4628      	mov	r0, r5
 8006f46:	bd38      	pop	{r3, r4, r5, pc}

08006f48 <__ssputs_r>:
 8006f48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006f4c:	688e      	ldr	r6, [r1, #8]
 8006f4e:	429e      	cmp	r6, r3
 8006f50:	4682      	mov	sl, r0
 8006f52:	460c      	mov	r4, r1
 8006f54:	4690      	mov	r8, r2
 8006f56:	4699      	mov	r9, r3
 8006f58:	d837      	bhi.n	8006fca <__ssputs_r+0x82>
 8006f5a:	898a      	ldrh	r2, [r1, #12]
 8006f5c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006f60:	d031      	beq.n	8006fc6 <__ssputs_r+0x7e>
 8006f62:	6825      	ldr	r5, [r4, #0]
 8006f64:	6909      	ldr	r1, [r1, #16]
 8006f66:	1a6f      	subs	r7, r5, r1
 8006f68:	6965      	ldr	r5, [r4, #20]
 8006f6a:	2302      	movs	r3, #2
 8006f6c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006f70:	fb95 f5f3 	sdiv	r5, r5, r3
 8006f74:	f109 0301 	add.w	r3, r9, #1
 8006f78:	443b      	add	r3, r7
 8006f7a:	429d      	cmp	r5, r3
 8006f7c:	bf38      	it	cc
 8006f7e:	461d      	movcc	r5, r3
 8006f80:	0553      	lsls	r3, r2, #21
 8006f82:	d530      	bpl.n	8006fe6 <__ssputs_r+0x9e>
 8006f84:	4629      	mov	r1, r5
 8006f86:	f7fe f9af 	bl	80052e8 <_malloc_r>
 8006f8a:	4606      	mov	r6, r0
 8006f8c:	b950      	cbnz	r0, 8006fa4 <__ssputs_r+0x5c>
 8006f8e:	230c      	movs	r3, #12
 8006f90:	f8ca 3000 	str.w	r3, [sl]
 8006f94:	89a3      	ldrh	r3, [r4, #12]
 8006f96:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006f9a:	81a3      	strh	r3, [r4, #12]
 8006f9c:	f04f 30ff 	mov.w	r0, #4294967295
 8006fa0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006fa4:	463a      	mov	r2, r7
 8006fa6:	6921      	ldr	r1, [r4, #16]
 8006fa8:	f7ff fcd8 	bl	800695c <memcpy>
 8006fac:	89a3      	ldrh	r3, [r4, #12]
 8006fae:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006fb2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006fb6:	81a3      	strh	r3, [r4, #12]
 8006fb8:	6126      	str	r6, [r4, #16]
 8006fba:	6165      	str	r5, [r4, #20]
 8006fbc:	443e      	add	r6, r7
 8006fbe:	1bed      	subs	r5, r5, r7
 8006fc0:	6026      	str	r6, [r4, #0]
 8006fc2:	60a5      	str	r5, [r4, #8]
 8006fc4:	464e      	mov	r6, r9
 8006fc6:	454e      	cmp	r6, r9
 8006fc8:	d900      	bls.n	8006fcc <__ssputs_r+0x84>
 8006fca:	464e      	mov	r6, r9
 8006fcc:	4632      	mov	r2, r6
 8006fce:	4641      	mov	r1, r8
 8006fd0:	6820      	ldr	r0, [r4, #0]
 8006fd2:	f000 f91d 	bl	8007210 <memmove>
 8006fd6:	68a3      	ldr	r3, [r4, #8]
 8006fd8:	1b9b      	subs	r3, r3, r6
 8006fda:	60a3      	str	r3, [r4, #8]
 8006fdc:	6823      	ldr	r3, [r4, #0]
 8006fde:	441e      	add	r6, r3
 8006fe0:	6026      	str	r6, [r4, #0]
 8006fe2:	2000      	movs	r0, #0
 8006fe4:	e7dc      	b.n	8006fa0 <__ssputs_r+0x58>
 8006fe6:	462a      	mov	r2, r5
 8006fe8:	f000 f92b 	bl	8007242 <_realloc_r>
 8006fec:	4606      	mov	r6, r0
 8006fee:	2800      	cmp	r0, #0
 8006ff0:	d1e2      	bne.n	8006fb8 <__ssputs_r+0x70>
 8006ff2:	6921      	ldr	r1, [r4, #16]
 8006ff4:	4650      	mov	r0, sl
 8006ff6:	f7fe f929 	bl	800524c <_free_r>
 8006ffa:	e7c8      	b.n	8006f8e <__ssputs_r+0x46>

08006ffc <_svfiprintf_r>:
 8006ffc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007000:	461d      	mov	r5, r3
 8007002:	898b      	ldrh	r3, [r1, #12]
 8007004:	061f      	lsls	r7, r3, #24
 8007006:	b09d      	sub	sp, #116	; 0x74
 8007008:	4680      	mov	r8, r0
 800700a:	460c      	mov	r4, r1
 800700c:	4616      	mov	r6, r2
 800700e:	d50f      	bpl.n	8007030 <_svfiprintf_r+0x34>
 8007010:	690b      	ldr	r3, [r1, #16]
 8007012:	b96b      	cbnz	r3, 8007030 <_svfiprintf_r+0x34>
 8007014:	2140      	movs	r1, #64	; 0x40
 8007016:	f7fe f967 	bl	80052e8 <_malloc_r>
 800701a:	6020      	str	r0, [r4, #0]
 800701c:	6120      	str	r0, [r4, #16]
 800701e:	b928      	cbnz	r0, 800702c <_svfiprintf_r+0x30>
 8007020:	230c      	movs	r3, #12
 8007022:	f8c8 3000 	str.w	r3, [r8]
 8007026:	f04f 30ff 	mov.w	r0, #4294967295
 800702a:	e0c8      	b.n	80071be <_svfiprintf_r+0x1c2>
 800702c:	2340      	movs	r3, #64	; 0x40
 800702e:	6163      	str	r3, [r4, #20]
 8007030:	2300      	movs	r3, #0
 8007032:	9309      	str	r3, [sp, #36]	; 0x24
 8007034:	2320      	movs	r3, #32
 8007036:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800703a:	2330      	movs	r3, #48	; 0x30
 800703c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007040:	9503      	str	r5, [sp, #12]
 8007042:	f04f 0b01 	mov.w	fp, #1
 8007046:	4637      	mov	r7, r6
 8007048:	463d      	mov	r5, r7
 800704a:	f815 3b01 	ldrb.w	r3, [r5], #1
 800704e:	b10b      	cbz	r3, 8007054 <_svfiprintf_r+0x58>
 8007050:	2b25      	cmp	r3, #37	; 0x25
 8007052:	d13e      	bne.n	80070d2 <_svfiprintf_r+0xd6>
 8007054:	ebb7 0a06 	subs.w	sl, r7, r6
 8007058:	d00b      	beq.n	8007072 <_svfiprintf_r+0x76>
 800705a:	4653      	mov	r3, sl
 800705c:	4632      	mov	r2, r6
 800705e:	4621      	mov	r1, r4
 8007060:	4640      	mov	r0, r8
 8007062:	f7ff ff71 	bl	8006f48 <__ssputs_r>
 8007066:	3001      	adds	r0, #1
 8007068:	f000 80a4 	beq.w	80071b4 <_svfiprintf_r+0x1b8>
 800706c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800706e:	4453      	add	r3, sl
 8007070:	9309      	str	r3, [sp, #36]	; 0x24
 8007072:	783b      	ldrb	r3, [r7, #0]
 8007074:	2b00      	cmp	r3, #0
 8007076:	f000 809d 	beq.w	80071b4 <_svfiprintf_r+0x1b8>
 800707a:	2300      	movs	r3, #0
 800707c:	f04f 32ff 	mov.w	r2, #4294967295
 8007080:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007084:	9304      	str	r3, [sp, #16]
 8007086:	9307      	str	r3, [sp, #28]
 8007088:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800708c:	931a      	str	r3, [sp, #104]	; 0x68
 800708e:	462f      	mov	r7, r5
 8007090:	2205      	movs	r2, #5
 8007092:	f817 1b01 	ldrb.w	r1, [r7], #1
 8007096:	4850      	ldr	r0, [pc, #320]	; (80071d8 <_svfiprintf_r+0x1dc>)
 8007098:	f7f9 f87a 	bl	8000190 <memchr>
 800709c:	9b04      	ldr	r3, [sp, #16]
 800709e:	b9d0      	cbnz	r0, 80070d6 <_svfiprintf_r+0xda>
 80070a0:	06d9      	lsls	r1, r3, #27
 80070a2:	bf44      	itt	mi
 80070a4:	2220      	movmi	r2, #32
 80070a6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80070aa:	071a      	lsls	r2, r3, #28
 80070ac:	bf44      	itt	mi
 80070ae:	222b      	movmi	r2, #43	; 0x2b
 80070b0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80070b4:	782a      	ldrb	r2, [r5, #0]
 80070b6:	2a2a      	cmp	r2, #42	; 0x2a
 80070b8:	d015      	beq.n	80070e6 <_svfiprintf_r+0xea>
 80070ba:	9a07      	ldr	r2, [sp, #28]
 80070bc:	462f      	mov	r7, r5
 80070be:	2000      	movs	r0, #0
 80070c0:	250a      	movs	r5, #10
 80070c2:	4639      	mov	r1, r7
 80070c4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80070c8:	3b30      	subs	r3, #48	; 0x30
 80070ca:	2b09      	cmp	r3, #9
 80070cc:	d94d      	bls.n	800716a <_svfiprintf_r+0x16e>
 80070ce:	b1b8      	cbz	r0, 8007100 <_svfiprintf_r+0x104>
 80070d0:	e00f      	b.n	80070f2 <_svfiprintf_r+0xf6>
 80070d2:	462f      	mov	r7, r5
 80070d4:	e7b8      	b.n	8007048 <_svfiprintf_r+0x4c>
 80070d6:	4a40      	ldr	r2, [pc, #256]	; (80071d8 <_svfiprintf_r+0x1dc>)
 80070d8:	1a80      	subs	r0, r0, r2
 80070da:	fa0b f000 	lsl.w	r0, fp, r0
 80070de:	4318      	orrs	r0, r3
 80070e0:	9004      	str	r0, [sp, #16]
 80070e2:	463d      	mov	r5, r7
 80070e4:	e7d3      	b.n	800708e <_svfiprintf_r+0x92>
 80070e6:	9a03      	ldr	r2, [sp, #12]
 80070e8:	1d11      	adds	r1, r2, #4
 80070ea:	6812      	ldr	r2, [r2, #0]
 80070ec:	9103      	str	r1, [sp, #12]
 80070ee:	2a00      	cmp	r2, #0
 80070f0:	db01      	blt.n	80070f6 <_svfiprintf_r+0xfa>
 80070f2:	9207      	str	r2, [sp, #28]
 80070f4:	e004      	b.n	8007100 <_svfiprintf_r+0x104>
 80070f6:	4252      	negs	r2, r2
 80070f8:	f043 0302 	orr.w	r3, r3, #2
 80070fc:	9207      	str	r2, [sp, #28]
 80070fe:	9304      	str	r3, [sp, #16]
 8007100:	783b      	ldrb	r3, [r7, #0]
 8007102:	2b2e      	cmp	r3, #46	; 0x2e
 8007104:	d10c      	bne.n	8007120 <_svfiprintf_r+0x124>
 8007106:	787b      	ldrb	r3, [r7, #1]
 8007108:	2b2a      	cmp	r3, #42	; 0x2a
 800710a:	d133      	bne.n	8007174 <_svfiprintf_r+0x178>
 800710c:	9b03      	ldr	r3, [sp, #12]
 800710e:	1d1a      	adds	r2, r3, #4
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	9203      	str	r2, [sp, #12]
 8007114:	2b00      	cmp	r3, #0
 8007116:	bfb8      	it	lt
 8007118:	f04f 33ff 	movlt.w	r3, #4294967295
 800711c:	3702      	adds	r7, #2
 800711e:	9305      	str	r3, [sp, #20]
 8007120:	4d2e      	ldr	r5, [pc, #184]	; (80071dc <_svfiprintf_r+0x1e0>)
 8007122:	7839      	ldrb	r1, [r7, #0]
 8007124:	2203      	movs	r2, #3
 8007126:	4628      	mov	r0, r5
 8007128:	f7f9 f832 	bl	8000190 <memchr>
 800712c:	b138      	cbz	r0, 800713e <_svfiprintf_r+0x142>
 800712e:	2340      	movs	r3, #64	; 0x40
 8007130:	1b40      	subs	r0, r0, r5
 8007132:	fa03 f000 	lsl.w	r0, r3, r0
 8007136:	9b04      	ldr	r3, [sp, #16]
 8007138:	4303      	orrs	r3, r0
 800713a:	3701      	adds	r7, #1
 800713c:	9304      	str	r3, [sp, #16]
 800713e:	7839      	ldrb	r1, [r7, #0]
 8007140:	4827      	ldr	r0, [pc, #156]	; (80071e0 <_svfiprintf_r+0x1e4>)
 8007142:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007146:	2206      	movs	r2, #6
 8007148:	1c7e      	adds	r6, r7, #1
 800714a:	f7f9 f821 	bl	8000190 <memchr>
 800714e:	2800      	cmp	r0, #0
 8007150:	d038      	beq.n	80071c4 <_svfiprintf_r+0x1c8>
 8007152:	4b24      	ldr	r3, [pc, #144]	; (80071e4 <_svfiprintf_r+0x1e8>)
 8007154:	bb13      	cbnz	r3, 800719c <_svfiprintf_r+0x1a0>
 8007156:	9b03      	ldr	r3, [sp, #12]
 8007158:	3307      	adds	r3, #7
 800715a:	f023 0307 	bic.w	r3, r3, #7
 800715e:	3308      	adds	r3, #8
 8007160:	9303      	str	r3, [sp, #12]
 8007162:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007164:	444b      	add	r3, r9
 8007166:	9309      	str	r3, [sp, #36]	; 0x24
 8007168:	e76d      	b.n	8007046 <_svfiprintf_r+0x4a>
 800716a:	fb05 3202 	mla	r2, r5, r2, r3
 800716e:	2001      	movs	r0, #1
 8007170:	460f      	mov	r7, r1
 8007172:	e7a6      	b.n	80070c2 <_svfiprintf_r+0xc6>
 8007174:	2300      	movs	r3, #0
 8007176:	3701      	adds	r7, #1
 8007178:	9305      	str	r3, [sp, #20]
 800717a:	4619      	mov	r1, r3
 800717c:	250a      	movs	r5, #10
 800717e:	4638      	mov	r0, r7
 8007180:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007184:	3a30      	subs	r2, #48	; 0x30
 8007186:	2a09      	cmp	r2, #9
 8007188:	d903      	bls.n	8007192 <_svfiprintf_r+0x196>
 800718a:	2b00      	cmp	r3, #0
 800718c:	d0c8      	beq.n	8007120 <_svfiprintf_r+0x124>
 800718e:	9105      	str	r1, [sp, #20]
 8007190:	e7c6      	b.n	8007120 <_svfiprintf_r+0x124>
 8007192:	fb05 2101 	mla	r1, r5, r1, r2
 8007196:	2301      	movs	r3, #1
 8007198:	4607      	mov	r7, r0
 800719a:	e7f0      	b.n	800717e <_svfiprintf_r+0x182>
 800719c:	ab03      	add	r3, sp, #12
 800719e:	9300      	str	r3, [sp, #0]
 80071a0:	4622      	mov	r2, r4
 80071a2:	4b11      	ldr	r3, [pc, #68]	; (80071e8 <_svfiprintf_r+0x1ec>)
 80071a4:	a904      	add	r1, sp, #16
 80071a6:	4640      	mov	r0, r8
 80071a8:	f7fe f98c 	bl	80054c4 <_printf_float>
 80071ac:	f1b0 3fff 	cmp.w	r0, #4294967295
 80071b0:	4681      	mov	r9, r0
 80071b2:	d1d6      	bne.n	8007162 <_svfiprintf_r+0x166>
 80071b4:	89a3      	ldrh	r3, [r4, #12]
 80071b6:	065b      	lsls	r3, r3, #25
 80071b8:	f53f af35 	bmi.w	8007026 <_svfiprintf_r+0x2a>
 80071bc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80071be:	b01d      	add	sp, #116	; 0x74
 80071c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80071c4:	ab03      	add	r3, sp, #12
 80071c6:	9300      	str	r3, [sp, #0]
 80071c8:	4622      	mov	r2, r4
 80071ca:	4b07      	ldr	r3, [pc, #28]	; (80071e8 <_svfiprintf_r+0x1ec>)
 80071cc:	a904      	add	r1, sp, #16
 80071ce:	4640      	mov	r0, r8
 80071d0:	f7fe fc2e 	bl	8005a30 <_printf_i>
 80071d4:	e7ea      	b.n	80071ac <_svfiprintf_r+0x1b0>
 80071d6:	bf00      	nop
 80071d8:	08008264 	.word	0x08008264
 80071dc:	0800826a 	.word	0x0800826a
 80071e0:	0800826e 	.word	0x0800826e
 80071e4:	080054c5 	.word	0x080054c5
 80071e8:	08006f49 	.word	0x08006f49

080071ec <__ascii_mbtowc>:
 80071ec:	b082      	sub	sp, #8
 80071ee:	b901      	cbnz	r1, 80071f2 <__ascii_mbtowc+0x6>
 80071f0:	a901      	add	r1, sp, #4
 80071f2:	b142      	cbz	r2, 8007206 <__ascii_mbtowc+0x1a>
 80071f4:	b14b      	cbz	r3, 800720a <__ascii_mbtowc+0x1e>
 80071f6:	7813      	ldrb	r3, [r2, #0]
 80071f8:	600b      	str	r3, [r1, #0]
 80071fa:	7812      	ldrb	r2, [r2, #0]
 80071fc:	1c10      	adds	r0, r2, #0
 80071fe:	bf18      	it	ne
 8007200:	2001      	movne	r0, #1
 8007202:	b002      	add	sp, #8
 8007204:	4770      	bx	lr
 8007206:	4610      	mov	r0, r2
 8007208:	e7fb      	b.n	8007202 <__ascii_mbtowc+0x16>
 800720a:	f06f 0001 	mvn.w	r0, #1
 800720e:	e7f8      	b.n	8007202 <__ascii_mbtowc+0x16>

08007210 <memmove>:
 8007210:	4288      	cmp	r0, r1
 8007212:	b510      	push	{r4, lr}
 8007214:	eb01 0302 	add.w	r3, r1, r2
 8007218:	d807      	bhi.n	800722a <memmove+0x1a>
 800721a:	1e42      	subs	r2, r0, #1
 800721c:	4299      	cmp	r1, r3
 800721e:	d00a      	beq.n	8007236 <memmove+0x26>
 8007220:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007224:	f802 4f01 	strb.w	r4, [r2, #1]!
 8007228:	e7f8      	b.n	800721c <memmove+0xc>
 800722a:	4283      	cmp	r3, r0
 800722c:	d9f5      	bls.n	800721a <memmove+0xa>
 800722e:	1881      	adds	r1, r0, r2
 8007230:	1ad2      	subs	r2, r2, r3
 8007232:	42d3      	cmn	r3, r2
 8007234:	d100      	bne.n	8007238 <memmove+0x28>
 8007236:	bd10      	pop	{r4, pc}
 8007238:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800723c:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8007240:	e7f7      	b.n	8007232 <memmove+0x22>

08007242 <_realloc_r>:
 8007242:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007244:	4607      	mov	r7, r0
 8007246:	4614      	mov	r4, r2
 8007248:	460e      	mov	r6, r1
 800724a:	b921      	cbnz	r1, 8007256 <_realloc_r+0x14>
 800724c:	4611      	mov	r1, r2
 800724e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8007252:	f7fe b849 	b.w	80052e8 <_malloc_r>
 8007256:	b922      	cbnz	r2, 8007262 <_realloc_r+0x20>
 8007258:	f7fd fff8 	bl	800524c <_free_r>
 800725c:	4625      	mov	r5, r4
 800725e:	4628      	mov	r0, r5
 8007260:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007262:	f000 f821 	bl	80072a8 <_malloc_usable_size_r>
 8007266:	42a0      	cmp	r0, r4
 8007268:	d20f      	bcs.n	800728a <_realloc_r+0x48>
 800726a:	4621      	mov	r1, r4
 800726c:	4638      	mov	r0, r7
 800726e:	f7fe f83b 	bl	80052e8 <_malloc_r>
 8007272:	4605      	mov	r5, r0
 8007274:	2800      	cmp	r0, #0
 8007276:	d0f2      	beq.n	800725e <_realloc_r+0x1c>
 8007278:	4631      	mov	r1, r6
 800727a:	4622      	mov	r2, r4
 800727c:	f7ff fb6e 	bl	800695c <memcpy>
 8007280:	4631      	mov	r1, r6
 8007282:	4638      	mov	r0, r7
 8007284:	f7fd ffe2 	bl	800524c <_free_r>
 8007288:	e7e9      	b.n	800725e <_realloc_r+0x1c>
 800728a:	4635      	mov	r5, r6
 800728c:	e7e7      	b.n	800725e <_realloc_r+0x1c>

0800728e <__ascii_wctomb>:
 800728e:	b149      	cbz	r1, 80072a4 <__ascii_wctomb+0x16>
 8007290:	2aff      	cmp	r2, #255	; 0xff
 8007292:	bf85      	ittet	hi
 8007294:	238a      	movhi	r3, #138	; 0x8a
 8007296:	6003      	strhi	r3, [r0, #0]
 8007298:	700a      	strbls	r2, [r1, #0]
 800729a:	f04f 30ff 	movhi.w	r0, #4294967295
 800729e:	bf98      	it	ls
 80072a0:	2001      	movls	r0, #1
 80072a2:	4770      	bx	lr
 80072a4:	4608      	mov	r0, r1
 80072a6:	4770      	bx	lr

080072a8 <_malloc_usable_size_r>:
 80072a8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80072ac:	1f18      	subs	r0, r3, #4
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	bfbc      	itt	lt
 80072b2:	580b      	ldrlt	r3, [r1, r0]
 80072b4:	18c0      	addlt	r0, r0, r3
 80072b6:	4770      	bx	lr

080072b8 <_init>:
 80072b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80072ba:	bf00      	nop
 80072bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80072be:	bc08      	pop	{r3}
 80072c0:	469e      	mov	lr, r3
 80072c2:	4770      	bx	lr

080072c4 <_fini>:
 80072c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80072c6:	bf00      	nop
 80072c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80072ca:	bc08      	pop	{r3}
 80072cc:	469e      	mov	lr, r3
 80072ce:	4770      	bx	lr
