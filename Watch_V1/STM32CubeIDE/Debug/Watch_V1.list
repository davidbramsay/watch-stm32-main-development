
Watch_V1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000163ec  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001e78  08016530  08016530  00026530  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  080183a8  080183a8  000283a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080183ac  080183ac  000283ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         000001f4  20000004  080183b0  00030004  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 BLE_APP_CONTEXT 000000d0  200001f8  080185a4  000301f8  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  7 TIMERSERVER_CONTEXT 00000099  200002c8  08018674  000302c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 BLE_DRIVER_CONTEXT 0000003e  20000364  0801870d  00030364  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 SYSTEM_DRIVER_CONTEXT 00000011  200003a4  0801874b  000303a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          00007750  200003b8  0801875c  000303b8  2**2
                  ALLOC
 11 ._user_heap_stack 00001400  20007b08  0801875c  00037b08  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000303b5  2**0
                  CONTENTS, READONLY
 13 MAPPING_TABLE 00000028  20030000  20030000  00040000  2**2
                  ALLOC
 14 MB_MEM1       000001b8  20030028  20030028  00040000  2**2
                  ALLOC
 15 MB_MEM2       00000877  200301e0  200301e0  00040000  2**2
                  ALLOC
 16 .debug_info   000547da  00000000  00000000  000303e5  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_abbrev 00008c6e  00000000  00000000  00084bbf  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_aranges 000037a0  00000000  00000000  0008d830  2**3
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_ranges 000033f0  00000000  00000000  00090fd0  2**3
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_macro  00033484  00000000  00000000  000943c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_line   00034d06  00000000  00000000  000c7844  2**0
                  CONTENTS, READONLY, DEBUGGING
 22 .debug_str    00111f38  00000000  00000000  000fc54a  2**0
                  CONTENTS, READONLY, DEBUGGING
 23 .comment      0000007b  00000000  00000000  0020e482  2**0
                  CONTENTS, READONLY
 24 .debug_frame  0000fa6c  00000000  00000000  0020e500  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	200003b8 	.word	0x200003b8
 800015c:	00000000 	.word	0x00000000
 8000160:	08016514 	.word	0x08016514

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	200003bc 	.word	0x200003bc
 800017c:	08016514 	.word	0x08016514

08000180 <strlen>:
 8000180:	4603      	mov	r3, r0
 8000182:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000186:	2a00      	cmp	r2, #0
 8000188:	d1fb      	bne.n	8000182 <strlen+0x2>
 800018a:	1a18      	subs	r0, r3, r0
 800018c:	3801      	subs	r0, #1
 800018e:	4770      	bx	lr

08000190 <memchr>:
 8000190:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000194:	2a10      	cmp	r2, #16
 8000196:	db2b      	blt.n	80001f0 <memchr+0x60>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	d008      	beq.n	80001b0 <memchr+0x20>
 800019e:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001a2:	3a01      	subs	r2, #1
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d02d      	beq.n	8000204 <memchr+0x74>
 80001a8:	f010 0f07 	tst.w	r0, #7
 80001ac:	b342      	cbz	r2, 8000200 <memchr+0x70>
 80001ae:	d1f6      	bne.n	800019e <memchr+0xe>
 80001b0:	b4f0      	push	{r4, r5, r6, r7}
 80001b2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001b6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001ba:	f022 0407 	bic.w	r4, r2, #7
 80001be:	f07f 0700 	mvns.w	r7, #0
 80001c2:	2300      	movs	r3, #0
 80001c4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001c8:	3c08      	subs	r4, #8
 80001ca:	ea85 0501 	eor.w	r5, r5, r1
 80001ce:	ea86 0601 	eor.w	r6, r6, r1
 80001d2:	fa85 f547 	uadd8	r5, r5, r7
 80001d6:	faa3 f587 	sel	r5, r3, r7
 80001da:	fa86 f647 	uadd8	r6, r6, r7
 80001de:	faa5 f687 	sel	r6, r5, r7
 80001e2:	b98e      	cbnz	r6, 8000208 <memchr+0x78>
 80001e4:	d1ee      	bne.n	80001c4 <memchr+0x34>
 80001e6:	bcf0      	pop	{r4, r5, r6, r7}
 80001e8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001ec:	f002 0207 	and.w	r2, r2, #7
 80001f0:	b132      	cbz	r2, 8000200 <memchr+0x70>
 80001f2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f6:	3a01      	subs	r2, #1
 80001f8:	ea83 0301 	eor.w	r3, r3, r1
 80001fc:	b113      	cbz	r3, 8000204 <memchr+0x74>
 80001fe:	d1f8      	bne.n	80001f2 <memchr+0x62>
 8000200:	2000      	movs	r0, #0
 8000202:	4770      	bx	lr
 8000204:	3801      	subs	r0, #1
 8000206:	4770      	bx	lr
 8000208:	2d00      	cmp	r5, #0
 800020a:	bf06      	itte	eq
 800020c:	4635      	moveq	r5, r6
 800020e:	3803      	subeq	r0, #3
 8000210:	3807      	subne	r0, #7
 8000212:	f015 0f01 	tst.w	r5, #1
 8000216:	d107      	bne.n	8000228 <memchr+0x98>
 8000218:	3001      	adds	r0, #1
 800021a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800021e:	bf02      	ittt	eq
 8000220:	3001      	addeq	r0, #1
 8000222:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000226:	3001      	addeq	r0, #1
 8000228:	bcf0      	pop	{r4, r5, r6, r7}
 800022a:	3801      	subs	r0, #1
 800022c:	4770      	bx	lr
 800022e:	bf00      	nop

08000230 <__aeabi_drsub>:
 8000230:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000234:	e002      	b.n	800023c <__adddf3>
 8000236:	bf00      	nop

08000238 <__aeabi_dsub>:
 8000238:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800023c <__adddf3>:
 800023c:	b530      	push	{r4, r5, lr}
 800023e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000242:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000246:	ea94 0f05 	teq	r4, r5
 800024a:	bf08      	it	eq
 800024c:	ea90 0f02 	teqeq	r0, r2
 8000250:	bf1f      	itttt	ne
 8000252:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000256:	ea55 0c02 	orrsne.w	ip, r5, r2
 800025a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800025e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000262:	f000 80e2 	beq.w	800042a <__adddf3+0x1ee>
 8000266:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800026a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800026e:	bfb8      	it	lt
 8000270:	426d      	neglt	r5, r5
 8000272:	dd0c      	ble.n	800028e <__adddf3+0x52>
 8000274:	442c      	add	r4, r5
 8000276:	ea80 0202 	eor.w	r2, r0, r2
 800027a:	ea81 0303 	eor.w	r3, r1, r3
 800027e:	ea82 0000 	eor.w	r0, r2, r0
 8000282:	ea83 0101 	eor.w	r1, r3, r1
 8000286:	ea80 0202 	eor.w	r2, r0, r2
 800028a:	ea81 0303 	eor.w	r3, r1, r3
 800028e:	2d36      	cmp	r5, #54	; 0x36
 8000290:	bf88      	it	hi
 8000292:	bd30      	pophi	{r4, r5, pc}
 8000294:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000298:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800029c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002a0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002a4:	d002      	beq.n	80002ac <__adddf3+0x70>
 80002a6:	4240      	negs	r0, r0
 80002a8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ac:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002b4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002b8:	d002      	beq.n	80002c0 <__adddf3+0x84>
 80002ba:	4252      	negs	r2, r2
 80002bc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c0:	ea94 0f05 	teq	r4, r5
 80002c4:	f000 80a7 	beq.w	8000416 <__adddf3+0x1da>
 80002c8:	f1a4 0401 	sub.w	r4, r4, #1
 80002cc:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d0:	db0d      	blt.n	80002ee <__adddf3+0xb2>
 80002d2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002d6:	fa22 f205 	lsr.w	r2, r2, r5
 80002da:	1880      	adds	r0, r0, r2
 80002dc:	f141 0100 	adc.w	r1, r1, #0
 80002e0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002e4:	1880      	adds	r0, r0, r2
 80002e6:	fa43 f305 	asr.w	r3, r3, r5
 80002ea:	4159      	adcs	r1, r3
 80002ec:	e00e      	b.n	800030c <__adddf3+0xd0>
 80002ee:	f1a5 0520 	sub.w	r5, r5, #32
 80002f2:	f10e 0e20 	add.w	lr, lr, #32
 80002f6:	2a01      	cmp	r2, #1
 80002f8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002fc:	bf28      	it	cs
 80002fe:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000302:	fa43 f305 	asr.w	r3, r3, r5
 8000306:	18c0      	adds	r0, r0, r3
 8000308:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800030c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000310:	d507      	bpl.n	8000322 <__adddf3+0xe6>
 8000312:	f04f 0e00 	mov.w	lr, #0
 8000316:	f1dc 0c00 	rsbs	ip, ip, #0
 800031a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800031e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000322:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000326:	d31b      	bcc.n	8000360 <__adddf3+0x124>
 8000328:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800032c:	d30c      	bcc.n	8000348 <__adddf3+0x10c>
 800032e:	0849      	lsrs	r1, r1, #1
 8000330:	ea5f 0030 	movs.w	r0, r0, rrx
 8000334:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000338:	f104 0401 	add.w	r4, r4, #1
 800033c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000340:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000344:	f080 809a 	bcs.w	800047c <__adddf3+0x240>
 8000348:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800034c:	bf08      	it	eq
 800034e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000352:	f150 0000 	adcs.w	r0, r0, #0
 8000356:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800035a:	ea41 0105 	orr.w	r1, r1, r5
 800035e:	bd30      	pop	{r4, r5, pc}
 8000360:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000364:	4140      	adcs	r0, r0
 8000366:	eb41 0101 	adc.w	r1, r1, r1
 800036a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800036e:	f1a4 0401 	sub.w	r4, r4, #1
 8000372:	d1e9      	bne.n	8000348 <__adddf3+0x10c>
 8000374:	f091 0f00 	teq	r1, #0
 8000378:	bf04      	itt	eq
 800037a:	4601      	moveq	r1, r0
 800037c:	2000      	moveq	r0, #0
 800037e:	fab1 f381 	clz	r3, r1
 8000382:	bf08      	it	eq
 8000384:	3320      	addeq	r3, #32
 8000386:	f1a3 030b 	sub.w	r3, r3, #11
 800038a:	f1b3 0220 	subs.w	r2, r3, #32
 800038e:	da0c      	bge.n	80003aa <__adddf3+0x16e>
 8000390:	320c      	adds	r2, #12
 8000392:	dd08      	ble.n	80003a6 <__adddf3+0x16a>
 8000394:	f102 0c14 	add.w	ip, r2, #20
 8000398:	f1c2 020c 	rsb	r2, r2, #12
 800039c:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a0:	fa21 f102 	lsr.w	r1, r1, r2
 80003a4:	e00c      	b.n	80003c0 <__adddf3+0x184>
 80003a6:	f102 0214 	add.w	r2, r2, #20
 80003aa:	bfd8      	it	le
 80003ac:	f1c2 0c20 	rsble	ip, r2, #32
 80003b0:	fa01 f102 	lsl.w	r1, r1, r2
 80003b4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003b8:	bfdc      	itt	le
 80003ba:	ea41 010c 	orrle.w	r1, r1, ip
 80003be:	4090      	lslle	r0, r2
 80003c0:	1ae4      	subs	r4, r4, r3
 80003c2:	bfa2      	ittt	ge
 80003c4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003c8:	4329      	orrge	r1, r5
 80003ca:	bd30      	popge	{r4, r5, pc}
 80003cc:	ea6f 0404 	mvn.w	r4, r4
 80003d0:	3c1f      	subs	r4, #31
 80003d2:	da1c      	bge.n	800040e <__adddf3+0x1d2>
 80003d4:	340c      	adds	r4, #12
 80003d6:	dc0e      	bgt.n	80003f6 <__adddf3+0x1ba>
 80003d8:	f104 0414 	add.w	r4, r4, #20
 80003dc:	f1c4 0220 	rsb	r2, r4, #32
 80003e0:	fa20 f004 	lsr.w	r0, r0, r4
 80003e4:	fa01 f302 	lsl.w	r3, r1, r2
 80003e8:	ea40 0003 	orr.w	r0, r0, r3
 80003ec:	fa21 f304 	lsr.w	r3, r1, r4
 80003f0:	ea45 0103 	orr.w	r1, r5, r3
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	f1c4 040c 	rsb	r4, r4, #12
 80003fa:	f1c4 0220 	rsb	r2, r4, #32
 80003fe:	fa20 f002 	lsr.w	r0, r0, r2
 8000402:	fa01 f304 	lsl.w	r3, r1, r4
 8000406:	ea40 0003 	orr.w	r0, r0, r3
 800040a:	4629      	mov	r1, r5
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	fa21 f004 	lsr.w	r0, r1, r4
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	f094 0f00 	teq	r4, #0
 800041a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800041e:	bf06      	itte	eq
 8000420:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000424:	3401      	addeq	r4, #1
 8000426:	3d01      	subne	r5, #1
 8000428:	e74e      	b.n	80002c8 <__adddf3+0x8c>
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf18      	it	ne
 8000430:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000434:	d029      	beq.n	800048a <__adddf3+0x24e>
 8000436:	ea94 0f05 	teq	r4, r5
 800043a:	bf08      	it	eq
 800043c:	ea90 0f02 	teqeq	r0, r2
 8000440:	d005      	beq.n	800044e <__adddf3+0x212>
 8000442:	ea54 0c00 	orrs.w	ip, r4, r0
 8000446:	bf04      	itt	eq
 8000448:	4619      	moveq	r1, r3
 800044a:	4610      	moveq	r0, r2
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	ea91 0f03 	teq	r1, r3
 8000452:	bf1e      	ittt	ne
 8000454:	2100      	movne	r1, #0
 8000456:	2000      	movne	r0, #0
 8000458:	bd30      	popne	{r4, r5, pc}
 800045a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800045e:	d105      	bne.n	800046c <__adddf3+0x230>
 8000460:	0040      	lsls	r0, r0, #1
 8000462:	4149      	adcs	r1, r1
 8000464:	bf28      	it	cs
 8000466:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800046a:	bd30      	pop	{r4, r5, pc}
 800046c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000470:	bf3c      	itt	cc
 8000472:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000476:	bd30      	popcc	{r4, r5, pc}
 8000478:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800047c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000480:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000484:	f04f 0000 	mov.w	r0, #0
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf1a      	itte	ne
 8000490:	4619      	movne	r1, r3
 8000492:	4610      	movne	r0, r2
 8000494:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000498:	bf1c      	itt	ne
 800049a:	460b      	movne	r3, r1
 800049c:	4602      	movne	r2, r0
 800049e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004a2:	bf06      	itte	eq
 80004a4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004a8:	ea91 0f03 	teqeq	r1, r3
 80004ac:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004b0:	bd30      	pop	{r4, r5, pc}
 80004b2:	bf00      	nop

080004b4 <__aeabi_ui2d>:
 80004b4:	f090 0f00 	teq	r0, #0
 80004b8:	bf04      	itt	eq
 80004ba:	2100      	moveq	r1, #0
 80004bc:	4770      	bxeq	lr
 80004be:	b530      	push	{r4, r5, lr}
 80004c0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004c4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c8:	f04f 0500 	mov.w	r5, #0
 80004cc:	f04f 0100 	mov.w	r1, #0
 80004d0:	e750      	b.n	8000374 <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_i2d>:
 80004d4:	f090 0f00 	teq	r0, #0
 80004d8:	bf04      	itt	eq
 80004da:	2100      	moveq	r1, #0
 80004dc:	4770      	bxeq	lr
 80004de:	b530      	push	{r4, r5, lr}
 80004e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004e8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004ec:	bf48      	it	mi
 80004ee:	4240      	negmi	r0, r0
 80004f0:	f04f 0100 	mov.w	r1, #0
 80004f4:	e73e      	b.n	8000374 <__adddf3+0x138>
 80004f6:	bf00      	nop

080004f8 <__aeabi_f2d>:
 80004f8:	0042      	lsls	r2, r0, #1
 80004fa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004fe:	ea4f 0131 	mov.w	r1, r1, rrx
 8000502:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000506:	bf1f      	itttt	ne
 8000508:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800050c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000510:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000514:	4770      	bxne	lr
 8000516:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800051a:	bf08      	it	eq
 800051c:	4770      	bxeq	lr
 800051e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000522:	bf04      	itt	eq
 8000524:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000528:	4770      	bxeq	lr
 800052a:	b530      	push	{r4, r5, lr}
 800052c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000530:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000534:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000538:	e71c      	b.n	8000374 <__adddf3+0x138>
 800053a:	bf00      	nop

0800053c <__aeabi_ul2d>:
 800053c:	ea50 0201 	orrs.w	r2, r0, r1
 8000540:	bf08      	it	eq
 8000542:	4770      	bxeq	lr
 8000544:	b530      	push	{r4, r5, lr}
 8000546:	f04f 0500 	mov.w	r5, #0
 800054a:	e00a      	b.n	8000562 <__aeabi_l2d+0x16>

0800054c <__aeabi_l2d>:
 800054c:	ea50 0201 	orrs.w	r2, r0, r1
 8000550:	bf08      	it	eq
 8000552:	4770      	bxeq	lr
 8000554:	b530      	push	{r4, r5, lr}
 8000556:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800055a:	d502      	bpl.n	8000562 <__aeabi_l2d+0x16>
 800055c:	4240      	negs	r0, r0
 800055e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000562:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000566:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800056a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800056e:	f43f aed8 	beq.w	8000322 <__adddf3+0xe6>
 8000572:	f04f 0203 	mov.w	r2, #3
 8000576:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800057a:	bf18      	it	ne
 800057c:	3203      	addne	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800058a:	f1c2 0320 	rsb	r3, r2, #32
 800058e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000592:	fa20 f002 	lsr.w	r0, r0, r2
 8000596:	fa01 fe03 	lsl.w	lr, r1, r3
 800059a:	ea40 000e 	orr.w	r0, r0, lr
 800059e:	fa21 f102 	lsr.w	r1, r1, r2
 80005a2:	4414      	add	r4, r2
 80005a4:	e6bd      	b.n	8000322 <__adddf3+0xe6>
 80005a6:	bf00      	nop

080005a8 <__aeabi_dmul>:
 80005a8:	b570      	push	{r4, r5, r6, lr}
 80005aa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ae:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005b2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005b6:	bf1d      	ittte	ne
 80005b8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005bc:	ea94 0f0c 	teqne	r4, ip
 80005c0:	ea95 0f0c 	teqne	r5, ip
 80005c4:	f000 f8de 	bleq	8000784 <__aeabi_dmul+0x1dc>
 80005c8:	442c      	add	r4, r5
 80005ca:	ea81 0603 	eor.w	r6, r1, r3
 80005ce:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005d2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005d6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005da:	bf18      	it	ne
 80005dc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005e4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005e8:	d038      	beq.n	800065c <__aeabi_dmul+0xb4>
 80005ea:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ee:	f04f 0500 	mov.w	r5, #0
 80005f2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005f6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005fa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005fe:	f04f 0600 	mov.w	r6, #0
 8000602:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000606:	f09c 0f00 	teq	ip, #0
 800060a:	bf18      	it	ne
 800060c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000610:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000614:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000618:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800061c:	d204      	bcs.n	8000628 <__aeabi_dmul+0x80>
 800061e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000622:	416d      	adcs	r5, r5
 8000624:	eb46 0606 	adc.w	r6, r6, r6
 8000628:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800062c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000630:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000634:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000638:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800063c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000640:	bf88      	it	hi
 8000642:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000646:	d81e      	bhi.n	8000686 <__aeabi_dmul+0xde>
 8000648:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800064c:	bf08      	it	eq
 800064e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000652:	f150 0000 	adcs.w	r0, r0, #0
 8000656:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800065a:	bd70      	pop	{r4, r5, r6, pc}
 800065c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000660:	ea46 0101 	orr.w	r1, r6, r1
 8000664:	ea40 0002 	orr.w	r0, r0, r2
 8000668:	ea81 0103 	eor.w	r1, r1, r3
 800066c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000670:	bfc2      	ittt	gt
 8000672:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000676:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800067a:	bd70      	popgt	{r4, r5, r6, pc}
 800067c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000680:	f04f 0e00 	mov.w	lr, #0
 8000684:	3c01      	subs	r4, #1
 8000686:	f300 80ab 	bgt.w	80007e0 <__aeabi_dmul+0x238>
 800068a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800068e:	bfde      	ittt	le
 8000690:	2000      	movle	r0, #0
 8000692:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000696:	bd70      	pople	{r4, r5, r6, pc}
 8000698:	f1c4 0400 	rsb	r4, r4, #0
 800069c:	3c20      	subs	r4, #32
 800069e:	da35      	bge.n	800070c <__aeabi_dmul+0x164>
 80006a0:	340c      	adds	r4, #12
 80006a2:	dc1b      	bgt.n	80006dc <__aeabi_dmul+0x134>
 80006a4:	f104 0414 	add.w	r4, r4, #20
 80006a8:	f1c4 0520 	rsb	r5, r4, #32
 80006ac:	fa00 f305 	lsl.w	r3, r0, r5
 80006b0:	fa20 f004 	lsr.w	r0, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea40 0002 	orr.w	r0, r0, r2
 80006bc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006c0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006c8:	fa21 f604 	lsr.w	r6, r1, r4
 80006cc:	eb42 0106 	adc.w	r1, r2, r6
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f1c4 040c 	rsb	r4, r4, #12
 80006e0:	f1c4 0520 	rsb	r5, r4, #32
 80006e4:	fa00 f304 	lsl.w	r3, r0, r4
 80006e8:	fa20 f005 	lsr.w	r0, r0, r5
 80006ec:	fa01 f204 	lsl.w	r2, r1, r4
 80006f0:	ea40 0002 	orr.w	r0, r0, r2
 80006f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006f8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006fc:	f141 0100 	adc.w	r1, r1, #0
 8000700:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000704:	bf08      	it	eq
 8000706:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f1c4 0520 	rsb	r5, r4, #32
 8000710:	fa00 f205 	lsl.w	r2, r0, r5
 8000714:	ea4e 0e02 	orr.w	lr, lr, r2
 8000718:	fa20 f304 	lsr.w	r3, r0, r4
 800071c:	fa01 f205 	lsl.w	r2, r1, r5
 8000720:	ea43 0302 	orr.w	r3, r3, r2
 8000724:	fa21 f004 	lsr.w	r0, r1, r4
 8000728:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800072c:	fa21 f204 	lsr.w	r2, r1, r4
 8000730:	ea20 0002 	bic.w	r0, r0, r2
 8000734:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000738:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800073c:	bf08      	it	eq
 800073e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000742:	bd70      	pop	{r4, r5, r6, pc}
 8000744:	f094 0f00 	teq	r4, #0
 8000748:	d10f      	bne.n	800076a <__aeabi_dmul+0x1c2>
 800074a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800074e:	0040      	lsls	r0, r0, #1
 8000750:	eb41 0101 	adc.w	r1, r1, r1
 8000754:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000758:	bf08      	it	eq
 800075a:	3c01      	subeq	r4, #1
 800075c:	d0f7      	beq.n	800074e <__aeabi_dmul+0x1a6>
 800075e:	ea41 0106 	orr.w	r1, r1, r6
 8000762:	f095 0f00 	teq	r5, #0
 8000766:	bf18      	it	ne
 8000768:	4770      	bxne	lr
 800076a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800076e:	0052      	lsls	r2, r2, #1
 8000770:	eb43 0303 	adc.w	r3, r3, r3
 8000774:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000778:	bf08      	it	eq
 800077a:	3d01      	subeq	r5, #1
 800077c:	d0f7      	beq.n	800076e <__aeabi_dmul+0x1c6>
 800077e:	ea43 0306 	orr.w	r3, r3, r6
 8000782:	4770      	bx	lr
 8000784:	ea94 0f0c 	teq	r4, ip
 8000788:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800078c:	bf18      	it	ne
 800078e:	ea95 0f0c 	teqne	r5, ip
 8000792:	d00c      	beq.n	80007ae <__aeabi_dmul+0x206>
 8000794:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000798:	bf18      	it	ne
 800079a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800079e:	d1d1      	bne.n	8000744 <__aeabi_dmul+0x19c>
 80007a0:	ea81 0103 	eor.w	r1, r1, r3
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a8:	f04f 0000 	mov.w	r0, #0
 80007ac:	bd70      	pop	{r4, r5, r6, pc}
 80007ae:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007b2:	bf06      	itte	eq
 80007b4:	4610      	moveq	r0, r2
 80007b6:	4619      	moveq	r1, r3
 80007b8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007bc:	d019      	beq.n	80007f2 <__aeabi_dmul+0x24a>
 80007be:	ea94 0f0c 	teq	r4, ip
 80007c2:	d102      	bne.n	80007ca <__aeabi_dmul+0x222>
 80007c4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007c8:	d113      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007ca:	ea95 0f0c 	teq	r5, ip
 80007ce:	d105      	bne.n	80007dc <__aeabi_dmul+0x234>
 80007d0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007d4:	bf1c      	itt	ne
 80007d6:	4610      	movne	r0, r2
 80007d8:	4619      	movne	r1, r3
 80007da:	d10a      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007dc:	ea81 0103 	eor.w	r1, r1, r3
 80007e0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007e8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007ec:	f04f 0000 	mov.w	r0, #0
 80007f0:	bd70      	pop	{r4, r5, r6, pc}
 80007f2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007f6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007fa:	bd70      	pop	{r4, r5, r6, pc}

080007fc <__aeabi_ddiv>:
 80007fc:	b570      	push	{r4, r5, r6, lr}
 80007fe:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000802:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000806:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800080a:	bf1d      	ittte	ne
 800080c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000810:	ea94 0f0c 	teqne	r4, ip
 8000814:	ea95 0f0c 	teqne	r5, ip
 8000818:	f000 f8a7 	bleq	800096a <__aeabi_ddiv+0x16e>
 800081c:	eba4 0405 	sub.w	r4, r4, r5
 8000820:	ea81 0e03 	eor.w	lr, r1, r3
 8000824:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000828:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800082c:	f000 8088 	beq.w	8000940 <__aeabi_ddiv+0x144>
 8000830:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000834:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000838:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800083c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000840:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000844:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000848:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800084c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000850:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000854:	429d      	cmp	r5, r3
 8000856:	bf08      	it	eq
 8000858:	4296      	cmpeq	r6, r2
 800085a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800085e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000862:	d202      	bcs.n	800086a <__aeabi_ddiv+0x6e>
 8000864:	085b      	lsrs	r3, r3, #1
 8000866:	ea4f 0232 	mov.w	r2, r2, rrx
 800086a:	1ab6      	subs	r6, r6, r2
 800086c:	eb65 0503 	sbc.w	r5, r5, r3
 8000870:	085b      	lsrs	r3, r3, #1
 8000872:	ea4f 0232 	mov.w	r2, r2, rrx
 8000876:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800087a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ce:	bf22      	ittt	cs
 80008d0:	1ab6      	subcs	r6, r6, r2
 80008d2:	4675      	movcs	r5, lr
 80008d4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008d8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008dc:	d018      	beq.n	8000910 <__aeabi_ddiv+0x114>
 80008de:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008e2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008e6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008ea:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ee:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008f2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008f6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008fa:	d1c0      	bne.n	800087e <__aeabi_ddiv+0x82>
 80008fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000900:	d10b      	bne.n	800091a <__aeabi_ddiv+0x11e>
 8000902:	ea41 0100 	orr.w	r1, r1, r0
 8000906:	f04f 0000 	mov.w	r0, #0
 800090a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800090e:	e7b6      	b.n	800087e <__aeabi_ddiv+0x82>
 8000910:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000914:	bf04      	itt	eq
 8000916:	4301      	orreq	r1, r0
 8000918:	2000      	moveq	r0, #0
 800091a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800091e:	bf88      	it	hi
 8000920:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000924:	f63f aeaf 	bhi.w	8000686 <__aeabi_dmul+0xde>
 8000928:	ebb5 0c03 	subs.w	ip, r5, r3
 800092c:	bf04      	itt	eq
 800092e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000932:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000936:	f150 0000 	adcs.w	r0, r0, #0
 800093a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800093e:	bd70      	pop	{r4, r5, r6, pc}
 8000940:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000944:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000948:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800094c:	bfc2      	ittt	gt
 800094e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000952:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000956:	bd70      	popgt	{r4, r5, r6, pc}
 8000958:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800095c:	f04f 0e00 	mov.w	lr, #0
 8000960:	3c01      	subs	r4, #1
 8000962:	e690      	b.n	8000686 <__aeabi_dmul+0xde>
 8000964:	ea45 0e06 	orr.w	lr, r5, r6
 8000968:	e68d      	b.n	8000686 <__aeabi_dmul+0xde>
 800096a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800096e:	ea94 0f0c 	teq	r4, ip
 8000972:	bf08      	it	eq
 8000974:	ea95 0f0c 	teqeq	r5, ip
 8000978:	f43f af3b 	beq.w	80007f2 <__aeabi_dmul+0x24a>
 800097c:	ea94 0f0c 	teq	r4, ip
 8000980:	d10a      	bne.n	8000998 <__aeabi_ddiv+0x19c>
 8000982:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000986:	f47f af34 	bne.w	80007f2 <__aeabi_dmul+0x24a>
 800098a:	ea95 0f0c 	teq	r5, ip
 800098e:	f47f af25 	bne.w	80007dc <__aeabi_dmul+0x234>
 8000992:	4610      	mov	r0, r2
 8000994:	4619      	mov	r1, r3
 8000996:	e72c      	b.n	80007f2 <__aeabi_dmul+0x24a>
 8000998:	ea95 0f0c 	teq	r5, ip
 800099c:	d106      	bne.n	80009ac <__aeabi_ddiv+0x1b0>
 800099e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009a2:	f43f aefd 	beq.w	80007a0 <__aeabi_dmul+0x1f8>
 80009a6:	4610      	mov	r0, r2
 80009a8:	4619      	mov	r1, r3
 80009aa:	e722      	b.n	80007f2 <__aeabi_dmul+0x24a>
 80009ac:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b0:	bf18      	it	ne
 80009b2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009b6:	f47f aec5 	bne.w	8000744 <__aeabi_dmul+0x19c>
 80009ba:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009be:	f47f af0d 	bne.w	80007dc <__aeabi_dmul+0x234>
 80009c2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009c6:	f47f aeeb 	bne.w	80007a0 <__aeabi_dmul+0x1f8>
 80009ca:	e712      	b.n	80007f2 <__aeabi_dmul+0x24a>

080009cc <__gedf2>:
 80009cc:	f04f 3cff 	mov.w	ip, #4294967295
 80009d0:	e006      	b.n	80009e0 <__cmpdf2+0x4>
 80009d2:	bf00      	nop

080009d4 <__ledf2>:
 80009d4:	f04f 0c01 	mov.w	ip, #1
 80009d8:	e002      	b.n	80009e0 <__cmpdf2+0x4>
 80009da:	bf00      	nop

080009dc <__cmpdf2>:
 80009dc:	f04f 0c01 	mov.w	ip, #1
 80009e0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009e4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009e8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009ec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009f6:	d01b      	beq.n	8000a30 <__cmpdf2+0x54>
 80009f8:	b001      	add	sp, #4
 80009fa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009fe:	bf0c      	ite	eq
 8000a00:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a04:	ea91 0f03 	teqne	r1, r3
 8000a08:	bf02      	ittt	eq
 8000a0a:	ea90 0f02 	teqeq	r0, r2
 8000a0e:	2000      	moveq	r0, #0
 8000a10:	4770      	bxeq	lr
 8000a12:	f110 0f00 	cmn.w	r0, #0
 8000a16:	ea91 0f03 	teq	r1, r3
 8000a1a:	bf58      	it	pl
 8000a1c:	4299      	cmppl	r1, r3
 8000a1e:	bf08      	it	eq
 8000a20:	4290      	cmpeq	r0, r2
 8000a22:	bf2c      	ite	cs
 8000a24:	17d8      	asrcs	r0, r3, #31
 8000a26:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a2a:	f040 0001 	orr.w	r0, r0, #1
 8000a2e:	4770      	bx	lr
 8000a30:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a38:	d102      	bne.n	8000a40 <__cmpdf2+0x64>
 8000a3a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a3e:	d107      	bne.n	8000a50 <__cmpdf2+0x74>
 8000a40:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a44:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a48:	d1d6      	bne.n	80009f8 <__cmpdf2+0x1c>
 8000a4a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a4e:	d0d3      	beq.n	80009f8 <__cmpdf2+0x1c>
 8000a50:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a54:	4770      	bx	lr
 8000a56:	bf00      	nop

08000a58 <__aeabi_cdrcmple>:
 8000a58:	4684      	mov	ip, r0
 8000a5a:	4610      	mov	r0, r2
 8000a5c:	4662      	mov	r2, ip
 8000a5e:	468c      	mov	ip, r1
 8000a60:	4619      	mov	r1, r3
 8000a62:	4663      	mov	r3, ip
 8000a64:	e000      	b.n	8000a68 <__aeabi_cdcmpeq>
 8000a66:	bf00      	nop

08000a68 <__aeabi_cdcmpeq>:
 8000a68:	b501      	push	{r0, lr}
 8000a6a:	f7ff ffb7 	bl	80009dc <__cmpdf2>
 8000a6e:	2800      	cmp	r0, #0
 8000a70:	bf48      	it	mi
 8000a72:	f110 0f00 	cmnmi.w	r0, #0
 8000a76:	bd01      	pop	{r0, pc}

08000a78 <__aeabi_dcmpeq>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff fff4 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a80:	bf0c      	ite	eq
 8000a82:	2001      	moveq	r0, #1
 8000a84:	2000      	movne	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_dcmplt>:
 8000a8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a90:	f7ff ffea 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a94:	bf34      	ite	cc
 8000a96:	2001      	movcc	r0, #1
 8000a98:	2000      	movcs	r0, #0
 8000a9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_dcmple>:
 8000aa0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa4:	f7ff ffe0 	bl	8000a68 <__aeabi_cdcmpeq>
 8000aa8:	bf94      	ite	ls
 8000aaa:	2001      	movls	r0, #1
 8000aac:	2000      	movhi	r0, #0
 8000aae:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab2:	bf00      	nop

08000ab4 <__aeabi_dcmpge>:
 8000ab4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab8:	f7ff ffce 	bl	8000a58 <__aeabi_cdrcmple>
 8000abc:	bf94      	ite	ls
 8000abe:	2001      	movls	r0, #1
 8000ac0:	2000      	movhi	r0, #0
 8000ac2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_dcmpgt>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff ffc4 	bl	8000a58 <__aeabi_cdrcmple>
 8000ad0:	bf34      	ite	cc
 8000ad2:	2001      	movcc	r0, #1
 8000ad4:	2000      	movcs	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmpun>:
 8000adc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae4:	d102      	bne.n	8000aec <__aeabi_dcmpun+0x10>
 8000ae6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aea:	d10a      	bne.n	8000b02 <__aeabi_dcmpun+0x26>
 8000aec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af4:	d102      	bne.n	8000afc <__aeabi_dcmpun+0x20>
 8000af6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afa:	d102      	bne.n	8000b02 <__aeabi_dcmpun+0x26>
 8000afc:	f04f 0000 	mov.w	r0, #0
 8000b00:	4770      	bx	lr
 8000b02:	f04f 0001 	mov.w	r0, #1
 8000b06:	4770      	bx	lr

08000b08 <__aeabi_d2iz>:
 8000b08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b0c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b10:	d215      	bcs.n	8000b3e <__aeabi_d2iz+0x36>
 8000b12:	d511      	bpl.n	8000b38 <__aeabi_d2iz+0x30>
 8000b14:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b18:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b1c:	d912      	bls.n	8000b44 <__aeabi_d2iz+0x3c>
 8000b1e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b22:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b26:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b2a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b2e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b32:	bf18      	it	ne
 8000b34:	4240      	negne	r0, r0
 8000b36:	4770      	bx	lr
 8000b38:	f04f 0000 	mov.w	r0, #0
 8000b3c:	4770      	bx	lr
 8000b3e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b42:	d105      	bne.n	8000b50 <__aeabi_d2iz+0x48>
 8000b44:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b48:	bf08      	it	eq
 8000b4a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b4e:	4770      	bx	lr
 8000b50:	f04f 0000 	mov.w	r0, #0
 8000b54:	4770      	bx	lr
 8000b56:	bf00      	nop

08000b58 <__aeabi_d2f>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b60:	bf24      	itt	cs
 8000b62:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b66:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b6a:	d90d      	bls.n	8000b88 <__aeabi_d2f+0x30>
 8000b6c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b70:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b74:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b78:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b7c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b80:	bf08      	it	eq
 8000b82:	f020 0001 	biceq.w	r0, r0, #1
 8000b86:	4770      	bx	lr
 8000b88:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b8c:	d121      	bne.n	8000bd2 <__aeabi_d2f+0x7a>
 8000b8e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b92:	bfbc      	itt	lt
 8000b94:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	4770      	bxlt	lr
 8000b9a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b9e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ba2:	f1c2 0218 	rsb	r2, r2, #24
 8000ba6:	f1c2 0c20 	rsb	ip, r2, #32
 8000baa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bae:	fa20 f002 	lsr.w	r0, r0, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	f040 0001 	orrne.w	r0, r0, #1
 8000bb8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bbc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000bc0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bc4:	ea40 000c 	orr.w	r0, r0, ip
 8000bc8:	fa23 f302 	lsr.w	r3, r3, r2
 8000bcc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bd0:	e7cc      	b.n	8000b6c <__aeabi_d2f+0x14>
 8000bd2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bd6:	d107      	bne.n	8000be8 <__aeabi_d2f+0x90>
 8000bd8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bdc:	bf1e      	ittt	ne
 8000bde:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000be2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000be6:	4770      	bxne	lr
 8000be8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000bec:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000bf0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <LL_FLASH_GetUDN>:
  * @note   The 64-bit UID64 may be used by Firmware to derive BLE 48-bit Device Address EUI-48 or
  *         802.15.4 64-bit Device Address EUI-64.
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_FLASH_GetUDN(void)
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_REG(*((uint32_t *)UID64_BASE)));
 8000bfc:	4b03      	ldr	r3, [pc, #12]	; (8000c0c <LL_FLASH_GetUDN+0x14>)
 8000bfe:	681b      	ldr	r3, [r3, #0]
}
 8000c00:	4618      	mov	r0, r3
 8000c02:	46bd      	mov	sp, r7
 8000c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c08:	4770      	bx	lr
 8000c0a:	bf00      	nop
 8000c0c:	1fff7580 	.word	0x1fff7580

08000c10 <LL_FLASH_GetDeviceID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the device ID is 0x26
  * @retval Values between Min_Data=0x00 and Max_Data=0xFF (ex: Device ID is 0x26 fo STM32WB55x)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetDeviceID(void)
{
 8000c10:	b480      	push	{r7}
 8000c12:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_REG(*((uint32_t *)UID64_BASE + 1U))) & 0x000000FFU);
 8000c14:	4b03      	ldr	r3, [pc, #12]	; (8000c24 <LL_FLASH_GetDeviceID+0x14>)
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	b2db      	uxtb	r3, r3
}
 8000c1a:	4618      	mov	r0, r3
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c22:	4770      	bx	lr
 8000c24:	1fff7584 	.word	0x1fff7584

08000c28 <LL_FLASH_GetSTCompanyID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the ST Compagny ID is 0x0080E1
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFFFF (ex: ST Compagny ID is 0x0080E1)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetSTCompanyID(void)
{
 8000c28:	b480      	push	{r7}
 8000c2a:	af00      	add	r7, sp, #0
  return (uint32_t)(((READ_REG(*((uint32_t *)UID64_BASE + 1U))) >> 8U ) & 0x00FFFFFFU);
 8000c2c:	4b03      	ldr	r3, [pc, #12]	; (8000c3c <LL_FLASH_GetSTCompanyID+0x14>)
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	0a1b      	lsrs	r3, r3, #8
}
 8000c32:	4618      	mov	r0, r3
 8000c34:	46bd      	mov	sp, r7
 8000c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3a:	4770      	bx	lr
 8000c3c:	1fff7584 	.word	0x1fff7584

08000c40 <APP_BLE_Init>:

/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void APP_BLE_Init( void )
{
 8000c40:	b5b0      	push	{r4, r5, r7, lr}
 8000c42:	b08c      	sub	sp, #48	; 0x30
 8000c44:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APP_BLE_Init_1 */

/* USER CODE END APP_BLE_Init_1 */
  SHCI_C2_Ble_Init_Cmd_Packet_t ble_init_cmd_packet =
 8000c46:	4b2b      	ldr	r3, [pc, #172]	; (8000cf4 <APP_BLE_Init+0xb4>)
 8000c48:	463c      	mov	r4, r7
 8000c4a:	461d      	mov	r5, r3
 8000c4c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000c4e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000c50:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000c52:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000c54:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000c58:	c407      	stmia	r4!, {r0, r1, r2}
 8000c5a:	7023      	strb	r3, [r4, #0]
  };

  /**
   * Initialize Ble Transport Layer
   */
  Ble_Tl_Init( );
 8000c5c:	f000 f9fe 	bl	800105c <Ble_Tl_Init>

  /**
   * Do not allow standby in the application
   */
  UTIL_LPM_SetOffMode(1 << CFG_LPM_APP_BLE, UTIL_LPM_DISABLE);
 8000c60:	2101      	movs	r1, #1
 8000c62:	2002      	movs	r0, #2
 8000c64:	f011 fdf8 	bl	8012858 <UTIL_LPM_SetOffMode>

  /**
   * Register the hci transport layer to handle BLE User Asynchronous Events
   */
  HciUserEvtProcessId = osThreadNew(HciUserEvtProcess, NULL, &HciUserEvtProcess_attr);
 8000c68:	4a23      	ldr	r2, [pc, #140]	; (8000cf8 <APP_BLE_Init+0xb8>)
 8000c6a:	2100      	movs	r1, #0
 8000c6c:	4823      	ldr	r0, [pc, #140]	; (8000cfc <APP_BLE_Init+0xbc>)
 8000c6e:	f00d fc75 	bl	800e55c <osThreadNew>
 8000c72:	4602      	mov	r2, r0
 8000c74:	4b22      	ldr	r3, [pc, #136]	; (8000d00 <APP_BLE_Init+0xc0>)
 8000c76:	601a      	str	r2, [r3, #0]

  /**
   * Starts the BLE Stack on CPU2
   */
  if (SHCI_C2_BLE_Init( &ble_init_cmd_packet ) != SHCI_Success)
 8000c78:	463b      	mov	r3, r7
 8000c7a:	4618      	mov	r0, r3
 8000c7c:	f00c f802 	bl	800cc84 <SHCI_C2_BLE_Init>
 8000c80:	4603      	mov	r3, r0
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d001      	beq.n	8000c8a <APP_BLE_Init+0x4a>
  {
    Error_Handler();
 8000c86:	f004 fcdb 	bl	8005640 <Error_Handler>
  }

  /**
   * Initialization of HCI & GATT & GAP layer
   */
  Ble_Hci_Gap_Gatt_Init();
 8000c8a:	f000 fa0f 	bl	80010ac <Ble_Hci_Gap_Gatt_Init>

  /**
   * Initialization of the BLE Services
   */
  SVCCTL_Init();
 8000c8e:	f00a ffa5 	bl	800bbdc <SVCCTL_Init>

  /**
   * Initialization of the BLE App Context
   */
  BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 8000c92:	4b1c      	ldr	r3, [pc, #112]	; (8000d04 <APP_BLE_Init+0xc4>)
 8000c94:	2200      	movs	r2, #0
 8000c96:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
  BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0xFFFF;
 8000c9a:	4b1a      	ldr	r3, [pc, #104]	; (8000d04 <APP_BLE_Init+0xc4>)
 8000c9c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000ca0:	82da      	strh	r2, [r3, #22]
  /**
   * From here, all initialization are BLE application specific
   */
  AdvUpdateProcessId = osThreadNew(AdvUpdateProcess, NULL, &AdvUpdateProcess_attr);
 8000ca2:	4a19      	ldr	r2, [pc, #100]	; (8000d08 <APP_BLE_Init+0xc8>)
 8000ca4:	2100      	movs	r1, #0
 8000ca6:	4819      	ldr	r0, [pc, #100]	; (8000d0c <APP_BLE_Init+0xcc>)
 8000ca8:	f00d fc58 	bl	800e55c <osThreadNew>
 8000cac:	4602      	mov	r2, r0
 8000cae:	4b18      	ldr	r3, [pc, #96]	; (8000d10 <APP_BLE_Init+0xd0>)
 8000cb0:	601a      	str	r2, [r3, #0]

  /**
   * Initialize HRS Application
   */
  //P2P FIX HRSAPP_Init();
  index_con_int = 0;
 8000cb2:	4b18      	ldr	r3, [pc, #96]	; (8000d14 <APP_BLE_Init+0xd4>)
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	701a      	strb	r2, [r3, #0]
  mutex = 1;
 8000cb8:	4b17      	ldr	r3, [pc, #92]	; (8000d18 <APP_BLE_Init+0xd8>)
 8000cba:	2201      	movs	r2, #1
 8000cbc:	701a      	strb	r2, [r3, #0]
  P2PS_APP_Init();
 8000cbe:	f000 fca3 	bl	8001608 <P2PS_APP_Init>

  /**
   * Create timer to handle the connection state machine
   */

  HW_TS_Create(CFG_TIM_PROC_ID_ISR, &(BleApplicationContext.Advertising_mgr_timer_Id), hw_ts_SingleShot, Adv_Mgr);
 8000cc2:	4b16      	ldr	r3, [pc, #88]	; (8000d1c <APP_BLE_Init+0xdc>)
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	4916      	ldr	r1, [pc, #88]	; (8000d20 <APP_BLE_Init+0xe0>)
 8000cc8:	2000      	movs	r0, #0
 8000cca:	f002 fbcf 	bl	800346c <HW_TS_Create>
  /**
   * Make device discoverable
   */

  //P2P FIX lines below
  BleApplicationContext.BleApplicationContext_legacy.advtServUUID[0] = NULL; //AD_TYPE_16_BIT_SERV_UUID;
 8000cce:	4b0d      	ldr	r3, [pc, #52]	; (8000d04 <APP_BLE_Init+0xc4>)
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	765a      	strb	r2, [r3, #25]
  BleApplicationContext.BleApplicationContext_legacy.advtServUUIDlen = 0;//1;
 8000cd4:	4b0b      	ldr	r3, [pc, #44]	; (8000d04 <APP_BLE_Init+0xc4>)
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	761a      	strb	r2, [r3, #24]
  //P2P FIX Add_Advertisment_Service_UUID(HEART_RATE_SERVICE_UUID);
  /* Initialize intervals for reconnexion without intervals update */
  AdvIntervalMin = CFG_FAST_CONN_ADV_INTERVAL_MIN;
 8000cda:	4b12      	ldr	r3, [pc, #72]	; (8000d24 <APP_BLE_Init+0xe4>)
 8000cdc:	2280      	movs	r2, #128	; 0x80
 8000cde:	801a      	strh	r2, [r3, #0]
  AdvIntervalMax = CFG_FAST_CONN_ADV_INTERVAL_MAX;
 8000ce0:	4b11      	ldr	r3, [pc, #68]	; (8000d28 <APP_BLE_Init+0xe8>)
 8000ce2:	22a0      	movs	r2, #160	; 0xa0
 8000ce4:	801a      	strh	r2, [r3, #0]

  /**
  * Start to Advertise to be connected by Collector
   */
   Adv_Request(APP_BLE_FAST_ADV);
 8000ce6:	2001      	movs	r0, #1
 8000ce8:	f000 fabc 	bl	8001264 <Adv_Request>

/* USER CODE BEGIN APP_BLE_Init_2 */

/* USER CODE END APP_BLE_Init_2 */
  return;
 8000cec:	bf00      	nop
}
 8000cee:	3730      	adds	r7, #48	; 0x30
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	bdb0      	pop	{r4, r5, r7, pc}
 8000cf4:	08016584 	.word	0x08016584
 8000cf8:	08016f68 	.word	0x08016f68
 8000cfc:	08001479 	.word	0x08001479
 8000d00:	20007788 	.word	0x20007788
 8000d04:	20000210 	.word	0x20000210
 8000d08:	08016f44 	.word	0x08016f44
 8000d0c:	08001451 	.word	0x08001451
 8000d10:	200078b4 	.word	0x200078b4
 8000d14:	20007795 	.word	0x20007795
 8000d18:	20007794 	.word	0x20007794
 8000d1c:	08001439 	.word	0x08001439
 8000d20:	20000291 	.word	0x20000291
 8000d24:	20000294 	.word	0x20000294
 8000d28:	20000296 	.word	0x20000296

08000d2c <SVCCTL_App_Notification>:

SVCCTL_UserEvtFlowStatus_t SVCCTL_App_Notification( void *pckt )
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b08c      	sub	sp, #48	; 0x30
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	6078      	str	r0, [r7, #4]
  hci_event_pckt *event_pckt;
  evt_le_meta_event *meta_evt;
  evt_blue_aci *blue_evt;
  hci_le_phy_update_complete_event_rp0 *evt_le_phy_update_complete;
  uint8_t TX_PHY, RX_PHY;
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 8000d34:	2342      	movs	r3, #66	; 0x42
 8000d36:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) pckt)->data;
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	3301      	adds	r3, #1
 8000d3e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* USER CODE BEGIN SVCCTL_App_Notification */

  /* USER CODE END SVCCTL_App_Notification */

  switch (event_pckt->evt)
 8000d40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d42:	781b      	ldrb	r3, [r3, #0]
 8000d44:	2b3e      	cmp	r3, #62	; 0x3e
 8000d46:	d028      	beq.n	8000d9a <SVCCTL_App_Notification+0x6e>
 8000d48:	2bff      	cmp	r3, #255	; 0xff
 8000d4a:	f000 80a5 	beq.w	8000e98 <SVCCTL_App_Notification+0x16c>
 8000d4e:	2b05      	cmp	r3, #5
 8000d50:	d000      	beq.n	8000d54 <SVCCTL_App_Notification+0x28>

      default:
      /* USER CODE BEGIN ECODE_DEFAULT*/

      /* USER CODE END ECODE_DEFAULT*/
        break;
 8000d52:	e145      	b.n	8000fe0 <SVCCTL_App_Notification+0x2b4>
      disconnection_complete_event = (hci_disconnection_complete_event_rp0 *) event_pckt->data;
 8000d54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d56:	3302      	adds	r3, #2
 8000d58:	613b      	str	r3, [r7, #16]
      if (disconnection_complete_event->Connection_Handle == BleApplicationContext.BleApplicationContext_legacy.connectionHandle)
 8000d5a:	693b      	ldr	r3, [r7, #16]
 8000d5c:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8000d60:	b29a      	uxth	r2, r3
 8000d62:	4ba2      	ldr	r3, [pc, #648]	; (8000fec <SVCCTL_App_Notification+0x2c0>)
 8000d64:	8adb      	ldrh	r3, [r3, #22]
 8000d66:	429a      	cmp	r2, r3
 8000d68:	d109      	bne.n	8000d7e <SVCCTL_App_Notification+0x52>
        BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0;
 8000d6a:	4ba0      	ldr	r3, [pc, #640]	; (8000fec <SVCCTL_App_Notification+0x2c0>)
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	82da      	strh	r2, [r3, #22]
        BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 8000d70:	4b9e      	ldr	r3, [pc, #632]	; (8000fec <SVCCTL_App_Notification+0x2c0>)
 8000d72:	2200      	movs	r2, #0
 8000d74:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
        APP_DBG_MSG("\r\n\r** DISCONNECTION EVENT WITH CLIENT \n");
 8000d78:	489d      	ldr	r0, [pc, #628]	; (8000ff0 <SVCCTL_App_Notification+0x2c4>)
 8000d7a:	f012 faa9 	bl	80132d0 <puts>
      Adv_Request(APP_BLE_FAST_ADV);
 8000d7e:	2001      	movs	r0, #1
 8000d80:	f000 fa70 	bl	8001264 <Adv_Request>
      handleNotification.P2P_Evt_Opcode = PEER_DISCON_HANDLE_EVT;
 8000d84:	4b9b      	ldr	r3, [pc, #620]	; (8000ff4 <SVCCTL_App_Notification+0x2c8>)
 8000d86:	2201      	movs	r2, #1
 8000d88:	701a      	strb	r2, [r3, #0]
      handleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 8000d8a:	4b98      	ldr	r3, [pc, #608]	; (8000fec <SVCCTL_App_Notification+0x2c0>)
 8000d8c:	8ada      	ldrh	r2, [r3, #22]
 8000d8e:	4b99      	ldr	r3, [pc, #612]	; (8000ff4 <SVCCTL_App_Notification+0x2c8>)
 8000d90:	805a      	strh	r2, [r3, #2]
      P2PS_APP_Notification(&handleNotification);
 8000d92:	4898      	ldr	r0, [pc, #608]	; (8000ff4 <SVCCTL_App_Notification+0x2c8>)
 8000d94:	f000 fc24 	bl	80015e0 <P2PS_APP_Notification>
    break; /* EVT_DISCONN_COMPLETE */
 8000d98:	e122      	b.n	8000fe0 <SVCCTL_App_Notification+0x2b4>
      meta_evt = (evt_le_meta_event*) event_pckt->data;
 8000d9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d9c:	3302      	adds	r3, #2
 8000d9e:	61fb      	str	r3, [r7, #28]
      switch (meta_evt->subevent)
 8000da0:	69fb      	ldr	r3, [r7, #28]
 8000da2:	781b      	ldrb	r3, [r3, #0]
 8000da4:	2b03      	cmp	r3, #3
 8000da6:	d004      	beq.n	8000db2 <SVCCTL_App_Notification+0x86>
 8000da8:	2b0c      	cmp	r3, #12
 8000daa:	d006      	beq.n	8000dba <SVCCTL_App_Notification+0x8e>
 8000dac:	2b01      	cmp	r3, #1
 8000dae:	d042      	beq.n	8000e36 <SVCCTL_App_Notification+0x10a>
          break;
 8000db0:	e071      	b.n	8000e96 <SVCCTL_App_Notification+0x16a>
          APP_DBG_MSG("\r\n\r** CONNECTION UPDATE EVENT WITH CLIENT \n");
 8000db2:	4891      	ldr	r0, [pc, #580]	; (8000ff8 <SVCCTL_App_Notification+0x2cc>)
 8000db4:	f012 fa8c 	bl	80132d0 <puts>
          break;
 8000db8:	e06d      	b.n	8000e96 <SVCCTL_App_Notification+0x16a>
          APP_DBG_MSG("EVT_UPDATE_PHY_COMPLETE \n");
 8000dba:	4890      	ldr	r0, [pc, #576]	; (8000ffc <SVCCTL_App_Notification+0x2d0>)
 8000dbc:	f012 fa88 	bl	80132d0 <puts>
          evt_le_phy_update_complete = (hci_le_phy_update_complete_event_rp0*)meta_evt->data;
 8000dc0:	69fb      	ldr	r3, [r7, #28]
 8000dc2:	3301      	adds	r3, #1
 8000dc4:	61bb      	str	r3, [r7, #24]
          if (evt_le_phy_update_complete->Status == 0)
 8000dc6:	69bb      	ldr	r3, [r7, #24]
 8000dc8:	781b      	ldrb	r3, [r3, #0]
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d103      	bne.n	8000dd6 <SVCCTL_App_Notification+0xaa>
            APP_DBG_MSG("EVT_UPDATE_PHY_COMPLETE, status ok \n");
 8000dce:	488c      	ldr	r0, [pc, #560]	; (8001000 <SVCCTL_App_Notification+0x2d4>)
 8000dd0:	f012 fa7e 	bl	80132d0 <puts>
 8000dd4:	e002      	b.n	8000ddc <SVCCTL_App_Notification+0xb0>
            APP_DBG_MSG("EVT_UPDATE_PHY_COMPLETE, status nok \n");
 8000dd6:	488b      	ldr	r0, [pc, #556]	; (8001004 <SVCCTL_App_Notification+0x2d8>)
 8000dd8:	f012 fa7a 	bl	80132d0 <puts>
          ret = hci_le_read_phy(BleApplicationContext.BleApplicationContext_legacy.connectionHandle,&TX_PHY,&RX_PHY);
 8000ddc:	4b83      	ldr	r3, [pc, #524]	; (8000fec <SVCCTL_App_Notification+0x2c0>)
 8000dde:	8adb      	ldrh	r3, [r3, #22]
 8000de0:	f107 020e 	add.w	r2, r7, #14
 8000de4:	f107 010f 	add.w	r1, r7, #15
 8000de8:	4618      	mov	r0, r3
 8000dea:	f00b fe5c 	bl	800caa6 <hci_le_read_phy>
 8000dee:	4603      	mov	r3, r0
 8000df0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
          if (ret == BLE_STATUS_SUCCESS)
 8000df4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d118      	bne.n	8000e2e <SVCCTL_App_Notification+0x102>
            APP_DBG_MSG("Read_PHY success \n");
 8000dfc:	4882      	ldr	r0, [pc, #520]	; (8001008 <SVCCTL_App_Notification+0x2dc>)
 8000dfe:	f012 fa67 	bl	80132d0 <puts>
            if ((TX_PHY == TX_2M) && (RX_PHY == RX_2M))
 8000e02:	7bfb      	ldrb	r3, [r7, #15]
 8000e04:	2b02      	cmp	r3, #2
 8000e06:	d10a      	bne.n	8000e1e <SVCCTL_App_Notification+0xf2>
 8000e08:	7bbb      	ldrb	r3, [r7, #14]
 8000e0a:	2b02      	cmp	r3, #2
 8000e0c:	d107      	bne.n	8000e1e <SVCCTL_App_Notification+0xf2>
              APP_DBG_MSG("PHY Param  TX= %d, RX= %d \n", TX_PHY, RX_PHY);
 8000e0e:	7bfb      	ldrb	r3, [r7, #15]
 8000e10:	4619      	mov	r1, r3
 8000e12:	7bbb      	ldrb	r3, [r7, #14]
 8000e14:	461a      	mov	r2, r3
 8000e16:	487d      	ldr	r0, [pc, #500]	; (800100c <SVCCTL_App_Notification+0x2e0>)
 8000e18:	f012 f9e6 	bl	80131e8 <iprintf>
          break;
 8000e1c:	e03b      	b.n	8000e96 <SVCCTL_App_Notification+0x16a>
              APP_DBG_MSG("PHY Param  TX= %d, RX= %d \n", TX_PHY, RX_PHY);
 8000e1e:	7bfb      	ldrb	r3, [r7, #15]
 8000e20:	4619      	mov	r1, r3
 8000e22:	7bbb      	ldrb	r3, [r7, #14]
 8000e24:	461a      	mov	r2, r3
 8000e26:	4879      	ldr	r0, [pc, #484]	; (800100c <SVCCTL_App_Notification+0x2e0>)
 8000e28:	f012 f9de 	bl	80131e8 <iprintf>
          break;
 8000e2c:	e033      	b.n	8000e96 <SVCCTL_App_Notification+0x16a>
            APP_DBG_MSG("Read conf not succeess \n");
 8000e2e:	4878      	ldr	r0, [pc, #480]	; (8001010 <SVCCTL_App_Notification+0x2e4>)
 8000e30:	f012 fa4e 	bl	80132d0 <puts>
          break;
 8000e34:	e02f      	b.n	8000e96 <SVCCTL_App_Notification+0x16a>
          connection_complete_event = (hci_le_connection_complete_event_rp0 *) meta_evt->data;
 8000e36:	69fb      	ldr	r3, [r7, #28]
 8000e38:	3301      	adds	r3, #1
 8000e3a:	617b      	str	r3, [r7, #20]
          HW_TS_Stop(BleApplicationContext.Advertising_mgr_timer_Id);
 8000e3c:	4b6b      	ldr	r3, [pc, #428]	; (8000fec <SVCCTL_App_Notification+0x2c0>)
 8000e3e:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8000e42:	4618      	mov	r0, r3
 8000e44:	f002 fb88 	bl	8003558 <HW_TS_Stop>
          APP_DBG_MSG("EVT_LE_CONN_COMPLETE for connection handle 0x%x\n", connection_complete_event->Connection_Handle);
 8000e48:	697b      	ldr	r3, [r7, #20]
 8000e4a:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8000e4e:	b29b      	uxth	r3, r3
 8000e50:	4619      	mov	r1, r3
 8000e52:	4870      	ldr	r0, [pc, #448]	; (8001014 <SVCCTL_App_Notification+0x2e8>)
 8000e54:	f012 f9c8 	bl	80131e8 <iprintf>
          if (BleApplicationContext.Device_Connection_Status == APP_BLE_LP_CONNECTING)
 8000e58:	4b64      	ldr	r3, [pc, #400]	; (8000fec <SVCCTL_App_Notification+0x2c0>)
 8000e5a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8000e5e:	2b04      	cmp	r3, #4
 8000e60:	d104      	bne.n	8000e6c <SVCCTL_App_Notification+0x140>
            BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_CLIENT;
 8000e62:	4b62      	ldr	r3, [pc, #392]	; (8000fec <SVCCTL_App_Notification+0x2c0>)
 8000e64:	2206      	movs	r2, #6
 8000e66:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
 8000e6a:	e003      	b.n	8000e74 <SVCCTL_App_Notification+0x148>
            BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_SERVER;
 8000e6c:	4b5f      	ldr	r3, [pc, #380]	; (8000fec <SVCCTL_App_Notification+0x2c0>)
 8000e6e:	2205      	movs	r2, #5
 8000e70:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
          BleApplicationContext.BleApplicationContext_legacy.connectionHandle = connection_complete_event->Connection_Handle;
 8000e74:	697b      	ldr	r3, [r7, #20]
 8000e76:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8000e7a:	b29a      	uxth	r2, r3
 8000e7c:	4b5b      	ldr	r3, [pc, #364]	; (8000fec <SVCCTL_App_Notification+0x2c0>)
 8000e7e:	82da      	strh	r2, [r3, #22]
          handleNotification.P2P_Evt_Opcode = PEER_CONN_HANDLE_EVT;
 8000e80:	4b5c      	ldr	r3, [pc, #368]	; (8000ff4 <SVCCTL_App_Notification+0x2c8>)
 8000e82:	2200      	movs	r2, #0
 8000e84:	701a      	strb	r2, [r3, #0]
          handleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 8000e86:	4b59      	ldr	r3, [pc, #356]	; (8000fec <SVCCTL_App_Notification+0x2c0>)
 8000e88:	8ada      	ldrh	r2, [r3, #22]
 8000e8a:	4b5a      	ldr	r3, [pc, #360]	; (8000ff4 <SVCCTL_App_Notification+0x2c8>)
 8000e8c:	805a      	strh	r2, [r3, #2]
          P2PS_APP_Notification(&handleNotification);
 8000e8e:	4859      	ldr	r0, [pc, #356]	; (8000ff4 <SVCCTL_App_Notification+0x2c8>)
 8000e90:	f000 fba6 	bl	80015e0 <P2PS_APP_Notification>
        break; /* HCI_EVT_LE_CONN_COMPLETE */
 8000e94:	bf00      	nop
    break; /* HCI_EVT_LE_META_EVENT */
 8000e96:	e0a3      	b.n	8000fe0 <SVCCTL_App_Notification+0x2b4>
      blue_evt = (evt_blue_aci*) event_pckt->data;
 8000e98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e9a:	3302      	adds	r3, #2
 8000e9c:	627b      	str	r3, [r7, #36]	; 0x24
      switch (blue_evt->ecode)
 8000e9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ea0:	881b      	ldrh	r3, [r3, #0]
 8000ea2:	b29b      	uxth	r3, r3
 8000ea4:	f240 4205 	movw	r2, #1029	; 0x405
 8000ea8:	4293      	cmp	r3, r2
 8000eaa:	d04a      	beq.n	8000f42 <SVCCTL_App_Notification+0x216>
 8000eac:	f240 4205 	movw	r2, #1029	; 0x405
 8000eb0:	4293      	cmp	r3, r2
 8000eb2:	dc18      	bgt.n	8000ee6 <SVCCTL_App_Notification+0x1ba>
 8000eb4:	f240 4202 	movw	r2, #1026	; 0x402
 8000eb8:	4293      	cmp	r3, r2
 8000eba:	d033      	beq.n	8000f24 <SVCCTL_App_Notification+0x1f8>
 8000ebc:	f240 4202 	movw	r2, #1026	; 0x402
 8000ec0:	4293      	cmp	r3, r2
 8000ec2:	dc07      	bgt.n	8000ed4 <SVCCTL_App_Notification+0x1a8>
 8000ec4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000ec8:	d028      	beq.n	8000f1c <SVCCTL_App_Notification+0x1f0>
 8000eca:	f240 4201 	movw	r2, #1025	; 0x401
 8000ece:	4293      	cmp	r3, r2
 8000ed0:	d069      	beq.n	8000fa6 <SVCCTL_App_Notification+0x27a>
      break; /* EVT_VENDOR */
 8000ed2:	e084      	b.n	8000fde <SVCCTL_App_Notification+0x2b2>
      switch (blue_evt->ecode)
 8000ed4:	f240 4203 	movw	r2, #1027	; 0x403
 8000ed8:	4293      	cmp	r3, r2
 8000eda:	d02a      	beq.n	8000f32 <SVCCTL_App_Notification+0x206>
 8000edc:	f240 4204 	movw	r2, #1028	; 0x404
 8000ee0:	4293      	cmp	r3, r2
 8000ee2:	d02a      	beq.n	8000f3a <SVCCTL_App_Notification+0x20e>
      break; /* EVT_VENDOR */
 8000ee4:	e07b      	b.n	8000fde <SVCCTL_App_Notification+0x2b2>
      switch (blue_evt->ecode)
 8000ee6:	f5b3 6f81 	cmp.w	r3, #1032	; 0x408
 8000eea:	d03a      	beq.n	8000f62 <SVCCTL_App_Notification+0x236>
 8000eec:	f5b3 6f81 	cmp.w	r3, #1032	; 0x408
 8000ef0:	dc08      	bgt.n	8000f04 <SVCCTL_App_Notification+0x1d8>
 8000ef2:	f240 4206 	movw	r2, #1030	; 0x406
 8000ef6:	4293      	cmp	r3, r2
 8000ef8:	d02f      	beq.n	8000f5a <SVCCTL_App_Notification+0x22e>
 8000efa:	f240 4207 	movw	r2, #1031	; 0x407
 8000efe:	4293      	cmp	r3, r2
 8000f00:	d069      	beq.n	8000fd6 <SVCCTL_App_Notification+0x2aa>
      break; /* EVT_VENDOR */
 8000f02:	e06c      	b.n	8000fde <SVCCTL_App_Notification+0x2b2>
      switch (blue_evt->ecode)
 8000f04:	f240 420a 	movw	r2, #1034	; 0x40a
 8000f08:	4293      	cmp	r3, r2
 8000f0a:	d02e      	beq.n	8000f6a <SVCCTL_App_Notification+0x23e>
 8000f0c:	f240 420a 	movw	r2, #1034	; 0x40a
 8000f10:	4293      	cmp	r3, r2
 8000f12:	db2e      	blt.n	8000f72 <SVCCTL_App_Notification+0x246>
 8000f14:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000f18:	d05a      	beq.n	8000fd0 <SVCCTL_App_Notification+0x2a4>
      break; /* EVT_VENDOR */
 8000f1a:	e060      	b.n	8000fde <SVCCTL_App_Notification+0x2b2>
        APP_DBG_MSG("\r\n\r** EVT_BLUE_GAP_LIMITED_DISCOVERABLE \n");
 8000f1c:	483e      	ldr	r0, [pc, #248]	; (8001018 <SVCCTL_App_Notification+0x2ec>)
 8000f1e:	f012 f9d7 	bl	80132d0 <puts>
          break; /* EVT_BLUE_GAP_LIMITED_DISCOVERABLE */
 8000f22:	e05c      	b.n	8000fde <SVCCTL_App_Notification+0x2b2>
        APP_DBG_MSG("\r\n\r** EVT_BLUE_GAP_PASS_KEY_REQUEST \n");
 8000f24:	483d      	ldr	r0, [pc, #244]	; (800101c <SVCCTL_App_Notification+0x2f0>)
 8000f26:	f012 f9d3 	bl	80132d0 <puts>
        APP_DBG_MSG("\r\n\r** aci_gap_pass_key_resp \n");
 8000f2a:	483d      	ldr	r0, [pc, #244]	; (8001020 <SVCCTL_App_Notification+0x2f4>)
 8000f2c:	f012 f9d0 	bl	80132d0 <puts>
          break; /* EVT_BLUE_GAP_PASS_KEY_REQUEST */
 8000f30:	e055      	b.n	8000fde <SVCCTL_App_Notification+0x2b2>
        APP_DBG_MSG("\r\n\r** EVT_BLUE_GAP_AUTHORIZATION_REQUEST \n");
 8000f32:	483c      	ldr	r0, [pc, #240]	; (8001024 <SVCCTL_App_Notification+0x2f8>)
 8000f34:	f012 f9cc 	bl	80132d0 <puts>
          break; /* EVT_BLUE_GAP_AUTHORIZATION_REQUEST */
 8000f38:	e051      	b.n	8000fde <SVCCTL_App_Notification+0x2b2>
        APP_DBG_MSG("\r\n\r** EVT_BLUE_GAP_SLAVE_SECURITY_INITIATED \n");
 8000f3a:	483b      	ldr	r0, [pc, #236]	; (8001028 <SVCCTL_App_Notification+0x2fc>)
 8000f3c:	f012 f9c8 	bl	80132d0 <puts>
          break; /* EVT_BLUE_GAP_SLAVE_SECURITY_INITIATED */
 8000f40:	e04d      	b.n	8000fde <SVCCTL_App_Notification+0x2b2>
        APP_DBG_MSG("\r\n\r** EVT_BLUE_GAP_BOND_LOST \n");
 8000f42:	483a      	ldr	r0, [pc, #232]	; (800102c <SVCCTL_App_Notification+0x300>)
 8000f44:	f012 f9c4 	bl	80132d0 <puts>
          aci_gap_allow_rebond(BleApplicationContext.BleApplicationContext_legacy.connectionHandle);
 8000f48:	4b28      	ldr	r3, [pc, #160]	; (8000fec <SVCCTL_App_Notification+0x2c0>)
 8000f4a:	8adb      	ldrh	r3, [r3, #22]
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	f00b f9e0 	bl	800c312 <aci_gap_allow_rebond>
        APP_DBG_MSG("\r\n\r** Send allow rebond \n");
 8000f52:	4837      	ldr	r0, [pc, #220]	; (8001030 <SVCCTL_App_Notification+0x304>)
 8000f54:	f012 f9bc 	bl	80132d0 <puts>
          break; /* EVT_BLUE_GAP_BOND_LOST */
 8000f58:	e041      	b.n	8000fde <SVCCTL_App_Notification+0x2b2>
        APP_DBG_MSG("\r\n\r** EVT_BLUE_GAP_DEVICE_FOUND \n");
 8000f5a:	4836      	ldr	r0, [pc, #216]	; (8001034 <SVCCTL_App_Notification+0x308>)
 8000f5c:	f012 f9b8 	bl	80132d0 <puts>
          break; /* EVT_BLUE_GAP_DEVICE_FOUND */
 8000f60:	e03d      	b.n	8000fde <SVCCTL_App_Notification+0x2b2>
         APP_DBG_MSG("\r\n\r** EVT_BLUE_GAP_DEVICE_FOUND \n");
 8000f62:	4834      	ldr	r0, [pc, #208]	; (8001034 <SVCCTL_App_Notification+0x308>)
 8000f64:	f012 f9b4 	bl	80132d0 <puts>
          break; /* EVT_BLUE_GAP_DEVICE_FOUND */
 8000f68:	e039      	b.n	8000fde <SVCCTL_App_Notification+0x2b2>
         APP_DBG_MSG("\r\n\r** EVT_BLUE_GAP_KEYPRESS_NOTIFICATION \n");
 8000f6a:	4833      	ldr	r0, [pc, #204]	; (8001038 <SVCCTL_App_Notification+0x30c>)
 8000f6c:	f012 f9b0 	bl	80132d0 <puts>
          break; /* EVT_BLUE_GAP_KEY_PRESS_NOTIFICATION */    
 8000f70:	e035      	b.n	8000fde <SVCCTL_App_Notification+0x2b2>
                      ((aci_gap_numeric_comparison_value_event_rp0 *)(blue_evt->data))->Numeric_Value);
 8000f72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f74:	3302      	adds	r3, #2
          APP_DBG_MSG("numeric_value = %ld\n",
 8000f76:	f8d3 3002 	ldr.w	r3, [r3, #2]
 8000f7a:	4619      	mov	r1, r3
 8000f7c:	482f      	ldr	r0, [pc, #188]	; (800103c <SVCCTL_App_Notification+0x310>)
 8000f7e:	f012 f933 	bl	80131e8 <iprintf>
                      ((aci_gap_numeric_comparison_value_event_rp0 *)(blue_evt->data))->Numeric_Value);
 8000f82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f84:	3302      	adds	r3, #2
          APP_DBG_MSG("Hex_value = %lx\n",
 8000f86:	f8d3 3002 	ldr.w	r3, [r3, #2]
 8000f8a:	4619      	mov	r1, r3
 8000f8c:	482c      	ldr	r0, [pc, #176]	; (8001040 <SVCCTL_App_Notification+0x314>)
 8000f8e:	f012 f92b 	bl	80131e8 <iprintf>
          aci_gap_numeric_comparison_value_confirm_yesno(BleApplicationContext.BleApplicationContext_legacy.connectionHandle, 1); /* CONFIRM_YES = 1 */
 8000f92:	4b16      	ldr	r3, [pc, #88]	; (8000fec <SVCCTL_App_Notification+0x2c0>)
 8000f94:	8adb      	ldrh	r3, [r3, #22]
 8000f96:	2101      	movs	r1, #1
 8000f98:	4618      	mov	r0, r3
 8000f9a:	f00b fa04 	bl	800c3a6 <aci_gap_numeric_comparison_value_confirm_yesno>
          APP_DBG_MSG("\r\n\r** aci_gap_numeric_comparison_value_confirm_yesno-->YES \n");
 8000f9e:	4829      	ldr	r0, [pc, #164]	; (8001044 <SVCCTL_App_Notification+0x318>)
 8000fa0:	f012 f996 	bl	80132d0 <puts>
          break;
 8000fa4:	e01b      	b.n	8000fde <SVCCTL_App_Notification+0x2b2>
            pairing_complete = (aci_gap_pairing_complete_event_rp0*)blue_evt->data;
 8000fa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fa8:	3302      	adds	r3, #2
 8000faa:	623b      	str	r3, [r7, #32]
            APP_DBG_MSG("BLE_CTRL_App_Notification: EVT_BLUE_GAP_PAIRING_CMPLT, pairing_complete->Status = %d\n",pairing_complete->Status);
 8000fac:	6a3b      	ldr	r3, [r7, #32]
 8000fae:	789b      	ldrb	r3, [r3, #2]
 8000fb0:	4619      	mov	r1, r3
 8000fb2:	4825      	ldr	r0, [pc, #148]	; (8001048 <SVCCTL_App_Notification+0x31c>)
 8000fb4:	f012 f918 	bl	80131e8 <iprintf>
            if (pairing_complete->Status == 0)
 8000fb8:	6a3b      	ldr	r3, [r7, #32]
 8000fba:	789b      	ldrb	r3, [r3, #2]
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d103      	bne.n	8000fc8 <SVCCTL_App_Notification+0x29c>
              APP_DBG_MSG("\r\n\r** Pairing OK \n");
 8000fc0:	4822      	ldr	r0, [pc, #136]	; (800104c <SVCCTL_App_Notification+0x320>)
 8000fc2:	f012 f985 	bl	80132d0 <puts>
           break;    
 8000fc6:	e00a      	b.n	8000fde <SVCCTL_App_Notification+0x2b2>
              APP_DBG_MSG("\r\n\r** Pairing KO \n");
 8000fc8:	4821      	ldr	r0, [pc, #132]	; (8001050 <SVCCTL_App_Notification+0x324>)
 8000fca:	f012 f981 	bl	80132d0 <puts>
           break;    
 8000fce:	e006      	b.n	8000fde <SVCCTL_App_Notification+0x2b2>
          mutex = 1;
 8000fd0:	4b20      	ldr	r3, [pc, #128]	; (8001054 <SVCCTL_App_Notification+0x328>)
 8000fd2:	2201      	movs	r2, #1
 8000fd4:	701a      	strb	r2, [r3, #0]
        APP_DBG_MSG("\r\n\r** EVT_BLUE_GAP_PROCEDURE_COMPLETE \n");
 8000fd6:	4820      	ldr	r0, [pc, #128]	; (8001058 <SVCCTL_App_Notification+0x32c>)
 8000fd8:	f012 f97a 	bl	80132d0 <puts>
          break; /* EVT_BLUE_GAP_PROCEDURE_COMPLETE */
 8000fdc:	bf00      	nop
      break; /* EVT_VENDOR */
 8000fde:	bf00      	nop
  }

  return (SVCCTL_UserEvtFlowEnable);
 8000fe0:	2301      	movs	r3, #1
}
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	3730      	adds	r7, #48	; 0x30
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	bd80      	pop	{r7, pc}
 8000fea:	bf00      	nop
 8000fec:	20000210 	.word	0x20000210
 8000ff0:	080165b4 	.word	0x080165b4
 8000ff4:	2000778c 	.word	0x2000778c
 8000ff8:	080165dc 	.word	0x080165dc
 8000ffc:	08016608 	.word	0x08016608
 8001000:	08016624 	.word	0x08016624
 8001004:	08016648 	.word	0x08016648
 8001008:	08016670 	.word	0x08016670
 800100c:	08016684 	.word	0x08016684
 8001010:	080166a0 	.word	0x080166a0
 8001014:	080166b8 	.word	0x080166b8
 8001018:	080166ec 	.word	0x080166ec
 800101c:	08016718 	.word	0x08016718
 8001020:	08016740 	.word	0x08016740
 8001024:	08016760 	.word	0x08016760
 8001028:	0801678c 	.word	0x0801678c
 800102c:	080167bc 	.word	0x080167bc
 8001030:	080167dc 	.word	0x080167dc
 8001034:	080167f8 	.word	0x080167f8
 8001038:	0801681c 	.word	0x0801681c
 800103c:	08016848 	.word	0x08016848
 8001040:	08016860 	.word	0x08016860
 8001044:	08016874 	.word	0x08016874
 8001048:	080168b0 	.word	0x080168b0
 800104c:	08016908 	.word	0x08016908
 8001050:	0801691c 	.word	0x0801691c
 8001054:	20007794 	.word	0x20007794
 8001058:	08016930 	.word	0x08016930

0800105c <Ble_Tl_Init>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Ble_Tl_Init( void )
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b082      	sub	sp, #8
 8001060:	af00      	add	r7, sp, #0
  HCI_TL_HciInitConf_t Hci_Tl_Init_Conf;

  MtxHciId = osMutexNew( NULL );
 8001062:	2000      	movs	r0, #0
 8001064:	f00d fc44 	bl	800e8f0 <osMutexNew>
 8001068:	4602      	mov	r2, r0
 800106a:	4b0b      	ldr	r3, [pc, #44]	; (8001098 <Ble_Tl_Init+0x3c>)
 800106c:	601a      	str	r2, [r3, #0]
  SemHciId = osSemaphoreNew( 1, 0, NULL ); /*< Create the semaphore and make it busy at initialization */
 800106e:	2200      	movs	r2, #0
 8001070:	2100      	movs	r1, #0
 8001072:	2001      	movs	r0, #1
 8001074:	f00d fd84 	bl	800eb80 <osSemaphoreNew>
 8001078:	4602      	mov	r2, r0
 800107a:	4b08      	ldr	r3, [pc, #32]	; (800109c <Ble_Tl_Init+0x40>)
 800107c:	601a      	str	r2, [r3, #0]

  Hci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&BleCmdBuffer;
 800107e:	4b08      	ldr	r3, [pc, #32]	; (80010a0 <Ble_Tl_Init+0x44>)
 8001080:	603b      	str	r3, [r7, #0]
  Hci_Tl_Init_Conf.StatusNotCallBack = BLE_StatusNot;
 8001082:	4b08      	ldr	r3, [pc, #32]	; (80010a4 <Ble_Tl_Init+0x48>)
 8001084:	607b      	str	r3, [r7, #4]
  hci_init(BLE_UserEvtRx, (void*) &Hci_Tl_Init_Conf);
 8001086:	463b      	mov	r3, r7
 8001088:	4619      	mov	r1, r3
 800108a:	4807      	ldr	r0, [pc, #28]	; (80010a8 <Ble_Tl_Init+0x4c>)
 800108c:	f00b fe28 	bl	800cce0 <hci_init>

  return;
 8001090:	bf00      	nop
}
 8001092:	3708      	adds	r7, #8
 8001094:	46bd      	mov	sp, r7
 8001096:	bd80      	pop	{r7, pc}
 8001098:	20007798 	.word	0x20007798
 800109c:	20007784 	.word	0x20007784
 80010a0:	20030028 	.word	0x20030028
 80010a4:	08001531 	.word	0x08001531
 80010a8:	080014f9 	.word	0x080014f9

080010ac <Ble_Hci_Gap_Gatt_Init>:

static void Ble_Hci_Gap_Gatt_Init(void){
 80010ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80010ae:	b08f      	sub	sp, #60	; 0x3c
 80010b0:	af06      	add	r7, sp, #24

  uint8_t role;
  uint16_t gap_service_handle, gap_dev_name_char_handle, gap_appearance_char_handle;
  const uint8_t *bd_addr;
  uint32_t srd_bd_addr[2];
  uint16_t appearance[1] = { BLE_CFG_GAP_APPEARANCE };
 80010b2:	f44f 7350 	mov.w	r3, #832	; 0x340
 80010b6:	803b      	strh	r3, [r7, #0]

  /**
   * Initialize HCI layer
   */
  /*HCI Reset to synchronise BLE Stack*/
  hci_reset();
 80010b8:	f00b fcd1 	bl	800ca5e <hci_reset>

  /**
   * Write the BD Address
   */

  bd_addr = BleGetBdAddress();
 80010bc:	f000 f978 	bl	80013b0 <BleGetBdAddress>
 80010c0:	61f8      	str	r0, [r7, #28]
  aci_hal_write_config_data(CONFIG_DATA_PUBADDR_OFFSET,
 80010c2:	69fa      	ldr	r2, [r7, #28]
 80010c4:	2106      	movs	r1, #6
 80010c6:	2000      	movs	r0, #0
 80010c8:	f00b fc09 	bl	800c8de <aci_hal_write_config_data>
                            CONFIG_DATA_PUBADDR_LEN,
                            (uint8_t*) bd_addr);

  /* BLE MAC in ADV Packet */
  manuf_data[ sizeof(manuf_data)-6] = bd_addr[5];
 80010cc:	69fb      	ldr	r3, [r7, #28]
 80010ce:	795a      	ldrb	r2, [r3, #5]
 80010d0:	4b5c      	ldr	r3, [pc, #368]	; (8001244 <Ble_Hci_Gap_Gatt_Init+0x198>)
 80010d2:	721a      	strb	r2, [r3, #8]
  manuf_data[ sizeof(manuf_data)-5] = bd_addr[4];
 80010d4:	69fb      	ldr	r3, [r7, #28]
 80010d6:	791a      	ldrb	r2, [r3, #4]
 80010d8:	4b5a      	ldr	r3, [pc, #360]	; (8001244 <Ble_Hci_Gap_Gatt_Init+0x198>)
 80010da:	725a      	strb	r2, [r3, #9]
  manuf_data[ sizeof(manuf_data)-4] = bd_addr[3];
 80010dc:	69fb      	ldr	r3, [r7, #28]
 80010de:	78da      	ldrb	r2, [r3, #3]
 80010e0:	4b58      	ldr	r3, [pc, #352]	; (8001244 <Ble_Hci_Gap_Gatt_Init+0x198>)
 80010e2:	729a      	strb	r2, [r3, #10]
  manuf_data[ sizeof(manuf_data)-3] = bd_addr[2];
 80010e4:	69fb      	ldr	r3, [r7, #28]
 80010e6:	789a      	ldrb	r2, [r3, #2]
 80010e8:	4b56      	ldr	r3, [pc, #344]	; (8001244 <Ble_Hci_Gap_Gatt_Init+0x198>)
 80010ea:	72da      	strb	r2, [r3, #11]
  manuf_data[ sizeof(manuf_data)-2] = bd_addr[1];
 80010ec:	69fb      	ldr	r3, [r7, #28]
 80010ee:	785a      	ldrb	r2, [r3, #1]
 80010f0:	4b54      	ldr	r3, [pc, #336]	; (8001244 <Ble_Hci_Gap_Gatt_Init+0x198>)
 80010f2:	731a      	strb	r2, [r3, #12]
  manuf_data[ sizeof(manuf_data)-1] = bd_addr[0];
 80010f4:	69fb      	ldr	r3, [r7, #28]
 80010f6:	781a      	ldrb	r2, [r3, #0]
 80010f8:	4b52      	ldr	r3, [pc, #328]	; (8001244 <Ble_Hci_Gap_Gatt_Init+0x198>)
 80010fa:	735a      	strb	r2, [r3, #13]

  /**
   * Write Identity root key used to derive LTK and CSRK
   */
    aci_hal_write_config_data(CONFIG_DATA_IR_OFFSET,
 80010fc:	4a52      	ldr	r2, [pc, #328]	; (8001248 <Ble_Hci_Gap_Gatt_Init+0x19c>)
 80010fe:	2110      	movs	r1, #16
 8001100:	2018      	movs	r0, #24
 8001102:	f00b fbec 	bl	800c8de <aci_hal_write_config_data>
                            (uint8_t*) BLE_CFG_IR_VALUE);

   /**
   * Write Encryption root key used to derive LTK and CSRK
   */
    aci_hal_write_config_data(CONFIG_DATA_ER_OFFSET,
 8001106:	4a51      	ldr	r2, [pc, #324]	; (800124c <Ble_Hci_Gap_Gatt_Init+0x1a0>)
 8001108:	2110      	movs	r1, #16
 800110a:	2008      	movs	r0, #8
 800110c:	f00b fbe7 	bl	800c8de <aci_hal_write_config_data>
   * Static random Address
   * The two upper bits shall be set to 1
   * The lowest 32bits is read from the UDN to differentiate between devices
   * The RNG may be used to provide a random number on each power on
   */
  srd_bd_addr[1] =  0x0000ED6E;
 8001110:	f64e 536e 	movw	r3, #60782	; 0xed6e
 8001114:	60bb      	str	r3, [r7, #8]
  srd_bd_addr[0] =  LL_FLASH_GetUDN( );
 8001116:	f7ff fd6f 	bl	8000bf8 <LL_FLASH_GetUDN>
 800111a:	4603      	mov	r3, r0
 800111c:	607b      	str	r3, [r7, #4]
  aci_hal_write_config_data( CONFIG_DATA_RANDOM_ADDRESS_OFFSET, CONFIG_DATA_RANDOM_ADDRESS_LEN, (uint8_t*)srd_bd_addr );
 800111e:	1d3b      	adds	r3, r7, #4
 8001120:	461a      	mov	r2, r3
 8001122:	2106      	movs	r1, #6
 8001124:	202e      	movs	r0, #46	; 0x2e
 8001126:	f00b fbda 	bl	800c8de <aci_hal_write_config_data>

  /**
   * Write Identity root key used to derive LTK and CSRK
   */
    aci_hal_write_config_data( CONFIG_DATA_IR_OFFSET, CONFIG_DATA_IR_LEN, (uint8_t*)BLE_CFG_IR_VALUE );
 800112a:	4a47      	ldr	r2, [pc, #284]	; (8001248 <Ble_Hci_Gap_Gatt_Init+0x19c>)
 800112c:	2110      	movs	r1, #16
 800112e:	2018      	movs	r0, #24
 8001130:	f00b fbd5 	bl	800c8de <aci_hal_write_config_data>

   /**
   * Write Encryption root key used to derive LTK and CSRK
   */
    aci_hal_write_config_data( CONFIG_DATA_ER_OFFSET, CONFIG_DATA_ER_LEN, (uint8_t*)BLE_CFG_ER_VALUE );
 8001134:	4a45      	ldr	r2, [pc, #276]	; (800124c <Ble_Hci_Gap_Gatt_Init+0x1a0>)
 8001136:	2110      	movs	r1, #16
 8001138:	2008      	movs	r0, #8
 800113a:	f00b fbd0 	bl	800c8de <aci_hal_write_config_data>

  /**
   * Set TX Power to 0dBm.
   */
  aci_hal_set_tx_power_level(1, CFG_TX_POWER);
 800113e:	2118      	movs	r1, #24
 8001140:	2001      	movs	r0, #1
 8001142:	f00b fc35 	bl	800c9b0 <aci_hal_set_tx_power_level>

  /**
   * Initialize GATT interface
   */
  aci_gatt_init();
 8001146:	f00b f985 	bl	800c454 <aci_gatt_init>

  /**
   * Initialize GAP interface
   */
  role = 0;
 800114a:	2300      	movs	r3, #0
 800114c:	76fb      	strb	r3, [r7, #27]

#if (BLE_CFG_PERIPHERAL == 1)
  role |= GAP_PERIPHERAL_ROLE;
 800114e:	7efb      	ldrb	r3, [r7, #27]
 8001150:	f043 0301 	orr.w	r3, r3, #1
 8001154:	76fb      	strb	r3, [r7, #27]

#if (BLE_CFG_CENTRAL == 1)
  role |= GAP_CENTRAL_ROLE;
#endif

  if (role > 0)
 8001156:	7efb      	ldrb	r3, [r7, #27]
 8001158:	2b00      	cmp	r3, #0
 800115a:	d024      	beq.n	80011a6 <Ble_Hci_Gap_Gatt_Init+0xfa>
  {
    const char *name = "DRAMSAY";
 800115c:	4b3c      	ldr	r3, [pc, #240]	; (8001250 <Ble_Hci_Gap_Gatt_Init+0x1a4>)
 800115e:	617b      	str	r3, [r7, #20]
    aci_gap_init(role, 0,
 8001160:	f107 0212 	add.w	r2, r7, #18
 8001164:	7ef8      	ldrb	r0, [r7, #27]
 8001166:	f107 030e 	add.w	r3, r7, #14
 800116a:	9301      	str	r3, [sp, #4]
 800116c:	f107 0310 	add.w	r3, r7, #16
 8001170:	9300      	str	r3, [sp, #0]
 8001172:	4613      	mov	r3, r2
 8001174:	2207      	movs	r2, #7
 8001176:	2100      	movs	r1, #0
 8001178:	f00a ffc0 	bl	800c0fc <aci_gap_init>
                 APPBLE_GAP_DEVICE_NAME_LENGTH,
                 &gap_service_handle, &gap_dev_name_char_handle, &gap_appearance_char_handle);

    if (aci_gatt_update_char_value(gap_service_handle, gap_dev_name_char_handle, 0, strlen(name), (uint8_t *) name))
 800117c:	8a7c      	ldrh	r4, [r7, #18]
 800117e:	8a3d      	ldrh	r5, [r7, #16]
 8001180:	6978      	ldr	r0, [r7, #20]
 8001182:	f7fe fffd 	bl	8000180 <strlen>
 8001186:	4603      	mov	r3, r0
 8001188:	b2da      	uxtb	r2, r3
 800118a:	697b      	ldr	r3, [r7, #20]
 800118c:	9300      	str	r3, [sp, #0]
 800118e:	4613      	mov	r3, r2
 8001190:	2200      	movs	r2, #0
 8001192:	4629      	mov	r1, r5
 8001194:	4620      	mov	r0, r4
 8001196:	f00b fb1b 	bl	800c7d0 <aci_gatt_update_char_value>
 800119a:	4603      	mov	r3, r0
 800119c:	2b00      	cmp	r3, #0
 800119e:	d002      	beq.n	80011a6 <Ble_Hci_Gap_Gatt_Init+0xfa>
    {
      BLE_DBG_SVCCTL_MSG("Device Name aci_gatt_update_char_value failed.\n");
 80011a0:	482c      	ldr	r0, [pc, #176]	; (8001254 <Ble_Hci_Gap_Gatt_Init+0x1a8>)
 80011a2:	f012 f895 	bl	80132d0 <puts>
    }
  }

  if(aci_gatt_update_char_value(gap_service_handle,
 80011a6:	8a78      	ldrh	r0, [r7, #18]
 80011a8:	89f9      	ldrh	r1, [r7, #14]
 80011aa:	463b      	mov	r3, r7
 80011ac:	9300      	str	r3, [sp, #0]
 80011ae:	2302      	movs	r3, #2
 80011b0:	2200      	movs	r2, #0
 80011b2:	f00b fb0d 	bl	800c7d0 <aci_gatt_update_char_value>
 80011b6:	4603      	mov	r3, r0
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d002      	beq.n	80011c2 <Ble_Hci_Gap_Gatt_Init+0x116>
                                gap_appearance_char_handle,
                                0,
                                2,
                                (uint8_t *)&appearance))
  {
    BLE_DBG_SVCCTL_MSG("Appearance aci_gatt_update_char_value failed.\n");
 80011bc:	4826      	ldr	r0, [pc, #152]	; (8001258 <Ble_Hci_Gap_Gatt_Init+0x1ac>)
 80011be:	f012 f887 	bl	80132d0 <puts>
  }
  /**
   * Initialize Default PHY
   */
  hci_le_set_default_phy(ALL_PHYS_PREFERENCE,TX_2M_PREFERRED,RX_2M_PREFERRED);
 80011c2:	2202      	movs	r2, #2
 80011c4:	2102      	movs	r1, #2
 80011c6:	2000      	movs	r0, #0
 80011c8:	f00b fcd5 	bl	800cb76 <hci_le_set_default_phy>

  /**
   * Initialize IO capability
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability = CFG_IO_CAPABILITY;
 80011cc:	4b23      	ldr	r3, [pc, #140]	; (800125c <Ble_Hci_Gap_Gatt_Init+0x1b0>)
 80011ce:	2201      	movs	r2, #1
 80011d0:	701a      	strb	r2, [r3, #0]
  aci_gap_set_io_capability(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability);
 80011d2:	4b22      	ldr	r3, [pc, #136]	; (800125c <Ble_Hci_Gap_Gatt_Init+0x1b0>)
 80011d4:	781b      	ldrb	r3, [r3, #0]
 80011d6:	4618      	mov	r0, r3
 80011d8:	f00a fe9e 	bl	800bf18 <aci_gap_set_io_capability>

  /**
   * Initialize authentication
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.mitm_mode = CFG_MITM_PROTECTION;
 80011dc:	4b1f      	ldr	r3, [pc, #124]	; (800125c <Ble_Hci_Gap_Gatt_Init+0x1b0>)
 80011de:	2201      	movs	r2, #1
 80011e0:	705a      	strb	r2, [r3, #1]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMin = CFG_ENCRYPTION_KEY_SIZE_MIN;
 80011e2:	4b1e      	ldr	r3, [pc, #120]	; (800125c <Ble_Hci_Gap_Gatt_Init+0x1b0>)
 80011e4:	2208      	movs	r2, #8
 80011e6:	711a      	strb	r2, [r3, #4]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMax = CFG_ENCRYPTION_KEY_SIZE_MAX;
 80011e8:	4b1c      	ldr	r3, [pc, #112]	; (800125c <Ble_Hci_Gap_Gatt_Init+0x1b0>)
 80011ea:	2210      	movs	r2, #16
 80011ec:	715a      	strb	r2, [r3, #5]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Use_Fixed_Pin = CFG_USED_FIXED_PIN;
 80011ee:	4b1b      	ldr	r3, [pc, #108]	; (800125c <Ble_Hci_Gap_Gatt_Init+0x1b0>)
 80011f0:	2200      	movs	r2, #0
 80011f2:	70da      	strb	r2, [r3, #3]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Fixed_Pin = CFG_FIXED_PIN;
 80011f4:	4b19      	ldr	r3, [pc, #100]	; (800125c <Ble_Hci_Gap_Gatt_Init+0x1b0>)
 80011f6:	4a1a      	ldr	r2, [pc, #104]	; (8001260 <Ble_Hci_Gap_Gatt_Init+0x1b4>)
 80011f8:	609a      	str	r2, [r3, #8]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode = CFG_BONDING_MODE;
 80011fa:	4b18      	ldr	r3, [pc, #96]	; (800125c <Ble_Hci_Gap_Gatt_Init+0x1b0>)
 80011fc:	2201      	movs	r2, #1
 80011fe:	709a      	strb	r2, [r3, #2]

  aci_gap_set_authentication_requirement(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode,
 8001200:	4b16      	ldr	r3, [pc, #88]	; (800125c <Ble_Hci_Gap_Gatt_Init+0x1b0>)
 8001202:	789d      	ldrb	r5, [r3, #2]
 8001204:	4b15      	ldr	r3, [pc, #84]	; (800125c <Ble_Hci_Gap_Gatt_Init+0x1b0>)
 8001206:	785e      	ldrb	r6, [r3, #1]
 8001208:	4b14      	ldr	r3, [pc, #80]	; (800125c <Ble_Hci_Gap_Gatt_Init+0x1b0>)
 800120a:	791b      	ldrb	r3, [r3, #4]
 800120c:	4a13      	ldr	r2, [pc, #76]	; (800125c <Ble_Hci_Gap_Gatt_Init+0x1b0>)
 800120e:	7952      	ldrb	r2, [r2, #5]
 8001210:	4912      	ldr	r1, [pc, #72]	; (800125c <Ble_Hci_Gap_Gatt_Init+0x1b0>)
 8001212:	78c9      	ldrb	r1, [r1, #3]
 8001214:	4811      	ldr	r0, [pc, #68]	; (800125c <Ble_Hci_Gap_Gatt_Init+0x1b0>)
 8001216:	6880      	ldr	r0, [r0, #8]
 8001218:	2400      	movs	r4, #0
 800121a:	9404      	str	r4, [sp, #16]
 800121c:	9003      	str	r0, [sp, #12]
 800121e:	9102      	str	r1, [sp, #8]
 8001220:	9201      	str	r2, [sp, #4]
 8001222:	9300      	str	r3, [sp, #0]
 8001224:	2300      	movs	r3, #0
 8001226:	2201      	movs	r2, #1
 8001228:	4631      	mov	r1, r6
 800122a:	4628      	mov	r0, r5
 800122c:	f00a febe 	bl	800bfac <aci_gap_set_authentication_requirement>
                                         );

  /**
   * Initialize whitelist
   */
   if (BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode)
 8001230:	4b0a      	ldr	r3, [pc, #40]	; (800125c <Ble_Hci_Gap_Gatt_Init+0x1b0>)
 8001232:	789b      	ldrb	r3, [r3, #2]
 8001234:	2b00      	cmp	r3, #0
 8001236:	d001      	beq.n	800123c <Ble_Hci_Gap_Gatt_Init+0x190>
   {
     aci_gap_configure_whitelist();
 8001238:	f00b f847 	bl	800c2ca <aci_gap_configure_whitelist>
   }
}
 800123c:	bf00      	nop
 800123e:	3724      	adds	r7, #36	; 0x24
 8001240:	46bd      	mov	sp, r7
 8001242:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001244:	20000004 	.word	0x20000004
 8001248:	08016f1c 	.word	0x08016f1c
 800124c:	08016f2c 	.word	0x08016f2c
 8001250:	08016958 	.word	0x08016958
 8001254:	08016960 	.word	0x08016960
 8001258:	08016990 	.word	0x08016990
 800125c:	20000210 	.word	0x20000210
 8001260:	0001b207 	.word	0x0001b207

08001264 <Adv_Request>:

static void Adv_Request(APP_BLE_ConnStatus_t New_Status)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	b08c      	sub	sp, #48	; 0x30
 8001268:	af08      	add	r7, sp, #32
 800126a:	4603      	mov	r3, r0
 800126c:	71fb      	strb	r3, [r7, #7]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800126e:	2342      	movs	r3, #66	; 0x42
 8001270:	72fb      	strb	r3, [r7, #11]
  uint16_t Min_Inter, Max_Inter;

  if (New_Status == APP_BLE_FAST_ADV)
 8001272:	79fb      	ldrb	r3, [r7, #7]
 8001274:	2b01      	cmp	r3, #1
 8001276:	d106      	bne.n	8001286 <Adv_Request+0x22>
  {
    Min_Inter = AdvIntervalMin;
 8001278:	4b3f      	ldr	r3, [pc, #252]	; (8001378 <Adv_Request+0x114>)
 800127a:	881b      	ldrh	r3, [r3, #0]
 800127c:	81fb      	strh	r3, [r7, #14]
    Max_Inter = AdvIntervalMax;
 800127e:	4b3f      	ldr	r3, [pc, #252]	; (800137c <Adv_Request+0x118>)
 8001280:	881b      	ldrh	r3, [r3, #0]
 8001282:	81bb      	strh	r3, [r7, #12]
 8001284:	e005      	b.n	8001292 <Adv_Request+0x2e>
  }
  else
  {
    Min_Inter = CFG_LP_CONN_ADV_INTERVAL_MIN;
 8001286:	f44f 63c8 	mov.w	r3, #1600	; 0x640
 800128a:	81fb      	strh	r3, [r7, #14]
    Max_Inter = CFG_LP_CONN_ADV_INTERVAL_MAX;
 800128c:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 8001290:	81bb      	strh	r3, [r7, #12]

    /**
     * Stop the timer, it will be restarted for a new shot
     * It does not hurt if the timer was not running
     */
    HW_TS_Stop(BleApplicationContext.Advertising_mgr_timer_Id);
 8001292:	4b3b      	ldr	r3, [pc, #236]	; (8001380 <Adv_Request+0x11c>)
 8001294:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8001298:	4618      	mov	r0, r3
 800129a:	f002 f95d 	bl	8003558 <HW_TS_Stop>

    APP_DBG_MSG("First index in %d state \n", BleApplicationContext.Device_Connection_Status);
 800129e:	4b38      	ldr	r3, [pc, #224]	; (8001380 <Adv_Request+0x11c>)
 80012a0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80012a4:	4619      	mov	r1, r3
 80012a6:	4837      	ldr	r0, [pc, #220]	; (8001384 <Adv_Request+0x120>)
 80012a8:	f011 ff9e 	bl	80131e8 <iprintf>

    if ((New_Status == APP_BLE_LP_ADV)
 80012ac:	79fb      	ldrb	r3, [r7, #7]
 80012ae:	2b02      	cmp	r3, #2
 80012b0:	d119      	bne.n	80012e6 <Adv_Request+0x82>
        && ((BleApplicationContext.Device_Connection_Status == APP_BLE_FAST_ADV)
 80012b2:	4b33      	ldr	r3, [pc, #204]	; (8001380 <Adv_Request+0x11c>)
 80012b4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80012b8:	2b01      	cmp	r3, #1
 80012ba:	d004      	beq.n	80012c6 <Adv_Request+0x62>
            || (BleApplicationContext.Device_Connection_Status == APP_BLE_LP_ADV)))
 80012bc:	4b30      	ldr	r3, [pc, #192]	; (8001380 <Adv_Request+0x11c>)
 80012be:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80012c2:	2b02      	cmp	r3, #2
 80012c4:	d10f      	bne.n	80012e6 <Adv_Request+0x82>
    {
      /* Connection in ADVERTISE mode have to stop the current advertising */
      ret = aci_gap_set_non_discoverable();
 80012c6:	f00a fd25 	bl	800bd14 <aci_gap_set_non_discoverable>
 80012ca:	4603      	mov	r3, r0
 80012cc:	72fb      	strb	r3, [r7, #11]
      if (ret == BLE_STATUS_SUCCESS)
 80012ce:	7afb      	ldrb	r3, [r7, #11]
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d103      	bne.n	80012dc <Adv_Request+0x78>
      {
        APP_DBG_MSG("Successfully Stopped Advertising \n");
 80012d4:	482c      	ldr	r0, [pc, #176]	; (8001388 <Adv_Request+0x124>)
 80012d6:	f011 fffb 	bl	80132d0 <puts>
 80012da:	e004      	b.n	80012e6 <Adv_Request+0x82>
      }
      else
      {
        APP_DBG_MSG("Stop Advertising Failed , result: %d \n", ret);
 80012dc:	7afb      	ldrb	r3, [r7, #11]
 80012de:	4619      	mov	r1, r3
 80012e0:	482a      	ldr	r0, [pc, #168]	; (800138c <Adv_Request+0x128>)
 80012e2:	f011 ff81 	bl	80131e8 <iprintf>
      }
    }

    BleApplicationContext.Device_Connection_Status = New_Status;
 80012e6:	4a26      	ldr	r2, [pc, #152]	; (8001380 <Adv_Request+0x11c>)
 80012e8:	79fb      	ldrb	r3, [r7, #7]
 80012ea:	f882 3080 	strb.w	r3, [r2, #128]	; 0x80
    /* Start Fast or Low Power Advertising */
    ret = aci_gap_set_discoverable(
 80012ee:	4b24      	ldr	r3, [pc, #144]	; (8001380 <Adv_Request+0x11c>)
 80012f0:	7e1b      	ldrb	r3, [r3, #24]
 80012f2:	89b8      	ldrh	r0, [r7, #12]
 80012f4:	89f9      	ldrh	r1, [r7, #14]
 80012f6:	2200      	movs	r2, #0
 80012f8:	9206      	str	r2, [sp, #24]
 80012fa:	2200      	movs	r2, #0
 80012fc:	9205      	str	r2, [sp, #20]
 80012fe:	4a24      	ldr	r2, [pc, #144]	; (8001390 <Adv_Request+0x12c>)
 8001300:	9204      	str	r2, [sp, #16]
 8001302:	9303      	str	r3, [sp, #12]
 8001304:	4b23      	ldr	r3, [pc, #140]	; (8001394 <Adv_Request+0x130>)
 8001306:	9302      	str	r3, [sp, #8]
 8001308:	2308      	movs	r3, #8
 800130a:	9301      	str	r3, [sp, #4]
 800130c:	2300      	movs	r3, #0
 800130e:	9300      	str	r3, [sp, #0]
 8001310:	2300      	movs	r3, #0
 8001312:	4602      	mov	r2, r0
 8001314:	2000      	movs	r0, #0
 8001316:	f00a fd21 	bl	800bd5c <aci_gap_set_discoverable>
 800131a:	4603      	mov	r3, r0
 800131c:	72fb      	strb	r3, [r7, #11]
        BleApplicationContext.BleApplicationContext_legacy.advtServUUID,
        0,
        0);

    /* Update Advertising data */
    ret = aci_gap_update_adv_data(sizeof(manuf_data), (uint8_t*) manuf_data);
 800131e:	491e      	ldr	r1, [pc, #120]	; (8001398 <Adv_Request+0x134>)
 8001320:	200e      	movs	r0, #14
 8001322:	f00a ff76 	bl	800c212 <aci_gap_update_adv_data>
 8001326:	4603      	mov	r3, r0
 8001328:	72fb      	strb	r3, [r7, #11]
    if (ret == BLE_STATUS_SUCCESS)
 800132a:	7afb      	ldrb	r3, [r7, #11]
 800132c:	2b00      	cmp	r3, #0
 800132e:	d111      	bne.n	8001354 <Adv_Request+0xf0>
    {
      if (New_Status == APP_BLE_FAST_ADV)
 8001330:	79fb      	ldrb	r3, [r7, #7]
 8001332:	2b01      	cmp	r3, #1
 8001334:	d10a      	bne.n	800134c <Adv_Request+0xe8>
      {
        APP_DBG_MSG("Successfully Start Fast Advertising \n" );
 8001336:	4819      	ldr	r0, [pc, #100]	; (800139c <Adv_Request+0x138>)
 8001338:	f011 ffca 	bl	80132d0 <puts>
        /* Start Timer to STOP ADV - TIMEOUT */
        HW_TS_Start(BleApplicationContext.Advertising_mgr_timer_Id, INITIAL_ADV_TIMEOUT);
 800133c:	4b10      	ldr	r3, [pc, #64]	; (8001380 <Adv_Request+0x11c>)
 800133e:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8001342:	4917      	ldr	r1, [pc, #92]	; (80013a0 <Adv_Request+0x13c>)
 8001344:	4618      	mov	r0, r3
 8001346:	f002 f991 	bl	800366c <HW_TS_Start>
      {
        APP_DBG_MSG("Start Low Power Advertising Failed , result: %d \n", ret);
      }
    }

  return;
 800134a:	e012      	b.n	8001372 <Adv_Request+0x10e>
        APP_DBG_MSG("Successfully Start Low Power Advertising \n");
 800134c:	4815      	ldr	r0, [pc, #84]	; (80013a4 <Adv_Request+0x140>)
 800134e:	f011 ffbf 	bl	80132d0 <puts>
  return;
 8001352:	e00e      	b.n	8001372 <Adv_Request+0x10e>
      if (New_Status == APP_BLE_FAST_ADV)
 8001354:	79fb      	ldrb	r3, [r7, #7]
 8001356:	2b01      	cmp	r3, #1
 8001358:	d105      	bne.n	8001366 <Adv_Request+0x102>
        APP_DBG_MSG("Start Fast Advertising Failed , result: %d \n", ret);
 800135a:	7afb      	ldrb	r3, [r7, #11]
 800135c:	4619      	mov	r1, r3
 800135e:	4812      	ldr	r0, [pc, #72]	; (80013a8 <Adv_Request+0x144>)
 8001360:	f011 ff42 	bl	80131e8 <iprintf>
  return;
 8001364:	e005      	b.n	8001372 <Adv_Request+0x10e>
        APP_DBG_MSG("Start Low Power Advertising Failed , result: %d \n", ret);
 8001366:	7afb      	ldrb	r3, [r7, #11]
 8001368:	4619      	mov	r1, r3
 800136a:	4810      	ldr	r0, [pc, #64]	; (80013ac <Adv_Request+0x148>)
 800136c:	f011 ff3c 	bl	80131e8 <iprintf>
  return;
 8001370:	bf00      	nop
}
 8001372:	3710      	adds	r7, #16
 8001374:	46bd      	mov	sp, r7
 8001376:	bd80      	pop	{r7, pc}
 8001378:	20000294 	.word	0x20000294
 800137c:	20000296 	.word	0x20000296
 8001380:	20000210 	.word	0x20000210
 8001384:	080169c0 	.word	0x080169c0
 8001388:	080169dc 	.word	0x080169dc
 800138c:	08016a00 	.word	0x08016a00
 8001390:	20000229 	.word	0x20000229
 8001394:	08016f3c 	.word	0x08016f3c
 8001398:	20000004 	.word	0x20000004
 800139c:	08016a28 	.word	0x08016a28
 80013a0:	0001e046 	.word	0x0001e046
 80013a4:	08016a50 	.word	0x08016a50
 80013a8:	08016a7c 	.word	0x08016a7c
 80013ac:	08016aac 	.word	0x08016aac

080013b0 <BleGetBdAddress>:

const uint8_t* BleGetBdAddress( void )
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b086      	sub	sp, #24
 80013b4:	af00      	add	r7, sp, #0
  const uint8_t *bd_addr;
  uint32_t udn;
  uint32_t company_id;
  uint32_t device_id;

  udn = LL_FLASH_GetUDN();
 80013b6:	f7ff fc1f 	bl	8000bf8 <LL_FLASH_GetUDN>
 80013ba:	6138      	str	r0, [r7, #16]

  if(udn != 0xFFFFFFFF)
 80013bc:	693b      	ldr	r3, [r7, #16]
 80013be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80013c2:	d023      	beq.n	800140c <BleGetBdAddress+0x5c>
  {
    company_id = LL_FLASH_GetSTCompanyID();
 80013c4:	f7ff fc30 	bl	8000c28 <LL_FLASH_GetSTCompanyID>
 80013c8:	60b8      	str	r0, [r7, #8]
    device_id = LL_FLASH_GetDeviceID();
 80013ca:	f7ff fc21 	bl	8000c10 <LL_FLASH_GetDeviceID>
 80013ce:	6078      	str	r0, [r7, #4]

    bd_addr_udn[0] = (uint8_t)(udn & 0x000000FF);
 80013d0:	693b      	ldr	r3, [r7, #16]
 80013d2:	b2da      	uxtb	r2, r3
 80013d4:	4b16      	ldr	r3, [pc, #88]	; (8001430 <BleGetBdAddress+0x80>)
 80013d6:	701a      	strb	r2, [r3, #0]
    bd_addr_udn[1] = (uint8_t)( (udn & 0x0000FF00) >> 8 );
 80013d8:	693b      	ldr	r3, [r7, #16]
 80013da:	0a1b      	lsrs	r3, r3, #8
 80013dc:	b2da      	uxtb	r2, r3
 80013de:	4b14      	ldr	r3, [pc, #80]	; (8001430 <BleGetBdAddress+0x80>)
 80013e0:	705a      	strb	r2, [r3, #1]
    bd_addr_udn[2] = (uint8_t)( (udn & 0x00FF0000) >> 16 );
 80013e2:	693b      	ldr	r3, [r7, #16]
 80013e4:	0c1b      	lsrs	r3, r3, #16
 80013e6:	b2da      	uxtb	r2, r3
 80013e8:	4b11      	ldr	r3, [pc, #68]	; (8001430 <BleGetBdAddress+0x80>)
 80013ea:	709a      	strb	r2, [r3, #2]
    bd_addr_udn[3] = (uint8_t)device_id;
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	b2da      	uxtb	r2, r3
 80013f0:	4b0f      	ldr	r3, [pc, #60]	; (8001430 <BleGetBdAddress+0x80>)
 80013f2:	70da      	strb	r2, [r3, #3]
    bd_addr_udn[4] = (uint8_t)(company_id & 0x000000FF);;
 80013f4:	68bb      	ldr	r3, [r7, #8]
 80013f6:	b2da      	uxtb	r2, r3
 80013f8:	4b0d      	ldr	r3, [pc, #52]	; (8001430 <BleGetBdAddress+0x80>)
 80013fa:	711a      	strb	r2, [r3, #4]
    bd_addr_udn[5] = (uint8_t)( (company_id & 0x0000FF00) >> 8 );
 80013fc:	68bb      	ldr	r3, [r7, #8]
 80013fe:	0a1b      	lsrs	r3, r3, #8
 8001400:	b2da      	uxtb	r2, r3
 8001402:	4b0b      	ldr	r3, [pc, #44]	; (8001430 <BleGetBdAddress+0x80>)
 8001404:	715a      	strb	r2, [r3, #5]

    bd_addr = (const uint8_t *)bd_addr_udn;
 8001406:	4b0a      	ldr	r3, [pc, #40]	; (8001430 <BleGetBdAddress+0x80>)
 8001408:	617b      	str	r3, [r7, #20]
 800140a:	e00b      	b.n	8001424 <BleGetBdAddress+0x74>
  }
  else
  {
    otp_addr = OTP_Read(0);
 800140c:	2000      	movs	r0, #0
 800140e:	f00c fb55 	bl	800dabc <OTP_Read>
 8001412:	60f8      	str	r0, [r7, #12]
    if(otp_addr)
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	2b00      	cmp	r3, #0
 8001418:	d002      	beq.n	8001420 <BleGetBdAddress+0x70>
    {
      bd_addr = ((OTP_ID0_t*)otp_addr)->bd_address;
 800141a:	68fb      	ldr	r3, [r7, #12]
 800141c:	617b      	str	r3, [r7, #20]
 800141e:	e001      	b.n	8001424 <BleGetBdAddress+0x74>
    }
    else
    {
      bd_addr = M_bd_addr;
 8001420:	4b04      	ldr	r3, [pc, #16]	; (8001434 <BleGetBdAddress+0x84>)
 8001422:	617b      	str	r3, [r7, #20]
    }

  }

  return bd_addr;
 8001424:	697b      	ldr	r3, [r7, #20]
}
 8001426:	4618      	mov	r0, r3
 8001428:	3718      	adds	r7, #24
 800142a:	46bd      	mov	sp, r7
 800142c:	bd80      	pop	{r7, pc}
 800142e:	bf00      	nop
 8001430:	200003d4 	.word	0x200003d4
 8001434:	08016f14 	.word	0x08016f14

08001438 <Adv_Mgr>:
  return;
}
*/

static void Adv_Mgr( void )
{
 8001438:	b580      	push	{r7, lr}
 800143a:	af00      	add	r7, sp, #0
  /**
   * The code shall be executed in the background as an aci command may be sent
   * The background is the only place where the application can make sure a new aci command
   * is not sent if there is a pending one
   */
  osThreadFlagsSet( AdvUpdateProcessId, 1 );
 800143c:	4b03      	ldr	r3, [pc, #12]	; (800144c <Adv_Mgr+0x14>)
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	2101      	movs	r1, #1
 8001442:	4618      	mov	r0, r3
 8001444:	f00d f930 	bl	800e6a8 <osThreadFlagsSet>

  return;
 8001448:	bf00      	nop
}
 800144a:	bd80      	pop	{r7, pc}
 800144c:	200078b4 	.word	0x200078b4

08001450 <AdvUpdateProcess>:

static void AdvUpdateProcess(void *argument)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	b082      	sub	sp, #8
 8001454:	af00      	add	r7, sp, #0
 8001456:	6078      	str	r0, [r7, #4]
  UNUSED(argument);

  for(;;)
  {
    osThreadFlagsWait( 1, osFlagsWaitAny, osWaitForever);
 8001458:	f04f 32ff 	mov.w	r2, #4294967295
 800145c:	2100      	movs	r1, #0
 800145e:	2001      	movs	r0, #1
 8001460:	f00d f984 	bl	800e76c <osThreadFlagsWait>
    Adv_Update( );
 8001464:	f000 f801 	bl	800146a <Adv_Update>
    osThreadFlagsWait( 1, osFlagsWaitAny, osWaitForever);
 8001468:	e7f6      	b.n	8001458 <AdvUpdateProcess+0x8>

0800146a <Adv_Update>:
  }
}

static void Adv_Update( void )
{
 800146a:	b580      	push	{r7, lr}
 800146c:	af00      	add	r7, sp, #0
  Adv_Request(APP_BLE_LP_ADV);
 800146e:	2002      	movs	r0, #2
 8001470:	f7ff fef8 	bl	8001264 <Adv_Request>

  return;
 8001474:	bf00      	nop
}
 8001476:	bd80      	pop	{r7, pc}

08001478 <HciUserEvtProcess>:
  }
  return;
}

static void HciUserEvtProcess(void *argument)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	b082      	sub	sp, #8
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
  UNUSED(argument);

  for(;;)
  {
    osThreadFlagsWait( 1, osFlagsWaitAny, osWaitForever);
 8001480:	f04f 32ff 	mov.w	r2, #4294967295
 8001484:	2100      	movs	r1, #0
 8001486:	2001      	movs	r0, #1
 8001488:	f00d f970 	bl	800e76c <osThreadFlagsWait>
    hci_user_evt_proc( );
 800148c:	f00b fc44 	bl	800cd18 <hci_user_evt_proc>
    osThreadFlagsWait( 1, osFlagsWaitAny, osWaitForever);
 8001490:	e7f6      	b.n	8001480 <HciUserEvtProcess+0x8>
	...

08001494 <hci_notify_asynch_evt>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void hci_notify_asynch_evt(void* pdata)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	b082      	sub	sp, #8
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]
  UNUSED(pdata);
  osThreadFlagsSet( HciUserEvtProcessId, 1 );
 800149c:	4b04      	ldr	r3, [pc, #16]	; (80014b0 <hci_notify_asynch_evt+0x1c>)
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	2101      	movs	r1, #1
 80014a2:	4618      	mov	r0, r3
 80014a4:	f00d f900 	bl	800e6a8 <osThreadFlagsSet>
  return;
 80014a8:	bf00      	nop
}
 80014aa:	3708      	adds	r7, #8
 80014ac:	46bd      	mov	sp, r7
 80014ae:	bd80      	pop	{r7, pc}
 80014b0:	20007788 	.word	0x20007788

080014b4 <hci_cmd_resp_release>:

void hci_cmd_resp_release(uint32_t flag)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b082      	sub	sp, #8
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	6078      	str	r0, [r7, #4]
  UNUSED(flag);
  osSemaphoreRelease( SemHciId );
 80014bc:	4b04      	ldr	r3, [pc, #16]	; (80014d0 <hci_cmd_resp_release+0x1c>)
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	4618      	mov	r0, r3
 80014c2:	f00d fc61 	bl	800ed88 <osSemaphoreRelease>
  return;
 80014c6:	bf00      	nop
}
 80014c8:	3708      	adds	r7, #8
 80014ca:	46bd      	mov	sp, r7
 80014cc:	bd80      	pop	{r7, pc}
 80014ce:	bf00      	nop
 80014d0:	20007784 	.word	0x20007784

080014d4 <hci_cmd_resp_wait>:

void hci_cmd_resp_wait(uint32_t timeout)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b082      	sub	sp, #8
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]
  UNUSED(timeout);
  osSemaphoreAcquire( SemHciId, osWaitForever );
 80014dc:	4b05      	ldr	r3, [pc, #20]	; (80014f4 <hci_cmd_resp_wait+0x20>)
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	f04f 31ff 	mov.w	r1, #4294967295
 80014e4:	4618      	mov	r0, r3
 80014e6:	f00d fbe9 	bl	800ecbc <osSemaphoreAcquire>
  return;
 80014ea:	bf00      	nop
}
 80014ec:	3708      	adds	r7, #8
 80014ee:	46bd      	mov	sp, r7
 80014f0:	bd80      	pop	{r7, pc}
 80014f2:	bf00      	nop
 80014f4:	20007784 	.word	0x20007784

080014f8 <BLE_UserEvtRx>:

static void BLE_UserEvtRx( void * pPayload )
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b084      	sub	sp, #16
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]
  SVCCTL_UserEvtFlowStatus_t svctl_return_status;
  tHCI_UserEvtRxParam *pParam;

  pParam = (tHCI_UserEvtRxParam *)pPayload;
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	60fb      	str	r3, [r7, #12]

  svctl_return_status = SVCCTL_UserEvtRx((void *)&(pParam->pckt->evtserial));
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	685b      	ldr	r3, [r3, #4]
 8001508:	3308      	adds	r3, #8
 800150a:	4618      	mov	r0, r3
 800150c:	f00a fbb0 	bl	800bc70 <SVCCTL_UserEvtRx>
 8001510:	4603      	mov	r3, r0
 8001512:	72fb      	strb	r3, [r7, #11]
  if (svctl_return_status != SVCCTL_UserEvtFlowDisable)
 8001514:	7afb      	ldrb	r3, [r7, #11]
 8001516:	2b00      	cmp	r3, #0
 8001518:	d003      	beq.n	8001522 <BLE_UserEvtRx+0x2a>
  {
    pParam->status = HCI_TL_UserEventFlow_Enable;
 800151a:	68fb      	ldr	r3, [r7, #12]
 800151c:	2201      	movs	r2, #1
 800151e:	701a      	strb	r2, [r3, #0]
  }
  else
  {
    pParam->status = HCI_TL_UserEventFlow_Disable;
  }
}
 8001520:	e002      	b.n	8001528 <BLE_UserEvtRx+0x30>
    pParam->status = HCI_TL_UserEventFlow_Disable;
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	2200      	movs	r2, #0
 8001526:	701a      	strb	r2, [r3, #0]
}
 8001528:	bf00      	nop
 800152a:	3710      	adds	r7, #16
 800152c:	46bd      	mov	sp, r7
 800152e:	bd80      	pop	{r7, pc}

08001530 <BLE_StatusNot>:

static void BLE_StatusNot( HCI_TL_CmdStatus_t status )
{
 8001530:	b580      	push	{r7, lr}
 8001532:	b082      	sub	sp, #8
 8001534:	af00      	add	r7, sp, #0
 8001536:	4603      	mov	r3, r0
 8001538:	71fb      	strb	r3, [r7, #7]
  switch (status)
 800153a:	79fb      	ldrb	r3, [r7, #7]
 800153c:	2b00      	cmp	r3, #0
 800153e:	d002      	beq.n	8001546 <BLE_StatusNot+0x16>
 8001540:	2b01      	cmp	r3, #1
 8001542:	d008      	beq.n	8001556 <BLE_StatusNot+0x26>
    case HCI_TL_CmdAvailable:
      osMutexRelease( MtxHciId );
      break;

    default:
      break;
 8001544:	e00d      	b.n	8001562 <BLE_StatusNot+0x32>
      osMutexAcquire( MtxHciId, osWaitForever );
 8001546:	4b09      	ldr	r3, [pc, #36]	; (800156c <BLE_StatusNot+0x3c>)
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	f04f 31ff 	mov.w	r1, #4294967295
 800154e:	4618      	mov	r0, r3
 8001550:	f00d fa68 	bl	800ea24 <osMutexAcquire>
      break;
 8001554:	e005      	b.n	8001562 <BLE_StatusNot+0x32>
      osMutexRelease( MtxHciId );
 8001556:	4b05      	ldr	r3, [pc, #20]	; (800156c <BLE_StatusNot+0x3c>)
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	4618      	mov	r0, r3
 800155c:	f00d fac0 	bl	800eae0 <osMutexRelease>
      break;
 8001560:	bf00      	nop
  }
  return;
 8001562:	bf00      	nop
}
 8001564:	3708      	adds	r7, #8
 8001566:	46bd      	mov	sp, r7
 8001568:	bd80      	pop	{r7, pc}
 800156a:	bf00      	nop
 800156c:	20007798 	.word	0x20007798

08001570 <P2PS_STM_App_Notification>:
/* Private function prototypes -----------------------------------------------*/
void P2PS_APP_Context_Init(void);

/* Functions Definition ------------------------------------------------------*/
void P2PS_STM_App_Notification(P2PS_STM_App_Notification_evt_t *pNotification)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	b082      	sub	sp, #8
 8001574:	af00      	add	r7, sp, #0
 8001576:	6078      	str	r0, [r7, #4]
  switch(pNotification->P2P_Evt_Opcode)
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	781b      	ldrb	r3, [r3, #0]
 800157c:	2b01      	cmp	r3, #1
 800157e:	d00e      	beq.n	800159e <P2PS_STM_App_Notification+0x2e>
 8001580:	2b03      	cmp	r3, #3
 8001582:	d016      	beq.n	80015b2 <P2PS_STM_App_Notification+0x42>
 8001584:	2b00      	cmp	r3, #0
 8001586:	d000      	beq.n	800158a <P2PS_STM_App_Notification+0x1a>
    case P2PS_STM_WRITE_EVT:
		osMessageQueuePut(bleRXqueueHandle, &(pNotification->DataTransfered), 0, 0);
      break;

    default:
      break;
 8001588:	e01c      	b.n	80015c4 <P2PS_STM_App_Notification+0x54>
      P2P_Server_App_Context.Notification_Status = 1;
 800158a:	4b10      	ldr	r3, [pc, #64]	; (80015cc <P2PS_STM_App_Notification+0x5c>)
 800158c:	2201      	movs	r2, #1
 800158e:	701a      	strb	r2, [r3, #0]
      APP_DBG_MSG("-- P2P APPLICATION SERVER : NOTIFICATION ENABLED\n");
 8001590:	480f      	ldr	r0, [pc, #60]	; (80015d0 <P2PS_STM_App_Notification+0x60>)
 8001592:	f011 fe9d 	bl	80132d0 <puts>
      APP_DBG_MSG(" \n\r");
 8001596:	480f      	ldr	r0, [pc, #60]	; (80015d4 <P2PS_STM_App_Notification+0x64>)
 8001598:	f011 fe26 	bl	80131e8 <iprintf>
      break;
 800159c:	e012      	b.n	80015c4 <P2PS_STM_App_Notification+0x54>
      P2P_Server_App_Context.Notification_Status = 0;
 800159e:	4b0b      	ldr	r3, [pc, #44]	; (80015cc <P2PS_STM_App_Notification+0x5c>)
 80015a0:	2200      	movs	r2, #0
 80015a2:	701a      	strb	r2, [r3, #0]
      APP_DBG_MSG("-- P2P APPLICATION SERVER : NOTIFICATION DISABLED\n");
 80015a4:	480c      	ldr	r0, [pc, #48]	; (80015d8 <P2PS_STM_App_Notification+0x68>)
 80015a6:	f011 fe93 	bl	80132d0 <puts>
      APP_DBG_MSG(" \n\r");
 80015aa:	480a      	ldr	r0, [pc, #40]	; (80015d4 <P2PS_STM_App_Notification+0x64>)
 80015ac:	f011 fe1c 	bl	80131e8 <iprintf>
      break;
 80015b0:	e008      	b.n	80015c4 <P2PS_STM_App_Notification+0x54>
		osMessageQueuePut(bleRXqueueHandle, &(pNotification->DataTransfered), 0, 0);
 80015b2:	4b0a      	ldr	r3, [pc, #40]	; (80015dc <P2PS_STM_App_Notification+0x6c>)
 80015b4:	6818      	ldr	r0, [r3, #0]
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	1d19      	adds	r1, r3, #4
 80015ba:	2300      	movs	r3, #0
 80015bc:	2200      	movs	r2, #0
 80015be:	f00d fcc1 	bl	800ef44 <osMessageQueuePut>
      break;
 80015c2:	bf00      	nop
  }
  return;
 80015c4:	bf00      	nop
}
 80015c6:	3708      	adds	r7, #8
 80015c8:	46bd      	mov	sp, r7
 80015ca:	bd80      	pop	{r7, pc}
 80015cc:	20000298 	.word	0x20000298
 80015d0:	08016b60 	.word	0x08016b60
 80015d4:	08016b94 	.word	0x08016b94
 80015d8:	08016b98 	.word	0x08016b98
 80015dc:	20007790 	.word	0x20007790

080015e0 <P2PS_APP_Notification>:

void P2PS_APP_Notification(P2PS_APP_ConnHandle_Not_evt_t *pNotification)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b082      	sub	sp, #8
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
  switch(pNotification->P2P_Evt_Opcode)
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	781b      	ldrb	r3, [r3, #0]
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d005      	beq.n	80015fc <P2PS_APP_Notification+0x1c>
 80015f0:	2b01      	cmp	r3, #1
 80015f2:	d000      	beq.n	80015f6 <P2PS_APP_Notification+0x16>

    case PEER_DISCON_HANDLE_EVT :
       P2PS_APP_Context_Init();
       break;
    default:
      break;
 80015f4:	e003      	b.n	80015fe <P2PS_APP_Notification+0x1e>
       P2PS_APP_Context_Init();
 80015f6:	f000 f813 	bl	8001620 <P2PS_APP_Context_Init>
       break;
 80015fa:	e000      	b.n	80015fe <P2PS_APP_Notification+0x1e>
    break;
 80015fc:	bf00      	nop
  }
  return;
 80015fe:	bf00      	nop
}
 8001600:	3708      	adds	r7, #8
 8001602:	46bd      	mov	sp, r7
 8001604:	bd80      	pop	{r7, pc}
	...

08001608 <P2PS_APP_Init>:

void P2PS_APP_Init(void)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	af00      	add	r7, sp, #0
  P2P_Server_App_Context.Notification_Status=0;
 800160c:	4b03      	ldr	r3, [pc, #12]	; (800161c <P2PS_APP_Init+0x14>)
 800160e:	2200      	movs	r2, #0
 8001610:	701a      	strb	r2, [r3, #0]
  P2PS_APP_Context_Init();
 8001612:	f000 f805 	bl	8001620 <P2PS_APP_Context_Init>
  return;
 8001616:	bf00      	nop
}
 8001618:	bd80      	pop	{r7, pc}
 800161a:	bf00      	nop
 800161c:	20000298 	.word	0x20000298

08001620 <P2PS_APP_Context_Init>:

void  P2PS_APP_Context_Init(void)
{
 8001620:	b490      	push	{r4, r7}
 8001622:	af00      	add	r7, sp, #0
	  //init context on app init and on reconnect events
	  P2P_Server_App_Context.LedControl.Device_Led_Selection=0x01; /* Device1 */
 8001624:	4b0e      	ldr	r3, [pc, #56]	; (8001660 <P2PS_APP_Context_Init+0x40>)
 8001626:	2201      	movs	r2, #1
 8001628:	705a      	strb	r2, [r3, #1]
	  P2P_Server_App_Context.LedControl.Led1=0x00; /* led OFF */
 800162a:	4b0d      	ldr	r3, [pc, #52]	; (8001660 <P2PS_APP_Context_Init+0x40>)
 800162c:	2200      	movs	r2, #0
 800162e:	709a      	strb	r2, [r3, #2]
	  P2P_Server_App_Context.ButtonControl.Device_Button_Selection=0x01;/* Device1 */
 8001630:	4b0b      	ldr	r3, [pc, #44]	; (8001660 <P2PS_APP_Context_Init+0x40>)
 8001632:	2201      	movs	r2, #1
 8001634:	70da      	strb	r2, [r3, #3]
	  P2P_Server_App_Context.ButtonControl.ButtonStatus=0x00;
 8001636:	4b0a      	ldr	r3, [pc, #40]	; (8001660 <P2PS_APP_Context_Init+0x40>)
 8001638:	2200      	movs	r2, #0
 800163a:	711a      	strb	r2, [r3, #4]
	  P2P_Server_App_Context.OTATimestamp=0x0000000000000000;
 800163c:	4a08      	ldr	r2, [pc, #32]	; (8001660 <P2PS_APP_Context_Init+0x40>)
 800163e:	f04f 0300 	mov.w	r3, #0
 8001642:	f04f 0400 	mov.w	r4, #0
 8001646:	e9c2 3402 	strd	r3, r4, [r2, #8]
	  P2P_Server_App_Context.OTA12HrFormat=0x00;
 800164a:	4b05      	ldr	r3, [pc, #20]	; (8001660 <P2PS_APP_Context_Init+0x40>)
 800164c:	2200      	movs	r2, #0
 800164e:	741a      	strb	r2, [r3, #16]
	  P2P_Server_App_Context.OTADaylightSavings=0x00;
 8001650:	4b03      	ldr	r3, [pc, #12]	; (8001660 <P2PS_APP_Context_Init+0x40>)
 8001652:	2200      	movs	r2, #0
 8001654:	745a      	strb	r2, [r3, #17]
}
 8001656:	bf00      	nop
 8001658:	46bd      	mov	sp, r7
 800165a:	bc90      	pop	{r4, r7}
 800165c:	4770      	bx	lr
 800165e:	bf00      	nop
 8001660:	20000298 	.word	0x20000298

08001664 <P2PS_Send_Data>:

  return;
}

void P2PS_Send_Data(uint16_t data)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	b08c      	sub	sp, #48	; 0x30
 8001668:	af00      	add	r7, sp, #0
 800166a:	4603      	mov	r3, r0
 800166c:	80fb      	strh	r3, [r7, #6]

   if(P2P_Server_App_Context.Notification_Status){
 800166e:	4b30      	ldr	r3, [pc, #192]	; (8001730 <P2PS_Send_Data+0xcc>)
 8001670:	781b      	ldrb	r3, [r3, #0]
 8001672:	2b00      	cmp	r3, #0
 8001674:	d054      	beq.n	8001720 <P2PS_Send_Data+0xbc>
    APP_DBG_MSG("-- P2P APPLICATION SERVER  : SEND TIMESTAMPED DATA \n ");
 8001676:	482f      	ldr	r0, [pc, #188]	; (8001734 <P2PS_Send_Data+0xd0>)
 8001678:	f011 fdb6 	bl	80131e8 <iprintf>
    APP_DBG_MSG(" \n\r");
 800167c:	482e      	ldr	r0, [pc, #184]	; (8001738 <P2PS_Send_Data+0xd4>)
 800167e:	f011 fdb3 	bl	80131e8 <iprintf>

    RTC_TimeTypeDef cTime;
	RTC_DateTypeDef cDate;

	osMutexAcquire(rtcMutexHandle, portMAX_DELAY);
 8001682:	4b2e      	ldr	r3, [pc, #184]	; (800173c <P2PS_Send_Data+0xd8>)
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	f04f 31ff 	mov.w	r1, #4294967295
 800168a:	4618      	mov	r0, r3
 800168c:	f00d f9ca 	bl	800ea24 <osMutexAcquire>
	HAL_RTC_GetTime(&hrtc, &cTime, RTC_FORMAT_BCD);
 8001690:	f107 031c 	add.w	r3, r7, #28
 8001694:	2201      	movs	r2, #1
 8001696:	4619      	mov	r1, r3
 8001698:	4829      	ldr	r0, [pc, #164]	; (8001740 <P2PS_Send_Data+0xdc>)
 800169a:	f008 fa8e 	bl	8009bba <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &cDate, RTC_FORMAT_BCD);
 800169e:	f107 0318 	add.w	r3, r7, #24
 80016a2:	2201      	movs	r2, #1
 80016a4:	4619      	mov	r1, r3
 80016a6:	4826      	ldr	r0, [pc, #152]	; (8001740 <P2PS_Send_Data+0xdc>)
 80016a8:	f008 fb91 	bl	8009dce <HAL_RTC_GetDate>
	osMutexRelease(rtcMutexHandle);
 80016ac:	4b23      	ldr	r3, [pc, #140]	; (800173c <P2PS_Send_Data+0xd8>)
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	4618      	mov	r0, r3
 80016b2:	f00d fa15 	bl	800eae0 <osMutexRelease>

	uint16_t sendval[5] = {0};
 80016b6:	f107 030c 	add.w	r3, r7, #12
 80016ba:	2200      	movs	r2, #0
 80016bc:	601a      	str	r2, [r3, #0]
 80016be:	605a      	str	r2, [r3, #4]
 80016c0:	811a      	strh	r2, [r3, #8]

	sendval[4] = (cDate.WeekDay << (8*1)) | cDate.Month;
 80016c2:	7e3b      	ldrb	r3, [r7, #24]
 80016c4:	021b      	lsls	r3, r3, #8
 80016c6:	b21a      	sxth	r2, r3
 80016c8:	7e7b      	ldrb	r3, [r7, #25]
 80016ca:	b21b      	sxth	r3, r3
 80016cc:	4313      	orrs	r3, r2
 80016ce:	b21b      	sxth	r3, r3
 80016d0:	b29b      	uxth	r3, r3
 80016d2:	82bb      	strh	r3, [r7, #20]
	sendval[3] = (cDate.Date << (8*1)) | cDate.Year;
 80016d4:	7ebb      	ldrb	r3, [r7, #26]
 80016d6:	021b      	lsls	r3, r3, #8
 80016d8:	b21a      	sxth	r2, r3
 80016da:	7efb      	ldrb	r3, [r7, #27]
 80016dc:	b21b      	sxth	r3, r3
 80016de:	4313      	orrs	r3, r2
 80016e0:	b21b      	sxth	r3, r3
 80016e2:	b29b      	uxth	r3, r3
 80016e4:	827b      	strh	r3, [r7, #18]

	sendval[2] = (cTime.Hours << (8*1)) | cTime.Minutes;
 80016e6:	7f3b      	ldrb	r3, [r7, #28]
 80016e8:	021b      	lsls	r3, r3, #8
 80016ea:	b21a      	sxth	r2, r3
 80016ec:	7f7b      	ldrb	r3, [r7, #29]
 80016ee:	b21b      	sxth	r3, r3
 80016f0:	4313      	orrs	r3, r2
 80016f2:	b21b      	sxth	r3, r3
 80016f4:	b29b      	uxth	r3, r3
 80016f6:	823b      	strh	r3, [r7, #16]
	sendval[1] = (cTime.Seconds << (8*1)) | cTime.TimeFormat;
 80016f8:	7fbb      	ldrb	r3, [r7, #30]
 80016fa:	021b      	lsls	r3, r3, #8
 80016fc:	b21a      	sxth	r2, r3
 80016fe:	7ffb      	ldrb	r3, [r7, #31]
 8001700:	b21b      	sxth	r3, r3
 8001702:	4313      	orrs	r3, r2
 8001704:	b21b      	sxth	r3, r3
 8001706:	b29b      	uxth	r3, r3
 8001708:	81fb      	strh	r3, [r7, #14]

	sendval[0] = data;
 800170a:	88fb      	ldrh	r3, [r7, #6]
 800170c:	81bb      	strh	r3, [r7, #12]

	P2PS_STM_App_Update_Int8(P2P_NOTIFY_CHAR_UUID, (uint8_t *)&sendval, 10);
 800170e:	f107 030c 	add.w	r3, r7, #12
 8001712:	220a      	movs	r2, #10
 8001714:	4619      	mov	r1, r3
 8001716:	f64f 6042 	movw	r0, #65090	; 0xfe42
 800171a:	f00c f8f9 	bl	800d910 <P2PS_STM_App_Update_Int8>

   } else {
    APP_DBG_MSG("-- P2P APPLICATION SERVER : CAN'T INFORM CLIENT -  NOTIFICATION DISABLED\n ");
   }

  return;
 800171e:	e003      	b.n	8001728 <P2PS_Send_Data+0xc4>
    APP_DBG_MSG("-- P2P APPLICATION SERVER : CAN'T INFORM CLIENT -  NOTIFICATION DISABLED\n ");
 8001720:	4808      	ldr	r0, [pc, #32]	; (8001744 <P2PS_Send_Data+0xe0>)
 8001722:	f011 fd61 	bl	80131e8 <iprintf>
  return;
 8001726:	bf00      	nop
}
 8001728:	3730      	adds	r7, #48	; 0x30
 800172a:	46bd      	mov	sp, r7
 800172c:	bd80      	pop	{r7, pc}
 800172e:	bf00      	nop
 8001730:	20000298 	.word	0x20000298
 8001734:	08016c50 	.word	0x08016c50
 8001738:	08016b94 	.word	0x08016b94
 800173c:	200077c0 	.word	0x200077c0
 8001740:	2000779c 	.word	0x2000779c
 8001744:	08016c04 	.word	0x08016c04

08001748 <LL_PWR_EnableBootC2>:
  * @brief  Boot CPU2 after reset or wakeup from stop or standby modes
  * @rmtoll CR4          C2BOOT        LL_PWR_EnableBootC2
  * @retval None
  */
__STATIC_INLINE void LL_PWR_EnableBootC2(void)
{
 8001748:	b480      	push	{r7}
 800174a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR4, PWR_CR4_C2BOOT);
 800174c:	4b05      	ldr	r3, [pc, #20]	; (8001764 <LL_PWR_EnableBootC2+0x1c>)
 800174e:	68db      	ldr	r3, [r3, #12]
 8001750:	4a04      	ldr	r2, [pc, #16]	; (8001764 <LL_PWR_EnableBootC2+0x1c>)
 8001752:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001756:	60d3      	str	r3, [r2, #12]
}
 8001758:	bf00      	nop
 800175a:	46bd      	mov	sp, r7
 800175c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001760:	4770      	bx	lr
 8001762:	bf00      	nop
 8001764:	58000400 	.word	0x58000400

08001768 <LL_C2_EXTI_EnableEvent_32_63>:
  *         @arg @ref LL_EXTI_LINE_40
  *         @arg @ref LL_EXTI_LINE_41
  * @retval None
  */
__STATIC_INLINE void LL_C2_EXTI_EnableEvent_32_63(uint32_t ExtiLine)
{
 8001768:	b480      	push	{r7}
 800176a:	b083      	sub	sp, #12
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->C2EMR2, ExtiLine);
 8001770:	4b06      	ldr	r3, [pc, #24]	; (800178c <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 8001772:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 8001776:	4905      	ldr	r1, [pc, #20]	; (800178c <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	4313      	orrs	r3, r2
 800177c:	f8c1 30d4 	str.w	r3, [r1, #212]	; 0xd4
}
 8001780:	bf00      	nop
 8001782:	370c      	adds	r7, #12
 8001784:	46bd      	mov	sp, r7
 8001786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178a:	4770      	bx	lr
 800178c:	58000800 	.word	0x58000800

08001790 <LL_EXTI_EnableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_32_63(uint32_t ExtiLine)
{
 8001790:	b480      	push	{r7}
 8001792:	b083      	sub	sp, #12
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 8001798:	4b05      	ldr	r3, [pc, #20]	; (80017b0 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 800179a:	6a1a      	ldr	r2, [r3, #32]
 800179c:	4904      	ldr	r1, [pc, #16]	; (80017b0 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	4313      	orrs	r3, r2
 80017a2:	620b      	str	r3, [r1, #32]
}
 80017a4:	bf00      	nop
 80017a6:	370c      	adds	r7, #12
 80017a8:	46bd      	mov	sp, r7
 80017aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ae:	4770      	bx	lr
 80017b0:	58000800 	.word	0x58000800

080017b4 <LL_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_AHB3_GRP1_PERIPH_FLASH
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 80017b4:	b480      	push	{r7}
 80017b6:	b085      	sub	sp, #20
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB3ENR, Periphs);
 80017bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80017c0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80017c2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	4313      	orrs	r3, r2
 80017ca:	650b      	str	r3, [r1, #80]	; 0x50
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 80017cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80017d0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	4013      	ands	r3, r2
 80017d6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80017d8:	68fb      	ldr	r3, [r7, #12]
}
 80017da:	bf00      	nop
 80017dc:	3714      	adds	r7, #20
 80017de:	46bd      	mov	sp, r7
 80017e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e4:	4770      	bx	lr

080017e6 <LL_C2_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_IPCC
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_FLASH
  * @retval None
  */
__STATIC_INLINE void LL_C2_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 80017e6:	b480      	push	{r7}
 80017e8:	b085      	sub	sp, #20
 80017ea:	af00      	add	r7, sp, #0
 80017ec:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->C2AHB3ENR, Periphs);
 80017ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80017f2:	f8d3 2150 	ldr.w	r2, [r3, #336]	; 0x150
 80017f6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	4313      	orrs	r3, r2
 80017fe:	f8c1 3150 	str.w	r3, [r1, #336]	; 0x150
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->C2AHB3ENR, Periphs);
 8001802:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001806:	f8d3 2150 	ldr.w	r2, [r3, #336]	; 0x150
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	4013      	ands	r3, r2
 800180e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001810:	68fb      	ldr	r3, [r7, #12]
}
 8001812:	bf00      	nop
 8001814:	3714      	adds	r7, #20
 8001816:	46bd      	mov	sp, r7
 8001818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181c:	4770      	bx	lr

0800181e <LL_C1_IPCC_EnableIT_TXF>:
  * @rmtoll C1CR          TXFIE         LL_C1_IPCC_EnableIT_TXF
  * @param  IPCCx IPCC Instance.
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableIT_TXF(IPCC_TypeDef *IPCCx)
{
 800181e:	b480      	push	{r7}
 8001820:	b083      	sub	sp, #12
 8001822:	af00      	add	r7, sp, #0
 8001824:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_TXFIE);
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	601a      	str	r2, [r3, #0]
}
 8001832:	bf00      	nop
 8001834:	370c      	adds	r7, #12
 8001836:	46bd      	mov	sp, r7
 8001838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183c:	4770      	bx	lr

0800183e <LL_C1_IPCC_EnableIT_RXO>:
  * @rmtoll C1CR          RXOIE         LL_C1_IPCC_EnableIT_RXO
  * @param  IPCCx IPCC Instance.
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableIT_RXO(IPCC_TypeDef *IPCCx)
{
 800183e:	b480      	push	{r7}
 8001840:	b083      	sub	sp, #12
 8001842:	af00      	add	r7, sp, #0
 8001844:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_RXOIE);
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	f043 0201 	orr.w	r2, r3, #1
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	601a      	str	r2, [r3, #0]
}
 8001852:	bf00      	nop
 8001854:	370c      	adds	r7, #12
 8001856:	46bd      	mov	sp, r7
 8001858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185c:	4770      	bx	lr

0800185e <LL_C1_IPCC_EnableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800185e:	b480      	push	{r7}
 8001860:	b083      	sub	sp, #12
 8001862:	af00      	add	r7, sp, #0
 8001864:	6078      	str	r0, [r7, #4]
 8001866:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	685a      	ldr	r2, [r3, #4]
 800186c:	683b      	ldr	r3, [r7, #0]
 800186e:	041b      	lsls	r3, r3, #16
 8001870:	43db      	mvns	r3, r3
 8001872:	401a      	ands	r2, r3
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	605a      	str	r2, [r3, #4]
}
 8001878:	bf00      	nop
 800187a:	370c      	adds	r7, #12
 800187c:	46bd      	mov	sp, r7
 800187e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001882:	4770      	bx	lr

08001884 <LL_C1_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8001884:	b480      	push	{r7}
 8001886:	b083      	sub	sp, #12
 8001888:	af00      	add	r7, sp, #0
 800188a:	6078      	str	r0, [r7, #4]
 800188c:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	685a      	ldr	r2, [r3, #4]
 8001892:	683b      	ldr	r3, [r7, #0]
 8001894:	041b      	lsls	r3, r3, #16
 8001896:	431a      	orrs	r2, r3
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	605a      	str	r2, [r3, #4]
}
 800189c:	bf00      	nop
 800189e:	370c      	adds	r7, #12
 80018a0:	46bd      	mov	sp, r7
 80018a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a6:	4770      	bx	lr

080018a8 <LL_C1_IPCC_EnableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 80018a8:	b480      	push	{r7}
 80018aa:	b083      	sub	sp, #12
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	6078      	str	r0, [r7, #4]
 80018b0:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel);
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	685a      	ldr	r2, [r3, #4]
 80018b6:	683b      	ldr	r3, [r7, #0]
 80018b8:	43db      	mvns	r3, r3
 80018ba:	401a      	ands	r2, r3
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	605a      	str	r2, [r3, #4]
}
 80018c0:	bf00      	nop
 80018c2:	370c      	adds	r7, #12
 80018c4:	46bd      	mov	sp, r7
 80018c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ca:	4770      	bx	lr

080018cc <LL_C1_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 80018cc:	b480      	push	{r7}
 80018ce:	b083      	sub	sp, #12
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	6078      	str	r0, [r7, #4]
 80018d4:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	683a      	ldr	r2, [r7, #0]
 80018da:	609a      	str	r2, [r3, #8]
}
 80018dc:	bf00      	nop
 80018de:	370c      	adds	r7, #12
 80018e0:	46bd      	mov	sp, r7
 80018e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e6:	4770      	bx	lr

080018e8 <LL_C1_IPCC_SetFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_SetFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 80018e8:	b480      	push	{r7}
 80018ea:	b083      	sub	sp, #12
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
 80018f0:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel << IPCC_C1SCR_CH1S_Pos);
 80018f2:	683b      	ldr	r3, [r7, #0]
 80018f4:	041a      	lsls	r2, r3, #16
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	609a      	str	r2, [r3, #8]
}
 80018fa:	bf00      	nop
 80018fc:	370c      	adds	r7, #12
 80018fe:	46bd      	mov	sp, r7
 8001900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001904:	4770      	bx	lr

08001906 <LL_C1_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C1_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 8001906:	b480      	push	{r7}
 8001908:	b083      	sub	sp, #12
 800190a:	af00      	add	r7, sp, #0
 800190c:	6078      	str	r0, [r7, #4]
 800190e:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C1TOC2SR, Channel) == (Channel)) ? 1UL : 0UL);
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	68da      	ldr	r2, [r3, #12]
 8001914:	683b      	ldr	r3, [r7, #0]
 8001916:	4013      	ands	r3, r2
 8001918:	683a      	ldr	r2, [r7, #0]
 800191a:	429a      	cmp	r2, r3
 800191c:	d101      	bne.n	8001922 <LL_C1_IPCC_IsActiveFlag_CHx+0x1c>
 800191e:	2301      	movs	r3, #1
 8001920:	e000      	b.n	8001924 <LL_C1_IPCC_IsActiveFlag_CHx+0x1e>
 8001922:	2300      	movs	r3, #0
}
 8001924:	4618      	mov	r0, r3
 8001926:	370c      	adds	r7, #12
 8001928:	46bd      	mov	sp, r7
 800192a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192e:	4770      	bx	lr

08001930 <LL_C2_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C2_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 8001930:	b480      	push	{r7}
 8001932:	b083      	sub	sp, #12
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
 8001938:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C2TOC1SR, Channel) == (Channel)) ? 1UL : 0UL);
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	69da      	ldr	r2, [r3, #28]
 800193e:	683b      	ldr	r3, [r7, #0]
 8001940:	4013      	ands	r3, r2
 8001942:	683a      	ldr	r2, [r7, #0]
 8001944:	429a      	cmp	r2, r3
 8001946:	d101      	bne.n	800194c <LL_C2_IPCC_IsActiveFlag_CHx+0x1c>
 8001948:	2301      	movs	r3, #1
 800194a:	e000      	b.n	800194e <LL_C2_IPCC_IsActiveFlag_CHx+0x1e>
 800194c:	2300      	movs	r3, #0
}
 800194e:	4618      	mov	r0, r3
 8001950:	370c      	adds	r7, #12
 8001952:	46bd      	mov	sp, r7
 8001954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001958:	4770      	bx	lr
	...

0800195c <HW_IPCC_Rx_Handler>:

/******************************************************************************
 * INTERRUPT HANDLER
 ******************************************************************************/
void HW_IPCC_Rx_Handler( void )
{
 800195c:	b580      	push	{r7, lr}
 800195e:	af00      	add	r7, sp, #0
  if (HW_IPCC_RX_PENDING( HW_IPCC_SYSTEM_EVENT_CHANNEL ))
 8001960:	2102      	movs	r1, #2
 8001962:	4819      	ldr	r0, [pc, #100]	; (80019c8 <HW_IPCC_Rx_Handler+0x6c>)
 8001964:	f7ff ffe4 	bl	8001930 <LL_C2_IPCC_IsActiveFlag_CHx>
 8001968:	4603      	mov	r3, r0
 800196a:	2b00      	cmp	r3, #0
 800196c:	d009      	beq.n	8001982 <HW_IPCC_Rx_Handler+0x26>
 800196e:	4b16      	ldr	r3, [pc, #88]	; (80019c8 <HW_IPCC_Rx_Handler+0x6c>)
 8001970:	685b      	ldr	r3, [r3, #4]
 8001972:	43db      	mvns	r3, r3
 8001974:	f003 0302 	and.w	r3, r3, #2
 8001978:	2b00      	cmp	r3, #0
 800197a:	d002      	beq.n	8001982 <HW_IPCC_Rx_Handler+0x26>
  {
      HW_IPCC_SYS_EvtHandler();
 800197c:	f000 f8ea 	bl	8001b54 <HW_IPCC_SYS_EvtHandler>
 8001980:	e01f      	b.n	80019c2 <HW_IPCC_Rx_Handler+0x66>
  else if (HW_IPCC_RX_PENDING( HW_IPCC_ZIGBEE_M0_REQUEST_CHANNEL ))
  {
    HW_IPCC_ZIGBEE_StackM0RequestHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_RX_PENDING( HW_IPCC_BLE_EVENT_CHANNEL ))
 8001982:	2101      	movs	r1, #1
 8001984:	4810      	ldr	r0, [pc, #64]	; (80019c8 <HW_IPCC_Rx_Handler+0x6c>)
 8001986:	f7ff ffd3 	bl	8001930 <LL_C2_IPCC_IsActiveFlag_CHx>
 800198a:	4603      	mov	r3, r0
 800198c:	2b00      	cmp	r3, #0
 800198e:	d008      	beq.n	80019a2 <HW_IPCC_Rx_Handler+0x46>
 8001990:	4b0d      	ldr	r3, [pc, #52]	; (80019c8 <HW_IPCC_Rx_Handler+0x6c>)
 8001992:	685b      	ldr	r3, [r3, #4]
 8001994:	f003 0301 	and.w	r3, r3, #1
 8001998:	2b00      	cmp	r3, #0
 800199a:	d102      	bne.n	80019a2 <HW_IPCC_Rx_Handler+0x46>
  {
    HW_IPCC_BLE_EvtHandler();
 800199c:	f000 f89e 	bl	8001adc <HW_IPCC_BLE_EvtHandler>
 80019a0:	e00f      	b.n	80019c2 <HW_IPCC_Rx_Handler+0x66>
  }
  else if (HW_IPCC_RX_PENDING( HW_IPCC_TRACES_CHANNEL ))
 80019a2:	2108      	movs	r1, #8
 80019a4:	4808      	ldr	r0, [pc, #32]	; (80019c8 <HW_IPCC_Rx_Handler+0x6c>)
 80019a6:	f7ff ffc3 	bl	8001930 <LL_C2_IPCC_IsActiveFlag_CHx>
 80019aa:	4603      	mov	r3, r0
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d009      	beq.n	80019c4 <HW_IPCC_Rx_Handler+0x68>
 80019b0:	4b05      	ldr	r3, [pc, #20]	; (80019c8 <HW_IPCC_Rx_Handler+0x6c>)
 80019b2:	685b      	ldr	r3, [r3, #4]
 80019b4:	43db      	mvns	r3, r3
 80019b6:	f003 0308 	and.w	r3, r3, #8
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d002      	beq.n	80019c4 <HW_IPCC_Rx_Handler+0x68>
  {
    HW_IPCC_TRACES_EvtHandler();
 80019be:	f000 f915 	bl	8001bec <HW_IPCC_TRACES_EvtHandler>
  }

  return;
 80019c2:	bf00      	nop
 80019c4:	bf00      	nop
}
 80019c6:	bd80      	pop	{r7, pc}
 80019c8:	58000c00 	.word	0x58000c00

080019cc <HW_IPCC_Tx_Handler>:

void HW_IPCC_Tx_Handler( void )
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	af00      	add	r7, sp, #0
  if (HW_IPCC_TX_PENDING( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL ))
 80019d0:	2102      	movs	r1, #2
 80019d2:	4822      	ldr	r0, [pc, #136]	; (8001a5c <HW_IPCC_Tx_Handler+0x90>)
 80019d4:	f7ff ff97 	bl	8001906 <LL_C1_IPCC_IsActiveFlag_CHx>
 80019d8:	4603      	mov	r3, r0
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d109      	bne.n	80019f2 <HW_IPCC_Tx_Handler+0x26>
 80019de:	4b1f      	ldr	r3, [pc, #124]	; (8001a5c <HW_IPCC_Tx_Handler+0x90>)
 80019e0:	685b      	ldr	r3, [r3, #4]
 80019e2:	43db      	mvns	r3, r3
 80019e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d002      	beq.n	80019f2 <HW_IPCC_Tx_Handler+0x26>
  {
    HW_IPCC_SYS_CmdEvtHandler();
 80019ec:	f000 f8a6 	bl	8001b3c <HW_IPCC_SYS_CmdEvtHandler>
 80019f0:	e031      	b.n	8001a56 <HW_IPCC_Tx_Handler+0x8a>
  if (HW_IPCC_TX_PENDING( HW_IPCC_ZIGBEE_CMD_APPLI_CHANNEL ))
  {
      HW_IPCC_ZIGBEE_CmdEvtHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_TX_PENDING( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL ))
 80019f2:	2102      	movs	r1, #2
 80019f4:	4819      	ldr	r0, [pc, #100]	; (8001a5c <HW_IPCC_Tx_Handler+0x90>)
 80019f6:	f7ff ff86 	bl	8001906 <LL_C1_IPCC_IsActiveFlag_CHx>
 80019fa:	4603      	mov	r3, r0
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d109      	bne.n	8001a14 <HW_IPCC_Tx_Handler+0x48>
 8001a00:	4b16      	ldr	r3, [pc, #88]	; (8001a5c <HW_IPCC_Tx_Handler+0x90>)
 8001a02:	685b      	ldr	r3, [r3, #4]
 8001a04:	43db      	mvns	r3, r3
 8001a06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d002      	beq.n	8001a14 <HW_IPCC_Tx_Handler+0x48>
  {
    HW_IPCC_SYS_CmdEvtHandler();
 8001a0e:	f000 f895 	bl	8001b3c <HW_IPCC_SYS_CmdEvtHandler>
 8001a12:	e020      	b.n	8001a56 <HW_IPCC_Tx_Handler+0x8a>
  }
  else if (HW_IPCC_TX_PENDING( HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ))
 8001a14:	2108      	movs	r1, #8
 8001a16:	4811      	ldr	r0, [pc, #68]	; (8001a5c <HW_IPCC_Tx_Handler+0x90>)
 8001a18:	f7ff ff75 	bl	8001906 <LL_C1_IPCC_IsActiveFlag_CHx>
 8001a1c:	4603      	mov	r3, r0
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d109      	bne.n	8001a36 <HW_IPCC_Tx_Handler+0x6a>
 8001a22:	4b0e      	ldr	r3, [pc, #56]	; (8001a5c <HW_IPCC_Tx_Handler+0x90>)
 8001a24:	685b      	ldr	r3, [r3, #4]
 8001a26:	43db      	mvns	r3, r3
 8001a28:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d002      	beq.n	8001a36 <HW_IPCC_Tx_Handler+0x6a>
  {
    HW_IPCC_MM_FreeBufHandler();
 8001a30:	f000 f8be 	bl	8001bb0 <HW_IPCC_MM_FreeBufHandler>
 8001a34:	e00f      	b.n	8001a56 <HW_IPCC_Tx_Handler+0x8a>
  }
  else if (HW_IPCC_TX_PENDING( HW_IPCC_HCI_ACL_DATA_CHANNEL ))
 8001a36:	2120      	movs	r1, #32
 8001a38:	4808      	ldr	r0, [pc, #32]	; (8001a5c <HW_IPCC_Tx_Handler+0x90>)
 8001a3a:	f7ff ff64 	bl	8001906 <LL_C1_IPCC_IsActiveFlag_CHx>
 8001a3e:	4603      	mov	r3, r0
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d109      	bne.n	8001a58 <HW_IPCC_Tx_Handler+0x8c>
 8001a44:	4b05      	ldr	r3, [pc, #20]	; (8001a5c <HW_IPCC_Tx_Handler+0x90>)
 8001a46:	685b      	ldr	r3, [r3, #4]
 8001a48:	43db      	mvns	r3, r3
 8001a4a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d002      	beq.n	8001a58 <HW_IPCC_Tx_Handler+0x8c>
  {
    HW_IPCC_BLE_AclDataEvtHandler();
 8001a52:	f000 f84f 	bl	8001af4 <HW_IPCC_BLE_AclDataEvtHandler>
  }

  return;
 8001a56:	bf00      	nop
 8001a58:	bf00      	nop
}
 8001a5a:	bd80      	pop	{r7, pc}
 8001a5c:	58000c00 	.word	0x58000c00

08001a60 <HW_IPCC_Enable>:
/******************************************************************************
 * GENERAL
 ******************************************************************************/
void HW_IPCC_Enable( void )
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	af00      	add	r7, sp, #0
  /**
  * Such as IPCC IP available to the CPU2, it is required to keep the IPCC clock running
    when FUS is running on CPU2 and CPU1 enters deep sleep mode
  */
  LL_C2_AHB3_GRP1_EnableClock(LL_C2_AHB3_GRP1_PERIPH_IPCC);
 8001a64:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8001a68:	f7ff febd 	bl	80017e6 <LL_C2_AHB3_GRP1_EnableClock>

   /**
   * When the device is out of standby, it is required to use the EXTI mechanism to wakeup CPU2
   */
  LL_C2_EXTI_EnableEvent_32_63( LL_EXTI_LINE_41 );
 8001a6c:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001a70:	f7ff fe7a 	bl	8001768 <LL_C2_EXTI_EnableEvent_32_63>
  LL_EXTI_EnableRisingTrig_32_63( LL_EXTI_LINE_41 );
 8001a74:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001a78:	f7ff fe8a 	bl	8001790 <LL_EXTI_EnableRisingTrig_32_63>
   * When the CPU2 receives that command, it waits for its event input to be set to restart the CPU2 firmware.
   * This is required because once C2BOOT has been set once, a clear/set on C2BOOT has no effect.
   * When SHCI_C2_Reinit( ) is not called, generating an event to the CPU2 does not have any effect
   * So, by default, the application shall both set the event flag and set the C2BOOT bit.
   */
  __SEV( );       /* Set the internal event flag and send an event to the CPU2 */
 8001a7c:	bf40      	sev
  __WFE( );       /* Clear the internal event flag */
 8001a7e:	bf20      	wfe
  LL_PWR_EnableBootC2( );
 8001a80:	f7ff fe62 	bl	8001748 <LL_PWR_EnableBootC2>

  return;
 8001a84:	bf00      	nop
}
 8001a86:	bd80      	pop	{r7, pc}

08001a88 <HW_IPCC_Init>:

void HW_IPCC_Init( void )
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock( LL_AHB3_GRP1_PERIPH_IPCC );
 8001a8c:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8001a90:	f7ff fe90 	bl	80017b4 <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_EnableIT_RXO( IPCC );
 8001a94:	4806      	ldr	r0, [pc, #24]	; (8001ab0 <HW_IPCC_Init+0x28>)
 8001a96:	f7ff fed2 	bl	800183e <LL_C1_IPCC_EnableIT_RXO>
  LL_C1_IPCC_EnableIT_TXF( IPCC );
 8001a9a:	4805      	ldr	r0, [pc, #20]	; (8001ab0 <HW_IPCC_Init+0x28>)
 8001a9c:	f7ff febf 	bl	800181e <LL_C1_IPCC_EnableIT_TXF>

  HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 8001aa0:	202c      	movs	r0, #44	; 0x2c
 8001aa2:	f004 ff3f 	bl	8006924 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 8001aa6:	202d      	movs	r0, #45	; 0x2d
 8001aa8:	f004 ff3c 	bl	8006924 <HAL_NVIC_EnableIRQ>

  return;
 8001aac:	bf00      	nop
}
 8001aae:	bd80      	pop	{r7, pc}
 8001ab0:	58000c00 	.word	0x58000c00

08001ab4 <HW_IPCC_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
void HW_IPCC_BLE_Init( void )
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 8001ab8:	2101      	movs	r1, #1
 8001aba:	4802      	ldr	r0, [pc, #8]	; (8001ac4 <HW_IPCC_BLE_Init+0x10>)
 8001abc:	f7ff fef4 	bl	80018a8 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8001ac0:	bf00      	nop
}
 8001ac2:	bd80      	pop	{r7, pc}
 8001ac4:	58000c00 	.word	0x58000c00

08001ac8 <HW_IPCC_BLE_SendCmd>:

void HW_IPCC_BLE_SendCmd( void )
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_BLE_CMD_CHANNEL );
 8001acc:	2101      	movs	r1, #1
 8001ace:	4802      	ldr	r0, [pc, #8]	; (8001ad8 <HW_IPCC_BLE_SendCmd+0x10>)
 8001ad0:	f7ff ff0a 	bl	80018e8 <LL_C1_IPCC_SetFlag_CHx>

  return;
 8001ad4:	bf00      	nop
}
 8001ad6:	bd80      	pop	{r7, pc}
 8001ad8:	58000c00 	.word	0x58000c00

08001adc <HW_IPCC_BLE_EvtHandler>:

static void HW_IPCC_BLE_EvtHandler( void )
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	af00      	add	r7, sp, #0
  HW_IPCC_BLE_RxEvtNot();
 8001ae0:	f00b fc58 	bl	800d394 <HW_IPCC_BLE_RxEvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 8001ae4:	2101      	movs	r1, #1
 8001ae6:	4802      	ldr	r0, [pc, #8]	; (8001af0 <HW_IPCC_BLE_EvtHandler+0x14>)
 8001ae8:	f7ff fef0 	bl	80018cc <LL_C1_IPCC_ClearFlag_CHx>

  return;
 8001aec:	bf00      	nop
}
 8001aee:	bd80      	pop	{r7, pc}
 8001af0:	58000c00 	.word	0x58000c00

08001af4 <HW_IPCC_BLE_AclDataEvtHandler>:

  return;
}

static void HW_IPCC_BLE_AclDataEvtHandler( void )
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_HCI_ACL_DATA_CHANNEL );
 8001af8:	2120      	movs	r1, #32
 8001afa:	4803      	ldr	r0, [pc, #12]	; (8001b08 <HW_IPCC_BLE_AclDataEvtHandler+0x14>)
 8001afc:	f7ff fec2 	bl	8001884 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_BLE_AclDataAckNot();
 8001b00:	f00b fc78 	bl	800d3f4 <HW_IPCC_BLE_AclDataAckNot>

  return;
 8001b04:	bf00      	nop
}
 8001b06:	bd80      	pop	{r7, pc}
 8001b08:	58000c00 	.word	0x58000c00

08001b0c <HW_IPCC_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
void HW_IPCC_SYS_Init( void )
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 8001b10:	2102      	movs	r1, #2
 8001b12:	4802      	ldr	r0, [pc, #8]	; (8001b1c <HW_IPCC_SYS_Init+0x10>)
 8001b14:	f7ff fec8 	bl	80018a8 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8001b18:	bf00      	nop
}
 8001b1a:	bd80      	pop	{r7, pc}
 8001b1c:	58000c00 	.word	0x58000c00

08001b20 <HW_IPCC_SYS_SendCmd>:

void HW_IPCC_SYS_SendCmd( void )
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8001b24:	2102      	movs	r1, #2
 8001b26:	4804      	ldr	r0, [pc, #16]	; (8001b38 <HW_IPCC_SYS_SendCmd+0x18>)
 8001b28:	f7ff fede 	bl	80018e8 <LL_C1_IPCC_SetFlag_CHx>
  LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8001b2c:	2102      	movs	r1, #2
 8001b2e:	4802      	ldr	r0, [pc, #8]	; (8001b38 <HW_IPCC_SYS_SendCmd+0x18>)
 8001b30:	f7ff fe95 	bl	800185e <LL_C1_IPCC_EnableTransmitChannel>

  return;
 8001b34:	bf00      	nop
}
 8001b36:	bd80      	pop	{r7, pc}
 8001b38:	58000c00 	.word	0x58000c00

08001b3c <HW_IPCC_SYS_CmdEvtHandler>:

static void HW_IPCC_SYS_CmdEvtHandler( void )
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8001b40:	2102      	movs	r1, #2
 8001b42:	4803      	ldr	r0, [pc, #12]	; (8001b50 <HW_IPCC_SYS_CmdEvtHandler+0x14>)
 8001b44:	f7ff fe9e 	bl	8001884 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_SYS_CmdEvtNot();
 8001b48:	f00b fca4 	bl	800d494 <HW_IPCC_SYS_CmdEvtNot>

  return;
 8001b4c:	bf00      	nop
}
 8001b4e:	bd80      	pop	{r7, pc}
 8001b50:	58000c00 	.word	0x58000c00

08001b54 <HW_IPCC_SYS_EvtHandler>:

static void HW_IPCC_SYS_EvtHandler( void )
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	af00      	add	r7, sp, #0
  HW_IPCC_SYS_EvtNot();
 8001b58:	f00b fcb2 	bl	800d4c0 <HW_IPCC_SYS_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 8001b5c:	2102      	movs	r1, #2
 8001b5e:	4802      	ldr	r0, [pc, #8]	; (8001b68 <HW_IPCC_SYS_EvtHandler+0x14>)
 8001b60:	f7ff feb4 	bl	80018cc <LL_C1_IPCC_ClearFlag_CHx>

  return;
 8001b64:	bf00      	nop
}
 8001b66:	bd80      	pop	{r7, pc}
 8001b68:	58000c00 	.word	0x58000c00

08001b6c <HW_IPCC_MM_SendFreeBuf>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void HW_IPCC_MM_SendFreeBuf( void (*cb)( void ) )
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b082      	sub	sp, #8
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]
  if ( LL_C1_IPCC_IsActiveFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ) )
 8001b74:	2108      	movs	r1, #8
 8001b76:	480c      	ldr	r0, [pc, #48]	; (8001ba8 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 8001b78:	f7ff fec5 	bl	8001906 <LL_C1_IPCC_IsActiveFlag_CHx>
 8001b7c:	4603      	mov	r3, r0
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d007      	beq.n	8001b92 <HW_IPCC_MM_SendFreeBuf+0x26>
  {
    FreeBufCb = cb;
 8001b82:	4a0a      	ldr	r2, [pc, #40]	; (8001bac <HW_IPCC_MM_SendFreeBuf+0x40>)
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	6013      	str	r3, [r2, #0]
    LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8001b88:	2108      	movs	r1, #8
 8001b8a:	4807      	ldr	r0, [pc, #28]	; (8001ba8 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 8001b8c:	f7ff fe67 	bl	800185e <LL_C1_IPCC_EnableTransmitChannel>
    cb();

    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
  }

  return;
 8001b90:	e006      	b.n	8001ba0 <HW_IPCC_MM_SendFreeBuf+0x34>
    cb();
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	4798      	blx	r3
    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8001b96:	2108      	movs	r1, #8
 8001b98:	4803      	ldr	r0, [pc, #12]	; (8001ba8 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 8001b9a:	f7ff fea5 	bl	80018e8 <LL_C1_IPCC_SetFlag_CHx>
  return;
 8001b9e:	bf00      	nop
}
 8001ba0:	3708      	adds	r7, #8
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	bd80      	pop	{r7, pc}
 8001ba6:	bf00      	nop
 8001ba8:	58000c00 	.word	0x58000c00
 8001bac:	200003dc 	.word	0x200003dc

08001bb0 <HW_IPCC_MM_FreeBufHandler>:

static void HW_IPCC_MM_FreeBufHandler( void )
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8001bb4:	2108      	movs	r1, #8
 8001bb6:	4806      	ldr	r0, [pc, #24]	; (8001bd0 <HW_IPCC_MM_FreeBufHandler+0x20>)
 8001bb8:	f7ff fe64 	bl	8001884 <LL_C1_IPCC_DisableTransmitChannel>

  FreeBufCb();
 8001bbc:	4b05      	ldr	r3, [pc, #20]	; (8001bd4 <HW_IPCC_MM_FreeBufHandler+0x24>)
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	4798      	blx	r3

  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8001bc2:	2108      	movs	r1, #8
 8001bc4:	4802      	ldr	r0, [pc, #8]	; (8001bd0 <HW_IPCC_MM_FreeBufHandler+0x20>)
 8001bc6:	f7ff fe8f 	bl	80018e8 <LL_C1_IPCC_SetFlag_CHx>

  return;
 8001bca:	bf00      	nop
}
 8001bcc:	bd80      	pop	{r7, pc}
 8001bce:	bf00      	nop
 8001bd0:	58000c00 	.word	0x58000c00
 8001bd4:	200003dc 	.word	0x200003dc

08001bd8 <HW_IPCC_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void HW_IPCC_TRACES_Init( void )
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_TRACES_CHANNEL );
 8001bdc:	2108      	movs	r1, #8
 8001bde:	4802      	ldr	r0, [pc, #8]	; (8001be8 <HW_IPCC_TRACES_Init+0x10>)
 8001be0:	f7ff fe62 	bl	80018a8 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8001be4:	bf00      	nop
}
 8001be6:	bd80      	pop	{r7, pc}
 8001be8:	58000c00 	.word	0x58000c00

08001bec <HW_IPCC_TRACES_EvtHandler>:

static void HW_IPCC_TRACES_EvtHandler( void )
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	af00      	add	r7, sp, #0
  HW_IPCC_TRACES_EvtNot();
 8001bf0:	f00b fd0e 	bl	800d610 <HW_IPCC_TRACES_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_TRACES_CHANNEL );
 8001bf4:	2108      	movs	r1, #8
 8001bf6:	4802      	ldr	r0, [pc, #8]	; (8001c00 <HW_IPCC_TRACES_EvtHandler+0x14>)
 8001bf8:	f7ff fe68 	bl	80018cc <LL_C1_IPCC_ClearFlag_CHx>

  return;
 8001bfc:	bf00      	nop
}
 8001bfe:	bd80      	pop	{r7, pc}
 8001c00:	58000c00 	.word	0x58000c00

08001c04 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 8001c04:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c06:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c08:	3304      	adds	r3, #4

08001c0a <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c0a:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c0c:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 8001c0e:	d3f9      	bcc.n	8001c04 <CopyDataInit>
  bx lr
 8001c10:	4770      	bx	lr

08001c12 <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 8001c12:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8001c14:	3004      	adds	r0, #4

08001c16 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 8001c16:	4288      	cmp	r0, r1
  bcc FillZerobss
 8001c18:	d3fb      	bcc.n	8001c12 <FillZerobss>
  bx lr
 8001c1a:	4770      	bx	lr

08001c1c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001c1c:	480c      	ldr	r0, [pc, #48]	; (8001c50 <LoopForever+0x4>)
  mov   sp, r0          /* set stack pointer */
 8001c1e:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8001c20:	f004 fc76 	bl	8006510 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8001c24:	480b      	ldr	r0, [pc, #44]	; (8001c54 <LoopForever+0x8>)
 8001c26:	490c      	ldr	r1, [pc, #48]	; (8001c58 <LoopForever+0xc>)
 8001c28:	4a0c      	ldr	r2, [pc, #48]	; (8001c5c <LoopForever+0x10>)
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	f7ff ffed 	bl	8001c0a <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8001c30:	480b      	ldr	r0, [pc, #44]	; (8001c60 <LoopForever+0x14>)
 8001c32:	490c      	ldr	r1, [pc, #48]	; (8001c64 <LoopForever+0x18>)
 8001c34:	2300      	movs	r3, #0
 8001c36:	f7ff ffee 	bl	8001c16 <LoopFillZerobss>
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 8001c3a:	480b      	ldr	r0, [pc, #44]	; (8001c68 <LoopForever+0x1c>)
 8001c3c:	490b      	ldr	r1, [pc, #44]	; (8001c6c <LoopForever+0x20>)
 8001c3e:	2300      	movs	r3, #0
 8001c40:	f7ff ffe9 	bl	8001c16 <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001c44:	f010 fe3c 	bl	80128c0 <__libc_init_array>
/* Call the application s entry point.*/
	bl	main
 8001c48:	f002 f944 	bl	8003ed4 <main>

08001c4c <LoopForever>:

LoopForever:
  b LoopForever
 8001c4c:	e7fe      	b.n	8001c4c <LoopForever>
 8001c4e:	0000      	.short	0x0000
  ldr   r0, =_estack
 8001c50:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 8001c54:	20000004 	.word	0x20000004
 8001c58:	200001f8 	.word	0x200001f8
 8001c5c:	080183b0 	.word	0x080183b0
  INIT_BSS _sbss, _ebss
 8001c60:	200003b8 	.word	0x200003b8
 8001c64:	20007b08 	.word	0x20007b08
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 8001c68:	200301e0 	.word	0x200301e0
 8001c6c:	20030a57 	.word	0x20030a57

08001c70 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001c70:	e7fe      	b.n	8001c70 <ADC1_IRQHandler>
	...

08001c74 <LL_EXTI_EnableIT_32_63>:
{
 8001c74:	b480      	push	{r7}
 8001c76:	b083      	sub	sp, #12
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8001c7c:	4b06      	ldr	r3, [pc, #24]	; (8001c98 <LL_EXTI_EnableIT_32_63+0x24>)
 8001c7e:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8001c82:	4905      	ldr	r1, [pc, #20]	; (8001c98 <LL_EXTI_EnableIT_32_63+0x24>)
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	4313      	orrs	r3, r2
 8001c88:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8001c8c:	bf00      	nop
 8001c8e:	370c      	adds	r7, #12
 8001c90:	46bd      	mov	sp, r7
 8001c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c96:	4770      	bx	lr
 8001c98:	58000800 	.word	0x58000800

08001c9c <LL_AHB2_GRP1_EnableClock>:
{
 8001c9c:	b480      	push	{r7}
 8001c9e:	b085      	sub	sp, #20
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001ca4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ca8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001caa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	4313      	orrs	r3, r2
 8001cb2:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001cb4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001cb8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	4013      	ands	r3, r2
 8001cbe:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001cc0:	68fb      	ldr	r3, [r7, #12]
}
 8001cc2:	bf00      	nop
 8001cc4:	3714      	adds	r7, #20
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ccc:	4770      	bx	lr

08001cce <LL_C2_AHB2_GRP1_EnableClock>:
{
 8001cce:	b480      	push	{r7}
 8001cd0:	b085      	sub	sp, #20
 8001cd2:	af00      	add	r7, sp, #0
 8001cd4:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->C2AHB2ENR, Periphs);
 8001cd6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001cda:	f8d3 214c 	ldr.w	r2, [r3, #332]	; 0x14c
 8001cde:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	4313      	orrs	r3, r2
 8001ce6:	f8c1 314c 	str.w	r3, [r1, #332]	; 0x14c
  tmpreg = READ_BIT(RCC->C2AHB2ENR, Periphs);
 8001cea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001cee:	f8d3 214c 	ldr.w	r2, [r3, #332]	; 0x14c
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	4013      	ands	r3, r2
 8001cf6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001cf8:	68fb      	ldr	r3, [r7, #12]
}
 8001cfa:	bf00      	nop
 8001cfc:	3714      	adds	r7, #20
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d04:	4770      	bx	lr

08001d06 <APPD_Init>:
static void APPD_BleDtbCfg( void );
/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void APPD_Init( void )
{
 8001d06:	b580      	push	{r7, lr}
 8001d08:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APPD_Init */
#if (CFG_DEBUGGER_SUPPORTED == 1)
  /**
   * Keep debugger enabled while in any low power mode
   */
  HAL_DBGMCU_EnableDBGSleepMode();
 8001d0a:	f004 fccf 	bl	80066ac <HAL_DBGMCU_EnableDBGSleepMode>
  HAL_DBGMCU_EnableDBGStopMode();
 8001d0e:	f004 fcd3 	bl	80066b8 <HAL_DBGMCU_EnableDBGStopMode>

  /***************** ENABLE DEBUGGER *************************************/
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_48);
 8001d12:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8001d16:	f7ff ffad 	bl	8001c74 <LL_EXTI_EnableIT_32_63>
  HAL_DBGMCU_DisableDBGStandbyMode();

#endif /* (CFG_DEBUGGER_SUPPORTED == 1) */

#if(CFG_DEBUG_TRACE != 0)
  DbgTraceInit();
 8001d1a:	f00b fe55 	bl	800d9c8 <DbgTraceInit>
#endif

  APPD_SetCPU2GpioConfig( );
 8001d1e:	f000 f821 	bl	8001d64 <APPD_SetCPU2GpioConfig>
  APPD_BleDtbCfg( );
 8001d22:	f000 f8bf 	bl	8001ea4 <APPD_BleDtbCfg>

/* USER CODE END APPD_Init */
  return;
 8001d26:	bf00      	nop
}
 8001d28:	bd80      	pop	{r7, pc}
	...

08001d2c <APPD_EnableCPU2>:

void APPD_EnableCPU2( void )
{
 8001d2c:	b5b0      	push	{r4, r5, r7, lr}
 8001d2e:	b088      	sub	sp, #32
 8001d30:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APPD_EnableCPU2 */
  SHCI_C2_DEBUG_Init_Cmd_Packet_t DebugCmdPacket =
 8001d32:	4b0b      	ldr	r3, [pc, #44]	; (8001d60 <APPD_EnableCPU2+0x34>)
 8001d34:	1d3c      	adds	r4, r7, #4
 8001d36:	461d      	mov	r5, r3
 8001d38:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001d3a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001d3c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001d40:	c403      	stmia	r4!, {r0, r1}
 8001d42:	8022      	strh	r2, [r4, #0]
 8001d44:	3402      	adds	r4, #2
 8001d46:	0c13      	lsrs	r3, r2, #16
 8001d48:	7023      	strb	r3, [r4, #0]
    NBR_OF_TRACES_CONFIG_PARAMETERS,
    NBR_OF_GENERAL_CONFIG_PARAMETERS}
  };

  /**< Traces channel initialization */
  TL_TRACES_Init( );
 8001d4a:	f00b fc4f 	bl	800d5ec <TL_TRACES_Init>

  /** GPIO DEBUG Initialization */
  SHCI_C2_DEBUG_Init( &DebugCmdPacket  );
 8001d4e:	1d3b      	adds	r3, r7, #4
 8001d50:	4618      	mov	r0, r3
 8001d52:	f00a ffae 	bl	800ccb2 <SHCI_C2_DEBUG_Init>

/* USER CODE END APPD_EnableCPU2 */
  return;
 8001d56:	bf00      	nop
}
 8001d58:	3720      	adds	r7, #32
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	bdb0      	pop	{r4, r5, r7, pc}
 8001d5e:	bf00      	nop
 8001d60:	08016c88 	.word	0x08016c88

08001d64 <APPD_SetCPU2GpioConfig>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void APPD_SetCPU2GpioConfig( void )
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	b088      	sub	sp, #32
 8001d68:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APPD_SetCPU2GpioConfig */
  GPIO_InitTypeDef gpio_config = {0};
 8001d6a:	1d3b      	adds	r3, r7, #4
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	601a      	str	r2, [r3, #0]
 8001d70:	605a      	str	r2, [r3, #4]
 8001d72:	609a      	str	r2, [r3, #8]
 8001d74:	60da      	str	r2, [r3, #12]
 8001d76:	611a      	str	r2, [r3, #16]
  uint8_t local_loop;
  uint16_t gpioa_pin_list;
  uint16_t gpiob_pin_list;
  uint16_t gpioc_pin_list;

  gpioa_pin_list = 0;
 8001d78:	2300      	movs	r3, #0
 8001d7a:	83bb      	strh	r3, [r7, #28]
  gpiob_pin_list = 0;
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	837b      	strh	r3, [r7, #26]
  gpioc_pin_list = 0;
 8001d80:	2300      	movs	r3, #0
 8001d82:	833b      	strh	r3, [r7, #24]

  for(local_loop = 0 ; local_loop < GPIO_CFG_NBR_OF_FEATURES; local_loop++)
 8001d84:	2300      	movs	r3, #0
 8001d86:	77fb      	strb	r3, [r7, #31]
 8001d88:	e033      	b.n	8001df2 <APPD_SetCPU2GpioConfig+0x8e>
  {
    if( aGpioConfigList[local_loop].enable != 0)
 8001d8a:	7ffb      	ldrb	r3, [r7, #31]
 8001d8c:	4a42      	ldr	r2, [pc, #264]	; (8001e98 <APPD_SetCPU2GpioConfig+0x134>)
 8001d8e:	00db      	lsls	r3, r3, #3
 8001d90:	4413      	add	r3, r2
 8001d92:	799b      	ldrb	r3, [r3, #6]
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d028      	beq.n	8001dea <APPD_SetCPU2GpioConfig+0x86>
    {
      switch((uint32_t)aGpioConfigList[local_loop].port)
 8001d98:	7ffb      	ldrb	r3, [r7, #31]
 8001d9a:	4a3f      	ldr	r2, [pc, #252]	; (8001e98 <APPD_SetCPU2GpioConfig+0x134>)
 8001d9c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8001da0:	4a3e      	ldr	r2, [pc, #248]	; (8001e9c <APPD_SetCPU2GpioConfig+0x138>)
 8001da2:	4293      	cmp	r3, r2
 8001da4:	d00f      	beq.n	8001dc6 <APPD_SetCPU2GpioConfig+0x62>
 8001da6:	4a3e      	ldr	r2, [pc, #248]	; (8001ea0 <APPD_SetCPU2GpioConfig+0x13c>)
 8001da8:	4293      	cmp	r3, r2
 8001daa:	d015      	beq.n	8001dd8 <APPD_SetCPU2GpioConfig+0x74>
 8001dac:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001db0:	d000      	beq.n	8001db4 <APPD_SetCPU2GpioConfig+0x50>
        case (uint32_t)GPIOC:
            gpioc_pin_list |= aGpioConfigList[local_loop].pin;
          break;

        default:
          break;
 8001db2:	e01b      	b.n	8001dec <APPD_SetCPU2GpioConfig+0x88>
            gpioa_pin_list |= aGpioConfigList[local_loop].pin;
 8001db4:	7ffb      	ldrb	r3, [r7, #31]
 8001db6:	4a38      	ldr	r2, [pc, #224]	; (8001e98 <APPD_SetCPU2GpioConfig+0x134>)
 8001db8:	00db      	lsls	r3, r3, #3
 8001dba:	4413      	add	r3, r2
 8001dbc:	889a      	ldrh	r2, [r3, #4]
 8001dbe:	8bbb      	ldrh	r3, [r7, #28]
 8001dc0:	4313      	orrs	r3, r2
 8001dc2:	83bb      	strh	r3, [r7, #28]
          break;
 8001dc4:	e012      	b.n	8001dec <APPD_SetCPU2GpioConfig+0x88>
            gpiob_pin_list |= aGpioConfigList[local_loop].pin;
 8001dc6:	7ffb      	ldrb	r3, [r7, #31]
 8001dc8:	4a33      	ldr	r2, [pc, #204]	; (8001e98 <APPD_SetCPU2GpioConfig+0x134>)
 8001dca:	00db      	lsls	r3, r3, #3
 8001dcc:	4413      	add	r3, r2
 8001dce:	889a      	ldrh	r2, [r3, #4]
 8001dd0:	8b7b      	ldrh	r3, [r7, #26]
 8001dd2:	4313      	orrs	r3, r2
 8001dd4:	837b      	strh	r3, [r7, #26]
          break;
 8001dd6:	e009      	b.n	8001dec <APPD_SetCPU2GpioConfig+0x88>
            gpioc_pin_list |= aGpioConfigList[local_loop].pin;
 8001dd8:	7ffb      	ldrb	r3, [r7, #31]
 8001dda:	4a2f      	ldr	r2, [pc, #188]	; (8001e98 <APPD_SetCPU2GpioConfig+0x134>)
 8001ddc:	00db      	lsls	r3, r3, #3
 8001dde:	4413      	add	r3, r2
 8001de0:	889a      	ldrh	r2, [r3, #4]
 8001de2:	8b3b      	ldrh	r3, [r7, #24]
 8001de4:	4313      	orrs	r3, r2
 8001de6:	833b      	strh	r3, [r7, #24]
          break;
 8001de8:	e000      	b.n	8001dec <APPD_SetCPU2GpioConfig+0x88>
      }
    }
 8001dea:	bf00      	nop
  for(local_loop = 0 ; local_loop < GPIO_CFG_NBR_OF_FEATURES; local_loop++)
 8001dec:	7ffb      	ldrb	r3, [r7, #31]
 8001dee:	3301      	adds	r3, #1
 8001df0:	77fb      	strb	r3, [r7, #31]
 8001df2:	7ffb      	ldrb	r3, [r7, #31]
 8001df4:	2b21      	cmp	r3, #33	; 0x21
 8001df6:	d9c8      	bls.n	8001d8a <APPD_SetCPU2GpioConfig+0x26>
  }

  gpio_config.Pull = GPIO_NOPULL;
 8001df8:	2300      	movs	r3, #0
 8001dfa:	60fb      	str	r3, [r7, #12]
  gpio_config.Mode = GPIO_MODE_OUTPUT_PP;
 8001dfc:	2301      	movs	r3, #1
 8001dfe:	60bb      	str	r3, [r7, #8]
  gpio_config.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e00:	2303      	movs	r3, #3
 8001e02:	613b      	str	r3, [r7, #16]

  if(gpioa_pin_list != 0)
 8001e04:	8bbb      	ldrh	r3, [r7, #28]
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d014      	beq.n	8001e34 <APPD_SetCPU2GpioConfig+0xd0>
  {
    gpio_config.Pin = gpioa_pin_list;
 8001e0a:	8bbb      	ldrh	r3, [r7, #28]
 8001e0c:	607b      	str	r3, [r7, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e0e:	2001      	movs	r0, #1
 8001e10:	f7ff ff44 	bl	8001c9c <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_C2GPIOA_CLK_ENABLE();
 8001e14:	2001      	movs	r0, #1
 8001e16:	f7ff ff5a 	bl	8001cce <LL_C2_AHB2_GRP1_EnableClock>
    HAL_GPIO_Init(GPIOA, &gpio_config);
 8001e1a:	1d3b      	adds	r3, r7, #4
 8001e1c:	4619      	mov	r1, r3
 8001e1e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e22:	f004 fdb7 	bl	8006994 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(GPIOA, gpioa_pin_list, GPIO_PIN_RESET);
 8001e26:	8bbb      	ldrh	r3, [r7, #28]
 8001e28:	2200      	movs	r2, #0
 8001e2a:	4619      	mov	r1, r3
 8001e2c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e30:	f004 ff38 	bl	8006ca4 <HAL_GPIO_WritePin>
  }

  if(gpiob_pin_list != 0)
 8001e34:	8b7b      	ldrh	r3, [r7, #26]
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d012      	beq.n	8001e60 <APPD_SetCPU2GpioConfig+0xfc>
  {
    gpio_config.Pin = gpiob_pin_list;
 8001e3a:	8b7b      	ldrh	r3, [r7, #26]
 8001e3c:	607b      	str	r3, [r7, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e3e:	2002      	movs	r0, #2
 8001e40:	f7ff ff2c 	bl	8001c9c <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_C2GPIOB_CLK_ENABLE();
 8001e44:	2002      	movs	r0, #2
 8001e46:	f7ff ff42 	bl	8001cce <LL_C2_AHB2_GRP1_EnableClock>
    HAL_GPIO_Init(GPIOB, &gpio_config);
 8001e4a:	1d3b      	adds	r3, r7, #4
 8001e4c:	4619      	mov	r1, r3
 8001e4e:	4813      	ldr	r0, [pc, #76]	; (8001e9c <APPD_SetCPU2GpioConfig+0x138>)
 8001e50:	f004 fda0 	bl	8006994 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(GPIOB, gpiob_pin_list, GPIO_PIN_RESET);
 8001e54:	8b7b      	ldrh	r3, [r7, #26]
 8001e56:	2200      	movs	r2, #0
 8001e58:	4619      	mov	r1, r3
 8001e5a:	4810      	ldr	r0, [pc, #64]	; (8001e9c <APPD_SetCPU2GpioConfig+0x138>)
 8001e5c:	f004 ff22 	bl	8006ca4 <HAL_GPIO_WritePin>
  }

  if(gpioc_pin_list != 0)
 8001e60:	8b3b      	ldrh	r3, [r7, #24]
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d013      	beq.n	8001e8e <APPD_SetCPU2GpioConfig+0x12a>
  {
    gpio_config.Pin = gpioc_pin_list;
 8001e66:	8b3b      	ldrh	r3, [r7, #24]
 8001e68:	607b      	str	r3, [r7, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e6a:	2004      	movs	r0, #4
 8001e6c:	f7ff ff16 	bl	8001c9c <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_C2GPIOC_CLK_ENABLE();
 8001e70:	2004      	movs	r0, #4
 8001e72:	f7ff ff2c 	bl	8001cce <LL_C2_AHB2_GRP1_EnableClock>
    HAL_GPIO_Init(GPIOC, &gpio_config);
 8001e76:	1d3b      	adds	r3, r7, #4
 8001e78:	4619      	mov	r1, r3
 8001e7a:	4809      	ldr	r0, [pc, #36]	; (8001ea0 <APPD_SetCPU2GpioConfig+0x13c>)
 8001e7c:	f004 fd8a 	bl	8006994 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(GPIOC, gpioc_pin_list, GPIO_PIN_RESET);
 8001e80:	8b3b      	ldrh	r3, [r7, #24]
 8001e82:	2200      	movs	r2, #0
 8001e84:	4619      	mov	r1, r3
 8001e86:	4806      	ldr	r0, [pc, #24]	; (8001ea0 <APPD_SetCPU2GpioConfig+0x13c>)
 8001e88:	f004 ff0c 	bl	8006ca4 <HAL_GPIO_WritePin>
  }
  
/* USER CODE END APPD_SetCPU2GpioConfig */
  return;
 8001e8c:	bf00      	nop
 8001e8e:	bf00      	nop
}
 8001e90:	3720      	adds	r7, #32
 8001e92:	46bd      	mov	sp, r7
 8001e94:	bd80      	pop	{r7, pc}
 8001e96:	bf00      	nop
 8001e98:	08016f8c 	.word	0x08016f8c
 8001e9c:	48000400 	.word	0x48000400
 8001ea0:	48000800 	.word	0x48000800

08001ea4 <APPD_BleDtbCfg>:

static void APPD_BleDtbCfg( void )
{
 8001ea4:	b480      	push	{r7}
 8001ea6:	af00      	add	r7, sp, #0
    HAL_GPIO_Init(GPIOB, &gpio_config);
  }
#endif

/* USER CODE END APPD_BleDtbCfg */
  return;
 8001ea8:	bf00      	nop
}
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb0:	4770      	bx	lr

08001eb2 <DbgOutputInit>:
 * WRAP FUNCTIONS
 *
*************************************************************/
#if(CFG_DEBUG_TRACE != 0)
void DbgOutputInit( void )
{
 8001eb2:	b480      	push	{r7}
 8001eb4:	af00      	add	r7, sp, #0
#endif
}
#endif

/* USER CODE END DbgOutputInit */
  return;
 8001eb6:	bf00      	nop
}
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ebe:	4770      	bx	lr

08001ec0 <DbgOutputTraces>:

void DbgOutputTraces(  uint8_t *p_data, uint16_t size, void (*cb)(void) )
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	b084      	sub	sp, #16
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	60f8      	str	r0, [r7, #12]
 8001ec8:	460b      	mov	r3, r1
 8001eca:	607a      	str	r2, [r7, #4]
 8001ecc:	817b      	strh	r3, [r7, #10]
/* USER CODE END DbgOutputTraces */
  HW_UART_Transmit_DMA(CFG_DEBUG_TRACE_UART, p_data, size, cb);
 8001ece:	897a      	ldrh	r2, [r7, #10]
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	68f9      	ldr	r1, [r7, #12]
 8001ed4:	2000      	movs	r0, #0
 8001ed6:	f001 fc5d 	bl	8003794 <HW_UART_Transmit_DMA>

/* USER CODE END DbgOutputTraces */
  return;
 8001eda:	bf00      	nop
}
 8001edc:	3710      	adds	r7, #16
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	bd80      	pop	{r7, pc}
	...

08001ee4 <LL_C2_PWR_SetPowerMode>:
  *
  *         (*) Not available on devices STM32WB15xx, STM32WB10xx
  * @retval None
  */
__STATIC_INLINE void LL_C2_PWR_SetPowerMode(uint32_t LowPowerMode)
{
 8001ee4:	b480      	push	{r7}
 8001ee6:	b083      	sub	sp, #12
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, LowPowerMode);
 8001eec:	4b07      	ldr	r3, [pc, #28]	; (8001f0c <LL_C2_PWR_SetPowerMode+0x28>)
 8001eee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001ef2:	f023 0207 	bic.w	r2, r3, #7
 8001ef6:	4905      	ldr	r1, [pc, #20]	; (8001f0c <LL_C2_PWR_SetPowerMode+0x28>)
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	4313      	orrs	r3, r2
 8001efc:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 8001f00:	bf00      	nop
 8001f02:	370c      	adds	r7, #12
 8001f04:	46bd      	mov	sp, r7
 8001f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0a:	4770      	bx	lr
 8001f0c:	58000400 	.word	0x58000400

08001f10 <LL_RCC_SetClkAfterWakeFromStop>:
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_MSI
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_HSI
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetClkAfterWakeFromStop(uint32_t Clock)
{
 8001f10:	b480      	push	{r7}
 8001f12:	b083      	sub	sp, #12
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 8001f18:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f1c:	689b      	ldr	r3, [r3, #8]
 8001f1e:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8001f22:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	4313      	orrs	r3, r2
 8001f2a:	608b      	str	r3, [r1, #8]
}
 8001f2c:	bf00      	nop
 8001f2e:	370c      	adds	r7, #12
 8001f30:	46bd      	mov	sp, r7
 8001f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f36:	4770      	bx	lr

08001f38 <APPE_Init>:
static void Button_Init( void );
/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void APPE_Init( void )
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	af00      	add	r7, sp, #0
  SystemPower_Config(); /**< Configure the system Power Mode */
 8001f3c:	f000 f814 	bl	8001f68 <SystemPower_Config>

  HW_TS_Init(hw_ts_InitMode_Full, &hrtc); /**< Initialize the TimerServer */
 8001f40:	4908      	ldr	r1, [pc, #32]	; (8001f64 <APPE_Init+0x2c>)
 8001f42:	2000      	movs	r0, #0
 8001f44:	f001 f9ac 	bl	80032a0 <HW_TS_Init>

/* USER CODE BEGIN APPE_Init_1 */
  APPD_Init();
 8001f48:	f7ff fedd 	bl	8001d06 <APPD_Init>

  /**
   * The Standby mode should not be entered before the initialization is over
   * The default state of the Low Power Manager is to allow the Standby Mode so an request is needed here
   */
  UTIL_LPM_SetOffMode(1 << CFG_LPM_APP, UTIL_LPM_DISABLE);
 8001f4c:	2101      	movs	r1, #1
 8001f4e:	2001      	movs	r0, #1
 8001f50:	f010 fc82 	bl	8012858 <UTIL_LPM_SetOffMode>

  Led_Init();
 8001f54:	f000 f8a1 	bl	800209a <Led_Init>

  Button_Init();
 8001f58:	f000 f8a6 	bl	80020a8 <Button_Init>
/* USER CODE END APPE_Init_1 */
  appe_Tl_Init();	/* Initialize all transport layers */
 8001f5c:	f000 f812 	bl	8001f84 <appe_Tl_Init>
   * This system event is received with APPE_SysUserEvtRx()
   */
/* USER CODE BEGIN APPE_Init_2 */

/* USER CODE END APPE_Init_2 */
   return;
 8001f60:	bf00      	nop
}
 8001f62:	bd80      	pop	{r7, pc}
 8001f64:	2000779c 	.word	0x2000779c

08001f68 <SystemPower_Config>:
 *
 * @param  None
 * @retval None
 */
static void SystemPower_Config(void)
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	af00      	add	r7, sp, #0
  /**
   * Select HSI as system clock source after Wake Up from Stop mode
   */
  LL_RCC_SetClkAfterWakeFromStop(LL_RCC_STOP_WAKEUPCLOCK_HSI);
 8001f6c:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8001f70:	f7ff ffce 	bl	8001f10 <LL_RCC_SetClkAfterWakeFromStop>

  /* Initialize low power manager */
  UTIL_LPM_Init();
 8001f74:	f010 fc5e 	bl	8012834 <UTIL_LPM_Init>
  /* Initialize the CPU2 reset value before starting CPU2 with C2BOOT */
  LL_C2_PWR_SetPowerMode(LL_PWR_MODE_SHUTDOWN);
 8001f78:	2004      	movs	r0, #4
 8001f7a:	f7ff ffb3 	bl	8001ee4 <LL_C2_PWR_SetPowerMode>
   *  Enable USB power
   */
  HAL_PWREx_EnableVddUSB();
#endif

  return;
 8001f7e:	bf00      	nop
}
 8001f80:	bd80      	pop	{r7, pc}
	...

08001f84 <appe_Tl_Init>:

static void appe_Tl_Init( void )
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	b088      	sub	sp, #32
 8001f88:	af00      	add	r7, sp, #0
  TL_MM_Config_t tl_mm_config;
  SHCI_TL_HciInitConf_t SHci_Tl_Init_Conf;
  /**< Reference table initialization */
  TL_Init();
 8001f8a:	f00b f979 	bl	800d280 <TL_Init>

  MtxShciId = osMutexNew( NULL );
 8001f8e:	2000      	movs	r0, #0
 8001f90:	f00c fcae 	bl	800e8f0 <osMutexNew>
 8001f94:	4602      	mov	r2, r0
 8001f96:	4b17      	ldr	r3, [pc, #92]	; (8001ff4 <appe_Tl_Init+0x70>)
 8001f98:	601a      	str	r2, [r3, #0]
  SemShciId = osSemaphoreNew( 1, 0, NULL ); /*< Create the semaphore and make it busy at initialization */
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	2100      	movs	r1, #0
 8001f9e:	2001      	movs	r0, #1
 8001fa0:	f00c fdee 	bl	800eb80 <osSemaphoreNew>
 8001fa4:	4602      	mov	r2, r0
 8001fa6:	4b14      	ldr	r3, [pc, #80]	; (8001ff8 <appe_Tl_Init+0x74>)
 8001fa8:	601a      	str	r2, [r3, #0]

  /** FreeRTOS system task creation */
  ShciUserEvtProcessId = osThreadNew(ShciUserEvtProcess, NULL, &ShciUserEvtProcess_attr);
 8001faa:	4a14      	ldr	r2, [pc, #80]	; (8001ffc <appe_Tl_Init+0x78>)
 8001fac:	2100      	movs	r1, #0
 8001fae:	4814      	ldr	r0, [pc, #80]	; (8002000 <appe_Tl_Init+0x7c>)
 8001fb0:	f00c fad4 	bl	800e55c <osThreadNew>
 8001fb4:	4602      	mov	r2, r0
 8001fb6:	4b13      	ldr	r3, [pc, #76]	; (8002004 <appe_Tl_Init+0x80>)
 8001fb8:	601a      	str	r2, [r3, #0]

  /**< System channel initialization */
  SHci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&SystemCmdBuffer;
 8001fba:	4b13      	ldr	r3, [pc, #76]	; (8002008 <appe_Tl_Init+0x84>)
 8001fbc:	603b      	str	r3, [r7, #0]
  SHci_Tl_Init_Conf.StatusNotCallBack = APPE_SysStatusNot;
 8001fbe:	4b13      	ldr	r3, [pc, #76]	; (800200c <appe_Tl_Init+0x88>)
 8001fc0:	607b      	str	r3, [r7, #4]
  shci_init(APPE_SysUserEvtRx, (void*) &SHci_Tl_Init_Conf);
 8001fc2:	463b      	mov	r3, r7
 8001fc4:	4619      	mov	r1, r3
 8001fc6:	4812      	ldr	r0, [pc, #72]	; (8002010 <appe_Tl_Init+0x8c>)
 8001fc8:	f00b f820 	bl	800d00c <shci_init>

  /**< Memory Manager channel initialization */
  tl_mm_config.p_BleSpareEvtBuffer = BleSpareEvtBuffer;
 8001fcc:	4b11      	ldr	r3, [pc, #68]	; (8002014 <appe_Tl_Init+0x90>)
 8001fce:	60bb      	str	r3, [r7, #8]
  tl_mm_config.p_SystemSpareEvtBuffer = SystemSpareEvtBuffer;
 8001fd0:	4b11      	ldr	r3, [pc, #68]	; (8002018 <appe_Tl_Init+0x94>)
 8001fd2:	60fb      	str	r3, [r7, #12]
  tl_mm_config.p_AsynchEvtPool = EvtPool;
 8001fd4:	4b11      	ldr	r3, [pc, #68]	; (800201c <appe_Tl_Init+0x98>)
 8001fd6:	613b      	str	r3, [r7, #16]
  tl_mm_config.AsynchEvtPoolSize = POOL_SIZE;
 8001fd8:	f240 533c 	movw	r3, #1340	; 0x53c
 8001fdc:	617b      	str	r3, [r7, #20]
  TL_MM_Init( &tl_mm_config );
 8001fde:	f107 0308 	add.w	r3, r7, #8
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	f00b fa8e 	bl	800d504 <TL_MM_Init>

  TL_Enable();
 8001fe8:	f00b f944 	bl	800d274 <TL_Enable>

  return;
 8001fec:	bf00      	nop
}
 8001fee:	3720      	adds	r7, #32
 8001ff0:	46bd      	mov	sp, r7
 8001ff2:	bd80      	pop	{r7, pc}
 8001ff4:	200078c8 	.word	0x200078c8
 8001ff8:	200078d0 	.word	0x200078d0
 8001ffc:	0801709c 	.word	0x0801709c
 8002000:	08002081 	.word	0x08002081
 8002004:	200078cc 	.word	0x200078cc
 8002008:	20030724 	.word	0x20030724
 800200c:	08002021 	.word	0x08002021
 8002010:	08002061 	.word	0x08002061
 8002014:	2003093c 	.word	0x2003093c
 8002018:	20030830 	.word	0x20030830
 800201c:	200301e8 	.word	0x200301e8

08002020 <APPE_SysStatusNot>:

static void APPE_SysStatusNot( SHCI_TL_CmdStatus_t status )
{
 8002020:	b580      	push	{r7, lr}
 8002022:	b082      	sub	sp, #8
 8002024:	af00      	add	r7, sp, #0
 8002026:	4603      	mov	r3, r0
 8002028:	71fb      	strb	r3, [r7, #7]
  switch (status)
 800202a:	79fb      	ldrb	r3, [r7, #7]
 800202c:	2b00      	cmp	r3, #0
 800202e:	d002      	beq.n	8002036 <APPE_SysStatusNot+0x16>
 8002030:	2b01      	cmp	r3, #1
 8002032:	d008      	beq.n	8002046 <APPE_SysStatusNot+0x26>
    case SHCI_TL_CmdAvailable:
      osMutexRelease( MtxShciId );
      break;

    default:
      break;
 8002034:	e00d      	b.n	8002052 <APPE_SysStatusNot+0x32>
      osMutexAcquire( MtxShciId, osWaitForever );
 8002036:	4b09      	ldr	r3, [pc, #36]	; (800205c <APPE_SysStatusNot+0x3c>)
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	f04f 31ff 	mov.w	r1, #4294967295
 800203e:	4618      	mov	r0, r3
 8002040:	f00c fcf0 	bl	800ea24 <osMutexAcquire>
      break;
 8002044:	e005      	b.n	8002052 <APPE_SysStatusNot+0x32>
      osMutexRelease( MtxShciId );
 8002046:	4b05      	ldr	r3, [pc, #20]	; (800205c <APPE_SysStatusNot+0x3c>)
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	4618      	mov	r0, r3
 800204c:	f00c fd48 	bl	800eae0 <osMutexRelease>
      break;
 8002050:	bf00      	nop
  }
  return;
 8002052:	bf00      	nop
}
 8002054:	3708      	adds	r7, #8
 8002056:	46bd      	mov	sp, r7
 8002058:	bd80      	pop	{r7, pc}
 800205a:	bf00      	nop
 800205c:	200078c8 	.word	0x200078c8

08002060 <APPE_SysUserEvtRx>:
 * The buffer shall not be released
 * ( eg ((tSHCI_UserEvtRxParam*)pPayload)->status shall be set to SHCI_TL_UserEventFlow_Disable )
 * When the status is not filled, the buffer is released by default
 */
static void APPE_SysUserEvtRx( void * pPayload )
{
 8002060:	b580      	push	{r7, lr}
 8002062:	b082      	sub	sp, #8
 8002064:	af00      	add	r7, sp, #0
 8002066:	6078      	str	r0, [r7, #4]
  UNUSED(pPayload);
  /* Traces channel initialization */
  APPD_EnableCPU2( );
 8002068:	f7ff fe60 	bl	8001d2c <APPD_EnableCPU2>

  APP_BLE_Init( );
 800206c:	f7fe fde8 	bl	8000c40 <APP_BLE_Init>
  UTIL_LPM_SetOffMode(1U << CFG_LPM_APP, UTIL_LPM_ENABLE);
 8002070:	2100      	movs	r1, #0
 8002072:	2001      	movs	r0, #1
 8002074:	f010 fbf0 	bl	8012858 <UTIL_LPM_SetOffMode>
  return;
 8002078:	bf00      	nop
}
 800207a:	3708      	adds	r7, #8
 800207c:	46bd      	mov	sp, r7
 800207e:	bd80      	pop	{r7, pc}

08002080 <ShciUserEvtProcess>:
 *
 * FREERTOS WRAPPER FUNCTIONS
 *
*************************************************************/
static void ShciUserEvtProcess(void *argument)
{
 8002080:	b580      	push	{r7, lr}
 8002082:	b082      	sub	sp, #8
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]
  for(;;)
  {
    /* USER CODE BEGIN SHCI_USER_EVT_PROCESS_1 */

    /* USER CODE END SHCI_USER_EVT_PROCESS_1 */
     osThreadFlagsWait(1, osFlagsWaitAny, osWaitForever);
 8002088:	f04f 32ff 	mov.w	r2, #4294967295
 800208c:	2100      	movs	r1, #0
 800208e:	2001      	movs	r0, #1
 8002090:	f00c fb6c 	bl	800e76c <osThreadFlagsWait>
     shci_user_evt_proc();
 8002094:	f00a ffd6 	bl	800d044 <shci_user_evt_proc>
     osThreadFlagsWait(1, osFlagsWaitAny, osWaitForever);
 8002098:	e7f6      	b.n	8002088 <ShciUserEvtProcess+0x8>

0800209a <Led_Init>:
    }
}

/* USER CODE BEGIN FD_LOCAL_FUNCTIONS */
static void Led_Init( void )
{
 800209a:	b480      	push	{r7}
 800209c:	af00      	add	r7, sp, #0
  BSP_LED_Init(LED_RED);

  BSP_LED_On(LED_GREEN);
#endif

  return;
 800209e:	bf00      	nop
}
 80020a0:	46bd      	mov	sp, r7
 80020a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a6:	4770      	bx	lr

080020a8 <Button_Init>:

static void Button_Init( void )
{
 80020a8:	b480      	push	{r7}
 80020aa:	af00      	add	r7, sp, #0
  BSP_PB_Init(BUTTON_SW1, BUTTON_MODE_EXTI);
  BSP_PB_Init(BUTTON_SW2, BUTTON_MODE_EXTI);
  BSP_PB_Init(BUTTON_SW3, BUTTON_MODE_EXTI);
#endif

  return;
 80020ac:	bf00      	nop
}
 80020ae:	46bd      	mov	sp, r7
 80020b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b4:	4770      	bx	lr
	...

080020b8 <shci_notify_asynch_evt>:
 * WRAP FUNCTIONS
 *
 *************************************************************/

void shci_notify_asynch_evt(void* pdata)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	b082      	sub	sp, #8
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]
  UNUSED(pdata);
  osThreadFlagsSet( ShciUserEvtProcessId, 1 );
 80020c0:	4b04      	ldr	r3, [pc, #16]	; (80020d4 <shci_notify_asynch_evt+0x1c>)
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	2101      	movs	r1, #1
 80020c6:	4618      	mov	r0, r3
 80020c8:	f00c faee 	bl	800e6a8 <osThreadFlagsSet>
  return;
 80020cc:	bf00      	nop
}
 80020ce:	3708      	adds	r7, #8
 80020d0:	46bd      	mov	sp, r7
 80020d2:	bd80      	pop	{r7, pc}
 80020d4:	200078cc 	.word	0x200078cc

080020d8 <shci_cmd_resp_release>:

void shci_cmd_resp_release(uint32_t flag)
{
 80020d8:	b580      	push	{r7, lr}
 80020da:	b082      	sub	sp, #8
 80020dc:	af00      	add	r7, sp, #0
 80020de:	6078      	str	r0, [r7, #4]
  UNUSED(flag);
  osSemaphoreRelease( SemShciId );
 80020e0:	4b04      	ldr	r3, [pc, #16]	; (80020f4 <shci_cmd_resp_release+0x1c>)
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	4618      	mov	r0, r3
 80020e6:	f00c fe4f 	bl	800ed88 <osSemaphoreRelease>
  return;
 80020ea:	bf00      	nop
}
 80020ec:	3708      	adds	r7, #8
 80020ee:	46bd      	mov	sp, r7
 80020f0:	bd80      	pop	{r7, pc}
 80020f2:	bf00      	nop
 80020f4:	200078d0 	.word	0x200078d0

080020f8 <shci_cmd_resp_wait>:

void shci_cmd_resp_wait(uint32_t timeout)
{
 80020f8:	b580      	push	{r7, lr}
 80020fa:	b082      	sub	sp, #8
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]
  UNUSED(timeout);
  osSemaphoreAcquire( SemShciId, osWaitForever );
 8002100:	4b05      	ldr	r3, [pc, #20]	; (8002118 <shci_cmd_resp_wait+0x20>)
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f04f 31ff 	mov.w	r1, #4294967295
 8002108:	4618      	mov	r0, r3
 800210a:	f00c fdd7 	bl	800ecbc <osSemaphoreAcquire>
  return;
 800210e:	bf00      	nop
}
 8002110:	3708      	adds	r7, #8
 8002112:	46bd      	mov	sp, r7
 8002114:	bd80      	pop	{r7, pc}
 8002116:	bf00      	nop
 8002118:	200078d0 	.word	0x200078d0

0800211c <Dotstar_Init>:
} DotStar_State;


DotStar_State dotstar_state;

void Dotstar_Init(DotStar_InitHandle* dotstar_init){
 800211c:	b580      	push	{r7, lr}
 800211e:	b084      	sub	sp, #16
 8002120:	af00      	add	r7, sp, #0
 8002122:	6078      	str	r0, [r7, #4]

   dotstar_state.spiHandle = dotstar_init->spiHandle;
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	4a23      	ldr	r2, [pc, #140]	; (80021b8 <Dotstar_Init+0x9c>)
 800212a:	6013      	str	r3, [r2, #0]
   dotstar_state.numLEDs = dotstar_init->numLEDs;
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	889a      	ldrh	r2, [r3, #4]
 8002130:	4b21      	ldr	r3, [pc, #132]	; (80021b8 <Dotstar_Init+0x9c>)
 8002132:	809a      	strh	r2, [r3, #4]
   dotstar_state.brightness = 0;
 8002134:	4b20      	ldr	r3, [pc, #128]	; (80021b8 <Dotstar_Init+0x9c>)
 8002136:	2200      	movs	r2, #0
 8002138:	719a      	strb	r2, [r3, #6]
   dotstar_state.rOffset = dotstar_init->colorOrder & 3;
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	799b      	ldrb	r3, [r3, #6]
 800213e:	f003 0303 	and.w	r3, r3, #3
 8002142:	b2da      	uxtb	r2, r3
 8002144:	4b1c      	ldr	r3, [pc, #112]	; (80021b8 <Dotstar_Init+0x9c>)
 8002146:	731a      	strb	r2, [r3, #12]
   dotstar_state.gOffset = (dotstar_init->colorOrder >> 2) & 3;
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	799b      	ldrb	r3, [r3, #6]
 800214c:	089b      	lsrs	r3, r3, #2
 800214e:	b2db      	uxtb	r3, r3
 8002150:	f003 0303 	and.w	r3, r3, #3
 8002154:	b2da      	uxtb	r2, r3
 8002156:	4b18      	ldr	r3, [pc, #96]	; (80021b8 <Dotstar_Init+0x9c>)
 8002158:	735a      	strb	r2, [r3, #13]
   dotstar_state.bOffset = (dotstar_init->colorOrder >> 4) & 3;
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	799b      	ldrb	r3, [r3, #6]
 800215e:	091b      	lsrs	r3, r3, #4
 8002160:	b2db      	uxtb	r3, r3
 8002162:	f003 0303 	and.w	r3, r3, #3
 8002166:	b2da      	uxtb	r2, r3
 8002168:	4b13      	ldr	r3, [pc, #76]	; (80021b8 <Dotstar_Init+0x9c>)
 800216a:	739a      	strb	r2, [r3, #14]

   uint16_t bytes = (dotstar_state.rOffset == dotstar_state.gOffset) ?
 800216c:	4b12      	ldr	r3, [pc, #72]	; (80021b8 <Dotstar_Init+0x9c>)
 800216e:	7b1a      	ldrb	r2, [r3, #12]
 8002170:	4b11      	ldr	r3, [pc, #68]	; (80021b8 <Dotstar_Init+0x9c>)
 8002172:	7b5b      	ldrb	r3, [r3, #13]
 8002174:	429a      	cmp	r2, r3
 8002176:	d10c      	bne.n	8002192 <Dotstar_Init+0x76>
     dotstar_state.numLEDs + ((dotstar_state.numLEDs + 3) / 4) : // MONO: 10 bits/pixel, round up to next byte
 8002178:	4b0f      	ldr	r3, [pc, #60]	; (80021b8 <Dotstar_Init+0x9c>)
 800217a:	889a      	ldrh	r2, [r3, #4]
 800217c:	4b0e      	ldr	r3, [pc, #56]	; (80021b8 <Dotstar_Init+0x9c>)
 800217e:	889b      	ldrh	r3, [r3, #4]
 8002180:	3303      	adds	r3, #3
 8002182:	2b00      	cmp	r3, #0
 8002184:	da00      	bge.n	8002188 <Dotstar_Init+0x6c>
 8002186:	3303      	adds	r3, #3
 8002188:	109b      	asrs	r3, r3, #2
 800218a:	b29b      	uxth	r3, r3
   uint16_t bytes = (dotstar_state.rOffset == dotstar_state.gOffset) ?
 800218c:	4413      	add	r3, r2
 800218e:	b29b      	uxth	r3, r3
 8002190:	e005      	b.n	800219e <Dotstar_Init+0x82>
     dotstar_state.numLEDs * 3;              // COLOR: 3 bytes/pixel
 8002192:	4b09      	ldr	r3, [pc, #36]	; (80021b8 <Dotstar_Init+0x9c>)
 8002194:	889b      	ldrh	r3, [r3, #4]
   uint16_t bytes = (dotstar_state.rOffset == dotstar_state.gOffset) ?
 8002196:	461a      	mov	r2, r3
 8002198:	0052      	lsls	r2, r2, #1
 800219a:	4413      	add	r3, r2
 800219c:	b29b      	uxth	r3, r3
 800219e:	81fb      	strh	r3, [r7, #14]

   //dotstar_state.pixels = (uint8_t *)malloc(bytes);
   dotstar_state.pixels = (uint8_t *)pvPortMalloc(bytes);
 80021a0:	89fb      	ldrh	r3, [r7, #14]
 80021a2:	4618      	mov	r0, r3
 80021a4:	f00d fa2c 	bl	800f600 <pvPortMalloc>
 80021a8:	4603      	mov	r3, r0
 80021aa:	461a      	mov	r2, r3
 80021ac:	4b02      	ldr	r3, [pc, #8]	; (80021b8 <Dotstar_Init+0x9c>)
 80021ae:	609a      	str	r2, [r3, #8]
}
 80021b0:	bf00      	nop
 80021b2:	3710      	adds	r7, #16
 80021b4:	46bd      	mov	sp, r7
 80021b6:	bd80      	pop	{r7, pc}
 80021b8:	200078d4 	.word	0x200078d4

080021bc <ds_show>:
*/

/*!
  @brief   Transmit pixel data in RAM to DotStars.
*/
void ds_show(void) {
 80021bc:	b580      	push	{r7, lr}
 80021be:	b084      	sub	sp, #16
 80021c0:	af00      	add	r7, sp, #0

  if(!dotstar_state.pixels) return;
 80021c2:	4b4b      	ldr	r3, [pc, #300]	; (80022f0 <ds_show+0x134>)
 80021c4:	689b      	ldr	r3, [r3, #8]
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	f000 808e 	beq.w	80022e8 <ds_show+0x12c>

  uint8_t *ptr = dotstar_state.pixels, i;            // -> LED data
 80021cc:	4b48      	ldr	r3, [pc, #288]	; (80022f0 <ds_show+0x134>)
 80021ce:	689b      	ldr	r3, [r3, #8]
 80021d0:	60fb      	str	r3, [r7, #12]
  uint16_t n   = dotstar_state.numLEDs;              // Counter
 80021d2:	4b47      	ldr	r3, [pc, #284]	; (80022f0 <ds_show+0x134>)
 80021d4:	889b      	ldrh	r3, [r3, #4]
 80021d6:	813b      	strh	r3, [r7, #8]
  uint16_t b16 = (uint16_t)dotstar_state.brightness; // Type-convert for fixed-point math
 80021d8:	4b45      	ldr	r3, [pc, #276]	; (80022f0 <ds_show+0x134>)
 80021da:	799b      	ldrb	r3, [r3, #6]
 80021dc:	80fb      	strh	r3, [r7, #6]
  uint8_t sendval;

    sendval = 0x00;
 80021de:	2300      	movs	r3, #0
 80021e0:	717b      	strb	r3, [r7, #5]
    for(i=0; i<4; i++) spi_out(&sendval);    // 4 byte start-frame marker
 80021e2:	2300      	movs	r3, #0
 80021e4:	72fb      	strb	r3, [r7, #11]
 80021e6:	e00a      	b.n	80021fe <ds_show+0x42>
 80021e8:	4b41      	ldr	r3, [pc, #260]	; (80022f0 <ds_show+0x134>)
 80021ea:	6818      	ldr	r0, [r3, #0]
 80021ec:	1d79      	adds	r1, r7, #5
 80021ee:	f04f 33ff 	mov.w	r3, #4294967295
 80021f2:	2201      	movs	r2, #1
 80021f4:	f007 ff9d 	bl	800a132 <HAL_SPI_Transmit>
 80021f8:	7afb      	ldrb	r3, [r7, #11]
 80021fa:	3301      	adds	r3, #1
 80021fc:	72fb      	strb	r3, [r7, #11]
 80021fe:	7afb      	ldrb	r3, [r7, #11]
 8002200:	2b03      	cmp	r3, #3
 8002202:	d9f1      	bls.n	80021e8 <ds_show+0x2c>

    if(dotstar_state.brightness) {                     // Scale pixel brightness on output
 8002204:	4b3a      	ldr	r3, [pc, #232]	; (80022f0 <ds_show+0x134>)
 8002206:	799b      	ldrb	r3, [r3, #6]
 8002208:	2b00      	cmp	r3, #0
 800220a:	d02c      	beq.n	8002266 <ds_show+0xaa>
      do {                               // For each pixel...
    	sendval = 0xFF;
 800220c:	23ff      	movs	r3, #255	; 0xff
 800220e:	717b      	strb	r3, [r7, #5]
        spi_out(&sendval);                   //  Pixel start
 8002210:	4b37      	ldr	r3, [pc, #220]	; (80022f0 <ds_show+0x134>)
 8002212:	6818      	ldr	r0, [r3, #0]
 8002214:	1d79      	adds	r1, r7, #5
 8002216:	f04f 33ff 	mov.w	r3, #4294967295
 800221a:	2201      	movs	r2, #1
 800221c:	f007 ff89 	bl	800a132 <HAL_SPI_Transmit>
        for(i=0; i<3; i++) {
 8002220:	2300      	movs	r3, #0
 8002222:	72fb      	strb	r3, [r7, #11]
 8002224:	e015      	b.n	8002252 <ds_show+0x96>
        	sendval = (*ptr++ * b16) >> 8;
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	1c5a      	adds	r2, r3, #1
 800222a:	60fa      	str	r2, [r7, #12]
 800222c:	781b      	ldrb	r3, [r3, #0]
 800222e:	461a      	mov	r2, r3
 8002230:	88fb      	ldrh	r3, [r7, #6]
 8002232:	fb03 f302 	mul.w	r3, r3, r2
 8002236:	121b      	asrs	r3, r3, #8
 8002238:	b2db      	uxtb	r3, r3
 800223a:	717b      	strb	r3, [r7, #5]
        	spi_out(&sendval); // Scale, write RGB
 800223c:	4b2c      	ldr	r3, [pc, #176]	; (80022f0 <ds_show+0x134>)
 800223e:	6818      	ldr	r0, [r3, #0]
 8002240:	1d79      	adds	r1, r7, #5
 8002242:	f04f 33ff 	mov.w	r3, #4294967295
 8002246:	2201      	movs	r2, #1
 8002248:	f007 ff73 	bl	800a132 <HAL_SPI_Transmit>
        for(i=0; i<3; i++) {
 800224c:	7afb      	ldrb	r3, [r7, #11]
 800224e:	3301      	adds	r3, #1
 8002250:	72fb      	strb	r3, [r7, #11]
 8002252:	7afb      	ldrb	r3, [r7, #11]
 8002254:	2b02      	cmp	r3, #2
 8002256:	d9e6      	bls.n	8002226 <ds_show+0x6a>
        }
      } while(--n);
 8002258:	893b      	ldrh	r3, [r7, #8]
 800225a:	3b01      	subs	r3, #1
 800225c:	813b      	strh	r3, [r7, #8]
 800225e:	893b      	ldrh	r3, [r7, #8]
 8002260:	2b00      	cmp	r3, #0
 8002262:	d1d3      	bne.n	800220c <ds_show+0x50>
 8002264:	e025      	b.n	80022b2 <ds_show+0xf6>
    } else {                             // Full brightness (no scaling)
      do {                               // For each pixel...
    	sendval = 0xFF;
 8002266:	23ff      	movs	r3, #255	; 0xff
 8002268:	717b      	strb	r3, [r7, #5]
        spi_out(&sendval);                   //  Pixel start
 800226a:	4b21      	ldr	r3, [pc, #132]	; (80022f0 <ds_show+0x134>)
 800226c:	6818      	ldr	r0, [r3, #0]
 800226e:	1d79      	adds	r1, r7, #5
 8002270:	f04f 33ff 	mov.w	r3, #4294967295
 8002274:	2201      	movs	r2, #1
 8002276:	f007 ff5c 	bl	800a132 <HAL_SPI_Transmit>
        for(i=0; i<3; i++) {
 800227a:	2300      	movs	r3, #0
 800227c:	72fb      	strb	r3, [r7, #11]
 800227e:	e00f      	b.n	80022a0 <ds_show+0xe4>
        	sendval = *ptr++;
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	1c5a      	adds	r2, r3, #1
 8002284:	60fa      	str	r2, [r7, #12]
 8002286:	781b      	ldrb	r3, [r3, #0]
 8002288:	717b      	strb	r3, [r7, #5]
        	spi_out(&sendval); // Write R,G,B
 800228a:	4b19      	ldr	r3, [pc, #100]	; (80022f0 <ds_show+0x134>)
 800228c:	6818      	ldr	r0, [r3, #0]
 800228e:	1d79      	adds	r1, r7, #5
 8002290:	f04f 33ff 	mov.w	r3, #4294967295
 8002294:	2201      	movs	r2, #1
 8002296:	f007 ff4c 	bl	800a132 <HAL_SPI_Transmit>
        for(i=0; i<3; i++) {
 800229a:	7afb      	ldrb	r3, [r7, #11]
 800229c:	3301      	adds	r3, #1
 800229e:	72fb      	strb	r3, [r7, #11]
 80022a0:	7afb      	ldrb	r3, [r7, #11]
 80022a2:	2b02      	cmp	r3, #2
 80022a4:	d9ec      	bls.n	8002280 <ds_show+0xc4>
        }
      } while(--n);
 80022a6:	893b      	ldrh	r3, [r7, #8]
 80022a8:	3b01      	subs	r3, #1
 80022aa:	813b      	strh	r3, [r7, #8]
 80022ac:	893b      	ldrh	r3, [r7, #8]
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d1d9      	bne.n	8002266 <ds_show+0xaa>
    // revisions are more strict (e.g. might mandate use of end-frame
    // before start-frame marker). i.e. let's not remove this. But after
    // testing a bit more the suggestion is to use at least (numLeds+1)/2
    // high values (1) or (numLeds+15)/16 full bytes as EndFrame. For details see also:
    // https://cpldcpu.wordpress.com/2014/11/30/understanding-the-apa102-superled/
    sendval = 0xFF;
 80022b2:	23ff      	movs	r3, #255	; 0xff
 80022b4:	717b      	strb	r3, [r7, #5]
    for(i=0; i<((dotstar_state.numLEDs + 15) / 16); i++) spi_out(&sendval);
 80022b6:	2300      	movs	r3, #0
 80022b8:	72fb      	strb	r3, [r7, #11]
 80022ba:	e00a      	b.n	80022d2 <ds_show+0x116>
 80022bc:	4b0c      	ldr	r3, [pc, #48]	; (80022f0 <ds_show+0x134>)
 80022be:	6818      	ldr	r0, [r3, #0]
 80022c0:	1d79      	adds	r1, r7, #5
 80022c2:	f04f 33ff 	mov.w	r3, #4294967295
 80022c6:	2201      	movs	r2, #1
 80022c8:	f007 ff33 	bl	800a132 <HAL_SPI_Transmit>
 80022cc:	7afb      	ldrb	r3, [r7, #11]
 80022ce:	3301      	adds	r3, #1
 80022d0:	72fb      	strb	r3, [r7, #11]
 80022d2:	7afa      	ldrb	r2, [r7, #11]
 80022d4:	4b06      	ldr	r3, [pc, #24]	; (80022f0 <ds_show+0x134>)
 80022d6:	889b      	ldrh	r3, [r3, #4]
 80022d8:	330f      	adds	r3, #15
 80022da:	2b00      	cmp	r3, #0
 80022dc:	da00      	bge.n	80022e0 <ds_show+0x124>
 80022de:	330f      	adds	r3, #15
 80022e0:	111b      	asrs	r3, r3, #4
 80022e2:	429a      	cmp	r2, r3
 80022e4:	dbea      	blt.n	80022bc <ds_show+0x100>
 80022e6:	e000      	b.n	80022ea <ds_show+0x12e>
  if(!dotstar_state.pixels) return;
 80022e8:	bf00      	nop

}
 80022ea:	3710      	adds	r7, #16
 80022ec:	46bd      	mov	sp, r7
 80022ee:	bd80      	pop	{r7, pc}
 80022f0:	200078d4 	.word	0x200078d4

080022f4 <ds_clear>:

/*!
  @brief   Fill the whole DotStar strip with 0 / black / off.
*/
void ds_clear() {
 80022f4:	b580      	push	{r7, lr}
 80022f6:	af00      	add	r7, sp, #0
  memset(dotstar_state.pixels, 0, (dotstar_state.rOffset == dotstar_state.gOffset) ?
 80022f8:	4b0f      	ldr	r3, [pc, #60]	; (8002338 <ds_clear+0x44>)
 80022fa:	6898      	ldr	r0, [r3, #8]
 80022fc:	4b0e      	ldr	r3, [pc, #56]	; (8002338 <ds_clear+0x44>)
 80022fe:	7b1a      	ldrb	r2, [r3, #12]
 8002300:	4b0d      	ldr	r3, [pc, #52]	; (8002338 <ds_clear+0x44>)
 8002302:	7b5b      	ldrb	r3, [r3, #13]
 8002304:	429a      	cmp	r2, r3
 8002306:	d10b      	bne.n	8002320 <ds_clear+0x2c>
    dotstar_state.numLEDs + ((dotstar_state.numLEDs + 3) / 4) : // MONO: 10 bits/pixel
 8002308:	4b0b      	ldr	r3, [pc, #44]	; (8002338 <ds_clear+0x44>)
 800230a:	889b      	ldrh	r3, [r3, #4]
 800230c:	461a      	mov	r2, r3
 800230e:	4b0a      	ldr	r3, [pc, #40]	; (8002338 <ds_clear+0x44>)
 8002310:	889b      	ldrh	r3, [r3, #4]
 8002312:	3303      	adds	r3, #3
 8002314:	2b00      	cmp	r3, #0
 8002316:	da00      	bge.n	800231a <ds_clear+0x26>
 8002318:	3303      	adds	r3, #3
 800231a:	109b      	asrs	r3, r3, #2
 800231c:	4413      	add	r3, r2
 800231e:	e005      	b.n	800232c <ds_clear+0x38>
    dotstar_state.numLEDs * 3);                   // COLOR: 3 bytes/pixel
 8002320:	4b05      	ldr	r3, [pc, #20]	; (8002338 <ds_clear+0x44>)
 8002322:	889b      	ldrh	r3, [r3, #4]
 8002324:	461a      	mov	r2, r3
 8002326:	4613      	mov	r3, r2
 8002328:	005b      	lsls	r3, r3, #1
 800232a:	4413      	add	r3, r2
  memset(dotstar_state.pixels, 0, (dotstar_state.rOffset == dotstar_state.gOffset) ?
 800232c:	461a      	mov	r2, r3
 800232e:	2100      	movs	r1, #0
 8002330:	f010 faf5 	bl	801291e <memset>
}
 8002334:	bf00      	nop
 8002336:	bd80      	pop	{r7, pc}
 8002338:	200078d4 	.word	0x200078d4

0800233c <ds_setPixelColor32B>:
  @param   n  Pixel index, starting from 0.
  @param   c  32-bit color value. Most significant byte is 0, second is
              red, then green, and least significant byte is blue.
              e.g. 0x00RRGGBB
*/
void ds_setPixelColor32B(uint16_t n, uint32_t c) {
 800233c:	b480      	push	{r7}
 800233e:	b085      	sub	sp, #20
 8002340:	af00      	add	r7, sp, #0
 8002342:	4603      	mov	r3, r0
 8002344:	6039      	str	r1, [r7, #0]
 8002346:	80fb      	strh	r3, [r7, #6]
  if(n < dotstar_state.numLEDs) {
 8002348:	4b16      	ldr	r3, [pc, #88]	; (80023a4 <ds_setPixelColor32B+0x68>)
 800234a:	889b      	ldrh	r3, [r3, #4]
 800234c:	88fa      	ldrh	r2, [r7, #6]
 800234e:	429a      	cmp	r2, r3
 8002350:	d221      	bcs.n	8002396 <ds_setPixelColor32B+0x5a>
    uint8_t *p = &dotstar_state.pixels[n * 3];
 8002352:	4b14      	ldr	r3, [pc, #80]	; (80023a4 <ds_setPixelColor32B+0x68>)
 8002354:	6899      	ldr	r1, [r3, #8]
 8002356:	88fa      	ldrh	r2, [r7, #6]
 8002358:	4613      	mov	r3, r2
 800235a:	005b      	lsls	r3, r3, #1
 800235c:	4413      	add	r3, r2
 800235e:	440b      	add	r3, r1
 8002360:	60fb      	str	r3, [r7, #12]
    p[dotstar_state.rOffset] = (uint8_t)(c >> 16);
 8002362:	683b      	ldr	r3, [r7, #0]
 8002364:	0c1a      	lsrs	r2, r3, #16
 8002366:	4b0f      	ldr	r3, [pc, #60]	; (80023a4 <ds_setPixelColor32B+0x68>)
 8002368:	7b1b      	ldrb	r3, [r3, #12]
 800236a:	4619      	mov	r1, r3
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	440b      	add	r3, r1
 8002370:	b2d2      	uxtb	r2, r2
 8002372:	701a      	strb	r2, [r3, #0]
    p[dotstar_state.gOffset] = (uint8_t)(c >>  8);
 8002374:	683b      	ldr	r3, [r7, #0]
 8002376:	0a1a      	lsrs	r2, r3, #8
 8002378:	4b0a      	ldr	r3, [pc, #40]	; (80023a4 <ds_setPixelColor32B+0x68>)
 800237a:	7b5b      	ldrb	r3, [r3, #13]
 800237c:	4619      	mov	r1, r3
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	440b      	add	r3, r1
 8002382:	b2d2      	uxtb	r2, r2
 8002384:	701a      	strb	r2, [r3, #0]
    p[dotstar_state.bOffset] = (uint8_t)c;
 8002386:	4b07      	ldr	r3, [pc, #28]	; (80023a4 <ds_setPixelColor32B+0x68>)
 8002388:	7b9b      	ldrb	r3, [r3, #14]
 800238a:	461a      	mov	r2, r3
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	4413      	add	r3, r2
 8002390:	683a      	ldr	r2, [r7, #0]
 8002392:	b2d2      	uxtb	r2, r2
 8002394:	701a      	strb	r2, [r3, #0]
  }
}
 8002396:	bf00      	nop
 8002398:	3714      	adds	r7, #20
 800239a:	46bd      	mov	sp, r7
 800239c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a0:	4770      	bx	lr
 80023a2:	bf00      	nop
 80023a4:	200078d4 	.word	0x200078d4

080023a8 <ds_fill>:
  @param   first  Index of first pixel to fill, starting from 0. Must be
                  in-bounds, no clipping is performed. 0 if unspecified.
  @param   count  Number of pixels to fill, as a positive value. Passing
                  0 or leaving unspecified will fill to end of strip.
*/
void ds_fill(uint32_t c, uint16_t first, uint16_t count) {
 80023a8:	b580      	push	{r7, lr}
 80023aa:	b084      	sub	sp, #16
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	6078      	str	r0, [r7, #4]
 80023b0:	460b      	mov	r3, r1
 80023b2:	807b      	strh	r3, [r7, #2]
 80023b4:	4613      	mov	r3, r2
 80023b6:	803b      	strh	r3, [r7, #0]
  uint16_t i, end;

  if(first >= dotstar_state.numLEDs) {
 80023b8:	4b15      	ldr	r3, [pc, #84]	; (8002410 <ds_fill+0x68>)
 80023ba:	889b      	ldrh	r3, [r3, #4]
 80023bc:	887a      	ldrh	r2, [r7, #2]
 80023be:	429a      	cmp	r2, r3
 80023c0:	d222      	bcs.n	8002408 <ds_fill+0x60>
    return; // If first LED is past end of strip, nothing to do
  }

  // Calculate the index ONE AFTER the last pixel to fill
  if(count == 0) {
 80023c2:	883b      	ldrh	r3, [r7, #0]
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d103      	bne.n	80023d0 <ds_fill+0x28>
    // Fill to end of strip
    end = dotstar_state.numLEDs;
 80023c8:	4b11      	ldr	r3, [pc, #68]	; (8002410 <ds_fill+0x68>)
 80023ca:	889b      	ldrh	r3, [r3, #4]
 80023cc:	81bb      	strh	r3, [r7, #12]
 80023ce:	e00b      	b.n	80023e8 <ds_fill+0x40>
  } else {
    // Ensure that the loop won't go past the last pixel
    end = first + count;
 80023d0:	887a      	ldrh	r2, [r7, #2]
 80023d2:	883b      	ldrh	r3, [r7, #0]
 80023d4:	4413      	add	r3, r2
 80023d6:	81bb      	strh	r3, [r7, #12]
    if(end > dotstar_state.numLEDs) end = dotstar_state.numLEDs;
 80023d8:	4b0d      	ldr	r3, [pc, #52]	; (8002410 <ds_fill+0x68>)
 80023da:	889b      	ldrh	r3, [r3, #4]
 80023dc:	89ba      	ldrh	r2, [r7, #12]
 80023de:	429a      	cmp	r2, r3
 80023e0:	d902      	bls.n	80023e8 <ds_fill+0x40>
 80023e2:	4b0b      	ldr	r3, [pc, #44]	; (8002410 <ds_fill+0x68>)
 80023e4:	889b      	ldrh	r3, [r3, #4]
 80023e6:	81bb      	strh	r3, [r7, #12]
  }

  for(i = first; i < end; i++) {
 80023e8:	887b      	ldrh	r3, [r7, #2]
 80023ea:	81fb      	strh	r3, [r7, #14]
 80023ec:	e007      	b.n	80023fe <ds_fill+0x56>
    ds_setPixelColor32B(i, c);
 80023ee:	89fb      	ldrh	r3, [r7, #14]
 80023f0:	6879      	ldr	r1, [r7, #4]
 80023f2:	4618      	mov	r0, r3
 80023f4:	f7ff ffa2 	bl	800233c <ds_setPixelColor32B>
  for(i = first; i < end; i++) {
 80023f8:	89fb      	ldrh	r3, [r7, #14]
 80023fa:	3301      	adds	r3, #1
 80023fc:	81fb      	strh	r3, [r7, #14]
 80023fe:	89fa      	ldrh	r2, [r7, #14]
 8002400:	89bb      	ldrh	r3, [r7, #12]
 8002402:	429a      	cmp	r2, r3
 8002404:	d3f3      	bcc.n	80023ee <ds_fill+0x46>
 8002406:	e000      	b.n	800240a <ds_fill+0x62>
    return; // If first LED is past end of strip, nothing to do
 8002408:	bf00      	nop
  }
}
 800240a:	3710      	adds	r7, #16
 800240c:	46bd      	mov	sp, r7
 800240e:	bd80      	pop	{r7, pc}
 8002410:	200078d4 	.word	0x200078d4

08002414 <ds_setBrightness>:
           is 'non destructive' -- it's applied as color data is being
           issued to the strip, not during setPixelColor(), and also
           means that getPixelColor() returns the exact value originally
           stored.
*/
void ds_setBrightness(uint8_t b) {
 8002414:	b480      	push	{r7}
 8002416:	b083      	sub	sp, #12
 8002418:	af00      	add	r7, sp, #0
 800241a:	4603      	mov	r3, r0
 800241c:	71fb      	strb	r3, [r7, #7]
  // optimizes the actual scaling math later, allowing a fast 8x8-bit
  // multiply and taking the MSB. 'brightness' is a uint8_t, adding 1
  // here may (intentionally) roll over...so 0 = max brightness (color
  // values are interpreted literally; no scaling), 1 = min brightness
  // (off), 255 = just below max brightness.
  dotstar_state.brightness = b + 1;
 800241e:	79fb      	ldrb	r3, [r7, #7]
 8002420:	3301      	adds	r3, #1
 8002422:	b2da      	uxtb	r2, r3
 8002424:	4b03      	ldr	r3, [pc, #12]	; (8002434 <ds_setBrightness+0x20>)
 8002426:	719a      	strb	r2, [r3, #6]
}
 8002428:	bf00      	nop
 800242a:	370c      	adds	r7, #12
 800242c:	46bd      	mov	sp, r7
 800242e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002432:	4770      	bx	lr
 8002434:	200078d4 	.word	0x200078d4

08002438 <I2C_Write_Byte>:
//#include "stm32wbxx_hal_i2c.h"
//#include "stm32wbxx_hal.h"


void I2C_Write_Byte(uint8_t value, uint8_t Cmd)
{
 8002438:	b580      	push	{r7, lr}
 800243a:	b086      	sub	sp, #24
 800243c:	af02      	add	r7, sp, #8
 800243e:	4603      	mov	r3, r0
 8002440:	460a      	mov	r2, r1
 8002442:	71fb      	strb	r3, [r7, #7]
 8002444:	4613      	mov	r3, r2
 8002446:	71bb      	strb	r3, [r7, #6]
  uint16_t Addr = 0x3C << 1;
 8002448:	2378      	movs	r3, #120	; 0x78
 800244a:	81fb      	strh	r3, [r7, #14]
  uint8_t Data[2];
  Data[0] = Cmd;
 800244c:	79bb      	ldrb	r3, [r7, #6]
 800244e:	733b      	strb	r3, [r7, #12]
  Data[1] = value;
 8002450:	79fb      	ldrb	r3, [r7, #7]
 8002452:	737b      	strb	r3, [r7, #13]

  HAL_I2C_Master_Transmit(&ER_OLED_I2C_PORT, Addr, Data, 2, HAL_MAX_DELAY);
 8002454:	f107 020c 	add.w	r2, r7, #12
 8002458:	89f9      	ldrh	r1, [r7, #14]
 800245a:	f04f 33ff 	mov.w	r3, #4294967295
 800245e:	9300      	str	r3, [sp, #0]
 8002460:	2302      	movs	r3, #2
 8002462:	4803      	ldr	r0, [pc, #12]	; (8002470 <I2C_Write_Byte+0x38>)
 8002464:	f004 fd02 	bl	8006e6c <HAL_I2C_Master_Transmit>
}
 8002468:	bf00      	nop
 800246a:	3710      	adds	r7, #16
 800246c:	46bd      	mov	sp, r7
 800246e:	bd80      	pop	{r7, pc}
 8002470:	200078f0 	.word	0x200078f0

08002474 <er_oled_begin>:

void er_oled_begin()
{
 8002474:	b580      	push	{r7, lr}
 8002476:	af00      	add	r7, sp, #0
    command(0xae);//--turn off oled panel
 8002478:	2100      	movs	r1, #0
 800247a:	20ae      	movs	r0, #174	; 0xae
 800247c:	f7ff ffdc 	bl	8002438 <I2C_Write_Byte>

    command(0xd5);//--set display clock divide ratio/oscillator frequency
 8002480:	2100      	movs	r1, #0
 8002482:	20d5      	movs	r0, #213	; 0xd5
 8002484:	f7ff ffd8 	bl	8002438 <I2C_Write_Byte>
    command(0x80);//--set divide ratio
 8002488:	2100      	movs	r1, #0
 800248a:	2080      	movs	r0, #128	; 0x80
 800248c:	f7ff ffd4 	bl	8002438 <I2C_Write_Byte>

    command(0xa8);//--set multiplex ratio
 8002490:	2100      	movs	r1, #0
 8002492:	20a8      	movs	r0, #168	; 0xa8
 8002494:	f7ff ffd0 	bl	8002438 <I2C_Write_Byte>
    command(0x27);//--1/40 duty
 8002498:	2100      	movs	r1, #0
 800249a:	2027      	movs	r0, #39	; 0x27
 800249c:	f7ff ffcc 	bl	8002438 <I2C_Write_Byte>

    command(0xd3);//-set display offset
 80024a0:	2100      	movs	r1, #0
 80024a2:	20d3      	movs	r0, #211	; 0xd3
 80024a4:	f7ff ffc8 	bl	8002438 <I2C_Write_Byte>
    command(0x00);//-not offset
 80024a8:	2100      	movs	r1, #0
 80024aa:	2000      	movs	r0, #0
 80024ac:	f7ff ffc4 	bl	8002438 <I2C_Write_Byte>

    command(0xad);//--Internal IREF Setting
 80024b0:	2100      	movs	r1, #0
 80024b2:	20ad      	movs	r0, #173	; 0xad
 80024b4:	f7ff ffc0 	bl	8002438 <I2C_Write_Byte>
    command(0x30);//--
 80024b8:	2100      	movs	r1, #0
 80024ba:	2030      	movs	r0, #48	; 0x30
 80024bc:	f7ff ffbc 	bl	8002438 <I2C_Write_Byte>

    command(0x8d);//--set Charge Pump enable/disable
 80024c0:	2100      	movs	r1, #0
 80024c2:	208d      	movs	r0, #141	; 0x8d
 80024c4:	f7ff ffb8 	bl	8002438 <I2C_Write_Byte>
    command(0x14);//--set(0x10) disable
 80024c8:	2100      	movs	r1, #0
 80024ca:	2014      	movs	r0, #20
 80024cc:	f7ff ffb4 	bl	8002438 <I2C_Write_Byte>

    command(0x40);//--set start line address
 80024d0:	2100      	movs	r1, #0
 80024d2:	2040      	movs	r0, #64	; 0x40
 80024d4:	f7ff ffb0 	bl	8002438 <I2C_Write_Byte>

    command(0xa6);//--set normal display
 80024d8:	2100      	movs	r1, #0
 80024da:	20a6      	movs	r0, #166	; 0xa6
 80024dc:	f7ff ffac 	bl	8002438 <I2C_Write_Byte>

    command(0xa4);//Disable Entire Display On
 80024e0:	2100      	movs	r1, #0
 80024e2:	20a4      	movs	r0, #164	; 0xa4
 80024e4:	f7ff ffa8 	bl	8002438 <I2C_Write_Byte>

    command(0xa1);//--set segment re-map 128 to 0
 80024e8:	2100      	movs	r1, #0
 80024ea:	20a1      	movs	r0, #161	; 0xa1
 80024ec:	f7ff ffa4 	bl	8002438 <I2C_Write_Byte>

    command(0xC8);//--Set COM Output Scan Direction 64 to 0
 80024f0:	2100      	movs	r1, #0
 80024f2:	20c8      	movs	r0, #200	; 0xc8
 80024f4:	f7ff ffa0 	bl	8002438 <I2C_Write_Byte>

    command(0xda);//--set com pins hardware configuration
 80024f8:	2100      	movs	r1, #0
 80024fa:	20da      	movs	r0, #218	; 0xda
 80024fc:	f7ff ff9c 	bl	8002438 <I2C_Write_Byte>
    command(0x12);
 8002500:	2100      	movs	r1, #0
 8002502:	2012      	movs	r0, #18
 8002504:	f7ff ff98 	bl	8002438 <I2C_Write_Byte>

    command(0x81);//--set contrast control register
 8002508:	2100      	movs	r1, #0
 800250a:	2081      	movs	r0, #129	; 0x81
 800250c:	f7ff ff94 	bl	8002438 <I2C_Write_Byte>
    command(0xaf);
 8002510:	2100      	movs	r1, #0
 8002512:	20af      	movs	r0, #175	; 0xaf
 8002514:	f7ff ff90 	bl	8002438 <I2C_Write_Byte>

    command(0xd9);//--set pre-charge period
 8002518:	2100      	movs	r1, #0
 800251a:	20d9      	movs	r0, #217	; 0xd9
 800251c:	f7ff ff8c 	bl	8002438 <I2C_Write_Byte>
    command(0x22);
 8002520:	2100      	movs	r1, #0
 8002522:	2022      	movs	r0, #34	; 0x22
 8002524:	f7ff ff88 	bl	8002438 <I2C_Write_Byte>

    command(0xdb);//--set vcomh
 8002528:	2100      	movs	r1, #0
 800252a:	20db      	movs	r0, #219	; 0xdb
 800252c:	f7ff ff84 	bl	8002438 <I2C_Write_Byte>
    command(0x20);
 8002530:	2100      	movs	r1, #0
 8002532:	2020      	movs	r0, #32
 8002534:	f7ff ff80 	bl	8002438 <I2C_Write_Byte>

    command(0xaf);//--turn on oled panel
 8002538:	2100      	movs	r1, #0
 800253a:	20af      	movs	r0, #175	; 0xaf
 800253c:	f7ff ff7c 	bl	8002438 <I2C_Write_Byte>

}
 8002540:	bf00      	nop
 8002542:	bd80      	pop	{r7, pc}

08002544 <er_oled_clear>:

void er_oled_clear(uint8_t* buffer)
{
 8002544:	b480      	push	{r7}
 8002546:	b085      	sub	sp, #20
 8002548:	af00      	add	r7, sp, #0
 800254a:	6078      	str	r0, [r7, #4]
	int i;
	for(i = 0;i < WIDTH * HEIGHT / 8;i++)
 800254c:	2300      	movs	r3, #0
 800254e:	60fb      	str	r3, [r7, #12]
 8002550:	e007      	b.n	8002562 <er_oled_clear+0x1e>
	{
		buffer[i] = 0;
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	687a      	ldr	r2, [r7, #4]
 8002556:	4413      	add	r3, r2
 8002558:	2200      	movs	r2, #0
 800255a:	701a      	strb	r2, [r3, #0]
	for(i = 0;i < WIDTH * HEIGHT / 8;i++)
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	3301      	adds	r3, #1
 8002560:	60fb      	str	r3, [r7, #12]
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	f5b3 7fb4 	cmp.w	r3, #360	; 0x168
 8002568:	dbf3      	blt.n	8002552 <er_oled_clear+0xe>
	}
}
 800256a:	bf00      	nop
 800256c:	3714      	adds	r7, #20
 800256e:	46bd      	mov	sp, r7
 8002570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002574:	4770      	bx	lr

08002576 <er_oled_clear_bottom_third>:

void er_oled_clear_bottom_third(uint8_t* buffer)
{
 8002576:	b480      	push	{r7}
 8002578:	b085      	sub	sp, #20
 800257a:	af00      	add	r7, sp, #0
 800257c:	6078      	str	r0, [r7, #4]
	int i;
	for(i = 2 * WIDTH * HEIGHT / 24;i < WIDTH * HEIGHT / 8;i++)
 800257e:	23f0      	movs	r3, #240	; 0xf0
 8002580:	60fb      	str	r3, [r7, #12]
 8002582:	e007      	b.n	8002594 <er_oled_clear_bottom_third+0x1e>
	{
		buffer[i] = 0;
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	687a      	ldr	r2, [r7, #4]
 8002588:	4413      	add	r3, r2
 800258a:	2200      	movs	r2, #0
 800258c:	701a      	strb	r2, [r3, #0]
	for(i = 2 * WIDTH * HEIGHT / 24;i < WIDTH * HEIGHT / 8;i++)
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	3301      	adds	r3, #1
 8002592:	60fb      	str	r3, [r7, #12]
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	f5b3 7fb4 	cmp.w	r3, #360	; 0x168
 800259a:	dbf3      	blt.n	8002584 <er_oled_clear_bottom_third+0xe>
	}
}
 800259c:	bf00      	nop
 800259e:	3714      	adds	r7, #20
 80025a0:	46bd      	mov	sp, r7
 80025a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a6:	4770      	bx	lr

080025a8 <er_oled_pixel>:

void er_oled_pixel(int x, int y, char color, uint8_t* buffer)
{
 80025a8:	b480      	push	{r7}
 80025aa:	b085      	sub	sp, #20
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	60f8      	str	r0, [r7, #12]
 80025b0:	60b9      	str	r1, [r7, #8]
 80025b2:	603b      	str	r3, [r7, #0]
 80025b4:	4613      	mov	r3, r2
 80025b6:	71fb      	strb	r3, [r7, #7]
    if(x > WIDTH || y > HEIGHT)return ;
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	2b48      	cmp	r3, #72	; 0x48
 80025bc:	dc61      	bgt.n	8002682 <er_oled_pixel+0xda>
 80025be:	68bb      	ldr	r3, [r7, #8]
 80025c0:	2b28      	cmp	r3, #40	; 0x28
 80025c2:	dc5e      	bgt.n	8002682 <er_oled_pixel+0xda>
    if(color)
 80025c4:	79fb      	ldrb	r3, [r7, #7]
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d02c      	beq.n	8002624 <er_oled_pixel+0x7c>
        buffer[x+(y/8)*WIDTH] |= 1<<(y%8);
 80025ca:	68bb      	ldr	r3, [r7, #8]
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	da00      	bge.n	80025d2 <er_oled_pixel+0x2a>
 80025d0:	3307      	adds	r3, #7
 80025d2:	10db      	asrs	r3, r3, #3
 80025d4:	461a      	mov	r2, r3
 80025d6:	4613      	mov	r3, r2
 80025d8:	00db      	lsls	r3, r3, #3
 80025da:	4413      	add	r3, r2
 80025dc:	00db      	lsls	r3, r3, #3
 80025de:	4619      	mov	r1, r3
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	440b      	add	r3, r1
 80025e4:	4619      	mov	r1, r3
 80025e6:	683b      	ldr	r3, [r7, #0]
 80025e8:	440b      	add	r3, r1
 80025ea:	781b      	ldrb	r3, [r3, #0]
 80025ec:	b259      	sxtb	r1, r3
 80025ee:	68bb      	ldr	r3, [r7, #8]
 80025f0:	4258      	negs	r0, r3
 80025f2:	f003 0307 	and.w	r3, r3, #7
 80025f6:	f000 0007 	and.w	r0, r0, #7
 80025fa:	bf58      	it	pl
 80025fc:	4243      	negpl	r3, r0
 80025fe:	2001      	movs	r0, #1
 8002600:	fa00 f303 	lsl.w	r3, r0, r3
 8002604:	b25b      	sxtb	r3, r3
 8002606:	430b      	orrs	r3, r1
 8002608:	b259      	sxtb	r1, r3
 800260a:	4613      	mov	r3, r2
 800260c:	00db      	lsls	r3, r3, #3
 800260e:	4413      	add	r3, r2
 8002610:	00db      	lsls	r3, r3, #3
 8002612:	461a      	mov	r2, r3
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	4413      	add	r3, r2
 8002618:	461a      	mov	r2, r3
 800261a:	683b      	ldr	r3, [r7, #0]
 800261c:	4413      	add	r3, r2
 800261e:	b2ca      	uxtb	r2, r1
 8002620:	701a      	strb	r2, [r3, #0]
 8002622:	e02f      	b.n	8002684 <er_oled_pixel+0xdc>
    else
        buffer[x+(y/8)*WIDTH] &= ~(1<<(y%8));
 8002624:	68bb      	ldr	r3, [r7, #8]
 8002626:	2b00      	cmp	r3, #0
 8002628:	da00      	bge.n	800262c <er_oled_pixel+0x84>
 800262a:	3307      	adds	r3, #7
 800262c:	10db      	asrs	r3, r3, #3
 800262e:	461a      	mov	r2, r3
 8002630:	4613      	mov	r3, r2
 8002632:	00db      	lsls	r3, r3, #3
 8002634:	4413      	add	r3, r2
 8002636:	00db      	lsls	r3, r3, #3
 8002638:	4619      	mov	r1, r3
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	440b      	add	r3, r1
 800263e:	4619      	mov	r1, r3
 8002640:	683b      	ldr	r3, [r7, #0]
 8002642:	440b      	add	r3, r1
 8002644:	781b      	ldrb	r3, [r3, #0]
 8002646:	b259      	sxtb	r1, r3
 8002648:	68bb      	ldr	r3, [r7, #8]
 800264a:	4258      	negs	r0, r3
 800264c:	f003 0307 	and.w	r3, r3, #7
 8002650:	f000 0007 	and.w	r0, r0, #7
 8002654:	bf58      	it	pl
 8002656:	4243      	negpl	r3, r0
 8002658:	2001      	movs	r0, #1
 800265a:	fa00 f303 	lsl.w	r3, r0, r3
 800265e:	b25b      	sxtb	r3, r3
 8002660:	43db      	mvns	r3, r3
 8002662:	b25b      	sxtb	r3, r3
 8002664:	400b      	ands	r3, r1
 8002666:	b259      	sxtb	r1, r3
 8002668:	4613      	mov	r3, r2
 800266a:	00db      	lsls	r3, r3, #3
 800266c:	4413      	add	r3, r2
 800266e:	00db      	lsls	r3, r3, #3
 8002670:	461a      	mov	r2, r3
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	4413      	add	r3, r2
 8002676:	461a      	mov	r2, r3
 8002678:	683b      	ldr	r3, [r7, #0]
 800267a:	4413      	add	r3, r2
 800267c:	b2ca      	uxtb	r2, r1
 800267e:	701a      	strb	r2, [r3, #0]
 8002680:	e000      	b.n	8002684 <er_oled_pixel+0xdc>
    if(x > WIDTH || y > HEIGHT)return ;
 8002682:	bf00      	nop
}
 8002684:	3714      	adds	r7, #20
 8002686:	46bd      	mov	sp, r7
 8002688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800268c:	4770      	bx	lr
	...

08002690 <er_oled_char>:
		}
	}
}

void er_oled_char(unsigned char x, unsigned char y, char acsii, char size, char mode, uint8_t* buffer)
{
 8002690:	b590      	push	{r4, r7, lr}
 8002692:	b087      	sub	sp, #28
 8002694:	af00      	add	r7, sp, #0
 8002696:	4604      	mov	r4, r0
 8002698:	4608      	mov	r0, r1
 800269a:	4611      	mov	r1, r2
 800269c:	461a      	mov	r2, r3
 800269e:	4623      	mov	r3, r4
 80026a0:	71fb      	strb	r3, [r7, #7]
 80026a2:	4603      	mov	r3, r0
 80026a4:	71bb      	strb	r3, [r7, #6]
 80026a6:	460b      	mov	r3, r1
 80026a8:	717b      	strb	r3, [r7, #5]
 80026aa:	4613      	mov	r3, r2
 80026ac:	713b      	strb	r3, [r7, #4]
    unsigned char i, j, y0=y;
 80026ae:	79bb      	ldrb	r3, [r7, #6]
 80026b0:	743b      	strb	r3, [r7, #16]
    uint16_t temp;
    uint16_t position = 0x80;
 80026b2:	2380      	movs	r3, #128	; 0x80
 80026b4:	827b      	strh	r3, [r7, #18]
    uint8_t maxindex = 8;
 80026b6:	2308      	movs	r3, #8
 80026b8:	747b      	strb	r3, [r7, #17]
    unsigned char ch = acsii - ' ';
 80026ba:	797b      	ldrb	r3, [r7, #5]
 80026bc:	3b20      	subs	r3, #32
 80026be:	73fb      	strb	r3, [r7, #15]

    if (size == 32){
 80026c0:	793b      	ldrb	r3, [r7, #4]
 80026c2:	2b20      	cmp	r3, #32
 80026c4:	d104      	bne.n	80026d0 <er_oled_char+0x40>
    	position = 0x8000;
 80026c6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80026ca:	827b      	strh	r3, [r7, #18]
    	maxindex =16;
 80026cc:	2310      	movs	r3, #16
 80026ce:	747b      	strb	r3, [r7, #17]
    }

    for(i = 0;i<size;i++) {
 80026d0:	2300      	movs	r3, #0
 80026d2:	75fb      	strb	r3, [r7, #23]
 80026d4:	e0b1      	b.n	800283a <er_oled_char+0x1aa>
        if(size == 12)
 80026d6:	793b      	ldrb	r3, [r7, #4]
 80026d8:	2b0c      	cmp	r3, #12
 80026da:	d11d      	bne.n	8002718 <er_oled_char+0x88>
        {
            if(mode)temp = Font1206[ch][i];
 80026dc:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d00b      	beq.n	80026fc <er_oled_char+0x6c>
 80026e4:	7bfa      	ldrb	r2, [r7, #15]
 80026e6:	7df9      	ldrb	r1, [r7, #23]
 80026e8:	4858      	ldr	r0, [pc, #352]	; (800284c <er_oled_char+0x1bc>)
 80026ea:	4613      	mov	r3, r2
 80026ec:	005b      	lsls	r3, r3, #1
 80026ee:	4413      	add	r3, r2
 80026f0:	009b      	lsls	r3, r3, #2
 80026f2:	4403      	add	r3, r0
 80026f4:	440b      	add	r3, r1
 80026f6:	781b      	ldrb	r3, [r3, #0]
 80026f8:	82bb      	strh	r3, [r7, #20]
 80026fa:	e06c      	b.n	80027d6 <er_oled_char+0x146>
            else temp = ~Font1206[ch][i];
 80026fc:	7bfa      	ldrb	r2, [r7, #15]
 80026fe:	7df9      	ldrb	r1, [r7, #23]
 8002700:	4852      	ldr	r0, [pc, #328]	; (800284c <er_oled_char+0x1bc>)
 8002702:	4613      	mov	r3, r2
 8002704:	005b      	lsls	r3, r3, #1
 8002706:	4413      	add	r3, r2
 8002708:	009b      	lsls	r3, r3, #2
 800270a:	4403      	add	r3, r0
 800270c:	440b      	add	r3, r1
 800270e:	781b      	ldrb	r3, [r3, #0]
 8002710:	b29b      	uxth	r3, r3
 8002712:	43db      	mvns	r3, r3
 8002714:	82bb      	strh	r3, [r7, #20]
 8002716:	e05e      	b.n	80027d6 <er_oled_char+0x146>
        }
        else if(size == 16)
 8002718:	793b      	ldrb	r3, [r7, #4]
 800271a:	2b10      	cmp	r3, #16
 800271c:	d117      	bne.n	800274e <er_oled_char+0xbe>
        {
            if(mode)temp = Font1608[ch][i];
 800271e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8002722:	2b00      	cmp	r3, #0
 8002724:	d008      	beq.n	8002738 <er_oled_char+0xa8>
 8002726:	7bfa      	ldrb	r2, [r7, #15]
 8002728:	7dfb      	ldrb	r3, [r7, #23]
 800272a:	4949      	ldr	r1, [pc, #292]	; (8002850 <er_oled_char+0x1c0>)
 800272c:	0112      	lsls	r2, r2, #4
 800272e:	440a      	add	r2, r1
 8002730:	4413      	add	r3, r2
 8002732:	781b      	ldrb	r3, [r3, #0]
 8002734:	82bb      	strh	r3, [r7, #20]
 8002736:	e04e      	b.n	80027d6 <er_oled_char+0x146>
            else temp = ~Font1608[ch][i];
 8002738:	7bfa      	ldrb	r2, [r7, #15]
 800273a:	7dfb      	ldrb	r3, [r7, #23]
 800273c:	4944      	ldr	r1, [pc, #272]	; (8002850 <er_oled_char+0x1c0>)
 800273e:	0112      	lsls	r2, r2, #4
 8002740:	440a      	add	r2, r1
 8002742:	4413      	add	r3, r2
 8002744:	781b      	ldrb	r3, [r3, #0]
 8002746:	b29b      	uxth	r3, r3
 8002748:	43db      	mvns	r3, r3
 800274a:	82bb      	strh	r3, [r7, #20]
 800274c:	e043      	b.n	80027d6 <er_oled_char+0x146>
        }
        else {
            if(mode) {
 800274e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8002752:	2b00      	cmp	r3, #0
 8002754:	d01c      	beq.n	8002790 <er_oled_char+0x100>
            	temp = Font3216[ch - 16][2*i] << 8;
 8002756:	7bfb      	ldrb	r3, [r7, #15]
 8002758:	f1a3 0210 	sub.w	r2, r3, #16
 800275c:	7dfb      	ldrb	r3, [r7, #23]
 800275e:	005b      	lsls	r3, r3, #1
 8002760:	493c      	ldr	r1, [pc, #240]	; (8002854 <er_oled_char+0x1c4>)
 8002762:	0192      	lsls	r2, r2, #6
 8002764:	440a      	add	r2, r1
 8002766:	4413      	add	r3, r2
 8002768:	781b      	ldrb	r3, [r3, #0]
 800276a:	b29b      	uxth	r3, r3
 800276c:	021b      	lsls	r3, r3, #8
 800276e:	82bb      	strh	r3, [r7, #20]
                temp |= Font3216[ch-16][2*i + 1];
 8002770:	7bfb      	ldrb	r3, [r7, #15]
 8002772:	f1a3 0210 	sub.w	r2, r3, #16
 8002776:	7dfb      	ldrb	r3, [r7, #23]
 8002778:	005b      	lsls	r3, r3, #1
 800277a:	3301      	adds	r3, #1
 800277c:	4935      	ldr	r1, [pc, #212]	; (8002854 <er_oled_char+0x1c4>)
 800277e:	0192      	lsls	r2, r2, #6
 8002780:	440a      	add	r2, r1
 8002782:	4413      	add	r3, r2
 8002784:	781b      	ldrb	r3, [r3, #0]
 8002786:	b29a      	uxth	r2, r3
 8002788:	8abb      	ldrh	r3, [r7, #20]
 800278a:	4313      	orrs	r3, r2
 800278c:	82bb      	strh	r3, [r7, #20]
 800278e:	e022      	b.n	80027d6 <er_oled_char+0x146>
            }
            else {
            	temp = ~Font3216[ch - 16][2*i] << 8;
 8002790:	7bfb      	ldrb	r3, [r7, #15]
 8002792:	f1a3 0210 	sub.w	r2, r3, #16
 8002796:	7dfb      	ldrb	r3, [r7, #23]
 8002798:	005b      	lsls	r3, r3, #1
 800279a:	492e      	ldr	r1, [pc, #184]	; (8002854 <er_oled_char+0x1c4>)
 800279c:	0192      	lsls	r2, r2, #6
 800279e:	440a      	add	r2, r1
 80027a0:	4413      	add	r3, r2
 80027a2:	781b      	ldrb	r3, [r3, #0]
 80027a4:	b29b      	uxth	r3, r3
 80027a6:	43db      	mvns	r3, r3
 80027a8:	b29b      	uxth	r3, r3
 80027aa:	021b      	lsls	r3, r3, #8
 80027ac:	82bb      	strh	r3, [r7, #20]
            	temp |= ~Font3216[ch - 16][2*i + 1];
 80027ae:	7bfb      	ldrb	r3, [r7, #15]
 80027b0:	f1a3 0210 	sub.w	r2, r3, #16
 80027b4:	7dfb      	ldrb	r3, [r7, #23]
 80027b6:	005b      	lsls	r3, r3, #1
 80027b8:	3301      	adds	r3, #1
 80027ba:	4926      	ldr	r1, [pc, #152]	; (8002854 <er_oled_char+0x1c4>)
 80027bc:	0192      	lsls	r2, r2, #6
 80027be:	440a      	add	r2, r1
 80027c0:	4413      	add	r3, r2
 80027c2:	781b      	ldrb	r3, [r3, #0]
 80027c4:	b29b      	uxth	r3, r3
 80027c6:	43db      	mvns	r3, r3
 80027c8:	b29b      	uxth	r3, r3
 80027ca:	b21a      	sxth	r2, r3
 80027cc:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80027d0:	4313      	orrs	r3, r2
 80027d2:	b21b      	sxth	r3, r3
 80027d4:	82bb      	strh	r3, [r7, #20]
            }
        }
        for(j =0;j<maxindex;j++)
 80027d6:	2300      	movs	r3, #0
 80027d8:	75bb      	strb	r3, [r7, #22]
 80027da:	e027      	b.n	800282c <er_oled_char+0x19c>
        {
            if(temp & position) er_oled_pixel(x, y, 1, buffer);
 80027dc:	8aba      	ldrh	r2, [r7, #20]
 80027de:	8a7b      	ldrh	r3, [r7, #18]
 80027e0:	4013      	ands	r3, r2
 80027e2:	b29b      	uxth	r3, r3
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d006      	beq.n	80027f6 <er_oled_char+0x166>
 80027e8:	79f8      	ldrb	r0, [r7, #7]
 80027ea:	79b9      	ldrb	r1, [r7, #6]
 80027ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027ee:	2201      	movs	r2, #1
 80027f0:	f7ff feda 	bl	80025a8 <er_oled_pixel>
 80027f4:	e005      	b.n	8002802 <er_oled_char+0x172>
            else er_oled_pixel(x, y, 0, buffer);
 80027f6:	79f8      	ldrb	r0, [r7, #7]
 80027f8:	79b9      	ldrb	r1, [r7, #6]
 80027fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027fc:	2200      	movs	r2, #0
 80027fe:	f7ff fed3 	bl	80025a8 <er_oled_pixel>
            temp <<= 1;
 8002802:	8abb      	ldrh	r3, [r7, #20]
 8002804:	005b      	lsls	r3, r3, #1
 8002806:	82bb      	strh	r3, [r7, #20]
            y++;
 8002808:	79bb      	ldrb	r3, [r7, #6]
 800280a:	3301      	adds	r3, #1
 800280c:	71bb      	strb	r3, [r7, #6]
            if((y-y0) == size)
 800280e:	79ba      	ldrb	r2, [r7, #6]
 8002810:	7c3b      	ldrb	r3, [r7, #16]
 8002812:	1ad2      	subs	r2, r2, r3
 8002814:	793b      	ldrb	r3, [r7, #4]
 8002816:	429a      	cmp	r2, r3
 8002818:	d105      	bne.n	8002826 <er_oled_char+0x196>
            {
                y = y0;
 800281a:	7c3b      	ldrb	r3, [r7, #16]
 800281c:	71bb      	strb	r3, [r7, #6]
                x++;
 800281e:	79fb      	ldrb	r3, [r7, #7]
 8002820:	3301      	adds	r3, #1
 8002822:	71fb      	strb	r3, [r7, #7]
                break;
 8002824:	e006      	b.n	8002834 <er_oled_char+0x1a4>
        for(j =0;j<maxindex;j++)
 8002826:	7dbb      	ldrb	r3, [r7, #22]
 8002828:	3301      	adds	r3, #1
 800282a:	75bb      	strb	r3, [r7, #22]
 800282c:	7dba      	ldrb	r2, [r7, #22]
 800282e:	7c7b      	ldrb	r3, [r7, #17]
 8002830:	429a      	cmp	r2, r3
 8002832:	d3d3      	bcc.n	80027dc <er_oled_char+0x14c>
    for(i = 0;i<size;i++) {
 8002834:	7dfb      	ldrb	r3, [r7, #23]
 8002836:	3301      	adds	r3, #1
 8002838:	75fb      	strb	r3, [r7, #23]
 800283a:	7dfa      	ldrb	r2, [r7, #23]
 800283c:	793b      	ldrb	r3, [r7, #4]
 800283e:	429a      	cmp	r2, r3
 8002840:	f4ff af49 	bcc.w	80026d6 <er_oled_char+0x46>
            }
        }
    }
}
 8002844:	bf00      	nop
 8002846:	371c      	adds	r7, #28
 8002848:	46bd      	mov	sp, r7
 800284a:	bd90      	pop	{r4, r7, pc}
 800284c:	080170c0 	.word	0x080170c0
 8002850:	08017534 	.word	0x08017534
 8002854:	08017b24 	.word	0x08017b24

08002858 <er_oled_string>:

void er_oled_string(uint8_t x, uint8_t y, const char *pString, uint8_t Size, uint8_t Mode, uint8_t* buffer)
{
 8002858:	b590      	push	{r4, r7, lr}
 800285a:	b085      	sub	sp, #20
 800285c:	af02      	add	r7, sp, #8
 800285e:	603a      	str	r2, [r7, #0]
 8002860:	461a      	mov	r2, r3
 8002862:	4603      	mov	r3, r0
 8002864:	71fb      	strb	r3, [r7, #7]
 8002866:	460b      	mov	r3, r1
 8002868:	71bb      	strb	r3, [r7, #6]
 800286a:	4613      	mov	r3, r2
 800286c:	717b      	strb	r3, [r7, #5]
    while (*pString != '\0') {
 800286e:	e02c      	b.n	80028ca <er_oled_string+0x72>
        if (x > (WIDTH - Size / 2)) {
 8002870:	79fa      	ldrb	r2, [r7, #7]
 8002872:	797b      	ldrb	r3, [r7, #5]
 8002874:	085b      	lsrs	r3, r3, #1
 8002876:	b2db      	uxtb	r3, r3
 8002878:	f1c3 0348 	rsb	r3, r3, #72	; 0x48
 800287c:	429a      	cmp	r2, r3
 800287e:	dd0f      	ble.n	80028a0 <er_oled_string+0x48>
            x = 0;
 8002880:	2300      	movs	r3, #0
 8002882:	71fb      	strb	r3, [r7, #7]
            y += Size;
 8002884:	79ba      	ldrb	r2, [r7, #6]
 8002886:	797b      	ldrb	r3, [r7, #5]
 8002888:	4413      	add	r3, r2
 800288a:	71bb      	strb	r3, [r7, #6]
            if (y > (HEIGHT - Size)) {
 800288c:	79ba      	ldrb	r2, [r7, #6]
 800288e:	797b      	ldrb	r3, [r7, #5]
 8002890:	f1c3 0328 	rsb	r3, r3, #40	; 0x28
 8002894:	429a      	cmp	r2, r3
 8002896:	dd03      	ble.n	80028a0 <er_oled_string+0x48>
                y = x = 0;
 8002898:	2300      	movs	r3, #0
 800289a:	71fb      	strb	r3, [r7, #7]
 800289c:	79fb      	ldrb	r3, [r7, #7]
 800289e:	71bb      	strb	r3, [r7, #6]
            }
        }

        er_oled_char(x, y, *pString, Size, Mode, buffer);
 80028a0:	683b      	ldr	r3, [r7, #0]
 80028a2:	781a      	ldrb	r2, [r3, #0]
 80028a4:	797c      	ldrb	r4, [r7, #5]
 80028a6:	79b9      	ldrb	r1, [r7, #6]
 80028a8:	79f8      	ldrb	r0, [r7, #7]
 80028aa:	69fb      	ldr	r3, [r7, #28]
 80028ac:	9301      	str	r3, [sp, #4]
 80028ae:	7e3b      	ldrb	r3, [r7, #24]
 80028b0:	9300      	str	r3, [sp, #0]
 80028b2:	4623      	mov	r3, r4
 80028b4:	f7ff feec 	bl	8002690 <er_oled_char>
        x += Size / 2;
 80028b8:	797b      	ldrb	r3, [r7, #5]
 80028ba:	085b      	lsrs	r3, r3, #1
 80028bc:	b2da      	uxtb	r2, r3
 80028be:	79fb      	ldrb	r3, [r7, #7]
 80028c0:	4413      	add	r3, r2
 80028c2:	71fb      	strb	r3, [r7, #7]
        pString++;
 80028c4:	683b      	ldr	r3, [r7, #0]
 80028c6:	3301      	adds	r3, #1
 80028c8:	603b      	str	r3, [r7, #0]
    while (*pString != '\0') {
 80028ca:	683b      	ldr	r3, [r7, #0]
 80028cc:	781b      	ldrb	r3, [r3, #0]
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d1ce      	bne.n	8002870 <er_oled_string+0x18>
    }
}
 80028d2:	bf00      	nop
 80028d4:	370c      	adds	r7, #12
 80028d6:	46bd      	mov	sp, r7
 80028d8:	bd90      	pop	{r4, r7, pc}

080028da <er_oled_display>:
		}
	}
}

void er_oled_display(uint8_t* pBuf)
{    uint8_t page,i;
 80028da:	b580      	push	{r7, lr}
 80028dc:	b084      	sub	sp, #16
 80028de:	af00      	add	r7, sp, #0
 80028e0:	6078      	str	r0, [r7, #4]
    for (page = 0; page < PAGES; page++) {
 80028e2:	2300      	movs	r3, #0
 80028e4:	73fb      	strb	r3, [r7, #15]
 80028e6:	e029      	b.n	800293c <er_oled_display+0x62>
        command(0xB0 + page);/* set page address */
 80028e8:	7bfb      	ldrb	r3, [r7, #15]
 80028ea:	3b50      	subs	r3, #80	; 0x50
 80028ec:	b2db      	uxtb	r3, r3
 80028ee:	2100      	movs	r1, #0
 80028f0:	4618      	mov	r0, r3
 80028f2:	f7ff fda1 	bl	8002438 <I2C_Write_Byte>
        command(0x0c);   /* set low column address */
 80028f6:	2100      	movs	r1, #0
 80028f8:	200c      	movs	r0, #12
 80028fa:	f7ff fd9d 	bl	8002438 <I2C_Write_Byte>
        command(0x11);  /* set high column address */
 80028fe:	2100      	movs	r1, #0
 8002900:	2011      	movs	r0, #17
 8002902:	f7ff fd99 	bl	8002438 <I2C_Write_Byte>
        for(i = 0; i< WIDTH; i++ ) {
 8002906:	2300      	movs	r3, #0
 8002908:	73bb      	strb	r3, [r7, #14]
 800290a:	e011      	b.n	8002930 <er_oled_display+0x56>
          data(pBuf[i+page*WIDTH]);// write data one
 800290c:	7bb9      	ldrb	r1, [r7, #14]
 800290e:	7bfa      	ldrb	r2, [r7, #15]
 8002910:	4613      	mov	r3, r2
 8002912:	00db      	lsls	r3, r3, #3
 8002914:	4413      	add	r3, r2
 8002916:	00db      	lsls	r3, r3, #3
 8002918:	440b      	add	r3, r1
 800291a:	461a      	mov	r2, r3
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	4413      	add	r3, r2
 8002920:	781b      	ldrb	r3, [r3, #0]
 8002922:	2140      	movs	r1, #64	; 0x40
 8002924:	4618      	mov	r0, r3
 8002926:	f7ff fd87 	bl	8002438 <I2C_Write_Byte>
        for(i = 0; i< WIDTH; i++ ) {
 800292a:	7bbb      	ldrb	r3, [r7, #14]
 800292c:	3301      	adds	r3, #1
 800292e:	73bb      	strb	r3, [r7, #14]
 8002930:	7bbb      	ldrb	r3, [r7, #14]
 8002932:	2b47      	cmp	r3, #71	; 0x47
 8002934:	d9ea      	bls.n	800290c <er_oled_display+0x32>
    for (page = 0; page < PAGES; page++) {
 8002936:	7bfb      	ldrb	r3, [r7, #15]
 8002938:	3301      	adds	r3, #1
 800293a:	73fb      	strb	r3, [r7, #15]
 800293c:	7bfb      	ldrb	r3, [r7, #15]
 800293e:	2b04      	cmp	r3, #4
 8002940:	d9d2      	bls.n	80028e8 <er_oled_display+0xe>
        }
    }
}
 8002942:	bf00      	nop
 8002944:	3710      	adds	r7, #16
 8002946:	46bd      	mov	sp, r7
 8002948:	bd80      	pop	{r7, pc}

0800294a <er_oled_time>:

void er_oled_time(const char *pString)
{
 800294a:	b580      	push	{r7, lr}
 800294c:	b0de      	sub	sp, #376	; 0x178
 800294e:	af02      	add	r7, sp, #8
 8002950:	1d3b      	adds	r3, r7, #4
 8002952:	6018      	str	r0, [r3, #0]
	uint8_t oled_buf[WIDTH * HEIGHT / 8];

	er_oled_clear(oled_buf);
 8002954:	f107 0308 	add.w	r3, r7, #8
 8002958:	4618      	mov	r0, r3
 800295a:	f7ff fdf3 	bl	8002544 <er_oled_clear>
    er_oled_char( 0, 4, *pString++,  32, 1, oled_buf);
 800295e:	1d3b      	adds	r3, r7, #4
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	1d3a      	adds	r2, r7, #4
 8002964:	1c59      	adds	r1, r3, #1
 8002966:	6011      	str	r1, [r2, #0]
 8002968:	781a      	ldrb	r2, [r3, #0]
 800296a:	f107 0308 	add.w	r3, r7, #8
 800296e:	9301      	str	r3, [sp, #4]
 8002970:	2301      	movs	r3, #1
 8002972:	9300      	str	r3, [sp, #0]
 8002974:	2320      	movs	r3, #32
 8002976:	2104      	movs	r1, #4
 8002978:	2000      	movs	r0, #0
 800297a:	f7ff fe89 	bl	8002690 <er_oled_char>
    er_oled_char(16, 4, *pString++ , 32, 1, oled_buf);
 800297e:	1d3b      	adds	r3, r7, #4
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	1d3a      	adds	r2, r7, #4
 8002984:	1c59      	adds	r1, r3, #1
 8002986:	6011      	str	r1, [r2, #0]
 8002988:	781a      	ldrb	r2, [r3, #0]
 800298a:	f107 0308 	add.w	r3, r7, #8
 800298e:	9301      	str	r3, [sp, #4]
 8002990:	2301      	movs	r3, #1
 8002992:	9300      	str	r3, [sp, #0]
 8002994:	2320      	movs	r3, #32
 8002996:	2104      	movs	r1, #4
 8002998:	2010      	movs	r0, #16
 800299a:	f7ff fe79 	bl	8002690 <er_oled_char>
    er_oled_char(40, 4, *pString++ , 32, 1, oled_buf);
 800299e:	1d3b      	adds	r3, r7, #4
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	1d3a      	adds	r2, r7, #4
 80029a4:	1c59      	adds	r1, r3, #1
 80029a6:	6011      	str	r1, [r2, #0]
 80029a8:	781a      	ldrb	r2, [r3, #0]
 80029aa:	f107 0308 	add.w	r3, r7, #8
 80029ae:	9301      	str	r3, [sp, #4]
 80029b0:	2301      	movs	r3, #1
 80029b2:	9300      	str	r3, [sp, #0]
 80029b4:	2320      	movs	r3, #32
 80029b6:	2104      	movs	r1, #4
 80029b8:	2028      	movs	r0, #40	; 0x28
 80029ba:	f7ff fe69 	bl	8002690 <er_oled_char>
    er_oled_char(56, 4, *pString   , 32, 1, oled_buf);
 80029be:	1d3b      	adds	r3, r7, #4
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	781a      	ldrb	r2, [r3, #0]
 80029c4:	f107 0308 	add.w	r3, r7, #8
 80029c8:	9301      	str	r3, [sp, #4]
 80029ca:	2301      	movs	r3, #1
 80029cc:	9300      	str	r3, [sp, #0]
 80029ce:	2320      	movs	r3, #32
 80029d0:	2104      	movs	r1, #4
 80029d2:	2038      	movs	r0, #56	; 0x38
 80029d4:	f7ff fe5c 	bl	8002690 <er_oled_char>

    er_oled_pixel(36, 12, 1, oled_buf);
 80029d8:	f107 0308 	add.w	r3, r7, #8
 80029dc:	2201      	movs	r2, #1
 80029de:	210c      	movs	r1, #12
 80029e0:	2024      	movs	r0, #36	; 0x24
 80029e2:	f7ff fde1 	bl	80025a8 <er_oled_pixel>
	er_oled_pixel(36, 13, 1, oled_buf);
 80029e6:	f107 0308 	add.w	r3, r7, #8
 80029ea:	2201      	movs	r2, #1
 80029ec:	210d      	movs	r1, #13
 80029ee:	2024      	movs	r0, #36	; 0x24
 80029f0:	f7ff fdda 	bl	80025a8 <er_oled_pixel>
	er_oled_pixel(36, 14, 1, oled_buf);
 80029f4:	f107 0308 	add.w	r3, r7, #8
 80029f8:	2201      	movs	r2, #1
 80029fa:	210e      	movs	r1, #14
 80029fc:	2024      	movs	r0, #36	; 0x24
 80029fe:	f7ff fdd3 	bl	80025a8 <er_oled_pixel>
	er_oled_pixel(36, 28, 1, oled_buf);
 8002a02:	f107 0308 	add.w	r3, r7, #8
 8002a06:	2201      	movs	r2, #1
 8002a08:	211c      	movs	r1, #28
 8002a0a:	2024      	movs	r0, #36	; 0x24
 8002a0c:	f7ff fdcc 	bl	80025a8 <er_oled_pixel>
	er_oled_pixel(36, 27, 1, oled_buf);
 8002a10:	f107 0308 	add.w	r3, r7, #8
 8002a14:	2201      	movs	r2, #1
 8002a16:	211b      	movs	r1, #27
 8002a18:	2024      	movs	r0, #36	; 0x24
 8002a1a:	f7ff fdc5 	bl	80025a8 <er_oled_pixel>
	er_oled_pixel(36, 26, 1, oled_buf);
 8002a1e:	f107 0308 	add.w	r3, r7, #8
 8002a22:	2201      	movs	r2, #1
 8002a24:	211a      	movs	r1, #26
 8002a26:	2024      	movs	r0, #36	; 0x24
 8002a28:	f7ff fdbe 	bl	80025a8 <er_oled_pixel>

	er_oled_display(oled_buf);
 8002a2c:	f107 0308 	add.w	r3, r7, #8
 8002a30:	4618      	mov	r0, r3
 8002a32:	f7ff ff52 	bl	80028da <er_oled_display>
}
 8002a36:	bf00      	nop
 8002a38:	f507 77b8 	add.w	r7, r7, #368	; 0x170
 8002a3c:	46bd      	mov	sp, r7
 8002a3e:	bd80      	pop	{r7, pc}

08002a40 <vPortSuppressTicksAndSleep>:
 *
 * @param: xExpectedIdleTime is given in number of FreeRTOS Ticks
 * @retval: None
 */
void vPortSuppressTicksAndSleep( TickType_t xExpectedIdleTime )
{
 8002a40:	b480      	push	{r7}
 8002a42:	b083      	sub	sp, #12
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	6078      	str	r0, [r7, #4]

    /* Exit with interrUpts enabled. */
    __enable_irq();
  }
#endif
}
 8002a48:	bf00      	nop
 8002a4a:	370c      	adds	r7, #12
 8002a4c:	46bd      	mov	sp, r7
 8002a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a52:	4770      	bx	lr

08002a54 <LL_EXTI_EnableIT_0_31>:
{
 8002a54:	b480      	push	{r7}
 8002a56:	b083      	sub	sp, #12
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8002a5c:	4b06      	ldr	r3, [pc, #24]	; (8002a78 <LL_EXTI_EnableIT_0_31+0x24>)
 8002a5e:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8002a62:	4905      	ldr	r1, [pc, #20]	; (8002a78 <LL_EXTI_EnableIT_0_31+0x24>)
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	4313      	orrs	r3, r2
 8002a68:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 8002a6c:	bf00      	nop
 8002a6e:	370c      	adds	r7, #12
 8002a70:	46bd      	mov	sp, r7
 8002a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a76:	4770      	bx	lr
 8002a78:	58000800 	.word	0x58000800

08002a7c <LL_EXTI_EnableRisingTrig_0_31>:
{
 8002a7c:	b480      	push	{r7}
 8002a7e:	b083      	sub	sp, #12
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8002a84:	4b05      	ldr	r3, [pc, #20]	; (8002a9c <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8002a86:	681a      	ldr	r2, [r3, #0]
 8002a88:	4904      	ldr	r1, [pc, #16]	; (8002a9c <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	4313      	orrs	r3, r2
 8002a8e:	600b      	str	r3, [r1, #0]
}
 8002a90:	bf00      	nop
 8002a92:	370c      	adds	r7, #12
 8002a94:	46bd      	mov	sp, r7
 8002a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a9a:	4770      	bx	lr
 8002a9c:	58000800 	.word	0x58000800

08002aa0 <ReadRtcSsrValue>:
 *         reliability of the value
 * @param  None
 * @retval SSR value read
 */
static uint32_t ReadRtcSsrValue(void)
{
 8002aa0:	b480      	push	{r7}
 8002aa2:	b083      	sub	sp, #12
 8002aa4:	af00      	add	r7, sp, #0
  uint32_t first_read;
  uint32_t second_read;

  first_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8002aa6:	4b0d      	ldr	r3, [pc, #52]	; (8002adc <ReadRtcSsrValue+0x3c>)
 8002aa8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002aaa:	b29b      	uxth	r3, r3
 8002aac:	607b      	str	r3, [r7, #4]

  second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8002aae:	4b0b      	ldr	r3, [pc, #44]	; (8002adc <ReadRtcSsrValue+0x3c>)
 8002ab0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ab2:	b29b      	uxth	r3, r3
 8002ab4:	603b      	str	r3, [r7, #0]

  while(first_read != second_read)
 8002ab6:	e005      	b.n	8002ac4 <ReadRtcSsrValue+0x24>
  {
    first_read = second_read;
 8002ab8:	683b      	ldr	r3, [r7, #0]
 8002aba:	607b      	str	r3, [r7, #4]

    second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8002abc:	4b07      	ldr	r3, [pc, #28]	; (8002adc <ReadRtcSsrValue+0x3c>)
 8002abe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ac0:	b29b      	uxth	r3, r3
 8002ac2:	603b      	str	r3, [r7, #0]
  while(first_read != second_read)
 8002ac4:	687a      	ldr	r2, [r7, #4]
 8002ac6:	683b      	ldr	r3, [r7, #0]
 8002ac8:	429a      	cmp	r2, r3
 8002aca:	d1f5      	bne.n	8002ab8 <ReadRtcSsrValue+0x18>
  }

  return second_read;
 8002acc:	683b      	ldr	r3, [r7, #0]
}
 8002ace:	4618      	mov	r0, r3
 8002ad0:	370c      	adds	r7, #12
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad8:	4770      	bx	lr
 8002ada:	bf00      	nop
 8002adc:	40002800 	.word	0x40002800

08002ae0 <LinkTimerAfter>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked after
 * @retval None
 */
static void LinkTimerAfter(uint8_t TimerID, uint8_t RefTimerID)
{
 8002ae0:	b480      	push	{r7}
 8002ae2:	b085      	sub	sp, #20
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	4603      	mov	r3, r0
 8002ae8:	460a      	mov	r2, r1
 8002aea:	71fb      	strb	r3, [r7, #7]
 8002aec:	4613      	mov	r3, r2
 8002aee:	71bb      	strb	r3, [r7, #6]
  uint8_t next_id;

  next_id = aTimerContext[RefTimerID].NextID;
 8002af0:	79ba      	ldrb	r2, [r7, #6]
 8002af2:	491d      	ldr	r1, [pc, #116]	; (8002b68 <LinkTimerAfter+0x88>)
 8002af4:	4613      	mov	r3, r2
 8002af6:	005b      	lsls	r3, r3, #1
 8002af8:	4413      	add	r3, r2
 8002afa:	00db      	lsls	r3, r3, #3
 8002afc:	440b      	add	r3, r1
 8002afe:	3315      	adds	r3, #21
 8002b00:	781b      	ldrb	r3, [r3, #0]
 8002b02:	73fb      	strb	r3, [r7, #15]

  if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8002b04:	7bfb      	ldrb	r3, [r7, #15]
 8002b06:	2b06      	cmp	r3, #6
 8002b08:	d009      	beq.n	8002b1e <LinkTimerAfter+0x3e>
  {
    aTimerContext[next_id].PreviousID = TimerID;
 8002b0a:	7bfa      	ldrb	r2, [r7, #15]
 8002b0c:	4916      	ldr	r1, [pc, #88]	; (8002b68 <LinkTimerAfter+0x88>)
 8002b0e:	4613      	mov	r3, r2
 8002b10:	005b      	lsls	r3, r3, #1
 8002b12:	4413      	add	r3, r2
 8002b14:	00db      	lsls	r3, r3, #3
 8002b16:	440b      	add	r3, r1
 8002b18:	3314      	adds	r3, #20
 8002b1a:	79fa      	ldrb	r2, [r7, #7]
 8002b1c:	701a      	strb	r2, [r3, #0]
  }
  aTimerContext[TimerID].NextID = next_id;
 8002b1e:	79fa      	ldrb	r2, [r7, #7]
 8002b20:	4911      	ldr	r1, [pc, #68]	; (8002b68 <LinkTimerAfter+0x88>)
 8002b22:	4613      	mov	r3, r2
 8002b24:	005b      	lsls	r3, r3, #1
 8002b26:	4413      	add	r3, r2
 8002b28:	00db      	lsls	r3, r3, #3
 8002b2a:	440b      	add	r3, r1
 8002b2c:	3315      	adds	r3, #21
 8002b2e:	7bfa      	ldrb	r2, [r7, #15]
 8002b30:	701a      	strb	r2, [r3, #0]
  aTimerContext[TimerID].PreviousID = RefTimerID ;
 8002b32:	79fa      	ldrb	r2, [r7, #7]
 8002b34:	490c      	ldr	r1, [pc, #48]	; (8002b68 <LinkTimerAfter+0x88>)
 8002b36:	4613      	mov	r3, r2
 8002b38:	005b      	lsls	r3, r3, #1
 8002b3a:	4413      	add	r3, r2
 8002b3c:	00db      	lsls	r3, r3, #3
 8002b3e:	440b      	add	r3, r1
 8002b40:	3314      	adds	r3, #20
 8002b42:	79ba      	ldrb	r2, [r7, #6]
 8002b44:	701a      	strb	r2, [r3, #0]
  aTimerContext[RefTimerID].NextID = TimerID;
 8002b46:	79ba      	ldrb	r2, [r7, #6]
 8002b48:	4907      	ldr	r1, [pc, #28]	; (8002b68 <LinkTimerAfter+0x88>)
 8002b4a:	4613      	mov	r3, r2
 8002b4c:	005b      	lsls	r3, r3, #1
 8002b4e:	4413      	add	r3, r2
 8002b50:	00db      	lsls	r3, r3, #3
 8002b52:	440b      	add	r3, r1
 8002b54:	3315      	adds	r3, #21
 8002b56:	79fa      	ldrb	r2, [r7, #7]
 8002b58:	701a      	strb	r2, [r3, #0]

  return;
 8002b5a:	bf00      	nop
}
 8002b5c:	3714      	adds	r7, #20
 8002b5e:	46bd      	mov	sp, r7
 8002b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b64:	4770      	bx	lr
 8002b66:	bf00      	nop
 8002b68:	200002c8 	.word	0x200002c8

08002b6c <LinkTimerBefore>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked before
 * @retval None
 */
static void LinkTimerBefore(uint8_t TimerID, uint8_t RefTimerID)
{
 8002b6c:	b480      	push	{r7}
 8002b6e:	b085      	sub	sp, #20
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	4603      	mov	r3, r0
 8002b74:	460a      	mov	r2, r1
 8002b76:	71fb      	strb	r3, [r7, #7]
 8002b78:	4613      	mov	r3, r2
 8002b7a:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;

  if(RefTimerID != CurrentRunningTimerID)
 8002b7c:	4b29      	ldr	r3, [pc, #164]	; (8002c24 <LinkTimerBefore+0xb8>)
 8002b7e:	781b      	ldrb	r3, [r3, #0]
 8002b80:	b2db      	uxtb	r3, r3
 8002b82:	79ba      	ldrb	r2, [r7, #6]
 8002b84:	429a      	cmp	r2, r3
 8002b86:	d032      	beq.n	8002bee <LinkTimerBefore+0x82>
  {
    previous_id = aTimerContext[RefTimerID].PreviousID;
 8002b88:	79ba      	ldrb	r2, [r7, #6]
 8002b8a:	4927      	ldr	r1, [pc, #156]	; (8002c28 <LinkTimerBefore+0xbc>)
 8002b8c:	4613      	mov	r3, r2
 8002b8e:	005b      	lsls	r3, r3, #1
 8002b90:	4413      	add	r3, r2
 8002b92:	00db      	lsls	r3, r3, #3
 8002b94:	440b      	add	r3, r1
 8002b96:	3314      	adds	r3, #20
 8002b98:	781b      	ldrb	r3, [r3, #0]
 8002b9a:	73fb      	strb	r3, [r7, #15]

    aTimerContext[previous_id].NextID = TimerID;
 8002b9c:	7bfa      	ldrb	r2, [r7, #15]
 8002b9e:	4922      	ldr	r1, [pc, #136]	; (8002c28 <LinkTimerBefore+0xbc>)
 8002ba0:	4613      	mov	r3, r2
 8002ba2:	005b      	lsls	r3, r3, #1
 8002ba4:	4413      	add	r3, r2
 8002ba6:	00db      	lsls	r3, r3, #3
 8002ba8:	440b      	add	r3, r1
 8002baa:	3315      	adds	r3, #21
 8002bac:	79fa      	ldrb	r2, [r7, #7]
 8002bae:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].NextID = RefTimerID;
 8002bb0:	79fa      	ldrb	r2, [r7, #7]
 8002bb2:	491d      	ldr	r1, [pc, #116]	; (8002c28 <LinkTimerBefore+0xbc>)
 8002bb4:	4613      	mov	r3, r2
 8002bb6:	005b      	lsls	r3, r3, #1
 8002bb8:	4413      	add	r3, r2
 8002bba:	00db      	lsls	r3, r3, #3
 8002bbc:	440b      	add	r3, r1
 8002bbe:	3315      	adds	r3, #21
 8002bc0:	79ba      	ldrb	r2, [r7, #6]
 8002bc2:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].PreviousID = previous_id ;
 8002bc4:	79fa      	ldrb	r2, [r7, #7]
 8002bc6:	4918      	ldr	r1, [pc, #96]	; (8002c28 <LinkTimerBefore+0xbc>)
 8002bc8:	4613      	mov	r3, r2
 8002bca:	005b      	lsls	r3, r3, #1
 8002bcc:	4413      	add	r3, r2
 8002bce:	00db      	lsls	r3, r3, #3
 8002bd0:	440b      	add	r3, r1
 8002bd2:	3314      	adds	r3, #20
 8002bd4:	7bfa      	ldrb	r2, [r7, #15]
 8002bd6:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 8002bd8:	79ba      	ldrb	r2, [r7, #6]
 8002bda:	4913      	ldr	r1, [pc, #76]	; (8002c28 <LinkTimerBefore+0xbc>)
 8002bdc:	4613      	mov	r3, r2
 8002bde:	005b      	lsls	r3, r3, #1
 8002be0:	4413      	add	r3, r2
 8002be2:	00db      	lsls	r3, r3, #3
 8002be4:	440b      	add	r3, r1
 8002be6:	3314      	adds	r3, #20
 8002be8:	79fa      	ldrb	r2, [r7, #7]
 8002bea:	701a      	strb	r2, [r3, #0]
  {
    aTimerContext[TimerID].NextID = RefTimerID;
    aTimerContext[RefTimerID].PreviousID = TimerID;
  }

  return;
 8002bec:	e014      	b.n	8002c18 <LinkTimerBefore+0xac>
    aTimerContext[TimerID].NextID = RefTimerID;
 8002bee:	79fa      	ldrb	r2, [r7, #7]
 8002bf0:	490d      	ldr	r1, [pc, #52]	; (8002c28 <LinkTimerBefore+0xbc>)
 8002bf2:	4613      	mov	r3, r2
 8002bf4:	005b      	lsls	r3, r3, #1
 8002bf6:	4413      	add	r3, r2
 8002bf8:	00db      	lsls	r3, r3, #3
 8002bfa:	440b      	add	r3, r1
 8002bfc:	3315      	adds	r3, #21
 8002bfe:	79ba      	ldrb	r2, [r7, #6]
 8002c00:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 8002c02:	79ba      	ldrb	r2, [r7, #6]
 8002c04:	4908      	ldr	r1, [pc, #32]	; (8002c28 <LinkTimerBefore+0xbc>)
 8002c06:	4613      	mov	r3, r2
 8002c08:	005b      	lsls	r3, r3, #1
 8002c0a:	4413      	add	r3, r2
 8002c0c:	00db      	lsls	r3, r3, #3
 8002c0e:	440b      	add	r3, r1
 8002c10:	3314      	adds	r3, #20
 8002c12:	79fa      	ldrb	r2, [r7, #7]
 8002c14:	701a      	strb	r2, [r3, #0]
  return;
 8002c16:	bf00      	nop
}
 8002c18:	3714      	adds	r7, #20
 8002c1a:	46bd      	mov	sp, r7
 8002c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c20:	4770      	bx	lr
 8002c22:	bf00      	nop
 8002c24:	20000358 	.word	0x20000358
 8002c28:	200002c8 	.word	0x200002c8

08002c2c <linkTimer>:
 * @brief  Insert a Timer in the list
 * @param  TimerID:   The ID of the Timer
 * @retval None
 */
static uint16_t linkTimer(uint8_t TimerID)
{
 8002c2c:	b580      	push	{r7, lr}
 8002c2e:	b084      	sub	sp, #16
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	4603      	mov	r3, r0
 8002c34:	71fb      	strb	r3, [r7, #7]
  uint32_t time_left;
  uint16_t time_elapsed;
  uint8_t timer_id_lookup;
  uint8_t next_id;

  if(CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8002c36:	4b4e      	ldr	r3, [pc, #312]	; (8002d70 <linkTimer+0x144>)
 8002c38:	781b      	ldrb	r3, [r3, #0]
 8002c3a:	b2db      	uxtb	r3, r3
 8002c3c:	2b06      	cmp	r3, #6
 8002c3e:	d118      	bne.n	8002c72 <linkTimer+0x46>
  {
    /**
     * No timer in the list
     */
    PreviousRunningTimerID = CurrentRunningTimerID;
 8002c40:	4b4b      	ldr	r3, [pc, #300]	; (8002d70 <linkTimer+0x144>)
 8002c42:	781b      	ldrb	r3, [r3, #0]
 8002c44:	b2da      	uxtb	r2, r3
 8002c46:	4b4b      	ldr	r3, [pc, #300]	; (8002d74 <linkTimer+0x148>)
 8002c48:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = TimerID;
 8002c4a:	4a49      	ldr	r2, [pc, #292]	; (8002d70 <linkTimer+0x144>)
 8002c4c:	79fb      	ldrb	r3, [r7, #7]
 8002c4e:	7013      	strb	r3, [r2, #0]
    aTimerContext[TimerID].NextID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;
 8002c50:	79fa      	ldrb	r2, [r7, #7]
 8002c52:	4949      	ldr	r1, [pc, #292]	; (8002d78 <linkTimer+0x14c>)
 8002c54:	4613      	mov	r3, r2
 8002c56:	005b      	lsls	r3, r3, #1
 8002c58:	4413      	add	r3, r2
 8002c5a:	00db      	lsls	r3, r3, #3
 8002c5c:	440b      	add	r3, r1
 8002c5e:	3315      	adds	r3, #21
 8002c60:	2206      	movs	r2, #6
 8002c62:	701a      	strb	r2, [r3, #0]

    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8002c64:	4b45      	ldr	r3, [pc, #276]	; (8002d7c <linkTimer+0x150>)
 8002c66:	f04f 32ff 	mov.w	r2, #4294967295
 8002c6a:	601a      	str	r2, [r3, #0]
    time_elapsed = 0;
 8002c6c:	2300      	movs	r3, #0
 8002c6e:	81fb      	strh	r3, [r7, #14]
 8002c70:	e078      	b.n	8002d64 <linkTimer+0x138>
  }
  else
  {
    time_elapsed = ReturnTimeElapsed();
 8002c72:	f000 f909 	bl	8002e88 <ReturnTimeElapsed>
 8002c76:	4603      	mov	r3, r0
 8002c78:	81fb      	strh	r3, [r7, #14]

    /**
     * update count of the timer to be linked
     */
    aTimerContext[TimerID].CountLeft += time_elapsed;
 8002c7a:	79fa      	ldrb	r2, [r7, #7]
 8002c7c:	493e      	ldr	r1, [pc, #248]	; (8002d78 <linkTimer+0x14c>)
 8002c7e:	4613      	mov	r3, r2
 8002c80:	005b      	lsls	r3, r3, #1
 8002c82:	4413      	add	r3, r2
 8002c84:	00db      	lsls	r3, r3, #3
 8002c86:	440b      	add	r3, r1
 8002c88:	3308      	adds	r3, #8
 8002c8a:	6819      	ldr	r1, [r3, #0]
 8002c8c:	89fb      	ldrh	r3, [r7, #14]
 8002c8e:	79fa      	ldrb	r2, [r7, #7]
 8002c90:	4419      	add	r1, r3
 8002c92:	4839      	ldr	r0, [pc, #228]	; (8002d78 <linkTimer+0x14c>)
 8002c94:	4613      	mov	r3, r2
 8002c96:	005b      	lsls	r3, r3, #1
 8002c98:	4413      	add	r3, r2
 8002c9a:	00db      	lsls	r3, r3, #3
 8002c9c:	4403      	add	r3, r0
 8002c9e:	3308      	adds	r3, #8
 8002ca0:	6019      	str	r1, [r3, #0]
    time_left = aTimerContext[TimerID].CountLeft;
 8002ca2:	79fa      	ldrb	r2, [r7, #7]
 8002ca4:	4934      	ldr	r1, [pc, #208]	; (8002d78 <linkTimer+0x14c>)
 8002ca6:	4613      	mov	r3, r2
 8002ca8:	005b      	lsls	r3, r3, #1
 8002caa:	4413      	add	r3, r2
 8002cac:	00db      	lsls	r3, r3, #3
 8002cae:	440b      	add	r3, r1
 8002cb0:	3308      	adds	r3, #8
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	60bb      	str	r3, [r7, #8]

    /**
     * Search for index where the new timer shall be linked
     */
    if(aTimerContext[CurrentRunningTimerID].CountLeft <= time_left)
 8002cb6:	4b2e      	ldr	r3, [pc, #184]	; (8002d70 <linkTimer+0x144>)
 8002cb8:	781b      	ldrb	r3, [r3, #0]
 8002cba:	b2db      	uxtb	r3, r3
 8002cbc:	4619      	mov	r1, r3
 8002cbe:	4a2e      	ldr	r2, [pc, #184]	; (8002d78 <linkTimer+0x14c>)
 8002cc0:	460b      	mov	r3, r1
 8002cc2:	005b      	lsls	r3, r3, #1
 8002cc4:	440b      	add	r3, r1
 8002cc6:	00db      	lsls	r3, r3, #3
 8002cc8:	4413      	add	r3, r2
 8002cca:	3308      	adds	r3, #8
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	68ba      	ldr	r2, [r7, #8]
 8002cd0:	429a      	cmp	r2, r3
 8002cd2:	d337      	bcc.n	8002d44 <linkTimer+0x118>
    {
      /**
       * Search for the ID after the first one
       */
      timer_id_lookup = CurrentRunningTimerID;
 8002cd4:	4b26      	ldr	r3, [pc, #152]	; (8002d70 <linkTimer+0x144>)
 8002cd6:	781b      	ldrb	r3, [r3, #0]
 8002cd8:	737b      	strb	r3, [r7, #13]
      next_id = aTimerContext[timer_id_lookup].NextID;
 8002cda:	7b7a      	ldrb	r2, [r7, #13]
 8002cdc:	4926      	ldr	r1, [pc, #152]	; (8002d78 <linkTimer+0x14c>)
 8002cde:	4613      	mov	r3, r2
 8002ce0:	005b      	lsls	r3, r3, #1
 8002ce2:	4413      	add	r3, r2
 8002ce4:	00db      	lsls	r3, r3, #3
 8002ce6:	440b      	add	r3, r1
 8002ce8:	3315      	adds	r3, #21
 8002cea:	781b      	ldrb	r3, [r3, #0]
 8002cec:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 8002cee:	e013      	b.n	8002d18 <linkTimer+0xec>
      {
        timer_id_lookup = aTimerContext[timer_id_lookup].NextID;
 8002cf0:	7b7a      	ldrb	r2, [r7, #13]
 8002cf2:	4921      	ldr	r1, [pc, #132]	; (8002d78 <linkTimer+0x14c>)
 8002cf4:	4613      	mov	r3, r2
 8002cf6:	005b      	lsls	r3, r3, #1
 8002cf8:	4413      	add	r3, r2
 8002cfa:	00db      	lsls	r3, r3, #3
 8002cfc:	440b      	add	r3, r1
 8002cfe:	3315      	adds	r3, #21
 8002d00:	781b      	ldrb	r3, [r3, #0]
 8002d02:	737b      	strb	r3, [r7, #13]
        next_id = aTimerContext[timer_id_lookup].NextID;
 8002d04:	7b7a      	ldrb	r2, [r7, #13]
 8002d06:	491c      	ldr	r1, [pc, #112]	; (8002d78 <linkTimer+0x14c>)
 8002d08:	4613      	mov	r3, r2
 8002d0a:	005b      	lsls	r3, r3, #1
 8002d0c:	4413      	add	r3, r2
 8002d0e:	00db      	lsls	r3, r3, #3
 8002d10:	440b      	add	r3, r1
 8002d12:	3315      	adds	r3, #21
 8002d14:	781b      	ldrb	r3, [r3, #0]
 8002d16:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 8002d18:	7b3b      	ldrb	r3, [r7, #12]
 8002d1a:	2b06      	cmp	r3, #6
 8002d1c:	d00b      	beq.n	8002d36 <linkTimer+0x10a>
 8002d1e:	7b3a      	ldrb	r2, [r7, #12]
 8002d20:	4915      	ldr	r1, [pc, #84]	; (8002d78 <linkTimer+0x14c>)
 8002d22:	4613      	mov	r3, r2
 8002d24:	005b      	lsls	r3, r3, #1
 8002d26:	4413      	add	r3, r2
 8002d28:	00db      	lsls	r3, r3, #3
 8002d2a:	440b      	add	r3, r1
 8002d2c:	3308      	adds	r3, #8
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	68ba      	ldr	r2, [r7, #8]
 8002d32:	429a      	cmp	r2, r3
 8002d34:	d2dc      	bcs.n	8002cf0 <linkTimer+0xc4>
      }

      /**
       * Link after the ID
       */
      LinkTimerAfter(TimerID, timer_id_lookup);
 8002d36:	7b7a      	ldrb	r2, [r7, #13]
 8002d38:	79fb      	ldrb	r3, [r7, #7]
 8002d3a:	4611      	mov	r1, r2
 8002d3c:	4618      	mov	r0, r3
 8002d3e:	f7ff fecf 	bl	8002ae0 <LinkTimerAfter>
 8002d42:	e00f      	b.n	8002d64 <linkTimer+0x138>
    else
    {
      /**
       * Link before the first ID
       */
      LinkTimerBefore(TimerID, CurrentRunningTimerID);
 8002d44:	4b0a      	ldr	r3, [pc, #40]	; (8002d70 <linkTimer+0x144>)
 8002d46:	781b      	ldrb	r3, [r3, #0]
 8002d48:	b2da      	uxtb	r2, r3
 8002d4a:	79fb      	ldrb	r3, [r7, #7]
 8002d4c:	4611      	mov	r1, r2
 8002d4e:	4618      	mov	r0, r3
 8002d50:	f7ff ff0c 	bl	8002b6c <LinkTimerBefore>
      PreviousRunningTimerID = CurrentRunningTimerID;
 8002d54:	4b06      	ldr	r3, [pc, #24]	; (8002d70 <linkTimer+0x144>)
 8002d56:	781b      	ldrb	r3, [r3, #0]
 8002d58:	b2da      	uxtb	r2, r3
 8002d5a:	4b06      	ldr	r3, [pc, #24]	; (8002d74 <linkTimer+0x148>)
 8002d5c:	701a      	strb	r2, [r3, #0]
      CurrentRunningTimerID = TimerID;
 8002d5e:	4a04      	ldr	r2, [pc, #16]	; (8002d70 <linkTimer+0x144>)
 8002d60:	79fb      	ldrb	r3, [r7, #7]
 8002d62:	7013      	strb	r3, [r2, #0]
    }
  }

  return time_elapsed;
 8002d64:	89fb      	ldrh	r3, [r7, #14]
}
 8002d66:	4618      	mov	r0, r3
 8002d68:	3710      	adds	r7, #16
 8002d6a:	46bd      	mov	sp, r7
 8002d6c:	bd80      	pop	{r7, pc}
 8002d6e:	bf00      	nop
 8002d70:	20000358 	.word	0x20000358
 8002d74:	20000359 	.word	0x20000359
 8002d78:	200002c8 	.word	0x200002c8
 8002d7c:	2000035c 	.word	0x2000035c

08002d80 <UnlinkTimer>:
 * @param  TimerID:   The ID of the Timer
 * @param  RequestReadSSR: Request to read the SSR register or not
 * @retval None
 */
static void UnlinkTimer(uint8_t TimerID, RequestReadSSR_t RequestReadSSR)
{
 8002d80:	b480      	push	{r7}
 8002d82:	b085      	sub	sp, #20
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	4603      	mov	r3, r0
 8002d88:	460a      	mov	r2, r1
 8002d8a:	71fb      	strb	r3, [r7, #7]
 8002d8c:	4613      	mov	r3, r2
 8002d8e:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;
  uint8_t next_id;

  if(TimerID == CurrentRunningTimerID)
 8002d90:	4b39      	ldr	r3, [pc, #228]	; (8002e78 <UnlinkTimer+0xf8>)
 8002d92:	781b      	ldrb	r3, [r3, #0]
 8002d94:	b2db      	uxtb	r3, r3
 8002d96:	79fa      	ldrb	r2, [r7, #7]
 8002d98:	429a      	cmp	r2, r3
 8002d9a:	d111      	bne.n	8002dc0 <UnlinkTimer+0x40>
  {
    PreviousRunningTimerID = CurrentRunningTimerID;
 8002d9c:	4b36      	ldr	r3, [pc, #216]	; (8002e78 <UnlinkTimer+0xf8>)
 8002d9e:	781b      	ldrb	r3, [r3, #0]
 8002da0:	b2da      	uxtb	r2, r3
 8002da2:	4b36      	ldr	r3, [pc, #216]	; (8002e7c <UnlinkTimer+0xfc>)
 8002da4:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = aTimerContext[TimerID].NextID;
 8002da6:	79fa      	ldrb	r2, [r7, #7]
 8002da8:	4935      	ldr	r1, [pc, #212]	; (8002e80 <UnlinkTimer+0x100>)
 8002daa:	4613      	mov	r3, r2
 8002dac:	005b      	lsls	r3, r3, #1
 8002dae:	4413      	add	r3, r2
 8002db0:	00db      	lsls	r3, r3, #3
 8002db2:	440b      	add	r3, r1
 8002db4:	3315      	adds	r3, #21
 8002db6:	781b      	ldrb	r3, [r3, #0]
 8002db8:	b2da      	uxtb	r2, r3
 8002dba:	4b2f      	ldr	r3, [pc, #188]	; (8002e78 <UnlinkTimer+0xf8>)
 8002dbc:	701a      	strb	r2, [r3, #0]
 8002dbe:	e03e      	b.n	8002e3e <UnlinkTimer+0xbe>
  }
  else
  {
    previous_id = aTimerContext[TimerID].PreviousID;
 8002dc0:	79fa      	ldrb	r2, [r7, #7]
 8002dc2:	492f      	ldr	r1, [pc, #188]	; (8002e80 <UnlinkTimer+0x100>)
 8002dc4:	4613      	mov	r3, r2
 8002dc6:	005b      	lsls	r3, r3, #1
 8002dc8:	4413      	add	r3, r2
 8002dca:	00db      	lsls	r3, r3, #3
 8002dcc:	440b      	add	r3, r1
 8002dce:	3314      	adds	r3, #20
 8002dd0:	781b      	ldrb	r3, [r3, #0]
 8002dd2:	73fb      	strb	r3, [r7, #15]
    next_id = aTimerContext[TimerID].NextID;
 8002dd4:	79fa      	ldrb	r2, [r7, #7]
 8002dd6:	492a      	ldr	r1, [pc, #168]	; (8002e80 <UnlinkTimer+0x100>)
 8002dd8:	4613      	mov	r3, r2
 8002dda:	005b      	lsls	r3, r3, #1
 8002ddc:	4413      	add	r3, r2
 8002dde:	00db      	lsls	r3, r3, #3
 8002de0:	440b      	add	r3, r1
 8002de2:	3315      	adds	r3, #21
 8002de4:	781b      	ldrb	r3, [r3, #0]
 8002de6:	73bb      	strb	r3, [r7, #14]

    aTimerContext[previous_id].NextID = aTimerContext[TimerID].NextID;
 8002de8:	79f9      	ldrb	r1, [r7, #7]
 8002dea:	7bfa      	ldrb	r2, [r7, #15]
 8002dec:	4824      	ldr	r0, [pc, #144]	; (8002e80 <UnlinkTimer+0x100>)
 8002dee:	460b      	mov	r3, r1
 8002df0:	005b      	lsls	r3, r3, #1
 8002df2:	440b      	add	r3, r1
 8002df4:	00db      	lsls	r3, r3, #3
 8002df6:	4403      	add	r3, r0
 8002df8:	3315      	adds	r3, #21
 8002dfa:	781b      	ldrb	r3, [r3, #0]
 8002dfc:	b2d8      	uxtb	r0, r3
 8002dfe:	4920      	ldr	r1, [pc, #128]	; (8002e80 <UnlinkTimer+0x100>)
 8002e00:	4613      	mov	r3, r2
 8002e02:	005b      	lsls	r3, r3, #1
 8002e04:	4413      	add	r3, r2
 8002e06:	00db      	lsls	r3, r3, #3
 8002e08:	440b      	add	r3, r1
 8002e0a:	3315      	adds	r3, #21
 8002e0c:	4602      	mov	r2, r0
 8002e0e:	701a      	strb	r2, [r3, #0]
    if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8002e10:	7bbb      	ldrb	r3, [r7, #14]
 8002e12:	2b06      	cmp	r3, #6
 8002e14:	d013      	beq.n	8002e3e <UnlinkTimer+0xbe>
    {
      aTimerContext[next_id].PreviousID = aTimerContext[TimerID].PreviousID;
 8002e16:	79f9      	ldrb	r1, [r7, #7]
 8002e18:	7bba      	ldrb	r2, [r7, #14]
 8002e1a:	4819      	ldr	r0, [pc, #100]	; (8002e80 <UnlinkTimer+0x100>)
 8002e1c:	460b      	mov	r3, r1
 8002e1e:	005b      	lsls	r3, r3, #1
 8002e20:	440b      	add	r3, r1
 8002e22:	00db      	lsls	r3, r3, #3
 8002e24:	4403      	add	r3, r0
 8002e26:	3314      	adds	r3, #20
 8002e28:	781b      	ldrb	r3, [r3, #0]
 8002e2a:	b2d8      	uxtb	r0, r3
 8002e2c:	4914      	ldr	r1, [pc, #80]	; (8002e80 <UnlinkTimer+0x100>)
 8002e2e:	4613      	mov	r3, r2
 8002e30:	005b      	lsls	r3, r3, #1
 8002e32:	4413      	add	r3, r2
 8002e34:	00db      	lsls	r3, r3, #3
 8002e36:	440b      	add	r3, r1
 8002e38:	3314      	adds	r3, #20
 8002e3a:	4602      	mov	r2, r0
 8002e3c:	701a      	strb	r2, [r3, #0]
  }

  /**
   * Timer is out of the list
   */
  aTimerContext[TimerID].TimerIDStatus = TimerID_Created;
 8002e3e:	79fa      	ldrb	r2, [r7, #7]
 8002e40:	490f      	ldr	r1, [pc, #60]	; (8002e80 <UnlinkTimer+0x100>)
 8002e42:	4613      	mov	r3, r2
 8002e44:	005b      	lsls	r3, r3, #1
 8002e46:	4413      	add	r3, r2
 8002e48:	00db      	lsls	r3, r3, #3
 8002e4a:	440b      	add	r3, r1
 8002e4c:	330c      	adds	r3, #12
 8002e4e:	2201      	movs	r2, #1
 8002e50:	701a      	strb	r2, [r3, #0]

  if((CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (RequestReadSSR == SSR_Read_Requested))
 8002e52:	4b09      	ldr	r3, [pc, #36]	; (8002e78 <UnlinkTimer+0xf8>)
 8002e54:	781b      	ldrb	r3, [r3, #0]
 8002e56:	b2db      	uxtb	r3, r3
 8002e58:	2b06      	cmp	r3, #6
 8002e5a:	d107      	bne.n	8002e6c <UnlinkTimer+0xec>
 8002e5c:	79bb      	ldrb	r3, [r7, #6]
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d104      	bne.n	8002e6c <UnlinkTimer+0xec>
  {
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8002e62:	4b08      	ldr	r3, [pc, #32]	; (8002e84 <UnlinkTimer+0x104>)
 8002e64:	f04f 32ff 	mov.w	r2, #4294967295
 8002e68:	601a      	str	r2, [r3, #0]
  }

  return;
 8002e6a:	bf00      	nop
 8002e6c:	bf00      	nop
}
 8002e6e:	3714      	adds	r7, #20
 8002e70:	46bd      	mov	sp, r7
 8002e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e76:	4770      	bx	lr
 8002e78:	20000358 	.word	0x20000358
 8002e7c:	20000359 	.word	0x20000359
 8002e80:	200002c8 	.word	0x200002c8
 8002e84:	2000035c 	.word	0x2000035c

08002e88 <ReturnTimeElapsed>:
 *        since the time the timer has been started
 * @param  None
 * @retval Time expired in Ticks
 */
static uint16_t ReturnTimeElapsed(void)
{
 8002e88:	b580      	push	{r7, lr}
 8002e8a:	b082      	sub	sp, #8
 8002e8c:	af00      	add	r7, sp, #0
  uint32_t  return_value;
  uint32_t  wrap_counter;

  if(SSRValueOnLastSetup != SSR_FORBIDDEN_VALUE)
 8002e8e:	4b1a      	ldr	r3, [pc, #104]	; (8002ef8 <ReturnTimeElapsed+0x70>)
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e96:	d026      	beq.n	8002ee6 <ReturnTimeElapsed+0x5e>
  {
    return_value = ReadRtcSsrValue(); /**< Read SSR register first */
 8002e98:	f7ff fe02 	bl	8002aa0 <ReadRtcSsrValue>
 8002e9c:	6078      	str	r0, [r7, #4]

    if (SSRValueOnLastSetup >= return_value)
 8002e9e:	4b16      	ldr	r3, [pc, #88]	; (8002ef8 <ReturnTimeElapsed+0x70>)
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	687a      	ldr	r2, [r7, #4]
 8002ea4:	429a      	cmp	r2, r3
 8002ea6:	d805      	bhi.n	8002eb4 <ReturnTimeElapsed+0x2c>
    {
      return_value = SSRValueOnLastSetup - return_value;
 8002ea8:	4b13      	ldr	r3, [pc, #76]	; (8002ef8 <ReturnTimeElapsed+0x70>)
 8002eaa:	681a      	ldr	r2, [r3, #0]
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	1ad3      	subs	r3, r2, r3
 8002eb0:	607b      	str	r3, [r7, #4]
 8002eb2:	e00a      	b.n	8002eca <ReturnTimeElapsed+0x42>
    }
    else
    {
      wrap_counter = SynchPrescalerUserConfig - return_value;
 8002eb4:	4b11      	ldr	r3, [pc, #68]	; (8002efc <ReturnTimeElapsed+0x74>)
 8002eb6:	881b      	ldrh	r3, [r3, #0]
 8002eb8:	461a      	mov	r2, r3
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	1ad3      	subs	r3, r2, r3
 8002ebe:	603b      	str	r3, [r7, #0]
      return_value = SSRValueOnLastSetup + wrap_counter;
 8002ec0:	4b0d      	ldr	r3, [pc, #52]	; (8002ef8 <ReturnTimeElapsed+0x70>)
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	683a      	ldr	r2, [r7, #0]
 8002ec6:	4413      	add	r3, r2
 8002ec8:	607b      	str	r3, [r7, #4]

    /**
     * At this stage, ReturnValue holds the number of ticks counted by SSR
     * Need to translate in number of ticks counted by the Wakeuptimer
     */
    return_value = return_value*AsynchPrescalerUserConfig;
 8002eca:	4b0d      	ldr	r3, [pc, #52]	; (8002f00 <ReturnTimeElapsed+0x78>)
 8002ecc:	781b      	ldrb	r3, [r3, #0]
 8002ece:	461a      	mov	r2, r3
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	fb02 f303 	mul.w	r3, r2, r3
 8002ed6:	607b      	str	r3, [r7, #4]
    return_value = return_value >> WakeupTimerDivider;
 8002ed8:	4b0a      	ldr	r3, [pc, #40]	; (8002f04 <ReturnTimeElapsed+0x7c>)
 8002eda:	781b      	ldrb	r3, [r3, #0]
 8002edc:	461a      	mov	r2, r3
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	40d3      	lsrs	r3, r2
 8002ee2:	607b      	str	r3, [r7, #4]
 8002ee4:	e001      	b.n	8002eea <ReturnTimeElapsed+0x62>
  }
  else
  {
    return_value = 0;
 8002ee6:	2300      	movs	r3, #0
 8002ee8:	607b      	str	r3, [r7, #4]
  }

  return (uint16_t)return_value;
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	b29b      	uxth	r3, r3
}
 8002eee:	4618      	mov	r0, r3
 8002ef0:	3708      	adds	r7, #8
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	bd80      	pop	{r7, pc}
 8002ef6:	bf00      	nop
 8002ef8:	2000035c 	.word	0x2000035c
 8002efc:	200003e6 	.word	0x200003e6
 8002f00:	200003e5 	.word	0x200003e5
 8002f04:	200003e4 	.word	0x200003e4

08002f08 <RestartWakeupCounter>:
 *    It assumes all condition are met to be allowed to write the wakeup counter
 * @param  Value: Value to be written in the counter
 * @retval None
 */
static void RestartWakeupCounter(uint16_t Value)
{
 8002f08:	b580      	push	{r7, lr}
 8002f0a:	b082      	sub	sp, #8
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	4603      	mov	r3, r0
 8002f10:	80fb      	strh	r3, [r7, #6]
   * The wakeuptimer has been disabled in the calling function to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   *  __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);
   */

  if(Value == 0)
 8002f12:	88fb      	ldrh	r3, [r7, #6]
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d108      	bne.n	8002f2a <RestartWakeupCounter+0x22>
  {
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8002f18:	f7ff fdc2 	bl	8002aa0 <ReadRtcSsrValue>
 8002f1c:	4602      	mov	r2, r0
 8002f1e:	4b24      	ldr	r3, [pc, #144]	; (8002fb0 <RestartWakeupCounter+0xa8>)
 8002f20:	601a      	str	r2, [r3, #0]

    /**
     * Simulate that the Timer expired
     */
    HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 8002f22:	2003      	movs	r0, #3
 8002f24:	f003 fd1a 	bl	800695c <HAL_NVIC_SetPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE(phrtc);    /**<  Enable the Wakeup Timer */

    HW_TS_RTC_CountUpdated_AppNot();
  }

  return ;
 8002f28:	e03e      	b.n	8002fa8 <RestartWakeupCounter+0xa0>
    if((Value > 1) ||(WakeupTimerDivider != 1))
 8002f2a:	88fb      	ldrh	r3, [r7, #6]
 8002f2c:	2b01      	cmp	r3, #1
 8002f2e:	d803      	bhi.n	8002f38 <RestartWakeupCounter+0x30>
 8002f30:	4b20      	ldr	r3, [pc, #128]	; (8002fb4 <RestartWakeupCounter+0xac>)
 8002f32:	781b      	ldrb	r3, [r3, #0]
 8002f34:	2b01      	cmp	r3, #1
 8002f36:	d002      	beq.n	8002f3e <RestartWakeupCounter+0x36>
      Value -= 1;
 8002f38:	88fb      	ldrh	r3, [r7, #6]
 8002f3a:	3b01      	subs	r3, #1
 8002f3c:	80fb      	strh	r3, [r7, #6]
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == RESET);
 8002f3e:	bf00      	nop
 8002f40:	4b1d      	ldr	r3, [pc, #116]	; (8002fb8 <RestartWakeupCounter+0xb0>)
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	68db      	ldr	r3, [r3, #12]
 8002f48:	f003 0304 	and.w	r3, r3, #4
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d0f7      	beq.n	8002f40 <RestartWakeupCounter+0x38>
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8002f50:	4b19      	ldr	r3, [pc, #100]	; (8002fb8 <RestartWakeupCounter+0xb0>)
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	68db      	ldr	r3, [r3, #12]
 8002f58:	b2da      	uxtb	r2, r3
 8002f5a:	4b17      	ldr	r3, [pc, #92]	; (8002fb8 <RestartWakeupCounter+0xb0>)
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8002f64:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8002f66:	4b15      	ldr	r3, [pc, #84]	; (8002fbc <RestartWakeupCounter+0xb4>)
 8002f68:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8002f6c:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 8002f6e:	2003      	movs	r0, #3
 8002f70:	f003 fd02 	bl	8006978 <HAL_NVIC_ClearPendingIRQ>
    MODIFY_REG(RTC->WUTR, RTC_WUTR_WUT, Value);
 8002f74:	4b12      	ldr	r3, [pc, #72]	; (8002fc0 <RestartWakeupCounter+0xb8>)
 8002f76:	695b      	ldr	r3, [r3, #20]
 8002f78:	0c1b      	lsrs	r3, r3, #16
 8002f7a:	041b      	lsls	r3, r3, #16
 8002f7c:	88fa      	ldrh	r2, [r7, #6]
 8002f7e:	4910      	ldr	r1, [pc, #64]	; (8002fc0 <RestartWakeupCounter+0xb8>)
 8002f80:	4313      	orrs	r3, r2
 8002f82:	614b      	str	r3, [r1, #20]
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8002f84:	f7ff fd8c 	bl	8002aa0 <ReadRtcSsrValue>
 8002f88:	4602      	mov	r2, r0
 8002f8a:	4b09      	ldr	r3, [pc, #36]	; (8002fb0 <RestartWakeupCounter+0xa8>)
 8002f8c:	601a      	str	r2, [r3, #0]
    __HAL_RTC_WAKEUPTIMER_ENABLE(phrtc);    /**<  Enable the Wakeup Timer */
 8002f8e:	4b0a      	ldr	r3, [pc, #40]	; (8002fb8 <RestartWakeupCounter+0xb0>)
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	689a      	ldr	r2, [r3, #8]
 8002f96:	4b08      	ldr	r3, [pc, #32]	; (8002fb8 <RestartWakeupCounter+0xb0>)
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002fa0:	609a      	str	r2, [r3, #8]
    HW_TS_RTC_CountUpdated_AppNot();
 8002fa2:	f3af 8000 	nop.w
  return ;
 8002fa6:	bf00      	nop
}
 8002fa8:	3708      	adds	r7, #8
 8002faa:	46bd      	mov	sp, r7
 8002fac:	bd80      	pop	{r7, pc}
 8002fae:	bf00      	nop
 8002fb0:	2000035c 	.word	0x2000035c
 8002fb4:	200003e4 	.word	0x200003e4
 8002fb8:	200003e0 	.word	0x200003e0
 8002fbc:	58000800 	.word	0x58000800
 8002fc0:	40002800 	.word	0x40002800

08002fc4 <RescheduleTimerList>:
 *    2) Setup the wakeuptimer
 * @param  None
 * @retval None
 */
static void RescheduleTimerList(void)
{
 8002fc4:	b580      	push	{r7, lr}
 8002fc6:	b084      	sub	sp, #16
 8002fc8:	af00      	add	r7, sp, #0

  /**
   * The wakeuptimer is disabled now to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   */
  if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 8002fca:	4b47      	ldr	r3, [pc, #284]	; (80030e8 <RescheduleTimerList+0x124>)
 8002fcc:	689b      	ldr	r3, [r3, #8]
 8002fce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002fd2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002fd6:	d108      	bne.n	8002fea <RescheduleTimerList+0x26>
  {
    /**
     * Wait for the flag to be back to 0 when the wakeup timer is enabled
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == SET);
 8002fd8:	bf00      	nop
 8002fda:	4b44      	ldr	r3, [pc, #272]	; (80030ec <RescheduleTimerList+0x128>)
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	68db      	ldr	r3, [r3, #12]
 8002fe2:	f003 0304 	and.w	r3, r3, #4
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d1f7      	bne.n	8002fda <RescheduleTimerList+0x16>
  }
  __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);   /**<  Disable the Wakeup Timer */
 8002fea:	4b40      	ldr	r3, [pc, #256]	; (80030ec <RescheduleTimerList+0x128>)
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	689a      	ldr	r2, [r3, #8]
 8002ff2:	4b3e      	ldr	r3, [pc, #248]	; (80030ec <RescheduleTimerList+0x128>)
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002ffc:	609a      	str	r2, [r3, #8]

  localTimerID = CurrentRunningTimerID;
 8002ffe:	4b3c      	ldr	r3, [pc, #240]	; (80030f0 <RescheduleTimerList+0x12c>)
 8003000:	781b      	ldrb	r3, [r3, #0]
 8003002:	73fb      	strb	r3, [r7, #15]

  /**
   * Calculate what will be the value to write in the wakeuptimer
   */
  timecountleft = aTimerContext[localTimerID].CountLeft;
 8003004:	7bfa      	ldrb	r2, [r7, #15]
 8003006:	493b      	ldr	r1, [pc, #236]	; (80030f4 <RescheduleTimerList+0x130>)
 8003008:	4613      	mov	r3, r2
 800300a:	005b      	lsls	r3, r3, #1
 800300c:	4413      	add	r3, r2
 800300e:	00db      	lsls	r3, r3, #3
 8003010:	440b      	add	r3, r1
 8003012:	3308      	adds	r3, #8
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	60bb      	str	r3, [r7, #8]

  /**
   * Read how much has been counted
   */
  time_elapsed = ReturnTimeElapsed();
 8003018:	f7ff ff36 	bl	8002e88 <ReturnTimeElapsed>
 800301c:	4603      	mov	r3, r0
 800301e:	80fb      	strh	r3, [r7, #6]

  if(timecountleft < time_elapsed )
 8003020:	88fb      	ldrh	r3, [r7, #6]
 8003022:	68ba      	ldr	r2, [r7, #8]
 8003024:	429a      	cmp	r2, r3
 8003026:	d205      	bcs.n	8003034 <RescheduleTimerList+0x70>
  {
    /**
     * There is no tick left to count
     */
    wakeup_timer_value = 0;
 8003028:	2300      	movs	r3, #0
 800302a:	81bb      	strh	r3, [r7, #12]
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 800302c:	4b32      	ldr	r3, [pc, #200]	; (80030f8 <RescheduleTimerList+0x134>)
 800302e:	2201      	movs	r2, #1
 8003030:	701a      	strb	r2, [r3, #0]
 8003032:	e04d      	b.n	80030d0 <RescheduleTimerList+0x10c>
  }
  else
  {
    if(timecountleft > (time_elapsed + MaxWakeupTimerSetup))
 8003034:	88fb      	ldrh	r3, [r7, #6]
 8003036:	4a31      	ldr	r2, [pc, #196]	; (80030fc <RescheduleTimerList+0x138>)
 8003038:	8812      	ldrh	r2, [r2, #0]
 800303a:	b292      	uxth	r2, r2
 800303c:	4413      	add	r3, r2
 800303e:	461a      	mov	r2, r3
 8003040:	68bb      	ldr	r3, [r7, #8]
 8003042:	4293      	cmp	r3, r2
 8003044:	d906      	bls.n	8003054 <RescheduleTimerList+0x90>
    {
      /**
       * The number of tick left is greater than the Wakeuptimer maximum value
       */
      wakeup_timer_value = MaxWakeupTimerSetup;
 8003046:	4b2d      	ldr	r3, [pc, #180]	; (80030fc <RescheduleTimerList+0x138>)
 8003048:	881b      	ldrh	r3, [r3, #0]
 800304a:	81bb      	strh	r3, [r7, #12]

      WakeupTimerLimitation = WakeupTimerValue_Overpassed;
 800304c:	4b2a      	ldr	r3, [pc, #168]	; (80030f8 <RescheduleTimerList+0x134>)
 800304e:	2200      	movs	r2, #0
 8003050:	701a      	strb	r2, [r3, #0]
 8003052:	e03d      	b.n	80030d0 <RescheduleTimerList+0x10c>
    }
    else
    {
      wakeup_timer_value = timecountleft - time_elapsed;
 8003054:	68bb      	ldr	r3, [r7, #8]
 8003056:	b29a      	uxth	r2, r3
 8003058:	88fb      	ldrh	r3, [r7, #6]
 800305a:	1ad3      	subs	r3, r2, r3
 800305c:	81bb      	strh	r3, [r7, #12]
      WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 800305e:	4b26      	ldr	r3, [pc, #152]	; (80030f8 <RescheduleTimerList+0x134>)
 8003060:	2201      	movs	r2, #1
 8003062:	701a      	strb	r2, [r3, #0]
  }

  /**
   * update ticks left to be counted for each timer
   */
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8003064:	e034      	b.n	80030d0 <RescheduleTimerList+0x10c>
  {
    if (aTimerContext[localTimerID].CountLeft < time_elapsed)
 8003066:	7bfa      	ldrb	r2, [r7, #15]
 8003068:	4922      	ldr	r1, [pc, #136]	; (80030f4 <RescheduleTimerList+0x130>)
 800306a:	4613      	mov	r3, r2
 800306c:	005b      	lsls	r3, r3, #1
 800306e:	4413      	add	r3, r2
 8003070:	00db      	lsls	r3, r3, #3
 8003072:	440b      	add	r3, r1
 8003074:	3308      	adds	r3, #8
 8003076:	681a      	ldr	r2, [r3, #0]
 8003078:	88fb      	ldrh	r3, [r7, #6]
 800307a:	429a      	cmp	r2, r3
 800307c:	d20a      	bcs.n	8003094 <RescheduleTimerList+0xd0>
    {
      aTimerContext[localTimerID].CountLeft = 0;
 800307e:	7bfa      	ldrb	r2, [r7, #15]
 8003080:	491c      	ldr	r1, [pc, #112]	; (80030f4 <RescheduleTimerList+0x130>)
 8003082:	4613      	mov	r3, r2
 8003084:	005b      	lsls	r3, r3, #1
 8003086:	4413      	add	r3, r2
 8003088:	00db      	lsls	r3, r3, #3
 800308a:	440b      	add	r3, r1
 800308c:	3308      	adds	r3, #8
 800308e:	2200      	movs	r2, #0
 8003090:	601a      	str	r2, [r3, #0]
 8003092:	e013      	b.n	80030bc <RescheduleTimerList+0xf8>
    }
    else
    {
      aTimerContext[localTimerID].CountLeft -= time_elapsed;
 8003094:	7bfa      	ldrb	r2, [r7, #15]
 8003096:	4917      	ldr	r1, [pc, #92]	; (80030f4 <RescheduleTimerList+0x130>)
 8003098:	4613      	mov	r3, r2
 800309a:	005b      	lsls	r3, r3, #1
 800309c:	4413      	add	r3, r2
 800309e:	00db      	lsls	r3, r3, #3
 80030a0:	440b      	add	r3, r1
 80030a2:	3308      	adds	r3, #8
 80030a4:	6819      	ldr	r1, [r3, #0]
 80030a6:	88fb      	ldrh	r3, [r7, #6]
 80030a8:	7bfa      	ldrb	r2, [r7, #15]
 80030aa:	1ac9      	subs	r1, r1, r3
 80030ac:	4811      	ldr	r0, [pc, #68]	; (80030f4 <RescheduleTimerList+0x130>)
 80030ae:	4613      	mov	r3, r2
 80030b0:	005b      	lsls	r3, r3, #1
 80030b2:	4413      	add	r3, r2
 80030b4:	00db      	lsls	r3, r3, #3
 80030b6:	4403      	add	r3, r0
 80030b8:	3308      	adds	r3, #8
 80030ba:	6019      	str	r1, [r3, #0]
    }
    localTimerID = aTimerContext[localTimerID].NextID;
 80030bc:	7bfa      	ldrb	r2, [r7, #15]
 80030be:	490d      	ldr	r1, [pc, #52]	; (80030f4 <RescheduleTimerList+0x130>)
 80030c0:	4613      	mov	r3, r2
 80030c2:	005b      	lsls	r3, r3, #1
 80030c4:	4413      	add	r3, r2
 80030c6:	00db      	lsls	r3, r3, #3
 80030c8:	440b      	add	r3, r1
 80030ca:	3315      	adds	r3, #21
 80030cc:	781b      	ldrb	r3, [r3, #0]
 80030ce:	73fb      	strb	r3, [r7, #15]
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 80030d0:	7bfb      	ldrb	r3, [r7, #15]
 80030d2:	2b06      	cmp	r3, #6
 80030d4:	d1c7      	bne.n	8003066 <RescheduleTimerList+0xa2>
  }

  /**
   * Write next count
   */
  RestartWakeupCounter(wakeup_timer_value);
 80030d6:	89bb      	ldrh	r3, [r7, #12]
 80030d8:	4618      	mov	r0, r3
 80030da:	f7ff ff15 	bl	8002f08 <RestartWakeupCounter>

  return ;
 80030de:	bf00      	nop
}
 80030e0:	3710      	adds	r7, #16
 80030e2:	46bd      	mov	sp, r7
 80030e4:	bd80      	pop	{r7, pc}
 80030e6:	bf00      	nop
 80030e8:	40002800 	.word	0x40002800
 80030ec:	200003e0 	.word	0x200003e0
 80030f0:	20000358 	.word	0x20000358
 80030f4:	200002c8 	.word	0x200002c8
 80030f8:	20000360 	.word	0x20000360
 80030fc:	200003e8 	.word	0x200003e8

08003100 <HW_TS_RTC_Wakeup_Handler>:
 * In order to ease maintainability, the unlock is done at the top and the lock at then end
 * in case some new implementation is coming in the future
 */

void HW_TS_RTC_Wakeup_Handler(void)
{
 8003100:	b580      	push	{r7, lr}
 8003102:	b08a      	sub	sp, #40	; 0x28
 8003104:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003106:	f3ef 8310 	mrs	r3, PRIMASK
 800310a:	617b      	str	r3, [r7, #20]
  return(result);
 800310c:	697b      	ldr	r3, [r7, #20]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800310e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("cpsid i" : : : "memory");
 8003110:	b672      	cpsid	i
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

/* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8003112:	4b5e      	ldr	r3, [pc, #376]	; (800328c <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	22ca      	movs	r2, #202	; 0xca
 800311a:	625a      	str	r2, [r3, #36]	; 0x24
 800311c:	4b5b      	ldr	r3, [pc, #364]	; (800328c <HW_TS_RTC_Wakeup_Handler+0x18c>)
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	2253      	movs	r2, #83	; 0x53
 8003124:	625a      	str	r2, [r3, #36]	; 0x24
  /**
   * Disable the Wakeup Timer
   * This may speed up a bit the processing to wait the timer to be disabled
   * The timer is still counting 2 RTCCLK
   */
  __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);
 8003126:	4b59      	ldr	r3, [pc, #356]	; (800328c <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	689a      	ldr	r2, [r3, #8]
 800312e:	4b57      	ldr	r3, [pc, #348]	; (800328c <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003138:	609a      	str	r2, [r3, #8]

  local_current_running_timer_id = CurrentRunningTimerID;
 800313a:	4b55      	ldr	r3, [pc, #340]	; (8003290 <HW_TS_RTC_Wakeup_Handler+0x190>)
 800313c:	781b      	ldrb	r3, [r3, #0]
 800313e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  if(aTimerContext[local_current_running_timer_id].TimerIDStatus == TimerID_Running)
 8003142:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8003146:	4953      	ldr	r1, [pc, #332]	; (8003294 <HW_TS_RTC_Wakeup_Handler+0x194>)
 8003148:	4613      	mov	r3, r2
 800314a:	005b      	lsls	r3, r3, #1
 800314c:	4413      	add	r3, r2
 800314e:	00db      	lsls	r3, r3, #3
 8003150:	440b      	add	r3, r1
 8003152:	330c      	adds	r3, #12
 8003154:	781b      	ldrb	r3, [r3, #0]
 8003156:	b2db      	uxtb	r3, r3
 8003158:	2b02      	cmp	r3, #2
 800315a:	d170      	bne.n	800323e <HW_TS_RTC_Wakeup_Handler+0x13e>
  {
    ptimer_callback = aTimerContext[local_current_running_timer_id].pTimerCallBack;
 800315c:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8003160:	494c      	ldr	r1, [pc, #304]	; (8003294 <HW_TS_RTC_Wakeup_Handler+0x194>)
 8003162:	4613      	mov	r3, r2
 8003164:	005b      	lsls	r3, r3, #1
 8003166:	4413      	add	r3, r2
 8003168:	00db      	lsls	r3, r3, #3
 800316a:	440b      	add	r3, r1
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	61fb      	str	r3, [r7, #28]
    timer_process_id = aTimerContext[local_current_running_timer_id].TimerProcessID;
 8003170:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8003174:	4947      	ldr	r1, [pc, #284]	; (8003294 <HW_TS_RTC_Wakeup_Handler+0x194>)
 8003176:	4613      	mov	r3, r2
 8003178:	005b      	lsls	r3, r3, #1
 800317a:	4413      	add	r3, r2
 800317c:	00db      	lsls	r3, r3, #3
 800317e:	440b      	add	r3, r1
 8003180:	3310      	adds	r3, #16
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	61bb      	str	r3, [r7, #24]
     * However, due to the inaccuracy of the reading of the time elapsed, it may return there is 1 tick
     * to be left whereas the count is over
     * A more secure implementation has been done with a flag to state whereas the full count has been written
     * in the wakeuptimer or not
     */
    if(WakeupTimerLimitation != WakeupTimerValue_Overpassed)
 8003186:	4b44      	ldr	r3, [pc, #272]	; (8003298 <HW_TS_RTC_Wakeup_Handler+0x198>)
 8003188:	781b      	ldrb	r3, [r3, #0]
 800318a:	b2db      	uxtb	r3, r3
 800318c:	2b00      	cmp	r3, #0
 800318e:	d04e      	beq.n	800322e <HW_TS_RTC_Wakeup_Handler+0x12e>
    {
      if(aTimerContext[local_current_running_timer_id].TimerMode == hw_ts_Repeated)
 8003190:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8003194:	493f      	ldr	r1, [pc, #252]	; (8003294 <HW_TS_RTC_Wakeup_Handler+0x194>)
 8003196:	4613      	mov	r3, r2
 8003198:	005b      	lsls	r3, r3, #1
 800319a:	4413      	add	r3, r2
 800319c:	00db      	lsls	r3, r3, #3
 800319e:	440b      	add	r3, r1
 80031a0:	330d      	adds	r3, #13
 80031a2:	781b      	ldrb	r3, [r3, #0]
 80031a4:	b2db      	uxtb	r3, r3
 80031a6:	2b01      	cmp	r3, #1
 80031a8:	d125      	bne.n	80031f6 <HW_TS_RTC_Wakeup_Handler+0xf6>
      {
        UnlinkTimer(local_current_running_timer_id, SSR_Read_Not_Requested);
 80031aa:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80031ae:	2101      	movs	r1, #1
 80031b0:	4618      	mov	r0, r3
 80031b2:	f7ff fde5 	bl	8002d80 <UnlinkTimer>
 80031b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031b8:	613b      	str	r3, [r7, #16]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80031ba:	693b      	ldr	r3, [r7, #16]
 80031bc:	f383 8810 	msr	PRIMASK, r3
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Start(local_current_running_timer_id, aTimerContext[local_current_running_timer_id].CounterInit);
 80031c0:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 80031c4:	4933      	ldr	r1, [pc, #204]	; (8003294 <HW_TS_RTC_Wakeup_Handler+0x194>)
 80031c6:	4613      	mov	r3, r2
 80031c8:	005b      	lsls	r3, r3, #1
 80031ca:	4413      	add	r3, r2
 80031cc:	00db      	lsls	r3, r3, #3
 80031ce:	440b      	add	r3, r1
 80031d0:	3304      	adds	r3, #4
 80031d2:	681a      	ldr	r2, [r3, #0]
 80031d4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80031d8:	4611      	mov	r1, r2
 80031da:	4618      	mov	r0, r3
 80031dc:	f000 fa46 	bl	800366c <HW_TS_Start>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 80031e0:	4b2a      	ldr	r3, [pc, #168]	; (800328c <HW_TS_RTC_Wakeup_Handler+0x18c>)
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	22ca      	movs	r2, #202	; 0xca
 80031e8:	625a      	str	r2, [r3, #36]	; 0x24
 80031ea:	4b28      	ldr	r3, [pc, #160]	; (800328c <HW_TS_RTC_Wakeup_Handler+0x18c>)
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	2253      	movs	r2, #83	; 0x53
 80031f2:	625a      	str	r2, [r3, #36]	; 0x24
 80031f4:	e013      	b.n	800321e <HW_TS_RTC_Wakeup_Handler+0x11e>
 80031f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031f8:	60fb      	str	r3, [r7, #12]
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	f383 8810 	msr	PRIMASK, r3
      else
      {
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Stop(local_current_running_timer_id);
 8003200:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003204:	4618      	mov	r0, r3
 8003206:	f000 f9a7 	bl	8003558 <HW_TS_Stop>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 800320a:	4b20      	ldr	r3, [pc, #128]	; (800328c <HW_TS_RTC_Wakeup_Handler+0x18c>)
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	22ca      	movs	r2, #202	; 0xca
 8003212:	625a      	str	r2, [r3, #36]	; 0x24
 8003214:	4b1d      	ldr	r3, [pc, #116]	; (800328c <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	2253      	movs	r2, #83	; 0x53
 800321c:	625a      	str	r2, [r3, #36]	; 0x24
        }

      HW_TS_RTC_Int_AppNot(timer_process_id, local_current_running_timer_id, ptimer_callback);
 800321e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003222:	69fa      	ldr	r2, [r7, #28]
 8003224:	4619      	mov	r1, r3
 8003226:	69b8      	ldr	r0, [r7, #24]
 8003228:	f000 faa6 	bl	8003778 <HW_TS_RTC_Int_AppNot>
 800322c:	e024      	b.n	8003278 <HW_TS_RTC_Wakeup_Handler+0x178>
    }
    else
    {
      RescheduleTimerList();
 800322e:	f7ff fec9 	bl	8002fc4 <RescheduleTimerList>
 8003232:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003234:	60bb      	str	r3, [r7, #8]
 8003236:	68bb      	ldr	r3, [r7, #8]
 8003238:	f383 8810 	msr	PRIMASK, r3
 800323c:	e01c      	b.n	8003278 <HW_TS_RTC_Wakeup_Handler+0x178>
    /**
     * We should never end up in this case
     * However, if due to any bug in the timer server this is the case, the mistake may not impact the user.
     * We could just clean the interrupt flag and get out from this unexpected interrupt
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == RESET);
 800323e:	bf00      	nop
 8003240:	4b12      	ldr	r3, [pc, #72]	; (800328c <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	68db      	ldr	r3, [r3, #12]
 8003248:	f003 0304 	and.w	r3, r3, #4
 800324c:	2b00      	cmp	r3, #0
 800324e:	d0f7      	beq.n	8003240 <HW_TS_RTC_Wakeup_Handler+0x140>
     * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
     * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
     * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
     * due to the autoreload feature
     */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8003250:	4b0e      	ldr	r3, [pc, #56]	; (800328c <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	68db      	ldr	r3, [r3, #12]
 8003258:	b2da      	uxtb	r2, r3
 800325a:	4b0c      	ldr	r3, [pc, #48]	; (800328c <HW_TS_RTC_Wakeup_Handler+0x18c>)
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8003264:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8003266:	4b0d      	ldr	r3, [pc, #52]	; (800329c <HW_TS_RTC_Wakeup_Handler+0x19c>)
 8003268:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800326c:	60da      	str	r2, [r3, #12]
 800326e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003270:	607b      	str	r3, [r7, #4]
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	f383 8810 	msr	PRIMASK, r3
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 8003278:	4b04      	ldr	r3, [pc, #16]	; (800328c <HW_TS_RTC_Wakeup_Handler+0x18c>)
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	22ff      	movs	r2, #255	; 0xff
 8003280:	625a      	str	r2, [r3, #36]	; 0x24

  return;
 8003282:	bf00      	nop
}
 8003284:	3728      	adds	r7, #40	; 0x28
 8003286:	46bd      	mov	sp, r7
 8003288:	bd80      	pop	{r7, pc}
 800328a:	bf00      	nop
 800328c:	200003e0 	.word	0x200003e0
 8003290:	20000358 	.word	0x20000358
 8003294:	200002c8 	.word	0x200002c8
 8003298:	20000360 	.word	0x20000360
 800329c:	58000800 	.word	0x58000800

080032a0 <HW_TS_Init>:

void HW_TS_Init(HW_TS_InitMode_t TimerInitMode, RTC_HandleTypeDef *hrtc)
{
 80032a0:	b580      	push	{r7, lr}
 80032a2:	b088      	sub	sp, #32
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	4603      	mov	r3, r0
 80032a8:	6039      	str	r1, [r7, #0]
 80032aa:	71fb      	strb	r3, [r7, #7]
  uint32_t localmaxwakeuptimersetup;

  /**
   * Get RTC handler
   */
  phrtc = hrtc;
 80032ac:	4a64      	ldr	r2, [pc, #400]	; (8003440 <HW_TS_Init+0x1a0>)
 80032ae:	683b      	ldr	r3, [r7, #0]
 80032b0:	6013      	str	r3, [r2, #0]

 /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 80032b2:	4b63      	ldr	r3, [pc, #396]	; (8003440 <HW_TS_Init+0x1a0>)
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	22ca      	movs	r2, #202	; 0xca
 80032ba:	625a      	str	r2, [r3, #36]	; 0x24
 80032bc:	4b60      	ldr	r3, [pc, #384]	; (8003440 <HW_TS_Init+0x1a0>)
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	2253      	movs	r2, #83	; 0x53
 80032c4:	625a      	str	r2, [r3, #36]	; 0x24

  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80032c6:	4b5f      	ldr	r3, [pc, #380]	; (8003444 <HW_TS_Init+0x1a4>)
 80032c8:	689b      	ldr	r3, [r3, #8]
 80032ca:	4a5e      	ldr	r2, [pc, #376]	; (8003444 <HW_TS_Init+0x1a4>)
 80032cc:	f043 0320 	orr.w	r3, r3, #32
 80032d0:	6093      	str	r3, [r2, #8]

  /**
   * Readout the user config
   */
  WakeupTimerDivider = (4 - ((uint32_t)(READ_BIT(RTC->CR, RTC_CR_WUCKSEL))));
 80032d2:	4b5c      	ldr	r3, [pc, #368]	; (8003444 <HW_TS_Init+0x1a4>)
 80032d4:	689b      	ldr	r3, [r3, #8]
 80032d6:	b2db      	uxtb	r3, r3
 80032d8:	f003 0307 	and.w	r3, r3, #7
 80032dc:	b2db      	uxtb	r3, r3
 80032de:	f1c3 0304 	rsb	r3, r3, #4
 80032e2:	b2da      	uxtb	r2, r3
 80032e4:	4b58      	ldr	r3, [pc, #352]	; (8003448 <HW_TS_Init+0x1a8>)
 80032e6:	701a      	strb	r2, [r3, #0]

  AsynchPrescalerUserConfig = (uint8_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_A) >> (uint32_t)POSITION_VAL(RTC_PRER_PREDIV_A)) + 1;
 80032e8:	4b56      	ldr	r3, [pc, #344]	; (8003444 <HW_TS_Init+0x1a4>)
 80032ea:	691b      	ldr	r3, [r3, #16]
 80032ec:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80032f0:	f44f 02fe 	mov.w	r2, #8323072	; 0x7f0000
 80032f4:	613a      	str	r2, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032f6:	693a      	ldr	r2, [r7, #16]
 80032f8:	fa92 f2a2 	rbit	r2, r2
 80032fc:	60fa      	str	r2, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80032fe:	68fa      	ldr	r2, [r7, #12]
 8003300:	617a      	str	r2, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003302:	697a      	ldr	r2, [r7, #20]
 8003304:	2a00      	cmp	r2, #0
 8003306:	d101      	bne.n	800330c <HW_TS_Init+0x6c>
  {
    return 32U;
 8003308:	2220      	movs	r2, #32
 800330a:	e003      	b.n	8003314 <HW_TS_Init+0x74>
  }
  return __builtin_clz(value);
 800330c:	697a      	ldr	r2, [r7, #20]
 800330e:	fab2 f282 	clz	r2, r2
 8003312:	b2d2      	uxtb	r2, r2
 8003314:	40d3      	lsrs	r3, r2
 8003316:	b2db      	uxtb	r3, r3
 8003318:	3301      	adds	r3, #1
 800331a:	b2da      	uxtb	r2, r3
 800331c:	4b4b      	ldr	r3, [pc, #300]	; (800344c <HW_TS_Init+0x1ac>)
 800331e:	701a      	strb	r2, [r3, #0]

  SynchPrescalerUserConfig = (uint16_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_S)) + 1;
 8003320:	4b48      	ldr	r3, [pc, #288]	; (8003444 <HW_TS_Init+0x1a4>)
 8003322:	691b      	ldr	r3, [r3, #16]
 8003324:	b29b      	uxth	r3, r3
 8003326:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800332a:	b29b      	uxth	r3, r3
 800332c:	3301      	adds	r3, #1
 800332e:	b29a      	uxth	r2, r3
 8003330:	4b47      	ldr	r3, [pc, #284]	; (8003450 <HW_TS_Init+0x1b0>)
 8003332:	801a      	strh	r2, [r3, #0]

  /**
   *  Margin is taken to avoid wrong calculation when the wrap around is there and some
   *  application interrupts may have delayed the reading
   */
  localmaxwakeuptimersetup = ((((SynchPrescalerUserConfig - 1)*AsynchPrescalerUserConfig) - CFG_HW_TS_RTC_HANDLER_MAX_DELAY) >> WakeupTimerDivider);
 8003334:	4b46      	ldr	r3, [pc, #280]	; (8003450 <HW_TS_Init+0x1b0>)
 8003336:	881b      	ldrh	r3, [r3, #0]
 8003338:	3b01      	subs	r3, #1
 800333a:	4a44      	ldr	r2, [pc, #272]	; (800344c <HW_TS_Init+0x1ac>)
 800333c:	7812      	ldrb	r2, [r2, #0]
 800333e:	fb02 f303 	mul.w	r3, r2, r3
 8003342:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8003346:	4a40      	ldr	r2, [pc, #256]	; (8003448 <HW_TS_Init+0x1a8>)
 8003348:	7812      	ldrb	r2, [r2, #0]
 800334a:	40d3      	lsrs	r3, r2
 800334c:	61bb      	str	r3, [r7, #24]

  if(localmaxwakeuptimersetup >= 0xFFFF)
 800334e:	69bb      	ldr	r3, [r7, #24]
 8003350:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8003354:	4293      	cmp	r3, r2
 8003356:	d904      	bls.n	8003362 <HW_TS_Init+0xc2>
  {
    MaxWakeupTimerSetup = 0xFFFF;
 8003358:	4b3e      	ldr	r3, [pc, #248]	; (8003454 <HW_TS_Init+0x1b4>)
 800335a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800335e:	801a      	strh	r2, [r3, #0]
 8003360:	e003      	b.n	800336a <HW_TS_Init+0xca>
  }
  else
  {
    MaxWakeupTimerSetup = (uint16_t)localmaxwakeuptimersetup;
 8003362:	69bb      	ldr	r3, [r7, #24]
 8003364:	b29a      	uxth	r2, r3
 8003366:	4b3b      	ldr	r3, [pc, #236]	; (8003454 <HW_TS_Init+0x1b4>)
 8003368:	801a      	strh	r2, [r3, #0]
  }

  /**
   * Configure EXTI module
   */
  LL_EXTI_EnableRisingTrig_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 800336a:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800336e:	f7ff fb85 	bl	8002a7c <LL_EXTI_EnableRisingTrig_0_31>
  LL_EXTI_EnableIT_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 8003372:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8003376:	f7ff fb6d 	bl	8002a54 <LL_EXTI_EnableIT_0_31>

  if(TimerInitMode == hw_ts_InitMode_Full)
 800337a:	79fb      	ldrb	r3, [r7, #7]
 800337c:	2b00      	cmp	r3, #0
 800337e:	d143      	bne.n	8003408 <HW_TS_Init+0x168>
  {
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8003380:	4b35      	ldr	r3, [pc, #212]	; (8003458 <HW_TS_Init+0x1b8>)
 8003382:	2201      	movs	r2, #1
 8003384:	701a      	strb	r2, [r3, #0]
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8003386:	4b35      	ldr	r3, [pc, #212]	; (800345c <HW_TS_Init+0x1bc>)
 8003388:	f04f 32ff 	mov.w	r2, #4294967295
 800338c:	601a      	str	r2, [r3, #0]

    /**
     * Initialize the timer server
     */
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 800338e:	2300      	movs	r3, #0
 8003390:	77fb      	strb	r3, [r7, #31]
 8003392:	e00c      	b.n	80033ae <HW_TS_Init+0x10e>
    {
      aTimerContext[loop].TimerIDStatus = TimerID_Free;
 8003394:	7ffa      	ldrb	r2, [r7, #31]
 8003396:	4932      	ldr	r1, [pc, #200]	; (8003460 <HW_TS_Init+0x1c0>)
 8003398:	4613      	mov	r3, r2
 800339a:	005b      	lsls	r3, r3, #1
 800339c:	4413      	add	r3, r2
 800339e:	00db      	lsls	r3, r3, #3
 80033a0:	440b      	add	r3, r1
 80033a2:	330c      	adds	r3, #12
 80033a4:	2200      	movs	r2, #0
 80033a6:	701a      	strb	r2, [r3, #0]
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 80033a8:	7ffb      	ldrb	r3, [r7, #31]
 80033aa:	3301      	adds	r3, #1
 80033ac:	77fb      	strb	r3, [r7, #31]
 80033ae:	7ffb      	ldrb	r3, [r7, #31]
 80033b0:	2b05      	cmp	r3, #5
 80033b2:	d9ef      	bls.n	8003394 <HW_TS_Init+0xf4>
    }

    CurrentRunningTimerID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;   /**<  Set ID to non valid value */
 80033b4:	4b2b      	ldr	r3, [pc, #172]	; (8003464 <HW_TS_Init+0x1c4>)
 80033b6:	2206      	movs	r2, #6
 80033b8:	701a      	strb	r2, [r3, #0]

    __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);                       /**<  Disable the Wakeup Timer */
 80033ba:	4b21      	ldr	r3, [pc, #132]	; (8003440 <HW_TS_Init+0x1a0>)
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	689a      	ldr	r2, [r3, #8]
 80033c2:	4b1f      	ldr	r3, [pc, #124]	; (8003440 <HW_TS_Init+0x1a0>)
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80033cc:	609a      	str	r2, [r3, #8]
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);     /**<  Clear flag in RTC module */
 80033ce:	4b1c      	ldr	r3, [pc, #112]	; (8003440 <HW_TS_Init+0x1a0>)
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	68db      	ldr	r3, [r3, #12]
 80033d6:	b2da      	uxtb	r2, r3
 80033d8:	4b19      	ldr	r3, [pc, #100]	; (8003440 <HW_TS_Init+0x1a0>)
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f462 6290 	orn	r2, r2, #1152	; 0x480
 80033e2:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module  */
 80033e4:	4b20      	ldr	r3, [pc, #128]	; (8003468 <HW_TS_Init+0x1c8>)
 80033e6:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80033ea:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);       /**<  Clear pending bit in NVIC  */
 80033ec:	2003      	movs	r0, #3
 80033ee:	f003 fac3 	bl	8006978 <HAL_NVIC_ClearPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE_IT(phrtc, RTC_IT_WUT);         /**<  Enable interrupt in RTC module  */
 80033f2:	4b13      	ldr	r3, [pc, #76]	; (8003440 <HW_TS_Init+0x1a0>)
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	689a      	ldr	r2, [r3, #8]
 80033fa:	4b11      	ldr	r3, [pc, #68]	; (8003440 <HW_TS_Init+0x1a0>)
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003404:	609a      	str	r2, [r3, #8]
 8003406:	e00a      	b.n	800341e <HW_TS_Init+0x17e>
  }
  else
  {
    if(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTF) != RESET)
 8003408:	4b0d      	ldr	r3, [pc, #52]	; (8003440 <HW_TS_Init+0x1a0>)
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	68db      	ldr	r3, [r3, #12]
 8003410:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003414:	2b00      	cmp	r3, #0
 8003416:	d002      	beq.n	800341e <HW_TS_Init+0x17e>
    {
      /**
       * Simulate that the Timer expired
       */
      HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 8003418:	2003      	movs	r0, #3
 800341a:	f003 fa9f 	bl	800695c <HAL_NVIC_SetPendingIRQ>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 800341e:	4b08      	ldr	r3, [pc, #32]	; (8003440 <HW_TS_Init+0x1a0>)
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	22ff      	movs	r2, #255	; 0xff
 8003426:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_SetPriority(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_PREEMPTPRIO, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_SUBPRIO);   /**<  Set NVIC priority */
 8003428:	2200      	movs	r2, #0
 800342a:	2106      	movs	r1, #6
 800342c:	2003      	movs	r0, #3
 800342e:	f003 fa5f 	bl	80068f0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8003432:	2003      	movs	r0, #3
 8003434:	f003 fa76 	bl	8006924 <HAL_NVIC_EnableIRQ>

  return;
 8003438:	bf00      	nop
}
 800343a:	3720      	adds	r7, #32
 800343c:	46bd      	mov	sp, r7
 800343e:	bd80      	pop	{r7, pc}
 8003440:	200003e0 	.word	0x200003e0
 8003444:	40002800 	.word	0x40002800
 8003448:	200003e4 	.word	0x200003e4
 800344c:	200003e5 	.word	0x200003e5
 8003450:	200003e6 	.word	0x200003e6
 8003454:	200003e8 	.word	0x200003e8
 8003458:	20000360 	.word	0x20000360
 800345c:	2000035c 	.word	0x2000035c
 8003460:	200002c8 	.word	0x200002c8
 8003464:	20000358 	.word	0x20000358
 8003468:	58000800 	.word	0x58000800

0800346c <HW_TS_Create>:

HW_TS_ReturnStatus_t HW_TS_Create(uint32_t TimerProcessID, uint8_t *pTimerId, HW_TS_Mode_t TimerMode, HW_TS_pTimerCb_t pftimeout_handler)
{
 800346c:	b480      	push	{r7}
 800346e:	b08b      	sub	sp, #44	; 0x2c
 8003470:	af00      	add	r7, sp, #0
 8003472:	60f8      	str	r0, [r7, #12]
 8003474:	60b9      	str	r1, [r7, #8]
 8003476:	603b      	str	r3, [r7, #0]
 8003478:	4613      	mov	r3, r2
 800347a:	71fb      	strb	r3, [r7, #7]
  HW_TS_ReturnStatus_t localreturnstatus;
  uint8_t loop = 0;
 800347c:	2300      	movs	r3, #0
 800347e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003482:	f3ef 8310 	mrs	r3, PRIMASK
 8003486:	61fb      	str	r3, [r7, #28]
  return(result);
 8003488:	69fb      	ldr	r3, [r7, #28]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800348a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 800348c:	b672      	cpsid	i
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  while((loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[loop].TimerIDStatus != TimerID_Free))
 800348e:	e004      	b.n	800349a <HW_TS_Create+0x2e>
  {
    loop++;
 8003490:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8003494:	3301      	adds	r3, #1
 8003496:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  while((loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[loop].TimerIDStatus != TimerID_Free))
 800349a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800349e:	2b05      	cmp	r3, #5
 80034a0:	d80c      	bhi.n	80034bc <HW_TS_Create+0x50>
 80034a2:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80034a6:	492b      	ldr	r1, [pc, #172]	; (8003554 <HW_TS_Create+0xe8>)
 80034a8:	4613      	mov	r3, r2
 80034aa:	005b      	lsls	r3, r3, #1
 80034ac:	4413      	add	r3, r2
 80034ae:	00db      	lsls	r3, r3, #3
 80034b0:	440b      	add	r3, r1
 80034b2:	330c      	adds	r3, #12
 80034b4:	781b      	ldrb	r3, [r3, #0]
 80034b6:	b2db      	uxtb	r3, r3
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d1e9      	bne.n	8003490 <HW_TS_Create+0x24>
  }

  if(loop != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 80034bc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80034c0:	2b06      	cmp	r3, #6
 80034c2:	d037      	beq.n	8003534 <HW_TS_Create+0xc8>
  {
    aTimerContext[loop].TimerIDStatus = TimerID_Created;
 80034c4:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80034c8:	4922      	ldr	r1, [pc, #136]	; (8003554 <HW_TS_Create+0xe8>)
 80034ca:	4613      	mov	r3, r2
 80034cc:	005b      	lsls	r3, r3, #1
 80034ce:	4413      	add	r3, r2
 80034d0:	00db      	lsls	r3, r3, #3
 80034d2:	440b      	add	r3, r1
 80034d4:	330c      	adds	r3, #12
 80034d6:	2201      	movs	r2, #1
 80034d8:	701a      	strb	r2, [r3, #0]
 80034da:	6a3b      	ldr	r3, [r7, #32]
 80034dc:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80034de:	69bb      	ldr	r3, [r7, #24]
 80034e0:	f383 8810 	msr	PRIMASK, r3

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

    aTimerContext[loop].TimerProcessID = TimerProcessID;
 80034e4:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80034e8:	491a      	ldr	r1, [pc, #104]	; (8003554 <HW_TS_Create+0xe8>)
 80034ea:	4613      	mov	r3, r2
 80034ec:	005b      	lsls	r3, r3, #1
 80034ee:	4413      	add	r3, r2
 80034f0:	00db      	lsls	r3, r3, #3
 80034f2:	440b      	add	r3, r1
 80034f4:	3310      	adds	r3, #16
 80034f6:	68fa      	ldr	r2, [r7, #12]
 80034f8:	601a      	str	r2, [r3, #0]
    aTimerContext[loop].TimerMode = TimerMode;
 80034fa:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80034fe:	4915      	ldr	r1, [pc, #84]	; (8003554 <HW_TS_Create+0xe8>)
 8003500:	4613      	mov	r3, r2
 8003502:	005b      	lsls	r3, r3, #1
 8003504:	4413      	add	r3, r2
 8003506:	00db      	lsls	r3, r3, #3
 8003508:	440b      	add	r3, r1
 800350a:	330d      	adds	r3, #13
 800350c:	79fa      	ldrb	r2, [r7, #7]
 800350e:	701a      	strb	r2, [r3, #0]
    aTimerContext[loop].pTimerCallBack = pftimeout_handler;
 8003510:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8003514:	490f      	ldr	r1, [pc, #60]	; (8003554 <HW_TS_Create+0xe8>)
 8003516:	4613      	mov	r3, r2
 8003518:	005b      	lsls	r3, r3, #1
 800351a:	4413      	add	r3, r2
 800351c:	00db      	lsls	r3, r3, #3
 800351e:	440b      	add	r3, r1
 8003520:	683a      	ldr	r2, [r7, #0]
 8003522:	601a      	str	r2, [r3, #0]
    *pTimerId = loop;
 8003524:	68bb      	ldr	r3, [r7, #8]
 8003526:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800352a:	701a      	strb	r2, [r3, #0]

    localreturnstatus = hw_ts_Successful;
 800352c:	2300      	movs	r3, #0
 800352e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8003532:	e007      	b.n	8003544 <HW_TS_Create+0xd8>
 8003534:	6a3b      	ldr	r3, [r7, #32]
 8003536:	617b      	str	r3, [r7, #20]
 8003538:	697b      	ldr	r3, [r7, #20]
 800353a:	f383 8810 	msr	PRIMASK, r3
  {
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

    localreturnstatus = hw_ts_Failed;
 800353e:	2301      	movs	r3, #1
 8003540:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  return(localreturnstatus);
 8003544:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8003548:	4618      	mov	r0, r3
 800354a:	372c      	adds	r7, #44	; 0x2c
 800354c:	46bd      	mov	sp, r7
 800354e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003552:	4770      	bx	lr
 8003554:	200002c8 	.word	0x200002c8

08003558 <HW_TS_Stop>:

  return;
}

void HW_TS_Stop(uint8_t timer_id)
{
 8003558:	b580      	push	{r7, lr}
 800355a:	b086      	sub	sp, #24
 800355c:	af00      	add	r7, sp, #0
 800355e:	4603      	mov	r3, r0
 8003560:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003562:	f3ef 8310 	mrs	r3, PRIMASK
 8003566:	60fb      	str	r3, [r7, #12]
  return(result);
 8003568:	68fb      	ldr	r3, [r7, #12]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800356a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800356c:	b672      	cpsid	i
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 800356e:	2003      	movs	r0, #3
 8003570:	f003 f9e6 	bl	8006940 <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8003574:	4b37      	ldr	r3, [pc, #220]	; (8003654 <HW_TS_Stop+0xfc>)
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	22ca      	movs	r2, #202	; 0xca
 800357c:	625a      	str	r2, [r3, #36]	; 0x24
 800357e:	4b35      	ldr	r3, [pc, #212]	; (8003654 <HW_TS_Stop+0xfc>)
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	2253      	movs	r2, #83	; 0x53
 8003586:	625a      	str	r2, [r3, #36]	; 0x24

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 8003588:	79fa      	ldrb	r2, [r7, #7]
 800358a:	4933      	ldr	r1, [pc, #204]	; (8003658 <HW_TS_Stop+0x100>)
 800358c:	4613      	mov	r3, r2
 800358e:	005b      	lsls	r3, r3, #1
 8003590:	4413      	add	r3, r2
 8003592:	00db      	lsls	r3, r3, #3
 8003594:	440b      	add	r3, r1
 8003596:	330c      	adds	r3, #12
 8003598:	781b      	ldrb	r3, [r3, #0]
 800359a:	b2db      	uxtb	r3, r3
 800359c:	2b02      	cmp	r3, #2
 800359e:	d148      	bne.n	8003632 <HW_TS_Stop+0xda>
  {
    UnlinkTimer(timer_id, SSR_Read_Requested);
 80035a0:	79fb      	ldrb	r3, [r7, #7]
 80035a2:	2100      	movs	r1, #0
 80035a4:	4618      	mov	r0, r3
 80035a6:	f7ff fbeb 	bl	8002d80 <UnlinkTimer>
    localcurrentrunningtimerid = CurrentRunningTimerID;
 80035aa:	4b2c      	ldr	r3, [pc, #176]	; (800365c <HW_TS_Stop+0x104>)
 80035ac:	781b      	ldrb	r3, [r3, #0]
 80035ae:	74fb      	strb	r3, [r7, #19]

    if(localcurrentrunningtimerid == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 80035b0:	7cfb      	ldrb	r3, [r7, #19]
 80035b2:	2b06      	cmp	r3, #6
 80035b4:	d135      	bne.n	8003622 <HW_TS_Stop+0xca>
       */

      /**
       * Disable the timer
       */
      if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 80035b6:	4b2a      	ldr	r3, [pc, #168]	; (8003660 <HW_TS_Stop+0x108>)
 80035b8:	689b      	ldr	r3, [r3, #8]
 80035ba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80035be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80035c2:	d108      	bne.n	80035d6 <HW_TS_Stop+0x7e>
      {
        /**
         * Wait for the flag to be back to 0 when the wakeup timer is enabled
         */
        while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == SET);
 80035c4:	bf00      	nop
 80035c6:	4b23      	ldr	r3, [pc, #140]	; (8003654 <HW_TS_Stop+0xfc>)
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	68db      	ldr	r3, [r3, #12]
 80035ce:	f003 0304 	and.w	r3, r3, #4
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d1f7      	bne.n	80035c6 <HW_TS_Stop+0x6e>
      }
      __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);   /**<  Disable the Wakeup Timer */
 80035d6:	4b1f      	ldr	r3, [pc, #124]	; (8003654 <HW_TS_Stop+0xfc>)
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	689a      	ldr	r2, [r3, #8]
 80035de:	4b1d      	ldr	r3, [pc, #116]	; (8003654 <HW_TS_Stop+0xfc>)
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80035e8:	609a      	str	r2, [r3, #8]

      while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == RESET);
 80035ea:	bf00      	nop
 80035ec:	4b19      	ldr	r3, [pc, #100]	; (8003654 <HW_TS_Stop+0xfc>)
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	68db      	ldr	r3, [r3, #12]
 80035f4:	f003 0304 	and.w	r3, r3, #4
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d0f7      	beq.n	80035ec <HW_TS_Stop+0x94>
       * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
       * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
       * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
       * due to the autoreload feature
       */
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 80035fc:	4b15      	ldr	r3, [pc, #84]	; (8003654 <HW_TS_Stop+0xfc>)
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	68db      	ldr	r3, [r3, #12]
 8003604:	b2da      	uxtb	r2, r3
 8003606:	4b13      	ldr	r3, [pc, #76]	; (8003654 <HW_TS_Stop+0xfc>)
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8003610:	60da      	str	r2, [r3, #12]
      __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8003612:	4b14      	ldr	r3, [pc, #80]	; (8003664 <HW_TS_Stop+0x10c>)
 8003614:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8003618:	60da      	str	r2, [r3, #12]
      HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 800361a:	2003      	movs	r0, #3
 800361c:	f003 f9ac 	bl	8006978 <HAL_NVIC_ClearPendingIRQ>
 8003620:	e007      	b.n	8003632 <HW_TS_Stop+0xda>
    }
    else if(PreviousRunningTimerID != localcurrentrunningtimerid)
 8003622:	4b11      	ldr	r3, [pc, #68]	; (8003668 <HW_TS_Stop+0x110>)
 8003624:	781b      	ldrb	r3, [r3, #0]
 8003626:	b2db      	uxtb	r3, r3
 8003628:	7cfa      	ldrb	r2, [r7, #19]
 800362a:	429a      	cmp	r2, r3
 800362c:	d001      	beq.n	8003632 <HW_TS_Stop+0xda>
    {
      RescheduleTimerList();
 800362e:	f7ff fcc9 	bl	8002fc4 <RescheduleTimerList>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 8003632:	4b08      	ldr	r3, [pc, #32]	; (8003654 <HW_TS_Stop+0xfc>)
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	22ff      	movs	r2, #255	; 0xff
 800363a:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 800363c:	2003      	movs	r0, #3
 800363e:	f003 f971 	bl	8006924 <HAL_NVIC_EnableIRQ>
 8003642:	697b      	ldr	r3, [r7, #20]
 8003644:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003646:	68bb      	ldr	r3, [r7, #8]
 8003648:	f383 8810 	msr	PRIMASK, r3

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 800364c:	bf00      	nop
}
 800364e:	3718      	adds	r7, #24
 8003650:	46bd      	mov	sp, r7
 8003652:	bd80      	pop	{r7, pc}
 8003654:	200003e0 	.word	0x200003e0
 8003658:	200002c8 	.word	0x200002c8
 800365c:	20000358 	.word	0x20000358
 8003660:	40002800 	.word	0x40002800
 8003664:	58000800 	.word	0x58000800
 8003668:	20000359 	.word	0x20000359

0800366c <HW_TS_Start>:

void HW_TS_Start(uint8_t timer_id, uint32_t timeout_ticks)
{
 800366c:	b580      	push	{r7, lr}
 800366e:	b086      	sub	sp, #24
 8003670:	af00      	add	r7, sp, #0
 8003672:	4603      	mov	r3, r0
 8003674:	6039      	str	r1, [r7, #0]
 8003676:	71fb      	strb	r3, [r7, #7]

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 8003678:	79fa      	ldrb	r2, [r7, #7]
 800367a:	493b      	ldr	r1, [pc, #236]	; (8003768 <HW_TS_Start+0xfc>)
 800367c:	4613      	mov	r3, r2
 800367e:	005b      	lsls	r3, r3, #1
 8003680:	4413      	add	r3, r2
 8003682:	00db      	lsls	r3, r3, #3
 8003684:	440b      	add	r3, r1
 8003686:	330c      	adds	r3, #12
 8003688:	781b      	ldrb	r3, [r3, #0]
 800368a:	b2db      	uxtb	r3, r3
 800368c:	2b02      	cmp	r3, #2
 800368e:	d103      	bne.n	8003698 <HW_TS_Start+0x2c>
  {
    HW_TS_Stop( timer_id );
 8003690:	79fb      	ldrb	r3, [r7, #7]
 8003692:	4618      	mov	r0, r3
 8003694:	f7ff ff60 	bl	8003558 <HW_TS_Stop>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003698:	f3ef 8310 	mrs	r3, PRIMASK
 800369c:	60fb      	str	r3, [r7, #12]
  return(result);
 800369e:	68fb      	ldr	r3, [r7, #12]
  }

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80036a0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80036a2:	b672      	cpsid	i
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 80036a4:	2003      	movs	r0, #3
 80036a6:	f003 f94b 	bl	8006940 <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 80036aa:	4b30      	ldr	r3, [pc, #192]	; (800376c <HW_TS_Start+0x100>)
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	22ca      	movs	r2, #202	; 0xca
 80036b2:	625a      	str	r2, [r3, #36]	; 0x24
 80036b4:	4b2d      	ldr	r3, [pc, #180]	; (800376c <HW_TS_Start+0x100>)
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	2253      	movs	r2, #83	; 0x53
 80036bc:	625a      	str	r2, [r3, #36]	; 0x24

  aTimerContext[timer_id].TimerIDStatus = TimerID_Running;
 80036be:	79fa      	ldrb	r2, [r7, #7]
 80036c0:	4929      	ldr	r1, [pc, #164]	; (8003768 <HW_TS_Start+0xfc>)
 80036c2:	4613      	mov	r3, r2
 80036c4:	005b      	lsls	r3, r3, #1
 80036c6:	4413      	add	r3, r2
 80036c8:	00db      	lsls	r3, r3, #3
 80036ca:	440b      	add	r3, r1
 80036cc:	330c      	adds	r3, #12
 80036ce:	2202      	movs	r2, #2
 80036d0:	701a      	strb	r2, [r3, #0]

  aTimerContext[timer_id].CountLeft = timeout_ticks;
 80036d2:	79fa      	ldrb	r2, [r7, #7]
 80036d4:	4924      	ldr	r1, [pc, #144]	; (8003768 <HW_TS_Start+0xfc>)
 80036d6:	4613      	mov	r3, r2
 80036d8:	005b      	lsls	r3, r3, #1
 80036da:	4413      	add	r3, r2
 80036dc:	00db      	lsls	r3, r3, #3
 80036de:	440b      	add	r3, r1
 80036e0:	3308      	adds	r3, #8
 80036e2:	683a      	ldr	r2, [r7, #0]
 80036e4:	601a      	str	r2, [r3, #0]
  aTimerContext[timer_id].CounterInit = timeout_ticks;
 80036e6:	79fa      	ldrb	r2, [r7, #7]
 80036e8:	491f      	ldr	r1, [pc, #124]	; (8003768 <HW_TS_Start+0xfc>)
 80036ea:	4613      	mov	r3, r2
 80036ec:	005b      	lsls	r3, r3, #1
 80036ee:	4413      	add	r3, r2
 80036f0:	00db      	lsls	r3, r3, #3
 80036f2:	440b      	add	r3, r1
 80036f4:	3304      	adds	r3, #4
 80036f6:	683a      	ldr	r2, [r7, #0]
 80036f8:	601a      	str	r2, [r3, #0]

  time_elapsed =  linkTimer(timer_id);
 80036fa:	79fb      	ldrb	r3, [r7, #7]
 80036fc:	4618      	mov	r0, r3
 80036fe:	f7ff fa95 	bl	8002c2c <linkTimer>
 8003702:	4603      	mov	r3, r0
 8003704:	827b      	strh	r3, [r7, #18]

  localcurrentrunningtimerid = CurrentRunningTimerID;
 8003706:	4b1a      	ldr	r3, [pc, #104]	; (8003770 <HW_TS_Start+0x104>)
 8003708:	781b      	ldrb	r3, [r3, #0]
 800370a:	747b      	strb	r3, [r7, #17]

  if(PreviousRunningTimerID != localcurrentrunningtimerid)
 800370c:	4b19      	ldr	r3, [pc, #100]	; (8003774 <HW_TS_Start+0x108>)
 800370e:	781b      	ldrb	r3, [r3, #0]
 8003710:	b2db      	uxtb	r3, r3
 8003712:	7c7a      	ldrb	r2, [r7, #17]
 8003714:	429a      	cmp	r2, r3
 8003716:	d002      	beq.n	800371e <HW_TS_Start+0xb2>
  {
    RescheduleTimerList();
 8003718:	f7ff fc54 	bl	8002fc4 <RescheduleTimerList>
 800371c:	e013      	b.n	8003746 <HW_TS_Start+0xda>
  }
  else
  {
    aTimerContext[timer_id].CountLeft -= time_elapsed;
 800371e:	79fa      	ldrb	r2, [r7, #7]
 8003720:	4911      	ldr	r1, [pc, #68]	; (8003768 <HW_TS_Start+0xfc>)
 8003722:	4613      	mov	r3, r2
 8003724:	005b      	lsls	r3, r3, #1
 8003726:	4413      	add	r3, r2
 8003728:	00db      	lsls	r3, r3, #3
 800372a:	440b      	add	r3, r1
 800372c:	3308      	adds	r3, #8
 800372e:	6819      	ldr	r1, [r3, #0]
 8003730:	8a7b      	ldrh	r3, [r7, #18]
 8003732:	79fa      	ldrb	r2, [r7, #7]
 8003734:	1ac9      	subs	r1, r1, r3
 8003736:	480c      	ldr	r0, [pc, #48]	; (8003768 <HW_TS_Start+0xfc>)
 8003738:	4613      	mov	r3, r2
 800373a:	005b      	lsls	r3, r3, #1
 800373c:	4413      	add	r3, r2
 800373e:	00db      	lsls	r3, r3, #3
 8003740:	4403      	add	r3, r0
 8003742:	3308      	adds	r3, #8
 8003744:	6019      	str	r1, [r3, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 8003746:	4b09      	ldr	r3, [pc, #36]	; (800376c <HW_TS_Start+0x100>)
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	22ff      	movs	r2, #255	; 0xff
 800374e:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8003750:	2003      	movs	r0, #3
 8003752:	f003 f8e7 	bl	8006924 <HAL_NVIC_EnableIRQ>
 8003756:	697b      	ldr	r3, [r7, #20]
 8003758:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800375a:	68bb      	ldr	r3, [r7, #8]
 800375c:	f383 8810 	msr	PRIMASK, r3

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 8003760:	bf00      	nop
}
 8003762:	3718      	adds	r7, #24
 8003764:	46bd      	mov	sp, r7
 8003766:	bd80      	pop	{r7, pc}
 8003768:	200002c8 	.word	0x200002c8
 800376c:	200003e0 	.word	0x200003e0
 8003770:	20000358 	.word	0x20000358
 8003774:	20000359 	.word	0x20000359

08003778 <HW_TS_RTC_Int_AppNot>:

  return (return_value);
}

__weak void HW_TS_RTC_Int_AppNot(uint32_t TimerProcessID, uint8_t TimerID, HW_TS_pTimerCb_t pTimerCallBack)
{
 8003778:	b580      	push	{r7, lr}
 800377a:	b084      	sub	sp, #16
 800377c:	af00      	add	r7, sp, #0
 800377e:	60f8      	str	r0, [r7, #12]
 8003780:	460b      	mov	r3, r1
 8003782:	607a      	str	r2, [r7, #4]
 8003784:	72fb      	strb	r3, [r7, #11]
  pTimerCallBack();
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	4798      	blx	r3

  return;
 800378a:	bf00      	nop
}
 800378c:	3710      	adds	r7, #16
 800378e:	46bd      	mov	sp, r7
 8003790:	bd80      	pop	{r7, pc}
	...

08003794 <HW_UART_Transmit_DMA>:

    return hw_status;
}

hw_status_t HW_UART_Transmit_DMA(hw_uart_id_t hw_uart_id, uint8_t *p_data, uint16_t size, void (*cb)(void))
{
 8003794:	b480      	push	{r7}
 8003796:	b087      	sub	sp, #28
 8003798:	af00      	add	r7, sp, #0
 800379a:	60b9      	str	r1, [r7, #8]
 800379c:	607b      	str	r3, [r7, #4]
 800379e:	4603      	mov	r3, r0
 80037a0:	73fb      	strb	r3, [r7, #15]
 80037a2:	4613      	mov	r3, r2
 80037a4:	81bb      	strh	r3, [r7, #12]
    HAL_StatusTypeDef hal_status = HAL_OK;
 80037a6:	2300      	movs	r3, #0
 80037a8:	75bb      	strb	r3, [r7, #22]
    hw_status_t hw_status = hw_uart_ok;
 80037aa:	2300      	movs	r3, #0
 80037ac:	75fb      	strb	r3, [r7, #23]
            hal_status = HAL_UART_Transmit_DMA(&hlpuart1, p_data, size);
            break;
#endif

        default:
            break;
 80037ae:	bf00      	nop
    }

    switch (hal_status)
 80037b0:	7dbb      	ldrb	r3, [r7, #22]
 80037b2:	2b03      	cmp	r3, #3
 80037b4:	d816      	bhi.n	80037e4 <HW_UART_Transmit_DMA+0x50>
 80037b6:	a201      	add	r2, pc, #4	; (adr r2, 80037bc <HW_UART_Transmit_DMA+0x28>)
 80037b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037bc:	080037cd 	.word	0x080037cd
 80037c0:	080037d3 	.word	0x080037d3
 80037c4:	080037d9 	.word	0x080037d9
 80037c8:	080037df 	.word	0x080037df
    {
        case HAL_OK:
            hw_status = hw_uart_ok;
 80037cc:	2300      	movs	r3, #0
 80037ce:	75fb      	strb	r3, [r7, #23]
            break;
 80037d0:	e009      	b.n	80037e6 <HW_UART_Transmit_DMA+0x52>

        case HAL_ERROR:
            hw_status = hw_uart_error;
 80037d2:	2301      	movs	r3, #1
 80037d4:	75fb      	strb	r3, [r7, #23]
            break;
 80037d6:	e006      	b.n	80037e6 <HW_UART_Transmit_DMA+0x52>

        case HAL_BUSY:
            hw_status = hw_uart_busy;
 80037d8:	2302      	movs	r3, #2
 80037da:	75fb      	strb	r3, [r7, #23]
            break;
 80037dc:	e003      	b.n	80037e6 <HW_UART_Transmit_DMA+0x52>

        case HAL_TIMEOUT:
            hw_status = hw_uart_to;
 80037de:	2303      	movs	r3, #3
 80037e0:	75fb      	strb	r3, [r7, #23]
            break;
 80037e2:	e000      	b.n	80037e6 <HW_UART_Transmit_DMA+0x52>

        default:
            break;
 80037e4:	bf00      	nop
    }

    return hw_status;
 80037e6:	7dfb      	ldrb	r3, [r7, #23]
}
 80037e8:	4618      	mov	r0, r3
 80037ea:	371c      	adds	r7, #28
 80037ec:	46bd      	mov	sp, r7
 80037ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f2:	4770      	bx	lr

080037f4 <_angle_correction>:





int _angle_correction(int measured_angle){
 80037f4:	b480      	push	{r7}
 80037f6:	b089      	sub	sp, #36	; 0x24
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	6078      	str	r0, [r7, #4]
  //given a measured angle, get back a warped angle interpolated from measured corrections
  int i=0;
 80037fc:	2300      	movs	r3, #0
 80037fe:	61fb      	str	r3, [r7, #28]
  while(measured_angle > MAP_ANGLE_MEASURED[i+1]) i++;
 8003800:	e002      	b.n	8003808 <_angle_correction+0x14>
 8003802:	69fb      	ldr	r3, [r7, #28]
 8003804:	3301      	adds	r3, #1
 8003806:	61fb      	str	r3, [r7, #28]
 8003808:	69fb      	ldr	r3, [r7, #28]
 800380a:	3301      	adds	r3, #1
 800380c:	4a1f      	ldr	r2, [pc, #124]	; (800388c <_angle_correction+0x98>)
 800380e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003812:	687a      	ldr	r2, [r7, #4]
 8003814:	429a      	cmp	r2, r3
 8003816:	dcf4      	bgt.n	8003802 <_angle_correction+0xe>

  int low_m = MAP_ANGLE_MEASURED[i];
 8003818:	4a1c      	ldr	r2, [pc, #112]	; (800388c <_angle_correction+0x98>)
 800381a:	69fb      	ldr	r3, [r7, #28]
 800381c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003820:	61bb      	str	r3, [r7, #24]
  int high_m = MAP_ANGLE_MEASURED[i+1];
 8003822:	69fb      	ldr	r3, [r7, #28]
 8003824:	3301      	adds	r3, #1
 8003826:	4a19      	ldr	r2, [pc, #100]	; (800388c <_angle_correction+0x98>)
 8003828:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800382c:	617b      	str	r3, [r7, #20]
  int low_r = MAP_ANGLE_REAL[i];
 800382e:	4a18      	ldr	r2, [pc, #96]	; (8003890 <_angle_correction+0x9c>)
 8003830:	69fb      	ldr	r3, [r7, #28]
 8003832:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003836:	613b      	str	r3, [r7, #16]
  int high_r = MAP_ANGLE_REAL[i+1];
 8003838:	69fb      	ldr	r3, [r7, #28]
 800383a:	3301      	adds	r3, #1
 800383c:	4a14      	ldr	r2, [pc, #80]	; (8003890 <_angle_correction+0x9c>)
 800383e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003842:	60fb      	str	r3, [r7, #12]

  int scaled = (int)((high_r-low_r)*(measured_angle-low_m)/(float)(high_m-low_m));
 8003844:	68fa      	ldr	r2, [r7, #12]
 8003846:	693b      	ldr	r3, [r7, #16]
 8003848:	1ad3      	subs	r3, r2, r3
 800384a:	6879      	ldr	r1, [r7, #4]
 800384c:	69ba      	ldr	r2, [r7, #24]
 800384e:	1a8a      	subs	r2, r1, r2
 8003850:	fb02 f303 	mul.w	r3, r2, r3
 8003854:	ee07 3a90 	vmov	s15, r3
 8003858:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800385c:	697a      	ldr	r2, [r7, #20]
 800385e:	69bb      	ldr	r3, [r7, #24]
 8003860:	1ad3      	subs	r3, r2, r3
 8003862:	ee07 3a90 	vmov	s15, r3
 8003866:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800386a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800386e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003872:	ee17 3a90 	vmov	r3, s15
 8003876:	60bb      	str	r3, [r7, #8]
  return (low_r + scaled);
 8003878:	693a      	ldr	r2, [r7, #16]
 800387a:	68bb      	ldr	r3, [r7, #8]
 800387c:	4413      	add	r3, r2
}
 800387e:	4618      	mov	r0, r3
 8003880:	3724      	adds	r7, #36	; 0x24
 8003882:	46bd      	mov	sp, r7
 8003884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003888:	4770      	bx	lr
 800388a:	bf00      	nop
 800388c:	08017e08 	.word	0x08017e08
 8003890:	08017de4 	.word	0x08017de4

08003894 <_get_pad_angle>:


int _get_pad_angle(int p1, int p2){
 8003894:	b590      	push	{r4, r7, lr}
 8003896:	b083      	sub	sp, #12
 8003898:	af00      	add	r7, sp, #0
 800389a:	6078      	str	r0, [r7, #4]
 800389c:	6039      	str	r1, [r7, #0]
    //return angle from 0 to 120 degrees between two pads given their two values
    if (p1 == 0) return 120;
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d101      	bne.n	80038a8 <_get_pad_angle+0x14>
 80038a4:	2378      	movs	r3, #120	; 0x78
 80038a6:	e02c      	b.n	8003902 <_get_pad_angle+0x6e>
    if (p2 == 0) return 0;
 80038a8:	683b      	ldr	r3, [r7, #0]
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d101      	bne.n	80038b2 <_get_pad_angle+0x1e>
 80038ae:	2300      	movs	r3, #0
 80038b0:	e027      	b.n	8003902 <_get_pad_angle+0x6e>
    return round(((float)(p2)/(float)(p1+p2))*120.0);
 80038b2:	683b      	ldr	r3, [r7, #0]
 80038b4:	ee07 3a90 	vmov	s15, r3
 80038b8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80038bc:	687a      	ldr	r2, [r7, #4]
 80038be:	683b      	ldr	r3, [r7, #0]
 80038c0:	4413      	add	r3, r2
 80038c2:	ee07 3a90 	vmov	s15, r3
 80038c6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80038ca:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80038ce:	ee16 0a90 	vmov	r0, s13
 80038d2:	f7fc fe11 	bl	80004f8 <__aeabi_f2d>
 80038d6:	f04f 0200 	mov.w	r2, #0
 80038da:	4b0c      	ldr	r3, [pc, #48]	; (800390c <_get_pad_angle+0x78>)
 80038dc:	f7fc fe64 	bl	80005a8 <__aeabi_dmul>
 80038e0:	4603      	mov	r3, r0
 80038e2:	460c      	mov	r4, r1
 80038e4:	ec44 3b17 	vmov	d7, r3, r4
 80038e8:	eeb0 0a47 	vmov.f32	s0, s14
 80038ec:	eef0 0a67 	vmov.f32	s1, s15
 80038f0:	f011 fd70 	bl	80153d4 <round>
 80038f4:	ec54 3b10 	vmov	r3, r4, d0
 80038f8:	4618      	mov	r0, r3
 80038fa:	4621      	mov	r1, r4
 80038fc:	f7fd f904 	bl	8000b08 <__aeabi_d2iz>
 8003900:	4603      	mov	r3, r0
}
 8003902:	4618      	mov	r0, r3
 8003904:	370c      	adds	r7, #12
 8003906:	46bd      	mov	sp, r7
 8003908:	bd90      	pop	{r4, r7, pc}
 800390a:	bf00      	nop
 800390c:	405e0000 	.word	0x405e0000

08003910 <_get_angle>:


int _get_angle(int* c) {
 8003910:	b580      	push	{r7, lr}
 8003912:	b08a      	sub	sp, #40	; 0x28
 8003914:	af00      	add	r7, sp, #0
 8003916:	6078      	str	r0, [r7, #4]
  //c[0] is proximity
  //60 min on clock, so 6 deg resolution
  //3 pads.  take top 2 values, map linearly to 120 degree slice.
  int angle = ANGLE_OFFSET;
 8003918:	2300      	movs	r3, #0
 800391a:	627b      	str	r3, [r7, #36]	; 0x24
  int warped_angle;

  if (c[1] > c[3] && c[2] > c[3]) { //first third, between 1 and 2
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	3304      	adds	r3, #4
 8003920:	681a      	ldr	r2, [r3, #0]
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	330c      	adds	r3, #12
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	429a      	cmp	r2, r3
 800392a:	dd20      	ble.n	800396e <_get_angle+0x5e>
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	3308      	adds	r3, #8
 8003930:	681a      	ldr	r2, [r3, #0]
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	330c      	adds	r3, #12
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	429a      	cmp	r2, r3
 800393a:	dd18      	ble.n	800396e <_get_angle+0x5e>
    int pos1 = c[1]-c[3];
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	3304      	adds	r3, #4
 8003940:	681a      	ldr	r2, [r3, #0]
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	330c      	adds	r3, #12
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	1ad3      	subs	r3, r2, r3
 800394a:	623b      	str	r3, [r7, #32]
    int pos2 = c[2]-c[3];
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	3308      	adds	r3, #8
 8003950:	681a      	ldr	r2, [r3, #0]
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	330c      	adds	r3, #12
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	1ad3      	subs	r3, r2, r3
 800395a:	61fb      	str	r3, [r7, #28]
    angle += _get_pad_angle(pos1, pos2);
 800395c:	69f9      	ldr	r1, [r7, #28]
 800395e:	6a38      	ldr	r0, [r7, #32]
 8003960:	f7ff ff98 	bl	8003894 <_get_pad_angle>
 8003964:	4602      	mov	r2, r0
 8003966:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003968:	4413      	add	r3, r2
 800396a:	627b      	str	r3, [r7, #36]	; 0x24
  if (c[1] > c[3] && c[2] > c[3]) { //first third, between 1 and 2
 800396c:	e042      	b.n	80039f4 <_get_angle+0xe4>
  }

  else if (c[2] > c[1] && c[3] > c[1]) { //second third, between 2 and 3
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	3308      	adds	r3, #8
 8003972:	681a      	ldr	r2, [r3, #0]
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	3304      	adds	r3, #4
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	429a      	cmp	r2, r3
 800397c:	dd21      	ble.n	80039c2 <_get_angle+0xb2>
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	330c      	adds	r3, #12
 8003982:	681a      	ldr	r2, [r3, #0]
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	3304      	adds	r3, #4
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	429a      	cmp	r2, r3
 800398c:	dd19      	ble.n	80039c2 <_get_angle+0xb2>
    int pos1 = c[2]-c[1];
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	3308      	adds	r3, #8
 8003992:	681a      	ldr	r2, [r3, #0]
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	3304      	adds	r3, #4
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	1ad3      	subs	r3, r2, r3
 800399c:	61bb      	str	r3, [r7, #24]
    int pos2 = c[3]-c[1];
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	330c      	adds	r3, #12
 80039a2:	681a      	ldr	r2, [r3, #0]
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	3304      	adds	r3, #4
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	1ad3      	subs	r3, r2, r3
 80039ac:	617b      	str	r3, [r7, #20]
    angle += _get_pad_angle(pos1, pos2) + 120;
 80039ae:	6979      	ldr	r1, [r7, #20]
 80039b0:	69b8      	ldr	r0, [r7, #24]
 80039b2:	f7ff ff6f 	bl	8003894 <_get_pad_angle>
 80039b6:	4603      	mov	r3, r0
 80039b8:	3378      	adds	r3, #120	; 0x78
 80039ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80039bc:	4413      	add	r3, r2
 80039be:	627b      	str	r3, [r7, #36]	; 0x24
  else if (c[2] > c[1] && c[3] > c[1]) { //second third, between 2 and 3
 80039c0:	e018      	b.n	80039f4 <_get_angle+0xe4>
  }

  else { //third third, between 3 and 1
    int pos1 = c[3]-c[2];
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	330c      	adds	r3, #12
 80039c6:	681a      	ldr	r2, [r3, #0]
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	3308      	adds	r3, #8
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	1ad3      	subs	r3, r2, r3
 80039d0:	613b      	str	r3, [r7, #16]
    int pos2 = c[1]-c[2];
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	3304      	adds	r3, #4
 80039d6:	681a      	ldr	r2, [r3, #0]
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	3308      	adds	r3, #8
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	1ad3      	subs	r3, r2, r3
 80039e0:	60fb      	str	r3, [r7, #12]
    angle += _get_pad_angle(pos1, pos2) + 240;
 80039e2:	68f9      	ldr	r1, [r7, #12]
 80039e4:	6938      	ldr	r0, [r7, #16]
 80039e6:	f7ff ff55 	bl	8003894 <_get_pad_angle>
 80039ea:	4603      	mov	r3, r0
 80039ec:	33f0      	adds	r3, #240	; 0xf0
 80039ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80039f0:	4413      	add	r3, r2
 80039f2:	627b      	str	r3, [r7, #36]	; 0x24
  }

  angle %= 360;
 80039f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039f6:	4a0b      	ldr	r2, [pc, #44]	; (8003a24 <_get_angle+0x114>)
 80039f8:	fb82 1203 	smull	r1, r2, r2, r3
 80039fc:	441a      	add	r2, r3
 80039fe:	1211      	asrs	r1, r2, #8
 8003a00:	17da      	asrs	r2, r3, #31
 8003a02:	1a8a      	subs	r2, r1, r2
 8003a04:	f44f 71b4 	mov.w	r1, #360	; 0x168
 8003a08:	fb01 f202 	mul.w	r2, r1, r2
 8003a0c:	1a9b      	subs	r3, r3, r2
 8003a0e:	627b      	str	r3, [r7, #36]	; 0x24
  warped_angle = _angle_correction(angle);
 8003a10:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003a12:	f7ff feef 	bl	80037f4 <_angle_correction>
 8003a16:	60b8      	str	r0, [r7, #8]

  return warped_angle;
 8003a18:	68bb      	ldr	r3, [r7, #8]
}
 8003a1a:	4618      	mov	r0, r3
 8003a1c:	3728      	adds	r7, #40	; 0x28
 8003a1e:	46bd      	mov	sp, r7
 8003a20:	bd80      	pop	{r7, pc}
 8003a22:	bf00      	nop
 8003a24:	b60b60b7 	.word	0xb60b60b7

08003a28 <_get_min>:


int _get_min(int* c) {
 8003a28:	b580      	push	{r7, lr}
 8003a2a:	b084      	sub	sp, #16
 8003a2c:	af00      	add	r7, sp, #0
 8003a2e:	6078      	str	r0, [r7, #4]
	int angle = _get_angle(c);
 8003a30:	6878      	ldr	r0, [r7, #4]
 8003a32:	f7ff ff6d 	bl	8003910 <_get_angle>
 8003a36:	60f8      	str	r0, [r7, #12]
	return angle/6;
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	4a04      	ldr	r2, [pc, #16]	; (8003a4c <_get_min+0x24>)
 8003a3c:	fb82 1203 	smull	r1, r2, r2, r3
 8003a40:	17db      	asrs	r3, r3, #31
 8003a42:	1ad3      	subs	r3, r2, r3
}
 8003a44:	4618      	mov	r0, r3
 8003a46:	3710      	adds	r7, #16
 8003a48:	46bd      	mov	sp, r7
 8003a4a:	bd80      	pop	{r7, pc}
 8003a4c:	2aaaaaab 	.word	0x2aaaaaab

08003a50 <_get_min_if_pressed>:


int _get_min_if_pressed(int* c){
 8003a50:	b580      	push	{r7, lr}
 8003a52:	b082      	sub	sp, #8
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	6078      	str	r0, [r7, #4]
	//return -1 if not pressed, otherwise return a logical minute value
	if (c[0] <= IQS_TOUCH_THRESH) return -1;
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	2b0a      	cmp	r3, #10
 8003a5e:	dc02      	bgt.n	8003a66 <_get_min_if_pressed+0x16>
 8003a60:	f04f 33ff 	mov.w	r3, #4294967295
 8003a64:	e003      	b.n	8003a6e <_get_min_if_pressed+0x1e>
	else return _get_min(c);
 8003a66:	6878      	ldr	r0, [r7, #4]
 8003a68:	f7ff ffde 	bl	8003a28 <_get_min>
 8003a6c:	4603      	mov	r3, r0
}
 8003a6e:	4618      	mov	r0, r3
 8003a70:	3708      	adds	r7, #8
 8003a72:	46bd      	mov	sp, r7
 8003a74:	bd80      	pop	{r7, pc}

08003a76 <iqs263_poll_raw>:


void iqs263_poll_raw(int* coords){
 8003a76:	b580      	push	{r7, lr}
 8003a78:	b086      	sub	sp, #24
 8003a7a:	af00      	add	r7, sp, #0
 8003a7c:	6078      	str	r0, [r7, #4]

  //uint16_t coords[4];

  uint8_t coords_raw[8];

  iqs263_read(0x06, coords_raw, 8);
 8003a7e:	f107 030c 	add.w	r3, r7, #12
 8003a82:	2208      	movs	r2, #8
 8003a84:	4619      	mov	r1, r3
 8003a86:	2006      	movs	r0, #6
 8003a88:	f000 f888 	bl	8003b9c <iqs263_read>

  for (int i=0; i<4; i++){
 8003a8c:	2300      	movs	r3, #0
 8003a8e:	617b      	str	r3, [r7, #20]
 8003a90:	e019      	b.n	8003ac6 <iqs263_poll_raw+0x50>
	  coords[i] = (coords_raw[2*i+1] << 8) | (coords_raw[2*i] & 0xFF);
 8003a92:	697b      	ldr	r3, [r7, #20]
 8003a94:	005b      	lsls	r3, r3, #1
 8003a96:	3301      	adds	r3, #1
 8003a98:	f107 0218 	add.w	r2, r7, #24
 8003a9c:	4413      	add	r3, r2
 8003a9e:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8003aa2:	021a      	lsls	r2, r3, #8
 8003aa4:	697b      	ldr	r3, [r7, #20]
 8003aa6:	005b      	lsls	r3, r3, #1
 8003aa8:	f107 0118 	add.w	r1, r7, #24
 8003aac:	440b      	add	r3, r1
 8003aae:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8003ab2:	4618      	mov	r0, r3
 8003ab4:	697b      	ldr	r3, [r7, #20]
 8003ab6:	009b      	lsls	r3, r3, #2
 8003ab8:	6879      	ldr	r1, [r7, #4]
 8003aba:	440b      	add	r3, r1
 8003abc:	4302      	orrs	r2, r0
 8003abe:	601a      	str	r2, [r3, #0]
  for (int i=0; i<4; i++){
 8003ac0:	697b      	ldr	r3, [r7, #20]
 8003ac2:	3301      	adds	r3, #1
 8003ac4:	617b      	str	r3, [r7, #20]
 8003ac6:	697b      	ldr	r3, [r7, #20]
 8003ac8:	2b03      	cmp	r3, #3
 8003aca:	dde2      	ble.n	8003a92 <iqs263_poll_raw+0x1c>
  }
  //c[0] is proximity

}
 8003acc:	bf00      	nop
 8003ace:	3718      	adds	r7, #24
 8003ad0:	46bd      	mov	sp, r7
 8003ad2:	bd80      	pop	{r7, pc}

08003ad4 <setup_iqs263>:


HAL_StatusTypeDef setup_iqs263() {
 8003ad4:	b580      	push	{r7, lr}
 8003ad6:	b086      	sub	sp, #24
 8003ad8:	af04      	add	r7, sp, #16

	uint8_t c;
	HAL_StatusTypeDef resp = HAL_ERROR;
 8003ada:	2301      	movs	r3, #1
 8003adc:	71fb      	strb	r3, [r7, #7]
	uint8_t out_data[5] = {0x00, 0x00, 0x00, 0x00, 0x00};
 8003ade:	463b      	mov	r3, r7
 8003ae0:	2200      	movs	r2, #0
 8003ae2:	601a      	str	r2, [r3, #0]
 8003ae4:	711a      	strb	r2, [r3, #4]

	//check product num
	while (resp == HAL_ERROR){
 8003ae6:	e00e      	b.n	8003b06 <setup_iqs263+0x32>
		resp = HAL_I2C_Mem_Read(&IQS_I2C_PORT, IQS_ADDR, 0x00, sizeof(uint8_t), &c, sizeof(uint8_t), HAL_MAX_DELAY);
 8003ae8:	f04f 33ff 	mov.w	r3, #4294967295
 8003aec:	9302      	str	r3, [sp, #8]
 8003aee:	2301      	movs	r3, #1
 8003af0:	9301      	str	r3, [sp, #4]
 8003af2:	1dbb      	adds	r3, r7, #6
 8003af4:	9300      	str	r3, [sp, #0]
 8003af6:	2301      	movs	r3, #1
 8003af8:	2200      	movs	r2, #0
 8003afa:	2188      	movs	r1, #136	; 0x88
 8003afc:	4826      	ldr	r0, [pc, #152]	; (8003b98 <setup_iqs263+0xc4>)
 8003afe:	f003 fcb3 	bl	8007468 <HAL_I2C_Mem_Read>
 8003b02:	4603      	mov	r3, r0
 8003b04:	71fb      	strb	r3, [r7, #7]
	while (resp == HAL_ERROR){
 8003b06:	79fb      	ldrb	r3, [r7, #7]
 8003b08:	2b01      	cmp	r3, #1
 8003b0a:	d0ed      	beq.n	8003ae8 <setup_iqs263+0x14>
	}

	if (c != 0x3C) {
 8003b0c:	79bb      	ldrb	r3, [r7, #6]
 8003b0e:	2b3c      	cmp	r3, #60	; 0x3c
 8003b10:	d001      	beq.n	8003b16 <setup_iqs263+0x42>
	  //ERROR - should read product code 0x3C
	  return HAL_ERROR;
 8003b12:	2301      	movs	r3, #1
 8003b14:	e03c      	b.n	8003b90 <setup_iqs263+0xbc>
	}

	HAL_Delay(100);
 8003b16:	2064      	movs	r0, #100	; 0x64
 8003b18:	f001 fd5b 	bl	80055d2 <HAL_Delay>


	//now write and read 0x0E to address 0x0D
	out_data[0] = 0x0E;
 8003b1c:	230e      	movs	r3, #14
 8003b1e:	703b      	strb	r3, [r7, #0]

	resp = HAL_ERROR;
 8003b20:	2301      	movs	r3, #1
 8003b22:	71fb      	strb	r3, [r7, #7]
	while (resp == HAL_ERROR){
 8003b24:	e00e      	b.n	8003b44 <setup_iqs263+0x70>
		  resp = HAL_I2C_Mem_Write(&IQS_I2C_PORT, IQS_ADDR, 0x0D, 1, out_data, 1, HAL_MAX_DELAY);
 8003b26:	f04f 33ff 	mov.w	r3, #4294967295
 8003b2a:	9302      	str	r3, [sp, #8]
 8003b2c:	2301      	movs	r3, #1
 8003b2e:	9301      	str	r3, [sp, #4]
 8003b30:	463b      	mov	r3, r7
 8003b32:	9300      	str	r3, [sp, #0]
 8003b34:	2301      	movs	r3, #1
 8003b36:	220d      	movs	r2, #13
 8003b38:	2188      	movs	r1, #136	; 0x88
 8003b3a:	4817      	ldr	r0, [pc, #92]	; (8003b98 <setup_iqs263+0xc4>)
 8003b3c:	f003 fb80 	bl	8007240 <HAL_I2C_Mem_Write>
 8003b40:	4603      	mov	r3, r0
 8003b42:	71fb      	strb	r3, [r7, #7]
	while (resp == HAL_ERROR){
 8003b44:	79fb      	ldrb	r3, [r7, #7]
 8003b46:	2b01      	cmp	r3, #1
 8003b48:	d0ed      	beq.n	8003b26 <setup_iqs263+0x52>
	}
	HAL_Delay(100);
 8003b4a:	2064      	movs	r0, #100	; 0x64
 8003b4c:	f001 fd41 	bl	80055d2 <HAL_Delay>
	}

	HAL_Delay(50);
	*/

	out_data[0]=0x00;
 8003b50:	2300      	movs	r3, #0
 8003b52:	703b      	strb	r3, [r7, #0]
	//time average filter coef in bits 5:4 (00 is slowest, 11 is fastest), counts filtering for noise in bits 1:0 (00 is no filter, 11 is slowest).
	out_data[1]=0b00001001;
 8003b54:	2309      	movs	r3, #9
 8003b56:	707b      	strb	r3, [r7, #1]
	//lets go into Low Power mode if we have a prolonged state.	Wake on  movement on CH3
	out_data[2]=0x00;
 8003b58:	2300      	movs	r3, #0
 8003b5a:	70bb      	strb	r3, [r7, #2]
	//out_data[2]=0b10001000;
	//lets disable turbo and only sample at fixed period 40Hz (given 2MHz clock)
	//out_data[3]=0x00;
	out_data[3]=0b00000110;
 8003b5c:	2306      	movs	r3, #6
 8003b5e:	70fb      	strb	r3, [r7, #3]
	out_data[4]=0x00;
 8003b60:	2300      	movs	r3, #0
 8003b62:	713b      	strb	r3, [r7, #4]

	resp = HAL_ERROR;
 8003b64:	2301      	movs	r3, #1
 8003b66:	71fb      	strb	r3, [r7, #7]
	while (resp == HAL_ERROR){
 8003b68:	e00e      	b.n	8003b88 <setup_iqs263+0xb4>
		  resp = HAL_I2C_Mem_Write(&IQS_I2C_PORT, IQS_ADDR, 0x09, 1, out_data, 5, HAL_MAX_DELAY);
 8003b6a:	f04f 33ff 	mov.w	r3, #4294967295
 8003b6e:	9302      	str	r3, [sp, #8]
 8003b70:	2305      	movs	r3, #5
 8003b72:	9301      	str	r3, [sp, #4]
 8003b74:	463b      	mov	r3, r7
 8003b76:	9300      	str	r3, [sp, #0]
 8003b78:	2301      	movs	r3, #1
 8003b7a:	2209      	movs	r2, #9
 8003b7c:	2188      	movs	r1, #136	; 0x88
 8003b7e:	4806      	ldr	r0, [pc, #24]	; (8003b98 <setup_iqs263+0xc4>)
 8003b80:	f003 fb5e 	bl	8007240 <HAL_I2C_Mem_Write>
 8003b84:	4603      	mov	r3, r0
 8003b86:	71fb      	strb	r3, [r7, #7]
	while (resp == HAL_ERROR){
 8003b88:	79fb      	ldrb	r3, [r7, #7]
 8003b8a:	2b01      	cmp	r3, #1
 8003b8c:	d0ed      	beq.n	8003b6a <setup_iqs263+0x96>
	while (resp == HAL_ERROR){
	    resp = HAL_I2C_Mem_Read(&IQS_I2C_PORT, IQS_ADDR, 0x09, 1, readback, 5, HAL_MAX_DELAY);
	}
	*/

    return HAL_OK;
 8003b8e:	2300      	movs	r3, #0
}
 8003b90:	4618      	mov	r0, r3
 8003b92:	3708      	adds	r7, #8
 8003b94:	46bd      	mov	sp, r7
 8003b96:	bd80      	pop	{r7, pc}
 8003b98:	200078f0 	.word	0x200078f0

08003b9c <iqs263_read>:

  return HAL_OK;

}

HAL_StatusTypeDef iqs263_read(uint8_t addr, uint8_t* buf, uint8_t size) {
 8003b9c:	b580      	push	{r7, lr}
 8003b9e:	b088      	sub	sp, #32
 8003ba0:	af04      	add	r7, sp, #16
 8003ba2:	4603      	mov	r3, r0
 8003ba4:	6039      	str	r1, [r7, #0]
 8003ba6:	71fb      	strb	r3, [r7, #7]
 8003ba8:	4613      	mov	r3, r2
 8003baa:	71bb      	strb	r3, [r7, #6]


  const uint16_t max_tries = 300;
 8003bac:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8003bb0:	817b      	strh	r3, [r7, #10]
  uint16_t current_tries = 0;
 8003bb2:	2300      	movs	r3, #0
 8003bb4:	81fb      	strh	r3, [r7, #14]

  HAL_StatusTypeDef resp = HAL_ERROR;
 8003bb6:	2301      	movs	r3, #1
 8003bb8:	737b      	strb	r3, [r7, #13]

  while (resp == HAL_ERROR && current_tries < max_tries){
 8003bba:	e014      	b.n	8003be6 <iqs263_read+0x4a>
    resp = HAL_I2C_Mem_Read(&IQS_I2C_PORT, IQS_ADDR, addr, 1, buf, size, HAL_MAX_DELAY);
 8003bbc:	79fb      	ldrb	r3, [r7, #7]
 8003bbe:	b299      	uxth	r1, r3
 8003bc0:	79bb      	ldrb	r3, [r7, #6]
 8003bc2:	b29b      	uxth	r3, r3
 8003bc4:	f04f 32ff 	mov.w	r2, #4294967295
 8003bc8:	9202      	str	r2, [sp, #8]
 8003bca:	9301      	str	r3, [sp, #4]
 8003bcc:	683b      	ldr	r3, [r7, #0]
 8003bce:	9300      	str	r3, [sp, #0]
 8003bd0:	2301      	movs	r3, #1
 8003bd2:	460a      	mov	r2, r1
 8003bd4:	2188      	movs	r1, #136	; 0x88
 8003bd6:	480d      	ldr	r0, [pc, #52]	; (8003c0c <iqs263_read+0x70>)
 8003bd8:	f003 fc46 	bl	8007468 <HAL_I2C_Mem_Read>
 8003bdc:	4603      	mov	r3, r0
 8003bde:	737b      	strb	r3, [r7, #13]
    current_tries++;
 8003be0:	89fb      	ldrh	r3, [r7, #14]
 8003be2:	3301      	adds	r3, #1
 8003be4:	81fb      	strh	r3, [r7, #14]
  while (resp == HAL_ERROR && current_tries < max_tries){
 8003be6:	7b7b      	ldrb	r3, [r7, #13]
 8003be8:	2b01      	cmp	r3, #1
 8003bea:	d103      	bne.n	8003bf4 <iqs263_read+0x58>
 8003bec:	89fa      	ldrh	r2, [r7, #14]
 8003bee:	897b      	ldrh	r3, [r7, #10]
 8003bf0:	429a      	cmp	r2, r3
 8003bf2:	d3e3      	bcc.n	8003bbc <iqs263_read+0x20>
  }

  if (current_tries >= max_tries) {
 8003bf4:	89fa      	ldrh	r2, [r7, #14]
 8003bf6:	897b      	ldrh	r3, [r7, #10]
 8003bf8:	429a      	cmp	r2, r3
 8003bfa:	d301      	bcc.n	8003c00 <iqs263_read+0x64>
	  return HAL_ERROR;
 8003bfc:	2301      	movs	r3, #1
 8003bfe:	e000      	b.n	8003c02 <iqs263_read+0x66>
  }

  return HAL_OK;
 8003c00:	2300      	movs	r3, #0

}
 8003c02:	4618      	mov	r0, r3
 8003c04:	3710      	adds	r7, #16
 8003c06:	46bd      	mov	sp, r7
 8003c08:	bd80      	pop	{r7, pc}
 8003c0a:	bf00      	nop
 8003c0c:	200078f0 	.word	0x200078f0

08003c10 <iqs263_get_min_if_pressed>:
	iqs263_poll_raw(coords);
	return _get_min(coords);
}


int iqs263_get_min_if_pressed(){
 8003c10:	b580      	push	{r7, lr}
 8003c12:	b084      	sub	sp, #16
 8003c14:	af00      	add	r7, sp, #0
	int* coords[4] = {0x0000, 0x0000, 0x0000, 0x0000};
 8003c16:	463b      	mov	r3, r7
 8003c18:	2200      	movs	r2, #0
 8003c1a:	601a      	str	r2, [r3, #0]
 8003c1c:	605a      	str	r2, [r3, #4]
 8003c1e:	609a      	str	r2, [r3, #8]
 8003c20:	60da      	str	r2, [r3, #12]
	iqs263_poll_raw(coords);
 8003c22:	463b      	mov	r3, r7
 8003c24:	4618      	mov	r0, r3
 8003c26:	f7ff ff26 	bl	8003a76 <iqs263_poll_raw>
	return _get_min_if_pressed(coords);
 8003c2a:	463b      	mov	r3, r7
 8003c2c:	4618      	mov	r0, r3
 8003c2e:	f7ff ff0f 	bl	8003a50 <_get_min_if_pressed>
 8003c32:	4603      	mov	r3, r0
}
 8003c34:	4618      	mov	r0, r3
 8003c36:	3710      	adds	r7, #16
 8003c38:	46bd      	mov	sp, r7
 8003c3a:	bd80      	pop	{r7, pc}

08003c3c <LL_EXTI_DisableIT_0_31>:
{
 8003c3c:	b480      	push	{r7}
 8003c3e:	b083      	sub	sp, #12
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 8003c44:	4b07      	ldr	r3, [pc, #28]	; (8003c64 <LL_EXTI_DisableIT_0_31+0x28>)
 8003c46:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	43db      	mvns	r3, r3
 8003c4e:	4905      	ldr	r1, [pc, #20]	; (8003c64 <LL_EXTI_DisableIT_0_31+0x28>)
 8003c50:	4013      	ands	r3, r2
 8003c52:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 8003c56:	bf00      	nop
 8003c58:	370c      	adds	r7, #12
 8003c5a:	46bd      	mov	sp, r7
 8003c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c60:	4770      	bx	lr
 8003c62:	bf00      	nop
 8003c64:	58000800 	.word	0x58000800

08003c68 <LL_EXTI_DisableIT_32_63>:
{
 8003c68:	b480      	push	{r7}
 8003c6a:	b083      	sub	sp, #12
 8003c6c:	af00      	add	r7, sp, #0
 8003c6e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR2, ExtiLine);
 8003c70:	4b07      	ldr	r3, [pc, #28]	; (8003c90 <LL_EXTI_DisableIT_32_63+0x28>)
 8003c72:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	43db      	mvns	r3, r3
 8003c7a:	4905      	ldr	r1, [pc, #20]	; (8003c90 <LL_EXTI_DisableIT_32_63+0x28>)
 8003c7c:	4013      	ands	r3, r2
 8003c7e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8003c82:	bf00      	nop
 8003c84:	370c      	adds	r7, #12
 8003c86:	46bd      	mov	sp, r7
 8003c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c8c:	4770      	bx	lr
 8003c8e:	bf00      	nop
 8003c90:	58000800 	.word	0x58000800

08003c94 <LL_RCC_HSE_SetCapacitorTuning>:
{
 8003c94:	b480      	push	{r7}
 8003c96:	b083      	sub	sp, #12
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	6078      	str	r0, [r7, #4]
  WRITE_REG(RCC->HSECR, HSE_CONTROL_UNLOCK_KEY);
 8003c9c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ca0:	4a0a      	ldr	r2, [pc, #40]	; (8003ccc <LL_RCC_HSE_SetCapacitorTuning+0x38>)
 8003ca2:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  MODIFY_REG(RCC->HSECR, RCC_HSECR_HSETUNE, Value << RCC_HSECR_HSETUNE_Pos);
 8003ca6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003caa:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003cae:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	021b      	lsls	r3, r3, #8
 8003cb6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003cba:	4313      	orrs	r3, r2
 8003cbc:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
}
 8003cc0:	bf00      	nop
 8003cc2:	370c      	adds	r7, #12
 8003cc4:	46bd      	mov	sp, r7
 8003cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cca:	4770      	bx	lr
 8003ccc:	cafecafe 	.word	0xcafecafe

08003cd0 <LL_RCC_LSE_SetDriveCapability>:
{
 8003cd0:	b480      	push	{r7}
 8003cd2:	b083      	sub	sp, #12
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8003cd8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003cdc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ce0:	f023 0218 	bic.w	r2, r3, #24
 8003ce4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	4313      	orrs	r3, r2
 8003cec:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8003cf0:	bf00      	nop
 8003cf2:	370c      	adds	r7, #12
 8003cf4:	46bd      	mov	sp, r7
 8003cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cfa:	4770      	bx	lr

08003cfc <LL_RCC_ForceBackupDomainReset>:
  * @brief  Force the Backup domain reset
  * @rmtoll BDCR         BDRST         LL_RCC_ForceBackupDomainReset
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ForceBackupDomainReset(void)
{
 8003cfc:	b480      	push	{r7}
 8003cfe:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8003d00:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d04:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d08:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003d0c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d10:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8003d14:	bf00      	nop
 8003d16:	46bd      	mov	sp, r7
 8003d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d1c:	4770      	bx	lr

08003d1e <LL_RCC_ReleaseBackupDomainReset>:
  * @brief  Release the Backup domain reset
  * @rmtoll BDCR         BDRST         LL_RCC_ReleaseBackupDomainReset
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ReleaseBackupDomainReset(void)
{
 8003d1e:	b480      	push	{r7}
 8003d20:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8003d22:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d2a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003d2e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d32:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8003d36:	bf00      	nop
 8003d38:	46bd      	mov	sp, r7
 8003d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d3e:	4770      	bx	lr

08003d40 <LL_RCC_IsActiveFlag_PINRST>:
  * @brief  Check if RCC flag Pin reset is set or not.
  * @rmtoll CSR          PINRSTF       LL_RCC_IsActiveFlag_PINRST
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PINRST(void)
{
 8003d40:	b480      	push	{r7}
 8003d42:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_PINRSTF) == (RCC_CSR_PINRSTF)) ? 1UL : 0UL);
 8003d44:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d48:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003d4c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003d50:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003d54:	d101      	bne.n	8003d5a <LL_RCC_IsActiveFlag_PINRST+0x1a>
 8003d56:	2301      	movs	r3, #1
 8003d58:	e000      	b.n	8003d5c <LL_RCC_IsActiveFlag_PINRST+0x1c>
 8003d5a:	2300      	movs	r3, #0
}
 8003d5c:	4618      	mov	r0, r3
 8003d5e:	46bd      	mov	sp, r7
 8003d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d64:	4770      	bx	lr

08003d66 <LL_RCC_IsActiveFlag_SFTRST>:
  * @brief  Check if RCC flag Software reset is set or not.
  * @rmtoll CSR          SFTRSTF       LL_RCC_IsActiveFlag_SFTRST
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SFTRST(void)
{
 8003d66:	b480      	push	{r7}
 8003d68:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_SFTRSTF) == (RCC_CSR_SFTRSTF)) ? 1UL : 0UL);
 8003d6a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d6e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003d72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d76:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003d7a:	d101      	bne.n	8003d80 <LL_RCC_IsActiveFlag_SFTRST+0x1a>
 8003d7c:	2301      	movs	r3, #1
 8003d7e:	e000      	b.n	8003d82 <LL_RCC_IsActiveFlag_SFTRST+0x1c>
 8003d80:	2300      	movs	r3, #0
}
 8003d82:	4618      	mov	r0, r3
 8003d84:	46bd      	mov	sp, r7
 8003d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d8a:	4770      	bx	lr

08003d8c <LL_AHB2_GRP1_EnableClock>:
{
 8003d8c:	b480      	push	{r7}
 8003d8e:	b085      	sub	sp, #20
 8003d90:	af00      	add	r7, sp, #0
 8003d92:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8003d94:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d98:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003d9a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	4313      	orrs	r3, r2
 8003da2:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8003da4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003da8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	4013      	ands	r3, r2
 8003dae:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003db0:	68fb      	ldr	r3, [r7, #12]
}
 8003db2:	bf00      	nop
 8003db4:	3714      	adds	r7, #20
 8003db6:	46bd      	mov	sp, r7
 8003db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dbc:	4770      	bx	lr

08003dbe <LL_AHB3_GRP1_EnableClock>:
{
 8003dbe:	b480      	push	{r7}
 8003dc0:	b085      	sub	sp, #20
 8003dc2:	af00      	add	r7, sp, #0
 8003dc4:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 8003dc6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003dca:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003dcc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	4313      	orrs	r3, r2
 8003dd4:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8003dd6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003dda:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	4013      	ands	r3, r2
 8003de0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003de2:	68fb      	ldr	r3, [r7, #12]
}
 8003de4:	bf00      	nop
 8003de6:	3714      	adds	r7, #20
 8003de8:	46bd      	mov	sp, r7
 8003dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dee:	4770      	bx	lr

08003df0 <LL_C1_IPCC_DisableTransmitChannel>:
{
 8003df0:	b480      	push	{r7}
 8003df2:	b083      	sub	sp, #12
 8003df4:	af00      	add	r7, sp, #0
 8003df6:	6078      	str	r0, [r7, #4]
 8003df8:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	685a      	ldr	r2, [r3, #4]
 8003dfe:	683b      	ldr	r3, [r7, #0]
 8003e00:	041b      	lsls	r3, r3, #16
 8003e02:	431a      	orrs	r2, r3
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	605a      	str	r2, [r3, #4]
}
 8003e08:	bf00      	nop
 8003e0a:	370c      	adds	r7, #12
 8003e0c:	46bd      	mov	sp, r7
 8003e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e12:	4770      	bx	lr

08003e14 <LL_C1_IPCC_DisableReceiveChannel>:
{
 8003e14:	b480      	push	{r7}
 8003e16:	b083      	sub	sp, #12
 8003e18:	af00      	add	r7, sp, #0
 8003e1a:	6078      	str	r0, [r7, #4]
 8003e1c:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel);
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	685a      	ldr	r2, [r3, #4]
 8003e22:	683b      	ldr	r3, [r7, #0]
 8003e24:	431a      	orrs	r2, r3
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	605a      	str	r2, [r3, #4]
}
 8003e2a:	bf00      	nop
 8003e2c:	370c      	adds	r7, #12
 8003e2e:	46bd      	mov	sp, r7
 8003e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e34:	4770      	bx	lr

08003e36 <LL_C2_IPCC_DisableTransmitChannel>:
{
 8003e36:	b480      	push	{r7}
 8003e38:	b083      	sub	sp, #12
 8003e3a:	af00      	add	r7, sp, #0
 8003e3c:	6078      	str	r0, [r7, #4]
 8003e3e:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C2MR, Channel << (IPCC_C2MR_CH1FM_Pos));
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	695a      	ldr	r2, [r3, #20]
 8003e44:	683b      	ldr	r3, [r7, #0]
 8003e46:	041b      	lsls	r3, r3, #16
 8003e48:	431a      	orrs	r2, r3
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	615a      	str	r2, [r3, #20]
}
 8003e4e:	bf00      	nop
 8003e50:	370c      	adds	r7, #12
 8003e52:	46bd      	mov	sp, r7
 8003e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e58:	4770      	bx	lr

08003e5a <LL_C2_IPCC_DisableReceiveChannel>:
{
 8003e5a:	b480      	push	{r7}
 8003e5c:	b083      	sub	sp, #12
 8003e5e:	af00      	add	r7, sp, #0
 8003e60:	6078      	str	r0, [r7, #4]
 8003e62:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C2MR, Channel);
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	695a      	ldr	r2, [r3, #20]
 8003e68:	683b      	ldr	r3, [r7, #0]
 8003e6a:	431a      	orrs	r2, r3
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	615a      	str	r2, [r3, #20]
}
 8003e70:	bf00      	nop
 8003e72:	370c      	adds	r7, #12
 8003e74:	46bd      	mov	sp, r7
 8003e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e7a:	4770      	bx	lr

08003e7c <LL_C1_IPCC_ClearFlag_CHx>:
{
 8003e7c:	b480      	push	{r7}
 8003e7e:	b083      	sub	sp, #12
 8003e80:	af00      	add	r7, sp, #0
 8003e82:	6078      	str	r0, [r7, #4]
 8003e84:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	683a      	ldr	r2, [r7, #0]
 8003e8a:	609a      	str	r2, [r3, #8]
}
 8003e8c:	bf00      	nop
 8003e8e:	370c      	adds	r7, #12
 8003e90:	46bd      	mov	sp, r7
 8003e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e96:	4770      	bx	lr

08003e98 <LL_C2_IPCC_ClearFlag_CHx>:
{
 8003e98:	b480      	push	{r7}
 8003e9a:	b083      	sub	sp, #12
 8003e9c:	af00      	add	r7, sp, #0
 8003e9e:	6078      	str	r0, [r7, #4]
 8003ea0:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C2SCR, Channel);
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	683a      	ldr	r2, [r7, #0]
 8003ea6:	619a      	str	r2, [r3, #24]
}
 8003ea8:	bf00      	nop
 8003eaa:	370c      	adds	r7, #12
 8003eac:	46bd      	mov	sp, r7
 8003eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb2:	4770      	bx	lr

08003eb4 <LL_LPM_EnableSleep>:
  * @brief  Processor uses sleep as its low power mode
  * @rmtoll SCB_SCR      SLEEPDEEP     LL_LPM_EnableSleep
  * @retval None
  */
__STATIC_INLINE void LL_LPM_EnableSleep(void)
{
 8003eb4:	b480      	push	{r7}
 8003eb6:	af00      	add	r7, sp, #0
  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8003eb8:	4b05      	ldr	r3, [pc, #20]	; (8003ed0 <LL_LPM_EnableSleep+0x1c>)
 8003eba:	691b      	ldr	r3, [r3, #16]
 8003ebc:	4a04      	ldr	r2, [pc, #16]	; (8003ed0 <LL_LPM_EnableSleep+0x1c>)
 8003ebe:	f023 0304 	bic.w	r3, r3, #4
 8003ec2:	6113      	str	r3, [r2, #16]
}
 8003ec4:	bf00      	nop
 8003ec6:	46bd      	mov	sp, r7
 8003ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ecc:	4770      	bx	lr
 8003ece:	bf00      	nop
 8003ed0:	e000ed00 	.word	0xe000ed00

08003ed4 <main>:
static void Reset_BackupDomain( void );
static void Init_Exti( void );
static void Config_HSE(void);

int main(void)
{
 8003ed4:	b580      	push	{r7, lr}
 8003ed6:	af00      	add	r7, sp, #0
  /**
   * The OPTVERR flag is wrongly set at power on
   * It shall be cleared before using any HAL_FLASH_xxx() api
   */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8003ed8:	4b4b      	ldr	r3, [pc, #300]	; (8004008 <main+0x134>)
 8003eda:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8003ede:	611a      	str	r2, [r3, #16]


  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003ee0:	f002 fb8c 	bl	80065fc <HAL_Init>

  /* USER CODE BEGIN Init */
  Reset_Device();
 8003ee4:	f001 fb27 	bl	8005536 <Reset_Device>
  Config_HSE();
 8003ee8:	f001 fb11 	bl	800550e <Config_HSE>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003eec:	f000 f8dc 	bl	80040a8 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  PeriphClock_Config();
 8003ef0:	f001 fb06 	bl	8005500 <PeriphClock_Config>
  Init_Exti(); /**< Configure the system Power Mode */
 8003ef4:	f001 fb61 	bl	80055ba <Init_Exti>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003ef8:	f000 faea 	bl	80044d0 <MX_GPIO_Init>
  MX_I2C1_Init();
 8003efc:	f000 f954 	bl	80041a8 <MX_I2C1_Init>
  MX_SPI1_Init();
 8003f00:	f000 f9f8 	bl	80042f4 <MX_SPI1_Init>
  MX_RF_Init();
 8003f04:	f000 f990 	bl	8004228 <MX_RF_Init>
  MX_RTC_Init();
 8003f08:	f000 f996 	bl	8004238 <MX_RTC_Init>
  MX_TIM1_Init();
 8003f0c:	f000 fa30 	bl	8004370 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

  GlobalState_Init();
 8003f10:	f000 fb40 	bl	8004594 <GlobalState_Init>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8003f14:	f00a fab8 	bl	800e488 <osKernelInitialize>

  /* USER CODE BEGIN RTOS_MUTEX */
    /* creation of rtcMutex */
    rtcMutexHandle = osMutexNew(&rtcMutex_attributes);
 8003f18:	483c      	ldr	r0, [pc, #240]	; (800400c <main+0x138>)
 8003f1a:	f00a fce9 	bl	800e8f0 <osMutexNew>
 8003f1e:	4602      	mov	r2, r0
 8003f20:	4b3b      	ldr	r3, [pc, #236]	; (8004010 <main+0x13c>)
 8003f22:	601a      	str	r2, [r3, #0]

    /* creation of timeBoundMutex */
    timeBoundMutexHandle = osMutexNew(&timeBoundMutex_attributes);
 8003f24:	483b      	ldr	r0, [pc, #236]	; (8004014 <main+0x140>)
 8003f26:	f00a fce3 	bl	800e8f0 <osMutexNew>
 8003f2a:	4602      	mov	r2, r0
 8003f2c:	4b3a      	ldr	r3, [pc, #232]	; (8004018 <main+0x144>)
 8003f2e:	601a      	str	r2, [r3, #0]

    /* creation of lastSeenMutex */
    lastSeenMutexHandle = osMutexNew(&lastSeenMutex_attributes);
 8003f30:	483a      	ldr	r0, [pc, #232]	; (800401c <main+0x148>)
 8003f32:	f00a fcdd 	bl	800e8f0 <osMutexNew>
 8003f36:	4602      	mov	r2, r0
 8003f38:	4b39      	ldr	r3, [pc, #228]	; (8004020 <main+0x14c>)
 8003f3a:	601a      	str	r2, [r3, #0]

    /* creation of timeEstimateMutex */
    timeEstimateMutexHandle = osMutexNew(&timeEstimateMutex_attributes);
 8003f3c:	4839      	ldr	r0, [pc, #228]	; (8004024 <main+0x150>)
 8003f3e:	f00a fcd7 	bl	800e8f0 <osMutexNew>
 8003f42:	4602      	mov	r2, r0
 8003f44:	4b38      	ldr	r3, [pc, #224]	; (8004028 <main+0x154>)
 8003f46:	601a      	str	r2, [r3, #0]

    /* creation of conditionMutex */
    conditionMutexHandle = osMutexNew(&conditionMutex_attributes);
 8003f48:	4838      	ldr	r0, [pc, #224]	; (800402c <main+0x158>)
 8003f4a:	f00a fcd1 	bl	800e8f0 <osMutexNew>
 8003f4e:	4602      	mov	r2, r0
 8003f50:	4b37      	ldr	r3, [pc, #220]	; (8004030 <main+0x15c>)
 8003f52:	601a      	str	r2, [r3, #0]

    /* creation of modeMutex */
    modeMutexHandle = osMutexNew(&modeMutex_attributes);
 8003f54:	4837      	ldr	r0, [pc, #220]	; (8004034 <main+0x160>)
 8003f56:	f00a fccb 	bl	800e8f0 <osMutexNew>
 8003f5a:	4602      	mov	r2, r0
 8003f5c:	4b36      	ldr	r3, [pc, #216]	; (8004038 <main+0x164>)
 8003f5e:	601a      	str	r2, [r3, #0]

    /* creation of surveyMutex */
    surveyMutexHandle = osMutexNew(&surveyMutex_attributes);
 8003f60:	4836      	ldr	r0, [pc, #216]	; (800403c <main+0x168>)
 8003f62:	f00a fcc5 	bl	800e8f0 <osMutexNew>
 8003f66:	4602      	mov	r2, r0
 8003f68:	4b35      	ldr	r3, [pc, #212]	; (8004040 <main+0x16c>)
 8003f6a:	601a      	str	r2, [r3, #0]

  /* USER CODE END RTOS_MUTEX */

  /* USER CODE BEGIN RTOS_QUEUES */
      /* creation of bleTXqueue */
      bleTXqueueHandle = osMessageQueueNew (16, sizeof(BLETX_Queue_t), &bleTXqueue_attributes);
 8003f6c:	4a35      	ldr	r2, [pc, #212]	; (8004044 <main+0x170>)
 8003f6e:	2104      	movs	r1, #4
 8003f70:	2010      	movs	r0, #16
 8003f72:	f00a ff61 	bl	800ee38 <osMessageQueueNew>
 8003f76:	4602      	mov	r2, r0
 8003f78:	4b33      	ldr	r3, [pc, #204]	; (8004048 <main+0x174>)
 8003f7a:	601a      	str	r2, [r3, #0]

      /* creation of bleRXqueue */
      bleRXqueueHandle = osMessageQueueNew (16, sizeof(P2PS_STM_Data_t *), &bleRXqueue_attributes);
 8003f7c:	4a33      	ldr	r2, [pc, #204]	; (800404c <main+0x178>)
 8003f7e:	2104      	movs	r1, #4
 8003f80:	2010      	movs	r0, #16
 8003f82:	f00a ff59 	bl	800ee38 <osMessageQueueNew>
 8003f86:	4602      	mov	r2, r0
 8003f88:	4b31      	ldr	r3, [pc, #196]	; (8004050 <main+0x17c>)
 8003f8a:	601a      	str	r2, [r3, #0]

  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
        /* creation of uiControl */
        uiControlHandle = osThreadNew(startUIControl, NULL, &uiControl_attributes);
 8003f8c:	4a31      	ldr	r2, [pc, #196]	; (8004054 <main+0x180>)
 8003f8e:	2100      	movs	r1, #0
 8003f90:	4831      	ldr	r0, [pc, #196]	; (8004058 <main+0x184>)
 8003f92:	f00a fae3 	bl	800e55c <osThreadNew>
 8003f96:	4602      	mov	r2, r0
 8003f98:	4b30      	ldr	r3, [pc, #192]	; (800405c <main+0x188>)
 8003f9a:	601a      	str	r2, [r3, #0]

        /* creation of ESMMain */
        esmMainHandle = osThreadNew(startESMMain, NULL, &esmMain_attributes);
 8003f9c:	4a30      	ldr	r2, [pc, #192]	; (8004060 <main+0x18c>)
 8003f9e:	2100      	movs	r1, #0
 8003fa0:	4830      	ldr	r0, [pc, #192]	; (8004064 <main+0x190>)
 8003fa2:	f00a fadb 	bl	800e55c <osThreadNew>
 8003fa6:	4602      	mov	r2, r0
 8003fa8:	4b2f      	ldr	r3, [pc, #188]	; (8004068 <main+0x194>)
 8003faa:	601a      	str	r2, [r3, #0]

        /* creation of buttonPress */
        buttonPressHandle = osThreadNew(startButtonPress, NULL, &buttonPress_attributes);
 8003fac:	4a2f      	ldr	r2, [pc, #188]	; (800406c <main+0x198>)
 8003fae:	2100      	movs	r1, #0
 8003fb0:	482f      	ldr	r0, [pc, #188]	; (8004070 <main+0x19c>)
 8003fb2:	f00a fad3 	bl	800e55c <osThreadNew>
 8003fb6:	4602      	mov	r2, r0
 8003fb8:	4b2e      	ldr	r3, [pc, #184]	; (8004074 <main+0x1a0>)
 8003fba:	601a      	str	r2, [r3, #0]

        /* creation of alert */
        alertHandle = osThreadNew(startAlert, NULL, &alert_attributes);
 8003fbc:	4a2e      	ldr	r2, [pc, #184]	; (8004078 <main+0x1a4>)
 8003fbe:	2100      	movs	r1, #0
 8003fc0:	482e      	ldr	r0, [pc, #184]	; (800407c <main+0x1a8>)
 8003fc2:	f00a facb 	bl	800e55c <osThreadNew>
 8003fc6:	4602      	mov	r2, r0
 8003fc8:	4b2d      	ldr	r3, [pc, #180]	; (8004080 <main+0x1ac>)
 8003fca:	601a      	str	r2, [r3, #0]

        /* creation of conditionsPoll */
        conditionsPollHandle = osThreadNew(startConditionsPoll, NULL, &conditionsPoll_attributes);
 8003fcc:	4a2d      	ldr	r2, [pc, #180]	; (8004084 <main+0x1b0>)
 8003fce:	2100      	movs	r1, #0
 8003fd0:	482d      	ldr	r0, [pc, #180]	; (8004088 <main+0x1b4>)
 8003fd2:	f00a fac3 	bl	800e55c <osThreadNew>
 8003fd6:	4602      	mov	r2, r0
 8003fd8:	4b2c      	ldr	r3, [pc, #176]	; (800408c <main+0x1b8>)
 8003fda:	601a      	str	r2, [r3, #0]

        /* creation of bleTX */
        bleTXHandle = osThreadNew(startBLETX, NULL, &bleTX_attributes);
 8003fdc:	4a2c      	ldr	r2, [pc, #176]	; (8004090 <main+0x1bc>)
 8003fde:	2100      	movs	r1, #0
 8003fe0:	482c      	ldr	r0, [pc, #176]	; (8004094 <main+0x1c0>)
 8003fe2:	f00a fabb 	bl	800e55c <osThreadNew>
 8003fe6:	4602      	mov	r2, r0
 8003fe8:	4b2b      	ldr	r3, [pc, #172]	; (8004098 <main+0x1c4>)
 8003fea:	601a      	str	r2, [r3, #0]

        /* creation of bleRX */
        bleRXHandle = osThreadNew(startBLERX, NULL, &bleRX_attributes);
 8003fec:	4a2b      	ldr	r2, [pc, #172]	; (800409c <main+0x1c8>)
 8003fee:	2100      	movs	r1, #0
 8003ff0:	482b      	ldr	r0, [pc, #172]	; (80040a0 <main+0x1cc>)
 8003ff2:	f00a fab3 	bl	800e55c <osThreadNew>
 8003ff6:	4602      	mov	r2, r0
 8003ff8:	4b2a      	ldr	r3, [pc, #168]	; (80040a4 <main+0x1d0>)
 8003ffa:	601a      	str	r2, [r3, #0]


  /* Init code for STM32_WPAN */
  APPE_Init();
 8003ffc:	f7fd ff9c 	bl	8001f38 <APPE_Init>
  /* Start scheduler */
  osKernelStart();
 8004000:	f00a fa76 	bl	800e4f0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  while (1){}
 8004004:	e7fe      	b.n	8004004 <main+0x130>
 8004006:	bf00      	nop
 8004008:	58004000 	.word	0x58004000
 800400c:	08017f8c 	.word	0x08017f8c
 8004010:	200077c0 	.word	0x200077c0
 8004014:	08017f9c 	.word	0x08017f9c
 8004018:	200078ec 	.word	0x200078ec
 800401c:	08017fac 	.word	0x08017fac
 8004020:	20007a1c 	.word	0x20007a1c
 8004024:	08017fbc 	.word	0x08017fbc
 8004028:	20007948 	.word	0x20007948
 800402c:	08017fcc 	.word	0x08017fcc
 8004030:	2000793c 	.word	0x2000793c
 8004034:	08017fdc 	.word	0x08017fdc
 8004038:	2000794c 	.word	0x2000794c
 800403c:	08017fec 	.word	0x08017fec
 8004040:	20007940 	.word	0x20007940
 8004044:	08017f5c 	.word	0x08017f5c
 8004048:	200079ac 	.word	0x200079ac
 800404c:	08017f74 	.word	0x08017f74
 8004050:	20007790 	.word	0x20007790
 8004054:	08017e60 	.word	0x08017e60
 8004058:	080046dd 	.word	0x080046dd
 800405c:	200079b0 	.word	0x200079b0
 8004060:	08017e84 	.word	0x08017e84
 8004064:	08004d99 	.word	0x08004d99
 8004068:	200079b4 	.word	0x200079b4
 800406c:	08017ea8 	.word	0x08017ea8
 8004070:	08005049 	.word	0x08005049
 8004074:	200078e4 	.word	0x200078e4
 8004078:	08017ecc 	.word	0x08017ecc
 800407c:	08005199 	.word	0x08005199
 8004080:	200078e8 	.word	0x200078e8
 8004084:	08017ef0 	.word	0x08017ef0
 8004088:	08005281 	.word	0x08005281
 800408c:	2000795c 	.word	0x2000795c
 8004090:	08017f14 	.word	0x08017f14
 8004094:	080053cd 	.word	0x080053cd
 8004098:	20007944 	.word	0x20007944
 800409c:	08017f38 	.word	0x08017f38
 80040a0:	080053fd 	.word	0x080053fd
 80040a4:	20007958 	.word	0x20007958

080040a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80040a8:	b580      	push	{r7, lr}
 80040aa:	b0ae      	sub	sp, #184	; 0xb8
 80040ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80040ae:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80040b2:	2248      	movs	r2, #72	; 0x48
 80040b4:	2100      	movs	r1, #0
 80040b6:	4618      	mov	r0, r3
 80040b8:	f00e fc31 	bl	801291e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80040bc:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80040c0:	2200      	movs	r2, #0
 80040c2:	601a      	str	r2, [r3, #0]
 80040c4:	605a      	str	r2, [r3, #4]
 80040c6:	609a      	str	r2, [r3, #8]
 80040c8:	60da      	str	r2, [r3, #12]
 80040ca:	611a      	str	r2, [r3, #16]
 80040cc:	615a      	str	r2, [r3, #20]
 80040ce:	619a      	str	r2, [r3, #24]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80040d0:	1d3b      	adds	r3, r7, #4
 80040d2:	2250      	movs	r2, #80	; 0x50
 80040d4:	2100      	movs	r1, #0
 80040d6:	4618      	mov	r0, r3
 80040d8:	f00e fc21 	bl	801291e <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80040dc:	f003 fdfe 	bl	8007cdc <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80040e0:	2000      	movs	r0, #0
 80040e2:	f7ff fdf5 	bl	8003cd0 <LL_RCC_LSE_SetDriveCapability>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80040e6:	4b2f      	ldr	r3, [pc, #188]	; (80041a4 <SystemClock_Config+0xfc>)
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80040ee:	4a2d      	ldr	r2, [pc, #180]	; (80041a4 <SystemClock_Config+0xfc>)
 80040f0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80040f4:	6013      	str	r3, [r2, #0]
 80040f6:	4b2b      	ldr	r3, [pc, #172]	; (80041a4 <SystemClock_Config+0xfc>)
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80040fe:	603b      	str	r3, [r7, #0]
 8004100:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 8004102:	2307      	movs	r3, #7
 8004104:	673b      	str	r3, [r7, #112]	; 0x70
                              |RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8004106:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800410a:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800410c:	2301      	movs	r3, #1
 800410e:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8004110:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004114:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8004116:	2340      	movs	r3, #64	; 0x40
 8004118:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800411c:	2300      	movs	r3, #0
 800411e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004122:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8004126:	4618      	mov	r0, r3
 8004128:	f004 f978 	bl	800841c <HAL_RCC_OscConfig>
 800412c:	4603      	mov	r3, r0
 800412e:	2b00      	cmp	r3, #0
 8004130:	d001      	beq.n	8004136 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8004132:	f001 fa85 	bl	8005640 <Error_Handler>
  }
  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 8004136:	236f      	movs	r3, #111	; 0x6f
 8004138:	657b      	str	r3, [r7, #84]	; 0x54
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 800413a:	2302      	movs	r3, #2
 800413c:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800413e:	2300      	movs	r3, #0
 8004140:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8004142:	2300      	movs	r3, #0
 8004144:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8004146:	2300      	movs	r3, #0
 8004148:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 800414a:	2300      	movs	r3, #0
 800414c:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 800414e:	2300      	movs	r3, #0
 8004150:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8004152:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8004156:	2101      	movs	r1, #1
 8004158:	4618      	mov	r0, r3
 800415a:	f004 fceb 	bl	8008b34 <HAL_RCC_ClockConfig>
 800415e:	4603      	mov	r3, r0
 8004160:	2b00      	cmp	r3, #0
 8004162:	d001      	beq.n	8004168 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8004164:	f001 fa6c 	bl	8005640 <Error_Handler>
  }
  /** Initializes the peripherals clocks
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS|RCC_PERIPHCLK_RFWAKEUP
 8004168:	f643 0303 	movw	r3, #14339	; 0x3803
 800416c:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USART1
                              |RCC_PERIPHCLK_LPUART1;
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800416e:	2300      	movs	r3, #0
 8004170:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8004172:	2300      	movs	r3, #0
 8004174:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8004176:	f44f 7380 	mov.w	r3, #256	; 0x100
 800417a:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInitStruct.RFWakeUpClockSelection = RCC_RFWKPCLKSOURCE_LSE;
 800417c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004180:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSE;
 8004182:	2302      	movs	r3, #2
 8004184:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE1;
 8004186:	2310      	movs	r3, #16
 8004188:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800418a:	1d3b      	adds	r3, r7, #4
 800418c:	4618      	mov	r0, r3
 800418e:	f005 f92c 	bl	80093ea <HAL_RCCEx_PeriphCLKConfig>
 8004192:	4603      	mov	r3, r0
 8004194:	2b00      	cmp	r3, #0
 8004196:	d001      	beq.n	800419c <SystemClock_Config+0xf4>
  {
    Error_Handler();
 8004198:	f001 fa52 	bl	8005640 <Error_Handler>
  LL_PWR_SMPS_SetOutputVoltageLevel(LL_PWR_SMPS_OUTPUT_VOLTAGE_1V40);
  LL_PWR_SMPS_Enable();
#endif

  /* USER CODE END Smps */
}
 800419c:	bf00      	nop
 800419e:	37b8      	adds	r7, #184	; 0xb8
 80041a0:	46bd      	mov	sp, r7
 80041a2:	bd80      	pop	{r7, pc}
 80041a4:	58000400 	.word	0x58000400

080041a8 <MX_I2C1_Init>:

static void MX_I2C1_Init(void)
{
 80041a8:	b580      	push	{r7, lr}
 80041aa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80041ac:	4b1b      	ldr	r3, [pc, #108]	; (800421c <MX_I2C1_Init+0x74>)
 80041ae:	4a1c      	ldr	r2, [pc, #112]	; (8004220 <MX_I2C1_Init+0x78>)
 80041b0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00300F38;
 80041b2:	4b1a      	ldr	r3, [pc, #104]	; (800421c <MX_I2C1_Init+0x74>)
 80041b4:	4a1b      	ldr	r2, [pc, #108]	; (8004224 <MX_I2C1_Init+0x7c>)
 80041b6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80041b8:	4b18      	ldr	r3, [pc, #96]	; (800421c <MX_I2C1_Init+0x74>)
 80041ba:	2200      	movs	r2, #0
 80041bc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80041be:	4b17      	ldr	r3, [pc, #92]	; (800421c <MX_I2C1_Init+0x74>)
 80041c0:	2201      	movs	r2, #1
 80041c2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80041c4:	4b15      	ldr	r3, [pc, #84]	; (800421c <MX_I2C1_Init+0x74>)
 80041c6:	2200      	movs	r2, #0
 80041c8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80041ca:	4b14      	ldr	r3, [pc, #80]	; (800421c <MX_I2C1_Init+0x74>)
 80041cc:	2200      	movs	r2, #0
 80041ce:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80041d0:	4b12      	ldr	r3, [pc, #72]	; (800421c <MX_I2C1_Init+0x74>)
 80041d2:	2200      	movs	r2, #0
 80041d4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80041d6:	4b11      	ldr	r3, [pc, #68]	; (800421c <MX_I2C1_Init+0x74>)
 80041d8:	2200      	movs	r2, #0
 80041da:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80041dc:	4b0f      	ldr	r3, [pc, #60]	; (800421c <MX_I2C1_Init+0x74>)
 80041de:	2200      	movs	r2, #0
 80041e0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80041e2:	480e      	ldr	r0, [pc, #56]	; (800421c <MX_I2C1_Init+0x74>)
 80041e4:	f002 fdb2 	bl	8006d4c <HAL_I2C_Init>
 80041e8:	4603      	mov	r3, r0
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d001      	beq.n	80041f2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80041ee:	f001 fa27 	bl	8005640 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80041f2:	2100      	movs	r1, #0
 80041f4:	4809      	ldr	r0, [pc, #36]	; (800421c <MX_I2C1_Init+0x74>)
 80041f6:	f003 fcd9 	bl	8007bac <HAL_I2CEx_ConfigAnalogFilter>
 80041fa:	4603      	mov	r3, r0
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d001      	beq.n	8004204 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8004200:	f001 fa1e 	bl	8005640 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8004204:	2100      	movs	r1, #0
 8004206:	4805      	ldr	r0, [pc, #20]	; (800421c <MX_I2C1_Init+0x74>)
 8004208:	f003 fd1b 	bl	8007c42 <HAL_I2CEx_ConfigDigitalFilter>
 800420c:	4603      	mov	r3, r0
 800420e:	2b00      	cmp	r3, #0
 8004210:	d001      	beq.n	8004216 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8004212:	f001 fa15 	bl	8005640 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8004216:	bf00      	nop
 8004218:	bd80      	pop	{r7, pc}
 800421a:	bf00      	nop
 800421c:	200078f0 	.word	0x200078f0
 8004220:	40005400 	.word	0x40005400
 8004224:	00300f38 	.word	0x00300f38

08004228 <MX_RF_Init>:
  * @brief RF Initialization Function
  * @param None
  * @retval None
  */
static void MX_RF_Init(void)
{
 8004228:	b480      	push	{r7}
 800422a:	af00      	add	r7, sp, #0
  /* USER CODE END RF_Init 1 */
  /* USER CODE BEGIN RF_Init 2 */

  /* USER CODE END RF_Init 2 */

}
 800422c:	bf00      	nop
 800422e:	46bd      	mov	sp, r7
 8004230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004234:	4770      	bx	lr
	...

08004238 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8004238:	b580      	push	{r7, lr}
 800423a:	b086      	sub	sp, #24
 800423c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800423e:	4b2b      	ldr	r3, [pc, #172]	; (80042ec <MX_RTC_Init+0xb4>)
 8004240:	4a2b      	ldr	r2, [pc, #172]	; (80042f0 <MX_RTC_Init+0xb8>)
 8004242:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8004244:	4b29      	ldr	r3, [pc, #164]	; (80042ec <MX_RTC_Init+0xb4>)
 8004246:	2200      	movs	r2, #0
 8004248:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 800424a:	4b28      	ldr	r3, [pc, #160]	; (80042ec <MX_RTC_Init+0xb4>)
 800424c:	227f      	movs	r2, #127	; 0x7f
 800424e:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8004250:	4b26      	ldr	r3, [pc, #152]	; (80042ec <MX_RTC_Init+0xb4>)
 8004252:	22ff      	movs	r2, #255	; 0xff
 8004254:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8004256:	4b25      	ldr	r3, [pc, #148]	; (80042ec <MX_RTC_Init+0xb4>)
 8004258:	2200      	movs	r2, #0
 800425a:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800425c:	4b23      	ldr	r3, [pc, #140]	; (80042ec <MX_RTC_Init+0xb4>)
 800425e:	2200      	movs	r2, #0
 8004260:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8004262:	4b22      	ldr	r3, [pc, #136]	; (80042ec <MX_RTC_Init+0xb4>)
 8004264:	2200      	movs	r2, #0
 8004266:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8004268:	4b20      	ldr	r3, [pc, #128]	; (80042ec <MX_RTC_Init+0xb4>)
 800426a:	2200      	movs	r2, #0
 800426c:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800426e:	481f      	ldr	r0, [pc, #124]	; (80042ec <MX_RTC_Init+0xb4>)
 8004270:	f005 fb41 	bl	80098f6 <HAL_RTC_Init>
 8004274:	4603      	mov	r3, r0
 8004276:	2b00      	cmp	r3, #0
 8004278:	d001      	beq.n	800427e <MX_RTC_Init+0x46>
  {
    Error_Handler();
 800427a:	f001 f9e1 	bl	8005640 <Error_Handler>
  /* Enable RTC registers write protection */
  //LL_RTC_EnableWriteProtection(RTC);

  /** Initialize RTC and set the Time and Date
    */
    RTC_TimeTypeDef sTime = {0};
 800427e:	1d3b      	adds	r3, r7, #4
 8004280:	2200      	movs	r2, #0
 8004282:	601a      	str	r2, [r3, #0]
 8004284:	605a      	str	r2, [r3, #4]
 8004286:	609a      	str	r2, [r3, #8]
 8004288:	60da      	str	r2, [r3, #12]
 800428a:	611a      	str	r2, [r3, #16]
    RTC_DateTypeDef sDate = {0};
 800428c:	2300      	movs	r3, #0
 800428e:	603b      	str	r3, [r7, #0]

    sTime.Hours = 0x11;
 8004290:	2311      	movs	r3, #17
 8004292:	713b      	strb	r3, [r7, #4]
    sTime.Minutes = 0x59;
 8004294:	2359      	movs	r3, #89	; 0x59
 8004296:	717b      	strb	r3, [r7, #5]
    sTime.Seconds = 0x29;
 8004298:	2329      	movs	r3, #41	; 0x29
 800429a:	71bb      	strb	r3, [r7, #6]
    sTime.SubSeconds = 0x0;
 800429c:	2300      	movs	r3, #0
 800429e:	60bb      	str	r3, [r7, #8]
    sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80042a0:	2300      	movs	r3, #0
 80042a2:	613b      	str	r3, [r7, #16]
    sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80042a4:	2300      	movs	r3, #0
 80042a6:	617b      	str	r3, [r7, #20]
    if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80042a8:	1d3b      	adds	r3, r7, #4
 80042aa:	2201      	movs	r2, #1
 80042ac:	4619      	mov	r1, r3
 80042ae:	480f      	ldr	r0, [pc, #60]	; (80042ec <MX_RTC_Init+0xb4>)
 80042b0:	f005 fbbf 	bl	8009a32 <HAL_RTC_SetTime>
 80042b4:	4603      	mov	r3, r0
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d001      	beq.n	80042be <MX_RTC_Init+0x86>
    {
      Error_Handler();
 80042ba:	f001 f9c1 	bl	8005640 <Error_Handler>
    }
    sDate.WeekDay = RTC_WEEKDAY_TUESDAY;
 80042be:	2302      	movs	r3, #2
 80042c0:	703b      	strb	r3, [r7, #0]
    sDate.Month = RTC_MONTH_MARCH;
 80042c2:	2303      	movs	r3, #3
 80042c4:	707b      	strb	r3, [r7, #1]
    sDate.Date = 0x29;
 80042c6:	2329      	movs	r3, #41	; 0x29
 80042c8:	70bb      	strb	r3, [r7, #2]
    sDate.Year = 0x20;
 80042ca:	2320      	movs	r3, #32
 80042cc:	70fb      	strb	r3, [r7, #3]

    if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 80042ce:	463b      	mov	r3, r7
 80042d0:	2201      	movs	r2, #1
 80042d2:	4619      	mov	r1, r3
 80042d4:	4805      	ldr	r0, [pc, #20]	; (80042ec <MX_RTC_Init+0xb4>)
 80042d6:	f005 fccc 	bl	8009c72 <HAL_RTC_SetDate>
 80042da:	4603      	mov	r3, r0
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d001      	beq.n	80042e4 <MX_RTC_Init+0xac>
    {
      Error_Handler();
 80042e0:	f001 f9ae 	bl	8005640 <Error_Handler>
    }


  /* USER CODE END RTC_Init 2 */

}
 80042e4:	bf00      	nop
 80042e6:	3718      	adds	r7, #24
 80042e8:	46bd      	mov	sp, r7
 80042ea:	bd80      	pop	{r7, pc}
 80042ec:	2000779c 	.word	0x2000779c
 80042f0:	40002800 	.word	0x40002800

080042f4 <MX_SPI1_Init>:

/* USER CODE BEGIN 4 */
static void MX_SPI1_Init(void)
{
 80042f4:	b580      	push	{r7, lr}
 80042f6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80042f8:	4b1b      	ldr	r3, [pc, #108]	; (8004368 <MX_SPI1_Init+0x74>)
 80042fa:	4a1c      	ldr	r2, [pc, #112]	; (800436c <MX_SPI1_Init+0x78>)
 80042fc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80042fe:	4b1a      	ldr	r3, [pc, #104]	; (8004368 <MX_SPI1_Init+0x74>)
 8004300:	f44f 7282 	mov.w	r2, #260	; 0x104
 8004304:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_1LINE;
 8004306:	4b18      	ldr	r3, [pc, #96]	; (8004368 <MX_SPI1_Init+0x74>)
 8004308:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800430c:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800430e:	4b16      	ldr	r3, [pc, #88]	; (8004368 <MX_SPI1_Init+0x74>)
 8004310:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8004314:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8004316:	4b14      	ldr	r3, [pc, #80]	; (8004368 <MX_SPI1_Init+0x74>)
 8004318:	2200      	movs	r2, #0
 800431a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800431c:	4b12      	ldr	r3, [pc, #72]	; (8004368 <MX_SPI1_Init+0x74>)
 800431e:	2200      	movs	r2, #0
 8004320:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8004322:	4b11      	ldr	r3, [pc, #68]	; (8004368 <MX_SPI1_Init+0x74>)
 8004324:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004328:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800432a:	4b0f      	ldr	r3, [pc, #60]	; (8004368 <MX_SPI1_Init+0x74>)
 800432c:	2200      	movs	r2, #0
 800432e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8004330:	4b0d      	ldr	r3, [pc, #52]	; (8004368 <MX_SPI1_Init+0x74>)
 8004332:	2200      	movs	r2, #0
 8004334:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8004336:	4b0c      	ldr	r3, [pc, #48]	; (8004368 <MX_SPI1_Init+0x74>)
 8004338:	2200      	movs	r2, #0
 800433a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800433c:	4b0a      	ldr	r3, [pc, #40]	; (8004368 <MX_SPI1_Init+0x74>)
 800433e:	2200      	movs	r2, #0
 8004340:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8004342:	4b09      	ldr	r3, [pc, #36]	; (8004368 <MX_SPI1_Init+0x74>)
 8004344:	2207      	movs	r2, #7
 8004346:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8004348:	4b07      	ldr	r3, [pc, #28]	; (8004368 <MX_SPI1_Init+0x74>)
 800434a:	2200      	movs	r2, #0
 800434c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800434e:	4b06      	ldr	r3, [pc, #24]	; (8004368 <MX_SPI1_Init+0x74>)
 8004350:	2208      	movs	r2, #8
 8004352:	635a      	str	r2, [r3, #52]	; 0x34

  //hspi1.Init.Direction = SPI_DIRECTION_2LINES;
  //hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;

  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8004354:	4804      	ldr	r0, [pc, #16]	; (8004368 <MX_SPI1_Init+0x74>)
 8004356:	f005 fe49 	bl	8009fec <HAL_SPI_Init>
 800435a:	4603      	mov	r3, r0
 800435c:	2b00      	cmp	r3, #0
 800435e:	d001      	beq.n	8004364 <MX_SPI1_Init+0x70>
  {
    Error_Handler();
 8004360:	f001 f96e 	bl	8005640 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8004364:	bf00      	nop
 8004366:	bd80      	pop	{r7, pc}
 8004368:	200079b8 	.word	0x200079b8
 800436c:	40013000 	.word	0x40013000

08004370 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8004370:	b580      	push	{r7, lr}
 8004372:	b09c      	sub	sp, #112	; 0x70
 8004374:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004376:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800437a:	2200      	movs	r2, #0
 800437c:	601a      	str	r2, [r3, #0]
 800437e:	605a      	str	r2, [r3, #4]
 8004380:	609a      	str	r2, [r3, #8]
 8004382:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004384:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8004388:	2200      	movs	r2, #0
 800438a:	601a      	str	r2, [r3, #0]
 800438c:	605a      	str	r2, [r3, #4]
 800438e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004390:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8004394:	2200      	movs	r2, #0
 8004396:	601a      	str	r2, [r3, #0]
 8004398:	605a      	str	r2, [r3, #4]
 800439a:	609a      	str	r2, [r3, #8]
 800439c:	60da      	str	r2, [r3, #12]
 800439e:	611a      	str	r2, [r3, #16]
 80043a0:	615a      	str	r2, [r3, #20]
 80043a2:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80043a4:	1d3b      	adds	r3, r7, #4
 80043a6:	2234      	movs	r2, #52	; 0x34
 80043a8:	2100      	movs	r1, #0
 80043aa:	4618      	mov	r0, r3
 80043ac:	f00e fab7 	bl	801291e <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80043b0:	4b45      	ldr	r3, [pc, #276]	; (80044c8 <MX_TIM1_Init+0x158>)
 80043b2:	4a46      	ldr	r2, [pc, #280]	; (80044cc <MX_TIM1_Init+0x15c>)
 80043b4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80043b6:	4b44      	ldr	r3, [pc, #272]	; (80044c8 <MX_TIM1_Init+0x158>)
 80043b8:	2200      	movs	r2, #0
 80043ba:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80043bc:	4b42      	ldr	r3, [pc, #264]	; (80044c8 <MX_TIM1_Init+0x158>)
 80043be:	2200      	movs	r2, #0
 80043c0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 100;
 80043c2:	4b41      	ldr	r3, [pc, #260]	; (80044c8 <MX_TIM1_Init+0x158>)
 80043c4:	2264      	movs	r2, #100	; 0x64
 80043c6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80043c8:	4b3f      	ldr	r3, [pc, #252]	; (80044c8 <MX_TIM1_Init+0x158>)
 80043ca:	2200      	movs	r2, #0
 80043cc:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80043ce:	4b3e      	ldr	r3, [pc, #248]	; (80044c8 <MX_TIM1_Init+0x158>)
 80043d0:	2200      	movs	r2, #0
 80043d2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80043d4:	4b3c      	ldr	r3, [pc, #240]	; (80044c8 <MX_TIM1_Init+0x158>)
 80043d6:	2200      	movs	r2, #0
 80043d8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80043da:	483b      	ldr	r0, [pc, #236]	; (80044c8 <MX_TIM1_Init+0x158>)
 80043dc:	f006 f974 	bl	800a6c8 <HAL_TIM_Base_Init>
 80043e0:	4603      	mov	r3, r0
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d001      	beq.n	80043ea <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 80043e6:	f001 f92b 	bl	8005640 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80043ea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80043ee:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80043f0:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80043f4:	4619      	mov	r1, r3
 80043f6:	4834      	ldr	r0, [pc, #208]	; (80044c8 <MX_TIM1_Init+0x158>)
 80043f8:	f006 fe00 	bl	800affc <HAL_TIM_ConfigClockSource>
 80043fc:	4603      	mov	r3, r0
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d001      	beq.n	8004406 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8004402:	f001 f91d 	bl	8005640 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8004406:	4830      	ldr	r0, [pc, #192]	; (80044c8 <MX_TIM1_Init+0x158>)
 8004408:	f006 fa04 	bl	800a814 <HAL_TIM_PWM_Init>
 800440c:	4603      	mov	r3, r0
 800440e:	2b00      	cmp	r3, #0
 8004410:	d001      	beq.n	8004416 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8004412:	f001 f915 	bl	8005640 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004416:	2300      	movs	r3, #0
 8004418:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800441a:	2300      	movs	r3, #0
 800441c:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800441e:	2300      	movs	r3, #0
 8004420:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8004422:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8004426:	4619      	mov	r1, r3
 8004428:	4827      	ldr	r0, [pc, #156]	; (80044c8 <MX_TIM1_Init+0x158>)
 800442a:	f007 fa6d 	bl	800b908 <HAL_TIMEx_MasterConfigSynchronization>
 800442e:	4603      	mov	r3, r0
 8004430:	2b00      	cmp	r3, #0
 8004432:	d001      	beq.n	8004438 <MX_TIM1_Init+0xc8>
  {
    Error_Handler();
 8004434:	f001 f904 	bl	8005640 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004438:	2360      	movs	r3, #96	; 0x60
 800443a:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 100;
 800443c:	2364      	movs	r3, #100	; 0x64
 800443e:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004440:	2300      	movs	r3, #0
 8004442:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8004444:	2300      	movs	r3, #0
 8004446:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8004448:	2304      	movs	r3, #4
 800444a:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800444c:	2300      	movs	r3, #0
 800444e:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8004450:	2300      	movs	r3, #0
 8004452:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004454:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8004458:	2200      	movs	r2, #0
 800445a:	4619      	mov	r1, r3
 800445c:	481a      	ldr	r0, [pc, #104]	; (80044c8 <MX_TIM1_Init+0x158>)
 800445e:	f006 fcbd 	bl	800addc <HAL_TIM_PWM_ConfigChannel>
 8004462:	4603      	mov	r3, r0
 8004464:	2b00      	cmp	r3, #0
 8004466:	d001      	beq.n	800446c <MX_TIM1_Init+0xfc>
  {
    Error_Handler();
 8004468:	f001 f8ea 	bl	8005640 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800446c:	2300      	movs	r3, #0
 800446e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8004470:	2300      	movs	r3, #0
 8004472:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8004474:	2300      	movs	r3, #0
 8004476:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8004478:	2300      	movs	r3, #0
 800447a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800447c:	2300      	movs	r3, #0
 800447e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8004480:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004484:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8004486:	2300      	movs	r3, #0
 8004488:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 800448a:	2300      	movs	r3, #0
 800448c:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800448e:	2300      	movs	r3, #0
 8004490:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8004492:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004496:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8004498:	2300      	movs	r3, #0
 800449a:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 800449c:	2300      	movs	r3, #0
 800449e:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80044a0:	2300      	movs	r3, #0
 80044a2:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80044a4:	1d3b      	adds	r3, r7, #4
 80044a6:	4619      	mov	r1, r3
 80044a8:	4807      	ldr	r0, [pc, #28]	; (80044c8 <MX_TIM1_Init+0x158>)
 80044aa:	f007 fa8d 	bl	800b9c8 <HAL_TIMEx_ConfigBreakDeadTime>
 80044ae:	4603      	mov	r3, r0
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d001      	beq.n	80044b8 <MX_TIM1_Init+0x148>
  {
    Error_Handler();
 80044b4:	f001 f8c4 	bl	8005640 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80044b8:	4803      	ldr	r0, [pc, #12]	; (80044c8 <MX_TIM1_Init+0x158>)
 80044ba:	f001 fb3b 	bl	8005b34 <HAL_TIM_MspPostInit>

}
 80044be:	bf00      	nop
 80044c0:	3770      	adds	r7, #112	; 0x70
 80044c2:	46bd      	mov	sp, r7
 80044c4:	bd80      	pop	{r7, pc}
 80044c6:	bf00      	nop
 80044c8:	20007960 	.word	0x20007960
 80044cc:	40012c00 	.word	0x40012c00

080044d0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80044d0:	b580      	push	{r7, lr}
 80044d2:	b086      	sub	sp, #24
 80044d4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80044d6:	1d3b      	adds	r3, r7, #4
 80044d8:	2200      	movs	r2, #0
 80044da:	601a      	str	r2, [r3, #0]
 80044dc:	605a      	str	r2, [r3, #4]
 80044de:	609a      	str	r2, [r3, #8]
 80044e0:	60da      	str	r2, [r3, #12]
 80044e2:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80044e4:	2004      	movs	r0, #4
 80044e6:	f7ff fc51 	bl	8003d8c <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80044ea:	2002      	movs	r0, #2
 80044ec:	f7ff fc4e 	bl	8003d8c <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80044f0:	2001      	movs	r0, #1
 80044f2:	f7ff fc4b 	bl	8003d8c <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OLED_RESET_GPIO_Port, OLED_RESET_Pin, GPIO_PIN_RESET);
 80044f6:	2200      	movs	r2, #0
 80044f8:	2101      	movs	r1, #1
 80044fa:	4824      	ldr	r0, [pc, #144]	; (800458c <MX_GPIO_Init+0xbc>)
 80044fc:	f002 fbd2 	bl	8006ca4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : OLED_RESET_Pin */
  GPIO_InitStruct.Pin = OLED_RESET_Pin;
 8004500:	2301      	movs	r3, #1
 8004502:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004504:	2301      	movs	r3, #1
 8004506:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004508:	2300      	movs	r3, #0
 800450a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800450c:	2300      	movs	r3, #0
 800450e:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(OLED_RESET_GPIO_Port, &GPIO_InitStruct);
 8004510:	1d3b      	adds	r3, r7, #4
 8004512:	4619      	mov	r1, r3
 8004514:	481d      	ldr	r0, [pc, #116]	; (800458c <MX_GPIO_Init+0xbc>)
 8004516:	f002 fa3d 	bl	8006994 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON_1_Pin BUTTON_2_Pin BUTTON_3_Pin */
  GPIO_InitStruct.Pin = BUTTON_1_Pin|BUTTON_2_Pin|BUTTON_3_Pin;
 800451a:	2338      	movs	r3, #56	; 0x38
 800451c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800451e:	4b1c      	ldr	r3, [pc, #112]	; (8004590 <MX_GPIO_Init+0xc0>)
 8004520:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004522:	2301      	movs	r3, #1
 8004524:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004526:	1d3b      	adds	r3, r7, #4
 8004528:	4619      	mov	r1, r3
 800452a:	4818      	ldr	r0, [pc, #96]	; (800458c <MX_GPIO_Init+0xbc>)
 800452c:	f002 fa32 	bl	8006994 <HAL_GPIO_Init>

  /*Configure SPI_NSS pin to be GPIO, pulled up*/
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8004530:	2310      	movs	r3, #16
 8004532:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004534:	2301      	movs	r3, #1
 8004536:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004538:	2301      	movs	r3, #1
 800453a:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800453c:	1d3b      	adds	r3, r7, #4
 800453e:	4619      	mov	r1, r3
 8004540:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004544:	f002 fa26 	bl	8006994 <HAL_GPIO_Init>

  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8004548:	2201      	movs	r2, #1
 800454a:	2110      	movs	r1, #16
 800454c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004550:	f002 fba8 	bl	8006ca4 <HAL_GPIO_WritePin>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI3_IRQn, 15, 0);
 8004554:	2200      	movs	r2, #0
 8004556:	210f      	movs	r1, #15
 8004558:	2009      	movs	r0, #9
 800455a:	f002 f9c9 	bl	80068f0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 800455e:	2009      	movs	r0, #9
 8004560:	f002 f9e0 	bl	8006924 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 15, 0);
 8004564:	2200      	movs	r2, #0
 8004566:	210f      	movs	r1, #15
 8004568:	200a      	movs	r0, #10
 800456a:	f002 f9c1 	bl	80068f0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 800456e:	200a      	movs	r0, #10
 8004570:	f002 f9d8 	bl	8006924 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 15, 0);
 8004574:	2200      	movs	r2, #0
 8004576:	210f      	movs	r1, #15
 8004578:	2017      	movs	r0, #23
 800457a:	f002 f9b9 	bl	80068f0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800457e:	2017      	movs	r0, #23
 8004580:	f002 f9d0 	bl	8006924 <HAL_NVIC_EnableIRQ>

}
 8004584:	bf00      	nop
 8004586:	3718      	adds	r7, #24
 8004588:	46bd      	mov	sp, r7
 800458a:	bd80      	pop	{r7, pc}
 800458c:	48000400 	.word	0x48000400
 8004590:	10310000 	.word	0x10310000

08004594 <GlobalState_Init>:

/* USER CODE BEGIN 4 */


static void GlobalState_Init(){
 8004594:	b5b0      	push	{r4, r5, r7, lr}
 8004596:	b08a      	sub	sp, #40	; 0x28
 8004598:	af00      	add	r7, sp, #0
	GlobalState.timeBound.startHR_BCD = 0x10; //10AM, BCD
 800459a:	4b39      	ldr	r3, [pc, #228]	; (8004680 <GlobalState_Init+0xec>)
 800459c:	2210      	movs	r2, #16
 800459e:	701a      	strb	r2, [r3, #0]
	GlobalState.timeBound.endHR_BCD = 0x22;   //10PM, BCD
 80045a0:	4b37      	ldr	r3, [pc, #220]	; (8004680 <GlobalState_Init+0xec>)
 80045a2:	2222      	movs	r2, #34	; 0x22
 80045a4:	705a      	strb	r2, [r3, #1]
	GlobalState.timeBound.minInterval = 15;   //15min min interval
 80045a6:	4b36      	ldr	r3, [pc, #216]	; (8004680 <GlobalState_Init+0xec>)
 80045a8:	220f      	movs	r2, #15
 80045aa:	709a      	strb	r2, [r3, #2]
	GlobalState.timeBound.maxInterval = 90;   //90min max interval
 80045ac:	4b34      	ldr	r3, [pc, #208]	; (8004680 <GlobalState_Init+0xec>)
 80045ae:	225a      	movs	r2, #90	; 0x5a
 80045b0:	70da      	strb	r2, [r3, #3]

	RTC_TimeTypeDef tempTime;
	RTC_DateTypeDef tempDate;
	HAL_RTC_GetTime(&hrtc, &tempTime, RTC_FORMAT_BCD);
 80045b2:	f107 0314 	add.w	r3, r7, #20
 80045b6:	2201      	movs	r2, #1
 80045b8:	4619      	mov	r1, r3
 80045ba:	4832      	ldr	r0, [pc, #200]	; (8004684 <GlobalState_Init+0xf0>)
 80045bc:	f005 fafd 	bl	8009bba <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &tempDate, RTC_FORMAT_BCD);
 80045c0:	f107 0310 	add.w	r3, r7, #16
 80045c4:	2201      	movs	r2, #1
 80045c6:	4619      	mov	r1, r3
 80045c8:	482e      	ldr	r0, [pc, #184]	; (8004684 <GlobalState_Init+0xf0>)
 80045ca:	f005 fc00 	bl	8009dce <HAL_RTC_GetDate>

	//shallow structs so no issues with assignment
	GlobalState.lastSeenTime.time = tempTime;
 80045ce:	4b2c      	ldr	r3, [pc, #176]	; (8004680 <GlobalState_Init+0xec>)
 80045d0:	1d1c      	adds	r4, r3, #4
 80045d2:	f107 0514 	add.w	r5, r7, #20
 80045d6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80045d8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80045da:	682b      	ldr	r3, [r5, #0]
 80045dc:	6023      	str	r3, [r4, #0]
	GlobalState.lastSeenTime.date = tempDate;
 80045de:	4a28      	ldr	r2, [pc, #160]	; (8004680 <GlobalState_Init+0xec>)
 80045e0:	693b      	ldr	r3, [r7, #16]
 80045e2:	6193      	str	r3, [r2, #24]

	GlobalState.timeEstimateSample.time = tempTime;
 80045e4:	4b26      	ldr	r3, [pc, #152]	; (8004680 <GlobalState_Init+0xec>)
 80045e6:	f103 041c 	add.w	r4, r3, #28
 80045ea:	f107 0514 	add.w	r5, r7, #20
 80045ee:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80045f0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80045f2:	682b      	ldr	r3, [r5, #0]
 80045f4:	6023      	str	r3, [r4, #0]
	GlobalState.timeEstimateSample.date = tempDate;
 80045f6:	4a22      	ldr	r2, [pc, #136]	; (8004680 <GlobalState_Init+0xec>)
 80045f8:	693b      	ldr	r3, [r7, #16]
 80045fa:	6313      	str	r3, [r2, #48]	; 0x30

	GlobalState.lastConditions.lux = 0.0;
 80045fc:	4b20      	ldr	r3, [pc, #128]	; (8004680 <GlobalState_Init+0xec>)
 80045fe:	f04f 0200 	mov.w	r2, #0
 8004602:	635a      	str	r2, [r3, #52]	; 0x34
	GlobalState.lastConditions.whiteLux = 0.0;
 8004604:	4b1e      	ldr	r3, [pc, #120]	; (8004680 <GlobalState_Init+0xec>)
 8004606:	f04f 0200 	mov.w	r2, #0
 800460a:	639a      	str	r2, [r3, #56]	; 0x38
	GlobalState.lastConditions.temp = 0.0;
 800460c:	4b1c      	ldr	r3, [pc, #112]	; (8004680 <GlobalState_Init+0xec>)
 800460e:	f04f 0200 	mov.w	r2, #0
 8004612:	63da      	str	r2, [r3, #60]	; 0x3c
	GlobalState.lastConditions.humd = 0.0;
 8004614:	4b1a      	ldr	r3, [pc, #104]	; (8004680 <GlobalState_Init+0xec>)
 8004616:	f04f 0200 	mov.w	r2, #0
 800461a:	641a      	str	r2, [r3, #64]	; 0x40

	GlobalState.programMode = MODE_RESTING;
 800461c:	4b18      	ldr	r3, [pc, #96]	; (8004680 <GlobalState_Init+0xec>)
 800461e:	2200      	movs	r2, #0
 8004620:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

	GlobalState.surveyState.surveyID = SURVEY_NONE;
 8004624:	4b16      	ldr	r3, [pc, #88]	; (8004680 <GlobalState_Init+0xec>)
 8004626:	2200      	movs	r2, #0
 8004628:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
	char temp_string[10] = "  DRAMSAY.";
 800462c:	4a16      	ldr	r2, [pc, #88]	; (8004688 <GlobalState_Init+0xf4>)
 800462e:	1d3b      	adds	r3, r7, #4
 8004630:	ca07      	ldmia	r2, {r0, r1, r2}
 8004632:	c303      	stmia	r3!, {r0, r1}
 8004634:	801a      	strh	r2, [r3, #0]
	strncpy(GlobalState.surveyState.screenText, temp_string, strlen(temp_string));
 8004636:	1d3b      	adds	r3, r7, #4
 8004638:	4618      	mov	r0, r3
 800463a:	f7fb fda1 	bl	8000180 <strlen>
 800463e:	4602      	mov	r2, r0
 8004640:	1d3b      	adds	r3, r7, #4
 8004642:	4619      	mov	r1, r3
 8004644:	4811      	ldr	r0, [pc, #68]	; (800468c <GlobalState_Init+0xf8>)
 8004646:	f00e fe6b 	bl	8013320 <strncpy>
	GlobalState.surveyState.screenTextLength = strlen(temp_string);
 800464a:	1d3b      	adds	r3, r7, #4
 800464c:	4618      	mov	r0, r3
 800464e:	f7fb fd97 	bl	8000180 <strlen>
 8004652:	4603      	mov	r3, r0
 8004654:	b2da      	uxtb	r2, r3
 8004656:	4b0a      	ldr	r3, [pc, #40]	; (8004680 <GlobalState_Init+0xec>)
 8004658:	f883 20c9 	strb.w	r2, [r3, #201]	; 0xc9
	memset(GlobalState.surveyState.optionArray, 0, sizeof(GlobalState.surveyState.optionArray));
 800465c:	221c      	movs	r2, #28
 800465e:	2100      	movs	r1, #0
 8004660:	480b      	ldr	r0, [pc, #44]	; (8004690 <GlobalState_Init+0xfc>)
 8004662:	f00e f95c 	bl	801291e <memset>
	GlobalState.surveyState.optionArrayLength = 0;
 8004666:	4b06      	ldr	r3, [pc, #24]	; (8004680 <GlobalState_Init+0xec>)
 8004668:	2200      	movs	r2, #0
 800466a:	f883 20e8 	strb.w	r2, [r3, #232]	; 0xe8

	GlobalState.currentInterval = 0;
 800466e:	4b04      	ldr	r3, [pc, #16]	; (8004680 <GlobalState_Init+0xec>)
 8004670:	2200      	movs	r2, #0
 8004672:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
}
 8004676:	bf00      	nop
 8004678:	3728      	adds	r7, #40	; 0x28
 800467a:	46bd      	mov	sp, r7
 800467c:	bdb0      	pop	{r4, r5, r7, pc}
 800467e:	bf00      	nop
 8004680:	200077c4 	.word	0x200077c4
 8004684:	2000779c 	.word	0x2000779c
 8004688:	08016dd4 	.word	0x08016dd4
 800468c:	2000780d 	.word	0x2000780d
 8004690:	20007890 	.word	0x20007890

08004694 <HAL_GPIO_EXTI_Callback>:

static inline void clear_bit(long *x, int bitNum) {
    *x &= (~(1L << bitNum));
}

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8004694:	b580      	push	{r7, lr}
 8004696:	b086      	sub	sp, #24
 8004698:	af02      	add	r7, sp, #8
 800469a:	4603      	mov	r3, r0
 800469c:	80fb      	strh	r3, [r7, #6]

	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 800469e:	2300      	movs	r3, #0
 80046a0:	60fb      	str	r3, [r7, #12]
	xTaskNotifyFromISR(buttonPressHandle, GPIO_Pin, eSetValueWithOverwrite, &xHigherPriorityTaskWoken);
 80046a2:	4b0c      	ldr	r3, [pc, #48]	; (80046d4 <HAL_GPIO_EXTI_Callback+0x40>)
 80046a4:	6818      	ldr	r0, [r3, #0]
 80046a6:	88f9      	ldrh	r1, [r7, #6]
 80046a8:	f107 030c 	add.w	r3, r7, #12
 80046ac:	9300      	str	r3, [sp, #0]
 80046ae:	2300      	movs	r3, #0
 80046b0:	2203      	movs	r2, #3
 80046b2:	f00d fc27 	bl	8011f04 <xTaskGenericNotifyFromISR>
	portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d007      	beq.n	80046cc <HAL_GPIO_EXTI_Callback+0x38>
 80046bc:	4b06      	ldr	r3, [pc, #24]	; (80046d8 <HAL_GPIO_EXTI_Callback+0x44>)
 80046be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80046c2:	601a      	str	r2, [r3, #0]
 80046c4:	f3bf 8f4f 	dsb	sy
 80046c8:	f3bf 8f6f 	isb	sy

}
 80046cc:	bf00      	nop
 80046ce:	3710      	adds	r7, #16
 80046d0:	46bd      	mov	sp, r7
 80046d2:	bd80      	pop	{r7, pc}
 80046d4:	200078e4 	.word	0x200078e4
 80046d8:	e000ed04 	.word	0xe000ed04

080046dc <startUIControl>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header startUIControl */
void startUIControl(void *argument)
{
 80046dc:	b5b0      	push	{r4, r5, r7, lr}
 80046de:	b0ec      	sub	sp, #432	; 0x1b0
 80046e0:	af02      	add	r7, sp, #8
 80046e2:	1d3b      	adds	r3, r7, #4
 80046e4:	6018      	str	r0, [r3, #0]
  /* USER CODE BEGIN 5 */
  HAL_GPIO_WritePin(OLED_RESET_GPIO_Port, OLED_RESET_Pin, GPIO_PIN_SET);
 80046e6:	2201      	movs	r2, #1
 80046e8:	2101      	movs	r1, #1
 80046ea:	48ad      	ldr	r0, [pc, #692]	; (80049a0 <startUIControl+0x2c4>)
 80046ec:	f002 fada 	bl	8006ca4 <HAL_GPIO_WritePin>

  uint8_t oled_buf[WIDTH * HEIGHT / 8];

  er_oled_begin();
 80046f0:	f7fd fec0 	bl	8002474 <er_oled_begin>
  er_oled_clear(oled_buf);
 80046f4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80046f8:	4618      	mov	r0, r3
 80046fa:	f7fd ff23 	bl	8002544 <er_oled_clear>
  er_oled_string(0, 10, "  DRAMSAY.", 12, 1, oled_buf);
 80046fe:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8004702:	9301      	str	r3, [sp, #4]
 8004704:	2301      	movs	r3, #1
 8004706:	9300      	str	r3, [sp, #0]
 8004708:	230c      	movs	r3, #12
 800470a:	4aa6      	ldr	r2, [pc, #664]	; (80049a4 <startUIControl+0x2c8>)
 800470c:	210a      	movs	r1, #10
 800470e:	2000      	movs	r0, #0
 8004710:	f7fe f8a2 	bl	8002858 <er_oled_string>
  er_oled_string(0, 28, "resenv | mit", 12, 1, oled_buf);
 8004714:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8004718:	9301      	str	r3, [sp, #4]
 800471a:	2301      	movs	r3, #1
 800471c:	9300      	str	r3, [sp, #0]
 800471e:	230c      	movs	r3, #12
 8004720:	4aa1      	ldr	r2, [pc, #644]	; (80049a8 <startUIControl+0x2cc>)
 8004722:	211c      	movs	r1, #28
 8004724:	2000      	movs	r0, #0
 8004726:	f7fe f897 	bl	8002858 <er_oled_string>
  er_oled_display(oled_buf);
 800472a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800472e:	4618      	mov	r0, r3
 8004730:	f7fe f8d3 	bl	80028da <er_oled_display>

  osDelay(3000);
 8004734:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8004738:	f00a f8ac 	bl	800e894 <osDelay>

  er_oled_clear(oled_buf);
 800473c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8004740:	4618      	mov	r0, r3
 8004742:	f7fd feff 	bl	8002544 <er_oled_clear>
  er_oled_display(oled_buf);
 8004746:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800474a:	4618      	mov	r0, r3
 800474c:	f7fe f8c5 	bl	80028da <er_oled_display>

  int16_t current_minute = -1;
 8004750:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004754:	f8a7 31a2 	strh.w	r3, [r7, #418]	; 0x1a2
  int16_t last_minute = -1;
 8004758:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800475c:	f8a7 31a6 	strh.w	r3, [r7, #422]	; 0x1a6

  uint8_t hrs, mins;
  char time[5];

  uint8_t touch_end_count = 0;
 8004760:	2300      	movs	r3, #0
 8004762:	f887 31a5 	strb.w	r3, [r7, #421]	; 0x1a5
  RTC_DateTypeDef cDate;

  BLETX_Queue_t bleSendData;

  //init peripheral (not turbo mode, poll every 250ms, if touch sample at 40Hz until no touch)
  if (setup_iqs263() == HAL_ERROR) {
 8004766:	f7ff f9b5 	bl	8003ad4 <setup_iqs263>
 800476a:	4603      	mov	r3, r0
 800476c:	2b01      	cmp	r3, #1
 800476e:	d10c      	bne.n	800478a <startUIControl+0xae>
	  strncpy(errorCondition, "ERR:IQS263ST", sizeof(errorCondition));
 8004770:	4a8e      	ldr	r2, [pc, #568]	; (80049ac <startUIControl+0x2d0>)
 8004772:	4b8f      	ldr	r3, [pc, #572]	; (80049b0 <startUIControl+0x2d4>)
 8004774:	4614      	mov	r4, r2
 8004776:	cb07      	ldmia	r3!, {r0, r1, r2}
 8004778:	6020      	str	r0, [r4, #0]
 800477a:	6061      	str	r1, [r4, #4]
 800477c:	60a2      	str	r2, [r4, #8]
 800477e:	781b      	ldrb	r3, [r3, #0]
 8004780:	7323      	strb	r3, [r4, #12]
	  GlobalState.programMode = MODE_ERROR;
 8004782:	4b8c      	ldr	r3, [pc, #560]	; (80049b4 <startUIControl+0x2d8>)
 8004784:	2206      	movs	r2, #6
 8004786:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

    /* Infinite loop */
    for(;;)
    {

	 current_minute = iqs263_get_min_if_pressed(); //returns -1 if no press
 800478a:	f7ff fa41 	bl	8003c10 <iqs263_get_min_if_pressed>
 800478e:	4603      	mov	r3, r0
 8004790:	f8a7 31a2 	strh.w	r3, [r7, #418]	; 0x1a2
     if (current_minute != -1) { //touch!
 8004794:	f9b7 31a2 	ldrsh.w	r3, [r7, #418]	; 0x1a2
 8004798:	f1b3 3fff 	cmp.w	r3, #4294967295
 800479c:	f000 808a 	beq.w	80048b4 <startUIControl+0x1d8>

       if (!touch_end_count){ //START TOUCH EVENT!
 80047a0:	f897 31a5 	ldrb.w	r3, [r7, #421]	; 0x1a5
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d152      	bne.n	800484e <startUIControl+0x172>

    	   touch_end_count = 1;
 80047a8:	2301      	movs	r3, #1
 80047aa:	f887 31a5 	strb.w	r3, [r7, #421]	; 0x1a5

    	   er_oled_clear(oled_buf);
 80047ae:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80047b2:	4618      	mov	r0, r3
 80047b4:	f7fd fec6 	bl	8002544 <er_oled_clear>

    	   switch (GlobalState.programMode) {
 80047b8:	4b7e      	ldr	r3, [pc, #504]	; (80049b4 <startUIControl+0x2d8>)
 80047ba:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80047be:	2b03      	cmp	r3, #3
 80047c0:	d845      	bhi.n	800484e <startUIControl+0x172>
 80047c2:	a201      	add	r2, pc, #4	; (adr r2, 80047c8 <startUIControl+0xec>)
 80047c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047c8:	08004817 	.word	0x08004817
 80047cc:	08004837 	.word	0x08004837
 80047d0:	080047d9 	.word	0x080047d9
 80047d4:	080047ff 	.word	0x080047ff
    	   	   case MODE_ESM_TIME_ESTIMATE:
    	   	       xTaskNotifyGive(esmMainHandle);
 80047d8:	4b77      	ldr	r3, [pc, #476]	; (80049b8 <startUIControl+0x2dc>)
 80047da:	6818      	ldr	r0, [r3, #0]
 80047dc:	2300      	movs	r3, #0
 80047de:	2202      	movs	r2, #2
 80047e0:	2100      	movs	r1, #0
 80047e2:	f00d fad9 	bl	8011d98 <xTaskGenericNotify>
           		   er_oled_string(0, 0, "GUESS TIME:", 12, 1, oled_buf);
 80047e6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80047ea:	9301      	str	r3, [sp, #4]
 80047ec:	2301      	movs	r3, #1
 80047ee:	9300      	str	r3, [sp, #0]
 80047f0:	230c      	movs	r3, #12
 80047f2:	4a72      	ldr	r2, [pc, #456]	; (80049bc <startUIControl+0x2e0>)
 80047f4:	2100      	movs	r1, #0
 80047f6:	2000      	movs	r0, #0
 80047f8:	f7fe f82e 	bl	8002858 <er_oled_string>
           		   break;
 80047fc:	e027      	b.n	800484e <startUIControl+0x172>
    	   	   case MODE_ESM_SURVEY:
    	   	       er_oled_string(0, 0, GlobalState.surveyState.screenText, 12, 1, oled_buf);
 80047fe:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8004802:	9301      	str	r3, [sp, #4]
 8004804:	2301      	movs	r3, #1
 8004806:	9300      	str	r3, [sp, #0]
 8004808:	230c      	movs	r3, #12
 800480a:	4a6d      	ldr	r2, [pc, #436]	; (80049c0 <startUIControl+0x2e4>)
 800480c:	2100      	movs	r1, #0
 800480e:	2000      	movs	r0, #0
 8004810:	f7fe f822 	bl	8002858 <er_oled_string>
    	   	       break;
 8004814:	e01b      	b.n	800484e <startUIControl+0x172>
    	   	   case MODE_RESTING:
    			   osMutexAcquire(modeMutexHandle, portMAX_DELAY);
 8004816:	4b6b      	ldr	r3, [pc, #428]	; (80049c4 <startUIControl+0x2e8>)
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	f04f 31ff 	mov.w	r1, #4294967295
 800481e:	4618      	mov	r0, r3
 8004820:	f00a f900 	bl	800ea24 <osMutexAcquire>
    			   GlobalState.programMode = MODE_TIME_ESTIMATE;
 8004824:	4b63      	ldr	r3, [pc, #396]	; (80049b4 <startUIControl+0x2d8>)
 8004826:	2201      	movs	r2, #1
 8004828:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    			   osMutexRelease(modeMutexHandle);
 800482c:	4b65      	ldr	r3, [pc, #404]	; (80049c4 <startUIControl+0x2e8>)
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	4618      	mov	r0, r3
 8004832:	f00a f955 	bl	800eae0 <osMutexRelease>
    			   //fall through to next case
    	   	   case MODE_TIME_ESTIMATE:
    	   		   er_oled_string(0, 0, "GUESS TIME:", 12, 1, oled_buf);
 8004836:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800483a:	9301      	str	r3, [sp, #4]
 800483c:	2301      	movs	r3, #1
 800483e:	9300      	str	r3, [sp, #0]
 8004840:	230c      	movs	r3, #12
 8004842:	4a5e      	ldr	r2, [pc, #376]	; (80049bc <startUIControl+0x2e0>)
 8004844:	2100      	movs	r1, #0
 8004846:	2000      	movs	r0, #0
 8004848:	f7fe f806 	bl	8002858 <er_oled_string>
          		   break;
 800484c:	bf00      	nop
    	   }
       }


  	   if (last_minute != current_minute) { //UPDATE TOUCH VALUE!
 800484e:	f9b7 21a6 	ldrsh.w	r2, [r7, #422]	; 0x1a6
 8004852:	f9b7 31a2 	ldrsh.w	r3, [r7, #418]	; 0x1a2
 8004856:	429a      	cmp	r2, r3
 8004858:	d028      	beq.n	80048ac <startUIControl+0x1d0>
  		   //update touch stuff!
  		   last_minute = current_minute;
 800485a:	f8b7 31a2 	ldrh.w	r3, [r7, #418]	; 0x1a2
 800485e:	f8a7 31a6 	strh.w	r3, [r7, #422]	; 0x1a6
  		   er_oled_clear_bottom_third(oled_buf);
 8004862:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8004866:	4618      	mov	r0, r3
 8004868:	f7fd fe85 	bl	8002576 <er_oled_clear_bottom_third>
  	   	   if (last_minute > 30){
 800486c:	f9b7 31a6 	ldrsh.w	r3, [r7, #422]	; 0x1a6
 8004870:	2b1e      	cmp	r3, #30
 8004872:	dd0b      	ble.n	800488c <startUIControl+0x1b0>
  	   		  er_oled_string(0, 28, "   low", 12, 1, oled_buf);
 8004874:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8004878:	9301      	str	r3, [sp, #4]
 800487a:	2301      	movs	r3, #1
 800487c:	9300      	str	r3, [sp, #0]
 800487e:	230c      	movs	r3, #12
 8004880:	4a51      	ldr	r2, [pc, #324]	; (80049c8 <startUIControl+0x2ec>)
 8004882:	211c      	movs	r1, #28
 8004884:	2000      	movs	r0, #0
 8004886:	f7fd ffe7 	bl	8002858 <er_oled_string>
 800488a:	e00a      	b.n	80048a2 <startUIControl+0x1c6>
  	   	   } else {
  	   		  er_oled_string(0, 28, "   high", 12, 1, oled_buf);
 800488c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8004890:	9301      	str	r3, [sp, #4]
 8004892:	2301      	movs	r3, #1
 8004894:	9300      	str	r3, [sp, #0]
 8004896:	230c      	movs	r3, #12
 8004898:	4a4c      	ldr	r2, [pc, #304]	; (80049cc <startUIControl+0x2f0>)
 800489a:	211c      	movs	r1, #28
 800489c:	2000      	movs	r0, #0
 800489e:	f7fd ffdb 	bl	8002858 <er_oled_string>
  	   	   }
  	   	   er_oled_display(oled_buf);
 80048a2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80048a6:	4618      	mov	r0, r3
 80048a8:	f7fe f817 	bl	80028da <er_oled_display>

  	   }


  	   //optional
  	   osDelay(25);
 80048ac:	2019      	movs	r0, #25
 80048ae:	f009 fff1 	bl	800e894 <osDelay>
 80048b2:	e76a      	b.n	800478a <startUIControl+0xae>


     } else if (touch_end_count > 0){
 80048b4:	f897 31a5 	ldrb.w	r3, [r7, #421]	; 0x1a5
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d057      	beq.n	800496c <startUIControl+0x290>

  	   touch_end_count += 1;//increment touching_end_count
 80048bc:	f897 31a5 	ldrb.w	r3, [r7, #421]	; 0x1a5
 80048c0:	3301      	adds	r3, #1
 80048c2:	f887 31a5 	strb.w	r3, [r7, #421]	; 0x1a5

  	   if (touch_end_count >= TOUCH_END_TIMEOUT){  //FINISHED/CONFIRMED TOUCH VALUE!
 80048c6:	f897 31a5 	ldrb.w	r3, [r7, #421]	; 0x1a5
 80048ca:	2b05      	cmp	r3, #5
 80048cc:	d94a      	bls.n	8004964 <startUIControl+0x288>

  		   touch_end_count = 0;
 80048ce:	2300      	movs	r3, #0
 80048d0:	f887 31a5 	strb.w	r3, [r7, #421]	; 0x1a5
  		   if (GlobalState.programMode == MODE_ESM_TIME_ESTIMATE ||
 80048d4:	4b37      	ldr	r3, [pc, #220]	; (80049b4 <startUIControl+0x2d8>)
 80048d6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80048da:	2b02      	cmp	r3, #2
 80048dc:	d004      	beq.n	80048e8 <startUIControl+0x20c>
  			   GlobalState.programMode == MODE_ESM_SURVEY){
 80048de:	4b35      	ldr	r3, [pc, #212]	; (80049b4 <startUIControl+0x2d8>)
 80048e0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
  		   if (GlobalState.programMode == MODE_ESM_TIME_ESTIMATE ||
 80048e4:	2b03      	cmp	r3, #3
 80048e6:	d106      	bne.n	80048f6 <startUIControl+0x21a>
  			   	   xTaskNotifyGive(esmMainHandle);
 80048e8:	4b33      	ldr	r3, [pc, #204]	; (80049b8 <startUIControl+0x2dc>)
 80048ea:	6818      	ldr	r0, [r3, #0]
 80048ec:	2300      	movs	r3, #0
 80048ee:	2202      	movs	r2, #2
 80048f0:	2100      	movs	r1, #0
 80048f2:	f00d fa51 	bl	8011d98 <xTaskGenericNotify>
  		   }
  		   //DO THINGS WITH CONFIRMED TOUCH == LAST_MINUTE
  		   char out_text[10];
  		   sprintf(out_text, "FINAL: %d", last_minute);
 80048f6:	f9b7 21a6 	ldrsh.w	r2, [r7, #422]	; 0x1a6
 80048fa:	f107 0308 	add.w	r3, r7, #8
 80048fe:	4934      	ldr	r1, [pc, #208]	; (80049d0 <startUIControl+0x2f4>)
 8004900:	4618      	mov	r0, r3
 8004902:	f00e fced 	bl	80132e0 <siprintf>
  		   er_oled_clear(oled_buf);
 8004906:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800490a:	4618      	mov	r0, r3
 800490c:	f7fd fe1a 	bl	8002544 <er_oled_clear>
  		   er_oled_string(0, 28, out_text, 12, 1, oled_buf);
 8004910:	f107 0208 	add.w	r2, r7, #8
 8004914:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8004918:	9301      	str	r3, [sp, #4]
 800491a:	2301      	movs	r3, #1
 800491c:	9300      	str	r3, [sp, #0]
 800491e:	230c      	movs	r3, #12
 8004920:	211c      	movs	r1, #28
 8004922:	2000      	movs	r0, #0
 8004924:	f7fd ff98 	bl	8002858 <er_oled_string>
  		   er_oled_display(oled_buf);
 8004928:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800492c:	4618      	mov	r0, r3
 800492e:	f7fd ffd4 	bl	80028da <er_oled_display>
  		   if (GlobalState.programMode == MODE_TIME_ESTIMATE){
 8004932:	4b20      	ldr	r3, [pc, #128]	; (80049b4 <startUIControl+0x2d8>)
 8004934:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004938:	2b01      	cmp	r3, #1
 800493a:	d10f      	bne.n	800495c <startUIControl+0x280>
  			   osMutexAcquire(modeMutexHandle, portMAX_DELAY);
 800493c:	4b21      	ldr	r3, [pc, #132]	; (80049c4 <startUIControl+0x2e8>)
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	f04f 31ff 	mov.w	r1, #4294967295
 8004944:	4618      	mov	r0, r3
 8004946:	f00a f86d 	bl	800ea24 <osMutexAcquire>
  			   GlobalState.programMode = MODE_RESTING;
 800494a:	4b1a      	ldr	r3, [pc, #104]	; (80049b4 <startUIControl+0x2d8>)
 800494c:	2200      	movs	r2, #0
 800494e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  			   osMutexRelease(modeMutexHandle);
 8004952:	4b1c      	ldr	r3, [pc, #112]	; (80049c4 <startUIControl+0x2e8>)
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	4618      	mov	r0, r3
 8004958:	f00a f8c2 	bl	800eae0 <osMutexRelease>
  		   }
  		   //uint16_t touchval = 0x5000 | last_minute;
  		   //osMessageQueuePut(bleTXqueueHandle, &touchval, 0, 0);

  		   last_minute = -1;
 800495c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004960:	f8a7 31a6 	strh.w	r3, [r7, #422]	; 0x1a6

  	   }

  	   osDelay(25);
 8004964:	2019      	movs	r0, #25
 8004966:	f009 ff95 	bl	800e894 <osDelay>
 800496a:	e70e      	b.n	800478a <startUIControl+0xae>


     }else { //no touch, wait for a touch

       switch (GlobalState.programMode){
 800496c:	4b11      	ldr	r3, [pc, #68]	; (80049b4 <startUIControl+0x2d8>)
 800496e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004972:	2b07      	cmp	r3, #7
 8004974:	f200 8209 	bhi.w	8004d8a <startUIControl+0x6ae>
 8004978:	a201      	add	r2, pc, #4	; (adr r2, 8004980 <startUIControl+0x2a4>)
 800497a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800497e:	bf00      	nop
 8004980:	08004d83 	.word	0x08004d83
 8004984:	08004d8b 	.word	0x08004d8b
 8004988:	08004ce7 	.word	0x08004ce7
 800498c:	08004d51 	.word	0x08004d51
 8004990:	080049d5 	.word	0x080049d5
 8004994:	08004b23 	.word	0x08004b23
 8004998:	08004c71 	.word	0x08004c71
 800499c:	08004c9d 	.word	0x08004c9d
 80049a0:	48000400 	.word	0x48000400
 80049a4:	08016dd4 	.word	0x08016dd4
 80049a8:	08016dfc 	.word	0x08016dfc
 80049ac:	200078b8 	.word	0x200078b8
 80049b0:	08016e0c 	.word	0x08016e0c
 80049b4:	200077c4 	.word	0x200077c4
 80049b8:	200079b4 	.word	0x200079b4
 80049bc:	08016e1c 	.word	0x08016e1c
 80049c0:	2000780d 	.word	0x2000780d
 80049c4:	2000794c 	.word	0x2000794c
 80049c8:	08016e28 	.word	0x08016e28
 80049cc:	08016e30 	.word	0x08016e30
 80049d0:	08016e38 	.word	0x08016e38
        case MODE_CANCEL:
    	   //had a 'cancel' button event

    	   er_oled_clear(oled_buf);
 80049d4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80049d8:	4618      	mov	r0, r3
 80049da:	f7fd fdb3 	bl	8002544 <er_oled_clear>
   	   	   er_oled_string(0, 0, "  dismiss!", 12, 1, oled_buf);
 80049de:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80049e2:	9301      	str	r3, [sp, #4]
 80049e4:	2301      	movs	r3, #1
 80049e6:	9300      	str	r3, [sp, #0]
 80049e8:	230c      	movs	r3, #12
 80049ea:	4acb      	ldr	r2, [pc, #812]	; (8004d18 <startUIControl+0x63c>)
 80049ec:	2100      	movs	r1, #0
 80049ee:	2000      	movs	r0, #0
 80049f0:	f7fd ff32 	bl	8002858 <er_oled_string>
   	   	   er_oled_string(0, 20, "TIME NOW IS:", 12, 1, oled_buf);
 80049f4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80049f8:	9301      	str	r3, [sp, #4]
 80049fa:	2301      	movs	r3, #1
 80049fc:	9300      	str	r3, [sp, #0]
 80049fe:	230c      	movs	r3, #12
 8004a00:	4ac6      	ldr	r2, [pc, #792]	; (8004d1c <startUIControl+0x640>)
 8004a02:	2114      	movs	r1, #20
 8004a04:	2000      	movs	r0, #0
 8004a06:	f7fd ff27 	bl	8002858 <er_oled_string>
   	   	   er_oled_display(oled_buf);
 8004a0a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8004a0e:	4618      	mov	r0, r3
 8004a10:	f7fd ff63 	bl	80028da <er_oled_display>

   	   	   osDelay(1000);
 8004a14:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004a18:	f009 ff3c 	bl	800e894 <osDelay>

   	   	   osMutexAcquire(rtcMutexHandle, portMAX_DELAY);
 8004a1c:	4bc0      	ldr	r3, [pc, #768]	; (8004d20 <startUIControl+0x644>)
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	f04f 31ff 	mov.w	r1, #4294967295
 8004a24:	4618      	mov	r0, r3
 8004a26:	f009 fffd 	bl	800ea24 <osMutexAcquire>
   	   	   HAL_RTC_GetTime(&hrtc, &cTime, RTC_FORMAT_BCD);
 8004a2a:	f107 031c 	add.w	r3, r7, #28
 8004a2e:	2201      	movs	r2, #1
 8004a30:	4619      	mov	r1, r3
 8004a32:	48bc      	ldr	r0, [pc, #752]	; (8004d24 <startUIControl+0x648>)
 8004a34:	f005 f8c1 	bl	8009bba <HAL_RTC_GetTime>
   	   	   HAL_RTC_GetDate(&hrtc, &cDate, RTC_FORMAT_BCD);
 8004a38:	f107 0318 	add.w	r3, r7, #24
 8004a3c:	2201      	movs	r2, #1
 8004a3e:	4619      	mov	r1, r3
 8004a40:	48b8      	ldr	r0, [pc, #736]	; (8004d24 <startUIControl+0x648>)
 8004a42:	f005 f9c4 	bl	8009dce <HAL_RTC_GetDate>
   	   	   osMutexRelease(rtcMutexHandle);
 8004a46:	4bb6      	ldr	r3, [pc, #728]	; (8004d20 <startUIControl+0x644>)
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	4618      	mov	r0, r3
 8004a4c:	f00a f848 	bl	800eae0 <osMutexRelease>

   	   	   hrs = RTC_Bcd2ToByte(cTime.Hours);
 8004a50:	f107 031c 	add.w	r3, r7, #28
 8004a54:	781b      	ldrb	r3, [r3, #0]
 8004a56:	4618      	mov	r0, r3
 8004a58:	f005 fa76 	bl	8009f48 <RTC_Bcd2ToByte>
 8004a5c:	4603      	mov	r3, r0
 8004a5e:	f887 31a1 	strb.w	r3, [r7, #417]	; 0x1a1
   	   	   mins = RTC_Bcd2ToByte(cTime.Minutes);
 8004a62:	f107 031c 	add.w	r3, r7, #28
 8004a66:	785b      	ldrb	r3, [r3, #1]
 8004a68:	4618      	mov	r0, r3
 8004a6a:	f005 fa6d 	bl	8009f48 <RTC_Bcd2ToByte>
 8004a6e:	4603      	mov	r3, r0
 8004a70:	f887 31a0 	strb.w	r3, [r7, #416]	; 0x1a0
   	   	   sprintf (time, "%02d%02d", hrs, mins);
 8004a74:	f897 21a1 	ldrb.w	r2, [r7, #417]	; 0x1a1
 8004a78:	f897 31a0 	ldrb.w	r3, [r7, #416]	; 0x1a0
 8004a7c:	f107 0030 	add.w	r0, r7, #48	; 0x30
 8004a80:	49a9      	ldr	r1, [pc, #676]	; (8004d28 <startUIControl+0x64c>)
 8004a82:	f00e fc2d 	bl	80132e0 <siprintf>
   	   	   er_oled_time(time);
 8004a86:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004a8a:	4618      	mov	r0, r3
 8004a8c:	f7fd ff5d 	bl	800294a <er_oled_time>

	       osMutexAcquire(lastSeenMutexHandle, portMAX_DELAY);
 8004a90:	4ba6      	ldr	r3, [pc, #664]	; (8004d2c <startUIControl+0x650>)
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	f04f 31ff 	mov.w	r1, #4294967295
 8004a98:	4618      	mov	r0, r3
 8004a9a:	f009 ffc3 	bl	800ea24 <osMutexAcquire>
	       GlobalState.lastSeenTime.time = cTime;
 8004a9e:	4ba4      	ldr	r3, [pc, #656]	; (8004d30 <startUIControl+0x654>)
 8004aa0:	f107 021c 	add.w	r2, r7, #28
 8004aa4:	1d1c      	adds	r4, r3, #4
 8004aa6:	4615      	mov	r5, r2
 8004aa8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004aaa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004aac:	682b      	ldr	r3, [r5, #0]
 8004aae:	6023      	str	r3, [r4, #0]
	       GlobalState.lastSeenTime.date = cDate;
 8004ab0:	4a9f      	ldr	r2, [pc, #636]	; (8004d30 <startUIControl+0x654>)
 8004ab2:	f107 0318 	add.w	r3, r7, #24
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	6193      	str	r3, [r2, #24]
	       osMutexRelease(lastSeenMutexHandle);
 8004aba:	4b9c      	ldr	r3, [pc, #624]	; (8004d2c <startUIControl+0x650>)
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	4618      	mov	r0, r3
 8004ac0:	f00a f80e 	bl	800eae0 <osMutexRelease>

	       bleSendData.sendType = TX_TIME_SEEN;
 8004ac4:	f107 0314 	add.w	r3, r7, #20
 8004ac8:	2204      	movs	r2, #4
 8004aca:	701a      	strb	r2, [r3, #0]
	       bleSendData.data = 0x0000;
 8004acc:	f107 0314 	add.w	r3, r7, #20
 8004ad0:	2200      	movs	r2, #0
 8004ad2:	805a      	strh	r2, [r3, #2]
	       osMessageQueuePut(bleTXqueueHandle, &bleSendData, 0, 0);
 8004ad4:	4b97      	ldr	r3, [pc, #604]	; (8004d34 <startUIControl+0x658>)
 8004ad6:	6818      	ldr	r0, [r3, #0]
 8004ad8:	f107 0114 	add.w	r1, r7, #20
 8004adc:	2300      	movs	r3, #0
 8004ade:	2200      	movs	r2, #0
 8004ae0:	f00a fa30 	bl	800ef44 <osMessageQueuePut>

	       osMutexAcquire(modeMutexHandle, portMAX_DELAY);
 8004ae4:	4b94      	ldr	r3, [pc, #592]	; (8004d38 <startUIControl+0x65c>)
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	f04f 31ff 	mov.w	r1, #4294967295
 8004aec:	4618      	mov	r0, r3
 8004aee:	f009 ff99 	bl	800ea24 <osMutexAcquire>
	       GlobalState.programMode = MODE_RESTING;
 8004af2:	4b8f      	ldr	r3, [pc, #572]	; (8004d30 <startUIControl+0x654>)
 8004af4:	2200      	movs	r2, #0
 8004af6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	       osMutexRelease(modeMutexHandle);
 8004afa:	4b8f      	ldr	r3, [pc, #572]	; (8004d38 <startUIControl+0x65c>)
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	4618      	mov	r0, r3
 8004b00:	f009 ffee 	bl	800eae0 <osMutexRelease>

	       //TODO: PICK NEW INTERVAL
	       /////////////////////////

	       osDelay(3000);
 8004b04:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8004b08:	f009 fec4 	bl	800e894 <osDelay>
	       er_oled_clear(oled_buf);
 8004b0c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8004b10:	4618      	mov	r0, r3
 8004b12:	f7fd fd17 	bl	8002544 <er_oled_clear>
	       er_oled_display(oled_buf);
 8004b16:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8004b1a:	4618      	mov	r0, r3
 8004b1c:	f7fd fedd 	bl	80028da <er_oled_display>
	       break;
 8004b20:	e137      	b.n	8004d92 <startUIControl+0x6b6>

        case MODE_SHOW_TIME:
		   //show time, no cancel, but does the same thing

		   er_oled_clear(oled_buf);
 8004b22:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8004b26:	4618      	mov	r0, r3
 8004b28:	f7fd fd0c 	bl	8002544 <er_oled_clear>
		   er_oled_string(0, 0, " completed", 12, 1, oled_buf);
 8004b2c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8004b30:	9301      	str	r3, [sp, #4]
 8004b32:	2301      	movs	r3, #1
 8004b34:	9300      	str	r3, [sp, #0]
 8004b36:	230c      	movs	r3, #12
 8004b38:	4a80      	ldr	r2, [pc, #512]	; (8004d3c <startUIControl+0x660>)
 8004b3a:	2100      	movs	r1, #0
 8004b3c:	2000      	movs	r0, #0
 8004b3e:	f7fd fe8b 	bl	8002858 <er_oled_string>
		   er_oled_string(0, 20, "TIME NOW IS:", 12, 1, oled_buf);
 8004b42:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8004b46:	9301      	str	r3, [sp, #4]
 8004b48:	2301      	movs	r3, #1
 8004b4a:	9300      	str	r3, [sp, #0]
 8004b4c:	230c      	movs	r3, #12
 8004b4e:	4a73      	ldr	r2, [pc, #460]	; (8004d1c <startUIControl+0x640>)
 8004b50:	2114      	movs	r1, #20
 8004b52:	2000      	movs	r0, #0
 8004b54:	f7fd fe80 	bl	8002858 <er_oled_string>
		   er_oled_display(oled_buf);
 8004b58:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8004b5c:	4618      	mov	r0, r3
 8004b5e:	f7fd febc 	bl	80028da <er_oled_display>

		   osDelay(1000);
 8004b62:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004b66:	f009 fe95 	bl	800e894 <osDelay>

		   osMutexAcquire(rtcMutexHandle, portMAX_DELAY);
 8004b6a:	4b6d      	ldr	r3, [pc, #436]	; (8004d20 <startUIControl+0x644>)
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	f04f 31ff 	mov.w	r1, #4294967295
 8004b72:	4618      	mov	r0, r3
 8004b74:	f009 ff56 	bl	800ea24 <osMutexAcquire>
		   HAL_RTC_GetTime(&hrtc, &cTime, RTC_FORMAT_BCD);
 8004b78:	f107 031c 	add.w	r3, r7, #28
 8004b7c:	2201      	movs	r2, #1
 8004b7e:	4619      	mov	r1, r3
 8004b80:	4868      	ldr	r0, [pc, #416]	; (8004d24 <startUIControl+0x648>)
 8004b82:	f005 f81a 	bl	8009bba <HAL_RTC_GetTime>
		   HAL_RTC_GetDate(&hrtc, &cDate, RTC_FORMAT_BCD);
 8004b86:	f107 0318 	add.w	r3, r7, #24
 8004b8a:	2201      	movs	r2, #1
 8004b8c:	4619      	mov	r1, r3
 8004b8e:	4865      	ldr	r0, [pc, #404]	; (8004d24 <startUIControl+0x648>)
 8004b90:	f005 f91d 	bl	8009dce <HAL_RTC_GetDate>
		   osMutexRelease(rtcMutexHandle);
 8004b94:	4b62      	ldr	r3, [pc, #392]	; (8004d20 <startUIControl+0x644>)
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	4618      	mov	r0, r3
 8004b9a:	f009 ffa1 	bl	800eae0 <osMutexRelease>

		   hrs = RTC_Bcd2ToByte(cTime.Hours);
 8004b9e:	f107 031c 	add.w	r3, r7, #28
 8004ba2:	781b      	ldrb	r3, [r3, #0]
 8004ba4:	4618      	mov	r0, r3
 8004ba6:	f005 f9cf 	bl	8009f48 <RTC_Bcd2ToByte>
 8004baa:	4603      	mov	r3, r0
 8004bac:	f887 31a1 	strb.w	r3, [r7, #417]	; 0x1a1
		   mins = RTC_Bcd2ToByte(cTime.Minutes);
 8004bb0:	f107 031c 	add.w	r3, r7, #28
 8004bb4:	785b      	ldrb	r3, [r3, #1]
 8004bb6:	4618      	mov	r0, r3
 8004bb8:	f005 f9c6 	bl	8009f48 <RTC_Bcd2ToByte>
 8004bbc:	4603      	mov	r3, r0
 8004bbe:	f887 31a0 	strb.w	r3, [r7, #416]	; 0x1a0
		   sprintf (time, "%02d%02d", hrs, mins);
 8004bc2:	f897 21a1 	ldrb.w	r2, [r7, #417]	; 0x1a1
 8004bc6:	f897 31a0 	ldrb.w	r3, [r7, #416]	; 0x1a0
 8004bca:	f107 0030 	add.w	r0, r7, #48	; 0x30
 8004bce:	4956      	ldr	r1, [pc, #344]	; (8004d28 <startUIControl+0x64c>)
 8004bd0:	f00e fb86 	bl	80132e0 <siprintf>
		   er_oled_time(time);
 8004bd4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004bd8:	4618      	mov	r0, r3
 8004bda:	f7fd feb6 	bl	800294a <er_oled_time>

		   osMutexAcquire(lastSeenMutexHandle, portMAX_DELAY);
 8004bde:	4b53      	ldr	r3, [pc, #332]	; (8004d2c <startUIControl+0x650>)
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	f04f 31ff 	mov.w	r1, #4294967295
 8004be6:	4618      	mov	r0, r3
 8004be8:	f009 ff1c 	bl	800ea24 <osMutexAcquire>
		   GlobalState.lastSeenTime.time = cTime;
 8004bec:	4b50      	ldr	r3, [pc, #320]	; (8004d30 <startUIControl+0x654>)
 8004bee:	f107 021c 	add.w	r2, r7, #28
 8004bf2:	1d1c      	adds	r4, r3, #4
 8004bf4:	4615      	mov	r5, r2
 8004bf6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004bf8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004bfa:	682b      	ldr	r3, [r5, #0]
 8004bfc:	6023      	str	r3, [r4, #0]
		   GlobalState.lastSeenTime.date = cDate;
 8004bfe:	4a4c      	ldr	r2, [pc, #304]	; (8004d30 <startUIControl+0x654>)
 8004c00:	f107 0318 	add.w	r3, r7, #24
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	6193      	str	r3, [r2, #24]
		   osMutexRelease(lastSeenMutexHandle);
 8004c08:	4b48      	ldr	r3, [pc, #288]	; (8004d2c <startUIControl+0x650>)
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	4618      	mov	r0, r3
 8004c0e:	f009 ff67 	bl	800eae0 <osMutexRelease>

		   bleSendData.sendType = TX_TIME_SEEN;
 8004c12:	f107 0314 	add.w	r3, r7, #20
 8004c16:	2204      	movs	r2, #4
 8004c18:	701a      	strb	r2, [r3, #0]
		   bleSendData.data = 0x0000;
 8004c1a:	f107 0314 	add.w	r3, r7, #20
 8004c1e:	2200      	movs	r2, #0
 8004c20:	805a      	strh	r2, [r3, #2]
		   osMessageQueuePut(bleTXqueueHandle, &bleSendData, 0, 0);
 8004c22:	4b44      	ldr	r3, [pc, #272]	; (8004d34 <startUIControl+0x658>)
 8004c24:	6818      	ldr	r0, [r3, #0]
 8004c26:	f107 0114 	add.w	r1, r7, #20
 8004c2a:	2300      	movs	r3, #0
 8004c2c:	2200      	movs	r2, #0
 8004c2e:	f00a f989 	bl	800ef44 <osMessageQueuePut>

		   osMutexAcquire(modeMutexHandle, portMAX_DELAY);
 8004c32:	4b41      	ldr	r3, [pc, #260]	; (8004d38 <startUIControl+0x65c>)
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	f04f 31ff 	mov.w	r1, #4294967295
 8004c3a:	4618      	mov	r0, r3
 8004c3c:	f009 fef2 	bl	800ea24 <osMutexAcquire>
		   GlobalState.programMode = MODE_RESTING;
 8004c40:	4b3b      	ldr	r3, [pc, #236]	; (8004d30 <startUIControl+0x654>)
 8004c42:	2200      	movs	r2, #0
 8004c44:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		   osMutexRelease(modeMutexHandle);
 8004c48:	4b3b      	ldr	r3, [pc, #236]	; (8004d38 <startUIControl+0x65c>)
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	4618      	mov	r0, r3
 8004c4e:	f009 ff47 	bl	800eae0 <osMutexRelease>

		   //TODO: PICK NEW INTERVAL
		   /////////////////////////

		   osDelay(3000);
 8004c52:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8004c56:	f009 fe1d 	bl	800e894 <osDelay>
		   er_oled_clear(oled_buf);
 8004c5a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8004c5e:	4618      	mov	r0, r3
 8004c60:	f7fd fc70 	bl	8002544 <er_oled_clear>
		   er_oled_display(oled_buf);
 8004c64:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8004c68:	4618      	mov	r0, r3
 8004c6a:	f7fd fe36 	bl	80028da <er_oled_display>
		   break;
 8004c6e:	e090      	b.n	8004d92 <startUIControl+0x6b6>

       case MODE_ERROR:
    	   //ERROR condition: print condition and loop forever

    	   er_oled_clear(oled_buf);
 8004c70:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8004c74:	4618      	mov	r0, r3
 8004c76:	f7fd fc65 	bl	8002544 <er_oled_clear>
    	   er_oled_string(0, 12, errorCondition, 12, 1, oled_buf);
 8004c7a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8004c7e:	9301      	str	r3, [sp, #4]
 8004c80:	2301      	movs	r3, #1
 8004c82:	9300      	str	r3, [sp, #0]
 8004c84:	230c      	movs	r3, #12
 8004c86:	4a2e      	ldr	r2, [pc, #184]	; (8004d40 <startUIControl+0x664>)
 8004c88:	210c      	movs	r1, #12
 8004c8a:	2000      	movs	r0, #0
 8004c8c:	f7fd fde4 	bl	8002858 <er_oled_string>
    	   er_oled_display(oled_buf);
 8004c90:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8004c94:	4618      	mov	r0, r3
 8004c96:	f7fd fe20 	bl	80028da <er_oled_display>
    	   for (;;){}
 8004c9a:	e7fe      	b.n	8004c9a <startUIControl+0x5be>

       case MODE_CLEAR:
    	   //Timeout, notify and wait until clear
    	   //show time and restart

		   er_oled_clear(oled_buf);
 8004c9c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8004ca0:	4618      	mov	r0, r3
 8004ca2:	f7fd fc4f 	bl	8002544 <er_oled_clear>
		   er_oled_string(0, 10, "  TIMEOUT!", 12, 1, oled_buf);
 8004ca6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8004caa:	9301      	str	r3, [sp, #4]
 8004cac:	2301      	movs	r3, #1
 8004cae:	9300      	str	r3, [sp, #0]
 8004cb0:	230c      	movs	r3, #12
 8004cb2:	4a24      	ldr	r2, [pc, #144]	; (8004d44 <startUIControl+0x668>)
 8004cb4:	210a      	movs	r1, #10
 8004cb6:	2000      	movs	r0, #0
 8004cb8:	f7fd fdce 	bl	8002858 <er_oled_string>
		   er_oled_string(0, 28, " hit button", 12, 1, oled_buf);
 8004cbc:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8004cc0:	9301      	str	r3, [sp, #4]
 8004cc2:	2301      	movs	r3, #1
 8004cc4:	9300      	str	r3, [sp, #0]
 8004cc6:	230c      	movs	r3, #12
 8004cc8:	4a1f      	ldr	r2, [pc, #124]	; (8004d48 <startUIControl+0x66c>)
 8004cca:	211c      	movs	r1, #28
 8004ccc:	2000      	movs	r0, #0
 8004cce:	f7fd fdc3 	bl	8002858 <er_oled_string>
		   er_oled_display(oled_buf);
 8004cd2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8004cd6:	4618      	mov	r0, r3
 8004cd8:	f7fd fdff 	bl	80028da <er_oled_display>

		   osDelay(500);
 8004cdc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004ce0:	f009 fdd8 	bl	800e894 <osDelay>
    	   break;
 8004ce4:	e055      	b.n	8004d92 <startUIControl+0x6b6>

       case MODE_ESM_TIME_ESTIMATE:
    	  er_oled_clear(oled_buf);
 8004ce6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8004cea:	4618      	mov	r0, r3
 8004cec:	f7fd fc2a 	bl	8002544 <er_oled_clear>
    	  er_oled_string(0, 0, "GUESS TIME:", 12, 1, oled_buf);
 8004cf0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8004cf4:	9301      	str	r3, [sp, #4]
 8004cf6:	2301      	movs	r3, #1
 8004cf8:	9300      	str	r3, [sp, #0]
 8004cfa:	230c      	movs	r3, #12
 8004cfc:	4a13      	ldr	r2, [pc, #76]	; (8004d4c <startUIControl+0x670>)
 8004cfe:	2100      	movs	r1, #0
 8004d00:	2000      	movs	r0, #0
 8004d02:	f7fd fda9 	bl	8002858 <er_oled_string>
    	  er_oled_display(oled_buf);
 8004d06:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8004d0a:	4618      	mov	r0, r3
 8004d0c:	f7fd fde5 	bl	80028da <er_oled_display>
    	  osDelay(100);
 8004d10:	2064      	movs	r0, #100	; 0x64
 8004d12:	f009 fdbf 	bl	800e894 <osDelay>
    	  break;
 8004d16:	e03c      	b.n	8004d92 <startUIControl+0x6b6>
 8004d18:	08016e44 	.word	0x08016e44
 8004d1c:	08016e50 	.word	0x08016e50
 8004d20:	200077c0 	.word	0x200077c0
 8004d24:	2000779c 	.word	0x2000779c
 8004d28:	08016de0 	.word	0x08016de0
 8004d2c:	20007a1c 	.word	0x20007a1c
 8004d30:	200077c4 	.word	0x200077c4
 8004d34:	200079ac 	.word	0x200079ac
 8004d38:	2000794c 	.word	0x2000794c
 8004d3c:	08016e60 	.word	0x08016e60
 8004d40:	200078b8 	.word	0x200078b8
 8004d44:	08016e6c 	.word	0x08016e6c
 8004d48:	08016e78 	.word	0x08016e78
 8004d4c:	08016e1c 	.word	0x08016e1c

       case MODE_ESM_SURVEY:
    	  er_oled_clear(oled_buf);
 8004d50:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8004d54:	4618      	mov	r0, r3
 8004d56:	f7fd fbf5 	bl	8002544 <er_oled_clear>
    	  er_oled_string(0, 0, GlobalState.surveyState.screenText, 12, 1, oled_buf);
 8004d5a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8004d5e:	9301      	str	r3, [sp, #4]
 8004d60:	2301      	movs	r3, #1
 8004d62:	9300      	str	r3, [sp, #0]
 8004d64:	230c      	movs	r3, #12
 8004d66:	4a0b      	ldr	r2, [pc, #44]	; (8004d94 <startUIControl+0x6b8>)
 8004d68:	2100      	movs	r1, #0
 8004d6a:	2000      	movs	r0, #0
 8004d6c:	f7fd fd74 	bl	8002858 <er_oled_string>
    	  er_oled_display(oled_buf);
 8004d70:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8004d74:	4618      	mov	r0, r3
 8004d76:	f7fd fdb0 	bl	80028da <er_oled_display>
    	  osDelay(100);
 8004d7a:	2064      	movs	r0, #100	; 0x64
 8004d7c:	f009 fd8a 	bl	800e894 <osDelay>
    	  break;
 8004d80:	e007      	b.n	8004d92 <startUIControl+0x6b6>

       case MODE_RESTING:
		   osDelay(250);
 8004d82:	20fa      	movs	r0, #250	; 0xfa
 8004d84:	f009 fd86 	bl	800e894 <osDelay>
		   break;
 8004d88:	e003      	b.n	8004d92 <startUIControl+0x6b6>

       default:
    	   osDelay(20);
 8004d8a:	2014      	movs	r0, #20
 8004d8c:	f009 fd82 	bl	800e894 <osDelay>
    	   break;
 8004d90:	bf00      	nop
	 current_minute = iqs263_get_min_if_pressed(); //returns -1 if no press
 8004d92:	e4fa      	b.n	800478a <startUIControl+0xae>
 8004d94:	2000780d 	.word	0x2000780d

08004d98 <startESMMain>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_startESMMain */
void startESMMain(void *argument)
{
 8004d98:	b5b0      	push	{r4, r5, r7, lr}
 8004d9a:	b086      	sub	sp, #24
 8004d9c:	af00      	add	r7, sp, #0
 8004d9e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN startESMMain */


  const BLETX_Queue_t bleSendInit = {TX_SURVEY_INITIALIZED, 0x0000};
 8004da0:	2302      	movs	r3, #2
 8004da2:	733b      	strb	r3, [r7, #12]
 8004da4:	2300      	movs	r3, #0
 8004da6:	81fb      	strh	r3, [r7, #14]
  const BLETX_Queue_t bleSendInvalid = {TX_LAST_SURVEY_INVALID, 0x0000};
 8004da8:	2306      	movs	r3, #6
 8004daa:	723b      	strb	r3, [r7, #8]
 8004dac:	2300      	movs	r3, #0
 8004dae:	817b      	strh	r3, [r7, #10]
  for(;;)
  {
    //check state, get mode, call timer if necessary

    //xTaskNotifyGive(startAlertHandle); to alert user with flash and vibration
    osDelay(10000);
 8004db0:	f242 7010 	movw	r0, #10000	; 0x2710
 8004db4:	f009 fd6e 	bl	800e894 <osDelay>

    //if >timebound interval selection + lasttimeseen
	//if between hours of timebound
    //if mode is mode_resting
    //
    if (GlobalState.programMode == MODE_RESTING){
 8004db8:	4b99      	ldr	r3, [pc, #612]	; (8005020 <startESMMain+0x288>)
 8004dba:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d1f6      	bne.n	8004db0 <startESMMain+0x18>

    	//send TX_SURVEY_INITIALIZED
    	osMessageQueuePut(bleTXqueueHandle, &bleSendInit, 0, 0);
 8004dc2:	4b98      	ldr	r3, [pc, #608]	; (8005024 <startESMMain+0x28c>)
 8004dc4:	6818      	ldr	r0, [r3, #0]
 8004dc6:	f107 010c 	add.w	r1, r7, #12
 8004dca:	2300      	movs	r3, #0
 8004dcc:	2200      	movs	r2, #0
 8004dce:	f00a f8b9 	bl	800ef44 <osMessageQueuePut>

    	//set program mode to MODE_ESM_TIME_ESTIMATE
    	osMutexAcquire(modeMutexHandle, portMAX_DELAY);
 8004dd2:	4b95      	ldr	r3, [pc, #596]	; (8005028 <startESMMain+0x290>)
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	f04f 31ff 	mov.w	r1, #4294967295
 8004dda:	4618      	mov	r0, r3
 8004ddc:	f009 fe22 	bl	800ea24 <osMutexAcquire>
    	GlobalState.programMode = MODE_ESM_TIME_ESTIMATE;
 8004de0:	4b8f      	ldr	r3, [pc, #572]	; (8005020 <startESMMain+0x288>)
 8004de2:	2202      	movs	r2, #2
 8004de4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    	osMutexRelease(modeMutexHandle);
 8004de8:	4b8f      	ldr	r3, [pc, #572]	; (8005028 <startESMMain+0x290>)
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	4618      	mov	r0, r3
 8004dee:	f009 fe77 	bl	800eae0 <osMutexRelease>

    	//clear UI notification flags
    	xTaskNotifyStateClear(NULL);
 8004df2:	2000      	movs	r0, #0
 8004df4:	f00d f95e 	bl	80120b4 <xTaskNotifyStateClear>

    	uint8_t continue_flag = 1;
 8004df8:	2301      	movs	r3, #1
 8004dfa:	74fb      	strb	r3, [r7, #19]

    	//(1) Alert Loop and ESM_TIME_ESTIMATE
    	uint8_t keep_alerting = 1;
 8004dfc:	2301      	movs	r3, #1
 8004dfe:	74bb      	strb	r3, [r7, #18]
    	while(keep_alerting){
 8004e00:	e01a      	b.n	8004e38 <startESMMain+0xa0>

    		//alert
    		xTaskNotifyGive(alertHandle);
 8004e02:	4b8a      	ldr	r3, [pc, #552]	; (800502c <startESMMain+0x294>)
 8004e04:	6818      	ldr	r0, [r3, #0]
 8004e06:	2300      	movs	r3, #0
 8004e08:	2202      	movs	r2, #2
 8004e0a:	2100      	movs	r1, #0
 8004e0c:	f00c ffc4 	bl	8011d98 <xTaskGenericNotify>
    		//wait for notification from UI thread that indicates start of user interaction
    		notification = ulTaskNotifyTake( pdTRUE, pdMS_TO_TICKS(ALERT_TIMEOUT));
 8004e10:	f241 7170 	movw	r1, #6000	; 0x1770
 8004e14:	2001      	movs	r0, #1
 8004e16:	f00c ff1d 	bl	8011c54 <ulTaskNotifyTake>
 8004e1a:	6178      	str	r0, [r7, #20]
       	    if (notification){ //not a timeout, interaction started
 8004e1c:	697b      	ldr	r3, [r7, #20]
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d001      	beq.n	8004e26 <startESMMain+0x8e>
        		keep_alerting = 0;
 8004e22:	2300      	movs	r3, #0
 8004e24:	74bb      	strb	r3, [r7, #18]
     		}
    	    if (GlobalState.programMode != MODE_ESM_TIME_ESTIMATE){
 8004e26:	4b7e      	ldr	r3, [pc, #504]	; (8005020 <startESMMain+0x288>)
 8004e28:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004e2c:	2b02      	cmp	r3, #2
 8004e2e:	d003      	beq.n	8004e38 <startESMMain+0xa0>
    	    	//button press has changed mode and canceled interaction. want to exit alert loop.
    	    	keep_alerting = 0;
 8004e30:	2300      	movs	r3, #0
 8004e32:	74bb      	strb	r3, [r7, #18]
    	    	continue_flag = 0;
 8004e34:	2300      	movs	r3, #0
 8004e36:	74fb      	strb	r3, [r7, #19]
    	while(keep_alerting){
 8004e38:	7cbb      	ldrb	r3, [r7, #18]
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d1e1      	bne.n	8004e02 <startESMMain+0x6a>
    	    }
        }

    	//SECOND SCREEN FOR ESM
    	if (continue_flag){
 8004e3e:	7cfb      	ldrb	r3, [r7, #19]
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d00c      	beq.n	8004e5e <startESMMain+0xc6>
    		//(2) Wait for notification from UI thread that indicates confirmed input
    		notification = ulTaskNotifyTake( pdTRUE, pdMS_TO_TICKS(INTERACTION_TIMEOUT));
 8004e44:	f44f 617a 	mov.w	r1, #4000	; 0xfa0
 8004e48:	2001      	movs	r0, #1
 8004e4a:	f00c ff03 	bl	8011c54 <ulTaskNotifyTake>
 8004e4e:	6178      	str	r0, [r7, #20]

    		if (GlobalState.programMode != MODE_ESM_TIME_ESTIMATE){
 8004e50:	4b73      	ldr	r3, [pc, #460]	; (8005020 <startESMMain+0x288>)
 8004e52:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004e56:	2b02      	cmp	r3, #2
 8004e58:	d001      	beq.n	8004e5e <startESMMain+0xc6>
    			//if our mode has changed, we had a dismiss/snooze event
    			continue_flag = 0;
 8004e5a:	2300      	movs	r3, #0
 8004e5c:	74fb      	strb	r3, [r7, #19]
    		}
    	}

    	if (continue_flag){
 8004e5e:	7cfb      	ldrb	r3, [r7, #19]
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d04d      	beq.n	8004f00 <startESMMain+0x168>
    		if (notification){//not timed out, had a confirmed event
 8004e64:	697b      	ldr	r3, [r7, #20]
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d038      	beq.n	8004edc <startESMMain+0x144>
    			//set up next interaction
    			//set up survey
    			osMutexAcquire(surveyMutexHandle, portMAX_DELAY);
 8004e6a:	4b71      	ldr	r3, [pc, #452]	; (8005030 <startESMMain+0x298>)
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	f04f 31ff 	mov.w	r1, #4294967295
 8004e72:	4618      	mov	r0, r3
 8004e74:	f009 fdd6 	bl	800ea24 <osMutexAcquire>
    			strncpy(GlobalState.surveyState.screenText, "  FOCUS?", strlen("  FOCUS?") + 1);
 8004e78:	4a6e      	ldr	r2, [pc, #440]	; (8005034 <startESMMain+0x29c>)
 8004e7a:	4b6f      	ldr	r3, [pc, #444]	; (8005038 <startESMMain+0x2a0>)
 8004e7c:	cb03      	ldmia	r3!, {r0, r1}
 8004e7e:	6010      	str	r0, [r2, #0]
 8004e80:	6051      	str	r1, [r2, #4]
 8004e82:	781b      	ldrb	r3, [r3, #0]
 8004e84:	7213      	strb	r3, [r2, #8]
    			GlobalState.surveyState.screenTextLength = strlen("  FOCUS?");
 8004e86:	4b66      	ldr	r3, [pc, #408]	; (8005020 <startESMMain+0x288>)
 8004e88:	2208      	movs	r2, #8
 8004e8a:	f883 20c9 	strb.w	r2, [r3, #201]	; 0xc9
    			GlobalState.surveyState.surveyID = SURVEY_FOCUS;
 8004e8e:	4b64      	ldr	r3, [pc, #400]	; (8005020 <startESMMain+0x288>)
 8004e90:	2201      	movs	r2, #1
 8004e92:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    			//GlobalState.surveyState.optionArray = opts_five;
    			memcpy(GlobalState.surveyState.optionArray, opts_five, sizeof(opts_five));
 8004e96:	4b62      	ldr	r3, [pc, #392]	; (8005020 <startESMMain+0x288>)
 8004e98:	4a68      	ldr	r2, [pc, #416]	; (800503c <startESMMain+0x2a4>)
 8004e9a:	f103 04cc 	add.w	r4, r3, #204	; 0xcc
 8004e9e:	4615      	mov	r5, r2
 8004ea0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004ea2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004ea4:	682b      	ldr	r3, [r5, #0]
 8004ea6:	6023      	str	r3, [r4, #0]
    			GlobalState.surveyState.optionArrayLength = 5;
 8004ea8:	4b5d      	ldr	r3, [pc, #372]	; (8005020 <startESMMain+0x288>)
 8004eaa:	2205      	movs	r2, #5
 8004eac:	f883 20e8 	strb.w	r2, [r3, #232]	; 0xe8
    			osMutexRelease(surveyMutexHandle);
 8004eb0:	4b5f      	ldr	r3, [pc, #380]	; (8005030 <startESMMain+0x298>)
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	4618      	mov	r0, r3
 8004eb6:	f009 fe13 	bl	800eae0 <osMutexRelease>

    			//programMode
    			osMutexAcquire(modeMutexHandle, portMAX_DELAY);
 8004eba:	4b5b      	ldr	r3, [pc, #364]	; (8005028 <startESMMain+0x290>)
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	f04f 31ff 	mov.w	r1, #4294967295
 8004ec2:	4618      	mov	r0, r3
 8004ec4:	f009 fdae 	bl	800ea24 <osMutexAcquire>
    			GlobalState.programMode = MODE_ESM_SURVEY;
 8004ec8:	4b55      	ldr	r3, [pc, #340]	; (8005020 <startESMMain+0x288>)
 8004eca:	2203      	movs	r2, #3
 8004ecc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    			osMutexRelease(modeMutexHandle);
 8004ed0:	4b55      	ldr	r3, [pc, #340]	; (8005028 <startESMMain+0x290>)
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	4618      	mov	r0, r3
 8004ed6:	f009 fe03 	bl	800eae0 <osMutexRelease>
 8004eda:	e011      	b.n	8004f00 <startESMMain+0x168>

    		} else {//timed out due to inactivity
    			continue_flag = 0;
 8004edc:	2300      	movs	r3, #0
 8004ede:	74fb      	strb	r3, [r7, #19]

    			osMutexAcquire(modeMutexHandle, portMAX_DELAY);
 8004ee0:	4b51      	ldr	r3, [pc, #324]	; (8005028 <startESMMain+0x290>)
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	f04f 31ff 	mov.w	r1, #4294967295
 8004ee8:	4618      	mov	r0, r3
 8004eea:	f009 fd9b 	bl	800ea24 <osMutexAcquire>
    			GlobalState.programMode = MODE_CLEAR;
 8004eee:	4b4c      	ldr	r3, [pc, #304]	; (8005020 <startESMMain+0x288>)
 8004ef0:	2207      	movs	r2, #7
 8004ef2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    			osMutexRelease(modeMutexHandle);
 8004ef6:	4b4c      	ldr	r3, [pc, #304]	; (8005028 <startESMMain+0x290>)
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	4618      	mov	r0, r3
 8004efc:	f009 fdf0 	bl	800eae0 <osMutexRelease>
    		}
    	}

    	//THIRD SCREEN FOR ESM
		if (continue_flag){
 8004f00:	7cfb      	ldrb	r3, [r7, #19]
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d00c      	beq.n	8004f20 <startESMMain+0x188>
			//(2) Wait for notification from UI thread that indicates confirmed input
			notification = ulTaskNotifyTake( pdTRUE, pdMS_TO_TICKS(INTERACTION_TIMEOUT));
 8004f06:	f44f 617a 	mov.w	r1, #4000	; 0xfa0
 8004f0a:	2001      	movs	r0, #1
 8004f0c:	f00c fea2 	bl	8011c54 <ulTaskNotifyTake>
 8004f10:	6178      	str	r0, [r7, #20]

			if (GlobalState.programMode != MODE_ESM_SURVEY){
 8004f12:	4b43      	ldr	r3, [pc, #268]	; (8005020 <startESMMain+0x288>)
 8004f14:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004f18:	2b03      	cmp	r3, #3
 8004f1a:	d001      	beq.n	8004f20 <startESMMain+0x188>
				//if our mode has changed, we had a dismiss/snooze event
				continue_flag = 0;
 8004f1c:	2300      	movs	r3, #0
 8004f1e:	74fb      	strb	r3, [r7, #19]
			}
		}

		if (continue_flag){
 8004f20:	7cfb      	ldrb	r3, [r7, #19]
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d041      	beq.n	8004faa <startESMMain+0x212>
			if (notification){//not timed out, had a confirmed event
 8004f26:	697b      	ldr	r3, [r7, #20]
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d02c      	beq.n	8004f86 <startESMMain+0x1ee>
				//set up next interaction
				//set up survey
				osMutexAcquire(surveyMutexHandle, portMAX_DELAY);
 8004f2c:	4b40      	ldr	r3, [pc, #256]	; (8005030 <startESMMain+0x298>)
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	f04f 31ff 	mov.w	r1, #4294967295
 8004f34:	4618      	mov	r0, r3
 8004f36:	f009 fd75 	bl	800ea24 <osMutexAcquire>
				strncpy(GlobalState.surveyState.screenText, "  TIME CUE", strlen("  TIME CUE") + 1);
 8004f3a:	4a3e      	ldr	r2, [pc, #248]	; (8005034 <startESMMain+0x29c>)
 8004f3c:	4b40      	ldr	r3, [pc, #256]	; (8005040 <startESMMain+0x2a8>)
 8004f3e:	cb03      	ldmia	r3!, {r0, r1}
 8004f40:	6010      	str	r0, [r2, #0]
 8004f42:	6051      	str	r1, [r2, #4]
 8004f44:	8819      	ldrh	r1, [r3, #0]
 8004f46:	789b      	ldrb	r3, [r3, #2]
 8004f48:	8111      	strh	r1, [r2, #8]
 8004f4a:	7293      	strb	r3, [r2, #10]
				GlobalState.surveyState.screenTextLength = strlen("  TIME CUE");
 8004f4c:	4b34      	ldr	r3, [pc, #208]	; (8005020 <startESMMain+0x288>)
 8004f4e:	220a      	movs	r2, #10
 8004f50:	f883 20c9 	strb.w	r2, [r3, #201]	; 0xc9
				GlobalState.surveyState.surveyID = SURVEY_TIMECUE;
 8004f54:	4b32      	ldr	r3, [pc, #200]	; (8005020 <startESMMain+0x288>)
 8004f56:	2205      	movs	r2, #5
 8004f58:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
				//&(GlobalState.surveyState.optionArray) = &opts_agree;
				memcpy(GlobalState.surveyState.optionArray, opts_agree, sizeof(opts_agree));
 8004f5c:	4b30      	ldr	r3, [pc, #192]	; (8005020 <startESMMain+0x288>)
 8004f5e:	4a39      	ldr	r2, [pc, #228]	; (8005044 <startESMMain+0x2ac>)
 8004f60:	f103 04cc 	add.w	r4, r3, #204	; 0xcc
 8004f64:	4615      	mov	r5, r2
 8004f66:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004f68:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004f6a:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8004f6e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
				GlobalState.surveyState.optionArrayLength = 2;
 8004f72:	4b2b      	ldr	r3, [pc, #172]	; (8005020 <startESMMain+0x288>)
 8004f74:	2202      	movs	r2, #2
 8004f76:	f883 20e8 	strb.w	r2, [r3, #232]	; 0xe8
				osMutexRelease(surveyMutexHandle);
 8004f7a:	4b2d      	ldr	r3, [pc, #180]	; (8005030 <startESMMain+0x298>)
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	4618      	mov	r0, r3
 8004f80:	f009 fdae 	bl	800eae0 <osMutexRelease>
 8004f84:	e011      	b.n	8004faa <startESMMain+0x212>

			} else {//timed out due to inactivity
				continue_flag = 0;
 8004f86:	2300      	movs	r3, #0
 8004f88:	74fb      	strb	r3, [r7, #19]

				osMutexAcquire(modeMutexHandle, portMAX_DELAY);
 8004f8a:	4b27      	ldr	r3, [pc, #156]	; (8005028 <startESMMain+0x290>)
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	f04f 31ff 	mov.w	r1, #4294967295
 8004f92:	4618      	mov	r0, r3
 8004f94:	f009 fd46 	bl	800ea24 <osMutexAcquire>
				GlobalState.programMode = MODE_CLEAR;
 8004f98:	4b21      	ldr	r3, [pc, #132]	; (8005020 <startESMMain+0x288>)
 8004f9a:	2207      	movs	r2, #7
 8004f9c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
				osMutexRelease(modeMutexHandle);
 8004fa0:	4b21      	ldr	r3, [pc, #132]	; (8005028 <startESMMain+0x290>)
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	4618      	mov	r0, r3
 8004fa6:	f009 fd9b 	bl	800eae0 <osMutexRelease>
			}
		}


		//FINISH ESM; SHOW TIME
		if (continue_flag){
 8004faa:	7cfb      	ldrb	r3, [r7, #19]
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d00c      	beq.n	8004fca <startESMMain+0x232>
			//(2) Wait for notification from UI thread that indicates confirmed input
			notification = ulTaskNotifyTake( pdTRUE, pdMS_TO_TICKS(INTERACTION_TIMEOUT));
 8004fb0:	f44f 617a 	mov.w	r1, #4000	; 0xfa0
 8004fb4:	2001      	movs	r0, #1
 8004fb6:	f00c fe4d 	bl	8011c54 <ulTaskNotifyTake>
 8004fba:	6178      	str	r0, [r7, #20]

			if (GlobalState.programMode != MODE_ESM_SURVEY){
 8004fbc:	4b18      	ldr	r3, [pc, #96]	; (8005020 <startESMMain+0x288>)
 8004fbe:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004fc2:	2b03      	cmp	r3, #3
 8004fc4:	d001      	beq.n	8004fca <startESMMain+0x232>
				//if our mode has changed, we had a dismiss/snooze event
				continue_flag = 0;
 8004fc6:	2300      	movs	r3, #0
 8004fc8:	74fb      	strb	r3, [r7, #19]
			}
		}

		if (continue_flag){
 8004fca:	7cfb      	ldrb	r3, [r7, #19]
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	f43f aeef 	beq.w	8004db0 <startESMMain+0x18>
			if (notification){//not timed out, had a confirmed event
 8004fd2:	697b      	ldr	r3, [r7, #20]
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d010      	beq.n	8004ffa <startESMMain+0x262>
				//completed survey with no problem!

				//back to rest, show time
				osMutexAcquire(modeMutexHandle, portMAX_DELAY);
 8004fd8:	4b13      	ldr	r3, [pc, #76]	; (8005028 <startESMMain+0x290>)
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	f04f 31ff 	mov.w	r1, #4294967295
 8004fe0:	4618      	mov	r0, r3
 8004fe2:	f009 fd1f 	bl	800ea24 <osMutexAcquire>
				GlobalState.programMode = MODE_SHOW_TIME;
 8004fe6:	4b0e      	ldr	r3, [pc, #56]	; (8005020 <startESMMain+0x288>)
 8004fe8:	2205      	movs	r2, #5
 8004fea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
				osMutexRelease(modeMutexHandle);;
 8004fee:	4b0e      	ldr	r3, [pc, #56]	; (8005028 <startESMMain+0x290>)
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	4618      	mov	r0, r3
 8004ff4:	f009 fd74 	bl	800eae0 <osMutexRelease>
 8004ff8:	e6da      	b.n	8004db0 <startESMMain+0x18>
				//pick a new interval
				//TODO: implement me!!!!!!!!!!!!!!!!!!!!!


			} else {//timed out due to inactivity
				continue_flag = 0;
 8004ffa:	2300      	movs	r3, #0
 8004ffc:	74fb      	strb	r3, [r7, #19]

				osMutexAcquire(modeMutexHandle, portMAX_DELAY);
 8004ffe:	4b0a      	ldr	r3, [pc, #40]	; (8005028 <startESMMain+0x290>)
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	f04f 31ff 	mov.w	r1, #4294967295
 8005006:	4618      	mov	r0, r3
 8005008:	f009 fd0c 	bl	800ea24 <osMutexAcquire>
				GlobalState.programMode = MODE_CLEAR;
 800500c:	4b04      	ldr	r3, [pc, #16]	; (8005020 <startESMMain+0x288>)
 800500e:	2207      	movs	r2, #7
 8005010:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
				osMutexRelease(modeMutexHandle);
 8005014:	4b04      	ldr	r3, [pc, #16]	; (8005028 <startESMMain+0x290>)
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	4618      	mov	r0, r3
 800501a:	f009 fd61 	bl	800eae0 <osMutexRelease>
    osDelay(10000);
 800501e:	e6c7      	b.n	8004db0 <startESMMain+0x18>
 8005020:	200077c4 	.word	0x200077c4
 8005024:	200079ac 	.word	0x200079ac
 8005028:	2000794c 	.word	0x2000794c
 800502c:	200078e8 	.word	0x200078e8
 8005030:	20007940 	.word	0x20007940
 8005034:	2000780d 	.word	0x2000780d
 8005038:	08016e84 	.word	0x08016e84
 800503c:	08017e2c 	.word	0x08017e2c
 8005040:	08016e90 	.word	0x08016e90
 8005044:	08017e40 	.word	0x08017e40

08005048 <startButtonPress>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_startButtonPress */
void startButtonPress(void *argument)
{
 8005048:	b580      	push	{r7, lr}
 800504a:	b086      	sub	sp, #24
 800504c:	af00      	add	r7, sp, #0
 800504e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN startButtonPress */
  /* Infinite loop */

  //Buttons are PULLED UP and drop to 0 when pressed
  uint8_t buttonState[] = {1, 1, 1};
 8005050:	4a4c      	ldr	r2, [pc, #304]	; (8005184 <startButtonPress+0x13c>)
 8005052:	f107 0314 	add.w	r3, r7, #20
 8005056:	6812      	ldr	r2, [r2, #0]
 8005058:	4611      	mov	r1, r2
 800505a:	8019      	strh	r1, [r3, #0]
 800505c:	3302      	adds	r3, #2
 800505e:	0c12      	lsrs	r2, r2, #16
 8005060:	701a      	strb	r2, [r3, #0]
  uint32_t callingPin = 0x00;
 8005062:	2300      	movs	r3, #0
 8005064:	613b      	str	r3, [r7, #16]

  const BLETX_Queue_t bleSendData = {TX_LAST_SURVEY_INVALID, 0x0000};
 8005066:	2306      	movs	r3, #6
 8005068:	733b      	strb	r3, [r7, #12]
 800506a:	2300      	movs	r3, #0
 800506c:	81fb      	strh	r3, [r7, #14]

  for(;;)
  {
	//wait for rising or falling edge trigger, put calling pin in callingPin
	xTaskNotifyWait(0x00, 0x00, &callingPin, portMAX_DELAY);
 800506e:	f107 0210 	add.w	r2, r7, #16
 8005072:	f04f 33ff 	mov.w	r3, #4294967295
 8005076:	2100      	movs	r1, #0
 8005078:	2000      	movs	r0, #0
 800507a:	f00c fe33 	bl	8011ce4 <xTaskNotifyWait>

	//check state of pin
	GPIO_PinState first_read = HAL_GPIO_ReadPin(GPIOB, callingPin);
 800507e:	693b      	ldr	r3, [r7, #16]
 8005080:	b29b      	uxth	r3, r3
 8005082:	4619      	mov	r1, r3
 8005084:	4840      	ldr	r0, [pc, #256]	; (8005188 <startButtonPress+0x140>)
 8005086:	f001 fdf5 	bl	8006c74 <HAL_GPIO_ReadPin>
 800508a:	4603      	mov	r3, r0
 800508c:	75fb      	strb	r3, [r7, #23]

	//wait 50ms
    osDelay(50);
 800508e:	2032      	movs	r0, #50	; 0x32
 8005090:	f009 fc00 	bl	800e894 <osDelay>

    //check again (debounce) to get a good reading
	if (first_read == HAL_GPIO_ReadPin(GPIOB, callingPin)){
 8005094:	693b      	ldr	r3, [r7, #16]
 8005096:	b29b      	uxth	r3, r3
 8005098:	4619      	mov	r1, r3
 800509a:	483b      	ldr	r0, [pc, #236]	; (8005188 <startButtonPress+0x140>)
 800509c:	f001 fdea 	bl	8006c74 <HAL_GPIO_ReadPin>
 80050a0:	4603      	mov	r3, r0
 80050a2:	461a      	mov	r2, r3
 80050a4:	7dfb      	ldrb	r3, [r7, #23]
 80050a6:	4293      	cmp	r3, r2
 80050a8:	d1e1      	bne.n	800506e <startButtonPress+0x26>
		//when this happens (except during debouncing) so we expect this to be true
		//almost always

		//callingPin can be used as bitmask Pin 5/4/3 give 1000000/10000/1000

		if (callingPin == 0b1000 && first_read != buttonState[0]) { //button 1 trigger
 80050aa:	693b      	ldr	r3, [r7, #16]
 80050ac:	2b08      	cmp	r3, #8
 80050ae:	d120      	bne.n	80050f2 <startButtonPress+0xaa>
 80050b0:	7d3b      	ldrb	r3, [r7, #20]
 80050b2:	7dfa      	ldrb	r2, [r7, #23]
 80050b4:	429a      	cmp	r2, r3
 80050b6:	d01c      	beq.n	80050f2 <startButtonPress+0xaa>
		  //set buttonState
		  buttonState[0] = first_read;
 80050b8:	7dfb      	ldrb	r3, [r7, #23]
 80050ba:	753b      	strb	r3, [r7, #20]

		  //do stuff if button pressed
		  if (!first_read){
 80050bc:	7dfb      	ldrb	r3, [r7, #23]
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d117      	bne.n	80050f2 <startButtonPress+0xaa>
			  osMessageQueuePut(bleTXqueueHandle, &bleSendData, 0, 0);
 80050c2:	4b32      	ldr	r3, [pc, #200]	; (800518c <startButtonPress+0x144>)
 80050c4:	6818      	ldr	r0, [r3, #0]
 80050c6:	f107 010c 	add.w	r1, r7, #12
 80050ca:	2300      	movs	r3, #0
 80050cc:	2200      	movs	r2, #0
 80050ce:	f009 ff39 	bl	800ef44 <osMessageQueuePut>

			  osMutexAcquire(modeMutexHandle, portMAX_DELAY);
 80050d2:	4b2f      	ldr	r3, [pc, #188]	; (8005190 <startButtonPress+0x148>)
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	f04f 31ff 	mov.w	r1, #4294967295
 80050da:	4618      	mov	r0, r3
 80050dc:	f009 fca2 	bl	800ea24 <osMutexAcquire>
			  GlobalState.programMode = MODE_CANCEL;
 80050e0:	4b2c      	ldr	r3, [pc, #176]	; (8005194 <startButtonPress+0x14c>)
 80050e2:	2204      	movs	r2, #4
 80050e4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			  osMutexRelease(modeMutexHandle);
 80050e8:	4b29      	ldr	r3, [pc, #164]	; (8005190 <startButtonPress+0x148>)
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	4618      	mov	r0, r3
 80050ee:	f009 fcf7 	bl	800eae0 <osMutexRelease>
			  //TODO: pick new interval
			  /////////////////////////
		  }

		}
		if (callingPin == 0b10000 && first_read != buttonState[1]) { //button 2 trigger
 80050f2:	693b      	ldr	r3, [r7, #16]
 80050f4:	2b10      	cmp	r3, #16
 80050f6:	d120      	bne.n	800513a <startButtonPress+0xf2>
 80050f8:	7d7b      	ldrb	r3, [r7, #21]
 80050fa:	7dfa      	ldrb	r2, [r7, #23]
 80050fc:	429a      	cmp	r2, r3
 80050fe:	d01c      	beq.n	800513a <startButtonPress+0xf2>
		    //set buttonState
		    buttonState[1] = first_read;
 8005100:	7dfb      	ldrb	r3, [r7, #23]
 8005102:	757b      	strb	r3, [r7, #21]

		    //do stuff if button pressed
		    if (!first_read){
 8005104:	7dfb      	ldrb	r3, [r7, #23]
 8005106:	2b00      	cmp	r3, #0
 8005108:	d117      	bne.n	800513a <startButtonPress+0xf2>
		    	osMessageQueuePut(bleTXqueueHandle, &bleSendData, 0, 0);
 800510a:	4b20      	ldr	r3, [pc, #128]	; (800518c <startButtonPress+0x144>)
 800510c:	6818      	ldr	r0, [r3, #0]
 800510e:	f107 010c 	add.w	r1, r7, #12
 8005112:	2300      	movs	r3, #0
 8005114:	2200      	movs	r2, #0
 8005116:	f009 ff15 	bl	800ef44 <osMessageQueuePut>

		    	osMutexAcquire(modeMutexHandle, portMAX_DELAY);
 800511a:	4b1d      	ldr	r3, [pc, #116]	; (8005190 <startButtonPress+0x148>)
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	f04f 31ff 	mov.w	r1, #4294967295
 8005122:	4618      	mov	r0, r3
 8005124:	f009 fc7e 	bl	800ea24 <osMutexAcquire>
		    	GlobalState.programMode = MODE_CANCEL;
 8005128:	4b1a      	ldr	r3, [pc, #104]	; (8005194 <startButtonPress+0x14c>)
 800512a:	2204      	movs	r2, #4
 800512c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		    	osMutexRelease(modeMutexHandle);
 8005130:	4b17      	ldr	r3, [pc, #92]	; (8005190 <startButtonPress+0x148>)
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	4618      	mov	r0, r3
 8005136:	f009 fcd3 	bl	800eae0 <osMutexRelease>

		    	//TODO: pick new interval
				/////////////////////////
		    }
		}
		if (callingPin == 0b100000 && first_read != buttonState[2]) { //button 3 trigger
 800513a:	693b      	ldr	r3, [r7, #16]
 800513c:	2b20      	cmp	r3, #32
 800513e:	d196      	bne.n	800506e <startButtonPress+0x26>
 8005140:	7dbb      	ldrb	r3, [r7, #22]
 8005142:	7dfa      	ldrb	r2, [r7, #23]
 8005144:	429a      	cmp	r2, r3
 8005146:	d092      	beq.n	800506e <startButtonPress+0x26>
		    //set buttonState
		    buttonState[2] = first_read;
 8005148:	7dfb      	ldrb	r3, [r7, #23]
 800514a:	75bb      	strb	r3, [r7, #22]

		    //do stuff if button pressed
		    if (!first_read){
 800514c:	7dfb      	ldrb	r3, [r7, #23]
 800514e:	2b00      	cmp	r3, #0
 8005150:	d18d      	bne.n	800506e <startButtonPress+0x26>
		    	osMessageQueuePut(bleTXqueueHandle, &bleSendData, 0, 0);
 8005152:	4b0e      	ldr	r3, [pc, #56]	; (800518c <startButtonPress+0x144>)
 8005154:	6818      	ldr	r0, [r3, #0]
 8005156:	f107 010c 	add.w	r1, r7, #12
 800515a:	2300      	movs	r3, #0
 800515c:	2200      	movs	r2, #0
 800515e:	f009 fef1 	bl	800ef44 <osMessageQueuePut>

		    	osMutexAcquire(modeMutexHandle, portMAX_DELAY);
 8005162:	4b0b      	ldr	r3, [pc, #44]	; (8005190 <startButtonPress+0x148>)
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	f04f 31ff 	mov.w	r1, #4294967295
 800516a:	4618      	mov	r0, r3
 800516c:	f009 fc5a 	bl	800ea24 <osMutexAcquire>
		    	GlobalState.programMode = MODE_CANCEL;
 8005170:	4b08      	ldr	r3, [pc, #32]	; (8005194 <startButtonPress+0x14c>)
 8005172:	2204      	movs	r2, #4
 8005174:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		        osMutexRelease(modeMutexHandle);
 8005178:	4b05      	ldr	r3, [pc, #20]	; (8005190 <startButtonPress+0x148>)
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	4618      	mov	r0, r3
 800517e:	f009 fcaf 	bl	800eae0 <osMutexRelease>
  {
 8005182:	e774      	b.n	800506e <startButtonPress+0x26>
 8005184:	08016e9c 	.word	0x08016e9c
 8005188:	48000400 	.word	0x48000400
 800518c:	200079ac 	.word	0x200079ac
 8005190:	2000794c 	.word	0x2000794c
 8005194:	200077c4 	.word	0x200077c4

08005198 <startAlert>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_startAlert */
void startAlert(void *argument)
{
 8005198:	b580      	push	{r7, lr}
 800519a:	b088      	sub	sp, #32
 800519c:	af00      	add	r7, sp, #0
 800519e:	6078      	str	r0, [r7, #4]
  //xTaskNotifyGive(alertHandle); to alert user with flash and vibration

  //HAL_GPIO_WritePin(VIBRATION_GPIO_Port, VIBRATION_Pin, GPIO_PIN_RESET);

  //Init Vibration Motor PWM Parameters
  int duty_cycle = 79; //0 is off, up to ~80
 80051a0:	234f      	movs	r3, #79	; 0x4f
 80051a2:	61bb      	str	r3, [r7, #24]
  htim1.Instance->CCR2 = duty_cycle;
 80051a4:	4b34      	ldr	r3, [pc, #208]	; (8005278 <startAlert+0xe0>)
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	69ba      	ldr	r2, [r7, #24]
 80051aa:	639a      	str	r2, [r3, #56]	; 0x38

  //Dotstar Init
  DotStar_InitHandle dotstar;
  dotstar.spiHandle = &hspi1;
 80051ac:	4b33      	ldr	r3, [pc, #204]	; (800527c <startAlert+0xe4>)
 80051ae:	60fb      	str	r3, [r7, #12]
  dotstar.numLEDs = NUM_PIXELS;
 80051b0:	230c      	movs	r3, #12
 80051b2:	823b      	strh	r3, [r7, #16]
  dotstar.colorOrder = DOTSTAR_BGR;
 80051b4:	2306      	movs	r3, #6
 80051b6:	74bb      	strb	r3, [r7, #18]
  Dotstar_Init(&dotstar);
 80051b8:	f107 030c 	add.w	r3, r7, #12
 80051bc:	4618      	mov	r0, r3
 80051be:	f7fc ffad 	bl	800211c <Dotstar_Init>

  ds_clear();  //turn off
 80051c2:	f7fd f897 	bl	80022f4 <ds_clear>
  ds_show();
 80051c6:	f7fc fff9 	bl	80021bc <ds_show>

  const uint8_t MAX_BRIGHTNESS = 0x33; //max brightness, 0x01-0xFF
 80051ca:	2333      	movs	r3, #51	; 0x33
 80051cc:	75fb      	strb	r3, [r7, #23]

  ds_setBrightness(0);
 80051ce:	2000      	movs	r0, #0
 80051d0:	f7fd f920 	bl	8002414 <ds_setBrightness>
  osDelay(1000);
 80051d4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80051d8:	f009 fb5c 	bl	800e894 <osDelay>

  /* Infinite loop */
  for(;;)
  {

	counter = 0;
 80051dc:	2300      	movs	r3, #0
 80051de:	83fb      	strh	r3, [r7, #30]
	LEDDirection = 0;
 80051e0:	2300      	movs	r3, #0
 80051e2:	777b      	strb	r3, [r7, #29]
	LEDBrightness = 0;
 80051e4:	2300      	movs	r3, #0
 80051e6:	773b      	strb	r3, [r7, #28]

	ulTaskNotifyTake( pdTRUE, portMAX_DELAY);
 80051e8:	f04f 31ff 	mov.w	r1, #4294967295
 80051ec:	2001      	movs	r0, #1
 80051ee:	f00c fd31 	bl	8011c54 <ulTaskNotifyTake>

	//start vibration
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80051f2:	2100      	movs	r1, #0
 80051f4:	4820      	ldr	r0, [pc, #128]	; (8005278 <startAlert+0xe0>)
 80051f6:	f005 fb6f 	bl	800a8d8 <HAL_TIM_PWM_Start>

	//flash loop
	ds_fill(0xFFFFFF, 0, 12);
 80051fa:	220c      	movs	r2, #12
 80051fc:	2100      	movs	r1, #0
 80051fe:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8005202:	f7fd f8d1 	bl	80023a8 <ds_fill>

	while (counter++ < MAX_BRIGHTNESS*2) {
 8005206:	e01d      	b.n	8005244 <startAlert+0xac>

		ds_setBrightness(LEDBrightness);
 8005208:	7f3b      	ldrb	r3, [r7, #28]
 800520a:	4618      	mov	r0, r3
 800520c:	f7fd f902 	bl	8002414 <ds_setBrightness>
		ds_show();
 8005210:	f7fc ffd4 	bl	80021bc <ds_show>

		//increment color intensity
		if (LEDDirection) {LEDBrightness--;}
 8005214:	7f7b      	ldrb	r3, [r7, #29]
 8005216:	2b00      	cmp	r3, #0
 8005218:	d003      	beq.n	8005222 <startAlert+0x8a>
 800521a:	7f3b      	ldrb	r3, [r7, #28]
 800521c:	3b01      	subs	r3, #1
 800521e:	773b      	strb	r3, [r7, #28]
 8005220:	e002      	b.n	8005228 <startAlert+0x90>
		else {LEDBrightness++;}
 8005222:	7f3b      	ldrb	r3, [r7, #28]
 8005224:	3301      	adds	r3, #1
 8005226:	773b      	strb	r3, [r7, #28]

		//if we hit a limit switch color scaling up or down
		if (LEDBrightness == MAX_BRIGHTNESS) {LEDDirection = 1;}
 8005228:	7f3a      	ldrb	r2, [r7, #28]
 800522a:	7dfb      	ldrb	r3, [r7, #23]
 800522c:	429a      	cmp	r2, r3
 800522e:	d101      	bne.n	8005234 <startAlert+0x9c>
 8005230:	2301      	movs	r3, #1
 8005232:	777b      	strb	r3, [r7, #29]
		if (LEDBrightness == 0x00) {LEDDirection = 0;}
 8005234:	7f3b      	ldrb	r3, [r7, #28]
 8005236:	2b00      	cmp	r3, #0
 8005238:	d101      	bne.n	800523e <startAlert+0xa6>
 800523a:	2300      	movs	r3, #0
 800523c:	777b      	strb	r3, [r7, #29]

		osDelay(pdMS_TO_TICKS(2)); //2ms delay
 800523e:	2002      	movs	r0, #2
 8005240:	f009 fb28 	bl	800e894 <osDelay>
	while (counter++ < MAX_BRIGHTNESS*2) {
 8005244:	8bfb      	ldrh	r3, [r7, #30]
 8005246:	1c5a      	adds	r2, r3, #1
 8005248:	83fa      	strh	r2, [r7, #30]
 800524a:	461a      	mov	r2, r3
 800524c:	7dfb      	ldrb	r3, [r7, #23]
 800524e:	005b      	lsls	r3, r3, #1
 8005250:	429a      	cmp	r2, r3
 8005252:	dbd9      	blt.n	8005208 <startAlert+0x70>
	}

	//turn off LEDs
	ds_setBrightness(0);
 8005254:	2000      	movs	r0, #0
 8005256:	f7fd f8dd 	bl	8002414 <ds_setBrightness>
	ds_fill(0x000000, 0, 12);
 800525a:	220c      	movs	r2, #12
 800525c:	2100      	movs	r1, #0
 800525e:	2000      	movs	r0, #0
 8005260:	f7fd f8a2 	bl	80023a8 <ds_fill>
	ds_show();
 8005264:	f7fc ffaa 	bl	80021bc <ds_show>

	osDelay(pdMS_TO_TICKS(100)); //100ms delay
 8005268:	2064      	movs	r0, #100	; 0x64
 800526a:	f009 fb13 	bl	800e894 <osDelay>

    //stop vibration
    HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 800526e:	2100      	movs	r1, #0
 8005270:	4801      	ldr	r0, [pc, #4]	; (8005278 <startAlert+0xe0>)
 8005272:	f005 fc0b 	bl	800aa8c <HAL_TIM_PWM_Stop>
	counter = 0;
 8005276:	e7b1      	b.n	80051dc <startAlert+0x44>
 8005278:	20007960 	.word	0x20007960
 800527c:	200079b8 	.word	0x200079b8

08005280 <startConditionsPoll>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_startConditionsPoll */
void startConditionsPoll(void *argument)
{
 8005280:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005282:	b099      	sub	sp, #100	; 0x64
 8005284:	af10      	add	r7, sp, #64	; 0x40
 8005286:	6078      	str	r0, [r7, #4]
	osDelay(500); //let screen start first
 8005288:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800528c:	f009 fb02 	bl	800e894 <osDelay>

	//poll ambient temp, humidity, visible light, white light
	//every 5sec
  	if (veml_Setup(hi2c1, VEML_5S_POLLING) == HAL_ERROR){
 8005290:	4e46      	ldr	r6, [pc, #280]	; (80053ac <startConditionsPoll+0x12c>)
 8005292:	2300      	movs	r3, #0
 8005294:	930f      	str	r3, [sp, #60]	; 0x3c
 8005296:	466d      	mov	r5, sp
 8005298:	f106 0410 	add.w	r4, r6, #16
 800529c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800529e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80052a0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80052a2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80052a4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80052a6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80052a8:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80052ac:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 80052b0:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80052b4:	f000 fe1e 	bl	8005ef4 <veml_Setup>
 80052b8:	4603      	mov	r3, r0
 80052ba:	2b01      	cmp	r3, #1
 80052bc:	d10c      	bne.n	80052d8 <startConditionsPoll+0x58>
  		//error condition
  		strncpy(errorCondition, "ERR:VEML7700", sizeof(errorCondition));
 80052be:	4a3c      	ldr	r2, [pc, #240]	; (80053b0 <startConditionsPoll+0x130>)
 80052c0:	4b3c      	ldr	r3, [pc, #240]	; (80053b4 <startConditionsPoll+0x134>)
 80052c2:	4614      	mov	r4, r2
 80052c4:	cb07      	ldmia	r3!, {r0, r1, r2}
 80052c6:	6020      	str	r0, [r4, #0]
 80052c8:	6061      	str	r1, [r4, #4]
 80052ca:	60a2      	str	r2, [r4, #8]
 80052cc:	781b      	ldrb	r3, [r3, #0]
 80052ce:	7323      	strb	r3, [r4, #12]
  	    GlobalState.programMode = MODE_ERROR;
 80052d0:	4b39      	ldr	r3, [pc, #228]	; (80053b8 <startConditionsPoll+0x138>)
 80052d2:	2206      	movs	r2, #6
 80052d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  	}

  	osDelay(10);
 80052d8:	200a      	movs	r0, #10
 80052da:	f009 fadb 	bl	800e894 <osDelay>

  	if (si7021_set_config(&hi2c1, SI7021_HEATER_OFF, SI7021_RESOLUTION_RH12_TEMP14) == HAL_ERROR) {
 80052de:	2200      	movs	r2, #0
 80052e0:	2100      	movs	r1, #0
 80052e2:	4832      	ldr	r0, [pc, #200]	; (80053ac <startConditionsPoll+0x12c>)
 80052e4:	f000 fa22 	bl	800572c <si7021_set_config>
 80052e8:	4603      	mov	r3, r0
 80052ea:	2b01      	cmp	r3, #1
 80052ec:	d10c      	bne.n	8005308 <startConditionsPoll+0x88>
  		//error condition
  		strncpy(errorCondition, "ERR:SI7021CF", sizeof(errorCondition));
 80052ee:	4a30      	ldr	r2, [pc, #192]	; (80053b0 <startConditionsPoll+0x130>)
 80052f0:	4b32      	ldr	r3, [pc, #200]	; (80053bc <startConditionsPoll+0x13c>)
 80052f2:	4614      	mov	r4, r2
 80052f4:	cb07      	ldmia	r3!, {r0, r1, r2}
 80052f6:	6020      	str	r0, [r4, #0]
 80052f8:	6061      	str	r1, [r4, #4]
 80052fa:	60a2      	str	r2, [r4, #8]
 80052fc:	781b      	ldrb	r3, [r3, #0]
 80052fe:	7323      	strb	r3, [r4, #12]
  	    GlobalState.programMode = MODE_ERROR;
 8005300:	4b2d      	ldr	r3, [pc, #180]	; (80053b8 <startConditionsPoll+0x138>)
 8005302:	2206      	movs	r2, #6
 8005304:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  	}

  	osDelay(10);
 8005308:	200a      	movs	r0, #10
 800530a:	f009 fac3 	bl	800e894 <osDelay>

  	if (si7021_set_heater_power(&hi2c1, SI7021_HEATER_POWER_3MA) == HAL_ERROR) {
 800530e:	2100      	movs	r1, #0
 8005310:	4826      	ldr	r0, [pc, #152]	; (80053ac <startConditionsPoll+0x12c>)
 8005312:	f000 fa28 	bl	8005766 <si7021_set_heater_power>
 8005316:	4603      	mov	r3, r0
 8005318:	2b01      	cmp	r3, #1
 800531a:	d10c      	bne.n	8005336 <startConditionsPoll+0xb6>
  		//error condition
  		strncpy(errorCondition, "ERR:SI7021HT", sizeof(errorCondition));
 800531c:	4a24      	ldr	r2, [pc, #144]	; (80053b0 <startConditionsPoll+0x130>)
 800531e:	4b28      	ldr	r3, [pc, #160]	; (80053c0 <startConditionsPoll+0x140>)
 8005320:	4614      	mov	r4, r2
 8005322:	cb07      	ldmia	r3!, {r0, r1, r2}
 8005324:	6020      	str	r0, [r4, #0]
 8005326:	6061      	str	r1, [r4, #4]
 8005328:	60a2      	str	r2, [r4, #8]
 800532a:	781b      	ldrb	r3, [r3, #0]
 800532c:	7323      	strb	r3, [r4, #12]
  	    GlobalState.programMode = MODE_ERROR;
 800532e:	4b22      	ldr	r3, [pc, #136]	; (80053b8 <startConditionsPoll+0x138>)
 8005330:	2206      	movs	r2, #6
 8005332:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  	float lux;
  	float whiteLux;
  	float humidity;
    float temperature;

    const BLETX_Queue_t bleSendData = {TX_TEMP_HUMD, 0x0000};
 8005336:	2301      	movs	r3, #1
 8005338:	733b      	strb	r3, [r7, #12]
 800533a:	2300      	movs	r3, #0
 800533c:	81fb      	strh	r3, [r7, #14]

  	for (;;){

  		lux = veml_Get_Lux();
 800533e:	f000 ff17 	bl	8006170 <veml_Get_Lux>
 8005342:	ed87 0a07 	vstr	s0, [r7, #28]
    	whiteLux = veml_Get_White_Lux();
 8005346:	f000 fffb 	bl	8006340 <veml_Get_White_Lux>
 800534a:	ed87 0a06 	vstr	s0, [r7, #24]
    	temperature = si7021_measure_temperature(&hi2c1);
 800534e:	4817      	ldr	r0, [pc, #92]	; (80053ac <startConditionsPoll+0x12c>)
 8005350:	f000 fa80 	bl	8005854 <si7021_measure_temperature>
 8005354:	ed87 0a05 	vstr	s0, [r7, #20]
    	humidity = si7021_measure_humidity(&hi2c1);
 8005358:	4814      	ldr	r0, [pc, #80]	; (80053ac <startConditionsPoll+0x12c>)
 800535a:	f000 fa1d 	bl	8005798 <si7021_measure_humidity>
 800535e:	ed87 0a04 	vstr	s0, [r7, #16]

    	osMutexAcquire(conditionMutexHandle, portMAX_DELAY);
 8005362:	4b18      	ldr	r3, [pc, #96]	; (80053c4 <startConditionsPoll+0x144>)
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	f04f 31ff 	mov.w	r1, #4294967295
 800536a:	4618      	mov	r0, r3
 800536c:	f009 fb5a 	bl	800ea24 <osMutexAcquire>
    	GlobalState.lastConditions.lux = lux;
 8005370:	4a11      	ldr	r2, [pc, #68]	; (80053b8 <startConditionsPoll+0x138>)
 8005372:	69fb      	ldr	r3, [r7, #28]
 8005374:	6353      	str	r3, [r2, #52]	; 0x34
    	GlobalState.lastConditions.whiteLux = whiteLux;
 8005376:	4a10      	ldr	r2, [pc, #64]	; (80053b8 <startConditionsPoll+0x138>)
 8005378:	69bb      	ldr	r3, [r7, #24]
 800537a:	6393      	str	r3, [r2, #56]	; 0x38
    	GlobalState.lastConditions.temp = temperature;
 800537c:	4a0e      	ldr	r2, [pc, #56]	; (80053b8 <startConditionsPoll+0x138>)
 800537e:	697b      	ldr	r3, [r7, #20]
 8005380:	63d3      	str	r3, [r2, #60]	; 0x3c
    	GlobalState.lastConditions.humd = humidity;
 8005382:	4a0d      	ldr	r2, [pc, #52]	; (80053b8 <startConditionsPoll+0x138>)
 8005384:	693b      	ldr	r3, [r7, #16]
 8005386:	6413      	str	r3, [r2, #64]	; 0x40
    	osMutexRelease(conditionMutexHandle);
 8005388:	4b0e      	ldr	r3, [pc, #56]	; (80053c4 <startConditionsPoll+0x144>)
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	4618      	mov	r0, r3
 800538e:	f009 fba7 	bl	800eae0 <osMutexRelease>

		osMessageQueuePut(bleTXqueueHandle, &bleSendData, 0, 0);
 8005392:	4b0d      	ldr	r3, [pc, #52]	; (80053c8 <startConditionsPoll+0x148>)
 8005394:	6818      	ldr	r0, [r3, #0]
 8005396:	f107 010c 	add.w	r1, r7, #12
 800539a:	2300      	movs	r3, #0
 800539c:	2200      	movs	r2, #0
 800539e:	f009 fdd1 	bl	800ef44 <osMessageQueuePut>

    	osDelay(9900);
 80053a2:	f242 60ac 	movw	r0, #9900	; 0x26ac
 80053a6:	f009 fa75 	bl	800e894 <osDelay>
  		lux = veml_Get_Lux();
 80053aa:	e7c8      	b.n	800533e <startConditionsPoll+0xbe>
 80053ac:	200078f0 	.word	0x200078f0
 80053b0:	200078b8 	.word	0x200078b8
 80053b4:	08016ea0 	.word	0x08016ea0
 80053b8:	200077c4 	.word	0x200077c4
 80053bc:	08016eb0 	.word	0x08016eb0
 80053c0:	08016ec0 	.word	0x08016ec0
 80053c4:	2000793c 	.word	0x2000793c
 80053c8:	200079ac 	.word	0x200079ac

080053cc <startBLETX>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_startBLETX */
void startBLETX(void *argument)
{
 80053cc:	b580      	push	{r7, lr}
 80053ce:	b084      	sub	sp, #16
 80053d0:	af00      	add	r7, sp, #0
 80053d2:	6078      	str	r0, [r7, #4]
  BLETX_Queue_t sendData;

  /* Infinite loop */
  for(;;)
  {
    if (osMessageQueueGet(bleTXqueueHandle, &sendData, NULL, osWaitForever) == osOK){
 80053d4:	4b08      	ldr	r3, [pc, #32]	; (80053f8 <startBLETX+0x2c>)
 80053d6:	6818      	ldr	r0, [r3, #0]
 80053d8:	f107 010c 	add.w	r1, r7, #12
 80053dc:	f04f 33ff 	mov.w	r3, #4294967295
 80053e0:	2200      	movs	r2, #0
 80053e2:	f009 fe23 	bl	800f02c <osMessageQueueGet>
 80053e6:	4603      	mov	r3, r0
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d1f3      	bne.n	80053d4 <startBLETX+0x8>
    	//TX_SURVEY_INITIALIZED -- just send that timestamped

    	//TX_TIMESTAMP_UPDATE -- use data in sendData for error, to send
    	//TX_SURVEY_RESULT -- use data in sendData, first byte is survey/second is answer

    	P2PS_Send_Data(sendData.data);
 80053ec:	89fb      	ldrh	r3, [r7, #14]
 80053ee:	4618      	mov	r0, r3
 80053f0:	f7fc f938 	bl	8001664 <P2PS_Send_Data>
    if (osMessageQueueGet(bleTXqueueHandle, &sendData, NULL, osWaitForever) == osOK){
 80053f4:	e7ee      	b.n	80053d4 <startBLETX+0x8>
 80053f6:	bf00      	nop
 80053f8:	200079ac 	.word	0x200079ac

080053fc <startBLERX>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_startBLERX */
void startBLERX(void *argument)
{
 80053fc:	b580      	push	{r7, lr}
 80053fe:	b08e      	sub	sp, #56	; 0x38
 8005400:	af00      	add	r7, sp, #0
 8005402:	6078      	str	r0, [r7, #4]
  P2PS_STM_Data_t rxData;

  for(;;)
  {

	if (osMessageQueueGet(bleRXqueueHandle, &rxData, NULL, osWaitForever) == osOK){
 8005404:	4b39      	ldr	r3, [pc, #228]	; (80054ec <startBLERX+0xf0>)
 8005406:	6818      	ldr	r0, [r3, #0]
 8005408:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 800540c:	f04f 33ff 	mov.w	r3, #4294967295
 8005410:	2200      	movs	r2, #0
 8005412:	f009 fe0b 	bl	800f02c <osMessageQueueGet>
 8005416:	4603      	mov	r3, r0
 8005418:	2b00      	cmp	r3, #0
 800541a:	d1f3      	bne.n	8005404 <startBLERX+0x8>

		if (rxData.pPayload[0] == 0x00) { // timestamp update starts with 0x00
 800541c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800541e:	781b      	ldrb	r3, [r3, #0]
 8005420:	2b00      	cmp	r3, #0
 8005422:	d1ef      	bne.n	8005404 <startBLERX+0x8>
			memcpy(&P2P_Server_App_Context.OTATimestamp, &(rxData.pPayload[1]), 8);
 8005424:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005426:	3301      	adds	r3, #1
 8005428:	2208      	movs	r2, #8
 800542a:	4619      	mov	r1, r3
 800542c:	4830      	ldr	r0, [pc, #192]	; (80054f0 <startBLERX+0xf4>)
 800542e:	f00d fa6b 	bl	8012908 <memcpy>
    	    P2P_Server_App_Context.OTA12HrFormat = rxData.pPayload[9];
 8005432:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005434:	7a5a      	ldrb	r2, [r3, #9]
 8005436:	4b2f      	ldr	r3, [pc, #188]	; (80054f4 <startBLERX+0xf8>)
 8005438:	741a      	strb	r2, [r3, #16]
    		P2P_Server_App_Context.OTADaylightSavings = rxData.pPayload[10];
 800543a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800543c:	7a9a      	ldrb	r2, [r3, #10]
 800543e:	4b2d      	ldr	r3, [pc, #180]	; (80054f4 <startBLERX+0xf8>)
 8005440:	745a      	strb	r2, [r3, #17]

    	    RTC_TimeTypeDef sTime = {0};
 8005442:	f107 0318 	add.w	r3, r7, #24
 8005446:	2200      	movs	r2, #0
 8005448:	601a      	str	r2, [r3, #0]
 800544a:	605a      	str	r2, [r3, #4]
 800544c:	609a      	str	r2, [r3, #8]
 800544e:	60da      	str	r2, [r3, #12]
 8005450:	611a      	str	r2, [r3, #16]
    		RTC_DateTypeDef sDate = {0};
 8005452:	2300      	movs	r3, #0
 8005454:	617b      	str	r3, [r7, #20]

    		uint8_t timestampvals[8];
    		memcpy(timestampvals, &(P2P_Server_App_Context.OTATimestamp), 8);
 8005456:	4a27      	ldr	r2, [pc, #156]	; (80054f4 <startBLERX+0xf8>)
 8005458:	f107 030c 	add.w	r3, r7, #12
 800545c:	3208      	adds	r2, #8
 800545e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005462:	e883 0003 	stmia.w	r3, {r0, r1}

    		uint8_t AMPM = timestampvals[0];
 8005466:	7b3b      	ldrb	r3, [r7, #12]
 8005468:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

    		sTime.Hours      = timestampvals[4];
 800546c:	7c3b      	ldrb	r3, [r7, #16]
 800546e:	763b      	strb	r3, [r7, #24]
    		sTime.Minutes    = timestampvals[5];
 8005470:	7c7b      	ldrb	r3, [r7, #17]
 8005472:	767b      	strb	r3, [r7, #25]
    		sTime.Seconds    = timestampvals[6];
 8005474:	7cbb      	ldrb	r3, [r7, #18]
 8005476:	76bb      	strb	r3, [r7, #26]
    		sTime.SubSeconds = 0x0;
 8005478:	2300      	movs	r3, #0
 800547a:	61fb      	str	r3, [r7, #28]
    		sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800547c:	2300      	movs	r3, #0
 800547e:	627b      	str	r3, [r7, #36]	; 0x24

    		if (P2P_Server_App_Context.OTADaylightSavings){ sTime.DayLightSaving = RTC_DAYLIGHTSAVING_ADD1H; }
 8005480:	4b1c      	ldr	r3, [pc, #112]	; (80054f4 <startBLERX+0xf8>)
 8005482:	7c5b      	ldrb	r3, [r3, #17]
 8005484:	2b00      	cmp	r3, #0
 8005486:	d002      	beq.n	800548e <startBLERX+0x92>
 8005488:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800548c:	627b      	str	r3, [r7, #36]	; 0x24

    		sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800548e:	2300      	movs	r3, #0
 8005490:	62bb      	str	r3, [r7, #40]	; 0x28

    		sDate.WeekDay = timestampvals[0];
 8005492:	7b3b      	ldrb	r3, [r7, #12]
 8005494:	753b      	strb	r3, [r7, #20]
    		sDate.Month   = timestampvals[1];
 8005496:	7b7b      	ldrb	r3, [r7, #13]
 8005498:	757b      	strb	r3, [r7, #21]
    		sDate.Date    = timestampvals[2];
 800549a:	7bbb      	ldrb	r3, [r7, #14]
 800549c:	75bb      	strb	r3, [r7, #22]
    		sDate.Year    = timestampvals[3];
 800549e:	7bfb      	ldrb	r3, [r7, #15]
 80054a0:	75fb      	strb	r3, [r7, #23]

    		osMutexAcquire(rtcMutexHandle, portMAX_DELAY);
 80054a2:	4b15      	ldr	r3, [pc, #84]	; (80054f8 <startBLERX+0xfc>)
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	f04f 31ff 	mov.w	r1, #4294967295
 80054aa:	4618      	mov	r0, r3
 80054ac:	f009 faba 	bl	800ea24 <osMutexAcquire>
    		if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK) {Error_Handler();}
 80054b0:	f107 0318 	add.w	r3, r7, #24
 80054b4:	2201      	movs	r2, #1
 80054b6:	4619      	mov	r1, r3
 80054b8:	4810      	ldr	r0, [pc, #64]	; (80054fc <startBLERX+0x100>)
 80054ba:	f004 faba 	bl	8009a32 <HAL_RTC_SetTime>
 80054be:	4603      	mov	r3, r0
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d001      	beq.n	80054c8 <startBLERX+0xcc>
 80054c4:	f000 f8bc 	bl	8005640 <Error_Handler>
    		if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK) {Error_Handler();}
 80054c8:	f107 0314 	add.w	r3, r7, #20
 80054cc:	2201      	movs	r2, #1
 80054ce:	4619      	mov	r1, r3
 80054d0:	480a      	ldr	r0, [pc, #40]	; (80054fc <startBLERX+0x100>)
 80054d2:	f004 fbce 	bl	8009c72 <HAL_RTC_SetDate>
 80054d6:	4603      	mov	r3, r0
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d001      	beq.n	80054e0 <startBLERX+0xe4>
 80054dc:	f000 f8b0 	bl	8005640 <Error_Handler>
    	    osMutexRelease(rtcMutexHandle);
 80054e0:	4b05      	ldr	r3, [pc, #20]	; (80054f8 <startBLERX+0xfc>)
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	4618      	mov	r0, r3
 80054e6:	f009 fafb 	bl	800eae0 <osMutexRelease>
	if (osMessageQueueGet(bleRXqueueHandle, &rxData, NULL, osWaitForever) == osOK){
 80054ea:	e78b      	b.n	8005404 <startBLERX+0x8>
 80054ec:	20007790 	.word	0x20007790
 80054f0:	200002b8 	.word	0x200002b8
 80054f4:	200002b0 	.word	0x200002b0
 80054f8:	200077c0 	.word	0x200077c0
 80054fc:	2000779c 	.word	0x2000779c

08005500 <PeriphClock_Config>:
  /* USER CODE END startBLERX */
}


void PeriphClock_Config(void)
{
 8005500:	b480      	push	{r7}
 8005502:	af00      	add	r7, sp, #0

	/* Start automatic synchronization */
	HAL_RCCEx_CRSConfig(&RCC_CRSInitStruct);
#endif

	return;
 8005504:	bf00      	nop
}
 8005506:	46bd      	mov	sp, r7
 8005508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800550c:	4770      	bx	lr

0800550e <Config_HSE>:
 * LOCAL FUNCTIONS
 *
 *************************************************************/

static void Config_HSE(void)
{
 800550e:	b580      	push	{r7, lr}
 8005510:	b082      	sub	sp, #8
 8005512:	af00      	add	r7, sp, #0
    OTP_ID0_t * p_otp;

  /**
   * Read HSE_Tuning from OTP
   */
  p_otp = (OTP_ID0_t *) OTP_Read(0);
 8005514:	2000      	movs	r0, #0
 8005516:	f008 fad1 	bl	800dabc <OTP_Read>
 800551a:	6078      	str	r0, [r7, #4]
  if (p_otp)
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	2b00      	cmp	r3, #0
 8005520:	d005      	beq.n	800552e <Config_HSE+0x20>
  {
    LL_RCC_HSE_SetCapacitorTuning(p_otp->hse_tuning);
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	799b      	ldrb	r3, [r3, #6]
 8005526:	4618      	mov	r0, r3
 8005528:	f7fe fbb4 	bl	8003c94 <LL_RCC_HSE_SetCapacitorTuning>
  }

  return;
 800552c:	bf00      	nop
 800552e:	bf00      	nop
}  
 8005530:	3708      	adds	r7, #8
 8005532:	46bd      	mov	sp, r7
 8005534:	bd80      	pop	{r7, pc}

08005536 <Reset_Device>:

static void Reset_Device( void )
{
 8005536:	b580      	push	{r7, lr}
 8005538:	af00      	add	r7, sp, #0
#if ( CFG_HW_RESET_BY_FW == 1 )
	Reset_BackupDomain();
 800553a:	f000 f827 	bl	800558c <Reset_BackupDomain>

	Reset_IPCC();
 800553e:	f000 f803 	bl	8005548 <Reset_IPCC>
#endif

	return;
 8005542:	bf00      	nop
}
 8005544:	bd80      	pop	{r7, pc}
	...

08005548 <Reset_IPCC>:

static void Reset_IPCC( void )
{
 8005548:	b580      	push	{r7, lr}
 800554a:	af00      	add	r7, sp, #0
	LL_AHB3_GRP1_EnableClock(LL_AHB3_GRP1_PERIPH_IPCC);
 800554c:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8005550:	f7fe fc35 	bl	8003dbe <LL_AHB3_GRP1_EnableClock>

	LL_C1_IPCC_ClearFlag_CHx(
 8005554:	213f      	movs	r1, #63	; 0x3f
 8005556:	480c      	ldr	r0, [pc, #48]	; (8005588 <Reset_IPCC+0x40>)
 8005558:	f7fe fc90 	bl	8003e7c <LL_C1_IPCC_ClearFlag_CHx>
			IPCC,
			LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
			| LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

	LL_C2_IPCC_ClearFlag_CHx(
 800555c:	213f      	movs	r1, #63	; 0x3f
 800555e:	480a      	ldr	r0, [pc, #40]	; (8005588 <Reset_IPCC+0x40>)
 8005560:	f7fe fc9a 	bl	8003e98 <LL_C2_IPCC_ClearFlag_CHx>
			IPCC,
			LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
			| LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

	LL_C1_IPCC_DisableTransmitChannel(
 8005564:	213f      	movs	r1, #63	; 0x3f
 8005566:	4808      	ldr	r0, [pc, #32]	; (8005588 <Reset_IPCC+0x40>)
 8005568:	f7fe fc42 	bl	8003df0 <LL_C1_IPCC_DisableTransmitChannel>
			IPCC,
			LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
			| LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

	LL_C2_IPCC_DisableTransmitChannel(
 800556c:	213f      	movs	r1, #63	; 0x3f
 800556e:	4806      	ldr	r0, [pc, #24]	; (8005588 <Reset_IPCC+0x40>)
 8005570:	f7fe fc61 	bl	8003e36 <LL_C2_IPCC_DisableTransmitChannel>
			IPCC,
			LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
			| LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

	LL_C1_IPCC_DisableReceiveChannel(
 8005574:	213f      	movs	r1, #63	; 0x3f
 8005576:	4804      	ldr	r0, [pc, #16]	; (8005588 <Reset_IPCC+0x40>)
 8005578:	f7fe fc4c 	bl	8003e14 <LL_C1_IPCC_DisableReceiveChannel>
			IPCC,
			LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
			| LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

	LL_C2_IPCC_DisableReceiveChannel(
 800557c:	213f      	movs	r1, #63	; 0x3f
 800557e:	4802      	ldr	r0, [pc, #8]	; (8005588 <Reset_IPCC+0x40>)
 8005580:	f7fe fc6b 	bl	8003e5a <LL_C2_IPCC_DisableReceiveChannel>
			IPCC,
			LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
			| LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

	return;
 8005584:	bf00      	nop
}
 8005586:	bd80      	pop	{r7, pc}
 8005588:	58000c00 	.word	0x58000c00

0800558c <Reset_BackupDomain>:

static void Reset_BackupDomain( void )
{
 800558c:	b580      	push	{r7, lr}
 800558e:	af00      	add	r7, sp, #0
	if ((LL_RCC_IsActiveFlag_PINRST() != FALSE) && (LL_RCC_IsActiveFlag_SFTRST() == FALSE))
 8005590:	f7fe fbd6 	bl	8003d40 <LL_RCC_IsActiveFlag_PINRST>
 8005594:	4603      	mov	r3, r0
 8005596:	2b00      	cmp	r3, #0
 8005598:	d00d      	beq.n	80055b6 <Reset_BackupDomain+0x2a>
 800559a:	f7fe fbe4 	bl	8003d66 <LL_RCC_IsActiveFlag_SFTRST>
 800559e:	4603      	mov	r3, r0
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d108      	bne.n	80055b6 <Reset_BackupDomain+0x2a>
	{
		HAL_PWR_EnableBkUpAccess(); /**< Enable access to the RTC registers */
 80055a4:	f002 fb9a 	bl	8007cdc <HAL_PWR_EnableBkUpAccess>

		/**
		 *  Write twice the value to flush the APB-AHB bridge
		 *  This bit shall be written in the register before writing the next one
		 */
		HAL_PWR_EnableBkUpAccess();
 80055a8:	f002 fb98 	bl	8007cdc <HAL_PWR_EnableBkUpAccess>

		__HAL_RCC_BACKUPRESET_FORCE();
 80055ac:	f7fe fba6 	bl	8003cfc <LL_RCC_ForceBackupDomainReset>
		__HAL_RCC_BACKUPRESET_RELEASE();
 80055b0:	f7fe fbb5 	bl	8003d1e <LL_RCC_ReleaseBackupDomainReset>
	}

	return;
 80055b4:	bf00      	nop
 80055b6:	bf00      	nop
}
 80055b8:	bd80      	pop	{r7, pc}

080055ba <Init_Exti>:

static void Init_Exti( void )
{
 80055ba:	b580      	push	{r7, lr}
 80055bc:	af00      	add	r7, sp, #0
  /**< Disable all wakeup interrupt on CPU1  except IPCC(36), HSEM(38) */
  LL_EXTI_DisableIT_0_31(~0);
 80055be:	f04f 30ff 	mov.w	r0, #4294967295
 80055c2:	f7fe fb3b 	bl	8003c3c <LL_EXTI_DisableIT_0_31>
  LL_EXTI_DisableIT_32_63( (~0) & (~(LL_EXTI_LINE_36 | LL_EXTI_LINE_38)) );
 80055c6:	f06f 0050 	mvn.w	r0, #80	; 0x50
 80055ca:	f7fe fb4d 	bl	8003c68 <LL_EXTI_DisableIT_32_63>

  return;
 80055ce:	bf00      	nop
}
 80055d0:	bd80      	pop	{r7, pc}

080055d2 <HAL_Delay>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void HAL_Delay(uint32_t Delay)
{
 80055d2:	b580      	push	{r7, lr}
 80055d4:	b084      	sub	sp, #16
 80055d6:	af00      	add	r7, sp, #0
 80055d8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80055da:	f001 f843 	bl	8006664 <HAL_GetTick>
 80055de:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055ea:	d00a      	beq.n	8005602 <HAL_Delay+0x30>
  {
    wait += HAL_GetTickFreq();
 80055ec:	f001 f852 	bl	8006694 <HAL_GetTickFreq>
 80055f0:	4603      	mov	r3, r0
 80055f2:	461a      	mov	r2, r3
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	4413      	add	r3, r2
 80055f8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80055fa:	e002      	b.n	8005602 <HAL_Delay+0x30>
  {
    /************************************************************************************
     * ENTER SLEEP MODE
     ***********************************************************************************/
    LL_LPM_EnableSleep( ); /**< Clear SLEEPDEEP bit of Cortex System Control Register */
 80055fc:	f7fe fc5a 	bl	8003eb4 <LL_LPM_EnableSleep>
     */
  #if defined ( __CC_ARM)
    __force_stores();
  #endif

    __WFI( );
 8005600:	bf30      	wfi
  while ((HAL_GetTick() - tickstart) < wait)
 8005602:	f001 f82f 	bl	8006664 <HAL_GetTick>
 8005606:	4602      	mov	r2, r0
 8005608:	68bb      	ldr	r3, [r7, #8]
 800560a:	1ad3      	subs	r3, r2, r3
 800560c:	68fa      	ldr	r2, [r7, #12]
 800560e:	429a      	cmp	r2, r3
 8005610:	d8f4      	bhi.n	80055fc <HAL_Delay+0x2a>
  }
}
 8005612:	bf00      	nop
 8005614:	3710      	adds	r7, #16
 8005616:	46bd      	mov	sp, r7
 8005618:	bd80      	pop	{r7, pc}
	...

0800561c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800561c:	b580      	push	{r7, lr}
 800561e:	b082      	sub	sp, #8
 8005620:	af00      	add	r7, sp, #0
 8005622:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM17) {
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	4a04      	ldr	r2, [pc, #16]	; (800563c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800562a:	4293      	cmp	r3, r2
 800562c:	d101      	bne.n	8005632 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800562e:	f001 f805 	bl	800663c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8005632:	bf00      	nop
 8005634:	3708      	adds	r7, #8
 8005636:	46bd      	mov	sp, r7
 8005638:	bd80      	pop	{r7, pc}
 800563a:	bf00      	nop
 800563c:	40014800 	.word	0x40014800

08005640 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8005640:	b480      	push	{r7}
 8005642:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
 
  /* USER CODE END Error_Handler_Debug */
}
 8005644:	bf00      	nop
 8005646:	46bd      	mov	sp, r7
 8005648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800564c:	4770      	bx	lr
	...

08005650 <_read_and_convert_temperature>:
  return id;
}

// Helper to read and convert temperature into uint format
static float _read_and_convert_temperature(I2C_HandleTypeDef *hi2c)
{
 8005650:	b590      	push	{r4, r7, lr}
 8005652:	b089      	sub	sp, #36	; 0x24
 8005654:	af02      	add	r7, sp, #8
 8005656:	6078      	str	r0, [r7, #4]
  uint8_t si7021_buf[4];
  int res = HAL_I2C_Master_Receive(hi2c, SI7021_ADDRESS_READ, si7021_buf, 2, 100);
 8005658:	f107 0208 	add.w	r2, r7, #8
 800565c:	2364      	movs	r3, #100	; 0x64
 800565e:	9300      	str	r3, [sp, #0]
 8005660:	2302      	movs	r3, #2
 8005662:	2181      	movs	r1, #129	; 0x81
 8005664:	6878      	ldr	r0, [r7, #4]
 8005666:	f001 fcf5 	bl	8007054 <HAL_I2C_Master_Receive>
 800566a:	4603      	mov	r3, r0
 800566c:	617b      	str	r3, [r7, #20]

  if (res != HAL_OK) {
 800566e:	697b      	ldr	r3, [r7, #20]
 8005670:	2b00      	cmp	r3, #0
 8005672:	d001      	beq.n	8005678 <_read_and_convert_temperature+0x28>
    return SI7021_MEASURE_FAILED;
 8005674:	4b2a      	ldr	r3, [pc, #168]	; (8005720 <_read_and_convert_temperature+0xd0>)
 8005676:	e03f      	b.n	80056f8 <_read_and_convert_temperature+0xa8>
  }

  int16_t temp_code = (si7021_buf[0] << 8 | si7021_buf[1]);
 8005678:	7a3b      	ldrb	r3, [r7, #8]
 800567a:	021b      	lsls	r3, r3, #8
 800567c:	b21a      	sxth	r2, r3
 800567e:	7a7b      	ldrb	r3, [r7, #9]
 8005680:	b21b      	sxth	r3, r3
 8005682:	4313      	orrs	r3, r2
 8005684:	827b      	strh	r3, [r7, #18]
  float temp = 175.72 * temp_code / 65535.00 - 46.85;
 8005686:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800568a:	4618      	mov	r0, r3
 800568c:	f7fa ff22 	bl	80004d4 <__aeabi_i2d>
 8005690:	a31d      	add	r3, pc, #116	; (adr r3, 8005708 <_read_and_convert_temperature+0xb8>)
 8005692:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005696:	f7fa ff87 	bl	80005a8 <__aeabi_dmul>
 800569a:	4603      	mov	r3, r0
 800569c:	460c      	mov	r4, r1
 800569e:	4618      	mov	r0, r3
 80056a0:	4621      	mov	r1, r4
 80056a2:	a31b      	add	r3, pc, #108	; (adr r3, 8005710 <_read_and_convert_temperature+0xc0>)
 80056a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056a8:	f7fb f8a8 	bl	80007fc <__aeabi_ddiv>
 80056ac:	4603      	mov	r3, r0
 80056ae:	460c      	mov	r4, r1
 80056b0:	4618      	mov	r0, r3
 80056b2:	4621      	mov	r1, r4
 80056b4:	a318      	add	r3, pc, #96	; (adr r3, 8005718 <_read_and_convert_temperature+0xc8>)
 80056b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056ba:	f7fa fdbd 	bl	8000238 <__aeabi_dsub>
 80056be:	4603      	mov	r3, r0
 80056c0:	460c      	mov	r4, r1
 80056c2:	4618      	mov	r0, r3
 80056c4:	4621      	mov	r1, r4
 80056c6:	f7fb fa47 	bl	8000b58 <__aeabi_d2f>
 80056ca:	4603      	mov	r3, r0
 80056cc:	60fb      	str	r3, [r7, #12]

  if (temp > 125.00 || temp < -40.00) {
 80056ce:	edd7 7a03 	vldr	s15, [r7, #12]
 80056d2:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8005724 <_read_and_convert_temperature+0xd4>
 80056d6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80056da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80056de:	dc08      	bgt.n	80056f2 <_read_and_convert_temperature+0xa2>
 80056e0:	edd7 7a03 	vldr	s15, [r7, #12]
 80056e4:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8005728 <_read_and_convert_temperature+0xd8>
 80056e8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80056ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80056f0:	d501      	bpl.n	80056f6 <_read_and_convert_temperature+0xa6>
    return SI7021_MEASURE_FAILED;
 80056f2:	4b0b      	ldr	r3, [pc, #44]	; (8005720 <_read_and_convert_temperature+0xd0>)
 80056f4:	e000      	b.n	80056f8 <_read_and_convert_temperature+0xa8>
  }

  return temp;
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	ee07 3a90 	vmov	s15, r3
}
 80056fc:	eeb0 0a67 	vmov.f32	s0, s15
 8005700:	371c      	adds	r7, #28
 8005702:	46bd      	mov	sp, r7
 8005704:	bd90      	pop	{r4, r7, pc}
 8005706:	bf00      	nop
 8005708:	3d70a3d7 	.word	0x3d70a3d7
 800570c:	4065f70a 	.word	0x4065f70a
 8005710:	00000000 	.word	0x00000000
 8005714:	40efffe0 	.word	0x40efffe0
 8005718:	cccccccd 	.word	0xcccccccd
 800571c:	40476ccc 	.word	0x40476ccc
 8005720:	477fff00 	.word	0x477fff00
 8005724:	42fa0000 	.word	0x42fa0000
 8005728:	c2200000 	.word	0xc2200000

0800572c <si7021_set_config>:

  return (uint64_t)id1 << 32 | id2;
}

uint32_t si7021_set_config(I2C_HandleTypeDef *hi2c, uint8_t heater, uint8_t resolution)
{
 800572c:	b580      	push	{r7, lr}
 800572e:	b086      	sub	sp, #24
 8005730:	af02      	add	r7, sp, #8
 8005732:	6078      	str	r0, [r7, #4]
 8005734:	460b      	mov	r3, r1
 8005736:	70fb      	strb	r3, [r7, #3]
 8005738:	4613      	mov	r3, r2
 800573a:	70bb      	strb	r3, [r7, #2]
  uint8_t si7021_buf[4];
  si7021_buf[0] = SI7021_WRITE_USER_REG1;
 800573c:	23e6      	movs	r3, #230	; 0xe6
 800573e:	733b      	strb	r3, [r7, #12]
  si7021_buf[1] = heater | resolution;
 8005740:	78fa      	ldrb	r2, [r7, #3]
 8005742:	78bb      	ldrb	r3, [r7, #2]
 8005744:	4313      	orrs	r3, r2
 8005746:	b2db      	uxtb	r3, r3
 8005748:	737b      	strb	r3, [r7, #13]

  return HAL_I2C_Master_Transmit(hi2c, SI7021_ADDRESS_WRITE, &si7021_buf[0], 2, 100);
 800574a:	f107 020c 	add.w	r2, r7, #12
 800574e:	2364      	movs	r3, #100	; 0x64
 8005750:	9300      	str	r3, [sp, #0]
 8005752:	2302      	movs	r3, #2
 8005754:	2180      	movs	r1, #128	; 0x80
 8005756:	6878      	ldr	r0, [r7, #4]
 8005758:	f001 fb88 	bl	8006e6c <HAL_I2C_Master_Transmit>
 800575c:	4603      	mov	r3, r0
}
 800575e:	4618      	mov	r0, r3
 8005760:	3710      	adds	r7, #16
 8005762:	46bd      	mov	sp, r7
 8005764:	bd80      	pop	{r7, pc}

08005766 <si7021_set_heater_power>:

uint32_t si7021_set_heater_power(I2C_HandleTypeDef *hi2c, uint8_t power)
{
 8005766:	b580      	push	{r7, lr}
 8005768:	b086      	sub	sp, #24
 800576a:	af02      	add	r7, sp, #8
 800576c:	6078      	str	r0, [r7, #4]
 800576e:	460b      	mov	r3, r1
 8005770:	70fb      	strb	r3, [r7, #3]
  uint8_t si7021_buf[4];
  si7021_buf[0] = SI7021_WRITE_HEATER_REG;
 8005772:	2351      	movs	r3, #81	; 0x51
 8005774:	733b      	strb	r3, [r7, #12]
  si7021_buf[1] = power;
 8005776:	78fb      	ldrb	r3, [r7, #3]
 8005778:	737b      	strb	r3, [r7, #13]

  return HAL_I2C_Master_Transmit(hi2c, SI7021_ADDRESS_WRITE, si7021_buf, 2, 100);
 800577a:	f107 020c 	add.w	r2, r7, #12
 800577e:	2364      	movs	r3, #100	; 0x64
 8005780:	9300      	str	r3, [sp, #0]
 8005782:	2302      	movs	r3, #2
 8005784:	2180      	movs	r1, #128	; 0x80
 8005786:	6878      	ldr	r0, [r7, #4]
 8005788:	f001 fb70 	bl	8006e6c <HAL_I2C_Master_Transmit>
 800578c:	4603      	mov	r3, r0
}
 800578e:	4618      	mov	r0, r3
 8005790:	3710      	adds	r7, #16
 8005792:	46bd      	mov	sp, r7
 8005794:	bd80      	pop	{r7, pc}
	...

08005798 <si7021_measure_humidity>:

float si7021_measure_humidity(I2C_HandleTypeDef *hi2c)
{
 8005798:	b590      	push	{r4, r7, lr}
 800579a:	b087      	sub	sp, #28
 800579c:	af02      	add	r7, sp, #8
 800579e:	6078      	str	r0, [r7, #4]
  uint8_t si7021_buf[4];
  si7021_buf[0] = SI7021_MEASURE_NOHOLD;
 80057a0:	23f5      	movs	r3, #245	; 0xf5
 80057a2:	723b      	strb	r3, [r7, #8]

  // Start measure
  int res = HAL_I2C_Master_Transmit(hi2c, SI7021_ADDRESS_WRITE, si7021_buf, 1, 100);
 80057a4:	f107 0208 	add.w	r2, r7, #8
 80057a8:	2364      	movs	r3, #100	; 0x64
 80057aa:	9300      	str	r3, [sp, #0]
 80057ac:	2301      	movs	r3, #1
 80057ae:	2180      	movs	r1, #128	; 0x80
 80057b0:	6878      	ldr	r0, [r7, #4]
 80057b2:	f001 fb5b 	bl	8006e6c <HAL_I2C_Master_Transmit>
 80057b6:	4603      	mov	r3, r0
 80057b8:	60fb      	str	r3, [r7, #12]
  if (res != HAL_OK) {
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d001      	beq.n	80057c4 <si7021_measure_humidity+0x2c>
    return SI7021_MEASURE_FAILED;
 80057c0:	4b20      	ldr	r3, [pc, #128]	; (8005844 <si7021_measure_humidity+0xac>)
 80057c2:	e037      	b.n	8005834 <si7021_measure_humidity+0x9c>
  }
  HAL_Delay(30);
 80057c4:	201e      	movs	r0, #30
 80057c6:	f7ff ff04 	bl	80055d2 <HAL_Delay>

  // Read result
  res = HAL_I2C_Master_Receive(hi2c, SI7021_ADDRESS_READ, si7021_buf, 2, 100);
 80057ca:	f107 0208 	add.w	r2, r7, #8
 80057ce:	2364      	movs	r3, #100	; 0x64
 80057d0:	9300      	str	r3, [sp, #0]
 80057d2:	2302      	movs	r3, #2
 80057d4:	2181      	movs	r1, #129	; 0x81
 80057d6:	6878      	ldr	r0, [r7, #4]
 80057d8:	f001 fc3c 	bl	8007054 <HAL_I2C_Master_Receive>
 80057dc:	4603      	mov	r3, r0
 80057de:	60fb      	str	r3, [r7, #12]
  if (res != HAL_OK) {
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d001      	beq.n	80057ea <si7021_measure_humidity+0x52>
    return SI7021_MEASURE_FAILED;
 80057e6:	4b17      	ldr	r3, [pc, #92]	; (8005844 <si7021_measure_humidity+0xac>)
 80057e8:	e024      	b.n	8005834 <si7021_measure_humidity+0x9c>
  }

  return (si7021_buf[0] << 8 | si7021_buf[1]) * 125.0 / 65536.0 - 6.0;
 80057ea:	7a3b      	ldrb	r3, [r7, #8]
 80057ec:	021b      	lsls	r3, r3, #8
 80057ee:	7a7a      	ldrb	r2, [r7, #9]
 80057f0:	4313      	orrs	r3, r2
 80057f2:	4618      	mov	r0, r3
 80057f4:	f7fa fe6e 	bl	80004d4 <__aeabi_i2d>
 80057f8:	f04f 0200 	mov.w	r2, #0
 80057fc:	4b12      	ldr	r3, [pc, #72]	; (8005848 <si7021_measure_humidity+0xb0>)
 80057fe:	f7fa fed3 	bl	80005a8 <__aeabi_dmul>
 8005802:	4603      	mov	r3, r0
 8005804:	460c      	mov	r4, r1
 8005806:	4618      	mov	r0, r3
 8005808:	4621      	mov	r1, r4
 800580a:	f04f 0200 	mov.w	r2, #0
 800580e:	4b0f      	ldr	r3, [pc, #60]	; (800584c <si7021_measure_humidity+0xb4>)
 8005810:	f7fa fff4 	bl	80007fc <__aeabi_ddiv>
 8005814:	4603      	mov	r3, r0
 8005816:	460c      	mov	r4, r1
 8005818:	4618      	mov	r0, r3
 800581a:	4621      	mov	r1, r4
 800581c:	f04f 0200 	mov.w	r2, #0
 8005820:	4b0b      	ldr	r3, [pc, #44]	; (8005850 <si7021_measure_humidity+0xb8>)
 8005822:	f7fa fd09 	bl	8000238 <__aeabi_dsub>
 8005826:	4603      	mov	r3, r0
 8005828:	460c      	mov	r4, r1
 800582a:	4618      	mov	r0, r3
 800582c:	4621      	mov	r1, r4
 800582e:	f7fb f993 	bl	8000b58 <__aeabi_d2f>
 8005832:	4603      	mov	r3, r0
 8005834:	ee07 3a90 	vmov	s15, r3
}
 8005838:	eeb0 0a67 	vmov.f32	s0, s15
 800583c:	3714      	adds	r7, #20
 800583e:	46bd      	mov	sp, r7
 8005840:	bd90      	pop	{r4, r7, pc}
 8005842:	bf00      	nop
 8005844:	477fff00 	.word	0x477fff00
 8005848:	405f4000 	.word	0x405f4000
 800584c:	40f00000 	.word	0x40f00000
 8005850:	40180000 	.word	0x40180000

08005854 <si7021_measure_temperature>:

float si7021_measure_temperature(I2C_HandleTypeDef *hi2c)
{
 8005854:	b580      	push	{r7, lr}
 8005856:	b086      	sub	sp, #24
 8005858:	af02      	add	r7, sp, #8
 800585a:	6078      	str	r0, [r7, #4]
  uint8_t si7021_buf[4];
  si7021_buf[0] = SI7021_MEASURE_TEMP_NOHOLD;
 800585c:	23f3      	movs	r3, #243	; 0xf3
 800585e:	723b      	strb	r3, [r7, #8]

  int res = HAL_I2C_Master_Transmit(hi2c, SI7021_ADDRESS_WRITE, &si7021_buf[0], 1, 100);
 8005860:	f107 0208 	add.w	r2, r7, #8
 8005864:	2364      	movs	r3, #100	; 0x64
 8005866:	9300      	str	r3, [sp, #0]
 8005868:	2301      	movs	r3, #1
 800586a:	2180      	movs	r1, #128	; 0x80
 800586c:	6878      	ldr	r0, [r7, #4]
 800586e:	f001 fafd 	bl	8006e6c <HAL_I2C_Master_Transmit>
 8005872:	4603      	mov	r3, r0
 8005874:	60fb      	str	r3, [r7, #12]
  if (res != HAL_OK) {
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	2b00      	cmp	r3, #0
 800587a:	d002      	beq.n	8005882 <si7021_measure_temperature+0x2e>
    return SI7021_MEASURE_FAILED;
 800587c:	eddf 7a07 	vldr	s15, [pc, #28]	; 800589c <si7021_measure_temperature+0x48>
 8005880:	e007      	b.n	8005892 <si7021_measure_temperature+0x3e>
  }
  HAL_Delay(30);
 8005882:	201e      	movs	r0, #30
 8005884:	f7ff fea5 	bl	80055d2 <HAL_Delay>

  return _read_and_convert_temperature(hi2c);
 8005888:	6878      	ldr	r0, [r7, #4]
 800588a:	f7ff fee1 	bl	8005650 <_read_and_convert_temperature>
 800588e:	eef0 7a40 	vmov.f32	s15, s0
}
 8005892:	eeb0 0a67 	vmov.f32	s0, s15
 8005896:	3710      	adds	r7, #16
 8005898:	46bd      	mov	sp, r7
 800589a:	bd80      	pop	{r7, pc}
 800589c:	477fff00 	.word	0x477fff00

080058a0 <LL_RCC_SetRTCClockSource>:
{
 80058a0:	b480      	push	{r7}
 80058a2:	b083      	sub	sp, #12
 80058a4:	af00      	add	r7, sp, #0
 80058a6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 80058a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80058ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80058b0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80058b4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	4313      	orrs	r3, r2
 80058bc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 80058c0:	bf00      	nop
 80058c2:	370c      	adds	r7, #12
 80058c4:	46bd      	mov	sp, r7
 80058c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ca:	4770      	bx	lr

080058cc <LL_RCC_EnableRTC>:
{
 80058cc:	b480      	push	{r7}
 80058ce:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 80058d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80058d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80058d8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80058dc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80058e0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80058e4:	bf00      	nop
 80058e6:	46bd      	mov	sp, r7
 80058e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ec:	4770      	bx	lr

080058ee <LL_AHB2_GRP1_EnableClock>:
{
 80058ee:	b480      	push	{r7}
 80058f0:	b085      	sub	sp, #20
 80058f2:	af00      	add	r7, sp, #0
 80058f4:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80058f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80058fa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80058fc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	4313      	orrs	r3, r2
 8005904:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8005906:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800590a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	4013      	ands	r3, r2
 8005910:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8005912:	68fb      	ldr	r3, [r7, #12]
}
 8005914:	bf00      	nop
 8005916:	3714      	adds	r7, #20
 8005918:	46bd      	mov	sp, r7
 800591a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800591e:	4770      	bx	lr

08005920 <LL_AHB3_GRP1_EnableClock>:
{
 8005920:	b480      	push	{r7}
 8005922:	b085      	sub	sp, #20
 8005924:	af00      	add	r7, sp, #0
 8005926:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 8005928:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800592c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800592e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	4313      	orrs	r3, r2
 8005936:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8005938:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800593c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	4013      	ands	r3, r2
 8005942:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8005944:	68fb      	ldr	r3, [r7, #12]
}
 8005946:	bf00      	nop
 8005948:	3714      	adds	r7, #20
 800594a:	46bd      	mov	sp, r7
 800594c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005950:	4770      	bx	lr

08005952 <LL_APB1_GRP1_EnableClock>:
{
 8005952:	b480      	push	{r7}
 8005954:	b085      	sub	sp, #20
 8005956:	af00      	add	r7, sp, #0
 8005958:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 800595a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800595e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8005960:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	4313      	orrs	r3, r2
 8005968:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 800596a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800596e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	4013      	ands	r3, r2
 8005974:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8005976:	68fb      	ldr	r3, [r7, #12]
}
 8005978:	bf00      	nop
 800597a:	3714      	adds	r7, #20
 800597c:	46bd      	mov	sp, r7
 800597e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005982:	4770      	bx	lr

08005984 <LL_APB2_GRP1_EnableClock>:
{
 8005984:	b480      	push	{r7}
 8005986:	b085      	sub	sp, #20
 8005988:	af00      	add	r7, sp, #0
 800598a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 800598c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005990:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8005992:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	4313      	orrs	r3, r2
 800599a:	660b      	str	r3, [r1, #96]	; 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 800599c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80059a0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	4013      	ands	r3, r2
 80059a6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80059a8:	68fb      	ldr	r3, [r7, #12]
}
 80059aa:	bf00      	nop
 80059ac:	3714      	adds	r7, #20
 80059ae:	46bd      	mov	sp, r7
 80059b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b4:	4770      	bx	lr

080059b6 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80059b6:	b580      	push	{r7, lr}
 80059b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_HSEM_CLK_ENABLE();
 80059ba:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80059be:	f7ff ffaf 	bl	8005920 <LL_AHB3_GRP1_EnableClock>

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80059c2:	2200      	movs	r2, #0
 80059c4:	210f      	movs	r1, #15
 80059c6:	f06f 0001 	mvn.w	r0, #1
 80059ca:	f000 ff91 	bl	80068f0 <HAL_NVIC_SetPriority>

  /* Peripheral interrupt init */
  /* HSEM_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HSEM_IRQn, 5, 0);
 80059ce:	2200      	movs	r2, #0
 80059d0:	2105      	movs	r1, #5
 80059d2:	202e      	movs	r0, #46	; 0x2e
 80059d4:	f000 ff8c 	bl	80068f0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HSEM_IRQn);
 80059d8:	202e      	movs	r0, #46	; 0x2e
 80059da:	f000 ffa3 	bl	8006924 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  HAL_NVIC_SetPriority(IPCC_C1_RX_IRQn , 6, 0);
 80059de:	2200      	movs	r2, #0
 80059e0:	2106      	movs	r1, #6
 80059e2:	202c      	movs	r0, #44	; 0x2c
 80059e4:	f000 ff84 	bl	80068f0 <HAL_NVIC_SetPriority>
  HAL_NVIC_SetPriority(IPCC_C1_TX_IRQn , 6, 0);
 80059e8:	2200      	movs	r2, #0
 80059ea:	2106      	movs	r1, #6
 80059ec:	202d      	movs	r0, #45	; 0x2d
 80059ee:	f000 ff7f 	bl	80068f0 <HAL_NVIC_SetPriority>

  /* USER CODE END MspInit 1 */
}
 80059f2:	bf00      	nop
 80059f4:	bd80      	pop	{r7, pc}
	...

080059f8 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80059f8:	b580      	push	{r7, lr}
 80059fa:	b082      	sub	sp, #8
 80059fc:	af00      	add	r7, sp, #0
 80059fe:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	4a0b      	ldr	r2, [pc, #44]	; (8005a34 <HAL_RTC_MspInit+0x3c>)
 8005a06:	4293      	cmp	r3, r2
 8005a08:	d110      	bne.n	8005a2c <HAL_RTC_MspInit+0x34>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */
  HAL_PWR_EnableBkUpAccess(); /**< Enable access to the RTC registers */
 8005a0a:	f002 f967 	bl	8007cdc <HAL_PWR_EnableBkUpAccess>

  /**
  *  Write twice the value to flush the APB-AHB bridge
  *  This bit shall be written in the register before writing the next one
  */
  HAL_PWR_EnableBkUpAccess();
 8005a0e:	f002 f965 	bl	8007cdc <HAL_PWR_EnableBkUpAccess>

  __HAL_RCC_RTC_CONFIG(RCC_RTCCLKSOURCE_LSE); /**< Select LSI as RTC Input */
 8005a12:	f44f 7080 	mov.w	r0, #256	; 0x100
 8005a16:	f7ff ff43 	bl	80058a0 <LL_RCC_SetRTCClockSource>
  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8005a1a:	f7ff ff57 	bl	80058cc <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8005a1e:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8005a22:	f7ff ff96 	bl	8005952 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN RTC_MspInit 1 */
  HAL_RTCEx_EnableBypassShadow(hrtc);
 8005a26:	6878      	ldr	r0, [r7, #4]
 8005a28:	f004 faaa 	bl	8009f80 <HAL_RTCEx_EnableBypassShadow>
  /* USER CODE END RTC_MspInit 1 */
  }

}
 8005a2c:	bf00      	nop
 8005a2e:	3708      	adds	r7, #8
 8005a30:	46bd      	mov	sp, r7
 8005a32:	bd80      	pop	{r7, pc}
 8005a34:	40002800 	.word	0x40002800

08005a38 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8005a38:	b580      	push	{r7, lr}
 8005a3a:	b088      	sub	sp, #32
 8005a3c:	af00      	add	r7, sp, #0
 8005a3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005a40:	f107 030c 	add.w	r3, r7, #12
 8005a44:	2200      	movs	r2, #0
 8005a46:	601a      	str	r2, [r3, #0]
 8005a48:	605a      	str	r2, [r3, #4]
 8005a4a:	609a      	str	r2, [r3, #8]
 8005a4c:	60da      	str	r2, [r3, #12]
 8005a4e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	4a0f      	ldr	r2, [pc, #60]	; (8005a94 <HAL_I2C_MspInit+0x5c>)
 8005a56:	4293      	cmp	r3, r2
 8005a58:	d117      	bne.n	8005a8a <HAL_I2C_MspInit+0x52>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005a5a:	2002      	movs	r0, #2
 8005a5c:	f7ff ff47 	bl	80058ee <LL_AHB2_GRP1_EnableClock>
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8005a60:	f44f 7340 	mov.w	r3, #768	; 0x300
 8005a64:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005a66:	2312      	movs	r3, #18
 8005a68:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005a6a:	2301      	movs	r3, #1
 8005a6c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005a6e:	2300      	movs	r3, #0
 8005a70:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8005a72:	2304      	movs	r3, #4
 8005a74:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005a76:	f107 030c 	add.w	r3, r7, #12
 8005a7a:	4619      	mov	r1, r3
 8005a7c:	4806      	ldr	r0, [pc, #24]	; (8005a98 <HAL_I2C_MspInit+0x60>)
 8005a7e:	f000 ff89 	bl	8006994 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8005a82:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8005a86:	f7ff ff64 	bl	8005952 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8005a8a:	bf00      	nop
 8005a8c:	3720      	adds	r7, #32
 8005a8e:	46bd      	mov	sp, r7
 8005a90:	bd80      	pop	{r7, pc}
 8005a92:	bf00      	nop
 8005a94:	40005400 	.word	0x40005400
 8005a98:	48000400 	.word	0x48000400

08005a9c <HAL_SPI_MspInit>:
  }

}

void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8005a9c:	b580      	push	{r7, lr}
 8005a9e:	b088      	sub	sp, #32
 8005aa0:	af00      	add	r7, sp, #0
 8005aa2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005aa4:	f107 030c 	add.w	r3, r7, #12
 8005aa8:	2200      	movs	r2, #0
 8005aaa:	601a      	str	r2, [r3, #0]
 8005aac:	605a      	str	r2, [r3, #4]
 8005aae:	609a      	str	r2, [r3, #8]
 8005ab0:	60da      	str	r2, [r3, #12]
 8005ab2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	4a0f      	ldr	r2, [pc, #60]	; (8005af8 <HAL_SPI_MspInit+0x5c>)
 8005aba:	4293      	cmp	r3, r2
 8005abc:	d117      	bne.n	8005aee <HAL_SPI_MspInit+0x52>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8005abe:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8005ac2:	f7ff ff5f 	bl	8005984 <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005ac6:	2001      	movs	r0, #1
 8005ac8:	f7ff ff11 	bl	80058ee <LL_AHB2_GRP1_EnableClock>
    /**SPI1 GPIO Configuration
    PA1     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_7;
 8005acc:	2382      	movs	r3, #130	; 0x82
 8005ace:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005ad0:	2302      	movs	r3, #2
 8005ad2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005ad4:	2300      	movs	r3, #0
 8005ad6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005ad8:	2300      	movs	r3, #0
 8005ada:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8005adc:	2305      	movs	r3, #5
 8005ade:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005ae0:	f107 030c 	add.w	r3, r7, #12
 8005ae4:	4619      	mov	r1, r3
 8005ae6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005aea:	f000 ff53 	bl	8006994 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8005aee:	bf00      	nop
 8005af0:	3720      	adds	r7, #32
 8005af2:	46bd      	mov	sp, r7
 8005af4:	bd80      	pop	{r7, pc}
 8005af6:	bf00      	nop
 8005af8:	40013000 	.word	0x40013000

08005afc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8005afc:	b580      	push	{r7, lr}
 8005afe:	b082      	sub	sp, #8
 8005b00:	af00      	add	r7, sp, #0
 8005b02:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	4a09      	ldr	r2, [pc, #36]	; (8005b30 <HAL_TIM_Base_MspInit+0x34>)
 8005b0a:	4293      	cmp	r3, r2
 8005b0c:	d10b      	bne.n	8005b26 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8005b0e:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8005b12:	f7ff ff37 	bl	8005984 <LL_APB2_GRP1_EnableClock>
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 15, 0);
 8005b16:	2200      	movs	r2, #0
 8005b18:	210f      	movs	r1, #15
 8005b1a:	2019      	movs	r0, #25
 8005b1c:	f000 fee8 	bl	80068f0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8005b20:	2019      	movs	r0, #25
 8005b22:	f000 feff 	bl	8006924 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8005b26:	bf00      	nop
 8005b28:	3708      	adds	r7, #8
 8005b2a:	46bd      	mov	sp, r7
 8005b2c:	bd80      	pop	{r7, pc}
 8005b2e:	bf00      	nop
 8005b30:	40012c00 	.word	0x40012c00

08005b34 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8005b34:	b580      	push	{r7, lr}
 8005b36:	b088      	sub	sp, #32
 8005b38:	af00      	add	r7, sp, #0
 8005b3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005b3c:	f107 030c 	add.w	r3, r7, #12
 8005b40:	2200      	movs	r2, #0
 8005b42:	601a      	str	r2, [r3, #0]
 8005b44:	605a      	str	r2, [r3, #4]
 8005b46:	609a      	str	r2, [r3, #8]
 8005b48:	60da      	str	r2, [r3, #12]
 8005b4a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	4a0d      	ldr	r2, [pc, #52]	; (8005b88 <HAL_TIM_MspPostInit+0x54>)
 8005b52:	4293      	cmp	r3, r2
 8005b54:	d114      	bne.n	8005b80 <HAL_TIM_MspPostInit+0x4c>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005b56:	2001      	movs	r0, #1
 8005b58:	f7ff fec9 	bl	80058ee <LL_AHB2_GRP1_EnableClock>
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8005b5c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005b60:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005b62:	2302      	movs	r3, #2
 8005b64:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005b66:	2300      	movs	r3, #0
 8005b68:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005b6a:	2300      	movs	r3, #0
 8005b6c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8005b6e:	2301      	movs	r3, #1
 8005b70:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005b72:	f107 030c 	add.w	r3, r7, #12
 8005b76:	4619      	mov	r1, r3
 8005b78:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005b7c:	f000 ff0a 	bl	8006994 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8005b80:	bf00      	nop
 8005b82:	3720      	adds	r7, #32
 8005b84:	46bd      	mov	sp, r7
 8005b86:	bd80      	pop	{r7, pc}
 8005b88:	40012c00 	.word	0x40012c00

08005b8c <LL_APB2_GRP1_EnableClock>:
{
 8005b8c:	b480      	push	{r7}
 8005b8e:	b085      	sub	sp, #20
 8005b90:	af00      	add	r7, sp, #0
 8005b92:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8005b94:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005b98:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8005b9a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	4313      	orrs	r3, r2
 8005ba2:	660b      	str	r3, [r1, #96]	; 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8005ba4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005ba8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	4013      	ands	r3, r2
 8005bae:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8005bb0:	68fb      	ldr	r3, [r7, #12]
}
 8005bb2:	bf00      	nop
 8005bb4:	3714      	adds	r7, #20
 8005bb6:	46bd      	mov	sp, r7
 8005bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bbc:	4770      	bx	lr
	...

08005bc0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005bc0:	b580      	push	{r7, lr}
 8005bc2:	b08c      	sub	sp, #48	; 0x30
 8005bc4:	af00      	add	r7, sp, #0
 8005bc6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8005bc8:	2300      	movs	r3, #0
 8005bca:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8005bcc:	2300      	movs	r3, #0
 8005bce:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM17 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, TickPriority ,0);
 8005bd0:	2200      	movs	r2, #0
 8005bd2:	6879      	ldr	r1, [r7, #4]
 8005bd4:	201a      	movs	r0, #26
 8005bd6:	f000 fe8b 	bl	80068f0 <HAL_NVIC_SetPriority>

  /* Enable the TIM17 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 8005bda:	201a      	movs	r0, #26
 8005bdc:	f000 fea2 	bl	8006924 <HAL_NVIC_EnableIRQ>
  /* Enable TIM17 clock */
  __HAL_RCC_TIM17_CLK_ENABLE();
 8005be0:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8005be4:	f7ff ffd2 	bl	8005b8c <LL_APB2_GRP1_EnableClock>

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8005be8:	f107 0208 	add.w	r2, r7, #8
 8005bec:	f107 030c 	add.w	r3, r7, #12
 8005bf0:	4611      	mov	r1, r2
 8005bf2:	4618      	mov	r0, r3
 8005bf4:	f003 f972 	bl	8008edc <HAL_RCC_GetClockConfig>

  /* Compute TIM17 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8005bf8:	f003 f95a 	bl	8008eb0 <HAL_RCC_GetPCLK2Freq>
 8005bfc:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM17 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8005bfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c00:	4a12      	ldr	r2, [pc, #72]	; (8005c4c <HAL_InitTick+0x8c>)
 8005c02:	fba2 2303 	umull	r2, r3, r2, r3
 8005c06:	0c9b      	lsrs	r3, r3, #18
 8005c08:	3b01      	subs	r3, #1
 8005c0a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM17 */
  htim17.Instance = TIM17;
 8005c0c:	4b10      	ldr	r3, [pc, #64]	; (8005c50 <HAL_InitTick+0x90>)
 8005c0e:	4a11      	ldr	r2, [pc, #68]	; (8005c54 <HAL_InitTick+0x94>)
 8005c10:	601a      	str	r2, [r3, #0]
  + Period = [(TIM17CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim17.Init.Period = (1000000U / 1000U) - 1U;
 8005c12:	4b0f      	ldr	r3, [pc, #60]	; (8005c50 <HAL_InitTick+0x90>)
 8005c14:	f240 32e7 	movw	r2, #999	; 0x3e7
 8005c18:	60da      	str	r2, [r3, #12]
  htim17.Init.Prescaler = uwPrescalerValue;
 8005c1a:	4a0d      	ldr	r2, [pc, #52]	; (8005c50 <HAL_InitTick+0x90>)
 8005c1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c1e:	6053      	str	r3, [r2, #4]
  htim17.Init.ClockDivision = 0;
 8005c20:	4b0b      	ldr	r3, [pc, #44]	; (8005c50 <HAL_InitTick+0x90>)
 8005c22:	2200      	movs	r2, #0
 8005c24:	611a      	str	r2, [r3, #16]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005c26:	4b0a      	ldr	r3, [pc, #40]	; (8005c50 <HAL_InitTick+0x90>)
 8005c28:	2200      	movs	r2, #0
 8005c2a:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim17) == HAL_OK)
 8005c2c:	4808      	ldr	r0, [pc, #32]	; (8005c50 <HAL_InitTick+0x90>)
 8005c2e:	f004 fd4b 	bl	800a6c8 <HAL_TIM_Base_Init>
 8005c32:	4603      	mov	r3, r0
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d104      	bne.n	8005c42 <HAL_InitTick+0x82>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim17);
 8005c38:	4805      	ldr	r0, [pc, #20]	; (8005c50 <HAL_InitTick+0x90>)
 8005c3a:	f004 fd9d 	bl	800a778 <HAL_TIM_Base_Start_IT>
 8005c3e:	4603      	mov	r3, r0
 8005c40:	e000      	b.n	8005c44 <HAL_InitTick+0x84>
  }

  /* Return function status */
  return HAL_ERROR;
 8005c42:	2301      	movs	r3, #1
}
 8005c44:	4618      	mov	r0, r3
 8005c46:	3730      	adds	r7, #48	; 0x30
 8005c48:	46bd      	mov	sp, r7
 8005c4a:	bd80      	pop	{r7, pc}
 8005c4c:	431bde83 	.word	0x431bde83
 8005c50:	20007a20 	.word	0x20007a20
 8005c54:	40014800 	.word	0x40014800

08005c58 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005c58:	b480      	push	{r7}
 8005c5a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8005c5c:	bf00      	nop
 8005c5e:	46bd      	mov	sp, r7
 8005c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c64:	4770      	bx	lr

08005c66 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005c66:	b480      	push	{r7}
 8005c68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005c6a:	e7fe      	b.n	8005c6a <HardFault_Handler+0x4>

08005c6c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005c6c:	b480      	push	{r7}
 8005c6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005c70:	e7fe      	b.n	8005c70 <MemManage_Handler+0x4>

08005c72 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005c72:	b480      	push	{r7}
 8005c74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005c76:	e7fe      	b.n	8005c76 <BusFault_Handler+0x4>

08005c78 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005c78:	b480      	push	{r7}
 8005c7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005c7c:	e7fe      	b.n	8005c7c <UsageFault_Handler+0x4>

08005c7e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005c7e:	b480      	push	{r7}
 8005c80:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005c82:	bf00      	nop
 8005c84:	46bd      	mov	sp, r7
 8005c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c8a:	4770      	bx	lr

08005c8c <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM17 global interrupt.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 8005c8c:	b580      	push	{r7, lr}
 8005c8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 8005c90:	4802      	ldr	r0, [pc, #8]	; (8005c9c <TIM1_TRG_COM_TIM17_IRQHandler+0x10>)
 8005c92:	f004 ff83 	bl	800ab9c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 8005c96:	bf00      	nop
 8005c98:	bd80      	pop	{r7, pc}
 8005c9a:	bf00      	nop
 8005c9c:	20007a20 	.word	0x20007a20

08005ca0 <HSEM_IRQHandler>:

/**
  * @brief This function handles HSEM global interrupt.
  */
void HSEM_IRQHandler(void)
{
 8005ca0:	b580      	push	{r7, lr}
 8005ca2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HSEM_IRQn 0 */

  /* USER CODE END HSEM_IRQn 0 */
  HAL_HSEM_IRQHandler();
 8005ca4:	f001 f82e 	bl	8006d04 <HAL_HSEM_IRQHandler>
  /* USER CODE BEGIN HSEM_IRQn 1 */

  /* USER CODE END HSEM_IRQn 1 */
}
 8005ca8:	bf00      	nop
 8005caa:	bd80      	pop	{r7, pc}

08005cac <EXTI3_IRQHandler>:
 *         interrupt request.
 * @param  None
 * @retval None
 */
void EXTI3_IRQHandler(void)
{
 8005cac:	b580      	push	{r7, lr}
 8005cae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8005cb0:	2008      	movs	r0, #8
 8005cb2:	f001 f80f 	bl	8006cd4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8005cb6:	bf00      	nop
 8005cb8:	bd80      	pop	{r7, pc}

08005cba <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8005cba:	b580      	push	{r7, lr}
 8005cbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8005cbe:	2010      	movs	r0, #16
 8005cc0:	f001 f808 	bl	8006cd4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8005cc4:	bf00      	nop
 8005cc6:	bd80      	pop	{r7, pc}

08005cc8 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8005cc8:	b580      	push	{r7, lr}
 8005cca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8005ccc:	2020      	movs	r0, #32
 8005cce:	f001 f801 	bl	8006cd4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8005cd2:	bf00      	nop
 8005cd4:	bd80      	pop	{r7, pc}
	...

08005cd8 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8005cd8:	b580      	push	{r7, lr}
 8005cda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8005cdc:	4802      	ldr	r0, [pc, #8]	; (8005ce8 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8005cde:	f004 ff5d 	bl	800ab9c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8005ce2:	bf00      	nop
 8005ce4:	bd80      	pop	{r7, pc}
 8005ce6:	bf00      	nop
 8005ce8:	20007960 	.word	0x20007960

08005cec <RTC_WKUP_IRQHandler>:

void RTC_WKUP_IRQHandler(void)
{
 8005cec:	b580      	push	{r7, lr}
 8005cee:	af00      	add	r7, sp, #0
  HW_TS_RTC_Wakeup_Handler();
 8005cf0:	f7fd fa06 	bl	8003100 <HW_TS_RTC_Wakeup_Handler>
}
 8005cf4:	bf00      	nop
 8005cf6:	bd80      	pop	{r7, pc}

08005cf8 <IPCC_C1_TX_IRQHandler>:

void IPCC_C1_TX_IRQHandler(void)
{
 8005cf8:	b580      	push	{r7, lr}
 8005cfa:	af00      	add	r7, sp, #0
  HW_IPCC_Tx_Handler();
 8005cfc:	f7fb fe66 	bl	80019cc <HW_IPCC_Tx_Handler>

  return;
 8005d00:	bf00      	nop
}
 8005d02:	bd80      	pop	{r7, pc}

08005d04 <IPCC_C1_RX_IRQHandler>:

void IPCC_C1_RX_IRQHandler(void)
{
 8005d04:	b580      	push	{r7, lr}
 8005d06:	af00      	add	r7, sp, #0
  HW_IPCC_Rx_Handler();
 8005d08:	f7fb fe28 	bl	800195c <HW_IPCC_Rx_Handler>
  return;
 8005d0c:	bf00      	nop
}
 8005d0e:	bd80      	pop	{r7, pc}

08005d10 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8005d10:	b580      	push	{r7, lr}
 8005d12:	b086      	sub	sp, #24
 8005d14:	af00      	add	r7, sp, #0
 8005d16:	60f8      	str	r0, [r7, #12]
 8005d18:	60b9      	str	r1, [r7, #8]
 8005d1a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005d1c:	2300      	movs	r3, #0
 8005d1e:	617b      	str	r3, [r7, #20]
 8005d20:	e00a      	b.n	8005d38 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8005d22:	f3af 8000 	nop.w
 8005d26:	4601      	mov	r1, r0
 8005d28:	68bb      	ldr	r3, [r7, #8]
 8005d2a:	1c5a      	adds	r2, r3, #1
 8005d2c:	60ba      	str	r2, [r7, #8]
 8005d2e:	b2ca      	uxtb	r2, r1
 8005d30:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005d32:	697b      	ldr	r3, [r7, #20]
 8005d34:	3301      	adds	r3, #1
 8005d36:	617b      	str	r3, [r7, #20]
 8005d38:	697a      	ldr	r2, [r7, #20]
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	429a      	cmp	r2, r3
 8005d3e:	dbf0      	blt.n	8005d22 <_read+0x12>
	}

return len;
 8005d40:	687b      	ldr	r3, [r7, #4]
}
 8005d42:	4618      	mov	r0, r3
 8005d44:	3718      	adds	r7, #24
 8005d46:	46bd      	mov	sp, r7
 8005d48:	bd80      	pop	{r7, pc}

08005d4a <_close>:
	}
	return len;
}

int _close(int file)
{
 8005d4a:	b480      	push	{r7}
 8005d4c:	b083      	sub	sp, #12
 8005d4e:	af00      	add	r7, sp, #0
 8005d50:	6078      	str	r0, [r7, #4]
	return -1;
 8005d52:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005d56:	4618      	mov	r0, r3
 8005d58:	370c      	adds	r7, #12
 8005d5a:	46bd      	mov	sp, r7
 8005d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d60:	4770      	bx	lr

08005d62 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8005d62:	b480      	push	{r7}
 8005d64:	b083      	sub	sp, #12
 8005d66:	af00      	add	r7, sp, #0
 8005d68:	6078      	str	r0, [r7, #4]
 8005d6a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8005d6c:	683b      	ldr	r3, [r7, #0]
 8005d6e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005d72:	605a      	str	r2, [r3, #4]
	return 0;
 8005d74:	2300      	movs	r3, #0
}
 8005d76:	4618      	mov	r0, r3
 8005d78:	370c      	adds	r7, #12
 8005d7a:	46bd      	mov	sp, r7
 8005d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d80:	4770      	bx	lr

08005d82 <_isatty>:

int _isatty(int file)
{
 8005d82:	b480      	push	{r7}
 8005d84:	b083      	sub	sp, #12
 8005d86:	af00      	add	r7, sp, #0
 8005d88:	6078      	str	r0, [r7, #4]
	return 1;
 8005d8a:	2301      	movs	r3, #1
}
 8005d8c:	4618      	mov	r0, r3
 8005d8e:	370c      	adds	r7, #12
 8005d90:	46bd      	mov	sp, r7
 8005d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d96:	4770      	bx	lr

08005d98 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8005d98:	b480      	push	{r7}
 8005d9a:	b085      	sub	sp, #20
 8005d9c:	af00      	add	r7, sp, #0
 8005d9e:	60f8      	str	r0, [r7, #12]
 8005da0:	60b9      	str	r1, [r7, #8]
 8005da2:	607a      	str	r2, [r7, #4]
	return 0;
 8005da4:	2300      	movs	r3, #0
}
 8005da6:	4618      	mov	r0, r3
 8005da8:	3714      	adds	r7, #20
 8005daa:	46bd      	mov	sp, r7
 8005dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db0:	4770      	bx	lr
	...

08005db4 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8005db4:	b580      	push	{r7, lr}
 8005db6:	b084      	sub	sp, #16
 8005db8:	af00      	add	r7, sp, #0
 8005dba:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8005dbc:	4b11      	ldr	r3, [pc, #68]	; (8005e04 <_sbrk+0x50>)
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d102      	bne.n	8005dca <_sbrk+0x16>
		heap_end = &end;
 8005dc4:	4b0f      	ldr	r3, [pc, #60]	; (8005e04 <_sbrk+0x50>)
 8005dc6:	4a10      	ldr	r2, [pc, #64]	; (8005e08 <_sbrk+0x54>)
 8005dc8:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8005dca:	4b0e      	ldr	r3, [pc, #56]	; (8005e04 <_sbrk+0x50>)
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8005dd0:	4b0c      	ldr	r3, [pc, #48]	; (8005e04 <_sbrk+0x50>)
 8005dd2:	681a      	ldr	r2, [r3, #0]
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	4413      	add	r3, r2
 8005dd8:	466a      	mov	r2, sp
 8005dda:	4293      	cmp	r3, r2
 8005ddc:	d907      	bls.n	8005dee <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8005dde:	f00c fd69 	bl	80128b4 <__errno>
 8005de2:	4602      	mov	r2, r0
 8005de4:	230c      	movs	r3, #12
 8005de6:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8005de8:	f04f 33ff 	mov.w	r3, #4294967295
 8005dec:	e006      	b.n	8005dfc <_sbrk+0x48>
	}

	heap_end += incr;
 8005dee:	4b05      	ldr	r3, [pc, #20]	; (8005e04 <_sbrk+0x50>)
 8005df0:	681a      	ldr	r2, [r3, #0]
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	4413      	add	r3, r2
 8005df6:	4a03      	ldr	r2, [pc, #12]	; (8005e04 <_sbrk+0x50>)
 8005df8:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8005dfa:	68fb      	ldr	r3, [r7, #12]
}
 8005dfc:	4618      	mov	r0, r3
 8005dfe:	3710      	adds	r7, #16
 8005e00:	46bd      	mov	sp, r7
 8005e02:	bd80      	pop	{r7, pc}
 8005e04:	200003ec 	.word	0x200003ec
 8005e08:	20007b08 	.word	0x20007b08

08005e0c <veml_PushState>:
  HAL_I2C_Master_Transmit(&VEML_State.i2cHandle, VEML_ADDR, Data, 3, HAL_MAX_DELAY);
}



HAL_StatusTypeDef veml_PushState(){ //helper to push power/gain/it to VEML7700
 8005e0c:	b580      	push	{r7, lr}
 8005e0e:	b086      	sub	sp, #24
 8005e10:	af04      	add	r7, sp, #16

	//main config register; gain and integration time
	HAL_StatusTypeDef resp = HAL_ERROR;
 8005e12:	2301      	movs	r3, #1
 8005e14:	71fb      	strb	r3, [r7, #7]
	uint8_t out_data[2] = {0x00, 0x00};
 8005e16:	2300      	movs	r3, #0
 8005e18:	713b      	strb	r3, [r7, #4]
 8005e1a:	2300      	movs	r3, #0
 8005e1c:	717b      	strb	r3, [r7, #5]
	out_data[1] |= (VEML_State.gain << 3);
 8005e1e:	797b      	ldrb	r3, [r7, #5]
 8005e20:	b25a      	sxtb	r2, r3
 8005e22:	4b33      	ldr	r3, [pc, #204]	; (8005ef0 <veml_PushState+0xe4>)
 8005e24:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8005e28:	00db      	lsls	r3, r3, #3
 8005e2a:	b25b      	sxtb	r3, r3
 8005e2c:	4313      	orrs	r3, r2
 8005e2e:	b25b      	sxtb	r3, r3
 8005e30:	b2db      	uxtb	r3, r3
 8005e32:	717b      	strb	r3, [r7, #5]
	out_data[1] |= ((VEML_State.integrationTime & 0x0C) >> 2);
 8005e34:	797b      	ldrb	r3, [r7, #5]
 8005e36:	b25a      	sxtb	r2, r3
 8005e38:	4b2d      	ldr	r3, [pc, #180]	; (8005ef0 <veml_PushState+0xe4>)
 8005e3a:	f893 304f 	ldrb.w	r3, [r3, #79]	; 0x4f
 8005e3e:	109b      	asrs	r3, r3, #2
 8005e40:	b25b      	sxtb	r3, r3
 8005e42:	f003 0303 	and.w	r3, r3, #3
 8005e46:	b25b      	sxtb	r3, r3
 8005e48:	4313      	orrs	r3, r2
 8005e4a:	b25b      	sxtb	r3, r3
 8005e4c:	b2db      	uxtb	r3, r3
 8005e4e:	717b      	strb	r3, [r7, #5]
	out_data[0] |= ((VEML_State.integrationTime & 0x03) << 6);
 8005e50:	793b      	ldrb	r3, [r7, #4]
 8005e52:	b25a      	sxtb	r2, r3
 8005e54:	4b26      	ldr	r3, [pc, #152]	; (8005ef0 <veml_PushState+0xe4>)
 8005e56:	f893 304f 	ldrb.w	r3, [r3, #79]	; 0x4f
 8005e5a:	019b      	lsls	r3, r3, #6
 8005e5c:	b25b      	sxtb	r3, r3
 8005e5e:	4313      	orrs	r3, r2
 8005e60:	b25b      	sxtb	r3, r3
 8005e62:	b2db      	uxtb	r3, r3
 8005e64:	713b      	strb	r3, [r7, #4]
	out_data[0] |= (VEML7700_PERS_1 << 4);
 8005e66:	793b      	ldrb	r3, [r7, #4]
 8005e68:	713b      	strb	r3, [r7, #4]

	//out_data |= (VEML_State.gain << 11);
	//out_data |= (VEML_State.integrationTime << 6);
	//out_data |= (VEML7700_PERS_1 << 4);

	while (resp == HAL_ERROR){
 8005e6a:	e00e      	b.n	8005e8a <veml_PushState+0x7e>
	  resp = HAL_I2C_Mem_Write(&(VEML_State.i2cHandle),
 8005e6c:	f04f 33ff 	mov.w	r3, #4294967295
 8005e70:	9302      	str	r3, [sp, #8]
 8005e72:	2302      	movs	r3, #2
 8005e74:	9301      	str	r3, [sp, #4]
 8005e76:	1d3b      	adds	r3, r7, #4
 8005e78:	9300      	str	r3, [sp, #0]
 8005e7a:	2301      	movs	r3, #1
 8005e7c:	2200      	movs	r2, #0
 8005e7e:	2120      	movs	r1, #32
 8005e80:	481b      	ldr	r0, [pc, #108]	; (8005ef0 <veml_PushState+0xe4>)
 8005e82:	f001 f9dd 	bl	8007240 <HAL_I2C_Mem_Write>
 8005e86:	4603      	mov	r3, r0
 8005e88:	71fb      	strb	r3, [r7, #7]
	while (resp == HAL_ERROR){
 8005e8a:	79fb      	ldrb	r3, [r7, #7]
 8005e8c:	2b01      	cmp	r3, #1
 8005e8e:	d0ed      	beq.n	8005e6c <veml_PushState+0x60>
	  						   HAL_MAX_DELAY);
	  //I2C_Write_16b(VEML7700_ALS_CONFIG, out_data);
	}

	//power save config register
	resp = HAL_ERROR;
 8005e90:	2301      	movs	r3, #1
 8005e92:	71fb      	strb	r3, [r7, #7]
	out_data[0] = 0x00;
 8005e94:	2300      	movs	r3, #0
 8005e96:	713b      	strb	r3, [r7, #4]
	out_data[1] = 0x00;
 8005e98:	2300      	movs	r3, #0
 8005e9a:	717b      	strb	r3, [r7, #5]

	out_data[0] |= (VEML_State.powerSaveMode << 1);
 8005e9c:	793b      	ldrb	r3, [r7, #4]
 8005e9e:	b25a      	sxtb	r2, r3
 8005ea0:	4b13      	ldr	r3, [pc, #76]	; (8005ef0 <veml_PushState+0xe4>)
 8005ea2:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8005ea6:	005b      	lsls	r3, r3, #1
 8005ea8:	b25b      	sxtb	r3, r3
 8005eaa:	4313      	orrs	r3, r2
 8005eac:	b25b      	sxtb	r3, r3
 8005eae:	b2db      	uxtb	r3, r3
 8005eb0:	713b      	strb	r3, [r7, #4]
	out_data[0] |= VEML_State.powerSaveEnable;
 8005eb2:	793a      	ldrb	r2, [r7, #4]
 8005eb4:	4b0e      	ldr	r3, [pc, #56]	; (8005ef0 <veml_PushState+0xe4>)
 8005eb6:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8005eba:	4313      	orrs	r3, r2
 8005ebc:	b2db      	uxtb	r3, r3
 8005ebe:	713b      	strb	r3, [r7, #4]


	//out_data |= (VEML_State.powerSaveMode << 1);
	//out_data |= VEML_State.powerSaveEnable;

	while (resp == HAL_ERROR){
 8005ec0:	e00e      	b.n	8005ee0 <veml_PushState+0xd4>
	  resp = HAL_I2C_Mem_Write(&(VEML_State.i2cHandle),
 8005ec2:	f04f 33ff 	mov.w	r3, #4294967295
 8005ec6:	9302      	str	r3, [sp, #8]
 8005ec8:	2302      	movs	r3, #2
 8005eca:	9301      	str	r3, [sp, #4]
 8005ecc:	1d3b      	adds	r3, r7, #4
 8005ece:	9300      	str	r3, [sp, #0]
 8005ed0:	2301      	movs	r3, #1
 8005ed2:	2203      	movs	r2, #3
 8005ed4:	2120      	movs	r1, #32
 8005ed6:	4806      	ldr	r0, [pc, #24]	; (8005ef0 <veml_PushState+0xe4>)
 8005ed8:	f001 f9b2 	bl	8007240 <HAL_I2C_Mem_Write>
 8005edc:	4603      	mov	r3, r0
 8005ede:	71fb      	strb	r3, [r7, #7]
	while (resp == HAL_ERROR){
 8005ee0:	79fb      	ldrb	r3, [r7, #7]
 8005ee2:	2b01      	cmp	r3, #1
 8005ee4:	d0ed      	beq.n	8005ec2 <veml_PushState+0xb6>
							   out_data, 2,
							   HAL_MAX_DELAY);
	  //I2C_Write_16b(VEML7700_ALS_CONFIG, out_data);
	}

	return resp;
 8005ee6:	79fb      	ldrb	r3, [r7, #7]
}
 8005ee8:	4618      	mov	r0, r3
 8005eea:	3708      	adds	r7, #8
 8005eec:	46bd      	mov	sp, r7
 8005eee:	bd80      	pop	{r7, pc}
 8005ef0:	20007a6c 	.word	0x20007a6c

08005ef4 <veml_Setup>:

HAL_StatusTypeDef veml_Setup(I2C_HandleTypeDef i2cHandle, VEML7700_Mode_t Mode){
 8005ef4:	b084      	sub	sp, #16
 8005ef6:	b580      	push	{r7, lr}
 8005ef8:	af00      	add	r7, sp, #0
 8005efa:	f107 0c08 	add.w	ip, r7, #8
 8005efe:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}

	VEML_State.i2cHandle = i2cHandle;
 8005f02:	4b28      	ldr	r3, [pc, #160]	; (8005fa4 <veml_Setup+0xb0>)
 8005f04:	4618      	mov	r0, r3
 8005f06:	f107 0108 	add.w	r1, r7, #8
 8005f0a:	234c      	movs	r3, #76	; 0x4c
 8005f0c:	461a      	mov	r2, r3
 8005f0e:	f00c fcfb 	bl	8012908 <memcpy>
	VEML_State.autoGain = 0;
 8005f12:	4b24      	ldr	r3, [pc, #144]	; (8005fa4 <veml_Setup+0xb0>)
 8005f14:	2200      	movs	r2, #0
 8005f16:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

	switch (Mode){
 8005f1a:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 8005f1e:	2b01      	cmp	r3, #1
 8005f20:	d014      	beq.n	8005f4c <veml_Setup+0x58>
 8005f22:	2b02      	cmp	r3, #2
 8005f24:	d023      	beq.n	8005f6e <veml_Setup+0x7a>
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d132      	bne.n	8005f90 <veml_Setup+0x9c>
		case VEML_5S_POLLING:
			VEML_State.powerSaveMode = VEML7700_POWERSAVE_MODE4;
 8005f2a:	4b1e      	ldr	r3, [pc, #120]	; (8005fa4 <veml_Setup+0xb0>)
 8005f2c:	2203      	movs	r2, #3
 8005f2e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
			VEML_State.powerSaveEnable = 0x01;
 8005f32:	4b1c      	ldr	r3, [pc, #112]	; (8005fa4 <veml_Setup+0xb0>)
 8005f34:	2201      	movs	r2, #1
 8005f36:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
			VEML_State.gain = VEML7700_GAIN_2;
 8005f3a:	4b1a      	ldr	r3, [pc, #104]	; (8005fa4 <veml_Setup+0xb0>)
 8005f3c:	2201      	movs	r2, #1
 8005f3e:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
			VEML_State.integrationTime = VEML7700_IT_800MS;
 8005f42:	4b18      	ldr	r3, [pc, #96]	; (8005fa4 <veml_Setup+0xb0>)
 8005f44:	2203      	movs	r2, #3
 8005f46:	f883 204f 	strb.w	r2, [r3, #79]	; 0x4f
			break;
 8005f4a:	e021      	b.n	8005f90 <veml_Setup+0x9c>

		case VEML_100MS_POLLING:
			VEML_State.powerSaveMode = VEML7700_POWERSAVE_MODE1;
 8005f4c:	4b15      	ldr	r3, [pc, #84]	; (8005fa4 <veml_Setup+0xb0>)
 8005f4e:	2200      	movs	r2, #0
 8005f50:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
			VEML_State.powerSaveEnable = 0x00;
 8005f54:	4b13      	ldr	r3, [pc, #76]	; (8005fa4 <veml_Setup+0xb0>)
 8005f56:	2200      	movs	r2, #0
 8005f58:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
			VEML_State.gain = VEML7700_GAIN_2;
 8005f5c:	4b11      	ldr	r3, [pc, #68]	; (8005fa4 <veml_Setup+0xb0>)
 8005f5e:	2201      	movs	r2, #1
 8005f60:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
			VEML_State.integrationTime = VEML7700_IT_100MS;
 8005f64:	4b0f      	ldr	r3, [pc, #60]	; (8005fa4 <veml_Setup+0xb0>)
 8005f66:	2200      	movs	r2, #0
 8005f68:	f883 204f 	strb.w	r2, [r3, #79]	; 0x4f
			break;
 8005f6c:	e010      	b.n	8005f90 <veml_Setup+0x9c>

		case VEML_25MS_POLLING:
			VEML_State.powerSaveMode = VEML7700_POWERSAVE_MODE1;
 8005f6e:	4b0d      	ldr	r3, [pc, #52]	; (8005fa4 <veml_Setup+0xb0>)
 8005f70:	2200      	movs	r2, #0
 8005f72:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
			VEML_State.powerSaveEnable = 0x00;
 8005f76:	4b0b      	ldr	r3, [pc, #44]	; (8005fa4 <veml_Setup+0xb0>)
 8005f78:	2200      	movs	r2, #0
 8005f7a:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
			VEML_State.gain = VEML7700_GAIN_2;
 8005f7e:	4b09      	ldr	r3, [pc, #36]	; (8005fa4 <veml_Setup+0xb0>)
 8005f80:	2201      	movs	r2, #1
 8005f82:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
			VEML_State.integrationTime = VEML7700_IT_25MS;
 8005f86:	4b07      	ldr	r3, [pc, #28]	; (8005fa4 <veml_Setup+0xb0>)
 8005f88:	220c      	movs	r2, #12
 8005f8a:	f883 204f 	strb.w	r2, [r3, #79]	; 0x4f
			break;
 8005f8e:	bf00      	nop
	}

	return veml_PushState();
 8005f90:	f7ff ff3c 	bl	8005e0c <veml_PushState>
 8005f94:	4603      	mov	r3, r0

}
 8005f96:	4618      	mov	r0, r3
 8005f98:	46bd      	mov	sp, r7
 8005f9a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005f9e:	b004      	add	sp, #16
 8005fa0:	4770      	bx	lr
 8005fa2:	bf00      	nop
 8005fa4:	20007a6c 	.word	0x20007a6c

08005fa8 <autoGain>:
HAL_StatusTypeDef veml_Set_IntegrationTime(uint8_t integrationTime){
	VEML_State.integrationTime = integrationTime;
	return veml_PushState();
}

void autoGain(uint16_t raw_data){
 8005fa8:	b580      	push	{r7, lr}
 8005faa:	b082      	sub	sp, #8
 8005fac:	af00      	add	r7, sp, #0
 8005fae:	4603      	mov	r3, r0
 8005fb0:	80fb      	strh	r3, [r7, #6]

	if (VEML_State.autoGain){ //if we are autoGaining
 8005fb2:	4b29      	ldr	r3, [pc, #164]	; (8006058 <autoGain+0xb0>)
 8005fb4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d049      	beq.n	8006050 <autoGain+0xa8>

		//if raw value is > ~90% of 0xFFFF and we're not at min gain
		if (VEML_State.gain != VEML7700_GAIN_1_8 && raw_data > 0xE665) {
 8005fbc:	4b26      	ldr	r3, [pc, #152]	; (8006058 <autoGain+0xb0>)
 8005fbe:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8005fc2:	2b02      	cmp	r3, #2
 8005fc4:	d01f      	beq.n	8006006 <autoGain+0x5e>
 8005fc6:	88fb      	ldrh	r3, [r7, #6]
 8005fc8:	f24e 6265 	movw	r2, #58981	; 0xe665
 8005fcc:	4293      	cmp	r3, r2
 8005fce:	d91a      	bls.n	8006006 <autoGain+0x5e>
			switch (VEML_State.gain){
 8005fd0:	4b21      	ldr	r3, [pc, #132]	; (8006058 <autoGain+0xb0>)
 8005fd2:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8005fd6:	2b01      	cmp	r3, #1
 8005fd8:	d004      	beq.n	8005fe4 <autoGain+0x3c>
 8005fda:	2b03      	cmp	r3, #3
 8005fdc:	d00c      	beq.n	8005ff8 <autoGain+0x50>
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d005      	beq.n	8005fee <autoGain+0x46>
 8005fe2:	e00e      	b.n	8006002 <autoGain+0x5a>
				case VEML7700_GAIN_2:
					VEML_State.gain = VEML7700_GAIN_1;
 8005fe4:	4b1c      	ldr	r3, [pc, #112]	; (8006058 <autoGain+0xb0>)
 8005fe6:	2200      	movs	r2, #0
 8005fe8:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
					break;
 8005fec:	e009      	b.n	8006002 <autoGain+0x5a>
				case VEML7700_GAIN_1:
					VEML_State.gain = VEML7700_GAIN_1_4;
 8005fee:	4b1a      	ldr	r3, [pc, #104]	; (8006058 <autoGain+0xb0>)
 8005ff0:	2203      	movs	r2, #3
 8005ff2:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
				    break;
 8005ff6:	e004      	b.n	8006002 <autoGain+0x5a>
				case VEML7700_GAIN_1_4:
					VEML_State.gain = VEML7700_GAIN_1_8;
 8005ff8:	4b17      	ldr	r3, [pc, #92]	; (8006058 <autoGain+0xb0>)
 8005ffa:	2202      	movs	r2, #2
 8005ffc:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
					break;
 8006000:	bf00      	nop
			}
			veml_PushState();
 8006002:	f7ff ff03 	bl	8005e0c <veml_PushState>
		}

		//if raw value is < ~45% of 0xFFFF and we're not at max gain
		if (VEML_State.gain != VEML7700_GAIN_2 && raw_data < 0x7332) {
 8006006:	4b14      	ldr	r3, [pc, #80]	; (8006058 <autoGain+0xb0>)
 8006008:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800600c:	2b01      	cmp	r3, #1
 800600e:	d01f      	beq.n	8006050 <autoGain+0xa8>
 8006010:	88fb      	ldrh	r3, [r7, #6]
 8006012:	f247 3231 	movw	r2, #29489	; 0x7331
 8006016:	4293      	cmp	r3, r2
 8006018:	d81a      	bhi.n	8006050 <autoGain+0xa8>
			switch (VEML_State.gain){
 800601a:	4b0f      	ldr	r3, [pc, #60]	; (8006058 <autoGain+0xb0>)
 800601c:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8006020:	2b02      	cmp	r3, #2
 8006022:	d004      	beq.n	800602e <autoGain+0x86>
 8006024:	2b03      	cmp	r3, #3
 8006026:	d007      	beq.n	8006038 <autoGain+0x90>
 8006028:	2b00      	cmp	r3, #0
 800602a:	d00a      	beq.n	8006042 <autoGain+0x9a>
 800602c:	e00e      	b.n	800604c <autoGain+0xa4>
				case VEML7700_GAIN_1_8:
					VEML_State.gain = VEML7700_GAIN_1_4;
 800602e:	4b0a      	ldr	r3, [pc, #40]	; (8006058 <autoGain+0xb0>)
 8006030:	2203      	movs	r2, #3
 8006032:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
					break;
 8006036:	e009      	b.n	800604c <autoGain+0xa4>
				case VEML7700_GAIN_1_4:
					VEML_State.gain = VEML7700_GAIN_1;
 8006038:	4b07      	ldr	r3, [pc, #28]	; (8006058 <autoGain+0xb0>)
 800603a:	2200      	movs	r2, #0
 800603c:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
				    break;
 8006040:	e004      	b.n	800604c <autoGain+0xa4>
				case VEML7700_GAIN_1:
					VEML_State.gain = VEML7700_GAIN_2;
 8006042:	4b05      	ldr	r3, [pc, #20]	; (8006058 <autoGain+0xb0>)
 8006044:	2201      	movs	r2, #1
 8006046:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
					break;
 800604a:	bf00      	nop
			}
			veml_PushState();
 800604c:	f7ff fede 	bl	8005e0c <veml_PushState>
		}
	}
}
 8006050:	bf00      	nop
 8006052:	3708      	adds	r7, #8
 8006054:	46bd      	mov	sp, r7
 8006056:	bd80      	pop	{r7, pc}
 8006058:	20007a6c 	.word	0x20007a6c

0800605c <veml_norm_data>:

float veml_norm_data(uint16_t raw_data){
 800605c:	b480      	push	{r7}
 800605e:	b085      	sub	sp, #20
 8006060:	af00      	add	r7, sp, #0
 8006062:	4603      	mov	r3, r0
 8006064:	80fb      	strh	r3, [r7, #6]

	float lux = (float)raw_data;
 8006066:	88fb      	ldrh	r3, [r7, #6]
 8006068:	ee07 3a90 	vmov	s15, r3
 800606c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006070:	edc7 7a03 	vstr	s15, [r7, #12]

	switch (VEML_State.gain){
 8006074:	4b3d      	ldr	r3, [pc, #244]	; (800616c <veml_norm_data+0x110>)
 8006076:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800607a:	2b02      	cmp	r3, #2
 800607c:	d015      	beq.n	80060aa <veml_norm_data+0x4e>
 800607e:	2b03      	cmp	r3, #3
 8006080:	d00a      	beq.n	8006098 <veml_norm_data+0x3c>
 8006082:	2b01      	cmp	r3, #1
 8006084:	d11a      	bne.n	80060bc <veml_norm_data+0x60>
		case VEML7700_GAIN_2:
			lux /= 2.0;
 8006086:	ed97 7a03 	vldr	s14, [r7, #12]
 800608a:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800608e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006092:	edc7 7a03 	vstr	s15, [r7, #12]
			break;
 8006096:	e011      	b.n	80060bc <veml_norm_data+0x60>
		case VEML7700_GAIN_1_4:
		    lux *= 4;
 8006098:	edd7 7a03 	vldr	s15, [r7, #12]
 800609c:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 80060a0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80060a4:	edc7 7a03 	vstr	s15, [r7, #12]
		    break;
 80060a8:	e008      	b.n	80060bc <veml_norm_data+0x60>
		case VEML7700_GAIN_1_8:
		    lux *= 8;
 80060aa:	edd7 7a03 	vldr	s15, [r7, #12]
 80060ae:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 80060b2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80060b6:	edc7 7a03 	vstr	s15, [r7, #12]
		    break;
 80060ba:	bf00      	nop
	}

	switch (VEML_State.integrationTime){
 80060bc:	4b2b      	ldr	r3, [pc, #172]	; (800616c <veml_norm_data+0x110>)
 80060be:	f893 304f 	ldrb.w	r3, [r3, #79]	; 0x4f
 80060c2:	3b01      	subs	r3, #1
 80060c4:	2b0b      	cmp	r3, #11
 80060c6:	d846      	bhi.n	8006156 <veml_norm_data+0xfa>
 80060c8:	a201      	add	r2, pc, #4	; (adr r2, 80060d0 <veml_norm_data+0x74>)
 80060ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060ce:	bf00      	nop
 80060d0:	08006121 	.word	0x08006121
 80060d4:	08006133 	.word	0x08006133
 80060d8:	08006145 	.word	0x08006145
 80060dc:	08006157 	.word	0x08006157
 80060e0:	08006157 	.word	0x08006157
 80060e4:	08006157 	.word	0x08006157
 80060e8:	08006157 	.word	0x08006157
 80060ec:	08006113 	.word	0x08006113
 80060f0:	08006157 	.word	0x08006157
 80060f4:	08006157 	.word	0x08006157
 80060f8:	08006157 	.word	0x08006157
 80060fc:	08006101 	.word	0x08006101
	  	case VEML7700_IT_25MS:
	  		lux *= 4;
 8006100:	edd7 7a03 	vldr	s15, [r7, #12]
 8006104:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8006108:	ee67 7a87 	vmul.f32	s15, s15, s14
 800610c:	edc7 7a03 	vstr	s15, [r7, #12]
	  		break;
 8006110:	e021      	b.n	8006156 <veml_norm_data+0xfa>
	  	case VEML7700_IT_50MS:
	  		lux *= 2;
 8006112:	edd7 7a03 	vldr	s15, [r7, #12]
 8006116:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800611a:	edc7 7a03 	vstr	s15, [r7, #12]
	  		break;
 800611e:	e01a      	b.n	8006156 <veml_norm_data+0xfa>
	  	case VEML7700_IT_200MS:
	  		lux /= 2.0;
 8006120:	ed97 7a03 	vldr	s14, [r7, #12]
 8006124:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8006128:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800612c:	edc7 7a03 	vstr	s15, [r7, #12]
	  		break;
 8006130:	e011      	b.n	8006156 <veml_norm_data+0xfa>
	  	case VEML7700_IT_400MS:
	  		lux /= 4.0;
 8006132:	ed97 7a03 	vldr	s14, [r7, #12]
 8006136:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 800613a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800613e:	edc7 7a03 	vstr	s15, [r7, #12]
	  		break;
 8006142:	e008      	b.n	8006156 <veml_norm_data+0xfa>
	  	case VEML7700_IT_800MS:
	  		lux /= 8.0;
 8006144:	ed97 7a03 	vldr	s14, [r7, #12]
 8006148:	eef2 6a00 	vmov.f32	s13, #32	; 0x41000000  8.0
 800614c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006150:	edc7 7a03 	vstr	s15, [r7, #12]
	  		break;
 8006154:	bf00      	nop
	}

	return lux;
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	ee07 3a90 	vmov	s15, r3
}
 800615c:	eeb0 0a67 	vmov.f32	s0, s15
 8006160:	3714      	adds	r7, #20
 8006162:	46bd      	mov	sp, r7
 8006164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006168:	4770      	bx	lr
 800616a:	bf00      	nop
 800616c:	20007a6c 	.word	0x20007a6c

08006170 <veml_Get_Lux>:

float veml_Get_Lux(){
 8006170:	b5b0      	push	{r4, r5, r7, lr}
 8006172:	b088      	sub	sp, #32
 8006174:	af04      	add	r7, sp, #16

	const uint16_t max_tries = 300;
 8006176:	f44f 7396 	mov.w	r3, #300	; 0x12c
 800617a:	80fb      	strh	r3, [r7, #6]
	uint16_t current_tries = 0;
 800617c:	2300      	movs	r3, #0
 800617e:	81fb      	strh	r3, [r7, #14]

	uint8_t buffer[2];

	HAL_StatusTypeDef resp = HAL_ERROR;
 8006180:	2301      	movs	r3, #1
 8006182:	737b      	strb	r3, [r7, #13]

	while (resp == HAL_ERROR && current_tries < max_tries){
 8006184:	e011      	b.n	80061aa <veml_Get_Lux+0x3a>
	  resp = HAL_I2C_Mem_Read(&(VEML_State.i2cHandle),
 8006186:	f04f 33ff 	mov.w	r3, #4294967295
 800618a:	9302      	str	r3, [sp, #8]
 800618c:	2302      	movs	r3, #2
 800618e:	9301      	str	r3, [sp, #4]
 8006190:	463b      	mov	r3, r7
 8006192:	9300      	str	r3, [sp, #0]
 8006194:	2301      	movs	r3, #1
 8006196:	2204      	movs	r2, #4
 8006198:	2120      	movs	r1, #32
 800619a:	4867      	ldr	r0, [pc, #412]	; (8006338 <veml_Get_Lux+0x1c8>)
 800619c:	f001 f964 	bl	8007468 <HAL_I2C_Mem_Read>
 80061a0:	4603      	mov	r3, r0
 80061a2:	737b      	strb	r3, [r7, #13]
							  HAL_MAX_DELAY);

	  //resp = HAL_I2C_Master_Receive(&VEML_State.i2cHandle,
	  //	  	  	  VEML_ADDR,&buffer, 2,
	//			  HAL_MAX_DELAY);
	  current_tries++;
 80061a4:	89fb      	ldrh	r3, [r7, #14]
 80061a6:	3301      	adds	r3, #1
 80061a8:	81fb      	strh	r3, [r7, #14]
	while (resp == HAL_ERROR && current_tries < max_tries){
 80061aa:	7b7b      	ldrb	r3, [r7, #13]
 80061ac:	2b01      	cmp	r3, #1
 80061ae:	d103      	bne.n	80061b8 <veml_Get_Lux+0x48>
 80061b0:	89fa      	ldrh	r2, [r7, #14]
 80061b2:	88fb      	ldrh	r3, [r7, #6]
 80061b4:	429a      	cmp	r2, r3
 80061b6:	d3e6      	bcc.n	8006186 <veml_Get_Lux+0x16>
	}

	if (current_tries >= max_tries) {
 80061b8:	89fa      	ldrh	r2, [r7, #14]
 80061ba:	88fb      	ldrh	r3, [r7, #6]
 80061bc:	429a      	cmp	r2, r3
 80061be:	d301      	bcc.n	80061c4 <veml_Get_Lux+0x54>
	  return -1;
 80061c0:	4b5e      	ldr	r3, [pc, #376]	; (800633c <veml_Get_Lux+0x1cc>)
 80061c2:	e090      	b.n	80062e6 <veml_Get_Lux+0x176>
	}

	uint16_t data = (buffer[1] << 8) | buffer[0];
 80061c4:	787b      	ldrb	r3, [r7, #1]
 80061c6:	021b      	lsls	r3, r3, #8
 80061c8:	b21a      	sxth	r2, r3
 80061ca:	783b      	ldrb	r3, [r7, #0]
 80061cc:	b21b      	sxth	r3, r3
 80061ce:	4313      	orrs	r3, r2
 80061d0:	b21b      	sxth	r3, r3
 80061d2:	80bb      	strh	r3, [r7, #4]

	autoGain(data);
 80061d4:	88bb      	ldrh	r3, [r7, #4]
 80061d6:	4618      	mov	r0, r3
 80061d8:	f7ff fee6 	bl	8005fa8 <autoGain>

	float lux = (veml_norm_data(data) * 0.0576);
 80061dc:	88bb      	ldrh	r3, [r7, #4]
 80061de:	4618      	mov	r0, r3
 80061e0:	f7ff ff3c 	bl	800605c <veml_norm_data>
 80061e4:	ee10 3a10 	vmov	r3, s0
 80061e8:	4618      	mov	r0, r3
 80061ea:	f7fa f985 	bl	80004f8 <__aeabi_f2d>
 80061ee:	a342      	add	r3, pc, #264	; (adr r3, 80062f8 <veml_Get_Lux+0x188>)
 80061f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061f4:	f7fa f9d8 	bl	80005a8 <__aeabi_dmul>
 80061f8:	4603      	mov	r3, r0
 80061fa:	460c      	mov	r4, r1
 80061fc:	4618      	mov	r0, r3
 80061fe:	4621      	mov	r1, r4
 8006200:	f7fa fcaa 	bl	8000b58 <__aeabi_d2f>
 8006204:	4603      	mov	r3, r0
 8006206:	60bb      	str	r3, [r7, #8]

	if (VEML_State.gain == VEML7700_GAIN_1_8 && VEML_State.integrationTime == VEML7700_IT_25MS){
 8006208:	4b4b      	ldr	r3, [pc, #300]	; (8006338 <veml_Get_Lux+0x1c8>)
 800620a:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800620e:	2b02      	cmp	r3, #2
 8006210:	d168      	bne.n	80062e4 <veml_Get_Lux+0x174>
 8006212:	4b49      	ldr	r3, [pc, #292]	; (8006338 <veml_Get_Lux+0x1c8>)
 8006214:	f893 304f 	ldrb.w	r3, [r3, #79]	; 0x4f
 8006218:	2b0c      	cmp	r3, #12
 800621a:	d163      	bne.n	80062e4 <veml_Get_Lux+0x174>
		lux = 6.0135e-13 * pow(lux, 4) - 9.3924e-9 * pow(lux, 3) + 8.1488e-5 * pow(lux, 2) + 1.0023 * lux;
 800621c:	68b8      	ldr	r0, [r7, #8]
 800621e:	f7fa f96b 	bl	80004f8 <__aeabi_f2d>
 8006222:	4603      	mov	r3, r0
 8006224:	460c      	mov	r4, r1
 8006226:	ed9f 1b36 	vldr	d1, [pc, #216]	; 8006300 <veml_Get_Lux+0x190>
 800622a:	ec44 3b10 	vmov	d0, r3, r4
 800622e:	f00f f91b 	bl	8015468 <pow>
 8006232:	ec51 0b10 	vmov	r0, r1, d0
 8006236:	a334      	add	r3, pc, #208	; (adr r3, 8006308 <veml_Get_Lux+0x198>)
 8006238:	e9d3 2300 	ldrd	r2, r3, [r3]
 800623c:	f7fa f9b4 	bl	80005a8 <__aeabi_dmul>
 8006240:	4603      	mov	r3, r0
 8006242:	460c      	mov	r4, r1
 8006244:	4625      	mov	r5, r4
 8006246:	461c      	mov	r4, r3
 8006248:	68b8      	ldr	r0, [r7, #8]
 800624a:	f7fa f955 	bl	80004f8 <__aeabi_f2d>
 800624e:	4602      	mov	r2, r0
 8006250:	460b      	mov	r3, r1
 8006252:	ed9f 1b2f 	vldr	d1, [pc, #188]	; 8006310 <veml_Get_Lux+0x1a0>
 8006256:	ec43 2b10 	vmov	d0, r2, r3
 800625a:	f00f f905 	bl	8015468 <pow>
 800625e:	ec51 0b10 	vmov	r0, r1, d0
 8006262:	a32d      	add	r3, pc, #180	; (adr r3, 8006318 <veml_Get_Lux+0x1a8>)
 8006264:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006268:	f7fa f99e 	bl	80005a8 <__aeabi_dmul>
 800626c:	4602      	mov	r2, r0
 800626e:	460b      	mov	r3, r1
 8006270:	4620      	mov	r0, r4
 8006272:	4629      	mov	r1, r5
 8006274:	f7f9 ffe0 	bl	8000238 <__aeabi_dsub>
 8006278:	4603      	mov	r3, r0
 800627a:	460c      	mov	r4, r1
 800627c:	4625      	mov	r5, r4
 800627e:	461c      	mov	r4, r3
 8006280:	68b8      	ldr	r0, [r7, #8]
 8006282:	f7fa f939 	bl	80004f8 <__aeabi_f2d>
 8006286:	4602      	mov	r2, r0
 8006288:	460b      	mov	r3, r1
 800628a:	ed9f 1b25 	vldr	d1, [pc, #148]	; 8006320 <veml_Get_Lux+0x1b0>
 800628e:	ec43 2b10 	vmov	d0, r2, r3
 8006292:	f00f f8e9 	bl	8015468 <pow>
 8006296:	ec51 0b10 	vmov	r0, r1, d0
 800629a:	a323      	add	r3, pc, #140	; (adr r3, 8006328 <veml_Get_Lux+0x1b8>)
 800629c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062a0:	f7fa f982 	bl	80005a8 <__aeabi_dmul>
 80062a4:	4602      	mov	r2, r0
 80062a6:	460b      	mov	r3, r1
 80062a8:	4620      	mov	r0, r4
 80062aa:	4629      	mov	r1, r5
 80062ac:	f7f9 ffc6 	bl	800023c <__adddf3>
 80062b0:	4603      	mov	r3, r0
 80062b2:	460c      	mov	r4, r1
 80062b4:	4625      	mov	r5, r4
 80062b6:	461c      	mov	r4, r3
 80062b8:	68b8      	ldr	r0, [r7, #8]
 80062ba:	f7fa f91d 	bl	80004f8 <__aeabi_f2d>
 80062be:	a31c      	add	r3, pc, #112	; (adr r3, 8006330 <veml_Get_Lux+0x1c0>)
 80062c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062c4:	f7fa f970 	bl	80005a8 <__aeabi_dmul>
 80062c8:	4602      	mov	r2, r0
 80062ca:	460b      	mov	r3, r1
 80062cc:	4620      	mov	r0, r4
 80062ce:	4629      	mov	r1, r5
 80062d0:	f7f9 ffb4 	bl	800023c <__adddf3>
 80062d4:	4603      	mov	r3, r0
 80062d6:	460c      	mov	r4, r1
 80062d8:	4618      	mov	r0, r3
 80062da:	4621      	mov	r1, r4
 80062dc:	f7fa fc3c 	bl	8000b58 <__aeabi_d2f>
 80062e0:	4603      	mov	r3, r0
 80062e2:	60bb      	str	r3, [r7, #8]
	}

	return lux;
 80062e4:	68bb      	ldr	r3, [r7, #8]
 80062e6:	ee07 3a90 	vmov	s15, r3
}
 80062ea:	eeb0 0a67 	vmov.f32	s0, s15
 80062ee:	3710      	adds	r7, #16
 80062f0:	46bd      	mov	sp, r7
 80062f2:	bdb0      	pop	{r4, r5, r7, pc}
 80062f4:	f3af 8000 	nop.w
 80062f8:	487fcb92 	.word	0x487fcb92
 80062fc:	3fad7dbf 	.word	0x3fad7dbf
 8006300:	00000000 	.word	0x00000000
 8006304:	40100000 	.word	0x40100000
 8006308:	b18f283b 	.word	0xb18f283b
 800630c:	3d65287a 	.word	0x3d65287a
 8006310:	00000000 	.word	0x00000000
 8006314:	40080000 	.word	0x40080000
 8006318:	c91ef46e 	.word	0xc91ef46e
 800631c:	3e442b86 	.word	0x3e442b86
 8006320:	00000000 	.word	0x00000000
 8006324:	40000000 	.word	0x40000000
 8006328:	2e18cab0 	.word	0x2e18cab0
 800632c:	3f155c91 	.word	0x3f155c91
 8006330:	b98c7e28 	.word	0xb98c7e28
 8006334:	3ff0096b 	.word	0x3ff0096b
 8006338:	20007a6c 	.word	0x20007a6c
 800633c:	bf800000 	.word	0xbf800000

08006340 <veml_Get_White_Lux>:

float veml_Get_White_Lux(){
 8006340:	b5b0      	push	{r4, r5, r7, lr}
 8006342:	b088      	sub	sp, #32
 8006344:	af04      	add	r7, sp, #16

	const uint16_t max_tries = 300;
 8006346:	f44f 7396 	mov.w	r3, #300	; 0x12c
 800634a:	80fb      	strh	r3, [r7, #6]
	uint16_t current_tries = 0;
 800634c:	2300      	movs	r3, #0
 800634e:	81fb      	strh	r3, [r7, #14]

	uint8_t buffer[2];

	HAL_StatusTypeDef resp = HAL_ERROR;
 8006350:	2301      	movs	r3, #1
 8006352:	737b      	strb	r3, [r7, #13]

	while (resp == HAL_ERROR && current_tries < max_tries){
 8006354:	e011      	b.n	800637a <veml_Get_White_Lux+0x3a>
	  resp = HAL_I2C_Mem_Read(&(VEML_State.i2cHandle),
 8006356:	f04f 33ff 	mov.w	r3, #4294967295
 800635a:	9302      	str	r3, [sp, #8]
 800635c:	2302      	movs	r3, #2
 800635e:	9301      	str	r3, [sp, #4]
 8006360:	463b      	mov	r3, r7
 8006362:	9300      	str	r3, [sp, #0]
 8006364:	2301      	movs	r3, #1
 8006366:	2205      	movs	r2, #5
 8006368:	2120      	movs	r1, #32
 800636a:	4867      	ldr	r0, [pc, #412]	; (8006508 <veml_Get_White_Lux+0x1c8>)
 800636c:	f001 f87c 	bl	8007468 <HAL_I2C_Mem_Read>
 8006370:	4603      	mov	r3, r0
 8006372:	737b      	strb	r3, [r7, #13]
			  	  	  	  	  VEML_ADDR,
							  VEML7700_WHITE_DATA, 1,
							  buffer, 2,
							  HAL_MAX_DELAY);
	  current_tries++;
 8006374:	89fb      	ldrh	r3, [r7, #14]
 8006376:	3301      	adds	r3, #1
 8006378:	81fb      	strh	r3, [r7, #14]
	while (resp == HAL_ERROR && current_tries < max_tries){
 800637a:	7b7b      	ldrb	r3, [r7, #13]
 800637c:	2b01      	cmp	r3, #1
 800637e:	d103      	bne.n	8006388 <veml_Get_White_Lux+0x48>
 8006380:	89fa      	ldrh	r2, [r7, #14]
 8006382:	88fb      	ldrh	r3, [r7, #6]
 8006384:	429a      	cmp	r2, r3
 8006386:	d3e6      	bcc.n	8006356 <veml_Get_White_Lux+0x16>
	}

	if (current_tries >= max_tries) {
 8006388:	89fa      	ldrh	r2, [r7, #14]
 800638a:	88fb      	ldrh	r3, [r7, #6]
 800638c:	429a      	cmp	r2, r3
 800638e:	d301      	bcc.n	8006394 <veml_Get_White_Lux+0x54>
	  return -1;
 8006390:	4b5e      	ldr	r3, [pc, #376]	; (800650c <veml_Get_White_Lux+0x1cc>)
 8006392:	e090      	b.n	80064b6 <veml_Get_White_Lux+0x176>
	}

	uint16_t data = (buffer[1] << 8) | buffer[0];
 8006394:	787b      	ldrb	r3, [r7, #1]
 8006396:	021b      	lsls	r3, r3, #8
 8006398:	b21a      	sxth	r2, r3
 800639a:	783b      	ldrb	r3, [r7, #0]
 800639c:	b21b      	sxth	r3, r3
 800639e:	4313      	orrs	r3, r2
 80063a0:	b21b      	sxth	r3, r3
 80063a2:	80bb      	strh	r3, [r7, #4]

	autoGain(data);
 80063a4:	88bb      	ldrh	r3, [r7, #4]
 80063a6:	4618      	mov	r0, r3
 80063a8:	f7ff fdfe 	bl	8005fa8 <autoGain>

	float lux = (veml_norm_data(data) * 0.0576);
 80063ac:	88bb      	ldrh	r3, [r7, #4]
 80063ae:	4618      	mov	r0, r3
 80063b0:	f7ff fe54 	bl	800605c <veml_norm_data>
 80063b4:	ee10 3a10 	vmov	r3, s0
 80063b8:	4618      	mov	r0, r3
 80063ba:	f7fa f89d 	bl	80004f8 <__aeabi_f2d>
 80063be:	a342      	add	r3, pc, #264	; (adr r3, 80064c8 <veml_Get_White_Lux+0x188>)
 80063c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063c4:	f7fa f8f0 	bl	80005a8 <__aeabi_dmul>
 80063c8:	4603      	mov	r3, r0
 80063ca:	460c      	mov	r4, r1
 80063cc:	4618      	mov	r0, r3
 80063ce:	4621      	mov	r1, r4
 80063d0:	f7fa fbc2 	bl	8000b58 <__aeabi_d2f>
 80063d4:	4603      	mov	r3, r0
 80063d6:	60bb      	str	r3, [r7, #8]

	if (VEML_State.gain == VEML7700_GAIN_1_8 && VEML_State.integrationTime == VEML7700_IT_25MS){
 80063d8:	4b4b      	ldr	r3, [pc, #300]	; (8006508 <veml_Get_White_Lux+0x1c8>)
 80063da:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 80063de:	2b02      	cmp	r3, #2
 80063e0:	d168      	bne.n	80064b4 <veml_Get_White_Lux+0x174>
 80063e2:	4b49      	ldr	r3, [pc, #292]	; (8006508 <veml_Get_White_Lux+0x1c8>)
 80063e4:	f893 304f 	ldrb.w	r3, [r3, #79]	; 0x4f
 80063e8:	2b0c      	cmp	r3, #12
 80063ea:	d163      	bne.n	80064b4 <veml_Get_White_Lux+0x174>
		lux = 6.0135e-13 * pow(lux, 4) - 9.3924e-9 * pow(lux, 3) + 8.1488e-5 * pow(lux, 2) + 1.0023 * lux;
 80063ec:	68b8      	ldr	r0, [r7, #8]
 80063ee:	f7fa f883 	bl	80004f8 <__aeabi_f2d>
 80063f2:	4603      	mov	r3, r0
 80063f4:	460c      	mov	r4, r1
 80063f6:	ed9f 1b36 	vldr	d1, [pc, #216]	; 80064d0 <veml_Get_White_Lux+0x190>
 80063fa:	ec44 3b10 	vmov	d0, r3, r4
 80063fe:	f00f f833 	bl	8015468 <pow>
 8006402:	ec51 0b10 	vmov	r0, r1, d0
 8006406:	a334      	add	r3, pc, #208	; (adr r3, 80064d8 <veml_Get_White_Lux+0x198>)
 8006408:	e9d3 2300 	ldrd	r2, r3, [r3]
 800640c:	f7fa f8cc 	bl	80005a8 <__aeabi_dmul>
 8006410:	4603      	mov	r3, r0
 8006412:	460c      	mov	r4, r1
 8006414:	4625      	mov	r5, r4
 8006416:	461c      	mov	r4, r3
 8006418:	68b8      	ldr	r0, [r7, #8]
 800641a:	f7fa f86d 	bl	80004f8 <__aeabi_f2d>
 800641e:	4602      	mov	r2, r0
 8006420:	460b      	mov	r3, r1
 8006422:	ed9f 1b2f 	vldr	d1, [pc, #188]	; 80064e0 <veml_Get_White_Lux+0x1a0>
 8006426:	ec43 2b10 	vmov	d0, r2, r3
 800642a:	f00f f81d 	bl	8015468 <pow>
 800642e:	ec51 0b10 	vmov	r0, r1, d0
 8006432:	a32d      	add	r3, pc, #180	; (adr r3, 80064e8 <veml_Get_White_Lux+0x1a8>)
 8006434:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006438:	f7fa f8b6 	bl	80005a8 <__aeabi_dmul>
 800643c:	4602      	mov	r2, r0
 800643e:	460b      	mov	r3, r1
 8006440:	4620      	mov	r0, r4
 8006442:	4629      	mov	r1, r5
 8006444:	f7f9 fef8 	bl	8000238 <__aeabi_dsub>
 8006448:	4603      	mov	r3, r0
 800644a:	460c      	mov	r4, r1
 800644c:	4625      	mov	r5, r4
 800644e:	461c      	mov	r4, r3
 8006450:	68b8      	ldr	r0, [r7, #8]
 8006452:	f7fa f851 	bl	80004f8 <__aeabi_f2d>
 8006456:	4602      	mov	r2, r0
 8006458:	460b      	mov	r3, r1
 800645a:	ed9f 1b25 	vldr	d1, [pc, #148]	; 80064f0 <veml_Get_White_Lux+0x1b0>
 800645e:	ec43 2b10 	vmov	d0, r2, r3
 8006462:	f00f f801 	bl	8015468 <pow>
 8006466:	ec51 0b10 	vmov	r0, r1, d0
 800646a:	a323      	add	r3, pc, #140	; (adr r3, 80064f8 <veml_Get_White_Lux+0x1b8>)
 800646c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006470:	f7fa f89a 	bl	80005a8 <__aeabi_dmul>
 8006474:	4602      	mov	r2, r0
 8006476:	460b      	mov	r3, r1
 8006478:	4620      	mov	r0, r4
 800647a:	4629      	mov	r1, r5
 800647c:	f7f9 fede 	bl	800023c <__adddf3>
 8006480:	4603      	mov	r3, r0
 8006482:	460c      	mov	r4, r1
 8006484:	4625      	mov	r5, r4
 8006486:	461c      	mov	r4, r3
 8006488:	68b8      	ldr	r0, [r7, #8]
 800648a:	f7fa f835 	bl	80004f8 <__aeabi_f2d>
 800648e:	a31c      	add	r3, pc, #112	; (adr r3, 8006500 <veml_Get_White_Lux+0x1c0>)
 8006490:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006494:	f7fa f888 	bl	80005a8 <__aeabi_dmul>
 8006498:	4602      	mov	r2, r0
 800649a:	460b      	mov	r3, r1
 800649c:	4620      	mov	r0, r4
 800649e:	4629      	mov	r1, r5
 80064a0:	f7f9 fecc 	bl	800023c <__adddf3>
 80064a4:	4603      	mov	r3, r0
 80064a6:	460c      	mov	r4, r1
 80064a8:	4618      	mov	r0, r3
 80064aa:	4621      	mov	r1, r4
 80064ac:	f7fa fb54 	bl	8000b58 <__aeabi_d2f>
 80064b0:	4603      	mov	r3, r0
 80064b2:	60bb      	str	r3, [r7, #8]
	}

	return lux;
 80064b4:	68bb      	ldr	r3, [r7, #8]
 80064b6:	ee07 3a90 	vmov	s15, r3

}
 80064ba:	eeb0 0a67 	vmov.f32	s0, s15
 80064be:	3710      	adds	r7, #16
 80064c0:	46bd      	mov	sp, r7
 80064c2:	bdb0      	pop	{r4, r5, r7, pc}
 80064c4:	f3af 8000 	nop.w
 80064c8:	487fcb92 	.word	0x487fcb92
 80064cc:	3fad7dbf 	.word	0x3fad7dbf
 80064d0:	00000000 	.word	0x00000000
 80064d4:	40100000 	.word	0x40100000
 80064d8:	b18f283b 	.word	0xb18f283b
 80064dc:	3d65287a 	.word	0x3d65287a
 80064e0:	00000000 	.word	0x00000000
 80064e4:	40080000 	.word	0x40080000
 80064e8:	c91ef46e 	.word	0xc91ef46e
 80064ec:	3e442b86 	.word	0x3e442b86
 80064f0:	00000000 	.word	0x00000000
 80064f4:	40000000 	.word	0x40000000
 80064f8:	2e18cab0 	.word	0x2e18cab0
 80064fc:	3f155c91 	.word	0x3f155c91
 8006500:	b98c7e28 	.word	0xb98c7e28
 8006504:	3ff0096b 	.word	0x3ff0096b
 8006508:	20007a6c 	.word	0x20007a6c
 800650c:	bf800000 	.word	0xbf800000

08006510 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8006510:	b480      	push	{r7}
 8006512:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined(VECT_TAB_SRAM) && defined(VECT_TAB_BASE_ADDRESS)  
  /* program in SRAMx */
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;  /* Vector Table Relocation in Internal SRAMx for CPU1 */
#else    /* program in FLASH */
  SCB->VTOR = VECT_TAB_OFFSET;              /* Vector Table Relocation in Internal FLASH */
 8006514:	4b26      	ldr	r3, [pc, #152]	; (80065b0 <SystemInit+0xa0>)
 8006516:	2200      	movs	r2, #0
 8006518:	609a      	str	r2, [r3, #8]
#endif

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
 800651a:	4b25      	ldr	r3, [pc, #148]	; (80065b0 <SystemInit+0xa0>)
 800651c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006520:	4a23      	ldr	r2, [pc, #140]	; (80065b0 <SystemInit+0xa0>)
 8006522:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006526:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 800652a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006534:	f043 0301 	orr.w	r3, r3, #1
 8006538:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 800653a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800653e:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 8006542:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 8006544:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006548:	681a      	ldr	r2, [r3, #0]
 800654a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800654e:	4b19      	ldr	r3, [pc, #100]	; (80065b4 <SystemInit+0xa4>)
 8006550:	4013      	ands	r3, r2
 8006552:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 8006554:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006558:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800655c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006560:	f023 0305 	bic.w	r3, r3, #5
 8006564:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  
  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8006568:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800656c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006570:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006574:	f023 0301 	bic.w	r3, r3, #1
 8006578:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
    
  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 800657c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006580:	4a0d      	ldr	r2, [pc, #52]	; (80065b8 <SystemInit+0xa8>)
 8006582:	60da      	str	r2, [r3, #12]

  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 8006584:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006588:	4a0b      	ldr	r2, [pc, #44]	; (80065b8 <SystemInit+0xa8>)
 800658a:	611a      	str	r2, [r3, #16]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800658c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006596:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800659a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800659c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80065a0:	2200      	movs	r2, #0
 80065a2:	619a      	str	r2, [r3, #24]
}
 80065a4:	bf00      	nop
 80065a6:	46bd      	mov	sp, r7
 80065a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ac:	4770      	bx	lr
 80065ae:	bf00      	nop
 80065b0:	e000ed00 	.word	0xe000ed00
 80065b4:	faf6fefb 	.word	0xfaf6fefb
 80065b8:	22041000 	.word	0x22041000

080065bc <LL_DBGMCU_EnableDBGSleepMode>:
{
 80065bc:	b480      	push	{r7}
 80065be:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 80065c0:	4b05      	ldr	r3, [pc, #20]	; (80065d8 <LL_DBGMCU_EnableDBGSleepMode+0x1c>)
 80065c2:	685b      	ldr	r3, [r3, #4]
 80065c4:	4a04      	ldr	r2, [pc, #16]	; (80065d8 <LL_DBGMCU_EnableDBGSleepMode+0x1c>)
 80065c6:	f043 0301 	orr.w	r3, r3, #1
 80065ca:	6053      	str	r3, [r2, #4]
}
 80065cc:	bf00      	nop
 80065ce:	46bd      	mov	sp, r7
 80065d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065d4:	4770      	bx	lr
 80065d6:	bf00      	nop
 80065d8:	e0042000 	.word	0xe0042000

080065dc <LL_DBGMCU_EnableDBGStopMode>:
{
 80065dc:	b480      	push	{r7}
 80065de:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 80065e0:	4b05      	ldr	r3, [pc, #20]	; (80065f8 <LL_DBGMCU_EnableDBGStopMode+0x1c>)
 80065e2:	685b      	ldr	r3, [r3, #4]
 80065e4:	4a04      	ldr	r2, [pc, #16]	; (80065f8 <LL_DBGMCU_EnableDBGStopMode+0x1c>)
 80065e6:	f043 0302 	orr.w	r3, r3, #2
 80065ea:	6053      	str	r3, [r2, #4]
}
 80065ec:	bf00      	nop
 80065ee:	46bd      	mov	sp, r7
 80065f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065f4:	4770      	bx	lr
 80065f6:	bf00      	nop
 80065f8:	e0042000 	.word	0xe0042000

080065fc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80065fc:	b580      	push	{r7, lr}
 80065fe:	b082      	sub	sp, #8
 8006600:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8006602:	2300      	movs	r3, #0
 8006604:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8006606:	4b0c      	ldr	r3, [pc, #48]	; (8006638 <HAL_Init+0x3c>)
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	4a0b      	ldr	r2, [pc, #44]	; (8006638 <HAL_Init+0x3c>)
 800660c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006610:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006612:	2003      	movs	r0, #3
 8006614:	f000 f961 	bl	80068da <HAL_NVIC_SetPriorityGrouping>
  
  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8006618:	2000      	movs	r0, #0
 800661a:	f7ff fad1 	bl	8005bc0 <HAL_InitTick>
 800661e:	4603      	mov	r3, r0
 8006620:	2b00      	cmp	r3, #0
 8006622:	d002      	beq.n	800662a <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8006624:	2301      	movs	r3, #1
 8006626:	71fb      	strb	r3, [r7, #7]
 8006628:	e001      	b.n	800662e <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800662a:	f7ff f9c4 	bl	80059b6 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800662e:	79fb      	ldrb	r3, [r7, #7]
}
 8006630:	4618      	mov	r0, r3
 8006632:	3708      	adds	r7, #8
 8006634:	46bd      	mov	sp, r7
 8006636:	bd80      	pop	{r7, pc}
 8006638:	58004000 	.word	0x58004000

0800663c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800663c:	b480      	push	{r7}
 800663e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8006640:	4b06      	ldr	r3, [pc, #24]	; (800665c <HAL_IncTick+0x20>)
 8006642:	781b      	ldrb	r3, [r3, #0]
 8006644:	461a      	mov	r2, r3
 8006646:	4b06      	ldr	r3, [pc, #24]	; (8006660 <HAL_IncTick+0x24>)
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	4413      	add	r3, r2
 800664c:	4a04      	ldr	r2, [pc, #16]	; (8006660 <HAL_IncTick+0x24>)
 800664e:	6013      	str	r3, [r2, #0]
}
 8006650:	bf00      	nop
 8006652:	46bd      	mov	sp, r7
 8006654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006658:	4770      	bx	lr
 800665a:	bf00      	nop
 800665c:	2000001c 	.word	0x2000001c
 8006660:	20007ac0 	.word	0x20007ac0

08006664 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006664:	b480      	push	{r7}
 8006666:	af00      	add	r7, sp, #0
  return uwTick;
 8006668:	4b03      	ldr	r3, [pc, #12]	; (8006678 <HAL_GetTick+0x14>)
 800666a:	681b      	ldr	r3, [r3, #0]
}
 800666c:	4618      	mov	r0, r3
 800666e:	46bd      	mov	sp, r7
 8006670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006674:	4770      	bx	lr
 8006676:	bf00      	nop
 8006678:	20007ac0 	.word	0x20007ac0

0800667c <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 800667c:	b480      	push	{r7}
 800667e:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8006680:	4b03      	ldr	r3, [pc, #12]	; (8006690 <HAL_GetTickPrio+0x14>)
 8006682:	681b      	ldr	r3, [r3, #0]
}
 8006684:	4618      	mov	r0, r3
 8006686:	46bd      	mov	sp, r7
 8006688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800668c:	4770      	bx	lr
 800668e:	bf00      	nop
 8006690:	20000018 	.word	0x20000018

08006694 <HAL_GetTickFreq>:
/**
  * @brief Return tick frequency.
  * @retval tick period in Hz
  */
HAL_TickFreqTypeDef HAL_GetTickFreq(void)
{
 8006694:	b480      	push	{r7}
 8006696:	af00      	add	r7, sp, #0
  return uwTickFreq;
 8006698:	4b03      	ldr	r3, [pc, #12]	; (80066a8 <HAL_GetTickFreq+0x14>)
 800669a:	781b      	ldrb	r3, [r3, #0]
}
 800669c:	4618      	mov	r0, r3
 800669e:	46bd      	mov	sp, r7
 80066a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066a4:	4770      	bx	lr
 80066a6:	bf00      	nop
 80066a8:	2000001c 	.word	0x2000001c

080066ac <HAL_DBGMCU_EnableDBGSleepMode>:
/**
  * @brief  Enable the Debug Module during SLEEP mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGSleepMode(void)
{
 80066ac:	b580      	push	{r7, lr}
 80066ae:	af00      	add	r7, sp, #0
  LL_DBGMCU_EnableDBGSleepMode();
 80066b0:	f7ff ff84 	bl	80065bc <LL_DBGMCU_EnableDBGSleepMode>
}
 80066b4:	bf00      	nop
 80066b6:	bd80      	pop	{r7, pc}

080066b8 <HAL_DBGMCU_EnableDBGStopMode>:
/**
  * @brief  Enable the Debug Module during STOP mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStopMode(void)
{
 80066b8:	b580      	push	{r7, lr}
 80066ba:	af00      	add	r7, sp, #0
  LL_DBGMCU_EnableDBGStopMode();
 80066bc:	f7ff ff8e 	bl	80065dc <LL_DBGMCU_EnableDBGStopMode>
}
 80066c0:	bf00      	nop
 80066c2:	bd80      	pop	{r7, pc}

080066c4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80066c4:	b480      	push	{r7}
 80066c6:	b085      	sub	sp, #20
 80066c8:	af00      	add	r7, sp, #0
 80066ca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	f003 0307 	and.w	r3, r3, #7
 80066d2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80066d4:	4b0c      	ldr	r3, [pc, #48]	; (8006708 <__NVIC_SetPriorityGrouping+0x44>)
 80066d6:	68db      	ldr	r3, [r3, #12]
 80066d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80066da:	68ba      	ldr	r2, [r7, #8]
 80066dc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80066e0:	4013      	ands	r3, r2
 80066e2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80066e8:	68bb      	ldr	r3, [r7, #8]
 80066ea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80066ec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80066f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80066f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80066f6:	4a04      	ldr	r2, [pc, #16]	; (8006708 <__NVIC_SetPriorityGrouping+0x44>)
 80066f8:	68bb      	ldr	r3, [r7, #8]
 80066fa:	60d3      	str	r3, [r2, #12]
}
 80066fc:	bf00      	nop
 80066fe:	3714      	adds	r7, #20
 8006700:	46bd      	mov	sp, r7
 8006702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006706:	4770      	bx	lr
 8006708:	e000ed00 	.word	0xe000ed00

0800670c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800670c:	b480      	push	{r7}
 800670e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006710:	4b04      	ldr	r3, [pc, #16]	; (8006724 <__NVIC_GetPriorityGrouping+0x18>)
 8006712:	68db      	ldr	r3, [r3, #12]
 8006714:	0a1b      	lsrs	r3, r3, #8
 8006716:	f003 0307 	and.w	r3, r3, #7
}
 800671a:	4618      	mov	r0, r3
 800671c:	46bd      	mov	sp, r7
 800671e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006722:	4770      	bx	lr
 8006724:	e000ed00 	.word	0xe000ed00

08006728 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006728:	b480      	push	{r7}
 800672a:	b083      	sub	sp, #12
 800672c:	af00      	add	r7, sp, #0
 800672e:	4603      	mov	r3, r0
 8006730:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006732:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006736:	2b00      	cmp	r3, #0
 8006738:	db0b      	blt.n	8006752 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800673a:	79fb      	ldrb	r3, [r7, #7]
 800673c:	f003 021f 	and.w	r2, r3, #31
 8006740:	4907      	ldr	r1, [pc, #28]	; (8006760 <__NVIC_EnableIRQ+0x38>)
 8006742:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006746:	095b      	lsrs	r3, r3, #5
 8006748:	2001      	movs	r0, #1
 800674a:	fa00 f202 	lsl.w	r2, r0, r2
 800674e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8006752:	bf00      	nop
 8006754:	370c      	adds	r7, #12
 8006756:	46bd      	mov	sp, r7
 8006758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800675c:	4770      	bx	lr
 800675e:	bf00      	nop
 8006760:	e000e100 	.word	0xe000e100

08006764 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8006764:	b480      	push	{r7}
 8006766:	b083      	sub	sp, #12
 8006768:	af00      	add	r7, sp, #0
 800676a:	4603      	mov	r3, r0
 800676c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800676e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006772:	2b00      	cmp	r3, #0
 8006774:	db10      	blt.n	8006798 <__NVIC_DisableIRQ+0x34>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006776:	79fb      	ldrb	r3, [r7, #7]
 8006778:	f003 021f 	and.w	r2, r3, #31
 800677c:	4909      	ldr	r1, [pc, #36]	; (80067a4 <__NVIC_DisableIRQ+0x40>)
 800677e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006782:	095b      	lsrs	r3, r3, #5
 8006784:	2001      	movs	r0, #1
 8006786:	fa00 f202 	lsl.w	r2, r0, r2
 800678a:	3320      	adds	r3, #32
 800678c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8006790:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8006794:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  }
}
 8006798:	bf00      	nop
 800679a:	370c      	adds	r7, #12
 800679c:	46bd      	mov	sp, r7
 800679e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067a2:	4770      	bx	lr
 80067a4:	e000e100 	.word	0xe000e100

080067a8 <__NVIC_SetPendingIRQ>:
  \details Sets the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 80067a8:	b480      	push	{r7}
 80067aa:	b083      	sub	sp, #12
 80067ac:	af00      	add	r7, sp, #0
 80067ae:	4603      	mov	r3, r0
 80067b0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80067b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	db0c      	blt.n	80067d4 <__NVIC_SetPendingIRQ+0x2c>
  {
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80067ba:	79fb      	ldrb	r3, [r7, #7]
 80067bc:	f003 021f 	and.w	r2, r3, #31
 80067c0:	4907      	ldr	r1, [pc, #28]	; (80067e0 <__NVIC_SetPendingIRQ+0x38>)
 80067c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80067c6:	095b      	lsrs	r3, r3, #5
 80067c8:	2001      	movs	r0, #1
 80067ca:	fa00 f202 	lsl.w	r2, r0, r2
 80067ce:	3340      	adds	r3, #64	; 0x40
 80067d0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80067d4:	bf00      	nop
 80067d6:	370c      	adds	r7, #12
 80067d8:	46bd      	mov	sp, r7
 80067da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067de:	4770      	bx	lr
 80067e0:	e000e100 	.word	0xe000e100

080067e4 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 80067e4:	b480      	push	{r7}
 80067e6:	b083      	sub	sp, #12
 80067e8:	af00      	add	r7, sp, #0
 80067ea:	4603      	mov	r3, r0
 80067ec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80067ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	db0c      	blt.n	8006810 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80067f6:	79fb      	ldrb	r3, [r7, #7]
 80067f8:	f003 021f 	and.w	r2, r3, #31
 80067fc:	4907      	ldr	r1, [pc, #28]	; (800681c <__NVIC_ClearPendingIRQ+0x38>)
 80067fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006802:	095b      	lsrs	r3, r3, #5
 8006804:	2001      	movs	r0, #1
 8006806:	fa00 f202 	lsl.w	r2, r0, r2
 800680a:	3360      	adds	r3, #96	; 0x60
 800680c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8006810:	bf00      	nop
 8006812:	370c      	adds	r7, #12
 8006814:	46bd      	mov	sp, r7
 8006816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800681a:	4770      	bx	lr
 800681c:	e000e100 	.word	0xe000e100

08006820 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006820:	b480      	push	{r7}
 8006822:	b083      	sub	sp, #12
 8006824:	af00      	add	r7, sp, #0
 8006826:	4603      	mov	r3, r0
 8006828:	6039      	str	r1, [r7, #0]
 800682a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800682c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006830:	2b00      	cmp	r3, #0
 8006832:	db0a      	blt.n	800684a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006834:	683b      	ldr	r3, [r7, #0]
 8006836:	b2da      	uxtb	r2, r3
 8006838:	490c      	ldr	r1, [pc, #48]	; (800686c <__NVIC_SetPriority+0x4c>)
 800683a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800683e:	0112      	lsls	r2, r2, #4
 8006840:	b2d2      	uxtb	r2, r2
 8006842:	440b      	add	r3, r1
 8006844:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006848:	e00a      	b.n	8006860 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800684a:	683b      	ldr	r3, [r7, #0]
 800684c:	b2da      	uxtb	r2, r3
 800684e:	4908      	ldr	r1, [pc, #32]	; (8006870 <__NVIC_SetPriority+0x50>)
 8006850:	79fb      	ldrb	r3, [r7, #7]
 8006852:	f003 030f 	and.w	r3, r3, #15
 8006856:	3b04      	subs	r3, #4
 8006858:	0112      	lsls	r2, r2, #4
 800685a:	b2d2      	uxtb	r2, r2
 800685c:	440b      	add	r3, r1
 800685e:	761a      	strb	r2, [r3, #24]
}
 8006860:	bf00      	nop
 8006862:	370c      	adds	r7, #12
 8006864:	46bd      	mov	sp, r7
 8006866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800686a:	4770      	bx	lr
 800686c:	e000e100 	.word	0xe000e100
 8006870:	e000ed00 	.word	0xe000ed00

08006874 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006874:	b480      	push	{r7}
 8006876:	b089      	sub	sp, #36	; 0x24
 8006878:	af00      	add	r7, sp, #0
 800687a:	60f8      	str	r0, [r7, #12]
 800687c:	60b9      	str	r1, [r7, #8]
 800687e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	f003 0307 	and.w	r3, r3, #7
 8006886:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006888:	69fb      	ldr	r3, [r7, #28]
 800688a:	f1c3 0307 	rsb	r3, r3, #7
 800688e:	2b04      	cmp	r3, #4
 8006890:	bf28      	it	cs
 8006892:	2304      	movcs	r3, #4
 8006894:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006896:	69fb      	ldr	r3, [r7, #28]
 8006898:	3304      	adds	r3, #4
 800689a:	2b06      	cmp	r3, #6
 800689c:	d902      	bls.n	80068a4 <NVIC_EncodePriority+0x30>
 800689e:	69fb      	ldr	r3, [r7, #28]
 80068a0:	3b03      	subs	r3, #3
 80068a2:	e000      	b.n	80068a6 <NVIC_EncodePriority+0x32>
 80068a4:	2300      	movs	r3, #0
 80068a6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80068a8:	f04f 32ff 	mov.w	r2, #4294967295
 80068ac:	69bb      	ldr	r3, [r7, #24]
 80068ae:	fa02 f303 	lsl.w	r3, r2, r3
 80068b2:	43da      	mvns	r2, r3
 80068b4:	68bb      	ldr	r3, [r7, #8]
 80068b6:	401a      	ands	r2, r3
 80068b8:	697b      	ldr	r3, [r7, #20]
 80068ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80068bc:	f04f 31ff 	mov.w	r1, #4294967295
 80068c0:	697b      	ldr	r3, [r7, #20]
 80068c2:	fa01 f303 	lsl.w	r3, r1, r3
 80068c6:	43d9      	mvns	r1, r3
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80068cc:	4313      	orrs	r3, r2
         );
}
 80068ce:	4618      	mov	r0, r3
 80068d0:	3724      	adds	r7, #36	; 0x24
 80068d2:	46bd      	mov	sp, r7
 80068d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068d8:	4770      	bx	lr

080068da <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80068da:	b580      	push	{r7, lr}
 80068dc:	b082      	sub	sp, #8
 80068de:	af00      	add	r7, sp, #0
 80068e0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80068e2:	6878      	ldr	r0, [r7, #4]
 80068e4:	f7ff feee 	bl	80066c4 <__NVIC_SetPriorityGrouping>
}
 80068e8:	bf00      	nop
 80068ea:	3708      	adds	r7, #8
 80068ec:	46bd      	mov	sp, r7
 80068ee:	bd80      	pop	{r7, pc}

080068f0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80068f0:	b580      	push	{r7, lr}
 80068f2:	b086      	sub	sp, #24
 80068f4:	af00      	add	r7, sp, #0
 80068f6:	4603      	mov	r3, r0
 80068f8:	60b9      	str	r1, [r7, #8]
 80068fa:	607a      	str	r2, [r7, #4]
 80068fc:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80068fe:	f7ff ff05 	bl	800670c <__NVIC_GetPriorityGrouping>
 8006902:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006904:	687a      	ldr	r2, [r7, #4]
 8006906:	68b9      	ldr	r1, [r7, #8]
 8006908:	6978      	ldr	r0, [r7, #20]
 800690a:	f7ff ffb3 	bl	8006874 <NVIC_EncodePriority>
 800690e:	4602      	mov	r2, r0
 8006910:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006914:	4611      	mov	r1, r2
 8006916:	4618      	mov	r0, r3
 8006918:	f7ff ff82 	bl	8006820 <__NVIC_SetPriority>
}
 800691c:	bf00      	nop
 800691e:	3718      	adds	r7, #24
 8006920:	46bd      	mov	sp, r7
 8006922:	bd80      	pop	{r7, pc}

08006924 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006924:	b580      	push	{r7, lr}
 8006926:	b082      	sub	sp, #8
 8006928:	af00      	add	r7, sp, #0
 800692a:	4603      	mov	r3, r0
 800692c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800692e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006932:	4618      	mov	r0, r3
 8006934:	f7ff fef8 	bl	8006728 <__NVIC_EnableIRQ>
}
 8006938:	bf00      	nop
 800693a:	3708      	adds	r7, #8
 800693c:	46bd      	mov	sp, r7
 800693e:	bd80      	pop	{r7, pc}

08006940 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8006940:	b580      	push	{r7, lr}
 8006942:	b082      	sub	sp, #8
 8006944:	af00      	add	r7, sp, #0
 8006946:	4603      	mov	r3, r0
 8006948:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 800694a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800694e:	4618      	mov	r0, r3
 8006950:	f7ff ff08 	bl	8006764 <__NVIC_DisableIRQ>
}
 8006954:	bf00      	nop
 8006956:	3708      	adds	r7, #8
 8006958:	46bd      	mov	sp, r7
 800695a:	bd80      	pop	{r7, pc}

0800695c <HAL_NVIC_SetPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 800695c:	b580      	push	{r7, lr}
 800695e:	b082      	sub	sp, #8
 8006960:	af00      	add	r7, sp, #0
 8006962:	4603      	mov	r3, r0
 8006964:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Set interrupt pending */
  NVIC_SetPendingIRQ(IRQn);
 8006966:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800696a:	4618      	mov	r0, r3
 800696c:	f7ff ff1c 	bl	80067a8 <__NVIC_SetPendingIRQ>
}
 8006970:	bf00      	nop
 8006972:	3708      	adds	r7, #8
 8006974:	46bd      	mov	sp, r7
 8006976:	bd80      	pop	{r7, pc}

08006978 <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8006978:	b580      	push	{r7, lr}
 800697a:	b082      	sub	sp, #8
 800697c:	af00      	add	r7, sp, #0
 800697e:	4603      	mov	r3, r0
 8006980:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 8006982:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006986:	4618      	mov	r0, r3
 8006988:	f7ff ff2c 	bl	80067e4 <__NVIC_ClearPendingIRQ>
}
 800698c:	bf00      	nop
 800698e:	3708      	adds	r7, #8
 8006990:	46bd      	mov	sp, r7
 8006992:	bd80      	pop	{r7, pc}

08006994 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006994:	b480      	push	{r7}
 8006996:	b087      	sub	sp, #28
 8006998:	af00      	add	r7, sp, #0
 800699a:	6078      	str	r0, [r7, #4]
 800699c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800699e:	2300      	movs	r3, #0
 80069a0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80069a2:	e14c      	b.n	8006c3e <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80069a4:	683b      	ldr	r3, [r7, #0]
 80069a6:	681a      	ldr	r2, [r3, #0]
 80069a8:	2101      	movs	r1, #1
 80069aa:	697b      	ldr	r3, [r7, #20]
 80069ac:	fa01 f303 	lsl.w	r3, r1, r3
 80069b0:	4013      	ands	r3, r2
 80069b2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	f000 813e 	beq.w	8006c38 <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80069bc:	683b      	ldr	r3, [r7, #0]
 80069be:	685b      	ldr	r3, [r3, #4]
 80069c0:	2b01      	cmp	r3, #1
 80069c2:	d00b      	beq.n	80069dc <HAL_GPIO_Init+0x48>
 80069c4:	683b      	ldr	r3, [r7, #0]
 80069c6:	685b      	ldr	r3, [r3, #4]
 80069c8:	2b02      	cmp	r3, #2
 80069ca:	d007      	beq.n	80069dc <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80069cc:	683b      	ldr	r3, [r7, #0]
 80069ce:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80069d0:	2b11      	cmp	r3, #17
 80069d2:	d003      	beq.n	80069dc <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80069d4:	683b      	ldr	r3, [r7, #0]
 80069d6:	685b      	ldr	r3, [r3, #4]
 80069d8:	2b12      	cmp	r3, #18
 80069da:	d130      	bne.n	8006a3e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	689b      	ldr	r3, [r3, #8]
 80069e0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80069e2:	697b      	ldr	r3, [r7, #20]
 80069e4:	005b      	lsls	r3, r3, #1
 80069e6:	2203      	movs	r2, #3
 80069e8:	fa02 f303 	lsl.w	r3, r2, r3
 80069ec:	43db      	mvns	r3, r3
 80069ee:	693a      	ldr	r2, [r7, #16]
 80069f0:	4013      	ands	r3, r2
 80069f2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80069f4:	683b      	ldr	r3, [r7, #0]
 80069f6:	68da      	ldr	r2, [r3, #12]
 80069f8:	697b      	ldr	r3, [r7, #20]
 80069fa:	005b      	lsls	r3, r3, #1
 80069fc:	fa02 f303 	lsl.w	r3, r2, r3
 8006a00:	693a      	ldr	r2, [r7, #16]
 8006a02:	4313      	orrs	r3, r2
 8006a04:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	693a      	ldr	r2, [r7, #16]
 8006a0a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	685b      	ldr	r3, [r3, #4]
 8006a10:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8006a12:	2201      	movs	r2, #1
 8006a14:	697b      	ldr	r3, [r7, #20]
 8006a16:	fa02 f303 	lsl.w	r3, r2, r3
 8006a1a:	43db      	mvns	r3, r3
 8006a1c:	693a      	ldr	r2, [r7, #16]
 8006a1e:	4013      	ands	r3, r2
 8006a20:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8006a22:	683b      	ldr	r3, [r7, #0]
 8006a24:	685b      	ldr	r3, [r3, #4]
 8006a26:	091b      	lsrs	r3, r3, #4
 8006a28:	f003 0201 	and.w	r2, r3, #1
 8006a2c:	697b      	ldr	r3, [r7, #20]
 8006a2e:	fa02 f303 	lsl.w	r3, r2, r3
 8006a32:	693a      	ldr	r2, [r7, #16]
 8006a34:	4313      	orrs	r3, r2
 8006a36:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	693a      	ldr	r2, [r7, #16]
 8006a3c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	68db      	ldr	r3, [r3, #12]
 8006a42:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8006a44:	697b      	ldr	r3, [r7, #20]
 8006a46:	005b      	lsls	r3, r3, #1
 8006a48:	2203      	movs	r2, #3
 8006a4a:	fa02 f303 	lsl.w	r3, r2, r3
 8006a4e:	43db      	mvns	r3, r3
 8006a50:	693a      	ldr	r2, [r7, #16]
 8006a52:	4013      	ands	r3, r2
 8006a54:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8006a56:	683b      	ldr	r3, [r7, #0]
 8006a58:	689a      	ldr	r2, [r3, #8]
 8006a5a:	697b      	ldr	r3, [r7, #20]
 8006a5c:	005b      	lsls	r3, r3, #1
 8006a5e:	fa02 f303 	lsl.w	r3, r2, r3
 8006a62:	693a      	ldr	r2, [r7, #16]
 8006a64:	4313      	orrs	r3, r2
 8006a66:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	693a      	ldr	r2, [r7, #16]
 8006a6c:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006a6e:	683b      	ldr	r3, [r7, #0]
 8006a70:	685b      	ldr	r3, [r3, #4]
 8006a72:	2b02      	cmp	r3, #2
 8006a74:	d003      	beq.n	8006a7e <HAL_GPIO_Init+0xea>
 8006a76:	683b      	ldr	r3, [r7, #0]
 8006a78:	685b      	ldr	r3, [r3, #4]
 8006a7a:	2b12      	cmp	r3, #18
 8006a7c:	d123      	bne.n	8006ac6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8006a7e:	697b      	ldr	r3, [r7, #20]
 8006a80:	08da      	lsrs	r2, r3, #3
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	3208      	adds	r2, #8
 8006a86:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a8a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8006a8c:	697b      	ldr	r3, [r7, #20]
 8006a8e:	f003 0307 	and.w	r3, r3, #7
 8006a92:	009b      	lsls	r3, r3, #2
 8006a94:	220f      	movs	r2, #15
 8006a96:	fa02 f303 	lsl.w	r3, r2, r3
 8006a9a:	43db      	mvns	r3, r3
 8006a9c:	693a      	ldr	r2, [r7, #16]
 8006a9e:	4013      	ands	r3, r2
 8006aa0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8006aa2:	683b      	ldr	r3, [r7, #0]
 8006aa4:	691a      	ldr	r2, [r3, #16]
 8006aa6:	697b      	ldr	r3, [r7, #20]
 8006aa8:	f003 0307 	and.w	r3, r3, #7
 8006aac:	009b      	lsls	r3, r3, #2
 8006aae:	fa02 f303 	lsl.w	r3, r2, r3
 8006ab2:	693a      	ldr	r2, [r7, #16]
 8006ab4:	4313      	orrs	r3, r2
 8006ab6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8006ab8:	697b      	ldr	r3, [r7, #20]
 8006aba:	08da      	lsrs	r2, r3, #3
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	3208      	adds	r2, #8
 8006ac0:	6939      	ldr	r1, [r7, #16]
 8006ac2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8006acc:	697b      	ldr	r3, [r7, #20]
 8006ace:	005b      	lsls	r3, r3, #1
 8006ad0:	2203      	movs	r2, #3
 8006ad2:	fa02 f303 	lsl.w	r3, r2, r3
 8006ad6:	43db      	mvns	r3, r3
 8006ad8:	693a      	ldr	r2, [r7, #16]
 8006ada:	4013      	ands	r3, r2
 8006adc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8006ade:	683b      	ldr	r3, [r7, #0]
 8006ae0:	685b      	ldr	r3, [r3, #4]
 8006ae2:	f003 0203 	and.w	r2, r3, #3
 8006ae6:	697b      	ldr	r3, [r7, #20]
 8006ae8:	005b      	lsls	r3, r3, #1
 8006aea:	fa02 f303 	lsl.w	r3, r2, r3
 8006aee:	693a      	ldr	r2, [r7, #16]
 8006af0:	4313      	orrs	r3, r2
 8006af2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	693a      	ldr	r2, [r7, #16]
 8006af8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8006afa:	683b      	ldr	r3, [r7, #0]
 8006afc:	685b      	ldr	r3, [r3, #4]
 8006afe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	f000 8098 	beq.w	8006c38 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8006b08:	4a54      	ldr	r2, [pc, #336]	; (8006c5c <HAL_GPIO_Init+0x2c8>)
 8006b0a:	697b      	ldr	r3, [r7, #20]
 8006b0c:	089b      	lsrs	r3, r3, #2
 8006b0e:	3302      	adds	r3, #2
 8006b10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006b14:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8006b16:	697b      	ldr	r3, [r7, #20]
 8006b18:	f003 0303 	and.w	r3, r3, #3
 8006b1c:	009b      	lsls	r3, r3, #2
 8006b1e:	220f      	movs	r2, #15
 8006b20:	fa02 f303 	lsl.w	r3, r2, r3
 8006b24:	43db      	mvns	r3, r3
 8006b26:	693a      	ldr	r2, [r7, #16]
 8006b28:	4013      	ands	r3, r2
 8006b2a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8006b32:	d019      	beq.n	8006b68 <HAL_GPIO_Init+0x1d4>
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	4a4a      	ldr	r2, [pc, #296]	; (8006c60 <HAL_GPIO_Init+0x2cc>)
 8006b38:	4293      	cmp	r3, r2
 8006b3a:	d013      	beq.n	8006b64 <HAL_GPIO_Init+0x1d0>
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	4a49      	ldr	r2, [pc, #292]	; (8006c64 <HAL_GPIO_Init+0x2d0>)
 8006b40:	4293      	cmp	r3, r2
 8006b42:	d00d      	beq.n	8006b60 <HAL_GPIO_Init+0x1cc>
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	4a48      	ldr	r2, [pc, #288]	; (8006c68 <HAL_GPIO_Init+0x2d4>)
 8006b48:	4293      	cmp	r3, r2
 8006b4a:	d007      	beq.n	8006b5c <HAL_GPIO_Init+0x1c8>
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	4a47      	ldr	r2, [pc, #284]	; (8006c6c <HAL_GPIO_Init+0x2d8>)
 8006b50:	4293      	cmp	r3, r2
 8006b52:	d101      	bne.n	8006b58 <HAL_GPIO_Init+0x1c4>
 8006b54:	2304      	movs	r3, #4
 8006b56:	e008      	b.n	8006b6a <HAL_GPIO_Init+0x1d6>
 8006b58:	2307      	movs	r3, #7
 8006b5a:	e006      	b.n	8006b6a <HAL_GPIO_Init+0x1d6>
 8006b5c:	2303      	movs	r3, #3
 8006b5e:	e004      	b.n	8006b6a <HAL_GPIO_Init+0x1d6>
 8006b60:	2302      	movs	r3, #2
 8006b62:	e002      	b.n	8006b6a <HAL_GPIO_Init+0x1d6>
 8006b64:	2301      	movs	r3, #1
 8006b66:	e000      	b.n	8006b6a <HAL_GPIO_Init+0x1d6>
 8006b68:	2300      	movs	r3, #0
 8006b6a:	697a      	ldr	r2, [r7, #20]
 8006b6c:	f002 0203 	and.w	r2, r2, #3
 8006b70:	0092      	lsls	r2, r2, #2
 8006b72:	4093      	lsls	r3, r2
 8006b74:	693a      	ldr	r2, [r7, #16]
 8006b76:	4313      	orrs	r3, r2
 8006b78:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8006b7a:	4938      	ldr	r1, [pc, #224]	; (8006c5c <HAL_GPIO_Init+0x2c8>)
 8006b7c:	697b      	ldr	r3, [r7, #20]
 8006b7e:	089b      	lsrs	r3, r3, #2
 8006b80:	3302      	adds	r3, #2
 8006b82:	693a      	ldr	r2, [r7, #16]
 8006b84:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8006b88:	4b39      	ldr	r3, [pc, #228]	; (8006c70 <HAL_GPIO_Init+0x2dc>)
 8006b8a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006b8e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	43db      	mvns	r3, r3
 8006b94:	693a      	ldr	r2, [r7, #16]
 8006b96:	4013      	ands	r3, r2
 8006b98:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8006b9a:	683b      	ldr	r3, [r7, #0]
 8006b9c:	685b      	ldr	r3, [r3, #4]
 8006b9e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d003      	beq.n	8006bae <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 8006ba6:	693a      	ldr	r2, [r7, #16]
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	4313      	orrs	r3, r2
 8006bac:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8006bae:	4a30      	ldr	r2, [pc, #192]	; (8006c70 <HAL_GPIO_Init+0x2dc>)
 8006bb0:	693b      	ldr	r3, [r7, #16]
 8006bb2:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 8006bb6:	4b2e      	ldr	r3, [pc, #184]	; (8006c70 <HAL_GPIO_Init+0x2dc>)
 8006bb8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006bbc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	43db      	mvns	r3, r3
 8006bc2:	693a      	ldr	r2, [r7, #16]
 8006bc4:	4013      	ands	r3, r2
 8006bc6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8006bc8:	683b      	ldr	r3, [r7, #0]
 8006bca:	685b      	ldr	r3, [r3, #4]
 8006bcc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d003      	beq.n	8006bdc <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8006bd4:	693a      	ldr	r2, [r7, #16]
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	4313      	orrs	r3, r2
 8006bda:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8006bdc:	4a24      	ldr	r2, [pc, #144]	; (8006c70 <HAL_GPIO_Init+0x2dc>)
 8006bde:	693b      	ldr	r3, [r7, #16]
 8006be0:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8006be4:	4b22      	ldr	r3, [pc, #136]	; (8006c70 <HAL_GPIO_Init+0x2dc>)
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	43db      	mvns	r3, r3
 8006bee:	693a      	ldr	r2, [r7, #16]
 8006bf0:	4013      	ands	r3, r2
 8006bf2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8006bf4:	683b      	ldr	r3, [r7, #0]
 8006bf6:	685b      	ldr	r3, [r3, #4]
 8006bf8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d003      	beq.n	8006c08 <HAL_GPIO_Init+0x274>
        {
          temp |= iocurrent;
 8006c00:	693a      	ldr	r2, [r7, #16]
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	4313      	orrs	r3, r2
 8006c06:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8006c08:	4a19      	ldr	r2, [pc, #100]	; (8006c70 <HAL_GPIO_Init+0x2dc>)
 8006c0a:	693b      	ldr	r3, [r7, #16]
 8006c0c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8006c0e:	4b18      	ldr	r3, [pc, #96]	; (8006c70 <HAL_GPIO_Init+0x2dc>)
 8006c10:	685b      	ldr	r3, [r3, #4]
 8006c12:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	43db      	mvns	r3, r3
 8006c18:	693a      	ldr	r2, [r7, #16]
 8006c1a:	4013      	ands	r3, r2
 8006c1c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8006c1e:	683b      	ldr	r3, [r7, #0]
 8006c20:	685b      	ldr	r3, [r3, #4]
 8006c22:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d003      	beq.n	8006c32 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8006c2a:	693a      	ldr	r2, [r7, #16]
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	4313      	orrs	r3, r2
 8006c30:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8006c32:	4a0f      	ldr	r2, [pc, #60]	; (8006c70 <HAL_GPIO_Init+0x2dc>)
 8006c34:	693b      	ldr	r3, [r7, #16]
 8006c36:	6053      	str	r3, [r2, #4]
      }
    }
    
    position++;
 8006c38:	697b      	ldr	r3, [r7, #20]
 8006c3a:	3301      	adds	r3, #1
 8006c3c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8006c3e:	683b      	ldr	r3, [r7, #0]
 8006c40:	681a      	ldr	r2, [r3, #0]
 8006c42:	697b      	ldr	r3, [r7, #20]
 8006c44:	fa22 f303 	lsr.w	r3, r2, r3
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	f47f aeab 	bne.w	80069a4 <HAL_GPIO_Init+0x10>
  }
}
 8006c4e:	bf00      	nop
 8006c50:	371c      	adds	r7, #28
 8006c52:	46bd      	mov	sp, r7
 8006c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c58:	4770      	bx	lr
 8006c5a:	bf00      	nop
 8006c5c:	40010000 	.word	0x40010000
 8006c60:	48000400 	.word	0x48000400
 8006c64:	48000800 	.word	0x48000800
 8006c68:	48000c00 	.word	0x48000c00
 8006c6c:	48001000 	.word	0x48001000
 8006c70:	58000800 	.word	0x58000800

08006c74 <HAL_GPIO_ReadPin>:
  * @param GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8006c74:	b480      	push	{r7}
 8006c76:	b085      	sub	sp, #20
 8006c78:	af00      	add	r7, sp, #0
 8006c7a:	6078      	str	r0, [r7, #4]
 8006c7c:	460b      	mov	r3, r1
 8006c7e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	691a      	ldr	r2, [r3, #16]
 8006c84:	887b      	ldrh	r3, [r7, #2]
 8006c86:	4013      	ands	r3, r2
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d002      	beq.n	8006c92 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8006c8c:	2301      	movs	r3, #1
 8006c8e:	73fb      	strb	r3, [r7, #15]
 8006c90:	e001      	b.n	8006c96 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8006c92:	2300      	movs	r3, #0
 8006c94:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8006c96:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c98:	4618      	mov	r0, r3
 8006c9a:	3714      	adds	r7, #20
 8006c9c:	46bd      	mov	sp, r7
 8006c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ca2:	4770      	bx	lr

08006ca4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006ca4:	b480      	push	{r7}
 8006ca6:	b083      	sub	sp, #12
 8006ca8:	af00      	add	r7, sp, #0
 8006caa:	6078      	str	r0, [r7, #4]
 8006cac:	460b      	mov	r3, r1
 8006cae:	807b      	strh	r3, [r7, #2]
 8006cb0:	4613      	mov	r3, r2
 8006cb2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006cb4:	787b      	ldrb	r3, [r7, #1]
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d003      	beq.n	8006cc2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8006cba:	887a      	ldrh	r2, [r7, #2]
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8006cc0:	e002      	b.n	8006cc8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8006cc2:	887a      	ldrh	r2, [r7, #2]
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	629a      	str	r2, [r3, #40]	; 0x28
}
 8006cc8:	bf00      	nop
 8006cca:	370c      	adds	r7, #12
 8006ccc:	46bd      	mov	sp, r7
 8006cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cd2:	4770      	bx	lr

08006cd4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8006cd4:	b580      	push	{r7, lr}
 8006cd6:	b082      	sub	sp, #8
 8006cd8:	af00      	add	r7, sp, #0
 8006cda:	4603      	mov	r3, r0
 8006cdc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8006cde:	4b08      	ldr	r3, [pc, #32]	; (8006d00 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006ce0:	68da      	ldr	r2, [r3, #12]
 8006ce2:	88fb      	ldrh	r3, [r7, #6]
 8006ce4:	4013      	ands	r3, r2
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d006      	beq.n	8006cf8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8006cea:	4a05      	ldr	r2, [pc, #20]	; (8006d00 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006cec:	88fb      	ldrh	r3, [r7, #6]
 8006cee:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8006cf0:	88fb      	ldrh	r3, [r7, #6]
 8006cf2:	4618      	mov	r0, r3
 8006cf4:	f7fd fcce 	bl	8004694 <HAL_GPIO_EXTI_Callback>
  }
}
 8006cf8:	bf00      	nop
 8006cfa:	3708      	adds	r7, #8
 8006cfc:	46bd      	mov	sp, r7
 8006cfe:	bd80      	pop	{r7, pc}
 8006d00:	58000800 	.word	0x58000800

08006d04 <HAL_HSEM_IRQHandler>:
/**
  * @brief  This function handles HSEM interrupt request
  * @retval None
  */
void HAL_HSEM_IRQHandler(void)
{
 8006d04:	b580      	push	{r7, lr}
 8006d06:	b082      	sub	sp, #8
 8006d08:	af00      	add	r7, sp, #0
  uint32_t statusreg;
  /* Get the list of masked freed semaphores*/
  statusreg = HSEM_COMMON->MISR;
 8006d0a:	4b0a      	ldr	r3, [pc, #40]	; (8006d34 <HAL_HSEM_IRQHandler+0x30>)
 8006d0c:	68db      	ldr	r3, [r3, #12]
 8006d0e:	607b      	str	r3, [r7, #4]

  /*Disable Interrupts*/
  HSEM_COMMON->IER &= ~((uint32_t)statusreg);
 8006d10:	4b08      	ldr	r3, [pc, #32]	; (8006d34 <HAL_HSEM_IRQHandler+0x30>)
 8006d12:	681a      	ldr	r2, [r3, #0]
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	43db      	mvns	r3, r3
 8006d18:	4906      	ldr	r1, [pc, #24]	; (8006d34 <HAL_HSEM_IRQHandler+0x30>)
 8006d1a:	4013      	ands	r3, r2
 8006d1c:	600b      	str	r3, [r1, #0]

  /*Clear Flags*/
  HSEM_COMMON->ICR = ((uint32_t)statusreg);
 8006d1e:	4a05      	ldr	r2, [pc, #20]	; (8006d34 <HAL_HSEM_IRQHandler+0x30>)
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	6053      	str	r3, [r2, #4]

  /* Call FreeCallback */
  HAL_HSEM_FreeCallback(statusreg);
 8006d24:	6878      	ldr	r0, [r7, #4]
 8006d26:	f000 f807 	bl	8006d38 <HAL_HSEM_FreeCallback>
}
 8006d2a:	bf00      	nop
 8006d2c:	3708      	adds	r7, #8
 8006d2e:	46bd      	mov	sp, r7
 8006d30:	bd80      	pop	{r7, pc}
 8006d32:	bf00      	nop
 8006d34:	58001500 	.word	0x58001500

08006d38 <HAL_HSEM_FreeCallback>:
  * @brief Semaphore Released Callback.
  * @param SemMask: Mask of Released semaphores
  * @retval None
  */
__weak void HAL_HSEM_FreeCallback(uint32_t SemMask)
{
 8006d38:	b480      	push	{r7}
 8006d3a:	b083      	sub	sp, #12
 8006d3c:	af00      	add	r7, sp, #0
 8006d3e:	6078      	str	r0, [r7, #4]
  UNUSED(SemMask);

  /* NOTE : This function should not be modified, when the callback is needed,
  the HAL_HSEM_FreeCallback can be implemented in the user file
    */
}
 8006d40:	bf00      	nop
 8006d42:	370c      	adds	r7, #12
 8006d44:	46bd      	mov	sp, r7
 8006d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d4a:	4770      	bx	lr

08006d4c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006d4c:	b580      	push	{r7, lr}
 8006d4e:	b082      	sub	sp, #8
 8006d50:	af00      	add	r7, sp, #0
 8006d52:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d101      	bne.n	8006d5e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006d5a:	2301      	movs	r3, #1
 8006d5c:	e081      	b.n	8006e62 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006d64:	b2db      	uxtb	r3, r3
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d106      	bne.n	8006d78 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	2200      	movs	r2, #0
 8006d6e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8006d72:	6878      	ldr	r0, [r7, #4]
 8006d74:	f7fe fe60 	bl	8005a38 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	2224      	movs	r2, #36	; 0x24
 8006d7c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	681a      	ldr	r2, [r3, #0]
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	f022 0201 	bic.w	r2, r2, #1
 8006d8e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	685a      	ldr	r2, [r3, #4]
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8006d9c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	689a      	ldr	r2, [r3, #8]
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006dac:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	68db      	ldr	r3, [r3, #12]
 8006db2:	2b01      	cmp	r3, #1
 8006db4:	d107      	bne.n	8006dc6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	689a      	ldr	r2, [r3, #8]
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006dc2:	609a      	str	r2, [r3, #8]
 8006dc4:	e006      	b.n	8006dd4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	689a      	ldr	r2, [r3, #8]
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8006dd2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	68db      	ldr	r3, [r3, #12]
 8006dd8:	2b02      	cmp	r3, #2
 8006dda:	d104      	bne.n	8006de6 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006de4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	685b      	ldr	r3, [r3, #4]
 8006dec:	687a      	ldr	r2, [r7, #4]
 8006dee:	6812      	ldr	r2, [r2, #0]
 8006df0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8006df4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006df8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	68da      	ldr	r2, [r3, #12]
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006e08:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	691a      	ldr	r2, [r3, #16]
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	695b      	ldr	r3, [r3, #20]
 8006e12:	ea42 0103 	orr.w	r1, r2, r3
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	699b      	ldr	r3, [r3, #24]
 8006e1a:	021a      	lsls	r2, r3, #8
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	430a      	orrs	r2, r1
 8006e22:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	69d9      	ldr	r1, [r3, #28]
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	6a1a      	ldr	r2, [r3, #32]
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	430a      	orrs	r2, r1
 8006e32:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	681a      	ldr	r2, [r3, #0]
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	f042 0201 	orr.w	r2, r2, #1
 8006e42:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	2200      	movs	r2, #0
 8006e48:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	2220      	movs	r2, #32
 8006e4e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	2200      	movs	r2, #0
 8006e56:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	2200      	movs	r2, #0
 8006e5c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8006e60:	2300      	movs	r3, #0
}
 8006e62:	4618      	mov	r0, r3
 8006e64:	3708      	adds	r7, #8
 8006e66:	46bd      	mov	sp, r7
 8006e68:	bd80      	pop	{r7, pc}
	...

08006e6c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006e6c:	b580      	push	{r7, lr}
 8006e6e:	b088      	sub	sp, #32
 8006e70:	af02      	add	r7, sp, #8
 8006e72:	60f8      	str	r0, [r7, #12]
 8006e74:	607a      	str	r2, [r7, #4]
 8006e76:	461a      	mov	r2, r3
 8006e78:	460b      	mov	r3, r1
 8006e7a:	817b      	strh	r3, [r7, #10]
 8006e7c:	4613      	mov	r3, r2
 8006e7e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006e86:	b2db      	uxtb	r3, r3
 8006e88:	2b20      	cmp	r3, #32
 8006e8a:	f040 80da 	bne.w	8007042 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006e94:	2b01      	cmp	r3, #1
 8006e96:	d101      	bne.n	8006e9c <HAL_I2C_Master_Transmit+0x30>
 8006e98:	2302      	movs	r3, #2
 8006e9a:	e0d3      	b.n	8007044 <HAL_I2C_Master_Transmit+0x1d8>
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	2201      	movs	r2, #1
 8006ea0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8006ea4:	f7ff fbde 	bl	8006664 <HAL_GetTick>
 8006ea8:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8006eaa:	697b      	ldr	r3, [r7, #20]
 8006eac:	9300      	str	r3, [sp, #0]
 8006eae:	2319      	movs	r3, #25
 8006eb0:	2201      	movs	r2, #1
 8006eb2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006eb6:	68f8      	ldr	r0, [r7, #12]
 8006eb8:	f000 fcbc 	bl	8007834 <I2C_WaitOnFlagUntilTimeout>
 8006ebc:	4603      	mov	r3, r0
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d001      	beq.n	8006ec6 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8006ec2:	2301      	movs	r3, #1
 8006ec4:	e0be      	b.n	8007044 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	2221      	movs	r2, #33	; 0x21
 8006eca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	2210      	movs	r2, #16
 8006ed2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	2200      	movs	r2, #0
 8006eda:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	687a      	ldr	r2, [r7, #4]
 8006ee0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	893a      	ldrh	r2, [r7, #8]
 8006ee6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	2200      	movs	r2, #0
 8006eec:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006ef2:	b29b      	uxth	r3, r3
 8006ef4:	2bff      	cmp	r3, #255	; 0xff
 8006ef6:	d90e      	bls.n	8006f16 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	22ff      	movs	r2, #255	; 0xff
 8006efc:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006f02:	b2da      	uxtb	r2, r3
 8006f04:	8979      	ldrh	r1, [r7, #10]
 8006f06:	4b51      	ldr	r3, [pc, #324]	; (800704c <HAL_I2C_Master_Transmit+0x1e0>)
 8006f08:	9300      	str	r3, [sp, #0]
 8006f0a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006f0e:	68f8      	ldr	r0, [r7, #12]
 8006f10:	f000 fe1e 	bl	8007b50 <I2C_TransferConfig>
 8006f14:	e06c      	b.n	8006ff0 <HAL_I2C_Master_Transmit+0x184>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006f1a:	b29a      	uxth	r2, r3
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006f24:	b2da      	uxtb	r2, r3
 8006f26:	8979      	ldrh	r1, [r7, #10]
 8006f28:	4b48      	ldr	r3, [pc, #288]	; (800704c <HAL_I2C_Master_Transmit+0x1e0>)
 8006f2a:	9300      	str	r3, [sp, #0]
 8006f2c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006f30:	68f8      	ldr	r0, [r7, #12]
 8006f32:	f000 fe0d 	bl	8007b50 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 8006f36:	e05b      	b.n	8006ff0 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006f38:	697a      	ldr	r2, [r7, #20]
 8006f3a:	6a39      	ldr	r1, [r7, #32]
 8006f3c:	68f8      	ldr	r0, [r7, #12]
 8006f3e:	f000 fcb9 	bl	80078b4 <I2C_WaitOnTXISFlagUntilTimeout>
 8006f42:	4603      	mov	r3, r0
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d001      	beq.n	8006f4c <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8006f48:	2301      	movs	r3, #1
 8006f4a:	e07b      	b.n	8007044 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f50:	781a      	ldrb	r2, [r3, #0]
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f5c:	1c5a      	adds	r2, r3, #1
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006f66:	b29b      	uxth	r3, r3
 8006f68:	3b01      	subs	r3, #1
 8006f6a:	b29a      	uxth	r2, r3
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006f74:	3b01      	subs	r3, #1
 8006f76:	b29a      	uxth	r2, r3
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006f80:	b29b      	uxth	r3, r3
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d034      	beq.n	8006ff0 <HAL_I2C_Master_Transmit+0x184>
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d130      	bne.n	8006ff0 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8006f8e:	697b      	ldr	r3, [r7, #20]
 8006f90:	9300      	str	r3, [sp, #0]
 8006f92:	6a3b      	ldr	r3, [r7, #32]
 8006f94:	2200      	movs	r2, #0
 8006f96:	2180      	movs	r1, #128	; 0x80
 8006f98:	68f8      	ldr	r0, [r7, #12]
 8006f9a:	f000 fc4b 	bl	8007834 <I2C_WaitOnFlagUntilTimeout>
 8006f9e:	4603      	mov	r3, r0
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d001      	beq.n	8006fa8 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8006fa4:	2301      	movs	r3, #1
 8006fa6:	e04d      	b.n	8007044 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006fac:	b29b      	uxth	r3, r3
 8006fae:	2bff      	cmp	r3, #255	; 0xff
 8006fb0:	d90e      	bls.n	8006fd0 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	22ff      	movs	r2, #255	; 0xff
 8006fb6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006fbc:	b2da      	uxtb	r2, r3
 8006fbe:	8979      	ldrh	r1, [r7, #10]
 8006fc0:	2300      	movs	r3, #0
 8006fc2:	9300      	str	r3, [sp, #0]
 8006fc4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006fc8:	68f8      	ldr	r0, [r7, #12]
 8006fca:	f000 fdc1 	bl	8007b50 <I2C_TransferConfig>
 8006fce:	e00f      	b.n	8006ff0 <HAL_I2C_Master_Transmit+0x184>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006fd4:	b29a      	uxth	r2, r3
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006fde:	b2da      	uxtb	r2, r3
 8006fe0:	8979      	ldrh	r1, [r7, #10]
 8006fe2:	2300      	movs	r3, #0
 8006fe4:	9300      	str	r3, [sp, #0]
 8006fe6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006fea:	68f8      	ldr	r0, [r7, #12]
 8006fec:	f000 fdb0 	bl	8007b50 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006ff4:	b29b      	uxth	r3, r3
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d19e      	bne.n	8006f38 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006ffa:	697a      	ldr	r2, [r7, #20]
 8006ffc:	6a39      	ldr	r1, [r7, #32]
 8006ffe:	68f8      	ldr	r0, [r7, #12]
 8007000:	f000 fc98 	bl	8007934 <I2C_WaitOnSTOPFlagUntilTimeout>
 8007004:	4603      	mov	r3, r0
 8007006:	2b00      	cmp	r3, #0
 8007008:	d001      	beq.n	800700e <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 800700a:	2301      	movs	r3, #1
 800700c:	e01a      	b.n	8007044 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	2220      	movs	r2, #32
 8007014:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	6859      	ldr	r1, [r3, #4]
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	681a      	ldr	r2, [r3, #0]
 8007020:	4b0b      	ldr	r3, [pc, #44]	; (8007050 <HAL_I2C_Master_Transmit+0x1e4>)
 8007022:	400b      	ands	r3, r1
 8007024:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	2220      	movs	r2, #32
 800702a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	2200      	movs	r2, #0
 8007032:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	2200      	movs	r2, #0
 800703a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800703e:	2300      	movs	r3, #0
 8007040:	e000      	b.n	8007044 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8007042:	2302      	movs	r3, #2
  }
}
 8007044:	4618      	mov	r0, r3
 8007046:	3718      	adds	r7, #24
 8007048:	46bd      	mov	sp, r7
 800704a:	bd80      	pop	{r7, pc}
 800704c:	80002000 	.word	0x80002000
 8007050:	fe00e800 	.word	0xfe00e800

08007054 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007054:	b580      	push	{r7, lr}
 8007056:	b088      	sub	sp, #32
 8007058:	af02      	add	r7, sp, #8
 800705a:	60f8      	str	r0, [r7, #12]
 800705c:	607a      	str	r2, [r7, #4]
 800705e:	461a      	mov	r2, r3
 8007060:	460b      	mov	r3, r1
 8007062:	817b      	strh	r3, [r7, #10]
 8007064:	4613      	mov	r3, r2
 8007066:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800706e:	b2db      	uxtb	r3, r3
 8007070:	2b20      	cmp	r3, #32
 8007072:	f040 80db 	bne.w	800722c <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800707c:	2b01      	cmp	r3, #1
 800707e:	d101      	bne.n	8007084 <HAL_I2C_Master_Receive+0x30>
 8007080:	2302      	movs	r3, #2
 8007082:	e0d4      	b.n	800722e <HAL_I2C_Master_Receive+0x1da>
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	2201      	movs	r2, #1
 8007088:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800708c:	f7ff faea 	bl	8006664 <HAL_GetTick>
 8007090:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8007092:	697b      	ldr	r3, [r7, #20]
 8007094:	9300      	str	r3, [sp, #0]
 8007096:	2319      	movs	r3, #25
 8007098:	2201      	movs	r2, #1
 800709a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800709e:	68f8      	ldr	r0, [r7, #12]
 80070a0:	f000 fbc8 	bl	8007834 <I2C_WaitOnFlagUntilTimeout>
 80070a4:	4603      	mov	r3, r0
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d001      	beq.n	80070ae <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 80070aa:	2301      	movs	r3, #1
 80070ac:	e0bf      	b.n	800722e <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	2222      	movs	r2, #34	; 0x22
 80070b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	2210      	movs	r2, #16
 80070ba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	2200      	movs	r2, #0
 80070c2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	687a      	ldr	r2, [r7, #4]
 80070c8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	893a      	ldrh	r2, [r7, #8]
 80070ce:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	2200      	movs	r2, #0
 80070d4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80070da:	b29b      	uxth	r3, r3
 80070dc:	2bff      	cmp	r3, #255	; 0xff
 80070de:	d90e      	bls.n	80070fe <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	22ff      	movs	r2, #255	; 0xff
 80070e4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80070ea:	b2da      	uxtb	r2, r3
 80070ec:	8979      	ldrh	r1, [r7, #10]
 80070ee:	4b52      	ldr	r3, [pc, #328]	; (8007238 <HAL_I2C_Master_Receive+0x1e4>)
 80070f0:	9300      	str	r3, [sp, #0]
 80070f2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80070f6:	68f8      	ldr	r0, [r7, #12]
 80070f8:	f000 fd2a 	bl	8007b50 <I2C_TransferConfig>
 80070fc:	e06d      	b.n	80071da <HAL_I2C_Master_Receive+0x186>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007102:	b29a      	uxth	r2, r3
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800710c:	b2da      	uxtb	r2, r3
 800710e:	8979      	ldrh	r1, [r7, #10]
 8007110:	4b49      	ldr	r3, [pc, #292]	; (8007238 <HAL_I2C_Master_Receive+0x1e4>)
 8007112:	9300      	str	r3, [sp, #0]
 8007114:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007118:	68f8      	ldr	r0, [r7, #12]
 800711a:	f000 fd19 	bl	8007b50 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 800711e:	e05c      	b.n	80071da <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007120:	697a      	ldr	r2, [r7, #20]
 8007122:	6a39      	ldr	r1, [r7, #32]
 8007124:	68f8      	ldr	r0, [r7, #12]
 8007126:	f000 fc41 	bl	80079ac <I2C_WaitOnRXNEFlagUntilTimeout>
 800712a:	4603      	mov	r3, r0
 800712c:	2b00      	cmp	r3, #0
 800712e:	d001      	beq.n	8007134 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8007130:	2301      	movs	r3, #1
 8007132:	e07c      	b.n	800722e <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800713e:	b2d2      	uxtb	r2, r2
 8007140:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007146:	1c5a      	adds	r2, r3, #1
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007150:	3b01      	subs	r3, #1
 8007152:	b29a      	uxth	r2, r3
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800715c:	b29b      	uxth	r3, r3
 800715e:	3b01      	subs	r3, #1
 8007160:	b29a      	uxth	r2, r3
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800716a:	b29b      	uxth	r3, r3
 800716c:	2b00      	cmp	r3, #0
 800716e:	d034      	beq.n	80071da <HAL_I2C_Master_Receive+0x186>
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007174:	2b00      	cmp	r3, #0
 8007176:	d130      	bne.n	80071da <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8007178:	697b      	ldr	r3, [r7, #20]
 800717a:	9300      	str	r3, [sp, #0]
 800717c:	6a3b      	ldr	r3, [r7, #32]
 800717e:	2200      	movs	r2, #0
 8007180:	2180      	movs	r1, #128	; 0x80
 8007182:	68f8      	ldr	r0, [r7, #12]
 8007184:	f000 fb56 	bl	8007834 <I2C_WaitOnFlagUntilTimeout>
 8007188:	4603      	mov	r3, r0
 800718a:	2b00      	cmp	r3, #0
 800718c:	d001      	beq.n	8007192 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 800718e:	2301      	movs	r3, #1
 8007190:	e04d      	b.n	800722e <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007196:	b29b      	uxth	r3, r3
 8007198:	2bff      	cmp	r3, #255	; 0xff
 800719a:	d90e      	bls.n	80071ba <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	22ff      	movs	r2, #255	; 0xff
 80071a0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80071a6:	b2da      	uxtb	r2, r3
 80071a8:	8979      	ldrh	r1, [r7, #10]
 80071aa:	2300      	movs	r3, #0
 80071ac:	9300      	str	r3, [sp, #0]
 80071ae:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80071b2:	68f8      	ldr	r0, [r7, #12]
 80071b4:	f000 fccc 	bl	8007b50 <I2C_TransferConfig>
 80071b8:	e00f      	b.n	80071da <HAL_I2C_Master_Receive+0x186>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80071be:	b29a      	uxth	r2, r3
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80071c8:	b2da      	uxtb	r2, r3
 80071ca:	8979      	ldrh	r1, [r7, #10]
 80071cc:	2300      	movs	r3, #0
 80071ce:	9300      	str	r3, [sp, #0]
 80071d0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80071d4:	68f8      	ldr	r0, [r7, #12]
 80071d6:	f000 fcbb 	bl	8007b50 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80071de:	b29b      	uxth	r3, r3
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d19d      	bne.n	8007120 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80071e4:	697a      	ldr	r2, [r7, #20]
 80071e6:	6a39      	ldr	r1, [r7, #32]
 80071e8:	68f8      	ldr	r0, [r7, #12]
 80071ea:	f000 fba3 	bl	8007934 <I2C_WaitOnSTOPFlagUntilTimeout>
 80071ee:	4603      	mov	r3, r0
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	d001      	beq.n	80071f8 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 80071f4:	2301      	movs	r3, #1
 80071f6:	e01a      	b.n	800722e <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	2220      	movs	r2, #32
 80071fe:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	6859      	ldr	r1, [r3, #4]
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	681a      	ldr	r2, [r3, #0]
 800720a:	4b0c      	ldr	r3, [pc, #48]	; (800723c <HAL_I2C_Master_Receive+0x1e8>)
 800720c:	400b      	ands	r3, r1
 800720e:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	2220      	movs	r2, #32
 8007214:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	2200      	movs	r2, #0
 800721c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	2200      	movs	r2, #0
 8007224:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007228:	2300      	movs	r3, #0
 800722a:	e000      	b.n	800722e <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 800722c:	2302      	movs	r3, #2
  }
}
 800722e:	4618      	mov	r0, r3
 8007230:	3718      	adds	r7, #24
 8007232:	46bd      	mov	sp, r7
 8007234:	bd80      	pop	{r7, pc}
 8007236:	bf00      	nop
 8007238:	80002400 	.word	0x80002400
 800723c:	fe00e800 	.word	0xfe00e800

08007240 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007240:	b580      	push	{r7, lr}
 8007242:	b088      	sub	sp, #32
 8007244:	af02      	add	r7, sp, #8
 8007246:	60f8      	str	r0, [r7, #12]
 8007248:	4608      	mov	r0, r1
 800724a:	4611      	mov	r1, r2
 800724c:	461a      	mov	r2, r3
 800724e:	4603      	mov	r3, r0
 8007250:	817b      	strh	r3, [r7, #10]
 8007252:	460b      	mov	r3, r1
 8007254:	813b      	strh	r3, [r7, #8]
 8007256:	4613      	mov	r3, r2
 8007258:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007260:	b2db      	uxtb	r3, r3
 8007262:	2b20      	cmp	r3, #32
 8007264:	f040 80f9 	bne.w	800745a <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8007268:	6a3b      	ldr	r3, [r7, #32]
 800726a:	2b00      	cmp	r3, #0
 800726c:	d002      	beq.n	8007274 <HAL_I2C_Mem_Write+0x34>
 800726e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007270:	2b00      	cmp	r3, #0
 8007272:	d105      	bne.n	8007280 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	f44f 7200 	mov.w	r2, #512	; 0x200
 800727a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800727c:	2301      	movs	r3, #1
 800727e:	e0ed      	b.n	800745c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007286:	2b01      	cmp	r3, #1
 8007288:	d101      	bne.n	800728e <HAL_I2C_Mem_Write+0x4e>
 800728a:	2302      	movs	r3, #2
 800728c:	e0e6      	b.n	800745c <HAL_I2C_Mem_Write+0x21c>
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	2201      	movs	r2, #1
 8007292:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8007296:	f7ff f9e5 	bl	8006664 <HAL_GetTick>
 800729a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800729c:	697b      	ldr	r3, [r7, #20]
 800729e:	9300      	str	r3, [sp, #0]
 80072a0:	2319      	movs	r3, #25
 80072a2:	2201      	movs	r2, #1
 80072a4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80072a8:	68f8      	ldr	r0, [r7, #12]
 80072aa:	f000 fac3 	bl	8007834 <I2C_WaitOnFlagUntilTimeout>
 80072ae:	4603      	mov	r3, r0
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	d001      	beq.n	80072b8 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80072b4:	2301      	movs	r3, #1
 80072b6:	e0d1      	b.n	800745c <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	2221      	movs	r2, #33	; 0x21
 80072bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	2240      	movs	r2, #64	; 0x40
 80072c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	2200      	movs	r2, #0
 80072cc:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	6a3a      	ldr	r2, [r7, #32]
 80072d2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80072d8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	2200      	movs	r2, #0
 80072de:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80072e0:	88f8      	ldrh	r0, [r7, #6]
 80072e2:	893a      	ldrh	r2, [r7, #8]
 80072e4:	8979      	ldrh	r1, [r7, #10]
 80072e6:	697b      	ldr	r3, [r7, #20]
 80072e8:	9301      	str	r3, [sp, #4]
 80072ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072ec:	9300      	str	r3, [sp, #0]
 80072ee:	4603      	mov	r3, r0
 80072f0:	68f8      	ldr	r0, [r7, #12]
 80072f2:	f000 f9d3 	bl	800769c <I2C_RequestMemoryWrite>
 80072f6:	4603      	mov	r3, r0
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	d005      	beq.n	8007308 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	2200      	movs	r2, #0
 8007300:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8007304:	2301      	movs	r3, #1
 8007306:	e0a9      	b.n	800745c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800730c:	b29b      	uxth	r3, r3
 800730e:	2bff      	cmp	r3, #255	; 0xff
 8007310:	d90e      	bls.n	8007330 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	22ff      	movs	r2, #255	; 0xff
 8007316:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800731c:	b2da      	uxtb	r2, r3
 800731e:	8979      	ldrh	r1, [r7, #10]
 8007320:	2300      	movs	r3, #0
 8007322:	9300      	str	r3, [sp, #0]
 8007324:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007328:	68f8      	ldr	r0, [r7, #12]
 800732a:	f000 fc11 	bl	8007b50 <I2C_TransferConfig>
 800732e:	e00f      	b.n	8007350 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007334:	b29a      	uxth	r2, r3
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800733e:	b2da      	uxtb	r2, r3
 8007340:	8979      	ldrh	r1, [r7, #10]
 8007342:	2300      	movs	r3, #0
 8007344:	9300      	str	r3, [sp, #0]
 8007346:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800734a:	68f8      	ldr	r0, [r7, #12]
 800734c:	f000 fc00 	bl	8007b50 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007350:	697a      	ldr	r2, [r7, #20]
 8007352:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007354:	68f8      	ldr	r0, [r7, #12]
 8007356:	f000 faad 	bl	80078b4 <I2C_WaitOnTXISFlagUntilTimeout>
 800735a:	4603      	mov	r3, r0
 800735c:	2b00      	cmp	r3, #0
 800735e:	d001      	beq.n	8007364 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8007360:	2301      	movs	r3, #1
 8007362:	e07b      	b.n	800745c <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007368:	781a      	ldrb	r2, [r3, #0]
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007374:	1c5a      	adds	r2, r3, #1
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800737e:	b29b      	uxth	r3, r3
 8007380:	3b01      	subs	r3, #1
 8007382:	b29a      	uxth	r2, r3
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800738c:	3b01      	subs	r3, #1
 800738e:	b29a      	uxth	r2, r3
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007398:	b29b      	uxth	r3, r3
 800739a:	2b00      	cmp	r3, #0
 800739c:	d034      	beq.n	8007408 <HAL_I2C_Mem_Write+0x1c8>
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d130      	bne.n	8007408 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80073a6:	697b      	ldr	r3, [r7, #20]
 80073a8:	9300      	str	r3, [sp, #0]
 80073aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073ac:	2200      	movs	r2, #0
 80073ae:	2180      	movs	r1, #128	; 0x80
 80073b0:	68f8      	ldr	r0, [r7, #12]
 80073b2:	f000 fa3f 	bl	8007834 <I2C_WaitOnFlagUntilTimeout>
 80073b6:	4603      	mov	r3, r0
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	d001      	beq.n	80073c0 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80073bc:	2301      	movs	r3, #1
 80073be:	e04d      	b.n	800745c <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80073c4:	b29b      	uxth	r3, r3
 80073c6:	2bff      	cmp	r3, #255	; 0xff
 80073c8:	d90e      	bls.n	80073e8 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	22ff      	movs	r2, #255	; 0xff
 80073ce:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80073d4:	b2da      	uxtb	r2, r3
 80073d6:	8979      	ldrh	r1, [r7, #10]
 80073d8:	2300      	movs	r3, #0
 80073da:	9300      	str	r3, [sp, #0]
 80073dc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80073e0:	68f8      	ldr	r0, [r7, #12]
 80073e2:	f000 fbb5 	bl	8007b50 <I2C_TransferConfig>
 80073e6:	e00f      	b.n	8007408 <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80073ec:	b29a      	uxth	r2, r3
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80073f6:	b2da      	uxtb	r2, r3
 80073f8:	8979      	ldrh	r1, [r7, #10]
 80073fa:	2300      	movs	r3, #0
 80073fc:	9300      	str	r3, [sp, #0]
 80073fe:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007402:	68f8      	ldr	r0, [r7, #12]
 8007404:	f000 fba4 	bl	8007b50 <I2C_TransferConfig>
        }
      }

    }
    while (hi2c->XferCount > 0U);
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800740c:	b29b      	uxth	r3, r3
 800740e:	2b00      	cmp	r3, #0
 8007410:	d19e      	bne.n	8007350 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007412:	697a      	ldr	r2, [r7, #20]
 8007414:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007416:	68f8      	ldr	r0, [r7, #12]
 8007418:	f000 fa8c 	bl	8007934 <I2C_WaitOnSTOPFlagUntilTimeout>
 800741c:	4603      	mov	r3, r0
 800741e:	2b00      	cmp	r3, #0
 8007420:	d001      	beq.n	8007426 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8007422:	2301      	movs	r3, #1
 8007424:	e01a      	b.n	800745c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	2220      	movs	r2, #32
 800742c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	6859      	ldr	r1, [r3, #4]
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	681a      	ldr	r2, [r3, #0]
 8007438:	4b0a      	ldr	r3, [pc, #40]	; (8007464 <HAL_I2C_Mem_Write+0x224>)
 800743a:	400b      	ands	r3, r1
 800743c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	2220      	movs	r2, #32
 8007442:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	2200      	movs	r2, #0
 800744a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	2200      	movs	r2, #0
 8007452:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007456:	2300      	movs	r3, #0
 8007458:	e000      	b.n	800745c <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800745a:	2302      	movs	r3, #2
  }
}
 800745c:	4618      	mov	r0, r3
 800745e:	3718      	adds	r7, #24
 8007460:	46bd      	mov	sp, r7
 8007462:	bd80      	pop	{r7, pc}
 8007464:	fe00e800 	.word	0xfe00e800

08007468 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007468:	b580      	push	{r7, lr}
 800746a:	b088      	sub	sp, #32
 800746c:	af02      	add	r7, sp, #8
 800746e:	60f8      	str	r0, [r7, #12]
 8007470:	4608      	mov	r0, r1
 8007472:	4611      	mov	r1, r2
 8007474:	461a      	mov	r2, r3
 8007476:	4603      	mov	r3, r0
 8007478:	817b      	strh	r3, [r7, #10]
 800747a:	460b      	mov	r3, r1
 800747c:	813b      	strh	r3, [r7, #8]
 800747e:	4613      	mov	r3, r2
 8007480:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007488:	b2db      	uxtb	r3, r3
 800748a:	2b20      	cmp	r3, #32
 800748c:	f040 80fd 	bne.w	800768a <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8007490:	6a3b      	ldr	r3, [r7, #32]
 8007492:	2b00      	cmp	r3, #0
 8007494:	d002      	beq.n	800749c <HAL_I2C_Mem_Read+0x34>
 8007496:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007498:	2b00      	cmp	r3, #0
 800749a:	d105      	bne.n	80074a8 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	f44f 7200 	mov.w	r2, #512	; 0x200
 80074a2:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80074a4:	2301      	movs	r3, #1
 80074a6:	e0f1      	b.n	800768c <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80074ae:	2b01      	cmp	r3, #1
 80074b0:	d101      	bne.n	80074b6 <HAL_I2C_Mem_Read+0x4e>
 80074b2:	2302      	movs	r3, #2
 80074b4:	e0ea      	b.n	800768c <HAL_I2C_Mem_Read+0x224>
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	2201      	movs	r2, #1
 80074ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80074be:	f7ff f8d1 	bl	8006664 <HAL_GetTick>
 80074c2:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80074c4:	697b      	ldr	r3, [r7, #20]
 80074c6:	9300      	str	r3, [sp, #0]
 80074c8:	2319      	movs	r3, #25
 80074ca:	2201      	movs	r2, #1
 80074cc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80074d0:	68f8      	ldr	r0, [r7, #12]
 80074d2:	f000 f9af 	bl	8007834 <I2C_WaitOnFlagUntilTimeout>
 80074d6:	4603      	mov	r3, r0
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d001      	beq.n	80074e0 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80074dc:	2301      	movs	r3, #1
 80074de:	e0d5      	b.n	800768c <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	2222      	movs	r2, #34	; 0x22
 80074e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	2240      	movs	r2, #64	; 0x40
 80074ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	2200      	movs	r2, #0
 80074f4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	6a3a      	ldr	r2, [r7, #32]
 80074fa:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8007500:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	2200      	movs	r2, #0
 8007506:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8007508:	88f8      	ldrh	r0, [r7, #6]
 800750a:	893a      	ldrh	r2, [r7, #8]
 800750c:	8979      	ldrh	r1, [r7, #10]
 800750e:	697b      	ldr	r3, [r7, #20]
 8007510:	9301      	str	r3, [sp, #4]
 8007512:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007514:	9300      	str	r3, [sp, #0]
 8007516:	4603      	mov	r3, r0
 8007518:	68f8      	ldr	r0, [r7, #12]
 800751a:	f000 f913 	bl	8007744 <I2C_RequestMemoryRead>
 800751e:	4603      	mov	r3, r0
 8007520:	2b00      	cmp	r3, #0
 8007522:	d005      	beq.n	8007530 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	2200      	movs	r2, #0
 8007528:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800752c:	2301      	movs	r3, #1
 800752e:	e0ad      	b.n	800768c <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007534:	b29b      	uxth	r3, r3
 8007536:	2bff      	cmp	r3, #255	; 0xff
 8007538:	d90e      	bls.n	8007558 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	22ff      	movs	r2, #255	; 0xff
 800753e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007544:	b2da      	uxtb	r2, r3
 8007546:	8979      	ldrh	r1, [r7, #10]
 8007548:	4b52      	ldr	r3, [pc, #328]	; (8007694 <HAL_I2C_Mem_Read+0x22c>)
 800754a:	9300      	str	r3, [sp, #0]
 800754c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007550:	68f8      	ldr	r0, [r7, #12]
 8007552:	f000 fafd 	bl	8007b50 <I2C_TransferConfig>
 8007556:	e00f      	b.n	8007578 <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800755c:	b29a      	uxth	r2, r3
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007566:	b2da      	uxtb	r2, r3
 8007568:	8979      	ldrh	r1, [r7, #10]
 800756a:	4b4a      	ldr	r3, [pc, #296]	; (8007694 <HAL_I2C_Mem_Read+0x22c>)
 800756c:	9300      	str	r3, [sp, #0]
 800756e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007572:	68f8      	ldr	r0, [r7, #12]
 8007574:	f000 faec 	bl	8007b50 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8007578:	697b      	ldr	r3, [r7, #20]
 800757a:	9300      	str	r3, [sp, #0]
 800757c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800757e:	2200      	movs	r2, #0
 8007580:	2104      	movs	r1, #4
 8007582:	68f8      	ldr	r0, [r7, #12]
 8007584:	f000 f956 	bl	8007834 <I2C_WaitOnFlagUntilTimeout>
 8007588:	4603      	mov	r3, r0
 800758a:	2b00      	cmp	r3, #0
 800758c:	d001      	beq.n	8007592 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800758e:	2301      	movs	r3, #1
 8007590:	e07c      	b.n	800768c <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800759c:	b2d2      	uxtb	r2, r2
 800759e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075a4:	1c5a      	adds	r2, r3, #1
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80075ae:	3b01      	subs	r3, #1
 80075b0:	b29a      	uxth	r2, r3
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80075ba:	b29b      	uxth	r3, r3
 80075bc:	3b01      	subs	r3, #1
 80075be:	b29a      	uxth	r2, r3
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80075c8:	b29b      	uxth	r3, r3
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d034      	beq.n	8007638 <HAL_I2C_Mem_Read+0x1d0>
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	d130      	bne.n	8007638 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80075d6:	697b      	ldr	r3, [r7, #20]
 80075d8:	9300      	str	r3, [sp, #0]
 80075da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075dc:	2200      	movs	r2, #0
 80075de:	2180      	movs	r1, #128	; 0x80
 80075e0:	68f8      	ldr	r0, [r7, #12]
 80075e2:	f000 f927 	bl	8007834 <I2C_WaitOnFlagUntilTimeout>
 80075e6:	4603      	mov	r3, r0
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	d001      	beq.n	80075f0 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80075ec:	2301      	movs	r3, #1
 80075ee:	e04d      	b.n	800768c <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80075f4:	b29b      	uxth	r3, r3
 80075f6:	2bff      	cmp	r3, #255	; 0xff
 80075f8:	d90e      	bls.n	8007618 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	22ff      	movs	r2, #255	; 0xff
 80075fe:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007604:	b2da      	uxtb	r2, r3
 8007606:	8979      	ldrh	r1, [r7, #10]
 8007608:	2300      	movs	r3, #0
 800760a:	9300      	str	r3, [sp, #0]
 800760c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007610:	68f8      	ldr	r0, [r7, #12]
 8007612:	f000 fa9d 	bl	8007b50 <I2C_TransferConfig>
 8007616:	e00f      	b.n	8007638 <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800761c:	b29a      	uxth	r2, r3
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007626:	b2da      	uxtb	r2, r3
 8007628:	8979      	ldrh	r1, [r7, #10]
 800762a:	2300      	movs	r3, #0
 800762c:	9300      	str	r3, [sp, #0]
 800762e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007632:	68f8      	ldr	r0, [r7, #12]
 8007634:	f000 fa8c 	bl	8007b50 <I2C_TransferConfig>
        }
      }
    }
    while (hi2c->XferCount > 0U);
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800763c:	b29b      	uxth	r3, r3
 800763e:	2b00      	cmp	r3, #0
 8007640:	d19a      	bne.n	8007578 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007642:	697a      	ldr	r2, [r7, #20]
 8007644:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007646:	68f8      	ldr	r0, [r7, #12]
 8007648:	f000 f974 	bl	8007934 <I2C_WaitOnSTOPFlagUntilTimeout>
 800764c:	4603      	mov	r3, r0
 800764e:	2b00      	cmp	r3, #0
 8007650:	d001      	beq.n	8007656 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8007652:	2301      	movs	r3, #1
 8007654:	e01a      	b.n	800768c <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	2220      	movs	r2, #32
 800765c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	6859      	ldr	r1, [r3, #4]
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	681a      	ldr	r2, [r3, #0]
 8007668:	4b0b      	ldr	r3, [pc, #44]	; (8007698 <HAL_I2C_Mem_Read+0x230>)
 800766a:	400b      	ands	r3, r1
 800766c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	2220      	movs	r2, #32
 8007672:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	2200      	movs	r2, #0
 800767a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800767e:	68fb      	ldr	r3, [r7, #12]
 8007680:	2200      	movs	r2, #0
 8007682:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007686:	2300      	movs	r3, #0
 8007688:	e000      	b.n	800768c <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800768a:	2302      	movs	r3, #2
  }
}
 800768c:	4618      	mov	r0, r3
 800768e:	3718      	adds	r7, #24
 8007690:	46bd      	mov	sp, r7
 8007692:	bd80      	pop	{r7, pc}
 8007694:	80002400 	.word	0x80002400
 8007698:	fe00e800 	.word	0xfe00e800

0800769c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800769c:	b580      	push	{r7, lr}
 800769e:	b086      	sub	sp, #24
 80076a0:	af02      	add	r7, sp, #8
 80076a2:	60f8      	str	r0, [r7, #12]
 80076a4:	4608      	mov	r0, r1
 80076a6:	4611      	mov	r1, r2
 80076a8:	461a      	mov	r2, r3
 80076aa:	4603      	mov	r3, r0
 80076ac:	817b      	strh	r3, [r7, #10]
 80076ae:	460b      	mov	r3, r1
 80076b0:	813b      	strh	r3, [r7, #8]
 80076b2:	4613      	mov	r3, r2
 80076b4:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80076b6:	88fb      	ldrh	r3, [r7, #6]
 80076b8:	b2da      	uxtb	r2, r3
 80076ba:	8979      	ldrh	r1, [r7, #10]
 80076bc:	4b20      	ldr	r3, [pc, #128]	; (8007740 <I2C_RequestMemoryWrite+0xa4>)
 80076be:	9300      	str	r3, [sp, #0]
 80076c0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80076c4:	68f8      	ldr	r0, [r7, #12]
 80076c6:	f000 fa43 	bl	8007b50 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80076ca:	69fa      	ldr	r2, [r7, #28]
 80076cc:	69b9      	ldr	r1, [r7, #24]
 80076ce:	68f8      	ldr	r0, [r7, #12]
 80076d0:	f000 f8f0 	bl	80078b4 <I2C_WaitOnTXISFlagUntilTimeout>
 80076d4:	4603      	mov	r3, r0
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d001      	beq.n	80076de <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80076da:	2301      	movs	r3, #1
 80076dc:	e02c      	b.n	8007738 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80076de:	88fb      	ldrh	r3, [r7, #6]
 80076e0:	2b01      	cmp	r3, #1
 80076e2:	d105      	bne.n	80076f0 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80076e4:	893b      	ldrh	r3, [r7, #8]
 80076e6:	b2da      	uxtb	r2, r3
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	629a      	str	r2, [r3, #40]	; 0x28
 80076ee:	e015      	b.n	800771c <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80076f0:	893b      	ldrh	r3, [r7, #8]
 80076f2:	0a1b      	lsrs	r3, r3, #8
 80076f4:	b29b      	uxth	r3, r3
 80076f6:	b2da      	uxtb	r2, r3
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80076fe:	69fa      	ldr	r2, [r7, #28]
 8007700:	69b9      	ldr	r1, [r7, #24]
 8007702:	68f8      	ldr	r0, [r7, #12]
 8007704:	f000 f8d6 	bl	80078b4 <I2C_WaitOnTXISFlagUntilTimeout>
 8007708:	4603      	mov	r3, r0
 800770a:	2b00      	cmp	r3, #0
 800770c:	d001      	beq.n	8007712 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800770e:	2301      	movs	r3, #1
 8007710:	e012      	b.n	8007738 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007712:	893b      	ldrh	r3, [r7, #8]
 8007714:	b2da      	uxtb	r2, r3
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800771c:	69fb      	ldr	r3, [r7, #28]
 800771e:	9300      	str	r3, [sp, #0]
 8007720:	69bb      	ldr	r3, [r7, #24]
 8007722:	2200      	movs	r2, #0
 8007724:	2180      	movs	r1, #128	; 0x80
 8007726:	68f8      	ldr	r0, [r7, #12]
 8007728:	f000 f884 	bl	8007834 <I2C_WaitOnFlagUntilTimeout>
 800772c:	4603      	mov	r3, r0
 800772e:	2b00      	cmp	r3, #0
 8007730:	d001      	beq.n	8007736 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8007732:	2301      	movs	r3, #1
 8007734:	e000      	b.n	8007738 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8007736:	2300      	movs	r3, #0
}
 8007738:	4618      	mov	r0, r3
 800773a:	3710      	adds	r7, #16
 800773c:	46bd      	mov	sp, r7
 800773e:	bd80      	pop	{r7, pc}
 8007740:	80002000 	.word	0x80002000

08007744 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8007744:	b580      	push	{r7, lr}
 8007746:	b086      	sub	sp, #24
 8007748:	af02      	add	r7, sp, #8
 800774a:	60f8      	str	r0, [r7, #12]
 800774c:	4608      	mov	r0, r1
 800774e:	4611      	mov	r1, r2
 8007750:	461a      	mov	r2, r3
 8007752:	4603      	mov	r3, r0
 8007754:	817b      	strh	r3, [r7, #10]
 8007756:	460b      	mov	r3, r1
 8007758:	813b      	strh	r3, [r7, #8]
 800775a:	4613      	mov	r3, r2
 800775c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800775e:	88fb      	ldrh	r3, [r7, #6]
 8007760:	b2da      	uxtb	r2, r3
 8007762:	8979      	ldrh	r1, [r7, #10]
 8007764:	4b20      	ldr	r3, [pc, #128]	; (80077e8 <I2C_RequestMemoryRead+0xa4>)
 8007766:	9300      	str	r3, [sp, #0]
 8007768:	2300      	movs	r3, #0
 800776a:	68f8      	ldr	r0, [r7, #12]
 800776c:	f000 f9f0 	bl	8007b50 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007770:	69fa      	ldr	r2, [r7, #28]
 8007772:	69b9      	ldr	r1, [r7, #24]
 8007774:	68f8      	ldr	r0, [r7, #12]
 8007776:	f000 f89d 	bl	80078b4 <I2C_WaitOnTXISFlagUntilTimeout>
 800777a:	4603      	mov	r3, r0
 800777c:	2b00      	cmp	r3, #0
 800777e:	d001      	beq.n	8007784 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8007780:	2301      	movs	r3, #1
 8007782:	e02c      	b.n	80077de <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007784:	88fb      	ldrh	r3, [r7, #6]
 8007786:	2b01      	cmp	r3, #1
 8007788:	d105      	bne.n	8007796 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800778a:	893b      	ldrh	r3, [r7, #8]
 800778c:	b2da      	uxtb	r2, r3
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	629a      	str	r2, [r3, #40]	; 0x28
 8007794:	e015      	b.n	80077c2 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8007796:	893b      	ldrh	r3, [r7, #8]
 8007798:	0a1b      	lsrs	r3, r3, #8
 800779a:	b29b      	uxth	r3, r3
 800779c:	b2da      	uxtb	r2, r3
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80077a4:	69fa      	ldr	r2, [r7, #28]
 80077a6:	69b9      	ldr	r1, [r7, #24]
 80077a8:	68f8      	ldr	r0, [r7, #12]
 80077aa:	f000 f883 	bl	80078b4 <I2C_WaitOnTXISFlagUntilTimeout>
 80077ae:	4603      	mov	r3, r0
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	d001      	beq.n	80077b8 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80077b4:	2301      	movs	r3, #1
 80077b6:	e012      	b.n	80077de <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80077b8:	893b      	ldrh	r3, [r7, #8]
 80077ba:	b2da      	uxtb	r2, r3
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80077c2:	69fb      	ldr	r3, [r7, #28]
 80077c4:	9300      	str	r3, [sp, #0]
 80077c6:	69bb      	ldr	r3, [r7, #24]
 80077c8:	2200      	movs	r2, #0
 80077ca:	2140      	movs	r1, #64	; 0x40
 80077cc:	68f8      	ldr	r0, [r7, #12]
 80077ce:	f000 f831 	bl	8007834 <I2C_WaitOnFlagUntilTimeout>
 80077d2:	4603      	mov	r3, r0
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	d001      	beq.n	80077dc <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80077d8:	2301      	movs	r3, #1
 80077da:	e000      	b.n	80077de <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80077dc:	2300      	movs	r3, #0
}
 80077de:	4618      	mov	r0, r3
 80077e0:	3710      	adds	r7, #16
 80077e2:	46bd      	mov	sp, r7
 80077e4:	bd80      	pop	{r7, pc}
 80077e6:	bf00      	nop
 80077e8:	80002000 	.word	0x80002000

080077ec <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80077ec:	b480      	push	{r7}
 80077ee:	b083      	sub	sp, #12
 80077f0:	af00      	add	r7, sp, #0
 80077f2:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	699b      	ldr	r3, [r3, #24]
 80077fa:	f003 0302 	and.w	r3, r3, #2
 80077fe:	2b02      	cmp	r3, #2
 8007800:	d103      	bne.n	800780a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	2200      	movs	r2, #0
 8007808:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	699b      	ldr	r3, [r3, #24]
 8007810:	f003 0301 	and.w	r3, r3, #1
 8007814:	2b01      	cmp	r3, #1
 8007816:	d007      	beq.n	8007828 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	699a      	ldr	r2, [r3, #24]
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	f042 0201 	orr.w	r2, r2, #1
 8007826:	619a      	str	r2, [r3, #24]
  }
}
 8007828:	bf00      	nop
 800782a:	370c      	adds	r7, #12
 800782c:	46bd      	mov	sp, r7
 800782e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007832:	4770      	bx	lr

08007834 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8007834:	b580      	push	{r7, lr}
 8007836:	b084      	sub	sp, #16
 8007838:	af00      	add	r7, sp, #0
 800783a:	60f8      	str	r0, [r7, #12]
 800783c:	60b9      	str	r1, [r7, #8]
 800783e:	603b      	str	r3, [r7, #0]
 8007840:	4613      	mov	r3, r2
 8007842:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007844:	e022      	b.n	800788c <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007846:	683b      	ldr	r3, [r7, #0]
 8007848:	f1b3 3fff 	cmp.w	r3, #4294967295
 800784c:	d01e      	beq.n	800788c <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800784e:	f7fe ff09 	bl	8006664 <HAL_GetTick>
 8007852:	4602      	mov	r2, r0
 8007854:	69bb      	ldr	r3, [r7, #24]
 8007856:	1ad3      	subs	r3, r2, r3
 8007858:	683a      	ldr	r2, [r7, #0]
 800785a:	429a      	cmp	r2, r3
 800785c:	d302      	bcc.n	8007864 <I2C_WaitOnFlagUntilTimeout+0x30>
 800785e:	683b      	ldr	r3, [r7, #0]
 8007860:	2b00      	cmp	r3, #0
 8007862:	d113      	bne.n	800788c <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007868:	f043 0220 	orr.w	r2, r3, #32
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	2220      	movs	r2, #32
 8007874:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	2200      	movs	r2, #0
 800787c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	2200      	movs	r2, #0
 8007884:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8007888:	2301      	movs	r3, #1
 800788a:	e00f      	b.n	80078ac <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	699a      	ldr	r2, [r3, #24]
 8007892:	68bb      	ldr	r3, [r7, #8]
 8007894:	4013      	ands	r3, r2
 8007896:	68ba      	ldr	r2, [r7, #8]
 8007898:	429a      	cmp	r2, r3
 800789a:	bf0c      	ite	eq
 800789c:	2301      	moveq	r3, #1
 800789e:	2300      	movne	r3, #0
 80078a0:	b2db      	uxtb	r3, r3
 80078a2:	461a      	mov	r2, r3
 80078a4:	79fb      	ldrb	r3, [r7, #7]
 80078a6:	429a      	cmp	r2, r3
 80078a8:	d0cd      	beq.n	8007846 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80078aa:	2300      	movs	r3, #0
}
 80078ac:	4618      	mov	r0, r3
 80078ae:	3710      	adds	r7, #16
 80078b0:	46bd      	mov	sp, r7
 80078b2:	bd80      	pop	{r7, pc}

080078b4 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80078b4:	b580      	push	{r7, lr}
 80078b6:	b084      	sub	sp, #16
 80078b8:	af00      	add	r7, sp, #0
 80078ba:	60f8      	str	r0, [r7, #12]
 80078bc:	60b9      	str	r1, [r7, #8]
 80078be:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80078c0:	e02c      	b.n	800791c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80078c2:	687a      	ldr	r2, [r7, #4]
 80078c4:	68b9      	ldr	r1, [r7, #8]
 80078c6:	68f8      	ldr	r0, [r7, #12]
 80078c8:	f000 f8dc 	bl	8007a84 <I2C_IsAcknowledgeFailed>
 80078cc:	4603      	mov	r3, r0
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d001      	beq.n	80078d6 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80078d2:	2301      	movs	r3, #1
 80078d4:	e02a      	b.n	800792c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80078d6:	68bb      	ldr	r3, [r7, #8]
 80078d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80078dc:	d01e      	beq.n	800791c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80078de:	f7fe fec1 	bl	8006664 <HAL_GetTick>
 80078e2:	4602      	mov	r2, r0
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	1ad3      	subs	r3, r2, r3
 80078e8:	68ba      	ldr	r2, [r7, #8]
 80078ea:	429a      	cmp	r2, r3
 80078ec:	d302      	bcc.n	80078f4 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80078ee:	68bb      	ldr	r3, [r7, #8]
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	d113      	bne.n	800791c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80078f8:	f043 0220 	orr.w	r2, r3, #32
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	2220      	movs	r2, #32
 8007904:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	2200      	movs	r2, #0
 800790c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	2200      	movs	r2, #0
 8007914:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8007918:	2301      	movs	r3, #1
 800791a:	e007      	b.n	800792c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	699b      	ldr	r3, [r3, #24]
 8007922:	f003 0302 	and.w	r3, r3, #2
 8007926:	2b02      	cmp	r3, #2
 8007928:	d1cb      	bne.n	80078c2 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800792a:	2300      	movs	r3, #0
}
 800792c:	4618      	mov	r0, r3
 800792e:	3710      	adds	r7, #16
 8007930:	46bd      	mov	sp, r7
 8007932:	bd80      	pop	{r7, pc}

08007934 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007934:	b580      	push	{r7, lr}
 8007936:	b084      	sub	sp, #16
 8007938:	af00      	add	r7, sp, #0
 800793a:	60f8      	str	r0, [r7, #12]
 800793c:	60b9      	str	r1, [r7, #8]
 800793e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007940:	e028      	b.n	8007994 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8007942:	687a      	ldr	r2, [r7, #4]
 8007944:	68b9      	ldr	r1, [r7, #8]
 8007946:	68f8      	ldr	r0, [r7, #12]
 8007948:	f000 f89c 	bl	8007a84 <I2C_IsAcknowledgeFailed>
 800794c:	4603      	mov	r3, r0
 800794e:	2b00      	cmp	r3, #0
 8007950:	d001      	beq.n	8007956 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8007952:	2301      	movs	r3, #1
 8007954:	e026      	b.n	80079a4 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007956:	f7fe fe85 	bl	8006664 <HAL_GetTick>
 800795a:	4602      	mov	r2, r0
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	1ad3      	subs	r3, r2, r3
 8007960:	68ba      	ldr	r2, [r7, #8]
 8007962:	429a      	cmp	r2, r3
 8007964:	d302      	bcc.n	800796c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8007966:	68bb      	ldr	r3, [r7, #8]
 8007968:	2b00      	cmp	r3, #0
 800796a:	d113      	bne.n	8007994 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007970:	f043 0220 	orr.w	r2, r3, #32
 8007974:	68fb      	ldr	r3, [r7, #12]
 8007976:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	2220      	movs	r2, #32
 800797c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	2200      	movs	r2, #0
 8007984:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	2200      	movs	r2, #0
 800798c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8007990:	2301      	movs	r3, #1
 8007992:	e007      	b.n	80079a4 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	699b      	ldr	r3, [r3, #24]
 800799a:	f003 0320 	and.w	r3, r3, #32
 800799e:	2b20      	cmp	r3, #32
 80079a0:	d1cf      	bne.n	8007942 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80079a2:	2300      	movs	r3, #0
}
 80079a4:	4618      	mov	r0, r3
 80079a6:	3710      	adds	r7, #16
 80079a8:	46bd      	mov	sp, r7
 80079aa:	bd80      	pop	{r7, pc}

080079ac <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80079ac:	b580      	push	{r7, lr}
 80079ae:	b084      	sub	sp, #16
 80079b0:	af00      	add	r7, sp, #0
 80079b2:	60f8      	str	r0, [r7, #12]
 80079b4:	60b9      	str	r1, [r7, #8]
 80079b6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80079b8:	e055      	b.n	8007a66 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80079ba:	687a      	ldr	r2, [r7, #4]
 80079bc:	68b9      	ldr	r1, [r7, #8]
 80079be:	68f8      	ldr	r0, [r7, #12]
 80079c0:	f000 f860 	bl	8007a84 <I2C_IsAcknowledgeFailed>
 80079c4:	4603      	mov	r3, r0
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	d001      	beq.n	80079ce <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80079ca:	2301      	movs	r3, #1
 80079cc:	e053      	b.n	8007a76 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	699b      	ldr	r3, [r3, #24]
 80079d4:	f003 0320 	and.w	r3, r3, #32
 80079d8:	2b20      	cmp	r3, #32
 80079da:	d129      	bne.n	8007a30 <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	699b      	ldr	r3, [r3, #24]
 80079e2:	f003 0304 	and.w	r3, r3, #4
 80079e6:	2b04      	cmp	r3, #4
 80079e8:	d105      	bne.n	80079f6 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	d001      	beq.n	80079f6 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 80079f2:	2300      	movs	r3, #0
 80079f4:	e03f      	b.n	8007a76 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80079f6:	68fb      	ldr	r3, [r7, #12]
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	2220      	movs	r2, #32
 80079fc:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	6859      	ldr	r1, [r3, #4]
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	681a      	ldr	r2, [r3, #0]
 8007a08:	4b1d      	ldr	r3, [pc, #116]	; (8007a80 <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 8007a0a:	400b      	ands	r3, r1
 8007a0c:	6053      	str	r3, [r2, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	2200      	movs	r2, #0
 8007a12:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	2220      	movs	r2, #32
 8007a18:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	2200      	movs	r2, #0
 8007a20:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	2200      	movs	r2, #0
 8007a28:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8007a2c:	2301      	movs	r3, #1
 8007a2e:	e022      	b.n	8007a76 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007a30:	f7fe fe18 	bl	8006664 <HAL_GetTick>
 8007a34:	4602      	mov	r2, r0
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	1ad3      	subs	r3, r2, r3
 8007a3a:	68ba      	ldr	r2, [r7, #8]
 8007a3c:	429a      	cmp	r2, r3
 8007a3e:	d302      	bcc.n	8007a46 <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 8007a40:	68bb      	ldr	r3, [r7, #8]
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	d10f      	bne.n	8007a66 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007a4a:	f043 0220 	orr.w	r2, r3, #32
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	2220      	movs	r2, #32
 8007a56:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	2200      	movs	r2, #0
 8007a5e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8007a62:	2301      	movs	r3, #1
 8007a64:	e007      	b.n	8007a76 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007a66:	68fb      	ldr	r3, [r7, #12]
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	699b      	ldr	r3, [r3, #24]
 8007a6c:	f003 0304 	and.w	r3, r3, #4
 8007a70:	2b04      	cmp	r3, #4
 8007a72:	d1a2      	bne.n	80079ba <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8007a74:	2300      	movs	r3, #0
}
 8007a76:	4618      	mov	r0, r3
 8007a78:	3710      	adds	r7, #16
 8007a7a:	46bd      	mov	sp, r7
 8007a7c:	bd80      	pop	{r7, pc}
 8007a7e:	bf00      	nop
 8007a80:	fe00e800 	.word	0xfe00e800

08007a84 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007a84:	b580      	push	{r7, lr}
 8007a86:	b084      	sub	sp, #16
 8007a88:	af00      	add	r7, sp, #0
 8007a8a:	60f8      	str	r0, [r7, #12]
 8007a8c:	60b9      	str	r1, [r7, #8]
 8007a8e:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	699b      	ldr	r3, [r3, #24]
 8007a96:	f003 0310 	and.w	r3, r3, #16
 8007a9a:	2b10      	cmp	r3, #16
 8007a9c:	d151      	bne.n	8007b42 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007a9e:	e022      	b.n	8007ae6 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8007aa0:	68bb      	ldr	r3, [r7, #8]
 8007aa2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007aa6:	d01e      	beq.n	8007ae6 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007aa8:	f7fe fddc 	bl	8006664 <HAL_GetTick>
 8007aac:	4602      	mov	r2, r0
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	1ad3      	subs	r3, r2, r3
 8007ab2:	68ba      	ldr	r2, [r7, #8]
 8007ab4:	429a      	cmp	r2, r3
 8007ab6:	d302      	bcc.n	8007abe <I2C_IsAcknowledgeFailed+0x3a>
 8007ab8:	68bb      	ldr	r3, [r7, #8]
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	d113      	bne.n	8007ae6 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007ac2:	f043 0220 	orr.w	r2, r3, #32
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	2220      	movs	r2, #32
 8007ace:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	2200      	movs	r2, #0
 8007ad6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	2200      	movs	r2, #0
 8007ade:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8007ae2:	2301      	movs	r3, #1
 8007ae4:	e02e      	b.n	8007b44 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	699b      	ldr	r3, [r3, #24]
 8007aec:	f003 0320 	and.w	r3, r3, #32
 8007af0:	2b20      	cmp	r3, #32
 8007af2:	d1d5      	bne.n	8007aa0 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	2210      	movs	r2, #16
 8007afa:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	2220      	movs	r2, #32
 8007b02:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8007b04:	68f8      	ldr	r0, [r7, #12]
 8007b06:	f7ff fe71 	bl	80077ec <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	6859      	ldr	r1, [r3, #4]
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	681a      	ldr	r2, [r3, #0]
 8007b14:	4b0d      	ldr	r3, [pc, #52]	; (8007b4c <I2C_IsAcknowledgeFailed+0xc8>)
 8007b16:	400b      	ands	r3, r1
 8007b18:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007b1e:	f043 0204 	orr.w	r2, r3, #4
 8007b22:	68fb      	ldr	r3, [r7, #12]
 8007b24:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	2220      	movs	r2, #32
 8007b2a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007b2e:	68fb      	ldr	r3, [r7, #12]
 8007b30:	2200      	movs	r2, #0
 8007b32:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	2200      	movs	r2, #0
 8007b3a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8007b3e:	2301      	movs	r3, #1
 8007b40:	e000      	b.n	8007b44 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8007b42:	2300      	movs	r3, #0
}
 8007b44:	4618      	mov	r0, r3
 8007b46:	3710      	adds	r7, #16
 8007b48:	46bd      	mov	sp, r7
 8007b4a:	bd80      	pop	{r7, pc}
 8007b4c:	fe00e800 	.word	0xfe00e800

08007b50 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 8007b50:	b480      	push	{r7}
 8007b52:	b085      	sub	sp, #20
 8007b54:	af00      	add	r7, sp, #0
 8007b56:	60f8      	str	r0, [r7, #12]
 8007b58:	607b      	str	r3, [r7, #4]
 8007b5a:	460b      	mov	r3, r1
 8007b5c:	817b      	strh	r3, [r7, #10]
 8007b5e:	4613      	mov	r3, r2
 8007b60:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	685a      	ldr	r2, [r3, #4]
 8007b68:	69bb      	ldr	r3, [r7, #24]
 8007b6a:	0d5b      	lsrs	r3, r3, #21
 8007b6c:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8007b70:	4b0d      	ldr	r3, [pc, #52]	; (8007ba8 <I2C_TransferConfig+0x58>)
 8007b72:	430b      	orrs	r3, r1
 8007b74:	43db      	mvns	r3, r3
 8007b76:	ea02 0103 	and.w	r1, r2, r3
 8007b7a:	897b      	ldrh	r3, [r7, #10]
 8007b7c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8007b80:	7a7b      	ldrb	r3, [r7, #9]
 8007b82:	041b      	lsls	r3, r3, #16
 8007b84:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007b88:	431a      	orrs	r2, r3
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	431a      	orrs	r2, r3
 8007b8e:	69bb      	ldr	r3, [r7, #24]
 8007b90:	431a      	orrs	r2, r3
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	430a      	orrs	r2, r1
 8007b98:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8007b9a:	bf00      	nop
 8007b9c:	3714      	adds	r7, #20
 8007b9e:	46bd      	mov	sp, r7
 8007ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ba4:	4770      	bx	lr
 8007ba6:	bf00      	nop
 8007ba8:	03ff63ff 	.word	0x03ff63ff

08007bac <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8007bac:	b480      	push	{r7}
 8007bae:	b083      	sub	sp, #12
 8007bb0:	af00      	add	r7, sp, #0
 8007bb2:	6078      	str	r0, [r7, #4]
 8007bb4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007bbc:	b2db      	uxtb	r3, r3
 8007bbe:	2b20      	cmp	r3, #32
 8007bc0:	d138      	bne.n	8007c34 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007bc8:	2b01      	cmp	r3, #1
 8007bca:	d101      	bne.n	8007bd0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8007bcc:	2302      	movs	r3, #2
 8007bce:	e032      	b.n	8007c36 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	2201      	movs	r2, #1
 8007bd4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	2224      	movs	r2, #36	; 0x24
 8007bdc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	681a      	ldr	r2, [r3, #0]
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	f022 0201 	bic.w	r2, r2, #1
 8007bee:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	681a      	ldr	r2, [r3, #0]
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007bfe:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	6819      	ldr	r1, [r3, #0]
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	683a      	ldr	r2, [r7, #0]
 8007c0c:	430a      	orrs	r2, r1
 8007c0e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	681a      	ldr	r2, [r3, #0]
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	f042 0201 	orr.w	r2, r2, #1
 8007c1e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	2220      	movs	r2, #32
 8007c24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	2200      	movs	r2, #0
 8007c2c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007c30:	2300      	movs	r3, #0
 8007c32:	e000      	b.n	8007c36 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8007c34:	2302      	movs	r3, #2
  }
}
 8007c36:	4618      	mov	r0, r3
 8007c38:	370c      	adds	r7, #12
 8007c3a:	46bd      	mov	sp, r7
 8007c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c40:	4770      	bx	lr

08007c42 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8007c42:	b480      	push	{r7}
 8007c44:	b085      	sub	sp, #20
 8007c46:	af00      	add	r7, sp, #0
 8007c48:	6078      	str	r0, [r7, #4]
 8007c4a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007c52:	b2db      	uxtb	r3, r3
 8007c54:	2b20      	cmp	r3, #32
 8007c56:	d139      	bne.n	8007ccc <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007c5e:	2b01      	cmp	r3, #1
 8007c60:	d101      	bne.n	8007c66 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8007c62:	2302      	movs	r3, #2
 8007c64:	e033      	b.n	8007cce <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	2201      	movs	r2, #1
 8007c6a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	2224      	movs	r2, #36	; 0x24
 8007c72:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	681a      	ldr	r2, [r3, #0]
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	f022 0201 	bic.w	r2, r2, #1
 8007c84:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8007c8e:	68fb      	ldr	r3, [r7, #12]
 8007c90:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8007c94:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8007c96:	683b      	ldr	r3, [r7, #0]
 8007c98:	021b      	lsls	r3, r3, #8
 8007c9a:	68fa      	ldr	r2, [r7, #12]
 8007c9c:	4313      	orrs	r3, r2
 8007c9e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	68fa      	ldr	r2, [r7, #12]
 8007ca6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	681a      	ldr	r2, [r3, #0]
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	f042 0201 	orr.w	r2, r2, #1
 8007cb6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	2220      	movs	r2, #32
 8007cbc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	2200      	movs	r2, #0
 8007cc4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007cc8:	2300      	movs	r3, #0
 8007cca:	e000      	b.n	8007cce <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8007ccc:	2302      	movs	r3, #2
  }
}
 8007cce:	4618      	mov	r0, r3
 8007cd0:	3714      	adds	r7, #20
 8007cd2:	46bd      	mov	sp, r7
 8007cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cd8:	4770      	bx	lr
	...

08007cdc <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8007cdc:	b480      	push	{r7}
 8007cde:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007ce0:	4b05      	ldr	r3, [pc, #20]	; (8007cf8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	4a04      	ldr	r2, [pc, #16]	; (8007cf8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8007ce6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007cea:	6013      	str	r3, [r2, #0]
}
 8007cec:	bf00      	nop
 8007cee:	46bd      	mov	sp, r7
 8007cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cf4:	4770      	bx	lr
 8007cf6:	bf00      	nop
 8007cf8:	58000400 	.word	0x58000400

08007cfc <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */  
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8007cfc:	b480      	push	{r7}
 8007cfe:	af00      	add	r7, sp, #0
  return  (PWR->CR1 & PWR_CR1_VOS);
 8007d00:	4b04      	ldr	r3, [pc, #16]	; (8007d14 <HAL_PWREx_GetVoltageRange+0x18>)
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8007d08:	4618      	mov	r0, r3
 8007d0a:	46bd      	mov	sp, r7
 8007d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d10:	4770      	bx	lr
 8007d12:	bf00      	nop
 8007d14:	58000400 	.word	0x58000400

08007d18 <LL_RCC_HSE_IsEnabledDiv2>:
{
 8007d18:	b480      	push	{r7}
 8007d1a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8007d1c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007d26:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007d2a:	d101      	bne.n	8007d30 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8007d2c:	2301      	movs	r3, #1
 8007d2e:	e000      	b.n	8007d32 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8007d30:	2300      	movs	r3, #0
}
 8007d32:	4618      	mov	r0, r3
 8007d34:	46bd      	mov	sp, r7
 8007d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d3a:	4770      	bx	lr

08007d3c <LL_RCC_HSE_Enable>:
{
 8007d3c:	b480      	push	{r7}
 8007d3e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8007d40:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007d4a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007d4e:	6013      	str	r3, [r2, #0]
}
 8007d50:	bf00      	nop
 8007d52:	46bd      	mov	sp, r7
 8007d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d58:	4770      	bx	lr

08007d5a <LL_RCC_HSE_Disable>:
{
 8007d5a:	b480      	push	{r7}
 8007d5c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8007d5e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007d68:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007d6c:	6013      	str	r3, [r2, #0]
}
 8007d6e:	bf00      	nop
 8007d70:	46bd      	mov	sp, r7
 8007d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d76:	4770      	bx	lr

08007d78 <LL_RCC_HSE_IsReady>:
{
 8007d78:	b480      	push	{r7}
 8007d7a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8007d7c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007d86:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007d8a:	d101      	bne.n	8007d90 <LL_RCC_HSE_IsReady+0x18>
 8007d8c:	2301      	movs	r3, #1
 8007d8e:	e000      	b.n	8007d92 <LL_RCC_HSE_IsReady+0x1a>
 8007d90:	2300      	movs	r3, #0
}
 8007d92:	4618      	mov	r0, r3
 8007d94:	46bd      	mov	sp, r7
 8007d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d9a:	4770      	bx	lr

08007d9c <LL_RCC_HSI_Enable>:
{
 8007d9c:	b480      	push	{r7}
 8007d9e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8007da0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007daa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007dae:	6013      	str	r3, [r2, #0]
}
 8007db0:	bf00      	nop
 8007db2:	46bd      	mov	sp, r7
 8007db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007db8:	4770      	bx	lr

08007dba <LL_RCC_HSI_Disable>:
{
 8007dba:	b480      	push	{r7}
 8007dbc:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8007dbe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007dc8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007dcc:	6013      	str	r3, [r2, #0]
}
 8007dce:	bf00      	nop
 8007dd0:	46bd      	mov	sp, r7
 8007dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dd6:	4770      	bx	lr

08007dd8 <LL_RCC_HSI_IsReady>:
{
 8007dd8:	b480      	push	{r7}
 8007dda:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8007ddc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007de6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007dea:	d101      	bne.n	8007df0 <LL_RCC_HSI_IsReady+0x18>
 8007dec:	2301      	movs	r3, #1
 8007dee:	e000      	b.n	8007df2 <LL_RCC_HSI_IsReady+0x1a>
 8007df0:	2300      	movs	r3, #0
}
 8007df2:	4618      	mov	r0, r3
 8007df4:	46bd      	mov	sp, r7
 8007df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dfa:	4770      	bx	lr

08007dfc <LL_RCC_HSI_SetCalibTrimming>:
{
 8007dfc:	b480      	push	{r7}
 8007dfe:	b083      	sub	sp, #12
 8007e00:	af00      	add	r7, sp, #0
 8007e02:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8007e04:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007e08:	685b      	ldr	r3, [r3, #4]
 8007e0a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	061b      	lsls	r3, r3, #24
 8007e12:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007e16:	4313      	orrs	r3, r2
 8007e18:	604b      	str	r3, [r1, #4]
}
 8007e1a:	bf00      	nop
 8007e1c:	370c      	adds	r7, #12
 8007e1e:	46bd      	mov	sp, r7
 8007e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e24:	4770      	bx	lr

08007e26 <LL_RCC_HSI48_Enable>:
{
 8007e26:	b480      	push	{r7}
 8007e28:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8007e2a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007e2e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007e32:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007e36:	f043 0301 	orr.w	r3, r3, #1
 8007e3a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8007e3e:	bf00      	nop
 8007e40:	46bd      	mov	sp, r7
 8007e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e46:	4770      	bx	lr

08007e48 <LL_RCC_HSI48_Disable>:
{
 8007e48:	b480      	push	{r7}
 8007e4a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8007e4c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007e50:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007e54:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007e58:	f023 0301 	bic.w	r3, r3, #1
 8007e5c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8007e60:	bf00      	nop
 8007e62:	46bd      	mov	sp, r7
 8007e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e68:	4770      	bx	lr

08007e6a <LL_RCC_HSI48_IsReady>:
{
 8007e6a:	b480      	push	{r7}
 8007e6c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 8007e6e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007e72:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007e76:	f003 0302 	and.w	r3, r3, #2
 8007e7a:	2b02      	cmp	r3, #2
 8007e7c:	d101      	bne.n	8007e82 <LL_RCC_HSI48_IsReady+0x18>
 8007e7e:	2301      	movs	r3, #1
 8007e80:	e000      	b.n	8007e84 <LL_RCC_HSI48_IsReady+0x1a>
 8007e82:	2300      	movs	r3, #0
}
 8007e84:	4618      	mov	r0, r3
 8007e86:	46bd      	mov	sp, r7
 8007e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e8c:	4770      	bx	lr

08007e8e <LL_RCC_LSE_Enable>:
{
 8007e8e:	b480      	push	{r7}
 8007e90:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8007e92:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007e96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007e9a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007e9e:	f043 0301 	orr.w	r3, r3, #1
 8007ea2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8007ea6:	bf00      	nop
 8007ea8:	46bd      	mov	sp, r7
 8007eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eae:	4770      	bx	lr

08007eb0 <LL_RCC_LSE_Disable>:
{
 8007eb0:	b480      	push	{r7}
 8007eb2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8007eb4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007eb8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007ebc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007ec0:	f023 0301 	bic.w	r3, r3, #1
 8007ec4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8007ec8:	bf00      	nop
 8007eca:	46bd      	mov	sp, r7
 8007ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ed0:	4770      	bx	lr

08007ed2 <LL_RCC_LSE_EnableBypass>:
{
 8007ed2:	b480      	push	{r7}
 8007ed4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8007ed6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007eda:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007ede:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007ee2:	f043 0304 	orr.w	r3, r3, #4
 8007ee6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8007eea:	bf00      	nop
 8007eec:	46bd      	mov	sp, r7
 8007eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ef2:	4770      	bx	lr

08007ef4 <LL_RCC_LSE_DisableBypass>:
{
 8007ef4:	b480      	push	{r7}
 8007ef6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8007ef8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007efc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007f00:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007f04:	f023 0304 	bic.w	r3, r3, #4
 8007f08:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8007f0c:	bf00      	nop
 8007f0e:	46bd      	mov	sp, r7
 8007f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f14:	4770      	bx	lr

08007f16 <LL_RCC_LSE_IsReady>:
{
 8007f16:	b480      	push	{r7}
 8007f18:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8007f1a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007f1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007f22:	f003 0302 	and.w	r3, r3, #2
 8007f26:	2b02      	cmp	r3, #2
 8007f28:	d101      	bne.n	8007f2e <LL_RCC_LSE_IsReady+0x18>
 8007f2a:	2301      	movs	r3, #1
 8007f2c:	e000      	b.n	8007f30 <LL_RCC_LSE_IsReady+0x1a>
 8007f2e:	2300      	movs	r3, #0
}
 8007f30:	4618      	mov	r0, r3
 8007f32:	46bd      	mov	sp, r7
 8007f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f38:	4770      	bx	lr

08007f3a <LL_RCC_LSI1_Enable>:
{
 8007f3a:	b480      	push	{r7}
 8007f3c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8007f3e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007f42:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007f46:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007f4a:	f043 0301 	orr.w	r3, r3, #1
 8007f4e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8007f52:	bf00      	nop
 8007f54:	46bd      	mov	sp, r7
 8007f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f5a:	4770      	bx	lr

08007f5c <LL_RCC_LSI1_Disable>:
{
 8007f5c:	b480      	push	{r7}
 8007f5e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8007f60:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007f64:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007f68:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007f6c:	f023 0301 	bic.w	r3, r3, #1
 8007f70:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8007f74:	bf00      	nop
 8007f76:	46bd      	mov	sp, r7
 8007f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f7c:	4770      	bx	lr

08007f7e <LL_RCC_LSI1_IsReady>:
{
 8007f7e:	b480      	push	{r7}
 8007f80:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 8007f82:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007f86:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007f8a:	f003 0302 	and.w	r3, r3, #2
 8007f8e:	2b02      	cmp	r3, #2
 8007f90:	d101      	bne.n	8007f96 <LL_RCC_LSI1_IsReady+0x18>
 8007f92:	2301      	movs	r3, #1
 8007f94:	e000      	b.n	8007f98 <LL_RCC_LSI1_IsReady+0x1a>
 8007f96:	2300      	movs	r3, #0
}
 8007f98:	4618      	mov	r0, r3
 8007f9a:	46bd      	mov	sp, r7
 8007f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fa0:	4770      	bx	lr

08007fa2 <LL_RCC_LSI2_Enable>:
{
 8007fa2:	b480      	push	{r7}
 8007fa4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8007fa6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007faa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007fae:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007fb2:	f043 0304 	orr.w	r3, r3, #4
 8007fb6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8007fba:	bf00      	nop
 8007fbc:	46bd      	mov	sp, r7
 8007fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fc2:	4770      	bx	lr

08007fc4 <LL_RCC_LSI2_Disable>:
{
 8007fc4:	b480      	push	{r7}
 8007fc6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8007fc8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007fcc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007fd0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007fd4:	f023 0304 	bic.w	r3, r3, #4
 8007fd8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8007fdc:	bf00      	nop
 8007fde:	46bd      	mov	sp, r7
 8007fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fe4:	4770      	bx	lr

08007fe6 <LL_RCC_LSI2_IsReady>:
{
 8007fe6:	b480      	push	{r7}
 8007fe8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8007fea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007fee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007ff2:	f003 0308 	and.w	r3, r3, #8
 8007ff6:	2b08      	cmp	r3, #8
 8007ff8:	d101      	bne.n	8007ffe <LL_RCC_LSI2_IsReady+0x18>
 8007ffa:	2301      	movs	r3, #1
 8007ffc:	e000      	b.n	8008000 <LL_RCC_LSI2_IsReady+0x1a>
 8007ffe:	2300      	movs	r3, #0
}
 8008000:	4618      	mov	r0, r3
 8008002:	46bd      	mov	sp, r7
 8008004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008008:	4770      	bx	lr

0800800a <LL_RCC_LSI2_SetTrimming>:
{
 800800a:	b480      	push	{r7}
 800800c:	b083      	sub	sp, #12
 800800e:	af00      	add	r7, sp, #0
 8008010:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 8008012:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008016:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800801a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	021b      	lsls	r3, r3, #8
 8008022:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008026:	4313      	orrs	r3, r2
 8008028:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 800802c:	bf00      	nop
 800802e:	370c      	adds	r7, #12
 8008030:	46bd      	mov	sp, r7
 8008032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008036:	4770      	bx	lr

08008038 <LL_RCC_MSI_Enable>:
{
 8008038:	b480      	push	{r7}
 800803a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 800803c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008046:	f043 0301 	orr.w	r3, r3, #1
 800804a:	6013      	str	r3, [r2, #0]
}
 800804c:	bf00      	nop
 800804e:	46bd      	mov	sp, r7
 8008050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008054:	4770      	bx	lr

08008056 <LL_RCC_MSI_Disable>:
{
 8008056:	b480      	push	{r7}
 8008058:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 800805a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008064:	f023 0301 	bic.w	r3, r3, #1
 8008068:	6013      	str	r3, [r2, #0]
}
 800806a:	bf00      	nop
 800806c:	46bd      	mov	sp, r7
 800806e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008072:	4770      	bx	lr

08008074 <LL_RCC_MSI_IsReady>:
{
 8008074:	b480      	push	{r7}
 8008076:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8008078:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	f003 0302 	and.w	r3, r3, #2
 8008082:	2b02      	cmp	r3, #2
 8008084:	d101      	bne.n	800808a <LL_RCC_MSI_IsReady+0x16>
 8008086:	2301      	movs	r3, #1
 8008088:	e000      	b.n	800808c <LL_RCC_MSI_IsReady+0x18>
 800808a:	2300      	movs	r3, #0
}
 800808c:	4618      	mov	r0, r3
 800808e:	46bd      	mov	sp, r7
 8008090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008094:	4770      	bx	lr

08008096 <LL_RCC_MSI_SetRange>:
{
 8008096:	b480      	push	{r7}
 8008098:	b083      	sub	sp, #12
 800809a:	af00      	add	r7, sp, #0
 800809c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 800809e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80080a8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	4313      	orrs	r3, r2
 80080b0:	600b      	str	r3, [r1, #0]
}
 80080b2:	bf00      	nop
 80080b4:	370c      	adds	r7, #12
 80080b6:	46bd      	mov	sp, r7
 80080b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080bc:	4770      	bx	lr

080080be <LL_RCC_MSI_GetRange>:
{
 80080be:	b480      	push	{r7}
 80080c0:	b083      	sub	sp, #12
 80080c2:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 80080c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80080ce:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	2bb0      	cmp	r3, #176	; 0xb0
 80080d4:	d901      	bls.n	80080da <LL_RCC_MSI_GetRange+0x1c>
    msiRange = LL_RCC_MSIRANGE_11;
 80080d6:	23b0      	movs	r3, #176	; 0xb0
 80080d8:	607b      	str	r3, [r7, #4]
  return msiRange;
 80080da:	687b      	ldr	r3, [r7, #4]
}
 80080dc:	4618      	mov	r0, r3
 80080de:	370c      	adds	r7, #12
 80080e0:	46bd      	mov	sp, r7
 80080e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080e6:	4770      	bx	lr

080080e8 <LL_RCC_MSI_SetCalibTrimming>:
{
 80080e8:	b480      	push	{r7}
 80080ea:	b083      	sub	sp, #12
 80080ec:	af00      	add	r7, sp, #0
 80080ee:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 80080f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80080f4:	685b      	ldr	r3, [r3, #4]
 80080f6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	021b      	lsls	r3, r3, #8
 80080fe:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008102:	4313      	orrs	r3, r2
 8008104:	604b      	str	r3, [r1, #4]
}
 8008106:	bf00      	nop
 8008108:	370c      	adds	r7, #12
 800810a:	46bd      	mov	sp, r7
 800810c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008110:	4770      	bx	lr

08008112 <LL_RCC_SetSysClkSource>:
{
 8008112:	b480      	push	{r7}
 8008114:	b083      	sub	sp, #12
 8008116:	af00      	add	r7, sp, #0
 8008118:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 800811a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800811e:	689b      	ldr	r3, [r3, #8]
 8008120:	f023 0203 	bic.w	r2, r3, #3
 8008124:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	4313      	orrs	r3, r2
 800812c:	608b      	str	r3, [r1, #8]
}
 800812e:	bf00      	nop
 8008130:	370c      	adds	r7, #12
 8008132:	46bd      	mov	sp, r7
 8008134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008138:	4770      	bx	lr

0800813a <LL_RCC_GetSysClkSource>:
{
 800813a:	b480      	push	{r7}
 800813c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800813e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008142:	689b      	ldr	r3, [r3, #8]
 8008144:	f003 030c 	and.w	r3, r3, #12
}
 8008148:	4618      	mov	r0, r3
 800814a:	46bd      	mov	sp, r7
 800814c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008150:	4770      	bx	lr

08008152 <LL_RCC_SetAHBPrescaler>:
{
 8008152:	b480      	push	{r7}
 8008154:	b083      	sub	sp, #12
 8008156:	af00      	add	r7, sp, #0
 8008158:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 800815a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800815e:	689b      	ldr	r3, [r3, #8]
 8008160:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008164:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	4313      	orrs	r3, r2
 800816c:	608b      	str	r3, [r1, #8]
}
 800816e:	bf00      	nop
 8008170:	370c      	adds	r7, #12
 8008172:	46bd      	mov	sp, r7
 8008174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008178:	4770      	bx	lr

0800817a <LL_C2_RCC_SetAHBPrescaler>:
{
 800817a:	b480      	push	{r7}
 800817c:	b083      	sub	sp, #12
 800817e:	af00      	add	r7, sp, #0
 8008180:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8008182:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008186:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800818a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800818e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	4313      	orrs	r3, r2
 8008196:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 800819a:	bf00      	nop
 800819c:	370c      	adds	r7, #12
 800819e:	46bd      	mov	sp, r7
 80081a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081a4:	4770      	bx	lr

080081a6 <LL_RCC_SetAHB4Prescaler>:
{
 80081a6:	b480      	push	{r7}
 80081a8:	b083      	sub	sp, #12
 80081aa:	af00      	add	r7, sp, #0
 80081ac:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 80081ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80081b2:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80081b6:	f023 020f 	bic.w	r2, r3, #15
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	091b      	lsrs	r3, r3, #4
 80081be:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80081c2:	4313      	orrs	r3, r2
 80081c4:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 80081c8:	bf00      	nop
 80081ca:	370c      	adds	r7, #12
 80081cc:	46bd      	mov	sp, r7
 80081ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081d2:	4770      	bx	lr

080081d4 <LL_RCC_SetAPB1Prescaler>:
{
 80081d4:	b480      	push	{r7}
 80081d6:	b083      	sub	sp, #12
 80081d8:	af00      	add	r7, sp, #0
 80081da:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 80081dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80081e0:	689b      	ldr	r3, [r3, #8]
 80081e2:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80081e6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	4313      	orrs	r3, r2
 80081ee:	608b      	str	r3, [r1, #8]
}
 80081f0:	bf00      	nop
 80081f2:	370c      	adds	r7, #12
 80081f4:	46bd      	mov	sp, r7
 80081f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081fa:	4770      	bx	lr

080081fc <LL_RCC_SetAPB2Prescaler>:
{
 80081fc:	b480      	push	{r7}
 80081fe:	b083      	sub	sp, #12
 8008200:	af00      	add	r7, sp, #0
 8008202:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8008204:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008208:	689b      	ldr	r3, [r3, #8]
 800820a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800820e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	4313      	orrs	r3, r2
 8008216:	608b      	str	r3, [r1, #8]
}
 8008218:	bf00      	nop
 800821a:	370c      	adds	r7, #12
 800821c:	46bd      	mov	sp, r7
 800821e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008222:	4770      	bx	lr

08008224 <LL_RCC_GetAHBPrescaler>:
{
 8008224:	b480      	push	{r7}
 8008226:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8008228:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800822c:	689b      	ldr	r3, [r3, #8]
 800822e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8008232:	4618      	mov	r0, r3
 8008234:	46bd      	mov	sp, r7
 8008236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800823a:	4770      	bx	lr

0800823c <LL_C2_RCC_GetAHBPrescaler>:
{
 800823c:	b480      	push	{r7}
 800823e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE));
 8008240:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008244:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8008248:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 800824c:	4618      	mov	r0, r3
 800824e:	46bd      	mov	sp, r7
 8008250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008254:	4770      	bx	lr

08008256 <LL_RCC_GetAHB4Prescaler>:
{
 8008256:	b480      	push	{r7}
 8008258:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 800825a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800825e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8008262:	011b      	lsls	r3, r3, #4
 8008264:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8008268:	4618      	mov	r0, r3
 800826a:	46bd      	mov	sp, r7
 800826c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008270:	4770      	bx	lr

08008272 <LL_RCC_GetAPB1Prescaler>:
{
 8008272:	b480      	push	{r7}
 8008274:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8008276:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800827a:	689b      	ldr	r3, [r3, #8]
 800827c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8008280:	4618      	mov	r0, r3
 8008282:	46bd      	mov	sp, r7
 8008284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008288:	4770      	bx	lr

0800828a <LL_RCC_GetAPB2Prescaler>:
{
 800828a:	b480      	push	{r7}
 800828c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 800828e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008292:	689b      	ldr	r3, [r3, #8]
 8008294:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8008298:	4618      	mov	r0, r3
 800829a:	46bd      	mov	sp, r7
 800829c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082a0:	4770      	bx	lr

080082a2 <LL_RCC_PLL_Enable>:
{
 80082a2:	b480      	push	{r7}
 80082a4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 80082a6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80082b0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80082b4:	6013      	str	r3, [r2, #0]
}
 80082b6:	bf00      	nop
 80082b8:	46bd      	mov	sp, r7
 80082ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082be:	4770      	bx	lr

080082c0 <LL_RCC_PLL_Disable>:
{
 80082c0:	b480      	push	{r7}
 80082c2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 80082c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80082ce:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80082d2:	6013      	str	r3, [r2, #0]
}
 80082d4:	bf00      	nop
 80082d6:	46bd      	mov	sp, r7
 80082d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082dc:	4770      	bx	lr

080082de <LL_RCC_PLL_IsReady>:
{
 80082de:	b480      	push	{r7}
 80082e0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 80082e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80082ec:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80082f0:	d101      	bne.n	80082f6 <LL_RCC_PLL_IsReady+0x18>
 80082f2:	2301      	movs	r3, #1
 80082f4:	e000      	b.n	80082f8 <LL_RCC_PLL_IsReady+0x1a>
 80082f6:	2300      	movs	r3, #0
}
 80082f8:	4618      	mov	r0, r3
 80082fa:	46bd      	mov	sp, r7
 80082fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008300:	4770      	bx	lr

08008302 <LL_RCC_PLL_GetN>:
{
 8008302:	b480      	push	{r7}
 8008304:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8008306:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800830a:	68db      	ldr	r3, [r3, #12]
 800830c:	0a1b      	lsrs	r3, r3, #8
 800830e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8008312:	4618      	mov	r0, r3
 8008314:	46bd      	mov	sp, r7
 8008316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800831a:	4770      	bx	lr

0800831c <LL_RCC_PLL_GetR>:
{
 800831c:	b480      	push	{r7}
 800831e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8008320:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008324:	68db      	ldr	r3, [r3, #12]
 8008326:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 800832a:	4618      	mov	r0, r3
 800832c:	46bd      	mov	sp, r7
 800832e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008332:	4770      	bx	lr

08008334 <LL_RCC_PLL_GetDivider>:
{
 8008334:	b480      	push	{r7}
 8008336:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8008338:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800833c:	68db      	ldr	r3, [r3, #12]
 800833e:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8008342:	4618      	mov	r0, r3
 8008344:	46bd      	mov	sp, r7
 8008346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800834a:	4770      	bx	lr

0800834c <LL_RCC_PLL_GetMainSource>:
{
 800834c:	b480      	push	{r7}
 800834e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8008350:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008354:	68db      	ldr	r3, [r3, #12]
 8008356:	f003 0303 	and.w	r3, r3, #3
}
 800835a:	4618      	mov	r0, r3
 800835c:	46bd      	mov	sp, r7
 800835e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008362:	4770      	bx	lr

08008364 <LL_RCC_IsActiveFlag_HPRE>:
{
 8008364:	b480      	push	{r7}
 8008366:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8008368:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800836c:	689b      	ldr	r3, [r3, #8]
 800836e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008372:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008376:	d101      	bne.n	800837c <LL_RCC_IsActiveFlag_HPRE+0x18>
 8008378:	2301      	movs	r3, #1
 800837a:	e000      	b.n	800837e <LL_RCC_IsActiveFlag_HPRE+0x1a>
 800837c:	2300      	movs	r3, #0
}
 800837e:	4618      	mov	r0, r3
 8008380:	46bd      	mov	sp, r7
 8008382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008386:	4770      	bx	lr

08008388 <LL_RCC_IsActiveFlag_C2HPRE>:
{
 8008388:	b480      	push	{r7}
 800838a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 800838c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008390:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8008394:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008398:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800839c:	d101      	bne.n	80083a2 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 800839e:	2301      	movs	r3, #1
 80083a0:	e000      	b.n	80083a4 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 80083a2:	2300      	movs	r3, #0
}
 80083a4:	4618      	mov	r0, r3
 80083a6:	46bd      	mov	sp, r7
 80083a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ac:	4770      	bx	lr

080083ae <LL_RCC_IsActiveFlag_SHDHPRE>:
{
 80083ae:	b480      	push	{r7}
 80083b0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 80083b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80083b6:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80083ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80083be:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80083c2:	d101      	bne.n	80083c8 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 80083c4:	2301      	movs	r3, #1
 80083c6:	e000      	b.n	80083ca <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 80083c8:	2300      	movs	r3, #0
}
 80083ca:	4618      	mov	r0, r3
 80083cc:	46bd      	mov	sp, r7
 80083ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083d2:	4770      	bx	lr

080083d4 <LL_RCC_IsActiveFlag_PPRE1>:
{
 80083d4:	b480      	push	{r7}
 80083d6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 80083d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80083dc:	689b      	ldr	r3, [r3, #8]
 80083de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80083e2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80083e6:	d101      	bne.n	80083ec <LL_RCC_IsActiveFlag_PPRE1+0x18>
 80083e8:	2301      	movs	r3, #1
 80083ea:	e000      	b.n	80083ee <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 80083ec:	2300      	movs	r3, #0
}
 80083ee:	4618      	mov	r0, r3
 80083f0:	46bd      	mov	sp, r7
 80083f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083f6:	4770      	bx	lr

080083f8 <LL_RCC_IsActiveFlag_PPRE2>:
{
 80083f8:	b480      	push	{r7}
 80083fa:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 80083fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008400:	689b      	ldr	r3, [r3, #8]
 8008402:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008406:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800840a:	d101      	bne.n	8008410 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 800840c:	2301      	movs	r3, #1
 800840e:	e000      	b.n	8008412 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8008410:	2300      	movs	r3, #0
}
 8008412:	4618      	mov	r0, r3
 8008414:	46bd      	mov	sp, r7
 8008416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800841a:	4770      	bx	lr

0800841c <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800841c:	b590      	push	{r4, r7, lr}
 800841e:	b08d      	sub	sp, #52	; 0x34
 8008420:	af00      	add	r7, sp, #0
 8008422:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	2b00      	cmp	r3, #0
 8008428:	d101      	bne.n	800842e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800842a:	2301      	movs	r3, #1
 800842c:	e37e      	b.n	8008b2c <HAL_RCC_OscConfig+0x710>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	f003 0320 	and.w	r3, r3, #32
 8008436:	2b00      	cmp	r3, #0
 8008438:	f000 8092 	beq.w	8008560 <HAL_RCC_OscConfig+0x144>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800843c:	f7ff fe7d 	bl	800813a <LL_RCC_GetSysClkSource>
 8008440:	62f8      	str	r0, [r7, #44]	; 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8008442:	f7ff ff83 	bl	800834c <LL_RCC_PLL_GetMainSource>
 8008446:	62b8      	str	r0, [r7, #40]	; 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8008448:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800844a:	2b00      	cmp	r3, #0
 800844c:	d005      	beq.n	800845a <HAL_RCC_OscConfig+0x3e>
 800844e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008450:	2b0c      	cmp	r3, #12
 8008452:	d14c      	bne.n	80084ee <HAL_RCC_OscConfig+0xd2>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 8008454:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008456:	2b01      	cmp	r3, #1
 8008458:	d149      	bne.n	80084ee <HAL_RCC_OscConfig+0xd2>
    {
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800845a:	f7ff fe0b 	bl	8008074 <LL_RCC_MSI_IsReady>
 800845e:	4603      	mov	r3, r0
 8008460:	2b00      	cmp	r3, #0
 8008462:	d005      	beq.n	8008470 <HAL_RCC_OscConfig+0x54>
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	69db      	ldr	r3, [r3, #28]
 8008468:	2b00      	cmp	r3, #0
 800846a:	d101      	bne.n	8008470 <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 800846c:	2301      	movs	r3, #1
 800846e:	e35d      	b.n	8008b2c <HAL_RCC_OscConfig+0x710>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8008474:	f7ff fe23 	bl	80080be <LL_RCC_MSI_GetRange>
 8008478:	4603      	mov	r3, r0
 800847a:	429c      	cmp	r4, r3
 800847c:	d914      	bls.n	80084a8 <HAL_RCC_OscConfig+0x8c>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008482:	4618      	mov	r0, r3
 8008484:	f000 fd5c 	bl	8008f40 <RCC_SetFlashLatencyFromMSIRange>
 8008488:	4603      	mov	r3, r0
 800848a:	2b00      	cmp	r3, #0
 800848c:	d001      	beq.n	8008492 <HAL_RCC_OscConfig+0x76>
          {
            return HAL_ERROR;
 800848e:	2301      	movs	r3, #1
 8008490:	e34c      	b.n	8008b2c <HAL_RCC_OscConfig+0x710>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008496:	4618      	mov	r0, r3
 8008498:	f7ff fdfd 	bl	8008096 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	6a1b      	ldr	r3, [r3, #32]
 80084a0:	4618      	mov	r0, r3
 80084a2:	f7ff fe21 	bl	80080e8 <LL_RCC_MSI_SetCalibTrimming>
 80084a6:	e013      	b.n	80084d0 <HAL_RCC_OscConfig+0xb4>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084ac:	4618      	mov	r0, r3
 80084ae:	f7ff fdf2 	bl	8008096 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	6a1b      	ldr	r3, [r3, #32]
 80084b6:	4618      	mov	r0, r3
 80084b8:	f7ff fe16 	bl	80080e8 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084c0:	4618      	mov	r0, r3
 80084c2:	f000 fd3d 	bl	8008f40 <RCC_SetFlashLatencyFromMSIRange>
 80084c6:	4603      	mov	r3, r0
 80084c8:	2b00      	cmp	r3, #0
 80084ca:	d001      	beq.n	80084d0 <HAL_RCC_OscConfig+0xb4>
          {
            return HAL_ERROR;
 80084cc:	2301      	movs	r3, #1
 80084ce:	e32d      	b.n	8008b2c <HAL_RCC_OscConfig+0x710>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80084d0:	f000 fcda 	bl	8008e88 <HAL_RCC_GetHCLKFreq>
 80084d4:	4602      	mov	r2, r0
 80084d6:	4bb3      	ldr	r3, [pc, #716]	; (80087a4 <HAL_RCC_OscConfig+0x388>)
 80084d8:	601a      	str	r2, [r3, #0]
        
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80084da:	4bb3      	ldr	r3, [pc, #716]	; (80087a8 <HAL_RCC_OscConfig+0x38c>)
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	4618      	mov	r0, r3
 80084e0:	f7fd fb6e 	bl	8005bc0 <HAL_InitTick>
 80084e4:	4603      	mov	r3, r0
 80084e6:	2b00      	cmp	r3, #0
 80084e8:	d039      	beq.n	800855e <HAL_RCC_OscConfig+0x142>
        {
          return HAL_ERROR;
 80084ea:	2301      	movs	r3, #1
 80084ec:	e31e      	b.n	8008b2c <HAL_RCC_OscConfig+0x710>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	69db      	ldr	r3, [r3, #28]
 80084f2:	2b00      	cmp	r3, #0
 80084f4:	d01e      	beq.n	8008534 <HAL_RCC_OscConfig+0x118>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80084f6:	f7ff fd9f 	bl	8008038 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 80084fa:	f7fe f8b3 	bl	8006664 <HAL_GetTick>
 80084fe:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8008500:	e008      	b.n	8008514 <HAL_RCC_OscConfig+0xf8>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8008502:	f7fe f8af 	bl	8006664 <HAL_GetTick>
 8008506:	4602      	mov	r2, r0
 8008508:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800850a:	1ad3      	subs	r3, r2, r3
 800850c:	2b02      	cmp	r3, #2
 800850e:	d901      	bls.n	8008514 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8008510:	2303      	movs	r3, #3
 8008512:	e30b      	b.n	8008b2c <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_MSI_IsReady() == 0U)
 8008514:	f7ff fdae 	bl	8008074 <LL_RCC_MSI_IsReady>
 8008518:	4603      	mov	r3, r0
 800851a:	2b00      	cmp	r3, #0
 800851c:	d0f1      	beq.n	8008502 <HAL_RCC_OscConfig+0xe6>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008522:	4618      	mov	r0, r3
 8008524:	f7ff fdb7 	bl	8008096 <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	6a1b      	ldr	r3, [r3, #32]
 800852c:	4618      	mov	r0, r3
 800852e:	f7ff fddb 	bl	80080e8 <LL_RCC_MSI_SetCalibTrimming>
 8008532:	e015      	b.n	8008560 <HAL_RCC_OscConfig+0x144>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8008534:	f7ff fd8f 	bl	8008056 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8008538:	f7fe f894 	bl	8006664 <HAL_GetTick>
 800853c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 800853e:	e008      	b.n	8008552 <HAL_RCC_OscConfig+0x136>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8008540:	f7fe f890 	bl	8006664 <HAL_GetTick>
 8008544:	4602      	mov	r2, r0
 8008546:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008548:	1ad3      	subs	r3, r2, r3
 800854a:	2b02      	cmp	r3, #2
 800854c:	d901      	bls.n	8008552 <HAL_RCC_OscConfig+0x136>
          {
            return HAL_TIMEOUT;
 800854e:	2303      	movs	r3, #3
 8008550:	e2ec      	b.n	8008b2c <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_MSI_IsReady() != 0U)
 8008552:	f7ff fd8f 	bl	8008074 <LL_RCC_MSI_IsReady>
 8008556:	4603      	mov	r3, r0
 8008558:	2b00      	cmp	r3, #0
 800855a:	d1f1      	bne.n	8008540 <HAL_RCC_OscConfig+0x124>
 800855c:	e000      	b.n	8008560 <HAL_RCC_OscConfig+0x144>
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800855e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	f003 0301 	and.w	r3, r3, #1
 8008568:	2b00      	cmp	r3, #0
 800856a:	d04e      	beq.n	800860a <HAL_RCC_OscConfig+0x1ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800856c:	f7ff fde5 	bl	800813a <LL_RCC_GetSysClkSource>
 8008570:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8008572:	f7ff feeb 	bl	800834c <LL_RCC_PLL_GetMainSource>
 8008576:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8008578:	6a3b      	ldr	r3, [r7, #32]
 800857a:	2b08      	cmp	r3, #8
 800857c:	d005      	beq.n	800858a <HAL_RCC_OscConfig+0x16e>
 800857e:	6a3b      	ldr	r3, [r7, #32]
 8008580:	2b0c      	cmp	r3, #12
 8008582:	d10d      	bne.n	80085a0 <HAL_RCC_OscConfig+0x184>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 8008584:	69fb      	ldr	r3, [r7, #28]
 8008586:	2b03      	cmp	r3, #3
 8008588:	d10a      	bne.n	80085a0 <HAL_RCC_OscConfig+0x184>
    {
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800858a:	f7ff fbf5 	bl	8007d78 <LL_RCC_HSE_IsReady>
 800858e:	4603      	mov	r3, r0
 8008590:	2b00      	cmp	r3, #0
 8008592:	d039      	beq.n	8008608 <HAL_RCC_OscConfig+0x1ec>
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	685b      	ldr	r3, [r3, #4]
 8008598:	2b00      	cmp	r3, #0
 800859a:	d135      	bne.n	8008608 <HAL_RCC_OscConfig+0x1ec>
      {
        return HAL_ERROR;
 800859c:	2301      	movs	r3, #1
 800859e:	e2c5      	b.n	8008b2c <HAL_RCC_OscConfig+0x710>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	685b      	ldr	r3, [r3, #4]
 80085a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80085a8:	d102      	bne.n	80085b0 <HAL_RCC_OscConfig+0x194>
 80085aa:	f7ff fbc7 	bl	8007d3c <LL_RCC_HSE_Enable>
 80085ae:	e001      	b.n	80085b4 <HAL_RCC_OscConfig+0x198>
 80085b0:	f7ff fbd3 	bl	8007d5a <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	685b      	ldr	r3, [r3, #4]
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	d012      	beq.n	80085e2 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80085bc:	f7fe f852 	bl	8006664 <HAL_GetTick>
 80085c0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 80085c2:	e008      	b.n	80085d6 <HAL_RCC_OscConfig+0x1ba>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80085c4:	f7fe f84e 	bl	8006664 <HAL_GetTick>
 80085c8:	4602      	mov	r2, r0
 80085ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085cc:	1ad3      	subs	r3, r2, r3
 80085ce:	2b64      	cmp	r3, #100	; 0x64
 80085d0:	d901      	bls.n	80085d6 <HAL_RCC_OscConfig+0x1ba>
          {
            return HAL_TIMEOUT;
 80085d2:	2303      	movs	r3, #3
 80085d4:	e2aa      	b.n	8008b2c <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_HSE_IsReady() == 0U)
 80085d6:	f7ff fbcf 	bl	8007d78 <LL_RCC_HSE_IsReady>
 80085da:	4603      	mov	r3, r0
 80085dc:	2b00      	cmp	r3, #0
 80085de:	d0f1      	beq.n	80085c4 <HAL_RCC_OscConfig+0x1a8>
 80085e0:	e013      	b.n	800860a <HAL_RCC_OscConfig+0x1ee>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80085e2:	f7fe f83f 	bl	8006664 <HAL_GetTick>
 80085e6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 80085e8:	e008      	b.n	80085fc <HAL_RCC_OscConfig+0x1e0>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80085ea:	f7fe f83b 	bl	8006664 <HAL_GetTick>
 80085ee:	4602      	mov	r2, r0
 80085f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085f2:	1ad3      	subs	r3, r2, r3
 80085f4:	2b64      	cmp	r3, #100	; 0x64
 80085f6:	d901      	bls.n	80085fc <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 80085f8:	2303      	movs	r3, #3
 80085fa:	e297      	b.n	8008b2c <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_HSE_IsReady() != 0U)
 80085fc:	f7ff fbbc 	bl	8007d78 <LL_RCC_HSE_IsReady>
 8008600:	4603      	mov	r3, r0
 8008602:	2b00      	cmp	r3, #0
 8008604:	d1f1      	bne.n	80085ea <HAL_RCC_OscConfig+0x1ce>
 8008606:	e000      	b.n	800860a <HAL_RCC_OscConfig+0x1ee>
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008608:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	f003 0302 	and.w	r3, r3, #2
 8008612:	2b00      	cmp	r3, #0
 8008614:	d051      	beq.n	80086ba <HAL_RCC_OscConfig+0x29e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008616:	f7ff fd90 	bl	800813a <LL_RCC_GetSysClkSource>
 800861a:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800861c:	f7ff fe96 	bl	800834c <LL_RCC_PLL_GetMainSource>
 8008620:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8008622:	69bb      	ldr	r3, [r7, #24]
 8008624:	2b04      	cmp	r3, #4
 8008626:	d005      	beq.n	8008634 <HAL_RCC_OscConfig+0x218>
 8008628:	69bb      	ldr	r3, [r7, #24]
 800862a:	2b0c      	cmp	r3, #12
 800862c:	d113      	bne.n	8008656 <HAL_RCC_OscConfig+0x23a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 800862e:	697b      	ldr	r3, [r7, #20]
 8008630:	2b02      	cmp	r3, #2
 8008632:	d110      	bne.n	8008656 <HAL_RCC_OscConfig+0x23a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008634:	f7ff fbd0 	bl	8007dd8 <LL_RCC_HSI_IsReady>
 8008638:	4603      	mov	r3, r0
 800863a:	2b00      	cmp	r3, #0
 800863c:	d005      	beq.n	800864a <HAL_RCC_OscConfig+0x22e>
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	68db      	ldr	r3, [r3, #12]
 8008642:	2b00      	cmp	r3, #0
 8008644:	d101      	bne.n	800864a <HAL_RCC_OscConfig+0x22e>
      {
        return HAL_ERROR;
 8008646:	2301      	movs	r3, #1
 8008648:	e270      	b.n	8008b2c <HAL_RCC_OscConfig+0x710>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	691b      	ldr	r3, [r3, #16]
 800864e:	4618      	mov	r0, r3
 8008650:	f7ff fbd4 	bl	8007dfc <LL_RCC_HSI_SetCalibTrimming>
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008654:	e031      	b.n	80086ba <HAL_RCC_OscConfig+0x29e>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	68db      	ldr	r3, [r3, #12]
 800865a:	2b00      	cmp	r3, #0
 800865c:	d019      	beq.n	8008692 <HAL_RCC_OscConfig+0x276>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800865e:	f7ff fb9d 	bl	8007d9c <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008662:	f7fd ffff 	bl	8006664 <HAL_GetTick>
 8008666:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8008668:	e008      	b.n	800867c <HAL_RCC_OscConfig+0x260>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800866a:	f7fd fffb 	bl	8006664 <HAL_GetTick>
 800866e:	4602      	mov	r2, r0
 8008670:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008672:	1ad3      	subs	r3, r2, r3
 8008674:	2b02      	cmp	r3, #2
 8008676:	d901      	bls.n	800867c <HAL_RCC_OscConfig+0x260>
          {
            return HAL_TIMEOUT;
 8008678:	2303      	movs	r3, #3
 800867a:	e257      	b.n	8008b2c <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_HSI_IsReady() == 0U)
 800867c:	f7ff fbac 	bl	8007dd8 <LL_RCC_HSI_IsReady>
 8008680:	4603      	mov	r3, r0
 8008682:	2b00      	cmp	r3, #0
 8008684:	d0f1      	beq.n	800866a <HAL_RCC_OscConfig+0x24e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	691b      	ldr	r3, [r3, #16]
 800868a:	4618      	mov	r0, r3
 800868c:	f7ff fbb6 	bl	8007dfc <LL_RCC_HSI_SetCalibTrimming>
 8008690:	e013      	b.n	80086ba <HAL_RCC_OscConfig+0x29e>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008692:	f7ff fb92 	bl	8007dba <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008696:	f7fd ffe5 	bl	8006664 <HAL_GetTick>
 800869a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 800869c:	e008      	b.n	80086b0 <HAL_RCC_OscConfig+0x294>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800869e:	f7fd ffe1 	bl	8006664 <HAL_GetTick>
 80086a2:	4602      	mov	r2, r0
 80086a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086a6:	1ad3      	subs	r3, r2, r3
 80086a8:	2b02      	cmp	r3, #2
 80086aa:	d901      	bls.n	80086b0 <HAL_RCC_OscConfig+0x294>
          {
            return HAL_TIMEOUT;
 80086ac:	2303      	movs	r3, #3
 80086ae:	e23d      	b.n	8008b2c <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_HSI_IsReady() != 0U)
 80086b0:	f7ff fb92 	bl	8007dd8 <LL_RCC_HSI_IsReady>
 80086b4:	4603      	mov	r3, r0
 80086b6:	2b00      	cmp	r3, #0
 80086b8:	d1f1      	bne.n	800869e <HAL_RCC_OscConfig+0x282>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	681b      	ldr	r3, [r3, #0]
 80086be:	f003 0308 	and.w	r3, r3, #8
 80086c2:	2b00      	cmp	r3, #0
 80086c4:	d106      	bne.n	80086d4 <HAL_RCC_OscConfig+0x2b8>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 80086ce:	2b00      	cmp	r3, #0
 80086d0:	f000 80a3 	beq.w	800881a <HAL_RCC_OscConfig+0x3fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	695b      	ldr	r3, [r3, #20]
 80086d8:	2b00      	cmp	r3, #0
 80086da:	d076      	beq.n	80087ca <HAL_RCC_OscConfig+0x3ae>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	f003 0310 	and.w	r3, r3, #16
 80086e4:	2b00      	cmp	r3, #0
 80086e6:	d046      	beq.n	8008776 <HAL_RCC_OscConfig+0x35a>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 80086e8:	f7ff fc49 	bl	8007f7e <LL_RCC_LSI1_IsReady>
 80086ec:	4603      	mov	r3, r0
 80086ee:	2b00      	cmp	r3, #0
 80086f0:	d113      	bne.n	800871a <HAL_RCC_OscConfig+0x2fe>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 80086f2:	f7ff fc22 	bl	8007f3a <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80086f6:	f7fd ffb5 	bl	8006664 <HAL_GetTick>
 80086fa:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 80086fc:	e008      	b.n	8008710 <HAL_RCC_OscConfig+0x2f4>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80086fe:	f7fd ffb1 	bl	8006664 <HAL_GetTick>
 8008702:	4602      	mov	r2, r0
 8008704:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008706:	1ad3      	subs	r3, r2, r3
 8008708:	2b02      	cmp	r3, #2
 800870a:	d901      	bls.n	8008710 <HAL_RCC_OscConfig+0x2f4>
            {
              return HAL_TIMEOUT;
 800870c:	2303      	movs	r3, #3
 800870e:	e20d      	b.n	8008b2c <HAL_RCC_OscConfig+0x710>
          while (LL_RCC_LSI1_IsReady() == 0U)
 8008710:	f7ff fc35 	bl	8007f7e <LL_RCC_LSI1_IsReady>
 8008714:	4603      	mov	r3, r0
 8008716:	2b00      	cmp	r3, #0
 8008718:	d0f1      	beq.n	80086fe <HAL_RCC_OscConfig+0x2e2>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 800871a:	f7ff fc42 	bl	8007fa2 <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800871e:	f7fd ffa1 	bl	8006664 <HAL_GetTick>
 8008722:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 8008724:	e008      	b.n	8008738 <HAL_RCC_OscConfig+0x31c>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8008726:	f7fd ff9d 	bl	8006664 <HAL_GetTick>
 800872a:	4602      	mov	r2, r0
 800872c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800872e:	1ad3      	subs	r3, r2, r3
 8008730:	2b03      	cmp	r3, #3
 8008732:	d901      	bls.n	8008738 <HAL_RCC_OscConfig+0x31c>
          {
            return HAL_TIMEOUT;
 8008734:	2303      	movs	r3, #3
 8008736:	e1f9      	b.n	8008b2c <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_LSI2_IsReady() == 0U)
 8008738:	f7ff fc55 	bl	8007fe6 <LL_RCC_LSI2_IsReady>
 800873c:	4603      	mov	r3, r0
 800873e:	2b00      	cmp	r3, #0
 8008740:	d0f1      	beq.n	8008726 <HAL_RCC_OscConfig+0x30a>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	699b      	ldr	r3, [r3, #24]
 8008746:	4618      	mov	r0, r3
 8008748:	f7ff fc5f 	bl	800800a <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 800874c:	f7ff fc06 	bl	8007f5c <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008750:	f7fd ff88 	bl	8006664 <HAL_GetTick>
 8008754:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 8008756:	e008      	b.n	800876a <HAL_RCC_OscConfig+0x34e>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8008758:	f7fd ff84 	bl	8006664 <HAL_GetTick>
 800875c:	4602      	mov	r2, r0
 800875e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008760:	1ad3      	subs	r3, r2, r3
 8008762:	2b02      	cmp	r3, #2
 8008764:	d901      	bls.n	800876a <HAL_RCC_OscConfig+0x34e>
          {
            return HAL_TIMEOUT;
 8008766:	2303      	movs	r3, #3
 8008768:	e1e0      	b.n	8008b2c <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_LSI1_IsReady() != 0U)
 800876a:	f7ff fc08 	bl	8007f7e <LL_RCC_LSI1_IsReady>
 800876e:	4603      	mov	r3, r0
 8008770:	2b00      	cmp	r3, #0
 8008772:	d1f1      	bne.n	8008758 <HAL_RCC_OscConfig+0x33c>
 8008774:	e051      	b.n	800881a <HAL_RCC_OscConfig+0x3fe>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 8008776:	f7ff fbe0 	bl	8007f3a <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800877a:	f7fd ff73 	bl	8006664 <HAL_GetTick>
 800877e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 8008780:	e008      	b.n	8008794 <HAL_RCC_OscConfig+0x378>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8008782:	f7fd ff6f 	bl	8006664 <HAL_GetTick>
 8008786:	4602      	mov	r2, r0
 8008788:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800878a:	1ad3      	subs	r3, r2, r3
 800878c:	2b02      	cmp	r3, #2
 800878e:	d901      	bls.n	8008794 <HAL_RCC_OscConfig+0x378>
          {
            return HAL_TIMEOUT;
 8008790:	2303      	movs	r3, #3
 8008792:	e1cb      	b.n	8008b2c <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_LSI1_IsReady() == 0U)
 8008794:	f7ff fbf3 	bl	8007f7e <LL_RCC_LSI1_IsReady>
 8008798:	4603      	mov	r3, r0
 800879a:	2b00      	cmp	r3, #0
 800879c:	d0f1      	beq.n	8008782 <HAL_RCC_OscConfig+0x366>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 800879e:	f7ff fc11 	bl	8007fc4 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 80087a2:	e00c      	b.n	80087be <HAL_RCC_OscConfig+0x3a2>
 80087a4:	20000014 	.word	0x20000014
 80087a8:	20000018 	.word	0x20000018
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80087ac:	f7fd ff5a 	bl	8006664 <HAL_GetTick>
 80087b0:	4602      	mov	r2, r0
 80087b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087b4:	1ad3      	subs	r3, r2, r3
 80087b6:	2b03      	cmp	r3, #3
 80087b8:	d901      	bls.n	80087be <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 80087ba:	2303      	movs	r3, #3
 80087bc:	e1b6      	b.n	8008b2c <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_LSI2_IsReady() != 0U)
 80087be:	f7ff fc12 	bl	8007fe6 <LL_RCC_LSI2_IsReady>
 80087c2:	4603      	mov	r3, r0
 80087c4:	2b00      	cmp	r3, #0
 80087c6:	d1f1      	bne.n	80087ac <HAL_RCC_OscConfig+0x390>
 80087c8:	e027      	b.n	800881a <HAL_RCC_OscConfig+0x3fe>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 80087ca:	f7ff fbfb 	bl	8007fc4 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80087ce:	f7fd ff49 	bl	8006664 <HAL_GetTick>
 80087d2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 80087d4:	e008      	b.n	80087e8 <HAL_RCC_OscConfig+0x3cc>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80087d6:	f7fd ff45 	bl	8006664 <HAL_GetTick>
 80087da:	4602      	mov	r2, r0
 80087dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087de:	1ad3      	subs	r3, r2, r3
 80087e0:	2b03      	cmp	r3, #3
 80087e2:	d901      	bls.n	80087e8 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80087e4:	2303      	movs	r3, #3
 80087e6:	e1a1      	b.n	8008b2c <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_LSI2_IsReady() != 0U)
 80087e8:	f7ff fbfd 	bl	8007fe6 <LL_RCC_LSI2_IsReady>
 80087ec:	4603      	mov	r3, r0
 80087ee:	2b00      	cmp	r3, #0
 80087f0:	d1f1      	bne.n	80087d6 <HAL_RCC_OscConfig+0x3ba>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 80087f2:	f7ff fbb3 	bl	8007f5c <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80087f6:	f7fd ff35 	bl	8006664 <HAL_GetTick>
 80087fa:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 80087fc:	e008      	b.n	8008810 <HAL_RCC_OscConfig+0x3f4>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80087fe:	f7fd ff31 	bl	8006664 <HAL_GetTick>
 8008802:	4602      	mov	r2, r0
 8008804:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008806:	1ad3      	subs	r3, r2, r3
 8008808:	2b02      	cmp	r3, #2
 800880a:	d901      	bls.n	8008810 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 800880c:	2303      	movs	r3, #3
 800880e:	e18d      	b.n	8008b2c <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_LSI1_IsReady() != 0U)
 8008810:	f7ff fbb5 	bl	8007f7e <LL_RCC_LSI1_IsReady>
 8008814:	4603      	mov	r3, r0
 8008816:	2b00      	cmp	r3, #0
 8008818:	d1f1      	bne.n	80087fe <HAL_RCC_OscConfig+0x3e2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	f003 0304 	and.w	r3, r3, #4
 8008822:	2b00      	cmp	r3, #0
 8008824:	d05b      	beq.n	80088de <HAL_RCC_OscConfig+0x4c2>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008826:	4bb5      	ldr	r3, [pc, #724]	; (8008afc <HAL_RCC_OscConfig+0x6e0>)
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800882e:	2b00      	cmp	r3, #0
 8008830:	d114      	bne.n	800885c <HAL_RCC_OscConfig+0x440>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8008832:	f7ff fa53 	bl	8007cdc <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008836:	f7fd ff15 	bl	8006664 <HAL_GetTick>
 800883a:	6278      	str	r0, [r7, #36]	; 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800883c:	e008      	b.n	8008850 <HAL_RCC_OscConfig+0x434>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800883e:	f7fd ff11 	bl	8006664 <HAL_GetTick>
 8008842:	4602      	mov	r2, r0
 8008844:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008846:	1ad3      	subs	r3, r2, r3
 8008848:	2b02      	cmp	r3, #2
 800884a:	d901      	bls.n	8008850 <HAL_RCC_OscConfig+0x434>
        {
          return HAL_TIMEOUT;
 800884c:	2303      	movs	r3, #3
 800884e:	e16d      	b.n	8008b2c <HAL_RCC_OscConfig+0x710>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008850:	4baa      	ldr	r3, [pc, #680]	; (8008afc <HAL_RCC_OscConfig+0x6e0>)
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008858:	2b00      	cmp	r3, #0
 800885a:	d0f0      	beq.n	800883e <HAL_RCC_OscConfig+0x422>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	689b      	ldr	r3, [r3, #8]
 8008860:	2b01      	cmp	r3, #1
 8008862:	d102      	bne.n	800886a <HAL_RCC_OscConfig+0x44e>
 8008864:	f7ff fb13 	bl	8007e8e <LL_RCC_LSE_Enable>
 8008868:	e00c      	b.n	8008884 <HAL_RCC_OscConfig+0x468>
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	689b      	ldr	r3, [r3, #8]
 800886e:	2b05      	cmp	r3, #5
 8008870:	d104      	bne.n	800887c <HAL_RCC_OscConfig+0x460>
 8008872:	f7ff fb2e 	bl	8007ed2 <LL_RCC_LSE_EnableBypass>
 8008876:	f7ff fb0a 	bl	8007e8e <LL_RCC_LSE_Enable>
 800887a:	e003      	b.n	8008884 <HAL_RCC_OscConfig+0x468>
 800887c:	f7ff fb18 	bl	8007eb0 <LL_RCC_LSE_Disable>
 8008880:	f7ff fb38 	bl	8007ef4 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	689b      	ldr	r3, [r3, #8]
 8008888:	2b00      	cmp	r3, #0
 800888a:	d014      	beq.n	80088b6 <HAL_RCC_OscConfig+0x49a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800888c:	f7fd feea 	bl	8006664 <HAL_GetTick>
 8008890:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8008892:	e00a      	b.n	80088aa <HAL_RCC_OscConfig+0x48e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008894:	f7fd fee6 	bl	8006664 <HAL_GetTick>
 8008898:	4602      	mov	r2, r0
 800889a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800889c:	1ad3      	subs	r3, r2, r3
 800889e:	f241 3288 	movw	r2, #5000	; 0x1388
 80088a2:	4293      	cmp	r3, r2
 80088a4:	d901      	bls.n	80088aa <HAL_RCC_OscConfig+0x48e>
        {
          return HAL_TIMEOUT;
 80088a6:	2303      	movs	r3, #3
 80088a8:	e140      	b.n	8008b2c <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_LSE_IsReady() == 0U)
 80088aa:	f7ff fb34 	bl	8007f16 <LL_RCC_LSE_IsReady>
 80088ae:	4603      	mov	r3, r0
 80088b0:	2b00      	cmp	r3, #0
 80088b2:	d0ef      	beq.n	8008894 <HAL_RCC_OscConfig+0x478>
 80088b4:	e013      	b.n	80088de <HAL_RCC_OscConfig+0x4c2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80088b6:	f7fd fed5 	bl	8006664 <HAL_GetTick>
 80088ba:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 80088bc:	e00a      	b.n	80088d4 <HAL_RCC_OscConfig+0x4b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80088be:	f7fd fed1 	bl	8006664 <HAL_GetTick>
 80088c2:	4602      	mov	r2, r0
 80088c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088c6:	1ad3      	subs	r3, r2, r3
 80088c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80088cc:	4293      	cmp	r3, r2
 80088ce:	d901      	bls.n	80088d4 <HAL_RCC_OscConfig+0x4b8>
        {
          return HAL_TIMEOUT;
 80088d0:	2303      	movs	r3, #3
 80088d2:	e12b      	b.n	8008b2c <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_LSE_IsReady() != 0U)
 80088d4:	f7ff fb1f 	bl	8007f16 <LL_RCC_LSE_IsReady>
 80088d8:	4603      	mov	r3, r0
 80088da:	2b00      	cmp	r3, #0
 80088dc:	d1ef      	bne.n	80088be <HAL_RCC_OscConfig+0x4a2>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80088e6:	2b00      	cmp	r3, #0
 80088e8:	d02c      	beq.n	8008944 <HAL_RCC_OscConfig+0x528>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80088ee:	2b00      	cmp	r3, #0
 80088f0:	d014      	beq.n	800891c <HAL_RCC_OscConfig+0x500>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80088f2:	f7ff fa98 	bl	8007e26 <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80088f6:	f7fd feb5 	bl	8006664 <HAL_GetTick>
 80088fa:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 80088fc:	e008      	b.n	8008910 <HAL_RCC_OscConfig+0x4f4>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80088fe:	f7fd feb1 	bl	8006664 <HAL_GetTick>
 8008902:	4602      	mov	r2, r0
 8008904:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008906:	1ad3      	subs	r3, r2, r3
 8008908:	2b02      	cmp	r3, #2
 800890a:	d901      	bls.n	8008910 <HAL_RCC_OscConfig+0x4f4>
        {
          return HAL_TIMEOUT;
 800890c:	2303      	movs	r3, #3
 800890e:	e10d      	b.n	8008b2c <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_HSI48_IsReady() == 0U)
 8008910:	f7ff faab 	bl	8007e6a <LL_RCC_HSI48_IsReady>
 8008914:	4603      	mov	r3, r0
 8008916:	2b00      	cmp	r3, #0
 8008918:	d0f1      	beq.n	80088fe <HAL_RCC_OscConfig+0x4e2>
 800891a:	e013      	b.n	8008944 <HAL_RCC_OscConfig+0x528>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800891c:	f7ff fa94 	bl	8007e48 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008920:	f7fd fea0 	bl	8006664 <HAL_GetTick>
 8008924:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 8008926:	e008      	b.n	800893a <HAL_RCC_OscConfig+0x51e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8008928:	f7fd fe9c 	bl	8006664 <HAL_GetTick>
 800892c:	4602      	mov	r2, r0
 800892e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008930:	1ad3      	subs	r3, r2, r3
 8008932:	2b02      	cmp	r3, #2
 8008934:	d901      	bls.n	800893a <HAL_RCC_OscConfig+0x51e>
        {
          return HAL_TIMEOUT;
 8008936:	2303      	movs	r3, #3
 8008938:	e0f8      	b.n	8008b2c <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_HSI48_IsReady() != 0U)
 800893a:	f7ff fa96 	bl	8007e6a <LL_RCC_HSI48_IsReady>
 800893e:	4603      	mov	r3, r0
 8008940:	2b00      	cmp	r3, #0
 8008942:	d1f1      	bne.n	8008928 <HAL_RCC_OscConfig+0x50c>
#endif
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008948:	2b00      	cmp	r3, #0
 800894a:	f000 80ee 	beq.w	8008b2a <HAL_RCC_OscConfig+0x70e>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800894e:	f7ff fbf4 	bl	800813a <LL_RCC_GetSysClkSource>
 8008952:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 8008954:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008958:	68db      	ldr	r3, [r3, #12]
 800895a:	60fb      	str	r3, [r7, #12]
    
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008960:	2b02      	cmp	r3, #2
 8008962:	f040 80af 	bne.w	8008ac4 <HAL_RCC_OscConfig+0x6a8>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
      
      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008966:	68fb      	ldr	r3, [r7, #12]
 8008968:	f003 0203 	and.w	r2, r3, #3
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008970:	429a      	cmp	r2, r3
 8008972:	d123      	bne.n	80089bc <HAL_RCC_OscConfig+0x5a0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8008974:	68fb      	ldr	r3, [r7, #12]
 8008976:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800897e:	429a      	cmp	r2, r3
 8008980:	d11c      	bne.n	80089bc <HAL_RCC_OscConfig+0x5a0>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8008982:	68fb      	ldr	r3, [r7, #12]
 8008984:	0a1b      	lsrs	r3, r3, #8
 8008986:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800898e:	429a      	cmp	r2, r3
 8008990:	d114      	bne.n	80089bc <HAL_RCC_OscConfig+0x5a0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8008992:	68fb      	ldr	r3, [r7, #12]
 8008994:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 800899c:	429a      	cmp	r2, r3
 800899e:	d10d      	bne.n	80089bc <HAL_RCC_OscConfig+0x5a0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80089a0:	68fb      	ldr	r3, [r7, #12]
 80089a2:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80089aa:	429a      	cmp	r2, r3
 80089ac:	d106      	bne.n	80089bc <HAL_RCC_OscConfig+0x5a0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80089ae:	68fb      	ldr	r3, [r7, #12]
 80089b0:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80089b8:	429a      	cmp	r2, r3
 80089ba:	d05d      	beq.n	8008a78 <HAL_RCC_OscConfig+0x65c>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80089bc:	693b      	ldr	r3, [r7, #16]
 80089be:	2b0c      	cmp	r3, #12
 80089c0:	d058      	beq.n	8008a74 <HAL_RCC_OscConfig+0x658>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80089c2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80089c6:	681b      	ldr	r3, [r3, #0]
 80089c8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80089cc:	2b00      	cmp	r3, #0
 80089ce:	d001      	beq.n	80089d4 <HAL_RCC_OscConfig+0x5b8>

          {
            return HAL_ERROR;
 80089d0:	2301      	movs	r3, #1
 80089d2:	e0ab      	b.n	8008b2c <HAL_RCC_OscConfig+0x710>
          }
          else
#endif
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80089d4:	f7ff fc74 	bl	80082c0 <LL_RCC_PLL_Disable>
            
            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80089d8:	f7fd fe44 	bl	8006664 <HAL_GetTick>
 80089dc:	6278      	str	r0, [r7, #36]	; 0x24
            
            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80089de:	e008      	b.n	80089f2 <HAL_RCC_OscConfig+0x5d6>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80089e0:	f7fd fe40 	bl	8006664 <HAL_GetTick>
 80089e4:	4602      	mov	r2, r0
 80089e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089e8:	1ad3      	subs	r3, r2, r3
 80089ea:	2b02      	cmp	r3, #2
 80089ec:	d901      	bls.n	80089f2 <HAL_RCC_OscConfig+0x5d6>
              {
                return HAL_TIMEOUT;
 80089ee:	2303      	movs	r3, #3
 80089f0:	e09c      	b.n	8008b2c <HAL_RCC_OscConfig+0x710>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80089f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80089f6:	681b      	ldr	r3, [r3, #0]
 80089f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80089fc:	2b00      	cmp	r3, #0
 80089fe:	d1ef      	bne.n	80089e0 <HAL_RCC_OscConfig+0x5c4>
              }
            }
            
            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008a00:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008a04:	68da      	ldr	r2, [r3, #12]
 8008a06:	4b3e      	ldr	r3, [pc, #248]	; (8008b00 <HAL_RCC_OscConfig+0x6e4>)
 8008a08:	4013      	ands	r3, r2
 8008a0a:	687a      	ldr	r2, [r7, #4]
 8008a0c:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8008a0e:	687a      	ldr	r2, [r7, #4]
 8008a10:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8008a12:	4311      	orrs	r1, r2
 8008a14:	687a      	ldr	r2, [r7, #4]
 8008a16:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8008a18:	0212      	lsls	r2, r2, #8
 8008a1a:	4311      	orrs	r1, r2
 8008a1c:	687a      	ldr	r2, [r7, #4]
 8008a1e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8008a20:	4311      	orrs	r1, r2
 8008a22:	687a      	ldr	r2, [r7, #4]
 8008a24:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8008a26:	4311      	orrs	r1, r2
 8008a28:	687a      	ldr	r2, [r7, #4]
 8008a2a:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8008a2c:	430a      	orrs	r2, r1
 8008a2e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008a32:	4313      	orrs	r3, r2
 8008a34:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
            
            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8008a36:	f7ff fc34 	bl	80082a2 <LL_RCC_PLL_Enable>
            
            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8008a3a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008a3e:	68db      	ldr	r3, [r3, #12]
 8008a40:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008a44:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008a48:	60d3      	str	r3, [r2, #12]
            
            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8008a4a:	f7fd fe0b 	bl	8006664 <HAL_GetTick>
 8008a4e:	6278      	str	r0, [r7, #36]	; 0x24
            
            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008a50:	e008      	b.n	8008a64 <HAL_RCC_OscConfig+0x648>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008a52:	f7fd fe07 	bl	8006664 <HAL_GetTick>
 8008a56:	4602      	mov	r2, r0
 8008a58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a5a:	1ad3      	subs	r3, r2, r3
 8008a5c:	2b02      	cmp	r3, #2
 8008a5e:	d901      	bls.n	8008a64 <HAL_RCC_OscConfig+0x648>
              {
                return HAL_TIMEOUT;
 8008a60:	2303      	movs	r3, #3
 8008a62:	e063      	b.n	8008b2c <HAL_RCC_OscConfig+0x710>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008a64:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008a6e:	2b00      	cmp	r3, #0
 8008a70:	d0ef      	beq.n	8008a52 <HAL_RCC_OscConfig+0x636>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8008a72:	e05a      	b.n	8008b2a <HAL_RCC_OscConfig+0x70e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8008a74:	2301      	movs	r3, #1
 8008a76:	e059      	b.n	8008b2c <HAL_RCC_OscConfig+0x710>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008a78:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008a7c:	681b      	ldr	r3, [r3, #0]
 8008a7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008a82:	2b00      	cmp	r3, #0
 8008a84:	d151      	bne.n	8008b2a <HAL_RCC_OscConfig+0x70e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8008a86:	f7ff fc0c 	bl	80082a2 <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8008a8a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008a8e:	68db      	ldr	r3, [r3, #12]
 8008a90:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008a94:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008a98:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8008a9a:	f7fd fde3 	bl	8006664 <HAL_GetTick>
 8008a9e:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008aa0:	e008      	b.n	8008ab4 <HAL_RCC_OscConfig+0x698>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008aa2:	f7fd fddf 	bl	8006664 <HAL_GetTick>
 8008aa6:	4602      	mov	r2, r0
 8008aa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008aaa:	1ad3      	subs	r3, r2, r3
 8008aac:	2b02      	cmp	r3, #2
 8008aae:	d901      	bls.n	8008ab4 <HAL_RCC_OscConfig+0x698>
            {
              return HAL_TIMEOUT;
 8008ab0:	2303      	movs	r3, #3
 8008ab2:	e03b      	b.n	8008b2c <HAL_RCC_OscConfig+0x710>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008ab4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008abe:	2b00      	cmp	r3, #0
 8008ac0:	d0ef      	beq.n	8008aa2 <HAL_RCC_OscConfig+0x686>
 8008ac2:	e032      	b.n	8008b2a <HAL_RCC_OscConfig+0x70e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8008ac4:	693b      	ldr	r3, [r7, #16]
 8008ac6:	2b0c      	cmp	r3, #12
 8008ac8:	d02d      	beq.n	8008b26 <HAL_RCC_OscConfig+0x70a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008aca:	f7ff fbf9 	bl	80082c0 <LL_RCC_PLL_Disable>
        

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 8008ace:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008ad2:	68db      	ldr	r3, [r3, #12]
 8008ad4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008ad8:	f023 0303 	bic.w	r3, r3, #3
 8008adc:	60d3      	str	r3, [r2, #12]

#if defined(SAI1) && defined(USB)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_USBCLK | RCC_PLL_SAI1CLK);
 8008ade:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008ae2:	68db      	ldr	r3, [r3, #12]
 8008ae4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008ae8:	f023 5388 	bic.w	r3, r3, #285212672	; 0x11000000
 8008aec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008af0:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK);
#endif

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008af2:	f7fd fdb7 	bl	8006664 <HAL_GetTick>
 8008af6:	6278      	str	r0, [r7, #36]	; 0x24
        
        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008af8:	e00d      	b.n	8008b16 <HAL_RCC_OscConfig+0x6fa>
 8008afa:	bf00      	nop
 8008afc:	58000400 	.word	0x58000400
 8008b00:	11c1808c 	.word	0x11c1808c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008b04:	f7fd fdae 	bl	8006664 <HAL_GetTick>
 8008b08:	4602      	mov	r2, r0
 8008b0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b0c:	1ad3      	subs	r3, r2, r3
 8008b0e:	2b02      	cmp	r3, #2
 8008b10:	d901      	bls.n	8008b16 <HAL_RCC_OscConfig+0x6fa>
          {
            return HAL_TIMEOUT;
 8008b12:	2303      	movs	r3, #3
 8008b14:	e00a      	b.n	8008b2c <HAL_RCC_OscConfig+0x710>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008b16:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008b20:	2b00      	cmp	r3, #0
 8008b22:	d1ef      	bne.n	8008b04 <HAL_RCC_OscConfig+0x6e8>
 8008b24:	e001      	b.n	8008b2a <HAL_RCC_OscConfig+0x70e>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8008b26:	2301      	movs	r3, #1
 8008b28:	e000      	b.n	8008b2c <HAL_RCC_OscConfig+0x710>
      }
    }
  }
  return HAL_OK;
 8008b2a:	2300      	movs	r3, #0
}
 8008b2c:	4618      	mov	r0, r3
 8008b2e:	3734      	adds	r7, #52	; 0x34
 8008b30:	46bd      	mov	sp, r7
 8008b32:	bd90      	pop	{r4, r7, pc}

08008b34 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008b34:	b580      	push	{r7, lr}
 8008b36:	b084      	sub	sp, #16
 8008b38:	af00      	add	r7, sp, #0
 8008b3a:	6078      	str	r0, [r7, #4]
 8008b3c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	2b00      	cmp	r3, #0
 8008b42:	d101      	bne.n	8008b48 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008b44:	2301      	movs	r3, #1
 8008b46:	e12d      	b.n	8008da4 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8008b48:	4b98      	ldr	r3, [pc, #608]	; (8008dac <HAL_RCC_ClockConfig+0x278>)
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	f003 0307 	and.w	r3, r3, #7
 8008b50:	683a      	ldr	r2, [r7, #0]
 8008b52:	429a      	cmp	r2, r3
 8008b54:	d91b      	bls.n	8008b8e <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008b56:	4b95      	ldr	r3, [pc, #596]	; (8008dac <HAL_RCC_ClockConfig+0x278>)
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	f023 0207 	bic.w	r2, r3, #7
 8008b5e:	4993      	ldr	r1, [pc, #588]	; (8008dac <HAL_RCC_ClockConfig+0x278>)
 8008b60:	683b      	ldr	r3, [r7, #0]
 8008b62:	4313      	orrs	r3, r2
 8008b64:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008b66:	f7fd fd7d 	bl	8006664 <HAL_GetTick>
 8008b6a:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008b6c:	e008      	b.n	8008b80 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8008b6e:	f7fd fd79 	bl	8006664 <HAL_GetTick>
 8008b72:	4602      	mov	r2, r0
 8008b74:	68fb      	ldr	r3, [r7, #12]
 8008b76:	1ad3      	subs	r3, r2, r3
 8008b78:	2b02      	cmp	r3, #2
 8008b7a:	d901      	bls.n	8008b80 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8008b7c:	2303      	movs	r3, #3
 8008b7e:	e111      	b.n	8008da4 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008b80:	4b8a      	ldr	r3, [pc, #552]	; (8008dac <HAL_RCC_ClockConfig+0x278>)
 8008b82:	681b      	ldr	r3, [r3, #0]
 8008b84:	f003 0307 	and.w	r3, r3, #7
 8008b88:	683a      	ldr	r2, [r7, #0]
 8008b8a:	429a      	cmp	r2, r3
 8008b8c:	d1ef      	bne.n	8008b6e <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	681b      	ldr	r3, [r3, #0]
 8008b92:	f003 0302 	and.w	r3, r3, #2
 8008b96:	2b00      	cmp	r3, #0
 8008b98:	d016      	beq.n	8008bc8 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	689b      	ldr	r3, [r3, #8]
 8008b9e:	4618      	mov	r0, r3
 8008ba0:	f7ff fad7 	bl	8008152 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8008ba4:	f7fd fd5e 	bl	8006664 <HAL_GetTick>
 8008ba8:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8008baa:	e008      	b.n	8008bbe <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8008bac:	f7fd fd5a 	bl	8006664 <HAL_GetTick>
 8008bb0:	4602      	mov	r2, r0
 8008bb2:	68fb      	ldr	r3, [r7, #12]
 8008bb4:	1ad3      	subs	r3, r2, r3
 8008bb6:	2b02      	cmp	r3, #2
 8008bb8:	d901      	bls.n	8008bbe <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8008bba:	2303      	movs	r3, #3
 8008bbc:	e0f2      	b.n	8008da4 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8008bbe:	f7ff fbd1 	bl	8008364 <LL_RCC_IsActiveFlag_HPRE>
 8008bc2:	4603      	mov	r3, r0
 8008bc4:	2b00      	cmp	r3, #0
 8008bc6:	d0f1      	beq.n	8008bac <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	f003 0320 	and.w	r3, r3, #32
 8008bd0:	2b00      	cmp	r3, #0
 8008bd2:	d016      	beq.n	8008c02 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	695b      	ldr	r3, [r3, #20]
 8008bd8:	4618      	mov	r0, r3
 8008bda:	f7ff face 	bl	800817a <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8008bde:	f7fd fd41 	bl	8006664 <HAL_GetTick>
 8008be2:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8008be4:	e008      	b.n	8008bf8 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8008be6:	f7fd fd3d 	bl	8006664 <HAL_GetTick>
 8008bea:	4602      	mov	r2, r0
 8008bec:	68fb      	ldr	r3, [r7, #12]
 8008bee:	1ad3      	subs	r3, r2, r3
 8008bf0:	2b02      	cmp	r3, #2
 8008bf2:	d901      	bls.n	8008bf8 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8008bf4:	2303      	movs	r3, #3
 8008bf6:	e0d5      	b.n	8008da4 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8008bf8:	f7ff fbc6 	bl	8008388 <LL_RCC_IsActiveFlag_C2HPRE>
 8008bfc:	4603      	mov	r3, r0
 8008bfe:	2b00      	cmp	r3, #0
 8008c00:	d0f1      	beq.n	8008be6 <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008c0a:	2b00      	cmp	r3, #0
 8008c0c:	d016      	beq.n	8008c3c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	699b      	ldr	r3, [r3, #24]
 8008c12:	4618      	mov	r0, r3
 8008c14:	f7ff fac7 	bl	80081a6 <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8008c18:	f7fd fd24 	bl	8006664 <HAL_GetTick>
 8008c1c:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8008c1e:	e008      	b.n	8008c32 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8008c20:	f7fd fd20 	bl	8006664 <HAL_GetTick>
 8008c24:	4602      	mov	r2, r0
 8008c26:	68fb      	ldr	r3, [r7, #12]
 8008c28:	1ad3      	subs	r3, r2, r3
 8008c2a:	2b02      	cmp	r3, #2
 8008c2c:	d901      	bls.n	8008c32 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8008c2e:	2303      	movs	r3, #3
 8008c30:	e0b8      	b.n	8008da4 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8008c32:	f7ff fbbc 	bl	80083ae <LL_RCC_IsActiveFlag_SHDHPRE>
 8008c36:	4603      	mov	r3, r0
 8008c38:	2b00      	cmp	r3, #0
 8008c3a:	d0f1      	beq.n	8008c20 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	681b      	ldr	r3, [r3, #0]
 8008c40:	f003 0304 	and.w	r3, r3, #4
 8008c44:	2b00      	cmp	r3, #0
 8008c46:	d016      	beq.n	8008c76 <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	68db      	ldr	r3, [r3, #12]
 8008c4c:	4618      	mov	r0, r3
 8008c4e:	f7ff fac1 	bl	80081d4 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8008c52:	f7fd fd07 	bl	8006664 <HAL_GetTick>
 8008c56:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8008c58:	e008      	b.n	8008c6c <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8008c5a:	f7fd fd03 	bl	8006664 <HAL_GetTick>
 8008c5e:	4602      	mov	r2, r0
 8008c60:	68fb      	ldr	r3, [r7, #12]
 8008c62:	1ad3      	subs	r3, r2, r3
 8008c64:	2b02      	cmp	r3, #2
 8008c66:	d901      	bls.n	8008c6c <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8008c68:	2303      	movs	r3, #3
 8008c6a:	e09b      	b.n	8008da4 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8008c6c:	f7ff fbb2 	bl	80083d4 <LL_RCC_IsActiveFlag_PPRE1>
 8008c70:	4603      	mov	r3, r0
 8008c72:	2b00      	cmp	r3, #0
 8008c74:	d0f1      	beq.n	8008c5a <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	681b      	ldr	r3, [r3, #0]
 8008c7a:	f003 0308 	and.w	r3, r3, #8
 8008c7e:	2b00      	cmp	r3, #0
 8008c80:	d017      	beq.n	8008cb2 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	691b      	ldr	r3, [r3, #16]
 8008c86:	00db      	lsls	r3, r3, #3
 8008c88:	4618      	mov	r0, r3
 8008c8a:	f7ff fab7 	bl	80081fc <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8008c8e:	f7fd fce9 	bl	8006664 <HAL_GetTick>
 8008c92:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8008c94:	e008      	b.n	8008ca8 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8008c96:	f7fd fce5 	bl	8006664 <HAL_GetTick>
 8008c9a:	4602      	mov	r2, r0
 8008c9c:	68fb      	ldr	r3, [r7, #12]
 8008c9e:	1ad3      	subs	r3, r2, r3
 8008ca0:	2b02      	cmp	r3, #2
 8008ca2:	d901      	bls.n	8008ca8 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8008ca4:	2303      	movs	r3, #3
 8008ca6:	e07d      	b.n	8008da4 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8008ca8:	f7ff fba6 	bl	80083f8 <LL_RCC_IsActiveFlag_PPRE2>
 8008cac:	4603      	mov	r3, r0
 8008cae:	2b00      	cmp	r3, #0
 8008cb0:	d0f1      	beq.n	8008c96 <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	681b      	ldr	r3, [r3, #0]
 8008cb6:	f003 0301 	and.w	r3, r3, #1
 8008cba:	2b00      	cmp	r3, #0
 8008cbc:	d043      	beq.n	8008d46 <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	685b      	ldr	r3, [r3, #4]
 8008cc2:	2b02      	cmp	r3, #2
 8008cc4:	d106      	bne.n	8008cd4 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8008cc6:	f7ff f857 	bl	8007d78 <LL_RCC_HSE_IsReady>
 8008cca:	4603      	mov	r3, r0
 8008ccc:	2b00      	cmp	r3, #0
 8008cce:	d11e      	bne.n	8008d0e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8008cd0:	2301      	movs	r3, #1
 8008cd2:	e067      	b.n	8008da4 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	685b      	ldr	r3, [r3, #4]
 8008cd8:	2b03      	cmp	r3, #3
 8008cda:	d106      	bne.n	8008cea <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8008cdc:	f7ff faff 	bl	80082de <LL_RCC_PLL_IsReady>
 8008ce0:	4603      	mov	r3, r0
 8008ce2:	2b00      	cmp	r3, #0
 8008ce4:	d113      	bne.n	8008d0e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8008ce6:	2301      	movs	r3, #1
 8008ce8:	e05c      	b.n	8008da4 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	685b      	ldr	r3, [r3, #4]
 8008cee:	2b00      	cmp	r3, #0
 8008cf0:	d106      	bne.n	8008d00 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8008cf2:	f7ff f9bf 	bl	8008074 <LL_RCC_MSI_IsReady>
 8008cf6:	4603      	mov	r3, r0
 8008cf8:	2b00      	cmp	r3, #0
 8008cfa:	d108      	bne.n	8008d0e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8008cfc:	2301      	movs	r3, #1
 8008cfe:	e051      	b.n	8008da4 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8008d00:	f7ff f86a 	bl	8007dd8 <LL_RCC_HSI_IsReady>
 8008d04:	4603      	mov	r3, r0
 8008d06:	2b00      	cmp	r3, #0
 8008d08:	d101      	bne.n	8008d0e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8008d0a:	2301      	movs	r3, #1
 8008d0c:	e04a      	b.n	8008da4 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	685b      	ldr	r3, [r3, #4]
 8008d12:	4618      	mov	r0, r3
 8008d14:	f7ff f9fd 	bl	8008112 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008d18:	f7fd fca4 	bl	8006664 <HAL_GetTick>
 8008d1c:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008d1e:	e00a      	b.n	8008d36 <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008d20:	f7fd fca0 	bl	8006664 <HAL_GetTick>
 8008d24:	4602      	mov	r2, r0
 8008d26:	68fb      	ldr	r3, [r7, #12]
 8008d28:	1ad3      	subs	r3, r2, r3
 8008d2a:	f241 3288 	movw	r2, #5000	; 0x1388
 8008d2e:	4293      	cmp	r3, r2
 8008d30:	d901      	bls.n	8008d36 <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8008d32:	2303      	movs	r3, #3
 8008d34:	e036      	b.n	8008da4 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008d36:	f7ff fa00 	bl	800813a <LL_RCC_GetSysClkSource>
 8008d3a:	4602      	mov	r2, r0
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	685b      	ldr	r3, [r3, #4]
 8008d40:	009b      	lsls	r3, r3, #2
 8008d42:	429a      	cmp	r2, r3
 8008d44:	d1ec      	bne.n	8008d20 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8008d46:	4b19      	ldr	r3, [pc, #100]	; (8008dac <HAL_RCC_ClockConfig+0x278>)
 8008d48:	681b      	ldr	r3, [r3, #0]
 8008d4a:	f003 0307 	and.w	r3, r3, #7
 8008d4e:	683a      	ldr	r2, [r7, #0]
 8008d50:	429a      	cmp	r2, r3
 8008d52:	d21b      	bcs.n	8008d8c <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008d54:	4b15      	ldr	r3, [pc, #84]	; (8008dac <HAL_RCC_ClockConfig+0x278>)
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	f023 0207 	bic.w	r2, r3, #7
 8008d5c:	4913      	ldr	r1, [pc, #76]	; (8008dac <HAL_RCC_ClockConfig+0x278>)
 8008d5e:	683b      	ldr	r3, [r7, #0]
 8008d60:	4313      	orrs	r3, r2
 8008d62:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008d64:	f7fd fc7e 	bl	8006664 <HAL_GetTick>
 8008d68:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008d6a:	e008      	b.n	8008d7e <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8008d6c:	f7fd fc7a 	bl	8006664 <HAL_GetTick>
 8008d70:	4602      	mov	r2, r0
 8008d72:	68fb      	ldr	r3, [r7, #12]
 8008d74:	1ad3      	subs	r3, r2, r3
 8008d76:	2b02      	cmp	r3, #2
 8008d78:	d901      	bls.n	8008d7e <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8008d7a:	2303      	movs	r3, #3
 8008d7c:	e012      	b.n	8008da4 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008d7e:	4b0b      	ldr	r3, [pc, #44]	; (8008dac <HAL_RCC_ClockConfig+0x278>)
 8008d80:	681b      	ldr	r3, [r3, #0]
 8008d82:	f003 0307 	and.w	r3, r3, #7
 8008d86:	683a      	ldr	r2, [r7, #0]
 8008d88:	429a      	cmp	r2, r3
 8008d8a:	d1ef      	bne.n	8008d6c <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8008d8c:	f000 f87c 	bl	8008e88 <HAL_RCC_GetHCLKFreq>
 8008d90:	4602      	mov	r2, r0
 8008d92:	4b07      	ldr	r3, [pc, #28]	; (8008db0 <HAL_RCC_ClockConfig+0x27c>)
 8008d94:	601a      	str	r2, [r3, #0]
  
  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 8008d96:	f7fd fc71 	bl	800667c <HAL_GetTickPrio>
 8008d9a:	4603      	mov	r3, r0
 8008d9c:	4618      	mov	r0, r3
 8008d9e:	f7fc ff0f 	bl	8005bc0 <HAL_InitTick>
 8008da2:	4603      	mov	r3, r0
}
 8008da4:	4618      	mov	r0, r3
 8008da6:	3710      	adds	r7, #16
 8008da8:	46bd      	mov	sp, r7
 8008daa:	bd80      	pop	{r7, pc}
 8008dac:	58004000 	.word	0x58004000
 8008db0:	20000014 	.word	0x20000014

08008db4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008db4:	b590      	push	{r4, r7, lr}
 8008db6:	b085      	sub	sp, #20
 8008db8:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq, pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008dba:	f7ff f9be 	bl	800813a <LL_RCC_GetSysClkSource>
 8008dbe:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	2b00      	cmp	r3, #0
 8008dc4:	d10a      	bne.n	8008ddc <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8008dc6:	f7ff f97a 	bl	80080be <LL_RCC_MSI_GetRange>
 8008dca:	4603      	mov	r3, r0
 8008dcc:	091b      	lsrs	r3, r3, #4
 8008dce:	f003 030f 	and.w	r3, r3, #15
 8008dd2:	4a2a      	ldr	r2, [pc, #168]	; (8008e7c <HAL_RCC_GetSysClockFreq+0xc8>)
 8008dd4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008dd8:	60fb      	str	r3, [r7, #12]
 8008dda:	e04a      	b.n	8008e72 <HAL_RCC_GetSysClockFreq+0xbe>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	2b04      	cmp	r3, #4
 8008de0:	d102      	bne.n	8008de8 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8008de2:	4b27      	ldr	r3, [pc, #156]	; (8008e80 <HAL_RCC_GetSysClockFreq+0xcc>)
 8008de4:	60fb      	str	r3, [r7, #12]
 8008de6:	e044      	b.n	8008e72 <HAL_RCC_GetSysClockFreq+0xbe>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	2b08      	cmp	r3, #8
 8008dec:	d10a      	bne.n	8008e04 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8008dee:	f7fe ff93 	bl	8007d18 <LL_RCC_HSE_IsEnabledDiv2>
 8008df2:	4603      	mov	r3, r0
 8008df4:	2b01      	cmp	r3, #1
 8008df6:	d102      	bne.n	8008dfe <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8008df8:	4b21      	ldr	r3, [pc, #132]	; (8008e80 <HAL_RCC_GetSysClockFreq+0xcc>)
 8008dfa:	60fb      	str	r3, [r7, #12]
 8008dfc:	e039      	b.n	8008e72 <HAL_RCC_GetSysClockFreq+0xbe>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8008dfe:	4b21      	ldr	r3, [pc, #132]	; (8008e84 <HAL_RCC_GetSysClockFreq+0xd0>)
 8008e00:	60fb      	str	r3, [r7, #12]
 8008e02:	e036      	b.n	8008e72 <HAL_RCC_GetSysClockFreq+0xbe>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8008e04:	f7ff faa2 	bl	800834c <LL_RCC_PLL_GetMainSource>
 8008e08:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 8008e0a:	683b      	ldr	r3, [r7, #0]
 8008e0c:	2b02      	cmp	r3, #2
 8008e0e:	d002      	beq.n	8008e16 <HAL_RCC_GetSysClockFreq+0x62>
 8008e10:	2b03      	cmp	r3, #3
 8008e12:	d003      	beq.n	8008e1c <HAL_RCC_GetSysClockFreq+0x68>
 8008e14:	e00d      	b.n	8008e32 <HAL_RCC_GetSysClockFreq+0x7e>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8008e16:	4b1a      	ldr	r3, [pc, #104]	; (8008e80 <HAL_RCC_GetSysClockFreq+0xcc>)
 8008e18:	60bb      	str	r3, [r7, #8]
        break;
 8008e1a:	e015      	b.n	8008e48 <HAL_RCC_GetSysClockFreq+0x94>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8008e1c:	f7fe ff7c 	bl	8007d18 <LL_RCC_HSE_IsEnabledDiv2>
 8008e20:	4603      	mov	r3, r0
 8008e22:	2b01      	cmp	r3, #1
 8008e24:	d102      	bne.n	8008e2c <HAL_RCC_GetSysClockFreq+0x78>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8008e26:	4b16      	ldr	r3, [pc, #88]	; (8008e80 <HAL_RCC_GetSysClockFreq+0xcc>)
 8008e28:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8008e2a:	e00d      	b.n	8008e48 <HAL_RCC_GetSysClockFreq+0x94>
          pllinputfreq = HSE_VALUE;
 8008e2c:	4b15      	ldr	r3, [pc, #84]	; (8008e84 <HAL_RCC_GetSysClockFreq+0xd0>)
 8008e2e:	60bb      	str	r3, [r7, #8]
        break;
 8008e30:	e00a      	b.n	8008e48 <HAL_RCC_GetSysClockFreq+0x94>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8008e32:	f7ff f944 	bl	80080be <LL_RCC_MSI_GetRange>
 8008e36:	4603      	mov	r3, r0
 8008e38:	091b      	lsrs	r3, r3, #4
 8008e3a:	f003 030f 	and.w	r3, r3, #15
 8008e3e:	4a0f      	ldr	r2, [pc, #60]	; (8008e7c <HAL_RCC_GetSysClockFreq+0xc8>)
 8008e40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008e44:	60bb      	str	r3, [r7, #8]
        break;
 8008e46:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
 8008e48:	f7ff fa5b 	bl	8008302 <LL_RCC_PLL_GetN>
 8008e4c:	4602      	mov	r2, r0
 8008e4e:	68bb      	ldr	r3, [r7, #8]
 8008e50:	fb03 f402 	mul.w	r4, r3, r2
 8008e54:	f7ff fa6e 	bl	8008334 <LL_RCC_PLL_GetDivider>
 8008e58:	4603      	mov	r3, r0
 8008e5a:	091b      	lsrs	r3, r3, #4
 8008e5c:	3301      	adds	r3, #1
 8008e5e:	fbb4 f4f3 	udiv	r4, r4, r3
 8008e62:	f7ff fa5b 	bl	800831c <LL_RCC_PLL_GetR>
 8008e66:	4603      	mov	r3, r0
 8008e68:	0f5b      	lsrs	r3, r3, #29
 8008e6a:	3301      	adds	r3, #1
 8008e6c:	fbb4 f3f3 	udiv	r3, r4, r3
 8008e70:	60fb      	str	r3, [r7, #12]
  }

  return sysclockfreq;
 8008e72:	68fb      	ldr	r3, [r7, #12]
}
 8008e74:	4618      	mov	r0, r3
 8008e76:	3714      	adds	r7, #20
 8008e78:	46bd      	mov	sp, r7
 8008e7a:	bd90      	pop	{r4, r7, pc}
 8008e7c:	0801805c 	.word	0x0801805c
 8008e80:	00f42400 	.word	0x00f42400
 8008e84:	01e84800 	.word	0x01e84800

08008e88 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008e88:	b598      	push	{r3, r4, r7, lr}
 8008e8a:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8008e8c:	f7ff ff92 	bl	8008db4 <HAL_RCC_GetSysClockFreq>
 8008e90:	4604      	mov	r4, r0
 8008e92:	f7ff f9c7 	bl	8008224 <LL_RCC_GetAHBPrescaler>
 8008e96:	4603      	mov	r3, r0
 8008e98:	091b      	lsrs	r3, r3, #4
 8008e9a:	f003 030f 	and.w	r3, r3, #15
 8008e9e:	4a03      	ldr	r2, [pc, #12]	; (8008eac <HAL_RCC_GetHCLKFreq+0x24>)
 8008ea0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008ea4:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8008ea8:	4618      	mov	r0, r3
 8008eaa:	bd98      	pop	{r3, r4, r7, pc}
 8008eac:	08017ffc 	.word	0x08017ffc

08008eb0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008eb0:	b598      	push	{r3, r4, r7, lr}
 8008eb2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8008eb4:	f7ff ffe8 	bl	8008e88 <HAL_RCC_GetHCLKFreq>
 8008eb8:	4604      	mov	r4, r0
 8008eba:	f7ff f9e6 	bl	800828a <LL_RCC_GetAPB2Prescaler>
 8008ebe:	4603      	mov	r3, r0
 8008ec0:	0adb      	lsrs	r3, r3, #11
 8008ec2:	f003 0307 	and.w	r3, r3, #7
 8008ec6:	4a04      	ldr	r2, [pc, #16]	; (8008ed8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8008ec8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008ecc:	f003 031f 	and.w	r3, r3, #31
 8008ed0:	fa24 f303 	lsr.w	r3, r4, r3
}
 8008ed4:	4618      	mov	r0, r3
 8008ed6:	bd98      	pop	{r3, r4, r7, pc}
 8008ed8:	0801803c 	.word	0x0801803c

08008edc <HAL_RCC_GetClockConfig>:
  *                           will be configured.
  * @param  pFLatency         Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8008edc:	b580      	push	{r7, lr}
 8008ede:	b082      	sub	sp, #8
 8008ee0:	af00      	add	r7, sp, #0
 8008ee2:	6078      	str	r0, [r7, #4]
 8008ee4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2 |  \
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	226f      	movs	r2, #111	; 0x6f
 8008eea:	601a      	str	r2, [r3, #0]
                                  RCC_CLOCKTYPE_HCLK2 | RCC_CLOCKTYPE_HCLK4);

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = LL_RCC_GetSysClkSource();
 8008eec:	f7ff f925 	bl	800813a <LL_RCC_GetSysClkSource>
 8008ef0:	4602      	mov	r2, r0
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = LL_RCC_GetAHBPrescaler();
 8008ef6:	f7ff f995 	bl	8008224 <LL_RCC_GetAHBPrescaler>
 8008efa:	4602      	mov	r2, r0
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = LL_RCC_GetAPB1Prescaler();
 8008f00:	f7ff f9b7 	bl	8008272 <LL_RCC_GetAPB1Prescaler>
 8008f04:	4602      	mov	r2, r0
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = LL_RCC_GetAPB2Prescaler();
 8008f0a:	f7ff f9be 	bl	800828a <LL_RCC_GetAPB2Prescaler>
 8008f0e:	4602      	mov	r2, r0
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	611a      	str	r2, [r3, #16]

  /* Get the AHBCLK2Divider configuration ------------------------------------*/
  RCC_ClkInitStruct->AHBCLK2Divider = LL_C2_RCC_GetAHBPrescaler();
 8008f14:	f7ff f992 	bl	800823c <LL_C2_RCC_GetAHBPrescaler>
 8008f18:	4602      	mov	r2, r0
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	615a      	str	r2, [r3, #20]

  /* Get the AHBCLK4Divider configuration ------------------------------------*/
  RCC_ClkInitStruct->AHBCLK4Divider = LL_RCC_GetAHB4Prescaler();
 8008f1e:	f7ff f99a 	bl	8008256 <LL_RCC_GetAHB4Prescaler>
 8008f22:	4602      	mov	r2, r0
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	619a      	str	r2, [r3, #24]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8008f28:	4b04      	ldr	r3, [pc, #16]	; (8008f3c <HAL_RCC_GetClockConfig+0x60>)
 8008f2a:	681b      	ldr	r3, [r3, #0]
 8008f2c:	f003 0207 	and.w	r2, r3, #7
 8008f30:	683b      	ldr	r3, [r7, #0]
 8008f32:	601a      	str	r2, [r3, #0]
}
 8008f34:	bf00      	nop
 8008f36:	3708      	adds	r7, #8
 8008f38:	46bd      	mov	sp, r7
 8008f3a:	bd80      	pop	{r7, pc}
 8008f3c:	58004000 	.word	0x58004000

08008f40 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8008f40:	b590      	push	{r4, r7, lr}
 8008f42:	b085      	sub	sp, #20
 8008f44:	af00      	add	r7, sp, #0
 8008f46:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	2bb0      	cmp	r3, #176	; 0xb0
 8008f4c:	d903      	bls.n	8008f56 <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 8008f4e:	4b15      	ldr	r3, [pc, #84]	; (8008fa4 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8008f50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f52:	60fb      	str	r3, [r7, #12]
 8008f54:	e007      	b.n	8008f66 <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	091b      	lsrs	r3, r3, #4
 8008f5a:	f003 030f 	and.w	r3, r3, #15
 8008f5e:	4a11      	ldr	r2, [pc, #68]	; (8008fa4 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8008f60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008f64:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 8008f66:	f7ff f976 	bl	8008256 <LL_RCC_GetAHB4Prescaler>
 8008f6a:	4603      	mov	r3, r0
 8008f6c:	091b      	lsrs	r3, r3, #4
 8008f6e:	f003 030f 	and.w	r3, r3, #15
 8008f72:	4a0d      	ldr	r2, [pc, #52]	; (8008fa8 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 8008f74:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008f78:	68fa      	ldr	r2, [r7, #12]
 8008f7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8008f7e:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8008f80:	68bb      	ldr	r3, [r7, #8]
 8008f82:	4a0a      	ldr	r2, [pc, #40]	; (8008fac <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 8008f84:	fba2 2303 	umull	r2, r3, r2, r3
 8008f88:	0c9c      	lsrs	r4, r3, #18
 8008f8a:	f7fe feb7 	bl	8007cfc <HAL_PWREx_GetVoltageRange>
 8008f8e:	4603      	mov	r3, r0
 8008f90:	4619      	mov	r1, r3
 8008f92:	4620      	mov	r0, r4
 8008f94:	f000 f80c 	bl	8008fb0 <RCC_SetFlashLatency>
 8008f98:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif
}
 8008f9a:	4618      	mov	r0, r3
 8008f9c:	3714      	adds	r7, #20
 8008f9e:	46bd      	mov	sp, r7
 8008fa0:	bd90      	pop	{r4, r7, pc}
 8008fa2:	bf00      	nop
 8008fa4:	0801805c 	.word	0x0801805c
 8008fa8:	08017ffc 	.word	0x08017ffc
 8008fac:	431bde83 	.word	0x431bde83

08008fb0 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8008fb0:	b590      	push	{r4, r7, lr}
 8008fb2:	b093      	sub	sp, #76	; 0x4c
 8008fb4:	af00      	add	r7, sp, #0
 8008fb6:	6078      	str	r0, [r7, #4]
 8008fb8:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 8008fba:	4b39      	ldr	r3, [pc, #228]	; (80090a0 <RCC_SetFlashLatency+0xf0>)
 8008fbc:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8008fc0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8008fc2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 8008fc6:	4a37      	ldr	r2, [pc, #220]	; (80090a4 <RCC_SetFlashLatency+0xf4>)
 8008fc8:	f107 031c 	add.w	r3, r7, #28
 8008fcc:	ca07      	ldmia	r2, {r0, r1, r2}
 8008fce:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 8008fd2:	4b35      	ldr	r3, [pc, #212]	; (80090a8 <RCC_SetFlashLatency+0xf8>)
 8008fd4:	f107 040c 	add.w	r4, r7, #12
 8008fd8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8008fda:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8008fde:	2300      	movs	r3, #0
 8008fe0:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8008fe2:	683b      	ldr	r3, [r7, #0]
 8008fe4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008fe8:	d11c      	bne.n	8009024 <RCC_SetFlashLatency+0x74>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8008fea:	2300      	movs	r3, #0
 8008fec:	643b      	str	r3, [r7, #64]	; 0x40
 8008fee:	e015      	b.n	800901c <RCC_SetFlashLatency+0x6c>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8008ff0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008ff2:	009b      	lsls	r3, r3, #2
 8008ff4:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8008ff8:	4413      	add	r3, r2
 8008ffa:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8008ffe:	687a      	ldr	r2, [r7, #4]
 8009000:	429a      	cmp	r2, r3
 8009002:	d808      	bhi.n	8009016 <RCC_SetFlashLatency+0x66>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8009004:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009006:	009b      	lsls	r3, r3, #2
 8009008:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800900c:	4413      	add	r3, r2
 800900e:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8009012:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8009014:	e022      	b.n	800905c <RCC_SetFlashLatency+0xac>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8009016:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009018:	3301      	adds	r3, #1
 800901a:	643b      	str	r3, [r7, #64]	; 0x40
 800901c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800901e:	2b03      	cmp	r3, #3
 8009020:	d9e6      	bls.n	8008ff0 <RCC_SetFlashLatency+0x40>
 8009022:	e01b      	b.n	800905c <RCC_SetFlashLatency+0xac>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8009024:	2300      	movs	r3, #0
 8009026:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009028:	e015      	b.n	8009056 <RCC_SetFlashLatency+0xa6>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 800902a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800902c:	009b      	lsls	r3, r3, #2
 800902e:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8009032:	4413      	add	r3, r2
 8009034:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8009038:	687a      	ldr	r2, [r7, #4]
 800903a:	429a      	cmp	r2, r3
 800903c:	d808      	bhi.n	8009050 <RCC_SetFlashLatency+0xa0>
      {
        latency = FLASH_LATENCY_RANGE[index];
 800903e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009040:	009b      	lsls	r3, r3, #2
 8009042:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8009046:	4413      	add	r3, r2
 8009048:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 800904c:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 800904e:	e005      	b.n	800905c <RCC_SetFlashLatency+0xac>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8009050:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009052:	3301      	adds	r3, #1
 8009054:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009056:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009058:	2b02      	cmp	r3, #2
 800905a:	d9e6      	bls.n	800902a <RCC_SetFlashLatency+0x7a>
      break;
    }
  }
#endif

  __HAL_FLASH_SET_LATENCY(latency);
 800905c:	4b13      	ldr	r3, [pc, #76]	; (80090ac <RCC_SetFlashLatency+0xfc>)
 800905e:	681b      	ldr	r3, [r3, #0]
 8009060:	f023 0207 	bic.w	r2, r3, #7
 8009064:	4911      	ldr	r1, [pc, #68]	; (80090ac <RCC_SetFlashLatency+0xfc>)
 8009066:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009068:	4313      	orrs	r3, r2
 800906a:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800906c:	f7fd fafa 	bl	8006664 <HAL_GetTick>
 8009070:	63b8      	str	r0, [r7, #56]	; 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8009072:	e008      	b.n	8009086 <RCC_SetFlashLatency+0xd6>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8009074:	f7fd faf6 	bl	8006664 <HAL_GetTick>
 8009078:	4602      	mov	r2, r0
 800907a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800907c:	1ad3      	subs	r3, r2, r3
 800907e:	2b02      	cmp	r3, #2
 8009080:	d901      	bls.n	8009086 <RCC_SetFlashLatency+0xd6>
    {
      return HAL_TIMEOUT;
 8009082:	2303      	movs	r3, #3
 8009084:	e007      	b.n	8009096 <RCC_SetFlashLatency+0xe6>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8009086:	4b09      	ldr	r3, [pc, #36]	; (80090ac <RCC_SetFlashLatency+0xfc>)
 8009088:	681b      	ldr	r3, [r3, #0]
 800908a:	f003 0307 	and.w	r3, r3, #7
 800908e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009090:	429a      	cmp	r2, r3
 8009092:	d1ef      	bne.n	8009074 <RCC_SetFlashLatency+0xc4>
    }
  }
  return HAL_OK;
 8009094:	2300      	movs	r3, #0
}
 8009096:	4618      	mov	r0, r3
 8009098:	374c      	adds	r7, #76	; 0x4c
 800909a:	46bd      	mov	sp, r7
 800909c:	bd90      	pop	{r4, r7, pc}
 800909e:	bf00      	nop
 80090a0:	08016ed0 	.word	0x08016ed0
 80090a4:	08016ee0 	.word	0x08016ee0
 80090a8:	08016eec 	.word	0x08016eec
 80090ac:	58004000 	.word	0x58004000

080090b0 <LL_RCC_LSE_IsEnabled>:
{
 80090b0:	b480      	push	{r7}
 80090b2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 80090b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80090b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80090bc:	f003 0301 	and.w	r3, r3, #1
 80090c0:	2b01      	cmp	r3, #1
 80090c2:	d101      	bne.n	80090c8 <LL_RCC_LSE_IsEnabled+0x18>
 80090c4:	2301      	movs	r3, #1
 80090c6:	e000      	b.n	80090ca <LL_RCC_LSE_IsEnabled+0x1a>
 80090c8:	2300      	movs	r3, #0
}
 80090ca:	4618      	mov	r0, r3
 80090cc:	46bd      	mov	sp, r7
 80090ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090d2:	4770      	bx	lr

080090d4 <LL_RCC_LSE_IsReady>:
{
 80090d4:	b480      	push	{r7}
 80090d6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80090d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80090dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80090e0:	f003 0302 	and.w	r3, r3, #2
 80090e4:	2b02      	cmp	r3, #2
 80090e6:	d101      	bne.n	80090ec <LL_RCC_LSE_IsReady+0x18>
 80090e8:	2301      	movs	r3, #1
 80090ea:	e000      	b.n	80090ee <LL_RCC_LSE_IsReady+0x1a>
 80090ec:	2300      	movs	r3, #0
}
 80090ee:	4618      	mov	r0, r3
 80090f0:	46bd      	mov	sp, r7
 80090f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090f6:	4770      	bx	lr

080090f8 <LL_RCC_SetRFWKPClockSource>:
{
 80090f8:	b480      	push	{r7}
 80090fa:	b083      	sub	sp, #12
 80090fc:	af00      	add	r7, sp, #0
 80090fe:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 8009100:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009104:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009108:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800910c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	4313      	orrs	r3, r2
 8009114:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8009118:	bf00      	nop
 800911a:	370c      	adds	r7, #12
 800911c:	46bd      	mov	sp, r7
 800911e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009122:	4770      	bx	lr

08009124 <LL_RCC_SetSMPSClockSource>:
{
 8009124:	b480      	push	{r7}
 8009126:	b083      	sub	sp, #12
 8009128:	af00      	add	r7, sp, #0
 800912a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 800912c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009130:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009132:	f023 0203 	bic.w	r2, r3, #3
 8009136:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	4313      	orrs	r3, r2
 800913e:	624b      	str	r3, [r1, #36]	; 0x24
}
 8009140:	bf00      	nop
 8009142:	370c      	adds	r7, #12
 8009144:	46bd      	mov	sp, r7
 8009146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800914a:	4770      	bx	lr

0800914c <LL_RCC_SetSMPSPrescaler>:
{
 800914c:	b480      	push	{r7}
 800914e:	b083      	sub	sp, #12
 8009150:	af00      	add	r7, sp, #0
 8009152:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 8009154:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009158:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800915a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800915e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	4313      	orrs	r3, r2
 8009166:	624b      	str	r3, [r1, #36]	; 0x24
}
 8009168:	bf00      	nop
 800916a:	370c      	adds	r7, #12
 800916c:	46bd      	mov	sp, r7
 800916e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009172:	4770      	bx	lr

08009174 <LL_RCC_SetUSARTClockSource>:
{
 8009174:	b480      	push	{r7}
 8009176:	b083      	sub	sp, #12
 8009178:	af00      	add	r7, sp, #0
 800917a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 800917c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009180:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009184:	f023 0203 	bic.w	r2, r3, #3
 8009188:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	4313      	orrs	r3, r2
 8009190:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8009194:	bf00      	nop
 8009196:	370c      	adds	r7, #12
 8009198:	46bd      	mov	sp, r7
 800919a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800919e:	4770      	bx	lr

080091a0 <LL_RCC_SetLPUARTClockSource>:
{
 80091a0:	b480      	push	{r7}
 80091a2:	b083      	sub	sp, #12
 80091a4:	af00      	add	r7, sp, #0
 80091a6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 80091a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80091ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80091b0:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80091b4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	4313      	orrs	r3, r2
 80091bc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80091c0:	bf00      	nop
 80091c2:	370c      	adds	r7, #12
 80091c4:	46bd      	mov	sp, r7
 80091c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ca:	4770      	bx	lr

080091cc <LL_RCC_SetI2CClockSource>:
{
 80091cc:	b480      	push	{r7}
 80091ce:	b083      	sub	sp, #12
 80091d0:	af00      	add	r7, sp, #0
 80091d2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 80091d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80091d8:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	091b      	lsrs	r3, r3, #4
 80091e0:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 80091e4:	43db      	mvns	r3, r3
 80091e6:	401a      	ands	r2, r3
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	011b      	lsls	r3, r3, #4
 80091ec:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 80091f0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80091f4:	4313      	orrs	r3, r2
 80091f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80091fa:	bf00      	nop
 80091fc:	370c      	adds	r7, #12
 80091fe:	46bd      	mov	sp, r7
 8009200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009204:	4770      	bx	lr

08009206 <LL_RCC_SetLPTIMClockSource>:
{
 8009206:	b480      	push	{r7}
 8009208:	b083      	sub	sp, #12
 800920a:	af00      	add	r7, sp, #0
 800920c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 800920e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009212:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	0c1b      	lsrs	r3, r3, #16
 800921a:	041b      	lsls	r3, r3, #16
 800921c:	43db      	mvns	r3, r3
 800921e:	401a      	ands	r2, r3
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	041b      	lsls	r3, r3, #16
 8009224:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8009228:	4313      	orrs	r3, r2
 800922a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800922e:	bf00      	nop
 8009230:	370c      	adds	r7, #12
 8009232:	46bd      	mov	sp, r7
 8009234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009238:	4770      	bx	lr

0800923a <LL_RCC_SetSAIClockSource>:
{
 800923a:	b480      	push	{r7}
 800923c:	b083      	sub	sp, #12
 800923e:	af00      	add	r7, sp, #0
 8009240:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 8009242:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009246:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800924a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800924e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	4313      	orrs	r3, r2
 8009256:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800925a:	bf00      	nop
 800925c:	370c      	adds	r7, #12
 800925e:	46bd      	mov	sp, r7
 8009260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009264:	4770      	bx	lr

08009266 <LL_RCC_SetRNGClockSource>:
{
 8009266:	b480      	push	{r7}
 8009268:	b083      	sub	sp, #12
 800926a:	af00      	add	r7, sp, #0
 800926c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 800926e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009272:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009276:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 800927a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	4313      	orrs	r3, r2
 8009282:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8009286:	bf00      	nop
 8009288:	370c      	adds	r7, #12
 800928a:	46bd      	mov	sp, r7
 800928c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009290:	4770      	bx	lr

08009292 <LL_RCC_SetCLK48ClockSource>:
{
 8009292:	b480      	push	{r7}
 8009294:	b083      	sub	sp, #12
 8009296:	af00      	add	r7, sp, #0
 8009298:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 800929a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800929e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80092a2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80092a6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	4313      	orrs	r3, r2
 80092ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80092b2:	bf00      	nop
 80092b4:	370c      	adds	r7, #12
 80092b6:	46bd      	mov	sp, r7
 80092b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092bc:	4770      	bx	lr

080092be <LL_RCC_SetUSBClockSource>:
{
 80092be:	b580      	push	{r7, lr}
 80092c0:	b082      	sub	sp, #8
 80092c2:	af00      	add	r7, sp, #0
 80092c4:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 80092c6:	6878      	ldr	r0, [r7, #4]
 80092c8:	f7ff ffe3 	bl	8009292 <LL_RCC_SetCLK48ClockSource>
}
 80092cc:	bf00      	nop
 80092ce:	3708      	adds	r7, #8
 80092d0:	46bd      	mov	sp, r7
 80092d2:	bd80      	pop	{r7, pc}

080092d4 <LL_RCC_SetADCClockSource>:
{
 80092d4:	b480      	push	{r7}
 80092d6:	b083      	sub	sp, #12
 80092d8:	af00      	add	r7, sp, #0
 80092da:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 80092dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80092e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80092e4:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80092e8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	4313      	orrs	r3, r2
 80092f0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80092f4:	bf00      	nop
 80092f6:	370c      	adds	r7, #12
 80092f8:	46bd      	mov	sp, r7
 80092fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092fe:	4770      	bx	lr

08009300 <LL_RCC_SetRTCClockSource>:
{
 8009300:	b480      	push	{r7}
 8009302:	b083      	sub	sp, #12
 8009304:	af00      	add	r7, sp, #0
 8009306:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8009308:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800930c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009310:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009314:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	4313      	orrs	r3, r2
 800931c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8009320:	bf00      	nop
 8009322:	370c      	adds	r7, #12
 8009324:	46bd      	mov	sp, r7
 8009326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800932a:	4770      	bx	lr

0800932c <LL_RCC_GetRTCClockSource>:
{
 800932c:	b480      	push	{r7}
 800932e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8009330:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009334:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009338:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 800933c:	4618      	mov	r0, r3
 800933e:	46bd      	mov	sp, r7
 8009340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009344:	4770      	bx	lr

08009346 <LL_RCC_ForceBackupDomainReset>:
{
 8009346:	b480      	push	{r7}
 8009348:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800934a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800934e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009352:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8009356:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800935a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800935e:	bf00      	nop
 8009360:	46bd      	mov	sp, r7
 8009362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009366:	4770      	bx	lr

08009368 <LL_RCC_ReleaseBackupDomainReset>:
{
 8009368:	b480      	push	{r7}
 800936a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800936c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009370:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009374:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8009378:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800937c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8009380:	bf00      	nop
 8009382:	46bd      	mov	sp, r7
 8009384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009388:	4770      	bx	lr

0800938a <LL_RCC_PLLSAI1_Enable>:
{
 800938a:	b480      	push	{r7}
 800938c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 800938e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009392:	681b      	ldr	r3, [r3, #0]
 8009394:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8009398:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800939c:	6013      	str	r3, [r2, #0]
}
 800939e:	bf00      	nop
 80093a0:	46bd      	mov	sp, r7
 80093a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093a6:	4770      	bx	lr

080093a8 <LL_RCC_PLLSAI1_Disable>:
{
 80093a8:	b480      	push	{r7}
 80093aa:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 80093ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80093b0:	681b      	ldr	r3, [r3, #0]
 80093b2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80093b6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80093ba:	6013      	str	r3, [r2, #0]
}
 80093bc:	bf00      	nop
 80093be:	46bd      	mov	sp, r7
 80093c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093c4:	4770      	bx	lr

080093c6 <LL_RCC_PLLSAI1_IsReady>:
{
 80093c6:	b480      	push	{r7}
 80093c8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 80093ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80093ce:	681b      	ldr	r3, [r3, #0]
 80093d0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80093d4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80093d8:	d101      	bne.n	80093de <LL_RCC_PLLSAI1_IsReady+0x18>
 80093da:	2301      	movs	r3, #1
 80093dc:	e000      	b.n	80093e0 <LL_RCC_PLLSAI1_IsReady+0x1a>
 80093de:	2300      	movs	r3, #0
}
 80093e0:	4618      	mov	r0, r3
 80093e2:	46bd      	mov	sp, r7
 80093e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093e8:	4770      	bx	lr

080093ea <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80093ea:	b580      	push	{r7, lr}
 80093ec:	b088      	sub	sp, #32
 80093ee:	af00      	add	r7, sp, #0
 80093f0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 80093f2:	2300      	movs	r3, #0
 80093f4:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 80093f6:	2300      	movs	r3, #0
 80093f8:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	681b      	ldr	r3, [r3, #0]
 80093fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009402:	2b00      	cmp	r3, #0
 8009404:	d033      	beq.n	800946e <HAL_RCCEx_PeriphCLKConfig+0x84>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800940a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800940e:	d00c      	beq.n	800942a <HAL_RCCEx_PeriphCLKConfig+0x40>
 8009410:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009414:	d802      	bhi.n	800941c <HAL_RCCEx_PeriphCLKConfig+0x32>
 8009416:	2b00      	cmp	r3, #0
 8009418:	d010      	beq.n	800943c <HAL_RCCEx_PeriphCLKConfig+0x52>
 800941a:	e017      	b.n	800944c <HAL_RCCEx_PeriphCLKConfig+0x62>
 800941c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009420:	d017      	beq.n	8009452 <HAL_RCCEx_PeriphCLKConfig+0x68>
 8009422:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8009426:	d016      	beq.n	8009456 <HAL_RCCEx_PeriphCLKConfig+0x6c>
 8009428:	e010      	b.n	800944c <HAL_RCCEx_PeriphCLKConfig+0x62>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 800942a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800942e:	68db      	ldr	r3, [r3, #12]
 8009430:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8009434:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009438:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 800943a:	e00d      	b.n	8009458 <HAL_RCCEx_PeriphCLKConfig+0x6e>

#if defined(SAI1)
      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	3304      	adds	r3, #4
 8009440:	4618      	mov	r0, r3
 8009442:	f000 f947 	bl	80096d4 <RCCEx_PLLSAI1_ConfigNP>
 8009446:	4603      	mov	r3, r0
 8009448:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 800944a:	e005      	b.n	8009458 <HAL_RCCEx_PeriphCLKConfig+0x6e>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 800944c:	2301      	movs	r3, #1
 800944e:	77fb      	strb	r3, [r7, #31]
        break;
 8009450:	e002      	b.n	8009458 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        break;
 8009452:	bf00      	nop
 8009454:	e000      	b.n	8009458 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        break;
 8009456:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009458:	7ffb      	ldrb	r3, [r7, #31]
 800945a:	2b00      	cmp	r3, #0
 800945c:	d105      	bne.n	800946a <HAL_RCCEx_PeriphCLKConfig+0x80>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009462:	4618      	mov	r0, r3
 8009464:	f7ff fee9 	bl	800923a <LL_RCC_SetSAIClockSource>
 8009468:	e001      	b.n	800946e <HAL_RCCEx_PeriphCLKConfig+0x84>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800946a:	7ffb      	ldrb	r3, [r7, #31]
 800946c:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	681b      	ldr	r3, [r3, #0]
 8009472:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009476:	2b00      	cmp	r3, #0
 8009478:	d046      	beq.n	8009508 <HAL_RCCEx_PeriphCLKConfig+0x11e>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 800947a:	f7ff ff57 	bl	800932c <LL_RCC_GetRTCClockSource>
 800947e:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009484:	69ba      	ldr	r2, [r7, #24]
 8009486:	429a      	cmp	r2, r3
 8009488:	d03c      	beq.n	8009504 <HAL_RCCEx_PeriphCLKConfig+0x11a>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 800948a:	f7fe fc27 	bl	8007cdc <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 800948e:	69bb      	ldr	r3, [r7, #24]
 8009490:	2b00      	cmp	r3, #0
 8009492:	d105      	bne.n	80094a0 <HAL_RCCEx_PeriphCLKConfig+0xb6>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009498:	4618      	mov	r0, r3
 800949a:	f7ff ff31 	bl	8009300 <LL_RCC_SetRTCClockSource>
 800949e:	e02e      	b.n	80094fe <HAL_RCCEx_PeriphCLKConfig+0x114>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 80094a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80094a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80094a8:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 80094aa:	f7ff ff4c 	bl	8009346 <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 80094ae:	f7ff ff5b 	bl	8009368 <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 80094b2:	697b      	ldr	r3, [r7, #20]
 80094b4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80094bc:	4313      	orrs	r3, r2
 80094be:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 80094c0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80094c4:	697b      	ldr	r3, [r7, #20]
 80094c6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 80094ca:	f7ff fdf1 	bl	80090b0 <LL_RCC_LSE_IsEnabled>
 80094ce:	4603      	mov	r3, r0
 80094d0:	2b01      	cmp	r3, #1
 80094d2:	d114      	bne.n	80094fe <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80094d4:	f7fd f8c6 	bl	8006664 <HAL_GetTick>
 80094d8:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 80094da:	e00b      	b.n	80094f4 <HAL_RCCEx_PeriphCLKConfig+0x10a>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80094dc:	f7fd f8c2 	bl	8006664 <HAL_GetTick>
 80094e0:	4602      	mov	r2, r0
 80094e2:	693b      	ldr	r3, [r7, #16]
 80094e4:	1ad3      	subs	r3, r2, r3
 80094e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80094ea:	4293      	cmp	r3, r2
 80094ec:	d902      	bls.n	80094f4 <HAL_RCCEx_PeriphCLKConfig+0x10a>
            {
              ret = HAL_TIMEOUT;
 80094ee:	2303      	movs	r3, #3
 80094f0:	77fb      	strb	r3, [r7, #31]
              break;
 80094f2:	e004      	b.n	80094fe <HAL_RCCEx_PeriphCLKConfig+0x114>
          while (LL_RCC_LSE_IsReady() != 1U)
 80094f4:	f7ff fdee 	bl	80090d4 <LL_RCC_LSE_IsReady>
 80094f8:	4603      	mov	r3, r0
 80094fa:	2b01      	cmp	r3, #1
 80094fc:	d1ee      	bne.n	80094dc <HAL_RCCEx_PeriphCLKConfig+0xf2>
          }
        }
      }

      /* set overall return value */
      status = ret;
 80094fe:	7ffb      	ldrb	r3, [r7, #31]
 8009500:	77bb      	strb	r3, [r7, #30]
 8009502:	e001      	b.n	8009508 <HAL_RCCEx_PeriphCLKConfig+0x11e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009504:	7ffb      	ldrb	r3, [r7, #31]
 8009506:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	681b      	ldr	r3, [r3, #0]
 800950c:	f003 0301 	and.w	r3, r3, #1
 8009510:	2b00      	cmp	r3, #0
 8009512:	d004      	beq.n	800951e <HAL_RCCEx_PeriphCLKConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	699b      	ldr	r3, [r3, #24]
 8009518:	4618      	mov	r0, r3
 800951a:	f7ff fe2b 	bl	8009174 <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	681b      	ldr	r3, [r3, #0]
 8009522:	f003 0302 	and.w	r3, r3, #2
 8009526:	2b00      	cmp	r3, #0
 8009528:	d004      	beq.n	8009534 <HAL_RCCEx_PeriphCLKConfig+0x14a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	69db      	ldr	r3, [r3, #28]
 800952e:	4618      	mov	r0, r3
 8009530:	f7ff fe36 	bl	80091a0 <LL_RCC_SetLPUARTClockSource>
  }
#endif

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	681b      	ldr	r3, [r3, #0]
 8009538:	f003 0310 	and.w	r3, r3, #16
 800953c:	2b00      	cmp	r3, #0
 800953e:	d004      	beq.n	800954a <HAL_RCCEx_PeriphCLKConfig+0x160>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009544:	4618      	mov	r0, r3
 8009546:	f7ff fe5e 	bl	8009206 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	681b      	ldr	r3, [r3, #0]
 800954e:	f003 0320 	and.w	r3, r3, #32
 8009552:	2b00      	cmp	r3, #0
 8009554:	d004      	beq.n	8009560 <HAL_RCCEx_PeriphCLKConfig+0x176>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800955a:	4618      	mov	r0, r3
 800955c:	f7ff fe53 	bl	8009206 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	681b      	ldr	r3, [r3, #0]
 8009564:	f003 0304 	and.w	r3, r3, #4
 8009568:	2b00      	cmp	r3, #0
 800956a:	d004      	beq.n	8009576 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	6a1b      	ldr	r3, [r3, #32]
 8009570:	4618      	mov	r0, r3
 8009572:	f7ff fe2b 	bl	80091cc <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	681b      	ldr	r3, [r3, #0]
 800957a:	f003 0308 	and.w	r3, r3, #8
 800957e:	2b00      	cmp	r3, #0
 8009580:	d004      	beq.n	800958c <HAL_RCCEx_PeriphCLKConfig+0x1a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009586:	4618      	mov	r0, r3
 8009588:	f7ff fe20 	bl	80091cc <LL_RCC_SetI2CClockSource>
  }
#endif

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	681b      	ldr	r3, [r3, #0]
 8009590:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009594:	2b00      	cmp	r3, #0
 8009596:	d022      	beq.n	80095de <HAL_RCCEx_PeriphCLKConfig+0x1f4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800959c:	4618      	mov	r0, r3
 800959e:	f7ff fe8e 	bl	80092be <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80095a6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80095aa:	d107      	bne.n	80095bc <HAL_RCCEx_PeriphCLKConfig+0x1d2>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 80095ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80095b0:	68db      	ldr	r3, [r3, #12]
 80095b2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80095b6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80095ba:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
  if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80095c0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80095c4:	d10b      	bne.n	80095de <HAL_RCCEx_PeriphCLKConfig+0x1f4>
  {
    /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
    ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	3304      	adds	r3, #4
 80095ca:	4618      	mov	r0, r3
 80095cc:	f000 f8dd 	bl	800978a <RCCEx_PLLSAI1_ConfigNQ>
 80095d0:	4603      	mov	r3, r0
 80095d2:	77fb      	strb	r3, [r7, #31]

    if (ret != HAL_OK)
 80095d4:	7ffb      	ldrb	r3, [r7, #31]
 80095d6:	2b00      	cmp	r3, #0
 80095d8:	d001      	beq.n	80095de <HAL_RCCEx_PeriphCLKConfig+0x1f4>
    {
      /* set overall return value */
      status = ret;
 80095da:	7ffb      	ldrb	r3, [r7, #31]
 80095dc:	77bb      	strb	r3, [r7, #30]
#endif
  }
#endif

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	681b      	ldr	r3, [r3, #0]
 80095e2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80095e6:	2b00      	cmp	r3, #0
 80095e8:	d02b      	beq.n	8009642 <HAL_RCCEx_PeriphCLKConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80095ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80095f2:	d008      	beq.n	8009606 <HAL_RCCEx_PeriphCLKConfig+0x21c>
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80095f8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80095fc:	d003      	beq.n	8009606 <HAL_RCCEx_PeriphCLKConfig+0x21c>
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009602:	2b00      	cmp	r3, #0
 8009604:	d105      	bne.n	8009612 <HAL_RCCEx_PeriphCLKConfig+0x228>
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800960a:	4618      	mov	r0, r3
 800960c:	f7ff fe2b 	bl	8009266 <LL_RCC_SetRNGClockSource>
 8009610:	e00a      	b.n	8009628 <HAL_RCCEx_PeriphCLKConfig+0x23e>
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009616:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800961a:	60fb      	str	r3, [r7, #12]
 800961c:	2000      	movs	r0, #0
 800961e:	f7ff fe22 	bl	8009266 <LL_RCC_SetRNGClockSource>
 8009622:	68f8      	ldr	r0, [r7, #12]
 8009624:	f7ff fe35 	bl	8009292 <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800962c:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 8009630:	d107      	bne.n	8009642 <HAL_RCCEx_PeriphCLKConfig+0x258>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8009632:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009636:	68db      	ldr	r3, [r3, #12]
 8009638:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800963c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009640:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	681b      	ldr	r3, [r3, #0]
 8009646:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800964a:	2b00      	cmp	r3, #0
 800964c:	d022      	beq.n	8009694 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009652:	4618      	mov	r0, r3
 8009654:	f7ff fe3e 	bl	80092d4 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800965c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009660:	d107      	bne.n	8009672 <HAL_RCCEx_PeriphCLKConfig+0x288>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8009662:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009666:	68db      	ldr	r3, [r3, #12]
 8009668:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800966c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009670:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
  if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009676:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800967a:	d10b      	bne.n	8009694 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
    ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	3304      	adds	r3, #4
 8009680:	4618      	mov	r0, r3
 8009682:	f000 f8dd 	bl	8009840 <RCCEx_PLLSAI1_ConfigNR>
 8009686:	4603      	mov	r3, r0
 8009688:	77fb      	strb	r3, [r7, #31]

    if (ret != HAL_OK)
 800968a:	7ffb      	ldrb	r3, [r7, #31]
 800968c:	2b00      	cmp	r3, #0
 800968e:	d001      	beq.n	8009694 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
    {
      /* set overall return value */
      status = ret;
 8009690:	7ffb      	ldrb	r3, [r7, #31]
 8009692:	77bb      	strb	r3, [r7, #30]
  }
#endif
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	681b      	ldr	r3, [r3, #0]
 8009698:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800969c:	2b00      	cmp	r3, #0
 800969e:	d004      	beq.n	80096aa <HAL_RCCEx_PeriphCLKConfig+0x2c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80096a4:	4618      	mov	r0, r3
 80096a6:	f7ff fd27 	bl	80090f8 <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	681b      	ldr	r3, [r3, #0]
 80096ae:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80096b2:	2b00      	cmp	r3, #0
 80096b4:	d009      	beq.n	80096ca <HAL_RCCEx_PeriphCLKConfig+0x2e0>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80096ba:	4618      	mov	r0, r3
 80096bc:	f7ff fd46 	bl	800914c <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80096c4:	4618      	mov	r0, r3
 80096c6:	f7ff fd2d 	bl	8009124 <LL_RCC_SetSMPSClockSource>
  }
#endif


  return status;
 80096ca:	7fbb      	ldrb	r3, [r7, #30]
}
 80096cc:	4618      	mov	r0, r3
 80096ce:	3720      	adds	r7, #32
 80096d0:	46bd      	mov	sp, r7
 80096d2:	bd80      	pop	{r7, pc}

080096d4 <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 80096d4:	b580      	push	{r7, lr}
 80096d6:	b084      	sub	sp, #16
 80096d8:	af00      	add	r7, sp, #0
 80096da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80096dc:	2300      	movs	r3, #0
 80096de:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 80096e0:	f7ff fe62 	bl	80093a8 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80096e4:	f7fc ffbe 	bl	8006664 <HAL_GetTick>
 80096e8:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80096ea:	e009      	b.n	8009700 <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80096ec:	f7fc ffba 	bl	8006664 <HAL_GetTick>
 80096f0:	4602      	mov	r2, r0
 80096f2:	68bb      	ldr	r3, [r7, #8]
 80096f4:	1ad3      	subs	r3, r2, r3
 80096f6:	2b02      	cmp	r3, #2
 80096f8:	d902      	bls.n	8009700 <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 80096fa:	2303      	movs	r3, #3
 80096fc:	73fb      	strb	r3, [r7, #15]
      break;
 80096fe:	e004      	b.n	800970a <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8009700:	f7ff fe61 	bl	80093c6 <LL_RCC_PLLSAI1_IsReady>
 8009704:	4603      	mov	r3, r0
 8009706:	2b00      	cmp	r3, #0
 8009708:	d1f0      	bne.n	80096ec <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 800970a:	7bfb      	ldrb	r3, [r7, #15]
 800970c:	2b00      	cmp	r3, #0
 800970e:	d137      	bne.n	8009780 <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8009710:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009714:	691b      	ldr	r3, [r3, #16]
 8009716:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	681b      	ldr	r3, [r3, #0]
 800971e:	021b      	lsls	r3, r3, #8
 8009720:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8009724:	4313      	orrs	r3, r2
 8009726:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 8009728:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800972c:	691b      	ldr	r3, [r3, #16]
 800972e:	f423 1278 	bic.w	r2, r3, #4063232	; 0x3e0000
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	685b      	ldr	r3, [r3, #4]
 8009736:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800973a:	4313      	orrs	r3, r2
 800973c:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800973e:	f7ff fe24 	bl	800938a <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009742:	f7fc ff8f 	bl	8006664 <HAL_GetTick>
 8009746:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8009748:	e009      	b.n	800975e <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800974a:	f7fc ff8b 	bl	8006664 <HAL_GetTick>
 800974e:	4602      	mov	r2, r0
 8009750:	68bb      	ldr	r3, [r7, #8]
 8009752:	1ad3      	subs	r3, r2, r3
 8009754:	2b02      	cmp	r3, #2
 8009756:	d902      	bls.n	800975e <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 8009758:	2303      	movs	r3, #3
 800975a:	73fb      	strb	r3, [r7, #15]
        break;
 800975c:	e004      	b.n	8009768 <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800975e:	f7ff fe32 	bl	80093c6 <LL_RCC_PLLSAI1_IsReady>
 8009762:	4603      	mov	r3, r0
 8009764:	2b01      	cmp	r3, #1
 8009766:	d1f0      	bne.n	800974a <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 8009768:	7bfb      	ldrb	r3, [r7, #15]
 800976a:	2b00      	cmp	r3, #0
 800976c:	d108      	bne.n	8009780 <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800976e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009772:	691a      	ldr	r2, [r3, #16]
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	691b      	ldr	r3, [r3, #16]
 8009778:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800977c:	4313      	orrs	r3, r2
 800977e:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8009780:	7bfb      	ldrb	r3, [r7, #15]
}
 8009782:	4618      	mov	r0, r3
 8009784:	3710      	adds	r7, #16
 8009786:	46bd      	mov	sp, r7
 8009788:	bd80      	pop	{r7, pc}

0800978a <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800978a:	b580      	push	{r7, lr}
 800978c:	b084      	sub	sp, #16
 800978e:	af00      	add	r7, sp, #0
 8009790:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009792:	2300      	movs	r3, #0
 8009794:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8009796:	f7ff fe07 	bl	80093a8 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800979a:	f7fc ff63 	bl	8006664 <HAL_GetTick>
 800979e:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80097a0:	e009      	b.n	80097b6 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80097a2:	f7fc ff5f 	bl	8006664 <HAL_GetTick>
 80097a6:	4602      	mov	r2, r0
 80097a8:	68bb      	ldr	r3, [r7, #8]
 80097aa:	1ad3      	subs	r3, r2, r3
 80097ac:	2b02      	cmp	r3, #2
 80097ae:	d902      	bls.n	80097b6 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 80097b0:	2303      	movs	r3, #3
 80097b2:	73fb      	strb	r3, [r7, #15]
      break;
 80097b4:	e004      	b.n	80097c0 <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80097b6:	f7ff fe06 	bl	80093c6 <LL_RCC_PLLSAI1_IsReady>
 80097ba:	4603      	mov	r3, r0
 80097bc:	2b00      	cmp	r3, #0
 80097be:	d1f0      	bne.n	80097a2 <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 80097c0:	7bfb      	ldrb	r3, [r7, #15]
 80097c2:	2b00      	cmp	r3, #0
 80097c4:	d137      	bne.n	8009836 <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 80097c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80097ca:	691b      	ldr	r3, [r3, #16]
 80097cc:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	681b      	ldr	r3, [r3, #0]
 80097d4:	021b      	lsls	r3, r3, #8
 80097d6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80097da:	4313      	orrs	r3, r2
 80097dc:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 80097de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80097e2:	691b      	ldr	r3, [r3, #16]
 80097e4:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	689b      	ldr	r3, [r3, #8]
 80097ec:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80097f0:	4313      	orrs	r3, r2
 80097f2:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 80097f4:	f7ff fdc9 	bl	800938a <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80097f8:	f7fc ff34 	bl	8006664 <HAL_GetTick>
 80097fc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80097fe:	e009      	b.n	8009814 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8009800:	f7fc ff30 	bl	8006664 <HAL_GetTick>
 8009804:	4602      	mov	r2, r0
 8009806:	68bb      	ldr	r3, [r7, #8]
 8009808:	1ad3      	subs	r3, r2, r3
 800980a:	2b02      	cmp	r3, #2
 800980c:	d902      	bls.n	8009814 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 800980e:	2303      	movs	r3, #3
 8009810:	73fb      	strb	r3, [r7, #15]
        break;
 8009812:	e004      	b.n	800981e <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8009814:	f7ff fdd7 	bl	80093c6 <LL_RCC_PLLSAI1_IsReady>
 8009818:	4603      	mov	r3, r0
 800981a:	2b01      	cmp	r3, #1
 800981c:	d1f0      	bne.n	8009800 <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 800981e:	7bfb      	ldrb	r3, [r7, #15]
 8009820:	2b00      	cmp	r3, #0
 8009822:	d108      	bne.n	8009836 <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8009824:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009828:	691a      	ldr	r2, [r3, #16]
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	691b      	ldr	r3, [r3, #16]
 800982e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8009832:	4313      	orrs	r3, r2
 8009834:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8009836:	7bfb      	ldrb	r3, [r7, #15]
}
 8009838:	4618      	mov	r0, r3
 800983a:	3710      	adds	r7, #16
 800983c:	46bd      	mov	sp, r7
 800983e:	bd80      	pop	{r7, pc}

08009840 <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8009840:	b580      	push	{r7, lr}
 8009842:	b084      	sub	sp, #16
 8009844:	af00      	add	r7, sp, #0
 8009846:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009848:	2300      	movs	r3, #0
 800984a:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800984c:	f7ff fdac 	bl	80093a8 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8009850:	f7fc ff08 	bl	8006664 <HAL_GetTick>
 8009854:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8009856:	e009      	b.n	800986c <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8009858:	f7fc ff04 	bl	8006664 <HAL_GetTick>
 800985c:	4602      	mov	r2, r0
 800985e:	68bb      	ldr	r3, [r7, #8]
 8009860:	1ad3      	subs	r3, r2, r3
 8009862:	2b02      	cmp	r3, #2
 8009864:	d902      	bls.n	800986c <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 8009866:	2303      	movs	r3, #3
 8009868:	73fb      	strb	r3, [r7, #15]
      break;
 800986a:	e004      	b.n	8009876 <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800986c:	f7ff fdab 	bl	80093c6 <LL_RCC_PLLSAI1_IsReady>
 8009870:	4603      	mov	r3, r0
 8009872:	2b00      	cmp	r3, #0
 8009874:	d1f0      	bne.n	8009858 <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 8009876:	7bfb      	ldrb	r3, [r7, #15]
 8009878:	2b00      	cmp	r3, #0
 800987a:	d137      	bne.n	80098ec <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800987c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009880:	691b      	ldr	r3, [r3, #16]
 8009882:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	681b      	ldr	r3, [r3, #0]
 800988a:	021b      	lsls	r3, r3, #8
 800988c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8009890:	4313      	orrs	r3, r2
 8009892:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 8009894:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009898:	691b      	ldr	r3, [r3, #16]
 800989a:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	68db      	ldr	r3, [r3, #12]
 80098a2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80098a6:	4313      	orrs	r3, r2
 80098a8:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 80098aa:	f7ff fd6e 	bl	800938a <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80098ae:	f7fc fed9 	bl	8006664 <HAL_GetTick>
 80098b2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80098b4:	e009      	b.n	80098ca <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80098b6:	f7fc fed5 	bl	8006664 <HAL_GetTick>
 80098ba:	4602      	mov	r2, r0
 80098bc:	68bb      	ldr	r3, [r7, #8]
 80098be:	1ad3      	subs	r3, r2, r3
 80098c0:	2b02      	cmp	r3, #2
 80098c2:	d902      	bls.n	80098ca <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 80098c4:	2303      	movs	r3, #3
 80098c6:	73fb      	strb	r3, [r7, #15]
        break;
 80098c8:	e004      	b.n	80098d4 <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80098ca:	f7ff fd7c 	bl	80093c6 <LL_RCC_PLLSAI1_IsReady>
 80098ce:	4603      	mov	r3, r0
 80098d0:	2b01      	cmp	r3, #1
 80098d2:	d1f0      	bne.n	80098b6 <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 80098d4:	7bfb      	ldrb	r3, [r7, #15]
 80098d6:	2b00      	cmp	r3, #0
 80098d8:	d108      	bne.n	80098ec <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80098da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80098de:	691a      	ldr	r2, [r3, #16]
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	691b      	ldr	r3, [r3, #16]
 80098e4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80098e8:	4313      	orrs	r3, r2
 80098ea:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 80098ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80098ee:	4618      	mov	r0, r3
 80098f0:	3710      	adds	r7, #16
 80098f2:	46bd      	mov	sp, r7
 80098f4:	bd80      	pop	{r7, pc}

080098f6 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80098f6:	b580      	push	{r7, lr}
 80098f8:	b082      	sub	sp, #8
 80098fa:	af00      	add	r7, sp, #0
 80098fc:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	2b00      	cmp	r3, #0
 8009902:	d101      	bne.n	8009908 <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 8009904:	2301      	movs	r3, #1
 8009906:	e090      	b.n	8009a2a <HAL_RTC_Init+0x134>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800990e:	b2db      	uxtb	r3, r3
 8009910:	2b00      	cmp	r3, #0
 8009912:	d106      	bne.n	8009922 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	2200      	movs	r2, #0
 8009918:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800991c:	6878      	ldr	r0, [r7, #4]
 800991e:	f7fc f86b 	bl	80059f8 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	2202      	movs	r2, #2
 8009926:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	681b      	ldr	r3, [r3, #0]
 800992e:	22ca      	movs	r2, #202	; 0xca
 8009930:	625a      	str	r2, [r3, #36]	; 0x24
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	681b      	ldr	r3, [r3, #0]
 8009936:	2253      	movs	r2, #83	; 0x53
 8009938:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800993a:	6878      	ldr	r0, [r7, #4]
 800993c:	f000 faba 	bl	8009eb4 <RTC_EnterInitMode>
 8009940:	4603      	mov	r3, r0
 8009942:	2b00      	cmp	r3, #0
 8009944:	d009      	beq.n	800995a <HAL_RTC_Init+0x64>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	681b      	ldr	r3, [r3, #0]
 800994a:	22ff      	movs	r2, #255	; 0xff
 800994c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	2204      	movs	r2, #4
 8009952:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    return HAL_ERROR;
 8009956:	2301      	movs	r3, #1
 8009958:	e067      	b.n	8009a2a <HAL_RTC_Init+0x134>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	681b      	ldr	r3, [r3, #0]
 800995e:	689b      	ldr	r3, [r3, #8]
 8009960:	687a      	ldr	r2, [r7, #4]
 8009962:	6812      	ldr	r2, [r2, #0]
 8009964:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8009968:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800996c:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	681b      	ldr	r3, [r3, #0]
 8009972:	6899      	ldr	r1, [r3, #8]
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	685a      	ldr	r2, [r3, #4]
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	691b      	ldr	r3, [r3, #16]
 800997c:	431a      	orrs	r2, r3
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	699b      	ldr	r3, [r3, #24]
 8009982:	431a      	orrs	r2, r3
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	681b      	ldr	r3, [r3, #0]
 8009988:	430a      	orrs	r2, r1
 800998a:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	681b      	ldr	r3, [r3, #0]
 8009990:	687a      	ldr	r2, [r7, #4]
 8009992:	68d2      	ldr	r2, [r2, #12]
 8009994:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	681b      	ldr	r3, [r3, #0]
 800999a:	6919      	ldr	r1, [r3, #16]
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	689b      	ldr	r3, [r3, #8]
 80099a0:	041a      	lsls	r2, r3, #16
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	681b      	ldr	r3, [r3, #0]
 80099a6:	430a      	orrs	r2, r1
 80099a8:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	681b      	ldr	r3, [r3, #0]
 80099ae:	68da      	ldr	r2, [r3, #12]
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	681b      	ldr	r3, [r3, #0]
 80099b4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80099b8:	60da      	str	r2, [r3, #12]

    hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	681b      	ldr	r3, [r3, #0]
 80099be:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	681b      	ldr	r3, [r3, #0]
 80099c4:	f022 0203 	bic.w	r2, r2, #3
 80099c8:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	681b      	ldr	r3, [r3, #0]
 80099ce:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	69da      	ldr	r2, [r3, #28]
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	695b      	ldr	r3, [r3, #20]
 80099d8:	431a      	orrs	r2, r3
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	681b      	ldr	r3, [r3, #0]
 80099de:	430a      	orrs	r2, r1
 80099e0:	64da      	str	r2, [r3, #76]	; 0x4c

    /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	681b      	ldr	r3, [r3, #0]
 80099e6:	689b      	ldr	r3, [r3, #8]
 80099e8:	f003 0320 	and.w	r3, r3, #32
 80099ec:	2b00      	cmp	r3, #0
 80099ee:	d113      	bne.n	8009a18 <HAL_RTC_Init+0x122>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80099f0:	6878      	ldr	r0, [r7, #4]
 80099f2:	f000 fa39 	bl	8009e68 <HAL_RTC_WaitForSynchro>
 80099f6:	4603      	mov	r3, r0
 80099f8:	2b00      	cmp	r3, #0
 80099fa:	d00d      	beq.n	8009a18 <HAL_RTC_Init+0x122>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	681b      	ldr	r3, [r3, #0]
 8009a00:	22ff      	movs	r2, #255	; 0xff
 8009a02:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	2204      	movs	r2, #4
 8009a08:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */ 
        __HAL_UNLOCK(hrtc);
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	2200      	movs	r2, #0
 8009a10:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8009a14:	2301      	movs	r3, #1
 8009a16:	e008      	b.n	8009a2a <HAL_RTC_Init+0x134>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	681b      	ldr	r3, [r3, #0]
 8009a1c:	22ff      	movs	r2, #255	; 0xff
 8009a1e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	2201      	movs	r2, #1
 8009a24:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    return HAL_OK;
 8009a28:	2300      	movs	r3, #0
  }
}
 8009a2a:	4618      	mov	r0, r3
 8009a2c:	3708      	adds	r7, #8
 8009a2e:	46bd      	mov	sp, r7
 8009a30:	bd80      	pop	{r7, pc}

08009a32 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format 
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8009a32:	b590      	push	{r4, r7, lr}
 8009a34:	b087      	sub	sp, #28
 8009a36:	af00      	add	r7, sp, #0
 8009a38:	60f8      	str	r0, [r7, #12]
 8009a3a:	60b9      	str	r1, [r7, #8]
 8009a3c:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */ 
  __HAL_LOCK(hrtc);
 8009a3e:	68fb      	ldr	r3, [r7, #12]
 8009a40:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009a44:	2b01      	cmp	r3, #1
 8009a46:	d101      	bne.n	8009a4c <HAL_RTC_SetTime+0x1a>
 8009a48:	2302      	movs	r3, #2
 8009a4a:	e0b2      	b.n	8009bb2 <HAL_RTC_SetTime+0x180>
 8009a4c:	68fb      	ldr	r3, [r7, #12]
 8009a4e:	2201      	movs	r2, #1
 8009a50:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8009a54:	68fb      	ldr	r3, [r7, #12]
 8009a56:	2202      	movs	r2, #2
 8009a58:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if(Format == RTC_FORMAT_BIN)
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	2b00      	cmp	r3, #0
 8009a60:	d126      	bne.n	8009ab0 <HAL_RTC_SetTime+0x7e>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8009a62:	68fb      	ldr	r3, [r7, #12]
 8009a64:	681b      	ldr	r3, [r3, #0]
 8009a66:	689b      	ldr	r3, [r3, #8]
 8009a68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009a6c:	2b00      	cmp	r3, #0
 8009a6e:	d102      	bne.n	8009a76 <HAL_RTC_SetTime+0x44>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8009a70:	68bb      	ldr	r3, [r7, #8]
 8009a72:	2200      	movs	r2, #0
 8009a74:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8009a76:	68bb      	ldr	r3, [r7, #8]
 8009a78:	781b      	ldrb	r3, [r3, #0]
 8009a7a:	4618      	mov	r0, r3
 8009a7c:	f000 fa44 	bl	8009f08 <RTC_ByteToBcd2>
 8009a80:	4603      	mov	r3, r0
 8009a82:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8009a84:	68bb      	ldr	r3, [r7, #8]
 8009a86:	785b      	ldrb	r3, [r3, #1]
 8009a88:	4618      	mov	r0, r3
 8009a8a:	f000 fa3d 	bl	8009f08 <RTC_ByteToBcd2>
 8009a8e:	4603      	mov	r3, r0
 8009a90:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8009a92:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8009a94:	68bb      	ldr	r3, [r7, #8]
 8009a96:	789b      	ldrb	r3, [r3, #2]
 8009a98:	4618      	mov	r0, r3
 8009a9a:	f000 fa35 	bl	8009f08 <RTC_ByteToBcd2>
 8009a9e:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8009aa0:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 8009aa4:	68bb      	ldr	r3, [r7, #8]
 8009aa6:	78db      	ldrb	r3, [r3, #3]
 8009aa8:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8009aaa:	4313      	orrs	r3, r2
 8009aac:	617b      	str	r3, [r7, #20]
 8009aae:	e018      	b.n	8009ae2 <HAL_RTC_SetTime+0xb0>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8009ab0:	68fb      	ldr	r3, [r7, #12]
 8009ab2:	681b      	ldr	r3, [r3, #0]
 8009ab4:	689b      	ldr	r3, [r3, #8]
 8009ab6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009aba:	2b00      	cmp	r3, #0
 8009abc:	d102      	bne.n	8009ac4 <HAL_RTC_SetTime+0x92>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8009abe:	68bb      	ldr	r3, [r7, #8]
 8009ac0:	2200      	movs	r2, #0
 8009ac2:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8009ac4:	68bb      	ldr	r3, [r7, #8]
 8009ac6:	781b      	ldrb	r3, [r3, #0]
 8009ac8:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8009aca:	68bb      	ldr	r3, [r7, #8]
 8009acc:	785b      	ldrb	r3, [r3, #1]
 8009ace:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8009ad0:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 8009ad2:	68ba      	ldr	r2, [r7, #8]
 8009ad4:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8009ad6:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 8009ad8:	68bb      	ldr	r3, [r7, #8]
 8009ada:	78db      	ldrb	r3, [r3, #3]
 8009adc:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8009ade:	4313      	orrs	r3, r2
 8009ae0:	617b      	str	r3, [r7, #20]
  }
  UNUSED(tmpreg);
  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009ae2:	68fb      	ldr	r3, [r7, #12]
 8009ae4:	681b      	ldr	r3, [r3, #0]
 8009ae6:	22ca      	movs	r2, #202	; 0xca
 8009ae8:	625a      	str	r2, [r3, #36]	; 0x24
 8009aea:	68fb      	ldr	r3, [r7, #12]
 8009aec:	681b      	ldr	r3, [r3, #0]
 8009aee:	2253      	movs	r2, #83	; 0x53
 8009af0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8009af2:	68f8      	ldr	r0, [r7, #12]
 8009af4:	f000 f9de 	bl	8009eb4 <RTC_EnterInitMode>
 8009af8:	4603      	mov	r3, r0
 8009afa:	2b00      	cmp	r3, #0
 8009afc:	d00d      	beq.n	8009b1a <HAL_RTC_SetTime+0xe8>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009afe:	68fb      	ldr	r3, [r7, #12]
 8009b00:	681b      	ldr	r3, [r3, #0]
 8009b02:	22ff      	movs	r2, #255	; 0xff
 8009b04:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8009b06:	68fb      	ldr	r3, [r7, #12]
 8009b08:	2204      	movs	r2, #4
 8009b0a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */ 
    __HAL_UNLOCK(hrtc);
 8009b0e:	68fb      	ldr	r3, [r7, #12]
 8009b10:	2200      	movs	r2, #0
 8009b12:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_ERROR;
 8009b16:	2301      	movs	r3, #1
 8009b18:	e04b      	b.n	8009bb2 <HAL_RTC_SetTime+0x180>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8009b1a:	68fb      	ldr	r3, [r7, #12]
 8009b1c:	681a      	ldr	r2, [r3, #0]
 8009b1e:	697b      	ldr	r3, [r7, #20]
 8009b20:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8009b24:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8009b28:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8009b2a:	68fb      	ldr	r3, [r7, #12]
 8009b2c:	681b      	ldr	r3, [r3, #0]
 8009b2e:	689a      	ldr	r2, [r3, #8]
 8009b30:	68fb      	ldr	r3, [r7, #12]
 8009b32:	681b      	ldr	r3, [r3, #0]
 8009b34:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8009b38:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8009b3a:	68fb      	ldr	r3, [r7, #12]
 8009b3c:	681b      	ldr	r3, [r3, #0]
 8009b3e:	6899      	ldr	r1, [r3, #8]
 8009b40:	68bb      	ldr	r3, [r7, #8]
 8009b42:	68da      	ldr	r2, [r3, #12]
 8009b44:	68bb      	ldr	r3, [r7, #8]
 8009b46:	691b      	ldr	r3, [r3, #16]
 8009b48:	431a      	orrs	r2, r3
 8009b4a:	68fb      	ldr	r3, [r7, #12]
 8009b4c:	681b      	ldr	r3, [r3, #0]
 8009b4e:	430a      	orrs	r2, r1
 8009b50:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8009b52:	68fb      	ldr	r3, [r7, #12]
 8009b54:	681b      	ldr	r3, [r3, #0]
 8009b56:	68da      	ldr	r2, [r3, #12]
 8009b58:	68fb      	ldr	r3, [r7, #12]
 8009b5a:	681b      	ldr	r3, [r3, #0]
 8009b5c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009b60:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8009b62:	68fb      	ldr	r3, [r7, #12]
 8009b64:	681b      	ldr	r3, [r3, #0]
 8009b66:	689b      	ldr	r3, [r3, #8]
 8009b68:	f003 0320 	and.w	r3, r3, #32
 8009b6c:	2b00      	cmp	r3, #0
 8009b6e:	d113      	bne.n	8009b98 <HAL_RTC_SetTime+0x166>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8009b70:	68f8      	ldr	r0, [r7, #12]
 8009b72:	f000 f979 	bl	8009e68 <HAL_RTC_WaitForSynchro>
 8009b76:	4603      	mov	r3, r0
 8009b78:	2b00      	cmp	r3, #0
 8009b7a:	d00d      	beq.n	8009b98 <HAL_RTC_SetTime+0x166>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009b7c:	68fb      	ldr	r3, [r7, #12]
 8009b7e:	681b      	ldr	r3, [r3, #0]
 8009b80:	22ff      	movs	r2, #255	; 0xff
 8009b82:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8009b84:	68fb      	ldr	r3, [r7, #12]
 8009b86:	2204      	movs	r2, #4
 8009b88:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */ 
        __HAL_UNLOCK(hrtc);
 8009b8c:	68fb      	ldr	r3, [r7, #12]
 8009b8e:	2200      	movs	r2, #0
 8009b90:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8009b94:	2301      	movs	r3, #1
 8009b96:	e00c      	b.n	8009bb2 <HAL_RTC_SetTime+0x180>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009b98:	68fb      	ldr	r3, [r7, #12]
 8009b9a:	681b      	ldr	r3, [r3, #0]
 8009b9c:	22ff      	movs	r2, #255	; 0xff
 8009b9e:	625a      	str	r2, [r3, #36]	; 0x24
    
   hrtc->State = HAL_RTC_STATE_READY;
 8009ba0:	68fb      	ldr	r3, [r7, #12]
 8009ba2:	2201      	movs	r2, #1
 8009ba4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

   __HAL_UNLOCK(hrtc); 
 8009ba8:	68fb      	ldr	r3, [r7, #12]
 8009baa:	2200      	movs	r2, #0
 8009bac:	f883 2020 	strb.w	r2, [r3, #32]

   return HAL_OK;
 8009bb0:	2300      	movs	r3, #0
  }
}
 8009bb2:	4618      	mov	r0, r3
 8009bb4:	371c      	adds	r7, #28
 8009bb6:	46bd      	mov	sp, r7
 8009bb8:	bd90      	pop	{r4, r7, pc}

08009bba <HAL_RTC_GetTime>:
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read
  *        to ensure consistency between the time and date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8009bba:	b580      	push	{r7, lr}
 8009bbc:	b086      	sub	sp, #24
 8009bbe:	af00      	add	r7, sp, #0
 8009bc0:	60f8      	str	r0, [r7, #12]
 8009bc2:	60b9      	str	r1, [r7, #8]
 8009bc4:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8009bc6:	68fb      	ldr	r3, [r7, #12]
 8009bc8:	681b      	ldr	r3, [r3, #0]
 8009bca:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009bcc:	68bb      	ldr	r3, [r7, #8]
 8009bce:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8009bd0:	68fb      	ldr	r3, [r7, #12]
 8009bd2:	681b      	ldr	r3, [r3, #0]
 8009bd4:	691b      	ldr	r3, [r3, #16]
 8009bd6:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8009bda:	68bb      	ldr	r3, [r7, #8]
 8009bdc:	609a      	str	r2, [r3, #8]
  
  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8009bde:	68fb      	ldr	r3, [r7, #12]
 8009be0:	681b      	ldr	r3, [r3, #0]
 8009be2:	681b      	ldr	r3, [r3, #0]
 8009be4:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8009be8:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8009bec:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 8009bee:	697b      	ldr	r3, [r7, #20]
 8009bf0:	0c1b      	lsrs	r3, r3, #16
 8009bf2:	b2db      	uxtb	r3, r3
 8009bf4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009bf8:	b2da      	uxtb	r2, r3
 8009bfa:	68bb      	ldr	r3, [r7, #8]
 8009bfc:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >>8U);
 8009bfe:	697b      	ldr	r3, [r7, #20]
 8009c00:	0a1b      	lsrs	r3, r3, #8
 8009c02:	b2db      	uxtb	r3, r3
 8009c04:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009c08:	b2da      	uxtb	r2, r3
 8009c0a:	68bb      	ldr	r3, [r7, #8]
 8009c0c:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 8009c0e:	697b      	ldr	r3, [r7, #20]
 8009c10:	b2db      	uxtb	r3, r3
 8009c12:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009c16:	b2da      	uxtb	r2, r3
 8009c18:	68bb      	ldr	r3, [r7, #8]
 8009c1a:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 8009c1c:	697b      	ldr	r3, [r7, #20]
 8009c1e:	0c1b      	lsrs	r3, r3, #16
 8009c20:	b2db      	uxtb	r3, r3
 8009c22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009c26:	b2da      	uxtb	r2, r3
 8009c28:	68bb      	ldr	r3, [r7, #8]
 8009c2a:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	2b00      	cmp	r3, #0
 8009c30:	d11a      	bne.n	8009c68 <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8009c32:	68bb      	ldr	r3, [r7, #8]
 8009c34:	781b      	ldrb	r3, [r3, #0]
 8009c36:	4618      	mov	r0, r3
 8009c38:	f000 f986 	bl	8009f48 <RTC_Bcd2ToByte>
 8009c3c:	4603      	mov	r3, r0
 8009c3e:	461a      	mov	r2, r3
 8009c40:	68bb      	ldr	r3, [r7, #8]
 8009c42:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8009c44:	68bb      	ldr	r3, [r7, #8]
 8009c46:	785b      	ldrb	r3, [r3, #1]
 8009c48:	4618      	mov	r0, r3
 8009c4a:	f000 f97d 	bl	8009f48 <RTC_Bcd2ToByte>
 8009c4e:	4603      	mov	r3, r0
 8009c50:	461a      	mov	r2, r3
 8009c52:	68bb      	ldr	r3, [r7, #8]
 8009c54:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8009c56:	68bb      	ldr	r3, [r7, #8]
 8009c58:	789b      	ldrb	r3, [r3, #2]
 8009c5a:	4618      	mov	r0, r3
 8009c5c:	f000 f974 	bl	8009f48 <RTC_Bcd2ToByte>
 8009c60:	4603      	mov	r3, r0
 8009c62:	461a      	mov	r2, r3
 8009c64:	68bb      	ldr	r3, [r7, #8]
 8009c66:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8009c68:	2300      	movs	r3, #0
}
 8009c6a:	4618      	mov	r0, r3
 8009c6c:	3718      	adds	r7, #24
 8009c6e:	46bd      	mov	sp, r7
 8009c70:	bd80      	pop	{r7, pc}

08009c72 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format 
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8009c72:	b590      	push	{r4, r7, lr}
 8009c74:	b087      	sub	sp, #28
 8009c76:	af00      	add	r7, sp, #0
 8009c78:	60f8      	str	r0, [r7, #12]
 8009c7a:	60b9      	str	r1, [r7, #8]
 8009c7c:	607a      	str	r2, [r7, #4]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 8009c7e:	68fb      	ldr	r3, [r7, #12]
 8009c80:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009c84:	2b01      	cmp	r3, #1
 8009c86:	d101      	bne.n	8009c8c <HAL_RTC_SetDate+0x1a>
 8009c88:	2302      	movs	r3, #2
 8009c8a:	e09c      	b.n	8009dc6 <HAL_RTC_SetDate+0x154>
 8009c8c:	68fb      	ldr	r3, [r7, #12]
 8009c8e:	2201      	movs	r2, #1
 8009c90:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8009c94:	68fb      	ldr	r3, [r7, #12]
 8009c96:	2202      	movs	r2, #2
 8009c98:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	2b00      	cmp	r3, #0
 8009ca0:	d10e      	bne.n	8009cc0 <HAL_RTC_SetDate+0x4e>
 8009ca2:	68bb      	ldr	r3, [r7, #8]
 8009ca4:	785b      	ldrb	r3, [r3, #1]
 8009ca6:	f003 0310 	and.w	r3, r3, #16
 8009caa:	2b00      	cmp	r3, #0
 8009cac:	d008      	beq.n	8009cc0 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8009cae:	68bb      	ldr	r3, [r7, #8]
 8009cb0:	785b      	ldrb	r3, [r3, #1]
 8009cb2:	f023 0310 	bic.w	r3, r3, #16
 8009cb6:	b2db      	uxtb	r3, r3
 8009cb8:	330a      	adds	r3, #10
 8009cba:	b2da      	uxtb	r2, r3
 8009cbc:	68bb      	ldr	r3, [r7, #8]
 8009cbe:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	2b00      	cmp	r3, #0
 8009cc4:	d11c      	bne.n	8009d00 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8009cc6:	68bb      	ldr	r3, [r7, #8]
 8009cc8:	78db      	ldrb	r3, [r3, #3]
 8009cca:	4618      	mov	r0, r3
 8009ccc:	f000 f91c 	bl	8009f08 <RTC_ByteToBcd2>
 8009cd0:	4603      	mov	r3, r0
 8009cd2:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8009cd4:	68bb      	ldr	r3, [r7, #8]
 8009cd6:	785b      	ldrb	r3, [r3, #1]
 8009cd8:	4618      	mov	r0, r3
 8009cda:	f000 f915 	bl	8009f08 <RTC_ByteToBcd2>
 8009cde:	4603      	mov	r3, r0
 8009ce0:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8009ce2:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8009ce4:	68bb      	ldr	r3, [r7, #8]
 8009ce6:	789b      	ldrb	r3, [r3, #2]
 8009ce8:	4618      	mov	r0, r3
 8009cea:	f000 f90d 	bl	8009f08 <RTC_ByteToBcd2>
 8009cee:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8009cf0:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13U));
 8009cf4:	68bb      	ldr	r3, [r7, #8]
 8009cf6:	781b      	ldrb	r3, [r3, #0]
 8009cf8:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8009cfa:	4313      	orrs	r3, r2
 8009cfc:	617b      	str	r3, [r7, #20]
 8009cfe:	e00e      	b.n	8009d1e <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8009d00:	68bb      	ldr	r3, [r7, #8]
 8009d02:	78db      	ldrb	r3, [r3, #3]
 8009d04:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 8009d06:	68bb      	ldr	r3, [r7, #8]
 8009d08:	785b      	ldrb	r3, [r3, #1]
 8009d0a:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8009d0c:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 8009d0e:	68ba      	ldr	r2, [r7, #8]
 8009d10:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 8009d12:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 8009d14:	68bb      	ldr	r3, [r7, #8]
 8009d16:	781b      	ldrb	r3, [r3, #0]
 8009d18:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8009d1a:	4313      	orrs	r3, r2
 8009d1c:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009d1e:	68fb      	ldr	r3, [r7, #12]
 8009d20:	681b      	ldr	r3, [r3, #0]
 8009d22:	22ca      	movs	r2, #202	; 0xca
 8009d24:	625a      	str	r2, [r3, #36]	; 0x24
 8009d26:	68fb      	ldr	r3, [r7, #12]
 8009d28:	681b      	ldr	r3, [r3, #0]
 8009d2a:	2253      	movs	r2, #83	; 0x53
 8009d2c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8009d2e:	68f8      	ldr	r0, [r7, #12]
 8009d30:	f000 f8c0 	bl	8009eb4 <RTC_EnterInitMode>
 8009d34:	4603      	mov	r3, r0
 8009d36:	2b00      	cmp	r3, #0
 8009d38:	d00d      	beq.n	8009d56 <HAL_RTC_SetDate+0xe4>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009d3a:	68fb      	ldr	r3, [r7, #12]
 8009d3c:	681b      	ldr	r3, [r3, #0]
 8009d3e:	22ff      	movs	r2, #255	; 0xff
 8009d40:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 8009d42:	68fb      	ldr	r3, [r7, #12]
 8009d44:	2204      	movs	r2, #4
 8009d46:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */ 
    __HAL_UNLOCK(hrtc);
 8009d4a:	68fb      	ldr	r3, [r7, #12]
 8009d4c:	2200      	movs	r2, #0
 8009d4e:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_ERROR;
 8009d52:	2301      	movs	r3, #1
 8009d54:	e037      	b.n	8009dc6 <HAL_RTC_SetDate+0x154>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8009d56:	68fb      	ldr	r3, [r7, #12]
 8009d58:	681a      	ldr	r2, [r3, #0]
 8009d5a:	697b      	ldr	r3, [r7, #20]
 8009d5c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8009d60:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8009d64:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8009d66:	68fb      	ldr	r3, [r7, #12]
 8009d68:	681b      	ldr	r3, [r3, #0]
 8009d6a:	68da      	ldr	r2, [r3, #12]
 8009d6c:	68fb      	ldr	r3, [r7, #12]
 8009d6e:	681b      	ldr	r3, [r3, #0]
 8009d70:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009d74:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8009d76:	68fb      	ldr	r3, [r7, #12]
 8009d78:	681b      	ldr	r3, [r3, #0]
 8009d7a:	689b      	ldr	r3, [r3, #8]
 8009d7c:	f003 0320 	and.w	r3, r3, #32
 8009d80:	2b00      	cmp	r3, #0
 8009d82:	d113      	bne.n	8009dac <HAL_RTC_SetDate+0x13a>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8009d84:	68f8      	ldr	r0, [r7, #12]
 8009d86:	f000 f86f 	bl	8009e68 <HAL_RTC_WaitForSynchro>
 8009d8a:	4603      	mov	r3, r0
 8009d8c:	2b00      	cmp	r3, #0
 8009d8e:	d00d      	beq.n	8009dac <HAL_RTC_SetDate+0x13a>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);  
 8009d90:	68fb      	ldr	r3, [r7, #12]
 8009d92:	681b      	ldr	r3, [r3, #0]
 8009d94:	22ff      	movs	r2, #255	; 0xff
 8009d96:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8009d98:	68fb      	ldr	r3, [r7, #12]
 8009d9a:	2204      	movs	r2, #4
 8009d9c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */ 
        __HAL_UNLOCK(hrtc);
 8009da0:	68fb      	ldr	r3, [r7, #12]
 8009da2:	2200      	movs	r2, #0
 8009da4:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8009da8:	2301      	movs	r3, #1
 8009daa:	e00c      	b.n	8009dc6 <HAL_RTC_SetDate+0x154>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009dac:	68fb      	ldr	r3, [r7, #12]
 8009dae:	681b      	ldr	r3, [r3, #0]
 8009db0:	22ff      	movs	r2, #255	; 0xff
 8009db2:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 8009db4:	68fb      	ldr	r3, [r7, #12]
 8009db6:	2201      	movs	r2, #1
 8009db8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */ 
    __HAL_UNLOCK(hrtc);
 8009dbc:	68fb      	ldr	r3, [r7, #12]
 8009dbe:	2200      	movs	r2, #0
 8009dc0:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_OK;
 8009dc4:	2300      	movs	r3, #0
  }
}
 8009dc6:	4618      	mov	r0, r3
 8009dc8:	371c      	adds	r7, #28
 8009dca:	46bd      	mov	sp, r7
 8009dcc:	bd90      	pop	{r4, r7, pc}

08009dce <HAL_RTC_GetDate>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8009dce:	b580      	push	{r7, lr}
 8009dd0:	b086      	sub	sp, #24
 8009dd2:	af00      	add	r7, sp, #0
 8009dd4:	60f8      	str	r0, [r7, #12]
 8009dd6:	60b9      	str	r1, [r7, #8]
 8009dd8:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8009dda:	68fb      	ldr	r3, [r7, #12]
 8009ddc:	681b      	ldr	r3, [r3, #0]
 8009dde:	685b      	ldr	r3, [r3, #4]
 8009de0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8009de4:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8009de8:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 8009dea:	697b      	ldr	r3, [r7, #20]
 8009dec:	0c1b      	lsrs	r3, r3, #16
 8009dee:	b2da      	uxtb	r2, r3
 8009df0:	68bb      	ldr	r3, [r7, #8]
 8009df2:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 8009df4:	697b      	ldr	r3, [r7, #20]
 8009df6:	0a1b      	lsrs	r3, r3, #8
 8009df8:	b2db      	uxtb	r3, r3
 8009dfa:	f003 031f 	and.w	r3, r3, #31
 8009dfe:	b2da      	uxtb	r2, r3
 8009e00:	68bb      	ldr	r3, [r7, #8]
 8009e02:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8009e04:	697b      	ldr	r3, [r7, #20]
 8009e06:	b2db      	uxtb	r3, r3
 8009e08:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009e0c:	b2da      	uxtb	r2, r3
 8009e0e:	68bb      	ldr	r3, [r7, #8]
 8009e10:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U); 
 8009e12:	697b      	ldr	r3, [r7, #20]
 8009e14:	0b5b      	lsrs	r3, r3, #13
 8009e16:	b2db      	uxtb	r3, r3
 8009e18:	f003 0307 	and.w	r3, r3, #7
 8009e1c:	b2da      	uxtb	r2, r3
 8009e1e:	68bb      	ldr	r3, [r7, #8]
 8009e20:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	2b00      	cmp	r3, #0
 8009e26:	d11a      	bne.n	8009e5e <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8009e28:	68bb      	ldr	r3, [r7, #8]
 8009e2a:	78db      	ldrb	r3, [r3, #3]
 8009e2c:	4618      	mov	r0, r3
 8009e2e:	f000 f88b 	bl	8009f48 <RTC_Bcd2ToByte>
 8009e32:	4603      	mov	r3, r0
 8009e34:	461a      	mov	r2, r3
 8009e36:	68bb      	ldr	r3, [r7, #8]
 8009e38:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8009e3a:	68bb      	ldr	r3, [r7, #8]
 8009e3c:	785b      	ldrb	r3, [r3, #1]
 8009e3e:	4618      	mov	r0, r3
 8009e40:	f000 f882 	bl	8009f48 <RTC_Bcd2ToByte>
 8009e44:	4603      	mov	r3, r0
 8009e46:	461a      	mov	r2, r3
 8009e48:	68bb      	ldr	r3, [r7, #8]
 8009e4a:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8009e4c:	68bb      	ldr	r3, [r7, #8]
 8009e4e:	789b      	ldrb	r3, [r3, #2]
 8009e50:	4618      	mov	r0, r3
 8009e52:	f000 f879 	bl	8009f48 <RTC_Bcd2ToByte>
 8009e56:	4603      	mov	r3, r0
 8009e58:	461a      	mov	r2, r3
 8009e5a:	68bb      	ldr	r3, [r7, #8]
 8009e5c:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8009e5e:	2300      	movs	r3, #0
}
 8009e60:	4618      	mov	r0, r3
 8009e62:	3718      	adds	r7, #24
 8009e64:	46bd      	mov	sp, r7
 8009e66:	bd80      	pop	{r7, pc}

08009e68 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8009e68:	b580      	push	{r7, lr}
 8009e6a:	b084      	sub	sp, #16
 8009e6c:	af00      	add	r7, sp, #0
 8009e6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	681b      	ldr	r3, [r3, #0]
 8009e74:	68da      	ldr	r2, [r3, #12]
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	681b      	ldr	r3, [r3, #0]
 8009e7a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8009e7e:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8009e80:	f7fc fbf0 	bl	8006664 <HAL_GetTick>
 8009e84:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8009e86:	e009      	b.n	8009e9c <HAL_RTC_WaitForSynchro+0x34>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8009e88:	f7fc fbec 	bl	8006664 <HAL_GetTick>
 8009e8c:	4602      	mov	r2, r0
 8009e8e:	68fb      	ldr	r3, [r7, #12]
 8009e90:	1ad3      	subs	r3, r2, r3
 8009e92:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009e96:	d901      	bls.n	8009e9c <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8009e98:	2303      	movs	r3, #3
 8009e9a:	e007      	b.n	8009eac <HAL_RTC_WaitForSynchro+0x44>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	681b      	ldr	r3, [r3, #0]
 8009ea0:	68db      	ldr	r3, [r3, #12]
 8009ea2:	f003 0320 	and.w	r3, r3, #32
 8009ea6:	2b00      	cmp	r3, #0
 8009ea8:	d0ee      	beq.n	8009e88 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 8009eaa:	2300      	movs	r3, #0
}
 8009eac:	4618      	mov	r0, r3
 8009eae:	3710      	adds	r7, #16
 8009eb0:	46bd      	mov	sp, r7
 8009eb2:	bd80      	pop	{r7, pc}

08009eb4 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8009eb4:	b580      	push	{r7, lr}
 8009eb6:	b084      	sub	sp, #16
 8009eb8:	af00      	add	r7, sp, #0
 8009eba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	681b      	ldr	r3, [r3, #0]
 8009ec0:	68db      	ldr	r3, [r3, #12]
 8009ec2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009ec6:	2b00      	cmp	r3, #0
 8009ec8:	d119      	bne.n	8009efe <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	681b      	ldr	r3, [r3, #0]
 8009ece:	f04f 32ff 	mov.w	r2, #4294967295
 8009ed2:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8009ed4:	f7fc fbc6 	bl	8006664 <HAL_GetTick>
 8009ed8:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8009eda:	e009      	b.n	8009ef0 <RTC_EnterInitMode+0x3c>
    {
      if((HAL_GetTick()  - tickstart ) > RTC_TIMEOUT_VALUE)
 8009edc:	f7fc fbc2 	bl	8006664 <HAL_GetTick>
 8009ee0:	4602      	mov	r2, r0
 8009ee2:	68fb      	ldr	r3, [r7, #12]
 8009ee4:	1ad3      	subs	r3, r2, r3
 8009ee6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009eea:	d901      	bls.n	8009ef0 <RTC_EnterInitMode+0x3c>
      {
        return HAL_TIMEOUT;
 8009eec:	2303      	movs	r3, #3
 8009eee:	e007      	b.n	8009f00 <RTC_EnterInitMode+0x4c>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	681b      	ldr	r3, [r3, #0]
 8009ef4:	68db      	ldr	r3, [r3, #12]
 8009ef6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009efa:	2b00      	cmp	r3, #0
 8009efc:	d0ee      	beq.n	8009edc <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 8009efe:	2300      	movs	r3, #0
}
 8009f00:	4618      	mov	r0, r3
 8009f02:	3710      	adds	r7, #16
 8009f04:	46bd      	mov	sp, r7
 8009f06:	bd80      	pop	{r7, pc}

08009f08 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8009f08:	b480      	push	{r7}
 8009f0a:	b085      	sub	sp, #20
 8009f0c:	af00      	add	r7, sp, #0
 8009f0e:	4603      	mov	r3, r0
 8009f10:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8009f12:	2300      	movs	r3, #0
 8009f14:	60fb      	str	r3, [r7, #12]
  uint8_t Param = Value;
 8009f16:	79fb      	ldrb	r3, [r7, #7]
 8009f18:	72fb      	strb	r3, [r7, #11]

  while(Param >= 10U)
 8009f1a:	e005      	b.n	8009f28 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8009f1c:	68fb      	ldr	r3, [r7, #12]
 8009f1e:	3301      	adds	r3, #1
 8009f20:	60fb      	str	r3, [r7, #12]
    Param -= 10U;
 8009f22:	7afb      	ldrb	r3, [r7, #11]
 8009f24:	3b0a      	subs	r3, #10
 8009f26:	72fb      	strb	r3, [r7, #11]
  while(Param >= 10U)
 8009f28:	7afb      	ldrb	r3, [r7, #11]
 8009f2a:	2b09      	cmp	r3, #9
 8009f2c:	d8f6      	bhi.n	8009f1c <RTC_ByteToBcd2+0x14>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Param);
 8009f2e:	68fb      	ldr	r3, [r7, #12]
 8009f30:	b2db      	uxtb	r3, r3
 8009f32:	011b      	lsls	r3, r3, #4
 8009f34:	b2da      	uxtb	r2, r3
 8009f36:	7afb      	ldrb	r3, [r7, #11]
 8009f38:	4313      	orrs	r3, r2
 8009f3a:	b2db      	uxtb	r3, r3
}
 8009f3c:	4618      	mov	r0, r3
 8009f3e:	3714      	adds	r7, #20
 8009f40:	46bd      	mov	sp, r7
 8009f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f46:	4770      	bx	lr

08009f48 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8009f48:	b480      	push	{r7}
 8009f4a:	b085      	sub	sp, #20
 8009f4c:	af00      	add	r7, sp, #0
 8009f4e:	4603      	mov	r3, r0
 8009f50:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp;
  tmp = (((uint32_t)Value & 0xF0U) >> 4U) * 10U;
 8009f52:	79fb      	ldrb	r3, [r7, #7]
 8009f54:	091b      	lsrs	r3, r3, #4
 8009f56:	b2db      	uxtb	r3, r3
 8009f58:	461a      	mov	r2, r3
 8009f5a:	4613      	mov	r3, r2
 8009f5c:	009b      	lsls	r3, r3, #2
 8009f5e:	4413      	add	r3, r2
 8009f60:	005b      	lsls	r3, r3, #1
 8009f62:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tmp + ((uint32_t)Value & 0x0FU));
 8009f64:	68fb      	ldr	r3, [r7, #12]
 8009f66:	b2da      	uxtb	r2, r3
 8009f68:	79fb      	ldrb	r3, [r7, #7]
 8009f6a:	f003 030f 	and.w	r3, r3, #15
 8009f6e:	b2db      	uxtb	r3, r3
 8009f70:	4413      	add	r3, r2
 8009f72:	b2db      	uxtb	r3, r3
}
 8009f74:	4618      	mov	r0, r3
 8009f76:	3714      	adds	r7, #20
 8009f78:	46bd      	mov	sp, r7
 8009f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f7e:	4770      	bx	lr

08009f80 <HAL_RTCEx_EnableBypassShadow>:
  * @note   When the Bypass Shadow is enabled the calendar value are taken
  *         directly from the Calendar counter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_EnableBypassShadow(RTC_HandleTypeDef* hrtc)
{
 8009f80:	b480      	push	{r7}
 8009f82:	b083      	sub	sp, #12
 8009f84:	af00      	add	r7, sp, #0
 8009f86:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hrtc);
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009f8e:	2b01      	cmp	r3, #1
 8009f90:	d101      	bne.n	8009f96 <HAL_RTCEx_EnableBypassShadow+0x16>
 8009f92:	2302      	movs	r3, #2
 8009f94:	e024      	b.n	8009fe0 <HAL_RTCEx_EnableBypassShadow+0x60>
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	2201      	movs	r2, #1
 8009f9a:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	2202      	movs	r2, #2
 8009fa2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	681b      	ldr	r3, [r3, #0]
 8009faa:	22ca      	movs	r2, #202	; 0xca
 8009fac:	625a      	str	r2, [r3, #36]	; 0x24
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	681b      	ldr	r3, [r3, #0]
 8009fb2:	2253      	movs	r2, #83	; 0x53
 8009fb4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the BYPSHAD bit */
  hrtc->Instance->CR |= (uint8_t)RTC_CR_BYPSHAD;
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	681b      	ldr	r3, [r3, #0]
 8009fba:	689a      	ldr	r2, [r3, #8]
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	681b      	ldr	r3, [r3, #0]
 8009fc0:	f042 0220 	orr.w	r2, r2, #32
 8009fc4:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	681b      	ldr	r3, [r3, #0]
 8009fca:	22ff      	movs	r2, #255	; 0xff
 8009fcc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	2201      	movs	r2, #1
 8009fd2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	2200      	movs	r2, #0
 8009fda:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8009fde:	2300      	movs	r3, #0
}
 8009fe0:	4618      	mov	r0, r3
 8009fe2:	370c      	adds	r7, #12
 8009fe4:	46bd      	mov	sp, r7
 8009fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fea:	4770      	bx	lr

08009fec <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8009fec:	b580      	push	{r7, lr}
 8009fee:	b084      	sub	sp, #16
 8009ff0:	af00      	add	r7, sp, #0
 8009ff2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	2b00      	cmp	r3, #0
 8009ff8:	d101      	bne.n	8009ffe <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8009ffa:	2301      	movs	r3, #1
 8009ffc:	e095      	b.n	800a12a <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a002:	2b00      	cmp	r3, #0
 800a004:	d108      	bne.n	800a018 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	685b      	ldr	r3, [r3, #4]
 800a00a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a00e:	d009      	beq.n	800a024 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	2200      	movs	r2, #0
 800a014:	61da      	str	r2, [r3, #28]
 800a016:	e005      	b.n	800a024 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	2200      	movs	r2, #0
 800a01c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	2200      	movs	r2, #0
 800a022:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	2200      	movs	r2, #0
 800a028:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800a030:	b2db      	uxtb	r3, r3
 800a032:	2b00      	cmp	r3, #0
 800a034:	d106      	bne.n	800a044 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	2200      	movs	r2, #0
 800a03a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800a03e:	6878      	ldr	r0, [r7, #4]
 800a040:	f7fb fd2c 	bl	8005a9c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	2202      	movs	r2, #2
 800a048:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	681b      	ldr	r3, [r3, #0]
 800a050:	681a      	ldr	r2, [r3, #0]
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	681b      	ldr	r3, [r3, #0]
 800a056:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a05a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	68db      	ldr	r3, [r3, #12]
 800a060:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800a064:	d902      	bls.n	800a06c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800a066:	2300      	movs	r3, #0
 800a068:	60fb      	str	r3, [r7, #12]
 800a06a:	e002      	b.n	800a072 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800a06c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a070:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	68db      	ldr	r3, [r3, #12]
 800a076:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800a07a:	d007      	beq.n	800a08c <HAL_SPI_Init+0xa0>
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	68db      	ldr	r3, [r3, #12]
 800a080:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800a084:	d002      	beq.n	800a08c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	2200      	movs	r2, #0
 800a08a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	685b      	ldr	r3, [r3, #4]
 800a090:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	689b      	ldr	r3, [r3, #8]
 800a098:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800a09c:	431a      	orrs	r2, r3
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	691b      	ldr	r3, [r3, #16]
 800a0a2:	f003 0302 	and.w	r3, r3, #2
 800a0a6:	431a      	orrs	r2, r3
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	695b      	ldr	r3, [r3, #20]
 800a0ac:	f003 0301 	and.w	r3, r3, #1
 800a0b0:	431a      	orrs	r2, r3
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	699b      	ldr	r3, [r3, #24]
 800a0b6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a0ba:	431a      	orrs	r2, r3
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	69db      	ldr	r3, [r3, #28]
 800a0c0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a0c4:	431a      	orrs	r2, r3
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	6a1b      	ldr	r3, [r3, #32]
 800a0ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a0ce:	ea42 0103 	orr.w	r1, r2, r3
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a0d6:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	681b      	ldr	r3, [r3, #0]
 800a0de:	430a      	orrs	r2, r1
 800a0e0:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	699b      	ldr	r3, [r3, #24]
 800a0e6:	0c1b      	lsrs	r3, r3, #16
 800a0e8:	f003 0204 	and.w	r2, r3, #4
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0f0:	f003 0310 	and.w	r3, r3, #16
 800a0f4:	431a      	orrs	r2, r3
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a0fa:	f003 0308 	and.w	r3, r3, #8
 800a0fe:	431a      	orrs	r2, r3
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	68db      	ldr	r3, [r3, #12]
 800a104:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800a108:	ea42 0103 	orr.w	r1, r2, r3
 800a10c:	68fb      	ldr	r3, [r7, #12]
 800a10e:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	681b      	ldr	r3, [r3, #0]
 800a116:	430a      	orrs	r2, r1
 800a118:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	2200      	movs	r2, #0
 800a11e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	2201      	movs	r2, #1
 800a124:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800a128:	2300      	movs	r3, #0
}
 800a12a:	4618      	mov	r0, r3
 800a12c:	3710      	adds	r7, #16
 800a12e:	46bd      	mov	sp, r7
 800a130:	bd80      	pop	{r7, pc}

0800a132 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a132:	b580      	push	{r7, lr}
 800a134:	b088      	sub	sp, #32
 800a136:	af00      	add	r7, sp, #0
 800a138:	60f8      	str	r0, [r7, #12]
 800a13a:	60b9      	str	r1, [r7, #8]
 800a13c:	603b      	str	r3, [r7, #0]
 800a13e:	4613      	mov	r3, r2
 800a140:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800a142:	2300      	movs	r3, #0
 800a144:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800a146:	68fb      	ldr	r3, [r7, #12]
 800a148:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800a14c:	2b01      	cmp	r3, #1
 800a14e:	d101      	bne.n	800a154 <HAL_SPI_Transmit+0x22>
 800a150:	2302      	movs	r3, #2
 800a152:	e158      	b.n	800a406 <HAL_SPI_Transmit+0x2d4>
 800a154:	68fb      	ldr	r3, [r7, #12]
 800a156:	2201      	movs	r2, #1
 800a158:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800a15c:	f7fc fa82 	bl	8006664 <HAL_GetTick>
 800a160:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800a162:	88fb      	ldrh	r3, [r7, #6]
 800a164:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800a166:	68fb      	ldr	r3, [r7, #12]
 800a168:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800a16c:	b2db      	uxtb	r3, r3
 800a16e:	2b01      	cmp	r3, #1
 800a170:	d002      	beq.n	800a178 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800a172:	2302      	movs	r3, #2
 800a174:	77fb      	strb	r3, [r7, #31]
    goto error;
 800a176:	e13d      	b.n	800a3f4 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 800a178:	68bb      	ldr	r3, [r7, #8]
 800a17a:	2b00      	cmp	r3, #0
 800a17c:	d002      	beq.n	800a184 <HAL_SPI_Transmit+0x52>
 800a17e:	88fb      	ldrh	r3, [r7, #6]
 800a180:	2b00      	cmp	r3, #0
 800a182:	d102      	bne.n	800a18a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800a184:	2301      	movs	r3, #1
 800a186:	77fb      	strb	r3, [r7, #31]
    goto error;
 800a188:	e134      	b.n	800a3f4 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800a18a:	68fb      	ldr	r3, [r7, #12]
 800a18c:	2203      	movs	r2, #3
 800a18e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a192:	68fb      	ldr	r3, [r7, #12]
 800a194:	2200      	movs	r2, #0
 800a196:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800a198:	68fb      	ldr	r3, [r7, #12]
 800a19a:	68ba      	ldr	r2, [r7, #8]
 800a19c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800a19e:	68fb      	ldr	r3, [r7, #12]
 800a1a0:	88fa      	ldrh	r2, [r7, #6]
 800a1a2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800a1a4:	68fb      	ldr	r3, [r7, #12]
 800a1a6:	88fa      	ldrh	r2, [r7, #6]
 800a1a8:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800a1aa:	68fb      	ldr	r3, [r7, #12]
 800a1ac:	2200      	movs	r2, #0
 800a1ae:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800a1b0:	68fb      	ldr	r3, [r7, #12]
 800a1b2:	2200      	movs	r2, #0
 800a1b4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 800a1b8:	68fb      	ldr	r3, [r7, #12]
 800a1ba:	2200      	movs	r2, #0
 800a1bc:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 800a1c0:	68fb      	ldr	r3, [r7, #12]
 800a1c2:	2200      	movs	r2, #0
 800a1c4:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 800a1c6:	68fb      	ldr	r3, [r7, #12]
 800a1c8:	2200      	movs	r2, #0
 800a1ca:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a1cc:	68fb      	ldr	r3, [r7, #12]
 800a1ce:	689b      	ldr	r3, [r3, #8]
 800a1d0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a1d4:	d10f      	bne.n	800a1f6 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800a1d6:	68fb      	ldr	r3, [r7, #12]
 800a1d8:	681b      	ldr	r3, [r3, #0]
 800a1da:	681a      	ldr	r2, [r3, #0]
 800a1dc:	68fb      	ldr	r3, [r7, #12]
 800a1de:	681b      	ldr	r3, [r3, #0]
 800a1e0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a1e4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800a1e6:	68fb      	ldr	r3, [r7, #12]
 800a1e8:	681b      	ldr	r3, [r3, #0]
 800a1ea:	681a      	ldr	r2, [r3, #0]
 800a1ec:	68fb      	ldr	r3, [r7, #12]
 800a1ee:	681b      	ldr	r3, [r3, #0]
 800a1f0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a1f4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800a1f6:	68fb      	ldr	r3, [r7, #12]
 800a1f8:	681b      	ldr	r3, [r3, #0]
 800a1fa:	681b      	ldr	r3, [r3, #0]
 800a1fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a200:	2b40      	cmp	r3, #64	; 0x40
 800a202:	d007      	beq.n	800a214 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800a204:	68fb      	ldr	r3, [r7, #12]
 800a206:	681b      	ldr	r3, [r3, #0]
 800a208:	681a      	ldr	r2, [r3, #0]
 800a20a:	68fb      	ldr	r3, [r7, #12]
 800a20c:	681b      	ldr	r3, [r3, #0]
 800a20e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a212:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800a214:	68fb      	ldr	r3, [r7, #12]
 800a216:	68db      	ldr	r3, [r3, #12]
 800a218:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800a21c:	d94b      	bls.n	800a2b6 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800a21e:	68fb      	ldr	r3, [r7, #12]
 800a220:	685b      	ldr	r3, [r3, #4]
 800a222:	2b00      	cmp	r3, #0
 800a224:	d002      	beq.n	800a22c <HAL_SPI_Transmit+0xfa>
 800a226:	8afb      	ldrh	r3, [r7, #22]
 800a228:	2b01      	cmp	r3, #1
 800a22a:	d13e      	bne.n	800a2aa <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a22c:	68fb      	ldr	r3, [r7, #12]
 800a22e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a230:	881a      	ldrh	r2, [r3, #0]
 800a232:	68fb      	ldr	r3, [r7, #12]
 800a234:	681b      	ldr	r3, [r3, #0]
 800a236:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800a238:	68fb      	ldr	r3, [r7, #12]
 800a23a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a23c:	1c9a      	adds	r2, r3, #2
 800a23e:	68fb      	ldr	r3, [r7, #12]
 800a240:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800a242:	68fb      	ldr	r3, [r7, #12]
 800a244:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a246:	b29b      	uxth	r3, r3
 800a248:	3b01      	subs	r3, #1
 800a24a:	b29a      	uxth	r2, r3
 800a24c:	68fb      	ldr	r3, [r7, #12]
 800a24e:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800a250:	e02b      	b.n	800a2aa <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800a252:	68fb      	ldr	r3, [r7, #12]
 800a254:	681b      	ldr	r3, [r3, #0]
 800a256:	689b      	ldr	r3, [r3, #8]
 800a258:	f003 0302 	and.w	r3, r3, #2
 800a25c:	2b02      	cmp	r3, #2
 800a25e:	d112      	bne.n	800a286 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a260:	68fb      	ldr	r3, [r7, #12]
 800a262:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a264:	881a      	ldrh	r2, [r3, #0]
 800a266:	68fb      	ldr	r3, [r7, #12]
 800a268:	681b      	ldr	r3, [r3, #0]
 800a26a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800a26c:	68fb      	ldr	r3, [r7, #12]
 800a26e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a270:	1c9a      	adds	r2, r3, #2
 800a272:	68fb      	ldr	r3, [r7, #12]
 800a274:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800a276:	68fb      	ldr	r3, [r7, #12]
 800a278:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a27a:	b29b      	uxth	r3, r3
 800a27c:	3b01      	subs	r3, #1
 800a27e:	b29a      	uxth	r2, r3
 800a280:	68fb      	ldr	r3, [r7, #12]
 800a282:	87da      	strh	r2, [r3, #62]	; 0x3e
 800a284:	e011      	b.n	800a2aa <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a286:	f7fc f9ed 	bl	8006664 <HAL_GetTick>
 800a28a:	4602      	mov	r2, r0
 800a28c:	69bb      	ldr	r3, [r7, #24]
 800a28e:	1ad3      	subs	r3, r2, r3
 800a290:	683a      	ldr	r2, [r7, #0]
 800a292:	429a      	cmp	r2, r3
 800a294:	d803      	bhi.n	800a29e <HAL_SPI_Transmit+0x16c>
 800a296:	683b      	ldr	r3, [r7, #0]
 800a298:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a29c:	d102      	bne.n	800a2a4 <HAL_SPI_Transmit+0x172>
 800a29e:	683b      	ldr	r3, [r7, #0]
 800a2a0:	2b00      	cmp	r3, #0
 800a2a2:	d102      	bne.n	800a2aa <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 800a2a4:	2303      	movs	r3, #3
 800a2a6:	77fb      	strb	r3, [r7, #31]
          goto error;
 800a2a8:	e0a4      	b.n	800a3f4 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 800a2aa:	68fb      	ldr	r3, [r7, #12]
 800a2ac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a2ae:	b29b      	uxth	r3, r3
 800a2b0:	2b00      	cmp	r3, #0
 800a2b2:	d1ce      	bne.n	800a252 <HAL_SPI_Transmit+0x120>
 800a2b4:	e07c      	b.n	800a3b0 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800a2b6:	68fb      	ldr	r3, [r7, #12]
 800a2b8:	685b      	ldr	r3, [r3, #4]
 800a2ba:	2b00      	cmp	r3, #0
 800a2bc:	d002      	beq.n	800a2c4 <HAL_SPI_Transmit+0x192>
 800a2be:	8afb      	ldrh	r3, [r7, #22]
 800a2c0:	2b01      	cmp	r3, #1
 800a2c2:	d170      	bne.n	800a3a6 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 800a2c4:	68fb      	ldr	r3, [r7, #12]
 800a2c6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a2c8:	b29b      	uxth	r3, r3
 800a2ca:	2b01      	cmp	r3, #1
 800a2cc:	d912      	bls.n	800a2f4 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a2ce:	68fb      	ldr	r3, [r7, #12]
 800a2d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a2d2:	881a      	ldrh	r2, [r3, #0]
 800a2d4:	68fb      	ldr	r3, [r7, #12]
 800a2d6:	681b      	ldr	r3, [r3, #0]
 800a2d8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800a2da:	68fb      	ldr	r3, [r7, #12]
 800a2dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a2de:	1c9a      	adds	r2, r3, #2
 800a2e0:	68fb      	ldr	r3, [r7, #12]
 800a2e2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800a2e4:	68fb      	ldr	r3, [r7, #12]
 800a2e6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a2e8:	b29b      	uxth	r3, r3
 800a2ea:	3b02      	subs	r3, #2
 800a2ec:	b29a      	uxth	r2, r3
 800a2ee:	68fb      	ldr	r3, [r7, #12]
 800a2f0:	87da      	strh	r2, [r3, #62]	; 0x3e
 800a2f2:	e058      	b.n	800a3a6 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800a2f4:	68fb      	ldr	r3, [r7, #12]
 800a2f6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a2f8:	68fb      	ldr	r3, [r7, #12]
 800a2fa:	681b      	ldr	r3, [r3, #0]
 800a2fc:	330c      	adds	r3, #12
 800a2fe:	7812      	ldrb	r2, [r2, #0]
 800a300:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800a302:	68fb      	ldr	r3, [r7, #12]
 800a304:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a306:	1c5a      	adds	r2, r3, #1
 800a308:	68fb      	ldr	r3, [r7, #12]
 800a30a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800a30c:	68fb      	ldr	r3, [r7, #12]
 800a30e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a310:	b29b      	uxth	r3, r3
 800a312:	3b01      	subs	r3, #1
 800a314:	b29a      	uxth	r2, r3
 800a316:	68fb      	ldr	r3, [r7, #12]
 800a318:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800a31a:	e044      	b.n	800a3a6 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800a31c:	68fb      	ldr	r3, [r7, #12]
 800a31e:	681b      	ldr	r3, [r3, #0]
 800a320:	689b      	ldr	r3, [r3, #8]
 800a322:	f003 0302 	and.w	r3, r3, #2
 800a326:	2b02      	cmp	r3, #2
 800a328:	d12b      	bne.n	800a382 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 800a32a:	68fb      	ldr	r3, [r7, #12]
 800a32c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a32e:	b29b      	uxth	r3, r3
 800a330:	2b01      	cmp	r3, #1
 800a332:	d912      	bls.n	800a35a <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a334:	68fb      	ldr	r3, [r7, #12]
 800a336:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a338:	881a      	ldrh	r2, [r3, #0]
 800a33a:	68fb      	ldr	r3, [r7, #12]
 800a33c:	681b      	ldr	r3, [r3, #0]
 800a33e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800a340:	68fb      	ldr	r3, [r7, #12]
 800a342:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a344:	1c9a      	adds	r2, r3, #2
 800a346:	68fb      	ldr	r3, [r7, #12]
 800a348:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800a34a:	68fb      	ldr	r3, [r7, #12]
 800a34c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a34e:	b29b      	uxth	r3, r3
 800a350:	3b02      	subs	r3, #2
 800a352:	b29a      	uxth	r2, r3
 800a354:	68fb      	ldr	r3, [r7, #12]
 800a356:	87da      	strh	r2, [r3, #62]	; 0x3e
 800a358:	e025      	b.n	800a3a6 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800a35a:	68fb      	ldr	r3, [r7, #12]
 800a35c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a35e:	68fb      	ldr	r3, [r7, #12]
 800a360:	681b      	ldr	r3, [r3, #0]
 800a362:	330c      	adds	r3, #12
 800a364:	7812      	ldrb	r2, [r2, #0]
 800a366:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800a368:	68fb      	ldr	r3, [r7, #12]
 800a36a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a36c:	1c5a      	adds	r2, r3, #1
 800a36e:	68fb      	ldr	r3, [r7, #12]
 800a370:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800a372:	68fb      	ldr	r3, [r7, #12]
 800a374:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a376:	b29b      	uxth	r3, r3
 800a378:	3b01      	subs	r3, #1
 800a37a:	b29a      	uxth	r2, r3
 800a37c:	68fb      	ldr	r3, [r7, #12]
 800a37e:	87da      	strh	r2, [r3, #62]	; 0x3e
 800a380:	e011      	b.n	800a3a6 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a382:	f7fc f96f 	bl	8006664 <HAL_GetTick>
 800a386:	4602      	mov	r2, r0
 800a388:	69bb      	ldr	r3, [r7, #24]
 800a38a:	1ad3      	subs	r3, r2, r3
 800a38c:	683a      	ldr	r2, [r7, #0]
 800a38e:	429a      	cmp	r2, r3
 800a390:	d803      	bhi.n	800a39a <HAL_SPI_Transmit+0x268>
 800a392:	683b      	ldr	r3, [r7, #0]
 800a394:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a398:	d102      	bne.n	800a3a0 <HAL_SPI_Transmit+0x26e>
 800a39a:	683b      	ldr	r3, [r7, #0]
 800a39c:	2b00      	cmp	r3, #0
 800a39e:	d102      	bne.n	800a3a6 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 800a3a0:	2303      	movs	r3, #3
 800a3a2:	77fb      	strb	r3, [r7, #31]
          goto error;
 800a3a4:	e026      	b.n	800a3f4 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 800a3a6:	68fb      	ldr	r3, [r7, #12]
 800a3a8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a3aa:	b29b      	uxth	r3, r3
 800a3ac:	2b00      	cmp	r3, #0
 800a3ae:	d1b5      	bne.n	800a31c <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800a3b0:	69ba      	ldr	r2, [r7, #24]
 800a3b2:	6839      	ldr	r1, [r7, #0]
 800a3b4:	68f8      	ldr	r0, [r7, #12]
 800a3b6:	f000 f941 	bl	800a63c <SPI_EndRxTxTransaction>
 800a3ba:	4603      	mov	r3, r0
 800a3bc:	2b00      	cmp	r3, #0
 800a3be:	d002      	beq.n	800a3c6 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800a3c0:	68fb      	ldr	r3, [r7, #12]
 800a3c2:	2220      	movs	r2, #32
 800a3c4:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800a3c6:	68fb      	ldr	r3, [r7, #12]
 800a3c8:	689b      	ldr	r3, [r3, #8]
 800a3ca:	2b00      	cmp	r3, #0
 800a3cc:	d10a      	bne.n	800a3e4 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800a3ce:	2300      	movs	r3, #0
 800a3d0:	613b      	str	r3, [r7, #16]
 800a3d2:	68fb      	ldr	r3, [r7, #12]
 800a3d4:	681b      	ldr	r3, [r3, #0]
 800a3d6:	68db      	ldr	r3, [r3, #12]
 800a3d8:	613b      	str	r3, [r7, #16]
 800a3da:	68fb      	ldr	r3, [r7, #12]
 800a3dc:	681b      	ldr	r3, [r3, #0]
 800a3de:	689b      	ldr	r3, [r3, #8]
 800a3e0:	613b      	str	r3, [r7, #16]
 800a3e2:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800a3e4:	68fb      	ldr	r3, [r7, #12]
 800a3e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a3e8:	2b00      	cmp	r3, #0
 800a3ea:	d002      	beq.n	800a3f2 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 800a3ec:	2301      	movs	r3, #1
 800a3ee:	77fb      	strb	r3, [r7, #31]
 800a3f0:	e000      	b.n	800a3f4 <HAL_SPI_Transmit+0x2c2>
  }

error:
 800a3f2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800a3f4:	68fb      	ldr	r3, [r7, #12]
 800a3f6:	2201      	movs	r2, #1
 800a3f8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800a3fc:	68fb      	ldr	r3, [r7, #12]
 800a3fe:	2200      	movs	r2, #0
 800a400:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800a404:	7ffb      	ldrb	r3, [r7, #31]
}
 800a406:	4618      	mov	r0, r3
 800a408:	3720      	adds	r7, #32
 800a40a:	46bd      	mov	sp, r7
 800a40c:	bd80      	pop	{r7, pc}
	...

0800a410 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800a410:	b580      	push	{r7, lr}
 800a412:	b088      	sub	sp, #32
 800a414:	af00      	add	r7, sp, #0
 800a416:	60f8      	str	r0, [r7, #12]
 800a418:	60b9      	str	r1, [r7, #8]
 800a41a:	603b      	str	r3, [r7, #0]
 800a41c:	4613      	mov	r3, r2
 800a41e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800a420:	f7fc f920 	bl	8006664 <HAL_GetTick>
 800a424:	4602      	mov	r2, r0
 800a426:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a428:	1a9b      	subs	r3, r3, r2
 800a42a:	683a      	ldr	r2, [r7, #0]
 800a42c:	4413      	add	r3, r2
 800a42e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800a430:	f7fc f918 	bl	8006664 <HAL_GetTick>
 800a434:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800a436:	4b39      	ldr	r3, [pc, #228]	; (800a51c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800a438:	681b      	ldr	r3, [r3, #0]
 800a43a:	015b      	lsls	r3, r3, #5
 800a43c:	0d1b      	lsrs	r3, r3, #20
 800a43e:	69fa      	ldr	r2, [r7, #28]
 800a440:	fb02 f303 	mul.w	r3, r2, r3
 800a444:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800a446:	e054      	b.n	800a4f2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800a448:	683b      	ldr	r3, [r7, #0]
 800a44a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a44e:	d050      	beq.n	800a4f2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800a450:	f7fc f908 	bl	8006664 <HAL_GetTick>
 800a454:	4602      	mov	r2, r0
 800a456:	69bb      	ldr	r3, [r7, #24]
 800a458:	1ad3      	subs	r3, r2, r3
 800a45a:	69fa      	ldr	r2, [r7, #28]
 800a45c:	429a      	cmp	r2, r3
 800a45e:	d902      	bls.n	800a466 <SPI_WaitFlagStateUntilTimeout+0x56>
 800a460:	69fb      	ldr	r3, [r7, #28]
 800a462:	2b00      	cmp	r3, #0
 800a464:	d13d      	bne.n	800a4e2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800a466:	68fb      	ldr	r3, [r7, #12]
 800a468:	681b      	ldr	r3, [r3, #0]
 800a46a:	685a      	ldr	r2, [r3, #4]
 800a46c:	68fb      	ldr	r3, [r7, #12]
 800a46e:	681b      	ldr	r3, [r3, #0]
 800a470:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800a474:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a476:	68fb      	ldr	r3, [r7, #12]
 800a478:	685b      	ldr	r3, [r3, #4]
 800a47a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a47e:	d111      	bne.n	800a4a4 <SPI_WaitFlagStateUntilTimeout+0x94>
 800a480:	68fb      	ldr	r3, [r7, #12]
 800a482:	689b      	ldr	r3, [r3, #8]
 800a484:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a488:	d004      	beq.n	800a494 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800a48a:	68fb      	ldr	r3, [r7, #12]
 800a48c:	689b      	ldr	r3, [r3, #8]
 800a48e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a492:	d107      	bne.n	800a4a4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800a494:	68fb      	ldr	r3, [r7, #12]
 800a496:	681b      	ldr	r3, [r3, #0]
 800a498:	681a      	ldr	r2, [r3, #0]
 800a49a:	68fb      	ldr	r3, [r7, #12]
 800a49c:	681b      	ldr	r3, [r3, #0]
 800a49e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a4a2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800a4a4:	68fb      	ldr	r3, [r7, #12]
 800a4a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a4a8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a4ac:	d10f      	bne.n	800a4ce <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800a4ae:	68fb      	ldr	r3, [r7, #12]
 800a4b0:	681b      	ldr	r3, [r3, #0]
 800a4b2:	681a      	ldr	r2, [r3, #0]
 800a4b4:	68fb      	ldr	r3, [r7, #12]
 800a4b6:	681b      	ldr	r3, [r3, #0]
 800a4b8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800a4bc:	601a      	str	r2, [r3, #0]
 800a4be:	68fb      	ldr	r3, [r7, #12]
 800a4c0:	681b      	ldr	r3, [r3, #0]
 800a4c2:	681a      	ldr	r2, [r3, #0]
 800a4c4:	68fb      	ldr	r3, [r7, #12]
 800a4c6:	681b      	ldr	r3, [r3, #0]
 800a4c8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800a4cc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800a4ce:	68fb      	ldr	r3, [r7, #12]
 800a4d0:	2201      	movs	r2, #1
 800a4d2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800a4d6:	68fb      	ldr	r3, [r7, #12]
 800a4d8:	2200      	movs	r2, #0
 800a4da:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800a4de:	2303      	movs	r3, #3
 800a4e0:	e017      	b.n	800a512 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800a4e2:	697b      	ldr	r3, [r7, #20]
 800a4e4:	2b00      	cmp	r3, #0
 800a4e6:	d101      	bne.n	800a4ec <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800a4e8:	2300      	movs	r3, #0
 800a4ea:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800a4ec:	697b      	ldr	r3, [r7, #20]
 800a4ee:	3b01      	subs	r3, #1
 800a4f0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800a4f2:	68fb      	ldr	r3, [r7, #12]
 800a4f4:	681b      	ldr	r3, [r3, #0]
 800a4f6:	689a      	ldr	r2, [r3, #8]
 800a4f8:	68bb      	ldr	r3, [r7, #8]
 800a4fa:	4013      	ands	r3, r2
 800a4fc:	68ba      	ldr	r2, [r7, #8]
 800a4fe:	429a      	cmp	r2, r3
 800a500:	bf0c      	ite	eq
 800a502:	2301      	moveq	r3, #1
 800a504:	2300      	movne	r3, #0
 800a506:	b2db      	uxtb	r3, r3
 800a508:	461a      	mov	r2, r3
 800a50a:	79fb      	ldrb	r3, [r7, #7]
 800a50c:	429a      	cmp	r2, r3
 800a50e:	d19b      	bne.n	800a448 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800a510:	2300      	movs	r3, #0
}
 800a512:	4618      	mov	r0, r3
 800a514:	3720      	adds	r7, #32
 800a516:	46bd      	mov	sp, r7
 800a518:	bd80      	pop	{r7, pc}
 800a51a:	bf00      	nop
 800a51c:	20000014 	.word	0x20000014

0800a520 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800a520:	b580      	push	{r7, lr}
 800a522:	b088      	sub	sp, #32
 800a524:	af00      	add	r7, sp, #0
 800a526:	60f8      	str	r0, [r7, #12]
 800a528:	60b9      	str	r1, [r7, #8]
 800a52a:	607a      	str	r2, [r7, #4]
 800a52c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800a52e:	f7fc f899 	bl	8006664 <HAL_GetTick>
 800a532:	4602      	mov	r2, r0
 800a534:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a536:	1a9b      	subs	r3, r3, r2
 800a538:	683a      	ldr	r2, [r7, #0]
 800a53a:	4413      	add	r3, r2
 800a53c:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800a53e:	f7fc f891 	bl	8006664 <HAL_GetTick>
 800a542:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800a544:	4b3c      	ldr	r3, [pc, #240]	; (800a638 <SPI_WaitFifoStateUntilTimeout+0x118>)
 800a546:	681a      	ldr	r2, [r3, #0]
 800a548:	4613      	mov	r3, r2
 800a54a:	009b      	lsls	r3, r3, #2
 800a54c:	4413      	add	r3, r2
 800a54e:	00da      	lsls	r2, r3, #3
 800a550:	1ad3      	subs	r3, r2, r3
 800a552:	0d1b      	lsrs	r3, r3, #20
 800a554:	69fa      	ldr	r2, [r7, #28]
 800a556:	fb02 f303 	mul.w	r3, r2, r3
 800a55a:	617b      	str	r3, [r7, #20]

  while ((hspi->Instance->SR & Fifo) != State)
 800a55c:	e05f      	b.n	800a61e <SPI_WaitFifoStateUntilTimeout+0xfe>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800a55e:	68bb      	ldr	r3, [r7, #8]
 800a560:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800a564:	d106      	bne.n	800a574 <SPI_WaitFifoStateUntilTimeout+0x54>
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	2b00      	cmp	r3, #0
 800a56a:	d103      	bne.n	800a574 <SPI_WaitFifoStateUntilTimeout+0x54>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 800a56c:	68fb      	ldr	r3, [r7, #12]
 800a56e:	681b      	ldr	r3, [r3, #0]
 800a570:	330c      	adds	r3, #12
 800a572:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 800a574:	683b      	ldr	r3, [r7, #0]
 800a576:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a57a:	d050      	beq.n	800a61e <SPI_WaitFifoStateUntilTimeout+0xfe>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800a57c:	f7fc f872 	bl	8006664 <HAL_GetTick>
 800a580:	4602      	mov	r2, r0
 800a582:	69bb      	ldr	r3, [r7, #24]
 800a584:	1ad3      	subs	r3, r2, r3
 800a586:	69fa      	ldr	r2, [r7, #28]
 800a588:	429a      	cmp	r2, r3
 800a58a:	d902      	bls.n	800a592 <SPI_WaitFifoStateUntilTimeout+0x72>
 800a58c:	69fb      	ldr	r3, [r7, #28]
 800a58e:	2b00      	cmp	r3, #0
 800a590:	d13d      	bne.n	800a60e <SPI_WaitFifoStateUntilTimeout+0xee>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800a592:	68fb      	ldr	r3, [r7, #12]
 800a594:	681b      	ldr	r3, [r3, #0]
 800a596:	685a      	ldr	r2, [r3, #4]
 800a598:	68fb      	ldr	r3, [r7, #12]
 800a59a:	681b      	ldr	r3, [r3, #0]
 800a59c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800a5a0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a5a2:	68fb      	ldr	r3, [r7, #12]
 800a5a4:	685b      	ldr	r3, [r3, #4]
 800a5a6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a5aa:	d111      	bne.n	800a5d0 <SPI_WaitFifoStateUntilTimeout+0xb0>
 800a5ac:	68fb      	ldr	r3, [r7, #12]
 800a5ae:	689b      	ldr	r3, [r3, #8]
 800a5b0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a5b4:	d004      	beq.n	800a5c0 <SPI_WaitFifoStateUntilTimeout+0xa0>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800a5b6:	68fb      	ldr	r3, [r7, #12]
 800a5b8:	689b      	ldr	r3, [r3, #8]
 800a5ba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a5be:	d107      	bne.n	800a5d0 <SPI_WaitFifoStateUntilTimeout+0xb0>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800a5c0:	68fb      	ldr	r3, [r7, #12]
 800a5c2:	681b      	ldr	r3, [r3, #0]
 800a5c4:	681a      	ldr	r2, [r3, #0]
 800a5c6:	68fb      	ldr	r3, [r7, #12]
 800a5c8:	681b      	ldr	r3, [r3, #0]
 800a5ca:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a5ce:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800a5d0:	68fb      	ldr	r3, [r7, #12]
 800a5d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a5d4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a5d8:	d10f      	bne.n	800a5fa <SPI_WaitFifoStateUntilTimeout+0xda>
        {
          SPI_RESET_CRC(hspi);
 800a5da:	68fb      	ldr	r3, [r7, #12]
 800a5dc:	681b      	ldr	r3, [r3, #0]
 800a5de:	681a      	ldr	r2, [r3, #0]
 800a5e0:	68fb      	ldr	r3, [r7, #12]
 800a5e2:	681b      	ldr	r3, [r3, #0]
 800a5e4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800a5e8:	601a      	str	r2, [r3, #0]
 800a5ea:	68fb      	ldr	r3, [r7, #12]
 800a5ec:	681b      	ldr	r3, [r3, #0]
 800a5ee:	681a      	ldr	r2, [r3, #0]
 800a5f0:	68fb      	ldr	r3, [r7, #12]
 800a5f2:	681b      	ldr	r3, [r3, #0]
 800a5f4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800a5f8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800a5fa:	68fb      	ldr	r3, [r7, #12]
 800a5fc:	2201      	movs	r2, #1
 800a5fe:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800a602:	68fb      	ldr	r3, [r7, #12]
 800a604:	2200      	movs	r2, #0
 800a606:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800a60a:	2303      	movs	r3, #3
 800a60c:	e010      	b.n	800a630 <SPI_WaitFifoStateUntilTimeout+0x110>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800a60e:	697b      	ldr	r3, [r7, #20]
 800a610:	2b00      	cmp	r3, #0
 800a612:	d101      	bne.n	800a618 <SPI_WaitFifoStateUntilTimeout+0xf8>
      {
        tmp_timeout = 0U;
 800a614:	2300      	movs	r3, #0
 800a616:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800a618:	697b      	ldr	r3, [r7, #20]
 800a61a:	3b01      	subs	r3, #1
 800a61c:	617b      	str	r3, [r7, #20]
  while ((hspi->Instance->SR & Fifo) != State)
 800a61e:	68fb      	ldr	r3, [r7, #12]
 800a620:	681b      	ldr	r3, [r3, #0]
 800a622:	689a      	ldr	r2, [r3, #8]
 800a624:	68bb      	ldr	r3, [r7, #8]
 800a626:	4013      	ands	r3, r2
 800a628:	687a      	ldr	r2, [r7, #4]
 800a62a:	429a      	cmp	r2, r3
 800a62c:	d197      	bne.n	800a55e <SPI_WaitFifoStateUntilTimeout+0x3e>
    }
  }

  return HAL_OK;
 800a62e:	2300      	movs	r3, #0
}
 800a630:	4618      	mov	r0, r3
 800a632:	3720      	adds	r7, #32
 800a634:	46bd      	mov	sp, r7
 800a636:	bd80      	pop	{r7, pc}
 800a638:	20000014 	.word	0x20000014

0800a63c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800a63c:	b580      	push	{r7, lr}
 800a63e:	b086      	sub	sp, #24
 800a640:	af02      	add	r7, sp, #8
 800a642:	60f8      	str	r0, [r7, #12]
 800a644:	60b9      	str	r1, [r7, #8]
 800a646:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	9300      	str	r3, [sp, #0]
 800a64c:	68bb      	ldr	r3, [r7, #8]
 800a64e:	2200      	movs	r2, #0
 800a650:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800a654:	68f8      	ldr	r0, [r7, #12]
 800a656:	f7ff ff63 	bl	800a520 <SPI_WaitFifoStateUntilTimeout>
 800a65a:	4603      	mov	r3, r0
 800a65c:	2b00      	cmp	r3, #0
 800a65e:	d007      	beq.n	800a670 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a660:	68fb      	ldr	r3, [r7, #12]
 800a662:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a664:	f043 0220 	orr.w	r2, r3, #32
 800a668:	68fb      	ldr	r3, [r7, #12]
 800a66a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800a66c:	2303      	movs	r3, #3
 800a66e:	e027      	b.n	800a6c0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	9300      	str	r3, [sp, #0]
 800a674:	68bb      	ldr	r3, [r7, #8]
 800a676:	2200      	movs	r2, #0
 800a678:	2180      	movs	r1, #128	; 0x80
 800a67a:	68f8      	ldr	r0, [r7, #12]
 800a67c:	f7ff fec8 	bl	800a410 <SPI_WaitFlagStateUntilTimeout>
 800a680:	4603      	mov	r3, r0
 800a682:	2b00      	cmp	r3, #0
 800a684:	d007      	beq.n	800a696 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a686:	68fb      	ldr	r3, [r7, #12]
 800a688:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a68a:	f043 0220 	orr.w	r2, r3, #32
 800a68e:	68fb      	ldr	r3, [r7, #12]
 800a690:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800a692:	2303      	movs	r3, #3
 800a694:	e014      	b.n	800a6c0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	9300      	str	r3, [sp, #0]
 800a69a:	68bb      	ldr	r3, [r7, #8]
 800a69c:	2200      	movs	r2, #0
 800a69e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800a6a2:	68f8      	ldr	r0, [r7, #12]
 800a6a4:	f7ff ff3c 	bl	800a520 <SPI_WaitFifoStateUntilTimeout>
 800a6a8:	4603      	mov	r3, r0
 800a6aa:	2b00      	cmp	r3, #0
 800a6ac:	d007      	beq.n	800a6be <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a6ae:	68fb      	ldr	r3, [r7, #12]
 800a6b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a6b2:	f043 0220 	orr.w	r2, r3, #32
 800a6b6:	68fb      	ldr	r3, [r7, #12]
 800a6b8:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800a6ba:	2303      	movs	r3, #3
 800a6bc:	e000      	b.n	800a6c0 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800a6be:	2300      	movs	r3, #0
}
 800a6c0:	4618      	mov	r0, r3
 800a6c2:	3710      	adds	r7, #16
 800a6c4:	46bd      	mov	sp, r7
 800a6c6:	bd80      	pop	{r7, pc}

0800a6c8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a6c8:	b580      	push	{r7, lr}
 800a6ca:	b082      	sub	sp, #8
 800a6cc:	af00      	add	r7, sp, #0
 800a6ce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	2b00      	cmp	r3, #0
 800a6d4:	d101      	bne.n	800a6da <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a6d6:	2301      	movs	r3, #1
 800a6d8:	e049      	b.n	800a76e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a6e0:	b2db      	uxtb	r3, r3
 800a6e2:	2b00      	cmp	r3, #0
 800a6e4:	d106      	bne.n	800a6f4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	2200      	movs	r2, #0
 800a6ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a6ee:	6878      	ldr	r0, [r7, #4]
 800a6f0:	f7fb fa04 	bl	8005afc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	2202      	movs	r2, #2
 800a6f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	681a      	ldr	r2, [r3, #0]
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	3304      	adds	r3, #4
 800a704:	4619      	mov	r1, r3
 800a706:	4610      	mov	r0, r2
 800a708:	f000 fd5a 	bl	800b1c0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	2201      	movs	r2, #1
 800a710:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	2201      	movs	r2, #1
 800a718:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	2201      	movs	r2, #1
 800a720:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	2201      	movs	r2, #1
 800a728:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	2201      	movs	r2, #1
 800a730:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	2201      	movs	r2, #1
 800a738:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	2201      	movs	r2, #1
 800a740:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	2201      	movs	r2, #1
 800a748:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	2201      	movs	r2, #1
 800a750:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	2201      	movs	r2, #1
 800a758:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	2201      	movs	r2, #1
 800a760:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	2201      	movs	r2, #1
 800a768:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a76c:	2300      	movs	r3, #0
}
 800a76e:	4618      	mov	r0, r3
 800a770:	3708      	adds	r7, #8
 800a772:	46bd      	mov	sp, r7
 800a774:	bd80      	pop	{r7, pc}
	...

0800a778 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800a778:	b480      	push	{r7}
 800a77a:	b085      	sub	sp, #20
 800a77c:	af00      	add	r7, sp, #0
 800a77e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a786:	b2db      	uxtb	r3, r3
 800a788:	2b01      	cmp	r3, #1
 800a78a:	d001      	beq.n	800a790 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800a78c:	2301      	movs	r3, #1
 800a78e:	e036      	b.n	800a7fe <HAL_TIM_Base_Start_IT+0x86>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	2202      	movs	r2, #2
 800a794:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	681b      	ldr	r3, [r3, #0]
 800a79c:	68da      	ldr	r2, [r3, #12]
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	681b      	ldr	r3, [r3, #0]
 800a7a2:	f042 0201 	orr.w	r2, r2, #1
 800a7a6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	681b      	ldr	r3, [r3, #0]
 800a7ac:	4a17      	ldr	r2, [pc, #92]	; (800a80c <HAL_TIM_Base_Start_IT+0x94>)
 800a7ae:	4293      	cmp	r3, r2
 800a7b0:	d004      	beq.n	800a7bc <HAL_TIM_Base_Start_IT+0x44>
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	681b      	ldr	r3, [r3, #0]
 800a7b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a7ba:	d115      	bne.n	800a7e8 <HAL_TIM_Base_Start_IT+0x70>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	681b      	ldr	r3, [r3, #0]
 800a7c0:	689a      	ldr	r2, [r3, #8]
 800a7c2:	4b13      	ldr	r3, [pc, #76]	; (800a810 <HAL_TIM_Base_Start_IT+0x98>)
 800a7c4:	4013      	ands	r3, r2
 800a7c6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a7c8:	68fb      	ldr	r3, [r7, #12]
 800a7ca:	2b06      	cmp	r3, #6
 800a7cc:	d015      	beq.n	800a7fa <HAL_TIM_Base_Start_IT+0x82>
 800a7ce:	68fb      	ldr	r3, [r7, #12]
 800a7d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a7d4:	d011      	beq.n	800a7fa <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	681b      	ldr	r3, [r3, #0]
 800a7da:	681a      	ldr	r2, [r3, #0]
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	681b      	ldr	r3, [r3, #0]
 800a7e0:	f042 0201 	orr.w	r2, r2, #1
 800a7e4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a7e6:	e008      	b.n	800a7fa <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	681b      	ldr	r3, [r3, #0]
 800a7ec:	681a      	ldr	r2, [r3, #0]
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	681b      	ldr	r3, [r3, #0]
 800a7f2:	f042 0201 	orr.w	r2, r2, #1
 800a7f6:	601a      	str	r2, [r3, #0]
 800a7f8:	e000      	b.n	800a7fc <HAL_TIM_Base_Start_IT+0x84>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a7fa:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800a7fc:	2300      	movs	r3, #0
}
 800a7fe:	4618      	mov	r0, r3
 800a800:	3714      	adds	r7, #20
 800a802:	46bd      	mov	sp, r7
 800a804:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a808:	4770      	bx	lr
 800a80a:	bf00      	nop
 800a80c:	40012c00 	.word	0x40012c00
 800a810:	00010007 	.word	0x00010007

0800a814 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800a814:	b580      	push	{r7, lr}
 800a816:	b082      	sub	sp, #8
 800a818:	af00      	add	r7, sp, #0
 800a81a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	2b00      	cmp	r3, #0
 800a820:	d101      	bne.n	800a826 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800a822:	2301      	movs	r3, #1
 800a824:	e049      	b.n	800a8ba <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a82c:	b2db      	uxtb	r3, r3
 800a82e:	2b00      	cmp	r3, #0
 800a830:	d106      	bne.n	800a840 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	2200      	movs	r2, #0
 800a836:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800a83a:	6878      	ldr	r0, [r7, #4]
 800a83c:	f000 f841 	bl	800a8c2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	2202      	movs	r2, #2
 800a844:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	681a      	ldr	r2, [r3, #0]
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	3304      	adds	r3, #4
 800a850:	4619      	mov	r1, r3
 800a852:	4610      	mov	r0, r2
 800a854:	f000 fcb4 	bl	800b1c0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	2201      	movs	r2, #1
 800a85c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	2201      	movs	r2, #1
 800a864:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	2201      	movs	r2, #1
 800a86c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	2201      	movs	r2, #1
 800a874:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	2201      	movs	r2, #1
 800a87c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	2201      	movs	r2, #1
 800a884:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	2201      	movs	r2, #1
 800a88c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	2201      	movs	r2, #1
 800a894:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	2201      	movs	r2, #1
 800a89c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	2201      	movs	r2, #1
 800a8a4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	2201      	movs	r2, #1
 800a8ac:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	2201      	movs	r2, #1
 800a8b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a8b8:	2300      	movs	r3, #0
}
 800a8ba:	4618      	mov	r0, r3
 800a8bc:	3708      	adds	r7, #8
 800a8be:	46bd      	mov	sp, r7
 800a8c0:	bd80      	pop	{r7, pc}

0800a8c2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800a8c2:	b480      	push	{r7}
 800a8c4:	b083      	sub	sp, #12
 800a8c6:	af00      	add	r7, sp, #0
 800a8c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800a8ca:	bf00      	nop
 800a8cc:	370c      	adds	r7, #12
 800a8ce:	46bd      	mov	sp, r7
 800a8d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8d4:	4770      	bx	lr
	...

0800a8d8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800a8d8:	b580      	push	{r7, lr}
 800a8da:	b084      	sub	sp, #16
 800a8dc:	af00      	add	r7, sp, #0
 800a8de:	6078      	str	r0, [r7, #4]
 800a8e0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800a8e2:	683b      	ldr	r3, [r7, #0]
 800a8e4:	2b00      	cmp	r3, #0
 800a8e6:	d109      	bne.n	800a8fc <HAL_TIM_PWM_Start+0x24>
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a8ee:	b2db      	uxtb	r3, r3
 800a8f0:	2b01      	cmp	r3, #1
 800a8f2:	bf14      	ite	ne
 800a8f4:	2301      	movne	r3, #1
 800a8f6:	2300      	moveq	r3, #0
 800a8f8:	b2db      	uxtb	r3, r3
 800a8fa:	e03c      	b.n	800a976 <HAL_TIM_PWM_Start+0x9e>
 800a8fc:	683b      	ldr	r3, [r7, #0]
 800a8fe:	2b04      	cmp	r3, #4
 800a900:	d109      	bne.n	800a916 <HAL_TIM_PWM_Start+0x3e>
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800a908:	b2db      	uxtb	r3, r3
 800a90a:	2b01      	cmp	r3, #1
 800a90c:	bf14      	ite	ne
 800a90e:	2301      	movne	r3, #1
 800a910:	2300      	moveq	r3, #0
 800a912:	b2db      	uxtb	r3, r3
 800a914:	e02f      	b.n	800a976 <HAL_TIM_PWM_Start+0x9e>
 800a916:	683b      	ldr	r3, [r7, #0]
 800a918:	2b08      	cmp	r3, #8
 800a91a:	d109      	bne.n	800a930 <HAL_TIM_PWM_Start+0x58>
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a922:	b2db      	uxtb	r3, r3
 800a924:	2b01      	cmp	r3, #1
 800a926:	bf14      	ite	ne
 800a928:	2301      	movne	r3, #1
 800a92a:	2300      	moveq	r3, #0
 800a92c:	b2db      	uxtb	r3, r3
 800a92e:	e022      	b.n	800a976 <HAL_TIM_PWM_Start+0x9e>
 800a930:	683b      	ldr	r3, [r7, #0]
 800a932:	2b0c      	cmp	r3, #12
 800a934:	d109      	bne.n	800a94a <HAL_TIM_PWM_Start+0x72>
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a93c:	b2db      	uxtb	r3, r3
 800a93e:	2b01      	cmp	r3, #1
 800a940:	bf14      	ite	ne
 800a942:	2301      	movne	r3, #1
 800a944:	2300      	moveq	r3, #0
 800a946:	b2db      	uxtb	r3, r3
 800a948:	e015      	b.n	800a976 <HAL_TIM_PWM_Start+0x9e>
 800a94a:	683b      	ldr	r3, [r7, #0]
 800a94c:	2b10      	cmp	r3, #16
 800a94e:	d109      	bne.n	800a964 <HAL_TIM_PWM_Start+0x8c>
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800a956:	b2db      	uxtb	r3, r3
 800a958:	2b01      	cmp	r3, #1
 800a95a:	bf14      	ite	ne
 800a95c:	2301      	movne	r3, #1
 800a95e:	2300      	moveq	r3, #0
 800a960:	b2db      	uxtb	r3, r3
 800a962:	e008      	b.n	800a976 <HAL_TIM_PWM_Start+0x9e>
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800a96a:	b2db      	uxtb	r3, r3
 800a96c:	2b01      	cmp	r3, #1
 800a96e:	bf14      	ite	ne
 800a970:	2301      	movne	r3, #1
 800a972:	2300      	moveq	r3, #0
 800a974:	b2db      	uxtb	r3, r3
 800a976:	2b00      	cmp	r3, #0
 800a978:	d001      	beq.n	800a97e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800a97a:	2301      	movs	r3, #1
 800a97c:	e079      	b.n	800aa72 <HAL_TIM_PWM_Start+0x19a>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800a97e:	683b      	ldr	r3, [r7, #0]
 800a980:	2b00      	cmp	r3, #0
 800a982:	d104      	bne.n	800a98e <HAL_TIM_PWM_Start+0xb6>
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	2202      	movs	r2, #2
 800a988:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a98c:	e023      	b.n	800a9d6 <HAL_TIM_PWM_Start+0xfe>
 800a98e:	683b      	ldr	r3, [r7, #0]
 800a990:	2b04      	cmp	r3, #4
 800a992:	d104      	bne.n	800a99e <HAL_TIM_PWM_Start+0xc6>
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	2202      	movs	r2, #2
 800a998:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a99c:	e01b      	b.n	800a9d6 <HAL_TIM_PWM_Start+0xfe>
 800a99e:	683b      	ldr	r3, [r7, #0]
 800a9a0:	2b08      	cmp	r3, #8
 800a9a2:	d104      	bne.n	800a9ae <HAL_TIM_PWM_Start+0xd6>
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	2202      	movs	r2, #2
 800a9a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a9ac:	e013      	b.n	800a9d6 <HAL_TIM_PWM_Start+0xfe>
 800a9ae:	683b      	ldr	r3, [r7, #0]
 800a9b0:	2b0c      	cmp	r3, #12
 800a9b2:	d104      	bne.n	800a9be <HAL_TIM_PWM_Start+0xe6>
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	2202      	movs	r2, #2
 800a9b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a9bc:	e00b      	b.n	800a9d6 <HAL_TIM_PWM_Start+0xfe>
 800a9be:	683b      	ldr	r3, [r7, #0]
 800a9c0:	2b10      	cmp	r3, #16
 800a9c2:	d104      	bne.n	800a9ce <HAL_TIM_PWM_Start+0xf6>
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	2202      	movs	r2, #2
 800a9c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a9cc:	e003      	b.n	800a9d6 <HAL_TIM_PWM_Start+0xfe>
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	2202      	movs	r2, #2
 800a9d2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	681b      	ldr	r3, [r3, #0]
 800a9da:	2201      	movs	r2, #1
 800a9dc:	6839      	ldr	r1, [r7, #0]
 800a9de:	4618      	mov	r0, r3
 800a9e0:	f000 ff6c 	bl	800b8bc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	681b      	ldr	r3, [r3, #0]
 800a9e8:	4a24      	ldr	r2, [pc, #144]	; (800aa7c <HAL_TIM_PWM_Start+0x1a4>)
 800a9ea:	4293      	cmp	r3, r2
 800a9ec:	d009      	beq.n	800aa02 <HAL_TIM_PWM_Start+0x12a>
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	681b      	ldr	r3, [r3, #0]
 800a9f2:	4a23      	ldr	r2, [pc, #140]	; (800aa80 <HAL_TIM_PWM_Start+0x1a8>)
 800a9f4:	4293      	cmp	r3, r2
 800a9f6:	d004      	beq.n	800aa02 <HAL_TIM_PWM_Start+0x12a>
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	681b      	ldr	r3, [r3, #0]
 800a9fc:	4a21      	ldr	r2, [pc, #132]	; (800aa84 <HAL_TIM_PWM_Start+0x1ac>)
 800a9fe:	4293      	cmp	r3, r2
 800aa00:	d101      	bne.n	800aa06 <HAL_TIM_PWM_Start+0x12e>
 800aa02:	2301      	movs	r3, #1
 800aa04:	e000      	b.n	800aa08 <HAL_TIM_PWM_Start+0x130>
 800aa06:	2300      	movs	r3, #0
 800aa08:	2b00      	cmp	r3, #0
 800aa0a:	d007      	beq.n	800aa1c <HAL_TIM_PWM_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	681b      	ldr	r3, [r3, #0]
 800aa10:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	681b      	ldr	r3, [r3, #0]
 800aa16:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800aa1a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	681b      	ldr	r3, [r3, #0]
 800aa20:	4a16      	ldr	r2, [pc, #88]	; (800aa7c <HAL_TIM_PWM_Start+0x1a4>)
 800aa22:	4293      	cmp	r3, r2
 800aa24:	d004      	beq.n	800aa30 <HAL_TIM_PWM_Start+0x158>
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	681b      	ldr	r3, [r3, #0]
 800aa2a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800aa2e:	d115      	bne.n	800aa5c <HAL_TIM_PWM_Start+0x184>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	681b      	ldr	r3, [r3, #0]
 800aa34:	689a      	ldr	r2, [r3, #8]
 800aa36:	4b14      	ldr	r3, [pc, #80]	; (800aa88 <HAL_TIM_PWM_Start+0x1b0>)
 800aa38:	4013      	ands	r3, r2
 800aa3a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800aa3c:	68fb      	ldr	r3, [r7, #12]
 800aa3e:	2b06      	cmp	r3, #6
 800aa40:	d015      	beq.n	800aa6e <HAL_TIM_PWM_Start+0x196>
 800aa42:	68fb      	ldr	r3, [r7, #12]
 800aa44:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800aa48:	d011      	beq.n	800aa6e <HAL_TIM_PWM_Start+0x196>
    {
      __HAL_TIM_ENABLE(htim);
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	681b      	ldr	r3, [r3, #0]
 800aa4e:	681a      	ldr	r2, [r3, #0]
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	681b      	ldr	r3, [r3, #0]
 800aa54:	f042 0201 	orr.w	r2, r2, #1
 800aa58:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800aa5a:	e008      	b.n	800aa6e <HAL_TIM_PWM_Start+0x196>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	681b      	ldr	r3, [r3, #0]
 800aa60:	681a      	ldr	r2, [r3, #0]
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	681b      	ldr	r3, [r3, #0]
 800aa66:	f042 0201 	orr.w	r2, r2, #1
 800aa6a:	601a      	str	r2, [r3, #0]
 800aa6c:	e000      	b.n	800aa70 <HAL_TIM_PWM_Start+0x198>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800aa6e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800aa70:	2300      	movs	r3, #0
}
 800aa72:	4618      	mov	r0, r3
 800aa74:	3710      	adds	r7, #16
 800aa76:	46bd      	mov	sp, r7
 800aa78:	bd80      	pop	{r7, pc}
 800aa7a:	bf00      	nop
 800aa7c:	40012c00 	.word	0x40012c00
 800aa80:	40014400 	.word	0x40014400
 800aa84:	40014800 	.word	0x40014800
 800aa88:	00010007 	.word	0x00010007

0800aa8c <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800aa8c:	b580      	push	{r7, lr}
 800aa8e:	b082      	sub	sp, #8
 800aa90:	af00      	add	r7, sp, #0
 800aa92:	6078      	str	r0, [r7, #4]
 800aa94:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	681b      	ldr	r3, [r3, #0]
 800aa9a:	2200      	movs	r2, #0
 800aa9c:	6839      	ldr	r1, [r7, #0]
 800aa9e:	4618      	mov	r0, r3
 800aaa0:	f000 ff0c 	bl	800b8bc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	681b      	ldr	r3, [r3, #0]
 800aaa8:	4a39      	ldr	r2, [pc, #228]	; (800ab90 <HAL_TIM_PWM_Stop+0x104>)
 800aaaa:	4293      	cmp	r3, r2
 800aaac:	d009      	beq.n	800aac2 <HAL_TIM_PWM_Stop+0x36>
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	681b      	ldr	r3, [r3, #0]
 800aab2:	4a38      	ldr	r2, [pc, #224]	; (800ab94 <HAL_TIM_PWM_Stop+0x108>)
 800aab4:	4293      	cmp	r3, r2
 800aab6:	d004      	beq.n	800aac2 <HAL_TIM_PWM_Stop+0x36>
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	681b      	ldr	r3, [r3, #0]
 800aabc:	4a36      	ldr	r2, [pc, #216]	; (800ab98 <HAL_TIM_PWM_Stop+0x10c>)
 800aabe:	4293      	cmp	r3, r2
 800aac0:	d101      	bne.n	800aac6 <HAL_TIM_PWM_Stop+0x3a>
 800aac2:	2301      	movs	r3, #1
 800aac4:	e000      	b.n	800aac8 <HAL_TIM_PWM_Stop+0x3c>
 800aac6:	2300      	movs	r3, #0
 800aac8:	2b00      	cmp	r3, #0
 800aaca:	d017      	beq.n	800aafc <HAL_TIM_PWM_Stop+0x70>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	681b      	ldr	r3, [r3, #0]
 800aad0:	6a1a      	ldr	r2, [r3, #32]
 800aad2:	f241 1311 	movw	r3, #4369	; 0x1111
 800aad6:	4013      	ands	r3, r2
 800aad8:	2b00      	cmp	r3, #0
 800aada:	d10f      	bne.n	800aafc <HAL_TIM_PWM_Stop+0x70>
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	681b      	ldr	r3, [r3, #0]
 800aae0:	6a1a      	ldr	r2, [r3, #32]
 800aae2:	f240 4344 	movw	r3, #1092	; 0x444
 800aae6:	4013      	ands	r3, r2
 800aae8:	2b00      	cmp	r3, #0
 800aaea:	d107      	bne.n	800aafc <HAL_TIM_PWM_Stop+0x70>
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	681b      	ldr	r3, [r3, #0]
 800aaf0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800aaf2:	687b      	ldr	r3, [r7, #4]
 800aaf4:	681b      	ldr	r3, [r3, #0]
 800aaf6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800aafa:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	681b      	ldr	r3, [r3, #0]
 800ab00:	6a1a      	ldr	r2, [r3, #32]
 800ab02:	f241 1311 	movw	r3, #4369	; 0x1111
 800ab06:	4013      	ands	r3, r2
 800ab08:	2b00      	cmp	r3, #0
 800ab0a:	d10f      	bne.n	800ab2c <HAL_TIM_PWM_Stop+0xa0>
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	681b      	ldr	r3, [r3, #0]
 800ab10:	6a1a      	ldr	r2, [r3, #32]
 800ab12:	f240 4344 	movw	r3, #1092	; 0x444
 800ab16:	4013      	ands	r3, r2
 800ab18:	2b00      	cmp	r3, #0
 800ab1a:	d107      	bne.n	800ab2c <HAL_TIM_PWM_Stop+0xa0>
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	681b      	ldr	r3, [r3, #0]
 800ab20:	681a      	ldr	r2, [r3, #0]
 800ab22:	687b      	ldr	r3, [r7, #4]
 800ab24:	681b      	ldr	r3, [r3, #0]
 800ab26:	f022 0201 	bic.w	r2, r2, #1
 800ab2a:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800ab2c:	683b      	ldr	r3, [r7, #0]
 800ab2e:	2b00      	cmp	r3, #0
 800ab30:	d104      	bne.n	800ab3c <HAL_TIM_PWM_Stop+0xb0>
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	2201      	movs	r2, #1
 800ab36:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800ab3a:	e023      	b.n	800ab84 <HAL_TIM_PWM_Stop+0xf8>
 800ab3c:	683b      	ldr	r3, [r7, #0]
 800ab3e:	2b04      	cmp	r3, #4
 800ab40:	d104      	bne.n	800ab4c <HAL_TIM_PWM_Stop+0xc0>
 800ab42:	687b      	ldr	r3, [r7, #4]
 800ab44:	2201      	movs	r2, #1
 800ab46:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800ab4a:	e01b      	b.n	800ab84 <HAL_TIM_PWM_Stop+0xf8>
 800ab4c:	683b      	ldr	r3, [r7, #0]
 800ab4e:	2b08      	cmp	r3, #8
 800ab50:	d104      	bne.n	800ab5c <HAL_TIM_PWM_Stop+0xd0>
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	2201      	movs	r2, #1
 800ab56:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800ab5a:	e013      	b.n	800ab84 <HAL_TIM_PWM_Stop+0xf8>
 800ab5c:	683b      	ldr	r3, [r7, #0]
 800ab5e:	2b0c      	cmp	r3, #12
 800ab60:	d104      	bne.n	800ab6c <HAL_TIM_PWM_Stop+0xe0>
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	2201      	movs	r2, #1
 800ab66:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800ab6a:	e00b      	b.n	800ab84 <HAL_TIM_PWM_Stop+0xf8>
 800ab6c:	683b      	ldr	r3, [r7, #0]
 800ab6e:	2b10      	cmp	r3, #16
 800ab70:	d104      	bne.n	800ab7c <HAL_TIM_PWM_Stop+0xf0>
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	2201      	movs	r2, #1
 800ab76:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800ab7a:	e003      	b.n	800ab84 <HAL_TIM_PWM_Stop+0xf8>
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	2201      	movs	r2, #1
 800ab80:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 800ab84:	2300      	movs	r3, #0
}
 800ab86:	4618      	mov	r0, r3
 800ab88:	3708      	adds	r7, #8
 800ab8a:	46bd      	mov	sp, r7
 800ab8c:	bd80      	pop	{r7, pc}
 800ab8e:	bf00      	nop
 800ab90:	40012c00 	.word	0x40012c00
 800ab94:	40014400 	.word	0x40014400
 800ab98:	40014800 	.word	0x40014800

0800ab9c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800ab9c:	b580      	push	{r7, lr}
 800ab9e:	b082      	sub	sp, #8
 800aba0:	af00      	add	r7, sp, #0
 800aba2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	681b      	ldr	r3, [r3, #0]
 800aba8:	691b      	ldr	r3, [r3, #16]
 800abaa:	f003 0302 	and.w	r3, r3, #2
 800abae:	2b02      	cmp	r3, #2
 800abb0:	d122      	bne.n	800abf8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	681b      	ldr	r3, [r3, #0]
 800abb6:	68db      	ldr	r3, [r3, #12]
 800abb8:	f003 0302 	and.w	r3, r3, #2
 800abbc:	2b02      	cmp	r3, #2
 800abbe:	d11b      	bne.n	800abf8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	681b      	ldr	r3, [r3, #0]
 800abc4:	f06f 0202 	mvn.w	r2, #2
 800abc8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	2201      	movs	r2, #1
 800abce:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	681b      	ldr	r3, [r3, #0]
 800abd4:	699b      	ldr	r3, [r3, #24]
 800abd6:	f003 0303 	and.w	r3, r3, #3
 800abda:	2b00      	cmp	r3, #0
 800abdc:	d003      	beq.n	800abe6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800abde:	6878      	ldr	r0, [r7, #4]
 800abe0:	f000 facf 	bl	800b182 <HAL_TIM_IC_CaptureCallback>
 800abe4:	e005      	b.n	800abf2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800abe6:	6878      	ldr	r0, [r7, #4]
 800abe8:	f000 fac1 	bl	800b16e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800abec:	6878      	ldr	r0, [r7, #4]
 800abee:	f000 fad2 	bl	800b196 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	2200      	movs	r2, #0
 800abf6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	681b      	ldr	r3, [r3, #0]
 800abfc:	691b      	ldr	r3, [r3, #16]
 800abfe:	f003 0304 	and.w	r3, r3, #4
 800ac02:	2b04      	cmp	r3, #4
 800ac04:	d122      	bne.n	800ac4c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	681b      	ldr	r3, [r3, #0]
 800ac0a:	68db      	ldr	r3, [r3, #12]
 800ac0c:	f003 0304 	and.w	r3, r3, #4
 800ac10:	2b04      	cmp	r3, #4
 800ac12:	d11b      	bne.n	800ac4c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	681b      	ldr	r3, [r3, #0]
 800ac18:	f06f 0204 	mvn.w	r2, #4
 800ac1c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800ac1e:	687b      	ldr	r3, [r7, #4]
 800ac20:	2202      	movs	r2, #2
 800ac22:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	681b      	ldr	r3, [r3, #0]
 800ac28:	699b      	ldr	r3, [r3, #24]
 800ac2a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ac2e:	2b00      	cmp	r3, #0
 800ac30:	d003      	beq.n	800ac3a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ac32:	6878      	ldr	r0, [r7, #4]
 800ac34:	f000 faa5 	bl	800b182 <HAL_TIM_IC_CaptureCallback>
 800ac38:	e005      	b.n	800ac46 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ac3a:	6878      	ldr	r0, [r7, #4]
 800ac3c:	f000 fa97 	bl	800b16e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ac40:	6878      	ldr	r0, [r7, #4]
 800ac42:	f000 faa8 	bl	800b196 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	2200      	movs	r2, #0
 800ac4a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	681b      	ldr	r3, [r3, #0]
 800ac50:	691b      	ldr	r3, [r3, #16]
 800ac52:	f003 0308 	and.w	r3, r3, #8
 800ac56:	2b08      	cmp	r3, #8
 800ac58:	d122      	bne.n	800aca0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	681b      	ldr	r3, [r3, #0]
 800ac5e:	68db      	ldr	r3, [r3, #12]
 800ac60:	f003 0308 	and.w	r3, r3, #8
 800ac64:	2b08      	cmp	r3, #8
 800ac66:	d11b      	bne.n	800aca0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	681b      	ldr	r3, [r3, #0]
 800ac6c:	f06f 0208 	mvn.w	r2, #8
 800ac70:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	2204      	movs	r2, #4
 800ac76:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	681b      	ldr	r3, [r3, #0]
 800ac7c:	69db      	ldr	r3, [r3, #28]
 800ac7e:	f003 0303 	and.w	r3, r3, #3
 800ac82:	2b00      	cmp	r3, #0
 800ac84:	d003      	beq.n	800ac8e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ac86:	6878      	ldr	r0, [r7, #4]
 800ac88:	f000 fa7b 	bl	800b182 <HAL_TIM_IC_CaptureCallback>
 800ac8c:	e005      	b.n	800ac9a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ac8e:	6878      	ldr	r0, [r7, #4]
 800ac90:	f000 fa6d 	bl	800b16e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ac94:	6878      	ldr	r0, [r7, #4]
 800ac96:	f000 fa7e 	bl	800b196 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	2200      	movs	r2, #0
 800ac9e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	681b      	ldr	r3, [r3, #0]
 800aca4:	691b      	ldr	r3, [r3, #16]
 800aca6:	f003 0310 	and.w	r3, r3, #16
 800acaa:	2b10      	cmp	r3, #16
 800acac:	d122      	bne.n	800acf4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800acae:	687b      	ldr	r3, [r7, #4]
 800acb0:	681b      	ldr	r3, [r3, #0]
 800acb2:	68db      	ldr	r3, [r3, #12]
 800acb4:	f003 0310 	and.w	r3, r3, #16
 800acb8:	2b10      	cmp	r3, #16
 800acba:	d11b      	bne.n	800acf4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800acbc:	687b      	ldr	r3, [r7, #4]
 800acbe:	681b      	ldr	r3, [r3, #0]
 800acc0:	f06f 0210 	mvn.w	r2, #16
 800acc4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800acc6:	687b      	ldr	r3, [r7, #4]
 800acc8:	2208      	movs	r2, #8
 800acca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	681b      	ldr	r3, [r3, #0]
 800acd0:	69db      	ldr	r3, [r3, #28]
 800acd2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800acd6:	2b00      	cmp	r3, #0
 800acd8:	d003      	beq.n	800ace2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800acda:	6878      	ldr	r0, [r7, #4]
 800acdc:	f000 fa51 	bl	800b182 <HAL_TIM_IC_CaptureCallback>
 800ace0:	e005      	b.n	800acee <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ace2:	6878      	ldr	r0, [r7, #4]
 800ace4:	f000 fa43 	bl	800b16e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ace8:	6878      	ldr	r0, [r7, #4]
 800acea:	f000 fa54 	bl	800b196 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	2200      	movs	r2, #0
 800acf2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800acf4:	687b      	ldr	r3, [r7, #4]
 800acf6:	681b      	ldr	r3, [r3, #0]
 800acf8:	691b      	ldr	r3, [r3, #16]
 800acfa:	f003 0301 	and.w	r3, r3, #1
 800acfe:	2b01      	cmp	r3, #1
 800ad00:	d10e      	bne.n	800ad20 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800ad02:	687b      	ldr	r3, [r7, #4]
 800ad04:	681b      	ldr	r3, [r3, #0]
 800ad06:	68db      	ldr	r3, [r3, #12]
 800ad08:	f003 0301 	and.w	r3, r3, #1
 800ad0c:	2b01      	cmp	r3, #1
 800ad0e:	d107      	bne.n	800ad20 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	681b      	ldr	r3, [r3, #0]
 800ad14:	f06f 0201 	mvn.w	r2, #1
 800ad18:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800ad1a:	6878      	ldr	r0, [r7, #4]
 800ad1c:	f7fa fc7e 	bl	800561c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	681b      	ldr	r3, [r3, #0]
 800ad24:	691b      	ldr	r3, [r3, #16]
 800ad26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ad2a:	2b80      	cmp	r3, #128	; 0x80
 800ad2c:	d10e      	bne.n	800ad4c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800ad2e:	687b      	ldr	r3, [r7, #4]
 800ad30:	681b      	ldr	r3, [r3, #0]
 800ad32:	68db      	ldr	r3, [r3, #12]
 800ad34:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ad38:	2b80      	cmp	r3, #128	; 0x80
 800ad3a:	d107      	bne.n	800ad4c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	681b      	ldr	r3, [r3, #0]
 800ad40:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800ad44:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800ad46:	6878      	ldr	r0, [r7, #4]
 800ad48:	f000 fed8 	bl	800bafc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	681b      	ldr	r3, [r3, #0]
 800ad50:	691b      	ldr	r3, [r3, #16]
 800ad52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ad56:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ad5a:	d10e      	bne.n	800ad7a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	681b      	ldr	r3, [r3, #0]
 800ad60:	68db      	ldr	r3, [r3, #12]
 800ad62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ad66:	2b80      	cmp	r3, #128	; 0x80
 800ad68:	d107      	bne.n	800ad7a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	681b      	ldr	r3, [r3, #0]
 800ad6e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800ad72:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800ad74:	6878      	ldr	r0, [r7, #4]
 800ad76:	f000 fecb 	bl	800bb10 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800ad7a:	687b      	ldr	r3, [r7, #4]
 800ad7c:	681b      	ldr	r3, [r3, #0]
 800ad7e:	691b      	ldr	r3, [r3, #16]
 800ad80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ad84:	2b40      	cmp	r3, #64	; 0x40
 800ad86:	d10e      	bne.n	800ada6 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	681b      	ldr	r3, [r3, #0]
 800ad8c:	68db      	ldr	r3, [r3, #12]
 800ad8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ad92:	2b40      	cmp	r3, #64	; 0x40
 800ad94:	d107      	bne.n	800ada6 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	681b      	ldr	r3, [r3, #0]
 800ad9a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800ad9e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800ada0:	6878      	ldr	r0, [r7, #4]
 800ada2:	f000 fa02 	bl	800b1aa <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	681b      	ldr	r3, [r3, #0]
 800adaa:	691b      	ldr	r3, [r3, #16]
 800adac:	f003 0320 	and.w	r3, r3, #32
 800adb0:	2b20      	cmp	r3, #32
 800adb2:	d10e      	bne.n	800add2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	681b      	ldr	r3, [r3, #0]
 800adb8:	68db      	ldr	r3, [r3, #12]
 800adba:	f003 0320 	and.w	r3, r3, #32
 800adbe:	2b20      	cmp	r3, #32
 800adc0:	d107      	bne.n	800add2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800adc2:	687b      	ldr	r3, [r7, #4]
 800adc4:	681b      	ldr	r3, [r3, #0]
 800adc6:	f06f 0220 	mvn.w	r2, #32
 800adca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800adcc:	6878      	ldr	r0, [r7, #4]
 800adce:	f000 fe8b 	bl	800bae8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800add2:	bf00      	nop
 800add4:	3708      	adds	r7, #8
 800add6:	46bd      	mov	sp, r7
 800add8:	bd80      	pop	{r7, pc}
	...

0800addc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800addc:	b580      	push	{r7, lr}
 800adde:	b084      	sub	sp, #16
 800ade0:	af00      	add	r7, sp, #0
 800ade2:	60f8      	str	r0, [r7, #12]
 800ade4:	60b9      	str	r1, [r7, #8]
 800ade6:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800ade8:	68fb      	ldr	r3, [r7, #12]
 800adea:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800adee:	2b01      	cmp	r3, #1
 800adf0:	d101      	bne.n	800adf6 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800adf2:	2302      	movs	r3, #2
 800adf4:	e0fd      	b.n	800aff2 <HAL_TIM_PWM_ConfigChannel+0x216>
 800adf6:	68fb      	ldr	r3, [r7, #12]
 800adf8:	2201      	movs	r2, #1
 800adfa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	2b14      	cmp	r3, #20
 800ae02:	f200 80f0 	bhi.w	800afe6 <HAL_TIM_PWM_ConfigChannel+0x20a>
 800ae06:	a201      	add	r2, pc, #4	; (adr r2, 800ae0c <HAL_TIM_PWM_ConfigChannel+0x30>)
 800ae08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ae0c:	0800ae61 	.word	0x0800ae61
 800ae10:	0800afe7 	.word	0x0800afe7
 800ae14:	0800afe7 	.word	0x0800afe7
 800ae18:	0800afe7 	.word	0x0800afe7
 800ae1c:	0800aea1 	.word	0x0800aea1
 800ae20:	0800afe7 	.word	0x0800afe7
 800ae24:	0800afe7 	.word	0x0800afe7
 800ae28:	0800afe7 	.word	0x0800afe7
 800ae2c:	0800aee3 	.word	0x0800aee3
 800ae30:	0800afe7 	.word	0x0800afe7
 800ae34:	0800afe7 	.word	0x0800afe7
 800ae38:	0800afe7 	.word	0x0800afe7
 800ae3c:	0800af23 	.word	0x0800af23
 800ae40:	0800afe7 	.word	0x0800afe7
 800ae44:	0800afe7 	.word	0x0800afe7
 800ae48:	0800afe7 	.word	0x0800afe7
 800ae4c:	0800af65 	.word	0x0800af65
 800ae50:	0800afe7 	.word	0x0800afe7
 800ae54:	0800afe7 	.word	0x0800afe7
 800ae58:	0800afe7 	.word	0x0800afe7
 800ae5c:	0800afa5 	.word	0x0800afa5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800ae60:	68fb      	ldr	r3, [r7, #12]
 800ae62:	681b      	ldr	r3, [r3, #0]
 800ae64:	68b9      	ldr	r1, [r7, #8]
 800ae66:	4618      	mov	r0, r3
 800ae68:	f000 fa0e 	bl	800b288 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800ae6c:	68fb      	ldr	r3, [r7, #12]
 800ae6e:	681b      	ldr	r3, [r3, #0]
 800ae70:	699a      	ldr	r2, [r3, #24]
 800ae72:	68fb      	ldr	r3, [r7, #12]
 800ae74:	681b      	ldr	r3, [r3, #0]
 800ae76:	f042 0208 	orr.w	r2, r2, #8
 800ae7a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800ae7c:	68fb      	ldr	r3, [r7, #12]
 800ae7e:	681b      	ldr	r3, [r3, #0]
 800ae80:	699a      	ldr	r2, [r3, #24]
 800ae82:	68fb      	ldr	r3, [r7, #12]
 800ae84:	681b      	ldr	r3, [r3, #0]
 800ae86:	f022 0204 	bic.w	r2, r2, #4
 800ae8a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800ae8c:	68fb      	ldr	r3, [r7, #12]
 800ae8e:	681b      	ldr	r3, [r3, #0]
 800ae90:	6999      	ldr	r1, [r3, #24]
 800ae92:	68bb      	ldr	r3, [r7, #8]
 800ae94:	691a      	ldr	r2, [r3, #16]
 800ae96:	68fb      	ldr	r3, [r7, #12]
 800ae98:	681b      	ldr	r3, [r3, #0]
 800ae9a:	430a      	orrs	r2, r1
 800ae9c:	619a      	str	r2, [r3, #24]
      break;
 800ae9e:	e0a3      	b.n	800afe8 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800aea0:	68fb      	ldr	r3, [r7, #12]
 800aea2:	681b      	ldr	r3, [r3, #0]
 800aea4:	68b9      	ldr	r1, [r7, #8]
 800aea6:	4618      	mov	r0, r3
 800aea8:	f000 fa6a 	bl	800b380 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800aeac:	68fb      	ldr	r3, [r7, #12]
 800aeae:	681b      	ldr	r3, [r3, #0]
 800aeb0:	699a      	ldr	r2, [r3, #24]
 800aeb2:	68fb      	ldr	r3, [r7, #12]
 800aeb4:	681b      	ldr	r3, [r3, #0]
 800aeb6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800aeba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800aebc:	68fb      	ldr	r3, [r7, #12]
 800aebe:	681b      	ldr	r3, [r3, #0]
 800aec0:	699a      	ldr	r2, [r3, #24]
 800aec2:	68fb      	ldr	r3, [r7, #12]
 800aec4:	681b      	ldr	r3, [r3, #0]
 800aec6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800aeca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800aecc:	68fb      	ldr	r3, [r7, #12]
 800aece:	681b      	ldr	r3, [r3, #0]
 800aed0:	6999      	ldr	r1, [r3, #24]
 800aed2:	68bb      	ldr	r3, [r7, #8]
 800aed4:	691b      	ldr	r3, [r3, #16]
 800aed6:	021a      	lsls	r2, r3, #8
 800aed8:	68fb      	ldr	r3, [r7, #12]
 800aeda:	681b      	ldr	r3, [r3, #0]
 800aedc:	430a      	orrs	r2, r1
 800aede:	619a      	str	r2, [r3, #24]
      break;
 800aee0:	e082      	b.n	800afe8 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800aee2:	68fb      	ldr	r3, [r7, #12]
 800aee4:	681b      	ldr	r3, [r3, #0]
 800aee6:	68b9      	ldr	r1, [r7, #8]
 800aee8:	4618      	mov	r0, r3
 800aeea:	f000 fac3 	bl	800b474 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800aeee:	68fb      	ldr	r3, [r7, #12]
 800aef0:	681b      	ldr	r3, [r3, #0]
 800aef2:	69da      	ldr	r2, [r3, #28]
 800aef4:	68fb      	ldr	r3, [r7, #12]
 800aef6:	681b      	ldr	r3, [r3, #0]
 800aef8:	f042 0208 	orr.w	r2, r2, #8
 800aefc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800aefe:	68fb      	ldr	r3, [r7, #12]
 800af00:	681b      	ldr	r3, [r3, #0]
 800af02:	69da      	ldr	r2, [r3, #28]
 800af04:	68fb      	ldr	r3, [r7, #12]
 800af06:	681b      	ldr	r3, [r3, #0]
 800af08:	f022 0204 	bic.w	r2, r2, #4
 800af0c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800af0e:	68fb      	ldr	r3, [r7, #12]
 800af10:	681b      	ldr	r3, [r3, #0]
 800af12:	69d9      	ldr	r1, [r3, #28]
 800af14:	68bb      	ldr	r3, [r7, #8]
 800af16:	691a      	ldr	r2, [r3, #16]
 800af18:	68fb      	ldr	r3, [r7, #12]
 800af1a:	681b      	ldr	r3, [r3, #0]
 800af1c:	430a      	orrs	r2, r1
 800af1e:	61da      	str	r2, [r3, #28]
      break;
 800af20:	e062      	b.n	800afe8 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800af22:	68fb      	ldr	r3, [r7, #12]
 800af24:	681b      	ldr	r3, [r3, #0]
 800af26:	68b9      	ldr	r1, [r7, #8]
 800af28:	4618      	mov	r0, r3
 800af2a:	f000 fb1b 	bl	800b564 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800af2e:	68fb      	ldr	r3, [r7, #12]
 800af30:	681b      	ldr	r3, [r3, #0]
 800af32:	69da      	ldr	r2, [r3, #28]
 800af34:	68fb      	ldr	r3, [r7, #12]
 800af36:	681b      	ldr	r3, [r3, #0]
 800af38:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800af3c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800af3e:	68fb      	ldr	r3, [r7, #12]
 800af40:	681b      	ldr	r3, [r3, #0]
 800af42:	69da      	ldr	r2, [r3, #28]
 800af44:	68fb      	ldr	r3, [r7, #12]
 800af46:	681b      	ldr	r3, [r3, #0]
 800af48:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800af4c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800af4e:	68fb      	ldr	r3, [r7, #12]
 800af50:	681b      	ldr	r3, [r3, #0]
 800af52:	69d9      	ldr	r1, [r3, #28]
 800af54:	68bb      	ldr	r3, [r7, #8]
 800af56:	691b      	ldr	r3, [r3, #16]
 800af58:	021a      	lsls	r2, r3, #8
 800af5a:	68fb      	ldr	r3, [r7, #12]
 800af5c:	681b      	ldr	r3, [r3, #0]
 800af5e:	430a      	orrs	r2, r1
 800af60:	61da      	str	r2, [r3, #28]
      break;
 800af62:	e041      	b.n	800afe8 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800af64:	68fb      	ldr	r3, [r7, #12]
 800af66:	681b      	ldr	r3, [r3, #0]
 800af68:	68b9      	ldr	r1, [r7, #8]
 800af6a:	4618      	mov	r0, r3
 800af6c:	f000 fb58 	bl	800b620 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800af70:	68fb      	ldr	r3, [r7, #12]
 800af72:	681b      	ldr	r3, [r3, #0]
 800af74:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800af76:	68fb      	ldr	r3, [r7, #12]
 800af78:	681b      	ldr	r3, [r3, #0]
 800af7a:	f042 0208 	orr.w	r2, r2, #8
 800af7e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800af80:	68fb      	ldr	r3, [r7, #12]
 800af82:	681b      	ldr	r3, [r3, #0]
 800af84:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800af86:	68fb      	ldr	r3, [r7, #12]
 800af88:	681b      	ldr	r3, [r3, #0]
 800af8a:	f022 0204 	bic.w	r2, r2, #4
 800af8e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800af90:	68fb      	ldr	r3, [r7, #12]
 800af92:	681b      	ldr	r3, [r3, #0]
 800af94:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800af96:	68bb      	ldr	r3, [r7, #8]
 800af98:	691a      	ldr	r2, [r3, #16]
 800af9a:	68fb      	ldr	r3, [r7, #12]
 800af9c:	681b      	ldr	r3, [r3, #0]
 800af9e:	430a      	orrs	r2, r1
 800afa0:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800afa2:	e021      	b.n	800afe8 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800afa4:	68fb      	ldr	r3, [r7, #12]
 800afa6:	681b      	ldr	r3, [r3, #0]
 800afa8:	68b9      	ldr	r1, [r7, #8]
 800afaa:	4618      	mov	r0, r3
 800afac:	f000 fb90 	bl	800b6d0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800afb0:	68fb      	ldr	r3, [r7, #12]
 800afb2:	681b      	ldr	r3, [r3, #0]
 800afb4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800afb6:	68fb      	ldr	r3, [r7, #12]
 800afb8:	681b      	ldr	r3, [r3, #0]
 800afba:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800afbe:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800afc0:	68fb      	ldr	r3, [r7, #12]
 800afc2:	681b      	ldr	r3, [r3, #0]
 800afc4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800afc6:	68fb      	ldr	r3, [r7, #12]
 800afc8:	681b      	ldr	r3, [r3, #0]
 800afca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800afce:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800afd0:	68fb      	ldr	r3, [r7, #12]
 800afd2:	681b      	ldr	r3, [r3, #0]
 800afd4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800afd6:	68bb      	ldr	r3, [r7, #8]
 800afd8:	691b      	ldr	r3, [r3, #16]
 800afda:	021a      	lsls	r2, r3, #8
 800afdc:	68fb      	ldr	r3, [r7, #12]
 800afde:	681b      	ldr	r3, [r3, #0]
 800afe0:	430a      	orrs	r2, r1
 800afe2:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800afe4:	e000      	b.n	800afe8 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 800afe6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800afe8:	68fb      	ldr	r3, [r7, #12]
 800afea:	2200      	movs	r2, #0
 800afec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800aff0:	2300      	movs	r3, #0
}
 800aff2:	4618      	mov	r0, r3
 800aff4:	3710      	adds	r7, #16
 800aff6:	46bd      	mov	sp, r7
 800aff8:	bd80      	pop	{r7, pc}
 800affa:	bf00      	nop

0800affc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800affc:	b580      	push	{r7, lr}
 800affe:	b084      	sub	sp, #16
 800b000:	af00      	add	r7, sp, #0
 800b002:	6078      	str	r0, [r7, #4]
 800b004:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800b006:	687b      	ldr	r3, [r7, #4]
 800b008:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b00c:	2b01      	cmp	r3, #1
 800b00e:	d101      	bne.n	800b014 <HAL_TIM_ConfigClockSource+0x18>
 800b010:	2302      	movs	r3, #2
 800b012:	e0a8      	b.n	800b166 <HAL_TIM_ConfigClockSource+0x16a>
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	2201      	movs	r2, #1
 800b018:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	2202      	movs	r2, #2
 800b020:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	681b      	ldr	r3, [r3, #0]
 800b028:	689b      	ldr	r3, [r3, #8]
 800b02a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800b02c:	68fb      	ldr	r3, [r7, #12]
 800b02e:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 800b032:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800b036:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b038:	68fb      	ldr	r3, [r7, #12]
 800b03a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b03e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800b040:	687b      	ldr	r3, [r7, #4]
 800b042:	681b      	ldr	r3, [r3, #0]
 800b044:	68fa      	ldr	r2, [r7, #12]
 800b046:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800b048:	683b      	ldr	r3, [r7, #0]
 800b04a:	681b      	ldr	r3, [r3, #0]
 800b04c:	2b40      	cmp	r3, #64	; 0x40
 800b04e:	d067      	beq.n	800b120 <HAL_TIM_ConfigClockSource+0x124>
 800b050:	2b40      	cmp	r3, #64	; 0x40
 800b052:	d80b      	bhi.n	800b06c <HAL_TIM_ConfigClockSource+0x70>
 800b054:	2b10      	cmp	r3, #16
 800b056:	d073      	beq.n	800b140 <HAL_TIM_ConfigClockSource+0x144>
 800b058:	2b10      	cmp	r3, #16
 800b05a:	d802      	bhi.n	800b062 <HAL_TIM_ConfigClockSource+0x66>
 800b05c:	2b00      	cmp	r3, #0
 800b05e:	d06f      	beq.n	800b140 <HAL_TIM_ConfigClockSource+0x144>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800b060:	e078      	b.n	800b154 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 800b062:	2b20      	cmp	r3, #32
 800b064:	d06c      	beq.n	800b140 <HAL_TIM_ConfigClockSource+0x144>
 800b066:	2b30      	cmp	r3, #48	; 0x30
 800b068:	d06a      	beq.n	800b140 <HAL_TIM_ConfigClockSource+0x144>
      break;
 800b06a:	e073      	b.n	800b154 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 800b06c:	2b70      	cmp	r3, #112	; 0x70
 800b06e:	d00d      	beq.n	800b08c <HAL_TIM_ConfigClockSource+0x90>
 800b070:	2b70      	cmp	r3, #112	; 0x70
 800b072:	d804      	bhi.n	800b07e <HAL_TIM_ConfigClockSource+0x82>
 800b074:	2b50      	cmp	r3, #80	; 0x50
 800b076:	d033      	beq.n	800b0e0 <HAL_TIM_ConfigClockSource+0xe4>
 800b078:	2b60      	cmp	r3, #96	; 0x60
 800b07a:	d041      	beq.n	800b100 <HAL_TIM_ConfigClockSource+0x104>
      break;
 800b07c:	e06a      	b.n	800b154 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 800b07e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b082:	d066      	beq.n	800b152 <HAL_TIM_ConfigClockSource+0x156>
 800b084:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b088:	d017      	beq.n	800b0ba <HAL_TIM_ConfigClockSource+0xbe>
      break;
 800b08a:	e063      	b.n	800b154 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 800b08c:	687b      	ldr	r3, [r7, #4]
 800b08e:	6818      	ldr	r0, [r3, #0]
 800b090:	683b      	ldr	r3, [r7, #0]
 800b092:	6899      	ldr	r1, [r3, #8]
 800b094:	683b      	ldr	r3, [r7, #0]
 800b096:	685a      	ldr	r2, [r3, #4]
 800b098:	683b      	ldr	r3, [r7, #0]
 800b09a:	68db      	ldr	r3, [r3, #12]
 800b09c:	f000 fbee 	bl	800b87c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	681b      	ldr	r3, [r3, #0]
 800b0a4:	689b      	ldr	r3, [r3, #8]
 800b0a6:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800b0a8:	68fb      	ldr	r3, [r7, #12]
 800b0aa:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800b0ae:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800b0b0:	687b      	ldr	r3, [r7, #4]
 800b0b2:	681b      	ldr	r3, [r3, #0]
 800b0b4:	68fa      	ldr	r2, [r7, #12]
 800b0b6:	609a      	str	r2, [r3, #8]
      break;
 800b0b8:	e04c      	b.n	800b154 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 800b0ba:	687b      	ldr	r3, [r7, #4]
 800b0bc:	6818      	ldr	r0, [r3, #0]
 800b0be:	683b      	ldr	r3, [r7, #0]
 800b0c0:	6899      	ldr	r1, [r3, #8]
 800b0c2:	683b      	ldr	r3, [r7, #0]
 800b0c4:	685a      	ldr	r2, [r3, #4]
 800b0c6:	683b      	ldr	r3, [r7, #0]
 800b0c8:	68db      	ldr	r3, [r3, #12]
 800b0ca:	f000 fbd7 	bl	800b87c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800b0ce:	687b      	ldr	r3, [r7, #4]
 800b0d0:	681b      	ldr	r3, [r3, #0]
 800b0d2:	689a      	ldr	r2, [r3, #8]
 800b0d4:	687b      	ldr	r3, [r7, #4]
 800b0d6:	681b      	ldr	r3, [r3, #0]
 800b0d8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800b0dc:	609a      	str	r2, [r3, #8]
      break;
 800b0de:	e039      	b.n	800b154 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	6818      	ldr	r0, [r3, #0]
 800b0e4:	683b      	ldr	r3, [r7, #0]
 800b0e6:	6859      	ldr	r1, [r3, #4]
 800b0e8:	683b      	ldr	r3, [r7, #0]
 800b0ea:	68db      	ldr	r3, [r3, #12]
 800b0ec:	461a      	mov	r2, r3
 800b0ee:	f000 fb49 	bl	800b784 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800b0f2:	687b      	ldr	r3, [r7, #4]
 800b0f4:	681b      	ldr	r3, [r3, #0]
 800b0f6:	2150      	movs	r1, #80	; 0x50
 800b0f8:	4618      	mov	r0, r3
 800b0fa:	f000 fba2 	bl	800b842 <TIM_ITRx_SetConfig>
      break;
 800b0fe:	e029      	b.n	800b154 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	6818      	ldr	r0, [r3, #0]
 800b104:	683b      	ldr	r3, [r7, #0]
 800b106:	6859      	ldr	r1, [r3, #4]
 800b108:	683b      	ldr	r3, [r7, #0]
 800b10a:	68db      	ldr	r3, [r3, #12]
 800b10c:	461a      	mov	r2, r3
 800b10e:	f000 fb68 	bl	800b7e2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800b112:	687b      	ldr	r3, [r7, #4]
 800b114:	681b      	ldr	r3, [r3, #0]
 800b116:	2160      	movs	r1, #96	; 0x60
 800b118:	4618      	mov	r0, r3
 800b11a:	f000 fb92 	bl	800b842 <TIM_ITRx_SetConfig>
      break;
 800b11e:	e019      	b.n	800b154 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800b120:	687b      	ldr	r3, [r7, #4]
 800b122:	6818      	ldr	r0, [r3, #0]
 800b124:	683b      	ldr	r3, [r7, #0]
 800b126:	6859      	ldr	r1, [r3, #4]
 800b128:	683b      	ldr	r3, [r7, #0]
 800b12a:	68db      	ldr	r3, [r3, #12]
 800b12c:	461a      	mov	r2, r3
 800b12e:	f000 fb29 	bl	800b784 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800b132:	687b      	ldr	r3, [r7, #4]
 800b134:	681b      	ldr	r3, [r3, #0]
 800b136:	2140      	movs	r1, #64	; 0x40
 800b138:	4618      	mov	r0, r3
 800b13a:	f000 fb82 	bl	800b842 <TIM_ITRx_SetConfig>
      break;
 800b13e:	e009      	b.n	800b154 <HAL_TIM_ConfigClockSource+0x158>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800b140:	687b      	ldr	r3, [r7, #4]
 800b142:	681a      	ldr	r2, [r3, #0]
 800b144:	683b      	ldr	r3, [r7, #0]
 800b146:	681b      	ldr	r3, [r3, #0]
 800b148:	4619      	mov	r1, r3
 800b14a:	4610      	mov	r0, r2
 800b14c:	f000 fb79 	bl	800b842 <TIM_ITRx_SetConfig>
        break;
 800b150:	e000      	b.n	800b154 <HAL_TIM_ConfigClockSource+0x158>
      break;
 800b152:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800b154:	687b      	ldr	r3, [r7, #4]
 800b156:	2201      	movs	r2, #1
 800b158:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	2200      	movs	r2, #0
 800b160:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b164:	2300      	movs	r3, #0
}
 800b166:	4618      	mov	r0, r3
 800b168:	3710      	adds	r7, #16
 800b16a:	46bd      	mov	sp, r7
 800b16c:	bd80      	pop	{r7, pc}

0800b16e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800b16e:	b480      	push	{r7}
 800b170:	b083      	sub	sp, #12
 800b172:	af00      	add	r7, sp, #0
 800b174:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800b176:	bf00      	nop
 800b178:	370c      	adds	r7, #12
 800b17a:	46bd      	mov	sp, r7
 800b17c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b180:	4770      	bx	lr

0800b182 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800b182:	b480      	push	{r7}
 800b184:	b083      	sub	sp, #12
 800b186:	af00      	add	r7, sp, #0
 800b188:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800b18a:	bf00      	nop
 800b18c:	370c      	adds	r7, #12
 800b18e:	46bd      	mov	sp, r7
 800b190:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b194:	4770      	bx	lr

0800b196 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800b196:	b480      	push	{r7}
 800b198:	b083      	sub	sp, #12
 800b19a:	af00      	add	r7, sp, #0
 800b19c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800b19e:	bf00      	nop
 800b1a0:	370c      	adds	r7, #12
 800b1a2:	46bd      	mov	sp, r7
 800b1a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1a8:	4770      	bx	lr

0800b1aa <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800b1aa:	b480      	push	{r7}
 800b1ac:	b083      	sub	sp, #12
 800b1ae:	af00      	add	r7, sp, #0
 800b1b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800b1b2:	bf00      	nop
 800b1b4:	370c      	adds	r7, #12
 800b1b6:	46bd      	mov	sp, r7
 800b1b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1bc:	4770      	bx	lr
	...

0800b1c0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800b1c0:	b480      	push	{r7}
 800b1c2:	b085      	sub	sp, #20
 800b1c4:	af00      	add	r7, sp, #0
 800b1c6:	6078      	str	r0, [r7, #4]
 800b1c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800b1ca:	687b      	ldr	r3, [r7, #4]
 800b1cc:	681b      	ldr	r3, [r3, #0]
 800b1ce:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b1d0:	687b      	ldr	r3, [r7, #4]
 800b1d2:	4a2a      	ldr	r2, [pc, #168]	; (800b27c <TIM_Base_SetConfig+0xbc>)
 800b1d4:	4293      	cmp	r3, r2
 800b1d6:	d003      	beq.n	800b1e0 <TIM_Base_SetConfig+0x20>
 800b1d8:	687b      	ldr	r3, [r7, #4]
 800b1da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b1de:	d108      	bne.n	800b1f2 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b1e0:	68fb      	ldr	r3, [r7, #12]
 800b1e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b1e6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800b1e8:	683b      	ldr	r3, [r7, #0]
 800b1ea:	685b      	ldr	r3, [r3, #4]
 800b1ec:	68fa      	ldr	r2, [r7, #12]
 800b1ee:	4313      	orrs	r3, r2
 800b1f0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b1f2:	687b      	ldr	r3, [r7, #4]
 800b1f4:	4a21      	ldr	r2, [pc, #132]	; (800b27c <TIM_Base_SetConfig+0xbc>)
 800b1f6:	4293      	cmp	r3, r2
 800b1f8:	d00b      	beq.n	800b212 <TIM_Base_SetConfig+0x52>
 800b1fa:	687b      	ldr	r3, [r7, #4]
 800b1fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b200:	d007      	beq.n	800b212 <TIM_Base_SetConfig+0x52>
 800b202:	687b      	ldr	r3, [r7, #4]
 800b204:	4a1e      	ldr	r2, [pc, #120]	; (800b280 <TIM_Base_SetConfig+0xc0>)
 800b206:	4293      	cmp	r3, r2
 800b208:	d003      	beq.n	800b212 <TIM_Base_SetConfig+0x52>
 800b20a:	687b      	ldr	r3, [r7, #4]
 800b20c:	4a1d      	ldr	r2, [pc, #116]	; (800b284 <TIM_Base_SetConfig+0xc4>)
 800b20e:	4293      	cmp	r3, r2
 800b210:	d108      	bne.n	800b224 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800b212:	68fb      	ldr	r3, [r7, #12]
 800b214:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b218:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b21a:	683b      	ldr	r3, [r7, #0]
 800b21c:	68db      	ldr	r3, [r3, #12]
 800b21e:	68fa      	ldr	r2, [r7, #12]
 800b220:	4313      	orrs	r3, r2
 800b222:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b224:	68fb      	ldr	r3, [r7, #12]
 800b226:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800b22a:	683b      	ldr	r3, [r7, #0]
 800b22c:	695b      	ldr	r3, [r3, #20]
 800b22e:	4313      	orrs	r3, r2
 800b230:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800b232:	687b      	ldr	r3, [r7, #4]
 800b234:	68fa      	ldr	r2, [r7, #12]
 800b236:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b238:	683b      	ldr	r3, [r7, #0]
 800b23a:	689a      	ldr	r2, [r3, #8]
 800b23c:	687b      	ldr	r3, [r7, #4]
 800b23e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800b240:	683b      	ldr	r3, [r7, #0]
 800b242:	681a      	ldr	r2, [r3, #0]
 800b244:	687b      	ldr	r3, [r7, #4]
 800b246:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b248:	687b      	ldr	r3, [r7, #4]
 800b24a:	4a0c      	ldr	r2, [pc, #48]	; (800b27c <TIM_Base_SetConfig+0xbc>)
 800b24c:	4293      	cmp	r3, r2
 800b24e:	d007      	beq.n	800b260 <TIM_Base_SetConfig+0xa0>
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	4a0b      	ldr	r2, [pc, #44]	; (800b280 <TIM_Base_SetConfig+0xc0>)
 800b254:	4293      	cmp	r3, r2
 800b256:	d003      	beq.n	800b260 <TIM_Base_SetConfig+0xa0>
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	4a0a      	ldr	r2, [pc, #40]	; (800b284 <TIM_Base_SetConfig+0xc4>)
 800b25c:	4293      	cmp	r3, r2
 800b25e:	d103      	bne.n	800b268 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800b260:	683b      	ldr	r3, [r7, #0]
 800b262:	691a      	ldr	r2, [r3, #16]
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800b268:	687b      	ldr	r3, [r7, #4]
 800b26a:	2201      	movs	r2, #1
 800b26c:	615a      	str	r2, [r3, #20]
}
 800b26e:	bf00      	nop
 800b270:	3714      	adds	r7, #20
 800b272:	46bd      	mov	sp, r7
 800b274:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b278:	4770      	bx	lr
 800b27a:	bf00      	nop
 800b27c:	40012c00 	.word	0x40012c00
 800b280:	40014400 	.word	0x40014400
 800b284:	40014800 	.word	0x40014800

0800b288 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b288:	b480      	push	{r7}
 800b28a:	b087      	sub	sp, #28
 800b28c:	af00      	add	r7, sp, #0
 800b28e:	6078      	str	r0, [r7, #4]
 800b290:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b292:	687b      	ldr	r3, [r7, #4]
 800b294:	6a1b      	ldr	r3, [r3, #32]
 800b296:	f023 0201 	bic.w	r2, r3, #1
 800b29a:	687b      	ldr	r3, [r7, #4]
 800b29c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b29e:	687b      	ldr	r3, [r7, #4]
 800b2a0:	6a1b      	ldr	r3, [r3, #32]
 800b2a2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b2a4:	687b      	ldr	r3, [r7, #4]
 800b2a6:	685b      	ldr	r3, [r3, #4]
 800b2a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b2aa:	687b      	ldr	r3, [r7, #4]
 800b2ac:	699b      	ldr	r3, [r3, #24]
 800b2ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800b2b0:	68fb      	ldr	r3, [r7, #12]
 800b2b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b2b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b2ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800b2bc:	68fb      	ldr	r3, [r7, #12]
 800b2be:	f023 0303 	bic.w	r3, r3, #3
 800b2c2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b2c4:	683b      	ldr	r3, [r7, #0]
 800b2c6:	681b      	ldr	r3, [r3, #0]
 800b2c8:	68fa      	ldr	r2, [r7, #12]
 800b2ca:	4313      	orrs	r3, r2
 800b2cc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800b2ce:	697b      	ldr	r3, [r7, #20]
 800b2d0:	f023 0302 	bic.w	r3, r3, #2
 800b2d4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800b2d6:	683b      	ldr	r3, [r7, #0]
 800b2d8:	689b      	ldr	r3, [r3, #8]
 800b2da:	697a      	ldr	r2, [r7, #20]
 800b2dc:	4313      	orrs	r3, r2
 800b2de:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	4a24      	ldr	r2, [pc, #144]	; (800b374 <TIM_OC1_SetConfig+0xec>)
 800b2e4:	4293      	cmp	r3, r2
 800b2e6:	d007      	beq.n	800b2f8 <TIM_OC1_SetConfig+0x70>
 800b2e8:	687b      	ldr	r3, [r7, #4]
 800b2ea:	4a23      	ldr	r2, [pc, #140]	; (800b378 <TIM_OC1_SetConfig+0xf0>)
 800b2ec:	4293      	cmp	r3, r2
 800b2ee:	d003      	beq.n	800b2f8 <TIM_OC1_SetConfig+0x70>
 800b2f0:	687b      	ldr	r3, [r7, #4]
 800b2f2:	4a22      	ldr	r2, [pc, #136]	; (800b37c <TIM_OC1_SetConfig+0xf4>)
 800b2f4:	4293      	cmp	r3, r2
 800b2f6:	d10c      	bne.n	800b312 <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800b2f8:	697b      	ldr	r3, [r7, #20]
 800b2fa:	f023 0308 	bic.w	r3, r3, #8
 800b2fe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800b300:	683b      	ldr	r3, [r7, #0]
 800b302:	68db      	ldr	r3, [r3, #12]
 800b304:	697a      	ldr	r2, [r7, #20]
 800b306:	4313      	orrs	r3, r2
 800b308:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800b30a:	697b      	ldr	r3, [r7, #20]
 800b30c:	f023 0304 	bic.w	r3, r3, #4
 800b310:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b312:	687b      	ldr	r3, [r7, #4]
 800b314:	4a17      	ldr	r2, [pc, #92]	; (800b374 <TIM_OC1_SetConfig+0xec>)
 800b316:	4293      	cmp	r3, r2
 800b318:	d007      	beq.n	800b32a <TIM_OC1_SetConfig+0xa2>
 800b31a:	687b      	ldr	r3, [r7, #4]
 800b31c:	4a17      	ldr	r2, [pc, #92]	; (800b37c <TIM_OC1_SetConfig+0xf4>)
 800b31e:	4293      	cmp	r3, r2
 800b320:	d003      	beq.n	800b32a <TIM_OC1_SetConfig+0xa2>
 800b322:	687b      	ldr	r3, [r7, #4]
 800b324:	4a14      	ldr	r2, [pc, #80]	; (800b378 <TIM_OC1_SetConfig+0xf0>)
 800b326:	4293      	cmp	r3, r2
 800b328:	d111      	bne.n	800b34e <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800b32a:	693b      	ldr	r3, [r7, #16]
 800b32c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b330:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800b332:	693b      	ldr	r3, [r7, #16]
 800b334:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800b338:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800b33a:	683b      	ldr	r3, [r7, #0]
 800b33c:	695b      	ldr	r3, [r3, #20]
 800b33e:	693a      	ldr	r2, [r7, #16]
 800b340:	4313      	orrs	r3, r2
 800b342:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800b344:	683b      	ldr	r3, [r7, #0]
 800b346:	699b      	ldr	r3, [r3, #24]
 800b348:	693a      	ldr	r2, [r7, #16]
 800b34a:	4313      	orrs	r3, r2
 800b34c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b34e:	687b      	ldr	r3, [r7, #4]
 800b350:	693a      	ldr	r2, [r7, #16]
 800b352:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b354:	687b      	ldr	r3, [r7, #4]
 800b356:	68fa      	ldr	r2, [r7, #12]
 800b358:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800b35a:	683b      	ldr	r3, [r7, #0]
 800b35c:	685a      	ldr	r2, [r3, #4]
 800b35e:	687b      	ldr	r3, [r7, #4]
 800b360:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b362:	687b      	ldr	r3, [r7, #4]
 800b364:	697a      	ldr	r2, [r7, #20]
 800b366:	621a      	str	r2, [r3, #32]
}
 800b368:	bf00      	nop
 800b36a:	371c      	adds	r7, #28
 800b36c:	46bd      	mov	sp, r7
 800b36e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b372:	4770      	bx	lr
 800b374:	40012c00 	.word	0x40012c00
 800b378:	40014800 	.word	0x40014800
 800b37c:	40014400 	.word	0x40014400

0800b380 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b380:	b480      	push	{r7}
 800b382:	b087      	sub	sp, #28
 800b384:	af00      	add	r7, sp, #0
 800b386:	6078      	str	r0, [r7, #4]
 800b388:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b38a:	687b      	ldr	r3, [r7, #4]
 800b38c:	6a1b      	ldr	r3, [r3, #32]
 800b38e:	f023 0210 	bic.w	r2, r3, #16
 800b392:	687b      	ldr	r3, [r7, #4]
 800b394:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b396:	687b      	ldr	r3, [r7, #4]
 800b398:	6a1b      	ldr	r3, [r3, #32]
 800b39a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	685b      	ldr	r3, [r3, #4]
 800b3a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b3a2:	687b      	ldr	r3, [r7, #4]
 800b3a4:	699b      	ldr	r3, [r3, #24]
 800b3a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800b3a8:	68fb      	ldr	r3, [r7, #12]
 800b3aa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800b3ae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b3b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800b3b4:	68fb      	ldr	r3, [r7, #12]
 800b3b6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b3ba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b3bc:	683b      	ldr	r3, [r7, #0]
 800b3be:	681b      	ldr	r3, [r3, #0]
 800b3c0:	021b      	lsls	r3, r3, #8
 800b3c2:	68fa      	ldr	r2, [r7, #12]
 800b3c4:	4313      	orrs	r3, r2
 800b3c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800b3c8:	697b      	ldr	r3, [r7, #20]
 800b3ca:	f023 0320 	bic.w	r3, r3, #32
 800b3ce:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800b3d0:	683b      	ldr	r3, [r7, #0]
 800b3d2:	689b      	ldr	r3, [r3, #8]
 800b3d4:	011b      	lsls	r3, r3, #4
 800b3d6:	697a      	ldr	r2, [r7, #20]
 800b3d8:	4313      	orrs	r3, r2
 800b3da:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800b3dc:	687b      	ldr	r3, [r7, #4]
 800b3de:	4a22      	ldr	r2, [pc, #136]	; (800b468 <TIM_OC2_SetConfig+0xe8>)
 800b3e0:	4293      	cmp	r3, r2
 800b3e2:	d10d      	bne.n	800b400 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800b3e4:	697b      	ldr	r3, [r7, #20]
 800b3e6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b3ea:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800b3ec:	683b      	ldr	r3, [r7, #0]
 800b3ee:	68db      	ldr	r3, [r3, #12]
 800b3f0:	011b      	lsls	r3, r3, #4
 800b3f2:	697a      	ldr	r2, [r7, #20]
 800b3f4:	4313      	orrs	r3, r2
 800b3f6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800b3f8:	697b      	ldr	r3, [r7, #20]
 800b3fa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b3fe:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b400:	687b      	ldr	r3, [r7, #4]
 800b402:	4a19      	ldr	r2, [pc, #100]	; (800b468 <TIM_OC2_SetConfig+0xe8>)
 800b404:	4293      	cmp	r3, r2
 800b406:	d007      	beq.n	800b418 <TIM_OC2_SetConfig+0x98>
 800b408:	687b      	ldr	r3, [r7, #4]
 800b40a:	4a18      	ldr	r2, [pc, #96]	; (800b46c <TIM_OC2_SetConfig+0xec>)
 800b40c:	4293      	cmp	r3, r2
 800b40e:	d003      	beq.n	800b418 <TIM_OC2_SetConfig+0x98>
 800b410:	687b      	ldr	r3, [r7, #4]
 800b412:	4a17      	ldr	r2, [pc, #92]	; (800b470 <TIM_OC2_SetConfig+0xf0>)
 800b414:	4293      	cmp	r3, r2
 800b416:	d113      	bne.n	800b440 <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800b418:	693b      	ldr	r3, [r7, #16]
 800b41a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800b41e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800b420:	693b      	ldr	r3, [r7, #16]
 800b422:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b426:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800b428:	683b      	ldr	r3, [r7, #0]
 800b42a:	695b      	ldr	r3, [r3, #20]
 800b42c:	009b      	lsls	r3, r3, #2
 800b42e:	693a      	ldr	r2, [r7, #16]
 800b430:	4313      	orrs	r3, r2
 800b432:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800b434:	683b      	ldr	r3, [r7, #0]
 800b436:	699b      	ldr	r3, [r3, #24]
 800b438:	009b      	lsls	r3, r3, #2
 800b43a:	693a      	ldr	r2, [r7, #16]
 800b43c:	4313      	orrs	r3, r2
 800b43e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b440:	687b      	ldr	r3, [r7, #4]
 800b442:	693a      	ldr	r2, [r7, #16]
 800b444:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b446:	687b      	ldr	r3, [r7, #4]
 800b448:	68fa      	ldr	r2, [r7, #12]
 800b44a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800b44c:	683b      	ldr	r3, [r7, #0]
 800b44e:	685a      	ldr	r2, [r3, #4]
 800b450:	687b      	ldr	r3, [r7, #4]
 800b452:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b454:	687b      	ldr	r3, [r7, #4]
 800b456:	697a      	ldr	r2, [r7, #20]
 800b458:	621a      	str	r2, [r3, #32]
}
 800b45a:	bf00      	nop
 800b45c:	371c      	adds	r7, #28
 800b45e:	46bd      	mov	sp, r7
 800b460:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b464:	4770      	bx	lr
 800b466:	bf00      	nop
 800b468:	40012c00 	.word	0x40012c00
 800b46c:	40014400 	.word	0x40014400
 800b470:	40014800 	.word	0x40014800

0800b474 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b474:	b480      	push	{r7}
 800b476:	b087      	sub	sp, #28
 800b478:	af00      	add	r7, sp, #0
 800b47a:	6078      	str	r0, [r7, #4]
 800b47c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800b47e:	687b      	ldr	r3, [r7, #4]
 800b480:	6a1b      	ldr	r3, [r3, #32]
 800b482:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800b486:	687b      	ldr	r3, [r7, #4]
 800b488:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b48a:	687b      	ldr	r3, [r7, #4]
 800b48c:	6a1b      	ldr	r3, [r3, #32]
 800b48e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b490:	687b      	ldr	r3, [r7, #4]
 800b492:	685b      	ldr	r3, [r3, #4]
 800b494:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b496:	687b      	ldr	r3, [r7, #4]
 800b498:	69db      	ldr	r3, [r3, #28]
 800b49a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800b49c:	68fb      	ldr	r3, [r7, #12]
 800b49e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b4a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b4a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800b4a8:	68fb      	ldr	r3, [r7, #12]
 800b4aa:	f023 0303 	bic.w	r3, r3, #3
 800b4ae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b4b0:	683b      	ldr	r3, [r7, #0]
 800b4b2:	681b      	ldr	r3, [r3, #0]
 800b4b4:	68fa      	ldr	r2, [r7, #12]
 800b4b6:	4313      	orrs	r3, r2
 800b4b8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800b4ba:	697b      	ldr	r3, [r7, #20]
 800b4bc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800b4c0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800b4c2:	683b      	ldr	r3, [r7, #0]
 800b4c4:	689b      	ldr	r3, [r3, #8]
 800b4c6:	021b      	lsls	r3, r3, #8
 800b4c8:	697a      	ldr	r2, [r7, #20]
 800b4ca:	4313      	orrs	r3, r2
 800b4cc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800b4ce:	687b      	ldr	r3, [r7, #4]
 800b4d0:	4a21      	ldr	r2, [pc, #132]	; (800b558 <TIM_OC3_SetConfig+0xe4>)
 800b4d2:	4293      	cmp	r3, r2
 800b4d4:	d10d      	bne.n	800b4f2 <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800b4d6:	697b      	ldr	r3, [r7, #20]
 800b4d8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b4dc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800b4de:	683b      	ldr	r3, [r7, #0]
 800b4e0:	68db      	ldr	r3, [r3, #12]
 800b4e2:	021b      	lsls	r3, r3, #8
 800b4e4:	697a      	ldr	r2, [r7, #20]
 800b4e6:	4313      	orrs	r3, r2
 800b4e8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800b4ea:	697b      	ldr	r3, [r7, #20]
 800b4ec:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800b4f0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b4f2:	687b      	ldr	r3, [r7, #4]
 800b4f4:	4a18      	ldr	r2, [pc, #96]	; (800b558 <TIM_OC3_SetConfig+0xe4>)
 800b4f6:	4293      	cmp	r3, r2
 800b4f8:	d007      	beq.n	800b50a <TIM_OC3_SetConfig+0x96>
 800b4fa:	687b      	ldr	r3, [r7, #4]
 800b4fc:	4a17      	ldr	r2, [pc, #92]	; (800b55c <TIM_OC3_SetConfig+0xe8>)
 800b4fe:	4293      	cmp	r3, r2
 800b500:	d003      	beq.n	800b50a <TIM_OC3_SetConfig+0x96>
 800b502:	687b      	ldr	r3, [r7, #4]
 800b504:	4a16      	ldr	r2, [pc, #88]	; (800b560 <TIM_OC3_SetConfig+0xec>)
 800b506:	4293      	cmp	r3, r2
 800b508:	d113      	bne.n	800b532 <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800b50a:	693b      	ldr	r3, [r7, #16]
 800b50c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b510:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800b512:	693b      	ldr	r3, [r7, #16]
 800b514:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800b518:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800b51a:	683b      	ldr	r3, [r7, #0]
 800b51c:	695b      	ldr	r3, [r3, #20]
 800b51e:	011b      	lsls	r3, r3, #4
 800b520:	693a      	ldr	r2, [r7, #16]
 800b522:	4313      	orrs	r3, r2
 800b524:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800b526:	683b      	ldr	r3, [r7, #0]
 800b528:	699b      	ldr	r3, [r3, #24]
 800b52a:	011b      	lsls	r3, r3, #4
 800b52c:	693a      	ldr	r2, [r7, #16]
 800b52e:	4313      	orrs	r3, r2
 800b530:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b532:	687b      	ldr	r3, [r7, #4]
 800b534:	693a      	ldr	r2, [r7, #16]
 800b536:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b538:	687b      	ldr	r3, [r7, #4]
 800b53a:	68fa      	ldr	r2, [r7, #12]
 800b53c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800b53e:	683b      	ldr	r3, [r7, #0]
 800b540:	685a      	ldr	r2, [r3, #4]
 800b542:	687b      	ldr	r3, [r7, #4]
 800b544:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b546:	687b      	ldr	r3, [r7, #4]
 800b548:	697a      	ldr	r2, [r7, #20]
 800b54a:	621a      	str	r2, [r3, #32]
}
 800b54c:	bf00      	nop
 800b54e:	371c      	adds	r7, #28
 800b550:	46bd      	mov	sp, r7
 800b552:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b556:	4770      	bx	lr
 800b558:	40012c00 	.word	0x40012c00
 800b55c:	40014400 	.word	0x40014400
 800b560:	40014800 	.word	0x40014800

0800b564 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b564:	b480      	push	{r7}
 800b566:	b087      	sub	sp, #28
 800b568:	af00      	add	r7, sp, #0
 800b56a:	6078      	str	r0, [r7, #4]
 800b56c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800b56e:	687b      	ldr	r3, [r7, #4]
 800b570:	6a1b      	ldr	r3, [r3, #32]
 800b572:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800b576:	687b      	ldr	r3, [r7, #4]
 800b578:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b57a:	687b      	ldr	r3, [r7, #4]
 800b57c:	6a1b      	ldr	r3, [r3, #32]
 800b57e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b580:	687b      	ldr	r3, [r7, #4]
 800b582:	685b      	ldr	r3, [r3, #4]
 800b584:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b586:	687b      	ldr	r3, [r7, #4]
 800b588:	69db      	ldr	r3, [r3, #28]
 800b58a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800b58c:	68fb      	ldr	r3, [r7, #12]
 800b58e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800b592:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b596:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800b598:	68fb      	ldr	r3, [r7, #12]
 800b59a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b59e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b5a0:	683b      	ldr	r3, [r7, #0]
 800b5a2:	681b      	ldr	r3, [r3, #0]
 800b5a4:	021b      	lsls	r3, r3, #8
 800b5a6:	68fa      	ldr	r2, [r7, #12]
 800b5a8:	4313      	orrs	r3, r2
 800b5aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800b5ac:	693b      	ldr	r3, [r7, #16]
 800b5ae:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800b5b2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800b5b4:	683b      	ldr	r3, [r7, #0]
 800b5b6:	689b      	ldr	r3, [r3, #8]
 800b5b8:	031b      	lsls	r3, r3, #12
 800b5ba:	693a      	ldr	r2, [r7, #16]
 800b5bc:	4313      	orrs	r3, r2
 800b5be:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b5c0:	687b      	ldr	r3, [r7, #4]
 800b5c2:	4a14      	ldr	r2, [pc, #80]	; (800b614 <TIM_OC4_SetConfig+0xb0>)
 800b5c4:	4293      	cmp	r3, r2
 800b5c6:	d007      	beq.n	800b5d8 <TIM_OC4_SetConfig+0x74>
 800b5c8:	687b      	ldr	r3, [r7, #4]
 800b5ca:	4a13      	ldr	r2, [pc, #76]	; (800b618 <TIM_OC4_SetConfig+0xb4>)
 800b5cc:	4293      	cmp	r3, r2
 800b5ce:	d003      	beq.n	800b5d8 <TIM_OC4_SetConfig+0x74>
 800b5d0:	687b      	ldr	r3, [r7, #4]
 800b5d2:	4a12      	ldr	r2, [pc, #72]	; (800b61c <TIM_OC4_SetConfig+0xb8>)
 800b5d4:	4293      	cmp	r3, r2
 800b5d6:	d109      	bne.n	800b5ec <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800b5d8:	697b      	ldr	r3, [r7, #20]
 800b5da:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b5de:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800b5e0:	683b      	ldr	r3, [r7, #0]
 800b5e2:	695b      	ldr	r3, [r3, #20]
 800b5e4:	019b      	lsls	r3, r3, #6
 800b5e6:	697a      	ldr	r2, [r7, #20]
 800b5e8:	4313      	orrs	r3, r2
 800b5ea:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b5ec:	687b      	ldr	r3, [r7, #4]
 800b5ee:	697a      	ldr	r2, [r7, #20]
 800b5f0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b5f2:	687b      	ldr	r3, [r7, #4]
 800b5f4:	68fa      	ldr	r2, [r7, #12]
 800b5f6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800b5f8:	683b      	ldr	r3, [r7, #0]
 800b5fa:	685a      	ldr	r2, [r3, #4]
 800b5fc:	687b      	ldr	r3, [r7, #4]
 800b5fe:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b600:	687b      	ldr	r3, [r7, #4]
 800b602:	693a      	ldr	r2, [r7, #16]
 800b604:	621a      	str	r2, [r3, #32]
}
 800b606:	bf00      	nop
 800b608:	371c      	adds	r7, #28
 800b60a:	46bd      	mov	sp, r7
 800b60c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b610:	4770      	bx	lr
 800b612:	bf00      	nop
 800b614:	40012c00 	.word	0x40012c00
 800b618:	40014400 	.word	0x40014400
 800b61c:	40014800 	.word	0x40014800

0800b620 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800b620:	b480      	push	{r7}
 800b622:	b087      	sub	sp, #28
 800b624:	af00      	add	r7, sp, #0
 800b626:	6078      	str	r0, [r7, #4]
 800b628:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800b62a:	687b      	ldr	r3, [r7, #4]
 800b62c:	6a1b      	ldr	r3, [r3, #32]
 800b62e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800b632:	687b      	ldr	r3, [r7, #4]
 800b634:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b636:	687b      	ldr	r3, [r7, #4]
 800b638:	6a1b      	ldr	r3, [r3, #32]
 800b63a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b63c:	687b      	ldr	r3, [r7, #4]
 800b63e:	685b      	ldr	r3, [r3, #4]
 800b640:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800b642:	687b      	ldr	r3, [r7, #4]
 800b644:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b646:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800b648:	68fb      	ldr	r3, [r7, #12]
 800b64a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b64e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b652:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b654:	683b      	ldr	r3, [r7, #0]
 800b656:	681b      	ldr	r3, [r3, #0]
 800b658:	68fa      	ldr	r2, [r7, #12]
 800b65a:	4313      	orrs	r3, r2
 800b65c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800b65e:	693b      	ldr	r3, [r7, #16]
 800b660:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800b664:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800b666:	683b      	ldr	r3, [r7, #0]
 800b668:	689b      	ldr	r3, [r3, #8]
 800b66a:	041b      	lsls	r3, r3, #16
 800b66c:	693a      	ldr	r2, [r7, #16]
 800b66e:	4313      	orrs	r3, r2
 800b670:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b672:	687b      	ldr	r3, [r7, #4]
 800b674:	4a13      	ldr	r2, [pc, #76]	; (800b6c4 <TIM_OC5_SetConfig+0xa4>)
 800b676:	4293      	cmp	r3, r2
 800b678:	d007      	beq.n	800b68a <TIM_OC5_SetConfig+0x6a>
 800b67a:	687b      	ldr	r3, [r7, #4]
 800b67c:	4a12      	ldr	r2, [pc, #72]	; (800b6c8 <TIM_OC5_SetConfig+0xa8>)
 800b67e:	4293      	cmp	r3, r2
 800b680:	d003      	beq.n	800b68a <TIM_OC5_SetConfig+0x6a>
 800b682:	687b      	ldr	r3, [r7, #4]
 800b684:	4a11      	ldr	r2, [pc, #68]	; (800b6cc <TIM_OC5_SetConfig+0xac>)
 800b686:	4293      	cmp	r3, r2
 800b688:	d109      	bne.n	800b69e <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800b68a:	697b      	ldr	r3, [r7, #20]
 800b68c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b690:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800b692:	683b      	ldr	r3, [r7, #0]
 800b694:	695b      	ldr	r3, [r3, #20]
 800b696:	021b      	lsls	r3, r3, #8
 800b698:	697a      	ldr	r2, [r7, #20]
 800b69a:	4313      	orrs	r3, r2
 800b69c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b69e:	687b      	ldr	r3, [r7, #4]
 800b6a0:	697a      	ldr	r2, [r7, #20]
 800b6a2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800b6a4:	687b      	ldr	r3, [r7, #4]
 800b6a6:	68fa      	ldr	r2, [r7, #12]
 800b6a8:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800b6aa:	683b      	ldr	r3, [r7, #0]
 800b6ac:	685a      	ldr	r2, [r3, #4]
 800b6ae:	687b      	ldr	r3, [r7, #4]
 800b6b0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b6b2:	687b      	ldr	r3, [r7, #4]
 800b6b4:	693a      	ldr	r2, [r7, #16]
 800b6b6:	621a      	str	r2, [r3, #32]
}
 800b6b8:	bf00      	nop
 800b6ba:	371c      	adds	r7, #28
 800b6bc:	46bd      	mov	sp, r7
 800b6be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6c2:	4770      	bx	lr
 800b6c4:	40012c00 	.word	0x40012c00
 800b6c8:	40014400 	.word	0x40014400
 800b6cc:	40014800 	.word	0x40014800

0800b6d0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800b6d0:	b480      	push	{r7}
 800b6d2:	b087      	sub	sp, #28
 800b6d4:	af00      	add	r7, sp, #0
 800b6d6:	6078      	str	r0, [r7, #4]
 800b6d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800b6da:	687b      	ldr	r3, [r7, #4]
 800b6dc:	6a1b      	ldr	r3, [r3, #32]
 800b6de:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800b6e2:	687b      	ldr	r3, [r7, #4]
 800b6e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b6e6:	687b      	ldr	r3, [r7, #4]
 800b6e8:	6a1b      	ldr	r3, [r3, #32]
 800b6ea:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b6ec:	687b      	ldr	r3, [r7, #4]
 800b6ee:	685b      	ldr	r3, [r3, #4]
 800b6f0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800b6f2:	687b      	ldr	r3, [r7, #4]
 800b6f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b6f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800b6f8:	68fb      	ldr	r3, [r7, #12]
 800b6fa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800b6fe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b702:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b704:	683b      	ldr	r3, [r7, #0]
 800b706:	681b      	ldr	r3, [r3, #0]
 800b708:	021b      	lsls	r3, r3, #8
 800b70a:	68fa      	ldr	r2, [r7, #12]
 800b70c:	4313      	orrs	r3, r2
 800b70e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800b710:	693b      	ldr	r3, [r7, #16]
 800b712:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800b716:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800b718:	683b      	ldr	r3, [r7, #0]
 800b71a:	689b      	ldr	r3, [r3, #8]
 800b71c:	051b      	lsls	r3, r3, #20
 800b71e:	693a      	ldr	r2, [r7, #16]
 800b720:	4313      	orrs	r3, r2
 800b722:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b724:	687b      	ldr	r3, [r7, #4]
 800b726:	4a14      	ldr	r2, [pc, #80]	; (800b778 <TIM_OC6_SetConfig+0xa8>)
 800b728:	4293      	cmp	r3, r2
 800b72a:	d007      	beq.n	800b73c <TIM_OC6_SetConfig+0x6c>
 800b72c:	687b      	ldr	r3, [r7, #4]
 800b72e:	4a13      	ldr	r2, [pc, #76]	; (800b77c <TIM_OC6_SetConfig+0xac>)
 800b730:	4293      	cmp	r3, r2
 800b732:	d003      	beq.n	800b73c <TIM_OC6_SetConfig+0x6c>
 800b734:	687b      	ldr	r3, [r7, #4]
 800b736:	4a12      	ldr	r2, [pc, #72]	; (800b780 <TIM_OC6_SetConfig+0xb0>)
 800b738:	4293      	cmp	r3, r2
 800b73a:	d109      	bne.n	800b750 <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800b73c:	697b      	ldr	r3, [r7, #20]
 800b73e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800b742:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800b744:	683b      	ldr	r3, [r7, #0]
 800b746:	695b      	ldr	r3, [r3, #20]
 800b748:	029b      	lsls	r3, r3, #10
 800b74a:	697a      	ldr	r2, [r7, #20]
 800b74c:	4313      	orrs	r3, r2
 800b74e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b750:	687b      	ldr	r3, [r7, #4]
 800b752:	697a      	ldr	r2, [r7, #20]
 800b754:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800b756:	687b      	ldr	r3, [r7, #4]
 800b758:	68fa      	ldr	r2, [r7, #12]
 800b75a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800b75c:	683b      	ldr	r3, [r7, #0]
 800b75e:	685a      	ldr	r2, [r3, #4]
 800b760:	687b      	ldr	r3, [r7, #4]
 800b762:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b764:	687b      	ldr	r3, [r7, #4]
 800b766:	693a      	ldr	r2, [r7, #16]
 800b768:	621a      	str	r2, [r3, #32]
}
 800b76a:	bf00      	nop
 800b76c:	371c      	adds	r7, #28
 800b76e:	46bd      	mov	sp, r7
 800b770:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b774:	4770      	bx	lr
 800b776:	bf00      	nop
 800b778:	40012c00 	.word	0x40012c00
 800b77c:	40014400 	.word	0x40014400
 800b780:	40014800 	.word	0x40014800

0800b784 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b784:	b480      	push	{r7}
 800b786:	b087      	sub	sp, #28
 800b788:	af00      	add	r7, sp, #0
 800b78a:	60f8      	str	r0, [r7, #12]
 800b78c:	60b9      	str	r1, [r7, #8]
 800b78e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800b790:	68fb      	ldr	r3, [r7, #12]
 800b792:	6a1b      	ldr	r3, [r3, #32]
 800b794:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b796:	68fb      	ldr	r3, [r7, #12]
 800b798:	6a1b      	ldr	r3, [r3, #32]
 800b79a:	f023 0201 	bic.w	r2, r3, #1
 800b79e:	68fb      	ldr	r3, [r7, #12]
 800b7a0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b7a2:	68fb      	ldr	r3, [r7, #12]
 800b7a4:	699b      	ldr	r3, [r3, #24]
 800b7a6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800b7a8:	693b      	ldr	r3, [r7, #16]
 800b7aa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800b7ae:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800b7b0:	687b      	ldr	r3, [r7, #4]
 800b7b2:	011b      	lsls	r3, r3, #4
 800b7b4:	693a      	ldr	r2, [r7, #16]
 800b7b6:	4313      	orrs	r3, r2
 800b7b8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800b7ba:	697b      	ldr	r3, [r7, #20]
 800b7bc:	f023 030a 	bic.w	r3, r3, #10
 800b7c0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800b7c2:	697a      	ldr	r2, [r7, #20]
 800b7c4:	68bb      	ldr	r3, [r7, #8]
 800b7c6:	4313      	orrs	r3, r2
 800b7c8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800b7ca:	68fb      	ldr	r3, [r7, #12]
 800b7cc:	693a      	ldr	r2, [r7, #16]
 800b7ce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b7d0:	68fb      	ldr	r3, [r7, #12]
 800b7d2:	697a      	ldr	r2, [r7, #20]
 800b7d4:	621a      	str	r2, [r3, #32]
}
 800b7d6:	bf00      	nop
 800b7d8:	371c      	adds	r7, #28
 800b7da:	46bd      	mov	sp, r7
 800b7dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7e0:	4770      	bx	lr

0800b7e2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b7e2:	b480      	push	{r7}
 800b7e4:	b087      	sub	sp, #28
 800b7e6:	af00      	add	r7, sp, #0
 800b7e8:	60f8      	str	r0, [r7, #12]
 800b7ea:	60b9      	str	r1, [r7, #8]
 800b7ec:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b7ee:	68fb      	ldr	r3, [r7, #12]
 800b7f0:	6a1b      	ldr	r3, [r3, #32]
 800b7f2:	f023 0210 	bic.w	r2, r3, #16
 800b7f6:	68fb      	ldr	r3, [r7, #12]
 800b7f8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b7fa:	68fb      	ldr	r3, [r7, #12]
 800b7fc:	699b      	ldr	r3, [r3, #24]
 800b7fe:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800b800:	68fb      	ldr	r3, [r7, #12]
 800b802:	6a1b      	ldr	r3, [r3, #32]
 800b804:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800b806:	697b      	ldr	r3, [r7, #20]
 800b808:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800b80c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800b80e:	687b      	ldr	r3, [r7, #4]
 800b810:	031b      	lsls	r3, r3, #12
 800b812:	697a      	ldr	r2, [r7, #20]
 800b814:	4313      	orrs	r3, r2
 800b816:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800b818:	693b      	ldr	r3, [r7, #16]
 800b81a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800b81e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800b820:	68bb      	ldr	r3, [r7, #8]
 800b822:	011b      	lsls	r3, r3, #4
 800b824:	693a      	ldr	r2, [r7, #16]
 800b826:	4313      	orrs	r3, r2
 800b828:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800b82a:	68fb      	ldr	r3, [r7, #12]
 800b82c:	697a      	ldr	r2, [r7, #20]
 800b82e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b830:	68fb      	ldr	r3, [r7, #12]
 800b832:	693a      	ldr	r2, [r7, #16]
 800b834:	621a      	str	r2, [r3, #32]
}
 800b836:	bf00      	nop
 800b838:	371c      	adds	r7, #28
 800b83a:	46bd      	mov	sp, r7
 800b83c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b840:	4770      	bx	lr

0800b842 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800b842:	b480      	push	{r7}
 800b844:	b085      	sub	sp, #20
 800b846:	af00      	add	r7, sp, #0
 800b848:	6078      	str	r0, [r7, #4]
 800b84a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800b84c:	687b      	ldr	r3, [r7, #4]
 800b84e:	689b      	ldr	r3, [r3, #8]
 800b850:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800b852:	68fb      	ldr	r3, [r7, #12]
 800b854:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800b858:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b85c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800b85e:	683a      	ldr	r2, [r7, #0]
 800b860:	68fb      	ldr	r3, [r7, #12]
 800b862:	4313      	orrs	r3, r2
 800b864:	f043 0307 	orr.w	r3, r3, #7
 800b868:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b86a:	687b      	ldr	r3, [r7, #4]
 800b86c:	68fa      	ldr	r2, [r7, #12]
 800b86e:	609a      	str	r2, [r3, #8]
}
 800b870:	bf00      	nop
 800b872:	3714      	adds	r7, #20
 800b874:	46bd      	mov	sp, r7
 800b876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b87a:	4770      	bx	lr

0800b87c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800b87c:	b480      	push	{r7}
 800b87e:	b087      	sub	sp, #28
 800b880:	af00      	add	r7, sp, #0
 800b882:	60f8      	str	r0, [r7, #12]
 800b884:	60b9      	str	r1, [r7, #8]
 800b886:	607a      	str	r2, [r7, #4]
 800b888:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800b88a:	68fb      	ldr	r3, [r7, #12]
 800b88c:	689b      	ldr	r3, [r3, #8]
 800b88e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b890:	697b      	ldr	r3, [r7, #20]
 800b892:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b896:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800b898:	683b      	ldr	r3, [r7, #0]
 800b89a:	021a      	lsls	r2, r3, #8
 800b89c:	687b      	ldr	r3, [r7, #4]
 800b89e:	431a      	orrs	r2, r3
 800b8a0:	68bb      	ldr	r3, [r7, #8]
 800b8a2:	4313      	orrs	r3, r2
 800b8a4:	697a      	ldr	r2, [r7, #20]
 800b8a6:	4313      	orrs	r3, r2
 800b8a8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b8aa:	68fb      	ldr	r3, [r7, #12]
 800b8ac:	697a      	ldr	r2, [r7, #20]
 800b8ae:	609a      	str	r2, [r3, #8]
}
 800b8b0:	bf00      	nop
 800b8b2:	371c      	adds	r7, #28
 800b8b4:	46bd      	mov	sp, r7
 800b8b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8ba:	4770      	bx	lr

0800b8bc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800b8bc:	b480      	push	{r7}
 800b8be:	b087      	sub	sp, #28
 800b8c0:	af00      	add	r7, sp, #0
 800b8c2:	60f8      	str	r0, [r7, #12]
 800b8c4:	60b9      	str	r1, [r7, #8]
 800b8c6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800b8c8:	68bb      	ldr	r3, [r7, #8]
 800b8ca:	f003 031f 	and.w	r3, r3, #31
 800b8ce:	2201      	movs	r2, #1
 800b8d0:	fa02 f303 	lsl.w	r3, r2, r3
 800b8d4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800b8d6:	68fb      	ldr	r3, [r7, #12]
 800b8d8:	6a1a      	ldr	r2, [r3, #32]
 800b8da:	697b      	ldr	r3, [r7, #20]
 800b8dc:	43db      	mvns	r3, r3
 800b8de:	401a      	ands	r2, r3
 800b8e0:	68fb      	ldr	r3, [r7, #12]
 800b8e2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800b8e4:	68fb      	ldr	r3, [r7, #12]
 800b8e6:	6a1a      	ldr	r2, [r3, #32]
 800b8e8:	68bb      	ldr	r3, [r7, #8]
 800b8ea:	f003 031f 	and.w	r3, r3, #31
 800b8ee:	6879      	ldr	r1, [r7, #4]
 800b8f0:	fa01 f303 	lsl.w	r3, r1, r3
 800b8f4:	431a      	orrs	r2, r3
 800b8f6:	68fb      	ldr	r3, [r7, #12]
 800b8f8:	621a      	str	r2, [r3, #32]
}
 800b8fa:	bf00      	nop
 800b8fc:	371c      	adds	r7, #28
 800b8fe:	46bd      	mov	sp, r7
 800b900:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b904:	4770      	bx	lr
	...

0800b908 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800b908:	b480      	push	{r7}
 800b90a:	b085      	sub	sp, #20
 800b90c:	af00      	add	r7, sp, #0
 800b90e:	6078      	str	r0, [r7, #4]
 800b910:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b912:	687b      	ldr	r3, [r7, #4]
 800b914:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b918:	2b01      	cmp	r3, #1
 800b91a:	d101      	bne.n	800b920 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800b91c:	2302      	movs	r3, #2
 800b91e:	e04a      	b.n	800b9b6 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 800b920:	687b      	ldr	r3, [r7, #4]
 800b922:	2201      	movs	r2, #1
 800b924:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b928:	687b      	ldr	r3, [r7, #4]
 800b92a:	2202      	movs	r2, #2
 800b92c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b930:	687b      	ldr	r3, [r7, #4]
 800b932:	681b      	ldr	r3, [r3, #0]
 800b934:	685b      	ldr	r3, [r3, #4]
 800b936:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b938:	687b      	ldr	r3, [r7, #4]
 800b93a:	681b      	ldr	r3, [r3, #0]
 800b93c:	689b      	ldr	r3, [r3, #8]
 800b93e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800b940:	687b      	ldr	r3, [r7, #4]
 800b942:	681b      	ldr	r3, [r3, #0]
 800b944:	4a1f      	ldr	r2, [pc, #124]	; (800b9c4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 800b946:	4293      	cmp	r3, r2
 800b948:	d108      	bne.n	800b95c <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800b94a:	68fb      	ldr	r3, [r7, #12]
 800b94c:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800b950:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800b952:	683b      	ldr	r3, [r7, #0]
 800b954:	685b      	ldr	r3, [r3, #4]
 800b956:	68fa      	ldr	r2, [r7, #12]
 800b958:	4313      	orrs	r3, r2
 800b95a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800b95c:	68fb      	ldr	r3, [r7, #12]
 800b95e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b962:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b964:	683b      	ldr	r3, [r7, #0]
 800b966:	681b      	ldr	r3, [r3, #0]
 800b968:	68fa      	ldr	r2, [r7, #12]
 800b96a:	4313      	orrs	r3, r2
 800b96c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800b96e:	687b      	ldr	r3, [r7, #4]
 800b970:	681b      	ldr	r3, [r3, #0]
 800b972:	68fa      	ldr	r2, [r7, #12]
 800b974:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b976:	687b      	ldr	r3, [r7, #4]
 800b978:	681b      	ldr	r3, [r3, #0]
 800b97a:	4a12      	ldr	r2, [pc, #72]	; (800b9c4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 800b97c:	4293      	cmp	r3, r2
 800b97e:	d004      	beq.n	800b98a <HAL_TIMEx_MasterConfigSynchronization+0x82>
 800b980:	687b      	ldr	r3, [r7, #4]
 800b982:	681b      	ldr	r3, [r3, #0]
 800b984:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b988:	d10c      	bne.n	800b9a4 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800b98a:	68bb      	ldr	r3, [r7, #8]
 800b98c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b990:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b992:	683b      	ldr	r3, [r7, #0]
 800b994:	689b      	ldr	r3, [r3, #8]
 800b996:	68ba      	ldr	r2, [r7, #8]
 800b998:	4313      	orrs	r3, r2
 800b99a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800b99c:	687b      	ldr	r3, [r7, #4]
 800b99e:	681b      	ldr	r3, [r3, #0]
 800b9a0:	68ba      	ldr	r2, [r7, #8]
 800b9a2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b9a4:	687b      	ldr	r3, [r7, #4]
 800b9a6:	2201      	movs	r2, #1
 800b9a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b9ac:	687b      	ldr	r3, [r7, #4]
 800b9ae:	2200      	movs	r2, #0
 800b9b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b9b4:	2300      	movs	r3, #0
}
 800b9b6:	4618      	mov	r0, r3
 800b9b8:	3714      	adds	r7, #20
 800b9ba:	46bd      	mov	sp, r7
 800b9bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9c0:	4770      	bx	lr
 800b9c2:	bf00      	nop
 800b9c4:	40012c00 	.word	0x40012c00

0800b9c8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800b9c8:	b480      	push	{r7}
 800b9ca:	b085      	sub	sp, #20
 800b9cc:	af00      	add	r7, sp, #0
 800b9ce:	6078      	str	r0, [r7, #4]
 800b9d0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800b9d2:	2300      	movs	r3, #0
 800b9d4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800b9d6:	687b      	ldr	r3, [r7, #4]
 800b9d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b9dc:	2b01      	cmp	r3, #1
 800b9de:	d101      	bne.n	800b9e4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800b9e0:	2302      	movs	r3, #2
 800b9e2:	e078      	b.n	800bad6 <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 800b9e4:	687b      	ldr	r3, [r7, #4]
 800b9e6:	2201      	movs	r2, #1
 800b9e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800b9ec:	68fb      	ldr	r3, [r7, #12]
 800b9ee:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800b9f2:	683b      	ldr	r3, [r7, #0]
 800b9f4:	68db      	ldr	r3, [r3, #12]
 800b9f6:	4313      	orrs	r3, r2
 800b9f8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800b9fa:	68fb      	ldr	r3, [r7, #12]
 800b9fc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800ba00:	683b      	ldr	r3, [r7, #0]
 800ba02:	689b      	ldr	r3, [r3, #8]
 800ba04:	4313      	orrs	r3, r2
 800ba06:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800ba08:	68fb      	ldr	r3, [r7, #12]
 800ba0a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800ba0e:	683b      	ldr	r3, [r7, #0]
 800ba10:	685b      	ldr	r3, [r3, #4]
 800ba12:	4313      	orrs	r3, r2
 800ba14:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800ba16:	68fb      	ldr	r3, [r7, #12]
 800ba18:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800ba1c:	683b      	ldr	r3, [r7, #0]
 800ba1e:	681b      	ldr	r3, [r3, #0]
 800ba20:	4313      	orrs	r3, r2
 800ba22:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800ba24:	68fb      	ldr	r3, [r7, #12]
 800ba26:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800ba2a:	683b      	ldr	r3, [r7, #0]
 800ba2c:	691b      	ldr	r3, [r3, #16]
 800ba2e:	4313      	orrs	r3, r2
 800ba30:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800ba32:	68fb      	ldr	r3, [r7, #12]
 800ba34:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800ba38:	683b      	ldr	r3, [r7, #0]
 800ba3a:	695b      	ldr	r3, [r3, #20]
 800ba3c:	4313      	orrs	r3, r2
 800ba3e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800ba40:	68fb      	ldr	r3, [r7, #12]
 800ba42:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800ba46:	683b      	ldr	r3, [r7, #0]
 800ba48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ba4a:	4313      	orrs	r3, r2
 800ba4c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800ba4e:	68fb      	ldr	r3, [r7, #12]
 800ba50:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800ba54:	683b      	ldr	r3, [r7, #0]
 800ba56:	699b      	ldr	r3, [r3, #24]
 800ba58:	041b      	lsls	r3, r3, #16
 800ba5a:	4313      	orrs	r3, r2
 800ba5c:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800ba5e:	687b      	ldr	r3, [r7, #4]
 800ba60:	681b      	ldr	r3, [r3, #0]
 800ba62:	4a20      	ldr	r2, [pc, #128]	; (800bae4 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 800ba64:	4293      	cmp	r3, r2
 800ba66:	d106      	bne.n	800ba76 <HAL_TIMEx_ConfigBreakDeadTime+0xae>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800ba68:	68fb      	ldr	r3, [r7, #12]
 800ba6a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800ba6e:	683b      	ldr	r3, [r7, #0]
 800ba70:	69db      	ldr	r3, [r3, #28]
 800ba72:	4313      	orrs	r3, r2
 800ba74:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800ba76:	687b      	ldr	r3, [r7, #4]
 800ba78:	681b      	ldr	r3, [r3, #0]
 800ba7a:	4a1a      	ldr	r2, [pc, #104]	; (800bae4 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 800ba7c:	4293      	cmp	r3, r2
 800ba7e:	d121      	bne.n	800bac4 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800ba80:	68fb      	ldr	r3, [r7, #12]
 800ba82:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800ba86:	683b      	ldr	r3, [r7, #0]
 800ba88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ba8a:	051b      	lsls	r3, r3, #20
 800ba8c:	4313      	orrs	r3, r2
 800ba8e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800ba90:	68fb      	ldr	r3, [r7, #12]
 800ba92:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800ba96:	683b      	ldr	r3, [r7, #0]
 800ba98:	6a1b      	ldr	r3, [r3, #32]
 800ba9a:	4313      	orrs	r3, r2
 800ba9c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800ba9e:	68fb      	ldr	r3, [r7, #12]
 800baa0:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800baa4:	683b      	ldr	r3, [r7, #0]
 800baa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800baa8:	4313      	orrs	r3, r2
 800baaa:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800baac:	687b      	ldr	r3, [r7, #4]
 800baae:	681b      	ldr	r3, [r3, #0]
 800bab0:	4a0c      	ldr	r2, [pc, #48]	; (800bae4 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 800bab2:	4293      	cmp	r3, r2
 800bab4:	d106      	bne.n	800bac4 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800bab6:	68fb      	ldr	r3, [r7, #12]
 800bab8:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800babc:	683b      	ldr	r3, [r7, #0]
 800babe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bac0:	4313      	orrs	r3, r2
 800bac2:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800bac4:	687b      	ldr	r3, [r7, #4]
 800bac6:	681b      	ldr	r3, [r3, #0]
 800bac8:	68fa      	ldr	r2, [r7, #12]
 800baca:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800bacc:	687b      	ldr	r3, [r7, #4]
 800bace:	2200      	movs	r2, #0
 800bad0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800bad4:	2300      	movs	r3, #0
}
 800bad6:	4618      	mov	r0, r3
 800bad8:	3714      	adds	r7, #20
 800bada:	46bd      	mov	sp, r7
 800badc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bae0:	4770      	bx	lr
 800bae2:	bf00      	nop
 800bae4:	40012c00 	.word	0x40012c00

0800bae8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800bae8:	b480      	push	{r7}
 800baea:	b083      	sub	sp, #12
 800baec:	af00      	add	r7, sp, #0
 800baee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800baf0:	bf00      	nop
 800baf2:	370c      	adds	r7, #12
 800baf4:	46bd      	mov	sp, r7
 800baf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bafa:	4770      	bx	lr

0800bafc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800bafc:	b480      	push	{r7}
 800bafe:	b083      	sub	sp, #12
 800bb00:	af00      	add	r7, sp, #0
 800bb02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800bb04:	bf00      	nop
 800bb06:	370c      	adds	r7, #12
 800bb08:	46bd      	mov	sp, r7
 800bb0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb0e:	4770      	bx	lr

0800bb10 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800bb10:	b480      	push	{r7}
 800bb12:	b083      	sub	sp, #12
 800bb14:	af00      	add	r7, sp, #0
 800bb16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800bb18:	bf00      	nop
 800bb1a:	370c      	adds	r7, #12
 800bb1c:	46bd      	mov	sp, r7
 800bb1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb22:	4770      	bx	lr

0800bb24 <BLS_Init>:
/* Private functions ----------------------------------------------------------*/
/* Weak functions ----------------------------------------------------------*/
void BVOPUS_STM_Init(void);

__weak void BLS_Init( void )
{
 800bb24:	b480      	push	{r7}
 800bb26:	af00      	add	r7, sp, #0
  return;
 800bb28:	bf00      	nop
}
 800bb2a:	46bd      	mov	sp, r7
 800bb2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb30:	4770      	bx	lr

0800bb32 <CRS_STM_Init>:
__weak void CRS_STM_Init( void )
{
 800bb32:	b480      	push	{r7}
 800bb34:	af00      	add	r7, sp, #0
  return;
 800bb36:	bf00      	nop
}
 800bb38:	46bd      	mov	sp, r7
 800bb3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb3e:	4770      	bx	lr

0800bb40 <EDS_STM_Init>:
__weak void DIS_Init( void )
{
  return;
}
__weak void EDS_STM_Init( void )
{
 800bb40:	b480      	push	{r7}
 800bb42:	af00      	add	r7, sp, #0
  return;
 800bb44:	bf00      	nop
}
 800bb46:	46bd      	mov	sp, r7
 800bb48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb4c:	4770      	bx	lr

0800bb4e <HIDS_Init>:
__weak void HIDS_Init( void )
{
 800bb4e:	b480      	push	{r7}
 800bb50:	af00      	add	r7, sp, #0
  return;
 800bb52:	bf00      	nop
}
 800bb54:	46bd      	mov	sp, r7
 800bb56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb5a:	4770      	bx	lr

0800bb5c <HTS_Init>:
__weak void HRS_Init( void )
{
  return;
}
__weak void HTS_Init( void )
{
 800bb5c:	b480      	push	{r7}
 800bb5e:	af00      	add	r7, sp, #0
  return;
 800bb60:	bf00      	nop
}
 800bb62:	46bd      	mov	sp, r7
 800bb64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb68:	4770      	bx	lr

0800bb6a <IAS_Init>:
__weak void IAS_Init( void )
{
 800bb6a:	b480      	push	{r7}
 800bb6c:	af00      	add	r7, sp, #0
  return;
 800bb6e:	bf00      	nop
}
 800bb70:	46bd      	mov	sp, r7
 800bb72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb76:	4770      	bx	lr

0800bb78 <LLS_Init>:
__weak void LLS_Init( void )
{
 800bb78:	b480      	push	{r7}
 800bb7a:	af00      	add	r7, sp, #0
  return;
 800bb7c:	bf00      	nop
}
 800bb7e:	46bd      	mov	sp, r7
 800bb80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb84:	4770      	bx	lr

0800bb86 <TPS_Init>:
__weak void TPS_Init( void )
{
 800bb86:	b480      	push	{r7}
 800bb88:	af00      	add	r7, sp, #0
  return;
 800bb8a:	bf00      	nop
}
 800bb8c:	46bd      	mov	sp, r7
 800bb8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb92:	4770      	bx	lr

0800bb94 <MOTENV_STM_Init>:
__weak void MOTENV_STM_Init( void )
{
 800bb94:	b480      	push	{r7}
 800bb96:	af00      	add	r7, sp, #0
  return;
 800bb98:	bf00      	nop
}
 800bb9a:	46bd      	mov	sp, r7
 800bb9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bba0:	4770      	bx	lr

0800bba2 <OTAS_STM_Init>:
__weak void P2PS_STM_Init( void )
{
  return;
}
__weak void OTAS_STM_Init( void )
{
 800bba2:	b480      	push	{r7}
 800bba4:	af00      	add	r7, sp, #0
  return;
 800bba6:	bf00      	nop
}
 800bba8:	46bd      	mov	sp, r7
 800bbaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbae:	4770      	bx	lr

0800bbb0 <MESH_Init>:
__weak void MESH_Init( void )
{
 800bbb0:	b480      	push	{r7}
 800bbb2:	af00      	add	r7, sp, #0
  return;
 800bbb4:	bf00      	nop
}
 800bbb6:	46bd      	mov	sp, r7
 800bbb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbbc:	4770      	bx	lr

0800bbbe <BVOPUS_STM_Init>:
__weak void BVOPUS_STM_Init( void )
{
 800bbbe:	b480      	push	{r7}
 800bbc0:	af00      	add	r7, sp, #0
  return;
 800bbc2:	bf00      	nop
}
 800bbc4:	46bd      	mov	sp, r7
 800bbc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbca:	4770      	bx	lr

0800bbcc <SVCCTL_InitCustomSvc>:
__weak void SVCCTL_InitCustomSvc( void )
{
 800bbcc:	b480      	push	{r7}
 800bbce:	af00      	add	r7, sp, #0
  return;
 800bbd0:	bf00      	nop
}
 800bbd2:	46bd      	mov	sp, r7
 800bbd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbd8:	4770      	bx	lr
	...

0800bbdc <SVCCTL_Init>:

/* Functions Definition ------------------------------------------------------*/

void SVCCTL_Init( void )
{
 800bbdc:	b580      	push	{r7, lr}
 800bbde:	af00      	add	r7, sp, #0
 
  /**
   * Initialize the number of registered Handler
   */
  SVCCTL_EvtHandler.NbreOfRegisteredHandler = 0;
 800bbe0:	4b04      	ldr	r3, [pc, #16]	; (800bbf4 <SVCCTL_Init+0x18>)
 800bbe2:	2200      	movs	r2, #0
 800bbe4:	771a      	strb	r2, [r3, #28]
  SVCCTL_CltHandler.NbreOfRegisteredHandler = 0;
 800bbe6:	4b04      	ldr	r3, [pc, #16]	; (800bbf8 <SVCCTL_Init+0x1c>)
 800bbe8:	2200      	movs	r2, #0
 800bbea:	701a      	strb	r2, [r3, #0]

  /**
   * Add and Initialize requested services
   */
  SVCCTL_SvcInit();
 800bbec:	f000 f806 	bl	800bbfc <SVCCTL_SvcInit>

  return;
 800bbf0:	bf00      	nop
}
 800bbf2:	bd80      	pop	{r7, pc}
 800bbf4:	20000364 	.word	0x20000364
 800bbf8:	20000384 	.word	0x20000384

0800bbfc <SVCCTL_SvcInit>:

__weak void SVCCTL_SvcInit(void)
{
 800bbfc:	b580      	push	{r7, lr}
 800bbfe:	af00      	add	r7, sp, #0
  BLS_Init();
 800bc00:	f7ff ff90 	bl	800bb24 <BLS_Init>

  CRS_STM_Init();
 800bc04:	f7ff ff95 	bl	800bb32 <CRS_STM_Init>

  //DIS_Init();

  EDS_STM_Init();
 800bc08:	f7ff ff9a 	bl	800bb40 <EDS_STM_Init>

  HIDS_Init();
 800bc0c:	f7ff ff9f 	bl	800bb4e <HIDS_Init>

  //HRS_Init();

  HTS_Init();
 800bc10:	f7ff ffa4 	bl	800bb5c <HTS_Init>

  IAS_Init();
 800bc14:	f7ff ffa9 	bl	800bb6a <IAS_Init>

  LLS_Init();
 800bc18:	f7ff ffae 	bl	800bb78 <LLS_Init>

  TPS_Init();
 800bc1c:	f7ff ffb3 	bl	800bb86 <TPS_Init>

  MOTENV_STM_Init();
 800bc20:	f7ff ffb8 	bl	800bb94 <MOTENV_STM_Init>

  P2PS_STM_Init();
 800bc24:	f001 fdd4 	bl	800d7d0 <P2PS_STM_Init>

  OTAS_STM_Init();
 800bc28:	f7ff ffbb 	bl	800bba2 <OTAS_STM_Init>
  
  BVOPUS_STM_Init();
 800bc2c:	f7ff ffc7 	bl	800bbbe <BVOPUS_STM_Init>

  MESH_Init();
 800bc30:	f7ff ffbe 	bl	800bbb0 <MESH_Init>

  SVCCTL_InitCustomSvc();
 800bc34:	f7ff ffca 	bl	800bbcc <SVCCTL_InitCustomSvc>
  
  return;
 800bc38:	bf00      	nop
}
 800bc3a:	bd80      	pop	{r7, pc}

0800bc3c <SVCCTL_RegisterSvcHandler>:
 * @brief  BLE Controller initialization
 * @param  None
 * @retval None
 */
void SVCCTL_RegisterSvcHandler( SVC_CTL_p_EvtHandler_t pfBLE_SVC_Service_Event_Handler )
{
 800bc3c:	b480      	push	{r7}
 800bc3e:	b083      	sub	sp, #12
 800bc40:	af00      	add	r7, sp, #0
 800bc42:	6078      	str	r0, [r7, #4]
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
  SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[SVCCTL_EvtHandler.NbreOfRegisteredHandler] = pfBLE_SVC_Service_Event_Handler;
 800bc44:	4b09      	ldr	r3, [pc, #36]	; (800bc6c <SVCCTL_RegisterSvcHandler+0x30>)
 800bc46:	7f1b      	ldrb	r3, [r3, #28]
 800bc48:	4619      	mov	r1, r3
 800bc4a:	4a08      	ldr	r2, [pc, #32]	; (800bc6c <SVCCTL_RegisterSvcHandler+0x30>)
 800bc4c:	687b      	ldr	r3, [r7, #4]
 800bc4e:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  SVCCTL_EvtHandler.NbreOfRegisteredHandler++;
 800bc52:	4b06      	ldr	r3, [pc, #24]	; (800bc6c <SVCCTL_RegisterSvcHandler+0x30>)
 800bc54:	7f1b      	ldrb	r3, [r3, #28]
 800bc56:	3301      	adds	r3, #1
 800bc58:	b2da      	uxtb	r2, r3
 800bc5a:	4b04      	ldr	r3, [pc, #16]	; (800bc6c <SVCCTL_RegisterSvcHandler+0x30>)
 800bc5c:	771a      	strb	r2, [r3, #28]
#else
  (void)(pfBLE_SVC_Service_Event_Handler);
#endif

  return;
 800bc5e:	bf00      	nop
}
 800bc60:	370c      	adds	r7, #12
 800bc62:	46bd      	mov	sp, r7
 800bc64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc68:	4770      	bx	lr
 800bc6a:	bf00      	nop
 800bc6c:	20000364 	.word	0x20000364

0800bc70 <SVCCTL_UserEvtRx>:

  return;
}

SVCCTL_UserEvtFlowStatus_t SVCCTL_UserEvtRx( void *pckt )
{
 800bc70:	b580      	push	{r7, lr}
 800bc72:	b086      	sub	sp, #24
 800bc74:	af00      	add	r7, sp, #0
 800bc76:	6078      	str	r0, [r7, #4]
  evt_blue_aci *blue_evt;
  SVCCTL_EvtAckStatus_t event_notification_status;
  SVCCTL_UserEvtFlowStatus_t return_status;
  uint8_t index;

  event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) pckt)->data;
 800bc78:	687b      	ldr	r3, [r7, #4]
 800bc7a:	3301      	adds	r3, #1
 800bc7c:	613b      	str	r3, [r7, #16]
  event_notification_status = SVCCTL_EvtNotAck;
 800bc7e:	2300      	movs	r3, #0
 800bc80:	75fb      	strb	r3, [r7, #23]

  switch (event_pckt->evt)
 800bc82:	693b      	ldr	r3, [r7, #16]
 800bc84:	781b      	ldrb	r3, [r3, #0]
 800bc86:	2bff      	cmp	r3, #255	; 0xff
 800bc88:	d000      	beq.n	800bc8c <SVCCTL_UserEvtRx+0x1c>
      }
    }
      break; /* HCI_EVT_VENDOR_SPECIFIC */

    default:
      break;
 800bc8a:	e025      	b.n	800bcd8 <SVCCTL_UserEvtRx+0x68>
      blue_evt = (evt_blue_aci*) event_pckt->data;
 800bc8c:	693b      	ldr	r3, [r7, #16]
 800bc8e:	3302      	adds	r3, #2
 800bc90:	60fb      	str	r3, [r7, #12]
      switch ((blue_evt->ecode) & SVCCTL_EGID_EVT_MASK)
 800bc92:	68fb      	ldr	r3, [r7, #12]
 800bc94:	881b      	ldrh	r3, [r3, #0]
 800bc96:	b29b      	uxth	r3, r3
 800bc98:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800bc9c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800bca0:	d000      	beq.n	800bca4 <SVCCTL_UserEvtRx+0x34>
          break;
 800bca2:	e018      	b.n	800bcd6 <SVCCTL_UserEvtRx+0x66>
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 800bca4:	2300      	movs	r3, #0
 800bca6:	757b      	strb	r3, [r7, #21]
 800bca8:	e00d      	b.n	800bcc6 <SVCCTL_UserEvtRx+0x56>
            event_notification_status = SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[index](pckt);
 800bcaa:	7d7b      	ldrb	r3, [r7, #21]
 800bcac:	4a18      	ldr	r2, [pc, #96]	; (800bd10 <SVCCTL_UserEvtRx+0xa0>)
 800bcae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bcb2:	6878      	ldr	r0, [r7, #4]
 800bcb4:	4798      	blx	r3
 800bcb6:	4603      	mov	r3, r0
 800bcb8:	75fb      	strb	r3, [r7, #23]
            if (event_notification_status != SVCCTL_EvtNotAck)
 800bcba:	7dfb      	ldrb	r3, [r7, #23]
 800bcbc:	2b00      	cmp	r3, #0
 800bcbe:	d108      	bne.n	800bcd2 <SVCCTL_UserEvtRx+0x62>
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 800bcc0:	7d7b      	ldrb	r3, [r7, #21]
 800bcc2:	3301      	adds	r3, #1
 800bcc4:	757b      	strb	r3, [r7, #21]
 800bcc6:	4b12      	ldr	r3, [pc, #72]	; (800bd10 <SVCCTL_UserEvtRx+0xa0>)
 800bcc8:	7f1b      	ldrb	r3, [r3, #28]
 800bcca:	7d7a      	ldrb	r2, [r7, #21]
 800bccc:	429a      	cmp	r2, r3
 800bcce:	d3ec      	bcc.n	800bcaa <SVCCTL_UserEvtRx+0x3a>
          break;
 800bcd0:	e000      	b.n	800bcd4 <SVCCTL_UserEvtRx+0x64>
              break;
 800bcd2:	bf00      	nop
          break;
 800bcd4:	bf00      	nop
      break; /* HCI_EVT_VENDOR_SPECIFIC */
 800bcd6:	bf00      	nop

  /**
   * When no registered handlers (either Service or Client) has acknowledged the GATT event, it is reported to the application
   * a GAP event is always reported to the applicaiton.
   */
  switch (event_notification_status)
 800bcd8:	7dfb      	ldrb	r3, [r7, #23]
 800bcda:	2b01      	cmp	r3, #1
 800bcdc:	d009      	beq.n	800bcf2 <SVCCTL_UserEvtRx+0x82>
 800bcde:	2b02      	cmp	r3, #2
 800bce0:	d00a      	beq.n	800bcf8 <SVCCTL_UserEvtRx+0x88>
 800bce2:	2b00      	cmp	r3, #0
 800bce4:	d10b      	bne.n	800bcfe <SVCCTL_UserEvtRx+0x8e>
    case SVCCTL_EvtNotAck:
      /**
       *  The event has NOT been managed.
       *  It shall be passed to the application for processing
       */
      return_status = SVCCTL_App_Notification(pckt);
 800bce6:	6878      	ldr	r0, [r7, #4]
 800bce8:	f7f5 f820 	bl	8000d2c <SVCCTL_App_Notification>
 800bcec:	4603      	mov	r3, r0
 800bcee:	75bb      	strb	r3, [r7, #22]
      break;
 800bcf0:	e008      	b.n	800bd04 <SVCCTL_UserEvtRx+0x94>

    case SVCCTL_EvtAckFlowEnable:
      return_status = SVCCTL_UserEvtFlowEnable;
 800bcf2:	2301      	movs	r3, #1
 800bcf4:	75bb      	strb	r3, [r7, #22]
      break;
 800bcf6:	e005      	b.n	800bd04 <SVCCTL_UserEvtRx+0x94>

    case SVCCTL_EvtAckFlowDisable:
      return_status = SVCCTL_UserEvtFlowDisable;
 800bcf8:	2300      	movs	r3, #0
 800bcfa:	75bb      	strb	r3, [r7, #22]
      break;
 800bcfc:	e002      	b.n	800bd04 <SVCCTL_UserEvtRx+0x94>

    default:
      return_status = SVCCTL_UserEvtFlowEnable;
 800bcfe:	2301      	movs	r3, #1
 800bd00:	75bb      	strb	r3, [r7, #22]
      break;
 800bd02:	bf00      	nop
  }

  return (return_status);
 800bd04:	7dbb      	ldrb	r3, [r7, #22]
}
 800bd06:	4618      	mov	r0, r3
 800bd08:	3718      	adds	r7, #24
 800bd0a:	46bd      	mov	sp, r7
 800bd0c:	bd80      	pop	{r7, pc}
 800bd0e:	bf00      	nop
 800bd10:	20000364 	.word	0x20000364

0800bd14 <aci_gap_set_non_discoverable>:
 */

#include "ble_gap_aci.h"

tBleStatus aci_gap_set_non_discoverable( void )
{
 800bd14:	b580      	push	{r7, lr}
 800bd16:	b088      	sub	sp, #32
 800bd18:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 800bd1a:	2300      	movs	r3, #0
 800bd1c:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800bd1e:	f107 0308 	add.w	r3, r7, #8
 800bd22:	2218      	movs	r2, #24
 800bd24:	2100      	movs	r1, #0
 800bd26:	4618      	mov	r0, r3
 800bd28:	f000 ff9c 	bl	800cc64 <Osal_MemSet>
  rq.ogf = 0x3f;
 800bd2c:	233f      	movs	r3, #63	; 0x3f
 800bd2e:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x081;
 800bd30:	2381      	movs	r3, #129	; 0x81
 800bd32:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 800bd34:	1dfb      	adds	r3, r7, #7
 800bd36:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 800bd38:	2301      	movs	r3, #1
 800bd3a:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 800bd3c:	f107 0308 	add.w	r3, r7, #8
 800bd40:	2100      	movs	r1, #0
 800bd42:	4618      	mov	r0, r3
 800bd44:	f001 f836 	bl	800cdb4 <hci_send_req>
 800bd48:	4603      	mov	r3, r0
 800bd4a:	2b00      	cmp	r3, #0
 800bd4c:	da01      	bge.n	800bd52 <aci_gap_set_non_discoverable+0x3e>
    return BLE_STATUS_TIMEOUT;
 800bd4e:	23ff      	movs	r3, #255	; 0xff
 800bd50:	e000      	b.n	800bd54 <aci_gap_set_non_discoverable+0x40>
  return status;
 800bd52:	79fb      	ldrb	r3, [r7, #7]
}
 800bd54:	4618      	mov	r0, r3
 800bd56:	3720      	adds	r7, #32
 800bd58:	46bd      	mov	sp, r7
 800bd5a:	bd80      	pop	{r7, pc}

0800bd5c <aci_gap_set_discoverable>:
                                     const uint8_t* Local_Name,
                                     uint8_t Service_Uuid_length,
                                     const uint8_t* Service_Uuid_List,
                                     uint16_t Slave_Conn_Interval_Min,
                                     uint16_t Slave_Conn_Interval_Max )
{
 800bd5c:	b5b0      	push	{r4, r5, r7, lr}
 800bd5e:	b0ce      	sub	sp, #312	; 0x138
 800bd60:	af00      	add	r7, sp, #0
 800bd62:	4605      	mov	r5, r0
 800bd64:	460c      	mov	r4, r1
 800bd66:	4610      	mov	r0, r2
 800bd68:	4619      	mov	r1, r3
 800bd6a:	1dfb      	adds	r3, r7, #7
 800bd6c:	462a      	mov	r2, r5
 800bd6e:	701a      	strb	r2, [r3, #0]
 800bd70:	1d3b      	adds	r3, r7, #4
 800bd72:	4622      	mov	r2, r4
 800bd74:	801a      	strh	r2, [r3, #0]
 800bd76:	1cbb      	adds	r3, r7, #2
 800bd78:	4602      	mov	r2, r0
 800bd7a:	801a      	strh	r2, [r3, #0]
 800bd7c:	1dbb      	adds	r3, r7, #6
 800bd7e:	460a      	mov	r2, r1
 800bd80:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_discoverable_cp0 *cp0 = (aci_gap_set_discoverable_cp0*)(cmd_buffer);
 800bd82:	f107 0310 	add.w	r3, r7, #16
 800bd86:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  aci_gap_set_discoverable_cp1 *cp1 = (aci_gap_set_discoverable_cp1*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)));
 800bd8a:	f897 314c 	ldrb.w	r3, [r7, #332]	; 0x14c
 800bd8e:	3308      	adds	r3, #8
 800bd90:	f107 0210 	add.w	r2, r7, #16
 800bd94:	4413      	add	r3, r2
 800bd96:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  aci_gap_set_discoverable_cp2 *cp2 = (aci_gap_set_discoverable_cp2*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)) + 1 + Service_Uuid_length * (sizeof(uint8_t)));
 800bd9a:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 800bd9e:	f897 3154 	ldrb.w	r3, [r7, #340]	; 0x154
 800bda2:	4413      	add	r3, r2
 800bda4:	3309      	adds	r3, #9
 800bda6:	f107 0210 	add.w	r2, r7, #16
 800bdaa:	4413      	add	r3, r2
 800bdac:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800bdb0:	f107 030f 	add.w	r3, r7, #15
 800bdb4:	2200      	movs	r2, #0
 800bdb6:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800bdb8:	2300      	movs	r3, #0
 800bdba:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Type = Advertising_Type;
 800bdbe:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800bdc2:	1dfa      	adds	r2, r7, #7
 800bdc4:	7812      	ldrb	r2, [r2, #0]
 800bdc6:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800bdc8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800bdcc:	3301      	adds	r3, #1
 800bdce:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Interval_Min = Advertising_Interval_Min;
 800bdd2:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800bdd6:	1d3a      	adds	r2, r7, #4
 800bdd8:	8812      	ldrh	r2, [r2, #0]
 800bdda:	f8a3 2001 	strh.w	r2, [r3, #1]
  index_input += 2;
 800bdde:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800bde2:	3302      	adds	r3, #2
 800bde4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Interval_Max = Advertising_Interval_Max;
 800bde8:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800bdec:	1cba      	adds	r2, r7, #2
 800bdee:	8812      	ldrh	r2, [r2, #0]
 800bdf0:	f8a3 2003 	strh.w	r2, [r3, #3]
  index_input += 2;
 800bdf4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800bdf8:	3302      	adds	r3, #2
 800bdfa:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Own_Address_Type = Own_Address_Type;
 800bdfe:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800be02:	1dba      	adds	r2, r7, #6
 800be04:	7812      	ldrb	r2, [r2, #0]
 800be06:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 800be08:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800be0c:	3301      	adds	r3, #1
 800be0e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Filter_Policy = Advertising_Filter_Policy;
 800be12:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800be16:	f897 2148 	ldrb.w	r2, [r7, #328]	; 0x148
 800be1a:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 800be1c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800be20:	3301      	adds	r3, #1
 800be22:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Local_Name_Length = Local_Name_Length;
 800be26:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800be2a:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 800be2e:	71da      	strb	r2, [r3, #7]
  index_input += 1;
 800be30:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800be34:	3301      	adds	r3, #1
 800be36:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  /* var_len_data input */
  {
    Osal_MemCpy( (void*)&cp0->Local_Name, (const void*)Local_Name, Local_Name_Length );
 800be3a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800be3e:	3308      	adds	r3, #8
 800be40:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 800be44:	f8d7 1150 	ldr.w	r1, [r7, #336]	; 0x150
 800be48:	4618      	mov	r0, r3
 800be4a:	f000 fefb 	bl	800cc44 <Osal_MemCpy>
    index_input += Local_Name_Length;
 800be4e:	f897 314c 	ldrb.w	r3, [r7, #332]	; 0x14c
 800be52:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800be56:	4413      	add	r3, r2
 800be58:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp1->Service_Uuid_length = Service_Uuid_length;
 800be5c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800be60:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 800be64:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 800be66:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800be6a:	3301      	adds	r3, #1
 800be6c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    Osal_MemCpy( (void*)&cp1->Service_Uuid_List, (const void*)Service_Uuid_List, Service_Uuid_length );
 800be70:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800be74:	3301      	adds	r3, #1
 800be76:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 800be7a:	f8d7 1158 	ldr.w	r1, [r7, #344]	; 0x158
 800be7e:	4618      	mov	r0, r3
 800be80:	f000 fee0 	bl	800cc44 <Osal_MemCpy>
    index_input += Service_Uuid_length;
 800be84:	f897 3154 	ldrb.w	r3, [r7, #340]	; 0x154
 800be88:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800be8c:	4413      	add	r3, r2
 800be8e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp2->Slave_Conn_Interval_Min = Slave_Conn_Interval_Min;
 800be92:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800be96:	f8b7 215c 	ldrh.w	r2, [r7, #348]	; 0x15c
 800be9a:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 800be9c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800bea0:	3302      	adds	r3, #2
 800bea2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp2->Slave_Conn_Interval_Max = Slave_Conn_Interval_Max;
 800bea6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800beaa:	f8b7 2160 	ldrh.w	r2, [r7, #352]	; 0x160
 800beae:	805a      	strh	r2, [r3, #2]
    }
    index_input += 2;
 800beb0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800beb4:	3302      	adds	r3, #2
 800beb6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800beba:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800bebe:	2218      	movs	r2, #24
 800bec0:	2100      	movs	r1, #0
 800bec2:	4618      	mov	r0, r3
 800bec4:	f000 fece 	bl	800cc64 <Osal_MemSet>
  rq.ogf = 0x3f;
 800bec8:	233f      	movs	r3, #63	; 0x3f
 800beca:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x083;
 800bece:	2383      	movs	r3, #131	; 0x83
 800bed0:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800bed4:	f107 0310 	add.w	r3, r7, #16
 800bed8:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800bedc:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800bee0:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800bee4:	f107 030f 	add.w	r3, r7, #15
 800bee8:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800beec:	2301      	movs	r3, #1
 800beee:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800bef2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800bef6:	2100      	movs	r1, #0
 800bef8:	4618      	mov	r0, r3
 800befa:	f000 ff5b 	bl	800cdb4 <hci_send_req>
 800befe:	4603      	mov	r3, r0
 800bf00:	2b00      	cmp	r3, #0
 800bf02:	da01      	bge.n	800bf08 <aci_gap_set_discoverable+0x1ac>
    return BLE_STATUS_TIMEOUT;
 800bf04:	23ff      	movs	r3, #255	; 0xff
 800bf06:	e002      	b.n	800bf0e <aci_gap_set_discoverable+0x1b2>
  return status;
 800bf08:	f107 030f 	add.w	r3, r7, #15
 800bf0c:	781b      	ldrb	r3, [r3, #0]
}
 800bf0e:	4618      	mov	r0, r3
 800bf10:	f507 779c 	add.w	r7, r7, #312	; 0x138
 800bf14:	46bd      	mov	sp, r7
 800bf16:	bdb0      	pop	{r4, r5, r7, pc}

0800bf18 <aci_gap_set_io_capability>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_set_io_capability( uint8_t IO_Capability )
{
 800bf18:	b580      	push	{r7, lr}
 800bf1a:	b0cc      	sub	sp, #304	; 0x130
 800bf1c:	af00      	add	r7, sp, #0
 800bf1e:	4602      	mov	r2, r0
 800bf20:	1dfb      	adds	r3, r7, #7
 800bf22:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_io_capability_cp0 *cp0 = (aci_gap_set_io_capability_cp0*)(cmd_buffer);
 800bf24:	f107 0310 	add.w	r3, r7, #16
 800bf28:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800bf2c:	f107 030f 	add.w	r3, r7, #15
 800bf30:	2200      	movs	r2, #0
 800bf32:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800bf34:	2300      	movs	r3, #0
 800bf36:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->IO_Capability = IO_Capability;
 800bf3a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800bf3e:	1dfa      	adds	r2, r7, #7
 800bf40:	7812      	ldrb	r2, [r2, #0]
 800bf42:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800bf44:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800bf48:	3301      	adds	r3, #1
 800bf4a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800bf4e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800bf52:	2218      	movs	r2, #24
 800bf54:	2100      	movs	r1, #0
 800bf56:	4618      	mov	r0, r3
 800bf58:	f000 fe84 	bl	800cc64 <Osal_MemSet>
  rq.ogf = 0x3f;
 800bf5c:	233f      	movs	r3, #63	; 0x3f
 800bf5e:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x085;
 800bf62:	2385      	movs	r3, #133	; 0x85
 800bf64:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800bf68:	f107 0310 	add.w	r3, r7, #16
 800bf6c:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800bf70:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800bf74:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800bf78:	f107 030f 	add.w	r3, r7, #15
 800bf7c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800bf80:	2301      	movs	r3, #1
 800bf82:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800bf86:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800bf8a:	2100      	movs	r1, #0
 800bf8c:	4618      	mov	r0, r3
 800bf8e:	f000 ff11 	bl	800cdb4 <hci_send_req>
 800bf92:	4603      	mov	r3, r0
 800bf94:	2b00      	cmp	r3, #0
 800bf96:	da01      	bge.n	800bf9c <aci_gap_set_io_capability+0x84>
    return BLE_STATUS_TIMEOUT;
 800bf98:	23ff      	movs	r3, #255	; 0xff
 800bf9a:	e002      	b.n	800bfa2 <aci_gap_set_io_capability+0x8a>
  return status;
 800bf9c:	f107 030f 	add.w	r3, r7, #15
 800bfa0:	781b      	ldrb	r3, [r3, #0]
}
 800bfa2:	4618      	mov	r0, r3
 800bfa4:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800bfa8:	46bd      	mov	sp, r7
 800bfaa:	bd80      	pop	{r7, pc}

0800bfac <aci_gap_set_authentication_requirement>:
                                                   uint8_t Min_Encryption_Key_Size,
                                                   uint8_t Max_Encryption_Key_Size,
                                                   uint8_t Use_Fixed_Pin,
                                                   uint32_t Fixed_Pin,
                                                   uint8_t Identity_Address_Type )
{
 800bfac:	b5b0      	push	{r4, r5, r7, lr}
 800bfae:	b0cc      	sub	sp, #304	; 0x130
 800bfb0:	af00      	add	r7, sp, #0
 800bfb2:	4605      	mov	r5, r0
 800bfb4:	460c      	mov	r4, r1
 800bfb6:	4610      	mov	r0, r2
 800bfb8:	4619      	mov	r1, r3
 800bfba:	1dfb      	adds	r3, r7, #7
 800bfbc:	462a      	mov	r2, r5
 800bfbe:	701a      	strb	r2, [r3, #0]
 800bfc0:	1dbb      	adds	r3, r7, #6
 800bfc2:	4622      	mov	r2, r4
 800bfc4:	701a      	strb	r2, [r3, #0]
 800bfc6:	1d7b      	adds	r3, r7, #5
 800bfc8:	4602      	mov	r2, r0
 800bfca:	701a      	strb	r2, [r3, #0]
 800bfcc:	1d3b      	adds	r3, r7, #4
 800bfce:	460a      	mov	r2, r1
 800bfd0:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_authentication_requirement_cp0 *cp0 = (aci_gap_set_authentication_requirement_cp0*)(cmd_buffer);
 800bfd2:	f107 0310 	add.w	r3, r7, #16
 800bfd6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800bfda:	f107 030f 	add.w	r3, r7, #15
 800bfde:	2200      	movs	r2, #0
 800bfe0:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800bfe2:	2300      	movs	r3, #0
 800bfe4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Bonding_Mode = Bonding_Mode;
 800bfe8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800bfec:	1dfa      	adds	r2, r7, #7
 800bfee:	7812      	ldrb	r2, [r2, #0]
 800bff0:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800bff2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800bff6:	3301      	adds	r3, #1
 800bff8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->MITM_Mode = MITM_Mode;
 800bffc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800c000:	1dba      	adds	r2, r7, #6
 800c002:	7812      	ldrb	r2, [r2, #0]
 800c004:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800c006:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800c00a:	3301      	adds	r3, #1
 800c00c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->SC_Support = SC_Support;
 800c010:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800c014:	1d7a      	adds	r2, r7, #5
 800c016:	7812      	ldrb	r2, [r2, #0]
 800c018:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800c01a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800c01e:	3301      	adds	r3, #1
 800c020:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->KeyPress_Notification_Support = KeyPress_Notification_Support;
 800c024:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800c028:	1d3a      	adds	r2, r7, #4
 800c02a:	7812      	ldrb	r2, [r2, #0]
 800c02c:	70da      	strb	r2, [r3, #3]
  index_input += 1;
 800c02e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800c032:	3301      	adds	r3, #1
 800c034:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Min_Encryption_Key_Size = Min_Encryption_Key_Size;
 800c038:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800c03c:	f897 2140 	ldrb.w	r2, [r7, #320]	; 0x140
 800c040:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 800c042:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800c046:	3301      	adds	r3, #1
 800c048:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Max_Encryption_Key_Size = Max_Encryption_Key_Size;
 800c04c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800c050:	f897 2144 	ldrb.w	r2, [r7, #324]	; 0x144
 800c054:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 800c056:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800c05a:	3301      	adds	r3, #1
 800c05c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Use_Fixed_Pin = Use_Fixed_Pin;
 800c060:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800c064:	f897 2148 	ldrb.w	r2, [r7, #328]	; 0x148
 800c068:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 800c06a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800c06e:	3301      	adds	r3, #1
 800c070:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Fixed_Pin = Fixed_Pin;
 800c074:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800c078:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 800c07c:	f8c3 2007 	str.w	r2, [r3, #7]
  index_input += 4;
 800c080:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800c084:	3304      	adds	r3, #4
 800c086:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Identity_Address_Type = Identity_Address_Type;
 800c08a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800c08e:	f897 2150 	ldrb.w	r2, [r7, #336]	; 0x150
 800c092:	72da      	strb	r2, [r3, #11]
  index_input += 1;
 800c094:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800c098:	3301      	adds	r3, #1
 800c09a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800c09e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800c0a2:	2218      	movs	r2, #24
 800c0a4:	2100      	movs	r1, #0
 800c0a6:	4618      	mov	r0, r3
 800c0a8:	f000 fddc 	bl	800cc64 <Osal_MemSet>
  rq.ogf = 0x3f;
 800c0ac:	233f      	movs	r3, #63	; 0x3f
 800c0ae:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x086;
 800c0b2:	2386      	movs	r3, #134	; 0x86
 800c0b4:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800c0b8:	f107 0310 	add.w	r3, r7, #16
 800c0bc:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800c0c0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800c0c4:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800c0c8:	f107 030f 	add.w	r3, r7, #15
 800c0cc:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800c0d0:	2301      	movs	r3, #1
 800c0d2:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800c0d6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800c0da:	2100      	movs	r1, #0
 800c0dc:	4618      	mov	r0, r3
 800c0de:	f000 fe69 	bl	800cdb4 <hci_send_req>
 800c0e2:	4603      	mov	r3, r0
 800c0e4:	2b00      	cmp	r3, #0
 800c0e6:	da01      	bge.n	800c0ec <aci_gap_set_authentication_requirement+0x140>
    return BLE_STATUS_TIMEOUT;
 800c0e8:	23ff      	movs	r3, #255	; 0xff
 800c0ea:	e002      	b.n	800c0f2 <aci_gap_set_authentication_requirement+0x146>
  return status;
 800c0ec:	f107 030f 	add.w	r3, r7, #15
 800c0f0:	781b      	ldrb	r3, [r3, #0]
}
 800c0f2:	4618      	mov	r0, r3
 800c0f4:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800c0f8:	46bd      	mov	sp, r7
 800c0fa:	bdb0      	pop	{r4, r5, r7, pc}

0800c0fc <aci_gap_init>:
                         uint8_t privacy_enabled,
                         uint8_t device_name_char_len,
                         uint16_t* Service_Handle,
                         uint16_t* Dev_Name_Char_Handle,
                         uint16_t* Appearance_Char_Handle )
{
 800c0fc:	b590      	push	{r4, r7, lr}
 800c0fe:	b0cd      	sub	sp, #308	; 0x134
 800c100:	af00      	add	r7, sp, #0
 800c102:	4604      	mov	r4, r0
 800c104:	4608      	mov	r0, r1
 800c106:	4611      	mov	r1, r2
 800c108:	463a      	mov	r2, r7
 800c10a:	6013      	str	r3, [r2, #0]
 800c10c:	1dfb      	adds	r3, r7, #7
 800c10e:	4622      	mov	r2, r4
 800c110:	701a      	strb	r2, [r3, #0]
 800c112:	1dbb      	adds	r3, r7, #6
 800c114:	4602      	mov	r2, r0
 800c116:	701a      	strb	r2, [r3, #0]
 800c118:	1d7b      	adds	r3, r7, #5
 800c11a:	460a      	mov	r2, r1
 800c11c:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_init_cp0 *cp0 = (aci_gap_init_cp0*)(cmd_buffer);
 800c11e:	f107 0310 	add.w	r3, r7, #16
 800c122:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  aci_gap_init_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 800c126:	f107 0308 	add.w	r3, r7, #8
 800c12a:	2207      	movs	r2, #7
 800c12c:	2100      	movs	r1, #0
 800c12e:	4618      	mov	r0, r3
 800c130:	f000 fd98 	bl	800cc64 <Osal_MemSet>
  int index_input = 0;
 800c134:	2300      	movs	r3, #0
 800c136:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Role = Role;
 800c13a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800c13e:	1dfa      	adds	r2, r7, #7
 800c140:	7812      	ldrb	r2, [r2, #0]
 800c142:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800c144:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800c148:	3301      	adds	r3, #1
 800c14a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->privacy_enabled = privacy_enabled;
 800c14e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800c152:	1dba      	adds	r2, r7, #6
 800c154:	7812      	ldrb	r2, [r2, #0]
 800c156:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800c158:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800c15c:	3301      	adds	r3, #1
 800c15e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->device_name_char_len = device_name_char_len;
 800c162:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800c166:	1d7a      	adds	r2, r7, #5
 800c168:	7812      	ldrb	r2, [r2, #0]
 800c16a:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800c16c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800c170:	3301      	adds	r3, #1
 800c172:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800c176:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800c17a:	2218      	movs	r2, #24
 800c17c:	2100      	movs	r1, #0
 800c17e:	4618      	mov	r0, r3
 800c180:	f000 fd70 	bl	800cc64 <Osal_MemSet>
  rq.ogf = 0x3f;
 800c184:	233f      	movs	r3, #63	; 0x3f
 800c186:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x08a;
 800c18a:	238a      	movs	r3, #138	; 0x8a
 800c18c:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800c190:	f107 0310 	add.w	r3, r7, #16
 800c194:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800c198:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800c19c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &resp;
 800c1a0:	f107 0308 	add.w	r3, r7, #8
 800c1a4:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = sizeof(resp);
 800c1a8:	2307      	movs	r3, #7
 800c1aa:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800c1ae:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800c1b2:	2100      	movs	r1, #0
 800c1b4:	4618      	mov	r0, r3
 800c1b6:	f000 fdfd 	bl	800cdb4 <hci_send_req>
 800c1ba:	4603      	mov	r3, r0
 800c1bc:	2b00      	cmp	r3, #0
 800c1be:	da01      	bge.n	800c1c4 <aci_gap_init+0xc8>
    return BLE_STATUS_TIMEOUT;
 800c1c0:	23ff      	movs	r3, #255	; 0xff
 800c1c2:	e021      	b.n	800c208 <aci_gap_init+0x10c>
  if ( resp.Status )
 800c1c4:	f107 0308 	add.w	r3, r7, #8
 800c1c8:	781b      	ldrb	r3, [r3, #0]
 800c1ca:	2b00      	cmp	r3, #0
 800c1cc:	d003      	beq.n	800c1d6 <aci_gap_init+0xda>
    return resp.Status;
 800c1ce:	f107 0308 	add.w	r3, r7, #8
 800c1d2:	781b      	ldrb	r3, [r3, #0]
 800c1d4:	e018      	b.n	800c208 <aci_gap_init+0x10c>
  *Service_Handle = resp.Service_Handle;
 800c1d6:	f107 0308 	add.w	r3, r7, #8
 800c1da:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800c1de:	b29a      	uxth	r2, r3
 800c1e0:	463b      	mov	r3, r7
 800c1e2:	681b      	ldr	r3, [r3, #0]
 800c1e4:	801a      	strh	r2, [r3, #0]
  *Dev_Name_Char_Handle = resp.Dev_Name_Char_Handle;
 800c1e6:	f107 0308 	add.w	r3, r7, #8
 800c1ea:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 800c1ee:	b29a      	uxth	r2, r3
 800c1f0:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 800c1f4:	801a      	strh	r2, [r3, #0]
  *Appearance_Char_Handle = resp.Appearance_Char_Handle;
 800c1f6:	f107 0308 	add.w	r3, r7, #8
 800c1fa:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 800c1fe:	b29a      	uxth	r2, r3
 800c200:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 800c204:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 800c206:	2300      	movs	r3, #0
}
 800c208:	4618      	mov	r0, r3
 800c20a:	f507 779a 	add.w	r7, r7, #308	; 0x134
 800c20e:	46bd      	mov	sp, r7
 800c210:	bd90      	pop	{r4, r7, pc}

0800c212 <aci_gap_update_adv_data>:
  return status;
}

tBleStatus aci_gap_update_adv_data( uint8_t AdvDataLen,
                                    const uint8_t* AdvData )
{
 800c212:	b580      	push	{r7, lr}
 800c214:	b0cc      	sub	sp, #304	; 0x130
 800c216:	af00      	add	r7, sp, #0
 800c218:	4602      	mov	r2, r0
 800c21a:	463b      	mov	r3, r7
 800c21c:	6019      	str	r1, [r3, #0]
 800c21e:	1dfb      	adds	r3, r7, #7
 800c220:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_update_adv_data_cp0 *cp0 = (aci_gap_update_adv_data_cp0*)(cmd_buffer);
 800c222:	f107 0310 	add.w	r3, r7, #16
 800c226:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800c22a:	f107 030f 	add.w	r3, r7, #15
 800c22e:	2200      	movs	r2, #0
 800c230:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800c232:	2300      	movs	r3, #0
 800c234:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->AdvDataLen = AdvDataLen;
 800c238:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800c23c:	1dfa      	adds	r2, r7, #7
 800c23e:	7812      	ldrb	r2, [r2, #0]
 800c240:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800c242:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800c246:	3301      	adds	r3, #1
 800c248:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->AdvData, (const void*)AdvData, AdvDataLen );
 800c24c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800c250:	1c58      	adds	r0, r3, #1
 800c252:	1dfb      	adds	r3, r7, #7
 800c254:	781a      	ldrb	r2, [r3, #0]
 800c256:	463b      	mov	r3, r7
 800c258:	6819      	ldr	r1, [r3, #0]
 800c25a:	f000 fcf3 	bl	800cc44 <Osal_MemCpy>
  index_input += AdvDataLen;
 800c25e:	1dfb      	adds	r3, r7, #7
 800c260:	781b      	ldrb	r3, [r3, #0]
 800c262:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800c266:	4413      	add	r3, r2
 800c268:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800c26c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800c270:	2218      	movs	r2, #24
 800c272:	2100      	movs	r1, #0
 800c274:	4618      	mov	r0, r3
 800c276:	f000 fcf5 	bl	800cc64 <Osal_MemSet>
  rq.ogf = 0x3f;
 800c27a:	233f      	movs	r3, #63	; 0x3f
 800c27c:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x08e;
 800c280:	238e      	movs	r3, #142	; 0x8e
 800c282:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800c286:	f107 0310 	add.w	r3, r7, #16
 800c28a:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800c28e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800c292:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800c296:	f107 030f 	add.w	r3, r7, #15
 800c29a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800c29e:	2301      	movs	r3, #1
 800c2a0:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800c2a4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800c2a8:	2100      	movs	r1, #0
 800c2aa:	4618      	mov	r0, r3
 800c2ac:	f000 fd82 	bl	800cdb4 <hci_send_req>
 800c2b0:	4603      	mov	r3, r0
 800c2b2:	2b00      	cmp	r3, #0
 800c2b4:	da01      	bge.n	800c2ba <aci_gap_update_adv_data+0xa8>
    return BLE_STATUS_TIMEOUT;
 800c2b6:	23ff      	movs	r3, #255	; 0xff
 800c2b8:	e002      	b.n	800c2c0 <aci_gap_update_adv_data+0xae>
  return status;
 800c2ba:	f107 030f 	add.w	r3, r7, #15
 800c2be:	781b      	ldrb	r3, [r3, #0]
}
 800c2c0:	4618      	mov	r0, r3
 800c2c2:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800c2c6:	46bd      	mov	sp, r7
 800c2c8:	bd80      	pop	{r7, pc}

0800c2ca <aci_gap_configure_whitelist>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_configure_whitelist( void )
{
 800c2ca:	b580      	push	{r7, lr}
 800c2cc:	b088      	sub	sp, #32
 800c2ce:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 800c2d0:	2300      	movs	r3, #0
 800c2d2:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800c2d4:	f107 0308 	add.w	r3, r7, #8
 800c2d8:	2218      	movs	r2, #24
 800c2da:	2100      	movs	r1, #0
 800c2dc:	4618      	mov	r0, r3
 800c2de:	f000 fcc1 	bl	800cc64 <Osal_MemSet>
  rq.ogf = 0x3f;
 800c2e2:	233f      	movs	r3, #63	; 0x3f
 800c2e4:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x092;
 800c2e6:	2392      	movs	r3, #146	; 0x92
 800c2e8:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 800c2ea:	1dfb      	adds	r3, r7, #7
 800c2ec:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 800c2ee:	2301      	movs	r3, #1
 800c2f0:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 800c2f2:	f107 0308 	add.w	r3, r7, #8
 800c2f6:	2100      	movs	r1, #0
 800c2f8:	4618      	mov	r0, r3
 800c2fa:	f000 fd5b 	bl	800cdb4 <hci_send_req>
 800c2fe:	4603      	mov	r3, r0
 800c300:	2b00      	cmp	r3, #0
 800c302:	da01      	bge.n	800c308 <aci_gap_configure_whitelist+0x3e>
    return BLE_STATUS_TIMEOUT;
 800c304:	23ff      	movs	r3, #255	; 0xff
 800c306:	e000      	b.n	800c30a <aci_gap_configure_whitelist+0x40>
  return status;
 800c308:	79fb      	ldrb	r3, [r7, #7]
}
 800c30a:	4618      	mov	r0, r3
 800c30c:	3720      	adds	r7, #32
 800c30e:	46bd      	mov	sp, r7
 800c310:	bd80      	pop	{r7, pc}

0800c312 <aci_gap_allow_rebond>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_allow_rebond( uint16_t Connection_Handle )
{
 800c312:	b580      	push	{r7, lr}
 800c314:	b0cc      	sub	sp, #304	; 0x130
 800c316:	af00      	add	r7, sp, #0
 800c318:	4602      	mov	r2, r0
 800c31a:	1dbb      	adds	r3, r7, #6
 800c31c:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_allow_rebond_cp0 *cp0 = (aci_gap_allow_rebond_cp0*)(cmd_buffer);
 800c31e:	f107 0310 	add.w	r3, r7, #16
 800c322:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800c326:	f107 030f 	add.w	r3, r7, #15
 800c32a:	2200      	movs	r2, #0
 800c32c:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800c32e:	2300      	movs	r3, #0
 800c330:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Connection_Handle = Connection_Handle;
 800c334:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800c338:	1dba      	adds	r2, r7, #6
 800c33a:	8812      	ldrh	r2, [r2, #0]
 800c33c:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800c33e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800c342:	3302      	adds	r3, #2
 800c344:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800c348:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800c34c:	2218      	movs	r2, #24
 800c34e:	2100      	movs	r1, #0
 800c350:	4618      	mov	r0, r3
 800c352:	f000 fc87 	bl	800cc64 <Osal_MemSet>
  rq.ogf = 0x3f;
 800c356:	233f      	movs	r3, #63	; 0x3f
 800c358:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x095;
 800c35c:	2395      	movs	r3, #149	; 0x95
 800c35e:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800c362:	f107 0310 	add.w	r3, r7, #16
 800c366:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800c36a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800c36e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800c372:	f107 030f 	add.w	r3, r7, #15
 800c376:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800c37a:	2301      	movs	r3, #1
 800c37c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800c380:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800c384:	2100      	movs	r1, #0
 800c386:	4618      	mov	r0, r3
 800c388:	f000 fd14 	bl	800cdb4 <hci_send_req>
 800c38c:	4603      	mov	r3, r0
 800c38e:	2b00      	cmp	r3, #0
 800c390:	da01      	bge.n	800c396 <aci_gap_allow_rebond+0x84>
    return BLE_STATUS_TIMEOUT;
 800c392:	23ff      	movs	r3, #255	; 0xff
 800c394:	e002      	b.n	800c39c <aci_gap_allow_rebond+0x8a>
  return status;
 800c396:	f107 030f 	add.w	r3, r7, #15
 800c39a:	781b      	ldrb	r3, [r3, #0]
}
 800c39c:	4618      	mov	r0, r3
 800c39e:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800c3a2:	46bd      	mov	sp, r7
 800c3a4:	bd80      	pop	{r7, pc}

0800c3a6 <aci_gap_numeric_comparison_value_confirm_yesno>:
  return status;
}

tBleStatus aci_gap_numeric_comparison_value_confirm_yesno( uint16_t Connection_Handle,
                                                           uint8_t Confirm_Yes_No )
{
 800c3a6:	b580      	push	{r7, lr}
 800c3a8:	b0cc      	sub	sp, #304	; 0x130
 800c3aa:	af00      	add	r7, sp, #0
 800c3ac:	4602      	mov	r2, r0
 800c3ae:	1dbb      	adds	r3, r7, #6
 800c3b0:	801a      	strh	r2, [r3, #0]
 800c3b2:	1d7b      	adds	r3, r7, #5
 800c3b4:	460a      	mov	r2, r1
 800c3b6:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_numeric_comparison_value_confirm_yesno_cp0 *cp0 = (aci_gap_numeric_comparison_value_confirm_yesno_cp0*)(cmd_buffer);
 800c3b8:	f107 0310 	add.w	r3, r7, #16
 800c3bc:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800c3c0:	f107 030f 	add.w	r3, r7, #15
 800c3c4:	2200      	movs	r2, #0
 800c3c6:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800c3c8:	2300      	movs	r3, #0
 800c3ca:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Connection_Handle = Connection_Handle;
 800c3ce:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800c3d2:	1dba      	adds	r2, r7, #6
 800c3d4:	8812      	ldrh	r2, [r2, #0]
 800c3d6:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800c3d8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800c3dc:	3302      	adds	r3, #2
 800c3de:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Confirm_Yes_No = Confirm_Yes_No;
 800c3e2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800c3e6:	1d7a      	adds	r2, r7, #5
 800c3e8:	7812      	ldrb	r2, [r2, #0]
 800c3ea:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800c3ec:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800c3f0:	3301      	adds	r3, #1
 800c3f2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800c3f6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800c3fa:	2218      	movs	r2, #24
 800c3fc:	2100      	movs	r1, #0
 800c3fe:	4618      	mov	r0, r3
 800c400:	f000 fc30 	bl	800cc64 <Osal_MemSet>
  rq.ogf = 0x3f;
 800c404:	233f      	movs	r3, #63	; 0x3f
 800c406:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x0a5;
 800c40a:	23a5      	movs	r3, #165	; 0xa5
 800c40c:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800c410:	f107 0310 	add.w	r3, r7, #16
 800c414:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800c418:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800c41c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800c420:	f107 030f 	add.w	r3, r7, #15
 800c424:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800c428:	2301      	movs	r3, #1
 800c42a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800c42e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800c432:	2100      	movs	r1, #0
 800c434:	4618      	mov	r0, r3
 800c436:	f000 fcbd 	bl	800cdb4 <hci_send_req>
 800c43a:	4603      	mov	r3, r0
 800c43c:	2b00      	cmp	r3, #0
 800c43e:	da01      	bge.n	800c444 <aci_gap_numeric_comparison_value_confirm_yesno+0x9e>
    return BLE_STATUS_TIMEOUT;
 800c440:	23ff      	movs	r3, #255	; 0xff
 800c442:	e002      	b.n	800c44a <aci_gap_numeric_comparison_value_confirm_yesno+0xa4>
  return status;
 800c444:	f107 030f 	add.w	r3, r7, #15
 800c448:	781b      	ldrb	r3, [r3, #0]
}
 800c44a:	4618      	mov	r0, r3
 800c44c:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800c450:	46bd      	mov	sp, r7
 800c452:	bd80      	pop	{r7, pc}

0800c454 <aci_gatt_init>:
 */

#include "ble_gatt_aci.h"

tBleStatus aci_gatt_init( void )
{
 800c454:	b580      	push	{r7, lr}
 800c456:	b088      	sub	sp, #32
 800c458:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 800c45a:	2300      	movs	r3, #0
 800c45c:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800c45e:	f107 0308 	add.w	r3, r7, #8
 800c462:	2218      	movs	r2, #24
 800c464:	2100      	movs	r1, #0
 800c466:	4618      	mov	r0, r3
 800c468:	f000 fbfc 	bl	800cc64 <Osal_MemSet>
  rq.ogf = 0x3f;
 800c46c:	233f      	movs	r3, #63	; 0x3f
 800c46e:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x101;
 800c470:	f240 1301 	movw	r3, #257	; 0x101
 800c474:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 800c476:	1dfb      	adds	r3, r7, #7
 800c478:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 800c47a:	2301      	movs	r3, #1
 800c47c:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 800c47e:	f107 0308 	add.w	r3, r7, #8
 800c482:	2100      	movs	r1, #0
 800c484:	4618      	mov	r0, r3
 800c486:	f000 fc95 	bl	800cdb4 <hci_send_req>
 800c48a:	4603      	mov	r3, r0
 800c48c:	2b00      	cmp	r3, #0
 800c48e:	da01      	bge.n	800c494 <aci_gatt_init+0x40>
    return BLE_STATUS_TIMEOUT;
 800c490:	23ff      	movs	r3, #255	; 0xff
 800c492:	e000      	b.n	800c496 <aci_gatt_init+0x42>
  return status;
 800c494:	79fb      	ldrb	r3, [r7, #7]
}
 800c496:	4618      	mov	r0, r3
 800c498:	3720      	adds	r7, #32
 800c49a:	46bd      	mov	sp, r7
 800c49c:	bd80      	pop	{r7, pc}

0800c49e <aci_gatt_add_service>:
tBleStatus aci_gatt_add_service( uint8_t Service_UUID_Type,
                                 const Service_UUID_t* Service_UUID,
                                 uint8_t Service_Type,
                                 uint8_t Max_Attribute_Records,
                                 uint16_t* Service_Handle )
{
 800c49e:	b590      	push	{r4, r7, lr}
 800c4a0:	b0cf      	sub	sp, #316	; 0x13c
 800c4a2:	af00      	add	r7, sp, #0
 800c4a4:	4604      	mov	r4, r0
 800c4a6:	4638      	mov	r0, r7
 800c4a8:	6001      	str	r1, [r0, #0]
 800c4aa:	4610      	mov	r0, r2
 800c4ac:	4619      	mov	r1, r3
 800c4ae:	1dfb      	adds	r3, r7, #7
 800c4b0:	4622      	mov	r2, r4
 800c4b2:	701a      	strb	r2, [r3, #0]
 800c4b4:	1dbb      	adds	r3, r7, #6
 800c4b6:	4602      	mov	r2, r0
 800c4b8:	701a      	strb	r2, [r3, #0]
 800c4ba:	1d7b      	adds	r3, r7, #5
 800c4bc:	460a      	mov	r2, r1
 800c4be:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_service_cp0 *cp0 = (aci_gatt_add_service_cp0*)(cmd_buffer);
 800c4c0:	f107 0310 	add.w	r3, r7, #16
 800c4c4:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  aci_gatt_add_service_cp1 *cp1 = (aci_gatt_add_service_cp1*)(cmd_buffer + 1 + (Service_UUID_Type == 1 ? 2 : (Service_UUID_Type == 2 ? 16 : 0)));
 800c4c8:	1dfb      	adds	r3, r7, #7
 800c4ca:	781b      	ldrb	r3, [r3, #0]
 800c4cc:	2b01      	cmp	r3, #1
 800c4ce:	d007      	beq.n	800c4e0 <aci_gatt_add_service+0x42>
 800c4d0:	1dfb      	adds	r3, r7, #7
 800c4d2:	781b      	ldrb	r3, [r3, #0]
 800c4d4:	2b02      	cmp	r3, #2
 800c4d6:	d101      	bne.n	800c4dc <aci_gatt_add_service+0x3e>
 800c4d8:	2311      	movs	r3, #17
 800c4da:	e002      	b.n	800c4e2 <aci_gatt_add_service+0x44>
 800c4dc:	2301      	movs	r3, #1
 800c4de:	e000      	b.n	800c4e2 <aci_gatt_add_service+0x44>
 800c4e0:	2303      	movs	r3, #3
 800c4e2:	f107 0210 	add.w	r2, r7, #16
 800c4e6:	4413      	add	r3, r2
 800c4e8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  aci_gatt_add_service_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 800c4ec:	f107 030c 	add.w	r3, r7, #12
 800c4f0:	2203      	movs	r2, #3
 800c4f2:	2100      	movs	r1, #0
 800c4f4:	4618      	mov	r0, r3
 800c4f6:	f000 fbb5 	bl	800cc64 <Osal_MemSet>
  int index_input = 0;
 800c4fa:	2300      	movs	r3, #0
 800c4fc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Service_UUID_Type = Service_UUID_Type;
 800c500:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800c504:	1dfa      	adds	r2, r7, #7
 800c506:	7812      	ldrb	r2, [r2, #0]
 800c508:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800c50a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800c50e:	3301      	adds	r3, #1
 800c510:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  /* var_len_data input */
  {
    uint8_t size;
    switch ( Service_UUID_Type )
 800c514:	1dfb      	adds	r3, r7, #7
 800c516:	781b      	ldrb	r3, [r3, #0]
 800c518:	2b01      	cmp	r3, #1
 800c51a:	d002      	beq.n	800c522 <aci_gatt_add_service+0x84>
 800c51c:	2b02      	cmp	r3, #2
 800c51e:	d004      	beq.n	800c52a <aci_gatt_add_service+0x8c>
 800c520:	e007      	b.n	800c532 <aci_gatt_add_service+0x94>
    {
      case 1: size = 2; break;
 800c522:	2302      	movs	r3, #2
 800c524:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
 800c528:	e005      	b.n	800c536 <aci_gatt_add_service+0x98>
      case 2: size = 16; break;
 800c52a:	2310      	movs	r3, #16
 800c52c:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
 800c530:	e001      	b.n	800c536 <aci_gatt_add_service+0x98>
      default: return BLE_STATUS_ERROR;
 800c532:	2347      	movs	r3, #71	; 0x47
 800c534:	e05d      	b.n	800c5f2 <aci_gatt_add_service+0x154>
    }
    Osal_MemCpy( (void*)&cp0->Service_UUID, (const void*)Service_UUID, size );
 800c536:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800c53a:	1c58      	adds	r0, r3, #1
 800c53c:	f897 2137 	ldrb.w	r2, [r7, #311]	; 0x137
 800c540:	463b      	mov	r3, r7
 800c542:	6819      	ldr	r1, [r3, #0]
 800c544:	f000 fb7e 	bl	800cc44 <Osal_MemCpy>
    index_input += size;
 800c548:	f897 3137 	ldrb.w	r3, [r7, #311]	; 0x137
 800c54c:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800c550:	4413      	add	r3, r2
 800c552:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp1->Service_Type = Service_Type;
 800c556:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800c55a:	1dba      	adds	r2, r7, #6
 800c55c:	7812      	ldrb	r2, [r2, #0]
 800c55e:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 800c560:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800c564:	3301      	adds	r3, #1
 800c566:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp1->Max_Attribute_Records = Max_Attribute_Records;
 800c56a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800c56e:	1d7a      	adds	r2, r7, #5
 800c570:	7812      	ldrb	r2, [r2, #0]
 800c572:	705a      	strb	r2, [r3, #1]
    }
    index_input += 1;
 800c574:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800c578:	3301      	adds	r3, #1
 800c57a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800c57e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800c582:	2218      	movs	r2, #24
 800c584:	2100      	movs	r1, #0
 800c586:	4618      	mov	r0, r3
 800c588:	f000 fb6c 	bl	800cc64 <Osal_MemSet>
  rq.ogf = 0x3f;
 800c58c:	233f      	movs	r3, #63	; 0x3f
 800c58e:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x102;
 800c592:	f44f 7381 	mov.w	r3, #258	; 0x102
 800c596:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800c59a:	f107 0310 	add.w	r3, r7, #16
 800c59e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800c5a2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800c5a6:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &resp;
 800c5aa:	f107 030c 	add.w	r3, r7, #12
 800c5ae:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = sizeof(resp);
 800c5b2:	2303      	movs	r3, #3
 800c5b4:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800c5b8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800c5bc:	2100      	movs	r1, #0
 800c5be:	4618      	mov	r0, r3
 800c5c0:	f000 fbf8 	bl	800cdb4 <hci_send_req>
 800c5c4:	4603      	mov	r3, r0
 800c5c6:	2b00      	cmp	r3, #0
 800c5c8:	da01      	bge.n	800c5ce <aci_gatt_add_service+0x130>
    return BLE_STATUS_TIMEOUT;
 800c5ca:	23ff      	movs	r3, #255	; 0xff
 800c5cc:	e011      	b.n	800c5f2 <aci_gatt_add_service+0x154>
  if ( resp.Status )
 800c5ce:	f107 030c 	add.w	r3, r7, #12
 800c5d2:	781b      	ldrb	r3, [r3, #0]
 800c5d4:	2b00      	cmp	r3, #0
 800c5d6:	d003      	beq.n	800c5e0 <aci_gatt_add_service+0x142>
    return resp.Status;
 800c5d8:	f107 030c 	add.w	r3, r7, #12
 800c5dc:	781b      	ldrb	r3, [r3, #0]
 800c5de:	e008      	b.n	800c5f2 <aci_gatt_add_service+0x154>
  *Service_Handle = resp.Service_Handle;
 800c5e0:	f107 030c 	add.w	r3, r7, #12
 800c5e4:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800c5e8:	b29a      	uxth	r2, r3
 800c5ea:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800c5ee:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 800c5f0:	2300      	movs	r3, #0
}
 800c5f2:	4618      	mov	r0, r3
 800c5f4:	f507 779e 	add.w	r7, r7, #316	; 0x13c
 800c5f8:	46bd      	mov	sp, r7
 800c5fa:	bd90      	pop	{r4, r7, pc}

0800c5fc <aci_gatt_add_char>:
                              uint8_t Security_Permissions,
                              uint8_t GATT_Evt_Mask,
                              uint8_t Enc_Key_Size,
                              uint8_t Is_Variable,
                              uint16_t* Char_Handle )
{
 800c5fc:	b590      	push	{r4, r7, lr}
 800c5fe:	b0d1      	sub	sp, #324	; 0x144
 800c600:	af00      	add	r7, sp, #0
 800c602:	4604      	mov	r4, r0
 800c604:	4608      	mov	r0, r1
 800c606:	f107 0108 	add.w	r1, r7, #8
 800c60a:	600a      	str	r2, [r1, #0]
 800c60c:	4619      	mov	r1, r3
 800c60e:	f107 030e 	add.w	r3, r7, #14
 800c612:	4622      	mov	r2, r4
 800c614:	801a      	strh	r2, [r3, #0]
 800c616:	f107 030d 	add.w	r3, r7, #13
 800c61a:	4602      	mov	r2, r0
 800c61c:	701a      	strb	r2, [r3, #0]
 800c61e:	1dbb      	adds	r3, r7, #6
 800c620:	460a      	mov	r2, r1
 800c622:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_char_cp0 *cp0 = (aci_gatt_add_char_cp0*)(cmd_buffer);
 800c624:	f107 0318 	add.w	r3, r7, #24
 800c628:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  aci_gatt_add_char_cp1 *cp1 = (aci_gatt_add_char_cp1*)(cmd_buffer + 2 + 1 + (Char_UUID_Type == 1 ? 2 : (Char_UUID_Type == 2 ? 16 : 0)));
 800c62c:	f107 030d 	add.w	r3, r7, #13
 800c630:	781b      	ldrb	r3, [r3, #0]
 800c632:	2b01      	cmp	r3, #1
 800c634:	d008      	beq.n	800c648 <aci_gatt_add_char+0x4c>
 800c636:	f107 030d 	add.w	r3, r7, #13
 800c63a:	781b      	ldrb	r3, [r3, #0]
 800c63c:	2b02      	cmp	r3, #2
 800c63e:	d101      	bne.n	800c644 <aci_gatt_add_char+0x48>
 800c640:	2313      	movs	r3, #19
 800c642:	e002      	b.n	800c64a <aci_gatt_add_char+0x4e>
 800c644:	2303      	movs	r3, #3
 800c646:	e000      	b.n	800c64a <aci_gatt_add_char+0x4e>
 800c648:	2305      	movs	r3, #5
 800c64a:	f107 0218 	add.w	r2, r7, #24
 800c64e:	4413      	add	r3, r2
 800c650:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  aci_gatt_add_char_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 800c654:	f107 0314 	add.w	r3, r7, #20
 800c658:	2203      	movs	r2, #3
 800c65a:	2100      	movs	r1, #0
 800c65c:	4618      	mov	r0, r3
 800c65e:	f000 fb01 	bl	800cc64 <Osal_MemSet>
  int index_input = 0;
 800c662:	2300      	movs	r3, #0
 800c664:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Service_Handle = Service_Handle;
 800c668:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800c66c:	f107 020e 	add.w	r2, r7, #14
 800c670:	8812      	ldrh	r2, [r2, #0]
 800c672:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800c674:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800c678:	3302      	adds	r3, #2
 800c67a:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Char_UUID_Type = Char_UUID_Type;
 800c67e:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800c682:	f107 020d 	add.w	r2, r7, #13
 800c686:	7812      	ldrb	r2, [r2, #0]
 800c688:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800c68a:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800c68e:	3301      	adds	r3, #1
 800c690:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  /* var_len_data input */
  {
    uint8_t size;
    switch ( Char_UUID_Type )
 800c694:	f107 030d 	add.w	r3, r7, #13
 800c698:	781b      	ldrb	r3, [r3, #0]
 800c69a:	2b01      	cmp	r3, #1
 800c69c:	d002      	beq.n	800c6a4 <aci_gatt_add_char+0xa8>
 800c69e:	2b02      	cmp	r3, #2
 800c6a0:	d004      	beq.n	800c6ac <aci_gatt_add_char+0xb0>
 800c6a2:	e007      	b.n	800c6b4 <aci_gatt_add_char+0xb8>
    {
      case 1: size = 2; break;
 800c6a4:	2302      	movs	r3, #2
 800c6a6:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
 800c6aa:	e005      	b.n	800c6b8 <aci_gatt_add_char+0xbc>
      case 2: size = 16; break;
 800c6ac:	2310      	movs	r3, #16
 800c6ae:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
 800c6b2:	e001      	b.n	800c6b8 <aci_gatt_add_char+0xbc>
      default: return BLE_STATUS_ERROR;
 800c6b4:	2347      	movs	r3, #71	; 0x47
 800c6b6:	e086      	b.n	800c7c6 <aci_gatt_add_char+0x1ca>
    }
    Osal_MemCpy( (void*)&cp0->Char_UUID, (const void*)Char_UUID, size );
 800c6b8:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800c6bc:	1cd8      	adds	r0, r3, #3
 800c6be:	f897 213f 	ldrb.w	r2, [r7, #319]	; 0x13f
 800c6c2:	f107 0308 	add.w	r3, r7, #8
 800c6c6:	6819      	ldr	r1, [r3, #0]
 800c6c8:	f000 fabc 	bl	800cc44 <Osal_MemCpy>
    index_input += size;
 800c6cc:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
 800c6d0:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 800c6d4:	4413      	add	r3, r2
 800c6d6:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Char_Value_Length = Char_Value_Length;
 800c6da:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800c6de:	1dba      	adds	r2, r7, #6
 800c6e0:	8812      	ldrh	r2, [r2, #0]
 800c6e2:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 800c6e4:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800c6e8:	3302      	adds	r3, #2
 800c6ea:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Char_Properties = Char_Properties;
 800c6ee:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800c6f2:	f897 2150 	ldrb.w	r2, [r7, #336]	; 0x150
 800c6f6:	709a      	strb	r2, [r3, #2]
    }
    index_input += 1;
 800c6f8:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800c6fc:	3301      	adds	r3, #1
 800c6fe:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Security_Permissions = Security_Permissions;
 800c702:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800c706:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 800c70a:	70da      	strb	r2, [r3, #3]
    }
    index_input += 1;
 800c70c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800c710:	3301      	adds	r3, #1
 800c712:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->GATT_Evt_Mask = GATT_Evt_Mask;
 800c716:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800c71a:	f897 2158 	ldrb.w	r2, [r7, #344]	; 0x158
 800c71e:	711a      	strb	r2, [r3, #4]
    }
    index_input += 1;
 800c720:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800c724:	3301      	adds	r3, #1
 800c726:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Enc_Key_Size = Enc_Key_Size;
 800c72a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800c72e:	f897 215c 	ldrb.w	r2, [r7, #348]	; 0x15c
 800c732:	715a      	strb	r2, [r3, #5]
    }
    index_input += 1;
 800c734:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800c738:	3301      	adds	r3, #1
 800c73a:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Is_Variable = Is_Variable;
 800c73e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800c742:	f897 2160 	ldrb.w	r2, [r7, #352]	; 0x160
 800c746:	719a      	strb	r2, [r3, #6]
    }
    index_input += 1;
 800c748:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800c74c:	3301      	adds	r3, #1
 800c74e:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800c752:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800c756:	2218      	movs	r2, #24
 800c758:	2100      	movs	r1, #0
 800c75a:	4618      	mov	r0, r3
 800c75c:	f000 fa82 	bl	800cc64 <Osal_MemSet>
  rq.ogf = 0x3f;
 800c760:	233f      	movs	r3, #63	; 0x3f
 800c762:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
  rq.ocf = 0x104;
 800c766:	f44f 7382 	mov.w	r3, #260	; 0x104
 800c76a:	f8a7 311a 	strh.w	r3, [r7, #282]	; 0x11a
  rq.cparam = cmd_buffer;
 800c76e:	f107 0318 	add.w	r3, r7, #24
 800c772:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.clen = index_input;
 800c776:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800c77a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  rq.rparam = &resp;
 800c77e:	f107 0314 	add.w	r3, r7, #20
 800c782:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  rq.rlen = sizeof(resp);
 800c786:	2303      	movs	r3, #3
 800c788:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if ( hci_send_req(&rq, FALSE) < 0 )
 800c78c:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800c790:	2100      	movs	r1, #0
 800c792:	4618      	mov	r0, r3
 800c794:	f000 fb0e 	bl	800cdb4 <hci_send_req>
 800c798:	4603      	mov	r3, r0
 800c79a:	2b00      	cmp	r3, #0
 800c79c:	da01      	bge.n	800c7a2 <aci_gatt_add_char+0x1a6>
    return BLE_STATUS_TIMEOUT;
 800c79e:	23ff      	movs	r3, #255	; 0xff
 800c7a0:	e011      	b.n	800c7c6 <aci_gatt_add_char+0x1ca>
  if ( resp.Status )
 800c7a2:	f107 0314 	add.w	r3, r7, #20
 800c7a6:	781b      	ldrb	r3, [r3, #0]
 800c7a8:	2b00      	cmp	r3, #0
 800c7aa:	d003      	beq.n	800c7b4 <aci_gatt_add_char+0x1b8>
    return resp.Status;
 800c7ac:	f107 0314 	add.w	r3, r7, #20
 800c7b0:	781b      	ldrb	r3, [r3, #0]
 800c7b2:	e008      	b.n	800c7c6 <aci_gatt_add_char+0x1ca>
  *Char_Handle = resp.Char_Handle;
 800c7b4:	f107 0314 	add.w	r3, r7, #20
 800c7b8:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800c7bc:	b29a      	uxth	r2, r3
 800c7be:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 800c7c2:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 800c7c4:	2300      	movs	r3, #0
}
 800c7c6:	4618      	mov	r0, r3
 800c7c8:	f507 77a2 	add.w	r7, r7, #324	; 0x144
 800c7cc:	46bd      	mov	sp, r7
 800c7ce:	bd90      	pop	{r4, r7, pc}

0800c7d0 <aci_gatt_update_char_value>:
tBleStatus aci_gatt_update_char_value( uint16_t Service_Handle,
                                       uint16_t Char_Handle,
                                       uint8_t Val_Offset,
                                       uint8_t Char_Value_Length,
                                       const uint8_t* Char_Value )
{
 800c7d0:	b5b0      	push	{r4, r5, r7, lr}
 800c7d2:	b0cc      	sub	sp, #304	; 0x130
 800c7d4:	af00      	add	r7, sp, #0
 800c7d6:	4605      	mov	r5, r0
 800c7d8:	460c      	mov	r4, r1
 800c7da:	4610      	mov	r0, r2
 800c7dc:	4619      	mov	r1, r3
 800c7de:	1dbb      	adds	r3, r7, #6
 800c7e0:	462a      	mov	r2, r5
 800c7e2:	801a      	strh	r2, [r3, #0]
 800c7e4:	1d3b      	adds	r3, r7, #4
 800c7e6:	4622      	mov	r2, r4
 800c7e8:	801a      	strh	r2, [r3, #0]
 800c7ea:	1cfb      	adds	r3, r7, #3
 800c7ec:	4602      	mov	r2, r0
 800c7ee:	701a      	strb	r2, [r3, #0]
 800c7f0:	1cbb      	adds	r3, r7, #2
 800c7f2:	460a      	mov	r2, r1
 800c7f4:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_update_char_value_cp0 *cp0 = (aci_gatt_update_char_value_cp0*)(cmd_buffer);
 800c7f6:	f107 0310 	add.w	r3, r7, #16
 800c7fa:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800c7fe:	f107 030f 	add.w	r3, r7, #15
 800c802:	2200      	movs	r2, #0
 800c804:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800c806:	2300      	movs	r3, #0
 800c808:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Service_Handle = Service_Handle;
 800c80c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800c810:	1dba      	adds	r2, r7, #6
 800c812:	8812      	ldrh	r2, [r2, #0]
 800c814:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800c816:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800c81a:	3302      	adds	r3, #2
 800c81c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Char_Handle = Char_Handle;
 800c820:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800c824:	1d3a      	adds	r2, r7, #4
 800c826:	8812      	ldrh	r2, [r2, #0]
 800c828:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 800c82a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800c82e:	3302      	adds	r3, #2
 800c830:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Val_Offset = Val_Offset;
 800c834:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800c838:	1cfa      	adds	r2, r7, #3
 800c83a:	7812      	ldrb	r2, [r2, #0]
 800c83c:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 800c83e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800c842:	3301      	adds	r3, #1
 800c844:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Char_Value_Length = Char_Value_Length;
 800c848:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800c84c:	1cba      	adds	r2, r7, #2
 800c84e:	7812      	ldrb	r2, [r2, #0]
 800c850:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 800c852:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800c856:	3301      	adds	r3, #1
 800c858:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->Char_Value, (const void*)Char_Value, Char_Value_Length );
 800c85c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800c860:	1d98      	adds	r0, r3, #6
 800c862:	1cbb      	adds	r3, r7, #2
 800c864:	781b      	ldrb	r3, [r3, #0]
 800c866:	461a      	mov	r2, r3
 800c868:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 800c86c:	f000 f9ea 	bl	800cc44 <Osal_MemCpy>
  index_input += Char_Value_Length;
 800c870:	1cbb      	adds	r3, r7, #2
 800c872:	781b      	ldrb	r3, [r3, #0]
 800c874:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800c878:	4413      	add	r3, r2
 800c87a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800c87e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800c882:	2218      	movs	r2, #24
 800c884:	2100      	movs	r1, #0
 800c886:	4618      	mov	r0, r3
 800c888:	f000 f9ec 	bl	800cc64 <Osal_MemSet>
  rq.ogf = 0x3f;
 800c88c:	233f      	movs	r3, #63	; 0x3f
 800c88e:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x106;
 800c892:	f44f 7383 	mov.w	r3, #262	; 0x106
 800c896:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800c89a:	f107 0310 	add.w	r3, r7, #16
 800c89e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800c8a2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800c8a6:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800c8aa:	f107 030f 	add.w	r3, r7, #15
 800c8ae:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800c8b2:	2301      	movs	r3, #1
 800c8b4:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800c8b8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800c8bc:	2100      	movs	r1, #0
 800c8be:	4618      	mov	r0, r3
 800c8c0:	f000 fa78 	bl	800cdb4 <hci_send_req>
 800c8c4:	4603      	mov	r3, r0
 800c8c6:	2b00      	cmp	r3, #0
 800c8c8:	da01      	bge.n	800c8ce <aci_gatt_update_char_value+0xfe>
    return BLE_STATUS_TIMEOUT;
 800c8ca:	23ff      	movs	r3, #255	; 0xff
 800c8cc:	e002      	b.n	800c8d4 <aci_gatt_update_char_value+0x104>
  return status;
 800c8ce:	f107 030f 	add.w	r3, r7, #15
 800c8d2:	781b      	ldrb	r3, [r3, #0]
}
 800c8d4:	4618      	mov	r0, r3
 800c8d6:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800c8da:	46bd      	mov	sp, r7
 800c8dc:	bdb0      	pop	{r4, r5, r7, pc}

0800c8de <aci_hal_write_config_data>:
}

tBleStatus aci_hal_write_config_data( uint8_t Offset,
                                      uint8_t Length,
                                      const uint8_t* Value )
{
 800c8de:	b580      	push	{r7, lr}
 800c8e0:	b0cc      	sub	sp, #304	; 0x130
 800c8e2:	af00      	add	r7, sp, #0
 800c8e4:	463b      	mov	r3, r7
 800c8e6:	601a      	str	r2, [r3, #0]
 800c8e8:	1dfb      	adds	r3, r7, #7
 800c8ea:	4602      	mov	r2, r0
 800c8ec:	701a      	strb	r2, [r3, #0]
 800c8ee:	1dbb      	adds	r3, r7, #6
 800c8f0:	460a      	mov	r2, r1
 800c8f2:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_write_config_data_cp0 *cp0 = (aci_hal_write_config_data_cp0*)(cmd_buffer);
 800c8f4:	f107 0310 	add.w	r3, r7, #16
 800c8f8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800c8fc:	f107 030f 	add.w	r3, r7, #15
 800c900:	2200      	movs	r2, #0
 800c902:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800c904:	2300      	movs	r3, #0
 800c906:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Offset = Offset;
 800c90a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800c90e:	1dfa      	adds	r2, r7, #7
 800c910:	7812      	ldrb	r2, [r2, #0]
 800c912:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800c914:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800c918:	3301      	adds	r3, #1
 800c91a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Length = Length;
 800c91e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800c922:	1dba      	adds	r2, r7, #6
 800c924:	7812      	ldrb	r2, [r2, #0]
 800c926:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800c928:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800c92c:	3301      	adds	r3, #1
 800c92e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->Value, (const void*)Value, Length );
 800c932:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800c936:	1c98      	adds	r0, r3, #2
 800c938:	1dbb      	adds	r3, r7, #6
 800c93a:	781a      	ldrb	r2, [r3, #0]
 800c93c:	463b      	mov	r3, r7
 800c93e:	6819      	ldr	r1, [r3, #0]
 800c940:	f000 f980 	bl	800cc44 <Osal_MemCpy>
  index_input += Length;
 800c944:	1dbb      	adds	r3, r7, #6
 800c946:	781b      	ldrb	r3, [r3, #0]
 800c948:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800c94c:	4413      	add	r3, r2
 800c94e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800c952:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800c956:	2218      	movs	r2, #24
 800c958:	2100      	movs	r1, #0
 800c95a:	4618      	mov	r0, r3
 800c95c:	f000 f982 	bl	800cc64 <Osal_MemSet>
  rq.ogf = 0x3f;
 800c960:	233f      	movs	r3, #63	; 0x3f
 800c962:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x00c;
 800c966:	230c      	movs	r3, #12
 800c968:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800c96c:	f107 0310 	add.w	r3, r7, #16
 800c970:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800c974:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800c978:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800c97c:	f107 030f 	add.w	r3, r7, #15
 800c980:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800c984:	2301      	movs	r3, #1
 800c986:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800c98a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800c98e:	2100      	movs	r1, #0
 800c990:	4618      	mov	r0, r3
 800c992:	f000 fa0f 	bl	800cdb4 <hci_send_req>
 800c996:	4603      	mov	r3, r0
 800c998:	2b00      	cmp	r3, #0
 800c99a:	da01      	bge.n	800c9a0 <aci_hal_write_config_data+0xc2>
    return BLE_STATUS_TIMEOUT;
 800c99c:	23ff      	movs	r3, #255	; 0xff
 800c99e:	e002      	b.n	800c9a6 <aci_hal_write_config_data+0xc8>
  return status;
 800c9a0:	f107 030f 	add.w	r3, r7, #15
 800c9a4:	781b      	ldrb	r3, [r3, #0]
}
 800c9a6:	4618      	mov	r0, r3
 800c9a8:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800c9ac:	46bd      	mov	sp, r7
 800c9ae:	bd80      	pop	{r7, pc}

0800c9b0 <aci_hal_set_tx_power_level>:
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_tx_power_level( uint8_t En_High_Power,
                                       uint8_t PA_Level )
{
 800c9b0:	b580      	push	{r7, lr}
 800c9b2:	b0cc      	sub	sp, #304	; 0x130
 800c9b4:	af00      	add	r7, sp, #0
 800c9b6:	4602      	mov	r2, r0
 800c9b8:	1dfb      	adds	r3, r7, #7
 800c9ba:	701a      	strb	r2, [r3, #0]
 800c9bc:	1dbb      	adds	r3, r7, #6
 800c9be:	460a      	mov	r2, r1
 800c9c0:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_tx_power_level_cp0 *cp0 = (aci_hal_set_tx_power_level_cp0*)(cmd_buffer);
 800c9c2:	f107 0310 	add.w	r3, r7, #16
 800c9c6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800c9ca:	f107 030f 	add.w	r3, r7, #15
 800c9ce:	2200      	movs	r2, #0
 800c9d0:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800c9d2:	2300      	movs	r3, #0
 800c9d4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->En_High_Power = En_High_Power;
 800c9d8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800c9dc:	1dfa      	adds	r2, r7, #7
 800c9de:	7812      	ldrb	r2, [r2, #0]
 800c9e0:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800c9e2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800c9e6:	3301      	adds	r3, #1
 800c9e8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->PA_Level = PA_Level;
 800c9ec:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800c9f0:	1dba      	adds	r2, r7, #6
 800c9f2:	7812      	ldrb	r2, [r2, #0]
 800c9f4:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800c9f6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800c9fa:	3301      	adds	r3, #1
 800c9fc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800ca00:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800ca04:	2218      	movs	r2, #24
 800ca06:	2100      	movs	r1, #0
 800ca08:	4618      	mov	r0, r3
 800ca0a:	f000 f92b 	bl	800cc64 <Osal_MemSet>
  rq.ogf = 0x3f;
 800ca0e:	233f      	movs	r3, #63	; 0x3f
 800ca10:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x00f;
 800ca14:	230f      	movs	r3, #15
 800ca16:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800ca1a:	f107 0310 	add.w	r3, r7, #16
 800ca1e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800ca22:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800ca26:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800ca2a:	f107 030f 	add.w	r3, r7, #15
 800ca2e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800ca32:	2301      	movs	r3, #1
 800ca34:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800ca38:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800ca3c:	2100      	movs	r1, #0
 800ca3e:	4618      	mov	r0, r3
 800ca40:	f000 f9b8 	bl	800cdb4 <hci_send_req>
 800ca44:	4603      	mov	r3, r0
 800ca46:	2b00      	cmp	r3, #0
 800ca48:	da01      	bge.n	800ca4e <aci_hal_set_tx_power_level+0x9e>
    return BLE_STATUS_TIMEOUT;
 800ca4a:	23ff      	movs	r3, #255	; 0xff
 800ca4c:	e002      	b.n	800ca54 <aci_hal_set_tx_power_level+0xa4>
  return status;
 800ca4e:	f107 030f 	add.w	r3, r7, #15
 800ca52:	781b      	ldrb	r3, [r3, #0]
}
 800ca54:	4618      	mov	r0, r3
 800ca56:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800ca5a:	46bd      	mov	sp, r7
 800ca5c:	bd80      	pop	{r7, pc}

0800ca5e <hci_reset>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus hci_reset( void )
{
 800ca5e:	b580      	push	{r7, lr}
 800ca60:	b088      	sub	sp, #32
 800ca62:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 800ca64:	2300      	movs	r3, #0
 800ca66:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800ca68:	f107 0308 	add.w	r3, r7, #8
 800ca6c:	2218      	movs	r2, #24
 800ca6e:	2100      	movs	r1, #0
 800ca70:	4618      	mov	r0, r3
 800ca72:	f000 f8f7 	bl	800cc64 <Osal_MemSet>
  rq.ogf = 0x03;
 800ca76:	2303      	movs	r3, #3
 800ca78:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x003;
 800ca7a:	2303      	movs	r3, #3
 800ca7c:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 800ca7e:	1dfb      	adds	r3, r7, #7
 800ca80:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 800ca82:	2301      	movs	r3, #1
 800ca84:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 800ca86:	f107 0308 	add.w	r3, r7, #8
 800ca8a:	2100      	movs	r1, #0
 800ca8c:	4618      	mov	r0, r3
 800ca8e:	f000 f991 	bl	800cdb4 <hci_send_req>
 800ca92:	4603      	mov	r3, r0
 800ca94:	2b00      	cmp	r3, #0
 800ca96:	da01      	bge.n	800ca9c <hci_reset+0x3e>
    return BLE_STATUS_TIMEOUT;
 800ca98:	23ff      	movs	r3, #255	; 0xff
 800ca9a:	e000      	b.n	800ca9e <hci_reset+0x40>
  return status;
 800ca9c:	79fb      	ldrb	r3, [r7, #7]
}
 800ca9e:	4618      	mov	r0, r3
 800caa0:	3720      	adds	r7, #32
 800caa2:	46bd      	mov	sp, r7
 800caa4:	bd80      	pop	{r7, pc}

0800caa6 <hci_le_read_phy>:
}

tBleStatus hci_le_read_phy( uint16_t Connection_Handle,
                            uint8_t* TX_PHY,
                            uint8_t* RX_PHY )
{
 800caa6:	b580      	push	{r7, lr}
 800caa8:	b0ce      	sub	sp, #312	; 0x138
 800caaa:	af00      	add	r7, sp, #0
 800caac:	f107 0308 	add.w	r3, r7, #8
 800cab0:	6019      	str	r1, [r3, #0]
 800cab2:	1d3b      	adds	r3, r7, #4
 800cab4:	601a      	str	r2, [r3, #0]
 800cab6:	f107 030e 	add.w	r3, r7, #14
 800caba:	4602      	mov	r2, r0
 800cabc:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  hci_le_read_phy_cp0 *cp0 = (hci_le_read_phy_cp0*)(cmd_buffer);
 800cabe:	f107 0318 	add.w	r3, r7, #24
 800cac2:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  hci_le_read_phy_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 800cac6:	f107 0310 	add.w	r3, r7, #16
 800caca:	2205      	movs	r2, #5
 800cacc:	2100      	movs	r1, #0
 800cace:	4618      	mov	r0, r3
 800cad0:	f000 f8c8 	bl	800cc64 <Osal_MemSet>
  int index_input = 0;
 800cad4:	2300      	movs	r3, #0
 800cad6:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Connection_Handle = Connection_Handle;
 800cada:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800cade:	f107 020e 	add.w	r2, r7, #14
 800cae2:	8812      	ldrh	r2, [r2, #0]
 800cae4:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800cae6:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800caea:	3302      	adds	r3, #2
 800caec:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800caf0:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800caf4:	2218      	movs	r2, #24
 800caf6:	2100      	movs	r1, #0
 800caf8:	4618      	mov	r0, r3
 800cafa:	f000 f8b3 	bl	800cc64 <Osal_MemSet>
  rq.ogf = 0x08;
 800cafe:	2308      	movs	r3, #8
 800cb00:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
  rq.ocf = 0x030;
 800cb04:	2330      	movs	r3, #48	; 0x30
 800cb06:	f8a7 311a 	strh.w	r3, [r7, #282]	; 0x11a
  rq.cparam = cmd_buffer;
 800cb0a:	f107 0318 	add.w	r3, r7, #24
 800cb0e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.clen = index_input;
 800cb12:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800cb16:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  rq.rparam = &resp;
 800cb1a:	f107 0310 	add.w	r3, r7, #16
 800cb1e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  rq.rlen = sizeof(resp);
 800cb22:	2305      	movs	r3, #5
 800cb24:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if ( hci_send_req(&rq, FALSE) < 0 )
 800cb28:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800cb2c:	2100      	movs	r1, #0
 800cb2e:	4618      	mov	r0, r3
 800cb30:	f000 f940 	bl	800cdb4 <hci_send_req>
 800cb34:	4603      	mov	r3, r0
 800cb36:	2b00      	cmp	r3, #0
 800cb38:	da01      	bge.n	800cb3e <hci_le_read_phy+0x98>
    return BLE_STATUS_TIMEOUT;
 800cb3a:	23ff      	movs	r3, #255	; 0xff
 800cb3c:	e016      	b.n	800cb6c <hci_le_read_phy+0xc6>
  if ( resp.Status )
 800cb3e:	f107 0310 	add.w	r3, r7, #16
 800cb42:	781b      	ldrb	r3, [r3, #0]
 800cb44:	2b00      	cmp	r3, #0
 800cb46:	d003      	beq.n	800cb50 <hci_le_read_phy+0xaa>
    return resp.Status;
 800cb48:	f107 0310 	add.w	r3, r7, #16
 800cb4c:	781b      	ldrb	r3, [r3, #0]
 800cb4e:	e00d      	b.n	800cb6c <hci_le_read_phy+0xc6>
  *TX_PHY = resp.TX_PHY;
 800cb50:	f107 0310 	add.w	r3, r7, #16
 800cb54:	78da      	ldrb	r2, [r3, #3]
 800cb56:	f107 0308 	add.w	r3, r7, #8
 800cb5a:	681b      	ldr	r3, [r3, #0]
 800cb5c:	701a      	strb	r2, [r3, #0]
  *RX_PHY = resp.RX_PHY;
 800cb5e:	f107 0310 	add.w	r3, r7, #16
 800cb62:	791a      	ldrb	r2, [r3, #4]
 800cb64:	1d3b      	adds	r3, r7, #4
 800cb66:	681b      	ldr	r3, [r3, #0]
 800cb68:	701a      	strb	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 800cb6a:	2300      	movs	r3, #0
}
 800cb6c:	4618      	mov	r0, r3
 800cb6e:	f507 779c 	add.w	r7, r7, #312	; 0x138
 800cb72:	46bd      	mov	sp, r7
 800cb74:	bd80      	pop	{r7, pc}

0800cb76 <hci_le_set_default_phy>:

tBleStatus hci_le_set_default_phy( uint8_t ALL_PHYS,
                                   uint8_t TX_PHYS,
                                   uint8_t RX_PHYS )
{
 800cb76:	b590      	push	{r4, r7, lr}
 800cb78:	b0cd      	sub	sp, #308	; 0x134
 800cb7a:	af00      	add	r7, sp, #0
 800cb7c:	4604      	mov	r4, r0
 800cb7e:	4608      	mov	r0, r1
 800cb80:	4611      	mov	r1, r2
 800cb82:	1dfb      	adds	r3, r7, #7
 800cb84:	4622      	mov	r2, r4
 800cb86:	701a      	strb	r2, [r3, #0]
 800cb88:	1dbb      	adds	r3, r7, #6
 800cb8a:	4602      	mov	r2, r0
 800cb8c:	701a      	strb	r2, [r3, #0]
 800cb8e:	1d7b      	adds	r3, r7, #5
 800cb90:	460a      	mov	r2, r1
 800cb92:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  hci_le_set_default_phy_cp0 *cp0 = (hci_le_set_default_phy_cp0*)(cmd_buffer);
 800cb94:	f107 0310 	add.w	r3, r7, #16
 800cb98:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800cb9c:	f107 030f 	add.w	r3, r7, #15
 800cba0:	2200      	movs	r2, #0
 800cba2:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800cba4:	2300      	movs	r3, #0
 800cba6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->ALL_PHYS = ALL_PHYS;
 800cbaa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800cbae:	1dfa      	adds	r2, r7, #7
 800cbb0:	7812      	ldrb	r2, [r2, #0]
 800cbb2:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800cbb4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800cbb8:	3301      	adds	r3, #1
 800cbba:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->TX_PHYS = TX_PHYS;
 800cbbe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800cbc2:	1dba      	adds	r2, r7, #6
 800cbc4:	7812      	ldrb	r2, [r2, #0]
 800cbc6:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800cbc8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800cbcc:	3301      	adds	r3, #1
 800cbce:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->RX_PHYS = RX_PHYS;
 800cbd2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800cbd6:	1d7a      	adds	r2, r7, #5
 800cbd8:	7812      	ldrb	r2, [r2, #0]
 800cbda:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800cbdc:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800cbe0:	3301      	adds	r3, #1
 800cbe2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800cbe6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800cbea:	2218      	movs	r2, #24
 800cbec:	2100      	movs	r1, #0
 800cbee:	4618      	mov	r0, r3
 800cbf0:	f000 f838 	bl	800cc64 <Osal_MemSet>
  rq.ogf = 0x08;
 800cbf4:	2308      	movs	r3, #8
 800cbf6:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x031;
 800cbfa:	2331      	movs	r3, #49	; 0x31
 800cbfc:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800cc00:	f107 0310 	add.w	r3, r7, #16
 800cc04:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800cc08:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800cc0c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800cc10:	f107 030f 	add.w	r3, r7, #15
 800cc14:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800cc18:	2301      	movs	r3, #1
 800cc1a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800cc1e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800cc22:	2100      	movs	r1, #0
 800cc24:	4618      	mov	r0, r3
 800cc26:	f000 f8c5 	bl	800cdb4 <hci_send_req>
 800cc2a:	4603      	mov	r3, r0
 800cc2c:	2b00      	cmp	r3, #0
 800cc2e:	da01      	bge.n	800cc34 <hci_le_set_default_phy+0xbe>
    return BLE_STATUS_TIMEOUT;
 800cc30:	23ff      	movs	r3, #255	; 0xff
 800cc32:	e002      	b.n	800cc3a <hci_le_set_default_phy+0xc4>
  return status;
 800cc34:	f107 030f 	add.w	r3, r7, #15
 800cc38:	781b      	ldrb	r3, [r3, #0]
}
 800cc3a:	4618      	mov	r0, r3
 800cc3c:	f507 779a 	add.w	r7, r7, #308	; 0x134
 800cc40:	46bd      	mov	sp, r7
 800cc42:	bd90      	pop	{r4, r7, pc}

0800cc44 <Osal_MemCpy>:
 * Osal_MemCpy
 * 
 */
 
void* Osal_MemCpy( void *dest, const void *src, unsigned int size )
{
 800cc44:	b580      	push	{r7, lr}
 800cc46:	b084      	sub	sp, #16
 800cc48:	af00      	add	r7, sp, #0
 800cc4a:	60f8      	str	r0, [r7, #12]
 800cc4c:	60b9      	str	r1, [r7, #8]
 800cc4e:	607a      	str	r2, [r7, #4]
  return memcpy( dest, src, size ); 
 800cc50:	687a      	ldr	r2, [r7, #4]
 800cc52:	68b9      	ldr	r1, [r7, #8]
 800cc54:	68f8      	ldr	r0, [r7, #12]
 800cc56:	f005 fe57 	bl	8012908 <memcpy>
 800cc5a:	4603      	mov	r3, r0
}
 800cc5c:	4618      	mov	r0, r3
 800cc5e:	3710      	adds	r7, #16
 800cc60:	46bd      	mov	sp, r7
 800cc62:	bd80      	pop	{r7, pc}

0800cc64 <Osal_MemSet>:
 * Osal_MemSet
 * 
 */
 
void* Osal_MemSet( void *ptr, int value, unsigned int size )
{
 800cc64:	b580      	push	{r7, lr}
 800cc66:	b084      	sub	sp, #16
 800cc68:	af00      	add	r7, sp, #0
 800cc6a:	60f8      	str	r0, [r7, #12]
 800cc6c:	60b9      	str	r1, [r7, #8]
 800cc6e:	607a      	str	r2, [r7, #4]
  return memset( ptr, value, size );
 800cc70:	687a      	ldr	r2, [r7, #4]
 800cc72:	68b9      	ldr	r1, [r7, #8]
 800cc74:	68f8      	ldr	r0, [r7, #12]
 800cc76:	f005 fe52 	bl	801291e <memset>
 800cc7a:	4603      	mov	r3, r0
}
 800cc7c:	4618      	mov	r0, r3
 800cc7e:	3710      	adds	r7, #16
 800cc80:	46bd      	mov	sp, r7
 800cc82:	bd80      	pop	{r7, pc}

0800cc84 <SHCI_C2_BLE_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_BLE_Init( SHCI_C2_Ble_Init_Cmd_Packet_t *pCmdPacket )
{
 800cc84:	b580      	push	{r7, lr}
 800cc86:	b088      	sub	sp, #32
 800cc88:	af00      	add	r7, sp, #0
 800cc8a:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CS_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 800cc8c:	f107 030c 	add.w	r3, r7, #12
 800cc90:	61fb      	str	r3, [r7, #28]

 shci_send( SHCI_OPCODE_C2_BLE_INIT,
            sizeof( SHCI_C2_Ble_Init_Cmd_Param_t ),
            (uint8_t*)&pCmdPacket->Param,
 800cc92:	687b      	ldr	r3, [r7, #4]
 800cc94:	f103 020c 	add.w	r2, r3, #12
 shci_send( SHCI_OPCODE_C2_BLE_INIT,
 800cc98:	69fb      	ldr	r3, [r7, #28]
 800cc9a:	2121      	movs	r1, #33	; 0x21
 800cc9c:	f64f 4066 	movw	r0, #64614	; 0xfc66
 800cca0:	f000 fa1e 	bl	800d0e0 <shci_send>
            p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 800cca4:	69fb      	ldr	r3, [r7, #28]
 800cca6:	330b      	adds	r3, #11
 800cca8:	78db      	ldrb	r3, [r3, #3]
}
 800ccaa:	4618      	mov	r0, r3
 800ccac:	3720      	adds	r7, #32
 800ccae:	46bd      	mov	sp, r7
 800ccb0:	bd80      	pop	{r7, pc}

0800ccb2 <SHCI_C2_DEBUG_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_DEBUG_Init( SHCI_C2_DEBUG_Init_Cmd_Packet_t *pCmdPacket  )
{
 800ccb2:	b580      	push	{r7, lr}
 800ccb4:	b088      	sub	sp, #32
 800ccb6:	af00      	add	r7, sp, #0
 800ccb8:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CS_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 800ccba:	f107 030c 	add.w	r3, r7, #12
 800ccbe:	61fb      	str	r3, [r7, #28]

  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
             sizeof( SHCI_C2_DEBUG_init_Cmd_Param_t ),
             (uint8_t*)&pCmdPacket->Param,
 800ccc0:	687b      	ldr	r3, [r7, #4]
 800ccc2:	f103 020c 	add.w	r2, r3, #12
  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
 800ccc6:	69fb      	ldr	r3, [r7, #28]
 800ccc8:	210f      	movs	r1, #15
 800ccca:	f64f 4068 	movw	r0, #64616	; 0xfc68
 800ccce:	f000 fa07 	bl	800d0e0 <shci_send>
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 800ccd2:	69fb      	ldr	r3, [r7, #28]
 800ccd4:	330b      	adds	r3, #11
 800ccd6:	78db      	ldrb	r3, [r3, #3]
}
 800ccd8:	4618      	mov	r0, r3
 800ccda:	3720      	adds	r7, #32
 800ccdc:	46bd      	mov	sp, r7
 800ccde:	bd80      	pop	{r7, pc}

0800cce0 <hci_init>:
static void TlEvtReceived(TL_EvtPacket_t *hcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void hci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 800cce0:	b580      	push	{r7, lr}
 800cce2:	b082      	sub	sp, #8
 800cce4:	af00      	add	r7, sp, #0
 800cce6:	6078      	str	r0, [r7, #4]
 800cce8:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((HCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 800ccea:	683b      	ldr	r3, [r7, #0]
 800ccec:	685b      	ldr	r3, [r3, #4]
 800ccee:	4a08      	ldr	r2, [pc, #32]	; (800cd10 <hci_init+0x30>)
 800ccf0:	6013      	str	r3, [r2, #0]
  hciContext.UserEvtRx = UserEvtRx;
 800ccf2:	4a08      	ldr	r2, [pc, #32]	; (800cd14 <hci_init+0x34>)
 800ccf4:	687b      	ldr	r3, [r7, #4]
 800ccf6:	61d3      	str	r3, [r2, #28]

  hci_register_io_bus (&hciContext.io);
 800ccf8:	4806      	ldr	r0, [pc, #24]	; (800cd14 <hci_init+0x34>)
 800ccfa:	f000 f973 	bl	800cfe4 <hci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((HCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 800ccfe:	683b      	ldr	r3, [r7, #0]
 800cd00:	681b      	ldr	r3, [r3, #0]
 800cd02:	4618      	mov	r0, r3
 800cd04:	f000 f8d4 	bl	800ceb0 <TlInit>

  return;
 800cd08:	bf00      	nop
}
 800cd0a:	3708      	adds	r7, #8
 800cd0c:	46bd      	mov	sp, r7
 800cd0e:	bd80      	pop	{r7, pc}
 800cd10:	20000418 	.word	0x20000418
 800cd14:	200003f0 	.word	0x200003f0

0800cd18 <hci_user_evt_proc>:

void hci_user_evt_proc(void)
{
 800cd18:	b580      	push	{r7, lr}
 800cd1a:	b084      	sub	sp, #16
 800cd1c:	af00      	add	r7, sp, #0
  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 800cd1e:	4822      	ldr	r0, [pc, #136]	; (800cda8 <hci_user_evt_proc+0x90>)
 800cd20:	f000 ff04 	bl	800db2c <LST_is_empty>
 800cd24:	4603      	mov	r3, r0
 800cd26:	2b00      	cmp	r3, #0
 800cd28:	d12b      	bne.n	800cd82 <hci_user_evt_proc+0x6a>
 800cd2a:	4b20      	ldr	r3, [pc, #128]	; (800cdac <hci_user_evt_proc+0x94>)
 800cd2c:	781b      	ldrb	r3, [r3, #0]
 800cd2e:	2b00      	cmp	r3, #0
 800cd30:	d027      	beq.n	800cd82 <hci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &HciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 800cd32:	f107 030c 	add.w	r3, r7, #12
 800cd36:	4619      	mov	r1, r3
 800cd38:	481b      	ldr	r0, [pc, #108]	; (800cda8 <hci_user_evt_proc+0x90>)
 800cd3a:	f000 ff7e 	bl	800dc3a <LST_remove_head>

    if (hciContext.UserEvtRx != NULL)
 800cd3e:	4b1c      	ldr	r3, [pc, #112]	; (800cdb0 <hci_user_evt_proc+0x98>)
 800cd40:	69db      	ldr	r3, [r3, #28]
 800cd42:	2b00      	cmp	r3, #0
 800cd44:	d00c      	beq.n	800cd60 <hci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 800cd46:	68fb      	ldr	r3, [r7, #12]
 800cd48:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = HCI_TL_UserEventFlow_Enable;
 800cd4a:	2301      	movs	r3, #1
 800cd4c:	713b      	strb	r3, [r7, #4]
      hciContext.UserEvtRx((void *)&UserEvtRxParam);
 800cd4e:	4b18      	ldr	r3, [pc, #96]	; (800cdb0 <hci_user_evt_proc+0x98>)
 800cd50:	69db      	ldr	r3, [r3, #28]
 800cd52:	1d3a      	adds	r2, r7, #4
 800cd54:	4610      	mov	r0, r2
 800cd56:	4798      	blx	r3
      UserEventFlow = UserEvtRxParam.status;
 800cd58:	793a      	ldrb	r2, [r7, #4]
 800cd5a:	4b14      	ldr	r3, [pc, #80]	; (800cdac <hci_user_evt_proc+0x94>)
 800cd5c:	701a      	strb	r2, [r3, #0]
 800cd5e:	e002      	b.n	800cd66 <hci_user_evt_proc+0x4e>
    }
    else
    {
      UserEventFlow = HCI_TL_UserEventFlow_Enable;
 800cd60:	4b12      	ldr	r3, [pc, #72]	; (800cdac <hci_user_evt_proc+0x94>)
 800cd62:	2201      	movs	r2, #1
 800cd64:	701a      	strb	r2, [r3, #0]
    }

    if(UserEventFlow != HCI_TL_UserEventFlow_Disable)
 800cd66:	4b11      	ldr	r3, [pc, #68]	; (800cdac <hci_user_evt_proc+0x94>)
 800cd68:	781b      	ldrb	r3, [r3, #0]
 800cd6a:	2b00      	cmp	r3, #0
 800cd6c:	d004      	beq.n	800cd78 <hci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 800cd6e:	68fb      	ldr	r3, [r7, #12]
 800cd70:	4618      	mov	r0, r3
 800cd72:	f000 fc03 	bl	800d57c <TL_MM_EvtDone>
 800cd76:	e004      	b.n	800cd82 <hci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &HciAsynchEventQueue, (tListNode *)phcievtbuffer );
 800cd78:	68fb      	ldr	r3, [r7, #12]
 800cd7a:	4619      	mov	r1, r3
 800cd7c:	480a      	ldr	r0, [pc, #40]	; (800cda8 <hci_user_evt_proc+0x90>)
 800cd7e:	f000 fef5 	bl	800db6c <LST_insert_head>
    }
  }

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 800cd82:	4809      	ldr	r0, [pc, #36]	; (800cda8 <hci_user_evt_proc+0x90>)
 800cd84:	f000 fed2 	bl	800db2c <LST_is_empty>
 800cd88:	4603      	mov	r3, r0
 800cd8a:	2b00      	cmp	r3, #0
 800cd8c:	d107      	bne.n	800cd9e <hci_user_evt_proc+0x86>
 800cd8e:	4b07      	ldr	r3, [pc, #28]	; (800cdac <hci_user_evt_proc+0x94>)
 800cd90:	781b      	ldrb	r3, [r3, #0]
 800cd92:	2b00      	cmp	r3, #0
 800cd94:	d003      	beq.n	800cd9e <hci_user_evt_proc+0x86>
  {
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue);
 800cd96:	4804      	ldr	r0, [pc, #16]	; (800cda8 <hci_user_evt_proc+0x90>)
 800cd98:	f7f4 fb7c 	bl	8001494 <hci_notify_asynch_evt>
  }


  return;
 800cd9c:	bf00      	nop
 800cd9e:	bf00      	nop
}
 800cda0:	3710      	adds	r7, #16
 800cda2:	46bd      	mov	sp, r7
 800cda4:	bd80      	pop	{r7, pc}
 800cda6:	bf00      	nop
 800cda8:	2000038c 	.word	0x2000038c
 800cdac:	20000398 	.word	0x20000398
 800cdb0:	200003f0 	.word	0x200003f0

0800cdb4 <hci_send_req>:

  return;
}

int hci_send_req(struct hci_request *p_cmd, uint8_t async)
{
 800cdb4:	b580      	push	{r7, lr}
 800cdb6:	b088      	sub	sp, #32
 800cdb8:	af00      	add	r7, sp, #0
 800cdba:	6078      	str	r0, [r7, #4]
 800cdbc:	460b      	mov	r3, r1
 800cdbe:	70fb      	strb	r3, [r7, #3]
  TL_CsEvt_t    *pcommand_status_event;
  TL_EvtPacket_t *pevtpacket;
  uint8_t hci_cmd_complete_return_parameters_length;
  HCI_TL_CmdStatus_t local_cmd_status;

  NotifyCmdStatus(HCI_TL_CmdBusy);
 800cdc0:	2000      	movs	r0, #0
 800cdc2:	f000 f8cb 	bl	800cf5c <NotifyCmdStatus>
  local_cmd_status = HCI_TL_CmdBusy;
 800cdc6:	2300      	movs	r3, #0
 800cdc8:	77fb      	strb	r3, [r7, #31]
  opcode = ((p_cmd->ocf) & 0x03ff) | ((p_cmd->ogf) << 10);
 800cdca:	687b      	ldr	r3, [r7, #4]
 800cdcc:	885b      	ldrh	r3, [r3, #2]
 800cdce:	b21b      	sxth	r3, r3
 800cdd0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800cdd4:	b21a      	sxth	r2, r3
 800cdd6:	687b      	ldr	r3, [r7, #4]
 800cdd8:	881b      	ldrh	r3, [r3, #0]
 800cdda:	029b      	lsls	r3, r3, #10
 800cddc:	b21b      	sxth	r3, r3
 800cdde:	4313      	orrs	r3, r2
 800cde0:	b21b      	sxth	r3, r3
 800cde2:	83bb      	strh	r3, [r7, #28]
  SendCmd(opcode, p_cmd->clen, p_cmd->cparam);
 800cde4:	687b      	ldr	r3, [r7, #4]
 800cde6:	68db      	ldr	r3, [r3, #12]
 800cde8:	b2d9      	uxtb	r1, r3
 800cdea:	687b      	ldr	r3, [r7, #4]
 800cdec:	689a      	ldr	r2, [r3, #8]
 800cdee:	8bbb      	ldrh	r3, [r7, #28]
 800cdf0:	4618      	mov	r0, r3
 800cdf2:	f000 f88d 	bl	800cf10 <SendCmd>

  while(local_cmd_status == HCI_TL_CmdBusy)
 800cdf6:	e04e      	b.n	800ce96 <hci_send_req+0xe2>
  {
    hci_cmd_resp_wait(HCI_TL_DEFAULT_TIMEOUT);
 800cdf8:	f248 00e8 	movw	r0, #33000	; 0x80e8
 800cdfc:	f7f4 fb6a 	bl	80014d4 <hci_cmd_resp_wait>

    /**
     * Process Cmd Event
     */
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 800ce00:	e043      	b.n	800ce8a <hci_send_req+0xd6>
    {
      LST_remove_head (&HciCmdEventQueue, (tListNode **)&pevtpacket);
 800ce02:	f107 030c 	add.w	r3, r7, #12
 800ce06:	4619      	mov	r1, r3
 800ce08:	4828      	ldr	r0, [pc, #160]	; (800ceac <hci_send_req+0xf8>)
 800ce0a:	f000 ff16 	bl	800dc3a <LST_remove_head>

      if(pevtpacket->evtserial.evt.evtcode == TL_BLEEVT_CS_OPCODE)
 800ce0e:	68fb      	ldr	r3, [r7, #12]
 800ce10:	7a5b      	ldrb	r3, [r3, #9]
 800ce12:	2b0f      	cmp	r3, #15
 800ce14:	d114      	bne.n	800ce40 <hci_send_req+0x8c>
      {
        pcommand_status_event = (TL_CsEvt_t*)pevtpacket->evtserial.evt.payload;
 800ce16:	68fb      	ldr	r3, [r7, #12]
 800ce18:	330b      	adds	r3, #11
 800ce1a:	613b      	str	r3, [r7, #16]
        if(pcommand_status_event->cmdcode == opcode)
 800ce1c:	693b      	ldr	r3, [r7, #16]
 800ce1e:	885b      	ldrh	r3, [r3, #2]
 800ce20:	b29b      	uxth	r3, r3
 800ce22:	8bba      	ldrh	r2, [r7, #28]
 800ce24:	429a      	cmp	r2, r3
 800ce26:	d104      	bne.n	800ce32 <hci_send_req+0x7e>
        {
          *(uint8_t *)(p_cmd->rparam) = pcommand_status_event->status;
 800ce28:	687b      	ldr	r3, [r7, #4]
 800ce2a:	691b      	ldr	r3, [r3, #16]
 800ce2c:	693a      	ldr	r2, [r7, #16]
 800ce2e:	7812      	ldrb	r2, [r2, #0]
 800ce30:	701a      	strb	r2, [r3, #0]
        }

        if(pcommand_status_event->numcmd != 0)
 800ce32:	693b      	ldr	r3, [r7, #16]
 800ce34:	785b      	ldrb	r3, [r3, #1]
 800ce36:	2b00      	cmp	r3, #0
 800ce38:	d027      	beq.n	800ce8a <hci_send_req+0xd6>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 800ce3a:	2301      	movs	r3, #1
 800ce3c:	77fb      	strb	r3, [r7, #31]
 800ce3e:	e024      	b.n	800ce8a <hci_send_req+0xd6>
        }
      }
      else
      {
        pcommand_complete_event = (TL_CcEvt_t*)pevtpacket->evtserial.evt.payload;
 800ce40:	68fb      	ldr	r3, [r7, #12]
 800ce42:	330b      	adds	r3, #11
 800ce44:	61bb      	str	r3, [r7, #24]

        if(pcommand_complete_event->cmdcode == opcode)
 800ce46:	69bb      	ldr	r3, [r7, #24]
 800ce48:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800ce4c:	b29b      	uxth	r3, r3
 800ce4e:	8bba      	ldrh	r2, [r7, #28]
 800ce50:	429a      	cmp	r2, r3
 800ce52:	d114      	bne.n	800ce7e <hci_send_req+0xca>
        {
          hci_cmd_complete_return_parameters_length = pevtpacket->evtserial.evt.plen - TL_EVT_HDR_SIZE;
 800ce54:	68fb      	ldr	r3, [r7, #12]
 800ce56:	7a9b      	ldrb	r3, [r3, #10]
 800ce58:	3b03      	subs	r3, #3
 800ce5a:	75fb      	strb	r3, [r7, #23]
          p_cmd->rlen = MIN(hci_cmd_complete_return_parameters_length, p_cmd->rlen);
 800ce5c:	687b      	ldr	r3, [r7, #4]
 800ce5e:	695a      	ldr	r2, [r3, #20]
 800ce60:	7dfb      	ldrb	r3, [r7, #23]
 800ce62:	429a      	cmp	r2, r3
 800ce64:	bfa8      	it	ge
 800ce66:	461a      	movge	r2, r3
 800ce68:	687b      	ldr	r3, [r7, #4]
 800ce6a:	615a      	str	r2, [r3, #20]
          memcpy(p_cmd->rparam, pcommand_complete_event->payload, p_cmd->rlen);
 800ce6c:	687b      	ldr	r3, [r7, #4]
 800ce6e:	6918      	ldr	r0, [r3, #16]
 800ce70:	69bb      	ldr	r3, [r7, #24]
 800ce72:	1cd9      	adds	r1, r3, #3
 800ce74:	687b      	ldr	r3, [r7, #4]
 800ce76:	695b      	ldr	r3, [r3, #20]
 800ce78:	461a      	mov	r2, r3
 800ce7a:	f005 fd45 	bl	8012908 <memcpy>
        }

        if(pcommand_complete_event->numcmd != 0)
 800ce7e:	69bb      	ldr	r3, [r7, #24]
 800ce80:	781b      	ldrb	r3, [r3, #0]
 800ce82:	2b00      	cmp	r3, #0
 800ce84:	d001      	beq.n	800ce8a <hci_send_req+0xd6>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 800ce86:	2301      	movs	r3, #1
 800ce88:	77fb      	strb	r3, [r7, #31]
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 800ce8a:	4808      	ldr	r0, [pc, #32]	; (800ceac <hci_send_req+0xf8>)
 800ce8c:	f000 fe4e 	bl	800db2c <LST_is_empty>
 800ce90:	4603      	mov	r3, r0
 800ce92:	2b00      	cmp	r3, #0
 800ce94:	d0b5      	beq.n	800ce02 <hci_send_req+0x4e>
  while(local_cmd_status == HCI_TL_CmdBusy)
 800ce96:	7ffb      	ldrb	r3, [r7, #31]
 800ce98:	2b00      	cmp	r3, #0
 800ce9a:	d0ad      	beq.n	800cdf8 <hci_send_req+0x44>
        }
      }
    }
  }

  NotifyCmdStatus(HCI_TL_CmdAvailable);
 800ce9c:	2001      	movs	r0, #1
 800ce9e:	f000 f85d 	bl	800cf5c <NotifyCmdStatus>

  return 0;
 800cea2:	2300      	movs	r3, #0
}
 800cea4:	4618      	mov	r0, r3
 800cea6:	3720      	adds	r7, #32
 800cea8:	46bd      	mov	sp, r7
 800ceaa:	bd80      	pop	{r7, pc}
 800ceac:	20000410 	.word	0x20000410

0800ceb0 <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 800ceb0:	b580      	push	{r7, lr}
 800ceb2:	b086      	sub	sp, #24
 800ceb4:	af00      	add	r7, sp, #0
 800ceb6:	6078      	str	r0, [r7, #4]
  TL_BLE_InitConf_t Conf;

  /**
   * Always initialize the command event queue
   */
  LST_init_head (&HciCmdEventQueue);
 800ceb8:	480f      	ldr	r0, [pc, #60]	; (800cef8 <TlInit+0x48>)
 800ceba:	f000 fe27 	bl	800db0c <LST_init_head>

  pCmdBuffer = p_cmdbuffer;
 800cebe:	4a0f      	ldr	r2, [pc, #60]	; (800cefc <TlInit+0x4c>)
 800cec0:	687b      	ldr	r3, [r7, #4]
 800cec2:	6013      	str	r3, [r2, #0]

  LST_init_head (&HciAsynchEventQueue);
 800cec4:	480e      	ldr	r0, [pc, #56]	; (800cf00 <TlInit+0x50>)
 800cec6:	f000 fe21 	bl	800db0c <LST_init_head>

  UserEventFlow = HCI_TL_UserEventFlow_Enable;
 800ceca:	4b0e      	ldr	r3, [pc, #56]	; (800cf04 <TlInit+0x54>)
 800cecc:	2201      	movs	r2, #1
 800cece:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (hciContext.io.Init)
 800ced0:	4b0d      	ldr	r3, [pc, #52]	; (800cf08 <TlInit+0x58>)
 800ced2:	681b      	ldr	r3, [r3, #0]
 800ced4:	2b00      	cmp	r3, #0
 800ced6:	d00a      	beq.n	800ceee <TlInit+0x3e>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 800ced8:	687b      	ldr	r3, [r7, #4]
 800ceda:	613b      	str	r3, [r7, #16]
    Conf.IoBusEvtCallBack = TlEvtReceived;
 800cedc:	4b0b      	ldr	r3, [pc, #44]	; (800cf0c <TlInit+0x5c>)
 800cede:	60bb      	str	r3, [r7, #8]
    hciContext.io.Init(&Conf);
 800cee0:	4b09      	ldr	r3, [pc, #36]	; (800cf08 <TlInit+0x58>)
 800cee2:	681b      	ldr	r3, [r3, #0]
 800cee4:	f107 0208 	add.w	r2, r7, #8
 800cee8:	4610      	mov	r0, r2
 800ceea:	4798      	blx	r3
  }

  return;
 800ceec:	bf00      	nop
 800ceee:	bf00      	nop
}
 800cef0:	3718      	adds	r7, #24
 800cef2:	46bd      	mov	sp, r7
 800cef4:	bd80      	pop	{r7, pc}
 800cef6:	bf00      	nop
 800cef8:	20000410 	.word	0x20000410
 800cefc:	20000394 	.word	0x20000394
 800cf00:	2000038c 	.word	0x2000038c
 800cf04:	20000398 	.word	0x20000398
 800cf08:	200003f0 	.word	0x200003f0
 800cf0c:	0800cf9d 	.word	0x0800cf9d

0800cf10 <SendCmd>:

static void SendCmd(uint16_t opcode, uint8_t plen, void *param)
{
 800cf10:	b580      	push	{r7, lr}
 800cf12:	b082      	sub	sp, #8
 800cf14:	af00      	add	r7, sp, #0
 800cf16:	4603      	mov	r3, r0
 800cf18:	603a      	str	r2, [r7, #0]
 800cf1a:	80fb      	strh	r3, [r7, #6]
 800cf1c:	460b      	mov	r3, r1
 800cf1e:	717b      	strb	r3, [r7, #5]
  pCmdBuffer->cmdserial.cmd.cmdcode = opcode;
 800cf20:	4b0c      	ldr	r3, [pc, #48]	; (800cf54 <SendCmd+0x44>)
 800cf22:	681b      	ldr	r3, [r3, #0]
 800cf24:	88fa      	ldrh	r2, [r7, #6]
 800cf26:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = plen;
 800cf2a:	4b0a      	ldr	r3, [pc, #40]	; (800cf54 <SendCmd+0x44>)
 800cf2c:	681b      	ldr	r3, [r3, #0]
 800cf2e:	797a      	ldrb	r2, [r7, #5]
 800cf30:	72da      	strb	r2, [r3, #11]
  memcpy( pCmdBuffer->cmdserial.cmd.payload, param, plen );
 800cf32:	4b08      	ldr	r3, [pc, #32]	; (800cf54 <SendCmd+0x44>)
 800cf34:	681b      	ldr	r3, [r3, #0]
 800cf36:	330c      	adds	r3, #12
 800cf38:	797a      	ldrb	r2, [r7, #5]
 800cf3a:	6839      	ldr	r1, [r7, #0]
 800cf3c:	4618      	mov	r0, r3
 800cf3e:	f005 fce3 	bl	8012908 <memcpy>

  hciContext.io.Send(0,0);
 800cf42:	4b05      	ldr	r3, [pc, #20]	; (800cf58 <SendCmd+0x48>)
 800cf44:	691b      	ldr	r3, [r3, #16]
 800cf46:	2100      	movs	r1, #0
 800cf48:	2000      	movs	r0, #0
 800cf4a:	4798      	blx	r3

  return;
 800cf4c:	bf00      	nop
}
 800cf4e:	3708      	adds	r7, #8
 800cf50:	46bd      	mov	sp, r7
 800cf52:	bd80      	pop	{r7, pc}
 800cf54:	20000394 	.word	0x20000394
 800cf58:	200003f0 	.word	0x200003f0

0800cf5c <NotifyCmdStatus>:

static void NotifyCmdStatus(HCI_TL_CmdStatus_t hcicmdstatus)
{
 800cf5c:	b580      	push	{r7, lr}
 800cf5e:	b082      	sub	sp, #8
 800cf60:	af00      	add	r7, sp, #0
 800cf62:	4603      	mov	r3, r0
 800cf64:	71fb      	strb	r3, [r7, #7]
  if(hcicmdstatus == HCI_TL_CmdBusy)
 800cf66:	79fb      	ldrb	r3, [r7, #7]
 800cf68:	2b00      	cmp	r3, #0
 800cf6a:	d108      	bne.n	800cf7e <NotifyCmdStatus+0x22>
  {
    if(StatusNotCallBackFunction != 0)
 800cf6c:	4b0a      	ldr	r3, [pc, #40]	; (800cf98 <NotifyCmdStatus+0x3c>)
 800cf6e:	681b      	ldr	r3, [r3, #0]
 800cf70:	2b00      	cmp	r3, #0
 800cf72:	d00d      	beq.n	800cf90 <NotifyCmdStatus+0x34>
    {
      StatusNotCallBackFunction(HCI_TL_CmdBusy);
 800cf74:	4b08      	ldr	r3, [pc, #32]	; (800cf98 <NotifyCmdStatus+0x3c>)
 800cf76:	681b      	ldr	r3, [r3, #0]
 800cf78:	2000      	movs	r0, #0
 800cf7a:	4798      	blx	r3
    {
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
    }
  }

  return;
 800cf7c:	e008      	b.n	800cf90 <NotifyCmdStatus+0x34>
    if(StatusNotCallBackFunction != 0)
 800cf7e:	4b06      	ldr	r3, [pc, #24]	; (800cf98 <NotifyCmdStatus+0x3c>)
 800cf80:	681b      	ldr	r3, [r3, #0]
 800cf82:	2b00      	cmp	r3, #0
 800cf84:	d004      	beq.n	800cf90 <NotifyCmdStatus+0x34>
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
 800cf86:	4b04      	ldr	r3, [pc, #16]	; (800cf98 <NotifyCmdStatus+0x3c>)
 800cf88:	681b      	ldr	r3, [r3, #0]
 800cf8a:	2001      	movs	r0, #1
 800cf8c:	4798      	blx	r3
  return;
 800cf8e:	bf00      	nop
 800cf90:	bf00      	nop
}
 800cf92:	3708      	adds	r7, #8
 800cf94:	46bd      	mov	sp, r7
 800cf96:	bd80      	pop	{r7, pc}
 800cf98:	20000418 	.word	0x20000418

0800cf9c <TlEvtReceived>:

static void TlEvtReceived(TL_EvtPacket_t *hcievt)
{
 800cf9c:	b580      	push	{r7, lr}
 800cf9e:	b082      	sub	sp, #8
 800cfa0:	af00      	add	r7, sp, #0
 800cfa2:	6078      	str	r0, [r7, #4]
  if ( ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 800cfa4:	687b      	ldr	r3, [r7, #4]
 800cfa6:	7a5b      	ldrb	r3, [r3, #9]
 800cfa8:	2b0f      	cmp	r3, #15
 800cfaa:	d003      	beq.n	800cfb4 <TlEvtReceived+0x18>
 800cfac:	687b      	ldr	r3, [r7, #4]
 800cfae:	7a5b      	ldrb	r3, [r3, #9]
 800cfb0:	2b0e      	cmp	r3, #14
 800cfb2:	d107      	bne.n	800cfc4 <TlEvtReceived+0x28>
  {
    LST_insert_tail(&HciCmdEventQueue, (tListNode *)hcievt);
 800cfb4:	6879      	ldr	r1, [r7, #4]
 800cfb6:	4809      	ldr	r0, [pc, #36]	; (800cfdc <TlEvtReceived+0x40>)
 800cfb8:	f000 fdfc 	bl	800dbb4 <LST_insert_tail>
    hci_cmd_resp_release(0); /**< Notify the application a full Cmd Event has been received */
 800cfbc:	2000      	movs	r0, #0
 800cfbe:	f7f4 fa79 	bl	80014b4 <hci_cmd_resp_release>
 800cfc2:	e006      	b.n	800cfd2 <TlEvtReceived+0x36>
  }
  else
  {
    LST_insert_tail(&HciAsynchEventQueue, (tListNode *)hcievt);
 800cfc4:	6879      	ldr	r1, [r7, #4]
 800cfc6:	4806      	ldr	r0, [pc, #24]	; (800cfe0 <TlEvtReceived+0x44>)
 800cfc8:	f000 fdf4 	bl	800dbb4 <LST_insert_tail>
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 800cfcc:	4804      	ldr	r0, [pc, #16]	; (800cfe0 <TlEvtReceived+0x44>)
 800cfce:	f7f4 fa61 	bl	8001494 <hci_notify_asynch_evt>
  }

  return;
 800cfd2:	bf00      	nop
}
 800cfd4:	3708      	adds	r7, #8
 800cfd6:	46bd      	mov	sp, r7
 800cfd8:	bd80      	pop	{r7, pc}
 800cfda:	bf00      	nop
 800cfdc:	20000410 	.word	0x20000410
 800cfe0:	2000038c 	.word	0x2000038c

0800cfe4 <hci_register_io_bus>:
#include "hci_tl.h"
#include "tl.h"


void hci_register_io_bus(tHciIO* fops)
{
 800cfe4:	b480      	push	{r7}
 800cfe6:	b083      	sub	sp, #12
 800cfe8:	af00      	add	r7, sp, #0
 800cfea:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_BLE_Init;
 800cfec:	687b      	ldr	r3, [r7, #4]
 800cfee:	4a05      	ldr	r2, [pc, #20]	; (800d004 <hci_register_io_bus+0x20>)
 800cff0:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_BLE_SendCmd;
 800cff2:	687b      	ldr	r3, [r7, #4]
 800cff4:	4a04      	ldr	r2, [pc, #16]	; (800d008 <hci_register_io_bus+0x24>)
 800cff6:	611a      	str	r2, [r3, #16]

  return;
 800cff8:	bf00      	nop
}
 800cffa:	370c      	adds	r7, #12
 800cffc:	46bd      	mov	sp, r7
 800cffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d002:	4770      	bx	lr
 800d004:	0800d2f5 	.word	0x0800d2f5
 800d008:	0800d35d 	.word	0x0800d35d

0800d00c <shci_init>:
static void TlUserEvtReceived(TL_EvtPacket_t *shcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void shci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 800d00c:	b580      	push	{r7, lr}
 800d00e:	b082      	sub	sp, #8
 800d010:	af00      	add	r7, sp, #0
 800d012:	6078      	str	r0, [r7, #4]
 800d014:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((SHCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 800d016:	683b      	ldr	r3, [r7, #0]
 800d018:	685b      	ldr	r3, [r3, #4]
 800d01a:	4a08      	ldr	r2, [pc, #32]	; (800d03c <shci_init+0x30>)
 800d01c:	6013      	str	r3, [r2, #0]
  shciContext.UserEvtRx = UserEvtRx;
 800d01e:	4a08      	ldr	r2, [pc, #32]	; (800d040 <shci_init+0x34>)
 800d020:	687b      	ldr	r3, [r7, #4]
 800d022:	61d3      	str	r3, [r2, #28]

  shci_register_io_bus (&shciContext.io);
 800d024:	4806      	ldr	r0, [pc, #24]	; (800d040 <shci_init+0x34>)
 800d026:	f000 f911 	bl	800d24c <shci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((SHCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 800d02a:	683b      	ldr	r3, [r7, #0]
 800d02c:	681b      	ldr	r3, [r3, #0]
 800d02e:	4618      	mov	r0, r3
 800d030:	f000 f894 	bl	800d15c <TlInit>

  return;
 800d034:	bf00      	nop
}
 800d036:	3708      	adds	r7, #8
 800d038:	46bd      	mov	sp, r7
 800d03a:	bd80      	pop	{r7, pc}
 800d03c:	2000043c 	.word	0x2000043c
 800d040:	2000041c 	.word	0x2000041c

0800d044 <shci_user_evt_proc>:

void shci_user_evt_proc(void)
{
 800d044:	b580      	push	{r7, lr}
 800d046:	b084      	sub	sp, #16
 800d048:	af00      	add	r7, sp, #0

  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */
  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 800d04a:	4822      	ldr	r0, [pc, #136]	; (800d0d4 <shci_user_evt_proc+0x90>)
 800d04c:	f000 fd6e 	bl	800db2c <LST_is_empty>
 800d050:	4603      	mov	r3, r0
 800d052:	2b00      	cmp	r3, #0
 800d054:	d12b      	bne.n	800d0ae <shci_user_evt_proc+0x6a>
 800d056:	4b20      	ldr	r3, [pc, #128]	; (800d0d8 <shci_user_evt_proc+0x94>)
 800d058:	781b      	ldrb	r3, [r3, #0]
 800d05a:	2b00      	cmp	r3, #0
 800d05c:	d027      	beq.n	800d0ae <shci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &SHciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 800d05e:	f107 030c 	add.w	r3, r7, #12
 800d062:	4619      	mov	r1, r3
 800d064:	481b      	ldr	r0, [pc, #108]	; (800d0d4 <shci_user_evt_proc+0x90>)
 800d066:	f000 fde8 	bl	800dc3a <LST_remove_head>

    if (shciContext.UserEvtRx != NULL)
 800d06a:	4b1c      	ldr	r3, [pc, #112]	; (800d0dc <shci_user_evt_proc+0x98>)
 800d06c:	69db      	ldr	r3, [r3, #28]
 800d06e:	2b00      	cmp	r3, #0
 800d070:	d00c      	beq.n	800d08c <shci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 800d072:	68fb      	ldr	r3, [r7, #12]
 800d074:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = SHCI_TL_UserEventFlow_Enable;
 800d076:	2301      	movs	r3, #1
 800d078:	713b      	strb	r3, [r7, #4]
      shciContext.UserEvtRx((void *)&UserEvtRxParam);
 800d07a:	4b18      	ldr	r3, [pc, #96]	; (800d0dc <shci_user_evt_proc+0x98>)
 800d07c:	69db      	ldr	r3, [r3, #28]
 800d07e:	1d3a      	adds	r2, r7, #4
 800d080:	4610      	mov	r0, r2
 800d082:	4798      	blx	r3
      SHCI_TL_UserEventFlow = UserEvtRxParam.status;
 800d084:	793a      	ldrb	r2, [r7, #4]
 800d086:	4b14      	ldr	r3, [pc, #80]	; (800d0d8 <shci_user_evt_proc+0x94>)
 800d088:	701a      	strb	r2, [r3, #0]
 800d08a:	e002      	b.n	800d092 <shci_user_evt_proc+0x4e>
    }
    else
    {
      SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 800d08c:	4b12      	ldr	r3, [pc, #72]	; (800d0d8 <shci_user_evt_proc+0x94>)
 800d08e:	2201      	movs	r2, #1
 800d090:	701a      	strb	r2, [r3, #0]
    }

    if(SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable)
 800d092:	4b11      	ldr	r3, [pc, #68]	; (800d0d8 <shci_user_evt_proc+0x94>)
 800d094:	781b      	ldrb	r3, [r3, #0]
 800d096:	2b00      	cmp	r3, #0
 800d098:	d004      	beq.n	800d0a4 <shci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 800d09a:	68fb      	ldr	r3, [r7, #12]
 800d09c:	4618      	mov	r0, r3
 800d09e:	f000 fa6d 	bl	800d57c <TL_MM_EvtDone>
 800d0a2:	e004      	b.n	800d0ae <shci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &SHciAsynchEventQueue, (tListNode *)phcievtbuffer );
 800d0a4:	68fb      	ldr	r3, [r7, #12]
 800d0a6:	4619      	mov	r1, r3
 800d0a8:	480a      	ldr	r0, [pc, #40]	; (800d0d4 <shci_user_evt_proc+0x90>)
 800d0aa:	f000 fd5f 	bl	800db6c <LST_insert_head>
    }
  }

  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 800d0ae:	4809      	ldr	r0, [pc, #36]	; (800d0d4 <shci_user_evt_proc+0x90>)
 800d0b0:	f000 fd3c 	bl	800db2c <LST_is_empty>
 800d0b4:	4603      	mov	r3, r0
 800d0b6:	2b00      	cmp	r3, #0
 800d0b8:	d107      	bne.n	800d0ca <shci_user_evt_proc+0x86>
 800d0ba:	4b07      	ldr	r3, [pc, #28]	; (800d0d8 <shci_user_evt_proc+0x94>)
 800d0bc:	781b      	ldrb	r3, [r3, #0]
 800d0be:	2b00      	cmp	r3, #0
 800d0c0:	d003      	beq.n	800d0ca <shci_user_evt_proc+0x86>
  {
    shci_notify_asynch_evt((void*) &SHciAsynchEventQueue);
 800d0c2:	4804      	ldr	r0, [pc, #16]	; (800d0d4 <shci_user_evt_proc+0x90>)
 800d0c4:	f7f4 fff8 	bl	80020b8 <shci_notify_asynch_evt>
  }


  return;
 800d0c8:	bf00      	nop
 800d0ca:	bf00      	nop
}
 800d0cc:	3710      	adds	r7, #16
 800d0ce:	46bd      	mov	sp, r7
 800d0d0:	bd80      	pop	{r7, pc}
 800d0d2:	bf00      	nop
 800d0d4:	200003a4 	.word	0x200003a4
 800d0d8:	200003b4 	.word	0x200003b4
 800d0dc:	2000041c 	.word	0x2000041c

0800d0e0 <shci_send>:

  return;
}

void shci_send( uint16_t cmd_code, uint8_t len_cmd_payload, uint8_t * p_cmd_payload, TL_EvtPacket_t * p_rsp )
{
 800d0e0:	b580      	push	{r7, lr}
 800d0e2:	b084      	sub	sp, #16
 800d0e4:	af00      	add	r7, sp, #0
 800d0e6:	60ba      	str	r2, [r7, #8]
 800d0e8:	607b      	str	r3, [r7, #4]
 800d0ea:	4603      	mov	r3, r0
 800d0ec:	81fb      	strh	r3, [r7, #14]
 800d0ee:	460b      	mov	r3, r1
 800d0f0:	737b      	strb	r3, [r7, #13]
  Cmd_SetStatus(SHCI_TL_CmdBusy);
 800d0f2:	2000      	movs	r0, #0
 800d0f4:	f000 f864 	bl	800d1c0 <Cmd_SetStatus>

  pCmdBuffer->cmdserial.cmd.cmdcode = cmd_code;
 800d0f8:	4b16      	ldr	r3, [pc, #88]	; (800d154 <shci_send+0x74>)
 800d0fa:	681b      	ldr	r3, [r3, #0]
 800d0fc:	89fa      	ldrh	r2, [r7, #14]
 800d0fe:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = len_cmd_payload;
 800d102:	4b14      	ldr	r3, [pc, #80]	; (800d154 <shci_send+0x74>)
 800d104:	681b      	ldr	r3, [r3, #0]
 800d106:	7b7a      	ldrb	r2, [r7, #13]
 800d108:	72da      	strb	r2, [r3, #11]

  memcpy(pCmdBuffer->cmdserial.cmd.payload, p_cmd_payload, len_cmd_payload );
 800d10a:	4b12      	ldr	r3, [pc, #72]	; (800d154 <shci_send+0x74>)
 800d10c:	681b      	ldr	r3, [r3, #0]
 800d10e:	330c      	adds	r3, #12
 800d110:	7b7a      	ldrb	r2, [r7, #13]
 800d112:	68b9      	ldr	r1, [r7, #8]
 800d114:	4618      	mov	r0, r3
 800d116:	f005 fbf7 	bl	8012908 <memcpy>

  shciContext.io.Send(0,0);
 800d11a:	4b0f      	ldr	r3, [pc, #60]	; (800d158 <shci_send+0x78>)
 800d11c:	691b      	ldr	r3, [r3, #16]
 800d11e:	2100      	movs	r1, #0
 800d120:	2000      	movs	r0, #0
 800d122:	4798      	blx	r3

  shci_cmd_resp_wait(SHCI_TL_DEFAULT_TIMEOUT);
 800d124:	f248 00e8 	movw	r0, #33000	; 0x80e8
 800d128:	f7f4 ffe6 	bl	80020f8 <shci_cmd_resp_wait>

  /**
   * The command complete of a system command does not have the header
   * It starts immediately with the evtserial field
   */
  memcpy( &(p_rsp->evtserial), pCmdBuffer, ((TL_EvtSerial_t*)pCmdBuffer)->evt.plen + TL_EVT_HDR_SIZE );
 800d12c:	687b      	ldr	r3, [r7, #4]
 800d12e:	f103 0008 	add.w	r0, r3, #8
 800d132:	4b08      	ldr	r3, [pc, #32]	; (800d154 <shci_send+0x74>)
 800d134:	6819      	ldr	r1, [r3, #0]
 800d136:	4b07      	ldr	r3, [pc, #28]	; (800d154 <shci_send+0x74>)
 800d138:	681b      	ldr	r3, [r3, #0]
 800d13a:	789b      	ldrb	r3, [r3, #2]
 800d13c:	3303      	adds	r3, #3
 800d13e:	461a      	mov	r2, r3
 800d140:	f005 fbe2 	bl	8012908 <memcpy>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 800d144:	2001      	movs	r0, #1
 800d146:	f000 f83b 	bl	800d1c0 <Cmd_SetStatus>

  return;
 800d14a:	bf00      	nop
}
 800d14c:	3710      	adds	r7, #16
 800d14e:	46bd      	mov	sp, r7
 800d150:	bd80      	pop	{r7, pc}
 800d152:	bf00      	nop
 800d154:	200003b0 	.word	0x200003b0
 800d158:	2000041c 	.word	0x2000041c

0800d15c <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 800d15c:	b580      	push	{r7, lr}
 800d15e:	b086      	sub	sp, #24
 800d160:	af00      	add	r7, sp, #0
 800d162:	6078      	str	r0, [r7, #4]
  TL_SYS_InitConf_t Conf;

  pCmdBuffer = p_cmdbuffer;
 800d164:	4a10      	ldr	r2, [pc, #64]	; (800d1a8 <TlInit+0x4c>)
 800d166:	687b      	ldr	r3, [r7, #4]
 800d168:	6013      	str	r3, [r2, #0]

  LST_init_head (&SHciAsynchEventQueue);
 800d16a:	4810      	ldr	r0, [pc, #64]	; (800d1ac <TlInit+0x50>)
 800d16c:	f000 fcce 	bl	800db0c <LST_init_head>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 800d170:	2001      	movs	r0, #1
 800d172:	f000 f825 	bl	800d1c0 <Cmd_SetStatus>

  SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 800d176:	4b0e      	ldr	r3, [pc, #56]	; (800d1b0 <TlInit+0x54>)
 800d178:	2201      	movs	r2, #1
 800d17a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (shciContext.io.Init)
 800d17c:	4b0d      	ldr	r3, [pc, #52]	; (800d1b4 <TlInit+0x58>)
 800d17e:	681b      	ldr	r3, [r3, #0]
 800d180:	2b00      	cmp	r3, #0
 800d182:	d00c      	beq.n	800d19e <TlInit+0x42>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 800d184:	687b      	ldr	r3, [r7, #4]
 800d186:	617b      	str	r3, [r7, #20]
    Conf.IoBusCallBackCmdEvt = TlCmdEvtReceived;
 800d188:	4b0b      	ldr	r3, [pc, #44]	; (800d1b8 <TlInit+0x5c>)
 800d18a:	60fb      	str	r3, [r7, #12]
    Conf.IoBusCallBackUserEvt = TlUserEvtReceived;
 800d18c:	4b0b      	ldr	r3, [pc, #44]	; (800d1bc <TlInit+0x60>)
 800d18e:	613b      	str	r3, [r7, #16]
    shciContext.io.Init(&Conf);
 800d190:	4b08      	ldr	r3, [pc, #32]	; (800d1b4 <TlInit+0x58>)
 800d192:	681b      	ldr	r3, [r3, #0]
 800d194:	f107 020c 	add.w	r2, r7, #12
 800d198:	4610      	mov	r0, r2
 800d19a:	4798      	blx	r3
  }

  return;
 800d19c:	bf00      	nop
 800d19e:	bf00      	nop
}
 800d1a0:	3718      	adds	r7, #24
 800d1a2:	46bd      	mov	sp, r7
 800d1a4:	bd80      	pop	{r7, pc}
 800d1a6:	bf00      	nop
 800d1a8:	200003b0 	.word	0x200003b0
 800d1ac:	200003a4 	.word	0x200003a4
 800d1b0:	200003b4 	.word	0x200003b4
 800d1b4:	2000041c 	.word	0x2000041c
 800d1b8:	0800d211 	.word	0x0800d211
 800d1bc:	0800d229 	.word	0x0800d229

0800d1c0 <Cmd_SetStatus>:

static void Cmd_SetStatus(SHCI_TL_CmdStatus_t shcicmdstatus)
{
 800d1c0:	b580      	push	{r7, lr}
 800d1c2:	b082      	sub	sp, #8
 800d1c4:	af00      	add	r7, sp, #0
 800d1c6:	4603      	mov	r3, r0
 800d1c8:	71fb      	strb	r3, [r7, #7]
  if(shcicmdstatus == SHCI_TL_CmdBusy)
 800d1ca:	79fb      	ldrb	r3, [r7, #7]
 800d1cc:	2b00      	cmp	r3, #0
 800d1ce:	d10b      	bne.n	800d1e8 <Cmd_SetStatus+0x28>
  {
    if(StatusNotCallBackFunction != 0)
 800d1d0:	4b0d      	ldr	r3, [pc, #52]	; (800d208 <Cmd_SetStatus+0x48>)
 800d1d2:	681b      	ldr	r3, [r3, #0]
 800d1d4:	2b00      	cmp	r3, #0
 800d1d6:	d003      	beq.n	800d1e0 <Cmd_SetStatus+0x20>
    {
      StatusNotCallBackFunction( SHCI_TL_CmdBusy );
 800d1d8:	4b0b      	ldr	r3, [pc, #44]	; (800d208 <Cmd_SetStatus+0x48>)
 800d1da:	681b      	ldr	r3, [r3, #0]
 800d1dc:	2000      	movs	r0, #0
 800d1de:	4798      	blx	r3
    }
    SHCICmdStatus = SHCI_TL_CmdBusy;
 800d1e0:	4b0a      	ldr	r3, [pc, #40]	; (800d20c <Cmd_SetStatus+0x4c>)
 800d1e2:	2200      	movs	r2, #0
 800d1e4:	701a      	strb	r2, [r3, #0]
    {
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
    }
  }

  return;
 800d1e6:	e00b      	b.n	800d200 <Cmd_SetStatus+0x40>
    SHCICmdStatus = SHCI_TL_CmdAvailable;
 800d1e8:	4b08      	ldr	r3, [pc, #32]	; (800d20c <Cmd_SetStatus+0x4c>)
 800d1ea:	2201      	movs	r2, #1
 800d1ec:	701a      	strb	r2, [r3, #0]
    if(StatusNotCallBackFunction != 0)
 800d1ee:	4b06      	ldr	r3, [pc, #24]	; (800d208 <Cmd_SetStatus+0x48>)
 800d1f0:	681b      	ldr	r3, [r3, #0]
 800d1f2:	2b00      	cmp	r3, #0
 800d1f4:	d004      	beq.n	800d200 <Cmd_SetStatus+0x40>
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
 800d1f6:	4b04      	ldr	r3, [pc, #16]	; (800d208 <Cmd_SetStatus+0x48>)
 800d1f8:	681b      	ldr	r3, [r3, #0]
 800d1fa:	2001      	movs	r0, #1
 800d1fc:	4798      	blx	r3
  return;
 800d1fe:	bf00      	nop
 800d200:	bf00      	nop
}
 800d202:	3708      	adds	r7, #8
 800d204:	46bd      	mov	sp, r7
 800d206:	bd80      	pop	{r7, pc}
 800d208:	2000043c 	.word	0x2000043c
 800d20c:	200003ac 	.word	0x200003ac

0800d210 <TlCmdEvtReceived>:

static void TlCmdEvtReceived(TL_EvtPacket_t *shcievt)
{
 800d210:	b580      	push	{r7, lr}
 800d212:	b082      	sub	sp, #8
 800d214:	af00      	add	r7, sp, #0
 800d216:	6078      	str	r0, [r7, #4]
  (void)(shcievt);
  shci_cmd_resp_release(0); /**< Notify the application the Cmd response has been received */
 800d218:	2000      	movs	r0, #0
 800d21a:	f7f4 ff5d 	bl	80020d8 <shci_cmd_resp_release>

  return;
 800d21e:	bf00      	nop
}
 800d220:	3708      	adds	r7, #8
 800d222:	46bd      	mov	sp, r7
 800d224:	bd80      	pop	{r7, pc}
	...

0800d228 <TlUserEvtReceived>:

static void TlUserEvtReceived(TL_EvtPacket_t *shcievt)
{
 800d228:	b580      	push	{r7, lr}
 800d22a:	b082      	sub	sp, #8
 800d22c:	af00      	add	r7, sp, #0
 800d22e:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&SHciAsynchEventQueue, (tListNode *)shcievt);
 800d230:	6879      	ldr	r1, [r7, #4]
 800d232:	4805      	ldr	r0, [pc, #20]	; (800d248 <TlUserEvtReceived+0x20>)
 800d234:	f000 fcbe 	bl	800dbb4 <LST_insert_tail>
  shci_notify_asynch_evt((void*) &SHciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 800d238:	4803      	ldr	r0, [pc, #12]	; (800d248 <TlUserEvtReceived+0x20>)
 800d23a:	f7f4 ff3d 	bl	80020b8 <shci_notify_asynch_evt>

  return;
 800d23e:	bf00      	nop
}
 800d240:	3708      	adds	r7, #8
 800d242:	46bd      	mov	sp, r7
 800d244:	bd80      	pop	{r7, pc}
 800d246:	bf00      	nop
 800d248:	200003a4 	.word	0x200003a4

0800d24c <shci_register_io_bus>:
#include "shci_tl.h"
#include "tl.h"


void shci_register_io_bus(tSHciIO* fops)
{
 800d24c:	b480      	push	{r7}
 800d24e:	b083      	sub	sp, #12
 800d250:	af00      	add	r7, sp, #0
 800d252:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_SYS_Init;
 800d254:	687b      	ldr	r3, [r7, #4]
 800d256:	4a05      	ldr	r2, [pc, #20]	; (800d26c <shci_register_io_bus+0x20>)
 800d258:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_SYS_SendCmd;
 800d25a:	687b      	ldr	r3, [r7, #4]
 800d25c:	4a04      	ldr	r2, [pc, #16]	; (800d270 <shci_register_io_bus+0x24>)
 800d25e:	611a      	str	r2, [r3, #16]

  return;
 800d260:	bf00      	nop
}
 800d262:	370c      	adds	r7, #12
 800d264:	46bd      	mov	sp, r7
 800d266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d26a:	4770      	bx	lr
 800d26c:	0800d409 	.word	0x0800d409
 800d270:	0800d45d 	.word	0x0800d45d

0800d274 <TL_Enable>:

/******************************************************************************
 * GENERAL
 ******************************************************************************/
void TL_Enable( void )
{
 800d274:	b580      	push	{r7, lr}
 800d276:	af00      	add	r7, sp, #0
  HW_IPCC_Enable();
 800d278:	f7f4 fbf2 	bl	8001a60 <HW_IPCC_Enable>

  return;
 800d27c:	bf00      	nop
}
 800d27e:	bd80      	pop	{r7, pc}

0800d280 <TL_Init>:


void TL_Init( void )
{
 800d280:	b580      	push	{r7, lr}
 800d282:	af00      	add	r7, sp, #0
  TL_RefTable.p_device_info_table = &TL_DeviceInfoTable;
 800d284:	4b10      	ldr	r3, [pc, #64]	; (800d2c8 <TL_Init+0x48>)
 800d286:	4a11      	ldr	r2, [pc, #68]	; (800d2cc <TL_Init+0x4c>)
 800d288:	601a      	str	r2, [r3, #0]
  TL_RefTable.p_ble_table = &TL_BleTable;
 800d28a:	4b0f      	ldr	r3, [pc, #60]	; (800d2c8 <TL_Init+0x48>)
 800d28c:	4a10      	ldr	r2, [pc, #64]	; (800d2d0 <TL_Init+0x50>)
 800d28e:	605a      	str	r2, [r3, #4]
  TL_RefTable.p_thread_table = &TL_ThreadTable;
 800d290:	4b0d      	ldr	r3, [pc, #52]	; (800d2c8 <TL_Init+0x48>)
 800d292:	4a10      	ldr	r2, [pc, #64]	; (800d2d4 <TL_Init+0x54>)
 800d294:	609a      	str	r2, [r3, #8]
  TL_RefTable.p_lld_tests_table = &TL_LldTestsTable;
 800d296:	4b0c      	ldr	r3, [pc, #48]	; (800d2c8 <TL_Init+0x48>)
 800d298:	4a0f      	ldr	r2, [pc, #60]	; (800d2d8 <TL_Init+0x58>)
 800d29a:	621a      	str	r2, [r3, #32]
  TL_RefTable.p_lld_ble_table = &TL_LldBleTable;
 800d29c:	4b0a      	ldr	r3, [pc, #40]	; (800d2c8 <TL_Init+0x48>)
 800d29e:	4a0f      	ldr	r2, [pc, #60]	; (800d2dc <TL_Init+0x5c>)
 800d2a0:	625a      	str	r2, [r3, #36]	; 0x24
  TL_RefTable.p_sys_table = &TL_SysTable;
 800d2a2:	4b09      	ldr	r3, [pc, #36]	; (800d2c8 <TL_Init+0x48>)
 800d2a4:	4a0e      	ldr	r2, [pc, #56]	; (800d2e0 <TL_Init+0x60>)
 800d2a6:	60da      	str	r2, [r3, #12]
  TL_RefTable.p_mem_manager_table = &TL_MemManagerTable;
 800d2a8:	4b07      	ldr	r3, [pc, #28]	; (800d2c8 <TL_Init+0x48>)
 800d2aa:	4a0e      	ldr	r2, [pc, #56]	; (800d2e4 <TL_Init+0x64>)
 800d2ac:	611a      	str	r2, [r3, #16]
  TL_RefTable.p_traces_table = &TL_TracesTable;
 800d2ae:	4b06      	ldr	r3, [pc, #24]	; (800d2c8 <TL_Init+0x48>)
 800d2b0:	4a0d      	ldr	r2, [pc, #52]	; (800d2e8 <TL_Init+0x68>)
 800d2b2:	615a      	str	r2, [r3, #20]
  TL_RefTable.p_mac_802_15_4_table = &TL_Mac_802_15_4_Table;
 800d2b4:	4b04      	ldr	r3, [pc, #16]	; (800d2c8 <TL_Init+0x48>)
 800d2b6:	4a0d      	ldr	r2, [pc, #52]	; (800d2ec <TL_Init+0x6c>)
 800d2b8:	619a      	str	r2, [r3, #24]
  TL_RefTable.p_zigbee_table = &TL_Zigbee_Table;
 800d2ba:	4b03      	ldr	r3, [pc, #12]	; (800d2c8 <TL_Init+0x48>)
 800d2bc:	4a0c      	ldr	r2, [pc, #48]	; (800d2f0 <TL_Init+0x70>)
 800d2be:	61da      	str	r2, [r3, #28]
  HW_IPCC_Init();
 800d2c0:	f7f4 fbe2 	bl	8001a88 <HW_IPCC_Init>

  return;
 800d2c4:	bf00      	nop
}
 800d2c6:	bd80      	pop	{r7, pc}
 800d2c8:	20030000 	.word	0x20030000
 800d2cc:	20030134 	.word	0x20030134
 800d2d0:	20030154 	.word	0x20030154
 800d2d4:	20030164 	.word	0x20030164
 800d2d8:	20030170 	.word	0x20030170
 800d2dc:	20030178 	.word	0x20030178
 800d2e0:	20030180 	.word	0x20030180
 800d2e4:	20030188 	.word	0x20030188
 800d2e8:	200301a4 	.word	0x200301a4
 800d2ec:	200301a8 	.word	0x200301a8
 800d2f0:	200301b4 	.word	0x200301b4

0800d2f4 <TL_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
int32_t TL_BLE_Init( void* pConf )
{
 800d2f4:	b580      	push	{r7, lr}
 800d2f6:	b084      	sub	sp, #16
 800d2f8:	af00      	add	r7, sp, #0
 800d2fa:	6078      	str	r0, [r7, #4]
  MB_BleTable_t  * p_bletable;

  TL_BLE_InitConf_t *pInitHciConf = (TL_BLE_InitConf_t *) pConf;
 800d2fc:	687b      	ldr	r3, [r7, #4]
 800d2fe:	60fb      	str	r3, [r7, #12]

  LST_init_head (&EvtQueue);
 800d300:	4811      	ldr	r0, [pc, #68]	; (800d348 <TL_BLE_Init+0x54>)
 800d302:	f000 fc03 	bl	800db0c <LST_init_head>

  p_bletable = TL_RefTable.p_ble_table;
 800d306:	4b11      	ldr	r3, [pc, #68]	; (800d34c <TL_BLE_Init+0x58>)
 800d308:	685b      	ldr	r3, [r3, #4]
 800d30a:	60bb      	str	r3, [r7, #8]

  p_bletable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 800d30c:	68fb      	ldr	r3, [r7, #12]
 800d30e:	689a      	ldr	r2, [r3, #8]
 800d310:	68bb      	ldr	r3, [r7, #8]
 800d312:	601a      	str	r2, [r3, #0]
  p_bletable->phci_acl_data_buffer = pInitHciConf->p_AclDataBuffer;
 800d314:	68fb      	ldr	r3, [r7, #12]
 800d316:	68da      	ldr	r2, [r3, #12]
 800d318:	68bb      	ldr	r3, [r7, #8]
 800d31a:	60da      	str	r2, [r3, #12]
  p_bletable->pcs_buffer  = (uint8_t*)CsBuffer;
 800d31c:	68bb      	ldr	r3, [r7, #8]
 800d31e:	4a0c      	ldr	r2, [pc, #48]	; (800d350 <TL_BLE_Init+0x5c>)
 800d320:	605a      	str	r2, [r3, #4]
  p_bletable->pevt_queue  = (uint8_t*)&EvtQueue;
 800d322:	68bb      	ldr	r3, [r7, #8]
 800d324:	4a08      	ldr	r2, [pc, #32]	; (800d348 <TL_BLE_Init+0x54>)
 800d326:	609a      	str	r2, [r3, #8]

  HW_IPCC_BLE_Init();
 800d328:	f7f4 fbc4 	bl	8001ab4 <HW_IPCC_BLE_Init>

  BLE_IoBusEvtCallBackFunction = pInitHciConf->IoBusEvtCallBack;
 800d32c:	68fb      	ldr	r3, [r7, #12]
 800d32e:	681b      	ldr	r3, [r3, #0]
 800d330:	4a08      	ldr	r2, [pc, #32]	; (800d354 <TL_BLE_Init+0x60>)
 800d332:	6013      	str	r3, [r2, #0]
  BLE_IoBusAclDataTxAck = pInitHciConf->IoBusAclDataTxAck;
 800d334:	68fb      	ldr	r3, [r7, #12]
 800d336:	685b      	ldr	r3, [r3, #4]
 800d338:	4a07      	ldr	r2, [pc, #28]	; (800d358 <TL_BLE_Init+0x64>)
 800d33a:	6013      	str	r3, [r2, #0]

  return 0;
 800d33c:	2300      	movs	r3, #0
}
 800d33e:	4618      	mov	r0, r3
 800d340:	3710      	adds	r7, #16
 800d342:	46bd      	mov	sp, r7
 800d344:	bd80      	pop	{r7, pc}
 800d346:	bf00      	nop
 800d348:	200301d0 	.word	0x200301d0
 800d34c:	20030000 	.word	0x20030000
 800d350:	20030a48 	.word	0x20030a48
 800d354:	20000448 	.word	0x20000448
 800d358:	2000044c 	.word	0x2000044c

0800d35c <TL_BLE_SendCmd>:

int32_t TL_BLE_SendCmd( uint8_t* buffer, uint16_t size )
{
 800d35c:	b580      	push	{r7, lr}
 800d35e:	b082      	sub	sp, #8
 800d360:	af00      	add	r7, sp, #0
 800d362:	6078      	str	r0, [r7, #4]
 800d364:	460b      	mov	r3, r1
 800d366:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t*)(TL_RefTable.p_ble_table->pcmd_buffer))->cmdserial.type = TL_BLECMD_PKT_TYPE;
 800d368:	4b09      	ldr	r3, [pc, #36]	; (800d390 <TL_BLE_SendCmd+0x34>)
 800d36a:	685b      	ldr	r3, [r3, #4]
 800d36c:	681b      	ldr	r3, [r3, #0]
 800d36e:	2201      	movs	r2, #1
 800d370:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_BLE_CMD, TL_RefTable.p_ble_table->pcmd_buffer);
 800d372:	4b07      	ldr	r3, [pc, #28]	; (800d390 <TL_BLE_SendCmd+0x34>)
 800d374:	685b      	ldr	r3, [r3, #4]
 800d376:	681b      	ldr	r3, [r3, #0]
 800d378:	4619      	mov	r1, r3
 800d37a:	2001      	movs	r0, #1
 800d37c:	f000 f96c 	bl	800d658 <OutputDbgTrace>

  HW_IPCC_BLE_SendCmd();
 800d380:	f7f4 fba2 	bl	8001ac8 <HW_IPCC_BLE_SendCmd>

  return 0;
 800d384:	2300      	movs	r3, #0
}
 800d386:	4618      	mov	r0, r3
 800d388:	3708      	adds	r7, #8
 800d38a:	46bd      	mov	sp, r7
 800d38c:	bd80      	pop	{r7, pc}
 800d38e:	bf00      	nop
 800d390:	20030000 	.word	0x20030000

0800d394 <HW_IPCC_BLE_RxEvtNot>:

void HW_IPCC_BLE_RxEvtNot(void)
{
 800d394:	b580      	push	{r7, lr}
 800d396:	b082      	sub	sp, #8
 800d398:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&EvtQueue) == FALSE)
 800d39a:	e01c      	b.n	800d3d6 <HW_IPCC_BLE_RxEvtNot+0x42>
  {
    LST_remove_head (&EvtQueue, (tListNode **)&phcievt);
 800d39c:	1d3b      	adds	r3, r7, #4
 800d39e:	4619      	mov	r1, r3
 800d3a0:	4812      	ldr	r0, [pc, #72]	; (800d3ec <HW_IPCC_BLE_RxEvtNot+0x58>)
 800d3a2:	f000 fc4a 	bl	800dc3a <LST_remove_head>

    if ( ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 800d3a6:	687b      	ldr	r3, [r7, #4]
 800d3a8:	7a5b      	ldrb	r3, [r3, #9]
 800d3aa:	2b0f      	cmp	r3, #15
 800d3ac:	d003      	beq.n	800d3b6 <HW_IPCC_BLE_RxEvtNot+0x22>
 800d3ae:	687b      	ldr	r3, [r7, #4]
 800d3b0:	7a5b      	ldrb	r3, [r3, #9]
 800d3b2:	2b0e      	cmp	r3, #14
 800d3b4:	d105      	bne.n	800d3c2 <HW_IPCC_BLE_RxEvtNot+0x2e>
    {
      OutputDbgTrace(TL_MB_BLE_CMD_RSP, (uint8_t*)phcievt);
 800d3b6:	687b      	ldr	r3, [r7, #4]
 800d3b8:	4619      	mov	r1, r3
 800d3ba:	2002      	movs	r0, #2
 800d3bc:	f000 f94c 	bl	800d658 <OutputDbgTrace>
 800d3c0:	e004      	b.n	800d3cc <HW_IPCC_BLE_RxEvtNot+0x38>
    }
    else
    {
      OutputDbgTrace(TL_MB_BLE_ASYNCH_EVT, (uint8_t*)phcievt);
 800d3c2:	687b      	ldr	r3, [r7, #4]
 800d3c4:	4619      	mov	r1, r3
 800d3c6:	2003      	movs	r0, #3
 800d3c8:	f000 f946 	bl	800d658 <OutputDbgTrace>
    }

    BLE_IoBusEvtCallBackFunction(phcievt);
 800d3cc:	4b08      	ldr	r3, [pc, #32]	; (800d3f0 <HW_IPCC_BLE_RxEvtNot+0x5c>)
 800d3ce:	681b      	ldr	r3, [r3, #0]
 800d3d0:	687a      	ldr	r2, [r7, #4]
 800d3d2:	4610      	mov	r0, r2
 800d3d4:	4798      	blx	r3
  while(LST_is_empty(&EvtQueue) == FALSE)
 800d3d6:	4805      	ldr	r0, [pc, #20]	; (800d3ec <HW_IPCC_BLE_RxEvtNot+0x58>)
 800d3d8:	f000 fba8 	bl	800db2c <LST_is_empty>
 800d3dc:	4603      	mov	r3, r0
 800d3de:	2b00      	cmp	r3, #0
 800d3e0:	d0dc      	beq.n	800d39c <HW_IPCC_BLE_RxEvtNot+0x8>
  }

  return;
 800d3e2:	bf00      	nop
}
 800d3e4:	3708      	adds	r7, #8
 800d3e6:	46bd      	mov	sp, r7
 800d3e8:	bd80      	pop	{r7, pc}
 800d3ea:	bf00      	nop
 800d3ec:	200301d0 	.word	0x200301d0
 800d3f0:	20000448 	.word	0x20000448

0800d3f4 <HW_IPCC_BLE_AclDataAckNot>:

  return 0;
}

void HW_IPCC_BLE_AclDataAckNot(void)
{
 800d3f4:	b580      	push	{r7, lr}
 800d3f6:	af00      	add	r7, sp, #0
  BLE_IoBusAclDataTxAck( );
 800d3f8:	4b02      	ldr	r3, [pc, #8]	; (800d404 <HW_IPCC_BLE_AclDataAckNot+0x10>)
 800d3fa:	681b      	ldr	r3, [r3, #0]
 800d3fc:	4798      	blx	r3

  return;
 800d3fe:	bf00      	nop
}
 800d400:	bd80      	pop	{r7, pc}
 800d402:	bf00      	nop
 800d404:	2000044c 	.word	0x2000044c

0800d408 <TL_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
int32_t TL_SYS_Init( void* pConf  )
{
 800d408:	b580      	push	{r7, lr}
 800d40a:	b084      	sub	sp, #16
 800d40c:	af00      	add	r7, sp, #0
 800d40e:	6078      	str	r0, [r7, #4]
  MB_SysTable_t  * p_systable;

  TL_SYS_InitConf_t *pInitHciConf = (TL_SYS_InitConf_t *) pConf;
 800d410:	687b      	ldr	r3, [r7, #4]
 800d412:	60fb      	str	r3, [r7, #12]

  LST_init_head (&SystemEvtQueue);
 800d414:	480d      	ldr	r0, [pc, #52]	; (800d44c <TL_SYS_Init+0x44>)
 800d416:	f000 fb79 	bl	800db0c <LST_init_head>
  p_systable = TL_RefTable.p_sys_table;
 800d41a:	4b0d      	ldr	r3, [pc, #52]	; (800d450 <TL_SYS_Init+0x48>)
 800d41c:	68db      	ldr	r3, [r3, #12]
 800d41e:	60bb      	str	r3, [r7, #8]
  p_systable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 800d420:	68fb      	ldr	r3, [r7, #12]
 800d422:	689a      	ldr	r2, [r3, #8]
 800d424:	68bb      	ldr	r3, [r7, #8]
 800d426:	601a      	str	r2, [r3, #0]
  p_systable->sys_queue = (uint8_t*)&SystemEvtQueue;
 800d428:	68bb      	ldr	r3, [r7, #8]
 800d42a:	4a08      	ldr	r2, [pc, #32]	; (800d44c <TL_SYS_Init+0x44>)
 800d42c:	605a      	str	r2, [r3, #4]

  HW_IPCC_SYS_Init();
 800d42e:	f7f4 fb6d 	bl	8001b0c <HW_IPCC_SYS_Init>

  SYS_CMD_IoBusCallBackFunction = pInitHciConf->IoBusCallBackCmdEvt;
 800d432:	68fb      	ldr	r3, [r7, #12]
 800d434:	681b      	ldr	r3, [r3, #0]
 800d436:	4a07      	ldr	r2, [pc, #28]	; (800d454 <TL_SYS_Init+0x4c>)
 800d438:	6013      	str	r3, [r2, #0]
  SYS_EVT_IoBusCallBackFunction = pInitHciConf->IoBusCallBackUserEvt;
 800d43a:	68fb      	ldr	r3, [r7, #12]
 800d43c:	685b      	ldr	r3, [r3, #4]
 800d43e:	4a06      	ldr	r2, [pc, #24]	; (800d458 <TL_SYS_Init+0x50>)
 800d440:	6013      	str	r3, [r2, #0]

  return 0;
 800d442:	2300      	movs	r3, #0
}
 800d444:	4618      	mov	r0, r3
 800d446:	3710      	adds	r7, #16
 800d448:	46bd      	mov	sp, r7
 800d44a:	bd80      	pop	{r7, pc}
 800d44c:	200301d8 	.word	0x200301d8
 800d450:	20030000 	.word	0x20030000
 800d454:	20000450 	.word	0x20000450
 800d458:	20000454 	.word	0x20000454

0800d45c <TL_SYS_SendCmd>:

int32_t TL_SYS_SendCmd( uint8_t* buffer, uint16_t size )
{
 800d45c:	b580      	push	{r7, lr}
 800d45e:	b082      	sub	sp, #8
 800d460:	af00      	add	r7, sp, #0
 800d462:	6078      	str	r0, [r7, #4]
 800d464:	460b      	mov	r3, r1
 800d466:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t *)(TL_RefTable.p_sys_table->pcmd_buffer))->cmdserial.type = TL_SYSCMD_PKT_TYPE;
 800d468:	4b09      	ldr	r3, [pc, #36]	; (800d490 <TL_SYS_SendCmd+0x34>)
 800d46a:	68db      	ldr	r3, [r3, #12]
 800d46c:	681b      	ldr	r3, [r3, #0]
 800d46e:	2210      	movs	r2, #16
 800d470:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_SYS_CMD, TL_RefTable.p_sys_table->pcmd_buffer);
 800d472:	4b07      	ldr	r3, [pc, #28]	; (800d490 <TL_SYS_SendCmd+0x34>)
 800d474:	68db      	ldr	r3, [r3, #12]
 800d476:	681b      	ldr	r3, [r3, #0]
 800d478:	4619      	mov	r1, r3
 800d47a:	2004      	movs	r0, #4
 800d47c:	f000 f8ec 	bl	800d658 <OutputDbgTrace>

  HW_IPCC_SYS_SendCmd();
 800d480:	f7f4 fb4e 	bl	8001b20 <HW_IPCC_SYS_SendCmd>

  return 0;
 800d484:	2300      	movs	r3, #0
}
 800d486:	4618      	mov	r0, r3
 800d488:	3708      	adds	r7, #8
 800d48a:	46bd      	mov	sp, r7
 800d48c:	bd80      	pop	{r7, pc}
 800d48e:	bf00      	nop
 800d490:	20030000 	.word	0x20030000

0800d494 <HW_IPCC_SYS_CmdEvtNot>:

void HW_IPCC_SYS_CmdEvtNot(void)
{
 800d494:	b580      	push	{r7, lr}
 800d496:	af00      	add	r7, sp, #0
  OutputDbgTrace(TL_MB_SYS_CMD_RSP, (uint8_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 800d498:	4b07      	ldr	r3, [pc, #28]	; (800d4b8 <HW_IPCC_SYS_CmdEvtNot+0x24>)
 800d49a:	68db      	ldr	r3, [r3, #12]
 800d49c:	681b      	ldr	r3, [r3, #0]
 800d49e:	4619      	mov	r1, r3
 800d4a0:	2005      	movs	r0, #5
 800d4a2:	f000 f8d9 	bl	800d658 <OutputDbgTrace>

  SYS_CMD_IoBusCallBackFunction( (TL_EvtPacket_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 800d4a6:	4b05      	ldr	r3, [pc, #20]	; (800d4bc <HW_IPCC_SYS_CmdEvtNot+0x28>)
 800d4a8:	681b      	ldr	r3, [r3, #0]
 800d4aa:	4a03      	ldr	r2, [pc, #12]	; (800d4b8 <HW_IPCC_SYS_CmdEvtNot+0x24>)
 800d4ac:	68d2      	ldr	r2, [r2, #12]
 800d4ae:	6812      	ldr	r2, [r2, #0]
 800d4b0:	4610      	mov	r0, r2
 800d4b2:	4798      	blx	r3

  return;
 800d4b4:	bf00      	nop
}
 800d4b6:	bd80      	pop	{r7, pc}
 800d4b8:	20030000 	.word	0x20030000
 800d4bc:	20000450 	.word	0x20000450

0800d4c0 <HW_IPCC_SYS_EvtNot>:

void HW_IPCC_SYS_EvtNot( void )
{
 800d4c0:	b580      	push	{r7, lr}
 800d4c2:	b082      	sub	sp, #8
 800d4c4:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *p_evt;

  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 800d4c6:	e00e      	b.n	800d4e6 <HW_IPCC_SYS_EvtNot+0x26>
  {
    LST_remove_head (&SystemEvtQueue, (tListNode **)&p_evt);
 800d4c8:	1d3b      	adds	r3, r7, #4
 800d4ca:	4619      	mov	r1, r3
 800d4cc:	480b      	ldr	r0, [pc, #44]	; (800d4fc <HW_IPCC_SYS_EvtNot+0x3c>)
 800d4ce:	f000 fbb4 	bl	800dc3a <LST_remove_head>

    OutputDbgTrace(TL_MB_SYS_ASYNCH_EVT, (uint8_t*)p_evt );
 800d4d2:	687b      	ldr	r3, [r7, #4]
 800d4d4:	4619      	mov	r1, r3
 800d4d6:	2006      	movs	r0, #6
 800d4d8:	f000 f8be 	bl	800d658 <OutputDbgTrace>

    SYS_EVT_IoBusCallBackFunction( p_evt );
 800d4dc:	4b08      	ldr	r3, [pc, #32]	; (800d500 <HW_IPCC_SYS_EvtNot+0x40>)
 800d4de:	681b      	ldr	r3, [r3, #0]
 800d4e0:	687a      	ldr	r2, [r7, #4]
 800d4e2:	4610      	mov	r0, r2
 800d4e4:	4798      	blx	r3
  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 800d4e6:	4805      	ldr	r0, [pc, #20]	; (800d4fc <HW_IPCC_SYS_EvtNot+0x3c>)
 800d4e8:	f000 fb20 	bl	800db2c <LST_is_empty>
 800d4ec:	4603      	mov	r3, r0
 800d4ee:	2b00      	cmp	r3, #0
 800d4f0:	d0ea      	beq.n	800d4c8 <HW_IPCC_SYS_EvtNot+0x8>
  }

  return;
 800d4f2:	bf00      	nop
}
 800d4f4:	3708      	adds	r7, #8
 800d4f6:	46bd      	mov	sp, r7
 800d4f8:	bd80      	pop	{r7, pc}
 800d4fa:	bf00      	nop
 800d4fc:	200301d8 	.word	0x200301d8
 800d500:	20000454 	.word	0x20000454

0800d504 <TL_MM_Init>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void TL_MM_Init( TL_MM_Config_t *p_Config )
{
 800d504:	b580      	push	{r7, lr}
 800d506:	b082      	sub	sp, #8
 800d508:	af00      	add	r7, sp, #0
 800d50a:	6078      	str	r0, [r7, #4]
  static MB_MemManagerTable_t  * p_mem_manager_table;

  LST_init_head (&FreeBufQueue);
 800d50c:	4817      	ldr	r0, [pc, #92]	; (800d56c <TL_MM_Init+0x68>)
 800d50e:	f000 fafd 	bl	800db0c <LST_init_head>
  LST_init_head (&LocalFreeBufQueue);
 800d512:	4817      	ldr	r0, [pc, #92]	; (800d570 <TL_MM_Init+0x6c>)
 800d514:	f000 fafa 	bl	800db0c <LST_init_head>

  p_mem_manager_table = TL_RefTable.p_mem_manager_table;
 800d518:	4b16      	ldr	r3, [pc, #88]	; (800d574 <TL_MM_Init+0x70>)
 800d51a:	691b      	ldr	r3, [r3, #16]
 800d51c:	4a16      	ldr	r2, [pc, #88]	; (800d578 <TL_MM_Init+0x74>)
 800d51e:	6013      	str	r3, [r2, #0]

  p_mem_manager_table->blepool = p_Config->p_AsynchEvtPool;
 800d520:	4b15      	ldr	r3, [pc, #84]	; (800d578 <TL_MM_Init+0x74>)
 800d522:	681b      	ldr	r3, [r3, #0]
 800d524:	687a      	ldr	r2, [r7, #4]
 800d526:	6892      	ldr	r2, [r2, #8]
 800d528:	609a      	str	r2, [r3, #8]
  p_mem_manager_table->blepoolsize = p_Config->AsynchEvtPoolSize;
 800d52a:	4b13      	ldr	r3, [pc, #76]	; (800d578 <TL_MM_Init+0x74>)
 800d52c:	681b      	ldr	r3, [r3, #0]
 800d52e:	687a      	ldr	r2, [r7, #4]
 800d530:	68d2      	ldr	r2, [r2, #12]
 800d532:	60da      	str	r2, [r3, #12]
  p_mem_manager_table->pevt_free_buffer_queue = (uint8_t*)&FreeBufQueue;
 800d534:	4b10      	ldr	r3, [pc, #64]	; (800d578 <TL_MM_Init+0x74>)
 800d536:	681b      	ldr	r3, [r3, #0]
 800d538:	4a0c      	ldr	r2, [pc, #48]	; (800d56c <TL_MM_Init+0x68>)
 800d53a:	611a      	str	r2, [r3, #16]
  p_mem_manager_table->spare_ble_buffer = p_Config->p_BleSpareEvtBuffer;
 800d53c:	4b0e      	ldr	r3, [pc, #56]	; (800d578 <TL_MM_Init+0x74>)
 800d53e:	681b      	ldr	r3, [r3, #0]
 800d540:	687a      	ldr	r2, [r7, #4]
 800d542:	6812      	ldr	r2, [r2, #0]
 800d544:	601a      	str	r2, [r3, #0]
  p_mem_manager_table->spare_sys_buffer = p_Config->p_SystemSpareEvtBuffer;
 800d546:	4b0c      	ldr	r3, [pc, #48]	; (800d578 <TL_MM_Init+0x74>)
 800d548:	681b      	ldr	r3, [r3, #0]
 800d54a:	687a      	ldr	r2, [r7, #4]
 800d54c:	6852      	ldr	r2, [r2, #4]
 800d54e:	605a      	str	r2, [r3, #4]
  p_mem_manager_table->traces_evt_pool = p_Config->p_TracesEvtPool;
 800d550:	4b09      	ldr	r3, [pc, #36]	; (800d578 <TL_MM_Init+0x74>)
 800d552:	681b      	ldr	r3, [r3, #0]
 800d554:	687a      	ldr	r2, [r7, #4]
 800d556:	6912      	ldr	r2, [r2, #16]
 800d558:	615a      	str	r2, [r3, #20]
  p_mem_manager_table->tracespoolsize = p_Config->TracesEvtPoolSize;
 800d55a:	4b07      	ldr	r3, [pc, #28]	; (800d578 <TL_MM_Init+0x74>)
 800d55c:	681b      	ldr	r3, [r3, #0]
 800d55e:	687a      	ldr	r2, [r7, #4]
 800d560:	6952      	ldr	r2, [r2, #20]
 800d562:	619a      	str	r2, [r3, #24]

  return;
 800d564:	bf00      	nop
}
 800d566:	3708      	adds	r7, #8
 800d568:	46bd      	mov	sp, r7
 800d56a:	bd80      	pop	{r7, pc}
 800d56c:	200301c0 	.word	0x200301c0
 800d570:	20000440 	.word	0x20000440
 800d574:	20030000 	.word	0x20030000
 800d578:	20000458 	.word	0x20000458

0800d57c <TL_MM_EvtDone>:

void TL_MM_EvtDone(TL_EvtPacket_t * phcievt)
{
 800d57c:	b580      	push	{r7, lr}
 800d57e:	b082      	sub	sp, #8
 800d580:	af00      	add	r7, sp, #0
 800d582:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&LocalFreeBufQueue, (tListNode *)phcievt);
 800d584:	6879      	ldr	r1, [r7, #4]
 800d586:	4807      	ldr	r0, [pc, #28]	; (800d5a4 <TL_MM_EvtDone+0x28>)
 800d588:	f000 fb14 	bl	800dbb4 <LST_insert_tail>

  OutputDbgTrace(TL_MB_MM_RELEASE_BUFFER, (uint8_t*)phcievt);
 800d58c:	6879      	ldr	r1, [r7, #4]
 800d58e:	2000      	movs	r0, #0
 800d590:	f000 f862 	bl	800d658 <OutputDbgTrace>

  HW_IPCC_MM_SendFreeBuf( SendFreeBuf );
 800d594:	4804      	ldr	r0, [pc, #16]	; (800d5a8 <TL_MM_EvtDone+0x2c>)
 800d596:	f7f4 fae9 	bl	8001b6c <HW_IPCC_MM_SendFreeBuf>

  return;
 800d59a:	bf00      	nop
}
 800d59c:	3708      	adds	r7, #8
 800d59e:	46bd      	mov	sp, r7
 800d5a0:	bd80      	pop	{r7, pc}
 800d5a2:	bf00      	nop
 800d5a4:	20000440 	.word	0x20000440
 800d5a8:	0800d5ad 	.word	0x0800d5ad

0800d5ac <SendFreeBuf>:

static void SendFreeBuf( void )
{
 800d5ac:	b580      	push	{r7, lr}
 800d5ae:	b082      	sub	sp, #8
 800d5b0:	af00      	add	r7, sp, #0
  tListNode *p_node;

  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 800d5b2:	e00c      	b.n	800d5ce <SendFreeBuf+0x22>
  {
    LST_remove_head( &LocalFreeBufQueue, (tListNode **)&p_node );
 800d5b4:	1d3b      	adds	r3, r7, #4
 800d5b6:	4619      	mov	r1, r3
 800d5b8:	480a      	ldr	r0, [pc, #40]	; (800d5e4 <SendFreeBuf+0x38>)
 800d5ba:	f000 fb3e 	bl	800dc3a <LST_remove_head>
    LST_insert_tail( (tListNode*)(TL_RefTable.p_mem_manager_table->pevt_free_buffer_queue), p_node );
 800d5be:	4b0a      	ldr	r3, [pc, #40]	; (800d5e8 <SendFreeBuf+0x3c>)
 800d5c0:	691b      	ldr	r3, [r3, #16]
 800d5c2:	691b      	ldr	r3, [r3, #16]
 800d5c4:	687a      	ldr	r2, [r7, #4]
 800d5c6:	4611      	mov	r1, r2
 800d5c8:	4618      	mov	r0, r3
 800d5ca:	f000 faf3 	bl	800dbb4 <LST_insert_tail>
  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 800d5ce:	4805      	ldr	r0, [pc, #20]	; (800d5e4 <SendFreeBuf+0x38>)
 800d5d0:	f000 faac 	bl	800db2c <LST_is_empty>
 800d5d4:	4603      	mov	r3, r0
 800d5d6:	2b00      	cmp	r3, #0
 800d5d8:	d0ec      	beq.n	800d5b4 <SendFreeBuf+0x8>
  }

  return;
 800d5da:	bf00      	nop
}
 800d5dc:	3708      	adds	r7, #8
 800d5de:	46bd      	mov	sp, r7
 800d5e0:	bd80      	pop	{r7, pc}
 800d5e2:	bf00      	nop
 800d5e4:	20000440 	.word	0x20000440
 800d5e8:	20030000 	.word	0x20030000

0800d5ec <TL_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void TL_TRACES_Init( void )
{
 800d5ec:	b580      	push	{r7, lr}
 800d5ee:	af00      	add	r7, sp, #0
  LST_init_head (&TracesEvtQueue);
 800d5f0:	4805      	ldr	r0, [pc, #20]	; (800d608 <TL_TRACES_Init+0x1c>)
 800d5f2:	f000 fa8b 	bl	800db0c <LST_init_head>

  TL_RefTable.p_traces_table->traces_queue = (uint8_t*)&TracesEvtQueue;
 800d5f6:	4b05      	ldr	r3, [pc, #20]	; (800d60c <TL_TRACES_Init+0x20>)
 800d5f8:	695b      	ldr	r3, [r3, #20]
 800d5fa:	4a03      	ldr	r2, [pc, #12]	; (800d608 <TL_TRACES_Init+0x1c>)
 800d5fc:	601a      	str	r2, [r3, #0]

  HW_IPCC_TRACES_Init();
 800d5fe:	f7f4 faeb 	bl	8001bd8 <HW_IPCC_TRACES_Init>

  return;
 800d602:	bf00      	nop
}
 800d604:	bd80      	pop	{r7, pc}
 800d606:	bf00      	nop
 800d608:	200301c8 	.word	0x200301c8
 800d60c:	20030000 	.word	0x20030000

0800d610 <HW_IPCC_TRACES_EvtNot>:

void HW_IPCC_TRACES_EvtNot(void)
{
 800d610:	b580      	push	{r7, lr}
 800d612:	b082      	sub	sp, #8
 800d614:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 800d616:	e008      	b.n	800d62a <HW_IPCC_TRACES_EvtNot+0x1a>
  {
    LST_remove_head (&TracesEvtQueue, (tListNode **)&phcievt);
 800d618:	1d3b      	adds	r3, r7, #4
 800d61a:	4619      	mov	r1, r3
 800d61c:	4808      	ldr	r0, [pc, #32]	; (800d640 <HW_IPCC_TRACES_EvtNot+0x30>)
 800d61e:	f000 fb0c 	bl	800dc3a <LST_remove_head>
    TL_TRACES_EvtReceived( phcievt );
 800d622:	687b      	ldr	r3, [r7, #4]
 800d624:	4618      	mov	r0, r3
 800d626:	f000 f80d 	bl	800d644 <TL_TRACES_EvtReceived>
  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 800d62a:	4805      	ldr	r0, [pc, #20]	; (800d640 <HW_IPCC_TRACES_EvtNot+0x30>)
 800d62c:	f000 fa7e 	bl	800db2c <LST_is_empty>
 800d630:	4603      	mov	r3, r0
 800d632:	2b00      	cmp	r3, #0
 800d634:	d0f0      	beq.n	800d618 <HW_IPCC_TRACES_EvtNot+0x8>
  }

  return;
 800d636:	bf00      	nop
}
 800d638:	3708      	adds	r7, #8
 800d63a:	46bd      	mov	sp, r7
 800d63c:	bd80      	pop	{r7, pc}
 800d63e:	bf00      	nop
 800d640:	200301c8 	.word	0x200301c8

0800d644 <TL_TRACES_EvtReceived>:

__WEAK void TL_TRACES_EvtReceived( TL_EvtPacket_t * hcievt )
{
 800d644:	b480      	push	{r7}
 800d646:	b083      	sub	sp, #12
 800d648:	af00      	add	r7, sp, #0
 800d64a:	6078      	str	r0, [r7, #4]
  (void)(hcievt);
}
 800d64c:	bf00      	nop
 800d64e:	370c      	adds	r7, #12
 800d650:	46bd      	mov	sp, r7
 800d652:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d656:	4770      	bx	lr

0800d658 <OutputDbgTrace>:

/******************************************************************************
 * DEBUG INFORMATION
 ******************************************************************************/
static void OutputDbgTrace(TL_MB_PacketType_t packet_type, uint8_t* buffer)
{
 800d658:	b480      	push	{r7}
 800d65a:	b085      	sub	sp, #20
 800d65c:	af00      	add	r7, sp, #0
 800d65e:	4603      	mov	r3, r0
 800d660:	6039      	str	r1, [r7, #0]
 800d662:	71fb      	strb	r3, [r7, #7]
  TL_EvtPacket_t *p_evt_packet;
  TL_CmdPacket_t *p_cmd_packet;

  switch(packet_type)
 800d664:	79fb      	ldrb	r3, [r7, #7]
 800d666:	2b06      	cmp	r3, #6
 800d668:	d849      	bhi.n	800d6fe <OutputDbgTrace+0xa6>
 800d66a:	a201      	add	r2, pc, #4	; (adr r2, 800d670 <OutputDbgTrace+0x18>)
 800d66c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d670:	0800d68d 	.word	0x0800d68d
 800d674:	0800d6af 	.word	0x0800d6af
 800d678:	0800d6b5 	.word	0x0800d6b5
 800d67c:	0800d6cf 	.word	0x0800d6cf
 800d680:	0800d6db 	.word	0x0800d6db
 800d684:	0800d6e1 	.word	0x0800d6e1
 800d688:	0800d6f3 	.word	0x0800d6f3
  {
    case TL_MB_MM_RELEASE_BUFFER:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800d68c:	683b      	ldr	r3, [r7, #0]
 800d68e:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 800d690:	68fb      	ldr	r3, [r7, #12]
 800d692:	7a5b      	ldrb	r3, [r3, #9]
 800d694:	2b0f      	cmp	r3, #15
 800d696:	d004      	beq.n	800d6a2 <OutputDbgTrace+0x4a>
 800d698:	2bff      	cmp	r3, #255	; 0xff
 800d69a:	d004      	beq.n	800d6a6 <OutputDbgTrace+0x4e>
 800d69c:	2b0e      	cmp	r3, #14
 800d69e:	d004      	beq.n	800d6aa <OutputDbgTrace+0x52>
          break;

        default:
          TL_MM_DBG_MSG("mm evt released: 0x%02X", p_evt_packet->evtserial.evt.evtcode);
          TL_MM_DBG_MSG(" buffer addr: 0x%08X", p_evt_packet);
          break;
 800d6a0:	e004      	b.n	800d6ac <OutputDbgTrace+0x54>
          break;
 800d6a2:	bf00      	nop
 800d6a4:	e02c      	b.n	800d700 <OutputDbgTrace+0xa8>
          break;
 800d6a6:	bf00      	nop
 800d6a8:	e02a      	b.n	800d700 <OutputDbgTrace+0xa8>
          break;
 800d6aa:	bf00      	nop
      }

      TL_MM_DBG_MSG("\r\n");
      break;
 800d6ac:	e028      	b.n	800d700 <OutputDbgTrace+0xa8>

    case TL_MB_BLE_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 800d6ae:	683b      	ldr	r3, [r7, #0]
 800d6b0:	60bb      	str	r3, [r7, #8]
        TL_HCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 800d6b2:	e025      	b.n	800d700 <OutputDbgTrace+0xa8>

    case TL_MB_BLE_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800d6b4:	683b      	ldr	r3, [r7, #0]
 800d6b6:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 800d6b8:	68fb      	ldr	r3, [r7, #12]
 800d6ba:	7a5b      	ldrb	r3, [r3, #9]
 800d6bc:	2b0e      	cmp	r3, #14
 800d6be:	d002      	beq.n	800d6c6 <OutputDbgTrace+0x6e>
 800d6c0:	2b0f      	cmp	r3, #15
 800d6c2:	d002      	beq.n	800d6ca <OutputDbgTrace+0x72>
          }
          break;

        default:
          TL_HCI_CMD_DBG_MSG("unknown ble rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 800d6c4:	e002      	b.n	800d6cc <OutputDbgTrace+0x74>
          break;
 800d6c6:	bf00      	nop
 800d6c8:	e01a      	b.n	800d700 <OutputDbgTrace+0xa8>
          break;
 800d6ca:	bf00      	nop
      }

      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800d6cc:	e018      	b.n	800d700 <OutputDbgTrace+0xa8>

    case TL_MB_BLE_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800d6ce:	683b      	ldr	r3, [r7, #0]
 800d6d0:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 800d6d2:	68fb      	ldr	r3, [r7, #12]
 800d6d4:	7a5b      	ldrb	r3, [r3, #9]
 800d6d6:	2bff      	cmp	r3, #255	; 0xff
      }

      TL_HCI_EVT_DBG_MSG("\r\n");

      TL_HCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800d6d8:	e012      	b.n	800d700 <OutputDbgTrace+0xa8>

    case TL_MB_SYS_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 800d6da:	683b      	ldr	r3, [r7, #0]
 800d6dc:	60bb      	str	r3, [r7, #8]
        TL_SHCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 800d6de:	e00f      	b.n	800d700 <OutputDbgTrace+0xa8>

    case TL_MB_SYS_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800d6e0:	683b      	ldr	r3, [r7, #0]
 800d6e2:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 800d6e4:	68fb      	ldr	r3, [r7, #12]
 800d6e6:	7a5b      	ldrb	r3, [r3, #9]
 800d6e8:	2b0e      	cmp	r3, #14
 800d6ea:	d000      	beq.n	800d6ee <OutputDbgTrace+0x96>
          }
          break;

        default:
          TL_SHCI_CMD_DBG_MSG("unknown sys rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 800d6ec:	e000      	b.n	800d6f0 <OutputDbgTrace+0x98>
          break;
 800d6ee:	bf00      	nop
      }

      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800d6f0:	e006      	b.n	800d700 <OutputDbgTrace+0xa8>

    case  TL_MB_SYS_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800d6f2:	683b      	ldr	r3, [r7, #0]
 800d6f4:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 800d6f6:	68fb      	ldr	r3, [r7, #12]
 800d6f8:	7a5b      	ldrb	r3, [r3, #9]
 800d6fa:	2bff      	cmp	r3, #255	; 0xff
      }

      TL_SHCI_EVT_DBG_MSG("\r\n");

      TL_SHCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800d6fc:	e000      	b.n	800d700 <OutputDbgTrace+0xa8>

    default:
      break;
 800d6fe:	bf00      	nop
  }

  return;
 800d700:	bf00      	nop
}
 800d702:	3714      	adds	r7, #20
 800d704:	46bd      	mov	sp, r7
 800d706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d70a:	4770      	bx	lr

0800d70c <PeerToPeer_Event_Handler>:
 * @brief  Event handler
 * @param  Event: Address of the buffer holding the Event
 * @retval Ack: Return whether the Event has been managed or not
 */
static SVCCTL_EvtAckStatus_t PeerToPeer_Event_Handler(void *Event)
{
 800d70c:	b580      	push	{r7, lr}
 800d70e:	b08a      	sub	sp, #40	; 0x28
 800d710:	af00      	add	r7, sp, #0
 800d712:	6078      	str	r0, [r7, #4]
  hci_event_pckt *event_pckt;
  evt_blue_aci *blue_evt;
  aci_gatt_attribute_modified_event_rp0    * attribute_modified;
  P2PS_STM_App_Notification_evt_t Notification;

  return_value = SVCCTL_EvtNotAck;
 800d714:	2300      	movs	r3, #0
 800d716:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  event_pckt = (hci_event_pckt *)(((hci_uart_pckt*)Event)->data);
 800d71a:	687b      	ldr	r3, [r7, #4]
 800d71c:	3301      	adds	r3, #1
 800d71e:	623b      	str	r3, [r7, #32]

  switch(event_pckt->evt)
 800d720:	6a3b      	ldr	r3, [r7, #32]
 800d722:	781b      	ldrb	r3, [r3, #0]
 800d724:	2bff      	cmp	r3, #255	; 0xff
 800d726:	d000      	beq.n	800d72a <PeerToPeer_Event_Handler+0x1e>
      }
    }
    break; /* HCI_EVT_VENDOR_SPECIFIC */

    default:
      break;
 800d728:	e04a      	b.n	800d7c0 <PeerToPeer_Event_Handler+0xb4>
      blue_evt = (evt_blue_aci*)event_pckt->data;
 800d72a:	6a3b      	ldr	r3, [r7, #32]
 800d72c:	3302      	adds	r3, #2
 800d72e:	61fb      	str	r3, [r7, #28]
      switch(blue_evt->ecode)
 800d730:	69fb      	ldr	r3, [r7, #28]
 800d732:	881b      	ldrh	r3, [r3, #0]
 800d734:	b29b      	uxth	r3, r3
 800d736:	461a      	mov	r2, r3
 800d738:	f640 4301 	movw	r3, #3073	; 0xc01
 800d73c:	429a      	cmp	r2, r3
 800d73e:	d000      	beq.n	800d742 <PeerToPeer_Event_Handler+0x36>
          break;
 800d740:	e03d      	b.n	800d7be <PeerToPeer_Event_Handler+0xb2>
          attribute_modified = (aci_gatt_attribute_modified_event_rp0*)blue_evt->data;
 800d742:	69fb      	ldr	r3, [r7, #28]
 800d744:	3302      	adds	r3, #2
 800d746:	61bb      	str	r3, [r7, #24]
            if(attribute_modified->Attr_Handle == (aPeerToPeerContext.P2PNotifyServerToClientCharHdle + 2))
 800d748:	69bb      	ldr	r3, [r7, #24]
 800d74a:	885b      	ldrh	r3, [r3, #2]
 800d74c:	b29b      	uxth	r3, r3
 800d74e:	461a      	mov	r2, r3
 800d750:	4b1e      	ldr	r3, [pc, #120]	; (800d7cc <PeerToPeer_Event_Handler+0xc0>)
 800d752:	889b      	ldrh	r3, [r3, #4]
 800d754:	3302      	adds	r3, #2
 800d756:	429a      	cmp	r2, r3
 800d758:	d118      	bne.n	800d78c <PeerToPeer_Event_Handler+0x80>
              return_value = SVCCTL_EvtAckFlowEnable;
 800d75a:	2301      	movs	r3, #1
 800d75c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
              if(attribute_modified->Attr_Data[0] & COMSVC_Notification)
 800d760:	69bb      	ldr	r3, [r7, #24]
 800d762:	7a1b      	ldrb	r3, [r3, #8]
 800d764:	f003 0301 	and.w	r3, r3, #1
 800d768:	2b00      	cmp	r3, #0
 800d76a:	d007      	beq.n	800d77c <PeerToPeer_Event_Handler+0x70>
                Notification.P2P_Evt_Opcode = P2PS_STM__NOTIFY_ENABLED_EVT;
 800d76c:	2300      	movs	r3, #0
 800d76e:	723b      	strb	r3, [r7, #8]
                P2PS_STM_App_Notification(&Notification);
 800d770:	f107 0308 	add.w	r3, r7, #8
 800d774:	4618      	mov	r0, r3
 800d776:	f7f3 fefb 	bl	8001570 <P2PS_STM_App_Notification>
        break;
 800d77a:	e01f      	b.n	800d7bc <PeerToPeer_Event_Handler+0xb0>
                Notification.P2P_Evt_Opcode = P2PS_STM_NOTIFY_DISABLED_EVT;
 800d77c:	2301      	movs	r3, #1
 800d77e:	723b      	strb	r3, [r7, #8]
                P2PS_STM_App_Notification(&Notification);
 800d780:	f107 0308 	add.w	r3, r7, #8
 800d784:	4618      	mov	r0, r3
 800d786:	f7f3 fef3 	bl	8001570 <P2PS_STM_App_Notification>
        break;
 800d78a:	e017      	b.n	800d7bc <PeerToPeer_Event_Handler+0xb0>
            else if(attribute_modified->Attr_Handle == (aPeerToPeerContext.P2PWriteClientToServerCharHdle + 1))
 800d78c:	69bb      	ldr	r3, [r7, #24]
 800d78e:	885b      	ldrh	r3, [r3, #2]
 800d790:	b29b      	uxth	r3, r3
 800d792:	461a      	mov	r2, r3
 800d794:	4b0d      	ldr	r3, [pc, #52]	; (800d7cc <PeerToPeer_Event_Handler+0xc0>)
 800d796:	885b      	ldrh	r3, [r3, #2]
 800d798:	3301      	adds	r3, #1
 800d79a:	429a      	cmp	r2, r3
 800d79c:	d10e      	bne.n	800d7bc <PeerToPeer_Event_Handler+0xb0>
              Notification.P2P_Evt_Opcode = P2PS_STM_WRITE_EVT;
 800d79e:	2303      	movs	r3, #3
 800d7a0:	723b      	strb	r3, [r7, #8]
              Notification.DataTransfered.Length=attribute_modified->Attr_Data_Length;
 800d7a2:	69bb      	ldr	r3, [r7, #24]
 800d7a4:	88db      	ldrh	r3, [r3, #6]
 800d7a6:	b29b      	uxth	r3, r3
 800d7a8:	b2db      	uxtb	r3, r3
 800d7aa:	743b      	strb	r3, [r7, #16]
              Notification.DataTransfered.pPayload=attribute_modified->Attr_Data;
 800d7ac:	69bb      	ldr	r3, [r7, #24]
 800d7ae:	3308      	adds	r3, #8
 800d7b0:	60fb      	str	r3, [r7, #12]
              P2PS_STM_App_Notification(&Notification);
 800d7b2:	f107 0308 	add.w	r3, r7, #8
 800d7b6:	4618      	mov	r0, r3
 800d7b8:	f7f3 feda 	bl	8001570 <P2PS_STM_App_Notification>
        break;
 800d7bc:	bf00      	nop
    break; /* HCI_EVT_VENDOR_SPECIFIC */
 800d7be:	bf00      	nop
  }

  return(return_value);
 800d7c0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}/* end SVCCTL_EvtAckStatus_t */
 800d7c4:	4618      	mov	r0, r3
 800d7c6:	3728      	adds	r7, #40	; 0x28
 800d7c8:	46bd      	mov	sp, r7
 800d7ca:	bd80      	pop	{r7, pc}
 800d7cc:	2000039c 	.word	0x2000039c

0800d7d0 <P2PS_STM_Init>:
 * @brief  Service initialization
 * @param  None
 * @retval None
 */
void P2PS_STM_Init(void)
{
 800d7d0:	b580      	push	{r7, lr}
 800d7d2:	b08a      	sub	sp, #40	; 0x28
 800d7d4:	af06      	add	r7, sp, #24
  Char_UUID_t  uuid16;

  /**
   *	Register the event handler to the BLE controller
   */
  SVCCTL_RegisterSvcHandler(PeerToPeer_Event_Handler);
 800d7d6:	484a      	ldr	r0, [pc, #296]	; (800d900 <P2PS_STM_Init+0x130>)
 800d7d8:	f7fe fa30 	bl	800bc3c <SVCCTL_RegisterSvcHandler>
     *                                2 for P2P Write characteristic +
     *                                2 for P2P Notify characteristic +
     *                                1 for client char configuration descriptor +
     *
     */
    COPY_P2P_SERVICE_UUID(uuid16.Char_UUID_128);
 800d7dc:	238f      	movs	r3, #143	; 0x8f
 800d7de:	703b      	strb	r3, [r7, #0]
 800d7e0:	23e5      	movs	r3, #229	; 0xe5
 800d7e2:	707b      	strb	r3, [r7, #1]
 800d7e4:	23b3      	movs	r3, #179	; 0xb3
 800d7e6:	70bb      	strb	r3, [r7, #2]
 800d7e8:	23d5      	movs	r3, #213	; 0xd5
 800d7ea:	70fb      	strb	r3, [r7, #3]
 800d7ec:	232e      	movs	r3, #46	; 0x2e
 800d7ee:	713b      	strb	r3, [r7, #4]
 800d7f0:	237f      	movs	r3, #127	; 0x7f
 800d7f2:	717b      	strb	r3, [r7, #5]
 800d7f4:	234a      	movs	r3, #74	; 0x4a
 800d7f6:	71bb      	strb	r3, [r7, #6]
 800d7f8:	2398      	movs	r3, #152	; 0x98
 800d7fa:	71fb      	strb	r3, [r7, #7]
 800d7fc:	232a      	movs	r3, #42	; 0x2a
 800d7fe:	723b      	strb	r3, [r7, #8]
 800d800:	2348      	movs	r3, #72	; 0x48
 800d802:	727b      	strb	r3, [r7, #9]
 800d804:	237a      	movs	r3, #122	; 0x7a
 800d806:	72bb      	strb	r3, [r7, #10]
 800d808:	23cc      	movs	r3, #204	; 0xcc
 800d80a:	72fb      	strb	r3, [r7, #11]
 800d80c:	2340      	movs	r3, #64	; 0x40
 800d80e:	733b      	strb	r3, [r7, #12]
 800d810:	23fe      	movs	r3, #254	; 0xfe
 800d812:	737b      	strb	r3, [r7, #13]
 800d814:	2300      	movs	r3, #0
 800d816:	73bb      	strb	r3, [r7, #14]
 800d818:	2300      	movs	r3, #0
 800d81a:	73fb      	strb	r3, [r7, #15]
    aci_gatt_add_service(UUID_TYPE_128,
 800d81c:	4639      	mov	r1, r7
 800d81e:	4b39      	ldr	r3, [pc, #228]	; (800d904 <P2PS_STM_Init+0x134>)
 800d820:	9300      	str	r3, [sp, #0]
 800d822:	2308      	movs	r3, #8
 800d824:	2201      	movs	r2, #1
 800d826:	2002      	movs	r0, #2
 800d828:	f7fe fe39 	bl	800c49e <aci_gatt_add_service>
                      &(aPeerToPeerContext.PeerToPeerSvcHdle));

    /**
     *  Add LED Characteristic
     */
    COPY_P2P_WRITE_CHAR_UUID(uuid16.Char_UUID_128);
 800d82c:	2319      	movs	r3, #25
 800d82e:	703b      	strb	r3, [r7, #0]
 800d830:	23ed      	movs	r3, #237	; 0xed
 800d832:	707b      	strb	r3, [r7, #1]
 800d834:	2382      	movs	r3, #130	; 0x82
 800d836:	70bb      	strb	r3, [r7, #2]
 800d838:	23ae      	movs	r3, #174	; 0xae
 800d83a:	70fb      	strb	r3, [r7, #3]
 800d83c:	23ed      	movs	r3, #237	; 0xed
 800d83e:	713b      	strb	r3, [r7, #4]
 800d840:	2321      	movs	r3, #33	; 0x21
 800d842:	717b      	strb	r3, [r7, #5]
 800d844:	234c      	movs	r3, #76	; 0x4c
 800d846:	71bb      	strb	r3, [r7, #6]
 800d848:	239d      	movs	r3, #157	; 0x9d
 800d84a:	71fb      	strb	r3, [r7, #7]
 800d84c:	2341      	movs	r3, #65	; 0x41
 800d84e:	723b      	strb	r3, [r7, #8]
 800d850:	2345      	movs	r3, #69	; 0x45
 800d852:	727b      	strb	r3, [r7, #9]
 800d854:	2322      	movs	r3, #34	; 0x22
 800d856:	72bb      	strb	r3, [r7, #10]
 800d858:	238e      	movs	r3, #142	; 0x8e
 800d85a:	72fb      	strb	r3, [r7, #11]
 800d85c:	2341      	movs	r3, #65	; 0x41
 800d85e:	733b      	strb	r3, [r7, #12]
 800d860:	23fe      	movs	r3, #254	; 0xfe
 800d862:	737b      	strb	r3, [r7, #13]
 800d864:	2300      	movs	r3, #0
 800d866:	73bb      	strb	r3, [r7, #14]
 800d868:	2300      	movs	r3, #0
 800d86a:	73fb      	strb	r3, [r7, #15]
    aci_gatt_add_char(aPeerToPeerContext.PeerToPeerSvcHdle,
 800d86c:	4b25      	ldr	r3, [pc, #148]	; (800d904 <P2PS_STM_Init+0x134>)
 800d86e:	8818      	ldrh	r0, [r3, #0]
 800d870:	463a      	mov	r2, r7
 800d872:	4b25      	ldr	r3, [pc, #148]	; (800d908 <P2PS_STM_Init+0x138>)
 800d874:	9305      	str	r3, [sp, #20]
 800d876:	2301      	movs	r3, #1
 800d878:	9304      	str	r3, [sp, #16]
 800d87a:	230a      	movs	r3, #10
 800d87c:	9303      	str	r3, [sp, #12]
 800d87e:	2301      	movs	r3, #1
 800d880:	9302      	str	r3, [sp, #8]
 800d882:	2300      	movs	r3, #0
 800d884:	9301      	str	r3, [sp, #4]
 800d886:	2306      	movs	r3, #6
 800d888:	9300      	str	r3, [sp, #0]
 800d88a:	2314      	movs	r3, #20
 800d88c:	2102      	movs	r1, #2
 800d88e:	f7fe feb5 	bl	800c5fc <aci_gatt_add_char>
                      &(aPeerToPeerContext.P2PWriteClientToServerCharHdle));

    /**
     *   Add Button Characteristic
     */
    COPY_P2P_NOTIFY_UUID(uuid16.Char_UUID_128);
 800d892:	2319      	movs	r3, #25
 800d894:	703b      	strb	r3, [r7, #0]
 800d896:	23ed      	movs	r3, #237	; 0xed
 800d898:	707b      	strb	r3, [r7, #1]
 800d89a:	2382      	movs	r3, #130	; 0x82
 800d89c:	70bb      	strb	r3, [r7, #2]
 800d89e:	23ae      	movs	r3, #174	; 0xae
 800d8a0:	70fb      	strb	r3, [r7, #3]
 800d8a2:	23ed      	movs	r3, #237	; 0xed
 800d8a4:	713b      	strb	r3, [r7, #4]
 800d8a6:	2321      	movs	r3, #33	; 0x21
 800d8a8:	717b      	strb	r3, [r7, #5]
 800d8aa:	234c      	movs	r3, #76	; 0x4c
 800d8ac:	71bb      	strb	r3, [r7, #6]
 800d8ae:	239d      	movs	r3, #157	; 0x9d
 800d8b0:	71fb      	strb	r3, [r7, #7]
 800d8b2:	2341      	movs	r3, #65	; 0x41
 800d8b4:	723b      	strb	r3, [r7, #8]
 800d8b6:	2345      	movs	r3, #69	; 0x45
 800d8b8:	727b      	strb	r3, [r7, #9]
 800d8ba:	2322      	movs	r3, #34	; 0x22
 800d8bc:	72bb      	strb	r3, [r7, #10]
 800d8be:	238e      	movs	r3, #142	; 0x8e
 800d8c0:	72fb      	strb	r3, [r7, #11]
 800d8c2:	2342      	movs	r3, #66	; 0x42
 800d8c4:	733b      	strb	r3, [r7, #12]
 800d8c6:	23fe      	movs	r3, #254	; 0xfe
 800d8c8:	737b      	strb	r3, [r7, #13]
 800d8ca:	2300      	movs	r3, #0
 800d8cc:	73bb      	strb	r3, [r7, #14]
 800d8ce:	2300      	movs	r3, #0
 800d8d0:	73fb      	strb	r3, [r7, #15]
    aci_gatt_add_char(aPeerToPeerContext.PeerToPeerSvcHdle,
 800d8d2:	4b0c      	ldr	r3, [pc, #48]	; (800d904 <P2PS_STM_Init+0x134>)
 800d8d4:	8818      	ldrh	r0, [r3, #0]
 800d8d6:	463a      	mov	r2, r7
 800d8d8:	4b0c      	ldr	r3, [pc, #48]	; (800d90c <P2PS_STM_Init+0x13c>)
 800d8da:	9305      	str	r3, [sp, #20]
 800d8dc:	2301      	movs	r3, #1
 800d8de:	9304      	str	r3, [sp, #16]
 800d8e0:	230a      	movs	r3, #10
 800d8e2:	9303      	str	r3, [sp, #12]
 800d8e4:	2301      	movs	r3, #1
 800d8e6:	9302      	str	r3, [sp, #8]
 800d8e8:	2300      	movs	r3, #0
 800d8ea:	9301      	str	r3, [sp, #4]
 800d8ec:	2310      	movs	r3, #16
 800d8ee:	9300      	str	r3, [sp, #0]
 800d8f0:	2314      	movs	r3, #20
 800d8f2:	2102      	movs	r1, #2
 800d8f4:	f7fe fe82 	bl	800c5fc <aci_gatt_add_char>
                      0,
                      &(aPeerToPeerContext.RebootReqCharHdle));
#endif


  return;
 800d8f8:	bf00      	nop
}
 800d8fa:	3710      	adds	r7, #16
 800d8fc:	46bd      	mov	sp, r7
 800d8fe:	bd80      	pop	{r7, pc}
 800d900:	0800d70d 	.word	0x0800d70d
 800d904:	2000039c 	.word	0x2000039c
 800d908:	2000039e 	.word	0x2000039e
 800d90c:	200003a0 	.word	0x200003a0

0800d910 <P2PS_STM_App_Update_Int8>:

  return result;
}

tBleStatus P2PS_STM_App_Update_Int8(uint16_t UUID, uint8_t *pPayload, uint8_t num_bytes)
{
 800d910:	b580      	push	{r7, lr}
 800d912:	b086      	sub	sp, #24
 800d914:	af02      	add	r7, sp, #8
 800d916:	4603      	mov	r3, r0
 800d918:	6039      	str	r1, [r7, #0]
 800d91a:	80fb      	strh	r3, [r7, #6]
 800d91c:	4613      	mov	r3, r2
 800d91e:	717b      	strb	r3, [r7, #5]
  tBleStatus result = BLE_STATUS_INVALID_PARAMS;
 800d920:	2342      	movs	r3, #66	; 0x42
 800d922:	73fb      	strb	r3, [r7, #15]
  switch(UUID)
 800d924:	88fb      	ldrh	r3, [r7, #6]
 800d926:	f64f 6242 	movw	r2, #65090	; 0xfe42
 800d92a:	4293      	cmp	r3, r2
 800d92c:	d000      	beq.n	800d930 <P2PS_STM_App_Update_Int8+0x20>
                             (uint8_t *)  pPayload);

      break;

    default:
      break;
 800d92e:	e00d      	b.n	800d94c <P2PS_STM_App_Update_Int8+0x3c>
     result = aci_gatt_update_char_value(aPeerToPeerContext.PeerToPeerSvcHdle,
 800d930:	4b09      	ldr	r3, [pc, #36]	; (800d958 <P2PS_STM_App_Update_Int8+0x48>)
 800d932:	8818      	ldrh	r0, [r3, #0]
 800d934:	4b08      	ldr	r3, [pc, #32]	; (800d958 <P2PS_STM_App_Update_Int8+0x48>)
 800d936:	8899      	ldrh	r1, [r3, #4]
 800d938:	797a      	ldrb	r2, [r7, #5]
 800d93a:	683b      	ldr	r3, [r7, #0]
 800d93c:	9300      	str	r3, [sp, #0]
 800d93e:	4613      	mov	r3, r2
 800d940:	2200      	movs	r2, #0
 800d942:	f7fe ff45 	bl	800c7d0 <aci_gatt_update_char_value>
 800d946:	4603      	mov	r3, r0
 800d948:	73fb      	strb	r3, [r7, #15]
      break;
 800d94a:	bf00      	nop
  }

  return result;
 800d94c:	7bfb      	ldrb	r3, [r7, #15]
}/* end P2PS_STM_Init() */
 800d94e:	4618      	mov	r0, r3
 800d950:	3710      	adds	r7, #16
 800d952:	46bd      	mov	sp, r7
 800d954:	bd80      	pop	{r7, pc}
 800d956:	bf00      	nop
 800d958:	2000039c 	.word	0x2000039c

0800d95c <DbgTrace_TxCpltCallback>:
 * @note   Indicate the end of the transmission of a DBG_TRACE trace buffer to DBG_TRACE USART. If queue
 *         contains new trace data to transmit, start a new transmission.
 * @retval None
 */
static void DbgTrace_TxCpltCallback(void)
{
 800d95c:	b580      	push	{r7, lr}
 800d95e:	b086      	sub	sp, #24
 800d960:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d962:	f3ef 8310 	mrs	r3, PRIMASK
 800d966:	60fb      	str	r3, [r7, #12]
  return(result);
 800d968:	68fb      	ldr	r3, [r7, #12]
#if (DBG_TRACE_USE_CIRCULAR_QUEUE != 0)
  uint8_t* buf;
  uint16_t bufSize;

  BACKUP_PRIMASK();
 800d96a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800d96c:	b672      	cpsid	i

  DISABLE_IRQ();			/**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  /* Remove element just sent to UART */
  CircularQueue_Remove(&MsgDbgTraceQueue,&bufSize);
 800d96e:	1cbb      	adds	r3, r7, #2
 800d970:	4619      	mov	r1, r3
 800d972:	4812      	ldr	r0, [pc, #72]	; (800d9bc <DbgTrace_TxCpltCallback+0x60>)
 800d974:	f000 fbd7 	bl	800e126 <CircularQueue_Remove>

  /* Sense if new data to be sent */
  buf=CircularQueue_Sense(&MsgDbgTraceQueue,&bufSize);
 800d978:	1cbb      	adds	r3, r7, #2
 800d97a:	4619      	mov	r1, r3
 800d97c:	480f      	ldr	r0, [pc, #60]	; (800d9bc <DbgTrace_TxCpltCallback+0x60>)
 800d97e:	f000 fcc6 	bl	800e30e <CircularQueue_Sense>
 800d982:	6138      	str	r0, [r7, #16]


  if ( buf != NULL) 
 800d984:	693b      	ldr	r3, [r7, #16]
 800d986:	2b00      	cmp	r3, #0
 800d988:	d00b      	beq.n	800d9a2 <DbgTrace_TxCpltCallback+0x46>
 800d98a:	697b      	ldr	r3, [r7, #20]
 800d98c:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d98e:	68bb      	ldr	r3, [r7, #8]
 800d990:	f383 8810 	msr	PRIMASK, r3
  {
    RESTORE_PRIMASK();
    DbgOutputTraces((uint8_t*)buf, bufSize, DbgTrace_TxCpltCallback);
 800d994:	887b      	ldrh	r3, [r7, #2]
 800d996:	4a0a      	ldr	r2, [pc, #40]	; (800d9c0 <DbgTrace_TxCpltCallback+0x64>)
 800d998:	4619      	mov	r1, r3
 800d99a:	6938      	ldr	r0, [r7, #16]
 800d99c:	f7f4 fa90 	bl	8001ec0 <DbgOutputTraces>

  DbgTracePeripheralReady = SET;

  RESTORE_PRIMASK();
#endif
}
 800d9a0:	e007      	b.n	800d9b2 <DbgTrace_TxCpltCallback+0x56>
    DbgTracePeripheralReady = SET;
 800d9a2:	4b08      	ldr	r3, [pc, #32]	; (800d9c4 <DbgTrace_TxCpltCallback+0x68>)
 800d9a4:	2201      	movs	r2, #1
 800d9a6:	701a      	strb	r2, [r3, #0]
 800d9a8:	697b      	ldr	r3, [r7, #20]
 800d9aa:	607b      	str	r3, [r7, #4]
 800d9ac:	687b      	ldr	r3, [r7, #4]
 800d9ae:	f383 8810 	msr	PRIMASK, r3
}
 800d9b2:	bf00      	nop
 800d9b4:	3718      	adds	r7, #24
 800d9b6:	46bd      	mov	sp, r7
 800d9b8:	bd80      	pop	{r7, pc}
 800d9ba:	bf00      	nop
 800d9bc:	2000045c 	.word	0x2000045c
 800d9c0:	0800d95d 	.word	0x0800d95d
 800d9c4:	2000001d 	.word	0x2000001d

0800d9c8 <DbgTraceInit>:
#endif

void DbgTraceInit( void )
{
 800d9c8:	b580      	push	{r7, lr}
 800d9ca:	b082      	sub	sp, #8
 800d9cc:	af02      	add	r7, sp, #8
#if (( CFG_DEBUG_TRACE_FULL != 0 ) || ( CFG_DEBUG_TRACE_LIGHT != 0 ))
  DbgOutputInit();
 800d9ce:	f7f4 fa70 	bl	8001eb2 <DbgOutputInit>
#if (DBG_TRACE_USE_CIRCULAR_QUEUE != 0)
  CircularQueue_Init(&MsgDbgTraceQueue, MsgDbgTraceQueueBuff, DBG_TRACE_MSG_QUEUE_SIZE, 0, CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG);
 800d9d2:	2302      	movs	r3, #2
 800d9d4:	9300      	str	r3, [sp, #0]
 800d9d6:	2300      	movs	r3, #0
 800d9d8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800d9dc:	4903      	ldr	r1, [pc, #12]	; (800d9ec <DbgTraceInit+0x24>)
 800d9de:	4804      	ldr	r0, [pc, #16]	; (800d9f0 <DbgTraceInit+0x28>)
 800d9e0:	f000 f948 	bl	800dc74 <CircularQueue_Init>
#endif 
#endif
  return;
 800d9e4:	bf00      	nop
}
 800d9e6:	46bd      	mov	sp, r7
 800d9e8:	bd80      	pop	{r7, pc}
 800d9ea:	bf00      	nop
 800d9ec:	2000047c 	.word	0x2000047c
 800d9f0:	2000045c 	.word	0x2000045c

0800d9f4 <_write>:
 * @param	bufsize buffer size
 * @param	...: arguments to be formatted in format string
 * @retval none
 */
size_t _write(int handle, const unsigned char * buf, size_t bufSize)
{
 800d9f4:	b580      	push	{r7, lr}
 800d9f6:	b084      	sub	sp, #16
 800d9f8:	af00      	add	r7, sp, #0
 800d9fa:	60f8      	str	r0, [r7, #12]
 800d9fc:	60b9      	str	r1, [r7, #8]
 800d9fe:	607a      	str	r2, [r7, #4]
  return ( DbgTraceWrite(handle, buf, bufSize) );
 800da00:	687a      	ldr	r2, [r7, #4]
 800da02:	68b9      	ldr	r1, [r7, #8]
 800da04:	68f8      	ldr	r0, [r7, #12]
 800da06:	f000 f805 	bl	800da14 <DbgTraceWrite>
 800da0a:	4603      	mov	r3, r0
}
 800da0c:	4618      	mov	r0, r3
 800da0e:	3710      	adds	r7, #16
 800da10:	46bd      	mov	sp, r7
 800da12:	bd80      	pop	{r7, pc}

0800da14 <DbgTraceWrite>:
 * @param buf buffer to write
 * @param bufsize buffer size
 * @retval Number of elements written
 */
size_t DbgTraceWrite(int handle, const unsigned char * buf, size_t bufSize)
{
 800da14:	b580      	push	{r7, lr}
 800da16:	b08a      	sub	sp, #40	; 0x28
 800da18:	af00      	add	r7, sp, #0
 800da1a:	60f8      	str	r0, [r7, #12]
 800da1c:	60b9      	str	r1, [r7, #8]
 800da1e:	607a      	str	r2, [r7, #4]
  size_t chars_written = 0;
 800da20:	2300      	movs	r3, #0
 800da22:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800da24:	f3ef 8310 	mrs	r3, PRIMASK
 800da28:	61bb      	str	r3, [r7, #24]
  return(result);
 800da2a:	69bb      	ldr	r3, [r7, #24]
  uint8_t* buffer;

  BACKUP_PRIMASK();
 800da2c:	623b      	str	r3, [r7, #32]

  /* Ignore flushes */
  if ( handle == -1 )
 800da2e:	68fb      	ldr	r3, [r7, #12]
 800da30:	f1b3 3fff 	cmp.w	r3, #4294967295
 800da34:	d102      	bne.n	800da3c <DbgTraceWrite+0x28>
  {
    chars_written = ( size_t ) 0;
 800da36:	2300      	movs	r3, #0
 800da38:	627b      	str	r3, [r7, #36]	; 0x24
 800da3a:	e034      	b.n	800daa6 <DbgTraceWrite+0x92>
  }
  /* Only allow stdout/stderr output */
  else if ( ( handle != 1 ) && ( handle != 2 ) )
 800da3c:	68fb      	ldr	r3, [r7, #12]
 800da3e:	2b01      	cmp	r3, #1
 800da40:	d006      	beq.n	800da50 <DbgTraceWrite+0x3c>
 800da42:	68fb      	ldr	r3, [r7, #12]
 800da44:	2b02      	cmp	r3, #2
 800da46:	d003      	beq.n	800da50 <DbgTraceWrite+0x3c>
  {
    chars_written = ( size_t ) - 1;
 800da48:	f04f 33ff 	mov.w	r3, #4294967295
 800da4c:	627b      	str	r3, [r7, #36]	; 0x24
 800da4e:	e02a      	b.n	800daa6 <DbgTraceWrite+0x92>
  }
  /* Parameters OK, call the low-level character output routine */
  else if (bufSize != 0)
 800da50:	687b      	ldr	r3, [r7, #4]
 800da52:	2b00      	cmp	r3, #0
 800da54:	d027      	beq.n	800daa6 <DbgTraceWrite+0x92>
  {
    chars_written = bufSize;
 800da56:	687b      	ldr	r3, [r7, #4]
 800da58:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("cpsid i" : : : "memory");
 800da5a:	b672      	cpsid	i
    /* If queue emepty and TX free, send directly */
    /* CS Start */

#if (DBG_TRACE_USE_CIRCULAR_QUEUE != 0)
    DISABLE_IRQ();      /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
    buffer=CircularQueue_Add(&MsgDbgTraceQueue,(uint8_t*)buf, bufSize,1);
 800da5c:	687b      	ldr	r3, [r7, #4]
 800da5e:	b29a      	uxth	r2, r3
 800da60:	2301      	movs	r3, #1
 800da62:	68b9      	ldr	r1, [r7, #8]
 800da64:	4812      	ldr	r0, [pc, #72]	; (800dab0 <DbgTraceWrite+0x9c>)
 800da66:	f000 f937 	bl	800dcd8 <CircularQueue_Add>
 800da6a:	61f8      	str	r0, [r7, #28]
    if (buffer && DbgTracePeripheralReady)
 800da6c:	69fb      	ldr	r3, [r7, #28]
 800da6e:	2b00      	cmp	r3, #0
 800da70:	d014      	beq.n	800da9c <DbgTraceWrite+0x88>
 800da72:	4b10      	ldr	r3, [pc, #64]	; (800dab4 <DbgTraceWrite+0xa0>)
 800da74:	781b      	ldrb	r3, [r3, #0]
 800da76:	b2db      	uxtb	r3, r3
 800da78:	2b00      	cmp	r3, #0
 800da7a:	d00f      	beq.n	800da9c <DbgTraceWrite+0x88>
    {
      DbgTracePeripheralReady = RESET;
 800da7c:	4b0d      	ldr	r3, [pc, #52]	; (800dab4 <DbgTraceWrite+0xa0>)
 800da7e:	2200      	movs	r2, #0
 800da80:	701a      	strb	r2, [r3, #0]
 800da82:	6a3b      	ldr	r3, [r7, #32]
 800da84:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800da86:	697b      	ldr	r3, [r7, #20]
 800da88:	f383 8810 	msr	PRIMASK, r3
      RESTORE_PRIMASK();
      DbgOutputTraces((uint8_t*)buffer, bufSize, DbgTrace_TxCpltCallback);
 800da8c:	687b      	ldr	r3, [r7, #4]
 800da8e:	b29b      	uxth	r3, r3
 800da90:	4a09      	ldr	r2, [pc, #36]	; (800dab8 <DbgTraceWrite+0xa4>)
 800da92:	4619      	mov	r1, r3
 800da94:	69f8      	ldr	r0, [r7, #28]
 800da96:	f7f4 fa13 	bl	8001ec0 <DbgOutputTraces>
 800da9a:	e004      	b.n	800daa6 <DbgTraceWrite+0x92>
 800da9c:	6a3b      	ldr	r3, [r7, #32]
 800da9e:	613b      	str	r3, [r7, #16]
 800daa0:	693b      	ldr	r3, [r7, #16]
 800daa2:	f383 8810 	msr	PRIMASK, r3
    DbgOutputTraces((uint8_t*)buf, bufSize, DbgTrace_TxCpltCallback);
    while (!DbgTracePeripheralReady);
#endif
    /* CS END */
  }
  return ( chars_written );
 800daa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800daa8:	4618      	mov	r0, r3
 800daaa:	3728      	adds	r7, #40	; 0x28
 800daac:	46bd      	mov	sp, r7
 800daae:	bd80      	pop	{r7, pc}
 800dab0:	2000045c 	.word	0x2000045c
 800dab4:	2000001d 	.word	0x2000001d
 800dab8:	0800d95d 	.word	0x0800d95d

0800dabc <OTP_Read>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

uint8_t * OTP_Read( uint8_t id )
{
 800dabc:	b480      	push	{r7}
 800dabe:	b085      	sub	sp, #20
 800dac0:	af00      	add	r7, sp, #0
 800dac2:	4603      	mov	r3, r0
 800dac4:	71fb      	strb	r3, [r7, #7]
  uint8_t *p_id;

  p_id = (uint8_t*)(CFG_OTP_END_ADRESS - 7) ;
 800dac6:	4b0f      	ldr	r3, [pc, #60]	; (800db04 <OTP_Read+0x48>)
 800dac8:	60fb      	str	r3, [r7, #12]

  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 800daca:	e002      	b.n	800dad2 <OTP_Read+0x16>
  {
    p_id -= 8 ;
 800dacc:	68fb      	ldr	r3, [r7, #12]
 800dace:	3b08      	subs	r3, #8
 800dad0:	60fb      	str	r3, [r7, #12]
  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 800dad2:	68fb      	ldr	r3, [r7, #12]
 800dad4:	3307      	adds	r3, #7
 800dad6:	781b      	ldrb	r3, [r3, #0]
 800dad8:	79fa      	ldrb	r2, [r7, #7]
 800dada:	429a      	cmp	r2, r3
 800dadc:	d003      	beq.n	800dae6 <OTP_Read+0x2a>
 800dade:	68fb      	ldr	r3, [r7, #12]
 800dae0:	4a09      	ldr	r2, [pc, #36]	; (800db08 <OTP_Read+0x4c>)
 800dae2:	4293      	cmp	r3, r2
 800dae4:	d1f2      	bne.n	800dacc <OTP_Read+0x10>
  }

  if((*( p_id + 7 )) != id)
 800dae6:	68fb      	ldr	r3, [r7, #12]
 800dae8:	3307      	adds	r3, #7
 800daea:	781b      	ldrb	r3, [r3, #0]
 800daec:	79fa      	ldrb	r2, [r7, #7]
 800daee:	429a      	cmp	r2, r3
 800daf0:	d001      	beq.n	800daf6 <OTP_Read+0x3a>
  {
    p_id = 0 ;
 800daf2:	2300      	movs	r3, #0
 800daf4:	60fb      	str	r3, [r7, #12]
  }

  return p_id ;
 800daf6:	68fb      	ldr	r3, [r7, #12]
}
 800daf8:	4618      	mov	r0, r3
 800dafa:	3714      	adds	r7, #20
 800dafc:	46bd      	mov	sp, r7
 800dafe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db02:	4770      	bx	lr
 800db04:	1fff73f8 	.word	0x1fff73f8
 800db08:	1fff7000 	.word	0x1fff7000

0800db0c <LST_init_head>:

/******************************************************************************
 * Function Definitions 
 ******************************************************************************/
void LST_init_head (tListNode * listHead)
{
 800db0c:	b480      	push	{r7}
 800db0e:	b083      	sub	sp, #12
 800db10:	af00      	add	r7, sp, #0
 800db12:	6078      	str	r0, [r7, #4]
  listHead->next = listHead;
 800db14:	687b      	ldr	r3, [r7, #4]
 800db16:	687a      	ldr	r2, [r7, #4]
 800db18:	601a      	str	r2, [r3, #0]
  listHead->prev = listHead;
 800db1a:	687b      	ldr	r3, [r7, #4]
 800db1c:	687a      	ldr	r2, [r7, #4]
 800db1e:	605a      	str	r2, [r3, #4]
}
 800db20:	bf00      	nop
 800db22:	370c      	adds	r7, #12
 800db24:	46bd      	mov	sp, r7
 800db26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db2a:	4770      	bx	lr

0800db2c <LST_is_empty>:

uint8_t LST_is_empty (tListNode * listHead)
{
 800db2c:	b480      	push	{r7}
 800db2e:	b087      	sub	sp, #28
 800db30:	af00      	add	r7, sp, #0
 800db32:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800db34:	f3ef 8310 	mrs	r3, PRIMASK
 800db38:	60fb      	str	r3, [r7, #12]
  return(result);
 800db3a:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;
  uint8_t return_value;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800db3c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800db3e:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  if(listHead->next == listHead)
 800db40:	687b      	ldr	r3, [r7, #4]
 800db42:	681b      	ldr	r3, [r3, #0]
 800db44:	687a      	ldr	r2, [r7, #4]
 800db46:	429a      	cmp	r2, r3
 800db48:	d102      	bne.n	800db50 <LST_is_empty+0x24>
  {
    return_value = TRUE;
 800db4a:	2301      	movs	r3, #1
 800db4c:	75fb      	strb	r3, [r7, #23]
 800db4e:	e001      	b.n	800db54 <LST_is_empty+0x28>
  }
  else
  {
    return_value = FALSE;
 800db50:	2300      	movs	r3, #0
 800db52:	75fb      	strb	r3, [r7, #23]
 800db54:	693b      	ldr	r3, [r7, #16]
 800db56:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800db58:	68bb      	ldr	r3, [r7, #8]
 800db5a:	f383 8810 	msr	PRIMASK, r3
  }
  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/

  return return_value;
 800db5e:	7dfb      	ldrb	r3, [r7, #23]
}
 800db60:	4618      	mov	r0, r3
 800db62:	371c      	adds	r7, #28
 800db64:	46bd      	mov	sp, r7
 800db66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db6a:	4770      	bx	lr

0800db6c <LST_insert_head>:

void LST_insert_head (tListNode * listHead, tListNode * node)
{
 800db6c:	b480      	push	{r7}
 800db6e:	b087      	sub	sp, #28
 800db70:	af00      	add	r7, sp, #0
 800db72:	6078      	str	r0, [r7, #4]
 800db74:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800db76:	f3ef 8310 	mrs	r3, PRIMASK
 800db7a:	60fb      	str	r3, [r7, #12]
  return(result);
 800db7c:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800db7e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800db80:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead->next;
 800db82:	687b      	ldr	r3, [r7, #4]
 800db84:	681a      	ldr	r2, [r3, #0]
 800db86:	683b      	ldr	r3, [r7, #0]
 800db88:	601a      	str	r2, [r3, #0]
  node->prev = listHead;
 800db8a:	683b      	ldr	r3, [r7, #0]
 800db8c:	687a      	ldr	r2, [r7, #4]
 800db8e:	605a      	str	r2, [r3, #4]
  listHead->next = node;
 800db90:	687b      	ldr	r3, [r7, #4]
 800db92:	683a      	ldr	r2, [r7, #0]
 800db94:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node;
 800db96:	683b      	ldr	r3, [r7, #0]
 800db98:	681b      	ldr	r3, [r3, #0]
 800db9a:	683a      	ldr	r2, [r7, #0]
 800db9c:	605a      	str	r2, [r3, #4]
 800db9e:	697b      	ldr	r3, [r7, #20]
 800dba0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800dba2:	693b      	ldr	r3, [r7, #16]
 800dba4:	f383 8810 	msr	PRIMASK, r3

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800dba8:	bf00      	nop
 800dbaa:	371c      	adds	r7, #28
 800dbac:	46bd      	mov	sp, r7
 800dbae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbb2:	4770      	bx	lr

0800dbb4 <LST_insert_tail>:


void LST_insert_tail (tListNode * listHead, tListNode * node)
{
 800dbb4:	b480      	push	{r7}
 800dbb6:	b087      	sub	sp, #28
 800dbb8:	af00      	add	r7, sp, #0
 800dbba:	6078      	str	r0, [r7, #4]
 800dbbc:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800dbbe:	f3ef 8310 	mrs	r3, PRIMASK
 800dbc2:	60fb      	str	r3, [r7, #12]
  return(result);
 800dbc4:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800dbc6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800dbc8:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead;
 800dbca:	683b      	ldr	r3, [r7, #0]
 800dbcc:	687a      	ldr	r2, [r7, #4]
 800dbce:	601a      	str	r2, [r3, #0]
  node->prev = listHead->prev;
 800dbd0:	687b      	ldr	r3, [r7, #4]
 800dbd2:	685a      	ldr	r2, [r3, #4]
 800dbd4:	683b      	ldr	r3, [r7, #0]
 800dbd6:	605a      	str	r2, [r3, #4]
  listHead->prev = node;
 800dbd8:	687b      	ldr	r3, [r7, #4]
 800dbda:	683a      	ldr	r2, [r7, #0]
 800dbdc:	605a      	str	r2, [r3, #4]
  (node->prev)->next = node;
 800dbde:	683b      	ldr	r3, [r7, #0]
 800dbe0:	685b      	ldr	r3, [r3, #4]
 800dbe2:	683a      	ldr	r2, [r7, #0]
 800dbe4:	601a      	str	r2, [r3, #0]
 800dbe6:	697b      	ldr	r3, [r7, #20]
 800dbe8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800dbea:	693b      	ldr	r3, [r7, #16]
 800dbec:	f383 8810 	msr	PRIMASK, r3

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800dbf0:	bf00      	nop
 800dbf2:	371c      	adds	r7, #28
 800dbf4:	46bd      	mov	sp, r7
 800dbf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbfa:	4770      	bx	lr

0800dbfc <LST_remove_node>:


void LST_remove_node (tListNode * node)
{
 800dbfc:	b480      	push	{r7}
 800dbfe:	b087      	sub	sp, #28
 800dc00:	af00      	add	r7, sp, #0
 800dc02:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800dc04:	f3ef 8310 	mrs	r3, PRIMASK
 800dc08:	60fb      	str	r3, [r7, #12]
  return(result);
 800dc0a:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800dc0c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800dc0e:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  (node->prev)->next = node->next;
 800dc10:	687b      	ldr	r3, [r7, #4]
 800dc12:	685b      	ldr	r3, [r3, #4]
 800dc14:	687a      	ldr	r2, [r7, #4]
 800dc16:	6812      	ldr	r2, [r2, #0]
 800dc18:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node->prev;
 800dc1a:	687b      	ldr	r3, [r7, #4]
 800dc1c:	681b      	ldr	r3, [r3, #0]
 800dc1e:	687a      	ldr	r2, [r7, #4]
 800dc20:	6852      	ldr	r2, [r2, #4]
 800dc22:	605a      	str	r2, [r3, #4]
 800dc24:	697b      	ldr	r3, [r7, #20]
 800dc26:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800dc28:	693b      	ldr	r3, [r7, #16]
 800dc2a:	f383 8810 	msr	PRIMASK, r3

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800dc2e:	bf00      	nop
 800dc30:	371c      	adds	r7, #28
 800dc32:	46bd      	mov	sp, r7
 800dc34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc38:	4770      	bx	lr

0800dc3a <LST_remove_head>:


void LST_remove_head (tListNode * listHead, tListNode ** node )
{
 800dc3a:	b580      	push	{r7, lr}
 800dc3c:	b086      	sub	sp, #24
 800dc3e:	af00      	add	r7, sp, #0
 800dc40:	6078      	str	r0, [r7, #4]
 800dc42:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800dc44:	f3ef 8310 	mrs	r3, PRIMASK
 800dc48:	60fb      	str	r3, [r7, #12]
  return(result);
 800dc4a:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800dc4c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800dc4e:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  *node = listHead->next;
 800dc50:	687b      	ldr	r3, [r7, #4]
 800dc52:	681a      	ldr	r2, [r3, #0]
 800dc54:	683b      	ldr	r3, [r7, #0]
 800dc56:	601a      	str	r2, [r3, #0]
  LST_remove_node (listHead->next);
 800dc58:	687b      	ldr	r3, [r7, #4]
 800dc5a:	681b      	ldr	r3, [r3, #0]
 800dc5c:	4618      	mov	r0, r3
 800dc5e:	f7ff ffcd 	bl	800dbfc <LST_remove_node>
 800dc62:	697b      	ldr	r3, [r7, #20]
 800dc64:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800dc66:	693b      	ldr	r3, [r7, #16]
 800dc68:	f383 8810 	msr	PRIMASK, r3

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800dc6c:	bf00      	nop
 800dc6e:	3718      	adds	r7, #24
 800dc70:	46bd      	mov	sp, r7
 800dc72:	bd80      	pop	{r7, pc}

0800dc74 <CircularQueue_Init>:
  * @param  queueSize:  Size of Queue Buffer
  * @param  elementSize: Size of an element in the queue. if =0, the queue will manage variable sizze elements
  * @retval   always 0
  */
int CircularQueue_Init(queue_t *q, uint8_t* queueBuffer, uint32_t queueSize, uint16_t elementSize, uint8_t optionFlags)
{
 800dc74:	b480      	push	{r7}
 800dc76:	b085      	sub	sp, #20
 800dc78:	af00      	add	r7, sp, #0
 800dc7a:	60f8      	str	r0, [r7, #12]
 800dc7c:	60b9      	str	r1, [r7, #8]
 800dc7e:	607a      	str	r2, [r7, #4]
 800dc80:	807b      	strh	r3, [r7, #2]
  q->qBuff = queueBuffer;
 800dc82:	68fb      	ldr	r3, [r7, #12]
 800dc84:	68ba      	ldr	r2, [r7, #8]
 800dc86:	601a      	str	r2, [r3, #0]
  q->first = 0;
 800dc88:	68fb      	ldr	r3, [r7, #12]
 800dc8a:	2200      	movs	r2, #0
 800dc8c:	60da      	str	r2, [r3, #12]
  q->last = 0; /* queueSize-1; */
 800dc8e:	68fb      	ldr	r3, [r7, #12]
 800dc90:	2200      	movs	r2, #0
 800dc92:	611a      	str	r2, [r3, #16]
  q->byteCount = 0;
 800dc94:	68fb      	ldr	r3, [r7, #12]
 800dc96:	2200      	movs	r2, #0
 800dc98:	615a      	str	r2, [r3, #20]
  q->elementCount = 0;
 800dc9a:	68fb      	ldr	r3, [r7, #12]
 800dc9c:	2200      	movs	r2, #0
 800dc9e:	619a      	str	r2, [r3, #24]
  q->queueMaxSize = queueSize;
 800dca0:	68fb      	ldr	r3, [r7, #12]
 800dca2:	687a      	ldr	r2, [r7, #4]
 800dca4:	605a      	str	r2, [r3, #4]
  q->elementSize = elementSize;
 800dca6:	68fb      	ldr	r3, [r7, #12]
 800dca8:	887a      	ldrh	r2, [r7, #2]
 800dcaa:	811a      	strh	r2, [r3, #8]
  q->optionFlags = optionFlags;
 800dcac:	68fb      	ldr	r3, [r7, #12]
 800dcae:	7e3a      	ldrb	r2, [r7, #24]
 800dcb0:	771a      	strb	r2, [r3, #28]

   if ((optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG) && q-> elementSize)
 800dcb2:	7e3b      	ldrb	r3, [r7, #24]
 800dcb4:	f003 0302 	and.w	r3, r3, #2
 800dcb8:	2b00      	cmp	r3, #0
 800dcba:	d006      	beq.n	800dcca <CircularQueue_Init+0x56>
 800dcbc:	68fb      	ldr	r3, [r7, #12]
 800dcbe:	891b      	ldrh	r3, [r3, #8]
 800dcc0:	2b00      	cmp	r3, #0
 800dcc2:	d002      	beq.n	800dcca <CircularQueue_Init+0x56>
   {
    /* can not deal with splitting at the end of buffer with fixed size element */
    return -1;
 800dcc4:	f04f 33ff 	mov.w	r3, #4294967295
 800dcc8:	e000      	b.n	800dccc <CircularQueue_Init+0x58>
  }
  return 0;
 800dcca:	2300      	movs	r3, #0
}
 800dccc:	4618      	mov	r0, r3
 800dcce:	3714      	adds	r7, #20
 800dcd0:	46bd      	mov	sp, r7
 800dcd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcd6:	4770      	bx	lr

0800dcd8 <CircularQueue_Add>:
  * @param  elementSize:  Size of element to be added to the queue. Only used if the queue manage variable size elements
  * @param  nbElements:  number of elements in the in buffer pointed by x
  * @retval  pointer on last element just added to the queue, NULL if the element to be added do not fit in the queue (too big)
  */
uint8_t* CircularQueue_Add(queue_t *q, uint8_t* x, uint16_t elementSize, uint32_t nbElements)
{
 800dcd8:	b580      	push	{r7, lr}
 800dcda:	b08e      	sub	sp, #56	; 0x38
 800dcdc:	af00      	add	r7, sp, #0
 800dcde:	60f8      	str	r0, [r7, #12]
 800dce0:	60b9      	str	r1, [r7, #8]
 800dce2:	603b      	str	r3, [r7, #0]
 800dce4:	4613      	mov	r3, r2
 800dce6:	80fb      	strh	r3, [r7, #6]

  uint8_t* ptr = NULL;                      /* fct return ptr to the element freshly added, if no room fct return NULL */
 800dce8:	2300      	movs	r3, #0
 800dcea:	623b      	str	r3, [r7, #32]
  uint16_t curElementSize = 0;              /* the size of the element currently  stored at q->last position */
 800dcec:	2300      	movs	r3, #0
 800dcee:	86fb      	strh	r3, [r7, #54]	; 0x36
  uint8_t  elemSizeStorageRoom  = 0 ;       /* Indicate the header (which contain only size) of element in case of varaibale size elemenet (q->elementsize == 0) */
 800dcf0:	2300      	movs	r3, #0
 800dcf2:	77fb      	strb	r3, [r7, #31]
  uint32_t curBuffPosition;                  /* the current position in the queue buffer */
  uint32_t i;                               /* loop counter */
  uint32_t NbBytesToCopy = 0, NbCopiedBytes = 0 ; /* Indicators for copying bytes in queue */
 800dcf4:	2300      	movs	r3, #0
 800dcf6:	62bb      	str	r3, [r7, #40]	; 0x28
 800dcf8:	2300      	movs	r3, #0
 800dcfa:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t eob_free_size;                         /* Eof End of Quque Buffer Free Size */
  uint8_t  wrap_will_occur = 0;                   /* indicate if a wrap around will occurs */
 800dcfc:	2300      	movs	r3, #0
 800dcfe:	77bb      	strb	r3, [r7, #30]
  uint8_t  wrapped_element_eob_size;              /* In case of Wrap around, indicat size of parta of elemenet that fit at thened of the queuue  buffer */
  uint16_t overhead = 0;                          /* In case of CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG or CIRCULAR_QUEUE_NO_WRAP_FLAG options, 
 800dd00:	2300      	movs	r3, #0
 800dd02:	83bb      	strh	r3, [r7, #28]
                                                     indcate the size overhead that will be generated by adding the element with wrap management (split or no wrap ) */ 
  
  
  elemSizeStorageRoom  = (q->elementSize == 0) ? 2 : 0;
 800dd04:	68fb      	ldr	r3, [r7, #12]
 800dd06:	891b      	ldrh	r3, [r3, #8]
 800dd08:	2b00      	cmp	r3, #0
 800dd0a:	d101      	bne.n	800dd10 <CircularQueue_Add+0x38>
 800dd0c:	2302      	movs	r3, #2
 800dd0e:	e000      	b.n	800dd12 <CircularQueue_Add+0x3a>
 800dd10:	2300      	movs	r3, #0
 800dd12:	77fb      	strb	r3, [r7, #31]
  /* retrieve the size of last element sored: the value stored at the beginning of the queue element if element size is variable otherwise take it from fixed element Size member */
  if (q->byteCount)
 800dd14:	68fb      	ldr	r3, [r7, #12]
 800dd16:	695b      	ldr	r3, [r3, #20]
 800dd18:	2b00      	cmp	r3, #0
 800dd1a:	d02a      	beq.n	800dd72 <CircularQueue_Add+0x9a>
  {
    curElementSize = (q->elementSize == 0) ? q->qBuff[q->last] + ((q->qBuff[MOD((q->last+1), q->queueMaxSize)])<<8) + 2 : q->elementSize;
 800dd1c:	68fb      	ldr	r3, [r7, #12]
 800dd1e:	891b      	ldrh	r3, [r3, #8]
 800dd20:	2b00      	cmp	r3, #0
 800dd22:	d123      	bne.n	800dd6c <CircularQueue_Add+0x94>
 800dd24:	68fb      	ldr	r3, [r7, #12]
 800dd26:	681a      	ldr	r2, [r3, #0]
 800dd28:	68fb      	ldr	r3, [r7, #12]
 800dd2a:	691b      	ldr	r3, [r3, #16]
 800dd2c:	4413      	add	r3, r2
 800dd2e:	781b      	ldrb	r3, [r3, #0]
 800dd30:	b29a      	uxth	r2, r3
 800dd32:	68fb      	ldr	r3, [r7, #12]
 800dd34:	6819      	ldr	r1, [r3, #0]
 800dd36:	68fb      	ldr	r3, [r7, #12]
 800dd38:	691b      	ldr	r3, [r3, #16]
 800dd3a:	1c58      	adds	r0, r3, #1
 800dd3c:	68fb      	ldr	r3, [r7, #12]
 800dd3e:	685b      	ldr	r3, [r3, #4]
 800dd40:	4298      	cmp	r0, r3
 800dd42:	d306      	bcc.n	800dd52 <CircularQueue_Add+0x7a>
 800dd44:	68fb      	ldr	r3, [r7, #12]
 800dd46:	6918      	ldr	r0, [r3, #16]
 800dd48:	68fb      	ldr	r3, [r7, #12]
 800dd4a:	685b      	ldr	r3, [r3, #4]
 800dd4c:	1ac3      	subs	r3, r0, r3
 800dd4e:	3301      	adds	r3, #1
 800dd50:	e002      	b.n	800dd58 <CircularQueue_Add+0x80>
 800dd52:	68fb      	ldr	r3, [r7, #12]
 800dd54:	691b      	ldr	r3, [r3, #16]
 800dd56:	3301      	adds	r3, #1
 800dd58:	440b      	add	r3, r1
 800dd5a:	781b      	ldrb	r3, [r3, #0]
 800dd5c:	b29b      	uxth	r3, r3
 800dd5e:	021b      	lsls	r3, r3, #8
 800dd60:	b29b      	uxth	r3, r3
 800dd62:	4413      	add	r3, r2
 800dd64:	b29b      	uxth	r3, r3
 800dd66:	3302      	adds	r3, #2
 800dd68:	b29b      	uxth	r3, r3
 800dd6a:	e001      	b.n	800dd70 <CircularQueue_Add+0x98>
 800dd6c:	68fb      	ldr	r3, [r7, #12]
 800dd6e:	891b      	ldrh	r3, [r3, #8]
 800dd70:	86fb      	strh	r3, [r7, #54]	; 0x36
  }
  /* if queue element have fixed size , reset the elementSize arg with fixed element size value */
  if (q->elementSize > 0)               
 800dd72:	68fb      	ldr	r3, [r7, #12]
 800dd74:	891b      	ldrh	r3, [r3, #8]
 800dd76:	2b00      	cmp	r3, #0
 800dd78:	d002      	beq.n	800dd80 <CircularQueue_Add+0xa8>
  {
    elementSize = q->elementSize;
 800dd7a:	68fb      	ldr	r3, [r7, #12]
 800dd7c:	891b      	ldrh	r3, [r3, #8]
 800dd7e:	80fb      	strh	r3, [r7, #6]
  }

   eob_free_size = (q->last >= q->first) ? q->queueMaxSize - (q->last + curElementSize) : 0;
 800dd80:	68fb      	ldr	r3, [r7, #12]
 800dd82:	691a      	ldr	r2, [r3, #16]
 800dd84:	68fb      	ldr	r3, [r7, #12]
 800dd86:	68db      	ldr	r3, [r3, #12]
 800dd88:	429a      	cmp	r2, r3
 800dd8a:	d307      	bcc.n	800dd9c <CircularQueue_Add+0xc4>
 800dd8c:	68fb      	ldr	r3, [r7, #12]
 800dd8e:	685a      	ldr	r2, [r3, #4]
 800dd90:	68fb      	ldr	r3, [r7, #12]
 800dd92:	6919      	ldr	r1, [r3, #16]
 800dd94:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800dd96:	440b      	add	r3, r1
 800dd98:	1ad3      	subs	r3, r2, r3
 800dd9a:	e000      	b.n	800dd9e <CircularQueue_Add+0xc6>
 800dd9c:	2300      	movs	r3, #0
 800dd9e:	61bb      	str	r3, [r7, #24]

   /* check how many bytes of wrapped element (if anay) are at end of buffer */
   wrapped_element_eob_size = (((elementSize + elemSizeStorageRoom )*nbElements) < eob_free_size) ? 0 : (eob_free_size % (elementSize + elemSizeStorageRoom));
 800dda0:	88fa      	ldrh	r2, [r7, #6]
 800dda2:	7ffb      	ldrb	r3, [r7, #31]
 800dda4:	4413      	add	r3, r2
 800dda6:	461a      	mov	r2, r3
 800dda8:	683b      	ldr	r3, [r7, #0]
 800ddaa:	fb03 f302 	mul.w	r3, r3, r2
 800ddae:	69ba      	ldr	r2, [r7, #24]
 800ddb0:	429a      	cmp	r2, r3
 800ddb2:	d80b      	bhi.n	800ddcc <CircularQueue_Add+0xf4>
 800ddb4:	88fa      	ldrh	r2, [r7, #6]
 800ddb6:	7ffb      	ldrb	r3, [r7, #31]
 800ddb8:	4413      	add	r3, r2
 800ddba:	461a      	mov	r2, r3
 800ddbc:	69bb      	ldr	r3, [r7, #24]
 800ddbe:	fbb3 f1f2 	udiv	r1, r3, r2
 800ddc2:	fb02 f201 	mul.w	r2, r2, r1
 800ddc6:	1a9b      	subs	r3, r3, r2
 800ddc8:	b2db      	uxtb	r3, r3
 800ddca:	e000      	b.n	800ddce <CircularQueue_Add+0xf6>
 800ddcc:	2300      	movs	r3, #0
 800ddce:	75fb      	strb	r3, [r7, #23]
   wrap_will_occur  = wrapped_element_eob_size > elemSizeStorageRoom;
 800ddd0:	7dfa      	ldrb	r2, [r7, #23]
 800ddd2:	7ffb      	ldrb	r3, [r7, #31]
 800ddd4:	429a      	cmp	r2, r3
 800ddd6:	bf8c      	ite	hi
 800ddd8:	2301      	movhi	r3, #1
 800ddda:	2300      	movls	r3, #0
 800dddc:	b2db      	uxtb	r3, r3
 800ddde:	77bb      	strb	r3, [r7, #30]

   overhead = (wrap_will_occur && (q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG)) ? wrapped_element_eob_size : overhead;
 800dde0:	7fbb      	ldrb	r3, [r7, #30]
 800dde2:	2b00      	cmp	r3, #0
 800dde4:	d008      	beq.n	800ddf8 <CircularQueue_Add+0x120>
 800dde6:	68fb      	ldr	r3, [r7, #12]
 800dde8:	7f1b      	ldrb	r3, [r3, #28]
 800ddea:	f003 0301 	and.w	r3, r3, #1
 800ddee:	2b00      	cmp	r3, #0
 800ddf0:	d002      	beq.n	800ddf8 <CircularQueue_Add+0x120>
 800ddf2:	7dfb      	ldrb	r3, [r7, #23]
 800ddf4:	b29b      	uxth	r3, r3
 800ddf6:	e000      	b.n	800ddfa <CircularQueue_Add+0x122>
 800ddf8:	8bbb      	ldrh	r3, [r7, #28]
 800ddfa:	83bb      	strh	r3, [r7, #28]
   overhead = (wrap_will_occur && (q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG)) ? elemSizeStorageRoom  : overhead;
 800ddfc:	7fbb      	ldrb	r3, [r7, #30]
 800ddfe:	2b00      	cmp	r3, #0
 800de00:	d008      	beq.n	800de14 <CircularQueue_Add+0x13c>
 800de02:	68fb      	ldr	r3, [r7, #12]
 800de04:	7f1b      	ldrb	r3, [r3, #28]
 800de06:	f003 0302 	and.w	r3, r3, #2
 800de0a:	2b00      	cmp	r3, #0
 800de0c:	d002      	beq.n	800de14 <CircularQueue_Add+0x13c>
 800de0e:	7ffb      	ldrb	r3, [r7, #31]
 800de10:	b29b      	uxth	r3, r3
 800de12:	e000      	b.n	800de16 <CircularQueue_Add+0x13e>
 800de14:	8bbb      	ldrh	r3, [r7, #28]
 800de16:	83bb      	strh	r3, [r7, #28]
   
   
  /* Store now the elements if ennough room for all elements */
  if (elementSize && ((q->byteCount + ((elementSize + elemSizeStorageRoom )*nbElements) + overhead) <= q->queueMaxSize)) 
 800de18:	88fb      	ldrh	r3, [r7, #6]
 800de1a:	2b00      	cmp	r3, #0
 800de1c:	f000 817e 	beq.w	800e11c <CircularQueue_Add+0x444>
 800de20:	68fb      	ldr	r3, [r7, #12]
 800de22:	695a      	ldr	r2, [r3, #20]
 800de24:	88f9      	ldrh	r1, [r7, #6]
 800de26:	7ffb      	ldrb	r3, [r7, #31]
 800de28:	440b      	add	r3, r1
 800de2a:	4619      	mov	r1, r3
 800de2c:	683b      	ldr	r3, [r7, #0]
 800de2e:	fb03 f301 	mul.w	r3, r3, r1
 800de32:	441a      	add	r2, r3
 800de34:	8bbb      	ldrh	r3, [r7, #28]
 800de36:	441a      	add	r2, r3
 800de38:	68fb      	ldr	r3, [r7, #12]
 800de3a:	685b      	ldr	r3, [r3, #4]
 800de3c:	429a      	cmp	r2, r3
 800de3e:	f200 816d 	bhi.w	800e11c <CircularQueue_Add+0x444>
  { 
    /* loop to add all elements  */
    for (i=0; i < nbElements; i++) 
 800de42:	2300      	movs	r3, #0
 800de44:	62fb      	str	r3, [r7, #44]	; 0x2c
 800de46:	e14a      	b.n	800e0de <CircularQueue_Add+0x406>
    {
      q->last = MOD ((q->last + curElementSize),q->queueMaxSize);
 800de48:	68fb      	ldr	r3, [r7, #12]
 800de4a:	691a      	ldr	r2, [r3, #16]
 800de4c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800de4e:	441a      	add	r2, r3
 800de50:	68fb      	ldr	r3, [r7, #12]
 800de52:	685b      	ldr	r3, [r3, #4]
 800de54:	429a      	cmp	r2, r3
 800de56:	d307      	bcc.n	800de68 <CircularQueue_Add+0x190>
 800de58:	68fb      	ldr	r3, [r7, #12]
 800de5a:	691a      	ldr	r2, [r3, #16]
 800de5c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800de5e:	441a      	add	r2, r3
 800de60:	68fb      	ldr	r3, [r7, #12]
 800de62:	685b      	ldr	r3, [r3, #4]
 800de64:	1ad3      	subs	r3, r2, r3
 800de66:	e003      	b.n	800de70 <CircularQueue_Add+0x198>
 800de68:	68fb      	ldr	r3, [r7, #12]
 800de6a:	691a      	ldr	r2, [r3, #16]
 800de6c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800de6e:	4413      	add	r3, r2
 800de70:	68fa      	ldr	r2, [r7, #12]
 800de72:	6113      	str	r3, [r2, #16]
      curBuffPosition = q->last;
 800de74:	68fb      	ldr	r3, [r7, #12]
 800de76:	691b      	ldr	r3, [r3, #16]
 800de78:	633b      	str	r3, [r7, #48]	; 0x30
      
      /* store the element  */
      /* store fisrt the element size if element size is varaible */
      if (q->elementSize == 0) 
 800de7a:	68fb      	ldr	r3, [r7, #12]
 800de7c:	891b      	ldrh	r3, [r3, #8]
 800de7e:	2b00      	cmp	r3, #0
 800de80:	d130      	bne.n	800dee4 <CircularQueue_Add+0x20c>
      {
        q->qBuff[curBuffPosition++]= elementSize & 0xFF;
 800de82:	68fb      	ldr	r3, [r7, #12]
 800de84:	681a      	ldr	r2, [r3, #0]
 800de86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de88:	1c59      	adds	r1, r3, #1
 800de8a:	6339      	str	r1, [r7, #48]	; 0x30
 800de8c:	4413      	add	r3, r2
 800de8e:	88fa      	ldrh	r2, [r7, #6]
 800de90:	b2d2      	uxtb	r2, r2
 800de92:	701a      	strb	r2, [r3, #0]
        curBuffPosition = MOD(curBuffPosition, q->queueMaxSize);
 800de94:	68fb      	ldr	r3, [r7, #12]
 800de96:	685b      	ldr	r3, [r3, #4]
 800de98:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800de9a:	429a      	cmp	r2, r3
 800de9c:	d304      	bcc.n	800dea8 <CircularQueue_Add+0x1d0>
 800de9e:	68fb      	ldr	r3, [r7, #12]
 800dea0:	685b      	ldr	r3, [r3, #4]
 800dea2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800dea4:	1ad3      	subs	r3, r2, r3
 800dea6:	e000      	b.n	800deaa <CircularQueue_Add+0x1d2>
 800dea8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800deaa:	633b      	str	r3, [r7, #48]	; 0x30
        q->qBuff[curBuffPosition++]= (elementSize & 0xFF00) >> 8 ;
 800deac:	88fb      	ldrh	r3, [r7, #6]
 800deae:	0a1b      	lsrs	r3, r3, #8
 800deb0:	b298      	uxth	r0, r3
 800deb2:	68fb      	ldr	r3, [r7, #12]
 800deb4:	681a      	ldr	r2, [r3, #0]
 800deb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800deb8:	1c59      	adds	r1, r3, #1
 800deba:	6339      	str	r1, [r7, #48]	; 0x30
 800debc:	4413      	add	r3, r2
 800debe:	b2c2      	uxtb	r2, r0
 800dec0:	701a      	strb	r2, [r3, #0]
        curBuffPosition = MOD(curBuffPosition, q->queueMaxSize);
 800dec2:	68fb      	ldr	r3, [r7, #12]
 800dec4:	685b      	ldr	r3, [r3, #4]
 800dec6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800dec8:	429a      	cmp	r2, r3
 800deca:	d304      	bcc.n	800ded6 <CircularQueue_Add+0x1fe>
 800decc:	68fb      	ldr	r3, [r7, #12]
 800dece:	685b      	ldr	r3, [r3, #4]
 800ded0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ded2:	1ad3      	subs	r3, r2, r3
 800ded4:	e000      	b.n	800ded8 <CircularQueue_Add+0x200>
 800ded6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ded8:	633b      	str	r3, [r7, #48]	; 0x30
        q->byteCount += 2;
 800deda:	68fb      	ldr	r3, [r7, #12]
 800dedc:	695b      	ldr	r3, [r3, #20]
 800dede:	1c9a      	adds	r2, r3, #2
 800dee0:	68fb      	ldr	r3, [r7, #12]
 800dee2:	615a      	str	r2, [r3, #20]
      }
      
      /* Identify number of bytes of copy takeing account possible wrap, in this case NbBytesToCopy will contains size that fit at end of the queue buffer */
      NbBytesToCopy = MIN((q->queueMaxSize-curBuffPosition),elementSize);
 800dee4:	88fa      	ldrh	r2, [r7, #6]
 800dee6:	68fb      	ldr	r3, [r7, #12]
 800dee8:	6859      	ldr	r1, [r3, #4]
 800deea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800deec:	1acb      	subs	r3, r1, r3
 800deee:	4293      	cmp	r3, r2
 800def0:	bf28      	it	cs
 800def2:	4613      	movcs	r3, r2
 800def4:	62bb      	str	r3, [r7, #40]	; 0x28
      /* check if no wrap (NbBytesToCopy == elementSize) or if Wrap and no spsicf option; 
         In thi case part of data will copied at the end of the buffer and the rest a the beggining */
      if ((NbBytesToCopy == elementSize) || ((NbBytesToCopy < elementSize) && (q->optionFlags == CIRCULAR_QUEUE_NO_FLAG)))
 800def6:	88fb      	ldrh	r3, [r7, #6]
 800def8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800defa:	429a      	cmp	r2, r3
 800defc:	d007      	beq.n	800df0e <CircularQueue_Add+0x236>
 800defe:	88fb      	ldrh	r3, [r7, #6]
 800df00:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800df02:	429a      	cmp	r2, r3
 800df04:	d225      	bcs.n	800df52 <CircularQueue_Add+0x27a>
 800df06:	68fb      	ldr	r3, [r7, #12]
 800df08:	7f1b      	ldrb	r3, [r3, #28]
 800df0a:	2b00      	cmp	r3, #0
 800df0c:	d121      	bne.n	800df52 <CircularQueue_Add+0x27a>
      {
        /* Copy First part (or emtire buffer ) from current position up to the end of the buffer queue (or before if enough room)  */
        memcpy(&q->qBuff[curBuffPosition],&x[i*elementSize],NbBytesToCopy);
 800df0e:	68fb      	ldr	r3, [r7, #12]
 800df10:	681a      	ldr	r2, [r3, #0]
 800df12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df14:	18d0      	adds	r0, r2, r3
 800df16:	88fb      	ldrh	r3, [r7, #6]
 800df18:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800df1a:	fb02 f303 	mul.w	r3, r2, r3
 800df1e:	68ba      	ldr	r2, [r7, #8]
 800df20:	4413      	add	r3, r2
 800df22:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800df24:	4619      	mov	r1, r3
 800df26:	f004 fcef 	bl	8012908 <memcpy>
        /* Adjust bytes count */
        q->byteCount += NbBytesToCopy;
 800df2a:	68fb      	ldr	r3, [r7, #12]
 800df2c:	695a      	ldr	r2, [r3, #20]
 800df2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df30:	441a      	add	r2, r3
 800df32:	68fb      	ldr	r3, [r7, #12]
 800df34:	615a      	str	r2, [r3, #20]
        /* Wrap */
        curBuffPosition = 0; 
 800df36:	2300      	movs	r3, #0
 800df38:	633b      	str	r3, [r7, #48]	; 0x30
        /* set NbCopiedBytes bytes with  ampount copied */
        NbCopiedBytes = NbBytesToCopy;
 800df3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df3c:	627b      	str	r3, [r7, #36]	; 0x24
        /* set the rest to copy if wrao , if no wrap will be 0 */
        NbBytesToCopy = elementSize - NbBytesToCopy;
 800df3e:	88fa      	ldrh	r2, [r7, #6]
 800df40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df42:	1ad3      	subs	r3, r2, r3
 800df44:	62bb      	str	r3, [r7, #40]	; 0x28
        /* set the current element Size, will be used to calaculate next last position at beggining of loop */
        curElementSize = (elementSize) + elemSizeStorageRoom ;
 800df46:	7ffb      	ldrb	r3, [r7, #31]
 800df48:	b29a      	uxth	r2, r3
 800df4a:	88fb      	ldrh	r3, [r7, #6]
 800df4c:	4413      	add	r3, r2
 800df4e:	86fb      	strh	r3, [r7, #54]	; 0x36
 800df50:	e0a4      	b.n	800e09c <CircularQueue_Add+0x3c4>
      }
      else if (NbBytesToCopy)  /* We have a wrap  to manage */
 800df52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df54:	2b00      	cmp	r3, #0
 800df56:	f000 80a1 	beq.w	800e09c <CircularQueue_Add+0x3c4>
      {
       /* case of CIRCULAR_QUEUE_NO_WRAP_FLAG option */
         if (q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG)
 800df5a:	68fb      	ldr	r3, [r7, #12]
 800df5c:	7f1b      	ldrb	r3, [r3, #28]
 800df5e:	f003 0301 	and.w	r3, r3, #1
 800df62:	2b00      	cmp	r3, #0
 800df64:	d03a      	beq.n	800dfdc <CircularQueue_Add+0x304>
        {
          /* if element size are variable and NO_WRAP option, Invalidate end of buffer setting 0xFFFF size*/
          if (q->elementSize == 0)
 800df66:	68fb      	ldr	r3, [r7, #12]
 800df68:	891b      	ldrh	r3, [r3, #8]
 800df6a:	2b00      	cmp	r3, #0
 800df6c:	d10d      	bne.n	800df8a <CircularQueue_Add+0x2b2>
          {
             q->qBuff[curBuffPosition-2] = 0xFF;
 800df6e:	68fb      	ldr	r3, [r7, #12]
 800df70:	681a      	ldr	r2, [r3, #0]
 800df72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df74:	3b02      	subs	r3, #2
 800df76:	4413      	add	r3, r2
 800df78:	22ff      	movs	r2, #255	; 0xff
 800df7a:	701a      	strb	r2, [r3, #0]
             q->qBuff[curBuffPosition-1] = 0xFF;
 800df7c:	68fb      	ldr	r3, [r7, #12]
 800df7e:	681a      	ldr	r2, [r3, #0]
 800df80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df82:	3b01      	subs	r3, #1
 800df84:	4413      	add	r3, r2
 800df86:	22ff      	movs	r2, #255	; 0xff
 800df88:	701a      	strb	r2, [r3, #0]
          }
          q->byteCount += NbBytesToCopy;  /* invalid data at the end of buffer are take into account in byteCount */
 800df8a:	68fb      	ldr	r3, [r7, #12]
 800df8c:	695a      	ldr	r2, [r3, #20]
 800df8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df90:	441a      	add	r2, r3
 800df92:	68fb      	ldr	r3, [r7, #12]
 800df94:	615a      	str	r2, [r3, #20]
          /* No bytes coped a the end of buffer */
          NbCopiedBytes = 0;
 800df96:	2300      	movs	r3, #0
 800df98:	627b      	str	r3, [r7, #36]	; 0x24
          /* all element to be copied at the begnning of buffer */
          NbBytesToCopy = elementSize; 
 800df9a:	88fb      	ldrh	r3, [r7, #6]
 800df9c:	62bb      	str	r3, [r7, #40]	; 0x28
          /* Wrap */
          curBuffPosition = 0; 
 800df9e:	2300      	movs	r3, #0
 800dfa0:	633b      	str	r3, [r7, #48]	; 0x30
          /* if variable size element, invalidate end of buffer setting OxFFFF in element header (size) */
          if (q->elementSize == 0)
 800dfa2:	68fb      	ldr	r3, [r7, #12]
 800dfa4:	891b      	ldrh	r3, [r3, #8]
 800dfa6:	2b00      	cmp	r3, #0
 800dfa8:	d16f      	bne.n	800e08a <CircularQueue_Add+0x3b2>
          {
            q->qBuff[curBuffPosition++] = NbBytesToCopy & 0xFF;
 800dfaa:	68fb      	ldr	r3, [r7, #12]
 800dfac:	681a      	ldr	r2, [r3, #0]
 800dfae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dfb0:	1c59      	adds	r1, r3, #1
 800dfb2:	6339      	str	r1, [r7, #48]	; 0x30
 800dfb4:	4413      	add	r3, r2
 800dfb6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800dfb8:	b2d2      	uxtb	r2, r2
 800dfba:	701a      	strb	r2, [r3, #0]
            q->qBuff[curBuffPosition++] = (NbBytesToCopy & 0xFF00) >> 8 ;
 800dfbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dfbe:	0a18      	lsrs	r0, r3, #8
 800dfc0:	68fb      	ldr	r3, [r7, #12]
 800dfc2:	681a      	ldr	r2, [r3, #0]
 800dfc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dfc6:	1c59      	adds	r1, r3, #1
 800dfc8:	6339      	str	r1, [r7, #48]	; 0x30
 800dfca:	4413      	add	r3, r2
 800dfcc:	b2c2      	uxtb	r2, r0
 800dfce:	701a      	strb	r2, [r3, #0]
            q->byteCount += 2;   
 800dfd0:	68fb      	ldr	r3, [r7, #12]
 800dfd2:	695b      	ldr	r3, [r3, #20]
 800dfd4:	1c9a      	adds	r2, r3, #2
 800dfd6:	68fb      	ldr	r3, [r7, #12]
 800dfd8:	615a      	str	r2, [r3, #20]
 800dfda:	e056      	b.n	800e08a <CircularQueue_Add+0x3b2>
          } 
           
        }
        /* case of CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG option */
        else if (q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG)
 800dfdc:	68fb      	ldr	r3, [r7, #12]
 800dfde:	7f1b      	ldrb	r3, [r3, #28]
 800dfe0:	f003 0302 	and.w	r3, r3, #2
 800dfe4:	2b00      	cmp	r3, #0
 800dfe6:	d050      	beq.n	800e08a <CircularQueue_Add+0x3b2>
        {
          if (q->elementSize == 0)
 800dfe8:	68fb      	ldr	r3, [r7, #12]
 800dfea:	891b      	ldrh	r3, [r3, #8]
 800dfec:	2b00      	cmp	r3, #0
 800dfee:	d14a      	bne.n	800e086 <CircularQueue_Add+0x3ae>
          {
            /* reset the size of current element to the nb bytes fitting at the end of buffer */
             q->qBuff[curBuffPosition-2] = NbBytesToCopy & 0xFF;
 800dff0:	68fb      	ldr	r3, [r7, #12]
 800dff2:	681a      	ldr	r2, [r3, #0]
 800dff4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dff6:	3b02      	subs	r3, #2
 800dff8:	4413      	add	r3, r2
 800dffa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800dffc:	b2d2      	uxtb	r2, r2
 800dffe:	701a      	strb	r2, [r3, #0]
             q->qBuff[curBuffPosition-1] = (NbBytesToCopy & 0xFF00) >> 8 ;
 800e000:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e002:	0a19      	lsrs	r1, r3, #8
 800e004:	68fb      	ldr	r3, [r7, #12]
 800e006:	681a      	ldr	r2, [r3, #0]
 800e008:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e00a:	3b01      	subs	r3, #1
 800e00c:	4413      	add	r3, r2
 800e00e:	b2ca      	uxtb	r2, r1
 800e010:	701a      	strb	r2, [r3, #0]
             /* copy the bytes */ 
             memcpy(&q->qBuff[curBuffPosition],&x[i*elementSize],NbBytesToCopy);
 800e012:	68fb      	ldr	r3, [r7, #12]
 800e014:	681a      	ldr	r2, [r3, #0]
 800e016:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e018:	18d0      	adds	r0, r2, r3
 800e01a:	88fb      	ldrh	r3, [r7, #6]
 800e01c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e01e:	fb02 f303 	mul.w	r3, r2, r3
 800e022:	68ba      	ldr	r2, [r7, #8]
 800e024:	4413      	add	r3, r2
 800e026:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e028:	4619      	mov	r1, r3
 800e02a:	f004 fc6d 	bl	8012908 <memcpy>
             q->byteCount += NbBytesToCopy; 
 800e02e:	68fb      	ldr	r3, [r7, #12]
 800e030:	695a      	ldr	r2, [r3, #20]
 800e032:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e034:	441a      	add	r2, r3
 800e036:	68fb      	ldr	r3, [r7, #12]
 800e038:	615a      	str	r2, [r3, #20]
             /* set the number of copied bytes */
             NbCopiedBytes = NbBytesToCopy;             
 800e03a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e03c:	627b      	str	r3, [r7, #36]	; 0x24
             /* set rest of data to be copied to begnning of buffer */
             NbBytesToCopy = elementSize - NbBytesToCopy;
 800e03e:	88fa      	ldrh	r2, [r7, #6]
 800e040:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e042:	1ad3      	subs	r3, r2, r3
 800e044:	62bb      	str	r3, [r7, #40]	; 0x28
             /* one element more dur to split in 2 elements */
             q->elementCount++;
 800e046:	68fb      	ldr	r3, [r7, #12]
 800e048:	699b      	ldr	r3, [r3, #24]
 800e04a:	1c5a      	adds	r2, r3, #1
 800e04c:	68fb      	ldr	r3, [r7, #12]
 800e04e:	619a      	str	r2, [r3, #24]
             /* Wrap */
             curBuffPosition = 0; 
 800e050:	2300      	movs	r3, #0
 800e052:	633b      	str	r3, [r7, #48]	; 0x30
             /* Set new size for rest of data */
             q->qBuff[curBuffPosition++] = NbBytesToCopy & 0xFF;
 800e054:	68fb      	ldr	r3, [r7, #12]
 800e056:	681a      	ldr	r2, [r3, #0]
 800e058:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e05a:	1c59      	adds	r1, r3, #1
 800e05c:	6339      	str	r1, [r7, #48]	; 0x30
 800e05e:	4413      	add	r3, r2
 800e060:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e062:	b2d2      	uxtb	r2, r2
 800e064:	701a      	strb	r2, [r3, #0]
             q->qBuff[curBuffPosition++] = (NbBytesToCopy & 0xFF00) >> 8 ;
 800e066:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e068:	0a18      	lsrs	r0, r3, #8
 800e06a:	68fb      	ldr	r3, [r7, #12]
 800e06c:	681a      	ldr	r2, [r3, #0]
 800e06e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e070:	1c59      	adds	r1, r3, #1
 800e072:	6339      	str	r1, [r7, #48]	; 0x30
 800e074:	4413      	add	r3, r2
 800e076:	b2c2      	uxtb	r2, r0
 800e078:	701a      	strb	r2, [r3, #0]
             q->byteCount += 2;              
 800e07a:	68fb      	ldr	r3, [r7, #12]
 800e07c:	695b      	ldr	r3, [r3, #20]
 800e07e:	1c9a      	adds	r2, r3, #2
 800e080:	68fb      	ldr	r3, [r7, #12]
 800e082:	615a      	str	r2, [r3, #20]
 800e084:	e001      	b.n	800e08a <CircularQueue_Add+0x3b2>
          else
          {
            /* Should not occur */
            /* can not manage split Flag on Fixed size element */
            /* Buffer is corrupted */
            return NULL;
 800e086:	2300      	movs	r3, #0
 800e088:	e049      	b.n	800e11e <CircularQueue_Add+0x446>
          }
        }
        curElementSize = (NbBytesToCopy) + elemSizeStorageRoom ;
 800e08a:	7ffb      	ldrb	r3, [r7, #31]
 800e08c:	b29a      	uxth	r2, r3
 800e08e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e090:	b29b      	uxth	r3, r3
 800e092:	4413      	add	r3, r2
 800e094:	86fb      	strh	r3, [r7, #54]	; 0x36
        q->last = 0;        
 800e096:	68fb      	ldr	r3, [r7, #12]
 800e098:	2200      	movs	r2, #0
 800e09a:	611a      	str	r2, [r3, #16]
      }  
      
      /* some remaning byte to copy */
      if (NbBytesToCopy)      
 800e09c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e09e:	2b00      	cmp	r3, #0
 800e0a0:	d015      	beq.n	800e0ce <CircularQueue_Add+0x3f6>
      {
        memcpy(&q->qBuff[curBuffPosition],&x[(i*elementSize)+NbCopiedBytes],NbBytesToCopy);
 800e0a2:	68fb      	ldr	r3, [r7, #12]
 800e0a4:	681a      	ldr	r2, [r3, #0]
 800e0a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e0a8:	18d0      	adds	r0, r2, r3
 800e0aa:	88fb      	ldrh	r3, [r7, #6]
 800e0ac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e0ae:	fb02 f203 	mul.w	r2, r2, r3
 800e0b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e0b4:	4413      	add	r3, r2
 800e0b6:	68ba      	ldr	r2, [r7, #8]
 800e0b8:	4413      	add	r3, r2
 800e0ba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e0bc:	4619      	mov	r1, r3
 800e0be:	f004 fc23 	bl	8012908 <memcpy>
        q->byteCount += NbBytesToCopy;
 800e0c2:	68fb      	ldr	r3, [r7, #12]
 800e0c4:	695a      	ldr	r2, [r3, #20]
 800e0c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e0c8:	441a      	add	r2, r3
 800e0ca:	68fb      	ldr	r3, [r7, #12]
 800e0cc:	615a      	str	r2, [r3, #20]
      }      
      
      /* One more element */
      q->elementCount++;
 800e0ce:	68fb      	ldr	r3, [r7, #12]
 800e0d0:	699b      	ldr	r3, [r3, #24]
 800e0d2:	1c5a      	adds	r2, r3, #1
 800e0d4:	68fb      	ldr	r3, [r7, #12]
 800e0d6:	619a      	str	r2, [r3, #24]
    for (i=0; i < nbElements; i++) 
 800e0d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e0da:	3301      	adds	r3, #1
 800e0dc:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e0de:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e0e0:	683b      	ldr	r3, [r7, #0]
 800e0e2:	429a      	cmp	r2, r3
 800e0e4:	f4ff aeb0 	bcc.w	800de48 <CircularQueue_Add+0x170>
    }
    
    ptr = q->qBuff + (MOD((q->last+elemSizeStorageRoom ),q->queueMaxSize));
 800e0e8:	68fb      	ldr	r3, [r7, #12]
 800e0ea:	681a      	ldr	r2, [r3, #0]
 800e0ec:	68fb      	ldr	r3, [r7, #12]
 800e0ee:	6919      	ldr	r1, [r3, #16]
 800e0f0:	7ffb      	ldrb	r3, [r7, #31]
 800e0f2:	4419      	add	r1, r3
 800e0f4:	68fb      	ldr	r3, [r7, #12]
 800e0f6:	685b      	ldr	r3, [r3, #4]
 800e0f8:	4299      	cmp	r1, r3
 800e0fa:	d307      	bcc.n	800e10c <CircularQueue_Add+0x434>
 800e0fc:	68fb      	ldr	r3, [r7, #12]
 800e0fe:	6919      	ldr	r1, [r3, #16]
 800e100:	7ffb      	ldrb	r3, [r7, #31]
 800e102:	4419      	add	r1, r3
 800e104:	68fb      	ldr	r3, [r7, #12]
 800e106:	685b      	ldr	r3, [r3, #4]
 800e108:	1acb      	subs	r3, r1, r3
 800e10a:	e003      	b.n	800e114 <CircularQueue_Add+0x43c>
 800e10c:	68fb      	ldr	r3, [r7, #12]
 800e10e:	6919      	ldr	r1, [r3, #16]
 800e110:	7ffb      	ldrb	r3, [r7, #31]
 800e112:	440b      	add	r3, r1
 800e114:	4413      	add	r3, r2
 800e116:	623b      	str	r3, [r7, #32]
  /* for Breakpoint only...to remove */
  else
  {
    return NULL;
  }
  return ptr;
 800e118:	6a3b      	ldr	r3, [r7, #32]
 800e11a:	e000      	b.n	800e11e <CircularQueue_Add+0x446>
    return NULL;
 800e11c:	2300      	movs	r3, #0
}
 800e11e:	4618      	mov	r0, r3
 800e120:	3738      	adds	r7, #56	; 0x38
 800e122:	46bd      	mov	sp, r7
 800e124:	bd80      	pop	{r7, pc}

0800e126 <CircularQueue_Remove>:
  * @param  q: pointer on queue structure  to be handled
  * @param  elementSize: Pointer to return Size of element to be removed  
  * @retval Pointer on removed element. NULL if queue was empty
  */
uint8_t* CircularQueue_Remove(queue_t *q, uint16_t* elementSize)
{
 800e126:	b480      	push	{r7}
 800e128:	b085      	sub	sp, #20
 800e12a:	af00      	add	r7, sp, #0
 800e12c:	6078      	str	r0, [r7, #4]
 800e12e:	6039      	str	r1, [r7, #0]
  uint8_t  elemSizeStorageRoom = 0;
 800e130:	2300      	movs	r3, #0
 800e132:	72fb      	strb	r3, [r7, #11]
  uint8_t* ptr= NULL;
 800e134:	2300      	movs	r3, #0
 800e136:	60fb      	str	r3, [r7, #12]
  elemSizeStorageRoom = (q->elementSize == 0) ? 2 : 0;
 800e138:	687b      	ldr	r3, [r7, #4]
 800e13a:	891b      	ldrh	r3, [r3, #8]
 800e13c:	2b00      	cmp	r3, #0
 800e13e:	d101      	bne.n	800e144 <CircularQueue_Remove+0x1e>
 800e140:	2302      	movs	r3, #2
 800e142:	e000      	b.n	800e146 <CircularQueue_Remove+0x20>
 800e144:	2300      	movs	r3, #0
 800e146:	72fb      	strb	r3, [r7, #11]
  *elementSize = 0;
 800e148:	683b      	ldr	r3, [r7, #0]
 800e14a:	2200      	movs	r2, #0
 800e14c:	801a      	strh	r2, [r3, #0]
  if (q->byteCount > 0) 
 800e14e:	687b      	ldr	r3, [r7, #4]
 800e150:	695b      	ldr	r3, [r3, #20]
 800e152:	2b00      	cmp	r3, #0
 800e154:	f000 80d4 	beq.w	800e300 <CircularQueue_Remove+0x1da>
  {
    /* retreive element Size */
    *elementSize = (q->elementSize == 0) ? q->qBuff[q->first] + ((q->qBuff[MOD((q->first+1), q->queueMaxSize)])<<8) : q->elementSize;
 800e158:	687b      	ldr	r3, [r7, #4]
 800e15a:	891b      	ldrh	r3, [r3, #8]
 800e15c:	2b00      	cmp	r3, #0
 800e15e:	d121      	bne.n	800e1a4 <CircularQueue_Remove+0x7e>
 800e160:	687b      	ldr	r3, [r7, #4]
 800e162:	681a      	ldr	r2, [r3, #0]
 800e164:	687b      	ldr	r3, [r7, #4]
 800e166:	68db      	ldr	r3, [r3, #12]
 800e168:	4413      	add	r3, r2
 800e16a:	781b      	ldrb	r3, [r3, #0]
 800e16c:	b29a      	uxth	r2, r3
 800e16e:	687b      	ldr	r3, [r7, #4]
 800e170:	6819      	ldr	r1, [r3, #0]
 800e172:	687b      	ldr	r3, [r7, #4]
 800e174:	68db      	ldr	r3, [r3, #12]
 800e176:	1c58      	adds	r0, r3, #1
 800e178:	687b      	ldr	r3, [r7, #4]
 800e17a:	685b      	ldr	r3, [r3, #4]
 800e17c:	4298      	cmp	r0, r3
 800e17e:	d306      	bcc.n	800e18e <CircularQueue_Remove+0x68>
 800e180:	687b      	ldr	r3, [r7, #4]
 800e182:	68d8      	ldr	r0, [r3, #12]
 800e184:	687b      	ldr	r3, [r7, #4]
 800e186:	685b      	ldr	r3, [r3, #4]
 800e188:	1ac3      	subs	r3, r0, r3
 800e18a:	3301      	adds	r3, #1
 800e18c:	e002      	b.n	800e194 <CircularQueue_Remove+0x6e>
 800e18e:	687b      	ldr	r3, [r7, #4]
 800e190:	68db      	ldr	r3, [r3, #12]
 800e192:	3301      	adds	r3, #1
 800e194:	440b      	add	r3, r1
 800e196:	781b      	ldrb	r3, [r3, #0]
 800e198:	b29b      	uxth	r3, r3
 800e19a:	021b      	lsls	r3, r3, #8
 800e19c:	b29b      	uxth	r3, r3
 800e19e:	4413      	add	r3, r2
 800e1a0:	b29b      	uxth	r3, r3
 800e1a2:	e001      	b.n	800e1a8 <CircularQueue_Remove+0x82>
 800e1a4:	687b      	ldr	r3, [r7, #4]
 800e1a6:	891b      	ldrh	r3, [r3, #8]
 800e1a8:	683a      	ldr	r2, [r7, #0]
 800e1aa:	8013      	strh	r3, [r2, #0]

     if ((q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG) && !(q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG))
 800e1ac:	687b      	ldr	r3, [r7, #4]
 800e1ae:	7f1b      	ldrb	r3, [r3, #28]
 800e1b0:	f003 0301 	and.w	r3, r3, #1
 800e1b4:	2b00      	cmp	r3, #0
 800e1b6:	d059      	beq.n	800e26c <CircularQueue_Remove+0x146>
 800e1b8:	687b      	ldr	r3, [r7, #4]
 800e1ba:	7f1b      	ldrb	r3, [r3, #28]
 800e1bc:	f003 0302 	and.w	r3, r3, #2
 800e1c0:	2b00      	cmp	r3, #0
 800e1c2:	d153      	bne.n	800e26c <CircularQueue_Remove+0x146>
     {
       if (((*elementSize == 0xFFFF) && q->elementSize == 0 ) || 
 800e1c4:	683b      	ldr	r3, [r7, #0]
 800e1c6:	881b      	ldrh	r3, [r3, #0]
 800e1c8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e1cc:	4293      	cmp	r3, r2
 800e1ce:	d103      	bne.n	800e1d8 <CircularQueue_Remove+0xb2>
 800e1d0:	687b      	ldr	r3, [r7, #4]
 800e1d2:	891b      	ldrh	r3, [r3, #8]
 800e1d4:	2b00      	cmp	r3, #0
 800e1d6:	d012      	beq.n	800e1fe <CircularQueue_Remove+0xd8>
           ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 800e1d8:	687b      	ldr	r3, [r7, #4]
 800e1da:	68da      	ldr	r2, [r3, #12]
 800e1dc:	687b      	ldr	r3, [r7, #4]
 800e1de:	691b      	ldr	r3, [r3, #16]
       if (((*elementSize == 0xFFFF) && q->elementSize == 0 ) || 
 800e1e0:	429a      	cmp	r2, r3
 800e1e2:	d943      	bls.n	800e26c <CircularQueue_Remove+0x146>
           ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 800e1e4:	687b      	ldr	r3, [r7, #4]
 800e1e6:	891b      	ldrh	r3, [r3, #8]
 800e1e8:	2b00      	cmp	r3, #0
 800e1ea:	d03f      	beq.n	800e26c <CircularQueue_Remove+0x146>
 800e1ec:	687b      	ldr	r3, [r7, #4]
 800e1ee:	685a      	ldr	r2, [r3, #4]
 800e1f0:	687b      	ldr	r3, [r7, #4]
 800e1f2:	68db      	ldr	r3, [r3, #12]
 800e1f4:	1ad3      	subs	r3, r2, r3
 800e1f6:	687a      	ldr	r2, [r7, #4]
 800e1f8:	8912      	ldrh	r2, [r2, #8]
 800e1fa:	4293      	cmp	r3, r2
 800e1fc:	d236      	bcs.n	800e26c <CircularQueue_Remove+0x146>
       {
          /* all data from current position up to the end of buffer are invalid */
          q->byteCount -= (q->queueMaxSize - q->first);
 800e1fe:	687b      	ldr	r3, [r7, #4]
 800e200:	695a      	ldr	r2, [r3, #20]
 800e202:	687b      	ldr	r3, [r7, #4]
 800e204:	68d9      	ldr	r1, [r3, #12]
 800e206:	687b      	ldr	r3, [r7, #4]
 800e208:	685b      	ldr	r3, [r3, #4]
 800e20a:	1acb      	subs	r3, r1, r3
 800e20c:	441a      	add	r2, r3
 800e20e:	687b      	ldr	r3, [r7, #4]
 800e210:	615a      	str	r2, [r3, #20]
          /* Adjust first element pos */
          q->first = 0;
 800e212:	687b      	ldr	r3, [r7, #4]
 800e214:	2200      	movs	r2, #0
 800e216:	60da      	str	r2, [r3, #12]
          /* retrieve the rigth size after the wrap [if varaible size element] */
          *elementSize = (q->elementSize == 0) ? q->qBuff[q->first] + ((q->qBuff[MOD((q->first+1), q->queueMaxSize)])<<8) : q->elementSize;
 800e218:	687b      	ldr	r3, [r7, #4]
 800e21a:	891b      	ldrh	r3, [r3, #8]
 800e21c:	2b00      	cmp	r3, #0
 800e21e:	d121      	bne.n	800e264 <CircularQueue_Remove+0x13e>
 800e220:	687b      	ldr	r3, [r7, #4]
 800e222:	681a      	ldr	r2, [r3, #0]
 800e224:	687b      	ldr	r3, [r7, #4]
 800e226:	68db      	ldr	r3, [r3, #12]
 800e228:	4413      	add	r3, r2
 800e22a:	781b      	ldrb	r3, [r3, #0]
 800e22c:	b29a      	uxth	r2, r3
 800e22e:	687b      	ldr	r3, [r7, #4]
 800e230:	6819      	ldr	r1, [r3, #0]
 800e232:	687b      	ldr	r3, [r7, #4]
 800e234:	68db      	ldr	r3, [r3, #12]
 800e236:	1c58      	adds	r0, r3, #1
 800e238:	687b      	ldr	r3, [r7, #4]
 800e23a:	685b      	ldr	r3, [r3, #4]
 800e23c:	4298      	cmp	r0, r3
 800e23e:	d306      	bcc.n	800e24e <CircularQueue_Remove+0x128>
 800e240:	687b      	ldr	r3, [r7, #4]
 800e242:	68d8      	ldr	r0, [r3, #12]
 800e244:	687b      	ldr	r3, [r7, #4]
 800e246:	685b      	ldr	r3, [r3, #4]
 800e248:	1ac3      	subs	r3, r0, r3
 800e24a:	3301      	adds	r3, #1
 800e24c:	e002      	b.n	800e254 <CircularQueue_Remove+0x12e>
 800e24e:	687b      	ldr	r3, [r7, #4]
 800e250:	68db      	ldr	r3, [r3, #12]
 800e252:	3301      	adds	r3, #1
 800e254:	440b      	add	r3, r1
 800e256:	781b      	ldrb	r3, [r3, #0]
 800e258:	b29b      	uxth	r3, r3
 800e25a:	021b      	lsls	r3, r3, #8
 800e25c:	b29b      	uxth	r3, r3
 800e25e:	4413      	add	r3, r2
 800e260:	b29b      	uxth	r3, r3
 800e262:	e001      	b.n	800e268 <CircularQueue_Remove+0x142>
 800e264:	687b      	ldr	r3, [r7, #4]
 800e266:	891b      	ldrh	r3, [r3, #8]
 800e268:	683a      	ldr	r2, [r7, #0]
 800e26a:	8013      	strh	r3, [r2, #0]
       }
     }

    /* retreive element */
    ptr = q->qBuff + (MOD((q->first + elemSizeStorageRoom), q->queueMaxSize));
 800e26c:	687b      	ldr	r3, [r7, #4]
 800e26e:	681a      	ldr	r2, [r3, #0]
 800e270:	687b      	ldr	r3, [r7, #4]
 800e272:	68d9      	ldr	r1, [r3, #12]
 800e274:	7afb      	ldrb	r3, [r7, #11]
 800e276:	4419      	add	r1, r3
 800e278:	687b      	ldr	r3, [r7, #4]
 800e27a:	685b      	ldr	r3, [r3, #4]
 800e27c:	4299      	cmp	r1, r3
 800e27e:	d307      	bcc.n	800e290 <CircularQueue_Remove+0x16a>
 800e280:	687b      	ldr	r3, [r7, #4]
 800e282:	68d9      	ldr	r1, [r3, #12]
 800e284:	7afb      	ldrb	r3, [r7, #11]
 800e286:	4419      	add	r1, r3
 800e288:	687b      	ldr	r3, [r7, #4]
 800e28a:	685b      	ldr	r3, [r3, #4]
 800e28c:	1acb      	subs	r3, r1, r3
 800e28e:	e003      	b.n	800e298 <CircularQueue_Remove+0x172>
 800e290:	687b      	ldr	r3, [r7, #4]
 800e292:	68d9      	ldr	r1, [r3, #12]
 800e294:	7afb      	ldrb	r3, [r7, #11]
 800e296:	440b      	add	r3, r1
 800e298:	4413      	add	r3, r2
 800e29a:	60fb      	str	r3, [r7, #12]

    /* adjust byte count */
    q->byteCount -= (*elementSize + elemSizeStorageRoom) ;
 800e29c:	687b      	ldr	r3, [r7, #4]
 800e29e:	695b      	ldr	r3, [r3, #20]
 800e2a0:	683a      	ldr	r2, [r7, #0]
 800e2a2:	8812      	ldrh	r2, [r2, #0]
 800e2a4:	4611      	mov	r1, r2
 800e2a6:	7afa      	ldrb	r2, [r7, #11]
 800e2a8:	440a      	add	r2, r1
 800e2aa:	1a9a      	subs	r2, r3, r2
 800e2ac:	687b      	ldr	r3, [r7, #4]
 800e2ae:	615a      	str	r2, [r3, #20]
    
    /* Adjust q->first */
    if (q->byteCount > 0)
 800e2b0:	687b      	ldr	r3, [r7, #4]
 800e2b2:	695b      	ldr	r3, [r3, #20]
 800e2b4:	2b00      	cmp	r3, #0
 800e2b6:	d01e      	beq.n	800e2f6 <CircularQueue_Remove+0x1d0>
    {
      q->first = MOD((q->first+ *elementSize + elemSizeStorageRoom ), q->queueMaxSize);
 800e2b8:	687b      	ldr	r3, [r7, #4]
 800e2ba:	68db      	ldr	r3, [r3, #12]
 800e2bc:	683a      	ldr	r2, [r7, #0]
 800e2be:	8812      	ldrh	r2, [r2, #0]
 800e2c0:	441a      	add	r2, r3
 800e2c2:	7afb      	ldrb	r3, [r7, #11]
 800e2c4:	441a      	add	r2, r3
 800e2c6:	687b      	ldr	r3, [r7, #4]
 800e2c8:	685b      	ldr	r3, [r3, #4]
 800e2ca:	429a      	cmp	r2, r3
 800e2cc:	d30a      	bcc.n	800e2e4 <CircularQueue_Remove+0x1be>
 800e2ce:	687b      	ldr	r3, [r7, #4]
 800e2d0:	68db      	ldr	r3, [r3, #12]
 800e2d2:	683a      	ldr	r2, [r7, #0]
 800e2d4:	8812      	ldrh	r2, [r2, #0]
 800e2d6:	441a      	add	r2, r3
 800e2d8:	7afb      	ldrb	r3, [r7, #11]
 800e2da:	441a      	add	r2, r3
 800e2dc:	687b      	ldr	r3, [r7, #4]
 800e2de:	685b      	ldr	r3, [r3, #4]
 800e2e0:	1ad3      	subs	r3, r2, r3
 800e2e2:	e006      	b.n	800e2f2 <CircularQueue_Remove+0x1cc>
 800e2e4:	687b      	ldr	r3, [r7, #4]
 800e2e6:	68db      	ldr	r3, [r3, #12]
 800e2e8:	683a      	ldr	r2, [r7, #0]
 800e2ea:	8812      	ldrh	r2, [r2, #0]
 800e2ec:	441a      	add	r2, r3
 800e2ee:	7afb      	ldrb	r3, [r7, #11]
 800e2f0:	4413      	add	r3, r2
 800e2f2:	687a      	ldr	r2, [r7, #4]
 800e2f4:	60d3      	str	r3, [r2, #12]
    }    
    /* adjust element count */    
    --q->elementCount;    
 800e2f6:	687b      	ldr	r3, [r7, #4]
 800e2f8:	699b      	ldr	r3, [r3, #24]
 800e2fa:	1e5a      	subs	r2, r3, #1
 800e2fc:	687b      	ldr	r3, [r7, #4]
 800e2fe:	619a      	str	r2, [r3, #24]
  }
  return ptr;
 800e300:	68fb      	ldr	r3, [r7, #12]
}
 800e302:	4618      	mov	r0, r3
 800e304:	3714      	adds	r7, #20
 800e306:	46bd      	mov	sp, r7
 800e308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e30c:	4770      	bx	lr

0800e30e <CircularQueue_Sense>:
  * @param  q: pointer on queue structure  to be handled
  * @param  elementSize:  Pointer to return Size of element to be removed  
  * @retval Pointer on sensed element. NULL if queue was empty
  */
uint8_t* CircularQueue_Sense(queue_t *q, uint16_t* elementSize)
{
 800e30e:	b480      	push	{r7}
 800e310:	b087      	sub	sp, #28
 800e312:	af00      	add	r7, sp, #0
 800e314:	6078      	str	r0, [r7, #4]
 800e316:	6039      	str	r1, [r7, #0]
  uint8_t  elemSizeStorageRoom = 0;
 800e318:	2300      	movs	r3, #0
 800e31a:	73fb      	strb	r3, [r7, #15]
  uint8_t* x= NULL;
 800e31c:	2300      	movs	r3, #0
 800e31e:	617b      	str	r3, [r7, #20]
  elemSizeStorageRoom = (q->elementSize == 0) ? 2 : 0;
 800e320:	687b      	ldr	r3, [r7, #4]
 800e322:	891b      	ldrh	r3, [r3, #8]
 800e324:	2b00      	cmp	r3, #0
 800e326:	d101      	bne.n	800e32c <CircularQueue_Sense+0x1e>
 800e328:	2302      	movs	r3, #2
 800e32a:	e000      	b.n	800e32e <CircularQueue_Sense+0x20>
 800e32c:	2300      	movs	r3, #0
 800e32e:	73fb      	strb	r3, [r7, #15]
  *elementSize = 0;
 800e330:	683b      	ldr	r3, [r7, #0]
 800e332:	2200      	movs	r2, #0
 800e334:	801a      	strh	r2, [r3, #0]
  uint32_t FirstElemetPos = 0;
 800e336:	2300      	movs	r3, #0
 800e338:	613b      	str	r3, [r7, #16]
    
  if (q->byteCount > 0) 
 800e33a:	687b      	ldr	r3, [r7, #4]
 800e33c:	695b      	ldr	r3, [r3, #20]
 800e33e:	2b00      	cmp	r3, #0
 800e340:	f000 8093 	beq.w	800e46a <CircularQueue_Sense+0x15c>
  {
    FirstElemetPos = q->first;
 800e344:	687b      	ldr	r3, [r7, #4]
 800e346:	68db      	ldr	r3, [r3, #12]
 800e348:	613b      	str	r3, [r7, #16]
    *elementSize = (q->elementSize == 0) ? q->qBuff[q->first] + ((q->qBuff[MOD((q->first+1), q->queueMaxSize)])<<8) : q->elementSize;
 800e34a:	687b      	ldr	r3, [r7, #4]
 800e34c:	891b      	ldrh	r3, [r3, #8]
 800e34e:	2b00      	cmp	r3, #0
 800e350:	d121      	bne.n	800e396 <CircularQueue_Sense+0x88>
 800e352:	687b      	ldr	r3, [r7, #4]
 800e354:	681a      	ldr	r2, [r3, #0]
 800e356:	687b      	ldr	r3, [r7, #4]
 800e358:	68db      	ldr	r3, [r3, #12]
 800e35a:	4413      	add	r3, r2
 800e35c:	781b      	ldrb	r3, [r3, #0]
 800e35e:	b29a      	uxth	r2, r3
 800e360:	687b      	ldr	r3, [r7, #4]
 800e362:	6819      	ldr	r1, [r3, #0]
 800e364:	687b      	ldr	r3, [r7, #4]
 800e366:	68db      	ldr	r3, [r3, #12]
 800e368:	1c58      	adds	r0, r3, #1
 800e36a:	687b      	ldr	r3, [r7, #4]
 800e36c:	685b      	ldr	r3, [r3, #4]
 800e36e:	4298      	cmp	r0, r3
 800e370:	d306      	bcc.n	800e380 <CircularQueue_Sense+0x72>
 800e372:	687b      	ldr	r3, [r7, #4]
 800e374:	68d8      	ldr	r0, [r3, #12]
 800e376:	687b      	ldr	r3, [r7, #4]
 800e378:	685b      	ldr	r3, [r3, #4]
 800e37a:	1ac3      	subs	r3, r0, r3
 800e37c:	3301      	adds	r3, #1
 800e37e:	e002      	b.n	800e386 <CircularQueue_Sense+0x78>
 800e380:	687b      	ldr	r3, [r7, #4]
 800e382:	68db      	ldr	r3, [r3, #12]
 800e384:	3301      	adds	r3, #1
 800e386:	440b      	add	r3, r1
 800e388:	781b      	ldrb	r3, [r3, #0]
 800e38a:	b29b      	uxth	r3, r3
 800e38c:	021b      	lsls	r3, r3, #8
 800e38e:	b29b      	uxth	r3, r3
 800e390:	4413      	add	r3, r2
 800e392:	b29b      	uxth	r3, r3
 800e394:	e001      	b.n	800e39a <CircularQueue_Sense+0x8c>
 800e396:	687b      	ldr	r3, [r7, #4]
 800e398:	891b      	ldrh	r3, [r3, #8]
 800e39a:	683a      	ldr	r2, [r7, #0]
 800e39c:	8013      	strh	r3, [r2, #0]
    
    if ((q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG) && !(q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG))
 800e39e:	687b      	ldr	r3, [r7, #4]
 800e3a0:	7f1b      	ldrb	r3, [r3, #28]
 800e3a2:	f003 0301 	and.w	r3, r3, #1
 800e3a6:	2b00      	cmp	r3, #0
 800e3a8:	d04a      	beq.n	800e440 <CircularQueue_Sense+0x132>
 800e3aa:	687b      	ldr	r3, [r7, #4]
 800e3ac:	7f1b      	ldrb	r3, [r3, #28]
 800e3ae:	f003 0302 	and.w	r3, r3, #2
 800e3b2:	2b00      	cmp	r3, #0
 800e3b4:	d144      	bne.n	800e440 <CircularQueue_Sense+0x132>
    { 
      if (((*elementSize == 0xFFFF) && q->elementSize == 0 ) || 
 800e3b6:	683b      	ldr	r3, [r7, #0]
 800e3b8:	881b      	ldrh	r3, [r3, #0]
 800e3ba:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e3be:	4293      	cmp	r3, r2
 800e3c0:	d103      	bne.n	800e3ca <CircularQueue_Sense+0xbc>
 800e3c2:	687b      	ldr	r3, [r7, #4]
 800e3c4:	891b      	ldrh	r3, [r3, #8]
 800e3c6:	2b00      	cmp	r3, #0
 800e3c8:	d012      	beq.n	800e3f0 <CircularQueue_Sense+0xe2>
          ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 800e3ca:	687b      	ldr	r3, [r7, #4]
 800e3cc:	68da      	ldr	r2, [r3, #12]
 800e3ce:	687b      	ldr	r3, [r7, #4]
 800e3d0:	691b      	ldr	r3, [r3, #16]
      if (((*elementSize == 0xFFFF) && q->elementSize == 0 ) || 
 800e3d2:	429a      	cmp	r2, r3
 800e3d4:	d934      	bls.n	800e440 <CircularQueue_Sense+0x132>
          ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 800e3d6:	687b      	ldr	r3, [r7, #4]
 800e3d8:	891b      	ldrh	r3, [r3, #8]
 800e3da:	2b00      	cmp	r3, #0
 800e3dc:	d030      	beq.n	800e440 <CircularQueue_Sense+0x132>
 800e3de:	687b      	ldr	r3, [r7, #4]
 800e3e0:	685a      	ldr	r2, [r3, #4]
 800e3e2:	687b      	ldr	r3, [r7, #4]
 800e3e4:	68db      	ldr	r3, [r3, #12]
 800e3e6:	1ad3      	subs	r3, r2, r3
 800e3e8:	687a      	ldr	r2, [r7, #4]
 800e3ea:	8912      	ldrh	r2, [r2, #8]
 800e3ec:	4293      	cmp	r3, r2
 800e3ee:	d227      	bcs.n	800e440 <CircularQueue_Sense+0x132>

      {
        /* all data from current position up to the end of buffer are invalid */
        FirstElemetPos = 0; /* wrap to the begiining of buffer */
 800e3f0:	2300      	movs	r3, #0
 800e3f2:	613b      	str	r3, [r7, #16]

        /* retrieve the rigth size after the wrap [if varaible size element] */
        *elementSize = (q->elementSize == 0) ? q->qBuff[FirstElemetPos]+ ((q->qBuff[MOD((FirstElemetPos+1), q->queueMaxSize)])<<8) : q->elementSize;
 800e3f4:	687b      	ldr	r3, [r7, #4]
 800e3f6:	891b      	ldrh	r3, [r3, #8]
 800e3f8:	2b00      	cmp	r3, #0
 800e3fa:	d11d      	bne.n	800e438 <CircularQueue_Sense+0x12a>
 800e3fc:	687b      	ldr	r3, [r7, #4]
 800e3fe:	681a      	ldr	r2, [r3, #0]
 800e400:	693b      	ldr	r3, [r7, #16]
 800e402:	4413      	add	r3, r2
 800e404:	781b      	ldrb	r3, [r3, #0]
 800e406:	b29a      	uxth	r2, r3
 800e408:	687b      	ldr	r3, [r7, #4]
 800e40a:	6819      	ldr	r1, [r3, #0]
 800e40c:	693b      	ldr	r3, [r7, #16]
 800e40e:	1c58      	adds	r0, r3, #1
 800e410:	687b      	ldr	r3, [r7, #4]
 800e412:	685b      	ldr	r3, [r3, #4]
 800e414:	4298      	cmp	r0, r3
 800e416:	d305      	bcc.n	800e424 <CircularQueue_Sense+0x116>
 800e418:	687b      	ldr	r3, [r7, #4]
 800e41a:	685b      	ldr	r3, [r3, #4]
 800e41c:	6938      	ldr	r0, [r7, #16]
 800e41e:	1ac3      	subs	r3, r0, r3
 800e420:	3301      	adds	r3, #1
 800e422:	e001      	b.n	800e428 <CircularQueue_Sense+0x11a>
 800e424:	693b      	ldr	r3, [r7, #16]
 800e426:	3301      	adds	r3, #1
 800e428:	440b      	add	r3, r1
 800e42a:	781b      	ldrb	r3, [r3, #0]
 800e42c:	b29b      	uxth	r3, r3
 800e42e:	021b      	lsls	r3, r3, #8
 800e430:	b29b      	uxth	r3, r3
 800e432:	4413      	add	r3, r2
 800e434:	b29b      	uxth	r3, r3
 800e436:	e001      	b.n	800e43c <CircularQueue_Sense+0x12e>
 800e438:	687b      	ldr	r3, [r7, #4]
 800e43a:	891b      	ldrh	r3, [r3, #8]
 800e43c:	683a      	ldr	r2, [r7, #0]
 800e43e:	8013      	strh	r3, [r2, #0]
      }
   }
   /* retrieve element */
    x = q->qBuff + (MOD((FirstElemetPos + elemSizeStorageRoom), q->queueMaxSize));
 800e440:	687b      	ldr	r3, [r7, #4]
 800e442:	681a      	ldr	r2, [r3, #0]
 800e444:	7bf9      	ldrb	r1, [r7, #15]
 800e446:	693b      	ldr	r3, [r7, #16]
 800e448:	4419      	add	r1, r3
 800e44a:	687b      	ldr	r3, [r7, #4]
 800e44c:	685b      	ldr	r3, [r3, #4]
 800e44e:	4299      	cmp	r1, r3
 800e450:	d306      	bcc.n	800e460 <CircularQueue_Sense+0x152>
 800e452:	7bf9      	ldrb	r1, [r7, #15]
 800e454:	693b      	ldr	r3, [r7, #16]
 800e456:	4419      	add	r1, r3
 800e458:	687b      	ldr	r3, [r7, #4]
 800e45a:	685b      	ldr	r3, [r3, #4]
 800e45c:	1acb      	subs	r3, r1, r3
 800e45e:	e002      	b.n	800e466 <CircularQueue_Sense+0x158>
 800e460:	7bf9      	ldrb	r1, [r7, #15]
 800e462:	693b      	ldr	r3, [r7, #16]
 800e464:	440b      	add	r3, r1
 800e466:	4413      	add	r3, r2
 800e468:	617b      	str	r3, [r7, #20]
  }
  return x;
 800e46a:	697b      	ldr	r3, [r7, #20]
}
 800e46c:	4618      	mov	r0, r3
 800e46e:	371c      	adds	r7, #28
 800e470:	46bd      	mov	sp, r7
 800e472:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e476:	4770      	bx	lr

0800e478 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800e478:	b480      	push	{r7}
 800e47a:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 800e47c:	bf00      	nop
 800e47e:	46bd      	mov	sp, r7
 800e480:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e484:	4770      	bx	lr
	...

0800e488 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800e488:	b480      	push	{r7}
 800e48a:	b085      	sub	sp, #20
 800e48c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e48e:	f3ef 8305 	mrs	r3, IPSR
 800e492:	60bb      	str	r3, [r7, #8]
  return(result);
 800e494:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800e496:	2b00      	cmp	r3, #0
 800e498:	d10f      	bne.n	800e4ba <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e49a:	f3ef 8310 	mrs	r3, PRIMASK
 800e49e:	607b      	str	r3, [r7, #4]
  return(result);
 800e4a0:	687b      	ldr	r3, [r7, #4]
 800e4a2:	2b00      	cmp	r3, #0
 800e4a4:	d105      	bne.n	800e4b2 <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800e4a6:	f3ef 8311 	mrs	r3, BASEPRI
 800e4aa:	603b      	str	r3, [r7, #0]
  return(result);
 800e4ac:	683b      	ldr	r3, [r7, #0]
 800e4ae:	2b00      	cmp	r3, #0
 800e4b0:	d007      	beq.n	800e4c2 <osKernelInitialize+0x3a>
 800e4b2:	4b0e      	ldr	r3, [pc, #56]	; (800e4ec <osKernelInitialize+0x64>)
 800e4b4:	681b      	ldr	r3, [r3, #0]
 800e4b6:	2b02      	cmp	r3, #2
 800e4b8:	d103      	bne.n	800e4c2 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 800e4ba:	f06f 0305 	mvn.w	r3, #5
 800e4be:	60fb      	str	r3, [r7, #12]
 800e4c0:	e00c      	b.n	800e4dc <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 800e4c2:	4b0a      	ldr	r3, [pc, #40]	; (800e4ec <osKernelInitialize+0x64>)
 800e4c4:	681b      	ldr	r3, [r3, #0]
 800e4c6:	2b00      	cmp	r3, #0
 800e4c8:	d105      	bne.n	800e4d6 <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800e4ca:	4b08      	ldr	r3, [pc, #32]	; (800e4ec <osKernelInitialize+0x64>)
 800e4cc:	2201      	movs	r2, #1
 800e4ce:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800e4d0:	2300      	movs	r3, #0
 800e4d2:	60fb      	str	r3, [r7, #12]
 800e4d4:	e002      	b.n	800e4dc <osKernelInitialize+0x54>
    } else {
      stat = osError;
 800e4d6:	f04f 33ff 	mov.w	r3, #4294967295
 800e4da:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800e4dc:	68fb      	ldr	r3, [r7, #12]
}
 800e4de:	4618      	mov	r0, r3
 800e4e0:	3714      	adds	r7, #20
 800e4e2:	46bd      	mov	sp, r7
 800e4e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4e8:	4770      	bx	lr
 800e4ea:	bf00      	nop
 800e4ec:	2000147c 	.word	0x2000147c

0800e4f0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800e4f0:	b580      	push	{r7, lr}
 800e4f2:	b084      	sub	sp, #16
 800e4f4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e4f6:	f3ef 8305 	mrs	r3, IPSR
 800e4fa:	60bb      	str	r3, [r7, #8]
  return(result);
 800e4fc:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800e4fe:	2b00      	cmp	r3, #0
 800e500:	d10f      	bne.n	800e522 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e502:	f3ef 8310 	mrs	r3, PRIMASK
 800e506:	607b      	str	r3, [r7, #4]
  return(result);
 800e508:	687b      	ldr	r3, [r7, #4]
 800e50a:	2b00      	cmp	r3, #0
 800e50c:	d105      	bne.n	800e51a <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800e50e:	f3ef 8311 	mrs	r3, BASEPRI
 800e512:	603b      	str	r3, [r7, #0]
  return(result);
 800e514:	683b      	ldr	r3, [r7, #0]
 800e516:	2b00      	cmp	r3, #0
 800e518:	d007      	beq.n	800e52a <osKernelStart+0x3a>
 800e51a:	4b0f      	ldr	r3, [pc, #60]	; (800e558 <osKernelStart+0x68>)
 800e51c:	681b      	ldr	r3, [r3, #0]
 800e51e:	2b02      	cmp	r3, #2
 800e520:	d103      	bne.n	800e52a <osKernelStart+0x3a>
    stat = osErrorISR;
 800e522:	f06f 0305 	mvn.w	r3, #5
 800e526:	60fb      	str	r3, [r7, #12]
 800e528:	e010      	b.n	800e54c <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 800e52a:	4b0b      	ldr	r3, [pc, #44]	; (800e558 <osKernelStart+0x68>)
 800e52c:	681b      	ldr	r3, [r3, #0]
 800e52e:	2b01      	cmp	r3, #1
 800e530:	d109      	bne.n	800e546 <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800e532:	f7ff ffa1 	bl	800e478 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800e536:	4b08      	ldr	r3, [pc, #32]	; (800e558 <osKernelStart+0x68>)
 800e538:	2202      	movs	r2, #2
 800e53a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800e53c:	f002 fd5e 	bl	8010ffc <vTaskStartScheduler>
      stat = osOK;
 800e540:	2300      	movs	r3, #0
 800e542:	60fb      	str	r3, [r7, #12]
 800e544:	e002      	b.n	800e54c <osKernelStart+0x5c>
    } else {
      stat = osError;
 800e546:	f04f 33ff 	mov.w	r3, #4294967295
 800e54a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800e54c:	68fb      	ldr	r3, [r7, #12]
}
 800e54e:	4618      	mov	r0, r3
 800e550:	3710      	adds	r7, #16
 800e552:	46bd      	mov	sp, r7
 800e554:	bd80      	pop	{r7, pc}
 800e556:	bf00      	nop
 800e558:	2000147c 	.word	0x2000147c

0800e55c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800e55c:	b580      	push	{r7, lr}
 800e55e:	b090      	sub	sp, #64	; 0x40
 800e560:	af04      	add	r7, sp, #16
 800e562:	60f8      	str	r0, [r7, #12]
 800e564:	60b9      	str	r1, [r7, #8]
 800e566:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800e568:	2300      	movs	r3, #0
 800e56a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e56c:	f3ef 8305 	mrs	r3, IPSR
 800e570:	61fb      	str	r3, [r7, #28]
  return(result);
 800e572:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 800e574:	2b00      	cmp	r3, #0
 800e576:	f040 808f 	bne.w	800e698 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e57a:	f3ef 8310 	mrs	r3, PRIMASK
 800e57e:	61bb      	str	r3, [r7, #24]
  return(result);
 800e580:	69bb      	ldr	r3, [r7, #24]
 800e582:	2b00      	cmp	r3, #0
 800e584:	d105      	bne.n	800e592 <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800e586:	f3ef 8311 	mrs	r3, BASEPRI
 800e58a:	617b      	str	r3, [r7, #20]
  return(result);
 800e58c:	697b      	ldr	r3, [r7, #20]
 800e58e:	2b00      	cmp	r3, #0
 800e590:	d003      	beq.n	800e59a <osThreadNew+0x3e>
 800e592:	4b44      	ldr	r3, [pc, #272]	; (800e6a4 <osThreadNew+0x148>)
 800e594:	681b      	ldr	r3, [r3, #0]
 800e596:	2b02      	cmp	r3, #2
 800e598:	d07e      	beq.n	800e698 <osThreadNew+0x13c>
 800e59a:	68fb      	ldr	r3, [r7, #12]
 800e59c:	2b00      	cmp	r3, #0
 800e59e:	d07b      	beq.n	800e698 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 800e5a0:	2380      	movs	r3, #128	; 0x80
 800e5a2:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 800e5a4:	2318      	movs	r3, #24
 800e5a6:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 800e5a8:	2300      	movs	r3, #0
 800e5aa:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 800e5ac:	f04f 33ff 	mov.w	r3, #4294967295
 800e5b0:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800e5b2:	687b      	ldr	r3, [r7, #4]
 800e5b4:	2b00      	cmp	r3, #0
 800e5b6:	d045      	beq.n	800e644 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 800e5b8:	687b      	ldr	r3, [r7, #4]
 800e5ba:	681b      	ldr	r3, [r3, #0]
 800e5bc:	2b00      	cmp	r3, #0
 800e5be:	d002      	beq.n	800e5c6 <osThreadNew+0x6a>
        name = attr->name;
 800e5c0:	687b      	ldr	r3, [r7, #4]
 800e5c2:	681b      	ldr	r3, [r3, #0]
 800e5c4:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 800e5c6:	687b      	ldr	r3, [r7, #4]
 800e5c8:	699b      	ldr	r3, [r3, #24]
 800e5ca:	2b00      	cmp	r3, #0
 800e5cc:	d002      	beq.n	800e5d4 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 800e5ce:	687b      	ldr	r3, [r7, #4]
 800e5d0:	699b      	ldr	r3, [r3, #24]
 800e5d2:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800e5d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e5d6:	2b00      	cmp	r3, #0
 800e5d8:	d008      	beq.n	800e5ec <osThreadNew+0x90>
 800e5da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e5dc:	2b38      	cmp	r3, #56	; 0x38
 800e5de:	d805      	bhi.n	800e5ec <osThreadNew+0x90>
 800e5e0:	687b      	ldr	r3, [r7, #4]
 800e5e2:	685b      	ldr	r3, [r3, #4]
 800e5e4:	f003 0301 	and.w	r3, r3, #1
 800e5e8:	2b00      	cmp	r3, #0
 800e5ea:	d001      	beq.n	800e5f0 <osThreadNew+0x94>
        return (NULL);
 800e5ec:	2300      	movs	r3, #0
 800e5ee:	e054      	b.n	800e69a <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 800e5f0:	687b      	ldr	r3, [r7, #4]
 800e5f2:	695b      	ldr	r3, [r3, #20]
 800e5f4:	2b00      	cmp	r3, #0
 800e5f6:	d003      	beq.n	800e600 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800e5f8:	687b      	ldr	r3, [r7, #4]
 800e5fa:	695b      	ldr	r3, [r3, #20]
 800e5fc:	089b      	lsrs	r3, r3, #2
 800e5fe:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800e600:	687b      	ldr	r3, [r7, #4]
 800e602:	689b      	ldr	r3, [r3, #8]
 800e604:	2b00      	cmp	r3, #0
 800e606:	d00e      	beq.n	800e626 <osThreadNew+0xca>
 800e608:	687b      	ldr	r3, [r7, #4]
 800e60a:	68db      	ldr	r3, [r3, #12]
 800e60c:	2b5b      	cmp	r3, #91	; 0x5b
 800e60e:	d90a      	bls.n	800e626 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800e610:	687b      	ldr	r3, [r7, #4]
 800e612:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800e614:	2b00      	cmp	r3, #0
 800e616:	d006      	beq.n	800e626 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800e618:	687b      	ldr	r3, [r7, #4]
 800e61a:	695b      	ldr	r3, [r3, #20]
 800e61c:	2b00      	cmp	r3, #0
 800e61e:	d002      	beq.n	800e626 <osThreadNew+0xca>
        mem = 1;
 800e620:	2301      	movs	r3, #1
 800e622:	623b      	str	r3, [r7, #32]
 800e624:	e010      	b.n	800e648 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800e626:	687b      	ldr	r3, [r7, #4]
 800e628:	689b      	ldr	r3, [r3, #8]
 800e62a:	2b00      	cmp	r3, #0
 800e62c:	d10c      	bne.n	800e648 <osThreadNew+0xec>
 800e62e:	687b      	ldr	r3, [r7, #4]
 800e630:	68db      	ldr	r3, [r3, #12]
 800e632:	2b00      	cmp	r3, #0
 800e634:	d108      	bne.n	800e648 <osThreadNew+0xec>
 800e636:	687b      	ldr	r3, [r7, #4]
 800e638:	691b      	ldr	r3, [r3, #16]
 800e63a:	2b00      	cmp	r3, #0
 800e63c:	d104      	bne.n	800e648 <osThreadNew+0xec>
          mem = 0;
 800e63e:	2300      	movs	r3, #0
 800e640:	623b      	str	r3, [r7, #32]
 800e642:	e001      	b.n	800e648 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 800e644:	2300      	movs	r3, #0
 800e646:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 800e648:	6a3b      	ldr	r3, [r7, #32]
 800e64a:	2b01      	cmp	r3, #1
 800e64c:	d110      	bne.n	800e670 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800e64e:	687b      	ldr	r3, [r7, #4]
 800e650:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 800e652:	687a      	ldr	r2, [r7, #4]
 800e654:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800e656:	9202      	str	r2, [sp, #8]
 800e658:	9301      	str	r3, [sp, #4]
 800e65a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e65c:	9300      	str	r3, [sp, #0]
 800e65e:	68bb      	ldr	r3, [r7, #8]
 800e660:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e662:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e664:	68f8      	ldr	r0, [r7, #12]
 800e666:	f002 faf7 	bl	8010c58 <xTaskCreateStatic>
 800e66a:	4603      	mov	r3, r0
 800e66c:	613b      	str	r3, [r7, #16]
 800e66e:	e013      	b.n	800e698 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 800e670:	6a3b      	ldr	r3, [r7, #32]
 800e672:	2b00      	cmp	r3, #0
 800e674:	d110      	bne.n	800e698 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800e676:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e678:	b29a      	uxth	r2, r3
 800e67a:	f107 0310 	add.w	r3, r7, #16
 800e67e:	9301      	str	r3, [sp, #4]
 800e680:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e682:	9300      	str	r3, [sp, #0]
 800e684:	68bb      	ldr	r3, [r7, #8]
 800e686:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e688:	68f8      	ldr	r0, [r7, #12]
 800e68a:	f002 fb3f 	bl	8010d0c <xTaskCreate>
 800e68e:	4603      	mov	r3, r0
 800e690:	2b01      	cmp	r3, #1
 800e692:	d001      	beq.n	800e698 <osThreadNew+0x13c>
          hTask = NULL;
 800e694:	2300      	movs	r3, #0
 800e696:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 800e698:	693b      	ldr	r3, [r7, #16]
}
 800e69a:	4618      	mov	r0, r3
 800e69c:	3730      	adds	r7, #48	; 0x30
 800e69e:	46bd      	mov	sp, r7
 800e6a0:	bd80      	pop	{r7, pc}
 800e6a2:	bf00      	nop
 800e6a4:	2000147c 	.word	0x2000147c

0800e6a8 <osThreadFlagsSet>:
  }

  return (count);
}

uint32_t osThreadFlagsSet (osThreadId_t thread_id, uint32_t flags) {
 800e6a8:	b580      	push	{r7, lr}
 800e6aa:	b08a      	sub	sp, #40	; 0x28
 800e6ac:	af02      	add	r7, sp, #8
 800e6ae:	6078      	str	r0, [r7, #4]
 800e6b0:	6039      	str	r1, [r7, #0]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 800e6b2:	687b      	ldr	r3, [r7, #4]
 800e6b4:	61fb      	str	r3, [r7, #28]
  uint32_t rflags;
  BaseType_t yield;

  if ((hTask == NULL) || ((flags & THREAD_FLAGS_INVALID_BITS) != 0U)) {
 800e6b6:	69fb      	ldr	r3, [r7, #28]
 800e6b8:	2b00      	cmp	r3, #0
 800e6ba:	d002      	beq.n	800e6c2 <osThreadFlagsSet+0x1a>
 800e6bc:	683b      	ldr	r3, [r7, #0]
 800e6be:	2b00      	cmp	r3, #0
 800e6c0:	da03      	bge.n	800e6ca <osThreadFlagsSet+0x22>
    rflags = (uint32_t)osErrorParameter;
 800e6c2:	f06f 0303 	mvn.w	r3, #3
 800e6c6:	60fb      	str	r3, [r7, #12]
 800e6c8:	e046      	b.n	800e758 <osThreadFlagsSet+0xb0>
  }
  else {
    rflags = (uint32_t)osError;
 800e6ca:	f04f 33ff 	mov.w	r3, #4294967295
 800e6ce:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e6d0:	f3ef 8305 	mrs	r3, IPSR
 800e6d4:	61bb      	str	r3, [r7, #24]
  return(result);
 800e6d6:	69bb      	ldr	r3, [r7, #24]

    if (IS_IRQ()) {
 800e6d8:	2b00      	cmp	r3, #0
 800e6da:	d10f      	bne.n	800e6fc <osThreadFlagsSet+0x54>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e6dc:	f3ef 8310 	mrs	r3, PRIMASK
 800e6e0:	617b      	str	r3, [r7, #20]
  return(result);
 800e6e2:	697b      	ldr	r3, [r7, #20]
 800e6e4:	2b00      	cmp	r3, #0
 800e6e6:	d105      	bne.n	800e6f4 <osThreadFlagsSet+0x4c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800e6e8:	f3ef 8311 	mrs	r3, BASEPRI
 800e6ec:	613b      	str	r3, [r7, #16]
  return(result);
 800e6ee:	693b      	ldr	r3, [r7, #16]
 800e6f0:	2b00      	cmp	r3, #0
 800e6f2:	d024      	beq.n	800e73e <osThreadFlagsSet+0x96>
 800e6f4:	4b1b      	ldr	r3, [pc, #108]	; (800e764 <osThreadFlagsSet+0xbc>)
 800e6f6:	681b      	ldr	r3, [r3, #0]
 800e6f8:	2b02      	cmp	r3, #2
 800e6fa:	d120      	bne.n	800e73e <osThreadFlagsSet+0x96>
      yield = pdFALSE;
 800e6fc:	2300      	movs	r3, #0
 800e6fe:	60bb      	str	r3, [r7, #8]

      (void)xTaskNotifyFromISR (hTask, flags, eSetBits, &yield);
 800e700:	f107 0308 	add.w	r3, r7, #8
 800e704:	9300      	str	r3, [sp, #0]
 800e706:	2300      	movs	r3, #0
 800e708:	2201      	movs	r2, #1
 800e70a:	6839      	ldr	r1, [r7, #0]
 800e70c:	69f8      	ldr	r0, [r7, #28]
 800e70e:	f003 fbf9 	bl	8011f04 <xTaskGenericNotifyFromISR>
      (void)xTaskNotifyAndQueryFromISR (hTask, 0, eNoAction, &rflags, NULL);
 800e712:	f107 020c 	add.w	r2, r7, #12
 800e716:	2300      	movs	r3, #0
 800e718:	9300      	str	r3, [sp, #0]
 800e71a:	4613      	mov	r3, r2
 800e71c:	2200      	movs	r2, #0
 800e71e:	2100      	movs	r1, #0
 800e720:	69f8      	ldr	r0, [r7, #28]
 800e722:	f003 fbef 	bl	8011f04 <xTaskGenericNotifyFromISR>

      portYIELD_FROM_ISR (yield);
 800e726:	68bb      	ldr	r3, [r7, #8]
 800e728:	2b00      	cmp	r3, #0
 800e72a:	d015      	beq.n	800e758 <osThreadFlagsSet+0xb0>
 800e72c:	4b0e      	ldr	r3, [pc, #56]	; (800e768 <osThreadFlagsSet+0xc0>)
 800e72e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e732:	601a      	str	r2, [r3, #0]
 800e734:	f3bf 8f4f 	dsb	sy
 800e738:	f3bf 8f6f 	isb	sy
 800e73c:	e00c      	b.n	800e758 <osThreadFlagsSet+0xb0>
    }
    else {
      (void)xTaskNotify (hTask, flags, eSetBits);
 800e73e:	2300      	movs	r3, #0
 800e740:	2201      	movs	r2, #1
 800e742:	6839      	ldr	r1, [r7, #0]
 800e744:	69f8      	ldr	r0, [r7, #28]
 800e746:	f003 fb27 	bl	8011d98 <xTaskGenericNotify>
      (void)xTaskNotifyAndQuery (hTask, 0, eNoAction, &rflags);
 800e74a:	f107 030c 	add.w	r3, r7, #12
 800e74e:	2200      	movs	r2, #0
 800e750:	2100      	movs	r1, #0
 800e752:	69f8      	ldr	r0, [r7, #28]
 800e754:	f003 fb20 	bl	8011d98 <xTaskGenericNotify>
    }
  }
  /* Return flags after setting */
  return (rflags);
 800e758:	68fb      	ldr	r3, [r7, #12]
}
 800e75a:	4618      	mov	r0, r3
 800e75c:	3720      	adds	r7, #32
 800e75e:	46bd      	mov	sp, r7
 800e760:	bd80      	pop	{r7, pc}
 800e762:	bf00      	nop
 800e764:	2000147c 	.word	0x2000147c
 800e768:	e000ed04 	.word	0xe000ed04

0800e76c <osThreadFlagsWait>:
  }

  return (rflags);
}

uint32_t osThreadFlagsWait (uint32_t flags, uint32_t options, uint32_t timeout) {
 800e76c:	b580      	push	{r7, lr}
 800e76e:	b08e      	sub	sp, #56	; 0x38
 800e770:	af00      	add	r7, sp, #0
 800e772:	60f8      	str	r0, [r7, #12]
 800e774:	60b9      	str	r1, [r7, #8]
 800e776:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e778:	f3ef 8305 	mrs	r3, IPSR
 800e77c:	61fb      	str	r3, [r7, #28]
  return(result);
 800e77e:	69fb      	ldr	r3, [r7, #28]
  uint32_t rflags, nval;
  uint32_t clear;
  TickType_t t0, td, tout;
  BaseType_t rval;

  if (IS_IRQ()) {
 800e780:	2b00      	cmp	r3, #0
 800e782:	d10f      	bne.n	800e7a4 <osThreadFlagsWait+0x38>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e784:	f3ef 8310 	mrs	r3, PRIMASK
 800e788:	61bb      	str	r3, [r7, #24]
  return(result);
 800e78a:	69bb      	ldr	r3, [r7, #24]
 800e78c:	2b00      	cmp	r3, #0
 800e78e:	d105      	bne.n	800e79c <osThreadFlagsWait+0x30>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800e790:	f3ef 8311 	mrs	r3, BASEPRI
 800e794:	617b      	str	r3, [r7, #20]
  return(result);
 800e796:	697b      	ldr	r3, [r7, #20]
 800e798:	2b00      	cmp	r3, #0
 800e79a:	d007      	beq.n	800e7ac <osThreadFlagsWait+0x40>
 800e79c:	4b3c      	ldr	r3, [pc, #240]	; (800e890 <osThreadFlagsWait+0x124>)
 800e79e:	681b      	ldr	r3, [r3, #0]
 800e7a0:	2b02      	cmp	r3, #2
 800e7a2:	d103      	bne.n	800e7ac <osThreadFlagsWait+0x40>
    rflags = (uint32_t)osErrorISR;
 800e7a4:	f06f 0305 	mvn.w	r3, #5
 800e7a8:	637b      	str	r3, [r7, #52]	; 0x34
 800e7aa:	e06b      	b.n	800e884 <osThreadFlagsWait+0x118>
  }
  else if ((flags & THREAD_FLAGS_INVALID_BITS) != 0U) {
 800e7ac:	68fb      	ldr	r3, [r7, #12]
 800e7ae:	2b00      	cmp	r3, #0
 800e7b0:	da03      	bge.n	800e7ba <osThreadFlagsWait+0x4e>
    rflags = (uint32_t)osErrorParameter;
 800e7b2:	f06f 0303 	mvn.w	r3, #3
 800e7b6:	637b      	str	r3, [r7, #52]	; 0x34
 800e7b8:	e064      	b.n	800e884 <osThreadFlagsWait+0x118>
  }
  else {
    if ((options & osFlagsNoClear) == osFlagsNoClear) {
 800e7ba:	68bb      	ldr	r3, [r7, #8]
 800e7bc:	f003 0302 	and.w	r3, r3, #2
 800e7c0:	2b00      	cmp	r3, #0
 800e7c2:	d002      	beq.n	800e7ca <osThreadFlagsWait+0x5e>
      clear = 0U;
 800e7c4:	2300      	movs	r3, #0
 800e7c6:	633b      	str	r3, [r7, #48]	; 0x30
 800e7c8:	e001      	b.n	800e7ce <osThreadFlagsWait+0x62>
    } else {
      clear = flags;
 800e7ca:	68fb      	ldr	r3, [r7, #12]
 800e7cc:	633b      	str	r3, [r7, #48]	; 0x30
    }

    rflags = 0U;
 800e7ce:	2300      	movs	r3, #0
 800e7d0:	637b      	str	r3, [r7, #52]	; 0x34
    tout   = timeout;
 800e7d2:	687b      	ldr	r3, [r7, #4]
 800e7d4:	62fb      	str	r3, [r7, #44]	; 0x2c

    t0 = xTaskGetTickCount();
 800e7d6:	f002 fd57 	bl	8011288 <xTaskGetTickCount>
 800e7da:	62b8      	str	r0, [r7, #40]	; 0x28
    do {
      rval = xTaskNotifyWait (0, clear, &nval, tout);
 800e7dc:	f107 0210 	add.w	r2, r7, #16
 800e7e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e7e2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800e7e4:	2000      	movs	r0, #0
 800e7e6:	f003 fa7d 	bl	8011ce4 <xTaskNotifyWait>
 800e7ea:	6278      	str	r0, [r7, #36]	; 0x24

      if (rval == pdPASS) {
 800e7ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e7ee:	2b01      	cmp	r3, #1
 800e7f0:	d137      	bne.n	800e862 <osThreadFlagsWait+0xf6>
        rflags &= flags;
 800e7f2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e7f4:	68fb      	ldr	r3, [r7, #12]
 800e7f6:	4013      	ands	r3, r2
 800e7f8:	637b      	str	r3, [r7, #52]	; 0x34
        rflags |= nval;
 800e7fa:	693b      	ldr	r3, [r7, #16]
 800e7fc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e7fe:	4313      	orrs	r3, r2
 800e800:	637b      	str	r3, [r7, #52]	; 0x34

        if ((options & osFlagsWaitAll) == osFlagsWaitAll) {
 800e802:	68bb      	ldr	r3, [r7, #8]
 800e804:	f003 0301 	and.w	r3, r3, #1
 800e808:	2b00      	cmp	r3, #0
 800e80a:	d00c      	beq.n	800e826 <osThreadFlagsWait+0xba>
          if ((flags & rflags) == flags) {
 800e80c:	68fa      	ldr	r2, [r7, #12]
 800e80e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e810:	4013      	ands	r3, r2
 800e812:	68fa      	ldr	r2, [r7, #12]
 800e814:	429a      	cmp	r2, r3
 800e816:	d032      	beq.n	800e87e <osThreadFlagsWait+0x112>
            break;
          } else {
            if (timeout == 0U) {
 800e818:	687b      	ldr	r3, [r7, #4]
 800e81a:	2b00      	cmp	r3, #0
 800e81c:	d10f      	bne.n	800e83e <osThreadFlagsWait+0xd2>
              rflags = (uint32_t)osErrorResource;
 800e81e:	f06f 0302 	mvn.w	r3, #2
 800e822:	637b      	str	r3, [r7, #52]	; 0x34
              break;
 800e824:	e02e      	b.n	800e884 <osThreadFlagsWait+0x118>
            }
          }
        }
        else {
          if ((flags & rflags) != 0) {
 800e826:	68fa      	ldr	r2, [r7, #12]
 800e828:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e82a:	4013      	ands	r3, r2
 800e82c:	2b00      	cmp	r3, #0
 800e82e:	d128      	bne.n	800e882 <osThreadFlagsWait+0x116>
            break;
          } else {
            if (timeout == 0U) {
 800e830:	687b      	ldr	r3, [r7, #4]
 800e832:	2b00      	cmp	r3, #0
 800e834:	d103      	bne.n	800e83e <osThreadFlagsWait+0xd2>
              rflags = (uint32_t)osErrorResource;
 800e836:	f06f 0302 	mvn.w	r3, #2
 800e83a:	637b      	str	r3, [r7, #52]	; 0x34
              break;
 800e83c:	e022      	b.n	800e884 <osThreadFlagsWait+0x118>
            }
          }
        }

        /* Update timeout */
        td = xTaskGetTickCount() - t0;
 800e83e:	f002 fd23 	bl	8011288 <xTaskGetTickCount>
 800e842:	4602      	mov	r2, r0
 800e844:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e846:	1ad3      	subs	r3, r2, r3
 800e848:	623b      	str	r3, [r7, #32]

        if (td > tout) {
 800e84a:	6a3a      	ldr	r2, [r7, #32]
 800e84c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e84e:	429a      	cmp	r2, r3
 800e850:	d902      	bls.n	800e858 <osThreadFlagsWait+0xec>
          tout  = 0;
 800e852:	2300      	movs	r3, #0
 800e854:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e856:	e00e      	b.n	800e876 <osThreadFlagsWait+0x10a>
        } else {
          tout -= td;
 800e858:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e85a:	6a3b      	ldr	r3, [r7, #32]
 800e85c:	1ad3      	subs	r3, r2, r3
 800e85e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e860:	e009      	b.n	800e876 <osThreadFlagsWait+0x10a>
        }
      }
      else {
        if (timeout == 0) {
 800e862:	687b      	ldr	r3, [r7, #4]
 800e864:	2b00      	cmp	r3, #0
 800e866:	d103      	bne.n	800e870 <osThreadFlagsWait+0x104>
          rflags = (uint32_t)osErrorResource;
 800e868:	f06f 0302 	mvn.w	r3, #2
 800e86c:	637b      	str	r3, [r7, #52]	; 0x34
 800e86e:	e002      	b.n	800e876 <osThreadFlagsWait+0x10a>
        } else {
          rflags = (uint32_t)osErrorTimeout;
 800e870:	f06f 0301 	mvn.w	r3, #1
 800e874:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
    }
    while (rval != pdFAIL);
 800e876:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e878:	2b00      	cmp	r3, #0
 800e87a:	d1af      	bne.n	800e7dc <osThreadFlagsWait+0x70>
 800e87c:	e002      	b.n	800e884 <osThreadFlagsWait+0x118>
            break;
 800e87e:	bf00      	nop
 800e880:	e000      	b.n	800e884 <osThreadFlagsWait+0x118>
            break;
 800e882:	bf00      	nop
  }

  /* Return flags before clearing */
  return (rflags);
 800e884:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800e886:	4618      	mov	r0, r3
 800e888:	3738      	adds	r7, #56	; 0x38
 800e88a:	46bd      	mov	sp, r7
 800e88c:	bd80      	pop	{r7, pc}
 800e88e:	bf00      	nop
 800e890:	2000147c 	.word	0x2000147c

0800e894 <osDelay>:

osStatus_t osDelay (uint32_t ticks) {
 800e894:	b580      	push	{r7, lr}
 800e896:	b086      	sub	sp, #24
 800e898:	af00      	add	r7, sp, #0
 800e89a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e89c:	f3ef 8305 	mrs	r3, IPSR
 800e8a0:	613b      	str	r3, [r7, #16]
  return(result);
 800e8a2:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 800e8a4:	2b00      	cmp	r3, #0
 800e8a6:	d10f      	bne.n	800e8c8 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e8a8:	f3ef 8310 	mrs	r3, PRIMASK
 800e8ac:	60fb      	str	r3, [r7, #12]
  return(result);
 800e8ae:	68fb      	ldr	r3, [r7, #12]
 800e8b0:	2b00      	cmp	r3, #0
 800e8b2:	d105      	bne.n	800e8c0 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800e8b4:	f3ef 8311 	mrs	r3, BASEPRI
 800e8b8:	60bb      	str	r3, [r7, #8]
  return(result);
 800e8ba:	68bb      	ldr	r3, [r7, #8]
 800e8bc:	2b00      	cmp	r3, #0
 800e8be:	d007      	beq.n	800e8d0 <osDelay+0x3c>
 800e8c0:	4b0a      	ldr	r3, [pc, #40]	; (800e8ec <osDelay+0x58>)
 800e8c2:	681b      	ldr	r3, [r3, #0]
 800e8c4:	2b02      	cmp	r3, #2
 800e8c6:	d103      	bne.n	800e8d0 <osDelay+0x3c>
    stat = osErrorISR;
 800e8c8:	f06f 0305 	mvn.w	r3, #5
 800e8cc:	617b      	str	r3, [r7, #20]
 800e8ce:	e007      	b.n	800e8e0 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 800e8d0:	2300      	movs	r3, #0
 800e8d2:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 800e8d4:	687b      	ldr	r3, [r7, #4]
 800e8d6:	2b00      	cmp	r3, #0
 800e8d8:	d002      	beq.n	800e8e0 <osDelay+0x4c>
      vTaskDelay(ticks);
 800e8da:	6878      	ldr	r0, [r7, #4]
 800e8dc:	f002 fb5a 	bl	8010f94 <vTaskDelay>
    }
  }

  return (stat);
 800e8e0:	697b      	ldr	r3, [r7, #20]
}
 800e8e2:	4618      	mov	r0, r3
 800e8e4:	3718      	adds	r7, #24
 800e8e6:	46bd      	mov	sp, r7
 800e8e8:	bd80      	pop	{r7, pc}
 800e8ea:	bf00      	nop
 800e8ec:	2000147c 	.word	0x2000147c

0800e8f0 <osMutexNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 800e8f0:	b580      	push	{r7, lr}
 800e8f2:	b08a      	sub	sp, #40	; 0x28
 800e8f4:	af00      	add	r7, sp, #0
 800e8f6:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 800e8f8:	2300      	movs	r3, #0
 800e8fa:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e8fc:	f3ef 8305 	mrs	r3, IPSR
 800e900:	613b      	str	r3, [r7, #16]
  return(result);
 800e902:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ()) {
 800e904:	2b00      	cmp	r3, #0
 800e906:	f040 8085 	bne.w	800ea14 <osMutexNew+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e90a:	f3ef 8310 	mrs	r3, PRIMASK
 800e90e:	60fb      	str	r3, [r7, #12]
  return(result);
 800e910:	68fb      	ldr	r3, [r7, #12]
 800e912:	2b00      	cmp	r3, #0
 800e914:	d105      	bne.n	800e922 <osMutexNew+0x32>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800e916:	f3ef 8311 	mrs	r3, BASEPRI
 800e91a:	60bb      	str	r3, [r7, #8]
  return(result);
 800e91c:	68bb      	ldr	r3, [r7, #8]
 800e91e:	2b00      	cmp	r3, #0
 800e920:	d003      	beq.n	800e92a <osMutexNew+0x3a>
 800e922:	4b3f      	ldr	r3, [pc, #252]	; (800ea20 <osMutexNew+0x130>)
 800e924:	681b      	ldr	r3, [r3, #0]
 800e926:	2b02      	cmp	r3, #2
 800e928:	d074      	beq.n	800ea14 <osMutexNew+0x124>
    if (attr != NULL) {
 800e92a:	687b      	ldr	r3, [r7, #4]
 800e92c:	2b00      	cmp	r3, #0
 800e92e:	d003      	beq.n	800e938 <osMutexNew+0x48>
      type = attr->attr_bits;
 800e930:	687b      	ldr	r3, [r7, #4]
 800e932:	685b      	ldr	r3, [r3, #4]
 800e934:	623b      	str	r3, [r7, #32]
 800e936:	e001      	b.n	800e93c <osMutexNew+0x4c>
    } else {
      type = 0U;
 800e938:	2300      	movs	r3, #0
 800e93a:	623b      	str	r3, [r7, #32]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 800e93c:	6a3b      	ldr	r3, [r7, #32]
 800e93e:	f003 0301 	and.w	r3, r3, #1
 800e942:	2b00      	cmp	r3, #0
 800e944:	d002      	beq.n	800e94c <osMutexNew+0x5c>
      rmtx = 1U;
 800e946:	2301      	movs	r3, #1
 800e948:	61fb      	str	r3, [r7, #28]
 800e94a:	e001      	b.n	800e950 <osMutexNew+0x60>
    } else {
      rmtx = 0U;
 800e94c:	2300      	movs	r3, #0
 800e94e:	61fb      	str	r3, [r7, #28]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 800e950:	6a3b      	ldr	r3, [r7, #32]
 800e952:	f003 0308 	and.w	r3, r3, #8
 800e956:	2b00      	cmp	r3, #0
 800e958:	d15c      	bne.n	800ea14 <osMutexNew+0x124>
      mem = -1;
 800e95a:	f04f 33ff 	mov.w	r3, #4294967295
 800e95e:	61bb      	str	r3, [r7, #24]

      if (attr != NULL) {
 800e960:	687b      	ldr	r3, [r7, #4]
 800e962:	2b00      	cmp	r3, #0
 800e964:	d015      	beq.n	800e992 <osMutexNew+0xa2>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800e966:	687b      	ldr	r3, [r7, #4]
 800e968:	689b      	ldr	r3, [r3, #8]
 800e96a:	2b00      	cmp	r3, #0
 800e96c:	d006      	beq.n	800e97c <osMutexNew+0x8c>
 800e96e:	687b      	ldr	r3, [r7, #4]
 800e970:	68db      	ldr	r3, [r3, #12]
 800e972:	2b4f      	cmp	r3, #79	; 0x4f
 800e974:	d902      	bls.n	800e97c <osMutexNew+0x8c>
          mem = 1;
 800e976:	2301      	movs	r3, #1
 800e978:	61bb      	str	r3, [r7, #24]
 800e97a:	e00c      	b.n	800e996 <osMutexNew+0xa6>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800e97c:	687b      	ldr	r3, [r7, #4]
 800e97e:	689b      	ldr	r3, [r3, #8]
 800e980:	2b00      	cmp	r3, #0
 800e982:	d108      	bne.n	800e996 <osMutexNew+0xa6>
 800e984:	687b      	ldr	r3, [r7, #4]
 800e986:	68db      	ldr	r3, [r3, #12]
 800e988:	2b00      	cmp	r3, #0
 800e98a:	d104      	bne.n	800e996 <osMutexNew+0xa6>
            mem = 0;
 800e98c:	2300      	movs	r3, #0
 800e98e:	61bb      	str	r3, [r7, #24]
 800e990:	e001      	b.n	800e996 <osMutexNew+0xa6>
          }
        }
      }
      else {
        mem = 0;
 800e992:	2300      	movs	r3, #0
 800e994:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 800e996:	69bb      	ldr	r3, [r7, #24]
 800e998:	2b01      	cmp	r3, #1
 800e99a:	d112      	bne.n	800e9c2 <osMutexNew+0xd2>
        if (rmtx != 0U) {
 800e99c:	69fb      	ldr	r3, [r7, #28]
 800e99e:	2b00      	cmp	r3, #0
 800e9a0:	d007      	beq.n	800e9b2 <osMutexNew+0xc2>
          hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 800e9a2:	687b      	ldr	r3, [r7, #4]
 800e9a4:	689b      	ldr	r3, [r3, #8]
 800e9a6:	4619      	mov	r1, r3
 800e9a8:	2004      	movs	r0, #4
 800e9aa:	f001 fa22 	bl	800fdf2 <xQueueCreateMutexStatic>
 800e9ae:	6278      	str	r0, [r7, #36]	; 0x24
 800e9b0:	e016      	b.n	800e9e0 <osMutexNew+0xf0>
        }
        else {
          hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 800e9b2:	687b      	ldr	r3, [r7, #4]
 800e9b4:	689b      	ldr	r3, [r3, #8]
 800e9b6:	4619      	mov	r1, r3
 800e9b8:	2001      	movs	r0, #1
 800e9ba:	f001 fa1a 	bl	800fdf2 <xQueueCreateMutexStatic>
 800e9be:	6278      	str	r0, [r7, #36]	; 0x24
 800e9c0:	e00e      	b.n	800e9e0 <osMutexNew+0xf0>
        }
      }
      else {
        if (mem == 0) {
 800e9c2:	69bb      	ldr	r3, [r7, #24]
 800e9c4:	2b00      	cmp	r3, #0
 800e9c6:	d10b      	bne.n	800e9e0 <osMutexNew+0xf0>
          if (rmtx != 0U) {
 800e9c8:	69fb      	ldr	r3, [r7, #28]
 800e9ca:	2b00      	cmp	r3, #0
 800e9cc:	d004      	beq.n	800e9d8 <osMutexNew+0xe8>
            hMutex = xSemaphoreCreateRecursiveMutex ();
 800e9ce:	2004      	movs	r0, #4
 800e9d0:	f001 f9f7 	bl	800fdc2 <xQueueCreateMutex>
 800e9d4:	6278      	str	r0, [r7, #36]	; 0x24
 800e9d6:	e003      	b.n	800e9e0 <osMutexNew+0xf0>
          } else {
            hMutex = xSemaphoreCreateMutex ();
 800e9d8:	2001      	movs	r0, #1
 800e9da:	f001 f9f2 	bl	800fdc2 <xQueueCreateMutex>
 800e9de:	6278      	str	r0, [r7, #36]	; 0x24
          }
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 800e9e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e9e2:	2b00      	cmp	r3, #0
 800e9e4:	d00c      	beq.n	800ea00 <osMutexNew+0x110>
        if (attr != NULL) {
 800e9e6:	687b      	ldr	r3, [r7, #4]
 800e9e8:	2b00      	cmp	r3, #0
 800e9ea:	d003      	beq.n	800e9f4 <osMutexNew+0x104>
          name = attr->name;
 800e9ec:	687b      	ldr	r3, [r7, #4]
 800e9ee:	681b      	ldr	r3, [r3, #0]
 800e9f0:	617b      	str	r3, [r7, #20]
 800e9f2:	e001      	b.n	800e9f8 <osMutexNew+0x108>
        } else {
          name = NULL;
 800e9f4:	2300      	movs	r3, #0
 800e9f6:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hMutex, name);
 800e9f8:	6979      	ldr	r1, [r7, #20]
 800e9fa:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e9fc:	f002 f8a6 	bl	8010b4c <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 800ea00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea02:	2b00      	cmp	r3, #0
 800ea04:	d006      	beq.n	800ea14 <osMutexNew+0x124>
 800ea06:	69fb      	ldr	r3, [r7, #28]
 800ea08:	2b00      	cmp	r3, #0
 800ea0a:	d003      	beq.n	800ea14 <osMutexNew+0x124>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 800ea0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea0e:	f043 0301 	orr.w	r3, r3, #1
 800ea12:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }
  }

  return ((osMutexId_t)hMutex);
 800ea14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800ea16:	4618      	mov	r0, r3
 800ea18:	3728      	adds	r7, #40	; 0x28
 800ea1a:	46bd      	mov	sp, r7
 800ea1c:	bd80      	pop	{r7, pc}
 800ea1e:	bf00      	nop
 800ea20:	2000147c 	.word	0x2000147c

0800ea24 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 800ea24:	b580      	push	{r7, lr}
 800ea26:	b088      	sub	sp, #32
 800ea28:	af00      	add	r7, sp, #0
 800ea2a:	6078      	str	r0, [r7, #4]
 800ea2c:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800ea2e:	687b      	ldr	r3, [r7, #4]
 800ea30:	f023 0301 	bic.w	r3, r3, #1
 800ea34:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 800ea36:	687b      	ldr	r3, [r7, #4]
 800ea38:	f003 0301 	and.w	r3, r3, #1
 800ea3c:	617b      	str	r3, [r7, #20]

  stat = osOK;
 800ea3e:	2300      	movs	r3, #0
 800ea40:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ea42:	f3ef 8305 	mrs	r3, IPSR
 800ea46:	613b      	str	r3, [r7, #16]
  return(result);
 800ea48:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 800ea4a:	2b00      	cmp	r3, #0
 800ea4c:	d10f      	bne.n	800ea6e <osMutexAcquire+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ea4e:	f3ef 8310 	mrs	r3, PRIMASK
 800ea52:	60fb      	str	r3, [r7, #12]
  return(result);
 800ea54:	68fb      	ldr	r3, [r7, #12]
 800ea56:	2b00      	cmp	r3, #0
 800ea58:	d105      	bne.n	800ea66 <osMutexAcquire+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800ea5a:	f3ef 8311 	mrs	r3, BASEPRI
 800ea5e:	60bb      	str	r3, [r7, #8]
  return(result);
 800ea60:	68bb      	ldr	r3, [r7, #8]
 800ea62:	2b00      	cmp	r3, #0
 800ea64:	d007      	beq.n	800ea76 <osMutexAcquire+0x52>
 800ea66:	4b1d      	ldr	r3, [pc, #116]	; (800eadc <osMutexAcquire+0xb8>)
 800ea68:	681b      	ldr	r3, [r3, #0]
 800ea6a:	2b02      	cmp	r3, #2
 800ea6c:	d103      	bne.n	800ea76 <osMutexAcquire+0x52>
    stat = osErrorISR;
 800ea6e:	f06f 0305 	mvn.w	r3, #5
 800ea72:	61fb      	str	r3, [r7, #28]
 800ea74:	e02c      	b.n	800ead0 <osMutexAcquire+0xac>
  }
  else if (hMutex == NULL) {
 800ea76:	69bb      	ldr	r3, [r7, #24]
 800ea78:	2b00      	cmp	r3, #0
 800ea7a:	d103      	bne.n	800ea84 <osMutexAcquire+0x60>
    stat = osErrorParameter;
 800ea7c:	f06f 0303 	mvn.w	r3, #3
 800ea80:	61fb      	str	r3, [r7, #28]
 800ea82:	e025      	b.n	800ead0 <osMutexAcquire+0xac>
  }
  else {
    if (rmtx != 0U) {
 800ea84:	697b      	ldr	r3, [r7, #20]
 800ea86:	2b00      	cmp	r3, #0
 800ea88:	d011      	beq.n	800eaae <osMutexAcquire+0x8a>
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 800ea8a:	6839      	ldr	r1, [r7, #0]
 800ea8c:	69b8      	ldr	r0, [r7, #24]
 800ea8e:	f001 f9fe 	bl	800fe8e <xQueueTakeMutexRecursive>
 800ea92:	4603      	mov	r3, r0
 800ea94:	2b01      	cmp	r3, #1
 800ea96:	d01b      	beq.n	800ead0 <osMutexAcquire+0xac>
        if (timeout != 0U) {
 800ea98:	683b      	ldr	r3, [r7, #0]
 800ea9a:	2b00      	cmp	r3, #0
 800ea9c:	d003      	beq.n	800eaa6 <osMutexAcquire+0x82>
          stat = osErrorTimeout;
 800ea9e:	f06f 0301 	mvn.w	r3, #1
 800eaa2:	61fb      	str	r3, [r7, #28]
 800eaa4:	e014      	b.n	800ead0 <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 800eaa6:	f06f 0302 	mvn.w	r3, #2
 800eaaa:	61fb      	str	r3, [r7, #28]
 800eaac:	e010      	b.n	800ead0 <osMutexAcquire+0xac>
        }
      }
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 800eaae:	6839      	ldr	r1, [r7, #0]
 800eab0:	69b8      	ldr	r0, [r7, #24]
 800eab2:	f001 fd7b 	bl	80105ac <xQueueSemaphoreTake>
 800eab6:	4603      	mov	r3, r0
 800eab8:	2b01      	cmp	r3, #1
 800eaba:	d009      	beq.n	800ead0 <osMutexAcquire+0xac>
        if (timeout != 0U) {
 800eabc:	683b      	ldr	r3, [r7, #0]
 800eabe:	2b00      	cmp	r3, #0
 800eac0:	d003      	beq.n	800eaca <osMutexAcquire+0xa6>
          stat = osErrorTimeout;
 800eac2:	f06f 0301 	mvn.w	r3, #1
 800eac6:	61fb      	str	r3, [r7, #28]
 800eac8:	e002      	b.n	800ead0 <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 800eaca:	f06f 0302 	mvn.w	r3, #2
 800eace:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800ead0:	69fb      	ldr	r3, [r7, #28]
}
 800ead2:	4618      	mov	r0, r3
 800ead4:	3720      	adds	r7, #32
 800ead6:	46bd      	mov	sp, r7
 800ead8:	bd80      	pop	{r7, pc}
 800eada:	bf00      	nop
 800eadc:	2000147c 	.word	0x2000147c

0800eae0 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 800eae0:	b580      	push	{r7, lr}
 800eae2:	b088      	sub	sp, #32
 800eae4:	af00      	add	r7, sp, #0
 800eae6:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800eae8:	687b      	ldr	r3, [r7, #4]
 800eaea:	f023 0301 	bic.w	r3, r3, #1
 800eaee:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 800eaf0:	687b      	ldr	r3, [r7, #4]
 800eaf2:	f003 0301 	and.w	r3, r3, #1
 800eaf6:	617b      	str	r3, [r7, #20]

  stat = osOK;
 800eaf8:	2300      	movs	r3, #0
 800eafa:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800eafc:	f3ef 8305 	mrs	r3, IPSR
 800eb00:	613b      	str	r3, [r7, #16]
  return(result);
 800eb02:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 800eb04:	2b00      	cmp	r3, #0
 800eb06:	d10f      	bne.n	800eb28 <osMutexRelease+0x48>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800eb08:	f3ef 8310 	mrs	r3, PRIMASK
 800eb0c:	60fb      	str	r3, [r7, #12]
  return(result);
 800eb0e:	68fb      	ldr	r3, [r7, #12]
 800eb10:	2b00      	cmp	r3, #0
 800eb12:	d105      	bne.n	800eb20 <osMutexRelease+0x40>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800eb14:	f3ef 8311 	mrs	r3, BASEPRI
 800eb18:	60bb      	str	r3, [r7, #8]
  return(result);
 800eb1a:	68bb      	ldr	r3, [r7, #8]
 800eb1c:	2b00      	cmp	r3, #0
 800eb1e:	d007      	beq.n	800eb30 <osMutexRelease+0x50>
 800eb20:	4b16      	ldr	r3, [pc, #88]	; (800eb7c <osMutexRelease+0x9c>)
 800eb22:	681b      	ldr	r3, [r3, #0]
 800eb24:	2b02      	cmp	r3, #2
 800eb26:	d103      	bne.n	800eb30 <osMutexRelease+0x50>
    stat = osErrorISR;
 800eb28:	f06f 0305 	mvn.w	r3, #5
 800eb2c:	61fb      	str	r3, [r7, #28]
 800eb2e:	e01f      	b.n	800eb70 <osMutexRelease+0x90>
  }
  else if (hMutex == NULL) {
 800eb30:	69bb      	ldr	r3, [r7, #24]
 800eb32:	2b00      	cmp	r3, #0
 800eb34:	d103      	bne.n	800eb3e <osMutexRelease+0x5e>
    stat = osErrorParameter;
 800eb36:	f06f 0303 	mvn.w	r3, #3
 800eb3a:	61fb      	str	r3, [r7, #28]
 800eb3c:	e018      	b.n	800eb70 <osMutexRelease+0x90>
  }
  else {
    if (rmtx != 0U) {
 800eb3e:	697b      	ldr	r3, [r7, #20]
 800eb40:	2b00      	cmp	r3, #0
 800eb42:	d009      	beq.n	800eb58 <osMutexRelease+0x78>
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 800eb44:	69b8      	ldr	r0, [r7, #24]
 800eb46:	f001 f96f 	bl	800fe28 <xQueueGiveMutexRecursive>
 800eb4a:	4603      	mov	r3, r0
 800eb4c:	2b01      	cmp	r3, #1
 800eb4e:	d00f      	beq.n	800eb70 <osMutexRelease+0x90>
        stat = osErrorResource;
 800eb50:	f06f 0302 	mvn.w	r3, #2
 800eb54:	61fb      	str	r3, [r7, #28]
 800eb56:	e00b      	b.n	800eb70 <osMutexRelease+0x90>
      }
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 800eb58:	2300      	movs	r3, #0
 800eb5a:	2200      	movs	r2, #0
 800eb5c:	2100      	movs	r1, #0
 800eb5e:	69b8      	ldr	r0, [r7, #24]
 800eb60:	f001 fa30 	bl	800ffc4 <xQueueGenericSend>
 800eb64:	4603      	mov	r3, r0
 800eb66:	2b01      	cmp	r3, #1
 800eb68:	d002      	beq.n	800eb70 <osMutexRelease+0x90>
        stat = osErrorResource;
 800eb6a:	f06f 0302 	mvn.w	r3, #2
 800eb6e:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return (stat);
 800eb70:	69fb      	ldr	r3, [r7, #28]
}
 800eb72:	4618      	mov	r0, r3
 800eb74:	3720      	adds	r7, #32
 800eb76:	46bd      	mov	sp, r7
 800eb78:	bd80      	pop	{r7, pc}
 800eb7a:	bf00      	nop
 800eb7c:	2000147c 	.word	0x2000147c

0800eb80 <osSemaphoreNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800eb80:	b580      	push	{r7, lr}
 800eb82:	b08c      	sub	sp, #48	; 0x30
 800eb84:	af02      	add	r7, sp, #8
 800eb86:	60f8      	str	r0, [r7, #12]
 800eb88:	60b9      	str	r1, [r7, #8]
 800eb8a:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 800eb8c:	2300      	movs	r3, #0
 800eb8e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800eb90:	f3ef 8305 	mrs	r3, IPSR
 800eb94:	61bb      	str	r3, [r7, #24]
  return(result);
 800eb96:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800eb98:	2b00      	cmp	r3, #0
 800eb9a:	f040 8087 	bne.w	800ecac <osSemaphoreNew+0x12c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800eb9e:	f3ef 8310 	mrs	r3, PRIMASK
 800eba2:	617b      	str	r3, [r7, #20]
  return(result);
 800eba4:	697b      	ldr	r3, [r7, #20]
 800eba6:	2b00      	cmp	r3, #0
 800eba8:	d105      	bne.n	800ebb6 <osSemaphoreNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800ebaa:	f3ef 8311 	mrs	r3, BASEPRI
 800ebae:	613b      	str	r3, [r7, #16]
  return(result);
 800ebb0:	693b      	ldr	r3, [r7, #16]
 800ebb2:	2b00      	cmp	r3, #0
 800ebb4:	d003      	beq.n	800ebbe <osSemaphoreNew+0x3e>
 800ebb6:	4b40      	ldr	r3, [pc, #256]	; (800ecb8 <osSemaphoreNew+0x138>)
 800ebb8:	681b      	ldr	r3, [r3, #0]
 800ebba:	2b02      	cmp	r3, #2
 800ebbc:	d076      	beq.n	800ecac <osSemaphoreNew+0x12c>
 800ebbe:	68fb      	ldr	r3, [r7, #12]
 800ebc0:	2b00      	cmp	r3, #0
 800ebc2:	d073      	beq.n	800ecac <osSemaphoreNew+0x12c>
 800ebc4:	68ba      	ldr	r2, [r7, #8]
 800ebc6:	68fb      	ldr	r3, [r7, #12]
 800ebc8:	429a      	cmp	r2, r3
 800ebca:	d86f      	bhi.n	800ecac <osSemaphoreNew+0x12c>
    mem = -1;
 800ebcc:	f04f 33ff 	mov.w	r3, #4294967295
 800ebd0:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800ebd2:	687b      	ldr	r3, [r7, #4]
 800ebd4:	2b00      	cmp	r3, #0
 800ebd6:	d015      	beq.n	800ec04 <osSemaphoreNew+0x84>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800ebd8:	687b      	ldr	r3, [r7, #4]
 800ebda:	689b      	ldr	r3, [r3, #8]
 800ebdc:	2b00      	cmp	r3, #0
 800ebde:	d006      	beq.n	800ebee <osSemaphoreNew+0x6e>
 800ebe0:	687b      	ldr	r3, [r7, #4]
 800ebe2:	68db      	ldr	r3, [r3, #12]
 800ebe4:	2b4f      	cmp	r3, #79	; 0x4f
 800ebe6:	d902      	bls.n	800ebee <osSemaphoreNew+0x6e>
        mem = 1;
 800ebe8:	2301      	movs	r3, #1
 800ebea:	623b      	str	r3, [r7, #32]
 800ebec:	e00c      	b.n	800ec08 <osSemaphoreNew+0x88>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800ebee:	687b      	ldr	r3, [r7, #4]
 800ebf0:	689b      	ldr	r3, [r3, #8]
 800ebf2:	2b00      	cmp	r3, #0
 800ebf4:	d108      	bne.n	800ec08 <osSemaphoreNew+0x88>
 800ebf6:	687b      	ldr	r3, [r7, #4]
 800ebf8:	68db      	ldr	r3, [r3, #12]
 800ebfa:	2b00      	cmp	r3, #0
 800ebfc:	d104      	bne.n	800ec08 <osSemaphoreNew+0x88>
          mem = 0;
 800ebfe:	2300      	movs	r3, #0
 800ec00:	623b      	str	r3, [r7, #32]
 800ec02:	e001      	b.n	800ec08 <osSemaphoreNew+0x88>
        }
      }
    }
    else {
      mem = 0;
 800ec04:	2300      	movs	r3, #0
 800ec06:	623b      	str	r3, [r7, #32]
    }

    if (mem != -1) {
 800ec08:	6a3b      	ldr	r3, [r7, #32]
 800ec0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ec0e:	d04d      	beq.n	800ecac <osSemaphoreNew+0x12c>
      if (max_count == 1U) {
 800ec10:	68fb      	ldr	r3, [r7, #12]
 800ec12:	2b01      	cmp	r3, #1
 800ec14:	d129      	bne.n	800ec6a <osSemaphoreNew+0xea>
        if (mem == 1) {
 800ec16:	6a3b      	ldr	r3, [r7, #32]
 800ec18:	2b01      	cmp	r3, #1
 800ec1a:	d10b      	bne.n	800ec34 <osSemaphoreNew+0xb4>
          hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800ec1c:	687b      	ldr	r3, [r7, #4]
 800ec1e:	689a      	ldr	r2, [r3, #8]
 800ec20:	2303      	movs	r3, #3
 800ec22:	9300      	str	r3, [sp, #0]
 800ec24:	4613      	mov	r3, r2
 800ec26:	2200      	movs	r2, #0
 800ec28:	2100      	movs	r1, #0
 800ec2a:	2001      	movs	r0, #1
 800ec2c:	f000 ffda 	bl	800fbe4 <xQueueGenericCreateStatic>
 800ec30:	6278      	str	r0, [r7, #36]	; 0x24
 800ec32:	e005      	b.n	800ec40 <osSemaphoreNew+0xc0>
        }
        else {
          hSemaphore = xSemaphoreCreateBinary();
 800ec34:	2203      	movs	r2, #3
 800ec36:	2100      	movs	r1, #0
 800ec38:	2001      	movs	r0, #1
 800ec3a:	f001 f846 	bl	800fcca <xQueueGenericCreate>
 800ec3e:	6278      	str	r0, [r7, #36]	; 0x24
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800ec40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec42:	2b00      	cmp	r3, #0
 800ec44:	d022      	beq.n	800ec8c <osSemaphoreNew+0x10c>
 800ec46:	68bb      	ldr	r3, [r7, #8]
 800ec48:	2b00      	cmp	r3, #0
 800ec4a:	d01f      	beq.n	800ec8c <osSemaphoreNew+0x10c>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800ec4c:	2300      	movs	r3, #0
 800ec4e:	2200      	movs	r2, #0
 800ec50:	2100      	movs	r1, #0
 800ec52:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ec54:	f001 f9b6 	bl	800ffc4 <xQueueGenericSend>
 800ec58:	4603      	mov	r3, r0
 800ec5a:	2b01      	cmp	r3, #1
 800ec5c:	d016      	beq.n	800ec8c <osSemaphoreNew+0x10c>
            vSemaphoreDelete (hSemaphore);
 800ec5e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ec60:	f001 fe29 	bl	80108b6 <vQueueDelete>
            hSemaphore = NULL;
 800ec64:	2300      	movs	r3, #0
 800ec66:	627b      	str	r3, [r7, #36]	; 0x24
 800ec68:	e010      	b.n	800ec8c <osSemaphoreNew+0x10c>
          }
        }
      }
      else {
        if (mem == 1) {
 800ec6a:	6a3b      	ldr	r3, [r7, #32]
 800ec6c:	2b01      	cmp	r3, #1
 800ec6e:	d108      	bne.n	800ec82 <osSemaphoreNew+0x102>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800ec70:	687b      	ldr	r3, [r7, #4]
 800ec72:	689b      	ldr	r3, [r3, #8]
 800ec74:	461a      	mov	r2, r3
 800ec76:	68b9      	ldr	r1, [r7, #8]
 800ec78:	68f8      	ldr	r0, [r7, #12]
 800ec7a:	f001 f93d 	bl	800fef8 <xQueueCreateCountingSemaphoreStatic>
 800ec7e:	6278      	str	r0, [r7, #36]	; 0x24
 800ec80:	e004      	b.n	800ec8c <osSemaphoreNew+0x10c>
        }
        else {
          hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800ec82:	68b9      	ldr	r1, [r7, #8]
 800ec84:	68f8      	ldr	r0, [r7, #12]
 800ec86:	f001 f96c 	bl	800ff62 <xQueueCreateCountingSemaphore>
 800ec8a:	6278      	str	r0, [r7, #36]	; 0x24
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 800ec8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec8e:	2b00      	cmp	r3, #0
 800ec90:	d00c      	beq.n	800ecac <osSemaphoreNew+0x12c>
        if (attr != NULL) {
 800ec92:	687b      	ldr	r3, [r7, #4]
 800ec94:	2b00      	cmp	r3, #0
 800ec96:	d003      	beq.n	800eca0 <osSemaphoreNew+0x120>
          name = attr->name;
 800ec98:	687b      	ldr	r3, [r7, #4]
 800ec9a:	681b      	ldr	r3, [r3, #0]
 800ec9c:	61fb      	str	r3, [r7, #28]
 800ec9e:	e001      	b.n	800eca4 <osSemaphoreNew+0x124>
        } else {
          name = NULL;
 800eca0:	2300      	movs	r3, #0
 800eca2:	61fb      	str	r3, [r7, #28]
        }
        vQueueAddToRegistry (hSemaphore, name);
 800eca4:	69f9      	ldr	r1, [r7, #28]
 800eca6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800eca8:	f001 ff50 	bl	8010b4c <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 800ecac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800ecae:	4618      	mov	r0, r3
 800ecb0:	3728      	adds	r7, #40	; 0x28
 800ecb2:	46bd      	mov	sp, r7
 800ecb4:	bd80      	pop	{r7, pc}
 800ecb6:	bf00      	nop
 800ecb8:	2000147c 	.word	0x2000147c

0800ecbc <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 800ecbc:	b580      	push	{r7, lr}
 800ecbe:	b088      	sub	sp, #32
 800ecc0:	af00      	add	r7, sp, #0
 800ecc2:	6078      	str	r0, [r7, #4]
 800ecc4:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800ecc6:	687b      	ldr	r3, [r7, #4]
 800ecc8:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800ecca:	2300      	movs	r3, #0
 800eccc:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 800ecce:	69bb      	ldr	r3, [r7, #24]
 800ecd0:	2b00      	cmp	r3, #0
 800ecd2:	d103      	bne.n	800ecdc <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 800ecd4:	f06f 0303 	mvn.w	r3, #3
 800ecd8:	61fb      	str	r3, [r7, #28]
 800ecda:	e04b      	b.n	800ed74 <osSemaphoreAcquire+0xb8>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ecdc:	f3ef 8305 	mrs	r3, IPSR
 800ece0:	617b      	str	r3, [r7, #20]
  return(result);
 800ece2:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 800ece4:	2b00      	cmp	r3, #0
 800ece6:	d10f      	bne.n	800ed08 <osSemaphoreAcquire+0x4c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ece8:	f3ef 8310 	mrs	r3, PRIMASK
 800ecec:	613b      	str	r3, [r7, #16]
  return(result);
 800ecee:	693b      	ldr	r3, [r7, #16]
 800ecf0:	2b00      	cmp	r3, #0
 800ecf2:	d105      	bne.n	800ed00 <osSemaphoreAcquire+0x44>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800ecf4:	f3ef 8311 	mrs	r3, BASEPRI
 800ecf8:	60fb      	str	r3, [r7, #12]
  return(result);
 800ecfa:	68fb      	ldr	r3, [r7, #12]
 800ecfc:	2b00      	cmp	r3, #0
 800ecfe:	d026      	beq.n	800ed4e <osSemaphoreAcquire+0x92>
 800ed00:	4b1f      	ldr	r3, [pc, #124]	; (800ed80 <osSemaphoreAcquire+0xc4>)
 800ed02:	681b      	ldr	r3, [r3, #0]
 800ed04:	2b02      	cmp	r3, #2
 800ed06:	d122      	bne.n	800ed4e <osSemaphoreAcquire+0x92>
    if (timeout != 0U) {
 800ed08:	683b      	ldr	r3, [r7, #0]
 800ed0a:	2b00      	cmp	r3, #0
 800ed0c:	d003      	beq.n	800ed16 <osSemaphoreAcquire+0x5a>
      stat = osErrorParameter;
 800ed0e:	f06f 0303 	mvn.w	r3, #3
 800ed12:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 800ed14:	e02d      	b.n	800ed72 <osSemaphoreAcquire+0xb6>
    }
    else {
      yield = pdFALSE;
 800ed16:	2300      	movs	r3, #0
 800ed18:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800ed1a:	f107 0308 	add.w	r3, r7, #8
 800ed1e:	461a      	mov	r2, r3
 800ed20:	2100      	movs	r1, #0
 800ed22:	69b8      	ldr	r0, [r7, #24]
 800ed24:	f001 fd4a 	bl	80107bc <xQueueReceiveFromISR>
 800ed28:	4603      	mov	r3, r0
 800ed2a:	2b01      	cmp	r3, #1
 800ed2c:	d003      	beq.n	800ed36 <osSemaphoreAcquire+0x7a>
        stat = osErrorResource;
 800ed2e:	f06f 0302 	mvn.w	r3, #2
 800ed32:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 800ed34:	e01d      	b.n	800ed72 <osSemaphoreAcquire+0xb6>
      } else {
        portYIELD_FROM_ISR (yield);
 800ed36:	68bb      	ldr	r3, [r7, #8]
 800ed38:	2b00      	cmp	r3, #0
 800ed3a:	d01a      	beq.n	800ed72 <osSemaphoreAcquire+0xb6>
 800ed3c:	4b11      	ldr	r3, [pc, #68]	; (800ed84 <osSemaphoreAcquire+0xc8>)
 800ed3e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ed42:	601a      	str	r2, [r3, #0]
 800ed44:	f3bf 8f4f 	dsb	sy
 800ed48:	f3bf 8f6f 	isb	sy
    if (timeout != 0U) {
 800ed4c:	e011      	b.n	800ed72 <osSemaphoreAcquire+0xb6>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800ed4e:	6839      	ldr	r1, [r7, #0]
 800ed50:	69b8      	ldr	r0, [r7, #24]
 800ed52:	f001 fc2b 	bl	80105ac <xQueueSemaphoreTake>
 800ed56:	4603      	mov	r3, r0
 800ed58:	2b01      	cmp	r3, #1
 800ed5a:	d00b      	beq.n	800ed74 <osSemaphoreAcquire+0xb8>
      if (timeout != 0U) {
 800ed5c:	683b      	ldr	r3, [r7, #0]
 800ed5e:	2b00      	cmp	r3, #0
 800ed60:	d003      	beq.n	800ed6a <osSemaphoreAcquire+0xae>
        stat = osErrorTimeout;
 800ed62:	f06f 0301 	mvn.w	r3, #1
 800ed66:	61fb      	str	r3, [r7, #28]
 800ed68:	e004      	b.n	800ed74 <osSemaphoreAcquire+0xb8>
      } else {
        stat = osErrorResource;
 800ed6a:	f06f 0302 	mvn.w	r3, #2
 800ed6e:	61fb      	str	r3, [r7, #28]
 800ed70:	e000      	b.n	800ed74 <osSemaphoreAcquire+0xb8>
    if (timeout != 0U) {
 800ed72:	bf00      	nop
      }
    }
  }

  return (stat);
 800ed74:	69fb      	ldr	r3, [r7, #28]
}
 800ed76:	4618      	mov	r0, r3
 800ed78:	3720      	adds	r7, #32
 800ed7a:	46bd      	mov	sp, r7
 800ed7c:	bd80      	pop	{r7, pc}
 800ed7e:	bf00      	nop
 800ed80:	2000147c 	.word	0x2000147c
 800ed84:	e000ed04 	.word	0xe000ed04

0800ed88 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 800ed88:	b580      	push	{r7, lr}
 800ed8a:	b088      	sub	sp, #32
 800ed8c:	af00      	add	r7, sp, #0
 800ed8e:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800ed90:	687b      	ldr	r3, [r7, #4]
 800ed92:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800ed94:	2300      	movs	r3, #0
 800ed96:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 800ed98:	69bb      	ldr	r3, [r7, #24]
 800ed9a:	2b00      	cmp	r3, #0
 800ed9c:	d103      	bne.n	800eda6 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 800ed9e:	f06f 0303 	mvn.w	r3, #3
 800eda2:	61fb      	str	r3, [r7, #28]
 800eda4:	e03e      	b.n	800ee24 <osSemaphoreRelease+0x9c>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800eda6:	f3ef 8305 	mrs	r3, IPSR
 800edaa:	617b      	str	r3, [r7, #20]
  return(result);
 800edac:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 800edae:	2b00      	cmp	r3, #0
 800edb0:	d10f      	bne.n	800edd2 <osSemaphoreRelease+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800edb2:	f3ef 8310 	mrs	r3, PRIMASK
 800edb6:	613b      	str	r3, [r7, #16]
  return(result);
 800edb8:	693b      	ldr	r3, [r7, #16]
 800edba:	2b00      	cmp	r3, #0
 800edbc:	d105      	bne.n	800edca <osSemaphoreRelease+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800edbe:	f3ef 8311 	mrs	r3, BASEPRI
 800edc2:	60fb      	str	r3, [r7, #12]
  return(result);
 800edc4:	68fb      	ldr	r3, [r7, #12]
 800edc6:	2b00      	cmp	r3, #0
 800edc8:	d01e      	beq.n	800ee08 <osSemaphoreRelease+0x80>
 800edca:	4b19      	ldr	r3, [pc, #100]	; (800ee30 <osSemaphoreRelease+0xa8>)
 800edcc:	681b      	ldr	r3, [r3, #0]
 800edce:	2b02      	cmp	r3, #2
 800edd0:	d11a      	bne.n	800ee08 <osSemaphoreRelease+0x80>
    yield = pdFALSE;
 800edd2:	2300      	movs	r3, #0
 800edd4:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800edd6:	f107 0308 	add.w	r3, r7, #8
 800edda:	4619      	mov	r1, r3
 800eddc:	69b8      	ldr	r0, [r7, #24]
 800edde:	f001 fa7f 	bl	80102e0 <xQueueGiveFromISR>
 800ede2:	4603      	mov	r3, r0
 800ede4:	2b01      	cmp	r3, #1
 800ede6:	d003      	beq.n	800edf0 <osSemaphoreRelease+0x68>
      stat = osErrorResource;
 800ede8:	f06f 0302 	mvn.w	r3, #2
 800edec:	61fb      	str	r3, [r7, #28]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800edee:	e018      	b.n	800ee22 <osSemaphoreRelease+0x9a>
    } else {
      portYIELD_FROM_ISR (yield);
 800edf0:	68bb      	ldr	r3, [r7, #8]
 800edf2:	2b00      	cmp	r3, #0
 800edf4:	d015      	beq.n	800ee22 <osSemaphoreRelease+0x9a>
 800edf6:	4b0f      	ldr	r3, [pc, #60]	; (800ee34 <osSemaphoreRelease+0xac>)
 800edf8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800edfc:	601a      	str	r2, [r3, #0]
 800edfe:	f3bf 8f4f 	dsb	sy
 800ee02:	f3bf 8f6f 	isb	sy
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800ee06:	e00c      	b.n	800ee22 <osSemaphoreRelease+0x9a>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800ee08:	2300      	movs	r3, #0
 800ee0a:	2200      	movs	r2, #0
 800ee0c:	2100      	movs	r1, #0
 800ee0e:	69b8      	ldr	r0, [r7, #24]
 800ee10:	f001 f8d8 	bl	800ffc4 <xQueueGenericSend>
 800ee14:	4603      	mov	r3, r0
 800ee16:	2b01      	cmp	r3, #1
 800ee18:	d004      	beq.n	800ee24 <osSemaphoreRelease+0x9c>
      stat = osErrorResource;
 800ee1a:	f06f 0302 	mvn.w	r3, #2
 800ee1e:	61fb      	str	r3, [r7, #28]
 800ee20:	e000      	b.n	800ee24 <osSemaphoreRelease+0x9c>
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800ee22:	bf00      	nop
    }
  }

  return (stat);
 800ee24:	69fb      	ldr	r3, [r7, #28]
}
 800ee26:	4618      	mov	r0, r3
 800ee28:	3720      	adds	r7, #32
 800ee2a:	46bd      	mov	sp, r7
 800ee2c:	bd80      	pop	{r7, pc}
 800ee2e:	bf00      	nop
 800ee30:	2000147c 	.word	0x2000147c
 800ee34:	e000ed04 	.word	0xe000ed04

0800ee38 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800ee38:	b580      	push	{r7, lr}
 800ee3a:	b08c      	sub	sp, #48	; 0x30
 800ee3c:	af02      	add	r7, sp, #8
 800ee3e:	60f8      	str	r0, [r7, #12]
 800ee40:	60b9      	str	r1, [r7, #8]
 800ee42:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800ee44:	2300      	movs	r3, #0
 800ee46:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ee48:	f3ef 8305 	mrs	r3, IPSR
 800ee4c:	61bb      	str	r3, [r7, #24]
  return(result);
 800ee4e:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800ee50:	2b00      	cmp	r3, #0
 800ee52:	d170      	bne.n	800ef36 <osMessageQueueNew+0xfe>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ee54:	f3ef 8310 	mrs	r3, PRIMASK
 800ee58:	617b      	str	r3, [r7, #20]
  return(result);
 800ee5a:	697b      	ldr	r3, [r7, #20]
 800ee5c:	2b00      	cmp	r3, #0
 800ee5e:	d105      	bne.n	800ee6c <osMessageQueueNew+0x34>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800ee60:	f3ef 8311 	mrs	r3, BASEPRI
 800ee64:	613b      	str	r3, [r7, #16]
  return(result);
 800ee66:	693b      	ldr	r3, [r7, #16]
 800ee68:	2b00      	cmp	r3, #0
 800ee6a:	d003      	beq.n	800ee74 <osMessageQueueNew+0x3c>
 800ee6c:	4b34      	ldr	r3, [pc, #208]	; (800ef40 <osMessageQueueNew+0x108>)
 800ee6e:	681b      	ldr	r3, [r3, #0]
 800ee70:	2b02      	cmp	r3, #2
 800ee72:	d060      	beq.n	800ef36 <osMessageQueueNew+0xfe>
 800ee74:	68fb      	ldr	r3, [r7, #12]
 800ee76:	2b00      	cmp	r3, #0
 800ee78:	d05d      	beq.n	800ef36 <osMessageQueueNew+0xfe>
 800ee7a:	68bb      	ldr	r3, [r7, #8]
 800ee7c:	2b00      	cmp	r3, #0
 800ee7e:	d05a      	beq.n	800ef36 <osMessageQueueNew+0xfe>
    mem = -1;
 800ee80:	f04f 33ff 	mov.w	r3, #4294967295
 800ee84:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800ee86:	687b      	ldr	r3, [r7, #4]
 800ee88:	2b00      	cmp	r3, #0
 800ee8a:	d029      	beq.n	800eee0 <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800ee8c:	687b      	ldr	r3, [r7, #4]
 800ee8e:	689b      	ldr	r3, [r3, #8]
 800ee90:	2b00      	cmp	r3, #0
 800ee92:	d012      	beq.n	800eeba <osMessageQueueNew+0x82>
 800ee94:	687b      	ldr	r3, [r7, #4]
 800ee96:	68db      	ldr	r3, [r3, #12]
 800ee98:	2b4f      	cmp	r3, #79	; 0x4f
 800ee9a:	d90e      	bls.n	800eeba <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800ee9c:	687b      	ldr	r3, [r7, #4]
 800ee9e:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800eea0:	2b00      	cmp	r3, #0
 800eea2:	d00a      	beq.n	800eeba <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800eea4:	687b      	ldr	r3, [r7, #4]
 800eea6:	695a      	ldr	r2, [r3, #20]
 800eea8:	68fb      	ldr	r3, [r7, #12]
 800eeaa:	68b9      	ldr	r1, [r7, #8]
 800eeac:	fb01 f303 	mul.w	r3, r1, r3
 800eeb0:	429a      	cmp	r2, r3
 800eeb2:	d302      	bcc.n	800eeba <osMessageQueueNew+0x82>
        mem = 1;
 800eeb4:	2301      	movs	r3, #1
 800eeb6:	623b      	str	r3, [r7, #32]
 800eeb8:	e014      	b.n	800eee4 <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800eeba:	687b      	ldr	r3, [r7, #4]
 800eebc:	689b      	ldr	r3, [r3, #8]
 800eebe:	2b00      	cmp	r3, #0
 800eec0:	d110      	bne.n	800eee4 <osMessageQueueNew+0xac>
 800eec2:	687b      	ldr	r3, [r7, #4]
 800eec4:	68db      	ldr	r3, [r3, #12]
 800eec6:	2b00      	cmp	r3, #0
 800eec8:	d10c      	bne.n	800eee4 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800eeca:	687b      	ldr	r3, [r7, #4]
 800eecc:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800eece:	2b00      	cmp	r3, #0
 800eed0:	d108      	bne.n	800eee4 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800eed2:	687b      	ldr	r3, [r7, #4]
 800eed4:	695b      	ldr	r3, [r3, #20]
 800eed6:	2b00      	cmp	r3, #0
 800eed8:	d104      	bne.n	800eee4 <osMessageQueueNew+0xac>
          mem = 0;
 800eeda:	2300      	movs	r3, #0
 800eedc:	623b      	str	r3, [r7, #32]
 800eede:	e001      	b.n	800eee4 <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 800eee0:	2300      	movs	r3, #0
 800eee2:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 800eee4:	6a3b      	ldr	r3, [r7, #32]
 800eee6:	2b01      	cmp	r3, #1
 800eee8:	d10c      	bne.n	800ef04 <osMessageQueueNew+0xcc>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800eeea:	687b      	ldr	r3, [r7, #4]
 800eeec:	691a      	ldr	r2, [r3, #16]
 800eeee:	687b      	ldr	r3, [r7, #4]
 800eef0:	6899      	ldr	r1, [r3, #8]
 800eef2:	2300      	movs	r3, #0
 800eef4:	9300      	str	r3, [sp, #0]
 800eef6:	460b      	mov	r3, r1
 800eef8:	68b9      	ldr	r1, [r7, #8]
 800eefa:	68f8      	ldr	r0, [r7, #12]
 800eefc:	f000 fe72 	bl	800fbe4 <xQueueGenericCreateStatic>
 800ef00:	6278      	str	r0, [r7, #36]	; 0x24
 800ef02:	e008      	b.n	800ef16 <osMessageQueueNew+0xde>
    }
    else {
      if (mem == 0) {
 800ef04:	6a3b      	ldr	r3, [r7, #32]
 800ef06:	2b00      	cmp	r3, #0
 800ef08:	d105      	bne.n	800ef16 <osMessageQueueNew+0xde>
        hQueue = xQueueCreate (msg_count, msg_size);
 800ef0a:	2200      	movs	r2, #0
 800ef0c:	68b9      	ldr	r1, [r7, #8]
 800ef0e:	68f8      	ldr	r0, [r7, #12]
 800ef10:	f000 fedb 	bl	800fcca <xQueueGenericCreate>
 800ef14:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800ef16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef18:	2b00      	cmp	r3, #0
 800ef1a:	d00c      	beq.n	800ef36 <osMessageQueueNew+0xfe>
      if (attr != NULL) {
 800ef1c:	687b      	ldr	r3, [r7, #4]
 800ef1e:	2b00      	cmp	r3, #0
 800ef20:	d003      	beq.n	800ef2a <osMessageQueueNew+0xf2>
        name = attr->name;
 800ef22:	687b      	ldr	r3, [r7, #4]
 800ef24:	681b      	ldr	r3, [r3, #0]
 800ef26:	61fb      	str	r3, [r7, #28]
 800ef28:	e001      	b.n	800ef2e <osMessageQueueNew+0xf6>
      } else {
        name = NULL;
 800ef2a:	2300      	movs	r3, #0
 800ef2c:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 800ef2e:	69f9      	ldr	r1, [r7, #28]
 800ef30:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ef32:	f001 fe0b 	bl	8010b4c <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800ef36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800ef38:	4618      	mov	r0, r3
 800ef3a:	3728      	adds	r7, #40	; 0x28
 800ef3c:	46bd      	mov	sp, r7
 800ef3e:	bd80      	pop	{r7, pc}
 800ef40:	2000147c 	.word	0x2000147c

0800ef44 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800ef44:	b580      	push	{r7, lr}
 800ef46:	b08a      	sub	sp, #40	; 0x28
 800ef48:	af00      	add	r7, sp, #0
 800ef4a:	60f8      	str	r0, [r7, #12]
 800ef4c:	60b9      	str	r1, [r7, #8]
 800ef4e:	603b      	str	r3, [r7, #0]
 800ef50:	4613      	mov	r3, r2
 800ef52:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800ef54:	68fb      	ldr	r3, [r7, #12]
 800ef56:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800ef58:	2300      	movs	r3, #0
 800ef5a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ef5c:	f3ef 8305 	mrs	r3, IPSR
 800ef60:	61fb      	str	r3, [r7, #28]
  return(result);
 800ef62:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 800ef64:	2b00      	cmp	r3, #0
 800ef66:	d10f      	bne.n	800ef88 <osMessageQueuePut+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ef68:	f3ef 8310 	mrs	r3, PRIMASK
 800ef6c:	61bb      	str	r3, [r7, #24]
  return(result);
 800ef6e:	69bb      	ldr	r3, [r7, #24]
 800ef70:	2b00      	cmp	r3, #0
 800ef72:	d105      	bne.n	800ef80 <osMessageQueuePut+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800ef74:	f3ef 8311 	mrs	r3, BASEPRI
 800ef78:	617b      	str	r3, [r7, #20]
  return(result);
 800ef7a:	697b      	ldr	r3, [r7, #20]
 800ef7c:	2b00      	cmp	r3, #0
 800ef7e:	d02c      	beq.n	800efda <osMessageQueuePut+0x96>
 800ef80:	4b28      	ldr	r3, [pc, #160]	; (800f024 <osMessageQueuePut+0xe0>)
 800ef82:	681b      	ldr	r3, [r3, #0]
 800ef84:	2b02      	cmp	r3, #2
 800ef86:	d128      	bne.n	800efda <osMessageQueuePut+0x96>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800ef88:	6a3b      	ldr	r3, [r7, #32]
 800ef8a:	2b00      	cmp	r3, #0
 800ef8c:	d005      	beq.n	800ef9a <osMessageQueuePut+0x56>
 800ef8e:	68bb      	ldr	r3, [r7, #8]
 800ef90:	2b00      	cmp	r3, #0
 800ef92:	d002      	beq.n	800ef9a <osMessageQueuePut+0x56>
 800ef94:	683b      	ldr	r3, [r7, #0]
 800ef96:	2b00      	cmp	r3, #0
 800ef98:	d003      	beq.n	800efa2 <osMessageQueuePut+0x5e>
      stat = osErrorParameter;
 800ef9a:	f06f 0303 	mvn.w	r3, #3
 800ef9e:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800efa0:	e039      	b.n	800f016 <osMessageQueuePut+0xd2>
    }
    else {
      yield = pdFALSE;
 800efa2:	2300      	movs	r3, #0
 800efa4:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800efa6:	f107 0210 	add.w	r2, r7, #16
 800efaa:	2300      	movs	r3, #0
 800efac:	68b9      	ldr	r1, [r7, #8]
 800efae:	6a38      	ldr	r0, [r7, #32]
 800efb0:	f001 f902 	bl	80101b8 <xQueueGenericSendFromISR>
 800efb4:	4603      	mov	r3, r0
 800efb6:	2b01      	cmp	r3, #1
 800efb8:	d003      	beq.n	800efc2 <osMessageQueuePut+0x7e>
        stat = osErrorResource;
 800efba:	f06f 0302 	mvn.w	r3, #2
 800efbe:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800efc0:	e029      	b.n	800f016 <osMessageQueuePut+0xd2>
      } else {
        portYIELD_FROM_ISR (yield);
 800efc2:	693b      	ldr	r3, [r7, #16]
 800efc4:	2b00      	cmp	r3, #0
 800efc6:	d026      	beq.n	800f016 <osMessageQueuePut+0xd2>
 800efc8:	4b17      	ldr	r3, [pc, #92]	; (800f028 <osMessageQueuePut+0xe4>)
 800efca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800efce:	601a      	str	r2, [r3, #0]
 800efd0:	f3bf 8f4f 	dsb	sy
 800efd4:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800efd8:	e01d      	b.n	800f016 <osMessageQueuePut+0xd2>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800efda:	6a3b      	ldr	r3, [r7, #32]
 800efdc:	2b00      	cmp	r3, #0
 800efde:	d002      	beq.n	800efe6 <osMessageQueuePut+0xa2>
 800efe0:	68bb      	ldr	r3, [r7, #8]
 800efe2:	2b00      	cmp	r3, #0
 800efe4:	d103      	bne.n	800efee <osMessageQueuePut+0xaa>
      stat = osErrorParameter;
 800efe6:	f06f 0303 	mvn.w	r3, #3
 800efea:	627b      	str	r3, [r7, #36]	; 0x24
 800efec:	e014      	b.n	800f018 <osMessageQueuePut+0xd4>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800efee:	2300      	movs	r3, #0
 800eff0:	683a      	ldr	r2, [r7, #0]
 800eff2:	68b9      	ldr	r1, [r7, #8]
 800eff4:	6a38      	ldr	r0, [r7, #32]
 800eff6:	f000 ffe5 	bl	800ffc4 <xQueueGenericSend>
 800effa:	4603      	mov	r3, r0
 800effc:	2b01      	cmp	r3, #1
 800effe:	d00b      	beq.n	800f018 <osMessageQueuePut+0xd4>
        if (timeout != 0U) {
 800f000:	683b      	ldr	r3, [r7, #0]
 800f002:	2b00      	cmp	r3, #0
 800f004:	d003      	beq.n	800f00e <osMessageQueuePut+0xca>
          stat = osErrorTimeout;
 800f006:	f06f 0301 	mvn.w	r3, #1
 800f00a:	627b      	str	r3, [r7, #36]	; 0x24
 800f00c:	e004      	b.n	800f018 <osMessageQueuePut+0xd4>
        } else {
          stat = osErrorResource;
 800f00e:	f06f 0302 	mvn.w	r3, #2
 800f012:	627b      	str	r3, [r7, #36]	; 0x24
 800f014:	e000      	b.n	800f018 <osMessageQueuePut+0xd4>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800f016:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 800f018:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800f01a:	4618      	mov	r0, r3
 800f01c:	3728      	adds	r7, #40	; 0x28
 800f01e:	46bd      	mov	sp, r7
 800f020:	bd80      	pop	{r7, pc}
 800f022:	bf00      	nop
 800f024:	2000147c 	.word	0x2000147c
 800f028:	e000ed04 	.word	0xe000ed04

0800f02c <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800f02c:	b580      	push	{r7, lr}
 800f02e:	b08a      	sub	sp, #40	; 0x28
 800f030:	af00      	add	r7, sp, #0
 800f032:	60f8      	str	r0, [r7, #12]
 800f034:	60b9      	str	r1, [r7, #8]
 800f036:	607a      	str	r2, [r7, #4]
 800f038:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800f03a:	68fb      	ldr	r3, [r7, #12]
 800f03c:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800f03e:	2300      	movs	r3, #0
 800f040:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f042:	f3ef 8305 	mrs	r3, IPSR
 800f046:	61fb      	str	r3, [r7, #28]
  return(result);
 800f048:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 800f04a:	2b00      	cmp	r3, #0
 800f04c:	d10f      	bne.n	800f06e <osMessageQueueGet+0x42>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f04e:	f3ef 8310 	mrs	r3, PRIMASK
 800f052:	61bb      	str	r3, [r7, #24]
  return(result);
 800f054:	69bb      	ldr	r3, [r7, #24]
 800f056:	2b00      	cmp	r3, #0
 800f058:	d105      	bne.n	800f066 <osMessageQueueGet+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800f05a:	f3ef 8311 	mrs	r3, BASEPRI
 800f05e:	617b      	str	r3, [r7, #20]
  return(result);
 800f060:	697b      	ldr	r3, [r7, #20]
 800f062:	2b00      	cmp	r3, #0
 800f064:	d02c      	beq.n	800f0c0 <osMessageQueueGet+0x94>
 800f066:	4b28      	ldr	r3, [pc, #160]	; (800f108 <osMessageQueueGet+0xdc>)
 800f068:	681b      	ldr	r3, [r3, #0]
 800f06a:	2b02      	cmp	r3, #2
 800f06c:	d128      	bne.n	800f0c0 <osMessageQueueGet+0x94>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800f06e:	6a3b      	ldr	r3, [r7, #32]
 800f070:	2b00      	cmp	r3, #0
 800f072:	d005      	beq.n	800f080 <osMessageQueueGet+0x54>
 800f074:	68bb      	ldr	r3, [r7, #8]
 800f076:	2b00      	cmp	r3, #0
 800f078:	d002      	beq.n	800f080 <osMessageQueueGet+0x54>
 800f07a:	683b      	ldr	r3, [r7, #0]
 800f07c:	2b00      	cmp	r3, #0
 800f07e:	d003      	beq.n	800f088 <osMessageQueueGet+0x5c>
      stat = osErrorParameter;
 800f080:	f06f 0303 	mvn.w	r3, #3
 800f084:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800f086:	e038      	b.n	800f0fa <osMessageQueueGet+0xce>
    }
    else {
      yield = pdFALSE;
 800f088:	2300      	movs	r3, #0
 800f08a:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800f08c:	f107 0310 	add.w	r3, r7, #16
 800f090:	461a      	mov	r2, r3
 800f092:	68b9      	ldr	r1, [r7, #8]
 800f094:	6a38      	ldr	r0, [r7, #32]
 800f096:	f001 fb91 	bl	80107bc <xQueueReceiveFromISR>
 800f09a:	4603      	mov	r3, r0
 800f09c:	2b01      	cmp	r3, #1
 800f09e:	d003      	beq.n	800f0a8 <osMessageQueueGet+0x7c>
        stat = osErrorResource;
 800f0a0:	f06f 0302 	mvn.w	r3, #2
 800f0a4:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800f0a6:	e028      	b.n	800f0fa <osMessageQueueGet+0xce>
      } else {
        portYIELD_FROM_ISR (yield);
 800f0a8:	693b      	ldr	r3, [r7, #16]
 800f0aa:	2b00      	cmp	r3, #0
 800f0ac:	d025      	beq.n	800f0fa <osMessageQueueGet+0xce>
 800f0ae:	4b17      	ldr	r3, [pc, #92]	; (800f10c <osMessageQueueGet+0xe0>)
 800f0b0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f0b4:	601a      	str	r2, [r3, #0]
 800f0b6:	f3bf 8f4f 	dsb	sy
 800f0ba:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800f0be:	e01c      	b.n	800f0fa <osMessageQueueGet+0xce>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800f0c0:	6a3b      	ldr	r3, [r7, #32]
 800f0c2:	2b00      	cmp	r3, #0
 800f0c4:	d002      	beq.n	800f0cc <osMessageQueueGet+0xa0>
 800f0c6:	68bb      	ldr	r3, [r7, #8]
 800f0c8:	2b00      	cmp	r3, #0
 800f0ca:	d103      	bne.n	800f0d4 <osMessageQueueGet+0xa8>
      stat = osErrorParameter;
 800f0cc:	f06f 0303 	mvn.w	r3, #3
 800f0d0:	627b      	str	r3, [r7, #36]	; 0x24
 800f0d2:	e013      	b.n	800f0fc <osMessageQueueGet+0xd0>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800f0d4:	683a      	ldr	r2, [r7, #0]
 800f0d6:	68b9      	ldr	r1, [r7, #8]
 800f0d8:	6a38      	ldr	r0, [r7, #32]
 800f0da:	f001 f98b 	bl	80103f4 <xQueueReceive>
 800f0de:	4603      	mov	r3, r0
 800f0e0:	2b01      	cmp	r3, #1
 800f0e2:	d00b      	beq.n	800f0fc <osMessageQueueGet+0xd0>
        if (timeout != 0U) {
 800f0e4:	683b      	ldr	r3, [r7, #0]
 800f0e6:	2b00      	cmp	r3, #0
 800f0e8:	d003      	beq.n	800f0f2 <osMessageQueueGet+0xc6>
          stat = osErrorTimeout;
 800f0ea:	f06f 0301 	mvn.w	r3, #1
 800f0ee:	627b      	str	r3, [r7, #36]	; 0x24
 800f0f0:	e004      	b.n	800f0fc <osMessageQueueGet+0xd0>
        } else {
          stat = osErrorResource;
 800f0f2:	f06f 0302 	mvn.w	r3, #2
 800f0f6:	627b      	str	r3, [r7, #36]	; 0x24
 800f0f8:	e000      	b.n	800f0fc <osMessageQueueGet+0xd0>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800f0fa:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 800f0fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800f0fe:	4618      	mov	r0, r3
 800f100:	3728      	adds	r7, #40	; 0x28
 800f102:	46bd      	mov	sp, r7
 800f104:	bd80      	pop	{r7, pc}
 800f106:	bf00      	nop
 800f108:	2000147c 	.word	0x2000147c
 800f10c:	e000ed04 	.word	0xe000ed04

0800f110 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800f110:	b480      	push	{r7}
 800f112:	b085      	sub	sp, #20
 800f114:	af00      	add	r7, sp, #0
 800f116:	60f8      	str	r0, [r7, #12]
 800f118:	60b9      	str	r1, [r7, #8]
 800f11a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800f11c:	68fb      	ldr	r3, [r7, #12]
 800f11e:	4a07      	ldr	r2, [pc, #28]	; (800f13c <vApplicationGetIdleTaskMemory+0x2c>)
 800f120:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800f122:	68bb      	ldr	r3, [r7, #8]
 800f124:	4a06      	ldr	r2, [pc, #24]	; (800f140 <vApplicationGetIdleTaskMemory+0x30>)
 800f126:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800f128:	687b      	ldr	r3, [r7, #4]
 800f12a:	2280      	movs	r2, #128	; 0x80
 800f12c:	601a      	str	r2, [r3, #0]
}
 800f12e:	bf00      	nop
 800f130:	3714      	adds	r7, #20
 800f132:	46bd      	mov	sp, r7
 800f134:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f138:	4770      	bx	lr
 800f13a:	bf00      	nop
 800f13c:	20001480 	.word	0x20001480
 800f140:	200014dc 	.word	0x200014dc

0800f144 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800f144:	b480      	push	{r7}
 800f146:	b085      	sub	sp, #20
 800f148:	af00      	add	r7, sp, #0
 800f14a:	60f8      	str	r0, [r7, #12]
 800f14c:	60b9      	str	r1, [r7, #8]
 800f14e:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800f150:	68fb      	ldr	r3, [r7, #12]
 800f152:	4a07      	ldr	r2, [pc, #28]	; (800f170 <vApplicationGetTimerTaskMemory+0x2c>)
 800f154:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800f156:	68bb      	ldr	r3, [r7, #8]
 800f158:	4a06      	ldr	r2, [pc, #24]	; (800f174 <vApplicationGetTimerTaskMemory+0x30>)
 800f15a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800f15c:	687b      	ldr	r3, [r7, #4]
 800f15e:	f44f 7280 	mov.w	r2, #256	; 0x100
 800f162:	601a      	str	r2, [r3, #0]
}
 800f164:	bf00      	nop
 800f166:	3714      	adds	r7, #20
 800f168:	46bd      	mov	sp, r7
 800f16a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f16e:	4770      	bx	lr
 800f170:	200016dc 	.word	0x200016dc
 800f174:	20001738 	.word	0x20001738

0800f178 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800f178:	b480      	push	{r7}
 800f17a:	b085      	sub	sp, #20
 800f17c:	af00      	add	r7, sp, #0
 800f17e:	60f8      	str	r0, [r7, #12]
 800f180:	60b9      	str	r1, [r7, #8]
 800f182:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800f184:	68fb      	ldr	r3, [r7, #12]
 800f186:	3b04      	subs	r3, #4
 800f188:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800f18a:	68fb      	ldr	r3, [r7, #12]
 800f18c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800f190:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800f192:	68fb      	ldr	r3, [r7, #12]
 800f194:	3b04      	subs	r3, #4
 800f196:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800f198:	68bb      	ldr	r3, [r7, #8]
 800f19a:	f023 0201 	bic.w	r2, r3, #1
 800f19e:	68fb      	ldr	r3, [r7, #12]
 800f1a0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800f1a2:	68fb      	ldr	r3, [r7, #12]
 800f1a4:	3b04      	subs	r3, #4
 800f1a6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800f1a8:	4a0c      	ldr	r2, [pc, #48]	; (800f1dc <pxPortInitialiseStack+0x64>)
 800f1aa:	68fb      	ldr	r3, [r7, #12]
 800f1ac:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800f1ae:	68fb      	ldr	r3, [r7, #12]
 800f1b0:	3b14      	subs	r3, #20
 800f1b2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800f1b4:	687a      	ldr	r2, [r7, #4]
 800f1b6:	68fb      	ldr	r3, [r7, #12]
 800f1b8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800f1ba:	68fb      	ldr	r3, [r7, #12]
 800f1bc:	3b04      	subs	r3, #4
 800f1be:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800f1c0:	68fb      	ldr	r3, [r7, #12]
 800f1c2:	f06f 0202 	mvn.w	r2, #2
 800f1c6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800f1c8:	68fb      	ldr	r3, [r7, #12]
 800f1ca:	3b20      	subs	r3, #32
 800f1cc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800f1ce:	68fb      	ldr	r3, [r7, #12]
}
 800f1d0:	4618      	mov	r0, r3
 800f1d2:	3714      	adds	r7, #20
 800f1d4:	46bd      	mov	sp, r7
 800f1d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1da:	4770      	bx	lr
 800f1dc:	0800f1e1 	.word	0x0800f1e1

0800f1e0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800f1e0:	b480      	push	{r7}
 800f1e2:	b085      	sub	sp, #20
 800f1e4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800f1e6:	2300      	movs	r3, #0
 800f1e8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800f1ea:	4b11      	ldr	r3, [pc, #68]	; (800f230 <prvTaskExitError+0x50>)
 800f1ec:	681b      	ldr	r3, [r3, #0]
 800f1ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f1f2:	d009      	beq.n	800f208 <prvTaskExitError+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800f1f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f1f8:	f383 8811 	msr	BASEPRI, r3
 800f1fc:	f3bf 8f6f 	isb	sy
 800f200:	f3bf 8f4f 	dsb	sy
 800f204:	60fb      	str	r3, [r7, #12]
 800f206:	e7fe      	b.n	800f206 <prvTaskExitError+0x26>
 800f208:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f20c:	f383 8811 	msr	BASEPRI, r3
 800f210:	f3bf 8f6f 	isb	sy
 800f214:	f3bf 8f4f 	dsb	sy
 800f218:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800f21a:	bf00      	nop
 800f21c:	687b      	ldr	r3, [r7, #4]
 800f21e:	2b00      	cmp	r3, #0
 800f220:	d0fc      	beq.n	800f21c <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800f222:	bf00      	nop
 800f224:	3714      	adds	r7, #20
 800f226:	46bd      	mov	sp, r7
 800f228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f22c:	4770      	bx	lr
 800f22e:	bf00      	nop
 800f230:	20000020 	.word	0x20000020
	...

0800f240 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800f240:	4b07      	ldr	r3, [pc, #28]	; (800f260 <pxCurrentTCBConst2>)
 800f242:	6819      	ldr	r1, [r3, #0]
 800f244:	6808      	ldr	r0, [r1, #0]
 800f246:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f24a:	f380 8809 	msr	PSP, r0
 800f24e:	f3bf 8f6f 	isb	sy
 800f252:	f04f 0000 	mov.w	r0, #0
 800f256:	f380 8811 	msr	BASEPRI, r0
 800f25a:	4770      	bx	lr
 800f25c:	f3af 8000 	nop.w

0800f260 <pxCurrentTCBConst2>:
 800f260:	20007148 	.word	0x20007148
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800f264:	bf00      	nop
 800f266:	bf00      	nop

0800f268 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800f268:	4808      	ldr	r0, [pc, #32]	; (800f28c <prvPortStartFirstTask+0x24>)
 800f26a:	6800      	ldr	r0, [r0, #0]
 800f26c:	6800      	ldr	r0, [r0, #0]
 800f26e:	f380 8808 	msr	MSP, r0
 800f272:	f04f 0000 	mov.w	r0, #0
 800f276:	f380 8814 	msr	CONTROL, r0
 800f27a:	b662      	cpsie	i
 800f27c:	b661      	cpsie	f
 800f27e:	f3bf 8f4f 	dsb	sy
 800f282:	f3bf 8f6f 	isb	sy
 800f286:	df00      	svc	0
 800f288:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800f28a:	bf00      	nop
 800f28c:	e000ed08 	.word	0xe000ed08

0800f290 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800f290:	b580      	push	{r7, lr}
 800f292:	b086      	sub	sp, #24
 800f294:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800f296:	4b44      	ldr	r3, [pc, #272]	; (800f3a8 <xPortStartScheduler+0x118>)
 800f298:	681b      	ldr	r3, [r3, #0]
 800f29a:	4a44      	ldr	r2, [pc, #272]	; (800f3ac <xPortStartScheduler+0x11c>)
 800f29c:	4293      	cmp	r3, r2
 800f29e:	d109      	bne.n	800f2b4 <xPortStartScheduler+0x24>
 800f2a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f2a4:	f383 8811 	msr	BASEPRI, r3
 800f2a8:	f3bf 8f6f 	isb	sy
 800f2ac:	f3bf 8f4f 	dsb	sy
 800f2b0:	613b      	str	r3, [r7, #16]
 800f2b2:	e7fe      	b.n	800f2b2 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800f2b4:	4b3c      	ldr	r3, [pc, #240]	; (800f3a8 <xPortStartScheduler+0x118>)
 800f2b6:	681b      	ldr	r3, [r3, #0]
 800f2b8:	4a3d      	ldr	r2, [pc, #244]	; (800f3b0 <xPortStartScheduler+0x120>)
 800f2ba:	4293      	cmp	r3, r2
 800f2bc:	d109      	bne.n	800f2d2 <xPortStartScheduler+0x42>
 800f2be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f2c2:	f383 8811 	msr	BASEPRI, r3
 800f2c6:	f3bf 8f6f 	isb	sy
 800f2ca:	f3bf 8f4f 	dsb	sy
 800f2ce:	60fb      	str	r3, [r7, #12]
 800f2d0:	e7fe      	b.n	800f2d0 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800f2d2:	4b38      	ldr	r3, [pc, #224]	; (800f3b4 <xPortStartScheduler+0x124>)
 800f2d4:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800f2d6:	697b      	ldr	r3, [r7, #20]
 800f2d8:	781b      	ldrb	r3, [r3, #0]
 800f2da:	b2db      	uxtb	r3, r3
 800f2dc:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800f2de:	697b      	ldr	r3, [r7, #20]
 800f2e0:	22ff      	movs	r2, #255	; 0xff
 800f2e2:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800f2e4:	697b      	ldr	r3, [r7, #20]
 800f2e6:	781b      	ldrb	r3, [r3, #0]
 800f2e8:	b2db      	uxtb	r3, r3
 800f2ea:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800f2ec:	78fb      	ldrb	r3, [r7, #3]
 800f2ee:	b2db      	uxtb	r3, r3
 800f2f0:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800f2f4:	b2da      	uxtb	r2, r3
 800f2f6:	4b30      	ldr	r3, [pc, #192]	; (800f3b8 <xPortStartScheduler+0x128>)
 800f2f8:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800f2fa:	4b30      	ldr	r3, [pc, #192]	; (800f3bc <xPortStartScheduler+0x12c>)
 800f2fc:	2207      	movs	r2, #7
 800f2fe:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800f300:	e009      	b.n	800f316 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 800f302:	4b2e      	ldr	r3, [pc, #184]	; (800f3bc <xPortStartScheduler+0x12c>)
 800f304:	681b      	ldr	r3, [r3, #0]
 800f306:	3b01      	subs	r3, #1
 800f308:	4a2c      	ldr	r2, [pc, #176]	; (800f3bc <xPortStartScheduler+0x12c>)
 800f30a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800f30c:	78fb      	ldrb	r3, [r7, #3]
 800f30e:	b2db      	uxtb	r3, r3
 800f310:	005b      	lsls	r3, r3, #1
 800f312:	b2db      	uxtb	r3, r3
 800f314:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800f316:	78fb      	ldrb	r3, [r7, #3]
 800f318:	b2db      	uxtb	r3, r3
 800f31a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f31e:	2b80      	cmp	r3, #128	; 0x80
 800f320:	d0ef      	beq.n	800f302 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800f322:	4b26      	ldr	r3, [pc, #152]	; (800f3bc <xPortStartScheduler+0x12c>)
 800f324:	681b      	ldr	r3, [r3, #0]
 800f326:	f1c3 0307 	rsb	r3, r3, #7
 800f32a:	2b04      	cmp	r3, #4
 800f32c:	d009      	beq.n	800f342 <xPortStartScheduler+0xb2>
 800f32e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f332:	f383 8811 	msr	BASEPRI, r3
 800f336:	f3bf 8f6f 	isb	sy
 800f33a:	f3bf 8f4f 	dsb	sy
 800f33e:	60bb      	str	r3, [r7, #8]
 800f340:	e7fe      	b.n	800f340 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800f342:	4b1e      	ldr	r3, [pc, #120]	; (800f3bc <xPortStartScheduler+0x12c>)
 800f344:	681b      	ldr	r3, [r3, #0]
 800f346:	021b      	lsls	r3, r3, #8
 800f348:	4a1c      	ldr	r2, [pc, #112]	; (800f3bc <xPortStartScheduler+0x12c>)
 800f34a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800f34c:	4b1b      	ldr	r3, [pc, #108]	; (800f3bc <xPortStartScheduler+0x12c>)
 800f34e:	681b      	ldr	r3, [r3, #0]
 800f350:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800f354:	4a19      	ldr	r2, [pc, #100]	; (800f3bc <xPortStartScheduler+0x12c>)
 800f356:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800f358:	687b      	ldr	r3, [r7, #4]
 800f35a:	b2da      	uxtb	r2, r3
 800f35c:	697b      	ldr	r3, [r7, #20]
 800f35e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800f360:	4b17      	ldr	r3, [pc, #92]	; (800f3c0 <xPortStartScheduler+0x130>)
 800f362:	681b      	ldr	r3, [r3, #0]
 800f364:	4a16      	ldr	r2, [pc, #88]	; (800f3c0 <xPortStartScheduler+0x130>)
 800f366:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800f36a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800f36c:	4b14      	ldr	r3, [pc, #80]	; (800f3c0 <xPortStartScheduler+0x130>)
 800f36e:	681b      	ldr	r3, [r3, #0]
 800f370:	4a13      	ldr	r2, [pc, #76]	; (800f3c0 <xPortStartScheduler+0x130>)
 800f372:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800f376:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800f378:	f000 f8d6 	bl	800f528 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800f37c:	4b11      	ldr	r3, [pc, #68]	; (800f3c4 <xPortStartScheduler+0x134>)
 800f37e:	2200      	movs	r2, #0
 800f380:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800f382:	f000 f8f5 	bl	800f570 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800f386:	4b10      	ldr	r3, [pc, #64]	; (800f3c8 <xPortStartScheduler+0x138>)
 800f388:	681b      	ldr	r3, [r3, #0]
 800f38a:	4a0f      	ldr	r2, [pc, #60]	; (800f3c8 <xPortStartScheduler+0x138>)
 800f38c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800f390:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800f392:	f7ff ff69 	bl	800f268 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800f396:	f002 f83f 	bl	8011418 <vTaskSwitchContext>
	prvTaskExitError();
 800f39a:	f7ff ff21 	bl	800f1e0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800f39e:	2300      	movs	r3, #0
}
 800f3a0:	4618      	mov	r0, r3
 800f3a2:	3718      	adds	r7, #24
 800f3a4:	46bd      	mov	sp, r7
 800f3a6:	bd80      	pop	{r7, pc}
 800f3a8:	e000ed00 	.word	0xe000ed00
 800f3ac:	410fc271 	.word	0x410fc271
 800f3b0:	410fc270 	.word	0x410fc270
 800f3b4:	e000e400 	.word	0xe000e400
 800f3b8:	20001b38 	.word	0x20001b38
 800f3bc:	20001b3c 	.word	0x20001b3c
 800f3c0:	e000ed20 	.word	0xe000ed20
 800f3c4:	20000020 	.word	0x20000020
 800f3c8:	e000ef34 	.word	0xe000ef34

0800f3cc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800f3cc:	b480      	push	{r7}
 800f3ce:	b083      	sub	sp, #12
 800f3d0:	af00      	add	r7, sp, #0
 800f3d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f3d6:	f383 8811 	msr	BASEPRI, r3
 800f3da:	f3bf 8f6f 	isb	sy
 800f3de:	f3bf 8f4f 	dsb	sy
 800f3e2:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800f3e4:	4b0e      	ldr	r3, [pc, #56]	; (800f420 <vPortEnterCritical+0x54>)
 800f3e6:	681b      	ldr	r3, [r3, #0]
 800f3e8:	3301      	adds	r3, #1
 800f3ea:	4a0d      	ldr	r2, [pc, #52]	; (800f420 <vPortEnterCritical+0x54>)
 800f3ec:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800f3ee:	4b0c      	ldr	r3, [pc, #48]	; (800f420 <vPortEnterCritical+0x54>)
 800f3f0:	681b      	ldr	r3, [r3, #0]
 800f3f2:	2b01      	cmp	r3, #1
 800f3f4:	d10e      	bne.n	800f414 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800f3f6:	4b0b      	ldr	r3, [pc, #44]	; (800f424 <vPortEnterCritical+0x58>)
 800f3f8:	681b      	ldr	r3, [r3, #0]
 800f3fa:	b2db      	uxtb	r3, r3
 800f3fc:	2b00      	cmp	r3, #0
 800f3fe:	d009      	beq.n	800f414 <vPortEnterCritical+0x48>
 800f400:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f404:	f383 8811 	msr	BASEPRI, r3
 800f408:	f3bf 8f6f 	isb	sy
 800f40c:	f3bf 8f4f 	dsb	sy
 800f410:	603b      	str	r3, [r7, #0]
 800f412:	e7fe      	b.n	800f412 <vPortEnterCritical+0x46>
	}
}
 800f414:	bf00      	nop
 800f416:	370c      	adds	r7, #12
 800f418:	46bd      	mov	sp, r7
 800f41a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f41e:	4770      	bx	lr
 800f420:	20000020 	.word	0x20000020
 800f424:	e000ed04 	.word	0xe000ed04

0800f428 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800f428:	b480      	push	{r7}
 800f42a:	b083      	sub	sp, #12
 800f42c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800f42e:	4b11      	ldr	r3, [pc, #68]	; (800f474 <vPortExitCritical+0x4c>)
 800f430:	681b      	ldr	r3, [r3, #0]
 800f432:	2b00      	cmp	r3, #0
 800f434:	d109      	bne.n	800f44a <vPortExitCritical+0x22>
 800f436:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f43a:	f383 8811 	msr	BASEPRI, r3
 800f43e:	f3bf 8f6f 	isb	sy
 800f442:	f3bf 8f4f 	dsb	sy
 800f446:	607b      	str	r3, [r7, #4]
 800f448:	e7fe      	b.n	800f448 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 800f44a:	4b0a      	ldr	r3, [pc, #40]	; (800f474 <vPortExitCritical+0x4c>)
 800f44c:	681b      	ldr	r3, [r3, #0]
 800f44e:	3b01      	subs	r3, #1
 800f450:	4a08      	ldr	r2, [pc, #32]	; (800f474 <vPortExitCritical+0x4c>)
 800f452:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800f454:	4b07      	ldr	r3, [pc, #28]	; (800f474 <vPortExitCritical+0x4c>)
 800f456:	681b      	ldr	r3, [r3, #0]
 800f458:	2b00      	cmp	r3, #0
 800f45a:	d104      	bne.n	800f466 <vPortExitCritical+0x3e>
 800f45c:	2300      	movs	r3, #0
 800f45e:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800f460:	683b      	ldr	r3, [r7, #0]
 800f462:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 800f466:	bf00      	nop
 800f468:	370c      	adds	r7, #12
 800f46a:	46bd      	mov	sp, r7
 800f46c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f470:	4770      	bx	lr
 800f472:	bf00      	nop
 800f474:	20000020 	.word	0x20000020
	...

0800f480 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800f480:	f3ef 8009 	mrs	r0, PSP
 800f484:	f3bf 8f6f 	isb	sy
 800f488:	4b15      	ldr	r3, [pc, #84]	; (800f4e0 <pxCurrentTCBConst>)
 800f48a:	681a      	ldr	r2, [r3, #0]
 800f48c:	f01e 0f10 	tst.w	lr, #16
 800f490:	bf08      	it	eq
 800f492:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800f496:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f49a:	6010      	str	r0, [r2, #0]
 800f49c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800f4a0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800f4a4:	f380 8811 	msr	BASEPRI, r0
 800f4a8:	f3bf 8f4f 	dsb	sy
 800f4ac:	f3bf 8f6f 	isb	sy
 800f4b0:	f001 ffb2 	bl	8011418 <vTaskSwitchContext>
 800f4b4:	f04f 0000 	mov.w	r0, #0
 800f4b8:	f380 8811 	msr	BASEPRI, r0
 800f4bc:	bc09      	pop	{r0, r3}
 800f4be:	6819      	ldr	r1, [r3, #0]
 800f4c0:	6808      	ldr	r0, [r1, #0]
 800f4c2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f4c6:	f01e 0f10 	tst.w	lr, #16
 800f4ca:	bf08      	it	eq
 800f4cc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800f4d0:	f380 8809 	msr	PSP, r0
 800f4d4:	f3bf 8f6f 	isb	sy
 800f4d8:	4770      	bx	lr
 800f4da:	bf00      	nop
 800f4dc:	f3af 8000 	nop.w

0800f4e0 <pxCurrentTCBConst>:
 800f4e0:	20007148 	.word	0x20007148
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800f4e4:	bf00      	nop
 800f4e6:	bf00      	nop

0800f4e8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800f4e8:	b580      	push	{r7, lr}
 800f4ea:	b082      	sub	sp, #8
 800f4ec:	af00      	add	r7, sp, #0
	__asm volatile
 800f4ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f4f2:	f383 8811 	msr	BASEPRI, r3
 800f4f6:	f3bf 8f6f 	isb	sy
 800f4fa:	f3bf 8f4f 	dsb	sy
 800f4fe:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800f500:	f001 fed2 	bl	80112a8 <xTaskIncrementTick>
 800f504:	4603      	mov	r3, r0
 800f506:	2b00      	cmp	r3, #0
 800f508:	d003      	beq.n	800f512 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800f50a:	4b06      	ldr	r3, [pc, #24]	; (800f524 <SysTick_Handler+0x3c>)
 800f50c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f510:	601a      	str	r2, [r3, #0]
 800f512:	2300      	movs	r3, #0
 800f514:	603b      	str	r3, [r7, #0]
	__asm volatile
 800f516:	683b      	ldr	r3, [r7, #0]
 800f518:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800f51c:	bf00      	nop
 800f51e:	3708      	adds	r7, #8
 800f520:	46bd      	mov	sp, r7
 800f522:	bd80      	pop	{r7, pc}
 800f524:	e000ed04 	.word	0xe000ed04

0800f528 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800f528:	b480      	push	{r7}
 800f52a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800f52c:	4b0b      	ldr	r3, [pc, #44]	; (800f55c <vPortSetupTimerInterrupt+0x34>)
 800f52e:	2200      	movs	r2, #0
 800f530:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800f532:	4b0b      	ldr	r3, [pc, #44]	; (800f560 <vPortSetupTimerInterrupt+0x38>)
 800f534:	2200      	movs	r2, #0
 800f536:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800f538:	4b0a      	ldr	r3, [pc, #40]	; (800f564 <vPortSetupTimerInterrupt+0x3c>)
 800f53a:	681b      	ldr	r3, [r3, #0]
 800f53c:	4a0a      	ldr	r2, [pc, #40]	; (800f568 <vPortSetupTimerInterrupt+0x40>)
 800f53e:	fba2 2303 	umull	r2, r3, r2, r3
 800f542:	099b      	lsrs	r3, r3, #6
 800f544:	4a09      	ldr	r2, [pc, #36]	; (800f56c <vPortSetupTimerInterrupt+0x44>)
 800f546:	3b01      	subs	r3, #1
 800f548:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800f54a:	4b04      	ldr	r3, [pc, #16]	; (800f55c <vPortSetupTimerInterrupt+0x34>)
 800f54c:	2207      	movs	r2, #7
 800f54e:	601a      	str	r2, [r3, #0]
}
 800f550:	bf00      	nop
 800f552:	46bd      	mov	sp, r7
 800f554:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f558:	4770      	bx	lr
 800f55a:	bf00      	nop
 800f55c:	e000e010 	.word	0xe000e010
 800f560:	e000e018 	.word	0xe000e018
 800f564:	20000014 	.word	0x20000014
 800f568:	10624dd3 	.word	0x10624dd3
 800f56c:	e000e014 	.word	0xe000e014

0800f570 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800f570:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800f580 <vPortEnableVFP+0x10>
 800f574:	6801      	ldr	r1, [r0, #0]
 800f576:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800f57a:	6001      	str	r1, [r0, #0]
 800f57c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800f57e:	bf00      	nop
 800f580:	e000ed88 	.word	0xe000ed88

0800f584 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800f584:	b480      	push	{r7}
 800f586:	b085      	sub	sp, #20
 800f588:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800f58a:	f3ef 8305 	mrs	r3, IPSR
 800f58e:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800f590:	68fb      	ldr	r3, [r7, #12]
 800f592:	2b0f      	cmp	r3, #15
 800f594:	d913      	bls.n	800f5be <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800f596:	4a16      	ldr	r2, [pc, #88]	; (800f5f0 <vPortValidateInterruptPriority+0x6c>)
 800f598:	68fb      	ldr	r3, [r7, #12]
 800f59a:	4413      	add	r3, r2
 800f59c:	781b      	ldrb	r3, [r3, #0]
 800f59e:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800f5a0:	4b14      	ldr	r3, [pc, #80]	; (800f5f4 <vPortValidateInterruptPriority+0x70>)
 800f5a2:	781b      	ldrb	r3, [r3, #0]
 800f5a4:	7afa      	ldrb	r2, [r7, #11]
 800f5a6:	429a      	cmp	r2, r3
 800f5a8:	d209      	bcs.n	800f5be <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 800f5aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f5ae:	f383 8811 	msr	BASEPRI, r3
 800f5b2:	f3bf 8f6f 	isb	sy
 800f5b6:	f3bf 8f4f 	dsb	sy
 800f5ba:	607b      	str	r3, [r7, #4]
 800f5bc:	e7fe      	b.n	800f5bc <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800f5be:	4b0e      	ldr	r3, [pc, #56]	; (800f5f8 <vPortValidateInterruptPriority+0x74>)
 800f5c0:	681b      	ldr	r3, [r3, #0]
 800f5c2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800f5c6:	4b0d      	ldr	r3, [pc, #52]	; (800f5fc <vPortValidateInterruptPriority+0x78>)
 800f5c8:	681b      	ldr	r3, [r3, #0]
 800f5ca:	429a      	cmp	r2, r3
 800f5cc:	d909      	bls.n	800f5e2 <vPortValidateInterruptPriority+0x5e>
 800f5ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f5d2:	f383 8811 	msr	BASEPRI, r3
 800f5d6:	f3bf 8f6f 	isb	sy
 800f5da:	f3bf 8f4f 	dsb	sy
 800f5de:	603b      	str	r3, [r7, #0]
 800f5e0:	e7fe      	b.n	800f5e0 <vPortValidateInterruptPriority+0x5c>
	}
 800f5e2:	bf00      	nop
 800f5e4:	3714      	adds	r7, #20
 800f5e6:	46bd      	mov	sp, r7
 800f5e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5ec:	4770      	bx	lr
 800f5ee:	bf00      	nop
 800f5f0:	e000e3f0 	.word	0xe000e3f0
 800f5f4:	20001b38 	.word	0x20001b38
 800f5f8:	e000ed0c 	.word	0xe000ed0c
 800f5fc:	20001b3c 	.word	0x20001b3c

0800f600 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800f600:	b580      	push	{r7, lr}
 800f602:	b08a      	sub	sp, #40	; 0x28
 800f604:	af00      	add	r7, sp, #0
 800f606:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800f608:	2300      	movs	r3, #0
 800f60a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800f60c:	f001 fd5a 	bl	80110c4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800f610:	4b57      	ldr	r3, [pc, #348]	; (800f770 <pvPortMalloc+0x170>)
 800f612:	681b      	ldr	r3, [r3, #0]
 800f614:	2b00      	cmp	r3, #0
 800f616:	d101      	bne.n	800f61c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800f618:	f000 f90c 	bl	800f834 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800f61c:	4b55      	ldr	r3, [pc, #340]	; (800f774 <pvPortMalloc+0x174>)
 800f61e:	681a      	ldr	r2, [r3, #0]
 800f620:	687b      	ldr	r3, [r7, #4]
 800f622:	4013      	ands	r3, r2
 800f624:	2b00      	cmp	r3, #0
 800f626:	f040 808c 	bne.w	800f742 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800f62a:	687b      	ldr	r3, [r7, #4]
 800f62c:	2b00      	cmp	r3, #0
 800f62e:	d01c      	beq.n	800f66a <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 800f630:	2208      	movs	r2, #8
 800f632:	687b      	ldr	r3, [r7, #4]
 800f634:	4413      	add	r3, r2
 800f636:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800f638:	687b      	ldr	r3, [r7, #4]
 800f63a:	f003 0307 	and.w	r3, r3, #7
 800f63e:	2b00      	cmp	r3, #0
 800f640:	d013      	beq.n	800f66a <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800f642:	687b      	ldr	r3, [r7, #4]
 800f644:	f023 0307 	bic.w	r3, r3, #7
 800f648:	3308      	adds	r3, #8
 800f64a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800f64c:	687b      	ldr	r3, [r7, #4]
 800f64e:	f003 0307 	and.w	r3, r3, #7
 800f652:	2b00      	cmp	r3, #0
 800f654:	d009      	beq.n	800f66a <pvPortMalloc+0x6a>
 800f656:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f65a:	f383 8811 	msr	BASEPRI, r3
 800f65e:	f3bf 8f6f 	isb	sy
 800f662:	f3bf 8f4f 	dsb	sy
 800f666:	617b      	str	r3, [r7, #20]
 800f668:	e7fe      	b.n	800f668 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800f66a:	687b      	ldr	r3, [r7, #4]
 800f66c:	2b00      	cmp	r3, #0
 800f66e:	d068      	beq.n	800f742 <pvPortMalloc+0x142>
 800f670:	4b41      	ldr	r3, [pc, #260]	; (800f778 <pvPortMalloc+0x178>)
 800f672:	681b      	ldr	r3, [r3, #0]
 800f674:	687a      	ldr	r2, [r7, #4]
 800f676:	429a      	cmp	r2, r3
 800f678:	d863      	bhi.n	800f742 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800f67a:	4b40      	ldr	r3, [pc, #256]	; (800f77c <pvPortMalloc+0x17c>)
 800f67c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800f67e:	4b3f      	ldr	r3, [pc, #252]	; (800f77c <pvPortMalloc+0x17c>)
 800f680:	681b      	ldr	r3, [r3, #0]
 800f682:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800f684:	e004      	b.n	800f690 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 800f686:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f688:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800f68a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f68c:	681b      	ldr	r3, [r3, #0]
 800f68e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800f690:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f692:	685b      	ldr	r3, [r3, #4]
 800f694:	687a      	ldr	r2, [r7, #4]
 800f696:	429a      	cmp	r2, r3
 800f698:	d903      	bls.n	800f6a2 <pvPortMalloc+0xa2>
 800f69a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f69c:	681b      	ldr	r3, [r3, #0]
 800f69e:	2b00      	cmp	r3, #0
 800f6a0:	d1f1      	bne.n	800f686 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800f6a2:	4b33      	ldr	r3, [pc, #204]	; (800f770 <pvPortMalloc+0x170>)
 800f6a4:	681b      	ldr	r3, [r3, #0]
 800f6a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f6a8:	429a      	cmp	r2, r3
 800f6aa:	d04a      	beq.n	800f742 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800f6ac:	6a3b      	ldr	r3, [r7, #32]
 800f6ae:	681b      	ldr	r3, [r3, #0]
 800f6b0:	2208      	movs	r2, #8
 800f6b2:	4413      	add	r3, r2
 800f6b4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800f6b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f6b8:	681a      	ldr	r2, [r3, #0]
 800f6ba:	6a3b      	ldr	r3, [r7, #32]
 800f6bc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800f6be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f6c0:	685a      	ldr	r2, [r3, #4]
 800f6c2:	687b      	ldr	r3, [r7, #4]
 800f6c4:	1ad2      	subs	r2, r2, r3
 800f6c6:	2308      	movs	r3, #8
 800f6c8:	005b      	lsls	r3, r3, #1
 800f6ca:	429a      	cmp	r2, r3
 800f6cc:	d91e      	bls.n	800f70c <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800f6ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f6d0:	687b      	ldr	r3, [r7, #4]
 800f6d2:	4413      	add	r3, r2
 800f6d4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800f6d6:	69bb      	ldr	r3, [r7, #24]
 800f6d8:	f003 0307 	and.w	r3, r3, #7
 800f6dc:	2b00      	cmp	r3, #0
 800f6de:	d009      	beq.n	800f6f4 <pvPortMalloc+0xf4>
 800f6e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f6e4:	f383 8811 	msr	BASEPRI, r3
 800f6e8:	f3bf 8f6f 	isb	sy
 800f6ec:	f3bf 8f4f 	dsb	sy
 800f6f0:	613b      	str	r3, [r7, #16]
 800f6f2:	e7fe      	b.n	800f6f2 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800f6f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f6f6:	685a      	ldr	r2, [r3, #4]
 800f6f8:	687b      	ldr	r3, [r7, #4]
 800f6fa:	1ad2      	subs	r2, r2, r3
 800f6fc:	69bb      	ldr	r3, [r7, #24]
 800f6fe:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800f700:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f702:	687a      	ldr	r2, [r7, #4]
 800f704:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800f706:	69b8      	ldr	r0, [r7, #24]
 800f708:	f000 f8f6 	bl	800f8f8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800f70c:	4b1a      	ldr	r3, [pc, #104]	; (800f778 <pvPortMalloc+0x178>)
 800f70e:	681a      	ldr	r2, [r3, #0]
 800f710:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f712:	685b      	ldr	r3, [r3, #4]
 800f714:	1ad3      	subs	r3, r2, r3
 800f716:	4a18      	ldr	r2, [pc, #96]	; (800f778 <pvPortMalloc+0x178>)
 800f718:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800f71a:	4b17      	ldr	r3, [pc, #92]	; (800f778 <pvPortMalloc+0x178>)
 800f71c:	681a      	ldr	r2, [r3, #0]
 800f71e:	4b18      	ldr	r3, [pc, #96]	; (800f780 <pvPortMalloc+0x180>)
 800f720:	681b      	ldr	r3, [r3, #0]
 800f722:	429a      	cmp	r2, r3
 800f724:	d203      	bcs.n	800f72e <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800f726:	4b14      	ldr	r3, [pc, #80]	; (800f778 <pvPortMalloc+0x178>)
 800f728:	681b      	ldr	r3, [r3, #0]
 800f72a:	4a15      	ldr	r2, [pc, #84]	; (800f780 <pvPortMalloc+0x180>)
 800f72c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800f72e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f730:	685a      	ldr	r2, [r3, #4]
 800f732:	4b10      	ldr	r3, [pc, #64]	; (800f774 <pvPortMalloc+0x174>)
 800f734:	681b      	ldr	r3, [r3, #0]
 800f736:	431a      	orrs	r2, r3
 800f738:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f73a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800f73c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f73e:	2200      	movs	r2, #0
 800f740:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800f742:	f001 fd05 	bl	8011150 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800f746:	69fb      	ldr	r3, [r7, #28]
 800f748:	f003 0307 	and.w	r3, r3, #7
 800f74c:	2b00      	cmp	r3, #0
 800f74e:	d009      	beq.n	800f764 <pvPortMalloc+0x164>
 800f750:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f754:	f383 8811 	msr	BASEPRI, r3
 800f758:	f3bf 8f6f 	isb	sy
 800f75c:	f3bf 8f4f 	dsb	sy
 800f760:	60fb      	str	r3, [r7, #12]
 800f762:	e7fe      	b.n	800f762 <pvPortMalloc+0x162>
	return pvReturn;
 800f764:	69fb      	ldr	r3, [r7, #28]
}
 800f766:	4618      	mov	r0, r3
 800f768:	3728      	adds	r7, #40	; 0x28
 800f76a:	46bd      	mov	sp, r7
 800f76c:	bd80      	pop	{r7, pc}
 800f76e:	bf00      	nop
 800f770:	20007138 	.word	0x20007138
 800f774:	20007144 	.word	0x20007144
 800f778:	2000713c 	.word	0x2000713c
 800f77c:	20007130 	.word	0x20007130
 800f780:	20007140 	.word	0x20007140

0800f784 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800f784:	b580      	push	{r7, lr}
 800f786:	b086      	sub	sp, #24
 800f788:	af00      	add	r7, sp, #0
 800f78a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800f78c:	687b      	ldr	r3, [r7, #4]
 800f78e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800f790:	687b      	ldr	r3, [r7, #4]
 800f792:	2b00      	cmp	r3, #0
 800f794:	d046      	beq.n	800f824 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800f796:	2308      	movs	r3, #8
 800f798:	425b      	negs	r3, r3
 800f79a:	697a      	ldr	r2, [r7, #20]
 800f79c:	4413      	add	r3, r2
 800f79e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800f7a0:	697b      	ldr	r3, [r7, #20]
 800f7a2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800f7a4:	693b      	ldr	r3, [r7, #16]
 800f7a6:	685a      	ldr	r2, [r3, #4]
 800f7a8:	4b20      	ldr	r3, [pc, #128]	; (800f82c <vPortFree+0xa8>)
 800f7aa:	681b      	ldr	r3, [r3, #0]
 800f7ac:	4013      	ands	r3, r2
 800f7ae:	2b00      	cmp	r3, #0
 800f7b0:	d109      	bne.n	800f7c6 <vPortFree+0x42>
 800f7b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f7b6:	f383 8811 	msr	BASEPRI, r3
 800f7ba:	f3bf 8f6f 	isb	sy
 800f7be:	f3bf 8f4f 	dsb	sy
 800f7c2:	60fb      	str	r3, [r7, #12]
 800f7c4:	e7fe      	b.n	800f7c4 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800f7c6:	693b      	ldr	r3, [r7, #16]
 800f7c8:	681b      	ldr	r3, [r3, #0]
 800f7ca:	2b00      	cmp	r3, #0
 800f7cc:	d009      	beq.n	800f7e2 <vPortFree+0x5e>
 800f7ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f7d2:	f383 8811 	msr	BASEPRI, r3
 800f7d6:	f3bf 8f6f 	isb	sy
 800f7da:	f3bf 8f4f 	dsb	sy
 800f7de:	60bb      	str	r3, [r7, #8]
 800f7e0:	e7fe      	b.n	800f7e0 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800f7e2:	693b      	ldr	r3, [r7, #16]
 800f7e4:	685a      	ldr	r2, [r3, #4]
 800f7e6:	4b11      	ldr	r3, [pc, #68]	; (800f82c <vPortFree+0xa8>)
 800f7e8:	681b      	ldr	r3, [r3, #0]
 800f7ea:	4013      	ands	r3, r2
 800f7ec:	2b00      	cmp	r3, #0
 800f7ee:	d019      	beq.n	800f824 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800f7f0:	693b      	ldr	r3, [r7, #16]
 800f7f2:	681b      	ldr	r3, [r3, #0]
 800f7f4:	2b00      	cmp	r3, #0
 800f7f6:	d115      	bne.n	800f824 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800f7f8:	693b      	ldr	r3, [r7, #16]
 800f7fa:	685a      	ldr	r2, [r3, #4]
 800f7fc:	4b0b      	ldr	r3, [pc, #44]	; (800f82c <vPortFree+0xa8>)
 800f7fe:	681b      	ldr	r3, [r3, #0]
 800f800:	43db      	mvns	r3, r3
 800f802:	401a      	ands	r2, r3
 800f804:	693b      	ldr	r3, [r7, #16]
 800f806:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800f808:	f001 fc5c 	bl	80110c4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800f80c:	693b      	ldr	r3, [r7, #16]
 800f80e:	685a      	ldr	r2, [r3, #4]
 800f810:	4b07      	ldr	r3, [pc, #28]	; (800f830 <vPortFree+0xac>)
 800f812:	681b      	ldr	r3, [r3, #0]
 800f814:	4413      	add	r3, r2
 800f816:	4a06      	ldr	r2, [pc, #24]	; (800f830 <vPortFree+0xac>)
 800f818:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800f81a:	6938      	ldr	r0, [r7, #16]
 800f81c:	f000 f86c 	bl	800f8f8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800f820:	f001 fc96 	bl	8011150 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800f824:	bf00      	nop
 800f826:	3718      	adds	r7, #24
 800f828:	46bd      	mov	sp, r7
 800f82a:	bd80      	pop	{r7, pc}
 800f82c:	20007144 	.word	0x20007144
 800f830:	2000713c 	.word	0x2000713c

0800f834 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800f834:	b480      	push	{r7}
 800f836:	b085      	sub	sp, #20
 800f838:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800f83a:	f245 53f0 	movw	r3, #22000	; 0x55f0
 800f83e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800f840:	4b27      	ldr	r3, [pc, #156]	; (800f8e0 <prvHeapInit+0xac>)
 800f842:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800f844:	68fb      	ldr	r3, [r7, #12]
 800f846:	f003 0307 	and.w	r3, r3, #7
 800f84a:	2b00      	cmp	r3, #0
 800f84c:	d00c      	beq.n	800f868 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800f84e:	68fb      	ldr	r3, [r7, #12]
 800f850:	3307      	adds	r3, #7
 800f852:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800f854:	68fb      	ldr	r3, [r7, #12]
 800f856:	f023 0307 	bic.w	r3, r3, #7
 800f85a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800f85c:	68ba      	ldr	r2, [r7, #8]
 800f85e:	68fb      	ldr	r3, [r7, #12]
 800f860:	1ad3      	subs	r3, r2, r3
 800f862:	4a1f      	ldr	r2, [pc, #124]	; (800f8e0 <prvHeapInit+0xac>)
 800f864:	4413      	add	r3, r2
 800f866:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800f868:	68fb      	ldr	r3, [r7, #12]
 800f86a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800f86c:	4a1d      	ldr	r2, [pc, #116]	; (800f8e4 <prvHeapInit+0xb0>)
 800f86e:	687b      	ldr	r3, [r7, #4]
 800f870:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800f872:	4b1c      	ldr	r3, [pc, #112]	; (800f8e4 <prvHeapInit+0xb0>)
 800f874:	2200      	movs	r2, #0
 800f876:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800f878:	687b      	ldr	r3, [r7, #4]
 800f87a:	68ba      	ldr	r2, [r7, #8]
 800f87c:	4413      	add	r3, r2
 800f87e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800f880:	2208      	movs	r2, #8
 800f882:	68fb      	ldr	r3, [r7, #12]
 800f884:	1a9b      	subs	r3, r3, r2
 800f886:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800f888:	68fb      	ldr	r3, [r7, #12]
 800f88a:	f023 0307 	bic.w	r3, r3, #7
 800f88e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800f890:	68fb      	ldr	r3, [r7, #12]
 800f892:	4a15      	ldr	r2, [pc, #84]	; (800f8e8 <prvHeapInit+0xb4>)
 800f894:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800f896:	4b14      	ldr	r3, [pc, #80]	; (800f8e8 <prvHeapInit+0xb4>)
 800f898:	681b      	ldr	r3, [r3, #0]
 800f89a:	2200      	movs	r2, #0
 800f89c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800f89e:	4b12      	ldr	r3, [pc, #72]	; (800f8e8 <prvHeapInit+0xb4>)
 800f8a0:	681b      	ldr	r3, [r3, #0]
 800f8a2:	2200      	movs	r2, #0
 800f8a4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800f8a6:	687b      	ldr	r3, [r7, #4]
 800f8a8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800f8aa:	683b      	ldr	r3, [r7, #0]
 800f8ac:	68fa      	ldr	r2, [r7, #12]
 800f8ae:	1ad2      	subs	r2, r2, r3
 800f8b0:	683b      	ldr	r3, [r7, #0]
 800f8b2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800f8b4:	4b0c      	ldr	r3, [pc, #48]	; (800f8e8 <prvHeapInit+0xb4>)
 800f8b6:	681a      	ldr	r2, [r3, #0]
 800f8b8:	683b      	ldr	r3, [r7, #0]
 800f8ba:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800f8bc:	683b      	ldr	r3, [r7, #0]
 800f8be:	685b      	ldr	r3, [r3, #4]
 800f8c0:	4a0a      	ldr	r2, [pc, #40]	; (800f8ec <prvHeapInit+0xb8>)
 800f8c2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800f8c4:	683b      	ldr	r3, [r7, #0]
 800f8c6:	685b      	ldr	r3, [r3, #4]
 800f8c8:	4a09      	ldr	r2, [pc, #36]	; (800f8f0 <prvHeapInit+0xbc>)
 800f8ca:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800f8cc:	4b09      	ldr	r3, [pc, #36]	; (800f8f4 <prvHeapInit+0xc0>)
 800f8ce:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800f8d2:	601a      	str	r2, [r3, #0]
}
 800f8d4:	bf00      	nop
 800f8d6:	3714      	adds	r7, #20
 800f8d8:	46bd      	mov	sp, r7
 800f8da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8de:	4770      	bx	lr
 800f8e0:	20001b40 	.word	0x20001b40
 800f8e4:	20007130 	.word	0x20007130
 800f8e8:	20007138 	.word	0x20007138
 800f8ec:	20007140 	.word	0x20007140
 800f8f0:	2000713c 	.word	0x2000713c
 800f8f4:	20007144 	.word	0x20007144

0800f8f8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800f8f8:	b480      	push	{r7}
 800f8fa:	b085      	sub	sp, #20
 800f8fc:	af00      	add	r7, sp, #0
 800f8fe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800f900:	4b28      	ldr	r3, [pc, #160]	; (800f9a4 <prvInsertBlockIntoFreeList+0xac>)
 800f902:	60fb      	str	r3, [r7, #12]
 800f904:	e002      	b.n	800f90c <prvInsertBlockIntoFreeList+0x14>
 800f906:	68fb      	ldr	r3, [r7, #12]
 800f908:	681b      	ldr	r3, [r3, #0]
 800f90a:	60fb      	str	r3, [r7, #12]
 800f90c:	68fb      	ldr	r3, [r7, #12]
 800f90e:	681b      	ldr	r3, [r3, #0]
 800f910:	687a      	ldr	r2, [r7, #4]
 800f912:	429a      	cmp	r2, r3
 800f914:	d8f7      	bhi.n	800f906 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800f916:	68fb      	ldr	r3, [r7, #12]
 800f918:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800f91a:	68fb      	ldr	r3, [r7, #12]
 800f91c:	685b      	ldr	r3, [r3, #4]
 800f91e:	68ba      	ldr	r2, [r7, #8]
 800f920:	4413      	add	r3, r2
 800f922:	687a      	ldr	r2, [r7, #4]
 800f924:	429a      	cmp	r2, r3
 800f926:	d108      	bne.n	800f93a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800f928:	68fb      	ldr	r3, [r7, #12]
 800f92a:	685a      	ldr	r2, [r3, #4]
 800f92c:	687b      	ldr	r3, [r7, #4]
 800f92e:	685b      	ldr	r3, [r3, #4]
 800f930:	441a      	add	r2, r3
 800f932:	68fb      	ldr	r3, [r7, #12]
 800f934:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800f936:	68fb      	ldr	r3, [r7, #12]
 800f938:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800f93a:	687b      	ldr	r3, [r7, #4]
 800f93c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800f93e:	687b      	ldr	r3, [r7, #4]
 800f940:	685b      	ldr	r3, [r3, #4]
 800f942:	68ba      	ldr	r2, [r7, #8]
 800f944:	441a      	add	r2, r3
 800f946:	68fb      	ldr	r3, [r7, #12]
 800f948:	681b      	ldr	r3, [r3, #0]
 800f94a:	429a      	cmp	r2, r3
 800f94c:	d118      	bne.n	800f980 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800f94e:	68fb      	ldr	r3, [r7, #12]
 800f950:	681a      	ldr	r2, [r3, #0]
 800f952:	4b15      	ldr	r3, [pc, #84]	; (800f9a8 <prvInsertBlockIntoFreeList+0xb0>)
 800f954:	681b      	ldr	r3, [r3, #0]
 800f956:	429a      	cmp	r2, r3
 800f958:	d00d      	beq.n	800f976 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800f95a:	687b      	ldr	r3, [r7, #4]
 800f95c:	685a      	ldr	r2, [r3, #4]
 800f95e:	68fb      	ldr	r3, [r7, #12]
 800f960:	681b      	ldr	r3, [r3, #0]
 800f962:	685b      	ldr	r3, [r3, #4]
 800f964:	441a      	add	r2, r3
 800f966:	687b      	ldr	r3, [r7, #4]
 800f968:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800f96a:	68fb      	ldr	r3, [r7, #12]
 800f96c:	681b      	ldr	r3, [r3, #0]
 800f96e:	681a      	ldr	r2, [r3, #0]
 800f970:	687b      	ldr	r3, [r7, #4]
 800f972:	601a      	str	r2, [r3, #0]
 800f974:	e008      	b.n	800f988 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800f976:	4b0c      	ldr	r3, [pc, #48]	; (800f9a8 <prvInsertBlockIntoFreeList+0xb0>)
 800f978:	681a      	ldr	r2, [r3, #0]
 800f97a:	687b      	ldr	r3, [r7, #4]
 800f97c:	601a      	str	r2, [r3, #0]
 800f97e:	e003      	b.n	800f988 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800f980:	68fb      	ldr	r3, [r7, #12]
 800f982:	681a      	ldr	r2, [r3, #0]
 800f984:	687b      	ldr	r3, [r7, #4]
 800f986:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800f988:	68fa      	ldr	r2, [r7, #12]
 800f98a:	687b      	ldr	r3, [r7, #4]
 800f98c:	429a      	cmp	r2, r3
 800f98e:	d002      	beq.n	800f996 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800f990:	68fb      	ldr	r3, [r7, #12]
 800f992:	687a      	ldr	r2, [r7, #4]
 800f994:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800f996:	bf00      	nop
 800f998:	3714      	adds	r7, #20
 800f99a:	46bd      	mov	sp, r7
 800f99c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9a0:	4770      	bx	lr
 800f9a2:	bf00      	nop
 800f9a4:	20007130 	.word	0x20007130
 800f9a8:	20007138 	.word	0x20007138

0800f9ac <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800f9ac:	b480      	push	{r7}
 800f9ae:	b083      	sub	sp, #12
 800f9b0:	af00      	add	r7, sp, #0
 800f9b2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800f9b4:	687b      	ldr	r3, [r7, #4]
 800f9b6:	f103 0208 	add.w	r2, r3, #8
 800f9ba:	687b      	ldr	r3, [r7, #4]
 800f9bc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800f9be:	687b      	ldr	r3, [r7, #4]
 800f9c0:	f04f 32ff 	mov.w	r2, #4294967295
 800f9c4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800f9c6:	687b      	ldr	r3, [r7, #4]
 800f9c8:	f103 0208 	add.w	r2, r3, #8
 800f9cc:	687b      	ldr	r3, [r7, #4]
 800f9ce:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800f9d0:	687b      	ldr	r3, [r7, #4]
 800f9d2:	f103 0208 	add.w	r2, r3, #8
 800f9d6:	687b      	ldr	r3, [r7, #4]
 800f9d8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800f9da:	687b      	ldr	r3, [r7, #4]
 800f9dc:	2200      	movs	r2, #0
 800f9de:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800f9e0:	bf00      	nop
 800f9e2:	370c      	adds	r7, #12
 800f9e4:	46bd      	mov	sp, r7
 800f9e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9ea:	4770      	bx	lr

0800f9ec <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800f9ec:	b480      	push	{r7}
 800f9ee:	b083      	sub	sp, #12
 800f9f0:	af00      	add	r7, sp, #0
 800f9f2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800f9f4:	687b      	ldr	r3, [r7, #4]
 800f9f6:	2200      	movs	r2, #0
 800f9f8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800f9fa:	bf00      	nop
 800f9fc:	370c      	adds	r7, #12
 800f9fe:	46bd      	mov	sp, r7
 800fa00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa04:	4770      	bx	lr

0800fa06 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800fa06:	b480      	push	{r7}
 800fa08:	b085      	sub	sp, #20
 800fa0a:	af00      	add	r7, sp, #0
 800fa0c:	6078      	str	r0, [r7, #4]
 800fa0e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800fa10:	687b      	ldr	r3, [r7, #4]
 800fa12:	685b      	ldr	r3, [r3, #4]
 800fa14:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800fa16:	683b      	ldr	r3, [r7, #0]
 800fa18:	68fa      	ldr	r2, [r7, #12]
 800fa1a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800fa1c:	68fb      	ldr	r3, [r7, #12]
 800fa1e:	689a      	ldr	r2, [r3, #8]
 800fa20:	683b      	ldr	r3, [r7, #0]
 800fa22:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800fa24:	68fb      	ldr	r3, [r7, #12]
 800fa26:	689b      	ldr	r3, [r3, #8]
 800fa28:	683a      	ldr	r2, [r7, #0]
 800fa2a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800fa2c:	68fb      	ldr	r3, [r7, #12]
 800fa2e:	683a      	ldr	r2, [r7, #0]
 800fa30:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800fa32:	683b      	ldr	r3, [r7, #0]
 800fa34:	687a      	ldr	r2, [r7, #4]
 800fa36:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800fa38:	687b      	ldr	r3, [r7, #4]
 800fa3a:	681b      	ldr	r3, [r3, #0]
 800fa3c:	1c5a      	adds	r2, r3, #1
 800fa3e:	687b      	ldr	r3, [r7, #4]
 800fa40:	601a      	str	r2, [r3, #0]
}
 800fa42:	bf00      	nop
 800fa44:	3714      	adds	r7, #20
 800fa46:	46bd      	mov	sp, r7
 800fa48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa4c:	4770      	bx	lr

0800fa4e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800fa4e:	b480      	push	{r7}
 800fa50:	b085      	sub	sp, #20
 800fa52:	af00      	add	r7, sp, #0
 800fa54:	6078      	str	r0, [r7, #4]
 800fa56:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800fa58:	683b      	ldr	r3, [r7, #0]
 800fa5a:	681b      	ldr	r3, [r3, #0]
 800fa5c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800fa5e:	68bb      	ldr	r3, [r7, #8]
 800fa60:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fa64:	d103      	bne.n	800fa6e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800fa66:	687b      	ldr	r3, [r7, #4]
 800fa68:	691b      	ldr	r3, [r3, #16]
 800fa6a:	60fb      	str	r3, [r7, #12]
 800fa6c:	e00c      	b.n	800fa88 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800fa6e:	687b      	ldr	r3, [r7, #4]
 800fa70:	3308      	adds	r3, #8
 800fa72:	60fb      	str	r3, [r7, #12]
 800fa74:	e002      	b.n	800fa7c <vListInsert+0x2e>
 800fa76:	68fb      	ldr	r3, [r7, #12]
 800fa78:	685b      	ldr	r3, [r3, #4]
 800fa7a:	60fb      	str	r3, [r7, #12]
 800fa7c:	68fb      	ldr	r3, [r7, #12]
 800fa7e:	685b      	ldr	r3, [r3, #4]
 800fa80:	681b      	ldr	r3, [r3, #0]
 800fa82:	68ba      	ldr	r2, [r7, #8]
 800fa84:	429a      	cmp	r2, r3
 800fa86:	d2f6      	bcs.n	800fa76 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800fa88:	68fb      	ldr	r3, [r7, #12]
 800fa8a:	685a      	ldr	r2, [r3, #4]
 800fa8c:	683b      	ldr	r3, [r7, #0]
 800fa8e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800fa90:	683b      	ldr	r3, [r7, #0]
 800fa92:	685b      	ldr	r3, [r3, #4]
 800fa94:	683a      	ldr	r2, [r7, #0]
 800fa96:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800fa98:	683b      	ldr	r3, [r7, #0]
 800fa9a:	68fa      	ldr	r2, [r7, #12]
 800fa9c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800fa9e:	68fb      	ldr	r3, [r7, #12]
 800faa0:	683a      	ldr	r2, [r7, #0]
 800faa2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800faa4:	683b      	ldr	r3, [r7, #0]
 800faa6:	687a      	ldr	r2, [r7, #4]
 800faa8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800faaa:	687b      	ldr	r3, [r7, #4]
 800faac:	681b      	ldr	r3, [r3, #0]
 800faae:	1c5a      	adds	r2, r3, #1
 800fab0:	687b      	ldr	r3, [r7, #4]
 800fab2:	601a      	str	r2, [r3, #0]
}
 800fab4:	bf00      	nop
 800fab6:	3714      	adds	r7, #20
 800fab8:	46bd      	mov	sp, r7
 800faba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fabe:	4770      	bx	lr

0800fac0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800fac0:	b480      	push	{r7}
 800fac2:	b085      	sub	sp, #20
 800fac4:	af00      	add	r7, sp, #0
 800fac6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800fac8:	687b      	ldr	r3, [r7, #4]
 800faca:	691b      	ldr	r3, [r3, #16]
 800facc:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800face:	687b      	ldr	r3, [r7, #4]
 800fad0:	685b      	ldr	r3, [r3, #4]
 800fad2:	687a      	ldr	r2, [r7, #4]
 800fad4:	6892      	ldr	r2, [r2, #8]
 800fad6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800fad8:	687b      	ldr	r3, [r7, #4]
 800fada:	689b      	ldr	r3, [r3, #8]
 800fadc:	687a      	ldr	r2, [r7, #4]
 800fade:	6852      	ldr	r2, [r2, #4]
 800fae0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800fae2:	68fb      	ldr	r3, [r7, #12]
 800fae4:	685b      	ldr	r3, [r3, #4]
 800fae6:	687a      	ldr	r2, [r7, #4]
 800fae8:	429a      	cmp	r2, r3
 800faea:	d103      	bne.n	800faf4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800faec:	687b      	ldr	r3, [r7, #4]
 800faee:	689a      	ldr	r2, [r3, #8]
 800faf0:	68fb      	ldr	r3, [r7, #12]
 800faf2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800faf4:	687b      	ldr	r3, [r7, #4]
 800faf6:	2200      	movs	r2, #0
 800faf8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800fafa:	68fb      	ldr	r3, [r7, #12]
 800fafc:	681b      	ldr	r3, [r3, #0]
 800fafe:	1e5a      	subs	r2, r3, #1
 800fb00:	68fb      	ldr	r3, [r7, #12]
 800fb02:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800fb04:	68fb      	ldr	r3, [r7, #12]
 800fb06:	681b      	ldr	r3, [r3, #0]
}
 800fb08:	4618      	mov	r0, r3
 800fb0a:	3714      	adds	r7, #20
 800fb0c:	46bd      	mov	sp, r7
 800fb0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb12:	4770      	bx	lr

0800fb14 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800fb14:	b580      	push	{r7, lr}
 800fb16:	b084      	sub	sp, #16
 800fb18:	af00      	add	r7, sp, #0
 800fb1a:	6078      	str	r0, [r7, #4]
 800fb1c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800fb1e:	687b      	ldr	r3, [r7, #4]
 800fb20:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800fb22:	68fb      	ldr	r3, [r7, #12]
 800fb24:	2b00      	cmp	r3, #0
 800fb26:	d109      	bne.n	800fb3c <xQueueGenericReset+0x28>
 800fb28:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fb2c:	f383 8811 	msr	BASEPRI, r3
 800fb30:	f3bf 8f6f 	isb	sy
 800fb34:	f3bf 8f4f 	dsb	sy
 800fb38:	60bb      	str	r3, [r7, #8]
 800fb3a:	e7fe      	b.n	800fb3a <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 800fb3c:	f7ff fc46 	bl	800f3cc <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800fb40:	68fb      	ldr	r3, [r7, #12]
 800fb42:	681a      	ldr	r2, [r3, #0]
 800fb44:	68fb      	ldr	r3, [r7, #12]
 800fb46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fb48:	68f9      	ldr	r1, [r7, #12]
 800fb4a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800fb4c:	fb01 f303 	mul.w	r3, r1, r3
 800fb50:	441a      	add	r2, r3
 800fb52:	68fb      	ldr	r3, [r7, #12]
 800fb54:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800fb56:	68fb      	ldr	r3, [r7, #12]
 800fb58:	2200      	movs	r2, #0
 800fb5a:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800fb5c:	68fb      	ldr	r3, [r7, #12]
 800fb5e:	681a      	ldr	r2, [r3, #0]
 800fb60:	68fb      	ldr	r3, [r7, #12]
 800fb62:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800fb64:	68fb      	ldr	r3, [r7, #12]
 800fb66:	681a      	ldr	r2, [r3, #0]
 800fb68:	68fb      	ldr	r3, [r7, #12]
 800fb6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fb6c:	3b01      	subs	r3, #1
 800fb6e:	68f9      	ldr	r1, [r7, #12]
 800fb70:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800fb72:	fb01 f303 	mul.w	r3, r1, r3
 800fb76:	441a      	add	r2, r3
 800fb78:	68fb      	ldr	r3, [r7, #12]
 800fb7a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800fb7c:	68fb      	ldr	r3, [r7, #12]
 800fb7e:	22ff      	movs	r2, #255	; 0xff
 800fb80:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800fb84:	68fb      	ldr	r3, [r7, #12]
 800fb86:	22ff      	movs	r2, #255	; 0xff
 800fb88:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800fb8c:	683b      	ldr	r3, [r7, #0]
 800fb8e:	2b00      	cmp	r3, #0
 800fb90:	d114      	bne.n	800fbbc <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800fb92:	68fb      	ldr	r3, [r7, #12]
 800fb94:	691b      	ldr	r3, [r3, #16]
 800fb96:	2b00      	cmp	r3, #0
 800fb98:	d01a      	beq.n	800fbd0 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800fb9a:	68fb      	ldr	r3, [r7, #12]
 800fb9c:	3310      	adds	r3, #16
 800fb9e:	4618      	mov	r0, r3
 800fba0:	f001 fce4 	bl	801156c <xTaskRemoveFromEventList>
 800fba4:	4603      	mov	r3, r0
 800fba6:	2b00      	cmp	r3, #0
 800fba8:	d012      	beq.n	800fbd0 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800fbaa:	4b0d      	ldr	r3, [pc, #52]	; (800fbe0 <xQueueGenericReset+0xcc>)
 800fbac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fbb0:	601a      	str	r2, [r3, #0]
 800fbb2:	f3bf 8f4f 	dsb	sy
 800fbb6:	f3bf 8f6f 	isb	sy
 800fbba:	e009      	b.n	800fbd0 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800fbbc:	68fb      	ldr	r3, [r7, #12]
 800fbbe:	3310      	adds	r3, #16
 800fbc0:	4618      	mov	r0, r3
 800fbc2:	f7ff fef3 	bl	800f9ac <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800fbc6:	68fb      	ldr	r3, [r7, #12]
 800fbc8:	3324      	adds	r3, #36	; 0x24
 800fbca:	4618      	mov	r0, r3
 800fbcc:	f7ff feee 	bl	800f9ac <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800fbd0:	f7ff fc2a 	bl	800f428 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800fbd4:	2301      	movs	r3, #1
}
 800fbd6:	4618      	mov	r0, r3
 800fbd8:	3710      	adds	r7, #16
 800fbda:	46bd      	mov	sp, r7
 800fbdc:	bd80      	pop	{r7, pc}
 800fbde:	bf00      	nop
 800fbe0:	e000ed04 	.word	0xe000ed04

0800fbe4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800fbe4:	b580      	push	{r7, lr}
 800fbe6:	b08e      	sub	sp, #56	; 0x38
 800fbe8:	af02      	add	r7, sp, #8
 800fbea:	60f8      	str	r0, [r7, #12]
 800fbec:	60b9      	str	r1, [r7, #8]
 800fbee:	607a      	str	r2, [r7, #4]
 800fbf0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800fbf2:	68fb      	ldr	r3, [r7, #12]
 800fbf4:	2b00      	cmp	r3, #0
 800fbf6:	d109      	bne.n	800fc0c <xQueueGenericCreateStatic+0x28>
 800fbf8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fbfc:	f383 8811 	msr	BASEPRI, r3
 800fc00:	f3bf 8f6f 	isb	sy
 800fc04:	f3bf 8f4f 	dsb	sy
 800fc08:	62bb      	str	r3, [r7, #40]	; 0x28
 800fc0a:	e7fe      	b.n	800fc0a <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800fc0c:	683b      	ldr	r3, [r7, #0]
 800fc0e:	2b00      	cmp	r3, #0
 800fc10:	d109      	bne.n	800fc26 <xQueueGenericCreateStatic+0x42>
 800fc12:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fc16:	f383 8811 	msr	BASEPRI, r3
 800fc1a:	f3bf 8f6f 	isb	sy
 800fc1e:	f3bf 8f4f 	dsb	sy
 800fc22:	627b      	str	r3, [r7, #36]	; 0x24
 800fc24:	e7fe      	b.n	800fc24 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800fc26:	687b      	ldr	r3, [r7, #4]
 800fc28:	2b00      	cmp	r3, #0
 800fc2a:	d002      	beq.n	800fc32 <xQueueGenericCreateStatic+0x4e>
 800fc2c:	68bb      	ldr	r3, [r7, #8]
 800fc2e:	2b00      	cmp	r3, #0
 800fc30:	d001      	beq.n	800fc36 <xQueueGenericCreateStatic+0x52>
 800fc32:	2301      	movs	r3, #1
 800fc34:	e000      	b.n	800fc38 <xQueueGenericCreateStatic+0x54>
 800fc36:	2300      	movs	r3, #0
 800fc38:	2b00      	cmp	r3, #0
 800fc3a:	d109      	bne.n	800fc50 <xQueueGenericCreateStatic+0x6c>
 800fc3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fc40:	f383 8811 	msr	BASEPRI, r3
 800fc44:	f3bf 8f6f 	isb	sy
 800fc48:	f3bf 8f4f 	dsb	sy
 800fc4c:	623b      	str	r3, [r7, #32]
 800fc4e:	e7fe      	b.n	800fc4e <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800fc50:	687b      	ldr	r3, [r7, #4]
 800fc52:	2b00      	cmp	r3, #0
 800fc54:	d102      	bne.n	800fc5c <xQueueGenericCreateStatic+0x78>
 800fc56:	68bb      	ldr	r3, [r7, #8]
 800fc58:	2b00      	cmp	r3, #0
 800fc5a:	d101      	bne.n	800fc60 <xQueueGenericCreateStatic+0x7c>
 800fc5c:	2301      	movs	r3, #1
 800fc5e:	e000      	b.n	800fc62 <xQueueGenericCreateStatic+0x7e>
 800fc60:	2300      	movs	r3, #0
 800fc62:	2b00      	cmp	r3, #0
 800fc64:	d109      	bne.n	800fc7a <xQueueGenericCreateStatic+0x96>
 800fc66:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fc6a:	f383 8811 	msr	BASEPRI, r3
 800fc6e:	f3bf 8f6f 	isb	sy
 800fc72:	f3bf 8f4f 	dsb	sy
 800fc76:	61fb      	str	r3, [r7, #28]
 800fc78:	e7fe      	b.n	800fc78 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800fc7a:	2350      	movs	r3, #80	; 0x50
 800fc7c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800fc7e:	697b      	ldr	r3, [r7, #20]
 800fc80:	2b50      	cmp	r3, #80	; 0x50
 800fc82:	d009      	beq.n	800fc98 <xQueueGenericCreateStatic+0xb4>
 800fc84:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fc88:	f383 8811 	msr	BASEPRI, r3
 800fc8c:	f3bf 8f6f 	isb	sy
 800fc90:	f3bf 8f4f 	dsb	sy
 800fc94:	61bb      	str	r3, [r7, #24]
 800fc96:	e7fe      	b.n	800fc96 <xQueueGenericCreateStatic+0xb2>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800fc98:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800fc9a:	683b      	ldr	r3, [r7, #0]
 800fc9c:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800fc9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fca0:	2b00      	cmp	r3, #0
 800fca2:	d00d      	beq.n	800fcc0 <xQueueGenericCreateStatic+0xdc>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800fca4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fca6:	2201      	movs	r2, #1
 800fca8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800fcac:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800fcb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fcb2:	9300      	str	r3, [sp, #0]
 800fcb4:	4613      	mov	r3, r2
 800fcb6:	687a      	ldr	r2, [r7, #4]
 800fcb8:	68b9      	ldr	r1, [r7, #8]
 800fcba:	68f8      	ldr	r0, [r7, #12]
 800fcbc:	f000 f844 	bl	800fd48 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800fcc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800fcc2:	4618      	mov	r0, r3
 800fcc4:	3730      	adds	r7, #48	; 0x30
 800fcc6:	46bd      	mov	sp, r7
 800fcc8:	bd80      	pop	{r7, pc}

0800fcca <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800fcca:	b580      	push	{r7, lr}
 800fccc:	b08a      	sub	sp, #40	; 0x28
 800fcce:	af02      	add	r7, sp, #8
 800fcd0:	60f8      	str	r0, [r7, #12]
 800fcd2:	60b9      	str	r1, [r7, #8]
 800fcd4:	4613      	mov	r3, r2
 800fcd6:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800fcd8:	68fb      	ldr	r3, [r7, #12]
 800fcda:	2b00      	cmp	r3, #0
 800fcdc:	d109      	bne.n	800fcf2 <xQueueGenericCreate+0x28>
 800fcde:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fce2:	f383 8811 	msr	BASEPRI, r3
 800fce6:	f3bf 8f6f 	isb	sy
 800fcea:	f3bf 8f4f 	dsb	sy
 800fcee:	613b      	str	r3, [r7, #16]
 800fcf0:	e7fe      	b.n	800fcf0 <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800fcf2:	68bb      	ldr	r3, [r7, #8]
 800fcf4:	2b00      	cmp	r3, #0
 800fcf6:	d102      	bne.n	800fcfe <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800fcf8:	2300      	movs	r3, #0
 800fcfa:	61fb      	str	r3, [r7, #28]
 800fcfc:	e004      	b.n	800fd08 <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800fcfe:	68fb      	ldr	r3, [r7, #12]
 800fd00:	68ba      	ldr	r2, [r7, #8]
 800fd02:	fb02 f303 	mul.w	r3, r2, r3
 800fd06:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800fd08:	69fb      	ldr	r3, [r7, #28]
 800fd0a:	3350      	adds	r3, #80	; 0x50
 800fd0c:	4618      	mov	r0, r3
 800fd0e:	f7ff fc77 	bl	800f600 <pvPortMalloc>
 800fd12:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800fd14:	69bb      	ldr	r3, [r7, #24]
 800fd16:	2b00      	cmp	r3, #0
 800fd18:	d011      	beq.n	800fd3e <xQueueGenericCreate+0x74>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800fd1a:	69bb      	ldr	r3, [r7, #24]
 800fd1c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800fd1e:	697b      	ldr	r3, [r7, #20]
 800fd20:	3350      	adds	r3, #80	; 0x50
 800fd22:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800fd24:	69bb      	ldr	r3, [r7, #24]
 800fd26:	2200      	movs	r2, #0
 800fd28:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800fd2c:	79fa      	ldrb	r2, [r7, #7]
 800fd2e:	69bb      	ldr	r3, [r7, #24]
 800fd30:	9300      	str	r3, [sp, #0]
 800fd32:	4613      	mov	r3, r2
 800fd34:	697a      	ldr	r2, [r7, #20]
 800fd36:	68b9      	ldr	r1, [r7, #8]
 800fd38:	68f8      	ldr	r0, [r7, #12]
 800fd3a:	f000 f805 	bl	800fd48 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800fd3e:	69bb      	ldr	r3, [r7, #24]
	}
 800fd40:	4618      	mov	r0, r3
 800fd42:	3720      	adds	r7, #32
 800fd44:	46bd      	mov	sp, r7
 800fd46:	bd80      	pop	{r7, pc}

0800fd48 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800fd48:	b580      	push	{r7, lr}
 800fd4a:	b084      	sub	sp, #16
 800fd4c:	af00      	add	r7, sp, #0
 800fd4e:	60f8      	str	r0, [r7, #12]
 800fd50:	60b9      	str	r1, [r7, #8]
 800fd52:	607a      	str	r2, [r7, #4]
 800fd54:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800fd56:	68bb      	ldr	r3, [r7, #8]
 800fd58:	2b00      	cmp	r3, #0
 800fd5a:	d103      	bne.n	800fd64 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800fd5c:	69bb      	ldr	r3, [r7, #24]
 800fd5e:	69ba      	ldr	r2, [r7, #24]
 800fd60:	601a      	str	r2, [r3, #0]
 800fd62:	e002      	b.n	800fd6a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800fd64:	69bb      	ldr	r3, [r7, #24]
 800fd66:	687a      	ldr	r2, [r7, #4]
 800fd68:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800fd6a:	69bb      	ldr	r3, [r7, #24]
 800fd6c:	68fa      	ldr	r2, [r7, #12]
 800fd6e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800fd70:	69bb      	ldr	r3, [r7, #24]
 800fd72:	68ba      	ldr	r2, [r7, #8]
 800fd74:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800fd76:	2101      	movs	r1, #1
 800fd78:	69b8      	ldr	r0, [r7, #24]
 800fd7a:	f7ff fecb 	bl	800fb14 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800fd7e:	69bb      	ldr	r3, [r7, #24]
 800fd80:	78fa      	ldrb	r2, [r7, #3]
 800fd82:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800fd86:	bf00      	nop
 800fd88:	3710      	adds	r7, #16
 800fd8a:	46bd      	mov	sp, r7
 800fd8c:	bd80      	pop	{r7, pc}

0800fd8e <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800fd8e:	b580      	push	{r7, lr}
 800fd90:	b082      	sub	sp, #8
 800fd92:	af00      	add	r7, sp, #0
 800fd94:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800fd96:	687b      	ldr	r3, [r7, #4]
 800fd98:	2b00      	cmp	r3, #0
 800fd9a:	d00e      	beq.n	800fdba <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800fd9c:	687b      	ldr	r3, [r7, #4]
 800fd9e:	2200      	movs	r2, #0
 800fda0:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800fda2:	687b      	ldr	r3, [r7, #4]
 800fda4:	2200      	movs	r2, #0
 800fda6:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800fda8:	687b      	ldr	r3, [r7, #4]
 800fdaa:	2200      	movs	r2, #0
 800fdac:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800fdae:	2300      	movs	r3, #0
 800fdb0:	2200      	movs	r2, #0
 800fdb2:	2100      	movs	r1, #0
 800fdb4:	6878      	ldr	r0, [r7, #4]
 800fdb6:	f000 f905 	bl	800ffc4 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800fdba:	bf00      	nop
 800fdbc:	3708      	adds	r7, #8
 800fdbe:	46bd      	mov	sp, r7
 800fdc0:	bd80      	pop	{r7, pc}

0800fdc2 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800fdc2:	b580      	push	{r7, lr}
 800fdc4:	b086      	sub	sp, #24
 800fdc6:	af00      	add	r7, sp, #0
 800fdc8:	4603      	mov	r3, r0
 800fdca:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800fdcc:	2301      	movs	r3, #1
 800fdce:	617b      	str	r3, [r7, #20]
 800fdd0:	2300      	movs	r3, #0
 800fdd2:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800fdd4:	79fb      	ldrb	r3, [r7, #7]
 800fdd6:	461a      	mov	r2, r3
 800fdd8:	6939      	ldr	r1, [r7, #16]
 800fdda:	6978      	ldr	r0, [r7, #20]
 800fddc:	f7ff ff75 	bl	800fcca <xQueueGenericCreate>
 800fde0:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800fde2:	68f8      	ldr	r0, [r7, #12]
 800fde4:	f7ff ffd3 	bl	800fd8e <prvInitialiseMutex>

		return xNewQueue;
 800fde8:	68fb      	ldr	r3, [r7, #12]
	}
 800fdea:	4618      	mov	r0, r3
 800fdec:	3718      	adds	r7, #24
 800fdee:	46bd      	mov	sp, r7
 800fdf0:	bd80      	pop	{r7, pc}

0800fdf2 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800fdf2:	b580      	push	{r7, lr}
 800fdf4:	b088      	sub	sp, #32
 800fdf6:	af02      	add	r7, sp, #8
 800fdf8:	4603      	mov	r3, r0
 800fdfa:	6039      	str	r1, [r7, #0]
 800fdfc:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800fdfe:	2301      	movs	r3, #1
 800fe00:	617b      	str	r3, [r7, #20]
 800fe02:	2300      	movs	r3, #0
 800fe04:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800fe06:	79fb      	ldrb	r3, [r7, #7]
 800fe08:	9300      	str	r3, [sp, #0]
 800fe0a:	683b      	ldr	r3, [r7, #0]
 800fe0c:	2200      	movs	r2, #0
 800fe0e:	6939      	ldr	r1, [r7, #16]
 800fe10:	6978      	ldr	r0, [r7, #20]
 800fe12:	f7ff fee7 	bl	800fbe4 <xQueueGenericCreateStatic>
 800fe16:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800fe18:	68f8      	ldr	r0, [r7, #12]
 800fe1a:	f7ff ffb8 	bl	800fd8e <prvInitialiseMutex>

		return xNewQueue;
 800fe1e:	68fb      	ldr	r3, [r7, #12]
	}
 800fe20:	4618      	mov	r0, r3
 800fe22:	3718      	adds	r7, #24
 800fe24:	46bd      	mov	sp, r7
 800fe26:	bd80      	pop	{r7, pc}

0800fe28 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 800fe28:	b590      	push	{r4, r7, lr}
 800fe2a:	b087      	sub	sp, #28
 800fe2c:	af00      	add	r7, sp, #0
 800fe2e:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800fe30:	687b      	ldr	r3, [r7, #4]
 800fe32:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800fe34:	693b      	ldr	r3, [r7, #16]
 800fe36:	2b00      	cmp	r3, #0
 800fe38:	d109      	bne.n	800fe4e <xQueueGiveMutexRecursive+0x26>
 800fe3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fe3e:	f383 8811 	msr	BASEPRI, r3
 800fe42:	f3bf 8f6f 	isb	sy
 800fe46:	f3bf 8f4f 	dsb	sy
 800fe4a:	60fb      	str	r3, [r7, #12]
 800fe4c:	e7fe      	b.n	800fe4c <xQueueGiveMutexRecursive+0x24>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800fe4e:	693b      	ldr	r3, [r7, #16]
 800fe50:	689c      	ldr	r4, [r3, #8]
 800fe52:	f001 fd69 	bl	8011928 <xTaskGetCurrentTaskHandle>
 800fe56:	4603      	mov	r3, r0
 800fe58:	429c      	cmp	r4, r3
 800fe5a:	d111      	bne.n	800fe80 <xQueueGiveMutexRecursive+0x58>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 800fe5c:	693b      	ldr	r3, [r7, #16]
 800fe5e:	68db      	ldr	r3, [r3, #12]
 800fe60:	1e5a      	subs	r2, r3, #1
 800fe62:	693b      	ldr	r3, [r7, #16]
 800fe64:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 800fe66:	693b      	ldr	r3, [r7, #16]
 800fe68:	68db      	ldr	r3, [r3, #12]
 800fe6a:	2b00      	cmp	r3, #0
 800fe6c:	d105      	bne.n	800fe7a <xQueueGiveMutexRecursive+0x52>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 800fe6e:	2300      	movs	r3, #0
 800fe70:	2200      	movs	r2, #0
 800fe72:	2100      	movs	r1, #0
 800fe74:	6938      	ldr	r0, [r7, #16]
 800fe76:	f000 f8a5 	bl	800ffc4 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 800fe7a:	2301      	movs	r3, #1
 800fe7c:	617b      	str	r3, [r7, #20]
 800fe7e:	e001      	b.n	800fe84 <xQueueGiveMutexRecursive+0x5c>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 800fe80:	2300      	movs	r3, #0
 800fe82:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 800fe84:	697b      	ldr	r3, [r7, #20]
	}
 800fe86:	4618      	mov	r0, r3
 800fe88:	371c      	adds	r7, #28
 800fe8a:	46bd      	mov	sp, r7
 800fe8c:	bd90      	pop	{r4, r7, pc}

0800fe8e <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 800fe8e:	b590      	push	{r4, r7, lr}
 800fe90:	b087      	sub	sp, #28
 800fe92:	af00      	add	r7, sp, #0
 800fe94:	6078      	str	r0, [r7, #4]
 800fe96:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800fe98:	687b      	ldr	r3, [r7, #4]
 800fe9a:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800fe9c:	693b      	ldr	r3, [r7, #16]
 800fe9e:	2b00      	cmp	r3, #0
 800fea0:	d109      	bne.n	800feb6 <xQueueTakeMutexRecursive+0x28>
 800fea2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fea6:	f383 8811 	msr	BASEPRI, r3
 800feaa:	f3bf 8f6f 	isb	sy
 800feae:	f3bf 8f4f 	dsb	sy
 800feb2:	60fb      	str	r3, [r7, #12]
 800feb4:	e7fe      	b.n	800feb4 <xQueueTakeMutexRecursive+0x26>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800feb6:	693b      	ldr	r3, [r7, #16]
 800feb8:	689c      	ldr	r4, [r3, #8]
 800feba:	f001 fd35 	bl	8011928 <xTaskGetCurrentTaskHandle>
 800febe:	4603      	mov	r3, r0
 800fec0:	429c      	cmp	r4, r3
 800fec2:	d107      	bne.n	800fed4 <xQueueTakeMutexRecursive+0x46>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800fec4:	693b      	ldr	r3, [r7, #16]
 800fec6:	68db      	ldr	r3, [r3, #12]
 800fec8:	1c5a      	adds	r2, r3, #1
 800feca:	693b      	ldr	r3, [r7, #16]
 800fecc:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 800fece:	2301      	movs	r3, #1
 800fed0:	617b      	str	r3, [r7, #20]
 800fed2:	e00c      	b.n	800feee <xQueueTakeMutexRecursive+0x60>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 800fed4:	6839      	ldr	r1, [r7, #0]
 800fed6:	6938      	ldr	r0, [r7, #16]
 800fed8:	f000 fb68 	bl	80105ac <xQueueSemaphoreTake>
 800fedc:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 800fede:	697b      	ldr	r3, [r7, #20]
 800fee0:	2b00      	cmp	r3, #0
 800fee2:	d004      	beq.n	800feee <xQueueTakeMutexRecursive+0x60>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800fee4:	693b      	ldr	r3, [r7, #16]
 800fee6:	68db      	ldr	r3, [r3, #12]
 800fee8:	1c5a      	adds	r2, r3, #1
 800feea:	693b      	ldr	r3, [r7, #16]
 800feec:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 800feee:	697b      	ldr	r3, [r7, #20]
	}
 800fef0:	4618      	mov	r0, r3
 800fef2:	371c      	adds	r7, #28
 800fef4:	46bd      	mov	sp, r7
 800fef6:	bd90      	pop	{r4, r7, pc}

0800fef8 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 800fef8:	b580      	push	{r7, lr}
 800fefa:	b08a      	sub	sp, #40	; 0x28
 800fefc:	af02      	add	r7, sp, #8
 800fefe:	60f8      	str	r0, [r7, #12]
 800ff00:	60b9      	str	r1, [r7, #8]
 800ff02:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800ff04:	68fb      	ldr	r3, [r7, #12]
 800ff06:	2b00      	cmp	r3, #0
 800ff08:	d109      	bne.n	800ff1e <xQueueCreateCountingSemaphoreStatic+0x26>
 800ff0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ff0e:	f383 8811 	msr	BASEPRI, r3
 800ff12:	f3bf 8f6f 	isb	sy
 800ff16:	f3bf 8f4f 	dsb	sy
 800ff1a:	61bb      	str	r3, [r7, #24]
 800ff1c:	e7fe      	b.n	800ff1c <xQueueCreateCountingSemaphoreStatic+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 800ff1e:	68ba      	ldr	r2, [r7, #8]
 800ff20:	68fb      	ldr	r3, [r7, #12]
 800ff22:	429a      	cmp	r2, r3
 800ff24:	d909      	bls.n	800ff3a <xQueueCreateCountingSemaphoreStatic+0x42>
 800ff26:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ff2a:	f383 8811 	msr	BASEPRI, r3
 800ff2e:	f3bf 8f6f 	isb	sy
 800ff32:	f3bf 8f4f 	dsb	sy
 800ff36:	617b      	str	r3, [r7, #20]
 800ff38:	e7fe      	b.n	800ff38 <xQueueCreateCountingSemaphoreStatic+0x40>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800ff3a:	2302      	movs	r3, #2
 800ff3c:	9300      	str	r3, [sp, #0]
 800ff3e:	687b      	ldr	r3, [r7, #4]
 800ff40:	2200      	movs	r2, #0
 800ff42:	2100      	movs	r1, #0
 800ff44:	68f8      	ldr	r0, [r7, #12]
 800ff46:	f7ff fe4d 	bl	800fbe4 <xQueueGenericCreateStatic>
 800ff4a:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800ff4c:	69fb      	ldr	r3, [r7, #28]
 800ff4e:	2b00      	cmp	r3, #0
 800ff50:	d002      	beq.n	800ff58 <xQueueCreateCountingSemaphoreStatic+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800ff52:	69fb      	ldr	r3, [r7, #28]
 800ff54:	68ba      	ldr	r2, [r7, #8]
 800ff56:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800ff58:	69fb      	ldr	r3, [r7, #28]
	}
 800ff5a:	4618      	mov	r0, r3
 800ff5c:	3720      	adds	r7, #32
 800ff5e:	46bd      	mov	sp, r7
 800ff60:	bd80      	pop	{r7, pc}

0800ff62 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800ff62:	b580      	push	{r7, lr}
 800ff64:	b086      	sub	sp, #24
 800ff66:	af00      	add	r7, sp, #0
 800ff68:	6078      	str	r0, [r7, #4]
 800ff6a:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800ff6c:	687b      	ldr	r3, [r7, #4]
 800ff6e:	2b00      	cmp	r3, #0
 800ff70:	d109      	bne.n	800ff86 <xQueueCreateCountingSemaphore+0x24>
 800ff72:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ff76:	f383 8811 	msr	BASEPRI, r3
 800ff7a:	f3bf 8f6f 	isb	sy
 800ff7e:	f3bf 8f4f 	dsb	sy
 800ff82:	613b      	str	r3, [r7, #16]
 800ff84:	e7fe      	b.n	800ff84 <xQueueCreateCountingSemaphore+0x22>
		configASSERT( uxInitialCount <= uxMaxCount );
 800ff86:	683a      	ldr	r2, [r7, #0]
 800ff88:	687b      	ldr	r3, [r7, #4]
 800ff8a:	429a      	cmp	r2, r3
 800ff8c:	d909      	bls.n	800ffa2 <xQueueCreateCountingSemaphore+0x40>
 800ff8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ff92:	f383 8811 	msr	BASEPRI, r3
 800ff96:	f3bf 8f6f 	isb	sy
 800ff9a:	f3bf 8f4f 	dsb	sy
 800ff9e:	60fb      	str	r3, [r7, #12]
 800ffa0:	e7fe      	b.n	800ffa0 <xQueueCreateCountingSemaphore+0x3e>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800ffa2:	2202      	movs	r2, #2
 800ffa4:	2100      	movs	r1, #0
 800ffa6:	6878      	ldr	r0, [r7, #4]
 800ffa8:	f7ff fe8f 	bl	800fcca <xQueueGenericCreate>
 800ffac:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800ffae:	697b      	ldr	r3, [r7, #20]
 800ffb0:	2b00      	cmp	r3, #0
 800ffb2:	d002      	beq.n	800ffba <xQueueCreateCountingSemaphore+0x58>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800ffb4:	697b      	ldr	r3, [r7, #20]
 800ffb6:	683a      	ldr	r2, [r7, #0]
 800ffb8:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800ffba:	697b      	ldr	r3, [r7, #20]
	}
 800ffbc:	4618      	mov	r0, r3
 800ffbe:	3718      	adds	r7, #24
 800ffc0:	46bd      	mov	sp, r7
 800ffc2:	bd80      	pop	{r7, pc}

0800ffc4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800ffc4:	b580      	push	{r7, lr}
 800ffc6:	b08e      	sub	sp, #56	; 0x38
 800ffc8:	af00      	add	r7, sp, #0
 800ffca:	60f8      	str	r0, [r7, #12]
 800ffcc:	60b9      	str	r1, [r7, #8]
 800ffce:	607a      	str	r2, [r7, #4]
 800ffd0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800ffd2:	2300      	movs	r3, #0
 800ffd4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800ffd6:	68fb      	ldr	r3, [r7, #12]
 800ffd8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800ffda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ffdc:	2b00      	cmp	r3, #0
 800ffde:	d109      	bne.n	800fff4 <xQueueGenericSend+0x30>
 800ffe0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ffe4:	f383 8811 	msr	BASEPRI, r3
 800ffe8:	f3bf 8f6f 	isb	sy
 800ffec:	f3bf 8f4f 	dsb	sy
 800fff0:	62bb      	str	r3, [r7, #40]	; 0x28
 800fff2:	e7fe      	b.n	800fff2 <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800fff4:	68bb      	ldr	r3, [r7, #8]
 800fff6:	2b00      	cmp	r3, #0
 800fff8:	d103      	bne.n	8010002 <xQueueGenericSend+0x3e>
 800fffa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fffc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fffe:	2b00      	cmp	r3, #0
 8010000:	d101      	bne.n	8010006 <xQueueGenericSend+0x42>
 8010002:	2301      	movs	r3, #1
 8010004:	e000      	b.n	8010008 <xQueueGenericSend+0x44>
 8010006:	2300      	movs	r3, #0
 8010008:	2b00      	cmp	r3, #0
 801000a:	d109      	bne.n	8010020 <xQueueGenericSend+0x5c>
 801000c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010010:	f383 8811 	msr	BASEPRI, r3
 8010014:	f3bf 8f6f 	isb	sy
 8010018:	f3bf 8f4f 	dsb	sy
 801001c:	627b      	str	r3, [r7, #36]	; 0x24
 801001e:	e7fe      	b.n	801001e <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8010020:	683b      	ldr	r3, [r7, #0]
 8010022:	2b02      	cmp	r3, #2
 8010024:	d103      	bne.n	801002e <xQueueGenericSend+0x6a>
 8010026:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010028:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801002a:	2b01      	cmp	r3, #1
 801002c:	d101      	bne.n	8010032 <xQueueGenericSend+0x6e>
 801002e:	2301      	movs	r3, #1
 8010030:	e000      	b.n	8010034 <xQueueGenericSend+0x70>
 8010032:	2300      	movs	r3, #0
 8010034:	2b00      	cmp	r3, #0
 8010036:	d109      	bne.n	801004c <xQueueGenericSend+0x88>
 8010038:	f04f 0350 	mov.w	r3, #80	; 0x50
 801003c:	f383 8811 	msr	BASEPRI, r3
 8010040:	f3bf 8f6f 	isb	sy
 8010044:	f3bf 8f4f 	dsb	sy
 8010048:	623b      	str	r3, [r7, #32]
 801004a:	e7fe      	b.n	801004a <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 801004c:	f001 fc7c 	bl	8011948 <xTaskGetSchedulerState>
 8010050:	4603      	mov	r3, r0
 8010052:	2b00      	cmp	r3, #0
 8010054:	d102      	bne.n	801005c <xQueueGenericSend+0x98>
 8010056:	687b      	ldr	r3, [r7, #4]
 8010058:	2b00      	cmp	r3, #0
 801005a:	d101      	bne.n	8010060 <xQueueGenericSend+0x9c>
 801005c:	2301      	movs	r3, #1
 801005e:	e000      	b.n	8010062 <xQueueGenericSend+0x9e>
 8010060:	2300      	movs	r3, #0
 8010062:	2b00      	cmp	r3, #0
 8010064:	d109      	bne.n	801007a <xQueueGenericSend+0xb6>
 8010066:	f04f 0350 	mov.w	r3, #80	; 0x50
 801006a:	f383 8811 	msr	BASEPRI, r3
 801006e:	f3bf 8f6f 	isb	sy
 8010072:	f3bf 8f4f 	dsb	sy
 8010076:	61fb      	str	r3, [r7, #28]
 8010078:	e7fe      	b.n	8010078 <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 801007a:	f7ff f9a7 	bl	800f3cc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 801007e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010080:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8010082:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010084:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010086:	429a      	cmp	r2, r3
 8010088:	d302      	bcc.n	8010090 <xQueueGenericSend+0xcc>
 801008a:	683b      	ldr	r3, [r7, #0]
 801008c:	2b02      	cmp	r3, #2
 801008e:	d129      	bne.n	80100e4 <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8010090:	683a      	ldr	r2, [r7, #0]
 8010092:	68b9      	ldr	r1, [r7, #8]
 8010094:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010096:	f000 fc48 	bl	801092a <prvCopyDataToQueue>
 801009a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801009c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801009e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80100a0:	2b00      	cmp	r3, #0
 80100a2:	d010      	beq.n	80100c6 <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80100a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80100a6:	3324      	adds	r3, #36	; 0x24
 80100a8:	4618      	mov	r0, r3
 80100aa:	f001 fa5f 	bl	801156c <xTaskRemoveFromEventList>
 80100ae:	4603      	mov	r3, r0
 80100b0:	2b00      	cmp	r3, #0
 80100b2:	d013      	beq.n	80100dc <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80100b4:	4b3f      	ldr	r3, [pc, #252]	; (80101b4 <xQueueGenericSend+0x1f0>)
 80100b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80100ba:	601a      	str	r2, [r3, #0]
 80100bc:	f3bf 8f4f 	dsb	sy
 80100c0:	f3bf 8f6f 	isb	sy
 80100c4:	e00a      	b.n	80100dc <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80100c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80100c8:	2b00      	cmp	r3, #0
 80100ca:	d007      	beq.n	80100dc <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80100cc:	4b39      	ldr	r3, [pc, #228]	; (80101b4 <xQueueGenericSend+0x1f0>)
 80100ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80100d2:	601a      	str	r2, [r3, #0]
 80100d4:	f3bf 8f4f 	dsb	sy
 80100d8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80100dc:	f7ff f9a4 	bl	800f428 <vPortExitCritical>
				return pdPASS;
 80100e0:	2301      	movs	r3, #1
 80100e2:	e063      	b.n	80101ac <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80100e4:	687b      	ldr	r3, [r7, #4]
 80100e6:	2b00      	cmp	r3, #0
 80100e8:	d103      	bne.n	80100f2 <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80100ea:	f7ff f99d 	bl	800f428 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80100ee:	2300      	movs	r3, #0
 80100f0:	e05c      	b.n	80101ac <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80100f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80100f4:	2b00      	cmp	r3, #0
 80100f6:	d106      	bne.n	8010106 <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80100f8:	f107 0314 	add.w	r3, r7, #20
 80100fc:	4618      	mov	r0, r3
 80100fe:	f001 fa99 	bl	8011634 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8010102:	2301      	movs	r3, #1
 8010104:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8010106:	f7ff f98f 	bl	800f428 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 801010a:	f000 ffdb 	bl	80110c4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 801010e:	f7ff f95d 	bl	800f3cc <vPortEnterCritical>
 8010112:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010114:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8010118:	b25b      	sxtb	r3, r3
 801011a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801011e:	d103      	bne.n	8010128 <xQueueGenericSend+0x164>
 8010120:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010122:	2200      	movs	r2, #0
 8010124:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8010128:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801012a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801012e:	b25b      	sxtb	r3, r3
 8010130:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010134:	d103      	bne.n	801013e <xQueueGenericSend+0x17a>
 8010136:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010138:	2200      	movs	r2, #0
 801013a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801013e:	f7ff f973 	bl	800f428 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8010142:	1d3a      	adds	r2, r7, #4
 8010144:	f107 0314 	add.w	r3, r7, #20
 8010148:	4611      	mov	r1, r2
 801014a:	4618      	mov	r0, r3
 801014c:	f001 fa88 	bl	8011660 <xTaskCheckForTimeOut>
 8010150:	4603      	mov	r3, r0
 8010152:	2b00      	cmp	r3, #0
 8010154:	d124      	bne.n	80101a0 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8010156:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010158:	f000 fcdf 	bl	8010b1a <prvIsQueueFull>
 801015c:	4603      	mov	r3, r0
 801015e:	2b00      	cmp	r3, #0
 8010160:	d018      	beq.n	8010194 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8010162:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010164:	3310      	adds	r3, #16
 8010166:	687a      	ldr	r2, [r7, #4]
 8010168:	4611      	mov	r1, r2
 801016a:	4618      	mov	r0, r3
 801016c:	f001 f9b0 	bl	80114d0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8010170:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010172:	f000 fc6a 	bl	8010a4a <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8010176:	f000 ffeb 	bl	8011150 <xTaskResumeAll>
 801017a:	4603      	mov	r3, r0
 801017c:	2b00      	cmp	r3, #0
 801017e:	f47f af7c 	bne.w	801007a <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8010182:	4b0c      	ldr	r3, [pc, #48]	; (80101b4 <xQueueGenericSend+0x1f0>)
 8010184:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010188:	601a      	str	r2, [r3, #0]
 801018a:	f3bf 8f4f 	dsb	sy
 801018e:	f3bf 8f6f 	isb	sy
 8010192:	e772      	b.n	801007a <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8010194:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010196:	f000 fc58 	bl	8010a4a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 801019a:	f000 ffd9 	bl	8011150 <xTaskResumeAll>
 801019e:	e76c      	b.n	801007a <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80101a0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80101a2:	f000 fc52 	bl	8010a4a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80101a6:	f000 ffd3 	bl	8011150 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80101aa:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80101ac:	4618      	mov	r0, r3
 80101ae:	3738      	adds	r7, #56	; 0x38
 80101b0:	46bd      	mov	sp, r7
 80101b2:	bd80      	pop	{r7, pc}
 80101b4:	e000ed04 	.word	0xe000ed04

080101b8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80101b8:	b580      	push	{r7, lr}
 80101ba:	b08e      	sub	sp, #56	; 0x38
 80101bc:	af00      	add	r7, sp, #0
 80101be:	60f8      	str	r0, [r7, #12]
 80101c0:	60b9      	str	r1, [r7, #8]
 80101c2:	607a      	str	r2, [r7, #4]
 80101c4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80101c6:	68fb      	ldr	r3, [r7, #12]
 80101c8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80101ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80101cc:	2b00      	cmp	r3, #0
 80101ce:	d109      	bne.n	80101e4 <xQueueGenericSendFromISR+0x2c>
 80101d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80101d4:	f383 8811 	msr	BASEPRI, r3
 80101d8:	f3bf 8f6f 	isb	sy
 80101dc:	f3bf 8f4f 	dsb	sy
 80101e0:	627b      	str	r3, [r7, #36]	; 0x24
 80101e2:	e7fe      	b.n	80101e2 <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80101e4:	68bb      	ldr	r3, [r7, #8]
 80101e6:	2b00      	cmp	r3, #0
 80101e8:	d103      	bne.n	80101f2 <xQueueGenericSendFromISR+0x3a>
 80101ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80101ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80101ee:	2b00      	cmp	r3, #0
 80101f0:	d101      	bne.n	80101f6 <xQueueGenericSendFromISR+0x3e>
 80101f2:	2301      	movs	r3, #1
 80101f4:	e000      	b.n	80101f8 <xQueueGenericSendFromISR+0x40>
 80101f6:	2300      	movs	r3, #0
 80101f8:	2b00      	cmp	r3, #0
 80101fa:	d109      	bne.n	8010210 <xQueueGenericSendFromISR+0x58>
 80101fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010200:	f383 8811 	msr	BASEPRI, r3
 8010204:	f3bf 8f6f 	isb	sy
 8010208:	f3bf 8f4f 	dsb	sy
 801020c:	623b      	str	r3, [r7, #32]
 801020e:	e7fe      	b.n	801020e <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8010210:	683b      	ldr	r3, [r7, #0]
 8010212:	2b02      	cmp	r3, #2
 8010214:	d103      	bne.n	801021e <xQueueGenericSendFromISR+0x66>
 8010216:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010218:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801021a:	2b01      	cmp	r3, #1
 801021c:	d101      	bne.n	8010222 <xQueueGenericSendFromISR+0x6a>
 801021e:	2301      	movs	r3, #1
 8010220:	e000      	b.n	8010224 <xQueueGenericSendFromISR+0x6c>
 8010222:	2300      	movs	r3, #0
 8010224:	2b00      	cmp	r3, #0
 8010226:	d109      	bne.n	801023c <xQueueGenericSendFromISR+0x84>
 8010228:	f04f 0350 	mov.w	r3, #80	; 0x50
 801022c:	f383 8811 	msr	BASEPRI, r3
 8010230:	f3bf 8f6f 	isb	sy
 8010234:	f3bf 8f4f 	dsb	sy
 8010238:	61fb      	str	r3, [r7, #28]
 801023a:	e7fe      	b.n	801023a <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 801023c:	f7ff f9a2 	bl	800f584 <vPortValidateInterruptPriority>
	__asm volatile
 8010240:	f3ef 8211 	mrs	r2, BASEPRI
 8010244:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010248:	f383 8811 	msr	BASEPRI, r3
 801024c:	f3bf 8f6f 	isb	sy
 8010250:	f3bf 8f4f 	dsb	sy
 8010254:	61ba      	str	r2, [r7, #24]
 8010256:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8010258:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 801025a:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 801025c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801025e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8010260:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010262:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010264:	429a      	cmp	r2, r3
 8010266:	d302      	bcc.n	801026e <xQueueGenericSendFromISR+0xb6>
 8010268:	683b      	ldr	r3, [r7, #0]
 801026a:	2b02      	cmp	r3, #2
 801026c:	d12c      	bne.n	80102c8 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 801026e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010270:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8010274:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8010278:	683a      	ldr	r2, [r7, #0]
 801027a:	68b9      	ldr	r1, [r7, #8]
 801027c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801027e:	f000 fb54 	bl	801092a <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8010282:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8010286:	f1b3 3fff 	cmp.w	r3, #4294967295
 801028a:	d112      	bne.n	80102b2 <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801028c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801028e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010290:	2b00      	cmp	r3, #0
 8010292:	d016      	beq.n	80102c2 <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8010294:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010296:	3324      	adds	r3, #36	; 0x24
 8010298:	4618      	mov	r0, r3
 801029a:	f001 f967 	bl	801156c <xTaskRemoveFromEventList>
 801029e:	4603      	mov	r3, r0
 80102a0:	2b00      	cmp	r3, #0
 80102a2:	d00e      	beq.n	80102c2 <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80102a4:	687b      	ldr	r3, [r7, #4]
 80102a6:	2b00      	cmp	r3, #0
 80102a8:	d00b      	beq.n	80102c2 <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80102aa:	687b      	ldr	r3, [r7, #4]
 80102ac:	2201      	movs	r2, #1
 80102ae:	601a      	str	r2, [r3, #0]
 80102b0:	e007      	b.n	80102c2 <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80102b2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80102b6:	3301      	adds	r3, #1
 80102b8:	b2db      	uxtb	r3, r3
 80102ba:	b25a      	sxtb	r2, r3
 80102bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80102be:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80102c2:	2301      	movs	r3, #1
 80102c4:	637b      	str	r3, [r7, #52]	; 0x34
		{
 80102c6:	e001      	b.n	80102cc <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80102c8:	2300      	movs	r3, #0
 80102ca:	637b      	str	r3, [r7, #52]	; 0x34
 80102cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80102ce:	613b      	str	r3, [r7, #16]
	__asm volatile
 80102d0:	693b      	ldr	r3, [r7, #16]
 80102d2:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80102d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80102d8:	4618      	mov	r0, r3
 80102da:	3738      	adds	r7, #56	; 0x38
 80102dc:	46bd      	mov	sp, r7
 80102de:	bd80      	pop	{r7, pc}

080102e0 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80102e0:	b580      	push	{r7, lr}
 80102e2:	b08e      	sub	sp, #56	; 0x38
 80102e4:	af00      	add	r7, sp, #0
 80102e6:	6078      	str	r0, [r7, #4]
 80102e8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80102ea:	687b      	ldr	r3, [r7, #4]
 80102ec:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 80102ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80102f0:	2b00      	cmp	r3, #0
 80102f2:	d109      	bne.n	8010308 <xQueueGiveFromISR+0x28>
	__asm volatile
 80102f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80102f8:	f383 8811 	msr	BASEPRI, r3
 80102fc:	f3bf 8f6f 	isb	sy
 8010300:	f3bf 8f4f 	dsb	sy
 8010304:	623b      	str	r3, [r7, #32]
 8010306:	e7fe      	b.n	8010306 <xQueueGiveFromISR+0x26>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8010308:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801030a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801030c:	2b00      	cmp	r3, #0
 801030e:	d009      	beq.n	8010324 <xQueueGiveFromISR+0x44>
 8010310:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010314:	f383 8811 	msr	BASEPRI, r3
 8010318:	f3bf 8f6f 	isb	sy
 801031c:	f3bf 8f4f 	dsb	sy
 8010320:	61fb      	str	r3, [r7, #28]
 8010322:	e7fe      	b.n	8010322 <xQueueGiveFromISR+0x42>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8010324:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010326:	681b      	ldr	r3, [r3, #0]
 8010328:	2b00      	cmp	r3, #0
 801032a:	d103      	bne.n	8010334 <xQueueGiveFromISR+0x54>
 801032c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801032e:	689b      	ldr	r3, [r3, #8]
 8010330:	2b00      	cmp	r3, #0
 8010332:	d101      	bne.n	8010338 <xQueueGiveFromISR+0x58>
 8010334:	2301      	movs	r3, #1
 8010336:	e000      	b.n	801033a <xQueueGiveFromISR+0x5a>
 8010338:	2300      	movs	r3, #0
 801033a:	2b00      	cmp	r3, #0
 801033c:	d109      	bne.n	8010352 <xQueueGiveFromISR+0x72>
 801033e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010342:	f383 8811 	msr	BASEPRI, r3
 8010346:	f3bf 8f6f 	isb	sy
 801034a:	f3bf 8f4f 	dsb	sy
 801034e:	61bb      	str	r3, [r7, #24]
 8010350:	e7fe      	b.n	8010350 <xQueueGiveFromISR+0x70>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8010352:	f7ff f917 	bl	800f584 <vPortValidateInterruptPriority>
	__asm volatile
 8010356:	f3ef 8211 	mrs	r2, BASEPRI
 801035a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801035e:	f383 8811 	msr	BASEPRI, r3
 8010362:	f3bf 8f6f 	isb	sy
 8010366:	f3bf 8f4f 	dsb	sy
 801036a:	617a      	str	r2, [r7, #20]
 801036c:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 801036e:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8010370:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8010372:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010374:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010376:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8010378:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801037a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801037c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801037e:	429a      	cmp	r2, r3
 8010380:	d22b      	bcs.n	80103da <xQueueGiveFromISR+0xfa>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8010382:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010384:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8010388:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 801038c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801038e:	1c5a      	adds	r2, r3, #1
 8010390:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010392:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8010394:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8010398:	f1b3 3fff 	cmp.w	r3, #4294967295
 801039c:	d112      	bne.n	80103c4 <xQueueGiveFromISR+0xe4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801039e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80103a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80103a2:	2b00      	cmp	r3, #0
 80103a4:	d016      	beq.n	80103d4 <xQueueGiveFromISR+0xf4>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80103a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80103a8:	3324      	adds	r3, #36	; 0x24
 80103aa:	4618      	mov	r0, r3
 80103ac:	f001 f8de 	bl	801156c <xTaskRemoveFromEventList>
 80103b0:	4603      	mov	r3, r0
 80103b2:	2b00      	cmp	r3, #0
 80103b4:	d00e      	beq.n	80103d4 <xQueueGiveFromISR+0xf4>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80103b6:	683b      	ldr	r3, [r7, #0]
 80103b8:	2b00      	cmp	r3, #0
 80103ba:	d00b      	beq.n	80103d4 <xQueueGiveFromISR+0xf4>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80103bc:	683b      	ldr	r3, [r7, #0]
 80103be:	2201      	movs	r2, #1
 80103c0:	601a      	str	r2, [r3, #0]
 80103c2:	e007      	b.n	80103d4 <xQueueGiveFromISR+0xf4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80103c4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80103c8:	3301      	adds	r3, #1
 80103ca:	b2db      	uxtb	r3, r3
 80103cc:	b25a      	sxtb	r2, r3
 80103ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80103d0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80103d4:	2301      	movs	r3, #1
 80103d6:	637b      	str	r3, [r7, #52]	; 0x34
 80103d8:	e001      	b.n	80103de <xQueueGiveFromISR+0xfe>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80103da:	2300      	movs	r3, #0
 80103dc:	637b      	str	r3, [r7, #52]	; 0x34
 80103de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80103e0:	60fb      	str	r3, [r7, #12]
	__asm volatile
 80103e2:	68fb      	ldr	r3, [r7, #12]
 80103e4:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80103e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80103ea:	4618      	mov	r0, r3
 80103ec:	3738      	adds	r7, #56	; 0x38
 80103ee:	46bd      	mov	sp, r7
 80103f0:	bd80      	pop	{r7, pc}
	...

080103f4 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80103f4:	b580      	push	{r7, lr}
 80103f6:	b08c      	sub	sp, #48	; 0x30
 80103f8:	af00      	add	r7, sp, #0
 80103fa:	60f8      	str	r0, [r7, #12]
 80103fc:	60b9      	str	r1, [r7, #8]
 80103fe:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8010400:	2300      	movs	r3, #0
 8010402:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8010404:	68fb      	ldr	r3, [r7, #12]
 8010406:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8010408:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801040a:	2b00      	cmp	r3, #0
 801040c:	d109      	bne.n	8010422 <xQueueReceive+0x2e>
	__asm volatile
 801040e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010412:	f383 8811 	msr	BASEPRI, r3
 8010416:	f3bf 8f6f 	isb	sy
 801041a:	f3bf 8f4f 	dsb	sy
 801041e:	623b      	str	r3, [r7, #32]
 8010420:	e7fe      	b.n	8010420 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8010422:	68bb      	ldr	r3, [r7, #8]
 8010424:	2b00      	cmp	r3, #0
 8010426:	d103      	bne.n	8010430 <xQueueReceive+0x3c>
 8010428:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801042a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801042c:	2b00      	cmp	r3, #0
 801042e:	d101      	bne.n	8010434 <xQueueReceive+0x40>
 8010430:	2301      	movs	r3, #1
 8010432:	e000      	b.n	8010436 <xQueueReceive+0x42>
 8010434:	2300      	movs	r3, #0
 8010436:	2b00      	cmp	r3, #0
 8010438:	d109      	bne.n	801044e <xQueueReceive+0x5a>
 801043a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801043e:	f383 8811 	msr	BASEPRI, r3
 8010442:	f3bf 8f6f 	isb	sy
 8010446:	f3bf 8f4f 	dsb	sy
 801044a:	61fb      	str	r3, [r7, #28]
 801044c:	e7fe      	b.n	801044c <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 801044e:	f001 fa7b 	bl	8011948 <xTaskGetSchedulerState>
 8010452:	4603      	mov	r3, r0
 8010454:	2b00      	cmp	r3, #0
 8010456:	d102      	bne.n	801045e <xQueueReceive+0x6a>
 8010458:	687b      	ldr	r3, [r7, #4]
 801045a:	2b00      	cmp	r3, #0
 801045c:	d101      	bne.n	8010462 <xQueueReceive+0x6e>
 801045e:	2301      	movs	r3, #1
 8010460:	e000      	b.n	8010464 <xQueueReceive+0x70>
 8010462:	2300      	movs	r3, #0
 8010464:	2b00      	cmp	r3, #0
 8010466:	d109      	bne.n	801047c <xQueueReceive+0x88>
 8010468:	f04f 0350 	mov.w	r3, #80	; 0x50
 801046c:	f383 8811 	msr	BASEPRI, r3
 8010470:	f3bf 8f6f 	isb	sy
 8010474:	f3bf 8f4f 	dsb	sy
 8010478:	61bb      	str	r3, [r7, #24]
 801047a:	e7fe      	b.n	801047a <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 801047c:	f7fe ffa6 	bl	800f3cc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8010480:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010482:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010484:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8010486:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010488:	2b00      	cmp	r3, #0
 801048a:	d01f      	beq.n	80104cc <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 801048c:	68b9      	ldr	r1, [r7, #8]
 801048e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010490:	f000 fab5 	bl	80109fe <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8010494:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010496:	1e5a      	subs	r2, r3, #1
 8010498:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801049a:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801049c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801049e:	691b      	ldr	r3, [r3, #16]
 80104a0:	2b00      	cmp	r3, #0
 80104a2:	d00f      	beq.n	80104c4 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80104a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80104a6:	3310      	adds	r3, #16
 80104a8:	4618      	mov	r0, r3
 80104aa:	f001 f85f 	bl	801156c <xTaskRemoveFromEventList>
 80104ae:	4603      	mov	r3, r0
 80104b0:	2b00      	cmp	r3, #0
 80104b2:	d007      	beq.n	80104c4 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80104b4:	4b3c      	ldr	r3, [pc, #240]	; (80105a8 <xQueueReceive+0x1b4>)
 80104b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80104ba:	601a      	str	r2, [r3, #0]
 80104bc:	f3bf 8f4f 	dsb	sy
 80104c0:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80104c4:	f7fe ffb0 	bl	800f428 <vPortExitCritical>
				return pdPASS;
 80104c8:	2301      	movs	r3, #1
 80104ca:	e069      	b.n	80105a0 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80104cc:	687b      	ldr	r3, [r7, #4]
 80104ce:	2b00      	cmp	r3, #0
 80104d0:	d103      	bne.n	80104da <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80104d2:	f7fe ffa9 	bl	800f428 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80104d6:	2300      	movs	r3, #0
 80104d8:	e062      	b.n	80105a0 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 80104da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80104dc:	2b00      	cmp	r3, #0
 80104de:	d106      	bne.n	80104ee <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80104e0:	f107 0310 	add.w	r3, r7, #16
 80104e4:	4618      	mov	r0, r3
 80104e6:	f001 f8a5 	bl	8011634 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80104ea:	2301      	movs	r3, #1
 80104ec:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80104ee:	f7fe ff9b 	bl	800f428 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80104f2:	f000 fde7 	bl	80110c4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80104f6:	f7fe ff69 	bl	800f3cc <vPortEnterCritical>
 80104fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80104fc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8010500:	b25b      	sxtb	r3, r3
 8010502:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010506:	d103      	bne.n	8010510 <xQueueReceive+0x11c>
 8010508:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801050a:	2200      	movs	r2, #0
 801050c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8010510:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010512:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8010516:	b25b      	sxtb	r3, r3
 8010518:	f1b3 3fff 	cmp.w	r3, #4294967295
 801051c:	d103      	bne.n	8010526 <xQueueReceive+0x132>
 801051e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010520:	2200      	movs	r2, #0
 8010522:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8010526:	f7fe ff7f 	bl	800f428 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 801052a:	1d3a      	adds	r2, r7, #4
 801052c:	f107 0310 	add.w	r3, r7, #16
 8010530:	4611      	mov	r1, r2
 8010532:	4618      	mov	r0, r3
 8010534:	f001 f894 	bl	8011660 <xTaskCheckForTimeOut>
 8010538:	4603      	mov	r3, r0
 801053a:	2b00      	cmp	r3, #0
 801053c:	d123      	bne.n	8010586 <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 801053e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010540:	f000 fad5 	bl	8010aee <prvIsQueueEmpty>
 8010544:	4603      	mov	r3, r0
 8010546:	2b00      	cmp	r3, #0
 8010548:	d017      	beq.n	801057a <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 801054a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801054c:	3324      	adds	r3, #36	; 0x24
 801054e:	687a      	ldr	r2, [r7, #4]
 8010550:	4611      	mov	r1, r2
 8010552:	4618      	mov	r0, r3
 8010554:	f000 ffbc 	bl	80114d0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8010558:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801055a:	f000 fa76 	bl	8010a4a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 801055e:	f000 fdf7 	bl	8011150 <xTaskResumeAll>
 8010562:	4603      	mov	r3, r0
 8010564:	2b00      	cmp	r3, #0
 8010566:	d189      	bne.n	801047c <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 8010568:	4b0f      	ldr	r3, [pc, #60]	; (80105a8 <xQueueReceive+0x1b4>)
 801056a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801056e:	601a      	str	r2, [r3, #0]
 8010570:	f3bf 8f4f 	dsb	sy
 8010574:	f3bf 8f6f 	isb	sy
 8010578:	e780      	b.n	801047c <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 801057a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801057c:	f000 fa65 	bl	8010a4a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8010580:	f000 fde6 	bl	8011150 <xTaskResumeAll>
 8010584:	e77a      	b.n	801047c <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8010586:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010588:	f000 fa5f 	bl	8010a4a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 801058c:	f000 fde0 	bl	8011150 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8010590:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010592:	f000 faac 	bl	8010aee <prvIsQueueEmpty>
 8010596:	4603      	mov	r3, r0
 8010598:	2b00      	cmp	r3, #0
 801059a:	f43f af6f 	beq.w	801047c <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 801059e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80105a0:	4618      	mov	r0, r3
 80105a2:	3730      	adds	r7, #48	; 0x30
 80105a4:	46bd      	mov	sp, r7
 80105a6:	bd80      	pop	{r7, pc}
 80105a8:	e000ed04 	.word	0xe000ed04

080105ac <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80105ac:	b580      	push	{r7, lr}
 80105ae:	b08e      	sub	sp, #56	; 0x38
 80105b0:	af00      	add	r7, sp, #0
 80105b2:	6078      	str	r0, [r7, #4]
 80105b4:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80105b6:	2300      	movs	r3, #0
 80105b8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80105ba:	687b      	ldr	r3, [r7, #4]
 80105bc:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80105be:	2300      	movs	r3, #0
 80105c0:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80105c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80105c4:	2b00      	cmp	r3, #0
 80105c6:	d109      	bne.n	80105dc <xQueueSemaphoreTake+0x30>
 80105c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80105cc:	f383 8811 	msr	BASEPRI, r3
 80105d0:	f3bf 8f6f 	isb	sy
 80105d4:	f3bf 8f4f 	dsb	sy
 80105d8:	623b      	str	r3, [r7, #32]
 80105da:	e7fe      	b.n	80105da <xQueueSemaphoreTake+0x2e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80105dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80105de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80105e0:	2b00      	cmp	r3, #0
 80105e2:	d009      	beq.n	80105f8 <xQueueSemaphoreTake+0x4c>
 80105e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80105e8:	f383 8811 	msr	BASEPRI, r3
 80105ec:	f3bf 8f6f 	isb	sy
 80105f0:	f3bf 8f4f 	dsb	sy
 80105f4:	61fb      	str	r3, [r7, #28]
 80105f6:	e7fe      	b.n	80105f6 <xQueueSemaphoreTake+0x4a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80105f8:	f001 f9a6 	bl	8011948 <xTaskGetSchedulerState>
 80105fc:	4603      	mov	r3, r0
 80105fe:	2b00      	cmp	r3, #0
 8010600:	d102      	bne.n	8010608 <xQueueSemaphoreTake+0x5c>
 8010602:	683b      	ldr	r3, [r7, #0]
 8010604:	2b00      	cmp	r3, #0
 8010606:	d101      	bne.n	801060c <xQueueSemaphoreTake+0x60>
 8010608:	2301      	movs	r3, #1
 801060a:	e000      	b.n	801060e <xQueueSemaphoreTake+0x62>
 801060c:	2300      	movs	r3, #0
 801060e:	2b00      	cmp	r3, #0
 8010610:	d109      	bne.n	8010626 <xQueueSemaphoreTake+0x7a>
 8010612:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010616:	f383 8811 	msr	BASEPRI, r3
 801061a:	f3bf 8f6f 	isb	sy
 801061e:	f3bf 8f4f 	dsb	sy
 8010622:	61bb      	str	r3, [r7, #24]
 8010624:	e7fe      	b.n	8010624 <xQueueSemaphoreTake+0x78>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8010626:	f7fe fed1 	bl	800f3cc <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 801062a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801062c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801062e:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8010630:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010632:	2b00      	cmp	r3, #0
 8010634:	d024      	beq.n	8010680 <xQueueSemaphoreTake+0xd4>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8010636:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010638:	1e5a      	subs	r2, r3, #1
 801063a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801063c:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 801063e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010640:	681b      	ldr	r3, [r3, #0]
 8010642:	2b00      	cmp	r3, #0
 8010644:	d104      	bne.n	8010650 <xQueueSemaphoreTake+0xa4>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8010646:	f001 faf1 	bl	8011c2c <pvTaskIncrementMutexHeldCount>
 801064a:	4602      	mov	r2, r0
 801064c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801064e:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8010650:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010652:	691b      	ldr	r3, [r3, #16]
 8010654:	2b00      	cmp	r3, #0
 8010656:	d00f      	beq.n	8010678 <xQueueSemaphoreTake+0xcc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8010658:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801065a:	3310      	adds	r3, #16
 801065c:	4618      	mov	r0, r3
 801065e:	f000 ff85 	bl	801156c <xTaskRemoveFromEventList>
 8010662:	4603      	mov	r3, r0
 8010664:	2b00      	cmp	r3, #0
 8010666:	d007      	beq.n	8010678 <xQueueSemaphoreTake+0xcc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8010668:	4b53      	ldr	r3, [pc, #332]	; (80107b8 <xQueueSemaphoreTake+0x20c>)
 801066a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801066e:	601a      	str	r2, [r3, #0]
 8010670:	f3bf 8f4f 	dsb	sy
 8010674:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8010678:	f7fe fed6 	bl	800f428 <vPortExitCritical>
				return pdPASS;
 801067c:	2301      	movs	r3, #1
 801067e:	e096      	b.n	80107ae <xQueueSemaphoreTake+0x202>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8010680:	683b      	ldr	r3, [r7, #0]
 8010682:	2b00      	cmp	r3, #0
 8010684:	d110      	bne.n	80106a8 <xQueueSemaphoreTake+0xfc>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8010686:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010688:	2b00      	cmp	r3, #0
 801068a:	d009      	beq.n	80106a0 <xQueueSemaphoreTake+0xf4>
 801068c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010690:	f383 8811 	msr	BASEPRI, r3
 8010694:	f3bf 8f6f 	isb	sy
 8010698:	f3bf 8f4f 	dsb	sy
 801069c:	617b      	str	r3, [r7, #20]
 801069e:	e7fe      	b.n	801069e <xQueueSemaphoreTake+0xf2>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80106a0:	f7fe fec2 	bl	800f428 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80106a4:	2300      	movs	r3, #0
 80106a6:	e082      	b.n	80107ae <xQueueSemaphoreTake+0x202>
				}
				else if( xEntryTimeSet == pdFALSE )
 80106a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80106aa:	2b00      	cmp	r3, #0
 80106ac:	d106      	bne.n	80106bc <xQueueSemaphoreTake+0x110>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80106ae:	f107 030c 	add.w	r3, r7, #12
 80106b2:	4618      	mov	r0, r3
 80106b4:	f000 ffbe 	bl	8011634 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80106b8:	2301      	movs	r3, #1
 80106ba:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80106bc:	f7fe feb4 	bl	800f428 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80106c0:	f000 fd00 	bl	80110c4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80106c4:	f7fe fe82 	bl	800f3cc <vPortEnterCritical>
 80106c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80106ca:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80106ce:	b25b      	sxtb	r3, r3
 80106d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80106d4:	d103      	bne.n	80106de <xQueueSemaphoreTake+0x132>
 80106d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80106d8:	2200      	movs	r2, #0
 80106da:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80106de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80106e0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80106e4:	b25b      	sxtb	r3, r3
 80106e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80106ea:	d103      	bne.n	80106f4 <xQueueSemaphoreTake+0x148>
 80106ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80106ee:	2200      	movs	r2, #0
 80106f0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80106f4:	f7fe fe98 	bl	800f428 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80106f8:	463a      	mov	r2, r7
 80106fa:	f107 030c 	add.w	r3, r7, #12
 80106fe:	4611      	mov	r1, r2
 8010700:	4618      	mov	r0, r3
 8010702:	f000 ffad 	bl	8011660 <xTaskCheckForTimeOut>
 8010706:	4603      	mov	r3, r0
 8010708:	2b00      	cmp	r3, #0
 801070a:	d132      	bne.n	8010772 <xQueueSemaphoreTake+0x1c6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 801070c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801070e:	f000 f9ee 	bl	8010aee <prvIsQueueEmpty>
 8010712:	4603      	mov	r3, r0
 8010714:	2b00      	cmp	r3, #0
 8010716:	d026      	beq.n	8010766 <xQueueSemaphoreTake+0x1ba>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8010718:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801071a:	681b      	ldr	r3, [r3, #0]
 801071c:	2b00      	cmp	r3, #0
 801071e:	d109      	bne.n	8010734 <xQueueSemaphoreTake+0x188>
					{
						taskENTER_CRITICAL();
 8010720:	f7fe fe54 	bl	800f3cc <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8010724:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010726:	689b      	ldr	r3, [r3, #8]
 8010728:	4618      	mov	r0, r3
 801072a:	f001 f92b 	bl	8011984 <xTaskPriorityInherit>
 801072e:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8010730:	f7fe fe7a 	bl	800f428 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8010734:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010736:	3324      	adds	r3, #36	; 0x24
 8010738:	683a      	ldr	r2, [r7, #0]
 801073a:	4611      	mov	r1, r2
 801073c:	4618      	mov	r0, r3
 801073e:	f000 fec7 	bl	80114d0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8010742:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8010744:	f000 f981 	bl	8010a4a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8010748:	f000 fd02 	bl	8011150 <xTaskResumeAll>
 801074c:	4603      	mov	r3, r0
 801074e:	2b00      	cmp	r3, #0
 8010750:	f47f af69 	bne.w	8010626 <xQueueSemaphoreTake+0x7a>
				{
					portYIELD_WITHIN_API();
 8010754:	4b18      	ldr	r3, [pc, #96]	; (80107b8 <xQueueSemaphoreTake+0x20c>)
 8010756:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801075a:	601a      	str	r2, [r3, #0]
 801075c:	f3bf 8f4f 	dsb	sy
 8010760:	f3bf 8f6f 	isb	sy
 8010764:	e75f      	b.n	8010626 <xQueueSemaphoreTake+0x7a>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8010766:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8010768:	f000 f96f 	bl	8010a4a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 801076c:	f000 fcf0 	bl	8011150 <xTaskResumeAll>
 8010770:	e759      	b.n	8010626 <xQueueSemaphoreTake+0x7a>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8010772:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8010774:	f000 f969 	bl	8010a4a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8010778:	f000 fcea 	bl	8011150 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 801077c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801077e:	f000 f9b6 	bl	8010aee <prvIsQueueEmpty>
 8010782:	4603      	mov	r3, r0
 8010784:	2b00      	cmp	r3, #0
 8010786:	f43f af4e 	beq.w	8010626 <xQueueSemaphoreTake+0x7a>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 801078a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801078c:	2b00      	cmp	r3, #0
 801078e:	d00d      	beq.n	80107ac <xQueueSemaphoreTake+0x200>
					{
						taskENTER_CRITICAL();
 8010790:	f7fe fe1c 	bl	800f3cc <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8010794:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8010796:	f000 f8b0 	bl	80108fa <prvGetDisinheritPriorityAfterTimeout>
 801079a:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 801079c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801079e:	689b      	ldr	r3, [r3, #8]
 80107a0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80107a2:	4618      	mov	r0, r3
 80107a4:	f001 f9c2 	bl	8011b2c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80107a8:	f7fe fe3e 	bl	800f428 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80107ac:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80107ae:	4618      	mov	r0, r3
 80107b0:	3738      	adds	r7, #56	; 0x38
 80107b2:	46bd      	mov	sp, r7
 80107b4:	bd80      	pop	{r7, pc}
 80107b6:	bf00      	nop
 80107b8:	e000ed04 	.word	0xe000ed04

080107bc <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80107bc:	b580      	push	{r7, lr}
 80107be:	b08e      	sub	sp, #56	; 0x38
 80107c0:	af00      	add	r7, sp, #0
 80107c2:	60f8      	str	r0, [r7, #12]
 80107c4:	60b9      	str	r1, [r7, #8]
 80107c6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80107c8:	68fb      	ldr	r3, [r7, #12]
 80107ca:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80107cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80107ce:	2b00      	cmp	r3, #0
 80107d0:	d109      	bne.n	80107e6 <xQueueReceiveFromISR+0x2a>
 80107d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80107d6:	f383 8811 	msr	BASEPRI, r3
 80107da:	f3bf 8f6f 	isb	sy
 80107de:	f3bf 8f4f 	dsb	sy
 80107e2:	623b      	str	r3, [r7, #32]
 80107e4:	e7fe      	b.n	80107e4 <xQueueReceiveFromISR+0x28>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80107e6:	68bb      	ldr	r3, [r7, #8]
 80107e8:	2b00      	cmp	r3, #0
 80107ea:	d103      	bne.n	80107f4 <xQueueReceiveFromISR+0x38>
 80107ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80107ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80107f0:	2b00      	cmp	r3, #0
 80107f2:	d101      	bne.n	80107f8 <xQueueReceiveFromISR+0x3c>
 80107f4:	2301      	movs	r3, #1
 80107f6:	e000      	b.n	80107fa <xQueueReceiveFromISR+0x3e>
 80107f8:	2300      	movs	r3, #0
 80107fa:	2b00      	cmp	r3, #0
 80107fc:	d109      	bne.n	8010812 <xQueueReceiveFromISR+0x56>
 80107fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010802:	f383 8811 	msr	BASEPRI, r3
 8010806:	f3bf 8f6f 	isb	sy
 801080a:	f3bf 8f4f 	dsb	sy
 801080e:	61fb      	str	r3, [r7, #28]
 8010810:	e7fe      	b.n	8010810 <xQueueReceiveFromISR+0x54>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8010812:	f7fe feb7 	bl	800f584 <vPortValidateInterruptPriority>
	__asm volatile
 8010816:	f3ef 8211 	mrs	r2, BASEPRI
 801081a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801081e:	f383 8811 	msr	BASEPRI, r3
 8010822:	f3bf 8f6f 	isb	sy
 8010826:	f3bf 8f4f 	dsb	sy
 801082a:	61ba      	str	r2, [r7, #24]
 801082c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 801082e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8010830:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8010832:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010834:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010836:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8010838:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801083a:	2b00      	cmp	r3, #0
 801083c:	d02f      	beq.n	801089e <xQueueReceiveFromISR+0xe2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 801083e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010840:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8010844:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8010848:	68b9      	ldr	r1, [r7, #8]
 801084a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801084c:	f000 f8d7 	bl	80109fe <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8010850:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010852:	1e5a      	subs	r2, r3, #1
 8010854:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010856:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8010858:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 801085c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010860:	d112      	bne.n	8010888 <xQueueReceiveFromISR+0xcc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8010862:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010864:	691b      	ldr	r3, [r3, #16]
 8010866:	2b00      	cmp	r3, #0
 8010868:	d016      	beq.n	8010898 <xQueueReceiveFromISR+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801086a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801086c:	3310      	adds	r3, #16
 801086e:	4618      	mov	r0, r3
 8010870:	f000 fe7c 	bl	801156c <xTaskRemoveFromEventList>
 8010874:	4603      	mov	r3, r0
 8010876:	2b00      	cmp	r3, #0
 8010878:	d00e      	beq.n	8010898 <xQueueReceiveFromISR+0xdc>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 801087a:	687b      	ldr	r3, [r7, #4]
 801087c:	2b00      	cmp	r3, #0
 801087e:	d00b      	beq.n	8010898 <xQueueReceiveFromISR+0xdc>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8010880:	687b      	ldr	r3, [r7, #4]
 8010882:	2201      	movs	r2, #1
 8010884:	601a      	str	r2, [r3, #0]
 8010886:	e007      	b.n	8010898 <xQueueReceiveFromISR+0xdc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8010888:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801088c:	3301      	adds	r3, #1
 801088e:	b2db      	uxtb	r3, r3
 8010890:	b25a      	sxtb	r2, r3
 8010892:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010894:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8010898:	2301      	movs	r3, #1
 801089a:	637b      	str	r3, [r7, #52]	; 0x34
 801089c:	e001      	b.n	80108a2 <xQueueReceiveFromISR+0xe6>
		}
		else
		{
			xReturn = pdFAIL;
 801089e:	2300      	movs	r3, #0
 80108a0:	637b      	str	r3, [r7, #52]	; 0x34
 80108a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80108a4:	613b      	str	r3, [r7, #16]
	__asm volatile
 80108a6:	693b      	ldr	r3, [r7, #16]
 80108a8:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80108ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80108ae:	4618      	mov	r0, r3
 80108b0:	3738      	adds	r7, #56	; 0x38
 80108b2:	46bd      	mov	sp, r7
 80108b4:	bd80      	pop	{r7, pc}

080108b6 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 80108b6:	b580      	push	{r7, lr}
 80108b8:	b084      	sub	sp, #16
 80108ba:	af00      	add	r7, sp, #0
 80108bc:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 80108be:	687b      	ldr	r3, [r7, #4]
 80108c0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80108c2:	68fb      	ldr	r3, [r7, #12]
 80108c4:	2b00      	cmp	r3, #0
 80108c6:	d109      	bne.n	80108dc <vQueueDelete+0x26>
	__asm volatile
 80108c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80108cc:	f383 8811 	msr	BASEPRI, r3
 80108d0:	f3bf 8f6f 	isb	sy
 80108d4:	f3bf 8f4f 	dsb	sy
 80108d8:	60bb      	str	r3, [r7, #8]
 80108da:	e7fe      	b.n	80108da <vQueueDelete+0x24>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 80108dc:	68f8      	ldr	r0, [r7, #12]
 80108de:	f000 f95d 	bl	8010b9c <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 80108e2:	68fb      	ldr	r3, [r7, #12]
 80108e4:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 80108e8:	2b00      	cmp	r3, #0
 80108ea:	d102      	bne.n	80108f2 <vQueueDelete+0x3c>
		{
			vPortFree( pxQueue );
 80108ec:	68f8      	ldr	r0, [r7, #12]
 80108ee:	f7fe ff49 	bl	800f784 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 80108f2:	bf00      	nop
 80108f4:	3710      	adds	r7, #16
 80108f6:	46bd      	mov	sp, r7
 80108f8:	bd80      	pop	{r7, pc}

080108fa <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80108fa:	b480      	push	{r7}
 80108fc:	b085      	sub	sp, #20
 80108fe:	af00      	add	r7, sp, #0
 8010900:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8010902:	687b      	ldr	r3, [r7, #4]
 8010904:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010906:	2b00      	cmp	r3, #0
 8010908:	d006      	beq.n	8010918 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 801090a:	687b      	ldr	r3, [r7, #4]
 801090c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801090e:	681b      	ldr	r3, [r3, #0]
 8010910:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8010914:	60fb      	str	r3, [r7, #12]
 8010916:	e001      	b.n	801091c <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8010918:	2300      	movs	r3, #0
 801091a:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 801091c:	68fb      	ldr	r3, [r7, #12]
	}
 801091e:	4618      	mov	r0, r3
 8010920:	3714      	adds	r7, #20
 8010922:	46bd      	mov	sp, r7
 8010924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010928:	4770      	bx	lr

0801092a <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 801092a:	b580      	push	{r7, lr}
 801092c:	b086      	sub	sp, #24
 801092e:	af00      	add	r7, sp, #0
 8010930:	60f8      	str	r0, [r7, #12]
 8010932:	60b9      	str	r1, [r7, #8]
 8010934:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8010936:	2300      	movs	r3, #0
 8010938:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801093a:	68fb      	ldr	r3, [r7, #12]
 801093c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801093e:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8010940:	68fb      	ldr	r3, [r7, #12]
 8010942:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010944:	2b00      	cmp	r3, #0
 8010946:	d10d      	bne.n	8010964 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8010948:	68fb      	ldr	r3, [r7, #12]
 801094a:	681b      	ldr	r3, [r3, #0]
 801094c:	2b00      	cmp	r3, #0
 801094e:	d14d      	bne.n	80109ec <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8010950:	68fb      	ldr	r3, [r7, #12]
 8010952:	689b      	ldr	r3, [r3, #8]
 8010954:	4618      	mov	r0, r3
 8010956:	f001 f87d 	bl	8011a54 <xTaskPriorityDisinherit>
 801095a:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 801095c:	68fb      	ldr	r3, [r7, #12]
 801095e:	2200      	movs	r2, #0
 8010960:	609a      	str	r2, [r3, #8]
 8010962:	e043      	b.n	80109ec <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8010964:	687b      	ldr	r3, [r7, #4]
 8010966:	2b00      	cmp	r3, #0
 8010968:	d119      	bne.n	801099e <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 801096a:	68fb      	ldr	r3, [r7, #12]
 801096c:	6858      	ldr	r0, [r3, #4]
 801096e:	68fb      	ldr	r3, [r7, #12]
 8010970:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010972:	461a      	mov	r2, r3
 8010974:	68b9      	ldr	r1, [r7, #8]
 8010976:	f001 ffc7 	bl	8012908 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 801097a:	68fb      	ldr	r3, [r7, #12]
 801097c:	685a      	ldr	r2, [r3, #4]
 801097e:	68fb      	ldr	r3, [r7, #12]
 8010980:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010982:	441a      	add	r2, r3
 8010984:	68fb      	ldr	r3, [r7, #12]
 8010986:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8010988:	68fb      	ldr	r3, [r7, #12]
 801098a:	685a      	ldr	r2, [r3, #4]
 801098c:	68fb      	ldr	r3, [r7, #12]
 801098e:	689b      	ldr	r3, [r3, #8]
 8010990:	429a      	cmp	r2, r3
 8010992:	d32b      	bcc.n	80109ec <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8010994:	68fb      	ldr	r3, [r7, #12]
 8010996:	681a      	ldr	r2, [r3, #0]
 8010998:	68fb      	ldr	r3, [r7, #12]
 801099a:	605a      	str	r2, [r3, #4]
 801099c:	e026      	b.n	80109ec <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 801099e:	68fb      	ldr	r3, [r7, #12]
 80109a0:	68d8      	ldr	r0, [r3, #12]
 80109a2:	68fb      	ldr	r3, [r7, #12]
 80109a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80109a6:	461a      	mov	r2, r3
 80109a8:	68b9      	ldr	r1, [r7, #8]
 80109aa:	f001 ffad 	bl	8012908 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80109ae:	68fb      	ldr	r3, [r7, #12]
 80109b0:	68da      	ldr	r2, [r3, #12]
 80109b2:	68fb      	ldr	r3, [r7, #12]
 80109b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80109b6:	425b      	negs	r3, r3
 80109b8:	441a      	add	r2, r3
 80109ba:	68fb      	ldr	r3, [r7, #12]
 80109bc:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80109be:	68fb      	ldr	r3, [r7, #12]
 80109c0:	68da      	ldr	r2, [r3, #12]
 80109c2:	68fb      	ldr	r3, [r7, #12]
 80109c4:	681b      	ldr	r3, [r3, #0]
 80109c6:	429a      	cmp	r2, r3
 80109c8:	d207      	bcs.n	80109da <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80109ca:	68fb      	ldr	r3, [r7, #12]
 80109cc:	689a      	ldr	r2, [r3, #8]
 80109ce:	68fb      	ldr	r3, [r7, #12]
 80109d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80109d2:	425b      	negs	r3, r3
 80109d4:	441a      	add	r2, r3
 80109d6:	68fb      	ldr	r3, [r7, #12]
 80109d8:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80109da:	687b      	ldr	r3, [r7, #4]
 80109dc:	2b02      	cmp	r3, #2
 80109de:	d105      	bne.n	80109ec <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80109e0:	693b      	ldr	r3, [r7, #16]
 80109e2:	2b00      	cmp	r3, #0
 80109e4:	d002      	beq.n	80109ec <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80109e6:	693b      	ldr	r3, [r7, #16]
 80109e8:	3b01      	subs	r3, #1
 80109ea:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80109ec:	693b      	ldr	r3, [r7, #16]
 80109ee:	1c5a      	adds	r2, r3, #1
 80109f0:	68fb      	ldr	r3, [r7, #12]
 80109f2:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80109f4:	697b      	ldr	r3, [r7, #20]
}
 80109f6:	4618      	mov	r0, r3
 80109f8:	3718      	adds	r7, #24
 80109fa:	46bd      	mov	sp, r7
 80109fc:	bd80      	pop	{r7, pc}

080109fe <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80109fe:	b580      	push	{r7, lr}
 8010a00:	b082      	sub	sp, #8
 8010a02:	af00      	add	r7, sp, #0
 8010a04:	6078      	str	r0, [r7, #4]
 8010a06:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8010a08:	687b      	ldr	r3, [r7, #4]
 8010a0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010a0c:	2b00      	cmp	r3, #0
 8010a0e:	d018      	beq.n	8010a42 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8010a10:	687b      	ldr	r3, [r7, #4]
 8010a12:	68da      	ldr	r2, [r3, #12]
 8010a14:	687b      	ldr	r3, [r7, #4]
 8010a16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010a18:	441a      	add	r2, r3
 8010a1a:	687b      	ldr	r3, [r7, #4]
 8010a1c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8010a1e:	687b      	ldr	r3, [r7, #4]
 8010a20:	68da      	ldr	r2, [r3, #12]
 8010a22:	687b      	ldr	r3, [r7, #4]
 8010a24:	689b      	ldr	r3, [r3, #8]
 8010a26:	429a      	cmp	r2, r3
 8010a28:	d303      	bcc.n	8010a32 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8010a2a:	687b      	ldr	r3, [r7, #4]
 8010a2c:	681a      	ldr	r2, [r3, #0]
 8010a2e:	687b      	ldr	r3, [r7, #4]
 8010a30:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8010a32:	687b      	ldr	r3, [r7, #4]
 8010a34:	68d9      	ldr	r1, [r3, #12]
 8010a36:	687b      	ldr	r3, [r7, #4]
 8010a38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010a3a:	461a      	mov	r2, r3
 8010a3c:	6838      	ldr	r0, [r7, #0]
 8010a3e:	f001 ff63 	bl	8012908 <memcpy>
	}
}
 8010a42:	bf00      	nop
 8010a44:	3708      	adds	r7, #8
 8010a46:	46bd      	mov	sp, r7
 8010a48:	bd80      	pop	{r7, pc}

08010a4a <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8010a4a:	b580      	push	{r7, lr}
 8010a4c:	b084      	sub	sp, #16
 8010a4e:	af00      	add	r7, sp, #0
 8010a50:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8010a52:	f7fe fcbb 	bl	800f3cc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8010a56:	687b      	ldr	r3, [r7, #4]
 8010a58:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8010a5c:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8010a5e:	e011      	b.n	8010a84 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8010a60:	687b      	ldr	r3, [r7, #4]
 8010a62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010a64:	2b00      	cmp	r3, #0
 8010a66:	d012      	beq.n	8010a8e <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8010a68:	687b      	ldr	r3, [r7, #4]
 8010a6a:	3324      	adds	r3, #36	; 0x24
 8010a6c:	4618      	mov	r0, r3
 8010a6e:	f000 fd7d 	bl	801156c <xTaskRemoveFromEventList>
 8010a72:	4603      	mov	r3, r0
 8010a74:	2b00      	cmp	r3, #0
 8010a76:	d001      	beq.n	8010a7c <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8010a78:	f000 fe52 	bl	8011720 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8010a7c:	7bfb      	ldrb	r3, [r7, #15]
 8010a7e:	3b01      	subs	r3, #1
 8010a80:	b2db      	uxtb	r3, r3
 8010a82:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8010a84:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010a88:	2b00      	cmp	r3, #0
 8010a8a:	dce9      	bgt.n	8010a60 <prvUnlockQueue+0x16>
 8010a8c:	e000      	b.n	8010a90 <prvUnlockQueue+0x46>
					break;
 8010a8e:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8010a90:	687b      	ldr	r3, [r7, #4]
 8010a92:	22ff      	movs	r2, #255	; 0xff
 8010a94:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8010a98:	f7fe fcc6 	bl	800f428 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8010a9c:	f7fe fc96 	bl	800f3cc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8010aa0:	687b      	ldr	r3, [r7, #4]
 8010aa2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8010aa6:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8010aa8:	e011      	b.n	8010ace <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8010aaa:	687b      	ldr	r3, [r7, #4]
 8010aac:	691b      	ldr	r3, [r3, #16]
 8010aae:	2b00      	cmp	r3, #0
 8010ab0:	d012      	beq.n	8010ad8 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8010ab2:	687b      	ldr	r3, [r7, #4]
 8010ab4:	3310      	adds	r3, #16
 8010ab6:	4618      	mov	r0, r3
 8010ab8:	f000 fd58 	bl	801156c <xTaskRemoveFromEventList>
 8010abc:	4603      	mov	r3, r0
 8010abe:	2b00      	cmp	r3, #0
 8010ac0:	d001      	beq.n	8010ac6 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8010ac2:	f000 fe2d 	bl	8011720 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8010ac6:	7bbb      	ldrb	r3, [r7, #14]
 8010ac8:	3b01      	subs	r3, #1
 8010aca:	b2db      	uxtb	r3, r3
 8010acc:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8010ace:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8010ad2:	2b00      	cmp	r3, #0
 8010ad4:	dce9      	bgt.n	8010aaa <prvUnlockQueue+0x60>
 8010ad6:	e000      	b.n	8010ada <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8010ad8:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8010ada:	687b      	ldr	r3, [r7, #4]
 8010adc:	22ff      	movs	r2, #255	; 0xff
 8010ade:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8010ae2:	f7fe fca1 	bl	800f428 <vPortExitCritical>
}
 8010ae6:	bf00      	nop
 8010ae8:	3710      	adds	r7, #16
 8010aea:	46bd      	mov	sp, r7
 8010aec:	bd80      	pop	{r7, pc}

08010aee <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8010aee:	b580      	push	{r7, lr}
 8010af0:	b084      	sub	sp, #16
 8010af2:	af00      	add	r7, sp, #0
 8010af4:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8010af6:	f7fe fc69 	bl	800f3cc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8010afa:	687b      	ldr	r3, [r7, #4]
 8010afc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010afe:	2b00      	cmp	r3, #0
 8010b00:	d102      	bne.n	8010b08 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8010b02:	2301      	movs	r3, #1
 8010b04:	60fb      	str	r3, [r7, #12]
 8010b06:	e001      	b.n	8010b0c <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8010b08:	2300      	movs	r3, #0
 8010b0a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8010b0c:	f7fe fc8c 	bl	800f428 <vPortExitCritical>

	return xReturn;
 8010b10:	68fb      	ldr	r3, [r7, #12]
}
 8010b12:	4618      	mov	r0, r3
 8010b14:	3710      	adds	r7, #16
 8010b16:	46bd      	mov	sp, r7
 8010b18:	bd80      	pop	{r7, pc}

08010b1a <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8010b1a:	b580      	push	{r7, lr}
 8010b1c:	b084      	sub	sp, #16
 8010b1e:	af00      	add	r7, sp, #0
 8010b20:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8010b22:	f7fe fc53 	bl	800f3cc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8010b26:	687b      	ldr	r3, [r7, #4]
 8010b28:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8010b2a:	687b      	ldr	r3, [r7, #4]
 8010b2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010b2e:	429a      	cmp	r2, r3
 8010b30:	d102      	bne.n	8010b38 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8010b32:	2301      	movs	r3, #1
 8010b34:	60fb      	str	r3, [r7, #12]
 8010b36:	e001      	b.n	8010b3c <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8010b38:	2300      	movs	r3, #0
 8010b3a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8010b3c:	f7fe fc74 	bl	800f428 <vPortExitCritical>

	return xReturn;
 8010b40:	68fb      	ldr	r3, [r7, #12]
}
 8010b42:	4618      	mov	r0, r3
 8010b44:	3710      	adds	r7, #16
 8010b46:	46bd      	mov	sp, r7
 8010b48:	bd80      	pop	{r7, pc}
	...

08010b4c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8010b4c:	b480      	push	{r7}
 8010b4e:	b085      	sub	sp, #20
 8010b50:	af00      	add	r7, sp, #0
 8010b52:	6078      	str	r0, [r7, #4]
 8010b54:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8010b56:	2300      	movs	r3, #0
 8010b58:	60fb      	str	r3, [r7, #12]
 8010b5a:	e014      	b.n	8010b86 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8010b5c:	4a0e      	ldr	r2, [pc, #56]	; (8010b98 <vQueueAddToRegistry+0x4c>)
 8010b5e:	68fb      	ldr	r3, [r7, #12]
 8010b60:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8010b64:	2b00      	cmp	r3, #0
 8010b66:	d10b      	bne.n	8010b80 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8010b68:	490b      	ldr	r1, [pc, #44]	; (8010b98 <vQueueAddToRegistry+0x4c>)
 8010b6a:	68fb      	ldr	r3, [r7, #12]
 8010b6c:	683a      	ldr	r2, [r7, #0]
 8010b6e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8010b72:	4a09      	ldr	r2, [pc, #36]	; (8010b98 <vQueueAddToRegistry+0x4c>)
 8010b74:	68fb      	ldr	r3, [r7, #12]
 8010b76:	00db      	lsls	r3, r3, #3
 8010b78:	4413      	add	r3, r2
 8010b7a:	687a      	ldr	r2, [r7, #4]
 8010b7c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8010b7e:	e005      	b.n	8010b8c <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8010b80:	68fb      	ldr	r3, [r7, #12]
 8010b82:	3301      	adds	r3, #1
 8010b84:	60fb      	str	r3, [r7, #12]
 8010b86:	68fb      	ldr	r3, [r7, #12]
 8010b88:	2b07      	cmp	r3, #7
 8010b8a:	d9e7      	bls.n	8010b5c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8010b8c:	bf00      	nop
 8010b8e:	3714      	adds	r7, #20
 8010b90:	46bd      	mov	sp, r7
 8010b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b96:	4770      	bx	lr
 8010b98:	20007ac4 	.word	0x20007ac4

08010b9c <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8010b9c:	b480      	push	{r7}
 8010b9e:	b085      	sub	sp, #20
 8010ba0:	af00      	add	r7, sp, #0
 8010ba2:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8010ba4:	2300      	movs	r3, #0
 8010ba6:	60fb      	str	r3, [r7, #12]
 8010ba8:	e016      	b.n	8010bd8 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8010baa:	4a10      	ldr	r2, [pc, #64]	; (8010bec <vQueueUnregisterQueue+0x50>)
 8010bac:	68fb      	ldr	r3, [r7, #12]
 8010bae:	00db      	lsls	r3, r3, #3
 8010bb0:	4413      	add	r3, r2
 8010bb2:	685b      	ldr	r3, [r3, #4]
 8010bb4:	687a      	ldr	r2, [r7, #4]
 8010bb6:	429a      	cmp	r2, r3
 8010bb8:	d10b      	bne.n	8010bd2 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8010bba:	4a0c      	ldr	r2, [pc, #48]	; (8010bec <vQueueUnregisterQueue+0x50>)
 8010bbc:	68fb      	ldr	r3, [r7, #12]
 8010bbe:	2100      	movs	r1, #0
 8010bc0:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8010bc4:	4a09      	ldr	r2, [pc, #36]	; (8010bec <vQueueUnregisterQueue+0x50>)
 8010bc6:	68fb      	ldr	r3, [r7, #12]
 8010bc8:	00db      	lsls	r3, r3, #3
 8010bca:	4413      	add	r3, r2
 8010bcc:	2200      	movs	r2, #0
 8010bce:	605a      	str	r2, [r3, #4]
				break;
 8010bd0:	e005      	b.n	8010bde <vQueueUnregisterQueue+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8010bd2:	68fb      	ldr	r3, [r7, #12]
 8010bd4:	3301      	adds	r3, #1
 8010bd6:	60fb      	str	r3, [r7, #12]
 8010bd8:	68fb      	ldr	r3, [r7, #12]
 8010bda:	2b07      	cmp	r3, #7
 8010bdc:	d9e5      	bls.n	8010baa <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8010bde:	bf00      	nop
 8010be0:	3714      	adds	r7, #20
 8010be2:	46bd      	mov	sp, r7
 8010be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010be8:	4770      	bx	lr
 8010bea:	bf00      	nop
 8010bec:	20007ac4 	.word	0x20007ac4

08010bf0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8010bf0:	b580      	push	{r7, lr}
 8010bf2:	b086      	sub	sp, #24
 8010bf4:	af00      	add	r7, sp, #0
 8010bf6:	60f8      	str	r0, [r7, #12]
 8010bf8:	60b9      	str	r1, [r7, #8]
 8010bfa:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8010bfc:	68fb      	ldr	r3, [r7, #12]
 8010bfe:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8010c00:	f7fe fbe4 	bl	800f3cc <vPortEnterCritical>
 8010c04:	697b      	ldr	r3, [r7, #20]
 8010c06:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8010c0a:	b25b      	sxtb	r3, r3
 8010c0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010c10:	d103      	bne.n	8010c1a <vQueueWaitForMessageRestricted+0x2a>
 8010c12:	697b      	ldr	r3, [r7, #20]
 8010c14:	2200      	movs	r2, #0
 8010c16:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8010c1a:	697b      	ldr	r3, [r7, #20]
 8010c1c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8010c20:	b25b      	sxtb	r3, r3
 8010c22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010c26:	d103      	bne.n	8010c30 <vQueueWaitForMessageRestricted+0x40>
 8010c28:	697b      	ldr	r3, [r7, #20]
 8010c2a:	2200      	movs	r2, #0
 8010c2c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8010c30:	f7fe fbfa 	bl	800f428 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8010c34:	697b      	ldr	r3, [r7, #20]
 8010c36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010c38:	2b00      	cmp	r3, #0
 8010c3a:	d106      	bne.n	8010c4a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8010c3c:	697b      	ldr	r3, [r7, #20]
 8010c3e:	3324      	adds	r3, #36	; 0x24
 8010c40:	687a      	ldr	r2, [r7, #4]
 8010c42:	68b9      	ldr	r1, [r7, #8]
 8010c44:	4618      	mov	r0, r3
 8010c46:	f000 fc67 	bl	8011518 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8010c4a:	6978      	ldr	r0, [r7, #20]
 8010c4c:	f7ff fefd 	bl	8010a4a <prvUnlockQueue>
	}
 8010c50:	bf00      	nop
 8010c52:	3718      	adds	r7, #24
 8010c54:	46bd      	mov	sp, r7
 8010c56:	bd80      	pop	{r7, pc}

08010c58 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8010c58:	b580      	push	{r7, lr}
 8010c5a:	b08e      	sub	sp, #56	; 0x38
 8010c5c:	af04      	add	r7, sp, #16
 8010c5e:	60f8      	str	r0, [r7, #12]
 8010c60:	60b9      	str	r1, [r7, #8]
 8010c62:	607a      	str	r2, [r7, #4]
 8010c64:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8010c66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010c68:	2b00      	cmp	r3, #0
 8010c6a:	d109      	bne.n	8010c80 <xTaskCreateStatic+0x28>
 8010c6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010c70:	f383 8811 	msr	BASEPRI, r3
 8010c74:	f3bf 8f6f 	isb	sy
 8010c78:	f3bf 8f4f 	dsb	sy
 8010c7c:	623b      	str	r3, [r7, #32]
 8010c7e:	e7fe      	b.n	8010c7e <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8010c80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010c82:	2b00      	cmp	r3, #0
 8010c84:	d109      	bne.n	8010c9a <xTaskCreateStatic+0x42>
 8010c86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010c8a:	f383 8811 	msr	BASEPRI, r3
 8010c8e:	f3bf 8f6f 	isb	sy
 8010c92:	f3bf 8f4f 	dsb	sy
 8010c96:	61fb      	str	r3, [r7, #28]
 8010c98:	e7fe      	b.n	8010c98 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8010c9a:	235c      	movs	r3, #92	; 0x5c
 8010c9c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8010c9e:	693b      	ldr	r3, [r7, #16]
 8010ca0:	2b5c      	cmp	r3, #92	; 0x5c
 8010ca2:	d009      	beq.n	8010cb8 <xTaskCreateStatic+0x60>
 8010ca4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010ca8:	f383 8811 	msr	BASEPRI, r3
 8010cac:	f3bf 8f6f 	isb	sy
 8010cb0:	f3bf 8f4f 	dsb	sy
 8010cb4:	61bb      	str	r3, [r7, #24]
 8010cb6:	e7fe      	b.n	8010cb6 <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8010cb8:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8010cba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010cbc:	2b00      	cmp	r3, #0
 8010cbe:	d01e      	beq.n	8010cfe <xTaskCreateStatic+0xa6>
 8010cc0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010cc2:	2b00      	cmp	r3, #0
 8010cc4:	d01b      	beq.n	8010cfe <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8010cc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010cc8:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8010cca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010ccc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010cce:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8010cd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010cd2:	2202      	movs	r2, #2
 8010cd4:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8010cd8:	2300      	movs	r3, #0
 8010cda:	9303      	str	r3, [sp, #12]
 8010cdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010cde:	9302      	str	r3, [sp, #8]
 8010ce0:	f107 0314 	add.w	r3, r7, #20
 8010ce4:	9301      	str	r3, [sp, #4]
 8010ce6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010ce8:	9300      	str	r3, [sp, #0]
 8010cea:	683b      	ldr	r3, [r7, #0]
 8010cec:	687a      	ldr	r2, [r7, #4]
 8010cee:	68b9      	ldr	r1, [r7, #8]
 8010cf0:	68f8      	ldr	r0, [r7, #12]
 8010cf2:	f000 f850 	bl	8010d96 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8010cf6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010cf8:	f000 f8dc 	bl	8010eb4 <prvAddNewTaskToReadyList>
 8010cfc:	e001      	b.n	8010d02 <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 8010cfe:	2300      	movs	r3, #0
 8010d00:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8010d02:	697b      	ldr	r3, [r7, #20]
	}
 8010d04:	4618      	mov	r0, r3
 8010d06:	3728      	adds	r7, #40	; 0x28
 8010d08:	46bd      	mov	sp, r7
 8010d0a:	bd80      	pop	{r7, pc}

08010d0c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8010d0c:	b580      	push	{r7, lr}
 8010d0e:	b08c      	sub	sp, #48	; 0x30
 8010d10:	af04      	add	r7, sp, #16
 8010d12:	60f8      	str	r0, [r7, #12]
 8010d14:	60b9      	str	r1, [r7, #8]
 8010d16:	603b      	str	r3, [r7, #0]
 8010d18:	4613      	mov	r3, r2
 8010d1a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8010d1c:	88fb      	ldrh	r3, [r7, #6]
 8010d1e:	009b      	lsls	r3, r3, #2
 8010d20:	4618      	mov	r0, r3
 8010d22:	f7fe fc6d 	bl	800f600 <pvPortMalloc>
 8010d26:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8010d28:	697b      	ldr	r3, [r7, #20]
 8010d2a:	2b00      	cmp	r3, #0
 8010d2c:	d00e      	beq.n	8010d4c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8010d2e:	205c      	movs	r0, #92	; 0x5c
 8010d30:	f7fe fc66 	bl	800f600 <pvPortMalloc>
 8010d34:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8010d36:	69fb      	ldr	r3, [r7, #28]
 8010d38:	2b00      	cmp	r3, #0
 8010d3a:	d003      	beq.n	8010d44 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8010d3c:	69fb      	ldr	r3, [r7, #28]
 8010d3e:	697a      	ldr	r2, [r7, #20]
 8010d40:	631a      	str	r2, [r3, #48]	; 0x30
 8010d42:	e005      	b.n	8010d50 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8010d44:	6978      	ldr	r0, [r7, #20]
 8010d46:	f7fe fd1d 	bl	800f784 <vPortFree>
 8010d4a:	e001      	b.n	8010d50 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8010d4c:	2300      	movs	r3, #0
 8010d4e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8010d50:	69fb      	ldr	r3, [r7, #28]
 8010d52:	2b00      	cmp	r3, #0
 8010d54:	d017      	beq.n	8010d86 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8010d56:	69fb      	ldr	r3, [r7, #28]
 8010d58:	2200      	movs	r2, #0
 8010d5a:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8010d5e:	88fa      	ldrh	r2, [r7, #6]
 8010d60:	2300      	movs	r3, #0
 8010d62:	9303      	str	r3, [sp, #12]
 8010d64:	69fb      	ldr	r3, [r7, #28]
 8010d66:	9302      	str	r3, [sp, #8]
 8010d68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010d6a:	9301      	str	r3, [sp, #4]
 8010d6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010d6e:	9300      	str	r3, [sp, #0]
 8010d70:	683b      	ldr	r3, [r7, #0]
 8010d72:	68b9      	ldr	r1, [r7, #8]
 8010d74:	68f8      	ldr	r0, [r7, #12]
 8010d76:	f000 f80e 	bl	8010d96 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8010d7a:	69f8      	ldr	r0, [r7, #28]
 8010d7c:	f000 f89a 	bl	8010eb4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8010d80:	2301      	movs	r3, #1
 8010d82:	61bb      	str	r3, [r7, #24]
 8010d84:	e002      	b.n	8010d8c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8010d86:	f04f 33ff 	mov.w	r3, #4294967295
 8010d8a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8010d8c:	69bb      	ldr	r3, [r7, #24]
	}
 8010d8e:	4618      	mov	r0, r3
 8010d90:	3720      	adds	r7, #32
 8010d92:	46bd      	mov	sp, r7
 8010d94:	bd80      	pop	{r7, pc}

08010d96 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8010d96:	b580      	push	{r7, lr}
 8010d98:	b088      	sub	sp, #32
 8010d9a:	af00      	add	r7, sp, #0
 8010d9c:	60f8      	str	r0, [r7, #12]
 8010d9e:	60b9      	str	r1, [r7, #8]
 8010da0:	607a      	str	r2, [r7, #4]
 8010da2:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8010da4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010da6:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8010da8:	687b      	ldr	r3, [r7, #4]
 8010daa:	009b      	lsls	r3, r3, #2
 8010dac:	461a      	mov	r2, r3
 8010dae:	21a5      	movs	r1, #165	; 0xa5
 8010db0:	f001 fdb5 	bl	801291e <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8010db4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010db6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8010db8:	687b      	ldr	r3, [r7, #4]
 8010dba:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8010dbe:	3b01      	subs	r3, #1
 8010dc0:	009b      	lsls	r3, r3, #2
 8010dc2:	4413      	add	r3, r2
 8010dc4:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8010dc6:	69bb      	ldr	r3, [r7, #24]
 8010dc8:	f023 0307 	bic.w	r3, r3, #7
 8010dcc:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8010dce:	69bb      	ldr	r3, [r7, #24]
 8010dd0:	f003 0307 	and.w	r3, r3, #7
 8010dd4:	2b00      	cmp	r3, #0
 8010dd6:	d009      	beq.n	8010dec <prvInitialiseNewTask+0x56>
 8010dd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010ddc:	f383 8811 	msr	BASEPRI, r3
 8010de0:	f3bf 8f6f 	isb	sy
 8010de4:	f3bf 8f4f 	dsb	sy
 8010de8:	617b      	str	r3, [r7, #20]
 8010dea:	e7fe      	b.n	8010dea <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8010dec:	68bb      	ldr	r3, [r7, #8]
 8010dee:	2b00      	cmp	r3, #0
 8010df0:	d01f      	beq.n	8010e32 <prvInitialiseNewTask+0x9c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8010df2:	2300      	movs	r3, #0
 8010df4:	61fb      	str	r3, [r7, #28]
 8010df6:	e012      	b.n	8010e1e <prvInitialiseNewTask+0x88>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8010df8:	68ba      	ldr	r2, [r7, #8]
 8010dfa:	69fb      	ldr	r3, [r7, #28]
 8010dfc:	4413      	add	r3, r2
 8010dfe:	7819      	ldrb	r1, [r3, #0]
 8010e00:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010e02:	69fb      	ldr	r3, [r7, #28]
 8010e04:	4413      	add	r3, r2
 8010e06:	3334      	adds	r3, #52	; 0x34
 8010e08:	460a      	mov	r2, r1
 8010e0a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8010e0c:	68ba      	ldr	r2, [r7, #8]
 8010e0e:	69fb      	ldr	r3, [r7, #28]
 8010e10:	4413      	add	r3, r2
 8010e12:	781b      	ldrb	r3, [r3, #0]
 8010e14:	2b00      	cmp	r3, #0
 8010e16:	d006      	beq.n	8010e26 <prvInitialiseNewTask+0x90>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8010e18:	69fb      	ldr	r3, [r7, #28]
 8010e1a:	3301      	adds	r3, #1
 8010e1c:	61fb      	str	r3, [r7, #28]
 8010e1e:	69fb      	ldr	r3, [r7, #28]
 8010e20:	2b0f      	cmp	r3, #15
 8010e22:	d9e9      	bls.n	8010df8 <prvInitialiseNewTask+0x62>
 8010e24:	e000      	b.n	8010e28 <prvInitialiseNewTask+0x92>
			{
				break;
 8010e26:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8010e28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010e2a:	2200      	movs	r2, #0
 8010e2c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8010e30:	e003      	b.n	8010e3a <prvInitialiseNewTask+0xa4>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8010e32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010e34:	2200      	movs	r2, #0
 8010e36:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8010e3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010e3c:	2b37      	cmp	r3, #55	; 0x37
 8010e3e:	d901      	bls.n	8010e44 <prvInitialiseNewTask+0xae>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8010e40:	2337      	movs	r3, #55	; 0x37
 8010e42:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8010e44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010e46:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010e48:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8010e4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010e4c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010e4e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8010e50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010e52:	2200      	movs	r2, #0
 8010e54:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8010e56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010e58:	3304      	adds	r3, #4
 8010e5a:	4618      	mov	r0, r3
 8010e5c:	f7fe fdc6 	bl	800f9ec <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8010e60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010e62:	3318      	adds	r3, #24
 8010e64:	4618      	mov	r0, r3
 8010e66:	f7fe fdc1 	bl	800f9ec <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8010e6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010e6c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010e6e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010e70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010e72:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8010e76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010e78:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8010e7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010e7c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010e7e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8010e80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010e82:	2200      	movs	r2, #0
 8010e84:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8010e86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010e88:	2200      	movs	r2, #0
 8010e8a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8010e8e:	683a      	ldr	r2, [r7, #0]
 8010e90:	68f9      	ldr	r1, [r7, #12]
 8010e92:	69b8      	ldr	r0, [r7, #24]
 8010e94:	f7fe f970 	bl	800f178 <pxPortInitialiseStack>
 8010e98:	4602      	mov	r2, r0
 8010e9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010e9c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8010e9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010ea0:	2b00      	cmp	r3, #0
 8010ea2:	d002      	beq.n	8010eaa <prvInitialiseNewTask+0x114>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8010ea4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010ea6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010ea8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8010eaa:	bf00      	nop
 8010eac:	3720      	adds	r7, #32
 8010eae:	46bd      	mov	sp, r7
 8010eb0:	bd80      	pop	{r7, pc}
	...

08010eb4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8010eb4:	b580      	push	{r7, lr}
 8010eb6:	b082      	sub	sp, #8
 8010eb8:	af00      	add	r7, sp, #0
 8010eba:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8010ebc:	f7fe fa86 	bl	800f3cc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8010ec0:	4b2d      	ldr	r3, [pc, #180]	; (8010f78 <prvAddNewTaskToReadyList+0xc4>)
 8010ec2:	681b      	ldr	r3, [r3, #0]
 8010ec4:	3301      	adds	r3, #1
 8010ec6:	4a2c      	ldr	r2, [pc, #176]	; (8010f78 <prvAddNewTaskToReadyList+0xc4>)
 8010ec8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8010eca:	4b2c      	ldr	r3, [pc, #176]	; (8010f7c <prvAddNewTaskToReadyList+0xc8>)
 8010ecc:	681b      	ldr	r3, [r3, #0]
 8010ece:	2b00      	cmp	r3, #0
 8010ed0:	d109      	bne.n	8010ee6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8010ed2:	4a2a      	ldr	r2, [pc, #168]	; (8010f7c <prvAddNewTaskToReadyList+0xc8>)
 8010ed4:	687b      	ldr	r3, [r7, #4]
 8010ed6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8010ed8:	4b27      	ldr	r3, [pc, #156]	; (8010f78 <prvAddNewTaskToReadyList+0xc4>)
 8010eda:	681b      	ldr	r3, [r3, #0]
 8010edc:	2b01      	cmp	r3, #1
 8010ede:	d110      	bne.n	8010f02 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8010ee0:	f000 fc68 	bl	80117b4 <prvInitialiseTaskLists>
 8010ee4:	e00d      	b.n	8010f02 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8010ee6:	4b26      	ldr	r3, [pc, #152]	; (8010f80 <prvAddNewTaskToReadyList+0xcc>)
 8010ee8:	681b      	ldr	r3, [r3, #0]
 8010eea:	2b00      	cmp	r3, #0
 8010eec:	d109      	bne.n	8010f02 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8010eee:	4b23      	ldr	r3, [pc, #140]	; (8010f7c <prvAddNewTaskToReadyList+0xc8>)
 8010ef0:	681b      	ldr	r3, [r3, #0]
 8010ef2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010ef4:	687b      	ldr	r3, [r7, #4]
 8010ef6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010ef8:	429a      	cmp	r2, r3
 8010efa:	d802      	bhi.n	8010f02 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8010efc:	4a1f      	ldr	r2, [pc, #124]	; (8010f7c <prvAddNewTaskToReadyList+0xc8>)
 8010efe:	687b      	ldr	r3, [r7, #4]
 8010f00:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8010f02:	4b20      	ldr	r3, [pc, #128]	; (8010f84 <prvAddNewTaskToReadyList+0xd0>)
 8010f04:	681b      	ldr	r3, [r3, #0]
 8010f06:	3301      	adds	r3, #1
 8010f08:	4a1e      	ldr	r2, [pc, #120]	; (8010f84 <prvAddNewTaskToReadyList+0xd0>)
 8010f0a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8010f0c:	4b1d      	ldr	r3, [pc, #116]	; (8010f84 <prvAddNewTaskToReadyList+0xd0>)
 8010f0e:	681a      	ldr	r2, [r3, #0]
 8010f10:	687b      	ldr	r3, [r7, #4]
 8010f12:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8010f14:	687b      	ldr	r3, [r7, #4]
 8010f16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010f18:	4b1b      	ldr	r3, [pc, #108]	; (8010f88 <prvAddNewTaskToReadyList+0xd4>)
 8010f1a:	681b      	ldr	r3, [r3, #0]
 8010f1c:	429a      	cmp	r2, r3
 8010f1e:	d903      	bls.n	8010f28 <prvAddNewTaskToReadyList+0x74>
 8010f20:	687b      	ldr	r3, [r7, #4]
 8010f22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010f24:	4a18      	ldr	r2, [pc, #96]	; (8010f88 <prvAddNewTaskToReadyList+0xd4>)
 8010f26:	6013      	str	r3, [r2, #0]
 8010f28:	687b      	ldr	r3, [r7, #4]
 8010f2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010f2c:	4613      	mov	r3, r2
 8010f2e:	009b      	lsls	r3, r3, #2
 8010f30:	4413      	add	r3, r2
 8010f32:	009b      	lsls	r3, r3, #2
 8010f34:	4a15      	ldr	r2, [pc, #84]	; (8010f8c <prvAddNewTaskToReadyList+0xd8>)
 8010f36:	441a      	add	r2, r3
 8010f38:	687b      	ldr	r3, [r7, #4]
 8010f3a:	3304      	adds	r3, #4
 8010f3c:	4619      	mov	r1, r3
 8010f3e:	4610      	mov	r0, r2
 8010f40:	f7fe fd61 	bl	800fa06 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8010f44:	f7fe fa70 	bl	800f428 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8010f48:	4b0d      	ldr	r3, [pc, #52]	; (8010f80 <prvAddNewTaskToReadyList+0xcc>)
 8010f4a:	681b      	ldr	r3, [r3, #0]
 8010f4c:	2b00      	cmp	r3, #0
 8010f4e:	d00e      	beq.n	8010f6e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8010f50:	4b0a      	ldr	r3, [pc, #40]	; (8010f7c <prvAddNewTaskToReadyList+0xc8>)
 8010f52:	681b      	ldr	r3, [r3, #0]
 8010f54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010f56:	687b      	ldr	r3, [r7, #4]
 8010f58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010f5a:	429a      	cmp	r2, r3
 8010f5c:	d207      	bcs.n	8010f6e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8010f5e:	4b0c      	ldr	r3, [pc, #48]	; (8010f90 <prvAddNewTaskToReadyList+0xdc>)
 8010f60:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010f64:	601a      	str	r2, [r3, #0]
 8010f66:	f3bf 8f4f 	dsb	sy
 8010f6a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8010f6e:	bf00      	nop
 8010f70:	3708      	adds	r7, #8
 8010f72:	46bd      	mov	sp, r7
 8010f74:	bd80      	pop	{r7, pc}
 8010f76:	bf00      	nop
 8010f78:	2000761c 	.word	0x2000761c
 8010f7c:	20007148 	.word	0x20007148
 8010f80:	20007628 	.word	0x20007628
 8010f84:	20007638 	.word	0x20007638
 8010f88:	20007624 	.word	0x20007624
 8010f8c:	2000714c 	.word	0x2000714c
 8010f90:	e000ed04 	.word	0xe000ed04

08010f94 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8010f94:	b580      	push	{r7, lr}
 8010f96:	b084      	sub	sp, #16
 8010f98:	af00      	add	r7, sp, #0
 8010f9a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8010f9c:	2300      	movs	r3, #0
 8010f9e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8010fa0:	687b      	ldr	r3, [r7, #4]
 8010fa2:	2b00      	cmp	r3, #0
 8010fa4:	d016      	beq.n	8010fd4 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8010fa6:	4b13      	ldr	r3, [pc, #76]	; (8010ff4 <vTaskDelay+0x60>)
 8010fa8:	681b      	ldr	r3, [r3, #0]
 8010faa:	2b00      	cmp	r3, #0
 8010fac:	d009      	beq.n	8010fc2 <vTaskDelay+0x2e>
 8010fae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010fb2:	f383 8811 	msr	BASEPRI, r3
 8010fb6:	f3bf 8f6f 	isb	sy
 8010fba:	f3bf 8f4f 	dsb	sy
 8010fbe:	60bb      	str	r3, [r7, #8]
 8010fc0:	e7fe      	b.n	8010fc0 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8010fc2:	f000 f87f 	bl	80110c4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8010fc6:	2100      	movs	r1, #0
 8010fc8:	6878      	ldr	r0, [r7, #4]
 8010fca:	f001 f899 	bl	8012100 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8010fce:	f000 f8bf 	bl	8011150 <xTaskResumeAll>
 8010fd2:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8010fd4:	68fb      	ldr	r3, [r7, #12]
 8010fd6:	2b00      	cmp	r3, #0
 8010fd8:	d107      	bne.n	8010fea <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8010fda:	4b07      	ldr	r3, [pc, #28]	; (8010ff8 <vTaskDelay+0x64>)
 8010fdc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010fe0:	601a      	str	r2, [r3, #0]
 8010fe2:	f3bf 8f4f 	dsb	sy
 8010fe6:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8010fea:	bf00      	nop
 8010fec:	3710      	adds	r7, #16
 8010fee:	46bd      	mov	sp, r7
 8010ff0:	bd80      	pop	{r7, pc}
 8010ff2:	bf00      	nop
 8010ff4:	20007644 	.word	0x20007644
 8010ff8:	e000ed04 	.word	0xe000ed04

08010ffc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8010ffc:	b580      	push	{r7, lr}
 8010ffe:	b08a      	sub	sp, #40	; 0x28
 8011000:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8011002:	2300      	movs	r3, #0
 8011004:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8011006:	2300      	movs	r3, #0
 8011008:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 801100a:	463a      	mov	r2, r7
 801100c:	1d39      	adds	r1, r7, #4
 801100e:	f107 0308 	add.w	r3, r7, #8
 8011012:	4618      	mov	r0, r3
 8011014:	f7fe f87c 	bl	800f110 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8011018:	6839      	ldr	r1, [r7, #0]
 801101a:	687b      	ldr	r3, [r7, #4]
 801101c:	68ba      	ldr	r2, [r7, #8]
 801101e:	9202      	str	r2, [sp, #8]
 8011020:	9301      	str	r3, [sp, #4]
 8011022:	2300      	movs	r3, #0
 8011024:	9300      	str	r3, [sp, #0]
 8011026:	2300      	movs	r3, #0
 8011028:	460a      	mov	r2, r1
 801102a:	4920      	ldr	r1, [pc, #128]	; (80110ac <vTaskStartScheduler+0xb0>)
 801102c:	4820      	ldr	r0, [pc, #128]	; (80110b0 <vTaskStartScheduler+0xb4>)
 801102e:	f7ff fe13 	bl	8010c58 <xTaskCreateStatic>
 8011032:	4602      	mov	r2, r0
 8011034:	4b1f      	ldr	r3, [pc, #124]	; (80110b4 <vTaskStartScheduler+0xb8>)
 8011036:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8011038:	4b1e      	ldr	r3, [pc, #120]	; (80110b4 <vTaskStartScheduler+0xb8>)
 801103a:	681b      	ldr	r3, [r3, #0]
 801103c:	2b00      	cmp	r3, #0
 801103e:	d002      	beq.n	8011046 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8011040:	2301      	movs	r3, #1
 8011042:	617b      	str	r3, [r7, #20]
 8011044:	e001      	b.n	801104a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8011046:	2300      	movs	r3, #0
 8011048:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 801104a:	697b      	ldr	r3, [r7, #20]
 801104c:	2b01      	cmp	r3, #1
 801104e:	d102      	bne.n	8011056 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8011050:	f001 f8aa 	bl	80121a8 <xTimerCreateTimerTask>
 8011054:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8011056:	697b      	ldr	r3, [r7, #20]
 8011058:	2b01      	cmp	r3, #1
 801105a:	d115      	bne.n	8011088 <vTaskStartScheduler+0x8c>
 801105c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011060:	f383 8811 	msr	BASEPRI, r3
 8011064:	f3bf 8f6f 	isb	sy
 8011068:	f3bf 8f4f 	dsb	sy
 801106c:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 801106e:	4b12      	ldr	r3, [pc, #72]	; (80110b8 <vTaskStartScheduler+0xbc>)
 8011070:	f04f 32ff 	mov.w	r2, #4294967295
 8011074:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8011076:	4b11      	ldr	r3, [pc, #68]	; (80110bc <vTaskStartScheduler+0xc0>)
 8011078:	2201      	movs	r2, #1
 801107a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 801107c:	4b10      	ldr	r3, [pc, #64]	; (80110c0 <vTaskStartScheduler+0xc4>)
 801107e:	2200      	movs	r2, #0
 8011080:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8011082:	f7fe f905 	bl	800f290 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8011086:	e00d      	b.n	80110a4 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8011088:	697b      	ldr	r3, [r7, #20]
 801108a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801108e:	d109      	bne.n	80110a4 <vTaskStartScheduler+0xa8>
 8011090:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011094:	f383 8811 	msr	BASEPRI, r3
 8011098:	f3bf 8f6f 	isb	sy
 801109c:	f3bf 8f4f 	dsb	sy
 80110a0:	60fb      	str	r3, [r7, #12]
 80110a2:	e7fe      	b.n	80110a2 <vTaskStartScheduler+0xa6>
}
 80110a4:	bf00      	nop
 80110a6:	3718      	adds	r7, #24
 80110a8:	46bd      	mov	sp, r7
 80110aa:	bd80      	pop	{r7, pc}
 80110ac:	08016efc 	.word	0x08016efc
 80110b0:	08011739 	.word	0x08011739
 80110b4:	20007640 	.word	0x20007640
 80110b8:	2000763c 	.word	0x2000763c
 80110bc:	20007628 	.word	0x20007628
 80110c0:	20007620 	.word	0x20007620

080110c4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80110c4:	b480      	push	{r7}
 80110c6:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80110c8:	4b04      	ldr	r3, [pc, #16]	; (80110dc <vTaskSuspendAll+0x18>)
 80110ca:	681b      	ldr	r3, [r3, #0]
 80110cc:	3301      	adds	r3, #1
 80110ce:	4a03      	ldr	r2, [pc, #12]	; (80110dc <vTaskSuspendAll+0x18>)
 80110d0:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 80110d2:	bf00      	nop
 80110d4:	46bd      	mov	sp, r7
 80110d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110da:	4770      	bx	lr
 80110dc:	20007644 	.word	0x20007644

080110e0 <prvGetExpectedIdleTime>:
/*----------------------------------------------------------*/

#if ( configUSE_TICKLESS_IDLE != 0 )

	static TickType_t prvGetExpectedIdleTime( void )
	{
 80110e0:	b480      	push	{r7}
 80110e2:	b083      	sub	sp, #12
 80110e4:	af00      	add	r7, sp, #0
	TickType_t xReturn;
	UBaseType_t uxHigherPriorityReadyTasks = pdFALSE;
 80110e6:	2300      	movs	r3, #0
 80110e8:	603b      	str	r3, [r7, #0]
		configUSE_PREEMPTION is 0, so there may be tasks above the idle priority
		task that are in the Ready state, even though the idle task is
		running. */
		#if( configUSE_PORT_OPTIMISED_TASK_SELECTION == 0 )
		{
			if( uxTopReadyPriority > tskIDLE_PRIORITY )
 80110ea:	4b14      	ldr	r3, [pc, #80]	; (801113c <prvGetExpectedIdleTime+0x5c>)
 80110ec:	681b      	ldr	r3, [r3, #0]
 80110ee:	2b00      	cmp	r3, #0
 80110f0:	d001      	beq.n	80110f6 <prvGetExpectedIdleTime+0x16>
			{
				uxHigherPriorityReadyTasks = pdTRUE;
 80110f2:	2301      	movs	r3, #1
 80110f4:	603b      	str	r3, [r7, #0]
				uxHigherPriorityReadyTasks = pdTRUE;
			}
		}
		#endif

		if( pxCurrentTCB->uxPriority > tskIDLE_PRIORITY )
 80110f6:	4b12      	ldr	r3, [pc, #72]	; (8011140 <prvGetExpectedIdleTime+0x60>)
 80110f8:	681b      	ldr	r3, [r3, #0]
 80110fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80110fc:	2b00      	cmp	r3, #0
 80110fe:	d002      	beq.n	8011106 <prvGetExpectedIdleTime+0x26>
		{
			xReturn = 0;
 8011100:	2300      	movs	r3, #0
 8011102:	607b      	str	r3, [r7, #4]
 8011104:	e012      	b.n	801112c <prvGetExpectedIdleTime+0x4c>
		}
		else if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > 1 )
 8011106:	4b0f      	ldr	r3, [pc, #60]	; (8011144 <prvGetExpectedIdleTime+0x64>)
 8011108:	681b      	ldr	r3, [r3, #0]
 801110a:	2b01      	cmp	r3, #1
 801110c:	d902      	bls.n	8011114 <prvGetExpectedIdleTime+0x34>
		{
			/* There are other idle priority tasks in the ready state.  If
			time slicing is used then the very next tick interrupt must be
			processed. */
			xReturn = 0;
 801110e:	2300      	movs	r3, #0
 8011110:	607b      	str	r3, [r7, #4]
 8011112:	e00b      	b.n	801112c <prvGetExpectedIdleTime+0x4c>
		}
		else if( uxHigherPriorityReadyTasks != pdFALSE )
 8011114:	683b      	ldr	r3, [r7, #0]
 8011116:	2b00      	cmp	r3, #0
 8011118:	d002      	beq.n	8011120 <prvGetExpectedIdleTime+0x40>
		{
			/* There are tasks in the Ready state that have a priority above the
			idle priority.  This path can only be reached if
			configUSE_PREEMPTION is 0. */
			xReturn = 0;
 801111a:	2300      	movs	r3, #0
 801111c:	607b      	str	r3, [r7, #4]
 801111e:	e005      	b.n	801112c <prvGetExpectedIdleTime+0x4c>
		}
		else
		{
			xReturn = xNextTaskUnblockTime - xTickCount;
 8011120:	4b09      	ldr	r3, [pc, #36]	; (8011148 <prvGetExpectedIdleTime+0x68>)
 8011122:	681a      	ldr	r2, [r3, #0]
 8011124:	4b09      	ldr	r3, [pc, #36]	; (801114c <prvGetExpectedIdleTime+0x6c>)
 8011126:	681b      	ldr	r3, [r3, #0]
 8011128:	1ad3      	subs	r3, r2, r3
 801112a:	607b      	str	r3, [r7, #4]
		}

		return xReturn;
 801112c:	687b      	ldr	r3, [r7, #4]
	}
 801112e:	4618      	mov	r0, r3
 8011130:	370c      	adds	r7, #12
 8011132:	46bd      	mov	sp, r7
 8011134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011138:	4770      	bx	lr
 801113a:	bf00      	nop
 801113c:	20007624 	.word	0x20007624
 8011140:	20007148 	.word	0x20007148
 8011144:	2000714c 	.word	0x2000714c
 8011148:	2000763c 	.word	0x2000763c
 801114c:	20007620 	.word	0x20007620

08011150 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8011150:	b580      	push	{r7, lr}
 8011152:	b084      	sub	sp, #16
 8011154:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8011156:	2300      	movs	r3, #0
 8011158:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 801115a:	2300      	movs	r3, #0
 801115c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 801115e:	4b41      	ldr	r3, [pc, #260]	; (8011264 <xTaskResumeAll+0x114>)
 8011160:	681b      	ldr	r3, [r3, #0]
 8011162:	2b00      	cmp	r3, #0
 8011164:	d109      	bne.n	801117a <xTaskResumeAll+0x2a>
 8011166:	f04f 0350 	mov.w	r3, #80	; 0x50
 801116a:	f383 8811 	msr	BASEPRI, r3
 801116e:	f3bf 8f6f 	isb	sy
 8011172:	f3bf 8f4f 	dsb	sy
 8011176:	603b      	str	r3, [r7, #0]
 8011178:	e7fe      	b.n	8011178 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 801117a:	f7fe f927 	bl	800f3cc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 801117e:	4b39      	ldr	r3, [pc, #228]	; (8011264 <xTaskResumeAll+0x114>)
 8011180:	681b      	ldr	r3, [r3, #0]
 8011182:	3b01      	subs	r3, #1
 8011184:	4a37      	ldr	r2, [pc, #220]	; (8011264 <xTaskResumeAll+0x114>)
 8011186:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8011188:	4b36      	ldr	r3, [pc, #216]	; (8011264 <xTaskResumeAll+0x114>)
 801118a:	681b      	ldr	r3, [r3, #0]
 801118c:	2b00      	cmp	r3, #0
 801118e:	d162      	bne.n	8011256 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8011190:	4b35      	ldr	r3, [pc, #212]	; (8011268 <xTaskResumeAll+0x118>)
 8011192:	681b      	ldr	r3, [r3, #0]
 8011194:	2b00      	cmp	r3, #0
 8011196:	d05e      	beq.n	8011256 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8011198:	e02f      	b.n	80111fa <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801119a:	4b34      	ldr	r3, [pc, #208]	; (801126c <xTaskResumeAll+0x11c>)
 801119c:	68db      	ldr	r3, [r3, #12]
 801119e:	68db      	ldr	r3, [r3, #12]
 80111a0:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80111a2:	68fb      	ldr	r3, [r7, #12]
 80111a4:	3318      	adds	r3, #24
 80111a6:	4618      	mov	r0, r3
 80111a8:	f7fe fc8a 	bl	800fac0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80111ac:	68fb      	ldr	r3, [r7, #12]
 80111ae:	3304      	adds	r3, #4
 80111b0:	4618      	mov	r0, r3
 80111b2:	f7fe fc85 	bl	800fac0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80111b6:	68fb      	ldr	r3, [r7, #12]
 80111b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80111ba:	4b2d      	ldr	r3, [pc, #180]	; (8011270 <xTaskResumeAll+0x120>)
 80111bc:	681b      	ldr	r3, [r3, #0]
 80111be:	429a      	cmp	r2, r3
 80111c0:	d903      	bls.n	80111ca <xTaskResumeAll+0x7a>
 80111c2:	68fb      	ldr	r3, [r7, #12]
 80111c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80111c6:	4a2a      	ldr	r2, [pc, #168]	; (8011270 <xTaskResumeAll+0x120>)
 80111c8:	6013      	str	r3, [r2, #0]
 80111ca:	68fb      	ldr	r3, [r7, #12]
 80111cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80111ce:	4613      	mov	r3, r2
 80111d0:	009b      	lsls	r3, r3, #2
 80111d2:	4413      	add	r3, r2
 80111d4:	009b      	lsls	r3, r3, #2
 80111d6:	4a27      	ldr	r2, [pc, #156]	; (8011274 <xTaskResumeAll+0x124>)
 80111d8:	441a      	add	r2, r3
 80111da:	68fb      	ldr	r3, [r7, #12]
 80111dc:	3304      	adds	r3, #4
 80111de:	4619      	mov	r1, r3
 80111e0:	4610      	mov	r0, r2
 80111e2:	f7fe fc10 	bl	800fa06 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80111e6:	68fb      	ldr	r3, [r7, #12]
 80111e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80111ea:	4b23      	ldr	r3, [pc, #140]	; (8011278 <xTaskResumeAll+0x128>)
 80111ec:	681b      	ldr	r3, [r3, #0]
 80111ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80111f0:	429a      	cmp	r2, r3
 80111f2:	d302      	bcc.n	80111fa <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 80111f4:	4b21      	ldr	r3, [pc, #132]	; (801127c <xTaskResumeAll+0x12c>)
 80111f6:	2201      	movs	r2, #1
 80111f8:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80111fa:	4b1c      	ldr	r3, [pc, #112]	; (801126c <xTaskResumeAll+0x11c>)
 80111fc:	681b      	ldr	r3, [r3, #0]
 80111fe:	2b00      	cmp	r3, #0
 8011200:	d1cb      	bne.n	801119a <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8011202:	68fb      	ldr	r3, [r7, #12]
 8011204:	2b00      	cmp	r3, #0
 8011206:	d001      	beq.n	801120c <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8011208:	f000 fb6e 	bl	80118e8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 801120c:	4b1c      	ldr	r3, [pc, #112]	; (8011280 <xTaskResumeAll+0x130>)
 801120e:	681b      	ldr	r3, [r3, #0]
 8011210:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8011212:	687b      	ldr	r3, [r7, #4]
 8011214:	2b00      	cmp	r3, #0
 8011216:	d010      	beq.n	801123a <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8011218:	f000 f846 	bl	80112a8 <xTaskIncrementTick>
 801121c:	4603      	mov	r3, r0
 801121e:	2b00      	cmp	r3, #0
 8011220:	d002      	beq.n	8011228 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8011222:	4b16      	ldr	r3, [pc, #88]	; (801127c <xTaskResumeAll+0x12c>)
 8011224:	2201      	movs	r2, #1
 8011226:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8011228:	687b      	ldr	r3, [r7, #4]
 801122a:	3b01      	subs	r3, #1
 801122c:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 801122e:	687b      	ldr	r3, [r7, #4]
 8011230:	2b00      	cmp	r3, #0
 8011232:	d1f1      	bne.n	8011218 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8011234:	4b12      	ldr	r3, [pc, #72]	; (8011280 <xTaskResumeAll+0x130>)
 8011236:	2200      	movs	r2, #0
 8011238:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 801123a:	4b10      	ldr	r3, [pc, #64]	; (801127c <xTaskResumeAll+0x12c>)
 801123c:	681b      	ldr	r3, [r3, #0]
 801123e:	2b00      	cmp	r3, #0
 8011240:	d009      	beq.n	8011256 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8011242:	2301      	movs	r3, #1
 8011244:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8011246:	4b0f      	ldr	r3, [pc, #60]	; (8011284 <xTaskResumeAll+0x134>)
 8011248:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801124c:	601a      	str	r2, [r3, #0]
 801124e:	f3bf 8f4f 	dsb	sy
 8011252:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8011256:	f7fe f8e7 	bl	800f428 <vPortExitCritical>

	return xAlreadyYielded;
 801125a:	68bb      	ldr	r3, [r7, #8]
}
 801125c:	4618      	mov	r0, r3
 801125e:	3710      	adds	r7, #16
 8011260:	46bd      	mov	sp, r7
 8011262:	bd80      	pop	{r7, pc}
 8011264:	20007644 	.word	0x20007644
 8011268:	2000761c 	.word	0x2000761c
 801126c:	200075dc 	.word	0x200075dc
 8011270:	20007624 	.word	0x20007624
 8011274:	2000714c 	.word	0x2000714c
 8011278:	20007148 	.word	0x20007148
 801127c:	20007630 	.word	0x20007630
 8011280:	2000762c 	.word	0x2000762c
 8011284:	e000ed04 	.word	0xe000ed04

08011288 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8011288:	b480      	push	{r7}
 801128a:	b083      	sub	sp, #12
 801128c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 801128e:	4b05      	ldr	r3, [pc, #20]	; (80112a4 <xTaskGetTickCount+0x1c>)
 8011290:	681b      	ldr	r3, [r3, #0]
 8011292:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8011294:	687b      	ldr	r3, [r7, #4]
}
 8011296:	4618      	mov	r0, r3
 8011298:	370c      	adds	r7, #12
 801129a:	46bd      	mov	sp, r7
 801129c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112a0:	4770      	bx	lr
 80112a2:	bf00      	nop
 80112a4:	20007620 	.word	0x20007620

080112a8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80112a8:	b580      	push	{r7, lr}
 80112aa:	b086      	sub	sp, #24
 80112ac:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80112ae:	2300      	movs	r3, #0
 80112b0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80112b2:	4b4e      	ldr	r3, [pc, #312]	; (80113ec <xTaskIncrementTick+0x144>)
 80112b4:	681b      	ldr	r3, [r3, #0]
 80112b6:	2b00      	cmp	r3, #0
 80112b8:	f040 8088 	bne.w	80113cc <xTaskIncrementTick+0x124>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80112bc:	4b4c      	ldr	r3, [pc, #304]	; (80113f0 <xTaskIncrementTick+0x148>)
 80112be:	681b      	ldr	r3, [r3, #0]
 80112c0:	3301      	adds	r3, #1
 80112c2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80112c4:	4a4a      	ldr	r2, [pc, #296]	; (80113f0 <xTaskIncrementTick+0x148>)
 80112c6:	693b      	ldr	r3, [r7, #16]
 80112c8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80112ca:	693b      	ldr	r3, [r7, #16]
 80112cc:	2b00      	cmp	r3, #0
 80112ce:	d11f      	bne.n	8011310 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 80112d0:	4b48      	ldr	r3, [pc, #288]	; (80113f4 <xTaskIncrementTick+0x14c>)
 80112d2:	681b      	ldr	r3, [r3, #0]
 80112d4:	681b      	ldr	r3, [r3, #0]
 80112d6:	2b00      	cmp	r3, #0
 80112d8:	d009      	beq.n	80112ee <xTaskIncrementTick+0x46>
 80112da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80112de:	f383 8811 	msr	BASEPRI, r3
 80112e2:	f3bf 8f6f 	isb	sy
 80112e6:	f3bf 8f4f 	dsb	sy
 80112ea:	603b      	str	r3, [r7, #0]
 80112ec:	e7fe      	b.n	80112ec <xTaskIncrementTick+0x44>
 80112ee:	4b41      	ldr	r3, [pc, #260]	; (80113f4 <xTaskIncrementTick+0x14c>)
 80112f0:	681b      	ldr	r3, [r3, #0]
 80112f2:	60fb      	str	r3, [r7, #12]
 80112f4:	4b40      	ldr	r3, [pc, #256]	; (80113f8 <xTaskIncrementTick+0x150>)
 80112f6:	681b      	ldr	r3, [r3, #0]
 80112f8:	4a3e      	ldr	r2, [pc, #248]	; (80113f4 <xTaskIncrementTick+0x14c>)
 80112fa:	6013      	str	r3, [r2, #0]
 80112fc:	4a3e      	ldr	r2, [pc, #248]	; (80113f8 <xTaskIncrementTick+0x150>)
 80112fe:	68fb      	ldr	r3, [r7, #12]
 8011300:	6013      	str	r3, [r2, #0]
 8011302:	4b3e      	ldr	r3, [pc, #248]	; (80113fc <xTaskIncrementTick+0x154>)
 8011304:	681b      	ldr	r3, [r3, #0]
 8011306:	3301      	adds	r3, #1
 8011308:	4a3c      	ldr	r2, [pc, #240]	; (80113fc <xTaskIncrementTick+0x154>)
 801130a:	6013      	str	r3, [r2, #0]
 801130c:	f000 faec 	bl	80118e8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8011310:	4b3b      	ldr	r3, [pc, #236]	; (8011400 <xTaskIncrementTick+0x158>)
 8011312:	681b      	ldr	r3, [r3, #0]
 8011314:	693a      	ldr	r2, [r7, #16]
 8011316:	429a      	cmp	r2, r3
 8011318:	d349      	bcc.n	80113ae <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801131a:	4b36      	ldr	r3, [pc, #216]	; (80113f4 <xTaskIncrementTick+0x14c>)
 801131c:	681b      	ldr	r3, [r3, #0]
 801131e:	681b      	ldr	r3, [r3, #0]
 8011320:	2b00      	cmp	r3, #0
 8011322:	d104      	bne.n	801132e <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011324:	4b36      	ldr	r3, [pc, #216]	; (8011400 <xTaskIncrementTick+0x158>)
 8011326:	f04f 32ff 	mov.w	r2, #4294967295
 801132a:	601a      	str	r2, [r3, #0]
					break;
 801132c:	e03f      	b.n	80113ae <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801132e:	4b31      	ldr	r3, [pc, #196]	; (80113f4 <xTaskIncrementTick+0x14c>)
 8011330:	681b      	ldr	r3, [r3, #0]
 8011332:	68db      	ldr	r3, [r3, #12]
 8011334:	68db      	ldr	r3, [r3, #12]
 8011336:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8011338:	68bb      	ldr	r3, [r7, #8]
 801133a:	685b      	ldr	r3, [r3, #4]
 801133c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 801133e:	693a      	ldr	r2, [r7, #16]
 8011340:	687b      	ldr	r3, [r7, #4]
 8011342:	429a      	cmp	r2, r3
 8011344:	d203      	bcs.n	801134e <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8011346:	4a2e      	ldr	r2, [pc, #184]	; (8011400 <xTaskIncrementTick+0x158>)
 8011348:	687b      	ldr	r3, [r7, #4]
 801134a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 801134c:	e02f      	b.n	80113ae <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801134e:	68bb      	ldr	r3, [r7, #8]
 8011350:	3304      	adds	r3, #4
 8011352:	4618      	mov	r0, r3
 8011354:	f7fe fbb4 	bl	800fac0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8011358:	68bb      	ldr	r3, [r7, #8]
 801135a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801135c:	2b00      	cmp	r3, #0
 801135e:	d004      	beq.n	801136a <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8011360:	68bb      	ldr	r3, [r7, #8]
 8011362:	3318      	adds	r3, #24
 8011364:	4618      	mov	r0, r3
 8011366:	f7fe fbab 	bl	800fac0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 801136a:	68bb      	ldr	r3, [r7, #8]
 801136c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801136e:	4b25      	ldr	r3, [pc, #148]	; (8011404 <xTaskIncrementTick+0x15c>)
 8011370:	681b      	ldr	r3, [r3, #0]
 8011372:	429a      	cmp	r2, r3
 8011374:	d903      	bls.n	801137e <xTaskIncrementTick+0xd6>
 8011376:	68bb      	ldr	r3, [r7, #8]
 8011378:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801137a:	4a22      	ldr	r2, [pc, #136]	; (8011404 <xTaskIncrementTick+0x15c>)
 801137c:	6013      	str	r3, [r2, #0]
 801137e:	68bb      	ldr	r3, [r7, #8]
 8011380:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011382:	4613      	mov	r3, r2
 8011384:	009b      	lsls	r3, r3, #2
 8011386:	4413      	add	r3, r2
 8011388:	009b      	lsls	r3, r3, #2
 801138a:	4a1f      	ldr	r2, [pc, #124]	; (8011408 <xTaskIncrementTick+0x160>)
 801138c:	441a      	add	r2, r3
 801138e:	68bb      	ldr	r3, [r7, #8]
 8011390:	3304      	adds	r3, #4
 8011392:	4619      	mov	r1, r3
 8011394:	4610      	mov	r0, r2
 8011396:	f7fe fb36 	bl	800fa06 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 801139a:	68bb      	ldr	r3, [r7, #8]
 801139c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801139e:	4b1b      	ldr	r3, [pc, #108]	; (801140c <xTaskIncrementTick+0x164>)
 80113a0:	681b      	ldr	r3, [r3, #0]
 80113a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80113a4:	429a      	cmp	r2, r3
 80113a6:	d3b8      	bcc.n	801131a <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 80113a8:	2301      	movs	r3, #1
 80113aa:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80113ac:	e7b5      	b.n	801131a <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80113ae:	4b17      	ldr	r3, [pc, #92]	; (801140c <xTaskIncrementTick+0x164>)
 80113b0:	681b      	ldr	r3, [r3, #0]
 80113b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80113b4:	4914      	ldr	r1, [pc, #80]	; (8011408 <xTaskIncrementTick+0x160>)
 80113b6:	4613      	mov	r3, r2
 80113b8:	009b      	lsls	r3, r3, #2
 80113ba:	4413      	add	r3, r2
 80113bc:	009b      	lsls	r3, r3, #2
 80113be:	440b      	add	r3, r1
 80113c0:	681b      	ldr	r3, [r3, #0]
 80113c2:	2b01      	cmp	r3, #1
 80113c4:	d907      	bls.n	80113d6 <xTaskIncrementTick+0x12e>
			{
				xSwitchRequired = pdTRUE;
 80113c6:	2301      	movs	r3, #1
 80113c8:	617b      	str	r3, [r7, #20]
 80113ca:	e004      	b.n	80113d6 <xTaskIncrementTick+0x12e>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80113cc:	4b10      	ldr	r3, [pc, #64]	; (8011410 <xTaskIncrementTick+0x168>)
 80113ce:	681b      	ldr	r3, [r3, #0]
 80113d0:	3301      	adds	r3, #1
 80113d2:	4a0f      	ldr	r2, [pc, #60]	; (8011410 <xTaskIncrementTick+0x168>)
 80113d4:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80113d6:	4b0f      	ldr	r3, [pc, #60]	; (8011414 <xTaskIncrementTick+0x16c>)
 80113d8:	681b      	ldr	r3, [r3, #0]
 80113da:	2b00      	cmp	r3, #0
 80113dc:	d001      	beq.n	80113e2 <xTaskIncrementTick+0x13a>
		{
			xSwitchRequired = pdTRUE;
 80113de:	2301      	movs	r3, #1
 80113e0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80113e2:	697b      	ldr	r3, [r7, #20]
}
 80113e4:	4618      	mov	r0, r3
 80113e6:	3718      	adds	r7, #24
 80113e8:	46bd      	mov	sp, r7
 80113ea:	bd80      	pop	{r7, pc}
 80113ec:	20007644 	.word	0x20007644
 80113f0:	20007620 	.word	0x20007620
 80113f4:	200075d4 	.word	0x200075d4
 80113f8:	200075d8 	.word	0x200075d8
 80113fc:	20007634 	.word	0x20007634
 8011400:	2000763c 	.word	0x2000763c
 8011404:	20007624 	.word	0x20007624
 8011408:	2000714c 	.word	0x2000714c
 801140c:	20007148 	.word	0x20007148
 8011410:	2000762c 	.word	0x2000762c
 8011414:	20007630 	.word	0x20007630

08011418 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8011418:	b480      	push	{r7}
 801141a:	b085      	sub	sp, #20
 801141c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 801141e:	4b27      	ldr	r3, [pc, #156]	; (80114bc <vTaskSwitchContext+0xa4>)
 8011420:	681b      	ldr	r3, [r3, #0]
 8011422:	2b00      	cmp	r3, #0
 8011424:	d003      	beq.n	801142e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8011426:	4b26      	ldr	r3, [pc, #152]	; (80114c0 <vTaskSwitchContext+0xa8>)
 8011428:	2201      	movs	r2, #1
 801142a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 801142c:	e040      	b.n	80114b0 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 801142e:	4b24      	ldr	r3, [pc, #144]	; (80114c0 <vTaskSwitchContext+0xa8>)
 8011430:	2200      	movs	r2, #0
 8011432:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011434:	4b23      	ldr	r3, [pc, #140]	; (80114c4 <vTaskSwitchContext+0xac>)
 8011436:	681b      	ldr	r3, [r3, #0]
 8011438:	60fb      	str	r3, [r7, #12]
 801143a:	e00f      	b.n	801145c <vTaskSwitchContext+0x44>
 801143c:	68fb      	ldr	r3, [r7, #12]
 801143e:	2b00      	cmp	r3, #0
 8011440:	d109      	bne.n	8011456 <vTaskSwitchContext+0x3e>
 8011442:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011446:	f383 8811 	msr	BASEPRI, r3
 801144a:	f3bf 8f6f 	isb	sy
 801144e:	f3bf 8f4f 	dsb	sy
 8011452:	607b      	str	r3, [r7, #4]
 8011454:	e7fe      	b.n	8011454 <vTaskSwitchContext+0x3c>
 8011456:	68fb      	ldr	r3, [r7, #12]
 8011458:	3b01      	subs	r3, #1
 801145a:	60fb      	str	r3, [r7, #12]
 801145c:	491a      	ldr	r1, [pc, #104]	; (80114c8 <vTaskSwitchContext+0xb0>)
 801145e:	68fa      	ldr	r2, [r7, #12]
 8011460:	4613      	mov	r3, r2
 8011462:	009b      	lsls	r3, r3, #2
 8011464:	4413      	add	r3, r2
 8011466:	009b      	lsls	r3, r3, #2
 8011468:	440b      	add	r3, r1
 801146a:	681b      	ldr	r3, [r3, #0]
 801146c:	2b00      	cmp	r3, #0
 801146e:	d0e5      	beq.n	801143c <vTaskSwitchContext+0x24>
 8011470:	68fa      	ldr	r2, [r7, #12]
 8011472:	4613      	mov	r3, r2
 8011474:	009b      	lsls	r3, r3, #2
 8011476:	4413      	add	r3, r2
 8011478:	009b      	lsls	r3, r3, #2
 801147a:	4a13      	ldr	r2, [pc, #76]	; (80114c8 <vTaskSwitchContext+0xb0>)
 801147c:	4413      	add	r3, r2
 801147e:	60bb      	str	r3, [r7, #8]
 8011480:	68bb      	ldr	r3, [r7, #8]
 8011482:	685b      	ldr	r3, [r3, #4]
 8011484:	685a      	ldr	r2, [r3, #4]
 8011486:	68bb      	ldr	r3, [r7, #8]
 8011488:	605a      	str	r2, [r3, #4]
 801148a:	68bb      	ldr	r3, [r7, #8]
 801148c:	685a      	ldr	r2, [r3, #4]
 801148e:	68bb      	ldr	r3, [r7, #8]
 8011490:	3308      	adds	r3, #8
 8011492:	429a      	cmp	r2, r3
 8011494:	d104      	bne.n	80114a0 <vTaskSwitchContext+0x88>
 8011496:	68bb      	ldr	r3, [r7, #8]
 8011498:	685b      	ldr	r3, [r3, #4]
 801149a:	685a      	ldr	r2, [r3, #4]
 801149c:	68bb      	ldr	r3, [r7, #8]
 801149e:	605a      	str	r2, [r3, #4]
 80114a0:	68bb      	ldr	r3, [r7, #8]
 80114a2:	685b      	ldr	r3, [r3, #4]
 80114a4:	68db      	ldr	r3, [r3, #12]
 80114a6:	4a09      	ldr	r2, [pc, #36]	; (80114cc <vTaskSwitchContext+0xb4>)
 80114a8:	6013      	str	r3, [r2, #0]
 80114aa:	4a06      	ldr	r2, [pc, #24]	; (80114c4 <vTaskSwitchContext+0xac>)
 80114ac:	68fb      	ldr	r3, [r7, #12]
 80114ae:	6013      	str	r3, [r2, #0]
}
 80114b0:	bf00      	nop
 80114b2:	3714      	adds	r7, #20
 80114b4:	46bd      	mov	sp, r7
 80114b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114ba:	4770      	bx	lr
 80114bc:	20007644 	.word	0x20007644
 80114c0:	20007630 	.word	0x20007630
 80114c4:	20007624 	.word	0x20007624
 80114c8:	2000714c 	.word	0x2000714c
 80114cc:	20007148 	.word	0x20007148

080114d0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80114d0:	b580      	push	{r7, lr}
 80114d2:	b084      	sub	sp, #16
 80114d4:	af00      	add	r7, sp, #0
 80114d6:	6078      	str	r0, [r7, #4]
 80114d8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80114da:	687b      	ldr	r3, [r7, #4]
 80114dc:	2b00      	cmp	r3, #0
 80114de:	d109      	bne.n	80114f4 <vTaskPlaceOnEventList+0x24>
 80114e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80114e4:	f383 8811 	msr	BASEPRI, r3
 80114e8:	f3bf 8f6f 	isb	sy
 80114ec:	f3bf 8f4f 	dsb	sy
 80114f0:	60fb      	str	r3, [r7, #12]
 80114f2:	e7fe      	b.n	80114f2 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80114f4:	4b07      	ldr	r3, [pc, #28]	; (8011514 <vTaskPlaceOnEventList+0x44>)
 80114f6:	681b      	ldr	r3, [r3, #0]
 80114f8:	3318      	adds	r3, #24
 80114fa:	4619      	mov	r1, r3
 80114fc:	6878      	ldr	r0, [r7, #4]
 80114fe:	f7fe faa6 	bl	800fa4e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8011502:	2101      	movs	r1, #1
 8011504:	6838      	ldr	r0, [r7, #0]
 8011506:	f000 fdfb 	bl	8012100 <prvAddCurrentTaskToDelayedList>
}
 801150a:	bf00      	nop
 801150c:	3710      	adds	r7, #16
 801150e:	46bd      	mov	sp, r7
 8011510:	bd80      	pop	{r7, pc}
 8011512:	bf00      	nop
 8011514:	20007148 	.word	0x20007148

08011518 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8011518:	b580      	push	{r7, lr}
 801151a:	b086      	sub	sp, #24
 801151c:	af00      	add	r7, sp, #0
 801151e:	60f8      	str	r0, [r7, #12]
 8011520:	60b9      	str	r1, [r7, #8]
 8011522:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8011524:	68fb      	ldr	r3, [r7, #12]
 8011526:	2b00      	cmp	r3, #0
 8011528:	d109      	bne.n	801153e <vTaskPlaceOnEventListRestricted+0x26>
 801152a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801152e:	f383 8811 	msr	BASEPRI, r3
 8011532:	f3bf 8f6f 	isb	sy
 8011536:	f3bf 8f4f 	dsb	sy
 801153a:	617b      	str	r3, [r7, #20]
 801153c:	e7fe      	b.n	801153c <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 801153e:	4b0a      	ldr	r3, [pc, #40]	; (8011568 <vTaskPlaceOnEventListRestricted+0x50>)
 8011540:	681b      	ldr	r3, [r3, #0]
 8011542:	3318      	adds	r3, #24
 8011544:	4619      	mov	r1, r3
 8011546:	68f8      	ldr	r0, [r7, #12]
 8011548:	f7fe fa5d 	bl	800fa06 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 801154c:	687b      	ldr	r3, [r7, #4]
 801154e:	2b00      	cmp	r3, #0
 8011550:	d002      	beq.n	8011558 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 8011552:	f04f 33ff 	mov.w	r3, #4294967295
 8011556:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8011558:	6879      	ldr	r1, [r7, #4]
 801155a:	68b8      	ldr	r0, [r7, #8]
 801155c:	f000 fdd0 	bl	8012100 <prvAddCurrentTaskToDelayedList>
	}
 8011560:	bf00      	nop
 8011562:	3718      	adds	r7, #24
 8011564:	46bd      	mov	sp, r7
 8011566:	bd80      	pop	{r7, pc}
 8011568:	20007148 	.word	0x20007148

0801156c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 801156c:	b580      	push	{r7, lr}
 801156e:	b086      	sub	sp, #24
 8011570:	af00      	add	r7, sp, #0
 8011572:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011574:	687b      	ldr	r3, [r7, #4]
 8011576:	68db      	ldr	r3, [r3, #12]
 8011578:	68db      	ldr	r3, [r3, #12]
 801157a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 801157c:	693b      	ldr	r3, [r7, #16]
 801157e:	2b00      	cmp	r3, #0
 8011580:	d109      	bne.n	8011596 <xTaskRemoveFromEventList+0x2a>
 8011582:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011586:	f383 8811 	msr	BASEPRI, r3
 801158a:	f3bf 8f6f 	isb	sy
 801158e:	f3bf 8f4f 	dsb	sy
 8011592:	60fb      	str	r3, [r7, #12]
 8011594:	e7fe      	b.n	8011594 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8011596:	693b      	ldr	r3, [r7, #16]
 8011598:	3318      	adds	r3, #24
 801159a:	4618      	mov	r0, r3
 801159c:	f7fe fa90 	bl	800fac0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80115a0:	4b1e      	ldr	r3, [pc, #120]	; (801161c <xTaskRemoveFromEventList+0xb0>)
 80115a2:	681b      	ldr	r3, [r3, #0]
 80115a4:	2b00      	cmp	r3, #0
 80115a6:	d11f      	bne.n	80115e8 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80115a8:	693b      	ldr	r3, [r7, #16]
 80115aa:	3304      	adds	r3, #4
 80115ac:	4618      	mov	r0, r3
 80115ae:	f7fe fa87 	bl	800fac0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80115b2:	693b      	ldr	r3, [r7, #16]
 80115b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80115b6:	4b1a      	ldr	r3, [pc, #104]	; (8011620 <xTaskRemoveFromEventList+0xb4>)
 80115b8:	681b      	ldr	r3, [r3, #0]
 80115ba:	429a      	cmp	r2, r3
 80115bc:	d903      	bls.n	80115c6 <xTaskRemoveFromEventList+0x5a>
 80115be:	693b      	ldr	r3, [r7, #16]
 80115c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80115c2:	4a17      	ldr	r2, [pc, #92]	; (8011620 <xTaskRemoveFromEventList+0xb4>)
 80115c4:	6013      	str	r3, [r2, #0]
 80115c6:	693b      	ldr	r3, [r7, #16]
 80115c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80115ca:	4613      	mov	r3, r2
 80115cc:	009b      	lsls	r3, r3, #2
 80115ce:	4413      	add	r3, r2
 80115d0:	009b      	lsls	r3, r3, #2
 80115d2:	4a14      	ldr	r2, [pc, #80]	; (8011624 <xTaskRemoveFromEventList+0xb8>)
 80115d4:	441a      	add	r2, r3
 80115d6:	693b      	ldr	r3, [r7, #16]
 80115d8:	3304      	adds	r3, #4
 80115da:	4619      	mov	r1, r3
 80115dc:	4610      	mov	r0, r2
 80115de:	f7fe fa12 	bl	800fa06 <vListInsertEnd>
			normally left unchanged, because it is automatically reset to a new
			value when the tick count equals xNextTaskUnblockTime.  However if
			tickless idling is used it might be more important to enter sleep mode
			at the earliest possible time - so reset xNextTaskUnblockTime here to
			ensure it is updated at the earliest possible time. */
			prvResetNextTaskUnblockTime();
 80115e2:	f000 f981 	bl	80118e8 <prvResetNextTaskUnblockTime>
 80115e6:	e005      	b.n	80115f4 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80115e8:	693b      	ldr	r3, [r7, #16]
 80115ea:	3318      	adds	r3, #24
 80115ec:	4619      	mov	r1, r3
 80115ee:	480e      	ldr	r0, [pc, #56]	; (8011628 <xTaskRemoveFromEventList+0xbc>)
 80115f0:	f7fe fa09 	bl	800fa06 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80115f4:	693b      	ldr	r3, [r7, #16]
 80115f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80115f8:	4b0c      	ldr	r3, [pc, #48]	; (801162c <xTaskRemoveFromEventList+0xc0>)
 80115fa:	681b      	ldr	r3, [r3, #0]
 80115fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80115fe:	429a      	cmp	r2, r3
 8011600:	d905      	bls.n	801160e <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8011602:	2301      	movs	r3, #1
 8011604:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8011606:	4b0a      	ldr	r3, [pc, #40]	; (8011630 <xTaskRemoveFromEventList+0xc4>)
 8011608:	2201      	movs	r2, #1
 801160a:	601a      	str	r2, [r3, #0]
 801160c:	e001      	b.n	8011612 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 801160e:	2300      	movs	r3, #0
 8011610:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8011612:	697b      	ldr	r3, [r7, #20]
}
 8011614:	4618      	mov	r0, r3
 8011616:	3718      	adds	r7, #24
 8011618:	46bd      	mov	sp, r7
 801161a:	bd80      	pop	{r7, pc}
 801161c:	20007644 	.word	0x20007644
 8011620:	20007624 	.word	0x20007624
 8011624:	2000714c 	.word	0x2000714c
 8011628:	200075dc 	.word	0x200075dc
 801162c:	20007148 	.word	0x20007148
 8011630:	20007630 	.word	0x20007630

08011634 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8011634:	b480      	push	{r7}
 8011636:	b083      	sub	sp, #12
 8011638:	af00      	add	r7, sp, #0
 801163a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 801163c:	4b06      	ldr	r3, [pc, #24]	; (8011658 <vTaskInternalSetTimeOutState+0x24>)
 801163e:	681a      	ldr	r2, [r3, #0]
 8011640:	687b      	ldr	r3, [r7, #4]
 8011642:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8011644:	4b05      	ldr	r3, [pc, #20]	; (801165c <vTaskInternalSetTimeOutState+0x28>)
 8011646:	681a      	ldr	r2, [r3, #0]
 8011648:	687b      	ldr	r3, [r7, #4]
 801164a:	605a      	str	r2, [r3, #4]
}
 801164c:	bf00      	nop
 801164e:	370c      	adds	r7, #12
 8011650:	46bd      	mov	sp, r7
 8011652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011656:	4770      	bx	lr
 8011658:	20007634 	.word	0x20007634
 801165c:	20007620 	.word	0x20007620

08011660 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8011660:	b580      	push	{r7, lr}
 8011662:	b088      	sub	sp, #32
 8011664:	af00      	add	r7, sp, #0
 8011666:	6078      	str	r0, [r7, #4]
 8011668:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 801166a:	687b      	ldr	r3, [r7, #4]
 801166c:	2b00      	cmp	r3, #0
 801166e:	d109      	bne.n	8011684 <xTaskCheckForTimeOut+0x24>
 8011670:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011674:	f383 8811 	msr	BASEPRI, r3
 8011678:	f3bf 8f6f 	isb	sy
 801167c:	f3bf 8f4f 	dsb	sy
 8011680:	613b      	str	r3, [r7, #16]
 8011682:	e7fe      	b.n	8011682 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8011684:	683b      	ldr	r3, [r7, #0]
 8011686:	2b00      	cmp	r3, #0
 8011688:	d109      	bne.n	801169e <xTaskCheckForTimeOut+0x3e>
 801168a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801168e:	f383 8811 	msr	BASEPRI, r3
 8011692:	f3bf 8f6f 	isb	sy
 8011696:	f3bf 8f4f 	dsb	sy
 801169a:	60fb      	str	r3, [r7, #12]
 801169c:	e7fe      	b.n	801169c <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 801169e:	f7fd fe95 	bl	800f3cc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80116a2:	4b1d      	ldr	r3, [pc, #116]	; (8011718 <xTaskCheckForTimeOut+0xb8>)
 80116a4:	681b      	ldr	r3, [r3, #0]
 80116a6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80116a8:	687b      	ldr	r3, [r7, #4]
 80116aa:	685b      	ldr	r3, [r3, #4]
 80116ac:	69ba      	ldr	r2, [r7, #24]
 80116ae:	1ad3      	subs	r3, r2, r3
 80116b0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80116b2:	683b      	ldr	r3, [r7, #0]
 80116b4:	681b      	ldr	r3, [r3, #0]
 80116b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80116ba:	d102      	bne.n	80116c2 <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80116bc:	2300      	movs	r3, #0
 80116be:	61fb      	str	r3, [r7, #28]
 80116c0:	e023      	b.n	801170a <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80116c2:	687b      	ldr	r3, [r7, #4]
 80116c4:	681a      	ldr	r2, [r3, #0]
 80116c6:	4b15      	ldr	r3, [pc, #84]	; (801171c <xTaskCheckForTimeOut+0xbc>)
 80116c8:	681b      	ldr	r3, [r3, #0]
 80116ca:	429a      	cmp	r2, r3
 80116cc:	d007      	beq.n	80116de <xTaskCheckForTimeOut+0x7e>
 80116ce:	687b      	ldr	r3, [r7, #4]
 80116d0:	685b      	ldr	r3, [r3, #4]
 80116d2:	69ba      	ldr	r2, [r7, #24]
 80116d4:	429a      	cmp	r2, r3
 80116d6:	d302      	bcc.n	80116de <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80116d8:	2301      	movs	r3, #1
 80116da:	61fb      	str	r3, [r7, #28]
 80116dc:	e015      	b.n	801170a <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80116de:	683b      	ldr	r3, [r7, #0]
 80116e0:	681b      	ldr	r3, [r3, #0]
 80116e2:	697a      	ldr	r2, [r7, #20]
 80116e4:	429a      	cmp	r2, r3
 80116e6:	d20b      	bcs.n	8011700 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80116e8:	683b      	ldr	r3, [r7, #0]
 80116ea:	681a      	ldr	r2, [r3, #0]
 80116ec:	697b      	ldr	r3, [r7, #20]
 80116ee:	1ad2      	subs	r2, r2, r3
 80116f0:	683b      	ldr	r3, [r7, #0]
 80116f2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80116f4:	6878      	ldr	r0, [r7, #4]
 80116f6:	f7ff ff9d 	bl	8011634 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80116fa:	2300      	movs	r3, #0
 80116fc:	61fb      	str	r3, [r7, #28]
 80116fe:	e004      	b.n	801170a <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8011700:	683b      	ldr	r3, [r7, #0]
 8011702:	2200      	movs	r2, #0
 8011704:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8011706:	2301      	movs	r3, #1
 8011708:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 801170a:	f7fd fe8d 	bl	800f428 <vPortExitCritical>

	return xReturn;
 801170e:	69fb      	ldr	r3, [r7, #28]
}
 8011710:	4618      	mov	r0, r3
 8011712:	3720      	adds	r7, #32
 8011714:	46bd      	mov	sp, r7
 8011716:	bd80      	pop	{r7, pc}
 8011718:	20007620 	.word	0x20007620
 801171c:	20007634 	.word	0x20007634

08011720 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8011720:	b480      	push	{r7}
 8011722:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8011724:	4b03      	ldr	r3, [pc, #12]	; (8011734 <vTaskMissedYield+0x14>)
 8011726:	2201      	movs	r2, #1
 8011728:	601a      	str	r2, [r3, #0]
}
 801172a:	bf00      	nop
 801172c:	46bd      	mov	sp, r7
 801172e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011732:	4770      	bx	lr
 8011734:	20007630 	.word	0x20007630

08011738 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8011738:	b580      	push	{r7, lr}
 801173a:	b084      	sub	sp, #16
 801173c:	af00      	add	r7, sp, #0
 801173e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8011740:	f000 f878 	bl	8011834 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8011744:	4b17      	ldr	r3, [pc, #92]	; (80117a4 <prvIdleTask+0x6c>)
 8011746:	681b      	ldr	r3, [r3, #0]
 8011748:	2b01      	cmp	r3, #1
 801174a:	d907      	bls.n	801175c <prvIdleTask+0x24>
			{
				taskYIELD();
 801174c:	4b16      	ldr	r3, [pc, #88]	; (80117a8 <prvIdleTask+0x70>)
 801174e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011752:	601a      	str	r2, [r3, #0]
 8011754:	f3bf 8f4f 	dsb	sy
 8011758:	f3bf 8f6f 	isb	sy
			/* It is not desirable to suspend then resume the scheduler on
			each iteration of the idle task.  Therefore, a preliminary
			test of the expected idle time is performed without the
			scheduler suspended.  The result here is not necessarily
			valid. */
			xExpectedIdleTime = prvGetExpectedIdleTime();
 801175c:	f7ff fcc0 	bl	80110e0 <prvGetExpectedIdleTime>
 8011760:	60f8      	str	r0, [r7, #12]

			if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
 8011762:	68fb      	ldr	r3, [r7, #12]
 8011764:	2b01      	cmp	r3, #1
 8011766:	d9eb      	bls.n	8011740 <prvIdleTask+0x8>
			{
				vTaskSuspendAll();
 8011768:	f7ff fcac 	bl	80110c4 <vTaskSuspendAll>
				{
					/* Now the scheduler is suspended, the expected idle
					time can be sampled again, and this time its value can
					be used. */
					configASSERT( xNextTaskUnblockTime >= xTickCount );
 801176c:	4b0f      	ldr	r3, [pc, #60]	; (80117ac <prvIdleTask+0x74>)
 801176e:	681a      	ldr	r2, [r3, #0]
 8011770:	4b0f      	ldr	r3, [pc, #60]	; (80117b0 <prvIdleTask+0x78>)
 8011772:	681b      	ldr	r3, [r3, #0]
 8011774:	429a      	cmp	r2, r3
 8011776:	d209      	bcs.n	801178c <prvIdleTask+0x54>
 8011778:	f04f 0350 	mov.w	r3, #80	; 0x50
 801177c:	f383 8811 	msr	BASEPRI, r3
 8011780:	f3bf 8f6f 	isb	sy
 8011784:	f3bf 8f4f 	dsb	sy
 8011788:	60bb      	str	r3, [r7, #8]
 801178a:	e7fe      	b.n	801178a <prvIdleTask+0x52>
					xExpectedIdleTime = prvGetExpectedIdleTime();
 801178c:	f7ff fca8 	bl	80110e0 <prvGetExpectedIdleTime>
 8011790:	60f8      	str	r0, [r7, #12]
					/* Define the following macro to set xExpectedIdleTime to 0
					if the application does not want
					portSUPPRESS_TICKS_AND_SLEEP() to be called. */
					configPRE_SUPPRESS_TICKS_AND_SLEEP_PROCESSING( xExpectedIdleTime );

					if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
 8011792:	68fb      	ldr	r3, [r7, #12]
 8011794:	2b01      	cmp	r3, #1
 8011796:	d902      	bls.n	801179e <prvIdleTask+0x66>
					{
						traceLOW_POWER_IDLE_BEGIN();
						portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime );
 8011798:	68f8      	ldr	r0, [r7, #12]
 801179a:	f7f1 f951 	bl	8002a40 <vPortSuppressTicksAndSleep>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}
				( void ) xTaskResumeAll();
 801179e:	f7ff fcd7 	bl	8011150 <xTaskResumeAll>
		prvCheckTasksWaitingTermination();
 80117a2:	e7cd      	b.n	8011740 <prvIdleTask+0x8>
 80117a4:	2000714c 	.word	0x2000714c
 80117a8:	e000ed04 	.word	0xe000ed04
 80117ac:	2000763c 	.word	0x2000763c
 80117b0:	20007620 	.word	0x20007620

080117b4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80117b4:	b580      	push	{r7, lr}
 80117b6:	b082      	sub	sp, #8
 80117b8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80117ba:	2300      	movs	r3, #0
 80117bc:	607b      	str	r3, [r7, #4]
 80117be:	e00c      	b.n	80117da <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80117c0:	687a      	ldr	r2, [r7, #4]
 80117c2:	4613      	mov	r3, r2
 80117c4:	009b      	lsls	r3, r3, #2
 80117c6:	4413      	add	r3, r2
 80117c8:	009b      	lsls	r3, r3, #2
 80117ca:	4a12      	ldr	r2, [pc, #72]	; (8011814 <prvInitialiseTaskLists+0x60>)
 80117cc:	4413      	add	r3, r2
 80117ce:	4618      	mov	r0, r3
 80117d0:	f7fe f8ec 	bl	800f9ac <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80117d4:	687b      	ldr	r3, [r7, #4]
 80117d6:	3301      	adds	r3, #1
 80117d8:	607b      	str	r3, [r7, #4]
 80117da:	687b      	ldr	r3, [r7, #4]
 80117dc:	2b37      	cmp	r3, #55	; 0x37
 80117de:	d9ef      	bls.n	80117c0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80117e0:	480d      	ldr	r0, [pc, #52]	; (8011818 <prvInitialiseTaskLists+0x64>)
 80117e2:	f7fe f8e3 	bl	800f9ac <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80117e6:	480d      	ldr	r0, [pc, #52]	; (801181c <prvInitialiseTaskLists+0x68>)
 80117e8:	f7fe f8e0 	bl	800f9ac <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80117ec:	480c      	ldr	r0, [pc, #48]	; (8011820 <prvInitialiseTaskLists+0x6c>)
 80117ee:	f7fe f8dd 	bl	800f9ac <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80117f2:	480c      	ldr	r0, [pc, #48]	; (8011824 <prvInitialiseTaskLists+0x70>)
 80117f4:	f7fe f8da 	bl	800f9ac <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80117f8:	480b      	ldr	r0, [pc, #44]	; (8011828 <prvInitialiseTaskLists+0x74>)
 80117fa:	f7fe f8d7 	bl	800f9ac <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80117fe:	4b0b      	ldr	r3, [pc, #44]	; (801182c <prvInitialiseTaskLists+0x78>)
 8011800:	4a05      	ldr	r2, [pc, #20]	; (8011818 <prvInitialiseTaskLists+0x64>)
 8011802:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8011804:	4b0a      	ldr	r3, [pc, #40]	; (8011830 <prvInitialiseTaskLists+0x7c>)
 8011806:	4a05      	ldr	r2, [pc, #20]	; (801181c <prvInitialiseTaskLists+0x68>)
 8011808:	601a      	str	r2, [r3, #0]
}
 801180a:	bf00      	nop
 801180c:	3708      	adds	r7, #8
 801180e:	46bd      	mov	sp, r7
 8011810:	bd80      	pop	{r7, pc}
 8011812:	bf00      	nop
 8011814:	2000714c 	.word	0x2000714c
 8011818:	200075ac 	.word	0x200075ac
 801181c:	200075c0 	.word	0x200075c0
 8011820:	200075dc 	.word	0x200075dc
 8011824:	200075f0 	.word	0x200075f0
 8011828:	20007608 	.word	0x20007608
 801182c:	200075d4 	.word	0x200075d4
 8011830:	200075d8 	.word	0x200075d8

08011834 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8011834:	b580      	push	{r7, lr}
 8011836:	b082      	sub	sp, #8
 8011838:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 801183a:	e019      	b.n	8011870 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 801183c:	f7fd fdc6 	bl	800f3cc <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011840:	4b0f      	ldr	r3, [pc, #60]	; (8011880 <prvCheckTasksWaitingTermination+0x4c>)
 8011842:	68db      	ldr	r3, [r3, #12]
 8011844:	68db      	ldr	r3, [r3, #12]
 8011846:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8011848:	687b      	ldr	r3, [r7, #4]
 801184a:	3304      	adds	r3, #4
 801184c:	4618      	mov	r0, r3
 801184e:	f7fe f937 	bl	800fac0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8011852:	4b0c      	ldr	r3, [pc, #48]	; (8011884 <prvCheckTasksWaitingTermination+0x50>)
 8011854:	681b      	ldr	r3, [r3, #0]
 8011856:	3b01      	subs	r3, #1
 8011858:	4a0a      	ldr	r2, [pc, #40]	; (8011884 <prvCheckTasksWaitingTermination+0x50>)
 801185a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 801185c:	4b0a      	ldr	r3, [pc, #40]	; (8011888 <prvCheckTasksWaitingTermination+0x54>)
 801185e:	681b      	ldr	r3, [r3, #0]
 8011860:	3b01      	subs	r3, #1
 8011862:	4a09      	ldr	r2, [pc, #36]	; (8011888 <prvCheckTasksWaitingTermination+0x54>)
 8011864:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8011866:	f7fd fddf 	bl	800f428 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 801186a:	6878      	ldr	r0, [r7, #4]
 801186c:	f000 f80e 	bl	801188c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8011870:	4b05      	ldr	r3, [pc, #20]	; (8011888 <prvCheckTasksWaitingTermination+0x54>)
 8011872:	681b      	ldr	r3, [r3, #0]
 8011874:	2b00      	cmp	r3, #0
 8011876:	d1e1      	bne.n	801183c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8011878:	bf00      	nop
 801187a:	3708      	adds	r7, #8
 801187c:	46bd      	mov	sp, r7
 801187e:	bd80      	pop	{r7, pc}
 8011880:	200075f0 	.word	0x200075f0
 8011884:	2000761c 	.word	0x2000761c
 8011888:	20007604 	.word	0x20007604

0801188c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 801188c:	b580      	push	{r7, lr}
 801188e:	b084      	sub	sp, #16
 8011890:	af00      	add	r7, sp, #0
 8011892:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8011894:	687b      	ldr	r3, [r7, #4]
 8011896:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 801189a:	2b00      	cmp	r3, #0
 801189c:	d108      	bne.n	80118b0 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 801189e:	687b      	ldr	r3, [r7, #4]
 80118a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80118a2:	4618      	mov	r0, r3
 80118a4:	f7fd ff6e 	bl	800f784 <vPortFree>
				vPortFree( pxTCB );
 80118a8:	6878      	ldr	r0, [r7, #4]
 80118aa:	f7fd ff6b 	bl	800f784 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80118ae:	e017      	b.n	80118e0 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80118b0:	687b      	ldr	r3, [r7, #4]
 80118b2:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80118b6:	2b01      	cmp	r3, #1
 80118b8:	d103      	bne.n	80118c2 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80118ba:	6878      	ldr	r0, [r7, #4]
 80118bc:	f7fd ff62 	bl	800f784 <vPortFree>
	}
 80118c0:	e00e      	b.n	80118e0 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80118c2:	687b      	ldr	r3, [r7, #4]
 80118c4:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80118c8:	2b02      	cmp	r3, #2
 80118ca:	d009      	beq.n	80118e0 <prvDeleteTCB+0x54>
 80118cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80118d0:	f383 8811 	msr	BASEPRI, r3
 80118d4:	f3bf 8f6f 	isb	sy
 80118d8:	f3bf 8f4f 	dsb	sy
 80118dc:	60fb      	str	r3, [r7, #12]
 80118de:	e7fe      	b.n	80118de <prvDeleteTCB+0x52>
	}
 80118e0:	bf00      	nop
 80118e2:	3710      	adds	r7, #16
 80118e4:	46bd      	mov	sp, r7
 80118e6:	bd80      	pop	{r7, pc}

080118e8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80118e8:	b480      	push	{r7}
 80118ea:	b083      	sub	sp, #12
 80118ec:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80118ee:	4b0c      	ldr	r3, [pc, #48]	; (8011920 <prvResetNextTaskUnblockTime+0x38>)
 80118f0:	681b      	ldr	r3, [r3, #0]
 80118f2:	681b      	ldr	r3, [r3, #0]
 80118f4:	2b00      	cmp	r3, #0
 80118f6:	d104      	bne.n	8011902 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80118f8:	4b0a      	ldr	r3, [pc, #40]	; (8011924 <prvResetNextTaskUnblockTime+0x3c>)
 80118fa:	f04f 32ff 	mov.w	r2, #4294967295
 80118fe:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8011900:	e008      	b.n	8011914 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011902:	4b07      	ldr	r3, [pc, #28]	; (8011920 <prvResetNextTaskUnblockTime+0x38>)
 8011904:	681b      	ldr	r3, [r3, #0]
 8011906:	68db      	ldr	r3, [r3, #12]
 8011908:	68db      	ldr	r3, [r3, #12]
 801190a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 801190c:	687b      	ldr	r3, [r7, #4]
 801190e:	685b      	ldr	r3, [r3, #4]
 8011910:	4a04      	ldr	r2, [pc, #16]	; (8011924 <prvResetNextTaskUnblockTime+0x3c>)
 8011912:	6013      	str	r3, [r2, #0]
}
 8011914:	bf00      	nop
 8011916:	370c      	adds	r7, #12
 8011918:	46bd      	mov	sp, r7
 801191a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801191e:	4770      	bx	lr
 8011920:	200075d4 	.word	0x200075d4
 8011924:	2000763c 	.word	0x2000763c

08011928 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8011928:	b480      	push	{r7}
 801192a:	b083      	sub	sp, #12
 801192c:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 801192e:	4b05      	ldr	r3, [pc, #20]	; (8011944 <xTaskGetCurrentTaskHandle+0x1c>)
 8011930:	681b      	ldr	r3, [r3, #0]
 8011932:	607b      	str	r3, [r7, #4]

		return xReturn;
 8011934:	687b      	ldr	r3, [r7, #4]
	}
 8011936:	4618      	mov	r0, r3
 8011938:	370c      	adds	r7, #12
 801193a:	46bd      	mov	sp, r7
 801193c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011940:	4770      	bx	lr
 8011942:	bf00      	nop
 8011944:	20007148 	.word	0x20007148

08011948 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8011948:	b480      	push	{r7}
 801194a:	b083      	sub	sp, #12
 801194c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 801194e:	4b0b      	ldr	r3, [pc, #44]	; (801197c <xTaskGetSchedulerState+0x34>)
 8011950:	681b      	ldr	r3, [r3, #0]
 8011952:	2b00      	cmp	r3, #0
 8011954:	d102      	bne.n	801195c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8011956:	2301      	movs	r3, #1
 8011958:	607b      	str	r3, [r7, #4]
 801195a:	e008      	b.n	801196e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801195c:	4b08      	ldr	r3, [pc, #32]	; (8011980 <xTaskGetSchedulerState+0x38>)
 801195e:	681b      	ldr	r3, [r3, #0]
 8011960:	2b00      	cmp	r3, #0
 8011962:	d102      	bne.n	801196a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8011964:	2302      	movs	r3, #2
 8011966:	607b      	str	r3, [r7, #4]
 8011968:	e001      	b.n	801196e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 801196a:	2300      	movs	r3, #0
 801196c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 801196e:	687b      	ldr	r3, [r7, #4]
	}
 8011970:	4618      	mov	r0, r3
 8011972:	370c      	adds	r7, #12
 8011974:	46bd      	mov	sp, r7
 8011976:	f85d 7b04 	ldr.w	r7, [sp], #4
 801197a:	4770      	bx	lr
 801197c:	20007628 	.word	0x20007628
 8011980:	20007644 	.word	0x20007644

08011984 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8011984:	b580      	push	{r7, lr}
 8011986:	b084      	sub	sp, #16
 8011988:	af00      	add	r7, sp, #0
 801198a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 801198c:	687b      	ldr	r3, [r7, #4]
 801198e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8011990:	2300      	movs	r3, #0
 8011992:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8011994:	687b      	ldr	r3, [r7, #4]
 8011996:	2b00      	cmp	r3, #0
 8011998:	d051      	beq.n	8011a3e <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 801199a:	68bb      	ldr	r3, [r7, #8]
 801199c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801199e:	4b2a      	ldr	r3, [pc, #168]	; (8011a48 <xTaskPriorityInherit+0xc4>)
 80119a0:	681b      	ldr	r3, [r3, #0]
 80119a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80119a4:	429a      	cmp	r2, r3
 80119a6:	d241      	bcs.n	8011a2c <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80119a8:	68bb      	ldr	r3, [r7, #8]
 80119aa:	699b      	ldr	r3, [r3, #24]
 80119ac:	2b00      	cmp	r3, #0
 80119ae:	db06      	blt.n	80119be <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80119b0:	4b25      	ldr	r3, [pc, #148]	; (8011a48 <xTaskPriorityInherit+0xc4>)
 80119b2:	681b      	ldr	r3, [r3, #0]
 80119b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80119b6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80119ba:	68bb      	ldr	r3, [r7, #8]
 80119bc:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80119be:	68bb      	ldr	r3, [r7, #8]
 80119c0:	6959      	ldr	r1, [r3, #20]
 80119c2:	68bb      	ldr	r3, [r7, #8]
 80119c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80119c6:	4613      	mov	r3, r2
 80119c8:	009b      	lsls	r3, r3, #2
 80119ca:	4413      	add	r3, r2
 80119cc:	009b      	lsls	r3, r3, #2
 80119ce:	4a1f      	ldr	r2, [pc, #124]	; (8011a4c <xTaskPriorityInherit+0xc8>)
 80119d0:	4413      	add	r3, r2
 80119d2:	4299      	cmp	r1, r3
 80119d4:	d122      	bne.n	8011a1c <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80119d6:	68bb      	ldr	r3, [r7, #8]
 80119d8:	3304      	adds	r3, #4
 80119da:	4618      	mov	r0, r3
 80119dc:	f7fe f870 	bl	800fac0 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80119e0:	4b19      	ldr	r3, [pc, #100]	; (8011a48 <xTaskPriorityInherit+0xc4>)
 80119e2:	681b      	ldr	r3, [r3, #0]
 80119e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80119e6:	68bb      	ldr	r3, [r7, #8]
 80119e8:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80119ea:	68bb      	ldr	r3, [r7, #8]
 80119ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80119ee:	4b18      	ldr	r3, [pc, #96]	; (8011a50 <xTaskPriorityInherit+0xcc>)
 80119f0:	681b      	ldr	r3, [r3, #0]
 80119f2:	429a      	cmp	r2, r3
 80119f4:	d903      	bls.n	80119fe <xTaskPriorityInherit+0x7a>
 80119f6:	68bb      	ldr	r3, [r7, #8]
 80119f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80119fa:	4a15      	ldr	r2, [pc, #84]	; (8011a50 <xTaskPriorityInherit+0xcc>)
 80119fc:	6013      	str	r3, [r2, #0]
 80119fe:	68bb      	ldr	r3, [r7, #8]
 8011a00:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011a02:	4613      	mov	r3, r2
 8011a04:	009b      	lsls	r3, r3, #2
 8011a06:	4413      	add	r3, r2
 8011a08:	009b      	lsls	r3, r3, #2
 8011a0a:	4a10      	ldr	r2, [pc, #64]	; (8011a4c <xTaskPriorityInherit+0xc8>)
 8011a0c:	441a      	add	r2, r3
 8011a0e:	68bb      	ldr	r3, [r7, #8]
 8011a10:	3304      	adds	r3, #4
 8011a12:	4619      	mov	r1, r3
 8011a14:	4610      	mov	r0, r2
 8011a16:	f7fd fff6 	bl	800fa06 <vListInsertEnd>
 8011a1a:	e004      	b.n	8011a26 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8011a1c:	4b0a      	ldr	r3, [pc, #40]	; (8011a48 <xTaskPriorityInherit+0xc4>)
 8011a1e:	681b      	ldr	r3, [r3, #0]
 8011a20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011a22:	68bb      	ldr	r3, [r7, #8]
 8011a24:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8011a26:	2301      	movs	r3, #1
 8011a28:	60fb      	str	r3, [r7, #12]
 8011a2a:	e008      	b.n	8011a3e <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8011a2c:	68bb      	ldr	r3, [r7, #8]
 8011a2e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8011a30:	4b05      	ldr	r3, [pc, #20]	; (8011a48 <xTaskPriorityInherit+0xc4>)
 8011a32:	681b      	ldr	r3, [r3, #0]
 8011a34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011a36:	429a      	cmp	r2, r3
 8011a38:	d201      	bcs.n	8011a3e <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8011a3a:	2301      	movs	r3, #1
 8011a3c:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8011a3e:	68fb      	ldr	r3, [r7, #12]
	}
 8011a40:	4618      	mov	r0, r3
 8011a42:	3710      	adds	r7, #16
 8011a44:	46bd      	mov	sp, r7
 8011a46:	bd80      	pop	{r7, pc}
 8011a48:	20007148 	.word	0x20007148
 8011a4c:	2000714c 	.word	0x2000714c
 8011a50:	20007624 	.word	0x20007624

08011a54 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8011a54:	b580      	push	{r7, lr}
 8011a56:	b086      	sub	sp, #24
 8011a58:	af00      	add	r7, sp, #0
 8011a5a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8011a5c:	687b      	ldr	r3, [r7, #4]
 8011a5e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8011a60:	2300      	movs	r3, #0
 8011a62:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8011a64:	687b      	ldr	r3, [r7, #4]
 8011a66:	2b00      	cmp	r3, #0
 8011a68:	d054      	beq.n	8011b14 <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8011a6a:	4b2d      	ldr	r3, [pc, #180]	; (8011b20 <xTaskPriorityDisinherit+0xcc>)
 8011a6c:	681b      	ldr	r3, [r3, #0]
 8011a6e:	693a      	ldr	r2, [r7, #16]
 8011a70:	429a      	cmp	r2, r3
 8011a72:	d009      	beq.n	8011a88 <xTaskPriorityDisinherit+0x34>
 8011a74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011a78:	f383 8811 	msr	BASEPRI, r3
 8011a7c:	f3bf 8f6f 	isb	sy
 8011a80:	f3bf 8f4f 	dsb	sy
 8011a84:	60fb      	str	r3, [r7, #12]
 8011a86:	e7fe      	b.n	8011a86 <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8011a88:	693b      	ldr	r3, [r7, #16]
 8011a8a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011a8c:	2b00      	cmp	r3, #0
 8011a8e:	d109      	bne.n	8011aa4 <xTaskPriorityDisinherit+0x50>
 8011a90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011a94:	f383 8811 	msr	BASEPRI, r3
 8011a98:	f3bf 8f6f 	isb	sy
 8011a9c:	f3bf 8f4f 	dsb	sy
 8011aa0:	60bb      	str	r3, [r7, #8]
 8011aa2:	e7fe      	b.n	8011aa2 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8011aa4:	693b      	ldr	r3, [r7, #16]
 8011aa6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011aa8:	1e5a      	subs	r2, r3, #1
 8011aaa:	693b      	ldr	r3, [r7, #16]
 8011aac:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8011aae:	693b      	ldr	r3, [r7, #16]
 8011ab0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011ab2:	693b      	ldr	r3, [r7, #16]
 8011ab4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8011ab6:	429a      	cmp	r2, r3
 8011ab8:	d02c      	beq.n	8011b14 <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8011aba:	693b      	ldr	r3, [r7, #16]
 8011abc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011abe:	2b00      	cmp	r3, #0
 8011ac0:	d128      	bne.n	8011b14 <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8011ac2:	693b      	ldr	r3, [r7, #16]
 8011ac4:	3304      	adds	r3, #4
 8011ac6:	4618      	mov	r0, r3
 8011ac8:	f7fd fffa 	bl	800fac0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8011acc:	693b      	ldr	r3, [r7, #16]
 8011ace:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8011ad0:	693b      	ldr	r3, [r7, #16]
 8011ad2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011ad4:	693b      	ldr	r3, [r7, #16]
 8011ad6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011ad8:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8011adc:	693b      	ldr	r3, [r7, #16]
 8011ade:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8011ae0:	693b      	ldr	r3, [r7, #16]
 8011ae2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011ae4:	4b0f      	ldr	r3, [pc, #60]	; (8011b24 <xTaskPriorityDisinherit+0xd0>)
 8011ae6:	681b      	ldr	r3, [r3, #0]
 8011ae8:	429a      	cmp	r2, r3
 8011aea:	d903      	bls.n	8011af4 <xTaskPriorityDisinherit+0xa0>
 8011aec:	693b      	ldr	r3, [r7, #16]
 8011aee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011af0:	4a0c      	ldr	r2, [pc, #48]	; (8011b24 <xTaskPriorityDisinherit+0xd0>)
 8011af2:	6013      	str	r3, [r2, #0]
 8011af4:	693b      	ldr	r3, [r7, #16]
 8011af6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011af8:	4613      	mov	r3, r2
 8011afa:	009b      	lsls	r3, r3, #2
 8011afc:	4413      	add	r3, r2
 8011afe:	009b      	lsls	r3, r3, #2
 8011b00:	4a09      	ldr	r2, [pc, #36]	; (8011b28 <xTaskPriorityDisinherit+0xd4>)
 8011b02:	441a      	add	r2, r3
 8011b04:	693b      	ldr	r3, [r7, #16]
 8011b06:	3304      	adds	r3, #4
 8011b08:	4619      	mov	r1, r3
 8011b0a:	4610      	mov	r0, r2
 8011b0c:	f7fd ff7b 	bl	800fa06 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8011b10:	2301      	movs	r3, #1
 8011b12:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8011b14:	697b      	ldr	r3, [r7, #20]
	}
 8011b16:	4618      	mov	r0, r3
 8011b18:	3718      	adds	r7, #24
 8011b1a:	46bd      	mov	sp, r7
 8011b1c:	bd80      	pop	{r7, pc}
 8011b1e:	bf00      	nop
 8011b20:	20007148 	.word	0x20007148
 8011b24:	20007624 	.word	0x20007624
 8011b28:	2000714c 	.word	0x2000714c

08011b2c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8011b2c:	b580      	push	{r7, lr}
 8011b2e:	b088      	sub	sp, #32
 8011b30:	af00      	add	r7, sp, #0
 8011b32:	6078      	str	r0, [r7, #4]
 8011b34:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8011b36:	687b      	ldr	r3, [r7, #4]
 8011b38:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8011b3a:	2301      	movs	r3, #1
 8011b3c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8011b3e:	687b      	ldr	r3, [r7, #4]
 8011b40:	2b00      	cmp	r3, #0
 8011b42:	d068      	beq.n	8011c16 <vTaskPriorityDisinheritAfterTimeout+0xea>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8011b44:	69bb      	ldr	r3, [r7, #24]
 8011b46:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011b48:	2b00      	cmp	r3, #0
 8011b4a:	d109      	bne.n	8011b60 <vTaskPriorityDisinheritAfterTimeout+0x34>
 8011b4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011b50:	f383 8811 	msr	BASEPRI, r3
 8011b54:	f3bf 8f6f 	isb	sy
 8011b58:	f3bf 8f4f 	dsb	sy
 8011b5c:	60fb      	str	r3, [r7, #12]
 8011b5e:	e7fe      	b.n	8011b5e <vTaskPriorityDisinheritAfterTimeout+0x32>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8011b60:	69bb      	ldr	r3, [r7, #24]
 8011b62:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8011b64:	683a      	ldr	r2, [r7, #0]
 8011b66:	429a      	cmp	r2, r3
 8011b68:	d902      	bls.n	8011b70 <vTaskPriorityDisinheritAfterTimeout+0x44>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8011b6a:	683b      	ldr	r3, [r7, #0]
 8011b6c:	61fb      	str	r3, [r7, #28]
 8011b6e:	e002      	b.n	8011b76 <vTaskPriorityDisinheritAfterTimeout+0x4a>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8011b70:	69bb      	ldr	r3, [r7, #24]
 8011b72:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8011b74:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8011b76:	69bb      	ldr	r3, [r7, #24]
 8011b78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011b7a:	69fa      	ldr	r2, [r7, #28]
 8011b7c:	429a      	cmp	r2, r3
 8011b7e:	d04a      	beq.n	8011c16 <vTaskPriorityDisinheritAfterTimeout+0xea>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8011b80:	69bb      	ldr	r3, [r7, #24]
 8011b82:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011b84:	697a      	ldr	r2, [r7, #20]
 8011b86:	429a      	cmp	r2, r3
 8011b88:	d145      	bne.n	8011c16 <vTaskPriorityDisinheritAfterTimeout+0xea>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8011b8a:	4b25      	ldr	r3, [pc, #148]	; (8011c20 <vTaskPriorityDisinheritAfterTimeout+0xf4>)
 8011b8c:	681b      	ldr	r3, [r3, #0]
 8011b8e:	69ba      	ldr	r2, [r7, #24]
 8011b90:	429a      	cmp	r2, r3
 8011b92:	d109      	bne.n	8011ba8 <vTaskPriorityDisinheritAfterTimeout+0x7c>
 8011b94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011b98:	f383 8811 	msr	BASEPRI, r3
 8011b9c:	f3bf 8f6f 	isb	sy
 8011ba0:	f3bf 8f4f 	dsb	sy
 8011ba4:	60bb      	str	r3, [r7, #8]
 8011ba6:	e7fe      	b.n	8011ba6 <vTaskPriorityDisinheritAfterTimeout+0x7a>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8011ba8:	69bb      	ldr	r3, [r7, #24]
 8011baa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011bac:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8011bae:	69bb      	ldr	r3, [r7, #24]
 8011bb0:	69fa      	ldr	r2, [r7, #28]
 8011bb2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8011bb4:	69bb      	ldr	r3, [r7, #24]
 8011bb6:	699b      	ldr	r3, [r3, #24]
 8011bb8:	2b00      	cmp	r3, #0
 8011bba:	db04      	blt.n	8011bc6 <vTaskPriorityDisinheritAfterTimeout+0x9a>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011bbc:	69fb      	ldr	r3, [r7, #28]
 8011bbe:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8011bc2:	69bb      	ldr	r3, [r7, #24]
 8011bc4:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8011bc6:	69bb      	ldr	r3, [r7, #24]
 8011bc8:	6959      	ldr	r1, [r3, #20]
 8011bca:	693a      	ldr	r2, [r7, #16]
 8011bcc:	4613      	mov	r3, r2
 8011bce:	009b      	lsls	r3, r3, #2
 8011bd0:	4413      	add	r3, r2
 8011bd2:	009b      	lsls	r3, r3, #2
 8011bd4:	4a13      	ldr	r2, [pc, #76]	; (8011c24 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 8011bd6:	4413      	add	r3, r2
 8011bd8:	4299      	cmp	r1, r3
 8011bda:	d11c      	bne.n	8011c16 <vTaskPriorityDisinheritAfterTimeout+0xea>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8011bdc:	69bb      	ldr	r3, [r7, #24]
 8011bde:	3304      	adds	r3, #4
 8011be0:	4618      	mov	r0, r3
 8011be2:	f7fd ff6d 	bl	800fac0 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8011be6:	69bb      	ldr	r3, [r7, #24]
 8011be8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011bea:	4b0f      	ldr	r3, [pc, #60]	; (8011c28 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8011bec:	681b      	ldr	r3, [r3, #0]
 8011bee:	429a      	cmp	r2, r3
 8011bf0:	d903      	bls.n	8011bfa <vTaskPriorityDisinheritAfterTimeout+0xce>
 8011bf2:	69bb      	ldr	r3, [r7, #24]
 8011bf4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011bf6:	4a0c      	ldr	r2, [pc, #48]	; (8011c28 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8011bf8:	6013      	str	r3, [r2, #0]
 8011bfa:	69bb      	ldr	r3, [r7, #24]
 8011bfc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011bfe:	4613      	mov	r3, r2
 8011c00:	009b      	lsls	r3, r3, #2
 8011c02:	4413      	add	r3, r2
 8011c04:	009b      	lsls	r3, r3, #2
 8011c06:	4a07      	ldr	r2, [pc, #28]	; (8011c24 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 8011c08:	441a      	add	r2, r3
 8011c0a:	69bb      	ldr	r3, [r7, #24]
 8011c0c:	3304      	adds	r3, #4
 8011c0e:	4619      	mov	r1, r3
 8011c10:	4610      	mov	r0, r2
 8011c12:	f7fd fef8 	bl	800fa06 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8011c16:	bf00      	nop
 8011c18:	3720      	adds	r7, #32
 8011c1a:	46bd      	mov	sp, r7
 8011c1c:	bd80      	pop	{r7, pc}
 8011c1e:	bf00      	nop
 8011c20:	20007148 	.word	0x20007148
 8011c24:	2000714c 	.word	0x2000714c
 8011c28:	20007624 	.word	0x20007624

08011c2c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8011c2c:	b480      	push	{r7}
 8011c2e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8011c30:	4b07      	ldr	r3, [pc, #28]	; (8011c50 <pvTaskIncrementMutexHeldCount+0x24>)
 8011c32:	681b      	ldr	r3, [r3, #0]
 8011c34:	2b00      	cmp	r3, #0
 8011c36:	d004      	beq.n	8011c42 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8011c38:	4b05      	ldr	r3, [pc, #20]	; (8011c50 <pvTaskIncrementMutexHeldCount+0x24>)
 8011c3a:	681b      	ldr	r3, [r3, #0]
 8011c3c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8011c3e:	3201      	adds	r2, #1
 8011c40:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 8011c42:	4b03      	ldr	r3, [pc, #12]	; (8011c50 <pvTaskIncrementMutexHeldCount+0x24>)
 8011c44:	681b      	ldr	r3, [r3, #0]
	}
 8011c46:	4618      	mov	r0, r3
 8011c48:	46bd      	mov	sp, r7
 8011c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c4e:	4770      	bx	lr
 8011c50:	20007148 	.word	0x20007148

08011c54 <ulTaskNotifyTake>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
	{
 8011c54:	b580      	push	{r7, lr}
 8011c56:	b084      	sub	sp, #16
 8011c58:	af00      	add	r7, sp, #0
 8011c5a:	6078      	str	r0, [r7, #4]
 8011c5c:	6039      	str	r1, [r7, #0]
	uint32_t ulReturn;

		taskENTER_CRITICAL();
 8011c5e:	f7fd fbb5 	bl	800f3cc <vPortEnterCritical>
		{
			/* Only block if the notification count is not already non-zero. */
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 8011c62:	4b1e      	ldr	r3, [pc, #120]	; (8011cdc <ulTaskNotifyTake+0x88>)
 8011c64:	681b      	ldr	r3, [r3, #0]
 8011c66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011c68:	2b00      	cmp	r3, #0
 8011c6a:	d113      	bne.n	8011c94 <ulTaskNotifyTake+0x40>
			{
				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 8011c6c:	4b1b      	ldr	r3, [pc, #108]	; (8011cdc <ulTaskNotifyTake+0x88>)
 8011c6e:	681b      	ldr	r3, [r3, #0]
 8011c70:	2201      	movs	r2, #1
 8011c72:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

				if( xTicksToWait > ( TickType_t ) 0 )
 8011c76:	683b      	ldr	r3, [r7, #0]
 8011c78:	2b00      	cmp	r3, #0
 8011c7a:	d00b      	beq.n	8011c94 <ulTaskNotifyTake+0x40>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8011c7c:	2101      	movs	r1, #1
 8011c7e:	6838      	ldr	r0, [r7, #0]
 8011c80:	f000 fa3e 	bl	8012100 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 8011c84:	4b16      	ldr	r3, [pc, #88]	; (8011ce0 <ulTaskNotifyTake+0x8c>)
 8011c86:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011c8a:	601a      	str	r2, [r3, #0]
 8011c8c:	f3bf 8f4f 	dsb	sy
 8011c90:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8011c94:	f7fd fbc8 	bl	800f428 <vPortExitCritical>

		taskENTER_CRITICAL();
 8011c98:	f7fd fb98 	bl	800f3cc <vPortEnterCritical>
		{
			traceTASK_NOTIFY_TAKE();
			ulReturn = pxCurrentTCB->ulNotifiedValue;
 8011c9c:	4b0f      	ldr	r3, [pc, #60]	; (8011cdc <ulTaskNotifyTake+0x88>)
 8011c9e:	681b      	ldr	r3, [r3, #0]
 8011ca0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011ca2:	60fb      	str	r3, [r7, #12]

			if( ulReturn != 0UL )
 8011ca4:	68fb      	ldr	r3, [r7, #12]
 8011ca6:	2b00      	cmp	r3, #0
 8011ca8:	d00c      	beq.n	8011cc4 <ulTaskNotifyTake+0x70>
			{
				if( xClearCountOnExit != pdFALSE )
 8011caa:	687b      	ldr	r3, [r7, #4]
 8011cac:	2b00      	cmp	r3, #0
 8011cae:	d004      	beq.n	8011cba <ulTaskNotifyTake+0x66>
				{
					pxCurrentTCB->ulNotifiedValue = 0UL;
 8011cb0:	4b0a      	ldr	r3, [pc, #40]	; (8011cdc <ulTaskNotifyTake+0x88>)
 8011cb2:	681b      	ldr	r3, [r3, #0]
 8011cb4:	2200      	movs	r2, #0
 8011cb6:	655a      	str	r2, [r3, #84]	; 0x54
 8011cb8:	e004      	b.n	8011cc4 <ulTaskNotifyTake+0x70>
				}
				else
				{
					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
 8011cba:	4b08      	ldr	r3, [pc, #32]	; (8011cdc <ulTaskNotifyTake+0x88>)
 8011cbc:	681b      	ldr	r3, [r3, #0]
 8011cbe:	68fa      	ldr	r2, [r7, #12]
 8011cc0:	3a01      	subs	r2, #1
 8011cc2:	655a      	str	r2, [r3, #84]	; 0x54
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8011cc4:	4b05      	ldr	r3, [pc, #20]	; (8011cdc <ulTaskNotifyTake+0x88>)
 8011cc6:	681b      	ldr	r3, [r3, #0]
 8011cc8:	2200      	movs	r2, #0
 8011cca:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
		}
		taskEXIT_CRITICAL();
 8011cce:	f7fd fbab 	bl	800f428 <vPortExitCritical>

		return ulReturn;
 8011cd2:	68fb      	ldr	r3, [r7, #12]
	}
 8011cd4:	4618      	mov	r0, r3
 8011cd6:	3710      	adds	r7, #16
 8011cd8:	46bd      	mov	sp, r7
 8011cda:	bd80      	pop	{r7, pc}
 8011cdc:	20007148 	.word	0x20007148
 8011ce0:	e000ed04 	.word	0xe000ed04

08011ce4 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 8011ce4:	b580      	push	{r7, lr}
 8011ce6:	b086      	sub	sp, #24
 8011ce8:	af00      	add	r7, sp, #0
 8011cea:	60f8      	str	r0, [r7, #12]
 8011cec:	60b9      	str	r1, [r7, #8]
 8011cee:	607a      	str	r2, [r7, #4]
 8011cf0:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 8011cf2:	f7fd fb6b 	bl	800f3cc <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8011cf6:	4b26      	ldr	r3, [pc, #152]	; (8011d90 <xTaskNotifyWait+0xac>)
 8011cf8:	681b      	ldr	r3, [r3, #0]
 8011cfa:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8011cfe:	b2db      	uxtb	r3, r3
 8011d00:	2b02      	cmp	r3, #2
 8011d02:	d01a      	beq.n	8011d3a <xTaskNotifyWait+0x56>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 8011d04:	4b22      	ldr	r3, [pc, #136]	; (8011d90 <xTaskNotifyWait+0xac>)
 8011d06:	681b      	ldr	r3, [r3, #0]
 8011d08:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8011d0a:	68fa      	ldr	r2, [r7, #12]
 8011d0c:	43d2      	mvns	r2, r2
 8011d0e:	400a      	ands	r2, r1
 8011d10:	655a      	str	r2, [r3, #84]	; 0x54

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 8011d12:	4b1f      	ldr	r3, [pc, #124]	; (8011d90 <xTaskNotifyWait+0xac>)
 8011d14:	681b      	ldr	r3, [r3, #0]
 8011d16:	2201      	movs	r2, #1
 8011d18:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

				if( xTicksToWait > ( TickType_t ) 0 )
 8011d1c:	683b      	ldr	r3, [r7, #0]
 8011d1e:	2b00      	cmp	r3, #0
 8011d20:	d00b      	beq.n	8011d3a <xTaskNotifyWait+0x56>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8011d22:	2101      	movs	r1, #1
 8011d24:	6838      	ldr	r0, [r7, #0]
 8011d26:	f000 f9eb 	bl	8012100 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 8011d2a:	4b1a      	ldr	r3, [pc, #104]	; (8011d94 <xTaskNotifyWait+0xb0>)
 8011d2c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011d30:	601a      	str	r2, [r3, #0]
 8011d32:	f3bf 8f4f 	dsb	sy
 8011d36:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8011d3a:	f7fd fb75 	bl	800f428 <vPortExitCritical>

		taskENTER_CRITICAL();
 8011d3e:	f7fd fb45 	bl	800f3cc <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 8011d42:	687b      	ldr	r3, [r7, #4]
 8011d44:	2b00      	cmp	r3, #0
 8011d46:	d004      	beq.n	8011d52 <xTaskNotifyWait+0x6e>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 8011d48:	4b11      	ldr	r3, [pc, #68]	; (8011d90 <xTaskNotifyWait+0xac>)
 8011d4a:	681b      	ldr	r3, [r3, #0]
 8011d4c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8011d4e:	687b      	ldr	r3, [r7, #4]
 8011d50:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8011d52:	4b0f      	ldr	r3, [pc, #60]	; (8011d90 <xTaskNotifyWait+0xac>)
 8011d54:	681b      	ldr	r3, [r3, #0]
 8011d56:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8011d5a:	b2db      	uxtb	r3, r3
 8011d5c:	2b02      	cmp	r3, #2
 8011d5e:	d002      	beq.n	8011d66 <xTaskNotifyWait+0x82>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 8011d60:	2300      	movs	r3, #0
 8011d62:	617b      	str	r3, [r7, #20]
 8011d64:	e008      	b.n	8011d78 <xTaskNotifyWait+0x94>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 8011d66:	4b0a      	ldr	r3, [pc, #40]	; (8011d90 <xTaskNotifyWait+0xac>)
 8011d68:	681b      	ldr	r3, [r3, #0]
 8011d6a:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8011d6c:	68ba      	ldr	r2, [r7, #8]
 8011d6e:	43d2      	mvns	r2, r2
 8011d70:	400a      	ands	r2, r1
 8011d72:	655a      	str	r2, [r3, #84]	; 0x54
				xReturn = pdTRUE;
 8011d74:	2301      	movs	r3, #1
 8011d76:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8011d78:	4b05      	ldr	r3, [pc, #20]	; (8011d90 <xTaskNotifyWait+0xac>)
 8011d7a:	681b      	ldr	r3, [r3, #0]
 8011d7c:	2200      	movs	r2, #0
 8011d7e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
		}
		taskEXIT_CRITICAL();
 8011d82:	f7fd fb51 	bl	800f428 <vPortExitCritical>

		return xReturn;
 8011d86:	697b      	ldr	r3, [r7, #20]
	}
 8011d88:	4618      	mov	r0, r3
 8011d8a:	3718      	adds	r7, #24
 8011d8c:	46bd      	mov	sp, r7
 8011d8e:	bd80      	pop	{r7, pc}
 8011d90:	20007148 	.word	0x20007148
 8011d94:	e000ed04 	.word	0xe000ed04

08011d98 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 8011d98:	b580      	push	{r7, lr}
 8011d9a:	b08a      	sub	sp, #40	; 0x28
 8011d9c:	af00      	add	r7, sp, #0
 8011d9e:	60f8      	str	r0, [r7, #12]
 8011da0:	60b9      	str	r1, [r7, #8]
 8011da2:	603b      	str	r3, [r7, #0]
 8011da4:	4613      	mov	r3, r2
 8011da6:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 8011da8:	2301      	movs	r3, #1
 8011daa:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 8011dac:	68fb      	ldr	r3, [r7, #12]
 8011dae:	2b00      	cmp	r3, #0
 8011db0:	d109      	bne.n	8011dc6 <xTaskGenericNotify+0x2e>
 8011db2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011db6:	f383 8811 	msr	BASEPRI, r3
 8011dba:	f3bf 8f6f 	isb	sy
 8011dbe:	f3bf 8f4f 	dsb	sy
 8011dc2:	61bb      	str	r3, [r7, #24]
 8011dc4:	e7fe      	b.n	8011dc4 <xTaskGenericNotify+0x2c>
		pxTCB = xTaskToNotify;
 8011dc6:	68fb      	ldr	r3, [r7, #12]
 8011dc8:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 8011dca:	f7fd faff 	bl	800f3cc <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 8011dce:	683b      	ldr	r3, [r7, #0]
 8011dd0:	2b00      	cmp	r3, #0
 8011dd2:	d003      	beq.n	8011ddc <xTaskGenericNotify+0x44>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8011dd4:	6a3b      	ldr	r3, [r7, #32]
 8011dd6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8011dd8:	683b      	ldr	r3, [r7, #0]
 8011dda:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8011ddc:	6a3b      	ldr	r3, [r7, #32]
 8011dde:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8011de2:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8011de4:	6a3b      	ldr	r3, [r7, #32]
 8011de6:	2202      	movs	r2, #2
 8011de8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

			switch( eAction )
 8011dec:	79fb      	ldrb	r3, [r7, #7]
 8011dee:	2b04      	cmp	r3, #4
 8011df0:	d827      	bhi.n	8011e42 <xTaskGenericNotify+0xaa>
 8011df2:	a201      	add	r2, pc, #4	; (adr r2, 8011df8 <xTaskGenericNotify+0x60>)
 8011df4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011df8:	08011e61 	.word	0x08011e61
 8011dfc:	08011e0d 	.word	0x08011e0d
 8011e00:	08011e1b 	.word	0x08011e1b
 8011e04:	08011e27 	.word	0x08011e27
 8011e08:	08011e2f 	.word	0x08011e2f
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8011e0c:	6a3b      	ldr	r3, [r7, #32]
 8011e0e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8011e10:	68bb      	ldr	r3, [r7, #8]
 8011e12:	431a      	orrs	r2, r3
 8011e14:	6a3b      	ldr	r3, [r7, #32]
 8011e16:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 8011e18:	e025      	b.n	8011e66 <xTaskGenericNotify+0xce>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8011e1a:	6a3b      	ldr	r3, [r7, #32]
 8011e1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011e1e:	1c5a      	adds	r2, r3, #1
 8011e20:	6a3b      	ldr	r3, [r7, #32]
 8011e22:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 8011e24:	e01f      	b.n	8011e66 <xTaskGenericNotify+0xce>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8011e26:	6a3b      	ldr	r3, [r7, #32]
 8011e28:	68ba      	ldr	r2, [r7, #8]
 8011e2a:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 8011e2c:	e01b      	b.n	8011e66 <xTaskGenericNotify+0xce>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8011e2e:	7ffb      	ldrb	r3, [r7, #31]
 8011e30:	2b02      	cmp	r3, #2
 8011e32:	d003      	beq.n	8011e3c <xTaskGenericNotify+0xa4>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8011e34:	6a3b      	ldr	r3, [r7, #32]
 8011e36:	68ba      	ldr	r2, [r7, #8]
 8011e38:	655a      	str	r2, [r3, #84]	; 0x54
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8011e3a:	e014      	b.n	8011e66 <xTaskGenericNotify+0xce>
						xReturn = pdFAIL;
 8011e3c:	2300      	movs	r3, #0
 8011e3e:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 8011e40:	e011      	b.n	8011e66 <xTaskGenericNotify+0xce>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 8011e42:	6a3b      	ldr	r3, [r7, #32]
 8011e44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011e46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011e4a:	d00b      	beq.n	8011e64 <xTaskGenericNotify+0xcc>
 8011e4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011e50:	f383 8811 	msr	BASEPRI, r3
 8011e54:	f3bf 8f6f 	isb	sy
 8011e58:	f3bf 8f4f 	dsb	sy
 8011e5c:	617b      	str	r3, [r7, #20]
 8011e5e:	e7fe      	b.n	8011e5e <xTaskGenericNotify+0xc6>
					break;
 8011e60:	bf00      	nop
 8011e62:	e000      	b.n	8011e66 <xTaskGenericNotify+0xce>

					break;
 8011e64:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8011e66:	7ffb      	ldrb	r3, [r7, #31]
 8011e68:	2b01      	cmp	r3, #1
 8011e6a:	d13b      	bne.n	8011ee4 <xTaskGenericNotify+0x14c>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8011e6c:	6a3b      	ldr	r3, [r7, #32]
 8011e6e:	3304      	adds	r3, #4
 8011e70:	4618      	mov	r0, r3
 8011e72:	f7fd fe25 	bl	800fac0 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 8011e76:	6a3b      	ldr	r3, [r7, #32]
 8011e78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011e7a:	4b1e      	ldr	r3, [pc, #120]	; (8011ef4 <xTaskGenericNotify+0x15c>)
 8011e7c:	681b      	ldr	r3, [r3, #0]
 8011e7e:	429a      	cmp	r2, r3
 8011e80:	d903      	bls.n	8011e8a <xTaskGenericNotify+0xf2>
 8011e82:	6a3b      	ldr	r3, [r7, #32]
 8011e84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011e86:	4a1b      	ldr	r2, [pc, #108]	; (8011ef4 <xTaskGenericNotify+0x15c>)
 8011e88:	6013      	str	r3, [r2, #0]
 8011e8a:	6a3b      	ldr	r3, [r7, #32]
 8011e8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011e8e:	4613      	mov	r3, r2
 8011e90:	009b      	lsls	r3, r3, #2
 8011e92:	4413      	add	r3, r2
 8011e94:	009b      	lsls	r3, r3, #2
 8011e96:	4a18      	ldr	r2, [pc, #96]	; (8011ef8 <xTaskGenericNotify+0x160>)
 8011e98:	441a      	add	r2, r3
 8011e9a:	6a3b      	ldr	r3, [r7, #32]
 8011e9c:	3304      	adds	r3, #4
 8011e9e:	4619      	mov	r1, r3
 8011ea0:	4610      	mov	r0, r2
 8011ea2:	f7fd fdb0 	bl	800fa06 <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8011ea6:	6a3b      	ldr	r3, [r7, #32]
 8011ea8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011eaa:	2b00      	cmp	r3, #0
 8011eac:	d009      	beq.n	8011ec2 <xTaskGenericNotify+0x12a>
 8011eae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011eb2:	f383 8811 	msr	BASEPRI, r3
 8011eb6:	f3bf 8f6f 	isb	sy
 8011eba:	f3bf 8f4f 	dsb	sy
 8011ebe:	613b      	str	r3, [r7, #16]
 8011ec0:	e7fe      	b.n	8011ec0 <xTaskGenericNotify+0x128>
					the tick count equals xNextTaskUnblockTime.  However if
					tickless idling is used it might be more important to enter
					sleep mode at the earliest possible time - so reset
					xNextTaskUnblockTime here to ensure it is updated at the
					earliest possible time. */
					prvResetNextTaskUnblockTime();
 8011ec2:	f7ff fd11 	bl	80118e8 <prvResetNextTaskUnblockTime>
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8011ec6:	6a3b      	ldr	r3, [r7, #32]
 8011ec8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011eca:	4b0c      	ldr	r3, [pc, #48]	; (8011efc <xTaskGenericNotify+0x164>)
 8011ecc:	681b      	ldr	r3, [r3, #0]
 8011ece:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011ed0:	429a      	cmp	r2, r3
 8011ed2:	d907      	bls.n	8011ee4 <xTaskGenericNotify+0x14c>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 8011ed4:	4b0a      	ldr	r3, [pc, #40]	; (8011f00 <xTaskGenericNotify+0x168>)
 8011ed6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011eda:	601a      	str	r2, [r3, #0]
 8011edc:	f3bf 8f4f 	dsb	sy
 8011ee0:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8011ee4:	f7fd faa0 	bl	800f428 <vPortExitCritical>

		return xReturn;
 8011ee8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 8011eea:	4618      	mov	r0, r3
 8011eec:	3728      	adds	r7, #40	; 0x28
 8011eee:	46bd      	mov	sp, r7
 8011ef0:	bd80      	pop	{r7, pc}
 8011ef2:	bf00      	nop
 8011ef4:	20007624 	.word	0x20007624
 8011ef8:	2000714c 	.word	0x2000714c
 8011efc:	20007148 	.word	0x20007148
 8011f00:	e000ed04 	.word	0xe000ed04

08011f04 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8011f04:	b580      	push	{r7, lr}
 8011f06:	b08e      	sub	sp, #56	; 0x38
 8011f08:	af00      	add	r7, sp, #0
 8011f0a:	60f8      	str	r0, [r7, #12]
 8011f0c:	60b9      	str	r1, [r7, #8]
 8011f0e:	603b      	str	r3, [r7, #0]
 8011f10:	4613      	mov	r3, r2
 8011f12:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 8011f14:	2301      	movs	r3, #1
 8011f16:	637b      	str	r3, [r7, #52]	; 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 8011f18:	68fb      	ldr	r3, [r7, #12]
 8011f1a:	2b00      	cmp	r3, #0
 8011f1c:	d109      	bne.n	8011f32 <xTaskGenericNotifyFromISR+0x2e>
 8011f1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011f22:	f383 8811 	msr	BASEPRI, r3
 8011f26:	f3bf 8f6f 	isb	sy
 8011f2a:	f3bf 8f4f 	dsb	sy
 8011f2e:	627b      	str	r3, [r7, #36]	; 0x24
 8011f30:	e7fe      	b.n	8011f30 <xTaskGenericNotifyFromISR+0x2c>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8011f32:	f7fd fb27 	bl	800f584 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 8011f36:	68fb      	ldr	r3, [r7, #12]
 8011f38:	633b      	str	r3, [r7, #48]	; 0x30
	__asm volatile
 8011f3a:	f3ef 8211 	mrs	r2, BASEPRI
 8011f3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011f42:	f383 8811 	msr	BASEPRI, r3
 8011f46:	f3bf 8f6f 	isb	sy
 8011f4a:	f3bf 8f4f 	dsb	sy
 8011f4e:	623a      	str	r2, [r7, #32]
 8011f50:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 8011f52:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8011f54:	62fb      	str	r3, [r7, #44]	; 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 8011f56:	683b      	ldr	r3, [r7, #0]
 8011f58:	2b00      	cmp	r3, #0
 8011f5a:	d003      	beq.n	8011f64 <xTaskGenericNotifyFromISR+0x60>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8011f5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011f5e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8011f60:	683b      	ldr	r3, [r7, #0]
 8011f62:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8011f64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011f66:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8011f6a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8011f6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011f70:	2202      	movs	r2, #2
 8011f72:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

			switch( eAction )
 8011f76:	79fb      	ldrb	r3, [r7, #7]
 8011f78:	2b04      	cmp	r3, #4
 8011f7a:	d829      	bhi.n	8011fd0 <xTaskGenericNotifyFromISR+0xcc>
 8011f7c:	a201      	add	r2, pc, #4	; (adr r2, 8011f84 <xTaskGenericNotifyFromISR+0x80>)
 8011f7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011f82:	bf00      	nop
 8011f84:	08011fef 	.word	0x08011fef
 8011f88:	08011f99 	.word	0x08011f99
 8011f8c:	08011fa7 	.word	0x08011fa7
 8011f90:	08011fb3 	.word	0x08011fb3
 8011f94:	08011fbb 	.word	0x08011fbb
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8011f98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011f9a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8011f9c:	68bb      	ldr	r3, [r7, #8]
 8011f9e:	431a      	orrs	r2, r3
 8011fa0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011fa2:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 8011fa4:	e026      	b.n	8011ff4 <xTaskGenericNotifyFromISR+0xf0>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8011fa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011fa8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011faa:	1c5a      	adds	r2, r3, #1
 8011fac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011fae:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 8011fb0:	e020      	b.n	8011ff4 <xTaskGenericNotifyFromISR+0xf0>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8011fb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011fb4:	68ba      	ldr	r2, [r7, #8]
 8011fb6:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 8011fb8:	e01c      	b.n	8011ff4 <xTaskGenericNotifyFromISR+0xf0>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8011fba:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8011fbe:	2b02      	cmp	r3, #2
 8011fc0:	d003      	beq.n	8011fca <xTaskGenericNotifyFromISR+0xc6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8011fc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011fc4:	68ba      	ldr	r2, [r7, #8]
 8011fc6:	655a      	str	r2, [r3, #84]	; 0x54
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8011fc8:	e014      	b.n	8011ff4 <xTaskGenericNotifyFromISR+0xf0>
						xReturn = pdFAIL;
 8011fca:	2300      	movs	r3, #0
 8011fcc:	637b      	str	r3, [r7, #52]	; 0x34
					break;
 8011fce:	e011      	b.n	8011ff4 <xTaskGenericNotifyFromISR+0xf0>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 8011fd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011fd2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011fd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011fd8:	d00b      	beq.n	8011ff2 <xTaskGenericNotifyFromISR+0xee>
	__asm volatile
 8011fda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011fde:	f383 8811 	msr	BASEPRI, r3
 8011fe2:	f3bf 8f6f 	isb	sy
 8011fe6:	f3bf 8f4f 	dsb	sy
 8011fea:	61bb      	str	r3, [r7, #24]
 8011fec:	e7fe      	b.n	8011fec <xTaskGenericNotifyFromISR+0xe8>
					break;
 8011fee:	bf00      	nop
 8011ff0:	e000      	b.n	8011ff4 <xTaskGenericNotifyFromISR+0xf0>
					break;
 8011ff2:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8011ff4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8011ff8:	2b01      	cmp	r3, #1
 8011ffa:	d145      	bne.n	8012088 <xTaskGenericNotifyFromISR+0x184>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8011ffc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011ffe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012000:	2b00      	cmp	r3, #0
 8012002:	d009      	beq.n	8012018 <xTaskGenericNotifyFromISR+0x114>
 8012004:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012008:	f383 8811 	msr	BASEPRI, r3
 801200c:	f3bf 8f6f 	isb	sy
 8012010:	f3bf 8f4f 	dsb	sy
 8012014:	617b      	str	r3, [r7, #20]
 8012016:	e7fe      	b.n	8012016 <xTaskGenericNotifyFromISR+0x112>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8012018:	4b20      	ldr	r3, [pc, #128]	; (801209c <xTaskGenericNotifyFromISR+0x198>)
 801201a:	681b      	ldr	r3, [r3, #0]
 801201c:	2b00      	cmp	r3, #0
 801201e:	d11d      	bne.n	801205c <xTaskGenericNotifyFromISR+0x158>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8012020:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012022:	3304      	adds	r3, #4
 8012024:	4618      	mov	r0, r3
 8012026:	f7fd fd4b 	bl	800fac0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 801202a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801202c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801202e:	4b1c      	ldr	r3, [pc, #112]	; (80120a0 <xTaskGenericNotifyFromISR+0x19c>)
 8012030:	681b      	ldr	r3, [r3, #0]
 8012032:	429a      	cmp	r2, r3
 8012034:	d903      	bls.n	801203e <xTaskGenericNotifyFromISR+0x13a>
 8012036:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012038:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801203a:	4a19      	ldr	r2, [pc, #100]	; (80120a0 <xTaskGenericNotifyFromISR+0x19c>)
 801203c:	6013      	str	r3, [r2, #0]
 801203e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012040:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012042:	4613      	mov	r3, r2
 8012044:	009b      	lsls	r3, r3, #2
 8012046:	4413      	add	r3, r2
 8012048:	009b      	lsls	r3, r3, #2
 801204a:	4a16      	ldr	r2, [pc, #88]	; (80120a4 <xTaskGenericNotifyFromISR+0x1a0>)
 801204c:	441a      	add	r2, r3
 801204e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012050:	3304      	adds	r3, #4
 8012052:	4619      	mov	r1, r3
 8012054:	4610      	mov	r0, r2
 8012056:	f7fd fcd6 	bl	800fa06 <vListInsertEnd>
 801205a:	e005      	b.n	8012068 <xTaskGenericNotifyFromISR+0x164>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 801205c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801205e:	3318      	adds	r3, #24
 8012060:	4619      	mov	r1, r3
 8012062:	4811      	ldr	r0, [pc, #68]	; (80120a8 <xTaskGenericNotifyFromISR+0x1a4>)
 8012064:	f7fd fccf 	bl	800fa06 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8012068:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801206a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801206c:	4b0f      	ldr	r3, [pc, #60]	; (80120ac <xTaskGenericNotifyFromISR+0x1a8>)
 801206e:	681b      	ldr	r3, [r3, #0]
 8012070:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012072:	429a      	cmp	r2, r3
 8012074:	d908      	bls.n	8012088 <xTaskGenericNotifyFromISR+0x184>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 8012076:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012078:	2b00      	cmp	r3, #0
 801207a:	d002      	beq.n	8012082 <xTaskGenericNotifyFromISR+0x17e>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 801207c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801207e:	2201      	movs	r2, #1
 8012080:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 8012082:	4b0b      	ldr	r3, [pc, #44]	; (80120b0 <xTaskGenericNotifyFromISR+0x1ac>)
 8012084:	2201      	movs	r2, #1
 8012086:	601a      	str	r2, [r3, #0]
 8012088:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801208a:	613b      	str	r3, [r7, #16]
	__asm volatile
 801208c:	693b      	ldr	r3, [r7, #16]
 801208e:	f383 8811 	msr	BASEPRI, r3
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 8012092:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	}
 8012094:	4618      	mov	r0, r3
 8012096:	3738      	adds	r7, #56	; 0x38
 8012098:	46bd      	mov	sp, r7
 801209a:	bd80      	pop	{r7, pc}
 801209c:	20007644 	.word	0x20007644
 80120a0:	20007624 	.word	0x20007624
 80120a4:	2000714c 	.word	0x2000714c
 80120a8:	200075dc 	.word	0x200075dc
 80120ac:	20007148 	.word	0x20007148
 80120b0:	20007630 	.word	0x20007630

080120b4 <xTaskNotifyStateClear>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyStateClear( TaskHandle_t xTask )
	{
 80120b4:	b580      	push	{r7, lr}
 80120b6:	b084      	sub	sp, #16
 80120b8:	af00      	add	r7, sp, #0
 80120ba:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;
	BaseType_t xReturn;

		/* If null is passed in here then it is the calling task that is having
		its notification state cleared. */
		pxTCB = prvGetTCBFromHandle( xTask );
 80120bc:	687b      	ldr	r3, [r7, #4]
 80120be:	2b00      	cmp	r3, #0
 80120c0:	d102      	bne.n	80120c8 <xTaskNotifyStateClear+0x14>
 80120c2:	4b0e      	ldr	r3, [pc, #56]	; (80120fc <xTaskNotifyStateClear+0x48>)
 80120c4:	681b      	ldr	r3, [r3, #0]
 80120c6:	e000      	b.n	80120ca <xTaskNotifyStateClear+0x16>
 80120c8:	687b      	ldr	r3, [r7, #4]
 80120ca:	60bb      	str	r3, [r7, #8]

		taskENTER_CRITICAL();
 80120cc:	f7fd f97e 	bl	800f3cc <vPortEnterCritical>
		{
			if( pxTCB->ucNotifyState == taskNOTIFICATION_RECEIVED )
 80120d0:	68bb      	ldr	r3, [r7, #8]
 80120d2:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80120d6:	b2db      	uxtb	r3, r3
 80120d8:	2b02      	cmp	r3, #2
 80120da:	d106      	bne.n	80120ea <xTaskNotifyStateClear+0x36>
			{
				pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80120dc:	68bb      	ldr	r3, [r7, #8]
 80120de:	2200      	movs	r2, #0
 80120e0:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
				xReturn = pdPASS;
 80120e4:	2301      	movs	r3, #1
 80120e6:	60fb      	str	r3, [r7, #12]
 80120e8:	e001      	b.n	80120ee <xTaskNotifyStateClear+0x3a>
			}
			else
			{
				xReturn = pdFAIL;
 80120ea:	2300      	movs	r3, #0
 80120ec:	60fb      	str	r3, [r7, #12]
			}
		}
		taskEXIT_CRITICAL();
 80120ee:	f7fd f99b 	bl	800f428 <vPortExitCritical>

		return xReturn;
 80120f2:	68fb      	ldr	r3, [r7, #12]
	}
 80120f4:	4618      	mov	r0, r3
 80120f6:	3710      	adds	r7, #16
 80120f8:	46bd      	mov	sp, r7
 80120fa:	bd80      	pop	{r7, pc}
 80120fc:	20007148 	.word	0x20007148

08012100 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8012100:	b580      	push	{r7, lr}
 8012102:	b084      	sub	sp, #16
 8012104:	af00      	add	r7, sp, #0
 8012106:	6078      	str	r0, [r7, #4]
 8012108:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 801210a:	4b21      	ldr	r3, [pc, #132]	; (8012190 <prvAddCurrentTaskToDelayedList+0x90>)
 801210c:	681b      	ldr	r3, [r3, #0]
 801210e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8012110:	4b20      	ldr	r3, [pc, #128]	; (8012194 <prvAddCurrentTaskToDelayedList+0x94>)
 8012112:	681b      	ldr	r3, [r3, #0]
 8012114:	3304      	adds	r3, #4
 8012116:	4618      	mov	r0, r3
 8012118:	f7fd fcd2 	bl	800fac0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 801211c:	687b      	ldr	r3, [r7, #4]
 801211e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012122:	d10a      	bne.n	801213a <prvAddCurrentTaskToDelayedList+0x3a>
 8012124:	683b      	ldr	r3, [r7, #0]
 8012126:	2b00      	cmp	r3, #0
 8012128:	d007      	beq.n	801213a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801212a:	4b1a      	ldr	r3, [pc, #104]	; (8012194 <prvAddCurrentTaskToDelayedList+0x94>)
 801212c:	681b      	ldr	r3, [r3, #0]
 801212e:	3304      	adds	r3, #4
 8012130:	4619      	mov	r1, r3
 8012132:	4819      	ldr	r0, [pc, #100]	; (8012198 <prvAddCurrentTaskToDelayedList+0x98>)
 8012134:	f7fd fc67 	bl	800fa06 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8012138:	e026      	b.n	8012188 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 801213a:	68fa      	ldr	r2, [r7, #12]
 801213c:	687b      	ldr	r3, [r7, #4]
 801213e:	4413      	add	r3, r2
 8012140:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8012142:	4b14      	ldr	r3, [pc, #80]	; (8012194 <prvAddCurrentTaskToDelayedList+0x94>)
 8012144:	681b      	ldr	r3, [r3, #0]
 8012146:	68ba      	ldr	r2, [r7, #8]
 8012148:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 801214a:	68ba      	ldr	r2, [r7, #8]
 801214c:	68fb      	ldr	r3, [r7, #12]
 801214e:	429a      	cmp	r2, r3
 8012150:	d209      	bcs.n	8012166 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8012152:	4b12      	ldr	r3, [pc, #72]	; (801219c <prvAddCurrentTaskToDelayedList+0x9c>)
 8012154:	681a      	ldr	r2, [r3, #0]
 8012156:	4b0f      	ldr	r3, [pc, #60]	; (8012194 <prvAddCurrentTaskToDelayedList+0x94>)
 8012158:	681b      	ldr	r3, [r3, #0]
 801215a:	3304      	adds	r3, #4
 801215c:	4619      	mov	r1, r3
 801215e:	4610      	mov	r0, r2
 8012160:	f7fd fc75 	bl	800fa4e <vListInsert>
}
 8012164:	e010      	b.n	8012188 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8012166:	4b0e      	ldr	r3, [pc, #56]	; (80121a0 <prvAddCurrentTaskToDelayedList+0xa0>)
 8012168:	681a      	ldr	r2, [r3, #0]
 801216a:	4b0a      	ldr	r3, [pc, #40]	; (8012194 <prvAddCurrentTaskToDelayedList+0x94>)
 801216c:	681b      	ldr	r3, [r3, #0]
 801216e:	3304      	adds	r3, #4
 8012170:	4619      	mov	r1, r3
 8012172:	4610      	mov	r0, r2
 8012174:	f7fd fc6b 	bl	800fa4e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8012178:	4b0a      	ldr	r3, [pc, #40]	; (80121a4 <prvAddCurrentTaskToDelayedList+0xa4>)
 801217a:	681b      	ldr	r3, [r3, #0]
 801217c:	68ba      	ldr	r2, [r7, #8]
 801217e:	429a      	cmp	r2, r3
 8012180:	d202      	bcs.n	8012188 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8012182:	4a08      	ldr	r2, [pc, #32]	; (80121a4 <prvAddCurrentTaskToDelayedList+0xa4>)
 8012184:	68bb      	ldr	r3, [r7, #8]
 8012186:	6013      	str	r3, [r2, #0]
}
 8012188:	bf00      	nop
 801218a:	3710      	adds	r7, #16
 801218c:	46bd      	mov	sp, r7
 801218e:	bd80      	pop	{r7, pc}
 8012190:	20007620 	.word	0x20007620
 8012194:	20007148 	.word	0x20007148
 8012198:	20007608 	.word	0x20007608
 801219c:	200075d8 	.word	0x200075d8
 80121a0:	200075d4 	.word	0x200075d4
 80121a4:	2000763c 	.word	0x2000763c

080121a8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80121a8:	b580      	push	{r7, lr}
 80121aa:	b08a      	sub	sp, #40	; 0x28
 80121ac:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80121ae:	2300      	movs	r3, #0
 80121b0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80121b2:	f000 faff 	bl	80127b4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80121b6:	4b1c      	ldr	r3, [pc, #112]	; (8012228 <xTimerCreateTimerTask+0x80>)
 80121b8:	681b      	ldr	r3, [r3, #0]
 80121ba:	2b00      	cmp	r3, #0
 80121bc:	d021      	beq.n	8012202 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80121be:	2300      	movs	r3, #0
 80121c0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80121c2:	2300      	movs	r3, #0
 80121c4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80121c6:	1d3a      	adds	r2, r7, #4
 80121c8:	f107 0108 	add.w	r1, r7, #8
 80121cc:	f107 030c 	add.w	r3, r7, #12
 80121d0:	4618      	mov	r0, r3
 80121d2:	f7fc ffb7 	bl	800f144 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80121d6:	6879      	ldr	r1, [r7, #4]
 80121d8:	68bb      	ldr	r3, [r7, #8]
 80121da:	68fa      	ldr	r2, [r7, #12]
 80121dc:	9202      	str	r2, [sp, #8]
 80121de:	9301      	str	r3, [sp, #4]
 80121e0:	2302      	movs	r3, #2
 80121e2:	9300      	str	r3, [sp, #0]
 80121e4:	2300      	movs	r3, #0
 80121e6:	460a      	mov	r2, r1
 80121e8:	4910      	ldr	r1, [pc, #64]	; (801222c <xTimerCreateTimerTask+0x84>)
 80121ea:	4811      	ldr	r0, [pc, #68]	; (8012230 <xTimerCreateTimerTask+0x88>)
 80121ec:	f7fe fd34 	bl	8010c58 <xTaskCreateStatic>
 80121f0:	4602      	mov	r2, r0
 80121f2:	4b10      	ldr	r3, [pc, #64]	; (8012234 <xTimerCreateTimerTask+0x8c>)
 80121f4:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80121f6:	4b0f      	ldr	r3, [pc, #60]	; (8012234 <xTimerCreateTimerTask+0x8c>)
 80121f8:	681b      	ldr	r3, [r3, #0]
 80121fa:	2b00      	cmp	r3, #0
 80121fc:	d001      	beq.n	8012202 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80121fe:	2301      	movs	r3, #1
 8012200:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8012202:	697b      	ldr	r3, [r7, #20]
 8012204:	2b00      	cmp	r3, #0
 8012206:	d109      	bne.n	801221c <xTimerCreateTimerTask+0x74>
	__asm volatile
 8012208:	f04f 0350 	mov.w	r3, #80	; 0x50
 801220c:	f383 8811 	msr	BASEPRI, r3
 8012210:	f3bf 8f6f 	isb	sy
 8012214:	f3bf 8f4f 	dsb	sy
 8012218:	613b      	str	r3, [r7, #16]
 801221a:	e7fe      	b.n	801221a <xTimerCreateTimerTask+0x72>
	return xReturn;
 801221c:	697b      	ldr	r3, [r7, #20]
}
 801221e:	4618      	mov	r0, r3
 8012220:	3718      	adds	r7, #24
 8012222:	46bd      	mov	sp, r7
 8012224:	bd80      	pop	{r7, pc}
 8012226:	bf00      	nop
 8012228:	20007678 	.word	0x20007678
 801222c:	08016f04 	.word	0x08016f04
 8012230:	08012369 	.word	0x08012369
 8012234:	2000767c 	.word	0x2000767c

08012238 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8012238:	b580      	push	{r7, lr}
 801223a:	b08a      	sub	sp, #40	; 0x28
 801223c:	af00      	add	r7, sp, #0
 801223e:	60f8      	str	r0, [r7, #12]
 8012240:	60b9      	str	r1, [r7, #8]
 8012242:	607a      	str	r2, [r7, #4]
 8012244:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8012246:	2300      	movs	r3, #0
 8012248:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 801224a:	68fb      	ldr	r3, [r7, #12]
 801224c:	2b00      	cmp	r3, #0
 801224e:	d109      	bne.n	8012264 <xTimerGenericCommand+0x2c>
 8012250:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012254:	f383 8811 	msr	BASEPRI, r3
 8012258:	f3bf 8f6f 	isb	sy
 801225c:	f3bf 8f4f 	dsb	sy
 8012260:	623b      	str	r3, [r7, #32]
 8012262:	e7fe      	b.n	8012262 <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8012264:	4b19      	ldr	r3, [pc, #100]	; (80122cc <xTimerGenericCommand+0x94>)
 8012266:	681b      	ldr	r3, [r3, #0]
 8012268:	2b00      	cmp	r3, #0
 801226a:	d02a      	beq.n	80122c2 <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 801226c:	68bb      	ldr	r3, [r7, #8]
 801226e:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8012270:	687b      	ldr	r3, [r7, #4]
 8012272:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8012274:	68fb      	ldr	r3, [r7, #12]
 8012276:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8012278:	68bb      	ldr	r3, [r7, #8]
 801227a:	2b05      	cmp	r3, #5
 801227c:	dc18      	bgt.n	80122b0 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 801227e:	f7ff fb63 	bl	8011948 <xTaskGetSchedulerState>
 8012282:	4603      	mov	r3, r0
 8012284:	2b02      	cmp	r3, #2
 8012286:	d109      	bne.n	801229c <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8012288:	4b10      	ldr	r3, [pc, #64]	; (80122cc <xTimerGenericCommand+0x94>)
 801228a:	6818      	ldr	r0, [r3, #0]
 801228c:	f107 0110 	add.w	r1, r7, #16
 8012290:	2300      	movs	r3, #0
 8012292:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012294:	f7fd fe96 	bl	800ffc4 <xQueueGenericSend>
 8012298:	6278      	str	r0, [r7, #36]	; 0x24
 801229a:	e012      	b.n	80122c2 <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 801229c:	4b0b      	ldr	r3, [pc, #44]	; (80122cc <xTimerGenericCommand+0x94>)
 801229e:	6818      	ldr	r0, [r3, #0]
 80122a0:	f107 0110 	add.w	r1, r7, #16
 80122a4:	2300      	movs	r3, #0
 80122a6:	2200      	movs	r2, #0
 80122a8:	f7fd fe8c 	bl	800ffc4 <xQueueGenericSend>
 80122ac:	6278      	str	r0, [r7, #36]	; 0x24
 80122ae:	e008      	b.n	80122c2 <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80122b0:	4b06      	ldr	r3, [pc, #24]	; (80122cc <xTimerGenericCommand+0x94>)
 80122b2:	6818      	ldr	r0, [r3, #0]
 80122b4:	f107 0110 	add.w	r1, r7, #16
 80122b8:	2300      	movs	r3, #0
 80122ba:	683a      	ldr	r2, [r7, #0]
 80122bc:	f7fd ff7c 	bl	80101b8 <xQueueGenericSendFromISR>
 80122c0:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80122c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80122c4:	4618      	mov	r0, r3
 80122c6:	3728      	adds	r7, #40	; 0x28
 80122c8:	46bd      	mov	sp, r7
 80122ca:	bd80      	pop	{r7, pc}
 80122cc:	20007678 	.word	0x20007678

080122d0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80122d0:	b580      	push	{r7, lr}
 80122d2:	b088      	sub	sp, #32
 80122d4:	af02      	add	r7, sp, #8
 80122d6:	6078      	str	r0, [r7, #4]
 80122d8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80122da:	4b22      	ldr	r3, [pc, #136]	; (8012364 <prvProcessExpiredTimer+0x94>)
 80122dc:	681b      	ldr	r3, [r3, #0]
 80122de:	68db      	ldr	r3, [r3, #12]
 80122e0:	68db      	ldr	r3, [r3, #12]
 80122e2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80122e4:	697b      	ldr	r3, [r7, #20]
 80122e6:	3304      	adds	r3, #4
 80122e8:	4618      	mov	r0, r3
 80122ea:	f7fd fbe9 	bl	800fac0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80122ee:	697b      	ldr	r3, [r7, #20]
 80122f0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80122f4:	f003 0304 	and.w	r3, r3, #4
 80122f8:	2b00      	cmp	r3, #0
 80122fa:	d021      	beq.n	8012340 <prvProcessExpiredTimer+0x70>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80122fc:	697b      	ldr	r3, [r7, #20]
 80122fe:	699a      	ldr	r2, [r3, #24]
 8012300:	687b      	ldr	r3, [r7, #4]
 8012302:	18d1      	adds	r1, r2, r3
 8012304:	687b      	ldr	r3, [r7, #4]
 8012306:	683a      	ldr	r2, [r7, #0]
 8012308:	6978      	ldr	r0, [r7, #20]
 801230a:	f000 f8d1 	bl	80124b0 <prvInsertTimerInActiveList>
 801230e:	4603      	mov	r3, r0
 8012310:	2b00      	cmp	r3, #0
 8012312:	d01e      	beq.n	8012352 <prvProcessExpiredTimer+0x82>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8012314:	2300      	movs	r3, #0
 8012316:	9300      	str	r3, [sp, #0]
 8012318:	2300      	movs	r3, #0
 801231a:	687a      	ldr	r2, [r7, #4]
 801231c:	2100      	movs	r1, #0
 801231e:	6978      	ldr	r0, [r7, #20]
 8012320:	f7ff ff8a 	bl	8012238 <xTimerGenericCommand>
 8012324:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8012326:	693b      	ldr	r3, [r7, #16]
 8012328:	2b00      	cmp	r3, #0
 801232a:	d112      	bne.n	8012352 <prvProcessExpiredTimer+0x82>
 801232c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012330:	f383 8811 	msr	BASEPRI, r3
 8012334:	f3bf 8f6f 	isb	sy
 8012338:	f3bf 8f4f 	dsb	sy
 801233c:	60fb      	str	r3, [r7, #12]
 801233e:	e7fe      	b.n	801233e <prvProcessExpiredTimer+0x6e>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8012340:	697b      	ldr	r3, [r7, #20]
 8012342:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8012346:	f023 0301 	bic.w	r3, r3, #1
 801234a:	b2da      	uxtb	r2, r3
 801234c:	697b      	ldr	r3, [r7, #20]
 801234e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8012352:	697b      	ldr	r3, [r7, #20]
 8012354:	6a1b      	ldr	r3, [r3, #32]
 8012356:	6978      	ldr	r0, [r7, #20]
 8012358:	4798      	blx	r3
}
 801235a:	bf00      	nop
 801235c:	3718      	adds	r7, #24
 801235e:	46bd      	mov	sp, r7
 8012360:	bd80      	pop	{r7, pc}
 8012362:	bf00      	nop
 8012364:	20007670 	.word	0x20007670

08012368 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8012368:	b580      	push	{r7, lr}
 801236a:	b084      	sub	sp, #16
 801236c:	af00      	add	r7, sp, #0
 801236e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8012370:	f107 0308 	add.w	r3, r7, #8
 8012374:	4618      	mov	r0, r3
 8012376:	f000 f857 	bl	8012428 <prvGetNextExpireTime>
 801237a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 801237c:	68bb      	ldr	r3, [r7, #8]
 801237e:	4619      	mov	r1, r3
 8012380:	68f8      	ldr	r0, [r7, #12]
 8012382:	f000 f803 	bl	801238c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8012386:	f000 f8d5 	bl	8012534 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 801238a:	e7f1      	b.n	8012370 <prvTimerTask+0x8>

0801238c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 801238c:	b580      	push	{r7, lr}
 801238e:	b084      	sub	sp, #16
 8012390:	af00      	add	r7, sp, #0
 8012392:	6078      	str	r0, [r7, #4]
 8012394:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8012396:	f7fe fe95 	bl	80110c4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 801239a:	f107 0308 	add.w	r3, r7, #8
 801239e:	4618      	mov	r0, r3
 80123a0:	f000 f866 	bl	8012470 <prvSampleTimeNow>
 80123a4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80123a6:	68bb      	ldr	r3, [r7, #8]
 80123a8:	2b00      	cmp	r3, #0
 80123aa:	d130      	bne.n	801240e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80123ac:	683b      	ldr	r3, [r7, #0]
 80123ae:	2b00      	cmp	r3, #0
 80123b0:	d10a      	bne.n	80123c8 <prvProcessTimerOrBlockTask+0x3c>
 80123b2:	687a      	ldr	r2, [r7, #4]
 80123b4:	68fb      	ldr	r3, [r7, #12]
 80123b6:	429a      	cmp	r2, r3
 80123b8:	d806      	bhi.n	80123c8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80123ba:	f7fe fec9 	bl	8011150 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80123be:	68f9      	ldr	r1, [r7, #12]
 80123c0:	6878      	ldr	r0, [r7, #4]
 80123c2:	f7ff ff85 	bl	80122d0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80123c6:	e024      	b.n	8012412 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80123c8:	683b      	ldr	r3, [r7, #0]
 80123ca:	2b00      	cmp	r3, #0
 80123cc:	d008      	beq.n	80123e0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80123ce:	4b13      	ldr	r3, [pc, #76]	; (801241c <prvProcessTimerOrBlockTask+0x90>)
 80123d0:	681b      	ldr	r3, [r3, #0]
 80123d2:	681b      	ldr	r3, [r3, #0]
 80123d4:	2b00      	cmp	r3, #0
 80123d6:	d101      	bne.n	80123dc <prvProcessTimerOrBlockTask+0x50>
 80123d8:	2301      	movs	r3, #1
 80123da:	e000      	b.n	80123de <prvProcessTimerOrBlockTask+0x52>
 80123dc:	2300      	movs	r3, #0
 80123de:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80123e0:	4b0f      	ldr	r3, [pc, #60]	; (8012420 <prvProcessTimerOrBlockTask+0x94>)
 80123e2:	6818      	ldr	r0, [r3, #0]
 80123e4:	687a      	ldr	r2, [r7, #4]
 80123e6:	68fb      	ldr	r3, [r7, #12]
 80123e8:	1ad3      	subs	r3, r2, r3
 80123ea:	683a      	ldr	r2, [r7, #0]
 80123ec:	4619      	mov	r1, r3
 80123ee:	f7fe fbff 	bl	8010bf0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80123f2:	f7fe fead 	bl	8011150 <xTaskResumeAll>
 80123f6:	4603      	mov	r3, r0
 80123f8:	2b00      	cmp	r3, #0
 80123fa:	d10a      	bne.n	8012412 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80123fc:	4b09      	ldr	r3, [pc, #36]	; (8012424 <prvProcessTimerOrBlockTask+0x98>)
 80123fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012402:	601a      	str	r2, [r3, #0]
 8012404:	f3bf 8f4f 	dsb	sy
 8012408:	f3bf 8f6f 	isb	sy
}
 801240c:	e001      	b.n	8012412 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 801240e:	f7fe fe9f 	bl	8011150 <xTaskResumeAll>
}
 8012412:	bf00      	nop
 8012414:	3710      	adds	r7, #16
 8012416:	46bd      	mov	sp, r7
 8012418:	bd80      	pop	{r7, pc}
 801241a:	bf00      	nop
 801241c:	20007674 	.word	0x20007674
 8012420:	20007678 	.word	0x20007678
 8012424:	e000ed04 	.word	0xe000ed04

08012428 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8012428:	b480      	push	{r7}
 801242a:	b085      	sub	sp, #20
 801242c:	af00      	add	r7, sp, #0
 801242e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8012430:	4b0e      	ldr	r3, [pc, #56]	; (801246c <prvGetNextExpireTime+0x44>)
 8012432:	681b      	ldr	r3, [r3, #0]
 8012434:	681b      	ldr	r3, [r3, #0]
 8012436:	2b00      	cmp	r3, #0
 8012438:	d101      	bne.n	801243e <prvGetNextExpireTime+0x16>
 801243a:	2201      	movs	r2, #1
 801243c:	e000      	b.n	8012440 <prvGetNextExpireTime+0x18>
 801243e:	2200      	movs	r2, #0
 8012440:	687b      	ldr	r3, [r7, #4]
 8012442:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8012444:	687b      	ldr	r3, [r7, #4]
 8012446:	681b      	ldr	r3, [r3, #0]
 8012448:	2b00      	cmp	r3, #0
 801244a:	d105      	bne.n	8012458 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 801244c:	4b07      	ldr	r3, [pc, #28]	; (801246c <prvGetNextExpireTime+0x44>)
 801244e:	681b      	ldr	r3, [r3, #0]
 8012450:	68db      	ldr	r3, [r3, #12]
 8012452:	681b      	ldr	r3, [r3, #0]
 8012454:	60fb      	str	r3, [r7, #12]
 8012456:	e001      	b.n	801245c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8012458:	2300      	movs	r3, #0
 801245a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 801245c:	68fb      	ldr	r3, [r7, #12]
}
 801245e:	4618      	mov	r0, r3
 8012460:	3714      	adds	r7, #20
 8012462:	46bd      	mov	sp, r7
 8012464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012468:	4770      	bx	lr
 801246a:	bf00      	nop
 801246c:	20007670 	.word	0x20007670

08012470 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8012470:	b580      	push	{r7, lr}
 8012472:	b084      	sub	sp, #16
 8012474:	af00      	add	r7, sp, #0
 8012476:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8012478:	f7fe ff06 	bl	8011288 <xTaskGetTickCount>
 801247c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 801247e:	4b0b      	ldr	r3, [pc, #44]	; (80124ac <prvSampleTimeNow+0x3c>)
 8012480:	681b      	ldr	r3, [r3, #0]
 8012482:	68fa      	ldr	r2, [r7, #12]
 8012484:	429a      	cmp	r2, r3
 8012486:	d205      	bcs.n	8012494 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8012488:	f000 f930 	bl	80126ec <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 801248c:	687b      	ldr	r3, [r7, #4]
 801248e:	2201      	movs	r2, #1
 8012490:	601a      	str	r2, [r3, #0]
 8012492:	e002      	b.n	801249a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8012494:	687b      	ldr	r3, [r7, #4]
 8012496:	2200      	movs	r2, #0
 8012498:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 801249a:	4a04      	ldr	r2, [pc, #16]	; (80124ac <prvSampleTimeNow+0x3c>)
 801249c:	68fb      	ldr	r3, [r7, #12]
 801249e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80124a0:	68fb      	ldr	r3, [r7, #12]
}
 80124a2:	4618      	mov	r0, r3
 80124a4:	3710      	adds	r7, #16
 80124a6:	46bd      	mov	sp, r7
 80124a8:	bd80      	pop	{r7, pc}
 80124aa:	bf00      	nop
 80124ac:	20007680 	.word	0x20007680

080124b0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80124b0:	b580      	push	{r7, lr}
 80124b2:	b086      	sub	sp, #24
 80124b4:	af00      	add	r7, sp, #0
 80124b6:	60f8      	str	r0, [r7, #12]
 80124b8:	60b9      	str	r1, [r7, #8]
 80124ba:	607a      	str	r2, [r7, #4]
 80124bc:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80124be:	2300      	movs	r3, #0
 80124c0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80124c2:	68fb      	ldr	r3, [r7, #12]
 80124c4:	68ba      	ldr	r2, [r7, #8]
 80124c6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80124c8:	68fb      	ldr	r3, [r7, #12]
 80124ca:	68fa      	ldr	r2, [r7, #12]
 80124cc:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80124ce:	68ba      	ldr	r2, [r7, #8]
 80124d0:	687b      	ldr	r3, [r7, #4]
 80124d2:	429a      	cmp	r2, r3
 80124d4:	d812      	bhi.n	80124fc <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80124d6:	687a      	ldr	r2, [r7, #4]
 80124d8:	683b      	ldr	r3, [r7, #0]
 80124da:	1ad2      	subs	r2, r2, r3
 80124dc:	68fb      	ldr	r3, [r7, #12]
 80124de:	699b      	ldr	r3, [r3, #24]
 80124e0:	429a      	cmp	r2, r3
 80124e2:	d302      	bcc.n	80124ea <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80124e4:	2301      	movs	r3, #1
 80124e6:	617b      	str	r3, [r7, #20]
 80124e8:	e01b      	b.n	8012522 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80124ea:	4b10      	ldr	r3, [pc, #64]	; (801252c <prvInsertTimerInActiveList+0x7c>)
 80124ec:	681a      	ldr	r2, [r3, #0]
 80124ee:	68fb      	ldr	r3, [r7, #12]
 80124f0:	3304      	adds	r3, #4
 80124f2:	4619      	mov	r1, r3
 80124f4:	4610      	mov	r0, r2
 80124f6:	f7fd faaa 	bl	800fa4e <vListInsert>
 80124fa:	e012      	b.n	8012522 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80124fc:	687a      	ldr	r2, [r7, #4]
 80124fe:	683b      	ldr	r3, [r7, #0]
 8012500:	429a      	cmp	r2, r3
 8012502:	d206      	bcs.n	8012512 <prvInsertTimerInActiveList+0x62>
 8012504:	68ba      	ldr	r2, [r7, #8]
 8012506:	683b      	ldr	r3, [r7, #0]
 8012508:	429a      	cmp	r2, r3
 801250a:	d302      	bcc.n	8012512 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 801250c:	2301      	movs	r3, #1
 801250e:	617b      	str	r3, [r7, #20]
 8012510:	e007      	b.n	8012522 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8012512:	4b07      	ldr	r3, [pc, #28]	; (8012530 <prvInsertTimerInActiveList+0x80>)
 8012514:	681a      	ldr	r2, [r3, #0]
 8012516:	68fb      	ldr	r3, [r7, #12]
 8012518:	3304      	adds	r3, #4
 801251a:	4619      	mov	r1, r3
 801251c:	4610      	mov	r0, r2
 801251e:	f7fd fa96 	bl	800fa4e <vListInsert>
		}
	}

	return xProcessTimerNow;
 8012522:	697b      	ldr	r3, [r7, #20]
}
 8012524:	4618      	mov	r0, r3
 8012526:	3718      	adds	r7, #24
 8012528:	46bd      	mov	sp, r7
 801252a:	bd80      	pop	{r7, pc}
 801252c:	20007674 	.word	0x20007674
 8012530:	20007670 	.word	0x20007670

08012534 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8012534:	b580      	push	{r7, lr}
 8012536:	b08e      	sub	sp, #56	; 0x38
 8012538:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 801253a:	e0c6      	b.n	80126ca <prvProcessReceivedCommands+0x196>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 801253c:	687b      	ldr	r3, [r7, #4]
 801253e:	2b00      	cmp	r3, #0
 8012540:	da17      	bge.n	8012572 <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8012542:	1d3b      	adds	r3, r7, #4
 8012544:	3304      	adds	r3, #4
 8012546:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8012548:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801254a:	2b00      	cmp	r3, #0
 801254c:	d109      	bne.n	8012562 <prvProcessReceivedCommands+0x2e>
 801254e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012552:	f383 8811 	msr	BASEPRI, r3
 8012556:	f3bf 8f6f 	isb	sy
 801255a:	f3bf 8f4f 	dsb	sy
 801255e:	61fb      	str	r3, [r7, #28]
 8012560:	e7fe      	b.n	8012560 <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8012562:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012564:	681b      	ldr	r3, [r3, #0]
 8012566:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012568:	6850      	ldr	r0, [r2, #4]
 801256a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801256c:	6892      	ldr	r2, [r2, #8]
 801256e:	4611      	mov	r1, r2
 8012570:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8012572:	687b      	ldr	r3, [r7, #4]
 8012574:	2b00      	cmp	r3, #0
 8012576:	f2c0 80a7 	blt.w	80126c8 <prvProcessReceivedCommands+0x194>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 801257a:	68fb      	ldr	r3, [r7, #12]
 801257c:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 801257e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012580:	695b      	ldr	r3, [r3, #20]
 8012582:	2b00      	cmp	r3, #0
 8012584:	d004      	beq.n	8012590 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8012586:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012588:	3304      	adds	r3, #4
 801258a:	4618      	mov	r0, r3
 801258c:	f7fd fa98 	bl	800fac0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8012590:	463b      	mov	r3, r7
 8012592:	4618      	mov	r0, r3
 8012594:	f7ff ff6c 	bl	8012470 <prvSampleTimeNow>
 8012598:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 801259a:	687b      	ldr	r3, [r7, #4]
 801259c:	2b09      	cmp	r3, #9
 801259e:	f200 8094 	bhi.w	80126ca <prvProcessReceivedCommands+0x196>
 80125a2:	a201      	add	r2, pc, #4	; (adr r2, 80125a8 <prvProcessReceivedCommands+0x74>)
 80125a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80125a8:	080125d1 	.word	0x080125d1
 80125ac:	080125d1 	.word	0x080125d1
 80125b0:	080125d1 	.word	0x080125d1
 80125b4:	08012643 	.word	0x08012643
 80125b8:	08012657 	.word	0x08012657
 80125bc:	0801269f 	.word	0x0801269f
 80125c0:	080125d1 	.word	0x080125d1
 80125c4:	080125d1 	.word	0x080125d1
 80125c8:	08012643 	.word	0x08012643
 80125cc:	08012657 	.word	0x08012657
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80125d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80125d2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80125d6:	f043 0301 	orr.w	r3, r3, #1
 80125da:	b2da      	uxtb	r2, r3
 80125dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80125de:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80125e2:	68ba      	ldr	r2, [r7, #8]
 80125e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80125e6:	699b      	ldr	r3, [r3, #24]
 80125e8:	18d1      	adds	r1, r2, r3
 80125ea:	68bb      	ldr	r3, [r7, #8]
 80125ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80125ee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80125f0:	f7ff ff5e 	bl	80124b0 <prvInsertTimerInActiveList>
 80125f4:	4603      	mov	r3, r0
 80125f6:	2b00      	cmp	r3, #0
 80125f8:	d067      	beq.n	80126ca <prvProcessReceivedCommands+0x196>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80125fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80125fc:	6a1b      	ldr	r3, [r3, #32]
 80125fe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012600:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8012602:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012604:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8012608:	f003 0304 	and.w	r3, r3, #4
 801260c:	2b00      	cmp	r3, #0
 801260e:	d05c      	beq.n	80126ca <prvProcessReceivedCommands+0x196>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8012610:	68ba      	ldr	r2, [r7, #8]
 8012612:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012614:	699b      	ldr	r3, [r3, #24]
 8012616:	441a      	add	r2, r3
 8012618:	2300      	movs	r3, #0
 801261a:	9300      	str	r3, [sp, #0]
 801261c:	2300      	movs	r3, #0
 801261e:	2100      	movs	r1, #0
 8012620:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012622:	f7ff fe09 	bl	8012238 <xTimerGenericCommand>
 8012626:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8012628:	6a3b      	ldr	r3, [r7, #32]
 801262a:	2b00      	cmp	r3, #0
 801262c:	d14d      	bne.n	80126ca <prvProcessReceivedCommands+0x196>
 801262e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012632:	f383 8811 	msr	BASEPRI, r3
 8012636:	f3bf 8f6f 	isb	sy
 801263a:	f3bf 8f4f 	dsb	sy
 801263e:	61bb      	str	r3, [r7, #24]
 8012640:	e7fe      	b.n	8012640 <prvProcessReceivedCommands+0x10c>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8012642:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012644:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8012648:	f023 0301 	bic.w	r3, r3, #1
 801264c:	b2da      	uxtb	r2, r3
 801264e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012650:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8012654:	e039      	b.n	80126ca <prvProcessReceivedCommands+0x196>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8012656:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012658:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801265c:	f043 0301 	orr.w	r3, r3, #1
 8012660:	b2da      	uxtb	r2, r3
 8012662:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012664:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8012668:	68ba      	ldr	r2, [r7, #8]
 801266a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801266c:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 801266e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012670:	699b      	ldr	r3, [r3, #24]
 8012672:	2b00      	cmp	r3, #0
 8012674:	d109      	bne.n	801268a <prvProcessReceivedCommands+0x156>
 8012676:	f04f 0350 	mov.w	r3, #80	; 0x50
 801267a:	f383 8811 	msr	BASEPRI, r3
 801267e:	f3bf 8f6f 	isb	sy
 8012682:	f3bf 8f4f 	dsb	sy
 8012686:	617b      	str	r3, [r7, #20]
 8012688:	e7fe      	b.n	8012688 <prvProcessReceivedCommands+0x154>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 801268a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801268c:	699a      	ldr	r2, [r3, #24]
 801268e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012690:	18d1      	adds	r1, r2, r3
 8012692:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012694:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012696:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012698:	f7ff ff0a 	bl	80124b0 <prvInsertTimerInActiveList>
					break;
 801269c:	e015      	b.n	80126ca <prvProcessReceivedCommands+0x196>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 801269e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80126a0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80126a4:	f003 0302 	and.w	r3, r3, #2
 80126a8:	2b00      	cmp	r3, #0
 80126aa:	d103      	bne.n	80126b4 <prvProcessReceivedCommands+0x180>
						{
							vPortFree( pxTimer );
 80126ac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80126ae:	f7fd f869 	bl	800f784 <vPortFree>
 80126b2:	e00a      	b.n	80126ca <prvProcessReceivedCommands+0x196>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80126b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80126b6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80126ba:	f023 0301 	bic.w	r3, r3, #1
 80126be:	b2da      	uxtb	r2, r3
 80126c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80126c2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80126c6:	e000      	b.n	80126ca <prvProcessReceivedCommands+0x196>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80126c8:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80126ca:	4b07      	ldr	r3, [pc, #28]	; (80126e8 <prvProcessReceivedCommands+0x1b4>)
 80126cc:	681b      	ldr	r3, [r3, #0]
 80126ce:	1d39      	adds	r1, r7, #4
 80126d0:	2200      	movs	r2, #0
 80126d2:	4618      	mov	r0, r3
 80126d4:	f7fd fe8e 	bl	80103f4 <xQueueReceive>
 80126d8:	4603      	mov	r3, r0
 80126da:	2b00      	cmp	r3, #0
 80126dc:	f47f af2e 	bne.w	801253c <prvProcessReceivedCommands+0x8>
	}
}
 80126e0:	bf00      	nop
 80126e2:	3730      	adds	r7, #48	; 0x30
 80126e4:	46bd      	mov	sp, r7
 80126e6:	bd80      	pop	{r7, pc}
 80126e8:	20007678 	.word	0x20007678

080126ec <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80126ec:	b580      	push	{r7, lr}
 80126ee:	b088      	sub	sp, #32
 80126f0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80126f2:	e047      	b.n	8012784 <prvSwitchTimerLists+0x98>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80126f4:	4b2d      	ldr	r3, [pc, #180]	; (80127ac <prvSwitchTimerLists+0xc0>)
 80126f6:	681b      	ldr	r3, [r3, #0]
 80126f8:	68db      	ldr	r3, [r3, #12]
 80126fa:	681b      	ldr	r3, [r3, #0]
 80126fc:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80126fe:	4b2b      	ldr	r3, [pc, #172]	; (80127ac <prvSwitchTimerLists+0xc0>)
 8012700:	681b      	ldr	r3, [r3, #0]
 8012702:	68db      	ldr	r3, [r3, #12]
 8012704:	68db      	ldr	r3, [r3, #12]
 8012706:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8012708:	68fb      	ldr	r3, [r7, #12]
 801270a:	3304      	adds	r3, #4
 801270c:	4618      	mov	r0, r3
 801270e:	f7fd f9d7 	bl	800fac0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8012712:	68fb      	ldr	r3, [r7, #12]
 8012714:	6a1b      	ldr	r3, [r3, #32]
 8012716:	68f8      	ldr	r0, [r7, #12]
 8012718:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801271a:	68fb      	ldr	r3, [r7, #12]
 801271c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8012720:	f003 0304 	and.w	r3, r3, #4
 8012724:	2b00      	cmp	r3, #0
 8012726:	d02d      	beq.n	8012784 <prvSwitchTimerLists+0x98>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8012728:	68fb      	ldr	r3, [r7, #12]
 801272a:	699b      	ldr	r3, [r3, #24]
 801272c:	693a      	ldr	r2, [r7, #16]
 801272e:	4413      	add	r3, r2
 8012730:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8012732:	68ba      	ldr	r2, [r7, #8]
 8012734:	693b      	ldr	r3, [r7, #16]
 8012736:	429a      	cmp	r2, r3
 8012738:	d90e      	bls.n	8012758 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 801273a:	68fb      	ldr	r3, [r7, #12]
 801273c:	68ba      	ldr	r2, [r7, #8]
 801273e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8012740:	68fb      	ldr	r3, [r7, #12]
 8012742:	68fa      	ldr	r2, [r7, #12]
 8012744:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8012746:	4b19      	ldr	r3, [pc, #100]	; (80127ac <prvSwitchTimerLists+0xc0>)
 8012748:	681a      	ldr	r2, [r3, #0]
 801274a:	68fb      	ldr	r3, [r7, #12]
 801274c:	3304      	adds	r3, #4
 801274e:	4619      	mov	r1, r3
 8012750:	4610      	mov	r0, r2
 8012752:	f7fd f97c 	bl	800fa4e <vListInsert>
 8012756:	e015      	b.n	8012784 <prvSwitchTimerLists+0x98>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8012758:	2300      	movs	r3, #0
 801275a:	9300      	str	r3, [sp, #0]
 801275c:	2300      	movs	r3, #0
 801275e:	693a      	ldr	r2, [r7, #16]
 8012760:	2100      	movs	r1, #0
 8012762:	68f8      	ldr	r0, [r7, #12]
 8012764:	f7ff fd68 	bl	8012238 <xTimerGenericCommand>
 8012768:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 801276a:	687b      	ldr	r3, [r7, #4]
 801276c:	2b00      	cmp	r3, #0
 801276e:	d109      	bne.n	8012784 <prvSwitchTimerLists+0x98>
 8012770:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012774:	f383 8811 	msr	BASEPRI, r3
 8012778:	f3bf 8f6f 	isb	sy
 801277c:	f3bf 8f4f 	dsb	sy
 8012780:	603b      	str	r3, [r7, #0]
 8012782:	e7fe      	b.n	8012782 <prvSwitchTimerLists+0x96>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8012784:	4b09      	ldr	r3, [pc, #36]	; (80127ac <prvSwitchTimerLists+0xc0>)
 8012786:	681b      	ldr	r3, [r3, #0]
 8012788:	681b      	ldr	r3, [r3, #0]
 801278a:	2b00      	cmp	r3, #0
 801278c:	d1b2      	bne.n	80126f4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 801278e:	4b07      	ldr	r3, [pc, #28]	; (80127ac <prvSwitchTimerLists+0xc0>)
 8012790:	681b      	ldr	r3, [r3, #0]
 8012792:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8012794:	4b06      	ldr	r3, [pc, #24]	; (80127b0 <prvSwitchTimerLists+0xc4>)
 8012796:	681b      	ldr	r3, [r3, #0]
 8012798:	4a04      	ldr	r2, [pc, #16]	; (80127ac <prvSwitchTimerLists+0xc0>)
 801279a:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 801279c:	4a04      	ldr	r2, [pc, #16]	; (80127b0 <prvSwitchTimerLists+0xc4>)
 801279e:	697b      	ldr	r3, [r7, #20]
 80127a0:	6013      	str	r3, [r2, #0]
}
 80127a2:	bf00      	nop
 80127a4:	3718      	adds	r7, #24
 80127a6:	46bd      	mov	sp, r7
 80127a8:	bd80      	pop	{r7, pc}
 80127aa:	bf00      	nop
 80127ac:	20007670 	.word	0x20007670
 80127b0:	20007674 	.word	0x20007674

080127b4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80127b4:	b580      	push	{r7, lr}
 80127b6:	b082      	sub	sp, #8
 80127b8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80127ba:	f7fc fe07 	bl	800f3cc <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80127be:	4b15      	ldr	r3, [pc, #84]	; (8012814 <prvCheckForValidListAndQueue+0x60>)
 80127c0:	681b      	ldr	r3, [r3, #0]
 80127c2:	2b00      	cmp	r3, #0
 80127c4:	d120      	bne.n	8012808 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80127c6:	4814      	ldr	r0, [pc, #80]	; (8012818 <prvCheckForValidListAndQueue+0x64>)
 80127c8:	f7fd f8f0 	bl	800f9ac <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80127cc:	4813      	ldr	r0, [pc, #76]	; (801281c <prvCheckForValidListAndQueue+0x68>)
 80127ce:	f7fd f8ed 	bl	800f9ac <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80127d2:	4b13      	ldr	r3, [pc, #76]	; (8012820 <prvCheckForValidListAndQueue+0x6c>)
 80127d4:	4a10      	ldr	r2, [pc, #64]	; (8012818 <prvCheckForValidListAndQueue+0x64>)
 80127d6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80127d8:	4b12      	ldr	r3, [pc, #72]	; (8012824 <prvCheckForValidListAndQueue+0x70>)
 80127da:	4a10      	ldr	r2, [pc, #64]	; (801281c <prvCheckForValidListAndQueue+0x68>)
 80127dc:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80127de:	2300      	movs	r3, #0
 80127e0:	9300      	str	r3, [sp, #0]
 80127e2:	4b11      	ldr	r3, [pc, #68]	; (8012828 <prvCheckForValidListAndQueue+0x74>)
 80127e4:	4a11      	ldr	r2, [pc, #68]	; (801282c <prvCheckForValidListAndQueue+0x78>)
 80127e6:	2110      	movs	r1, #16
 80127e8:	200a      	movs	r0, #10
 80127ea:	f7fd f9fb 	bl	800fbe4 <xQueueGenericCreateStatic>
 80127ee:	4602      	mov	r2, r0
 80127f0:	4b08      	ldr	r3, [pc, #32]	; (8012814 <prvCheckForValidListAndQueue+0x60>)
 80127f2:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80127f4:	4b07      	ldr	r3, [pc, #28]	; (8012814 <prvCheckForValidListAndQueue+0x60>)
 80127f6:	681b      	ldr	r3, [r3, #0]
 80127f8:	2b00      	cmp	r3, #0
 80127fa:	d005      	beq.n	8012808 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80127fc:	4b05      	ldr	r3, [pc, #20]	; (8012814 <prvCheckForValidListAndQueue+0x60>)
 80127fe:	681b      	ldr	r3, [r3, #0]
 8012800:	490b      	ldr	r1, [pc, #44]	; (8012830 <prvCheckForValidListAndQueue+0x7c>)
 8012802:	4618      	mov	r0, r3
 8012804:	f7fe f9a2 	bl	8010b4c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8012808:	f7fc fe0e 	bl	800f428 <vPortExitCritical>
}
 801280c:	bf00      	nop
 801280e:	46bd      	mov	sp, r7
 8012810:	bd80      	pop	{r7, pc}
 8012812:	bf00      	nop
 8012814:	20007678 	.word	0x20007678
 8012818:	20007648 	.word	0x20007648
 801281c:	2000765c 	.word	0x2000765c
 8012820:	20007670 	.word	0x20007670
 8012824:	20007674 	.word	0x20007674
 8012828:	20007724 	.word	0x20007724
 801282c:	20007684 	.word	0x20007684
 8012830:	08016f0c 	.word	0x08016f0c

08012834 <UTIL_LPM_Init>:

/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
 8012834:	b480      	push	{r7}
 8012836:	af00      	add	r7, sp, #0
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 8012838:	4b05      	ldr	r3, [pc, #20]	; (8012850 <UTIL_LPM_Init+0x1c>)
 801283a:	2200      	movs	r2, #0
 801283c:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 801283e:	4b05      	ldr	r3, [pc, #20]	; (8012854 <UTIL_LPM_Init+0x20>)
 8012840:	2200      	movs	r2, #0
 8012842:	601a      	str	r2, [r3, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 8012844:	bf00      	nop
 8012846:	46bd      	mov	sp, r7
 8012848:	f85d 7b04 	ldr.w	r7, [sp], #4
 801284c:	4770      	bx	lr
 801284e:	bf00      	nop
 8012850:	20007774 	.word	0x20007774
 8012854:	20007778 	.word	0x20007778

08012858 <UTIL_LPM_SetOffMode>:
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 8012858:	b480      	push	{r7}
 801285a:	b087      	sub	sp, #28
 801285c:	af00      	add	r7, sp, #0
 801285e:	6078      	str	r0, [r7, #4]
 8012860:	460b      	mov	r3, r1
 8012862:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8012864:	f3ef 8310 	mrs	r3, PRIMASK
 8012868:	613b      	str	r3, [r7, #16]
  return(result);
 801286a:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 801286c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801286e:	b672      	cpsid	i
  
  switch(state)
 8012870:	78fb      	ldrb	r3, [r7, #3]
 8012872:	2b00      	cmp	r3, #0
 8012874:	d009      	beq.n	801288a <UTIL_LPM_SetOffMode+0x32>
 8012876:	2b01      	cmp	r3, #1
 8012878:	d000      	beq.n	801287c <UTIL_LPM_SetOffMode+0x24>
      OffModeDisable &= ( ~lpm_id_bm );
      break;
    }
  default :
    {
      break;
 801287a:	e00e      	b.n	801289a <UTIL_LPM_SetOffMode+0x42>
      OffModeDisable |= lpm_id_bm;
 801287c:	4b0c      	ldr	r3, [pc, #48]	; (80128b0 <UTIL_LPM_SetOffMode+0x58>)
 801287e:	681a      	ldr	r2, [r3, #0]
 8012880:	687b      	ldr	r3, [r7, #4]
 8012882:	4313      	orrs	r3, r2
 8012884:	4a0a      	ldr	r2, [pc, #40]	; (80128b0 <UTIL_LPM_SetOffMode+0x58>)
 8012886:	6013      	str	r3, [r2, #0]
      break;
 8012888:	e007      	b.n	801289a <UTIL_LPM_SetOffMode+0x42>
      OffModeDisable &= ( ~lpm_id_bm );
 801288a:	687b      	ldr	r3, [r7, #4]
 801288c:	43da      	mvns	r2, r3
 801288e:	4b08      	ldr	r3, [pc, #32]	; (80128b0 <UTIL_LPM_SetOffMode+0x58>)
 8012890:	681b      	ldr	r3, [r3, #0]
 8012892:	4013      	ands	r3, r2
 8012894:	4a06      	ldr	r2, [pc, #24]	; (80128b0 <UTIL_LPM_SetOffMode+0x58>)
 8012896:	6013      	str	r3, [r2, #0]
      break;
 8012898:	bf00      	nop
 801289a:	697b      	ldr	r3, [r7, #20]
 801289c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801289e:	68fb      	ldr	r3, [r7, #12]
 80128a0:	f383 8810 	msr	PRIMASK, r3
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 80128a4:	bf00      	nop
 80128a6:	371c      	adds	r7, #28
 80128a8:	46bd      	mov	sp, r7
 80128aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128ae:	4770      	bx	lr
 80128b0:	20007778 	.word	0x20007778

080128b4 <__errno>:
 80128b4:	4b01      	ldr	r3, [pc, #4]	; (80128bc <__errno+0x8>)
 80128b6:	6818      	ldr	r0, [r3, #0]
 80128b8:	4770      	bx	lr
 80128ba:	bf00      	nop
 80128bc:	20000024 	.word	0x20000024

080128c0 <__libc_init_array>:
 80128c0:	b570      	push	{r4, r5, r6, lr}
 80128c2:	4e0d      	ldr	r6, [pc, #52]	; (80128f8 <__libc_init_array+0x38>)
 80128c4:	4c0d      	ldr	r4, [pc, #52]	; (80128fc <__libc_init_array+0x3c>)
 80128c6:	1ba4      	subs	r4, r4, r6
 80128c8:	10a4      	asrs	r4, r4, #2
 80128ca:	2500      	movs	r5, #0
 80128cc:	42a5      	cmp	r5, r4
 80128ce:	d109      	bne.n	80128e4 <__libc_init_array+0x24>
 80128d0:	4e0b      	ldr	r6, [pc, #44]	; (8012900 <__libc_init_array+0x40>)
 80128d2:	4c0c      	ldr	r4, [pc, #48]	; (8012904 <__libc_init_array+0x44>)
 80128d4:	f003 fe1e 	bl	8016514 <_init>
 80128d8:	1ba4      	subs	r4, r4, r6
 80128da:	10a4      	asrs	r4, r4, #2
 80128dc:	2500      	movs	r5, #0
 80128de:	42a5      	cmp	r5, r4
 80128e0:	d105      	bne.n	80128ee <__libc_init_array+0x2e>
 80128e2:	bd70      	pop	{r4, r5, r6, pc}
 80128e4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80128e8:	4798      	blx	r3
 80128ea:	3501      	adds	r5, #1
 80128ec:	e7ee      	b.n	80128cc <__libc_init_array+0xc>
 80128ee:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80128f2:	4798      	blx	r3
 80128f4:	3501      	adds	r5, #1
 80128f6:	e7f2      	b.n	80128de <__libc_init_array+0x1e>
 80128f8:	080183a8 	.word	0x080183a8
 80128fc:	080183a8 	.word	0x080183a8
 8012900:	080183a8 	.word	0x080183a8
 8012904:	080183ac 	.word	0x080183ac

08012908 <memcpy>:
 8012908:	b510      	push	{r4, lr}
 801290a:	1e43      	subs	r3, r0, #1
 801290c:	440a      	add	r2, r1
 801290e:	4291      	cmp	r1, r2
 8012910:	d100      	bne.n	8012914 <memcpy+0xc>
 8012912:	bd10      	pop	{r4, pc}
 8012914:	f811 4b01 	ldrb.w	r4, [r1], #1
 8012918:	f803 4f01 	strb.w	r4, [r3, #1]!
 801291c:	e7f7      	b.n	801290e <memcpy+0x6>

0801291e <memset>:
 801291e:	4402      	add	r2, r0
 8012920:	4603      	mov	r3, r0
 8012922:	4293      	cmp	r3, r2
 8012924:	d100      	bne.n	8012928 <memset+0xa>
 8012926:	4770      	bx	lr
 8012928:	f803 1b01 	strb.w	r1, [r3], #1
 801292c:	e7f9      	b.n	8012922 <memset+0x4>

0801292e <__cvt>:
 801292e:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8012932:	ec55 4b10 	vmov	r4, r5, d0
 8012936:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8012938:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 801293c:	2d00      	cmp	r5, #0
 801293e:	460e      	mov	r6, r1
 8012940:	4691      	mov	r9, r2
 8012942:	4619      	mov	r1, r3
 8012944:	bfb8      	it	lt
 8012946:	4622      	movlt	r2, r4
 8012948:	462b      	mov	r3, r5
 801294a:	f027 0720 	bic.w	r7, r7, #32
 801294e:	bfbb      	ittet	lt
 8012950:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8012954:	461d      	movlt	r5, r3
 8012956:	2300      	movge	r3, #0
 8012958:	232d      	movlt	r3, #45	; 0x2d
 801295a:	bfb8      	it	lt
 801295c:	4614      	movlt	r4, r2
 801295e:	2f46      	cmp	r7, #70	; 0x46
 8012960:	700b      	strb	r3, [r1, #0]
 8012962:	d004      	beq.n	801296e <__cvt+0x40>
 8012964:	2f45      	cmp	r7, #69	; 0x45
 8012966:	d100      	bne.n	801296a <__cvt+0x3c>
 8012968:	3601      	adds	r6, #1
 801296a:	2102      	movs	r1, #2
 801296c:	e000      	b.n	8012970 <__cvt+0x42>
 801296e:	2103      	movs	r1, #3
 8012970:	ab03      	add	r3, sp, #12
 8012972:	9301      	str	r3, [sp, #4]
 8012974:	ab02      	add	r3, sp, #8
 8012976:	9300      	str	r3, [sp, #0]
 8012978:	4632      	mov	r2, r6
 801297a:	4653      	mov	r3, sl
 801297c:	ec45 4b10 	vmov	d0, r4, r5
 8012980:	f000 fe32 	bl	80135e8 <_dtoa_r>
 8012984:	2f47      	cmp	r7, #71	; 0x47
 8012986:	4680      	mov	r8, r0
 8012988:	d102      	bne.n	8012990 <__cvt+0x62>
 801298a:	f019 0f01 	tst.w	r9, #1
 801298e:	d026      	beq.n	80129de <__cvt+0xb0>
 8012990:	2f46      	cmp	r7, #70	; 0x46
 8012992:	eb08 0906 	add.w	r9, r8, r6
 8012996:	d111      	bne.n	80129bc <__cvt+0x8e>
 8012998:	f898 3000 	ldrb.w	r3, [r8]
 801299c:	2b30      	cmp	r3, #48	; 0x30
 801299e:	d10a      	bne.n	80129b6 <__cvt+0x88>
 80129a0:	2200      	movs	r2, #0
 80129a2:	2300      	movs	r3, #0
 80129a4:	4620      	mov	r0, r4
 80129a6:	4629      	mov	r1, r5
 80129a8:	f7ee f866 	bl	8000a78 <__aeabi_dcmpeq>
 80129ac:	b918      	cbnz	r0, 80129b6 <__cvt+0x88>
 80129ae:	f1c6 0601 	rsb	r6, r6, #1
 80129b2:	f8ca 6000 	str.w	r6, [sl]
 80129b6:	f8da 3000 	ldr.w	r3, [sl]
 80129ba:	4499      	add	r9, r3
 80129bc:	2200      	movs	r2, #0
 80129be:	2300      	movs	r3, #0
 80129c0:	4620      	mov	r0, r4
 80129c2:	4629      	mov	r1, r5
 80129c4:	f7ee f858 	bl	8000a78 <__aeabi_dcmpeq>
 80129c8:	b938      	cbnz	r0, 80129da <__cvt+0xac>
 80129ca:	2230      	movs	r2, #48	; 0x30
 80129cc:	9b03      	ldr	r3, [sp, #12]
 80129ce:	454b      	cmp	r3, r9
 80129d0:	d205      	bcs.n	80129de <__cvt+0xb0>
 80129d2:	1c59      	adds	r1, r3, #1
 80129d4:	9103      	str	r1, [sp, #12]
 80129d6:	701a      	strb	r2, [r3, #0]
 80129d8:	e7f8      	b.n	80129cc <__cvt+0x9e>
 80129da:	f8cd 900c 	str.w	r9, [sp, #12]
 80129de:	9b03      	ldr	r3, [sp, #12]
 80129e0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80129e2:	eba3 0308 	sub.w	r3, r3, r8
 80129e6:	4640      	mov	r0, r8
 80129e8:	6013      	str	r3, [r2, #0]
 80129ea:	b004      	add	sp, #16
 80129ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080129f0 <__exponent>:
 80129f0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80129f2:	2900      	cmp	r1, #0
 80129f4:	4604      	mov	r4, r0
 80129f6:	bfba      	itte	lt
 80129f8:	4249      	neglt	r1, r1
 80129fa:	232d      	movlt	r3, #45	; 0x2d
 80129fc:	232b      	movge	r3, #43	; 0x2b
 80129fe:	2909      	cmp	r1, #9
 8012a00:	f804 2b02 	strb.w	r2, [r4], #2
 8012a04:	7043      	strb	r3, [r0, #1]
 8012a06:	dd20      	ble.n	8012a4a <__exponent+0x5a>
 8012a08:	f10d 0307 	add.w	r3, sp, #7
 8012a0c:	461f      	mov	r7, r3
 8012a0e:	260a      	movs	r6, #10
 8012a10:	fb91 f5f6 	sdiv	r5, r1, r6
 8012a14:	fb06 1115 	mls	r1, r6, r5, r1
 8012a18:	3130      	adds	r1, #48	; 0x30
 8012a1a:	2d09      	cmp	r5, #9
 8012a1c:	f803 1c01 	strb.w	r1, [r3, #-1]
 8012a20:	f103 32ff 	add.w	r2, r3, #4294967295
 8012a24:	4629      	mov	r1, r5
 8012a26:	dc09      	bgt.n	8012a3c <__exponent+0x4c>
 8012a28:	3130      	adds	r1, #48	; 0x30
 8012a2a:	3b02      	subs	r3, #2
 8012a2c:	f802 1c01 	strb.w	r1, [r2, #-1]
 8012a30:	42bb      	cmp	r3, r7
 8012a32:	4622      	mov	r2, r4
 8012a34:	d304      	bcc.n	8012a40 <__exponent+0x50>
 8012a36:	1a10      	subs	r0, r2, r0
 8012a38:	b003      	add	sp, #12
 8012a3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012a3c:	4613      	mov	r3, r2
 8012a3e:	e7e7      	b.n	8012a10 <__exponent+0x20>
 8012a40:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012a44:	f804 2b01 	strb.w	r2, [r4], #1
 8012a48:	e7f2      	b.n	8012a30 <__exponent+0x40>
 8012a4a:	2330      	movs	r3, #48	; 0x30
 8012a4c:	4419      	add	r1, r3
 8012a4e:	7083      	strb	r3, [r0, #2]
 8012a50:	1d02      	adds	r2, r0, #4
 8012a52:	70c1      	strb	r1, [r0, #3]
 8012a54:	e7ef      	b.n	8012a36 <__exponent+0x46>
	...

08012a58 <_printf_float>:
 8012a58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012a5c:	b08d      	sub	sp, #52	; 0x34
 8012a5e:	460c      	mov	r4, r1
 8012a60:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8012a64:	4616      	mov	r6, r2
 8012a66:	461f      	mov	r7, r3
 8012a68:	4605      	mov	r5, r0
 8012a6a:	f001 fcef 	bl	801444c <_localeconv_r>
 8012a6e:	6803      	ldr	r3, [r0, #0]
 8012a70:	9304      	str	r3, [sp, #16]
 8012a72:	4618      	mov	r0, r3
 8012a74:	f7ed fb84 	bl	8000180 <strlen>
 8012a78:	2300      	movs	r3, #0
 8012a7a:	930a      	str	r3, [sp, #40]	; 0x28
 8012a7c:	f8d8 3000 	ldr.w	r3, [r8]
 8012a80:	9005      	str	r0, [sp, #20]
 8012a82:	3307      	adds	r3, #7
 8012a84:	f023 0307 	bic.w	r3, r3, #7
 8012a88:	f103 0208 	add.w	r2, r3, #8
 8012a8c:	f894 a018 	ldrb.w	sl, [r4, #24]
 8012a90:	f8d4 b000 	ldr.w	fp, [r4]
 8012a94:	f8c8 2000 	str.w	r2, [r8]
 8012a98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012a9c:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8012aa0:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8012aa4:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8012aa8:	9307      	str	r3, [sp, #28]
 8012aaa:	f8cd 8018 	str.w	r8, [sp, #24]
 8012aae:	f04f 32ff 	mov.w	r2, #4294967295
 8012ab2:	4ba7      	ldr	r3, [pc, #668]	; (8012d50 <_printf_float+0x2f8>)
 8012ab4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8012ab8:	f7ee f810 	bl	8000adc <__aeabi_dcmpun>
 8012abc:	bb70      	cbnz	r0, 8012b1c <_printf_float+0xc4>
 8012abe:	f04f 32ff 	mov.w	r2, #4294967295
 8012ac2:	4ba3      	ldr	r3, [pc, #652]	; (8012d50 <_printf_float+0x2f8>)
 8012ac4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8012ac8:	f7ed ffea 	bl	8000aa0 <__aeabi_dcmple>
 8012acc:	bb30      	cbnz	r0, 8012b1c <_printf_float+0xc4>
 8012ace:	2200      	movs	r2, #0
 8012ad0:	2300      	movs	r3, #0
 8012ad2:	4640      	mov	r0, r8
 8012ad4:	4649      	mov	r1, r9
 8012ad6:	f7ed ffd9 	bl	8000a8c <__aeabi_dcmplt>
 8012ada:	b110      	cbz	r0, 8012ae2 <_printf_float+0x8a>
 8012adc:	232d      	movs	r3, #45	; 0x2d
 8012ade:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8012ae2:	4a9c      	ldr	r2, [pc, #624]	; (8012d54 <_printf_float+0x2fc>)
 8012ae4:	4b9c      	ldr	r3, [pc, #624]	; (8012d58 <_printf_float+0x300>)
 8012ae6:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8012aea:	bf8c      	ite	hi
 8012aec:	4690      	movhi	r8, r2
 8012aee:	4698      	movls	r8, r3
 8012af0:	2303      	movs	r3, #3
 8012af2:	f02b 0204 	bic.w	r2, fp, #4
 8012af6:	6123      	str	r3, [r4, #16]
 8012af8:	6022      	str	r2, [r4, #0]
 8012afa:	f04f 0900 	mov.w	r9, #0
 8012afe:	9700      	str	r7, [sp, #0]
 8012b00:	4633      	mov	r3, r6
 8012b02:	aa0b      	add	r2, sp, #44	; 0x2c
 8012b04:	4621      	mov	r1, r4
 8012b06:	4628      	mov	r0, r5
 8012b08:	f000 f9e6 	bl	8012ed8 <_printf_common>
 8012b0c:	3001      	adds	r0, #1
 8012b0e:	f040 808d 	bne.w	8012c2c <_printf_float+0x1d4>
 8012b12:	f04f 30ff 	mov.w	r0, #4294967295
 8012b16:	b00d      	add	sp, #52	; 0x34
 8012b18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012b1c:	4642      	mov	r2, r8
 8012b1e:	464b      	mov	r3, r9
 8012b20:	4640      	mov	r0, r8
 8012b22:	4649      	mov	r1, r9
 8012b24:	f7ed ffda 	bl	8000adc <__aeabi_dcmpun>
 8012b28:	b110      	cbz	r0, 8012b30 <_printf_float+0xd8>
 8012b2a:	4a8c      	ldr	r2, [pc, #560]	; (8012d5c <_printf_float+0x304>)
 8012b2c:	4b8c      	ldr	r3, [pc, #560]	; (8012d60 <_printf_float+0x308>)
 8012b2e:	e7da      	b.n	8012ae6 <_printf_float+0x8e>
 8012b30:	6861      	ldr	r1, [r4, #4]
 8012b32:	1c4b      	adds	r3, r1, #1
 8012b34:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8012b38:	a80a      	add	r0, sp, #40	; 0x28
 8012b3a:	d13e      	bne.n	8012bba <_printf_float+0x162>
 8012b3c:	2306      	movs	r3, #6
 8012b3e:	6063      	str	r3, [r4, #4]
 8012b40:	2300      	movs	r3, #0
 8012b42:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8012b46:	ab09      	add	r3, sp, #36	; 0x24
 8012b48:	9300      	str	r3, [sp, #0]
 8012b4a:	ec49 8b10 	vmov	d0, r8, r9
 8012b4e:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8012b52:	6022      	str	r2, [r4, #0]
 8012b54:	f8cd a004 	str.w	sl, [sp, #4]
 8012b58:	6861      	ldr	r1, [r4, #4]
 8012b5a:	4628      	mov	r0, r5
 8012b5c:	f7ff fee7 	bl	801292e <__cvt>
 8012b60:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8012b64:	2b47      	cmp	r3, #71	; 0x47
 8012b66:	4680      	mov	r8, r0
 8012b68:	d109      	bne.n	8012b7e <_printf_float+0x126>
 8012b6a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012b6c:	1cd8      	adds	r0, r3, #3
 8012b6e:	db02      	blt.n	8012b76 <_printf_float+0x11e>
 8012b70:	6862      	ldr	r2, [r4, #4]
 8012b72:	4293      	cmp	r3, r2
 8012b74:	dd47      	ble.n	8012c06 <_printf_float+0x1ae>
 8012b76:	f1aa 0a02 	sub.w	sl, sl, #2
 8012b7a:	fa5f fa8a 	uxtb.w	sl, sl
 8012b7e:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8012b82:	9909      	ldr	r1, [sp, #36]	; 0x24
 8012b84:	d824      	bhi.n	8012bd0 <_printf_float+0x178>
 8012b86:	3901      	subs	r1, #1
 8012b88:	4652      	mov	r2, sl
 8012b8a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8012b8e:	9109      	str	r1, [sp, #36]	; 0x24
 8012b90:	f7ff ff2e 	bl	80129f0 <__exponent>
 8012b94:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8012b96:	1813      	adds	r3, r2, r0
 8012b98:	2a01      	cmp	r2, #1
 8012b9a:	4681      	mov	r9, r0
 8012b9c:	6123      	str	r3, [r4, #16]
 8012b9e:	dc02      	bgt.n	8012ba6 <_printf_float+0x14e>
 8012ba0:	6822      	ldr	r2, [r4, #0]
 8012ba2:	07d1      	lsls	r1, r2, #31
 8012ba4:	d501      	bpl.n	8012baa <_printf_float+0x152>
 8012ba6:	3301      	adds	r3, #1
 8012ba8:	6123      	str	r3, [r4, #16]
 8012baa:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8012bae:	2b00      	cmp	r3, #0
 8012bb0:	d0a5      	beq.n	8012afe <_printf_float+0xa6>
 8012bb2:	232d      	movs	r3, #45	; 0x2d
 8012bb4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8012bb8:	e7a1      	b.n	8012afe <_printf_float+0xa6>
 8012bba:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 8012bbe:	f000 8177 	beq.w	8012eb0 <_printf_float+0x458>
 8012bc2:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8012bc6:	d1bb      	bne.n	8012b40 <_printf_float+0xe8>
 8012bc8:	2900      	cmp	r1, #0
 8012bca:	d1b9      	bne.n	8012b40 <_printf_float+0xe8>
 8012bcc:	2301      	movs	r3, #1
 8012bce:	e7b6      	b.n	8012b3e <_printf_float+0xe6>
 8012bd0:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 8012bd4:	d119      	bne.n	8012c0a <_printf_float+0x1b2>
 8012bd6:	2900      	cmp	r1, #0
 8012bd8:	6863      	ldr	r3, [r4, #4]
 8012bda:	dd0c      	ble.n	8012bf6 <_printf_float+0x19e>
 8012bdc:	6121      	str	r1, [r4, #16]
 8012bde:	b913      	cbnz	r3, 8012be6 <_printf_float+0x18e>
 8012be0:	6822      	ldr	r2, [r4, #0]
 8012be2:	07d2      	lsls	r2, r2, #31
 8012be4:	d502      	bpl.n	8012bec <_printf_float+0x194>
 8012be6:	3301      	adds	r3, #1
 8012be8:	440b      	add	r3, r1
 8012bea:	6123      	str	r3, [r4, #16]
 8012bec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012bee:	65a3      	str	r3, [r4, #88]	; 0x58
 8012bf0:	f04f 0900 	mov.w	r9, #0
 8012bf4:	e7d9      	b.n	8012baa <_printf_float+0x152>
 8012bf6:	b913      	cbnz	r3, 8012bfe <_printf_float+0x1a6>
 8012bf8:	6822      	ldr	r2, [r4, #0]
 8012bfa:	07d0      	lsls	r0, r2, #31
 8012bfc:	d501      	bpl.n	8012c02 <_printf_float+0x1aa>
 8012bfe:	3302      	adds	r3, #2
 8012c00:	e7f3      	b.n	8012bea <_printf_float+0x192>
 8012c02:	2301      	movs	r3, #1
 8012c04:	e7f1      	b.n	8012bea <_printf_float+0x192>
 8012c06:	f04f 0a67 	mov.w	sl, #103	; 0x67
 8012c0a:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8012c0e:	4293      	cmp	r3, r2
 8012c10:	db05      	blt.n	8012c1e <_printf_float+0x1c6>
 8012c12:	6822      	ldr	r2, [r4, #0]
 8012c14:	6123      	str	r3, [r4, #16]
 8012c16:	07d1      	lsls	r1, r2, #31
 8012c18:	d5e8      	bpl.n	8012bec <_printf_float+0x194>
 8012c1a:	3301      	adds	r3, #1
 8012c1c:	e7e5      	b.n	8012bea <_printf_float+0x192>
 8012c1e:	2b00      	cmp	r3, #0
 8012c20:	bfd4      	ite	le
 8012c22:	f1c3 0302 	rsble	r3, r3, #2
 8012c26:	2301      	movgt	r3, #1
 8012c28:	4413      	add	r3, r2
 8012c2a:	e7de      	b.n	8012bea <_printf_float+0x192>
 8012c2c:	6823      	ldr	r3, [r4, #0]
 8012c2e:	055a      	lsls	r2, r3, #21
 8012c30:	d407      	bmi.n	8012c42 <_printf_float+0x1ea>
 8012c32:	6923      	ldr	r3, [r4, #16]
 8012c34:	4642      	mov	r2, r8
 8012c36:	4631      	mov	r1, r6
 8012c38:	4628      	mov	r0, r5
 8012c3a:	47b8      	blx	r7
 8012c3c:	3001      	adds	r0, #1
 8012c3e:	d12b      	bne.n	8012c98 <_printf_float+0x240>
 8012c40:	e767      	b.n	8012b12 <_printf_float+0xba>
 8012c42:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8012c46:	f240 80dc 	bls.w	8012e02 <_printf_float+0x3aa>
 8012c4a:	2200      	movs	r2, #0
 8012c4c:	2300      	movs	r3, #0
 8012c4e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8012c52:	f7ed ff11 	bl	8000a78 <__aeabi_dcmpeq>
 8012c56:	2800      	cmp	r0, #0
 8012c58:	d033      	beq.n	8012cc2 <_printf_float+0x26a>
 8012c5a:	2301      	movs	r3, #1
 8012c5c:	4a41      	ldr	r2, [pc, #260]	; (8012d64 <_printf_float+0x30c>)
 8012c5e:	4631      	mov	r1, r6
 8012c60:	4628      	mov	r0, r5
 8012c62:	47b8      	blx	r7
 8012c64:	3001      	adds	r0, #1
 8012c66:	f43f af54 	beq.w	8012b12 <_printf_float+0xba>
 8012c6a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8012c6e:	429a      	cmp	r2, r3
 8012c70:	db02      	blt.n	8012c78 <_printf_float+0x220>
 8012c72:	6823      	ldr	r3, [r4, #0]
 8012c74:	07d8      	lsls	r0, r3, #31
 8012c76:	d50f      	bpl.n	8012c98 <_printf_float+0x240>
 8012c78:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8012c7c:	4631      	mov	r1, r6
 8012c7e:	4628      	mov	r0, r5
 8012c80:	47b8      	blx	r7
 8012c82:	3001      	adds	r0, #1
 8012c84:	f43f af45 	beq.w	8012b12 <_printf_float+0xba>
 8012c88:	f04f 0800 	mov.w	r8, #0
 8012c8c:	f104 091a 	add.w	r9, r4, #26
 8012c90:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012c92:	3b01      	subs	r3, #1
 8012c94:	4543      	cmp	r3, r8
 8012c96:	dc09      	bgt.n	8012cac <_printf_float+0x254>
 8012c98:	6823      	ldr	r3, [r4, #0]
 8012c9a:	079b      	lsls	r3, r3, #30
 8012c9c:	f100 8103 	bmi.w	8012ea6 <_printf_float+0x44e>
 8012ca0:	68e0      	ldr	r0, [r4, #12]
 8012ca2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012ca4:	4298      	cmp	r0, r3
 8012ca6:	bfb8      	it	lt
 8012ca8:	4618      	movlt	r0, r3
 8012caa:	e734      	b.n	8012b16 <_printf_float+0xbe>
 8012cac:	2301      	movs	r3, #1
 8012cae:	464a      	mov	r2, r9
 8012cb0:	4631      	mov	r1, r6
 8012cb2:	4628      	mov	r0, r5
 8012cb4:	47b8      	blx	r7
 8012cb6:	3001      	adds	r0, #1
 8012cb8:	f43f af2b 	beq.w	8012b12 <_printf_float+0xba>
 8012cbc:	f108 0801 	add.w	r8, r8, #1
 8012cc0:	e7e6      	b.n	8012c90 <_printf_float+0x238>
 8012cc2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012cc4:	2b00      	cmp	r3, #0
 8012cc6:	dc2b      	bgt.n	8012d20 <_printf_float+0x2c8>
 8012cc8:	2301      	movs	r3, #1
 8012cca:	4a26      	ldr	r2, [pc, #152]	; (8012d64 <_printf_float+0x30c>)
 8012ccc:	4631      	mov	r1, r6
 8012cce:	4628      	mov	r0, r5
 8012cd0:	47b8      	blx	r7
 8012cd2:	3001      	adds	r0, #1
 8012cd4:	f43f af1d 	beq.w	8012b12 <_printf_float+0xba>
 8012cd8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012cda:	b923      	cbnz	r3, 8012ce6 <_printf_float+0x28e>
 8012cdc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012cde:	b913      	cbnz	r3, 8012ce6 <_printf_float+0x28e>
 8012ce0:	6823      	ldr	r3, [r4, #0]
 8012ce2:	07d9      	lsls	r1, r3, #31
 8012ce4:	d5d8      	bpl.n	8012c98 <_printf_float+0x240>
 8012ce6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8012cea:	4631      	mov	r1, r6
 8012cec:	4628      	mov	r0, r5
 8012cee:	47b8      	blx	r7
 8012cf0:	3001      	adds	r0, #1
 8012cf2:	f43f af0e 	beq.w	8012b12 <_printf_float+0xba>
 8012cf6:	f04f 0900 	mov.w	r9, #0
 8012cfa:	f104 0a1a 	add.w	sl, r4, #26
 8012cfe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012d00:	425b      	negs	r3, r3
 8012d02:	454b      	cmp	r3, r9
 8012d04:	dc01      	bgt.n	8012d0a <_printf_float+0x2b2>
 8012d06:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012d08:	e794      	b.n	8012c34 <_printf_float+0x1dc>
 8012d0a:	2301      	movs	r3, #1
 8012d0c:	4652      	mov	r2, sl
 8012d0e:	4631      	mov	r1, r6
 8012d10:	4628      	mov	r0, r5
 8012d12:	47b8      	blx	r7
 8012d14:	3001      	adds	r0, #1
 8012d16:	f43f aefc 	beq.w	8012b12 <_printf_float+0xba>
 8012d1a:	f109 0901 	add.w	r9, r9, #1
 8012d1e:	e7ee      	b.n	8012cfe <_printf_float+0x2a6>
 8012d20:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8012d22:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8012d24:	429a      	cmp	r2, r3
 8012d26:	bfa8      	it	ge
 8012d28:	461a      	movge	r2, r3
 8012d2a:	2a00      	cmp	r2, #0
 8012d2c:	4691      	mov	r9, r2
 8012d2e:	dd07      	ble.n	8012d40 <_printf_float+0x2e8>
 8012d30:	4613      	mov	r3, r2
 8012d32:	4631      	mov	r1, r6
 8012d34:	4642      	mov	r2, r8
 8012d36:	4628      	mov	r0, r5
 8012d38:	47b8      	blx	r7
 8012d3a:	3001      	adds	r0, #1
 8012d3c:	f43f aee9 	beq.w	8012b12 <_printf_float+0xba>
 8012d40:	f104 031a 	add.w	r3, r4, #26
 8012d44:	f04f 0b00 	mov.w	fp, #0
 8012d48:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8012d4c:	9306      	str	r3, [sp, #24]
 8012d4e:	e015      	b.n	8012d7c <_printf_float+0x324>
 8012d50:	7fefffff 	.word	0x7fefffff
 8012d54:	080180a4 	.word	0x080180a4
 8012d58:	080180a0 	.word	0x080180a0
 8012d5c:	080180ac 	.word	0x080180ac
 8012d60:	080180a8 	.word	0x080180a8
 8012d64:	080180b0 	.word	0x080180b0
 8012d68:	2301      	movs	r3, #1
 8012d6a:	9a06      	ldr	r2, [sp, #24]
 8012d6c:	4631      	mov	r1, r6
 8012d6e:	4628      	mov	r0, r5
 8012d70:	47b8      	blx	r7
 8012d72:	3001      	adds	r0, #1
 8012d74:	f43f aecd 	beq.w	8012b12 <_printf_float+0xba>
 8012d78:	f10b 0b01 	add.w	fp, fp, #1
 8012d7c:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8012d80:	ebaa 0309 	sub.w	r3, sl, r9
 8012d84:	455b      	cmp	r3, fp
 8012d86:	dcef      	bgt.n	8012d68 <_printf_float+0x310>
 8012d88:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8012d8c:	429a      	cmp	r2, r3
 8012d8e:	44d0      	add	r8, sl
 8012d90:	db15      	blt.n	8012dbe <_printf_float+0x366>
 8012d92:	6823      	ldr	r3, [r4, #0]
 8012d94:	07da      	lsls	r2, r3, #31
 8012d96:	d412      	bmi.n	8012dbe <_printf_float+0x366>
 8012d98:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012d9a:	9909      	ldr	r1, [sp, #36]	; 0x24
 8012d9c:	eba3 020a 	sub.w	r2, r3, sl
 8012da0:	eba3 0a01 	sub.w	sl, r3, r1
 8012da4:	4592      	cmp	sl, r2
 8012da6:	bfa8      	it	ge
 8012da8:	4692      	movge	sl, r2
 8012daa:	f1ba 0f00 	cmp.w	sl, #0
 8012dae:	dc0e      	bgt.n	8012dce <_printf_float+0x376>
 8012db0:	f04f 0800 	mov.w	r8, #0
 8012db4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8012db8:	f104 091a 	add.w	r9, r4, #26
 8012dbc:	e019      	b.n	8012df2 <_printf_float+0x39a>
 8012dbe:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8012dc2:	4631      	mov	r1, r6
 8012dc4:	4628      	mov	r0, r5
 8012dc6:	47b8      	blx	r7
 8012dc8:	3001      	adds	r0, #1
 8012dca:	d1e5      	bne.n	8012d98 <_printf_float+0x340>
 8012dcc:	e6a1      	b.n	8012b12 <_printf_float+0xba>
 8012dce:	4653      	mov	r3, sl
 8012dd0:	4642      	mov	r2, r8
 8012dd2:	4631      	mov	r1, r6
 8012dd4:	4628      	mov	r0, r5
 8012dd6:	47b8      	blx	r7
 8012dd8:	3001      	adds	r0, #1
 8012dda:	d1e9      	bne.n	8012db0 <_printf_float+0x358>
 8012ddc:	e699      	b.n	8012b12 <_printf_float+0xba>
 8012dde:	2301      	movs	r3, #1
 8012de0:	464a      	mov	r2, r9
 8012de2:	4631      	mov	r1, r6
 8012de4:	4628      	mov	r0, r5
 8012de6:	47b8      	blx	r7
 8012de8:	3001      	adds	r0, #1
 8012dea:	f43f ae92 	beq.w	8012b12 <_printf_float+0xba>
 8012dee:	f108 0801 	add.w	r8, r8, #1
 8012df2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8012df6:	1a9b      	subs	r3, r3, r2
 8012df8:	eba3 030a 	sub.w	r3, r3, sl
 8012dfc:	4543      	cmp	r3, r8
 8012dfe:	dcee      	bgt.n	8012dde <_printf_float+0x386>
 8012e00:	e74a      	b.n	8012c98 <_printf_float+0x240>
 8012e02:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8012e04:	2a01      	cmp	r2, #1
 8012e06:	dc01      	bgt.n	8012e0c <_printf_float+0x3b4>
 8012e08:	07db      	lsls	r3, r3, #31
 8012e0a:	d53a      	bpl.n	8012e82 <_printf_float+0x42a>
 8012e0c:	2301      	movs	r3, #1
 8012e0e:	4642      	mov	r2, r8
 8012e10:	4631      	mov	r1, r6
 8012e12:	4628      	mov	r0, r5
 8012e14:	47b8      	blx	r7
 8012e16:	3001      	adds	r0, #1
 8012e18:	f43f ae7b 	beq.w	8012b12 <_printf_float+0xba>
 8012e1c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8012e20:	4631      	mov	r1, r6
 8012e22:	4628      	mov	r0, r5
 8012e24:	47b8      	blx	r7
 8012e26:	3001      	adds	r0, #1
 8012e28:	f108 0801 	add.w	r8, r8, #1
 8012e2c:	f43f ae71 	beq.w	8012b12 <_printf_float+0xba>
 8012e30:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012e32:	2200      	movs	r2, #0
 8012e34:	f103 3aff 	add.w	sl, r3, #4294967295
 8012e38:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8012e3c:	2300      	movs	r3, #0
 8012e3e:	f7ed fe1b 	bl	8000a78 <__aeabi_dcmpeq>
 8012e42:	b9c8      	cbnz	r0, 8012e78 <_printf_float+0x420>
 8012e44:	4653      	mov	r3, sl
 8012e46:	4642      	mov	r2, r8
 8012e48:	4631      	mov	r1, r6
 8012e4a:	4628      	mov	r0, r5
 8012e4c:	47b8      	blx	r7
 8012e4e:	3001      	adds	r0, #1
 8012e50:	d10e      	bne.n	8012e70 <_printf_float+0x418>
 8012e52:	e65e      	b.n	8012b12 <_printf_float+0xba>
 8012e54:	2301      	movs	r3, #1
 8012e56:	4652      	mov	r2, sl
 8012e58:	4631      	mov	r1, r6
 8012e5a:	4628      	mov	r0, r5
 8012e5c:	47b8      	blx	r7
 8012e5e:	3001      	adds	r0, #1
 8012e60:	f43f ae57 	beq.w	8012b12 <_printf_float+0xba>
 8012e64:	f108 0801 	add.w	r8, r8, #1
 8012e68:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012e6a:	3b01      	subs	r3, #1
 8012e6c:	4543      	cmp	r3, r8
 8012e6e:	dcf1      	bgt.n	8012e54 <_printf_float+0x3fc>
 8012e70:	464b      	mov	r3, r9
 8012e72:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8012e76:	e6de      	b.n	8012c36 <_printf_float+0x1de>
 8012e78:	f04f 0800 	mov.w	r8, #0
 8012e7c:	f104 0a1a 	add.w	sl, r4, #26
 8012e80:	e7f2      	b.n	8012e68 <_printf_float+0x410>
 8012e82:	2301      	movs	r3, #1
 8012e84:	e7df      	b.n	8012e46 <_printf_float+0x3ee>
 8012e86:	2301      	movs	r3, #1
 8012e88:	464a      	mov	r2, r9
 8012e8a:	4631      	mov	r1, r6
 8012e8c:	4628      	mov	r0, r5
 8012e8e:	47b8      	blx	r7
 8012e90:	3001      	adds	r0, #1
 8012e92:	f43f ae3e 	beq.w	8012b12 <_printf_float+0xba>
 8012e96:	f108 0801 	add.w	r8, r8, #1
 8012e9a:	68e3      	ldr	r3, [r4, #12]
 8012e9c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8012e9e:	1a9b      	subs	r3, r3, r2
 8012ea0:	4543      	cmp	r3, r8
 8012ea2:	dcf0      	bgt.n	8012e86 <_printf_float+0x42e>
 8012ea4:	e6fc      	b.n	8012ca0 <_printf_float+0x248>
 8012ea6:	f04f 0800 	mov.w	r8, #0
 8012eaa:	f104 0919 	add.w	r9, r4, #25
 8012eae:	e7f4      	b.n	8012e9a <_printf_float+0x442>
 8012eb0:	2900      	cmp	r1, #0
 8012eb2:	f43f ae8b 	beq.w	8012bcc <_printf_float+0x174>
 8012eb6:	2300      	movs	r3, #0
 8012eb8:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8012ebc:	ab09      	add	r3, sp, #36	; 0x24
 8012ebe:	9300      	str	r3, [sp, #0]
 8012ec0:	ec49 8b10 	vmov	d0, r8, r9
 8012ec4:	6022      	str	r2, [r4, #0]
 8012ec6:	f8cd a004 	str.w	sl, [sp, #4]
 8012eca:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8012ece:	4628      	mov	r0, r5
 8012ed0:	f7ff fd2d 	bl	801292e <__cvt>
 8012ed4:	4680      	mov	r8, r0
 8012ed6:	e648      	b.n	8012b6a <_printf_float+0x112>

08012ed8 <_printf_common>:
 8012ed8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012edc:	4691      	mov	r9, r2
 8012ede:	461f      	mov	r7, r3
 8012ee0:	688a      	ldr	r2, [r1, #8]
 8012ee2:	690b      	ldr	r3, [r1, #16]
 8012ee4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8012ee8:	4293      	cmp	r3, r2
 8012eea:	bfb8      	it	lt
 8012eec:	4613      	movlt	r3, r2
 8012eee:	f8c9 3000 	str.w	r3, [r9]
 8012ef2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8012ef6:	4606      	mov	r6, r0
 8012ef8:	460c      	mov	r4, r1
 8012efa:	b112      	cbz	r2, 8012f02 <_printf_common+0x2a>
 8012efc:	3301      	adds	r3, #1
 8012efe:	f8c9 3000 	str.w	r3, [r9]
 8012f02:	6823      	ldr	r3, [r4, #0]
 8012f04:	0699      	lsls	r1, r3, #26
 8012f06:	bf42      	ittt	mi
 8012f08:	f8d9 3000 	ldrmi.w	r3, [r9]
 8012f0c:	3302      	addmi	r3, #2
 8012f0e:	f8c9 3000 	strmi.w	r3, [r9]
 8012f12:	6825      	ldr	r5, [r4, #0]
 8012f14:	f015 0506 	ands.w	r5, r5, #6
 8012f18:	d107      	bne.n	8012f2a <_printf_common+0x52>
 8012f1a:	f104 0a19 	add.w	sl, r4, #25
 8012f1e:	68e3      	ldr	r3, [r4, #12]
 8012f20:	f8d9 2000 	ldr.w	r2, [r9]
 8012f24:	1a9b      	subs	r3, r3, r2
 8012f26:	42ab      	cmp	r3, r5
 8012f28:	dc28      	bgt.n	8012f7c <_printf_common+0xa4>
 8012f2a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8012f2e:	6822      	ldr	r2, [r4, #0]
 8012f30:	3300      	adds	r3, #0
 8012f32:	bf18      	it	ne
 8012f34:	2301      	movne	r3, #1
 8012f36:	0692      	lsls	r2, r2, #26
 8012f38:	d42d      	bmi.n	8012f96 <_printf_common+0xbe>
 8012f3a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8012f3e:	4639      	mov	r1, r7
 8012f40:	4630      	mov	r0, r6
 8012f42:	47c0      	blx	r8
 8012f44:	3001      	adds	r0, #1
 8012f46:	d020      	beq.n	8012f8a <_printf_common+0xb2>
 8012f48:	6823      	ldr	r3, [r4, #0]
 8012f4a:	68e5      	ldr	r5, [r4, #12]
 8012f4c:	f8d9 2000 	ldr.w	r2, [r9]
 8012f50:	f003 0306 	and.w	r3, r3, #6
 8012f54:	2b04      	cmp	r3, #4
 8012f56:	bf08      	it	eq
 8012f58:	1aad      	subeq	r5, r5, r2
 8012f5a:	68a3      	ldr	r3, [r4, #8]
 8012f5c:	6922      	ldr	r2, [r4, #16]
 8012f5e:	bf0c      	ite	eq
 8012f60:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8012f64:	2500      	movne	r5, #0
 8012f66:	4293      	cmp	r3, r2
 8012f68:	bfc4      	itt	gt
 8012f6a:	1a9b      	subgt	r3, r3, r2
 8012f6c:	18ed      	addgt	r5, r5, r3
 8012f6e:	f04f 0900 	mov.w	r9, #0
 8012f72:	341a      	adds	r4, #26
 8012f74:	454d      	cmp	r5, r9
 8012f76:	d11a      	bne.n	8012fae <_printf_common+0xd6>
 8012f78:	2000      	movs	r0, #0
 8012f7a:	e008      	b.n	8012f8e <_printf_common+0xb6>
 8012f7c:	2301      	movs	r3, #1
 8012f7e:	4652      	mov	r2, sl
 8012f80:	4639      	mov	r1, r7
 8012f82:	4630      	mov	r0, r6
 8012f84:	47c0      	blx	r8
 8012f86:	3001      	adds	r0, #1
 8012f88:	d103      	bne.n	8012f92 <_printf_common+0xba>
 8012f8a:	f04f 30ff 	mov.w	r0, #4294967295
 8012f8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012f92:	3501      	adds	r5, #1
 8012f94:	e7c3      	b.n	8012f1e <_printf_common+0x46>
 8012f96:	18e1      	adds	r1, r4, r3
 8012f98:	1c5a      	adds	r2, r3, #1
 8012f9a:	2030      	movs	r0, #48	; 0x30
 8012f9c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8012fa0:	4422      	add	r2, r4
 8012fa2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8012fa6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8012faa:	3302      	adds	r3, #2
 8012fac:	e7c5      	b.n	8012f3a <_printf_common+0x62>
 8012fae:	2301      	movs	r3, #1
 8012fb0:	4622      	mov	r2, r4
 8012fb2:	4639      	mov	r1, r7
 8012fb4:	4630      	mov	r0, r6
 8012fb6:	47c0      	blx	r8
 8012fb8:	3001      	adds	r0, #1
 8012fba:	d0e6      	beq.n	8012f8a <_printf_common+0xb2>
 8012fbc:	f109 0901 	add.w	r9, r9, #1
 8012fc0:	e7d8      	b.n	8012f74 <_printf_common+0x9c>
	...

08012fc4 <_printf_i>:
 8012fc4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8012fc8:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8012fcc:	460c      	mov	r4, r1
 8012fce:	7e09      	ldrb	r1, [r1, #24]
 8012fd0:	b085      	sub	sp, #20
 8012fd2:	296e      	cmp	r1, #110	; 0x6e
 8012fd4:	4617      	mov	r7, r2
 8012fd6:	4606      	mov	r6, r0
 8012fd8:	4698      	mov	r8, r3
 8012fda:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8012fdc:	f000 80b3 	beq.w	8013146 <_printf_i+0x182>
 8012fe0:	d822      	bhi.n	8013028 <_printf_i+0x64>
 8012fe2:	2963      	cmp	r1, #99	; 0x63
 8012fe4:	d036      	beq.n	8013054 <_printf_i+0x90>
 8012fe6:	d80a      	bhi.n	8012ffe <_printf_i+0x3a>
 8012fe8:	2900      	cmp	r1, #0
 8012fea:	f000 80b9 	beq.w	8013160 <_printf_i+0x19c>
 8012fee:	2958      	cmp	r1, #88	; 0x58
 8012ff0:	f000 8083 	beq.w	80130fa <_printf_i+0x136>
 8012ff4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8012ff8:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8012ffc:	e032      	b.n	8013064 <_printf_i+0xa0>
 8012ffe:	2964      	cmp	r1, #100	; 0x64
 8013000:	d001      	beq.n	8013006 <_printf_i+0x42>
 8013002:	2969      	cmp	r1, #105	; 0x69
 8013004:	d1f6      	bne.n	8012ff4 <_printf_i+0x30>
 8013006:	6820      	ldr	r0, [r4, #0]
 8013008:	6813      	ldr	r3, [r2, #0]
 801300a:	0605      	lsls	r5, r0, #24
 801300c:	f103 0104 	add.w	r1, r3, #4
 8013010:	d52a      	bpl.n	8013068 <_printf_i+0xa4>
 8013012:	681b      	ldr	r3, [r3, #0]
 8013014:	6011      	str	r1, [r2, #0]
 8013016:	2b00      	cmp	r3, #0
 8013018:	da03      	bge.n	8013022 <_printf_i+0x5e>
 801301a:	222d      	movs	r2, #45	; 0x2d
 801301c:	425b      	negs	r3, r3
 801301e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8013022:	486f      	ldr	r0, [pc, #444]	; (80131e0 <_printf_i+0x21c>)
 8013024:	220a      	movs	r2, #10
 8013026:	e039      	b.n	801309c <_printf_i+0xd8>
 8013028:	2973      	cmp	r1, #115	; 0x73
 801302a:	f000 809d 	beq.w	8013168 <_printf_i+0x1a4>
 801302e:	d808      	bhi.n	8013042 <_printf_i+0x7e>
 8013030:	296f      	cmp	r1, #111	; 0x6f
 8013032:	d020      	beq.n	8013076 <_printf_i+0xb2>
 8013034:	2970      	cmp	r1, #112	; 0x70
 8013036:	d1dd      	bne.n	8012ff4 <_printf_i+0x30>
 8013038:	6823      	ldr	r3, [r4, #0]
 801303a:	f043 0320 	orr.w	r3, r3, #32
 801303e:	6023      	str	r3, [r4, #0]
 8013040:	e003      	b.n	801304a <_printf_i+0x86>
 8013042:	2975      	cmp	r1, #117	; 0x75
 8013044:	d017      	beq.n	8013076 <_printf_i+0xb2>
 8013046:	2978      	cmp	r1, #120	; 0x78
 8013048:	d1d4      	bne.n	8012ff4 <_printf_i+0x30>
 801304a:	2378      	movs	r3, #120	; 0x78
 801304c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8013050:	4864      	ldr	r0, [pc, #400]	; (80131e4 <_printf_i+0x220>)
 8013052:	e055      	b.n	8013100 <_printf_i+0x13c>
 8013054:	6813      	ldr	r3, [r2, #0]
 8013056:	1d19      	adds	r1, r3, #4
 8013058:	681b      	ldr	r3, [r3, #0]
 801305a:	6011      	str	r1, [r2, #0]
 801305c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8013060:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8013064:	2301      	movs	r3, #1
 8013066:	e08c      	b.n	8013182 <_printf_i+0x1be>
 8013068:	681b      	ldr	r3, [r3, #0]
 801306a:	6011      	str	r1, [r2, #0]
 801306c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8013070:	bf18      	it	ne
 8013072:	b21b      	sxthne	r3, r3
 8013074:	e7cf      	b.n	8013016 <_printf_i+0x52>
 8013076:	6813      	ldr	r3, [r2, #0]
 8013078:	6825      	ldr	r5, [r4, #0]
 801307a:	1d18      	adds	r0, r3, #4
 801307c:	6010      	str	r0, [r2, #0]
 801307e:	0628      	lsls	r0, r5, #24
 8013080:	d501      	bpl.n	8013086 <_printf_i+0xc2>
 8013082:	681b      	ldr	r3, [r3, #0]
 8013084:	e002      	b.n	801308c <_printf_i+0xc8>
 8013086:	0668      	lsls	r0, r5, #25
 8013088:	d5fb      	bpl.n	8013082 <_printf_i+0xbe>
 801308a:	881b      	ldrh	r3, [r3, #0]
 801308c:	4854      	ldr	r0, [pc, #336]	; (80131e0 <_printf_i+0x21c>)
 801308e:	296f      	cmp	r1, #111	; 0x6f
 8013090:	bf14      	ite	ne
 8013092:	220a      	movne	r2, #10
 8013094:	2208      	moveq	r2, #8
 8013096:	2100      	movs	r1, #0
 8013098:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801309c:	6865      	ldr	r5, [r4, #4]
 801309e:	60a5      	str	r5, [r4, #8]
 80130a0:	2d00      	cmp	r5, #0
 80130a2:	f2c0 8095 	blt.w	80131d0 <_printf_i+0x20c>
 80130a6:	6821      	ldr	r1, [r4, #0]
 80130a8:	f021 0104 	bic.w	r1, r1, #4
 80130ac:	6021      	str	r1, [r4, #0]
 80130ae:	2b00      	cmp	r3, #0
 80130b0:	d13d      	bne.n	801312e <_printf_i+0x16a>
 80130b2:	2d00      	cmp	r5, #0
 80130b4:	f040 808e 	bne.w	80131d4 <_printf_i+0x210>
 80130b8:	4665      	mov	r5, ip
 80130ba:	2a08      	cmp	r2, #8
 80130bc:	d10b      	bne.n	80130d6 <_printf_i+0x112>
 80130be:	6823      	ldr	r3, [r4, #0]
 80130c0:	07db      	lsls	r3, r3, #31
 80130c2:	d508      	bpl.n	80130d6 <_printf_i+0x112>
 80130c4:	6923      	ldr	r3, [r4, #16]
 80130c6:	6862      	ldr	r2, [r4, #4]
 80130c8:	429a      	cmp	r2, r3
 80130ca:	bfde      	ittt	le
 80130cc:	2330      	movle	r3, #48	; 0x30
 80130ce:	f805 3c01 	strble.w	r3, [r5, #-1]
 80130d2:	f105 35ff 	addle.w	r5, r5, #4294967295
 80130d6:	ebac 0305 	sub.w	r3, ip, r5
 80130da:	6123      	str	r3, [r4, #16]
 80130dc:	f8cd 8000 	str.w	r8, [sp]
 80130e0:	463b      	mov	r3, r7
 80130e2:	aa03      	add	r2, sp, #12
 80130e4:	4621      	mov	r1, r4
 80130e6:	4630      	mov	r0, r6
 80130e8:	f7ff fef6 	bl	8012ed8 <_printf_common>
 80130ec:	3001      	adds	r0, #1
 80130ee:	d14d      	bne.n	801318c <_printf_i+0x1c8>
 80130f0:	f04f 30ff 	mov.w	r0, #4294967295
 80130f4:	b005      	add	sp, #20
 80130f6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80130fa:	4839      	ldr	r0, [pc, #228]	; (80131e0 <_printf_i+0x21c>)
 80130fc:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8013100:	6813      	ldr	r3, [r2, #0]
 8013102:	6821      	ldr	r1, [r4, #0]
 8013104:	1d1d      	adds	r5, r3, #4
 8013106:	681b      	ldr	r3, [r3, #0]
 8013108:	6015      	str	r5, [r2, #0]
 801310a:	060a      	lsls	r2, r1, #24
 801310c:	d50b      	bpl.n	8013126 <_printf_i+0x162>
 801310e:	07ca      	lsls	r2, r1, #31
 8013110:	bf44      	itt	mi
 8013112:	f041 0120 	orrmi.w	r1, r1, #32
 8013116:	6021      	strmi	r1, [r4, #0]
 8013118:	b91b      	cbnz	r3, 8013122 <_printf_i+0x15e>
 801311a:	6822      	ldr	r2, [r4, #0]
 801311c:	f022 0220 	bic.w	r2, r2, #32
 8013120:	6022      	str	r2, [r4, #0]
 8013122:	2210      	movs	r2, #16
 8013124:	e7b7      	b.n	8013096 <_printf_i+0xd2>
 8013126:	064d      	lsls	r5, r1, #25
 8013128:	bf48      	it	mi
 801312a:	b29b      	uxthmi	r3, r3
 801312c:	e7ef      	b.n	801310e <_printf_i+0x14a>
 801312e:	4665      	mov	r5, ip
 8013130:	fbb3 f1f2 	udiv	r1, r3, r2
 8013134:	fb02 3311 	mls	r3, r2, r1, r3
 8013138:	5cc3      	ldrb	r3, [r0, r3]
 801313a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 801313e:	460b      	mov	r3, r1
 8013140:	2900      	cmp	r1, #0
 8013142:	d1f5      	bne.n	8013130 <_printf_i+0x16c>
 8013144:	e7b9      	b.n	80130ba <_printf_i+0xf6>
 8013146:	6813      	ldr	r3, [r2, #0]
 8013148:	6825      	ldr	r5, [r4, #0]
 801314a:	6961      	ldr	r1, [r4, #20]
 801314c:	1d18      	adds	r0, r3, #4
 801314e:	6010      	str	r0, [r2, #0]
 8013150:	0628      	lsls	r0, r5, #24
 8013152:	681b      	ldr	r3, [r3, #0]
 8013154:	d501      	bpl.n	801315a <_printf_i+0x196>
 8013156:	6019      	str	r1, [r3, #0]
 8013158:	e002      	b.n	8013160 <_printf_i+0x19c>
 801315a:	066a      	lsls	r2, r5, #25
 801315c:	d5fb      	bpl.n	8013156 <_printf_i+0x192>
 801315e:	8019      	strh	r1, [r3, #0]
 8013160:	2300      	movs	r3, #0
 8013162:	6123      	str	r3, [r4, #16]
 8013164:	4665      	mov	r5, ip
 8013166:	e7b9      	b.n	80130dc <_printf_i+0x118>
 8013168:	6813      	ldr	r3, [r2, #0]
 801316a:	1d19      	adds	r1, r3, #4
 801316c:	6011      	str	r1, [r2, #0]
 801316e:	681d      	ldr	r5, [r3, #0]
 8013170:	6862      	ldr	r2, [r4, #4]
 8013172:	2100      	movs	r1, #0
 8013174:	4628      	mov	r0, r5
 8013176:	f7ed f80b 	bl	8000190 <memchr>
 801317a:	b108      	cbz	r0, 8013180 <_printf_i+0x1bc>
 801317c:	1b40      	subs	r0, r0, r5
 801317e:	6060      	str	r0, [r4, #4]
 8013180:	6863      	ldr	r3, [r4, #4]
 8013182:	6123      	str	r3, [r4, #16]
 8013184:	2300      	movs	r3, #0
 8013186:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801318a:	e7a7      	b.n	80130dc <_printf_i+0x118>
 801318c:	6923      	ldr	r3, [r4, #16]
 801318e:	462a      	mov	r2, r5
 8013190:	4639      	mov	r1, r7
 8013192:	4630      	mov	r0, r6
 8013194:	47c0      	blx	r8
 8013196:	3001      	adds	r0, #1
 8013198:	d0aa      	beq.n	80130f0 <_printf_i+0x12c>
 801319a:	6823      	ldr	r3, [r4, #0]
 801319c:	079b      	lsls	r3, r3, #30
 801319e:	d413      	bmi.n	80131c8 <_printf_i+0x204>
 80131a0:	68e0      	ldr	r0, [r4, #12]
 80131a2:	9b03      	ldr	r3, [sp, #12]
 80131a4:	4298      	cmp	r0, r3
 80131a6:	bfb8      	it	lt
 80131a8:	4618      	movlt	r0, r3
 80131aa:	e7a3      	b.n	80130f4 <_printf_i+0x130>
 80131ac:	2301      	movs	r3, #1
 80131ae:	464a      	mov	r2, r9
 80131b0:	4639      	mov	r1, r7
 80131b2:	4630      	mov	r0, r6
 80131b4:	47c0      	blx	r8
 80131b6:	3001      	adds	r0, #1
 80131b8:	d09a      	beq.n	80130f0 <_printf_i+0x12c>
 80131ba:	3501      	adds	r5, #1
 80131bc:	68e3      	ldr	r3, [r4, #12]
 80131be:	9a03      	ldr	r2, [sp, #12]
 80131c0:	1a9b      	subs	r3, r3, r2
 80131c2:	42ab      	cmp	r3, r5
 80131c4:	dcf2      	bgt.n	80131ac <_printf_i+0x1e8>
 80131c6:	e7eb      	b.n	80131a0 <_printf_i+0x1dc>
 80131c8:	2500      	movs	r5, #0
 80131ca:	f104 0919 	add.w	r9, r4, #25
 80131ce:	e7f5      	b.n	80131bc <_printf_i+0x1f8>
 80131d0:	2b00      	cmp	r3, #0
 80131d2:	d1ac      	bne.n	801312e <_printf_i+0x16a>
 80131d4:	7803      	ldrb	r3, [r0, #0]
 80131d6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80131da:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80131de:	e76c      	b.n	80130ba <_printf_i+0xf6>
 80131e0:	080180b2 	.word	0x080180b2
 80131e4:	080180c3 	.word	0x080180c3

080131e8 <iprintf>:
 80131e8:	b40f      	push	{r0, r1, r2, r3}
 80131ea:	4b0a      	ldr	r3, [pc, #40]	; (8013214 <iprintf+0x2c>)
 80131ec:	b513      	push	{r0, r1, r4, lr}
 80131ee:	681c      	ldr	r4, [r3, #0]
 80131f0:	b124      	cbz	r4, 80131fc <iprintf+0x14>
 80131f2:	69a3      	ldr	r3, [r4, #24]
 80131f4:	b913      	cbnz	r3, 80131fc <iprintf+0x14>
 80131f6:	4620      	mov	r0, r4
 80131f8:	f001 f89e 	bl	8014338 <__sinit>
 80131fc:	ab05      	add	r3, sp, #20
 80131fe:	9a04      	ldr	r2, [sp, #16]
 8013200:	68a1      	ldr	r1, [r4, #8]
 8013202:	9301      	str	r3, [sp, #4]
 8013204:	4620      	mov	r0, r4
 8013206:	f001 fea9 	bl	8014f5c <_vfiprintf_r>
 801320a:	b002      	add	sp, #8
 801320c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013210:	b004      	add	sp, #16
 8013212:	4770      	bx	lr
 8013214:	20000024 	.word	0x20000024

08013218 <_puts_r>:
 8013218:	b570      	push	{r4, r5, r6, lr}
 801321a:	460e      	mov	r6, r1
 801321c:	4605      	mov	r5, r0
 801321e:	b118      	cbz	r0, 8013228 <_puts_r+0x10>
 8013220:	6983      	ldr	r3, [r0, #24]
 8013222:	b90b      	cbnz	r3, 8013228 <_puts_r+0x10>
 8013224:	f001 f888 	bl	8014338 <__sinit>
 8013228:	69ab      	ldr	r3, [r5, #24]
 801322a:	68ac      	ldr	r4, [r5, #8]
 801322c:	b913      	cbnz	r3, 8013234 <_puts_r+0x1c>
 801322e:	4628      	mov	r0, r5
 8013230:	f001 f882 	bl	8014338 <__sinit>
 8013234:	4b23      	ldr	r3, [pc, #140]	; (80132c4 <_puts_r+0xac>)
 8013236:	429c      	cmp	r4, r3
 8013238:	d117      	bne.n	801326a <_puts_r+0x52>
 801323a:	686c      	ldr	r4, [r5, #4]
 801323c:	89a3      	ldrh	r3, [r4, #12]
 801323e:	071b      	lsls	r3, r3, #28
 8013240:	d51d      	bpl.n	801327e <_puts_r+0x66>
 8013242:	6923      	ldr	r3, [r4, #16]
 8013244:	b1db      	cbz	r3, 801327e <_puts_r+0x66>
 8013246:	3e01      	subs	r6, #1
 8013248:	68a3      	ldr	r3, [r4, #8]
 801324a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 801324e:	3b01      	subs	r3, #1
 8013250:	60a3      	str	r3, [r4, #8]
 8013252:	b9e9      	cbnz	r1, 8013290 <_puts_r+0x78>
 8013254:	2b00      	cmp	r3, #0
 8013256:	da2e      	bge.n	80132b6 <_puts_r+0x9e>
 8013258:	4622      	mov	r2, r4
 801325a:	210a      	movs	r1, #10
 801325c:	4628      	mov	r0, r5
 801325e:	f000 f875 	bl	801334c <__swbuf_r>
 8013262:	3001      	adds	r0, #1
 8013264:	d011      	beq.n	801328a <_puts_r+0x72>
 8013266:	200a      	movs	r0, #10
 8013268:	e011      	b.n	801328e <_puts_r+0x76>
 801326a:	4b17      	ldr	r3, [pc, #92]	; (80132c8 <_puts_r+0xb0>)
 801326c:	429c      	cmp	r4, r3
 801326e:	d101      	bne.n	8013274 <_puts_r+0x5c>
 8013270:	68ac      	ldr	r4, [r5, #8]
 8013272:	e7e3      	b.n	801323c <_puts_r+0x24>
 8013274:	4b15      	ldr	r3, [pc, #84]	; (80132cc <_puts_r+0xb4>)
 8013276:	429c      	cmp	r4, r3
 8013278:	bf08      	it	eq
 801327a:	68ec      	ldreq	r4, [r5, #12]
 801327c:	e7de      	b.n	801323c <_puts_r+0x24>
 801327e:	4621      	mov	r1, r4
 8013280:	4628      	mov	r0, r5
 8013282:	f000 f8b5 	bl	80133f0 <__swsetup_r>
 8013286:	2800      	cmp	r0, #0
 8013288:	d0dd      	beq.n	8013246 <_puts_r+0x2e>
 801328a:	f04f 30ff 	mov.w	r0, #4294967295
 801328e:	bd70      	pop	{r4, r5, r6, pc}
 8013290:	2b00      	cmp	r3, #0
 8013292:	da04      	bge.n	801329e <_puts_r+0x86>
 8013294:	69a2      	ldr	r2, [r4, #24]
 8013296:	429a      	cmp	r2, r3
 8013298:	dc06      	bgt.n	80132a8 <_puts_r+0x90>
 801329a:	290a      	cmp	r1, #10
 801329c:	d004      	beq.n	80132a8 <_puts_r+0x90>
 801329e:	6823      	ldr	r3, [r4, #0]
 80132a0:	1c5a      	adds	r2, r3, #1
 80132a2:	6022      	str	r2, [r4, #0]
 80132a4:	7019      	strb	r1, [r3, #0]
 80132a6:	e7cf      	b.n	8013248 <_puts_r+0x30>
 80132a8:	4622      	mov	r2, r4
 80132aa:	4628      	mov	r0, r5
 80132ac:	f000 f84e 	bl	801334c <__swbuf_r>
 80132b0:	3001      	adds	r0, #1
 80132b2:	d1c9      	bne.n	8013248 <_puts_r+0x30>
 80132b4:	e7e9      	b.n	801328a <_puts_r+0x72>
 80132b6:	6823      	ldr	r3, [r4, #0]
 80132b8:	200a      	movs	r0, #10
 80132ba:	1c5a      	adds	r2, r3, #1
 80132bc:	6022      	str	r2, [r4, #0]
 80132be:	7018      	strb	r0, [r3, #0]
 80132c0:	e7e5      	b.n	801328e <_puts_r+0x76>
 80132c2:	bf00      	nop
 80132c4:	08018104 	.word	0x08018104
 80132c8:	08018124 	.word	0x08018124
 80132cc:	080180e4 	.word	0x080180e4

080132d0 <puts>:
 80132d0:	4b02      	ldr	r3, [pc, #8]	; (80132dc <puts+0xc>)
 80132d2:	4601      	mov	r1, r0
 80132d4:	6818      	ldr	r0, [r3, #0]
 80132d6:	f7ff bf9f 	b.w	8013218 <_puts_r>
 80132da:	bf00      	nop
 80132dc:	20000024 	.word	0x20000024

080132e0 <siprintf>:
 80132e0:	b40e      	push	{r1, r2, r3}
 80132e2:	b500      	push	{lr}
 80132e4:	b09c      	sub	sp, #112	; 0x70
 80132e6:	ab1d      	add	r3, sp, #116	; 0x74
 80132e8:	9002      	str	r0, [sp, #8]
 80132ea:	9006      	str	r0, [sp, #24]
 80132ec:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80132f0:	4809      	ldr	r0, [pc, #36]	; (8013318 <siprintf+0x38>)
 80132f2:	9107      	str	r1, [sp, #28]
 80132f4:	9104      	str	r1, [sp, #16]
 80132f6:	4909      	ldr	r1, [pc, #36]	; (801331c <siprintf+0x3c>)
 80132f8:	f853 2b04 	ldr.w	r2, [r3], #4
 80132fc:	9105      	str	r1, [sp, #20]
 80132fe:	6800      	ldr	r0, [r0, #0]
 8013300:	9301      	str	r3, [sp, #4]
 8013302:	a902      	add	r1, sp, #8
 8013304:	f001 fd08 	bl	8014d18 <_svfiprintf_r>
 8013308:	9b02      	ldr	r3, [sp, #8]
 801330a:	2200      	movs	r2, #0
 801330c:	701a      	strb	r2, [r3, #0]
 801330e:	b01c      	add	sp, #112	; 0x70
 8013310:	f85d eb04 	ldr.w	lr, [sp], #4
 8013314:	b003      	add	sp, #12
 8013316:	4770      	bx	lr
 8013318:	20000024 	.word	0x20000024
 801331c:	ffff0208 	.word	0xffff0208

08013320 <strncpy>:
 8013320:	b570      	push	{r4, r5, r6, lr}
 8013322:	3901      	subs	r1, #1
 8013324:	4604      	mov	r4, r0
 8013326:	b902      	cbnz	r2, 801332a <strncpy+0xa>
 8013328:	bd70      	pop	{r4, r5, r6, pc}
 801332a:	4623      	mov	r3, r4
 801332c:	f811 5f01 	ldrb.w	r5, [r1, #1]!
 8013330:	f803 5b01 	strb.w	r5, [r3], #1
 8013334:	1e56      	subs	r6, r2, #1
 8013336:	b92d      	cbnz	r5, 8013344 <strncpy+0x24>
 8013338:	4414      	add	r4, r2
 801333a:	42a3      	cmp	r3, r4
 801333c:	d0f4      	beq.n	8013328 <strncpy+0x8>
 801333e:	f803 5b01 	strb.w	r5, [r3], #1
 8013342:	e7fa      	b.n	801333a <strncpy+0x1a>
 8013344:	461c      	mov	r4, r3
 8013346:	4632      	mov	r2, r6
 8013348:	e7ed      	b.n	8013326 <strncpy+0x6>
	...

0801334c <__swbuf_r>:
 801334c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801334e:	460e      	mov	r6, r1
 8013350:	4614      	mov	r4, r2
 8013352:	4605      	mov	r5, r0
 8013354:	b118      	cbz	r0, 801335e <__swbuf_r+0x12>
 8013356:	6983      	ldr	r3, [r0, #24]
 8013358:	b90b      	cbnz	r3, 801335e <__swbuf_r+0x12>
 801335a:	f000 ffed 	bl	8014338 <__sinit>
 801335e:	4b21      	ldr	r3, [pc, #132]	; (80133e4 <__swbuf_r+0x98>)
 8013360:	429c      	cmp	r4, r3
 8013362:	d12a      	bne.n	80133ba <__swbuf_r+0x6e>
 8013364:	686c      	ldr	r4, [r5, #4]
 8013366:	69a3      	ldr	r3, [r4, #24]
 8013368:	60a3      	str	r3, [r4, #8]
 801336a:	89a3      	ldrh	r3, [r4, #12]
 801336c:	071a      	lsls	r2, r3, #28
 801336e:	d52e      	bpl.n	80133ce <__swbuf_r+0x82>
 8013370:	6923      	ldr	r3, [r4, #16]
 8013372:	b363      	cbz	r3, 80133ce <__swbuf_r+0x82>
 8013374:	6923      	ldr	r3, [r4, #16]
 8013376:	6820      	ldr	r0, [r4, #0]
 8013378:	1ac0      	subs	r0, r0, r3
 801337a:	6963      	ldr	r3, [r4, #20]
 801337c:	b2f6      	uxtb	r6, r6
 801337e:	4283      	cmp	r3, r0
 8013380:	4637      	mov	r7, r6
 8013382:	dc04      	bgt.n	801338e <__swbuf_r+0x42>
 8013384:	4621      	mov	r1, r4
 8013386:	4628      	mov	r0, r5
 8013388:	f000 ff6c 	bl	8014264 <_fflush_r>
 801338c:	bb28      	cbnz	r0, 80133da <__swbuf_r+0x8e>
 801338e:	68a3      	ldr	r3, [r4, #8]
 8013390:	3b01      	subs	r3, #1
 8013392:	60a3      	str	r3, [r4, #8]
 8013394:	6823      	ldr	r3, [r4, #0]
 8013396:	1c5a      	adds	r2, r3, #1
 8013398:	6022      	str	r2, [r4, #0]
 801339a:	701e      	strb	r6, [r3, #0]
 801339c:	6963      	ldr	r3, [r4, #20]
 801339e:	3001      	adds	r0, #1
 80133a0:	4283      	cmp	r3, r0
 80133a2:	d004      	beq.n	80133ae <__swbuf_r+0x62>
 80133a4:	89a3      	ldrh	r3, [r4, #12]
 80133a6:	07db      	lsls	r3, r3, #31
 80133a8:	d519      	bpl.n	80133de <__swbuf_r+0x92>
 80133aa:	2e0a      	cmp	r6, #10
 80133ac:	d117      	bne.n	80133de <__swbuf_r+0x92>
 80133ae:	4621      	mov	r1, r4
 80133b0:	4628      	mov	r0, r5
 80133b2:	f000 ff57 	bl	8014264 <_fflush_r>
 80133b6:	b190      	cbz	r0, 80133de <__swbuf_r+0x92>
 80133b8:	e00f      	b.n	80133da <__swbuf_r+0x8e>
 80133ba:	4b0b      	ldr	r3, [pc, #44]	; (80133e8 <__swbuf_r+0x9c>)
 80133bc:	429c      	cmp	r4, r3
 80133be:	d101      	bne.n	80133c4 <__swbuf_r+0x78>
 80133c0:	68ac      	ldr	r4, [r5, #8]
 80133c2:	e7d0      	b.n	8013366 <__swbuf_r+0x1a>
 80133c4:	4b09      	ldr	r3, [pc, #36]	; (80133ec <__swbuf_r+0xa0>)
 80133c6:	429c      	cmp	r4, r3
 80133c8:	bf08      	it	eq
 80133ca:	68ec      	ldreq	r4, [r5, #12]
 80133cc:	e7cb      	b.n	8013366 <__swbuf_r+0x1a>
 80133ce:	4621      	mov	r1, r4
 80133d0:	4628      	mov	r0, r5
 80133d2:	f000 f80d 	bl	80133f0 <__swsetup_r>
 80133d6:	2800      	cmp	r0, #0
 80133d8:	d0cc      	beq.n	8013374 <__swbuf_r+0x28>
 80133da:	f04f 37ff 	mov.w	r7, #4294967295
 80133de:	4638      	mov	r0, r7
 80133e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80133e2:	bf00      	nop
 80133e4:	08018104 	.word	0x08018104
 80133e8:	08018124 	.word	0x08018124
 80133ec:	080180e4 	.word	0x080180e4

080133f0 <__swsetup_r>:
 80133f0:	4b32      	ldr	r3, [pc, #200]	; (80134bc <__swsetup_r+0xcc>)
 80133f2:	b570      	push	{r4, r5, r6, lr}
 80133f4:	681d      	ldr	r5, [r3, #0]
 80133f6:	4606      	mov	r6, r0
 80133f8:	460c      	mov	r4, r1
 80133fa:	b125      	cbz	r5, 8013406 <__swsetup_r+0x16>
 80133fc:	69ab      	ldr	r3, [r5, #24]
 80133fe:	b913      	cbnz	r3, 8013406 <__swsetup_r+0x16>
 8013400:	4628      	mov	r0, r5
 8013402:	f000 ff99 	bl	8014338 <__sinit>
 8013406:	4b2e      	ldr	r3, [pc, #184]	; (80134c0 <__swsetup_r+0xd0>)
 8013408:	429c      	cmp	r4, r3
 801340a:	d10f      	bne.n	801342c <__swsetup_r+0x3c>
 801340c:	686c      	ldr	r4, [r5, #4]
 801340e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013412:	b29a      	uxth	r2, r3
 8013414:	0715      	lsls	r5, r2, #28
 8013416:	d42c      	bmi.n	8013472 <__swsetup_r+0x82>
 8013418:	06d0      	lsls	r0, r2, #27
 801341a:	d411      	bmi.n	8013440 <__swsetup_r+0x50>
 801341c:	2209      	movs	r2, #9
 801341e:	6032      	str	r2, [r6, #0]
 8013420:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013424:	81a3      	strh	r3, [r4, #12]
 8013426:	f04f 30ff 	mov.w	r0, #4294967295
 801342a:	e03e      	b.n	80134aa <__swsetup_r+0xba>
 801342c:	4b25      	ldr	r3, [pc, #148]	; (80134c4 <__swsetup_r+0xd4>)
 801342e:	429c      	cmp	r4, r3
 8013430:	d101      	bne.n	8013436 <__swsetup_r+0x46>
 8013432:	68ac      	ldr	r4, [r5, #8]
 8013434:	e7eb      	b.n	801340e <__swsetup_r+0x1e>
 8013436:	4b24      	ldr	r3, [pc, #144]	; (80134c8 <__swsetup_r+0xd8>)
 8013438:	429c      	cmp	r4, r3
 801343a:	bf08      	it	eq
 801343c:	68ec      	ldreq	r4, [r5, #12]
 801343e:	e7e6      	b.n	801340e <__swsetup_r+0x1e>
 8013440:	0751      	lsls	r1, r2, #29
 8013442:	d512      	bpl.n	801346a <__swsetup_r+0x7a>
 8013444:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8013446:	b141      	cbz	r1, 801345a <__swsetup_r+0x6a>
 8013448:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801344c:	4299      	cmp	r1, r3
 801344e:	d002      	beq.n	8013456 <__swsetup_r+0x66>
 8013450:	4630      	mov	r0, r6
 8013452:	f001 fb5f 	bl	8014b14 <_free_r>
 8013456:	2300      	movs	r3, #0
 8013458:	6363      	str	r3, [r4, #52]	; 0x34
 801345a:	89a3      	ldrh	r3, [r4, #12]
 801345c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8013460:	81a3      	strh	r3, [r4, #12]
 8013462:	2300      	movs	r3, #0
 8013464:	6063      	str	r3, [r4, #4]
 8013466:	6923      	ldr	r3, [r4, #16]
 8013468:	6023      	str	r3, [r4, #0]
 801346a:	89a3      	ldrh	r3, [r4, #12]
 801346c:	f043 0308 	orr.w	r3, r3, #8
 8013470:	81a3      	strh	r3, [r4, #12]
 8013472:	6923      	ldr	r3, [r4, #16]
 8013474:	b94b      	cbnz	r3, 801348a <__swsetup_r+0x9a>
 8013476:	89a3      	ldrh	r3, [r4, #12]
 8013478:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801347c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8013480:	d003      	beq.n	801348a <__swsetup_r+0x9a>
 8013482:	4621      	mov	r1, r4
 8013484:	4630      	mov	r0, r6
 8013486:	f001 f813 	bl	80144b0 <__smakebuf_r>
 801348a:	89a2      	ldrh	r2, [r4, #12]
 801348c:	f012 0301 	ands.w	r3, r2, #1
 8013490:	d00c      	beq.n	80134ac <__swsetup_r+0xbc>
 8013492:	2300      	movs	r3, #0
 8013494:	60a3      	str	r3, [r4, #8]
 8013496:	6963      	ldr	r3, [r4, #20]
 8013498:	425b      	negs	r3, r3
 801349a:	61a3      	str	r3, [r4, #24]
 801349c:	6923      	ldr	r3, [r4, #16]
 801349e:	b953      	cbnz	r3, 80134b6 <__swsetup_r+0xc6>
 80134a0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80134a4:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 80134a8:	d1ba      	bne.n	8013420 <__swsetup_r+0x30>
 80134aa:	bd70      	pop	{r4, r5, r6, pc}
 80134ac:	0792      	lsls	r2, r2, #30
 80134ae:	bf58      	it	pl
 80134b0:	6963      	ldrpl	r3, [r4, #20]
 80134b2:	60a3      	str	r3, [r4, #8]
 80134b4:	e7f2      	b.n	801349c <__swsetup_r+0xac>
 80134b6:	2000      	movs	r0, #0
 80134b8:	e7f7      	b.n	80134aa <__swsetup_r+0xba>
 80134ba:	bf00      	nop
 80134bc:	20000024 	.word	0x20000024
 80134c0:	08018104 	.word	0x08018104
 80134c4:	08018124 	.word	0x08018124
 80134c8:	080180e4 	.word	0x080180e4

080134cc <quorem>:
 80134cc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80134d0:	6903      	ldr	r3, [r0, #16]
 80134d2:	690c      	ldr	r4, [r1, #16]
 80134d4:	42a3      	cmp	r3, r4
 80134d6:	4680      	mov	r8, r0
 80134d8:	f2c0 8082 	blt.w	80135e0 <quorem+0x114>
 80134dc:	3c01      	subs	r4, #1
 80134de:	f101 0714 	add.w	r7, r1, #20
 80134e2:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 80134e6:	f100 0614 	add.w	r6, r0, #20
 80134ea:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 80134ee:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 80134f2:	eb06 030c 	add.w	r3, r6, ip
 80134f6:	3501      	adds	r5, #1
 80134f8:	eb07 090c 	add.w	r9, r7, ip
 80134fc:	9301      	str	r3, [sp, #4]
 80134fe:	fbb0 f5f5 	udiv	r5, r0, r5
 8013502:	b395      	cbz	r5, 801356a <quorem+0x9e>
 8013504:	f04f 0a00 	mov.w	sl, #0
 8013508:	4638      	mov	r0, r7
 801350a:	46b6      	mov	lr, r6
 801350c:	46d3      	mov	fp, sl
 801350e:	f850 2b04 	ldr.w	r2, [r0], #4
 8013512:	b293      	uxth	r3, r2
 8013514:	fb05 a303 	mla	r3, r5, r3, sl
 8013518:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801351c:	b29b      	uxth	r3, r3
 801351e:	ebab 0303 	sub.w	r3, fp, r3
 8013522:	0c12      	lsrs	r2, r2, #16
 8013524:	f8de b000 	ldr.w	fp, [lr]
 8013528:	fb05 a202 	mla	r2, r5, r2, sl
 801352c:	fa13 f38b 	uxtah	r3, r3, fp
 8013530:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8013534:	fa1f fb82 	uxth.w	fp, r2
 8013538:	f8de 2000 	ldr.w	r2, [lr]
 801353c:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8013540:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8013544:	b29b      	uxth	r3, r3
 8013546:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801354a:	4581      	cmp	r9, r0
 801354c:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8013550:	f84e 3b04 	str.w	r3, [lr], #4
 8013554:	d2db      	bcs.n	801350e <quorem+0x42>
 8013556:	f856 300c 	ldr.w	r3, [r6, ip]
 801355a:	b933      	cbnz	r3, 801356a <quorem+0x9e>
 801355c:	9b01      	ldr	r3, [sp, #4]
 801355e:	3b04      	subs	r3, #4
 8013560:	429e      	cmp	r6, r3
 8013562:	461a      	mov	r2, r3
 8013564:	d330      	bcc.n	80135c8 <quorem+0xfc>
 8013566:	f8c8 4010 	str.w	r4, [r8, #16]
 801356a:	4640      	mov	r0, r8
 801356c:	f001 f9fe 	bl	801496c <__mcmp>
 8013570:	2800      	cmp	r0, #0
 8013572:	db25      	blt.n	80135c0 <quorem+0xf4>
 8013574:	3501      	adds	r5, #1
 8013576:	4630      	mov	r0, r6
 8013578:	f04f 0c00 	mov.w	ip, #0
 801357c:	f857 2b04 	ldr.w	r2, [r7], #4
 8013580:	f8d0 e000 	ldr.w	lr, [r0]
 8013584:	b293      	uxth	r3, r2
 8013586:	ebac 0303 	sub.w	r3, ip, r3
 801358a:	0c12      	lsrs	r2, r2, #16
 801358c:	fa13 f38e 	uxtah	r3, r3, lr
 8013590:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8013594:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8013598:	b29b      	uxth	r3, r3
 801359a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801359e:	45b9      	cmp	r9, r7
 80135a0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80135a4:	f840 3b04 	str.w	r3, [r0], #4
 80135a8:	d2e8      	bcs.n	801357c <quorem+0xb0>
 80135aa:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 80135ae:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 80135b2:	b92a      	cbnz	r2, 80135c0 <quorem+0xf4>
 80135b4:	3b04      	subs	r3, #4
 80135b6:	429e      	cmp	r6, r3
 80135b8:	461a      	mov	r2, r3
 80135ba:	d30b      	bcc.n	80135d4 <quorem+0x108>
 80135bc:	f8c8 4010 	str.w	r4, [r8, #16]
 80135c0:	4628      	mov	r0, r5
 80135c2:	b003      	add	sp, #12
 80135c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80135c8:	6812      	ldr	r2, [r2, #0]
 80135ca:	3b04      	subs	r3, #4
 80135cc:	2a00      	cmp	r2, #0
 80135ce:	d1ca      	bne.n	8013566 <quorem+0x9a>
 80135d0:	3c01      	subs	r4, #1
 80135d2:	e7c5      	b.n	8013560 <quorem+0x94>
 80135d4:	6812      	ldr	r2, [r2, #0]
 80135d6:	3b04      	subs	r3, #4
 80135d8:	2a00      	cmp	r2, #0
 80135da:	d1ef      	bne.n	80135bc <quorem+0xf0>
 80135dc:	3c01      	subs	r4, #1
 80135de:	e7ea      	b.n	80135b6 <quorem+0xea>
 80135e0:	2000      	movs	r0, #0
 80135e2:	e7ee      	b.n	80135c2 <quorem+0xf6>
 80135e4:	0000      	movs	r0, r0
	...

080135e8 <_dtoa_r>:
 80135e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80135ec:	ec57 6b10 	vmov	r6, r7, d0
 80135f0:	b097      	sub	sp, #92	; 0x5c
 80135f2:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80135f4:	9106      	str	r1, [sp, #24]
 80135f6:	4604      	mov	r4, r0
 80135f8:	920b      	str	r2, [sp, #44]	; 0x2c
 80135fa:	9312      	str	r3, [sp, #72]	; 0x48
 80135fc:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8013600:	e9cd 6700 	strd	r6, r7, [sp]
 8013604:	b93d      	cbnz	r5, 8013616 <_dtoa_r+0x2e>
 8013606:	2010      	movs	r0, #16
 8013608:	f000 ff92 	bl	8014530 <malloc>
 801360c:	6260      	str	r0, [r4, #36]	; 0x24
 801360e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8013612:	6005      	str	r5, [r0, #0]
 8013614:	60c5      	str	r5, [r0, #12]
 8013616:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8013618:	6819      	ldr	r1, [r3, #0]
 801361a:	b151      	cbz	r1, 8013632 <_dtoa_r+0x4a>
 801361c:	685a      	ldr	r2, [r3, #4]
 801361e:	604a      	str	r2, [r1, #4]
 8013620:	2301      	movs	r3, #1
 8013622:	4093      	lsls	r3, r2
 8013624:	608b      	str	r3, [r1, #8]
 8013626:	4620      	mov	r0, r4
 8013628:	f000 ffbe 	bl	80145a8 <_Bfree>
 801362c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801362e:	2200      	movs	r2, #0
 8013630:	601a      	str	r2, [r3, #0]
 8013632:	1e3b      	subs	r3, r7, #0
 8013634:	bfbb      	ittet	lt
 8013636:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 801363a:	9301      	strlt	r3, [sp, #4]
 801363c:	2300      	movge	r3, #0
 801363e:	2201      	movlt	r2, #1
 8013640:	bfac      	ite	ge
 8013642:	f8c8 3000 	strge.w	r3, [r8]
 8013646:	f8c8 2000 	strlt.w	r2, [r8]
 801364a:	4baf      	ldr	r3, [pc, #700]	; (8013908 <_dtoa_r+0x320>)
 801364c:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8013650:	ea33 0308 	bics.w	r3, r3, r8
 8013654:	d114      	bne.n	8013680 <_dtoa_r+0x98>
 8013656:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8013658:	f242 730f 	movw	r3, #9999	; 0x270f
 801365c:	6013      	str	r3, [r2, #0]
 801365e:	9b00      	ldr	r3, [sp, #0]
 8013660:	b923      	cbnz	r3, 801366c <_dtoa_r+0x84>
 8013662:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8013666:	2800      	cmp	r0, #0
 8013668:	f000 8542 	beq.w	80140f0 <_dtoa_r+0xb08>
 801366c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801366e:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 801391c <_dtoa_r+0x334>
 8013672:	2b00      	cmp	r3, #0
 8013674:	f000 8544 	beq.w	8014100 <_dtoa_r+0xb18>
 8013678:	f10b 0303 	add.w	r3, fp, #3
 801367c:	f000 bd3e 	b.w	80140fc <_dtoa_r+0xb14>
 8013680:	e9dd 6700 	ldrd	r6, r7, [sp]
 8013684:	2200      	movs	r2, #0
 8013686:	2300      	movs	r3, #0
 8013688:	4630      	mov	r0, r6
 801368a:	4639      	mov	r1, r7
 801368c:	f7ed f9f4 	bl	8000a78 <__aeabi_dcmpeq>
 8013690:	4681      	mov	r9, r0
 8013692:	b168      	cbz	r0, 80136b0 <_dtoa_r+0xc8>
 8013694:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8013696:	2301      	movs	r3, #1
 8013698:	6013      	str	r3, [r2, #0]
 801369a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801369c:	2b00      	cmp	r3, #0
 801369e:	f000 8524 	beq.w	80140ea <_dtoa_r+0xb02>
 80136a2:	4b9a      	ldr	r3, [pc, #616]	; (801390c <_dtoa_r+0x324>)
 80136a4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80136a6:	f103 3bff 	add.w	fp, r3, #4294967295
 80136aa:	6013      	str	r3, [r2, #0]
 80136ac:	f000 bd28 	b.w	8014100 <_dtoa_r+0xb18>
 80136b0:	aa14      	add	r2, sp, #80	; 0x50
 80136b2:	a915      	add	r1, sp, #84	; 0x54
 80136b4:	ec47 6b10 	vmov	d0, r6, r7
 80136b8:	4620      	mov	r0, r4
 80136ba:	f001 f9ce 	bl	8014a5a <__d2b>
 80136be:	f3c8 550a 	ubfx	r5, r8, #20, #11
 80136c2:	9004      	str	r0, [sp, #16]
 80136c4:	2d00      	cmp	r5, #0
 80136c6:	d07c      	beq.n	80137c2 <_dtoa_r+0x1da>
 80136c8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80136cc:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 80136d0:	46b2      	mov	sl, r6
 80136d2:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 80136d6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80136da:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 80136de:	2200      	movs	r2, #0
 80136e0:	4b8b      	ldr	r3, [pc, #556]	; (8013910 <_dtoa_r+0x328>)
 80136e2:	4650      	mov	r0, sl
 80136e4:	4659      	mov	r1, fp
 80136e6:	f7ec fda7 	bl	8000238 <__aeabi_dsub>
 80136ea:	a381      	add	r3, pc, #516	; (adr r3, 80138f0 <_dtoa_r+0x308>)
 80136ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80136f0:	f7ec ff5a 	bl	80005a8 <__aeabi_dmul>
 80136f4:	a380      	add	r3, pc, #512	; (adr r3, 80138f8 <_dtoa_r+0x310>)
 80136f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80136fa:	f7ec fd9f 	bl	800023c <__adddf3>
 80136fe:	4606      	mov	r6, r0
 8013700:	4628      	mov	r0, r5
 8013702:	460f      	mov	r7, r1
 8013704:	f7ec fee6 	bl	80004d4 <__aeabi_i2d>
 8013708:	a37d      	add	r3, pc, #500	; (adr r3, 8013900 <_dtoa_r+0x318>)
 801370a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801370e:	f7ec ff4b 	bl	80005a8 <__aeabi_dmul>
 8013712:	4602      	mov	r2, r0
 8013714:	460b      	mov	r3, r1
 8013716:	4630      	mov	r0, r6
 8013718:	4639      	mov	r1, r7
 801371a:	f7ec fd8f 	bl	800023c <__adddf3>
 801371e:	4606      	mov	r6, r0
 8013720:	460f      	mov	r7, r1
 8013722:	f7ed f9f1 	bl	8000b08 <__aeabi_d2iz>
 8013726:	2200      	movs	r2, #0
 8013728:	4682      	mov	sl, r0
 801372a:	2300      	movs	r3, #0
 801372c:	4630      	mov	r0, r6
 801372e:	4639      	mov	r1, r7
 8013730:	f7ed f9ac 	bl	8000a8c <__aeabi_dcmplt>
 8013734:	b148      	cbz	r0, 801374a <_dtoa_r+0x162>
 8013736:	4650      	mov	r0, sl
 8013738:	f7ec fecc 	bl	80004d4 <__aeabi_i2d>
 801373c:	4632      	mov	r2, r6
 801373e:	463b      	mov	r3, r7
 8013740:	f7ed f99a 	bl	8000a78 <__aeabi_dcmpeq>
 8013744:	b908      	cbnz	r0, 801374a <_dtoa_r+0x162>
 8013746:	f10a 3aff 	add.w	sl, sl, #4294967295
 801374a:	f1ba 0f16 	cmp.w	sl, #22
 801374e:	d859      	bhi.n	8013804 <_dtoa_r+0x21c>
 8013750:	4970      	ldr	r1, [pc, #448]	; (8013914 <_dtoa_r+0x32c>)
 8013752:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8013756:	e9dd 2300 	ldrd	r2, r3, [sp]
 801375a:	e9d1 0100 	ldrd	r0, r1, [r1]
 801375e:	f7ed f9b3 	bl	8000ac8 <__aeabi_dcmpgt>
 8013762:	2800      	cmp	r0, #0
 8013764:	d050      	beq.n	8013808 <_dtoa_r+0x220>
 8013766:	f10a 3aff 	add.w	sl, sl, #4294967295
 801376a:	2300      	movs	r3, #0
 801376c:	930f      	str	r3, [sp, #60]	; 0x3c
 801376e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8013770:	1b5d      	subs	r5, r3, r5
 8013772:	f1b5 0801 	subs.w	r8, r5, #1
 8013776:	bf49      	itett	mi
 8013778:	f1c5 0301 	rsbmi	r3, r5, #1
 801377c:	2300      	movpl	r3, #0
 801377e:	9305      	strmi	r3, [sp, #20]
 8013780:	f04f 0800 	movmi.w	r8, #0
 8013784:	bf58      	it	pl
 8013786:	9305      	strpl	r3, [sp, #20]
 8013788:	f1ba 0f00 	cmp.w	sl, #0
 801378c:	db3e      	blt.n	801380c <_dtoa_r+0x224>
 801378e:	2300      	movs	r3, #0
 8013790:	44d0      	add	r8, sl
 8013792:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8013796:	9307      	str	r3, [sp, #28]
 8013798:	9b06      	ldr	r3, [sp, #24]
 801379a:	2b09      	cmp	r3, #9
 801379c:	f200 8090 	bhi.w	80138c0 <_dtoa_r+0x2d8>
 80137a0:	2b05      	cmp	r3, #5
 80137a2:	bfc4      	itt	gt
 80137a4:	3b04      	subgt	r3, #4
 80137a6:	9306      	strgt	r3, [sp, #24]
 80137a8:	9b06      	ldr	r3, [sp, #24]
 80137aa:	f1a3 0302 	sub.w	r3, r3, #2
 80137ae:	bfcc      	ite	gt
 80137b0:	2500      	movgt	r5, #0
 80137b2:	2501      	movle	r5, #1
 80137b4:	2b03      	cmp	r3, #3
 80137b6:	f200 808f 	bhi.w	80138d8 <_dtoa_r+0x2f0>
 80137ba:	e8df f003 	tbb	[pc, r3]
 80137be:	7f7d      	.short	0x7f7d
 80137c0:	7131      	.short	0x7131
 80137c2:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 80137c6:	441d      	add	r5, r3
 80137c8:	f205 4032 	addw	r0, r5, #1074	; 0x432
 80137cc:	2820      	cmp	r0, #32
 80137ce:	dd13      	ble.n	80137f8 <_dtoa_r+0x210>
 80137d0:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 80137d4:	9b00      	ldr	r3, [sp, #0]
 80137d6:	fa08 f800 	lsl.w	r8, r8, r0
 80137da:	f205 4012 	addw	r0, r5, #1042	; 0x412
 80137de:	fa23 f000 	lsr.w	r0, r3, r0
 80137e2:	ea48 0000 	orr.w	r0, r8, r0
 80137e6:	f7ec fe65 	bl	80004b4 <__aeabi_ui2d>
 80137ea:	2301      	movs	r3, #1
 80137ec:	4682      	mov	sl, r0
 80137ee:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 80137f2:	3d01      	subs	r5, #1
 80137f4:	9313      	str	r3, [sp, #76]	; 0x4c
 80137f6:	e772      	b.n	80136de <_dtoa_r+0xf6>
 80137f8:	9b00      	ldr	r3, [sp, #0]
 80137fa:	f1c0 0020 	rsb	r0, r0, #32
 80137fe:	fa03 f000 	lsl.w	r0, r3, r0
 8013802:	e7f0      	b.n	80137e6 <_dtoa_r+0x1fe>
 8013804:	2301      	movs	r3, #1
 8013806:	e7b1      	b.n	801376c <_dtoa_r+0x184>
 8013808:	900f      	str	r0, [sp, #60]	; 0x3c
 801380a:	e7b0      	b.n	801376e <_dtoa_r+0x186>
 801380c:	9b05      	ldr	r3, [sp, #20]
 801380e:	eba3 030a 	sub.w	r3, r3, sl
 8013812:	9305      	str	r3, [sp, #20]
 8013814:	f1ca 0300 	rsb	r3, sl, #0
 8013818:	9307      	str	r3, [sp, #28]
 801381a:	2300      	movs	r3, #0
 801381c:	930e      	str	r3, [sp, #56]	; 0x38
 801381e:	e7bb      	b.n	8013798 <_dtoa_r+0x1b0>
 8013820:	2301      	movs	r3, #1
 8013822:	930a      	str	r3, [sp, #40]	; 0x28
 8013824:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013826:	2b00      	cmp	r3, #0
 8013828:	dd59      	ble.n	80138de <_dtoa_r+0x2f6>
 801382a:	9302      	str	r3, [sp, #8]
 801382c:	4699      	mov	r9, r3
 801382e:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8013830:	2200      	movs	r2, #0
 8013832:	6072      	str	r2, [r6, #4]
 8013834:	2204      	movs	r2, #4
 8013836:	f102 0014 	add.w	r0, r2, #20
 801383a:	4298      	cmp	r0, r3
 801383c:	6871      	ldr	r1, [r6, #4]
 801383e:	d953      	bls.n	80138e8 <_dtoa_r+0x300>
 8013840:	4620      	mov	r0, r4
 8013842:	f000 fe7d 	bl	8014540 <_Balloc>
 8013846:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8013848:	6030      	str	r0, [r6, #0]
 801384a:	f1b9 0f0e 	cmp.w	r9, #14
 801384e:	f8d3 b000 	ldr.w	fp, [r3]
 8013852:	f200 80e6 	bhi.w	8013a22 <_dtoa_r+0x43a>
 8013856:	2d00      	cmp	r5, #0
 8013858:	f000 80e3 	beq.w	8013a22 <_dtoa_r+0x43a>
 801385c:	ed9d 7b00 	vldr	d7, [sp]
 8013860:	f1ba 0f00 	cmp.w	sl, #0
 8013864:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8013868:	dd74      	ble.n	8013954 <_dtoa_r+0x36c>
 801386a:	4a2a      	ldr	r2, [pc, #168]	; (8013914 <_dtoa_r+0x32c>)
 801386c:	f00a 030f 	and.w	r3, sl, #15
 8013870:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8013874:	ed93 7b00 	vldr	d7, [r3]
 8013878:	ea4f 162a 	mov.w	r6, sl, asr #4
 801387c:	06f0      	lsls	r0, r6, #27
 801387e:	ed8d 7b08 	vstr	d7, [sp, #32]
 8013882:	d565      	bpl.n	8013950 <_dtoa_r+0x368>
 8013884:	4b24      	ldr	r3, [pc, #144]	; (8013918 <_dtoa_r+0x330>)
 8013886:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 801388a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 801388e:	f7ec ffb5 	bl	80007fc <__aeabi_ddiv>
 8013892:	e9cd 0100 	strd	r0, r1, [sp]
 8013896:	f006 060f 	and.w	r6, r6, #15
 801389a:	2503      	movs	r5, #3
 801389c:	4f1e      	ldr	r7, [pc, #120]	; (8013918 <_dtoa_r+0x330>)
 801389e:	e04c      	b.n	801393a <_dtoa_r+0x352>
 80138a0:	2301      	movs	r3, #1
 80138a2:	930a      	str	r3, [sp, #40]	; 0x28
 80138a4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80138a6:	4453      	add	r3, sl
 80138a8:	f103 0901 	add.w	r9, r3, #1
 80138ac:	9302      	str	r3, [sp, #8]
 80138ae:	464b      	mov	r3, r9
 80138b0:	2b01      	cmp	r3, #1
 80138b2:	bfb8      	it	lt
 80138b4:	2301      	movlt	r3, #1
 80138b6:	e7ba      	b.n	801382e <_dtoa_r+0x246>
 80138b8:	2300      	movs	r3, #0
 80138ba:	e7b2      	b.n	8013822 <_dtoa_r+0x23a>
 80138bc:	2300      	movs	r3, #0
 80138be:	e7f0      	b.n	80138a2 <_dtoa_r+0x2ba>
 80138c0:	2501      	movs	r5, #1
 80138c2:	2300      	movs	r3, #0
 80138c4:	9306      	str	r3, [sp, #24]
 80138c6:	950a      	str	r5, [sp, #40]	; 0x28
 80138c8:	f04f 33ff 	mov.w	r3, #4294967295
 80138cc:	9302      	str	r3, [sp, #8]
 80138ce:	4699      	mov	r9, r3
 80138d0:	2200      	movs	r2, #0
 80138d2:	2312      	movs	r3, #18
 80138d4:	920b      	str	r2, [sp, #44]	; 0x2c
 80138d6:	e7aa      	b.n	801382e <_dtoa_r+0x246>
 80138d8:	2301      	movs	r3, #1
 80138da:	930a      	str	r3, [sp, #40]	; 0x28
 80138dc:	e7f4      	b.n	80138c8 <_dtoa_r+0x2e0>
 80138de:	2301      	movs	r3, #1
 80138e0:	9302      	str	r3, [sp, #8]
 80138e2:	4699      	mov	r9, r3
 80138e4:	461a      	mov	r2, r3
 80138e6:	e7f5      	b.n	80138d4 <_dtoa_r+0x2ec>
 80138e8:	3101      	adds	r1, #1
 80138ea:	6071      	str	r1, [r6, #4]
 80138ec:	0052      	lsls	r2, r2, #1
 80138ee:	e7a2      	b.n	8013836 <_dtoa_r+0x24e>
 80138f0:	636f4361 	.word	0x636f4361
 80138f4:	3fd287a7 	.word	0x3fd287a7
 80138f8:	8b60c8b3 	.word	0x8b60c8b3
 80138fc:	3fc68a28 	.word	0x3fc68a28
 8013900:	509f79fb 	.word	0x509f79fb
 8013904:	3fd34413 	.word	0x3fd34413
 8013908:	7ff00000 	.word	0x7ff00000
 801390c:	080180b1 	.word	0x080180b1
 8013910:	3ff80000 	.word	0x3ff80000
 8013914:	08018170 	.word	0x08018170
 8013918:	08018148 	.word	0x08018148
 801391c:	080180dd 	.word	0x080180dd
 8013920:	07f1      	lsls	r1, r6, #31
 8013922:	d508      	bpl.n	8013936 <_dtoa_r+0x34e>
 8013924:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8013928:	e9d7 2300 	ldrd	r2, r3, [r7]
 801392c:	f7ec fe3c 	bl	80005a8 <__aeabi_dmul>
 8013930:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8013934:	3501      	adds	r5, #1
 8013936:	1076      	asrs	r6, r6, #1
 8013938:	3708      	adds	r7, #8
 801393a:	2e00      	cmp	r6, #0
 801393c:	d1f0      	bne.n	8013920 <_dtoa_r+0x338>
 801393e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8013942:	e9dd 0100 	ldrd	r0, r1, [sp]
 8013946:	f7ec ff59 	bl	80007fc <__aeabi_ddiv>
 801394a:	e9cd 0100 	strd	r0, r1, [sp]
 801394e:	e01a      	b.n	8013986 <_dtoa_r+0x39e>
 8013950:	2502      	movs	r5, #2
 8013952:	e7a3      	b.n	801389c <_dtoa_r+0x2b4>
 8013954:	f000 80a0 	beq.w	8013a98 <_dtoa_r+0x4b0>
 8013958:	f1ca 0600 	rsb	r6, sl, #0
 801395c:	4b9f      	ldr	r3, [pc, #636]	; (8013bdc <_dtoa_r+0x5f4>)
 801395e:	4fa0      	ldr	r7, [pc, #640]	; (8013be0 <_dtoa_r+0x5f8>)
 8013960:	f006 020f 	and.w	r2, r6, #15
 8013964:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8013968:	e9d3 2300 	ldrd	r2, r3, [r3]
 801396c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8013970:	f7ec fe1a 	bl	80005a8 <__aeabi_dmul>
 8013974:	e9cd 0100 	strd	r0, r1, [sp]
 8013978:	1136      	asrs	r6, r6, #4
 801397a:	2300      	movs	r3, #0
 801397c:	2502      	movs	r5, #2
 801397e:	2e00      	cmp	r6, #0
 8013980:	d17f      	bne.n	8013a82 <_dtoa_r+0x49a>
 8013982:	2b00      	cmp	r3, #0
 8013984:	d1e1      	bne.n	801394a <_dtoa_r+0x362>
 8013986:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8013988:	2b00      	cmp	r3, #0
 801398a:	f000 8087 	beq.w	8013a9c <_dtoa_r+0x4b4>
 801398e:	e9dd 6700 	ldrd	r6, r7, [sp]
 8013992:	2200      	movs	r2, #0
 8013994:	4b93      	ldr	r3, [pc, #588]	; (8013be4 <_dtoa_r+0x5fc>)
 8013996:	4630      	mov	r0, r6
 8013998:	4639      	mov	r1, r7
 801399a:	f7ed f877 	bl	8000a8c <__aeabi_dcmplt>
 801399e:	2800      	cmp	r0, #0
 80139a0:	d07c      	beq.n	8013a9c <_dtoa_r+0x4b4>
 80139a2:	f1b9 0f00 	cmp.w	r9, #0
 80139a6:	d079      	beq.n	8013a9c <_dtoa_r+0x4b4>
 80139a8:	9b02      	ldr	r3, [sp, #8]
 80139aa:	2b00      	cmp	r3, #0
 80139ac:	dd35      	ble.n	8013a1a <_dtoa_r+0x432>
 80139ae:	f10a 33ff 	add.w	r3, sl, #4294967295
 80139b2:	9308      	str	r3, [sp, #32]
 80139b4:	4639      	mov	r1, r7
 80139b6:	2200      	movs	r2, #0
 80139b8:	4b8b      	ldr	r3, [pc, #556]	; (8013be8 <_dtoa_r+0x600>)
 80139ba:	4630      	mov	r0, r6
 80139bc:	f7ec fdf4 	bl	80005a8 <__aeabi_dmul>
 80139c0:	e9cd 0100 	strd	r0, r1, [sp]
 80139c4:	9f02      	ldr	r7, [sp, #8]
 80139c6:	3501      	adds	r5, #1
 80139c8:	4628      	mov	r0, r5
 80139ca:	f7ec fd83 	bl	80004d4 <__aeabi_i2d>
 80139ce:	e9dd 2300 	ldrd	r2, r3, [sp]
 80139d2:	f7ec fde9 	bl	80005a8 <__aeabi_dmul>
 80139d6:	2200      	movs	r2, #0
 80139d8:	4b84      	ldr	r3, [pc, #528]	; (8013bec <_dtoa_r+0x604>)
 80139da:	f7ec fc2f 	bl	800023c <__adddf3>
 80139de:	4605      	mov	r5, r0
 80139e0:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 80139e4:	2f00      	cmp	r7, #0
 80139e6:	d15d      	bne.n	8013aa4 <_dtoa_r+0x4bc>
 80139e8:	2200      	movs	r2, #0
 80139ea:	4b81      	ldr	r3, [pc, #516]	; (8013bf0 <_dtoa_r+0x608>)
 80139ec:	e9dd 0100 	ldrd	r0, r1, [sp]
 80139f0:	f7ec fc22 	bl	8000238 <__aeabi_dsub>
 80139f4:	462a      	mov	r2, r5
 80139f6:	4633      	mov	r3, r6
 80139f8:	e9cd 0100 	strd	r0, r1, [sp]
 80139fc:	f7ed f864 	bl	8000ac8 <__aeabi_dcmpgt>
 8013a00:	2800      	cmp	r0, #0
 8013a02:	f040 8288 	bne.w	8013f16 <_dtoa_r+0x92e>
 8013a06:	462a      	mov	r2, r5
 8013a08:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8013a0c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8013a10:	f7ed f83c 	bl	8000a8c <__aeabi_dcmplt>
 8013a14:	2800      	cmp	r0, #0
 8013a16:	f040 827c 	bne.w	8013f12 <_dtoa_r+0x92a>
 8013a1a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8013a1e:	e9cd 2300 	strd	r2, r3, [sp]
 8013a22:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8013a24:	2b00      	cmp	r3, #0
 8013a26:	f2c0 8150 	blt.w	8013cca <_dtoa_r+0x6e2>
 8013a2a:	f1ba 0f0e 	cmp.w	sl, #14
 8013a2e:	f300 814c 	bgt.w	8013cca <_dtoa_r+0x6e2>
 8013a32:	4b6a      	ldr	r3, [pc, #424]	; (8013bdc <_dtoa_r+0x5f4>)
 8013a34:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8013a38:	ed93 7b00 	vldr	d7, [r3]
 8013a3c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013a3e:	2b00      	cmp	r3, #0
 8013a40:	ed8d 7b02 	vstr	d7, [sp, #8]
 8013a44:	f280 80d8 	bge.w	8013bf8 <_dtoa_r+0x610>
 8013a48:	f1b9 0f00 	cmp.w	r9, #0
 8013a4c:	f300 80d4 	bgt.w	8013bf8 <_dtoa_r+0x610>
 8013a50:	f040 825e 	bne.w	8013f10 <_dtoa_r+0x928>
 8013a54:	2200      	movs	r2, #0
 8013a56:	4b66      	ldr	r3, [pc, #408]	; (8013bf0 <_dtoa_r+0x608>)
 8013a58:	ec51 0b17 	vmov	r0, r1, d7
 8013a5c:	f7ec fda4 	bl	80005a8 <__aeabi_dmul>
 8013a60:	e9dd 2300 	ldrd	r2, r3, [sp]
 8013a64:	f7ed f826 	bl	8000ab4 <__aeabi_dcmpge>
 8013a68:	464f      	mov	r7, r9
 8013a6a:	464e      	mov	r6, r9
 8013a6c:	2800      	cmp	r0, #0
 8013a6e:	f040 8234 	bne.w	8013eda <_dtoa_r+0x8f2>
 8013a72:	2331      	movs	r3, #49	; 0x31
 8013a74:	f10b 0501 	add.w	r5, fp, #1
 8013a78:	f88b 3000 	strb.w	r3, [fp]
 8013a7c:	f10a 0a01 	add.w	sl, sl, #1
 8013a80:	e22f      	b.n	8013ee2 <_dtoa_r+0x8fa>
 8013a82:	07f2      	lsls	r2, r6, #31
 8013a84:	d505      	bpl.n	8013a92 <_dtoa_r+0x4aa>
 8013a86:	e9d7 2300 	ldrd	r2, r3, [r7]
 8013a8a:	f7ec fd8d 	bl	80005a8 <__aeabi_dmul>
 8013a8e:	3501      	adds	r5, #1
 8013a90:	2301      	movs	r3, #1
 8013a92:	1076      	asrs	r6, r6, #1
 8013a94:	3708      	adds	r7, #8
 8013a96:	e772      	b.n	801397e <_dtoa_r+0x396>
 8013a98:	2502      	movs	r5, #2
 8013a9a:	e774      	b.n	8013986 <_dtoa_r+0x39e>
 8013a9c:	f8cd a020 	str.w	sl, [sp, #32]
 8013aa0:	464f      	mov	r7, r9
 8013aa2:	e791      	b.n	80139c8 <_dtoa_r+0x3e0>
 8013aa4:	4b4d      	ldr	r3, [pc, #308]	; (8013bdc <_dtoa_r+0x5f4>)
 8013aa6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8013aaa:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8013aae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013ab0:	2b00      	cmp	r3, #0
 8013ab2:	d047      	beq.n	8013b44 <_dtoa_r+0x55c>
 8013ab4:	4602      	mov	r2, r0
 8013ab6:	460b      	mov	r3, r1
 8013ab8:	2000      	movs	r0, #0
 8013aba:	494e      	ldr	r1, [pc, #312]	; (8013bf4 <_dtoa_r+0x60c>)
 8013abc:	f7ec fe9e 	bl	80007fc <__aeabi_ddiv>
 8013ac0:	462a      	mov	r2, r5
 8013ac2:	4633      	mov	r3, r6
 8013ac4:	f7ec fbb8 	bl	8000238 <__aeabi_dsub>
 8013ac8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8013acc:	465d      	mov	r5, fp
 8013ace:	e9dd 0100 	ldrd	r0, r1, [sp]
 8013ad2:	f7ed f819 	bl	8000b08 <__aeabi_d2iz>
 8013ad6:	4606      	mov	r6, r0
 8013ad8:	f7ec fcfc 	bl	80004d4 <__aeabi_i2d>
 8013adc:	4602      	mov	r2, r0
 8013ade:	460b      	mov	r3, r1
 8013ae0:	e9dd 0100 	ldrd	r0, r1, [sp]
 8013ae4:	f7ec fba8 	bl	8000238 <__aeabi_dsub>
 8013ae8:	3630      	adds	r6, #48	; 0x30
 8013aea:	f805 6b01 	strb.w	r6, [r5], #1
 8013aee:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8013af2:	e9cd 0100 	strd	r0, r1, [sp]
 8013af6:	f7ec ffc9 	bl	8000a8c <__aeabi_dcmplt>
 8013afa:	2800      	cmp	r0, #0
 8013afc:	d163      	bne.n	8013bc6 <_dtoa_r+0x5de>
 8013afe:	e9dd 2300 	ldrd	r2, r3, [sp]
 8013b02:	2000      	movs	r0, #0
 8013b04:	4937      	ldr	r1, [pc, #220]	; (8013be4 <_dtoa_r+0x5fc>)
 8013b06:	f7ec fb97 	bl	8000238 <__aeabi_dsub>
 8013b0a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8013b0e:	f7ec ffbd 	bl	8000a8c <__aeabi_dcmplt>
 8013b12:	2800      	cmp	r0, #0
 8013b14:	f040 80b7 	bne.w	8013c86 <_dtoa_r+0x69e>
 8013b18:	eba5 030b 	sub.w	r3, r5, fp
 8013b1c:	429f      	cmp	r7, r3
 8013b1e:	f77f af7c 	ble.w	8013a1a <_dtoa_r+0x432>
 8013b22:	2200      	movs	r2, #0
 8013b24:	4b30      	ldr	r3, [pc, #192]	; (8013be8 <_dtoa_r+0x600>)
 8013b26:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8013b2a:	f7ec fd3d 	bl	80005a8 <__aeabi_dmul>
 8013b2e:	2200      	movs	r2, #0
 8013b30:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8013b34:	4b2c      	ldr	r3, [pc, #176]	; (8013be8 <_dtoa_r+0x600>)
 8013b36:	e9dd 0100 	ldrd	r0, r1, [sp]
 8013b3a:	f7ec fd35 	bl	80005a8 <__aeabi_dmul>
 8013b3e:	e9cd 0100 	strd	r0, r1, [sp]
 8013b42:	e7c4      	b.n	8013ace <_dtoa_r+0x4e6>
 8013b44:	462a      	mov	r2, r5
 8013b46:	4633      	mov	r3, r6
 8013b48:	f7ec fd2e 	bl	80005a8 <__aeabi_dmul>
 8013b4c:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8013b50:	eb0b 0507 	add.w	r5, fp, r7
 8013b54:	465e      	mov	r6, fp
 8013b56:	e9dd 0100 	ldrd	r0, r1, [sp]
 8013b5a:	f7ec ffd5 	bl	8000b08 <__aeabi_d2iz>
 8013b5e:	4607      	mov	r7, r0
 8013b60:	f7ec fcb8 	bl	80004d4 <__aeabi_i2d>
 8013b64:	3730      	adds	r7, #48	; 0x30
 8013b66:	4602      	mov	r2, r0
 8013b68:	460b      	mov	r3, r1
 8013b6a:	e9dd 0100 	ldrd	r0, r1, [sp]
 8013b6e:	f7ec fb63 	bl	8000238 <__aeabi_dsub>
 8013b72:	f806 7b01 	strb.w	r7, [r6], #1
 8013b76:	42ae      	cmp	r6, r5
 8013b78:	e9cd 0100 	strd	r0, r1, [sp]
 8013b7c:	f04f 0200 	mov.w	r2, #0
 8013b80:	d126      	bne.n	8013bd0 <_dtoa_r+0x5e8>
 8013b82:	4b1c      	ldr	r3, [pc, #112]	; (8013bf4 <_dtoa_r+0x60c>)
 8013b84:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8013b88:	f7ec fb58 	bl	800023c <__adddf3>
 8013b8c:	4602      	mov	r2, r0
 8013b8e:	460b      	mov	r3, r1
 8013b90:	e9dd 0100 	ldrd	r0, r1, [sp]
 8013b94:	f7ec ff98 	bl	8000ac8 <__aeabi_dcmpgt>
 8013b98:	2800      	cmp	r0, #0
 8013b9a:	d174      	bne.n	8013c86 <_dtoa_r+0x69e>
 8013b9c:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8013ba0:	2000      	movs	r0, #0
 8013ba2:	4914      	ldr	r1, [pc, #80]	; (8013bf4 <_dtoa_r+0x60c>)
 8013ba4:	f7ec fb48 	bl	8000238 <__aeabi_dsub>
 8013ba8:	4602      	mov	r2, r0
 8013baa:	460b      	mov	r3, r1
 8013bac:	e9dd 0100 	ldrd	r0, r1, [sp]
 8013bb0:	f7ec ff6c 	bl	8000a8c <__aeabi_dcmplt>
 8013bb4:	2800      	cmp	r0, #0
 8013bb6:	f43f af30 	beq.w	8013a1a <_dtoa_r+0x432>
 8013bba:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8013bbe:	2b30      	cmp	r3, #48	; 0x30
 8013bc0:	f105 32ff 	add.w	r2, r5, #4294967295
 8013bc4:	d002      	beq.n	8013bcc <_dtoa_r+0x5e4>
 8013bc6:	f8dd a020 	ldr.w	sl, [sp, #32]
 8013bca:	e04a      	b.n	8013c62 <_dtoa_r+0x67a>
 8013bcc:	4615      	mov	r5, r2
 8013bce:	e7f4      	b.n	8013bba <_dtoa_r+0x5d2>
 8013bd0:	4b05      	ldr	r3, [pc, #20]	; (8013be8 <_dtoa_r+0x600>)
 8013bd2:	f7ec fce9 	bl	80005a8 <__aeabi_dmul>
 8013bd6:	e9cd 0100 	strd	r0, r1, [sp]
 8013bda:	e7bc      	b.n	8013b56 <_dtoa_r+0x56e>
 8013bdc:	08018170 	.word	0x08018170
 8013be0:	08018148 	.word	0x08018148
 8013be4:	3ff00000 	.word	0x3ff00000
 8013be8:	40240000 	.word	0x40240000
 8013bec:	401c0000 	.word	0x401c0000
 8013bf0:	40140000 	.word	0x40140000
 8013bf4:	3fe00000 	.word	0x3fe00000
 8013bf8:	e9dd 6700 	ldrd	r6, r7, [sp]
 8013bfc:	465d      	mov	r5, fp
 8013bfe:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8013c02:	4630      	mov	r0, r6
 8013c04:	4639      	mov	r1, r7
 8013c06:	f7ec fdf9 	bl	80007fc <__aeabi_ddiv>
 8013c0a:	f7ec ff7d 	bl	8000b08 <__aeabi_d2iz>
 8013c0e:	4680      	mov	r8, r0
 8013c10:	f7ec fc60 	bl	80004d4 <__aeabi_i2d>
 8013c14:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8013c18:	f7ec fcc6 	bl	80005a8 <__aeabi_dmul>
 8013c1c:	4602      	mov	r2, r0
 8013c1e:	460b      	mov	r3, r1
 8013c20:	4630      	mov	r0, r6
 8013c22:	4639      	mov	r1, r7
 8013c24:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8013c28:	f7ec fb06 	bl	8000238 <__aeabi_dsub>
 8013c2c:	f805 6b01 	strb.w	r6, [r5], #1
 8013c30:	eba5 060b 	sub.w	r6, r5, fp
 8013c34:	45b1      	cmp	r9, r6
 8013c36:	4602      	mov	r2, r0
 8013c38:	460b      	mov	r3, r1
 8013c3a:	d139      	bne.n	8013cb0 <_dtoa_r+0x6c8>
 8013c3c:	f7ec fafe 	bl	800023c <__adddf3>
 8013c40:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8013c44:	4606      	mov	r6, r0
 8013c46:	460f      	mov	r7, r1
 8013c48:	f7ec ff3e 	bl	8000ac8 <__aeabi_dcmpgt>
 8013c4c:	b9c8      	cbnz	r0, 8013c82 <_dtoa_r+0x69a>
 8013c4e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8013c52:	4630      	mov	r0, r6
 8013c54:	4639      	mov	r1, r7
 8013c56:	f7ec ff0f 	bl	8000a78 <__aeabi_dcmpeq>
 8013c5a:	b110      	cbz	r0, 8013c62 <_dtoa_r+0x67a>
 8013c5c:	f018 0f01 	tst.w	r8, #1
 8013c60:	d10f      	bne.n	8013c82 <_dtoa_r+0x69a>
 8013c62:	9904      	ldr	r1, [sp, #16]
 8013c64:	4620      	mov	r0, r4
 8013c66:	f000 fc9f 	bl	80145a8 <_Bfree>
 8013c6a:	2300      	movs	r3, #0
 8013c6c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8013c6e:	702b      	strb	r3, [r5, #0]
 8013c70:	f10a 0301 	add.w	r3, sl, #1
 8013c74:	6013      	str	r3, [r2, #0]
 8013c76:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8013c78:	2b00      	cmp	r3, #0
 8013c7a:	f000 8241 	beq.w	8014100 <_dtoa_r+0xb18>
 8013c7e:	601d      	str	r5, [r3, #0]
 8013c80:	e23e      	b.n	8014100 <_dtoa_r+0xb18>
 8013c82:	f8cd a020 	str.w	sl, [sp, #32]
 8013c86:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8013c8a:	2a39      	cmp	r2, #57	; 0x39
 8013c8c:	f105 33ff 	add.w	r3, r5, #4294967295
 8013c90:	d108      	bne.n	8013ca4 <_dtoa_r+0x6bc>
 8013c92:	459b      	cmp	fp, r3
 8013c94:	d10a      	bne.n	8013cac <_dtoa_r+0x6c4>
 8013c96:	9b08      	ldr	r3, [sp, #32]
 8013c98:	3301      	adds	r3, #1
 8013c9a:	9308      	str	r3, [sp, #32]
 8013c9c:	2330      	movs	r3, #48	; 0x30
 8013c9e:	f88b 3000 	strb.w	r3, [fp]
 8013ca2:	465b      	mov	r3, fp
 8013ca4:	781a      	ldrb	r2, [r3, #0]
 8013ca6:	3201      	adds	r2, #1
 8013ca8:	701a      	strb	r2, [r3, #0]
 8013caa:	e78c      	b.n	8013bc6 <_dtoa_r+0x5de>
 8013cac:	461d      	mov	r5, r3
 8013cae:	e7ea      	b.n	8013c86 <_dtoa_r+0x69e>
 8013cb0:	2200      	movs	r2, #0
 8013cb2:	4b9b      	ldr	r3, [pc, #620]	; (8013f20 <_dtoa_r+0x938>)
 8013cb4:	f7ec fc78 	bl	80005a8 <__aeabi_dmul>
 8013cb8:	2200      	movs	r2, #0
 8013cba:	2300      	movs	r3, #0
 8013cbc:	4606      	mov	r6, r0
 8013cbe:	460f      	mov	r7, r1
 8013cc0:	f7ec feda 	bl	8000a78 <__aeabi_dcmpeq>
 8013cc4:	2800      	cmp	r0, #0
 8013cc6:	d09a      	beq.n	8013bfe <_dtoa_r+0x616>
 8013cc8:	e7cb      	b.n	8013c62 <_dtoa_r+0x67a>
 8013cca:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8013ccc:	2a00      	cmp	r2, #0
 8013cce:	f000 808b 	beq.w	8013de8 <_dtoa_r+0x800>
 8013cd2:	9a06      	ldr	r2, [sp, #24]
 8013cd4:	2a01      	cmp	r2, #1
 8013cd6:	dc6e      	bgt.n	8013db6 <_dtoa_r+0x7ce>
 8013cd8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8013cda:	2a00      	cmp	r2, #0
 8013cdc:	d067      	beq.n	8013dae <_dtoa_r+0x7c6>
 8013cde:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8013ce2:	9f07      	ldr	r7, [sp, #28]
 8013ce4:	9d05      	ldr	r5, [sp, #20]
 8013ce6:	9a05      	ldr	r2, [sp, #20]
 8013ce8:	2101      	movs	r1, #1
 8013cea:	441a      	add	r2, r3
 8013cec:	4620      	mov	r0, r4
 8013cee:	9205      	str	r2, [sp, #20]
 8013cf0:	4498      	add	r8, r3
 8013cf2:	f000 fcf9 	bl	80146e8 <__i2b>
 8013cf6:	4606      	mov	r6, r0
 8013cf8:	2d00      	cmp	r5, #0
 8013cfa:	dd0c      	ble.n	8013d16 <_dtoa_r+0x72e>
 8013cfc:	f1b8 0f00 	cmp.w	r8, #0
 8013d00:	dd09      	ble.n	8013d16 <_dtoa_r+0x72e>
 8013d02:	4545      	cmp	r5, r8
 8013d04:	9a05      	ldr	r2, [sp, #20]
 8013d06:	462b      	mov	r3, r5
 8013d08:	bfa8      	it	ge
 8013d0a:	4643      	movge	r3, r8
 8013d0c:	1ad2      	subs	r2, r2, r3
 8013d0e:	9205      	str	r2, [sp, #20]
 8013d10:	1aed      	subs	r5, r5, r3
 8013d12:	eba8 0803 	sub.w	r8, r8, r3
 8013d16:	9b07      	ldr	r3, [sp, #28]
 8013d18:	b1eb      	cbz	r3, 8013d56 <_dtoa_r+0x76e>
 8013d1a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013d1c:	2b00      	cmp	r3, #0
 8013d1e:	d067      	beq.n	8013df0 <_dtoa_r+0x808>
 8013d20:	b18f      	cbz	r7, 8013d46 <_dtoa_r+0x75e>
 8013d22:	4631      	mov	r1, r6
 8013d24:	463a      	mov	r2, r7
 8013d26:	4620      	mov	r0, r4
 8013d28:	f000 fd7e 	bl	8014828 <__pow5mult>
 8013d2c:	9a04      	ldr	r2, [sp, #16]
 8013d2e:	4601      	mov	r1, r0
 8013d30:	4606      	mov	r6, r0
 8013d32:	4620      	mov	r0, r4
 8013d34:	f000 fce1 	bl	80146fa <__multiply>
 8013d38:	9904      	ldr	r1, [sp, #16]
 8013d3a:	9008      	str	r0, [sp, #32]
 8013d3c:	4620      	mov	r0, r4
 8013d3e:	f000 fc33 	bl	80145a8 <_Bfree>
 8013d42:	9b08      	ldr	r3, [sp, #32]
 8013d44:	9304      	str	r3, [sp, #16]
 8013d46:	9b07      	ldr	r3, [sp, #28]
 8013d48:	1bda      	subs	r2, r3, r7
 8013d4a:	d004      	beq.n	8013d56 <_dtoa_r+0x76e>
 8013d4c:	9904      	ldr	r1, [sp, #16]
 8013d4e:	4620      	mov	r0, r4
 8013d50:	f000 fd6a 	bl	8014828 <__pow5mult>
 8013d54:	9004      	str	r0, [sp, #16]
 8013d56:	2101      	movs	r1, #1
 8013d58:	4620      	mov	r0, r4
 8013d5a:	f000 fcc5 	bl	80146e8 <__i2b>
 8013d5e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8013d60:	4607      	mov	r7, r0
 8013d62:	2b00      	cmp	r3, #0
 8013d64:	f000 81d0 	beq.w	8014108 <_dtoa_r+0xb20>
 8013d68:	461a      	mov	r2, r3
 8013d6a:	4601      	mov	r1, r0
 8013d6c:	4620      	mov	r0, r4
 8013d6e:	f000 fd5b 	bl	8014828 <__pow5mult>
 8013d72:	9b06      	ldr	r3, [sp, #24]
 8013d74:	2b01      	cmp	r3, #1
 8013d76:	4607      	mov	r7, r0
 8013d78:	dc40      	bgt.n	8013dfc <_dtoa_r+0x814>
 8013d7a:	9b00      	ldr	r3, [sp, #0]
 8013d7c:	2b00      	cmp	r3, #0
 8013d7e:	d139      	bne.n	8013df4 <_dtoa_r+0x80c>
 8013d80:	9b01      	ldr	r3, [sp, #4]
 8013d82:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8013d86:	2b00      	cmp	r3, #0
 8013d88:	d136      	bne.n	8013df8 <_dtoa_r+0x810>
 8013d8a:	9b01      	ldr	r3, [sp, #4]
 8013d8c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8013d90:	0d1b      	lsrs	r3, r3, #20
 8013d92:	051b      	lsls	r3, r3, #20
 8013d94:	b12b      	cbz	r3, 8013da2 <_dtoa_r+0x7ba>
 8013d96:	9b05      	ldr	r3, [sp, #20]
 8013d98:	3301      	adds	r3, #1
 8013d9a:	9305      	str	r3, [sp, #20]
 8013d9c:	f108 0801 	add.w	r8, r8, #1
 8013da0:	2301      	movs	r3, #1
 8013da2:	9307      	str	r3, [sp, #28]
 8013da4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8013da6:	2b00      	cmp	r3, #0
 8013da8:	d12a      	bne.n	8013e00 <_dtoa_r+0x818>
 8013daa:	2001      	movs	r0, #1
 8013dac:	e030      	b.n	8013e10 <_dtoa_r+0x828>
 8013dae:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8013db0:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8013db4:	e795      	b.n	8013ce2 <_dtoa_r+0x6fa>
 8013db6:	9b07      	ldr	r3, [sp, #28]
 8013db8:	f109 37ff 	add.w	r7, r9, #4294967295
 8013dbc:	42bb      	cmp	r3, r7
 8013dbe:	bfbf      	itttt	lt
 8013dc0:	9b07      	ldrlt	r3, [sp, #28]
 8013dc2:	9707      	strlt	r7, [sp, #28]
 8013dc4:	1afa      	sublt	r2, r7, r3
 8013dc6:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8013dc8:	bfbb      	ittet	lt
 8013dca:	189b      	addlt	r3, r3, r2
 8013dcc:	930e      	strlt	r3, [sp, #56]	; 0x38
 8013dce:	1bdf      	subge	r7, r3, r7
 8013dd0:	2700      	movlt	r7, #0
 8013dd2:	f1b9 0f00 	cmp.w	r9, #0
 8013dd6:	bfb5      	itete	lt
 8013dd8:	9b05      	ldrlt	r3, [sp, #20]
 8013dda:	9d05      	ldrge	r5, [sp, #20]
 8013ddc:	eba3 0509 	sublt.w	r5, r3, r9
 8013de0:	464b      	movge	r3, r9
 8013de2:	bfb8      	it	lt
 8013de4:	2300      	movlt	r3, #0
 8013de6:	e77e      	b.n	8013ce6 <_dtoa_r+0x6fe>
 8013de8:	9f07      	ldr	r7, [sp, #28]
 8013dea:	9d05      	ldr	r5, [sp, #20]
 8013dec:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8013dee:	e783      	b.n	8013cf8 <_dtoa_r+0x710>
 8013df0:	9a07      	ldr	r2, [sp, #28]
 8013df2:	e7ab      	b.n	8013d4c <_dtoa_r+0x764>
 8013df4:	2300      	movs	r3, #0
 8013df6:	e7d4      	b.n	8013da2 <_dtoa_r+0x7ba>
 8013df8:	9b00      	ldr	r3, [sp, #0]
 8013dfa:	e7d2      	b.n	8013da2 <_dtoa_r+0x7ba>
 8013dfc:	2300      	movs	r3, #0
 8013dfe:	9307      	str	r3, [sp, #28]
 8013e00:	693b      	ldr	r3, [r7, #16]
 8013e02:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8013e06:	6918      	ldr	r0, [r3, #16]
 8013e08:	f000 fc20 	bl	801464c <__hi0bits>
 8013e0c:	f1c0 0020 	rsb	r0, r0, #32
 8013e10:	4440      	add	r0, r8
 8013e12:	f010 001f 	ands.w	r0, r0, #31
 8013e16:	d047      	beq.n	8013ea8 <_dtoa_r+0x8c0>
 8013e18:	f1c0 0320 	rsb	r3, r0, #32
 8013e1c:	2b04      	cmp	r3, #4
 8013e1e:	dd3b      	ble.n	8013e98 <_dtoa_r+0x8b0>
 8013e20:	9b05      	ldr	r3, [sp, #20]
 8013e22:	f1c0 001c 	rsb	r0, r0, #28
 8013e26:	4403      	add	r3, r0
 8013e28:	9305      	str	r3, [sp, #20]
 8013e2a:	4405      	add	r5, r0
 8013e2c:	4480      	add	r8, r0
 8013e2e:	9b05      	ldr	r3, [sp, #20]
 8013e30:	2b00      	cmp	r3, #0
 8013e32:	dd05      	ble.n	8013e40 <_dtoa_r+0x858>
 8013e34:	461a      	mov	r2, r3
 8013e36:	9904      	ldr	r1, [sp, #16]
 8013e38:	4620      	mov	r0, r4
 8013e3a:	f000 fd43 	bl	80148c4 <__lshift>
 8013e3e:	9004      	str	r0, [sp, #16]
 8013e40:	f1b8 0f00 	cmp.w	r8, #0
 8013e44:	dd05      	ble.n	8013e52 <_dtoa_r+0x86a>
 8013e46:	4639      	mov	r1, r7
 8013e48:	4642      	mov	r2, r8
 8013e4a:	4620      	mov	r0, r4
 8013e4c:	f000 fd3a 	bl	80148c4 <__lshift>
 8013e50:	4607      	mov	r7, r0
 8013e52:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8013e54:	b353      	cbz	r3, 8013eac <_dtoa_r+0x8c4>
 8013e56:	4639      	mov	r1, r7
 8013e58:	9804      	ldr	r0, [sp, #16]
 8013e5a:	f000 fd87 	bl	801496c <__mcmp>
 8013e5e:	2800      	cmp	r0, #0
 8013e60:	da24      	bge.n	8013eac <_dtoa_r+0x8c4>
 8013e62:	2300      	movs	r3, #0
 8013e64:	220a      	movs	r2, #10
 8013e66:	9904      	ldr	r1, [sp, #16]
 8013e68:	4620      	mov	r0, r4
 8013e6a:	f000 fbb4 	bl	80145d6 <__multadd>
 8013e6e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013e70:	9004      	str	r0, [sp, #16]
 8013e72:	f10a 3aff 	add.w	sl, sl, #4294967295
 8013e76:	2b00      	cmp	r3, #0
 8013e78:	f000 814d 	beq.w	8014116 <_dtoa_r+0xb2e>
 8013e7c:	2300      	movs	r3, #0
 8013e7e:	4631      	mov	r1, r6
 8013e80:	220a      	movs	r2, #10
 8013e82:	4620      	mov	r0, r4
 8013e84:	f000 fba7 	bl	80145d6 <__multadd>
 8013e88:	9b02      	ldr	r3, [sp, #8]
 8013e8a:	2b00      	cmp	r3, #0
 8013e8c:	4606      	mov	r6, r0
 8013e8e:	dc4f      	bgt.n	8013f30 <_dtoa_r+0x948>
 8013e90:	9b06      	ldr	r3, [sp, #24]
 8013e92:	2b02      	cmp	r3, #2
 8013e94:	dd4c      	ble.n	8013f30 <_dtoa_r+0x948>
 8013e96:	e011      	b.n	8013ebc <_dtoa_r+0x8d4>
 8013e98:	d0c9      	beq.n	8013e2e <_dtoa_r+0x846>
 8013e9a:	9a05      	ldr	r2, [sp, #20]
 8013e9c:	331c      	adds	r3, #28
 8013e9e:	441a      	add	r2, r3
 8013ea0:	9205      	str	r2, [sp, #20]
 8013ea2:	441d      	add	r5, r3
 8013ea4:	4498      	add	r8, r3
 8013ea6:	e7c2      	b.n	8013e2e <_dtoa_r+0x846>
 8013ea8:	4603      	mov	r3, r0
 8013eaa:	e7f6      	b.n	8013e9a <_dtoa_r+0x8b2>
 8013eac:	f1b9 0f00 	cmp.w	r9, #0
 8013eb0:	dc38      	bgt.n	8013f24 <_dtoa_r+0x93c>
 8013eb2:	9b06      	ldr	r3, [sp, #24]
 8013eb4:	2b02      	cmp	r3, #2
 8013eb6:	dd35      	ble.n	8013f24 <_dtoa_r+0x93c>
 8013eb8:	f8cd 9008 	str.w	r9, [sp, #8]
 8013ebc:	9b02      	ldr	r3, [sp, #8]
 8013ebe:	b963      	cbnz	r3, 8013eda <_dtoa_r+0x8f2>
 8013ec0:	4639      	mov	r1, r7
 8013ec2:	2205      	movs	r2, #5
 8013ec4:	4620      	mov	r0, r4
 8013ec6:	f000 fb86 	bl	80145d6 <__multadd>
 8013eca:	4601      	mov	r1, r0
 8013ecc:	4607      	mov	r7, r0
 8013ece:	9804      	ldr	r0, [sp, #16]
 8013ed0:	f000 fd4c 	bl	801496c <__mcmp>
 8013ed4:	2800      	cmp	r0, #0
 8013ed6:	f73f adcc 	bgt.w	8013a72 <_dtoa_r+0x48a>
 8013eda:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013edc:	465d      	mov	r5, fp
 8013ede:	ea6f 0a03 	mvn.w	sl, r3
 8013ee2:	f04f 0900 	mov.w	r9, #0
 8013ee6:	4639      	mov	r1, r7
 8013ee8:	4620      	mov	r0, r4
 8013eea:	f000 fb5d 	bl	80145a8 <_Bfree>
 8013eee:	2e00      	cmp	r6, #0
 8013ef0:	f43f aeb7 	beq.w	8013c62 <_dtoa_r+0x67a>
 8013ef4:	f1b9 0f00 	cmp.w	r9, #0
 8013ef8:	d005      	beq.n	8013f06 <_dtoa_r+0x91e>
 8013efa:	45b1      	cmp	r9, r6
 8013efc:	d003      	beq.n	8013f06 <_dtoa_r+0x91e>
 8013efe:	4649      	mov	r1, r9
 8013f00:	4620      	mov	r0, r4
 8013f02:	f000 fb51 	bl	80145a8 <_Bfree>
 8013f06:	4631      	mov	r1, r6
 8013f08:	4620      	mov	r0, r4
 8013f0a:	f000 fb4d 	bl	80145a8 <_Bfree>
 8013f0e:	e6a8      	b.n	8013c62 <_dtoa_r+0x67a>
 8013f10:	2700      	movs	r7, #0
 8013f12:	463e      	mov	r6, r7
 8013f14:	e7e1      	b.n	8013eda <_dtoa_r+0x8f2>
 8013f16:	f8dd a020 	ldr.w	sl, [sp, #32]
 8013f1a:	463e      	mov	r6, r7
 8013f1c:	e5a9      	b.n	8013a72 <_dtoa_r+0x48a>
 8013f1e:	bf00      	nop
 8013f20:	40240000 	.word	0x40240000
 8013f24:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013f26:	f8cd 9008 	str.w	r9, [sp, #8]
 8013f2a:	2b00      	cmp	r3, #0
 8013f2c:	f000 80fa 	beq.w	8014124 <_dtoa_r+0xb3c>
 8013f30:	2d00      	cmp	r5, #0
 8013f32:	dd05      	ble.n	8013f40 <_dtoa_r+0x958>
 8013f34:	4631      	mov	r1, r6
 8013f36:	462a      	mov	r2, r5
 8013f38:	4620      	mov	r0, r4
 8013f3a:	f000 fcc3 	bl	80148c4 <__lshift>
 8013f3e:	4606      	mov	r6, r0
 8013f40:	9b07      	ldr	r3, [sp, #28]
 8013f42:	2b00      	cmp	r3, #0
 8013f44:	d04c      	beq.n	8013fe0 <_dtoa_r+0x9f8>
 8013f46:	6871      	ldr	r1, [r6, #4]
 8013f48:	4620      	mov	r0, r4
 8013f4a:	f000 faf9 	bl	8014540 <_Balloc>
 8013f4e:	6932      	ldr	r2, [r6, #16]
 8013f50:	3202      	adds	r2, #2
 8013f52:	4605      	mov	r5, r0
 8013f54:	0092      	lsls	r2, r2, #2
 8013f56:	f106 010c 	add.w	r1, r6, #12
 8013f5a:	300c      	adds	r0, #12
 8013f5c:	f7fe fcd4 	bl	8012908 <memcpy>
 8013f60:	2201      	movs	r2, #1
 8013f62:	4629      	mov	r1, r5
 8013f64:	4620      	mov	r0, r4
 8013f66:	f000 fcad 	bl	80148c4 <__lshift>
 8013f6a:	9b00      	ldr	r3, [sp, #0]
 8013f6c:	f8cd b014 	str.w	fp, [sp, #20]
 8013f70:	f003 0301 	and.w	r3, r3, #1
 8013f74:	46b1      	mov	r9, r6
 8013f76:	9307      	str	r3, [sp, #28]
 8013f78:	4606      	mov	r6, r0
 8013f7a:	4639      	mov	r1, r7
 8013f7c:	9804      	ldr	r0, [sp, #16]
 8013f7e:	f7ff faa5 	bl	80134cc <quorem>
 8013f82:	4649      	mov	r1, r9
 8013f84:	4605      	mov	r5, r0
 8013f86:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8013f8a:	9804      	ldr	r0, [sp, #16]
 8013f8c:	f000 fcee 	bl	801496c <__mcmp>
 8013f90:	4632      	mov	r2, r6
 8013f92:	9000      	str	r0, [sp, #0]
 8013f94:	4639      	mov	r1, r7
 8013f96:	4620      	mov	r0, r4
 8013f98:	f000 fd02 	bl	80149a0 <__mdiff>
 8013f9c:	68c3      	ldr	r3, [r0, #12]
 8013f9e:	4602      	mov	r2, r0
 8013fa0:	bb03      	cbnz	r3, 8013fe4 <_dtoa_r+0x9fc>
 8013fa2:	4601      	mov	r1, r0
 8013fa4:	9008      	str	r0, [sp, #32]
 8013fa6:	9804      	ldr	r0, [sp, #16]
 8013fa8:	f000 fce0 	bl	801496c <__mcmp>
 8013fac:	9a08      	ldr	r2, [sp, #32]
 8013fae:	4603      	mov	r3, r0
 8013fb0:	4611      	mov	r1, r2
 8013fb2:	4620      	mov	r0, r4
 8013fb4:	9308      	str	r3, [sp, #32]
 8013fb6:	f000 faf7 	bl	80145a8 <_Bfree>
 8013fba:	9b08      	ldr	r3, [sp, #32]
 8013fbc:	b9a3      	cbnz	r3, 8013fe8 <_dtoa_r+0xa00>
 8013fbe:	9a06      	ldr	r2, [sp, #24]
 8013fc0:	b992      	cbnz	r2, 8013fe8 <_dtoa_r+0xa00>
 8013fc2:	9a07      	ldr	r2, [sp, #28]
 8013fc4:	b982      	cbnz	r2, 8013fe8 <_dtoa_r+0xa00>
 8013fc6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8013fca:	d029      	beq.n	8014020 <_dtoa_r+0xa38>
 8013fcc:	9b00      	ldr	r3, [sp, #0]
 8013fce:	2b00      	cmp	r3, #0
 8013fd0:	dd01      	ble.n	8013fd6 <_dtoa_r+0x9ee>
 8013fd2:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8013fd6:	9b05      	ldr	r3, [sp, #20]
 8013fd8:	1c5d      	adds	r5, r3, #1
 8013fda:	f883 8000 	strb.w	r8, [r3]
 8013fde:	e782      	b.n	8013ee6 <_dtoa_r+0x8fe>
 8013fe0:	4630      	mov	r0, r6
 8013fe2:	e7c2      	b.n	8013f6a <_dtoa_r+0x982>
 8013fe4:	2301      	movs	r3, #1
 8013fe6:	e7e3      	b.n	8013fb0 <_dtoa_r+0x9c8>
 8013fe8:	9a00      	ldr	r2, [sp, #0]
 8013fea:	2a00      	cmp	r2, #0
 8013fec:	db04      	blt.n	8013ff8 <_dtoa_r+0xa10>
 8013fee:	d125      	bne.n	801403c <_dtoa_r+0xa54>
 8013ff0:	9a06      	ldr	r2, [sp, #24]
 8013ff2:	bb1a      	cbnz	r2, 801403c <_dtoa_r+0xa54>
 8013ff4:	9a07      	ldr	r2, [sp, #28]
 8013ff6:	bb0a      	cbnz	r2, 801403c <_dtoa_r+0xa54>
 8013ff8:	2b00      	cmp	r3, #0
 8013ffa:	ddec      	ble.n	8013fd6 <_dtoa_r+0x9ee>
 8013ffc:	2201      	movs	r2, #1
 8013ffe:	9904      	ldr	r1, [sp, #16]
 8014000:	4620      	mov	r0, r4
 8014002:	f000 fc5f 	bl	80148c4 <__lshift>
 8014006:	4639      	mov	r1, r7
 8014008:	9004      	str	r0, [sp, #16]
 801400a:	f000 fcaf 	bl	801496c <__mcmp>
 801400e:	2800      	cmp	r0, #0
 8014010:	dc03      	bgt.n	801401a <_dtoa_r+0xa32>
 8014012:	d1e0      	bne.n	8013fd6 <_dtoa_r+0x9ee>
 8014014:	f018 0f01 	tst.w	r8, #1
 8014018:	d0dd      	beq.n	8013fd6 <_dtoa_r+0x9ee>
 801401a:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 801401e:	d1d8      	bne.n	8013fd2 <_dtoa_r+0x9ea>
 8014020:	9b05      	ldr	r3, [sp, #20]
 8014022:	9a05      	ldr	r2, [sp, #20]
 8014024:	1c5d      	adds	r5, r3, #1
 8014026:	2339      	movs	r3, #57	; 0x39
 8014028:	7013      	strb	r3, [r2, #0]
 801402a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 801402e:	2b39      	cmp	r3, #57	; 0x39
 8014030:	f105 32ff 	add.w	r2, r5, #4294967295
 8014034:	d04f      	beq.n	80140d6 <_dtoa_r+0xaee>
 8014036:	3301      	adds	r3, #1
 8014038:	7013      	strb	r3, [r2, #0]
 801403a:	e754      	b.n	8013ee6 <_dtoa_r+0x8fe>
 801403c:	9a05      	ldr	r2, [sp, #20]
 801403e:	2b00      	cmp	r3, #0
 8014040:	f102 0501 	add.w	r5, r2, #1
 8014044:	dd06      	ble.n	8014054 <_dtoa_r+0xa6c>
 8014046:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 801404a:	d0e9      	beq.n	8014020 <_dtoa_r+0xa38>
 801404c:	f108 0801 	add.w	r8, r8, #1
 8014050:	9b05      	ldr	r3, [sp, #20]
 8014052:	e7c2      	b.n	8013fda <_dtoa_r+0x9f2>
 8014054:	9a02      	ldr	r2, [sp, #8]
 8014056:	f805 8c01 	strb.w	r8, [r5, #-1]
 801405a:	eba5 030b 	sub.w	r3, r5, fp
 801405e:	4293      	cmp	r3, r2
 8014060:	d021      	beq.n	80140a6 <_dtoa_r+0xabe>
 8014062:	2300      	movs	r3, #0
 8014064:	220a      	movs	r2, #10
 8014066:	9904      	ldr	r1, [sp, #16]
 8014068:	4620      	mov	r0, r4
 801406a:	f000 fab4 	bl	80145d6 <__multadd>
 801406e:	45b1      	cmp	r9, r6
 8014070:	9004      	str	r0, [sp, #16]
 8014072:	f04f 0300 	mov.w	r3, #0
 8014076:	f04f 020a 	mov.w	r2, #10
 801407a:	4649      	mov	r1, r9
 801407c:	4620      	mov	r0, r4
 801407e:	d105      	bne.n	801408c <_dtoa_r+0xaa4>
 8014080:	f000 faa9 	bl	80145d6 <__multadd>
 8014084:	4681      	mov	r9, r0
 8014086:	4606      	mov	r6, r0
 8014088:	9505      	str	r5, [sp, #20]
 801408a:	e776      	b.n	8013f7a <_dtoa_r+0x992>
 801408c:	f000 faa3 	bl	80145d6 <__multadd>
 8014090:	4631      	mov	r1, r6
 8014092:	4681      	mov	r9, r0
 8014094:	2300      	movs	r3, #0
 8014096:	220a      	movs	r2, #10
 8014098:	4620      	mov	r0, r4
 801409a:	f000 fa9c 	bl	80145d6 <__multadd>
 801409e:	4606      	mov	r6, r0
 80140a0:	e7f2      	b.n	8014088 <_dtoa_r+0xaa0>
 80140a2:	f04f 0900 	mov.w	r9, #0
 80140a6:	2201      	movs	r2, #1
 80140a8:	9904      	ldr	r1, [sp, #16]
 80140aa:	4620      	mov	r0, r4
 80140ac:	f000 fc0a 	bl	80148c4 <__lshift>
 80140b0:	4639      	mov	r1, r7
 80140b2:	9004      	str	r0, [sp, #16]
 80140b4:	f000 fc5a 	bl	801496c <__mcmp>
 80140b8:	2800      	cmp	r0, #0
 80140ba:	dcb6      	bgt.n	801402a <_dtoa_r+0xa42>
 80140bc:	d102      	bne.n	80140c4 <_dtoa_r+0xadc>
 80140be:	f018 0f01 	tst.w	r8, #1
 80140c2:	d1b2      	bne.n	801402a <_dtoa_r+0xa42>
 80140c4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80140c8:	2b30      	cmp	r3, #48	; 0x30
 80140ca:	f105 32ff 	add.w	r2, r5, #4294967295
 80140ce:	f47f af0a 	bne.w	8013ee6 <_dtoa_r+0x8fe>
 80140d2:	4615      	mov	r5, r2
 80140d4:	e7f6      	b.n	80140c4 <_dtoa_r+0xadc>
 80140d6:	4593      	cmp	fp, r2
 80140d8:	d105      	bne.n	80140e6 <_dtoa_r+0xafe>
 80140da:	2331      	movs	r3, #49	; 0x31
 80140dc:	f10a 0a01 	add.w	sl, sl, #1
 80140e0:	f88b 3000 	strb.w	r3, [fp]
 80140e4:	e6ff      	b.n	8013ee6 <_dtoa_r+0x8fe>
 80140e6:	4615      	mov	r5, r2
 80140e8:	e79f      	b.n	801402a <_dtoa_r+0xa42>
 80140ea:	f8df b064 	ldr.w	fp, [pc, #100]	; 8014150 <_dtoa_r+0xb68>
 80140ee:	e007      	b.n	8014100 <_dtoa_r+0xb18>
 80140f0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80140f2:	f8df b060 	ldr.w	fp, [pc, #96]	; 8014154 <_dtoa_r+0xb6c>
 80140f6:	b11b      	cbz	r3, 8014100 <_dtoa_r+0xb18>
 80140f8:	f10b 0308 	add.w	r3, fp, #8
 80140fc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80140fe:	6013      	str	r3, [r2, #0]
 8014100:	4658      	mov	r0, fp
 8014102:	b017      	add	sp, #92	; 0x5c
 8014104:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014108:	9b06      	ldr	r3, [sp, #24]
 801410a:	2b01      	cmp	r3, #1
 801410c:	f77f ae35 	ble.w	8013d7a <_dtoa_r+0x792>
 8014110:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8014112:	9307      	str	r3, [sp, #28]
 8014114:	e649      	b.n	8013daa <_dtoa_r+0x7c2>
 8014116:	9b02      	ldr	r3, [sp, #8]
 8014118:	2b00      	cmp	r3, #0
 801411a:	dc03      	bgt.n	8014124 <_dtoa_r+0xb3c>
 801411c:	9b06      	ldr	r3, [sp, #24]
 801411e:	2b02      	cmp	r3, #2
 8014120:	f73f aecc 	bgt.w	8013ebc <_dtoa_r+0x8d4>
 8014124:	465d      	mov	r5, fp
 8014126:	4639      	mov	r1, r7
 8014128:	9804      	ldr	r0, [sp, #16]
 801412a:	f7ff f9cf 	bl	80134cc <quorem>
 801412e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8014132:	f805 8b01 	strb.w	r8, [r5], #1
 8014136:	9a02      	ldr	r2, [sp, #8]
 8014138:	eba5 030b 	sub.w	r3, r5, fp
 801413c:	429a      	cmp	r2, r3
 801413e:	ddb0      	ble.n	80140a2 <_dtoa_r+0xaba>
 8014140:	2300      	movs	r3, #0
 8014142:	220a      	movs	r2, #10
 8014144:	9904      	ldr	r1, [sp, #16]
 8014146:	4620      	mov	r0, r4
 8014148:	f000 fa45 	bl	80145d6 <__multadd>
 801414c:	9004      	str	r0, [sp, #16]
 801414e:	e7ea      	b.n	8014126 <_dtoa_r+0xb3e>
 8014150:	080180b0 	.word	0x080180b0
 8014154:	080180d4 	.word	0x080180d4

08014158 <__sflush_r>:
 8014158:	898a      	ldrh	r2, [r1, #12]
 801415a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801415e:	4605      	mov	r5, r0
 8014160:	0710      	lsls	r0, r2, #28
 8014162:	460c      	mov	r4, r1
 8014164:	d458      	bmi.n	8014218 <__sflush_r+0xc0>
 8014166:	684b      	ldr	r3, [r1, #4]
 8014168:	2b00      	cmp	r3, #0
 801416a:	dc05      	bgt.n	8014178 <__sflush_r+0x20>
 801416c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801416e:	2b00      	cmp	r3, #0
 8014170:	dc02      	bgt.n	8014178 <__sflush_r+0x20>
 8014172:	2000      	movs	r0, #0
 8014174:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014178:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801417a:	2e00      	cmp	r6, #0
 801417c:	d0f9      	beq.n	8014172 <__sflush_r+0x1a>
 801417e:	2300      	movs	r3, #0
 8014180:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8014184:	682f      	ldr	r7, [r5, #0]
 8014186:	6a21      	ldr	r1, [r4, #32]
 8014188:	602b      	str	r3, [r5, #0]
 801418a:	d032      	beq.n	80141f2 <__sflush_r+0x9a>
 801418c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801418e:	89a3      	ldrh	r3, [r4, #12]
 8014190:	075a      	lsls	r2, r3, #29
 8014192:	d505      	bpl.n	80141a0 <__sflush_r+0x48>
 8014194:	6863      	ldr	r3, [r4, #4]
 8014196:	1ac0      	subs	r0, r0, r3
 8014198:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801419a:	b10b      	cbz	r3, 80141a0 <__sflush_r+0x48>
 801419c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801419e:	1ac0      	subs	r0, r0, r3
 80141a0:	2300      	movs	r3, #0
 80141a2:	4602      	mov	r2, r0
 80141a4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80141a6:	6a21      	ldr	r1, [r4, #32]
 80141a8:	4628      	mov	r0, r5
 80141aa:	47b0      	blx	r6
 80141ac:	1c43      	adds	r3, r0, #1
 80141ae:	89a3      	ldrh	r3, [r4, #12]
 80141b0:	d106      	bne.n	80141c0 <__sflush_r+0x68>
 80141b2:	6829      	ldr	r1, [r5, #0]
 80141b4:	291d      	cmp	r1, #29
 80141b6:	d848      	bhi.n	801424a <__sflush_r+0xf2>
 80141b8:	4a29      	ldr	r2, [pc, #164]	; (8014260 <__sflush_r+0x108>)
 80141ba:	40ca      	lsrs	r2, r1
 80141bc:	07d6      	lsls	r6, r2, #31
 80141be:	d544      	bpl.n	801424a <__sflush_r+0xf2>
 80141c0:	2200      	movs	r2, #0
 80141c2:	6062      	str	r2, [r4, #4]
 80141c4:	04d9      	lsls	r1, r3, #19
 80141c6:	6922      	ldr	r2, [r4, #16]
 80141c8:	6022      	str	r2, [r4, #0]
 80141ca:	d504      	bpl.n	80141d6 <__sflush_r+0x7e>
 80141cc:	1c42      	adds	r2, r0, #1
 80141ce:	d101      	bne.n	80141d4 <__sflush_r+0x7c>
 80141d0:	682b      	ldr	r3, [r5, #0]
 80141d2:	b903      	cbnz	r3, 80141d6 <__sflush_r+0x7e>
 80141d4:	6560      	str	r0, [r4, #84]	; 0x54
 80141d6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80141d8:	602f      	str	r7, [r5, #0]
 80141da:	2900      	cmp	r1, #0
 80141dc:	d0c9      	beq.n	8014172 <__sflush_r+0x1a>
 80141de:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80141e2:	4299      	cmp	r1, r3
 80141e4:	d002      	beq.n	80141ec <__sflush_r+0x94>
 80141e6:	4628      	mov	r0, r5
 80141e8:	f000 fc94 	bl	8014b14 <_free_r>
 80141ec:	2000      	movs	r0, #0
 80141ee:	6360      	str	r0, [r4, #52]	; 0x34
 80141f0:	e7c0      	b.n	8014174 <__sflush_r+0x1c>
 80141f2:	2301      	movs	r3, #1
 80141f4:	4628      	mov	r0, r5
 80141f6:	47b0      	blx	r6
 80141f8:	1c41      	adds	r1, r0, #1
 80141fa:	d1c8      	bne.n	801418e <__sflush_r+0x36>
 80141fc:	682b      	ldr	r3, [r5, #0]
 80141fe:	2b00      	cmp	r3, #0
 8014200:	d0c5      	beq.n	801418e <__sflush_r+0x36>
 8014202:	2b1d      	cmp	r3, #29
 8014204:	d001      	beq.n	801420a <__sflush_r+0xb2>
 8014206:	2b16      	cmp	r3, #22
 8014208:	d101      	bne.n	801420e <__sflush_r+0xb6>
 801420a:	602f      	str	r7, [r5, #0]
 801420c:	e7b1      	b.n	8014172 <__sflush_r+0x1a>
 801420e:	89a3      	ldrh	r3, [r4, #12]
 8014210:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014214:	81a3      	strh	r3, [r4, #12]
 8014216:	e7ad      	b.n	8014174 <__sflush_r+0x1c>
 8014218:	690f      	ldr	r7, [r1, #16]
 801421a:	2f00      	cmp	r7, #0
 801421c:	d0a9      	beq.n	8014172 <__sflush_r+0x1a>
 801421e:	0793      	lsls	r3, r2, #30
 8014220:	680e      	ldr	r6, [r1, #0]
 8014222:	bf08      	it	eq
 8014224:	694b      	ldreq	r3, [r1, #20]
 8014226:	600f      	str	r7, [r1, #0]
 8014228:	bf18      	it	ne
 801422a:	2300      	movne	r3, #0
 801422c:	eba6 0807 	sub.w	r8, r6, r7
 8014230:	608b      	str	r3, [r1, #8]
 8014232:	f1b8 0f00 	cmp.w	r8, #0
 8014236:	dd9c      	ble.n	8014172 <__sflush_r+0x1a>
 8014238:	4643      	mov	r3, r8
 801423a:	463a      	mov	r2, r7
 801423c:	6a21      	ldr	r1, [r4, #32]
 801423e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8014240:	4628      	mov	r0, r5
 8014242:	47b0      	blx	r6
 8014244:	2800      	cmp	r0, #0
 8014246:	dc06      	bgt.n	8014256 <__sflush_r+0xfe>
 8014248:	89a3      	ldrh	r3, [r4, #12]
 801424a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801424e:	81a3      	strh	r3, [r4, #12]
 8014250:	f04f 30ff 	mov.w	r0, #4294967295
 8014254:	e78e      	b.n	8014174 <__sflush_r+0x1c>
 8014256:	4407      	add	r7, r0
 8014258:	eba8 0800 	sub.w	r8, r8, r0
 801425c:	e7e9      	b.n	8014232 <__sflush_r+0xda>
 801425e:	bf00      	nop
 8014260:	20400001 	.word	0x20400001

08014264 <_fflush_r>:
 8014264:	b538      	push	{r3, r4, r5, lr}
 8014266:	690b      	ldr	r3, [r1, #16]
 8014268:	4605      	mov	r5, r0
 801426a:	460c      	mov	r4, r1
 801426c:	b1db      	cbz	r3, 80142a6 <_fflush_r+0x42>
 801426e:	b118      	cbz	r0, 8014278 <_fflush_r+0x14>
 8014270:	6983      	ldr	r3, [r0, #24]
 8014272:	b90b      	cbnz	r3, 8014278 <_fflush_r+0x14>
 8014274:	f000 f860 	bl	8014338 <__sinit>
 8014278:	4b0c      	ldr	r3, [pc, #48]	; (80142ac <_fflush_r+0x48>)
 801427a:	429c      	cmp	r4, r3
 801427c:	d109      	bne.n	8014292 <_fflush_r+0x2e>
 801427e:	686c      	ldr	r4, [r5, #4]
 8014280:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014284:	b17b      	cbz	r3, 80142a6 <_fflush_r+0x42>
 8014286:	4621      	mov	r1, r4
 8014288:	4628      	mov	r0, r5
 801428a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801428e:	f7ff bf63 	b.w	8014158 <__sflush_r>
 8014292:	4b07      	ldr	r3, [pc, #28]	; (80142b0 <_fflush_r+0x4c>)
 8014294:	429c      	cmp	r4, r3
 8014296:	d101      	bne.n	801429c <_fflush_r+0x38>
 8014298:	68ac      	ldr	r4, [r5, #8]
 801429a:	e7f1      	b.n	8014280 <_fflush_r+0x1c>
 801429c:	4b05      	ldr	r3, [pc, #20]	; (80142b4 <_fflush_r+0x50>)
 801429e:	429c      	cmp	r4, r3
 80142a0:	bf08      	it	eq
 80142a2:	68ec      	ldreq	r4, [r5, #12]
 80142a4:	e7ec      	b.n	8014280 <_fflush_r+0x1c>
 80142a6:	2000      	movs	r0, #0
 80142a8:	bd38      	pop	{r3, r4, r5, pc}
 80142aa:	bf00      	nop
 80142ac:	08018104 	.word	0x08018104
 80142b0:	08018124 	.word	0x08018124
 80142b4:	080180e4 	.word	0x080180e4

080142b8 <std>:
 80142b8:	2300      	movs	r3, #0
 80142ba:	b510      	push	{r4, lr}
 80142bc:	4604      	mov	r4, r0
 80142be:	e9c0 3300 	strd	r3, r3, [r0]
 80142c2:	6083      	str	r3, [r0, #8]
 80142c4:	8181      	strh	r1, [r0, #12]
 80142c6:	6643      	str	r3, [r0, #100]	; 0x64
 80142c8:	81c2      	strh	r2, [r0, #14]
 80142ca:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80142ce:	6183      	str	r3, [r0, #24]
 80142d0:	4619      	mov	r1, r3
 80142d2:	2208      	movs	r2, #8
 80142d4:	305c      	adds	r0, #92	; 0x5c
 80142d6:	f7fe fb22 	bl	801291e <memset>
 80142da:	4b05      	ldr	r3, [pc, #20]	; (80142f0 <std+0x38>)
 80142dc:	6263      	str	r3, [r4, #36]	; 0x24
 80142de:	4b05      	ldr	r3, [pc, #20]	; (80142f4 <std+0x3c>)
 80142e0:	62a3      	str	r3, [r4, #40]	; 0x28
 80142e2:	4b05      	ldr	r3, [pc, #20]	; (80142f8 <std+0x40>)
 80142e4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80142e6:	4b05      	ldr	r3, [pc, #20]	; (80142fc <std+0x44>)
 80142e8:	6224      	str	r4, [r4, #32]
 80142ea:	6323      	str	r3, [r4, #48]	; 0x30
 80142ec:	bd10      	pop	{r4, pc}
 80142ee:	bf00      	nop
 80142f0:	080151a9 	.word	0x080151a9
 80142f4:	080151cb 	.word	0x080151cb
 80142f8:	08015203 	.word	0x08015203
 80142fc:	08015227 	.word	0x08015227

08014300 <_cleanup_r>:
 8014300:	4901      	ldr	r1, [pc, #4]	; (8014308 <_cleanup_r+0x8>)
 8014302:	f000 b885 	b.w	8014410 <_fwalk_reent>
 8014306:	bf00      	nop
 8014308:	08014265 	.word	0x08014265

0801430c <__sfmoreglue>:
 801430c:	b570      	push	{r4, r5, r6, lr}
 801430e:	1e4a      	subs	r2, r1, #1
 8014310:	2568      	movs	r5, #104	; 0x68
 8014312:	4355      	muls	r5, r2
 8014314:	460e      	mov	r6, r1
 8014316:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801431a:	f000 fc49 	bl	8014bb0 <_malloc_r>
 801431e:	4604      	mov	r4, r0
 8014320:	b140      	cbz	r0, 8014334 <__sfmoreglue+0x28>
 8014322:	2100      	movs	r1, #0
 8014324:	e9c0 1600 	strd	r1, r6, [r0]
 8014328:	300c      	adds	r0, #12
 801432a:	60a0      	str	r0, [r4, #8]
 801432c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8014330:	f7fe faf5 	bl	801291e <memset>
 8014334:	4620      	mov	r0, r4
 8014336:	bd70      	pop	{r4, r5, r6, pc}

08014338 <__sinit>:
 8014338:	6983      	ldr	r3, [r0, #24]
 801433a:	b510      	push	{r4, lr}
 801433c:	4604      	mov	r4, r0
 801433e:	bb33      	cbnz	r3, 801438e <__sinit+0x56>
 8014340:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8014344:	6503      	str	r3, [r0, #80]	; 0x50
 8014346:	4b12      	ldr	r3, [pc, #72]	; (8014390 <__sinit+0x58>)
 8014348:	4a12      	ldr	r2, [pc, #72]	; (8014394 <__sinit+0x5c>)
 801434a:	681b      	ldr	r3, [r3, #0]
 801434c:	6282      	str	r2, [r0, #40]	; 0x28
 801434e:	4298      	cmp	r0, r3
 8014350:	bf04      	itt	eq
 8014352:	2301      	moveq	r3, #1
 8014354:	6183      	streq	r3, [r0, #24]
 8014356:	f000 f81f 	bl	8014398 <__sfp>
 801435a:	6060      	str	r0, [r4, #4]
 801435c:	4620      	mov	r0, r4
 801435e:	f000 f81b 	bl	8014398 <__sfp>
 8014362:	60a0      	str	r0, [r4, #8]
 8014364:	4620      	mov	r0, r4
 8014366:	f000 f817 	bl	8014398 <__sfp>
 801436a:	2200      	movs	r2, #0
 801436c:	60e0      	str	r0, [r4, #12]
 801436e:	2104      	movs	r1, #4
 8014370:	6860      	ldr	r0, [r4, #4]
 8014372:	f7ff ffa1 	bl	80142b8 <std>
 8014376:	2201      	movs	r2, #1
 8014378:	2109      	movs	r1, #9
 801437a:	68a0      	ldr	r0, [r4, #8]
 801437c:	f7ff ff9c 	bl	80142b8 <std>
 8014380:	2202      	movs	r2, #2
 8014382:	2112      	movs	r1, #18
 8014384:	68e0      	ldr	r0, [r4, #12]
 8014386:	f7ff ff97 	bl	80142b8 <std>
 801438a:	2301      	movs	r3, #1
 801438c:	61a3      	str	r3, [r4, #24]
 801438e:	bd10      	pop	{r4, pc}
 8014390:	0801809c 	.word	0x0801809c
 8014394:	08014301 	.word	0x08014301

08014398 <__sfp>:
 8014398:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801439a:	4b1b      	ldr	r3, [pc, #108]	; (8014408 <__sfp+0x70>)
 801439c:	681e      	ldr	r6, [r3, #0]
 801439e:	69b3      	ldr	r3, [r6, #24]
 80143a0:	4607      	mov	r7, r0
 80143a2:	b913      	cbnz	r3, 80143aa <__sfp+0x12>
 80143a4:	4630      	mov	r0, r6
 80143a6:	f7ff ffc7 	bl	8014338 <__sinit>
 80143aa:	3648      	adds	r6, #72	; 0x48
 80143ac:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80143b0:	3b01      	subs	r3, #1
 80143b2:	d503      	bpl.n	80143bc <__sfp+0x24>
 80143b4:	6833      	ldr	r3, [r6, #0]
 80143b6:	b133      	cbz	r3, 80143c6 <__sfp+0x2e>
 80143b8:	6836      	ldr	r6, [r6, #0]
 80143ba:	e7f7      	b.n	80143ac <__sfp+0x14>
 80143bc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80143c0:	b16d      	cbz	r5, 80143de <__sfp+0x46>
 80143c2:	3468      	adds	r4, #104	; 0x68
 80143c4:	e7f4      	b.n	80143b0 <__sfp+0x18>
 80143c6:	2104      	movs	r1, #4
 80143c8:	4638      	mov	r0, r7
 80143ca:	f7ff ff9f 	bl	801430c <__sfmoreglue>
 80143ce:	6030      	str	r0, [r6, #0]
 80143d0:	2800      	cmp	r0, #0
 80143d2:	d1f1      	bne.n	80143b8 <__sfp+0x20>
 80143d4:	230c      	movs	r3, #12
 80143d6:	603b      	str	r3, [r7, #0]
 80143d8:	4604      	mov	r4, r0
 80143da:	4620      	mov	r0, r4
 80143dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80143de:	4b0b      	ldr	r3, [pc, #44]	; (801440c <__sfp+0x74>)
 80143e0:	6665      	str	r5, [r4, #100]	; 0x64
 80143e2:	e9c4 5500 	strd	r5, r5, [r4]
 80143e6:	60a5      	str	r5, [r4, #8]
 80143e8:	e9c4 3503 	strd	r3, r5, [r4, #12]
 80143ec:	e9c4 5505 	strd	r5, r5, [r4, #20]
 80143f0:	2208      	movs	r2, #8
 80143f2:	4629      	mov	r1, r5
 80143f4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80143f8:	f7fe fa91 	bl	801291e <memset>
 80143fc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8014400:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8014404:	e7e9      	b.n	80143da <__sfp+0x42>
 8014406:	bf00      	nop
 8014408:	0801809c 	.word	0x0801809c
 801440c:	ffff0001 	.word	0xffff0001

08014410 <_fwalk_reent>:
 8014410:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014414:	4680      	mov	r8, r0
 8014416:	4689      	mov	r9, r1
 8014418:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801441c:	2600      	movs	r6, #0
 801441e:	b914      	cbnz	r4, 8014426 <_fwalk_reent+0x16>
 8014420:	4630      	mov	r0, r6
 8014422:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014426:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 801442a:	3f01      	subs	r7, #1
 801442c:	d501      	bpl.n	8014432 <_fwalk_reent+0x22>
 801442e:	6824      	ldr	r4, [r4, #0]
 8014430:	e7f5      	b.n	801441e <_fwalk_reent+0xe>
 8014432:	89ab      	ldrh	r3, [r5, #12]
 8014434:	2b01      	cmp	r3, #1
 8014436:	d907      	bls.n	8014448 <_fwalk_reent+0x38>
 8014438:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801443c:	3301      	adds	r3, #1
 801443e:	d003      	beq.n	8014448 <_fwalk_reent+0x38>
 8014440:	4629      	mov	r1, r5
 8014442:	4640      	mov	r0, r8
 8014444:	47c8      	blx	r9
 8014446:	4306      	orrs	r6, r0
 8014448:	3568      	adds	r5, #104	; 0x68
 801444a:	e7ee      	b.n	801442a <_fwalk_reent+0x1a>

0801444c <_localeconv_r>:
 801444c:	4b04      	ldr	r3, [pc, #16]	; (8014460 <_localeconv_r+0x14>)
 801444e:	681b      	ldr	r3, [r3, #0]
 8014450:	6a18      	ldr	r0, [r3, #32]
 8014452:	4b04      	ldr	r3, [pc, #16]	; (8014464 <_localeconv_r+0x18>)
 8014454:	2800      	cmp	r0, #0
 8014456:	bf08      	it	eq
 8014458:	4618      	moveq	r0, r3
 801445a:	30f0      	adds	r0, #240	; 0xf0
 801445c:	4770      	bx	lr
 801445e:	bf00      	nop
 8014460:	20000024 	.word	0x20000024
 8014464:	20000088 	.word	0x20000088

08014468 <__swhatbuf_r>:
 8014468:	b570      	push	{r4, r5, r6, lr}
 801446a:	460e      	mov	r6, r1
 801446c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014470:	2900      	cmp	r1, #0
 8014472:	b096      	sub	sp, #88	; 0x58
 8014474:	4614      	mov	r4, r2
 8014476:	461d      	mov	r5, r3
 8014478:	da07      	bge.n	801448a <__swhatbuf_r+0x22>
 801447a:	2300      	movs	r3, #0
 801447c:	602b      	str	r3, [r5, #0]
 801447e:	89b3      	ldrh	r3, [r6, #12]
 8014480:	061a      	lsls	r2, r3, #24
 8014482:	d410      	bmi.n	80144a6 <__swhatbuf_r+0x3e>
 8014484:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8014488:	e00e      	b.n	80144a8 <__swhatbuf_r+0x40>
 801448a:	466a      	mov	r2, sp
 801448c:	f000 fef2 	bl	8015274 <_fstat_r>
 8014490:	2800      	cmp	r0, #0
 8014492:	dbf2      	blt.n	801447a <__swhatbuf_r+0x12>
 8014494:	9a01      	ldr	r2, [sp, #4]
 8014496:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801449a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801449e:	425a      	negs	r2, r3
 80144a0:	415a      	adcs	r2, r3
 80144a2:	602a      	str	r2, [r5, #0]
 80144a4:	e7ee      	b.n	8014484 <__swhatbuf_r+0x1c>
 80144a6:	2340      	movs	r3, #64	; 0x40
 80144a8:	2000      	movs	r0, #0
 80144aa:	6023      	str	r3, [r4, #0]
 80144ac:	b016      	add	sp, #88	; 0x58
 80144ae:	bd70      	pop	{r4, r5, r6, pc}

080144b0 <__smakebuf_r>:
 80144b0:	898b      	ldrh	r3, [r1, #12]
 80144b2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80144b4:	079d      	lsls	r5, r3, #30
 80144b6:	4606      	mov	r6, r0
 80144b8:	460c      	mov	r4, r1
 80144ba:	d507      	bpl.n	80144cc <__smakebuf_r+0x1c>
 80144bc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80144c0:	6023      	str	r3, [r4, #0]
 80144c2:	6123      	str	r3, [r4, #16]
 80144c4:	2301      	movs	r3, #1
 80144c6:	6163      	str	r3, [r4, #20]
 80144c8:	b002      	add	sp, #8
 80144ca:	bd70      	pop	{r4, r5, r6, pc}
 80144cc:	ab01      	add	r3, sp, #4
 80144ce:	466a      	mov	r2, sp
 80144d0:	f7ff ffca 	bl	8014468 <__swhatbuf_r>
 80144d4:	9900      	ldr	r1, [sp, #0]
 80144d6:	4605      	mov	r5, r0
 80144d8:	4630      	mov	r0, r6
 80144da:	f000 fb69 	bl	8014bb0 <_malloc_r>
 80144de:	b948      	cbnz	r0, 80144f4 <__smakebuf_r+0x44>
 80144e0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80144e4:	059a      	lsls	r2, r3, #22
 80144e6:	d4ef      	bmi.n	80144c8 <__smakebuf_r+0x18>
 80144e8:	f023 0303 	bic.w	r3, r3, #3
 80144ec:	f043 0302 	orr.w	r3, r3, #2
 80144f0:	81a3      	strh	r3, [r4, #12]
 80144f2:	e7e3      	b.n	80144bc <__smakebuf_r+0xc>
 80144f4:	4b0d      	ldr	r3, [pc, #52]	; (801452c <__smakebuf_r+0x7c>)
 80144f6:	62b3      	str	r3, [r6, #40]	; 0x28
 80144f8:	89a3      	ldrh	r3, [r4, #12]
 80144fa:	6020      	str	r0, [r4, #0]
 80144fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8014500:	81a3      	strh	r3, [r4, #12]
 8014502:	9b00      	ldr	r3, [sp, #0]
 8014504:	6163      	str	r3, [r4, #20]
 8014506:	9b01      	ldr	r3, [sp, #4]
 8014508:	6120      	str	r0, [r4, #16]
 801450a:	b15b      	cbz	r3, 8014524 <__smakebuf_r+0x74>
 801450c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8014510:	4630      	mov	r0, r6
 8014512:	f000 fec1 	bl	8015298 <_isatty_r>
 8014516:	b128      	cbz	r0, 8014524 <__smakebuf_r+0x74>
 8014518:	89a3      	ldrh	r3, [r4, #12]
 801451a:	f023 0303 	bic.w	r3, r3, #3
 801451e:	f043 0301 	orr.w	r3, r3, #1
 8014522:	81a3      	strh	r3, [r4, #12]
 8014524:	89a3      	ldrh	r3, [r4, #12]
 8014526:	431d      	orrs	r5, r3
 8014528:	81a5      	strh	r5, [r4, #12]
 801452a:	e7cd      	b.n	80144c8 <__smakebuf_r+0x18>
 801452c:	08014301 	.word	0x08014301

08014530 <malloc>:
 8014530:	4b02      	ldr	r3, [pc, #8]	; (801453c <malloc+0xc>)
 8014532:	4601      	mov	r1, r0
 8014534:	6818      	ldr	r0, [r3, #0]
 8014536:	f000 bb3b 	b.w	8014bb0 <_malloc_r>
 801453a:	bf00      	nop
 801453c:	20000024 	.word	0x20000024

08014540 <_Balloc>:
 8014540:	b570      	push	{r4, r5, r6, lr}
 8014542:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8014544:	4604      	mov	r4, r0
 8014546:	460e      	mov	r6, r1
 8014548:	b93d      	cbnz	r5, 801455a <_Balloc+0x1a>
 801454a:	2010      	movs	r0, #16
 801454c:	f7ff fff0 	bl	8014530 <malloc>
 8014550:	6260      	str	r0, [r4, #36]	; 0x24
 8014552:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8014556:	6005      	str	r5, [r0, #0]
 8014558:	60c5      	str	r5, [r0, #12]
 801455a:	6a65      	ldr	r5, [r4, #36]	; 0x24
 801455c:	68eb      	ldr	r3, [r5, #12]
 801455e:	b183      	cbz	r3, 8014582 <_Balloc+0x42>
 8014560:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8014562:	68db      	ldr	r3, [r3, #12]
 8014564:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8014568:	b9b8      	cbnz	r0, 801459a <_Balloc+0x5a>
 801456a:	2101      	movs	r1, #1
 801456c:	fa01 f506 	lsl.w	r5, r1, r6
 8014570:	1d6a      	adds	r2, r5, #5
 8014572:	0092      	lsls	r2, r2, #2
 8014574:	4620      	mov	r0, r4
 8014576:	f000 fabf 	bl	8014af8 <_calloc_r>
 801457a:	b160      	cbz	r0, 8014596 <_Balloc+0x56>
 801457c:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8014580:	e00e      	b.n	80145a0 <_Balloc+0x60>
 8014582:	2221      	movs	r2, #33	; 0x21
 8014584:	2104      	movs	r1, #4
 8014586:	4620      	mov	r0, r4
 8014588:	f000 fab6 	bl	8014af8 <_calloc_r>
 801458c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801458e:	60e8      	str	r0, [r5, #12]
 8014590:	68db      	ldr	r3, [r3, #12]
 8014592:	2b00      	cmp	r3, #0
 8014594:	d1e4      	bne.n	8014560 <_Balloc+0x20>
 8014596:	2000      	movs	r0, #0
 8014598:	bd70      	pop	{r4, r5, r6, pc}
 801459a:	6802      	ldr	r2, [r0, #0]
 801459c:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 80145a0:	2300      	movs	r3, #0
 80145a2:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80145a6:	e7f7      	b.n	8014598 <_Balloc+0x58>

080145a8 <_Bfree>:
 80145a8:	b570      	push	{r4, r5, r6, lr}
 80145aa:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80145ac:	4606      	mov	r6, r0
 80145ae:	460d      	mov	r5, r1
 80145b0:	b93c      	cbnz	r4, 80145c2 <_Bfree+0x1a>
 80145b2:	2010      	movs	r0, #16
 80145b4:	f7ff ffbc 	bl	8014530 <malloc>
 80145b8:	6270      	str	r0, [r6, #36]	; 0x24
 80145ba:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80145be:	6004      	str	r4, [r0, #0]
 80145c0:	60c4      	str	r4, [r0, #12]
 80145c2:	b13d      	cbz	r5, 80145d4 <_Bfree+0x2c>
 80145c4:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80145c6:	686a      	ldr	r2, [r5, #4]
 80145c8:	68db      	ldr	r3, [r3, #12]
 80145ca:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80145ce:	6029      	str	r1, [r5, #0]
 80145d0:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 80145d4:	bd70      	pop	{r4, r5, r6, pc}

080145d6 <__multadd>:
 80145d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80145da:	690d      	ldr	r5, [r1, #16]
 80145dc:	461f      	mov	r7, r3
 80145de:	4606      	mov	r6, r0
 80145e0:	460c      	mov	r4, r1
 80145e2:	f101 0c14 	add.w	ip, r1, #20
 80145e6:	2300      	movs	r3, #0
 80145e8:	f8dc 0000 	ldr.w	r0, [ip]
 80145ec:	b281      	uxth	r1, r0
 80145ee:	fb02 7101 	mla	r1, r2, r1, r7
 80145f2:	0c0f      	lsrs	r7, r1, #16
 80145f4:	0c00      	lsrs	r0, r0, #16
 80145f6:	fb02 7000 	mla	r0, r2, r0, r7
 80145fa:	b289      	uxth	r1, r1
 80145fc:	3301      	adds	r3, #1
 80145fe:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8014602:	429d      	cmp	r5, r3
 8014604:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8014608:	f84c 1b04 	str.w	r1, [ip], #4
 801460c:	dcec      	bgt.n	80145e8 <__multadd+0x12>
 801460e:	b1d7      	cbz	r7, 8014646 <__multadd+0x70>
 8014610:	68a3      	ldr	r3, [r4, #8]
 8014612:	42ab      	cmp	r3, r5
 8014614:	dc12      	bgt.n	801463c <__multadd+0x66>
 8014616:	6861      	ldr	r1, [r4, #4]
 8014618:	4630      	mov	r0, r6
 801461a:	3101      	adds	r1, #1
 801461c:	f7ff ff90 	bl	8014540 <_Balloc>
 8014620:	6922      	ldr	r2, [r4, #16]
 8014622:	3202      	adds	r2, #2
 8014624:	f104 010c 	add.w	r1, r4, #12
 8014628:	4680      	mov	r8, r0
 801462a:	0092      	lsls	r2, r2, #2
 801462c:	300c      	adds	r0, #12
 801462e:	f7fe f96b 	bl	8012908 <memcpy>
 8014632:	4621      	mov	r1, r4
 8014634:	4630      	mov	r0, r6
 8014636:	f7ff ffb7 	bl	80145a8 <_Bfree>
 801463a:	4644      	mov	r4, r8
 801463c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8014640:	3501      	adds	r5, #1
 8014642:	615f      	str	r7, [r3, #20]
 8014644:	6125      	str	r5, [r4, #16]
 8014646:	4620      	mov	r0, r4
 8014648:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801464c <__hi0bits>:
 801464c:	0c02      	lsrs	r2, r0, #16
 801464e:	0412      	lsls	r2, r2, #16
 8014650:	4603      	mov	r3, r0
 8014652:	b9b2      	cbnz	r2, 8014682 <__hi0bits+0x36>
 8014654:	0403      	lsls	r3, r0, #16
 8014656:	2010      	movs	r0, #16
 8014658:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 801465c:	bf04      	itt	eq
 801465e:	021b      	lsleq	r3, r3, #8
 8014660:	3008      	addeq	r0, #8
 8014662:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8014666:	bf04      	itt	eq
 8014668:	011b      	lsleq	r3, r3, #4
 801466a:	3004      	addeq	r0, #4
 801466c:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8014670:	bf04      	itt	eq
 8014672:	009b      	lsleq	r3, r3, #2
 8014674:	3002      	addeq	r0, #2
 8014676:	2b00      	cmp	r3, #0
 8014678:	db06      	blt.n	8014688 <__hi0bits+0x3c>
 801467a:	005b      	lsls	r3, r3, #1
 801467c:	d503      	bpl.n	8014686 <__hi0bits+0x3a>
 801467e:	3001      	adds	r0, #1
 8014680:	4770      	bx	lr
 8014682:	2000      	movs	r0, #0
 8014684:	e7e8      	b.n	8014658 <__hi0bits+0xc>
 8014686:	2020      	movs	r0, #32
 8014688:	4770      	bx	lr

0801468a <__lo0bits>:
 801468a:	6803      	ldr	r3, [r0, #0]
 801468c:	f013 0207 	ands.w	r2, r3, #7
 8014690:	4601      	mov	r1, r0
 8014692:	d00b      	beq.n	80146ac <__lo0bits+0x22>
 8014694:	07da      	lsls	r2, r3, #31
 8014696:	d423      	bmi.n	80146e0 <__lo0bits+0x56>
 8014698:	0798      	lsls	r0, r3, #30
 801469a:	bf49      	itett	mi
 801469c:	085b      	lsrmi	r3, r3, #1
 801469e:	089b      	lsrpl	r3, r3, #2
 80146a0:	2001      	movmi	r0, #1
 80146a2:	600b      	strmi	r3, [r1, #0]
 80146a4:	bf5c      	itt	pl
 80146a6:	600b      	strpl	r3, [r1, #0]
 80146a8:	2002      	movpl	r0, #2
 80146aa:	4770      	bx	lr
 80146ac:	b298      	uxth	r0, r3
 80146ae:	b9a8      	cbnz	r0, 80146dc <__lo0bits+0x52>
 80146b0:	0c1b      	lsrs	r3, r3, #16
 80146b2:	2010      	movs	r0, #16
 80146b4:	f013 0fff 	tst.w	r3, #255	; 0xff
 80146b8:	bf04      	itt	eq
 80146ba:	0a1b      	lsreq	r3, r3, #8
 80146bc:	3008      	addeq	r0, #8
 80146be:	071a      	lsls	r2, r3, #28
 80146c0:	bf04      	itt	eq
 80146c2:	091b      	lsreq	r3, r3, #4
 80146c4:	3004      	addeq	r0, #4
 80146c6:	079a      	lsls	r2, r3, #30
 80146c8:	bf04      	itt	eq
 80146ca:	089b      	lsreq	r3, r3, #2
 80146cc:	3002      	addeq	r0, #2
 80146ce:	07da      	lsls	r2, r3, #31
 80146d0:	d402      	bmi.n	80146d8 <__lo0bits+0x4e>
 80146d2:	085b      	lsrs	r3, r3, #1
 80146d4:	d006      	beq.n	80146e4 <__lo0bits+0x5a>
 80146d6:	3001      	adds	r0, #1
 80146d8:	600b      	str	r3, [r1, #0]
 80146da:	4770      	bx	lr
 80146dc:	4610      	mov	r0, r2
 80146de:	e7e9      	b.n	80146b4 <__lo0bits+0x2a>
 80146e0:	2000      	movs	r0, #0
 80146e2:	4770      	bx	lr
 80146e4:	2020      	movs	r0, #32
 80146e6:	4770      	bx	lr

080146e8 <__i2b>:
 80146e8:	b510      	push	{r4, lr}
 80146ea:	460c      	mov	r4, r1
 80146ec:	2101      	movs	r1, #1
 80146ee:	f7ff ff27 	bl	8014540 <_Balloc>
 80146f2:	2201      	movs	r2, #1
 80146f4:	6144      	str	r4, [r0, #20]
 80146f6:	6102      	str	r2, [r0, #16]
 80146f8:	bd10      	pop	{r4, pc}

080146fa <__multiply>:
 80146fa:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80146fe:	4614      	mov	r4, r2
 8014700:	690a      	ldr	r2, [r1, #16]
 8014702:	6923      	ldr	r3, [r4, #16]
 8014704:	429a      	cmp	r2, r3
 8014706:	bfb8      	it	lt
 8014708:	460b      	movlt	r3, r1
 801470a:	4688      	mov	r8, r1
 801470c:	bfbc      	itt	lt
 801470e:	46a0      	movlt	r8, r4
 8014710:	461c      	movlt	r4, r3
 8014712:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8014716:	f8d4 9010 	ldr.w	r9, [r4, #16]
 801471a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801471e:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8014722:	eb07 0609 	add.w	r6, r7, r9
 8014726:	42b3      	cmp	r3, r6
 8014728:	bfb8      	it	lt
 801472a:	3101      	addlt	r1, #1
 801472c:	f7ff ff08 	bl	8014540 <_Balloc>
 8014730:	f100 0514 	add.w	r5, r0, #20
 8014734:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8014738:	462b      	mov	r3, r5
 801473a:	2200      	movs	r2, #0
 801473c:	4573      	cmp	r3, lr
 801473e:	d316      	bcc.n	801476e <__multiply+0x74>
 8014740:	f104 0214 	add.w	r2, r4, #20
 8014744:	f108 0114 	add.w	r1, r8, #20
 8014748:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 801474c:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8014750:	9300      	str	r3, [sp, #0]
 8014752:	9b00      	ldr	r3, [sp, #0]
 8014754:	9201      	str	r2, [sp, #4]
 8014756:	4293      	cmp	r3, r2
 8014758:	d80c      	bhi.n	8014774 <__multiply+0x7a>
 801475a:	2e00      	cmp	r6, #0
 801475c:	dd03      	ble.n	8014766 <__multiply+0x6c>
 801475e:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8014762:	2b00      	cmp	r3, #0
 8014764:	d05d      	beq.n	8014822 <__multiply+0x128>
 8014766:	6106      	str	r6, [r0, #16]
 8014768:	b003      	add	sp, #12
 801476a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801476e:	f843 2b04 	str.w	r2, [r3], #4
 8014772:	e7e3      	b.n	801473c <__multiply+0x42>
 8014774:	f8b2 b000 	ldrh.w	fp, [r2]
 8014778:	f1bb 0f00 	cmp.w	fp, #0
 801477c:	d023      	beq.n	80147c6 <__multiply+0xcc>
 801477e:	4689      	mov	r9, r1
 8014780:	46ac      	mov	ip, r5
 8014782:	f04f 0800 	mov.w	r8, #0
 8014786:	f859 4b04 	ldr.w	r4, [r9], #4
 801478a:	f8dc a000 	ldr.w	sl, [ip]
 801478e:	b2a3      	uxth	r3, r4
 8014790:	fa1f fa8a 	uxth.w	sl, sl
 8014794:	fb0b a303 	mla	r3, fp, r3, sl
 8014798:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 801479c:	f8dc 4000 	ldr.w	r4, [ip]
 80147a0:	4443      	add	r3, r8
 80147a2:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80147a6:	fb0b 840a 	mla	r4, fp, sl, r8
 80147aa:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 80147ae:	46e2      	mov	sl, ip
 80147b0:	b29b      	uxth	r3, r3
 80147b2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80147b6:	454f      	cmp	r7, r9
 80147b8:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80147bc:	f84a 3b04 	str.w	r3, [sl], #4
 80147c0:	d82b      	bhi.n	801481a <__multiply+0x120>
 80147c2:	f8cc 8004 	str.w	r8, [ip, #4]
 80147c6:	9b01      	ldr	r3, [sp, #4]
 80147c8:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 80147cc:	3204      	adds	r2, #4
 80147ce:	f1ba 0f00 	cmp.w	sl, #0
 80147d2:	d020      	beq.n	8014816 <__multiply+0x11c>
 80147d4:	682b      	ldr	r3, [r5, #0]
 80147d6:	4689      	mov	r9, r1
 80147d8:	46a8      	mov	r8, r5
 80147da:	f04f 0b00 	mov.w	fp, #0
 80147de:	f8b9 c000 	ldrh.w	ip, [r9]
 80147e2:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 80147e6:	fb0a 440c 	mla	r4, sl, ip, r4
 80147ea:	445c      	add	r4, fp
 80147ec:	46c4      	mov	ip, r8
 80147ee:	b29b      	uxth	r3, r3
 80147f0:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80147f4:	f84c 3b04 	str.w	r3, [ip], #4
 80147f8:	f859 3b04 	ldr.w	r3, [r9], #4
 80147fc:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8014800:	0c1b      	lsrs	r3, r3, #16
 8014802:	fb0a b303 	mla	r3, sl, r3, fp
 8014806:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 801480a:	454f      	cmp	r7, r9
 801480c:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8014810:	d805      	bhi.n	801481e <__multiply+0x124>
 8014812:	f8c8 3004 	str.w	r3, [r8, #4]
 8014816:	3504      	adds	r5, #4
 8014818:	e79b      	b.n	8014752 <__multiply+0x58>
 801481a:	46d4      	mov	ip, sl
 801481c:	e7b3      	b.n	8014786 <__multiply+0x8c>
 801481e:	46e0      	mov	r8, ip
 8014820:	e7dd      	b.n	80147de <__multiply+0xe4>
 8014822:	3e01      	subs	r6, #1
 8014824:	e799      	b.n	801475a <__multiply+0x60>
	...

08014828 <__pow5mult>:
 8014828:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801482c:	4615      	mov	r5, r2
 801482e:	f012 0203 	ands.w	r2, r2, #3
 8014832:	4606      	mov	r6, r0
 8014834:	460f      	mov	r7, r1
 8014836:	d007      	beq.n	8014848 <__pow5mult+0x20>
 8014838:	3a01      	subs	r2, #1
 801483a:	4c21      	ldr	r4, [pc, #132]	; (80148c0 <__pow5mult+0x98>)
 801483c:	2300      	movs	r3, #0
 801483e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8014842:	f7ff fec8 	bl	80145d6 <__multadd>
 8014846:	4607      	mov	r7, r0
 8014848:	10ad      	asrs	r5, r5, #2
 801484a:	d035      	beq.n	80148b8 <__pow5mult+0x90>
 801484c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 801484e:	b93c      	cbnz	r4, 8014860 <__pow5mult+0x38>
 8014850:	2010      	movs	r0, #16
 8014852:	f7ff fe6d 	bl	8014530 <malloc>
 8014856:	6270      	str	r0, [r6, #36]	; 0x24
 8014858:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801485c:	6004      	str	r4, [r0, #0]
 801485e:	60c4      	str	r4, [r0, #12]
 8014860:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8014864:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8014868:	b94c      	cbnz	r4, 801487e <__pow5mult+0x56>
 801486a:	f240 2171 	movw	r1, #625	; 0x271
 801486e:	4630      	mov	r0, r6
 8014870:	f7ff ff3a 	bl	80146e8 <__i2b>
 8014874:	2300      	movs	r3, #0
 8014876:	f8c8 0008 	str.w	r0, [r8, #8]
 801487a:	4604      	mov	r4, r0
 801487c:	6003      	str	r3, [r0, #0]
 801487e:	f04f 0800 	mov.w	r8, #0
 8014882:	07eb      	lsls	r3, r5, #31
 8014884:	d50a      	bpl.n	801489c <__pow5mult+0x74>
 8014886:	4639      	mov	r1, r7
 8014888:	4622      	mov	r2, r4
 801488a:	4630      	mov	r0, r6
 801488c:	f7ff ff35 	bl	80146fa <__multiply>
 8014890:	4639      	mov	r1, r7
 8014892:	4681      	mov	r9, r0
 8014894:	4630      	mov	r0, r6
 8014896:	f7ff fe87 	bl	80145a8 <_Bfree>
 801489a:	464f      	mov	r7, r9
 801489c:	106d      	asrs	r5, r5, #1
 801489e:	d00b      	beq.n	80148b8 <__pow5mult+0x90>
 80148a0:	6820      	ldr	r0, [r4, #0]
 80148a2:	b938      	cbnz	r0, 80148b4 <__pow5mult+0x8c>
 80148a4:	4622      	mov	r2, r4
 80148a6:	4621      	mov	r1, r4
 80148a8:	4630      	mov	r0, r6
 80148aa:	f7ff ff26 	bl	80146fa <__multiply>
 80148ae:	6020      	str	r0, [r4, #0]
 80148b0:	f8c0 8000 	str.w	r8, [r0]
 80148b4:	4604      	mov	r4, r0
 80148b6:	e7e4      	b.n	8014882 <__pow5mult+0x5a>
 80148b8:	4638      	mov	r0, r7
 80148ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80148be:	bf00      	nop
 80148c0:	08018238 	.word	0x08018238

080148c4 <__lshift>:
 80148c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80148c8:	460c      	mov	r4, r1
 80148ca:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80148ce:	6923      	ldr	r3, [r4, #16]
 80148d0:	6849      	ldr	r1, [r1, #4]
 80148d2:	eb0a 0903 	add.w	r9, sl, r3
 80148d6:	68a3      	ldr	r3, [r4, #8]
 80148d8:	4607      	mov	r7, r0
 80148da:	4616      	mov	r6, r2
 80148dc:	f109 0501 	add.w	r5, r9, #1
 80148e0:	42ab      	cmp	r3, r5
 80148e2:	db32      	blt.n	801494a <__lshift+0x86>
 80148e4:	4638      	mov	r0, r7
 80148e6:	f7ff fe2b 	bl	8014540 <_Balloc>
 80148ea:	2300      	movs	r3, #0
 80148ec:	4680      	mov	r8, r0
 80148ee:	f100 0114 	add.w	r1, r0, #20
 80148f2:	461a      	mov	r2, r3
 80148f4:	4553      	cmp	r3, sl
 80148f6:	db2b      	blt.n	8014950 <__lshift+0x8c>
 80148f8:	6920      	ldr	r0, [r4, #16]
 80148fa:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80148fe:	f104 0314 	add.w	r3, r4, #20
 8014902:	f016 021f 	ands.w	r2, r6, #31
 8014906:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801490a:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 801490e:	d025      	beq.n	801495c <__lshift+0x98>
 8014910:	f1c2 0e20 	rsb	lr, r2, #32
 8014914:	2000      	movs	r0, #0
 8014916:	681e      	ldr	r6, [r3, #0]
 8014918:	468a      	mov	sl, r1
 801491a:	4096      	lsls	r6, r2
 801491c:	4330      	orrs	r0, r6
 801491e:	f84a 0b04 	str.w	r0, [sl], #4
 8014922:	f853 0b04 	ldr.w	r0, [r3], #4
 8014926:	459c      	cmp	ip, r3
 8014928:	fa20 f00e 	lsr.w	r0, r0, lr
 801492c:	d814      	bhi.n	8014958 <__lshift+0x94>
 801492e:	6048      	str	r0, [r1, #4]
 8014930:	b108      	cbz	r0, 8014936 <__lshift+0x72>
 8014932:	f109 0502 	add.w	r5, r9, #2
 8014936:	3d01      	subs	r5, #1
 8014938:	4638      	mov	r0, r7
 801493a:	f8c8 5010 	str.w	r5, [r8, #16]
 801493e:	4621      	mov	r1, r4
 8014940:	f7ff fe32 	bl	80145a8 <_Bfree>
 8014944:	4640      	mov	r0, r8
 8014946:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801494a:	3101      	adds	r1, #1
 801494c:	005b      	lsls	r3, r3, #1
 801494e:	e7c7      	b.n	80148e0 <__lshift+0x1c>
 8014950:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8014954:	3301      	adds	r3, #1
 8014956:	e7cd      	b.n	80148f4 <__lshift+0x30>
 8014958:	4651      	mov	r1, sl
 801495a:	e7dc      	b.n	8014916 <__lshift+0x52>
 801495c:	3904      	subs	r1, #4
 801495e:	f853 2b04 	ldr.w	r2, [r3], #4
 8014962:	f841 2f04 	str.w	r2, [r1, #4]!
 8014966:	459c      	cmp	ip, r3
 8014968:	d8f9      	bhi.n	801495e <__lshift+0x9a>
 801496a:	e7e4      	b.n	8014936 <__lshift+0x72>

0801496c <__mcmp>:
 801496c:	6903      	ldr	r3, [r0, #16]
 801496e:	690a      	ldr	r2, [r1, #16]
 8014970:	1a9b      	subs	r3, r3, r2
 8014972:	b530      	push	{r4, r5, lr}
 8014974:	d10c      	bne.n	8014990 <__mcmp+0x24>
 8014976:	0092      	lsls	r2, r2, #2
 8014978:	3014      	adds	r0, #20
 801497a:	3114      	adds	r1, #20
 801497c:	1884      	adds	r4, r0, r2
 801497e:	4411      	add	r1, r2
 8014980:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8014984:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8014988:	4295      	cmp	r5, r2
 801498a:	d003      	beq.n	8014994 <__mcmp+0x28>
 801498c:	d305      	bcc.n	801499a <__mcmp+0x2e>
 801498e:	2301      	movs	r3, #1
 8014990:	4618      	mov	r0, r3
 8014992:	bd30      	pop	{r4, r5, pc}
 8014994:	42a0      	cmp	r0, r4
 8014996:	d3f3      	bcc.n	8014980 <__mcmp+0x14>
 8014998:	e7fa      	b.n	8014990 <__mcmp+0x24>
 801499a:	f04f 33ff 	mov.w	r3, #4294967295
 801499e:	e7f7      	b.n	8014990 <__mcmp+0x24>

080149a0 <__mdiff>:
 80149a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80149a4:	460d      	mov	r5, r1
 80149a6:	4607      	mov	r7, r0
 80149a8:	4611      	mov	r1, r2
 80149aa:	4628      	mov	r0, r5
 80149ac:	4614      	mov	r4, r2
 80149ae:	f7ff ffdd 	bl	801496c <__mcmp>
 80149b2:	1e06      	subs	r6, r0, #0
 80149b4:	d108      	bne.n	80149c8 <__mdiff+0x28>
 80149b6:	4631      	mov	r1, r6
 80149b8:	4638      	mov	r0, r7
 80149ba:	f7ff fdc1 	bl	8014540 <_Balloc>
 80149be:	2301      	movs	r3, #1
 80149c0:	e9c0 3604 	strd	r3, r6, [r0, #16]
 80149c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80149c8:	bfa4      	itt	ge
 80149ca:	4623      	movge	r3, r4
 80149cc:	462c      	movge	r4, r5
 80149ce:	4638      	mov	r0, r7
 80149d0:	6861      	ldr	r1, [r4, #4]
 80149d2:	bfa6      	itte	ge
 80149d4:	461d      	movge	r5, r3
 80149d6:	2600      	movge	r6, #0
 80149d8:	2601      	movlt	r6, #1
 80149da:	f7ff fdb1 	bl	8014540 <_Balloc>
 80149de:	692b      	ldr	r3, [r5, #16]
 80149e0:	60c6      	str	r6, [r0, #12]
 80149e2:	6926      	ldr	r6, [r4, #16]
 80149e4:	f105 0914 	add.w	r9, r5, #20
 80149e8:	f104 0214 	add.w	r2, r4, #20
 80149ec:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 80149f0:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 80149f4:	f100 0514 	add.w	r5, r0, #20
 80149f8:	f04f 0e00 	mov.w	lr, #0
 80149fc:	f852 ab04 	ldr.w	sl, [r2], #4
 8014a00:	f859 4b04 	ldr.w	r4, [r9], #4
 8014a04:	fa1e f18a 	uxtah	r1, lr, sl
 8014a08:	b2a3      	uxth	r3, r4
 8014a0a:	1ac9      	subs	r1, r1, r3
 8014a0c:	0c23      	lsrs	r3, r4, #16
 8014a0e:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 8014a12:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8014a16:	b289      	uxth	r1, r1
 8014a18:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8014a1c:	45c8      	cmp	r8, r9
 8014a1e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8014a22:	4694      	mov	ip, r2
 8014a24:	f845 3b04 	str.w	r3, [r5], #4
 8014a28:	d8e8      	bhi.n	80149fc <__mdiff+0x5c>
 8014a2a:	45bc      	cmp	ip, r7
 8014a2c:	d304      	bcc.n	8014a38 <__mdiff+0x98>
 8014a2e:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8014a32:	b183      	cbz	r3, 8014a56 <__mdiff+0xb6>
 8014a34:	6106      	str	r6, [r0, #16]
 8014a36:	e7c5      	b.n	80149c4 <__mdiff+0x24>
 8014a38:	f85c 1b04 	ldr.w	r1, [ip], #4
 8014a3c:	fa1e f381 	uxtah	r3, lr, r1
 8014a40:	141a      	asrs	r2, r3, #16
 8014a42:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8014a46:	b29b      	uxth	r3, r3
 8014a48:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8014a4c:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8014a50:	f845 3b04 	str.w	r3, [r5], #4
 8014a54:	e7e9      	b.n	8014a2a <__mdiff+0x8a>
 8014a56:	3e01      	subs	r6, #1
 8014a58:	e7e9      	b.n	8014a2e <__mdiff+0x8e>

08014a5a <__d2b>:
 8014a5a:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8014a5e:	460e      	mov	r6, r1
 8014a60:	2101      	movs	r1, #1
 8014a62:	ec59 8b10 	vmov	r8, r9, d0
 8014a66:	4615      	mov	r5, r2
 8014a68:	f7ff fd6a 	bl	8014540 <_Balloc>
 8014a6c:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8014a70:	4607      	mov	r7, r0
 8014a72:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8014a76:	bb34      	cbnz	r4, 8014ac6 <__d2b+0x6c>
 8014a78:	9301      	str	r3, [sp, #4]
 8014a7a:	f1b8 0300 	subs.w	r3, r8, #0
 8014a7e:	d027      	beq.n	8014ad0 <__d2b+0x76>
 8014a80:	a802      	add	r0, sp, #8
 8014a82:	f840 3d08 	str.w	r3, [r0, #-8]!
 8014a86:	f7ff fe00 	bl	801468a <__lo0bits>
 8014a8a:	9900      	ldr	r1, [sp, #0]
 8014a8c:	b1f0      	cbz	r0, 8014acc <__d2b+0x72>
 8014a8e:	9a01      	ldr	r2, [sp, #4]
 8014a90:	f1c0 0320 	rsb	r3, r0, #32
 8014a94:	fa02 f303 	lsl.w	r3, r2, r3
 8014a98:	430b      	orrs	r3, r1
 8014a9a:	40c2      	lsrs	r2, r0
 8014a9c:	617b      	str	r3, [r7, #20]
 8014a9e:	9201      	str	r2, [sp, #4]
 8014aa0:	9b01      	ldr	r3, [sp, #4]
 8014aa2:	61bb      	str	r3, [r7, #24]
 8014aa4:	2b00      	cmp	r3, #0
 8014aa6:	bf14      	ite	ne
 8014aa8:	2102      	movne	r1, #2
 8014aaa:	2101      	moveq	r1, #1
 8014aac:	6139      	str	r1, [r7, #16]
 8014aae:	b1c4      	cbz	r4, 8014ae2 <__d2b+0x88>
 8014ab0:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8014ab4:	4404      	add	r4, r0
 8014ab6:	6034      	str	r4, [r6, #0]
 8014ab8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8014abc:	6028      	str	r0, [r5, #0]
 8014abe:	4638      	mov	r0, r7
 8014ac0:	b003      	add	sp, #12
 8014ac2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014ac6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8014aca:	e7d5      	b.n	8014a78 <__d2b+0x1e>
 8014acc:	6179      	str	r1, [r7, #20]
 8014ace:	e7e7      	b.n	8014aa0 <__d2b+0x46>
 8014ad0:	a801      	add	r0, sp, #4
 8014ad2:	f7ff fdda 	bl	801468a <__lo0bits>
 8014ad6:	9b01      	ldr	r3, [sp, #4]
 8014ad8:	617b      	str	r3, [r7, #20]
 8014ada:	2101      	movs	r1, #1
 8014adc:	6139      	str	r1, [r7, #16]
 8014ade:	3020      	adds	r0, #32
 8014ae0:	e7e5      	b.n	8014aae <__d2b+0x54>
 8014ae2:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8014ae6:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8014aea:	6030      	str	r0, [r6, #0]
 8014aec:	6918      	ldr	r0, [r3, #16]
 8014aee:	f7ff fdad 	bl	801464c <__hi0bits>
 8014af2:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8014af6:	e7e1      	b.n	8014abc <__d2b+0x62>

08014af8 <_calloc_r>:
 8014af8:	b538      	push	{r3, r4, r5, lr}
 8014afa:	fb02 f401 	mul.w	r4, r2, r1
 8014afe:	4621      	mov	r1, r4
 8014b00:	f000 f856 	bl	8014bb0 <_malloc_r>
 8014b04:	4605      	mov	r5, r0
 8014b06:	b118      	cbz	r0, 8014b10 <_calloc_r+0x18>
 8014b08:	4622      	mov	r2, r4
 8014b0a:	2100      	movs	r1, #0
 8014b0c:	f7fd ff07 	bl	801291e <memset>
 8014b10:	4628      	mov	r0, r5
 8014b12:	bd38      	pop	{r3, r4, r5, pc}

08014b14 <_free_r>:
 8014b14:	b538      	push	{r3, r4, r5, lr}
 8014b16:	4605      	mov	r5, r0
 8014b18:	2900      	cmp	r1, #0
 8014b1a:	d045      	beq.n	8014ba8 <_free_r+0x94>
 8014b1c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8014b20:	1f0c      	subs	r4, r1, #4
 8014b22:	2b00      	cmp	r3, #0
 8014b24:	bfb8      	it	lt
 8014b26:	18e4      	addlt	r4, r4, r3
 8014b28:	f000 fc03 	bl	8015332 <__malloc_lock>
 8014b2c:	4a1f      	ldr	r2, [pc, #124]	; (8014bac <_free_r+0x98>)
 8014b2e:	6813      	ldr	r3, [r2, #0]
 8014b30:	4610      	mov	r0, r2
 8014b32:	b933      	cbnz	r3, 8014b42 <_free_r+0x2e>
 8014b34:	6063      	str	r3, [r4, #4]
 8014b36:	6014      	str	r4, [r2, #0]
 8014b38:	4628      	mov	r0, r5
 8014b3a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8014b3e:	f000 bbf9 	b.w	8015334 <__malloc_unlock>
 8014b42:	42a3      	cmp	r3, r4
 8014b44:	d90c      	bls.n	8014b60 <_free_r+0x4c>
 8014b46:	6821      	ldr	r1, [r4, #0]
 8014b48:	1862      	adds	r2, r4, r1
 8014b4a:	4293      	cmp	r3, r2
 8014b4c:	bf04      	itt	eq
 8014b4e:	681a      	ldreq	r2, [r3, #0]
 8014b50:	685b      	ldreq	r3, [r3, #4]
 8014b52:	6063      	str	r3, [r4, #4]
 8014b54:	bf04      	itt	eq
 8014b56:	1852      	addeq	r2, r2, r1
 8014b58:	6022      	streq	r2, [r4, #0]
 8014b5a:	6004      	str	r4, [r0, #0]
 8014b5c:	e7ec      	b.n	8014b38 <_free_r+0x24>
 8014b5e:	4613      	mov	r3, r2
 8014b60:	685a      	ldr	r2, [r3, #4]
 8014b62:	b10a      	cbz	r2, 8014b68 <_free_r+0x54>
 8014b64:	42a2      	cmp	r2, r4
 8014b66:	d9fa      	bls.n	8014b5e <_free_r+0x4a>
 8014b68:	6819      	ldr	r1, [r3, #0]
 8014b6a:	1858      	adds	r0, r3, r1
 8014b6c:	42a0      	cmp	r0, r4
 8014b6e:	d10b      	bne.n	8014b88 <_free_r+0x74>
 8014b70:	6820      	ldr	r0, [r4, #0]
 8014b72:	4401      	add	r1, r0
 8014b74:	1858      	adds	r0, r3, r1
 8014b76:	4282      	cmp	r2, r0
 8014b78:	6019      	str	r1, [r3, #0]
 8014b7a:	d1dd      	bne.n	8014b38 <_free_r+0x24>
 8014b7c:	6810      	ldr	r0, [r2, #0]
 8014b7e:	6852      	ldr	r2, [r2, #4]
 8014b80:	605a      	str	r2, [r3, #4]
 8014b82:	4401      	add	r1, r0
 8014b84:	6019      	str	r1, [r3, #0]
 8014b86:	e7d7      	b.n	8014b38 <_free_r+0x24>
 8014b88:	d902      	bls.n	8014b90 <_free_r+0x7c>
 8014b8a:	230c      	movs	r3, #12
 8014b8c:	602b      	str	r3, [r5, #0]
 8014b8e:	e7d3      	b.n	8014b38 <_free_r+0x24>
 8014b90:	6820      	ldr	r0, [r4, #0]
 8014b92:	1821      	adds	r1, r4, r0
 8014b94:	428a      	cmp	r2, r1
 8014b96:	bf04      	itt	eq
 8014b98:	6811      	ldreq	r1, [r2, #0]
 8014b9a:	6852      	ldreq	r2, [r2, #4]
 8014b9c:	6062      	str	r2, [r4, #4]
 8014b9e:	bf04      	itt	eq
 8014ba0:	1809      	addeq	r1, r1, r0
 8014ba2:	6021      	streq	r1, [r4, #0]
 8014ba4:	605c      	str	r4, [r3, #4]
 8014ba6:	e7c7      	b.n	8014b38 <_free_r+0x24>
 8014ba8:	bd38      	pop	{r3, r4, r5, pc}
 8014baa:	bf00      	nop
 8014bac:	2000777c 	.word	0x2000777c

08014bb0 <_malloc_r>:
 8014bb0:	b570      	push	{r4, r5, r6, lr}
 8014bb2:	1ccd      	adds	r5, r1, #3
 8014bb4:	f025 0503 	bic.w	r5, r5, #3
 8014bb8:	3508      	adds	r5, #8
 8014bba:	2d0c      	cmp	r5, #12
 8014bbc:	bf38      	it	cc
 8014bbe:	250c      	movcc	r5, #12
 8014bc0:	2d00      	cmp	r5, #0
 8014bc2:	4606      	mov	r6, r0
 8014bc4:	db01      	blt.n	8014bca <_malloc_r+0x1a>
 8014bc6:	42a9      	cmp	r1, r5
 8014bc8:	d903      	bls.n	8014bd2 <_malloc_r+0x22>
 8014bca:	230c      	movs	r3, #12
 8014bcc:	6033      	str	r3, [r6, #0]
 8014bce:	2000      	movs	r0, #0
 8014bd0:	bd70      	pop	{r4, r5, r6, pc}
 8014bd2:	f000 fbae 	bl	8015332 <__malloc_lock>
 8014bd6:	4a21      	ldr	r2, [pc, #132]	; (8014c5c <_malloc_r+0xac>)
 8014bd8:	6814      	ldr	r4, [r2, #0]
 8014bda:	4621      	mov	r1, r4
 8014bdc:	b991      	cbnz	r1, 8014c04 <_malloc_r+0x54>
 8014bde:	4c20      	ldr	r4, [pc, #128]	; (8014c60 <_malloc_r+0xb0>)
 8014be0:	6823      	ldr	r3, [r4, #0]
 8014be2:	b91b      	cbnz	r3, 8014bec <_malloc_r+0x3c>
 8014be4:	4630      	mov	r0, r6
 8014be6:	f000 facf 	bl	8015188 <_sbrk_r>
 8014bea:	6020      	str	r0, [r4, #0]
 8014bec:	4629      	mov	r1, r5
 8014bee:	4630      	mov	r0, r6
 8014bf0:	f000 faca 	bl	8015188 <_sbrk_r>
 8014bf4:	1c43      	adds	r3, r0, #1
 8014bf6:	d124      	bne.n	8014c42 <_malloc_r+0x92>
 8014bf8:	230c      	movs	r3, #12
 8014bfa:	6033      	str	r3, [r6, #0]
 8014bfc:	4630      	mov	r0, r6
 8014bfe:	f000 fb99 	bl	8015334 <__malloc_unlock>
 8014c02:	e7e4      	b.n	8014bce <_malloc_r+0x1e>
 8014c04:	680b      	ldr	r3, [r1, #0]
 8014c06:	1b5b      	subs	r3, r3, r5
 8014c08:	d418      	bmi.n	8014c3c <_malloc_r+0x8c>
 8014c0a:	2b0b      	cmp	r3, #11
 8014c0c:	d90f      	bls.n	8014c2e <_malloc_r+0x7e>
 8014c0e:	600b      	str	r3, [r1, #0]
 8014c10:	50cd      	str	r5, [r1, r3]
 8014c12:	18cc      	adds	r4, r1, r3
 8014c14:	4630      	mov	r0, r6
 8014c16:	f000 fb8d 	bl	8015334 <__malloc_unlock>
 8014c1a:	f104 000b 	add.w	r0, r4, #11
 8014c1e:	1d23      	adds	r3, r4, #4
 8014c20:	f020 0007 	bic.w	r0, r0, #7
 8014c24:	1ac3      	subs	r3, r0, r3
 8014c26:	d0d3      	beq.n	8014bd0 <_malloc_r+0x20>
 8014c28:	425a      	negs	r2, r3
 8014c2a:	50e2      	str	r2, [r4, r3]
 8014c2c:	e7d0      	b.n	8014bd0 <_malloc_r+0x20>
 8014c2e:	428c      	cmp	r4, r1
 8014c30:	684b      	ldr	r3, [r1, #4]
 8014c32:	bf16      	itet	ne
 8014c34:	6063      	strne	r3, [r4, #4]
 8014c36:	6013      	streq	r3, [r2, #0]
 8014c38:	460c      	movne	r4, r1
 8014c3a:	e7eb      	b.n	8014c14 <_malloc_r+0x64>
 8014c3c:	460c      	mov	r4, r1
 8014c3e:	6849      	ldr	r1, [r1, #4]
 8014c40:	e7cc      	b.n	8014bdc <_malloc_r+0x2c>
 8014c42:	1cc4      	adds	r4, r0, #3
 8014c44:	f024 0403 	bic.w	r4, r4, #3
 8014c48:	42a0      	cmp	r0, r4
 8014c4a:	d005      	beq.n	8014c58 <_malloc_r+0xa8>
 8014c4c:	1a21      	subs	r1, r4, r0
 8014c4e:	4630      	mov	r0, r6
 8014c50:	f000 fa9a 	bl	8015188 <_sbrk_r>
 8014c54:	3001      	adds	r0, #1
 8014c56:	d0cf      	beq.n	8014bf8 <_malloc_r+0x48>
 8014c58:	6025      	str	r5, [r4, #0]
 8014c5a:	e7db      	b.n	8014c14 <_malloc_r+0x64>
 8014c5c:	2000777c 	.word	0x2000777c
 8014c60:	20007780 	.word	0x20007780

08014c64 <__ssputs_r>:
 8014c64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014c68:	688e      	ldr	r6, [r1, #8]
 8014c6a:	429e      	cmp	r6, r3
 8014c6c:	4682      	mov	sl, r0
 8014c6e:	460c      	mov	r4, r1
 8014c70:	4690      	mov	r8, r2
 8014c72:	4699      	mov	r9, r3
 8014c74:	d837      	bhi.n	8014ce6 <__ssputs_r+0x82>
 8014c76:	898a      	ldrh	r2, [r1, #12]
 8014c78:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8014c7c:	d031      	beq.n	8014ce2 <__ssputs_r+0x7e>
 8014c7e:	6825      	ldr	r5, [r4, #0]
 8014c80:	6909      	ldr	r1, [r1, #16]
 8014c82:	1a6f      	subs	r7, r5, r1
 8014c84:	6965      	ldr	r5, [r4, #20]
 8014c86:	2302      	movs	r3, #2
 8014c88:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8014c8c:	fb95 f5f3 	sdiv	r5, r5, r3
 8014c90:	f109 0301 	add.w	r3, r9, #1
 8014c94:	443b      	add	r3, r7
 8014c96:	429d      	cmp	r5, r3
 8014c98:	bf38      	it	cc
 8014c9a:	461d      	movcc	r5, r3
 8014c9c:	0553      	lsls	r3, r2, #21
 8014c9e:	d530      	bpl.n	8014d02 <__ssputs_r+0x9e>
 8014ca0:	4629      	mov	r1, r5
 8014ca2:	f7ff ff85 	bl	8014bb0 <_malloc_r>
 8014ca6:	4606      	mov	r6, r0
 8014ca8:	b950      	cbnz	r0, 8014cc0 <__ssputs_r+0x5c>
 8014caa:	230c      	movs	r3, #12
 8014cac:	f8ca 3000 	str.w	r3, [sl]
 8014cb0:	89a3      	ldrh	r3, [r4, #12]
 8014cb2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014cb6:	81a3      	strh	r3, [r4, #12]
 8014cb8:	f04f 30ff 	mov.w	r0, #4294967295
 8014cbc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014cc0:	463a      	mov	r2, r7
 8014cc2:	6921      	ldr	r1, [r4, #16]
 8014cc4:	f7fd fe20 	bl	8012908 <memcpy>
 8014cc8:	89a3      	ldrh	r3, [r4, #12]
 8014cca:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8014cce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8014cd2:	81a3      	strh	r3, [r4, #12]
 8014cd4:	6126      	str	r6, [r4, #16]
 8014cd6:	6165      	str	r5, [r4, #20]
 8014cd8:	443e      	add	r6, r7
 8014cda:	1bed      	subs	r5, r5, r7
 8014cdc:	6026      	str	r6, [r4, #0]
 8014cde:	60a5      	str	r5, [r4, #8]
 8014ce0:	464e      	mov	r6, r9
 8014ce2:	454e      	cmp	r6, r9
 8014ce4:	d900      	bls.n	8014ce8 <__ssputs_r+0x84>
 8014ce6:	464e      	mov	r6, r9
 8014ce8:	4632      	mov	r2, r6
 8014cea:	4641      	mov	r1, r8
 8014cec:	6820      	ldr	r0, [r4, #0]
 8014cee:	f000 fb07 	bl	8015300 <memmove>
 8014cf2:	68a3      	ldr	r3, [r4, #8]
 8014cf4:	1b9b      	subs	r3, r3, r6
 8014cf6:	60a3      	str	r3, [r4, #8]
 8014cf8:	6823      	ldr	r3, [r4, #0]
 8014cfa:	441e      	add	r6, r3
 8014cfc:	6026      	str	r6, [r4, #0]
 8014cfe:	2000      	movs	r0, #0
 8014d00:	e7dc      	b.n	8014cbc <__ssputs_r+0x58>
 8014d02:	462a      	mov	r2, r5
 8014d04:	f000 fb17 	bl	8015336 <_realloc_r>
 8014d08:	4606      	mov	r6, r0
 8014d0a:	2800      	cmp	r0, #0
 8014d0c:	d1e2      	bne.n	8014cd4 <__ssputs_r+0x70>
 8014d0e:	6921      	ldr	r1, [r4, #16]
 8014d10:	4650      	mov	r0, sl
 8014d12:	f7ff feff 	bl	8014b14 <_free_r>
 8014d16:	e7c8      	b.n	8014caa <__ssputs_r+0x46>

08014d18 <_svfiprintf_r>:
 8014d18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014d1c:	461d      	mov	r5, r3
 8014d1e:	898b      	ldrh	r3, [r1, #12]
 8014d20:	061f      	lsls	r7, r3, #24
 8014d22:	b09d      	sub	sp, #116	; 0x74
 8014d24:	4680      	mov	r8, r0
 8014d26:	460c      	mov	r4, r1
 8014d28:	4616      	mov	r6, r2
 8014d2a:	d50f      	bpl.n	8014d4c <_svfiprintf_r+0x34>
 8014d2c:	690b      	ldr	r3, [r1, #16]
 8014d2e:	b96b      	cbnz	r3, 8014d4c <_svfiprintf_r+0x34>
 8014d30:	2140      	movs	r1, #64	; 0x40
 8014d32:	f7ff ff3d 	bl	8014bb0 <_malloc_r>
 8014d36:	6020      	str	r0, [r4, #0]
 8014d38:	6120      	str	r0, [r4, #16]
 8014d3a:	b928      	cbnz	r0, 8014d48 <_svfiprintf_r+0x30>
 8014d3c:	230c      	movs	r3, #12
 8014d3e:	f8c8 3000 	str.w	r3, [r8]
 8014d42:	f04f 30ff 	mov.w	r0, #4294967295
 8014d46:	e0c8      	b.n	8014eda <_svfiprintf_r+0x1c2>
 8014d48:	2340      	movs	r3, #64	; 0x40
 8014d4a:	6163      	str	r3, [r4, #20]
 8014d4c:	2300      	movs	r3, #0
 8014d4e:	9309      	str	r3, [sp, #36]	; 0x24
 8014d50:	2320      	movs	r3, #32
 8014d52:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8014d56:	2330      	movs	r3, #48	; 0x30
 8014d58:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8014d5c:	9503      	str	r5, [sp, #12]
 8014d5e:	f04f 0b01 	mov.w	fp, #1
 8014d62:	4637      	mov	r7, r6
 8014d64:	463d      	mov	r5, r7
 8014d66:	f815 3b01 	ldrb.w	r3, [r5], #1
 8014d6a:	b10b      	cbz	r3, 8014d70 <_svfiprintf_r+0x58>
 8014d6c:	2b25      	cmp	r3, #37	; 0x25
 8014d6e:	d13e      	bne.n	8014dee <_svfiprintf_r+0xd6>
 8014d70:	ebb7 0a06 	subs.w	sl, r7, r6
 8014d74:	d00b      	beq.n	8014d8e <_svfiprintf_r+0x76>
 8014d76:	4653      	mov	r3, sl
 8014d78:	4632      	mov	r2, r6
 8014d7a:	4621      	mov	r1, r4
 8014d7c:	4640      	mov	r0, r8
 8014d7e:	f7ff ff71 	bl	8014c64 <__ssputs_r>
 8014d82:	3001      	adds	r0, #1
 8014d84:	f000 80a4 	beq.w	8014ed0 <_svfiprintf_r+0x1b8>
 8014d88:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014d8a:	4453      	add	r3, sl
 8014d8c:	9309      	str	r3, [sp, #36]	; 0x24
 8014d8e:	783b      	ldrb	r3, [r7, #0]
 8014d90:	2b00      	cmp	r3, #0
 8014d92:	f000 809d 	beq.w	8014ed0 <_svfiprintf_r+0x1b8>
 8014d96:	2300      	movs	r3, #0
 8014d98:	f04f 32ff 	mov.w	r2, #4294967295
 8014d9c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8014da0:	9304      	str	r3, [sp, #16]
 8014da2:	9307      	str	r3, [sp, #28]
 8014da4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8014da8:	931a      	str	r3, [sp, #104]	; 0x68
 8014daa:	462f      	mov	r7, r5
 8014dac:	2205      	movs	r2, #5
 8014dae:	f817 1b01 	ldrb.w	r1, [r7], #1
 8014db2:	4850      	ldr	r0, [pc, #320]	; (8014ef4 <_svfiprintf_r+0x1dc>)
 8014db4:	f7eb f9ec 	bl	8000190 <memchr>
 8014db8:	9b04      	ldr	r3, [sp, #16]
 8014dba:	b9d0      	cbnz	r0, 8014df2 <_svfiprintf_r+0xda>
 8014dbc:	06d9      	lsls	r1, r3, #27
 8014dbe:	bf44      	itt	mi
 8014dc0:	2220      	movmi	r2, #32
 8014dc2:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8014dc6:	071a      	lsls	r2, r3, #28
 8014dc8:	bf44      	itt	mi
 8014dca:	222b      	movmi	r2, #43	; 0x2b
 8014dcc:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8014dd0:	782a      	ldrb	r2, [r5, #0]
 8014dd2:	2a2a      	cmp	r2, #42	; 0x2a
 8014dd4:	d015      	beq.n	8014e02 <_svfiprintf_r+0xea>
 8014dd6:	9a07      	ldr	r2, [sp, #28]
 8014dd8:	462f      	mov	r7, r5
 8014dda:	2000      	movs	r0, #0
 8014ddc:	250a      	movs	r5, #10
 8014dde:	4639      	mov	r1, r7
 8014de0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8014de4:	3b30      	subs	r3, #48	; 0x30
 8014de6:	2b09      	cmp	r3, #9
 8014de8:	d94d      	bls.n	8014e86 <_svfiprintf_r+0x16e>
 8014dea:	b1b8      	cbz	r0, 8014e1c <_svfiprintf_r+0x104>
 8014dec:	e00f      	b.n	8014e0e <_svfiprintf_r+0xf6>
 8014dee:	462f      	mov	r7, r5
 8014df0:	e7b8      	b.n	8014d64 <_svfiprintf_r+0x4c>
 8014df2:	4a40      	ldr	r2, [pc, #256]	; (8014ef4 <_svfiprintf_r+0x1dc>)
 8014df4:	1a80      	subs	r0, r0, r2
 8014df6:	fa0b f000 	lsl.w	r0, fp, r0
 8014dfa:	4318      	orrs	r0, r3
 8014dfc:	9004      	str	r0, [sp, #16]
 8014dfe:	463d      	mov	r5, r7
 8014e00:	e7d3      	b.n	8014daa <_svfiprintf_r+0x92>
 8014e02:	9a03      	ldr	r2, [sp, #12]
 8014e04:	1d11      	adds	r1, r2, #4
 8014e06:	6812      	ldr	r2, [r2, #0]
 8014e08:	9103      	str	r1, [sp, #12]
 8014e0a:	2a00      	cmp	r2, #0
 8014e0c:	db01      	blt.n	8014e12 <_svfiprintf_r+0xfa>
 8014e0e:	9207      	str	r2, [sp, #28]
 8014e10:	e004      	b.n	8014e1c <_svfiprintf_r+0x104>
 8014e12:	4252      	negs	r2, r2
 8014e14:	f043 0302 	orr.w	r3, r3, #2
 8014e18:	9207      	str	r2, [sp, #28]
 8014e1a:	9304      	str	r3, [sp, #16]
 8014e1c:	783b      	ldrb	r3, [r7, #0]
 8014e1e:	2b2e      	cmp	r3, #46	; 0x2e
 8014e20:	d10c      	bne.n	8014e3c <_svfiprintf_r+0x124>
 8014e22:	787b      	ldrb	r3, [r7, #1]
 8014e24:	2b2a      	cmp	r3, #42	; 0x2a
 8014e26:	d133      	bne.n	8014e90 <_svfiprintf_r+0x178>
 8014e28:	9b03      	ldr	r3, [sp, #12]
 8014e2a:	1d1a      	adds	r2, r3, #4
 8014e2c:	681b      	ldr	r3, [r3, #0]
 8014e2e:	9203      	str	r2, [sp, #12]
 8014e30:	2b00      	cmp	r3, #0
 8014e32:	bfb8      	it	lt
 8014e34:	f04f 33ff 	movlt.w	r3, #4294967295
 8014e38:	3702      	adds	r7, #2
 8014e3a:	9305      	str	r3, [sp, #20]
 8014e3c:	4d2e      	ldr	r5, [pc, #184]	; (8014ef8 <_svfiprintf_r+0x1e0>)
 8014e3e:	7839      	ldrb	r1, [r7, #0]
 8014e40:	2203      	movs	r2, #3
 8014e42:	4628      	mov	r0, r5
 8014e44:	f7eb f9a4 	bl	8000190 <memchr>
 8014e48:	b138      	cbz	r0, 8014e5a <_svfiprintf_r+0x142>
 8014e4a:	2340      	movs	r3, #64	; 0x40
 8014e4c:	1b40      	subs	r0, r0, r5
 8014e4e:	fa03 f000 	lsl.w	r0, r3, r0
 8014e52:	9b04      	ldr	r3, [sp, #16]
 8014e54:	4303      	orrs	r3, r0
 8014e56:	3701      	adds	r7, #1
 8014e58:	9304      	str	r3, [sp, #16]
 8014e5a:	7839      	ldrb	r1, [r7, #0]
 8014e5c:	4827      	ldr	r0, [pc, #156]	; (8014efc <_svfiprintf_r+0x1e4>)
 8014e5e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8014e62:	2206      	movs	r2, #6
 8014e64:	1c7e      	adds	r6, r7, #1
 8014e66:	f7eb f993 	bl	8000190 <memchr>
 8014e6a:	2800      	cmp	r0, #0
 8014e6c:	d038      	beq.n	8014ee0 <_svfiprintf_r+0x1c8>
 8014e6e:	4b24      	ldr	r3, [pc, #144]	; (8014f00 <_svfiprintf_r+0x1e8>)
 8014e70:	bb13      	cbnz	r3, 8014eb8 <_svfiprintf_r+0x1a0>
 8014e72:	9b03      	ldr	r3, [sp, #12]
 8014e74:	3307      	adds	r3, #7
 8014e76:	f023 0307 	bic.w	r3, r3, #7
 8014e7a:	3308      	adds	r3, #8
 8014e7c:	9303      	str	r3, [sp, #12]
 8014e7e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014e80:	444b      	add	r3, r9
 8014e82:	9309      	str	r3, [sp, #36]	; 0x24
 8014e84:	e76d      	b.n	8014d62 <_svfiprintf_r+0x4a>
 8014e86:	fb05 3202 	mla	r2, r5, r2, r3
 8014e8a:	2001      	movs	r0, #1
 8014e8c:	460f      	mov	r7, r1
 8014e8e:	e7a6      	b.n	8014dde <_svfiprintf_r+0xc6>
 8014e90:	2300      	movs	r3, #0
 8014e92:	3701      	adds	r7, #1
 8014e94:	9305      	str	r3, [sp, #20]
 8014e96:	4619      	mov	r1, r3
 8014e98:	250a      	movs	r5, #10
 8014e9a:	4638      	mov	r0, r7
 8014e9c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8014ea0:	3a30      	subs	r2, #48	; 0x30
 8014ea2:	2a09      	cmp	r2, #9
 8014ea4:	d903      	bls.n	8014eae <_svfiprintf_r+0x196>
 8014ea6:	2b00      	cmp	r3, #0
 8014ea8:	d0c8      	beq.n	8014e3c <_svfiprintf_r+0x124>
 8014eaa:	9105      	str	r1, [sp, #20]
 8014eac:	e7c6      	b.n	8014e3c <_svfiprintf_r+0x124>
 8014eae:	fb05 2101 	mla	r1, r5, r1, r2
 8014eb2:	2301      	movs	r3, #1
 8014eb4:	4607      	mov	r7, r0
 8014eb6:	e7f0      	b.n	8014e9a <_svfiprintf_r+0x182>
 8014eb8:	ab03      	add	r3, sp, #12
 8014eba:	9300      	str	r3, [sp, #0]
 8014ebc:	4622      	mov	r2, r4
 8014ebe:	4b11      	ldr	r3, [pc, #68]	; (8014f04 <_svfiprintf_r+0x1ec>)
 8014ec0:	a904      	add	r1, sp, #16
 8014ec2:	4640      	mov	r0, r8
 8014ec4:	f7fd fdc8 	bl	8012a58 <_printf_float>
 8014ec8:	f1b0 3fff 	cmp.w	r0, #4294967295
 8014ecc:	4681      	mov	r9, r0
 8014ece:	d1d6      	bne.n	8014e7e <_svfiprintf_r+0x166>
 8014ed0:	89a3      	ldrh	r3, [r4, #12]
 8014ed2:	065b      	lsls	r3, r3, #25
 8014ed4:	f53f af35 	bmi.w	8014d42 <_svfiprintf_r+0x2a>
 8014ed8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8014eda:	b01d      	add	sp, #116	; 0x74
 8014edc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014ee0:	ab03      	add	r3, sp, #12
 8014ee2:	9300      	str	r3, [sp, #0]
 8014ee4:	4622      	mov	r2, r4
 8014ee6:	4b07      	ldr	r3, [pc, #28]	; (8014f04 <_svfiprintf_r+0x1ec>)
 8014ee8:	a904      	add	r1, sp, #16
 8014eea:	4640      	mov	r0, r8
 8014eec:	f7fe f86a 	bl	8012fc4 <_printf_i>
 8014ef0:	e7ea      	b.n	8014ec8 <_svfiprintf_r+0x1b0>
 8014ef2:	bf00      	nop
 8014ef4:	08018244 	.word	0x08018244
 8014ef8:	0801824a 	.word	0x0801824a
 8014efc:	0801824e 	.word	0x0801824e
 8014f00:	08012a59 	.word	0x08012a59
 8014f04:	08014c65 	.word	0x08014c65

08014f08 <__sfputc_r>:
 8014f08:	6893      	ldr	r3, [r2, #8]
 8014f0a:	3b01      	subs	r3, #1
 8014f0c:	2b00      	cmp	r3, #0
 8014f0e:	b410      	push	{r4}
 8014f10:	6093      	str	r3, [r2, #8]
 8014f12:	da08      	bge.n	8014f26 <__sfputc_r+0x1e>
 8014f14:	6994      	ldr	r4, [r2, #24]
 8014f16:	42a3      	cmp	r3, r4
 8014f18:	db01      	blt.n	8014f1e <__sfputc_r+0x16>
 8014f1a:	290a      	cmp	r1, #10
 8014f1c:	d103      	bne.n	8014f26 <__sfputc_r+0x1e>
 8014f1e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014f22:	f7fe ba13 	b.w	801334c <__swbuf_r>
 8014f26:	6813      	ldr	r3, [r2, #0]
 8014f28:	1c58      	adds	r0, r3, #1
 8014f2a:	6010      	str	r0, [r2, #0]
 8014f2c:	7019      	strb	r1, [r3, #0]
 8014f2e:	4608      	mov	r0, r1
 8014f30:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014f34:	4770      	bx	lr

08014f36 <__sfputs_r>:
 8014f36:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014f38:	4606      	mov	r6, r0
 8014f3a:	460f      	mov	r7, r1
 8014f3c:	4614      	mov	r4, r2
 8014f3e:	18d5      	adds	r5, r2, r3
 8014f40:	42ac      	cmp	r4, r5
 8014f42:	d101      	bne.n	8014f48 <__sfputs_r+0x12>
 8014f44:	2000      	movs	r0, #0
 8014f46:	e007      	b.n	8014f58 <__sfputs_r+0x22>
 8014f48:	463a      	mov	r2, r7
 8014f4a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014f4e:	4630      	mov	r0, r6
 8014f50:	f7ff ffda 	bl	8014f08 <__sfputc_r>
 8014f54:	1c43      	adds	r3, r0, #1
 8014f56:	d1f3      	bne.n	8014f40 <__sfputs_r+0xa>
 8014f58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08014f5c <_vfiprintf_r>:
 8014f5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014f60:	460c      	mov	r4, r1
 8014f62:	b09d      	sub	sp, #116	; 0x74
 8014f64:	4617      	mov	r7, r2
 8014f66:	461d      	mov	r5, r3
 8014f68:	4606      	mov	r6, r0
 8014f6a:	b118      	cbz	r0, 8014f74 <_vfiprintf_r+0x18>
 8014f6c:	6983      	ldr	r3, [r0, #24]
 8014f6e:	b90b      	cbnz	r3, 8014f74 <_vfiprintf_r+0x18>
 8014f70:	f7ff f9e2 	bl	8014338 <__sinit>
 8014f74:	4b7c      	ldr	r3, [pc, #496]	; (8015168 <_vfiprintf_r+0x20c>)
 8014f76:	429c      	cmp	r4, r3
 8014f78:	d158      	bne.n	801502c <_vfiprintf_r+0xd0>
 8014f7a:	6874      	ldr	r4, [r6, #4]
 8014f7c:	89a3      	ldrh	r3, [r4, #12]
 8014f7e:	0718      	lsls	r0, r3, #28
 8014f80:	d55e      	bpl.n	8015040 <_vfiprintf_r+0xe4>
 8014f82:	6923      	ldr	r3, [r4, #16]
 8014f84:	2b00      	cmp	r3, #0
 8014f86:	d05b      	beq.n	8015040 <_vfiprintf_r+0xe4>
 8014f88:	2300      	movs	r3, #0
 8014f8a:	9309      	str	r3, [sp, #36]	; 0x24
 8014f8c:	2320      	movs	r3, #32
 8014f8e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8014f92:	2330      	movs	r3, #48	; 0x30
 8014f94:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8014f98:	9503      	str	r5, [sp, #12]
 8014f9a:	f04f 0b01 	mov.w	fp, #1
 8014f9e:	46b8      	mov	r8, r7
 8014fa0:	4645      	mov	r5, r8
 8014fa2:	f815 3b01 	ldrb.w	r3, [r5], #1
 8014fa6:	b10b      	cbz	r3, 8014fac <_vfiprintf_r+0x50>
 8014fa8:	2b25      	cmp	r3, #37	; 0x25
 8014faa:	d154      	bne.n	8015056 <_vfiprintf_r+0xfa>
 8014fac:	ebb8 0a07 	subs.w	sl, r8, r7
 8014fb0:	d00b      	beq.n	8014fca <_vfiprintf_r+0x6e>
 8014fb2:	4653      	mov	r3, sl
 8014fb4:	463a      	mov	r2, r7
 8014fb6:	4621      	mov	r1, r4
 8014fb8:	4630      	mov	r0, r6
 8014fba:	f7ff ffbc 	bl	8014f36 <__sfputs_r>
 8014fbe:	3001      	adds	r0, #1
 8014fc0:	f000 80c2 	beq.w	8015148 <_vfiprintf_r+0x1ec>
 8014fc4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014fc6:	4453      	add	r3, sl
 8014fc8:	9309      	str	r3, [sp, #36]	; 0x24
 8014fca:	f898 3000 	ldrb.w	r3, [r8]
 8014fce:	2b00      	cmp	r3, #0
 8014fd0:	f000 80ba 	beq.w	8015148 <_vfiprintf_r+0x1ec>
 8014fd4:	2300      	movs	r3, #0
 8014fd6:	f04f 32ff 	mov.w	r2, #4294967295
 8014fda:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8014fde:	9304      	str	r3, [sp, #16]
 8014fe0:	9307      	str	r3, [sp, #28]
 8014fe2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8014fe6:	931a      	str	r3, [sp, #104]	; 0x68
 8014fe8:	46a8      	mov	r8, r5
 8014fea:	2205      	movs	r2, #5
 8014fec:	f818 1b01 	ldrb.w	r1, [r8], #1
 8014ff0:	485e      	ldr	r0, [pc, #376]	; (801516c <_vfiprintf_r+0x210>)
 8014ff2:	f7eb f8cd 	bl	8000190 <memchr>
 8014ff6:	9b04      	ldr	r3, [sp, #16]
 8014ff8:	bb78      	cbnz	r0, 801505a <_vfiprintf_r+0xfe>
 8014ffa:	06d9      	lsls	r1, r3, #27
 8014ffc:	bf44      	itt	mi
 8014ffe:	2220      	movmi	r2, #32
 8015000:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8015004:	071a      	lsls	r2, r3, #28
 8015006:	bf44      	itt	mi
 8015008:	222b      	movmi	r2, #43	; 0x2b
 801500a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 801500e:	782a      	ldrb	r2, [r5, #0]
 8015010:	2a2a      	cmp	r2, #42	; 0x2a
 8015012:	d02a      	beq.n	801506a <_vfiprintf_r+0x10e>
 8015014:	9a07      	ldr	r2, [sp, #28]
 8015016:	46a8      	mov	r8, r5
 8015018:	2000      	movs	r0, #0
 801501a:	250a      	movs	r5, #10
 801501c:	4641      	mov	r1, r8
 801501e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8015022:	3b30      	subs	r3, #48	; 0x30
 8015024:	2b09      	cmp	r3, #9
 8015026:	d969      	bls.n	80150fc <_vfiprintf_r+0x1a0>
 8015028:	b360      	cbz	r0, 8015084 <_vfiprintf_r+0x128>
 801502a:	e024      	b.n	8015076 <_vfiprintf_r+0x11a>
 801502c:	4b50      	ldr	r3, [pc, #320]	; (8015170 <_vfiprintf_r+0x214>)
 801502e:	429c      	cmp	r4, r3
 8015030:	d101      	bne.n	8015036 <_vfiprintf_r+0xda>
 8015032:	68b4      	ldr	r4, [r6, #8]
 8015034:	e7a2      	b.n	8014f7c <_vfiprintf_r+0x20>
 8015036:	4b4f      	ldr	r3, [pc, #316]	; (8015174 <_vfiprintf_r+0x218>)
 8015038:	429c      	cmp	r4, r3
 801503a:	bf08      	it	eq
 801503c:	68f4      	ldreq	r4, [r6, #12]
 801503e:	e79d      	b.n	8014f7c <_vfiprintf_r+0x20>
 8015040:	4621      	mov	r1, r4
 8015042:	4630      	mov	r0, r6
 8015044:	f7fe f9d4 	bl	80133f0 <__swsetup_r>
 8015048:	2800      	cmp	r0, #0
 801504a:	d09d      	beq.n	8014f88 <_vfiprintf_r+0x2c>
 801504c:	f04f 30ff 	mov.w	r0, #4294967295
 8015050:	b01d      	add	sp, #116	; 0x74
 8015052:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015056:	46a8      	mov	r8, r5
 8015058:	e7a2      	b.n	8014fa0 <_vfiprintf_r+0x44>
 801505a:	4a44      	ldr	r2, [pc, #272]	; (801516c <_vfiprintf_r+0x210>)
 801505c:	1a80      	subs	r0, r0, r2
 801505e:	fa0b f000 	lsl.w	r0, fp, r0
 8015062:	4318      	orrs	r0, r3
 8015064:	9004      	str	r0, [sp, #16]
 8015066:	4645      	mov	r5, r8
 8015068:	e7be      	b.n	8014fe8 <_vfiprintf_r+0x8c>
 801506a:	9a03      	ldr	r2, [sp, #12]
 801506c:	1d11      	adds	r1, r2, #4
 801506e:	6812      	ldr	r2, [r2, #0]
 8015070:	9103      	str	r1, [sp, #12]
 8015072:	2a00      	cmp	r2, #0
 8015074:	db01      	blt.n	801507a <_vfiprintf_r+0x11e>
 8015076:	9207      	str	r2, [sp, #28]
 8015078:	e004      	b.n	8015084 <_vfiprintf_r+0x128>
 801507a:	4252      	negs	r2, r2
 801507c:	f043 0302 	orr.w	r3, r3, #2
 8015080:	9207      	str	r2, [sp, #28]
 8015082:	9304      	str	r3, [sp, #16]
 8015084:	f898 3000 	ldrb.w	r3, [r8]
 8015088:	2b2e      	cmp	r3, #46	; 0x2e
 801508a:	d10e      	bne.n	80150aa <_vfiprintf_r+0x14e>
 801508c:	f898 3001 	ldrb.w	r3, [r8, #1]
 8015090:	2b2a      	cmp	r3, #42	; 0x2a
 8015092:	d138      	bne.n	8015106 <_vfiprintf_r+0x1aa>
 8015094:	9b03      	ldr	r3, [sp, #12]
 8015096:	1d1a      	adds	r2, r3, #4
 8015098:	681b      	ldr	r3, [r3, #0]
 801509a:	9203      	str	r2, [sp, #12]
 801509c:	2b00      	cmp	r3, #0
 801509e:	bfb8      	it	lt
 80150a0:	f04f 33ff 	movlt.w	r3, #4294967295
 80150a4:	f108 0802 	add.w	r8, r8, #2
 80150a8:	9305      	str	r3, [sp, #20]
 80150aa:	4d33      	ldr	r5, [pc, #204]	; (8015178 <_vfiprintf_r+0x21c>)
 80150ac:	f898 1000 	ldrb.w	r1, [r8]
 80150b0:	2203      	movs	r2, #3
 80150b2:	4628      	mov	r0, r5
 80150b4:	f7eb f86c 	bl	8000190 <memchr>
 80150b8:	b140      	cbz	r0, 80150cc <_vfiprintf_r+0x170>
 80150ba:	2340      	movs	r3, #64	; 0x40
 80150bc:	1b40      	subs	r0, r0, r5
 80150be:	fa03 f000 	lsl.w	r0, r3, r0
 80150c2:	9b04      	ldr	r3, [sp, #16]
 80150c4:	4303      	orrs	r3, r0
 80150c6:	f108 0801 	add.w	r8, r8, #1
 80150ca:	9304      	str	r3, [sp, #16]
 80150cc:	f898 1000 	ldrb.w	r1, [r8]
 80150d0:	482a      	ldr	r0, [pc, #168]	; (801517c <_vfiprintf_r+0x220>)
 80150d2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80150d6:	2206      	movs	r2, #6
 80150d8:	f108 0701 	add.w	r7, r8, #1
 80150dc:	f7eb f858 	bl	8000190 <memchr>
 80150e0:	2800      	cmp	r0, #0
 80150e2:	d037      	beq.n	8015154 <_vfiprintf_r+0x1f8>
 80150e4:	4b26      	ldr	r3, [pc, #152]	; (8015180 <_vfiprintf_r+0x224>)
 80150e6:	bb1b      	cbnz	r3, 8015130 <_vfiprintf_r+0x1d4>
 80150e8:	9b03      	ldr	r3, [sp, #12]
 80150ea:	3307      	adds	r3, #7
 80150ec:	f023 0307 	bic.w	r3, r3, #7
 80150f0:	3308      	adds	r3, #8
 80150f2:	9303      	str	r3, [sp, #12]
 80150f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80150f6:	444b      	add	r3, r9
 80150f8:	9309      	str	r3, [sp, #36]	; 0x24
 80150fa:	e750      	b.n	8014f9e <_vfiprintf_r+0x42>
 80150fc:	fb05 3202 	mla	r2, r5, r2, r3
 8015100:	2001      	movs	r0, #1
 8015102:	4688      	mov	r8, r1
 8015104:	e78a      	b.n	801501c <_vfiprintf_r+0xc0>
 8015106:	2300      	movs	r3, #0
 8015108:	f108 0801 	add.w	r8, r8, #1
 801510c:	9305      	str	r3, [sp, #20]
 801510e:	4619      	mov	r1, r3
 8015110:	250a      	movs	r5, #10
 8015112:	4640      	mov	r0, r8
 8015114:	f810 2b01 	ldrb.w	r2, [r0], #1
 8015118:	3a30      	subs	r2, #48	; 0x30
 801511a:	2a09      	cmp	r2, #9
 801511c:	d903      	bls.n	8015126 <_vfiprintf_r+0x1ca>
 801511e:	2b00      	cmp	r3, #0
 8015120:	d0c3      	beq.n	80150aa <_vfiprintf_r+0x14e>
 8015122:	9105      	str	r1, [sp, #20]
 8015124:	e7c1      	b.n	80150aa <_vfiprintf_r+0x14e>
 8015126:	fb05 2101 	mla	r1, r5, r1, r2
 801512a:	2301      	movs	r3, #1
 801512c:	4680      	mov	r8, r0
 801512e:	e7f0      	b.n	8015112 <_vfiprintf_r+0x1b6>
 8015130:	ab03      	add	r3, sp, #12
 8015132:	9300      	str	r3, [sp, #0]
 8015134:	4622      	mov	r2, r4
 8015136:	4b13      	ldr	r3, [pc, #76]	; (8015184 <_vfiprintf_r+0x228>)
 8015138:	a904      	add	r1, sp, #16
 801513a:	4630      	mov	r0, r6
 801513c:	f7fd fc8c 	bl	8012a58 <_printf_float>
 8015140:	f1b0 3fff 	cmp.w	r0, #4294967295
 8015144:	4681      	mov	r9, r0
 8015146:	d1d5      	bne.n	80150f4 <_vfiprintf_r+0x198>
 8015148:	89a3      	ldrh	r3, [r4, #12]
 801514a:	065b      	lsls	r3, r3, #25
 801514c:	f53f af7e 	bmi.w	801504c <_vfiprintf_r+0xf0>
 8015150:	9809      	ldr	r0, [sp, #36]	; 0x24
 8015152:	e77d      	b.n	8015050 <_vfiprintf_r+0xf4>
 8015154:	ab03      	add	r3, sp, #12
 8015156:	9300      	str	r3, [sp, #0]
 8015158:	4622      	mov	r2, r4
 801515a:	4b0a      	ldr	r3, [pc, #40]	; (8015184 <_vfiprintf_r+0x228>)
 801515c:	a904      	add	r1, sp, #16
 801515e:	4630      	mov	r0, r6
 8015160:	f7fd ff30 	bl	8012fc4 <_printf_i>
 8015164:	e7ec      	b.n	8015140 <_vfiprintf_r+0x1e4>
 8015166:	bf00      	nop
 8015168:	08018104 	.word	0x08018104
 801516c:	08018244 	.word	0x08018244
 8015170:	08018124 	.word	0x08018124
 8015174:	080180e4 	.word	0x080180e4
 8015178:	0801824a 	.word	0x0801824a
 801517c:	0801824e 	.word	0x0801824e
 8015180:	08012a59 	.word	0x08012a59
 8015184:	08014f37 	.word	0x08014f37

08015188 <_sbrk_r>:
 8015188:	b538      	push	{r3, r4, r5, lr}
 801518a:	4c06      	ldr	r4, [pc, #24]	; (80151a4 <_sbrk_r+0x1c>)
 801518c:	2300      	movs	r3, #0
 801518e:	4605      	mov	r5, r0
 8015190:	4608      	mov	r0, r1
 8015192:	6023      	str	r3, [r4, #0]
 8015194:	f7f0 fe0e 	bl	8005db4 <_sbrk>
 8015198:	1c43      	adds	r3, r0, #1
 801519a:	d102      	bne.n	80151a2 <_sbrk_r+0x1a>
 801519c:	6823      	ldr	r3, [r4, #0]
 801519e:	b103      	cbz	r3, 80151a2 <_sbrk_r+0x1a>
 80151a0:	602b      	str	r3, [r5, #0]
 80151a2:	bd38      	pop	{r3, r4, r5, pc}
 80151a4:	20007b04 	.word	0x20007b04

080151a8 <__sread>:
 80151a8:	b510      	push	{r4, lr}
 80151aa:	460c      	mov	r4, r1
 80151ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80151b0:	f000 f8e8 	bl	8015384 <_read_r>
 80151b4:	2800      	cmp	r0, #0
 80151b6:	bfab      	itete	ge
 80151b8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80151ba:	89a3      	ldrhlt	r3, [r4, #12]
 80151bc:	181b      	addge	r3, r3, r0
 80151be:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80151c2:	bfac      	ite	ge
 80151c4:	6563      	strge	r3, [r4, #84]	; 0x54
 80151c6:	81a3      	strhlt	r3, [r4, #12]
 80151c8:	bd10      	pop	{r4, pc}

080151ca <__swrite>:
 80151ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80151ce:	461f      	mov	r7, r3
 80151d0:	898b      	ldrh	r3, [r1, #12]
 80151d2:	05db      	lsls	r3, r3, #23
 80151d4:	4605      	mov	r5, r0
 80151d6:	460c      	mov	r4, r1
 80151d8:	4616      	mov	r6, r2
 80151da:	d505      	bpl.n	80151e8 <__swrite+0x1e>
 80151dc:	2302      	movs	r3, #2
 80151de:	2200      	movs	r2, #0
 80151e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80151e4:	f000 f868 	bl	80152b8 <_lseek_r>
 80151e8:	89a3      	ldrh	r3, [r4, #12]
 80151ea:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80151ee:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80151f2:	81a3      	strh	r3, [r4, #12]
 80151f4:	4632      	mov	r2, r6
 80151f6:	463b      	mov	r3, r7
 80151f8:	4628      	mov	r0, r5
 80151fa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80151fe:	f000 b817 	b.w	8015230 <_write_r>

08015202 <__sseek>:
 8015202:	b510      	push	{r4, lr}
 8015204:	460c      	mov	r4, r1
 8015206:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801520a:	f000 f855 	bl	80152b8 <_lseek_r>
 801520e:	1c43      	adds	r3, r0, #1
 8015210:	89a3      	ldrh	r3, [r4, #12]
 8015212:	bf15      	itete	ne
 8015214:	6560      	strne	r0, [r4, #84]	; 0x54
 8015216:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801521a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801521e:	81a3      	strheq	r3, [r4, #12]
 8015220:	bf18      	it	ne
 8015222:	81a3      	strhne	r3, [r4, #12]
 8015224:	bd10      	pop	{r4, pc}

08015226 <__sclose>:
 8015226:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801522a:	f000 b813 	b.w	8015254 <_close_r>
	...

08015230 <_write_r>:
 8015230:	b538      	push	{r3, r4, r5, lr}
 8015232:	4c07      	ldr	r4, [pc, #28]	; (8015250 <_write_r+0x20>)
 8015234:	4605      	mov	r5, r0
 8015236:	4608      	mov	r0, r1
 8015238:	4611      	mov	r1, r2
 801523a:	2200      	movs	r2, #0
 801523c:	6022      	str	r2, [r4, #0]
 801523e:	461a      	mov	r2, r3
 8015240:	f7f8 fbd8 	bl	800d9f4 <_write>
 8015244:	1c43      	adds	r3, r0, #1
 8015246:	d102      	bne.n	801524e <_write_r+0x1e>
 8015248:	6823      	ldr	r3, [r4, #0]
 801524a:	b103      	cbz	r3, 801524e <_write_r+0x1e>
 801524c:	602b      	str	r3, [r5, #0]
 801524e:	bd38      	pop	{r3, r4, r5, pc}
 8015250:	20007b04 	.word	0x20007b04

08015254 <_close_r>:
 8015254:	b538      	push	{r3, r4, r5, lr}
 8015256:	4c06      	ldr	r4, [pc, #24]	; (8015270 <_close_r+0x1c>)
 8015258:	2300      	movs	r3, #0
 801525a:	4605      	mov	r5, r0
 801525c:	4608      	mov	r0, r1
 801525e:	6023      	str	r3, [r4, #0]
 8015260:	f7f0 fd73 	bl	8005d4a <_close>
 8015264:	1c43      	adds	r3, r0, #1
 8015266:	d102      	bne.n	801526e <_close_r+0x1a>
 8015268:	6823      	ldr	r3, [r4, #0]
 801526a:	b103      	cbz	r3, 801526e <_close_r+0x1a>
 801526c:	602b      	str	r3, [r5, #0]
 801526e:	bd38      	pop	{r3, r4, r5, pc}
 8015270:	20007b04 	.word	0x20007b04

08015274 <_fstat_r>:
 8015274:	b538      	push	{r3, r4, r5, lr}
 8015276:	4c07      	ldr	r4, [pc, #28]	; (8015294 <_fstat_r+0x20>)
 8015278:	2300      	movs	r3, #0
 801527a:	4605      	mov	r5, r0
 801527c:	4608      	mov	r0, r1
 801527e:	4611      	mov	r1, r2
 8015280:	6023      	str	r3, [r4, #0]
 8015282:	f7f0 fd6e 	bl	8005d62 <_fstat>
 8015286:	1c43      	adds	r3, r0, #1
 8015288:	d102      	bne.n	8015290 <_fstat_r+0x1c>
 801528a:	6823      	ldr	r3, [r4, #0]
 801528c:	b103      	cbz	r3, 8015290 <_fstat_r+0x1c>
 801528e:	602b      	str	r3, [r5, #0]
 8015290:	bd38      	pop	{r3, r4, r5, pc}
 8015292:	bf00      	nop
 8015294:	20007b04 	.word	0x20007b04

08015298 <_isatty_r>:
 8015298:	b538      	push	{r3, r4, r5, lr}
 801529a:	4c06      	ldr	r4, [pc, #24]	; (80152b4 <_isatty_r+0x1c>)
 801529c:	2300      	movs	r3, #0
 801529e:	4605      	mov	r5, r0
 80152a0:	4608      	mov	r0, r1
 80152a2:	6023      	str	r3, [r4, #0]
 80152a4:	f7f0 fd6d 	bl	8005d82 <_isatty>
 80152a8:	1c43      	adds	r3, r0, #1
 80152aa:	d102      	bne.n	80152b2 <_isatty_r+0x1a>
 80152ac:	6823      	ldr	r3, [r4, #0]
 80152ae:	b103      	cbz	r3, 80152b2 <_isatty_r+0x1a>
 80152b0:	602b      	str	r3, [r5, #0]
 80152b2:	bd38      	pop	{r3, r4, r5, pc}
 80152b4:	20007b04 	.word	0x20007b04

080152b8 <_lseek_r>:
 80152b8:	b538      	push	{r3, r4, r5, lr}
 80152ba:	4c07      	ldr	r4, [pc, #28]	; (80152d8 <_lseek_r+0x20>)
 80152bc:	4605      	mov	r5, r0
 80152be:	4608      	mov	r0, r1
 80152c0:	4611      	mov	r1, r2
 80152c2:	2200      	movs	r2, #0
 80152c4:	6022      	str	r2, [r4, #0]
 80152c6:	461a      	mov	r2, r3
 80152c8:	f7f0 fd66 	bl	8005d98 <_lseek>
 80152cc:	1c43      	adds	r3, r0, #1
 80152ce:	d102      	bne.n	80152d6 <_lseek_r+0x1e>
 80152d0:	6823      	ldr	r3, [r4, #0]
 80152d2:	b103      	cbz	r3, 80152d6 <_lseek_r+0x1e>
 80152d4:	602b      	str	r3, [r5, #0]
 80152d6:	bd38      	pop	{r3, r4, r5, pc}
 80152d8:	20007b04 	.word	0x20007b04

080152dc <__ascii_mbtowc>:
 80152dc:	b082      	sub	sp, #8
 80152de:	b901      	cbnz	r1, 80152e2 <__ascii_mbtowc+0x6>
 80152e0:	a901      	add	r1, sp, #4
 80152e2:	b142      	cbz	r2, 80152f6 <__ascii_mbtowc+0x1a>
 80152e4:	b14b      	cbz	r3, 80152fa <__ascii_mbtowc+0x1e>
 80152e6:	7813      	ldrb	r3, [r2, #0]
 80152e8:	600b      	str	r3, [r1, #0]
 80152ea:	7812      	ldrb	r2, [r2, #0]
 80152ec:	1c10      	adds	r0, r2, #0
 80152ee:	bf18      	it	ne
 80152f0:	2001      	movne	r0, #1
 80152f2:	b002      	add	sp, #8
 80152f4:	4770      	bx	lr
 80152f6:	4610      	mov	r0, r2
 80152f8:	e7fb      	b.n	80152f2 <__ascii_mbtowc+0x16>
 80152fa:	f06f 0001 	mvn.w	r0, #1
 80152fe:	e7f8      	b.n	80152f2 <__ascii_mbtowc+0x16>

08015300 <memmove>:
 8015300:	4288      	cmp	r0, r1
 8015302:	b510      	push	{r4, lr}
 8015304:	eb01 0302 	add.w	r3, r1, r2
 8015308:	d807      	bhi.n	801531a <memmove+0x1a>
 801530a:	1e42      	subs	r2, r0, #1
 801530c:	4299      	cmp	r1, r3
 801530e:	d00a      	beq.n	8015326 <memmove+0x26>
 8015310:	f811 4b01 	ldrb.w	r4, [r1], #1
 8015314:	f802 4f01 	strb.w	r4, [r2, #1]!
 8015318:	e7f8      	b.n	801530c <memmove+0xc>
 801531a:	4283      	cmp	r3, r0
 801531c:	d9f5      	bls.n	801530a <memmove+0xa>
 801531e:	1881      	adds	r1, r0, r2
 8015320:	1ad2      	subs	r2, r2, r3
 8015322:	42d3      	cmn	r3, r2
 8015324:	d100      	bne.n	8015328 <memmove+0x28>
 8015326:	bd10      	pop	{r4, pc}
 8015328:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801532c:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8015330:	e7f7      	b.n	8015322 <memmove+0x22>

08015332 <__malloc_lock>:
 8015332:	4770      	bx	lr

08015334 <__malloc_unlock>:
 8015334:	4770      	bx	lr

08015336 <_realloc_r>:
 8015336:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015338:	4607      	mov	r7, r0
 801533a:	4614      	mov	r4, r2
 801533c:	460e      	mov	r6, r1
 801533e:	b921      	cbnz	r1, 801534a <_realloc_r+0x14>
 8015340:	4611      	mov	r1, r2
 8015342:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8015346:	f7ff bc33 	b.w	8014bb0 <_malloc_r>
 801534a:	b922      	cbnz	r2, 8015356 <_realloc_r+0x20>
 801534c:	f7ff fbe2 	bl	8014b14 <_free_r>
 8015350:	4625      	mov	r5, r4
 8015352:	4628      	mov	r0, r5
 8015354:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015356:	f000 f834 	bl	80153c2 <_malloc_usable_size_r>
 801535a:	42a0      	cmp	r0, r4
 801535c:	d20f      	bcs.n	801537e <_realloc_r+0x48>
 801535e:	4621      	mov	r1, r4
 8015360:	4638      	mov	r0, r7
 8015362:	f7ff fc25 	bl	8014bb0 <_malloc_r>
 8015366:	4605      	mov	r5, r0
 8015368:	2800      	cmp	r0, #0
 801536a:	d0f2      	beq.n	8015352 <_realloc_r+0x1c>
 801536c:	4631      	mov	r1, r6
 801536e:	4622      	mov	r2, r4
 8015370:	f7fd faca 	bl	8012908 <memcpy>
 8015374:	4631      	mov	r1, r6
 8015376:	4638      	mov	r0, r7
 8015378:	f7ff fbcc 	bl	8014b14 <_free_r>
 801537c:	e7e9      	b.n	8015352 <_realloc_r+0x1c>
 801537e:	4635      	mov	r5, r6
 8015380:	e7e7      	b.n	8015352 <_realloc_r+0x1c>
	...

08015384 <_read_r>:
 8015384:	b538      	push	{r3, r4, r5, lr}
 8015386:	4c07      	ldr	r4, [pc, #28]	; (80153a4 <_read_r+0x20>)
 8015388:	4605      	mov	r5, r0
 801538a:	4608      	mov	r0, r1
 801538c:	4611      	mov	r1, r2
 801538e:	2200      	movs	r2, #0
 8015390:	6022      	str	r2, [r4, #0]
 8015392:	461a      	mov	r2, r3
 8015394:	f7f0 fcbc 	bl	8005d10 <_read>
 8015398:	1c43      	adds	r3, r0, #1
 801539a:	d102      	bne.n	80153a2 <_read_r+0x1e>
 801539c:	6823      	ldr	r3, [r4, #0]
 801539e:	b103      	cbz	r3, 80153a2 <_read_r+0x1e>
 80153a0:	602b      	str	r3, [r5, #0]
 80153a2:	bd38      	pop	{r3, r4, r5, pc}
 80153a4:	20007b04 	.word	0x20007b04

080153a8 <__ascii_wctomb>:
 80153a8:	b149      	cbz	r1, 80153be <__ascii_wctomb+0x16>
 80153aa:	2aff      	cmp	r2, #255	; 0xff
 80153ac:	bf85      	ittet	hi
 80153ae:	238a      	movhi	r3, #138	; 0x8a
 80153b0:	6003      	strhi	r3, [r0, #0]
 80153b2:	700a      	strbls	r2, [r1, #0]
 80153b4:	f04f 30ff 	movhi.w	r0, #4294967295
 80153b8:	bf98      	it	ls
 80153ba:	2001      	movls	r0, #1
 80153bc:	4770      	bx	lr
 80153be:	4608      	mov	r0, r1
 80153c0:	4770      	bx	lr

080153c2 <_malloc_usable_size_r>:
 80153c2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80153c6:	1f18      	subs	r0, r3, #4
 80153c8:	2b00      	cmp	r3, #0
 80153ca:	bfbc      	itt	lt
 80153cc:	580b      	ldrlt	r3, [r1, r0]
 80153ce:	18c0      	addlt	r0, r0, r3
 80153d0:	4770      	bx	lr
	...

080153d4 <round>:
 80153d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80153d6:	ec57 6b10 	vmov	r6, r7, d0
 80153da:	f3c7 500a 	ubfx	r0, r7, #20, #11
 80153de:	f2a0 34ff 	subw	r4, r0, #1023	; 0x3ff
 80153e2:	2c13      	cmp	r4, #19
 80153e4:	463b      	mov	r3, r7
 80153e6:	463d      	mov	r5, r7
 80153e8:	dc17      	bgt.n	801541a <round+0x46>
 80153ea:	2c00      	cmp	r4, #0
 80153ec:	da09      	bge.n	8015402 <round+0x2e>
 80153ee:	3401      	adds	r4, #1
 80153f0:	f007 4300 	and.w	r3, r7, #2147483648	; 0x80000000
 80153f4:	d103      	bne.n	80153fe <round+0x2a>
 80153f6:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 80153fa:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80153fe:	2100      	movs	r1, #0
 8015400:	e02c      	b.n	801545c <round+0x88>
 8015402:	4a18      	ldr	r2, [pc, #96]	; (8015464 <round+0x90>)
 8015404:	4122      	asrs	r2, r4
 8015406:	4217      	tst	r7, r2
 8015408:	d100      	bne.n	801540c <round+0x38>
 801540a:	b19e      	cbz	r6, 8015434 <round+0x60>
 801540c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8015410:	4123      	asrs	r3, r4
 8015412:	442b      	add	r3, r5
 8015414:	ea23 0302 	bic.w	r3, r3, r2
 8015418:	e7f1      	b.n	80153fe <round+0x2a>
 801541a:	2c33      	cmp	r4, #51	; 0x33
 801541c:	dd0d      	ble.n	801543a <round+0x66>
 801541e:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 8015422:	d107      	bne.n	8015434 <round+0x60>
 8015424:	4630      	mov	r0, r6
 8015426:	4639      	mov	r1, r7
 8015428:	ee10 2a10 	vmov	r2, s0
 801542c:	f7ea ff06 	bl	800023c <__adddf3>
 8015430:	4606      	mov	r6, r0
 8015432:	460f      	mov	r7, r1
 8015434:	ec47 6b10 	vmov	d0, r6, r7
 8015438:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801543a:	f2a0 4213 	subw	r2, r0, #1043	; 0x413
 801543e:	f04f 30ff 	mov.w	r0, #4294967295
 8015442:	40d0      	lsrs	r0, r2
 8015444:	4206      	tst	r6, r0
 8015446:	d0f5      	beq.n	8015434 <round+0x60>
 8015448:	2201      	movs	r2, #1
 801544a:	f1c4 0433 	rsb	r4, r4, #51	; 0x33
 801544e:	fa02 f404 	lsl.w	r4, r2, r4
 8015452:	1931      	adds	r1, r6, r4
 8015454:	bf28      	it	cs
 8015456:	189b      	addcs	r3, r3, r2
 8015458:	ea21 0100 	bic.w	r1, r1, r0
 801545c:	461f      	mov	r7, r3
 801545e:	460e      	mov	r6, r1
 8015460:	e7e8      	b.n	8015434 <round+0x60>
 8015462:	bf00      	nop
 8015464:	000fffff 	.word	0x000fffff

08015468 <pow>:
 8015468:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801546c:	ed2d 8b04 	vpush	{d8-d9}
 8015470:	f8df 92d0 	ldr.w	r9, [pc, #720]	; 8015744 <pow+0x2dc>
 8015474:	b08d      	sub	sp, #52	; 0x34
 8015476:	ec57 6b10 	vmov	r6, r7, d0
 801547a:	ec55 4b11 	vmov	r4, r5, d1
 801547e:	f000 f963 	bl	8015748 <__ieee754_pow>
 8015482:	f999 3000 	ldrsb.w	r3, [r9]
 8015486:	9300      	str	r3, [sp, #0]
 8015488:	3301      	adds	r3, #1
 801548a:	eeb0 8a40 	vmov.f32	s16, s0
 801548e:	eef0 8a60 	vmov.f32	s17, s1
 8015492:	46c8      	mov	r8, r9
 8015494:	d05f      	beq.n	8015556 <pow+0xee>
 8015496:	4622      	mov	r2, r4
 8015498:	462b      	mov	r3, r5
 801549a:	4620      	mov	r0, r4
 801549c:	4629      	mov	r1, r5
 801549e:	f7eb fb1d 	bl	8000adc <__aeabi_dcmpun>
 80154a2:	4683      	mov	fp, r0
 80154a4:	2800      	cmp	r0, #0
 80154a6:	d156      	bne.n	8015556 <pow+0xee>
 80154a8:	4632      	mov	r2, r6
 80154aa:	463b      	mov	r3, r7
 80154ac:	4630      	mov	r0, r6
 80154ae:	4639      	mov	r1, r7
 80154b0:	f7eb fb14 	bl	8000adc <__aeabi_dcmpun>
 80154b4:	9001      	str	r0, [sp, #4]
 80154b6:	b1e8      	cbz	r0, 80154f4 <pow+0x8c>
 80154b8:	2200      	movs	r2, #0
 80154ba:	2300      	movs	r3, #0
 80154bc:	4620      	mov	r0, r4
 80154be:	4629      	mov	r1, r5
 80154c0:	f7eb fada 	bl	8000a78 <__aeabi_dcmpeq>
 80154c4:	2800      	cmp	r0, #0
 80154c6:	d046      	beq.n	8015556 <pow+0xee>
 80154c8:	2301      	movs	r3, #1
 80154ca:	9302      	str	r3, [sp, #8]
 80154cc:	4b96      	ldr	r3, [pc, #600]	; (8015728 <pow+0x2c0>)
 80154ce:	9303      	str	r3, [sp, #12]
 80154d0:	4b96      	ldr	r3, [pc, #600]	; (801572c <pow+0x2c4>)
 80154d2:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 80154d6:	2200      	movs	r2, #0
 80154d8:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80154dc:	9b00      	ldr	r3, [sp, #0]
 80154de:	2b02      	cmp	r3, #2
 80154e0:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80154e4:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80154e8:	d033      	beq.n	8015552 <pow+0xea>
 80154ea:	a802      	add	r0, sp, #8
 80154ec:	f000 fefb 	bl	80162e6 <matherr>
 80154f0:	bb48      	cbnz	r0, 8015546 <pow+0xde>
 80154f2:	e05d      	b.n	80155b0 <pow+0x148>
 80154f4:	f04f 0a00 	mov.w	sl, #0
 80154f8:	f04f 0b00 	mov.w	fp, #0
 80154fc:	4652      	mov	r2, sl
 80154fe:	465b      	mov	r3, fp
 8015500:	4630      	mov	r0, r6
 8015502:	4639      	mov	r1, r7
 8015504:	f7eb fab8 	bl	8000a78 <__aeabi_dcmpeq>
 8015508:	ec4b ab19 	vmov	d9, sl, fp
 801550c:	2800      	cmp	r0, #0
 801550e:	d054      	beq.n	80155ba <pow+0x152>
 8015510:	4652      	mov	r2, sl
 8015512:	465b      	mov	r3, fp
 8015514:	4620      	mov	r0, r4
 8015516:	4629      	mov	r1, r5
 8015518:	f7eb faae 	bl	8000a78 <__aeabi_dcmpeq>
 801551c:	4680      	mov	r8, r0
 801551e:	b318      	cbz	r0, 8015568 <pow+0x100>
 8015520:	2301      	movs	r3, #1
 8015522:	9302      	str	r3, [sp, #8]
 8015524:	4b80      	ldr	r3, [pc, #512]	; (8015728 <pow+0x2c0>)
 8015526:	9303      	str	r3, [sp, #12]
 8015528:	9b01      	ldr	r3, [sp, #4]
 801552a:	930a      	str	r3, [sp, #40]	; 0x28
 801552c:	9b00      	ldr	r3, [sp, #0]
 801552e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8015532:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8015536:	e9cd ab08 	strd	sl, fp, [sp, #32]
 801553a:	2b00      	cmp	r3, #0
 801553c:	d0d5      	beq.n	80154ea <pow+0x82>
 801553e:	4b7b      	ldr	r3, [pc, #492]	; (801572c <pow+0x2c4>)
 8015540:	2200      	movs	r2, #0
 8015542:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8015546:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015548:	b11b      	cbz	r3, 8015552 <pow+0xea>
 801554a:	f7fd f9b3 	bl	80128b4 <__errno>
 801554e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015550:	6003      	str	r3, [r0, #0]
 8015552:	ed9d 8b08 	vldr	d8, [sp, #32]
 8015556:	eeb0 0a48 	vmov.f32	s0, s16
 801555a:	eef0 0a68 	vmov.f32	s1, s17
 801555e:	b00d      	add	sp, #52	; 0x34
 8015560:	ecbd 8b04 	vpop	{d8-d9}
 8015564:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015568:	ec45 4b10 	vmov	d0, r4, r5
 801556c:	f000 feb3 	bl	80162d6 <finite>
 8015570:	2800      	cmp	r0, #0
 8015572:	d0f0      	beq.n	8015556 <pow+0xee>
 8015574:	4652      	mov	r2, sl
 8015576:	465b      	mov	r3, fp
 8015578:	4620      	mov	r0, r4
 801557a:	4629      	mov	r1, r5
 801557c:	f7eb fa86 	bl	8000a8c <__aeabi_dcmplt>
 8015580:	2800      	cmp	r0, #0
 8015582:	d0e8      	beq.n	8015556 <pow+0xee>
 8015584:	2301      	movs	r3, #1
 8015586:	9302      	str	r3, [sp, #8]
 8015588:	4b67      	ldr	r3, [pc, #412]	; (8015728 <pow+0x2c0>)
 801558a:	9303      	str	r3, [sp, #12]
 801558c:	f999 3000 	ldrsb.w	r3, [r9]
 8015590:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 8015594:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8015598:	e9cd 4506 	strd	r4, r5, [sp, #24]
 801559c:	b913      	cbnz	r3, 80155a4 <pow+0x13c>
 801559e:	e9cd ab08 	strd	sl, fp, [sp, #32]
 80155a2:	e7a2      	b.n	80154ea <pow+0x82>
 80155a4:	4962      	ldr	r1, [pc, #392]	; (8015730 <pow+0x2c8>)
 80155a6:	2000      	movs	r0, #0
 80155a8:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80155ac:	2b02      	cmp	r3, #2
 80155ae:	d19c      	bne.n	80154ea <pow+0x82>
 80155b0:	f7fd f980 	bl	80128b4 <__errno>
 80155b4:	2321      	movs	r3, #33	; 0x21
 80155b6:	6003      	str	r3, [r0, #0]
 80155b8:	e7c5      	b.n	8015546 <pow+0xde>
 80155ba:	eeb0 0a48 	vmov.f32	s0, s16
 80155be:	eef0 0a68 	vmov.f32	s1, s17
 80155c2:	f000 fe88 	bl	80162d6 <finite>
 80155c6:	9000      	str	r0, [sp, #0]
 80155c8:	2800      	cmp	r0, #0
 80155ca:	f040 8081 	bne.w	80156d0 <pow+0x268>
 80155ce:	ec47 6b10 	vmov	d0, r6, r7
 80155d2:	f000 fe80 	bl	80162d6 <finite>
 80155d6:	2800      	cmp	r0, #0
 80155d8:	d07a      	beq.n	80156d0 <pow+0x268>
 80155da:	ec45 4b10 	vmov	d0, r4, r5
 80155de:	f000 fe7a 	bl	80162d6 <finite>
 80155e2:	2800      	cmp	r0, #0
 80155e4:	d074      	beq.n	80156d0 <pow+0x268>
 80155e6:	ec53 2b18 	vmov	r2, r3, d8
 80155ea:	ee18 0a10 	vmov	r0, s16
 80155ee:	4619      	mov	r1, r3
 80155f0:	f7eb fa74 	bl	8000adc <__aeabi_dcmpun>
 80155f4:	f999 9000 	ldrsb.w	r9, [r9]
 80155f8:	4b4b      	ldr	r3, [pc, #300]	; (8015728 <pow+0x2c0>)
 80155fa:	b1b0      	cbz	r0, 801562a <pow+0x1c2>
 80155fc:	2201      	movs	r2, #1
 80155fe:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8015602:	9b00      	ldr	r3, [sp, #0]
 8015604:	930a      	str	r3, [sp, #40]	; 0x28
 8015606:	e9cd 6704 	strd	r6, r7, [sp, #16]
 801560a:	e9cd 4506 	strd	r4, r5, [sp, #24]
 801560e:	f1b9 0f00 	cmp.w	r9, #0
 8015612:	d0c4      	beq.n	801559e <pow+0x136>
 8015614:	4652      	mov	r2, sl
 8015616:	465b      	mov	r3, fp
 8015618:	4650      	mov	r0, sl
 801561a:	4659      	mov	r1, fp
 801561c:	f7eb f8ee 	bl	80007fc <__aeabi_ddiv>
 8015620:	f1b9 0f02 	cmp.w	r9, #2
 8015624:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8015628:	e7c1      	b.n	80155ae <pow+0x146>
 801562a:	2203      	movs	r2, #3
 801562c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8015630:	900a      	str	r0, [sp, #40]	; 0x28
 8015632:	4629      	mov	r1, r5
 8015634:	4620      	mov	r0, r4
 8015636:	2200      	movs	r2, #0
 8015638:	4b3e      	ldr	r3, [pc, #248]	; (8015734 <pow+0x2cc>)
 801563a:	e9cd 4506 	strd	r4, r5, [sp, #24]
 801563e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8015642:	f7ea ffb1 	bl	80005a8 <__aeabi_dmul>
 8015646:	4604      	mov	r4, r0
 8015648:	460d      	mov	r5, r1
 801564a:	f1b9 0f00 	cmp.w	r9, #0
 801564e:	d124      	bne.n	801569a <pow+0x232>
 8015650:	4b39      	ldr	r3, [pc, #228]	; (8015738 <pow+0x2d0>)
 8015652:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8015656:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801565a:	4630      	mov	r0, r6
 801565c:	4652      	mov	r2, sl
 801565e:	465b      	mov	r3, fp
 8015660:	4639      	mov	r1, r7
 8015662:	f7eb fa13 	bl	8000a8c <__aeabi_dcmplt>
 8015666:	2800      	cmp	r0, #0
 8015668:	d056      	beq.n	8015718 <pow+0x2b0>
 801566a:	ec45 4b10 	vmov	d0, r4, r5
 801566e:	f000 fe47 	bl	8016300 <rint>
 8015672:	4622      	mov	r2, r4
 8015674:	462b      	mov	r3, r5
 8015676:	ec51 0b10 	vmov	r0, r1, d0
 801567a:	f7eb f9fd 	bl	8000a78 <__aeabi_dcmpeq>
 801567e:	b920      	cbnz	r0, 801568a <pow+0x222>
 8015680:	4b2e      	ldr	r3, [pc, #184]	; (801573c <pow+0x2d4>)
 8015682:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8015686:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801568a:	f998 3000 	ldrsb.w	r3, [r8]
 801568e:	2b02      	cmp	r3, #2
 8015690:	d142      	bne.n	8015718 <pow+0x2b0>
 8015692:	f7fd f90f 	bl	80128b4 <__errno>
 8015696:	2322      	movs	r3, #34	; 0x22
 8015698:	e78d      	b.n	80155b6 <pow+0x14e>
 801569a:	4b29      	ldr	r3, [pc, #164]	; (8015740 <pow+0x2d8>)
 801569c:	2200      	movs	r2, #0
 801569e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80156a2:	4630      	mov	r0, r6
 80156a4:	4652      	mov	r2, sl
 80156a6:	465b      	mov	r3, fp
 80156a8:	4639      	mov	r1, r7
 80156aa:	f7eb f9ef 	bl	8000a8c <__aeabi_dcmplt>
 80156ae:	2800      	cmp	r0, #0
 80156b0:	d0eb      	beq.n	801568a <pow+0x222>
 80156b2:	ec45 4b10 	vmov	d0, r4, r5
 80156b6:	f000 fe23 	bl	8016300 <rint>
 80156ba:	4622      	mov	r2, r4
 80156bc:	462b      	mov	r3, r5
 80156be:	ec51 0b10 	vmov	r0, r1, d0
 80156c2:	f7eb f9d9 	bl	8000a78 <__aeabi_dcmpeq>
 80156c6:	2800      	cmp	r0, #0
 80156c8:	d1df      	bne.n	801568a <pow+0x222>
 80156ca:	2200      	movs	r2, #0
 80156cc:	4b18      	ldr	r3, [pc, #96]	; (8015730 <pow+0x2c8>)
 80156ce:	e7da      	b.n	8015686 <pow+0x21e>
 80156d0:	2200      	movs	r2, #0
 80156d2:	2300      	movs	r3, #0
 80156d4:	ec51 0b18 	vmov	r0, r1, d8
 80156d8:	f7eb f9ce 	bl	8000a78 <__aeabi_dcmpeq>
 80156dc:	2800      	cmp	r0, #0
 80156de:	f43f af3a 	beq.w	8015556 <pow+0xee>
 80156e2:	ec47 6b10 	vmov	d0, r6, r7
 80156e6:	f000 fdf6 	bl	80162d6 <finite>
 80156ea:	2800      	cmp	r0, #0
 80156ec:	f43f af33 	beq.w	8015556 <pow+0xee>
 80156f0:	ec45 4b10 	vmov	d0, r4, r5
 80156f4:	f000 fdef 	bl	80162d6 <finite>
 80156f8:	2800      	cmp	r0, #0
 80156fa:	f43f af2c 	beq.w	8015556 <pow+0xee>
 80156fe:	2304      	movs	r3, #4
 8015700:	9302      	str	r3, [sp, #8]
 8015702:	4b09      	ldr	r3, [pc, #36]	; (8015728 <pow+0x2c0>)
 8015704:	9303      	str	r3, [sp, #12]
 8015706:	2300      	movs	r3, #0
 8015708:	930a      	str	r3, [sp, #40]	; 0x28
 801570a:	e9cd 6704 	strd	r6, r7, [sp, #16]
 801570e:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8015712:	ed8d 9b08 	vstr	d9, [sp, #32]
 8015716:	e7b8      	b.n	801568a <pow+0x222>
 8015718:	a802      	add	r0, sp, #8
 801571a:	f000 fde4 	bl	80162e6 <matherr>
 801571e:	2800      	cmp	r0, #0
 8015720:	f47f af11 	bne.w	8015546 <pow+0xde>
 8015724:	e7b5      	b.n	8015692 <pow+0x22a>
 8015726:	bf00      	nop
 8015728:	08018360 	.word	0x08018360
 801572c:	3ff00000 	.word	0x3ff00000
 8015730:	fff00000 	.word	0xfff00000
 8015734:	3fe00000 	.word	0x3fe00000
 8015738:	47efffff 	.word	0x47efffff
 801573c:	c7efffff 	.word	0xc7efffff
 8015740:	7ff00000 	.word	0x7ff00000
 8015744:	200001f4 	.word	0x200001f4

08015748 <__ieee754_pow>:
 8015748:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801574c:	b091      	sub	sp, #68	; 0x44
 801574e:	ed8d 1b00 	vstr	d1, [sp]
 8015752:	e9dd 2900 	ldrd	r2, r9, [sp]
 8015756:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 801575a:	ea58 0302 	orrs.w	r3, r8, r2
 801575e:	ec57 6b10 	vmov	r6, r7, d0
 8015762:	f000 84be 	beq.w	80160e2 <__ieee754_pow+0x99a>
 8015766:	4b7a      	ldr	r3, [pc, #488]	; (8015950 <__ieee754_pow+0x208>)
 8015768:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 801576c:	429c      	cmp	r4, r3
 801576e:	463d      	mov	r5, r7
 8015770:	ee10 aa10 	vmov	sl, s0
 8015774:	dc09      	bgt.n	801578a <__ieee754_pow+0x42>
 8015776:	d103      	bne.n	8015780 <__ieee754_pow+0x38>
 8015778:	b93e      	cbnz	r6, 801578a <__ieee754_pow+0x42>
 801577a:	45a0      	cmp	r8, r4
 801577c:	dc0d      	bgt.n	801579a <__ieee754_pow+0x52>
 801577e:	e001      	b.n	8015784 <__ieee754_pow+0x3c>
 8015780:	4598      	cmp	r8, r3
 8015782:	dc02      	bgt.n	801578a <__ieee754_pow+0x42>
 8015784:	4598      	cmp	r8, r3
 8015786:	d10e      	bne.n	80157a6 <__ieee754_pow+0x5e>
 8015788:	b16a      	cbz	r2, 80157a6 <__ieee754_pow+0x5e>
 801578a:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 801578e:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8015792:	ea54 030a 	orrs.w	r3, r4, sl
 8015796:	f000 84a4 	beq.w	80160e2 <__ieee754_pow+0x99a>
 801579a:	486e      	ldr	r0, [pc, #440]	; (8015954 <__ieee754_pow+0x20c>)
 801579c:	b011      	add	sp, #68	; 0x44
 801579e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80157a2:	f000 bda5 	b.w	80162f0 <nan>
 80157a6:	2d00      	cmp	r5, #0
 80157a8:	da53      	bge.n	8015852 <__ieee754_pow+0x10a>
 80157aa:	4b6b      	ldr	r3, [pc, #428]	; (8015958 <__ieee754_pow+0x210>)
 80157ac:	4598      	cmp	r8, r3
 80157ae:	dc4d      	bgt.n	801584c <__ieee754_pow+0x104>
 80157b0:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 80157b4:	4598      	cmp	r8, r3
 80157b6:	dd4c      	ble.n	8015852 <__ieee754_pow+0x10a>
 80157b8:	ea4f 5328 	mov.w	r3, r8, asr #20
 80157bc:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80157c0:	2b14      	cmp	r3, #20
 80157c2:	dd26      	ble.n	8015812 <__ieee754_pow+0xca>
 80157c4:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 80157c8:	fa22 f103 	lsr.w	r1, r2, r3
 80157cc:	fa01 f303 	lsl.w	r3, r1, r3
 80157d0:	4293      	cmp	r3, r2
 80157d2:	d13e      	bne.n	8015852 <__ieee754_pow+0x10a>
 80157d4:	f001 0101 	and.w	r1, r1, #1
 80157d8:	f1c1 0b02 	rsb	fp, r1, #2
 80157dc:	2a00      	cmp	r2, #0
 80157de:	d15b      	bne.n	8015898 <__ieee754_pow+0x150>
 80157e0:	4b5b      	ldr	r3, [pc, #364]	; (8015950 <__ieee754_pow+0x208>)
 80157e2:	4598      	cmp	r8, r3
 80157e4:	d124      	bne.n	8015830 <__ieee754_pow+0xe8>
 80157e6:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 80157ea:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 80157ee:	ea53 030a 	orrs.w	r3, r3, sl
 80157f2:	f000 8476 	beq.w	80160e2 <__ieee754_pow+0x99a>
 80157f6:	4b59      	ldr	r3, [pc, #356]	; (801595c <__ieee754_pow+0x214>)
 80157f8:	429c      	cmp	r4, r3
 80157fa:	dd2d      	ble.n	8015858 <__ieee754_pow+0x110>
 80157fc:	f1b9 0f00 	cmp.w	r9, #0
 8015800:	f280 8473 	bge.w	80160ea <__ieee754_pow+0x9a2>
 8015804:	2000      	movs	r0, #0
 8015806:	2100      	movs	r1, #0
 8015808:	ec41 0b10 	vmov	d0, r0, r1
 801580c:	b011      	add	sp, #68	; 0x44
 801580e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015812:	2a00      	cmp	r2, #0
 8015814:	d13e      	bne.n	8015894 <__ieee754_pow+0x14c>
 8015816:	f1c3 0314 	rsb	r3, r3, #20
 801581a:	fa48 f103 	asr.w	r1, r8, r3
 801581e:	fa01 f303 	lsl.w	r3, r1, r3
 8015822:	4543      	cmp	r3, r8
 8015824:	f040 8469 	bne.w	80160fa <__ieee754_pow+0x9b2>
 8015828:	f001 0101 	and.w	r1, r1, #1
 801582c:	f1c1 0b02 	rsb	fp, r1, #2
 8015830:	4b4b      	ldr	r3, [pc, #300]	; (8015960 <__ieee754_pow+0x218>)
 8015832:	4598      	cmp	r8, r3
 8015834:	d118      	bne.n	8015868 <__ieee754_pow+0x120>
 8015836:	f1b9 0f00 	cmp.w	r9, #0
 801583a:	f280 845a 	bge.w	80160f2 <__ieee754_pow+0x9aa>
 801583e:	4948      	ldr	r1, [pc, #288]	; (8015960 <__ieee754_pow+0x218>)
 8015840:	4632      	mov	r2, r6
 8015842:	463b      	mov	r3, r7
 8015844:	2000      	movs	r0, #0
 8015846:	f7ea ffd9 	bl	80007fc <__aeabi_ddiv>
 801584a:	e7dd      	b.n	8015808 <__ieee754_pow+0xc0>
 801584c:	f04f 0b02 	mov.w	fp, #2
 8015850:	e7c4      	b.n	80157dc <__ieee754_pow+0x94>
 8015852:	f04f 0b00 	mov.w	fp, #0
 8015856:	e7c1      	b.n	80157dc <__ieee754_pow+0x94>
 8015858:	f1b9 0f00 	cmp.w	r9, #0
 801585c:	dad2      	bge.n	8015804 <__ieee754_pow+0xbc>
 801585e:	e9dd 0300 	ldrd	r0, r3, [sp]
 8015862:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8015866:	e7cf      	b.n	8015808 <__ieee754_pow+0xc0>
 8015868:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 801586c:	d106      	bne.n	801587c <__ieee754_pow+0x134>
 801586e:	4632      	mov	r2, r6
 8015870:	463b      	mov	r3, r7
 8015872:	4610      	mov	r0, r2
 8015874:	4619      	mov	r1, r3
 8015876:	f7ea fe97 	bl	80005a8 <__aeabi_dmul>
 801587a:	e7c5      	b.n	8015808 <__ieee754_pow+0xc0>
 801587c:	4b39      	ldr	r3, [pc, #228]	; (8015964 <__ieee754_pow+0x21c>)
 801587e:	4599      	cmp	r9, r3
 8015880:	d10a      	bne.n	8015898 <__ieee754_pow+0x150>
 8015882:	2d00      	cmp	r5, #0
 8015884:	db08      	blt.n	8015898 <__ieee754_pow+0x150>
 8015886:	ec47 6b10 	vmov	d0, r6, r7
 801588a:	b011      	add	sp, #68	; 0x44
 801588c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015890:	f000 bc68 	b.w	8016164 <__ieee754_sqrt>
 8015894:	f04f 0b00 	mov.w	fp, #0
 8015898:	ec47 6b10 	vmov	d0, r6, r7
 801589c:	f000 fd12 	bl	80162c4 <fabs>
 80158a0:	ec51 0b10 	vmov	r0, r1, d0
 80158a4:	f1ba 0f00 	cmp.w	sl, #0
 80158a8:	d127      	bne.n	80158fa <__ieee754_pow+0x1b2>
 80158aa:	b124      	cbz	r4, 80158b6 <__ieee754_pow+0x16e>
 80158ac:	4b2c      	ldr	r3, [pc, #176]	; (8015960 <__ieee754_pow+0x218>)
 80158ae:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 80158b2:	429a      	cmp	r2, r3
 80158b4:	d121      	bne.n	80158fa <__ieee754_pow+0x1b2>
 80158b6:	f1b9 0f00 	cmp.w	r9, #0
 80158ba:	da05      	bge.n	80158c8 <__ieee754_pow+0x180>
 80158bc:	4602      	mov	r2, r0
 80158be:	460b      	mov	r3, r1
 80158c0:	2000      	movs	r0, #0
 80158c2:	4927      	ldr	r1, [pc, #156]	; (8015960 <__ieee754_pow+0x218>)
 80158c4:	f7ea ff9a 	bl	80007fc <__aeabi_ddiv>
 80158c8:	2d00      	cmp	r5, #0
 80158ca:	da9d      	bge.n	8015808 <__ieee754_pow+0xc0>
 80158cc:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 80158d0:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80158d4:	ea54 030b 	orrs.w	r3, r4, fp
 80158d8:	d108      	bne.n	80158ec <__ieee754_pow+0x1a4>
 80158da:	4602      	mov	r2, r0
 80158dc:	460b      	mov	r3, r1
 80158de:	4610      	mov	r0, r2
 80158e0:	4619      	mov	r1, r3
 80158e2:	f7ea fca9 	bl	8000238 <__aeabi_dsub>
 80158e6:	4602      	mov	r2, r0
 80158e8:	460b      	mov	r3, r1
 80158ea:	e7ac      	b.n	8015846 <__ieee754_pow+0xfe>
 80158ec:	f1bb 0f01 	cmp.w	fp, #1
 80158f0:	d18a      	bne.n	8015808 <__ieee754_pow+0xc0>
 80158f2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80158f6:	4619      	mov	r1, r3
 80158f8:	e786      	b.n	8015808 <__ieee754_pow+0xc0>
 80158fa:	0fed      	lsrs	r5, r5, #31
 80158fc:	1e6b      	subs	r3, r5, #1
 80158fe:	930d      	str	r3, [sp, #52]	; 0x34
 8015900:	ea5b 0303 	orrs.w	r3, fp, r3
 8015904:	d102      	bne.n	801590c <__ieee754_pow+0x1c4>
 8015906:	4632      	mov	r2, r6
 8015908:	463b      	mov	r3, r7
 801590a:	e7e8      	b.n	80158de <__ieee754_pow+0x196>
 801590c:	4b16      	ldr	r3, [pc, #88]	; (8015968 <__ieee754_pow+0x220>)
 801590e:	4598      	cmp	r8, r3
 8015910:	f340 80fe 	ble.w	8015b10 <__ieee754_pow+0x3c8>
 8015914:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8015918:	4598      	cmp	r8, r3
 801591a:	dd0a      	ble.n	8015932 <__ieee754_pow+0x1ea>
 801591c:	4b0f      	ldr	r3, [pc, #60]	; (801595c <__ieee754_pow+0x214>)
 801591e:	429c      	cmp	r4, r3
 8015920:	dc0d      	bgt.n	801593e <__ieee754_pow+0x1f6>
 8015922:	f1b9 0f00 	cmp.w	r9, #0
 8015926:	f6bf af6d 	bge.w	8015804 <__ieee754_pow+0xbc>
 801592a:	a307      	add	r3, pc, #28	; (adr r3, 8015948 <__ieee754_pow+0x200>)
 801592c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015930:	e79f      	b.n	8015872 <__ieee754_pow+0x12a>
 8015932:	4b0e      	ldr	r3, [pc, #56]	; (801596c <__ieee754_pow+0x224>)
 8015934:	429c      	cmp	r4, r3
 8015936:	ddf4      	ble.n	8015922 <__ieee754_pow+0x1da>
 8015938:	4b09      	ldr	r3, [pc, #36]	; (8015960 <__ieee754_pow+0x218>)
 801593a:	429c      	cmp	r4, r3
 801593c:	dd18      	ble.n	8015970 <__ieee754_pow+0x228>
 801593e:	f1b9 0f00 	cmp.w	r9, #0
 8015942:	dcf2      	bgt.n	801592a <__ieee754_pow+0x1e2>
 8015944:	e75e      	b.n	8015804 <__ieee754_pow+0xbc>
 8015946:	bf00      	nop
 8015948:	8800759c 	.word	0x8800759c
 801594c:	7e37e43c 	.word	0x7e37e43c
 8015950:	7ff00000 	.word	0x7ff00000
 8015954:	08018249 	.word	0x08018249
 8015958:	433fffff 	.word	0x433fffff
 801595c:	3fefffff 	.word	0x3fefffff
 8015960:	3ff00000 	.word	0x3ff00000
 8015964:	3fe00000 	.word	0x3fe00000
 8015968:	41e00000 	.word	0x41e00000
 801596c:	3feffffe 	.word	0x3feffffe
 8015970:	2200      	movs	r2, #0
 8015972:	4b63      	ldr	r3, [pc, #396]	; (8015b00 <__ieee754_pow+0x3b8>)
 8015974:	f7ea fc60 	bl	8000238 <__aeabi_dsub>
 8015978:	a355      	add	r3, pc, #340	; (adr r3, 8015ad0 <__ieee754_pow+0x388>)
 801597a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801597e:	4604      	mov	r4, r0
 8015980:	460d      	mov	r5, r1
 8015982:	f7ea fe11 	bl	80005a8 <__aeabi_dmul>
 8015986:	a354      	add	r3, pc, #336	; (adr r3, 8015ad8 <__ieee754_pow+0x390>)
 8015988:	e9d3 2300 	ldrd	r2, r3, [r3]
 801598c:	4606      	mov	r6, r0
 801598e:	460f      	mov	r7, r1
 8015990:	4620      	mov	r0, r4
 8015992:	4629      	mov	r1, r5
 8015994:	f7ea fe08 	bl	80005a8 <__aeabi_dmul>
 8015998:	2200      	movs	r2, #0
 801599a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801599e:	4b59      	ldr	r3, [pc, #356]	; (8015b04 <__ieee754_pow+0x3bc>)
 80159a0:	4620      	mov	r0, r4
 80159a2:	4629      	mov	r1, r5
 80159a4:	f7ea fe00 	bl	80005a8 <__aeabi_dmul>
 80159a8:	4602      	mov	r2, r0
 80159aa:	460b      	mov	r3, r1
 80159ac:	a14c      	add	r1, pc, #304	; (adr r1, 8015ae0 <__ieee754_pow+0x398>)
 80159ae:	e9d1 0100 	ldrd	r0, r1, [r1]
 80159b2:	f7ea fc41 	bl	8000238 <__aeabi_dsub>
 80159b6:	4622      	mov	r2, r4
 80159b8:	462b      	mov	r3, r5
 80159ba:	f7ea fdf5 	bl	80005a8 <__aeabi_dmul>
 80159be:	4602      	mov	r2, r0
 80159c0:	460b      	mov	r3, r1
 80159c2:	2000      	movs	r0, #0
 80159c4:	4950      	ldr	r1, [pc, #320]	; (8015b08 <__ieee754_pow+0x3c0>)
 80159c6:	f7ea fc37 	bl	8000238 <__aeabi_dsub>
 80159ca:	4622      	mov	r2, r4
 80159cc:	462b      	mov	r3, r5
 80159ce:	4680      	mov	r8, r0
 80159d0:	4689      	mov	r9, r1
 80159d2:	4620      	mov	r0, r4
 80159d4:	4629      	mov	r1, r5
 80159d6:	f7ea fde7 	bl	80005a8 <__aeabi_dmul>
 80159da:	4602      	mov	r2, r0
 80159dc:	460b      	mov	r3, r1
 80159de:	4640      	mov	r0, r8
 80159e0:	4649      	mov	r1, r9
 80159e2:	f7ea fde1 	bl	80005a8 <__aeabi_dmul>
 80159e6:	a340      	add	r3, pc, #256	; (adr r3, 8015ae8 <__ieee754_pow+0x3a0>)
 80159e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80159ec:	f7ea fddc 	bl	80005a8 <__aeabi_dmul>
 80159f0:	4602      	mov	r2, r0
 80159f2:	460b      	mov	r3, r1
 80159f4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80159f8:	f7ea fc1e 	bl	8000238 <__aeabi_dsub>
 80159fc:	4602      	mov	r2, r0
 80159fe:	460b      	mov	r3, r1
 8015a00:	4604      	mov	r4, r0
 8015a02:	460d      	mov	r5, r1
 8015a04:	4630      	mov	r0, r6
 8015a06:	4639      	mov	r1, r7
 8015a08:	f7ea fc18 	bl	800023c <__adddf3>
 8015a0c:	2000      	movs	r0, #0
 8015a0e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8015a12:	4632      	mov	r2, r6
 8015a14:	463b      	mov	r3, r7
 8015a16:	f7ea fc0f 	bl	8000238 <__aeabi_dsub>
 8015a1a:	4602      	mov	r2, r0
 8015a1c:	460b      	mov	r3, r1
 8015a1e:	4620      	mov	r0, r4
 8015a20:	4629      	mov	r1, r5
 8015a22:	f7ea fc09 	bl	8000238 <__aeabi_dsub>
 8015a26:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8015a28:	f10b 33ff 	add.w	r3, fp, #4294967295
 8015a2c:	4313      	orrs	r3, r2
 8015a2e:	4606      	mov	r6, r0
 8015a30:	460f      	mov	r7, r1
 8015a32:	f040 81eb 	bne.w	8015e0c <__ieee754_pow+0x6c4>
 8015a36:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 8015af0 <__ieee754_pow+0x3a8>
 8015a3a:	e9dd 4500 	ldrd	r4, r5, [sp]
 8015a3e:	2400      	movs	r4, #0
 8015a40:	4622      	mov	r2, r4
 8015a42:	462b      	mov	r3, r5
 8015a44:	e9dd 0100 	ldrd	r0, r1, [sp]
 8015a48:	ed8d 7b02 	vstr	d7, [sp, #8]
 8015a4c:	f7ea fbf4 	bl	8000238 <__aeabi_dsub>
 8015a50:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8015a54:	f7ea fda8 	bl	80005a8 <__aeabi_dmul>
 8015a58:	e9dd 2300 	ldrd	r2, r3, [sp]
 8015a5c:	4680      	mov	r8, r0
 8015a5e:	4689      	mov	r9, r1
 8015a60:	4630      	mov	r0, r6
 8015a62:	4639      	mov	r1, r7
 8015a64:	f7ea fda0 	bl	80005a8 <__aeabi_dmul>
 8015a68:	4602      	mov	r2, r0
 8015a6a:	460b      	mov	r3, r1
 8015a6c:	4640      	mov	r0, r8
 8015a6e:	4649      	mov	r1, r9
 8015a70:	f7ea fbe4 	bl	800023c <__adddf3>
 8015a74:	4622      	mov	r2, r4
 8015a76:	462b      	mov	r3, r5
 8015a78:	4680      	mov	r8, r0
 8015a7a:	4689      	mov	r9, r1
 8015a7c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8015a80:	f7ea fd92 	bl	80005a8 <__aeabi_dmul>
 8015a84:	460b      	mov	r3, r1
 8015a86:	4604      	mov	r4, r0
 8015a88:	460d      	mov	r5, r1
 8015a8a:	4602      	mov	r2, r0
 8015a8c:	4649      	mov	r1, r9
 8015a8e:	4640      	mov	r0, r8
 8015a90:	e9cd 4500 	strd	r4, r5, [sp]
 8015a94:	f7ea fbd2 	bl	800023c <__adddf3>
 8015a98:	4b1c      	ldr	r3, [pc, #112]	; (8015b0c <__ieee754_pow+0x3c4>)
 8015a9a:	4299      	cmp	r1, r3
 8015a9c:	4606      	mov	r6, r0
 8015a9e:	460f      	mov	r7, r1
 8015aa0:	468b      	mov	fp, r1
 8015aa2:	f340 82f7 	ble.w	8016094 <__ieee754_pow+0x94c>
 8015aa6:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8015aaa:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8015aae:	4303      	orrs	r3, r0
 8015ab0:	f000 81ea 	beq.w	8015e88 <__ieee754_pow+0x740>
 8015ab4:	a310      	add	r3, pc, #64	; (adr r3, 8015af8 <__ieee754_pow+0x3b0>)
 8015ab6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015aba:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8015abe:	f7ea fd73 	bl	80005a8 <__aeabi_dmul>
 8015ac2:	a30d      	add	r3, pc, #52	; (adr r3, 8015af8 <__ieee754_pow+0x3b0>)
 8015ac4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015ac8:	e6d5      	b.n	8015876 <__ieee754_pow+0x12e>
 8015aca:	bf00      	nop
 8015acc:	f3af 8000 	nop.w
 8015ad0:	60000000 	.word	0x60000000
 8015ad4:	3ff71547 	.word	0x3ff71547
 8015ad8:	f85ddf44 	.word	0xf85ddf44
 8015adc:	3e54ae0b 	.word	0x3e54ae0b
 8015ae0:	55555555 	.word	0x55555555
 8015ae4:	3fd55555 	.word	0x3fd55555
 8015ae8:	652b82fe 	.word	0x652b82fe
 8015aec:	3ff71547 	.word	0x3ff71547
 8015af0:	00000000 	.word	0x00000000
 8015af4:	bff00000 	.word	0xbff00000
 8015af8:	8800759c 	.word	0x8800759c
 8015afc:	7e37e43c 	.word	0x7e37e43c
 8015b00:	3ff00000 	.word	0x3ff00000
 8015b04:	3fd00000 	.word	0x3fd00000
 8015b08:	3fe00000 	.word	0x3fe00000
 8015b0c:	408fffff 	.word	0x408fffff
 8015b10:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8015b14:	f04f 0200 	mov.w	r2, #0
 8015b18:	da05      	bge.n	8015b26 <__ieee754_pow+0x3de>
 8015b1a:	4bd3      	ldr	r3, [pc, #844]	; (8015e68 <__ieee754_pow+0x720>)
 8015b1c:	f7ea fd44 	bl	80005a8 <__aeabi_dmul>
 8015b20:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8015b24:	460c      	mov	r4, r1
 8015b26:	1523      	asrs	r3, r4, #20
 8015b28:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8015b2c:	4413      	add	r3, r2
 8015b2e:	9309      	str	r3, [sp, #36]	; 0x24
 8015b30:	4bce      	ldr	r3, [pc, #824]	; (8015e6c <__ieee754_pow+0x724>)
 8015b32:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8015b36:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8015b3a:	429c      	cmp	r4, r3
 8015b3c:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8015b40:	dd08      	ble.n	8015b54 <__ieee754_pow+0x40c>
 8015b42:	4bcb      	ldr	r3, [pc, #812]	; (8015e70 <__ieee754_pow+0x728>)
 8015b44:	429c      	cmp	r4, r3
 8015b46:	f340 815e 	ble.w	8015e06 <__ieee754_pow+0x6be>
 8015b4a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015b4c:	3301      	adds	r3, #1
 8015b4e:	9309      	str	r3, [sp, #36]	; 0x24
 8015b50:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8015b54:	f04f 0a00 	mov.w	sl, #0
 8015b58:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 8015b5c:	930c      	str	r3, [sp, #48]	; 0x30
 8015b5e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8015b60:	4bc4      	ldr	r3, [pc, #784]	; (8015e74 <__ieee754_pow+0x72c>)
 8015b62:	4413      	add	r3, r2
 8015b64:	ed93 7b00 	vldr	d7, [r3]
 8015b68:	4629      	mov	r1, r5
 8015b6a:	ec53 2b17 	vmov	r2, r3, d7
 8015b6e:	ed8d 7b06 	vstr	d7, [sp, #24]
 8015b72:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8015b76:	f7ea fb5f 	bl	8000238 <__aeabi_dsub>
 8015b7a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8015b7e:	4606      	mov	r6, r0
 8015b80:	460f      	mov	r7, r1
 8015b82:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8015b86:	f7ea fb59 	bl	800023c <__adddf3>
 8015b8a:	4602      	mov	r2, r0
 8015b8c:	460b      	mov	r3, r1
 8015b8e:	2000      	movs	r0, #0
 8015b90:	49b9      	ldr	r1, [pc, #740]	; (8015e78 <__ieee754_pow+0x730>)
 8015b92:	f7ea fe33 	bl	80007fc <__aeabi_ddiv>
 8015b96:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8015b9a:	4602      	mov	r2, r0
 8015b9c:	460b      	mov	r3, r1
 8015b9e:	4630      	mov	r0, r6
 8015ba0:	4639      	mov	r1, r7
 8015ba2:	f7ea fd01 	bl	80005a8 <__aeabi_dmul>
 8015ba6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8015baa:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8015bae:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8015bb2:	2300      	movs	r3, #0
 8015bb4:	9302      	str	r3, [sp, #8]
 8015bb6:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8015bba:	106d      	asrs	r5, r5, #1
 8015bbc:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8015bc0:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8015bc4:	2200      	movs	r2, #0
 8015bc6:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 8015bca:	4640      	mov	r0, r8
 8015bcc:	4649      	mov	r1, r9
 8015bce:	4614      	mov	r4, r2
 8015bd0:	461d      	mov	r5, r3
 8015bd2:	f7ea fce9 	bl	80005a8 <__aeabi_dmul>
 8015bd6:	4602      	mov	r2, r0
 8015bd8:	460b      	mov	r3, r1
 8015bda:	4630      	mov	r0, r6
 8015bdc:	4639      	mov	r1, r7
 8015bde:	f7ea fb2b 	bl	8000238 <__aeabi_dsub>
 8015be2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8015be6:	4606      	mov	r6, r0
 8015be8:	460f      	mov	r7, r1
 8015bea:	4620      	mov	r0, r4
 8015bec:	4629      	mov	r1, r5
 8015bee:	f7ea fb23 	bl	8000238 <__aeabi_dsub>
 8015bf2:	4602      	mov	r2, r0
 8015bf4:	460b      	mov	r3, r1
 8015bf6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8015bfa:	f7ea fb1d 	bl	8000238 <__aeabi_dsub>
 8015bfe:	4642      	mov	r2, r8
 8015c00:	464b      	mov	r3, r9
 8015c02:	f7ea fcd1 	bl	80005a8 <__aeabi_dmul>
 8015c06:	4602      	mov	r2, r0
 8015c08:	460b      	mov	r3, r1
 8015c0a:	4630      	mov	r0, r6
 8015c0c:	4639      	mov	r1, r7
 8015c0e:	f7ea fb13 	bl	8000238 <__aeabi_dsub>
 8015c12:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8015c16:	f7ea fcc7 	bl	80005a8 <__aeabi_dmul>
 8015c1a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8015c1e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8015c22:	4610      	mov	r0, r2
 8015c24:	4619      	mov	r1, r3
 8015c26:	f7ea fcbf 	bl	80005a8 <__aeabi_dmul>
 8015c2a:	a37b      	add	r3, pc, #492	; (adr r3, 8015e18 <__ieee754_pow+0x6d0>)
 8015c2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015c30:	4604      	mov	r4, r0
 8015c32:	460d      	mov	r5, r1
 8015c34:	f7ea fcb8 	bl	80005a8 <__aeabi_dmul>
 8015c38:	a379      	add	r3, pc, #484	; (adr r3, 8015e20 <__ieee754_pow+0x6d8>)
 8015c3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015c3e:	f7ea fafd 	bl	800023c <__adddf3>
 8015c42:	4622      	mov	r2, r4
 8015c44:	462b      	mov	r3, r5
 8015c46:	f7ea fcaf 	bl	80005a8 <__aeabi_dmul>
 8015c4a:	a377      	add	r3, pc, #476	; (adr r3, 8015e28 <__ieee754_pow+0x6e0>)
 8015c4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015c50:	f7ea faf4 	bl	800023c <__adddf3>
 8015c54:	4622      	mov	r2, r4
 8015c56:	462b      	mov	r3, r5
 8015c58:	f7ea fca6 	bl	80005a8 <__aeabi_dmul>
 8015c5c:	a374      	add	r3, pc, #464	; (adr r3, 8015e30 <__ieee754_pow+0x6e8>)
 8015c5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015c62:	f7ea faeb 	bl	800023c <__adddf3>
 8015c66:	4622      	mov	r2, r4
 8015c68:	462b      	mov	r3, r5
 8015c6a:	f7ea fc9d 	bl	80005a8 <__aeabi_dmul>
 8015c6e:	a372      	add	r3, pc, #456	; (adr r3, 8015e38 <__ieee754_pow+0x6f0>)
 8015c70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015c74:	f7ea fae2 	bl	800023c <__adddf3>
 8015c78:	4622      	mov	r2, r4
 8015c7a:	462b      	mov	r3, r5
 8015c7c:	f7ea fc94 	bl	80005a8 <__aeabi_dmul>
 8015c80:	a36f      	add	r3, pc, #444	; (adr r3, 8015e40 <__ieee754_pow+0x6f8>)
 8015c82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015c86:	f7ea fad9 	bl	800023c <__adddf3>
 8015c8a:	4622      	mov	r2, r4
 8015c8c:	4606      	mov	r6, r0
 8015c8e:	460f      	mov	r7, r1
 8015c90:	462b      	mov	r3, r5
 8015c92:	4620      	mov	r0, r4
 8015c94:	4629      	mov	r1, r5
 8015c96:	f7ea fc87 	bl	80005a8 <__aeabi_dmul>
 8015c9a:	4602      	mov	r2, r0
 8015c9c:	460b      	mov	r3, r1
 8015c9e:	4630      	mov	r0, r6
 8015ca0:	4639      	mov	r1, r7
 8015ca2:	f7ea fc81 	bl	80005a8 <__aeabi_dmul>
 8015ca6:	4642      	mov	r2, r8
 8015ca8:	4604      	mov	r4, r0
 8015caa:	460d      	mov	r5, r1
 8015cac:	464b      	mov	r3, r9
 8015cae:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8015cb2:	f7ea fac3 	bl	800023c <__adddf3>
 8015cb6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8015cba:	f7ea fc75 	bl	80005a8 <__aeabi_dmul>
 8015cbe:	4622      	mov	r2, r4
 8015cc0:	462b      	mov	r3, r5
 8015cc2:	f7ea fabb 	bl	800023c <__adddf3>
 8015cc6:	4642      	mov	r2, r8
 8015cc8:	4606      	mov	r6, r0
 8015cca:	460f      	mov	r7, r1
 8015ccc:	464b      	mov	r3, r9
 8015cce:	4640      	mov	r0, r8
 8015cd0:	4649      	mov	r1, r9
 8015cd2:	f7ea fc69 	bl	80005a8 <__aeabi_dmul>
 8015cd6:	2200      	movs	r2, #0
 8015cd8:	4b68      	ldr	r3, [pc, #416]	; (8015e7c <__ieee754_pow+0x734>)
 8015cda:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8015cde:	f7ea faad 	bl	800023c <__adddf3>
 8015ce2:	4632      	mov	r2, r6
 8015ce4:	463b      	mov	r3, r7
 8015ce6:	f7ea faa9 	bl	800023c <__adddf3>
 8015cea:	9802      	ldr	r0, [sp, #8]
 8015cec:	460d      	mov	r5, r1
 8015cee:	4604      	mov	r4, r0
 8015cf0:	4602      	mov	r2, r0
 8015cf2:	460b      	mov	r3, r1
 8015cf4:	4640      	mov	r0, r8
 8015cf6:	4649      	mov	r1, r9
 8015cf8:	f7ea fc56 	bl	80005a8 <__aeabi_dmul>
 8015cfc:	2200      	movs	r2, #0
 8015cfe:	4680      	mov	r8, r0
 8015d00:	4689      	mov	r9, r1
 8015d02:	4b5e      	ldr	r3, [pc, #376]	; (8015e7c <__ieee754_pow+0x734>)
 8015d04:	4620      	mov	r0, r4
 8015d06:	4629      	mov	r1, r5
 8015d08:	f7ea fa96 	bl	8000238 <__aeabi_dsub>
 8015d0c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8015d10:	f7ea fa92 	bl	8000238 <__aeabi_dsub>
 8015d14:	4602      	mov	r2, r0
 8015d16:	460b      	mov	r3, r1
 8015d18:	4630      	mov	r0, r6
 8015d1a:	4639      	mov	r1, r7
 8015d1c:	f7ea fa8c 	bl	8000238 <__aeabi_dsub>
 8015d20:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8015d24:	f7ea fc40 	bl	80005a8 <__aeabi_dmul>
 8015d28:	4622      	mov	r2, r4
 8015d2a:	4606      	mov	r6, r0
 8015d2c:	460f      	mov	r7, r1
 8015d2e:	462b      	mov	r3, r5
 8015d30:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8015d34:	f7ea fc38 	bl	80005a8 <__aeabi_dmul>
 8015d38:	4602      	mov	r2, r0
 8015d3a:	460b      	mov	r3, r1
 8015d3c:	4630      	mov	r0, r6
 8015d3e:	4639      	mov	r1, r7
 8015d40:	f7ea fa7c 	bl	800023c <__adddf3>
 8015d44:	4606      	mov	r6, r0
 8015d46:	460f      	mov	r7, r1
 8015d48:	4602      	mov	r2, r0
 8015d4a:	460b      	mov	r3, r1
 8015d4c:	4640      	mov	r0, r8
 8015d4e:	4649      	mov	r1, r9
 8015d50:	f7ea fa74 	bl	800023c <__adddf3>
 8015d54:	9802      	ldr	r0, [sp, #8]
 8015d56:	a33c      	add	r3, pc, #240	; (adr r3, 8015e48 <__ieee754_pow+0x700>)
 8015d58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015d5c:	4604      	mov	r4, r0
 8015d5e:	460d      	mov	r5, r1
 8015d60:	f7ea fc22 	bl	80005a8 <__aeabi_dmul>
 8015d64:	4642      	mov	r2, r8
 8015d66:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8015d6a:	464b      	mov	r3, r9
 8015d6c:	4620      	mov	r0, r4
 8015d6e:	4629      	mov	r1, r5
 8015d70:	f7ea fa62 	bl	8000238 <__aeabi_dsub>
 8015d74:	4602      	mov	r2, r0
 8015d76:	460b      	mov	r3, r1
 8015d78:	4630      	mov	r0, r6
 8015d7a:	4639      	mov	r1, r7
 8015d7c:	f7ea fa5c 	bl	8000238 <__aeabi_dsub>
 8015d80:	a333      	add	r3, pc, #204	; (adr r3, 8015e50 <__ieee754_pow+0x708>)
 8015d82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015d86:	f7ea fc0f 	bl	80005a8 <__aeabi_dmul>
 8015d8a:	a333      	add	r3, pc, #204	; (adr r3, 8015e58 <__ieee754_pow+0x710>)
 8015d8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015d90:	4606      	mov	r6, r0
 8015d92:	460f      	mov	r7, r1
 8015d94:	4620      	mov	r0, r4
 8015d96:	4629      	mov	r1, r5
 8015d98:	f7ea fc06 	bl	80005a8 <__aeabi_dmul>
 8015d9c:	4602      	mov	r2, r0
 8015d9e:	460b      	mov	r3, r1
 8015da0:	4630      	mov	r0, r6
 8015da2:	4639      	mov	r1, r7
 8015da4:	f7ea fa4a 	bl	800023c <__adddf3>
 8015da8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8015daa:	4b35      	ldr	r3, [pc, #212]	; (8015e80 <__ieee754_pow+0x738>)
 8015dac:	4413      	add	r3, r2
 8015dae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015db2:	f7ea fa43 	bl	800023c <__adddf3>
 8015db6:	4604      	mov	r4, r0
 8015db8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8015dba:	460d      	mov	r5, r1
 8015dbc:	f7ea fb8a 	bl	80004d4 <__aeabi_i2d>
 8015dc0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8015dc2:	4b30      	ldr	r3, [pc, #192]	; (8015e84 <__ieee754_pow+0x73c>)
 8015dc4:	4413      	add	r3, r2
 8015dc6:	e9d3 8900 	ldrd	r8, r9, [r3]
 8015dca:	4606      	mov	r6, r0
 8015dcc:	460f      	mov	r7, r1
 8015dce:	4622      	mov	r2, r4
 8015dd0:	462b      	mov	r3, r5
 8015dd2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8015dd6:	f7ea fa31 	bl	800023c <__adddf3>
 8015dda:	4642      	mov	r2, r8
 8015ddc:	464b      	mov	r3, r9
 8015dde:	f7ea fa2d 	bl	800023c <__adddf3>
 8015de2:	4632      	mov	r2, r6
 8015de4:	463b      	mov	r3, r7
 8015de6:	f7ea fa29 	bl	800023c <__adddf3>
 8015dea:	9802      	ldr	r0, [sp, #8]
 8015dec:	4632      	mov	r2, r6
 8015dee:	463b      	mov	r3, r7
 8015df0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8015df4:	f7ea fa20 	bl	8000238 <__aeabi_dsub>
 8015df8:	4642      	mov	r2, r8
 8015dfa:	464b      	mov	r3, r9
 8015dfc:	f7ea fa1c 	bl	8000238 <__aeabi_dsub>
 8015e00:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8015e04:	e607      	b.n	8015a16 <__ieee754_pow+0x2ce>
 8015e06:	f04f 0a01 	mov.w	sl, #1
 8015e0a:	e6a5      	b.n	8015b58 <__ieee754_pow+0x410>
 8015e0c:	ed9f 7b14 	vldr	d7, [pc, #80]	; 8015e60 <__ieee754_pow+0x718>
 8015e10:	e613      	b.n	8015a3a <__ieee754_pow+0x2f2>
 8015e12:	bf00      	nop
 8015e14:	f3af 8000 	nop.w
 8015e18:	4a454eef 	.word	0x4a454eef
 8015e1c:	3fca7e28 	.word	0x3fca7e28
 8015e20:	93c9db65 	.word	0x93c9db65
 8015e24:	3fcd864a 	.word	0x3fcd864a
 8015e28:	a91d4101 	.word	0xa91d4101
 8015e2c:	3fd17460 	.word	0x3fd17460
 8015e30:	518f264d 	.word	0x518f264d
 8015e34:	3fd55555 	.word	0x3fd55555
 8015e38:	db6fabff 	.word	0xdb6fabff
 8015e3c:	3fdb6db6 	.word	0x3fdb6db6
 8015e40:	33333303 	.word	0x33333303
 8015e44:	3fe33333 	.word	0x3fe33333
 8015e48:	e0000000 	.word	0xe0000000
 8015e4c:	3feec709 	.word	0x3feec709
 8015e50:	dc3a03fd 	.word	0xdc3a03fd
 8015e54:	3feec709 	.word	0x3feec709
 8015e58:	145b01f5 	.word	0x145b01f5
 8015e5c:	be3e2fe0 	.word	0xbe3e2fe0
 8015e60:	00000000 	.word	0x00000000
 8015e64:	3ff00000 	.word	0x3ff00000
 8015e68:	43400000 	.word	0x43400000
 8015e6c:	0003988e 	.word	0x0003988e
 8015e70:	000bb679 	.word	0x000bb679
 8015e74:	08018368 	.word	0x08018368
 8015e78:	3ff00000 	.word	0x3ff00000
 8015e7c:	40080000 	.word	0x40080000
 8015e80:	08018388 	.word	0x08018388
 8015e84:	08018378 	.word	0x08018378
 8015e88:	a3b4      	add	r3, pc, #720	; (adr r3, 801615c <__ieee754_pow+0xa14>)
 8015e8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015e8e:	4640      	mov	r0, r8
 8015e90:	4649      	mov	r1, r9
 8015e92:	f7ea f9d3 	bl	800023c <__adddf3>
 8015e96:	4622      	mov	r2, r4
 8015e98:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8015e9c:	462b      	mov	r3, r5
 8015e9e:	4630      	mov	r0, r6
 8015ea0:	4639      	mov	r1, r7
 8015ea2:	f7ea f9c9 	bl	8000238 <__aeabi_dsub>
 8015ea6:	4602      	mov	r2, r0
 8015ea8:	460b      	mov	r3, r1
 8015eaa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8015eae:	f7ea fe0b 	bl	8000ac8 <__aeabi_dcmpgt>
 8015eb2:	2800      	cmp	r0, #0
 8015eb4:	f47f adfe 	bne.w	8015ab4 <__ieee754_pow+0x36c>
 8015eb8:	4aa3      	ldr	r2, [pc, #652]	; (8016148 <__ieee754_pow+0xa00>)
 8015eba:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8015ebe:	4293      	cmp	r3, r2
 8015ec0:	f340 810a 	ble.w	80160d8 <__ieee754_pow+0x990>
 8015ec4:	151b      	asrs	r3, r3, #20
 8015ec6:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8015eca:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8015ece:	fa4a f303 	asr.w	r3, sl, r3
 8015ed2:	445b      	add	r3, fp
 8015ed4:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8015ed8:	4e9c      	ldr	r6, [pc, #624]	; (801614c <__ieee754_pow+0xa04>)
 8015eda:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8015ede:	4116      	asrs	r6, r2
 8015ee0:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8015ee4:	2000      	movs	r0, #0
 8015ee6:	ea23 0106 	bic.w	r1, r3, r6
 8015eea:	f1c2 0214 	rsb	r2, r2, #20
 8015eee:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8015ef2:	fa4a fa02 	asr.w	sl, sl, r2
 8015ef6:	f1bb 0f00 	cmp.w	fp, #0
 8015efa:	4602      	mov	r2, r0
 8015efc:	460b      	mov	r3, r1
 8015efe:	4620      	mov	r0, r4
 8015f00:	4629      	mov	r1, r5
 8015f02:	bfb8      	it	lt
 8015f04:	f1ca 0a00 	rsblt	sl, sl, #0
 8015f08:	f7ea f996 	bl	8000238 <__aeabi_dsub>
 8015f0c:	e9cd 0100 	strd	r0, r1, [sp]
 8015f10:	4642      	mov	r2, r8
 8015f12:	464b      	mov	r3, r9
 8015f14:	e9dd 0100 	ldrd	r0, r1, [sp]
 8015f18:	f7ea f990 	bl	800023c <__adddf3>
 8015f1c:	2000      	movs	r0, #0
 8015f1e:	a378      	add	r3, pc, #480	; (adr r3, 8016100 <__ieee754_pow+0x9b8>)
 8015f20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015f24:	4604      	mov	r4, r0
 8015f26:	460d      	mov	r5, r1
 8015f28:	f7ea fb3e 	bl	80005a8 <__aeabi_dmul>
 8015f2c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8015f30:	4606      	mov	r6, r0
 8015f32:	460f      	mov	r7, r1
 8015f34:	4620      	mov	r0, r4
 8015f36:	4629      	mov	r1, r5
 8015f38:	f7ea f97e 	bl	8000238 <__aeabi_dsub>
 8015f3c:	4602      	mov	r2, r0
 8015f3e:	460b      	mov	r3, r1
 8015f40:	4640      	mov	r0, r8
 8015f42:	4649      	mov	r1, r9
 8015f44:	f7ea f978 	bl	8000238 <__aeabi_dsub>
 8015f48:	a36f      	add	r3, pc, #444	; (adr r3, 8016108 <__ieee754_pow+0x9c0>)
 8015f4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015f4e:	f7ea fb2b 	bl	80005a8 <__aeabi_dmul>
 8015f52:	a36f      	add	r3, pc, #444	; (adr r3, 8016110 <__ieee754_pow+0x9c8>)
 8015f54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015f58:	4680      	mov	r8, r0
 8015f5a:	4689      	mov	r9, r1
 8015f5c:	4620      	mov	r0, r4
 8015f5e:	4629      	mov	r1, r5
 8015f60:	f7ea fb22 	bl	80005a8 <__aeabi_dmul>
 8015f64:	4602      	mov	r2, r0
 8015f66:	460b      	mov	r3, r1
 8015f68:	4640      	mov	r0, r8
 8015f6a:	4649      	mov	r1, r9
 8015f6c:	f7ea f966 	bl	800023c <__adddf3>
 8015f70:	4604      	mov	r4, r0
 8015f72:	460d      	mov	r5, r1
 8015f74:	4602      	mov	r2, r0
 8015f76:	460b      	mov	r3, r1
 8015f78:	4630      	mov	r0, r6
 8015f7a:	4639      	mov	r1, r7
 8015f7c:	f7ea f95e 	bl	800023c <__adddf3>
 8015f80:	4632      	mov	r2, r6
 8015f82:	463b      	mov	r3, r7
 8015f84:	4680      	mov	r8, r0
 8015f86:	4689      	mov	r9, r1
 8015f88:	f7ea f956 	bl	8000238 <__aeabi_dsub>
 8015f8c:	4602      	mov	r2, r0
 8015f8e:	460b      	mov	r3, r1
 8015f90:	4620      	mov	r0, r4
 8015f92:	4629      	mov	r1, r5
 8015f94:	f7ea f950 	bl	8000238 <__aeabi_dsub>
 8015f98:	4642      	mov	r2, r8
 8015f9a:	4606      	mov	r6, r0
 8015f9c:	460f      	mov	r7, r1
 8015f9e:	464b      	mov	r3, r9
 8015fa0:	4640      	mov	r0, r8
 8015fa2:	4649      	mov	r1, r9
 8015fa4:	f7ea fb00 	bl	80005a8 <__aeabi_dmul>
 8015fa8:	a35b      	add	r3, pc, #364	; (adr r3, 8016118 <__ieee754_pow+0x9d0>)
 8015faa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015fae:	4604      	mov	r4, r0
 8015fb0:	460d      	mov	r5, r1
 8015fb2:	f7ea faf9 	bl	80005a8 <__aeabi_dmul>
 8015fb6:	a35a      	add	r3, pc, #360	; (adr r3, 8016120 <__ieee754_pow+0x9d8>)
 8015fb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015fbc:	f7ea f93c 	bl	8000238 <__aeabi_dsub>
 8015fc0:	4622      	mov	r2, r4
 8015fc2:	462b      	mov	r3, r5
 8015fc4:	f7ea faf0 	bl	80005a8 <__aeabi_dmul>
 8015fc8:	a357      	add	r3, pc, #348	; (adr r3, 8016128 <__ieee754_pow+0x9e0>)
 8015fca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015fce:	f7ea f935 	bl	800023c <__adddf3>
 8015fd2:	4622      	mov	r2, r4
 8015fd4:	462b      	mov	r3, r5
 8015fd6:	f7ea fae7 	bl	80005a8 <__aeabi_dmul>
 8015fda:	a355      	add	r3, pc, #340	; (adr r3, 8016130 <__ieee754_pow+0x9e8>)
 8015fdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015fe0:	f7ea f92a 	bl	8000238 <__aeabi_dsub>
 8015fe4:	4622      	mov	r2, r4
 8015fe6:	462b      	mov	r3, r5
 8015fe8:	f7ea fade 	bl	80005a8 <__aeabi_dmul>
 8015fec:	a352      	add	r3, pc, #328	; (adr r3, 8016138 <__ieee754_pow+0x9f0>)
 8015fee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015ff2:	f7ea f923 	bl	800023c <__adddf3>
 8015ff6:	4622      	mov	r2, r4
 8015ff8:	462b      	mov	r3, r5
 8015ffa:	f7ea fad5 	bl	80005a8 <__aeabi_dmul>
 8015ffe:	4602      	mov	r2, r0
 8016000:	460b      	mov	r3, r1
 8016002:	4640      	mov	r0, r8
 8016004:	4649      	mov	r1, r9
 8016006:	f7ea f917 	bl	8000238 <__aeabi_dsub>
 801600a:	4604      	mov	r4, r0
 801600c:	460d      	mov	r5, r1
 801600e:	4602      	mov	r2, r0
 8016010:	460b      	mov	r3, r1
 8016012:	4640      	mov	r0, r8
 8016014:	4649      	mov	r1, r9
 8016016:	f7ea fac7 	bl	80005a8 <__aeabi_dmul>
 801601a:	2200      	movs	r2, #0
 801601c:	e9cd 0100 	strd	r0, r1, [sp]
 8016020:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8016024:	4620      	mov	r0, r4
 8016026:	4629      	mov	r1, r5
 8016028:	f7ea f906 	bl	8000238 <__aeabi_dsub>
 801602c:	4602      	mov	r2, r0
 801602e:	460b      	mov	r3, r1
 8016030:	e9dd 0100 	ldrd	r0, r1, [sp]
 8016034:	f7ea fbe2 	bl	80007fc <__aeabi_ddiv>
 8016038:	4632      	mov	r2, r6
 801603a:	4604      	mov	r4, r0
 801603c:	460d      	mov	r5, r1
 801603e:	463b      	mov	r3, r7
 8016040:	4640      	mov	r0, r8
 8016042:	4649      	mov	r1, r9
 8016044:	f7ea fab0 	bl	80005a8 <__aeabi_dmul>
 8016048:	4632      	mov	r2, r6
 801604a:	463b      	mov	r3, r7
 801604c:	f7ea f8f6 	bl	800023c <__adddf3>
 8016050:	4602      	mov	r2, r0
 8016052:	460b      	mov	r3, r1
 8016054:	4620      	mov	r0, r4
 8016056:	4629      	mov	r1, r5
 8016058:	f7ea f8ee 	bl	8000238 <__aeabi_dsub>
 801605c:	4642      	mov	r2, r8
 801605e:	464b      	mov	r3, r9
 8016060:	f7ea f8ea 	bl	8000238 <__aeabi_dsub>
 8016064:	4602      	mov	r2, r0
 8016066:	460b      	mov	r3, r1
 8016068:	2000      	movs	r0, #0
 801606a:	4939      	ldr	r1, [pc, #228]	; (8016150 <__ieee754_pow+0xa08>)
 801606c:	f7ea f8e4 	bl	8000238 <__aeabi_dsub>
 8016070:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 8016074:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8016078:	4602      	mov	r2, r0
 801607a:	460b      	mov	r3, r1
 801607c:	da2f      	bge.n	80160de <__ieee754_pow+0x996>
 801607e:	4650      	mov	r0, sl
 8016080:	ec43 2b10 	vmov	d0, r2, r3
 8016084:	f000 f9c0 	bl	8016408 <scalbn>
 8016088:	ec51 0b10 	vmov	r0, r1, d0
 801608c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8016090:	f7ff bbf1 	b.w	8015876 <__ieee754_pow+0x12e>
 8016094:	4b2f      	ldr	r3, [pc, #188]	; (8016154 <__ieee754_pow+0xa0c>)
 8016096:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 801609a:	429e      	cmp	r6, r3
 801609c:	f77f af0c 	ble.w	8015eb8 <__ieee754_pow+0x770>
 80160a0:	4b2d      	ldr	r3, [pc, #180]	; (8016158 <__ieee754_pow+0xa10>)
 80160a2:	440b      	add	r3, r1
 80160a4:	4303      	orrs	r3, r0
 80160a6:	d00b      	beq.n	80160c0 <__ieee754_pow+0x978>
 80160a8:	a325      	add	r3, pc, #148	; (adr r3, 8016140 <__ieee754_pow+0x9f8>)
 80160aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80160ae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80160b2:	f7ea fa79 	bl	80005a8 <__aeabi_dmul>
 80160b6:	a322      	add	r3, pc, #136	; (adr r3, 8016140 <__ieee754_pow+0x9f8>)
 80160b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80160bc:	f7ff bbdb 	b.w	8015876 <__ieee754_pow+0x12e>
 80160c0:	4622      	mov	r2, r4
 80160c2:	462b      	mov	r3, r5
 80160c4:	f7ea f8b8 	bl	8000238 <__aeabi_dsub>
 80160c8:	4642      	mov	r2, r8
 80160ca:	464b      	mov	r3, r9
 80160cc:	f7ea fcf2 	bl	8000ab4 <__aeabi_dcmpge>
 80160d0:	2800      	cmp	r0, #0
 80160d2:	f43f aef1 	beq.w	8015eb8 <__ieee754_pow+0x770>
 80160d6:	e7e7      	b.n	80160a8 <__ieee754_pow+0x960>
 80160d8:	f04f 0a00 	mov.w	sl, #0
 80160dc:	e718      	b.n	8015f10 <__ieee754_pow+0x7c8>
 80160de:	4621      	mov	r1, r4
 80160e0:	e7d4      	b.n	801608c <__ieee754_pow+0x944>
 80160e2:	2000      	movs	r0, #0
 80160e4:	491a      	ldr	r1, [pc, #104]	; (8016150 <__ieee754_pow+0xa08>)
 80160e6:	f7ff bb8f 	b.w	8015808 <__ieee754_pow+0xc0>
 80160ea:	e9dd 0100 	ldrd	r0, r1, [sp]
 80160ee:	f7ff bb8b 	b.w	8015808 <__ieee754_pow+0xc0>
 80160f2:	4630      	mov	r0, r6
 80160f4:	4639      	mov	r1, r7
 80160f6:	f7ff bb87 	b.w	8015808 <__ieee754_pow+0xc0>
 80160fa:	4693      	mov	fp, r2
 80160fc:	f7ff bb98 	b.w	8015830 <__ieee754_pow+0xe8>
 8016100:	00000000 	.word	0x00000000
 8016104:	3fe62e43 	.word	0x3fe62e43
 8016108:	fefa39ef 	.word	0xfefa39ef
 801610c:	3fe62e42 	.word	0x3fe62e42
 8016110:	0ca86c39 	.word	0x0ca86c39
 8016114:	be205c61 	.word	0xbe205c61
 8016118:	72bea4d0 	.word	0x72bea4d0
 801611c:	3e663769 	.word	0x3e663769
 8016120:	c5d26bf1 	.word	0xc5d26bf1
 8016124:	3ebbbd41 	.word	0x3ebbbd41
 8016128:	af25de2c 	.word	0xaf25de2c
 801612c:	3f11566a 	.word	0x3f11566a
 8016130:	16bebd93 	.word	0x16bebd93
 8016134:	3f66c16c 	.word	0x3f66c16c
 8016138:	5555553e 	.word	0x5555553e
 801613c:	3fc55555 	.word	0x3fc55555
 8016140:	c2f8f359 	.word	0xc2f8f359
 8016144:	01a56e1f 	.word	0x01a56e1f
 8016148:	3fe00000 	.word	0x3fe00000
 801614c:	000fffff 	.word	0x000fffff
 8016150:	3ff00000 	.word	0x3ff00000
 8016154:	4090cbff 	.word	0x4090cbff
 8016158:	3f6f3400 	.word	0x3f6f3400
 801615c:	652b82fe 	.word	0x652b82fe
 8016160:	3c971547 	.word	0x3c971547

08016164 <__ieee754_sqrt>:
 8016164:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016168:	4955      	ldr	r1, [pc, #340]	; (80162c0 <__ieee754_sqrt+0x15c>)
 801616a:	ec55 4b10 	vmov	r4, r5, d0
 801616e:	43a9      	bics	r1, r5
 8016170:	462b      	mov	r3, r5
 8016172:	462a      	mov	r2, r5
 8016174:	d112      	bne.n	801619c <__ieee754_sqrt+0x38>
 8016176:	ee10 2a10 	vmov	r2, s0
 801617a:	ee10 0a10 	vmov	r0, s0
 801617e:	4629      	mov	r1, r5
 8016180:	f7ea fa12 	bl	80005a8 <__aeabi_dmul>
 8016184:	4602      	mov	r2, r0
 8016186:	460b      	mov	r3, r1
 8016188:	4620      	mov	r0, r4
 801618a:	4629      	mov	r1, r5
 801618c:	f7ea f856 	bl	800023c <__adddf3>
 8016190:	4604      	mov	r4, r0
 8016192:	460d      	mov	r5, r1
 8016194:	ec45 4b10 	vmov	d0, r4, r5
 8016198:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801619c:	2d00      	cmp	r5, #0
 801619e:	ee10 0a10 	vmov	r0, s0
 80161a2:	4621      	mov	r1, r4
 80161a4:	dc0f      	bgt.n	80161c6 <__ieee754_sqrt+0x62>
 80161a6:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 80161aa:	4330      	orrs	r0, r6
 80161ac:	d0f2      	beq.n	8016194 <__ieee754_sqrt+0x30>
 80161ae:	b155      	cbz	r5, 80161c6 <__ieee754_sqrt+0x62>
 80161b0:	ee10 2a10 	vmov	r2, s0
 80161b4:	4620      	mov	r0, r4
 80161b6:	4629      	mov	r1, r5
 80161b8:	f7ea f83e 	bl	8000238 <__aeabi_dsub>
 80161bc:	4602      	mov	r2, r0
 80161be:	460b      	mov	r3, r1
 80161c0:	f7ea fb1c 	bl	80007fc <__aeabi_ddiv>
 80161c4:	e7e4      	b.n	8016190 <__ieee754_sqrt+0x2c>
 80161c6:	151b      	asrs	r3, r3, #20
 80161c8:	d073      	beq.n	80162b2 <__ieee754_sqrt+0x14e>
 80161ca:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80161ce:	07dd      	lsls	r5, r3, #31
 80161d0:	f3c2 0213 	ubfx	r2, r2, #0, #20
 80161d4:	bf48      	it	mi
 80161d6:	0fc8      	lsrmi	r0, r1, #31
 80161d8:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80161dc:	bf44      	itt	mi
 80161de:	0049      	lslmi	r1, r1, #1
 80161e0:	eb00 0242 	addmi.w	r2, r0, r2, lsl #1
 80161e4:	2500      	movs	r5, #0
 80161e6:	1058      	asrs	r0, r3, #1
 80161e8:	0fcb      	lsrs	r3, r1, #31
 80161ea:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 80161ee:	0049      	lsls	r1, r1, #1
 80161f0:	2316      	movs	r3, #22
 80161f2:	462c      	mov	r4, r5
 80161f4:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 80161f8:	19a7      	adds	r7, r4, r6
 80161fa:	4297      	cmp	r7, r2
 80161fc:	bfde      	ittt	le
 80161fe:	19bc      	addle	r4, r7, r6
 8016200:	1bd2      	suble	r2, r2, r7
 8016202:	19ad      	addle	r5, r5, r6
 8016204:	0fcf      	lsrs	r7, r1, #31
 8016206:	3b01      	subs	r3, #1
 8016208:	eb07 0242 	add.w	r2, r7, r2, lsl #1
 801620c:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8016210:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8016214:	d1f0      	bne.n	80161f8 <__ieee754_sqrt+0x94>
 8016216:	f04f 0c20 	mov.w	ip, #32
 801621a:	469e      	mov	lr, r3
 801621c:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8016220:	42a2      	cmp	r2, r4
 8016222:	eb06 070e 	add.w	r7, r6, lr
 8016226:	dc02      	bgt.n	801622e <__ieee754_sqrt+0xca>
 8016228:	d112      	bne.n	8016250 <__ieee754_sqrt+0xec>
 801622a:	428f      	cmp	r7, r1
 801622c:	d810      	bhi.n	8016250 <__ieee754_sqrt+0xec>
 801622e:	2f00      	cmp	r7, #0
 8016230:	eb07 0e06 	add.w	lr, r7, r6
 8016234:	da42      	bge.n	80162bc <__ieee754_sqrt+0x158>
 8016236:	f1be 0f00 	cmp.w	lr, #0
 801623a:	db3f      	blt.n	80162bc <__ieee754_sqrt+0x158>
 801623c:	f104 0801 	add.w	r8, r4, #1
 8016240:	1b12      	subs	r2, r2, r4
 8016242:	428f      	cmp	r7, r1
 8016244:	bf88      	it	hi
 8016246:	f102 32ff 	addhi.w	r2, r2, #4294967295
 801624a:	1bc9      	subs	r1, r1, r7
 801624c:	4433      	add	r3, r6
 801624e:	4644      	mov	r4, r8
 8016250:	0052      	lsls	r2, r2, #1
 8016252:	f1bc 0c01 	subs.w	ip, ip, #1
 8016256:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 801625a:	ea4f 0656 	mov.w	r6, r6, lsr #1
 801625e:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8016262:	d1dd      	bne.n	8016220 <__ieee754_sqrt+0xbc>
 8016264:	430a      	orrs	r2, r1
 8016266:	d006      	beq.n	8016276 <__ieee754_sqrt+0x112>
 8016268:	1c5c      	adds	r4, r3, #1
 801626a:	bf13      	iteet	ne
 801626c:	3301      	addne	r3, #1
 801626e:	3501      	addeq	r5, #1
 8016270:	4663      	moveq	r3, ip
 8016272:	f023 0301 	bicne.w	r3, r3, #1
 8016276:	106a      	asrs	r2, r5, #1
 8016278:	085b      	lsrs	r3, r3, #1
 801627a:	07e9      	lsls	r1, r5, #31
 801627c:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 8016280:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 8016284:	bf48      	it	mi
 8016286:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 801628a:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 801628e:	461c      	mov	r4, r3
 8016290:	e780      	b.n	8016194 <__ieee754_sqrt+0x30>
 8016292:	0aca      	lsrs	r2, r1, #11
 8016294:	3815      	subs	r0, #21
 8016296:	0549      	lsls	r1, r1, #21
 8016298:	2a00      	cmp	r2, #0
 801629a:	d0fa      	beq.n	8016292 <__ieee754_sqrt+0x12e>
 801629c:	02d6      	lsls	r6, r2, #11
 801629e:	d50a      	bpl.n	80162b6 <__ieee754_sqrt+0x152>
 80162a0:	f1c3 0420 	rsb	r4, r3, #32
 80162a4:	fa21 f404 	lsr.w	r4, r1, r4
 80162a8:	1e5d      	subs	r5, r3, #1
 80162aa:	4099      	lsls	r1, r3
 80162ac:	4322      	orrs	r2, r4
 80162ae:	1b43      	subs	r3, r0, r5
 80162b0:	e78b      	b.n	80161ca <__ieee754_sqrt+0x66>
 80162b2:	4618      	mov	r0, r3
 80162b4:	e7f0      	b.n	8016298 <__ieee754_sqrt+0x134>
 80162b6:	0052      	lsls	r2, r2, #1
 80162b8:	3301      	adds	r3, #1
 80162ba:	e7ef      	b.n	801629c <__ieee754_sqrt+0x138>
 80162bc:	46a0      	mov	r8, r4
 80162be:	e7bf      	b.n	8016240 <__ieee754_sqrt+0xdc>
 80162c0:	7ff00000 	.word	0x7ff00000

080162c4 <fabs>:
 80162c4:	ec51 0b10 	vmov	r0, r1, d0
 80162c8:	ee10 2a10 	vmov	r2, s0
 80162cc:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80162d0:	ec43 2b10 	vmov	d0, r2, r3
 80162d4:	4770      	bx	lr

080162d6 <finite>:
 80162d6:	ee10 3a90 	vmov	r3, s1
 80162da:	f043 4000 	orr.w	r0, r3, #2147483648	; 0x80000000
 80162de:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 80162e2:	0fc0      	lsrs	r0, r0, #31
 80162e4:	4770      	bx	lr

080162e6 <matherr>:
 80162e6:	2000      	movs	r0, #0
 80162e8:	4770      	bx	lr
 80162ea:	0000      	movs	r0, r0
 80162ec:	0000      	movs	r0, r0
	...

080162f0 <nan>:
 80162f0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 80162f8 <nan+0x8>
 80162f4:	4770      	bx	lr
 80162f6:	bf00      	nop
 80162f8:	00000000 	.word	0x00000000
 80162fc:	7ff80000 	.word	0x7ff80000

08016300 <rint>:
 8016300:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8016302:	ec51 0b10 	vmov	r0, r1, d0
 8016306:	f3c1 520a 	ubfx	r2, r1, #20, #11
 801630a:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 801630e:	2e13      	cmp	r6, #19
 8016310:	460b      	mov	r3, r1
 8016312:	ee10 4a10 	vmov	r4, s0
 8016316:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 801631a:	dc56      	bgt.n	80163ca <rint+0xca>
 801631c:	2e00      	cmp	r6, #0
 801631e:	da2b      	bge.n	8016378 <rint+0x78>
 8016320:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 8016324:	4302      	orrs	r2, r0
 8016326:	d023      	beq.n	8016370 <rint+0x70>
 8016328:	f3c1 0213 	ubfx	r2, r1, #0, #20
 801632c:	4302      	orrs	r2, r0
 801632e:	4254      	negs	r4, r2
 8016330:	4314      	orrs	r4, r2
 8016332:	0c4b      	lsrs	r3, r1, #17
 8016334:	0b24      	lsrs	r4, r4, #12
 8016336:	045b      	lsls	r3, r3, #17
 8016338:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 801633c:	ea44 0103 	orr.w	r1, r4, r3
 8016340:	460b      	mov	r3, r1
 8016342:	492f      	ldr	r1, [pc, #188]	; (8016400 <rint+0x100>)
 8016344:	eb01 01c5 	add.w	r1, r1, r5, lsl #3
 8016348:	e9d1 6700 	ldrd	r6, r7, [r1]
 801634c:	4602      	mov	r2, r0
 801634e:	4639      	mov	r1, r7
 8016350:	4630      	mov	r0, r6
 8016352:	f7e9 ff73 	bl	800023c <__adddf3>
 8016356:	e9cd 0100 	strd	r0, r1, [sp]
 801635a:	463b      	mov	r3, r7
 801635c:	4632      	mov	r2, r6
 801635e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8016362:	f7e9 ff69 	bl	8000238 <__aeabi_dsub>
 8016366:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801636a:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 801636e:	4639      	mov	r1, r7
 8016370:	ec41 0b10 	vmov	d0, r0, r1
 8016374:	b003      	add	sp, #12
 8016376:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016378:	4a22      	ldr	r2, [pc, #136]	; (8016404 <rint+0x104>)
 801637a:	4132      	asrs	r2, r6
 801637c:	ea01 0702 	and.w	r7, r1, r2
 8016380:	4307      	orrs	r7, r0
 8016382:	d0f5      	beq.n	8016370 <rint+0x70>
 8016384:	0852      	lsrs	r2, r2, #1
 8016386:	4011      	ands	r1, r2
 8016388:	430c      	orrs	r4, r1
 801638a:	d00b      	beq.n	80163a4 <rint+0xa4>
 801638c:	ea23 0202 	bic.w	r2, r3, r2
 8016390:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8016394:	2e13      	cmp	r6, #19
 8016396:	fa43 f306 	asr.w	r3, r3, r6
 801639a:	bf0c      	ite	eq
 801639c:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 80163a0:	2400      	movne	r4, #0
 80163a2:	4313      	orrs	r3, r2
 80163a4:	4916      	ldr	r1, [pc, #88]	; (8016400 <rint+0x100>)
 80163a6:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 80163aa:	4622      	mov	r2, r4
 80163ac:	e9d5 4500 	ldrd	r4, r5, [r5]
 80163b0:	4620      	mov	r0, r4
 80163b2:	4629      	mov	r1, r5
 80163b4:	f7e9 ff42 	bl	800023c <__adddf3>
 80163b8:	e9cd 0100 	strd	r0, r1, [sp]
 80163bc:	4622      	mov	r2, r4
 80163be:	462b      	mov	r3, r5
 80163c0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80163c4:	f7e9 ff38 	bl	8000238 <__aeabi_dsub>
 80163c8:	e7d2      	b.n	8016370 <rint+0x70>
 80163ca:	2e33      	cmp	r6, #51	; 0x33
 80163cc:	dd07      	ble.n	80163de <rint+0xde>
 80163ce:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 80163d2:	d1cd      	bne.n	8016370 <rint+0x70>
 80163d4:	ee10 2a10 	vmov	r2, s0
 80163d8:	f7e9 ff30 	bl	800023c <__adddf3>
 80163dc:	e7c8      	b.n	8016370 <rint+0x70>
 80163de:	f2a2 4613 	subw	r6, r2, #1043	; 0x413
 80163e2:	f04f 32ff 	mov.w	r2, #4294967295
 80163e6:	40f2      	lsrs	r2, r6
 80163e8:	4210      	tst	r0, r2
 80163ea:	d0c1      	beq.n	8016370 <rint+0x70>
 80163ec:	0852      	lsrs	r2, r2, #1
 80163ee:	4210      	tst	r0, r2
 80163f0:	bf1f      	itttt	ne
 80163f2:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 80163f6:	ea20 0202 	bicne.w	r2, r0, r2
 80163fa:	4134      	asrne	r4, r6
 80163fc:	4314      	orrne	r4, r2
 80163fe:	e7d1      	b.n	80163a4 <rint+0xa4>
 8016400:	08018398 	.word	0x08018398
 8016404:	000fffff 	.word	0x000fffff

08016408 <scalbn>:
 8016408:	b570      	push	{r4, r5, r6, lr}
 801640a:	ec55 4b10 	vmov	r4, r5, d0
 801640e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8016412:	4606      	mov	r6, r0
 8016414:	462b      	mov	r3, r5
 8016416:	b9aa      	cbnz	r2, 8016444 <scalbn+0x3c>
 8016418:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 801641c:	4323      	orrs	r3, r4
 801641e:	d03b      	beq.n	8016498 <scalbn+0x90>
 8016420:	4b31      	ldr	r3, [pc, #196]	; (80164e8 <scalbn+0xe0>)
 8016422:	4629      	mov	r1, r5
 8016424:	2200      	movs	r2, #0
 8016426:	ee10 0a10 	vmov	r0, s0
 801642a:	f7ea f8bd 	bl	80005a8 <__aeabi_dmul>
 801642e:	4b2f      	ldr	r3, [pc, #188]	; (80164ec <scalbn+0xe4>)
 8016430:	429e      	cmp	r6, r3
 8016432:	4604      	mov	r4, r0
 8016434:	460d      	mov	r5, r1
 8016436:	da12      	bge.n	801645e <scalbn+0x56>
 8016438:	a327      	add	r3, pc, #156	; (adr r3, 80164d8 <scalbn+0xd0>)
 801643a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801643e:	f7ea f8b3 	bl	80005a8 <__aeabi_dmul>
 8016442:	e009      	b.n	8016458 <scalbn+0x50>
 8016444:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8016448:	428a      	cmp	r2, r1
 801644a:	d10c      	bne.n	8016466 <scalbn+0x5e>
 801644c:	ee10 2a10 	vmov	r2, s0
 8016450:	4620      	mov	r0, r4
 8016452:	4629      	mov	r1, r5
 8016454:	f7e9 fef2 	bl	800023c <__adddf3>
 8016458:	4604      	mov	r4, r0
 801645a:	460d      	mov	r5, r1
 801645c:	e01c      	b.n	8016498 <scalbn+0x90>
 801645e:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8016462:	460b      	mov	r3, r1
 8016464:	3a36      	subs	r2, #54	; 0x36
 8016466:	4432      	add	r2, r6
 8016468:	f240 71fe 	movw	r1, #2046	; 0x7fe
 801646c:	428a      	cmp	r2, r1
 801646e:	dd0b      	ble.n	8016488 <scalbn+0x80>
 8016470:	ec45 4b11 	vmov	d1, r4, r5
 8016474:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 80164e0 <scalbn+0xd8>
 8016478:	f000 f83c 	bl	80164f4 <copysign>
 801647c:	a318      	add	r3, pc, #96	; (adr r3, 80164e0 <scalbn+0xd8>)
 801647e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016482:	ec51 0b10 	vmov	r0, r1, d0
 8016486:	e7da      	b.n	801643e <scalbn+0x36>
 8016488:	2a00      	cmp	r2, #0
 801648a:	dd08      	ble.n	801649e <scalbn+0x96>
 801648c:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8016490:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8016494:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8016498:	ec45 4b10 	vmov	d0, r4, r5
 801649c:	bd70      	pop	{r4, r5, r6, pc}
 801649e:	f112 0f35 	cmn.w	r2, #53	; 0x35
 80164a2:	da0d      	bge.n	80164c0 <scalbn+0xb8>
 80164a4:	f24c 3350 	movw	r3, #50000	; 0xc350
 80164a8:	429e      	cmp	r6, r3
 80164aa:	ec45 4b11 	vmov	d1, r4, r5
 80164ae:	dce1      	bgt.n	8016474 <scalbn+0x6c>
 80164b0:	ed9f 0b09 	vldr	d0, [pc, #36]	; 80164d8 <scalbn+0xd0>
 80164b4:	f000 f81e 	bl	80164f4 <copysign>
 80164b8:	a307      	add	r3, pc, #28	; (adr r3, 80164d8 <scalbn+0xd0>)
 80164ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80164be:	e7e0      	b.n	8016482 <scalbn+0x7a>
 80164c0:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80164c4:	3236      	adds	r2, #54	; 0x36
 80164c6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80164ca:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80164ce:	4620      	mov	r0, r4
 80164d0:	4629      	mov	r1, r5
 80164d2:	2200      	movs	r2, #0
 80164d4:	4b06      	ldr	r3, [pc, #24]	; (80164f0 <scalbn+0xe8>)
 80164d6:	e7b2      	b.n	801643e <scalbn+0x36>
 80164d8:	c2f8f359 	.word	0xc2f8f359
 80164dc:	01a56e1f 	.word	0x01a56e1f
 80164e0:	8800759c 	.word	0x8800759c
 80164e4:	7e37e43c 	.word	0x7e37e43c
 80164e8:	43500000 	.word	0x43500000
 80164ec:	ffff3cb0 	.word	0xffff3cb0
 80164f0:	3c900000 	.word	0x3c900000

080164f4 <copysign>:
 80164f4:	ec51 0b10 	vmov	r0, r1, d0
 80164f8:	ee11 0a90 	vmov	r0, s3
 80164fc:	ee10 2a10 	vmov	r2, s0
 8016500:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8016504:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8016508:	ea41 0300 	orr.w	r3, r1, r0
 801650c:	ec43 2b10 	vmov	d0, r2, r3
 8016510:	4770      	bx	lr
	...

08016514 <_init>:
 8016514:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016516:	bf00      	nop
 8016518:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801651a:	bc08      	pop	{r3}
 801651c:	469e      	mov	lr, r3
 801651e:	4770      	bx	lr

08016520 <_fini>:
 8016520:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016522:	bf00      	nop
 8016524:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8016526:	bc08      	pop	{r3}
 8016528:	469e      	mov	lr, r3
 801652a:	4770      	bx	lr
