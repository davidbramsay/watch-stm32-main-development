
Watch_V1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00017a0c  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002430  08017b50  08017b50  00027b50  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08019f80  08019f80  00029f80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08019f84  08019f84  00029f84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         000001f4  20000004  08019f88  00030004  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 BLE_APP_CONTEXT 00000088  200001f8  0801a17c  000301f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 TIMERSERVER_CONTEXT 00000099  20000280  0801a204  00030280  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 BLE_DRIVER_CONTEXT 0000003e  2000031c  0801a29d  0003031c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 SYSTEM_DRIVER_CONTEXT 00000011  2000035c  0801a2db  0003035c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          0002e09c  20000370  0801a2ec  00030370  2**3
                  ALLOC
 11 ._user_heap_stack 00001404  2002e40c  0801a2ec  0003e40c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0003036d  2**0
                  CONTENTS, READONLY
 13 MAPPING_TABLE 00000028  20030000  20030000  00040000  2**2
                  ALLOC
 14 MB_MEM1       000001b8  20030028  20030028  00040000  2**2
                  ALLOC
 15 MB_MEM2       00000877  200301e0  200301e0  00040000  2**2
                  ALLOC
 16 .debug_info   00054f9d  00000000  00000000  0003039d  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_abbrev 00008d03  00000000  00000000  0008533a  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_aranges 000037c8  00000000  00000000  0008e040  2**3
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_ranges 00003418  00000000  00000000  00091808  2**3
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_macro  000334b9  00000000  00000000  00094c20  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_line   00035e16  00000000  00000000  000c80d9  2**0
                  CONTENTS, READONLY, DEBUGGING
 22 .debug_str    0011225a  00000000  00000000  000fdeef  2**0
                  CONTENTS, READONLY, DEBUGGING
 23 .comment      0000007b  00000000  00000000  00210149  2**0
                  CONTENTS, READONLY
 24 .debug_frame  0000fb70  00000000  00000000  002101c4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000370 	.word	0x20000370
 800015c:	00000000 	.word	0x00000000
 8000160:	08017b34 	.word	0x08017b34

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	20000374 	.word	0x20000374
 800017c:	08017b34 	.word	0x08017b34

08000180 <strlen>:
 8000180:	4603      	mov	r3, r0
 8000182:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000186:	2a00      	cmp	r2, #0
 8000188:	d1fb      	bne.n	8000182 <strlen+0x2>
 800018a:	1a18      	subs	r0, r3, r0
 800018c:	3801      	subs	r0, #1
 800018e:	4770      	bx	lr

08000190 <memchr>:
 8000190:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000194:	2a10      	cmp	r2, #16
 8000196:	db2b      	blt.n	80001f0 <memchr+0x60>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	d008      	beq.n	80001b0 <memchr+0x20>
 800019e:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001a2:	3a01      	subs	r2, #1
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d02d      	beq.n	8000204 <memchr+0x74>
 80001a8:	f010 0f07 	tst.w	r0, #7
 80001ac:	b342      	cbz	r2, 8000200 <memchr+0x70>
 80001ae:	d1f6      	bne.n	800019e <memchr+0xe>
 80001b0:	b4f0      	push	{r4, r5, r6, r7}
 80001b2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001b6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001ba:	f022 0407 	bic.w	r4, r2, #7
 80001be:	f07f 0700 	mvns.w	r7, #0
 80001c2:	2300      	movs	r3, #0
 80001c4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001c8:	3c08      	subs	r4, #8
 80001ca:	ea85 0501 	eor.w	r5, r5, r1
 80001ce:	ea86 0601 	eor.w	r6, r6, r1
 80001d2:	fa85 f547 	uadd8	r5, r5, r7
 80001d6:	faa3 f587 	sel	r5, r3, r7
 80001da:	fa86 f647 	uadd8	r6, r6, r7
 80001de:	faa5 f687 	sel	r6, r5, r7
 80001e2:	b98e      	cbnz	r6, 8000208 <memchr+0x78>
 80001e4:	d1ee      	bne.n	80001c4 <memchr+0x34>
 80001e6:	bcf0      	pop	{r4, r5, r6, r7}
 80001e8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001ec:	f002 0207 	and.w	r2, r2, #7
 80001f0:	b132      	cbz	r2, 8000200 <memchr+0x70>
 80001f2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f6:	3a01      	subs	r2, #1
 80001f8:	ea83 0301 	eor.w	r3, r3, r1
 80001fc:	b113      	cbz	r3, 8000204 <memchr+0x74>
 80001fe:	d1f8      	bne.n	80001f2 <memchr+0x62>
 8000200:	2000      	movs	r0, #0
 8000202:	4770      	bx	lr
 8000204:	3801      	subs	r0, #1
 8000206:	4770      	bx	lr
 8000208:	2d00      	cmp	r5, #0
 800020a:	bf06      	itte	eq
 800020c:	4635      	moveq	r5, r6
 800020e:	3803      	subeq	r0, #3
 8000210:	3807      	subne	r0, #7
 8000212:	f015 0f01 	tst.w	r5, #1
 8000216:	d107      	bne.n	8000228 <memchr+0x98>
 8000218:	3001      	adds	r0, #1
 800021a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800021e:	bf02      	ittt	eq
 8000220:	3001      	addeq	r0, #1
 8000222:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000226:	3001      	addeq	r0, #1
 8000228:	bcf0      	pop	{r4, r5, r6, r7}
 800022a:	3801      	subs	r0, #1
 800022c:	4770      	bx	lr
 800022e:	bf00      	nop

08000230 <__aeabi_drsub>:
 8000230:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000234:	e002      	b.n	800023c <__adddf3>
 8000236:	bf00      	nop

08000238 <__aeabi_dsub>:
 8000238:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800023c <__adddf3>:
 800023c:	b530      	push	{r4, r5, lr}
 800023e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000242:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000246:	ea94 0f05 	teq	r4, r5
 800024a:	bf08      	it	eq
 800024c:	ea90 0f02 	teqeq	r0, r2
 8000250:	bf1f      	itttt	ne
 8000252:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000256:	ea55 0c02 	orrsne.w	ip, r5, r2
 800025a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800025e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000262:	f000 80e2 	beq.w	800042a <__adddf3+0x1ee>
 8000266:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800026a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800026e:	bfb8      	it	lt
 8000270:	426d      	neglt	r5, r5
 8000272:	dd0c      	ble.n	800028e <__adddf3+0x52>
 8000274:	442c      	add	r4, r5
 8000276:	ea80 0202 	eor.w	r2, r0, r2
 800027a:	ea81 0303 	eor.w	r3, r1, r3
 800027e:	ea82 0000 	eor.w	r0, r2, r0
 8000282:	ea83 0101 	eor.w	r1, r3, r1
 8000286:	ea80 0202 	eor.w	r2, r0, r2
 800028a:	ea81 0303 	eor.w	r3, r1, r3
 800028e:	2d36      	cmp	r5, #54	; 0x36
 8000290:	bf88      	it	hi
 8000292:	bd30      	pophi	{r4, r5, pc}
 8000294:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000298:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800029c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002a0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002a4:	d002      	beq.n	80002ac <__adddf3+0x70>
 80002a6:	4240      	negs	r0, r0
 80002a8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ac:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002b4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002b8:	d002      	beq.n	80002c0 <__adddf3+0x84>
 80002ba:	4252      	negs	r2, r2
 80002bc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c0:	ea94 0f05 	teq	r4, r5
 80002c4:	f000 80a7 	beq.w	8000416 <__adddf3+0x1da>
 80002c8:	f1a4 0401 	sub.w	r4, r4, #1
 80002cc:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d0:	db0d      	blt.n	80002ee <__adddf3+0xb2>
 80002d2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002d6:	fa22 f205 	lsr.w	r2, r2, r5
 80002da:	1880      	adds	r0, r0, r2
 80002dc:	f141 0100 	adc.w	r1, r1, #0
 80002e0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002e4:	1880      	adds	r0, r0, r2
 80002e6:	fa43 f305 	asr.w	r3, r3, r5
 80002ea:	4159      	adcs	r1, r3
 80002ec:	e00e      	b.n	800030c <__adddf3+0xd0>
 80002ee:	f1a5 0520 	sub.w	r5, r5, #32
 80002f2:	f10e 0e20 	add.w	lr, lr, #32
 80002f6:	2a01      	cmp	r2, #1
 80002f8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002fc:	bf28      	it	cs
 80002fe:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000302:	fa43 f305 	asr.w	r3, r3, r5
 8000306:	18c0      	adds	r0, r0, r3
 8000308:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800030c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000310:	d507      	bpl.n	8000322 <__adddf3+0xe6>
 8000312:	f04f 0e00 	mov.w	lr, #0
 8000316:	f1dc 0c00 	rsbs	ip, ip, #0
 800031a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800031e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000322:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000326:	d31b      	bcc.n	8000360 <__adddf3+0x124>
 8000328:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800032c:	d30c      	bcc.n	8000348 <__adddf3+0x10c>
 800032e:	0849      	lsrs	r1, r1, #1
 8000330:	ea5f 0030 	movs.w	r0, r0, rrx
 8000334:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000338:	f104 0401 	add.w	r4, r4, #1
 800033c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000340:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000344:	f080 809a 	bcs.w	800047c <__adddf3+0x240>
 8000348:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800034c:	bf08      	it	eq
 800034e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000352:	f150 0000 	adcs.w	r0, r0, #0
 8000356:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800035a:	ea41 0105 	orr.w	r1, r1, r5
 800035e:	bd30      	pop	{r4, r5, pc}
 8000360:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000364:	4140      	adcs	r0, r0
 8000366:	eb41 0101 	adc.w	r1, r1, r1
 800036a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800036e:	f1a4 0401 	sub.w	r4, r4, #1
 8000372:	d1e9      	bne.n	8000348 <__adddf3+0x10c>
 8000374:	f091 0f00 	teq	r1, #0
 8000378:	bf04      	itt	eq
 800037a:	4601      	moveq	r1, r0
 800037c:	2000      	moveq	r0, #0
 800037e:	fab1 f381 	clz	r3, r1
 8000382:	bf08      	it	eq
 8000384:	3320      	addeq	r3, #32
 8000386:	f1a3 030b 	sub.w	r3, r3, #11
 800038a:	f1b3 0220 	subs.w	r2, r3, #32
 800038e:	da0c      	bge.n	80003aa <__adddf3+0x16e>
 8000390:	320c      	adds	r2, #12
 8000392:	dd08      	ble.n	80003a6 <__adddf3+0x16a>
 8000394:	f102 0c14 	add.w	ip, r2, #20
 8000398:	f1c2 020c 	rsb	r2, r2, #12
 800039c:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a0:	fa21 f102 	lsr.w	r1, r1, r2
 80003a4:	e00c      	b.n	80003c0 <__adddf3+0x184>
 80003a6:	f102 0214 	add.w	r2, r2, #20
 80003aa:	bfd8      	it	le
 80003ac:	f1c2 0c20 	rsble	ip, r2, #32
 80003b0:	fa01 f102 	lsl.w	r1, r1, r2
 80003b4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003b8:	bfdc      	itt	le
 80003ba:	ea41 010c 	orrle.w	r1, r1, ip
 80003be:	4090      	lslle	r0, r2
 80003c0:	1ae4      	subs	r4, r4, r3
 80003c2:	bfa2      	ittt	ge
 80003c4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003c8:	4329      	orrge	r1, r5
 80003ca:	bd30      	popge	{r4, r5, pc}
 80003cc:	ea6f 0404 	mvn.w	r4, r4
 80003d0:	3c1f      	subs	r4, #31
 80003d2:	da1c      	bge.n	800040e <__adddf3+0x1d2>
 80003d4:	340c      	adds	r4, #12
 80003d6:	dc0e      	bgt.n	80003f6 <__adddf3+0x1ba>
 80003d8:	f104 0414 	add.w	r4, r4, #20
 80003dc:	f1c4 0220 	rsb	r2, r4, #32
 80003e0:	fa20 f004 	lsr.w	r0, r0, r4
 80003e4:	fa01 f302 	lsl.w	r3, r1, r2
 80003e8:	ea40 0003 	orr.w	r0, r0, r3
 80003ec:	fa21 f304 	lsr.w	r3, r1, r4
 80003f0:	ea45 0103 	orr.w	r1, r5, r3
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	f1c4 040c 	rsb	r4, r4, #12
 80003fa:	f1c4 0220 	rsb	r2, r4, #32
 80003fe:	fa20 f002 	lsr.w	r0, r0, r2
 8000402:	fa01 f304 	lsl.w	r3, r1, r4
 8000406:	ea40 0003 	orr.w	r0, r0, r3
 800040a:	4629      	mov	r1, r5
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	fa21 f004 	lsr.w	r0, r1, r4
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	f094 0f00 	teq	r4, #0
 800041a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800041e:	bf06      	itte	eq
 8000420:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000424:	3401      	addeq	r4, #1
 8000426:	3d01      	subne	r5, #1
 8000428:	e74e      	b.n	80002c8 <__adddf3+0x8c>
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf18      	it	ne
 8000430:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000434:	d029      	beq.n	800048a <__adddf3+0x24e>
 8000436:	ea94 0f05 	teq	r4, r5
 800043a:	bf08      	it	eq
 800043c:	ea90 0f02 	teqeq	r0, r2
 8000440:	d005      	beq.n	800044e <__adddf3+0x212>
 8000442:	ea54 0c00 	orrs.w	ip, r4, r0
 8000446:	bf04      	itt	eq
 8000448:	4619      	moveq	r1, r3
 800044a:	4610      	moveq	r0, r2
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	ea91 0f03 	teq	r1, r3
 8000452:	bf1e      	ittt	ne
 8000454:	2100      	movne	r1, #0
 8000456:	2000      	movne	r0, #0
 8000458:	bd30      	popne	{r4, r5, pc}
 800045a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800045e:	d105      	bne.n	800046c <__adddf3+0x230>
 8000460:	0040      	lsls	r0, r0, #1
 8000462:	4149      	adcs	r1, r1
 8000464:	bf28      	it	cs
 8000466:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800046a:	bd30      	pop	{r4, r5, pc}
 800046c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000470:	bf3c      	itt	cc
 8000472:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000476:	bd30      	popcc	{r4, r5, pc}
 8000478:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800047c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000480:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000484:	f04f 0000 	mov.w	r0, #0
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf1a      	itte	ne
 8000490:	4619      	movne	r1, r3
 8000492:	4610      	movne	r0, r2
 8000494:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000498:	bf1c      	itt	ne
 800049a:	460b      	movne	r3, r1
 800049c:	4602      	movne	r2, r0
 800049e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004a2:	bf06      	itte	eq
 80004a4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004a8:	ea91 0f03 	teqeq	r1, r3
 80004ac:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004b0:	bd30      	pop	{r4, r5, pc}
 80004b2:	bf00      	nop

080004b4 <__aeabi_ui2d>:
 80004b4:	f090 0f00 	teq	r0, #0
 80004b8:	bf04      	itt	eq
 80004ba:	2100      	moveq	r1, #0
 80004bc:	4770      	bxeq	lr
 80004be:	b530      	push	{r4, r5, lr}
 80004c0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004c4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c8:	f04f 0500 	mov.w	r5, #0
 80004cc:	f04f 0100 	mov.w	r1, #0
 80004d0:	e750      	b.n	8000374 <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_i2d>:
 80004d4:	f090 0f00 	teq	r0, #0
 80004d8:	bf04      	itt	eq
 80004da:	2100      	moveq	r1, #0
 80004dc:	4770      	bxeq	lr
 80004de:	b530      	push	{r4, r5, lr}
 80004e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004e8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004ec:	bf48      	it	mi
 80004ee:	4240      	negmi	r0, r0
 80004f0:	f04f 0100 	mov.w	r1, #0
 80004f4:	e73e      	b.n	8000374 <__adddf3+0x138>
 80004f6:	bf00      	nop

080004f8 <__aeabi_f2d>:
 80004f8:	0042      	lsls	r2, r0, #1
 80004fa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004fe:	ea4f 0131 	mov.w	r1, r1, rrx
 8000502:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000506:	bf1f      	itttt	ne
 8000508:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800050c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000510:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000514:	4770      	bxne	lr
 8000516:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800051a:	bf08      	it	eq
 800051c:	4770      	bxeq	lr
 800051e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000522:	bf04      	itt	eq
 8000524:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000528:	4770      	bxeq	lr
 800052a:	b530      	push	{r4, r5, lr}
 800052c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000530:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000534:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000538:	e71c      	b.n	8000374 <__adddf3+0x138>
 800053a:	bf00      	nop

0800053c <__aeabi_ul2d>:
 800053c:	ea50 0201 	orrs.w	r2, r0, r1
 8000540:	bf08      	it	eq
 8000542:	4770      	bxeq	lr
 8000544:	b530      	push	{r4, r5, lr}
 8000546:	f04f 0500 	mov.w	r5, #0
 800054a:	e00a      	b.n	8000562 <__aeabi_l2d+0x16>

0800054c <__aeabi_l2d>:
 800054c:	ea50 0201 	orrs.w	r2, r0, r1
 8000550:	bf08      	it	eq
 8000552:	4770      	bxeq	lr
 8000554:	b530      	push	{r4, r5, lr}
 8000556:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800055a:	d502      	bpl.n	8000562 <__aeabi_l2d+0x16>
 800055c:	4240      	negs	r0, r0
 800055e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000562:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000566:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800056a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800056e:	f43f aed8 	beq.w	8000322 <__adddf3+0xe6>
 8000572:	f04f 0203 	mov.w	r2, #3
 8000576:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800057a:	bf18      	it	ne
 800057c:	3203      	addne	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800058a:	f1c2 0320 	rsb	r3, r2, #32
 800058e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000592:	fa20 f002 	lsr.w	r0, r0, r2
 8000596:	fa01 fe03 	lsl.w	lr, r1, r3
 800059a:	ea40 000e 	orr.w	r0, r0, lr
 800059e:	fa21 f102 	lsr.w	r1, r1, r2
 80005a2:	4414      	add	r4, r2
 80005a4:	e6bd      	b.n	8000322 <__adddf3+0xe6>
 80005a6:	bf00      	nop

080005a8 <__aeabi_dmul>:
 80005a8:	b570      	push	{r4, r5, r6, lr}
 80005aa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ae:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005b2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005b6:	bf1d      	ittte	ne
 80005b8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005bc:	ea94 0f0c 	teqne	r4, ip
 80005c0:	ea95 0f0c 	teqne	r5, ip
 80005c4:	f000 f8de 	bleq	8000784 <__aeabi_dmul+0x1dc>
 80005c8:	442c      	add	r4, r5
 80005ca:	ea81 0603 	eor.w	r6, r1, r3
 80005ce:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005d2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005d6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005da:	bf18      	it	ne
 80005dc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005e4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005e8:	d038      	beq.n	800065c <__aeabi_dmul+0xb4>
 80005ea:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ee:	f04f 0500 	mov.w	r5, #0
 80005f2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005f6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005fa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005fe:	f04f 0600 	mov.w	r6, #0
 8000602:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000606:	f09c 0f00 	teq	ip, #0
 800060a:	bf18      	it	ne
 800060c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000610:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000614:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000618:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800061c:	d204      	bcs.n	8000628 <__aeabi_dmul+0x80>
 800061e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000622:	416d      	adcs	r5, r5
 8000624:	eb46 0606 	adc.w	r6, r6, r6
 8000628:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800062c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000630:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000634:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000638:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800063c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000640:	bf88      	it	hi
 8000642:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000646:	d81e      	bhi.n	8000686 <__aeabi_dmul+0xde>
 8000648:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800064c:	bf08      	it	eq
 800064e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000652:	f150 0000 	adcs.w	r0, r0, #0
 8000656:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800065a:	bd70      	pop	{r4, r5, r6, pc}
 800065c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000660:	ea46 0101 	orr.w	r1, r6, r1
 8000664:	ea40 0002 	orr.w	r0, r0, r2
 8000668:	ea81 0103 	eor.w	r1, r1, r3
 800066c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000670:	bfc2      	ittt	gt
 8000672:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000676:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800067a:	bd70      	popgt	{r4, r5, r6, pc}
 800067c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000680:	f04f 0e00 	mov.w	lr, #0
 8000684:	3c01      	subs	r4, #1
 8000686:	f300 80ab 	bgt.w	80007e0 <__aeabi_dmul+0x238>
 800068a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800068e:	bfde      	ittt	le
 8000690:	2000      	movle	r0, #0
 8000692:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000696:	bd70      	pople	{r4, r5, r6, pc}
 8000698:	f1c4 0400 	rsb	r4, r4, #0
 800069c:	3c20      	subs	r4, #32
 800069e:	da35      	bge.n	800070c <__aeabi_dmul+0x164>
 80006a0:	340c      	adds	r4, #12
 80006a2:	dc1b      	bgt.n	80006dc <__aeabi_dmul+0x134>
 80006a4:	f104 0414 	add.w	r4, r4, #20
 80006a8:	f1c4 0520 	rsb	r5, r4, #32
 80006ac:	fa00 f305 	lsl.w	r3, r0, r5
 80006b0:	fa20 f004 	lsr.w	r0, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea40 0002 	orr.w	r0, r0, r2
 80006bc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006c0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006c8:	fa21 f604 	lsr.w	r6, r1, r4
 80006cc:	eb42 0106 	adc.w	r1, r2, r6
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f1c4 040c 	rsb	r4, r4, #12
 80006e0:	f1c4 0520 	rsb	r5, r4, #32
 80006e4:	fa00 f304 	lsl.w	r3, r0, r4
 80006e8:	fa20 f005 	lsr.w	r0, r0, r5
 80006ec:	fa01 f204 	lsl.w	r2, r1, r4
 80006f0:	ea40 0002 	orr.w	r0, r0, r2
 80006f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006f8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006fc:	f141 0100 	adc.w	r1, r1, #0
 8000700:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000704:	bf08      	it	eq
 8000706:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f1c4 0520 	rsb	r5, r4, #32
 8000710:	fa00 f205 	lsl.w	r2, r0, r5
 8000714:	ea4e 0e02 	orr.w	lr, lr, r2
 8000718:	fa20 f304 	lsr.w	r3, r0, r4
 800071c:	fa01 f205 	lsl.w	r2, r1, r5
 8000720:	ea43 0302 	orr.w	r3, r3, r2
 8000724:	fa21 f004 	lsr.w	r0, r1, r4
 8000728:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800072c:	fa21 f204 	lsr.w	r2, r1, r4
 8000730:	ea20 0002 	bic.w	r0, r0, r2
 8000734:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000738:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800073c:	bf08      	it	eq
 800073e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000742:	bd70      	pop	{r4, r5, r6, pc}
 8000744:	f094 0f00 	teq	r4, #0
 8000748:	d10f      	bne.n	800076a <__aeabi_dmul+0x1c2>
 800074a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800074e:	0040      	lsls	r0, r0, #1
 8000750:	eb41 0101 	adc.w	r1, r1, r1
 8000754:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000758:	bf08      	it	eq
 800075a:	3c01      	subeq	r4, #1
 800075c:	d0f7      	beq.n	800074e <__aeabi_dmul+0x1a6>
 800075e:	ea41 0106 	orr.w	r1, r1, r6
 8000762:	f095 0f00 	teq	r5, #0
 8000766:	bf18      	it	ne
 8000768:	4770      	bxne	lr
 800076a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800076e:	0052      	lsls	r2, r2, #1
 8000770:	eb43 0303 	adc.w	r3, r3, r3
 8000774:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000778:	bf08      	it	eq
 800077a:	3d01      	subeq	r5, #1
 800077c:	d0f7      	beq.n	800076e <__aeabi_dmul+0x1c6>
 800077e:	ea43 0306 	orr.w	r3, r3, r6
 8000782:	4770      	bx	lr
 8000784:	ea94 0f0c 	teq	r4, ip
 8000788:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800078c:	bf18      	it	ne
 800078e:	ea95 0f0c 	teqne	r5, ip
 8000792:	d00c      	beq.n	80007ae <__aeabi_dmul+0x206>
 8000794:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000798:	bf18      	it	ne
 800079a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800079e:	d1d1      	bne.n	8000744 <__aeabi_dmul+0x19c>
 80007a0:	ea81 0103 	eor.w	r1, r1, r3
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a8:	f04f 0000 	mov.w	r0, #0
 80007ac:	bd70      	pop	{r4, r5, r6, pc}
 80007ae:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007b2:	bf06      	itte	eq
 80007b4:	4610      	moveq	r0, r2
 80007b6:	4619      	moveq	r1, r3
 80007b8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007bc:	d019      	beq.n	80007f2 <__aeabi_dmul+0x24a>
 80007be:	ea94 0f0c 	teq	r4, ip
 80007c2:	d102      	bne.n	80007ca <__aeabi_dmul+0x222>
 80007c4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007c8:	d113      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007ca:	ea95 0f0c 	teq	r5, ip
 80007ce:	d105      	bne.n	80007dc <__aeabi_dmul+0x234>
 80007d0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007d4:	bf1c      	itt	ne
 80007d6:	4610      	movne	r0, r2
 80007d8:	4619      	movne	r1, r3
 80007da:	d10a      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007dc:	ea81 0103 	eor.w	r1, r1, r3
 80007e0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007e8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007ec:	f04f 0000 	mov.w	r0, #0
 80007f0:	bd70      	pop	{r4, r5, r6, pc}
 80007f2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007f6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007fa:	bd70      	pop	{r4, r5, r6, pc}

080007fc <__aeabi_ddiv>:
 80007fc:	b570      	push	{r4, r5, r6, lr}
 80007fe:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000802:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000806:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800080a:	bf1d      	ittte	ne
 800080c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000810:	ea94 0f0c 	teqne	r4, ip
 8000814:	ea95 0f0c 	teqne	r5, ip
 8000818:	f000 f8a7 	bleq	800096a <__aeabi_ddiv+0x16e>
 800081c:	eba4 0405 	sub.w	r4, r4, r5
 8000820:	ea81 0e03 	eor.w	lr, r1, r3
 8000824:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000828:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800082c:	f000 8088 	beq.w	8000940 <__aeabi_ddiv+0x144>
 8000830:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000834:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000838:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800083c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000840:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000844:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000848:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800084c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000850:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000854:	429d      	cmp	r5, r3
 8000856:	bf08      	it	eq
 8000858:	4296      	cmpeq	r6, r2
 800085a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800085e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000862:	d202      	bcs.n	800086a <__aeabi_ddiv+0x6e>
 8000864:	085b      	lsrs	r3, r3, #1
 8000866:	ea4f 0232 	mov.w	r2, r2, rrx
 800086a:	1ab6      	subs	r6, r6, r2
 800086c:	eb65 0503 	sbc.w	r5, r5, r3
 8000870:	085b      	lsrs	r3, r3, #1
 8000872:	ea4f 0232 	mov.w	r2, r2, rrx
 8000876:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800087a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ce:	bf22      	ittt	cs
 80008d0:	1ab6      	subcs	r6, r6, r2
 80008d2:	4675      	movcs	r5, lr
 80008d4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008d8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008dc:	d018      	beq.n	8000910 <__aeabi_ddiv+0x114>
 80008de:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008e2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008e6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008ea:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ee:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008f2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008f6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008fa:	d1c0      	bne.n	800087e <__aeabi_ddiv+0x82>
 80008fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000900:	d10b      	bne.n	800091a <__aeabi_ddiv+0x11e>
 8000902:	ea41 0100 	orr.w	r1, r1, r0
 8000906:	f04f 0000 	mov.w	r0, #0
 800090a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800090e:	e7b6      	b.n	800087e <__aeabi_ddiv+0x82>
 8000910:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000914:	bf04      	itt	eq
 8000916:	4301      	orreq	r1, r0
 8000918:	2000      	moveq	r0, #0
 800091a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800091e:	bf88      	it	hi
 8000920:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000924:	f63f aeaf 	bhi.w	8000686 <__aeabi_dmul+0xde>
 8000928:	ebb5 0c03 	subs.w	ip, r5, r3
 800092c:	bf04      	itt	eq
 800092e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000932:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000936:	f150 0000 	adcs.w	r0, r0, #0
 800093a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800093e:	bd70      	pop	{r4, r5, r6, pc}
 8000940:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000944:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000948:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800094c:	bfc2      	ittt	gt
 800094e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000952:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000956:	bd70      	popgt	{r4, r5, r6, pc}
 8000958:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800095c:	f04f 0e00 	mov.w	lr, #0
 8000960:	3c01      	subs	r4, #1
 8000962:	e690      	b.n	8000686 <__aeabi_dmul+0xde>
 8000964:	ea45 0e06 	orr.w	lr, r5, r6
 8000968:	e68d      	b.n	8000686 <__aeabi_dmul+0xde>
 800096a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800096e:	ea94 0f0c 	teq	r4, ip
 8000972:	bf08      	it	eq
 8000974:	ea95 0f0c 	teqeq	r5, ip
 8000978:	f43f af3b 	beq.w	80007f2 <__aeabi_dmul+0x24a>
 800097c:	ea94 0f0c 	teq	r4, ip
 8000980:	d10a      	bne.n	8000998 <__aeabi_ddiv+0x19c>
 8000982:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000986:	f47f af34 	bne.w	80007f2 <__aeabi_dmul+0x24a>
 800098a:	ea95 0f0c 	teq	r5, ip
 800098e:	f47f af25 	bne.w	80007dc <__aeabi_dmul+0x234>
 8000992:	4610      	mov	r0, r2
 8000994:	4619      	mov	r1, r3
 8000996:	e72c      	b.n	80007f2 <__aeabi_dmul+0x24a>
 8000998:	ea95 0f0c 	teq	r5, ip
 800099c:	d106      	bne.n	80009ac <__aeabi_ddiv+0x1b0>
 800099e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009a2:	f43f aefd 	beq.w	80007a0 <__aeabi_dmul+0x1f8>
 80009a6:	4610      	mov	r0, r2
 80009a8:	4619      	mov	r1, r3
 80009aa:	e722      	b.n	80007f2 <__aeabi_dmul+0x24a>
 80009ac:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b0:	bf18      	it	ne
 80009b2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009b6:	f47f aec5 	bne.w	8000744 <__aeabi_dmul+0x19c>
 80009ba:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009be:	f47f af0d 	bne.w	80007dc <__aeabi_dmul+0x234>
 80009c2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009c6:	f47f aeeb 	bne.w	80007a0 <__aeabi_dmul+0x1f8>
 80009ca:	e712      	b.n	80007f2 <__aeabi_dmul+0x24a>

080009cc <__gedf2>:
 80009cc:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 80009d0:	e006      	b.n	80009e0 <__cmpdf2+0x4>
 80009d2:	bf00      	nop

080009d4 <__ledf2>:
 80009d4:	f04f 0c01 	mov.w	ip, #1
 80009d8:	e002      	b.n	80009e0 <__cmpdf2+0x4>
 80009da:	bf00      	nop

080009dc <__cmpdf2>:
 80009dc:	f04f 0c01 	mov.w	ip, #1
 80009e0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009e4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009e8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009ec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009f6:	d01b      	beq.n	8000a30 <__cmpdf2+0x54>
 80009f8:	b001      	add	sp, #4
 80009fa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009fe:	bf0c      	ite	eq
 8000a00:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a04:	ea91 0f03 	teqne	r1, r3
 8000a08:	bf02      	ittt	eq
 8000a0a:	ea90 0f02 	teqeq	r0, r2
 8000a0e:	2000      	moveq	r0, #0
 8000a10:	4770      	bxeq	lr
 8000a12:	f110 0f00 	cmn.w	r0, #0
 8000a16:	ea91 0f03 	teq	r1, r3
 8000a1a:	bf58      	it	pl
 8000a1c:	4299      	cmppl	r1, r3
 8000a1e:	bf08      	it	eq
 8000a20:	4290      	cmpeq	r0, r2
 8000a22:	bf2c      	ite	cs
 8000a24:	17d8      	asrcs	r0, r3, #31
 8000a26:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a2a:	f040 0001 	orr.w	r0, r0, #1
 8000a2e:	4770      	bx	lr
 8000a30:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a38:	d102      	bne.n	8000a40 <__cmpdf2+0x64>
 8000a3a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a3e:	d107      	bne.n	8000a50 <__cmpdf2+0x74>
 8000a40:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a44:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a48:	d1d6      	bne.n	80009f8 <__cmpdf2+0x1c>
 8000a4a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a4e:	d0d3      	beq.n	80009f8 <__cmpdf2+0x1c>
 8000a50:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a54:	4770      	bx	lr
 8000a56:	bf00      	nop

08000a58 <__aeabi_cdrcmple>:
 8000a58:	4684      	mov	ip, r0
 8000a5a:	4610      	mov	r0, r2
 8000a5c:	4662      	mov	r2, ip
 8000a5e:	468c      	mov	ip, r1
 8000a60:	4619      	mov	r1, r3
 8000a62:	4663      	mov	r3, ip
 8000a64:	e000      	b.n	8000a68 <__aeabi_cdcmpeq>
 8000a66:	bf00      	nop

08000a68 <__aeabi_cdcmpeq>:
 8000a68:	b501      	push	{r0, lr}
 8000a6a:	f7ff ffb7 	bl	80009dc <__cmpdf2>
 8000a6e:	2800      	cmp	r0, #0
 8000a70:	bf48      	it	mi
 8000a72:	f110 0f00 	cmnmi.w	r0, #0
 8000a76:	bd01      	pop	{r0, pc}

08000a78 <__aeabi_dcmpeq>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff fff4 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a80:	bf0c      	ite	eq
 8000a82:	2001      	moveq	r0, #1
 8000a84:	2000      	movne	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_dcmplt>:
 8000a8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a90:	f7ff ffea 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a94:	bf34      	ite	cc
 8000a96:	2001      	movcc	r0, #1
 8000a98:	2000      	movcs	r0, #0
 8000a9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_dcmple>:
 8000aa0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa4:	f7ff ffe0 	bl	8000a68 <__aeabi_cdcmpeq>
 8000aa8:	bf94      	ite	ls
 8000aaa:	2001      	movls	r0, #1
 8000aac:	2000      	movhi	r0, #0
 8000aae:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab2:	bf00      	nop

08000ab4 <__aeabi_dcmpge>:
 8000ab4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab8:	f7ff ffce 	bl	8000a58 <__aeabi_cdrcmple>
 8000abc:	bf94      	ite	ls
 8000abe:	2001      	movls	r0, #1
 8000ac0:	2000      	movhi	r0, #0
 8000ac2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_dcmpgt>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff ffc4 	bl	8000a58 <__aeabi_cdrcmple>
 8000ad0:	bf34      	ite	cc
 8000ad2:	2001      	movcc	r0, #1
 8000ad4:	2000      	movcs	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmpun>:
 8000adc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae4:	d102      	bne.n	8000aec <__aeabi_dcmpun+0x10>
 8000ae6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aea:	d10a      	bne.n	8000b02 <__aeabi_dcmpun+0x26>
 8000aec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af4:	d102      	bne.n	8000afc <__aeabi_dcmpun+0x20>
 8000af6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afa:	d102      	bne.n	8000b02 <__aeabi_dcmpun+0x26>
 8000afc:	f04f 0000 	mov.w	r0, #0
 8000b00:	4770      	bx	lr
 8000b02:	f04f 0001 	mov.w	r0, #1
 8000b06:	4770      	bx	lr

08000b08 <__aeabi_d2iz>:
 8000b08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b0c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b10:	d215      	bcs.n	8000b3e <__aeabi_d2iz+0x36>
 8000b12:	d511      	bpl.n	8000b38 <__aeabi_d2iz+0x30>
 8000b14:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b18:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b1c:	d912      	bls.n	8000b44 <__aeabi_d2iz+0x3c>
 8000b1e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b22:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b26:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b2a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b2e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b32:	bf18      	it	ne
 8000b34:	4240      	negne	r0, r0
 8000b36:	4770      	bx	lr
 8000b38:	f04f 0000 	mov.w	r0, #0
 8000b3c:	4770      	bx	lr
 8000b3e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b42:	d105      	bne.n	8000b50 <__aeabi_d2iz+0x48>
 8000b44:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b48:	bf08      	it	eq
 8000b4a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b4e:	4770      	bx	lr
 8000b50:	f04f 0000 	mov.w	r0, #0
 8000b54:	4770      	bx	lr
 8000b56:	bf00      	nop

08000b58 <__aeabi_d2f>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b60:	bf24      	itt	cs
 8000b62:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b66:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b6a:	d90d      	bls.n	8000b88 <__aeabi_d2f+0x30>
 8000b6c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b70:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b74:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b78:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b7c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b80:	bf08      	it	eq
 8000b82:	f020 0001 	biceq.w	r0, r0, #1
 8000b86:	4770      	bx	lr
 8000b88:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b8c:	d121      	bne.n	8000bd2 <__aeabi_d2f+0x7a>
 8000b8e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b92:	bfbc      	itt	lt
 8000b94:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	4770      	bxlt	lr
 8000b9a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b9e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ba2:	f1c2 0218 	rsb	r2, r2, #24
 8000ba6:	f1c2 0c20 	rsb	ip, r2, #32
 8000baa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bae:	fa20 f002 	lsr.w	r0, r0, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	f040 0001 	orrne.w	r0, r0, #1
 8000bb8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bbc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000bc0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bc4:	ea40 000c 	orr.w	r0, r0, ip
 8000bc8:	fa23 f302 	lsr.w	r3, r3, r2
 8000bcc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bd0:	e7cc      	b.n	8000b6c <__aeabi_d2f+0x14>
 8000bd2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bd6:	d107      	bne.n	8000be8 <__aeabi_d2f+0x90>
 8000bd8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bdc:	bf1e      	ittt	ne
 8000bde:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000be2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000be6:	4770      	bxne	lr
 8000be8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000bec:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000bf0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <LL_FLASH_GetUDN>:
  * @note   The 64-bit UID64 may be used by Firmware to derive BLE 48-bit Device Address EUI-48 or
  *         802.15.4 64-bit Device Address EUI-64.
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_FLASH_GetUDN(void)
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_REG(*((uint32_t *)UID64_BASE)));
 8000bfc:	4b03      	ldr	r3, [pc, #12]	; (8000c0c <LL_FLASH_GetUDN+0x14>)
 8000bfe:	681b      	ldr	r3, [r3, #0]
}
 8000c00:	4618      	mov	r0, r3
 8000c02:	46bd      	mov	sp, r7
 8000c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c08:	4770      	bx	lr
 8000c0a:	bf00      	nop
 8000c0c:	1fff7580 	.word	0x1fff7580

08000c10 <LL_FLASH_GetDeviceID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the device ID is 0x26
  * @retval Values between Min_Data=0x00 and Max_Data=0xFF (ex: Device ID is 0x26 fo STM32WB55x)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetDeviceID(void)
{
 8000c10:	b480      	push	{r7}
 8000c12:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_REG(*((uint32_t *)UID64_BASE + 1U))) & 0x000000FFU);
 8000c14:	4b03      	ldr	r3, [pc, #12]	; (8000c24 <LL_FLASH_GetDeviceID+0x14>)
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	b2db      	uxtb	r3, r3
}
 8000c1a:	4618      	mov	r0, r3
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c22:	4770      	bx	lr
 8000c24:	1fff7584 	.word	0x1fff7584

08000c28 <LL_FLASH_GetSTCompanyID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the ST Compagny ID is 0x0080E1
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFFFF (ex: ST Compagny ID is 0x0080E1)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetSTCompanyID(void)
{
 8000c28:	b480      	push	{r7}
 8000c2a:	af00      	add	r7, sp, #0
  return (uint32_t)(((READ_REG(*((uint32_t *)UID64_BASE + 1U))) >> 8U ) & 0x00FFFFFFU);
 8000c2c:	4b03      	ldr	r3, [pc, #12]	; (8000c3c <LL_FLASH_GetSTCompanyID+0x14>)
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	0a1b      	lsrs	r3, r3, #8
}
 8000c32:	4618      	mov	r0, r3
 8000c34:	46bd      	mov	sp, r7
 8000c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3a:	4770      	bx	lr
 8000c3c:	1fff7584 	.word	0x1fff7584

08000c40 <APP_BLE_Init>:

/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void APP_BLE_Init( void )
{
 8000c40:	b5b0      	push	{r4, r5, r7, lr}
 8000c42:	b08c      	sub	sp, #48	; 0x30
 8000c44:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APP_BLE_Init_1 */

/* USER CODE END APP_BLE_Init_1 */
  SHCI_C2_Ble_Init_Cmd_Packet_t ble_init_cmd_packet =
 8000c46:	4b2b      	ldr	r3, [pc, #172]	; (8000cf4 <APP_BLE_Init+0xb4>)
 8000c48:	463c      	mov	r4, r7
 8000c4a:	461d      	mov	r5, r3
 8000c4c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000c4e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000c50:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000c52:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000c54:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000c58:	c407      	stmia	r4!, {r0, r1, r2}
 8000c5a:	7023      	strb	r3, [r4, #0]
  };

  /**
   * Initialize Ble Transport Layer
   */
  Ble_Tl_Init( );
 8000c5c:	f000 f9fe 	bl	800105c <Ble_Tl_Init>

  /**
   * Do not allow standby in the application
   */
  UTIL_LPM_SetOffMode(1 << CFG_LPM_APP_BLE, UTIL_LPM_DISABLE);
 8000c60:	2101      	movs	r1, #1
 8000c62:	2002      	movs	r0, #2
 8000c64:	f013 f8b2 	bl	8013dcc <UTIL_LPM_SetOffMode>

  /**
   * Register the hci transport layer to handle BLE User Asynchronous Events
   */
  HciUserEvtProcessId = osThreadNew(HciUserEvtProcess, NULL, &HciUserEvtProcess_attr);
 8000c68:	4a23      	ldr	r2, [pc, #140]	; (8000cf8 <APP_BLE_Init+0xb8>)
 8000c6a:	2100      	movs	r1, #0
 8000c6c:	4823      	ldr	r0, [pc, #140]	; (8000cfc <APP_BLE_Init+0xbc>)
 8000c6e:	f00e ff2d 	bl	800facc <osThreadNew>
 8000c72:	4602      	mov	r2, r0
 8000c74:	4b22      	ldr	r3, [pc, #136]	; (8000d00 <APP_BLE_Init+0xc0>)
 8000c76:	601a      	str	r2, [r3, #0]

  /**
   * Starts the BLE Stack on CPU2
   */
  if (SHCI_C2_BLE_Init( &ble_init_cmd_packet ) != SHCI_Success)
 8000c78:	463b      	mov	r3, r7
 8000c7a:	4618      	mov	r0, r3
 8000c7c:	f00d faba 	bl	800e1f4 <SHCI_C2_BLE_Init>
 8000c80:	4603      	mov	r3, r0
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d001      	beq.n	8000c8a <APP_BLE_Init+0x4a>
  {
    Error_Handler();
 8000c86:	f005 ff91 	bl	8006bac <Error_Handler>
  }

  /**
   * Initialization of HCI & GATT & GAP layer
   */
  Ble_Hci_Gap_Gatt_Init();
 8000c8a:	f000 fa0f 	bl	80010ac <Ble_Hci_Gap_Gatt_Init>

  /**
   * Initialization of the BLE Services
   */
  SVCCTL_Init();
 8000c8e:	f00c fa5d 	bl	800d14c <SVCCTL_Init>

  /**
   * Initialization of the BLE App Context
   */
  BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 8000c92:	4b1c      	ldr	r3, [pc, #112]	; (8000d04 <APP_BLE_Init+0xc4>)
 8000c94:	2200      	movs	r2, #0
 8000c96:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
  BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0xFFFF;
 8000c9a:	4b1a      	ldr	r3, [pc, #104]	; (8000d04 <APP_BLE_Init+0xc4>)
 8000c9c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000ca0:	82da      	strh	r2, [r3, #22]
  /**
   * From here, all initialization are BLE application specific
   */
  AdvUpdateProcessId = osThreadNew(AdvUpdateProcess, NULL, &AdvUpdateProcess_attr);
 8000ca2:	4a19      	ldr	r2, [pc, #100]	; (8000d08 <APP_BLE_Init+0xc8>)
 8000ca4:	2100      	movs	r1, #0
 8000ca6:	4819      	ldr	r0, [pc, #100]	; (8000d0c <APP_BLE_Init+0xcc>)
 8000ca8:	f00e ff10 	bl	800facc <osThreadNew>
 8000cac:	4602      	mov	r2, r0
 8000cae:	4b18      	ldr	r3, [pc, #96]	; (8000d10 <APP_BLE_Init+0xd0>)
 8000cb0:	601a      	str	r2, [r3, #0]

  /**
   * Initialize HRS Application
   */
  //P2P FIX HRSAPP_Init();
  index_con_int = 0;
 8000cb2:	4b18      	ldr	r3, [pc, #96]	; (8000d14 <APP_BLE_Init+0xd4>)
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	701a      	strb	r2, [r3, #0]
  mutex = 1;
 8000cb8:	4b17      	ldr	r3, [pc, #92]	; (8000d18 <APP_BLE_Init+0xd8>)
 8000cba:	2201      	movs	r2, #1
 8000cbc:	701a      	strb	r2, [r3, #0]
  P2PS_APP_Init();
 8000cbe:	f000 fca7 	bl	8001610 <P2PS_APP_Init>

  /**
   * Create timer to handle the connection state machine
   */

  HW_TS_Create(CFG_TIM_PROC_ID_ISR, &(BleApplicationContext.Advertising_mgr_timer_Id), hw_ts_SingleShot, Adv_Mgr);
 8000cc2:	4b16      	ldr	r3, [pc, #88]	; (8000d1c <APP_BLE_Init+0xdc>)
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	4916      	ldr	r1, [pc, #88]	; (8000d20 <APP_BLE_Init+0xe0>)
 8000cc8:	2000      	movs	r0, #0
 8000cca:	f002 fbbd 	bl	8003448 <HW_TS_Create>
  /**
   * Make device discoverable
   */

  //P2P FIX lines below
  BleApplicationContext.BleApplicationContext_legacy.advtServUUID[0] = NULL; //AD_TYPE_16_BIT_SERV_UUID;
 8000cce:	4b0d      	ldr	r3, [pc, #52]	; (8000d04 <APP_BLE_Init+0xc4>)
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	765a      	strb	r2, [r3, #25]
  BleApplicationContext.BleApplicationContext_legacy.advtServUUIDlen = 0;//1;
 8000cd4:	4b0b      	ldr	r3, [pc, #44]	; (8000d04 <APP_BLE_Init+0xc4>)
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	761a      	strb	r2, [r3, #24]
  //P2P FIX Add_Advertisment_Service_UUID(HEART_RATE_SERVICE_UUID);
  /* Initialize intervals for reconnexion without intervals update */
  AdvIntervalMin = CFG_FAST_CONN_ADV_INTERVAL_MIN;
 8000cda:	4b12      	ldr	r3, [pc, #72]	; (8000d24 <APP_BLE_Init+0xe4>)
 8000cdc:	2280      	movs	r2, #128	; 0x80
 8000cde:	801a      	strh	r2, [r3, #0]
  AdvIntervalMax = CFG_FAST_CONN_ADV_INTERVAL_MAX;
 8000ce0:	4b11      	ldr	r3, [pc, #68]	; (8000d28 <APP_BLE_Init+0xe8>)
 8000ce2:	22a0      	movs	r2, #160	; 0xa0
 8000ce4:	801a      	strh	r2, [r3, #0]

  /**
  * Start to Advertise to be connected by Collector
   */
   Adv_Request(APP_BLE_FAST_ADV);
 8000ce6:	2001      	movs	r0, #1
 8000ce8:	f000 fabc 	bl	8001264 <Adv_Request>

/* USER CODE BEGIN APP_BLE_Init_2 */

/* USER CODE END APP_BLE_Init_2 */
  return;
 8000cec:	bf00      	nop
}
 8000cee:	3730      	adds	r7, #48	; 0x30
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	bdb0      	pop	{r4, r5, r7, pc}
 8000cf4:	08017ce0 	.word	0x08017ce0
 8000cf8:	08018aa8 	.word	0x08018aa8
 8000cfc:	08001479 	.word	0x08001479
 8000d00:	2002e074 	.word	0x2002e074
 8000d04:	200001f8 	.word	0x200001f8
 8000d08:	08018a84 	.word	0x08018a84
 8000d0c:	08001451 	.word	0x08001451
 8000d10:	2002e1bc 	.word	0x2002e1bc
 8000d14:	2002e081 	.word	0x2002e081
 8000d18:	2002e080 	.word	0x2002e080
 8000d1c:	08001439 	.word	0x08001439
 8000d20:	20000279 	.word	0x20000279
 8000d24:	2000027c 	.word	0x2000027c
 8000d28:	2000027e 	.word	0x2000027e

08000d2c <SVCCTL_App_Notification>:

SVCCTL_UserEvtFlowStatus_t SVCCTL_App_Notification( void *pckt )
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b08c      	sub	sp, #48	; 0x30
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	6078      	str	r0, [r7, #4]
  hci_event_pckt *event_pckt;
  evt_le_meta_event *meta_evt;
  evt_blue_aci *blue_evt;
  hci_le_phy_update_complete_event_rp0 *evt_le_phy_update_complete;
  uint8_t TX_PHY, RX_PHY;
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 8000d34:	2342      	movs	r3, #66	; 0x42
 8000d36:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) pckt)->data;
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	3301      	adds	r3, #1
 8000d3e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* USER CODE BEGIN SVCCTL_App_Notification */

  /* USER CODE END SVCCTL_App_Notification */

  switch (event_pckt->evt)
 8000d40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d42:	781b      	ldrb	r3, [r3, #0]
 8000d44:	2b3e      	cmp	r3, #62	; 0x3e
 8000d46:	d028      	beq.n	8000d9a <SVCCTL_App_Notification+0x6e>
 8000d48:	2bff      	cmp	r3, #255	; 0xff
 8000d4a:	f000 80a5 	beq.w	8000e98 <SVCCTL_App_Notification+0x16c>
 8000d4e:	2b05      	cmp	r3, #5
 8000d50:	d000      	beq.n	8000d54 <SVCCTL_App_Notification+0x28>

      default:
      /* USER CODE BEGIN ECODE_DEFAULT*/

      /* USER CODE END ECODE_DEFAULT*/
        break;
 8000d52:	e145      	b.n	8000fe0 <SVCCTL_App_Notification+0x2b4>
      disconnection_complete_event = (hci_disconnection_complete_event_rp0 *) event_pckt->data;
 8000d54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d56:	3302      	adds	r3, #2
 8000d58:	613b      	str	r3, [r7, #16]
      if (disconnection_complete_event->Connection_Handle == BleApplicationContext.BleApplicationContext_legacy.connectionHandle)
 8000d5a:	693b      	ldr	r3, [r7, #16]
 8000d5c:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8000d60:	b29a      	uxth	r2, r3
 8000d62:	4ba2      	ldr	r3, [pc, #648]	; (8000fec <SVCCTL_App_Notification+0x2c0>)
 8000d64:	8adb      	ldrh	r3, [r3, #22]
 8000d66:	429a      	cmp	r2, r3
 8000d68:	d109      	bne.n	8000d7e <SVCCTL_App_Notification+0x52>
        BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0;
 8000d6a:	4ba0      	ldr	r3, [pc, #640]	; (8000fec <SVCCTL_App_Notification+0x2c0>)
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	82da      	strh	r2, [r3, #22]
        BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 8000d70:	4b9e      	ldr	r3, [pc, #632]	; (8000fec <SVCCTL_App_Notification+0x2c0>)
 8000d72:	2200      	movs	r2, #0
 8000d74:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
        APP_DBG_MSG("\r\n\r** DISCONNECTION EVENT WITH CLIENT \n");
 8000d78:	489d      	ldr	r0, [pc, #628]	; (8000ff0 <SVCCTL_App_Notification+0x2c4>)
 8000d7a:	f013 fd63 	bl	8014844 <puts>
      Adv_Request(APP_BLE_FAST_ADV);
 8000d7e:	2001      	movs	r0, #1
 8000d80:	f000 fa70 	bl	8001264 <Adv_Request>
      handleNotification.P2P_Evt_Opcode = PEER_DISCON_HANDLE_EVT;
 8000d84:	4b9b      	ldr	r3, [pc, #620]	; (8000ff4 <SVCCTL_App_Notification+0x2c8>)
 8000d86:	2201      	movs	r2, #1
 8000d88:	701a      	strb	r2, [r3, #0]
      handleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 8000d8a:	4b98      	ldr	r3, [pc, #608]	; (8000fec <SVCCTL_App_Notification+0x2c0>)
 8000d8c:	8ada      	ldrh	r2, [r3, #22]
 8000d8e:	4b99      	ldr	r3, [pc, #612]	; (8000ff4 <SVCCTL_App_Notification+0x2c8>)
 8000d90:	805a      	strh	r2, [r3, #2]
      P2PS_APP_Notification(&handleNotification);
 8000d92:	4898      	ldr	r0, [pc, #608]	; (8000ff4 <SVCCTL_App_Notification+0x2c8>)
 8000d94:	f000 fc24 	bl	80015e0 <P2PS_APP_Notification>
    break; /* EVT_DISCONN_COMPLETE */
 8000d98:	e122      	b.n	8000fe0 <SVCCTL_App_Notification+0x2b4>
      meta_evt = (evt_le_meta_event*) event_pckt->data;
 8000d9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d9c:	3302      	adds	r3, #2
 8000d9e:	61fb      	str	r3, [r7, #28]
      switch (meta_evt->subevent)
 8000da0:	69fb      	ldr	r3, [r7, #28]
 8000da2:	781b      	ldrb	r3, [r3, #0]
 8000da4:	2b03      	cmp	r3, #3
 8000da6:	d004      	beq.n	8000db2 <SVCCTL_App_Notification+0x86>
 8000da8:	2b0c      	cmp	r3, #12
 8000daa:	d006      	beq.n	8000dba <SVCCTL_App_Notification+0x8e>
 8000dac:	2b01      	cmp	r3, #1
 8000dae:	d042      	beq.n	8000e36 <SVCCTL_App_Notification+0x10a>
          break;
 8000db0:	e071      	b.n	8000e96 <SVCCTL_App_Notification+0x16a>
          APP_DBG_MSG("\r\n\r** CONNECTION UPDATE EVENT WITH CLIENT \n");
 8000db2:	4891      	ldr	r0, [pc, #580]	; (8000ff8 <SVCCTL_App_Notification+0x2cc>)
 8000db4:	f013 fd46 	bl	8014844 <puts>
          break;
 8000db8:	e06d      	b.n	8000e96 <SVCCTL_App_Notification+0x16a>
          APP_DBG_MSG("EVT_UPDATE_PHY_COMPLETE \n");
 8000dba:	4890      	ldr	r0, [pc, #576]	; (8000ffc <SVCCTL_App_Notification+0x2d0>)
 8000dbc:	f013 fd42 	bl	8014844 <puts>
          evt_le_phy_update_complete = (hci_le_phy_update_complete_event_rp0*)meta_evt->data;
 8000dc0:	69fb      	ldr	r3, [r7, #28]
 8000dc2:	3301      	adds	r3, #1
 8000dc4:	61bb      	str	r3, [r7, #24]
          if (evt_le_phy_update_complete->Status == 0)
 8000dc6:	69bb      	ldr	r3, [r7, #24]
 8000dc8:	781b      	ldrb	r3, [r3, #0]
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d103      	bne.n	8000dd6 <SVCCTL_App_Notification+0xaa>
            APP_DBG_MSG("EVT_UPDATE_PHY_COMPLETE, status ok \n");
 8000dce:	488c      	ldr	r0, [pc, #560]	; (8001000 <SVCCTL_App_Notification+0x2d4>)
 8000dd0:	f013 fd38 	bl	8014844 <puts>
 8000dd4:	e002      	b.n	8000ddc <SVCCTL_App_Notification+0xb0>
            APP_DBG_MSG("EVT_UPDATE_PHY_COMPLETE, status nok \n");
 8000dd6:	488b      	ldr	r0, [pc, #556]	; (8001004 <SVCCTL_App_Notification+0x2d8>)
 8000dd8:	f013 fd34 	bl	8014844 <puts>
          ret = hci_le_read_phy(BleApplicationContext.BleApplicationContext_legacy.connectionHandle,&TX_PHY,&RX_PHY);
 8000ddc:	4b83      	ldr	r3, [pc, #524]	; (8000fec <SVCCTL_App_Notification+0x2c0>)
 8000dde:	8adb      	ldrh	r3, [r3, #22]
 8000de0:	f107 020e 	add.w	r2, r7, #14
 8000de4:	f107 010f 	add.w	r1, r7, #15
 8000de8:	4618      	mov	r0, r3
 8000dea:	f00d f914 	bl	800e016 <hci_le_read_phy>
 8000dee:	4603      	mov	r3, r0
 8000df0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
          if (ret == BLE_STATUS_SUCCESS)
 8000df4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d118      	bne.n	8000e2e <SVCCTL_App_Notification+0x102>
            APP_DBG_MSG("Read_PHY success \n");
 8000dfc:	4882      	ldr	r0, [pc, #520]	; (8001008 <SVCCTL_App_Notification+0x2dc>)
 8000dfe:	f013 fd21 	bl	8014844 <puts>
            if ((TX_PHY == TX_2M) && (RX_PHY == RX_2M))
 8000e02:	7bfb      	ldrb	r3, [r7, #15]
 8000e04:	2b02      	cmp	r3, #2
 8000e06:	d10a      	bne.n	8000e1e <SVCCTL_App_Notification+0xf2>
 8000e08:	7bbb      	ldrb	r3, [r7, #14]
 8000e0a:	2b02      	cmp	r3, #2
 8000e0c:	d107      	bne.n	8000e1e <SVCCTL_App_Notification+0xf2>
              APP_DBG_MSG("PHY Param  TX= %d, RX= %d \n", TX_PHY, RX_PHY);
 8000e0e:	7bfb      	ldrb	r3, [r7, #15]
 8000e10:	4619      	mov	r1, r3
 8000e12:	7bbb      	ldrb	r3, [r7, #14]
 8000e14:	461a      	mov	r2, r3
 8000e16:	487d      	ldr	r0, [pc, #500]	; (800100c <SVCCTL_App_Notification+0x2e0>)
 8000e18:	f013 fca0 	bl	801475c <iprintf>
          break;
 8000e1c:	e03b      	b.n	8000e96 <SVCCTL_App_Notification+0x16a>
              APP_DBG_MSG("PHY Param  TX= %d, RX= %d \n", TX_PHY, RX_PHY);
 8000e1e:	7bfb      	ldrb	r3, [r7, #15]
 8000e20:	4619      	mov	r1, r3
 8000e22:	7bbb      	ldrb	r3, [r7, #14]
 8000e24:	461a      	mov	r2, r3
 8000e26:	4879      	ldr	r0, [pc, #484]	; (800100c <SVCCTL_App_Notification+0x2e0>)
 8000e28:	f013 fc98 	bl	801475c <iprintf>
          break;
 8000e2c:	e033      	b.n	8000e96 <SVCCTL_App_Notification+0x16a>
            APP_DBG_MSG("Read conf not succeess \n");
 8000e2e:	4878      	ldr	r0, [pc, #480]	; (8001010 <SVCCTL_App_Notification+0x2e4>)
 8000e30:	f013 fd08 	bl	8014844 <puts>
          break;
 8000e34:	e02f      	b.n	8000e96 <SVCCTL_App_Notification+0x16a>
          connection_complete_event = (hci_le_connection_complete_event_rp0 *) meta_evt->data;
 8000e36:	69fb      	ldr	r3, [r7, #28]
 8000e38:	3301      	adds	r3, #1
 8000e3a:	617b      	str	r3, [r7, #20]
          HW_TS_Stop(BleApplicationContext.Advertising_mgr_timer_Id);
 8000e3c:	4b6b      	ldr	r3, [pc, #428]	; (8000fec <SVCCTL_App_Notification+0x2c0>)
 8000e3e:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8000e42:	4618      	mov	r0, r3
 8000e44:	f002 fb76 	bl	8003534 <HW_TS_Stop>
          APP_DBG_MSG("EVT_LE_CONN_COMPLETE for connection handle 0x%x\n", connection_complete_event->Connection_Handle);
 8000e48:	697b      	ldr	r3, [r7, #20]
 8000e4a:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8000e4e:	b29b      	uxth	r3, r3
 8000e50:	4619      	mov	r1, r3
 8000e52:	4870      	ldr	r0, [pc, #448]	; (8001014 <SVCCTL_App_Notification+0x2e8>)
 8000e54:	f013 fc82 	bl	801475c <iprintf>
          if (BleApplicationContext.Device_Connection_Status == APP_BLE_LP_CONNECTING)
 8000e58:	4b64      	ldr	r3, [pc, #400]	; (8000fec <SVCCTL_App_Notification+0x2c0>)
 8000e5a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8000e5e:	2b04      	cmp	r3, #4
 8000e60:	d104      	bne.n	8000e6c <SVCCTL_App_Notification+0x140>
            BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_CLIENT;
 8000e62:	4b62      	ldr	r3, [pc, #392]	; (8000fec <SVCCTL_App_Notification+0x2c0>)
 8000e64:	2206      	movs	r2, #6
 8000e66:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
 8000e6a:	e003      	b.n	8000e74 <SVCCTL_App_Notification+0x148>
            BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_SERVER;
 8000e6c:	4b5f      	ldr	r3, [pc, #380]	; (8000fec <SVCCTL_App_Notification+0x2c0>)
 8000e6e:	2205      	movs	r2, #5
 8000e70:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
          BleApplicationContext.BleApplicationContext_legacy.connectionHandle = connection_complete_event->Connection_Handle;
 8000e74:	697b      	ldr	r3, [r7, #20]
 8000e76:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8000e7a:	b29a      	uxth	r2, r3
 8000e7c:	4b5b      	ldr	r3, [pc, #364]	; (8000fec <SVCCTL_App_Notification+0x2c0>)
 8000e7e:	82da      	strh	r2, [r3, #22]
          handleNotification.P2P_Evt_Opcode = PEER_CONN_HANDLE_EVT;
 8000e80:	4b5c      	ldr	r3, [pc, #368]	; (8000ff4 <SVCCTL_App_Notification+0x2c8>)
 8000e82:	2200      	movs	r2, #0
 8000e84:	701a      	strb	r2, [r3, #0]
          handleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 8000e86:	4b59      	ldr	r3, [pc, #356]	; (8000fec <SVCCTL_App_Notification+0x2c0>)
 8000e88:	8ada      	ldrh	r2, [r3, #22]
 8000e8a:	4b5a      	ldr	r3, [pc, #360]	; (8000ff4 <SVCCTL_App_Notification+0x2c8>)
 8000e8c:	805a      	strh	r2, [r3, #2]
          P2PS_APP_Notification(&handleNotification);
 8000e8e:	4859      	ldr	r0, [pc, #356]	; (8000ff4 <SVCCTL_App_Notification+0x2c8>)
 8000e90:	f000 fba6 	bl	80015e0 <P2PS_APP_Notification>
        break; /* HCI_EVT_LE_CONN_COMPLETE */
 8000e94:	bf00      	nop
    break; /* HCI_EVT_LE_META_EVENT */
 8000e96:	e0a3      	b.n	8000fe0 <SVCCTL_App_Notification+0x2b4>
      blue_evt = (evt_blue_aci*) event_pckt->data;
 8000e98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e9a:	3302      	adds	r3, #2
 8000e9c:	627b      	str	r3, [r7, #36]	; 0x24
      switch (blue_evt->ecode)
 8000e9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ea0:	881b      	ldrh	r3, [r3, #0]
 8000ea2:	b29b      	uxth	r3, r3
 8000ea4:	f240 4205 	movw	r2, #1029	; 0x405
 8000ea8:	4293      	cmp	r3, r2
 8000eaa:	d04a      	beq.n	8000f42 <SVCCTL_App_Notification+0x216>
 8000eac:	f240 4205 	movw	r2, #1029	; 0x405
 8000eb0:	4293      	cmp	r3, r2
 8000eb2:	dc18      	bgt.n	8000ee6 <SVCCTL_App_Notification+0x1ba>
 8000eb4:	f240 4202 	movw	r2, #1026	; 0x402
 8000eb8:	4293      	cmp	r3, r2
 8000eba:	d033      	beq.n	8000f24 <SVCCTL_App_Notification+0x1f8>
 8000ebc:	f240 4202 	movw	r2, #1026	; 0x402
 8000ec0:	4293      	cmp	r3, r2
 8000ec2:	dc07      	bgt.n	8000ed4 <SVCCTL_App_Notification+0x1a8>
 8000ec4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000ec8:	d028      	beq.n	8000f1c <SVCCTL_App_Notification+0x1f0>
 8000eca:	f240 4201 	movw	r2, #1025	; 0x401
 8000ece:	4293      	cmp	r3, r2
 8000ed0:	d069      	beq.n	8000fa6 <SVCCTL_App_Notification+0x27a>
      break; /* EVT_VENDOR */
 8000ed2:	e084      	b.n	8000fde <SVCCTL_App_Notification+0x2b2>
      switch (blue_evt->ecode)
 8000ed4:	f240 4203 	movw	r2, #1027	; 0x403
 8000ed8:	4293      	cmp	r3, r2
 8000eda:	d02a      	beq.n	8000f32 <SVCCTL_App_Notification+0x206>
 8000edc:	f240 4204 	movw	r2, #1028	; 0x404
 8000ee0:	4293      	cmp	r3, r2
 8000ee2:	d02a      	beq.n	8000f3a <SVCCTL_App_Notification+0x20e>
      break; /* EVT_VENDOR */
 8000ee4:	e07b      	b.n	8000fde <SVCCTL_App_Notification+0x2b2>
      switch (blue_evt->ecode)
 8000ee6:	f5b3 6f81 	cmp.w	r3, #1032	; 0x408
 8000eea:	d03a      	beq.n	8000f62 <SVCCTL_App_Notification+0x236>
 8000eec:	f5b3 6f81 	cmp.w	r3, #1032	; 0x408
 8000ef0:	dc08      	bgt.n	8000f04 <SVCCTL_App_Notification+0x1d8>
 8000ef2:	f240 4206 	movw	r2, #1030	; 0x406
 8000ef6:	4293      	cmp	r3, r2
 8000ef8:	d02f      	beq.n	8000f5a <SVCCTL_App_Notification+0x22e>
 8000efa:	f240 4207 	movw	r2, #1031	; 0x407
 8000efe:	4293      	cmp	r3, r2
 8000f00:	d069      	beq.n	8000fd6 <SVCCTL_App_Notification+0x2aa>
      break; /* EVT_VENDOR */
 8000f02:	e06c      	b.n	8000fde <SVCCTL_App_Notification+0x2b2>
      switch (blue_evt->ecode)
 8000f04:	f240 420a 	movw	r2, #1034	; 0x40a
 8000f08:	4293      	cmp	r3, r2
 8000f0a:	d02e      	beq.n	8000f6a <SVCCTL_App_Notification+0x23e>
 8000f0c:	f240 420a 	movw	r2, #1034	; 0x40a
 8000f10:	4293      	cmp	r3, r2
 8000f12:	db2e      	blt.n	8000f72 <SVCCTL_App_Notification+0x246>
 8000f14:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000f18:	d05a      	beq.n	8000fd0 <SVCCTL_App_Notification+0x2a4>
      break; /* EVT_VENDOR */
 8000f1a:	e060      	b.n	8000fde <SVCCTL_App_Notification+0x2b2>
        APP_DBG_MSG("\r\n\r** EVT_BLUE_GAP_LIMITED_DISCOVERABLE \n");
 8000f1c:	483e      	ldr	r0, [pc, #248]	; (8001018 <SVCCTL_App_Notification+0x2ec>)
 8000f1e:	f013 fc91 	bl	8014844 <puts>
          break; /* EVT_BLUE_GAP_LIMITED_DISCOVERABLE */
 8000f22:	e05c      	b.n	8000fde <SVCCTL_App_Notification+0x2b2>
        APP_DBG_MSG("\r\n\r** EVT_BLUE_GAP_PASS_KEY_REQUEST \n");
 8000f24:	483d      	ldr	r0, [pc, #244]	; (800101c <SVCCTL_App_Notification+0x2f0>)
 8000f26:	f013 fc8d 	bl	8014844 <puts>
        APP_DBG_MSG("\r\n\r** aci_gap_pass_key_resp \n");
 8000f2a:	483d      	ldr	r0, [pc, #244]	; (8001020 <SVCCTL_App_Notification+0x2f4>)
 8000f2c:	f013 fc8a 	bl	8014844 <puts>
          break; /* EVT_BLUE_GAP_PASS_KEY_REQUEST */
 8000f30:	e055      	b.n	8000fde <SVCCTL_App_Notification+0x2b2>
        APP_DBG_MSG("\r\n\r** EVT_BLUE_GAP_AUTHORIZATION_REQUEST \n");
 8000f32:	483c      	ldr	r0, [pc, #240]	; (8001024 <SVCCTL_App_Notification+0x2f8>)
 8000f34:	f013 fc86 	bl	8014844 <puts>
          break; /* EVT_BLUE_GAP_AUTHORIZATION_REQUEST */
 8000f38:	e051      	b.n	8000fde <SVCCTL_App_Notification+0x2b2>
        APP_DBG_MSG("\r\n\r** EVT_BLUE_GAP_SLAVE_SECURITY_INITIATED \n");
 8000f3a:	483b      	ldr	r0, [pc, #236]	; (8001028 <SVCCTL_App_Notification+0x2fc>)
 8000f3c:	f013 fc82 	bl	8014844 <puts>
          break; /* EVT_BLUE_GAP_SLAVE_SECURITY_INITIATED */
 8000f40:	e04d      	b.n	8000fde <SVCCTL_App_Notification+0x2b2>
        APP_DBG_MSG("\r\n\r** EVT_BLUE_GAP_BOND_LOST \n");
 8000f42:	483a      	ldr	r0, [pc, #232]	; (800102c <SVCCTL_App_Notification+0x300>)
 8000f44:	f013 fc7e 	bl	8014844 <puts>
          aci_gap_allow_rebond(BleApplicationContext.BleApplicationContext_legacy.connectionHandle);
 8000f48:	4b28      	ldr	r3, [pc, #160]	; (8000fec <SVCCTL_App_Notification+0x2c0>)
 8000f4a:	8adb      	ldrh	r3, [r3, #22]
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	f00c fc98 	bl	800d882 <aci_gap_allow_rebond>
        APP_DBG_MSG("\r\n\r** Send allow rebond \n");
 8000f52:	4837      	ldr	r0, [pc, #220]	; (8001030 <SVCCTL_App_Notification+0x304>)
 8000f54:	f013 fc76 	bl	8014844 <puts>
          break; /* EVT_BLUE_GAP_BOND_LOST */
 8000f58:	e041      	b.n	8000fde <SVCCTL_App_Notification+0x2b2>
        APP_DBG_MSG("\r\n\r** EVT_BLUE_GAP_DEVICE_FOUND \n");
 8000f5a:	4836      	ldr	r0, [pc, #216]	; (8001034 <SVCCTL_App_Notification+0x308>)
 8000f5c:	f013 fc72 	bl	8014844 <puts>
          break; /* EVT_BLUE_GAP_DEVICE_FOUND */
 8000f60:	e03d      	b.n	8000fde <SVCCTL_App_Notification+0x2b2>
         APP_DBG_MSG("\r\n\r** EVT_BLUE_GAP_DEVICE_FOUND \n");
 8000f62:	4834      	ldr	r0, [pc, #208]	; (8001034 <SVCCTL_App_Notification+0x308>)
 8000f64:	f013 fc6e 	bl	8014844 <puts>
          break; /* EVT_BLUE_GAP_DEVICE_FOUND */
 8000f68:	e039      	b.n	8000fde <SVCCTL_App_Notification+0x2b2>
         APP_DBG_MSG("\r\n\r** EVT_BLUE_GAP_KEYPRESS_NOTIFICATION \n");
 8000f6a:	4833      	ldr	r0, [pc, #204]	; (8001038 <SVCCTL_App_Notification+0x30c>)
 8000f6c:	f013 fc6a 	bl	8014844 <puts>
          break; /* EVT_BLUE_GAP_KEY_PRESS_NOTIFICATION */    
 8000f70:	e035      	b.n	8000fde <SVCCTL_App_Notification+0x2b2>
                      ((aci_gap_numeric_comparison_value_event_rp0 *)(blue_evt->data))->Numeric_Value);
 8000f72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f74:	3302      	adds	r3, #2
          APP_DBG_MSG("numeric_value = %ld\n",
 8000f76:	f8d3 3002 	ldr.w	r3, [r3, #2]
 8000f7a:	4619      	mov	r1, r3
 8000f7c:	482f      	ldr	r0, [pc, #188]	; (800103c <SVCCTL_App_Notification+0x310>)
 8000f7e:	f013 fbed 	bl	801475c <iprintf>
                      ((aci_gap_numeric_comparison_value_event_rp0 *)(blue_evt->data))->Numeric_Value);
 8000f82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f84:	3302      	adds	r3, #2
          APP_DBG_MSG("Hex_value = %lx\n",
 8000f86:	f8d3 3002 	ldr.w	r3, [r3, #2]
 8000f8a:	4619      	mov	r1, r3
 8000f8c:	482c      	ldr	r0, [pc, #176]	; (8001040 <SVCCTL_App_Notification+0x314>)
 8000f8e:	f013 fbe5 	bl	801475c <iprintf>
          aci_gap_numeric_comparison_value_confirm_yesno(BleApplicationContext.BleApplicationContext_legacy.connectionHandle, 1); /* CONFIRM_YES = 1 */
 8000f92:	4b16      	ldr	r3, [pc, #88]	; (8000fec <SVCCTL_App_Notification+0x2c0>)
 8000f94:	8adb      	ldrh	r3, [r3, #22]
 8000f96:	2101      	movs	r1, #1
 8000f98:	4618      	mov	r0, r3
 8000f9a:	f00c fcbc 	bl	800d916 <aci_gap_numeric_comparison_value_confirm_yesno>
          APP_DBG_MSG("\r\n\r** aci_gap_numeric_comparison_value_confirm_yesno-->YES \n");
 8000f9e:	4829      	ldr	r0, [pc, #164]	; (8001044 <SVCCTL_App_Notification+0x318>)
 8000fa0:	f013 fc50 	bl	8014844 <puts>
          break;
 8000fa4:	e01b      	b.n	8000fde <SVCCTL_App_Notification+0x2b2>
            pairing_complete = (aci_gap_pairing_complete_event_rp0*)blue_evt->data;
 8000fa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fa8:	3302      	adds	r3, #2
 8000faa:	623b      	str	r3, [r7, #32]
            APP_DBG_MSG("BLE_CTRL_App_Notification: EVT_BLUE_GAP_PAIRING_CMPLT, pairing_complete->Status = %d\n",pairing_complete->Status);
 8000fac:	6a3b      	ldr	r3, [r7, #32]
 8000fae:	789b      	ldrb	r3, [r3, #2]
 8000fb0:	4619      	mov	r1, r3
 8000fb2:	4825      	ldr	r0, [pc, #148]	; (8001048 <SVCCTL_App_Notification+0x31c>)
 8000fb4:	f013 fbd2 	bl	801475c <iprintf>
            if (pairing_complete->Status == 0)
 8000fb8:	6a3b      	ldr	r3, [r7, #32]
 8000fba:	789b      	ldrb	r3, [r3, #2]
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d103      	bne.n	8000fc8 <SVCCTL_App_Notification+0x29c>
              APP_DBG_MSG("\r\n\r** Pairing OK \n");
 8000fc0:	4822      	ldr	r0, [pc, #136]	; (800104c <SVCCTL_App_Notification+0x320>)
 8000fc2:	f013 fc3f 	bl	8014844 <puts>
           break;    
 8000fc6:	e00a      	b.n	8000fde <SVCCTL_App_Notification+0x2b2>
              APP_DBG_MSG("\r\n\r** Pairing KO \n");
 8000fc8:	4821      	ldr	r0, [pc, #132]	; (8001050 <SVCCTL_App_Notification+0x324>)
 8000fca:	f013 fc3b 	bl	8014844 <puts>
           break;    
 8000fce:	e006      	b.n	8000fde <SVCCTL_App_Notification+0x2b2>
          mutex = 1;
 8000fd0:	4b20      	ldr	r3, [pc, #128]	; (8001054 <SVCCTL_App_Notification+0x328>)
 8000fd2:	2201      	movs	r2, #1
 8000fd4:	701a      	strb	r2, [r3, #0]
        APP_DBG_MSG("\r\n\r** EVT_BLUE_GAP_PROCEDURE_COMPLETE \n");
 8000fd6:	4820      	ldr	r0, [pc, #128]	; (8001058 <SVCCTL_App_Notification+0x32c>)
 8000fd8:	f013 fc34 	bl	8014844 <puts>
          break; /* EVT_BLUE_GAP_PROCEDURE_COMPLETE */
 8000fdc:	bf00      	nop
      break; /* EVT_VENDOR */
 8000fde:	bf00      	nop
  }

  return (SVCCTL_UserEvtFlowEnable);
 8000fe0:	2301      	movs	r3, #1
}
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	3730      	adds	r7, #48	; 0x30
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	bd80      	pop	{r7, pc}
 8000fea:	bf00      	nop
 8000fec:	200001f8 	.word	0x200001f8
 8000ff0:	08017d10 	.word	0x08017d10
 8000ff4:	2002e078 	.word	0x2002e078
 8000ff8:	08017d38 	.word	0x08017d38
 8000ffc:	08017d64 	.word	0x08017d64
 8001000:	08017d80 	.word	0x08017d80
 8001004:	08017da4 	.word	0x08017da4
 8001008:	08017dcc 	.word	0x08017dcc
 800100c:	08017de0 	.word	0x08017de0
 8001010:	08017dfc 	.word	0x08017dfc
 8001014:	08017e14 	.word	0x08017e14
 8001018:	08017e48 	.word	0x08017e48
 800101c:	08017e74 	.word	0x08017e74
 8001020:	08017e9c 	.word	0x08017e9c
 8001024:	08017ebc 	.word	0x08017ebc
 8001028:	08017ee8 	.word	0x08017ee8
 800102c:	08017f18 	.word	0x08017f18
 8001030:	08017f38 	.word	0x08017f38
 8001034:	08017f54 	.word	0x08017f54
 8001038:	08017f78 	.word	0x08017f78
 800103c:	08017fa4 	.word	0x08017fa4
 8001040:	08017fbc 	.word	0x08017fbc
 8001044:	08017fd0 	.word	0x08017fd0
 8001048:	0801800c 	.word	0x0801800c
 800104c:	08018064 	.word	0x08018064
 8001050:	08018078 	.word	0x08018078
 8001054:	2002e080 	.word	0x2002e080
 8001058:	0801808c 	.word	0x0801808c

0800105c <Ble_Tl_Init>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Ble_Tl_Init( void )
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b082      	sub	sp, #8
 8001060:	af00      	add	r7, sp, #0
  HCI_TL_HciInitConf_t Hci_Tl_Init_Conf;

  MtxHciId = osMutexNew( NULL );
 8001062:	2000      	movs	r0, #0
 8001064:	f00e fefc 	bl	800fe60 <osMutexNew>
 8001068:	4602      	mov	r2, r0
 800106a:	4b0b      	ldr	r3, [pc, #44]	; (8001098 <Ble_Tl_Init+0x3c>)
 800106c:	601a      	str	r2, [r3, #0]
  SemHciId = osSemaphoreNew( 1, 0, NULL ); /*< Create the semaphore and make it busy at initialization */
 800106e:	2200      	movs	r2, #0
 8001070:	2100      	movs	r1, #0
 8001072:	2001      	movs	r0, #1
 8001074:	f00f f83c 	bl	80100f0 <osSemaphoreNew>
 8001078:	4602      	mov	r2, r0
 800107a:	4b08      	ldr	r3, [pc, #32]	; (800109c <Ble_Tl_Init+0x40>)
 800107c:	601a      	str	r2, [r3, #0]

  Hci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&BleCmdBuffer;
 800107e:	4b08      	ldr	r3, [pc, #32]	; (80010a0 <Ble_Tl_Init+0x44>)
 8001080:	603b      	str	r3, [r7, #0]
  Hci_Tl_Init_Conf.StatusNotCallBack = BLE_StatusNot;
 8001082:	4b08      	ldr	r3, [pc, #32]	; (80010a4 <Ble_Tl_Init+0x48>)
 8001084:	607b      	str	r3, [r7, #4]
  hci_init(BLE_UserEvtRx, (void*) &Hci_Tl_Init_Conf);
 8001086:	463b      	mov	r3, r7
 8001088:	4619      	mov	r1, r3
 800108a:	4807      	ldr	r0, [pc, #28]	; (80010a8 <Ble_Tl_Init+0x4c>)
 800108c:	f00d f8e0 	bl	800e250 <hci_init>

  return;
 8001090:	bf00      	nop
}
 8001092:	3708      	adds	r7, #8
 8001094:	46bd      	mov	sp, r7
 8001096:	bd80      	pop	{r7, pc}
 8001098:	2002e0a0 	.word	0x2002e0a0
 800109c:	2002e070 	.word	0x2002e070
 80010a0:	20030028 	.word	0x20030028
 80010a4:	08001531 	.word	0x08001531
 80010a8:	080014f9 	.word	0x080014f9

080010ac <Ble_Hci_Gap_Gatt_Init>:

static void Ble_Hci_Gap_Gatt_Init(void){
 80010ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80010ae:	b08f      	sub	sp, #60	; 0x3c
 80010b0:	af06      	add	r7, sp, #24

  uint8_t role;
  uint16_t gap_service_handle, gap_dev_name_char_handle, gap_appearance_char_handle;
  const uint8_t *bd_addr;
  uint32_t srd_bd_addr[2];
  uint16_t appearance[1] = { BLE_CFG_GAP_APPEARANCE };
 80010b2:	f44f 7350 	mov.w	r3, #832	; 0x340
 80010b6:	803b      	strh	r3, [r7, #0]

  /**
   * Initialize HCI layer
   */
  /*HCI Reset to synchronise BLE Stack*/
  hci_reset();
 80010b8:	f00c ff89 	bl	800dfce <hci_reset>

  /**
   * Write the BD Address
   */

  bd_addr = BleGetBdAddress();
 80010bc:	f000 f978 	bl	80013b0 <BleGetBdAddress>
 80010c0:	61f8      	str	r0, [r7, #28]
  aci_hal_write_config_data(CONFIG_DATA_PUBADDR_OFFSET,
 80010c2:	69fa      	ldr	r2, [r7, #28]
 80010c4:	2106      	movs	r1, #6
 80010c6:	2000      	movs	r0, #0
 80010c8:	f00c fec1 	bl	800de4e <aci_hal_write_config_data>
                            CONFIG_DATA_PUBADDR_LEN,
                            (uint8_t*) bd_addr);

  /* BLE MAC in ADV Packet */
  manuf_data[ sizeof(manuf_data)-6] = bd_addr[5];
 80010cc:	69fb      	ldr	r3, [r7, #28]
 80010ce:	795a      	ldrb	r2, [r3, #5]
 80010d0:	4b5c      	ldr	r3, [pc, #368]	; (8001244 <Ble_Hci_Gap_Gatt_Init+0x198>)
 80010d2:	721a      	strb	r2, [r3, #8]
  manuf_data[ sizeof(manuf_data)-5] = bd_addr[4];
 80010d4:	69fb      	ldr	r3, [r7, #28]
 80010d6:	791a      	ldrb	r2, [r3, #4]
 80010d8:	4b5a      	ldr	r3, [pc, #360]	; (8001244 <Ble_Hci_Gap_Gatt_Init+0x198>)
 80010da:	725a      	strb	r2, [r3, #9]
  manuf_data[ sizeof(manuf_data)-4] = bd_addr[3];
 80010dc:	69fb      	ldr	r3, [r7, #28]
 80010de:	78da      	ldrb	r2, [r3, #3]
 80010e0:	4b58      	ldr	r3, [pc, #352]	; (8001244 <Ble_Hci_Gap_Gatt_Init+0x198>)
 80010e2:	729a      	strb	r2, [r3, #10]
  manuf_data[ sizeof(manuf_data)-3] = bd_addr[2];
 80010e4:	69fb      	ldr	r3, [r7, #28]
 80010e6:	789a      	ldrb	r2, [r3, #2]
 80010e8:	4b56      	ldr	r3, [pc, #344]	; (8001244 <Ble_Hci_Gap_Gatt_Init+0x198>)
 80010ea:	72da      	strb	r2, [r3, #11]
  manuf_data[ sizeof(manuf_data)-2] = bd_addr[1];
 80010ec:	69fb      	ldr	r3, [r7, #28]
 80010ee:	785a      	ldrb	r2, [r3, #1]
 80010f0:	4b54      	ldr	r3, [pc, #336]	; (8001244 <Ble_Hci_Gap_Gatt_Init+0x198>)
 80010f2:	731a      	strb	r2, [r3, #12]
  manuf_data[ sizeof(manuf_data)-1] = bd_addr[0];
 80010f4:	69fb      	ldr	r3, [r7, #28]
 80010f6:	781a      	ldrb	r2, [r3, #0]
 80010f8:	4b52      	ldr	r3, [pc, #328]	; (8001244 <Ble_Hci_Gap_Gatt_Init+0x198>)
 80010fa:	735a      	strb	r2, [r3, #13]

  /**
   * Write Identity root key used to derive LTK and CSRK
   */
    aci_hal_write_config_data(CONFIG_DATA_IR_OFFSET,
 80010fc:	4a52      	ldr	r2, [pc, #328]	; (8001248 <Ble_Hci_Gap_Gatt_Init+0x19c>)
 80010fe:	2110      	movs	r1, #16
 8001100:	2018      	movs	r0, #24
 8001102:	f00c fea4 	bl	800de4e <aci_hal_write_config_data>
                            (uint8_t*) BLE_CFG_IR_VALUE);

   /**
   * Write Encryption root key used to derive LTK and CSRK
   */
    aci_hal_write_config_data(CONFIG_DATA_ER_OFFSET,
 8001106:	4a51      	ldr	r2, [pc, #324]	; (800124c <Ble_Hci_Gap_Gatt_Init+0x1a0>)
 8001108:	2110      	movs	r1, #16
 800110a:	2008      	movs	r0, #8
 800110c:	f00c fe9f 	bl	800de4e <aci_hal_write_config_data>
   * Static random Address
   * The two upper bits shall be set to 1
   * The lowest 32bits is read from the UDN to differentiate between devices
   * The RNG may be used to provide a random number on each power on
   */
  srd_bd_addr[1] =  0x0000ED6E;
 8001110:	f64e 536e 	movw	r3, #60782	; 0xed6e
 8001114:	60bb      	str	r3, [r7, #8]
  srd_bd_addr[0] =  LL_FLASH_GetUDN( );
 8001116:	f7ff fd6f 	bl	8000bf8 <LL_FLASH_GetUDN>
 800111a:	4603      	mov	r3, r0
 800111c:	607b      	str	r3, [r7, #4]
  aci_hal_write_config_data( CONFIG_DATA_RANDOM_ADDRESS_OFFSET, CONFIG_DATA_RANDOM_ADDRESS_LEN, (uint8_t*)srd_bd_addr );
 800111e:	1d3b      	adds	r3, r7, #4
 8001120:	461a      	mov	r2, r3
 8001122:	2106      	movs	r1, #6
 8001124:	202e      	movs	r0, #46	; 0x2e
 8001126:	f00c fe92 	bl	800de4e <aci_hal_write_config_data>

  /**
   * Write Identity root key used to derive LTK and CSRK
   */
    aci_hal_write_config_data( CONFIG_DATA_IR_OFFSET, CONFIG_DATA_IR_LEN, (uint8_t*)BLE_CFG_IR_VALUE );
 800112a:	4a47      	ldr	r2, [pc, #284]	; (8001248 <Ble_Hci_Gap_Gatt_Init+0x19c>)
 800112c:	2110      	movs	r1, #16
 800112e:	2018      	movs	r0, #24
 8001130:	f00c fe8d 	bl	800de4e <aci_hal_write_config_data>

   /**
   * Write Encryption root key used to derive LTK and CSRK
   */
    aci_hal_write_config_data( CONFIG_DATA_ER_OFFSET, CONFIG_DATA_ER_LEN, (uint8_t*)BLE_CFG_ER_VALUE );
 8001134:	4a45      	ldr	r2, [pc, #276]	; (800124c <Ble_Hci_Gap_Gatt_Init+0x1a0>)
 8001136:	2110      	movs	r1, #16
 8001138:	2008      	movs	r0, #8
 800113a:	f00c fe88 	bl	800de4e <aci_hal_write_config_data>

  /**
   * Set TX Power to 0dBm.
   */
  aci_hal_set_tx_power_level(1, CFG_TX_POWER);
 800113e:	2118      	movs	r1, #24
 8001140:	2001      	movs	r0, #1
 8001142:	f00c feed 	bl	800df20 <aci_hal_set_tx_power_level>

  /**
   * Initialize GATT interface
   */
  aci_gatt_init();
 8001146:	f00c fc3d 	bl	800d9c4 <aci_gatt_init>

  /**
   * Initialize GAP interface
   */
  role = 0;
 800114a:	2300      	movs	r3, #0
 800114c:	76fb      	strb	r3, [r7, #27]

#if (BLE_CFG_PERIPHERAL == 1)
  role |= GAP_PERIPHERAL_ROLE;
 800114e:	7efb      	ldrb	r3, [r7, #27]
 8001150:	f043 0301 	orr.w	r3, r3, #1
 8001154:	76fb      	strb	r3, [r7, #27]

#if (BLE_CFG_CENTRAL == 1)
  role |= GAP_CENTRAL_ROLE;
#endif

  if (role > 0)
 8001156:	7efb      	ldrb	r3, [r7, #27]
 8001158:	2b00      	cmp	r3, #0
 800115a:	d024      	beq.n	80011a6 <Ble_Hci_Gap_Gatt_Init+0xfa>
  {
    const char *name = "WATCH01";
 800115c:	4b3c      	ldr	r3, [pc, #240]	; (8001250 <Ble_Hci_Gap_Gatt_Init+0x1a4>)
 800115e:	617b      	str	r3, [r7, #20]
    aci_gap_init(role, 0,
 8001160:	f107 0212 	add.w	r2, r7, #18
 8001164:	7ef8      	ldrb	r0, [r7, #27]
 8001166:	f107 030e 	add.w	r3, r7, #14
 800116a:	9301      	str	r3, [sp, #4]
 800116c:	f107 0310 	add.w	r3, r7, #16
 8001170:	9300      	str	r3, [sp, #0]
 8001172:	4613      	mov	r3, r2
 8001174:	2207      	movs	r2, #7
 8001176:	2100      	movs	r1, #0
 8001178:	f00c fa78 	bl	800d66c <aci_gap_init>
                 APPBLE_GAP_DEVICE_NAME_LENGTH,
                 &gap_service_handle, &gap_dev_name_char_handle, &gap_appearance_char_handle);

    if (aci_gatt_update_char_value(gap_service_handle, gap_dev_name_char_handle, 0, strlen(name), (uint8_t *) name))
 800117c:	8a7c      	ldrh	r4, [r7, #18]
 800117e:	8a3d      	ldrh	r5, [r7, #16]
 8001180:	6978      	ldr	r0, [r7, #20]
 8001182:	f7fe fffd 	bl	8000180 <strlen>
 8001186:	4603      	mov	r3, r0
 8001188:	b2da      	uxtb	r2, r3
 800118a:	697b      	ldr	r3, [r7, #20]
 800118c:	9300      	str	r3, [sp, #0]
 800118e:	4613      	mov	r3, r2
 8001190:	2200      	movs	r2, #0
 8001192:	4629      	mov	r1, r5
 8001194:	4620      	mov	r0, r4
 8001196:	f00c fdd3 	bl	800dd40 <aci_gatt_update_char_value>
 800119a:	4603      	mov	r3, r0
 800119c:	2b00      	cmp	r3, #0
 800119e:	d002      	beq.n	80011a6 <Ble_Hci_Gap_Gatt_Init+0xfa>
    {
      BLE_DBG_SVCCTL_MSG("Device Name aci_gatt_update_char_value failed.\n");
 80011a0:	482c      	ldr	r0, [pc, #176]	; (8001254 <Ble_Hci_Gap_Gatt_Init+0x1a8>)
 80011a2:	f013 fb4f 	bl	8014844 <puts>
    }
  }

  if(aci_gatt_update_char_value(gap_service_handle,
 80011a6:	8a78      	ldrh	r0, [r7, #18]
 80011a8:	89f9      	ldrh	r1, [r7, #14]
 80011aa:	463b      	mov	r3, r7
 80011ac:	9300      	str	r3, [sp, #0]
 80011ae:	2302      	movs	r3, #2
 80011b0:	2200      	movs	r2, #0
 80011b2:	f00c fdc5 	bl	800dd40 <aci_gatt_update_char_value>
 80011b6:	4603      	mov	r3, r0
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d002      	beq.n	80011c2 <Ble_Hci_Gap_Gatt_Init+0x116>
                                gap_appearance_char_handle,
                                0,
                                2,
                                (uint8_t *)&appearance))
  {
    BLE_DBG_SVCCTL_MSG("Appearance aci_gatt_update_char_value failed.\n");
 80011bc:	4826      	ldr	r0, [pc, #152]	; (8001258 <Ble_Hci_Gap_Gatt_Init+0x1ac>)
 80011be:	f013 fb41 	bl	8014844 <puts>
  }
  /**
   * Initialize Default PHY
   */
  hci_le_set_default_phy(ALL_PHYS_PREFERENCE,TX_2M_PREFERRED,RX_2M_PREFERRED);
 80011c2:	2202      	movs	r2, #2
 80011c4:	2102      	movs	r1, #2
 80011c6:	2000      	movs	r0, #0
 80011c8:	f00c ff8d 	bl	800e0e6 <hci_le_set_default_phy>

  /**
   * Initialize IO capability
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability = CFG_IO_CAPABILITY;
 80011cc:	4b23      	ldr	r3, [pc, #140]	; (800125c <Ble_Hci_Gap_Gatt_Init+0x1b0>)
 80011ce:	2201      	movs	r2, #1
 80011d0:	701a      	strb	r2, [r3, #0]
  aci_gap_set_io_capability(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability);
 80011d2:	4b22      	ldr	r3, [pc, #136]	; (800125c <Ble_Hci_Gap_Gatt_Init+0x1b0>)
 80011d4:	781b      	ldrb	r3, [r3, #0]
 80011d6:	4618      	mov	r0, r3
 80011d8:	f00c f956 	bl	800d488 <aci_gap_set_io_capability>

  /**
   * Initialize authentication
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.mitm_mode = CFG_MITM_PROTECTION;
 80011dc:	4b1f      	ldr	r3, [pc, #124]	; (800125c <Ble_Hci_Gap_Gatt_Init+0x1b0>)
 80011de:	2201      	movs	r2, #1
 80011e0:	705a      	strb	r2, [r3, #1]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMin = CFG_ENCRYPTION_KEY_SIZE_MIN;
 80011e2:	4b1e      	ldr	r3, [pc, #120]	; (800125c <Ble_Hci_Gap_Gatt_Init+0x1b0>)
 80011e4:	2208      	movs	r2, #8
 80011e6:	711a      	strb	r2, [r3, #4]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMax = CFG_ENCRYPTION_KEY_SIZE_MAX;
 80011e8:	4b1c      	ldr	r3, [pc, #112]	; (800125c <Ble_Hci_Gap_Gatt_Init+0x1b0>)
 80011ea:	2210      	movs	r2, #16
 80011ec:	715a      	strb	r2, [r3, #5]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Use_Fixed_Pin = CFG_USED_FIXED_PIN;
 80011ee:	4b1b      	ldr	r3, [pc, #108]	; (800125c <Ble_Hci_Gap_Gatt_Init+0x1b0>)
 80011f0:	2200      	movs	r2, #0
 80011f2:	70da      	strb	r2, [r3, #3]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Fixed_Pin = CFG_FIXED_PIN;
 80011f4:	4b19      	ldr	r3, [pc, #100]	; (800125c <Ble_Hci_Gap_Gatt_Init+0x1b0>)
 80011f6:	4a1a      	ldr	r2, [pc, #104]	; (8001260 <Ble_Hci_Gap_Gatt_Init+0x1b4>)
 80011f8:	609a      	str	r2, [r3, #8]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode = CFG_BONDING_MODE;
 80011fa:	4b18      	ldr	r3, [pc, #96]	; (800125c <Ble_Hci_Gap_Gatt_Init+0x1b0>)
 80011fc:	2201      	movs	r2, #1
 80011fe:	709a      	strb	r2, [r3, #2]

  aci_gap_set_authentication_requirement(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode,
 8001200:	4b16      	ldr	r3, [pc, #88]	; (800125c <Ble_Hci_Gap_Gatt_Init+0x1b0>)
 8001202:	789d      	ldrb	r5, [r3, #2]
 8001204:	4b15      	ldr	r3, [pc, #84]	; (800125c <Ble_Hci_Gap_Gatt_Init+0x1b0>)
 8001206:	785e      	ldrb	r6, [r3, #1]
 8001208:	4b14      	ldr	r3, [pc, #80]	; (800125c <Ble_Hci_Gap_Gatt_Init+0x1b0>)
 800120a:	791b      	ldrb	r3, [r3, #4]
 800120c:	4a13      	ldr	r2, [pc, #76]	; (800125c <Ble_Hci_Gap_Gatt_Init+0x1b0>)
 800120e:	7952      	ldrb	r2, [r2, #5]
 8001210:	4912      	ldr	r1, [pc, #72]	; (800125c <Ble_Hci_Gap_Gatt_Init+0x1b0>)
 8001212:	78c9      	ldrb	r1, [r1, #3]
 8001214:	4811      	ldr	r0, [pc, #68]	; (800125c <Ble_Hci_Gap_Gatt_Init+0x1b0>)
 8001216:	6880      	ldr	r0, [r0, #8]
 8001218:	2400      	movs	r4, #0
 800121a:	9404      	str	r4, [sp, #16]
 800121c:	9003      	str	r0, [sp, #12]
 800121e:	9102      	str	r1, [sp, #8]
 8001220:	9201      	str	r2, [sp, #4]
 8001222:	9300      	str	r3, [sp, #0]
 8001224:	2300      	movs	r3, #0
 8001226:	2201      	movs	r2, #1
 8001228:	4631      	mov	r1, r6
 800122a:	4628      	mov	r0, r5
 800122c:	f00c f976 	bl	800d51c <aci_gap_set_authentication_requirement>
                                         );

  /**
   * Initialize whitelist
   */
   if (BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode)
 8001230:	4b0a      	ldr	r3, [pc, #40]	; (800125c <Ble_Hci_Gap_Gatt_Init+0x1b0>)
 8001232:	789b      	ldrb	r3, [r3, #2]
 8001234:	2b00      	cmp	r3, #0
 8001236:	d001      	beq.n	800123c <Ble_Hci_Gap_Gatt_Init+0x190>
   {
     aci_gap_configure_whitelist();
 8001238:	f00c faff 	bl	800d83a <aci_gap_configure_whitelist>
   }
}
 800123c:	bf00      	nop
 800123e:	3724      	adds	r7, #36	; 0x24
 8001240:	46bd      	mov	sp, r7
 8001242:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001244:	20000004 	.word	0x20000004
 8001248:	08018a5c 	.word	0x08018a5c
 800124c:	08018a6c 	.word	0x08018a6c
 8001250:	080180b4 	.word	0x080180b4
 8001254:	080180bc 	.word	0x080180bc
 8001258:	080180ec 	.word	0x080180ec
 800125c:	200001f8 	.word	0x200001f8
 8001260:	0001b207 	.word	0x0001b207

08001264 <Adv_Request>:

static void Adv_Request(APP_BLE_ConnStatus_t New_Status)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	b08c      	sub	sp, #48	; 0x30
 8001268:	af08      	add	r7, sp, #32
 800126a:	4603      	mov	r3, r0
 800126c:	71fb      	strb	r3, [r7, #7]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800126e:	2342      	movs	r3, #66	; 0x42
 8001270:	72fb      	strb	r3, [r7, #11]
  uint16_t Min_Inter, Max_Inter;

  if (New_Status == APP_BLE_FAST_ADV)
 8001272:	79fb      	ldrb	r3, [r7, #7]
 8001274:	2b01      	cmp	r3, #1
 8001276:	d106      	bne.n	8001286 <Adv_Request+0x22>
  {
    Min_Inter = AdvIntervalMin;
 8001278:	4b3f      	ldr	r3, [pc, #252]	; (8001378 <Adv_Request+0x114>)
 800127a:	881b      	ldrh	r3, [r3, #0]
 800127c:	81fb      	strh	r3, [r7, #14]
    Max_Inter = AdvIntervalMax;
 800127e:	4b3f      	ldr	r3, [pc, #252]	; (800137c <Adv_Request+0x118>)
 8001280:	881b      	ldrh	r3, [r3, #0]
 8001282:	81bb      	strh	r3, [r7, #12]
 8001284:	e005      	b.n	8001292 <Adv_Request+0x2e>
  }
  else
  {
    Min_Inter = CFG_LP_CONN_ADV_INTERVAL_MIN;
 8001286:	f44f 63c8 	mov.w	r3, #1600	; 0x640
 800128a:	81fb      	strh	r3, [r7, #14]
    Max_Inter = CFG_LP_CONN_ADV_INTERVAL_MAX;
 800128c:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 8001290:	81bb      	strh	r3, [r7, #12]

    /**
     * Stop the timer, it will be restarted for a new shot
     * It does not hurt if the timer was not running
     */
    HW_TS_Stop(BleApplicationContext.Advertising_mgr_timer_Id);
 8001292:	4b3b      	ldr	r3, [pc, #236]	; (8001380 <Adv_Request+0x11c>)
 8001294:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8001298:	4618      	mov	r0, r3
 800129a:	f002 f94b 	bl	8003534 <HW_TS_Stop>

    APP_DBG_MSG("First index in %d state \n", BleApplicationContext.Device_Connection_Status);
 800129e:	4b38      	ldr	r3, [pc, #224]	; (8001380 <Adv_Request+0x11c>)
 80012a0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80012a4:	4619      	mov	r1, r3
 80012a6:	4837      	ldr	r0, [pc, #220]	; (8001384 <Adv_Request+0x120>)
 80012a8:	f013 fa58 	bl	801475c <iprintf>

    if ((New_Status == APP_BLE_LP_ADV)
 80012ac:	79fb      	ldrb	r3, [r7, #7]
 80012ae:	2b02      	cmp	r3, #2
 80012b0:	d119      	bne.n	80012e6 <Adv_Request+0x82>
        && ((BleApplicationContext.Device_Connection_Status == APP_BLE_FAST_ADV)
 80012b2:	4b33      	ldr	r3, [pc, #204]	; (8001380 <Adv_Request+0x11c>)
 80012b4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80012b8:	2b01      	cmp	r3, #1
 80012ba:	d004      	beq.n	80012c6 <Adv_Request+0x62>
            || (BleApplicationContext.Device_Connection_Status == APP_BLE_LP_ADV)))
 80012bc:	4b30      	ldr	r3, [pc, #192]	; (8001380 <Adv_Request+0x11c>)
 80012be:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80012c2:	2b02      	cmp	r3, #2
 80012c4:	d10f      	bne.n	80012e6 <Adv_Request+0x82>
    {
      /* Connection in ADVERTISE mode have to stop the current advertising */
      ret = aci_gap_set_non_discoverable();
 80012c6:	f00b ffdd 	bl	800d284 <aci_gap_set_non_discoverable>
 80012ca:	4603      	mov	r3, r0
 80012cc:	72fb      	strb	r3, [r7, #11]
      if (ret == BLE_STATUS_SUCCESS)
 80012ce:	7afb      	ldrb	r3, [r7, #11]
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d103      	bne.n	80012dc <Adv_Request+0x78>
      {
        APP_DBG_MSG("Successfully Stopped Advertising \n");
 80012d4:	482c      	ldr	r0, [pc, #176]	; (8001388 <Adv_Request+0x124>)
 80012d6:	f013 fab5 	bl	8014844 <puts>
 80012da:	e004      	b.n	80012e6 <Adv_Request+0x82>
      }
      else
      {
        APP_DBG_MSG("Stop Advertising Failed , result: %d \n", ret);
 80012dc:	7afb      	ldrb	r3, [r7, #11]
 80012de:	4619      	mov	r1, r3
 80012e0:	482a      	ldr	r0, [pc, #168]	; (800138c <Adv_Request+0x128>)
 80012e2:	f013 fa3b 	bl	801475c <iprintf>
      }
    }

    BleApplicationContext.Device_Connection_Status = New_Status;
 80012e6:	4a26      	ldr	r2, [pc, #152]	; (8001380 <Adv_Request+0x11c>)
 80012e8:	79fb      	ldrb	r3, [r7, #7]
 80012ea:	f882 3080 	strb.w	r3, [r2, #128]	; 0x80
    /* Start Fast or Low Power Advertising */
    ret = aci_gap_set_discoverable(
 80012ee:	4b24      	ldr	r3, [pc, #144]	; (8001380 <Adv_Request+0x11c>)
 80012f0:	7e1b      	ldrb	r3, [r3, #24]
 80012f2:	89b8      	ldrh	r0, [r7, #12]
 80012f4:	89f9      	ldrh	r1, [r7, #14]
 80012f6:	2200      	movs	r2, #0
 80012f8:	9206      	str	r2, [sp, #24]
 80012fa:	2200      	movs	r2, #0
 80012fc:	9205      	str	r2, [sp, #20]
 80012fe:	4a24      	ldr	r2, [pc, #144]	; (8001390 <Adv_Request+0x12c>)
 8001300:	9204      	str	r2, [sp, #16]
 8001302:	9303      	str	r3, [sp, #12]
 8001304:	4b23      	ldr	r3, [pc, #140]	; (8001394 <Adv_Request+0x130>)
 8001306:	9302      	str	r3, [sp, #8]
 8001308:	2308      	movs	r3, #8
 800130a:	9301      	str	r3, [sp, #4]
 800130c:	2300      	movs	r3, #0
 800130e:	9300      	str	r3, [sp, #0]
 8001310:	2300      	movs	r3, #0
 8001312:	4602      	mov	r2, r0
 8001314:	2000      	movs	r0, #0
 8001316:	f00b ffd9 	bl	800d2cc <aci_gap_set_discoverable>
 800131a:	4603      	mov	r3, r0
 800131c:	72fb      	strb	r3, [r7, #11]
        BleApplicationContext.BleApplicationContext_legacy.advtServUUID,
        0,
        0);

    /* Update Advertising data */
    ret = aci_gap_update_adv_data(sizeof(manuf_data), (uint8_t*) manuf_data);
 800131e:	491e      	ldr	r1, [pc, #120]	; (8001398 <Adv_Request+0x134>)
 8001320:	200e      	movs	r0, #14
 8001322:	f00c fa2e 	bl	800d782 <aci_gap_update_adv_data>
 8001326:	4603      	mov	r3, r0
 8001328:	72fb      	strb	r3, [r7, #11]
    if (ret == BLE_STATUS_SUCCESS)
 800132a:	7afb      	ldrb	r3, [r7, #11]
 800132c:	2b00      	cmp	r3, #0
 800132e:	d111      	bne.n	8001354 <Adv_Request+0xf0>
    {
      if (New_Status == APP_BLE_FAST_ADV)
 8001330:	79fb      	ldrb	r3, [r7, #7]
 8001332:	2b01      	cmp	r3, #1
 8001334:	d10a      	bne.n	800134c <Adv_Request+0xe8>
      {
        APP_DBG_MSG("Successfully Start Fast Advertising \n" );
 8001336:	4819      	ldr	r0, [pc, #100]	; (800139c <Adv_Request+0x138>)
 8001338:	f013 fa84 	bl	8014844 <puts>
        /* Start Timer to STOP ADV - TIMEOUT */
        HW_TS_Start(BleApplicationContext.Advertising_mgr_timer_Id, INITIAL_ADV_TIMEOUT);
 800133c:	4b10      	ldr	r3, [pc, #64]	; (8001380 <Adv_Request+0x11c>)
 800133e:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8001342:	4917      	ldr	r1, [pc, #92]	; (80013a0 <Adv_Request+0x13c>)
 8001344:	4618      	mov	r0, r3
 8001346:	f002 f97f 	bl	8003648 <HW_TS_Start>
      {
        APP_DBG_MSG("Start Low Power Advertising Failed , result: %d \n", ret);
      }
    }

  return;
 800134a:	e012      	b.n	8001372 <Adv_Request+0x10e>
        APP_DBG_MSG("Successfully Start Low Power Advertising \n");
 800134c:	4815      	ldr	r0, [pc, #84]	; (80013a4 <Adv_Request+0x140>)
 800134e:	f013 fa79 	bl	8014844 <puts>
  return;
 8001352:	e00e      	b.n	8001372 <Adv_Request+0x10e>
      if (New_Status == APP_BLE_FAST_ADV)
 8001354:	79fb      	ldrb	r3, [r7, #7]
 8001356:	2b01      	cmp	r3, #1
 8001358:	d105      	bne.n	8001366 <Adv_Request+0x102>
        APP_DBG_MSG("Start Fast Advertising Failed , result: %d \n", ret);
 800135a:	7afb      	ldrb	r3, [r7, #11]
 800135c:	4619      	mov	r1, r3
 800135e:	4812      	ldr	r0, [pc, #72]	; (80013a8 <Adv_Request+0x144>)
 8001360:	f013 f9fc 	bl	801475c <iprintf>
  return;
 8001364:	e005      	b.n	8001372 <Adv_Request+0x10e>
        APP_DBG_MSG("Start Low Power Advertising Failed , result: %d \n", ret);
 8001366:	7afb      	ldrb	r3, [r7, #11]
 8001368:	4619      	mov	r1, r3
 800136a:	4810      	ldr	r0, [pc, #64]	; (80013ac <Adv_Request+0x148>)
 800136c:	f013 f9f6 	bl	801475c <iprintf>
  return;
 8001370:	bf00      	nop
}
 8001372:	3710      	adds	r7, #16
 8001374:	46bd      	mov	sp, r7
 8001376:	bd80      	pop	{r7, pc}
 8001378:	2000027c 	.word	0x2000027c
 800137c:	2000027e 	.word	0x2000027e
 8001380:	200001f8 	.word	0x200001f8
 8001384:	0801811c 	.word	0x0801811c
 8001388:	08018138 	.word	0x08018138
 800138c:	0801815c 	.word	0x0801815c
 8001390:	20000211 	.word	0x20000211
 8001394:	08018a7c 	.word	0x08018a7c
 8001398:	20000004 	.word	0x20000004
 800139c:	08018184 	.word	0x08018184
 80013a0:	0001e046 	.word	0x0001e046
 80013a4:	080181ac 	.word	0x080181ac
 80013a8:	080181d8 	.word	0x080181d8
 80013ac:	08018208 	.word	0x08018208

080013b0 <BleGetBdAddress>:

const uint8_t* BleGetBdAddress( void )
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b086      	sub	sp, #24
 80013b4:	af00      	add	r7, sp, #0
  const uint8_t *bd_addr;
  uint32_t udn;
  uint32_t company_id;
  uint32_t device_id;

  udn = LL_FLASH_GetUDN();
 80013b6:	f7ff fc1f 	bl	8000bf8 <LL_FLASH_GetUDN>
 80013ba:	6138      	str	r0, [r7, #16]

  if(udn != 0xFFFFFFFF)
 80013bc:	693b      	ldr	r3, [r7, #16]
 80013be:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80013c2:	d023      	beq.n	800140c <BleGetBdAddress+0x5c>
  {
    company_id = LL_FLASH_GetSTCompanyID();
 80013c4:	f7ff fc30 	bl	8000c28 <LL_FLASH_GetSTCompanyID>
 80013c8:	60b8      	str	r0, [r7, #8]
    device_id = LL_FLASH_GetDeviceID();
 80013ca:	f7ff fc21 	bl	8000c10 <LL_FLASH_GetDeviceID>
 80013ce:	6078      	str	r0, [r7, #4]

    bd_addr_udn[0] = (uint8_t)(udn & 0x000000FF);
 80013d0:	693b      	ldr	r3, [r7, #16]
 80013d2:	b2da      	uxtb	r2, r3
 80013d4:	4b16      	ldr	r3, [pc, #88]	; (8001430 <BleGetBdAddress+0x80>)
 80013d6:	701a      	strb	r2, [r3, #0]
    bd_addr_udn[1] = (uint8_t)( (udn & 0x0000FF00) >> 8 );
 80013d8:	693b      	ldr	r3, [r7, #16]
 80013da:	0a1b      	lsrs	r3, r3, #8
 80013dc:	b2da      	uxtb	r2, r3
 80013de:	4b14      	ldr	r3, [pc, #80]	; (8001430 <BleGetBdAddress+0x80>)
 80013e0:	705a      	strb	r2, [r3, #1]
    bd_addr_udn[2] = (uint8_t)( (udn & 0x00FF0000) >> 16 );
 80013e2:	693b      	ldr	r3, [r7, #16]
 80013e4:	0c1b      	lsrs	r3, r3, #16
 80013e6:	b2da      	uxtb	r2, r3
 80013e8:	4b11      	ldr	r3, [pc, #68]	; (8001430 <BleGetBdAddress+0x80>)
 80013ea:	709a      	strb	r2, [r3, #2]
    bd_addr_udn[3] = (uint8_t)device_id;
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	b2da      	uxtb	r2, r3
 80013f0:	4b0f      	ldr	r3, [pc, #60]	; (8001430 <BleGetBdAddress+0x80>)
 80013f2:	70da      	strb	r2, [r3, #3]
    bd_addr_udn[4] = (uint8_t)(company_id & 0x000000FF);;
 80013f4:	68bb      	ldr	r3, [r7, #8]
 80013f6:	b2da      	uxtb	r2, r3
 80013f8:	4b0d      	ldr	r3, [pc, #52]	; (8001430 <BleGetBdAddress+0x80>)
 80013fa:	711a      	strb	r2, [r3, #4]
    bd_addr_udn[5] = (uint8_t)( (company_id & 0x0000FF00) >> 8 );
 80013fc:	68bb      	ldr	r3, [r7, #8]
 80013fe:	0a1b      	lsrs	r3, r3, #8
 8001400:	b2da      	uxtb	r2, r3
 8001402:	4b0b      	ldr	r3, [pc, #44]	; (8001430 <BleGetBdAddress+0x80>)
 8001404:	715a      	strb	r2, [r3, #5]

    bd_addr = (const uint8_t *)bd_addr_udn;
 8001406:	4b0a      	ldr	r3, [pc, #40]	; (8001430 <BleGetBdAddress+0x80>)
 8001408:	617b      	str	r3, [r7, #20]
 800140a:	e00b      	b.n	8001424 <BleGetBdAddress+0x74>
  }
  else
  {
    otp_addr = OTP_Read(0);
 800140c:	2000      	movs	r0, #0
 800140e:	f00d fe0d 	bl	800f02c <OTP_Read>
 8001412:	60f8      	str	r0, [r7, #12]
    if(otp_addr)
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	2b00      	cmp	r3, #0
 8001418:	d002      	beq.n	8001420 <BleGetBdAddress+0x70>
    {
      bd_addr = ((OTP_ID0_t*)otp_addr)->bd_address;
 800141a:	68fb      	ldr	r3, [r7, #12]
 800141c:	617b      	str	r3, [r7, #20]
 800141e:	e001      	b.n	8001424 <BleGetBdAddress+0x74>
    }
    else
    {
      bd_addr = M_bd_addr;
 8001420:	4b04      	ldr	r3, [pc, #16]	; (8001434 <BleGetBdAddress+0x84>)
 8001422:	617b      	str	r3, [r7, #20]
    }

  }

  return bd_addr;
 8001424:	697b      	ldr	r3, [r7, #20]
}
 8001426:	4618      	mov	r0, r3
 8001428:	3718      	adds	r7, #24
 800142a:	46bd      	mov	sp, r7
 800142c:	bd80      	pop	{r7, pc}
 800142e:	bf00      	nop
 8001430:	2000038c 	.word	0x2000038c
 8001434:	08018a54 	.word	0x08018a54

08001438 <Adv_Mgr>:
  return;
}
*/

static void Adv_Mgr( void )
{
 8001438:	b580      	push	{r7, lr}
 800143a:	af00      	add	r7, sp, #0
  /**
   * The code shall be executed in the background as an aci command may be sent
   * The background is the only place where the application can make sure a new aci command
   * is not sent if there is a pending one
   */
  osThreadFlagsSet( AdvUpdateProcessId, 1 );
 800143c:	4b03      	ldr	r3, [pc, #12]	; (800144c <Adv_Mgr+0x14>)
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	2101      	movs	r1, #1
 8001442:	4618      	mov	r0, r3
 8001444:	f00e fbe8 	bl	800fc18 <osThreadFlagsSet>

  return;
 8001448:	bf00      	nop
}
 800144a:	bd80      	pop	{r7, pc}
 800144c:	2002e1bc 	.word	0x2002e1bc

08001450 <AdvUpdateProcess>:

static void AdvUpdateProcess(void *argument)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	b082      	sub	sp, #8
 8001454:	af00      	add	r7, sp, #0
 8001456:	6078      	str	r0, [r7, #4]
  UNUSED(argument);

  for(;;)
  {
    osThreadFlagsWait( 1, osFlagsWaitAny, osWaitForever);
 8001458:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800145c:	2100      	movs	r1, #0
 800145e:	2001      	movs	r0, #1
 8001460:	f00e fc3c 	bl	800fcdc <osThreadFlagsWait>
    Adv_Update( );
 8001464:	f000 f801 	bl	800146a <Adv_Update>
    osThreadFlagsWait( 1, osFlagsWaitAny, osWaitForever);
 8001468:	e7f6      	b.n	8001458 <AdvUpdateProcess+0x8>

0800146a <Adv_Update>:
  }
}

static void Adv_Update( void )
{
 800146a:	b580      	push	{r7, lr}
 800146c:	af00      	add	r7, sp, #0
  Adv_Request(APP_BLE_LP_ADV);
 800146e:	2002      	movs	r0, #2
 8001470:	f7ff fef8 	bl	8001264 <Adv_Request>

  return;
 8001474:	bf00      	nop
}
 8001476:	bd80      	pop	{r7, pc}

08001478 <HciUserEvtProcess>:
  }
  return;
}

static void HciUserEvtProcess(void *argument)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	b082      	sub	sp, #8
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
  UNUSED(argument);

  for(;;)
  {
    osThreadFlagsWait( 1, osFlagsWaitAny, osWaitForever);
 8001480:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001484:	2100      	movs	r1, #0
 8001486:	2001      	movs	r0, #1
 8001488:	f00e fc28 	bl	800fcdc <osThreadFlagsWait>
    hci_user_evt_proc( );
 800148c:	f00c fefc 	bl	800e288 <hci_user_evt_proc>
    osThreadFlagsWait( 1, osFlagsWaitAny, osWaitForever);
 8001490:	e7f6      	b.n	8001480 <HciUserEvtProcess+0x8>
	...

08001494 <hci_notify_asynch_evt>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void hci_notify_asynch_evt(void* pdata)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	b082      	sub	sp, #8
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]
  UNUSED(pdata);
  osThreadFlagsSet( HciUserEvtProcessId, 1 );
 800149c:	4b04      	ldr	r3, [pc, #16]	; (80014b0 <hci_notify_asynch_evt+0x1c>)
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	2101      	movs	r1, #1
 80014a2:	4618      	mov	r0, r3
 80014a4:	f00e fbb8 	bl	800fc18 <osThreadFlagsSet>
  return;
 80014a8:	bf00      	nop
}
 80014aa:	3708      	adds	r7, #8
 80014ac:	46bd      	mov	sp, r7
 80014ae:	bd80      	pop	{r7, pc}
 80014b0:	2002e074 	.word	0x2002e074

080014b4 <hci_cmd_resp_release>:

void hci_cmd_resp_release(uint32_t flag)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b082      	sub	sp, #8
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	6078      	str	r0, [r7, #4]
  UNUSED(flag);
  osSemaphoreRelease( SemHciId );
 80014bc:	4b04      	ldr	r3, [pc, #16]	; (80014d0 <hci_cmd_resp_release+0x1c>)
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	4618      	mov	r0, r3
 80014c2:	f00e ff19 	bl	80102f8 <osSemaphoreRelease>
  return;
 80014c6:	bf00      	nop
}
 80014c8:	3708      	adds	r7, #8
 80014ca:	46bd      	mov	sp, r7
 80014cc:	bd80      	pop	{r7, pc}
 80014ce:	bf00      	nop
 80014d0:	2002e070 	.word	0x2002e070

080014d4 <hci_cmd_resp_wait>:

void hci_cmd_resp_wait(uint32_t timeout)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b082      	sub	sp, #8
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]
  UNUSED(timeout);
  osSemaphoreAcquire( SemHciId, osWaitForever );
 80014dc:	4b05      	ldr	r3, [pc, #20]	; (80014f4 <hci_cmd_resp_wait+0x20>)
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80014e4:	4618      	mov	r0, r3
 80014e6:	f00e fea1 	bl	801022c <osSemaphoreAcquire>
  return;
 80014ea:	bf00      	nop
}
 80014ec:	3708      	adds	r7, #8
 80014ee:	46bd      	mov	sp, r7
 80014f0:	bd80      	pop	{r7, pc}
 80014f2:	bf00      	nop
 80014f4:	2002e070 	.word	0x2002e070

080014f8 <BLE_UserEvtRx>:

static void BLE_UserEvtRx( void * pPayload )
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b084      	sub	sp, #16
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]
  SVCCTL_UserEvtFlowStatus_t svctl_return_status;
  tHCI_UserEvtRxParam *pParam;

  pParam = (tHCI_UserEvtRxParam *)pPayload;
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	60fb      	str	r3, [r7, #12]

  svctl_return_status = SVCCTL_UserEvtRx((void *)&(pParam->pckt->evtserial));
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	685b      	ldr	r3, [r3, #4]
 8001508:	3308      	adds	r3, #8
 800150a:	4618      	mov	r0, r3
 800150c:	f00b fe68 	bl	800d1e0 <SVCCTL_UserEvtRx>
 8001510:	4603      	mov	r3, r0
 8001512:	72fb      	strb	r3, [r7, #11]
  if (svctl_return_status != SVCCTL_UserEvtFlowDisable)
 8001514:	7afb      	ldrb	r3, [r7, #11]
 8001516:	2b00      	cmp	r3, #0
 8001518:	d003      	beq.n	8001522 <BLE_UserEvtRx+0x2a>
  {
    pParam->status = HCI_TL_UserEventFlow_Enable;
 800151a:	68fb      	ldr	r3, [r7, #12]
 800151c:	2201      	movs	r2, #1
 800151e:	701a      	strb	r2, [r3, #0]
  }
  else
  {
    pParam->status = HCI_TL_UserEventFlow_Disable;
  }
}
 8001520:	e002      	b.n	8001528 <BLE_UserEvtRx+0x30>
    pParam->status = HCI_TL_UserEventFlow_Disable;
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	2200      	movs	r2, #0
 8001526:	701a      	strb	r2, [r3, #0]
}
 8001528:	bf00      	nop
 800152a:	3710      	adds	r7, #16
 800152c:	46bd      	mov	sp, r7
 800152e:	bd80      	pop	{r7, pc}

08001530 <BLE_StatusNot>:

static void BLE_StatusNot( HCI_TL_CmdStatus_t status )
{
 8001530:	b580      	push	{r7, lr}
 8001532:	b082      	sub	sp, #8
 8001534:	af00      	add	r7, sp, #0
 8001536:	4603      	mov	r3, r0
 8001538:	71fb      	strb	r3, [r7, #7]
  switch (status)
 800153a:	79fb      	ldrb	r3, [r7, #7]
 800153c:	2b00      	cmp	r3, #0
 800153e:	d002      	beq.n	8001546 <BLE_StatusNot+0x16>
 8001540:	2b01      	cmp	r3, #1
 8001542:	d008      	beq.n	8001556 <BLE_StatusNot+0x26>
    case HCI_TL_CmdAvailable:
      osMutexRelease( MtxHciId );
      break;

    default:
      break;
 8001544:	e00d      	b.n	8001562 <BLE_StatusNot+0x32>
      osMutexAcquire( MtxHciId, osWaitForever );
 8001546:	4b09      	ldr	r3, [pc, #36]	; (800156c <BLE_StatusNot+0x3c>)
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800154e:	4618      	mov	r0, r3
 8001550:	f00e fd20 	bl	800ff94 <osMutexAcquire>
      break;
 8001554:	e005      	b.n	8001562 <BLE_StatusNot+0x32>
      osMutexRelease( MtxHciId );
 8001556:	4b05      	ldr	r3, [pc, #20]	; (800156c <BLE_StatusNot+0x3c>)
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	4618      	mov	r0, r3
 800155c:	f00e fd78 	bl	8010050 <osMutexRelease>
      break;
 8001560:	bf00      	nop
  }
  return;
 8001562:	bf00      	nop
}
 8001564:	3708      	adds	r7, #8
 8001566:	46bd      	mov	sp, r7
 8001568:	bd80      	pop	{r7, pc}
 800156a:	bf00      	nop
 800156c:	2002e0a0 	.word	0x2002e0a0

08001570 <P2PS_STM_App_Notification>:
/* Private function prototypes -----------------------------------------------*/
void P2PS_APP_Context_Init(void);

/* Functions Definition ------------------------------------------------------*/
void P2PS_STM_App_Notification(P2PS_STM_App_Notification_evt_t *pNotification)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	b082      	sub	sp, #8
 8001574:	af00      	add	r7, sp, #0
 8001576:	6078      	str	r0, [r7, #4]
  switch(pNotification->P2P_Evt_Opcode)
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	781b      	ldrb	r3, [r3, #0]
 800157c:	2b01      	cmp	r3, #1
 800157e:	d00e      	beq.n	800159e <P2PS_STM_App_Notification+0x2e>
 8001580:	2b03      	cmp	r3, #3
 8001582:	d016      	beq.n	80015b2 <P2PS_STM_App_Notification+0x42>
 8001584:	2b00      	cmp	r3, #0
 8001586:	d000      	beq.n	800158a <P2PS_STM_App_Notification+0x1a>
    case P2PS_STM_WRITE_EVT:
		osMessageQueuePut(bleRXqueueHandle, &(pNotification->DataTransfered), 0, 0);
      break;

    default:
      break;
 8001588:	e01c      	b.n	80015c4 <P2PS_STM_App_Notification+0x54>
      P2P_Server_App_Context.Notification_Status = 1;
 800158a:	4b10      	ldr	r3, [pc, #64]	; (80015cc <P2PS_STM_App_Notification+0x5c>)
 800158c:	2201      	movs	r2, #1
 800158e:	701a      	strb	r2, [r3, #0]
      APP_DBG_MSG("-- P2P APPLICATION SERVER : NOTIFICATION ENABLED\n");
 8001590:	480f      	ldr	r0, [pc, #60]	; (80015d0 <P2PS_STM_App_Notification+0x60>)
 8001592:	f013 f957 	bl	8014844 <puts>
      APP_DBG_MSG(" \n\r");
 8001596:	480f      	ldr	r0, [pc, #60]	; (80015d4 <P2PS_STM_App_Notification+0x64>)
 8001598:	f013 f8e0 	bl	801475c <iprintf>
      break;
 800159c:	e012      	b.n	80015c4 <P2PS_STM_App_Notification+0x54>
      P2P_Server_App_Context.Notification_Status = 0;
 800159e:	4b0b      	ldr	r3, [pc, #44]	; (80015cc <P2PS_STM_App_Notification+0x5c>)
 80015a0:	2200      	movs	r2, #0
 80015a2:	701a      	strb	r2, [r3, #0]
      APP_DBG_MSG("-- P2P APPLICATION SERVER : NOTIFICATION DISABLED\n");
 80015a4:	480c      	ldr	r0, [pc, #48]	; (80015d8 <P2PS_STM_App_Notification+0x68>)
 80015a6:	f013 f94d 	bl	8014844 <puts>
      APP_DBG_MSG(" \n\r");
 80015aa:	480a      	ldr	r0, [pc, #40]	; (80015d4 <P2PS_STM_App_Notification+0x64>)
 80015ac:	f013 f8d6 	bl	801475c <iprintf>
      break;
 80015b0:	e008      	b.n	80015c4 <P2PS_STM_App_Notification+0x54>
		osMessageQueuePut(bleRXqueueHandle, &(pNotification->DataTransfered), 0, 0);
 80015b2:	4b0a      	ldr	r3, [pc, #40]	; (80015dc <P2PS_STM_App_Notification+0x6c>)
 80015b4:	6818      	ldr	r0, [r3, #0]
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	1d19      	adds	r1, r3, #4
 80015ba:	2300      	movs	r3, #0
 80015bc:	2200      	movs	r2, #0
 80015be:	f00e ff79 	bl	80104b4 <osMessageQueuePut>
      break;
 80015c2:	bf00      	nop
  }
  return;
 80015c4:	bf00      	nop
}
 80015c6:	3708      	adds	r7, #8
 80015c8:	46bd      	mov	sp, r7
 80015ca:	bd80      	pop	{r7, pc}
 80015cc:	2002e088 	.word	0x2002e088
 80015d0:	080183f8 	.word	0x080183f8
 80015d4:	0801842c 	.word	0x0801842c
 80015d8:	08018430 	.word	0x08018430
 80015dc:	2002e07c 	.word	0x2002e07c

080015e0 <P2PS_APP_Notification>:

void P2PS_APP_Notification(P2PS_APP_ConnHandle_Not_evt_t *pNotification)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b082      	sub	sp, #8
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
  switch(pNotification->P2P_Evt_Opcode)
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	781b      	ldrb	r3, [r3, #0]
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d002      	beq.n	80015f6 <P2PS_APP_Notification+0x16>
 80015f0:	2b01      	cmp	r3, #1
 80015f2:	d004      	beq.n	80015fe <P2PS_APP_Notification+0x1e>

    case PEER_DISCON_HANDLE_EVT :
       P2PS_APP_Context_Init();
       break;
    default:
      break;
 80015f4:	e006      	b.n	8001604 <P2PS_APP_Notification+0x24>
	  P2P_Server_App_Context.Connected = 1;
 80015f6:	4b05      	ldr	r3, [pc, #20]	; (800160c <P2PS_APP_Notification+0x2c>)
 80015f8:	2201      	movs	r2, #1
 80015fa:	705a      	strb	r2, [r3, #1]
    break;
 80015fc:	e002      	b.n	8001604 <P2PS_APP_Notification+0x24>
       P2PS_APP_Context_Init();
 80015fe:	f000 f813 	bl	8001628 <P2PS_APP_Context_Init>
       break;
 8001602:	bf00      	nop
  }
  return;
 8001604:	bf00      	nop
}
 8001606:	3708      	adds	r7, #8
 8001608:	46bd      	mov	sp, r7
 800160a:	bd80      	pop	{r7, pc}
 800160c:	2002e088 	.word	0x2002e088

08001610 <P2PS_APP_Init>:

void P2PS_APP_Init(void)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	af00      	add	r7, sp, #0
  P2P_Server_App_Context.Notification_Status=0;
 8001614:	4b03      	ldr	r3, [pc, #12]	; (8001624 <P2PS_APP_Init+0x14>)
 8001616:	2200      	movs	r2, #0
 8001618:	701a      	strb	r2, [r3, #0]
  P2PS_APP_Context_Init();
 800161a:	f000 f805 	bl	8001628 <P2PS_APP_Context_Init>
  return;
 800161e:	bf00      	nop
}
 8001620:	bd80      	pop	{r7, pc}
 8001622:	bf00      	nop
 8001624:	2002e088 	.word	0x2002e088

08001628 <P2PS_APP_Context_Init>:

void  P2PS_APP_Context_Init(void)
{
 8001628:	b480      	push	{r7}
 800162a:	af00      	add	r7, sp, #0
	  //init context on app init and on reconnect events
	  P2P_Server_App_Context.Connected = 0;
 800162c:	4b03      	ldr	r3, [pc, #12]	; (800163c <P2PS_APP_Context_Init+0x14>)
 800162e:	2200      	movs	r2, #0
 8001630:	705a      	strb	r2, [r3, #1]
}
 8001632:	bf00      	nop
 8001634:	46bd      	mov	sp, r7
 8001636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163a:	4770      	bx	lr
 800163c:	2002e088 	.word	0x2002e088

08001640 <LL_PWR_EnableBootC2>:
  * @brief  Boot CPU2 after reset or wakeup from stop or standby modes
  * @rmtoll CR4          C2BOOT        LL_PWR_EnableBootC2
  * @retval None
  */
__STATIC_INLINE void LL_PWR_EnableBootC2(void)
{
 8001640:	b480      	push	{r7}
 8001642:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR4, PWR_CR4_C2BOOT);
 8001644:	4b05      	ldr	r3, [pc, #20]	; (800165c <LL_PWR_EnableBootC2+0x1c>)
 8001646:	68db      	ldr	r3, [r3, #12]
 8001648:	4a04      	ldr	r2, [pc, #16]	; (800165c <LL_PWR_EnableBootC2+0x1c>)
 800164a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800164e:	60d3      	str	r3, [r2, #12]
}
 8001650:	bf00      	nop
 8001652:	46bd      	mov	sp, r7
 8001654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001658:	4770      	bx	lr
 800165a:	bf00      	nop
 800165c:	58000400 	.word	0x58000400

08001660 <LL_C2_EXTI_EnableEvent_32_63>:
  *         @arg @ref LL_EXTI_LINE_40
  *         @arg @ref LL_EXTI_LINE_41
  * @retval None
  */
__STATIC_INLINE void LL_C2_EXTI_EnableEvent_32_63(uint32_t ExtiLine)
{
 8001660:	b480      	push	{r7}
 8001662:	b083      	sub	sp, #12
 8001664:	af00      	add	r7, sp, #0
 8001666:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->C2EMR2, ExtiLine);
 8001668:	4b06      	ldr	r3, [pc, #24]	; (8001684 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 800166a:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 800166e:	4905      	ldr	r1, [pc, #20]	; (8001684 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	4313      	orrs	r3, r2
 8001674:	f8c1 30d4 	str.w	r3, [r1, #212]	; 0xd4
}
 8001678:	bf00      	nop
 800167a:	370c      	adds	r7, #12
 800167c:	46bd      	mov	sp, r7
 800167e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001682:	4770      	bx	lr
 8001684:	58000800 	.word	0x58000800

08001688 <LL_EXTI_EnableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_32_63(uint32_t ExtiLine)
{
 8001688:	b480      	push	{r7}
 800168a:	b083      	sub	sp, #12
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 8001690:	4b05      	ldr	r3, [pc, #20]	; (80016a8 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8001692:	6a1a      	ldr	r2, [r3, #32]
 8001694:	4904      	ldr	r1, [pc, #16]	; (80016a8 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	4313      	orrs	r3, r2
 800169a:	620b      	str	r3, [r1, #32]
}
 800169c:	bf00      	nop
 800169e:	370c      	adds	r7, #12
 80016a0:	46bd      	mov	sp, r7
 80016a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a6:	4770      	bx	lr
 80016a8:	58000800 	.word	0x58000800

080016ac <LL_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_AHB3_GRP1_PERIPH_FLASH
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 80016ac:	b480      	push	{r7}
 80016ae:	b085      	sub	sp, #20
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB3ENR, Periphs);
 80016b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80016b8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80016ba:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	4313      	orrs	r3, r2
 80016c2:	650b      	str	r3, [r1, #80]	; 0x50
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 80016c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80016c8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	4013      	ands	r3, r2
 80016ce:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80016d0:	68fb      	ldr	r3, [r7, #12]
}
 80016d2:	bf00      	nop
 80016d4:	3714      	adds	r7, #20
 80016d6:	46bd      	mov	sp, r7
 80016d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016dc:	4770      	bx	lr

080016de <LL_C2_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_IPCC
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_FLASH
  * @retval None
  */
__STATIC_INLINE void LL_C2_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 80016de:	b480      	push	{r7}
 80016e0:	b085      	sub	sp, #20
 80016e2:	af00      	add	r7, sp, #0
 80016e4:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->C2AHB3ENR, Periphs);
 80016e6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80016ea:	f8d3 2150 	ldr.w	r2, [r3, #336]	; 0x150
 80016ee:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	4313      	orrs	r3, r2
 80016f6:	f8c1 3150 	str.w	r3, [r1, #336]	; 0x150
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->C2AHB3ENR, Periphs);
 80016fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80016fe:	f8d3 2150 	ldr.w	r2, [r3, #336]	; 0x150
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	4013      	ands	r3, r2
 8001706:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001708:	68fb      	ldr	r3, [r7, #12]
}
 800170a:	bf00      	nop
 800170c:	3714      	adds	r7, #20
 800170e:	46bd      	mov	sp, r7
 8001710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001714:	4770      	bx	lr

08001716 <LL_C1_IPCC_EnableIT_TXF>:
  * @rmtoll C1CR          TXFIE         LL_C1_IPCC_EnableIT_TXF
  * @param  IPCCx IPCC Instance.
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableIT_TXF(IPCC_TypeDef *IPCCx)
{
 8001716:	b480      	push	{r7}
 8001718:	b083      	sub	sp, #12
 800171a:	af00      	add	r7, sp, #0
 800171c:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_TXFIE);
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	601a      	str	r2, [r3, #0]
}
 800172a:	bf00      	nop
 800172c:	370c      	adds	r7, #12
 800172e:	46bd      	mov	sp, r7
 8001730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001734:	4770      	bx	lr

08001736 <LL_C1_IPCC_EnableIT_RXO>:
  * @rmtoll C1CR          RXOIE         LL_C1_IPCC_EnableIT_RXO
  * @param  IPCCx IPCC Instance.
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableIT_RXO(IPCC_TypeDef *IPCCx)
{
 8001736:	b480      	push	{r7}
 8001738:	b083      	sub	sp, #12
 800173a:	af00      	add	r7, sp, #0
 800173c:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_RXOIE);
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	f043 0201 	orr.w	r2, r3, #1
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	601a      	str	r2, [r3, #0]
}
 800174a:	bf00      	nop
 800174c:	370c      	adds	r7, #12
 800174e:	46bd      	mov	sp, r7
 8001750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001754:	4770      	bx	lr

08001756 <LL_C1_IPCC_EnableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8001756:	b480      	push	{r7}
 8001758:	b083      	sub	sp, #12
 800175a:	af00      	add	r7, sp, #0
 800175c:	6078      	str	r0, [r7, #4]
 800175e:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	685a      	ldr	r2, [r3, #4]
 8001764:	683b      	ldr	r3, [r7, #0]
 8001766:	041b      	lsls	r3, r3, #16
 8001768:	43db      	mvns	r3, r3
 800176a:	401a      	ands	r2, r3
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	605a      	str	r2, [r3, #4]
}
 8001770:	bf00      	nop
 8001772:	370c      	adds	r7, #12
 8001774:	46bd      	mov	sp, r7
 8001776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177a:	4770      	bx	lr

0800177c <LL_C1_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800177c:	b480      	push	{r7}
 800177e:	b083      	sub	sp, #12
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]
 8001784:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	685a      	ldr	r2, [r3, #4]
 800178a:	683b      	ldr	r3, [r7, #0]
 800178c:	041b      	lsls	r3, r3, #16
 800178e:	431a      	orrs	r2, r3
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	605a      	str	r2, [r3, #4]
}
 8001794:	bf00      	nop
 8001796:	370c      	adds	r7, #12
 8001798:	46bd      	mov	sp, r7
 800179a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179e:	4770      	bx	lr

080017a0 <LL_C1_IPCC_EnableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 80017a0:	b480      	push	{r7}
 80017a2:	b083      	sub	sp, #12
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]
 80017a8:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel);
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	685a      	ldr	r2, [r3, #4]
 80017ae:	683b      	ldr	r3, [r7, #0]
 80017b0:	43db      	mvns	r3, r3
 80017b2:	401a      	ands	r2, r3
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	605a      	str	r2, [r3, #4]
}
 80017b8:	bf00      	nop
 80017ba:	370c      	adds	r7, #12
 80017bc:	46bd      	mov	sp, r7
 80017be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c2:	4770      	bx	lr

080017c4 <LL_C1_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 80017c4:	b480      	push	{r7}
 80017c6:	b083      	sub	sp, #12
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]
 80017cc:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	683a      	ldr	r2, [r7, #0]
 80017d2:	609a      	str	r2, [r3, #8]
}
 80017d4:	bf00      	nop
 80017d6:	370c      	adds	r7, #12
 80017d8:	46bd      	mov	sp, r7
 80017da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017de:	4770      	bx	lr

080017e0 <LL_C1_IPCC_SetFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_SetFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 80017e0:	b480      	push	{r7}
 80017e2:	b083      	sub	sp, #12
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
 80017e8:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel << IPCC_C1SCR_CH1S_Pos);
 80017ea:	683b      	ldr	r3, [r7, #0]
 80017ec:	041a      	lsls	r2, r3, #16
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	609a      	str	r2, [r3, #8]
}
 80017f2:	bf00      	nop
 80017f4:	370c      	adds	r7, #12
 80017f6:	46bd      	mov	sp, r7
 80017f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fc:	4770      	bx	lr

080017fe <LL_C1_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C1_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 80017fe:	b480      	push	{r7}
 8001800:	b083      	sub	sp, #12
 8001802:	af00      	add	r7, sp, #0
 8001804:	6078      	str	r0, [r7, #4]
 8001806:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C1TOC2SR, Channel) == (Channel)) ? 1UL : 0UL);
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	68da      	ldr	r2, [r3, #12]
 800180c:	683b      	ldr	r3, [r7, #0]
 800180e:	4013      	ands	r3, r2
 8001810:	683a      	ldr	r2, [r7, #0]
 8001812:	429a      	cmp	r2, r3
 8001814:	d101      	bne.n	800181a <LL_C1_IPCC_IsActiveFlag_CHx+0x1c>
 8001816:	2301      	movs	r3, #1
 8001818:	e000      	b.n	800181c <LL_C1_IPCC_IsActiveFlag_CHx+0x1e>
 800181a:	2300      	movs	r3, #0
}
 800181c:	4618      	mov	r0, r3
 800181e:	370c      	adds	r7, #12
 8001820:	46bd      	mov	sp, r7
 8001822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001826:	4770      	bx	lr

08001828 <LL_C2_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C2_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 8001828:	b480      	push	{r7}
 800182a:	b083      	sub	sp, #12
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
 8001830:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C2TOC1SR, Channel) == (Channel)) ? 1UL : 0UL);
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	69da      	ldr	r2, [r3, #28]
 8001836:	683b      	ldr	r3, [r7, #0]
 8001838:	4013      	ands	r3, r2
 800183a:	683a      	ldr	r2, [r7, #0]
 800183c:	429a      	cmp	r2, r3
 800183e:	d101      	bne.n	8001844 <LL_C2_IPCC_IsActiveFlag_CHx+0x1c>
 8001840:	2301      	movs	r3, #1
 8001842:	e000      	b.n	8001846 <LL_C2_IPCC_IsActiveFlag_CHx+0x1e>
 8001844:	2300      	movs	r3, #0
}
 8001846:	4618      	mov	r0, r3
 8001848:	370c      	adds	r7, #12
 800184a:	46bd      	mov	sp, r7
 800184c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001850:	4770      	bx	lr
	...

08001854 <HW_IPCC_Rx_Handler>:

/******************************************************************************
 * INTERRUPT HANDLER
 ******************************************************************************/
void HW_IPCC_Rx_Handler( void )
{
 8001854:	b580      	push	{r7, lr}
 8001856:	af00      	add	r7, sp, #0
  if (HW_IPCC_RX_PENDING( HW_IPCC_SYSTEM_EVENT_CHANNEL ))
 8001858:	2102      	movs	r1, #2
 800185a:	4819      	ldr	r0, [pc, #100]	; (80018c0 <HW_IPCC_Rx_Handler+0x6c>)
 800185c:	f7ff ffe4 	bl	8001828 <LL_C2_IPCC_IsActiveFlag_CHx>
 8001860:	4603      	mov	r3, r0
 8001862:	2b00      	cmp	r3, #0
 8001864:	d009      	beq.n	800187a <HW_IPCC_Rx_Handler+0x26>
 8001866:	4b16      	ldr	r3, [pc, #88]	; (80018c0 <HW_IPCC_Rx_Handler+0x6c>)
 8001868:	685b      	ldr	r3, [r3, #4]
 800186a:	43db      	mvns	r3, r3
 800186c:	f003 0302 	and.w	r3, r3, #2
 8001870:	2b00      	cmp	r3, #0
 8001872:	d002      	beq.n	800187a <HW_IPCC_Rx_Handler+0x26>
  {
      HW_IPCC_SYS_EvtHandler();
 8001874:	f000 f8ea 	bl	8001a4c <HW_IPCC_SYS_EvtHandler>
 8001878:	e01f      	b.n	80018ba <HW_IPCC_Rx_Handler+0x66>
  else if (HW_IPCC_RX_PENDING( HW_IPCC_ZIGBEE_M0_REQUEST_CHANNEL ))
  {
    HW_IPCC_ZIGBEE_StackM0RequestHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_RX_PENDING( HW_IPCC_BLE_EVENT_CHANNEL ))
 800187a:	2101      	movs	r1, #1
 800187c:	4810      	ldr	r0, [pc, #64]	; (80018c0 <HW_IPCC_Rx_Handler+0x6c>)
 800187e:	f7ff ffd3 	bl	8001828 <LL_C2_IPCC_IsActiveFlag_CHx>
 8001882:	4603      	mov	r3, r0
 8001884:	2b00      	cmp	r3, #0
 8001886:	d008      	beq.n	800189a <HW_IPCC_Rx_Handler+0x46>
 8001888:	4b0d      	ldr	r3, [pc, #52]	; (80018c0 <HW_IPCC_Rx_Handler+0x6c>)
 800188a:	685b      	ldr	r3, [r3, #4]
 800188c:	f003 0301 	and.w	r3, r3, #1
 8001890:	2b00      	cmp	r3, #0
 8001892:	d102      	bne.n	800189a <HW_IPCC_Rx_Handler+0x46>
  {
    HW_IPCC_BLE_EvtHandler();
 8001894:	f000 f89e 	bl	80019d4 <HW_IPCC_BLE_EvtHandler>
 8001898:	e00f      	b.n	80018ba <HW_IPCC_Rx_Handler+0x66>
  }
  else if (HW_IPCC_RX_PENDING( HW_IPCC_TRACES_CHANNEL ))
 800189a:	2108      	movs	r1, #8
 800189c:	4808      	ldr	r0, [pc, #32]	; (80018c0 <HW_IPCC_Rx_Handler+0x6c>)
 800189e:	f7ff ffc3 	bl	8001828 <LL_C2_IPCC_IsActiveFlag_CHx>
 80018a2:	4603      	mov	r3, r0
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d009      	beq.n	80018bc <HW_IPCC_Rx_Handler+0x68>
 80018a8:	4b05      	ldr	r3, [pc, #20]	; (80018c0 <HW_IPCC_Rx_Handler+0x6c>)
 80018aa:	685b      	ldr	r3, [r3, #4]
 80018ac:	43db      	mvns	r3, r3
 80018ae:	f003 0308 	and.w	r3, r3, #8
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d002      	beq.n	80018bc <HW_IPCC_Rx_Handler+0x68>
  {
    HW_IPCC_TRACES_EvtHandler();
 80018b6:	f000 f915 	bl	8001ae4 <HW_IPCC_TRACES_EvtHandler>
  }

  return;
 80018ba:	bf00      	nop
 80018bc:	bf00      	nop
}
 80018be:	bd80      	pop	{r7, pc}
 80018c0:	58000c00 	.word	0x58000c00

080018c4 <HW_IPCC_Tx_Handler>:

void HW_IPCC_Tx_Handler( void )
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	af00      	add	r7, sp, #0
  if (HW_IPCC_TX_PENDING( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL ))
 80018c8:	2102      	movs	r1, #2
 80018ca:	4822      	ldr	r0, [pc, #136]	; (8001954 <HW_IPCC_Tx_Handler+0x90>)
 80018cc:	f7ff ff97 	bl	80017fe <LL_C1_IPCC_IsActiveFlag_CHx>
 80018d0:	4603      	mov	r3, r0
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d109      	bne.n	80018ea <HW_IPCC_Tx_Handler+0x26>
 80018d6:	4b1f      	ldr	r3, [pc, #124]	; (8001954 <HW_IPCC_Tx_Handler+0x90>)
 80018d8:	685b      	ldr	r3, [r3, #4]
 80018da:	43db      	mvns	r3, r3
 80018dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d002      	beq.n	80018ea <HW_IPCC_Tx_Handler+0x26>
  {
    HW_IPCC_SYS_CmdEvtHandler();
 80018e4:	f000 f8a6 	bl	8001a34 <HW_IPCC_SYS_CmdEvtHandler>
 80018e8:	e031      	b.n	800194e <HW_IPCC_Tx_Handler+0x8a>
  if (HW_IPCC_TX_PENDING( HW_IPCC_ZIGBEE_CMD_APPLI_CHANNEL ))
  {
      HW_IPCC_ZIGBEE_CmdEvtHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_TX_PENDING( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL ))
 80018ea:	2102      	movs	r1, #2
 80018ec:	4819      	ldr	r0, [pc, #100]	; (8001954 <HW_IPCC_Tx_Handler+0x90>)
 80018ee:	f7ff ff86 	bl	80017fe <LL_C1_IPCC_IsActiveFlag_CHx>
 80018f2:	4603      	mov	r3, r0
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d109      	bne.n	800190c <HW_IPCC_Tx_Handler+0x48>
 80018f8:	4b16      	ldr	r3, [pc, #88]	; (8001954 <HW_IPCC_Tx_Handler+0x90>)
 80018fa:	685b      	ldr	r3, [r3, #4]
 80018fc:	43db      	mvns	r3, r3
 80018fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001902:	2b00      	cmp	r3, #0
 8001904:	d002      	beq.n	800190c <HW_IPCC_Tx_Handler+0x48>
  {
    HW_IPCC_SYS_CmdEvtHandler();
 8001906:	f000 f895 	bl	8001a34 <HW_IPCC_SYS_CmdEvtHandler>
 800190a:	e020      	b.n	800194e <HW_IPCC_Tx_Handler+0x8a>
  }
  else if (HW_IPCC_TX_PENDING( HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ))
 800190c:	2108      	movs	r1, #8
 800190e:	4811      	ldr	r0, [pc, #68]	; (8001954 <HW_IPCC_Tx_Handler+0x90>)
 8001910:	f7ff ff75 	bl	80017fe <LL_C1_IPCC_IsActiveFlag_CHx>
 8001914:	4603      	mov	r3, r0
 8001916:	2b00      	cmp	r3, #0
 8001918:	d109      	bne.n	800192e <HW_IPCC_Tx_Handler+0x6a>
 800191a:	4b0e      	ldr	r3, [pc, #56]	; (8001954 <HW_IPCC_Tx_Handler+0x90>)
 800191c:	685b      	ldr	r3, [r3, #4]
 800191e:	43db      	mvns	r3, r3
 8001920:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001924:	2b00      	cmp	r3, #0
 8001926:	d002      	beq.n	800192e <HW_IPCC_Tx_Handler+0x6a>
  {
    HW_IPCC_MM_FreeBufHandler();
 8001928:	f000 f8be 	bl	8001aa8 <HW_IPCC_MM_FreeBufHandler>
 800192c:	e00f      	b.n	800194e <HW_IPCC_Tx_Handler+0x8a>
  }
  else if (HW_IPCC_TX_PENDING( HW_IPCC_HCI_ACL_DATA_CHANNEL ))
 800192e:	2120      	movs	r1, #32
 8001930:	4808      	ldr	r0, [pc, #32]	; (8001954 <HW_IPCC_Tx_Handler+0x90>)
 8001932:	f7ff ff64 	bl	80017fe <LL_C1_IPCC_IsActiveFlag_CHx>
 8001936:	4603      	mov	r3, r0
 8001938:	2b00      	cmp	r3, #0
 800193a:	d109      	bne.n	8001950 <HW_IPCC_Tx_Handler+0x8c>
 800193c:	4b05      	ldr	r3, [pc, #20]	; (8001954 <HW_IPCC_Tx_Handler+0x90>)
 800193e:	685b      	ldr	r3, [r3, #4]
 8001940:	43db      	mvns	r3, r3
 8001942:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001946:	2b00      	cmp	r3, #0
 8001948:	d002      	beq.n	8001950 <HW_IPCC_Tx_Handler+0x8c>
  {
    HW_IPCC_BLE_AclDataEvtHandler();
 800194a:	f000 f84f 	bl	80019ec <HW_IPCC_BLE_AclDataEvtHandler>
  }

  return;
 800194e:	bf00      	nop
 8001950:	bf00      	nop
}
 8001952:	bd80      	pop	{r7, pc}
 8001954:	58000c00 	.word	0x58000c00

08001958 <HW_IPCC_Enable>:
/******************************************************************************
 * GENERAL
 ******************************************************************************/
void HW_IPCC_Enable( void )
{
 8001958:	b580      	push	{r7, lr}
 800195a:	af00      	add	r7, sp, #0
  /**
  * Such as IPCC IP available to the CPU2, it is required to keep the IPCC clock running
    when FUS is running on CPU2 and CPU1 enters deep sleep mode
  */
  LL_C2_AHB3_GRP1_EnableClock(LL_C2_AHB3_GRP1_PERIPH_IPCC);
 800195c:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8001960:	f7ff febd 	bl	80016de <LL_C2_AHB3_GRP1_EnableClock>

   /**
   * When the device is out of standby, it is required to use the EXTI mechanism to wakeup CPU2
   */
  LL_C2_EXTI_EnableEvent_32_63( LL_EXTI_LINE_41 );
 8001964:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001968:	f7ff fe7a 	bl	8001660 <LL_C2_EXTI_EnableEvent_32_63>
  LL_EXTI_EnableRisingTrig_32_63( LL_EXTI_LINE_41 );
 800196c:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001970:	f7ff fe8a 	bl	8001688 <LL_EXTI_EnableRisingTrig_32_63>
   * When the CPU2 receives that command, it waits for its event input to be set to restart the CPU2 firmware.
   * This is required because once C2BOOT has been set once, a clear/set on C2BOOT has no effect.
   * When SHCI_C2_Reinit( ) is not called, generating an event to the CPU2 does not have any effect
   * So, by default, the application shall both set the event flag and set the C2BOOT bit.
   */
  __SEV( );       /* Set the internal event flag and send an event to the CPU2 */
 8001974:	bf40      	sev
  __WFE( );       /* Clear the internal event flag */
 8001976:	bf20      	wfe
  LL_PWR_EnableBootC2( );
 8001978:	f7ff fe62 	bl	8001640 <LL_PWR_EnableBootC2>

  return;
 800197c:	bf00      	nop
}
 800197e:	bd80      	pop	{r7, pc}

08001980 <HW_IPCC_Init>:

void HW_IPCC_Init( void )
{
 8001980:	b580      	push	{r7, lr}
 8001982:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock( LL_AHB3_GRP1_PERIPH_IPCC );
 8001984:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8001988:	f7ff fe90 	bl	80016ac <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_EnableIT_RXO( IPCC );
 800198c:	4806      	ldr	r0, [pc, #24]	; (80019a8 <HW_IPCC_Init+0x28>)
 800198e:	f7ff fed2 	bl	8001736 <LL_C1_IPCC_EnableIT_RXO>
  LL_C1_IPCC_EnableIT_TXF( IPCC );
 8001992:	4805      	ldr	r0, [pc, #20]	; (80019a8 <HW_IPCC_Init+0x28>)
 8001994:	f7ff febf 	bl	8001716 <LL_C1_IPCC_EnableIT_TXF>

  HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 8001998:	202c      	movs	r0, #44	; 0x2c
 800199a:	f006 fa7b 	bl	8007e94 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 800199e:	202d      	movs	r0, #45	; 0x2d
 80019a0:	f006 fa78 	bl	8007e94 <HAL_NVIC_EnableIRQ>

  return;
 80019a4:	bf00      	nop
}
 80019a6:	bd80      	pop	{r7, pc}
 80019a8:	58000c00 	.word	0x58000c00

080019ac <HW_IPCC_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
void HW_IPCC_BLE_Init( void )
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 80019b0:	2101      	movs	r1, #1
 80019b2:	4802      	ldr	r0, [pc, #8]	; (80019bc <HW_IPCC_BLE_Init+0x10>)
 80019b4:	f7ff fef4 	bl	80017a0 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 80019b8:	bf00      	nop
}
 80019ba:	bd80      	pop	{r7, pc}
 80019bc:	58000c00 	.word	0x58000c00

080019c0 <HW_IPCC_BLE_SendCmd>:

void HW_IPCC_BLE_SendCmd( void )
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_BLE_CMD_CHANNEL );
 80019c4:	2101      	movs	r1, #1
 80019c6:	4802      	ldr	r0, [pc, #8]	; (80019d0 <HW_IPCC_BLE_SendCmd+0x10>)
 80019c8:	f7ff ff0a 	bl	80017e0 <LL_C1_IPCC_SetFlag_CHx>

  return;
 80019cc:	bf00      	nop
}
 80019ce:	bd80      	pop	{r7, pc}
 80019d0:	58000c00 	.word	0x58000c00

080019d4 <HW_IPCC_BLE_EvtHandler>:

static void HW_IPCC_BLE_EvtHandler( void )
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	af00      	add	r7, sp, #0
  HW_IPCC_BLE_RxEvtNot();
 80019d8:	f00c ff94 	bl	800e904 <HW_IPCC_BLE_RxEvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 80019dc:	2101      	movs	r1, #1
 80019de:	4802      	ldr	r0, [pc, #8]	; (80019e8 <HW_IPCC_BLE_EvtHandler+0x14>)
 80019e0:	f7ff fef0 	bl	80017c4 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 80019e4:	bf00      	nop
}
 80019e6:	bd80      	pop	{r7, pc}
 80019e8:	58000c00 	.word	0x58000c00

080019ec <HW_IPCC_BLE_AclDataEvtHandler>:

  return;
}

static void HW_IPCC_BLE_AclDataEvtHandler( void )
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_HCI_ACL_DATA_CHANNEL );
 80019f0:	2120      	movs	r1, #32
 80019f2:	4803      	ldr	r0, [pc, #12]	; (8001a00 <HW_IPCC_BLE_AclDataEvtHandler+0x14>)
 80019f4:	f7ff fec2 	bl	800177c <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_BLE_AclDataAckNot();
 80019f8:	f00c ffb4 	bl	800e964 <HW_IPCC_BLE_AclDataAckNot>

  return;
 80019fc:	bf00      	nop
}
 80019fe:	bd80      	pop	{r7, pc}
 8001a00:	58000c00 	.word	0x58000c00

08001a04 <HW_IPCC_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
void HW_IPCC_SYS_Init( void )
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 8001a08:	2102      	movs	r1, #2
 8001a0a:	4802      	ldr	r0, [pc, #8]	; (8001a14 <HW_IPCC_SYS_Init+0x10>)
 8001a0c:	f7ff fec8 	bl	80017a0 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8001a10:	bf00      	nop
}
 8001a12:	bd80      	pop	{r7, pc}
 8001a14:	58000c00 	.word	0x58000c00

08001a18 <HW_IPCC_SYS_SendCmd>:

void HW_IPCC_SYS_SendCmd( void )
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8001a1c:	2102      	movs	r1, #2
 8001a1e:	4804      	ldr	r0, [pc, #16]	; (8001a30 <HW_IPCC_SYS_SendCmd+0x18>)
 8001a20:	f7ff fede 	bl	80017e0 <LL_C1_IPCC_SetFlag_CHx>
  LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8001a24:	2102      	movs	r1, #2
 8001a26:	4802      	ldr	r0, [pc, #8]	; (8001a30 <HW_IPCC_SYS_SendCmd+0x18>)
 8001a28:	f7ff fe95 	bl	8001756 <LL_C1_IPCC_EnableTransmitChannel>

  return;
 8001a2c:	bf00      	nop
}
 8001a2e:	bd80      	pop	{r7, pc}
 8001a30:	58000c00 	.word	0x58000c00

08001a34 <HW_IPCC_SYS_CmdEvtHandler>:

static void HW_IPCC_SYS_CmdEvtHandler( void )
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8001a38:	2102      	movs	r1, #2
 8001a3a:	4803      	ldr	r0, [pc, #12]	; (8001a48 <HW_IPCC_SYS_CmdEvtHandler+0x14>)
 8001a3c:	f7ff fe9e 	bl	800177c <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_SYS_CmdEvtNot();
 8001a40:	f00c ffe0 	bl	800ea04 <HW_IPCC_SYS_CmdEvtNot>

  return;
 8001a44:	bf00      	nop
}
 8001a46:	bd80      	pop	{r7, pc}
 8001a48:	58000c00 	.word	0x58000c00

08001a4c <HW_IPCC_SYS_EvtHandler>:

static void HW_IPCC_SYS_EvtHandler( void )
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	af00      	add	r7, sp, #0
  HW_IPCC_SYS_EvtNot();
 8001a50:	f00c ffee 	bl	800ea30 <HW_IPCC_SYS_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 8001a54:	2102      	movs	r1, #2
 8001a56:	4802      	ldr	r0, [pc, #8]	; (8001a60 <HW_IPCC_SYS_EvtHandler+0x14>)
 8001a58:	f7ff feb4 	bl	80017c4 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 8001a5c:	bf00      	nop
}
 8001a5e:	bd80      	pop	{r7, pc}
 8001a60:	58000c00 	.word	0x58000c00

08001a64 <HW_IPCC_MM_SendFreeBuf>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void HW_IPCC_MM_SendFreeBuf( void (*cb)( void ) )
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b082      	sub	sp, #8
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]
  if ( LL_C1_IPCC_IsActiveFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ) )
 8001a6c:	2108      	movs	r1, #8
 8001a6e:	480c      	ldr	r0, [pc, #48]	; (8001aa0 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 8001a70:	f7ff fec5 	bl	80017fe <LL_C1_IPCC_IsActiveFlag_CHx>
 8001a74:	4603      	mov	r3, r0
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d007      	beq.n	8001a8a <HW_IPCC_MM_SendFreeBuf+0x26>
  {
    FreeBufCb = cb;
 8001a7a:	4a0a      	ldr	r2, [pc, #40]	; (8001aa4 <HW_IPCC_MM_SendFreeBuf+0x40>)
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	6013      	str	r3, [r2, #0]
    LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8001a80:	2108      	movs	r1, #8
 8001a82:	4807      	ldr	r0, [pc, #28]	; (8001aa0 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 8001a84:	f7ff fe67 	bl	8001756 <LL_C1_IPCC_EnableTransmitChannel>
    cb();

    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
  }

  return;
 8001a88:	e006      	b.n	8001a98 <HW_IPCC_MM_SendFreeBuf+0x34>
    cb();
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	4798      	blx	r3
    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8001a8e:	2108      	movs	r1, #8
 8001a90:	4803      	ldr	r0, [pc, #12]	; (8001aa0 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 8001a92:	f7ff fea5 	bl	80017e0 <LL_C1_IPCC_SetFlag_CHx>
  return;
 8001a96:	bf00      	nop
}
 8001a98:	3708      	adds	r7, #8
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	bd80      	pop	{r7, pc}
 8001a9e:	bf00      	nop
 8001aa0:	58000c00 	.word	0x58000c00
 8001aa4:	20000394 	.word	0x20000394

08001aa8 <HW_IPCC_MM_FreeBufHandler>:

static void HW_IPCC_MM_FreeBufHandler( void )
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8001aac:	2108      	movs	r1, #8
 8001aae:	4806      	ldr	r0, [pc, #24]	; (8001ac8 <HW_IPCC_MM_FreeBufHandler+0x20>)
 8001ab0:	f7ff fe64 	bl	800177c <LL_C1_IPCC_DisableTransmitChannel>

  FreeBufCb();
 8001ab4:	4b05      	ldr	r3, [pc, #20]	; (8001acc <HW_IPCC_MM_FreeBufHandler+0x24>)
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	4798      	blx	r3

  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8001aba:	2108      	movs	r1, #8
 8001abc:	4802      	ldr	r0, [pc, #8]	; (8001ac8 <HW_IPCC_MM_FreeBufHandler+0x20>)
 8001abe:	f7ff fe8f 	bl	80017e0 <LL_C1_IPCC_SetFlag_CHx>

  return;
 8001ac2:	bf00      	nop
}
 8001ac4:	bd80      	pop	{r7, pc}
 8001ac6:	bf00      	nop
 8001ac8:	58000c00 	.word	0x58000c00
 8001acc:	20000394 	.word	0x20000394

08001ad0 <HW_IPCC_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void HW_IPCC_TRACES_Init( void )
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_TRACES_CHANNEL );
 8001ad4:	2108      	movs	r1, #8
 8001ad6:	4802      	ldr	r0, [pc, #8]	; (8001ae0 <HW_IPCC_TRACES_Init+0x10>)
 8001ad8:	f7ff fe62 	bl	80017a0 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8001adc:	bf00      	nop
}
 8001ade:	bd80      	pop	{r7, pc}
 8001ae0:	58000c00 	.word	0x58000c00

08001ae4 <HW_IPCC_TRACES_EvtHandler>:

static void HW_IPCC_TRACES_EvtHandler( void )
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	af00      	add	r7, sp, #0
  HW_IPCC_TRACES_EvtNot();
 8001ae8:	f00d f84a 	bl	800eb80 <HW_IPCC_TRACES_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_TRACES_CHANNEL );
 8001aec:	2108      	movs	r1, #8
 8001aee:	4802      	ldr	r0, [pc, #8]	; (8001af8 <HW_IPCC_TRACES_EvtHandler+0x14>)
 8001af0:	f7ff fe68 	bl	80017c4 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 8001af4:	bf00      	nop
}
 8001af6:	bd80      	pop	{r7, pc}
 8001af8:	58000c00 	.word	0x58000c00

08001afc <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 8001afc:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001afe:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b00:	3304      	adds	r3, #4

08001b02 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b02:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b04:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 8001b06:	d3f9      	bcc.n	8001afc <CopyDataInit>
  bx lr
 8001b08:	4770      	bx	lr

08001b0a <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 8001b0a:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8001b0c:	3004      	adds	r0, #4

08001b0e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 8001b0e:	4288      	cmp	r0, r1
  bcc FillZerobss
 8001b10:	d3fb      	bcc.n	8001b0a <FillZerobss>
  bx lr
 8001b12:	4770      	bx	lr

08001b14 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001b14:	480c      	ldr	r0, [pc, #48]	; (8001b48 <LoopForever+0x4>)
  mov   sp, r0          /* set stack pointer */
 8001b16:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8001b18:	f005 ffb2 	bl	8007a80 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8001b1c:	480b      	ldr	r0, [pc, #44]	; (8001b4c <LoopForever+0x8>)
 8001b1e:	490c      	ldr	r1, [pc, #48]	; (8001b50 <LoopForever+0xc>)
 8001b20:	4a0c      	ldr	r2, [pc, #48]	; (8001b54 <LoopForever+0x10>)
 8001b22:	2300      	movs	r3, #0
 8001b24:	f7ff ffed 	bl	8001b02 <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8001b28:	480b      	ldr	r0, [pc, #44]	; (8001b58 <LoopForever+0x14>)
 8001b2a:	490c      	ldr	r1, [pc, #48]	; (8001b5c <LoopForever+0x18>)
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	f7ff ffee 	bl	8001b0e <LoopFillZerobss>
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 8001b32:	480b      	ldr	r0, [pc, #44]	; (8001b60 <LoopForever+0x1c>)
 8001b34:	490b      	ldr	r1, [pc, #44]	; (8001b64 <LoopForever+0x20>)
 8001b36:	2300      	movs	r3, #0
 8001b38:	f7ff ffe9 	bl	8001b0e <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001b3c:	f012 f97a 	bl	8013e34 <__libc_init_array>
/* Call the application s entry point.*/
	bl	main
 8001b40:	f002 fa38 	bl	8003fb4 <main>

08001b44 <LoopForever>:

LoopForever:
  b LoopForever
 8001b44:	e7fe      	b.n	8001b44 <LoopForever>
 8001b46:	0000      	.short	0x0000
  ldr   r0, =_estack
 8001b48:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 8001b4c:	20000004 	.word	0x20000004
 8001b50:	200001f8 	.word	0x200001f8
 8001b54:	08019f88 	.word	0x08019f88
  INIT_BSS _sbss, _ebss
 8001b58:	20000370 	.word	0x20000370
 8001b5c:	2002e40c 	.word	0x2002e40c
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 8001b60:	200301e0 	.word	0x200301e0
 8001b64:	20030a57 	.word	0x20030a57

08001b68 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001b68:	e7fe      	b.n	8001b68 <ADC1_IRQHandler>
	...

08001b6c <LL_EXTI_EnableIT_32_63>:
{
 8001b6c:	b480      	push	{r7}
 8001b6e:	b083      	sub	sp, #12
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8001b74:	4b06      	ldr	r3, [pc, #24]	; (8001b90 <LL_EXTI_EnableIT_32_63+0x24>)
 8001b76:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8001b7a:	4905      	ldr	r1, [pc, #20]	; (8001b90 <LL_EXTI_EnableIT_32_63+0x24>)
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	4313      	orrs	r3, r2
 8001b80:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8001b84:	bf00      	nop
 8001b86:	370c      	adds	r7, #12
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8e:	4770      	bx	lr
 8001b90:	58000800 	.word	0x58000800

08001b94 <LL_AHB2_GRP1_EnableClock>:
{
 8001b94:	b480      	push	{r7}
 8001b96:	b085      	sub	sp, #20
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001b9c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ba0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001ba2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	4313      	orrs	r3, r2
 8001baa:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001bac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001bb0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	4013      	ands	r3, r2
 8001bb6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001bb8:	68fb      	ldr	r3, [r7, #12]
}
 8001bba:	bf00      	nop
 8001bbc:	3714      	adds	r7, #20
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc4:	4770      	bx	lr

08001bc6 <LL_C2_AHB2_GRP1_EnableClock>:
{
 8001bc6:	b480      	push	{r7}
 8001bc8:	b085      	sub	sp, #20
 8001bca:	af00      	add	r7, sp, #0
 8001bcc:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->C2AHB2ENR, Periphs);
 8001bce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001bd2:	f8d3 214c 	ldr.w	r2, [r3, #332]	; 0x14c
 8001bd6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	4313      	orrs	r3, r2
 8001bde:	f8c1 314c 	str.w	r3, [r1, #332]	; 0x14c
  tmpreg = READ_BIT(RCC->C2AHB2ENR, Periphs);
 8001be2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001be6:	f8d3 214c 	ldr.w	r2, [r3, #332]	; 0x14c
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	4013      	ands	r3, r2
 8001bee:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001bf0:	68fb      	ldr	r3, [r7, #12]
}
 8001bf2:	bf00      	nop
 8001bf4:	3714      	adds	r7, #20
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfc:	4770      	bx	lr

08001bfe <APPD_Init>:
static void APPD_BleDtbCfg( void );
/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void APPD_Init( void )
{
 8001bfe:	b580      	push	{r7, lr}
 8001c00:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APPD_Init */
#if (CFG_DEBUGGER_SUPPORTED == 1)
  /**
   * Keep debugger enabled while in any low power mode
   */
  HAL_DBGMCU_EnableDBGSleepMode();
 8001c02:	f006 f80b 	bl	8007c1c <HAL_DBGMCU_EnableDBGSleepMode>
  HAL_DBGMCU_EnableDBGStopMode();
 8001c06:	f006 f80f 	bl	8007c28 <HAL_DBGMCU_EnableDBGStopMode>

  /***************** ENABLE DEBUGGER *************************************/
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_48);
 8001c0a:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8001c0e:	f7ff ffad 	bl	8001b6c <LL_EXTI_EnableIT_32_63>
  HAL_DBGMCU_DisableDBGStandbyMode();

#endif /* (CFG_DEBUGGER_SUPPORTED == 1) */

#if(CFG_DEBUG_TRACE != 0)
  DbgTraceInit();
 8001c12:	f00d f991 	bl	800ef38 <DbgTraceInit>
#endif

  APPD_SetCPU2GpioConfig( );
 8001c16:	f000 f821 	bl	8001c5c <APPD_SetCPU2GpioConfig>
  APPD_BleDtbCfg( );
 8001c1a:	f000 f8bf 	bl	8001d9c <APPD_BleDtbCfg>

/* USER CODE END APPD_Init */
  return;
 8001c1e:	bf00      	nop
}
 8001c20:	bd80      	pop	{r7, pc}
	...

08001c24 <APPD_EnableCPU2>:

void APPD_EnableCPU2( void )
{
 8001c24:	b5b0      	push	{r4, r5, r7, lr}
 8001c26:	b088      	sub	sp, #32
 8001c28:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APPD_EnableCPU2 */
  SHCI_C2_DEBUG_Init_Cmd_Packet_t DebugCmdPacket =
 8001c2a:	4b0b      	ldr	r3, [pc, #44]	; (8001c58 <APPD_EnableCPU2+0x34>)
 8001c2c:	1d3c      	adds	r4, r7, #4
 8001c2e:	461d      	mov	r5, r3
 8001c30:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001c32:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001c34:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001c38:	c403      	stmia	r4!, {r0, r1}
 8001c3a:	8022      	strh	r2, [r4, #0]
 8001c3c:	3402      	adds	r4, #2
 8001c3e:	0c13      	lsrs	r3, r2, #16
 8001c40:	7023      	strb	r3, [r4, #0]
    NBR_OF_TRACES_CONFIG_PARAMETERS,
    NBR_OF_GENERAL_CONFIG_PARAMETERS}
  };

  /**< Traces channel initialization */
  TL_TRACES_Init( );
 8001c42:	f00c ff8b 	bl	800eb5c <TL_TRACES_Init>

  /** GPIO DEBUG Initialization */
  SHCI_C2_DEBUG_Init( &DebugCmdPacket  );
 8001c46:	1d3b      	adds	r3, r7, #4
 8001c48:	4618      	mov	r0, r3
 8001c4a:	f00c faea 	bl	800e222 <SHCI_C2_DEBUG_Init>

/* USER CODE END APPD_EnableCPU2 */
  return;
 8001c4e:	bf00      	nop
}
 8001c50:	3720      	adds	r7, #32
 8001c52:	46bd      	mov	sp, r7
 8001c54:	bdb0      	pop	{r4, r5, r7, pc}
 8001c56:	bf00      	nop
 8001c58:	08018520 	.word	0x08018520

08001c5c <APPD_SetCPU2GpioConfig>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void APPD_SetCPU2GpioConfig( void )
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	b088      	sub	sp, #32
 8001c60:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APPD_SetCPU2GpioConfig */
  GPIO_InitTypeDef gpio_config = {0};
 8001c62:	1d3b      	adds	r3, r7, #4
 8001c64:	2200      	movs	r2, #0
 8001c66:	601a      	str	r2, [r3, #0]
 8001c68:	605a      	str	r2, [r3, #4]
 8001c6a:	609a      	str	r2, [r3, #8]
 8001c6c:	60da      	str	r2, [r3, #12]
 8001c6e:	611a      	str	r2, [r3, #16]
  uint8_t local_loop;
  uint16_t gpioa_pin_list;
  uint16_t gpiob_pin_list;
  uint16_t gpioc_pin_list;

  gpioa_pin_list = 0;
 8001c70:	2300      	movs	r3, #0
 8001c72:	83bb      	strh	r3, [r7, #28]
  gpiob_pin_list = 0;
 8001c74:	2300      	movs	r3, #0
 8001c76:	837b      	strh	r3, [r7, #26]
  gpioc_pin_list = 0;
 8001c78:	2300      	movs	r3, #0
 8001c7a:	833b      	strh	r3, [r7, #24]

  for(local_loop = 0 ; local_loop < GPIO_CFG_NBR_OF_FEATURES; local_loop++)
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	77fb      	strb	r3, [r7, #31]
 8001c80:	e033      	b.n	8001cea <APPD_SetCPU2GpioConfig+0x8e>
  {
    if( aGpioConfigList[local_loop].enable != 0)
 8001c82:	7ffb      	ldrb	r3, [r7, #31]
 8001c84:	4a42      	ldr	r2, [pc, #264]	; (8001d90 <APPD_SetCPU2GpioConfig+0x134>)
 8001c86:	00db      	lsls	r3, r3, #3
 8001c88:	4413      	add	r3, r2
 8001c8a:	799b      	ldrb	r3, [r3, #6]
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d028      	beq.n	8001ce2 <APPD_SetCPU2GpioConfig+0x86>
    {
      switch((uint32_t)aGpioConfigList[local_loop].port)
 8001c90:	7ffb      	ldrb	r3, [r7, #31]
 8001c92:	4a3f      	ldr	r2, [pc, #252]	; (8001d90 <APPD_SetCPU2GpioConfig+0x134>)
 8001c94:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8001c98:	4a3e      	ldr	r2, [pc, #248]	; (8001d94 <APPD_SetCPU2GpioConfig+0x138>)
 8001c9a:	4293      	cmp	r3, r2
 8001c9c:	d00f      	beq.n	8001cbe <APPD_SetCPU2GpioConfig+0x62>
 8001c9e:	4a3e      	ldr	r2, [pc, #248]	; (8001d98 <APPD_SetCPU2GpioConfig+0x13c>)
 8001ca0:	4293      	cmp	r3, r2
 8001ca2:	d015      	beq.n	8001cd0 <APPD_SetCPU2GpioConfig+0x74>
 8001ca4:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001ca8:	d000      	beq.n	8001cac <APPD_SetCPU2GpioConfig+0x50>
        case (uint32_t)GPIOC:
            gpioc_pin_list |= aGpioConfigList[local_loop].pin;
          break;

        default:
          break;
 8001caa:	e01b      	b.n	8001ce4 <APPD_SetCPU2GpioConfig+0x88>
            gpioa_pin_list |= aGpioConfigList[local_loop].pin;
 8001cac:	7ffb      	ldrb	r3, [r7, #31]
 8001cae:	4a38      	ldr	r2, [pc, #224]	; (8001d90 <APPD_SetCPU2GpioConfig+0x134>)
 8001cb0:	00db      	lsls	r3, r3, #3
 8001cb2:	4413      	add	r3, r2
 8001cb4:	889a      	ldrh	r2, [r3, #4]
 8001cb6:	8bbb      	ldrh	r3, [r7, #28]
 8001cb8:	4313      	orrs	r3, r2
 8001cba:	83bb      	strh	r3, [r7, #28]
          break;
 8001cbc:	e012      	b.n	8001ce4 <APPD_SetCPU2GpioConfig+0x88>
            gpiob_pin_list |= aGpioConfigList[local_loop].pin;
 8001cbe:	7ffb      	ldrb	r3, [r7, #31]
 8001cc0:	4a33      	ldr	r2, [pc, #204]	; (8001d90 <APPD_SetCPU2GpioConfig+0x134>)
 8001cc2:	00db      	lsls	r3, r3, #3
 8001cc4:	4413      	add	r3, r2
 8001cc6:	889a      	ldrh	r2, [r3, #4]
 8001cc8:	8b7b      	ldrh	r3, [r7, #26]
 8001cca:	4313      	orrs	r3, r2
 8001ccc:	837b      	strh	r3, [r7, #26]
          break;
 8001cce:	e009      	b.n	8001ce4 <APPD_SetCPU2GpioConfig+0x88>
            gpioc_pin_list |= aGpioConfigList[local_loop].pin;
 8001cd0:	7ffb      	ldrb	r3, [r7, #31]
 8001cd2:	4a2f      	ldr	r2, [pc, #188]	; (8001d90 <APPD_SetCPU2GpioConfig+0x134>)
 8001cd4:	00db      	lsls	r3, r3, #3
 8001cd6:	4413      	add	r3, r2
 8001cd8:	889a      	ldrh	r2, [r3, #4]
 8001cda:	8b3b      	ldrh	r3, [r7, #24]
 8001cdc:	4313      	orrs	r3, r2
 8001cde:	833b      	strh	r3, [r7, #24]
          break;
 8001ce0:	e000      	b.n	8001ce4 <APPD_SetCPU2GpioConfig+0x88>
      }
    }
 8001ce2:	bf00      	nop
  for(local_loop = 0 ; local_loop < GPIO_CFG_NBR_OF_FEATURES; local_loop++)
 8001ce4:	7ffb      	ldrb	r3, [r7, #31]
 8001ce6:	3301      	adds	r3, #1
 8001ce8:	77fb      	strb	r3, [r7, #31]
 8001cea:	7ffb      	ldrb	r3, [r7, #31]
 8001cec:	2b21      	cmp	r3, #33	; 0x21
 8001cee:	d9c8      	bls.n	8001c82 <APPD_SetCPU2GpioConfig+0x26>
  }

  gpio_config.Pull = GPIO_NOPULL;
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	60fb      	str	r3, [r7, #12]
  gpio_config.Mode = GPIO_MODE_OUTPUT_PP;
 8001cf4:	2301      	movs	r3, #1
 8001cf6:	60bb      	str	r3, [r7, #8]
  gpio_config.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cf8:	2303      	movs	r3, #3
 8001cfa:	613b      	str	r3, [r7, #16]

  if(gpioa_pin_list != 0)
 8001cfc:	8bbb      	ldrh	r3, [r7, #28]
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d014      	beq.n	8001d2c <APPD_SetCPU2GpioConfig+0xd0>
  {
    gpio_config.Pin = gpioa_pin_list;
 8001d02:	8bbb      	ldrh	r3, [r7, #28]
 8001d04:	607b      	str	r3, [r7, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d06:	2001      	movs	r0, #1
 8001d08:	f7ff ff44 	bl	8001b94 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_C2GPIOA_CLK_ENABLE();
 8001d0c:	2001      	movs	r0, #1
 8001d0e:	f7ff ff5a 	bl	8001bc6 <LL_C2_AHB2_GRP1_EnableClock>
    HAL_GPIO_Init(GPIOA, &gpio_config);
 8001d12:	1d3b      	adds	r3, r7, #4
 8001d14:	4619      	mov	r1, r3
 8001d16:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d1a:	f006 f8f3 	bl	8007f04 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(GPIOA, gpioa_pin_list, GPIO_PIN_RESET);
 8001d1e:	8bbb      	ldrh	r3, [r7, #28]
 8001d20:	2200      	movs	r2, #0
 8001d22:	4619      	mov	r1, r3
 8001d24:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d28:	f006 fa74 	bl	8008214 <HAL_GPIO_WritePin>
  }

  if(gpiob_pin_list != 0)
 8001d2c:	8b7b      	ldrh	r3, [r7, #26]
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d012      	beq.n	8001d58 <APPD_SetCPU2GpioConfig+0xfc>
  {
    gpio_config.Pin = gpiob_pin_list;
 8001d32:	8b7b      	ldrh	r3, [r7, #26]
 8001d34:	607b      	str	r3, [r7, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d36:	2002      	movs	r0, #2
 8001d38:	f7ff ff2c 	bl	8001b94 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_C2GPIOB_CLK_ENABLE();
 8001d3c:	2002      	movs	r0, #2
 8001d3e:	f7ff ff42 	bl	8001bc6 <LL_C2_AHB2_GRP1_EnableClock>
    HAL_GPIO_Init(GPIOB, &gpio_config);
 8001d42:	1d3b      	adds	r3, r7, #4
 8001d44:	4619      	mov	r1, r3
 8001d46:	4813      	ldr	r0, [pc, #76]	; (8001d94 <APPD_SetCPU2GpioConfig+0x138>)
 8001d48:	f006 f8dc 	bl	8007f04 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(GPIOB, gpiob_pin_list, GPIO_PIN_RESET);
 8001d4c:	8b7b      	ldrh	r3, [r7, #26]
 8001d4e:	2200      	movs	r2, #0
 8001d50:	4619      	mov	r1, r3
 8001d52:	4810      	ldr	r0, [pc, #64]	; (8001d94 <APPD_SetCPU2GpioConfig+0x138>)
 8001d54:	f006 fa5e 	bl	8008214 <HAL_GPIO_WritePin>
  }

  if(gpioc_pin_list != 0)
 8001d58:	8b3b      	ldrh	r3, [r7, #24]
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d013      	beq.n	8001d86 <APPD_SetCPU2GpioConfig+0x12a>
  {
    gpio_config.Pin = gpioc_pin_list;
 8001d5e:	8b3b      	ldrh	r3, [r7, #24]
 8001d60:	607b      	str	r3, [r7, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d62:	2004      	movs	r0, #4
 8001d64:	f7ff ff16 	bl	8001b94 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_C2GPIOC_CLK_ENABLE();
 8001d68:	2004      	movs	r0, #4
 8001d6a:	f7ff ff2c 	bl	8001bc6 <LL_C2_AHB2_GRP1_EnableClock>
    HAL_GPIO_Init(GPIOC, &gpio_config);
 8001d6e:	1d3b      	adds	r3, r7, #4
 8001d70:	4619      	mov	r1, r3
 8001d72:	4809      	ldr	r0, [pc, #36]	; (8001d98 <APPD_SetCPU2GpioConfig+0x13c>)
 8001d74:	f006 f8c6 	bl	8007f04 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(GPIOC, gpioc_pin_list, GPIO_PIN_RESET);
 8001d78:	8b3b      	ldrh	r3, [r7, #24]
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	4619      	mov	r1, r3
 8001d7e:	4806      	ldr	r0, [pc, #24]	; (8001d98 <APPD_SetCPU2GpioConfig+0x13c>)
 8001d80:	f006 fa48 	bl	8008214 <HAL_GPIO_WritePin>
  }
  
/* USER CODE END APPD_SetCPU2GpioConfig */
  return;
 8001d84:	bf00      	nop
 8001d86:	bf00      	nop
}
 8001d88:	3720      	adds	r7, #32
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	bd80      	pop	{r7, pc}
 8001d8e:	bf00      	nop
 8001d90:	08018acc 	.word	0x08018acc
 8001d94:	48000400 	.word	0x48000400
 8001d98:	48000800 	.word	0x48000800

08001d9c <APPD_BleDtbCfg>:

static void APPD_BleDtbCfg( void )
{
 8001d9c:	b480      	push	{r7}
 8001d9e:	af00      	add	r7, sp, #0
    HAL_GPIO_Init(GPIOB, &gpio_config);
  }
#endif

/* USER CODE END APPD_BleDtbCfg */
  return;
 8001da0:	bf00      	nop
}
 8001da2:	46bd      	mov	sp, r7
 8001da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da8:	4770      	bx	lr

08001daa <DbgOutputInit>:
 * WRAP FUNCTIONS
 *
*************************************************************/
#if(CFG_DEBUG_TRACE != 0)
void DbgOutputInit( void )
{
 8001daa:	b480      	push	{r7}
 8001dac:	af00      	add	r7, sp, #0
#endif
}
#endif

/* USER CODE END DbgOutputInit */
  return;
 8001dae:	bf00      	nop
}
 8001db0:	46bd      	mov	sp, r7
 8001db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db6:	4770      	bx	lr

08001db8 <DbgOutputTraces>:

void DbgOutputTraces(  uint8_t *p_data, uint16_t size, void (*cb)(void) )
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	b084      	sub	sp, #16
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	60f8      	str	r0, [r7, #12]
 8001dc0:	460b      	mov	r3, r1
 8001dc2:	607a      	str	r2, [r7, #4]
 8001dc4:	817b      	strh	r3, [r7, #10]
/* USER CODE END DbgOutputTraces */
  HW_UART_Transmit_DMA(CFG_DEBUG_TRACE_UART, p_data, size, cb);
 8001dc6:	897a      	ldrh	r2, [r7, #10]
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	68f9      	ldr	r1, [r7, #12]
 8001dcc:	2000      	movs	r0, #0
 8001dce:	f001 fccf 	bl	8003770 <HW_UART_Transmit_DMA>

/* USER CODE END DbgOutputTraces */
  return;
 8001dd2:	bf00      	nop
}
 8001dd4:	3710      	adds	r7, #16
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	bd80      	pop	{r7, pc}
	...

08001ddc <LL_C2_PWR_SetPowerMode>:
  *
  *         (*) Not available on devices STM32WB15xx, STM32WB10xx
  * @retval None
  */
__STATIC_INLINE void LL_C2_PWR_SetPowerMode(uint32_t LowPowerMode)
{
 8001ddc:	b480      	push	{r7}
 8001dde:	b083      	sub	sp, #12
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, LowPowerMode);
 8001de4:	4b07      	ldr	r3, [pc, #28]	; (8001e04 <LL_C2_PWR_SetPowerMode+0x28>)
 8001de6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001dea:	f023 0207 	bic.w	r2, r3, #7
 8001dee:	4905      	ldr	r1, [pc, #20]	; (8001e04 <LL_C2_PWR_SetPowerMode+0x28>)
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	4313      	orrs	r3, r2
 8001df4:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 8001df8:	bf00      	nop
 8001dfa:	370c      	adds	r7, #12
 8001dfc:	46bd      	mov	sp, r7
 8001dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e02:	4770      	bx	lr
 8001e04:	58000400 	.word	0x58000400

08001e08 <LL_RCC_SetClkAfterWakeFromStop>:
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_MSI
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_HSI
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetClkAfterWakeFromStop(uint32_t Clock)
{
 8001e08:	b480      	push	{r7}
 8001e0a:	b083      	sub	sp, #12
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 8001e10:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e14:	689b      	ldr	r3, [r3, #8]
 8001e16:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8001e1a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	4313      	orrs	r3, r2
 8001e22:	608b      	str	r3, [r1, #8]
}
 8001e24:	bf00      	nop
 8001e26:	370c      	adds	r7, #12
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2e:	4770      	bx	lr

08001e30 <APPE_Init>:
static void Button_Init( void );
/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void APPE_Init( void )
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	af00      	add	r7, sp, #0
  SystemPower_Config(); /**< Configure the system Power Mode */
 8001e34:	f000 f814 	bl	8001e60 <SystemPower_Config>

  HW_TS_Init(hw_ts_InitMode_Full, &hrtc); /**< Initialize the TimerServer */
 8001e38:	4908      	ldr	r1, [pc, #32]	; (8001e5c <APPE_Init+0x2c>)
 8001e3a:	2000      	movs	r0, #0
 8001e3c:	f001 fa1e 	bl	800327c <HW_TS_Init>

/* USER CODE BEGIN APPE_Init_1 */
  APPD_Init();
 8001e40:	f7ff fedd 	bl	8001bfe <APPD_Init>

  /**
   * The Standby mode should not be entered before the initialization is over
   * The default state of the Low Power Manager is to allow the Standby Mode so an request is needed here
   */
  UTIL_LPM_SetOffMode(1 << CFG_LPM_APP, UTIL_LPM_DISABLE);
 8001e44:	2101      	movs	r1, #1
 8001e46:	2001      	movs	r0, #1
 8001e48:	f011 ffc0 	bl	8013dcc <UTIL_LPM_SetOffMode>

  Led_Init();
 8001e4c:	f000 f8a1 	bl	8001f92 <Led_Init>

  Button_Init();
 8001e50:	f000 f8a6 	bl	8001fa0 <Button_Init>
/* USER CODE END APPE_Init_1 */
  appe_Tl_Init();	/* Initialize all transport layers */
 8001e54:	f000 f812 	bl	8001e7c <appe_Tl_Init>
   * This system event is received with APPE_SysUserEvtRx()
   */
/* USER CODE BEGIN APPE_Init_2 */

/* USER CODE END APPE_Init_2 */
   return;
 8001e58:	bf00      	nop
}
 8001e5a:	bd80      	pop	{r7, pc}
 8001e5c:	2002e0a4 	.word	0x2002e0a4

08001e60 <SystemPower_Config>:
 *
 * @param  None
 * @retval None
 */
static void SystemPower_Config(void)
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	af00      	add	r7, sp, #0
  /**
   * Select HSI as system clock source after Wake Up from Stop mode
   */
  LL_RCC_SetClkAfterWakeFromStop(LL_RCC_STOP_WAKEUPCLOCK_HSI);
 8001e64:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8001e68:	f7ff ffce 	bl	8001e08 <LL_RCC_SetClkAfterWakeFromStop>

  /* Initialize low power manager */
  UTIL_LPM_Init();
 8001e6c:	f011 ff9c 	bl	8013da8 <UTIL_LPM_Init>
  /* Initialize the CPU2 reset value before starting CPU2 with C2BOOT */
  LL_C2_PWR_SetPowerMode(LL_PWR_MODE_SHUTDOWN);
 8001e70:	2004      	movs	r0, #4
 8001e72:	f7ff ffb3 	bl	8001ddc <LL_C2_PWR_SetPowerMode>
   *  Enable USB power
   */
  HAL_PWREx_EnableVddUSB();
#endif

  return;
 8001e76:	bf00      	nop
}
 8001e78:	bd80      	pop	{r7, pc}
	...

08001e7c <appe_Tl_Init>:

static void appe_Tl_Init( void )
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	b088      	sub	sp, #32
 8001e80:	af00      	add	r7, sp, #0
  TL_MM_Config_t tl_mm_config;
  SHCI_TL_HciInitConf_t SHci_Tl_Init_Conf;
  /**< Reference table initialization */
  TL_Init();
 8001e82:	f00c fcb5 	bl	800e7f0 <TL_Init>

  MtxShciId = osMutexNew( NULL );
 8001e86:	2000      	movs	r0, #0
 8001e88:	f00d ffea 	bl	800fe60 <osMutexNew>
 8001e8c:	4602      	mov	r2, r0
 8001e8e:	4b17      	ldr	r3, [pc, #92]	; (8001eec <appe_Tl_Init+0x70>)
 8001e90:	601a      	str	r2, [r3, #0]
  SemShciId = osSemaphoreNew( 1, 0, NULL ); /*< Create the semaphore and make it busy at initialization */
 8001e92:	2200      	movs	r2, #0
 8001e94:	2100      	movs	r1, #0
 8001e96:	2001      	movs	r0, #1
 8001e98:	f00e f92a 	bl	80100f0 <osSemaphoreNew>
 8001e9c:	4602      	mov	r2, r0
 8001e9e:	4b14      	ldr	r3, [pc, #80]	; (8001ef0 <appe_Tl_Init+0x74>)
 8001ea0:	601a      	str	r2, [r3, #0]

  /** FreeRTOS system task creation */
  ShciUserEvtProcessId = osThreadNew(ShciUserEvtProcess, NULL, &ShciUserEvtProcess_attr);
 8001ea2:	4a14      	ldr	r2, [pc, #80]	; (8001ef4 <appe_Tl_Init+0x78>)
 8001ea4:	2100      	movs	r1, #0
 8001ea6:	4814      	ldr	r0, [pc, #80]	; (8001ef8 <appe_Tl_Init+0x7c>)
 8001ea8:	f00d fe10 	bl	800facc <osThreadNew>
 8001eac:	4602      	mov	r2, r0
 8001eae:	4b13      	ldr	r3, [pc, #76]	; (8001efc <appe_Tl_Init+0x80>)
 8001eb0:	601a      	str	r2, [r3, #0]

  /**< System channel initialization */
  SHci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&SystemCmdBuffer;
 8001eb2:	4b13      	ldr	r3, [pc, #76]	; (8001f00 <appe_Tl_Init+0x84>)
 8001eb4:	603b      	str	r3, [r7, #0]
  SHci_Tl_Init_Conf.StatusNotCallBack = APPE_SysStatusNot;
 8001eb6:	4b13      	ldr	r3, [pc, #76]	; (8001f04 <appe_Tl_Init+0x88>)
 8001eb8:	607b      	str	r3, [r7, #4]
  shci_init(APPE_SysUserEvtRx, (void*) &SHci_Tl_Init_Conf);
 8001eba:	463b      	mov	r3, r7
 8001ebc:	4619      	mov	r1, r3
 8001ebe:	4812      	ldr	r0, [pc, #72]	; (8001f08 <appe_Tl_Init+0x8c>)
 8001ec0:	f00c fb5c 	bl	800e57c <shci_init>

  /**< Memory Manager channel initialization */
  tl_mm_config.p_BleSpareEvtBuffer = BleSpareEvtBuffer;
 8001ec4:	4b11      	ldr	r3, [pc, #68]	; (8001f0c <appe_Tl_Init+0x90>)
 8001ec6:	60bb      	str	r3, [r7, #8]
  tl_mm_config.p_SystemSpareEvtBuffer = SystemSpareEvtBuffer;
 8001ec8:	4b11      	ldr	r3, [pc, #68]	; (8001f10 <appe_Tl_Init+0x94>)
 8001eca:	60fb      	str	r3, [r7, #12]
  tl_mm_config.p_AsynchEvtPool = EvtPool;
 8001ecc:	4b11      	ldr	r3, [pc, #68]	; (8001f14 <appe_Tl_Init+0x98>)
 8001ece:	613b      	str	r3, [r7, #16]
  tl_mm_config.AsynchEvtPoolSize = POOL_SIZE;
 8001ed0:	f240 533c 	movw	r3, #1340	; 0x53c
 8001ed4:	617b      	str	r3, [r7, #20]
  TL_MM_Init( &tl_mm_config );
 8001ed6:	f107 0308 	add.w	r3, r7, #8
 8001eda:	4618      	mov	r0, r3
 8001edc:	f00c fdca 	bl	800ea74 <TL_MM_Init>

  TL_Enable();
 8001ee0:	f00c fc80 	bl	800e7e4 <TL_Enable>

  return;
 8001ee4:	bf00      	nop
}
 8001ee6:	3720      	adds	r7, #32
 8001ee8:	46bd      	mov	sp, r7
 8001eea:	bd80      	pop	{r7, pc}
 8001eec:	2002e1d0 	.word	0x2002e1d0
 8001ef0:	2002e1d8 	.word	0x2002e1d8
 8001ef4:	08018bdc 	.word	0x08018bdc
 8001ef8:	08001f79 	.word	0x08001f79
 8001efc:	2002e1d4 	.word	0x2002e1d4
 8001f00:	20030724 	.word	0x20030724
 8001f04:	08001f19 	.word	0x08001f19
 8001f08:	08001f59 	.word	0x08001f59
 8001f0c:	2003093c 	.word	0x2003093c
 8001f10:	20030830 	.word	0x20030830
 8001f14:	200301e8 	.word	0x200301e8

08001f18 <APPE_SysStatusNot>:

static void APPE_SysStatusNot( SHCI_TL_CmdStatus_t status )
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	b082      	sub	sp, #8
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	4603      	mov	r3, r0
 8001f20:	71fb      	strb	r3, [r7, #7]
  switch (status)
 8001f22:	79fb      	ldrb	r3, [r7, #7]
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d002      	beq.n	8001f2e <APPE_SysStatusNot+0x16>
 8001f28:	2b01      	cmp	r3, #1
 8001f2a:	d008      	beq.n	8001f3e <APPE_SysStatusNot+0x26>
    case SHCI_TL_CmdAvailable:
      osMutexRelease( MtxShciId );
      break;

    default:
      break;
 8001f2c:	e00d      	b.n	8001f4a <APPE_SysStatusNot+0x32>
      osMutexAcquire( MtxShciId, osWaitForever );
 8001f2e:	4b09      	ldr	r3, [pc, #36]	; (8001f54 <APPE_SysStatusNot+0x3c>)
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001f36:	4618      	mov	r0, r3
 8001f38:	f00e f82c 	bl	800ff94 <osMutexAcquire>
      break;
 8001f3c:	e005      	b.n	8001f4a <APPE_SysStatusNot+0x32>
      osMutexRelease( MtxShciId );
 8001f3e:	4b05      	ldr	r3, [pc, #20]	; (8001f54 <APPE_SysStatusNot+0x3c>)
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	4618      	mov	r0, r3
 8001f44:	f00e f884 	bl	8010050 <osMutexRelease>
      break;
 8001f48:	bf00      	nop
  }
  return;
 8001f4a:	bf00      	nop
}
 8001f4c:	3708      	adds	r7, #8
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	bd80      	pop	{r7, pc}
 8001f52:	bf00      	nop
 8001f54:	2002e1d0 	.word	0x2002e1d0

08001f58 <APPE_SysUserEvtRx>:
 * The buffer shall not be released
 * ( eg ((tSHCI_UserEvtRxParam*)pPayload)->status shall be set to SHCI_TL_UserEventFlow_Disable )
 * When the status is not filled, the buffer is released by default
 */
static void APPE_SysUserEvtRx( void * pPayload )
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b082      	sub	sp, #8
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
  UNUSED(pPayload);
  /* Traces channel initialization */
  APPD_EnableCPU2( );
 8001f60:	f7ff fe60 	bl	8001c24 <APPD_EnableCPU2>

  APP_BLE_Init( );
 8001f64:	f7fe fe6c 	bl	8000c40 <APP_BLE_Init>
  UTIL_LPM_SetOffMode(1U << CFG_LPM_APP, UTIL_LPM_ENABLE);
 8001f68:	2100      	movs	r1, #0
 8001f6a:	2001      	movs	r0, #1
 8001f6c:	f011 ff2e 	bl	8013dcc <UTIL_LPM_SetOffMode>
  return;
 8001f70:	bf00      	nop
}
 8001f72:	3708      	adds	r7, #8
 8001f74:	46bd      	mov	sp, r7
 8001f76:	bd80      	pop	{r7, pc}

08001f78 <ShciUserEvtProcess>:
 *
 * FREERTOS WRAPPER FUNCTIONS
 *
*************************************************************/
static void ShciUserEvtProcess(void *argument)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	b082      	sub	sp, #8
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]
  for(;;)
  {
    /* USER CODE BEGIN SHCI_USER_EVT_PROCESS_1 */

    /* USER CODE END SHCI_USER_EVT_PROCESS_1 */
     osThreadFlagsWait(1, osFlagsWaitAny, osWaitForever);
 8001f80:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001f84:	2100      	movs	r1, #0
 8001f86:	2001      	movs	r0, #1
 8001f88:	f00d fea8 	bl	800fcdc <osThreadFlagsWait>
     shci_user_evt_proc();
 8001f8c:	f00c fb12 	bl	800e5b4 <shci_user_evt_proc>
     osThreadFlagsWait(1, osFlagsWaitAny, osWaitForever);
 8001f90:	e7f6      	b.n	8001f80 <ShciUserEvtProcess+0x8>

08001f92 <Led_Init>:
    }
}

/* USER CODE BEGIN FD_LOCAL_FUNCTIONS */
static void Led_Init( void )
{
 8001f92:	b480      	push	{r7}
 8001f94:	af00      	add	r7, sp, #0
  BSP_LED_Init(LED_RED);

  BSP_LED_On(LED_GREEN);
#endif

  return;
 8001f96:	bf00      	nop
}
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9e:	4770      	bx	lr

08001fa0 <Button_Init>:

static void Button_Init( void )
{
 8001fa0:	b480      	push	{r7}
 8001fa2:	af00      	add	r7, sp, #0
  BSP_PB_Init(BUTTON_SW1, BUTTON_MODE_EXTI);
  BSP_PB_Init(BUTTON_SW2, BUTTON_MODE_EXTI);
  BSP_PB_Init(BUTTON_SW3, BUTTON_MODE_EXTI);
#endif

  return;
 8001fa4:	bf00      	nop
}
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fac:	4770      	bx	lr
	...

08001fb0 <shci_notify_asynch_evt>:
 * WRAP FUNCTIONS
 *
 *************************************************************/

void shci_notify_asynch_evt(void* pdata)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	b082      	sub	sp, #8
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
  UNUSED(pdata);
  osThreadFlagsSet( ShciUserEvtProcessId, 1 );
 8001fb8:	4b04      	ldr	r3, [pc, #16]	; (8001fcc <shci_notify_asynch_evt+0x1c>)
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	2101      	movs	r1, #1
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	f00d fe2a 	bl	800fc18 <osThreadFlagsSet>
  return;
 8001fc4:	bf00      	nop
}
 8001fc6:	3708      	adds	r7, #8
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	bd80      	pop	{r7, pc}
 8001fcc:	2002e1d4 	.word	0x2002e1d4

08001fd0 <shci_cmd_resp_release>:

void shci_cmd_resp_release(uint32_t flag)
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	b082      	sub	sp, #8
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	6078      	str	r0, [r7, #4]
  UNUSED(flag);
  osSemaphoreRelease( SemShciId );
 8001fd8:	4b04      	ldr	r3, [pc, #16]	; (8001fec <shci_cmd_resp_release+0x1c>)
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	4618      	mov	r0, r3
 8001fde:	f00e f98b 	bl	80102f8 <osSemaphoreRelease>
  return;
 8001fe2:	bf00      	nop
}
 8001fe4:	3708      	adds	r7, #8
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	bd80      	pop	{r7, pc}
 8001fea:	bf00      	nop
 8001fec:	2002e1d8 	.word	0x2002e1d8

08001ff0 <shci_cmd_resp_wait>:

void shci_cmd_resp_wait(uint32_t timeout)
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	b082      	sub	sp, #8
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]
  UNUSED(timeout);
  osSemaphoreAcquire( SemShciId, osWaitForever );
 8001ff8:	4b05      	ldr	r3, [pc, #20]	; (8002010 <shci_cmd_resp_wait+0x20>)
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002000:	4618      	mov	r0, r3
 8002002:	f00e f913 	bl	801022c <osSemaphoreAcquire>
  return;
 8002006:	bf00      	nop
}
 8002008:	3708      	adds	r7, #8
 800200a:	46bd      	mov	sp, r7
 800200c:	bd80      	pop	{r7, pc}
 800200e:	bf00      	nop
 8002010:	2002e1d8 	.word	0x2002e1d8

08002014 <Dotstar_Init>:
} DotStar_State;


DotStar_State dotstar_state;

void Dotstar_Init(DotStar_InitHandle* dotstar_init){
 8002014:	b580      	push	{r7, lr}
 8002016:	b084      	sub	sp, #16
 8002018:	af00      	add	r7, sp, #0
 800201a:	6078      	str	r0, [r7, #4]

   dotstar_state.spiHandle = dotstar_init->spiHandle;
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	4a23      	ldr	r2, [pc, #140]	; (80020b0 <Dotstar_Init+0x9c>)
 8002022:	6013      	str	r3, [r2, #0]
   dotstar_state.numLEDs = dotstar_init->numLEDs;
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	889a      	ldrh	r2, [r3, #4]
 8002028:	4b21      	ldr	r3, [pc, #132]	; (80020b0 <Dotstar_Init+0x9c>)
 800202a:	809a      	strh	r2, [r3, #4]
   dotstar_state.brightness = 0;
 800202c:	4b20      	ldr	r3, [pc, #128]	; (80020b0 <Dotstar_Init+0x9c>)
 800202e:	2200      	movs	r2, #0
 8002030:	719a      	strb	r2, [r3, #6]
   dotstar_state.rOffset = dotstar_init->colorOrder & 3;
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	799b      	ldrb	r3, [r3, #6]
 8002036:	f003 0303 	and.w	r3, r3, #3
 800203a:	b2da      	uxtb	r2, r3
 800203c:	4b1c      	ldr	r3, [pc, #112]	; (80020b0 <Dotstar_Init+0x9c>)
 800203e:	731a      	strb	r2, [r3, #12]
   dotstar_state.gOffset = (dotstar_init->colorOrder >> 2) & 3;
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	799b      	ldrb	r3, [r3, #6]
 8002044:	089b      	lsrs	r3, r3, #2
 8002046:	b2db      	uxtb	r3, r3
 8002048:	f003 0303 	and.w	r3, r3, #3
 800204c:	b2da      	uxtb	r2, r3
 800204e:	4b18      	ldr	r3, [pc, #96]	; (80020b0 <Dotstar_Init+0x9c>)
 8002050:	735a      	strb	r2, [r3, #13]
   dotstar_state.bOffset = (dotstar_init->colorOrder >> 4) & 3;
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	799b      	ldrb	r3, [r3, #6]
 8002056:	091b      	lsrs	r3, r3, #4
 8002058:	b2db      	uxtb	r3, r3
 800205a:	f003 0303 	and.w	r3, r3, #3
 800205e:	b2da      	uxtb	r2, r3
 8002060:	4b13      	ldr	r3, [pc, #76]	; (80020b0 <Dotstar_Init+0x9c>)
 8002062:	739a      	strb	r2, [r3, #14]

   uint16_t bytes = (dotstar_state.rOffset == dotstar_state.gOffset) ?
 8002064:	4b12      	ldr	r3, [pc, #72]	; (80020b0 <Dotstar_Init+0x9c>)
 8002066:	7b1a      	ldrb	r2, [r3, #12]
 8002068:	4b11      	ldr	r3, [pc, #68]	; (80020b0 <Dotstar_Init+0x9c>)
 800206a:	7b5b      	ldrb	r3, [r3, #13]
 800206c:	429a      	cmp	r2, r3
 800206e:	d10c      	bne.n	800208a <Dotstar_Init+0x76>
     dotstar_state.numLEDs + ((dotstar_state.numLEDs + 3) / 4) : // MONO: 10 bits/pixel, round up to next byte
 8002070:	4b0f      	ldr	r3, [pc, #60]	; (80020b0 <Dotstar_Init+0x9c>)
 8002072:	889a      	ldrh	r2, [r3, #4]
 8002074:	4b0e      	ldr	r3, [pc, #56]	; (80020b0 <Dotstar_Init+0x9c>)
 8002076:	889b      	ldrh	r3, [r3, #4]
 8002078:	3303      	adds	r3, #3
 800207a:	2b00      	cmp	r3, #0
 800207c:	da00      	bge.n	8002080 <Dotstar_Init+0x6c>
 800207e:	3303      	adds	r3, #3
 8002080:	109b      	asrs	r3, r3, #2
 8002082:	b29b      	uxth	r3, r3
   uint16_t bytes = (dotstar_state.rOffset == dotstar_state.gOffset) ?
 8002084:	4413      	add	r3, r2
 8002086:	b29b      	uxth	r3, r3
 8002088:	e005      	b.n	8002096 <Dotstar_Init+0x82>
     dotstar_state.numLEDs * 3;              // COLOR: 3 bytes/pixel
 800208a:	4b09      	ldr	r3, [pc, #36]	; (80020b0 <Dotstar_Init+0x9c>)
 800208c:	889b      	ldrh	r3, [r3, #4]
   uint16_t bytes = (dotstar_state.rOffset == dotstar_state.gOffset) ?
 800208e:	461a      	mov	r2, r3
 8002090:	0052      	lsls	r2, r2, #1
 8002092:	4413      	add	r3, r2
 8002094:	b29b      	uxth	r3, r3
 8002096:	81fb      	strh	r3, [r7, #14]

   //dotstar_state.pixels = (uint8_t *)malloc(bytes);
   dotstar_state.pixels = (uint8_t *)pvPortMalloc(bytes);
 8002098:	89fb      	ldrh	r3, [r7, #14]
 800209a:	4618      	mov	r0, r3
 800209c:	f00e fd68 	bl	8010b70 <pvPortMalloc>
 80020a0:	4603      	mov	r3, r0
 80020a2:	461a      	mov	r2, r3
 80020a4:	4b02      	ldr	r3, [pc, #8]	; (80020b0 <Dotstar_Init+0x9c>)
 80020a6:	609a      	str	r2, [r3, #8]
}
 80020a8:	bf00      	nop
 80020aa:	3710      	adds	r7, #16
 80020ac:	46bd      	mov	sp, r7
 80020ae:	bd80      	pop	{r7, pc}
 80020b0:	2002e1dc 	.word	0x2002e1dc

080020b4 <ds_show>:
*/

/*!
  @brief   Transmit pixel data in RAM to DotStars.
*/
void ds_show(void) {
 80020b4:	b580      	push	{r7, lr}
 80020b6:	b084      	sub	sp, #16
 80020b8:	af00      	add	r7, sp, #0

  if(!dotstar_state.pixels) return;
 80020ba:	4b4b      	ldr	r3, [pc, #300]	; (80021e8 <ds_show+0x134>)
 80020bc:	689b      	ldr	r3, [r3, #8]
 80020be:	2b00      	cmp	r3, #0
 80020c0:	f000 808e 	beq.w	80021e0 <ds_show+0x12c>

  uint8_t *ptr = dotstar_state.pixels, i;            // -> LED data
 80020c4:	4b48      	ldr	r3, [pc, #288]	; (80021e8 <ds_show+0x134>)
 80020c6:	689b      	ldr	r3, [r3, #8]
 80020c8:	60fb      	str	r3, [r7, #12]
  uint16_t n   = dotstar_state.numLEDs;              // Counter
 80020ca:	4b47      	ldr	r3, [pc, #284]	; (80021e8 <ds_show+0x134>)
 80020cc:	889b      	ldrh	r3, [r3, #4]
 80020ce:	813b      	strh	r3, [r7, #8]
  uint16_t b16 = (uint16_t)dotstar_state.brightness; // Type-convert for fixed-point math
 80020d0:	4b45      	ldr	r3, [pc, #276]	; (80021e8 <ds_show+0x134>)
 80020d2:	799b      	ldrb	r3, [r3, #6]
 80020d4:	80fb      	strh	r3, [r7, #6]
  uint8_t sendval;

    sendval = 0x00;
 80020d6:	2300      	movs	r3, #0
 80020d8:	717b      	strb	r3, [r7, #5]
    for(i=0; i<4; i++) spi_out(&sendval);    // 4 byte start-frame marker
 80020da:	2300      	movs	r3, #0
 80020dc:	72fb      	strb	r3, [r7, #11]
 80020de:	e00a      	b.n	80020f6 <ds_show+0x42>
 80020e0:	4b41      	ldr	r3, [pc, #260]	; (80021e8 <ds_show+0x134>)
 80020e2:	6818      	ldr	r0, [r3, #0]
 80020e4:	1d79      	adds	r1, r7, #5
 80020e6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80020ea:	2201      	movs	r2, #1
 80020ec:	f009 fad9 	bl	800b6a2 <HAL_SPI_Transmit>
 80020f0:	7afb      	ldrb	r3, [r7, #11]
 80020f2:	3301      	adds	r3, #1
 80020f4:	72fb      	strb	r3, [r7, #11]
 80020f6:	7afb      	ldrb	r3, [r7, #11]
 80020f8:	2b03      	cmp	r3, #3
 80020fa:	d9f1      	bls.n	80020e0 <ds_show+0x2c>

    if(dotstar_state.brightness) {                     // Scale pixel brightness on output
 80020fc:	4b3a      	ldr	r3, [pc, #232]	; (80021e8 <ds_show+0x134>)
 80020fe:	799b      	ldrb	r3, [r3, #6]
 8002100:	2b00      	cmp	r3, #0
 8002102:	d02c      	beq.n	800215e <ds_show+0xaa>
      do {                               // For each pixel...
    	sendval = 0xFF;
 8002104:	23ff      	movs	r3, #255	; 0xff
 8002106:	717b      	strb	r3, [r7, #5]
        spi_out(&sendval);                   //  Pixel start
 8002108:	4b37      	ldr	r3, [pc, #220]	; (80021e8 <ds_show+0x134>)
 800210a:	6818      	ldr	r0, [r3, #0]
 800210c:	1d79      	adds	r1, r7, #5
 800210e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002112:	2201      	movs	r2, #1
 8002114:	f009 fac5 	bl	800b6a2 <HAL_SPI_Transmit>
        for(i=0; i<3; i++) {
 8002118:	2300      	movs	r3, #0
 800211a:	72fb      	strb	r3, [r7, #11]
 800211c:	e015      	b.n	800214a <ds_show+0x96>
        	sendval = (*ptr++ * b16) >> 8;
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	1c5a      	adds	r2, r3, #1
 8002122:	60fa      	str	r2, [r7, #12]
 8002124:	781b      	ldrb	r3, [r3, #0]
 8002126:	461a      	mov	r2, r3
 8002128:	88fb      	ldrh	r3, [r7, #6]
 800212a:	fb03 f302 	mul.w	r3, r3, r2
 800212e:	121b      	asrs	r3, r3, #8
 8002130:	b2db      	uxtb	r3, r3
 8002132:	717b      	strb	r3, [r7, #5]
        	spi_out(&sendval); // Scale, write RGB
 8002134:	4b2c      	ldr	r3, [pc, #176]	; (80021e8 <ds_show+0x134>)
 8002136:	6818      	ldr	r0, [r3, #0]
 8002138:	1d79      	adds	r1, r7, #5
 800213a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800213e:	2201      	movs	r2, #1
 8002140:	f009 faaf 	bl	800b6a2 <HAL_SPI_Transmit>
        for(i=0; i<3; i++) {
 8002144:	7afb      	ldrb	r3, [r7, #11]
 8002146:	3301      	adds	r3, #1
 8002148:	72fb      	strb	r3, [r7, #11]
 800214a:	7afb      	ldrb	r3, [r7, #11]
 800214c:	2b02      	cmp	r3, #2
 800214e:	d9e6      	bls.n	800211e <ds_show+0x6a>
        }
      } while(--n);
 8002150:	893b      	ldrh	r3, [r7, #8]
 8002152:	3b01      	subs	r3, #1
 8002154:	813b      	strh	r3, [r7, #8]
 8002156:	893b      	ldrh	r3, [r7, #8]
 8002158:	2b00      	cmp	r3, #0
 800215a:	d1d3      	bne.n	8002104 <ds_show+0x50>
 800215c:	e025      	b.n	80021aa <ds_show+0xf6>
    } else {                             // Full brightness (no scaling)
      do {                               // For each pixel...
    	sendval = 0xFF;
 800215e:	23ff      	movs	r3, #255	; 0xff
 8002160:	717b      	strb	r3, [r7, #5]
        spi_out(&sendval);                   //  Pixel start
 8002162:	4b21      	ldr	r3, [pc, #132]	; (80021e8 <ds_show+0x134>)
 8002164:	6818      	ldr	r0, [r3, #0]
 8002166:	1d79      	adds	r1, r7, #5
 8002168:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800216c:	2201      	movs	r2, #1
 800216e:	f009 fa98 	bl	800b6a2 <HAL_SPI_Transmit>
        for(i=0; i<3; i++) {
 8002172:	2300      	movs	r3, #0
 8002174:	72fb      	strb	r3, [r7, #11]
 8002176:	e00f      	b.n	8002198 <ds_show+0xe4>
        	sendval = *ptr++;
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	1c5a      	adds	r2, r3, #1
 800217c:	60fa      	str	r2, [r7, #12]
 800217e:	781b      	ldrb	r3, [r3, #0]
 8002180:	717b      	strb	r3, [r7, #5]
        	spi_out(&sendval); // Write R,G,B
 8002182:	4b19      	ldr	r3, [pc, #100]	; (80021e8 <ds_show+0x134>)
 8002184:	6818      	ldr	r0, [r3, #0]
 8002186:	1d79      	adds	r1, r7, #5
 8002188:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800218c:	2201      	movs	r2, #1
 800218e:	f009 fa88 	bl	800b6a2 <HAL_SPI_Transmit>
        for(i=0; i<3; i++) {
 8002192:	7afb      	ldrb	r3, [r7, #11]
 8002194:	3301      	adds	r3, #1
 8002196:	72fb      	strb	r3, [r7, #11]
 8002198:	7afb      	ldrb	r3, [r7, #11]
 800219a:	2b02      	cmp	r3, #2
 800219c:	d9ec      	bls.n	8002178 <ds_show+0xc4>
        }
      } while(--n);
 800219e:	893b      	ldrh	r3, [r7, #8]
 80021a0:	3b01      	subs	r3, #1
 80021a2:	813b      	strh	r3, [r7, #8]
 80021a4:	893b      	ldrh	r3, [r7, #8]
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d1d9      	bne.n	800215e <ds_show+0xaa>
    // revisions are more strict (e.g. might mandate use of end-frame
    // before start-frame marker). i.e. let's not remove this. But after
    // testing a bit more the suggestion is to use at least (numLeds+1)/2
    // high values (1) or (numLeds+15)/16 full bytes as EndFrame. For details see also:
    // https://cpldcpu.wordpress.com/2014/11/30/understanding-the-apa102-superled/
    sendval = 0xFF;
 80021aa:	23ff      	movs	r3, #255	; 0xff
 80021ac:	717b      	strb	r3, [r7, #5]
    for(i=0; i<((dotstar_state.numLEDs + 15) / 16); i++) spi_out(&sendval);
 80021ae:	2300      	movs	r3, #0
 80021b0:	72fb      	strb	r3, [r7, #11]
 80021b2:	e00a      	b.n	80021ca <ds_show+0x116>
 80021b4:	4b0c      	ldr	r3, [pc, #48]	; (80021e8 <ds_show+0x134>)
 80021b6:	6818      	ldr	r0, [r3, #0]
 80021b8:	1d79      	adds	r1, r7, #5
 80021ba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80021be:	2201      	movs	r2, #1
 80021c0:	f009 fa6f 	bl	800b6a2 <HAL_SPI_Transmit>
 80021c4:	7afb      	ldrb	r3, [r7, #11]
 80021c6:	3301      	adds	r3, #1
 80021c8:	72fb      	strb	r3, [r7, #11]
 80021ca:	7afa      	ldrb	r2, [r7, #11]
 80021cc:	4b06      	ldr	r3, [pc, #24]	; (80021e8 <ds_show+0x134>)
 80021ce:	889b      	ldrh	r3, [r3, #4]
 80021d0:	330f      	adds	r3, #15
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	da00      	bge.n	80021d8 <ds_show+0x124>
 80021d6:	330f      	adds	r3, #15
 80021d8:	111b      	asrs	r3, r3, #4
 80021da:	429a      	cmp	r2, r3
 80021dc:	dbea      	blt.n	80021b4 <ds_show+0x100>
 80021de:	e000      	b.n	80021e2 <ds_show+0x12e>
  if(!dotstar_state.pixels) return;
 80021e0:	bf00      	nop

}
 80021e2:	3710      	adds	r7, #16
 80021e4:	46bd      	mov	sp, r7
 80021e6:	bd80      	pop	{r7, pc}
 80021e8:	2002e1dc 	.word	0x2002e1dc

080021ec <ds_clear>:

/*!
  @brief   Fill the whole DotStar strip with 0 / black / off.
*/
void ds_clear() {
 80021ec:	b580      	push	{r7, lr}
 80021ee:	af00      	add	r7, sp, #0
  memset(dotstar_state.pixels, 0, (dotstar_state.rOffset == dotstar_state.gOffset) ?
 80021f0:	4b0f      	ldr	r3, [pc, #60]	; (8002230 <ds_clear+0x44>)
 80021f2:	6898      	ldr	r0, [r3, #8]
 80021f4:	4b0e      	ldr	r3, [pc, #56]	; (8002230 <ds_clear+0x44>)
 80021f6:	7b1a      	ldrb	r2, [r3, #12]
 80021f8:	4b0d      	ldr	r3, [pc, #52]	; (8002230 <ds_clear+0x44>)
 80021fa:	7b5b      	ldrb	r3, [r3, #13]
 80021fc:	429a      	cmp	r2, r3
 80021fe:	d10b      	bne.n	8002218 <ds_clear+0x2c>
    dotstar_state.numLEDs + ((dotstar_state.numLEDs + 3) / 4) : // MONO: 10 bits/pixel
 8002200:	4b0b      	ldr	r3, [pc, #44]	; (8002230 <ds_clear+0x44>)
 8002202:	889b      	ldrh	r3, [r3, #4]
 8002204:	461a      	mov	r2, r3
 8002206:	4b0a      	ldr	r3, [pc, #40]	; (8002230 <ds_clear+0x44>)
 8002208:	889b      	ldrh	r3, [r3, #4]
 800220a:	3303      	adds	r3, #3
 800220c:	2b00      	cmp	r3, #0
 800220e:	da00      	bge.n	8002212 <ds_clear+0x26>
 8002210:	3303      	adds	r3, #3
 8002212:	109b      	asrs	r3, r3, #2
 8002214:	4413      	add	r3, r2
 8002216:	e005      	b.n	8002224 <ds_clear+0x38>
    dotstar_state.numLEDs * 3);                   // COLOR: 3 bytes/pixel
 8002218:	4b05      	ldr	r3, [pc, #20]	; (8002230 <ds_clear+0x44>)
 800221a:	889b      	ldrh	r3, [r3, #4]
 800221c:	461a      	mov	r2, r3
 800221e:	4613      	mov	r3, r2
 8002220:	005b      	lsls	r3, r3, #1
 8002222:	4413      	add	r3, r2
  memset(dotstar_state.pixels, 0, (dotstar_state.rOffset == dotstar_state.gOffset) ?
 8002224:	461a      	mov	r2, r3
 8002226:	2100      	movs	r1, #0
 8002228:	f011 fe33 	bl	8013e92 <memset>
}
 800222c:	bf00      	nop
 800222e:	bd80      	pop	{r7, pc}
 8002230:	2002e1dc 	.word	0x2002e1dc

08002234 <ds_setPixelColor32B>:
  @param   n  Pixel index, starting from 0.
  @param   c  32-bit color value. Most significant byte is 0, second is
              red, then green, and least significant byte is blue.
              e.g. 0x00RRGGBB
*/
void ds_setPixelColor32B(uint16_t n, uint32_t c) {
 8002234:	b480      	push	{r7}
 8002236:	b085      	sub	sp, #20
 8002238:	af00      	add	r7, sp, #0
 800223a:	4603      	mov	r3, r0
 800223c:	6039      	str	r1, [r7, #0]
 800223e:	80fb      	strh	r3, [r7, #6]
  if(n < dotstar_state.numLEDs) {
 8002240:	4b16      	ldr	r3, [pc, #88]	; (800229c <ds_setPixelColor32B+0x68>)
 8002242:	889b      	ldrh	r3, [r3, #4]
 8002244:	88fa      	ldrh	r2, [r7, #6]
 8002246:	429a      	cmp	r2, r3
 8002248:	d221      	bcs.n	800228e <ds_setPixelColor32B+0x5a>
    uint8_t *p = &dotstar_state.pixels[n * 3];
 800224a:	4b14      	ldr	r3, [pc, #80]	; (800229c <ds_setPixelColor32B+0x68>)
 800224c:	6899      	ldr	r1, [r3, #8]
 800224e:	88fa      	ldrh	r2, [r7, #6]
 8002250:	4613      	mov	r3, r2
 8002252:	005b      	lsls	r3, r3, #1
 8002254:	4413      	add	r3, r2
 8002256:	440b      	add	r3, r1
 8002258:	60fb      	str	r3, [r7, #12]
    p[dotstar_state.rOffset] = (uint8_t)(c >> 16);
 800225a:	683b      	ldr	r3, [r7, #0]
 800225c:	0c1a      	lsrs	r2, r3, #16
 800225e:	4b0f      	ldr	r3, [pc, #60]	; (800229c <ds_setPixelColor32B+0x68>)
 8002260:	7b1b      	ldrb	r3, [r3, #12]
 8002262:	4619      	mov	r1, r3
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	440b      	add	r3, r1
 8002268:	b2d2      	uxtb	r2, r2
 800226a:	701a      	strb	r2, [r3, #0]
    p[dotstar_state.gOffset] = (uint8_t)(c >>  8);
 800226c:	683b      	ldr	r3, [r7, #0]
 800226e:	0a1a      	lsrs	r2, r3, #8
 8002270:	4b0a      	ldr	r3, [pc, #40]	; (800229c <ds_setPixelColor32B+0x68>)
 8002272:	7b5b      	ldrb	r3, [r3, #13]
 8002274:	4619      	mov	r1, r3
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	440b      	add	r3, r1
 800227a:	b2d2      	uxtb	r2, r2
 800227c:	701a      	strb	r2, [r3, #0]
    p[dotstar_state.bOffset] = (uint8_t)c;
 800227e:	4b07      	ldr	r3, [pc, #28]	; (800229c <ds_setPixelColor32B+0x68>)
 8002280:	7b9b      	ldrb	r3, [r3, #14]
 8002282:	461a      	mov	r2, r3
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	4413      	add	r3, r2
 8002288:	683a      	ldr	r2, [r7, #0]
 800228a:	b2d2      	uxtb	r2, r2
 800228c:	701a      	strb	r2, [r3, #0]
  }
}
 800228e:	bf00      	nop
 8002290:	3714      	adds	r7, #20
 8002292:	46bd      	mov	sp, r7
 8002294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002298:	4770      	bx	lr
 800229a:	bf00      	nop
 800229c:	2002e1dc 	.word	0x2002e1dc

080022a0 <ds_fill>:
  @param   first  Index of first pixel to fill, starting from 0. Must be
                  in-bounds, no clipping is performed. 0 if unspecified.
  @param   count  Number of pixels to fill, as a positive value. Passing
                  0 or leaving unspecified will fill to end of strip.
*/
void ds_fill(uint32_t c, uint16_t first, uint16_t count) {
 80022a0:	b580      	push	{r7, lr}
 80022a2:	b084      	sub	sp, #16
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6078      	str	r0, [r7, #4]
 80022a8:	460b      	mov	r3, r1
 80022aa:	807b      	strh	r3, [r7, #2]
 80022ac:	4613      	mov	r3, r2
 80022ae:	803b      	strh	r3, [r7, #0]
  uint16_t i, end;

  if(first >= dotstar_state.numLEDs) {
 80022b0:	4b15      	ldr	r3, [pc, #84]	; (8002308 <ds_fill+0x68>)
 80022b2:	889b      	ldrh	r3, [r3, #4]
 80022b4:	887a      	ldrh	r2, [r7, #2]
 80022b6:	429a      	cmp	r2, r3
 80022b8:	d222      	bcs.n	8002300 <ds_fill+0x60>
    return; // If first LED is past end of strip, nothing to do
  }

  // Calculate the index ONE AFTER the last pixel to fill
  if(count == 0) {
 80022ba:	883b      	ldrh	r3, [r7, #0]
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d103      	bne.n	80022c8 <ds_fill+0x28>
    // Fill to end of strip
    end = dotstar_state.numLEDs;
 80022c0:	4b11      	ldr	r3, [pc, #68]	; (8002308 <ds_fill+0x68>)
 80022c2:	889b      	ldrh	r3, [r3, #4]
 80022c4:	81bb      	strh	r3, [r7, #12]
 80022c6:	e00b      	b.n	80022e0 <ds_fill+0x40>
  } else {
    // Ensure that the loop won't go past the last pixel
    end = first + count;
 80022c8:	887a      	ldrh	r2, [r7, #2]
 80022ca:	883b      	ldrh	r3, [r7, #0]
 80022cc:	4413      	add	r3, r2
 80022ce:	81bb      	strh	r3, [r7, #12]
    if(end > dotstar_state.numLEDs) end = dotstar_state.numLEDs;
 80022d0:	4b0d      	ldr	r3, [pc, #52]	; (8002308 <ds_fill+0x68>)
 80022d2:	889b      	ldrh	r3, [r3, #4]
 80022d4:	89ba      	ldrh	r2, [r7, #12]
 80022d6:	429a      	cmp	r2, r3
 80022d8:	d902      	bls.n	80022e0 <ds_fill+0x40>
 80022da:	4b0b      	ldr	r3, [pc, #44]	; (8002308 <ds_fill+0x68>)
 80022dc:	889b      	ldrh	r3, [r3, #4]
 80022de:	81bb      	strh	r3, [r7, #12]
  }

  for(i = first; i < end; i++) {
 80022e0:	887b      	ldrh	r3, [r7, #2]
 80022e2:	81fb      	strh	r3, [r7, #14]
 80022e4:	e007      	b.n	80022f6 <ds_fill+0x56>
    ds_setPixelColor32B(i, c);
 80022e6:	89fb      	ldrh	r3, [r7, #14]
 80022e8:	6879      	ldr	r1, [r7, #4]
 80022ea:	4618      	mov	r0, r3
 80022ec:	f7ff ffa2 	bl	8002234 <ds_setPixelColor32B>
  for(i = first; i < end; i++) {
 80022f0:	89fb      	ldrh	r3, [r7, #14]
 80022f2:	3301      	adds	r3, #1
 80022f4:	81fb      	strh	r3, [r7, #14]
 80022f6:	89fa      	ldrh	r2, [r7, #14]
 80022f8:	89bb      	ldrh	r3, [r7, #12]
 80022fa:	429a      	cmp	r2, r3
 80022fc:	d3f3      	bcc.n	80022e6 <ds_fill+0x46>
 80022fe:	e000      	b.n	8002302 <ds_fill+0x62>
    return; // If first LED is past end of strip, nothing to do
 8002300:	bf00      	nop
  }
}
 8002302:	3710      	adds	r7, #16
 8002304:	46bd      	mov	sp, r7
 8002306:	bd80      	pop	{r7, pc}
 8002308:	2002e1dc 	.word	0x2002e1dc

0800230c <ds_setBrightness>:
           is 'non destructive' -- it's applied as color data is being
           issued to the strip, not during setPixelColor(), and also
           means that getPixelColor() returns the exact value originally
           stored.
*/
void ds_setBrightness(uint8_t b) {
 800230c:	b480      	push	{r7}
 800230e:	b083      	sub	sp, #12
 8002310:	af00      	add	r7, sp, #0
 8002312:	4603      	mov	r3, r0
 8002314:	71fb      	strb	r3, [r7, #7]
  // optimizes the actual scaling math later, allowing a fast 8x8-bit
  // multiply and taking the MSB. 'brightness' is a uint8_t, adding 1
  // here may (intentionally) roll over...so 0 = max brightness (color
  // values are interpreted literally; no scaling), 1 = min brightness
  // (off), 255 = just below max brightness.
  dotstar_state.brightness = b + 1;
 8002316:	79fb      	ldrb	r3, [r7, #7]
 8002318:	3301      	adds	r3, #1
 800231a:	b2da      	uxtb	r2, r3
 800231c:	4b03      	ldr	r3, [pc, #12]	; (800232c <ds_setBrightness+0x20>)
 800231e:	719a      	strb	r2, [r3, #6]
}
 8002320:	bf00      	nop
 8002322:	370c      	adds	r7, #12
 8002324:	46bd      	mov	sp, r7
 8002326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232a:	4770      	bx	lr
 800232c:	2002e1dc 	.word	0x2002e1dc

08002330 <I2C_Write_Byte>:
//#include "stm32wbxx_hal_i2c.h"
//#include "stm32wbxx_hal.h"


void I2C_Write_Byte(uint8_t value, uint8_t Cmd)
{
 8002330:	b580      	push	{r7, lr}
 8002332:	b086      	sub	sp, #24
 8002334:	af02      	add	r7, sp, #8
 8002336:	4603      	mov	r3, r0
 8002338:	460a      	mov	r2, r1
 800233a:	71fb      	strb	r3, [r7, #7]
 800233c:	4613      	mov	r3, r2
 800233e:	71bb      	strb	r3, [r7, #6]
  uint16_t Addr = 0x3C << 1;
 8002340:	2378      	movs	r3, #120	; 0x78
 8002342:	81fb      	strh	r3, [r7, #14]
  uint8_t Data[2];
  Data[0] = Cmd;
 8002344:	79bb      	ldrb	r3, [r7, #6]
 8002346:	733b      	strb	r3, [r7, #12]
  Data[1] = value;
 8002348:	79fb      	ldrb	r3, [r7, #7]
 800234a:	737b      	strb	r3, [r7, #13]

  HAL_I2C_Master_Transmit(&ER_OLED_I2C_PORT, Addr, Data, 2, HAL_MAX_DELAY);
 800234c:	f107 020c 	add.w	r2, r7, #12
 8002350:	89f9      	ldrh	r1, [r7, #14]
 8002352:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002356:	9300      	str	r3, [sp, #0]
 8002358:	2302      	movs	r3, #2
 800235a:	4803      	ldr	r0, [pc, #12]	; (8002368 <I2C_Write_Byte+0x38>)
 800235c:	f006 f83e 	bl	80083dc <HAL_I2C_Master_Transmit>
}
 8002360:	bf00      	nop
 8002362:	3710      	adds	r7, #16
 8002364:	46bd      	mov	sp, r7
 8002366:	bd80      	pop	{r7, pc}
 8002368:	2002e1f8 	.word	0x2002e1f8

0800236c <er_oled_begin>:

void er_oled_begin()
{
 800236c:	b580      	push	{r7, lr}
 800236e:	af00      	add	r7, sp, #0
    command(0xae);//--turn off oled panel
 8002370:	2100      	movs	r1, #0
 8002372:	20ae      	movs	r0, #174	; 0xae
 8002374:	f7ff ffdc 	bl	8002330 <I2C_Write_Byte>

    command(0xd5);//--set display clock divide ratio/oscillator frequency
 8002378:	2100      	movs	r1, #0
 800237a:	20d5      	movs	r0, #213	; 0xd5
 800237c:	f7ff ffd8 	bl	8002330 <I2C_Write_Byte>
    command(0x80);//--set divide ratio
 8002380:	2100      	movs	r1, #0
 8002382:	2080      	movs	r0, #128	; 0x80
 8002384:	f7ff ffd4 	bl	8002330 <I2C_Write_Byte>

    command(0xa8);//--set multiplex ratio
 8002388:	2100      	movs	r1, #0
 800238a:	20a8      	movs	r0, #168	; 0xa8
 800238c:	f7ff ffd0 	bl	8002330 <I2C_Write_Byte>
    command(0x27);//--1/40 duty
 8002390:	2100      	movs	r1, #0
 8002392:	2027      	movs	r0, #39	; 0x27
 8002394:	f7ff ffcc 	bl	8002330 <I2C_Write_Byte>

    command(0xd3);//-set display offset
 8002398:	2100      	movs	r1, #0
 800239a:	20d3      	movs	r0, #211	; 0xd3
 800239c:	f7ff ffc8 	bl	8002330 <I2C_Write_Byte>
    command(0x00);//-not offset
 80023a0:	2100      	movs	r1, #0
 80023a2:	2000      	movs	r0, #0
 80023a4:	f7ff ffc4 	bl	8002330 <I2C_Write_Byte>

    command(0xad);//--Internal IREF Setting
 80023a8:	2100      	movs	r1, #0
 80023aa:	20ad      	movs	r0, #173	; 0xad
 80023ac:	f7ff ffc0 	bl	8002330 <I2C_Write_Byte>
    command(0x30);//--
 80023b0:	2100      	movs	r1, #0
 80023b2:	2030      	movs	r0, #48	; 0x30
 80023b4:	f7ff ffbc 	bl	8002330 <I2C_Write_Byte>

    command(0x8d);//--set Charge Pump enable/disable
 80023b8:	2100      	movs	r1, #0
 80023ba:	208d      	movs	r0, #141	; 0x8d
 80023bc:	f7ff ffb8 	bl	8002330 <I2C_Write_Byte>
    command(0x14);//--set(0x10) disable
 80023c0:	2100      	movs	r1, #0
 80023c2:	2014      	movs	r0, #20
 80023c4:	f7ff ffb4 	bl	8002330 <I2C_Write_Byte>

    command(0x40);//--set start line address
 80023c8:	2100      	movs	r1, #0
 80023ca:	2040      	movs	r0, #64	; 0x40
 80023cc:	f7ff ffb0 	bl	8002330 <I2C_Write_Byte>

    command(0xa6);//--set normal display
 80023d0:	2100      	movs	r1, #0
 80023d2:	20a6      	movs	r0, #166	; 0xa6
 80023d4:	f7ff ffac 	bl	8002330 <I2C_Write_Byte>

    command(0xa4);//Disable Entire Display On
 80023d8:	2100      	movs	r1, #0
 80023da:	20a4      	movs	r0, #164	; 0xa4
 80023dc:	f7ff ffa8 	bl	8002330 <I2C_Write_Byte>

    command(0xa1);//--set segment re-map 128 to 0
 80023e0:	2100      	movs	r1, #0
 80023e2:	20a1      	movs	r0, #161	; 0xa1
 80023e4:	f7ff ffa4 	bl	8002330 <I2C_Write_Byte>

    command(0xC8);//--Set COM Output Scan Direction 64 to 0
 80023e8:	2100      	movs	r1, #0
 80023ea:	20c8      	movs	r0, #200	; 0xc8
 80023ec:	f7ff ffa0 	bl	8002330 <I2C_Write_Byte>

    command(0xda);//--set com pins hardware configuration
 80023f0:	2100      	movs	r1, #0
 80023f2:	20da      	movs	r0, #218	; 0xda
 80023f4:	f7ff ff9c 	bl	8002330 <I2C_Write_Byte>
    command(0x12);
 80023f8:	2100      	movs	r1, #0
 80023fa:	2012      	movs	r0, #18
 80023fc:	f7ff ff98 	bl	8002330 <I2C_Write_Byte>

    command(0x81);//--set contrast control register
 8002400:	2100      	movs	r1, #0
 8002402:	2081      	movs	r0, #129	; 0x81
 8002404:	f7ff ff94 	bl	8002330 <I2C_Write_Byte>
    command(0xaf);
 8002408:	2100      	movs	r1, #0
 800240a:	20af      	movs	r0, #175	; 0xaf
 800240c:	f7ff ff90 	bl	8002330 <I2C_Write_Byte>

    command(0xd9);//--set pre-charge period
 8002410:	2100      	movs	r1, #0
 8002412:	20d9      	movs	r0, #217	; 0xd9
 8002414:	f7ff ff8c 	bl	8002330 <I2C_Write_Byte>
    command(0x22);
 8002418:	2100      	movs	r1, #0
 800241a:	2022      	movs	r0, #34	; 0x22
 800241c:	f7ff ff88 	bl	8002330 <I2C_Write_Byte>

    command(0xdb);//--set vcomh
 8002420:	2100      	movs	r1, #0
 8002422:	20db      	movs	r0, #219	; 0xdb
 8002424:	f7ff ff84 	bl	8002330 <I2C_Write_Byte>
    command(0x20);
 8002428:	2100      	movs	r1, #0
 800242a:	2020      	movs	r0, #32
 800242c:	f7ff ff80 	bl	8002330 <I2C_Write_Byte>

    command(0xaf);//--turn on oled panel
 8002430:	2100      	movs	r1, #0
 8002432:	20af      	movs	r0, #175	; 0xaf
 8002434:	f7ff ff7c 	bl	8002330 <I2C_Write_Byte>

}
 8002438:	bf00      	nop
 800243a:	bd80      	pop	{r7, pc}

0800243c <er_oled_clear>:

void er_oled_clear(uint8_t* buffer)
{
 800243c:	b480      	push	{r7}
 800243e:	b085      	sub	sp, #20
 8002440:	af00      	add	r7, sp, #0
 8002442:	6078      	str	r0, [r7, #4]
	int i;
	for(i = 0;i < WIDTH * HEIGHT / 8;i++)
 8002444:	2300      	movs	r3, #0
 8002446:	60fb      	str	r3, [r7, #12]
 8002448:	e007      	b.n	800245a <er_oled_clear+0x1e>
	{
		buffer[i] = 0;
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	687a      	ldr	r2, [r7, #4]
 800244e:	4413      	add	r3, r2
 8002450:	2200      	movs	r2, #0
 8002452:	701a      	strb	r2, [r3, #0]
	for(i = 0;i < WIDTH * HEIGHT / 8;i++)
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	3301      	adds	r3, #1
 8002458:	60fb      	str	r3, [r7, #12]
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	f5b3 7fb4 	cmp.w	r3, #360	; 0x168
 8002460:	dbf3      	blt.n	800244a <er_oled_clear+0xe>
	}
}
 8002462:	bf00      	nop
 8002464:	3714      	adds	r7, #20
 8002466:	46bd      	mov	sp, r7
 8002468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246c:	4770      	bx	lr

0800246e <er_oled_clear_bottom_third>:

void er_oled_clear_bottom_third(uint8_t* buffer)
{
 800246e:	b480      	push	{r7}
 8002470:	b085      	sub	sp, #20
 8002472:	af00      	add	r7, sp, #0
 8002474:	6078      	str	r0, [r7, #4]
	int i;
	for(i = 2 * WIDTH * HEIGHT / 24 + 1;i < WIDTH * HEIGHT / 8;i++)
 8002476:	23f1      	movs	r3, #241	; 0xf1
 8002478:	60fb      	str	r3, [r7, #12]
 800247a:	e007      	b.n	800248c <er_oled_clear_bottom_third+0x1e>
	{
		buffer[i] = 0;
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	687a      	ldr	r2, [r7, #4]
 8002480:	4413      	add	r3, r2
 8002482:	2200      	movs	r2, #0
 8002484:	701a      	strb	r2, [r3, #0]
	for(i = 2 * WIDTH * HEIGHT / 24 + 1;i < WIDTH * HEIGHT / 8;i++)
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	3301      	adds	r3, #1
 800248a:	60fb      	str	r3, [r7, #12]
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	f5b3 7fb4 	cmp.w	r3, #360	; 0x168
 8002492:	dbf3      	blt.n	800247c <er_oled_clear_bottom_third+0xe>
	}
}
 8002494:	bf00      	nop
 8002496:	3714      	adds	r7, #20
 8002498:	46bd      	mov	sp, r7
 800249a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249e:	4770      	bx	lr

080024a0 <er_oled_clear_bottom_half>:

void er_oled_clear_bottom_half(uint8_t* buffer)
{
 80024a0:	b480      	push	{r7}
 80024a2:	b085      	sub	sp, #20
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	6078      	str	r0, [r7, #4]
	int i;
	for(i = WIDTH * HEIGHT / 16 + 1;i < WIDTH * HEIGHT / 8;i++)
 80024a8:	23b5      	movs	r3, #181	; 0xb5
 80024aa:	60fb      	str	r3, [r7, #12]
 80024ac:	e007      	b.n	80024be <er_oled_clear_bottom_half+0x1e>
	{
		buffer[i] = 0;
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	687a      	ldr	r2, [r7, #4]
 80024b2:	4413      	add	r3, r2
 80024b4:	2200      	movs	r2, #0
 80024b6:	701a      	strb	r2, [r3, #0]
	for(i = WIDTH * HEIGHT / 16 + 1;i < WIDTH * HEIGHT / 8;i++)
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	3301      	adds	r3, #1
 80024bc:	60fb      	str	r3, [r7, #12]
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	f5b3 7fb4 	cmp.w	r3, #360	; 0x168
 80024c4:	dbf3      	blt.n	80024ae <er_oled_clear_bottom_half+0xe>
	}
}
 80024c6:	bf00      	nop
 80024c8:	3714      	adds	r7, #20
 80024ca:	46bd      	mov	sp, r7
 80024cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d0:	4770      	bx	lr

080024d2 <er_oled_pixel>:

void er_oled_pixel(int x, int y, char color, uint8_t* buffer)
{
 80024d2:	b480      	push	{r7}
 80024d4:	b085      	sub	sp, #20
 80024d6:	af00      	add	r7, sp, #0
 80024d8:	60f8      	str	r0, [r7, #12]
 80024da:	60b9      	str	r1, [r7, #8]
 80024dc:	603b      	str	r3, [r7, #0]
 80024de:	4613      	mov	r3, r2
 80024e0:	71fb      	strb	r3, [r7, #7]
    if(x > WIDTH || y > HEIGHT)return ;
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	2b48      	cmp	r3, #72	; 0x48
 80024e6:	dc61      	bgt.n	80025ac <er_oled_pixel+0xda>
 80024e8:	68bb      	ldr	r3, [r7, #8]
 80024ea:	2b28      	cmp	r3, #40	; 0x28
 80024ec:	dc5e      	bgt.n	80025ac <er_oled_pixel+0xda>
    if(color)
 80024ee:	79fb      	ldrb	r3, [r7, #7]
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d02c      	beq.n	800254e <er_oled_pixel+0x7c>
        buffer[x+(y/8)*WIDTH] |= 1<<(y%8);
 80024f4:	68bb      	ldr	r3, [r7, #8]
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	da00      	bge.n	80024fc <er_oled_pixel+0x2a>
 80024fa:	3307      	adds	r3, #7
 80024fc:	10db      	asrs	r3, r3, #3
 80024fe:	461a      	mov	r2, r3
 8002500:	4613      	mov	r3, r2
 8002502:	00db      	lsls	r3, r3, #3
 8002504:	4413      	add	r3, r2
 8002506:	00db      	lsls	r3, r3, #3
 8002508:	4619      	mov	r1, r3
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	440b      	add	r3, r1
 800250e:	4619      	mov	r1, r3
 8002510:	683b      	ldr	r3, [r7, #0]
 8002512:	440b      	add	r3, r1
 8002514:	781b      	ldrb	r3, [r3, #0]
 8002516:	b259      	sxtb	r1, r3
 8002518:	68bb      	ldr	r3, [r7, #8]
 800251a:	4258      	negs	r0, r3
 800251c:	f003 0307 	and.w	r3, r3, #7
 8002520:	f000 0007 	and.w	r0, r0, #7
 8002524:	bf58      	it	pl
 8002526:	4243      	negpl	r3, r0
 8002528:	2001      	movs	r0, #1
 800252a:	fa00 f303 	lsl.w	r3, r0, r3
 800252e:	b25b      	sxtb	r3, r3
 8002530:	430b      	orrs	r3, r1
 8002532:	b259      	sxtb	r1, r3
 8002534:	4613      	mov	r3, r2
 8002536:	00db      	lsls	r3, r3, #3
 8002538:	4413      	add	r3, r2
 800253a:	00db      	lsls	r3, r3, #3
 800253c:	461a      	mov	r2, r3
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	4413      	add	r3, r2
 8002542:	461a      	mov	r2, r3
 8002544:	683b      	ldr	r3, [r7, #0]
 8002546:	4413      	add	r3, r2
 8002548:	b2ca      	uxtb	r2, r1
 800254a:	701a      	strb	r2, [r3, #0]
 800254c:	e02f      	b.n	80025ae <er_oled_pixel+0xdc>
    else
        buffer[x+(y/8)*WIDTH] &= ~(1<<(y%8));
 800254e:	68bb      	ldr	r3, [r7, #8]
 8002550:	2b00      	cmp	r3, #0
 8002552:	da00      	bge.n	8002556 <er_oled_pixel+0x84>
 8002554:	3307      	adds	r3, #7
 8002556:	10db      	asrs	r3, r3, #3
 8002558:	461a      	mov	r2, r3
 800255a:	4613      	mov	r3, r2
 800255c:	00db      	lsls	r3, r3, #3
 800255e:	4413      	add	r3, r2
 8002560:	00db      	lsls	r3, r3, #3
 8002562:	4619      	mov	r1, r3
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	440b      	add	r3, r1
 8002568:	4619      	mov	r1, r3
 800256a:	683b      	ldr	r3, [r7, #0]
 800256c:	440b      	add	r3, r1
 800256e:	781b      	ldrb	r3, [r3, #0]
 8002570:	b259      	sxtb	r1, r3
 8002572:	68bb      	ldr	r3, [r7, #8]
 8002574:	4258      	negs	r0, r3
 8002576:	f003 0307 	and.w	r3, r3, #7
 800257a:	f000 0007 	and.w	r0, r0, #7
 800257e:	bf58      	it	pl
 8002580:	4243      	negpl	r3, r0
 8002582:	2001      	movs	r0, #1
 8002584:	fa00 f303 	lsl.w	r3, r0, r3
 8002588:	b25b      	sxtb	r3, r3
 800258a:	43db      	mvns	r3, r3
 800258c:	b25b      	sxtb	r3, r3
 800258e:	400b      	ands	r3, r1
 8002590:	b259      	sxtb	r1, r3
 8002592:	4613      	mov	r3, r2
 8002594:	00db      	lsls	r3, r3, #3
 8002596:	4413      	add	r3, r2
 8002598:	00db      	lsls	r3, r3, #3
 800259a:	461a      	mov	r2, r3
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	4413      	add	r3, r2
 80025a0:	461a      	mov	r2, r3
 80025a2:	683b      	ldr	r3, [r7, #0]
 80025a4:	4413      	add	r3, r2
 80025a6:	b2ca      	uxtb	r2, r1
 80025a8:	701a      	strb	r2, [r3, #0]
 80025aa:	e000      	b.n	80025ae <er_oled_pixel+0xdc>
    if(x > WIDTH || y > HEIGHT)return ;
 80025ac:	bf00      	nop
}
 80025ae:	3714      	adds	r7, #20
 80025b0:	46bd      	mov	sp, r7
 80025b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b6:	4770      	bx	lr

080025b8 <er_oled_char>:
		}
	}
}

void er_oled_char(unsigned char x, unsigned char y, char acsii, char size, char mode, uint8_t* buffer)
{
 80025b8:	b590      	push	{r4, r7, lr}
 80025ba:	b087      	sub	sp, #28
 80025bc:	af00      	add	r7, sp, #0
 80025be:	4604      	mov	r4, r0
 80025c0:	4608      	mov	r0, r1
 80025c2:	4611      	mov	r1, r2
 80025c4:	461a      	mov	r2, r3
 80025c6:	4623      	mov	r3, r4
 80025c8:	71fb      	strb	r3, [r7, #7]
 80025ca:	4603      	mov	r3, r0
 80025cc:	71bb      	strb	r3, [r7, #6]
 80025ce:	460b      	mov	r3, r1
 80025d0:	717b      	strb	r3, [r7, #5]
 80025d2:	4613      	mov	r3, r2
 80025d4:	713b      	strb	r3, [r7, #4]
    unsigned char i, j, y0=y;
 80025d6:	79bb      	ldrb	r3, [r7, #6]
 80025d8:	743b      	strb	r3, [r7, #16]
    uint16_t temp;
    uint16_t position = 0x80;
 80025da:	2380      	movs	r3, #128	; 0x80
 80025dc:	827b      	strh	r3, [r7, #18]
    uint8_t maxindex = 8;
 80025de:	2308      	movs	r3, #8
 80025e0:	747b      	strb	r3, [r7, #17]
    unsigned char ch = acsii - ' ';
 80025e2:	797b      	ldrb	r3, [r7, #5]
 80025e4:	3b20      	subs	r3, #32
 80025e6:	73fb      	strb	r3, [r7, #15]

    if (size == 32){
 80025e8:	793b      	ldrb	r3, [r7, #4]
 80025ea:	2b20      	cmp	r3, #32
 80025ec:	d104      	bne.n	80025f8 <er_oled_char+0x40>
    	position = 0x8000;
 80025ee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80025f2:	827b      	strh	r3, [r7, #18]
    	maxindex =16;
 80025f4:	2310      	movs	r3, #16
 80025f6:	747b      	strb	r3, [r7, #17]
    }

    for(i = 0;i<size;i++) {
 80025f8:	2300      	movs	r3, #0
 80025fa:	75fb      	strb	r3, [r7, #23]
 80025fc:	e0b1      	b.n	8002762 <er_oled_char+0x1aa>
        if(size == 12)
 80025fe:	793b      	ldrb	r3, [r7, #4]
 8002600:	2b0c      	cmp	r3, #12
 8002602:	d11d      	bne.n	8002640 <er_oled_char+0x88>
        {
            if(mode)temp = Font1206[ch][i];
 8002604:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8002608:	2b00      	cmp	r3, #0
 800260a:	d00b      	beq.n	8002624 <er_oled_char+0x6c>
 800260c:	7bfa      	ldrb	r2, [r7, #15]
 800260e:	7df9      	ldrb	r1, [r7, #23]
 8002610:	4858      	ldr	r0, [pc, #352]	; (8002774 <er_oled_char+0x1bc>)
 8002612:	4613      	mov	r3, r2
 8002614:	005b      	lsls	r3, r3, #1
 8002616:	4413      	add	r3, r2
 8002618:	009b      	lsls	r3, r3, #2
 800261a:	4403      	add	r3, r0
 800261c:	440b      	add	r3, r1
 800261e:	781b      	ldrb	r3, [r3, #0]
 8002620:	82bb      	strh	r3, [r7, #20]
 8002622:	e06c      	b.n	80026fe <er_oled_char+0x146>
            else temp = ~Font1206[ch][i];
 8002624:	7bfa      	ldrb	r2, [r7, #15]
 8002626:	7df9      	ldrb	r1, [r7, #23]
 8002628:	4852      	ldr	r0, [pc, #328]	; (8002774 <er_oled_char+0x1bc>)
 800262a:	4613      	mov	r3, r2
 800262c:	005b      	lsls	r3, r3, #1
 800262e:	4413      	add	r3, r2
 8002630:	009b      	lsls	r3, r3, #2
 8002632:	4403      	add	r3, r0
 8002634:	440b      	add	r3, r1
 8002636:	781b      	ldrb	r3, [r3, #0]
 8002638:	b29b      	uxth	r3, r3
 800263a:	43db      	mvns	r3, r3
 800263c:	82bb      	strh	r3, [r7, #20]
 800263e:	e05e      	b.n	80026fe <er_oled_char+0x146>
        }
        else if(size == 16)
 8002640:	793b      	ldrb	r3, [r7, #4]
 8002642:	2b10      	cmp	r3, #16
 8002644:	d117      	bne.n	8002676 <er_oled_char+0xbe>
        {
            if(mode)temp = Font1608[ch][i];
 8002646:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800264a:	2b00      	cmp	r3, #0
 800264c:	d008      	beq.n	8002660 <er_oled_char+0xa8>
 800264e:	7bfa      	ldrb	r2, [r7, #15]
 8002650:	7dfb      	ldrb	r3, [r7, #23]
 8002652:	4949      	ldr	r1, [pc, #292]	; (8002778 <er_oled_char+0x1c0>)
 8002654:	0112      	lsls	r2, r2, #4
 8002656:	440a      	add	r2, r1
 8002658:	4413      	add	r3, r2
 800265a:	781b      	ldrb	r3, [r3, #0]
 800265c:	82bb      	strh	r3, [r7, #20]
 800265e:	e04e      	b.n	80026fe <er_oled_char+0x146>
            else temp = ~Font1608[ch][i];
 8002660:	7bfa      	ldrb	r2, [r7, #15]
 8002662:	7dfb      	ldrb	r3, [r7, #23]
 8002664:	4944      	ldr	r1, [pc, #272]	; (8002778 <er_oled_char+0x1c0>)
 8002666:	0112      	lsls	r2, r2, #4
 8002668:	440a      	add	r2, r1
 800266a:	4413      	add	r3, r2
 800266c:	781b      	ldrb	r3, [r3, #0]
 800266e:	b29b      	uxth	r3, r3
 8002670:	43db      	mvns	r3, r3
 8002672:	82bb      	strh	r3, [r7, #20]
 8002674:	e043      	b.n	80026fe <er_oled_char+0x146>
        }
        else {
            if(mode) {
 8002676:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800267a:	2b00      	cmp	r3, #0
 800267c:	d01c      	beq.n	80026b8 <er_oled_char+0x100>
            	temp = Font3216[ch - 16][2*i] << 8;
 800267e:	7bfb      	ldrb	r3, [r7, #15]
 8002680:	f1a3 0210 	sub.w	r2, r3, #16
 8002684:	7dfb      	ldrb	r3, [r7, #23]
 8002686:	005b      	lsls	r3, r3, #1
 8002688:	493c      	ldr	r1, [pc, #240]	; (800277c <er_oled_char+0x1c4>)
 800268a:	0192      	lsls	r2, r2, #6
 800268c:	440a      	add	r2, r1
 800268e:	4413      	add	r3, r2
 8002690:	781b      	ldrb	r3, [r3, #0]
 8002692:	b29b      	uxth	r3, r3
 8002694:	021b      	lsls	r3, r3, #8
 8002696:	82bb      	strh	r3, [r7, #20]
                temp |= Font3216[ch-16][2*i + 1];
 8002698:	7bfb      	ldrb	r3, [r7, #15]
 800269a:	f1a3 0210 	sub.w	r2, r3, #16
 800269e:	7dfb      	ldrb	r3, [r7, #23]
 80026a0:	005b      	lsls	r3, r3, #1
 80026a2:	3301      	adds	r3, #1
 80026a4:	4935      	ldr	r1, [pc, #212]	; (800277c <er_oled_char+0x1c4>)
 80026a6:	0192      	lsls	r2, r2, #6
 80026a8:	440a      	add	r2, r1
 80026aa:	4413      	add	r3, r2
 80026ac:	781b      	ldrb	r3, [r3, #0]
 80026ae:	b29a      	uxth	r2, r3
 80026b0:	8abb      	ldrh	r3, [r7, #20]
 80026b2:	4313      	orrs	r3, r2
 80026b4:	82bb      	strh	r3, [r7, #20]
 80026b6:	e022      	b.n	80026fe <er_oled_char+0x146>
            }
            else {
            	temp = ~Font3216[ch - 16][2*i] << 8;
 80026b8:	7bfb      	ldrb	r3, [r7, #15]
 80026ba:	f1a3 0210 	sub.w	r2, r3, #16
 80026be:	7dfb      	ldrb	r3, [r7, #23]
 80026c0:	005b      	lsls	r3, r3, #1
 80026c2:	492e      	ldr	r1, [pc, #184]	; (800277c <er_oled_char+0x1c4>)
 80026c4:	0192      	lsls	r2, r2, #6
 80026c6:	440a      	add	r2, r1
 80026c8:	4413      	add	r3, r2
 80026ca:	781b      	ldrb	r3, [r3, #0]
 80026cc:	b29b      	uxth	r3, r3
 80026ce:	43db      	mvns	r3, r3
 80026d0:	b29b      	uxth	r3, r3
 80026d2:	021b      	lsls	r3, r3, #8
 80026d4:	82bb      	strh	r3, [r7, #20]
            	temp |= ~Font3216[ch - 16][2*i + 1];
 80026d6:	7bfb      	ldrb	r3, [r7, #15]
 80026d8:	f1a3 0210 	sub.w	r2, r3, #16
 80026dc:	7dfb      	ldrb	r3, [r7, #23]
 80026de:	005b      	lsls	r3, r3, #1
 80026e0:	3301      	adds	r3, #1
 80026e2:	4926      	ldr	r1, [pc, #152]	; (800277c <er_oled_char+0x1c4>)
 80026e4:	0192      	lsls	r2, r2, #6
 80026e6:	440a      	add	r2, r1
 80026e8:	4413      	add	r3, r2
 80026ea:	781b      	ldrb	r3, [r3, #0]
 80026ec:	b29b      	uxth	r3, r3
 80026ee:	43db      	mvns	r3, r3
 80026f0:	b29b      	uxth	r3, r3
 80026f2:	b21a      	sxth	r2, r3
 80026f4:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80026f8:	4313      	orrs	r3, r2
 80026fa:	b21b      	sxth	r3, r3
 80026fc:	82bb      	strh	r3, [r7, #20]
            }
        }
        for(j =0;j<maxindex;j++)
 80026fe:	2300      	movs	r3, #0
 8002700:	75bb      	strb	r3, [r7, #22]
 8002702:	e027      	b.n	8002754 <er_oled_char+0x19c>
        {
            if(temp & position) er_oled_pixel(x, y, 1, buffer);
 8002704:	8aba      	ldrh	r2, [r7, #20]
 8002706:	8a7b      	ldrh	r3, [r7, #18]
 8002708:	4013      	ands	r3, r2
 800270a:	b29b      	uxth	r3, r3
 800270c:	2b00      	cmp	r3, #0
 800270e:	d006      	beq.n	800271e <er_oled_char+0x166>
 8002710:	79f8      	ldrb	r0, [r7, #7]
 8002712:	79b9      	ldrb	r1, [r7, #6]
 8002714:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002716:	2201      	movs	r2, #1
 8002718:	f7ff fedb 	bl	80024d2 <er_oled_pixel>
 800271c:	e005      	b.n	800272a <er_oled_char+0x172>
            else er_oled_pixel(x, y, 0, buffer);
 800271e:	79f8      	ldrb	r0, [r7, #7]
 8002720:	79b9      	ldrb	r1, [r7, #6]
 8002722:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002724:	2200      	movs	r2, #0
 8002726:	f7ff fed4 	bl	80024d2 <er_oled_pixel>
            temp <<= 1;
 800272a:	8abb      	ldrh	r3, [r7, #20]
 800272c:	005b      	lsls	r3, r3, #1
 800272e:	82bb      	strh	r3, [r7, #20]
            y++;
 8002730:	79bb      	ldrb	r3, [r7, #6]
 8002732:	3301      	adds	r3, #1
 8002734:	71bb      	strb	r3, [r7, #6]
            if((y-y0) == size)
 8002736:	79ba      	ldrb	r2, [r7, #6]
 8002738:	7c3b      	ldrb	r3, [r7, #16]
 800273a:	1ad2      	subs	r2, r2, r3
 800273c:	793b      	ldrb	r3, [r7, #4]
 800273e:	429a      	cmp	r2, r3
 8002740:	d105      	bne.n	800274e <er_oled_char+0x196>
            {
                y = y0;
 8002742:	7c3b      	ldrb	r3, [r7, #16]
 8002744:	71bb      	strb	r3, [r7, #6]
                x++;
 8002746:	79fb      	ldrb	r3, [r7, #7]
 8002748:	3301      	adds	r3, #1
 800274a:	71fb      	strb	r3, [r7, #7]
                break;
 800274c:	e006      	b.n	800275c <er_oled_char+0x1a4>
        for(j =0;j<maxindex;j++)
 800274e:	7dbb      	ldrb	r3, [r7, #22]
 8002750:	3301      	adds	r3, #1
 8002752:	75bb      	strb	r3, [r7, #22]
 8002754:	7dba      	ldrb	r2, [r7, #22]
 8002756:	7c7b      	ldrb	r3, [r7, #17]
 8002758:	429a      	cmp	r2, r3
 800275a:	d3d3      	bcc.n	8002704 <er_oled_char+0x14c>
    for(i = 0;i<size;i++) {
 800275c:	7dfb      	ldrb	r3, [r7, #23]
 800275e:	3301      	adds	r3, #1
 8002760:	75fb      	strb	r3, [r7, #23]
 8002762:	7dfa      	ldrb	r2, [r7, #23]
 8002764:	793b      	ldrb	r3, [r7, #4]
 8002766:	429a      	cmp	r2, r3
 8002768:	f4ff af49 	bcc.w	80025fe <er_oled_char+0x46>
            }
        }
    }
}
 800276c:	bf00      	nop
 800276e:	371c      	adds	r7, #28
 8002770:	46bd      	mov	sp, r7
 8002772:	bd90      	pop	{r4, r7, pc}
 8002774:	08018c00 	.word	0x08018c00
 8002778:	08019074 	.word	0x08019074
 800277c:	08019664 	.word	0x08019664

08002780 <er_oled_string>:

void er_oled_string(uint8_t x, uint8_t y, const char *pString, uint8_t Size, uint8_t Mode, uint8_t* buffer)
{
 8002780:	b590      	push	{r4, r7, lr}
 8002782:	b085      	sub	sp, #20
 8002784:	af02      	add	r7, sp, #8
 8002786:	603a      	str	r2, [r7, #0]
 8002788:	461a      	mov	r2, r3
 800278a:	4603      	mov	r3, r0
 800278c:	71fb      	strb	r3, [r7, #7]
 800278e:	460b      	mov	r3, r1
 8002790:	71bb      	strb	r3, [r7, #6]
 8002792:	4613      	mov	r3, r2
 8002794:	717b      	strb	r3, [r7, #5]
    while (*pString != '\0') {
 8002796:	e02c      	b.n	80027f2 <er_oled_string+0x72>
        if (x > (WIDTH - Size / 2)) {
 8002798:	79fa      	ldrb	r2, [r7, #7]
 800279a:	797b      	ldrb	r3, [r7, #5]
 800279c:	085b      	lsrs	r3, r3, #1
 800279e:	b2db      	uxtb	r3, r3
 80027a0:	f1c3 0348 	rsb	r3, r3, #72	; 0x48
 80027a4:	429a      	cmp	r2, r3
 80027a6:	dd0f      	ble.n	80027c8 <er_oled_string+0x48>
            x = 0;
 80027a8:	2300      	movs	r3, #0
 80027aa:	71fb      	strb	r3, [r7, #7]
            y += Size;
 80027ac:	79ba      	ldrb	r2, [r7, #6]
 80027ae:	797b      	ldrb	r3, [r7, #5]
 80027b0:	4413      	add	r3, r2
 80027b2:	71bb      	strb	r3, [r7, #6]
            if (y > (HEIGHT - Size)) {
 80027b4:	79ba      	ldrb	r2, [r7, #6]
 80027b6:	797b      	ldrb	r3, [r7, #5]
 80027b8:	f1c3 0328 	rsb	r3, r3, #40	; 0x28
 80027bc:	429a      	cmp	r2, r3
 80027be:	dd03      	ble.n	80027c8 <er_oled_string+0x48>
                y = x = 0;
 80027c0:	2300      	movs	r3, #0
 80027c2:	71fb      	strb	r3, [r7, #7]
 80027c4:	79fb      	ldrb	r3, [r7, #7]
 80027c6:	71bb      	strb	r3, [r7, #6]
            }
        }

        er_oled_char(x, y, *pString, Size, Mode, buffer);
 80027c8:	683b      	ldr	r3, [r7, #0]
 80027ca:	781a      	ldrb	r2, [r3, #0]
 80027cc:	797c      	ldrb	r4, [r7, #5]
 80027ce:	79b9      	ldrb	r1, [r7, #6]
 80027d0:	79f8      	ldrb	r0, [r7, #7]
 80027d2:	69fb      	ldr	r3, [r7, #28]
 80027d4:	9301      	str	r3, [sp, #4]
 80027d6:	7e3b      	ldrb	r3, [r7, #24]
 80027d8:	9300      	str	r3, [sp, #0]
 80027da:	4623      	mov	r3, r4
 80027dc:	f7ff feec 	bl	80025b8 <er_oled_char>
        x += Size / 2;
 80027e0:	797b      	ldrb	r3, [r7, #5]
 80027e2:	085b      	lsrs	r3, r3, #1
 80027e4:	b2da      	uxtb	r2, r3
 80027e6:	79fb      	ldrb	r3, [r7, #7]
 80027e8:	4413      	add	r3, r2
 80027ea:	71fb      	strb	r3, [r7, #7]
        pString++;
 80027ec:	683b      	ldr	r3, [r7, #0]
 80027ee:	3301      	adds	r3, #1
 80027f0:	603b      	str	r3, [r7, #0]
    while (*pString != '\0') {
 80027f2:	683b      	ldr	r3, [r7, #0]
 80027f4:	781b      	ldrb	r3, [r3, #0]
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d1ce      	bne.n	8002798 <er_oled_string+0x18>
    }
}
 80027fa:	bf00      	nop
 80027fc:	370c      	adds	r7, #12
 80027fe:	46bd      	mov	sp, r7
 8002800:	bd90      	pop	{r4, r7, pc}

08002802 <er_oled_display>:
		}
	}
}

void er_oled_display(uint8_t* pBuf)
{    uint8_t page,i;
 8002802:	b580      	push	{r7, lr}
 8002804:	b084      	sub	sp, #16
 8002806:	af00      	add	r7, sp, #0
 8002808:	6078      	str	r0, [r7, #4]
    for (page = 0; page < PAGES; page++) {
 800280a:	2300      	movs	r3, #0
 800280c:	73fb      	strb	r3, [r7, #15]
 800280e:	e029      	b.n	8002864 <er_oled_display+0x62>
        command(0xB0 + page);/* set page address */
 8002810:	7bfb      	ldrb	r3, [r7, #15]
 8002812:	3b50      	subs	r3, #80	; 0x50
 8002814:	b2db      	uxtb	r3, r3
 8002816:	2100      	movs	r1, #0
 8002818:	4618      	mov	r0, r3
 800281a:	f7ff fd89 	bl	8002330 <I2C_Write_Byte>
        command(0x0c);   /* set low column address */
 800281e:	2100      	movs	r1, #0
 8002820:	200c      	movs	r0, #12
 8002822:	f7ff fd85 	bl	8002330 <I2C_Write_Byte>
        command(0x11);  /* set high column address */
 8002826:	2100      	movs	r1, #0
 8002828:	2011      	movs	r0, #17
 800282a:	f7ff fd81 	bl	8002330 <I2C_Write_Byte>
        for(i = 0; i< WIDTH; i++ ) {
 800282e:	2300      	movs	r3, #0
 8002830:	73bb      	strb	r3, [r7, #14]
 8002832:	e011      	b.n	8002858 <er_oled_display+0x56>
          data(pBuf[i+page*WIDTH]);// write data one
 8002834:	7bb9      	ldrb	r1, [r7, #14]
 8002836:	7bfa      	ldrb	r2, [r7, #15]
 8002838:	4613      	mov	r3, r2
 800283a:	00db      	lsls	r3, r3, #3
 800283c:	4413      	add	r3, r2
 800283e:	00db      	lsls	r3, r3, #3
 8002840:	440b      	add	r3, r1
 8002842:	461a      	mov	r2, r3
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	4413      	add	r3, r2
 8002848:	781b      	ldrb	r3, [r3, #0]
 800284a:	2140      	movs	r1, #64	; 0x40
 800284c:	4618      	mov	r0, r3
 800284e:	f7ff fd6f 	bl	8002330 <I2C_Write_Byte>
        for(i = 0; i< WIDTH; i++ ) {
 8002852:	7bbb      	ldrb	r3, [r7, #14]
 8002854:	3301      	adds	r3, #1
 8002856:	73bb      	strb	r3, [r7, #14]
 8002858:	7bbb      	ldrb	r3, [r7, #14]
 800285a:	2b47      	cmp	r3, #71	; 0x47
 800285c:	d9ea      	bls.n	8002834 <er_oled_display+0x32>
    for (page = 0; page < PAGES; page++) {
 800285e:	7bfb      	ldrb	r3, [r7, #15]
 8002860:	3301      	adds	r3, #1
 8002862:	73fb      	strb	r3, [r7, #15]
 8002864:	7bfb      	ldrb	r3, [r7, #15]
 8002866:	2b04      	cmp	r3, #4
 8002868:	d9d2      	bls.n	8002810 <er_oled_display+0xe>
        }
    }
}
 800286a:	bf00      	nop
 800286c:	3710      	adds	r7, #16
 800286e:	46bd      	mov	sp, r7
 8002870:	bd80      	pop	{r7, pc}

08002872 <er_oled_time>:

void er_oled_time(const char *pString)
{
 8002872:	b580      	push	{r7, lr}
 8002874:	b0de      	sub	sp, #376	; 0x178
 8002876:	af02      	add	r7, sp, #8
 8002878:	1d3b      	adds	r3, r7, #4
 800287a:	6018      	str	r0, [r3, #0]
	uint8_t oled_buf[WIDTH * HEIGHT / 8];

	er_oled_clear(oled_buf);
 800287c:	f107 0308 	add.w	r3, r7, #8
 8002880:	4618      	mov	r0, r3
 8002882:	f7ff fddb 	bl	800243c <er_oled_clear>
    er_oled_char( 0, 4, *pString++,  32, 1, oled_buf);
 8002886:	1d3b      	adds	r3, r7, #4
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	1d3a      	adds	r2, r7, #4
 800288c:	1c59      	adds	r1, r3, #1
 800288e:	6011      	str	r1, [r2, #0]
 8002890:	781a      	ldrb	r2, [r3, #0]
 8002892:	f107 0308 	add.w	r3, r7, #8
 8002896:	9301      	str	r3, [sp, #4]
 8002898:	2301      	movs	r3, #1
 800289a:	9300      	str	r3, [sp, #0]
 800289c:	2320      	movs	r3, #32
 800289e:	2104      	movs	r1, #4
 80028a0:	2000      	movs	r0, #0
 80028a2:	f7ff fe89 	bl	80025b8 <er_oled_char>
    er_oled_char(16, 4, *pString++ , 32, 1, oled_buf);
 80028a6:	1d3b      	adds	r3, r7, #4
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	1d3a      	adds	r2, r7, #4
 80028ac:	1c59      	adds	r1, r3, #1
 80028ae:	6011      	str	r1, [r2, #0]
 80028b0:	781a      	ldrb	r2, [r3, #0]
 80028b2:	f107 0308 	add.w	r3, r7, #8
 80028b6:	9301      	str	r3, [sp, #4]
 80028b8:	2301      	movs	r3, #1
 80028ba:	9300      	str	r3, [sp, #0]
 80028bc:	2320      	movs	r3, #32
 80028be:	2104      	movs	r1, #4
 80028c0:	2010      	movs	r0, #16
 80028c2:	f7ff fe79 	bl	80025b8 <er_oled_char>
    er_oled_char(40, 4, *pString++ , 32, 1, oled_buf);
 80028c6:	1d3b      	adds	r3, r7, #4
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	1d3a      	adds	r2, r7, #4
 80028cc:	1c59      	adds	r1, r3, #1
 80028ce:	6011      	str	r1, [r2, #0]
 80028d0:	781a      	ldrb	r2, [r3, #0]
 80028d2:	f107 0308 	add.w	r3, r7, #8
 80028d6:	9301      	str	r3, [sp, #4]
 80028d8:	2301      	movs	r3, #1
 80028da:	9300      	str	r3, [sp, #0]
 80028dc:	2320      	movs	r3, #32
 80028de:	2104      	movs	r1, #4
 80028e0:	2028      	movs	r0, #40	; 0x28
 80028e2:	f7ff fe69 	bl	80025b8 <er_oled_char>
    er_oled_char(56, 4, *pString   , 32, 1, oled_buf);
 80028e6:	1d3b      	adds	r3, r7, #4
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	781a      	ldrb	r2, [r3, #0]
 80028ec:	f107 0308 	add.w	r3, r7, #8
 80028f0:	9301      	str	r3, [sp, #4]
 80028f2:	2301      	movs	r3, #1
 80028f4:	9300      	str	r3, [sp, #0]
 80028f6:	2320      	movs	r3, #32
 80028f8:	2104      	movs	r1, #4
 80028fa:	2038      	movs	r0, #56	; 0x38
 80028fc:	f7ff fe5c 	bl	80025b8 <er_oled_char>

    er_oled_pixel(36, 12, 1, oled_buf);
 8002900:	f107 0308 	add.w	r3, r7, #8
 8002904:	2201      	movs	r2, #1
 8002906:	210c      	movs	r1, #12
 8002908:	2024      	movs	r0, #36	; 0x24
 800290a:	f7ff fde2 	bl	80024d2 <er_oled_pixel>
	er_oled_pixel(36, 13, 1, oled_buf);
 800290e:	f107 0308 	add.w	r3, r7, #8
 8002912:	2201      	movs	r2, #1
 8002914:	210d      	movs	r1, #13
 8002916:	2024      	movs	r0, #36	; 0x24
 8002918:	f7ff fddb 	bl	80024d2 <er_oled_pixel>
	er_oled_pixel(36, 14, 1, oled_buf);
 800291c:	f107 0308 	add.w	r3, r7, #8
 8002920:	2201      	movs	r2, #1
 8002922:	210e      	movs	r1, #14
 8002924:	2024      	movs	r0, #36	; 0x24
 8002926:	f7ff fdd4 	bl	80024d2 <er_oled_pixel>
	er_oled_pixel(36, 28, 1, oled_buf);
 800292a:	f107 0308 	add.w	r3, r7, #8
 800292e:	2201      	movs	r2, #1
 8002930:	211c      	movs	r1, #28
 8002932:	2024      	movs	r0, #36	; 0x24
 8002934:	f7ff fdcd 	bl	80024d2 <er_oled_pixel>
	er_oled_pixel(36, 27, 1, oled_buf);
 8002938:	f107 0308 	add.w	r3, r7, #8
 800293c:	2201      	movs	r2, #1
 800293e:	211b      	movs	r1, #27
 8002940:	2024      	movs	r0, #36	; 0x24
 8002942:	f7ff fdc6 	bl	80024d2 <er_oled_pixel>
	er_oled_pixel(36, 26, 1, oled_buf);
 8002946:	f107 0308 	add.w	r3, r7, #8
 800294a:	2201      	movs	r2, #1
 800294c:	211a      	movs	r1, #26
 800294e:	2024      	movs	r0, #36	; 0x24
 8002950:	f7ff fdbf 	bl	80024d2 <er_oled_pixel>

	er_oled_display(oled_buf);
 8002954:	f107 0308 	add.w	r3, r7, #8
 8002958:	4618      	mov	r0, r3
 800295a:	f7ff ff52 	bl	8002802 <er_oled_display>
}
 800295e:	bf00      	nop
 8002960:	f507 77b8 	add.w	r7, r7, #368	; 0x170
 8002964:	46bd      	mov	sp, r7
 8002966:	bd80      	pop	{r7, pc}

08002968 <er_oled_time_twothird>:

void er_oled_time_twothird(const char *pString, uint8_t* buffer)
{
 8002968:	b580      	push	{r7, lr}
 800296a:	b084      	sub	sp, #16
 800296c:	af02      	add	r7, sp, #8
 800296e:	6078      	str	r0, [r7, #4]
 8002970:	6039      	str	r1, [r7, #0]

	er_oled_clear_bottom_half(buffer);
 8002972:	6838      	ldr	r0, [r7, #0]
 8002974:	f7ff fd94 	bl	80024a0 <er_oled_clear_bottom_half>

    er_oled_char(16, 20, *pString++,  16, 1, buffer);
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	1c5a      	adds	r2, r3, #1
 800297c:	607a      	str	r2, [r7, #4]
 800297e:	781a      	ldrb	r2, [r3, #0]
 8002980:	683b      	ldr	r3, [r7, #0]
 8002982:	9301      	str	r3, [sp, #4]
 8002984:	2301      	movs	r3, #1
 8002986:	9300      	str	r3, [sp, #0]
 8002988:	2310      	movs	r3, #16
 800298a:	2114      	movs	r1, #20
 800298c:	2010      	movs	r0, #16
 800298e:	f7ff fe13 	bl	80025b8 <er_oled_char>
    er_oled_char(26, 20, *pString++ , 16, 1, buffer);
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	1c5a      	adds	r2, r3, #1
 8002996:	607a      	str	r2, [r7, #4]
 8002998:	781a      	ldrb	r2, [r3, #0]
 800299a:	683b      	ldr	r3, [r7, #0]
 800299c:	9301      	str	r3, [sp, #4]
 800299e:	2301      	movs	r3, #1
 80029a0:	9300      	str	r3, [sp, #0]
 80029a2:	2310      	movs	r3, #16
 80029a4:	2114      	movs	r1, #20
 80029a6:	201a      	movs	r0, #26
 80029a8:	f7ff fe06 	bl	80025b8 <er_oled_char>
    er_oled_char(40, 20, *pString++ , 16, 1, buffer);
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	1c5a      	adds	r2, r3, #1
 80029b0:	607a      	str	r2, [r7, #4]
 80029b2:	781a      	ldrb	r2, [r3, #0]
 80029b4:	683b      	ldr	r3, [r7, #0]
 80029b6:	9301      	str	r3, [sp, #4]
 80029b8:	2301      	movs	r3, #1
 80029ba:	9300      	str	r3, [sp, #0]
 80029bc:	2310      	movs	r3, #16
 80029be:	2114      	movs	r1, #20
 80029c0:	2028      	movs	r0, #40	; 0x28
 80029c2:	f7ff fdf9 	bl	80025b8 <er_oled_char>
    er_oled_char(50, 20, *pString   , 16, 1, buffer);
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	781a      	ldrb	r2, [r3, #0]
 80029ca:	683b      	ldr	r3, [r7, #0]
 80029cc:	9301      	str	r3, [sp, #4]
 80029ce:	2301      	movs	r3, #1
 80029d0:	9300      	str	r3, [sp, #0]
 80029d2:	2310      	movs	r3, #16
 80029d4:	2114      	movs	r1, #20
 80029d6:	2032      	movs	r0, #50	; 0x32
 80029d8:	f7ff fdee 	bl	80025b8 <er_oled_char>

    //er_oled_pixel(36, 23, 1, buffer);
	er_oled_pixel(36, 24, 1, buffer);
 80029dc:	683b      	ldr	r3, [r7, #0]
 80029de:	2201      	movs	r2, #1
 80029e0:	2118      	movs	r1, #24
 80029e2:	2024      	movs	r0, #36	; 0x24
 80029e4:	f7ff fd75 	bl	80024d2 <er_oled_pixel>
	er_oled_pixel(36, 25, 1, buffer);
 80029e8:	683b      	ldr	r3, [r7, #0]
 80029ea:	2201      	movs	r2, #1
 80029ec:	2119      	movs	r1, #25
 80029ee:	2024      	movs	r0, #36	; 0x24
 80029f0:	f7ff fd6f 	bl	80024d2 <er_oled_pixel>
	er_oled_pixel(36, 31, 1, buffer);
 80029f4:	683b      	ldr	r3, [r7, #0]
 80029f6:	2201      	movs	r2, #1
 80029f8:	211f      	movs	r1, #31
 80029fa:	2024      	movs	r0, #36	; 0x24
 80029fc:	f7ff fd69 	bl	80024d2 <er_oled_pixel>
	er_oled_pixel(36, 30, 1, buffer);
 8002a00:	683b      	ldr	r3, [r7, #0]
 8002a02:	2201      	movs	r2, #1
 8002a04:	211e      	movs	r1, #30
 8002a06:	2024      	movs	r0, #36	; 0x24
 8002a08:	f7ff fd63 	bl	80024d2 <er_oled_pixel>
	//er_oled_pixel(36, 33, 1, buffer);

	er_oled_display(buffer);
 8002a0c:	6838      	ldr	r0, [r7, #0]
 8002a0e:	f7ff fef8 	bl	8002802 <er_oled_display>
}
 8002a12:	bf00      	nop
 8002a14:	3708      	adds	r7, #8
 8002a16:	46bd      	mov	sp, r7
 8002a18:	bd80      	pop	{r7, pc}

08002a1a <vPortSuppressTicksAndSleep>:
 *
 * @param: xExpectedIdleTime is given in number of FreeRTOS Ticks
 * @retval: None
 */
void vPortSuppressTicksAndSleep( TickType_t xExpectedIdleTime )
{
 8002a1a:	b480      	push	{r7}
 8002a1c:	b083      	sub	sp, #12
 8002a1e:	af00      	add	r7, sp, #0
 8002a20:	6078      	str	r0, [r7, #4]

    /* Exit with interrUpts enabled. */
    __enable_irq();
  }
#endif
}
 8002a22:	bf00      	nop
 8002a24:	370c      	adds	r7, #12
 8002a26:	46bd      	mov	sp, r7
 8002a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a2c:	4770      	bx	lr
	...

08002a30 <LL_EXTI_EnableIT_0_31>:
{
 8002a30:	b480      	push	{r7}
 8002a32:	b083      	sub	sp, #12
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8002a38:	4b06      	ldr	r3, [pc, #24]	; (8002a54 <LL_EXTI_EnableIT_0_31+0x24>)
 8002a3a:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8002a3e:	4905      	ldr	r1, [pc, #20]	; (8002a54 <LL_EXTI_EnableIT_0_31+0x24>)
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	4313      	orrs	r3, r2
 8002a44:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 8002a48:	bf00      	nop
 8002a4a:	370c      	adds	r7, #12
 8002a4c:	46bd      	mov	sp, r7
 8002a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a52:	4770      	bx	lr
 8002a54:	58000800 	.word	0x58000800

08002a58 <LL_EXTI_EnableRisingTrig_0_31>:
{
 8002a58:	b480      	push	{r7}
 8002a5a:	b083      	sub	sp, #12
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8002a60:	4b05      	ldr	r3, [pc, #20]	; (8002a78 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8002a62:	681a      	ldr	r2, [r3, #0]
 8002a64:	4904      	ldr	r1, [pc, #16]	; (8002a78 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	4313      	orrs	r3, r2
 8002a6a:	600b      	str	r3, [r1, #0]
}
 8002a6c:	bf00      	nop
 8002a6e:	370c      	adds	r7, #12
 8002a70:	46bd      	mov	sp, r7
 8002a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a76:	4770      	bx	lr
 8002a78:	58000800 	.word	0x58000800

08002a7c <ReadRtcSsrValue>:
 *         reliability of the value
 * @param  None
 * @retval SSR value read
 */
static uint32_t ReadRtcSsrValue(void)
{
 8002a7c:	b480      	push	{r7}
 8002a7e:	b083      	sub	sp, #12
 8002a80:	af00      	add	r7, sp, #0
  uint32_t first_read;
  uint32_t second_read;

  first_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8002a82:	4b0d      	ldr	r3, [pc, #52]	; (8002ab8 <ReadRtcSsrValue+0x3c>)
 8002a84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a86:	b29b      	uxth	r3, r3
 8002a88:	607b      	str	r3, [r7, #4]

  second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8002a8a:	4b0b      	ldr	r3, [pc, #44]	; (8002ab8 <ReadRtcSsrValue+0x3c>)
 8002a8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a8e:	b29b      	uxth	r3, r3
 8002a90:	603b      	str	r3, [r7, #0]

  while(first_read != second_read)
 8002a92:	e005      	b.n	8002aa0 <ReadRtcSsrValue+0x24>
  {
    first_read = second_read;
 8002a94:	683b      	ldr	r3, [r7, #0]
 8002a96:	607b      	str	r3, [r7, #4]

    second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8002a98:	4b07      	ldr	r3, [pc, #28]	; (8002ab8 <ReadRtcSsrValue+0x3c>)
 8002a9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a9c:	b29b      	uxth	r3, r3
 8002a9e:	603b      	str	r3, [r7, #0]
  while(first_read != second_read)
 8002aa0:	687a      	ldr	r2, [r7, #4]
 8002aa2:	683b      	ldr	r3, [r7, #0]
 8002aa4:	429a      	cmp	r2, r3
 8002aa6:	d1f5      	bne.n	8002a94 <ReadRtcSsrValue+0x18>
  }

  return second_read;
 8002aa8:	683b      	ldr	r3, [r7, #0]
}
 8002aaa:	4618      	mov	r0, r3
 8002aac:	370c      	adds	r7, #12
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab4:	4770      	bx	lr
 8002ab6:	bf00      	nop
 8002ab8:	40002800 	.word	0x40002800

08002abc <LinkTimerAfter>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked after
 * @retval None
 */
static void LinkTimerAfter(uint8_t TimerID, uint8_t RefTimerID)
{
 8002abc:	b480      	push	{r7}
 8002abe:	b085      	sub	sp, #20
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	4603      	mov	r3, r0
 8002ac4:	460a      	mov	r2, r1
 8002ac6:	71fb      	strb	r3, [r7, #7]
 8002ac8:	4613      	mov	r3, r2
 8002aca:	71bb      	strb	r3, [r7, #6]
  uint8_t next_id;

  next_id = aTimerContext[RefTimerID].NextID;
 8002acc:	79ba      	ldrb	r2, [r7, #6]
 8002ace:	491d      	ldr	r1, [pc, #116]	; (8002b44 <LinkTimerAfter+0x88>)
 8002ad0:	4613      	mov	r3, r2
 8002ad2:	005b      	lsls	r3, r3, #1
 8002ad4:	4413      	add	r3, r2
 8002ad6:	00db      	lsls	r3, r3, #3
 8002ad8:	440b      	add	r3, r1
 8002ada:	3315      	adds	r3, #21
 8002adc:	781b      	ldrb	r3, [r3, #0]
 8002ade:	73fb      	strb	r3, [r7, #15]

  if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8002ae0:	7bfb      	ldrb	r3, [r7, #15]
 8002ae2:	2b06      	cmp	r3, #6
 8002ae4:	d009      	beq.n	8002afa <LinkTimerAfter+0x3e>
  {
    aTimerContext[next_id].PreviousID = TimerID;
 8002ae6:	7bfa      	ldrb	r2, [r7, #15]
 8002ae8:	4916      	ldr	r1, [pc, #88]	; (8002b44 <LinkTimerAfter+0x88>)
 8002aea:	4613      	mov	r3, r2
 8002aec:	005b      	lsls	r3, r3, #1
 8002aee:	4413      	add	r3, r2
 8002af0:	00db      	lsls	r3, r3, #3
 8002af2:	440b      	add	r3, r1
 8002af4:	3314      	adds	r3, #20
 8002af6:	79fa      	ldrb	r2, [r7, #7]
 8002af8:	701a      	strb	r2, [r3, #0]
  }
  aTimerContext[TimerID].NextID = next_id;
 8002afa:	79fa      	ldrb	r2, [r7, #7]
 8002afc:	4911      	ldr	r1, [pc, #68]	; (8002b44 <LinkTimerAfter+0x88>)
 8002afe:	4613      	mov	r3, r2
 8002b00:	005b      	lsls	r3, r3, #1
 8002b02:	4413      	add	r3, r2
 8002b04:	00db      	lsls	r3, r3, #3
 8002b06:	440b      	add	r3, r1
 8002b08:	3315      	adds	r3, #21
 8002b0a:	7bfa      	ldrb	r2, [r7, #15]
 8002b0c:	701a      	strb	r2, [r3, #0]
  aTimerContext[TimerID].PreviousID = RefTimerID ;
 8002b0e:	79fa      	ldrb	r2, [r7, #7]
 8002b10:	490c      	ldr	r1, [pc, #48]	; (8002b44 <LinkTimerAfter+0x88>)
 8002b12:	4613      	mov	r3, r2
 8002b14:	005b      	lsls	r3, r3, #1
 8002b16:	4413      	add	r3, r2
 8002b18:	00db      	lsls	r3, r3, #3
 8002b1a:	440b      	add	r3, r1
 8002b1c:	3314      	adds	r3, #20
 8002b1e:	79ba      	ldrb	r2, [r7, #6]
 8002b20:	701a      	strb	r2, [r3, #0]
  aTimerContext[RefTimerID].NextID = TimerID;
 8002b22:	79ba      	ldrb	r2, [r7, #6]
 8002b24:	4907      	ldr	r1, [pc, #28]	; (8002b44 <LinkTimerAfter+0x88>)
 8002b26:	4613      	mov	r3, r2
 8002b28:	005b      	lsls	r3, r3, #1
 8002b2a:	4413      	add	r3, r2
 8002b2c:	00db      	lsls	r3, r3, #3
 8002b2e:	440b      	add	r3, r1
 8002b30:	3315      	adds	r3, #21
 8002b32:	79fa      	ldrb	r2, [r7, #7]
 8002b34:	701a      	strb	r2, [r3, #0]

  return;
 8002b36:	bf00      	nop
}
 8002b38:	3714      	adds	r7, #20
 8002b3a:	46bd      	mov	sp, r7
 8002b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b40:	4770      	bx	lr
 8002b42:	bf00      	nop
 8002b44:	20000280 	.word	0x20000280

08002b48 <LinkTimerBefore>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked before
 * @retval None
 */
static void LinkTimerBefore(uint8_t TimerID, uint8_t RefTimerID)
{
 8002b48:	b480      	push	{r7}
 8002b4a:	b085      	sub	sp, #20
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	4603      	mov	r3, r0
 8002b50:	460a      	mov	r2, r1
 8002b52:	71fb      	strb	r3, [r7, #7]
 8002b54:	4613      	mov	r3, r2
 8002b56:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;

  if(RefTimerID != CurrentRunningTimerID)
 8002b58:	4b29      	ldr	r3, [pc, #164]	; (8002c00 <LinkTimerBefore+0xb8>)
 8002b5a:	781b      	ldrb	r3, [r3, #0]
 8002b5c:	b2db      	uxtb	r3, r3
 8002b5e:	79ba      	ldrb	r2, [r7, #6]
 8002b60:	429a      	cmp	r2, r3
 8002b62:	d032      	beq.n	8002bca <LinkTimerBefore+0x82>
  {
    previous_id = aTimerContext[RefTimerID].PreviousID;
 8002b64:	79ba      	ldrb	r2, [r7, #6]
 8002b66:	4927      	ldr	r1, [pc, #156]	; (8002c04 <LinkTimerBefore+0xbc>)
 8002b68:	4613      	mov	r3, r2
 8002b6a:	005b      	lsls	r3, r3, #1
 8002b6c:	4413      	add	r3, r2
 8002b6e:	00db      	lsls	r3, r3, #3
 8002b70:	440b      	add	r3, r1
 8002b72:	3314      	adds	r3, #20
 8002b74:	781b      	ldrb	r3, [r3, #0]
 8002b76:	73fb      	strb	r3, [r7, #15]

    aTimerContext[previous_id].NextID = TimerID;
 8002b78:	7bfa      	ldrb	r2, [r7, #15]
 8002b7a:	4922      	ldr	r1, [pc, #136]	; (8002c04 <LinkTimerBefore+0xbc>)
 8002b7c:	4613      	mov	r3, r2
 8002b7e:	005b      	lsls	r3, r3, #1
 8002b80:	4413      	add	r3, r2
 8002b82:	00db      	lsls	r3, r3, #3
 8002b84:	440b      	add	r3, r1
 8002b86:	3315      	adds	r3, #21
 8002b88:	79fa      	ldrb	r2, [r7, #7]
 8002b8a:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].NextID = RefTimerID;
 8002b8c:	79fa      	ldrb	r2, [r7, #7]
 8002b8e:	491d      	ldr	r1, [pc, #116]	; (8002c04 <LinkTimerBefore+0xbc>)
 8002b90:	4613      	mov	r3, r2
 8002b92:	005b      	lsls	r3, r3, #1
 8002b94:	4413      	add	r3, r2
 8002b96:	00db      	lsls	r3, r3, #3
 8002b98:	440b      	add	r3, r1
 8002b9a:	3315      	adds	r3, #21
 8002b9c:	79ba      	ldrb	r2, [r7, #6]
 8002b9e:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].PreviousID = previous_id ;
 8002ba0:	79fa      	ldrb	r2, [r7, #7]
 8002ba2:	4918      	ldr	r1, [pc, #96]	; (8002c04 <LinkTimerBefore+0xbc>)
 8002ba4:	4613      	mov	r3, r2
 8002ba6:	005b      	lsls	r3, r3, #1
 8002ba8:	4413      	add	r3, r2
 8002baa:	00db      	lsls	r3, r3, #3
 8002bac:	440b      	add	r3, r1
 8002bae:	3314      	adds	r3, #20
 8002bb0:	7bfa      	ldrb	r2, [r7, #15]
 8002bb2:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 8002bb4:	79ba      	ldrb	r2, [r7, #6]
 8002bb6:	4913      	ldr	r1, [pc, #76]	; (8002c04 <LinkTimerBefore+0xbc>)
 8002bb8:	4613      	mov	r3, r2
 8002bba:	005b      	lsls	r3, r3, #1
 8002bbc:	4413      	add	r3, r2
 8002bbe:	00db      	lsls	r3, r3, #3
 8002bc0:	440b      	add	r3, r1
 8002bc2:	3314      	adds	r3, #20
 8002bc4:	79fa      	ldrb	r2, [r7, #7]
 8002bc6:	701a      	strb	r2, [r3, #0]
  {
    aTimerContext[TimerID].NextID = RefTimerID;
    aTimerContext[RefTimerID].PreviousID = TimerID;
  }

  return;
 8002bc8:	e014      	b.n	8002bf4 <LinkTimerBefore+0xac>
    aTimerContext[TimerID].NextID = RefTimerID;
 8002bca:	79fa      	ldrb	r2, [r7, #7]
 8002bcc:	490d      	ldr	r1, [pc, #52]	; (8002c04 <LinkTimerBefore+0xbc>)
 8002bce:	4613      	mov	r3, r2
 8002bd0:	005b      	lsls	r3, r3, #1
 8002bd2:	4413      	add	r3, r2
 8002bd4:	00db      	lsls	r3, r3, #3
 8002bd6:	440b      	add	r3, r1
 8002bd8:	3315      	adds	r3, #21
 8002bda:	79ba      	ldrb	r2, [r7, #6]
 8002bdc:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 8002bde:	79ba      	ldrb	r2, [r7, #6]
 8002be0:	4908      	ldr	r1, [pc, #32]	; (8002c04 <LinkTimerBefore+0xbc>)
 8002be2:	4613      	mov	r3, r2
 8002be4:	005b      	lsls	r3, r3, #1
 8002be6:	4413      	add	r3, r2
 8002be8:	00db      	lsls	r3, r3, #3
 8002bea:	440b      	add	r3, r1
 8002bec:	3314      	adds	r3, #20
 8002bee:	79fa      	ldrb	r2, [r7, #7]
 8002bf0:	701a      	strb	r2, [r3, #0]
  return;
 8002bf2:	bf00      	nop
}
 8002bf4:	3714      	adds	r7, #20
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bfc:	4770      	bx	lr
 8002bfe:	bf00      	nop
 8002c00:	20000310 	.word	0x20000310
 8002c04:	20000280 	.word	0x20000280

08002c08 <linkTimer>:
 * @brief  Insert a Timer in the list
 * @param  TimerID:   The ID of the Timer
 * @retval None
 */
static uint16_t linkTimer(uint8_t TimerID)
{
 8002c08:	b580      	push	{r7, lr}
 8002c0a:	b084      	sub	sp, #16
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	4603      	mov	r3, r0
 8002c10:	71fb      	strb	r3, [r7, #7]
  uint32_t time_left;
  uint16_t time_elapsed;
  uint8_t timer_id_lookup;
  uint8_t next_id;

  if(CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8002c12:	4b4e      	ldr	r3, [pc, #312]	; (8002d4c <linkTimer+0x144>)
 8002c14:	781b      	ldrb	r3, [r3, #0]
 8002c16:	b2db      	uxtb	r3, r3
 8002c18:	2b06      	cmp	r3, #6
 8002c1a:	d118      	bne.n	8002c4e <linkTimer+0x46>
  {
    /**
     * No timer in the list
     */
    PreviousRunningTimerID = CurrentRunningTimerID;
 8002c1c:	4b4b      	ldr	r3, [pc, #300]	; (8002d4c <linkTimer+0x144>)
 8002c1e:	781b      	ldrb	r3, [r3, #0]
 8002c20:	b2da      	uxtb	r2, r3
 8002c22:	4b4b      	ldr	r3, [pc, #300]	; (8002d50 <linkTimer+0x148>)
 8002c24:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = TimerID;
 8002c26:	4a49      	ldr	r2, [pc, #292]	; (8002d4c <linkTimer+0x144>)
 8002c28:	79fb      	ldrb	r3, [r7, #7]
 8002c2a:	7013      	strb	r3, [r2, #0]
    aTimerContext[TimerID].NextID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;
 8002c2c:	79fa      	ldrb	r2, [r7, #7]
 8002c2e:	4949      	ldr	r1, [pc, #292]	; (8002d54 <linkTimer+0x14c>)
 8002c30:	4613      	mov	r3, r2
 8002c32:	005b      	lsls	r3, r3, #1
 8002c34:	4413      	add	r3, r2
 8002c36:	00db      	lsls	r3, r3, #3
 8002c38:	440b      	add	r3, r1
 8002c3a:	3315      	adds	r3, #21
 8002c3c:	2206      	movs	r2, #6
 8002c3e:	701a      	strb	r2, [r3, #0]

    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8002c40:	4b45      	ldr	r3, [pc, #276]	; (8002d58 <linkTimer+0x150>)
 8002c42:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002c46:	601a      	str	r2, [r3, #0]
    time_elapsed = 0;
 8002c48:	2300      	movs	r3, #0
 8002c4a:	81fb      	strh	r3, [r7, #14]
 8002c4c:	e078      	b.n	8002d40 <linkTimer+0x138>
  }
  else
  {
    time_elapsed = ReturnTimeElapsed();
 8002c4e:	f000 f909 	bl	8002e64 <ReturnTimeElapsed>
 8002c52:	4603      	mov	r3, r0
 8002c54:	81fb      	strh	r3, [r7, #14]

    /**
     * update count of the timer to be linked
     */
    aTimerContext[TimerID].CountLeft += time_elapsed;
 8002c56:	79fa      	ldrb	r2, [r7, #7]
 8002c58:	493e      	ldr	r1, [pc, #248]	; (8002d54 <linkTimer+0x14c>)
 8002c5a:	4613      	mov	r3, r2
 8002c5c:	005b      	lsls	r3, r3, #1
 8002c5e:	4413      	add	r3, r2
 8002c60:	00db      	lsls	r3, r3, #3
 8002c62:	440b      	add	r3, r1
 8002c64:	3308      	adds	r3, #8
 8002c66:	6819      	ldr	r1, [r3, #0]
 8002c68:	89fb      	ldrh	r3, [r7, #14]
 8002c6a:	79fa      	ldrb	r2, [r7, #7]
 8002c6c:	4419      	add	r1, r3
 8002c6e:	4839      	ldr	r0, [pc, #228]	; (8002d54 <linkTimer+0x14c>)
 8002c70:	4613      	mov	r3, r2
 8002c72:	005b      	lsls	r3, r3, #1
 8002c74:	4413      	add	r3, r2
 8002c76:	00db      	lsls	r3, r3, #3
 8002c78:	4403      	add	r3, r0
 8002c7a:	3308      	adds	r3, #8
 8002c7c:	6019      	str	r1, [r3, #0]
    time_left = aTimerContext[TimerID].CountLeft;
 8002c7e:	79fa      	ldrb	r2, [r7, #7]
 8002c80:	4934      	ldr	r1, [pc, #208]	; (8002d54 <linkTimer+0x14c>)
 8002c82:	4613      	mov	r3, r2
 8002c84:	005b      	lsls	r3, r3, #1
 8002c86:	4413      	add	r3, r2
 8002c88:	00db      	lsls	r3, r3, #3
 8002c8a:	440b      	add	r3, r1
 8002c8c:	3308      	adds	r3, #8
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	60bb      	str	r3, [r7, #8]

    /**
     * Search for index where the new timer shall be linked
     */
    if(aTimerContext[CurrentRunningTimerID].CountLeft <= time_left)
 8002c92:	4b2e      	ldr	r3, [pc, #184]	; (8002d4c <linkTimer+0x144>)
 8002c94:	781b      	ldrb	r3, [r3, #0]
 8002c96:	b2db      	uxtb	r3, r3
 8002c98:	4619      	mov	r1, r3
 8002c9a:	4a2e      	ldr	r2, [pc, #184]	; (8002d54 <linkTimer+0x14c>)
 8002c9c:	460b      	mov	r3, r1
 8002c9e:	005b      	lsls	r3, r3, #1
 8002ca0:	440b      	add	r3, r1
 8002ca2:	00db      	lsls	r3, r3, #3
 8002ca4:	4413      	add	r3, r2
 8002ca6:	3308      	adds	r3, #8
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	68ba      	ldr	r2, [r7, #8]
 8002cac:	429a      	cmp	r2, r3
 8002cae:	d337      	bcc.n	8002d20 <linkTimer+0x118>
    {
      /**
       * Search for the ID after the first one
       */
      timer_id_lookup = CurrentRunningTimerID;
 8002cb0:	4b26      	ldr	r3, [pc, #152]	; (8002d4c <linkTimer+0x144>)
 8002cb2:	781b      	ldrb	r3, [r3, #0]
 8002cb4:	737b      	strb	r3, [r7, #13]
      next_id = aTimerContext[timer_id_lookup].NextID;
 8002cb6:	7b7a      	ldrb	r2, [r7, #13]
 8002cb8:	4926      	ldr	r1, [pc, #152]	; (8002d54 <linkTimer+0x14c>)
 8002cba:	4613      	mov	r3, r2
 8002cbc:	005b      	lsls	r3, r3, #1
 8002cbe:	4413      	add	r3, r2
 8002cc0:	00db      	lsls	r3, r3, #3
 8002cc2:	440b      	add	r3, r1
 8002cc4:	3315      	adds	r3, #21
 8002cc6:	781b      	ldrb	r3, [r3, #0]
 8002cc8:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 8002cca:	e013      	b.n	8002cf4 <linkTimer+0xec>
      {
        timer_id_lookup = aTimerContext[timer_id_lookup].NextID;
 8002ccc:	7b7a      	ldrb	r2, [r7, #13]
 8002cce:	4921      	ldr	r1, [pc, #132]	; (8002d54 <linkTimer+0x14c>)
 8002cd0:	4613      	mov	r3, r2
 8002cd2:	005b      	lsls	r3, r3, #1
 8002cd4:	4413      	add	r3, r2
 8002cd6:	00db      	lsls	r3, r3, #3
 8002cd8:	440b      	add	r3, r1
 8002cda:	3315      	adds	r3, #21
 8002cdc:	781b      	ldrb	r3, [r3, #0]
 8002cde:	737b      	strb	r3, [r7, #13]
        next_id = aTimerContext[timer_id_lookup].NextID;
 8002ce0:	7b7a      	ldrb	r2, [r7, #13]
 8002ce2:	491c      	ldr	r1, [pc, #112]	; (8002d54 <linkTimer+0x14c>)
 8002ce4:	4613      	mov	r3, r2
 8002ce6:	005b      	lsls	r3, r3, #1
 8002ce8:	4413      	add	r3, r2
 8002cea:	00db      	lsls	r3, r3, #3
 8002cec:	440b      	add	r3, r1
 8002cee:	3315      	adds	r3, #21
 8002cf0:	781b      	ldrb	r3, [r3, #0]
 8002cf2:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 8002cf4:	7b3b      	ldrb	r3, [r7, #12]
 8002cf6:	2b06      	cmp	r3, #6
 8002cf8:	d00b      	beq.n	8002d12 <linkTimer+0x10a>
 8002cfa:	7b3a      	ldrb	r2, [r7, #12]
 8002cfc:	4915      	ldr	r1, [pc, #84]	; (8002d54 <linkTimer+0x14c>)
 8002cfe:	4613      	mov	r3, r2
 8002d00:	005b      	lsls	r3, r3, #1
 8002d02:	4413      	add	r3, r2
 8002d04:	00db      	lsls	r3, r3, #3
 8002d06:	440b      	add	r3, r1
 8002d08:	3308      	adds	r3, #8
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	68ba      	ldr	r2, [r7, #8]
 8002d0e:	429a      	cmp	r2, r3
 8002d10:	d2dc      	bcs.n	8002ccc <linkTimer+0xc4>
      }

      /**
       * Link after the ID
       */
      LinkTimerAfter(TimerID, timer_id_lookup);
 8002d12:	7b7a      	ldrb	r2, [r7, #13]
 8002d14:	79fb      	ldrb	r3, [r7, #7]
 8002d16:	4611      	mov	r1, r2
 8002d18:	4618      	mov	r0, r3
 8002d1a:	f7ff fecf 	bl	8002abc <LinkTimerAfter>
 8002d1e:	e00f      	b.n	8002d40 <linkTimer+0x138>
    else
    {
      /**
       * Link before the first ID
       */
      LinkTimerBefore(TimerID, CurrentRunningTimerID);
 8002d20:	4b0a      	ldr	r3, [pc, #40]	; (8002d4c <linkTimer+0x144>)
 8002d22:	781b      	ldrb	r3, [r3, #0]
 8002d24:	b2da      	uxtb	r2, r3
 8002d26:	79fb      	ldrb	r3, [r7, #7]
 8002d28:	4611      	mov	r1, r2
 8002d2a:	4618      	mov	r0, r3
 8002d2c:	f7ff ff0c 	bl	8002b48 <LinkTimerBefore>
      PreviousRunningTimerID = CurrentRunningTimerID;
 8002d30:	4b06      	ldr	r3, [pc, #24]	; (8002d4c <linkTimer+0x144>)
 8002d32:	781b      	ldrb	r3, [r3, #0]
 8002d34:	b2da      	uxtb	r2, r3
 8002d36:	4b06      	ldr	r3, [pc, #24]	; (8002d50 <linkTimer+0x148>)
 8002d38:	701a      	strb	r2, [r3, #0]
      CurrentRunningTimerID = TimerID;
 8002d3a:	4a04      	ldr	r2, [pc, #16]	; (8002d4c <linkTimer+0x144>)
 8002d3c:	79fb      	ldrb	r3, [r7, #7]
 8002d3e:	7013      	strb	r3, [r2, #0]
    }
  }

  return time_elapsed;
 8002d40:	89fb      	ldrh	r3, [r7, #14]
}
 8002d42:	4618      	mov	r0, r3
 8002d44:	3710      	adds	r7, #16
 8002d46:	46bd      	mov	sp, r7
 8002d48:	bd80      	pop	{r7, pc}
 8002d4a:	bf00      	nop
 8002d4c:	20000310 	.word	0x20000310
 8002d50:	20000311 	.word	0x20000311
 8002d54:	20000280 	.word	0x20000280
 8002d58:	20000314 	.word	0x20000314

08002d5c <UnlinkTimer>:
 * @param  TimerID:   The ID of the Timer
 * @param  RequestReadSSR: Request to read the SSR register or not
 * @retval None
 */
static void UnlinkTimer(uint8_t TimerID, RequestReadSSR_t RequestReadSSR)
{
 8002d5c:	b480      	push	{r7}
 8002d5e:	b085      	sub	sp, #20
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	4603      	mov	r3, r0
 8002d64:	460a      	mov	r2, r1
 8002d66:	71fb      	strb	r3, [r7, #7]
 8002d68:	4613      	mov	r3, r2
 8002d6a:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;
  uint8_t next_id;

  if(TimerID == CurrentRunningTimerID)
 8002d6c:	4b39      	ldr	r3, [pc, #228]	; (8002e54 <UnlinkTimer+0xf8>)
 8002d6e:	781b      	ldrb	r3, [r3, #0]
 8002d70:	b2db      	uxtb	r3, r3
 8002d72:	79fa      	ldrb	r2, [r7, #7]
 8002d74:	429a      	cmp	r2, r3
 8002d76:	d111      	bne.n	8002d9c <UnlinkTimer+0x40>
  {
    PreviousRunningTimerID = CurrentRunningTimerID;
 8002d78:	4b36      	ldr	r3, [pc, #216]	; (8002e54 <UnlinkTimer+0xf8>)
 8002d7a:	781b      	ldrb	r3, [r3, #0]
 8002d7c:	b2da      	uxtb	r2, r3
 8002d7e:	4b36      	ldr	r3, [pc, #216]	; (8002e58 <UnlinkTimer+0xfc>)
 8002d80:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = aTimerContext[TimerID].NextID;
 8002d82:	79fa      	ldrb	r2, [r7, #7]
 8002d84:	4935      	ldr	r1, [pc, #212]	; (8002e5c <UnlinkTimer+0x100>)
 8002d86:	4613      	mov	r3, r2
 8002d88:	005b      	lsls	r3, r3, #1
 8002d8a:	4413      	add	r3, r2
 8002d8c:	00db      	lsls	r3, r3, #3
 8002d8e:	440b      	add	r3, r1
 8002d90:	3315      	adds	r3, #21
 8002d92:	781b      	ldrb	r3, [r3, #0]
 8002d94:	b2da      	uxtb	r2, r3
 8002d96:	4b2f      	ldr	r3, [pc, #188]	; (8002e54 <UnlinkTimer+0xf8>)
 8002d98:	701a      	strb	r2, [r3, #0]
 8002d9a:	e03e      	b.n	8002e1a <UnlinkTimer+0xbe>
  }
  else
  {
    previous_id = aTimerContext[TimerID].PreviousID;
 8002d9c:	79fa      	ldrb	r2, [r7, #7]
 8002d9e:	492f      	ldr	r1, [pc, #188]	; (8002e5c <UnlinkTimer+0x100>)
 8002da0:	4613      	mov	r3, r2
 8002da2:	005b      	lsls	r3, r3, #1
 8002da4:	4413      	add	r3, r2
 8002da6:	00db      	lsls	r3, r3, #3
 8002da8:	440b      	add	r3, r1
 8002daa:	3314      	adds	r3, #20
 8002dac:	781b      	ldrb	r3, [r3, #0]
 8002dae:	73fb      	strb	r3, [r7, #15]
    next_id = aTimerContext[TimerID].NextID;
 8002db0:	79fa      	ldrb	r2, [r7, #7]
 8002db2:	492a      	ldr	r1, [pc, #168]	; (8002e5c <UnlinkTimer+0x100>)
 8002db4:	4613      	mov	r3, r2
 8002db6:	005b      	lsls	r3, r3, #1
 8002db8:	4413      	add	r3, r2
 8002dba:	00db      	lsls	r3, r3, #3
 8002dbc:	440b      	add	r3, r1
 8002dbe:	3315      	adds	r3, #21
 8002dc0:	781b      	ldrb	r3, [r3, #0]
 8002dc2:	73bb      	strb	r3, [r7, #14]

    aTimerContext[previous_id].NextID = aTimerContext[TimerID].NextID;
 8002dc4:	79f9      	ldrb	r1, [r7, #7]
 8002dc6:	7bfa      	ldrb	r2, [r7, #15]
 8002dc8:	4824      	ldr	r0, [pc, #144]	; (8002e5c <UnlinkTimer+0x100>)
 8002dca:	460b      	mov	r3, r1
 8002dcc:	005b      	lsls	r3, r3, #1
 8002dce:	440b      	add	r3, r1
 8002dd0:	00db      	lsls	r3, r3, #3
 8002dd2:	4403      	add	r3, r0
 8002dd4:	3315      	adds	r3, #21
 8002dd6:	781b      	ldrb	r3, [r3, #0]
 8002dd8:	b2d8      	uxtb	r0, r3
 8002dda:	4920      	ldr	r1, [pc, #128]	; (8002e5c <UnlinkTimer+0x100>)
 8002ddc:	4613      	mov	r3, r2
 8002dde:	005b      	lsls	r3, r3, #1
 8002de0:	4413      	add	r3, r2
 8002de2:	00db      	lsls	r3, r3, #3
 8002de4:	440b      	add	r3, r1
 8002de6:	3315      	adds	r3, #21
 8002de8:	4602      	mov	r2, r0
 8002dea:	701a      	strb	r2, [r3, #0]
    if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8002dec:	7bbb      	ldrb	r3, [r7, #14]
 8002dee:	2b06      	cmp	r3, #6
 8002df0:	d013      	beq.n	8002e1a <UnlinkTimer+0xbe>
    {
      aTimerContext[next_id].PreviousID = aTimerContext[TimerID].PreviousID;
 8002df2:	79f9      	ldrb	r1, [r7, #7]
 8002df4:	7bba      	ldrb	r2, [r7, #14]
 8002df6:	4819      	ldr	r0, [pc, #100]	; (8002e5c <UnlinkTimer+0x100>)
 8002df8:	460b      	mov	r3, r1
 8002dfa:	005b      	lsls	r3, r3, #1
 8002dfc:	440b      	add	r3, r1
 8002dfe:	00db      	lsls	r3, r3, #3
 8002e00:	4403      	add	r3, r0
 8002e02:	3314      	adds	r3, #20
 8002e04:	781b      	ldrb	r3, [r3, #0]
 8002e06:	b2d8      	uxtb	r0, r3
 8002e08:	4914      	ldr	r1, [pc, #80]	; (8002e5c <UnlinkTimer+0x100>)
 8002e0a:	4613      	mov	r3, r2
 8002e0c:	005b      	lsls	r3, r3, #1
 8002e0e:	4413      	add	r3, r2
 8002e10:	00db      	lsls	r3, r3, #3
 8002e12:	440b      	add	r3, r1
 8002e14:	3314      	adds	r3, #20
 8002e16:	4602      	mov	r2, r0
 8002e18:	701a      	strb	r2, [r3, #0]
  }

  /**
   * Timer is out of the list
   */
  aTimerContext[TimerID].TimerIDStatus = TimerID_Created;
 8002e1a:	79fa      	ldrb	r2, [r7, #7]
 8002e1c:	490f      	ldr	r1, [pc, #60]	; (8002e5c <UnlinkTimer+0x100>)
 8002e1e:	4613      	mov	r3, r2
 8002e20:	005b      	lsls	r3, r3, #1
 8002e22:	4413      	add	r3, r2
 8002e24:	00db      	lsls	r3, r3, #3
 8002e26:	440b      	add	r3, r1
 8002e28:	330c      	adds	r3, #12
 8002e2a:	2201      	movs	r2, #1
 8002e2c:	701a      	strb	r2, [r3, #0]

  if((CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (RequestReadSSR == SSR_Read_Requested))
 8002e2e:	4b09      	ldr	r3, [pc, #36]	; (8002e54 <UnlinkTimer+0xf8>)
 8002e30:	781b      	ldrb	r3, [r3, #0]
 8002e32:	b2db      	uxtb	r3, r3
 8002e34:	2b06      	cmp	r3, #6
 8002e36:	d107      	bne.n	8002e48 <UnlinkTimer+0xec>
 8002e38:	79bb      	ldrb	r3, [r7, #6]
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d104      	bne.n	8002e48 <UnlinkTimer+0xec>
  {
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8002e3e:	4b08      	ldr	r3, [pc, #32]	; (8002e60 <UnlinkTimer+0x104>)
 8002e40:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002e44:	601a      	str	r2, [r3, #0]
  }

  return;
 8002e46:	bf00      	nop
 8002e48:	bf00      	nop
}
 8002e4a:	3714      	adds	r7, #20
 8002e4c:	46bd      	mov	sp, r7
 8002e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e52:	4770      	bx	lr
 8002e54:	20000310 	.word	0x20000310
 8002e58:	20000311 	.word	0x20000311
 8002e5c:	20000280 	.word	0x20000280
 8002e60:	20000314 	.word	0x20000314

08002e64 <ReturnTimeElapsed>:
 *        since the time the timer has been started
 * @param  None
 * @retval Time expired in Ticks
 */
static uint16_t ReturnTimeElapsed(void)
{
 8002e64:	b580      	push	{r7, lr}
 8002e66:	b082      	sub	sp, #8
 8002e68:	af00      	add	r7, sp, #0
  uint32_t  return_value;
  uint32_t  wrap_counter;

  if(SSRValueOnLastSetup != SSR_FORBIDDEN_VALUE)
 8002e6a:	4b1a      	ldr	r3, [pc, #104]	; (8002ed4 <ReturnTimeElapsed+0x70>)
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002e72:	d026      	beq.n	8002ec2 <ReturnTimeElapsed+0x5e>
  {
    return_value = ReadRtcSsrValue(); /**< Read SSR register first */
 8002e74:	f7ff fe02 	bl	8002a7c <ReadRtcSsrValue>
 8002e78:	6078      	str	r0, [r7, #4]

    if (SSRValueOnLastSetup >= return_value)
 8002e7a:	4b16      	ldr	r3, [pc, #88]	; (8002ed4 <ReturnTimeElapsed+0x70>)
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	687a      	ldr	r2, [r7, #4]
 8002e80:	429a      	cmp	r2, r3
 8002e82:	d805      	bhi.n	8002e90 <ReturnTimeElapsed+0x2c>
    {
      return_value = SSRValueOnLastSetup - return_value;
 8002e84:	4b13      	ldr	r3, [pc, #76]	; (8002ed4 <ReturnTimeElapsed+0x70>)
 8002e86:	681a      	ldr	r2, [r3, #0]
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	1ad3      	subs	r3, r2, r3
 8002e8c:	607b      	str	r3, [r7, #4]
 8002e8e:	e00a      	b.n	8002ea6 <ReturnTimeElapsed+0x42>
    }
    else
    {
      wrap_counter = SynchPrescalerUserConfig - return_value;
 8002e90:	4b11      	ldr	r3, [pc, #68]	; (8002ed8 <ReturnTimeElapsed+0x74>)
 8002e92:	881b      	ldrh	r3, [r3, #0]
 8002e94:	461a      	mov	r2, r3
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	1ad3      	subs	r3, r2, r3
 8002e9a:	603b      	str	r3, [r7, #0]
      return_value = SSRValueOnLastSetup + wrap_counter;
 8002e9c:	4b0d      	ldr	r3, [pc, #52]	; (8002ed4 <ReturnTimeElapsed+0x70>)
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	683a      	ldr	r2, [r7, #0]
 8002ea2:	4413      	add	r3, r2
 8002ea4:	607b      	str	r3, [r7, #4]

    /**
     * At this stage, ReturnValue holds the number of ticks counted by SSR
     * Need to translate in number of ticks counted by the Wakeuptimer
     */
    return_value = return_value*AsynchPrescalerUserConfig;
 8002ea6:	4b0d      	ldr	r3, [pc, #52]	; (8002edc <ReturnTimeElapsed+0x78>)
 8002ea8:	781b      	ldrb	r3, [r3, #0]
 8002eaa:	461a      	mov	r2, r3
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	fb02 f303 	mul.w	r3, r2, r3
 8002eb2:	607b      	str	r3, [r7, #4]
    return_value = return_value >> WakeupTimerDivider;
 8002eb4:	4b0a      	ldr	r3, [pc, #40]	; (8002ee0 <ReturnTimeElapsed+0x7c>)
 8002eb6:	781b      	ldrb	r3, [r3, #0]
 8002eb8:	461a      	mov	r2, r3
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	40d3      	lsrs	r3, r2
 8002ebe:	607b      	str	r3, [r7, #4]
 8002ec0:	e001      	b.n	8002ec6 <ReturnTimeElapsed+0x62>
  }
  else
  {
    return_value = 0;
 8002ec2:	2300      	movs	r3, #0
 8002ec4:	607b      	str	r3, [r7, #4]
  }

  return (uint16_t)return_value;
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	b29b      	uxth	r3, r3
}
 8002eca:	4618      	mov	r0, r3
 8002ecc:	3708      	adds	r7, #8
 8002ece:	46bd      	mov	sp, r7
 8002ed0:	bd80      	pop	{r7, pc}
 8002ed2:	bf00      	nop
 8002ed4:	20000314 	.word	0x20000314
 8002ed8:	2000039e 	.word	0x2000039e
 8002edc:	2000039d 	.word	0x2000039d
 8002ee0:	2000039c 	.word	0x2000039c

08002ee4 <RestartWakeupCounter>:
 *    It assumes all condition are met to be allowed to write the wakeup counter
 * @param  Value: Value to be written in the counter
 * @retval None
 */
static void RestartWakeupCounter(uint16_t Value)
{
 8002ee4:	b580      	push	{r7, lr}
 8002ee6:	b082      	sub	sp, #8
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	4603      	mov	r3, r0
 8002eec:	80fb      	strh	r3, [r7, #6]
   * The wakeuptimer has been disabled in the calling function to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   *  __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);
   */

  if(Value == 0)
 8002eee:	88fb      	ldrh	r3, [r7, #6]
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d108      	bne.n	8002f06 <RestartWakeupCounter+0x22>
  {
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8002ef4:	f7ff fdc2 	bl	8002a7c <ReadRtcSsrValue>
 8002ef8:	4602      	mov	r2, r0
 8002efa:	4b24      	ldr	r3, [pc, #144]	; (8002f8c <RestartWakeupCounter+0xa8>)
 8002efc:	601a      	str	r2, [r3, #0]

    /**
     * Simulate that the Timer expired
     */
    HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 8002efe:	2003      	movs	r0, #3
 8002f00:	f004 ffe4 	bl	8007ecc <HAL_NVIC_SetPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE(phrtc);    /**<  Enable the Wakeup Timer */

    HW_TS_RTC_CountUpdated_AppNot();
  }

  return ;
 8002f04:	e03e      	b.n	8002f84 <RestartWakeupCounter+0xa0>
    if((Value > 1) ||(WakeupTimerDivider != 1))
 8002f06:	88fb      	ldrh	r3, [r7, #6]
 8002f08:	2b01      	cmp	r3, #1
 8002f0a:	d803      	bhi.n	8002f14 <RestartWakeupCounter+0x30>
 8002f0c:	4b20      	ldr	r3, [pc, #128]	; (8002f90 <RestartWakeupCounter+0xac>)
 8002f0e:	781b      	ldrb	r3, [r3, #0]
 8002f10:	2b01      	cmp	r3, #1
 8002f12:	d002      	beq.n	8002f1a <RestartWakeupCounter+0x36>
      Value -= 1;
 8002f14:	88fb      	ldrh	r3, [r7, #6]
 8002f16:	3b01      	subs	r3, #1
 8002f18:	80fb      	strh	r3, [r7, #6]
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == RESET);
 8002f1a:	bf00      	nop
 8002f1c:	4b1d      	ldr	r3, [pc, #116]	; (8002f94 <RestartWakeupCounter+0xb0>)
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	68db      	ldr	r3, [r3, #12]
 8002f24:	f003 0304 	and.w	r3, r3, #4
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d0f7      	beq.n	8002f1c <RestartWakeupCounter+0x38>
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8002f2c:	4b19      	ldr	r3, [pc, #100]	; (8002f94 <RestartWakeupCounter+0xb0>)
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	68db      	ldr	r3, [r3, #12]
 8002f34:	b2da      	uxtb	r2, r3
 8002f36:	4b17      	ldr	r3, [pc, #92]	; (8002f94 <RestartWakeupCounter+0xb0>)
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8002f40:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8002f42:	4b15      	ldr	r3, [pc, #84]	; (8002f98 <RestartWakeupCounter+0xb4>)
 8002f44:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8002f48:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 8002f4a:	2003      	movs	r0, #3
 8002f4c:	f004 ffcc 	bl	8007ee8 <HAL_NVIC_ClearPendingIRQ>
    MODIFY_REG(RTC->WUTR, RTC_WUTR_WUT, Value);
 8002f50:	4b12      	ldr	r3, [pc, #72]	; (8002f9c <RestartWakeupCounter+0xb8>)
 8002f52:	695b      	ldr	r3, [r3, #20]
 8002f54:	0c1b      	lsrs	r3, r3, #16
 8002f56:	041b      	lsls	r3, r3, #16
 8002f58:	88fa      	ldrh	r2, [r7, #6]
 8002f5a:	4910      	ldr	r1, [pc, #64]	; (8002f9c <RestartWakeupCounter+0xb8>)
 8002f5c:	4313      	orrs	r3, r2
 8002f5e:	614b      	str	r3, [r1, #20]
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8002f60:	f7ff fd8c 	bl	8002a7c <ReadRtcSsrValue>
 8002f64:	4602      	mov	r2, r0
 8002f66:	4b09      	ldr	r3, [pc, #36]	; (8002f8c <RestartWakeupCounter+0xa8>)
 8002f68:	601a      	str	r2, [r3, #0]
    __HAL_RTC_WAKEUPTIMER_ENABLE(phrtc);    /**<  Enable the Wakeup Timer */
 8002f6a:	4b0a      	ldr	r3, [pc, #40]	; (8002f94 <RestartWakeupCounter+0xb0>)
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	689a      	ldr	r2, [r3, #8]
 8002f72:	4b08      	ldr	r3, [pc, #32]	; (8002f94 <RestartWakeupCounter+0xb0>)
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002f7c:	609a      	str	r2, [r3, #8]
    HW_TS_RTC_CountUpdated_AppNot();
 8002f7e:	f3af 8000 	nop.w
  return ;
 8002f82:	bf00      	nop
}
 8002f84:	3708      	adds	r7, #8
 8002f86:	46bd      	mov	sp, r7
 8002f88:	bd80      	pop	{r7, pc}
 8002f8a:	bf00      	nop
 8002f8c:	20000314 	.word	0x20000314
 8002f90:	2000039c 	.word	0x2000039c
 8002f94:	20000398 	.word	0x20000398
 8002f98:	58000800 	.word	0x58000800
 8002f9c:	40002800 	.word	0x40002800

08002fa0 <RescheduleTimerList>:
 *    2) Setup the wakeuptimer
 * @param  None
 * @retval None
 */
static void RescheduleTimerList(void)
{
 8002fa0:	b580      	push	{r7, lr}
 8002fa2:	b084      	sub	sp, #16
 8002fa4:	af00      	add	r7, sp, #0

  /**
   * The wakeuptimer is disabled now to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   */
  if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 8002fa6:	4b47      	ldr	r3, [pc, #284]	; (80030c4 <RescheduleTimerList+0x124>)
 8002fa8:	689b      	ldr	r3, [r3, #8]
 8002faa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002fae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002fb2:	d108      	bne.n	8002fc6 <RescheduleTimerList+0x26>
  {
    /**
     * Wait for the flag to be back to 0 when the wakeup timer is enabled
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == SET);
 8002fb4:	bf00      	nop
 8002fb6:	4b44      	ldr	r3, [pc, #272]	; (80030c8 <RescheduleTimerList+0x128>)
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	68db      	ldr	r3, [r3, #12]
 8002fbe:	f003 0304 	and.w	r3, r3, #4
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d1f7      	bne.n	8002fb6 <RescheduleTimerList+0x16>
  }
  __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);   /**<  Disable the Wakeup Timer */
 8002fc6:	4b40      	ldr	r3, [pc, #256]	; (80030c8 <RescheduleTimerList+0x128>)
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	689a      	ldr	r2, [r3, #8]
 8002fce:	4b3e      	ldr	r3, [pc, #248]	; (80030c8 <RescheduleTimerList+0x128>)
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002fd8:	609a      	str	r2, [r3, #8]

  localTimerID = CurrentRunningTimerID;
 8002fda:	4b3c      	ldr	r3, [pc, #240]	; (80030cc <RescheduleTimerList+0x12c>)
 8002fdc:	781b      	ldrb	r3, [r3, #0]
 8002fde:	73fb      	strb	r3, [r7, #15]

  /**
   * Calculate what will be the value to write in the wakeuptimer
   */
  timecountleft = aTimerContext[localTimerID].CountLeft;
 8002fe0:	7bfa      	ldrb	r2, [r7, #15]
 8002fe2:	493b      	ldr	r1, [pc, #236]	; (80030d0 <RescheduleTimerList+0x130>)
 8002fe4:	4613      	mov	r3, r2
 8002fe6:	005b      	lsls	r3, r3, #1
 8002fe8:	4413      	add	r3, r2
 8002fea:	00db      	lsls	r3, r3, #3
 8002fec:	440b      	add	r3, r1
 8002fee:	3308      	adds	r3, #8
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	60bb      	str	r3, [r7, #8]

  /**
   * Read how much has been counted
   */
  time_elapsed = ReturnTimeElapsed();
 8002ff4:	f7ff ff36 	bl	8002e64 <ReturnTimeElapsed>
 8002ff8:	4603      	mov	r3, r0
 8002ffa:	80fb      	strh	r3, [r7, #6]

  if(timecountleft < time_elapsed )
 8002ffc:	88fb      	ldrh	r3, [r7, #6]
 8002ffe:	68ba      	ldr	r2, [r7, #8]
 8003000:	429a      	cmp	r2, r3
 8003002:	d205      	bcs.n	8003010 <RescheduleTimerList+0x70>
  {
    /**
     * There is no tick left to count
     */
    wakeup_timer_value = 0;
 8003004:	2300      	movs	r3, #0
 8003006:	81bb      	strh	r3, [r7, #12]
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8003008:	4b32      	ldr	r3, [pc, #200]	; (80030d4 <RescheduleTimerList+0x134>)
 800300a:	2201      	movs	r2, #1
 800300c:	701a      	strb	r2, [r3, #0]
 800300e:	e04d      	b.n	80030ac <RescheduleTimerList+0x10c>
  }
  else
  {
    if(timecountleft > (time_elapsed + MaxWakeupTimerSetup))
 8003010:	88fb      	ldrh	r3, [r7, #6]
 8003012:	4a31      	ldr	r2, [pc, #196]	; (80030d8 <RescheduleTimerList+0x138>)
 8003014:	8812      	ldrh	r2, [r2, #0]
 8003016:	b292      	uxth	r2, r2
 8003018:	4413      	add	r3, r2
 800301a:	461a      	mov	r2, r3
 800301c:	68bb      	ldr	r3, [r7, #8]
 800301e:	4293      	cmp	r3, r2
 8003020:	d906      	bls.n	8003030 <RescheduleTimerList+0x90>
    {
      /**
       * The number of tick left is greater than the Wakeuptimer maximum value
       */
      wakeup_timer_value = MaxWakeupTimerSetup;
 8003022:	4b2d      	ldr	r3, [pc, #180]	; (80030d8 <RescheduleTimerList+0x138>)
 8003024:	881b      	ldrh	r3, [r3, #0]
 8003026:	81bb      	strh	r3, [r7, #12]

      WakeupTimerLimitation = WakeupTimerValue_Overpassed;
 8003028:	4b2a      	ldr	r3, [pc, #168]	; (80030d4 <RescheduleTimerList+0x134>)
 800302a:	2200      	movs	r2, #0
 800302c:	701a      	strb	r2, [r3, #0]
 800302e:	e03d      	b.n	80030ac <RescheduleTimerList+0x10c>
    }
    else
    {
      wakeup_timer_value = timecountleft - time_elapsed;
 8003030:	68bb      	ldr	r3, [r7, #8]
 8003032:	b29a      	uxth	r2, r3
 8003034:	88fb      	ldrh	r3, [r7, #6]
 8003036:	1ad3      	subs	r3, r2, r3
 8003038:	81bb      	strh	r3, [r7, #12]
      WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 800303a:	4b26      	ldr	r3, [pc, #152]	; (80030d4 <RescheduleTimerList+0x134>)
 800303c:	2201      	movs	r2, #1
 800303e:	701a      	strb	r2, [r3, #0]
  }

  /**
   * update ticks left to be counted for each timer
   */
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8003040:	e034      	b.n	80030ac <RescheduleTimerList+0x10c>
  {
    if (aTimerContext[localTimerID].CountLeft < time_elapsed)
 8003042:	7bfa      	ldrb	r2, [r7, #15]
 8003044:	4922      	ldr	r1, [pc, #136]	; (80030d0 <RescheduleTimerList+0x130>)
 8003046:	4613      	mov	r3, r2
 8003048:	005b      	lsls	r3, r3, #1
 800304a:	4413      	add	r3, r2
 800304c:	00db      	lsls	r3, r3, #3
 800304e:	440b      	add	r3, r1
 8003050:	3308      	adds	r3, #8
 8003052:	681a      	ldr	r2, [r3, #0]
 8003054:	88fb      	ldrh	r3, [r7, #6]
 8003056:	429a      	cmp	r2, r3
 8003058:	d20a      	bcs.n	8003070 <RescheduleTimerList+0xd0>
    {
      aTimerContext[localTimerID].CountLeft = 0;
 800305a:	7bfa      	ldrb	r2, [r7, #15]
 800305c:	491c      	ldr	r1, [pc, #112]	; (80030d0 <RescheduleTimerList+0x130>)
 800305e:	4613      	mov	r3, r2
 8003060:	005b      	lsls	r3, r3, #1
 8003062:	4413      	add	r3, r2
 8003064:	00db      	lsls	r3, r3, #3
 8003066:	440b      	add	r3, r1
 8003068:	3308      	adds	r3, #8
 800306a:	2200      	movs	r2, #0
 800306c:	601a      	str	r2, [r3, #0]
 800306e:	e013      	b.n	8003098 <RescheduleTimerList+0xf8>
    }
    else
    {
      aTimerContext[localTimerID].CountLeft -= time_elapsed;
 8003070:	7bfa      	ldrb	r2, [r7, #15]
 8003072:	4917      	ldr	r1, [pc, #92]	; (80030d0 <RescheduleTimerList+0x130>)
 8003074:	4613      	mov	r3, r2
 8003076:	005b      	lsls	r3, r3, #1
 8003078:	4413      	add	r3, r2
 800307a:	00db      	lsls	r3, r3, #3
 800307c:	440b      	add	r3, r1
 800307e:	3308      	adds	r3, #8
 8003080:	6819      	ldr	r1, [r3, #0]
 8003082:	88fb      	ldrh	r3, [r7, #6]
 8003084:	7bfa      	ldrb	r2, [r7, #15]
 8003086:	1ac9      	subs	r1, r1, r3
 8003088:	4811      	ldr	r0, [pc, #68]	; (80030d0 <RescheduleTimerList+0x130>)
 800308a:	4613      	mov	r3, r2
 800308c:	005b      	lsls	r3, r3, #1
 800308e:	4413      	add	r3, r2
 8003090:	00db      	lsls	r3, r3, #3
 8003092:	4403      	add	r3, r0
 8003094:	3308      	adds	r3, #8
 8003096:	6019      	str	r1, [r3, #0]
    }
    localTimerID = aTimerContext[localTimerID].NextID;
 8003098:	7bfa      	ldrb	r2, [r7, #15]
 800309a:	490d      	ldr	r1, [pc, #52]	; (80030d0 <RescheduleTimerList+0x130>)
 800309c:	4613      	mov	r3, r2
 800309e:	005b      	lsls	r3, r3, #1
 80030a0:	4413      	add	r3, r2
 80030a2:	00db      	lsls	r3, r3, #3
 80030a4:	440b      	add	r3, r1
 80030a6:	3315      	adds	r3, #21
 80030a8:	781b      	ldrb	r3, [r3, #0]
 80030aa:	73fb      	strb	r3, [r7, #15]
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 80030ac:	7bfb      	ldrb	r3, [r7, #15]
 80030ae:	2b06      	cmp	r3, #6
 80030b0:	d1c7      	bne.n	8003042 <RescheduleTimerList+0xa2>
  }

  /**
   * Write next count
   */
  RestartWakeupCounter(wakeup_timer_value);
 80030b2:	89bb      	ldrh	r3, [r7, #12]
 80030b4:	4618      	mov	r0, r3
 80030b6:	f7ff ff15 	bl	8002ee4 <RestartWakeupCounter>

  return ;
 80030ba:	bf00      	nop
}
 80030bc:	3710      	adds	r7, #16
 80030be:	46bd      	mov	sp, r7
 80030c0:	bd80      	pop	{r7, pc}
 80030c2:	bf00      	nop
 80030c4:	40002800 	.word	0x40002800
 80030c8:	20000398 	.word	0x20000398
 80030cc:	20000310 	.word	0x20000310
 80030d0:	20000280 	.word	0x20000280
 80030d4:	20000318 	.word	0x20000318
 80030d8:	200003a0 	.word	0x200003a0

080030dc <HW_TS_RTC_Wakeup_Handler>:
 * In order to ease maintainability, the unlock is done at the top and the lock at then end
 * in case some new implementation is coming in the future
 */

void HW_TS_RTC_Wakeup_Handler(void)
{
 80030dc:	b580      	push	{r7, lr}
 80030de:	b08a      	sub	sp, #40	; 0x28
 80030e0:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80030e2:	f3ef 8310 	mrs	r3, PRIMASK
 80030e6:	617b      	str	r3, [r7, #20]
  return(result);
 80030e8:	697b      	ldr	r3, [r7, #20]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80030ea:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("cpsid i" : : : "memory");
 80030ec:	b672      	cpsid	i
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

/* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 80030ee:	4b5e      	ldr	r3, [pc, #376]	; (8003268 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	22ca      	movs	r2, #202	; 0xca
 80030f6:	625a      	str	r2, [r3, #36]	; 0x24
 80030f8:	4b5b      	ldr	r3, [pc, #364]	; (8003268 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	2253      	movs	r2, #83	; 0x53
 8003100:	625a      	str	r2, [r3, #36]	; 0x24
  /**
   * Disable the Wakeup Timer
   * This may speed up a bit the processing to wait the timer to be disabled
   * The timer is still counting 2 RTCCLK
   */
  __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);
 8003102:	4b59      	ldr	r3, [pc, #356]	; (8003268 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	689a      	ldr	r2, [r3, #8]
 800310a:	4b57      	ldr	r3, [pc, #348]	; (8003268 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003114:	609a      	str	r2, [r3, #8]

  local_current_running_timer_id = CurrentRunningTimerID;
 8003116:	4b55      	ldr	r3, [pc, #340]	; (800326c <HW_TS_RTC_Wakeup_Handler+0x190>)
 8003118:	781b      	ldrb	r3, [r3, #0]
 800311a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  if(aTimerContext[local_current_running_timer_id].TimerIDStatus == TimerID_Running)
 800311e:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8003122:	4953      	ldr	r1, [pc, #332]	; (8003270 <HW_TS_RTC_Wakeup_Handler+0x194>)
 8003124:	4613      	mov	r3, r2
 8003126:	005b      	lsls	r3, r3, #1
 8003128:	4413      	add	r3, r2
 800312a:	00db      	lsls	r3, r3, #3
 800312c:	440b      	add	r3, r1
 800312e:	330c      	adds	r3, #12
 8003130:	781b      	ldrb	r3, [r3, #0]
 8003132:	b2db      	uxtb	r3, r3
 8003134:	2b02      	cmp	r3, #2
 8003136:	d170      	bne.n	800321a <HW_TS_RTC_Wakeup_Handler+0x13e>
  {
    ptimer_callback = aTimerContext[local_current_running_timer_id].pTimerCallBack;
 8003138:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 800313c:	494c      	ldr	r1, [pc, #304]	; (8003270 <HW_TS_RTC_Wakeup_Handler+0x194>)
 800313e:	4613      	mov	r3, r2
 8003140:	005b      	lsls	r3, r3, #1
 8003142:	4413      	add	r3, r2
 8003144:	00db      	lsls	r3, r3, #3
 8003146:	440b      	add	r3, r1
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	61fb      	str	r3, [r7, #28]
    timer_process_id = aTimerContext[local_current_running_timer_id].TimerProcessID;
 800314c:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8003150:	4947      	ldr	r1, [pc, #284]	; (8003270 <HW_TS_RTC_Wakeup_Handler+0x194>)
 8003152:	4613      	mov	r3, r2
 8003154:	005b      	lsls	r3, r3, #1
 8003156:	4413      	add	r3, r2
 8003158:	00db      	lsls	r3, r3, #3
 800315a:	440b      	add	r3, r1
 800315c:	3310      	adds	r3, #16
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	61bb      	str	r3, [r7, #24]
     * However, due to the inaccuracy of the reading of the time elapsed, it may return there is 1 tick
     * to be left whereas the count is over
     * A more secure implementation has been done with a flag to state whereas the full count has been written
     * in the wakeuptimer or not
     */
    if(WakeupTimerLimitation != WakeupTimerValue_Overpassed)
 8003162:	4b44      	ldr	r3, [pc, #272]	; (8003274 <HW_TS_RTC_Wakeup_Handler+0x198>)
 8003164:	781b      	ldrb	r3, [r3, #0]
 8003166:	b2db      	uxtb	r3, r3
 8003168:	2b00      	cmp	r3, #0
 800316a:	d04e      	beq.n	800320a <HW_TS_RTC_Wakeup_Handler+0x12e>
    {
      if(aTimerContext[local_current_running_timer_id].TimerMode == hw_ts_Repeated)
 800316c:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8003170:	493f      	ldr	r1, [pc, #252]	; (8003270 <HW_TS_RTC_Wakeup_Handler+0x194>)
 8003172:	4613      	mov	r3, r2
 8003174:	005b      	lsls	r3, r3, #1
 8003176:	4413      	add	r3, r2
 8003178:	00db      	lsls	r3, r3, #3
 800317a:	440b      	add	r3, r1
 800317c:	330d      	adds	r3, #13
 800317e:	781b      	ldrb	r3, [r3, #0]
 8003180:	b2db      	uxtb	r3, r3
 8003182:	2b01      	cmp	r3, #1
 8003184:	d125      	bne.n	80031d2 <HW_TS_RTC_Wakeup_Handler+0xf6>
      {
        UnlinkTimer(local_current_running_timer_id, SSR_Read_Not_Requested);
 8003186:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800318a:	2101      	movs	r1, #1
 800318c:	4618      	mov	r0, r3
 800318e:	f7ff fde5 	bl	8002d5c <UnlinkTimer>
 8003192:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003194:	613b      	str	r3, [r7, #16]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003196:	693b      	ldr	r3, [r7, #16]
 8003198:	f383 8810 	msr	PRIMASK, r3
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Start(local_current_running_timer_id, aTimerContext[local_current_running_timer_id].CounterInit);
 800319c:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 80031a0:	4933      	ldr	r1, [pc, #204]	; (8003270 <HW_TS_RTC_Wakeup_Handler+0x194>)
 80031a2:	4613      	mov	r3, r2
 80031a4:	005b      	lsls	r3, r3, #1
 80031a6:	4413      	add	r3, r2
 80031a8:	00db      	lsls	r3, r3, #3
 80031aa:	440b      	add	r3, r1
 80031ac:	3304      	adds	r3, #4
 80031ae:	681a      	ldr	r2, [r3, #0]
 80031b0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80031b4:	4611      	mov	r1, r2
 80031b6:	4618      	mov	r0, r3
 80031b8:	f000 fa46 	bl	8003648 <HW_TS_Start>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 80031bc:	4b2a      	ldr	r3, [pc, #168]	; (8003268 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	22ca      	movs	r2, #202	; 0xca
 80031c4:	625a      	str	r2, [r3, #36]	; 0x24
 80031c6:	4b28      	ldr	r3, [pc, #160]	; (8003268 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	2253      	movs	r2, #83	; 0x53
 80031ce:	625a      	str	r2, [r3, #36]	; 0x24
 80031d0:	e013      	b.n	80031fa <HW_TS_RTC_Wakeup_Handler+0x11e>
 80031d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031d4:	60fb      	str	r3, [r7, #12]
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	f383 8810 	msr	PRIMASK, r3
      else
      {
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Stop(local_current_running_timer_id);
 80031dc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80031e0:	4618      	mov	r0, r3
 80031e2:	f000 f9a7 	bl	8003534 <HW_TS_Stop>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 80031e6:	4b20      	ldr	r3, [pc, #128]	; (8003268 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	22ca      	movs	r2, #202	; 0xca
 80031ee:	625a      	str	r2, [r3, #36]	; 0x24
 80031f0:	4b1d      	ldr	r3, [pc, #116]	; (8003268 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	2253      	movs	r2, #83	; 0x53
 80031f8:	625a      	str	r2, [r3, #36]	; 0x24
        }

      HW_TS_RTC_Int_AppNot(timer_process_id, local_current_running_timer_id, ptimer_callback);
 80031fa:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80031fe:	69fa      	ldr	r2, [r7, #28]
 8003200:	4619      	mov	r1, r3
 8003202:	69b8      	ldr	r0, [r7, #24]
 8003204:	f000 faa6 	bl	8003754 <HW_TS_RTC_Int_AppNot>
 8003208:	e024      	b.n	8003254 <HW_TS_RTC_Wakeup_Handler+0x178>
    }
    else
    {
      RescheduleTimerList();
 800320a:	f7ff fec9 	bl	8002fa0 <RescheduleTimerList>
 800320e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003210:	60bb      	str	r3, [r7, #8]
 8003212:	68bb      	ldr	r3, [r7, #8]
 8003214:	f383 8810 	msr	PRIMASK, r3
 8003218:	e01c      	b.n	8003254 <HW_TS_RTC_Wakeup_Handler+0x178>
    /**
     * We should never end up in this case
     * However, if due to any bug in the timer server this is the case, the mistake may not impact the user.
     * We could just clean the interrupt flag and get out from this unexpected interrupt
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == RESET);
 800321a:	bf00      	nop
 800321c:	4b12      	ldr	r3, [pc, #72]	; (8003268 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	68db      	ldr	r3, [r3, #12]
 8003224:	f003 0304 	and.w	r3, r3, #4
 8003228:	2b00      	cmp	r3, #0
 800322a:	d0f7      	beq.n	800321c <HW_TS_RTC_Wakeup_Handler+0x140>
     * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
     * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
     * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
     * due to the autoreload feature
     */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 800322c:	4b0e      	ldr	r3, [pc, #56]	; (8003268 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	68db      	ldr	r3, [r3, #12]
 8003234:	b2da      	uxtb	r2, r3
 8003236:	4b0c      	ldr	r3, [pc, #48]	; (8003268 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8003240:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8003242:	4b0d      	ldr	r3, [pc, #52]	; (8003278 <HW_TS_RTC_Wakeup_Handler+0x19c>)
 8003244:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8003248:	60da      	str	r2, [r3, #12]
 800324a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800324c:	607b      	str	r3, [r7, #4]
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	f383 8810 	msr	PRIMASK, r3
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 8003254:	4b04      	ldr	r3, [pc, #16]	; (8003268 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	22ff      	movs	r2, #255	; 0xff
 800325c:	625a      	str	r2, [r3, #36]	; 0x24

  return;
 800325e:	bf00      	nop
}
 8003260:	3728      	adds	r7, #40	; 0x28
 8003262:	46bd      	mov	sp, r7
 8003264:	bd80      	pop	{r7, pc}
 8003266:	bf00      	nop
 8003268:	20000398 	.word	0x20000398
 800326c:	20000310 	.word	0x20000310
 8003270:	20000280 	.word	0x20000280
 8003274:	20000318 	.word	0x20000318
 8003278:	58000800 	.word	0x58000800

0800327c <HW_TS_Init>:

void HW_TS_Init(HW_TS_InitMode_t TimerInitMode, RTC_HandleTypeDef *hrtc)
{
 800327c:	b580      	push	{r7, lr}
 800327e:	b088      	sub	sp, #32
 8003280:	af00      	add	r7, sp, #0
 8003282:	4603      	mov	r3, r0
 8003284:	6039      	str	r1, [r7, #0]
 8003286:	71fb      	strb	r3, [r7, #7]
  uint32_t localmaxwakeuptimersetup;

  /**
   * Get RTC handler
   */
  phrtc = hrtc;
 8003288:	4a64      	ldr	r2, [pc, #400]	; (800341c <HW_TS_Init+0x1a0>)
 800328a:	683b      	ldr	r3, [r7, #0]
 800328c:	6013      	str	r3, [r2, #0]

 /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 800328e:	4b63      	ldr	r3, [pc, #396]	; (800341c <HW_TS_Init+0x1a0>)
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	22ca      	movs	r2, #202	; 0xca
 8003296:	625a      	str	r2, [r3, #36]	; 0x24
 8003298:	4b60      	ldr	r3, [pc, #384]	; (800341c <HW_TS_Init+0x1a0>)
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	2253      	movs	r2, #83	; 0x53
 80032a0:	625a      	str	r2, [r3, #36]	; 0x24

  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80032a2:	4b5f      	ldr	r3, [pc, #380]	; (8003420 <HW_TS_Init+0x1a4>)
 80032a4:	689b      	ldr	r3, [r3, #8]
 80032a6:	4a5e      	ldr	r2, [pc, #376]	; (8003420 <HW_TS_Init+0x1a4>)
 80032a8:	f043 0320 	orr.w	r3, r3, #32
 80032ac:	6093      	str	r3, [r2, #8]

  /**
   * Readout the user config
   */
  WakeupTimerDivider = (4 - ((uint32_t)(READ_BIT(RTC->CR, RTC_CR_WUCKSEL))));
 80032ae:	4b5c      	ldr	r3, [pc, #368]	; (8003420 <HW_TS_Init+0x1a4>)
 80032b0:	689b      	ldr	r3, [r3, #8]
 80032b2:	b2db      	uxtb	r3, r3
 80032b4:	f003 0307 	and.w	r3, r3, #7
 80032b8:	b2db      	uxtb	r3, r3
 80032ba:	f1c3 0304 	rsb	r3, r3, #4
 80032be:	b2da      	uxtb	r2, r3
 80032c0:	4b58      	ldr	r3, [pc, #352]	; (8003424 <HW_TS_Init+0x1a8>)
 80032c2:	701a      	strb	r2, [r3, #0]

  AsynchPrescalerUserConfig = (uint8_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_A) >> (uint32_t)POSITION_VAL(RTC_PRER_PREDIV_A)) + 1;
 80032c4:	4b56      	ldr	r3, [pc, #344]	; (8003420 <HW_TS_Init+0x1a4>)
 80032c6:	691b      	ldr	r3, [r3, #16]
 80032c8:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80032cc:	f44f 02fe 	mov.w	r2, #8323072	; 0x7f0000
 80032d0:	613a      	str	r2, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032d2:	693a      	ldr	r2, [r7, #16]
 80032d4:	fa92 f2a2 	rbit	r2, r2
 80032d8:	60fa      	str	r2, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80032da:	68fa      	ldr	r2, [r7, #12]
 80032dc:	617a      	str	r2, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80032de:	697a      	ldr	r2, [r7, #20]
 80032e0:	2a00      	cmp	r2, #0
 80032e2:	d101      	bne.n	80032e8 <HW_TS_Init+0x6c>
  {
    return 32U;
 80032e4:	2220      	movs	r2, #32
 80032e6:	e003      	b.n	80032f0 <HW_TS_Init+0x74>
  }
  return __builtin_clz(value);
 80032e8:	697a      	ldr	r2, [r7, #20]
 80032ea:	fab2 f282 	clz	r2, r2
 80032ee:	b2d2      	uxtb	r2, r2
 80032f0:	40d3      	lsrs	r3, r2
 80032f2:	b2db      	uxtb	r3, r3
 80032f4:	3301      	adds	r3, #1
 80032f6:	b2da      	uxtb	r2, r3
 80032f8:	4b4b      	ldr	r3, [pc, #300]	; (8003428 <HW_TS_Init+0x1ac>)
 80032fa:	701a      	strb	r2, [r3, #0]

  SynchPrescalerUserConfig = (uint16_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_S)) + 1;
 80032fc:	4b48      	ldr	r3, [pc, #288]	; (8003420 <HW_TS_Init+0x1a4>)
 80032fe:	691b      	ldr	r3, [r3, #16]
 8003300:	b29b      	uxth	r3, r3
 8003302:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8003306:	b29b      	uxth	r3, r3
 8003308:	3301      	adds	r3, #1
 800330a:	b29a      	uxth	r2, r3
 800330c:	4b47      	ldr	r3, [pc, #284]	; (800342c <HW_TS_Init+0x1b0>)
 800330e:	801a      	strh	r2, [r3, #0]

  /**
   *  Margin is taken to avoid wrong calculation when the wrap around is there and some
   *  application interrupts may have delayed the reading
   */
  localmaxwakeuptimersetup = ((((SynchPrescalerUserConfig - 1)*AsynchPrescalerUserConfig) - CFG_HW_TS_RTC_HANDLER_MAX_DELAY) >> WakeupTimerDivider);
 8003310:	4b46      	ldr	r3, [pc, #280]	; (800342c <HW_TS_Init+0x1b0>)
 8003312:	881b      	ldrh	r3, [r3, #0]
 8003314:	3b01      	subs	r3, #1
 8003316:	4a44      	ldr	r2, [pc, #272]	; (8003428 <HW_TS_Init+0x1ac>)
 8003318:	7812      	ldrb	r2, [r2, #0]
 800331a:	fb02 f303 	mul.w	r3, r2, r3
 800331e:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8003322:	4a40      	ldr	r2, [pc, #256]	; (8003424 <HW_TS_Init+0x1a8>)
 8003324:	7812      	ldrb	r2, [r2, #0]
 8003326:	40d3      	lsrs	r3, r2
 8003328:	61bb      	str	r3, [r7, #24]

  if(localmaxwakeuptimersetup >= 0xFFFF)
 800332a:	69bb      	ldr	r3, [r7, #24]
 800332c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8003330:	4293      	cmp	r3, r2
 8003332:	d904      	bls.n	800333e <HW_TS_Init+0xc2>
  {
    MaxWakeupTimerSetup = 0xFFFF;
 8003334:	4b3e      	ldr	r3, [pc, #248]	; (8003430 <HW_TS_Init+0x1b4>)
 8003336:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800333a:	801a      	strh	r2, [r3, #0]
 800333c:	e003      	b.n	8003346 <HW_TS_Init+0xca>
  }
  else
  {
    MaxWakeupTimerSetup = (uint16_t)localmaxwakeuptimersetup;
 800333e:	69bb      	ldr	r3, [r7, #24]
 8003340:	b29a      	uxth	r2, r3
 8003342:	4b3b      	ldr	r3, [pc, #236]	; (8003430 <HW_TS_Init+0x1b4>)
 8003344:	801a      	strh	r2, [r3, #0]
  }

  /**
   * Configure EXTI module
   */
  LL_EXTI_EnableRisingTrig_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 8003346:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800334a:	f7ff fb85 	bl	8002a58 <LL_EXTI_EnableRisingTrig_0_31>
  LL_EXTI_EnableIT_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 800334e:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8003352:	f7ff fb6d 	bl	8002a30 <LL_EXTI_EnableIT_0_31>

  if(TimerInitMode == hw_ts_InitMode_Full)
 8003356:	79fb      	ldrb	r3, [r7, #7]
 8003358:	2b00      	cmp	r3, #0
 800335a:	d143      	bne.n	80033e4 <HW_TS_Init+0x168>
  {
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 800335c:	4b35      	ldr	r3, [pc, #212]	; (8003434 <HW_TS_Init+0x1b8>)
 800335e:	2201      	movs	r2, #1
 8003360:	701a      	strb	r2, [r3, #0]
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8003362:	4b35      	ldr	r3, [pc, #212]	; (8003438 <HW_TS_Init+0x1bc>)
 8003364:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003368:	601a      	str	r2, [r3, #0]

    /**
     * Initialize the timer server
     */
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 800336a:	2300      	movs	r3, #0
 800336c:	77fb      	strb	r3, [r7, #31]
 800336e:	e00c      	b.n	800338a <HW_TS_Init+0x10e>
    {
      aTimerContext[loop].TimerIDStatus = TimerID_Free;
 8003370:	7ffa      	ldrb	r2, [r7, #31]
 8003372:	4932      	ldr	r1, [pc, #200]	; (800343c <HW_TS_Init+0x1c0>)
 8003374:	4613      	mov	r3, r2
 8003376:	005b      	lsls	r3, r3, #1
 8003378:	4413      	add	r3, r2
 800337a:	00db      	lsls	r3, r3, #3
 800337c:	440b      	add	r3, r1
 800337e:	330c      	adds	r3, #12
 8003380:	2200      	movs	r2, #0
 8003382:	701a      	strb	r2, [r3, #0]
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 8003384:	7ffb      	ldrb	r3, [r7, #31]
 8003386:	3301      	adds	r3, #1
 8003388:	77fb      	strb	r3, [r7, #31]
 800338a:	7ffb      	ldrb	r3, [r7, #31]
 800338c:	2b05      	cmp	r3, #5
 800338e:	d9ef      	bls.n	8003370 <HW_TS_Init+0xf4>
    }

    CurrentRunningTimerID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;   /**<  Set ID to non valid value */
 8003390:	4b2b      	ldr	r3, [pc, #172]	; (8003440 <HW_TS_Init+0x1c4>)
 8003392:	2206      	movs	r2, #6
 8003394:	701a      	strb	r2, [r3, #0]

    __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);                       /**<  Disable the Wakeup Timer */
 8003396:	4b21      	ldr	r3, [pc, #132]	; (800341c <HW_TS_Init+0x1a0>)
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	689a      	ldr	r2, [r3, #8]
 800339e:	4b1f      	ldr	r3, [pc, #124]	; (800341c <HW_TS_Init+0x1a0>)
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80033a8:	609a      	str	r2, [r3, #8]
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);     /**<  Clear flag in RTC module */
 80033aa:	4b1c      	ldr	r3, [pc, #112]	; (800341c <HW_TS_Init+0x1a0>)
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	68db      	ldr	r3, [r3, #12]
 80033b2:	b2da      	uxtb	r2, r3
 80033b4:	4b19      	ldr	r3, [pc, #100]	; (800341c <HW_TS_Init+0x1a0>)
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	f462 6290 	orn	r2, r2, #1152	; 0x480
 80033be:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module  */
 80033c0:	4b20      	ldr	r3, [pc, #128]	; (8003444 <HW_TS_Init+0x1c8>)
 80033c2:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80033c6:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);       /**<  Clear pending bit in NVIC  */
 80033c8:	2003      	movs	r0, #3
 80033ca:	f004 fd8d 	bl	8007ee8 <HAL_NVIC_ClearPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE_IT(phrtc, RTC_IT_WUT);         /**<  Enable interrupt in RTC module  */
 80033ce:	4b13      	ldr	r3, [pc, #76]	; (800341c <HW_TS_Init+0x1a0>)
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	689a      	ldr	r2, [r3, #8]
 80033d6:	4b11      	ldr	r3, [pc, #68]	; (800341c <HW_TS_Init+0x1a0>)
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80033e0:	609a      	str	r2, [r3, #8]
 80033e2:	e00a      	b.n	80033fa <HW_TS_Init+0x17e>
  }
  else
  {
    if(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTF) != RESET)
 80033e4:	4b0d      	ldr	r3, [pc, #52]	; (800341c <HW_TS_Init+0x1a0>)
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	68db      	ldr	r3, [r3, #12]
 80033ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d002      	beq.n	80033fa <HW_TS_Init+0x17e>
    {
      /**
       * Simulate that the Timer expired
       */
      HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 80033f4:	2003      	movs	r0, #3
 80033f6:	f004 fd69 	bl	8007ecc <HAL_NVIC_SetPendingIRQ>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 80033fa:	4b08      	ldr	r3, [pc, #32]	; (800341c <HW_TS_Init+0x1a0>)
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	22ff      	movs	r2, #255	; 0xff
 8003402:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_SetPriority(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_PREEMPTPRIO, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_SUBPRIO);   /**<  Set NVIC priority */
 8003404:	2200      	movs	r2, #0
 8003406:	2106      	movs	r1, #6
 8003408:	2003      	movs	r0, #3
 800340a:	f004 fd29 	bl	8007e60 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 800340e:	2003      	movs	r0, #3
 8003410:	f004 fd40 	bl	8007e94 <HAL_NVIC_EnableIRQ>

  return;
 8003414:	bf00      	nop
}
 8003416:	3720      	adds	r7, #32
 8003418:	46bd      	mov	sp, r7
 800341a:	bd80      	pop	{r7, pc}
 800341c:	20000398 	.word	0x20000398
 8003420:	40002800 	.word	0x40002800
 8003424:	2000039c 	.word	0x2000039c
 8003428:	2000039d 	.word	0x2000039d
 800342c:	2000039e 	.word	0x2000039e
 8003430:	200003a0 	.word	0x200003a0
 8003434:	20000318 	.word	0x20000318
 8003438:	20000314 	.word	0x20000314
 800343c:	20000280 	.word	0x20000280
 8003440:	20000310 	.word	0x20000310
 8003444:	58000800 	.word	0x58000800

08003448 <HW_TS_Create>:

HW_TS_ReturnStatus_t HW_TS_Create(uint32_t TimerProcessID, uint8_t *pTimerId, HW_TS_Mode_t TimerMode, HW_TS_pTimerCb_t pftimeout_handler)
{
 8003448:	b480      	push	{r7}
 800344a:	b08b      	sub	sp, #44	; 0x2c
 800344c:	af00      	add	r7, sp, #0
 800344e:	60f8      	str	r0, [r7, #12]
 8003450:	60b9      	str	r1, [r7, #8]
 8003452:	603b      	str	r3, [r7, #0]
 8003454:	4613      	mov	r3, r2
 8003456:	71fb      	strb	r3, [r7, #7]
  HW_TS_ReturnStatus_t localreturnstatus;
  uint8_t loop = 0;
 8003458:	2300      	movs	r3, #0
 800345a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800345e:	f3ef 8310 	mrs	r3, PRIMASK
 8003462:	61fb      	str	r3, [r7, #28]
  return(result);
 8003464:	69fb      	ldr	r3, [r7, #28]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8003466:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 8003468:	b672      	cpsid	i
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  while((loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[loop].TimerIDStatus != TimerID_Free))
 800346a:	e004      	b.n	8003476 <HW_TS_Create+0x2e>
  {
    loop++;
 800346c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8003470:	3301      	adds	r3, #1
 8003472:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  while((loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[loop].TimerIDStatus != TimerID_Free))
 8003476:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800347a:	2b05      	cmp	r3, #5
 800347c:	d80c      	bhi.n	8003498 <HW_TS_Create+0x50>
 800347e:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8003482:	492b      	ldr	r1, [pc, #172]	; (8003530 <HW_TS_Create+0xe8>)
 8003484:	4613      	mov	r3, r2
 8003486:	005b      	lsls	r3, r3, #1
 8003488:	4413      	add	r3, r2
 800348a:	00db      	lsls	r3, r3, #3
 800348c:	440b      	add	r3, r1
 800348e:	330c      	adds	r3, #12
 8003490:	781b      	ldrb	r3, [r3, #0]
 8003492:	b2db      	uxtb	r3, r3
 8003494:	2b00      	cmp	r3, #0
 8003496:	d1e9      	bne.n	800346c <HW_TS_Create+0x24>
  }

  if(loop != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8003498:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800349c:	2b06      	cmp	r3, #6
 800349e:	d037      	beq.n	8003510 <HW_TS_Create+0xc8>
  {
    aTimerContext[loop].TimerIDStatus = TimerID_Created;
 80034a0:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80034a4:	4922      	ldr	r1, [pc, #136]	; (8003530 <HW_TS_Create+0xe8>)
 80034a6:	4613      	mov	r3, r2
 80034a8:	005b      	lsls	r3, r3, #1
 80034aa:	4413      	add	r3, r2
 80034ac:	00db      	lsls	r3, r3, #3
 80034ae:	440b      	add	r3, r1
 80034b0:	330c      	adds	r3, #12
 80034b2:	2201      	movs	r2, #1
 80034b4:	701a      	strb	r2, [r3, #0]
 80034b6:	6a3b      	ldr	r3, [r7, #32]
 80034b8:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80034ba:	69bb      	ldr	r3, [r7, #24]
 80034bc:	f383 8810 	msr	PRIMASK, r3

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

    aTimerContext[loop].TimerProcessID = TimerProcessID;
 80034c0:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80034c4:	491a      	ldr	r1, [pc, #104]	; (8003530 <HW_TS_Create+0xe8>)
 80034c6:	4613      	mov	r3, r2
 80034c8:	005b      	lsls	r3, r3, #1
 80034ca:	4413      	add	r3, r2
 80034cc:	00db      	lsls	r3, r3, #3
 80034ce:	440b      	add	r3, r1
 80034d0:	3310      	adds	r3, #16
 80034d2:	68fa      	ldr	r2, [r7, #12]
 80034d4:	601a      	str	r2, [r3, #0]
    aTimerContext[loop].TimerMode = TimerMode;
 80034d6:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80034da:	4915      	ldr	r1, [pc, #84]	; (8003530 <HW_TS_Create+0xe8>)
 80034dc:	4613      	mov	r3, r2
 80034de:	005b      	lsls	r3, r3, #1
 80034e0:	4413      	add	r3, r2
 80034e2:	00db      	lsls	r3, r3, #3
 80034e4:	440b      	add	r3, r1
 80034e6:	330d      	adds	r3, #13
 80034e8:	79fa      	ldrb	r2, [r7, #7]
 80034ea:	701a      	strb	r2, [r3, #0]
    aTimerContext[loop].pTimerCallBack = pftimeout_handler;
 80034ec:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80034f0:	490f      	ldr	r1, [pc, #60]	; (8003530 <HW_TS_Create+0xe8>)
 80034f2:	4613      	mov	r3, r2
 80034f4:	005b      	lsls	r3, r3, #1
 80034f6:	4413      	add	r3, r2
 80034f8:	00db      	lsls	r3, r3, #3
 80034fa:	440b      	add	r3, r1
 80034fc:	683a      	ldr	r2, [r7, #0]
 80034fe:	601a      	str	r2, [r3, #0]
    *pTimerId = loop;
 8003500:	68bb      	ldr	r3, [r7, #8]
 8003502:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8003506:	701a      	strb	r2, [r3, #0]

    localreturnstatus = hw_ts_Successful;
 8003508:	2300      	movs	r3, #0
 800350a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800350e:	e007      	b.n	8003520 <HW_TS_Create+0xd8>
 8003510:	6a3b      	ldr	r3, [r7, #32]
 8003512:	617b      	str	r3, [r7, #20]
 8003514:	697b      	ldr	r3, [r7, #20]
 8003516:	f383 8810 	msr	PRIMASK, r3
  {
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

    localreturnstatus = hw_ts_Failed;
 800351a:	2301      	movs	r3, #1
 800351c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  return(localreturnstatus);
 8003520:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8003524:	4618      	mov	r0, r3
 8003526:	372c      	adds	r7, #44	; 0x2c
 8003528:	46bd      	mov	sp, r7
 800352a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800352e:	4770      	bx	lr
 8003530:	20000280 	.word	0x20000280

08003534 <HW_TS_Stop>:

  return;
}

void HW_TS_Stop(uint8_t timer_id)
{
 8003534:	b580      	push	{r7, lr}
 8003536:	b086      	sub	sp, #24
 8003538:	af00      	add	r7, sp, #0
 800353a:	4603      	mov	r3, r0
 800353c:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800353e:	f3ef 8310 	mrs	r3, PRIMASK
 8003542:	60fb      	str	r3, [r7, #12]
  return(result);
 8003544:	68fb      	ldr	r3, [r7, #12]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8003546:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8003548:	b672      	cpsid	i
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 800354a:	2003      	movs	r0, #3
 800354c:	f004 fcb0 	bl	8007eb0 <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8003550:	4b37      	ldr	r3, [pc, #220]	; (8003630 <HW_TS_Stop+0xfc>)
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	22ca      	movs	r2, #202	; 0xca
 8003558:	625a      	str	r2, [r3, #36]	; 0x24
 800355a:	4b35      	ldr	r3, [pc, #212]	; (8003630 <HW_TS_Stop+0xfc>)
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	2253      	movs	r2, #83	; 0x53
 8003562:	625a      	str	r2, [r3, #36]	; 0x24

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 8003564:	79fa      	ldrb	r2, [r7, #7]
 8003566:	4933      	ldr	r1, [pc, #204]	; (8003634 <HW_TS_Stop+0x100>)
 8003568:	4613      	mov	r3, r2
 800356a:	005b      	lsls	r3, r3, #1
 800356c:	4413      	add	r3, r2
 800356e:	00db      	lsls	r3, r3, #3
 8003570:	440b      	add	r3, r1
 8003572:	330c      	adds	r3, #12
 8003574:	781b      	ldrb	r3, [r3, #0]
 8003576:	b2db      	uxtb	r3, r3
 8003578:	2b02      	cmp	r3, #2
 800357a:	d148      	bne.n	800360e <HW_TS_Stop+0xda>
  {
    UnlinkTimer(timer_id, SSR_Read_Requested);
 800357c:	79fb      	ldrb	r3, [r7, #7]
 800357e:	2100      	movs	r1, #0
 8003580:	4618      	mov	r0, r3
 8003582:	f7ff fbeb 	bl	8002d5c <UnlinkTimer>
    localcurrentrunningtimerid = CurrentRunningTimerID;
 8003586:	4b2c      	ldr	r3, [pc, #176]	; (8003638 <HW_TS_Stop+0x104>)
 8003588:	781b      	ldrb	r3, [r3, #0]
 800358a:	74fb      	strb	r3, [r7, #19]

    if(localcurrentrunningtimerid == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 800358c:	7cfb      	ldrb	r3, [r7, #19]
 800358e:	2b06      	cmp	r3, #6
 8003590:	d135      	bne.n	80035fe <HW_TS_Stop+0xca>
       */

      /**
       * Disable the timer
       */
      if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 8003592:	4b2a      	ldr	r3, [pc, #168]	; (800363c <HW_TS_Stop+0x108>)
 8003594:	689b      	ldr	r3, [r3, #8]
 8003596:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800359a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800359e:	d108      	bne.n	80035b2 <HW_TS_Stop+0x7e>
      {
        /**
         * Wait for the flag to be back to 0 when the wakeup timer is enabled
         */
        while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == SET);
 80035a0:	bf00      	nop
 80035a2:	4b23      	ldr	r3, [pc, #140]	; (8003630 <HW_TS_Stop+0xfc>)
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	68db      	ldr	r3, [r3, #12]
 80035aa:	f003 0304 	and.w	r3, r3, #4
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d1f7      	bne.n	80035a2 <HW_TS_Stop+0x6e>
      }
      __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);   /**<  Disable the Wakeup Timer */
 80035b2:	4b1f      	ldr	r3, [pc, #124]	; (8003630 <HW_TS_Stop+0xfc>)
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	689a      	ldr	r2, [r3, #8]
 80035ba:	4b1d      	ldr	r3, [pc, #116]	; (8003630 <HW_TS_Stop+0xfc>)
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80035c4:	609a      	str	r2, [r3, #8]

      while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == RESET);
 80035c6:	bf00      	nop
 80035c8:	4b19      	ldr	r3, [pc, #100]	; (8003630 <HW_TS_Stop+0xfc>)
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	68db      	ldr	r3, [r3, #12]
 80035d0:	f003 0304 	and.w	r3, r3, #4
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d0f7      	beq.n	80035c8 <HW_TS_Stop+0x94>
       * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
       * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
       * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
       * due to the autoreload feature
       */
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 80035d8:	4b15      	ldr	r3, [pc, #84]	; (8003630 <HW_TS_Stop+0xfc>)
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	68db      	ldr	r3, [r3, #12]
 80035e0:	b2da      	uxtb	r2, r3
 80035e2:	4b13      	ldr	r3, [pc, #76]	; (8003630 <HW_TS_Stop+0xfc>)
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f462 6290 	orn	r2, r2, #1152	; 0x480
 80035ec:	60da      	str	r2, [r3, #12]
      __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 80035ee:	4b14      	ldr	r3, [pc, #80]	; (8003640 <HW_TS_Stop+0x10c>)
 80035f0:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80035f4:	60da      	str	r2, [r3, #12]
      HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 80035f6:	2003      	movs	r0, #3
 80035f8:	f004 fc76 	bl	8007ee8 <HAL_NVIC_ClearPendingIRQ>
 80035fc:	e007      	b.n	800360e <HW_TS_Stop+0xda>
    }
    else if(PreviousRunningTimerID != localcurrentrunningtimerid)
 80035fe:	4b11      	ldr	r3, [pc, #68]	; (8003644 <HW_TS_Stop+0x110>)
 8003600:	781b      	ldrb	r3, [r3, #0]
 8003602:	b2db      	uxtb	r3, r3
 8003604:	7cfa      	ldrb	r2, [r7, #19]
 8003606:	429a      	cmp	r2, r3
 8003608:	d001      	beq.n	800360e <HW_TS_Stop+0xda>
    {
      RescheduleTimerList();
 800360a:	f7ff fcc9 	bl	8002fa0 <RescheduleTimerList>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 800360e:	4b08      	ldr	r3, [pc, #32]	; (8003630 <HW_TS_Stop+0xfc>)
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	22ff      	movs	r2, #255	; 0xff
 8003616:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8003618:	2003      	movs	r0, #3
 800361a:	f004 fc3b 	bl	8007e94 <HAL_NVIC_EnableIRQ>
 800361e:	697b      	ldr	r3, [r7, #20]
 8003620:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003622:	68bb      	ldr	r3, [r7, #8]
 8003624:	f383 8810 	msr	PRIMASK, r3

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 8003628:	bf00      	nop
}
 800362a:	3718      	adds	r7, #24
 800362c:	46bd      	mov	sp, r7
 800362e:	bd80      	pop	{r7, pc}
 8003630:	20000398 	.word	0x20000398
 8003634:	20000280 	.word	0x20000280
 8003638:	20000310 	.word	0x20000310
 800363c:	40002800 	.word	0x40002800
 8003640:	58000800 	.word	0x58000800
 8003644:	20000311 	.word	0x20000311

08003648 <HW_TS_Start>:

void HW_TS_Start(uint8_t timer_id, uint32_t timeout_ticks)
{
 8003648:	b580      	push	{r7, lr}
 800364a:	b086      	sub	sp, #24
 800364c:	af00      	add	r7, sp, #0
 800364e:	4603      	mov	r3, r0
 8003650:	6039      	str	r1, [r7, #0]
 8003652:	71fb      	strb	r3, [r7, #7]

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 8003654:	79fa      	ldrb	r2, [r7, #7]
 8003656:	493b      	ldr	r1, [pc, #236]	; (8003744 <HW_TS_Start+0xfc>)
 8003658:	4613      	mov	r3, r2
 800365a:	005b      	lsls	r3, r3, #1
 800365c:	4413      	add	r3, r2
 800365e:	00db      	lsls	r3, r3, #3
 8003660:	440b      	add	r3, r1
 8003662:	330c      	adds	r3, #12
 8003664:	781b      	ldrb	r3, [r3, #0]
 8003666:	b2db      	uxtb	r3, r3
 8003668:	2b02      	cmp	r3, #2
 800366a:	d103      	bne.n	8003674 <HW_TS_Start+0x2c>
  {
    HW_TS_Stop( timer_id );
 800366c:	79fb      	ldrb	r3, [r7, #7]
 800366e:	4618      	mov	r0, r3
 8003670:	f7ff ff60 	bl	8003534 <HW_TS_Stop>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003674:	f3ef 8310 	mrs	r3, PRIMASK
 8003678:	60fb      	str	r3, [r7, #12]
  return(result);
 800367a:	68fb      	ldr	r3, [r7, #12]
  }

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800367c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800367e:	b672      	cpsid	i
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 8003680:	2003      	movs	r0, #3
 8003682:	f004 fc15 	bl	8007eb0 <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8003686:	4b30      	ldr	r3, [pc, #192]	; (8003748 <HW_TS_Start+0x100>)
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	22ca      	movs	r2, #202	; 0xca
 800368e:	625a      	str	r2, [r3, #36]	; 0x24
 8003690:	4b2d      	ldr	r3, [pc, #180]	; (8003748 <HW_TS_Start+0x100>)
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	2253      	movs	r2, #83	; 0x53
 8003698:	625a      	str	r2, [r3, #36]	; 0x24

  aTimerContext[timer_id].TimerIDStatus = TimerID_Running;
 800369a:	79fa      	ldrb	r2, [r7, #7]
 800369c:	4929      	ldr	r1, [pc, #164]	; (8003744 <HW_TS_Start+0xfc>)
 800369e:	4613      	mov	r3, r2
 80036a0:	005b      	lsls	r3, r3, #1
 80036a2:	4413      	add	r3, r2
 80036a4:	00db      	lsls	r3, r3, #3
 80036a6:	440b      	add	r3, r1
 80036a8:	330c      	adds	r3, #12
 80036aa:	2202      	movs	r2, #2
 80036ac:	701a      	strb	r2, [r3, #0]

  aTimerContext[timer_id].CountLeft = timeout_ticks;
 80036ae:	79fa      	ldrb	r2, [r7, #7]
 80036b0:	4924      	ldr	r1, [pc, #144]	; (8003744 <HW_TS_Start+0xfc>)
 80036b2:	4613      	mov	r3, r2
 80036b4:	005b      	lsls	r3, r3, #1
 80036b6:	4413      	add	r3, r2
 80036b8:	00db      	lsls	r3, r3, #3
 80036ba:	440b      	add	r3, r1
 80036bc:	3308      	adds	r3, #8
 80036be:	683a      	ldr	r2, [r7, #0]
 80036c0:	601a      	str	r2, [r3, #0]
  aTimerContext[timer_id].CounterInit = timeout_ticks;
 80036c2:	79fa      	ldrb	r2, [r7, #7]
 80036c4:	491f      	ldr	r1, [pc, #124]	; (8003744 <HW_TS_Start+0xfc>)
 80036c6:	4613      	mov	r3, r2
 80036c8:	005b      	lsls	r3, r3, #1
 80036ca:	4413      	add	r3, r2
 80036cc:	00db      	lsls	r3, r3, #3
 80036ce:	440b      	add	r3, r1
 80036d0:	3304      	adds	r3, #4
 80036d2:	683a      	ldr	r2, [r7, #0]
 80036d4:	601a      	str	r2, [r3, #0]

  time_elapsed =  linkTimer(timer_id);
 80036d6:	79fb      	ldrb	r3, [r7, #7]
 80036d8:	4618      	mov	r0, r3
 80036da:	f7ff fa95 	bl	8002c08 <linkTimer>
 80036de:	4603      	mov	r3, r0
 80036e0:	827b      	strh	r3, [r7, #18]

  localcurrentrunningtimerid = CurrentRunningTimerID;
 80036e2:	4b1a      	ldr	r3, [pc, #104]	; (800374c <HW_TS_Start+0x104>)
 80036e4:	781b      	ldrb	r3, [r3, #0]
 80036e6:	747b      	strb	r3, [r7, #17]

  if(PreviousRunningTimerID != localcurrentrunningtimerid)
 80036e8:	4b19      	ldr	r3, [pc, #100]	; (8003750 <HW_TS_Start+0x108>)
 80036ea:	781b      	ldrb	r3, [r3, #0]
 80036ec:	b2db      	uxtb	r3, r3
 80036ee:	7c7a      	ldrb	r2, [r7, #17]
 80036f0:	429a      	cmp	r2, r3
 80036f2:	d002      	beq.n	80036fa <HW_TS_Start+0xb2>
  {
    RescheduleTimerList();
 80036f4:	f7ff fc54 	bl	8002fa0 <RescheduleTimerList>
 80036f8:	e013      	b.n	8003722 <HW_TS_Start+0xda>
  }
  else
  {
    aTimerContext[timer_id].CountLeft -= time_elapsed;
 80036fa:	79fa      	ldrb	r2, [r7, #7]
 80036fc:	4911      	ldr	r1, [pc, #68]	; (8003744 <HW_TS_Start+0xfc>)
 80036fe:	4613      	mov	r3, r2
 8003700:	005b      	lsls	r3, r3, #1
 8003702:	4413      	add	r3, r2
 8003704:	00db      	lsls	r3, r3, #3
 8003706:	440b      	add	r3, r1
 8003708:	3308      	adds	r3, #8
 800370a:	6819      	ldr	r1, [r3, #0]
 800370c:	8a7b      	ldrh	r3, [r7, #18]
 800370e:	79fa      	ldrb	r2, [r7, #7]
 8003710:	1ac9      	subs	r1, r1, r3
 8003712:	480c      	ldr	r0, [pc, #48]	; (8003744 <HW_TS_Start+0xfc>)
 8003714:	4613      	mov	r3, r2
 8003716:	005b      	lsls	r3, r3, #1
 8003718:	4413      	add	r3, r2
 800371a:	00db      	lsls	r3, r3, #3
 800371c:	4403      	add	r3, r0
 800371e:	3308      	adds	r3, #8
 8003720:	6019      	str	r1, [r3, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 8003722:	4b09      	ldr	r3, [pc, #36]	; (8003748 <HW_TS_Start+0x100>)
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	22ff      	movs	r2, #255	; 0xff
 800372a:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 800372c:	2003      	movs	r0, #3
 800372e:	f004 fbb1 	bl	8007e94 <HAL_NVIC_EnableIRQ>
 8003732:	697b      	ldr	r3, [r7, #20]
 8003734:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003736:	68bb      	ldr	r3, [r7, #8]
 8003738:	f383 8810 	msr	PRIMASK, r3

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 800373c:	bf00      	nop
}
 800373e:	3718      	adds	r7, #24
 8003740:	46bd      	mov	sp, r7
 8003742:	bd80      	pop	{r7, pc}
 8003744:	20000280 	.word	0x20000280
 8003748:	20000398 	.word	0x20000398
 800374c:	20000310 	.word	0x20000310
 8003750:	20000311 	.word	0x20000311

08003754 <HW_TS_RTC_Int_AppNot>:

  return (return_value);
}

__weak void HW_TS_RTC_Int_AppNot(uint32_t TimerProcessID, uint8_t TimerID, HW_TS_pTimerCb_t pTimerCallBack)
{
 8003754:	b580      	push	{r7, lr}
 8003756:	b084      	sub	sp, #16
 8003758:	af00      	add	r7, sp, #0
 800375a:	60f8      	str	r0, [r7, #12]
 800375c:	460b      	mov	r3, r1
 800375e:	607a      	str	r2, [r7, #4]
 8003760:	72fb      	strb	r3, [r7, #11]
  pTimerCallBack();
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	4798      	blx	r3

  return;
 8003766:	bf00      	nop
}
 8003768:	3710      	adds	r7, #16
 800376a:	46bd      	mov	sp, r7
 800376c:	bd80      	pop	{r7, pc}
	...

08003770 <HW_UART_Transmit_DMA>:

    return hw_status;
}

hw_status_t HW_UART_Transmit_DMA(hw_uart_id_t hw_uart_id, uint8_t *p_data, uint16_t size, void (*cb)(void))
{
 8003770:	b480      	push	{r7}
 8003772:	b087      	sub	sp, #28
 8003774:	af00      	add	r7, sp, #0
 8003776:	60b9      	str	r1, [r7, #8]
 8003778:	607b      	str	r3, [r7, #4]
 800377a:	4603      	mov	r3, r0
 800377c:	73fb      	strb	r3, [r7, #15]
 800377e:	4613      	mov	r3, r2
 8003780:	81bb      	strh	r3, [r7, #12]
    HAL_StatusTypeDef hal_status = HAL_OK;
 8003782:	2300      	movs	r3, #0
 8003784:	75bb      	strb	r3, [r7, #22]
    hw_status_t hw_status = hw_uart_ok;
 8003786:	2300      	movs	r3, #0
 8003788:	75fb      	strb	r3, [r7, #23]
            hal_status = HAL_UART_Transmit_DMA(&hlpuart1, p_data, size);
            break;
#endif

        default:
            break;
 800378a:	bf00      	nop
    }

    switch (hal_status)
 800378c:	7dbb      	ldrb	r3, [r7, #22]
 800378e:	2b03      	cmp	r3, #3
 8003790:	d816      	bhi.n	80037c0 <HW_UART_Transmit_DMA+0x50>
 8003792:	a201      	add	r2, pc, #4	; (adr r2, 8003798 <HW_UART_Transmit_DMA+0x28>)
 8003794:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003798:	080037a9 	.word	0x080037a9
 800379c:	080037af 	.word	0x080037af
 80037a0:	080037b5 	.word	0x080037b5
 80037a4:	080037bb 	.word	0x080037bb
    {
        case HAL_OK:
            hw_status = hw_uart_ok;
 80037a8:	2300      	movs	r3, #0
 80037aa:	75fb      	strb	r3, [r7, #23]
            break;
 80037ac:	e009      	b.n	80037c2 <HW_UART_Transmit_DMA+0x52>

        case HAL_ERROR:
            hw_status = hw_uart_error;
 80037ae:	2301      	movs	r3, #1
 80037b0:	75fb      	strb	r3, [r7, #23]
            break;
 80037b2:	e006      	b.n	80037c2 <HW_UART_Transmit_DMA+0x52>

        case HAL_BUSY:
            hw_status = hw_uart_busy;
 80037b4:	2302      	movs	r3, #2
 80037b6:	75fb      	strb	r3, [r7, #23]
            break;
 80037b8:	e003      	b.n	80037c2 <HW_UART_Transmit_DMA+0x52>

        case HAL_TIMEOUT:
            hw_status = hw_uart_to;
 80037ba:	2303      	movs	r3, #3
 80037bc:	75fb      	strb	r3, [r7, #23]
            break;
 80037be:	e000      	b.n	80037c2 <HW_UART_Transmit_DMA+0x52>

        default:
            break;
 80037c0:	bf00      	nop
    }

    return hw_status;
 80037c2:	7dfb      	ldrb	r3, [r7, #23]
}
 80037c4:	4618      	mov	r0, r3
 80037c6:	371c      	adds	r7, #28
 80037c8:	46bd      	mov	sp, r7
 80037ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ce:	4770      	bx	lr

080037d0 <_angle_correction>:





int _angle_correction(int measured_angle){
 80037d0:	b480      	push	{r7}
 80037d2:	b089      	sub	sp, #36	; 0x24
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	6078      	str	r0, [r7, #4]
  //given a measured angle, get back a warped angle interpolated from measured corrections
  int i=0;
 80037d8:	2300      	movs	r3, #0
 80037da:	61fb      	str	r3, [r7, #28]
  while(measured_angle > MAP_ANGLE_MEASURED[i+1]) i++;
 80037dc:	e002      	b.n	80037e4 <_angle_correction+0x14>
 80037de:	69fb      	ldr	r3, [r7, #28]
 80037e0:	3301      	adds	r3, #1
 80037e2:	61fb      	str	r3, [r7, #28]
 80037e4:	69fb      	ldr	r3, [r7, #28]
 80037e6:	3301      	adds	r3, #1
 80037e8:	4a1f      	ldr	r2, [pc, #124]	; (8003868 <_angle_correction+0x98>)
 80037ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80037ee:	687a      	ldr	r2, [r7, #4]
 80037f0:	429a      	cmp	r2, r3
 80037f2:	dcf4      	bgt.n	80037de <_angle_correction+0xe>

  int low_m = MAP_ANGLE_MEASURED[i];
 80037f4:	4a1c      	ldr	r2, [pc, #112]	; (8003868 <_angle_correction+0x98>)
 80037f6:	69fb      	ldr	r3, [r7, #28]
 80037f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80037fc:	61bb      	str	r3, [r7, #24]
  int high_m = MAP_ANGLE_MEASURED[i+1];
 80037fe:	69fb      	ldr	r3, [r7, #28]
 8003800:	3301      	adds	r3, #1
 8003802:	4a19      	ldr	r2, [pc, #100]	; (8003868 <_angle_correction+0x98>)
 8003804:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003808:	617b      	str	r3, [r7, #20]
  int low_r = MAP_ANGLE_REAL[i];
 800380a:	4a18      	ldr	r2, [pc, #96]	; (800386c <_angle_correction+0x9c>)
 800380c:	69fb      	ldr	r3, [r7, #28]
 800380e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003812:	613b      	str	r3, [r7, #16]
  int high_r = MAP_ANGLE_REAL[i+1];
 8003814:	69fb      	ldr	r3, [r7, #28]
 8003816:	3301      	adds	r3, #1
 8003818:	4a14      	ldr	r2, [pc, #80]	; (800386c <_angle_correction+0x9c>)
 800381a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800381e:	60fb      	str	r3, [r7, #12]

  int scaled = (int)((high_r-low_r)*(measured_angle-low_m)/(float)(high_m-low_m));
 8003820:	68fa      	ldr	r2, [r7, #12]
 8003822:	693b      	ldr	r3, [r7, #16]
 8003824:	1ad3      	subs	r3, r2, r3
 8003826:	6879      	ldr	r1, [r7, #4]
 8003828:	69ba      	ldr	r2, [r7, #24]
 800382a:	1a8a      	subs	r2, r1, r2
 800382c:	fb02 f303 	mul.w	r3, r2, r3
 8003830:	ee07 3a90 	vmov	s15, r3
 8003834:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8003838:	697a      	ldr	r2, [r7, #20]
 800383a:	69bb      	ldr	r3, [r7, #24]
 800383c:	1ad3      	subs	r3, r2, r3
 800383e:	ee07 3a90 	vmov	s15, r3
 8003842:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003846:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800384a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800384e:	ee17 3a90 	vmov	r3, s15
 8003852:	60bb      	str	r3, [r7, #8]
  return (low_r + scaled);
 8003854:	693a      	ldr	r2, [r7, #16]
 8003856:	68bb      	ldr	r3, [r7, #8]
 8003858:	4413      	add	r3, r2
}
 800385a:	4618      	mov	r0, r3
 800385c:	3724      	adds	r7, #36	; 0x24
 800385e:	46bd      	mov	sp, r7
 8003860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003864:	4770      	bx	lr
 8003866:	bf00      	nop
 8003868:	08019948 	.word	0x08019948
 800386c:	08019924 	.word	0x08019924

08003870 <_get_pad_angle>:


int _get_pad_angle(int p1, int p2){
 8003870:	b590      	push	{r4, r7, lr}
 8003872:	b083      	sub	sp, #12
 8003874:	af00      	add	r7, sp, #0
 8003876:	6078      	str	r0, [r7, #4]
 8003878:	6039      	str	r1, [r7, #0]
    //return angle from 0 to 120 degrees between two pads given their two values
    if (p1 == 0) return 120;
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	2b00      	cmp	r3, #0
 800387e:	d101      	bne.n	8003884 <_get_pad_angle+0x14>
 8003880:	2378      	movs	r3, #120	; 0x78
 8003882:	e02c      	b.n	80038de <_get_pad_angle+0x6e>
    if (p2 == 0) return 0;
 8003884:	683b      	ldr	r3, [r7, #0]
 8003886:	2b00      	cmp	r3, #0
 8003888:	d101      	bne.n	800388e <_get_pad_angle+0x1e>
 800388a:	2300      	movs	r3, #0
 800388c:	e027      	b.n	80038de <_get_pad_angle+0x6e>
    return round(((float)(p2)/(float)(p1+p2))*120.0);
 800388e:	683b      	ldr	r3, [r7, #0]
 8003890:	ee07 3a90 	vmov	s15, r3
 8003894:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003898:	687a      	ldr	r2, [r7, #4]
 800389a:	683b      	ldr	r3, [r7, #0]
 800389c:	4413      	add	r3, r2
 800389e:	ee07 3a90 	vmov	s15, r3
 80038a2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80038a6:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80038aa:	ee16 0a90 	vmov	r0, s13
 80038ae:	f7fc fe23 	bl	80004f8 <__aeabi_f2d>
 80038b2:	f04f 0200 	mov.w	r2, #0
 80038b6:	4b0c      	ldr	r3, [pc, #48]	; (80038e8 <_get_pad_angle+0x78>)
 80038b8:	f7fc fe76 	bl	80005a8 <__aeabi_dmul>
 80038bc:	4603      	mov	r3, r0
 80038be:	460c      	mov	r4, r1
 80038c0:	ec44 3b17 	vmov	d7, r3, r4
 80038c4:	eeb0 0a47 	vmov.f32	s0, s14
 80038c8:	eef0 0a67 	vmov.f32	s1, s15
 80038cc:	f013 f892 	bl	80169f4 <round>
 80038d0:	ec54 3b10 	vmov	r3, r4, d0
 80038d4:	4618      	mov	r0, r3
 80038d6:	4621      	mov	r1, r4
 80038d8:	f7fd f916 	bl	8000b08 <__aeabi_d2iz>
 80038dc:	4603      	mov	r3, r0
}
 80038de:	4618      	mov	r0, r3
 80038e0:	370c      	adds	r7, #12
 80038e2:	46bd      	mov	sp, r7
 80038e4:	bd90      	pop	{r4, r7, pc}
 80038e6:	bf00      	nop
 80038e8:	405e0000 	.word	0x405e0000

080038ec <_get_angle>:


int _get_angle(int* c) {
 80038ec:	b580      	push	{r7, lr}
 80038ee:	b08a      	sub	sp, #40	; 0x28
 80038f0:	af00      	add	r7, sp, #0
 80038f2:	6078      	str	r0, [r7, #4]
  //c[0] is proximity
  //60 min on clock, so 6 deg resolution
  //3 pads.  take top 2 values, map linearly to 120 degree slice.
  int angle = ANGLE_OFFSET;
 80038f4:	f240 1361 	movw	r3, #353	; 0x161
 80038f8:	627b      	str	r3, [r7, #36]	; 0x24
  int warped_angle;

  if ( ((c[1]==0) + (c[2]==0) + (c[3]==0)) > 1){//if more than one value is zero
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	3304      	adds	r3, #4
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	2b00      	cmp	r3, #0
 8003902:	bf0c      	ite	eq
 8003904:	2301      	moveq	r3, #1
 8003906:	2300      	movne	r3, #0
 8003908:	b2db      	uxtb	r3, r3
 800390a:	461a      	mov	r2, r3
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	3308      	adds	r3, #8
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	2b00      	cmp	r3, #0
 8003914:	bf0c      	ite	eq
 8003916:	2301      	moveq	r3, #1
 8003918:	2300      	movne	r3, #0
 800391a:	b2db      	uxtb	r3, r3
 800391c:	4413      	add	r3, r2
 800391e:	687a      	ldr	r2, [r7, #4]
 8003920:	320c      	adds	r2, #12
 8003922:	6812      	ldr	r2, [r2, #0]
 8003924:	2a00      	cmp	r2, #0
 8003926:	bf0c      	ite	eq
 8003928:	2201      	moveq	r2, #1
 800392a:	2200      	movne	r2, #0
 800392c:	b2d2      	uxtb	r2, r2
 800392e:	4413      	add	r3, r2
 8003930:	2b01      	cmp	r3, #1
 8003932:	dd1a      	ble.n	800396a <_get_angle+0x7e>
	  if (c[1]) angle += 0;
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	3304      	adds	r3, #4
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	2b00      	cmp	r3, #0
 800393c:	f040 8081 	bne.w	8003a42 <_get_angle+0x156>
	  else if (c[2]) angle += 120;
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	3308      	adds	r3, #8
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	2b00      	cmp	r3, #0
 8003948:	d003      	beq.n	8003952 <_get_angle+0x66>
 800394a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800394c:	3378      	adds	r3, #120	; 0x78
 800394e:	627b      	str	r3, [r7, #36]	; 0x24
 8003950:	e077      	b.n	8003a42 <_get_angle+0x156>
	  else if (c[3]) angle += 240;
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	330c      	adds	r3, #12
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	2b00      	cmp	r3, #0
 800395a:	d003      	beq.n	8003964 <_get_angle+0x78>
 800395c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800395e:	33f0      	adds	r3, #240	; 0xf0
 8003960:	627b      	str	r3, [r7, #36]	; 0x24
 8003962:	e06e      	b.n	8003a42 <_get_angle+0x156>
	  else return -1;
 8003964:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003968:	e07e      	b.n	8003a68 <_get_angle+0x17c>
  }

  else if (c[1] > c[3] && c[2] > c[3]) { //first third, between 1 and 2
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	3304      	adds	r3, #4
 800396e:	681a      	ldr	r2, [r3, #0]
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	330c      	adds	r3, #12
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	429a      	cmp	r2, r3
 8003978:	dd20      	ble.n	80039bc <_get_angle+0xd0>
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	3308      	adds	r3, #8
 800397e:	681a      	ldr	r2, [r3, #0]
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	330c      	adds	r3, #12
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	429a      	cmp	r2, r3
 8003988:	dd18      	ble.n	80039bc <_get_angle+0xd0>
    int pos1 = c[1]-c[3];
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	3304      	adds	r3, #4
 800398e:	681a      	ldr	r2, [r3, #0]
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	330c      	adds	r3, #12
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	1ad3      	subs	r3, r2, r3
 8003998:	623b      	str	r3, [r7, #32]
    int pos2 = c[2]-c[3];
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	3308      	adds	r3, #8
 800399e:	681a      	ldr	r2, [r3, #0]
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	330c      	adds	r3, #12
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	1ad3      	subs	r3, r2, r3
 80039a8:	61fb      	str	r3, [r7, #28]
    angle += _get_pad_angle(pos1, pos2);
 80039aa:	69f9      	ldr	r1, [r7, #28]
 80039ac:	6a38      	ldr	r0, [r7, #32]
 80039ae:	f7ff ff5f 	bl	8003870 <_get_pad_angle>
 80039b2:	4602      	mov	r2, r0
 80039b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039b6:	4413      	add	r3, r2
 80039b8:	627b      	str	r3, [r7, #36]	; 0x24
  else if (c[1] > c[3] && c[2] > c[3]) { //first third, between 1 and 2
 80039ba:	e042      	b.n	8003a42 <_get_angle+0x156>
  }

  else if (c[2] > c[1] && c[3] > c[1]) { //second third, between 2 and 3
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	3308      	adds	r3, #8
 80039c0:	681a      	ldr	r2, [r3, #0]
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	3304      	adds	r3, #4
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	429a      	cmp	r2, r3
 80039ca:	dd21      	ble.n	8003a10 <_get_angle+0x124>
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	330c      	adds	r3, #12
 80039d0:	681a      	ldr	r2, [r3, #0]
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	3304      	adds	r3, #4
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	429a      	cmp	r2, r3
 80039da:	dd19      	ble.n	8003a10 <_get_angle+0x124>
    int pos1 = c[2]-c[1];
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	3308      	adds	r3, #8
 80039e0:	681a      	ldr	r2, [r3, #0]
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	3304      	adds	r3, #4
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	1ad3      	subs	r3, r2, r3
 80039ea:	61bb      	str	r3, [r7, #24]
    int pos2 = c[3]-c[1];
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	330c      	adds	r3, #12
 80039f0:	681a      	ldr	r2, [r3, #0]
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	3304      	adds	r3, #4
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	1ad3      	subs	r3, r2, r3
 80039fa:	617b      	str	r3, [r7, #20]
    angle += _get_pad_angle(pos1, pos2) + 120;
 80039fc:	6979      	ldr	r1, [r7, #20]
 80039fe:	69b8      	ldr	r0, [r7, #24]
 8003a00:	f7ff ff36 	bl	8003870 <_get_pad_angle>
 8003a04:	4603      	mov	r3, r0
 8003a06:	3378      	adds	r3, #120	; 0x78
 8003a08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a0a:	4413      	add	r3, r2
 8003a0c:	627b      	str	r3, [r7, #36]	; 0x24
  else if (c[2] > c[1] && c[3] > c[1]) { //second third, between 2 and 3
 8003a0e:	e018      	b.n	8003a42 <_get_angle+0x156>
  }

  else { //third third, between 3 and 1
    int pos1 = c[3]-c[2];
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	330c      	adds	r3, #12
 8003a14:	681a      	ldr	r2, [r3, #0]
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	3308      	adds	r3, #8
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	1ad3      	subs	r3, r2, r3
 8003a1e:	613b      	str	r3, [r7, #16]
    int pos2 = c[1]-c[2];
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	3304      	adds	r3, #4
 8003a24:	681a      	ldr	r2, [r3, #0]
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	3308      	adds	r3, #8
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	1ad3      	subs	r3, r2, r3
 8003a2e:	60fb      	str	r3, [r7, #12]
    angle += _get_pad_angle(pos1, pos2) + 240;
 8003a30:	68f9      	ldr	r1, [r7, #12]
 8003a32:	6938      	ldr	r0, [r7, #16]
 8003a34:	f7ff ff1c 	bl	8003870 <_get_pad_angle>
 8003a38:	4603      	mov	r3, r0
 8003a3a:	33f0      	adds	r3, #240	; 0xf0
 8003a3c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a3e:	4413      	add	r3, r2
 8003a40:	627b      	str	r3, [r7, #36]	; 0x24
  }

  angle %= 360;
 8003a42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a44:	4a0a      	ldr	r2, [pc, #40]	; (8003a70 <_get_angle+0x184>)
 8003a46:	fb82 1203 	smull	r1, r2, r2, r3
 8003a4a:	441a      	add	r2, r3
 8003a4c:	1211      	asrs	r1, r2, #8
 8003a4e:	17da      	asrs	r2, r3, #31
 8003a50:	1a8a      	subs	r2, r1, r2
 8003a52:	f44f 71b4 	mov.w	r1, #360	; 0x168
 8003a56:	fb01 f202 	mul.w	r2, r1, r2
 8003a5a:	1a9b      	subs	r3, r3, r2
 8003a5c:	627b      	str	r3, [r7, #36]	; 0x24
  warped_angle = _angle_correction(angle);
 8003a5e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003a60:	f7ff feb6 	bl	80037d0 <_angle_correction>
 8003a64:	60b8      	str	r0, [r7, #8]

  return warped_angle;
 8003a66:	68bb      	ldr	r3, [r7, #8]
}
 8003a68:	4618      	mov	r0, r3
 8003a6a:	3728      	adds	r7, #40	; 0x28
 8003a6c:	46bd      	mov	sp, r7
 8003a6e:	bd80      	pop	{r7, pc}
 8003a70:	b60b60b7 	.word	0xb60b60b7

08003a74 <_get_min>:


int _get_min(int* c) {
 8003a74:	b580      	push	{r7, lr}
 8003a76:	b084      	sub	sp, #16
 8003a78:	af00      	add	r7, sp, #0
 8003a7a:	6078      	str	r0, [r7, #4]
	int angle = _get_angle(c);
 8003a7c:	6878      	ldr	r0, [r7, #4]
 8003a7e:	f7ff ff35 	bl	80038ec <_get_angle>
 8003a82:	60f8      	str	r0, [r7, #12]
	if (angle == -1) return -1;
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003a8a:	d102      	bne.n	8003a92 <_get_min+0x1e>
 8003a8c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003a90:	e005      	b.n	8003a9e <_get_min+0x2a>
	return angle/6;
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	4a04      	ldr	r2, [pc, #16]	; (8003aa8 <_get_min+0x34>)
 8003a96:	fb82 1203 	smull	r1, r2, r2, r3
 8003a9a:	17db      	asrs	r3, r3, #31
 8003a9c:	1ad3      	subs	r3, r2, r3
}
 8003a9e:	4618      	mov	r0, r3
 8003aa0:	3710      	adds	r7, #16
 8003aa2:	46bd      	mov	sp, r7
 8003aa4:	bd80      	pop	{r7, pc}
 8003aa6:	bf00      	nop
 8003aa8:	2aaaaaab 	.word	0x2aaaaaab

08003aac <_get_min_if_pressed>:


int _get_min_if_pressed(int* c){
 8003aac:	b580      	push	{r7, lr}
 8003aae:	b082      	sub	sp, #8
 8003ab0:	af00      	add	r7, sp, #0
 8003ab2:	6078      	str	r0, [r7, #4]
	//return -1 if not pressed, otherwise return a logical minute value
	if (c[0] <= IQS_TOUCH_THRESH || c[0] > 0xFF) return -1;
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	2b0a      	cmp	r3, #10
 8003aba:	dd03      	ble.n	8003ac4 <_get_min_if_pressed+0x18>
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	2bff      	cmp	r3, #255	; 0xff
 8003ac2:	dd02      	ble.n	8003aca <_get_min_if_pressed+0x1e>
 8003ac4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003ac8:	e003      	b.n	8003ad2 <_get_min_if_pressed+0x26>
	else return _get_min(c);
 8003aca:	6878      	ldr	r0, [r7, #4]
 8003acc:	f7ff ffd2 	bl	8003a74 <_get_min>
 8003ad0:	4603      	mov	r3, r0
}
 8003ad2:	4618      	mov	r0, r3
 8003ad4:	3708      	adds	r7, #8
 8003ad6:	46bd      	mov	sp, r7
 8003ad8:	bd80      	pop	{r7, pc}

08003ada <iqs263_poll_raw>:


void iqs263_poll_raw(int* coords){
 8003ada:	b580      	push	{r7, lr}
 8003adc:	b086      	sub	sp, #24
 8003ade:	af00      	add	r7, sp, #0
 8003ae0:	6078      	str	r0, [r7, #4]

  //uint16_t coords[4];

  uint8_t coords_raw[8];

  iqs263_read(0x06, coords_raw, 8);
 8003ae2:	f107 030c 	add.w	r3, r7, #12
 8003ae6:	2208      	movs	r2, #8
 8003ae8:	4619      	mov	r1, r3
 8003aea:	2006      	movs	r0, #6
 8003aec:	f000 f8c6 	bl	8003c7c <iqs263_read>

  for (int i=0; i<4; i++){
 8003af0:	2300      	movs	r3, #0
 8003af2:	617b      	str	r3, [r7, #20]
 8003af4:	e019      	b.n	8003b2a <iqs263_poll_raw+0x50>
	  coords[i] = (coords_raw[2*i+1] << 8) | (coords_raw[2*i] & 0xFF);
 8003af6:	697b      	ldr	r3, [r7, #20]
 8003af8:	005b      	lsls	r3, r3, #1
 8003afa:	3301      	adds	r3, #1
 8003afc:	f107 0218 	add.w	r2, r7, #24
 8003b00:	4413      	add	r3, r2
 8003b02:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8003b06:	021a      	lsls	r2, r3, #8
 8003b08:	697b      	ldr	r3, [r7, #20]
 8003b0a:	005b      	lsls	r3, r3, #1
 8003b0c:	f107 0118 	add.w	r1, r7, #24
 8003b10:	440b      	add	r3, r1
 8003b12:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8003b16:	4618      	mov	r0, r3
 8003b18:	697b      	ldr	r3, [r7, #20]
 8003b1a:	009b      	lsls	r3, r3, #2
 8003b1c:	6879      	ldr	r1, [r7, #4]
 8003b1e:	440b      	add	r3, r1
 8003b20:	4302      	orrs	r2, r0
 8003b22:	601a      	str	r2, [r3, #0]
  for (int i=0; i<4; i++){
 8003b24:	697b      	ldr	r3, [r7, #20]
 8003b26:	3301      	adds	r3, #1
 8003b28:	617b      	str	r3, [r7, #20]
 8003b2a:	697b      	ldr	r3, [r7, #20]
 8003b2c:	2b03      	cmp	r3, #3
 8003b2e:	dde2      	ble.n	8003af6 <iqs263_poll_raw+0x1c>
  }
  //c[0] is proximity

}
 8003b30:	bf00      	nop
 8003b32:	3718      	adds	r7, #24
 8003b34:	46bd      	mov	sp, r7
 8003b36:	bd80      	pop	{r7, pc}

08003b38 <setup_iqs263>:


HAL_StatusTypeDef setup_iqs263() {
 8003b38:	b580      	push	{r7, lr}
 8003b3a:	b086      	sub	sp, #24
 8003b3c:	af04      	add	r7, sp, #16

	uint8_t c;
	HAL_StatusTypeDef resp = HAL_ERROR;
 8003b3e:	2301      	movs	r3, #1
 8003b40:	71fb      	strb	r3, [r7, #7]
	uint8_t out_data[5] = {0x00, 0x00, 0x00, 0x00, 0x00};
 8003b42:	463b      	mov	r3, r7
 8003b44:	2200      	movs	r2, #0
 8003b46:	601a      	str	r2, [r3, #0]
 8003b48:	711a      	strb	r2, [r3, #4]

	//check product num
	while (resp == HAL_ERROR){
 8003b4a:	e00e      	b.n	8003b6a <setup_iqs263+0x32>
		resp = HAL_I2C_Mem_Read(&IQS_I2C_PORT, IQS_ADDR, 0x00, sizeof(uint8_t), &c, sizeof(uint8_t), HAL_MAX_DELAY);
 8003b4c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003b50:	9302      	str	r3, [sp, #8]
 8003b52:	2301      	movs	r3, #1
 8003b54:	9301      	str	r3, [sp, #4]
 8003b56:	1dbb      	adds	r3, r7, #6
 8003b58:	9300      	str	r3, [sp, #0]
 8003b5a:	2301      	movs	r3, #1
 8003b5c:	2200      	movs	r2, #0
 8003b5e:	2188      	movs	r1, #136	; 0x88
 8003b60:	4845      	ldr	r0, [pc, #276]	; (8003c78 <setup_iqs263+0x140>)
 8003b62:	f004 ff39 	bl	80089d8 <HAL_I2C_Mem_Read>
 8003b66:	4603      	mov	r3, r0
 8003b68:	71fb      	strb	r3, [r7, #7]
	while (resp == HAL_ERROR){
 8003b6a:	79fb      	ldrb	r3, [r7, #7]
 8003b6c:	2b01      	cmp	r3, #1
 8003b6e:	d0ed      	beq.n	8003b4c <setup_iqs263+0x14>
	}

	if (c != 0x3C) {
 8003b70:	79bb      	ldrb	r3, [r7, #6]
 8003b72:	2b3c      	cmp	r3, #60	; 0x3c
 8003b74:	d001      	beq.n	8003b7a <setup_iqs263+0x42>
	  //ERROR - should read product code 0x3C
	  return HAL_ERROR;
 8003b76:	2301      	movs	r3, #1
 8003b78:	e07a      	b.n	8003c70 <setup_iqs263+0x138>
	}

	HAL_Delay(100);
 8003b7a:	2064      	movs	r0, #100	; 0x64
 8003b7c:	f002 ffdf 	bl	8006b3e <HAL_Delay>


	//now write and read 0x0E to address 0x0D
	out_data[0] = 0x0E;
 8003b80:	230e      	movs	r3, #14
 8003b82:	703b      	strb	r3, [r7, #0]

	resp = HAL_ERROR;
 8003b84:	2301      	movs	r3, #1
 8003b86:	71fb      	strb	r3, [r7, #7]
	while (resp == HAL_ERROR){
 8003b88:	e00e      	b.n	8003ba8 <setup_iqs263+0x70>
		  resp = HAL_I2C_Mem_Write(&IQS_I2C_PORT, IQS_ADDR, 0x0D, 1, out_data, 1, HAL_MAX_DELAY);
 8003b8a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003b8e:	9302      	str	r3, [sp, #8]
 8003b90:	2301      	movs	r3, #1
 8003b92:	9301      	str	r3, [sp, #4]
 8003b94:	463b      	mov	r3, r7
 8003b96:	9300      	str	r3, [sp, #0]
 8003b98:	2301      	movs	r3, #1
 8003b9a:	220d      	movs	r2, #13
 8003b9c:	2188      	movs	r1, #136	; 0x88
 8003b9e:	4836      	ldr	r0, [pc, #216]	; (8003c78 <setup_iqs263+0x140>)
 8003ba0:	f004 fe06 	bl	80087b0 <HAL_I2C_Mem_Write>
 8003ba4:	4603      	mov	r3, r0
 8003ba6:	71fb      	strb	r3, [r7, #7]
	while (resp == HAL_ERROR){
 8003ba8:	79fb      	ldrb	r3, [r7, #7]
 8003baa:	2b01      	cmp	r3, #1
 8003bac:	d0ed      	beq.n	8003b8a <setup_iqs263+0x52>
	}
	HAL_Delay(100);
 8003bae:	2064      	movs	r0, #100	; 0x64
 8003bb0:	f002 ffc5 	bl	8006b3e <HAL_Delay>
	out_data[4]=0x00;
	*/


	//for 0x07 - Multipliers
	out_data[0]=0x11; //ch0 sensitivity and compensation multipliers
 8003bb4:	2311      	movs	r3, #17
 8003bb6:	703b      	strb	r3, [r7, #0]
	out_data[1]=0x11; //ch1 sensitivity and compensation multipliers
 8003bb8:	2311      	movs	r3, #17
 8003bba:	707b      	strb	r3, [r7, #1]
	out_data[2]=0x11; //ch2 sensitivity and compensation multipliers
 8003bbc:	2311      	movs	r3, #17
 8003bbe:	70bb      	strb	r3, [r7, #2]
	out_data[3]=0x11; //ch3 sensitivity and compensation multipliers
 8003bc0:	2311      	movs	r3, #17
 8003bc2:	70fb      	strb	r3, [r7, #3]
	out_data[4]=0x11; //base values, see look up table. 138/138, can range from 74 to 298
 8003bc4:	2311      	movs	r3, #17
 8003bc6:	713b      	strb	r3, [r7, #4]

	resp = HAL_ERROR;
 8003bc8:	2301      	movs	r3, #1
 8003bca:	71fb      	strb	r3, [r7, #7]
	while (resp == HAL_ERROR){
 8003bcc:	e00e      	b.n	8003bec <setup_iqs263+0xb4>
	  resp = HAL_I2C_Mem_Write(&IQS_I2C_PORT, IQS_ADDR, 0x07, 1, out_data, 5, HAL_MAX_DELAY);
 8003bce:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003bd2:	9302      	str	r3, [sp, #8]
 8003bd4:	2305      	movs	r3, #5
 8003bd6:	9301      	str	r3, [sp, #4]
 8003bd8:	463b      	mov	r3, r7
 8003bda:	9300      	str	r3, [sp, #0]
 8003bdc:	2301      	movs	r3, #1
 8003bde:	2207      	movs	r2, #7
 8003be0:	2188      	movs	r1, #136	; 0x88
 8003be2:	4825      	ldr	r0, [pc, #148]	; (8003c78 <setup_iqs263+0x140>)
 8003be4:	f004 fde4 	bl	80087b0 <HAL_I2C_Mem_Write>
 8003be8:	4603      	mov	r3, r0
 8003bea:	71fb      	strb	r3, [r7, #7]
	while (resp == HAL_ERROR){
 8003bec:	79fb      	ldrb	r3, [r7, #7]
 8003bee:	2b01      	cmp	r3, #1
 8003bf0:	d0ed      	beq.n	8003bce <setup_iqs263+0x96>
	}


	//for 0x09 - ProxSettings:
	out_data[0]=0b01000000;  // ProxSettings0
 8003bf2:	2340      	movs	r3, #64	; 0x40
 8003bf4:	703b      	strb	r3, [r7, #0]
	out_data[1]=0b00011011; // ProxSettings1
 8003bf6:	231b      	movs	r3, #27
 8003bf8:	707b      	strb	r3, [r7, #1]
	out_data[2]=0xb00000100; // ProxSettings2
 8003bfa:	2300      	movs	r3, #0
 8003bfc:	70bb      	strb	r3, [r7, #2]
	out_data[3]=0b00000110; // ProxSettings3
 8003bfe:	2306      	movs	r3, #6
 8003c00:	70fb      	strb	r3, [r7, #3]
	out_data[4]=0x00; // Event Mask
 8003c02:	2300      	movs	r3, #0
 8003c04:	713b      	strb	r3, [r7, #4]

	resp = HAL_ERROR;
 8003c06:	2301      	movs	r3, #1
 8003c08:	71fb      	strb	r3, [r7, #7]
	while (resp == HAL_ERROR){
 8003c0a:	e00e      	b.n	8003c2a <setup_iqs263+0xf2>
		  resp = HAL_I2C_Mem_Write(&IQS_I2C_PORT, IQS_ADDR, 0x09, 1, out_data, 5, HAL_MAX_DELAY);
 8003c0c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003c10:	9302      	str	r3, [sp, #8]
 8003c12:	2305      	movs	r3, #5
 8003c14:	9301      	str	r3, [sp, #4]
 8003c16:	463b      	mov	r3, r7
 8003c18:	9300      	str	r3, [sp, #0]
 8003c1a:	2301      	movs	r3, #1
 8003c1c:	2209      	movs	r2, #9
 8003c1e:	2188      	movs	r1, #136	; 0x88
 8003c20:	4815      	ldr	r0, [pc, #84]	; (8003c78 <setup_iqs263+0x140>)
 8003c22:	f004 fdc5 	bl	80087b0 <HAL_I2C_Mem_Write>
 8003c26:	4603      	mov	r3, r0
 8003c28:	71fb      	strb	r3, [r7, #7]
	while (resp == HAL_ERROR){
 8003c2a:	79fb      	ldrb	r3, [r7, #7]
 8003c2c:	2b01      	cmp	r3, #1
 8003c2e:	d0ed      	beq.n	8003c0c <setup_iqs263+0xd4>
	out_data[1] //ch1 compensation
	out_data[2] //ch2 compensation
	out_data[3] //ch3 compensation
*/
	//for 0x0A - Thresholds
	out_data[0]=1; //proximity thresh, default = 4D
 8003c30:	2301      	movs	r3, #1
 8003c32:	703b      	strb	r3, [r7, #0]
	out_data[1]=1; //ch1 thresh, default = 16D
 8003c34:	2301      	movs	r3, #1
 8003c36:	707b      	strb	r3, [r7, #1]
	out_data[2]=1; //ch2 thresh, default = 16D
 8003c38:	2301      	movs	r3, #1
 8003c3a:	70bb      	strb	r3, [r7, #2]
	out_data[3]=1; //ch3 thresh, default = 16D
 8003c3c:	2301      	movs	r3, #1
 8003c3e:	70fb      	strb	r3, [r7, #3]
	out_data[4]=0; //move thresh, default = 3D
 8003c40:	2300      	movs	r3, #0
 8003c42:	713b      	strb	r3, [r7, #4]

	resp = HAL_ERROR;
 8003c44:	2301      	movs	r3, #1
 8003c46:	71fb      	strb	r3, [r7, #7]
	while (resp == HAL_ERROR){
 8003c48:	e00e      	b.n	8003c68 <setup_iqs263+0x130>
			  resp = HAL_I2C_Mem_Write(&IQS_I2C_PORT, IQS_ADDR, 0x0A, 1, out_data, 4, HAL_MAX_DELAY);
 8003c4a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003c4e:	9302      	str	r3, [sp, #8]
 8003c50:	2304      	movs	r3, #4
 8003c52:	9301      	str	r3, [sp, #4]
 8003c54:	463b      	mov	r3, r7
 8003c56:	9300      	str	r3, [sp, #0]
 8003c58:	2301      	movs	r3, #1
 8003c5a:	220a      	movs	r2, #10
 8003c5c:	2188      	movs	r1, #136	; 0x88
 8003c5e:	4806      	ldr	r0, [pc, #24]	; (8003c78 <setup_iqs263+0x140>)
 8003c60:	f004 fda6 	bl	80087b0 <HAL_I2C_Mem_Write>
 8003c64:	4603      	mov	r3, r0
 8003c66:	71fb      	strb	r3, [r7, #7]
	while (resp == HAL_ERROR){
 8003c68:	79fb      	ldrb	r3, [r7, #7]
 8003c6a:	2b01      	cmp	r3, #1
 8003c6c:	d0ed      	beq.n	8003c4a <setup_iqs263+0x112>
	//for 0x0B - Timing and Targets
	out_data[0] //low power time, 16ms steps, default = 00
	out_data[1] //ATI touch target, default = 48D
	out_data[2] //ATI prox target, default = 64D
*/
    return HAL_OK;
 8003c6e:	2300      	movs	r3, #0
}
 8003c70:	4618      	mov	r0, r3
 8003c72:	3708      	adds	r7, #8
 8003c74:	46bd      	mov	sp, r7
 8003c76:	bd80      	pop	{r7, pc}
 8003c78:	2002e1f8 	.word	0x2002e1f8

08003c7c <iqs263_read>:

  return HAL_OK;

}

HAL_StatusTypeDef iqs263_read(uint8_t addr, uint8_t* buf, uint8_t size) {
 8003c7c:	b580      	push	{r7, lr}
 8003c7e:	b088      	sub	sp, #32
 8003c80:	af04      	add	r7, sp, #16
 8003c82:	4603      	mov	r3, r0
 8003c84:	6039      	str	r1, [r7, #0]
 8003c86:	71fb      	strb	r3, [r7, #7]
 8003c88:	4613      	mov	r3, r2
 8003c8a:	71bb      	strb	r3, [r7, #6]


  const uint16_t max_tries = 300;
 8003c8c:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8003c90:	817b      	strh	r3, [r7, #10]
  uint16_t current_tries = 0;
 8003c92:	2300      	movs	r3, #0
 8003c94:	81fb      	strh	r3, [r7, #14]

  HAL_StatusTypeDef resp = HAL_ERROR;
 8003c96:	2301      	movs	r3, #1
 8003c98:	737b      	strb	r3, [r7, #13]

  while (resp == HAL_ERROR && current_tries < max_tries){
 8003c9a:	e014      	b.n	8003cc6 <iqs263_read+0x4a>
    resp = HAL_I2C_Mem_Read(&IQS_I2C_PORT, IQS_ADDR, addr, 1, buf, size, HAL_MAX_DELAY);
 8003c9c:	79fb      	ldrb	r3, [r7, #7]
 8003c9e:	b299      	uxth	r1, r3
 8003ca0:	79bb      	ldrb	r3, [r7, #6]
 8003ca2:	b29b      	uxth	r3, r3
 8003ca4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003ca8:	9202      	str	r2, [sp, #8]
 8003caa:	9301      	str	r3, [sp, #4]
 8003cac:	683b      	ldr	r3, [r7, #0]
 8003cae:	9300      	str	r3, [sp, #0]
 8003cb0:	2301      	movs	r3, #1
 8003cb2:	460a      	mov	r2, r1
 8003cb4:	2188      	movs	r1, #136	; 0x88
 8003cb6:	480d      	ldr	r0, [pc, #52]	; (8003cec <iqs263_read+0x70>)
 8003cb8:	f004 fe8e 	bl	80089d8 <HAL_I2C_Mem_Read>
 8003cbc:	4603      	mov	r3, r0
 8003cbe:	737b      	strb	r3, [r7, #13]
    current_tries++;
 8003cc0:	89fb      	ldrh	r3, [r7, #14]
 8003cc2:	3301      	adds	r3, #1
 8003cc4:	81fb      	strh	r3, [r7, #14]
  while (resp == HAL_ERROR && current_tries < max_tries){
 8003cc6:	7b7b      	ldrb	r3, [r7, #13]
 8003cc8:	2b01      	cmp	r3, #1
 8003cca:	d103      	bne.n	8003cd4 <iqs263_read+0x58>
 8003ccc:	89fa      	ldrh	r2, [r7, #14]
 8003cce:	897b      	ldrh	r3, [r7, #10]
 8003cd0:	429a      	cmp	r2, r3
 8003cd2:	d3e3      	bcc.n	8003c9c <iqs263_read+0x20>
  }

  if (current_tries >= max_tries) {
 8003cd4:	89fa      	ldrh	r2, [r7, #14]
 8003cd6:	897b      	ldrh	r3, [r7, #10]
 8003cd8:	429a      	cmp	r2, r3
 8003cda:	d301      	bcc.n	8003ce0 <iqs263_read+0x64>
	  return HAL_ERROR;
 8003cdc:	2301      	movs	r3, #1
 8003cde:	e000      	b.n	8003ce2 <iqs263_read+0x66>
  }

  return HAL_OK;
 8003ce0:	2300      	movs	r3, #0

}
 8003ce2:	4618      	mov	r0, r3
 8003ce4:	3710      	adds	r7, #16
 8003ce6:	46bd      	mov	sp, r7
 8003ce8:	bd80      	pop	{r7, pc}
 8003cea:	bf00      	nop
 8003cec:	2002e1f8 	.word	0x2002e1f8

08003cf0 <iqs263_get_min_if_pressed>:
	iqs263_poll_raw(coords);
	return _get_min(coords);
}


int iqs263_get_min_if_pressed(){
 8003cf0:	b580      	push	{r7, lr}
 8003cf2:	b084      	sub	sp, #16
 8003cf4:	af00      	add	r7, sp, #0
	int* coords[4] = {0x0000, 0x0000, 0x0000, 0x0000};
 8003cf6:	463b      	mov	r3, r7
 8003cf8:	2200      	movs	r2, #0
 8003cfa:	601a      	str	r2, [r3, #0]
 8003cfc:	605a      	str	r2, [r3, #4]
 8003cfe:	609a      	str	r2, [r3, #8]
 8003d00:	60da      	str	r2, [r3, #12]
	iqs263_poll_raw(coords);
 8003d02:	463b      	mov	r3, r7
 8003d04:	4618      	mov	r0, r3
 8003d06:	f7ff fee8 	bl	8003ada <iqs263_poll_raw>
	return _get_min_if_pressed(coords);
 8003d0a:	463b      	mov	r3, r7
 8003d0c:	4618      	mov	r0, r3
 8003d0e:	f7ff fecd 	bl	8003aac <_get_min_if_pressed>
 8003d12:	4603      	mov	r3, r0
}
 8003d14:	4618      	mov	r0, r3
 8003d16:	3710      	adds	r7, #16
 8003d18:	46bd      	mov	sp, r7
 8003d1a:	bd80      	pop	{r7, pc}

08003d1c <LL_EXTI_DisableIT_0_31>:
{
 8003d1c:	b480      	push	{r7}
 8003d1e:	b083      	sub	sp, #12
 8003d20:	af00      	add	r7, sp, #0
 8003d22:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 8003d24:	4b07      	ldr	r3, [pc, #28]	; (8003d44 <LL_EXTI_DisableIT_0_31+0x28>)
 8003d26:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	43db      	mvns	r3, r3
 8003d2e:	4905      	ldr	r1, [pc, #20]	; (8003d44 <LL_EXTI_DisableIT_0_31+0x28>)
 8003d30:	4013      	ands	r3, r2
 8003d32:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 8003d36:	bf00      	nop
 8003d38:	370c      	adds	r7, #12
 8003d3a:	46bd      	mov	sp, r7
 8003d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d40:	4770      	bx	lr
 8003d42:	bf00      	nop
 8003d44:	58000800 	.word	0x58000800

08003d48 <LL_EXTI_DisableIT_32_63>:
{
 8003d48:	b480      	push	{r7}
 8003d4a:	b083      	sub	sp, #12
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR2, ExtiLine);
 8003d50:	4b07      	ldr	r3, [pc, #28]	; (8003d70 <LL_EXTI_DisableIT_32_63+0x28>)
 8003d52:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	43db      	mvns	r3, r3
 8003d5a:	4905      	ldr	r1, [pc, #20]	; (8003d70 <LL_EXTI_DisableIT_32_63+0x28>)
 8003d5c:	4013      	ands	r3, r2
 8003d5e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8003d62:	bf00      	nop
 8003d64:	370c      	adds	r7, #12
 8003d66:	46bd      	mov	sp, r7
 8003d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d6c:	4770      	bx	lr
 8003d6e:	bf00      	nop
 8003d70:	58000800 	.word	0x58000800

08003d74 <LL_RCC_HSE_SetCapacitorTuning>:
{
 8003d74:	b480      	push	{r7}
 8003d76:	b083      	sub	sp, #12
 8003d78:	af00      	add	r7, sp, #0
 8003d7a:	6078      	str	r0, [r7, #4]
  WRITE_REG(RCC->HSECR, HSE_CONTROL_UNLOCK_KEY);
 8003d7c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d80:	4a0a      	ldr	r2, [pc, #40]	; (8003dac <LL_RCC_HSE_SetCapacitorTuning+0x38>)
 8003d82:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  MODIFY_REG(RCC->HSECR, RCC_HSECR_HSETUNE, Value << RCC_HSECR_HSETUNE_Pos);
 8003d86:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d8a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003d8e:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	021b      	lsls	r3, r3, #8
 8003d96:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003d9a:	4313      	orrs	r3, r2
 8003d9c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
}
 8003da0:	bf00      	nop
 8003da2:	370c      	adds	r7, #12
 8003da4:	46bd      	mov	sp, r7
 8003da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003daa:	4770      	bx	lr
 8003dac:	cafecafe 	.word	0xcafecafe

08003db0 <LL_RCC_LSE_SetDriveCapability>:
{
 8003db0:	b480      	push	{r7}
 8003db2:	b083      	sub	sp, #12
 8003db4:	af00      	add	r7, sp, #0
 8003db6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8003db8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003dbc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003dc0:	f023 0218 	bic.w	r2, r3, #24
 8003dc4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	4313      	orrs	r3, r2
 8003dcc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8003dd0:	bf00      	nop
 8003dd2:	370c      	adds	r7, #12
 8003dd4:	46bd      	mov	sp, r7
 8003dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dda:	4770      	bx	lr

08003ddc <LL_RCC_ForceBackupDomainReset>:
  * @brief  Force the Backup domain reset
  * @rmtoll BDCR         BDRST         LL_RCC_ForceBackupDomainReset
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ForceBackupDomainReset(void)
{
 8003ddc:	b480      	push	{r7}
 8003dde:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8003de0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003de4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003de8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003dec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003df0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8003df4:	bf00      	nop
 8003df6:	46bd      	mov	sp, r7
 8003df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dfc:	4770      	bx	lr

08003dfe <LL_RCC_ReleaseBackupDomainReset>:
  * @brief  Release the Backup domain reset
  * @rmtoll BDCR         BDRST         LL_RCC_ReleaseBackupDomainReset
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ReleaseBackupDomainReset(void)
{
 8003dfe:	b480      	push	{r7}
 8003e00:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8003e02:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e0a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003e0e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003e12:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8003e16:	bf00      	nop
 8003e18:	46bd      	mov	sp, r7
 8003e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e1e:	4770      	bx	lr

08003e20 <LL_RCC_IsActiveFlag_PINRST>:
  * @brief  Check if RCC flag Pin reset is set or not.
  * @rmtoll CSR          PINRSTF       LL_RCC_IsActiveFlag_PINRST
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PINRST(void)
{
 8003e20:	b480      	push	{r7}
 8003e22:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_PINRSTF) == (RCC_CSR_PINRSTF)) ? 1UL : 0UL);
 8003e24:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e28:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003e2c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003e30:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003e34:	d101      	bne.n	8003e3a <LL_RCC_IsActiveFlag_PINRST+0x1a>
 8003e36:	2301      	movs	r3, #1
 8003e38:	e000      	b.n	8003e3c <LL_RCC_IsActiveFlag_PINRST+0x1c>
 8003e3a:	2300      	movs	r3, #0
}
 8003e3c:	4618      	mov	r0, r3
 8003e3e:	46bd      	mov	sp, r7
 8003e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e44:	4770      	bx	lr

08003e46 <LL_RCC_IsActiveFlag_SFTRST>:
  * @brief  Check if RCC flag Software reset is set or not.
  * @rmtoll CSR          SFTRSTF       LL_RCC_IsActiveFlag_SFTRST
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SFTRST(void)
{
 8003e46:	b480      	push	{r7}
 8003e48:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_SFTRSTF) == (RCC_CSR_SFTRSTF)) ? 1UL : 0UL);
 8003e4a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e4e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003e52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e56:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003e5a:	d101      	bne.n	8003e60 <LL_RCC_IsActiveFlag_SFTRST+0x1a>
 8003e5c:	2301      	movs	r3, #1
 8003e5e:	e000      	b.n	8003e62 <LL_RCC_IsActiveFlag_SFTRST+0x1c>
 8003e60:	2300      	movs	r3, #0
}
 8003e62:	4618      	mov	r0, r3
 8003e64:	46bd      	mov	sp, r7
 8003e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e6a:	4770      	bx	lr

08003e6c <LL_AHB2_GRP1_EnableClock>:
{
 8003e6c:	b480      	push	{r7}
 8003e6e:	b085      	sub	sp, #20
 8003e70:	af00      	add	r7, sp, #0
 8003e72:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8003e74:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e78:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003e7a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	4313      	orrs	r3, r2
 8003e82:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8003e84:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e88:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	4013      	ands	r3, r2
 8003e8e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003e90:	68fb      	ldr	r3, [r7, #12]
}
 8003e92:	bf00      	nop
 8003e94:	3714      	adds	r7, #20
 8003e96:	46bd      	mov	sp, r7
 8003e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e9c:	4770      	bx	lr

08003e9e <LL_AHB3_GRP1_EnableClock>:
{
 8003e9e:	b480      	push	{r7}
 8003ea0:	b085      	sub	sp, #20
 8003ea2:	af00      	add	r7, sp, #0
 8003ea4:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 8003ea6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003eaa:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003eac:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	4313      	orrs	r3, r2
 8003eb4:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8003eb6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003eba:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	4013      	ands	r3, r2
 8003ec0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003ec2:	68fb      	ldr	r3, [r7, #12]
}
 8003ec4:	bf00      	nop
 8003ec6:	3714      	adds	r7, #20
 8003ec8:	46bd      	mov	sp, r7
 8003eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ece:	4770      	bx	lr

08003ed0 <LL_C1_IPCC_DisableTransmitChannel>:
{
 8003ed0:	b480      	push	{r7}
 8003ed2:	b083      	sub	sp, #12
 8003ed4:	af00      	add	r7, sp, #0
 8003ed6:	6078      	str	r0, [r7, #4]
 8003ed8:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	685a      	ldr	r2, [r3, #4]
 8003ede:	683b      	ldr	r3, [r7, #0]
 8003ee0:	041b      	lsls	r3, r3, #16
 8003ee2:	431a      	orrs	r2, r3
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	605a      	str	r2, [r3, #4]
}
 8003ee8:	bf00      	nop
 8003eea:	370c      	adds	r7, #12
 8003eec:	46bd      	mov	sp, r7
 8003eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef2:	4770      	bx	lr

08003ef4 <LL_C1_IPCC_DisableReceiveChannel>:
{
 8003ef4:	b480      	push	{r7}
 8003ef6:	b083      	sub	sp, #12
 8003ef8:	af00      	add	r7, sp, #0
 8003efa:	6078      	str	r0, [r7, #4]
 8003efc:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel);
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	685a      	ldr	r2, [r3, #4]
 8003f02:	683b      	ldr	r3, [r7, #0]
 8003f04:	431a      	orrs	r2, r3
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	605a      	str	r2, [r3, #4]
}
 8003f0a:	bf00      	nop
 8003f0c:	370c      	adds	r7, #12
 8003f0e:	46bd      	mov	sp, r7
 8003f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f14:	4770      	bx	lr

08003f16 <LL_C2_IPCC_DisableTransmitChannel>:
{
 8003f16:	b480      	push	{r7}
 8003f18:	b083      	sub	sp, #12
 8003f1a:	af00      	add	r7, sp, #0
 8003f1c:	6078      	str	r0, [r7, #4]
 8003f1e:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C2MR, Channel << (IPCC_C2MR_CH1FM_Pos));
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	695a      	ldr	r2, [r3, #20]
 8003f24:	683b      	ldr	r3, [r7, #0]
 8003f26:	041b      	lsls	r3, r3, #16
 8003f28:	431a      	orrs	r2, r3
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	615a      	str	r2, [r3, #20]
}
 8003f2e:	bf00      	nop
 8003f30:	370c      	adds	r7, #12
 8003f32:	46bd      	mov	sp, r7
 8003f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f38:	4770      	bx	lr

08003f3a <LL_C2_IPCC_DisableReceiveChannel>:
{
 8003f3a:	b480      	push	{r7}
 8003f3c:	b083      	sub	sp, #12
 8003f3e:	af00      	add	r7, sp, #0
 8003f40:	6078      	str	r0, [r7, #4]
 8003f42:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C2MR, Channel);
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	695a      	ldr	r2, [r3, #20]
 8003f48:	683b      	ldr	r3, [r7, #0]
 8003f4a:	431a      	orrs	r2, r3
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	615a      	str	r2, [r3, #20]
}
 8003f50:	bf00      	nop
 8003f52:	370c      	adds	r7, #12
 8003f54:	46bd      	mov	sp, r7
 8003f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f5a:	4770      	bx	lr

08003f5c <LL_C1_IPCC_ClearFlag_CHx>:
{
 8003f5c:	b480      	push	{r7}
 8003f5e:	b083      	sub	sp, #12
 8003f60:	af00      	add	r7, sp, #0
 8003f62:	6078      	str	r0, [r7, #4]
 8003f64:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	683a      	ldr	r2, [r7, #0]
 8003f6a:	609a      	str	r2, [r3, #8]
}
 8003f6c:	bf00      	nop
 8003f6e:	370c      	adds	r7, #12
 8003f70:	46bd      	mov	sp, r7
 8003f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f76:	4770      	bx	lr

08003f78 <LL_C2_IPCC_ClearFlag_CHx>:
{
 8003f78:	b480      	push	{r7}
 8003f7a:	b083      	sub	sp, #12
 8003f7c:	af00      	add	r7, sp, #0
 8003f7e:	6078      	str	r0, [r7, #4]
 8003f80:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C2SCR, Channel);
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	683a      	ldr	r2, [r7, #0]
 8003f86:	619a      	str	r2, [r3, #24]
}
 8003f88:	bf00      	nop
 8003f8a:	370c      	adds	r7, #12
 8003f8c:	46bd      	mov	sp, r7
 8003f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f92:	4770      	bx	lr

08003f94 <LL_LPM_EnableSleep>:
  * @brief  Processor uses sleep as its low power mode
  * @rmtoll SCB_SCR      SLEEPDEEP     LL_LPM_EnableSleep
  * @retval None
  */
__STATIC_INLINE void LL_LPM_EnableSleep(void)
{
 8003f94:	b480      	push	{r7}
 8003f96:	af00      	add	r7, sp, #0
  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8003f98:	4b05      	ldr	r3, [pc, #20]	; (8003fb0 <LL_LPM_EnableSleep+0x1c>)
 8003f9a:	691b      	ldr	r3, [r3, #16]
 8003f9c:	4a04      	ldr	r2, [pc, #16]	; (8003fb0 <LL_LPM_EnableSleep+0x1c>)
 8003f9e:	f023 0304 	bic.w	r3, r3, #4
 8003fa2:	6113      	str	r3, [r2, #16]
}
 8003fa4:	bf00      	nop
 8003fa6:	46bd      	mov	sp, r7
 8003fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fac:	4770      	bx	lr
 8003fae:	bf00      	nop
 8003fb0:	e000ed00 	.word	0xe000ed00

08003fb4 <main>:
static void Reset_BackupDomain( void );
static void Init_Exti( void );
static void Config_HSE(void);

int main(void)
{
 8003fb4:	b580      	push	{r7, lr}
 8003fb6:	af00      	add	r7, sp, #0
  /**
   * The OPTVERR flag is wrongly set at power on
   * It shall be cleared before using any HAL_FLASH_xxx() api
   */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8003fb8:	4b49      	ldr	r3, [pc, #292]	; (80040e0 <main+0x12c>)
 8003fba:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8003fbe:	611a      	str	r2, [r3, #16]


  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003fc0:	f003 fdd4 	bl	8007b6c <HAL_Init>

  /* USER CODE BEGIN Init */
  Reset_Device();
 8003fc4:	f002 fd6d 	bl	8006aa2 <Reset_Device>
  Config_HSE();
 8003fc8:	f002 fd57 	bl	8006a7a <Config_HSE>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003fcc:	f000 f8d6 	bl	800417c <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  PeriphClock_Config();
 8003fd0:	f002 fd4c 	bl	8006a6c <PeriphClock_Config>
  Init_Exti(); /**< Configure the system Power Mode */
 8003fd4:	f002 fda7 	bl	8006b26 <Init_Exti>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003fd8:	f000 fae4 	bl	80045a4 <MX_GPIO_Init>
  MX_I2C1_Init();
 8003fdc:	f000 f94e 	bl	800427c <MX_I2C1_Init>
  MX_SPI1_Init();
 8003fe0:	f000 f9f2 	bl	80043c8 <MX_SPI1_Init>
  MX_RF_Init();
 8003fe4:	f000 f98a 	bl	80042fc <MX_RF_Init>
  MX_RTC_Init();
 8003fe8:	f000 f990 	bl	800430c <MX_RTC_Init>
  MX_TIM1_Init();
 8003fec:	f000 fa2a 	bl	8004444 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

  GlobalState_Init();
 8003ff0:	f000 fb3a 	bl	8004668 <GlobalState_Init>

  //Init Pseudo-Random Number Generation Seed
  srand(0xFA1863A7);
 8003ff4:	483b      	ldr	r0, [pc, #236]	; (80040e4 <main+0x130>)
 8003ff6:	f010 fc2d 	bl	8014854 <srand>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8003ffa:	f00b fcfd 	bl	800f9f8 <osKernelInitialize>

  /* USER CODE BEGIN RTOS_MUTEX */
    /* creation of rtcMutex */
    rtcMutexHandle = osMutexNew(&rtcMutex_attributes);
 8003ffe:	483a      	ldr	r0, [pc, #232]	; (80040e8 <main+0x134>)
 8004000:	f00b ff2e 	bl	800fe60 <osMutexNew>
 8004004:	4602      	mov	r2, r0
 8004006:	4b39      	ldr	r3, [pc, #228]	; (80040ec <main+0x138>)
 8004008:	601a      	str	r2, [r3, #0]

    /* creation of timeBoundMutex */
    timeBoundMutexHandle = osMutexNew(&timeBoundMutex_attributes);
 800400a:	4839      	ldr	r0, [pc, #228]	; (80040f0 <main+0x13c>)
 800400c:	f00b ff28 	bl	800fe60 <osMutexNew>
 8004010:	4602      	mov	r2, r0
 8004012:	4b38      	ldr	r3, [pc, #224]	; (80040f4 <main+0x140>)
 8004014:	601a      	str	r2, [r3, #0]

    /* creation of lastSeenMutex */
    lastSeenMutexHandle = osMutexNew(&lastSeenMutex_attributes);
 8004016:	4838      	ldr	r0, [pc, #224]	; (80040f8 <main+0x144>)
 8004018:	f00b ff22 	bl	800fe60 <osMutexNew>
 800401c:	4602      	mov	r2, r0
 800401e:	4b37      	ldr	r3, [pc, #220]	; (80040fc <main+0x148>)
 8004020:	601a      	str	r2, [r3, #0]

    /* creation of timeEstimateMutex */
    //timeEstimateMutexHandle = osMutexNew(&timeEstimateMutex_attributes);

    /* creation of conditionMutex */
    conditionMutexHandle = osMutexNew(&conditionMutex_attributes);
 8004022:	4837      	ldr	r0, [pc, #220]	; (8004100 <main+0x14c>)
 8004024:	f00b ff1c 	bl	800fe60 <osMutexNew>
 8004028:	4602      	mov	r2, r0
 800402a:	4b36      	ldr	r3, [pc, #216]	; (8004104 <main+0x150>)
 800402c:	601a      	str	r2, [r3, #0]

    /* creation of modeMutex */
    modeMutexHandle = osMutexNew(&modeMutex_attributes);
 800402e:	4836      	ldr	r0, [pc, #216]	; (8004108 <main+0x154>)
 8004030:	f00b ff16 	bl	800fe60 <osMutexNew>
 8004034:	4602      	mov	r2, r0
 8004036:	4b35      	ldr	r3, [pc, #212]	; (800410c <main+0x158>)
 8004038:	601a      	str	r2, [r3, #0]

    /* creation of surveyMutex */
    surveyMutexHandle = osMutexNew(&surveyMutex_attributes);
 800403a:	4835      	ldr	r0, [pc, #212]	; (8004110 <main+0x15c>)
 800403c:	f00b ff10 	bl	800fe60 <osMutexNew>
 8004040:	4602      	mov	r2, r0
 8004042:	4b34      	ldr	r3, [pc, #208]	; (8004114 <main+0x160>)
 8004044:	601a      	str	r2, [r3, #0]

  /* USER CODE END RTOS_MUTEX */

  /* USER CODE BEGIN RTOS_QUEUES */
      /* creation of bleTXqueue */
      bleTXqueueHandle = osMessageQueueNew (16, sizeof(BLETX_Queue_t), &bleTXqueue_attributes);
 8004046:	4a34      	ldr	r2, [pc, #208]	; (8004118 <main+0x164>)
 8004048:	2104      	movs	r1, #4
 800404a:	2010      	movs	r0, #16
 800404c:	f00c f9ac 	bl	80103a8 <osMessageQueueNew>
 8004050:	4602      	mov	r2, r0
 8004052:	4b32      	ldr	r3, [pc, #200]	; (800411c <main+0x168>)
 8004054:	601a      	str	r2, [r3, #0]

      /* creation of bleRXqueue */
      bleRXqueueHandle = osMessageQueueNew (16, sizeof(P2PS_STM_Data_t *), &bleRXqueue_attributes);
 8004056:	4a32      	ldr	r2, [pc, #200]	; (8004120 <main+0x16c>)
 8004058:	2104      	movs	r1, #4
 800405a:	2010      	movs	r0, #16
 800405c:	f00c f9a4 	bl	80103a8 <osMessageQueueNew>
 8004060:	4602      	mov	r2, r0
 8004062:	4b30      	ldr	r3, [pc, #192]	; (8004124 <main+0x170>)
 8004064:	601a      	str	r2, [r3, #0]

  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
        /* creation of uiControl */
        uiControlHandle = osThreadNew(startUIControl, NULL, &uiControl_attributes);
 8004066:	4a30      	ldr	r2, [pc, #192]	; (8004128 <main+0x174>)
 8004068:	2100      	movs	r1, #0
 800406a:	4830      	ldr	r0, [pc, #192]	; (800412c <main+0x178>)
 800406c:	f00b fd2e 	bl	800facc <osThreadNew>
 8004070:	4602      	mov	r2, r0
 8004072:	4b2f      	ldr	r3, [pc, #188]	; (8004130 <main+0x17c>)
 8004074:	601a      	str	r2, [r3, #0]

        /* creation of ESMMain */
        esmMainHandle = osThreadNew(startESMMain, NULL, &esmMain_attributes);
 8004076:	4a2f      	ldr	r2, [pc, #188]	; (8004134 <main+0x180>)
 8004078:	2100      	movs	r1, #0
 800407a:	482f      	ldr	r0, [pc, #188]	; (8004138 <main+0x184>)
 800407c:	f00b fd26 	bl	800facc <osThreadNew>
 8004080:	4602      	mov	r2, r0
 8004082:	4b2e      	ldr	r3, [pc, #184]	; (800413c <main+0x188>)
 8004084:	601a      	str	r2, [r3, #0]

        /* creation of buttonPress */
        buttonPressHandle = osThreadNew(startButtonPress, NULL, &buttonPress_attributes);
 8004086:	4a2e      	ldr	r2, [pc, #184]	; (8004140 <main+0x18c>)
 8004088:	2100      	movs	r1, #0
 800408a:	482e      	ldr	r0, [pc, #184]	; (8004144 <main+0x190>)
 800408c:	f00b fd1e 	bl	800facc <osThreadNew>
 8004090:	4602      	mov	r2, r0
 8004092:	4b2d      	ldr	r3, [pc, #180]	; (8004148 <main+0x194>)
 8004094:	601a      	str	r2, [r3, #0]

        /* creation of alert */
        alertHandle = osThreadNew(startAlert, NULL, &alert_attributes);
 8004096:	4a2d      	ldr	r2, [pc, #180]	; (800414c <main+0x198>)
 8004098:	2100      	movs	r1, #0
 800409a:	482d      	ldr	r0, [pc, #180]	; (8004150 <main+0x19c>)
 800409c:	f00b fd16 	bl	800facc <osThreadNew>
 80040a0:	4602      	mov	r2, r0
 80040a2:	4b2c      	ldr	r3, [pc, #176]	; (8004154 <main+0x1a0>)
 80040a4:	601a      	str	r2, [r3, #0]

        /* creation of conditionsPoll */
        conditionsPollHandle = osThreadNew(startConditionsPoll, NULL, &conditionsPoll_attributes);
 80040a6:	4a2c      	ldr	r2, [pc, #176]	; (8004158 <main+0x1a4>)
 80040a8:	2100      	movs	r1, #0
 80040aa:	482c      	ldr	r0, [pc, #176]	; (800415c <main+0x1a8>)
 80040ac:	f00b fd0e 	bl	800facc <osThreadNew>
 80040b0:	4602      	mov	r2, r0
 80040b2:	4b2b      	ldr	r3, [pc, #172]	; (8004160 <main+0x1ac>)
 80040b4:	601a      	str	r2, [r3, #0]

        /* creation of bleTX */
        bleTXHandle = osThreadNew(startBLETX, NULL, &bleTX_attributes);
 80040b6:	4a2b      	ldr	r2, [pc, #172]	; (8004164 <main+0x1b0>)
 80040b8:	2100      	movs	r1, #0
 80040ba:	482b      	ldr	r0, [pc, #172]	; (8004168 <main+0x1b4>)
 80040bc:	f00b fd06 	bl	800facc <osThreadNew>
 80040c0:	4602      	mov	r2, r0
 80040c2:	4b2a      	ldr	r3, [pc, #168]	; (800416c <main+0x1b8>)
 80040c4:	601a      	str	r2, [r3, #0]

        /* creation of bleRX */
        bleRXHandle = osThreadNew(startBLERX, NULL, &bleRX_attributes);
 80040c6:	4a2a      	ldr	r2, [pc, #168]	; (8004170 <main+0x1bc>)
 80040c8:	2100      	movs	r1, #0
 80040ca:	482a      	ldr	r0, [pc, #168]	; (8004174 <main+0x1c0>)
 80040cc:	f00b fcfe 	bl	800facc <osThreadNew>
 80040d0:	4602      	mov	r2, r0
 80040d2:	4b29      	ldr	r3, [pc, #164]	; (8004178 <main+0x1c4>)
 80040d4:	601a      	str	r2, [r3, #0]


  /* Init code for STM32_WPAN */
  APPE_Init();
 80040d6:	f7fd feab 	bl	8001e30 <APPE_Init>
  /* Start scheduler */
  osKernelStart();
 80040da:	f00b fcc1 	bl	800fa60 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  while (1){}
 80040de:	e7fe      	b.n	80040de <main+0x12a>
 80040e0:	58004000 	.word	0x58004000
 80040e4:	fa1863a7 	.word	0xfa1863a7
 80040e8:	08019b74 	.word	0x08019b74
 80040ec:	2002e0c8 	.word	0x2002e0c8
 80040f0:	08019b84 	.word	0x08019b84
 80040f4:	2002e1f4 	.word	0x2002e1f4
 80040f8:	08019b94 	.word	0x08019b94
 80040fc:	2002e320 	.word	0x2002e320
 8004100:	08019ba4 	.word	0x08019ba4
 8004104:	2002e244 	.word	0x2002e244
 8004108:	08019bb4 	.word	0x08019bb4
 800410c:	2002e250 	.word	0x2002e250
 8004110:	08019bc4 	.word	0x08019bc4
 8004114:	2002e248 	.word	0x2002e248
 8004118:	08019b44 	.word	0x08019b44
 800411c:	2002e2b0 	.word	0x2002e2b0
 8004120:	08019b5c 	.word	0x08019b5c
 8004124:	2002e07c 	.word	0x2002e07c
 8004128:	08019a48 	.word	0x08019a48
 800412c:	08004861 	.word	0x08004861
 8004130:	2002e2b4 	.word	0x2002e2b4
 8004134:	08019a6c 	.word	0x08019a6c
 8004138:	08005349 	.word	0x08005349
 800413c:	2002e2b8 	.word	0x2002e2b8
 8004140:	08019a90 	.word	0x08019a90
 8004144:	08005cc1 	.word	0x08005cc1
 8004148:	2002e1ec 	.word	0x2002e1ec
 800414c:	08019ab4 	.word	0x08019ab4
 8004150:	08005e65 	.word	0x08005e65
 8004154:	2002e1f0 	.word	0x2002e1f0
 8004158:	08019ad8 	.word	0x08019ad8
 800415c:	08006119 	.word	0x08006119
 8004160:	2002e260 	.word	0x2002e260
 8004164:	08019afc 	.word	0x08019afc
 8004168:	08006265 	.word	0x08006265
 800416c:	2002e24c 	.word	0x2002e24c
 8004170:	08019b20 	.word	0x08019b20
 8004174:	0800675d 	.word	0x0800675d
 8004178:	2002e25c 	.word	0x2002e25c

0800417c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800417c:	b580      	push	{r7, lr}
 800417e:	b0ae      	sub	sp, #184	; 0xb8
 8004180:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004182:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8004186:	2248      	movs	r2, #72	; 0x48
 8004188:	2100      	movs	r1, #0
 800418a:	4618      	mov	r0, r3
 800418c:	f00f fe81 	bl	8013e92 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004190:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8004194:	2200      	movs	r2, #0
 8004196:	601a      	str	r2, [r3, #0]
 8004198:	605a      	str	r2, [r3, #4]
 800419a:	609a      	str	r2, [r3, #8]
 800419c:	60da      	str	r2, [r3, #12]
 800419e:	611a      	str	r2, [r3, #16]
 80041a0:	615a      	str	r2, [r3, #20]
 80041a2:	619a      	str	r2, [r3, #24]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80041a4:	1d3b      	adds	r3, r7, #4
 80041a6:	2250      	movs	r2, #80	; 0x50
 80041a8:	2100      	movs	r1, #0
 80041aa:	4618      	mov	r0, r3
 80041ac:	f00f fe71 	bl	8013e92 <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80041b0:	f005 f84c 	bl	800924c <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80041b4:	2000      	movs	r0, #0
 80041b6:	f7ff fdfb 	bl	8003db0 <LL_RCC_LSE_SetDriveCapability>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80041ba:	4b2f      	ldr	r3, [pc, #188]	; (8004278 <SystemClock_Config+0xfc>)
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80041c2:	4a2d      	ldr	r2, [pc, #180]	; (8004278 <SystemClock_Config+0xfc>)
 80041c4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80041c8:	6013      	str	r3, [r2, #0]
 80041ca:	4b2b      	ldr	r3, [pc, #172]	; (8004278 <SystemClock_Config+0xfc>)
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80041d2:	603b      	str	r3, [r7, #0]
 80041d4:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 80041d6:	2307      	movs	r3, #7
 80041d8:	673b      	str	r3, [r7, #112]	; 0x70
                              |RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80041da:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80041de:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80041e0:	2301      	movs	r3, #1
 80041e2:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80041e4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80041e8:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80041ea:	2340      	movs	r3, #64	; 0x40
 80041ec:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80041f0:	2300      	movs	r3, #0
 80041f2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80041f6:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80041fa:	4618      	mov	r0, r3
 80041fc:	f005 fbc6 	bl	800998c <HAL_RCC_OscConfig>
 8004200:	4603      	mov	r3, r0
 8004202:	2b00      	cmp	r3, #0
 8004204:	d001      	beq.n	800420a <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8004206:	f002 fcd1 	bl	8006bac <Error_Handler>
  }
  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 800420a:	236f      	movs	r3, #111	; 0x6f
 800420c:	657b      	str	r3, [r7, #84]	; 0x54
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 800420e:	2302      	movs	r3, #2
 8004210:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004212:	2300      	movs	r3, #0
 8004214:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8004216:	2300      	movs	r3, #0
 8004218:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800421a:	2300      	movs	r3, #0
 800421c:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 800421e:	2300      	movs	r3, #0
 8004220:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 8004222:	2300      	movs	r3, #0
 8004224:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8004226:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800422a:	2101      	movs	r1, #1
 800422c:	4618      	mov	r0, r3
 800422e:	f005 ff39 	bl	800a0a4 <HAL_RCC_ClockConfig>
 8004232:	4603      	mov	r3, r0
 8004234:	2b00      	cmp	r3, #0
 8004236:	d001      	beq.n	800423c <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8004238:	f002 fcb8 	bl	8006bac <Error_Handler>
  }
  /** Initializes the peripherals clocks
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS|RCC_PERIPHCLK_RFWAKEUP
 800423c:	f643 0303 	movw	r3, #14339	; 0x3803
 8004240:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USART1
                              |RCC_PERIPHCLK_LPUART1;
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8004242:	2300      	movs	r3, #0
 8004244:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8004246:	2300      	movs	r3, #0
 8004248:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 800424a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800424e:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInitStruct.RFWakeUpClockSelection = RCC_RFWKPCLKSOURCE_LSE;
 8004250:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004254:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSE;
 8004256:	2302      	movs	r3, #2
 8004258:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE1;
 800425a:	2310      	movs	r3, #16
 800425c:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800425e:	1d3b      	adds	r3, r7, #4
 8004260:	4618      	mov	r0, r3
 8004262:	f006 fb7a 	bl	800a95a <HAL_RCCEx_PeriphCLKConfig>
 8004266:	4603      	mov	r3, r0
 8004268:	2b00      	cmp	r3, #0
 800426a:	d001      	beq.n	8004270 <SystemClock_Config+0xf4>
  {
    Error_Handler();
 800426c:	f002 fc9e 	bl	8006bac <Error_Handler>
  LL_PWR_SMPS_SetOutputVoltageLevel(LL_PWR_SMPS_OUTPUT_VOLTAGE_1V40);
  LL_PWR_SMPS_Enable();
#endif

  /* USER CODE END Smps */
}
 8004270:	bf00      	nop
 8004272:	37b8      	adds	r7, #184	; 0xb8
 8004274:	46bd      	mov	sp, r7
 8004276:	bd80      	pop	{r7, pc}
 8004278:	58000400 	.word	0x58000400

0800427c <MX_I2C1_Init>:

static void MX_I2C1_Init(void)
{
 800427c:	b580      	push	{r7, lr}
 800427e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8004280:	4b1b      	ldr	r3, [pc, #108]	; (80042f0 <MX_I2C1_Init+0x74>)
 8004282:	4a1c      	ldr	r2, [pc, #112]	; (80042f4 <MX_I2C1_Init+0x78>)
 8004284:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00300F38;
 8004286:	4b1a      	ldr	r3, [pc, #104]	; (80042f0 <MX_I2C1_Init+0x74>)
 8004288:	4a1b      	ldr	r2, [pc, #108]	; (80042f8 <MX_I2C1_Init+0x7c>)
 800428a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800428c:	4b18      	ldr	r3, [pc, #96]	; (80042f0 <MX_I2C1_Init+0x74>)
 800428e:	2200      	movs	r2, #0
 8004290:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8004292:	4b17      	ldr	r3, [pc, #92]	; (80042f0 <MX_I2C1_Init+0x74>)
 8004294:	2201      	movs	r2, #1
 8004296:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8004298:	4b15      	ldr	r3, [pc, #84]	; (80042f0 <MX_I2C1_Init+0x74>)
 800429a:	2200      	movs	r2, #0
 800429c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800429e:	4b14      	ldr	r3, [pc, #80]	; (80042f0 <MX_I2C1_Init+0x74>)
 80042a0:	2200      	movs	r2, #0
 80042a2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80042a4:	4b12      	ldr	r3, [pc, #72]	; (80042f0 <MX_I2C1_Init+0x74>)
 80042a6:	2200      	movs	r2, #0
 80042a8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80042aa:	4b11      	ldr	r3, [pc, #68]	; (80042f0 <MX_I2C1_Init+0x74>)
 80042ac:	2200      	movs	r2, #0
 80042ae:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80042b0:	4b0f      	ldr	r3, [pc, #60]	; (80042f0 <MX_I2C1_Init+0x74>)
 80042b2:	2200      	movs	r2, #0
 80042b4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80042b6:	480e      	ldr	r0, [pc, #56]	; (80042f0 <MX_I2C1_Init+0x74>)
 80042b8:	f004 f800 	bl	80082bc <HAL_I2C_Init>
 80042bc:	4603      	mov	r3, r0
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d001      	beq.n	80042c6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80042c2:	f002 fc73 	bl	8006bac <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80042c6:	2100      	movs	r1, #0
 80042c8:	4809      	ldr	r0, [pc, #36]	; (80042f0 <MX_I2C1_Init+0x74>)
 80042ca:	f004 ff27 	bl	800911c <HAL_I2CEx_ConfigAnalogFilter>
 80042ce:	4603      	mov	r3, r0
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d001      	beq.n	80042d8 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80042d4:	f002 fc6a 	bl	8006bac <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80042d8:	2100      	movs	r1, #0
 80042da:	4805      	ldr	r0, [pc, #20]	; (80042f0 <MX_I2C1_Init+0x74>)
 80042dc:	f004 ff69 	bl	80091b2 <HAL_I2CEx_ConfigDigitalFilter>
 80042e0:	4603      	mov	r3, r0
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d001      	beq.n	80042ea <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80042e6:	f002 fc61 	bl	8006bac <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80042ea:	bf00      	nop
 80042ec:	bd80      	pop	{r7, pc}
 80042ee:	bf00      	nop
 80042f0:	2002e1f8 	.word	0x2002e1f8
 80042f4:	40005400 	.word	0x40005400
 80042f8:	00300f38 	.word	0x00300f38

080042fc <MX_RF_Init>:
  * @brief RF Initialization Function
  * @param None
  * @retval None
  */
static void MX_RF_Init(void)
{
 80042fc:	b480      	push	{r7}
 80042fe:	af00      	add	r7, sp, #0
  /* USER CODE END RF_Init 1 */
  /* USER CODE BEGIN RF_Init 2 */

  /* USER CODE END RF_Init 2 */

}
 8004300:	bf00      	nop
 8004302:	46bd      	mov	sp, r7
 8004304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004308:	4770      	bx	lr
	...

0800430c <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 800430c:	b580      	push	{r7, lr}
 800430e:	b086      	sub	sp, #24
 8004310:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8004312:	4b2b      	ldr	r3, [pc, #172]	; (80043c0 <MX_RTC_Init+0xb4>)
 8004314:	4a2b      	ldr	r2, [pc, #172]	; (80043c4 <MX_RTC_Init+0xb8>)
 8004316:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8004318:	4b29      	ldr	r3, [pc, #164]	; (80043c0 <MX_RTC_Init+0xb4>)
 800431a:	2200      	movs	r2, #0
 800431c:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 800431e:	4b28      	ldr	r3, [pc, #160]	; (80043c0 <MX_RTC_Init+0xb4>)
 8004320:	227f      	movs	r2, #127	; 0x7f
 8004322:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8004324:	4b26      	ldr	r3, [pc, #152]	; (80043c0 <MX_RTC_Init+0xb4>)
 8004326:	22ff      	movs	r2, #255	; 0xff
 8004328:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800432a:	4b25      	ldr	r3, [pc, #148]	; (80043c0 <MX_RTC_Init+0xb4>)
 800432c:	2200      	movs	r2, #0
 800432e:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8004330:	4b23      	ldr	r3, [pc, #140]	; (80043c0 <MX_RTC_Init+0xb4>)
 8004332:	2200      	movs	r2, #0
 8004334:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8004336:	4b22      	ldr	r3, [pc, #136]	; (80043c0 <MX_RTC_Init+0xb4>)
 8004338:	2200      	movs	r2, #0
 800433a:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 800433c:	4b20      	ldr	r3, [pc, #128]	; (80043c0 <MX_RTC_Init+0xb4>)
 800433e:	2200      	movs	r2, #0
 8004340:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8004342:	481f      	ldr	r0, [pc, #124]	; (80043c0 <MX_RTC_Init+0xb4>)
 8004344:	f006 fd8f 	bl	800ae66 <HAL_RTC_Init>
 8004348:	4603      	mov	r3, r0
 800434a:	2b00      	cmp	r3, #0
 800434c:	d001      	beq.n	8004352 <MX_RTC_Init+0x46>
  {
    Error_Handler();
 800434e:	f002 fc2d 	bl	8006bac <Error_Handler>
  /* Enable RTC registers write protection */
  //LL_RTC_EnableWriteProtection(RTC);

  /** Initialize RTC and set the Time and Date
    */
    RTC_TimeTypeDef sTime = {0};
 8004352:	1d3b      	adds	r3, r7, #4
 8004354:	2200      	movs	r2, #0
 8004356:	601a      	str	r2, [r3, #0]
 8004358:	605a      	str	r2, [r3, #4]
 800435a:	609a      	str	r2, [r3, #8]
 800435c:	60da      	str	r2, [r3, #12]
 800435e:	611a      	str	r2, [r3, #16]
    RTC_DateTypeDef sDate = {0};
 8004360:	2300      	movs	r3, #0
 8004362:	603b      	str	r3, [r7, #0]

    sTime.Hours = 0x11;
 8004364:	2311      	movs	r3, #17
 8004366:	713b      	strb	r3, [r7, #4]
    sTime.Minutes = 0x59;
 8004368:	2359      	movs	r3, #89	; 0x59
 800436a:	717b      	strb	r3, [r7, #5]
    sTime.Seconds = 0x29;
 800436c:	2329      	movs	r3, #41	; 0x29
 800436e:	71bb      	strb	r3, [r7, #6]
    sTime.SubSeconds = 0x0;
 8004370:	2300      	movs	r3, #0
 8004372:	60bb      	str	r3, [r7, #8]
    sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8004374:	2300      	movs	r3, #0
 8004376:	613b      	str	r3, [r7, #16]
    sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8004378:	2300      	movs	r3, #0
 800437a:	617b      	str	r3, [r7, #20]
    if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 800437c:	1d3b      	adds	r3, r7, #4
 800437e:	2201      	movs	r2, #1
 8004380:	4619      	mov	r1, r3
 8004382:	480f      	ldr	r0, [pc, #60]	; (80043c0 <MX_RTC_Init+0xb4>)
 8004384:	f006 fe0d 	bl	800afa2 <HAL_RTC_SetTime>
 8004388:	4603      	mov	r3, r0
 800438a:	2b00      	cmp	r3, #0
 800438c:	d001      	beq.n	8004392 <MX_RTC_Init+0x86>
    {
      Error_Handler();
 800438e:	f002 fc0d 	bl	8006bac <Error_Handler>
    }
    sDate.WeekDay = RTC_WEEKDAY_TUESDAY;
 8004392:	2302      	movs	r3, #2
 8004394:	703b      	strb	r3, [r7, #0]
    sDate.Month = RTC_MONTH_MARCH;
 8004396:	2303      	movs	r3, #3
 8004398:	707b      	strb	r3, [r7, #1]
    sDate.Date = 0x29;
 800439a:	2329      	movs	r3, #41	; 0x29
 800439c:	70bb      	strb	r3, [r7, #2]
    sDate.Year = 0x20;
 800439e:	2320      	movs	r3, #32
 80043a0:	70fb      	strb	r3, [r7, #3]

    if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 80043a2:	463b      	mov	r3, r7
 80043a4:	2201      	movs	r2, #1
 80043a6:	4619      	mov	r1, r3
 80043a8:	4805      	ldr	r0, [pc, #20]	; (80043c0 <MX_RTC_Init+0xb4>)
 80043aa:	f006 ff1a 	bl	800b1e2 <HAL_RTC_SetDate>
 80043ae:	4603      	mov	r3, r0
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d001      	beq.n	80043b8 <MX_RTC_Init+0xac>
    {
      Error_Handler();
 80043b4:	f002 fbfa 	bl	8006bac <Error_Handler>
    }


  /* USER CODE END RTC_Init 2 */

}
 80043b8:	bf00      	nop
 80043ba:	3718      	adds	r7, #24
 80043bc:	46bd      	mov	sp, r7
 80043be:	bd80      	pop	{r7, pc}
 80043c0:	2002e0a4 	.word	0x2002e0a4
 80043c4:	40002800 	.word	0x40002800

080043c8 <MX_SPI1_Init>:

/* USER CODE BEGIN 4 */
static void MX_SPI1_Init(void)
{
 80043c8:	b580      	push	{r7, lr}
 80043ca:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80043cc:	4b1b      	ldr	r3, [pc, #108]	; (800443c <MX_SPI1_Init+0x74>)
 80043ce:	4a1c      	ldr	r2, [pc, #112]	; (8004440 <MX_SPI1_Init+0x78>)
 80043d0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80043d2:	4b1a      	ldr	r3, [pc, #104]	; (800443c <MX_SPI1_Init+0x74>)
 80043d4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80043d8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_1LINE;
 80043da:	4b18      	ldr	r3, [pc, #96]	; (800443c <MX_SPI1_Init+0x74>)
 80043dc:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80043e0:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80043e2:	4b16      	ldr	r3, [pc, #88]	; (800443c <MX_SPI1_Init+0x74>)
 80043e4:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80043e8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80043ea:	4b14      	ldr	r3, [pc, #80]	; (800443c <MX_SPI1_Init+0x74>)
 80043ec:	2200      	movs	r2, #0
 80043ee:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80043f0:	4b12      	ldr	r3, [pc, #72]	; (800443c <MX_SPI1_Init+0x74>)
 80043f2:	2200      	movs	r2, #0
 80043f4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80043f6:	4b11      	ldr	r3, [pc, #68]	; (800443c <MX_SPI1_Init+0x74>)
 80043f8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80043fc:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80043fe:	4b0f      	ldr	r3, [pc, #60]	; (800443c <MX_SPI1_Init+0x74>)
 8004400:	2200      	movs	r2, #0
 8004402:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8004404:	4b0d      	ldr	r3, [pc, #52]	; (800443c <MX_SPI1_Init+0x74>)
 8004406:	2200      	movs	r2, #0
 8004408:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800440a:	4b0c      	ldr	r3, [pc, #48]	; (800443c <MX_SPI1_Init+0x74>)
 800440c:	2200      	movs	r2, #0
 800440e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004410:	4b0a      	ldr	r3, [pc, #40]	; (800443c <MX_SPI1_Init+0x74>)
 8004412:	2200      	movs	r2, #0
 8004414:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8004416:	4b09      	ldr	r3, [pc, #36]	; (800443c <MX_SPI1_Init+0x74>)
 8004418:	2207      	movs	r2, #7
 800441a:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800441c:	4b07      	ldr	r3, [pc, #28]	; (800443c <MX_SPI1_Init+0x74>)
 800441e:	2200      	movs	r2, #0
 8004420:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8004422:	4b06      	ldr	r3, [pc, #24]	; (800443c <MX_SPI1_Init+0x74>)
 8004424:	2208      	movs	r2, #8
 8004426:	635a      	str	r2, [r3, #52]	; 0x34

  //hspi1.Init.Direction = SPI_DIRECTION_2LINES;
  //hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;

  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8004428:	4804      	ldr	r0, [pc, #16]	; (800443c <MX_SPI1_Init+0x74>)
 800442a:	f007 f897 	bl	800b55c <HAL_SPI_Init>
 800442e:	4603      	mov	r3, r0
 8004430:	2b00      	cmp	r3, #0
 8004432:	d001      	beq.n	8004438 <MX_SPI1_Init+0x70>
  {
    Error_Handler();
 8004434:	f002 fbba 	bl	8006bac <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8004438:	bf00      	nop
 800443a:	bd80      	pop	{r7, pc}
 800443c:	2002e2bc 	.word	0x2002e2bc
 8004440:	40013000 	.word	0x40013000

08004444 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8004444:	b580      	push	{r7, lr}
 8004446:	b09c      	sub	sp, #112	; 0x70
 8004448:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800444a:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800444e:	2200      	movs	r2, #0
 8004450:	601a      	str	r2, [r3, #0]
 8004452:	605a      	str	r2, [r3, #4]
 8004454:	609a      	str	r2, [r3, #8]
 8004456:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004458:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800445c:	2200      	movs	r2, #0
 800445e:	601a      	str	r2, [r3, #0]
 8004460:	605a      	str	r2, [r3, #4]
 8004462:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004464:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8004468:	2200      	movs	r2, #0
 800446a:	601a      	str	r2, [r3, #0]
 800446c:	605a      	str	r2, [r3, #4]
 800446e:	609a      	str	r2, [r3, #8]
 8004470:	60da      	str	r2, [r3, #12]
 8004472:	611a      	str	r2, [r3, #16]
 8004474:	615a      	str	r2, [r3, #20]
 8004476:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8004478:	1d3b      	adds	r3, r7, #4
 800447a:	2234      	movs	r2, #52	; 0x34
 800447c:	2100      	movs	r1, #0
 800447e:	4618      	mov	r0, r3
 8004480:	f00f fd07 	bl	8013e92 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8004484:	4b45      	ldr	r3, [pc, #276]	; (800459c <MX_TIM1_Init+0x158>)
 8004486:	4a46      	ldr	r2, [pc, #280]	; (80045a0 <MX_TIM1_Init+0x15c>)
 8004488:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800448a:	4b44      	ldr	r3, [pc, #272]	; (800459c <MX_TIM1_Init+0x158>)
 800448c:	2200      	movs	r2, #0
 800448e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004490:	4b42      	ldr	r3, [pc, #264]	; (800459c <MX_TIM1_Init+0x158>)
 8004492:	2200      	movs	r2, #0
 8004494:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 100;
 8004496:	4b41      	ldr	r3, [pc, #260]	; (800459c <MX_TIM1_Init+0x158>)
 8004498:	2264      	movs	r2, #100	; 0x64
 800449a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800449c:	4b3f      	ldr	r3, [pc, #252]	; (800459c <MX_TIM1_Init+0x158>)
 800449e:	2200      	movs	r2, #0
 80044a0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80044a2:	4b3e      	ldr	r3, [pc, #248]	; (800459c <MX_TIM1_Init+0x158>)
 80044a4:	2200      	movs	r2, #0
 80044a6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80044a8:	4b3c      	ldr	r3, [pc, #240]	; (800459c <MX_TIM1_Init+0x158>)
 80044aa:	2200      	movs	r2, #0
 80044ac:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80044ae:	483b      	ldr	r0, [pc, #236]	; (800459c <MX_TIM1_Init+0x158>)
 80044b0:	f007 fbc2 	bl	800bc38 <HAL_TIM_Base_Init>
 80044b4:	4603      	mov	r3, r0
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d001      	beq.n	80044be <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 80044ba:	f002 fb77 	bl	8006bac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80044be:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80044c2:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80044c4:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80044c8:	4619      	mov	r1, r3
 80044ca:	4834      	ldr	r0, [pc, #208]	; (800459c <MX_TIM1_Init+0x158>)
 80044cc:	f008 f84e 	bl	800c56c <HAL_TIM_ConfigClockSource>
 80044d0:	4603      	mov	r3, r0
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d001      	beq.n	80044da <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80044d6:	f002 fb69 	bl	8006bac <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80044da:	4830      	ldr	r0, [pc, #192]	; (800459c <MX_TIM1_Init+0x158>)
 80044dc:	f007 fc52 	bl	800bd84 <HAL_TIM_PWM_Init>
 80044e0:	4603      	mov	r3, r0
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d001      	beq.n	80044ea <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 80044e6:	f002 fb61 	bl	8006bac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80044ea:	2300      	movs	r3, #0
 80044ec:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80044ee:	2300      	movs	r3, #0
 80044f0:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80044f2:	2300      	movs	r3, #0
 80044f4:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80044f6:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80044fa:	4619      	mov	r1, r3
 80044fc:	4827      	ldr	r0, [pc, #156]	; (800459c <MX_TIM1_Init+0x158>)
 80044fe:	f008 fcbb 	bl	800ce78 <HAL_TIMEx_MasterConfigSynchronization>
 8004502:	4603      	mov	r3, r0
 8004504:	2b00      	cmp	r3, #0
 8004506:	d001      	beq.n	800450c <MX_TIM1_Init+0xc8>
  {
    Error_Handler();
 8004508:	f002 fb50 	bl	8006bac <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800450c:	2360      	movs	r3, #96	; 0x60
 800450e:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 100;
 8004510:	2364      	movs	r3, #100	; 0x64
 8004512:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004514:	2300      	movs	r3, #0
 8004516:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8004518:	2300      	movs	r3, #0
 800451a:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 800451c:	2304      	movs	r3, #4
 800451e:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8004520:	2300      	movs	r3, #0
 8004522:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8004524:	2300      	movs	r3, #0
 8004526:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004528:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800452c:	2200      	movs	r2, #0
 800452e:	4619      	mov	r1, r3
 8004530:	481a      	ldr	r0, [pc, #104]	; (800459c <MX_TIM1_Init+0x158>)
 8004532:	f007 ff0b 	bl	800c34c <HAL_TIM_PWM_ConfigChannel>
 8004536:	4603      	mov	r3, r0
 8004538:	2b00      	cmp	r3, #0
 800453a:	d001      	beq.n	8004540 <MX_TIM1_Init+0xfc>
  {
    Error_Handler();
 800453c:	f002 fb36 	bl	8006bac <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8004540:	2300      	movs	r3, #0
 8004542:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8004544:	2300      	movs	r3, #0
 8004546:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8004548:	2300      	movs	r3, #0
 800454a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800454c:	2300      	movs	r3, #0
 800454e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8004550:	2300      	movs	r3, #0
 8004552:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8004554:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004558:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800455a:	2300      	movs	r3, #0
 800455c:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 800455e:	2300      	movs	r3, #0
 8004560:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8004562:	2300      	movs	r3, #0
 8004564:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8004566:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800456a:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 800456c:	2300      	movs	r3, #0
 800456e:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8004570:	2300      	movs	r3, #0
 8004572:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8004574:	2300      	movs	r3, #0
 8004576:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8004578:	1d3b      	adds	r3, r7, #4
 800457a:	4619      	mov	r1, r3
 800457c:	4807      	ldr	r0, [pc, #28]	; (800459c <MX_TIM1_Init+0x158>)
 800457e:	f008 fcdb 	bl	800cf38 <HAL_TIMEx_ConfigBreakDeadTime>
 8004582:	4603      	mov	r3, r0
 8004584:	2b00      	cmp	r3, #0
 8004586:	d001      	beq.n	800458c <MX_TIM1_Init+0x148>
  {
    Error_Handler();
 8004588:	f002 fb10 	bl	8006bac <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800458c:	4803      	ldr	r0, [pc, #12]	; (800459c <MX_TIM1_Init+0x158>)
 800458e:	f002 fd89 	bl	80070a4 <HAL_TIM_MspPostInit>

}
 8004592:	bf00      	nop
 8004594:	3770      	adds	r7, #112	; 0x70
 8004596:	46bd      	mov	sp, r7
 8004598:	bd80      	pop	{r7, pc}
 800459a:	bf00      	nop
 800459c:	2002e264 	.word	0x2002e264
 80045a0:	40012c00 	.word	0x40012c00

080045a4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80045a4:	b580      	push	{r7, lr}
 80045a6:	b086      	sub	sp, #24
 80045a8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80045aa:	1d3b      	adds	r3, r7, #4
 80045ac:	2200      	movs	r2, #0
 80045ae:	601a      	str	r2, [r3, #0]
 80045b0:	605a      	str	r2, [r3, #4]
 80045b2:	609a      	str	r2, [r3, #8]
 80045b4:	60da      	str	r2, [r3, #12]
 80045b6:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80045b8:	2004      	movs	r0, #4
 80045ba:	f7ff fc57 	bl	8003e6c <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80045be:	2002      	movs	r0, #2
 80045c0:	f7ff fc54 	bl	8003e6c <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80045c4:	2001      	movs	r0, #1
 80045c6:	f7ff fc51 	bl	8003e6c <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OLED_RESET_GPIO_Port, OLED_RESET_Pin, GPIO_PIN_RESET);
 80045ca:	2200      	movs	r2, #0
 80045cc:	2101      	movs	r1, #1
 80045ce:	4824      	ldr	r0, [pc, #144]	; (8004660 <MX_GPIO_Init+0xbc>)
 80045d0:	f003 fe20 	bl	8008214 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : OLED_RESET_Pin */
  GPIO_InitStruct.Pin = OLED_RESET_Pin;
 80045d4:	2301      	movs	r3, #1
 80045d6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80045d8:	2301      	movs	r3, #1
 80045da:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80045dc:	2300      	movs	r3, #0
 80045de:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80045e0:	2300      	movs	r3, #0
 80045e2:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(OLED_RESET_GPIO_Port, &GPIO_InitStruct);
 80045e4:	1d3b      	adds	r3, r7, #4
 80045e6:	4619      	mov	r1, r3
 80045e8:	481d      	ldr	r0, [pc, #116]	; (8004660 <MX_GPIO_Init+0xbc>)
 80045ea:	f003 fc8b 	bl	8007f04 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON_1_Pin BUTTON_2_Pin BUTTON_3_Pin */
  GPIO_InitStruct.Pin = BUTTON_1_Pin|BUTTON_2_Pin|BUTTON_3_Pin;
 80045ee:	2338      	movs	r3, #56	; 0x38
 80045f0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80045f2:	4b1c      	ldr	r3, [pc, #112]	; (8004664 <MX_GPIO_Init+0xc0>)
 80045f4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80045f6:	2301      	movs	r3, #1
 80045f8:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80045fa:	1d3b      	adds	r3, r7, #4
 80045fc:	4619      	mov	r1, r3
 80045fe:	4818      	ldr	r0, [pc, #96]	; (8004660 <MX_GPIO_Init+0xbc>)
 8004600:	f003 fc80 	bl	8007f04 <HAL_GPIO_Init>

  /*Configure SPI_NSS pin to be GPIO, pulled up*/
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8004604:	2310      	movs	r3, #16
 8004606:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004608:	2301      	movs	r3, #1
 800460a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800460c:	2301      	movs	r3, #1
 800460e:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004610:	1d3b      	adds	r3, r7, #4
 8004612:	4619      	mov	r1, r3
 8004614:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004618:	f003 fc74 	bl	8007f04 <HAL_GPIO_Init>

  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 800461c:	2201      	movs	r2, #1
 800461e:	2110      	movs	r1, #16
 8004620:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004624:	f003 fdf6 	bl	8008214 <HAL_GPIO_WritePin>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI3_IRQn, 15, 0);
 8004628:	2200      	movs	r2, #0
 800462a:	210f      	movs	r1, #15
 800462c:	2009      	movs	r0, #9
 800462e:	f003 fc17 	bl	8007e60 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8004632:	2009      	movs	r0, #9
 8004634:	f003 fc2e 	bl	8007e94 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 15, 0);
 8004638:	2200      	movs	r2, #0
 800463a:	210f      	movs	r1, #15
 800463c:	200a      	movs	r0, #10
 800463e:	f003 fc0f 	bl	8007e60 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8004642:	200a      	movs	r0, #10
 8004644:	f003 fc26 	bl	8007e94 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 15, 0);
 8004648:	2200      	movs	r2, #0
 800464a:	210f      	movs	r1, #15
 800464c:	2017      	movs	r0, #23
 800464e:	f003 fc07 	bl	8007e60 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8004652:	2017      	movs	r0, #23
 8004654:	f003 fc1e 	bl	8007e94 <HAL_NVIC_EnableIRQ>

}
 8004658:	bf00      	nop
 800465a:	3718      	adds	r7, #24
 800465c:	46bd      	mov	sp, r7
 800465e:	bd80      	pop	{r7, pc}
 8004660:	48000400 	.word	0x48000400
 8004664:	10310000 	.word	0x10310000

08004668 <GlobalState_Init>:

/* USER CODE BEGIN 4 */


static void GlobalState_Init(){
 8004668:	b5b0      	push	{r4, r5, r7, lr}
 800466a:	b08a      	sub	sp, #40	; 0x28
 800466c:	af00      	add	r7, sp, #0
	GlobalState.timeBound.startHR_BCD = 0x10; //10AM, BCD
 800466e:	4b3d      	ldr	r3, [pc, #244]	; (8004764 <GlobalState_Init+0xfc>)
 8004670:	2210      	movs	r2, #16
 8004672:	701a      	strb	r2, [r3, #0]
	GlobalState.timeBound.endHR_BCD = 0x22;   //10PM, BCD
 8004674:	4b3b      	ldr	r3, [pc, #236]	; (8004764 <GlobalState_Init+0xfc>)
 8004676:	2222      	movs	r2, #34	; 0x22
 8004678:	705a      	strb	r2, [r3, #1]
	GlobalState.timeBound.minInterval = INTERVAL_MIN;   //15min min interval
 800467a:	4b3a      	ldr	r3, [pc, #232]	; (8004764 <GlobalState_Init+0xfc>)
 800467c:	222d      	movs	r2, #45	; 0x2d
 800467e:	709a      	strb	r2, [r3, #2]
	GlobalState.timeBound.maxInterval = INTERVAL_MAX;   //90min max interval
 8004680:	4b38      	ldr	r3, [pc, #224]	; (8004764 <GlobalState_Init+0xfc>)
 8004682:	224b      	movs	r2, #75	; 0x4b
 8004684:	70da      	strb	r2, [r3, #3]

	RTC_TimeTypeDef tempTime;
	RTC_DateTypeDef tempDate;
	HAL_RTC_GetTime(&hrtc, &tempTime, RTC_FORMAT_BCD);
 8004686:	f107 0314 	add.w	r3, r7, #20
 800468a:	2201      	movs	r2, #1
 800468c:	4619      	mov	r1, r3
 800468e:	4836      	ldr	r0, [pc, #216]	; (8004768 <GlobalState_Init+0x100>)
 8004690:	f006 fd4b 	bl	800b12a <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &tempDate, RTC_FORMAT_BCD);
 8004694:	f107 0310 	add.w	r3, r7, #16
 8004698:	2201      	movs	r2, #1
 800469a:	4619      	mov	r1, r3
 800469c:	4832      	ldr	r0, [pc, #200]	; (8004768 <GlobalState_Init+0x100>)
 800469e:	f006 fe4e 	bl	800b33e <HAL_RTC_GetDate>

	//shallow structs so no issues with assignment
	GlobalState.lastSeenTime.time = tempTime;
 80046a2:	4b30      	ldr	r3, [pc, #192]	; (8004764 <GlobalState_Init+0xfc>)
 80046a4:	1d1c      	adds	r4, r3, #4
 80046a6:	f107 0514 	add.w	r5, r7, #20
 80046aa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80046ac:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80046ae:	682b      	ldr	r3, [r5, #0]
 80046b0:	6023      	str	r3, [r4, #0]
	GlobalState.lastSeenTime.date = tempDate;
 80046b2:	4a2c      	ldr	r2, [pc, #176]	; (8004764 <GlobalState_Init+0xfc>)
 80046b4:	693b      	ldr	r3, [r7, #16]
 80046b6:	6193      	str	r3, [r2, #24]

	GlobalState.lastSurveyTime.time = tempTime;
 80046b8:	4b2a      	ldr	r3, [pc, #168]	; (8004764 <GlobalState_Init+0xfc>)
 80046ba:	f103 041c 	add.w	r4, r3, #28
 80046be:	f107 0514 	add.w	r5, r7, #20
 80046c2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80046c4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80046c6:	682b      	ldr	r3, [r5, #0]
 80046c8:	6023      	str	r3, [r4, #0]
	GlobalState.lastSurveyTime.date = tempDate;
 80046ca:	4a26      	ldr	r2, [pc, #152]	; (8004764 <GlobalState_Init+0xfc>)
 80046cc:	693b      	ldr	r3, [r7, #16]
 80046ce:	6313      	str	r3, [r2, #48]	; 0x30

	//GlobalState.timeEstimateSample.time = tempTime;
	//GlobalState.timeEstimateSample.date = tempDate;

	GlobalState.lastConditions.lux = 0.0;
 80046d0:	4b24      	ldr	r3, [pc, #144]	; (8004764 <GlobalState_Init+0xfc>)
 80046d2:	f04f 0200 	mov.w	r2, #0
 80046d6:	635a      	str	r2, [r3, #52]	; 0x34
	GlobalState.lastConditions.whiteLux = 0.0;
 80046d8:	4b22      	ldr	r3, [pc, #136]	; (8004764 <GlobalState_Init+0xfc>)
 80046da:	f04f 0200 	mov.w	r2, #0
 80046de:	639a      	str	r2, [r3, #56]	; 0x38
	GlobalState.lastConditions.temp = 0.0;
 80046e0:	4b20      	ldr	r3, [pc, #128]	; (8004764 <GlobalState_Init+0xfc>)
 80046e2:	f04f 0200 	mov.w	r2, #0
 80046e6:	63da      	str	r2, [r3, #60]	; 0x3c
	GlobalState.lastConditions.humd = 0.0;
 80046e8:	4b1e      	ldr	r3, [pc, #120]	; (8004764 <GlobalState_Init+0xfc>)
 80046ea:	f04f 0200 	mov.w	r2, #0
 80046ee:	641a      	str	r2, [r3, #64]	; 0x40

	GlobalState.programMode = MODE_RESTING;
 80046f0:	4b1c      	ldr	r3, [pc, #112]	; (8004764 <GlobalState_Init+0xfc>)
 80046f2:	2200      	movs	r2, #0
 80046f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

	GlobalState.surveyState.surveyID = SURVEY_NONE;
 80046f8:	4b1a      	ldr	r3, [pc, #104]	; (8004764 <GlobalState_Init+0xfc>)
 80046fa:	2200      	movs	r2, #0
 80046fc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
	char temp_string[10] = "  DRAMSAY.";
 8004700:	4a1a      	ldr	r2, [pc, #104]	; (800476c <GlobalState_Init+0x104>)
 8004702:	1d3b      	adds	r3, r7, #4
 8004704:	ca07      	ldmia	r2, {r0, r1, r2}
 8004706:	c303      	stmia	r3!, {r0, r1}
 8004708:	801a      	strh	r2, [r3, #0]
	strncpy(GlobalState.surveyState.screenText, temp_string, strlen(temp_string)+1);
 800470a:	1d3b      	adds	r3, r7, #4
 800470c:	4618      	mov	r0, r3
 800470e:	f7fb fd37 	bl	8000180 <strlen>
 8004712:	4603      	mov	r3, r0
 8004714:	1c5a      	adds	r2, r3, #1
 8004716:	1d3b      	adds	r3, r7, #4
 8004718:	4619      	mov	r1, r3
 800471a:	4815      	ldr	r0, [pc, #84]	; (8004770 <GlobalState_Init+0x108>)
 800471c:	f010 f912 	bl	8014944 <strncpy>
	GlobalState.surveyState.screenTextLength = strlen(temp_string);
 8004720:	1d3b      	adds	r3, r7, #4
 8004722:	4618      	mov	r0, r3
 8004724:	f7fb fd2c 	bl	8000180 <strlen>
 8004728:	4603      	mov	r3, r0
 800472a:	b2da      	uxtb	r2, r3
 800472c:	4b0d      	ldr	r3, [pc, #52]	; (8004764 <GlobalState_Init+0xfc>)
 800472e:	f883 20c9 	strb.w	r2, [r3, #201]	; 0xc9
	memset(GlobalState.surveyState.optionArray, 0, sizeof(GlobalState.surveyState.optionArray));
 8004732:	221c      	movs	r2, #28
 8004734:	2100      	movs	r1, #0
 8004736:	480f      	ldr	r0, [pc, #60]	; (8004774 <GlobalState_Init+0x10c>)
 8004738:	f00f fbab 	bl	8013e92 <memset>
	GlobalState.surveyState.optionArrayLength = 0;
 800473c:	4b09      	ldr	r3, [pc, #36]	; (8004764 <GlobalState_Init+0xfc>)
 800473e:	2200      	movs	r2, #0
 8004740:	f883 20e8 	strb.w	r2, [r3, #232]	; 0xe8

	GlobalState.currentInterval = 0;
 8004744:	4b07      	ldr	r3, [pc, #28]	; (8004764 <GlobalState_Init+0xfc>)
 8004746:	2200      	movs	r2, #0
 8004748:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	GlobalState.paused = 0;
 800474c:	4b05      	ldr	r3, [pc, #20]	; (8004764 <GlobalState_Init+0xfc>)
 800474e:	2200      	movs	r2, #0
 8004750:	f883 20ed 	strb.w	r2, [r3, #237]	; 0xed
	GlobalState.demo = 0;
 8004754:	4b03      	ldr	r3, [pc, #12]	; (8004764 <GlobalState_Init+0xfc>)
 8004756:	2200      	movs	r2, #0
 8004758:	f883 20ee 	strb.w	r2, [r3, #238]	; 0xee
}
 800475c:	bf00      	nop
 800475e:	3728      	adds	r7, #40	; 0x28
 8004760:	46bd      	mov	sp, r7
 8004762:	bdb0      	pop	{r4, r5, r7, pc}
 8004764:	2002e0cc 	.word	0x2002e0cc
 8004768:	2002e0a4 	.word	0x2002e0a4
 800476c:	080188d0 	.word	0x080188d0
 8004770:	2002e115 	.word	0x2002e115
 8004774:	2002e198 	.word	0x2002e198

08004778 <updateInterval>:

static void updateInterval(){
 8004778:	b580      	push	{r7, lr}
 800477a:	b082      	sub	sp, #8
 800477c:	af00      	add	r7, sp, #0
	uint32_t updateVal = rand() % (GlobalState.timeBound.maxInterval - GlobalState.timeBound.minInterval);
 800477e:	f010 f88d 	bl	801489c <rand>
 8004782:	4602      	mov	r2, r0
 8004784:	4b0c      	ldr	r3, [pc, #48]	; (80047b8 <updateInterval+0x40>)
 8004786:	78db      	ldrb	r3, [r3, #3]
 8004788:	4619      	mov	r1, r3
 800478a:	4b0b      	ldr	r3, [pc, #44]	; (80047b8 <updateInterval+0x40>)
 800478c:	789b      	ldrb	r3, [r3, #2]
 800478e:	1acb      	subs	r3, r1, r3
 8004790:	fb92 f1f3 	sdiv	r1, r2, r3
 8004794:	fb03 f301 	mul.w	r3, r3, r1
 8004798:	1ad3      	subs	r3, r2, r3
 800479a:	607b      	str	r3, [r7, #4]
	GlobalState.currentInterval = GlobalState.timeBound.minInterval + updateVal;
 800479c:	4b06      	ldr	r3, [pc, #24]	; (80047b8 <updateInterval+0x40>)
 800479e:	789a      	ldrb	r2, [r3, #2]
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	b2db      	uxtb	r3, r3
 80047a4:	4413      	add	r3, r2
 80047a6:	b2da      	uxtb	r2, r3
 80047a8:	4b03      	ldr	r3, [pc, #12]	; (80047b8 <updateInterval+0x40>)
 80047aa:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
}
 80047ae:	bf00      	nop
 80047b0:	3708      	adds	r7, #8
 80047b2:	46bd      	mov	sp, r7
 80047b4:	bd80      	pop	{r7, pc}
 80047b6:	bf00      	nop
 80047b8:	2002e0cc 	.word	0x2002e0cc

080047bc <HAL_GPIO_EXTI_Callback>:

static inline void clear_bit(long *x, int bitNum) {
    *x &= (~(1L << bitNum));
}

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 80047bc:	b580      	push	{r7, lr}
 80047be:	b086      	sub	sp, #24
 80047c0:	af02      	add	r7, sp, #8
 80047c2:	4603      	mov	r3, r0
 80047c4:	80fb      	strh	r3, [r7, #6]

	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 80047c6:	2300      	movs	r3, #0
 80047c8:	60fb      	str	r3, [r7, #12]
	xTaskNotifyFromISR(buttonPressHandle, GPIO_Pin, eSetValueWithOverwrite, &xHigherPriorityTaskWoken);
 80047ca:	4b0c      	ldr	r3, [pc, #48]	; (80047fc <HAL_GPIO_EXTI_Callback+0x40>)
 80047cc:	6818      	ldr	r0, [r3, #0]
 80047ce:	88f9      	ldrh	r1, [r7, #6]
 80047d0:	f107 030c 	add.w	r3, r7, #12
 80047d4:	9300      	str	r3, [sp, #0]
 80047d6:	2300      	movs	r3, #0
 80047d8:	2203      	movs	r2, #3
 80047da:	f00e fe4d 	bl	8013478 <xTaskGenericNotifyFromISR>
	portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d007      	beq.n	80047f4 <HAL_GPIO_EXTI_Callback+0x38>
 80047e4:	4b06      	ldr	r3, [pc, #24]	; (8004800 <HAL_GPIO_EXTI_Callback+0x44>)
 80047e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80047ea:	601a      	str	r2, [r3, #0]
 80047ec:	f3bf 8f4f 	dsb	sy
 80047f0:	f3bf 8f6f 	isb	sy

}
 80047f4:	bf00      	nop
 80047f6:	3710      	adds	r7, #16
 80047f8:	46bd      	mov	sp, r7
 80047fa:	bd80      	pop	{r7, pc}
 80047fc:	2002e1ec 	.word	0x2002e1ec
 8004800:	e000ed04 	.word	0xe000ed04

08004804 <updateLastSurveyTime>:

    return status_1 | status_2;

}

HAL_StatusTypeDef updateLastSurveyTime(){
 8004804:	b580      	push	{r7, lr}
 8004806:	b082      	sub	sp, #8
 8004808:	af00      	add	r7, sp, #0

	HAL_StatusTypeDef status_1, status_2;

    osMutexAcquire(lastSeenMutexHandle, portMAX_DELAY);
 800480a:	4b11      	ldr	r3, [pc, #68]	; (8004850 <updateLastSurveyTime+0x4c>)
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004812:	4618      	mov	r0, r3
 8004814:	f00b fbbe 	bl	800ff94 <osMutexAcquire>
    status_1 = HAL_RTC_GetTime(&hrtc, &(GlobalState.lastSurveyTime.time), RTC_FORMAT_BCD);
 8004818:	2201      	movs	r2, #1
 800481a:	490e      	ldr	r1, [pc, #56]	; (8004854 <updateLastSurveyTime+0x50>)
 800481c:	480e      	ldr	r0, [pc, #56]	; (8004858 <updateLastSurveyTime+0x54>)
 800481e:	f006 fc84 	bl	800b12a <HAL_RTC_GetTime>
 8004822:	4603      	mov	r3, r0
 8004824:	71fb      	strb	r3, [r7, #7]
    status_2 = HAL_RTC_GetDate(&hrtc, &(GlobalState.lastSurveyTime.date), RTC_FORMAT_BCD);
 8004826:	2201      	movs	r2, #1
 8004828:	490c      	ldr	r1, [pc, #48]	; (800485c <updateLastSurveyTime+0x58>)
 800482a:	480b      	ldr	r0, [pc, #44]	; (8004858 <updateLastSurveyTime+0x54>)
 800482c:	f006 fd87 	bl	800b33e <HAL_RTC_GetDate>
 8004830:	4603      	mov	r3, r0
 8004832:	71bb      	strb	r3, [r7, #6]
    osMutexRelease(lastSeenMutexHandle);
 8004834:	4b06      	ldr	r3, [pc, #24]	; (8004850 <updateLastSurveyTime+0x4c>)
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	4618      	mov	r0, r3
 800483a:	f00b fc09 	bl	8010050 <osMutexRelease>

    return status_1 | status_2;
 800483e:	79fa      	ldrb	r2, [r7, #7]
 8004840:	79bb      	ldrb	r3, [r7, #6]
 8004842:	4313      	orrs	r3, r2
 8004844:	b2db      	uxtb	r3, r3

}
 8004846:	4618      	mov	r0, r3
 8004848:	3708      	adds	r7, #8
 800484a:	46bd      	mov	sp, r7
 800484c:	bd80      	pop	{r7, pc}
 800484e:	bf00      	nop
 8004850:	2002e320 	.word	0x2002e320
 8004854:	2002e0e8 	.word	0x2002e0e8
 8004858:	2002e0a4 	.word	0x2002e0a4
 800485c:	2002e0fc 	.word	0x2002e0fc

08004860 <startUIControl>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header startUIControl */
void startUIControl(void *argument)
{
 8004860:	b5b0      	push	{r4, r5, r7, lr}
 8004862:	b0f6      	sub	sp, #472	; 0x1d8
 8004864:	af02      	add	r7, sp, #8
 8004866:	1d3b      	adds	r3, r7, #4
 8004868:	6018      	str	r0, [r3, #0]
  /* USER CODE BEGIN 5 */
  HAL_GPIO_WritePin(OLED_RESET_GPIO_Port, OLED_RESET_Pin, GPIO_PIN_SET);
 800486a:	2201      	movs	r2, #1
 800486c:	2101      	movs	r1, #1
 800486e:	48ce      	ldr	r0, [pc, #824]	; (8004ba8 <startUIControl+0x348>)
 8004870:	f003 fcd0 	bl	8008214 <HAL_GPIO_WritePin>

  uint8_t oled_buf[WIDTH * HEIGHT / 8];

  er_oled_begin();
 8004874:	f7fd fd7a 	bl	800236c <er_oled_begin>
  er_oled_clear(oled_buf);
 8004878:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800487c:	4618      	mov	r0, r3
 800487e:	f7fd fddd 	bl	800243c <er_oled_clear>
  er_oled_string(0, 10, "  DRAMSAY.", 12, 1, oled_buf);
 8004882:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8004886:	9301      	str	r3, [sp, #4]
 8004888:	2301      	movs	r3, #1
 800488a:	9300      	str	r3, [sp, #0]
 800488c:	230c      	movs	r3, #12
 800488e:	4ac7      	ldr	r2, [pc, #796]	; (8004bac <startUIControl+0x34c>)
 8004890:	210a      	movs	r1, #10
 8004892:	2000      	movs	r0, #0
 8004894:	f7fd ff74 	bl	8002780 <er_oled_string>
  er_oled_string(0, 28, "resenv | mit", 12, 1, oled_buf);
 8004898:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800489c:	9301      	str	r3, [sp, #4]
 800489e:	2301      	movs	r3, #1
 80048a0:	9300      	str	r3, [sp, #0]
 80048a2:	230c      	movs	r3, #12
 80048a4:	4ac2      	ldr	r2, [pc, #776]	; (8004bb0 <startUIControl+0x350>)
 80048a6:	211c      	movs	r1, #28
 80048a8:	2000      	movs	r0, #0
 80048aa:	f7fd ff69 	bl	8002780 <er_oled_string>
  er_oled_display(oled_buf);
 80048ae:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80048b2:	4618      	mov	r0, r3
 80048b4:	f7fd ffa5 	bl	8002802 <er_oled_display>

  osDelay(3000);
 80048b8:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80048bc:	f00b faa2 	bl	800fe04 <osDelay>

  er_oled_clear(oled_buf);
 80048c0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80048c4:	4618      	mov	r0, r3
 80048c6:	f7fd fdb9 	bl	800243c <er_oled_clear>
  er_oled_display(oled_buf);
 80048ca:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80048ce:	4618      	mov	r0, r3
 80048d0:	f7fd ff97 	bl	8002802 <er_oled_display>

  int16_t current_minute = -1;
 80048d4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80048d8:	f8a7 31be 	strh.w	r3, [r7, #446]	; 0x1be
  int16_t display_minute = -1;
 80048dc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80048e0:	f8a7 31ce 	strh.w	r3, [r7, #462]	; 0x1ce
  int16_t last_display_minute = -1;
 80048e4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80048e8:	f8a7 31cc 	strh.w	r3, [r7, #460]	; 0x1cc
  int16_t minute_history[TOUCH_HISTORY_SIZE] = {0};
 80048ec:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80048f0:	4618      	mov	r0, r3
 80048f2:	2328      	movs	r3, #40	; 0x28
 80048f4:	461a      	mov	r2, r3
 80048f6:	2100      	movs	r1, #0
 80048f8:	f00f facb 	bl	8013e92 <memset>
  uint8_t history_ind = 0;
 80048fc:	2300      	movs	r3, #0
 80048fe:	f887 31cb 	strb.w	r3, [r7, #459]	; 0x1cb
  int16_t min_minute, max_minute;
  uint8_t hrs, mins, step, i;
  char time[5];

  uint8_t touch_end_count = 0;
 8004902:	2300      	movs	r3, #0
 8004904:	f887 31c2 	strb.w	r3, [r7, #450]	; 0x1c2
  RTC_DateTypeDef cDate;

  BLETX_Queue_t bleSendData;

  //init peripheral (not turbo mode, poll every 250ms, if touch sample at 40Hz until no touch)
  if (setup_iqs263() == HAL_ERROR) {
 8004908:	f7ff f916 	bl	8003b38 <setup_iqs263>
 800490c:	4603      	mov	r3, r0
 800490e:	2b01      	cmp	r3, #1
 8004910:	d10c      	bne.n	800492c <startUIControl+0xcc>
	  strncpy(errorCondition, "ERR:IQS263ST", sizeof(errorCondition));
 8004912:	4aa8      	ldr	r2, [pc, #672]	; (8004bb4 <startUIControl+0x354>)
 8004914:	4ba8      	ldr	r3, [pc, #672]	; (8004bb8 <startUIControl+0x358>)
 8004916:	4614      	mov	r4, r2
 8004918:	cb07      	ldmia	r3!, {r0, r1, r2}
 800491a:	6020      	str	r0, [r4, #0]
 800491c:	6061      	str	r1, [r4, #4]
 800491e:	60a2      	str	r2, [r4, #8]
 8004920:	781b      	ldrb	r3, [r3, #0]
 8004922:	7323      	strb	r3, [r4, #12]
	  GlobalState.programMode = MODE_ERROR;
 8004924:	4ba5      	ldr	r3, [pc, #660]	; (8004bbc <startUIControl+0x35c>)
 8004926:	2206      	movs	r2, #6
 8004928:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
     //sprintf (time, "%d", current_angle);
     //er_oled_string(0, 0, time, 12, 1, oled_buf);
     //er_oled_display(oled_buf);
     // /* comment out when doing angle adjustments

	 current_minute = iqs263_get_min_if_pressed(); //returns -1 if no press
 800492c:	f7ff f9e0 	bl	8003cf0 <iqs263_get_min_if_pressed>
 8004930:	4603      	mov	r3, r0
 8004932:	f8a7 31be 	strh.w	r3, [r7, #446]	; 0x1be
     if (current_minute != -1) { //touch!
 8004936:	f9b7 31be 	ldrsh.w	r3, [r7, #446]	; 0x1be
 800493a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800493e:	f000 81d4 	beq.w	8004cea <startUIControl+0x48a>

       if (!touch_end_count){ //START TOUCH EVENT!
 8004942:	f897 31c2 	ldrb.w	r3, [r7, #450]	; 0x1c2
 8004946:	2b00      	cmp	r3, #0
 8004948:	f040 8091 	bne.w	8004a6e <startUIControl+0x20e>

    	   er_oled_clear(oled_buf);
 800494c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8004950:	4618      	mov	r0, r3
 8004952:	f7fd fd73 	bl	800243c <er_oled_clear>

    	   switch (GlobalState.programMode) {
 8004956:	4b99      	ldr	r3, [pc, #612]	; (8004bbc <startUIControl+0x35c>)
 8004958:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800495c:	2b03      	cmp	r3, #3
 800495e:	d846      	bhi.n	80049ee <startUIControl+0x18e>
 8004960:	a201      	add	r2, pc, #4	; (adr r2, 8004968 <startUIControl+0x108>)
 8004962:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004966:	bf00      	nop
 8004968:	080049b7 	.word	0x080049b7
 800496c:	080049d7 	.word	0x080049d7
 8004970:	08004979 	.word	0x08004979
 8004974:	0800499f 	.word	0x0800499f
    	   	   case MODE_ESM_TIME_ESTIMATE:
    	   	       xTaskNotifyGive(esmMainHandle);
 8004978:	4b91      	ldr	r3, [pc, #580]	; (8004bc0 <startUIControl+0x360>)
 800497a:	6818      	ldr	r0, [r3, #0]
 800497c:	2300      	movs	r3, #0
 800497e:	2202      	movs	r2, #2
 8004980:	2100      	movs	r1, #0
 8004982:	f00e fcc3 	bl	801330c <xTaskGenericNotify>
           		   er_oled_string(0, 0, " GUESS TIME:", 12, 1, oled_buf);
 8004986:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800498a:	9301      	str	r3, [sp, #4]
 800498c:	2301      	movs	r3, #1
 800498e:	9300      	str	r3, [sp, #0]
 8004990:	230c      	movs	r3, #12
 8004992:	4a8c      	ldr	r2, [pc, #560]	; (8004bc4 <startUIControl+0x364>)
 8004994:	2100      	movs	r1, #0
 8004996:	2000      	movs	r0, #0
 8004998:	f7fd fef2 	bl	8002780 <er_oled_string>
           		   break;
 800499c:	e027      	b.n	80049ee <startUIControl+0x18e>
    	   	   case MODE_ESM_SURVEY:
    	   	       er_oled_string(0, 0, GlobalState.surveyState.screenText, 12, 1, oled_buf);
 800499e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80049a2:	9301      	str	r3, [sp, #4]
 80049a4:	2301      	movs	r3, #1
 80049a6:	9300      	str	r3, [sp, #0]
 80049a8:	230c      	movs	r3, #12
 80049aa:	4a87      	ldr	r2, [pc, #540]	; (8004bc8 <startUIControl+0x368>)
 80049ac:	2100      	movs	r1, #0
 80049ae:	2000      	movs	r0, #0
 80049b0:	f7fd fee6 	bl	8002780 <er_oled_string>
    	   	       break;
 80049b4:	e01b      	b.n	80049ee <startUIControl+0x18e>
    	   	   case MODE_RESTING:
    			   osMutexAcquire(modeMutexHandle, portMAX_DELAY);
 80049b6:	4b85      	ldr	r3, [pc, #532]	; (8004bcc <startUIControl+0x36c>)
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80049be:	4618      	mov	r0, r3
 80049c0:	f00b fae8 	bl	800ff94 <osMutexAcquire>
    			   GlobalState.programMode = MODE_TIME_ESTIMATE;
 80049c4:	4b7d      	ldr	r3, [pc, #500]	; (8004bbc <startUIControl+0x35c>)
 80049c6:	2201      	movs	r2, #1
 80049c8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    			   osMutexRelease(modeMutexHandle);
 80049cc:	4b7f      	ldr	r3, [pc, #508]	; (8004bcc <startUIControl+0x36c>)
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	4618      	mov	r0, r3
 80049d2:	f00b fb3d 	bl	8010050 <osMutexRelease>
    			   //fall through to next case
    	   	   case MODE_TIME_ESTIMATE:
    	   		   er_oled_string(0, 0, " GUESS TIME:", 12, 1, oled_buf);
 80049d6:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80049da:	9301      	str	r3, [sp, #4]
 80049dc:	2301      	movs	r3, #1
 80049de:	9300      	str	r3, [sp, #0]
 80049e0:	230c      	movs	r3, #12
 80049e2:	4a78      	ldr	r2, [pc, #480]	; (8004bc4 <startUIControl+0x364>)
 80049e4:	2100      	movs	r1, #0
 80049e6:	2000      	movs	r0, #0
 80049e8:	f7fd feca 	bl	8002780 <er_oled_string>
          		   break;
 80049ec:	bf00      	nop
    	   }

           //if we're guessing the time, on start of touch we need to grab
           //the hour of the last seen time as a starting point.
           if (GlobalState.programMode == MODE_TIME_ESTIMATE ||
 80049ee:	4b73      	ldr	r3, [pc, #460]	; (8004bbc <startUIControl+0x35c>)
 80049f0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80049f4:	2b01      	cmp	r3, #1
 80049f6:	d004      	beq.n	8004a02 <startUIControl+0x1a2>
               GlobalState.programMode == MODE_ESM_TIME_ESTIMATE){
 80049f8:	4b70      	ldr	r3, [pc, #448]	; (8004bbc <startUIControl+0x35c>)
 80049fa:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
           if (GlobalState.programMode == MODE_TIME_ESTIMATE ||
 80049fe:	2b02      	cmp	r3, #2
 8004a00:	d120      	bne.n	8004a44 <startUIControl+0x1e4>

                osMutexAcquire(lastSeenMutexHandle, portMAX_DELAY);
 8004a02:	4b73      	ldr	r3, [pc, #460]	; (8004bd0 <startUIControl+0x370>)
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004a0a:	4618      	mov	r0, r3
 8004a0c:	f00b fac2 	bl	800ff94 <osMutexAcquire>
                cTime = GlobalState.lastSeenTime.time;
 8004a10:	f107 0210 	add.w	r2, r7, #16
 8004a14:	4b69      	ldr	r3, [pc, #420]	; (8004bbc <startUIControl+0x35c>)
 8004a16:	4615      	mov	r5, r2
 8004a18:	1d1c      	adds	r4, r3, #4
 8004a1a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004a1c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004a1e:	6823      	ldr	r3, [r4, #0]
 8004a20:	602b      	str	r3, [r5, #0]
                osMutexRelease(lastSeenMutexHandle);
 8004a22:	4b6b      	ldr	r3, [pc, #428]	; (8004bd0 <startUIControl+0x370>)
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	4618      	mov	r0, r3
 8004a28:	f00b fb12 	bl	8010050 <osMutexRelease>

                hrs = RTC_Bcd2ToByte(cTime.Hours);
 8004a2c:	f107 0310 	add.w	r3, r7, #16
 8004a30:	781b      	ldrb	r3, [r3, #0]
 8004a32:	4618      	mov	r0, r3
 8004a34:	f006 fd40 	bl	800b4b8 <RTC_Bcd2ToByte>
 8004a38:	4603      	mov	r3, r0
 8004a3a:	f887 31c5 	strb.w	r3, [r7, #453]	; 0x1c5
                mins = 0x00;
 8004a3e:	2300      	movs	r3, #0
 8004a40:	f887 31bd 	strb.w	r3, [r7, #445]	; 0x1bd
           }

           //on immediate touch set history to current minute
           for (i=0; i < TOUCH_HISTORY_SIZE; i++){
 8004a44:	2300      	movs	r3, #0
 8004a46:	f887 31c3 	strb.w	r3, [r7, #451]	; 0x1c3
 8004a4a:	e00c      	b.n	8004a66 <startUIControl+0x206>
        	   minute_history[i] = current_minute;
 8004a4c:	f897 21c3 	ldrb.w	r2, [r7, #451]	; 0x1c3
 8004a50:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004a54:	f8b7 11be 	ldrh.w	r1, [r7, #446]	; 0x1be
 8004a58:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
           for (i=0; i < TOUCH_HISTORY_SIZE; i++){
 8004a5c:	f897 31c3 	ldrb.w	r3, [r7, #451]	; 0x1c3
 8004a60:	3301      	adds	r3, #1
 8004a62:	f887 31c3 	strb.w	r3, [r7, #451]	; 0x1c3
 8004a66:	f897 31c3 	ldrb.w	r3, [r7, #451]	; 0x1c3
 8004a6a:	2b13      	cmp	r3, #19
 8004a6c:	d9ee      	bls.n	8004a4c <startUIControl+0x1ec>
           }
       }

       touch_end_count = 1;
 8004a6e:	2301      	movs	r3, #1
 8004a70:	f887 31c2 	strb.w	r3, [r7, #450]	; 0x1c2

       //put current minute in history buffer and advance circular index
       minute_history[history_ind] = current_minute;
 8004a74:	f897 21cb 	ldrb.w	r2, [r7, #459]	; 0x1cb
 8004a78:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004a7c:	f8b7 11be 	ldrh.w	r1, [r7, #446]	; 0x1be
 8004a80:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
       history_ind = (history_ind + 1) % TOUCH_HISTORY_SIZE;
 8004a84:	f897 31cb 	ldrb.w	r3, [r7, #459]	; 0x1cb
 8004a88:	1c5a      	adds	r2, r3, #1
 8004a8a:	4b52      	ldr	r3, [pc, #328]	; (8004bd4 <startUIControl+0x374>)
 8004a8c:	fb83 1302 	smull	r1, r3, r3, r2
 8004a90:	10d9      	asrs	r1, r3, #3
 8004a92:	17d3      	asrs	r3, r2, #31
 8004a94:	1ac9      	subs	r1, r1, r3
 8004a96:	460b      	mov	r3, r1
 8004a98:	009b      	lsls	r3, r3, #2
 8004a9a:	440b      	add	r3, r1
 8004a9c:	009b      	lsls	r3, r3, #2
 8004a9e:	1ad1      	subs	r1, r2, r3
 8004aa0:	460b      	mov	r3, r1
 8004aa2:	f887 31cb 	strb.w	r3, [r7, #459]	; 0x1cb

       //TWO MODES - fast and slow
       // if large variation (min and max in buffer > 3 min) set display_time to current_time, else average

       //take average of buffer, get min and max; that's what should be displayed
       display_minute = 0;
 8004aa6:	2300      	movs	r3, #0
 8004aa8:	f8a7 31ce 	strh.w	r3, [r7, #462]	; 0x1ce
       min_minute = 60;
 8004aac:	233c      	movs	r3, #60	; 0x3c
 8004aae:	f8a7 31c8 	strh.w	r3, [r7, #456]	; 0x1c8
       max_minute = 0;
 8004ab2:	2300      	movs	r3, #0
 8004ab4:	f8a7 31c6 	strh.w	r3, [r7, #454]	; 0x1c6
       for (i=0; i< TOUCH_HISTORY_SIZE; i++){
 8004ab8:	2300      	movs	r3, #0
 8004aba:	f887 31c3 	strb.w	r3, [r7, #451]	; 0x1c3
 8004abe:	e035      	b.n	8004b2c <startUIControl+0x2cc>
    	   display_minute += minute_history[i];
 8004ac0:	f897 21c3 	ldrb.w	r2, [r7, #451]	; 0x1c3
 8004ac4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004ac8:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8004acc:	b29a      	uxth	r2, r3
 8004ace:	f8b7 31ce 	ldrh.w	r3, [r7, #462]	; 0x1ce
 8004ad2:	4413      	add	r3, r2
 8004ad4:	b29b      	uxth	r3, r3
 8004ad6:	f8a7 31ce 	strh.w	r3, [r7, #462]	; 0x1ce
    	   if (minute_history[i] < min_minute) min_minute = minute_history[i];
 8004ada:	f897 21c3 	ldrb.w	r2, [r7, #451]	; 0x1c3
 8004ade:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004ae2:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8004ae6:	f9b7 21c8 	ldrsh.w	r2, [r7, #456]	; 0x1c8
 8004aea:	429a      	cmp	r2, r3
 8004aec:	dd07      	ble.n	8004afe <startUIControl+0x29e>
 8004aee:	f897 21c3 	ldrb.w	r2, [r7, #451]	; 0x1c3
 8004af2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004af6:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8004afa:	f8a7 31c8 	strh.w	r3, [r7, #456]	; 0x1c8
    	   if (minute_history[i] > max_minute) max_minute = minute_history[i];
 8004afe:	f897 21c3 	ldrb.w	r2, [r7, #451]	; 0x1c3
 8004b02:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004b06:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8004b0a:	f9b7 21c6 	ldrsh.w	r2, [r7, #454]	; 0x1c6
 8004b0e:	429a      	cmp	r2, r3
 8004b10:	da07      	bge.n	8004b22 <startUIControl+0x2c2>
 8004b12:	f897 21c3 	ldrb.w	r2, [r7, #451]	; 0x1c3
 8004b16:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004b1a:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8004b1e:	f8a7 31c6 	strh.w	r3, [r7, #454]	; 0x1c6
       for (i=0; i< TOUCH_HISTORY_SIZE; i++){
 8004b22:	f897 31c3 	ldrb.w	r3, [r7, #451]	; 0x1c3
 8004b26:	3301      	adds	r3, #1
 8004b28:	f887 31c3 	strb.w	r3, [r7, #451]	; 0x1c3
 8004b2c:	f897 31c3 	ldrb.w	r3, [r7, #451]	; 0x1c3
 8004b30:	2b13      	cmp	r3, #19
 8004b32:	d9c5      	bls.n	8004ac0 <startUIControl+0x260>
       }

       if (max_minute-min_minute > 4) {
 8004b34:	f9b7 21c6 	ldrsh.w	r2, [r7, #454]	; 0x1c6
 8004b38:	f9b7 31c8 	ldrsh.w	r3, [r7, #456]	; 0x1c8
 8004b3c:	1ad3      	subs	r3, r2, r3
 8004b3e:	2b04      	cmp	r3, #4
 8004b40:	dd04      	ble.n	8004b4c <startUIControl+0x2ec>
    	   display_minute = current_minute;
 8004b42:	f8b7 31be 	ldrh.w	r3, [r7, #446]	; 0x1be
 8004b46:	f8a7 31ce 	strh.w	r3, [r7, #462]	; 0x1ce
 8004b4a:	e009      	b.n	8004b60 <startUIControl+0x300>
       } else {
    	   display_minute /= TOUCH_HISTORY_SIZE;
 8004b4c:	f9b7 31ce 	ldrsh.w	r3, [r7, #462]	; 0x1ce
 8004b50:	4a20      	ldr	r2, [pc, #128]	; (8004bd4 <startUIControl+0x374>)
 8004b52:	fb82 1203 	smull	r1, r2, r2, r3
 8004b56:	10d2      	asrs	r2, r2, #3
 8004b58:	17db      	asrs	r3, r3, #31
 8004b5a:	1ad3      	subs	r3, r2, r3
 8004b5c:	f8a7 31ce 	strh.w	r3, [r7, #462]	; 0x1ce
       }

       //if last displayed is not what should be displayed, display
  	   if (last_display_minute != display_minute) { //UPDATE TOUCH VALUE!
 8004b60:	f9b7 21cc 	ldrsh.w	r2, [r7, #460]	; 0x1cc
 8004b64:	f9b7 31ce 	ldrsh.w	r3, [r7, #462]	; 0x1ce
 8004b68:	429a      	cmp	r2, r3
 8004b6a:	f43f aedf 	beq.w	800492c <startUIControl+0xcc>

           switch (GlobalState.programMode){
 8004b6e:	4b13      	ldr	r3, [pc, #76]	; (8004bbc <startUIControl+0x35c>)
 8004b70:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004b74:	2b01      	cmp	r3, #1
 8004b76:	f2c0 80b3 	blt.w	8004ce0 <startUIControl+0x480>
 8004b7a:	2b02      	cmp	r3, #2
 8004b7c:	dd6b      	ble.n	8004c56 <startUIControl+0x3f6>
 8004b7e:	2b03      	cmp	r3, #3
 8004b80:	f040 80ae 	bne.w	8004ce0 <startUIControl+0x480>
                case MODE_ESM_SURVEY:
                    //clear bottom
                    er_oled_clear_bottom_third(oled_buf);
 8004b84:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8004b88:	4618      	mov	r0, r3
 8004b8a:	f7fd fc70 	bl	800246e <er_oled_clear_bottom_third>

                    //divide 10-50 min into option steps roughly
                    step = 45 / (GlobalState.surveyState.optionArrayLength+1);
 8004b8e:	4b0b      	ldr	r3, [pc, #44]	; (8004bbc <startUIControl+0x35c>)
 8004b90:	f893 30e8 	ldrb.w	r3, [r3, #232]	; 0xe8
 8004b94:	3301      	adds	r3, #1
 8004b96:	222d      	movs	r2, #45	; 0x2d
 8004b98:	fb92 f3f3 	sdiv	r3, r2, r3
 8004b9c:	f887 31c4 	strb.w	r3, [r7, #452]	; 0x1c4
                    for (i=0; i<GlobalState.surveyState.optionArrayLength; i++){
 8004ba0:	2300      	movs	r3, #0
 8004ba2:	f887 31c3 	strb.w	r3, [r7, #451]	; 0x1c3
 8004ba6:	e049      	b.n	8004c3c <startUIControl+0x3dc>
 8004ba8:	48000400 	.word	0x48000400
 8004bac:	080188d0 	.word	0x080188d0
 8004bb0:	080188f8 	.word	0x080188f8
 8004bb4:	2002e1c0 	.word	0x2002e1c0
 8004bb8:	08018908 	.word	0x08018908
 8004bbc:	2002e0cc 	.word	0x2002e0cc
 8004bc0:	2002e2b8 	.word	0x2002e2b8
 8004bc4:	08018918 	.word	0x08018918
 8004bc8:	2002e115 	.word	0x2002e115
 8004bcc:	2002e250 	.word	0x2002e250
 8004bd0:	2002e320 	.word	0x2002e320
 8004bd4:	66666667 	.word	0x66666667
                        //map minute to option
                        if(display_minute >= (15 + i*step) &&
 8004bd8:	f9b7 21ce 	ldrsh.w	r2, [r7, #462]	; 0x1ce
 8004bdc:	f897 31c3 	ldrb.w	r3, [r7, #451]	; 0x1c3
 8004be0:	f897 11c4 	ldrb.w	r1, [r7, #452]	; 0x1c4
 8004be4:	fb01 f303 	mul.w	r3, r1, r3
 8004be8:	330f      	adds	r3, #15
 8004bea:	429a      	cmp	r2, r3
 8004bec:	db21      	blt.n	8004c32 <startUIControl+0x3d2>
                           display_minute < (15 + (i+1)*step)){
 8004bee:	f9b7 21ce 	ldrsh.w	r2, [r7, #462]	; 0x1ce
 8004bf2:	f897 31c3 	ldrb.w	r3, [r7, #451]	; 0x1c3
 8004bf6:	3301      	adds	r3, #1
 8004bf8:	f897 11c4 	ldrb.w	r1, [r7, #452]	; 0x1c4
 8004bfc:	fb01 f303 	mul.w	r3, r1, r3
 8004c00:	330f      	adds	r3, #15
                        if(display_minute >= (15 + i*step) &&
 8004c02:	429a      	cmp	r2, r3
 8004c04:	da15      	bge.n	8004c32 <startUIControl+0x3d2>
                            er_oled_string(0, 28, GlobalState.surveyState.optionArray[GlobalState.surveyState.optionArrayLength-1-i], 12, 1, oled_buf);
 8004c06:	4bac      	ldr	r3, [pc, #688]	; (8004eb8 <startUIControl+0x658>)
 8004c08:	f893 30e8 	ldrb.w	r3, [r3, #232]	; 0xe8
 8004c0c:	1e5a      	subs	r2, r3, #1
 8004c0e:	f897 31c3 	ldrb.w	r3, [r7, #451]	; 0x1c3
 8004c12:	1ad3      	subs	r3, r2, r3
 8004c14:	4aa8      	ldr	r2, [pc, #672]	; (8004eb8 <startUIControl+0x658>)
 8004c16:	3332      	adds	r3, #50	; 0x32
 8004c18:	009b      	lsls	r3, r3, #2
 8004c1a:	4413      	add	r3, r2
 8004c1c:	685a      	ldr	r2, [r3, #4]
 8004c1e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8004c22:	9301      	str	r3, [sp, #4]
 8004c24:	2301      	movs	r3, #1
 8004c26:	9300      	str	r3, [sp, #0]
 8004c28:	230c      	movs	r3, #12
 8004c2a:	211c      	movs	r1, #28
 8004c2c:	2000      	movs	r0, #0
 8004c2e:	f7fd fda7 	bl	8002780 <er_oled_string>
                    for (i=0; i<GlobalState.surveyState.optionArrayLength; i++){
 8004c32:	f897 31c3 	ldrb.w	r3, [r7, #451]	; 0x1c3
 8004c36:	3301      	adds	r3, #1
 8004c38:	f887 31c3 	strb.w	r3, [r7, #451]	; 0x1c3
 8004c3c:	4b9e      	ldr	r3, [pc, #632]	; (8004eb8 <startUIControl+0x658>)
 8004c3e:	f893 30e8 	ldrb.w	r3, [r3, #232]	; 0xe8
 8004c42:	f897 21c3 	ldrb.w	r2, [r7, #451]	; 0x1c3
 8004c46:	429a      	cmp	r2, r3
 8004c48:	d3c6      	bcc.n	8004bd8 <startUIControl+0x378>
                        }
                    }
                    er_oled_display(oled_buf);
 8004c4a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8004c4e:	4618      	mov	r0, r3
 8004c50:	f7fd fdd7 	bl	8002802 <er_oled_display>

                    break;
 8004c54:	e044      	b.n	8004ce0 <startUIControl+0x480>
                case MODE_TIME_ESTIMATE:
                case MODE_ESM_TIME_ESTIMATE:

                    //hours wrap
                    if (display_minute < 15 &&
 8004c56:	f9b7 31ce 	ldrsh.w	r3, [r7, #462]	; 0x1ce
 8004c5a:	2b0e      	cmp	r3, #14
 8004c5c:	dc19      	bgt.n	8004c92 <startUIControl+0x432>
 8004c5e:	f9b7 31ce 	ldrsh.w	r3, [r7, #462]	; 0x1ce
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	db15      	blt.n	8004c92 <startUIControl+0x432>
                        display_minute >= 0 &&
 8004c66:	f9b7 31cc 	ldrsh.w	r3, [r7, #460]	; 0x1cc
 8004c6a:	2b2d      	cmp	r3, #45	; 0x2d
 8004c6c:	dd11      	ble.n	8004c92 <startUIControl+0x432>
                        last_display_minute > 45){
                        hrs = (hrs+1)%24;
 8004c6e:	f897 31c5 	ldrb.w	r3, [r7, #453]	; 0x1c5
 8004c72:	1c5a      	adds	r2, r3, #1
 8004c74:	4b91      	ldr	r3, [pc, #580]	; (8004ebc <startUIControl+0x65c>)
 8004c76:	fb83 1302 	smull	r1, r3, r3, r2
 8004c7a:	1099      	asrs	r1, r3, #2
 8004c7c:	17d3      	asrs	r3, r2, #31
 8004c7e:	1ac9      	subs	r1, r1, r3
 8004c80:	460b      	mov	r3, r1
 8004c82:	005b      	lsls	r3, r3, #1
 8004c84:	440b      	add	r3, r1
 8004c86:	00db      	lsls	r3, r3, #3
 8004c88:	1ad1      	subs	r1, r2, r3
 8004c8a:	460b      	mov	r3, r1
 8004c8c:	f887 31c5 	strb.w	r3, [r7, #453]	; 0x1c5
 8004c90:	e014      	b.n	8004cbc <startUIControl+0x45c>

                    } else if (display_minute > 45 &&
 8004c92:	f9b7 31ce 	ldrsh.w	r3, [r7, #462]	; 0x1ce
 8004c96:	2b2d      	cmp	r3, #45	; 0x2d
 8004c98:	dd10      	ble.n	8004cbc <startUIControl+0x45c>
 8004c9a:	f9b7 31cc 	ldrsh.w	r3, [r7, #460]	; 0x1cc
 8004c9e:	2b0e      	cmp	r3, #14
 8004ca0:	dc0c      	bgt.n	8004cbc <startUIControl+0x45c>
                               last_display_minute < 15){
                        if (hrs==0) {hrs = 23;}
 8004ca2:	f897 31c5 	ldrb.w	r3, [r7, #453]	; 0x1c5
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d103      	bne.n	8004cb2 <startUIControl+0x452>
 8004caa:	2317      	movs	r3, #23
 8004cac:	f887 31c5 	strb.w	r3, [r7, #453]	; 0x1c5
 8004cb0:	e004      	b.n	8004cbc <startUIControl+0x45c>
                        else {hrs -= 1;}
 8004cb2:	f897 31c5 	ldrb.w	r3, [r7, #453]	; 0x1c5
 8004cb6:	3b01      	subs	r3, #1
 8004cb8:	f887 31c5 	strb.w	r3, [r7, #453]	; 0x1c5
                    }

                    //display time on bottom two thirds
                    sprintf (time, "%02d%02d", hrs, display_minute);
 8004cbc:	f897 21c5 	ldrb.w	r2, [r7, #453]	; 0x1c5
 8004cc0:	f9b7 31ce 	ldrsh.w	r3, [r7, #462]	; 0x1ce
 8004cc4:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8004cc8:	497d      	ldr	r1, [pc, #500]	; (8004ec0 <startUIControl+0x660>)
 8004cca:	f00f fe1b 	bl	8014904 <siprintf>
                    er_oled_time_twothird(time, oled_buf);
 8004cce:	f107 0254 	add.w	r2, r7, #84	; 0x54
 8004cd2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004cd6:	4611      	mov	r1, r2
 8004cd8:	4618      	mov	r0, r3
 8004cda:	f7fd fe45 	bl	8002968 <er_oled_time_twothird>

                    break;
 8004cde:	bf00      	nop
           }

           last_display_minute = display_minute;
 8004ce0:	f8b7 31ce 	ldrh.w	r3, [r7, #462]	; 0x1ce
 8004ce4:	f8a7 31cc 	strh.w	r3, [r7, #460]	; 0x1cc
 8004ce8:	e620      	b.n	800492c <startUIControl+0xcc>

  	   }


     } else if (touch_end_count > 0){
 8004cea:	f897 31c2 	ldrb.w	r3, [r7, #450]	; 0x1c2
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	f000 80c8 	beq.w	8004e84 <startUIControl+0x624>

  	   touch_end_count += 1;//increment touching_end_count
 8004cf4:	f897 31c2 	ldrb.w	r3, [r7, #450]	; 0x1c2
 8004cf8:	3301      	adds	r3, #1
 8004cfa:	f887 31c2 	strb.w	r3, [r7, #450]	; 0x1c2

  	   if (touch_end_count >= TOUCH_END_TIMEOUT){  //FINISHED/CONFIRMED TOUCH VALUE!
 8004cfe:	f897 31c2 	ldrb.w	r3, [r7, #450]	; 0x1c2
 8004d02:	2b27      	cmp	r3, #39	; 0x27
 8004d04:	f240 80ba 	bls.w	8004e7c <startUIControl+0x61c>
  		   uint8_t option = 0xFF;
 8004d08:	23ff      	movs	r3, #255	; 0xff
 8004d0a:	f887 31c1 	strb.w	r3, [r7, #449]	; 0x1c1

  		   switch (GlobalState.programMode){
 8004d0e:	4b6a      	ldr	r3, [pc, #424]	; (8004eb8 <startUIControl+0x658>)
 8004d10:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004d14:	2b02      	cmp	r3, #2
 8004d16:	d057      	beq.n	8004dc8 <startUIControl+0x568>
 8004d18:	2b03      	cmp	r3, #3
 8004d1a:	d002      	beq.n	8004d22 <startUIControl+0x4c2>
 8004d1c:	2b01      	cmp	r3, #1
 8004d1e:	d073      	beq.n	8004e08 <startUIControl+0x5a8>
 8004d20:	e09b      	b.n	8004e5a <startUIControl+0x5fa>
  		   	   case MODE_ESM_SURVEY:
  		   		   //grab current option
  		   		   for (i=0; i<GlobalState.surveyState.optionArrayLength; i++){
 8004d22:	2300      	movs	r3, #0
 8004d24:	f887 31c3 	strb.w	r3, [r7, #451]	; 0x1c3
 8004d28:	e025      	b.n	8004d76 <startUIControl+0x516>
  		   		     //map minute to option
  		   		     if(last_display_minute >= (15 + i*step) &&
 8004d2a:	f9b7 21cc 	ldrsh.w	r2, [r7, #460]	; 0x1cc
 8004d2e:	f897 31c3 	ldrb.w	r3, [r7, #451]	; 0x1c3
 8004d32:	f897 11c4 	ldrb.w	r1, [r7, #452]	; 0x1c4
 8004d36:	fb01 f303 	mul.w	r3, r1, r3
 8004d3a:	330f      	adds	r3, #15
 8004d3c:	429a      	cmp	r2, r3
 8004d3e:	db15      	blt.n	8004d6c <startUIControl+0x50c>
  		   		        last_display_minute < (15 + (i+1)*step)){
 8004d40:	f9b7 21cc 	ldrsh.w	r2, [r7, #460]	; 0x1cc
 8004d44:	f897 31c3 	ldrb.w	r3, [r7, #451]	; 0x1c3
 8004d48:	3301      	adds	r3, #1
 8004d4a:	f897 11c4 	ldrb.w	r1, [r7, #452]	; 0x1c4
 8004d4e:	fb01 f303 	mul.w	r3, r1, r3
 8004d52:	330f      	adds	r3, #15
  		   		     if(last_display_minute >= (15 + i*step) &&
 8004d54:	429a      	cmp	r2, r3
 8004d56:	da09      	bge.n	8004d6c <startUIControl+0x50c>
  		   		         option = GlobalState.surveyState.optionArrayLength-1-i;
 8004d58:	4b57      	ldr	r3, [pc, #348]	; (8004eb8 <startUIControl+0x658>)
 8004d5a:	f893 20e8 	ldrb.w	r2, [r3, #232]	; 0xe8
 8004d5e:	f897 31c3 	ldrb.w	r3, [r7, #451]	; 0x1c3
 8004d62:	1ad3      	subs	r3, r2, r3
 8004d64:	b2db      	uxtb	r3, r3
 8004d66:	3b01      	subs	r3, #1
 8004d68:	f887 31c1 	strb.w	r3, [r7, #449]	; 0x1c1
  		   		   for (i=0; i<GlobalState.surveyState.optionArrayLength; i++){
 8004d6c:	f897 31c3 	ldrb.w	r3, [r7, #451]	; 0x1c3
 8004d70:	3301      	adds	r3, #1
 8004d72:	f887 31c3 	strb.w	r3, [r7, #451]	; 0x1c3
 8004d76:	4b50      	ldr	r3, [pc, #320]	; (8004eb8 <startUIControl+0x658>)
 8004d78:	f893 30e8 	ldrb.w	r3, [r3, #232]	; 0xe8
 8004d7c:	f897 21c3 	ldrb.w	r2, [r7, #451]	; 0x1c3
 8004d80:	429a      	cmp	r2, r3
 8004d82:	d3d2      	bcc.n	8004d2a <startUIControl+0x4ca>
  		   		     }
  		   		   }

  		   		   //send to ble
  		   		   bleSendData.sendType = TX_SURVEY_RESULT;
 8004d84:	f107 0308 	add.w	r3, r7, #8
 8004d88:	2205      	movs	r2, #5
 8004d8a:	701a      	strb	r2, [r3, #0]
  		   		   bleSendData.data = (GlobalState.surveyState.surveyID << 8) | option;
 8004d8c:	4b4a      	ldr	r3, [pc, #296]	; (8004eb8 <startUIControl+0x658>)
 8004d8e:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8004d92:	021b      	lsls	r3, r3, #8
 8004d94:	b21a      	sxth	r2, r3
 8004d96:	f897 31c1 	ldrb.w	r3, [r7, #449]	; 0x1c1
 8004d9a:	b21b      	sxth	r3, r3
 8004d9c:	4313      	orrs	r3, r2
 8004d9e:	b21b      	sxth	r3, r3
 8004da0:	b29a      	uxth	r2, r3
 8004da2:	f107 0308 	add.w	r3, r7, #8
 8004da6:	805a      	strh	r2, [r3, #2]
  		   		   osMessageQueuePut(bleTXqueueHandle, &bleSendData, 0, 0);
 8004da8:	4b46      	ldr	r3, [pc, #280]	; (8004ec4 <startUIControl+0x664>)
 8004daa:	6818      	ldr	r0, [r3, #0]
 8004dac:	f107 0108 	add.w	r1, r7, #8
 8004db0:	2300      	movs	r3, #0
 8004db2:	2200      	movs	r2, #0
 8004db4:	f00b fb7e 	bl	80104b4 <osMessageQueuePut>

  		   		   //notify main thread
  		   		   xTaskNotifyGive(esmMainHandle);
 8004db8:	4b43      	ldr	r3, [pc, #268]	; (8004ec8 <startUIControl+0x668>)
 8004dba:	6818      	ldr	r0, [r3, #0]
 8004dbc:	2300      	movs	r3, #0
 8004dbe:	2202      	movs	r2, #2
 8004dc0:	2100      	movs	r1, #0
 8004dc2:	f00e faa3 	bl	801330c <xTaskGenericNotify>
  		   		   break;
 8004dc6:	e048      	b.n	8004e5a <startUIControl+0x5fa>

  		   	   case MODE_ESM_TIME_ESTIMATE:
  		   		   //send to ble
  		   		   bleSendData.sendType = TX_TIME_EST;
 8004dc8:	f107 0308 	add.w	r3, r7, #8
 8004dcc:	2203      	movs	r2, #3
 8004dce:	701a      	strb	r2, [r3, #0]
  		   		   bleSendData.data = (hrs << 8) | last_display_minute;
 8004dd0:	f897 31c5 	ldrb.w	r3, [r7, #453]	; 0x1c5
 8004dd4:	021b      	lsls	r3, r3, #8
 8004dd6:	b21a      	sxth	r2, r3
 8004dd8:	f8b7 31cc 	ldrh.w	r3, [r7, #460]	; 0x1cc
 8004ddc:	4313      	orrs	r3, r2
 8004dde:	b21b      	sxth	r3, r3
 8004de0:	b29a      	uxth	r2, r3
 8004de2:	f107 0308 	add.w	r3, r7, #8
 8004de6:	805a      	strh	r2, [r3, #2]
   		   		   osMessageQueuePut(bleTXqueueHandle, &bleSendData, 0, 0);
 8004de8:	4b36      	ldr	r3, [pc, #216]	; (8004ec4 <startUIControl+0x664>)
 8004dea:	6818      	ldr	r0, [r3, #0]
 8004dec:	f107 0108 	add.w	r1, r7, #8
 8004df0:	2300      	movs	r3, #0
 8004df2:	2200      	movs	r2, #0
 8004df4:	f00b fb5e 	bl	80104b4 <osMessageQueuePut>

   		   		   //notify main thread
   		   		   xTaskNotifyGive(esmMainHandle);
 8004df8:	4b33      	ldr	r3, [pc, #204]	; (8004ec8 <startUIControl+0x668>)
 8004dfa:	6818      	ldr	r0, [r3, #0]
 8004dfc:	2300      	movs	r3, #0
 8004dfe:	2202      	movs	r2, #2
 8004e00:	2100      	movs	r1, #0
 8004e02:	f00e fa83 	bl	801330c <xTaskGenericNotify>
  		   		   break;
 8004e06:	e028      	b.n	8004e5a <startUIControl+0x5fa>

  		   	   case MODE_TIME_ESTIMATE:
  		   		   //send to ble
  		   		   bleSendData.sendType = TX_TIME_EST;
 8004e08:	f107 0308 	add.w	r3, r7, #8
 8004e0c:	2203      	movs	r2, #3
 8004e0e:	701a      	strb	r2, [r3, #0]
  		   		   bleSendData.data = (hrs << 8) | last_display_minute;
 8004e10:	f897 31c5 	ldrb.w	r3, [r7, #453]	; 0x1c5
 8004e14:	021b      	lsls	r3, r3, #8
 8004e16:	b21a      	sxth	r2, r3
 8004e18:	f8b7 31cc 	ldrh.w	r3, [r7, #460]	; 0x1cc
 8004e1c:	4313      	orrs	r3, r2
 8004e1e:	b21b      	sxth	r3, r3
 8004e20:	b29a      	uxth	r2, r3
 8004e22:	f107 0308 	add.w	r3, r7, #8
 8004e26:	805a      	strh	r2, [r3, #2]
   		   		   osMessageQueuePut(bleTXqueueHandle, &bleSendData, 0, 0);
 8004e28:	4b26      	ldr	r3, [pc, #152]	; (8004ec4 <startUIControl+0x664>)
 8004e2a:	6818      	ldr	r0, [r3, #0]
 8004e2c:	f107 0108 	add.w	r1, r7, #8
 8004e30:	2300      	movs	r3, #0
 8004e32:	2200      	movs	r2, #0
 8004e34:	f00b fb3e 	bl	80104b4 <osMessageQueuePut>

   		   		   //not from main thread, show time (which updates seen time, new interval, back to rest)
  		   		   osMutexAcquire(modeMutexHandle, portMAX_DELAY);
 8004e38:	4b24      	ldr	r3, [pc, #144]	; (8004ecc <startUIControl+0x66c>)
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004e40:	4618      	mov	r0, r3
 8004e42:	f00b f8a7 	bl	800ff94 <osMutexAcquire>
				   GlobalState.programMode = MODE_SHOW_TIME;
 8004e46:	4b1c      	ldr	r3, [pc, #112]	; (8004eb8 <startUIControl+0x658>)
 8004e48:	2205      	movs	r2, #5
 8004e4a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
				   osMutexRelease(modeMutexHandle);
 8004e4e:	4b1f      	ldr	r3, [pc, #124]	; (8004ecc <startUIControl+0x66c>)
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	4618      	mov	r0, r3
 8004e54:	f00b f8fc 	bl	8010050 <osMutexRelease>
				   break;
 8004e58:	bf00      	nop
  		   }

  		   touch_end_count = 0;
 8004e5a:	2300      	movs	r3, #0
 8004e5c:	f887 31c2 	strb.w	r3, [r7, #450]	; 0x1c2
  		   last_display_minute = -1;
 8004e60:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004e64:	f8a7 31cc 	strh.w	r3, [r7, #460]	; 0x1cc
  		   er_oled_clear(oled_buf);
 8004e68:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8004e6c:	4618      	mov	r0, r3
 8004e6e:	f7fd fae5 	bl	800243c <er_oled_clear>
  		   er_oled_display(oled_buf);
 8004e72:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8004e76:	4618      	mov	r0, r3
 8004e78:	f7fd fcc3 	bl	8002802 <er_oled_display>

  	   }

  	   osDelay(50);
 8004e7c:	2032      	movs	r0, #50	; 0x32
 8004e7e:	f00a ffc1 	bl	800fe04 <osDelay>
 8004e82:	e553      	b.n	800492c <startUIControl+0xcc>


     }else { //no touch, wait for a touch

       switch (GlobalState.programMode){
 8004e84:	4b0c      	ldr	r3, [pc, #48]	; (8004eb8 <startUIControl+0x658>)
 8004e86:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004e8a:	2b07      	cmp	r3, #7
 8004e8c:	f200 8219 	bhi.w	80052c2 <startUIControl+0xa62>
 8004e90:	a201      	add	r2, pc, #4	; (adr r2, 8004e98 <startUIControl+0x638>)
 8004e92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e96:	bf00      	nop
 8004e98:	08005287 	.word	0x08005287
 8004e9c:	080052c3 	.word	0x080052c3
 8004ea0:	080051eb 	.word	0x080051eb
 8004ea4:	08005255 	.word	0x08005255
 8004ea8:	08004ed1 	.word	0x08004ed1
 8004eac:	08005023 	.word	0x08005023
 8004eb0:	08005175 	.word	0x08005175
 8004eb4:	080051a1 	.word	0x080051a1
 8004eb8:	2002e0cc 	.word	0x2002e0cc
 8004ebc:	2aaaaaab 	.word	0x2aaaaaab
 8004ec0:	080188dc 	.word	0x080188dc
 8004ec4:	2002e2b0 	.word	0x2002e2b0
 8004ec8:	2002e2b8 	.word	0x2002e2b8
 8004ecc:	2002e250 	.word	0x2002e250
        case MODE_CANCEL:
    	   //had a 'cancel' button event

    	   er_oled_clear(oled_buf);
 8004ed0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8004ed4:	4618      	mov	r0, r3
 8004ed6:	f7fd fab1 	bl	800243c <er_oled_clear>
   	   	   er_oled_string(0, 0, "  dismiss!", 12, 1, oled_buf);
 8004eda:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8004ede:	9301      	str	r3, [sp, #4]
 8004ee0:	2301      	movs	r3, #1
 8004ee2:	9300      	str	r3, [sp, #0]
 8004ee4:	230c      	movs	r3, #12
 8004ee6:	4acd      	ldr	r2, [pc, #820]	; (800521c <startUIControl+0x9bc>)
 8004ee8:	2100      	movs	r1, #0
 8004eea:	2000      	movs	r0, #0
 8004eec:	f7fd fc48 	bl	8002780 <er_oled_string>
   	   	   er_oled_string(0, 20, "TIME NOW IS:", 12, 1, oled_buf);
 8004ef0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8004ef4:	9301      	str	r3, [sp, #4]
 8004ef6:	2301      	movs	r3, #1
 8004ef8:	9300      	str	r3, [sp, #0]
 8004efa:	230c      	movs	r3, #12
 8004efc:	4ac8      	ldr	r2, [pc, #800]	; (8005220 <startUIControl+0x9c0>)
 8004efe:	2114      	movs	r1, #20
 8004f00:	2000      	movs	r0, #0
 8004f02:	f7fd fc3d 	bl	8002780 <er_oled_string>
   	   	   er_oled_display(oled_buf);
 8004f06:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8004f0a:	4618      	mov	r0, r3
 8004f0c:	f7fd fc79 	bl	8002802 <er_oled_display>

   	   	   osDelay(1000);
 8004f10:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004f14:	f00a ff76 	bl	800fe04 <osDelay>

   	   	   osMutexAcquire(rtcMutexHandle, portMAX_DELAY);
 8004f18:	4bc2      	ldr	r3, [pc, #776]	; (8005224 <startUIControl+0x9c4>)
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004f20:	4618      	mov	r0, r3
 8004f22:	f00b f837 	bl	800ff94 <osMutexAcquire>
   	   	   HAL_RTC_GetTime(&hrtc, &cTime, RTC_FORMAT_BCD);
 8004f26:	f107 0310 	add.w	r3, r7, #16
 8004f2a:	2201      	movs	r2, #1
 8004f2c:	4619      	mov	r1, r3
 8004f2e:	48be      	ldr	r0, [pc, #760]	; (8005228 <startUIControl+0x9c8>)
 8004f30:	f006 f8fb 	bl	800b12a <HAL_RTC_GetTime>
   	   	   HAL_RTC_GetDate(&hrtc, &cDate, RTC_FORMAT_BCD);
 8004f34:	f107 030c 	add.w	r3, r7, #12
 8004f38:	2201      	movs	r2, #1
 8004f3a:	4619      	mov	r1, r3
 8004f3c:	48ba      	ldr	r0, [pc, #744]	; (8005228 <startUIControl+0x9c8>)
 8004f3e:	f006 f9fe 	bl	800b33e <HAL_RTC_GetDate>
   	   	   osMutexRelease(rtcMutexHandle);
 8004f42:	4bb8      	ldr	r3, [pc, #736]	; (8005224 <startUIControl+0x9c4>)
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	4618      	mov	r0, r3
 8004f48:	f00b f882 	bl	8010050 <osMutexRelease>

   	   	   hrs = RTC_Bcd2ToByte(cTime.Hours);
 8004f4c:	f107 0310 	add.w	r3, r7, #16
 8004f50:	781b      	ldrb	r3, [r3, #0]
 8004f52:	4618      	mov	r0, r3
 8004f54:	f006 fab0 	bl	800b4b8 <RTC_Bcd2ToByte>
 8004f58:	4603      	mov	r3, r0
 8004f5a:	f887 31c5 	strb.w	r3, [r7, #453]	; 0x1c5
   	   	   mins = RTC_Bcd2ToByte(cTime.Minutes);
 8004f5e:	f107 0310 	add.w	r3, r7, #16
 8004f62:	785b      	ldrb	r3, [r3, #1]
 8004f64:	4618      	mov	r0, r3
 8004f66:	f006 faa7 	bl	800b4b8 <RTC_Bcd2ToByte>
 8004f6a:	4603      	mov	r3, r0
 8004f6c:	f887 31bd 	strb.w	r3, [r7, #445]	; 0x1bd
   	   	   sprintf (time, "%02d%02d", hrs, mins);
 8004f70:	f897 21c5 	ldrb.w	r2, [r7, #453]	; 0x1c5
 8004f74:	f897 31bd 	ldrb.w	r3, [r7, #445]	; 0x1bd
 8004f78:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8004f7c:	49ab      	ldr	r1, [pc, #684]	; (800522c <startUIControl+0x9cc>)
 8004f7e:	f00f fcc1 	bl	8014904 <siprintf>
   	   	   er_oled_time(time);
 8004f82:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004f86:	4618      	mov	r0, r3
 8004f88:	f7fd fc73 	bl	8002872 <er_oled_time>

	       osMutexAcquire(lastSeenMutexHandle, portMAX_DELAY);
 8004f8c:	4ba8      	ldr	r3, [pc, #672]	; (8005230 <startUIControl+0x9d0>)
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004f94:	4618      	mov	r0, r3
 8004f96:	f00a fffd 	bl	800ff94 <osMutexAcquire>
	       GlobalState.lastSeenTime.time = cTime;
 8004f9a:	4ba6      	ldr	r3, [pc, #664]	; (8005234 <startUIControl+0x9d4>)
 8004f9c:	f107 0210 	add.w	r2, r7, #16
 8004fa0:	1d1c      	adds	r4, r3, #4
 8004fa2:	4615      	mov	r5, r2
 8004fa4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004fa6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004fa8:	682b      	ldr	r3, [r5, #0]
 8004faa:	6023      	str	r3, [r4, #0]
	       GlobalState.lastSeenTime.date = cDate;
 8004fac:	4aa1      	ldr	r2, [pc, #644]	; (8005234 <startUIControl+0x9d4>)
 8004fae:	f107 030c 	add.w	r3, r7, #12
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	6193      	str	r3, [r2, #24]
	       osMutexRelease(lastSeenMutexHandle);
 8004fb6:	4b9e      	ldr	r3, [pc, #632]	; (8005230 <startUIControl+0x9d0>)
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	4618      	mov	r0, r3
 8004fbc:	f00b f848 	bl	8010050 <osMutexRelease>

	       bleSendData.sendType = TX_TIME_SEEN;
 8004fc0:	f107 0308 	add.w	r3, r7, #8
 8004fc4:	2204      	movs	r2, #4
 8004fc6:	701a      	strb	r2, [r3, #0]
	       bleSendData.data = 0x0000;
 8004fc8:	f107 0308 	add.w	r3, r7, #8
 8004fcc:	2200      	movs	r2, #0
 8004fce:	805a      	strh	r2, [r3, #2]
	       osMessageQueuePut(bleTXqueueHandle, &bleSendData, 0, 0);
 8004fd0:	4b99      	ldr	r3, [pc, #612]	; (8005238 <startUIControl+0x9d8>)
 8004fd2:	6818      	ldr	r0, [r3, #0]
 8004fd4:	f107 0108 	add.w	r1, r7, #8
 8004fd8:	2300      	movs	r3, #0
 8004fda:	2200      	movs	r2, #0
 8004fdc:	f00b fa6a 	bl	80104b4 <osMessageQueuePut>

	       updateInterval();
 8004fe0:	f7ff fbca 	bl	8004778 <updateInterval>

	       osMutexAcquire(modeMutexHandle, portMAX_DELAY);
 8004fe4:	4b95      	ldr	r3, [pc, #596]	; (800523c <startUIControl+0x9dc>)
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004fec:	4618      	mov	r0, r3
 8004fee:	f00a ffd1 	bl	800ff94 <osMutexAcquire>
	       GlobalState.programMode = MODE_RESTING;
 8004ff2:	4b90      	ldr	r3, [pc, #576]	; (8005234 <startUIControl+0x9d4>)
 8004ff4:	2200      	movs	r2, #0
 8004ff6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	       osMutexRelease(modeMutexHandle);
 8004ffa:	4b90      	ldr	r3, [pc, #576]	; (800523c <startUIControl+0x9dc>)
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	4618      	mov	r0, r3
 8005000:	f00b f826 	bl	8010050 <osMutexRelease>

	       osDelay(3000);
 8005004:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8005008:	f00a fefc 	bl	800fe04 <osDelay>
	       er_oled_clear(oled_buf);
 800500c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8005010:	4618      	mov	r0, r3
 8005012:	f7fd fa13 	bl	800243c <er_oled_clear>
	       er_oled_display(oled_buf);
 8005016:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800501a:	4618      	mov	r0, r3
 800501c:	f7fd fbf1 	bl	8002802 <er_oled_display>
	       break;
 8005020:	e154      	b.n	80052cc <startUIControl+0xa6c>

        case MODE_SHOW_TIME:
		   //show time, no cancel, but does the same thing

		   er_oled_clear(oled_buf);
 8005022:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8005026:	4618      	mov	r0, r3
 8005028:	f7fd fa08 	bl	800243c <er_oled_clear>
		   er_oled_string(0, 0, " completed", 12, 1, oled_buf);
 800502c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8005030:	9301      	str	r3, [sp, #4]
 8005032:	2301      	movs	r3, #1
 8005034:	9300      	str	r3, [sp, #0]
 8005036:	230c      	movs	r3, #12
 8005038:	4a81      	ldr	r2, [pc, #516]	; (8005240 <startUIControl+0x9e0>)
 800503a:	2100      	movs	r1, #0
 800503c:	2000      	movs	r0, #0
 800503e:	f7fd fb9f 	bl	8002780 <er_oled_string>
		   er_oled_string(0, 20, "TIME NOW IS:", 12, 1, oled_buf);
 8005042:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8005046:	9301      	str	r3, [sp, #4]
 8005048:	2301      	movs	r3, #1
 800504a:	9300      	str	r3, [sp, #0]
 800504c:	230c      	movs	r3, #12
 800504e:	4a74      	ldr	r2, [pc, #464]	; (8005220 <startUIControl+0x9c0>)
 8005050:	2114      	movs	r1, #20
 8005052:	2000      	movs	r0, #0
 8005054:	f7fd fb94 	bl	8002780 <er_oled_string>
		   er_oled_display(oled_buf);
 8005058:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800505c:	4618      	mov	r0, r3
 800505e:	f7fd fbd0 	bl	8002802 <er_oled_display>

		   osDelay(1000);
 8005062:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005066:	f00a fecd 	bl	800fe04 <osDelay>

		   osMutexAcquire(rtcMutexHandle, portMAX_DELAY);
 800506a:	4b6e      	ldr	r3, [pc, #440]	; (8005224 <startUIControl+0x9c4>)
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8005072:	4618      	mov	r0, r3
 8005074:	f00a ff8e 	bl	800ff94 <osMutexAcquire>
		   HAL_RTC_GetTime(&hrtc, &cTime, RTC_FORMAT_BCD);
 8005078:	f107 0310 	add.w	r3, r7, #16
 800507c:	2201      	movs	r2, #1
 800507e:	4619      	mov	r1, r3
 8005080:	4869      	ldr	r0, [pc, #420]	; (8005228 <startUIControl+0x9c8>)
 8005082:	f006 f852 	bl	800b12a <HAL_RTC_GetTime>
		   HAL_RTC_GetDate(&hrtc, &cDate, RTC_FORMAT_BCD);
 8005086:	f107 030c 	add.w	r3, r7, #12
 800508a:	2201      	movs	r2, #1
 800508c:	4619      	mov	r1, r3
 800508e:	4866      	ldr	r0, [pc, #408]	; (8005228 <startUIControl+0x9c8>)
 8005090:	f006 f955 	bl	800b33e <HAL_RTC_GetDate>
		   osMutexRelease(rtcMutexHandle);
 8005094:	4b63      	ldr	r3, [pc, #396]	; (8005224 <startUIControl+0x9c4>)
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	4618      	mov	r0, r3
 800509a:	f00a ffd9 	bl	8010050 <osMutexRelease>

		   hrs = RTC_Bcd2ToByte(cTime.Hours);
 800509e:	f107 0310 	add.w	r3, r7, #16
 80050a2:	781b      	ldrb	r3, [r3, #0]
 80050a4:	4618      	mov	r0, r3
 80050a6:	f006 fa07 	bl	800b4b8 <RTC_Bcd2ToByte>
 80050aa:	4603      	mov	r3, r0
 80050ac:	f887 31c5 	strb.w	r3, [r7, #453]	; 0x1c5
		   mins = RTC_Bcd2ToByte(cTime.Minutes);
 80050b0:	f107 0310 	add.w	r3, r7, #16
 80050b4:	785b      	ldrb	r3, [r3, #1]
 80050b6:	4618      	mov	r0, r3
 80050b8:	f006 f9fe 	bl	800b4b8 <RTC_Bcd2ToByte>
 80050bc:	4603      	mov	r3, r0
 80050be:	f887 31bd 	strb.w	r3, [r7, #445]	; 0x1bd
		   sprintf (time, "%02d%02d", hrs, mins);
 80050c2:	f897 21c5 	ldrb.w	r2, [r7, #453]	; 0x1c5
 80050c6:	f897 31bd 	ldrb.w	r3, [r7, #445]	; 0x1bd
 80050ca:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80050ce:	4957      	ldr	r1, [pc, #348]	; (800522c <startUIControl+0x9cc>)
 80050d0:	f00f fc18 	bl	8014904 <siprintf>
		   er_oled_time(time);
 80050d4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80050d8:	4618      	mov	r0, r3
 80050da:	f7fd fbca 	bl	8002872 <er_oled_time>

		   osMutexAcquire(lastSeenMutexHandle, portMAX_DELAY);
 80050de:	4b54      	ldr	r3, [pc, #336]	; (8005230 <startUIControl+0x9d0>)
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80050e6:	4618      	mov	r0, r3
 80050e8:	f00a ff54 	bl	800ff94 <osMutexAcquire>
		   GlobalState.lastSeenTime.time = cTime;
 80050ec:	4b51      	ldr	r3, [pc, #324]	; (8005234 <startUIControl+0x9d4>)
 80050ee:	f107 0210 	add.w	r2, r7, #16
 80050f2:	1d1c      	adds	r4, r3, #4
 80050f4:	4615      	mov	r5, r2
 80050f6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80050f8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80050fa:	682b      	ldr	r3, [r5, #0]
 80050fc:	6023      	str	r3, [r4, #0]
		   GlobalState.lastSeenTime.date = cDate;
 80050fe:	4a4d      	ldr	r2, [pc, #308]	; (8005234 <startUIControl+0x9d4>)
 8005100:	f107 030c 	add.w	r3, r7, #12
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	6193      	str	r3, [r2, #24]
		   osMutexRelease(lastSeenMutexHandle);
 8005108:	4b49      	ldr	r3, [pc, #292]	; (8005230 <startUIControl+0x9d0>)
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	4618      	mov	r0, r3
 800510e:	f00a ff9f 	bl	8010050 <osMutexRelease>

		   bleSendData.sendType = TX_TIME_SEEN;
 8005112:	f107 0308 	add.w	r3, r7, #8
 8005116:	2204      	movs	r2, #4
 8005118:	701a      	strb	r2, [r3, #0]
		   bleSendData.data = 0x0000;
 800511a:	f107 0308 	add.w	r3, r7, #8
 800511e:	2200      	movs	r2, #0
 8005120:	805a      	strh	r2, [r3, #2]
		   osMessageQueuePut(bleTXqueueHandle, &bleSendData, 0, 0);
 8005122:	4b45      	ldr	r3, [pc, #276]	; (8005238 <startUIControl+0x9d8>)
 8005124:	6818      	ldr	r0, [r3, #0]
 8005126:	f107 0108 	add.w	r1, r7, #8
 800512a:	2300      	movs	r3, #0
 800512c:	2200      	movs	r2, #0
 800512e:	f00b f9c1 	bl	80104b4 <osMessageQueuePut>

		   updateInterval();
 8005132:	f7ff fb21 	bl	8004778 <updateInterval>

		   osMutexAcquire(modeMutexHandle, portMAX_DELAY);
 8005136:	4b41      	ldr	r3, [pc, #260]	; (800523c <startUIControl+0x9dc>)
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800513e:	4618      	mov	r0, r3
 8005140:	f00a ff28 	bl	800ff94 <osMutexAcquire>
		   GlobalState.programMode = MODE_RESTING;
 8005144:	4b3b      	ldr	r3, [pc, #236]	; (8005234 <startUIControl+0x9d4>)
 8005146:	2200      	movs	r2, #0
 8005148:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		   osMutexRelease(modeMutexHandle);
 800514c:	4b3b      	ldr	r3, [pc, #236]	; (800523c <startUIControl+0x9dc>)
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	4618      	mov	r0, r3
 8005152:	f00a ff7d 	bl	8010050 <osMutexRelease>

		   osDelay(3000);
 8005156:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800515a:	f00a fe53 	bl	800fe04 <osDelay>
		   er_oled_clear(oled_buf);
 800515e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8005162:	4618      	mov	r0, r3
 8005164:	f7fd f96a 	bl	800243c <er_oled_clear>
		   er_oled_display(oled_buf);
 8005168:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800516c:	4618      	mov	r0, r3
 800516e:	f7fd fb48 	bl	8002802 <er_oled_display>
		   break;
 8005172:	e0ab      	b.n	80052cc <startUIControl+0xa6c>

       case MODE_ERROR:
    	   //ERROR condition: print condition and loop forever

    	   er_oled_clear(oled_buf);
 8005174:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8005178:	4618      	mov	r0, r3
 800517a:	f7fd f95f 	bl	800243c <er_oled_clear>
    	   er_oled_string(0, 12, errorCondition, 12, 1, oled_buf);
 800517e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8005182:	9301      	str	r3, [sp, #4]
 8005184:	2301      	movs	r3, #1
 8005186:	9300      	str	r3, [sp, #0]
 8005188:	230c      	movs	r3, #12
 800518a:	4a2e      	ldr	r2, [pc, #184]	; (8005244 <startUIControl+0x9e4>)
 800518c:	210c      	movs	r1, #12
 800518e:	2000      	movs	r0, #0
 8005190:	f7fd faf6 	bl	8002780 <er_oled_string>
    	   er_oled_display(oled_buf);
 8005194:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8005198:	4618      	mov	r0, r3
 800519a:	f7fd fb32 	bl	8002802 <er_oled_display>
    	   for (;;){}
 800519e:	e7fe      	b.n	800519e <startUIControl+0x93e>

       case MODE_CLEAR:
    	   //Timeout, notify and wait until clear
    	   //show time and restart

		   er_oled_clear(oled_buf);
 80051a0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80051a4:	4618      	mov	r0, r3
 80051a6:	f7fd f949 	bl	800243c <er_oled_clear>
		   er_oled_string(0, 10, "  TIMEOUT!", 12, 1, oled_buf);
 80051aa:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80051ae:	9301      	str	r3, [sp, #4]
 80051b0:	2301      	movs	r3, #1
 80051b2:	9300      	str	r3, [sp, #0]
 80051b4:	230c      	movs	r3, #12
 80051b6:	4a24      	ldr	r2, [pc, #144]	; (8005248 <startUIControl+0x9e8>)
 80051b8:	210a      	movs	r1, #10
 80051ba:	2000      	movs	r0, #0
 80051bc:	f7fd fae0 	bl	8002780 <er_oled_string>
		   er_oled_string(0, 28, " hit button", 12, 1, oled_buf);
 80051c0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80051c4:	9301      	str	r3, [sp, #4]
 80051c6:	2301      	movs	r3, #1
 80051c8:	9300      	str	r3, [sp, #0]
 80051ca:	230c      	movs	r3, #12
 80051cc:	4a1f      	ldr	r2, [pc, #124]	; (800524c <startUIControl+0x9ec>)
 80051ce:	211c      	movs	r1, #28
 80051d0:	2000      	movs	r0, #0
 80051d2:	f7fd fad5 	bl	8002780 <er_oled_string>
		   er_oled_display(oled_buf);
 80051d6:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80051da:	4618      	mov	r0, r3
 80051dc:	f7fd fb11 	bl	8002802 <er_oled_display>

		   osDelay(500);
 80051e0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80051e4:	f00a fe0e 	bl	800fe04 <osDelay>
    	   break;
 80051e8:	e070      	b.n	80052cc <startUIControl+0xa6c>

       case MODE_ESM_TIME_ESTIMATE:
    	  er_oled_clear(oled_buf);
 80051ea:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80051ee:	4618      	mov	r0, r3
 80051f0:	f7fd f924 	bl	800243c <er_oled_clear>
    	  er_oled_string(0, 0, " GUESS TIME:", 12, 1, oled_buf);
 80051f4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80051f8:	9301      	str	r3, [sp, #4]
 80051fa:	2301      	movs	r3, #1
 80051fc:	9300      	str	r3, [sp, #0]
 80051fe:	230c      	movs	r3, #12
 8005200:	4a13      	ldr	r2, [pc, #76]	; (8005250 <startUIControl+0x9f0>)
 8005202:	2100      	movs	r1, #0
 8005204:	2000      	movs	r0, #0
 8005206:	f7fd fabb 	bl	8002780 <er_oled_string>
    	  er_oled_display(oled_buf);
 800520a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800520e:	4618      	mov	r0, r3
 8005210:	f7fd faf7 	bl	8002802 <er_oled_display>
    	  osDelay(100);
 8005214:	2064      	movs	r0, #100	; 0x64
 8005216:	f00a fdf5 	bl	800fe04 <osDelay>
    	  break;
 800521a:	e057      	b.n	80052cc <startUIControl+0xa6c>
 800521c:	08018928 	.word	0x08018928
 8005220:	08018934 	.word	0x08018934
 8005224:	2002e0c8 	.word	0x2002e0c8
 8005228:	2002e0a4 	.word	0x2002e0a4
 800522c:	080188dc 	.word	0x080188dc
 8005230:	2002e320 	.word	0x2002e320
 8005234:	2002e0cc 	.word	0x2002e0cc
 8005238:	2002e2b0 	.word	0x2002e2b0
 800523c:	2002e250 	.word	0x2002e250
 8005240:	08018944 	.word	0x08018944
 8005244:	2002e1c0 	.word	0x2002e1c0
 8005248:	08018950 	.word	0x08018950
 800524c:	0801895c 	.word	0x0801895c
 8005250:	08018918 	.word	0x08018918

       case MODE_ESM_SURVEY:
    	  er_oled_clear(oled_buf);
 8005254:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8005258:	4618      	mov	r0, r3
 800525a:	f7fd f8ef 	bl	800243c <er_oled_clear>
    	  er_oled_string(0, 0, GlobalState.surveyState.screenText, 12, 1, oled_buf);
 800525e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8005262:	9301      	str	r3, [sp, #4]
 8005264:	2301      	movs	r3, #1
 8005266:	9300      	str	r3, [sp, #0]
 8005268:	230c      	movs	r3, #12
 800526a:	4a19      	ldr	r2, [pc, #100]	; (80052d0 <startUIControl+0xa70>)
 800526c:	2100      	movs	r1, #0
 800526e:	2000      	movs	r0, #0
 8005270:	f7fd fa86 	bl	8002780 <er_oled_string>
    	  er_oled_display(oled_buf);
 8005274:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8005278:	4618      	mov	r0, r3
 800527a:	f7fd fac2 	bl	8002802 <er_oled_display>
    	  osDelay(100);
 800527e:	2064      	movs	r0, #100	; 0x64
 8005280:	f00a fdc0 	bl	800fe04 <osDelay>
    	  break;
 8005284:	e022      	b.n	80052cc <startUIControl+0xa6c>

       case MODE_RESTING:
		   osDelay(250);
 8005286:	20fa      	movs	r0, #250	; 0xfa
 8005288:	f00a fdbc 	bl	800fe04 <osDelay>
		   if (GlobalState.paused){
 800528c:	4b11      	ldr	r3, [pc, #68]	; (80052d4 <startUIControl+0xa74>)
 800528e:	f893 30ed 	ldrb.w	r3, [r3, #237]	; 0xed
 8005292:	2b00      	cmp	r3, #0
 8005294:	d019      	beq.n	80052ca <startUIControl+0xa6a>
			   er_oled_clear(oled_buf);
 8005296:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800529a:	4618      	mov	r0, r3
 800529c:	f7fd f8ce 	bl	800243c <er_oled_clear>
			   er_oled_string(0, 14, "   paused", 12, 1, oled_buf);
 80052a0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80052a4:	9301      	str	r3, [sp, #4]
 80052a6:	2301      	movs	r3, #1
 80052a8:	9300      	str	r3, [sp, #0]
 80052aa:	230c      	movs	r3, #12
 80052ac:	4a0a      	ldr	r2, [pc, #40]	; (80052d8 <startUIControl+0xa78>)
 80052ae:	210e      	movs	r1, #14
 80052b0:	2000      	movs	r0, #0
 80052b2:	f7fd fa65 	bl	8002780 <er_oled_string>
			   er_oled_display(oled_buf);
 80052b6:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80052ba:	4618      	mov	r0, r3
 80052bc:	f7fd faa1 	bl	8002802 <er_oled_display>
		   }
		   break;
 80052c0:	e003      	b.n	80052ca <startUIControl+0xa6a>

       default:
    	   osDelay(20);
 80052c2:	2014      	movs	r0, #20
 80052c4:	f00a fd9e 	bl	800fe04 <osDelay>
    	   break;
 80052c8:	e000      	b.n	80052cc <startUIControl+0xa6c>
		   break;
 80052ca:	bf00      	nop
	 current_minute = iqs263_get_min_if_pressed(); //returns -1 if no press
 80052cc:	f7ff bb2e 	b.w	800492c <startUIControl+0xcc>
 80052d0:	2002e115 	.word	0x2002e115
 80052d4:	2002e0cc 	.word	0x2002e0cc
 80052d8:	08018968 	.word	0x08018968

080052dc <check_time_bounds>:

  /* USER CODE END startUIControl */
}


uint8_t check_time_bounds(uint8_t curr_hrs){
 80052dc:	b580      	push	{r7, lr}
 80052de:	b084      	sub	sp, #16
 80052e0:	af00      	add	r7, sp, #0
 80052e2:	4603      	mov	r3, r0
 80052e4:	71fb      	strb	r3, [r7, #7]
	//check time bounds, account for wrap (i.e. give time bounds of 10a-3a)

	uint8_t starthr = RTC_Bcd2ToByte(GlobalState.timeBound.startHR_BCD);
 80052e6:	4b17      	ldr	r3, [pc, #92]	; (8005344 <check_time_bounds+0x68>)
 80052e8:	781b      	ldrb	r3, [r3, #0]
 80052ea:	4618      	mov	r0, r3
 80052ec:	f006 f8e4 	bl	800b4b8 <RTC_Bcd2ToByte>
 80052f0:	4603      	mov	r3, r0
 80052f2:	73fb      	strb	r3, [r7, #15]
	uint8_t endhr = RTC_Bcd2ToByte(GlobalState.timeBound.endHR_BCD);
 80052f4:	4b13      	ldr	r3, [pc, #76]	; (8005344 <check_time_bounds+0x68>)
 80052f6:	785b      	ldrb	r3, [r3, #1]
 80052f8:	4618      	mov	r0, r3
 80052fa:	f006 f8dd 	bl	800b4b8 <RTC_Bcd2ToByte>
 80052fe:	4603      	mov	r3, r0
 8005300:	73bb      	strb	r3, [r7, #14]

	if (starthr < endhr){
 8005302:	7bfa      	ldrb	r2, [r7, #15]
 8005304:	7bbb      	ldrb	r3, [r7, #14]
 8005306:	429a      	cmp	r2, r3
 8005308:	d20c      	bcs.n	8005324 <check_time_bounds+0x48>
		return (curr_hrs >= starthr && curr_hrs < endhr);
 800530a:	79fa      	ldrb	r2, [r7, #7]
 800530c:	7bfb      	ldrb	r3, [r7, #15]
 800530e:	429a      	cmp	r2, r3
 8005310:	d305      	bcc.n	800531e <check_time_bounds+0x42>
 8005312:	79fa      	ldrb	r2, [r7, #7]
 8005314:	7bbb      	ldrb	r3, [r7, #14]
 8005316:	429a      	cmp	r2, r3
 8005318:	d201      	bcs.n	800531e <check_time_bounds+0x42>
 800531a:	2301      	movs	r3, #1
 800531c:	e000      	b.n	8005320 <check_time_bounds+0x44>
 800531e:	2300      	movs	r3, #0
 8005320:	b2db      	uxtb	r3, r3
 8005322:	e00b      	b.n	800533c <check_time_bounds+0x60>
	} else {
		return (curr_hrs >= starthr || curr_hrs < endhr);
 8005324:	79fa      	ldrb	r2, [r7, #7]
 8005326:	7bfb      	ldrb	r3, [r7, #15]
 8005328:	429a      	cmp	r2, r3
 800532a:	d203      	bcs.n	8005334 <check_time_bounds+0x58>
 800532c:	79fa      	ldrb	r2, [r7, #7]
 800532e:	7bbb      	ldrb	r3, [r7, #14]
 8005330:	429a      	cmp	r2, r3
 8005332:	d201      	bcs.n	8005338 <check_time_bounds+0x5c>
 8005334:	2301      	movs	r3, #1
 8005336:	e000      	b.n	800533a <check_time_bounds+0x5e>
 8005338:	2300      	movs	r3, #0
 800533a:	b2db      	uxtb	r3, r3
	}

}
 800533c:	4618      	mov	r0, r3
 800533e:	3710      	adds	r7, #16
 8005340:	46bd      	mov	sp, r7
 8005342:	bd80      	pop	{r7, pc}
 8005344:	2002e0cc 	.word	0x2002e0cc

08005348 <startESMMain>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_startESMMain */
void startESMMain(void *argument)
{
 8005348:	b5b0      	push	{r4, r5, r7, lr}
 800534a:	b092      	sub	sp, #72	; 0x48
 800534c:	af00      	add	r7, sp, #0
 800534e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN startESMMain */


  const BLETX_Queue_t bleSendInit = {TX_SURVEY_INITIALIZED, 0x0000};
 8005350:	2302      	movs	r3, #2
 8005352:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
 8005356:	2300      	movs	r3, #0
 8005358:	857b      	strh	r3, [r7, #42]	; 0x2a
  /* Infinite loop */
  for(;;)
  {

	//only check time 3 times a min to see if we need a survey
    osDelay(20000); //20 sec delay
 800535a:	f644 6020 	movw	r0, #20000	; 0x4e20
 800535e:	f00a fd51 	bl	800fe04 <osDelay>

    //Grab current time
    osMutexAcquire(rtcMutexHandle, portMAX_DELAY);
 8005362:	4ba7      	ldr	r3, [pc, #668]	; (8005600 <startESMMain+0x2b8>)
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800536a:	4618      	mov	r0, r3
 800536c:	f00a fe12 	bl	800ff94 <osMutexAcquire>
    HAL_RTC_GetTime(&hrtc, &cTime, RTC_FORMAT_BCD);
 8005370:	f107 0314 	add.w	r3, r7, #20
 8005374:	2201      	movs	r2, #1
 8005376:	4619      	mov	r1, r3
 8005378:	48a2      	ldr	r0, [pc, #648]	; (8005604 <startESMMain+0x2bc>)
 800537a:	f005 fed6 	bl	800b12a <HAL_RTC_GetTime>
    HAL_RTC_GetDate(&hrtc, &cDate, RTC_FORMAT_BCD);
 800537e:	f107 0310 	add.w	r3, r7, #16
 8005382:	2201      	movs	r2, #1
 8005384:	4619      	mov	r1, r3
 8005386:	489f      	ldr	r0, [pc, #636]	; (8005604 <startESMMain+0x2bc>)
 8005388:	f005 ffd9 	bl	800b33e <HAL_RTC_GetDate>
    osMutexRelease(rtcMutexHandle);
 800538c:	4b9c      	ldr	r3, [pc, #624]	; (8005600 <startESMMain+0x2b8>)
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	4618      	mov	r0, r3
 8005392:	f00a fe5d 	bl	8010050 <osMutexRelease>

    uint8_t curr_hrs = RTC_Bcd2ToByte(cTime.Hours);
 8005396:	7d3b      	ldrb	r3, [r7, #20]
 8005398:	4618      	mov	r0, r3
 800539a:	f006 f88d 	bl	800b4b8 <RTC_Bcd2ToByte>
 800539e:	4603      	mov	r3, r0
 80053a0:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
    uint8_t curr_min = RTC_Bcd2ToByte(cTime.Minutes);
 80053a4:	7d7b      	ldrb	r3, [r7, #21]
 80053a6:	4618      	mov	r0, r3
 80053a8:	f006 f886 	bl	800b4b8 <RTC_Bcd2ToByte>
 80053ac:	4603      	mov	r3, r0
 80053ae:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c

    //Get a date in YYMMDD format so we can easily compare relative values
    uint32_t curr_date = (cDate.Year << 16) | (cDate.Month << 8) | cDate.Date;
 80053b2:	7cfb      	ldrb	r3, [r7, #19]
 80053b4:	041a      	lsls	r2, r3, #16
 80053b6:	7c7b      	ldrb	r3, [r7, #17]
 80053b8:	021b      	lsls	r3, r3, #8
 80053ba:	4313      	orrs	r3, r2
 80053bc:	7cba      	ldrb	r2, [r7, #18]
 80053be:	4313      	orrs	r3, r2
 80053c0:	63bb      	str	r3, [r7, #56]	; 0x38

    //Grab last seen time hrs/min and date

    if (ESM_SEPARATE_TIME_ESTIMATE){

    	last_hrs = RTC_Bcd2ToByte(GlobalState.lastSurveyTime.time.Hours);
 80053c2:	4b91      	ldr	r3, [pc, #580]	; (8005608 <startESMMain+0x2c0>)
 80053c4:	7f1b      	ldrb	r3, [r3, #28]
 80053c6:	4618      	mov	r0, r3
 80053c8:	f006 f876 	bl	800b4b8 <RTC_Bcd2ToByte>
 80053cc:	4603      	mov	r3, r0
 80053ce:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		last_min = RTC_Bcd2ToByte(GlobalState.lastSurveyTime.time.Minutes);
 80053d2:	4b8d      	ldr	r3, [pc, #564]	; (8005608 <startESMMain+0x2c0>)
 80053d4:	7f5b      	ldrb	r3, [r3, #29]
 80053d6:	4618      	mov	r0, r3
 80053d8:	f006 f86e 	bl	800b4b8 <RTC_Bcd2ToByte>
 80053dc:	4603      	mov	r3, r0
 80053de:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
		last_date = (GlobalState.lastSurveyTime.date.Year << 16) |
 80053e2:	4b89      	ldr	r3, [pc, #548]	; (8005608 <startESMMain+0x2c0>)
 80053e4:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 80053e8:	041a      	lsls	r2, r3, #16
					(GlobalState.lastSurveyTime.date.Month << 8) |
 80053ea:	4b87      	ldr	r3, [pc, #540]	; (8005608 <startESMMain+0x2c0>)
 80053ec:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80053f0:	021b      	lsls	r3, r3, #8
		last_date = (GlobalState.lastSurveyTime.date.Year << 16) |
 80053f2:	4313      	orrs	r3, r2
					 GlobalState.lastSurveyTime.date.Date;
 80053f4:	4a84      	ldr	r2, [pc, #528]	; (8005608 <startESMMain+0x2c0>)
 80053f6:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
					(GlobalState.lastSurveyTime.date.Month << 8) |
 80053fa:	4313      	orrs	r3, r2
		last_date = (GlobalState.lastSurveyTime.date.Year << 16) |
 80053fc:	633b      	str	r3, [r7, #48]	; 0x30
    	last_date = (GlobalState.lastSeenTime.date.Year << 16) |
    	    		(GlobalState.lastSeenTime.date.Month << 8) |
    				 GlobalState.lastSeenTime.date.Date;
    }

    uint8_t sameDayFlag = 1;
 80053fe:	2301      	movs	r3, #1
 8005400:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

    //Going to do time in minutes for ease.  60 min *24 hours = 1440 min / day

    uint16_t current_time_in_min = (60*curr_hrs + curr_min);
 8005404:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8005408:	b29b      	uxth	r3, r3
 800540a:	461a      	mov	r2, r3
 800540c:	0112      	lsls	r2, r2, #4
 800540e:	1ad3      	subs	r3, r2, r3
 8005410:	009b      	lsls	r3, r3, #2
 8005412:	b29a      	uxth	r2, r3
 8005414:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8005418:	b29b      	uxth	r3, r3
 800541a:	4413      	add	r3, r2
 800541c:	85fb      	strh	r3, [r7, #46]	; 0x2e

    uint16_t thresh_time_in_min = (60*last_hrs + last_min + GlobalState.currentInterval);
 800541e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005422:	b29b      	uxth	r3, r3
 8005424:	461a      	mov	r2, r3
 8005426:	0112      	lsls	r2, r2, #4
 8005428:	1ad3      	subs	r3, r2, r3
 800542a:	009b      	lsls	r3, r3, #2
 800542c:	b29a      	uxth	r2, r3
 800542e:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8005432:	b29b      	uxth	r3, r3
 8005434:	4413      	add	r3, r2
 8005436:	b29a      	uxth	r2, r3
 8005438:	4b73      	ldr	r3, [pc, #460]	; (8005608 <startESMMain+0x2c0>)
 800543a:	f893 30ec 	ldrb.w	r3, [r3, #236]	; 0xec
 800543e:	b29b      	uxth	r3, r3
 8005440:	4413      	add	r3, r2
 8005442:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
	if (thresh_time_in_min >= 1440){
 8005446:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800544a:	f5b3 6fb4 	cmp.w	r3, #1440	; 0x5a0
 800544e:	d30f      	bcc.n	8005470 <startESMMain+0x128>
		thresh_time_in_min %= 1440;
 8005450:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8005454:	095a      	lsrs	r2, r3, #5
 8005456:	496d      	ldr	r1, [pc, #436]	; (800560c <startESMMain+0x2c4>)
 8005458:	fba1 1202 	umull	r1, r2, r1, r2
 800545c:	f44f 61b4 	mov.w	r1, #1440	; 0x5a0
 8005460:	fb01 f202 	mul.w	r2, r1, r2
 8005464:	1a9b      	subs	r3, r3, r2
 8005466:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
		sameDayFlag = 0;
 800546a:	2300      	movs	r3, #0
 800546c:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
    //Init Survey:
    // TIME BOUNDS for current time hrs
    // curr_time == last_time + interval  (minute resolution, this is checked every 15 sec).
    // programMode is RESTING
    // not GlobalState.paused
    if (GlobalState.programMode == MODE_RESTING && !GlobalState.paused &&
 8005470:	4b65      	ldr	r3, [pc, #404]	; (8005608 <startESMMain+0x2c0>)
 8005472:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005476:	2b00      	cmp	r3, #0
 8005478:	f040 83ca 	bne.w	8005c10 <startESMMain+0x8c8>
 800547c:	4b62      	ldr	r3, [pc, #392]	; (8005608 <startESMMain+0x2c0>)
 800547e:	f893 30ed 	ldrb.w	r3, [r3, #237]	; 0xed
 8005482:	2b00      	cmp	r3, #0
 8005484:	f040 83c4 	bne.w	8005c10 <startESMMain+0x8c8>
    	check_time_bounds(curr_hrs) && current_time_in_min >= thresh_time_in_min &&
 8005488:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 800548c:	4618      	mov	r0, r3
 800548e:	f7ff ff25 	bl	80052dc <check_time_bounds>
 8005492:	4603      	mov	r3, r0
    if (GlobalState.programMode == MODE_RESTING && !GlobalState.paused &&
 8005494:	2b00      	cmp	r3, #0
 8005496:	f000 83bb 	beq.w	8005c10 <startESMMain+0x8c8>
    	check_time_bounds(curr_hrs) && current_time_in_min >= thresh_time_in_min &&
 800549a:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800549c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80054a0:	429a      	cmp	r2, r3
 80054a2:	f0c0 83b5 	bcc.w	8005c10 <startESMMain+0x8c8>
		(sameDayFlag | (curr_date > last_date )) ){
 80054a6:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80054aa:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80054ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80054ae:	4291      	cmp	r1, r2
 80054b0:	bf8c      	ite	hi
 80054b2:	2201      	movhi	r2, #1
 80054b4:	2200      	movls	r2, #0
 80054b6:	b2d2      	uxtb	r2, r2
 80054b8:	4313      	orrs	r3, r2
    	check_time_bounds(curr_hrs) && current_time_in_min >= thresh_time_in_min &&
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	f000 83a8 	beq.w	8005c10 <startESMMain+0x8c8>

    	//send TX_SURVEY_INITIALIZED
    	osMessageQueuePut(bleTXqueueHandle, &bleSendInit, 0, 0);
 80054c0:	4b53      	ldr	r3, [pc, #332]	; (8005610 <startESMMain+0x2c8>)
 80054c2:	6818      	ldr	r0, [r3, #0]
 80054c4:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80054c8:	2300      	movs	r3, #0
 80054ca:	2200      	movs	r2, #0
 80054cc:	f00a fff2 	bl	80104b4 <osMessageQueuePut>

    	//set program mode to MODE_ESM_TIME_ESTIMATE
    	osMutexAcquire(modeMutexHandle, portMAX_DELAY);
 80054d0:	4b50      	ldr	r3, [pc, #320]	; (8005614 <startESMMain+0x2cc>)
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80054d8:	4618      	mov	r0, r3
 80054da:	f00a fd5b 	bl	800ff94 <osMutexAcquire>
    	GlobalState.programMode = MODE_ESM_TIME_ESTIMATE;
 80054de:	4b4a      	ldr	r3, [pc, #296]	; (8005608 <startESMMain+0x2c0>)
 80054e0:	2202      	movs	r2, #2
 80054e2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    	osMutexRelease(modeMutexHandle);
 80054e6:	4b4b      	ldr	r3, [pc, #300]	; (8005614 <startESMMain+0x2cc>)
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	4618      	mov	r0, r3
 80054ec:	f00a fdb0 	bl	8010050 <osMutexRelease>

    	//clear UI notification flags
    	xTaskNotifyStateClear(NULL);
 80054f0:	2000      	movs	r0, #0
 80054f2:	f00e f899 	bl	8013628 <xTaskNotifyStateClear>

    	uint8_t continue_flag = 1;
 80054f6:	2301      	movs	r3, #1
 80054f8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

    	//(1) Alert Loop and ESM_TIME_ESTIMATE
    	uint8_t keep_alerting = 1;
 80054fc:	2301      	movs	r3, #1
 80054fe:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    	while(keep_alerting){
 8005502:	e020      	b.n	8005546 <startESMMain+0x1fe>

    		//alert
    		xTaskNotifyGive(alertHandle);
 8005504:	4b44      	ldr	r3, [pc, #272]	; (8005618 <startESMMain+0x2d0>)
 8005506:	6818      	ldr	r0, [r3, #0]
 8005508:	2300      	movs	r3, #0
 800550a:	2202      	movs	r2, #2
 800550c:	2100      	movs	r1, #0
 800550e:	f00d fefd 	bl	801330c <xTaskGenericNotify>
    		//wait for notification from UI thread that indicates start of user interaction
    		notification = ulTaskNotifyTake( pdTRUE, pdMS_TO_TICKS(ALERT_TIMEOUT));
 8005512:	f241 7170 	movw	r1, #6000	; 0x1770
 8005516:	2001      	movs	r0, #1
 8005518:	f00d fe56 	bl	80131c8 <ulTaskNotifyTake>
 800551c:	6478      	str	r0, [r7, #68]	; 0x44
       	    if (notification){ //not a timeout, interaction started
 800551e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005520:	2b00      	cmp	r3, #0
 8005522:	d002      	beq.n	800552a <startESMMain+0x1e2>
        		keep_alerting = 0;
 8005524:	2300      	movs	r3, #0
 8005526:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
     		}
    	    if (GlobalState.programMode != MODE_ESM_TIME_ESTIMATE){
 800552a:	4b37      	ldr	r3, [pc, #220]	; (8005608 <startESMMain+0x2c0>)
 800552c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005530:	2b02      	cmp	r3, #2
 8005532:	d005      	beq.n	8005540 <startESMMain+0x1f8>
    	    	//button press has changed mode and canceled interaction. want to exit alert loop.
    	    	keep_alerting = 0;
 8005534:	2300      	movs	r3, #0
 8005536:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    	    	continue_flag = 0;
 800553a:	2300      	movs	r3, #0
 800553c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    	    }

    	    osDelay(10);
 8005540:	200a      	movs	r0, #10
 8005542:	f00a fc5f 	bl	800fe04 <osDelay>
    	while(keep_alerting){
 8005546:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800554a:	2b00      	cmp	r3, #0
 800554c:	d1da      	bne.n	8005504 <startESMMain+0x1bc>
        }

    	//SECOND SCREEN FOR ESM - FOCUS
    	if (continue_flag){
 800554e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8005552:	2b00      	cmp	r3, #0
 8005554:	d00d      	beq.n	8005572 <startESMMain+0x22a>
    		//(2) Wait for notification from UI thread that indicates confirmed input
    		notification = ulTaskNotifyTake( pdTRUE, pdMS_TO_TICKS(INTERACTION_TIMEOUT));
 8005556:	f64a 71c8 	movw	r1, #45000	; 0xafc8
 800555a:	2001      	movs	r0, #1
 800555c:	f00d fe34 	bl	80131c8 <ulTaskNotifyTake>
 8005560:	6478      	str	r0, [r7, #68]	; 0x44

    		if (GlobalState.programMode != MODE_ESM_TIME_ESTIMATE){
 8005562:	4b29      	ldr	r3, [pc, #164]	; (8005608 <startESMMain+0x2c0>)
 8005564:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005568:	2b02      	cmp	r3, #2
 800556a:	d002      	beq.n	8005572 <startESMMain+0x22a>
    			//if our mode has changed, we had a dismiss/snooze event
    			continue_flag = 0;
 800556c:	2300      	movs	r3, #0
 800556e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    		}
    	}

    	if (continue_flag){
 8005572:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8005576:	2b00      	cmp	r3, #0
 8005578:	d06b      	beq.n	8005652 <startESMMain+0x30a>
    		if (notification){//not timed out, had a confirmed event
 800557a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800557c:	2b00      	cmp	r3, #0
 800557e:	d055      	beq.n	800562c <startESMMain+0x2e4>
    			//set up next interaction
    			//set up survey
    			osMutexAcquire(surveyMutexHandle, portMAX_DELAY);
 8005580:	4b26      	ldr	r3, [pc, #152]	; (800561c <startESMMain+0x2d4>)
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8005588:	4618      	mov	r0, r3
 800558a:	f00a fd03 	bl	800ff94 <osMutexAcquire>
    			strncpy(GlobalState.surveyState.screenText, "    FOCUS?", strlen("    FOCUS?") + 1);
 800558e:	4a24      	ldr	r2, [pc, #144]	; (8005620 <startESMMain+0x2d8>)
 8005590:	4b24      	ldr	r3, [pc, #144]	; (8005624 <startESMMain+0x2dc>)
 8005592:	cb03      	ldmia	r3!, {r0, r1}
 8005594:	6010      	str	r0, [r2, #0]
 8005596:	6051      	str	r1, [r2, #4]
 8005598:	8819      	ldrh	r1, [r3, #0]
 800559a:	789b      	ldrb	r3, [r3, #2]
 800559c:	8111      	strh	r1, [r2, #8]
 800559e:	7293      	strb	r3, [r2, #10]
    			GlobalState.surveyState.screenTextLength = strlen("    FOCUS?");
 80055a0:	4b19      	ldr	r3, [pc, #100]	; (8005608 <startESMMain+0x2c0>)
 80055a2:	220a      	movs	r2, #10
 80055a4:	f883 20c9 	strb.w	r2, [r3, #201]	; 0xc9
    			GlobalState.surveyState.surveyID = SURVEY_FOCUS;
 80055a8:	4b17      	ldr	r3, [pc, #92]	; (8005608 <startESMMain+0x2c0>)
 80055aa:	2201      	movs	r2, #1
 80055ac:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    			memcpy(GlobalState.surveyState.optionArray, opts_arousal, sizeof(opts_arousal));
 80055b0:	4b15      	ldr	r3, [pc, #84]	; (8005608 <startESMMain+0x2c0>)
 80055b2:	4a1d      	ldr	r2, [pc, #116]	; (8005628 <startESMMain+0x2e0>)
 80055b4:	f103 04cc 	add.w	r4, r3, #204	; 0xcc
 80055b8:	4615      	mov	r5, r2
 80055ba:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80055bc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80055be:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80055c0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80055c2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80055c6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    			GlobalState.surveyState.optionArrayLength = 5;
 80055ca:	4b0f      	ldr	r3, [pc, #60]	; (8005608 <startESMMain+0x2c0>)
 80055cc:	2205      	movs	r2, #5
 80055ce:	f883 20e8 	strb.w	r2, [r3, #232]	; 0xe8
    			osMutexRelease(surveyMutexHandle);
 80055d2:	4b12      	ldr	r3, [pc, #72]	; (800561c <startESMMain+0x2d4>)
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	4618      	mov	r0, r3
 80055d8:	f00a fd3a 	bl	8010050 <osMutexRelease>

    			//programMode
    			osMutexAcquire(modeMutexHandle, portMAX_DELAY);
 80055dc:	4b0d      	ldr	r3, [pc, #52]	; (8005614 <startESMMain+0x2cc>)
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80055e4:	4618      	mov	r0, r3
 80055e6:	f00a fcd5 	bl	800ff94 <osMutexAcquire>
    			GlobalState.programMode = MODE_ESM_SURVEY;
 80055ea:	4b07      	ldr	r3, [pc, #28]	; (8005608 <startESMMain+0x2c0>)
 80055ec:	2203      	movs	r2, #3
 80055ee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    			osMutexRelease(modeMutexHandle);
 80055f2:	4b08      	ldr	r3, [pc, #32]	; (8005614 <startESMMain+0x2cc>)
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	4618      	mov	r0, r3
 80055f8:	f00a fd2a 	bl	8010050 <osMutexRelease>
 80055fc:	e029      	b.n	8005652 <startESMMain+0x30a>
 80055fe:	bf00      	nop
 8005600:	2002e0c8 	.word	0x2002e0c8
 8005604:	2002e0a4 	.word	0x2002e0a4
 8005608:	2002e0cc 	.word	0x2002e0cc
 800560c:	05b05b06 	.word	0x05b05b06
 8005610:	2002e2b0 	.word	0x2002e2b0
 8005614:	2002e250 	.word	0x2002e250
 8005618:	2002e1f0 	.word	0x2002e1f0
 800561c:	2002e248 	.word	0x2002e248
 8005620:	2002e115 	.word	0x2002e115
 8005624:	08018974 	.word	0x08018974
 8005628:	08019998 	.word	0x08019998

    		} else {//timed out due to inactivity
    			continue_flag = 0;
 800562c:	2300      	movs	r3, #0
 800562e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

    			osMutexAcquire(modeMutexHandle, portMAX_DELAY);
 8005632:	4bb2      	ldr	r3, [pc, #712]	; (80058fc <startESMMain+0x5b4>)
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800563a:	4618      	mov	r0, r3
 800563c:	f00a fcaa 	bl	800ff94 <osMutexAcquire>
    			GlobalState.programMode = MODE_CLEAR;
 8005640:	4baf      	ldr	r3, [pc, #700]	; (8005900 <startESMMain+0x5b8>)
 8005642:	2207      	movs	r2, #7
 8005644:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    			osMutexRelease(modeMutexHandle);
 8005648:	4bac      	ldr	r3, [pc, #688]	; (80058fc <startESMMain+0x5b4>)
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	4618      	mov	r0, r3
 800564e:	f00a fcff 	bl	8010050 <osMutexRelease>
    		}
    	}

    	//THIRD SCREEN FOR ESM - ALERTNESS/AROUSAL
		if (continue_flag){
 8005652:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8005656:	2b00      	cmp	r3, #0
 8005658:	d00d      	beq.n	8005676 <startESMMain+0x32e>
			//(2) Wait for notification from UI thread that indicates confirmed input
			notification = ulTaskNotifyTake( pdTRUE, pdMS_TO_TICKS(INTERACTION_TIMEOUT));
 800565a:	f64a 71c8 	movw	r1, #45000	; 0xafc8
 800565e:	2001      	movs	r0, #1
 8005660:	f00d fdb2 	bl	80131c8 <ulTaskNotifyTake>
 8005664:	6478      	str	r0, [r7, #68]	; 0x44

			if (GlobalState.programMode != MODE_ESM_SURVEY){
 8005666:	4ba6      	ldr	r3, [pc, #664]	; (8005900 <startESMMain+0x5b8>)
 8005668:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800566c:	2b03      	cmp	r3, #3
 800566e:	d002      	beq.n	8005676 <startESMMain+0x32e>
				//if our mode has changed, we had a dismiss/snooze event
				continue_flag = 0;
 8005670:	2300      	movs	r3, #0
 8005672:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			}
		}

		if (continue_flag){
 8005676:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800567a:	2b00      	cmp	r3, #0
 800567c:	d042      	beq.n	8005704 <startESMMain+0x3bc>
			if (notification){//not timed out, had a confirmed event
 800567e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005680:	2b00      	cmp	r3, #0
 8005682:	d02c      	beq.n	80056de <startESMMain+0x396>
				//set up next interaction
				//set up survey
				osMutexAcquire(surveyMutexHandle, portMAX_DELAY);
 8005684:	4b9f      	ldr	r3, [pc, #636]	; (8005904 <startESMMain+0x5bc>)
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800568c:	4618      	mov	r0, r3
 800568e:	f00a fc81 	bl	800ff94 <osMutexAcquire>
				strncpy(GlobalState.surveyState.screenText, " ALERTNESS?", strlen(" ALERTNESS?") + 1);
 8005692:	4a9d      	ldr	r2, [pc, #628]	; (8005908 <startESMMain+0x5c0>)
 8005694:	4b9d      	ldr	r3, [pc, #628]	; (800590c <startESMMain+0x5c4>)
 8005696:	4614      	mov	r4, r2
 8005698:	cb07      	ldmia	r3!, {r0, r1, r2}
 800569a:	6020      	str	r0, [r4, #0]
 800569c:	6061      	str	r1, [r4, #4]
 800569e:	60a2      	str	r2, [r4, #8]
				GlobalState.surveyState.screenTextLength = strlen(" ALERTNESS?");
 80056a0:	4b97      	ldr	r3, [pc, #604]	; (8005900 <startESMMain+0x5b8>)
 80056a2:	220b      	movs	r2, #11
 80056a4:	f883 20c9 	strb.w	r2, [r3, #201]	; 0xc9
				GlobalState.surveyState.surveyID = SURVEY_AROUSAL;
 80056a8:	4b95      	ldr	r3, [pc, #596]	; (8005900 <startESMMain+0x5b8>)
 80056aa:	2202      	movs	r2, #2
 80056ac:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
				memcpy(GlobalState.surveyState.optionArray, opts_arousal, sizeof(opts_arousal));
 80056b0:	4b93      	ldr	r3, [pc, #588]	; (8005900 <startESMMain+0x5b8>)
 80056b2:	4a97      	ldr	r2, [pc, #604]	; (8005910 <startESMMain+0x5c8>)
 80056b4:	f103 04cc 	add.w	r4, r3, #204	; 0xcc
 80056b8:	4615      	mov	r5, r2
 80056ba:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80056bc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80056be:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80056c0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80056c2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80056c6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
				GlobalState.surveyState.optionArrayLength = 5;
 80056ca:	4b8d      	ldr	r3, [pc, #564]	; (8005900 <startESMMain+0x5b8>)
 80056cc:	2205      	movs	r2, #5
 80056ce:	f883 20e8 	strb.w	r2, [r3, #232]	; 0xe8
				osMutexRelease(surveyMutexHandle);
 80056d2:	4b8c      	ldr	r3, [pc, #560]	; (8005904 <startESMMain+0x5bc>)
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	4618      	mov	r0, r3
 80056d8:	f00a fcba 	bl	8010050 <osMutexRelease>
 80056dc:	e012      	b.n	8005704 <startESMMain+0x3bc>

			} else {//timed out due to inactivity
				continue_flag = 0;
 80056de:	2300      	movs	r3, #0
 80056e0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

				osMutexAcquire(modeMutexHandle, portMAX_DELAY);
 80056e4:	4b85      	ldr	r3, [pc, #532]	; (80058fc <startESMMain+0x5b4>)
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80056ec:	4618      	mov	r0, r3
 80056ee:	f00a fc51 	bl	800ff94 <osMutexAcquire>
				GlobalState.programMode = MODE_CLEAR;
 80056f2:	4b83      	ldr	r3, [pc, #524]	; (8005900 <startESMMain+0x5b8>)
 80056f4:	2207      	movs	r2, #7
 80056f6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
				osMutexRelease(modeMutexHandle);
 80056fa:	4b80      	ldr	r3, [pc, #512]	; (80058fc <startESMMain+0x5b4>)
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	4618      	mov	r0, r3
 8005700:	f00a fca6 	bl	8010050 <osMutexRelease>
			}
		}

		//FOURTH SCREEN FOR ESM - EMOTION/VALENCE
		if (continue_flag){
 8005704:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8005708:	2b00      	cmp	r3, #0
 800570a:	d00d      	beq.n	8005728 <startESMMain+0x3e0>
			//(2) Wait for notification from UI thread that indicates confirmed input
			notification = ulTaskNotifyTake( pdTRUE, pdMS_TO_TICKS(INTERACTION_TIMEOUT));
 800570c:	f64a 71c8 	movw	r1, #45000	; 0xafc8
 8005710:	2001      	movs	r0, #1
 8005712:	f00d fd59 	bl	80131c8 <ulTaskNotifyTake>
 8005716:	6478      	str	r0, [r7, #68]	; 0x44

			if (GlobalState.programMode != MODE_ESM_SURVEY){
 8005718:	4b79      	ldr	r3, [pc, #484]	; (8005900 <startESMMain+0x5b8>)
 800571a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800571e:	2b03      	cmp	r3, #3
 8005720:	d002      	beq.n	8005728 <startESMMain+0x3e0>
				//if our mode has changed, we had a dismiss/snooze event
				continue_flag = 0;
 8005722:	2300      	movs	r3, #0
 8005724:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			}
		}

		if (continue_flag){
 8005728:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800572c:	2b00      	cmp	r3, #0
 800572e:	d044      	beq.n	80057ba <startESMMain+0x472>
			if (notification){//not timed out, had a confirmed event
 8005730:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005732:	2b00      	cmp	r3, #0
 8005734:	d02e      	beq.n	8005794 <startESMMain+0x44c>
				//set up next interaction
				//set up survey
				osMutexAcquire(surveyMutexHandle, portMAX_DELAY);
 8005736:	4b73      	ldr	r3, [pc, #460]	; (8005904 <startESMMain+0x5bc>)
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800573e:	4618      	mov	r0, r3
 8005740:	f00a fc28 	bl	800ff94 <osMutexAcquire>
				strncpy(GlobalState.surveyState.screenText, "  EMOTION?", strlen("  EMOTION?") + 1);
 8005744:	4a70      	ldr	r2, [pc, #448]	; (8005908 <startESMMain+0x5c0>)
 8005746:	4b73      	ldr	r3, [pc, #460]	; (8005914 <startESMMain+0x5cc>)
 8005748:	cb03      	ldmia	r3!, {r0, r1}
 800574a:	6010      	str	r0, [r2, #0]
 800574c:	6051      	str	r1, [r2, #4]
 800574e:	8819      	ldrh	r1, [r3, #0]
 8005750:	789b      	ldrb	r3, [r3, #2]
 8005752:	8111      	strh	r1, [r2, #8]
 8005754:	7293      	strb	r3, [r2, #10]
				GlobalState.surveyState.screenTextLength = strlen("  EMOTION?");
 8005756:	4b6a      	ldr	r3, [pc, #424]	; (8005900 <startESMMain+0x5b8>)
 8005758:	220a      	movs	r2, #10
 800575a:	f883 20c9 	strb.w	r2, [r3, #201]	; 0xc9
				GlobalState.surveyState.surveyID = SURVEY_VALENCE;
 800575e:	4b68      	ldr	r3, [pc, #416]	; (8005900 <startESMMain+0x5b8>)
 8005760:	2203      	movs	r2, #3
 8005762:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
				memcpy(GlobalState.surveyState.optionArray, opts_valence, sizeof(opts_valence));
 8005766:	4b66      	ldr	r3, [pc, #408]	; (8005900 <startESMMain+0x5b8>)
 8005768:	4a6b      	ldr	r2, [pc, #428]	; (8005918 <startESMMain+0x5d0>)
 800576a:	f103 04cc 	add.w	r4, r3, #204	; 0xcc
 800576e:	4615      	mov	r5, r2
 8005770:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005772:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005774:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005776:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005778:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800577c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
				GlobalState.surveyState.optionArrayLength = 5;
 8005780:	4b5f      	ldr	r3, [pc, #380]	; (8005900 <startESMMain+0x5b8>)
 8005782:	2205      	movs	r2, #5
 8005784:	f883 20e8 	strb.w	r2, [r3, #232]	; 0xe8
				osMutexRelease(surveyMutexHandle);
 8005788:	4b5e      	ldr	r3, [pc, #376]	; (8005904 <startESMMain+0x5bc>)
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	4618      	mov	r0, r3
 800578e:	f00a fc5f 	bl	8010050 <osMutexRelease>
 8005792:	e012      	b.n	80057ba <startESMMain+0x472>

			} else {//timed out due to inactivity
				continue_flag = 0;
 8005794:	2300      	movs	r3, #0
 8005796:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

				osMutexAcquire(modeMutexHandle, portMAX_DELAY);
 800579a:	4b58      	ldr	r3, [pc, #352]	; (80058fc <startESMMain+0x5b4>)
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80057a2:	4618      	mov	r0, r3
 80057a4:	f00a fbf6 	bl	800ff94 <osMutexAcquire>
				GlobalState.programMode = MODE_CLEAR;
 80057a8:	4b55      	ldr	r3, [pc, #340]	; (8005900 <startESMMain+0x5b8>)
 80057aa:	2207      	movs	r2, #7
 80057ac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
				osMutexRelease(modeMutexHandle);
 80057b0:	4b52      	ldr	r3, [pc, #328]	; (80058fc <startESMMain+0x5b4>)
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	4618      	mov	r0, r3
 80057b6:	f00a fc4b 	bl	8010050 <osMutexRelease>
			}
		}

		//FIFTH SCREEN FOR ESM - COG LOAD
		if (continue_flag){
 80057ba:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d00d      	beq.n	80057de <startESMMain+0x496>
			//(2) Wait for notification from UI thread that indicates confirmed input
			notification = ulTaskNotifyTake( pdTRUE, pdMS_TO_TICKS(INTERACTION_TIMEOUT));
 80057c2:	f64a 71c8 	movw	r1, #45000	; 0xafc8
 80057c6:	2001      	movs	r0, #1
 80057c8:	f00d fcfe 	bl	80131c8 <ulTaskNotifyTake>
 80057cc:	6478      	str	r0, [r7, #68]	; 0x44

			if (GlobalState.programMode != MODE_ESM_SURVEY){
 80057ce:	4b4c      	ldr	r3, [pc, #304]	; (8005900 <startESMMain+0x5b8>)
 80057d0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80057d4:	2b03      	cmp	r3, #3
 80057d6:	d002      	beq.n	80057de <startESMMain+0x496>
				//if our mode has changed, we had a dismiss/snooze event
				continue_flag = 0;
 80057d8:	2300      	movs	r3, #0
 80057da:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			}
		}

		if (continue_flag){
 80057de:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d044      	beq.n	8005870 <startESMMain+0x528>
			if (notification){//not timed out, had a confirmed event
 80057e6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d02e      	beq.n	800584a <startESMMain+0x502>
				//set up next interaction
				//set up survey
				osMutexAcquire(surveyMutexHandle, portMAX_DELAY);
 80057ec:	4b45      	ldr	r3, [pc, #276]	; (8005904 <startESMMain+0x5bc>)
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80057f4:	4618      	mov	r0, r3
 80057f6:	f00a fbcd 	bl	800ff94 <osMutexAcquire>
				strncpy(GlobalState.surveyState.screenText, "COG. EFFORT?", strlen("COG. EFFORT?") + 1);
 80057fa:	4a43      	ldr	r2, [pc, #268]	; (8005908 <startESMMain+0x5c0>)
 80057fc:	4b47      	ldr	r3, [pc, #284]	; (800591c <startESMMain+0x5d4>)
 80057fe:	4614      	mov	r4, r2
 8005800:	cb07      	ldmia	r3!, {r0, r1, r2}
 8005802:	6020      	str	r0, [r4, #0]
 8005804:	6061      	str	r1, [r4, #4]
 8005806:	60a2      	str	r2, [r4, #8]
 8005808:	781b      	ldrb	r3, [r3, #0]
 800580a:	7323      	strb	r3, [r4, #12]
				GlobalState.surveyState.screenTextLength = strlen("COG. EFFORT?");
 800580c:	4b3c      	ldr	r3, [pc, #240]	; (8005900 <startESMMain+0x5b8>)
 800580e:	220c      	movs	r2, #12
 8005810:	f883 20c9 	strb.w	r2, [r3, #201]	; 0xc9
				GlobalState.surveyState.surveyID = SURVEY_COGLOAD;
 8005814:	4b3a      	ldr	r3, [pc, #232]	; (8005900 <startESMMain+0x5b8>)
 8005816:	2204      	movs	r2, #4
 8005818:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
				memcpy(GlobalState.surveyState.optionArray, opts_arousal, sizeof(opts_arousal));
 800581c:	4b38      	ldr	r3, [pc, #224]	; (8005900 <startESMMain+0x5b8>)
 800581e:	4a3c      	ldr	r2, [pc, #240]	; (8005910 <startESMMain+0x5c8>)
 8005820:	f103 04cc 	add.w	r4, r3, #204	; 0xcc
 8005824:	4615      	mov	r5, r2
 8005826:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005828:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800582a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800582c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800582e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8005832:	e884 0007 	stmia.w	r4, {r0, r1, r2}
				GlobalState.surveyState.optionArrayLength = 5;
 8005836:	4b32      	ldr	r3, [pc, #200]	; (8005900 <startESMMain+0x5b8>)
 8005838:	2205      	movs	r2, #5
 800583a:	f883 20e8 	strb.w	r2, [r3, #232]	; 0xe8
				osMutexRelease(surveyMutexHandle);
 800583e:	4b31      	ldr	r3, [pc, #196]	; (8005904 <startESMMain+0x5bc>)
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	4618      	mov	r0, r3
 8005844:	f00a fc04 	bl	8010050 <osMutexRelease>
 8005848:	e012      	b.n	8005870 <startESMMain+0x528>

			} else {//timed out due to inactivity
				continue_flag = 0;
 800584a:	2300      	movs	r3, #0
 800584c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

				osMutexAcquire(modeMutexHandle, portMAX_DELAY);
 8005850:	4b2a      	ldr	r3, [pc, #168]	; (80058fc <startESMMain+0x5b4>)
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8005858:	4618      	mov	r0, r3
 800585a:	f00a fb9b 	bl	800ff94 <osMutexAcquire>
				GlobalState.programMode = MODE_CLEAR;
 800585e:	4b28      	ldr	r3, [pc, #160]	; (8005900 <startESMMain+0x5b8>)
 8005860:	2207      	movs	r2, #7
 8005862:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
				osMutexRelease(modeMutexHandle);
 8005866:	4b25      	ldr	r3, [pc, #148]	; (80058fc <startESMMain+0x5b4>)
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	4618      	mov	r0, r3
 800586c:	f00a fbf0 	bl	8010050 <osMutexRelease>
			}
		}

		//SIXTH SCREEN FOR ESM - STRESS
		if (continue_flag){
 8005870:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8005874:	2b00      	cmp	r3, #0
 8005876:	d00d      	beq.n	8005894 <startESMMain+0x54c>
			//(2) Wait for notification from UI thread that indicates confirmed input
			notification = ulTaskNotifyTake( pdTRUE, pdMS_TO_TICKS(INTERACTION_TIMEOUT));
 8005878:	f64a 71c8 	movw	r1, #45000	; 0xafc8
 800587c:	2001      	movs	r0, #1
 800587e:	f00d fca3 	bl	80131c8 <ulTaskNotifyTake>
 8005882:	6478      	str	r0, [r7, #68]	; 0x44

			if (GlobalState.programMode != MODE_ESM_SURVEY){
 8005884:	4b1e      	ldr	r3, [pc, #120]	; (8005900 <startESMMain+0x5b8>)
 8005886:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800588a:	2b03      	cmp	r3, #3
 800588c:	d002      	beq.n	8005894 <startESMMain+0x54c>
				//if our mode has changed, we had a dismiss/snooze event
				continue_flag = 0;
 800588e:	2300      	movs	r3, #0
 8005890:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			}
		}

		if (continue_flag){
 8005894:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8005898:	2b00      	cmp	r3, #0
 800589a:	d056      	beq.n	800594a <startESMMain+0x602>
			if (notification){//not timed out, had a confirmed event
 800589c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d040      	beq.n	8005924 <startESMMain+0x5dc>
				//set up next interaction
				//set up survey
				osMutexAcquire(surveyMutexHandle, portMAX_DELAY);
 80058a2:	4b18      	ldr	r3, [pc, #96]	; (8005904 <startESMMain+0x5bc>)
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80058aa:	4618      	mov	r0, r3
 80058ac:	f00a fb72 	bl	800ff94 <osMutexAcquire>
				strncpy(GlobalState.surveyState.screenText, "  STRESS?", strlen("  STRESS?") + 1);
 80058b0:	4a15      	ldr	r2, [pc, #84]	; (8005908 <startESMMain+0x5c0>)
 80058b2:	4b1b      	ldr	r3, [pc, #108]	; (8005920 <startESMMain+0x5d8>)
 80058b4:	cb03      	ldmia	r3!, {r0, r1}
 80058b6:	6010      	str	r0, [r2, #0]
 80058b8:	6051      	str	r1, [r2, #4]
 80058ba:	881b      	ldrh	r3, [r3, #0]
 80058bc:	8113      	strh	r3, [r2, #8]
				GlobalState.surveyState.screenTextLength = strlen("  STRESS?");
 80058be:	4b10      	ldr	r3, [pc, #64]	; (8005900 <startESMMain+0x5b8>)
 80058c0:	2209      	movs	r2, #9
 80058c2:	f883 20c9 	strb.w	r2, [r3, #201]	; 0xc9
				GlobalState.surveyState.surveyID = SURVEY_STRESS;
 80058c6:	4b0e      	ldr	r3, [pc, #56]	; (8005900 <startESMMain+0x5b8>)
 80058c8:	2208      	movs	r2, #8
 80058ca:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
				memcpy(GlobalState.surveyState.optionArray, opts_arousal, sizeof(opts_arousal));
 80058ce:	4b0c      	ldr	r3, [pc, #48]	; (8005900 <startESMMain+0x5b8>)
 80058d0:	4a0f      	ldr	r2, [pc, #60]	; (8005910 <startESMMain+0x5c8>)
 80058d2:	f103 04cc 	add.w	r4, r3, #204	; 0xcc
 80058d6:	4615      	mov	r5, r2
 80058d8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80058da:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80058dc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80058de:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80058e0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80058e4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
				GlobalState.surveyState.optionArrayLength = 5;
 80058e8:	4b05      	ldr	r3, [pc, #20]	; (8005900 <startESMMain+0x5b8>)
 80058ea:	2205      	movs	r2, #5
 80058ec:	f883 20e8 	strb.w	r2, [r3, #232]	; 0xe8
				osMutexRelease(surveyMutexHandle);
 80058f0:	4b04      	ldr	r3, [pc, #16]	; (8005904 <startESMMain+0x5bc>)
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	4618      	mov	r0, r3
 80058f6:	f00a fbab 	bl	8010050 <osMutexRelease>
 80058fa:	e026      	b.n	800594a <startESMMain+0x602>
 80058fc:	2002e250 	.word	0x2002e250
 8005900:	2002e0cc 	.word	0x2002e0cc
 8005904:	2002e248 	.word	0x2002e248
 8005908:	2002e115 	.word	0x2002e115
 800590c:	08018980 	.word	0x08018980
 8005910:	08019998 	.word	0x08019998
 8005914:	0801898c 	.word	0x0801898c
 8005918:	0801996c 	.word	0x0801996c
 800591c:	08018998 	.word	0x08018998
 8005920:	080189a8 	.word	0x080189a8

			} else {//timed out due to inactivity
				continue_flag = 0;
 8005924:	2300      	movs	r3, #0
 8005926:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

				osMutexAcquire(modeMutexHandle, portMAX_DELAY);
 800592a:	4baf      	ldr	r3, [pc, #700]	; (8005be8 <startESMMain+0x8a0>)
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8005932:	4618      	mov	r0, r3
 8005934:	f00a fb2e 	bl	800ff94 <osMutexAcquire>
				GlobalState.programMode = MODE_CLEAR;
 8005938:	4bac      	ldr	r3, [pc, #688]	; (8005bec <startESMMain+0x8a4>)
 800593a:	2207      	movs	r2, #7
 800593c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
				osMutexRelease(modeMutexHandle);
 8005940:	4ba9      	ldr	r3, [pc, #676]	; (8005be8 <startESMMain+0x8a0>)
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	4618      	mov	r0, r3
 8005946:	f00a fb83 	bl	8010050 <osMutexRelease>
			}
		}

		//SEVENTH SCREEN FOR ESM - CAFFEINE
		if (continue_flag){
 800594a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800594e:	2b00      	cmp	r3, #0
 8005950:	d00d      	beq.n	800596e <startESMMain+0x626>
			//(2) Wait for notification from UI thread that indicates confirmed input
			notification = ulTaskNotifyTake( pdTRUE, pdMS_TO_TICKS(INTERACTION_TIMEOUT));
 8005952:	f64a 71c8 	movw	r1, #45000	; 0xafc8
 8005956:	2001      	movs	r0, #1
 8005958:	f00d fc36 	bl	80131c8 <ulTaskNotifyTake>
 800595c:	6478      	str	r0, [r7, #68]	; 0x44

			if (GlobalState.programMode != MODE_ESM_SURVEY){
 800595e:	4ba3      	ldr	r3, [pc, #652]	; (8005bec <startESMMain+0x8a4>)
 8005960:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005964:	2b03      	cmp	r3, #3
 8005966:	d002      	beq.n	800596e <startESMMain+0x626>
				//if our mode has changed, we had a dismiss/snooze event
				continue_flag = 0;
 8005968:	2300      	movs	r3, #0
 800596a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			}
		}

		if (continue_flag){
 800596e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8005972:	2b00      	cmp	r3, #0
 8005974:	d044      	beq.n	8005a00 <startESMMain+0x6b8>
			if (notification){//not timed out, had a confirmed event
 8005976:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005978:	2b00      	cmp	r3, #0
 800597a:	d02e      	beq.n	80059da <startESMMain+0x692>
				//set up next interaction
				//set up survey
				osMutexAcquire(surveyMutexHandle, portMAX_DELAY);
 800597c:	4b9c      	ldr	r3, [pc, #624]	; (8005bf0 <startESMMain+0x8a8>)
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8005984:	4618      	mov	r0, r3
 8005986:	f00a fb05 	bl	800ff94 <osMutexAcquire>
				strncpy(GlobalState.surveyState.screenText, " CAFFEINE?", strlen(" CAFFEINE?") + 1);
 800598a:	4a9a      	ldr	r2, [pc, #616]	; (8005bf4 <startESMMain+0x8ac>)
 800598c:	4b9a      	ldr	r3, [pc, #616]	; (8005bf8 <startESMMain+0x8b0>)
 800598e:	cb03      	ldmia	r3!, {r0, r1}
 8005990:	6010      	str	r0, [r2, #0]
 8005992:	6051      	str	r1, [r2, #4]
 8005994:	8819      	ldrh	r1, [r3, #0]
 8005996:	789b      	ldrb	r3, [r3, #2]
 8005998:	8111      	strh	r1, [r2, #8]
 800599a:	7293      	strb	r3, [r2, #10]
				GlobalState.surveyState.screenTextLength = strlen(" CAFFEINE?");
 800599c:	4b93      	ldr	r3, [pc, #588]	; (8005bec <startESMMain+0x8a4>)
 800599e:	220a      	movs	r2, #10
 80059a0:	f883 20c9 	strb.w	r2, [r3, #201]	; 0xc9
				GlobalState.surveyState.surveyID = SURVEY_CAFFEINE;
 80059a4:	4b91      	ldr	r3, [pc, #580]	; (8005bec <startESMMain+0x8a4>)
 80059a6:	2206      	movs	r2, #6
 80059a8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
				memcpy(GlobalState.surveyState.optionArray, opts_yes, sizeof(opts_yes));
 80059ac:	4b8f      	ldr	r3, [pc, #572]	; (8005bec <startESMMain+0x8a4>)
 80059ae:	4a93      	ldr	r2, [pc, #588]	; (8005bfc <startESMMain+0x8b4>)
 80059b0:	f103 04cc 	add.w	r4, r3, #204	; 0xcc
 80059b4:	4615      	mov	r5, r2
 80059b6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80059b8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80059ba:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80059bc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80059be:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80059c2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
				GlobalState.surveyState.optionArrayLength = 2;
 80059c6:	4b89      	ldr	r3, [pc, #548]	; (8005bec <startESMMain+0x8a4>)
 80059c8:	2202      	movs	r2, #2
 80059ca:	f883 20e8 	strb.w	r2, [r3, #232]	; 0xe8
				osMutexRelease(surveyMutexHandle);
 80059ce:	4b88      	ldr	r3, [pc, #544]	; (8005bf0 <startESMMain+0x8a8>)
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	4618      	mov	r0, r3
 80059d4:	f00a fb3c 	bl	8010050 <osMutexRelease>
 80059d8:	e012      	b.n	8005a00 <startESMMain+0x6b8>

			} else {//timed out due to inactivity
				continue_flag = 0;
 80059da:	2300      	movs	r3, #0
 80059dc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

				osMutexAcquire(modeMutexHandle, portMAX_DELAY);
 80059e0:	4b81      	ldr	r3, [pc, #516]	; (8005be8 <startESMMain+0x8a0>)
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80059e8:	4618      	mov	r0, r3
 80059ea:	f00a fad3 	bl	800ff94 <osMutexAcquire>
				GlobalState.programMode = MODE_CLEAR;
 80059ee:	4b7f      	ldr	r3, [pc, #508]	; (8005bec <startESMMain+0x8a4>)
 80059f0:	2207      	movs	r2, #7
 80059f2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
				osMutexRelease(modeMutexHandle);
 80059f6:	4b7c      	ldr	r3, [pc, #496]	; (8005be8 <startESMMain+0x8a0>)
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	4618      	mov	r0, r3
 80059fc:	f00a fb28 	bl	8010050 <osMutexRelease>
				osMutexRelease(modeMutexHandle);
			}
		}
		*/
		//ELEVENTH SCREEN FOR ESM - THERMAL SENSATION
		if (continue_flag){
 8005a00:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d00d      	beq.n	8005a24 <startESMMain+0x6dc>
			//(2) Wait for notification from UI thread that indicates confirmed input
			notification = ulTaskNotifyTake( pdTRUE, pdMS_TO_TICKS(INTERACTION_TIMEOUT));
 8005a08:	f64a 71c8 	movw	r1, #45000	; 0xafc8
 8005a0c:	2001      	movs	r0, #1
 8005a0e:	f00d fbdb 	bl	80131c8 <ulTaskNotifyTake>
 8005a12:	6478      	str	r0, [r7, #68]	; 0x44

			if (GlobalState.programMode != MODE_ESM_SURVEY){
 8005a14:	4b75      	ldr	r3, [pc, #468]	; (8005bec <startESMMain+0x8a4>)
 8005a16:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005a1a:	2b03      	cmp	r3, #3
 8005a1c:	d002      	beq.n	8005a24 <startESMMain+0x6dc>
				//if our mode has changed, we had a dismiss/snooze event
				continue_flag = 0;
 8005a1e:	2300      	movs	r3, #0
 8005a20:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			}
		}

		if (continue_flag){
 8005a24:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d042      	beq.n	8005ab2 <startESMMain+0x76a>
			if (notification){//not timed out, had a confirmed event
 8005a2c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d02c      	beq.n	8005a8c <startESMMain+0x744>
				//set up next interaction
				//set up survey
				osMutexAcquire(surveyMutexHandle, portMAX_DELAY);
 8005a32:	4b6f      	ldr	r3, [pc, #444]	; (8005bf0 <startESMMain+0x8a8>)
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8005a3a:	4618      	mov	r0, r3
 8005a3c:	f00a faaa 	bl	800ff94 <osMutexAcquire>
				strncpy(GlobalState.surveyState.screenText, " SENSATION?", strlen(" SENSATION?") + 1);
 8005a40:	4a6c      	ldr	r2, [pc, #432]	; (8005bf4 <startESMMain+0x8ac>)
 8005a42:	4b6f      	ldr	r3, [pc, #444]	; (8005c00 <startESMMain+0x8b8>)
 8005a44:	4614      	mov	r4, r2
 8005a46:	cb07      	ldmia	r3!, {r0, r1, r2}
 8005a48:	6020      	str	r0, [r4, #0]
 8005a4a:	6061      	str	r1, [r4, #4]
 8005a4c:	60a2      	str	r2, [r4, #8]
				GlobalState.surveyState.screenTextLength = strlen(" SENSATION?");
 8005a4e:	4b67      	ldr	r3, [pc, #412]	; (8005bec <startESMMain+0x8a4>)
 8005a50:	220b      	movs	r2, #11
 8005a52:	f883 20c9 	strb.w	r2, [r3, #201]	; 0xc9
				GlobalState.surveyState.surveyID = SURVEY_TSENSE;
 8005a56:	4b65      	ldr	r3, [pc, #404]	; (8005bec <startESMMain+0x8a4>)
 8005a58:	220a      	movs	r2, #10
 8005a5a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
				memcpy(GlobalState.surveyState.optionArray, opts_thermalsense, sizeof(opts_thermalsense));
 8005a5e:	4b63      	ldr	r3, [pc, #396]	; (8005bec <startESMMain+0x8a4>)
 8005a60:	4a68      	ldr	r2, [pc, #416]	; (8005c04 <startESMMain+0x8bc>)
 8005a62:	f103 04cc 	add.w	r4, r3, #204	; 0xcc
 8005a66:	4615      	mov	r5, r2
 8005a68:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005a6a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005a6c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005a6e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005a70:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8005a74:	e884 0007 	stmia.w	r4, {r0, r1, r2}
				GlobalState.surveyState.optionArrayLength = 7;
 8005a78:	4b5c      	ldr	r3, [pc, #368]	; (8005bec <startESMMain+0x8a4>)
 8005a7a:	2207      	movs	r2, #7
 8005a7c:	f883 20e8 	strb.w	r2, [r3, #232]	; 0xe8
				osMutexRelease(surveyMutexHandle);
 8005a80:	4b5b      	ldr	r3, [pc, #364]	; (8005bf0 <startESMMain+0x8a8>)
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	4618      	mov	r0, r3
 8005a86:	f00a fae3 	bl	8010050 <osMutexRelease>
 8005a8a:	e012      	b.n	8005ab2 <startESMMain+0x76a>

			} else {//timed out due to inactivity
				continue_flag = 0;
 8005a8c:	2300      	movs	r3, #0
 8005a8e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

				osMutexAcquire(modeMutexHandle, portMAX_DELAY);
 8005a92:	4b55      	ldr	r3, [pc, #340]	; (8005be8 <startESMMain+0x8a0>)
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8005a9a:	4618      	mov	r0, r3
 8005a9c:	f00a fa7a 	bl	800ff94 <osMutexAcquire>
				GlobalState.programMode = MODE_CLEAR;
 8005aa0:	4b52      	ldr	r3, [pc, #328]	; (8005bec <startESMMain+0x8a4>)
 8005aa2:	2207      	movs	r2, #7
 8005aa4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
				osMutexRelease(modeMutexHandle);
 8005aa8:	4b4f      	ldr	r3, [pc, #316]	; (8005be8 <startESMMain+0x8a0>)
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	4618      	mov	r0, r3
 8005aae:	f00a facf 	bl	8010050 <osMutexRelease>
			}
		}

		//TWELFTH SCREEN FOR ESM - THERMAL PREF
		if (continue_flag){
 8005ab2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d00d      	beq.n	8005ad6 <startESMMain+0x78e>
			//(2) Wait for notification from UI thread that indicates confirmed input
			notification = ulTaskNotifyTake( pdTRUE, pdMS_TO_TICKS(INTERACTION_TIMEOUT));
 8005aba:	f64a 71c8 	movw	r1, #45000	; 0xafc8
 8005abe:	2001      	movs	r0, #1
 8005ac0:	f00d fb82 	bl	80131c8 <ulTaskNotifyTake>
 8005ac4:	6478      	str	r0, [r7, #68]	; 0x44

			if (GlobalState.programMode != MODE_ESM_SURVEY){
 8005ac6:	4b49      	ldr	r3, [pc, #292]	; (8005bec <startESMMain+0x8a4>)
 8005ac8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005acc:	2b03      	cmp	r3, #3
 8005ace:	d002      	beq.n	8005ad6 <startESMMain+0x78e>
				//if our mode has changed, we had a dismiss/snooze event
				continue_flag = 0;
 8005ad0:	2300      	movs	r3, #0
 8005ad2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			}
		}

		if (continue_flag){
 8005ad6:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d044      	beq.n	8005b68 <startESMMain+0x820>
			if (notification){//not timed out, had a confirmed event
 8005ade:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d02e      	beq.n	8005b42 <startESMMain+0x7fa>
				//set up next interaction
				//set up survey
				osMutexAcquire(surveyMutexHandle, portMAX_DELAY);
 8005ae4:	4b42      	ldr	r3, [pc, #264]	; (8005bf0 <startESMMain+0x8a8>)
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8005aec:	4618      	mov	r0, r3
 8005aee:	f00a fa51 	bl	800ff94 <osMutexAcquire>
				strncpy(GlobalState.surveyState.screenText, "TEMP PREFER?", strlen("TEMP PREFER?") + 1);
 8005af2:	4a40      	ldr	r2, [pc, #256]	; (8005bf4 <startESMMain+0x8ac>)
 8005af4:	4b44      	ldr	r3, [pc, #272]	; (8005c08 <startESMMain+0x8c0>)
 8005af6:	4614      	mov	r4, r2
 8005af8:	cb07      	ldmia	r3!, {r0, r1, r2}
 8005afa:	6020      	str	r0, [r4, #0]
 8005afc:	6061      	str	r1, [r4, #4]
 8005afe:	60a2      	str	r2, [r4, #8]
 8005b00:	781b      	ldrb	r3, [r3, #0]
 8005b02:	7323      	strb	r3, [r4, #12]
				GlobalState.surveyState.screenTextLength = strlen("TEMP PREFER?");
 8005b04:	4b39      	ldr	r3, [pc, #228]	; (8005bec <startESMMain+0x8a4>)
 8005b06:	220c      	movs	r2, #12
 8005b08:	f883 20c9 	strb.w	r2, [r3, #201]	; 0xc9
				GlobalState.surveyState.surveyID = SURVEY_TCOMFORT;
 8005b0c:	4b37      	ldr	r3, [pc, #220]	; (8005bec <startESMMain+0x8a4>)
 8005b0e:	220b      	movs	r2, #11
 8005b10:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
				memcpy(GlobalState.surveyState.optionArray, opts_thermalcomfort, sizeof(opts_thermalcomfort));
 8005b14:	4b35      	ldr	r3, [pc, #212]	; (8005bec <startESMMain+0x8a4>)
 8005b16:	4a3d      	ldr	r2, [pc, #244]	; (8005c0c <startESMMain+0x8c4>)
 8005b18:	f103 04cc 	add.w	r4, r3, #204	; 0xcc
 8005b1c:	4615      	mov	r5, r2
 8005b1e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005b20:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005b22:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005b24:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005b26:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8005b2a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
				GlobalState.surveyState.optionArrayLength = 3;
 8005b2e:	4b2f      	ldr	r3, [pc, #188]	; (8005bec <startESMMain+0x8a4>)
 8005b30:	2203      	movs	r2, #3
 8005b32:	f883 20e8 	strb.w	r2, [r3, #232]	; 0xe8
				osMutexRelease(surveyMutexHandle);
 8005b36:	4b2e      	ldr	r3, [pc, #184]	; (8005bf0 <startESMMain+0x8a8>)
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	4618      	mov	r0, r3
 8005b3c:	f00a fa88 	bl	8010050 <osMutexRelease>
 8005b40:	e012      	b.n	8005b68 <startESMMain+0x820>

			} else {//timed out due to inactivity
				continue_flag = 0;
 8005b42:	2300      	movs	r3, #0
 8005b44:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

				osMutexAcquire(modeMutexHandle, portMAX_DELAY);
 8005b48:	4b27      	ldr	r3, [pc, #156]	; (8005be8 <startESMMain+0x8a0>)
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8005b50:	4618      	mov	r0, r3
 8005b52:	f00a fa1f 	bl	800ff94 <osMutexAcquire>
				GlobalState.programMode = MODE_CLEAR;
 8005b56:	4b25      	ldr	r3, [pc, #148]	; (8005bec <startESMMain+0x8a4>)
 8005b58:	2207      	movs	r2, #7
 8005b5a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
				osMutexRelease(modeMutexHandle);
 8005b5e:	4b22      	ldr	r3, [pc, #136]	; (8005be8 <startESMMain+0x8a0>)
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	4618      	mov	r0, r3
 8005b64:	f00a fa74 	bl	8010050 <osMutexRelease>
			}
		}

		//FINISH ESM; SHOW TIME
		if (continue_flag){
 8005b68:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d00d      	beq.n	8005b8c <startESMMain+0x844>
			//(2) Wait for notification from UI thread that indicates confirmed input
			notification = ulTaskNotifyTake( pdTRUE, pdMS_TO_TICKS(INTERACTION_TIMEOUT));
 8005b70:	f64a 71c8 	movw	r1, #45000	; 0xafc8
 8005b74:	2001      	movs	r0, #1
 8005b76:	f00d fb27 	bl	80131c8 <ulTaskNotifyTake>
 8005b7a:	6478      	str	r0, [r7, #68]	; 0x44

			if (GlobalState.programMode != MODE_ESM_SURVEY){
 8005b7c:	4b1b      	ldr	r3, [pc, #108]	; (8005bec <startESMMain+0x8a4>)
 8005b7e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005b82:	2b03      	cmp	r3, #3
 8005b84:	d002      	beq.n	8005b8c <startESMMain+0x844>
				//if our mode has changed, we had a dismiss/snooze event
				continue_flag = 0;
 8005b86:	2300      	movs	r3, #0
 8005b88:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			}
		}

		if (continue_flag){
 8005b8c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d026      	beq.n	8005be2 <startESMMain+0x89a>
			if (notification){//not timed out, had a confirmed event
 8005b94:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d010      	beq.n	8005bbc <startESMMain+0x874>
				//completed survey with no problem!

				//back to rest, show time
				osMutexAcquire(modeMutexHandle, portMAX_DELAY);
 8005b9a:	4b13      	ldr	r3, [pc, #76]	; (8005be8 <startESMMain+0x8a0>)
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8005ba2:	4618      	mov	r0, r3
 8005ba4:	f00a f9f6 	bl	800ff94 <osMutexAcquire>
				GlobalState.programMode = MODE_SHOW_TIME;
 8005ba8:	4b10      	ldr	r3, [pc, #64]	; (8005bec <startESMMain+0x8a4>)
 8005baa:	2205      	movs	r2, #5
 8005bac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
				osMutexRelease(modeMutexHandle);;
 8005bb0:	4b0d      	ldr	r3, [pc, #52]	; (8005be8 <startESMMain+0x8a0>)
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	4618      	mov	r0, r3
 8005bb6:	f00a fa4b 	bl	8010050 <osMutexRelease>
 8005bba:	e012      	b.n	8005be2 <startESMMain+0x89a>

			} else {//timed out due to inactivity
				continue_flag = 0;
 8005bbc:	2300      	movs	r3, #0
 8005bbe:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

				osMutexAcquire(modeMutexHandle, portMAX_DELAY);
 8005bc2:	4b09      	ldr	r3, [pc, #36]	; (8005be8 <startESMMain+0x8a0>)
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8005bca:	4618      	mov	r0, r3
 8005bcc:	f00a f9e2 	bl	800ff94 <osMutexAcquire>
				GlobalState.programMode = MODE_CLEAR;
 8005bd0:	4b06      	ldr	r3, [pc, #24]	; (8005bec <startESMMain+0x8a4>)
 8005bd2:	2207      	movs	r2, #7
 8005bd4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
				osMutexRelease(modeMutexHandle);
 8005bd8:	4b03      	ldr	r3, [pc, #12]	; (8005be8 <startESMMain+0x8a0>)
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	4618      	mov	r0, r3
 8005bde:	f00a fa37 	bl	8010050 <osMutexRelease>
			}
		}

		updateLastSurveyTime();
 8005be2:	f7fe fe0f 	bl	8004804 <updateLastSurveyTime>
		(sameDayFlag | (curr_date > last_date )) ){
 8005be6:	e060      	b.n	8005caa <startESMMain+0x962>
 8005be8:	2002e250 	.word	0x2002e250
 8005bec:	2002e0cc 	.word	0x2002e0cc
 8005bf0:	2002e248 	.word	0x2002e248
 8005bf4:	2002e115 	.word	0x2002e115
 8005bf8:	080189b4 	.word	0x080189b4
 8005bfc:	080199c4 	.word	0x080199c4
 8005c00:	080189c0 	.word	0x080189c0
 8005c04:	080199f0 	.word	0x080199f0
 8005c08:	080189cc 	.word	0x080189cc
 8005c0c:	08019a1c 	.word	0x08019a1c

    } else {//not time for a survey

    	//get hour for last_seen + interval (trigger) time
    	uint8_t extra_hours = (last_min + GlobalState.currentInterval) / 60;
 8005c10:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8005c14:	4a26      	ldr	r2, [pc, #152]	; (8005cb0 <startESMMain+0x968>)
 8005c16:	f892 20ec 	ldrb.w	r2, [r2, #236]	; 0xec
 8005c1a:	4413      	add	r3, r2
 8005c1c:	4a25      	ldr	r2, [pc, #148]	; (8005cb4 <startESMMain+0x96c>)
 8005c1e:	fb82 1203 	smull	r1, r2, r2, r3
 8005c22:	441a      	add	r2, r3
 8005c24:	1152      	asrs	r2, r2, #5
 8005c26:	17db      	asrs	r3, r3, #31
 8005c28:	1ad3      	subs	r3, r2, r3
 8005c2a:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
    	last_hrs = (last_hrs + extra_hours) % 24;
 8005c2e:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8005c32:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8005c36:	441a      	add	r2, r3
 8005c38:	4b1f      	ldr	r3, [pc, #124]	; (8005cb8 <startESMMain+0x970>)
 8005c3a:	fb83 1302 	smull	r1, r3, r3, r2
 8005c3e:	1099      	asrs	r1, r3, #2
 8005c40:	17d3      	asrs	r3, r2, #31
 8005c42:	1ac9      	subs	r1, r1, r3
 8005c44:	460b      	mov	r3, r1
 8005c46:	005b      	lsls	r3, r3, #1
 8005c48:	440b      	add	r3, r1
 8005c4a:	00db      	lsls	r3, r3, #3
 8005c4c:	1ad1      	subs	r1, r2, r3
 8005c4e:	460b      	mov	r3, r1
 8005c50:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

    	//if next trigger is outside of timebound (i.e. last seen time is end of the day) AND
    	//its the morning (curr_hr = startHR), put it in paused mode, wait for user to initiate.
    	if (!check_time_bounds(last_hrs) && (curr_hrs == RTC_Bcd2ToByte(GlobalState.timeBound.startHR_BCD)) && !GlobalState.paused){
 8005c54:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005c58:	4618      	mov	r0, r3
 8005c5a:	f7ff fb3f 	bl	80052dc <check_time_bounds>
 8005c5e:	4603      	mov	r3, r0
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	f47f ab7a 	bne.w	800535a <startESMMain+0x12>
 8005c66:	4b12      	ldr	r3, [pc, #72]	; (8005cb0 <startESMMain+0x968>)
 8005c68:	781b      	ldrb	r3, [r3, #0]
 8005c6a:	4618      	mov	r0, r3
 8005c6c:	f005 fc24 	bl	800b4b8 <RTC_Bcd2ToByte>
 8005c70:	4603      	mov	r3, r0
 8005c72:	461a      	mov	r2, r3
 8005c74:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8005c78:	4293      	cmp	r3, r2
 8005c7a:	f47f ab6e 	bne.w	800535a <startESMMain+0x12>
 8005c7e:	4b0c      	ldr	r3, [pc, #48]	; (8005cb0 <startESMMain+0x968>)
 8005c80:	f893 30ed 	ldrb.w	r3, [r3, #237]	; 0xed
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	f47f ab68 	bne.w	800535a <startESMMain+0x12>
    		GlobalState.paused = 1;
 8005c8a:	4b09      	ldr	r3, [pc, #36]	; (8005cb0 <startESMMain+0x968>)
 8005c8c:	2201      	movs	r2, #1
 8005c8e:	f883 20ed 	strb.w	r2, [r3, #237]	; 0xed
    		const BLETX_Queue_t bleSendPause = {TX_BEGIN_PAUSE, 0x0000};
 8005c92:	2308      	movs	r3, #8
 8005c94:	733b      	strb	r3, [r7, #12]
 8005c96:	2300      	movs	r3, #0
 8005c98:	81fb      	strh	r3, [r7, #14]
     		osMessageQueuePut(bleTXqueueHandle, &bleSendPause, 0, 0);
 8005c9a:	4b08      	ldr	r3, [pc, #32]	; (8005cbc <startESMMain+0x974>)
 8005c9c:	6818      	ldr	r0, [r3, #0]
 8005c9e:	f107 010c 	add.w	r1, r7, #12
 8005ca2:	2300      	movs	r3, #0
 8005ca4:	2200      	movs	r2, #0
 8005ca6:	f00a fc05 	bl	80104b4 <osMessageQueuePut>
  {
 8005caa:	f7ff bb56 	b.w	800535a <startESMMain+0x12>
 8005cae:	bf00      	nop
 8005cb0:	2002e0cc 	.word	0x2002e0cc
 8005cb4:	88888889 	.word	0x88888889
 8005cb8:	2aaaaaab 	.word	0x2aaaaaab
 8005cbc:	2002e2b0 	.word	0x2002e2b0

08005cc0 <startButtonPress>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_startButtonPress */
void startButtonPress(void *argument)
{
 8005cc0:	b580      	push	{r7, lr}
 8005cc2:	b086      	sub	sp, #24
 8005cc4:	af00      	add	r7, sp, #0
 8005cc6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN startButtonPress */
  /* Infinite loop */

  //Buttons are PULLED UP and drop to 0 when pressed
  uint8_t buttonState[] = {1, 1, 1};
 8005cc8:	4a60      	ldr	r2, [pc, #384]	; (8005e4c <startButtonPress+0x18c>)
 8005cca:	f107 0314 	add.w	r3, r7, #20
 8005cce:	6812      	ldr	r2, [r2, #0]
 8005cd0:	4611      	mov	r1, r2
 8005cd2:	8019      	strh	r1, [r3, #0]
 8005cd4:	3302      	adds	r3, #2
 8005cd6:	0c12      	lsrs	r2, r2, #16
 8005cd8:	701a      	strb	r2, [r3, #0]
  uint32_t callingPin = 0x00;
 8005cda:	2300      	movs	r3, #0
 8005cdc:	613b      	str	r3, [r7, #16]

  const BLETX_Queue_t bleSendData = {TX_PREVIOUS_INVALID, 0x0000};
 8005cde:	2306      	movs	r3, #6
 8005ce0:	733b      	strb	r3, [r7, #12]
 8005ce2:	2300      	movs	r3, #0
 8005ce4:	81fb      	strh	r3, [r7, #14]

  for(;;)
  {
	//wait for rising or falling edge trigger, put calling pin in callingPin
	xTaskNotifyWait(0x00, 0x00, &callingPin, portMAX_DELAY);
 8005ce6:	f107 0210 	add.w	r2, r7, #16
 8005cea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005cee:	2100      	movs	r1, #0
 8005cf0:	2000      	movs	r0, #0
 8005cf2:	f00d fab1 	bl	8013258 <xTaskNotifyWait>

	//check state of pin
	GPIO_PinState first_read = HAL_GPIO_ReadPin(GPIOB, callingPin);
 8005cf6:	693b      	ldr	r3, [r7, #16]
 8005cf8:	b29b      	uxth	r3, r3
 8005cfa:	4619      	mov	r1, r3
 8005cfc:	4854      	ldr	r0, [pc, #336]	; (8005e50 <startButtonPress+0x190>)
 8005cfe:	f002 fa71 	bl	80081e4 <HAL_GPIO_ReadPin>
 8005d02:	4603      	mov	r3, r0
 8005d04:	75fb      	strb	r3, [r7, #23]

	//wait 50ms
    osDelay(50);
 8005d06:	2032      	movs	r0, #50	; 0x32
 8005d08:	f00a f87c 	bl	800fe04 <osDelay>

    //check again (debounce) to get a good reading
	if (first_read == HAL_GPIO_ReadPin(GPIOB, callingPin)){
 8005d0c:	693b      	ldr	r3, [r7, #16]
 8005d0e:	b29b      	uxth	r3, r3
 8005d10:	4619      	mov	r1, r3
 8005d12:	484f      	ldr	r0, [pc, #316]	; (8005e50 <startButtonPress+0x190>)
 8005d14:	f002 fa66 	bl	80081e4 <HAL_GPIO_ReadPin>
 8005d18:	4603      	mov	r3, r0
 8005d1a:	461a      	mov	r2, r3
 8005d1c:	7dfb      	ldrb	r3, [r7, #23]
 8005d1e:	4293      	cmp	r3, r2
 8005d20:	d1e1      	bne.n	8005ce6 <startButtonPress+0x26>
		//when this happens (except during debouncing) so we expect this to be true
		//almost always

		//callingPin can be used as bitmask Pin 5/4/3 give 1000000/10000/1000

		if (callingPin == 0b1000 && first_read != buttonState[0]) { //button 1 trigger
 8005d22:	693b      	ldr	r3, [r7, #16]
 8005d24:	2b08      	cmp	r3, #8
 8005d26:	d128      	bne.n	8005d7a <startButtonPress+0xba>
 8005d28:	7d3b      	ldrb	r3, [r7, #20]
 8005d2a:	7dfa      	ldrb	r2, [r7, #23]
 8005d2c:	429a      	cmp	r2, r3
 8005d2e:	d024      	beq.n	8005d7a <startButtonPress+0xba>
		  //set buttonState
		  buttonState[0] = first_read;
 8005d30:	7dfb      	ldrb	r3, [r7, #23]
 8005d32:	753b      	strb	r3, [r7, #20]

		  //do stuff if button pressed
		  if (!first_read){
 8005d34:	7dfb      	ldrb	r3, [r7, #23]
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d11f      	bne.n	8005d7a <startButtonPress+0xba>
			  osMessageQueuePut(bleTXqueueHandle, &bleSendData, 0, 0);
 8005d3a:	4b46      	ldr	r3, [pc, #280]	; (8005e54 <startButtonPress+0x194>)
 8005d3c:	6818      	ldr	r0, [r3, #0]
 8005d3e:	f107 010c 	add.w	r1, r7, #12
 8005d42:	2300      	movs	r3, #0
 8005d44:	2200      	movs	r2, #0
 8005d46:	f00a fbb5 	bl	80104b4 <osMessageQueuePut>

			  GlobalState.paused = 0;
 8005d4a:	4b43      	ldr	r3, [pc, #268]	; (8005e58 <startButtonPress+0x198>)
 8005d4c:	2200      	movs	r2, #0
 8005d4e:	f883 20ed 	strb.w	r2, [r3, #237]	; 0xed
			  GlobalState.demo = 0;
 8005d52:	4b41      	ldr	r3, [pc, #260]	; (8005e58 <startButtonPress+0x198>)
 8005d54:	2200      	movs	r2, #0
 8005d56:	f883 20ee 	strb.w	r2, [r3, #238]	; 0xee

			  osMutexAcquire(modeMutexHandle, portMAX_DELAY);
 8005d5a:	4b40      	ldr	r3, [pc, #256]	; (8005e5c <startButtonPress+0x19c>)
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8005d62:	4618      	mov	r0, r3
 8005d64:	f00a f916 	bl	800ff94 <osMutexAcquire>
			  GlobalState.programMode = MODE_CANCEL;
 8005d68:	4b3b      	ldr	r3, [pc, #236]	; (8005e58 <startButtonPress+0x198>)
 8005d6a:	2204      	movs	r2, #4
 8005d6c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			  osMutexRelease(modeMutexHandle);
 8005d70:	4b3a      	ldr	r3, [pc, #232]	; (8005e5c <startButtonPress+0x19c>)
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	4618      	mov	r0, r3
 8005d76:	f00a f96b 	bl	8010050 <osMutexRelease>

		  }

		}
		if (callingPin == 0b10000 && first_read != buttonState[1]) { //button 2 trigger
 8005d7a:	693b      	ldr	r3, [r7, #16]
 8005d7c:	2b10      	cmp	r3, #16
 8005d7e:	d128      	bne.n	8005dd2 <startButtonPress+0x112>
 8005d80:	7d7b      	ldrb	r3, [r7, #21]
 8005d82:	7dfa      	ldrb	r2, [r7, #23]
 8005d84:	429a      	cmp	r2, r3
 8005d86:	d024      	beq.n	8005dd2 <startButtonPress+0x112>
		    //set buttonState
		    buttonState[1] = first_read;
 8005d88:	7dfb      	ldrb	r3, [r7, #23]
 8005d8a:	757b      	strb	r3, [r7, #21]

		    //do stuff if button pressed
		    if (!first_read){
 8005d8c:	7dfb      	ldrb	r3, [r7, #23]
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d11f      	bne.n	8005dd2 <startButtonPress+0x112>
		    	osMessageQueuePut(bleTXqueueHandle, &bleSendData, 0, 0);
 8005d92:	4b30      	ldr	r3, [pc, #192]	; (8005e54 <startButtonPress+0x194>)
 8005d94:	6818      	ldr	r0, [r3, #0]
 8005d96:	f107 010c 	add.w	r1, r7, #12
 8005d9a:	2300      	movs	r3, #0
 8005d9c:	2200      	movs	r2, #0
 8005d9e:	f00a fb89 	bl	80104b4 <osMessageQueuePut>

		    	GlobalState.paused = 0;
 8005da2:	4b2d      	ldr	r3, [pc, #180]	; (8005e58 <startButtonPress+0x198>)
 8005da4:	2200      	movs	r2, #0
 8005da6:	f883 20ed 	strb.w	r2, [r3, #237]	; 0xed
		    	GlobalState.demo = 0;
 8005daa:	4b2b      	ldr	r3, [pc, #172]	; (8005e58 <startButtonPress+0x198>)
 8005dac:	2200      	movs	r2, #0
 8005dae:	f883 20ee 	strb.w	r2, [r3, #238]	; 0xee

		    	osMutexAcquire(modeMutexHandle, portMAX_DELAY);
 8005db2:	4b2a      	ldr	r3, [pc, #168]	; (8005e5c <startButtonPress+0x19c>)
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8005dba:	4618      	mov	r0, r3
 8005dbc:	f00a f8ea 	bl	800ff94 <osMutexAcquire>
		    	GlobalState.programMode = MODE_CANCEL;
 8005dc0:	4b25      	ldr	r3, [pc, #148]	; (8005e58 <startButtonPress+0x198>)
 8005dc2:	2204      	movs	r2, #4
 8005dc4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		    	osMutexRelease(modeMutexHandle);
 8005dc8:	4b24      	ldr	r3, [pc, #144]	; (8005e5c <startButtonPress+0x19c>)
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	4618      	mov	r0, r3
 8005dce:	f00a f93f 	bl	8010050 <osMutexRelease>

		    }
		}
		if (callingPin == 0b100000 && first_read != buttonState[2]) { //button 3 trigger
 8005dd2:	693b      	ldr	r3, [r7, #16]
 8005dd4:	2b20      	cmp	r3, #32
 8005dd6:	d186      	bne.n	8005ce6 <startButtonPress+0x26>
 8005dd8:	7dbb      	ldrb	r3, [r7, #22]
 8005dda:	7dfa      	ldrb	r2, [r7, #23]
 8005ddc:	429a      	cmp	r2, r3
 8005dde:	d082      	beq.n	8005ce6 <startButtonPress+0x26>
		    //set buttonState
		    buttonState[2] = first_read;
 8005de0:	7dfb      	ldrb	r3, [r7, #23]
 8005de2:	75bb      	strb	r3, [r7, #22]

		    //do stuff if button pressed
		    if (!first_read){
 8005de4:	7dfb      	ldrb	r3, [r7, #23]
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	f47f af7d 	bne.w	8005ce6 <startButtonPress+0x26>
		    	osMessageQueuePut(bleTXqueueHandle, &bleSendData, 0, 0);
 8005dec:	4b19      	ldr	r3, [pc, #100]	; (8005e54 <startButtonPress+0x194>)
 8005dee:	6818      	ldr	r0, [r3, #0]
 8005df0:	f107 010c 	add.w	r1, r7, #12
 8005df4:	2300      	movs	r3, #0
 8005df6:	2200      	movs	r2, #0
 8005df8:	f00a fb5c 	bl	80104b4 <osMessageQueuePut>

		    	GlobalState.paused = 0;
 8005dfc:	4b16      	ldr	r3, [pc, #88]	; (8005e58 <startButtonPress+0x198>)
 8005dfe:	2200      	movs	r2, #0
 8005e00:	f883 20ed 	strb.w	r2, [r3, #237]	; 0xed
		    	GlobalState.demo = 0;
 8005e04:	4b14      	ldr	r3, [pc, #80]	; (8005e58 <startButtonPress+0x198>)
 8005e06:	2200      	movs	r2, #0
 8005e08:	f883 20ee 	strb.w	r2, [r3, #238]	; 0xee

		    	osMutexAcquire(modeMutexHandle, portMAX_DELAY);
 8005e0c:	4b13      	ldr	r3, [pc, #76]	; (8005e5c <startButtonPress+0x19c>)
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8005e14:	4618      	mov	r0, r3
 8005e16:	f00a f8bd 	bl	800ff94 <osMutexAcquire>
		    	GlobalState.programMode = MODE_CANCEL;
 8005e1a:	4b0f      	ldr	r3, [pc, #60]	; (8005e58 <startButtonPress+0x198>)
 8005e1c:	2204      	movs	r2, #4
 8005e1e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		        osMutexRelease(modeMutexHandle);
 8005e22:	4b0e      	ldr	r3, [pc, #56]	; (8005e5c <startButtonPress+0x19c>)
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	4618      	mov	r0, r3
 8005e28:	f00a f912 	bl	8010050 <osMutexRelease>

		        if (!buttonState[0]){
 8005e2c:	7d3b      	ldrb	r3, [r7, #20]
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	f47f af59 	bne.w	8005ce6 <startButtonPress+0x26>
		        	//if the first button is pressed AND we've pressed this button, demo mode
		        	GlobalState.demo = 1;
 8005e34:	4b08      	ldr	r3, [pc, #32]	; (8005e58 <startButtonPress+0x198>)
 8005e36:	2201      	movs	r2, #1
 8005e38:	f883 20ee 	strb.w	r2, [r3, #238]	; 0xee
		        	xTaskNotifyGive(alertHandle);
 8005e3c:	4b08      	ldr	r3, [pc, #32]	; (8005e60 <startButtonPress+0x1a0>)
 8005e3e:	6818      	ldr	r0, [r3, #0]
 8005e40:	2300      	movs	r3, #0
 8005e42:	2202      	movs	r2, #2
 8005e44:	2100      	movs	r1, #0
 8005e46:	f00d fa61 	bl	801330c <xTaskGenericNotify>
  {
 8005e4a:	e74c      	b.n	8005ce6 <startButtonPress+0x26>
 8005e4c:	080189dc 	.word	0x080189dc
 8005e50:	48000400 	.word	0x48000400
 8005e54:	2002e2b0 	.word	0x2002e2b0
 8005e58:	2002e0cc 	.word	0x2002e0cc
 8005e5c:	2002e250 	.word	0x2002e250
 8005e60:	2002e1f0 	.word	0x2002e1f0

08005e64 <startAlert>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_startAlert */
void startAlert(void *argument)
{
 8005e64:	b580      	push	{r7, lr}
 8005e66:	b08c      	sub	sp, #48	; 0x30
 8005e68:	af00      	add	r7, sp, #0
 8005e6a:	6078      	str	r0, [r7, #4]
  //xTaskNotifyGive(alertHandle); to alert user with flash and vibration

  //HAL_GPIO_WritePin(VIBRATION_GPIO_Port, VIBRATION_Pin, GPIO_PIN_RESET);

  //Init Vibration Motor PWM Parameters
  int duty_cycle = 79; //0 is off, up to ~80
 8005e6c:	234f      	movs	r3, #79	; 0x4f
 8005e6e:	61bb      	str	r3, [r7, #24]
  htim1.Instance->CCR2 = duty_cycle;
 8005e70:	4ba4      	ldr	r3, [pc, #656]	; (8006104 <startAlert+0x2a0>)
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	69ba      	ldr	r2, [r7, #24]
 8005e76:	639a      	str	r2, [r3, #56]	; 0x38

  //Dotstar Init
  DotStar_InitHandle dotstar;
  dotstar.spiHandle = &hspi1;
 8005e78:	4ba3      	ldr	r3, [pc, #652]	; (8006108 <startAlert+0x2a4>)
 8005e7a:	60fb      	str	r3, [r7, #12]
  dotstar.numLEDs = NUM_PIXELS;
 8005e7c:	230c      	movs	r3, #12
 8005e7e:	823b      	strh	r3, [r7, #16]
  dotstar.colorOrder = DOTSTAR_BGR;
 8005e80:	2306      	movs	r3, #6
 8005e82:	74bb      	strb	r3, [r7, #18]
  Dotstar_Init(&dotstar);
 8005e84:	f107 030c 	add.w	r3, r7, #12
 8005e88:	4618      	mov	r0, r3
 8005e8a:	f7fc f8c3 	bl	8002014 <Dotstar_Init>

  ds_clear();  //turn off
 8005e8e:	f7fc f9ad 	bl	80021ec <ds_clear>
  ds_show();
 8005e92:	f7fc f90f 	bl	80020b4 <ds_show>

  const uint8_t MAX_BRIGHTNESS = 0xAA; //max brightness, 0x01-0xFF
 8005e96:	23aa      	movs	r3, #170	; 0xaa
 8005e98:	75fb      	strb	r3, [r7, #23]

  ds_setBrightness(0);
 8005e9a:	2000      	movs	r0, #0
 8005e9c:	f7fc fa36 	bl	800230c <ds_setBrightness>
  osDelay(1000);
 8005ea0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005ea4:	f009 ffae 	bl	800fe04 <osDelay>

  /* Infinite loop */
  for(;;)
  {

	counter = 0;
 8005ea8:	2300      	movs	r3, #0
 8005eaa:	85fb      	strh	r3, [r7, #46]	; 0x2e
	LEDDirection = 0;
 8005eac:	2300      	movs	r3, #0
 8005eae:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	LEDBrightness = 0;
 8005eb2:	2300      	movs	r3, #0
 8005eb4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

	ulTaskNotifyTake( pdTRUE, portMAX_DELAY);
 8005eb8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8005ebc:	2001      	movs	r0, #1
 8005ebe:	f00d f983 	bl	80131c8 <ulTaskNotifyTake>

	//start vibration
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8005ec2:	2100      	movs	r1, #0
 8005ec4:	488f      	ldr	r0, [pc, #572]	; (8006104 <startAlert+0x2a0>)
 8005ec6:	f005 ffbf 	bl	800be48 <HAL_TIM_PWM_Start>

	//flash loop
	ds_fill(0xFFFFFF, 0, 12);
 8005eca:	220c      	movs	r2, #12
 8005ecc:	2100      	movs	r1, #0
 8005ece:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8005ed2:	f7fc f9e5 	bl	80022a0 <ds_fill>

	while (counter++ < MAX_BRIGHTNESS*2) {
 8005ed6:	e027      	b.n	8005f28 <startAlert+0xc4>

		ds_setBrightness(LEDBrightness);
 8005ed8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005edc:	4618      	mov	r0, r3
 8005ede:	f7fc fa15 	bl	800230c <ds_setBrightness>
		ds_show();
 8005ee2:	f7fc f8e7 	bl	80020b4 <ds_show>

		//increment color intensity
		if (LEDDirection) {LEDBrightness--;}
 8005ee6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d005      	beq.n	8005efa <startAlert+0x96>
 8005eee:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005ef2:	3b01      	subs	r3, #1
 8005ef4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005ef8:	e004      	b.n	8005f04 <startAlert+0xa0>
		else {LEDBrightness++;}
 8005efa:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005efe:	3301      	adds	r3, #1
 8005f00:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

		//if we hit a limit switch color scaling up or down
		if (LEDBrightness == MAX_BRIGHTNESS) {LEDDirection = 1;}
 8005f04:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8005f08:	7dfb      	ldrb	r3, [r7, #23]
 8005f0a:	429a      	cmp	r2, r3
 8005f0c:	d102      	bne.n	8005f14 <startAlert+0xb0>
 8005f0e:	2301      	movs	r3, #1
 8005f10:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
		if (LEDBrightness == 0x00) {LEDDirection = 0;}
 8005f14:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d102      	bne.n	8005f22 <startAlert+0xbe>
 8005f1c:	2300      	movs	r3, #0
 8005f1e:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24

		osDelay(pdMS_TO_TICKS(2)); //2ms delay
 8005f22:	2002      	movs	r0, #2
 8005f24:	f009 ff6e 	bl	800fe04 <osDelay>
	while (counter++ < MAX_BRIGHTNESS*2) {
 8005f28:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8005f2a:	1c5a      	adds	r2, r3, #1
 8005f2c:	85fa      	strh	r2, [r7, #46]	; 0x2e
 8005f2e:	461a      	mov	r2, r3
 8005f30:	7dfb      	ldrb	r3, [r7, #23]
 8005f32:	005b      	lsls	r3, r3, #1
 8005f34:	429a      	cmp	r2, r3
 8005f36:	dbcf      	blt.n	8005ed8 <startAlert+0x74>
	}

	//turn off LEDs
	ds_setBrightness(0);
 8005f38:	2000      	movs	r0, #0
 8005f3a:	f7fc f9e7 	bl	800230c <ds_setBrightness>
	ds_fill(0x000000, 0, 12);
 8005f3e:	220c      	movs	r2, #12
 8005f40:	2100      	movs	r1, #0
 8005f42:	2000      	movs	r0, #0
 8005f44:	f7fc f9ac 	bl	80022a0 <ds_fill>
	ds_show();
 8005f48:	f7fc f8b4 	bl	80020b4 <ds_show>

	osDelay(pdMS_TO_TICKS(100)); //100ms delay
 8005f4c:	2064      	movs	r0, #100	; 0x64
 8005f4e:	f009 ff59 	bl	800fe04 <osDelay>

    //stop vibration
    HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 8005f52:	2100      	movs	r1, #0
 8005f54:	486b      	ldr	r0, [pc, #428]	; (8006104 <startAlert+0x2a0>)
 8005f56:	f006 f851 	bl	800bffc <HAL_TIM_PWM_Stop>

    //if we're in demo mode, flash some LEDs
    if (GlobalState.demo){
 8005f5a:	4b6c      	ldr	r3, [pc, #432]	; (800610c <startAlert+0x2a8>)
 8005f5c:	f893 30ee 	ldrb.w	r3, [r3, #238]	; 0xee
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d0a1      	beq.n	8005ea8 <startAlert+0x44>

    	counter = 0;
 8005f64:	2300      	movs	r3, #0
 8005f66:	85fb      	strh	r3, [r7, #46]	; 0x2e
    	r = 0xFF;
 8005f68:	23ff      	movs	r3, #255	; 0xff
 8005f6a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    	g = 0xFF;
 8005f6e:	23ff      	movs	r3, #255	; 0xff
 8005f70:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    	b = 0xFF;
 8005f74:	23ff      	movs	r3, #255	; 0xff
 8005f76:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

    	ds_setBrightness(MAX_BRIGHTNESS);
 8005f7a:	7dfb      	ldrb	r3, [r7, #23]
 8005f7c:	4618      	mov	r0, r3
 8005f7e:	f7fc f9c5 	bl	800230c <ds_setBrightness>
    	while(GlobalState.demo) {
 8005f82:	e0ae      	b.n	80060e2 <startAlert+0x27e>

    		for (int i=0; i< NUM_PIXELS; i++){
 8005f84:	2300      	movs	r3, #0
 8005f86:	61fb      	str	r3, [r7, #28]
 8005f88:	e05e      	b.n	8006048 <startAlert+0x1e4>

    			if      (i==(counter+2)%12)	{ color = (r  <<16) | (g  <<8) | b; }
 8005f8a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8005f8c:	1c99      	adds	r1, r3, #2
 8005f8e:	4b60      	ldr	r3, [pc, #384]	; (8006110 <startAlert+0x2ac>)
 8005f90:	fb83 2301 	smull	r2, r3, r3, r1
 8005f94:	105a      	asrs	r2, r3, #1
 8005f96:	17cb      	asrs	r3, r1, #31
 8005f98:	1ad2      	subs	r2, r2, r3
 8005f9a:	4613      	mov	r3, r2
 8005f9c:	005b      	lsls	r3, r3, #1
 8005f9e:	4413      	add	r3, r2
 8005fa0:	009b      	lsls	r3, r3, #2
 8005fa2:	1aca      	subs	r2, r1, r3
 8005fa4:	69fb      	ldr	r3, [r7, #28]
 8005fa6:	4293      	cmp	r3, r2
 8005fa8:	d10b      	bne.n	8005fc2 <startAlert+0x15e>
 8005faa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005fae:	041a      	lsls	r2, r3, #16
 8005fb0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8005fb4:	021b      	lsls	r3, r3, #8
 8005fb6:	431a      	orrs	r2, r3
 8005fb8:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8005fbc:	4313      	orrs	r3, r2
 8005fbe:	62bb      	str	r3, [r7, #40]	; 0x28
 8005fc0:	e039      	b.n	8006036 <startAlert+0x1d2>
    			else if (i==(counter+1)%12) { color = (r/2<<16) | (g/2<<8) | b/2; }
 8005fc2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8005fc4:	1c59      	adds	r1, r3, #1
 8005fc6:	4b52      	ldr	r3, [pc, #328]	; (8006110 <startAlert+0x2ac>)
 8005fc8:	fb83 2301 	smull	r2, r3, r3, r1
 8005fcc:	105a      	asrs	r2, r3, #1
 8005fce:	17cb      	asrs	r3, r1, #31
 8005fd0:	1ad2      	subs	r2, r2, r3
 8005fd2:	4613      	mov	r3, r2
 8005fd4:	005b      	lsls	r3, r3, #1
 8005fd6:	4413      	add	r3, r2
 8005fd8:	009b      	lsls	r3, r3, #2
 8005fda:	1aca      	subs	r2, r1, r3
 8005fdc:	69fb      	ldr	r3, [r7, #28]
 8005fde:	4293      	cmp	r3, r2
 8005fe0:	d111      	bne.n	8006006 <startAlert+0x1a2>
 8005fe2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005fe6:	085b      	lsrs	r3, r3, #1
 8005fe8:	b2db      	uxtb	r3, r3
 8005fea:	041a      	lsls	r2, r3, #16
 8005fec:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8005ff0:	085b      	lsrs	r3, r3, #1
 8005ff2:	b2db      	uxtb	r3, r3
 8005ff4:	021b      	lsls	r3, r3, #8
 8005ff6:	4313      	orrs	r3, r2
 8005ff8:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 8005ffc:	0852      	lsrs	r2, r2, #1
 8005ffe:	b2d2      	uxtb	r2, r2
 8006000:	4313      	orrs	r3, r2
 8006002:	62bb      	str	r3, [r7, #40]	; 0x28
 8006004:	e017      	b.n	8006036 <startAlert+0x1d2>
    			else if (i==counter)        { color = (r/4<<16) | (g/4<<8) | b/4; }
 8006006:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8006008:	69fa      	ldr	r2, [r7, #28]
 800600a:	429a      	cmp	r2, r3
 800600c:	d111      	bne.n	8006032 <startAlert+0x1ce>
 800600e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006012:	089b      	lsrs	r3, r3, #2
 8006014:	b2db      	uxtb	r3, r3
 8006016:	041a      	lsls	r2, r3, #16
 8006018:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800601c:	089b      	lsrs	r3, r3, #2
 800601e:	b2db      	uxtb	r3, r3
 8006020:	021b      	lsls	r3, r3, #8
 8006022:	4313      	orrs	r3, r2
 8006024:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 8006028:	0892      	lsrs	r2, r2, #2
 800602a:	b2d2      	uxtb	r2, r2
 800602c:	4313      	orrs	r3, r2
 800602e:	62bb      	str	r3, [r7, #40]	; 0x28
 8006030:	e001      	b.n	8006036 <startAlert+0x1d2>
    			else 						{ color = 0x000000; }
 8006032:	2300      	movs	r3, #0
 8006034:	62bb      	str	r3, [r7, #40]	; 0x28

    			ds_setPixelColor32B(i, color); // 'off' pixel at head
 8006036:	69fb      	ldr	r3, [r7, #28]
 8006038:	b29b      	uxth	r3, r3
 800603a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800603c:	4618      	mov	r0, r3
 800603e:	f7fc f8f9 	bl	8002234 <ds_setPixelColor32B>
    		for (int i=0; i< NUM_PIXELS; i++){
 8006042:	69fb      	ldr	r3, [r7, #28]
 8006044:	3301      	adds	r3, #1
 8006046:	61fb      	str	r3, [r7, #28]
 8006048:	69fb      	ldr	r3, [r7, #28]
 800604a:	2b0b      	cmp	r3, #11
 800604c:	dd9d      	ble.n	8005f8a <startAlert+0x126>
    		}

    		ds_show();
 800604e:	f7fc f831 	bl	80020b4 <ds_show>
    		r = (r + 11) % 0xFF;
 8006052:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006056:	f103 020b 	add.w	r2, r3, #11
 800605a:	4b2e      	ldr	r3, [pc, #184]	; (8006114 <startAlert+0x2b0>)
 800605c:	fb83 1302 	smull	r1, r3, r3, r2
 8006060:	4413      	add	r3, r2
 8006062:	11d9      	asrs	r1, r3, #7
 8006064:	17d3      	asrs	r3, r2, #31
 8006066:	1ac9      	subs	r1, r1, r3
 8006068:	460b      	mov	r3, r1
 800606a:	021b      	lsls	r3, r3, #8
 800606c:	1a5b      	subs	r3, r3, r1
 800606e:	1ad1      	subs	r1, r2, r3
 8006070:	460b      	mov	r3, r1
 8006072:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    		g = (g + 13) % 0xFF;
 8006076:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800607a:	f103 020d 	add.w	r2, r3, #13
 800607e:	4b25      	ldr	r3, [pc, #148]	; (8006114 <startAlert+0x2b0>)
 8006080:	fb83 1302 	smull	r1, r3, r3, r2
 8006084:	4413      	add	r3, r2
 8006086:	11d9      	asrs	r1, r3, #7
 8006088:	17d3      	asrs	r3, r2, #31
 800608a:	1ac9      	subs	r1, r1, r3
 800608c:	460b      	mov	r3, r1
 800608e:	021b      	lsls	r3, r3, #8
 8006090:	1a5b      	subs	r3, r3, r1
 8006092:	1ad1      	subs	r1, r2, r3
 8006094:	460b      	mov	r3, r1
 8006096:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    		b = (b + 17) % 0xFF;
 800609a:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800609e:	f103 0211 	add.w	r2, r3, #17
 80060a2:	4b1c      	ldr	r3, [pc, #112]	; (8006114 <startAlert+0x2b0>)
 80060a4:	fb83 1302 	smull	r1, r3, r3, r2
 80060a8:	4413      	add	r3, r2
 80060aa:	11d9      	asrs	r1, r3, #7
 80060ac:	17d3      	asrs	r3, r2, #31
 80060ae:	1ac9      	subs	r1, r1, r3
 80060b0:	460b      	mov	r3, r1
 80060b2:	021b      	lsls	r3, r3, #8
 80060b4:	1a5b      	subs	r3, r3, r1
 80060b6:	1ad1      	subs	r1, r2, r3
 80060b8:	460b      	mov	r3, r1
 80060ba:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
    		counter = (counter+1)%12;
 80060be:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80060c0:	1c5a      	adds	r2, r3, #1
 80060c2:	4b13      	ldr	r3, [pc, #76]	; (8006110 <startAlert+0x2ac>)
 80060c4:	fb83 1302 	smull	r1, r3, r3, r2
 80060c8:	1059      	asrs	r1, r3, #1
 80060ca:	17d3      	asrs	r3, r2, #31
 80060cc:	1ac9      	subs	r1, r1, r3
 80060ce:	460b      	mov	r3, r1
 80060d0:	005b      	lsls	r3, r3, #1
 80060d2:	440b      	add	r3, r1
 80060d4:	009b      	lsls	r3, r3, #2
 80060d6:	1ad1      	subs	r1, r2, r3
 80060d8:	460b      	mov	r3, r1
 80060da:	85fb      	strh	r3, [r7, #46]	; 0x2e
    		osDelay(pdMS_TO_TICKS(50));
 80060dc:	2032      	movs	r0, #50	; 0x32
 80060de:	f009 fe91 	bl	800fe04 <osDelay>
    	while(GlobalState.demo) {
 80060e2:	4b0a      	ldr	r3, [pc, #40]	; (800610c <startAlert+0x2a8>)
 80060e4:	f893 30ee 	ldrb.w	r3, [r3, #238]	; 0xee
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	f47f af4b 	bne.w	8005f84 <startAlert+0x120>
    	}

    	//turn off LEDs
		ds_setBrightness(0);
 80060ee:	2000      	movs	r0, #0
 80060f0:	f7fc f90c 	bl	800230c <ds_setBrightness>
		ds_fill(0x000000, 0, 12);
 80060f4:	220c      	movs	r2, #12
 80060f6:	2100      	movs	r1, #0
 80060f8:	2000      	movs	r0, #0
 80060fa:	f7fc f8d1 	bl	80022a0 <ds_fill>
		ds_show();
 80060fe:	f7fb ffd9 	bl	80020b4 <ds_show>
	counter = 0;
 8006102:	e6d1      	b.n	8005ea8 <startAlert+0x44>
 8006104:	2002e264 	.word	0x2002e264
 8006108:	2002e2bc 	.word	0x2002e2bc
 800610c:	2002e0cc 	.word	0x2002e0cc
 8006110:	2aaaaaab 	.word	0x2aaaaaab
 8006114:	80808081 	.word	0x80808081

08006118 <startConditionsPoll>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_startConditionsPoll */
void startConditionsPoll(void *argument)
{
 8006118:	b5f0      	push	{r4, r5, r6, r7, lr}
 800611a:	b099      	sub	sp, #100	; 0x64
 800611c:	af10      	add	r7, sp, #64	; 0x40
 800611e:	6078      	str	r0, [r7, #4]
	osDelay(500); //let screen start first
 8006120:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8006124:	f009 fe6e 	bl	800fe04 <osDelay>

	//poll ambient temp, humidity, visible light, white light
	//every 5sec
  	if (veml_Setup(hi2c1, VEML_5S_POLLING) == HAL_ERROR){
 8006128:	4e46      	ldr	r6, [pc, #280]	; (8006244 <startConditionsPoll+0x12c>)
 800612a:	2300      	movs	r3, #0
 800612c:	930f      	str	r3, [sp, #60]	; 0x3c
 800612e:	466d      	mov	r5, sp
 8006130:	f106 0410 	add.w	r4, r6, #16
 8006134:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006136:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006138:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800613a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800613c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800613e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006140:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8006144:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8006148:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 800614c:	f001 f98a 	bl	8007464 <veml_Setup>
 8006150:	4603      	mov	r3, r0
 8006152:	2b01      	cmp	r3, #1
 8006154:	d10c      	bne.n	8006170 <startConditionsPoll+0x58>
  		//error condition
  		strncpy(errorCondition, "ERR:VEML7700", sizeof(errorCondition));
 8006156:	4a3c      	ldr	r2, [pc, #240]	; (8006248 <startConditionsPoll+0x130>)
 8006158:	4b3c      	ldr	r3, [pc, #240]	; (800624c <startConditionsPoll+0x134>)
 800615a:	4614      	mov	r4, r2
 800615c:	cb07      	ldmia	r3!, {r0, r1, r2}
 800615e:	6020      	str	r0, [r4, #0]
 8006160:	6061      	str	r1, [r4, #4]
 8006162:	60a2      	str	r2, [r4, #8]
 8006164:	781b      	ldrb	r3, [r3, #0]
 8006166:	7323      	strb	r3, [r4, #12]
  	    GlobalState.programMode = MODE_ERROR;
 8006168:	4b39      	ldr	r3, [pc, #228]	; (8006250 <startConditionsPoll+0x138>)
 800616a:	2206      	movs	r2, #6
 800616c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  	}

  	osDelay(10);
 8006170:	200a      	movs	r0, #10
 8006172:	f009 fe47 	bl	800fe04 <osDelay>

  	if (si7021_set_config(&hi2c1, SI7021_HEATER_OFF, SI7021_RESOLUTION_RH12_TEMP14) == HAL_ERROR) {
 8006176:	2200      	movs	r2, #0
 8006178:	2100      	movs	r1, #0
 800617a:	4832      	ldr	r0, [pc, #200]	; (8006244 <startConditionsPoll+0x12c>)
 800617c:	f000 fd8e 	bl	8006c9c <si7021_set_config>
 8006180:	4603      	mov	r3, r0
 8006182:	2b01      	cmp	r3, #1
 8006184:	d10c      	bne.n	80061a0 <startConditionsPoll+0x88>
  		//error condition
  		strncpy(errorCondition, "ERR:SI7021CF", sizeof(errorCondition));
 8006186:	4a30      	ldr	r2, [pc, #192]	; (8006248 <startConditionsPoll+0x130>)
 8006188:	4b32      	ldr	r3, [pc, #200]	; (8006254 <startConditionsPoll+0x13c>)
 800618a:	4614      	mov	r4, r2
 800618c:	cb07      	ldmia	r3!, {r0, r1, r2}
 800618e:	6020      	str	r0, [r4, #0]
 8006190:	6061      	str	r1, [r4, #4]
 8006192:	60a2      	str	r2, [r4, #8]
 8006194:	781b      	ldrb	r3, [r3, #0]
 8006196:	7323      	strb	r3, [r4, #12]
  	    GlobalState.programMode = MODE_ERROR;
 8006198:	4b2d      	ldr	r3, [pc, #180]	; (8006250 <startConditionsPoll+0x138>)
 800619a:	2206      	movs	r2, #6
 800619c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  	}

  	osDelay(10);
 80061a0:	200a      	movs	r0, #10
 80061a2:	f009 fe2f 	bl	800fe04 <osDelay>

  	if (si7021_set_heater_power(&hi2c1, SI7021_HEATER_POWER_3MA) == HAL_ERROR) {
 80061a6:	2100      	movs	r1, #0
 80061a8:	4826      	ldr	r0, [pc, #152]	; (8006244 <startConditionsPoll+0x12c>)
 80061aa:	f000 fd94 	bl	8006cd6 <si7021_set_heater_power>
 80061ae:	4603      	mov	r3, r0
 80061b0:	2b01      	cmp	r3, #1
 80061b2:	d10c      	bne.n	80061ce <startConditionsPoll+0xb6>
  		//error condition
  		strncpy(errorCondition, "ERR:SI7021HT", sizeof(errorCondition));
 80061b4:	4a24      	ldr	r2, [pc, #144]	; (8006248 <startConditionsPoll+0x130>)
 80061b6:	4b28      	ldr	r3, [pc, #160]	; (8006258 <startConditionsPoll+0x140>)
 80061b8:	4614      	mov	r4, r2
 80061ba:	cb07      	ldmia	r3!, {r0, r1, r2}
 80061bc:	6020      	str	r0, [r4, #0]
 80061be:	6061      	str	r1, [r4, #4]
 80061c0:	60a2      	str	r2, [r4, #8]
 80061c2:	781b      	ldrb	r3, [r3, #0]
 80061c4:	7323      	strb	r3, [r4, #12]
  	    GlobalState.programMode = MODE_ERROR;
 80061c6:	4b22      	ldr	r3, [pc, #136]	; (8006250 <startConditionsPoll+0x138>)
 80061c8:	2206      	movs	r2, #6
 80061ca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  	float lux;
  	float whiteLux;
  	float humidity;
    float temperature;

    const BLETX_Queue_t bleSendData = {TX_TEMP_HUMD, 0x0000};
 80061ce:	2301      	movs	r3, #1
 80061d0:	733b      	strb	r3, [r7, #12]
 80061d2:	2300      	movs	r3, #0
 80061d4:	81fb      	strh	r3, [r7, #14]

  	for (;;){

  		lux = veml_Get_Lux();
 80061d6:	f001 fa83 	bl	80076e0 <veml_Get_Lux>
 80061da:	ed87 0a07 	vstr	s0, [r7, #28]
    	whiteLux = veml_Get_White_Lux();
 80061de:	f001 fb67 	bl	80078b0 <veml_Get_White_Lux>
 80061e2:	ed87 0a06 	vstr	s0, [r7, #24]
    	temperature = si7021_measure_temperature(&hi2c1);
 80061e6:	4817      	ldr	r0, [pc, #92]	; (8006244 <startConditionsPoll+0x12c>)
 80061e8:	f000 fdec 	bl	8006dc4 <si7021_measure_temperature>
 80061ec:	ed87 0a05 	vstr	s0, [r7, #20]
    	humidity = si7021_measure_humidity(&hi2c1);
 80061f0:	4814      	ldr	r0, [pc, #80]	; (8006244 <startConditionsPoll+0x12c>)
 80061f2:	f000 fd89 	bl	8006d08 <si7021_measure_humidity>
 80061f6:	ed87 0a04 	vstr	s0, [r7, #16]

    	osMutexAcquire(conditionMutexHandle, portMAX_DELAY);
 80061fa:	4b18      	ldr	r3, [pc, #96]	; (800625c <startConditionsPoll+0x144>)
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8006202:	4618      	mov	r0, r3
 8006204:	f009 fec6 	bl	800ff94 <osMutexAcquire>
    	GlobalState.lastConditions.lux = lux;
 8006208:	4a11      	ldr	r2, [pc, #68]	; (8006250 <startConditionsPoll+0x138>)
 800620a:	69fb      	ldr	r3, [r7, #28]
 800620c:	6353      	str	r3, [r2, #52]	; 0x34
    	GlobalState.lastConditions.whiteLux = whiteLux;
 800620e:	4a10      	ldr	r2, [pc, #64]	; (8006250 <startConditionsPoll+0x138>)
 8006210:	69bb      	ldr	r3, [r7, #24]
 8006212:	6393      	str	r3, [r2, #56]	; 0x38
    	GlobalState.lastConditions.temp = temperature;
 8006214:	4a0e      	ldr	r2, [pc, #56]	; (8006250 <startConditionsPoll+0x138>)
 8006216:	697b      	ldr	r3, [r7, #20]
 8006218:	63d3      	str	r3, [r2, #60]	; 0x3c
    	GlobalState.lastConditions.humd = humidity;
 800621a:	4a0d      	ldr	r2, [pc, #52]	; (8006250 <startConditionsPoll+0x138>)
 800621c:	693b      	ldr	r3, [r7, #16]
 800621e:	6413      	str	r3, [r2, #64]	; 0x40
    	osMutexRelease(conditionMutexHandle);
 8006220:	4b0e      	ldr	r3, [pc, #56]	; (800625c <startConditionsPoll+0x144>)
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	4618      	mov	r0, r3
 8006226:	f009 ff13 	bl	8010050 <osMutexRelease>

		osMessageQueuePut(bleTXqueueHandle, &bleSendData, 0, 0);
 800622a:	4b0d      	ldr	r3, [pc, #52]	; (8006260 <startConditionsPoll+0x148>)
 800622c:	6818      	ldr	r0, [r3, #0]
 800622e:	f107 010c 	add.w	r1, r7, #12
 8006232:	2300      	movs	r3, #0
 8006234:	2200      	movs	r2, #0
 8006236:	f00a f93d 	bl	80104b4 <osMessageQueuePut>

    	osDelay(29900);
 800623a:	f247 40cc 	movw	r0, #29900	; 0x74cc
 800623e:	f009 fde1 	bl	800fe04 <osDelay>
  		lux = veml_Get_Lux();
 8006242:	e7c8      	b.n	80061d6 <startConditionsPoll+0xbe>
 8006244:	2002e1f8 	.word	0x2002e1f8
 8006248:	2002e1c0 	.word	0x2002e1c0
 800624c:	080189e0 	.word	0x080189e0
 8006250:	2002e0cc 	.word	0x2002e0cc
 8006254:	080189f0 	.word	0x080189f0
 8006258:	08018a00 	.word	0x08018a00
 800625c:	2002e244 	.word	0x2002e244
 8006260:	2002e2b0 	.word	0x2002e2b0

08006264 <startBLETX>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_startBLETX */
void startBLETX(void *argument)
{
 8006264:	b5b0      	push	{r4, r5, r7, lr}
 8006266:	b09a      	sub	sp, #104	; 0x68
 8006268:	af00      	add	r7, sp, #0
 800626a:	6078      	str	r0, [r7, #4]
  //TX_TIMESTAMP_UPDATE -- use data in sendData for error, to send
  //TX_SURVEY_RESULT -- use data in sendData, first byte is survey/second is answer

  BLETX_Queue_t sendData;

  UnsentQueueAddress_t DataQueue = NULL;
 800626c:	2300      	movs	r3, #0
 800626e:	667b      	str	r3, [r7, #100]	; 0x64

  RTC_TimeTypeDef cTime;
  RTC_DateTypeDef cDate;
  uint16_t sendval[10] = {0};
 8006270:	f107 0310 	add.w	r3, r7, #16
 8006274:	2200      	movs	r2, #0
 8006276:	601a      	str	r2, [r3, #0]
 8006278:	605a      	str	r2, [r3, #4]
 800627a:	609a      	str	r2, [r3, #8]
 800627c:	60da      	str	r2, [r3, #12]
 800627e:	611a      	str	r2, [r3, #16]
  uint16_t lightval[4] = {0};
 8006280:	f107 0308 	add.w	r3, r7, #8
 8006284:	2200      	movs	r2, #0
 8006286:	601a      	str	r2, [r3, #0]
 8006288:	605a      	str	r2, [r3, #4]
  uint8_t numBytes = 0;
 800628a:	2300      	movs	r3, #0
 800628c:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63

  /* Infinite loop */
  for(;;)
  {
        if (osMessageQueueGet(bleTXqueueHandle, &sendData, NULL, osWaitForever) == osOK){
 8006290:	4b90      	ldr	r3, [pc, #576]	; (80064d4 <startBLETX+0x270>)
 8006292:	6818      	ldr	r0, [r3, #0]
 8006294:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 8006298:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800629c:	2200      	movs	r2, #0
 800629e:	f00a f97d 	bl	801059c <osMessageQueueGet>
 80062a2:	4603      	mov	r3, r0
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d1f3      	bne.n	8006290 <startBLETX+0x2c>

          //construct timestamped data to send
          osMutexAcquire(rtcMutexHandle, portMAX_DELAY);
 80062a8:	4b8b      	ldr	r3, [pc, #556]	; (80064d8 <startBLETX+0x274>)
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80062b0:	4618      	mov	r0, r3
 80062b2:	f009 fe6f 	bl	800ff94 <osMutexAcquire>
          HAL_RTC_GetTime(&hrtc, &cTime, RTC_FORMAT_BCD);
 80062b6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80062ba:	2201      	movs	r2, #1
 80062bc:	4619      	mov	r1, r3
 80062be:	4887      	ldr	r0, [pc, #540]	; (80064dc <startBLETX+0x278>)
 80062c0:	f004 ff33 	bl	800b12a <HAL_RTC_GetTime>
          HAL_RTC_GetDate(&hrtc, &cDate, RTC_FORMAT_BCD);
 80062c4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80062c8:	2201      	movs	r2, #1
 80062ca:	4619      	mov	r1, r3
 80062cc:	4883      	ldr	r0, [pc, #524]	; (80064dc <startBLETX+0x278>)
 80062ce:	f005 f836 	bl	800b33e <HAL_RTC_GetDate>
          osMutexRelease(rtcMutexHandle);
 80062d2:	4b81      	ldr	r3, [pc, #516]	; (80064d8 <startBLETX+0x274>)
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	4618      	mov	r0, r3
 80062d8:	f009 feba 	bl	8010050 <osMutexRelease>

          switch (sendData.sendType){
 80062dc:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 80062e0:	2b08      	cmp	r3, #8
 80062e2:	f200 814b 	bhi.w	800657c <startBLETX+0x318>
 80062e6:	a201      	add	r2, pc, #4	; (adr r2, 80062ec <startBLETX+0x88>)
 80062e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062ec:	080064e9 	.word	0x080064e9
 80062f0:	080064e9 	.word	0x080064e9
 80062f4:	08006311 	.word	0x08006311
 80062f8:	08006379 	.word	0x08006379
 80062fc:	080063e5 	.word	0x080063e5
 8006300:	08006379 	.word	0x08006379
 8006304:	08006311 	.word	0x08006311
 8006308:	08006379 	.word	0x08006379
 800630c:	08006311 	.word	0x08006311
            case TX_PREVIOUS_INVALID:
            case TX_SURVEY_INITIALIZED:
            case TX_BEGIN_PAUSE:

            	sendval[4] = (cDate.WeekDay << (8*1)) | cDate.Month;
 8006310:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8006314:	021b      	lsls	r3, r3, #8
 8006316:	b21a      	sxth	r2, r3
 8006318:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800631c:	b21b      	sxth	r3, r3
 800631e:	4313      	orrs	r3, r2
 8006320:	b21b      	sxth	r3, r3
 8006322:	b29b      	uxth	r3, r3
 8006324:	833b      	strh	r3, [r7, #24]
            	sendval[3] = (cDate.Date << (8*1)) | cDate.Year;
 8006326:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800632a:	021b      	lsls	r3, r3, #8
 800632c:	b21a      	sxth	r2, r3
 800632e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006332:	b21b      	sxth	r3, r3
 8006334:	4313      	orrs	r3, r2
 8006336:	b21b      	sxth	r3, r3
 8006338:	b29b      	uxth	r3, r3
 800633a:	82fb      	strh	r3, [r7, #22]
            	sendval[2] = (cTime.Hours << (8*1)) | cTime.Minutes;
 800633c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8006340:	021b      	lsls	r3, r3, #8
 8006342:	b21a      	sxth	r2, r3
 8006344:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8006348:	b21b      	sxth	r3, r3
 800634a:	4313      	orrs	r3, r2
 800634c:	b21b      	sxth	r3, r3
 800634e:	b29b      	uxth	r3, r3
 8006350:	82bb      	strh	r3, [r7, #20]
            	sendval[1] = (cTime.Seconds << (8*1)) | cTime.TimeFormat;
 8006352:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8006356:	021b      	lsls	r3, r3, #8
 8006358:	b21a      	sxth	r2, r3
 800635a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800635e:	b21b      	sxth	r3, r3
 8006360:	4313      	orrs	r3, r2
 8006362:	b21b      	sxth	r3, r3
 8006364:	b29b      	uxth	r3, r3
 8006366:	827b      	strh	r3, [r7, #18]
            	sendval[0] = sendData.sendType;
 8006368:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800636c:	b29b      	uxth	r3, r3
 800636e:	823b      	strh	r3, [r7, #16]
            	numBytes = 10;
 8006370:	230a      	movs	r3, #10
 8006372:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63
            	break;
 8006376:	e101      	b.n	800657c <startBLETX+0x318>

            case TX_TIME_EST:
            case TX_TIMESTAMP_UPDATE:
            case TX_SURVEY_RESULT:
            	sendval[5] = (cDate.WeekDay << (8*1)) | cDate.Month;
 8006378:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800637c:	021b      	lsls	r3, r3, #8
 800637e:	b21a      	sxth	r2, r3
 8006380:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8006384:	b21b      	sxth	r3, r3
 8006386:	4313      	orrs	r3, r2
 8006388:	b21b      	sxth	r3, r3
 800638a:	b29b      	uxth	r3, r3
 800638c:	837b      	strh	r3, [r7, #26]
            	sendval[4] = (cDate.Date << (8*1)) | cDate.Year;
 800638e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006392:	021b      	lsls	r3, r3, #8
 8006394:	b21a      	sxth	r2, r3
 8006396:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800639a:	b21b      	sxth	r3, r3
 800639c:	4313      	orrs	r3, r2
 800639e:	b21b      	sxth	r3, r3
 80063a0:	b29b      	uxth	r3, r3
 80063a2:	833b      	strh	r3, [r7, #24]
            	sendval[3] = (cTime.Hours << (8*1)) | cTime.Minutes;
 80063a4:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80063a8:	021b      	lsls	r3, r3, #8
 80063aa:	b21a      	sxth	r2, r3
 80063ac:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 80063b0:	b21b      	sxth	r3, r3
 80063b2:	4313      	orrs	r3, r2
 80063b4:	b21b      	sxth	r3, r3
 80063b6:	b29b      	uxth	r3, r3
 80063b8:	82fb      	strh	r3, [r7, #22]
            	sendval[2] = (cTime.Seconds << (8*1)) | cTime.TimeFormat;
 80063ba:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 80063be:	021b      	lsls	r3, r3, #8
 80063c0:	b21a      	sxth	r2, r3
 80063c2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80063c6:	b21b      	sxth	r3, r3
 80063c8:	4313      	orrs	r3, r2
 80063ca:	b21b      	sxth	r3, r3
 80063cc:	b29b      	uxth	r3, r3
 80063ce:	82bb      	strh	r3, [r7, #20]
            	sendval[1] = sendData.sendType;
 80063d0:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 80063d4:	b29b      	uxth	r3, r3
 80063d6:	827b      	strh	r3, [r7, #18]
            	sendval[0] = sendData.data;
 80063d8:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80063da:	823b      	strh	r3, [r7, #16]
            	numBytes = 12;
 80063dc:	230c      	movs	r3, #12
 80063de:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63
            	break;
 80063e2:	e0cb      	b.n	800657c <startBLETX+0x318>

            case TX_TIME_SEEN:
            	sendval[8] = (cDate.WeekDay << (8*1)) | cDate.Month;
 80063e4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80063e8:	021b      	lsls	r3, r3, #8
 80063ea:	b21a      	sxth	r2, r3
 80063ec:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80063f0:	b21b      	sxth	r3, r3
 80063f2:	4313      	orrs	r3, r2
 80063f4:	b21b      	sxth	r3, r3
 80063f6:	b29b      	uxth	r3, r3
 80063f8:	843b      	strh	r3, [r7, #32]
            	sendval[7] = (cDate.Date << (8*1)) | cDate.Year;
 80063fa:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80063fe:	021b      	lsls	r3, r3, #8
 8006400:	b21a      	sxth	r2, r3
 8006402:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006406:	b21b      	sxth	r3, r3
 8006408:	4313      	orrs	r3, r2
 800640a:	b21b      	sxth	r3, r3
 800640c:	b29b      	uxth	r3, r3
 800640e:	83fb      	strh	r3, [r7, #30]
            	sendval[6] = (cTime.Hours << (8*1)) | cTime.Minutes;
 8006410:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8006414:	021b      	lsls	r3, r3, #8
 8006416:	b21a      	sxth	r2, r3
 8006418:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800641c:	b21b      	sxth	r3, r3
 800641e:	4313      	orrs	r3, r2
 8006420:	b21b      	sxth	r3, r3
 8006422:	b29b      	uxth	r3, r3
 8006424:	83bb      	strh	r3, [r7, #28]
            	sendval[5] = (cTime.Seconds << (8*1)) | cTime.TimeFormat;
 8006426:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 800642a:	021b      	lsls	r3, r3, #8
 800642c:	b21a      	sxth	r2, r3
 800642e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006432:	b21b      	sxth	r3, r3
 8006434:	4313      	orrs	r3, r2
 8006436:	b21b      	sxth	r3, r3
 8006438:	b29b      	uxth	r3, r3
 800643a:	837b      	strh	r3, [r7, #26]
            	sendval[4] = sendData.sendType;
 800643c:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8006440:	b29b      	uxth	r3, r3
 8006442:	833b      	strh	r3, [r7, #24]

                osMutexAcquire(lastSeenMutexHandle, portMAX_DELAY);
 8006444:	4b26      	ldr	r3, [pc, #152]	; (80064e0 <startBLETX+0x27c>)
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800644c:	4618      	mov	r0, r3
 800644e:	f009 fda1 	bl	800ff94 <osMutexAcquire>
                cTime = GlobalState.lastSeenTime.time;
 8006452:	4b24      	ldr	r3, [pc, #144]	; (80064e4 <startBLETX+0x280>)
 8006454:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8006458:	1d1d      	adds	r5, r3, #4
 800645a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800645c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800645e:	682b      	ldr	r3, [r5, #0]
 8006460:	6023      	str	r3, [r4, #0]
                cDate = GlobalState.lastSeenTime.date;
 8006462:	4b20      	ldr	r3, [pc, #128]	; (80064e4 <startBLETX+0x280>)
 8006464:	699b      	ldr	r3, [r3, #24]
 8006466:	627b      	str	r3, [r7, #36]	; 0x24
                osMutexRelease(lastSeenMutexHandle);
 8006468:	4b1d      	ldr	r3, [pc, #116]	; (80064e0 <startBLETX+0x27c>)
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	4618      	mov	r0, r3
 800646e:	f009 fdef 	bl	8010050 <osMutexRelease>

                sendval[3] = (cDate.WeekDay << (8*1)) | cDate.Month;
 8006472:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8006476:	021b      	lsls	r3, r3, #8
 8006478:	b21a      	sxth	r2, r3
 800647a:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800647e:	b21b      	sxth	r3, r3
 8006480:	4313      	orrs	r3, r2
 8006482:	b21b      	sxth	r3, r3
 8006484:	b29b      	uxth	r3, r3
 8006486:	82fb      	strh	r3, [r7, #22]
                sendval[2] = (cDate.Date << (8*1)) | cDate.Year;
 8006488:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800648c:	021b      	lsls	r3, r3, #8
 800648e:	b21a      	sxth	r2, r3
 8006490:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006494:	b21b      	sxth	r3, r3
 8006496:	4313      	orrs	r3, r2
 8006498:	b21b      	sxth	r3, r3
 800649a:	b29b      	uxth	r3, r3
 800649c:	82bb      	strh	r3, [r7, #20]
                sendval[1] = (cTime.Hours << (8*1)) | cTime.Minutes;
 800649e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80064a2:	021b      	lsls	r3, r3, #8
 80064a4:	b21a      	sxth	r2, r3
 80064a6:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 80064aa:	b21b      	sxth	r3, r3
 80064ac:	4313      	orrs	r3, r2
 80064ae:	b21b      	sxth	r3, r3
 80064b0:	b29b      	uxth	r3, r3
 80064b2:	827b      	strh	r3, [r7, #18]
                sendval[0] = (cTime.Seconds << (8*1)) | cTime.TimeFormat;
 80064b4:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 80064b8:	021b      	lsls	r3, r3, #8
 80064ba:	b21a      	sxth	r2, r3
 80064bc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80064c0:	b21b      	sxth	r3, r3
 80064c2:	4313      	orrs	r3, r2
 80064c4:	b21b      	sxth	r3, r3
 80064c6:	b29b      	uxth	r3, r3
 80064c8:	823b      	strh	r3, [r7, #16]
            	numBytes = 18;
 80064ca:	2312      	movs	r3, #18
 80064cc:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63
            	break;
 80064d0:	e054      	b.n	800657c <startBLETX+0x318>
 80064d2:	bf00      	nop
 80064d4:	2002e2b0 	.word	0x2002e2b0
 80064d8:	2002e0c8 	.word	0x2002e0c8
 80064dc:	2002e0a4 	.word	0x2002e0a4
 80064e0:	2002e320 	.word	0x2002e320
 80064e4:	2002e0cc 	.word	0x2002e0cc

            case TX_TEMP_HUMD:
            case TX_LUX_WHITELUX:
            	sendval[8] = (cDate.WeekDay << (8*1)) | cDate.Month;
 80064e8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80064ec:	021b      	lsls	r3, r3, #8
 80064ee:	b21a      	sxth	r2, r3
 80064f0:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80064f4:	b21b      	sxth	r3, r3
 80064f6:	4313      	orrs	r3, r2
 80064f8:	b21b      	sxth	r3, r3
 80064fa:	b29b      	uxth	r3, r3
 80064fc:	843b      	strh	r3, [r7, #32]
            	sendval[7] = (cDate.Date << (8*1)) | cDate.Year;
 80064fe:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006502:	021b      	lsls	r3, r3, #8
 8006504:	b21a      	sxth	r2, r3
 8006506:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800650a:	b21b      	sxth	r3, r3
 800650c:	4313      	orrs	r3, r2
 800650e:	b21b      	sxth	r3, r3
 8006510:	b29b      	uxth	r3, r3
 8006512:	83fb      	strh	r3, [r7, #30]
            	sendval[6] = (cTime.Hours << (8*1)) | cTime.Minutes;
 8006514:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8006518:	021b      	lsls	r3, r3, #8
 800651a:	b21a      	sxth	r2, r3
 800651c:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8006520:	b21b      	sxth	r3, r3
 8006522:	4313      	orrs	r3, r2
 8006524:	b21b      	sxth	r3, r3
 8006526:	b29b      	uxth	r3, r3
 8006528:	83bb      	strh	r3, [r7, #28]
            	sendval[5] = (cTime.Seconds << (8*1)) | cTime.TimeFormat;
 800652a:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 800652e:	021b      	lsls	r3, r3, #8
 8006530:	b21a      	sxth	r2, r3
 8006532:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006536:	b21b      	sxth	r3, r3
 8006538:	4313      	orrs	r3, r2
 800653a:	b21b      	sxth	r3, r3
 800653c:	b29b      	uxth	r3, r3
 800653e:	837b      	strh	r3, [r7, #26]
            	sendval[4] = TX_TEMP_HUMD;
 8006540:	2301      	movs	r3, #1
 8006542:	833b      	strh	r3, [r7, #24]
            	numBytes = 18;
 8006544:	2312      	movs	r3, #18
 8006546:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63

            	osMutexAcquire(conditionMutexHandle, portMAX_DELAY);
 800654a:	4b81      	ldr	r3, [pc, #516]	; (8006750 <startBLETX+0x4ec>)
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8006552:	4618      	mov	r0, r3
 8006554:	f009 fd1e 	bl	800ff94 <osMutexAcquire>
            	memcpy(&(sendval[2]), &GlobalState.lastConditions.temp, 4);
 8006558:	4b7e      	ldr	r3, [pc, #504]	; (8006754 <startBLETX+0x4f0>)
 800655a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800655c:	617b      	str	r3, [r7, #20]
            	memcpy(sendval, &GlobalState.lastConditions.humd, 4);
 800655e:	4b7d      	ldr	r3, [pc, #500]	; (8006754 <startBLETX+0x4f0>)
 8006560:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006562:	613b      	str	r3, [r7, #16]
            	memcpy(&(lightval[2]), &GlobalState.lastConditions.lux, 4);
 8006564:	4b7b      	ldr	r3, [pc, #492]	; (8006754 <startBLETX+0x4f0>)
 8006566:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006568:	60fb      	str	r3, [r7, #12]
            	memcpy(lightval, &GlobalState.lastConditions.whiteLux, 4);
 800656a:	4b7a      	ldr	r3, [pc, #488]	; (8006754 <startBLETX+0x4f0>)
 800656c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800656e:	60bb      	str	r3, [r7, #8]
            	osMutexRelease(conditionMutexHandle);
 8006570:	4b77      	ldr	r3, [pc, #476]	; (8006750 <startBLETX+0x4ec>)
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	4618      	mov	r0, r3
 8006576:	f009 fd6b 	bl	8010050 <osMutexRelease>
            	break;
 800657a:	bf00      	nop
                //memcpy(sendval, lightval, 8);
          }


          //try to send queued data if we have a queue
          uint8_t dataSuccessFlag = 1;
 800657c:	2301      	movs	r3, #1
 800657e:	f887 3062 	strb.w	r3, [r7, #98]	; 0x62
          uint8_t failed_attempts = 0;
 8006582:	2300      	movs	r3, #0
 8006584:	f887 3061 	strb.w	r3, [r7, #97]	; 0x61
		  const uint8_t MAX_ATTEMPTS = 50;
 8006588:	2332      	movs	r3, #50	; 0x32
 800658a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

          if (!P2P_Server_App_Context.Connected) { dataSuccessFlag = 0;}
 800658e:	4b72      	ldr	r3, [pc, #456]	; (8006758 <startBLETX+0x4f4>)
 8006590:	785b      	ldrb	r3, [r3, #1]
 8006592:	2b00      	cmp	r3, #0
 8006594:	d132      	bne.n	80065fc <startBLETX+0x398>
 8006596:	2300      	movs	r3, #0
 8006598:	f887 3062 	strb.w	r3, [r7, #98]	; 0x62

          while(DataQueue && dataSuccessFlag){//we have data queued and have not failed to send data
 800659c:	e02e      	b.n	80065fc <startBLETX+0x398>

        	  //try to send data at front of list
        	  if (P2PS_STM_App_Update_Int8(P2P_NOTIFY_CHAR_UUID, (uint8_t *)DataQueue->packet, DataQueue->numBytes) == BLE_STATUS_SUCCESS){
 800659e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80065a0:	6819      	ldr	r1, [r3, #0]
 80065a2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80065a4:	791b      	ldrb	r3, [r3, #4]
 80065a6:	461a      	mov	r2, r3
 80065a8:	f64f 6042 	movw	r0, #65090	; 0xfe42
 80065ac:	f008 fc68 	bl	800ee80 <P2PS_STM_App_Update_Int8>
 80065b0:	4603      	mov	r3, r0
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d110      	bne.n	80065d8 <startBLETX+0x374>

        		  //if successful, move dataQueue to next, which is NULL for last element, and free memory
        		  UnsentQueueAddress_t addressJustSent = DataQueue;
 80065b6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80065b8:	653b      	str	r3, [r7, #80]	; 0x50
        		  DataQueue = DataQueue->next;
 80065ba:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80065bc:	689b      	ldr	r3, [r3, #8]
 80065be:	667b      	str	r3, [r7, #100]	; 0x64

        		  vPortFree(addressJustSent->packet);
 80065c0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	4618      	mov	r0, r3
 80065c6:	f00a fb95 	bl	8010cf4 <vPortFree>
        		  vPortFree(addressJustSent);
 80065ca:	6d38      	ldr	r0, [r7, #80]	; 0x50
 80065cc:	f00a fb92 	bl	8010cf4 <vPortFree>

        		  failed_attempts = 0;
 80065d0:	2300      	movs	r3, #0
 80065d2:	f887 3061 	strb.w	r3, [r7, #97]	; 0x61
 80065d6:	e011      	b.n	80065fc <startBLETX+0x398>
        	  } else {  //if unsuccessful MAX_ATTEMPTS in a row, dataSuccessFlag = 0
        		  failed_attempts +=1;
 80065d8:	f897 3061 	ldrb.w	r3, [r7, #97]	; 0x61
 80065dc:	3301      	adds	r3, #1
 80065de:	f887 3061 	strb.w	r3, [r7, #97]	; 0x61

        		  if (failed_attempts >= MAX_ATTEMPTS){ dataSuccessFlag = 0; }
 80065e2:	f897 2061 	ldrb.w	r2, [r7, #97]	; 0x61
 80065e6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80065ea:	429a      	cmp	r2, r3
 80065ec:	d303      	bcc.n	80065f6 <startBLETX+0x392>
 80065ee:	2300      	movs	r3, #0
 80065f0:	f887 3062 	strb.w	r3, [r7, #98]	; 0x62
 80065f4:	e002      	b.n	80065fc <startBLETX+0x398>
        		  else { osDelay(2); }
 80065f6:	2002      	movs	r0, #2
 80065f8:	f009 fc04 	bl	800fe04 <osDelay>
          while(DataQueue && dataSuccessFlag){//we have data queued and have not failed to send data
 80065fc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d003      	beq.n	800660a <startBLETX+0x3a6>
 8006602:	f897 3062 	ldrb.w	r3, [r7, #98]	; 0x62
 8006606:	2b00      	cmp	r3, #0
 8006608:	d1c9      	bne.n	800659e <startBLETX+0x33a>
        	  }
          }

        //if we haven't had a data failure with the queue, try to send current data packet
        if (dataSuccessFlag){
 800660a:	f897 3062 	ldrb.w	r3, [r7, #98]	; 0x62
 800660e:	2b00      	cmp	r3, #0
 8006610:	d02c      	beq.n	800666c <startBLETX+0x408>
        	if (P2PS_STM_App_Update_Int8(P2P_NOTIFY_CHAR_UUID, (uint8_t *)&sendval, numBytes) != BLE_STATUS_SUCCESS){
 8006612:	f897 2063 	ldrb.w	r2, [r7, #99]	; 0x63
 8006616:	f107 0310 	add.w	r3, r7, #16
 800661a:	4619      	mov	r1, r3
 800661c:	f64f 6042 	movw	r0, #65090	; 0xfe42
 8006620:	f008 fc2e 	bl	800ee80 <P2PS_STM_App_Update_Int8>
 8006624:	4603      	mov	r3, r0
 8006626:	2b00      	cmp	r3, #0
 8006628:	d003      	beq.n	8006632 <startBLETX+0x3ce>
        		//unsuccessful packet send means we flag it
        		dataSuccessFlag = 0;
 800662a:	2300      	movs	r3, #0
 800662c:	f887 3062 	strb.w	r3, [r7, #98]	; 0x62
 8006630:	e01c      	b.n	800666c <startBLETX+0x408>

        	} else if (sendData.sendType == TX_TEMP_HUMD){ //if first packet was successful and we're transmitting conditions
 8006632:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8006636:	2b01      	cmp	r3, #1
 8006638:	d118      	bne.n	800666c <startBLETX+0x408>

        		//construct second packet for conditions
                sendval[4] = TX_LUX_WHITELUX;
 800663a:	2300      	movs	r3, #0
 800663c:	833b      	strh	r3, [r7, #24]
                memcpy(sendval, lightval, 8);
 800663e:	f107 0310 	add.w	r3, r7, #16
 8006642:	f107 0208 	add.w	r2, r7, #8
 8006646:	e892 0003 	ldmia.w	r2, {r0, r1}
 800664a:	e883 0003 	stmia.w	r3, {r0, r1}

                //and send it
        		if (P2PS_STM_App_Update_Int8(P2P_NOTIFY_CHAR_UUID, (uint8_t *)&sendval, numBytes) != BLE_STATUS_SUCCESS){
 800664e:	f897 2063 	ldrb.w	r2, [r7, #99]	; 0x63
 8006652:	f107 0310 	add.w	r3, r7, #16
 8006656:	4619      	mov	r1, r3
 8006658:	f64f 6042 	movw	r0, #65090	; 0xfe42
 800665c:	f008 fc10 	bl	800ee80 <P2PS_STM_App_Update_Int8>
 8006660:	4603      	mov	r3, r0
 8006662:	2b00      	cmp	r3, #0
 8006664:	d002      	beq.n	800666c <startBLETX+0x408>
        		        dataSuccessFlag = 0;
 8006666:	2300      	movs	r3, #0
 8006668:	f887 3062 	strb.w	r3, [r7, #98]	; 0x62
        	}

        }

        //if we had a data send failure, add current packet to the queue dynamically
        if (!dataSuccessFlag){
 800666c:	f897 3062 	ldrb.w	r3, [r7, #98]	; 0x62
 8006670:	2b00      	cmp	r3, #0
 8006672:	f47f ae0d 	bne.w	8006290 <startBLETX+0x2c>

        	//malloc the packet data
        	uint16_t *newPacketAddress = pvPortMalloc(numBytes);
 8006676:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 800667a:	4618      	mov	r0, r3
 800667c:	f00a fa78 	bl	8010b70 <pvPortMalloc>
 8006680:	64f8      	str	r0, [r7, #76]	; 0x4c
        	//copy the packet data in from sendval
        	memcpy(newPacketAddress, sendval, numBytes);
 8006682:	f897 2063 	ldrb.w	r2, [r7, #99]	; 0x63
 8006686:	f107 0310 	add.w	r3, r7, #16
 800668a:	4619      	mov	r1, r3
 800668c:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800668e:	f00d fbf5 	bl	8013e7c <memcpy>

        	//malloc the queue item that points to that data
        	UnsentQueue_t *newQueueItemAddress = pvPortMalloc(sizeof(UnsentQueue_t));
 8006692:	200c      	movs	r0, #12
 8006694:	f00a fa6c 	bl	8010b70 <pvPortMalloc>
 8006698:	64b8      	str	r0, [r7, #72]	; 0x48
        	//correctly fill the new Queue Item
        	newQueueItemAddress->packet = newPacketAddress;
 800669a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800669c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800669e:	601a      	str	r2, [r3, #0]
        	newQueueItemAddress->numBytes = numBytes;
 80066a0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80066a2:	f897 2063 	ldrb.w	r2, [r7, #99]	; 0x63
 80066a6:	711a      	strb	r2, [r3, #4]
        	newQueueItemAddress->next = NULL;
 80066a8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80066aa:	2200      	movs	r2, #0
 80066ac:	609a      	str	r2, [r3, #8]

        	//if DataQueue is empty, simply set the queue address to this one.
        	if (!DataQueue){ DataQueue = newQueueItemAddress; }
 80066ae:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d102      	bne.n	80066ba <startBLETX+0x456>
 80066b4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80066b6:	667b      	str	r3, [r7, #100]	; 0x64
 80066b8:	e00c      	b.n	80066d4 <startBLETX+0x470>
        	else {//otherwise traverse until we get null
        		UnsentQueueAddress_t current_node = DataQueue;
 80066ba:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80066bc:	65fb      	str	r3, [r7, #92]	; 0x5c
        		while (current_node->next){ //while the pointer to the next is not null
 80066be:	e002      	b.n	80066c6 <startBLETX+0x462>
        			current_node = current_node->next; //update current_node to next
 80066c0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80066c2:	689b      	ldr	r3, [r3, #8]
 80066c4:	65fb      	str	r3, [r7, #92]	; 0x5c
        		while (current_node->next){ //while the pointer to the next is not null
 80066c6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80066c8:	689b      	ldr	r3, [r3, #8]
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d1f8      	bne.n	80066c0 <startBLETX+0x45c>
        		}
        		current_node->next = newQueueItemAddress;
 80066ce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80066d0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80066d2:	609a      	str	r2, [r3, #8]
        	}

        	if (sendData.sendType == TX_TEMP_HUMD && sendval[4] == TX_TEMP_HUMD){
 80066d4:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 80066d8:	2b01      	cmp	r3, #1
 80066da:	f47f add9 	bne.w	8006290 <startBLETX+0x2c>
 80066de:	8b3b      	ldrh	r3, [r7, #24]
 80066e0:	2b01      	cmp	r3, #1
 80066e2:	f47f add5 	bne.w	8006290 <startBLETX+0x2c>
        		//if we're sending conditions and we didn't successfully move to second packet,
        		//add second packet to data queue as well
        		sendval[4] = TX_LUX_WHITELUX;
 80066e6:	2300      	movs	r3, #0
 80066e8:	833b      	strh	r3, [r7, #24]
        		memcpy(sendval, lightval, 8);
 80066ea:	f107 0310 	add.w	r3, r7, #16
 80066ee:	f107 0208 	add.w	r2, r7, #8
 80066f2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80066f6:	e883 0003 	stmia.w	r3, {r0, r1}

        		//malloc the packet data
				uint16_t *newPacketAddress = pvPortMalloc(numBytes);
 80066fa:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 80066fe:	4618      	mov	r0, r3
 8006700:	f00a fa36 	bl	8010b70 <pvPortMalloc>
 8006704:	6478      	str	r0, [r7, #68]	; 0x44
				//copy the packet data in from sendval
				memcpy(newPacketAddress, sendval, numBytes);
 8006706:	f897 2063 	ldrb.w	r2, [r7, #99]	; 0x63
 800670a:	f107 0310 	add.w	r3, r7, #16
 800670e:	4619      	mov	r1, r3
 8006710:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8006712:	f00d fbb3 	bl	8013e7c <memcpy>

				//malloc the queue item that points to that data
				UnsentQueue_t *newQueueItemAddress = pvPortMalloc(sizeof(UnsentQueue_t));
 8006716:	200c      	movs	r0, #12
 8006718:	f00a fa2a 	bl	8010b70 <pvPortMalloc>
 800671c:	6438      	str	r0, [r7, #64]	; 0x40
				//correctly fill the new Queue Item
				newQueueItemAddress->packet = newPacketAddress;
 800671e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006720:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006722:	601a      	str	r2, [r3, #0]
				newQueueItemAddress->numBytes = numBytes;
 8006724:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006726:	f897 2063 	ldrb.w	r2, [r7, #99]	; 0x63
 800672a:	711a      	strb	r2, [r3, #4]
				newQueueItemAddress->next = NULL;
 800672c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800672e:	2200      	movs	r2, #0
 8006730:	609a      	str	r2, [r3, #8]

				UnsentQueueAddress_t current_node = DataQueue;
 8006732:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006734:	65bb      	str	r3, [r7, #88]	; 0x58

				while (current_node->next){ //while the pointer to the next is not null
 8006736:	e002      	b.n	800673e <startBLETX+0x4da>
					current_node = current_node->next; //update current_node to next
 8006738:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800673a:	689b      	ldr	r3, [r3, #8]
 800673c:	65bb      	str	r3, [r7, #88]	; 0x58
				while (current_node->next){ //while the pointer to the next is not null
 800673e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006740:	689b      	ldr	r3, [r3, #8]
 8006742:	2b00      	cmp	r3, #0
 8006744:	d1f8      	bne.n	8006738 <startBLETX+0x4d4>
				}

				current_node->next = newQueueItemAddress;
 8006746:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006748:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800674a:	609a      	str	r2, [r3, #8]
        if (osMessageQueueGet(bleTXqueueHandle, &sendData, NULL, osWaitForever) == osOK){
 800674c:	e5a0      	b.n	8006290 <startBLETX+0x2c>
 800674e:	bf00      	nop
 8006750:	2002e244 	.word	0x2002e244
 8006754:	2002e0cc 	.word	0x2002e0cc
 8006758:	2002e088 	.word	0x2002e088

0800675c <startBLERX>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_startBLERX */
void startBLERX(void *argument)
{
 800675c:	b580      	push	{r7, lr}
 800675e:	b09c      	sub	sp, #112	; 0x70
 8006760:	af00      	add	r7, sp, #0
 8006762:	6078      	str	r0, [r7, #4]
  P2PS_STM_Data_t rxData;

  for(;;)
  {

	if (osMessageQueueGet(bleRXqueueHandle, &rxData, NULL, osWaitForever) == osOK){
 8006764:	4bb9      	ldr	r3, [pc, #740]	; (8006a4c <startBLERX+0x2f0>)
 8006766:	6818      	ldr	r0, [r3, #0]
 8006768:	f107 014c 	add.w	r1, r7, #76	; 0x4c
 800676c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006770:	2200      	movs	r2, #0
 8006772:	f009 ff13 	bl	801059c <osMessageQueueGet>
 8006776:	4603      	mov	r3, r0
 8006778:	2b00      	cmp	r3, #0
 800677a:	d1f3      	bne.n	8006764 <startBLERX+0x8>

		if (rxData.pPayload[0] == 0x00) { // timestamp update starts with 0x00
 800677c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800677e:	781b      	ldrb	r3, [r3, #0]
 8006780:	2b00      	cmp	r3, #0
 8006782:	f040 8106 	bne.w	8006992 <startBLERX+0x236>
			memcpy(&P2P_Server_App_Context.OTATimestamp, &(rxData.pPayload[1]), 8);
 8006786:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006788:	3301      	adds	r3, #1
 800678a:	2208      	movs	r2, #8
 800678c:	4619      	mov	r1, r3
 800678e:	48b0      	ldr	r0, [pc, #704]	; (8006a50 <startBLERX+0x2f4>)
 8006790:	f00d fb74 	bl	8013e7c <memcpy>
    	    P2P_Server_App_Context.OTA12HrFormat = rxData.pPayload[9];
 8006794:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006796:	7a5a      	ldrb	r2, [r3, #9]
 8006798:	4bae      	ldr	r3, [pc, #696]	; (8006a54 <startBLERX+0x2f8>)
 800679a:	741a      	strb	r2, [r3, #16]
    		P2P_Server_App_Context.OTADaylightSavings = rxData.pPayload[10];
 800679c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800679e:	7a9a      	ldrb	r2, [r3, #10]
 80067a0:	4bac      	ldr	r3, [pc, #688]	; (8006a54 <startBLERX+0x2f8>)
 80067a2:	745a      	strb	r2, [r3, #17]

    	    RTC_TimeTypeDef sTime = {0};
 80067a4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80067a8:	2200      	movs	r2, #0
 80067aa:	601a      	str	r2, [r3, #0]
 80067ac:	605a      	str	r2, [r3, #4]
 80067ae:	609a      	str	r2, [r3, #8]
 80067b0:	60da      	str	r2, [r3, #12]
 80067b2:	611a      	str	r2, [r3, #16]
    		RTC_DateTypeDef sDate = {0};
 80067b4:	2300      	movs	r3, #0
 80067b6:	637b      	str	r3, [r7, #52]	; 0x34

    		uint8_t timestampvals[8];
    		memcpy(timestampvals, &(P2P_Server_App_Context.OTATimestamp), 8);
 80067b8:	4aa6      	ldr	r2, [pc, #664]	; (8006a54 <startBLERX+0x2f8>)
 80067ba:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80067be:	3208      	adds	r2, #8
 80067c0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80067c4:	e883 0003 	stmia.w	r3, {r0, r1}

    		uint8_t AMPM = timestampvals[0];
 80067c8:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80067cc:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65

    		sTime.Hours      = timestampvals[4];
 80067d0:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80067d4:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
    		sTime.Minutes    = timestampvals[5];
 80067d8:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 80067dc:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
    		sTime.Seconds    = timestampvals[6];
 80067e0:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80067e4:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
    		sTime.SubSeconds = 0x0;
 80067e8:	2300      	movs	r3, #0
 80067ea:	63fb      	str	r3, [r7, #60]	; 0x3c
    		sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80067ec:	2300      	movs	r3, #0
 80067ee:	647b      	str	r3, [r7, #68]	; 0x44

    		if (P2P_Server_App_Context.OTADaylightSavings){ sTime.DayLightSaving = RTC_DAYLIGHTSAVING_ADD1H; }
 80067f0:	4b98      	ldr	r3, [pc, #608]	; (8006a54 <startBLERX+0x2f8>)
 80067f2:	7c5b      	ldrb	r3, [r3, #17]
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d002      	beq.n	80067fe <startBLERX+0xa2>
 80067f8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80067fc:	647b      	str	r3, [r7, #68]	; 0x44

    		sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80067fe:	2300      	movs	r3, #0
 8006800:	64bb      	str	r3, [r7, #72]	; 0x48

    		sDate.WeekDay = timestampvals[0];
 8006802:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8006806:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
    		sDate.Month   = timestampvals[1];
 800680a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800680e:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    		sDate.Date    = timestampvals[2];
 8006812:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8006816:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
    		sDate.Year    = timestampvals[3];
 800681a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800681e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

    		RTC_TimeTypeDef cTime;
   	        RTC_DateTypeDef cDate;

    		osMutexAcquire(rtcMutexHandle, portMAX_DELAY);
 8006822:	4b8d      	ldr	r3, [pc, #564]	; (8006a58 <startBLERX+0x2fc>)
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800682a:	4618      	mov	r0, r3
 800682c:	f009 fbb2 	bl	800ff94 <osMutexAcquire>
    		HAL_RTC_GetTime(&hrtc, &cTime, RTC_FORMAT_BCD);
 8006830:	f107 0318 	add.w	r3, r7, #24
 8006834:	2201      	movs	r2, #1
 8006836:	4619      	mov	r1, r3
 8006838:	4888      	ldr	r0, [pc, #544]	; (8006a5c <startBLERX+0x300>)
 800683a:	f004 fc76 	bl	800b12a <HAL_RTC_GetTime>
    		HAL_RTC_GetDate(&hrtc, &cDate, RTC_FORMAT_BCD);
 800683e:	f107 0314 	add.w	r3, r7, #20
 8006842:	2201      	movs	r2, #1
 8006844:	4619      	mov	r1, r3
 8006846:	4885      	ldr	r0, [pc, #532]	; (8006a5c <startBLERX+0x300>)
 8006848:	f004 fd79 	bl	800b33e <HAL_RTC_GetDate>
    		if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK) {Error_Handler();}
 800684c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8006850:	2201      	movs	r2, #1
 8006852:	4619      	mov	r1, r3
 8006854:	4881      	ldr	r0, [pc, #516]	; (8006a5c <startBLERX+0x300>)
 8006856:	f004 fba4 	bl	800afa2 <HAL_RTC_SetTime>
 800685a:	4603      	mov	r3, r0
 800685c:	2b00      	cmp	r3, #0
 800685e:	d001      	beq.n	8006864 <startBLERX+0x108>
 8006860:	f000 f9a4 	bl	8006bac <Error_Handler>
    		if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK) {Error_Handler();}
 8006864:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8006868:	2201      	movs	r2, #1
 800686a:	4619      	mov	r1, r3
 800686c:	487b      	ldr	r0, [pc, #492]	; (8006a5c <startBLERX+0x300>)
 800686e:	f004 fcb8 	bl	800b1e2 <HAL_RTC_SetDate>
 8006872:	4603      	mov	r3, r0
 8006874:	2b00      	cmp	r3, #0
 8006876:	d001      	beq.n	800687c <startBLERX+0x120>
 8006878:	f000 f998 	bl	8006bac <Error_Handler>
    	    osMutexRelease(rtcMutexHandle);
 800687c:	4b76      	ldr	r3, [pc, #472]	; (8006a58 <startBLERX+0x2fc>)
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	4618      	mov	r0, r3
 8006882:	f009 fbe5 	bl	8010050 <osMutexRelease>

    	    //calculate the seconds off between the two.
    	    uint8_t prev_hrs = RTC_Bcd2ToByte(cTime.Hours);
 8006886:	7e3b      	ldrb	r3, [r7, #24]
 8006888:	4618      	mov	r0, r3
 800688a:	f004 fe15 	bl	800b4b8 <RTC_Bcd2ToByte>
 800688e:	4603      	mov	r3, r0
 8006890:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
    	    uint8_t prev_min = RTC_Bcd2ToByte(cTime.Minutes);
 8006894:	7e7b      	ldrb	r3, [r7, #25]
 8006896:	4618      	mov	r0, r3
 8006898:	f004 fe0e 	bl	800b4b8 <RTC_Bcd2ToByte>
 800689c:	4603      	mov	r3, r0
 800689e:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63
    	    uint8_t prev_sec = RTC_Bcd2ToByte(cTime.Seconds);
 80068a2:	7ebb      	ldrb	r3, [r7, #26]
 80068a4:	4618      	mov	r0, r3
 80068a6:	f004 fe07 	bl	800b4b8 <RTC_Bcd2ToByte>
 80068aa:	4603      	mov	r3, r0
 80068ac:	f887 3062 	strb.w	r3, [r7, #98]	; 0x62

    	    uint8_t new_hrs = RTC_Bcd2ToByte(sTime.Hours);
 80068b0:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 80068b4:	4618      	mov	r0, r3
 80068b6:	f004 fdff 	bl	800b4b8 <RTC_Bcd2ToByte>
 80068ba:	4603      	mov	r3, r0
 80068bc:	f887 3061 	strb.w	r3, [r7, #97]	; 0x61
    	    uint8_t new_min = RTC_Bcd2ToByte(sTime.Minutes);
 80068c0:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 80068c4:	4618      	mov	r0, r3
 80068c6:	f004 fdf7 	bl	800b4b8 <RTC_Bcd2ToByte>
 80068ca:	4603      	mov	r3, r0
 80068cc:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
    	    uint8_t new_sec = RTC_Bcd2ToByte(sTime.Seconds);
 80068d0:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 80068d4:	4618      	mov	r0, r3
 80068d6:	f004 fdef 	bl	800b4b8 <RTC_Bcd2ToByte>
 80068da:	4603      	mov	r3, r0
 80068dc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

    	    int32_t new_totalsec = (60*60*new_hrs + 60*new_min + new_sec); //86400 sec in day
 80068e0:	f897 3061 	ldrb.w	r3, [r7, #97]	; 0x61
 80068e4:	f44f 6261 	mov.w	r2, #3600	; 0xe10
 80068e8:	fb02 f103 	mul.w	r1, r2, r3
 80068ec:	f897 2060 	ldrb.w	r2, [r7, #96]	; 0x60
 80068f0:	4613      	mov	r3, r2
 80068f2:	011b      	lsls	r3, r3, #4
 80068f4:	1a9b      	subs	r3, r3, r2
 80068f6:	009b      	lsls	r3, r3, #2
 80068f8:	18ca      	adds	r2, r1, r3
 80068fa:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80068fe:	4413      	add	r3, r2
 8006900:	65bb      	str	r3, [r7, #88]	; 0x58
    	    int32_t prev_totalsec = (60*60*prev_hrs + 60*prev_min + prev_sec);
 8006902:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 8006906:	f44f 6261 	mov.w	r2, #3600	; 0xe10
 800690a:	fb02 f103 	mul.w	r1, r2, r3
 800690e:	f897 2063 	ldrb.w	r2, [r7, #99]	; 0x63
 8006912:	4613      	mov	r3, r2
 8006914:	011b      	lsls	r3, r3, #4
 8006916:	1a9b      	subs	r3, r3, r2
 8006918:	009b      	lsls	r3, r3, #2
 800691a:	18ca      	adds	r2, r1, r3
 800691c:	f897 3062 	ldrb.w	r3, [r7, #98]	; 0x62
 8006920:	4413      	add	r3, r2
 8006922:	657b      	str	r3, [r7, #84]	; 0x54
    	    int32_t forward_diff;
    	    int32_t backward_diff;

    	    int16_t signed_sec_difference; //cant hold more than 9 hours difference

    	    if (new_totalsec > prev_totalsec) {
 8006924:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006926:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006928:	429a      	cmp	r2, r3
 800692a:	dd0a      	ble.n	8006942 <startBLERX+0x1e6>
    	    	forward_diff  = new_totalsec - prev_totalsec;
 800692c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800692e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006930:	1ad3      	subs	r3, r2, r3
 8006932:	66fb      	str	r3, [r7, #108]	; 0x6c
    	    	backward_diff = 86400 - forward_diff;
 8006934:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006936:	f5c3 33a8 	rsb	r3, r3, #86016	; 0x15000
 800693a:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 800693e:	66bb      	str	r3, [r7, #104]	; 0x68
 8006940:	e009      	b.n	8006956 <startBLERX+0x1fa>
    	    } else {
    	    	backward_diff = prev_totalsec - new_totalsec;
 8006942:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006944:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006946:	1ad3      	subs	r3, r2, r3
 8006948:	66bb      	str	r3, [r7, #104]	; 0x68
    	    	forward_diff  = 86400 - backward_diff;
 800694a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800694c:	f5c3 33a8 	rsb	r3, r3, #86016	; 0x15000
 8006950:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8006954:	66fb      	str	r3, [r7, #108]	; 0x6c
    	    }

    	    if (backward_diff < forward_diff){
 8006956:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006958:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800695a:	429a      	cmp	r2, r3
 800695c:	da06      	bge.n	800696c <startBLERX+0x210>
    	    	signed_sec_difference= -1 * backward_diff;
 800695e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006960:	b29b      	uxth	r3, r3
 8006962:	425b      	negs	r3, r3
 8006964:	b29b      	uxth	r3, r3
 8006966:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 800696a:	e002      	b.n	8006972 <startBLERX+0x216>
    	    }else {
    	    	signed_sec_difference = forward_diff;
 800696c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800696e:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
    	    }

    	    BLETX_Queue_t bleSendUpdate = {TX_TIMESTAMP_UPDATE, 0x00};
 8006972:	2307      	movs	r3, #7
 8006974:	743b      	strb	r3, [r7, #16]
 8006976:	2300      	movs	r3, #0
 8006978:	827b      	strh	r3, [r7, #18]
			bleSendUpdate.data = (uint16_t)signed_sec_difference;
 800697a:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 800697e:	827b      	strh	r3, [r7, #18]
			osMessageQueuePut(bleTXqueueHandle, &bleSendUpdate, 0, 0);
 8006980:	4b37      	ldr	r3, [pc, #220]	; (8006a60 <startBLERX+0x304>)
 8006982:	6818      	ldr	r0, [r3, #0]
 8006984:	f107 0110 	add.w	r1, r7, #16
 8006988:	2300      	movs	r3, #0
 800698a:	2200      	movs	r2, #0
 800698c:	f009 fd92 	bl	80104b4 <osMessageQueuePut>
 8006990:	e6e8      	b.n	8006764 <startBLERX+0x8>
		}

		else if (rxData.pPayload[0] == 0x01) {//change time bounds
 8006992:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006994:	781b      	ldrb	r3, [r3, #0]
 8006996:	2b01      	cmp	r3, #1
 8006998:	d118      	bne.n	80069cc <startBLERX+0x270>
			//startHR, endHR in BCD
			GlobalState.timeBound.startHR_BCD = rxData.pPayload[1];
 800699a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800699c:	785a      	ldrb	r2, [r3, #1]
 800699e:	4b31      	ldr	r3, [pc, #196]	; (8006a64 <startBLERX+0x308>)
 80069a0:	701a      	strb	r2, [r3, #0]
			GlobalState.timeBound.endHR_BCD  = rxData.pPayload[2];
 80069a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80069a4:	789a      	ldrb	r2, [r3, #2]
 80069a6:	4b2f      	ldr	r3, [pc, #188]	; (8006a64 <startBLERX+0x308>)
 80069a8:	705a      	strb	r2, [r3, #1]

			GlobalState.paused = 1;
 80069aa:	4b2e      	ldr	r3, [pc, #184]	; (8006a64 <startBLERX+0x308>)
 80069ac:	2201      	movs	r2, #1
 80069ae:	f883 20ed 	strb.w	r2, [r3, #237]	; 0xed
			const BLETX_Queue_t bleSendPause = {TX_BEGIN_PAUSE, 0x0000};
 80069b2:	2308      	movs	r3, #8
 80069b4:	733b      	strb	r3, [r7, #12]
 80069b6:	2300      	movs	r3, #0
 80069b8:	81fb      	strh	r3, [r7, #14]
			osMessageQueuePut(bleTXqueueHandle, &bleSendPause, 0, 0);
 80069ba:	4b29      	ldr	r3, [pc, #164]	; (8006a60 <startBLERX+0x304>)
 80069bc:	6818      	ldr	r0, [r3, #0]
 80069be:	f107 010c 	add.w	r1, r7, #12
 80069c2:	2300      	movs	r3, #0
 80069c4:	2200      	movs	r2, #0
 80069c6:	f009 fd75 	bl	80104b4 <osMessageQueuePut>
 80069ca:	e6cb      	b.n	8006764 <startBLERX+0x8>
		}

		else if (rxData.pPayload[0] == 0x02) {//pause or unpause watch
 80069cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80069ce:	781b      	ldrb	r3, [r3, #0]
 80069d0:	2b02      	cmp	r3, #2
 80069d2:	f47f aec7 	bne.w	8006764 <startBLERX+0x8>

			if (rxData.pPayload[1]) { //pause things
 80069d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80069d8:	3301      	adds	r3, #1
 80069da:	781b      	ldrb	r3, [r3, #0]
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d020      	beq.n	8006a22 <startBLERX+0x2c6>

				GlobalState.paused = 1;
 80069e0:	4b20      	ldr	r3, [pc, #128]	; (8006a64 <startBLERX+0x308>)
 80069e2:	2201      	movs	r2, #1
 80069e4:	f883 20ed 	strb.w	r2, [r3, #237]	; 0xed
				osMutexAcquire(modeMutexHandle, portMAX_DELAY);
 80069e8:	4b1f      	ldr	r3, [pc, #124]	; (8006a68 <startBLERX+0x30c>)
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80069f0:	4618      	mov	r0, r3
 80069f2:	f009 facf 	bl	800ff94 <osMutexAcquire>
				GlobalState.programMode = MODE_RESTING;
 80069f6:	4b1b      	ldr	r3, [pc, #108]	; (8006a64 <startBLERX+0x308>)
 80069f8:	2200      	movs	r2, #0
 80069fa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
				osMutexRelease(modeMutexHandle);
 80069fe:	4b1a      	ldr	r3, [pc, #104]	; (8006a68 <startBLERX+0x30c>)
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	4618      	mov	r0, r3
 8006a04:	f009 fb24 	bl	8010050 <osMutexRelease>
	    		const BLETX_Queue_t bleSendPause = {TX_BEGIN_PAUSE, 0x0000};
 8006a08:	2308      	movs	r3, #8
 8006a0a:	723b      	strb	r3, [r7, #8]
 8006a0c:	2300      	movs	r3, #0
 8006a0e:	817b      	strh	r3, [r7, #10]
	     		osMessageQueuePut(bleTXqueueHandle, &bleSendPause, 0, 0);
 8006a10:	4b13      	ldr	r3, [pc, #76]	; (8006a60 <startBLERX+0x304>)
 8006a12:	6818      	ldr	r0, [r3, #0]
 8006a14:	f107 0108 	add.w	r1, r7, #8
 8006a18:	2300      	movs	r3, #0
 8006a1a:	2200      	movs	r2, #0
 8006a1c:	f009 fd4a 	bl	80104b4 <osMessageQueuePut>
 8006a20:	e6a0      	b.n	8006764 <startBLERX+0x8>

			} else { //unpause things

				osMutexAcquire(modeMutexHandle, portMAX_DELAY);
 8006a22:	4b11      	ldr	r3, [pc, #68]	; (8006a68 <startBLERX+0x30c>)
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8006a2a:	4618      	mov	r0, r3
 8006a2c:	f009 fab2 	bl	800ff94 <osMutexAcquire>
				GlobalState.programMode = MODE_SHOW_TIME;
 8006a30:	4b0c      	ldr	r3, [pc, #48]	; (8006a64 <startBLERX+0x308>)
 8006a32:	2205      	movs	r2, #5
 8006a34:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
				osMutexRelease(modeMutexHandle);
 8006a38:	4b0b      	ldr	r3, [pc, #44]	; (8006a68 <startBLERX+0x30c>)
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	4618      	mov	r0, r3
 8006a3e:	f009 fb07 	bl	8010050 <osMutexRelease>
				GlobalState.paused = 0;
 8006a42:	4b08      	ldr	r3, [pc, #32]	; (8006a64 <startBLERX+0x308>)
 8006a44:	2200      	movs	r2, #0
 8006a46:	f883 20ed 	strb.w	r2, [r3, #237]	; 0xed
	if (osMessageQueueGet(bleRXqueueHandle, &rxData, NULL, osWaitForever) == osOK){
 8006a4a:	e68b      	b.n	8006764 <startBLERX+0x8>
 8006a4c:	2002e07c 	.word	0x2002e07c
 8006a50:	2002e090 	.word	0x2002e090
 8006a54:	2002e088 	.word	0x2002e088
 8006a58:	2002e0c8 	.word	0x2002e0c8
 8006a5c:	2002e0a4 	.word	0x2002e0a4
 8006a60:	2002e2b0 	.word	0x2002e2b0
 8006a64:	2002e0cc 	.word	0x2002e0cc
 8006a68:	2002e250 	.word	0x2002e250

08006a6c <PeriphClock_Config>:
  /* USER CODE END startBLERX */
}


void PeriphClock_Config(void)
{
 8006a6c:	b480      	push	{r7}
 8006a6e:	af00      	add	r7, sp, #0

	/* Start automatic synchronization */
	HAL_RCCEx_CRSConfig(&RCC_CRSInitStruct);
#endif

	return;
 8006a70:	bf00      	nop
}
 8006a72:	46bd      	mov	sp, r7
 8006a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a78:	4770      	bx	lr

08006a7a <Config_HSE>:
 * LOCAL FUNCTIONS
 *
 *************************************************************/

static void Config_HSE(void)
{
 8006a7a:	b580      	push	{r7, lr}
 8006a7c:	b082      	sub	sp, #8
 8006a7e:	af00      	add	r7, sp, #0
    OTP_ID0_t * p_otp;

  /**
   * Read HSE_Tuning from OTP
   */
  p_otp = (OTP_ID0_t *) OTP_Read(0);
 8006a80:	2000      	movs	r0, #0
 8006a82:	f008 fad3 	bl	800f02c <OTP_Read>
 8006a86:	6078      	str	r0, [r7, #4]
  if (p_otp)
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d005      	beq.n	8006a9a <Config_HSE+0x20>
  {
    LL_RCC_HSE_SetCapacitorTuning(p_otp->hse_tuning);
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	799b      	ldrb	r3, [r3, #6]
 8006a92:	4618      	mov	r0, r3
 8006a94:	f7fd f96e 	bl	8003d74 <LL_RCC_HSE_SetCapacitorTuning>
  }

  return;
 8006a98:	bf00      	nop
 8006a9a:	bf00      	nop
}  
 8006a9c:	3708      	adds	r7, #8
 8006a9e:	46bd      	mov	sp, r7
 8006aa0:	bd80      	pop	{r7, pc}

08006aa2 <Reset_Device>:

static void Reset_Device( void )
{
 8006aa2:	b580      	push	{r7, lr}
 8006aa4:	af00      	add	r7, sp, #0
#if ( CFG_HW_RESET_BY_FW == 1 )
	Reset_BackupDomain();
 8006aa6:	f000 f827 	bl	8006af8 <Reset_BackupDomain>

	Reset_IPCC();
 8006aaa:	f000 f803 	bl	8006ab4 <Reset_IPCC>
#endif

	return;
 8006aae:	bf00      	nop
}
 8006ab0:	bd80      	pop	{r7, pc}
	...

08006ab4 <Reset_IPCC>:

static void Reset_IPCC( void )
{
 8006ab4:	b580      	push	{r7, lr}
 8006ab6:	af00      	add	r7, sp, #0
	LL_AHB3_GRP1_EnableClock(LL_AHB3_GRP1_PERIPH_IPCC);
 8006ab8:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8006abc:	f7fd f9ef 	bl	8003e9e <LL_AHB3_GRP1_EnableClock>

	LL_C1_IPCC_ClearFlag_CHx(
 8006ac0:	213f      	movs	r1, #63	; 0x3f
 8006ac2:	480c      	ldr	r0, [pc, #48]	; (8006af4 <Reset_IPCC+0x40>)
 8006ac4:	f7fd fa4a 	bl	8003f5c <LL_C1_IPCC_ClearFlag_CHx>
			IPCC,
			LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
			| LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

	LL_C2_IPCC_ClearFlag_CHx(
 8006ac8:	213f      	movs	r1, #63	; 0x3f
 8006aca:	480a      	ldr	r0, [pc, #40]	; (8006af4 <Reset_IPCC+0x40>)
 8006acc:	f7fd fa54 	bl	8003f78 <LL_C2_IPCC_ClearFlag_CHx>
			IPCC,
			LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
			| LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

	LL_C1_IPCC_DisableTransmitChannel(
 8006ad0:	213f      	movs	r1, #63	; 0x3f
 8006ad2:	4808      	ldr	r0, [pc, #32]	; (8006af4 <Reset_IPCC+0x40>)
 8006ad4:	f7fd f9fc 	bl	8003ed0 <LL_C1_IPCC_DisableTransmitChannel>
			IPCC,
			LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
			| LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

	LL_C2_IPCC_DisableTransmitChannel(
 8006ad8:	213f      	movs	r1, #63	; 0x3f
 8006ada:	4806      	ldr	r0, [pc, #24]	; (8006af4 <Reset_IPCC+0x40>)
 8006adc:	f7fd fa1b 	bl	8003f16 <LL_C2_IPCC_DisableTransmitChannel>
			IPCC,
			LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
			| LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

	LL_C1_IPCC_DisableReceiveChannel(
 8006ae0:	213f      	movs	r1, #63	; 0x3f
 8006ae2:	4804      	ldr	r0, [pc, #16]	; (8006af4 <Reset_IPCC+0x40>)
 8006ae4:	f7fd fa06 	bl	8003ef4 <LL_C1_IPCC_DisableReceiveChannel>
			IPCC,
			LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
			| LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

	LL_C2_IPCC_DisableReceiveChannel(
 8006ae8:	213f      	movs	r1, #63	; 0x3f
 8006aea:	4802      	ldr	r0, [pc, #8]	; (8006af4 <Reset_IPCC+0x40>)
 8006aec:	f7fd fa25 	bl	8003f3a <LL_C2_IPCC_DisableReceiveChannel>
			IPCC,
			LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
			| LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

	return;
 8006af0:	bf00      	nop
}
 8006af2:	bd80      	pop	{r7, pc}
 8006af4:	58000c00 	.word	0x58000c00

08006af8 <Reset_BackupDomain>:

static void Reset_BackupDomain( void )
{
 8006af8:	b580      	push	{r7, lr}
 8006afa:	af00      	add	r7, sp, #0
	if ((LL_RCC_IsActiveFlag_PINRST() != FALSE) && (LL_RCC_IsActiveFlag_SFTRST() == FALSE))
 8006afc:	f7fd f990 	bl	8003e20 <LL_RCC_IsActiveFlag_PINRST>
 8006b00:	4603      	mov	r3, r0
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d00d      	beq.n	8006b22 <Reset_BackupDomain+0x2a>
 8006b06:	f7fd f99e 	bl	8003e46 <LL_RCC_IsActiveFlag_SFTRST>
 8006b0a:	4603      	mov	r3, r0
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d108      	bne.n	8006b22 <Reset_BackupDomain+0x2a>
	{
		HAL_PWR_EnableBkUpAccess(); /**< Enable access to the RTC registers */
 8006b10:	f002 fb9c 	bl	800924c <HAL_PWR_EnableBkUpAccess>

		/**
		 *  Write twice the value to flush the APB-AHB bridge
		 *  This bit shall be written in the register before writing the next one
		 */
		HAL_PWR_EnableBkUpAccess();
 8006b14:	f002 fb9a 	bl	800924c <HAL_PWR_EnableBkUpAccess>

		__HAL_RCC_BACKUPRESET_FORCE();
 8006b18:	f7fd f960 	bl	8003ddc <LL_RCC_ForceBackupDomainReset>
		__HAL_RCC_BACKUPRESET_RELEASE();
 8006b1c:	f7fd f96f 	bl	8003dfe <LL_RCC_ReleaseBackupDomainReset>
	}

	return;
 8006b20:	bf00      	nop
 8006b22:	bf00      	nop
}
 8006b24:	bd80      	pop	{r7, pc}

08006b26 <Init_Exti>:

static void Init_Exti( void )
{
 8006b26:	b580      	push	{r7, lr}
 8006b28:	af00      	add	r7, sp, #0
  /**< Disable all wakeup interrupt on CPU1  except IPCC(36), HSEM(38) */
  LL_EXTI_DisableIT_0_31(~0);
 8006b2a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006b2e:	f7fd f8f5 	bl	8003d1c <LL_EXTI_DisableIT_0_31>
  LL_EXTI_DisableIT_32_63( (~0) & (~(LL_EXTI_LINE_36 | LL_EXTI_LINE_38)) );
 8006b32:	f06f 0050 	mvn.w	r0, #80	; 0x50
 8006b36:	f7fd f907 	bl	8003d48 <LL_EXTI_DisableIT_32_63>

  return;
 8006b3a:	bf00      	nop
}
 8006b3c:	bd80      	pop	{r7, pc}

08006b3e <HAL_Delay>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void HAL_Delay(uint32_t Delay)
{
 8006b3e:	b580      	push	{r7, lr}
 8006b40:	b084      	sub	sp, #16
 8006b42:	af00      	add	r7, sp, #0
 8006b44:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8006b46:	f001 f845 	bl	8007bd4 <HAL_GetTick>
 8006b4a:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006b56:	d00a      	beq.n	8006b6e <HAL_Delay+0x30>
  {
    wait += HAL_GetTickFreq();
 8006b58:	f001 f854 	bl	8007c04 <HAL_GetTickFreq>
 8006b5c:	4603      	mov	r3, r0
 8006b5e:	461a      	mov	r2, r3
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	4413      	add	r3, r2
 8006b64:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8006b66:	e002      	b.n	8006b6e <HAL_Delay+0x30>
  {
    /************************************************************************************
     * ENTER SLEEP MODE
     ***********************************************************************************/
    LL_LPM_EnableSleep( ); /**< Clear SLEEPDEEP bit of Cortex System Control Register */
 8006b68:	f7fd fa14 	bl	8003f94 <LL_LPM_EnableSleep>
     */
  #if defined ( __CC_ARM)
    __force_stores();
  #endif

    __WFI( );
 8006b6c:	bf30      	wfi
  while ((HAL_GetTick() - tickstart) < wait)
 8006b6e:	f001 f831 	bl	8007bd4 <HAL_GetTick>
 8006b72:	4602      	mov	r2, r0
 8006b74:	68bb      	ldr	r3, [r7, #8]
 8006b76:	1ad3      	subs	r3, r2, r3
 8006b78:	68fa      	ldr	r2, [r7, #12]
 8006b7a:	429a      	cmp	r2, r3
 8006b7c:	d8f4      	bhi.n	8006b68 <HAL_Delay+0x2a>
  }
}
 8006b7e:	bf00      	nop
 8006b80:	3710      	adds	r7, #16
 8006b82:	46bd      	mov	sp, r7
 8006b84:	bd80      	pop	{r7, pc}
	...

08006b88 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006b88:	b580      	push	{r7, lr}
 8006b8a:	b082      	sub	sp, #8
 8006b8c:	af00      	add	r7, sp, #0
 8006b8e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM17) {
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	4a04      	ldr	r2, [pc, #16]	; (8006ba8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8006b96:	4293      	cmp	r3, r2
 8006b98:	d101      	bne.n	8006b9e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8006b9a:	f001 f807 	bl	8007bac <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8006b9e:	bf00      	nop
 8006ba0:	3708      	adds	r7, #8
 8006ba2:	46bd      	mov	sp, r7
 8006ba4:	bd80      	pop	{r7, pc}
 8006ba6:	bf00      	nop
 8006ba8:	40014800 	.word	0x40014800

08006bac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8006bac:	b480      	push	{r7}
 8006bae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
 
  /* USER CODE END Error_Handler_Debug */
}
 8006bb0:	bf00      	nop
 8006bb2:	46bd      	mov	sp, r7
 8006bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bb8:	4770      	bx	lr
 8006bba:	0000      	movs	r0, r0
 8006bbc:	0000      	movs	r0, r0
	...

08006bc0 <_read_and_convert_temperature>:
  return id;
}

// Helper to read and convert temperature into uint format
static float _read_and_convert_temperature(I2C_HandleTypeDef *hi2c)
{
 8006bc0:	b590      	push	{r4, r7, lr}
 8006bc2:	b089      	sub	sp, #36	; 0x24
 8006bc4:	af02      	add	r7, sp, #8
 8006bc6:	6078      	str	r0, [r7, #4]
  uint8_t si7021_buf[4];
  int res = HAL_I2C_Master_Receive(hi2c, SI7021_ADDRESS_READ, si7021_buf, 2, 100);
 8006bc8:	f107 0208 	add.w	r2, r7, #8
 8006bcc:	2364      	movs	r3, #100	; 0x64
 8006bce:	9300      	str	r3, [sp, #0]
 8006bd0:	2302      	movs	r3, #2
 8006bd2:	2181      	movs	r1, #129	; 0x81
 8006bd4:	6878      	ldr	r0, [r7, #4]
 8006bd6:	f001 fcf5 	bl	80085c4 <HAL_I2C_Master_Receive>
 8006bda:	4603      	mov	r3, r0
 8006bdc:	617b      	str	r3, [r7, #20]

  if (res != HAL_OK) {
 8006bde:	697b      	ldr	r3, [r7, #20]
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d001      	beq.n	8006be8 <_read_and_convert_temperature+0x28>
    return SI7021_MEASURE_FAILED;
 8006be4:	4b2a      	ldr	r3, [pc, #168]	; (8006c90 <_read_and_convert_temperature+0xd0>)
 8006be6:	e03f      	b.n	8006c68 <_read_and_convert_temperature+0xa8>
  }

  int16_t temp_code = (si7021_buf[0] << 8 | si7021_buf[1]);
 8006be8:	7a3b      	ldrb	r3, [r7, #8]
 8006bea:	021b      	lsls	r3, r3, #8
 8006bec:	b21a      	sxth	r2, r3
 8006bee:	7a7b      	ldrb	r3, [r7, #9]
 8006bf0:	b21b      	sxth	r3, r3
 8006bf2:	4313      	orrs	r3, r2
 8006bf4:	827b      	strh	r3, [r7, #18]
  float temp = 175.72 * temp_code / 65535.00 - 46.85;
 8006bf6:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8006bfa:	4618      	mov	r0, r3
 8006bfc:	f7f9 fc6a 	bl	80004d4 <__aeabi_i2d>
 8006c00:	a31d      	add	r3, pc, #116	; (adr r3, 8006c78 <_read_and_convert_temperature+0xb8>)
 8006c02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c06:	f7f9 fccf 	bl	80005a8 <__aeabi_dmul>
 8006c0a:	4603      	mov	r3, r0
 8006c0c:	460c      	mov	r4, r1
 8006c0e:	4618      	mov	r0, r3
 8006c10:	4621      	mov	r1, r4
 8006c12:	a31b      	add	r3, pc, #108	; (adr r3, 8006c80 <_read_and_convert_temperature+0xc0>)
 8006c14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c18:	f7f9 fdf0 	bl	80007fc <__aeabi_ddiv>
 8006c1c:	4603      	mov	r3, r0
 8006c1e:	460c      	mov	r4, r1
 8006c20:	4618      	mov	r0, r3
 8006c22:	4621      	mov	r1, r4
 8006c24:	a318      	add	r3, pc, #96	; (adr r3, 8006c88 <_read_and_convert_temperature+0xc8>)
 8006c26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c2a:	f7f9 fb05 	bl	8000238 <__aeabi_dsub>
 8006c2e:	4603      	mov	r3, r0
 8006c30:	460c      	mov	r4, r1
 8006c32:	4618      	mov	r0, r3
 8006c34:	4621      	mov	r1, r4
 8006c36:	f7f9 ff8f 	bl	8000b58 <__aeabi_d2f>
 8006c3a:	4603      	mov	r3, r0
 8006c3c:	60fb      	str	r3, [r7, #12]

  if (temp > 125.00 || temp < -40.00) {
 8006c3e:	edd7 7a03 	vldr	s15, [r7, #12]
 8006c42:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8006c94 <_read_and_convert_temperature+0xd4>
 8006c46:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006c4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006c4e:	dc08      	bgt.n	8006c62 <_read_and_convert_temperature+0xa2>
 8006c50:	edd7 7a03 	vldr	s15, [r7, #12]
 8006c54:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8006c98 <_read_and_convert_temperature+0xd8>
 8006c58:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006c5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006c60:	d501      	bpl.n	8006c66 <_read_and_convert_temperature+0xa6>
    return SI7021_MEASURE_FAILED;
 8006c62:	4b0b      	ldr	r3, [pc, #44]	; (8006c90 <_read_and_convert_temperature+0xd0>)
 8006c64:	e000      	b.n	8006c68 <_read_and_convert_temperature+0xa8>
  }

  return temp;
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	ee07 3a90 	vmov	s15, r3
}
 8006c6c:	eeb0 0a67 	vmov.f32	s0, s15
 8006c70:	371c      	adds	r7, #28
 8006c72:	46bd      	mov	sp, r7
 8006c74:	bd90      	pop	{r4, r7, pc}
 8006c76:	bf00      	nop
 8006c78:	3d70a3d7 	.word	0x3d70a3d7
 8006c7c:	4065f70a 	.word	0x4065f70a
 8006c80:	00000000 	.word	0x00000000
 8006c84:	40efffe0 	.word	0x40efffe0
 8006c88:	cccccccd 	.word	0xcccccccd
 8006c8c:	40476ccc 	.word	0x40476ccc
 8006c90:	477fff00 	.word	0x477fff00
 8006c94:	42fa0000 	.word	0x42fa0000
 8006c98:	c2200000 	.word	0xc2200000

08006c9c <si7021_set_config>:

  return (uint64_t)id1 << 32 | id2;
}

uint32_t si7021_set_config(I2C_HandleTypeDef *hi2c, uint8_t heater, uint8_t resolution)
{
 8006c9c:	b580      	push	{r7, lr}
 8006c9e:	b086      	sub	sp, #24
 8006ca0:	af02      	add	r7, sp, #8
 8006ca2:	6078      	str	r0, [r7, #4]
 8006ca4:	460b      	mov	r3, r1
 8006ca6:	70fb      	strb	r3, [r7, #3]
 8006ca8:	4613      	mov	r3, r2
 8006caa:	70bb      	strb	r3, [r7, #2]
  uint8_t si7021_buf[4];
  si7021_buf[0] = SI7021_WRITE_USER_REG1;
 8006cac:	23e6      	movs	r3, #230	; 0xe6
 8006cae:	733b      	strb	r3, [r7, #12]
  si7021_buf[1] = heater | resolution;
 8006cb0:	78fa      	ldrb	r2, [r7, #3]
 8006cb2:	78bb      	ldrb	r3, [r7, #2]
 8006cb4:	4313      	orrs	r3, r2
 8006cb6:	b2db      	uxtb	r3, r3
 8006cb8:	737b      	strb	r3, [r7, #13]

  return HAL_I2C_Master_Transmit(hi2c, SI7021_ADDRESS_WRITE, &si7021_buf[0], 2, 100);
 8006cba:	f107 020c 	add.w	r2, r7, #12
 8006cbe:	2364      	movs	r3, #100	; 0x64
 8006cc0:	9300      	str	r3, [sp, #0]
 8006cc2:	2302      	movs	r3, #2
 8006cc4:	2180      	movs	r1, #128	; 0x80
 8006cc6:	6878      	ldr	r0, [r7, #4]
 8006cc8:	f001 fb88 	bl	80083dc <HAL_I2C_Master_Transmit>
 8006ccc:	4603      	mov	r3, r0
}
 8006cce:	4618      	mov	r0, r3
 8006cd0:	3710      	adds	r7, #16
 8006cd2:	46bd      	mov	sp, r7
 8006cd4:	bd80      	pop	{r7, pc}

08006cd6 <si7021_set_heater_power>:

uint32_t si7021_set_heater_power(I2C_HandleTypeDef *hi2c, uint8_t power)
{
 8006cd6:	b580      	push	{r7, lr}
 8006cd8:	b086      	sub	sp, #24
 8006cda:	af02      	add	r7, sp, #8
 8006cdc:	6078      	str	r0, [r7, #4]
 8006cde:	460b      	mov	r3, r1
 8006ce0:	70fb      	strb	r3, [r7, #3]
  uint8_t si7021_buf[4];
  si7021_buf[0] = SI7021_WRITE_HEATER_REG;
 8006ce2:	2351      	movs	r3, #81	; 0x51
 8006ce4:	733b      	strb	r3, [r7, #12]
  si7021_buf[1] = power;
 8006ce6:	78fb      	ldrb	r3, [r7, #3]
 8006ce8:	737b      	strb	r3, [r7, #13]

  return HAL_I2C_Master_Transmit(hi2c, SI7021_ADDRESS_WRITE, si7021_buf, 2, 100);
 8006cea:	f107 020c 	add.w	r2, r7, #12
 8006cee:	2364      	movs	r3, #100	; 0x64
 8006cf0:	9300      	str	r3, [sp, #0]
 8006cf2:	2302      	movs	r3, #2
 8006cf4:	2180      	movs	r1, #128	; 0x80
 8006cf6:	6878      	ldr	r0, [r7, #4]
 8006cf8:	f001 fb70 	bl	80083dc <HAL_I2C_Master_Transmit>
 8006cfc:	4603      	mov	r3, r0
}
 8006cfe:	4618      	mov	r0, r3
 8006d00:	3710      	adds	r7, #16
 8006d02:	46bd      	mov	sp, r7
 8006d04:	bd80      	pop	{r7, pc}
	...

08006d08 <si7021_measure_humidity>:

float si7021_measure_humidity(I2C_HandleTypeDef *hi2c)
{
 8006d08:	b590      	push	{r4, r7, lr}
 8006d0a:	b087      	sub	sp, #28
 8006d0c:	af02      	add	r7, sp, #8
 8006d0e:	6078      	str	r0, [r7, #4]
  uint8_t si7021_buf[4];
  si7021_buf[0] = SI7021_MEASURE_NOHOLD;
 8006d10:	23f5      	movs	r3, #245	; 0xf5
 8006d12:	723b      	strb	r3, [r7, #8]

  // Start measure
  int res = HAL_I2C_Master_Transmit(hi2c, SI7021_ADDRESS_WRITE, si7021_buf, 1, 100);
 8006d14:	f107 0208 	add.w	r2, r7, #8
 8006d18:	2364      	movs	r3, #100	; 0x64
 8006d1a:	9300      	str	r3, [sp, #0]
 8006d1c:	2301      	movs	r3, #1
 8006d1e:	2180      	movs	r1, #128	; 0x80
 8006d20:	6878      	ldr	r0, [r7, #4]
 8006d22:	f001 fb5b 	bl	80083dc <HAL_I2C_Master_Transmit>
 8006d26:	4603      	mov	r3, r0
 8006d28:	60fb      	str	r3, [r7, #12]
  if (res != HAL_OK) {
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d001      	beq.n	8006d34 <si7021_measure_humidity+0x2c>
    return SI7021_MEASURE_FAILED;
 8006d30:	4b20      	ldr	r3, [pc, #128]	; (8006db4 <si7021_measure_humidity+0xac>)
 8006d32:	e037      	b.n	8006da4 <si7021_measure_humidity+0x9c>
  }
  HAL_Delay(30);
 8006d34:	201e      	movs	r0, #30
 8006d36:	f7ff ff02 	bl	8006b3e <HAL_Delay>

  // Read result
  res = HAL_I2C_Master_Receive(hi2c, SI7021_ADDRESS_READ, si7021_buf, 2, 100);
 8006d3a:	f107 0208 	add.w	r2, r7, #8
 8006d3e:	2364      	movs	r3, #100	; 0x64
 8006d40:	9300      	str	r3, [sp, #0]
 8006d42:	2302      	movs	r3, #2
 8006d44:	2181      	movs	r1, #129	; 0x81
 8006d46:	6878      	ldr	r0, [r7, #4]
 8006d48:	f001 fc3c 	bl	80085c4 <HAL_I2C_Master_Receive>
 8006d4c:	4603      	mov	r3, r0
 8006d4e:	60fb      	str	r3, [r7, #12]
  if (res != HAL_OK) {
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d001      	beq.n	8006d5a <si7021_measure_humidity+0x52>
    return SI7021_MEASURE_FAILED;
 8006d56:	4b17      	ldr	r3, [pc, #92]	; (8006db4 <si7021_measure_humidity+0xac>)
 8006d58:	e024      	b.n	8006da4 <si7021_measure_humidity+0x9c>
  }

  return (si7021_buf[0] << 8 | si7021_buf[1]) * 125.0 / 65536.0 - 6.0;
 8006d5a:	7a3b      	ldrb	r3, [r7, #8]
 8006d5c:	021b      	lsls	r3, r3, #8
 8006d5e:	7a7a      	ldrb	r2, [r7, #9]
 8006d60:	4313      	orrs	r3, r2
 8006d62:	4618      	mov	r0, r3
 8006d64:	f7f9 fbb6 	bl	80004d4 <__aeabi_i2d>
 8006d68:	f04f 0200 	mov.w	r2, #0
 8006d6c:	4b12      	ldr	r3, [pc, #72]	; (8006db8 <si7021_measure_humidity+0xb0>)
 8006d6e:	f7f9 fc1b 	bl	80005a8 <__aeabi_dmul>
 8006d72:	4603      	mov	r3, r0
 8006d74:	460c      	mov	r4, r1
 8006d76:	4618      	mov	r0, r3
 8006d78:	4621      	mov	r1, r4
 8006d7a:	f04f 0200 	mov.w	r2, #0
 8006d7e:	4b0f      	ldr	r3, [pc, #60]	; (8006dbc <si7021_measure_humidity+0xb4>)
 8006d80:	f7f9 fd3c 	bl	80007fc <__aeabi_ddiv>
 8006d84:	4603      	mov	r3, r0
 8006d86:	460c      	mov	r4, r1
 8006d88:	4618      	mov	r0, r3
 8006d8a:	4621      	mov	r1, r4
 8006d8c:	f04f 0200 	mov.w	r2, #0
 8006d90:	4b0b      	ldr	r3, [pc, #44]	; (8006dc0 <si7021_measure_humidity+0xb8>)
 8006d92:	f7f9 fa51 	bl	8000238 <__aeabi_dsub>
 8006d96:	4603      	mov	r3, r0
 8006d98:	460c      	mov	r4, r1
 8006d9a:	4618      	mov	r0, r3
 8006d9c:	4621      	mov	r1, r4
 8006d9e:	f7f9 fedb 	bl	8000b58 <__aeabi_d2f>
 8006da2:	4603      	mov	r3, r0
 8006da4:	ee07 3a90 	vmov	s15, r3
}
 8006da8:	eeb0 0a67 	vmov.f32	s0, s15
 8006dac:	3714      	adds	r7, #20
 8006dae:	46bd      	mov	sp, r7
 8006db0:	bd90      	pop	{r4, r7, pc}
 8006db2:	bf00      	nop
 8006db4:	477fff00 	.word	0x477fff00
 8006db8:	405f4000 	.word	0x405f4000
 8006dbc:	40f00000 	.word	0x40f00000
 8006dc0:	40180000 	.word	0x40180000

08006dc4 <si7021_measure_temperature>:

float si7021_measure_temperature(I2C_HandleTypeDef *hi2c)
{
 8006dc4:	b580      	push	{r7, lr}
 8006dc6:	b086      	sub	sp, #24
 8006dc8:	af02      	add	r7, sp, #8
 8006dca:	6078      	str	r0, [r7, #4]
  uint8_t si7021_buf[4];
  si7021_buf[0] = SI7021_MEASURE_TEMP_NOHOLD;
 8006dcc:	23f3      	movs	r3, #243	; 0xf3
 8006dce:	723b      	strb	r3, [r7, #8]

  int res = HAL_I2C_Master_Transmit(hi2c, SI7021_ADDRESS_WRITE, &si7021_buf[0], 1, 100);
 8006dd0:	f107 0208 	add.w	r2, r7, #8
 8006dd4:	2364      	movs	r3, #100	; 0x64
 8006dd6:	9300      	str	r3, [sp, #0]
 8006dd8:	2301      	movs	r3, #1
 8006dda:	2180      	movs	r1, #128	; 0x80
 8006ddc:	6878      	ldr	r0, [r7, #4]
 8006dde:	f001 fafd 	bl	80083dc <HAL_I2C_Master_Transmit>
 8006de2:	4603      	mov	r3, r0
 8006de4:	60fb      	str	r3, [r7, #12]
  if (res != HAL_OK) {
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d002      	beq.n	8006df2 <si7021_measure_temperature+0x2e>
    return SI7021_MEASURE_FAILED;
 8006dec:	eddf 7a07 	vldr	s15, [pc, #28]	; 8006e0c <si7021_measure_temperature+0x48>
 8006df0:	e007      	b.n	8006e02 <si7021_measure_temperature+0x3e>
  }
  HAL_Delay(30);
 8006df2:	201e      	movs	r0, #30
 8006df4:	f7ff fea3 	bl	8006b3e <HAL_Delay>

  return _read_and_convert_temperature(hi2c);
 8006df8:	6878      	ldr	r0, [r7, #4]
 8006dfa:	f7ff fee1 	bl	8006bc0 <_read_and_convert_temperature>
 8006dfe:	eef0 7a40 	vmov.f32	s15, s0
}
 8006e02:	eeb0 0a67 	vmov.f32	s0, s15
 8006e06:	3710      	adds	r7, #16
 8006e08:	46bd      	mov	sp, r7
 8006e0a:	bd80      	pop	{r7, pc}
 8006e0c:	477fff00 	.word	0x477fff00

08006e10 <LL_RCC_SetRTCClockSource>:
{
 8006e10:	b480      	push	{r7}
 8006e12:	b083      	sub	sp, #12
 8006e14:	af00      	add	r7, sp, #0
 8006e16:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8006e18:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006e1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006e20:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006e24:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	4313      	orrs	r3, r2
 8006e2c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8006e30:	bf00      	nop
 8006e32:	370c      	adds	r7, #12
 8006e34:	46bd      	mov	sp, r7
 8006e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e3a:	4770      	bx	lr

08006e3c <LL_RCC_EnableRTC>:
{
 8006e3c:	b480      	push	{r7}
 8006e3e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 8006e40:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006e44:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006e48:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006e4c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006e50:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8006e54:	bf00      	nop
 8006e56:	46bd      	mov	sp, r7
 8006e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e5c:	4770      	bx	lr

08006e5e <LL_AHB2_GRP1_EnableClock>:
{
 8006e5e:	b480      	push	{r7}
 8006e60:	b085      	sub	sp, #20
 8006e62:	af00      	add	r7, sp, #0
 8006e64:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8006e66:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006e6a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006e6c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	4313      	orrs	r3, r2
 8006e74:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8006e76:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006e7a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	4013      	ands	r3, r2
 8006e80:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8006e82:	68fb      	ldr	r3, [r7, #12]
}
 8006e84:	bf00      	nop
 8006e86:	3714      	adds	r7, #20
 8006e88:	46bd      	mov	sp, r7
 8006e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e8e:	4770      	bx	lr

08006e90 <LL_AHB3_GRP1_EnableClock>:
{
 8006e90:	b480      	push	{r7}
 8006e92:	b085      	sub	sp, #20
 8006e94:	af00      	add	r7, sp, #0
 8006e96:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 8006e98:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006e9c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006e9e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	4313      	orrs	r3, r2
 8006ea6:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8006ea8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006eac:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	4013      	ands	r3, r2
 8006eb2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8006eb4:	68fb      	ldr	r3, [r7, #12]
}
 8006eb6:	bf00      	nop
 8006eb8:	3714      	adds	r7, #20
 8006eba:	46bd      	mov	sp, r7
 8006ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ec0:	4770      	bx	lr

08006ec2 <LL_APB1_GRP1_EnableClock>:
{
 8006ec2:	b480      	push	{r7}
 8006ec4:	b085      	sub	sp, #20
 8006ec6:	af00      	add	r7, sp, #0
 8006ec8:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8006eca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006ece:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8006ed0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	4313      	orrs	r3, r2
 8006ed8:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8006eda:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006ede:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	4013      	ands	r3, r2
 8006ee4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8006ee6:	68fb      	ldr	r3, [r7, #12]
}
 8006ee8:	bf00      	nop
 8006eea:	3714      	adds	r7, #20
 8006eec:	46bd      	mov	sp, r7
 8006eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ef2:	4770      	bx	lr

08006ef4 <LL_APB2_GRP1_EnableClock>:
{
 8006ef4:	b480      	push	{r7}
 8006ef6:	b085      	sub	sp, #20
 8006ef8:	af00      	add	r7, sp, #0
 8006efa:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8006efc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006f00:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8006f02:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	4313      	orrs	r3, r2
 8006f0a:	660b      	str	r3, [r1, #96]	; 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8006f0c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006f10:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	4013      	ands	r3, r2
 8006f16:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8006f18:	68fb      	ldr	r3, [r7, #12]
}
 8006f1a:	bf00      	nop
 8006f1c:	3714      	adds	r7, #20
 8006f1e:	46bd      	mov	sp, r7
 8006f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f24:	4770      	bx	lr

08006f26 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8006f26:	b580      	push	{r7, lr}
 8006f28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_HSEM_CLK_ENABLE();
 8006f2a:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8006f2e:	f7ff ffaf 	bl	8006e90 <LL_AHB3_GRP1_EnableClock>

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8006f32:	2200      	movs	r2, #0
 8006f34:	210f      	movs	r1, #15
 8006f36:	f06f 0001 	mvn.w	r0, #1
 8006f3a:	f000 ff91 	bl	8007e60 <HAL_NVIC_SetPriority>

  /* Peripheral interrupt init */
  /* HSEM_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HSEM_IRQn, 5, 0);
 8006f3e:	2200      	movs	r2, #0
 8006f40:	2105      	movs	r1, #5
 8006f42:	202e      	movs	r0, #46	; 0x2e
 8006f44:	f000 ff8c 	bl	8007e60 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HSEM_IRQn);
 8006f48:	202e      	movs	r0, #46	; 0x2e
 8006f4a:	f000 ffa3 	bl	8007e94 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  HAL_NVIC_SetPriority(IPCC_C1_RX_IRQn , 6, 0);
 8006f4e:	2200      	movs	r2, #0
 8006f50:	2106      	movs	r1, #6
 8006f52:	202c      	movs	r0, #44	; 0x2c
 8006f54:	f000 ff84 	bl	8007e60 <HAL_NVIC_SetPriority>
  HAL_NVIC_SetPriority(IPCC_C1_TX_IRQn , 6, 0);
 8006f58:	2200      	movs	r2, #0
 8006f5a:	2106      	movs	r1, #6
 8006f5c:	202d      	movs	r0, #45	; 0x2d
 8006f5e:	f000 ff7f 	bl	8007e60 <HAL_NVIC_SetPriority>

  /* USER CODE END MspInit 1 */
}
 8006f62:	bf00      	nop
 8006f64:	bd80      	pop	{r7, pc}
	...

08006f68 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8006f68:	b580      	push	{r7, lr}
 8006f6a:	b082      	sub	sp, #8
 8006f6c:	af00      	add	r7, sp, #0
 8006f6e:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	4a0b      	ldr	r2, [pc, #44]	; (8006fa4 <HAL_RTC_MspInit+0x3c>)
 8006f76:	4293      	cmp	r3, r2
 8006f78:	d110      	bne.n	8006f9c <HAL_RTC_MspInit+0x34>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */
  HAL_PWR_EnableBkUpAccess(); /**< Enable access to the RTC registers */
 8006f7a:	f002 f967 	bl	800924c <HAL_PWR_EnableBkUpAccess>

  /**
  *  Write twice the value to flush the APB-AHB bridge
  *  This bit shall be written in the register before writing the next one
  */
  HAL_PWR_EnableBkUpAccess();
 8006f7e:	f002 f965 	bl	800924c <HAL_PWR_EnableBkUpAccess>

  __HAL_RCC_RTC_CONFIG(RCC_RTCCLKSOURCE_LSE); /**< Select LSI as RTC Input */
 8006f82:	f44f 7080 	mov.w	r0, #256	; 0x100
 8006f86:	f7ff ff43 	bl	8006e10 <LL_RCC_SetRTCClockSource>
  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8006f8a:	f7ff ff57 	bl	8006e3c <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8006f8e:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8006f92:	f7ff ff96 	bl	8006ec2 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN RTC_MspInit 1 */
  HAL_RTCEx_EnableBypassShadow(hrtc);
 8006f96:	6878      	ldr	r0, [r7, #4]
 8006f98:	f004 faaa 	bl	800b4f0 <HAL_RTCEx_EnableBypassShadow>
  /* USER CODE END RTC_MspInit 1 */
  }

}
 8006f9c:	bf00      	nop
 8006f9e:	3708      	adds	r7, #8
 8006fa0:	46bd      	mov	sp, r7
 8006fa2:	bd80      	pop	{r7, pc}
 8006fa4:	40002800 	.word	0x40002800

08006fa8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8006fa8:	b580      	push	{r7, lr}
 8006faa:	b088      	sub	sp, #32
 8006fac:	af00      	add	r7, sp, #0
 8006fae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006fb0:	f107 030c 	add.w	r3, r7, #12
 8006fb4:	2200      	movs	r2, #0
 8006fb6:	601a      	str	r2, [r3, #0]
 8006fb8:	605a      	str	r2, [r3, #4]
 8006fba:	609a      	str	r2, [r3, #8]
 8006fbc:	60da      	str	r2, [r3, #12]
 8006fbe:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	4a0f      	ldr	r2, [pc, #60]	; (8007004 <HAL_I2C_MspInit+0x5c>)
 8006fc6:	4293      	cmp	r3, r2
 8006fc8:	d117      	bne.n	8006ffa <HAL_I2C_MspInit+0x52>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006fca:	2002      	movs	r0, #2
 8006fcc:	f7ff ff47 	bl	8006e5e <LL_AHB2_GRP1_EnableClock>
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8006fd0:	f44f 7340 	mov.w	r3, #768	; 0x300
 8006fd4:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8006fd6:	2312      	movs	r3, #18
 8006fd8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006fda:	2301      	movs	r3, #1
 8006fdc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006fde:	2300      	movs	r3, #0
 8006fe0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8006fe2:	2304      	movs	r3, #4
 8006fe4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006fe6:	f107 030c 	add.w	r3, r7, #12
 8006fea:	4619      	mov	r1, r3
 8006fec:	4806      	ldr	r0, [pc, #24]	; (8007008 <HAL_I2C_MspInit+0x60>)
 8006fee:	f000 ff89 	bl	8007f04 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8006ff2:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8006ff6:	f7ff ff64 	bl	8006ec2 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8006ffa:	bf00      	nop
 8006ffc:	3720      	adds	r7, #32
 8006ffe:	46bd      	mov	sp, r7
 8007000:	bd80      	pop	{r7, pc}
 8007002:	bf00      	nop
 8007004:	40005400 	.word	0x40005400
 8007008:	48000400 	.word	0x48000400

0800700c <HAL_SPI_MspInit>:
  }

}

void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800700c:	b580      	push	{r7, lr}
 800700e:	b088      	sub	sp, #32
 8007010:	af00      	add	r7, sp, #0
 8007012:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007014:	f107 030c 	add.w	r3, r7, #12
 8007018:	2200      	movs	r2, #0
 800701a:	601a      	str	r2, [r3, #0]
 800701c:	605a      	str	r2, [r3, #4]
 800701e:	609a      	str	r2, [r3, #8]
 8007020:	60da      	str	r2, [r3, #12]
 8007022:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	4a0f      	ldr	r2, [pc, #60]	; (8007068 <HAL_SPI_MspInit+0x5c>)
 800702a:	4293      	cmp	r3, r2
 800702c:	d117      	bne.n	800705e <HAL_SPI_MspInit+0x52>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800702e:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8007032:	f7ff ff5f 	bl	8006ef4 <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007036:	2001      	movs	r0, #1
 8007038:	f7ff ff11 	bl	8006e5e <LL_AHB2_GRP1_EnableClock>
    /**SPI1 GPIO Configuration
    PA1     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_7;
 800703c:	2382      	movs	r3, #130	; 0x82
 800703e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007040:	2302      	movs	r3, #2
 8007042:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007044:	2300      	movs	r3, #0
 8007046:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007048:	2300      	movs	r3, #0
 800704a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800704c:	2305      	movs	r3, #5
 800704e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007050:	f107 030c 	add.w	r3, r7, #12
 8007054:	4619      	mov	r1, r3
 8007056:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800705a:	f000 ff53 	bl	8007f04 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800705e:	bf00      	nop
 8007060:	3720      	adds	r7, #32
 8007062:	46bd      	mov	sp, r7
 8007064:	bd80      	pop	{r7, pc}
 8007066:	bf00      	nop
 8007068:	40013000 	.word	0x40013000

0800706c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800706c:	b580      	push	{r7, lr}
 800706e:	b082      	sub	sp, #8
 8007070:	af00      	add	r7, sp, #0
 8007072:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	4a09      	ldr	r2, [pc, #36]	; (80070a0 <HAL_TIM_Base_MspInit+0x34>)
 800707a:	4293      	cmp	r3, r2
 800707c:	d10b      	bne.n	8007096 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800707e:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8007082:	f7ff ff37 	bl	8006ef4 <LL_APB2_GRP1_EnableClock>
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 15, 0);
 8007086:	2200      	movs	r2, #0
 8007088:	210f      	movs	r1, #15
 800708a:	2019      	movs	r0, #25
 800708c:	f000 fee8 	bl	8007e60 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8007090:	2019      	movs	r0, #25
 8007092:	f000 feff 	bl	8007e94 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8007096:	bf00      	nop
 8007098:	3708      	adds	r7, #8
 800709a:	46bd      	mov	sp, r7
 800709c:	bd80      	pop	{r7, pc}
 800709e:	bf00      	nop
 80070a0:	40012c00 	.word	0x40012c00

080070a4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80070a4:	b580      	push	{r7, lr}
 80070a6:	b088      	sub	sp, #32
 80070a8:	af00      	add	r7, sp, #0
 80070aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80070ac:	f107 030c 	add.w	r3, r7, #12
 80070b0:	2200      	movs	r2, #0
 80070b2:	601a      	str	r2, [r3, #0]
 80070b4:	605a      	str	r2, [r3, #4]
 80070b6:	609a      	str	r2, [r3, #8]
 80070b8:	60da      	str	r2, [r3, #12]
 80070ba:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	4a0d      	ldr	r2, [pc, #52]	; (80070f8 <HAL_TIM_MspPostInit+0x54>)
 80070c2:	4293      	cmp	r3, r2
 80070c4:	d114      	bne.n	80070f0 <HAL_TIM_MspPostInit+0x4c>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80070c6:	2001      	movs	r0, #1
 80070c8:	f7ff fec9 	bl	8006e5e <LL_AHB2_GRP1_EnableClock>
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80070cc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80070d0:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80070d2:	2302      	movs	r3, #2
 80070d4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80070d6:	2300      	movs	r3, #0
 80070d8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80070da:	2300      	movs	r3, #0
 80070dc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80070de:	2301      	movs	r3, #1
 80070e0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80070e2:	f107 030c 	add.w	r3, r7, #12
 80070e6:	4619      	mov	r1, r3
 80070e8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80070ec:	f000 ff0a 	bl	8007f04 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80070f0:	bf00      	nop
 80070f2:	3720      	adds	r7, #32
 80070f4:	46bd      	mov	sp, r7
 80070f6:	bd80      	pop	{r7, pc}
 80070f8:	40012c00 	.word	0x40012c00

080070fc <LL_APB2_GRP1_EnableClock>:
{
 80070fc:	b480      	push	{r7}
 80070fe:	b085      	sub	sp, #20
 8007100:	af00      	add	r7, sp, #0
 8007102:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8007104:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007108:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800710a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	4313      	orrs	r3, r2
 8007112:	660b      	str	r3, [r1, #96]	; 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8007114:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007118:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	4013      	ands	r3, r2
 800711e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8007120:	68fb      	ldr	r3, [r7, #12]
}
 8007122:	bf00      	nop
 8007124:	3714      	adds	r7, #20
 8007126:	46bd      	mov	sp, r7
 8007128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800712c:	4770      	bx	lr
	...

08007130 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8007130:	b580      	push	{r7, lr}
 8007132:	b08c      	sub	sp, #48	; 0x30
 8007134:	af00      	add	r7, sp, #0
 8007136:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8007138:	2300      	movs	r3, #0
 800713a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 800713c:	2300      	movs	r3, #0
 800713e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM17 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, TickPriority ,0);
 8007140:	2200      	movs	r2, #0
 8007142:	6879      	ldr	r1, [r7, #4]
 8007144:	201a      	movs	r0, #26
 8007146:	f000 fe8b 	bl	8007e60 <HAL_NVIC_SetPriority>

  /* Enable the TIM17 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 800714a:	201a      	movs	r0, #26
 800714c:	f000 fea2 	bl	8007e94 <HAL_NVIC_EnableIRQ>
  /* Enable TIM17 clock */
  __HAL_RCC_TIM17_CLK_ENABLE();
 8007150:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8007154:	f7ff ffd2 	bl	80070fc <LL_APB2_GRP1_EnableClock>

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8007158:	f107 0208 	add.w	r2, r7, #8
 800715c:	f107 030c 	add.w	r3, r7, #12
 8007160:	4611      	mov	r1, r2
 8007162:	4618      	mov	r0, r3
 8007164:	f003 f972 	bl	800a44c <HAL_RCC_GetClockConfig>

  /* Compute TIM17 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8007168:	f003 f95a 	bl	800a420 <HAL_RCC_GetPCLK2Freq>
 800716c:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM17 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800716e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007170:	4a12      	ldr	r2, [pc, #72]	; (80071bc <HAL_InitTick+0x8c>)
 8007172:	fba2 2303 	umull	r2, r3, r2, r3
 8007176:	0c9b      	lsrs	r3, r3, #18
 8007178:	3b01      	subs	r3, #1
 800717a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM17 */
  htim17.Instance = TIM17;
 800717c:	4b10      	ldr	r3, [pc, #64]	; (80071c0 <HAL_InitTick+0x90>)
 800717e:	4a11      	ldr	r2, [pc, #68]	; (80071c4 <HAL_InitTick+0x94>)
 8007180:	601a      	str	r2, [r3, #0]
  + Period = [(TIM17CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim17.Init.Period = (1000000U / 1000U) - 1U;
 8007182:	4b0f      	ldr	r3, [pc, #60]	; (80071c0 <HAL_InitTick+0x90>)
 8007184:	f240 32e7 	movw	r2, #999	; 0x3e7
 8007188:	60da      	str	r2, [r3, #12]
  htim17.Init.Prescaler = uwPrescalerValue;
 800718a:	4a0d      	ldr	r2, [pc, #52]	; (80071c0 <HAL_InitTick+0x90>)
 800718c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800718e:	6053      	str	r3, [r2, #4]
  htim17.Init.ClockDivision = 0;
 8007190:	4b0b      	ldr	r3, [pc, #44]	; (80071c0 <HAL_InitTick+0x90>)
 8007192:	2200      	movs	r2, #0
 8007194:	611a      	str	r2, [r3, #16]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8007196:	4b0a      	ldr	r3, [pc, #40]	; (80071c0 <HAL_InitTick+0x90>)
 8007198:	2200      	movs	r2, #0
 800719a:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim17) == HAL_OK)
 800719c:	4808      	ldr	r0, [pc, #32]	; (80071c0 <HAL_InitTick+0x90>)
 800719e:	f004 fd4b 	bl	800bc38 <HAL_TIM_Base_Init>
 80071a2:	4603      	mov	r3, r0
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d104      	bne.n	80071b2 <HAL_InitTick+0x82>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim17);
 80071a8:	4805      	ldr	r0, [pc, #20]	; (80071c0 <HAL_InitTick+0x90>)
 80071aa:	f004 fd9d 	bl	800bce8 <HAL_TIM_Base_Start_IT>
 80071ae:	4603      	mov	r3, r0
 80071b0:	e000      	b.n	80071b4 <HAL_InitTick+0x84>
  }

  /* Return function status */
  return HAL_ERROR;
 80071b2:	2301      	movs	r3, #1
}
 80071b4:	4618      	mov	r0, r3
 80071b6:	3730      	adds	r7, #48	; 0x30
 80071b8:	46bd      	mov	sp, r7
 80071ba:	bd80      	pop	{r7, pc}
 80071bc:	431bde83 	.word	0x431bde83
 80071c0:	2002e324 	.word	0x2002e324
 80071c4:	40014800 	.word	0x40014800

080071c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80071c8:	b480      	push	{r7}
 80071ca:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80071cc:	bf00      	nop
 80071ce:	46bd      	mov	sp, r7
 80071d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071d4:	4770      	bx	lr

080071d6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80071d6:	b480      	push	{r7}
 80071d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80071da:	e7fe      	b.n	80071da <HardFault_Handler+0x4>

080071dc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80071dc:	b480      	push	{r7}
 80071de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80071e0:	e7fe      	b.n	80071e0 <MemManage_Handler+0x4>

080071e2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80071e2:	b480      	push	{r7}
 80071e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80071e6:	e7fe      	b.n	80071e6 <BusFault_Handler+0x4>

080071e8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80071e8:	b480      	push	{r7}
 80071ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80071ec:	e7fe      	b.n	80071ec <UsageFault_Handler+0x4>

080071ee <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80071ee:	b480      	push	{r7}
 80071f0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80071f2:	bf00      	nop
 80071f4:	46bd      	mov	sp, r7
 80071f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071fa:	4770      	bx	lr

080071fc <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM17 global interrupt.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 80071fc:	b580      	push	{r7, lr}
 80071fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 8007200:	4802      	ldr	r0, [pc, #8]	; (800720c <TIM1_TRG_COM_TIM17_IRQHandler+0x10>)
 8007202:	f004 ff83 	bl	800c10c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 8007206:	bf00      	nop
 8007208:	bd80      	pop	{r7, pc}
 800720a:	bf00      	nop
 800720c:	2002e324 	.word	0x2002e324

08007210 <HSEM_IRQHandler>:

/**
  * @brief This function handles HSEM global interrupt.
  */
void HSEM_IRQHandler(void)
{
 8007210:	b580      	push	{r7, lr}
 8007212:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HSEM_IRQn 0 */

  /* USER CODE END HSEM_IRQn 0 */
  HAL_HSEM_IRQHandler();
 8007214:	f001 f82e 	bl	8008274 <HAL_HSEM_IRQHandler>
  /* USER CODE BEGIN HSEM_IRQn 1 */

  /* USER CODE END HSEM_IRQn 1 */
}
 8007218:	bf00      	nop
 800721a:	bd80      	pop	{r7, pc}

0800721c <EXTI3_IRQHandler>:
 *         interrupt request.
 * @param  None
 * @retval None
 */
void EXTI3_IRQHandler(void)
{
 800721c:	b580      	push	{r7, lr}
 800721e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8007220:	2008      	movs	r0, #8
 8007222:	f001 f80f 	bl	8008244 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8007226:	bf00      	nop
 8007228:	bd80      	pop	{r7, pc}

0800722a <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 800722a:	b580      	push	{r7, lr}
 800722c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 800722e:	2010      	movs	r0, #16
 8007230:	f001 f808 	bl	8008244 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8007234:	bf00      	nop
 8007236:	bd80      	pop	{r7, pc}

08007238 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8007238:	b580      	push	{r7, lr}
 800723a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 800723c:	2020      	movs	r0, #32
 800723e:	f001 f801 	bl	8008244 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8007242:	bf00      	nop
 8007244:	bd80      	pop	{r7, pc}
	...

08007248 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8007248:	b580      	push	{r7, lr}
 800724a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800724c:	4802      	ldr	r0, [pc, #8]	; (8007258 <TIM1_UP_TIM16_IRQHandler+0x10>)
 800724e:	f004 ff5d 	bl	800c10c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8007252:	bf00      	nop
 8007254:	bd80      	pop	{r7, pc}
 8007256:	bf00      	nop
 8007258:	2002e264 	.word	0x2002e264

0800725c <RTC_WKUP_IRQHandler>:

void RTC_WKUP_IRQHandler(void)
{
 800725c:	b580      	push	{r7, lr}
 800725e:	af00      	add	r7, sp, #0
  HW_TS_RTC_Wakeup_Handler();
 8007260:	f7fb ff3c 	bl	80030dc <HW_TS_RTC_Wakeup_Handler>
}
 8007264:	bf00      	nop
 8007266:	bd80      	pop	{r7, pc}

08007268 <IPCC_C1_TX_IRQHandler>:

void IPCC_C1_TX_IRQHandler(void)
{
 8007268:	b580      	push	{r7, lr}
 800726a:	af00      	add	r7, sp, #0
  HW_IPCC_Tx_Handler();
 800726c:	f7fa fb2a 	bl	80018c4 <HW_IPCC_Tx_Handler>

  return;
 8007270:	bf00      	nop
}
 8007272:	bd80      	pop	{r7, pc}

08007274 <IPCC_C1_RX_IRQHandler>:

void IPCC_C1_RX_IRQHandler(void)
{
 8007274:	b580      	push	{r7, lr}
 8007276:	af00      	add	r7, sp, #0
  HW_IPCC_Rx_Handler();
 8007278:	f7fa faec 	bl	8001854 <HW_IPCC_Rx_Handler>
  return;
 800727c:	bf00      	nop
}
 800727e:	bd80      	pop	{r7, pc}

08007280 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8007280:	b580      	push	{r7, lr}
 8007282:	b086      	sub	sp, #24
 8007284:	af00      	add	r7, sp, #0
 8007286:	60f8      	str	r0, [r7, #12]
 8007288:	60b9      	str	r1, [r7, #8]
 800728a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800728c:	2300      	movs	r3, #0
 800728e:	617b      	str	r3, [r7, #20]
 8007290:	e00a      	b.n	80072a8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8007292:	f3af 8000 	nop.w
 8007296:	4601      	mov	r1, r0
 8007298:	68bb      	ldr	r3, [r7, #8]
 800729a:	1c5a      	adds	r2, r3, #1
 800729c:	60ba      	str	r2, [r7, #8]
 800729e:	b2ca      	uxtb	r2, r1
 80072a0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80072a2:	697b      	ldr	r3, [r7, #20]
 80072a4:	3301      	adds	r3, #1
 80072a6:	617b      	str	r3, [r7, #20]
 80072a8:	697a      	ldr	r2, [r7, #20]
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	429a      	cmp	r2, r3
 80072ae:	dbf0      	blt.n	8007292 <_read+0x12>
	}

return len;
 80072b0:	687b      	ldr	r3, [r7, #4]
}
 80072b2:	4618      	mov	r0, r3
 80072b4:	3718      	adds	r7, #24
 80072b6:	46bd      	mov	sp, r7
 80072b8:	bd80      	pop	{r7, pc}

080072ba <_close>:
	}
	return len;
}

int _close(int file)
{
 80072ba:	b480      	push	{r7}
 80072bc:	b083      	sub	sp, #12
 80072be:	af00      	add	r7, sp, #0
 80072c0:	6078      	str	r0, [r7, #4]
	return -1;
 80072c2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80072c6:	4618      	mov	r0, r3
 80072c8:	370c      	adds	r7, #12
 80072ca:	46bd      	mov	sp, r7
 80072cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072d0:	4770      	bx	lr

080072d2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80072d2:	b480      	push	{r7}
 80072d4:	b083      	sub	sp, #12
 80072d6:	af00      	add	r7, sp, #0
 80072d8:	6078      	str	r0, [r7, #4]
 80072da:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80072dc:	683b      	ldr	r3, [r7, #0]
 80072de:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80072e2:	605a      	str	r2, [r3, #4]
	return 0;
 80072e4:	2300      	movs	r3, #0
}
 80072e6:	4618      	mov	r0, r3
 80072e8:	370c      	adds	r7, #12
 80072ea:	46bd      	mov	sp, r7
 80072ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072f0:	4770      	bx	lr

080072f2 <_isatty>:

int _isatty(int file)
{
 80072f2:	b480      	push	{r7}
 80072f4:	b083      	sub	sp, #12
 80072f6:	af00      	add	r7, sp, #0
 80072f8:	6078      	str	r0, [r7, #4]
	return 1;
 80072fa:	2301      	movs	r3, #1
}
 80072fc:	4618      	mov	r0, r3
 80072fe:	370c      	adds	r7, #12
 8007300:	46bd      	mov	sp, r7
 8007302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007306:	4770      	bx	lr

08007308 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8007308:	b480      	push	{r7}
 800730a:	b085      	sub	sp, #20
 800730c:	af00      	add	r7, sp, #0
 800730e:	60f8      	str	r0, [r7, #12]
 8007310:	60b9      	str	r1, [r7, #8]
 8007312:	607a      	str	r2, [r7, #4]
	return 0;
 8007314:	2300      	movs	r3, #0
}
 8007316:	4618      	mov	r0, r3
 8007318:	3714      	adds	r7, #20
 800731a:	46bd      	mov	sp, r7
 800731c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007320:	4770      	bx	lr
	...

08007324 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8007324:	b580      	push	{r7, lr}
 8007326:	b084      	sub	sp, #16
 8007328:	af00      	add	r7, sp, #0
 800732a:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800732c:	4b11      	ldr	r3, [pc, #68]	; (8007374 <_sbrk+0x50>)
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	2b00      	cmp	r3, #0
 8007332:	d102      	bne.n	800733a <_sbrk+0x16>
		heap_end = &end;
 8007334:	4b0f      	ldr	r3, [pc, #60]	; (8007374 <_sbrk+0x50>)
 8007336:	4a10      	ldr	r2, [pc, #64]	; (8007378 <_sbrk+0x54>)
 8007338:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800733a:	4b0e      	ldr	r3, [pc, #56]	; (8007374 <_sbrk+0x50>)
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8007340:	4b0c      	ldr	r3, [pc, #48]	; (8007374 <_sbrk+0x50>)
 8007342:	681a      	ldr	r2, [r3, #0]
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	4413      	add	r3, r2
 8007348:	466a      	mov	r2, sp
 800734a:	4293      	cmp	r3, r2
 800734c:	d907      	bls.n	800735e <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800734e:	f00c fd6b 	bl	8013e28 <__errno>
 8007352:	4602      	mov	r2, r0
 8007354:	230c      	movs	r3, #12
 8007356:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8007358:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800735c:	e006      	b.n	800736c <_sbrk+0x48>
	}

	heap_end += incr;
 800735e:	4b05      	ldr	r3, [pc, #20]	; (8007374 <_sbrk+0x50>)
 8007360:	681a      	ldr	r2, [r3, #0]
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	4413      	add	r3, r2
 8007366:	4a03      	ldr	r2, [pc, #12]	; (8007374 <_sbrk+0x50>)
 8007368:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800736a:	68fb      	ldr	r3, [r7, #12]
}
 800736c:	4618      	mov	r0, r3
 800736e:	3710      	adds	r7, #16
 8007370:	46bd      	mov	sp, r7
 8007372:	bd80      	pop	{r7, pc}
 8007374:	200003a4 	.word	0x200003a4
 8007378:	2002e410 	.word	0x2002e410

0800737c <veml_PushState>:
  HAL_I2C_Master_Transmit(&VEML_State.i2cHandle, VEML_ADDR, Data, 3, HAL_MAX_DELAY);
}



HAL_StatusTypeDef veml_PushState(){ //helper to push power/gain/it to VEML7700
 800737c:	b580      	push	{r7, lr}
 800737e:	b086      	sub	sp, #24
 8007380:	af04      	add	r7, sp, #16

	//main config register; gain and integration time
	HAL_StatusTypeDef resp = HAL_ERROR;
 8007382:	2301      	movs	r3, #1
 8007384:	71fb      	strb	r3, [r7, #7]
	uint8_t out_data[2] = {0x00, 0x00};
 8007386:	2300      	movs	r3, #0
 8007388:	713b      	strb	r3, [r7, #4]
 800738a:	2300      	movs	r3, #0
 800738c:	717b      	strb	r3, [r7, #5]
	out_data[1] |= (VEML_State.gain << 3);
 800738e:	797b      	ldrb	r3, [r7, #5]
 8007390:	b25a      	sxtb	r2, r3
 8007392:	4b33      	ldr	r3, [pc, #204]	; (8007460 <veml_PushState+0xe4>)
 8007394:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8007398:	00db      	lsls	r3, r3, #3
 800739a:	b25b      	sxtb	r3, r3
 800739c:	4313      	orrs	r3, r2
 800739e:	b25b      	sxtb	r3, r3
 80073a0:	b2db      	uxtb	r3, r3
 80073a2:	717b      	strb	r3, [r7, #5]
	out_data[1] |= ((VEML_State.integrationTime & 0x0C) >> 2);
 80073a4:	797b      	ldrb	r3, [r7, #5]
 80073a6:	b25a      	sxtb	r2, r3
 80073a8:	4b2d      	ldr	r3, [pc, #180]	; (8007460 <veml_PushState+0xe4>)
 80073aa:	f893 304f 	ldrb.w	r3, [r3, #79]	; 0x4f
 80073ae:	109b      	asrs	r3, r3, #2
 80073b0:	b25b      	sxtb	r3, r3
 80073b2:	f003 0303 	and.w	r3, r3, #3
 80073b6:	b25b      	sxtb	r3, r3
 80073b8:	4313      	orrs	r3, r2
 80073ba:	b25b      	sxtb	r3, r3
 80073bc:	b2db      	uxtb	r3, r3
 80073be:	717b      	strb	r3, [r7, #5]
	out_data[0] |= ((VEML_State.integrationTime & 0x03) << 6);
 80073c0:	793b      	ldrb	r3, [r7, #4]
 80073c2:	b25a      	sxtb	r2, r3
 80073c4:	4b26      	ldr	r3, [pc, #152]	; (8007460 <veml_PushState+0xe4>)
 80073c6:	f893 304f 	ldrb.w	r3, [r3, #79]	; 0x4f
 80073ca:	019b      	lsls	r3, r3, #6
 80073cc:	b25b      	sxtb	r3, r3
 80073ce:	4313      	orrs	r3, r2
 80073d0:	b25b      	sxtb	r3, r3
 80073d2:	b2db      	uxtb	r3, r3
 80073d4:	713b      	strb	r3, [r7, #4]
	out_data[0] |= (VEML7700_PERS_1 << 4);
 80073d6:	793b      	ldrb	r3, [r7, #4]
 80073d8:	713b      	strb	r3, [r7, #4]

	//out_data |= (VEML_State.gain << 11);
	//out_data |= (VEML_State.integrationTime << 6);
	//out_data |= (VEML7700_PERS_1 << 4);

	while (resp == HAL_ERROR){
 80073da:	e00e      	b.n	80073fa <veml_PushState+0x7e>
	  resp = HAL_I2C_Mem_Write(&(VEML_State.i2cHandle),
 80073dc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80073e0:	9302      	str	r3, [sp, #8]
 80073e2:	2302      	movs	r3, #2
 80073e4:	9301      	str	r3, [sp, #4]
 80073e6:	1d3b      	adds	r3, r7, #4
 80073e8:	9300      	str	r3, [sp, #0]
 80073ea:	2301      	movs	r3, #1
 80073ec:	2200      	movs	r2, #0
 80073ee:	2120      	movs	r1, #32
 80073f0:	481b      	ldr	r0, [pc, #108]	; (8007460 <veml_PushState+0xe4>)
 80073f2:	f001 f9dd 	bl	80087b0 <HAL_I2C_Mem_Write>
 80073f6:	4603      	mov	r3, r0
 80073f8:	71fb      	strb	r3, [r7, #7]
	while (resp == HAL_ERROR){
 80073fa:	79fb      	ldrb	r3, [r7, #7]
 80073fc:	2b01      	cmp	r3, #1
 80073fe:	d0ed      	beq.n	80073dc <veml_PushState+0x60>
	  						   HAL_MAX_DELAY);
	  //I2C_Write_16b(VEML7700_ALS_CONFIG, out_data);
	}

	//power save config register
	resp = HAL_ERROR;
 8007400:	2301      	movs	r3, #1
 8007402:	71fb      	strb	r3, [r7, #7]
	out_data[0] = 0x00;
 8007404:	2300      	movs	r3, #0
 8007406:	713b      	strb	r3, [r7, #4]
	out_data[1] = 0x00;
 8007408:	2300      	movs	r3, #0
 800740a:	717b      	strb	r3, [r7, #5]

	out_data[0] |= (VEML_State.powerSaveMode << 1);
 800740c:	793b      	ldrb	r3, [r7, #4]
 800740e:	b25a      	sxtb	r2, r3
 8007410:	4b13      	ldr	r3, [pc, #76]	; (8007460 <veml_PushState+0xe4>)
 8007412:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8007416:	005b      	lsls	r3, r3, #1
 8007418:	b25b      	sxtb	r3, r3
 800741a:	4313      	orrs	r3, r2
 800741c:	b25b      	sxtb	r3, r3
 800741e:	b2db      	uxtb	r3, r3
 8007420:	713b      	strb	r3, [r7, #4]
	out_data[0] |= VEML_State.powerSaveEnable;
 8007422:	793a      	ldrb	r2, [r7, #4]
 8007424:	4b0e      	ldr	r3, [pc, #56]	; (8007460 <veml_PushState+0xe4>)
 8007426:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 800742a:	4313      	orrs	r3, r2
 800742c:	b2db      	uxtb	r3, r3
 800742e:	713b      	strb	r3, [r7, #4]


	//out_data |= (VEML_State.powerSaveMode << 1);
	//out_data |= VEML_State.powerSaveEnable;

	while (resp == HAL_ERROR){
 8007430:	e00e      	b.n	8007450 <veml_PushState+0xd4>
	  resp = HAL_I2C_Mem_Write(&(VEML_State.i2cHandle),
 8007432:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007436:	9302      	str	r3, [sp, #8]
 8007438:	2302      	movs	r3, #2
 800743a:	9301      	str	r3, [sp, #4]
 800743c:	1d3b      	adds	r3, r7, #4
 800743e:	9300      	str	r3, [sp, #0]
 8007440:	2301      	movs	r3, #1
 8007442:	2203      	movs	r2, #3
 8007444:	2120      	movs	r1, #32
 8007446:	4806      	ldr	r0, [pc, #24]	; (8007460 <veml_PushState+0xe4>)
 8007448:	f001 f9b2 	bl	80087b0 <HAL_I2C_Mem_Write>
 800744c:	4603      	mov	r3, r0
 800744e:	71fb      	strb	r3, [r7, #7]
	while (resp == HAL_ERROR){
 8007450:	79fb      	ldrb	r3, [r7, #7]
 8007452:	2b01      	cmp	r3, #1
 8007454:	d0ed      	beq.n	8007432 <veml_PushState+0xb6>
							   out_data, 2,
							   HAL_MAX_DELAY);
	  //I2C_Write_16b(VEML7700_ALS_CONFIG, out_data);
	}

	return resp;
 8007456:	79fb      	ldrb	r3, [r7, #7]
}
 8007458:	4618      	mov	r0, r3
 800745a:	3708      	adds	r7, #8
 800745c:	46bd      	mov	sp, r7
 800745e:	bd80      	pop	{r7, pc}
 8007460:	2002e370 	.word	0x2002e370

08007464 <veml_Setup>:

HAL_StatusTypeDef veml_Setup(I2C_HandleTypeDef i2cHandle, VEML7700_Mode_t Mode){
 8007464:	b084      	sub	sp, #16
 8007466:	b580      	push	{r7, lr}
 8007468:	af00      	add	r7, sp, #0
 800746a:	f107 0c08 	add.w	ip, r7, #8
 800746e:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}

	VEML_State.i2cHandle = i2cHandle;
 8007472:	4b28      	ldr	r3, [pc, #160]	; (8007514 <veml_Setup+0xb0>)
 8007474:	4618      	mov	r0, r3
 8007476:	f107 0108 	add.w	r1, r7, #8
 800747a:	234c      	movs	r3, #76	; 0x4c
 800747c:	461a      	mov	r2, r3
 800747e:	f00c fcfd 	bl	8013e7c <memcpy>
	VEML_State.autoGain = 0;
 8007482:	4b24      	ldr	r3, [pc, #144]	; (8007514 <veml_Setup+0xb0>)
 8007484:	2200      	movs	r2, #0
 8007486:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

	switch (Mode){
 800748a:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 800748e:	2b01      	cmp	r3, #1
 8007490:	d014      	beq.n	80074bc <veml_Setup+0x58>
 8007492:	2b02      	cmp	r3, #2
 8007494:	d023      	beq.n	80074de <veml_Setup+0x7a>
 8007496:	2b00      	cmp	r3, #0
 8007498:	d132      	bne.n	8007500 <veml_Setup+0x9c>
		case VEML_5S_POLLING:
			VEML_State.powerSaveMode = VEML7700_POWERSAVE_MODE4;
 800749a:	4b1e      	ldr	r3, [pc, #120]	; (8007514 <veml_Setup+0xb0>)
 800749c:	2203      	movs	r2, #3
 800749e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
			VEML_State.powerSaveEnable = 0x01;
 80074a2:	4b1c      	ldr	r3, [pc, #112]	; (8007514 <veml_Setup+0xb0>)
 80074a4:	2201      	movs	r2, #1
 80074a6:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
			VEML_State.gain = VEML7700_GAIN_2;
 80074aa:	4b1a      	ldr	r3, [pc, #104]	; (8007514 <veml_Setup+0xb0>)
 80074ac:	2201      	movs	r2, #1
 80074ae:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
			VEML_State.integrationTime = VEML7700_IT_800MS;
 80074b2:	4b18      	ldr	r3, [pc, #96]	; (8007514 <veml_Setup+0xb0>)
 80074b4:	2203      	movs	r2, #3
 80074b6:	f883 204f 	strb.w	r2, [r3, #79]	; 0x4f
			break;
 80074ba:	e021      	b.n	8007500 <veml_Setup+0x9c>

		case VEML_100MS_POLLING:
			VEML_State.powerSaveMode = VEML7700_POWERSAVE_MODE1;
 80074bc:	4b15      	ldr	r3, [pc, #84]	; (8007514 <veml_Setup+0xb0>)
 80074be:	2200      	movs	r2, #0
 80074c0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
			VEML_State.powerSaveEnable = 0x00;
 80074c4:	4b13      	ldr	r3, [pc, #76]	; (8007514 <veml_Setup+0xb0>)
 80074c6:	2200      	movs	r2, #0
 80074c8:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
			VEML_State.gain = VEML7700_GAIN_2;
 80074cc:	4b11      	ldr	r3, [pc, #68]	; (8007514 <veml_Setup+0xb0>)
 80074ce:	2201      	movs	r2, #1
 80074d0:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
			VEML_State.integrationTime = VEML7700_IT_100MS;
 80074d4:	4b0f      	ldr	r3, [pc, #60]	; (8007514 <veml_Setup+0xb0>)
 80074d6:	2200      	movs	r2, #0
 80074d8:	f883 204f 	strb.w	r2, [r3, #79]	; 0x4f
			break;
 80074dc:	e010      	b.n	8007500 <veml_Setup+0x9c>

		case VEML_25MS_POLLING:
			VEML_State.powerSaveMode = VEML7700_POWERSAVE_MODE1;
 80074de:	4b0d      	ldr	r3, [pc, #52]	; (8007514 <veml_Setup+0xb0>)
 80074e0:	2200      	movs	r2, #0
 80074e2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
			VEML_State.powerSaveEnable = 0x00;
 80074e6:	4b0b      	ldr	r3, [pc, #44]	; (8007514 <veml_Setup+0xb0>)
 80074e8:	2200      	movs	r2, #0
 80074ea:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
			VEML_State.gain = VEML7700_GAIN_2;
 80074ee:	4b09      	ldr	r3, [pc, #36]	; (8007514 <veml_Setup+0xb0>)
 80074f0:	2201      	movs	r2, #1
 80074f2:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
			VEML_State.integrationTime = VEML7700_IT_25MS;
 80074f6:	4b07      	ldr	r3, [pc, #28]	; (8007514 <veml_Setup+0xb0>)
 80074f8:	220c      	movs	r2, #12
 80074fa:	f883 204f 	strb.w	r2, [r3, #79]	; 0x4f
			break;
 80074fe:	bf00      	nop
	}

	return veml_PushState();
 8007500:	f7ff ff3c 	bl	800737c <veml_PushState>
 8007504:	4603      	mov	r3, r0

}
 8007506:	4618      	mov	r0, r3
 8007508:	46bd      	mov	sp, r7
 800750a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800750e:	b004      	add	sp, #16
 8007510:	4770      	bx	lr
 8007512:	bf00      	nop
 8007514:	2002e370 	.word	0x2002e370

08007518 <autoGain>:
HAL_StatusTypeDef veml_Set_IntegrationTime(uint8_t integrationTime){
	VEML_State.integrationTime = integrationTime;
	return veml_PushState();
}

void autoGain(uint16_t raw_data){
 8007518:	b580      	push	{r7, lr}
 800751a:	b082      	sub	sp, #8
 800751c:	af00      	add	r7, sp, #0
 800751e:	4603      	mov	r3, r0
 8007520:	80fb      	strh	r3, [r7, #6]

	if (VEML_State.autoGain){ //if we are autoGaining
 8007522:	4b29      	ldr	r3, [pc, #164]	; (80075c8 <autoGain+0xb0>)
 8007524:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007528:	2b00      	cmp	r3, #0
 800752a:	d049      	beq.n	80075c0 <autoGain+0xa8>

		//if raw value is > ~90% of 0xFFFF and we're not at min gain
		if (VEML_State.gain != VEML7700_GAIN_1_8 && raw_data > 0xE665) {
 800752c:	4b26      	ldr	r3, [pc, #152]	; (80075c8 <autoGain+0xb0>)
 800752e:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8007532:	2b02      	cmp	r3, #2
 8007534:	d01f      	beq.n	8007576 <autoGain+0x5e>
 8007536:	88fb      	ldrh	r3, [r7, #6]
 8007538:	f24e 6265 	movw	r2, #58981	; 0xe665
 800753c:	4293      	cmp	r3, r2
 800753e:	d91a      	bls.n	8007576 <autoGain+0x5e>
			switch (VEML_State.gain){
 8007540:	4b21      	ldr	r3, [pc, #132]	; (80075c8 <autoGain+0xb0>)
 8007542:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8007546:	2b01      	cmp	r3, #1
 8007548:	d004      	beq.n	8007554 <autoGain+0x3c>
 800754a:	2b03      	cmp	r3, #3
 800754c:	d00c      	beq.n	8007568 <autoGain+0x50>
 800754e:	2b00      	cmp	r3, #0
 8007550:	d005      	beq.n	800755e <autoGain+0x46>
 8007552:	e00e      	b.n	8007572 <autoGain+0x5a>
				case VEML7700_GAIN_2:
					VEML_State.gain = VEML7700_GAIN_1;
 8007554:	4b1c      	ldr	r3, [pc, #112]	; (80075c8 <autoGain+0xb0>)
 8007556:	2200      	movs	r2, #0
 8007558:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
					break;
 800755c:	e009      	b.n	8007572 <autoGain+0x5a>
				case VEML7700_GAIN_1:
					VEML_State.gain = VEML7700_GAIN_1_4;
 800755e:	4b1a      	ldr	r3, [pc, #104]	; (80075c8 <autoGain+0xb0>)
 8007560:	2203      	movs	r2, #3
 8007562:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
				    break;
 8007566:	e004      	b.n	8007572 <autoGain+0x5a>
				case VEML7700_GAIN_1_4:
					VEML_State.gain = VEML7700_GAIN_1_8;
 8007568:	4b17      	ldr	r3, [pc, #92]	; (80075c8 <autoGain+0xb0>)
 800756a:	2202      	movs	r2, #2
 800756c:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
					break;
 8007570:	bf00      	nop
			}
			veml_PushState();
 8007572:	f7ff ff03 	bl	800737c <veml_PushState>
		}

		//if raw value is < ~45% of 0xFFFF and we're not at max gain
		if (VEML_State.gain != VEML7700_GAIN_2 && raw_data < 0x7332) {
 8007576:	4b14      	ldr	r3, [pc, #80]	; (80075c8 <autoGain+0xb0>)
 8007578:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800757c:	2b01      	cmp	r3, #1
 800757e:	d01f      	beq.n	80075c0 <autoGain+0xa8>
 8007580:	88fb      	ldrh	r3, [r7, #6]
 8007582:	f247 3231 	movw	r2, #29489	; 0x7331
 8007586:	4293      	cmp	r3, r2
 8007588:	d81a      	bhi.n	80075c0 <autoGain+0xa8>
			switch (VEML_State.gain){
 800758a:	4b0f      	ldr	r3, [pc, #60]	; (80075c8 <autoGain+0xb0>)
 800758c:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8007590:	2b02      	cmp	r3, #2
 8007592:	d004      	beq.n	800759e <autoGain+0x86>
 8007594:	2b03      	cmp	r3, #3
 8007596:	d007      	beq.n	80075a8 <autoGain+0x90>
 8007598:	2b00      	cmp	r3, #0
 800759a:	d00a      	beq.n	80075b2 <autoGain+0x9a>
 800759c:	e00e      	b.n	80075bc <autoGain+0xa4>
				case VEML7700_GAIN_1_8:
					VEML_State.gain = VEML7700_GAIN_1_4;
 800759e:	4b0a      	ldr	r3, [pc, #40]	; (80075c8 <autoGain+0xb0>)
 80075a0:	2203      	movs	r2, #3
 80075a2:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
					break;
 80075a6:	e009      	b.n	80075bc <autoGain+0xa4>
				case VEML7700_GAIN_1_4:
					VEML_State.gain = VEML7700_GAIN_1;
 80075a8:	4b07      	ldr	r3, [pc, #28]	; (80075c8 <autoGain+0xb0>)
 80075aa:	2200      	movs	r2, #0
 80075ac:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
				    break;
 80075b0:	e004      	b.n	80075bc <autoGain+0xa4>
				case VEML7700_GAIN_1:
					VEML_State.gain = VEML7700_GAIN_2;
 80075b2:	4b05      	ldr	r3, [pc, #20]	; (80075c8 <autoGain+0xb0>)
 80075b4:	2201      	movs	r2, #1
 80075b6:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
					break;
 80075ba:	bf00      	nop
			}
			veml_PushState();
 80075bc:	f7ff fede 	bl	800737c <veml_PushState>
		}
	}
}
 80075c0:	bf00      	nop
 80075c2:	3708      	adds	r7, #8
 80075c4:	46bd      	mov	sp, r7
 80075c6:	bd80      	pop	{r7, pc}
 80075c8:	2002e370 	.word	0x2002e370

080075cc <veml_norm_data>:

float veml_norm_data(uint16_t raw_data){
 80075cc:	b480      	push	{r7}
 80075ce:	b085      	sub	sp, #20
 80075d0:	af00      	add	r7, sp, #0
 80075d2:	4603      	mov	r3, r0
 80075d4:	80fb      	strh	r3, [r7, #6]

	float lux = (float)raw_data;
 80075d6:	88fb      	ldrh	r3, [r7, #6]
 80075d8:	ee07 3a90 	vmov	s15, r3
 80075dc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80075e0:	edc7 7a03 	vstr	s15, [r7, #12]

	switch (VEML_State.gain){
 80075e4:	4b3d      	ldr	r3, [pc, #244]	; (80076dc <veml_norm_data+0x110>)
 80075e6:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 80075ea:	2b02      	cmp	r3, #2
 80075ec:	d015      	beq.n	800761a <veml_norm_data+0x4e>
 80075ee:	2b03      	cmp	r3, #3
 80075f0:	d00a      	beq.n	8007608 <veml_norm_data+0x3c>
 80075f2:	2b01      	cmp	r3, #1
 80075f4:	d11a      	bne.n	800762c <veml_norm_data+0x60>
		case VEML7700_GAIN_2:
			lux /= 2.0;
 80075f6:	ed97 7a03 	vldr	s14, [r7, #12]
 80075fa:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80075fe:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8007602:	edc7 7a03 	vstr	s15, [r7, #12]
			break;
 8007606:	e011      	b.n	800762c <veml_norm_data+0x60>
		case VEML7700_GAIN_1_4:
		    lux *= 4;
 8007608:	edd7 7a03 	vldr	s15, [r7, #12]
 800760c:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8007610:	ee67 7a87 	vmul.f32	s15, s15, s14
 8007614:	edc7 7a03 	vstr	s15, [r7, #12]
		    break;
 8007618:	e008      	b.n	800762c <veml_norm_data+0x60>
		case VEML7700_GAIN_1_8:
		    lux *= 8;
 800761a:	edd7 7a03 	vldr	s15, [r7, #12]
 800761e:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 8007622:	ee67 7a87 	vmul.f32	s15, s15, s14
 8007626:	edc7 7a03 	vstr	s15, [r7, #12]
		    break;
 800762a:	bf00      	nop
	}

	switch (VEML_State.integrationTime){
 800762c:	4b2b      	ldr	r3, [pc, #172]	; (80076dc <veml_norm_data+0x110>)
 800762e:	f893 304f 	ldrb.w	r3, [r3, #79]	; 0x4f
 8007632:	3b01      	subs	r3, #1
 8007634:	2b0b      	cmp	r3, #11
 8007636:	d846      	bhi.n	80076c6 <veml_norm_data+0xfa>
 8007638:	a201      	add	r2, pc, #4	; (adr r2, 8007640 <veml_norm_data+0x74>)
 800763a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800763e:	bf00      	nop
 8007640:	08007691 	.word	0x08007691
 8007644:	080076a3 	.word	0x080076a3
 8007648:	080076b5 	.word	0x080076b5
 800764c:	080076c7 	.word	0x080076c7
 8007650:	080076c7 	.word	0x080076c7
 8007654:	080076c7 	.word	0x080076c7
 8007658:	080076c7 	.word	0x080076c7
 800765c:	08007683 	.word	0x08007683
 8007660:	080076c7 	.word	0x080076c7
 8007664:	080076c7 	.word	0x080076c7
 8007668:	080076c7 	.word	0x080076c7
 800766c:	08007671 	.word	0x08007671
	  	case VEML7700_IT_25MS:
	  		lux *= 4;
 8007670:	edd7 7a03 	vldr	s15, [r7, #12]
 8007674:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8007678:	ee67 7a87 	vmul.f32	s15, s15, s14
 800767c:	edc7 7a03 	vstr	s15, [r7, #12]
	  		break;
 8007680:	e021      	b.n	80076c6 <veml_norm_data+0xfa>
	  	case VEML7700_IT_50MS:
	  		lux *= 2;
 8007682:	edd7 7a03 	vldr	s15, [r7, #12]
 8007686:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800768a:	edc7 7a03 	vstr	s15, [r7, #12]
	  		break;
 800768e:	e01a      	b.n	80076c6 <veml_norm_data+0xfa>
	  	case VEML7700_IT_200MS:
	  		lux /= 2.0;
 8007690:	ed97 7a03 	vldr	s14, [r7, #12]
 8007694:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8007698:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800769c:	edc7 7a03 	vstr	s15, [r7, #12]
	  		break;
 80076a0:	e011      	b.n	80076c6 <veml_norm_data+0xfa>
	  	case VEML7700_IT_400MS:
	  		lux /= 4.0;
 80076a2:	ed97 7a03 	vldr	s14, [r7, #12]
 80076a6:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 80076aa:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80076ae:	edc7 7a03 	vstr	s15, [r7, #12]
	  		break;
 80076b2:	e008      	b.n	80076c6 <veml_norm_data+0xfa>
	  	case VEML7700_IT_800MS:
	  		lux /= 8.0;
 80076b4:	ed97 7a03 	vldr	s14, [r7, #12]
 80076b8:	eef2 6a00 	vmov.f32	s13, #32	; 0x41000000  8.0
 80076bc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80076c0:	edc7 7a03 	vstr	s15, [r7, #12]
	  		break;
 80076c4:	bf00      	nop
	}

	return lux;
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	ee07 3a90 	vmov	s15, r3
}
 80076cc:	eeb0 0a67 	vmov.f32	s0, s15
 80076d0:	3714      	adds	r7, #20
 80076d2:	46bd      	mov	sp, r7
 80076d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076d8:	4770      	bx	lr
 80076da:	bf00      	nop
 80076dc:	2002e370 	.word	0x2002e370

080076e0 <veml_Get_Lux>:

float veml_Get_Lux(){
 80076e0:	b5b0      	push	{r4, r5, r7, lr}
 80076e2:	b088      	sub	sp, #32
 80076e4:	af04      	add	r7, sp, #16

	const uint16_t max_tries = 300;
 80076e6:	f44f 7396 	mov.w	r3, #300	; 0x12c
 80076ea:	80fb      	strh	r3, [r7, #6]
	uint16_t current_tries = 0;
 80076ec:	2300      	movs	r3, #0
 80076ee:	81fb      	strh	r3, [r7, #14]

	uint8_t buffer[2];

	HAL_StatusTypeDef resp = HAL_ERROR;
 80076f0:	2301      	movs	r3, #1
 80076f2:	737b      	strb	r3, [r7, #13]

	while (resp == HAL_ERROR && current_tries < max_tries){
 80076f4:	e011      	b.n	800771a <veml_Get_Lux+0x3a>
	  resp = HAL_I2C_Mem_Read(&(VEML_State.i2cHandle),
 80076f6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80076fa:	9302      	str	r3, [sp, #8]
 80076fc:	2302      	movs	r3, #2
 80076fe:	9301      	str	r3, [sp, #4]
 8007700:	463b      	mov	r3, r7
 8007702:	9300      	str	r3, [sp, #0]
 8007704:	2301      	movs	r3, #1
 8007706:	2204      	movs	r2, #4
 8007708:	2120      	movs	r1, #32
 800770a:	4867      	ldr	r0, [pc, #412]	; (80078a8 <veml_Get_Lux+0x1c8>)
 800770c:	f001 f964 	bl	80089d8 <HAL_I2C_Mem_Read>
 8007710:	4603      	mov	r3, r0
 8007712:	737b      	strb	r3, [r7, #13]
							  HAL_MAX_DELAY);

	  //resp = HAL_I2C_Master_Receive(&VEML_State.i2cHandle,
	  //	  	  	  VEML_ADDR,&buffer, 2,
	//			  HAL_MAX_DELAY);
	  current_tries++;
 8007714:	89fb      	ldrh	r3, [r7, #14]
 8007716:	3301      	adds	r3, #1
 8007718:	81fb      	strh	r3, [r7, #14]
	while (resp == HAL_ERROR && current_tries < max_tries){
 800771a:	7b7b      	ldrb	r3, [r7, #13]
 800771c:	2b01      	cmp	r3, #1
 800771e:	d103      	bne.n	8007728 <veml_Get_Lux+0x48>
 8007720:	89fa      	ldrh	r2, [r7, #14]
 8007722:	88fb      	ldrh	r3, [r7, #6]
 8007724:	429a      	cmp	r2, r3
 8007726:	d3e6      	bcc.n	80076f6 <veml_Get_Lux+0x16>
	}

	if (current_tries >= max_tries) {
 8007728:	89fa      	ldrh	r2, [r7, #14]
 800772a:	88fb      	ldrh	r3, [r7, #6]
 800772c:	429a      	cmp	r2, r3
 800772e:	d301      	bcc.n	8007734 <veml_Get_Lux+0x54>
	  return -1;
 8007730:	4b5e      	ldr	r3, [pc, #376]	; (80078ac <veml_Get_Lux+0x1cc>)
 8007732:	e090      	b.n	8007856 <veml_Get_Lux+0x176>
	}

	uint16_t data = (buffer[1] << 8) | buffer[0];
 8007734:	787b      	ldrb	r3, [r7, #1]
 8007736:	021b      	lsls	r3, r3, #8
 8007738:	b21a      	sxth	r2, r3
 800773a:	783b      	ldrb	r3, [r7, #0]
 800773c:	b21b      	sxth	r3, r3
 800773e:	4313      	orrs	r3, r2
 8007740:	b21b      	sxth	r3, r3
 8007742:	80bb      	strh	r3, [r7, #4]

	autoGain(data);
 8007744:	88bb      	ldrh	r3, [r7, #4]
 8007746:	4618      	mov	r0, r3
 8007748:	f7ff fee6 	bl	8007518 <autoGain>

	float lux = (veml_norm_data(data) * 0.0576);
 800774c:	88bb      	ldrh	r3, [r7, #4]
 800774e:	4618      	mov	r0, r3
 8007750:	f7ff ff3c 	bl	80075cc <veml_norm_data>
 8007754:	ee10 3a10 	vmov	r3, s0
 8007758:	4618      	mov	r0, r3
 800775a:	f7f8 fecd 	bl	80004f8 <__aeabi_f2d>
 800775e:	a342      	add	r3, pc, #264	; (adr r3, 8007868 <veml_Get_Lux+0x188>)
 8007760:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007764:	f7f8 ff20 	bl	80005a8 <__aeabi_dmul>
 8007768:	4603      	mov	r3, r0
 800776a:	460c      	mov	r4, r1
 800776c:	4618      	mov	r0, r3
 800776e:	4621      	mov	r1, r4
 8007770:	f7f9 f9f2 	bl	8000b58 <__aeabi_d2f>
 8007774:	4603      	mov	r3, r0
 8007776:	60bb      	str	r3, [r7, #8]

	if (VEML_State.gain == VEML7700_GAIN_1_8 && VEML_State.integrationTime == VEML7700_IT_25MS){
 8007778:	4b4b      	ldr	r3, [pc, #300]	; (80078a8 <veml_Get_Lux+0x1c8>)
 800777a:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800777e:	2b02      	cmp	r3, #2
 8007780:	d168      	bne.n	8007854 <veml_Get_Lux+0x174>
 8007782:	4b49      	ldr	r3, [pc, #292]	; (80078a8 <veml_Get_Lux+0x1c8>)
 8007784:	f893 304f 	ldrb.w	r3, [r3, #79]	; 0x4f
 8007788:	2b0c      	cmp	r3, #12
 800778a:	d163      	bne.n	8007854 <veml_Get_Lux+0x174>
		lux = 6.0135e-13 * pow(lux, 4) - 9.3924e-9 * pow(lux, 3) + 8.1488e-5 * pow(lux, 2) + 1.0023 * lux;
 800778c:	68b8      	ldr	r0, [r7, #8]
 800778e:	f7f8 feb3 	bl	80004f8 <__aeabi_f2d>
 8007792:	4603      	mov	r3, r0
 8007794:	460c      	mov	r4, r1
 8007796:	ed9f 1b36 	vldr	d1, [pc, #216]	; 8007870 <veml_Get_Lux+0x190>
 800779a:	ec44 3b10 	vmov	d0, r3, r4
 800779e:	f00f f973 	bl	8016a88 <pow>
 80077a2:	ec51 0b10 	vmov	r0, r1, d0
 80077a6:	a334      	add	r3, pc, #208	; (adr r3, 8007878 <veml_Get_Lux+0x198>)
 80077a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077ac:	f7f8 fefc 	bl	80005a8 <__aeabi_dmul>
 80077b0:	4603      	mov	r3, r0
 80077b2:	460c      	mov	r4, r1
 80077b4:	4625      	mov	r5, r4
 80077b6:	461c      	mov	r4, r3
 80077b8:	68b8      	ldr	r0, [r7, #8]
 80077ba:	f7f8 fe9d 	bl	80004f8 <__aeabi_f2d>
 80077be:	4602      	mov	r2, r0
 80077c0:	460b      	mov	r3, r1
 80077c2:	ed9f 1b2f 	vldr	d1, [pc, #188]	; 8007880 <veml_Get_Lux+0x1a0>
 80077c6:	ec43 2b10 	vmov	d0, r2, r3
 80077ca:	f00f f95d 	bl	8016a88 <pow>
 80077ce:	ec51 0b10 	vmov	r0, r1, d0
 80077d2:	a32d      	add	r3, pc, #180	; (adr r3, 8007888 <veml_Get_Lux+0x1a8>)
 80077d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077d8:	f7f8 fee6 	bl	80005a8 <__aeabi_dmul>
 80077dc:	4602      	mov	r2, r0
 80077de:	460b      	mov	r3, r1
 80077e0:	4620      	mov	r0, r4
 80077e2:	4629      	mov	r1, r5
 80077e4:	f7f8 fd28 	bl	8000238 <__aeabi_dsub>
 80077e8:	4603      	mov	r3, r0
 80077ea:	460c      	mov	r4, r1
 80077ec:	4625      	mov	r5, r4
 80077ee:	461c      	mov	r4, r3
 80077f0:	68b8      	ldr	r0, [r7, #8]
 80077f2:	f7f8 fe81 	bl	80004f8 <__aeabi_f2d>
 80077f6:	4602      	mov	r2, r0
 80077f8:	460b      	mov	r3, r1
 80077fa:	ed9f 1b25 	vldr	d1, [pc, #148]	; 8007890 <veml_Get_Lux+0x1b0>
 80077fe:	ec43 2b10 	vmov	d0, r2, r3
 8007802:	f00f f941 	bl	8016a88 <pow>
 8007806:	ec51 0b10 	vmov	r0, r1, d0
 800780a:	a323      	add	r3, pc, #140	; (adr r3, 8007898 <veml_Get_Lux+0x1b8>)
 800780c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007810:	f7f8 feca 	bl	80005a8 <__aeabi_dmul>
 8007814:	4602      	mov	r2, r0
 8007816:	460b      	mov	r3, r1
 8007818:	4620      	mov	r0, r4
 800781a:	4629      	mov	r1, r5
 800781c:	f7f8 fd0e 	bl	800023c <__adddf3>
 8007820:	4603      	mov	r3, r0
 8007822:	460c      	mov	r4, r1
 8007824:	4625      	mov	r5, r4
 8007826:	461c      	mov	r4, r3
 8007828:	68b8      	ldr	r0, [r7, #8]
 800782a:	f7f8 fe65 	bl	80004f8 <__aeabi_f2d>
 800782e:	a31c      	add	r3, pc, #112	; (adr r3, 80078a0 <veml_Get_Lux+0x1c0>)
 8007830:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007834:	f7f8 feb8 	bl	80005a8 <__aeabi_dmul>
 8007838:	4602      	mov	r2, r0
 800783a:	460b      	mov	r3, r1
 800783c:	4620      	mov	r0, r4
 800783e:	4629      	mov	r1, r5
 8007840:	f7f8 fcfc 	bl	800023c <__adddf3>
 8007844:	4603      	mov	r3, r0
 8007846:	460c      	mov	r4, r1
 8007848:	4618      	mov	r0, r3
 800784a:	4621      	mov	r1, r4
 800784c:	f7f9 f984 	bl	8000b58 <__aeabi_d2f>
 8007850:	4603      	mov	r3, r0
 8007852:	60bb      	str	r3, [r7, #8]
	}

	return lux;
 8007854:	68bb      	ldr	r3, [r7, #8]
 8007856:	ee07 3a90 	vmov	s15, r3
}
 800785a:	eeb0 0a67 	vmov.f32	s0, s15
 800785e:	3710      	adds	r7, #16
 8007860:	46bd      	mov	sp, r7
 8007862:	bdb0      	pop	{r4, r5, r7, pc}
 8007864:	f3af 8000 	nop.w
 8007868:	487fcb92 	.word	0x487fcb92
 800786c:	3fad7dbf 	.word	0x3fad7dbf
 8007870:	00000000 	.word	0x00000000
 8007874:	40100000 	.word	0x40100000
 8007878:	b18f283b 	.word	0xb18f283b
 800787c:	3d65287a 	.word	0x3d65287a
 8007880:	00000000 	.word	0x00000000
 8007884:	40080000 	.word	0x40080000
 8007888:	c91ef46e 	.word	0xc91ef46e
 800788c:	3e442b86 	.word	0x3e442b86
 8007890:	00000000 	.word	0x00000000
 8007894:	40000000 	.word	0x40000000
 8007898:	2e18cab0 	.word	0x2e18cab0
 800789c:	3f155c91 	.word	0x3f155c91
 80078a0:	b98c7e28 	.word	0xb98c7e28
 80078a4:	3ff0096b 	.word	0x3ff0096b
 80078a8:	2002e370 	.word	0x2002e370
 80078ac:	bf800000 	.word	0xbf800000

080078b0 <veml_Get_White_Lux>:

float veml_Get_White_Lux(){
 80078b0:	b5b0      	push	{r4, r5, r7, lr}
 80078b2:	b088      	sub	sp, #32
 80078b4:	af04      	add	r7, sp, #16

	const uint16_t max_tries = 300;
 80078b6:	f44f 7396 	mov.w	r3, #300	; 0x12c
 80078ba:	80fb      	strh	r3, [r7, #6]
	uint16_t current_tries = 0;
 80078bc:	2300      	movs	r3, #0
 80078be:	81fb      	strh	r3, [r7, #14]

	uint8_t buffer[2];

	HAL_StatusTypeDef resp = HAL_ERROR;
 80078c0:	2301      	movs	r3, #1
 80078c2:	737b      	strb	r3, [r7, #13]

	while (resp == HAL_ERROR && current_tries < max_tries){
 80078c4:	e011      	b.n	80078ea <veml_Get_White_Lux+0x3a>
	  resp = HAL_I2C_Mem_Read(&(VEML_State.i2cHandle),
 80078c6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80078ca:	9302      	str	r3, [sp, #8]
 80078cc:	2302      	movs	r3, #2
 80078ce:	9301      	str	r3, [sp, #4]
 80078d0:	463b      	mov	r3, r7
 80078d2:	9300      	str	r3, [sp, #0]
 80078d4:	2301      	movs	r3, #1
 80078d6:	2205      	movs	r2, #5
 80078d8:	2120      	movs	r1, #32
 80078da:	4867      	ldr	r0, [pc, #412]	; (8007a78 <veml_Get_White_Lux+0x1c8>)
 80078dc:	f001 f87c 	bl	80089d8 <HAL_I2C_Mem_Read>
 80078e0:	4603      	mov	r3, r0
 80078e2:	737b      	strb	r3, [r7, #13]
			  	  	  	  	  VEML_ADDR,
							  VEML7700_WHITE_DATA, 1,
							  buffer, 2,
							  HAL_MAX_DELAY);
	  current_tries++;
 80078e4:	89fb      	ldrh	r3, [r7, #14]
 80078e6:	3301      	adds	r3, #1
 80078e8:	81fb      	strh	r3, [r7, #14]
	while (resp == HAL_ERROR && current_tries < max_tries){
 80078ea:	7b7b      	ldrb	r3, [r7, #13]
 80078ec:	2b01      	cmp	r3, #1
 80078ee:	d103      	bne.n	80078f8 <veml_Get_White_Lux+0x48>
 80078f0:	89fa      	ldrh	r2, [r7, #14]
 80078f2:	88fb      	ldrh	r3, [r7, #6]
 80078f4:	429a      	cmp	r2, r3
 80078f6:	d3e6      	bcc.n	80078c6 <veml_Get_White_Lux+0x16>
	}

	if (current_tries >= max_tries) {
 80078f8:	89fa      	ldrh	r2, [r7, #14]
 80078fa:	88fb      	ldrh	r3, [r7, #6]
 80078fc:	429a      	cmp	r2, r3
 80078fe:	d301      	bcc.n	8007904 <veml_Get_White_Lux+0x54>
	  return -1;
 8007900:	4b5e      	ldr	r3, [pc, #376]	; (8007a7c <veml_Get_White_Lux+0x1cc>)
 8007902:	e090      	b.n	8007a26 <veml_Get_White_Lux+0x176>
	}

	uint16_t data = (buffer[1] << 8) | buffer[0];
 8007904:	787b      	ldrb	r3, [r7, #1]
 8007906:	021b      	lsls	r3, r3, #8
 8007908:	b21a      	sxth	r2, r3
 800790a:	783b      	ldrb	r3, [r7, #0]
 800790c:	b21b      	sxth	r3, r3
 800790e:	4313      	orrs	r3, r2
 8007910:	b21b      	sxth	r3, r3
 8007912:	80bb      	strh	r3, [r7, #4]

	autoGain(data);
 8007914:	88bb      	ldrh	r3, [r7, #4]
 8007916:	4618      	mov	r0, r3
 8007918:	f7ff fdfe 	bl	8007518 <autoGain>

	float lux = (veml_norm_data(data) * 0.0576);
 800791c:	88bb      	ldrh	r3, [r7, #4]
 800791e:	4618      	mov	r0, r3
 8007920:	f7ff fe54 	bl	80075cc <veml_norm_data>
 8007924:	ee10 3a10 	vmov	r3, s0
 8007928:	4618      	mov	r0, r3
 800792a:	f7f8 fde5 	bl	80004f8 <__aeabi_f2d>
 800792e:	a342      	add	r3, pc, #264	; (adr r3, 8007a38 <veml_Get_White_Lux+0x188>)
 8007930:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007934:	f7f8 fe38 	bl	80005a8 <__aeabi_dmul>
 8007938:	4603      	mov	r3, r0
 800793a:	460c      	mov	r4, r1
 800793c:	4618      	mov	r0, r3
 800793e:	4621      	mov	r1, r4
 8007940:	f7f9 f90a 	bl	8000b58 <__aeabi_d2f>
 8007944:	4603      	mov	r3, r0
 8007946:	60bb      	str	r3, [r7, #8]

	if (VEML_State.gain == VEML7700_GAIN_1_8 && VEML_State.integrationTime == VEML7700_IT_25MS){
 8007948:	4b4b      	ldr	r3, [pc, #300]	; (8007a78 <veml_Get_White_Lux+0x1c8>)
 800794a:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800794e:	2b02      	cmp	r3, #2
 8007950:	d168      	bne.n	8007a24 <veml_Get_White_Lux+0x174>
 8007952:	4b49      	ldr	r3, [pc, #292]	; (8007a78 <veml_Get_White_Lux+0x1c8>)
 8007954:	f893 304f 	ldrb.w	r3, [r3, #79]	; 0x4f
 8007958:	2b0c      	cmp	r3, #12
 800795a:	d163      	bne.n	8007a24 <veml_Get_White_Lux+0x174>
		lux = 6.0135e-13 * pow(lux, 4) - 9.3924e-9 * pow(lux, 3) + 8.1488e-5 * pow(lux, 2) + 1.0023 * lux;
 800795c:	68b8      	ldr	r0, [r7, #8]
 800795e:	f7f8 fdcb 	bl	80004f8 <__aeabi_f2d>
 8007962:	4603      	mov	r3, r0
 8007964:	460c      	mov	r4, r1
 8007966:	ed9f 1b36 	vldr	d1, [pc, #216]	; 8007a40 <veml_Get_White_Lux+0x190>
 800796a:	ec44 3b10 	vmov	d0, r3, r4
 800796e:	f00f f88b 	bl	8016a88 <pow>
 8007972:	ec51 0b10 	vmov	r0, r1, d0
 8007976:	a334      	add	r3, pc, #208	; (adr r3, 8007a48 <veml_Get_White_Lux+0x198>)
 8007978:	e9d3 2300 	ldrd	r2, r3, [r3]
 800797c:	f7f8 fe14 	bl	80005a8 <__aeabi_dmul>
 8007980:	4603      	mov	r3, r0
 8007982:	460c      	mov	r4, r1
 8007984:	4625      	mov	r5, r4
 8007986:	461c      	mov	r4, r3
 8007988:	68b8      	ldr	r0, [r7, #8]
 800798a:	f7f8 fdb5 	bl	80004f8 <__aeabi_f2d>
 800798e:	4602      	mov	r2, r0
 8007990:	460b      	mov	r3, r1
 8007992:	ed9f 1b2f 	vldr	d1, [pc, #188]	; 8007a50 <veml_Get_White_Lux+0x1a0>
 8007996:	ec43 2b10 	vmov	d0, r2, r3
 800799a:	f00f f875 	bl	8016a88 <pow>
 800799e:	ec51 0b10 	vmov	r0, r1, d0
 80079a2:	a32d      	add	r3, pc, #180	; (adr r3, 8007a58 <veml_Get_White_Lux+0x1a8>)
 80079a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079a8:	f7f8 fdfe 	bl	80005a8 <__aeabi_dmul>
 80079ac:	4602      	mov	r2, r0
 80079ae:	460b      	mov	r3, r1
 80079b0:	4620      	mov	r0, r4
 80079b2:	4629      	mov	r1, r5
 80079b4:	f7f8 fc40 	bl	8000238 <__aeabi_dsub>
 80079b8:	4603      	mov	r3, r0
 80079ba:	460c      	mov	r4, r1
 80079bc:	4625      	mov	r5, r4
 80079be:	461c      	mov	r4, r3
 80079c0:	68b8      	ldr	r0, [r7, #8]
 80079c2:	f7f8 fd99 	bl	80004f8 <__aeabi_f2d>
 80079c6:	4602      	mov	r2, r0
 80079c8:	460b      	mov	r3, r1
 80079ca:	ed9f 1b25 	vldr	d1, [pc, #148]	; 8007a60 <veml_Get_White_Lux+0x1b0>
 80079ce:	ec43 2b10 	vmov	d0, r2, r3
 80079d2:	f00f f859 	bl	8016a88 <pow>
 80079d6:	ec51 0b10 	vmov	r0, r1, d0
 80079da:	a323      	add	r3, pc, #140	; (adr r3, 8007a68 <veml_Get_White_Lux+0x1b8>)
 80079dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079e0:	f7f8 fde2 	bl	80005a8 <__aeabi_dmul>
 80079e4:	4602      	mov	r2, r0
 80079e6:	460b      	mov	r3, r1
 80079e8:	4620      	mov	r0, r4
 80079ea:	4629      	mov	r1, r5
 80079ec:	f7f8 fc26 	bl	800023c <__adddf3>
 80079f0:	4603      	mov	r3, r0
 80079f2:	460c      	mov	r4, r1
 80079f4:	4625      	mov	r5, r4
 80079f6:	461c      	mov	r4, r3
 80079f8:	68b8      	ldr	r0, [r7, #8]
 80079fa:	f7f8 fd7d 	bl	80004f8 <__aeabi_f2d>
 80079fe:	a31c      	add	r3, pc, #112	; (adr r3, 8007a70 <veml_Get_White_Lux+0x1c0>)
 8007a00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a04:	f7f8 fdd0 	bl	80005a8 <__aeabi_dmul>
 8007a08:	4602      	mov	r2, r0
 8007a0a:	460b      	mov	r3, r1
 8007a0c:	4620      	mov	r0, r4
 8007a0e:	4629      	mov	r1, r5
 8007a10:	f7f8 fc14 	bl	800023c <__adddf3>
 8007a14:	4603      	mov	r3, r0
 8007a16:	460c      	mov	r4, r1
 8007a18:	4618      	mov	r0, r3
 8007a1a:	4621      	mov	r1, r4
 8007a1c:	f7f9 f89c 	bl	8000b58 <__aeabi_d2f>
 8007a20:	4603      	mov	r3, r0
 8007a22:	60bb      	str	r3, [r7, #8]
	}

	return lux;
 8007a24:	68bb      	ldr	r3, [r7, #8]
 8007a26:	ee07 3a90 	vmov	s15, r3

}
 8007a2a:	eeb0 0a67 	vmov.f32	s0, s15
 8007a2e:	3710      	adds	r7, #16
 8007a30:	46bd      	mov	sp, r7
 8007a32:	bdb0      	pop	{r4, r5, r7, pc}
 8007a34:	f3af 8000 	nop.w
 8007a38:	487fcb92 	.word	0x487fcb92
 8007a3c:	3fad7dbf 	.word	0x3fad7dbf
 8007a40:	00000000 	.word	0x00000000
 8007a44:	40100000 	.word	0x40100000
 8007a48:	b18f283b 	.word	0xb18f283b
 8007a4c:	3d65287a 	.word	0x3d65287a
 8007a50:	00000000 	.word	0x00000000
 8007a54:	40080000 	.word	0x40080000
 8007a58:	c91ef46e 	.word	0xc91ef46e
 8007a5c:	3e442b86 	.word	0x3e442b86
 8007a60:	00000000 	.word	0x00000000
 8007a64:	40000000 	.word	0x40000000
 8007a68:	2e18cab0 	.word	0x2e18cab0
 8007a6c:	3f155c91 	.word	0x3f155c91
 8007a70:	b98c7e28 	.word	0xb98c7e28
 8007a74:	3ff0096b 	.word	0x3ff0096b
 8007a78:	2002e370 	.word	0x2002e370
 8007a7c:	bf800000 	.word	0xbf800000

08007a80 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8007a80:	b480      	push	{r7}
 8007a82:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined(VECT_TAB_SRAM) && defined(VECT_TAB_BASE_ADDRESS)  
  /* program in SRAMx */
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;  /* Vector Table Relocation in Internal SRAMx for CPU1 */
#else    /* program in FLASH */
  SCB->VTOR = VECT_TAB_OFFSET;              /* Vector Table Relocation in Internal FLASH */
 8007a84:	4b26      	ldr	r3, [pc, #152]	; (8007b20 <SystemInit+0xa0>)
 8007a86:	2200      	movs	r2, #0
 8007a88:	609a      	str	r2, [r3, #8]
#endif

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
 8007a8a:	4b25      	ldr	r3, [pc, #148]	; (8007b20 <SystemInit+0xa0>)
 8007a8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007a90:	4a23      	ldr	r2, [pc, #140]	; (8007b20 <SystemInit+0xa0>)
 8007a92:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007a96:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8007a9a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007aa4:	f043 0301 	orr.w	r3, r3, #1
 8007aa8:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 8007aaa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007aae:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 8007ab2:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 8007ab4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007ab8:	681a      	ldr	r2, [r3, #0]
 8007aba:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007abe:	4b19      	ldr	r3, [pc, #100]	; (8007b24 <SystemInit+0xa4>)
 8007ac0:	4013      	ands	r3, r2
 8007ac2:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 8007ac4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007ac8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007acc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007ad0:	f023 0305 	bic.w	r3, r3, #5
 8007ad4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  
  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8007ad8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007adc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007ae0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007ae4:	f023 0301 	bic.w	r3, r3, #1
 8007ae8:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
    
  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 8007aec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007af0:	4a0d      	ldr	r2, [pc, #52]	; (8007b28 <SystemInit+0xa8>)
 8007af2:	60da      	str	r2, [r3, #12]

  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 8007af4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007af8:	4a0b      	ldr	r2, [pc, #44]	; (8007b28 <SystemInit+0xa8>)
 8007afa:	611a      	str	r2, [r3, #16]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8007afc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007b06:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007b0a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8007b0c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007b10:	2200      	movs	r2, #0
 8007b12:	619a      	str	r2, [r3, #24]
}
 8007b14:	bf00      	nop
 8007b16:	46bd      	mov	sp, r7
 8007b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b1c:	4770      	bx	lr
 8007b1e:	bf00      	nop
 8007b20:	e000ed00 	.word	0xe000ed00
 8007b24:	faf6fefb 	.word	0xfaf6fefb
 8007b28:	22041000 	.word	0x22041000

08007b2c <LL_DBGMCU_EnableDBGSleepMode>:
{
 8007b2c:	b480      	push	{r7}
 8007b2e:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 8007b30:	4b05      	ldr	r3, [pc, #20]	; (8007b48 <LL_DBGMCU_EnableDBGSleepMode+0x1c>)
 8007b32:	685b      	ldr	r3, [r3, #4]
 8007b34:	4a04      	ldr	r2, [pc, #16]	; (8007b48 <LL_DBGMCU_EnableDBGSleepMode+0x1c>)
 8007b36:	f043 0301 	orr.w	r3, r3, #1
 8007b3a:	6053      	str	r3, [r2, #4]
}
 8007b3c:	bf00      	nop
 8007b3e:	46bd      	mov	sp, r7
 8007b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b44:	4770      	bx	lr
 8007b46:	bf00      	nop
 8007b48:	e0042000 	.word	0xe0042000

08007b4c <LL_DBGMCU_EnableDBGStopMode>:
{
 8007b4c:	b480      	push	{r7}
 8007b4e:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 8007b50:	4b05      	ldr	r3, [pc, #20]	; (8007b68 <LL_DBGMCU_EnableDBGStopMode+0x1c>)
 8007b52:	685b      	ldr	r3, [r3, #4]
 8007b54:	4a04      	ldr	r2, [pc, #16]	; (8007b68 <LL_DBGMCU_EnableDBGStopMode+0x1c>)
 8007b56:	f043 0302 	orr.w	r3, r3, #2
 8007b5a:	6053      	str	r3, [r2, #4]
}
 8007b5c:	bf00      	nop
 8007b5e:	46bd      	mov	sp, r7
 8007b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b64:	4770      	bx	lr
 8007b66:	bf00      	nop
 8007b68:	e0042000 	.word	0xe0042000

08007b6c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8007b6c:	b580      	push	{r7, lr}
 8007b6e:	b082      	sub	sp, #8
 8007b70:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8007b72:	2300      	movs	r3, #0
 8007b74:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8007b76:	4b0c      	ldr	r3, [pc, #48]	; (8007ba8 <HAL_Init+0x3c>)
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	4a0b      	ldr	r2, [pc, #44]	; (8007ba8 <HAL_Init+0x3c>)
 8007b7c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007b80:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8007b82:	2003      	movs	r0, #3
 8007b84:	f000 f961 	bl	8007e4a <HAL_NVIC_SetPriorityGrouping>
  
  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8007b88:	2000      	movs	r0, #0
 8007b8a:	f7ff fad1 	bl	8007130 <HAL_InitTick>
 8007b8e:	4603      	mov	r3, r0
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	d002      	beq.n	8007b9a <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8007b94:	2301      	movs	r3, #1
 8007b96:	71fb      	strb	r3, [r7, #7]
 8007b98:	e001      	b.n	8007b9e <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8007b9a:	f7ff f9c4 	bl	8006f26 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8007b9e:	79fb      	ldrb	r3, [r7, #7]
}
 8007ba0:	4618      	mov	r0, r3
 8007ba2:	3708      	adds	r7, #8
 8007ba4:	46bd      	mov	sp, r7
 8007ba6:	bd80      	pop	{r7, pc}
 8007ba8:	58004000 	.word	0x58004000

08007bac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8007bac:	b480      	push	{r7}
 8007bae:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8007bb0:	4b06      	ldr	r3, [pc, #24]	; (8007bcc <HAL_IncTick+0x20>)
 8007bb2:	781b      	ldrb	r3, [r3, #0]
 8007bb4:	461a      	mov	r2, r3
 8007bb6:	4b06      	ldr	r3, [pc, #24]	; (8007bd0 <HAL_IncTick+0x24>)
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	4413      	add	r3, r2
 8007bbc:	4a04      	ldr	r2, [pc, #16]	; (8007bd0 <HAL_IncTick+0x24>)
 8007bbe:	6013      	str	r3, [r2, #0]
}
 8007bc0:	bf00      	nop
 8007bc2:	46bd      	mov	sp, r7
 8007bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bc8:	4770      	bx	lr
 8007bca:	bf00      	nop
 8007bcc:	2000001c 	.word	0x2000001c
 8007bd0:	2002e3c4 	.word	0x2002e3c4

08007bd4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8007bd4:	b480      	push	{r7}
 8007bd6:	af00      	add	r7, sp, #0
  return uwTick;
 8007bd8:	4b03      	ldr	r3, [pc, #12]	; (8007be8 <HAL_GetTick+0x14>)
 8007bda:	681b      	ldr	r3, [r3, #0]
}
 8007bdc:	4618      	mov	r0, r3
 8007bde:	46bd      	mov	sp, r7
 8007be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007be4:	4770      	bx	lr
 8007be6:	bf00      	nop
 8007be8:	2002e3c4 	.word	0x2002e3c4

08007bec <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8007bec:	b480      	push	{r7}
 8007bee:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8007bf0:	4b03      	ldr	r3, [pc, #12]	; (8007c00 <HAL_GetTickPrio+0x14>)
 8007bf2:	681b      	ldr	r3, [r3, #0]
}
 8007bf4:	4618      	mov	r0, r3
 8007bf6:	46bd      	mov	sp, r7
 8007bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bfc:	4770      	bx	lr
 8007bfe:	bf00      	nop
 8007c00:	20000018 	.word	0x20000018

08007c04 <HAL_GetTickFreq>:
/**
  * @brief Return tick frequency.
  * @retval tick period in Hz
  */
HAL_TickFreqTypeDef HAL_GetTickFreq(void)
{
 8007c04:	b480      	push	{r7}
 8007c06:	af00      	add	r7, sp, #0
  return uwTickFreq;
 8007c08:	4b03      	ldr	r3, [pc, #12]	; (8007c18 <HAL_GetTickFreq+0x14>)
 8007c0a:	781b      	ldrb	r3, [r3, #0]
}
 8007c0c:	4618      	mov	r0, r3
 8007c0e:	46bd      	mov	sp, r7
 8007c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c14:	4770      	bx	lr
 8007c16:	bf00      	nop
 8007c18:	2000001c 	.word	0x2000001c

08007c1c <HAL_DBGMCU_EnableDBGSleepMode>:
/**
  * @brief  Enable the Debug Module during SLEEP mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGSleepMode(void)
{
 8007c1c:	b580      	push	{r7, lr}
 8007c1e:	af00      	add	r7, sp, #0
  LL_DBGMCU_EnableDBGSleepMode();
 8007c20:	f7ff ff84 	bl	8007b2c <LL_DBGMCU_EnableDBGSleepMode>
}
 8007c24:	bf00      	nop
 8007c26:	bd80      	pop	{r7, pc}

08007c28 <HAL_DBGMCU_EnableDBGStopMode>:
/**
  * @brief  Enable the Debug Module during STOP mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStopMode(void)
{
 8007c28:	b580      	push	{r7, lr}
 8007c2a:	af00      	add	r7, sp, #0
  LL_DBGMCU_EnableDBGStopMode();
 8007c2c:	f7ff ff8e 	bl	8007b4c <LL_DBGMCU_EnableDBGStopMode>
}
 8007c30:	bf00      	nop
 8007c32:	bd80      	pop	{r7, pc}

08007c34 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007c34:	b480      	push	{r7}
 8007c36:	b085      	sub	sp, #20
 8007c38:	af00      	add	r7, sp, #0
 8007c3a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	f003 0307 	and.w	r3, r3, #7
 8007c42:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8007c44:	4b0c      	ldr	r3, [pc, #48]	; (8007c78 <__NVIC_SetPriorityGrouping+0x44>)
 8007c46:	68db      	ldr	r3, [r3, #12]
 8007c48:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8007c4a:	68ba      	ldr	r2, [r7, #8]
 8007c4c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8007c50:	4013      	ands	r3, r2
 8007c52:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8007c58:	68bb      	ldr	r3, [r7, #8]
 8007c5a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8007c5c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8007c60:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007c64:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8007c66:	4a04      	ldr	r2, [pc, #16]	; (8007c78 <__NVIC_SetPriorityGrouping+0x44>)
 8007c68:	68bb      	ldr	r3, [r7, #8]
 8007c6a:	60d3      	str	r3, [r2, #12]
}
 8007c6c:	bf00      	nop
 8007c6e:	3714      	adds	r7, #20
 8007c70:	46bd      	mov	sp, r7
 8007c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c76:	4770      	bx	lr
 8007c78:	e000ed00 	.word	0xe000ed00

08007c7c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8007c7c:	b480      	push	{r7}
 8007c7e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8007c80:	4b04      	ldr	r3, [pc, #16]	; (8007c94 <__NVIC_GetPriorityGrouping+0x18>)
 8007c82:	68db      	ldr	r3, [r3, #12]
 8007c84:	0a1b      	lsrs	r3, r3, #8
 8007c86:	f003 0307 	and.w	r3, r3, #7
}
 8007c8a:	4618      	mov	r0, r3
 8007c8c:	46bd      	mov	sp, r7
 8007c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c92:	4770      	bx	lr
 8007c94:	e000ed00 	.word	0xe000ed00

08007c98 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007c98:	b480      	push	{r7}
 8007c9a:	b083      	sub	sp, #12
 8007c9c:	af00      	add	r7, sp, #0
 8007c9e:	4603      	mov	r3, r0
 8007ca0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007ca2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	db0b      	blt.n	8007cc2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007caa:	79fb      	ldrb	r3, [r7, #7]
 8007cac:	f003 021f 	and.w	r2, r3, #31
 8007cb0:	4907      	ldr	r1, [pc, #28]	; (8007cd0 <__NVIC_EnableIRQ+0x38>)
 8007cb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007cb6:	095b      	lsrs	r3, r3, #5
 8007cb8:	2001      	movs	r0, #1
 8007cba:	fa00 f202 	lsl.w	r2, r0, r2
 8007cbe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8007cc2:	bf00      	nop
 8007cc4:	370c      	adds	r7, #12
 8007cc6:	46bd      	mov	sp, r7
 8007cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ccc:	4770      	bx	lr
 8007cce:	bf00      	nop
 8007cd0:	e000e100 	.word	0xe000e100

08007cd4 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8007cd4:	b480      	push	{r7}
 8007cd6:	b083      	sub	sp, #12
 8007cd8:	af00      	add	r7, sp, #0
 8007cda:	4603      	mov	r3, r0
 8007cdc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007cde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	db10      	blt.n	8007d08 <__NVIC_DisableIRQ+0x34>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007ce6:	79fb      	ldrb	r3, [r7, #7]
 8007ce8:	f003 021f 	and.w	r2, r3, #31
 8007cec:	4909      	ldr	r1, [pc, #36]	; (8007d14 <__NVIC_DisableIRQ+0x40>)
 8007cee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007cf2:	095b      	lsrs	r3, r3, #5
 8007cf4:	2001      	movs	r0, #1
 8007cf6:	fa00 f202 	lsl.w	r2, r0, r2
 8007cfa:	3320      	adds	r3, #32
 8007cfc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8007d00:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8007d04:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  }
}
 8007d08:	bf00      	nop
 8007d0a:	370c      	adds	r7, #12
 8007d0c:	46bd      	mov	sp, r7
 8007d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d12:	4770      	bx	lr
 8007d14:	e000e100 	.word	0xe000e100

08007d18 <__NVIC_SetPendingIRQ>:
  \details Sets the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 8007d18:	b480      	push	{r7}
 8007d1a:	b083      	sub	sp, #12
 8007d1c:	af00      	add	r7, sp, #0
 8007d1e:	4603      	mov	r3, r0
 8007d20:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007d22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	db0c      	blt.n	8007d44 <__NVIC_SetPendingIRQ+0x2c>
  {
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007d2a:	79fb      	ldrb	r3, [r7, #7]
 8007d2c:	f003 021f 	and.w	r2, r3, #31
 8007d30:	4907      	ldr	r1, [pc, #28]	; (8007d50 <__NVIC_SetPendingIRQ+0x38>)
 8007d32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007d36:	095b      	lsrs	r3, r3, #5
 8007d38:	2001      	movs	r0, #1
 8007d3a:	fa00 f202 	lsl.w	r2, r0, r2
 8007d3e:	3340      	adds	r3, #64	; 0x40
 8007d40:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8007d44:	bf00      	nop
 8007d46:	370c      	adds	r7, #12
 8007d48:	46bd      	mov	sp, r7
 8007d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d4e:	4770      	bx	lr
 8007d50:	e000e100 	.word	0xe000e100

08007d54 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8007d54:	b480      	push	{r7}
 8007d56:	b083      	sub	sp, #12
 8007d58:	af00      	add	r7, sp, #0
 8007d5a:	4603      	mov	r3, r0
 8007d5c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007d5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	db0c      	blt.n	8007d80 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007d66:	79fb      	ldrb	r3, [r7, #7]
 8007d68:	f003 021f 	and.w	r2, r3, #31
 8007d6c:	4907      	ldr	r1, [pc, #28]	; (8007d8c <__NVIC_ClearPendingIRQ+0x38>)
 8007d6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007d72:	095b      	lsrs	r3, r3, #5
 8007d74:	2001      	movs	r0, #1
 8007d76:	fa00 f202 	lsl.w	r2, r0, r2
 8007d7a:	3360      	adds	r3, #96	; 0x60
 8007d7c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8007d80:	bf00      	nop
 8007d82:	370c      	adds	r7, #12
 8007d84:	46bd      	mov	sp, r7
 8007d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d8a:	4770      	bx	lr
 8007d8c:	e000e100 	.word	0xe000e100

08007d90 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8007d90:	b480      	push	{r7}
 8007d92:	b083      	sub	sp, #12
 8007d94:	af00      	add	r7, sp, #0
 8007d96:	4603      	mov	r3, r0
 8007d98:	6039      	str	r1, [r7, #0]
 8007d9a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007d9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	db0a      	blt.n	8007dba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007da4:	683b      	ldr	r3, [r7, #0]
 8007da6:	b2da      	uxtb	r2, r3
 8007da8:	490c      	ldr	r1, [pc, #48]	; (8007ddc <__NVIC_SetPriority+0x4c>)
 8007daa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007dae:	0112      	lsls	r2, r2, #4
 8007db0:	b2d2      	uxtb	r2, r2
 8007db2:	440b      	add	r3, r1
 8007db4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8007db8:	e00a      	b.n	8007dd0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007dba:	683b      	ldr	r3, [r7, #0]
 8007dbc:	b2da      	uxtb	r2, r3
 8007dbe:	4908      	ldr	r1, [pc, #32]	; (8007de0 <__NVIC_SetPriority+0x50>)
 8007dc0:	79fb      	ldrb	r3, [r7, #7]
 8007dc2:	f003 030f 	and.w	r3, r3, #15
 8007dc6:	3b04      	subs	r3, #4
 8007dc8:	0112      	lsls	r2, r2, #4
 8007dca:	b2d2      	uxtb	r2, r2
 8007dcc:	440b      	add	r3, r1
 8007dce:	761a      	strb	r2, [r3, #24]
}
 8007dd0:	bf00      	nop
 8007dd2:	370c      	adds	r7, #12
 8007dd4:	46bd      	mov	sp, r7
 8007dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dda:	4770      	bx	lr
 8007ddc:	e000e100 	.word	0xe000e100
 8007de0:	e000ed00 	.word	0xe000ed00

08007de4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007de4:	b480      	push	{r7}
 8007de6:	b089      	sub	sp, #36	; 0x24
 8007de8:	af00      	add	r7, sp, #0
 8007dea:	60f8      	str	r0, [r7, #12]
 8007dec:	60b9      	str	r1, [r7, #8]
 8007dee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	f003 0307 	and.w	r3, r3, #7
 8007df6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007df8:	69fb      	ldr	r3, [r7, #28]
 8007dfa:	f1c3 0307 	rsb	r3, r3, #7
 8007dfe:	2b04      	cmp	r3, #4
 8007e00:	bf28      	it	cs
 8007e02:	2304      	movcs	r3, #4
 8007e04:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8007e06:	69fb      	ldr	r3, [r7, #28]
 8007e08:	3304      	adds	r3, #4
 8007e0a:	2b06      	cmp	r3, #6
 8007e0c:	d902      	bls.n	8007e14 <NVIC_EncodePriority+0x30>
 8007e0e:	69fb      	ldr	r3, [r7, #28]
 8007e10:	3b03      	subs	r3, #3
 8007e12:	e000      	b.n	8007e16 <NVIC_EncodePriority+0x32>
 8007e14:	2300      	movs	r3, #0
 8007e16:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007e18:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007e1c:	69bb      	ldr	r3, [r7, #24]
 8007e1e:	fa02 f303 	lsl.w	r3, r2, r3
 8007e22:	43da      	mvns	r2, r3
 8007e24:	68bb      	ldr	r3, [r7, #8]
 8007e26:	401a      	ands	r2, r3
 8007e28:	697b      	ldr	r3, [r7, #20]
 8007e2a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8007e2c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8007e30:	697b      	ldr	r3, [r7, #20]
 8007e32:	fa01 f303 	lsl.w	r3, r1, r3
 8007e36:	43d9      	mvns	r1, r3
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007e3c:	4313      	orrs	r3, r2
         );
}
 8007e3e:	4618      	mov	r0, r3
 8007e40:	3724      	adds	r7, #36	; 0x24
 8007e42:	46bd      	mov	sp, r7
 8007e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e48:	4770      	bx	lr

08007e4a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007e4a:	b580      	push	{r7, lr}
 8007e4c:	b082      	sub	sp, #8
 8007e4e:	af00      	add	r7, sp, #0
 8007e50:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8007e52:	6878      	ldr	r0, [r7, #4]
 8007e54:	f7ff feee 	bl	8007c34 <__NVIC_SetPriorityGrouping>
}
 8007e58:	bf00      	nop
 8007e5a:	3708      	adds	r7, #8
 8007e5c:	46bd      	mov	sp, r7
 8007e5e:	bd80      	pop	{r7, pc}

08007e60 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007e60:	b580      	push	{r7, lr}
 8007e62:	b086      	sub	sp, #24
 8007e64:	af00      	add	r7, sp, #0
 8007e66:	4603      	mov	r3, r0
 8007e68:	60b9      	str	r1, [r7, #8]
 8007e6a:	607a      	str	r2, [r7, #4]
 8007e6c:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8007e6e:	f7ff ff05 	bl	8007c7c <__NVIC_GetPriorityGrouping>
 8007e72:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8007e74:	687a      	ldr	r2, [r7, #4]
 8007e76:	68b9      	ldr	r1, [r7, #8]
 8007e78:	6978      	ldr	r0, [r7, #20]
 8007e7a:	f7ff ffb3 	bl	8007de4 <NVIC_EncodePriority>
 8007e7e:	4602      	mov	r2, r0
 8007e80:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007e84:	4611      	mov	r1, r2
 8007e86:	4618      	mov	r0, r3
 8007e88:	f7ff ff82 	bl	8007d90 <__NVIC_SetPriority>
}
 8007e8c:	bf00      	nop
 8007e8e:	3718      	adds	r7, #24
 8007e90:	46bd      	mov	sp, r7
 8007e92:	bd80      	pop	{r7, pc}

08007e94 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007e94:	b580      	push	{r7, lr}
 8007e96:	b082      	sub	sp, #8
 8007e98:	af00      	add	r7, sp, #0
 8007e9a:	4603      	mov	r3, r0
 8007e9c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8007e9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007ea2:	4618      	mov	r0, r3
 8007ea4:	f7ff fef8 	bl	8007c98 <__NVIC_EnableIRQ>
}
 8007ea8:	bf00      	nop
 8007eaa:	3708      	adds	r7, #8
 8007eac:	46bd      	mov	sp, r7
 8007eae:	bd80      	pop	{r7, pc}

08007eb0 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8007eb0:	b580      	push	{r7, lr}
 8007eb2:	b082      	sub	sp, #8
 8007eb4:	af00      	add	r7, sp, #0
 8007eb6:	4603      	mov	r3, r0
 8007eb8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8007eba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007ebe:	4618      	mov	r0, r3
 8007ec0:	f7ff ff08 	bl	8007cd4 <__NVIC_DisableIRQ>
}
 8007ec4:	bf00      	nop
 8007ec6:	3708      	adds	r7, #8
 8007ec8:	46bd      	mov	sp, r7
 8007eca:	bd80      	pop	{r7, pc}

08007ecc <HAL_NVIC_SetPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 8007ecc:	b580      	push	{r7, lr}
 8007ece:	b082      	sub	sp, #8
 8007ed0:	af00      	add	r7, sp, #0
 8007ed2:	4603      	mov	r3, r0
 8007ed4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Set interrupt pending */
  NVIC_SetPendingIRQ(IRQn);
 8007ed6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007eda:	4618      	mov	r0, r3
 8007edc:	f7ff ff1c 	bl	8007d18 <__NVIC_SetPendingIRQ>
}
 8007ee0:	bf00      	nop
 8007ee2:	3708      	adds	r7, #8
 8007ee4:	46bd      	mov	sp, r7
 8007ee6:	bd80      	pop	{r7, pc}

08007ee8 <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8007ee8:	b580      	push	{r7, lr}
 8007eea:	b082      	sub	sp, #8
 8007eec:	af00      	add	r7, sp, #0
 8007eee:	4603      	mov	r3, r0
 8007ef0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 8007ef2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007ef6:	4618      	mov	r0, r3
 8007ef8:	f7ff ff2c 	bl	8007d54 <__NVIC_ClearPendingIRQ>
}
 8007efc:	bf00      	nop
 8007efe:	3708      	adds	r7, #8
 8007f00:	46bd      	mov	sp, r7
 8007f02:	bd80      	pop	{r7, pc}

08007f04 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007f04:	b480      	push	{r7}
 8007f06:	b087      	sub	sp, #28
 8007f08:	af00      	add	r7, sp, #0
 8007f0a:	6078      	str	r0, [r7, #4]
 8007f0c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8007f0e:	2300      	movs	r3, #0
 8007f10:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8007f12:	e14c      	b.n	80081ae <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8007f14:	683b      	ldr	r3, [r7, #0]
 8007f16:	681a      	ldr	r2, [r3, #0]
 8007f18:	2101      	movs	r1, #1
 8007f1a:	697b      	ldr	r3, [r7, #20]
 8007f1c:	fa01 f303 	lsl.w	r3, r1, r3
 8007f20:	4013      	ands	r3, r2
 8007f22:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	f000 813e 	beq.w	80081a8 <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8007f2c:	683b      	ldr	r3, [r7, #0]
 8007f2e:	685b      	ldr	r3, [r3, #4]
 8007f30:	2b01      	cmp	r3, #1
 8007f32:	d00b      	beq.n	8007f4c <HAL_GPIO_Init+0x48>
 8007f34:	683b      	ldr	r3, [r7, #0]
 8007f36:	685b      	ldr	r3, [r3, #4]
 8007f38:	2b02      	cmp	r3, #2
 8007f3a:	d007      	beq.n	8007f4c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8007f3c:	683b      	ldr	r3, [r7, #0]
 8007f3e:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8007f40:	2b11      	cmp	r3, #17
 8007f42:	d003      	beq.n	8007f4c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8007f44:	683b      	ldr	r3, [r7, #0]
 8007f46:	685b      	ldr	r3, [r3, #4]
 8007f48:	2b12      	cmp	r3, #18
 8007f4a:	d130      	bne.n	8007fae <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	689b      	ldr	r3, [r3, #8]
 8007f50:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8007f52:	697b      	ldr	r3, [r7, #20]
 8007f54:	005b      	lsls	r3, r3, #1
 8007f56:	2203      	movs	r2, #3
 8007f58:	fa02 f303 	lsl.w	r3, r2, r3
 8007f5c:	43db      	mvns	r3, r3
 8007f5e:	693a      	ldr	r2, [r7, #16]
 8007f60:	4013      	ands	r3, r2
 8007f62:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8007f64:	683b      	ldr	r3, [r7, #0]
 8007f66:	68da      	ldr	r2, [r3, #12]
 8007f68:	697b      	ldr	r3, [r7, #20]
 8007f6a:	005b      	lsls	r3, r3, #1
 8007f6c:	fa02 f303 	lsl.w	r3, r2, r3
 8007f70:	693a      	ldr	r2, [r7, #16]
 8007f72:	4313      	orrs	r3, r2
 8007f74:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	693a      	ldr	r2, [r7, #16]
 8007f7a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	685b      	ldr	r3, [r3, #4]
 8007f80:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8007f82:	2201      	movs	r2, #1
 8007f84:	697b      	ldr	r3, [r7, #20]
 8007f86:	fa02 f303 	lsl.w	r3, r2, r3
 8007f8a:	43db      	mvns	r3, r3
 8007f8c:	693a      	ldr	r2, [r7, #16]
 8007f8e:	4013      	ands	r3, r2
 8007f90:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8007f92:	683b      	ldr	r3, [r7, #0]
 8007f94:	685b      	ldr	r3, [r3, #4]
 8007f96:	091b      	lsrs	r3, r3, #4
 8007f98:	f003 0201 	and.w	r2, r3, #1
 8007f9c:	697b      	ldr	r3, [r7, #20]
 8007f9e:	fa02 f303 	lsl.w	r3, r2, r3
 8007fa2:	693a      	ldr	r2, [r7, #16]
 8007fa4:	4313      	orrs	r3, r2
 8007fa6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	693a      	ldr	r2, [r7, #16]
 8007fac:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	68db      	ldr	r3, [r3, #12]
 8007fb2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8007fb4:	697b      	ldr	r3, [r7, #20]
 8007fb6:	005b      	lsls	r3, r3, #1
 8007fb8:	2203      	movs	r2, #3
 8007fba:	fa02 f303 	lsl.w	r3, r2, r3
 8007fbe:	43db      	mvns	r3, r3
 8007fc0:	693a      	ldr	r2, [r7, #16]
 8007fc2:	4013      	ands	r3, r2
 8007fc4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8007fc6:	683b      	ldr	r3, [r7, #0]
 8007fc8:	689a      	ldr	r2, [r3, #8]
 8007fca:	697b      	ldr	r3, [r7, #20]
 8007fcc:	005b      	lsls	r3, r3, #1
 8007fce:	fa02 f303 	lsl.w	r3, r2, r3
 8007fd2:	693a      	ldr	r2, [r7, #16]
 8007fd4:	4313      	orrs	r3, r2
 8007fd6:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	693a      	ldr	r2, [r7, #16]
 8007fdc:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8007fde:	683b      	ldr	r3, [r7, #0]
 8007fe0:	685b      	ldr	r3, [r3, #4]
 8007fe2:	2b02      	cmp	r3, #2
 8007fe4:	d003      	beq.n	8007fee <HAL_GPIO_Init+0xea>
 8007fe6:	683b      	ldr	r3, [r7, #0]
 8007fe8:	685b      	ldr	r3, [r3, #4]
 8007fea:	2b12      	cmp	r3, #18
 8007fec:	d123      	bne.n	8008036 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8007fee:	697b      	ldr	r3, [r7, #20]
 8007ff0:	08da      	lsrs	r2, r3, #3
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	3208      	adds	r2, #8
 8007ff6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007ffa:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8007ffc:	697b      	ldr	r3, [r7, #20]
 8007ffe:	f003 0307 	and.w	r3, r3, #7
 8008002:	009b      	lsls	r3, r3, #2
 8008004:	220f      	movs	r2, #15
 8008006:	fa02 f303 	lsl.w	r3, r2, r3
 800800a:	43db      	mvns	r3, r3
 800800c:	693a      	ldr	r2, [r7, #16]
 800800e:	4013      	ands	r3, r2
 8008010:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8008012:	683b      	ldr	r3, [r7, #0]
 8008014:	691a      	ldr	r2, [r3, #16]
 8008016:	697b      	ldr	r3, [r7, #20]
 8008018:	f003 0307 	and.w	r3, r3, #7
 800801c:	009b      	lsls	r3, r3, #2
 800801e:	fa02 f303 	lsl.w	r3, r2, r3
 8008022:	693a      	ldr	r2, [r7, #16]
 8008024:	4313      	orrs	r3, r2
 8008026:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8008028:	697b      	ldr	r3, [r7, #20]
 800802a:	08da      	lsrs	r2, r3, #3
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	3208      	adds	r2, #8
 8008030:	6939      	ldr	r1, [r7, #16]
 8008032:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800803c:	697b      	ldr	r3, [r7, #20]
 800803e:	005b      	lsls	r3, r3, #1
 8008040:	2203      	movs	r2, #3
 8008042:	fa02 f303 	lsl.w	r3, r2, r3
 8008046:	43db      	mvns	r3, r3
 8008048:	693a      	ldr	r2, [r7, #16]
 800804a:	4013      	ands	r3, r2
 800804c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800804e:	683b      	ldr	r3, [r7, #0]
 8008050:	685b      	ldr	r3, [r3, #4]
 8008052:	f003 0203 	and.w	r2, r3, #3
 8008056:	697b      	ldr	r3, [r7, #20]
 8008058:	005b      	lsls	r3, r3, #1
 800805a:	fa02 f303 	lsl.w	r3, r2, r3
 800805e:	693a      	ldr	r2, [r7, #16]
 8008060:	4313      	orrs	r3, r2
 8008062:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	693a      	ldr	r2, [r7, #16]
 8008068:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800806a:	683b      	ldr	r3, [r7, #0]
 800806c:	685b      	ldr	r3, [r3, #4]
 800806e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008072:	2b00      	cmp	r3, #0
 8008074:	f000 8098 	beq.w	80081a8 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8008078:	4a54      	ldr	r2, [pc, #336]	; (80081cc <HAL_GPIO_Init+0x2c8>)
 800807a:	697b      	ldr	r3, [r7, #20]
 800807c:	089b      	lsrs	r3, r3, #2
 800807e:	3302      	adds	r3, #2
 8008080:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008084:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8008086:	697b      	ldr	r3, [r7, #20]
 8008088:	f003 0303 	and.w	r3, r3, #3
 800808c:	009b      	lsls	r3, r3, #2
 800808e:	220f      	movs	r2, #15
 8008090:	fa02 f303 	lsl.w	r3, r2, r3
 8008094:	43db      	mvns	r3, r3
 8008096:	693a      	ldr	r2, [r7, #16]
 8008098:	4013      	ands	r3, r2
 800809a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80080a2:	d019      	beq.n	80080d8 <HAL_GPIO_Init+0x1d4>
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	4a4a      	ldr	r2, [pc, #296]	; (80081d0 <HAL_GPIO_Init+0x2cc>)
 80080a8:	4293      	cmp	r3, r2
 80080aa:	d013      	beq.n	80080d4 <HAL_GPIO_Init+0x1d0>
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	4a49      	ldr	r2, [pc, #292]	; (80081d4 <HAL_GPIO_Init+0x2d0>)
 80080b0:	4293      	cmp	r3, r2
 80080b2:	d00d      	beq.n	80080d0 <HAL_GPIO_Init+0x1cc>
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	4a48      	ldr	r2, [pc, #288]	; (80081d8 <HAL_GPIO_Init+0x2d4>)
 80080b8:	4293      	cmp	r3, r2
 80080ba:	d007      	beq.n	80080cc <HAL_GPIO_Init+0x1c8>
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	4a47      	ldr	r2, [pc, #284]	; (80081dc <HAL_GPIO_Init+0x2d8>)
 80080c0:	4293      	cmp	r3, r2
 80080c2:	d101      	bne.n	80080c8 <HAL_GPIO_Init+0x1c4>
 80080c4:	2304      	movs	r3, #4
 80080c6:	e008      	b.n	80080da <HAL_GPIO_Init+0x1d6>
 80080c8:	2307      	movs	r3, #7
 80080ca:	e006      	b.n	80080da <HAL_GPIO_Init+0x1d6>
 80080cc:	2303      	movs	r3, #3
 80080ce:	e004      	b.n	80080da <HAL_GPIO_Init+0x1d6>
 80080d0:	2302      	movs	r3, #2
 80080d2:	e002      	b.n	80080da <HAL_GPIO_Init+0x1d6>
 80080d4:	2301      	movs	r3, #1
 80080d6:	e000      	b.n	80080da <HAL_GPIO_Init+0x1d6>
 80080d8:	2300      	movs	r3, #0
 80080da:	697a      	ldr	r2, [r7, #20]
 80080dc:	f002 0203 	and.w	r2, r2, #3
 80080e0:	0092      	lsls	r2, r2, #2
 80080e2:	4093      	lsls	r3, r2
 80080e4:	693a      	ldr	r2, [r7, #16]
 80080e6:	4313      	orrs	r3, r2
 80080e8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80080ea:	4938      	ldr	r1, [pc, #224]	; (80081cc <HAL_GPIO_Init+0x2c8>)
 80080ec:	697b      	ldr	r3, [r7, #20]
 80080ee:	089b      	lsrs	r3, r3, #2
 80080f0:	3302      	adds	r3, #2
 80080f2:	693a      	ldr	r2, [r7, #16]
 80080f4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80080f8:	4b39      	ldr	r3, [pc, #228]	; (80081e0 <HAL_GPIO_Init+0x2dc>)
 80080fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80080fe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8008100:	68fb      	ldr	r3, [r7, #12]
 8008102:	43db      	mvns	r3, r3
 8008104:	693a      	ldr	r2, [r7, #16]
 8008106:	4013      	ands	r3, r2
 8008108:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800810a:	683b      	ldr	r3, [r7, #0]
 800810c:	685b      	ldr	r3, [r3, #4]
 800810e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008112:	2b00      	cmp	r3, #0
 8008114:	d003      	beq.n	800811e <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 8008116:	693a      	ldr	r2, [r7, #16]
 8008118:	68fb      	ldr	r3, [r7, #12]
 800811a:	4313      	orrs	r3, r2
 800811c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800811e:	4a30      	ldr	r2, [pc, #192]	; (80081e0 <HAL_GPIO_Init+0x2dc>)
 8008120:	693b      	ldr	r3, [r7, #16]
 8008122:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 8008126:	4b2e      	ldr	r3, [pc, #184]	; (80081e0 <HAL_GPIO_Init+0x2dc>)
 8008128:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800812c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800812e:	68fb      	ldr	r3, [r7, #12]
 8008130:	43db      	mvns	r3, r3
 8008132:	693a      	ldr	r2, [r7, #16]
 8008134:	4013      	ands	r3, r2
 8008136:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8008138:	683b      	ldr	r3, [r7, #0]
 800813a:	685b      	ldr	r3, [r3, #4]
 800813c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008140:	2b00      	cmp	r3, #0
 8008142:	d003      	beq.n	800814c <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8008144:	693a      	ldr	r2, [r7, #16]
 8008146:	68fb      	ldr	r3, [r7, #12]
 8008148:	4313      	orrs	r3, r2
 800814a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800814c:	4a24      	ldr	r2, [pc, #144]	; (80081e0 <HAL_GPIO_Init+0x2dc>)
 800814e:	693b      	ldr	r3, [r7, #16]
 8008150:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8008154:	4b22      	ldr	r3, [pc, #136]	; (80081e0 <HAL_GPIO_Init+0x2dc>)
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800815a:	68fb      	ldr	r3, [r7, #12]
 800815c:	43db      	mvns	r3, r3
 800815e:	693a      	ldr	r2, [r7, #16]
 8008160:	4013      	ands	r3, r2
 8008162:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8008164:	683b      	ldr	r3, [r7, #0]
 8008166:	685b      	ldr	r3, [r3, #4]
 8008168:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800816c:	2b00      	cmp	r3, #0
 800816e:	d003      	beq.n	8008178 <HAL_GPIO_Init+0x274>
        {
          temp |= iocurrent;
 8008170:	693a      	ldr	r2, [r7, #16]
 8008172:	68fb      	ldr	r3, [r7, #12]
 8008174:	4313      	orrs	r3, r2
 8008176:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8008178:	4a19      	ldr	r2, [pc, #100]	; (80081e0 <HAL_GPIO_Init+0x2dc>)
 800817a:	693b      	ldr	r3, [r7, #16]
 800817c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800817e:	4b18      	ldr	r3, [pc, #96]	; (80081e0 <HAL_GPIO_Init+0x2dc>)
 8008180:	685b      	ldr	r3, [r3, #4]
 8008182:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8008184:	68fb      	ldr	r3, [r7, #12]
 8008186:	43db      	mvns	r3, r3
 8008188:	693a      	ldr	r2, [r7, #16]
 800818a:	4013      	ands	r3, r2
 800818c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800818e:	683b      	ldr	r3, [r7, #0]
 8008190:	685b      	ldr	r3, [r3, #4]
 8008192:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008196:	2b00      	cmp	r3, #0
 8008198:	d003      	beq.n	80081a2 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 800819a:	693a      	ldr	r2, [r7, #16]
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	4313      	orrs	r3, r2
 80081a0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80081a2:	4a0f      	ldr	r2, [pc, #60]	; (80081e0 <HAL_GPIO_Init+0x2dc>)
 80081a4:	693b      	ldr	r3, [r7, #16]
 80081a6:	6053      	str	r3, [r2, #4]
      }
    }
    
    position++;
 80081a8:	697b      	ldr	r3, [r7, #20]
 80081aa:	3301      	adds	r3, #1
 80081ac:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80081ae:	683b      	ldr	r3, [r7, #0]
 80081b0:	681a      	ldr	r2, [r3, #0]
 80081b2:	697b      	ldr	r3, [r7, #20]
 80081b4:	fa22 f303 	lsr.w	r3, r2, r3
 80081b8:	2b00      	cmp	r3, #0
 80081ba:	f47f aeab 	bne.w	8007f14 <HAL_GPIO_Init+0x10>
  }
}
 80081be:	bf00      	nop
 80081c0:	371c      	adds	r7, #28
 80081c2:	46bd      	mov	sp, r7
 80081c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081c8:	4770      	bx	lr
 80081ca:	bf00      	nop
 80081cc:	40010000 	.word	0x40010000
 80081d0:	48000400 	.word	0x48000400
 80081d4:	48000800 	.word	0x48000800
 80081d8:	48000c00 	.word	0x48000c00
 80081dc:	48001000 	.word	0x48001000
 80081e0:	58000800 	.word	0x58000800

080081e4 <HAL_GPIO_ReadPin>:
  * @param GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80081e4:	b480      	push	{r7}
 80081e6:	b085      	sub	sp, #20
 80081e8:	af00      	add	r7, sp, #0
 80081ea:	6078      	str	r0, [r7, #4]
 80081ec:	460b      	mov	r3, r1
 80081ee:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	691a      	ldr	r2, [r3, #16]
 80081f4:	887b      	ldrh	r3, [r7, #2]
 80081f6:	4013      	ands	r3, r2
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	d002      	beq.n	8008202 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80081fc:	2301      	movs	r3, #1
 80081fe:	73fb      	strb	r3, [r7, #15]
 8008200:	e001      	b.n	8008206 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8008202:	2300      	movs	r3, #0
 8008204:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8008206:	7bfb      	ldrb	r3, [r7, #15]
}
 8008208:	4618      	mov	r0, r3
 800820a:	3714      	adds	r7, #20
 800820c:	46bd      	mov	sp, r7
 800820e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008212:	4770      	bx	lr

08008214 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008214:	b480      	push	{r7}
 8008216:	b083      	sub	sp, #12
 8008218:	af00      	add	r7, sp, #0
 800821a:	6078      	str	r0, [r7, #4]
 800821c:	460b      	mov	r3, r1
 800821e:	807b      	strh	r3, [r7, #2]
 8008220:	4613      	mov	r3, r2
 8008222:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8008224:	787b      	ldrb	r3, [r7, #1]
 8008226:	2b00      	cmp	r3, #0
 8008228:	d003      	beq.n	8008232 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800822a:	887a      	ldrh	r2, [r7, #2]
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8008230:	e002      	b.n	8008238 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8008232:	887a      	ldrh	r2, [r7, #2]
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	629a      	str	r2, [r3, #40]	; 0x28
}
 8008238:	bf00      	nop
 800823a:	370c      	adds	r7, #12
 800823c:	46bd      	mov	sp, r7
 800823e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008242:	4770      	bx	lr

08008244 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8008244:	b580      	push	{r7, lr}
 8008246:	b082      	sub	sp, #8
 8008248:	af00      	add	r7, sp, #0
 800824a:	4603      	mov	r3, r0
 800824c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800824e:	4b08      	ldr	r3, [pc, #32]	; (8008270 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8008250:	68da      	ldr	r2, [r3, #12]
 8008252:	88fb      	ldrh	r3, [r7, #6]
 8008254:	4013      	ands	r3, r2
 8008256:	2b00      	cmp	r3, #0
 8008258:	d006      	beq.n	8008268 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800825a:	4a05      	ldr	r2, [pc, #20]	; (8008270 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800825c:	88fb      	ldrh	r3, [r7, #6]
 800825e:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8008260:	88fb      	ldrh	r3, [r7, #6]
 8008262:	4618      	mov	r0, r3
 8008264:	f7fc faaa 	bl	80047bc <HAL_GPIO_EXTI_Callback>
  }
}
 8008268:	bf00      	nop
 800826a:	3708      	adds	r7, #8
 800826c:	46bd      	mov	sp, r7
 800826e:	bd80      	pop	{r7, pc}
 8008270:	58000800 	.word	0x58000800

08008274 <HAL_HSEM_IRQHandler>:
/**
  * @brief  This function handles HSEM interrupt request
  * @retval None
  */
void HAL_HSEM_IRQHandler(void)
{
 8008274:	b580      	push	{r7, lr}
 8008276:	b082      	sub	sp, #8
 8008278:	af00      	add	r7, sp, #0
  uint32_t statusreg;
  /* Get the list of masked freed semaphores*/
  statusreg = HSEM_COMMON->MISR;
 800827a:	4b0a      	ldr	r3, [pc, #40]	; (80082a4 <HAL_HSEM_IRQHandler+0x30>)
 800827c:	68db      	ldr	r3, [r3, #12]
 800827e:	607b      	str	r3, [r7, #4]

  /*Disable Interrupts*/
  HSEM_COMMON->IER &= ~((uint32_t)statusreg);
 8008280:	4b08      	ldr	r3, [pc, #32]	; (80082a4 <HAL_HSEM_IRQHandler+0x30>)
 8008282:	681a      	ldr	r2, [r3, #0]
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	43db      	mvns	r3, r3
 8008288:	4906      	ldr	r1, [pc, #24]	; (80082a4 <HAL_HSEM_IRQHandler+0x30>)
 800828a:	4013      	ands	r3, r2
 800828c:	600b      	str	r3, [r1, #0]

  /*Clear Flags*/
  HSEM_COMMON->ICR = ((uint32_t)statusreg);
 800828e:	4a05      	ldr	r2, [pc, #20]	; (80082a4 <HAL_HSEM_IRQHandler+0x30>)
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	6053      	str	r3, [r2, #4]

  /* Call FreeCallback */
  HAL_HSEM_FreeCallback(statusreg);
 8008294:	6878      	ldr	r0, [r7, #4]
 8008296:	f000 f807 	bl	80082a8 <HAL_HSEM_FreeCallback>
}
 800829a:	bf00      	nop
 800829c:	3708      	adds	r7, #8
 800829e:	46bd      	mov	sp, r7
 80082a0:	bd80      	pop	{r7, pc}
 80082a2:	bf00      	nop
 80082a4:	58001500 	.word	0x58001500

080082a8 <HAL_HSEM_FreeCallback>:
  * @brief Semaphore Released Callback.
  * @param SemMask: Mask of Released semaphores
  * @retval None
  */
__weak void HAL_HSEM_FreeCallback(uint32_t SemMask)
{
 80082a8:	b480      	push	{r7}
 80082aa:	b083      	sub	sp, #12
 80082ac:	af00      	add	r7, sp, #0
 80082ae:	6078      	str	r0, [r7, #4]
  UNUSED(SemMask);

  /* NOTE : This function should not be modified, when the callback is needed,
  the HAL_HSEM_FreeCallback can be implemented in the user file
    */
}
 80082b0:	bf00      	nop
 80082b2:	370c      	adds	r7, #12
 80082b4:	46bd      	mov	sp, r7
 80082b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ba:	4770      	bx	lr

080082bc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80082bc:	b580      	push	{r7, lr}
 80082be:	b082      	sub	sp, #8
 80082c0:	af00      	add	r7, sp, #0
 80082c2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	2b00      	cmp	r3, #0
 80082c8:	d101      	bne.n	80082ce <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80082ca:	2301      	movs	r3, #1
 80082cc:	e081      	b.n	80083d2 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80082d4:	b2db      	uxtb	r3, r3
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	d106      	bne.n	80082e8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	2200      	movs	r2, #0
 80082de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80082e2:	6878      	ldr	r0, [r7, #4]
 80082e4:	f7fe fe60 	bl	8006fa8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	2224      	movs	r2, #36	; 0x24
 80082ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	681a      	ldr	r2, [r3, #0]
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	f022 0201 	bic.w	r2, r2, #1
 80082fe:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	685a      	ldr	r2, [r3, #4]
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800830c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	689a      	ldr	r2, [r3, #8]
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800831c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	68db      	ldr	r3, [r3, #12]
 8008322:	2b01      	cmp	r3, #1
 8008324:	d107      	bne.n	8008336 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	689a      	ldr	r2, [r3, #8]
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008332:	609a      	str	r2, [r3, #8]
 8008334:	e006      	b.n	8008344 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	689a      	ldr	r2, [r3, #8]
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8008342:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	68db      	ldr	r3, [r3, #12]
 8008348:	2b02      	cmp	r3, #2
 800834a:	d104      	bne.n	8008356 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008354:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	685b      	ldr	r3, [r3, #4]
 800835c:	687a      	ldr	r2, [r7, #4]
 800835e:	6812      	ldr	r2, [r2, #0]
 8008360:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8008364:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008368:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	68da      	ldr	r2, [r3, #12]
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008378:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	691a      	ldr	r2, [r3, #16]
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	695b      	ldr	r3, [r3, #20]
 8008382:	ea42 0103 	orr.w	r1, r2, r3
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	699b      	ldr	r3, [r3, #24]
 800838a:	021a      	lsls	r2, r3, #8
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	430a      	orrs	r2, r1
 8008392:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	69d9      	ldr	r1, [r3, #28]
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	6a1a      	ldr	r2, [r3, #32]
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	430a      	orrs	r2, r1
 80083a2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	681a      	ldr	r2, [r3, #0]
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	f042 0201 	orr.w	r2, r2, #1
 80083b2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	2200      	movs	r2, #0
 80083b8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	2220      	movs	r2, #32
 80083be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	2200      	movs	r2, #0
 80083c6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	2200      	movs	r2, #0
 80083cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80083d0:	2300      	movs	r3, #0
}
 80083d2:	4618      	mov	r0, r3
 80083d4:	3708      	adds	r7, #8
 80083d6:	46bd      	mov	sp, r7
 80083d8:	bd80      	pop	{r7, pc}
	...

080083dc <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80083dc:	b580      	push	{r7, lr}
 80083de:	b088      	sub	sp, #32
 80083e0:	af02      	add	r7, sp, #8
 80083e2:	60f8      	str	r0, [r7, #12]
 80083e4:	607a      	str	r2, [r7, #4]
 80083e6:	461a      	mov	r2, r3
 80083e8:	460b      	mov	r3, r1
 80083ea:	817b      	strh	r3, [r7, #10]
 80083ec:	4613      	mov	r3, r2
 80083ee:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80083f0:	68fb      	ldr	r3, [r7, #12]
 80083f2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80083f6:	b2db      	uxtb	r3, r3
 80083f8:	2b20      	cmp	r3, #32
 80083fa:	f040 80da 	bne.w	80085b2 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008404:	2b01      	cmp	r3, #1
 8008406:	d101      	bne.n	800840c <HAL_I2C_Master_Transmit+0x30>
 8008408:	2302      	movs	r3, #2
 800840a:	e0d3      	b.n	80085b4 <HAL_I2C_Master_Transmit+0x1d8>
 800840c:	68fb      	ldr	r3, [r7, #12]
 800840e:	2201      	movs	r2, #1
 8008410:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8008414:	f7ff fbde 	bl	8007bd4 <HAL_GetTick>
 8008418:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800841a:	697b      	ldr	r3, [r7, #20]
 800841c:	9300      	str	r3, [sp, #0]
 800841e:	2319      	movs	r3, #25
 8008420:	2201      	movs	r2, #1
 8008422:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8008426:	68f8      	ldr	r0, [r7, #12]
 8008428:	f000 fcbc 	bl	8008da4 <I2C_WaitOnFlagUntilTimeout>
 800842c:	4603      	mov	r3, r0
 800842e:	2b00      	cmp	r3, #0
 8008430:	d001      	beq.n	8008436 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8008432:	2301      	movs	r3, #1
 8008434:	e0be      	b.n	80085b4 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8008436:	68fb      	ldr	r3, [r7, #12]
 8008438:	2221      	movs	r2, #33	; 0x21
 800843a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800843e:	68fb      	ldr	r3, [r7, #12]
 8008440:	2210      	movs	r2, #16
 8008442:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008446:	68fb      	ldr	r3, [r7, #12]
 8008448:	2200      	movs	r2, #0
 800844a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800844c:	68fb      	ldr	r3, [r7, #12]
 800844e:	687a      	ldr	r2, [r7, #4]
 8008450:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8008452:	68fb      	ldr	r3, [r7, #12]
 8008454:	893a      	ldrh	r2, [r7, #8]
 8008456:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8008458:	68fb      	ldr	r3, [r7, #12]
 800845a:	2200      	movs	r2, #0
 800845c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800845e:	68fb      	ldr	r3, [r7, #12]
 8008460:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008462:	b29b      	uxth	r3, r3
 8008464:	2bff      	cmp	r3, #255	; 0xff
 8008466:	d90e      	bls.n	8008486 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8008468:	68fb      	ldr	r3, [r7, #12]
 800846a:	22ff      	movs	r2, #255	; 0xff
 800846c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800846e:	68fb      	ldr	r3, [r7, #12]
 8008470:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008472:	b2da      	uxtb	r2, r3
 8008474:	8979      	ldrh	r1, [r7, #10]
 8008476:	4b51      	ldr	r3, [pc, #324]	; (80085bc <HAL_I2C_Master_Transmit+0x1e0>)
 8008478:	9300      	str	r3, [sp, #0]
 800847a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800847e:	68f8      	ldr	r0, [r7, #12]
 8008480:	f000 fe1e 	bl	80090c0 <I2C_TransferConfig>
 8008484:	e06c      	b.n	8008560 <HAL_I2C_Master_Transmit+0x184>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8008486:	68fb      	ldr	r3, [r7, #12]
 8008488:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800848a:	b29a      	uxth	r2, r3
 800848c:	68fb      	ldr	r3, [r7, #12]
 800848e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 8008490:	68fb      	ldr	r3, [r7, #12]
 8008492:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008494:	b2da      	uxtb	r2, r3
 8008496:	8979      	ldrh	r1, [r7, #10]
 8008498:	4b48      	ldr	r3, [pc, #288]	; (80085bc <HAL_I2C_Master_Transmit+0x1e0>)
 800849a:	9300      	str	r3, [sp, #0]
 800849c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80084a0:	68f8      	ldr	r0, [r7, #12]
 80084a2:	f000 fe0d 	bl	80090c0 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 80084a6:	e05b      	b.n	8008560 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80084a8:	697a      	ldr	r2, [r7, #20]
 80084aa:	6a39      	ldr	r1, [r7, #32]
 80084ac:	68f8      	ldr	r0, [r7, #12]
 80084ae:	f000 fcb9 	bl	8008e24 <I2C_WaitOnTXISFlagUntilTimeout>
 80084b2:	4603      	mov	r3, r0
 80084b4:	2b00      	cmp	r3, #0
 80084b6:	d001      	beq.n	80084bc <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 80084b8:	2301      	movs	r3, #1
 80084ba:	e07b      	b.n	80085b4 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80084bc:	68fb      	ldr	r3, [r7, #12]
 80084be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084c0:	781a      	ldrb	r2, [r3, #0]
 80084c2:	68fb      	ldr	r3, [r7, #12]
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80084c8:	68fb      	ldr	r3, [r7, #12]
 80084ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084cc:	1c5a      	adds	r2, r3, #1
 80084ce:	68fb      	ldr	r3, [r7, #12]
 80084d0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80084d2:	68fb      	ldr	r3, [r7, #12]
 80084d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80084d6:	b29b      	uxth	r3, r3
 80084d8:	3b01      	subs	r3, #1
 80084da:	b29a      	uxth	r2, r3
 80084dc:	68fb      	ldr	r3, [r7, #12]
 80084de:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80084e0:	68fb      	ldr	r3, [r7, #12]
 80084e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80084e4:	3b01      	subs	r3, #1
 80084e6:	b29a      	uxth	r2, r3
 80084e8:	68fb      	ldr	r3, [r7, #12]
 80084ea:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80084ec:	68fb      	ldr	r3, [r7, #12]
 80084ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80084f0:	b29b      	uxth	r3, r3
 80084f2:	2b00      	cmp	r3, #0
 80084f4:	d034      	beq.n	8008560 <HAL_I2C_Master_Transmit+0x184>
 80084f6:	68fb      	ldr	r3, [r7, #12]
 80084f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	d130      	bne.n	8008560 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80084fe:	697b      	ldr	r3, [r7, #20]
 8008500:	9300      	str	r3, [sp, #0]
 8008502:	6a3b      	ldr	r3, [r7, #32]
 8008504:	2200      	movs	r2, #0
 8008506:	2180      	movs	r1, #128	; 0x80
 8008508:	68f8      	ldr	r0, [r7, #12]
 800850a:	f000 fc4b 	bl	8008da4 <I2C_WaitOnFlagUntilTimeout>
 800850e:	4603      	mov	r3, r0
 8008510:	2b00      	cmp	r3, #0
 8008512:	d001      	beq.n	8008518 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8008514:	2301      	movs	r3, #1
 8008516:	e04d      	b.n	80085b4 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008518:	68fb      	ldr	r3, [r7, #12]
 800851a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800851c:	b29b      	uxth	r3, r3
 800851e:	2bff      	cmp	r3, #255	; 0xff
 8008520:	d90e      	bls.n	8008540 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8008522:	68fb      	ldr	r3, [r7, #12]
 8008524:	22ff      	movs	r2, #255	; 0xff
 8008526:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8008528:	68fb      	ldr	r3, [r7, #12]
 800852a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800852c:	b2da      	uxtb	r2, r3
 800852e:	8979      	ldrh	r1, [r7, #10]
 8008530:	2300      	movs	r3, #0
 8008532:	9300      	str	r3, [sp, #0]
 8008534:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008538:	68f8      	ldr	r0, [r7, #12]
 800853a:	f000 fdc1 	bl	80090c0 <I2C_TransferConfig>
 800853e:	e00f      	b.n	8008560 <HAL_I2C_Master_Transmit+0x184>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8008540:	68fb      	ldr	r3, [r7, #12]
 8008542:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008544:	b29a      	uxth	r2, r3
 8008546:	68fb      	ldr	r3, [r7, #12]
 8008548:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800854a:	68fb      	ldr	r3, [r7, #12]
 800854c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800854e:	b2da      	uxtb	r2, r3
 8008550:	8979      	ldrh	r1, [r7, #10]
 8008552:	2300      	movs	r3, #0
 8008554:	9300      	str	r3, [sp, #0]
 8008556:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800855a:	68f8      	ldr	r0, [r7, #12]
 800855c:	f000 fdb0 	bl	80090c0 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8008560:	68fb      	ldr	r3, [r7, #12]
 8008562:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008564:	b29b      	uxth	r3, r3
 8008566:	2b00      	cmp	r3, #0
 8008568:	d19e      	bne.n	80084a8 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800856a:	697a      	ldr	r2, [r7, #20]
 800856c:	6a39      	ldr	r1, [r7, #32]
 800856e:	68f8      	ldr	r0, [r7, #12]
 8008570:	f000 fc98 	bl	8008ea4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8008574:	4603      	mov	r3, r0
 8008576:	2b00      	cmp	r3, #0
 8008578:	d001      	beq.n	800857e <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 800857a:	2301      	movs	r3, #1
 800857c:	e01a      	b.n	80085b4 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800857e:	68fb      	ldr	r3, [r7, #12]
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	2220      	movs	r2, #32
 8008584:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8008586:	68fb      	ldr	r3, [r7, #12]
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	6859      	ldr	r1, [r3, #4]
 800858c:	68fb      	ldr	r3, [r7, #12]
 800858e:	681a      	ldr	r2, [r3, #0]
 8008590:	4b0b      	ldr	r3, [pc, #44]	; (80085c0 <HAL_I2C_Master_Transmit+0x1e4>)
 8008592:	400b      	ands	r3, r1
 8008594:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8008596:	68fb      	ldr	r3, [r7, #12]
 8008598:	2220      	movs	r2, #32
 800859a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800859e:	68fb      	ldr	r3, [r7, #12]
 80085a0:	2200      	movs	r2, #0
 80085a2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80085a6:	68fb      	ldr	r3, [r7, #12]
 80085a8:	2200      	movs	r2, #0
 80085aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80085ae:	2300      	movs	r3, #0
 80085b0:	e000      	b.n	80085b4 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 80085b2:	2302      	movs	r3, #2
  }
}
 80085b4:	4618      	mov	r0, r3
 80085b6:	3718      	adds	r7, #24
 80085b8:	46bd      	mov	sp, r7
 80085ba:	bd80      	pop	{r7, pc}
 80085bc:	80002000 	.word	0x80002000
 80085c0:	fe00e800 	.word	0xfe00e800

080085c4 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80085c4:	b580      	push	{r7, lr}
 80085c6:	b088      	sub	sp, #32
 80085c8:	af02      	add	r7, sp, #8
 80085ca:	60f8      	str	r0, [r7, #12]
 80085cc:	607a      	str	r2, [r7, #4]
 80085ce:	461a      	mov	r2, r3
 80085d0:	460b      	mov	r3, r1
 80085d2:	817b      	strh	r3, [r7, #10]
 80085d4:	4613      	mov	r3, r2
 80085d6:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80085d8:	68fb      	ldr	r3, [r7, #12]
 80085da:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80085de:	b2db      	uxtb	r3, r3
 80085e0:	2b20      	cmp	r3, #32
 80085e2:	f040 80db 	bne.w	800879c <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80085e6:	68fb      	ldr	r3, [r7, #12]
 80085e8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80085ec:	2b01      	cmp	r3, #1
 80085ee:	d101      	bne.n	80085f4 <HAL_I2C_Master_Receive+0x30>
 80085f0:	2302      	movs	r3, #2
 80085f2:	e0d4      	b.n	800879e <HAL_I2C_Master_Receive+0x1da>
 80085f4:	68fb      	ldr	r3, [r7, #12]
 80085f6:	2201      	movs	r2, #1
 80085f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80085fc:	f7ff faea 	bl	8007bd4 <HAL_GetTick>
 8008600:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8008602:	697b      	ldr	r3, [r7, #20]
 8008604:	9300      	str	r3, [sp, #0]
 8008606:	2319      	movs	r3, #25
 8008608:	2201      	movs	r2, #1
 800860a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800860e:	68f8      	ldr	r0, [r7, #12]
 8008610:	f000 fbc8 	bl	8008da4 <I2C_WaitOnFlagUntilTimeout>
 8008614:	4603      	mov	r3, r0
 8008616:	2b00      	cmp	r3, #0
 8008618:	d001      	beq.n	800861e <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 800861a:	2301      	movs	r3, #1
 800861c:	e0bf      	b.n	800879e <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800861e:	68fb      	ldr	r3, [r7, #12]
 8008620:	2222      	movs	r2, #34	; 0x22
 8008622:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8008626:	68fb      	ldr	r3, [r7, #12]
 8008628:	2210      	movs	r2, #16
 800862a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800862e:	68fb      	ldr	r3, [r7, #12]
 8008630:	2200      	movs	r2, #0
 8008632:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8008634:	68fb      	ldr	r3, [r7, #12]
 8008636:	687a      	ldr	r2, [r7, #4]
 8008638:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800863a:	68fb      	ldr	r3, [r7, #12]
 800863c:	893a      	ldrh	r2, [r7, #8]
 800863e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8008640:	68fb      	ldr	r3, [r7, #12]
 8008642:	2200      	movs	r2, #0
 8008644:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008646:	68fb      	ldr	r3, [r7, #12]
 8008648:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800864a:	b29b      	uxth	r3, r3
 800864c:	2bff      	cmp	r3, #255	; 0xff
 800864e:	d90e      	bls.n	800866e <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8008650:	68fb      	ldr	r3, [r7, #12]
 8008652:	22ff      	movs	r2, #255	; 0xff
 8008654:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8008656:	68fb      	ldr	r3, [r7, #12]
 8008658:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800865a:	b2da      	uxtb	r2, r3
 800865c:	8979      	ldrh	r1, [r7, #10]
 800865e:	4b52      	ldr	r3, [pc, #328]	; (80087a8 <HAL_I2C_Master_Receive+0x1e4>)
 8008660:	9300      	str	r3, [sp, #0]
 8008662:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008666:	68f8      	ldr	r0, [r7, #12]
 8008668:	f000 fd2a 	bl	80090c0 <I2C_TransferConfig>
 800866c:	e06d      	b.n	800874a <HAL_I2C_Master_Receive+0x186>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800866e:	68fb      	ldr	r3, [r7, #12]
 8008670:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008672:	b29a      	uxth	r2, r3
 8008674:	68fb      	ldr	r3, [r7, #12]
 8008676:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8008678:	68fb      	ldr	r3, [r7, #12]
 800867a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800867c:	b2da      	uxtb	r2, r3
 800867e:	8979      	ldrh	r1, [r7, #10]
 8008680:	4b49      	ldr	r3, [pc, #292]	; (80087a8 <HAL_I2C_Master_Receive+0x1e4>)
 8008682:	9300      	str	r3, [sp, #0]
 8008684:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008688:	68f8      	ldr	r0, [r7, #12]
 800868a:	f000 fd19 	bl	80090c0 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 800868e:	e05c      	b.n	800874a <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008690:	697a      	ldr	r2, [r7, #20]
 8008692:	6a39      	ldr	r1, [r7, #32]
 8008694:	68f8      	ldr	r0, [r7, #12]
 8008696:	f000 fc41 	bl	8008f1c <I2C_WaitOnRXNEFlagUntilTimeout>
 800869a:	4603      	mov	r3, r0
 800869c:	2b00      	cmp	r3, #0
 800869e:	d001      	beq.n	80086a4 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 80086a0:	2301      	movs	r3, #1
 80086a2:	e07c      	b.n	800879e <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80086a4:	68fb      	ldr	r3, [r7, #12]
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80086aa:	68fb      	ldr	r3, [r7, #12]
 80086ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086ae:	b2d2      	uxtb	r2, r2
 80086b0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80086b2:	68fb      	ldr	r3, [r7, #12]
 80086b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086b6:	1c5a      	adds	r2, r3, #1
 80086b8:	68fb      	ldr	r3, [r7, #12]
 80086ba:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80086bc:	68fb      	ldr	r3, [r7, #12]
 80086be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80086c0:	3b01      	subs	r3, #1
 80086c2:	b29a      	uxth	r2, r3
 80086c4:	68fb      	ldr	r3, [r7, #12]
 80086c6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80086c8:	68fb      	ldr	r3, [r7, #12]
 80086ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80086cc:	b29b      	uxth	r3, r3
 80086ce:	3b01      	subs	r3, #1
 80086d0:	b29a      	uxth	r2, r3
 80086d2:	68fb      	ldr	r3, [r7, #12]
 80086d4:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80086d6:	68fb      	ldr	r3, [r7, #12]
 80086d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80086da:	b29b      	uxth	r3, r3
 80086dc:	2b00      	cmp	r3, #0
 80086de:	d034      	beq.n	800874a <HAL_I2C_Master_Receive+0x186>
 80086e0:	68fb      	ldr	r3, [r7, #12]
 80086e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80086e4:	2b00      	cmp	r3, #0
 80086e6:	d130      	bne.n	800874a <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80086e8:	697b      	ldr	r3, [r7, #20]
 80086ea:	9300      	str	r3, [sp, #0]
 80086ec:	6a3b      	ldr	r3, [r7, #32]
 80086ee:	2200      	movs	r2, #0
 80086f0:	2180      	movs	r1, #128	; 0x80
 80086f2:	68f8      	ldr	r0, [r7, #12]
 80086f4:	f000 fb56 	bl	8008da4 <I2C_WaitOnFlagUntilTimeout>
 80086f8:	4603      	mov	r3, r0
 80086fa:	2b00      	cmp	r3, #0
 80086fc:	d001      	beq.n	8008702 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 80086fe:	2301      	movs	r3, #1
 8008700:	e04d      	b.n	800879e <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008702:	68fb      	ldr	r3, [r7, #12]
 8008704:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008706:	b29b      	uxth	r3, r3
 8008708:	2bff      	cmp	r3, #255	; 0xff
 800870a:	d90e      	bls.n	800872a <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800870c:	68fb      	ldr	r3, [r7, #12]
 800870e:	22ff      	movs	r2, #255	; 0xff
 8008710:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8008712:	68fb      	ldr	r3, [r7, #12]
 8008714:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008716:	b2da      	uxtb	r2, r3
 8008718:	8979      	ldrh	r1, [r7, #10]
 800871a:	2300      	movs	r3, #0
 800871c:	9300      	str	r3, [sp, #0]
 800871e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008722:	68f8      	ldr	r0, [r7, #12]
 8008724:	f000 fccc 	bl	80090c0 <I2C_TransferConfig>
 8008728:	e00f      	b.n	800874a <HAL_I2C_Master_Receive+0x186>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800872a:	68fb      	ldr	r3, [r7, #12]
 800872c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800872e:	b29a      	uxth	r2, r3
 8008730:	68fb      	ldr	r3, [r7, #12]
 8008732:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8008734:	68fb      	ldr	r3, [r7, #12]
 8008736:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008738:	b2da      	uxtb	r2, r3
 800873a:	8979      	ldrh	r1, [r7, #10]
 800873c:	2300      	movs	r3, #0
 800873e:	9300      	str	r3, [sp, #0]
 8008740:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008744:	68f8      	ldr	r0, [r7, #12]
 8008746:	f000 fcbb 	bl	80090c0 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800874a:	68fb      	ldr	r3, [r7, #12]
 800874c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800874e:	b29b      	uxth	r3, r3
 8008750:	2b00      	cmp	r3, #0
 8008752:	d19d      	bne.n	8008690 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008754:	697a      	ldr	r2, [r7, #20]
 8008756:	6a39      	ldr	r1, [r7, #32]
 8008758:	68f8      	ldr	r0, [r7, #12]
 800875a:	f000 fba3 	bl	8008ea4 <I2C_WaitOnSTOPFlagUntilTimeout>
 800875e:	4603      	mov	r3, r0
 8008760:	2b00      	cmp	r3, #0
 8008762:	d001      	beq.n	8008768 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8008764:	2301      	movs	r3, #1
 8008766:	e01a      	b.n	800879e <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008768:	68fb      	ldr	r3, [r7, #12]
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	2220      	movs	r2, #32
 800876e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8008770:	68fb      	ldr	r3, [r7, #12]
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	6859      	ldr	r1, [r3, #4]
 8008776:	68fb      	ldr	r3, [r7, #12]
 8008778:	681a      	ldr	r2, [r3, #0]
 800877a:	4b0c      	ldr	r3, [pc, #48]	; (80087ac <HAL_I2C_Master_Receive+0x1e8>)
 800877c:	400b      	ands	r3, r1
 800877e:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8008780:	68fb      	ldr	r3, [r7, #12]
 8008782:	2220      	movs	r2, #32
 8008784:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8008788:	68fb      	ldr	r3, [r7, #12]
 800878a:	2200      	movs	r2, #0
 800878c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008790:	68fb      	ldr	r3, [r7, #12]
 8008792:	2200      	movs	r2, #0
 8008794:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8008798:	2300      	movs	r3, #0
 800879a:	e000      	b.n	800879e <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 800879c:	2302      	movs	r3, #2
  }
}
 800879e:	4618      	mov	r0, r3
 80087a0:	3718      	adds	r7, #24
 80087a2:	46bd      	mov	sp, r7
 80087a4:	bd80      	pop	{r7, pc}
 80087a6:	bf00      	nop
 80087a8:	80002400 	.word	0x80002400
 80087ac:	fe00e800 	.word	0xfe00e800

080087b0 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80087b0:	b580      	push	{r7, lr}
 80087b2:	b088      	sub	sp, #32
 80087b4:	af02      	add	r7, sp, #8
 80087b6:	60f8      	str	r0, [r7, #12]
 80087b8:	4608      	mov	r0, r1
 80087ba:	4611      	mov	r1, r2
 80087bc:	461a      	mov	r2, r3
 80087be:	4603      	mov	r3, r0
 80087c0:	817b      	strh	r3, [r7, #10]
 80087c2:	460b      	mov	r3, r1
 80087c4:	813b      	strh	r3, [r7, #8]
 80087c6:	4613      	mov	r3, r2
 80087c8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80087ca:	68fb      	ldr	r3, [r7, #12]
 80087cc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80087d0:	b2db      	uxtb	r3, r3
 80087d2:	2b20      	cmp	r3, #32
 80087d4:	f040 80f9 	bne.w	80089ca <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80087d8:	6a3b      	ldr	r3, [r7, #32]
 80087da:	2b00      	cmp	r3, #0
 80087dc:	d002      	beq.n	80087e4 <HAL_I2C_Mem_Write+0x34>
 80087de:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80087e0:	2b00      	cmp	r3, #0
 80087e2:	d105      	bne.n	80087f0 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80087e4:	68fb      	ldr	r3, [r7, #12]
 80087e6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80087ea:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80087ec:	2301      	movs	r3, #1
 80087ee:	e0ed      	b.n	80089cc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80087f0:	68fb      	ldr	r3, [r7, #12]
 80087f2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80087f6:	2b01      	cmp	r3, #1
 80087f8:	d101      	bne.n	80087fe <HAL_I2C_Mem_Write+0x4e>
 80087fa:	2302      	movs	r3, #2
 80087fc:	e0e6      	b.n	80089cc <HAL_I2C_Mem_Write+0x21c>
 80087fe:	68fb      	ldr	r3, [r7, #12]
 8008800:	2201      	movs	r2, #1
 8008802:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8008806:	f7ff f9e5 	bl	8007bd4 <HAL_GetTick>
 800880a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800880c:	697b      	ldr	r3, [r7, #20]
 800880e:	9300      	str	r3, [sp, #0]
 8008810:	2319      	movs	r3, #25
 8008812:	2201      	movs	r2, #1
 8008814:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8008818:	68f8      	ldr	r0, [r7, #12]
 800881a:	f000 fac3 	bl	8008da4 <I2C_WaitOnFlagUntilTimeout>
 800881e:	4603      	mov	r3, r0
 8008820:	2b00      	cmp	r3, #0
 8008822:	d001      	beq.n	8008828 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8008824:	2301      	movs	r3, #1
 8008826:	e0d1      	b.n	80089cc <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8008828:	68fb      	ldr	r3, [r7, #12]
 800882a:	2221      	movs	r2, #33	; 0x21
 800882c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8008830:	68fb      	ldr	r3, [r7, #12]
 8008832:	2240      	movs	r2, #64	; 0x40
 8008834:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008838:	68fb      	ldr	r3, [r7, #12]
 800883a:	2200      	movs	r2, #0
 800883c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800883e:	68fb      	ldr	r3, [r7, #12]
 8008840:	6a3a      	ldr	r2, [r7, #32]
 8008842:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8008844:	68fb      	ldr	r3, [r7, #12]
 8008846:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8008848:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800884a:	68fb      	ldr	r3, [r7, #12]
 800884c:	2200      	movs	r2, #0
 800884e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8008850:	88f8      	ldrh	r0, [r7, #6]
 8008852:	893a      	ldrh	r2, [r7, #8]
 8008854:	8979      	ldrh	r1, [r7, #10]
 8008856:	697b      	ldr	r3, [r7, #20]
 8008858:	9301      	str	r3, [sp, #4]
 800885a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800885c:	9300      	str	r3, [sp, #0]
 800885e:	4603      	mov	r3, r0
 8008860:	68f8      	ldr	r0, [r7, #12]
 8008862:	f000 f9d3 	bl	8008c0c <I2C_RequestMemoryWrite>
 8008866:	4603      	mov	r3, r0
 8008868:	2b00      	cmp	r3, #0
 800886a:	d005      	beq.n	8008878 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800886c:	68fb      	ldr	r3, [r7, #12]
 800886e:	2200      	movs	r2, #0
 8008870:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8008874:	2301      	movs	r3, #1
 8008876:	e0a9      	b.n	80089cc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008878:	68fb      	ldr	r3, [r7, #12]
 800887a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800887c:	b29b      	uxth	r3, r3
 800887e:	2bff      	cmp	r3, #255	; 0xff
 8008880:	d90e      	bls.n	80088a0 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8008882:	68fb      	ldr	r3, [r7, #12]
 8008884:	22ff      	movs	r2, #255	; 0xff
 8008886:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8008888:	68fb      	ldr	r3, [r7, #12]
 800888a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800888c:	b2da      	uxtb	r2, r3
 800888e:	8979      	ldrh	r1, [r7, #10]
 8008890:	2300      	movs	r3, #0
 8008892:	9300      	str	r3, [sp, #0]
 8008894:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008898:	68f8      	ldr	r0, [r7, #12]
 800889a:	f000 fc11 	bl	80090c0 <I2C_TransferConfig>
 800889e:	e00f      	b.n	80088c0 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80088a0:	68fb      	ldr	r3, [r7, #12]
 80088a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80088a4:	b29a      	uxth	r2, r3
 80088a6:	68fb      	ldr	r3, [r7, #12]
 80088a8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80088aa:	68fb      	ldr	r3, [r7, #12]
 80088ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80088ae:	b2da      	uxtb	r2, r3
 80088b0:	8979      	ldrh	r1, [r7, #10]
 80088b2:	2300      	movs	r3, #0
 80088b4:	9300      	str	r3, [sp, #0]
 80088b6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80088ba:	68f8      	ldr	r0, [r7, #12]
 80088bc:	f000 fc00 	bl	80090c0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80088c0:	697a      	ldr	r2, [r7, #20]
 80088c2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80088c4:	68f8      	ldr	r0, [r7, #12]
 80088c6:	f000 faad 	bl	8008e24 <I2C_WaitOnTXISFlagUntilTimeout>
 80088ca:	4603      	mov	r3, r0
 80088cc:	2b00      	cmp	r3, #0
 80088ce:	d001      	beq.n	80088d4 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80088d0:	2301      	movs	r3, #1
 80088d2:	e07b      	b.n	80089cc <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80088d4:	68fb      	ldr	r3, [r7, #12]
 80088d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088d8:	781a      	ldrb	r2, [r3, #0]
 80088da:	68fb      	ldr	r3, [r7, #12]
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80088e0:	68fb      	ldr	r3, [r7, #12]
 80088e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088e4:	1c5a      	adds	r2, r3, #1
 80088e6:	68fb      	ldr	r3, [r7, #12]
 80088e8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80088ea:	68fb      	ldr	r3, [r7, #12]
 80088ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80088ee:	b29b      	uxth	r3, r3
 80088f0:	3b01      	subs	r3, #1
 80088f2:	b29a      	uxth	r2, r3
 80088f4:	68fb      	ldr	r3, [r7, #12]
 80088f6:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80088f8:	68fb      	ldr	r3, [r7, #12]
 80088fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80088fc:	3b01      	subs	r3, #1
 80088fe:	b29a      	uxth	r2, r3
 8008900:	68fb      	ldr	r3, [r7, #12]
 8008902:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8008904:	68fb      	ldr	r3, [r7, #12]
 8008906:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008908:	b29b      	uxth	r3, r3
 800890a:	2b00      	cmp	r3, #0
 800890c:	d034      	beq.n	8008978 <HAL_I2C_Mem_Write+0x1c8>
 800890e:	68fb      	ldr	r3, [r7, #12]
 8008910:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008912:	2b00      	cmp	r3, #0
 8008914:	d130      	bne.n	8008978 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8008916:	697b      	ldr	r3, [r7, #20]
 8008918:	9300      	str	r3, [sp, #0]
 800891a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800891c:	2200      	movs	r2, #0
 800891e:	2180      	movs	r1, #128	; 0x80
 8008920:	68f8      	ldr	r0, [r7, #12]
 8008922:	f000 fa3f 	bl	8008da4 <I2C_WaitOnFlagUntilTimeout>
 8008926:	4603      	mov	r3, r0
 8008928:	2b00      	cmp	r3, #0
 800892a:	d001      	beq.n	8008930 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 800892c:	2301      	movs	r3, #1
 800892e:	e04d      	b.n	80089cc <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008930:	68fb      	ldr	r3, [r7, #12]
 8008932:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008934:	b29b      	uxth	r3, r3
 8008936:	2bff      	cmp	r3, #255	; 0xff
 8008938:	d90e      	bls.n	8008958 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800893a:	68fb      	ldr	r3, [r7, #12]
 800893c:	22ff      	movs	r2, #255	; 0xff
 800893e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8008940:	68fb      	ldr	r3, [r7, #12]
 8008942:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008944:	b2da      	uxtb	r2, r3
 8008946:	8979      	ldrh	r1, [r7, #10]
 8008948:	2300      	movs	r3, #0
 800894a:	9300      	str	r3, [sp, #0]
 800894c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008950:	68f8      	ldr	r0, [r7, #12]
 8008952:	f000 fbb5 	bl	80090c0 <I2C_TransferConfig>
 8008956:	e00f      	b.n	8008978 <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8008958:	68fb      	ldr	r3, [r7, #12]
 800895a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800895c:	b29a      	uxth	r2, r3
 800895e:	68fb      	ldr	r3, [r7, #12]
 8008960:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8008962:	68fb      	ldr	r3, [r7, #12]
 8008964:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008966:	b2da      	uxtb	r2, r3
 8008968:	8979      	ldrh	r1, [r7, #10]
 800896a:	2300      	movs	r3, #0
 800896c:	9300      	str	r3, [sp, #0]
 800896e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008972:	68f8      	ldr	r0, [r7, #12]
 8008974:	f000 fba4 	bl	80090c0 <I2C_TransferConfig>
        }
      }

    }
    while (hi2c->XferCount > 0U);
 8008978:	68fb      	ldr	r3, [r7, #12]
 800897a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800897c:	b29b      	uxth	r3, r3
 800897e:	2b00      	cmp	r3, #0
 8008980:	d19e      	bne.n	80088c0 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008982:	697a      	ldr	r2, [r7, #20]
 8008984:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008986:	68f8      	ldr	r0, [r7, #12]
 8008988:	f000 fa8c 	bl	8008ea4 <I2C_WaitOnSTOPFlagUntilTimeout>
 800898c:	4603      	mov	r3, r0
 800898e:	2b00      	cmp	r3, #0
 8008990:	d001      	beq.n	8008996 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8008992:	2301      	movs	r3, #1
 8008994:	e01a      	b.n	80089cc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008996:	68fb      	ldr	r3, [r7, #12]
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	2220      	movs	r2, #32
 800899c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800899e:	68fb      	ldr	r3, [r7, #12]
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	6859      	ldr	r1, [r3, #4]
 80089a4:	68fb      	ldr	r3, [r7, #12]
 80089a6:	681a      	ldr	r2, [r3, #0]
 80089a8:	4b0a      	ldr	r3, [pc, #40]	; (80089d4 <HAL_I2C_Mem_Write+0x224>)
 80089aa:	400b      	ands	r3, r1
 80089ac:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80089ae:	68fb      	ldr	r3, [r7, #12]
 80089b0:	2220      	movs	r2, #32
 80089b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80089b6:	68fb      	ldr	r3, [r7, #12]
 80089b8:	2200      	movs	r2, #0
 80089ba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80089be:	68fb      	ldr	r3, [r7, #12]
 80089c0:	2200      	movs	r2, #0
 80089c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80089c6:	2300      	movs	r3, #0
 80089c8:	e000      	b.n	80089cc <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80089ca:	2302      	movs	r3, #2
  }
}
 80089cc:	4618      	mov	r0, r3
 80089ce:	3718      	adds	r7, #24
 80089d0:	46bd      	mov	sp, r7
 80089d2:	bd80      	pop	{r7, pc}
 80089d4:	fe00e800 	.word	0xfe00e800

080089d8 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80089d8:	b580      	push	{r7, lr}
 80089da:	b088      	sub	sp, #32
 80089dc:	af02      	add	r7, sp, #8
 80089de:	60f8      	str	r0, [r7, #12]
 80089e0:	4608      	mov	r0, r1
 80089e2:	4611      	mov	r1, r2
 80089e4:	461a      	mov	r2, r3
 80089e6:	4603      	mov	r3, r0
 80089e8:	817b      	strh	r3, [r7, #10]
 80089ea:	460b      	mov	r3, r1
 80089ec:	813b      	strh	r3, [r7, #8]
 80089ee:	4613      	mov	r3, r2
 80089f0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80089f2:	68fb      	ldr	r3, [r7, #12]
 80089f4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80089f8:	b2db      	uxtb	r3, r3
 80089fa:	2b20      	cmp	r3, #32
 80089fc:	f040 80fd 	bne.w	8008bfa <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8008a00:	6a3b      	ldr	r3, [r7, #32]
 8008a02:	2b00      	cmp	r3, #0
 8008a04:	d002      	beq.n	8008a0c <HAL_I2C_Mem_Read+0x34>
 8008a06:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008a08:	2b00      	cmp	r3, #0
 8008a0a:	d105      	bne.n	8008a18 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8008a0c:	68fb      	ldr	r3, [r7, #12]
 8008a0e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008a12:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8008a14:	2301      	movs	r3, #1
 8008a16:	e0f1      	b.n	8008bfc <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008a18:	68fb      	ldr	r3, [r7, #12]
 8008a1a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008a1e:	2b01      	cmp	r3, #1
 8008a20:	d101      	bne.n	8008a26 <HAL_I2C_Mem_Read+0x4e>
 8008a22:	2302      	movs	r3, #2
 8008a24:	e0ea      	b.n	8008bfc <HAL_I2C_Mem_Read+0x224>
 8008a26:	68fb      	ldr	r3, [r7, #12]
 8008a28:	2201      	movs	r2, #1
 8008a2a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8008a2e:	f7ff f8d1 	bl	8007bd4 <HAL_GetTick>
 8008a32:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8008a34:	697b      	ldr	r3, [r7, #20]
 8008a36:	9300      	str	r3, [sp, #0]
 8008a38:	2319      	movs	r3, #25
 8008a3a:	2201      	movs	r2, #1
 8008a3c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8008a40:	68f8      	ldr	r0, [r7, #12]
 8008a42:	f000 f9af 	bl	8008da4 <I2C_WaitOnFlagUntilTimeout>
 8008a46:	4603      	mov	r3, r0
 8008a48:	2b00      	cmp	r3, #0
 8008a4a:	d001      	beq.n	8008a50 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8008a4c:	2301      	movs	r3, #1
 8008a4e:	e0d5      	b.n	8008bfc <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8008a50:	68fb      	ldr	r3, [r7, #12]
 8008a52:	2222      	movs	r2, #34	; 0x22
 8008a54:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8008a58:	68fb      	ldr	r3, [r7, #12]
 8008a5a:	2240      	movs	r2, #64	; 0x40
 8008a5c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008a60:	68fb      	ldr	r3, [r7, #12]
 8008a62:	2200      	movs	r2, #0
 8008a64:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8008a66:	68fb      	ldr	r3, [r7, #12]
 8008a68:	6a3a      	ldr	r2, [r7, #32]
 8008a6a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8008a6c:	68fb      	ldr	r3, [r7, #12]
 8008a6e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8008a70:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8008a72:	68fb      	ldr	r3, [r7, #12]
 8008a74:	2200      	movs	r2, #0
 8008a76:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8008a78:	88f8      	ldrh	r0, [r7, #6]
 8008a7a:	893a      	ldrh	r2, [r7, #8]
 8008a7c:	8979      	ldrh	r1, [r7, #10]
 8008a7e:	697b      	ldr	r3, [r7, #20]
 8008a80:	9301      	str	r3, [sp, #4]
 8008a82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a84:	9300      	str	r3, [sp, #0]
 8008a86:	4603      	mov	r3, r0
 8008a88:	68f8      	ldr	r0, [r7, #12]
 8008a8a:	f000 f913 	bl	8008cb4 <I2C_RequestMemoryRead>
 8008a8e:	4603      	mov	r3, r0
 8008a90:	2b00      	cmp	r3, #0
 8008a92:	d005      	beq.n	8008aa0 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008a94:	68fb      	ldr	r3, [r7, #12]
 8008a96:	2200      	movs	r2, #0
 8008a98:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8008a9c:	2301      	movs	r3, #1
 8008a9e:	e0ad      	b.n	8008bfc <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008aa0:	68fb      	ldr	r3, [r7, #12]
 8008aa2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008aa4:	b29b      	uxth	r3, r3
 8008aa6:	2bff      	cmp	r3, #255	; 0xff
 8008aa8:	d90e      	bls.n	8008ac8 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8008aaa:	68fb      	ldr	r3, [r7, #12]
 8008aac:	22ff      	movs	r2, #255	; 0xff
 8008aae:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8008ab0:	68fb      	ldr	r3, [r7, #12]
 8008ab2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008ab4:	b2da      	uxtb	r2, r3
 8008ab6:	8979      	ldrh	r1, [r7, #10]
 8008ab8:	4b52      	ldr	r3, [pc, #328]	; (8008c04 <HAL_I2C_Mem_Read+0x22c>)
 8008aba:	9300      	str	r3, [sp, #0]
 8008abc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008ac0:	68f8      	ldr	r0, [r7, #12]
 8008ac2:	f000 fafd 	bl	80090c0 <I2C_TransferConfig>
 8008ac6:	e00f      	b.n	8008ae8 <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8008ac8:	68fb      	ldr	r3, [r7, #12]
 8008aca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008acc:	b29a      	uxth	r2, r3
 8008ace:	68fb      	ldr	r3, [r7, #12]
 8008ad0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8008ad2:	68fb      	ldr	r3, [r7, #12]
 8008ad4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008ad6:	b2da      	uxtb	r2, r3
 8008ad8:	8979      	ldrh	r1, [r7, #10]
 8008ada:	4b4a      	ldr	r3, [pc, #296]	; (8008c04 <HAL_I2C_Mem_Read+0x22c>)
 8008adc:	9300      	str	r3, [sp, #0]
 8008ade:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008ae2:	68f8      	ldr	r0, [r7, #12]
 8008ae4:	f000 faec 	bl	80090c0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8008ae8:	697b      	ldr	r3, [r7, #20]
 8008aea:	9300      	str	r3, [sp, #0]
 8008aec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008aee:	2200      	movs	r2, #0
 8008af0:	2104      	movs	r1, #4
 8008af2:	68f8      	ldr	r0, [r7, #12]
 8008af4:	f000 f956 	bl	8008da4 <I2C_WaitOnFlagUntilTimeout>
 8008af8:	4603      	mov	r3, r0
 8008afa:	2b00      	cmp	r3, #0
 8008afc:	d001      	beq.n	8008b02 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8008afe:	2301      	movs	r3, #1
 8008b00:	e07c      	b.n	8008bfc <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8008b02:	68fb      	ldr	r3, [r7, #12]
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008b08:	68fb      	ldr	r3, [r7, #12]
 8008b0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b0c:	b2d2      	uxtb	r2, r2
 8008b0e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008b10:	68fb      	ldr	r3, [r7, #12]
 8008b12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b14:	1c5a      	adds	r2, r3, #1
 8008b16:	68fb      	ldr	r3, [r7, #12]
 8008b18:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8008b1a:	68fb      	ldr	r3, [r7, #12]
 8008b1c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008b1e:	3b01      	subs	r3, #1
 8008b20:	b29a      	uxth	r2, r3
 8008b22:	68fb      	ldr	r3, [r7, #12]
 8008b24:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8008b26:	68fb      	ldr	r3, [r7, #12]
 8008b28:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008b2a:	b29b      	uxth	r3, r3
 8008b2c:	3b01      	subs	r3, #1
 8008b2e:	b29a      	uxth	r2, r3
 8008b30:	68fb      	ldr	r3, [r7, #12]
 8008b32:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8008b34:	68fb      	ldr	r3, [r7, #12]
 8008b36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008b38:	b29b      	uxth	r3, r3
 8008b3a:	2b00      	cmp	r3, #0
 8008b3c:	d034      	beq.n	8008ba8 <HAL_I2C_Mem_Read+0x1d0>
 8008b3e:	68fb      	ldr	r3, [r7, #12]
 8008b40:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008b42:	2b00      	cmp	r3, #0
 8008b44:	d130      	bne.n	8008ba8 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8008b46:	697b      	ldr	r3, [r7, #20]
 8008b48:	9300      	str	r3, [sp, #0]
 8008b4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b4c:	2200      	movs	r2, #0
 8008b4e:	2180      	movs	r1, #128	; 0x80
 8008b50:	68f8      	ldr	r0, [r7, #12]
 8008b52:	f000 f927 	bl	8008da4 <I2C_WaitOnFlagUntilTimeout>
 8008b56:	4603      	mov	r3, r0
 8008b58:	2b00      	cmp	r3, #0
 8008b5a:	d001      	beq.n	8008b60 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8008b5c:	2301      	movs	r3, #1
 8008b5e:	e04d      	b.n	8008bfc <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008b60:	68fb      	ldr	r3, [r7, #12]
 8008b62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008b64:	b29b      	uxth	r3, r3
 8008b66:	2bff      	cmp	r3, #255	; 0xff
 8008b68:	d90e      	bls.n	8008b88 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8008b6a:	68fb      	ldr	r3, [r7, #12]
 8008b6c:	22ff      	movs	r2, #255	; 0xff
 8008b6e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8008b70:	68fb      	ldr	r3, [r7, #12]
 8008b72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008b74:	b2da      	uxtb	r2, r3
 8008b76:	8979      	ldrh	r1, [r7, #10]
 8008b78:	2300      	movs	r3, #0
 8008b7a:	9300      	str	r3, [sp, #0]
 8008b7c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008b80:	68f8      	ldr	r0, [r7, #12]
 8008b82:	f000 fa9d 	bl	80090c0 <I2C_TransferConfig>
 8008b86:	e00f      	b.n	8008ba8 <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8008b88:	68fb      	ldr	r3, [r7, #12]
 8008b8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008b8c:	b29a      	uxth	r2, r3
 8008b8e:	68fb      	ldr	r3, [r7, #12]
 8008b90:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8008b92:	68fb      	ldr	r3, [r7, #12]
 8008b94:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008b96:	b2da      	uxtb	r2, r3
 8008b98:	8979      	ldrh	r1, [r7, #10]
 8008b9a:	2300      	movs	r3, #0
 8008b9c:	9300      	str	r3, [sp, #0]
 8008b9e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008ba2:	68f8      	ldr	r0, [r7, #12]
 8008ba4:	f000 fa8c 	bl	80090c0 <I2C_TransferConfig>
        }
      }
    }
    while (hi2c->XferCount > 0U);
 8008ba8:	68fb      	ldr	r3, [r7, #12]
 8008baa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008bac:	b29b      	uxth	r3, r3
 8008bae:	2b00      	cmp	r3, #0
 8008bb0:	d19a      	bne.n	8008ae8 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008bb2:	697a      	ldr	r2, [r7, #20]
 8008bb4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008bb6:	68f8      	ldr	r0, [r7, #12]
 8008bb8:	f000 f974 	bl	8008ea4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8008bbc:	4603      	mov	r3, r0
 8008bbe:	2b00      	cmp	r3, #0
 8008bc0:	d001      	beq.n	8008bc6 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8008bc2:	2301      	movs	r3, #1
 8008bc4:	e01a      	b.n	8008bfc <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008bc6:	68fb      	ldr	r3, [r7, #12]
 8008bc8:	681b      	ldr	r3, [r3, #0]
 8008bca:	2220      	movs	r2, #32
 8008bcc:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8008bce:	68fb      	ldr	r3, [r7, #12]
 8008bd0:	681b      	ldr	r3, [r3, #0]
 8008bd2:	6859      	ldr	r1, [r3, #4]
 8008bd4:	68fb      	ldr	r3, [r7, #12]
 8008bd6:	681a      	ldr	r2, [r3, #0]
 8008bd8:	4b0b      	ldr	r3, [pc, #44]	; (8008c08 <HAL_I2C_Mem_Read+0x230>)
 8008bda:	400b      	ands	r3, r1
 8008bdc:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8008bde:	68fb      	ldr	r3, [r7, #12]
 8008be0:	2220      	movs	r2, #32
 8008be2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8008be6:	68fb      	ldr	r3, [r7, #12]
 8008be8:	2200      	movs	r2, #0
 8008bea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008bee:	68fb      	ldr	r3, [r7, #12]
 8008bf0:	2200      	movs	r2, #0
 8008bf2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8008bf6:	2300      	movs	r3, #0
 8008bf8:	e000      	b.n	8008bfc <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8008bfa:	2302      	movs	r3, #2
  }
}
 8008bfc:	4618      	mov	r0, r3
 8008bfe:	3718      	adds	r7, #24
 8008c00:	46bd      	mov	sp, r7
 8008c02:	bd80      	pop	{r7, pc}
 8008c04:	80002400 	.word	0x80002400
 8008c08:	fe00e800 	.word	0xfe00e800

08008c0c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8008c0c:	b580      	push	{r7, lr}
 8008c0e:	b086      	sub	sp, #24
 8008c10:	af02      	add	r7, sp, #8
 8008c12:	60f8      	str	r0, [r7, #12]
 8008c14:	4608      	mov	r0, r1
 8008c16:	4611      	mov	r1, r2
 8008c18:	461a      	mov	r2, r3
 8008c1a:	4603      	mov	r3, r0
 8008c1c:	817b      	strh	r3, [r7, #10]
 8008c1e:	460b      	mov	r3, r1
 8008c20:	813b      	strh	r3, [r7, #8]
 8008c22:	4613      	mov	r3, r2
 8008c24:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8008c26:	88fb      	ldrh	r3, [r7, #6]
 8008c28:	b2da      	uxtb	r2, r3
 8008c2a:	8979      	ldrh	r1, [r7, #10]
 8008c2c:	4b20      	ldr	r3, [pc, #128]	; (8008cb0 <I2C_RequestMemoryWrite+0xa4>)
 8008c2e:	9300      	str	r3, [sp, #0]
 8008c30:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008c34:	68f8      	ldr	r0, [r7, #12]
 8008c36:	f000 fa43 	bl	80090c0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008c3a:	69fa      	ldr	r2, [r7, #28]
 8008c3c:	69b9      	ldr	r1, [r7, #24]
 8008c3e:	68f8      	ldr	r0, [r7, #12]
 8008c40:	f000 f8f0 	bl	8008e24 <I2C_WaitOnTXISFlagUntilTimeout>
 8008c44:	4603      	mov	r3, r0
 8008c46:	2b00      	cmp	r3, #0
 8008c48:	d001      	beq.n	8008c4e <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8008c4a:	2301      	movs	r3, #1
 8008c4c:	e02c      	b.n	8008ca8 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8008c4e:	88fb      	ldrh	r3, [r7, #6]
 8008c50:	2b01      	cmp	r3, #1
 8008c52:	d105      	bne.n	8008c60 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8008c54:	893b      	ldrh	r3, [r7, #8]
 8008c56:	b2da      	uxtb	r2, r3
 8008c58:	68fb      	ldr	r3, [r7, #12]
 8008c5a:	681b      	ldr	r3, [r3, #0]
 8008c5c:	629a      	str	r2, [r3, #40]	; 0x28
 8008c5e:	e015      	b.n	8008c8c <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8008c60:	893b      	ldrh	r3, [r7, #8]
 8008c62:	0a1b      	lsrs	r3, r3, #8
 8008c64:	b29b      	uxth	r3, r3
 8008c66:	b2da      	uxtb	r2, r3
 8008c68:	68fb      	ldr	r3, [r7, #12]
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008c6e:	69fa      	ldr	r2, [r7, #28]
 8008c70:	69b9      	ldr	r1, [r7, #24]
 8008c72:	68f8      	ldr	r0, [r7, #12]
 8008c74:	f000 f8d6 	bl	8008e24 <I2C_WaitOnTXISFlagUntilTimeout>
 8008c78:	4603      	mov	r3, r0
 8008c7a:	2b00      	cmp	r3, #0
 8008c7c:	d001      	beq.n	8008c82 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8008c7e:	2301      	movs	r3, #1
 8008c80:	e012      	b.n	8008ca8 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8008c82:	893b      	ldrh	r3, [r7, #8]
 8008c84:	b2da      	uxtb	r2, r3
 8008c86:	68fb      	ldr	r3, [r7, #12]
 8008c88:	681b      	ldr	r3, [r3, #0]
 8008c8a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8008c8c:	69fb      	ldr	r3, [r7, #28]
 8008c8e:	9300      	str	r3, [sp, #0]
 8008c90:	69bb      	ldr	r3, [r7, #24]
 8008c92:	2200      	movs	r2, #0
 8008c94:	2180      	movs	r1, #128	; 0x80
 8008c96:	68f8      	ldr	r0, [r7, #12]
 8008c98:	f000 f884 	bl	8008da4 <I2C_WaitOnFlagUntilTimeout>
 8008c9c:	4603      	mov	r3, r0
 8008c9e:	2b00      	cmp	r3, #0
 8008ca0:	d001      	beq.n	8008ca6 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8008ca2:	2301      	movs	r3, #1
 8008ca4:	e000      	b.n	8008ca8 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8008ca6:	2300      	movs	r3, #0
}
 8008ca8:	4618      	mov	r0, r3
 8008caa:	3710      	adds	r7, #16
 8008cac:	46bd      	mov	sp, r7
 8008cae:	bd80      	pop	{r7, pc}
 8008cb0:	80002000 	.word	0x80002000

08008cb4 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8008cb4:	b580      	push	{r7, lr}
 8008cb6:	b086      	sub	sp, #24
 8008cb8:	af02      	add	r7, sp, #8
 8008cba:	60f8      	str	r0, [r7, #12]
 8008cbc:	4608      	mov	r0, r1
 8008cbe:	4611      	mov	r1, r2
 8008cc0:	461a      	mov	r2, r3
 8008cc2:	4603      	mov	r3, r0
 8008cc4:	817b      	strh	r3, [r7, #10]
 8008cc6:	460b      	mov	r3, r1
 8008cc8:	813b      	strh	r3, [r7, #8]
 8008cca:	4613      	mov	r3, r2
 8008ccc:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8008cce:	88fb      	ldrh	r3, [r7, #6]
 8008cd0:	b2da      	uxtb	r2, r3
 8008cd2:	8979      	ldrh	r1, [r7, #10]
 8008cd4:	4b20      	ldr	r3, [pc, #128]	; (8008d58 <I2C_RequestMemoryRead+0xa4>)
 8008cd6:	9300      	str	r3, [sp, #0]
 8008cd8:	2300      	movs	r3, #0
 8008cda:	68f8      	ldr	r0, [r7, #12]
 8008cdc:	f000 f9f0 	bl	80090c0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008ce0:	69fa      	ldr	r2, [r7, #28]
 8008ce2:	69b9      	ldr	r1, [r7, #24]
 8008ce4:	68f8      	ldr	r0, [r7, #12]
 8008ce6:	f000 f89d 	bl	8008e24 <I2C_WaitOnTXISFlagUntilTimeout>
 8008cea:	4603      	mov	r3, r0
 8008cec:	2b00      	cmp	r3, #0
 8008cee:	d001      	beq.n	8008cf4 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8008cf0:	2301      	movs	r3, #1
 8008cf2:	e02c      	b.n	8008d4e <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8008cf4:	88fb      	ldrh	r3, [r7, #6]
 8008cf6:	2b01      	cmp	r3, #1
 8008cf8:	d105      	bne.n	8008d06 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8008cfa:	893b      	ldrh	r3, [r7, #8]
 8008cfc:	b2da      	uxtb	r2, r3
 8008cfe:	68fb      	ldr	r3, [r7, #12]
 8008d00:	681b      	ldr	r3, [r3, #0]
 8008d02:	629a      	str	r2, [r3, #40]	; 0x28
 8008d04:	e015      	b.n	8008d32 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8008d06:	893b      	ldrh	r3, [r7, #8]
 8008d08:	0a1b      	lsrs	r3, r3, #8
 8008d0a:	b29b      	uxth	r3, r3
 8008d0c:	b2da      	uxtb	r2, r3
 8008d0e:	68fb      	ldr	r3, [r7, #12]
 8008d10:	681b      	ldr	r3, [r3, #0]
 8008d12:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008d14:	69fa      	ldr	r2, [r7, #28]
 8008d16:	69b9      	ldr	r1, [r7, #24]
 8008d18:	68f8      	ldr	r0, [r7, #12]
 8008d1a:	f000 f883 	bl	8008e24 <I2C_WaitOnTXISFlagUntilTimeout>
 8008d1e:	4603      	mov	r3, r0
 8008d20:	2b00      	cmp	r3, #0
 8008d22:	d001      	beq.n	8008d28 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8008d24:	2301      	movs	r3, #1
 8008d26:	e012      	b.n	8008d4e <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8008d28:	893b      	ldrh	r3, [r7, #8]
 8008d2a:	b2da      	uxtb	r2, r3
 8008d2c:	68fb      	ldr	r3, [r7, #12]
 8008d2e:	681b      	ldr	r3, [r3, #0]
 8008d30:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8008d32:	69fb      	ldr	r3, [r7, #28]
 8008d34:	9300      	str	r3, [sp, #0]
 8008d36:	69bb      	ldr	r3, [r7, #24]
 8008d38:	2200      	movs	r2, #0
 8008d3a:	2140      	movs	r1, #64	; 0x40
 8008d3c:	68f8      	ldr	r0, [r7, #12]
 8008d3e:	f000 f831 	bl	8008da4 <I2C_WaitOnFlagUntilTimeout>
 8008d42:	4603      	mov	r3, r0
 8008d44:	2b00      	cmp	r3, #0
 8008d46:	d001      	beq.n	8008d4c <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8008d48:	2301      	movs	r3, #1
 8008d4a:	e000      	b.n	8008d4e <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8008d4c:	2300      	movs	r3, #0
}
 8008d4e:	4618      	mov	r0, r3
 8008d50:	3710      	adds	r7, #16
 8008d52:	46bd      	mov	sp, r7
 8008d54:	bd80      	pop	{r7, pc}
 8008d56:	bf00      	nop
 8008d58:	80002000 	.word	0x80002000

08008d5c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8008d5c:	b480      	push	{r7}
 8008d5e:	b083      	sub	sp, #12
 8008d60:	af00      	add	r7, sp, #0
 8008d62:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	699b      	ldr	r3, [r3, #24]
 8008d6a:	f003 0302 	and.w	r3, r3, #2
 8008d6e:	2b02      	cmp	r3, #2
 8008d70:	d103      	bne.n	8008d7a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	681b      	ldr	r3, [r3, #0]
 8008d76:	2200      	movs	r2, #0
 8008d78:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	681b      	ldr	r3, [r3, #0]
 8008d7e:	699b      	ldr	r3, [r3, #24]
 8008d80:	f003 0301 	and.w	r3, r3, #1
 8008d84:	2b01      	cmp	r3, #1
 8008d86:	d007      	beq.n	8008d98 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	681b      	ldr	r3, [r3, #0]
 8008d8c:	699a      	ldr	r2, [r3, #24]
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	681b      	ldr	r3, [r3, #0]
 8008d92:	f042 0201 	orr.w	r2, r2, #1
 8008d96:	619a      	str	r2, [r3, #24]
  }
}
 8008d98:	bf00      	nop
 8008d9a:	370c      	adds	r7, #12
 8008d9c:	46bd      	mov	sp, r7
 8008d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008da2:	4770      	bx	lr

08008da4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8008da4:	b580      	push	{r7, lr}
 8008da6:	b084      	sub	sp, #16
 8008da8:	af00      	add	r7, sp, #0
 8008daa:	60f8      	str	r0, [r7, #12]
 8008dac:	60b9      	str	r1, [r7, #8]
 8008dae:	603b      	str	r3, [r7, #0]
 8008db0:	4613      	mov	r3, r2
 8008db2:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008db4:	e022      	b.n	8008dfc <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008db6:	683b      	ldr	r3, [r7, #0]
 8008db8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008dbc:	d01e      	beq.n	8008dfc <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008dbe:	f7fe ff09 	bl	8007bd4 <HAL_GetTick>
 8008dc2:	4602      	mov	r2, r0
 8008dc4:	69bb      	ldr	r3, [r7, #24]
 8008dc6:	1ad3      	subs	r3, r2, r3
 8008dc8:	683a      	ldr	r2, [r7, #0]
 8008dca:	429a      	cmp	r2, r3
 8008dcc:	d302      	bcc.n	8008dd4 <I2C_WaitOnFlagUntilTimeout+0x30>
 8008dce:	683b      	ldr	r3, [r7, #0]
 8008dd0:	2b00      	cmp	r3, #0
 8008dd2:	d113      	bne.n	8008dfc <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008dd4:	68fb      	ldr	r3, [r7, #12]
 8008dd6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008dd8:	f043 0220 	orr.w	r2, r3, #32
 8008ddc:	68fb      	ldr	r3, [r7, #12]
 8008dde:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8008de0:	68fb      	ldr	r3, [r7, #12]
 8008de2:	2220      	movs	r2, #32
 8008de4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8008de8:	68fb      	ldr	r3, [r7, #12]
 8008dea:	2200      	movs	r2, #0
 8008dec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008df0:	68fb      	ldr	r3, [r7, #12]
 8008df2:	2200      	movs	r2, #0
 8008df4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8008df8:	2301      	movs	r3, #1
 8008dfa:	e00f      	b.n	8008e1c <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008dfc:	68fb      	ldr	r3, [r7, #12]
 8008dfe:	681b      	ldr	r3, [r3, #0]
 8008e00:	699a      	ldr	r2, [r3, #24]
 8008e02:	68bb      	ldr	r3, [r7, #8]
 8008e04:	4013      	ands	r3, r2
 8008e06:	68ba      	ldr	r2, [r7, #8]
 8008e08:	429a      	cmp	r2, r3
 8008e0a:	bf0c      	ite	eq
 8008e0c:	2301      	moveq	r3, #1
 8008e0e:	2300      	movne	r3, #0
 8008e10:	b2db      	uxtb	r3, r3
 8008e12:	461a      	mov	r2, r3
 8008e14:	79fb      	ldrb	r3, [r7, #7]
 8008e16:	429a      	cmp	r2, r3
 8008e18:	d0cd      	beq.n	8008db6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8008e1a:	2300      	movs	r3, #0
}
 8008e1c:	4618      	mov	r0, r3
 8008e1e:	3710      	adds	r7, #16
 8008e20:	46bd      	mov	sp, r7
 8008e22:	bd80      	pop	{r7, pc}

08008e24 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008e24:	b580      	push	{r7, lr}
 8008e26:	b084      	sub	sp, #16
 8008e28:	af00      	add	r7, sp, #0
 8008e2a:	60f8      	str	r0, [r7, #12]
 8008e2c:	60b9      	str	r1, [r7, #8]
 8008e2e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8008e30:	e02c      	b.n	8008e8c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8008e32:	687a      	ldr	r2, [r7, #4]
 8008e34:	68b9      	ldr	r1, [r7, #8]
 8008e36:	68f8      	ldr	r0, [r7, #12]
 8008e38:	f000 f8dc 	bl	8008ff4 <I2C_IsAcknowledgeFailed>
 8008e3c:	4603      	mov	r3, r0
 8008e3e:	2b00      	cmp	r3, #0
 8008e40:	d001      	beq.n	8008e46 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8008e42:	2301      	movs	r3, #1
 8008e44:	e02a      	b.n	8008e9c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008e46:	68bb      	ldr	r3, [r7, #8]
 8008e48:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008e4c:	d01e      	beq.n	8008e8c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008e4e:	f7fe fec1 	bl	8007bd4 <HAL_GetTick>
 8008e52:	4602      	mov	r2, r0
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	1ad3      	subs	r3, r2, r3
 8008e58:	68ba      	ldr	r2, [r7, #8]
 8008e5a:	429a      	cmp	r2, r3
 8008e5c:	d302      	bcc.n	8008e64 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8008e5e:	68bb      	ldr	r3, [r7, #8]
 8008e60:	2b00      	cmp	r3, #0
 8008e62:	d113      	bne.n	8008e8c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008e64:	68fb      	ldr	r3, [r7, #12]
 8008e66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008e68:	f043 0220 	orr.w	r2, r3, #32
 8008e6c:	68fb      	ldr	r3, [r7, #12]
 8008e6e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8008e70:	68fb      	ldr	r3, [r7, #12]
 8008e72:	2220      	movs	r2, #32
 8008e74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8008e78:	68fb      	ldr	r3, [r7, #12]
 8008e7a:	2200      	movs	r2, #0
 8008e7c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008e80:	68fb      	ldr	r3, [r7, #12]
 8008e82:	2200      	movs	r2, #0
 8008e84:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8008e88:	2301      	movs	r3, #1
 8008e8a:	e007      	b.n	8008e9c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8008e8c:	68fb      	ldr	r3, [r7, #12]
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	699b      	ldr	r3, [r3, #24]
 8008e92:	f003 0302 	and.w	r3, r3, #2
 8008e96:	2b02      	cmp	r3, #2
 8008e98:	d1cb      	bne.n	8008e32 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8008e9a:	2300      	movs	r3, #0
}
 8008e9c:	4618      	mov	r0, r3
 8008e9e:	3710      	adds	r7, #16
 8008ea0:	46bd      	mov	sp, r7
 8008ea2:	bd80      	pop	{r7, pc}

08008ea4 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008ea4:	b580      	push	{r7, lr}
 8008ea6:	b084      	sub	sp, #16
 8008ea8:	af00      	add	r7, sp, #0
 8008eaa:	60f8      	str	r0, [r7, #12]
 8008eac:	60b9      	str	r1, [r7, #8]
 8008eae:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008eb0:	e028      	b.n	8008f04 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8008eb2:	687a      	ldr	r2, [r7, #4]
 8008eb4:	68b9      	ldr	r1, [r7, #8]
 8008eb6:	68f8      	ldr	r0, [r7, #12]
 8008eb8:	f000 f89c 	bl	8008ff4 <I2C_IsAcknowledgeFailed>
 8008ebc:	4603      	mov	r3, r0
 8008ebe:	2b00      	cmp	r3, #0
 8008ec0:	d001      	beq.n	8008ec6 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8008ec2:	2301      	movs	r3, #1
 8008ec4:	e026      	b.n	8008f14 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008ec6:	f7fe fe85 	bl	8007bd4 <HAL_GetTick>
 8008eca:	4602      	mov	r2, r0
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	1ad3      	subs	r3, r2, r3
 8008ed0:	68ba      	ldr	r2, [r7, #8]
 8008ed2:	429a      	cmp	r2, r3
 8008ed4:	d302      	bcc.n	8008edc <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8008ed6:	68bb      	ldr	r3, [r7, #8]
 8008ed8:	2b00      	cmp	r3, #0
 8008eda:	d113      	bne.n	8008f04 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008edc:	68fb      	ldr	r3, [r7, #12]
 8008ede:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008ee0:	f043 0220 	orr.w	r2, r3, #32
 8008ee4:	68fb      	ldr	r3, [r7, #12]
 8008ee6:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8008ee8:	68fb      	ldr	r3, [r7, #12]
 8008eea:	2220      	movs	r2, #32
 8008eec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8008ef0:	68fb      	ldr	r3, [r7, #12]
 8008ef2:	2200      	movs	r2, #0
 8008ef4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008ef8:	68fb      	ldr	r3, [r7, #12]
 8008efa:	2200      	movs	r2, #0
 8008efc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8008f00:	2301      	movs	r3, #1
 8008f02:	e007      	b.n	8008f14 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008f04:	68fb      	ldr	r3, [r7, #12]
 8008f06:	681b      	ldr	r3, [r3, #0]
 8008f08:	699b      	ldr	r3, [r3, #24]
 8008f0a:	f003 0320 	and.w	r3, r3, #32
 8008f0e:	2b20      	cmp	r3, #32
 8008f10:	d1cf      	bne.n	8008eb2 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8008f12:	2300      	movs	r3, #0
}
 8008f14:	4618      	mov	r0, r3
 8008f16:	3710      	adds	r7, #16
 8008f18:	46bd      	mov	sp, r7
 8008f1a:	bd80      	pop	{r7, pc}

08008f1c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008f1c:	b580      	push	{r7, lr}
 8008f1e:	b084      	sub	sp, #16
 8008f20:	af00      	add	r7, sp, #0
 8008f22:	60f8      	str	r0, [r7, #12]
 8008f24:	60b9      	str	r1, [r7, #8]
 8008f26:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8008f28:	e055      	b.n	8008fd6 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8008f2a:	687a      	ldr	r2, [r7, #4]
 8008f2c:	68b9      	ldr	r1, [r7, #8]
 8008f2e:	68f8      	ldr	r0, [r7, #12]
 8008f30:	f000 f860 	bl	8008ff4 <I2C_IsAcknowledgeFailed>
 8008f34:	4603      	mov	r3, r0
 8008f36:	2b00      	cmp	r3, #0
 8008f38:	d001      	beq.n	8008f3e <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8008f3a:	2301      	movs	r3, #1
 8008f3c:	e053      	b.n	8008fe6 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8008f3e:	68fb      	ldr	r3, [r7, #12]
 8008f40:	681b      	ldr	r3, [r3, #0]
 8008f42:	699b      	ldr	r3, [r3, #24]
 8008f44:	f003 0320 	and.w	r3, r3, #32
 8008f48:	2b20      	cmp	r3, #32
 8008f4a:	d129      	bne.n	8008fa0 <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8008f4c:	68fb      	ldr	r3, [r7, #12]
 8008f4e:	681b      	ldr	r3, [r3, #0]
 8008f50:	699b      	ldr	r3, [r3, #24]
 8008f52:	f003 0304 	and.w	r3, r3, #4
 8008f56:	2b04      	cmp	r3, #4
 8008f58:	d105      	bne.n	8008f66 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8008f5a:	68fb      	ldr	r3, [r7, #12]
 8008f5c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008f5e:	2b00      	cmp	r3, #0
 8008f60:	d001      	beq.n	8008f66 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8008f62:	2300      	movs	r3, #0
 8008f64:	e03f      	b.n	8008fe6 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008f66:	68fb      	ldr	r3, [r7, #12]
 8008f68:	681b      	ldr	r3, [r3, #0]
 8008f6a:	2220      	movs	r2, #32
 8008f6c:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8008f6e:	68fb      	ldr	r3, [r7, #12]
 8008f70:	681b      	ldr	r3, [r3, #0]
 8008f72:	6859      	ldr	r1, [r3, #4]
 8008f74:	68fb      	ldr	r3, [r7, #12]
 8008f76:	681a      	ldr	r2, [r3, #0]
 8008f78:	4b1d      	ldr	r3, [pc, #116]	; (8008ff0 <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 8008f7a:	400b      	ands	r3, r1
 8008f7c:	6053      	str	r3, [r2, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008f7e:	68fb      	ldr	r3, [r7, #12]
 8008f80:	2200      	movs	r2, #0
 8008f82:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8008f84:	68fb      	ldr	r3, [r7, #12]
 8008f86:	2220      	movs	r2, #32
 8008f88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8008f8c:	68fb      	ldr	r3, [r7, #12]
 8008f8e:	2200      	movs	r2, #0
 8008f90:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008f94:	68fb      	ldr	r3, [r7, #12]
 8008f96:	2200      	movs	r2, #0
 8008f98:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8008f9c:	2301      	movs	r3, #1
 8008f9e:	e022      	b.n	8008fe6 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008fa0:	f7fe fe18 	bl	8007bd4 <HAL_GetTick>
 8008fa4:	4602      	mov	r2, r0
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	1ad3      	subs	r3, r2, r3
 8008faa:	68ba      	ldr	r2, [r7, #8]
 8008fac:	429a      	cmp	r2, r3
 8008fae:	d302      	bcc.n	8008fb6 <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 8008fb0:	68bb      	ldr	r3, [r7, #8]
 8008fb2:	2b00      	cmp	r3, #0
 8008fb4:	d10f      	bne.n	8008fd6 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008fb6:	68fb      	ldr	r3, [r7, #12]
 8008fb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008fba:	f043 0220 	orr.w	r2, r3, #32
 8008fbe:	68fb      	ldr	r3, [r7, #12]
 8008fc0:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8008fc2:	68fb      	ldr	r3, [r7, #12]
 8008fc4:	2220      	movs	r2, #32
 8008fc6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008fca:	68fb      	ldr	r3, [r7, #12]
 8008fcc:	2200      	movs	r2, #0
 8008fce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8008fd2:	2301      	movs	r3, #1
 8008fd4:	e007      	b.n	8008fe6 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8008fd6:	68fb      	ldr	r3, [r7, #12]
 8008fd8:	681b      	ldr	r3, [r3, #0]
 8008fda:	699b      	ldr	r3, [r3, #24]
 8008fdc:	f003 0304 	and.w	r3, r3, #4
 8008fe0:	2b04      	cmp	r3, #4
 8008fe2:	d1a2      	bne.n	8008f2a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8008fe4:	2300      	movs	r3, #0
}
 8008fe6:	4618      	mov	r0, r3
 8008fe8:	3710      	adds	r7, #16
 8008fea:	46bd      	mov	sp, r7
 8008fec:	bd80      	pop	{r7, pc}
 8008fee:	bf00      	nop
 8008ff0:	fe00e800 	.word	0xfe00e800

08008ff4 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008ff4:	b580      	push	{r7, lr}
 8008ff6:	b084      	sub	sp, #16
 8008ff8:	af00      	add	r7, sp, #0
 8008ffa:	60f8      	str	r0, [r7, #12]
 8008ffc:	60b9      	str	r1, [r7, #8]
 8008ffe:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8009000:	68fb      	ldr	r3, [r7, #12]
 8009002:	681b      	ldr	r3, [r3, #0]
 8009004:	699b      	ldr	r3, [r3, #24]
 8009006:	f003 0310 	and.w	r3, r3, #16
 800900a:	2b10      	cmp	r3, #16
 800900c:	d151      	bne.n	80090b2 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800900e:	e022      	b.n	8009056 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8009010:	68bb      	ldr	r3, [r7, #8]
 8009012:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009016:	d01e      	beq.n	8009056 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009018:	f7fe fddc 	bl	8007bd4 <HAL_GetTick>
 800901c:	4602      	mov	r2, r0
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	1ad3      	subs	r3, r2, r3
 8009022:	68ba      	ldr	r2, [r7, #8]
 8009024:	429a      	cmp	r2, r3
 8009026:	d302      	bcc.n	800902e <I2C_IsAcknowledgeFailed+0x3a>
 8009028:	68bb      	ldr	r3, [r7, #8]
 800902a:	2b00      	cmp	r3, #0
 800902c:	d113      	bne.n	8009056 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800902e:	68fb      	ldr	r3, [r7, #12]
 8009030:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009032:	f043 0220 	orr.w	r2, r3, #32
 8009036:	68fb      	ldr	r3, [r7, #12]
 8009038:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800903a:	68fb      	ldr	r3, [r7, #12]
 800903c:	2220      	movs	r2, #32
 800903e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8009042:	68fb      	ldr	r3, [r7, #12]
 8009044:	2200      	movs	r2, #0
 8009046:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800904a:	68fb      	ldr	r3, [r7, #12]
 800904c:	2200      	movs	r2, #0
 800904e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8009052:	2301      	movs	r3, #1
 8009054:	e02e      	b.n	80090b4 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009056:	68fb      	ldr	r3, [r7, #12]
 8009058:	681b      	ldr	r3, [r3, #0]
 800905a:	699b      	ldr	r3, [r3, #24]
 800905c:	f003 0320 	and.w	r3, r3, #32
 8009060:	2b20      	cmp	r3, #32
 8009062:	d1d5      	bne.n	8009010 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009064:	68fb      	ldr	r3, [r7, #12]
 8009066:	681b      	ldr	r3, [r3, #0]
 8009068:	2210      	movs	r2, #16
 800906a:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800906c:	68fb      	ldr	r3, [r7, #12]
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	2220      	movs	r2, #32
 8009072:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8009074:	68f8      	ldr	r0, [r7, #12]
 8009076:	f7ff fe71 	bl	8008d5c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800907a:	68fb      	ldr	r3, [r7, #12]
 800907c:	681b      	ldr	r3, [r3, #0]
 800907e:	6859      	ldr	r1, [r3, #4]
 8009080:	68fb      	ldr	r3, [r7, #12]
 8009082:	681a      	ldr	r2, [r3, #0]
 8009084:	4b0d      	ldr	r3, [pc, #52]	; (80090bc <I2C_IsAcknowledgeFailed+0xc8>)
 8009086:	400b      	ands	r3, r1
 8009088:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800908a:	68fb      	ldr	r3, [r7, #12]
 800908c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800908e:	f043 0204 	orr.w	r2, r3, #4
 8009092:	68fb      	ldr	r3, [r7, #12]
 8009094:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8009096:	68fb      	ldr	r3, [r7, #12]
 8009098:	2220      	movs	r2, #32
 800909a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800909e:	68fb      	ldr	r3, [r7, #12]
 80090a0:	2200      	movs	r2, #0
 80090a2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80090a6:	68fb      	ldr	r3, [r7, #12]
 80090a8:	2200      	movs	r2, #0
 80090aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 80090ae:	2301      	movs	r3, #1
 80090b0:	e000      	b.n	80090b4 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 80090b2:	2300      	movs	r3, #0
}
 80090b4:	4618      	mov	r0, r3
 80090b6:	3710      	adds	r7, #16
 80090b8:	46bd      	mov	sp, r7
 80090ba:	bd80      	pop	{r7, pc}
 80090bc:	fe00e800 	.word	0xfe00e800

080090c0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 80090c0:	b480      	push	{r7}
 80090c2:	b085      	sub	sp, #20
 80090c4:	af00      	add	r7, sp, #0
 80090c6:	60f8      	str	r0, [r7, #12]
 80090c8:	607b      	str	r3, [r7, #4]
 80090ca:	460b      	mov	r3, r1
 80090cc:	817b      	strh	r3, [r7, #10]
 80090ce:	4613      	mov	r3, r2
 80090d0:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 80090d2:	68fb      	ldr	r3, [r7, #12]
 80090d4:	681b      	ldr	r3, [r3, #0]
 80090d6:	685a      	ldr	r2, [r3, #4]
 80090d8:	69bb      	ldr	r3, [r7, #24]
 80090da:	0d5b      	lsrs	r3, r3, #21
 80090dc:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80090e0:	4b0d      	ldr	r3, [pc, #52]	; (8009118 <I2C_TransferConfig+0x58>)
 80090e2:	430b      	orrs	r3, r1
 80090e4:	43db      	mvns	r3, r3
 80090e6:	ea02 0103 	and.w	r1, r2, r3
 80090ea:	897b      	ldrh	r3, [r7, #10]
 80090ec:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80090f0:	7a7b      	ldrb	r3, [r7, #9]
 80090f2:	041b      	lsls	r3, r3, #16
 80090f4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80090f8:	431a      	orrs	r2, r3
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	431a      	orrs	r2, r3
 80090fe:	69bb      	ldr	r3, [r7, #24]
 8009100:	431a      	orrs	r2, r3
 8009102:	68fb      	ldr	r3, [r7, #12]
 8009104:	681b      	ldr	r3, [r3, #0]
 8009106:	430a      	orrs	r2, r1
 8009108:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 800910a:	bf00      	nop
 800910c:	3714      	adds	r7, #20
 800910e:	46bd      	mov	sp, r7
 8009110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009114:	4770      	bx	lr
 8009116:	bf00      	nop
 8009118:	03ff63ff 	.word	0x03ff63ff

0800911c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800911c:	b480      	push	{r7}
 800911e:	b083      	sub	sp, #12
 8009120:	af00      	add	r7, sp, #0
 8009122:	6078      	str	r0, [r7, #4]
 8009124:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800912c:	b2db      	uxtb	r3, r3
 800912e:	2b20      	cmp	r3, #32
 8009130:	d138      	bne.n	80091a4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009138:	2b01      	cmp	r3, #1
 800913a:	d101      	bne.n	8009140 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800913c:	2302      	movs	r3, #2
 800913e:	e032      	b.n	80091a6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	2201      	movs	r2, #1
 8009144:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	2224      	movs	r2, #36	; 0x24
 800914c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	681b      	ldr	r3, [r3, #0]
 8009154:	681a      	ldr	r2, [r3, #0]
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	681b      	ldr	r3, [r3, #0]
 800915a:	f022 0201 	bic.w	r2, r2, #1
 800915e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	681b      	ldr	r3, [r3, #0]
 8009164:	681a      	ldr	r2, [r3, #0]
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	681b      	ldr	r3, [r3, #0]
 800916a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800916e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	681b      	ldr	r3, [r3, #0]
 8009174:	6819      	ldr	r1, [r3, #0]
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	681b      	ldr	r3, [r3, #0]
 800917a:	683a      	ldr	r2, [r7, #0]
 800917c:	430a      	orrs	r2, r1
 800917e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	681b      	ldr	r3, [r3, #0]
 8009184:	681a      	ldr	r2, [r3, #0]
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	681b      	ldr	r3, [r3, #0]
 800918a:	f042 0201 	orr.w	r2, r2, #1
 800918e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	2220      	movs	r2, #32
 8009194:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	2200      	movs	r2, #0
 800919c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80091a0:	2300      	movs	r3, #0
 80091a2:	e000      	b.n	80091a6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80091a4:	2302      	movs	r3, #2
  }
}
 80091a6:	4618      	mov	r0, r3
 80091a8:	370c      	adds	r7, #12
 80091aa:	46bd      	mov	sp, r7
 80091ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091b0:	4770      	bx	lr

080091b2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80091b2:	b480      	push	{r7}
 80091b4:	b085      	sub	sp, #20
 80091b6:	af00      	add	r7, sp, #0
 80091b8:	6078      	str	r0, [r7, #4]
 80091ba:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80091c2:	b2db      	uxtb	r3, r3
 80091c4:	2b20      	cmp	r3, #32
 80091c6:	d139      	bne.n	800923c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80091ce:	2b01      	cmp	r3, #1
 80091d0:	d101      	bne.n	80091d6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80091d2:	2302      	movs	r3, #2
 80091d4:	e033      	b.n	800923e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	2201      	movs	r2, #1
 80091da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	2224      	movs	r2, #36	; 0x24
 80091e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	681b      	ldr	r3, [r3, #0]
 80091ea:	681a      	ldr	r2, [r3, #0]
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	681b      	ldr	r3, [r3, #0]
 80091f0:	f022 0201 	bic.w	r2, r2, #1
 80091f4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	681b      	ldr	r3, [r3, #0]
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80091fe:	68fb      	ldr	r3, [r7, #12]
 8009200:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8009204:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8009206:	683b      	ldr	r3, [r7, #0]
 8009208:	021b      	lsls	r3, r3, #8
 800920a:	68fa      	ldr	r2, [r7, #12]
 800920c:	4313      	orrs	r3, r2
 800920e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	681b      	ldr	r3, [r3, #0]
 8009214:	68fa      	ldr	r2, [r7, #12]
 8009216:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	681a      	ldr	r2, [r3, #0]
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	681b      	ldr	r3, [r3, #0]
 8009222:	f042 0201 	orr.w	r2, r2, #1
 8009226:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	2220      	movs	r2, #32
 800922c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	2200      	movs	r2, #0
 8009234:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8009238:	2300      	movs	r3, #0
 800923a:	e000      	b.n	800923e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800923c:	2302      	movs	r3, #2
  }
}
 800923e:	4618      	mov	r0, r3
 8009240:	3714      	adds	r7, #20
 8009242:	46bd      	mov	sp, r7
 8009244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009248:	4770      	bx	lr
	...

0800924c <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800924c:	b480      	push	{r7}
 800924e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8009250:	4b05      	ldr	r3, [pc, #20]	; (8009268 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8009252:	681b      	ldr	r3, [r3, #0]
 8009254:	4a04      	ldr	r2, [pc, #16]	; (8009268 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8009256:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800925a:	6013      	str	r3, [r2, #0]
}
 800925c:	bf00      	nop
 800925e:	46bd      	mov	sp, r7
 8009260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009264:	4770      	bx	lr
 8009266:	bf00      	nop
 8009268:	58000400 	.word	0x58000400

0800926c <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */  
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800926c:	b480      	push	{r7}
 800926e:	af00      	add	r7, sp, #0
  return  (PWR->CR1 & PWR_CR1_VOS);
 8009270:	4b04      	ldr	r3, [pc, #16]	; (8009284 <HAL_PWREx_GetVoltageRange+0x18>)
 8009272:	681b      	ldr	r3, [r3, #0]
 8009274:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8009278:	4618      	mov	r0, r3
 800927a:	46bd      	mov	sp, r7
 800927c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009280:	4770      	bx	lr
 8009282:	bf00      	nop
 8009284:	58000400 	.word	0x58000400

08009288 <LL_RCC_HSE_IsEnabledDiv2>:
{
 8009288:	b480      	push	{r7}
 800928a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 800928c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009290:	681b      	ldr	r3, [r3, #0]
 8009292:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009296:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800929a:	d101      	bne.n	80092a0 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 800929c:	2301      	movs	r3, #1
 800929e:	e000      	b.n	80092a2 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 80092a0:	2300      	movs	r3, #0
}
 80092a2:	4618      	mov	r0, r3
 80092a4:	46bd      	mov	sp, r7
 80092a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092aa:	4770      	bx	lr

080092ac <LL_RCC_HSE_Enable>:
{
 80092ac:	b480      	push	{r7}
 80092ae:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 80092b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80092b4:	681b      	ldr	r3, [r3, #0]
 80092b6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80092ba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80092be:	6013      	str	r3, [r2, #0]
}
 80092c0:	bf00      	nop
 80092c2:	46bd      	mov	sp, r7
 80092c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092c8:	4770      	bx	lr

080092ca <LL_RCC_HSE_Disable>:
{
 80092ca:	b480      	push	{r7}
 80092cc:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 80092ce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80092d2:	681b      	ldr	r3, [r3, #0]
 80092d4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80092d8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80092dc:	6013      	str	r3, [r2, #0]
}
 80092de:	bf00      	nop
 80092e0:	46bd      	mov	sp, r7
 80092e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092e6:	4770      	bx	lr

080092e8 <LL_RCC_HSE_IsReady>:
{
 80092e8:	b480      	push	{r7}
 80092ea:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 80092ec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80092f0:	681b      	ldr	r3, [r3, #0]
 80092f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80092f6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80092fa:	d101      	bne.n	8009300 <LL_RCC_HSE_IsReady+0x18>
 80092fc:	2301      	movs	r3, #1
 80092fe:	e000      	b.n	8009302 <LL_RCC_HSE_IsReady+0x1a>
 8009300:	2300      	movs	r3, #0
}
 8009302:	4618      	mov	r0, r3
 8009304:	46bd      	mov	sp, r7
 8009306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800930a:	4770      	bx	lr

0800930c <LL_RCC_HSI_Enable>:
{
 800930c:	b480      	push	{r7}
 800930e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8009310:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009314:	681b      	ldr	r3, [r3, #0]
 8009316:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800931a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800931e:	6013      	str	r3, [r2, #0]
}
 8009320:	bf00      	nop
 8009322:	46bd      	mov	sp, r7
 8009324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009328:	4770      	bx	lr

0800932a <LL_RCC_HSI_Disable>:
{
 800932a:	b480      	push	{r7}
 800932c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 800932e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009332:	681b      	ldr	r3, [r3, #0]
 8009334:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8009338:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800933c:	6013      	str	r3, [r2, #0]
}
 800933e:	bf00      	nop
 8009340:	46bd      	mov	sp, r7
 8009342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009346:	4770      	bx	lr

08009348 <LL_RCC_HSI_IsReady>:
{
 8009348:	b480      	push	{r7}
 800934a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 800934c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009350:	681b      	ldr	r3, [r3, #0]
 8009352:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009356:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800935a:	d101      	bne.n	8009360 <LL_RCC_HSI_IsReady+0x18>
 800935c:	2301      	movs	r3, #1
 800935e:	e000      	b.n	8009362 <LL_RCC_HSI_IsReady+0x1a>
 8009360:	2300      	movs	r3, #0
}
 8009362:	4618      	mov	r0, r3
 8009364:	46bd      	mov	sp, r7
 8009366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800936a:	4770      	bx	lr

0800936c <LL_RCC_HSI_SetCalibTrimming>:
{
 800936c:	b480      	push	{r7}
 800936e:	b083      	sub	sp, #12
 8009370:	af00      	add	r7, sp, #0
 8009372:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8009374:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009378:	685b      	ldr	r3, [r3, #4]
 800937a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	061b      	lsls	r3, r3, #24
 8009382:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8009386:	4313      	orrs	r3, r2
 8009388:	604b      	str	r3, [r1, #4]
}
 800938a:	bf00      	nop
 800938c:	370c      	adds	r7, #12
 800938e:	46bd      	mov	sp, r7
 8009390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009394:	4770      	bx	lr

08009396 <LL_RCC_HSI48_Enable>:
{
 8009396:	b480      	push	{r7}
 8009398:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 800939a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800939e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80093a2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80093a6:	f043 0301 	orr.w	r3, r3, #1
 80093aa:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 80093ae:	bf00      	nop
 80093b0:	46bd      	mov	sp, r7
 80093b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093b6:	4770      	bx	lr

080093b8 <LL_RCC_HSI48_Disable>:
{
 80093b8:	b480      	push	{r7}
 80093ba:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 80093bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80093c0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80093c4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80093c8:	f023 0301 	bic.w	r3, r3, #1
 80093cc:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 80093d0:	bf00      	nop
 80093d2:	46bd      	mov	sp, r7
 80093d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093d8:	4770      	bx	lr

080093da <LL_RCC_HSI48_IsReady>:
{
 80093da:	b480      	push	{r7}
 80093dc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 80093de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80093e2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80093e6:	f003 0302 	and.w	r3, r3, #2
 80093ea:	2b02      	cmp	r3, #2
 80093ec:	d101      	bne.n	80093f2 <LL_RCC_HSI48_IsReady+0x18>
 80093ee:	2301      	movs	r3, #1
 80093f0:	e000      	b.n	80093f4 <LL_RCC_HSI48_IsReady+0x1a>
 80093f2:	2300      	movs	r3, #0
}
 80093f4:	4618      	mov	r0, r3
 80093f6:	46bd      	mov	sp, r7
 80093f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093fc:	4770      	bx	lr

080093fe <LL_RCC_LSE_Enable>:
{
 80093fe:	b480      	push	{r7}
 8009400:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8009402:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009406:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800940a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800940e:	f043 0301 	orr.w	r3, r3, #1
 8009412:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8009416:	bf00      	nop
 8009418:	46bd      	mov	sp, r7
 800941a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800941e:	4770      	bx	lr

08009420 <LL_RCC_LSE_Disable>:
{
 8009420:	b480      	push	{r7}
 8009422:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8009424:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009428:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800942c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8009430:	f023 0301 	bic.w	r3, r3, #1
 8009434:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8009438:	bf00      	nop
 800943a:	46bd      	mov	sp, r7
 800943c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009440:	4770      	bx	lr

08009442 <LL_RCC_LSE_EnableBypass>:
{
 8009442:	b480      	push	{r7}
 8009444:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8009446:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800944a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800944e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8009452:	f043 0304 	orr.w	r3, r3, #4
 8009456:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800945a:	bf00      	nop
 800945c:	46bd      	mov	sp, r7
 800945e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009462:	4770      	bx	lr

08009464 <LL_RCC_LSE_DisableBypass>:
{
 8009464:	b480      	push	{r7}
 8009466:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8009468:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800946c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009470:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8009474:	f023 0304 	bic.w	r3, r3, #4
 8009478:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800947c:	bf00      	nop
 800947e:	46bd      	mov	sp, r7
 8009480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009484:	4770      	bx	lr

08009486 <LL_RCC_LSE_IsReady>:
{
 8009486:	b480      	push	{r7}
 8009488:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800948a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800948e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009492:	f003 0302 	and.w	r3, r3, #2
 8009496:	2b02      	cmp	r3, #2
 8009498:	d101      	bne.n	800949e <LL_RCC_LSE_IsReady+0x18>
 800949a:	2301      	movs	r3, #1
 800949c:	e000      	b.n	80094a0 <LL_RCC_LSE_IsReady+0x1a>
 800949e:	2300      	movs	r3, #0
}
 80094a0:	4618      	mov	r0, r3
 80094a2:	46bd      	mov	sp, r7
 80094a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094a8:	4770      	bx	lr

080094aa <LL_RCC_LSI1_Enable>:
{
 80094aa:	b480      	push	{r7}
 80094ac:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 80094ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80094b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80094b6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80094ba:	f043 0301 	orr.w	r3, r3, #1
 80094be:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80094c2:	bf00      	nop
 80094c4:	46bd      	mov	sp, r7
 80094c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094ca:	4770      	bx	lr

080094cc <LL_RCC_LSI1_Disable>:
{
 80094cc:	b480      	push	{r7}
 80094ce:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 80094d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80094d4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80094d8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80094dc:	f023 0301 	bic.w	r3, r3, #1
 80094e0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80094e4:	bf00      	nop
 80094e6:	46bd      	mov	sp, r7
 80094e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094ec:	4770      	bx	lr

080094ee <LL_RCC_LSI1_IsReady>:
{
 80094ee:	b480      	push	{r7}
 80094f0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 80094f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80094f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80094fa:	f003 0302 	and.w	r3, r3, #2
 80094fe:	2b02      	cmp	r3, #2
 8009500:	d101      	bne.n	8009506 <LL_RCC_LSI1_IsReady+0x18>
 8009502:	2301      	movs	r3, #1
 8009504:	e000      	b.n	8009508 <LL_RCC_LSI1_IsReady+0x1a>
 8009506:	2300      	movs	r3, #0
}
 8009508:	4618      	mov	r0, r3
 800950a:	46bd      	mov	sp, r7
 800950c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009510:	4770      	bx	lr

08009512 <LL_RCC_LSI2_Enable>:
{
 8009512:	b480      	push	{r7}
 8009514:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8009516:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800951a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800951e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8009522:	f043 0304 	orr.w	r3, r3, #4
 8009526:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 800952a:	bf00      	nop
 800952c:	46bd      	mov	sp, r7
 800952e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009532:	4770      	bx	lr

08009534 <LL_RCC_LSI2_Disable>:
{
 8009534:	b480      	push	{r7}
 8009536:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8009538:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800953c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009540:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8009544:	f023 0304 	bic.w	r3, r3, #4
 8009548:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 800954c:	bf00      	nop
 800954e:	46bd      	mov	sp, r7
 8009550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009554:	4770      	bx	lr

08009556 <LL_RCC_LSI2_IsReady>:
{
 8009556:	b480      	push	{r7}
 8009558:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 800955a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800955e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009562:	f003 0308 	and.w	r3, r3, #8
 8009566:	2b08      	cmp	r3, #8
 8009568:	d101      	bne.n	800956e <LL_RCC_LSI2_IsReady+0x18>
 800956a:	2301      	movs	r3, #1
 800956c:	e000      	b.n	8009570 <LL_RCC_LSI2_IsReady+0x1a>
 800956e:	2300      	movs	r3, #0
}
 8009570:	4618      	mov	r0, r3
 8009572:	46bd      	mov	sp, r7
 8009574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009578:	4770      	bx	lr

0800957a <LL_RCC_LSI2_SetTrimming>:
{
 800957a:	b480      	push	{r7}
 800957c:	b083      	sub	sp, #12
 800957e:	af00      	add	r7, sp, #0
 8009580:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 8009582:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009586:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800958a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	021b      	lsls	r3, r3, #8
 8009592:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8009596:	4313      	orrs	r3, r2
 8009598:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 800959c:	bf00      	nop
 800959e:	370c      	adds	r7, #12
 80095a0:	46bd      	mov	sp, r7
 80095a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095a6:	4770      	bx	lr

080095a8 <LL_RCC_MSI_Enable>:
{
 80095a8:	b480      	push	{r7}
 80095aa:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 80095ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80095b0:	681b      	ldr	r3, [r3, #0]
 80095b2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80095b6:	f043 0301 	orr.w	r3, r3, #1
 80095ba:	6013      	str	r3, [r2, #0]
}
 80095bc:	bf00      	nop
 80095be:	46bd      	mov	sp, r7
 80095c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095c4:	4770      	bx	lr

080095c6 <LL_RCC_MSI_Disable>:
{
 80095c6:	b480      	push	{r7}
 80095c8:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 80095ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80095ce:	681b      	ldr	r3, [r3, #0]
 80095d0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80095d4:	f023 0301 	bic.w	r3, r3, #1
 80095d8:	6013      	str	r3, [r2, #0]
}
 80095da:	bf00      	nop
 80095dc:	46bd      	mov	sp, r7
 80095de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095e2:	4770      	bx	lr

080095e4 <LL_RCC_MSI_IsReady>:
{
 80095e4:	b480      	push	{r7}
 80095e6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 80095e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80095ec:	681b      	ldr	r3, [r3, #0]
 80095ee:	f003 0302 	and.w	r3, r3, #2
 80095f2:	2b02      	cmp	r3, #2
 80095f4:	d101      	bne.n	80095fa <LL_RCC_MSI_IsReady+0x16>
 80095f6:	2301      	movs	r3, #1
 80095f8:	e000      	b.n	80095fc <LL_RCC_MSI_IsReady+0x18>
 80095fa:	2300      	movs	r3, #0
}
 80095fc:	4618      	mov	r0, r3
 80095fe:	46bd      	mov	sp, r7
 8009600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009604:	4770      	bx	lr

08009606 <LL_RCC_MSI_SetRange>:
{
 8009606:	b480      	push	{r7}
 8009608:	b083      	sub	sp, #12
 800960a:	af00      	add	r7, sp, #0
 800960c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 800960e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009612:	681b      	ldr	r3, [r3, #0]
 8009614:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8009618:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	4313      	orrs	r3, r2
 8009620:	600b      	str	r3, [r1, #0]
}
 8009622:	bf00      	nop
 8009624:	370c      	adds	r7, #12
 8009626:	46bd      	mov	sp, r7
 8009628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800962c:	4770      	bx	lr

0800962e <LL_RCC_MSI_GetRange>:
{
 800962e:	b480      	push	{r7}
 8009630:	b083      	sub	sp, #12
 8009632:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8009634:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009638:	681b      	ldr	r3, [r3, #0]
 800963a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800963e:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	2bb0      	cmp	r3, #176	; 0xb0
 8009644:	d901      	bls.n	800964a <LL_RCC_MSI_GetRange+0x1c>
    msiRange = LL_RCC_MSIRANGE_11;
 8009646:	23b0      	movs	r3, #176	; 0xb0
 8009648:	607b      	str	r3, [r7, #4]
  return msiRange;
 800964a:	687b      	ldr	r3, [r7, #4]
}
 800964c:	4618      	mov	r0, r3
 800964e:	370c      	adds	r7, #12
 8009650:	46bd      	mov	sp, r7
 8009652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009656:	4770      	bx	lr

08009658 <LL_RCC_MSI_SetCalibTrimming>:
{
 8009658:	b480      	push	{r7}
 800965a:	b083      	sub	sp, #12
 800965c:	af00      	add	r7, sp, #0
 800965e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8009660:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009664:	685b      	ldr	r3, [r3, #4]
 8009666:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	021b      	lsls	r3, r3, #8
 800966e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8009672:	4313      	orrs	r3, r2
 8009674:	604b      	str	r3, [r1, #4]
}
 8009676:	bf00      	nop
 8009678:	370c      	adds	r7, #12
 800967a:	46bd      	mov	sp, r7
 800967c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009680:	4770      	bx	lr

08009682 <LL_RCC_SetSysClkSource>:
{
 8009682:	b480      	push	{r7}
 8009684:	b083      	sub	sp, #12
 8009686:	af00      	add	r7, sp, #0
 8009688:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 800968a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800968e:	689b      	ldr	r3, [r3, #8]
 8009690:	f023 0203 	bic.w	r2, r3, #3
 8009694:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	4313      	orrs	r3, r2
 800969c:	608b      	str	r3, [r1, #8]
}
 800969e:	bf00      	nop
 80096a0:	370c      	adds	r7, #12
 80096a2:	46bd      	mov	sp, r7
 80096a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096a8:	4770      	bx	lr

080096aa <LL_RCC_GetSysClkSource>:
{
 80096aa:	b480      	push	{r7}
 80096ac:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80096ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80096b2:	689b      	ldr	r3, [r3, #8]
 80096b4:	f003 030c 	and.w	r3, r3, #12
}
 80096b8:	4618      	mov	r0, r3
 80096ba:	46bd      	mov	sp, r7
 80096bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096c0:	4770      	bx	lr

080096c2 <LL_RCC_SetAHBPrescaler>:
{
 80096c2:	b480      	push	{r7}
 80096c4:	b083      	sub	sp, #12
 80096c6:	af00      	add	r7, sp, #0
 80096c8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 80096ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80096ce:	689b      	ldr	r3, [r3, #8]
 80096d0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80096d4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	4313      	orrs	r3, r2
 80096dc:	608b      	str	r3, [r1, #8]
}
 80096de:	bf00      	nop
 80096e0:	370c      	adds	r7, #12
 80096e2:	46bd      	mov	sp, r7
 80096e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096e8:	4770      	bx	lr

080096ea <LL_C2_RCC_SetAHBPrescaler>:
{
 80096ea:	b480      	push	{r7}
 80096ec:	b083      	sub	sp, #12
 80096ee:	af00      	add	r7, sp, #0
 80096f0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 80096f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80096f6:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80096fa:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80096fe:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	4313      	orrs	r3, r2
 8009706:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 800970a:	bf00      	nop
 800970c:	370c      	adds	r7, #12
 800970e:	46bd      	mov	sp, r7
 8009710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009714:	4770      	bx	lr

08009716 <LL_RCC_SetAHB4Prescaler>:
{
 8009716:	b480      	push	{r7}
 8009718:	b083      	sub	sp, #12
 800971a:	af00      	add	r7, sp, #0
 800971c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 800971e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009722:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8009726:	f023 020f 	bic.w	r2, r3, #15
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	091b      	lsrs	r3, r3, #4
 800972e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8009732:	4313      	orrs	r3, r2
 8009734:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8009738:	bf00      	nop
 800973a:	370c      	adds	r7, #12
 800973c:	46bd      	mov	sp, r7
 800973e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009742:	4770      	bx	lr

08009744 <LL_RCC_SetAPB1Prescaler>:
{
 8009744:	b480      	push	{r7}
 8009746:	b083      	sub	sp, #12
 8009748:	af00      	add	r7, sp, #0
 800974a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 800974c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009750:	689b      	ldr	r3, [r3, #8]
 8009752:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8009756:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	4313      	orrs	r3, r2
 800975e:	608b      	str	r3, [r1, #8]
}
 8009760:	bf00      	nop
 8009762:	370c      	adds	r7, #12
 8009764:	46bd      	mov	sp, r7
 8009766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800976a:	4770      	bx	lr

0800976c <LL_RCC_SetAPB2Prescaler>:
{
 800976c:	b480      	push	{r7}
 800976e:	b083      	sub	sp, #12
 8009770:	af00      	add	r7, sp, #0
 8009772:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8009774:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009778:	689b      	ldr	r3, [r3, #8]
 800977a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800977e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	4313      	orrs	r3, r2
 8009786:	608b      	str	r3, [r1, #8]
}
 8009788:	bf00      	nop
 800978a:	370c      	adds	r7, #12
 800978c:	46bd      	mov	sp, r7
 800978e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009792:	4770      	bx	lr

08009794 <LL_RCC_GetAHBPrescaler>:
{
 8009794:	b480      	push	{r7}
 8009796:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8009798:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800979c:	689b      	ldr	r3, [r3, #8]
 800979e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80097a2:	4618      	mov	r0, r3
 80097a4:	46bd      	mov	sp, r7
 80097a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097aa:	4770      	bx	lr

080097ac <LL_C2_RCC_GetAHBPrescaler>:
{
 80097ac:	b480      	push	{r7}
 80097ae:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE));
 80097b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80097b4:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80097b8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80097bc:	4618      	mov	r0, r3
 80097be:	46bd      	mov	sp, r7
 80097c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097c4:	4770      	bx	lr

080097c6 <LL_RCC_GetAHB4Prescaler>:
{
 80097c6:	b480      	push	{r7}
 80097c8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 80097ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80097ce:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80097d2:	011b      	lsls	r3, r3, #4
 80097d4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80097d8:	4618      	mov	r0, r3
 80097da:	46bd      	mov	sp, r7
 80097dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097e0:	4770      	bx	lr

080097e2 <LL_RCC_GetAPB1Prescaler>:
{
 80097e2:	b480      	push	{r7}
 80097e4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 80097e6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80097ea:	689b      	ldr	r3, [r3, #8]
 80097ec:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 80097f0:	4618      	mov	r0, r3
 80097f2:	46bd      	mov	sp, r7
 80097f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097f8:	4770      	bx	lr

080097fa <LL_RCC_GetAPB2Prescaler>:
{
 80097fa:	b480      	push	{r7}
 80097fc:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 80097fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009802:	689b      	ldr	r3, [r3, #8]
 8009804:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8009808:	4618      	mov	r0, r3
 800980a:	46bd      	mov	sp, r7
 800980c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009810:	4770      	bx	lr

08009812 <LL_RCC_PLL_Enable>:
{
 8009812:	b480      	push	{r7}
 8009814:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8009816:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800981a:	681b      	ldr	r3, [r3, #0]
 800981c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8009820:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009824:	6013      	str	r3, [r2, #0]
}
 8009826:	bf00      	nop
 8009828:	46bd      	mov	sp, r7
 800982a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800982e:	4770      	bx	lr

08009830 <LL_RCC_PLL_Disable>:
{
 8009830:	b480      	push	{r7}
 8009832:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8009834:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009838:	681b      	ldr	r3, [r3, #0]
 800983a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800983e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009842:	6013      	str	r3, [r2, #0]
}
 8009844:	bf00      	nop
 8009846:	46bd      	mov	sp, r7
 8009848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800984c:	4770      	bx	lr

0800984e <LL_RCC_PLL_IsReady>:
{
 800984e:	b480      	push	{r7}
 8009850:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8009852:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009856:	681b      	ldr	r3, [r3, #0]
 8009858:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800985c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009860:	d101      	bne.n	8009866 <LL_RCC_PLL_IsReady+0x18>
 8009862:	2301      	movs	r3, #1
 8009864:	e000      	b.n	8009868 <LL_RCC_PLL_IsReady+0x1a>
 8009866:	2300      	movs	r3, #0
}
 8009868:	4618      	mov	r0, r3
 800986a:	46bd      	mov	sp, r7
 800986c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009870:	4770      	bx	lr

08009872 <LL_RCC_PLL_GetN>:
{
 8009872:	b480      	push	{r7}
 8009874:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8009876:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800987a:	68db      	ldr	r3, [r3, #12]
 800987c:	0a1b      	lsrs	r3, r3, #8
 800987e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8009882:	4618      	mov	r0, r3
 8009884:	46bd      	mov	sp, r7
 8009886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800988a:	4770      	bx	lr

0800988c <LL_RCC_PLL_GetR>:
{
 800988c:	b480      	push	{r7}
 800988e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8009890:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009894:	68db      	ldr	r3, [r3, #12]
 8009896:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 800989a:	4618      	mov	r0, r3
 800989c:	46bd      	mov	sp, r7
 800989e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098a2:	4770      	bx	lr

080098a4 <LL_RCC_PLL_GetDivider>:
{
 80098a4:	b480      	push	{r7}
 80098a6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 80098a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80098ac:	68db      	ldr	r3, [r3, #12]
 80098ae:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 80098b2:	4618      	mov	r0, r3
 80098b4:	46bd      	mov	sp, r7
 80098b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098ba:	4770      	bx	lr

080098bc <LL_RCC_PLL_GetMainSource>:
{
 80098bc:	b480      	push	{r7}
 80098be:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 80098c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80098c4:	68db      	ldr	r3, [r3, #12]
 80098c6:	f003 0303 	and.w	r3, r3, #3
}
 80098ca:	4618      	mov	r0, r3
 80098cc:	46bd      	mov	sp, r7
 80098ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098d2:	4770      	bx	lr

080098d4 <LL_RCC_IsActiveFlag_HPRE>:
{
 80098d4:	b480      	push	{r7}
 80098d6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 80098d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80098dc:	689b      	ldr	r3, [r3, #8]
 80098de:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80098e2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80098e6:	d101      	bne.n	80098ec <LL_RCC_IsActiveFlag_HPRE+0x18>
 80098e8:	2301      	movs	r3, #1
 80098ea:	e000      	b.n	80098ee <LL_RCC_IsActiveFlag_HPRE+0x1a>
 80098ec:	2300      	movs	r3, #0
}
 80098ee:	4618      	mov	r0, r3
 80098f0:	46bd      	mov	sp, r7
 80098f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098f6:	4770      	bx	lr

080098f8 <LL_RCC_IsActiveFlag_C2HPRE>:
{
 80098f8:	b480      	push	{r7}
 80098fa:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 80098fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009900:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8009904:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009908:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800990c:	d101      	bne.n	8009912 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 800990e:	2301      	movs	r3, #1
 8009910:	e000      	b.n	8009914 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8009912:	2300      	movs	r3, #0
}
 8009914:	4618      	mov	r0, r3
 8009916:	46bd      	mov	sp, r7
 8009918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800991c:	4770      	bx	lr

0800991e <LL_RCC_IsActiveFlag_SHDHPRE>:
{
 800991e:	b480      	push	{r7}
 8009920:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8009922:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009926:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800992a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800992e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009932:	d101      	bne.n	8009938 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8009934:	2301      	movs	r3, #1
 8009936:	e000      	b.n	800993a <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8009938:	2300      	movs	r3, #0
}
 800993a:	4618      	mov	r0, r3
 800993c:	46bd      	mov	sp, r7
 800993e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009942:	4770      	bx	lr

08009944 <LL_RCC_IsActiveFlag_PPRE1>:
{
 8009944:	b480      	push	{r7}
 8009946:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8009948:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800994c:	689b      	ldr	r3, [r3, #8]
 800994e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009952:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009956:	d101      	bne.n	800995c <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8009958:	2301      	movs	r3, #1
 800995a:	e000      	b.n	800995e <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 800995c:	2300      	movs	r3, #0
}
 800995e:	4618      	mov	r0, r3
 8009960:	46bd      	mov	sp, r7
 8009962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009966:	4770      	bx	lr

08009968 <LL_RCC_IsActiveFlag_PPRE2>:
{
 8009968:	b480      	push	{r7}
 800996a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 800996c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009970:	689b      	ldr	r3, [r3, #8]
 8009972:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009976:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800997a:	d101      	bne.n	8009980 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 800997c:	2301      	movs	r3, #1
 800997e:	e000      	b.n	8009982 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8009980:	2300      	movs	r3, #0
}
 8009982:	4618      	mov	r0, r3
 8009984:	46bd      	mov	sp, r7
 8009986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800998a:	4770      	bx	lr

0800998c <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800998c:	b590      	push	{r4, r7, lr}
 800998e:	b08d      	sub	sp, #52	; 0x34
 8009990:	af00      	add	r7, sp, #0
 8009992:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	2b00      	cmp	r3, #0
 8009998:	d101      	bne.n	800999e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800999a:	2301      	movs	r3, #1
 800999c:	e37e      	b.n	800a09c <HAL_RCC_OscConfig+0x710>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	681b      	ldr	r3, [r3, #0]
 80099a2:	f003 0320 	and.w	r3, r3, #32
 80099a6:	2b00      	cmp	r3, #0
 80099a8:	f000 8092 	beq.w	8009ad0 <HAL_RCC_OscConfig+0x144>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80099ac:	f7ff fe7d 	bl	80096aa <LL_RCC_GetSysClkSource>
 80099b0:	62f8      	str	r0, [r7, #44]	; 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 80099b2:	f7ff ff83 	bl	80098bc <LL_RCC_PLL_GetMainSource>
 80099b6:	62b8      	str	r0, [r7, #40]	; 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80099b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80099ba:	2b00      	cmp	r3, #0
 80099bc:	d005      	beq.n	80099ca <HAL_RCC_OscConfig+0x3e>
 80099be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80099c0:	2b0c      	cmp	r3, #12
 80099c2:	d14c      	bne.n	8009a5e <HAL_RCC_OscConfig+0xd2>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 80099c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099c6:	2b01      	cmp	r3, #1
 80099c8:	d149      	bne.n	8009a5e <HAL_RCC_OscConfig+0xd2>
    {
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80099ca:	f7ff fe0b 	bl	80095e4 <LL_RCC_MSI_IsReady>
 80099ce:	4603      	mov	r3, r0
 80099d0:	2b00      	cmp	r3, #0
 80099d2:	d005      	beq.n	80099e0 <HAL_RCC_OscConfig+0x54>
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	69db      	ldr	r3, [r3, #28]
 80099d8:	2b00      	cmp	r3, #0
 80099da:	d101      	bne.n	80099e0 <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 80099dc:	2301      	movs	r3, #1
 80099de:	e35d      	b.n	800a09c <HAL_RCC_OscConfig+0x710>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 80099e4:	f7ff fe23 	bl	800962e <LL_RCC_MSI_GetRange>
 80099e8:	4603      	mov	r3, r0
 80099ea:	429c      	cmp	r4, r3
 80099ec:	d914      	bls.n	8009a18 <HAL_RCC_OscConfig+0x8c>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099f2:	4618      	mov	r0, r3
 80099f4:	f000 fd5c 	bl	800a4b0 <RCC_SetFlashLatencyFromMSIRange>
 80099f8:	4603      	mov	r3, r0
 80099fa:	2b00      	cmp	r3, #0
 80099fc:	d001      	beq.n	8009a02 <HAL_RCC_OscConfig+0x76>
          {
            return HAL_ERROR;
 80099fe:	2301      	movs	r3, #1
 8009a00:	e34c      	b.n	800a09c <HAL_RCC_OscConfig+0x710>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a06:	4618      	mov	r0, r3
 8009a08:	f7ff fdfd 	bl	8009606 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	6a1b      	ldr	r3, [r3, #32]
 8009a10:	4618      	mov	r0, r3
 8009a12:	f7ff fe21 	bl	8009658 <LL_RCC_MSI_SetCalibTrimming>
 8009a16:	e013      	b.n	8009a40 <HAL_RCC_OscConfig+0xb4>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a1c:	4618      	mov	r0, r3
 8009a1e:	f7ff fdf2 	bl	8009606 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	6a1b      	ldr	r3, [r3, #32]
 8009a26:	4618      	mov	r0, r3
 8009a28:	f7ff fe16 	bl	8009658 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a30:	4618      	mov	r0, r3
 8009a32:	f000 fd3d 	bl	800a4b0 <RCC_SetFlashLatencyFromMSIRange>
 8009a36:	4603      	mov	r3, r0
 8009a38:	2b00      	cmp	r3, #0
 8009a3a:	d001      	beq.n	8009a40 <HAL_RCC_OscConfig+0xb4>
          {
            return HAL_ERROR;
 8009a3c:	2301      	movs	r3, #1
 8009a3e:	e32d      	b.n	800a09c <HAL_RCC_OscConfig+0x710>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8009a40:	f000 fcda 	bl	800a3f8 <HAL_RCC_GetHCLKFreq>
 8009a44:	4602      	mov	r2, r0
 8009a46:	4bb3      	ldr	r3, [pc, #716]	; (8009d14 <HAL_RCC_OscConfig+0x388>)
 8009a48:	601a      	str	r2, [r3, #0]
        
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8009a4a:	4bb3      	ldr	r3, [pc, #716]	; (8009d18 <HAL_RCC_OscConfig+0x38c>)
 8009a4c:	681b      	ldr	r3, [r3, #0]
 8009a4e:	4618      	mov	r0, r3
 8009a50:	f7fd fb6e 	bl	8007130 <HAL_InitTick>
 8009a54:	4603      	mov	r3, r0
 8009a56:	2b00      	cmp	r3, #0
 8009a58:	d039      	beq.n	8009ace <HAL_RCC_OscConfig+0x142>
        {
          return HAL_ERROR;
 8009a5a:	2301      	movs	r3, #1
 8009a5c:	e31e      	b.n	800a09c <HAL_RCC_OscConfig+0x710>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	69db      	ldr	r3, [r3, #28]
 8009a62:	2b00      	cmp	r3, #0
 8009a64:	d01e      	beq.n	8009aa4 <HAL_RCC_OscConfig+0x118>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8009a66:	f7ff fd9f 	bl	80095a8 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8009a6a:	f7fe f8b3 	bl	8007bd4 <HAL_GetTick>
 8009a6e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8009a70:	e008      	b.n	8009a84 <HAL_RCC_OscConfig+0xf8>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8009a72:	f7fe f8af 	bl	8007bd4 <HAL_GetTick>
 8009a76:	4602      	mov	r2, r0
 8009a78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a7a:	1ad3      	subs	r3, r2, r3
 8009a7c:	2b02      	cmp	r3, #2
 8009a7e:	d901      	bls.n	8009a84 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8009a80:	2303      	movs	r3, #3
 8009a82:	e30b      	b.n	800a09c <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_MSI_IsReady() == 0U)
 8009a84:	f7ff fdae 	bl	80095e4 <LL_RCC_MSI_IsReady>
 8009a88:	4603      	mov	r3, r0
 8009a8a:	2b00      	cmp	r3, #0
 8009a8c:	d0f1      	beq.n	8009a72 <HAL_RCC_OscConfig+0xe6>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a92:	4618      	mov	r0, r3
 8009a94:	f7ff fdb7 	bl	8009606 <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	6a1b      	ldr	r3, [r3, #32]
 8009a9c:	4618      	mov	r0, r3
 8009a9e:	f7ff fddb 	bl	8009658 <LL_RCC_MSI_SetCalibTrimming>
 8009aa2:	e015      	b.n	8009ad0 <HAL_RCC_OscConfig+0x144>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8009aa4:	f7ff fd8f 	bl	80095c6 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8009aa8:	f7fe f894 	bl	8007bd4 <HAL_GetTick>
 8009aac:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8009aae:	e008      	b.n	8009ac2 <HAL_RCC_OscConfig+0x136>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8009ab0:	f7fe f890 	bl	8007bd4 <HAL_GetTick>
 8009ab4:	4602      	mov	r2, r0
 8009ab6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ab8:	1ad3      	subs	r3, r2, r3
 8009aba:	2b02      	cmp	r3, #2
 8009abc:	d901      	bls.n	8009ac2 <HAL_RCC_OscConfig+0x136>
          {
            return HAL_TIMEOUT;
 8009abe:	2303      	movs	r3, #3
 8009ac0:	e2ec      	b.n	800a09c <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_MSI_IsReady() != 0U)
 8009ac2:	f7ff fd8f 	bl	80095e4 <LL_RCC_MSI_IsReady>
 8009ac6:	4603      	mov	r3, r0
 8009ac8:	2b00      	cmp	r3, #0
 8009aca:	d1f1      	bne.n	8009ab0 <HAL_RCC_OscConfig+0x124>
 8009acc:	e000      	b.n	8009ad0 <HAL_RCC_OscConfig+0x144>
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8009ace:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	681b      	ldr	r3, [r3, #0]
 8009ad4:	f003 0301 	and.w	r3, r3, #1
 8009ad8:	2b00      	cmp	r3, #0
 8009ada:	d04e      	beq.n	8009b7a <HAL_RCC_OscConfig+0x1ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009adc:	f7ff fde5 	bl	80096aa <LL_RCC_GetSysClkSource>
 8009ae0:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8009ae2:	f7ff feeb 	bl	80098bc <LL_RCC_PLL_GetMainSource>
 8009ae6:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8009ae8:	6a3b      	ldr	r3, [r7, #32]
 8009aea:	2b08      	cmp	r3, #8
 8009aec:	d005      	beq.n	8009afa <HAL_RCC_OscConfig+0x16e>
 8009aee:	6a3b      	ldr	r3, [r7, #32]
 8009af0:	2b0c      	cmp	r3, #12
 8009af2:	d10d      	bne.n	8009b10 <HAL_RCC_OscConfig+0x184>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 8009af4:	69fb      	ldr	r3, [r7, #28]
 8009af6:	2b03      	cmp	r3, #3
 8009af8:	d10a      	bne.n	8009b10 <HAL_RCC_OscConfig+0x184>
    {
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009afa:	f7ff fbf5 	bl	80092e8 <LL_RCC_HSE_IsReady>
 8009afe:	4603      	mov	r3, r0
 8009b00:	2b00      	cmp	r3, #0
 8009b02:	d039      	beq.n	8009b78 <HAL_RCC_OscConfig+0x1ec>
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	685b      	ldr	r3, [r3, #4]
 8009b08:	2b00      	cmp	r3, #0
 8009b0a:	d135      	bne.n	8009b78 <HAL_RCC_OscConfig+0x1ec>
      {
        return HAL_ERROR;
 8009b0c:	2301      	movs	r3, #1
 8009b0e:	e2c5      	b.n	800a09c <HAL_RCC_OscConfig+0x710>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	685b      	ldr	r3, [r3, #4]
 8009b14:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009b18:	d102      	bne.n	8009b20 <HAL_RCC_OscConfig+0x194>
 8009b1a:	f7ff fbc7 	bl	80092ac <LL_RCC_HSE_Enable>
 8009b1e:	e001      	b.n	8009b24 <HAL_RCC_OscConfig+0x198>
 8009b20:	f7ff fbd3 	bl	80092ca <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	685b      	ldr	r3, [r3, #4]
 8009b28:	2b00      	cmp	r3, #0
 8009b2a:	d012      	beq.n	8009b52 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009b2c:	f7fe f852 	bl	8007bd4 <HAL_GetTick>
 8009b30:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8009b32:	e008      	b.n	8009b46 <HAL_RCC_OscConfig+0x1ba>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009b34:	f7fe f84e 	bl	8007bd4 <HAL_GetTick>
 8009b38:	4602      	mov	r2, r0
 8009b3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b3c:	1ad3      	subs	r3, r2, r3
 8009b3e:	2b64      	cmp	r3, #100	; 0x64
 8009b40:	d901      	bls.n	8009b46 <HAL_RCC_OscConfig+0x1ba>
          {
            return HAL_TIMEOUT;
 8009b42:	2303      	movs	r3, #3
 8009b44:	e2aa      	b.n	800a09c <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_HSE_IsReady() == 0U)
 8009b46:	f7ff fbcf 	bl	80092e8 <LL_RCC_HSE_IsReady>
 8009b4a:	4603      	mov	r3, r0
 8009b4c:	2b00      	cmp	r3, #0
 8009b4e:	d0f1      	beq.n	8009b34 <HAL_RCC_OscConfig+0x1a8>
 8009b50:	e013      	b.n	8009b7a <HAL_RCC_OscConfig+0x1ee>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009b52:	f7fe f83f 	bl	8007bd4 <HAL_GetTick>
 8009b56:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8009b58:	e008      	b.n	8009b6c <HAL_RCC_OscConfig+0x1e0>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009b5a:	f7fe f83b 	bl	8007bd4 <HAL_GetTick>
 8009b5e:	4602      	mov	r2, r0
 8009b60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b62:	1ad3      	subs	r3, r2, r3
 8009b64:	2b64      	cmp	r3, #100	; 0x64
 8009b66:	d901      	bls.n	8009b6c <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 8009b68:	2303      	movs	r3, #3
 8009b6a:	e297      	b.n	800a09c <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_HSE_IsReady() != 0U)
 8009b6c:	f7ff fbbc 	bl	80092e8 <LL_RCC_HSE_IsReady>
 8009b70:	4603      	mov	r3, r0
 8009b72:	2b00      	cmp	r3, #0
 8009b74:	d1f1      	bne.n	8009b5a <HAL_RCC_OscConfig+0x1ce>
 8009b76:	e000      	b.n	8009b7a <HAL_RCC_OscConfig+0x1ee>
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009b78:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	681b      	ldr	r3, [r3, #0]
 8009b7e:	f003 0302 	and.w	r3, r3, #2
 8009b82:	2b00      	cmp	r3, #0
 8009b84:	d051      	beq.n	8009c2a <HAL_RCC_OscConfig+0x29e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009b86:	f7ff fd90 	bl	80096aa <LL_RCC_GetSysClkSource>
 8009b8a:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8009b8c:	f7ff fe96 	bl	80098bc <LL_RCC_PLL_GetMainSource>
 8009b90:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8009b92:	69bb      	ldr	r3, [r7, #24]
 8009b94:	2b04      	cmp	r3, #4
 8009b96:	d005      	beq.n	8009ba4 <HAL_RCC_OscConfig+0x218>
 8009b98:	69bb      	ldr	r3, [r7, #24]
 8009b9a:	2b0c      	cmp	r3, #12
 8009b9c:	d113      	bne.n	8009bc6 <HAL_RCC_OscConfig+0x23a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 8009b9e:	697b      	ldr	r3, [r7, #20]
 8009ba0:	2b02      	cmp	r3, #2
 8009ba2:	d110      	bne.n	8009bc6 <HAL_RCC_OscConfig+0x23a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009ba4:	f7ff fbd0 	bl	8009348 <LL_RCC_HSI_IsReady>
 8009ba8:	4603      	mov	r3, r0
 8009baa:	2b00      	cmp	r3, #0
 8009bac:	d005      	beq.n	8009bba <HAL_RCC_OscConfig+0x22e>
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	68db      	ldr	r3, [r3, #12]
 8009bb2:	2b00      	cmp	r3, #0
 8009bb4:	d101      	bne.n	8009bba <HAL_RCC_OscConfig+0x22e>
      {
        return HAL_ERROR;
 8009bb6:	2301      	movs	r3, #1
 8009bb8:	e270      	b.n	800a09c <HAL_RCC_OscConfig+0x710>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	691b      	ldr	r3, [r3, #16]
 8009bbe:	4618      	mov	r0, r3
 8009bc0:	f7ff fbd4 	bl	800936c <LL_RCC_HSI_SetCalibTrimming>
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009bc4:	e031      	b.n	8009c2a <HAL_RCC_OscConfig+0x29e>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	68db      	ldr	r3, [r3, #12]
 8009bca:	2b00      	cmp	r3, #0
 8009bcc:	d019      	beq.n	8009c02 <HAL_RCC_OscConfig+0x276>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8009bce:	f7ff fb9d 	bl	800930c <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009bd2:	f7fd ffff 	bl	8007bd4 <HAL_GetTick>
 8009bd6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8009bd8:	e008      	b.n	8009bec <HAL_RCC_OscConfig+0x260>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009bda:	f7fd fffb 	bl	8007bd4 <HAL_GetTick>
 8009bde:	4602      	mov	r2, r0
 8009be0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009be2:	1ad3      	subs	r3, r2, r3
 8009be4:	2b02      	cmp	r3, #2
 8009be6:	d901      	bls.n	8009bec <HAL_RCC_OscConfig+0x260>
          {
            return HAL_TIMEOUT;
 8009be8:	2303      	movs	r3, #3
 8009bea:	e257      	b.n	800a09c <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_HSI_IsReady() == 0U)
 8009bec:	f7ff fbac 	bl	8009348 <LL_RCC_HSI_IsReady>
 8009bf0:	4603      	mov	r3, r0
 8009bf2:	2b00      	cmp	r3, #0
 8009bf4:	d0f1      	beq.n	8009bda <HAL_RCC_OscConfig+0x24e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	691b      	ldr	r3, [r3, #16]
 8009bfa:	4618      	mov	r0, r3
 8009bfc:	f7ff fbb6 	bl	800936c <LL_RCC_HSI_SetCalibTrimming>
 8009c00:	e013      	b.n	8009c2a <HAL_RCC_OscConfig+0x29e>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8009c02:	f7ff fb92 	bl	800932a <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009c06:	f7fd ffe5 	bl	8007bd4 <HAL_GetTick>
 8009c0a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8009c0c:	e008      	b.n	8009c20 <HAL_RCC_OscConfig+0x294>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009c0e:	f7fd ffe1 	bl	8007bd4 <HAL_GetTick>
 8009c12:	4602      	mov	r2, r0
 8009c14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c16:	1ad3      	subs	r3, r2, r3
 8009c18:	2b02      	cmp	r3, #2
 8009c1a:	d901      	bls.n	8009c20 <HAL_RCC_OscConfig+0x294>
          {
            return HAL_TIMEOUT;
 8009c1c:	2303      	movs	r3, #3
 8009c1e:	e23d      	b.n	800a09c <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_HSI_IsReady() != 0U)
 8009c20:	f7ff fb92 	bl	8009348 <LL_RCC_HSI_IsReady>
 8009c24:	4603      	mov	r3, r0
 8009c26:	2b00      	cmp	r3, #0
 8009c28:	d1f1      	bne.n	8009c0e <HAL_RCC_OscConfig+0x282>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	681b      	ldr	r3, [r3, #0]
 8009c2e:	f003 0308 	and.w	r3, r3, #8
 8009c32:	2b00      	cmp	r3, #0
 8009c34:	d106      	bne.n	8009c44 <HAL_RCC_OscConfig+0x2b8>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	681b      	ldr	r3, [r3, #0]
 8009c3a:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8009c3e:	2b00      	cmp	r3, #0
 8009c40:	f000 80a3 	beq.w	8009d8a <HAL_RCC_OscConfig+0x3fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	695b      	ldr	r3, [r3, #20]
 8009c48:	2b00      	cmp	r3, #0
 8009c4a:	d076      	beq.n	8009d3a <HAL_RCC_OscConfig+0x3ae>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	681b      	ldr	r3, [r3, #0]
 8009c50:	f003 0310 	and.w	r3, r3, #16
 8009c54:	2b00      	cmp	r3, #0
 8009c56:	d046      	beq.n	8009ce6 <HAL_RCC_OscConfig+0x35a>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 8009c58:	f7ff fc49 	bl	80094ee <LL_RCC_LSI1_IsReady>
 8009c5c:	4603      	mov	r3, r0
 8009c5e:	2b00      	cmp	r3, #0
 8009c60:	d113      	bne.n	8009c8a <HAL_RCC_OscConfig+0x2fe>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 8009c62:	f7ff fc22 	bl	80094aa <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8009c66:	f7fd ffb5 	bl	8007bd4 <HAL_GetTick>
 8009c6a:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 8009c6c:	e008      	b.n	8009c80 <HAL_RCC_OscConfig+0x2f4>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8009c6e:	f7fd ffb1 	bl	8007bd4 <HAL_GetTick>
 8009c72:	4602      	mov	r2, r0
 8009c74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c76:	1ad3      	subs	r3, r2, r3
 8009c78:	2b02      	cmp	r3, #2
 8009c7a:	d901      	bls.n	8009c80 <HAL_RCC_OscConfig+0x2f4>
            {
              return HAL_TIMEOUT;
 8009c7c:	2303      	movs	r3, #3
 8009c7e:	e20d      	b.n	800a09c <HAL_RCC_OscConfig+0x710>
          while (LL_RCC_LSI1_IsReady() == 0U)
 8009c80:	f7ff fc35 	bl	80094ee <LL_RCC_LSI1_IsReady>
 8009c84:	4603      	mov	r3, r0
 8009c86:	2b00      	cmp	r3, #0
 8009c88:	d0f1      	beq.n	8009c6e <HAL_RCC_OscConfig+0x2e2>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 8009c8a:	f7ff fc42 	bl	8009512 <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009c8e:	f7fd ffa1 	bl	8007bd4 <HAL_GetTick>
 8009c92:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 8009c94:	e008      	b.n	8009ca8 <HAL_RCC_OscConfig+0x31c>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8009c96:	f7fd ff9d 	bl	8007bd4 <HAL_GetTick>
 8009c9a:	4602      	mov	r2, r0
 8009c9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c9e:	1ad3      	subs	r3, r2, r3
 8009ca0:	2b03      	cmp	r3, #3
 8009ca2:	d901      	bls.n	8009ca8 <HAL_RCC_OscConfig+0x31c>
          {
            return HAL_TIMEOUT;
 8009ca4:	2303      	movs	r3, #3
 8009ca6:	e1f9      	b.n	800a09c <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_LSI2_IsReady() == 0U)
 8009ca8:	f7ff fc55 	bl	8009556 <LL_RCC_LSI2_IsReady>
 8009cac:	4603      	mov	r3, r0
 8009cae:	2b00      	cmp	r3, #0
 8009cb0:	d0f1      	beq.n	8009c96 <HAL_RCC_OscConfig+0x30a>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	699b      	ldr	r3, [r3, #24]
 8009cb6:	4618      	mov	r0, r3
 8009cb8:	f7ff fc5f 	bl	800957a <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 8009cbc:	f7ff fc06 	bl	80094cc <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009cc0:	f7fd ff88 	bl	8007bd4 <HAL_GetTick>
 8009cc4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 8009cc6:	e008      	b.n	8009cda <HAL_RCC_OscConfig+0x34e>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8009cc8:	f7fd ff84 	bl	8007bd4 <HAL_GetTick>
 8009ccc:	4602      	mov	r2, r0
 8009cce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cd0:	1ad3      	subs	r3, r2, r3
 8009cd2:	2b02      	cmp	r3, #2
 8009cd4:	d901      	bls.n	8009cda <HAL_RCC_OscConfig+0x34e>
          {
            return HAL_TIMEOUT;
 8009cd6:	2303      	movs	r3, #3
 8009cd8:	e1e0      	b.n	800a09c <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_LSI1_IsReady() != 0U)
 8009cda:	f7ff fc08 	bl	80094ee <LL_RCC_LSI1_IsReady>
 8009cde:	4603      	mov	r3, r0
 8009ce0:	2b00      	cmp	r3, #0
 8009ce2:	d1f1      	bne.n	8009cc8 <HAL_RCC_OscConfig+0x33c>
 8009ce4:	e051      	b.n	8009d8a <HAL_RCC_OscConfig+0x3fe>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 8009ce6:	f7ff fbe0 	bl	80094aa <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009cea:	f7fd ff73 	bl	8007bd4 <HAL_GetTick>
 8009cee:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 8009cf0:	e008      	b.n	8009d04 <HAL_RCC_OscConfig+0x378>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8009cf2:	f7fd ff6f 	bl	8007bd4 <HAL_GetTick>
 8009cf6:	4602      	mov	r2, r0
 8009cf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cfa:	1ad3      	subs	r3, r2, r3
 8009cfc:	2b02      	cmp	r3, #2
 8009cfe:	d901      	bls.n	8009d04 <HAL_RCC_OscConfig+0x378>
          {
            return HAL_TIMEOUT;
 8009d00:	2303      	movs	r3, #3
 8009d02:	e1cb      	b.n	800a09c <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_LSI1_IsReady() == 0U)
 8009d04:	f7ff fbf3 	bl	80094ee <LL_RCC_LSI1_IsReady>
 8009d08:	4603      	mov	r3, r0
 8009d0a:	2b00      	cmp	r3, #0
 8009d0c:	d0f1      	beq.n	8009cf2 <HAL_RCC_OscConfig+0x366>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 8009d0e:	f7ff fc11 	bl	8009534 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 8009d12:	e00c      	b.n	8009d2e <HAL_RCC_OscConfig+0x3a2>
 8009d14:	20000014 	.word	0x20000014
 8009d18:	20000018 	.word	0x20000018
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8009d1c:	f7fd ff5a 	bl	8007bd4 <HAL_GetTick>
 8009d20:	4602      	mov	r2, r0
 8009d22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d24:	1ad3      	subs	r3, r2, r3
 8009d26:	2b03      	cmp	r3, #3
 8009d28:	d901      	bls.n	8009d2e <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8009d2a:	2303      	movs	r3, #3
 8009d2c:	e1b6      	b.n	800a09c <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_LSI2_IsReady() != 0U)
 8009d2e:	f7ff fc12 	bl	8009556 <LL_RCC_LSI2_IsReady>
 8009d32:	4603      	mov	r3, r0
 8009d34:	2b00      	cmp	r3, #0
 8009d36:	d1f1      	bne.n	8009d1c <HAL_RCC_OscConfig+0x390>
 8009d38:	e027      	b.n	8009d8a <HAL_RCC_OscConfig+0x3fe>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 8009d3a:	f7ff fbfb 	bl	8009534 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009d3e:	f7fd ff49 	bl	8007bd4 <HAL_GetTick>
 8009d42:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 8009d44:	e008      	b.n	8009d58 <HAL_RCC_OscConfig+0x3cc>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8009d46:	f7fd ff45 	bl	8007bd4 <HAL_GetTick>
 8009d4a:	4602      	mov	r2, r0
 8009d4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d4e:	1ad3      	subs	r3, r2, r3
 8009d50:	2b03      	cmp	r3, #3
 8009d52:	d901      	bls.n	8009d58 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8009d54:	2303      	movs	r3, #3
 8009d56:	e1a1      	b.n	800a09c <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_LSI2_IsReady() != 0U)
 8009d58:	f7ff fbfd 	bl	8009556 <LL_RCC_LSI2_IsReady>
 8009d5c:	4603      	mov	r3, r0
 8009d5e:	2b00      	cmp	r3, #0
 8009d60:	d1f1      	bne.n	8009d46 <HAL_RCC_OscConfig+0x3ba>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 8009d62:	f7ff fbb3 	bl	80094cc <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009d66:	f7fd ff35 	bl	8007bd4 <HAL_GetTick>
 8009d6a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 8009d6c:	e008      	b.n	8009d80 <HAL_RCC_OscConfig+0x3f4>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8009d6e:	f7fd ff31 	bl	8007bd4 <HAL_GetTick>
 8009d72:	4602      	mov	r2, r0
 8009d74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d76:	1ad3      	subs	r3, r2, r3
 8009d78:	2b02      	cmp	r3, #2
 8009d7a:	d901      	bls.n	8009d80 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8009d7c:	2303      	movs	r3, #3
 8009d7e:	e18d      	b.n	800a09c <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_LSI1_IsReady() != 0U)
 8009d80:	f7ff fbb5 	bl	80094ee <LL_RCC_LSI1_IsReady>
 8009d84:	4603      	mov	r3, r0
 8009d86:	2b00      	cmp	r3, #0
 8009d88:	d1f1      	bne.n	8009d6e <HAL_RCC_OscConfig+0x3e2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	681b      	ldr	r3, [r3, #0]
 8009d8e:	f003 0304 	and.w	r3, r3, #4
 8009d92:	2b00      	cmp	r3, #0
 8009d94:	d05b      	beq.n	8009e4e <HAL_RCC_OscConfig+0x4c2>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8009d96:	4bb5      	ldr	r3, [pc, #724]	; (800a06c <HAL_RCC_OscConfig+0x6e0>)
 8009d98:	681b      	ldr	r3, [r3, #0]
 8009d9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009d9e:	2b00      	cmp	r3, #0
 8009da0:	d114      	bne.n	8009dcc <HAL_RCC_OscConfig+0x440>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8009da2:	f7ff fa53 	bl	800924c <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8009da6:	f7fd ff15 	bl	8007bd4 <HAL_GetTick>
 8009daa:	6278      	str	r0, [r7, #36]	; 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8009dac:	e008      	b.n	8009dc0 <HAL_RCC_OscConfig+0x434>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009dae:	f7fd ff11 	bl	8007bd4 <HAL_GetTick>
 8009db2:	4602      	mov	r2, r0
 8009db4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009db6:	1ad3      	subs	r3, r2, r3
 8009db8:	2b02      	cmp	r3, #2
 8009dba:	d901      	bls.n	8009dc0 <HAL_RCC_OscConfig+0x434>
        {
          return HAL_TIMEOUT;
 8009dbc:	2303      	movs	r3, #3
 8009dbe:	e16d      	b.n	800a09c <HAL_RCC_OscConfig+0x710>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8009dc0:	4baa      	ldr	r3, [pc, #680]	; (800a06c <HAL_RCC_OscConfig+0x6e0>)
 8009dc2:	681b      	ldr	r3, [r3, #0]
 8009dc4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009dc8:	2b00      	cmp	r3, #0
 8009dca:	d0f0      	beq.n	8009dae <HAL_RCC_OscConfig+0x422>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	689b      	ldr	r3, [r3, #8]
 8009dd0:	2b01      	cmp	r3, #1
 8009dd2:	d102      	bne.n	8009dda <HAL_RCC_OscConfig+0x44e>
 8009dd4:	f7ff fb13 	bl	80093fe <LL_RCC_LSE_Enable>
 8009dd8:	e00c      	b.n	8009df4 <HAL_RCC_OscConfig+0x468>
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	689b      	ldr	r3, [r3, #8]
 8009dde:	2b05      	cmp	r3, #5
 8009de0:	d104      	bne.n	8009dec <HAL_RCC_OscConfig+0x460>
 8009de2:	f7ff fb2e 	bl	8009442 <LL_RCC_LSE_EnableBypass>
 8009de6:	f7ff fb0a 	bl	80093fe <LL_RCC_LSE_Enable>
 8009dea:	e003      	b.n	8009df4 <HAL_RCC_OscConfig+0x468>
 8009dec:	f7ff fb18 	bl	8009420 <LL_RCC_LSE_Disable>
 8009df0:	f7ff fb38 	bl	8009464 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	689b      	ldr	r3, [r3, #8]
 8009df8:	2b00      	cmp	r3, #0
 8009dfa:	d014      	beq.n	8009e26 <HAL_RCC_OscConfig+0x49a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009dfc:	f7fd feea 	bl	8007bd4 <HAL_GetTick>
 8009e00:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8009e02:	e00a      	b.n	8009e1a <HAL_RCC_OscConfig+0x48e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009e04:	f7fd fee6 	bl	8007bd4 <HAL_GetTick>
 8009e08:	4602      	mov	r2, r0
 8009e0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e0c:	1ad3      	subs	r3, r2, r3
 8009e0e:	f241 3288 	movw	r2, #5000	; 0x1388
 8009e12:	4293      	cmp	r3, r2
 8009e14:	d901      	bls.n	8009e1a <HAL_RCC_OscConfig+0x48e>
        {
          return HAL_TIMEOUT;
 8009e16:	2303      	movs	r3, #3
 8009e18:	e140      	b.n	800a09c <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_LSE_IsReady() == 0U)
 8009e1a:	f7ff fb34 	bl	8009486 <LL_RCC_LSE_IsReady>
 8009e1e:	4603      	mov	r3, r0
 8009e20:	2b00      	cmp	r3, #0
 8009e22:	d0ef      	beq.n	8009e04 <HAL_RCC_OscConfig+0x478>
 8009e24:	e013      	b.n	8009e4e <HAL_RCC_OscConfig+0x4c2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009e26:	f7fd fed5 	bl	8007bd4 <HAL_GetTick>
 8009e2a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8009e2c:	e00a      	b.n	8009e44 <HAL_RCC_OscConfig+0x4b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009e2e:	f7fd fed1 	bl	8007bd4 <HAL_GetTick>
 8009e32:	4602      	mov	r2, r0
 8009e34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e36:	1ad3      	subs	r3, r2, r3
 8009e38:	f241 3288 	movw	r2, #5000	; 0x1388
 8009e3c:	4293      	cmp	r3, r2
 8009e3e:	d901      	bls.n	8009e44 <HAL_RCC_OscConfig+0x4b8>
        {
          return HAL_TIMEOUT;
 8009e40:	2303      	movs	r3, #3
 8009e42:	e12b      	b.n	800a09c <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_LSE_IsReady() != 0U)
 8009e44:	f7ff fb1f 	bl	8009486 <LL_RCC_LSE_IsReady>
 8009e48:	4603      	mov	r3, r0
 8009e4a:	2b00      	cmp	r3, #0
 8009e4c:	d1ef      	bne.n	8009e2e <HAL_RCC_OscConfig+0x4a2>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	681b      	ldr	r3, [r3, #0]
 8009e52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009e56:	2b00      	cmp	r3, #0
 8009e58:	d02c      	beq.n	8009eb4 <HAL_RCC_OscConfig+0x528>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e5e:	2b00      	cmp	r3, #0
 8009e60:	d014      	beq.n	8009e8c <HAL_RCC_OscConfig+0x500>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8009e62:	f7ff fa98 	bl	8009396 <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009e66:	f7fd feb5 	bl	8007bd4 <HAL_GetTick>
 8009e6a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 8009e6c:	e008      	b.n	8009e80 <HAL_RCC_OscConfig+0x4f4>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8009e6e:	f7fd feb1 	bl	8007bd4 <HAL_GetTick>
 8009e72:	4602      	mov	r2, r0
 8009e74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e76:	1ad3      	subs	r3, r2, r3
 8009e78:	2b02      	cmp	r3, #2
 8009e7a:	d901      	bls.n	8009e80 <HAL_RCC_OscConfig+0x4f4>
        {
          return HAL_TIMEOUT;
 8009e7c:	2303      	movs	r3, #3
 8009e7e:	e10d      	b.n	800a09c <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_HSI48_IsReady() == 0U)
 8009e80:	f7ff faab 	bl	80093da <LL_RCC_HSI48_IsReady>
 8009e84:	4603      	mov	r3, r0
 8009e86:	2b00      	cmp	r3, #0
 8009e88:	d0f1      	beq.n	8009e6e <HAL_RCC_OscConfig+0x4e2>
 8009e8a:	e013      	b.n	8009eb4 <HAL_RCC_OscConfig+0x528>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8009e8c:	f7ff fa94 	bl	80093b8 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009e90:	f7fd fea0 	bl	8007bd4 <HAL_GetTick>
 8009e94:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 8009e96:	e008      	b.n	8009eaa <HAL_RCC_OscConfig+0x51e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8009e98:	f7fd fe9c 	bl	8007bd4 <HAL_GetTick>
 8009e9c:	4602      	mov	r2, r0
 8009e9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ea0:	1ad3      	subs	r3, r2, r3
 8009ea2:	2b02      	cmp	r3, #2
 8009ea4:	d901      	bls.n	8009eaa <HAL_RCC_OscConfig+0x51e>
        {
          return HAL_TIMEOUT;
 8009ea6:	2303      	movs	r3, #3
 8009ea8:	e0f8      	b.n	800a09c <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_HSI48_IsReady() != 0U)
 8009eaa:	f7ff fa96 	bl	80093da <LL_RCC_HSI48_IsReady>
 8009eae:	4603      	mov	r3, r0
 8009eb0:	2b00      	cmp	r3, #0
 8009eb2:	d1f1      	bne.n	8009e98 <HAL_RCC_OscConfig+0x50c>
#endif
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009eb8:	2b00      	cmp	r3, #0
 8009eba:	f000 80ee 	beq.w	800a09a <HAL_RCC_OscConfig+0x70e>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009ebe:	f7ff fbf4 	bl	80096aa <LL_RCC_GetSysClkSource>
 8009ec2:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 8009ec4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009ec8:	68db      	ldr	r3, [r3, #12]
 8009eca:	60fb      	str	r3, [r7, #12]
    
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ed0:	2b02      	cmp	r3, #2
 8009ed2:	f040 80af 	bne.w	800a034 <HAL_RCC_OscConfig+0x6a8>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
      
      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009ed6:	68fb      	ldr	r3, [r7, #12]
 8009ed8:	f003 0203 	and.w	r2, r3, #3
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009ee0:	429a      	cmp	r2, r3
 8009ee2:	d123      	bne.n	8009f2c <HAL_RCC_OscConfig+0x5a0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8009ee4:	68fb      	ldr	r3, [r7, #12]
 8009ee6:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009eee:	429a      	cmp	r2, r3
 8009ef0:	d11c      	bne.n	8009f2c <HAL_RCC_OscConfig+0x5a0>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8009ef2:	68fb      	ldr	r3, [r7, #12]
 8009ef4:	0a1b      	lsrs	r3, r3, #8
 8009ef6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8009efe:	429a      	cmp	r2, r3
 8009f00:	d114      	bne.n	8009f2c <HAL_RCC_OscConfig+0x5a0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8009f02:	68fb      	ldr	r3, [r7, #12]
 8009f04:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8009f0c:	429a      	cmp	r2, r3
 8009f0e:	d10d      	bne.n	8009f2c <HAL_RCC_OscConfig+0x5a0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8009f10:	68fb      	ldr	r3, [r7, #12]
 8009f12:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8009f1a:	429a      	cmp	r2, r3
 8009f1c:	d106      	bne.n	8009f2c <HAL_RCC_OscConfig+0x5a0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8009f1e:	68fb      	ldr	r3, [r7, #12]
 8009f20:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8009f28:	429a      	cmp	r2, r3
 8009f2a:	d05d      	beq.n	8009fe8 <HAL_RCC_OscConfig+0x65c>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8009f2c:	693b      	ldr	r3, [r7, #16]
 8009f2e:	2b0c      	cmp	r3, #12
 8009f30:	d058      	beq.n	8009fe4 <HAL_RCC_OscConfig+0x658>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8009f32:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009f36:	681b      	ldr	r3, [r3, #0]
 8009f38:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8009f3c:	2b00      	cmp	r3, #0
 8009f3e:	d001      	beq.n	8009f44 <HAL_RCC_OscConfig+0x5b8>

          {
            return HAL_ERROR;
 8009f40:	2301      	movs	r3, #1
 8009f42:	e0ab      	b.n	800a09c <HAL_RCC_OscConfig+0x710>
          }
          else
#endif
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8009f44:	f7ff fc74 	bl	8009830 <LL_RCC_PLL_Disable>
            
            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8009f48:	f7fd fe44 	bl	8007bd4 <HAL_GetTick>
 8009f4c:	6278      	str	r0, [r7, #36]	; 0x24
            
            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8009f4e:	e008      	b.n	8009f62 <HAL_RCC_OscConfig+0x5d6>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009f50:	f7fd fe40 	bl	8007bd4 <HAL_GetTick>
 8009f54:	4602      	mov	r2, r0
 8009f56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f58:	1ad3      	subs	r3, r2, r3
 8009f5a:	2b02      	cmp	r3, #2
 8009f5c:	d901      	bls.n	8009f62 <HAL_RCC_OscConfig+0x5d6>
              {
                return HAL_TIMEOUT;
 8009f5e:	2303      	movs	r3, #3
 8009f60:	e09c      	b.n	800a09c <HAL_RCC_OscConfig+0x710>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8009f62:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009f66:	681b      	ldr	r3, [r3, #0]
 8009f68:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009f6c:	2b00      	cmp	r3, #0
 8009f6e:	d1ef      	bne.n	8009f50 <HAL_RCC_OscConfig+0x5c4>
              }
            }
            
            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8009f70:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009f74:	68da      	ldr	r2, [r3, #12]
 8009f76:	4b3e      	ldr	r3, [pc, #248]	; (800a070 <HAL_RCC_OscConfig+0x6e4>)
 8009f78:	4013      	ands	r3, r2
 8009f7a:	687a      	ldr	r2, [r7, #4]
 8009f7c:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8009f7e:	687a      	ldr	r2, [r7, #4]
 8009f80:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8009f82:	4311      	orrs	r1, r2
 8009f84:	687a      	ldr	r2, [r7, #4]
 8009f86:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8009f88:	0212      	lsls	r2, r2, #8
 8009f8a:	4311      	orrs	r1, r2
 8009f8c:	687a      	ldr	r2, [r7, #4]
 8009f8e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8009f90:	4311      	orrs	r1, r2
 8009f92:	687a      	ldr	r2, [r7, #4]
 8009f94:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8009f96:	4311      	orrs	r1, r2
 8009f98:	687a      	ldr	r2, [r7, #4]
 8009f9a:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8009f9c:	430a      	orrs	r2, r1
 8009f9e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8009fa2:	4313      	orrs	r3, r2
 8009fa4:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
            
            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8009fa6:	f7ff fc34 	bl	8009812 <LL_RCC_PLL_Enable>
            
            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8009faa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009fae:	68db      	ldr	r3, [r3, #12]
 8009fb0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8009fb4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009fb8:	60d3      	str	r3, [r2, #12]
            
            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8009fba:	f7fd fe0b 	bl	8007bd4 <HAL_GetTick>
 8009fbe:	6278      	str	r0, [r7, #36]	; 0x24
            
            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8009fc0:	e008      	b.n	8009fd4 <HAL_RCC_OscConfig+0x648>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009fc2:	f7fd fe07 	bl	8007bd4 <HAL_GetTick>
 8009fc6:	4602      	mov	r2, r0
 8009fc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fca:	1ad3      	subs	r3, r2, r3
 8009fcc:	2b02      	cmp	r3, #2
 8009fce:	d901      	bls.n	8009fd4 <HAL_RCC_OscConfig+0x648>
              {
                return HAL_TIMEOUT;
 8009fd0:	2303      	movs	r3, #3
 8009fd2:	e063      	b.n	800a09c <HAL_RCC_OscConfig+0x710>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8009fd4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009fd8:	681b      	ldr	r3, [r3, #0]
 8009fda:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009fde:	2b00      	cmp	r3, #0
 8009fe0:	d0ef      	beq.n	8009fc2 <HAL_RCC_OscConfig+0x636>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8009fe2:	e05a      	b.n	800a09a <HAL_RCC_OscConfig+0x70e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8009fe4:	2301      	movs	r3, #1
 8009fe6:	e059      	b.n	800a09c <HAL_RCC_OscConfig+0x710>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8009fe8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009fec:	681b      	ldr	r3, [r3, #0]
 8009fee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009ff2:	2b00      	cmp	r3, #0
 8009ff4:	d151      	bne.n	800a09a <HAL_RCC_OscConfig+0x70e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8009ff6:	f7ff fc0c 	bl	8009812 <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8009ffa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009ffe:	68db      	ldr	r3, [r3, #12]
 800a000:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800a004:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a008:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800a00a:	f7fd fde3 	bl	8007bd4 <HAL_GetTick>
 800a00e:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800a010:	e008      	b.n	800a024 <HAL_RCC_OscConfig+0x698>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a012:	f7fd fddf 	bl	8007bd4 <HAL_GetTick>
 800a016:	4602      	mov	r2, r0
 800a018:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a01a:	1ad3      	subs	r3, r2, r3
 800a01c:	2b02      	cmp	r3, #2
 800a01e:	d901      	bls.n	800a024 <HAL_RCC_OscConfig+0x698>
            {
              return HAL_TIMEOUT;
 800a020:	2303      	movs	r3, #3
 800a022:	e03b      	b.n	800a09c <HAL_RCC_OscConfig+0x710>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800a024:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a028:	681b      	ldr	r3, [r3, #0]
 800a02a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a02e:	2b00      	cmp	r3, #0
 800a030:	d0ef      	beq.n	800a012 <HAL_RCC_OscConfig+0x686>
 800a032:	e032      	b.n	800a09a <HAL_RCC_OscConfig+0x70e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800a034:	693b      	ldr	r3, [r7, #16]
 800a036:	2b0c      	cmp	r3, #12
 800a038:	d02d      	beq.n	800a096 <HAL_RCC_OscConfig+0x70a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a03a:	f7ff fbf9 	bl	8009830 <LL_RCC_PLL_Disable>
        

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 800a03e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a042:	68db      	ldr	r3, [r3, #12]
 800a044:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800a048:	f023 0303 	bic.w	r3, r3, #3
 800a04c:	60d3      	str	r3, [r2, #12]

#if defined(SAI1) && defined(USB)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_USBCLK | RCC_PLL_SAI1CLK);
 800a04e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a052:	68db      	ldr	r3, [r3, #12]
 800a054:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800a058:	f023 5388 	bic.w	r3, r3, #285212672	; 0x11000000
 800a05c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a060:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK);
#endif

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a062:	f7fd fdb7 	bl	8007bd4 <HAL_GetTick>
 800a066:	6278      	str	r0, [r7, #36]	; 0x24
        
        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800a068:	e00d      	b.n	800a086 <HAL_RCC_OscConfig+0x6fa>
 800a06a:	bf00      	nop
 800a06c:	58000400 	.word	0x58000400
 800a070:	11c1808c 	.word	0x11c1808c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a074:	f7fd fdae 	bl	8007bd4 <HAL_GetTick>
 800a078:	4602      	mov	r2, r0
 800a07a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a07c:	1ad3      	subs	r3, r2, r3
 800a07e:	2b02      	cmp	r3, #2
 800a080:	d901      	bls.n	800a086 <HAL_RCC_OscConfig+0x6fa>
          {
            return HAL_TIMEOUT;
 800a082:	2303      	movs	r3, #3
 800a084:	e00a      	b.n	800a09c <HAL_RCC_OscConfig+0x710>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800a086:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a08a:	681b      	ldr	r3, [r3, #0]
 800a08c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a090:	2b00      	cmp	r3, #0
 800a092:	d1ef      	bne.n	800a074 <HAL_RCC_OscConfig+0x6e8>
 800a094:	e001      	b.n	800a09a <HAL_RCC_OscConfig+0x70e>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800a096:	2301      	movs	r3, #1
 800a098:	e000      	b.n	800a09c <HAL_RCC_OscConfig+0x710>
      }
    }
  }
  return HAL_OK;
 800a09a:	2300      	movs	r3, #0
}
 800a09c:	4618      	mov	r0, r3
 800a09e:	3734      	adds	r7, #52	; 0x34
 800a0a0:	46bd      	mov	sp, r7
 800a0a2:	bd90      	pop	{r4, r7, pc}

0800a0a4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800a0a4:	b580      	push	{r7, lr}
 800a0a6:	b084      	sub	sp, #16
 800a0a8:	af00      	add	r7, sp, #0
 800a0aa:	6078      	str	r0, [r7, #4]
 800a0ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	2b00      	cmp	r3, #0
 800a0b2:	d101      	bne.n	800a0b8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800a0b4:	2301      	movs	r3, #1
 800a0b6:	e12d      	b.n	800a314 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800a0b8:	4b98      	ldr	r3, [pc, #608]	; (800a31c <HAL_RCC_ClockConfig+0x278>)
 800a0ba:	681b      	ldr	r3, [r3, #0]
 800a0bc:	f003 0307 	and.w	r3, r3, #7
 800a0c0:	683a      	ldr	r2, [r7, #0]
 800a0c2:	429a      	cmp	r2, r3
 800a0c4:	d91b      	bls.n	800a0fe <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a0c6:	4b95      	ldr	r3, [pc, #596]	; (800a31c <HAL_RCC_ClockConfig+0x278>)
 800a0c8:	681b      	ldr	r3, [r3, #0]
 800a0ca:	f023 0207 	bic.w	r2, r3, #7
 800a0ce:	4993      	ldr	r1, [pc, #588]	; (800a31c <HAL_RCC_ClockConfig+0x278>)
 800a0d0:	683b      	ldr	r3, [r7, #0]
 800a0d2:	4313      	orrs	r3, r2
 800a0d4:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a0d6:	f7fd fd7d 	bl	8007bd4 <HAL_GetTick>
 800a0da:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a0dc:	e008      	b.n	800a0f0 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800a0de:	f7fd fd79 	bl	8007bd4 <HAL_GetTick>
 800a0e2:	4602      	mov	r2, r0
 800a0e4:	68fb      	ldr	r3, [r7, #12]
 800a0e6:	1ad3      	subs	r3, r2, r3
 800a0e8:	2b02      	cmp	r3, #2
 800a0ea:	d901      	bls.n	800a0f0 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 800a0ec:	2303      	movs	r3, #3
 800a0ee:	e111      	b.n	800a314 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a0f0:	4b8a      	ldr	r3, [pc, #552]	; (800a31c <HAL_RCC_ClockConfig+0x278>)
 800a0f2:	681b      	ldr	r3, [r3, #0]
 800a0f4:	f003 0307 	and.w	r3, r3, #7
 800a0f8:	683a      	ldr	r2, [r7, #0]
 800a0fa:	429a      	cmp	r2, r3
 800a0fc:	d1ef      	bne.n	800a0de <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	681b      	ldr	r3, [r3, #0]
 800a102:	f003 0302 	and.w	r3, r3, #2
 800a106:	2b00      	cmp	r3, #0
 800a108:	d016      	beq.n	800a138 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	689b      	ldr	r3, [r3, #8]
 800a10e:	4618      	mov	r0, r3
 800a110:	f7ff fad7 	bl	80096c2 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800a114:	f7fd fd5e 	bl	8007bd4 <HAL_GetTick>
 800a118:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800a11a:	e008      	b.n	800a12e <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800a11c:	f7fd fd5a 	bl	8007bd4 <HAL_GetTick>
 800a120:	4602      	mov	r2, r0
 800a122:	68fb      	ldr	r3, [r7, #12]
 800a124:	1ad3      	subs	r3, r2, r3
 800a126:	2b02      	cmp	r3, #2
 800a128:	d901      	bls.n	800a12e <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 800a12a:	2303      	movs	r3, #3
 800a12c:	e0f2      	b.n	800a314 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800a12e:	f7ff fbd1 	bl	80098d4 <LL_RCC_IsActiveFlag_HPRE>
 800a132:	4603      	mov	r3, r0
 800a134:	2b00      	cmp	r3, #0
 800a136:	d0f1      	beq.n	800a11c <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	681b      	ldr	r3, [r3, #0]
 800a13c:	f003 0320 	and.w	r3, r3, #32
 800a140:	2b00      	cmp	r3, #0
 800a142:	d016      	beq.n	800a172 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	695b      	ldr	r3, [r3, #20]
 800a148:	4618      	mov	r0, r3
 800a14a:	f7ff face 	bl	80096ea <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800a14e:	f7fd fd41 	bl	8007bd4 <HAL_GetTick>
 800a152:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 800a154:	e008      	b.n	800a168 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800a156:	f7fd fd3d 	bl	8007bd4 <HAL_GetTick>
 800a15a:	4602      	mov	r2, r0
 800a15c:	68fb      	ldr	r3, [r7, #12]
 800a15e:	1ad3      	subs	r3, r2, r3
 800a160:	2b02      	cmp	r3, #2
 800a162:	d901      	bls.n	800a168 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 800a164:	2303      	movs	r3, #3
 800a166:	e0d5      	b.n	800a314 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 800a168:	f7ff fbc6 	bl	80098f8 <LL_RCC_IsActiveFlag_C2HPRE>
 800a16c:	4603      	mov	r3, r0
 800a16e:	2b00      	cmp	r3, #0
 800a170:	d0f1      	beq.n	800a156 <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	681b      	ldr	r3, [r3, #0]
 800a176:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a17a:	2b00      	cmp	r3, #0
 800a17c:	d016      	beq.n	800a1ac <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	699b      	ldr	r3, [r3, #24]
 800a182:	4618      	mov	r0, r3
 800a184:	f7ff fac7 	bl	8009716 <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800a188:	f7fd fd24 	bl	8007bd4 <HAL_GetTick>
 800a18c:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 800a18e:	e008      	b.n	800a1a2 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800a190:	f7fd fd20 	bl	8007bd4 <HAL_GetTick>
 800a194:	4602      	mov	r2, r0
 800a196:	68fb      	ldr	r3, [r7, #12]
 800a198:	1ad3      	subs	r3, r2, r3
 800a19a:	2b02      	cmp	r3, #2
 800a19c:	d901      	bls.n	800a1a2 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 800a19e:	2303      	movs	r3, #3
 800a1a0:	e0b8      	b.n	800a314 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 800a1a2:	f7ff fbbc 	bl	800991e <LL_RCC_IsActiveFlag_SHDHPRE>
 800a1a6:	4603      	mov	r3, r0
 800a1a8:	2b00      	cmp	r3, #0
 800a1aa:	d0f1      	beq.n	800a190 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	681b      	ldr	r3, [r3, #0]
 800a1b0:	f003 0304 	and.w	r3, r3, #4
 800a1b4:	2b00      	cmp	r3, #0
 800a1b6:	d016      	beq.n	800a1e6 <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	68db      	ldr	r3, [r3, #12]
 800a1bc:	4618      	mov	r0, r3
 800a1be:	f7ff fac1 	bl	8009744 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800a1c2:	f7fd fd07 	bl	8007bd4 <HAL_GetTick>
 800a1c6:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 800a1c8:	e008      	b.n	800a1dc <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800a1ca:	f7fd fd03 	bl	8007bd4 <HAL_GetTick>
 800a1ce:	4602      	mov	r2, r0
 800a1d0:	68fb      	ldr	r3, [r7, #12]
 800a1d2:	1ad3      	subs	r3, r2, r3
 800a1d4:	2b02      	cmp	r3, #2
 800a1d6:	d901      	bls.n	800a1dc <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 800a1d8:	2303      	movs	r3, #3
 800a1da:	e09b      	b.n	800a314 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 800a1dc:	f7ff fbb2 	bl	8009944 <LL_RCC_IsActiveFlag_PPRE1>
 800a1e0:	4603      	mov	r3, r0
 800a1e2:	2b00      	cmp	r3, #0
 800a1e4:	d0f1      	beq.n	800a1ca <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	681b      	ldr	r3, [r3, #0]
 800a1ea:	f003 0308 	and.w	r3, r3, #8
 800a1ee:	2b00      	cmp	r3, #0
 800a1f0:	d017      	beq.n	800a222 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	691b      	ldr	r3, [r3, #16]
 800a1f6:	00db      	lsls	r3, r3, #3
 800a1f8:	4618      	mov	r0, r3
 800a1fa:	f7ff fab7 	bl	800976c <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800a1fe:	f7fd fce9 	bl	8007bd4 <HAL_GetTick>
 800a202:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 800a204:	e008      	b.n	800a218 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800a206:	f7fd fce5 	bl	8007bd4 <HAL_GetTick>
 800a20a:	4602      	mov	r2, r0
 800a20c:	68fb      	ldr	r3, [r7, #12]
 800a20e:	1ad3      	subs	r3, r2, r3
 800a210:	2b02      	cmp	r3, #2
 800a212:	d901      	bls.n	800a218 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 800a214:	2303      	movs	r3, #3
 800a216:	e07d      	b.n	800a314 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 800a218:	f7ff fba6 	bl	8009968 <LL_RCC_IsActiveFlag_PPRE2>
 800a21c:	4603      	mov	r3, r0
 800a21e:	2b00      	cmp	r3, #0
 800a220:	d0f1      	beq.n	800a206 <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	681b      	ldr	r3, [r3, #0]
 800a226:	f003 0301 	and.w	r3, r3, #1
 800a22a:	2b00      	cmp	r3, #0
 800a22c:	d043      	beq.n	800a2b6 <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	685b      	ldr	r3, [r3, #4]
 800a232:	2b02      	cmp	r3, #2
 800a234:	d106      	bne.n	800a244 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 800a236:	f7ff f857 	bl	80092e8 <LL_RCC_HSE_IsReady>
 800a23a:	4603      	mov	r3, r0
 800a23c:	2b00      	cmp	r3, #0
 800a23e:	d11e      	bne.n	800a27e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800a240:	2301      	movs	r3, #1
 800a242:	e067      	b.n	800a314 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	685b      	ldr	r3, [r3, #4]
 800a248:	2b03      	cmp	r3, #3
 800a24a:	d106      	bne.n	800a25a <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 800a24c:	f7ff faff 	bl	800984e <LL_RCC_PLL_IsReady>
 800a250:	4603      	mov	r3, r0
 800a252:	2b00      	cmp	r3, #0
 800a254:	d113      	bne.n	800a27e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800a256:	2301      	movs	r3, #1
 800a258:	e05c      	b.n	800a314 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	685b      	ldr	r3, [r3, #4]
 800a25e:	2b00      	cmp	r3, #0
 800a260:	d106      	bne.n	800a270 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 800a262:	f7ff f9bf 	bl	80095e4 <LL_RCC_MSI_IsReady>
 800a266:	4603      	mov	r3, r0
 800a268:	2b00      	cmp	r3, #0
 800a26a:	d108      	bne.n	800a27e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800a26c:	2301      	movs	r3, #1
 800a26e:	e051      	b.n	800a314 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 800a270:	f7ff f86a 	bl	8009348 <LL_RCC_HSI_IsReady>
 800a274:	4603      	mov	r3, r0
 800a276:	2b00      	cmp	r3, #0
 800a278:	d101      	bne.n	800a27e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800a27a:	2301      	movs	r3, #1
 800a27c:	e04a      	b.n	800a314 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	685b      	ldr	r3, [r3, #4]
 800a282:	4618      	mov	r0, r3
 800a284:	f7ff f9fd 	bl	8009682 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a288:	f7fd fca4 	bl	8007bd4 <HAL_GetTick>
 800a28c:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a28e:	e00a      	b.n	800a2a6 <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a290:	f7fd fca0 	bl	8007bd4 <HAL_GetTick>
 800a294:	4602      	mov	r2, r0
 800a296:	68fb      	ldr	r3, [r7, #12]
 800a298:	1ad3      	subs	r3, r2, r3
 800a29a:	f241 3288 	movw	r2, #5000	; 0x1388
 800a29e:	4293      	cmp	r3, r2
 800a2a0:	d901      	bls.n	800a2a6 <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 800a2a2:	2303      	movs	r3, #3
 800a2a4:	e036      	b.n	800a314 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a2a6:	f7ff fa00 	bl	80096aa <LL_RCC_GetSysClkSource>
 800a2aa:	4602      	mov	r2, r0
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	685b      	ldr	r3, [r3, #4]
 800a2b0:	009b      	lsls	r3, r3, #2
 800a2b2:	429a      	cmp	r2, r3
 800a2b4:	d1ec      	bne.n	800a290 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800a2b6:	4b19      	ldr	r3, [pc, #100]	; (800a31c <HAL_RCC_ClockConfig+0x278>)
 800a2b8:	681b      	ldr	r3, [r3, #0]
 800a2ba:	f003 0307 	and.w	r3, r3, #7
 800a2be:	683a      	ldr	r2, [r7, #0]
 800a2c0:	429a      	cmp	r2, r3
 800a2c2:	d21b      	bcs.n	800a2fc <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a2c4:	4b15      	ldr	r3, [pc, #84]	; (800a31c <HAL_RCC_ClockConfig+0x278>)
 800a2c6:	681b      	ldr	r3, [r3, #0]
 800a2c8:	f023 0207 	bic.w	r2, r3, #7
 800a2cc:	4913      	ldr	r1, [pc, #76]	; (800a31c <HAL_RCC_ClockConfig+0x278>)
 800a2ce:	683b      	ldr	r3, [r7, #0]
 800a2d0:	4313      	orrs	r3, r2
 800a2d2:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a2d4:	f7fd fc7e 	bl	8007bd4 <HAL_GetTick>
 800a2d8:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a2da:	e008      	b.n	800a2ee <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800a2dc:	f7fd fc7a 	bl	8007bd4 <HAL_GetTick>
 800a2e0:	4602      	mov	r2, r0
 800a2e2:	68fb      	ldr	r3, [r7, #12]
 800a2e4:	1ad3      	subs	r3, r2, r3
 800a2e6:	2b02      	cmp	r3, #2
 800a2e8:	d901      	bls.n	800a2ee <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 800a2ea:	2303      	movs	r3, #3
 800a2ec:	e012      	b.n	800a314 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a2ee:	4b0b      	ldr	r3, [pc, #44]	; (800a31c <HAL_RCC_ClockConfig+0x278>)
 800a2f0:	681b      	ldr	r3, [r3, #0]
 800a2f2:	f003 0307 	and.w	r3, r3, #7
 800a2f6:	683a      	ldr	r2, [r7, #0]
 800a2f8:	429a      	cmp	r2, r3
 800a2fa:	d1ef      	bne.n	800a2dc <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800a2fc:	f000 f87c 	bl	800a3f8 <HAL_RCC_GetHCLKFreq>
 800a300:	4602      	mov	r2, r0
 800a302:	4b07      	ldr	r3, [pc, #28]	; (800a320 <HAL_RCC_ClockConfig+0x27c>)
 800a304:	601a      	str	r2, [r3, #0]
  
  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 800a306:	f7fd fc71 	bl	8007bec <HAL_GetTickPrio>
 800a30a:	4603      	mov	r3, r0
 800a30c:	4618      	mov	r0, r3
 800a30e:	f7fc ff0f 	bl	8007130 <HAL_InitTick>
 800a312:	4603      	mov	r3, r0
}
 800a314:	4618      	mov	r0, r3
 800a316:	3710      	adds	r7, #16
 800a318:	46bd      	mov	sp, r7
 800a31a:	bd80      	pop	{r7, pc}
 800a31c:	58004000 	.word	0x58004000
 800a320:	20000014 	.word	0x20000014

0800a324 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800a324:	b590      	push	{r4, r7, lr}
 800a326:	b085      	sub	sp, #20
 800a328:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq, pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a32a:	f7ff f9be 	bl	80096aa <LL_RCC_GetSysClkSource>
 800a32e:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	2b00      	cmp	r3, #0
 800a334:	d10a      	bne.n	800a34c <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 800a336:	f7ff f97a 	bl	800962e <LL_RCC_MSI_GetRange>
 800a33a:	4603      	mov	r3, r0
 800a33c:	091b      	lsrs	r3, r3, #4
 800a33e:	f003 030f 	and.w	r3, r3, #15
 800a342:	4a2a      	ldr	r2, [pc, #168]	; (800a3ec <HAL_RCC_GetSysClockFreq+0xc8>)
 800a344:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a348:	60fb      	str	r3, [r7, #12]
 800a34a:	e04a      	b.n	800a3e2 <HAL_RCC_GetSysClockFreq+0xbe>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	2b04      	cmp	r3, #4
 800a350:	d102      	bne.n	800a358 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800a352:	4b27      	ldr	r3, [pc, #156]	; (800a3f0 <HAL_RCC_GetSysClockFreq+0xcc>)
 800a354:	60fb      	str	r3, [r7, #12]
 800a356:	e044      	b.n	800a3e2 <HAL_RCC_GetSysClockFreq+0xbe>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	2b08      	cmp	r3, #8
 800a35c:	d10a      	bne.n	800a374 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800a35e:	f7fe ff93 	bl	8009288 <LL_RCC_HSE_IsEnabledDiv2>
 800a362:	4603      	mov	r3, r0
 800a364:	2b01      	cmp	r3, #1
 800a366:	d102      	bne.n	800a36e <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 800a368:	4b21      	ldr	r3, [pc, #132]	; (800a3f0 <HAL_RCC_GetSysClockFreq+0xcc>)
 800a36a:	60fb      	str	r3, [r7, #12]
 800a36c:	e039      	b.n	800a3e2 <HAL_RCC_GetSysClockFreq+0xbe>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 800a36e:	4b21      	ldr	r3, [pc, #132]	; (800a3f4 <HAL_RCC_GetSysClockFreq+0xd0>)
 800a370:	60fb      	str	r3, [r7, #12]
 800a372:	e036      	b.n	800a3e2 <HAL_RCC_GetSysClockFreq+0xbe>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 800a374:	f7ff faa2 	bl	80098bc <LL_RCC_PLL_GetMainSource>
 800a378:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 800a37a:	683b      	ldr	r3, [r7, #0]
 800a37c:	2b02      	cmp	r3, #2
 800a37e:	d002      	beq.n	800a386 <HAL_RCC_GetSysClockFreq+0x62>
 800a380:	2b03      	cmp	r3, #3
 800a382:	d003      	beq.n	800a38c <HAL_RCC_GetSysClockFreq+0x68>
 800a384:	e00d      	b.n	800a3a2 <HAL_RCC_GetSysClockFreq+0x7e>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 800a386:	4b1a      	ldr	r3, [pc, #104]	; (800a3f0 <HAL_RCC_GetSysClockFreq+0xcc>)
 800a388:	60bb      	str	r3, [r7, #8]
        break;
 800a38a:	e015      	b.n	800a3b8 <HAL_RCC_GetSysClockFreq+0x94>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800a38c:	f7fe ff7c 	bl	8009288 <LL_RCC_HSE_IsEnabledDiv2>
 800a390:	4603      	mov	r3, r0
 800a392:	2b01      	cmp	r3, #1
 800a394:	d102      	bne.n	800a39c <HAL_RCC_GetSysClockFreq+0x78>
        {
          pllinputfreq = HSE_VALUE / 2U;
 800a396:	4b16      	ldr	r3, [pc, #88]	; (800a3f0 <HAL_RCC_GetSysClockFreq+0xcc>)
 800a398:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 800a39a:	e00d      	b.n	800a3b8 <HAL_RCC_GetSysClockFreq+0x94>
          pllinputfreq = HSE_VALUE;
 800a39c:	4b15      	ldr	r3, [pc, #84]	; (800a3f4 <HAL_RCC_GetSysClockFreq+0xd0>)
 800a39e:	60bb      	str	r3, [r7, #8]
        break;
 800a3a0:	e00a      	b.n	800a3b8 <HAL_RCC_GetSysClockFreq+0x94>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 800a3a2:	f7ff f944 	bl	800962e <LL_RCC_MSI_GetRange>
 800a3a6:	4603      	mov	r3, r0
 800a3a8:	091b      	lsrs	r3, r3, #4
 800a3aa:	f003 030f 	and.w	r3, r3, #15
 800a3ae:	4a0f      	ldr	r2, [pc, #60]	; (800a3ec <HAL_RCC_GetSysClockFreq+0xc8>)
 800a3b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a3b4:	60bb      	str	r3, [r7, #8]
        break;
 800a3b6:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
 800a3b8:	f7ff fa5b 	bl	8009872 <LL_RCC_PLL_GetN>
 800a3bc:	4602      	mov	r2, r0
 800a3be:	68bb      	ldr	r3, [r7, #8]
 800a3c0:	fb03 f402 	mul.w	r4, r3, r2
 800a3c4:	f7ff fa6e 	bl	80098a4 <LL_RCC_PLL_GetDivider>
 800a3c8:	4603      	mov	r3, r0
 800a3ca:	091b      	lsrs	r3, r3, #4
 800a3cc:	3301      	adds	r3, #1
 800a3ce:	fbb4 f4f3 	udiv	r4, r4, r3
 800a3d2:	f7ff fa5b 	bl	800988c <LL_RCC_PLL_GetR>
 800a3d6:	4603      	mov	r3, r0
 800a3d8:	0f5b      	lsrs	r3, r3, #29
 800a3da:	3301      	adds	r3, #1
 800a3dc:	fbb4 f3f3 	udiv	r3, r4, r3
 800a3e0:	60fb      	str	r3, [r7, #12]
  }

  return sysclockfreq;
 800a3e2:	68fb      	ldr	r3, [r7, #12]
}
 800a3e4:	4618      	mov	r0, r3
 800a3e6:	3714      	adds	r7, #20
 800a3e8:	46bd      	mov	sp, r7
 800a3ea:	bd90      	pop	{r4, r7, pc}
 800a3ec:	08019c34 	.word	0x08019c34
 800a3f0:	00f42400 	.word	0x00f42400
 800a3f4:	01e84800 	.word	0x01e84800

0800a3f8 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800a3f8:	b598      	push	{r3, r4, r7, lr}
 800a3fa:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 800a3fc:	f7ff ff92 	bl	800a324 <HAL_RCC_GetSysClockFreq>
 800a400:	4604      	mov	r4, r0
 800a402:	f7ff f9c7 	bl	8009794 <LL_RCC_GetAHBPrescaler>
 800a406:	4603      	mov	r3, r0
 800a408:	091b      	lsrs	r3, r3, #4
 800a40a:	f003 030f 	and.w	r3, r3, #15
 800a40e:	4a03      	ldr	r2, [pc, #12]	; (800a41c <HAL_RCC_GetHCLKFreq+0x24>)
 800a410:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a414:	fbb4 f3f3 	udiv	r3, r4, r3
}
 800a418:	4618      	mov	r0, r3
 800a41a:	bd98      	pop	{r3, r4, r7, pc}
 800a41c:	08019bd4 	.word	0x08019bd4

0800a420 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800a420:	b598      	push	{r3, r4, r7, lr}
 800a422:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 800a424:	f7ff ffe8 	bl	800a3f8 <HAL_RCC_GetHCLKFreq>
 800a428:	4604      	mov	r4, r0
 800a42a:	f7ff f9e6 	bl	80097fa <LL_RCC_GetAPB2Prescaler>
 800a42e:	4603      	mov	r3, r0
 800a430:	0adb      	lsrs	r3, r3, #11
 800a432:	f003 0307 	and.w	r3, r3, #7
 800a436:	4a04      	ldr	r2, [pc, #16]	; (800a448 <HAL_RCC_GetPCLK2Freq+0x28>)
 800a438:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a43c:	f003 031f 	and.w	r3, r3, #31
 800a440:	fa24 f303 	lsr.w	r3, r4, r3
}
 800a444:	4618      	mov	r0, r3
 800a446:	bd98      	pop	{r3, r4, r7, pc}
 800a448:	08019c14 	.word	0x08019c14

0800a44c <HAL_RCC_GetClockConfig>:
  *                           will be configured.
  * @param  pFLatency         Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800a44c:	b580      	push	{r7, lr}
 800a44e:	b082      	sub	sp, #8
 800a450:	af00      	add	r7, sp, #0
 800a452:	6078      	str	r0, [r7, #4]
 800a454:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2 |  \
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	226f      	movs	r2, #111	; 0x6f
 800a45a:	601a      	str	r2, [r3, #0]
                                  RCC_CLOCKTYPE_HCLK2 | RCC_CLOCKTYPE_HCLK4);

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = LL_RCC_GetSysClkSource();
 800a45c:	f7ff f925 	bl	80096aa <LL_RCC_GetSysClkSource>
 800a460:	4602      	mov	r2, r0
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = LL_RCC_GetAHBPrescaler();
 800a466:	f7ff f995 	bl	8009794 <LL_RCC_GetAHBPrescaler>
 800a46a:	4602      	mov	r2, r0
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = LL_RCC_GetAPB1Prescaler();
 800a470:	f7ff f9b7 	bl	80097e2 <LL_RCC_GetAPB1Prescaler>
 800a474:	4602      	mov	r2, r0
 800a476:	687b      	ldr	r3, [r7, #4]
 800a478:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = LL_RCC_GetAPB2Prescaler();
 800a47a:	f7ff f9be 	bl	80097fa <LL_RCC_GetAPB2Prescaler>
 800a47e:	4602      	mov	r2, r0
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	611a      	str	r2, [r3, #16]

  /* Get the AHBCLK2Divider configuration ------------------------------------*/
  RCC_ClkInitStruct->AHBCLK2Divider = LL_C2_RCC_GetAHBPrescaler();
 800a484:	f7ff f992 	bl	80097ac <LL_C2_RCC_GetAHBPrescaler>
 800a488:	4602      	mov	r2, r0
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	615a      	str	r2, [r3, #20]

  /* Get the AHBCLK4Divider configuration ------------------------------------*/
  RCC_ClkInitStruct->AHBCLK4Divider = LL_RCC_GetAHB4Prescaler();
 800a48e:	f7ff f99a 	bl	80097c6 <LL_RCC_GetAHB4Prescaler>
 800a492:	4602      	mov	r2, r0
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	619a      	str	r2, [r3, #24]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 800a498:	4b04      	ldr	r3, [pc, #16]	; (800a4ac <HAL_RCC_GetClockConfig+0x60>)
 800a49a:	681b      	ldr	r3, [r3, #0]
 800a49c:	f003 0207 	and.w	r2, r3, #7
 800a4a0:	683b      	ldr	r3, [r7, #0]
 800a4a2:	601a      	str	r2, [r3, #0]
}
 800a4a4:	bf00      	nop
 800a4a6:	3708      	adds	r7, #8
 800a4a8:	46bd      	mov	sp, r7
 800a4aa:	bd80      	pop	{r7, pc}
 800a4ac:	58004000 	.word	0x58004000

0800a4b0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 800a4b0:	b590      	push	{r4, r7, lr}
 800a4b2:	b085      	sub	sp, #20
 800a4b4:	af00      	add	r7, sp, #0
 800a4b6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	2bb0      	cmp	r3, #176	; 0xb0
 800a4bc:	d903      	bls.n	800a4c6 <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 800a4be:	4b15      	ldr	r3, [pc, #84]	; (800a514 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 800a4c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a4c2:	60fb      	str	r3, [r7, #12]
 800a4c4:	e007      	b.n	800a4d6 <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	091b      	lsrs	r3, r3, #4
 800a4ca:	f003 030f 	and.w	r3, r3, #15
 800a4ce:	4a11      	ldr	r2, [pc, #68]	; (800a514 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 800a4d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a4d4:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 800a4d6:	f7ff f976 	bl	80097c6 <LL_RCC_GetAHB4Prescaler>
 800a4da:	4603      	mov	r3, r0
 800a4dc:	091b      	lsrs	r3, r3, #4
 800a4de:	f003 030f 	and.w	r3, r3, #15
 800a4e2:	4a0d      	ldr	r2, [pc, #52]	; (800a518 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 800a4e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a4e8:	68fa      	ldr	r2, [r7, #12]
 800a4ea:	fbb2 f3f3 	udiv	r3, r2, r3
 800a4ee:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 800a4f0:	68bb      	ldr	r3, [r7, #8]
 800a4f2:	4a0a      	ldr	r2, [pc, #40]	; (800a51c <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 800a4f4:	fba2 2303 	umull	r2, r3, r2, r3
 800a4f8:	0c9c      	lsrs	r4, r3, #18
 800a4fa:	f7fe feb7 	bl	800926c <HAL_PWREx_GetVoltageRange>
 800a4fe:	4603      	mov	r3, r0
 800a500:	4619      	mov	r1, r3
 800a502:	4620      	mov	r0, r4
 800a504:	f000 f80c 	bl	800a520 <RCC_SetFlashLatency>
 800a508:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif
}
 800a50a:	4618      	mov	r0, r3
 800a50c:	3714      	adds	r7, #20
 800a50e:	46bd      	mov	sp, r7
 800a510:	bd90      	pop	{r4, r7, pc}
 800a512:	bf00      	nop
 800a514:	08019c34 	.word	0x08019c34
 800a518:	08019bd4 	.word	0x08019bd4
 800a51c:	431bde83 	.word	0x431bde83

0800a520 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 800a520:	b590      	push	{r4, r7, lr}
 800a522:	b093      	sub	sp, #76	; 0x4c
 800a524:	af00      	add	r7, sp, #0
 800a526:	6078      	str	r0, [r7, #4]
 800a528:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 800a52a:	4b39      	ldr	r3, [pc, #228]	; (800a610 <RCC_SetFlashLatency+0xf0>)
 800a52c:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800a530:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800a532:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 800a536:	4a37      	ldr	r2, [pc, #220]	; (800a614 <RCC_SetFlashLatency+0xf4>)
 800a538:	f107 031c 	add.w	r3, r7, #28
 800a53c:	ca07      	ldmia	r2, {r0, r1, r2}
 800a53e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 800a542:	4b35      	ldr	r3, [pc, #212]	; (800a618 <RCC_SetFlashLatency+0xf8>)
 800a544:	f107 040c 	add.w	r4, r7, #12
 800a548:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800a54a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 800a54e:	2300      	movs	r3, #0
 800a550:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 800a552:	683b      	ldr	r3, [r7, #0]
 800a554:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a558:	d11c      	bne.n	800a594 <RCC_SetFlashLatency+0x74>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800a55a:	2300      	movs	r3, #0
 800a55c:	643b      	str	r3, [r7, #64]	; 0x40
 800a55e:	e015      	b.n	800a58c <RCC_SetFlashLatency+0x6c>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 800a560:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a562:	009b      	lsls	r3, r3, #2
 800a564:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800a568:	4413      	add	r3, r2
 800a56a:	f853 3c20 	ldr.w	r3, [r3, #-32]
 800a56e:	687a      	ldr	r2, [r7, #4]
 800a570:	429a      	cmp	r2, r3
 800a572:	d808      	bhi.n	800a586 <RCC_SetFlashLatency+0x66>
      {
        latency = FLASH_LATENCY_RANGE[index];
 800a574:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a576:	009b      	lsls	r3, r3, #2
 800a578:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800a57c:	4413      	add	r3, r2
 800a57e:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 800a582:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 800a584:	e022      	b.n	800a5cc <RCC_SetFlashLatency+0xac>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800a586:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a588:	3301      	adds	r3, #1
 800a58a:	643b      	str	r3, [r7, #64]	; 0x40
 800a58c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a58e:	2b03      	cmp	r3, #3
 800a590:	d9e6      	bls.n	800a560 <RCC_SetFlashLatency+0x40>
 800a592:	e01b      	b.n	800a5cc <RCC_SetFlashLatency+0xac>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 800a594:	2300      	movs	r3, #0
 800a596:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a598:	e015      	b.n	800a5c6 <RCC_SetFlashLatency+0xa6>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 800a59a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a59c:	009b      	lsls	r3, r3, #2
 800a59e:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800a5a2:	4413      	add	r3, r2
 800a5a4:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 800a5a8:	687a      	ldr	r2, [r7, #4]
 800a5aa:	429a      	cmp	r2, r3
 800a5ac:	d808      	bhi.n	800a5c0 <RCC_SetFlashLatency+0xa0>
      {
        latency = FLASH_LATENCY_RANGE[index];
 800a5ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a5b0:	009b      	lsls	r3, r3, #2
 800a5b2:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800a5b6:	4413      	add	r3, r2
 800a5b8:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 800a5bc:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 800a5be:	e005      	b.n	800a5cc <RCC_SetFlashLatency+0xac>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 800a5c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a5c2:	3301      	adds	r3, #1
 800a5c4:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a5c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a5c8:	2b02      	cmp	r3, #2
 800a5ca:	d9e6      	bls.n	800a59a <RCC_SetFlashLatency+0x7a>
      break;
    }
  }
#endif

  __HAL_FLASH_SET_LATENCY(latency);
 800a5cc:	4b13      	ldr	r3, [pc, #76]	; (800a61c <RCC_SetFlashLatency+0xfc>)
 800a5ce:	681b      	ldr	r3, [r3, #0]
 800a5d0:	f023 0207 	bic.w	r2, r3, #7
 800a5d4:	4911      	ldr	r1, [pc, #68]	; (800a61c <RCC_SetFlashLatency+0xfc>)
 800a5d6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a5d8:	4313      	orrs	r3, r2
 800a5da:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800a5dc:	f7fd fafa 	bl	8007bd4 <HAL_GetTick>
 800a5e0:	63b8      	str	r0, [r7, #56]	; 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800a5e2:	e008      	b.n	800a5f6 <RCC_SetFlashLatency+0xd6>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800a5e4:	f7fd faf6 	bl	8007bd4 <HAL_GetTick>
 800a5e8:	4602      	mov	r2, r0
 800a5ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5ec:	1ad3      	subs	r3, r2, r3
 800a5ee:	2b02      	cmp	r3, #2
 800a5f0:	d901      	bls.n	800a5f6 <RCC_SetFlashLatency+0xd6>
    {
      return HAL_TIMEOUT;
 800a5f2:	2303      	movs	r3, #3
 800a5f4:	e007      	b.n	800a606 <RCC_SetFlashLatency+0xe6>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800a5f6:	4b09      	ldr	r3, [pc, #36]	; (800a61c <RCC_SetFlashLatency+0xfc>)
 800a5f8:	681b      	ldr	r3, [r3, #0]
 800a5fa:	f003 0307 	and.w	r3, r3, #7
 800a5fe:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a600:	429a      	cmp	r2, r3
 800a602:	d1ef      	bne.n	800a5e4 <RCC_SetFlashLatency+0xc4>
    }
  }
  return HAL_OK;
 800a604:	2300      	movs	r3, #0
}
 800a606:	4618      	mov	r0, r3
 800a608:	374c      	adds	r7, #76	; 0x4c
 800a60a:	46bd      	mov	sp, r7
 800a60c:	bd90      	pop	{r4, r7, pc}
 800a60e:	bf00      	nop
 800a610:	08018a10 	.word	0x08018a10
 800a614:	08018a20 	.word	0x08018a20
 800a618:	08018a2c 	.word	0x08018a2c
 800a61c:	58004000 	.word	0x58004000

0800a620 <LL_RCC_LSE_IsEnabled>:
{
 800a620:	b480      	push	{r7}
 800a622:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 800a624:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a628:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a62c:	f003 0301 	and.w	r3, r3, #1
 800a630:	2b01      	cmp	r3, #1
 800a632:	d101      	bne.n	800a638 <LL_RCC_LSE_IsEnabled+0x18>
 800a634:	2301      	movs	r3, #1
 800a636:	e000      	b.n	800a63a <LL_RCC_LSE_IsEnabled+0x1a>
 800a638:	2300      	movs	r3, #0
}
 800a63a:	4618      	mov	r0, r3
 800a63c:	46bd      	mov	sp, r7
 800a63e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a642:	4770      	bx	lr

0800a644 <LL_RCC_LSE_IsReady>:
{
 800a644:	b480      	push	{r7}
 800a646:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800a648:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a64c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a650:	f003 0302 	and.w	r3, r3, #2
 800a654:	2b02      	cmp	r3, #2
 800a656:	d101      	bne.n	800a65c <LL_RCC_LSE_IsReady+0x18>
 800a658:	2301      	movs	r3, #1
 800a65a:	e000      	b.n	800a65e <LL_RCC_LSE_IsReady+0x1a>
 800a65c:	2300      	movs	r3, #0
}
 800a65e:	4618      	mov	r0, r3
 800a660:	46bd      	mov	sp, r7
 800a662:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a666:	4770      	bx	lr

0800a668 <LL_RCC_SetRFWKPClockSource>:
{
 800a668:	b480      	push	{r7}
 800a66a:	b083      	sub	sp, #12
 800a66c:	af00      	add	r7, sp, #0
 800a66e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 800a670:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a674:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a678:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800a67c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	4313      	orrs	r3, r2
 800a684:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 800a688:	bf00      	nop
 800a68a:	370c      	adds	r7, #12
 800a68c:	46bd      	mov	sp, r7
 800a68e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a692:	4770      	bx	lr

0800a694 <LL_RCC_SetSMPSClockSource>:
{
 800a694:	b480      	push	{r7}
 800a696:	b083      	sub	sp, #12
 800a698:	af00      	add	r7, sp, #0
 800a69a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 800a69c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a6a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6a2:	f023 0203 	bic.w	r2, r3, #3
 800a6a6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	4313      	orrs	r3, r2
 800a6ae:	624b      	str	r3, [r1, #36]	; 0x24
}
 800a6b0:	bf00      	nop
 800a6b2:	370c      	adds	r7, #12
 800a6b4:	46bd      	mov	sp, r7
 800a6b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6ba:	4770      	bx	lr

0800a6bc <LL_RCC_SetSMPSPrescaler>:
{
 800a6bc:	b480      	push	{r7}
 800a6be:	b083      	sub	sp, #12
 800a6c0:	af00      	add	r7, sp, #0
 800a6c2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 800a6c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a6c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6ca:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800a6ce:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	4313      	orrs	r3, r2
 800a6d6:	624b      	str	r3, [r1, #36]	; 0x24
}
 800a6d8:	bf00      	nop
 800a6da:	370c      	adds	r7, #12
 800a6dc:	46bd      	mov	sp, r7
 800a6de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6e2:	4770      	bx	lr

0800a6e4 <LL_RCC_SetUSARTClockSource>:
{
 800a6e4:	b480      	push	{r7}
 800a6e6:	b083      	sub	sp, #12
 800a6e8:	af00      	add	r7, sp, #0
 800a6ea:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 800a6ec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a6f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a6f4:	f023 0203 	bic.w	r2, r3, #3
 800a6f8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	4313      	orrs	r3, r2
 800a700:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800a704:	bf00      	nop
 800a706:	370c      	adds	r7, #12
 800a708:	46bd      	mov	sp, r7
 800a70a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a70e:	4770      	bx	lr

0800a710 <LL_RCC_SetLPUARTClockSource>:
{
 800a710:	b480      	push	{r7}
 800a712:	b083      	sub	sp, #12
 800a714:	af00      	add	r7, sp, #0
 800a716:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 800a718:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a71c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a720:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800a724:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	4313      	orrs	r3, r2
 800a72c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800a730:	bf00      	nop
 800a732:	370c      	adds	r7, #12
 800a734:	46bd      	mov	sp, r7
 800a736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a73a:	4770      	bx	lr

0800a73c <LL_RCC_SetI2CClockSource>:
{
 800a73c:	b480      	push	{r7}
 800a73e:	b083      	sub	sp, #12
 800a740:	af00      	add	r7, sp, #0
 800a742:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 800a744:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a748:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	091b      	lsrs	r3, r3, #4
 800a750:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 800a754:	43db      	mvns	r3, r3
 800a756:	401a      	ands	r2, r3
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	011b      	lsls	r3, r3, #4
 800a75c:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 800a760:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800a764:	4313      	orrs	r3, r2
 800a766:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800a76a:	bf00      	nop
 800a76c:	370c      	adds	r7, #12
 800a76e:	46bd      	mov	sp, r7
 800a770:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a774:	4770      	bx	lr

0800a776 <LL_RCC_SetLPTIMClockSource>:
{
 800a776:	b480      	push	{r7}
 800a778:	b083      	sub	sp, #12
 800a77a:	af00      	add	r7, sp, #0
 800a77c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 800a77e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a782:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	0c1b      	lsrs	r3, r3, #16
 800a78a:	041b      	lsls	r3, r3, #16
 800a78c:	43db      	mvns	r3, r3
 800a78e:	401a      	ands	r2, r3
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	041b      	lsls	r3, r3, #16
 800a794:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800a798:	4313      	orrs	r3, r2
 800a79a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800a79e:	bf00      	nop
 800a7a0:	370c      	adds	r7, #12
 800a7a2:	46bd      	mov	sp, r7
 800a7a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7a8:	4770      	bx	lr

0800a7aa <LL_RCC_SetSAIClockSource>:
{
 800a7aa:	b480      	push	{r7}
 800a7ac:	b083      	sub	sp, #12
 800a7ae:	af00      	add	r7, sp, #0
 800a7b0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 800a7b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a7b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a7ba:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800a7be:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	4313      	orrs	r3, r2
 800a7c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800a7ca:	bf00      	nop
 800a7cc:	370c      	adds	r7, #12
 800a7ce:	46bd      	mov	sp, r7
 800a7d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7d4:	4770      	bx	lr

0800a7d6 <LL_RCC_SetRNGClockSource>:
{
 800a7d6:	b480      	push	{r7}
 800a7d8:	b083      	sub	sp, #12
 800a7da:	af00      	add	r7, sp, #0
 800a7dc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 800a7de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a7e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a7e6:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 800a7ea:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	4313      	orrs	r3, r2
 800a7f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800a7f6:	bf00      	nop
 800a7f8:	370c      	adds	r7, #12
 800a7fa:	46bd      	mov	sp, r7
 800a7fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a800:	4770      	bx	lr

0800a802 <LL_RCC_SetCLK48ClockSource>:
{
 800a802:	b480      	push	{r7}
 800a804:	b083      	sub	sp, #12
 800a806:	af00      	add	r7, sp, #0
 800a808:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 800a80a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a80e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a812:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800a816:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	4313      	orrs	r3, r2
 800a81e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800a822:	bf00      	nop
 800a824:	370c      	adds	r7, #12
 800a826:	46bd      	mov	sp, r7
 800a828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a82c:	4770      	bx	lr

0800a82e <LL_RCC_SetUSBClockSource>:
{
 800a82e:	b580      	push	{r7, lr}
 800a830:	b082      	sub	sp, #8
 800a832:	af00      	add	r7, sp, #0
 800a834:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 800a836:	6878      	ldr	r0, [r7, #4]
 800a838:	f7ff ffe3 	bl	800a802 <LL_RCC_SetCLK48ClockSource>
}
 800a83c:	bf00      	nop
 800a83e:	3708      	adds	r7, #8
 800a840:	46bd      	mov	sp, r7
 800a842:	bd80      	pop	{r7, pc}

0800a844 <LL_RCC_SetADCClockSource>:
{
 800a844:	b480      	push	{r7}
 800a846:	b083      	sub	sp, #12
 800a848:	af00      	add	r7, sp, #0
 800a84a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 800a84c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a850:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a854:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800a858:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	4313      	orrs	r3, r2
 800a860:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800a864:	bf00      	nop
 800a866:	370c      	adds	r7, #12
 800a868:	46bd      	mov	sp, r7
 800a86a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a86e:	4770      	bx	lr

0800a870 <LL_RCC_SetRTCClockSource>:
{
 800a870:	b480      	push	{r7}
 800a872:	b083      	sub	sp, #12
 800a874:	af00      	add	r7, sp, #0
 800a876:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 800a878:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a87c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a880:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800a884:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	4313      	orrs	r3, r2
 800a88c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 800a890:	bf00      	nop
 800a892:	370c      	adds	r7, #12
 800a894:	46bd      	mov	sp, r7
 800a896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a89a:	4770      	bx	lr

0800a89c <LL_RCC_GetRTCClockSource>:
{
 800a89c:	b480      	push	{r7}
 800a89e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 800a8a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a8a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a8a8:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 800a8ac:	4618      	mov	r0, r3
 800a8ae:	46bd      	mov	sp, r7
 800a8b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8b4:	4770      	bx	lr

0800a8b6 <LL_RCC_ForceBackupDomainReset>:
{
 800a8b6:	b480      	push	{r7}
 800a8b8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800a8ba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a8be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a8c2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800a8c6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a8ca:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800a8ce:	bf00      	nop
 800a8d0:	46bd      	mov	sp, r7
 800a8d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8d6:	4770      	bx	lr

0800a8d8 <LL_RCC_ReleaseBackupDomainReset>:
{
 800a8d8:	b480      	push	{r7}
 800a8da:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800a8dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a8e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a8e4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800a8e8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a8ec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800a8f0:	bf00      	nop
 800a8f2:	46bd      	mov	sp, r7
 800a8f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8f8:	4770      	bx	lr

0800a8fa <LL_RCC_PLLSAI1_Enable>:
{
 800a8fa:	b480      	push	{r7}
 800a8fc:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 800a8fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a902:	681b      	ldr	r3, [r3, #0]
 800a904:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800a908:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800a90c:	6013      	str	r3, [r2, #0]
}
 800a90e:	bf00      	nop
 800a910:	46bd      	mov	sp, r7
 800a912:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a916:	4770      	bx	lr

0800a918 <LL_RCC_PLLSAI1_Disable>:
{
 800a918:	b480      	push	{r7}
 800a91a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 800a91c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a920:	681b      	ldr	r3, [r3, #0]
 800a922:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800a926:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800a92a:	6013      	str	r3, [r2, #0]
}
 800a92c:	bf00      	nop
 800a92e:	46bd      	mov	sp, r7
 800a930:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a934:	4770      	bx	lr

0800a936 <LL_RCC_PLLSAI1_IsReady>:
{
 800a936:	b480      	push	{r7}
 800a938:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 800a93a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a93e:	681b      	ldr	r3, [r3, #0]
 800a940:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a944:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a948:	d101      	bne.n	800a94e <LL_RCC_PLLSAI1_IsReady+0x18>
 800a94a:	2301      	movs	r3, #1
 800a94c:	e000      	b.n	800a950 <LL_RCC_PLLSAI1_IsReady+0x1a>
 800a94e:	2300      	movs	r3, #0
}
 800a950:	4618      	mov	r0, r3
 800a952:	46bd      	mov	sp, r7
 800a954:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a958:	4770      	bx	lr

0800a95a <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800a95a:	b580      	push	{r7, lr}
 800a95c:	b088      	sub	sp, #32
 800a95e:	af00      	add	r7, sp, #0
 800a960:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 800a962:	2300      	movs	r3, #0
 800a964:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 800a966:	2300      	movs	r3, #0
 800a968:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	681b      	ldr	r3, [r3, #0]
 800a96e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a972:	2b00      	cmp	r3, #0
 800a974:	d033      	beq.n	800a9de <HAL_RCCEx_PeriphCLKConfig+0x84>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 800a976:	687b      	ldr	r3, [r7, #4]
 800a978:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a97a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a97e:	d00c      	beq.n	800a99a <HAL_RCCEx_PeriphCLKConfig+0x40>
 800a980:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a984:	d802      	bhi.n	800a98c <HAL_RCCEx_PeriphCLKConfig+0x32>
 800a986:	2b00      	cmp	r3, #0
 800a988:	d010      	beq.n	800a9ac <HAL_RCCEx_PeriphCLKConfig+0x52>
 800a98a:	e017      	b.n	800a9bc <HAL_RCCEx_PeriphCLKConfig+0x62>
 800a98c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800a990:	d017      	beq.n	800a9c2 <HAL_RCCEx_PeriphCLKConfig+0x68>
 800a992:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800a996:	d016      	beq.n	800a9c6 <HAL_RCCEx_PeriphCLKConfig+0x6c>
 800a998:	e010      	b.n	800a9bc <HAL_RCCEx_PeriphCLKConfig+0x62>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 800a99a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a99e:	68db      	ldr	r3, [r3, #12]
 800a9a0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800a9a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a9a8:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 800a9aa:	e00d      	b.n	800a9c8 <HAL_RCCEx_PeriphCLKConfig+0x6e>

#if defined(SAI1)
      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	3304      	adds	r3, #4
 800a9b0:	4618      	mov	r0, r3
 800a9b2:	f000 f947 	bl	800ac44 <RCCEx_PLLSAI1_ConfigNP>
 800a9b6:	4603      	mov	r3, r0
 800a9b8:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 800a9ba:	e005      	b.n	800a9c8 <HAL_RCCEx_PeriphCLKConfig+0x6e>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 800a9bc:	2301      	movs	r3, #1
 800a9be:	77fb      	strb	r3, [r7, #31]
        break;
 800a9c0:	e002      	b.n	800a9c8 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        break;
 800a9c2:	bf00      	nop
 800a9c4:	e000      	b.n	800a9c8 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        break;
 800a9c6:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a9c8:	7ffb      	ldrb	r3, [r7, #31]
 800a9ca:	2b00      	cmp	r3, #0
 800a9cc:	d105      	bne.n	800a9da <HAL_RCCEx_PeriphCLKConfig+0x80>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a9d2:	4618      	mov	r0, r3
 800a9d4:	f7ff fee9 	bl	800a7aa <LL_RCC_SetSAIClockSource>
 800a9d8:	e001      	b.n	800a9de <HAL_RCCEx_PeriphCLKConfig+0x84>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a9da:	7ffb      	ldrb	r3, [r7, #31]
 800a9dc:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800a9de:	687b      	ldr	r3, [r7, #4]
 800a9e0:	681b      	ldr	r3, [r3, #0]
 800a9e2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a9e6:	2b00      	cmp	r3, #0
 800a9e8:	d046      	beq.n	800aa78 <HAL_RCCEx_PeriphCLKConfig+0x11e>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 800a9ea:	f7ff ff57 	bl	800a89c <LL_RCC_GetRTCClockSource>
 800a9ee:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a9f4:	69ba      	ldr	r2, [r7, #24]
 800a9f6:	429a      	cmp	r2, r3
 800a9f8:	d03c      	beq.n	800aa74 <HAL_RCCEx_PeriphCLKConfig+0x11a>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 800a9fa:	f7fe fc27 	bl	800924c <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 800a9fe:	69bb      	ldr	r3, [r7, #24]
 800aa00:	2b00      	cmp	r3, #0
 800aa02:	d105      	bne.n	800aa10 <HAL_RCCEx_PeriphCLKConfig+0xb6>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa08:	4618      	mov	r0, r3
 800aa0a:	f7ff ff31 	bl	800a870 <LL_RCC_SetRTCClockSource>
 800aa0e:	e02e      	b.n	800aa6e <HAL_RCCEx_PeriphCLKConfig+0x114>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 800aa10:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800aa14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800aa18:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 800aa1a:	f7ff ff4c 	bl	800a8b6 <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 800aa1e:	f7ff ff5b 	bl	800a8d8 <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 800aa22:	697b      	ldr	r3, [r7, #20]
 800aa24:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa2c:	4313      	orrs	r3, r2
 800aa2e:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 800aa30:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800aa34:	697b      	ldr	r3, [r7, #20]
 800aa36:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 800aa3a:	f7ff fdf1 	bl	800a620 <LL_RCC_LSE_IsEnabled>
 800aa3e:	4603      	mov	r3, r0
 800aa40:	2b01      	cmp	r3, #1
 800aa42:	d114      	bne.n	800aa6e <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800aa44:	f7fd f8c6 	bl	8007bd4 <HAL_GetTick>
 800aa48:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 800aa4a:	e00b      	b.n	800aa64 <HAL_RCCEx_PeriphCLKConfig+0x10a>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800aa4c:	f7fd f8c2 	bl	8007bd4 <HAL_GetTick>
 800aa50:	4602      	mov	r2, r0
 800aa52:	693b      	ldr	r3, [r7, #16]
 800aa54:	1ad3      	subs	r3, r2, r3
 800aa56:	f241 3288 	movw	r2, #5000	; 0x1388
 800aa5a:	4293      	cmp	r3, r2
 800aa5c:	d902      	bls.n	800aa64 <HAL_RCCEx_PeriphCLKConfig+0x10a>
            {
              ret = HAL_TIMEOUT;
 800aa5e:	2303      	movs	r3, #3
 800aa60:	77fb      	strb	r3, [r7, #31]
              break;
 800aa62:	e004      	b.n	800aa6e <HAL_RCCEx_PeriphCLKConfig+0x114>
          while (LL_RCC_LSE_IsReady() != 1U)
 800aa64:	f7ff fdee 	bl	800a644 <LL_RCC_LSE_IsReady>
 800aa68:	4603      	mov	r3, r0
 800aa6a:	2b01      	cmp	r3, #1
 800aa6c:	d1ee      	bne.n	800aa4c <HAL_RCCEx_PeriphCLKConfig+0xf2>
          }
        }
      }

      /* set overall return value */
      status = ret;
 800aa6e:	7ffb      	ldrb	r3, [r7, #31]
 800aa70:	77bb      	strb	r3, [r7, #30]
 800aa72:	e001      	b.n	800aa78 <HAL_RCCEx_PeriphCLKConfig+0x11e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aa74:	7ffb      	ldrb	r3, [r7, #31]
 800aa76:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	681b      	ldr	r3, [r3, #0]
 800aa7c:	f003 0301 	and.w	r3, r3, #1
 800aa80:	2b00      	cmp	r3, #0
 800aa82:	d004      	beq.n	800aa8e <HAL_RCCEx_PeriphCLKConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	699b      	ldr	r3, [r3, #24]
 800aa88:	4618      	mov	r0, r3
 800aa8a:	f7ff fe2b 	bl	800a6e4 <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	681b      	ldr	r3, [r3, #0]
 800aa92:	f003 0302 	and.w	r3, r3, #2
 800aa96:	2b00      	cmp	r3, #0
 800aa98:	d004      	beq.n	800aaa4 <HAL_RCCEx_PeriphCLKConfig+0x14a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	69db      	ldr	r3, [r3, #28]
 800aa9e:	4618      	mov	r0, r3
 800aaa0:	f7ff fe36 	bl	800a710 <LL_RCC_SetLPUARTClockSource>
  }
#endif

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	681b      	ldr	r3, [r3, #0]
 800aaa8:	f003 0310 	and.w	r3, r3, #16
 800aaac:	2b00      	cmp	r3, #0
 800aaae:	d004      	beq.n	800aaba <HAL_RCCEx_PeriphCLKConfig+0x160>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aab4:	4618      	mov	r0, r3
 800aab6:	f7ff fe5e 	bl	800a776 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800aaba:	687b      	ldr	r3, [r7, #4]
 800aabc:	681b      	ldr	r3, [r3, #0]
 800aabe:	f003 0320 	and.w	r3, r3, #32
 800aac2:	2b00      	cmp	r3, #0
 800aac4:	d004      	beq.n	800aad0 <HAL_RCCEx_PeriphCLKConfig+0x176>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800aac6:	687b      	ldr	r3, [r7, #4]
 800aac8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aaca:	4618      	mov	r0, r3
 800aacc:	f7ff fe53 	bl	800a776 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	681b      	ldr	r3, [r3, #0]
 800aad4:	f003 0304 	and.w	r3, r3, #4
 800aad8:	2b00      	cmp	r3, #0
 800aada:	d004      	beq.n	800aae6 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	6a1b      	ldr	r3, [r3, #32]
 800aae0:	4618      	mov	r0, r3
 800aae2:	f7ff fe2b 	bl	800a73c <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	681b      	ldr	r3, [r3, #0]
 800aaea:	f003 0308 	and.w	r3, r3, #8
 800aaee:	2b00      	cmp	r3, #0
 800aaf0:	d004      	beq.n	800aafc <HAL_RCCEx_PeriphCLKConfig+0x1a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800aaf2:	687b      	ldr	r3, [r7, #4]
 800aaf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aaf6:	4618      	mov	r0, r3
 800aaf8:	f7ff fe20 	bl	800a73c <LL_RCC_SetI2CClockSource>
  }
#endif

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	681b      	ldr	r3, [r3, #0]
 800ab00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ab04:	2b00      	cmp	r3, #0
 800ab06:	d022      	beq.n	800ab4e <HAL_RCCEx_PeriphCLKConfig+0x1f4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ab0c:	4618      	mov	r0, r3
 800ab0e:	f7ff fe8e 	bl	800a82e <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800ab12:	687b      	ldr	r3, [r7, #4]
 800ab14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ab16:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800ab1a:	d107      	bne.n	800ab2c <HAL_RCCEx_PeriphCLKConfig+0x1d2>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 800ab1c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800ab20:	68db      	ldr	r3, [r3, #12]
 800ab22:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800ab26:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800ab2a:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
  if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ab30:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800ab34:	d10b      	bne.n	800ab4e <HAL_RCCEx_PeriphCLKConfig+0x1f4>
  {
    /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
    ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 800ab36:	687b      	ldr	r3, [r7, #4]
 800ab38:	3304      	adds	r3, #4
 800ab3a:	4618      	mov	r0, r3
 800ab3c:	f000 f8dd 	bl	800acfa <RCCEx_PLLSAI1_ConfigNQ>
 800ab40:	4603      	mov	r3, r0
 800ab42:	77fb      	strb	r3, [r7, #31]

    if (ret != HAL_OK)
 800ab44:	7ffb      	ldrb	r3, [r7, #31]
 800ab46:	2b00      	cmp	r3, #0
 800ab48:	d001      	beq.n	800ab4e <HAL_RCCEx_PeriphCLKConfig+0x1f4>
    {
      /* set overall return value */
      status = ret;
 800ab4a:	7ffb      	ldrb	r3, [r7, #31]
 800ab4c:	77bb      	strb	r3, [r7, #30]
#endif
  }
#endif

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800ab4e:	687b      	ldr	r3, [r7, #4]
 800ab50:	681b      	ldr	r3, [r3, #0]
 800ab52:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800ab56:	2b00      	cmp	r3, #0
 800ab58:	d02b      	beq.n	800abb2 <HAL_RCCEx_PeriphCLKConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab5e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ab62:	d008      	beq.n	800ab76 <HAL_RCCEx_PeriphCLKConfig+0x21c>
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab68:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ab6c:	d003      	beq.n	800ab76 <HAL_RCCEx_PeriphCLKConfig+0x21c>
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab72:	2b00      	cmp	r3, #0
 800ab74:	d105      	bne.n	800ab82 <HAL_RCCEx_PeriphCLKConfig+0x228>
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab7a:	4618      	mov	r0, r3
 800ab7c:	f7ff fe2b 	bl	800a7d6 <LL_RCC_SetRNGClockSource>
 800ab80:	e00a      	b.n	800ab98 <HAL_RCCEx_PeriphCLKConfig+0x23e>
 800ab82:	687b      	ldr	r3, [r7, #4]
 800ab84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab86:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800ab8a:	60fb      	str	r3, [r7, #12]
 800ab8c:	2000      	movs	r0, #0
 800ab8e:	f7ff fe22 	bl	800a7d6 <LL_RCC_SetRNGClockSource>
 800ab92:	68f8      	ldr	r0, [r7, #12]
 800ab94:	f7ff fe35 	bl	800a802 <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab9c:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 800aba0:	d107      	bne.n	800abb2 <HAL_RCCEx_PeriphCLKConfig+0x258>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 800aba2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800aba6:	68db      	ldr	r3, [r3, #12]
 800aba8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800abac:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800abb0:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	681b      	ldr	r3, [r3, #0]
 800abb6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800abba:	2b00      	cmp	r3, #0
 800abbc:	d022      	beq.n	800ac04 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800abc2:	4618      	mov	r0, r3
 800abc4:	f7ff fe3e 	bl	800a844 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800abcc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800abd0:	d107      	bne.n	800abe2 <HAL_RCCEx_PeriphCLKConfig+0x288>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800abd2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800abd6:	68db      	ldr	r3, [r3, #12]
 800abd8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800abdc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800abe0:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
  if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800abe6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800abea:	d10b      	bne.n	800ac04 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
    ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	3304      	adds	r3, #4
 800abf0:	4618      	mov	r0, r3
 800abf2:	f000 f8dd 	bl	800adb0 <RCCEx_PLLSAI1_ConfigNR>
 800abf6:	4603      	mov	r3, r0
 800abf8:	77fb      	strb	r3, [r7, #31]

    if (ret != HAL_OK)
 800abfa:	7ffb      	ldrb	r3, [r7, #31]
 800abfc:	2b00      	cmp	r3, #0
 800abfe:	d001      	beq.n	800ac04 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
    {
      /* set overall return value */
      status = ret;
 800ac00:	7ffb      	ldrb	r3, [r7, #31]
 800ac02:	77bb      	strb	r3, [r7, #30]
  }
#endif
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	681b      	ldr	r3, [r3, #0]
 800ac08:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800ac0c:	2b00      	cmp	r3, #0
 800ac0e:	d004      	beq.n	800ac1a <HAL_RCCEx_PeriphCLKConfig+0x2c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ac14:	4618      	mov	r0, r3
 800ac16:	f7ff fd27 	bl	800a668 <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	681b      	ldr	r3, [r3, #0]
 800ac1e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800ac22:	2b00      	cmp	r3, #0
 800ac24:	d009      	beq.n	800ac3a <HAL_RCCEx_PeriphCLKConfig+0x2e0>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 800ac26:	687b      	ldr	r3, [r7, #4]
 800ac28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ac2a:	4618      	mov	r0, r3
 800ac2c:	f7ff fd46 	bl	800a6bc <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ac34:	4618      	mov	r0, r3
 800ac36:	f7ff fd2d 	bl	800a694 <LL_RCC_SetSMPSClockSource>
  }
#endif


  return status;
 800ac3a:	7fbb      	ldrb	r3, [r7, #30]
}
 800ac3c:	4618      	mov	r0, r3
 800ac3e:	3720      	adds	r7, #32
 800ac40:	46bd      	mov	sp, r7
 800ac42:	bd80      	pop	{r7, pc}

0800ac44 <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800ac44:	b580      	push	{r7, lr}
 800ac46:	b084      	sub	sp, #16
 800ac48:	af00      	add	r7, sp, #0
 800ac4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800ac4c:	2300      	movs	r3, #0
 800ac4e:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800ac50:	f7ff fe62 	bl	800a918 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800ac54:	f7fc ffbe 	bl	8007bd4 <HAL_GetTick>
 800ac58:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800ac5a:	e009      	b.n	800ac70 <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800ac5c:	f7fc ffba 	bl	8007bd4 <HAL_GetTick>
 800ac60:	4602      	mov	r2, r0
 800ac62:	68bb      	ldr	r3, [r7, #8]
 800ac64:	1ad3      	subs	r3, r2, r3
 800ac66:	2b02      	cmp	r3, #2
 800ac68:	d902      	bls.n	800ac70 <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 800ac6a:	2303      	movs	r3, #3
 800ac6c:	73fb      	strb	r3, [r7, #15]
      break;
 800ac6e:	e004      	b.n	800ac7a <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800ac70:	f7ff fe61 	bl	800a936 <LL_RCC_PLLSAI1_IsReady>
 800ac74:	4603      	mov	r3, r0
 800ac76:	2b00      	cmp	r3, #0
 800ac78:	d1f0      	bne.n	800ac5c <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 800ac7a:	7bfb      	ldrb	r3, [r7, #15]
 800ac7c:	2b00      	cmp	r3, #0
 800ac7e:	d137      	bne.n	800acf0 <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800ac80:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800ac84:	691b      	ldr	r3, [r3, #16]
 800ac86:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	681b      	ldr	r3, [r3, #0]
 800ac8e:	021b      	lsls	r3, r3, #8
 800ac90:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800ac94:	4313      	orrs	r3, r2
 800ac96:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 800ac98:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800ac9c:	691b      	ldr	r3, [r3, #16]
 800ac9e:	f423 1278 	bic.w	r2, r3, #4063232	; 0x3e0000
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	685b      	ldr	r3, [r3, #4]
 800aca6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800acaa:	4313      	orrs	r3, r2
 800acac:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800acae:	f7ff fe24 	bl	800a8fa <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800acb2:	f7fc ff8f 	bl	8007bd4 <HAL_GetTick>
 800acb6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800acb8:	e009      	b.n	800acce <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800acba:	f7fc ff8b 	bl	8007bd4 <HAL_GetTick>
 800acbe:	4602      	mov	r2, r0
 800acc0:	68bb      	ldr	r3, [r7, #8]
 800acc2:	1ad3      	subs	r3, r2, r3
 800acc4:	2b02      	cmp	r3, #2
 800acc6:	d902      	bls.n	800acce <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 800acc8:	2303      	movs	r3, #3
 800acca:	73fb      	strb	r3, [r7, #15]
        break;
 800accc:	e004      	b.n	800acd8 <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800acce:	f7ff fe32 	bl	800a936 <LL_RCC_PLLSAI1_IsReady>
 800acd2:	4603      	mov	r3, r0
 800acd4:	2b01      	cmp	r3, #1
 800acd6:	d1f0      	bne.n	800acba <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 800acd8:	7bfb      	ldrb	r3, [r7, #15]
 800acda:	2b00      	cmp	r3, #0
 800acdc:	d108      	bne.n	800acf0 <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800acde:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800ace2:	691a      	ldr	r2, [r3, #16]
 800ace4:	687b      	ldr	r3, [r7, #4]
 800ace6:	691b      	ldr	r3, [r3, #16]
 800ace8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800acec:	4313      	orrs	r3, r2
 800acee:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800acf0:	7bfb      	ldrb	r3, [r7, #15]
}
 800acf2:	4618      	mov	r0, r3
 800acf4:	3710      	adds	r7, #16
 800acf6:	46bd      	mov	sp, r7
 800acf8:	bd80      	pop	{r7, pc}

0800acfa <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800acfa:	b580      	push	{r7, lr}
 800acfc:	b084      	sub	sp, #16
 800acfe:	af00      	add	r7, sp, #0
 800ad00:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800ad02:	2300      	movs	r3, #0
 800ad04:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800ad06:	f7ff fe07 	bl	800a918 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800ad0a:	f7fc ff63 	bl	8007bd4 <HAL_GetTick>
 800ad0e:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800ad10:	e009      	b.n	800ad26 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800ad12:	f7fc ff5f 	bl	8007bd4 <HAL_GetTick>
 800ad16:	4602      	mov	r2, r0
 800ad18:	68bb      	ldr	r3, [r7, #8]
 800ad1a:	1ad3      	subs	r3, r2, r3
 800ad1c:	2b02      	cmp	r3, #2
 800ad1e:	d902      	bls.n	800ad26 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 800ad20:	2303      	movs	r3, #3
 800ad22:	73fb      	strb	r3, [r7, #15]
      break;
 800ad24:	e004      	b.n	800ad30 <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800ad26:	f7ff fe06 	bl	800a936 <LL_RCC_PLLSAI1_IsReady>
 800ad2a:	4603      	mov	r3, r0
 800ad2c:	2b00      	cmp	r3, #0
 800ad2e:	d1f0      	bne.n	800ad12 <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 800ad30:	7bfb      	ldrb	r3, [r7, #15]
 800ad32:	2b00      	cmp	r3, #0
 800ad34:	d137      	bne.n	800ada6 <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800ad36:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800ad3a:	691b      	ldr	r3, [r3, #16]
 800ad3c:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 800ad40:	687b      	ldr	r3, [r7, #4]
 800ad42:	681b      	ldr	r3, [r3, #0]
 800ad44:	021b      	lsls	r3, r3, #8
 800ad46:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800ad4a:	4313      	orrs	r3, r2
 800ad4c:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 800ad4e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800ad52:	691b      	ldr	r3, [r3, #16]
 800ad54:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	689b      	ldr	r3, [r3, #8]
 800ad5c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800ad60:	4313      	orrs	r3, r2
 800ad62:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800ad64:	f7ff fdc9 	bl	800a8fa <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ad68:	f7fc ff34 	bl	8007bd4 <HAL_GetTick>
 800ad6c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800ad6e:	e009      	b.n	800ad84 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800ad70:	f7fc ff30 	bl	8007bd4 <HAL_GetTick>
 800ad74:	4602      	mov	r2, r0
 800ad76:	68bb      	ldr	r3, [r7, #8]
 800ad78:	1ad3      	subs	r3, r2, r3
 800ad7a:	2b02      	cmp	r3, #2
 800ad7c:	d902      	bls.n	800ad84 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 800ad7e:	2303      	movs	r3, #3
 800ad80:	73fb      	strb	r3, [r7, #15]
        break;
 800ad82:	e004      	b.n	800ad8e <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800ad84:	f7ff fdd7 	bl	800a936 <LL_RCC_PLLSAI1_IsReady>
 800ad88:	4603      	mov	r3, r0
 800ad8a:	2b01      	cmp	r3, #1
 800ad8c:	d1f0      	bne.n	800ad70 <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 800ad8e:	7bfb      	ldrb	r3, [r7, #15]
 800ad90:	2b00      	cmp	r3, #0
 800ad92:	d108      	bne.n	800ada6 <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800ad94:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800ad98:	691a      	ldr	r2, [r3, #16]
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	691b      	ldr	r3, [r3, #16]
 800ad9e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800ada2:	4313      	orrs	r3, r2
 800ada4:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800ada6:	7bfb      	ldrb	r3, [r7, #15]
}
 800ada8:	4618      	mov	r0, r3
 800adaa:	3710      	adds	r7, #16
 800adac:	46bd      	mov	sp, r7
 800adae:	bd80      	pop	{r7, pc}

0800adb0 <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800adb0:	b580      	push	{r7, lr}
 800adb2:	b084      	sub	sp, #16
 800adb4:	af00      	add	r7, sp, #0
 800adb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800adb8:	2300      	movs	r3, #0
 800adba:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800adbc:	f7ff fdac 	bl	800a918 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800adc0:	f7fc ff08 	bl	8007bd4 <HAL_GetTick>
 800adc4:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800adc6:	e009      	b.n	800addc <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800adc8:	f7fc ff04 	bl	8007bd4 <HAL_GetTick>
 800adcc:	4602      	mov	r2, r0
 800adce:	68bb      	ldr	r3, [r7, #8]
 800add0:	1ad3      	subs	r3, r2, r3
 800add2:	2b02      	cmp	r3, #2
 800add4:	d902      	bls.n	800addc <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 800add6:	2303      	movs	r3, #3
 800add8:	73fb      	strb	r3, [r7, #15]
      break;
 800adda:	e004      	b.n	800ade6 <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800addc:	f7ff fdab 	bl	800a936 <LL_RCC_PLLSAI1_IsReady>
 800ade0:	4603      	mov	r3, r0
 800ade2:	2b00      	cmp	r3, #0
 800ade4:	d1f0      	bne.n	800adc8 <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 800ade6:	7bfb      	ldrb	r3, [r7, #15]
 800ade8:	2b00      	cmp	r3, #0
 800adea:	d137      	bne.n	800ae5c <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800adec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800adf0:	691b      	ldr	r3, [r3, #16]
 800adf2:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 800adf6:	687b      	ldr	r3, [r7, #4]
 800adf8:	681b      	ldr	r3, [r3, #0]
 800adfa:	021b      	lsls	r3, r3, #8
 800adfc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800ae00:	4313      	orrs	r3, r2
 800ae02:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 800ae04:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800ae08:	691b      	ldr	r3, [r3, #16]
 800ae0a:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 800ae0e:	687b      	ldr	r3, [r7, #4]
 800ae10:	68db      	ldr	r3, [r3, #12]
 800ae12:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800ae16:	4313      	orrs	r3, r2
 800ae18:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800ae1a:	f7ff fd6e 	bl	800a8fa <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ae1e:	f7fc fed9 	bl	8007bd4 <HAL_GetTick>
 800ae22:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800ae24:	e009      	b.n	800ae3a <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800ae26:	f7fc fed5 	bl	8007bd4 <HAL_GetTick>
 800ae2a:	4602      	mov	r2, r0
 800ae2c:	68bb      	ldr	r3, [r7, #8]
 800ae2e:	1ad3      	subs	r3, r2, r3
 800ae30:	2b02      	cmp	r3, #2
 800ae32:	d902      	bls.n	800ae3a <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 800ae34:	2303      	movs	r3, #3
 800ae36:	73fb      	strb	r3, [r7, #15]
        break;
 800ae38:	e004      	b.n	800ae44 <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800ae3a:	f7ff fd7c 	bl	800a936 <LL_RCC_PLLSAI1_IsReady>
 800ae3e:	4603      	mov	r3, r0
 800ae40:	2b01      	cmp	r3, #1
 800ae42:	d1f0      	bne.n	800ae26 <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 800ae44:	7bfb      	ldrb	r3, [r7, #15]
 800ae46:	2b00      	cmp	r3, #0
 800ae48:	d108      	bne.n	800ae5c <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800ae4a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800ae4e:	691a      	ldr	r2, [r3, #16]
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	691b      	ldr	r3, [r3, #16]
 800ae54:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800ae58:	4313      	orrs	r3, r2
 800ae5a:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800ae5c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ae5e:	4618      	mov	r0, r3
 800ae60:	3710      	adds	r7, #16
 800ae62:	46bd      	mov	sp, r7
 800ae64:	bd80      	pop	{r7, pc}

0800ae66 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800ae66:	b580      	push	{r7, lr}
 800ae68:	b082      	sub	sp, #8
 800ae6a:	af00      	add	r7, sp, #0
 800ae6c:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	2b00      	cmp	r3, #0
 800ae72:	d101      	bne.n	800ae78 <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 800ae74:	2301      	movs	r3, #1
 800ae76:	e090      	b.n	800af9a <HAL_RTC_Init+0x134>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800ae7e:	b2db      	uxtb	r3, r3
 800ae80:	2b00      	cmp	r3, #0
 800ae82:	d106      	bne.n	800ae92 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800ae84:	687b      	ldr	r3, [r7, #4]
 800ae86:	2200      	movs	r2, #0
 800ae88:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800ae8c:	6878      	ldr	r0, [r7, #4]
 800ae8e:	f7fc f86b 	bl	8006f68 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	2202      	movs	r2, #2
 800ae96:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	681b      	ldr	r3, [r3, #0]
 800ae9e:	22ca      	movs	r2, #202	; 0xca
 800aea0:	625a      	str	r2, [r3, #36]	; 0x24
 800aea2:	687b      	ldr	r3, [r7, #4]
 800aea4:	681b      	ldr	r3, [r3, #0]
 800aea6:	2253      	movs	r2, #83	; 0x53
 800aea8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800aeaa:	6878      	ldr	r0, [r7, #4]
 800aeac:	f000 faba 	bl	800b424 <RTC_EnterInitMode>
 800aeb0:	4603      	mov	r3, r0
 800aeb2:	2b00      	cmp	r3, #0
 800aeb4:	d009      	beq.n	800aeca <HAL_RTC_Init+0x64>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800aeb6:	687b      	ldr	r3, [r7, #4]
 800aeb8:	681b      	ldr	r3, [r3, #0]
 800aeba:	22ff      	movs	r2, #255	; 0xff
 800aebc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800aebe:	687b      	ldr	r3, [r7, #4]
 800aec0:	2204      	movs	r2, #4
 800aec2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    return HAL_ERROR;
 800aec6:	2301      	movs	r3, #1
 800aec8:	e067      	b.n	800af9a <HAL_RTC_Init+0x134>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	681b      	ldr	r3, [r3, #0]
 800aece:	689b      	ldr	r3, [r3, #8]
 800aed0:	687a      	ldr	r2, [r7, #4]
 800aed2:	6812      	ldr	r2, [r2, #0]
 800aed4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800aed8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800aedc:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	681b      	ldr	r3, [r3, #0]
 800aee2:	6899      	ldr	r1, [r3, #8]
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	685a      	ldr	r2, [r3, #4]
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	691b      	ldr	r3, [r3, #16]
 800aeec:	431a      	orrs	r2, r3
 800aeee:	687b      	ldr	r3, [r7, #4]
 800aef0:	699b      	ldr	r3, [r3, #24]
 800aef2:	431a      	orrs	r2, r3
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	681b      	ldr	r3, [r3, #0]
 800aef8:	430a      	orrs	r2, r1
 800aefa:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	681b      	ldr	r3, [r3, #0]
 800af00:	687a      	ldr	r2, [r7, #4]
 800af02:	68d2      	ldr	r2, [r2, #12]
 800af04:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 800af06:	687b      	ldr	r3, [r7, #4]
 800af08:	681b      	ldr	r3, [r3, #0]
 800af0a:	6919      	ldr	r1, [r3, #16]
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	689b      	ldr	r3, [r3, #8]
 800af10:	041a      	lsls	r2, r3, #16
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	681b      	ldr	r3, [r3, #0]
 800af16:	430a      	orrs	r2, r1
 800af18:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	681b      	ldr	r3, [r3, #0]
 800af1e:	68da      	ldr	r2, [r3, #12]
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	681b      	ldr	r3, [r3, #0]
 800af24:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800af28:	60da      	str	r2, [r3, #12]

    hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 800af2a:	687b      	ldr	r3, [r7, #4]
 800af2c:	681b      	ldr	r3, [r3, #0]
 800af2e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	681b      	ldr	r3, [r3, #0]
 800af34:	f022 0203 	bic.w	r2, r2, #3
 800af38:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800af3a:	687b      	ldr	r3, [r7, #4]
 800af3c:	681b      	ldr	r3, [r3, #0]
 800af3e:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	69da      	ldr	r2, [r3, #28]
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	695b      	ldr	r3, [r3, #20]
 800af48:	431a      	orrs	r2, r3
 800af4a:	687b      	ldr	r3, [r7, #4]
 800af4c:	681b      	ldr	r3, [r3, #0]
 800af4e:	430a      	orrs	r2, r1
 800af50:	64da      	str	r2, [r3, #76]	; 0x4c

    /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	681b      	ldr	r3, [r3, #0]
 800af56:	689b      	ldr	r3, [r3, #8]
 800af58:	f003 0320 	and.w	r3, r3, #32
 800af5c:	2b00      	cmp	r3, #0
 800af5e:	d113      	bne.n	800af88 <HAL_RTC_Init+0x122>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800af60:	6878      	ldr	r0, [r7, #4]
 800af62:	f000 fa39 	bl	800b3d8 <HAL_RTC_WaitForSynchro>
 800af66:	4603      	mov	r3, r0
 800af68:	2b00      	cmp	r3, #0
 800af6a:	d00d      	beq.n	800af88 <HAL_RTC_Init+0x122>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800af6c:	687b      	ldr	r3, [r7, #4]
 800af6e:	681b      	ldr	r3, [r3, #0]
 800af70:	22ff      	movs	r2, #255	; 0xff
 800af72:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	2204      	movs	r2, #4
 800af78:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */ 
        __HAL_UNLOCK(hrtc);
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	2200      	movs	r2, #0
 800af80:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800af84:	2301      	movs	r3, #1
 800af86:	e008      	b.n	800af9a <HAL_RTC_Init+0x134>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	681b      	ldr	r3, [r3, #0]
 800af8c:	22ff      	movs	r2, #255	; 0xff
 800af8e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	2201      	movs	r2, #1
 800af94:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    return HAL_OK;
 800af98:	2300      	movs	r3, #0
  }
}
 800af9a:	4618      	mov	r0, r3
 800af9c:	3708      	adds	r7, #8
 800af9e:	46bd      	mov	sp, r7
 800afa0:	bd80      	pop	{r7, pc}

0800afa2 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format 
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800afa2:	b590      	push	{r4, r7, lr}
 800afa4:	b087      	sub	sp, #28
 800afa6:	af00      	add	r7, sp, #0
 800afa8:	60f8      	str	r0, [r7, #12]
 800afaa:	60b9      	str	r1, [r7, #8]
 800afac:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */ 
  __HAL_LOCK(hrtc);
 800afae:	68fb      	ldr	r3, [r7, #12]
 800afb0:	f893 3020 	ldrb.w	r3, [r3, #32]
 800afb4:	2b01      	cmp	r3, #1
 800afb6:	d101      	bne.n	800afbc <HAL_RTC_SetTime+0x1a>
 800afb8:	2302      	movs	r3, #2
 800afba:	e0b2      	b.n	800b122 <HAL_RTC_SetTime+0x180>
 800afbc:	68fb      	ldr	r3, [r7, #12]
 800afbe:	2201      	movs	r2, #1
 800afc0:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800afc4:	68fb      	ldr	r3, [r7, #12]
 800afc6:	2202      	movs	r2, #2
 800afc8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if(Format == RTC_FORMAT_BIN)
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	2b00      	cmp	r3, #0
 800afd0:	d126      	bne.n	800b020 <HAL_RTC_SetTime+0x7e>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800afd2:	68fb      	ldr	r3, [r7, #12]
 800afd4:	681b      	ldr	r3, [r3, #0]
 800afd6:	689b      	ldr	r3, [r3, #8]
 800afd8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800afdc:	2b00      	cmp	r3, #0
 800afde:	d102      	bne.n	800afe6 <HAL_RTC_SetTime+0x44>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800afe0:	68bb      	ldr	r3, [r7, #8]
 800afe2:	2200      	movs	r2, #0
 800afe4:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800afe6:	68bb      	ldr	r3, [r7, #8]
 800afe8:	781b      	ldrb	r3, [r3, #0]
 800afea:	4618      	mov	r0, r3
 800afec:	f000 fa44 	bl	800b478 <RTC_ByteToBcd2>
 800aff0:	4603      	mov	r3, r0
 800aff2:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 800aff4:	68bb      	ldr	r3, [r7, #8]
 800aff6:	785b      	ldrb	r3, [r3, #1]
 800aff8:	4618      	mov	r0, r3
 800affa:	f000 fa3d 	bl	800b478 <RTC_ByteToBcd2>
 800affe:	4603      	mov	r3, r0
 800b000:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800b002:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 800b004:	68bb      	ldr	r3, [r7, #8]
 800b006:	789b      	ldrb	r3, [r3, #2]
 800b008:	4618      	mov	r0, r3
 800b00a:	f000 fa35 	bl	800b478 <RTC_ByteToBcd2>
 800b00e:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 800b010:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 800b014:	68bb      	ldr	r3, [r7, #8]
 800b016:	78db      	ldrb	r3, [r3, #3]
 800b018:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800b01a:	4313      	orrs	r3, r2
 800b01c:	617b      	str	r3, [r7, #20]
 800b01e:	e018      	b.n	800b052 <HAL_RTC_SetTime+0xb0>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800b020:	68fb      	ldr	r3, [r7, #12]
 800b022:	681b      	ldr	r3, [r3, #0]
 800b024:	689b      	ldr	r3, [r3, #8]
 800b026:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b02a:	2b00      	cmp	r3, #0
 800b02c:	d102      	bne.n	800b034 <HAL_RTC_SetTime+0x92>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800b02e:	68bb      	ldr	r3, [r7, #8]
 800b030:	2200      	movs	r2, #0
 800b032:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800b034:	68bb      	ldr	r3, [r7, #8]
 800b036:	781b      	ldrb	r3, [r3, #0]
 800b038:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 800b03a:	68bb      	ldr	r3, [r7, #8]
 800b03c:	785b      	ldrb	r3, [r3, #1]
 800b03e:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800b040:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 800b042:	68ba      	ldr	r2, [r7, #8]
 800b044:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 800b046:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 800b048:	68bb      	ldr	r3, [r7, #8]
 800b04a:	78db      	ldrb	r3, [r3, #3]
 800b04c:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800b04e:	4313      	orrs	r3, r2
 800b050:	617b      	str	r3, [r7, #20]
  }
  UNUSED(tmpreg);
  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800b052:	68fb      	ldr	r3, [r7, #12]
 800b054:	681b      	ldr	r3, [r3, #0]
 800b056:	22ca      	movs	r2, #202	; 0xca
 800b058:	625a      	str	r2, [r3, #36]	; 0x24
 800b05a:	68fb      	ldr	r3, [r7, #12]
 800b05c:	681b      	ldr	r3, [r3, #0]
 800b05e:	2253      	movs	r2, #83	; 0x53
 800b060:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800b062:	68f8      	ldr	r0, [r7, #12]
 800b064:	f000 f9de 	bl	800b424 <RTC_EnterInitMode>
 800b068:	4603      	mov	r3, r0
 800b06a:	2b00      	cmp	r3, #0
 800b06c:	d00d      	beq.n	800b08a <HAL_RTC_SetTime+0xe8>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800b06e:	68fb      	ldr	r3, [r7, #12]
 800b070:	681b      	ldr	r3, [r3, #0]
 800b072:	22ff      	movs	r2, #255	; 0xff
 800b074:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800b076:	68fb      	ldr	r3, [r7, #12]
 800b078:	2204      	movs	r2, #4
 800b07a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */ 
    __HAL_UNLOCK(hrtc);
 800b07e:	68fb      	ldr	r3, [r7, #12]
 800b080:	2200      	movs	r2, #0
 800b082:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_ERROR;
 800b086:	2301      	movs	r3, #1
 800b088:	e04b      	b.n	800b122 <HAL_RTC_SetTime+0x180>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800b08a:	68fb      	ldr	r3, [r7, #12]
 800b08c:	681a      	ldr	r2, [r3, #0]
 800b08e:	697b      	ldr	r3, [r7, #20]
 800b090:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800b094:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800b098:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 800b09a:	68fb      	ldr	r3, [r7, #12]
 800b09c:	681b      	ldr	r3, [r3, #0]
 800b09e:	689a      	ldr	r2, [r3, #8]
 800b0a0:	68fb      	ldr	r3, [r7, #12]
 800b0a2:	681b      	ldr	r3, [r3, #0]
 800b0a4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800b0a8:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800b0aa:	68fb      	ldr	r3, [r7, #12]
 800b0ac:	681b      	ldr	r3, [r3, #0]
 800b0ae:	6899      	ldr	r1, [r3, #8]
 800b0b0:	68bb      	ldr	r3, [r7, #8]
 800b0b2:	68da      	ldr	r2, [r3, #12]
 800b0b4:	68bb      	ldr	r3, [r7, #8]
 800b0b6:	691b      	ldr	r3, [r3, #16]
 800b0b8:	431a      	orrs	r2, r3
 800b0ba:	68fb      	ldr	r3, [r7, #12]
 800b0bc:	681b      	ldr	r3, [r3, #0]
 800b0be:	430a      	orrs	r2, r1
 800b0c0:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 800b0c2:	68fb      	ldr	r3, [r7, #12]
 800b0c4:	681b      	ldr	r3, [r3, #0]
 800b0c6:	68da      	ldr	r2, [r3, #12]
 800b0c8:	68fb      	ldr	r3, [r7, #12]
 800b0ca:	681b      	ldr	r3, [r3, #0]
 800b0cc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800b0d0:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 800b0d2:	68fb      	ldr	r3, [r7, #12]
 800b0d4:	681b      	ldr	r3, [r3, #0]
 800b0d6:	689b      	ldr	r3, [r3, #8]
 800b0d8:	f003 0320 	and.w	r3, r3, #32
 800b0dc:	2b00      	cmp	r3, #0
 800b0de:	d113      	bne.n	800b108 <HAL_RTC_SetTime+0x166>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800b0e0:	68f8      	ldr	r0, [r7, #12]
 800b0e2:	f000 f979 	bl	800b3d8 <HAL_RTC_WaitForSynchro>
 800b0e6:	4603      	mov	r3, r0
 800b0e8:	2b00      	cmp	r3, #0
 800b0ea:	d00d      	beq.n	800b108 <HAL_RTC_SetTime+0x166>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800b0ec:	68fb      	ldr	r3, [r7, #12]
 800b0ee:	681b      	ldr	r3, [r3, #0]
 800b0f0:	22ff      	movs	r2, #255	; 0xff
 800b0f2:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800b0f4:	68fb      	ldr	r3, [r7, #12]
 800b0f6:	2204      	movs	r2, #4
 800b0f8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */ 
        __HAL_UNLOCK(hrtc);
 800b0fc:	68fb      	ldr	r3, [r7, #12]
 800b0fe:	2200      	movs	r2, #0
 800b100:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800b104:	2301      	movs	r3, #1
 800b106:	e00c      	b.n	800b122 <HAL_RTC_SetTime+0x180>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800b108:	68fb      	ldr	r3, [r7, #12]
 800b10a:	681b      	ldr	r3, [r3, #0]
 800b10c:	22ff      	movs	r2, #255	; 0xff
 800b10e:	625a      	str	r2, [r3, #36]	; 0x24
    
   hrtc->State = HAL_RTC_STATE_READY;
 800b110:	68fb      	ldr	r3, [r7, #12]
 800b112:	2201      	movs	r2, #1
 800b114:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

   __HAL_UNLOCK(hrtc); 
 800b118:	68fb      	ldr	r3, [r7, #12]
 800b11a:	2200      	movs	r2, #0
 800b11c:	f883 2020 	strb.w	r2, [r3, #32]

   return HAL_OK;
 800b120:	2300      	movs	r3, #0
  }
}
 800b122:	4618      	mov	r0, r3
 800b124:	371c      	adds	r7, #28
 800b126:	46bd      	mov	sp, r7
 800b128:	bd90      	pop	{r4, r7, pc}

0800b12a <HAL_RTC_GetTime>:
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read
  *        to ensure consistency between the time and date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800b12a:	b580      	push	{r7, lr}
 800b12c:	b086      	sub	sp, #24
 800b12e:	af00      	add	r7, sp, #0
 800b130:	60f8      	str	r0, [r7, #12]
 800b132:	60b9      	str	r1, [r7, #8]
 800b134:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 800b136:	68fb      	ldr	r3, [r7, #12]
 800b138:	681b      	ldr	r3, [r3, #0]
 800b13a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b13c:	68bb      	ldr	r3, [r7, #8]
 800b13e:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800b140:	68fb      	ldr	r3, [r7, #12]
 800b142:	681b      	ldr	r3, [r3, #0]
 800b144:	691b      	ldr	r3, [r3, #16]
 800b146:	f3c3 020e 	ubfx	r2, r3, #0, #15
 800b14a:	68bb      	ldr	r3, [r7, #8]
 800b14c:	609a      	str	r2, [r3, #8]
  
  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 800b14e:	68fb      	ldr	r3, [r7, #12]
 800b150:	681b      	ldr	r3, [r3, #0]
 800b152:	681b      	ldr	r3, [r3, #0]
 800b154:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800b158:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800b15c:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 800b15e:	697b      	ldr	r3, [r7, #20]
 800b160:	0c1b      	lsrs	r3, r3, #16
 800b162:	b2db      	uxtb	r3, r3
 800b164:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b168:	b2da      	uxtb	r2, r3
 800b16a:	68bb      	ldr	r3, [r7, #8]
 800b16c:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >>8U);
 800b16e:	697b      	ldr	r3, [r7, #20]
 800b170:	0a1b      	lsrs	r3, r3, #8
 800b172:	b2db      	uxtb	r3, r3
 800b174:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b178:	b2da      	uxtb	r2, r3
 800b17a:	68bb      	ldr	r3, [r7, #8]
 800b17c:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 800b17e:	697b      	ldr	r3, [r7, #20]
 800b180:	b2db      	uxtb	r3, r3
 800b182:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b186:	b2da      	uxtb	r2, r3
 800b188:	68bb      	ldr	r3, [r7, #8]
 800b18a:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 800b18c:	697b      	ldr	r3, [r7, #20]
 800b18e:	0c1b      	lsrs	r3, r3, #16
 800b190:	b2db      	uxtb	r3, r3
 800b192:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b196:	b2da      	uxtb	r2, r3
 800b198:	68bb      	ldr	r3, [r7, #8]
 800b19a:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	2b00      	cmp	r3, #0
 800b1a0:	d11a      	bne.n	800b1d8 <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800b1a2:	68bb      	ldr	r3, [r7, #8]
 800b1a4:	781b      	ldrb	r3, [r3, #0]
 800b1a6:	4618      	mov	r0, r3
 800b1a8:	f000 f986 	bl	800b4b8 <RTC_Bcd2ToByte>
 800b1ac:	4603      	mov	r3, r0
 800b1ae:	461a      	mov	r2, r3
 800b1b0:	68bb      	ldr	r3, [r7, #8]
 800b1b2:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800b1b4:	68bb      	ldr	r3, [r7, #8]
 800b1b6:	785b      	ldrb	r3, [r3, #1]
 800b1b8:	4618      	mov	r0, r3
 800b1ba:	f000 f97d 	bl	800b4b8 <RTC_Bcd2ToByte>
 800b1be:	4603      	mov	r3, r0
 800b1c0:	461a      	mov	r2, r3
 800b1c2:	68bb      	ldr	r3, [r7, #8]
 800b1c4:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800b1c6:	68bb      	ldr	r3, [r7, #8]
 800b1c8:	789b      	ldrb	r3, [r3, #2]
 800b1ca:	4618      	mov	r0, r3
 800b1cc:	f000 f974 	bl	800b4b8 <RTC_Bcd2ToByte>
 800b1d0:	4603      	mov	r3, r0
 800b1d2:	461a      	mov	r2, r3
 800b1d4:	68bb      	ldr	r3, [r7, #8]
 800b1d6:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800b1d8:	2300      	movs	r3, #0
}
 800b1da:	4618      	mov	r0, r3
 800b1dc:	3718      	adds	r7, #24
 800b1de:	46bd      	mov	sp, r7
 800b1e0:	bd80      	pop	{r7, pc}

0800b1e2 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format 
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800b1e2:	b590      	push	{r4, r7, lr}
 800b1e4:	b087      	sub	sp, #28
 800b1e6:	af00      	add	r7, sp, #0
 800b1e8:	60f8      	str	r0, [r7, #12]
 800b1ea:	60b9      	str	r1, [r7, #8]
 800b1ec:	607a      	str	r2, [r7, #4]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 800b1ee:	68fb      	ldr	r3, [r7, #12]
 800b1f0:	f893 3020 	ldrb.w	r3, [r3, #32]
 800b1f4:	2b01      	cmp	r3, #1
 800b1f6:	d101      	bne.n	800b1fc <HAL_RTC_SetDate+0x1a>
 800b1f8:	2302      	movs	r3, #2
 800b1fa:	e09c      	b.n	800b336 <HAL_RTC_SetDate+0x154>
 800b1fc:	68fb      	ldr	r3, [r7, #12]
 800b1fe:	2201      	movs	r2, #1
 800b200:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800b204:	68fb      	ldr	r3, [r7, #12]
 800b206:	2202      	movs	r2, #2
 800b208:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	2b00      	cmp	r3, #0
 800b210:	d10e      	bne.n	800b230 <HAL_RTC_SetDate+0x4e>
 800b212:	68bb      	ldr	r3, [r7, #8]
 800b214:	785b      	ldrb	r3, [r3, #1]
 800b216:	f003 0310 	and.w	r3, r3, #16
 800b21a:	2b00      	cmp	r3, #0
 800b21c:	d008      	beq.n	800b230 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800b21e:	68bb      	ldr	r3, [r7, #8]
 800b220:	785b      	ldrb	r3, [r3, #1]
 800b222:	f023 0310 	bic.w	r3, r3, #16
 800b226:	b2db      	uxtb	r3, r3
 800b228:	330a      	adds	r3, #10
 800b22a:	b2da      	uxtb	r2, r3
 800b22c:	68bb      	ldr	r3, [r7, #8]
 800b22e:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	2b00      	cmp	r3, #0
 800b234:	d11c      	bne.n	800b270 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800b236:	68bb      	ldr	r3, [r7, #8]
 800b238:	78db      	ldrb	r3, [r3, #3]
 800b23a:	4618      	mov	r0, r3
 800b23c:	f000 f91c 	bl	800b478 <RTC_ByteToBcd2>
 800b240:	4603      	mov	r3, r0
 800b242:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 800b244:	68bb      	ldr	r3, [r7, #8]
 800b246:	785b      	ldrb	r3, [r3, #1]
 800b248:	4618      	mov	r0, r3
 800b24a:	f000 f915 	bl	800b478 <RTC_ByteToBcd2>
 800b24e:	4603      	mov	r3, r0
 800b250:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800b252:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 800b254:	68bb      	ldr	r3, [r7, #8]
 800b256:	789b      	ldrb	r3, [r3, #2]
 800b258:	4618      	mov	r0, r3
 800b25a:	f000 f90d 	bl	800b478 <RTC_ByteToBcd2>
 800b25e:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 800b260:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13U));
 800b264:	68bb      	ldr	r3, [r7, #8]
 800b266:	781b      	ldrb	r3, [r3, #0]
 800b268:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800b26a:	4313      	orrs	r3, r2
 800b26c:	617b      	str	r3, [r7, #20]
 800b26e:	e00e      	b.n	800b28e <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800b270:	68bb      	ldr	r3, [r7, #8]
 800b272:	78db      	ldrb	r3, [r3, #3]
 800b274:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 800b276:	68bb      	ldr	r3, [r7, #8]
 800b278:	785b      	ldrb	r3, [r3, #1]
 800b27a:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800b27c:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 800b27e:	68ba      	ldr	r2, [r7, #8]
 800b280:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 800b282:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 800b284:	68bb      	ldr	r3, [r7, #8]
 800b286:	781b      	ldrb	r3, [r3, #0]
 800b288:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800b28a:	4313      	orrs	r3, r2
 800b28c:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800b28e:	68fb      	ldr	r3, [r7, #12]
 800b290:	681b      	ldr	r3, [r3, #0]
 800b292:	22ca      	movs	r2, #202	; 0xca
 800b294:	625a      	str	r2, [r3, #36]	; 0x24
 800b296:	68fb      	ldr	r3, [r7, #12]
 800b298:	681b      	ldr	r3, [r3, #0]
 800b29a:	2253      	movs	r2, #83	; 0x53
 800b29c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800b29e:	68f8      	ldr	r0, [r7, #12]
 800b2a0:	f000 f8c0 	bl	800b424 <RTC_EnterInitMode>
 800b2a4:	4603      	mov	r3, r0
 800b2a6:	2b00      	cmp	r3, #0
 800b2a8:	d00d      	beq.n	800b2c6 <HAL_RTC_SetDate+0xe4>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800b2aa:	68fb      	ldr	r3, [r7, #12]
 800b2ac:	681b      	ldr	r3, [r3, #0]
 800b2ae:	22ff      	movs	r2, #255	; 0xff
 800b2b0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 800b2b2:	68fb      	ldr	r3, [r7, #12]
 800b2b4:	2204      	movs	r2, #4
 800b2b6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */ 
    __HAL_UNLOCK(hrtc);
 800b2ba:	68fb      	ldr	r3, [r7, #12]
 800b2bc:	2200      	movs	r2, #0
 800b2be:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_ERROR;
 800b2c2:	2301      	movs	r3, #1
 800b2c4:	e037      	b.n	800b336 <HAL_RTC_SetDate+0x154>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800b2c6:	68fb      	ldr	r3, [r7, #12]
 800b2c8:	681a      	ldr	r2, [r3, #0]
 800b2ca:	697b      	ldr	r3, [r7, #20]
 800b2cc:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800b2d0:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800b2d4:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 800b2d6:	68fb      	ldr	r3, [r7, #12]
 800b2d8:	681b      	ldr	r3, [r3, #0]
 800b2da:	68da      	ldr	r2, [r3, #12]
 800b2dc:	68fb      	ldr	r3, [r7, #12]
 800b2de:	681b      	ldr	r3, [r3, #0]
 800b2e0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800b2e4:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 800b2e6:	68fb      	ldr	r3, [r7, #12]
 800b2e8:	681b      	ldr	r3, [r3, #0]
 800b2ea:	689b      	ldr	r3, [r3, #8]
 800b2ec:	f003 0320 	and.w	r3, r3, #32
 800b2f0:	2b00      	cmp	r3, #0
 800b2f2:	d113      	bne.n	800b31c <HAL_RTC_SetDate+0x13a>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800b2f4:	68f8      	ldr	r0, [r7, #12]
 800b2f6:	f000 f86f 	bl	800b3d8 <HAL_RTC_WaitForSynchro>
 800b2fa:	4603      	mov	r3, r0
 800b2fc:	2b00      	cmp	r3, #0
 800b2fe:	d00d      	beq.n	800b31c <HAL_RTC_SetDate+0x13a>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);  
 800b300:	68fb      	ldr	r3, [r7, #12]
 800b302:	681b      	ldr	r3, [r3, #0]
 800b304:	22ff      	movs	r2, #255	; 0xff
 800b306:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800b308:	68fb      	ldr	r3, [r7, #12]
 800b30a:	2204      	movs	r2, #4
 800b30c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */ 
        __HAL_UNLOCK(hrtc);
 800b310:	68fb      	ldr	r3, [r7, #12]
 800b312:	2200      	movs	r2, #0
 800b314:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800b318:	2301      	movs	r3, #1
 800b31a:	e00c      	b.n	800b336 <HAL_RTC_SetDate+0x154>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800b31c:	68fb      	ldr	r3, [r7, #12]
 800b31e:	681b      	ldr	r3, [r3, #0]
 800b320:	22ff      	movs	r2, #255	; 0xff
 800b322:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 800b324:	68fb      	ldr	r3, [r7, #12]
 800b326:	2201      	movs	r2, #1
 800b328:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */ 
    __HAL_UNLOCK(hrtc);
 800b32c:	68fb      	ldr	r3, [r7, #12]
 800b32e:	2200      	movs	r2, #0
 800b330:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_OK;
 800b334:	2300      	movs	r3, #0
  }
}
 800b336:	4618      	mov	r0, r3
 800b338:	371c      	adds	r7, #28
 800b33a:	46bd      	mov	sp, r7
 800b33c:	bd90      	pop	{r4, r7, pc}

0800b33e <HAL_RTC_GetDate>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800b33e:	b580      	push	{r7, lr}
 800b340:	b086      	sub	sp, #24
 800b342:	af00      	add	r7, sp, #0
 800b344:	60f8      	str	r0, [r7, #12]
 800b346:	60b9      	str	r1, [r7, #8]
 800b348:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 800b34a:	68fb      	ldr	r3, [r7, #12]
 800b34c:	681b      	ldr	r3, [r3, #0]
 800b34e:	685b      	ldr	r3, [r3, #4]
 800b350:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800b354:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800b358:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 800b35a:	697b      	ldr	r3, [r7, #20]
 800b35c:	0c1b      	lsrs	r3, r3, #16
 800b35e:	b2da      	uxtb	r2, r3
 800b360:	68bb      	ldr	r3, [r7, #8]
 800b362:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 800b364:	697b      	ldr	r3, [r7, #20]
 800b366:	0a1b      	lsrs	r3, r3, #8
 800b368:	b2db      	uxtb	r3, r3
 800b36a:	f003 031f 	and.w	r3, r3, #31
 800b36e:	b2da      	uxtb	r2, r3
 800b370:	68bb      	ldr	r3, [r7, #8]
 800b372:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 800b374:	697b      	ldr	r3, [r7, #20]
 800b376:	b2db      	uxtb	r3, r3
 800b378:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b37c:	b2da      	uxtb	r2, r3
 800b37e:	68bb      	ldr	r3, [r7, #8]
 800b380:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U); 
 800b382:	697b      	ldr	r3, [r7, #20]
 800b384:	0b5b      	lsrs	r3, r3, #13
 800b386:	b2db      	uxtb	r3, r3
 800b388:	f003 0307 	and.w	r3, r3, #7
 800b38c:	b2da      	uxtb	r2, r3
 800b38e:	68bb      	ldr	r3, [r7, #8]
 800b390:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 800b392:	687b      	ldr	r3, [r7, #4]
 800b394:	2b00      	cmp	r3, #0
 800b396:	d11a      	bne.n	800b3ce <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800b398:	68bb      	ldr	r3, [r7, #8]
 800b39a:	78db      	ldrb	r3, [r3, #3]
 800b39c:	4618      	mov	r0, r3
 800b39e:	f000 f88b 	bl	800b4b8 <RTC_Bcd2ToByte>
 800b3a2:	4603      	mov	r3, r0
 800b3a4:	461a      	mov	r2, r3
 800b3a6:	68bb      	ldr	r3, [r7, #8]
 800b3a8:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800b3aa:	68bb      	ldr	r3, [r7, #8]
 800b3ac:	785b      	ldrb	r3, [r3, #1]
 800b3ae:	4618      	mov	r0, r3
 800b3b0:	f000 f882 	bl	800b4b8 <RTC_Bcd2ToByte>
 800b3b4:	4603      	mov	r3, r0
 800b3b6:	461a      	mov	r2, r3
 800b3b8:	68bb      	ldr	r3, [r7, #8]
 800b3ba:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800b3bc:	68bb      	ldr	r3, [r7, #8]
 800b3be:	789b      	ldrb	r3, [r3, #2]
 800b3c0:	4618      	mov	r0, r3
 800b3c2:	f000 f879 	bl	800b4b8 <RTC_Bcd2ToByte>
 800b3c6:	4603      	mov	r3, r0
 800b3c8:	461a      	mov	r2, r3
 800b3ca:	68bb      	ldr	r3, [r7, #8]
 800b3cc:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 800b3ce:	2300      	movs	r3, #0
}
 800b3d0:	4618      	mov	r0, r3
 800b3d2:	3718      	adds	r7, #24
 800b3d4:	46bd      	mov	sp, r7
 800b3d6:	bd80      	pop	{r7, pc}

0800b3d8 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 800b3d8:	b580      	push	{r7, lr}
 800b3da:	b084      	sub	sp, #16
 800b3dc:	af00      	add	r7, sp, #0
 800b3de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800b3e0:	687b      	ldr	r3, [r7, #4]
 800b3e2:	681b      	ldr	r3, [r3, #0]
 800b3e4:	68da      	ldr	r2, [r3, #12]
 800b3e6:	687b      	ldr	r3, [r7, #4]
 800b3e8:	681b      	ldr	r3, [r3, #0]
 800b3ea:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800b3ee:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 800b3f0:	f7fc fbf0 	bl	8007bd4 <HAL_GetTick>
 800b3f4:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800b3f6:	e009      	b.n	800b40c <HAL_RTC_WaitForSynchro+0x34>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800b3f8:	f7fc fbec 	bl	8007bd4 <HAL_GetTick>
 800b3fc:	4602      	mov	r2, r0
 800b3fe:	68fb      	ldr	r3, [r7, #12]
 800b400:	1ad3      	subs	r3, r2, r3
 800b402:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800b406:	d901      	bls.n	800b40c <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 800b408:	2303      	movs	r3, #3
 800b40a:	e007      	b.n	800b41c <HAL_RTC_WaitForSynchro+0x44>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	681b      	ldr	r3, [r3, #0]
 800b410:	68db      	ldr	r3, [r3, #12]
 800b412:	f003 0320 	and.w	r3, r3, #32
 800b416:	2b00      	cmp	r3, #0
 800b418:	d0ee      	beq.n	800b3f8 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 800b41a:	2300      	movs	r3, #0
}
 800b41c:	4618      	mov	r0, r3
 800b41e:	3710      	adds	r7, #16
 800b420:	46bd      	mov	sp, r7
 800b422:	bd80      	pop	{r7, pc}

0800b424 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 800b424:	b580      	push	{r7, lr}
 800b426:	b084      	sub	sp, #16
 800b428:	af00      	add	r7, sp, #0
 800b42a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800b42c:	687b      	ldr	r3, [r7, #4]
 800b42e:	681b      	ldr	r3, [r3, #0]
 800b430:	68db      	ldr	r3, [r3, #12]
 800b432:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b436:	2b00      	cmp	r3, #0
 800b438:	d119      	bne.n	800b46e <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800b43a:	687b      	ldr	r3, [r7, #4]
 800b43c:	681b      	ldr	r3, [r3, #0]
 800b43e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b442:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800b444:	f7fc fbc6 	bl	8007bd4 <HAL_GetTick>
 800b448:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800b44a:	e009      	b.n	800b460 <RTC_EnterInitMode+0x3c>
    {
      if((HAL_GetTick()  - tickstart ) > RTC_TIMEOUT_VALUE)
 800b44c:	f7fc fbc2 	bl	8007bd4 <HAL_GetTick>
 800b450:	4602      	mov	r2, r0
 800b452:	68fb      	ldr	r3, [r7, #12]
 800b454:	1ad3      	subs	r3, r2, r3
 800b456:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800b45a:	d901      	bls.n	800b460 <RTC_EnterInitMode+0x3c>
      {
        return HAL_TIMEOUT;
 800b45c:	2303      	movs	r3, #3
 800b45e:	e007      	b.n	800b470 <RTC_EnterInitMode+0x4c>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800b460:	687b      	ldr	r3, [r7, #4]
 800b462:	681b      	ldr	r3, [r3, #0]
 800b464:	68db      	ldr	r3, [r3, #12]
 800b466:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b46a:	2b00      	cmp	r3, #0
 800b46c:	d0ee      	beq.n	800b44c <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 800b46e:	2300      	movs	r3, #0
}
 800b470:	4618      	mov	r0, r3
 800b472:	3710      	adds	r7, #16
 800b474:	46bd      	mov	sp, r7
 800b476:	bd80      	pop	{r7, pc}

0800b478 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800b478:	b480      	push	{r7}
 800b47a:	b085      	sub	sp, #20
 800b47c:	af00      	add	r7, sp, #0
 800b47e:	4603      	mov	r3, r0
 800b480:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800b482:	2300      	movs	r3, #0
 800b484:	60fb      	str	r3, [r7, #12]
  uint8_t Param = Value;
 800b486:	79fb      	ldrb	r3, [r7, #7]
 800b488:	72fb      	strb	r3, [r7, #11]

  while(Param >= 10U)
 800b48a:	e005      	b.n	800b498 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 800b48c:	68fb      	ldr	r3, [r7, #12]
 800b48e:	3301      	adds	r3, #1
 800b490:	60fb      	str	r3, [r7, #12]
    Param -= 10U;
 800b492:	7afb      	ldrb	r3, [r7, #11]
 800b494:	3b0a      	subs	r3, #10
 800b496:	72fb      	strb	r3, [r7, #11]
  while(Param >= 10U)
 800b498:	7afb      	ldrb	r3, [r7, #11]
 800b49a:	2b09      	cmp	r3, #9
 800b49c:	d8f6      	bhi.n	800b48c <RTC_ByteToBcd2+0x14>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Param);
 800b49e:	68fb      	ldr	r3, [r7, #12]
 800b4a0:	b2db      	uxtb	r3, r3
 800b4a2:	011b      	lsls	r3, r3, #4
 800b4a4:	b2da      	uxtb	r2, r3
 800b4a6:	7afb      	ldrb	r3, [r7, #11]
 800b4a8:	4313      	orrs	r3, r2
 800b4aa:	b2db      	uxtb	r3, r3
}
 800b4ac:	4618      	mov	r0, r3
 800b4ae:	3714      	adds	r7, #20
 800b4b0:	46bd      	mov	sp, r7
 800b4b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4b6:	4770      	bx	lr

0800b4b8 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 800b4b8:	b480      	push	{r7}
 800b4ba:	b085      	sub	sp, #20
 800b4bc:	af00      	add	r7, sp, #0
 800b4be:	4603      	mov	r3, r0
 800b4c0:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp;
  tmp = (((uint32_t)Value & 0xF0U) >> 4U) * 10U;
 800b4c2:	79fb      	ldrb	r3, [r7, #7]
 800b4c4:	091b      	lsrs	r3, r3, #4
 800b4c6:	b2db      	uxtb	r3, r3
 800b4c8:	461a      	mov	r2, r3
 800b4ca:	4613      	mov	r3, r2
 800b4cc:	009b      	lsls	r3, r3, #2
 800b4ce:	4413      	add	r3, r2
 800b4d0:	005b      	lsls	r3, r3, #1
 800b4d2:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tmp + ((uint32_t)Value & 0x0FU));
 800b4d4:	68fb      	ldr	r3, [r7, #12]
 800b4d6:	b2da      	uxtb	r2, r3
 800b4d8:	79fb      	ldrb	r3, [r7, #7]
 800b4da:	f003 030f 	and.w	r3, r3, #15
 800b4de:	b2db      	uxtb	r3, r3
 800b4e0:	4413      	add	r3, r2
 800b4e2:	b2db      	uxtb	r3, r3
}
 800b4e4:	4618      	mov	r0, r3
 800b4e6:	3714      	adds	r7, #20
 800b4e8:	46bd      	mov	sp, r7
 800b4ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4ee:	4770      	bx	lr

0800b4f0 <HAL_RTCEx_EnableBypassShadow>:
  * @note   When the Bypass Shadow is enabled the calendar value are taken
  *         directly from the Calendar counter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_EnableBypassShadow(RTC_HandleTypeDef* hrtc)
{
 800b4f0:	b480      	push	{r7}
 800b4f2:	b083      	sub	sp, #12
 800b4f4:	af00      	add	r7, sp, #0
 800b4f6:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hrtc);
 800b4f8:	687b      	ldr	r3, [r7, #4]
 800b4fa:	f893 3020 	ldrb.w	r3, [r3, #32]
 800b4fe:	2b01      	cmp	r3, #1
 800b500:	d101      	bne.n	800b506 <HAL_RTCEx_EnableBypassShadow+0x16>
 800b502:	2302      	movs	r3, #2
 800b504:	e024      	b.n	800b550 <HAL_RTCEx_EnableBypassShadow+0x60>
 800b506:	687b      	ldr	r3, [r7, #4]
 800b508:	2201      	movs	r2, #1
 800b50a:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	2202      	movs	r2, #2
 800b512:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800b516:	687b      	ldr	r3, [r7, #4]
 800b518:	681b      	ldr	r3, [r3, #0]
 800b51a:	22ca      	movs	r2, #202	; 0xca
 800b51c:	625a      	str	r2, [r3, #36]	; 0x24
 800b51e:	687b      	ldr	r3, [r7, #4]
 800b520:	681b      	ldr	r3, [r3, #0]
 800b522:	2253      	movs	r2, #83	; 0x53
 800b524:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the BYPSHAD bit */
  hrtc->Instance->CR |= (uint8_t)RTC_CR_BYPSHAD;
 800b526:	687b      	ldr	r3, [r7, #4]
 800b528:	681b      	ldr	r3, [r3, #0]
 800b52a:	689a      	ldr	r2, [r3, #8]
 800b52c:	687b      	ldr	r3, [r7, #4]
 800b52e:	681b      	ldr	r3, [r3, #0]
 800b530:	f042 0220 	orr.w	r2, r2, #32
 800b534:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800b536:	687b      	ldr	r3, [r7, #4]
 800b538:	681b      	ldr	r3, [r3, #0]
 800b53a:	22ff      	movs	r2, #255	; 0xff
 800b53c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800b53e:	687b      	ldr	r3, [r7, #4]
 800b540:	2201      	movs	r2, #1
 800b542:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800b546:	687b      	ldr	r3, [r7, #4]
 800b548:	2200      	movs	r2, #0
 800b54a:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 800b54e:	2300      	movs	r3, #0
}
 800b550:	4618      	mov	r0, r3
 800b552:	370c      	adds	r7, #12
 800b554:	46bd      	mov	sp, r7
 800b556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b55a:	4770      	bx	lr

0800b55c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800b55c:	b580      	push	{r7, lr}
 800b55e:	b084      	sub	sp, #16
 800b560:	af00      	add	r7, sp, #0
 800b562:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800b564:	687b      	ldr	r3, [r7, #4]
 800b566:	2b00      	cmp	r3, #0
 800b568:	d101      	bne.n	800b56e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800b56a:	2301      	movs	r3, #1
 800b56c:	e095      	b.n	800b69a <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800b56e:	687b      	ldr	r3, [r7, #4]
 800b570:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b572:	2b00      	cmp	r3, #0
 800b574:	d108      	bne.n	800b588 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800b576:	687b      	ldr	r3, [r7, #4]
 800b578:	685b      	ldr	r3, [r3, #4]
 800b57a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800b57e:	d009      	beq.n	800b594 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800b580:	687b      	ldr	r3, [r7, #4]
 800b582:	2200      	movs	r2, #0
 800b584:	61da      	str	r2, [r3, #28]
 800b586:	e005      	b.n	800b594 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800b588:	687b      	ldr	r3, [r7, #4]
 800b58a:	2200      	movs	r2, #0
 800b58c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800b58e:	687b      	ldr	r3, [r7, #4]
 800b590:	2200      	movs	r2, #0
 800b592:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800b594:	687b      	ldr	r3, [r7, #4]
 800b596:	2200      	movs	r2, #0
 800b598:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800b59a:	687b      	ldr	r3, [r7, #4]
 800b59c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800b5a0:	b2db      	uxtb	r3, r3
 800b5a2:	2b00      	cmp	r3, #0
 800b5a4:	d106      	bne.n	800b5b4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800b5a6:	687b      	ldr	r3, [r7, #4]
 800b5a8:	2200      	movs	r2, #0
 800b5aa:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800b5ae:	6878      	ldr	r0, [r7, #4]
 800b5b0:	f7fb fd2c 	bl	800700c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800b5b4:	687b      	ldr	r3, [r7, #4]
 800b5b6:	2202      	movs	r2, #2
 800b5b8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800b5bc:	687b      	ldr	r3, [r7, #4]
 800b5be:	681b      	ldr	r3, [r3, #0]
 800b5c0:	681a      	ldr	r2, [r3, #0]
 800b5c2:	687b      	ldr	r3, [r7, #4]
 800b5c4:	681b      	ldr	r3, [r3, #0]
 800b5c6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b5ca:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800b5cc:	687b      	ldr	r3, [r7, #4]
 800b5ce:	68db      	ldr	r3, [r3, #12]
 800b5d0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800b5d4:	d902      	bls.n	800b5dc <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800b5d6:	2300      	movs	r3, #0
 800b5d8:	60fb      	str	r3, [r7, #12]
 800b5da:	e002      	b.n	800b5e2 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800b5dc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b5e0:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800b5e2:	687b      	ldr	r3, [r7, #4]
 800b5e4:	68db      	ldr	r3, [r3, #12]
 800b5e6:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800b5ea:	d007      	beq.n	800b5fc <HAL_SPI_Init+0xa0>
 800b5ec:	687b      	ldr	r3, [r7, #4]
 800b5ee:	68db      	ldr	r3, [r3, #12]
 800b5f0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800b5f4:	d002      	beq.n	800b5fc <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800b5f6:	687b      	ldr	r3, [r7, #4]
 800b5f8:	2200      	movs	r2, #0
 800b5fa:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800b5fc:	687b      	ldr	r3, [r7, #4]
 800b5fe:	685b      	ldr	r3, [r3, #4]
 800b600:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800b604:	687b      	ldr	r3, [r7, #4]
 800b606:	689b      	ldr	r3, [r3, #8]
 800b608:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800b60c:	431a      	orrs	r2, r3
 800b60e:	687b      	ldr	r3, [r7, #4]
 800b610:	691b      	ldr	r3, [r3, #16]
 800b612:	f003 0302 	and.w	r3, r3, #2
 800b616:	431a      	orrs	r2, r3
 800b618:	687b      	ldr	r3, [r7, #4]
 800b61a:	695b      	ldr	r3, [r3, #20]
 800b61c:	f003 0301 	and.w	r3, r3, #1
 800b620:	431a      	orrs	r2, r3
 800b622:	687b      	ldr	r3, [r7, #4]
 800b624:	699b      	ldr	r3, [r3, #24]
 800b626:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800b62a:	431a      	orrs	r2, r3
 800b62c:	687b      	ldr	r3, [r7, #4]
 800b62e:	69db      	ldr	r3, [r3, #28]
 800b630:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800b634:	431a      	orrs	r2, r3
 800b636:	687b      	ldr	r3, [r7, #4]
 800b638:	6a1b      	ldr	r3, [r3, #32]
 800b63a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b63e:	ea42 0103 	orr.w	r1, r2, r3
 800b642:	687b      	ldr	r3, [r7, #4]
 800b644:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b646:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800b64a:	687b      	ldr	r3, [r7, #4]
 800b64c:	681b      	ldr	r3, [r3, #0]
 800b64e:	430a      	orrs	r2, r1
 800b650:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800b652:	687b      	ldr	r3, [r7, #4]
 800b654:	699b      	ldr	r3, [r3, #24]
 800b656:	0c1b      	lsrs	r3, r3, #16
 800b658:	f003 0204 	and.w	r2, r3, #4
 800b65c:	687b      	ldr	r3, [r7, #4]
 800b65e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b660:	f003 0310 	and.w	r3, r3, #16
 800b664:	431a      	orrs	r2, r3
 800b666:	687b      	ldr	r3, [r7, #4]
 800b668:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b66a:	f003 0308 	and.w	r3, r3, #8
 800b66e:	431a      	orrs	r2, r3
 800b670:	687b      	ldr	r3, [r7, #4]
 800b672:	68db      	ldr	r3, [r3, #12]
 800b674:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800b678:	ea42 0103 	orr.w	r1, r2, r3
 800b67c:	68fb      	ldr	r3, [r7, #12]
 800b67e:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800b682:	687b      	ldr	r3, [r7, #4]
 800b684:	681b      	ldr	r3, [r3, #0]
 800b686:	430a      	orrs	r2, r1
 800b688:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800b68a:	687b      	ldr	r3, [r7, #4]
 800b68c:	2200      	movs	r2, #0
 800b68e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800b690:	687b      	ldr	r3, [r7, #4]
 800b692:	2201      	movs	r2, #1
 800b694:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800b698:	2300      	movs	r3, #0
}
 800b69a:	4618      	mov	r0, r3
 800b69c:	3710      	adds	r7, #16
 800b69e:	46bd      	mov	sp, r7
 800b6a0:	bd80      	pop	{r7, pc}

0800b6a2 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b6a2:	b580      	push	{r7, lr}
 800b6a4:	b088      	sub	sp, #32
 800b6a6:	af00      	add	r7, sp, #0
 800b6a8:	60f8      	str	r0, [r7, #12]
 800b6aa:	60b9      	str	r1, [r7, #8]
 800b6ac:	603b      	str	r3, [r7, #0]
 800b6ae:	4613      	mov	r3, r2
 800b6b0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800b6b2:	2300      	movs	r3, #0
 800b6b4:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800b6b6:	68fb      	ldr	r3, [r7, #12]
 800b6b8:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800b6bc:	2b01      	cmp	r3, #1
 800b6be:	d101      	bne.n	800b6c4 <HAL_SPI_Transmit+0x22>
 800b6c0:	2302      	movs	r3, #2
 800b6c2:	e158      	b.n	800b976 <HAL_SPI_Transmit+0x2d4>
 800b6c4:	68fb      	ldr	r3, [r7, #12]
 800b6c6:	2201      	movs	r2, #1
 800b6c8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800b6cc:	f7fc fa82 	bl	8007bd4 <HAL_GetTick>
 800b6d0:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800b6d2:	88fb      	ldrh	r3, [r7, #6]
 800b6d4:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800b6d6:	68fb      	ldr	r3, [r7, #12]
 800b6d8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800b6dc:	b2db      	uxtb	r3, r3
 800b6de:	2b01      	cmp	r3, #1
 800b6e0:	d002      	beq.n	800b6e8 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800b6e2:	2302      	movs	r3, #2
 800b6e4:	77fb      	strb	r3, [r7, #31]
    goto error;
 800b6e6:	e13d      	b.n	800b964 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 800b6e8:	68bb      	ldr	r3, [r7, #8]
 800b6ea:	2b00      	cmp	r3, #0
 800b6ec:	d002      	beq.n	800b6f4 <HAL_SPI_Transmit+0x52>
 800b6ee:	88fb      	ldrh	r3, [r7, #6]
 800b6f0:	2b00      	cmp	r3, #0
 800b6f2:	d102      	bne.n	800b6fa <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800b6f4:	2301      	movs	r3, #1
 800b6f6:	77fb      	strb	r3, [r7, #31]
    goto error;
 800b6f8:	e134      	b.n	800b964 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800b6fa:	68fb      	ldr	r3, [r7, #12]
 800b6fc:	2203      	movs	r2, #3
 800b6fe:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800b702:	68fb      	ldr	r3, [r7, #12]
 800b704:	2200      	movs	r2, #0
 800b706:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800b708:	68fb      	ldr	r3, [r7, #12]
 800b70a:	68ba      	ldr	r2, [r7, #8]
 800b70c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800b70e:	68fb      	ldr	r3, [r7, #12]
 800b710:	88fa      	ldrh	r2, [r7, #6]
 800b712:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800b714:	68fb      	ldr	r3, [r7, #12]
 800b716:	88fa      	ldrh	r2, [r7, #6]
 800b718:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800b71a:	68fb      	ldr	r3, [r7, #12]
 800b71c:	2200      	movs	r2, #0
 800b71e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800b720:	68fb      	ldr	r3, [r7, #12]
 800b722:	2200      	movs	r2, #0
 800b724:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 800b728:	68fb      	ldr	r3, [r7, #12]
 800b72a:	2200      	movs	r2, #0
 800b72c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 800b730:	68fb      	ldr	r3, [r7, #12]
 800b732:	2200      	movs	r2, #0
 800b734:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 800b736:	68fb      	ldr	r3, [r7, #12]
 800b738:	2200      	movs	r2, #0
 800b73a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b73c:	68fb      	ldr	r3, [r7, #12]
 800b73e:	689b      	ldr	r3, [r3, #8]
 800b740:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b744:	d10f      	bne.n	800b766 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800b746:	68fb      	ldr	r3, [r7, #12]
 800b748:	681b      	ldr	r3, [r3, #0]
 800b74a:	681a      	ldr	r2, [r3, #0]
 800b74c:	68fb      	ldr	r3, [r7, #12]
 800b74e:	681b      	ldr	r3, [r3, #0]
 800b750:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b754:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800b756:	68fb      	ldr	r3, [r7, #12]
 800b758:	681b      	ldr	r3, [r3, #0]
 800b75a:	681a      	ldr	r2, [r3, #0]
 800b75c:	68fb      	ldr	r3, [r7, #12]
 800b75e:	681b      	ldr	r3, [r3, #0]
 800b760:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800b764:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800b766:	68fb      	ldr	r3, [r7, #12]
 800b768:	681b      	ldr	r3, [r3, #0]
 800b76a:	681b      	ldr	r3, [r3, #0]
 800b76c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b770:	2b40      	cmp	r3, #64	; 0x40
 800b772:	d007      	beq.n	800b784 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800b774:	68fb      	ldr	r3, [r7, #12]
 800b776:	681b      	ldr	r3, [r3, #0]
 800b778:	681a      	ldr	r2, [r3, #0]
 800b77a:	68fb      	ldr	r3, [r7, #12]
 800b77c:	681b      	ldr	r3, [r3, #0]
 800b77e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b782:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800b784:	68fb      	ldr	r3, [r7, #12]
 800b786:	68db      	ldr	r3, [r3, #12]
 800b788:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800b78c:	d94b      	bls.n	800b826 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800b78e:	68fb      	ldr	r3, [r7, #12]
 800b790:	685b      	ldr	r3, [r3, #4]
 800b792:	2b00      	cmp	r3, #0
 800b794:	d002      	beq.n	800b79c <HAL_SPI_Transmit+0xfa>
 800b796:	8afb      	ldrh	r3, [r7, #22]
 800b798:	2b01      	cmp	r3, #1
 800b79a:	d13e      	bne.n	800b81a <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800b79c:	68fb      	ldr	r3, [r7, #12]
 800b79e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b7a0:	881a      	ldrh	r2, [r3, #0]
 800b7a2:	68fb      	ldr	r3, [r7, #12]
 800b7a4:	681b      	ldr	r3, [r3, #0]
 800b7a6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800b7a8:	68fb      	ldr	r3, [r7, #12]
 800b7aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b7ac:	1c9a      	adds	r2, r3, #2
 800b7ae:	68fb      	ldr	r3, [r7, #12]
 800b7b0:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800b7b2:	68fb      	ldr	r3, [r7, #12]
 800b7b4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b7b6:	b29b      	uxth	r3, r3
 800b7b8:	3b01      	subs	r3, #1
 800b7ba:	b29a      	uxth	r2, r3
 800b7bc:	68fb      	ldr	r3, [r7, #12]
 800b7be:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800b7c0:	e02b      	b.n	800b81a <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800b7c2:	68fb      	ldr	r3, [r7, #12]
 800b7c4:	681b      	ldr	r3, [r3, #0]
 800b7c6:	689b      	ldr	r3, [r3, #8]
 800b7c8:	f003 0302 	and.w	r3, r3, #2
 800b7cc:	2b02      	cmp	r3, #2
 800b7ce:	d112      	bne.n	800b7f6 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800b7d0:	68fb      	ldr	r3, [r7, #12]
 800b7d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b7d4:	881a      	ldrh	r2, [r3, #0]
 800b7d6:	68fb      	ldr	r3, [r7, #12]
 800b7d8:	681b      	ldr	r3, [r3, #0]
 800b7da:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800b7dc:	68fb      	ldr	r3, [r7, #12]
 800b7de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b7e0:	1c9a      	adds	r2, r3, #2
 800b7e2:	68fb      	ldr	r3, [r7, #12]
 800b7e4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800b7e6:	68fb      	ldr	r3, [r7, #12]
 800b7e8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b7ea:	b29b      	uxth	r3, r3
 800b7ec:	3b01      	subs	r3, #1
 800b7ee:	b29a      	uxth	r2, r3
 800b7f0:	68fb      	ldr	r3, [r7, #12]
 800b7f2:	87da      	strh	r2, [r3, #62]	; 0x3e
 800b7f4:	e011      	b.n	800b81a <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b7f6:	f7fc f9ed 	bl	8007bd4 <HAL_GetTick>
 800b7fa:	4602      	mov	r2, r0
 800b7fc:	69bb      	ldr	r3, [r7, #24]
 800b7fe:	1ad3      	subs	r3, r2, r3
 800b800:	683a      	ldr	r2, [r7, #0]
 800b802:	429a      	cmp	r2, r3
 800b804:	d803      	bhi.n	800b80e <HAL_SPI_Transmit+0x16c>
 800b806:	683b      	ldr	r3, [r7, #0]
 800b808:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b80c:	d102      	bne.n	800b814 <HAL_SPI_Transmit+0x172>
 800b80e:	683b      	ldr	r3, [r7, #0]
 800b810:	2b00      	cmp	r3, #0
 800b812:	d102      	bne.n	800b81a <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 800b814:	2303      	movs	r3, #3
 800b816:	77fb      	strb	r3, [r7, #31]
          goto error;
 800b818:	e0a4      	b.n	800b964 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 800b81a:	68fb      	ldr	r3, [r7, #12]
 800b81c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b81e:	b29b      	uxth	r3, r3
 800b820:	2b00      	cmp	r3, #0
 800b822:	d1ce      	bne.n	800b7c2 <HAL_SPI_Transmit+0x120>
 800b824:	e07c      	b.n	800b920 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800b826:	68fb      	ldr	r3, [r7, #12]
 800b828:	685b      	ldr	r3, [r3, #4]
 800b82a:	2b00      	cmp	r3, #0
 800b82c:	d002      	beq.n	800b834 <HAL_SPI_Transmit+0x192>
 800b82e:	8afb      	ldrh	r3, [r7, #22]
 800b830:	2b01      	cmp	r3, #1
 800b832:	d170      	bne.n	800b916 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 800b834:	68fb      	ldr	r3, [r7, #12]
 800b836:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b838:	b29b      	uxth	r3, r3
 800b83a:	2b01      	cmp	r3, #1
 800b83c:	d912      	bls.n	800b864 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800b83e:	68fb      	ldr	r3, [r7, #12]
 800b840:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b842:	881a      	ldrh	r2, [r3, #0]
 800b844:	68fb      	ldr	r3, [r7, #12]
 800b846:	681b      	ldr	r3, [r3, #0]
 800b848:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800b84a:	68fb      	ldr	r3, [r7, #12]
 800b84c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b84e:	1c9a      	adds	r2, r3, #2
 800b850:	68fb      	ldr	r3, [r7, #12]
 800b852:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800b854:	68fb      	ldr	r3, [r7, #12]
 800b856:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b858:	b29b      	uxth	r3, r3
 800b85a:	3b02      	subs	r3, #2
 800b85c:	b29a      	uxth	r2, r3
 800b85e:	68fb      	ldr	r3, [r7, #12]
 800b860:	87da      	strh	r2, [r3, #62]	; 0x3e
 800b862:	e058      	b.n	800b916 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800b864:	68fb      	ldr	r3, [r7, #12]
 800b866:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b868:	68fb      	ldr	r3, [r7, #12]
 800b86a:	681b      	ldr	r3, [r3, #0]
 800b86c:	330c      	adds	r3, #12
 800b86e:	7812      	ldrb	r2, [r2, #0]
 800b870:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800b872:	68fb      	ldr	r3, [r7, #12]
 800b874:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b876:	1c5a      	adds	r2, r3, #1
 800b878:	68fb      	ldr	r3, [r7, #12]
 800b87a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800b87c:	68fb      	ldr	r3, [r7, #12]
 800b87e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b880:	b29b      	uxth	r3, r3
 800b882:	3b01      	subs	r3, #1
 800b884:	b29a      	uxth	r2, r3
 800b886:	68fb      	ldr	r3, [r7, #12]
 800b888:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800b88a:	e044      	b.n	800b916 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800b88c:	68fb      	ldr	r3, [r7, #12]
 800b88e:	681b      	ldr	r3, [r3, #0]
 800b890:	689b      	ldr	r3, [r3, #8]
 800b892:	f003 0302 	and.w	r3, r3, #2
 800b896:	2b02      	cmp	r3, #2
 800b898:	d12b      	bne.n	800b8f2 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 800b89a:	68fb      	ldr	r3, [r7, #12]
 800b89c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b89e:	b29b      	uxth	r3, r3
 800b8a0:	2b01      	cmp	r3, #1
 800b8a2:	d912      	bls.n	800b8ca <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800b8a4:	68fb      	ldr	r3, [r7, #12]
 800b8a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b8a8:	881a      	ldrh	r2, [r3, #0]
 800b8aa:	68fb      	ldr	r3, [r7, #12]
 800b8ac:	681b      	ldr	r3, [r3, #0]
 800b8ae:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800b8b0:	68fb      	ldr	r3, [r7, #12]
 800b8b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b8b4:	1c9a      	adds	r2, r3, #2
 800b8b6:	68fb      	ldr	r3, [r7, #12]
 800b8b8:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800b8ba:	68fb      	ldr	r3, [r7, #12]
 800b8bc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b8be:	b29b      	uxth	r3, r3
 800b8c0:	3b02      	subs	r3, #2
 800b8c2:	b29a      	uxth	r2, r3
 800b8c4:	68fb      	ldr	r3, [r7, #12]
 800b8c6:	87da      	strh	r2, [r3, #62]	; 0x3e
 800b8c8:	e025      	b.n	800b916 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800b8ca:	68fb      	ldr	r3, [r7, #12]
 800b8cc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b8ce:	68fb      	ldr	r3, [r7, #12]
 800b8d0:	681b      	ldr	r3, [r3, #0]
 800b8d2:	330c      	adds	r3, #12
 800b8d4:	7812      	ldrb	r2, [r2, #0]
 800b8d6:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800b8d8:	68fb      	ldr	r3, [r7, #12]
 800b8da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b8dc:	1c5a      	adds	r2, r3, #1
 800b8de:	68fb      	ldr	r3, [r7, #12]
 800b8e0:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800b8e2:	68fb      	ldr	r3, [r7, #12]
 800b8e4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b8e6:	b29b      	uxth	r3, r3
 800b8e8:	3b01      	subs	r3, #1
 800b8ea:	b29a      	uxth	r2, r3
 800b8ec:	68fb      	ldr	r3, [r7, #12]
 800b8ee:	87da      	strh	r2, [r3, #62]	; 0x3e
 800b8f0:	e011      	b.n	800b916 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b8f2:	f7fc f96f 	bl	8007bd4 <HAL_GetTick>
 800b8f6:	4602      	mov	r2, r0
 800b8f8:	69bb      	ldr	r3, [r7, #24]
 800b8fa:	1ad3      	subs	r3, r2, r3
 800b8fc:	683a      	ldr	r2, [r7, #0]
 800b8fe:	429a      	cmp	r2, r3
 800b900:	d803      	bhi.n	800b90a <HAL_SPI_Transmit+0x268>
 800b902:	683b      	ldr	r3, [r7, #0]
 800b904:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b908:	d102      	bne.n	800b910 <HAL_SPI_Transmit+0x26e>
 800b90a:	683b      	ldr	r3, [r7, #0]
 800b90c:	2b00      	cmp	r3, #0
 800b90e:	d102      	bne.n	800b916 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 800b910:	2303      	movs	r3, #3
 800b912:	77fb      	strb	r3, [r7, #31]
          goto error;
 800b914:	e026      	b.n	800b964 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 800b916:	68fb      	ldr	r3, [r7, #12]
 800b918:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b91a:	b29b      	uxth	r3, r3
 800b91c:	2b00      	cmp	r3, #0
 800b91e:	d1b5      	bne.n	800b88c <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800b920:	69ba      	ldr	r2, [r7, #24]
 800b922:	6839      	ldr	r1, [r7, #0]
 800b924:	68f8      	ldr	r0, [r7, #12]
 800b926:	f000 f941 	bl	800bbac <SPI_EndRxTxTransaction>
 800b92a:	4603      	mov	r3, r0
 800b92c:	2b00      	cmp	r3, #0
 800b92e:	d002      	beq.n	800b936 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800b930:	68fb      	ldr	r3, [r7, #12]
 800b932:	2220      	movs	r2, #32
 800b934:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800b936:	68fb      	ldr	r3, [r7, #12]
 800b938:	689b      	ldr	r3, [r3, #8]
 800b93a:	2b00      	cmp	r3, #0
 800b93c:	d10a      	bne.n	800b954 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800b93e:	2300      	movs	r3, #0
 800b940:	613b      	str	r3, [r7, #16]
 800b942:	68fb      	ldr	r3, [r7, #12]
 800b944:	681b      	ldr	r3, [r3, #0]
 800b946:	68db      	ldr	r3, [r3, #12]
 800b948:	613b      	str	r3, [r7, #16]
 800b94a:	68fb      	ldr	r3, [r7, #12]
 800b94c:	681b      	ldr	r3, [r3, #0]
 800b94e:	689b      	ldr	r3, [r3, #8]
 800b950:	613b      	str	r3, [r7, #16]
 800b952:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800b954:	68fb      	ldr	r3, [r7, #12]
 800b956:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b958:	2b00      	cmp	r3, #0
 800b95a:	d002      	beq.n	800b962 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 800b95c:	2301      	movs	r3, #1
 800b95e:	77fb      	strb	r3, [r7, #31]
 800b960:	e000      	b.n	800b964 <HAL_SPI_Transmit+0x2c2>
  }

error:
 800b962:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800b964:	68fb      	ldr	r3, [r7, #12]
 800b966:	2201      	movs	r2, #1
 800b968:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800b96c:	68fb      	ldr	r3, [r7, #12]
 800b96e:	2200      	movs	r2, #0
 800b970:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800b974:	7ffb      	ldrb	r3, [r7, #31]
}
 800b976:	4618      	mov	r0, r3
 800b978:	3720      	adds	r7, #32
 800b97a:	46bd      	mov	sp, r7
 800b97c:	bd80      	pop	{r7, pc}
	...

0800b980 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800b980:	b580      	push	{r7, lr}
 800b982:	b088      	sub	sp, #32
 800b984:	af00      	add	r7, sp, #0
 800b986:	60f8      	str	r0, [r7, #12]
 800b988:	60b9      	str	r1, [r7, #8]
 800b98a:	603b      	str	r3, [r7, #0]
 800b98c:	4613      	mov	r3, r2
 800b98e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800b990:	f7fc f920 	bl	8007bd4 <HAL_GetTick>
 800b994:	4602      	mov	r2, r0
 800b996:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b998:	1a9b      	subs	r3, r3, r2
 800b99a:	683a      	ldr	r2, [r7, #0]
 800b99c:	4413      	add	r3, r2
 800b99e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800b9a0:	f7fc f918 	bl	8007bd4 <HAL_GetTick>
 800b9a4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800b9a6:	4b39      	ldr	r3, [pc, #228]	; (800ba8c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800b9a8:	681b      	ldr	r3, [r3, #0]
 800b9aa:	015b      	lsls	r3, r3, #5
 800b9ac:	0d1b      	lsrs	r3, r3, #20
 800b9ae:	69fa      	ldr	r2, [r7, #28]
 800b9b0:	fb02 f303 	mul.w	r3, r2, r3
 800b9b4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800b9b6:	e054      	b.n	800ba62 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800b9b8:	683b      	ldr	r3, [r7, #0]
 800b9ba:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b9be:	d050      	beq.n	800ba62 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800b9c0:	f7fc f908 	bl	8007bd4 <HAL_GetTick>
 800b9c4:	4602      	mov	r2, r0
 800b9c6:	69bb      	ldr	r3, [r7, #24]
 800b9c8:	1ad3      	subs	r3, r2, r3
 800b9ca:	69fa      	ldr	r2, [r7, #28]
 800b9cc:	429a      	cmp	r2, r3
 800b9ce:	d902      	bls.n	800b9d6 <SPI_WaitFlagStateUntilTimeout+0x56>
 800b9d0:	69fb      	ldr	r3, [r7, #28]
 800b9d2:	2b00      	cmp	r3, #0
 800b9d4:	d13d      	bne.n	800ba52 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800b9d6:	68fb      	ldr	r3, [r7, #12]
 800b9d8:	681b      	ldr	r3, [r3, #0]
 800b9da:	685a      	ldr	r2, [r3, #4]
 800b9dc:	68fb      	ldr	r3, [r7, #12]
 800b9de:	681b      	ldr	r3, [r3, #0]
 800b9e0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800b9e4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b9e6:	68fb      	ldr	r3, [r7, #12]
 800b9e8:	685b      	ldr	r3, [r3, #4]
 800b9ea:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800b9ee:	d111      	bne.n	800ba14 <SPI_WaitFlagStateUntilTimeout+0x94>
 800b9f0:	68fb      	ldr	r3, [r7, #12]
 800b9f2:	689b      	ldr	r3, [r3, #8]
 800b9f4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b9f8:	d004      	beq.n	800ba04 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800b9fa:	68fb      	ldr	r3, [r7, #12]
 800b9fc:	689b      	ldr	r3, [r3, #8]
 800b9fe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ba02:	d107      	bne.n	800ba14 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800ba04:	68fb      	ldr	r3, [r7, #12]
 800ba06:	681b      	ldr	r3, [r3, #0]
 800ba08:	681a      	ldr	r2, [r3, #0]
 800ba0a:	68fb      	ldr	r3, [r7, #12]
 800ba0c:	681b      	ldr	r3, [r3, #0]
 800ba0e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ba12:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800ba14:	68fb      	ldr	r3, [r7, #12]
 800ba16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ba18:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ba1c:	d10f      	bne.n	800ba3e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800ba1e:	68fb      	ldr	r3, [r7, #12]
 800ba20:	681b      	ldr	r3, [r3, #0]
 800ba22:	681a      	ldr	r2, [r3, #0]
 800ba24:	68fb      	ldr	r3, [r7, #12]
 800ba26:	681b      	ldr	r3, [r3, #0]
 800ba28:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800ba2c:	601a      	str	r2, [r3, #0]
 800ba2e:	68fb      	ldr	r3, [r7, #12]
 800ba30:	681b      	ldr	r3, [r3, #0]
 800ba32:	681a      	ldr	r2, [r3, #0]
 800ba34:	68fb      	ldr	r3, [r7, #12]
 800ba36:	681b      	ldr	r3, [r3, #0]
 800ba38:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800ba3c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800ba3e:	68fb      	ldr	r3, [r7, #12]
 800ba40:	2201      	movs	r2, #1
 800ba42:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800ba46:	68fb      	ldr	r3, [r7, #12]
 800ba48:	2200      	movs	r2, #0
 800ba4a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800ba4e:	2303      	movs	r3, #3
 800ba50:	e017      	b.n	800ba82 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800ba52:	697b      	ldr	r3, [r7, #20]
 800ba54:	2b00      	cmp	r3, #0
 800ba56:	d101      	bne.n	800ba5c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800ba58:	2300      	movs	r3, #0
 800ba5a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800ba5c:	697b      	ldr	r3, [r7, #20]
 800ba5e:	3b01      	subs	r3, #1
 800ba60:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800ba62:	68fb      	ldr	r3, [r7, #12]
 800ba64:	681b      	ldr	r3, [r3, #0]
 800ba66:	689a      	ldr	r2, [r3, #8]
 800ba68:	68bb      	ldr	r3, [r7, #8]
 800ba6a:	4013      	ands	r3, r2
 800ba6c:	68ba      	ldr	r2, [r7, #8]
 800ba6e:	429a      	cmp	r2, r3
 800ba70:	bf0c      	ite	eq
 800ba72:	2301      	moveq	r3, #1
 800ba74:	2300      	movne	r3, #0
 800ba76:	b2db      	uxtb	r3, r3
 800ba78:	461a      	mov	r2, r3
 800ba7a:	79fb      	ldrb	r3, [r7, #7]
 800ba7c:	429a      	cmp	r2, r3
 800ba7e:	d19b      	bne.n	800b9b8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800ba80:	2300      	movs	r3, #0
}
 800ba82:	4618      	mov	r0, r3
 800ba84:	3720      	adds	r7, #32
 800ba86:	46bd      	mov	sp, r7
 800ba88:	bd80      	pop	{r7, pc}
 800ba8a:	bf00      	nop
 800ba8c:	20000014 	.word	0x20000014

0800ba90 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800ba90:	b580      	push	{r7, lr}
 800ba92:	b088      	sub	sp, #32
 800ba94:	af00      	add	r7, sp, #0
 800ba96:	60f8      	str	r0, [r7, #12]
 800ba98:	60b9      	str	r1, [r7, #8]
 800ba9a:	607a      	str	r2, [r7, #4]
 800ba9c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800ba9e:	f7fc f899 	bl	8007bd4 <HAL_GetTick>
 800baa2:	4602      	mov	r2, r0
 800baa4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800baa6:	1a9b      	subs	r3, r3, r2
 800baa8:	683a      	ldr	r2, [r7, #0]
 800baaa:	4413      	add	r3, r2
 800baac:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800baae:	f7fc f891 	bl	8007bd4 <HAL_GetTick>
 800bab2:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800bab4:	4b3c      	ldr	r3, [pc, #240]	; (800bba8 <SPI_WaitFifoStateUntilTimeout+0x118>)
 800bab6:	681a      	ldr	r2, [r3, #0]
 800bab8:	4613      	mov	r3, r2
 800baba:	009b      	lsls	r3, r3, #2
 800babc:	4413      	add	r3, r2
 800babe:	00da      	lsls	r2, r3, #3
 800bac0:	1ad3      	subs	r3, r2, r3
 800bac2:	0d1b      	lsrs	r3, r3, #20
 800bac4:	69fa      	ldr	r2, [r7, #28]
 800bac6:	fb02 f303 	mul.w	r3, r2, r3
 800baca:	617b      	str	r3, [r7, #20]

  while ((hspi->Instance->SR & Fifo) != State)
 800bacc:	e05f      	b.n	800bb8e <SPI_WaitFifoStateUntilTimeout+0xfe>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800bace:	68bb      	ldr	r3, [r7, #8]
 800bad0:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800bad4:	d106      	bne.n	800bae4 <SPI_WaitFifoStateUntilTimeout+0x54>
 800bad6:	687b      	ldr	r3, [r7, #4]
 800bad8:	2b00      	cmp	r3, #0
 800bada:	d103      	bne.n	800bae4 <SPI_WaitFifoStateUntilTimeout+0x54>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 800badc:	68fb      	ldr	r3, [r7, #12]
 800bade:	681b      	ldr	r3, [r3, #0]
 800bae0:	330c      	adds	r3, #12
 800bae2:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 800bae4:	683b      	ldr	r3, [r7, #0]
 800bae6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800baea:	d050      	beq.n	800bb8e <SPI_WaitFifoStateUntilTimeout+0xfe>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800baec:	f7fc f872 	bl	8007bd4 <HAL_GetTick>
 800baf0:	4602      	mov	r2, r0
 800baf2:	69bb      	ldr	r3, [r7, #24]
 800baf4:	1ad3      	subs	r3, r2, r3
 800baf6:	69fa      	ldr	r2, [r7, #28]
 800baf8:	429a      	cmp	r2, r3
 800bafa:	d902      	bls.n	800bb02 <SPI_WaitFifoStateUntilTimeout+0x72>
 800bafc:	69fb      	ldr	r3, [r7, #28]
 800bafe:	2b00      	cmp	r3, #0
 800bb00:	d13d      	bne.n	800bb7e <SPI_WaitFifoStateUntilTimeout+0xee>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800bb02:	68fb      	ldr	r3, [r7, #12]
 800bb04:	681b      	ldr	r3, [r3, #0]
 800bb06:	685a      	ldr	r2, [r3, #4]
 800bb08:	68fb      	ldr	r3, [r7, #12]
 800bb0a:	681b      	ldr	r3, [r3, #0]
 800bb0c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800bb10:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800bb12:	68fb      	ldr	r3, [r7, #12]
 800bb14:	685b      	ldr	r3, [r3, #4]
 800bb16:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800bb1a:	d111      	bne.n	800bb40 <SPI_WaitFifoStateUntilTimeout+0xb0>
 800bb1c:	68fb      	ldr	r3, [r7, #12]
 800bb1e:	689b      	ldr	r3, [r3, #8]
 800bb20:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800bb24:	d004      	beq.n	800bb30 <SPI_WaitFifoStateUntilTimeout+0xa0>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800bb26:	68fb      	ldr	r3, [r7, #12]
 800bb28:	689b      	ldr	r3, [r3, #8]
 800bb2a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bb2e:	d107      	bne.n	800bb40 <SPI_WaitFifoStateUntilTimeout+0xb0>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800bb30:	68fb      	ldr	r3, [r7, #12]
 800bb32:	681b      	ldr	r3, [r3, #0]
 800bb34:	681a      	ldr	r2, [r3, #0]
 800bb36:	68fb      	ldr	r3, [r7, #12]
 800bb38:	681b      	ldr	r3, [r3, #0]
 800bb3a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800bb3e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800bb40:	68fb      	ldr	r3, [r7, #12]
 800bb42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bb44:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bb48:	d10f      	bne.n	800bb6a <SPI_WaitFifoStateUntilTimeout+0xda>
        {
          SPI_RESET_CRC(hspi);
 800bb4a:	68fb      	ldr	r3, [r7, #12]
 800bb4c:	681b      	ldr	r3, [r3, #0]
 800bb4e:	681a      	ldr	r2, [r3, #0]
 800bb50:	68fb      	ldr	r3, [r7, #12]
 800bb52:	681b      	ldr	r3, [r3, #0]
 800bb54:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800bb58:	601a      	str	r2, [r3, #0]
 800bb5a:	68fb      	ldr	r3, [r7, #12]
 800bb5c:	681b      	ldr	r3, [r3, #0]
 800bb5e:	681a      	ldr	r2, [r3, #0]
 800bb60:	68fb      	ldr	r3, [r7, #12]
 800bb62:	681b      	ldr	r3, [r3, #0]
 800bb64:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800bb68:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800bb6a:	68fb      	ldr	r3, [r7, #12]
 800bb6c:	2201      	movs	r2, #1
 800bb6e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800bb72:	68fb      	ldr	r3, [r7, #12]
 800bb74:	2200      	movs	r2, #0
 800bb76:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800bb7a:	2303      	movs	r3, #3
 800bb7c:	e010      	b.n	800bba0 <SPI_WaitFifoStateUntilTimeout+0x110>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800bb7e:	697b      	ldr	r3, [r7, #20]
 800bb80:	2b00      	cmp	r3, #0
 800bb82:	d101      	bne.n	800bb88 <SPI_WaitFifoStateUntilTimeout+0xf8>
      {
        tmp_timeout = 0U;
 800bb84:	2300      	movs	r3, #0
 800bb86:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800bb88:	697b      	ldr	r3, [r7, #20]
 800bb8a:	3b01      	subs	r3, #1
 800bb8c:	617b      	str	r3, [r7, #20]
  while ((hspi->Instance->SR & Fifo) != State)
 800bb8e:	68fb      	ldr	r3, [r7, #12]
 800bb90:	681b      	ldr	r3, [r3, #0]
 800bb92:	689a      	ldr	r2, [r3, #8]
 800bb94:	68bb      	ldr	r3, [r7, #8]
 800bb96:	4013      	ands	r3, r2
 800bb98:	687a      	ldr	r2, [r7, #4]
 800bb9a:	429a      	cmp	r2, r3
 800bb9c:	d197      	bne.n	800bace <SPI_WaitFifoStateUntilTimeout+0x3e>
    }
  }

  return HAL_OK;
 800bb9e:	2300      	movs	r3, #0
}
 800bba0:	4618      	mov	r0, r3
 800bba2:	3720      	adds	r7, #32
 800bba4:	46bd      	mov	sp, r7
 800bba6:	bd80      	pop	{r7, pc}
 800bba8:	20000014 	.word	0x20000014

0800bbac <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800bbac:	b580      	push	{r7, lr}
 800bbae:	b086      	sub	sp, #24
 800bbb0:	af02      	add	r7, sp, #8
 800bbb2:	60f8      	str	r0, [r7, #12]
 800bbb4:	60b9      	str	r1, [r7, #8]
 800bbb6:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800bbb8:	687b      	ldr	r3, [r7, #4]
 800bbba:	9300      	str	r3, [sp, #0]
 800bbbc:	68bb      	ldr	r3, [r7, #8]
 800bbbe:	2200      	movs	r2, #0
 800bbc0:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800bbc4:	68f8      	ldr	r0, [r7, #12]
 800bbc6:	f7ff ff63 	bl	800ba90 <SPI_WaitFifoStateUntilTimeout>
 800bbca:	4603      	mov	r3, r0
 800bbcc:	2b00      	cmp	r3, #0
 800bbce:	d007      	beq.n	800bbe0 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800bbd0:	68fb      	ldr	r3, [r7, #12]
 800bbd2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800bbd4:	f043 0220 	orr.w	r2, r3, #32
 800bbd8:	68fb      	ldr	r3, [r7, #12]
 800bbda:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800bbdc:	2303      	movs	r3, #3
 800bbde:	e027      	b.n	800bc30 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800bbe0:	687b      	ldr	r3, [r7, #4]
 800bbe2:	9300      	str	r3, [sp, #0]
 800bbe4:	68bb      	ldr	r3, [r7, #8]
 800bbe6:	2200      	movs	r2, #0
 800bbe8:	2180      	movs	r1, #128	; 0x80
 800bbea:	68f8      	ldr	r0, [r7, #12]
 800bbec:	f7ff fec8 	bl	800b980 <SPI_WaitFlagStateUntilTimeout>
 800bbf0:	4603      	mov	r3, r0
 800bbf2:	2b00      	cmp	r3, #0
 800bbf4:	d007      	beq.n	800bc06 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800bbf6:	68fb      	ldr	r3, [r7, #12]
 800bbf8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800bbfa:	f043 0220 	orr.w	r2, r3, #32
 800bbfe:	68fb      	ldr	r3, [r7, #12]
 800bc00:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800bc02:	2303      	movs	r3, #3
 800bc04:	e014      	b.n	800bc30 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800bc06:	687b      	ldr	r3, [r7, #4]
 800bc08:	9300      	str	r3, [sp, #0]
 800bc0a:	68bb      	ldr	r3, [r7, #8]
 800bc0c:	2200      	movs	r2, #0
 800bc0e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800bc12:	68f8      	ldr	r0, [r7, #12]
 800bc14:	f7ff ff3c 	bl	800ba90 <SPI_WaitFifoStateUntilTimeout>
 800bc18:	4603      	mov	r3, r0
 800bc1a:	2b00      	cmp	r3, #0
 800bc1c:	d007      	beq.n	800bc2e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800bc1e:	68fb      	ldr	r3, [r7, #12]
 800bc20:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800bc22:	f043 0220 	orr.w	r2, r3, #32
 800bc26:	68fb      	ldr	r3, [r7, #12]
 800bc28:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800bc2a:	2303      	movs	r3, #3
 800bc2c:	e000      	b.n	800bc30 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800bc2e:	2300      	movs	r3, #0
}
 800bc30:	4618      	mov	r0, r3
 800bc32:	3710      	adds	r7, #16
 800bc34:	46bd      	mov	sp, r7
 800bc36:	bd80      	pop	{r7, pc}

0800bc38 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800bc38:	b580      	push	{r7, lr}
 800bc3a:	b082      	sub	sp, #8
 800bc3c:	af00      	add	r7, sp, #0
 800bc3e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800bc40:	687b      	ldr	r3, [r7, #4]
 800bc42:	2b00      	cmp	r3, #0
 800bc44:	d101      	bne.n	800bc4a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800bc46:	2301      	movs	r3, #1
 800bc48:	e049      	b.n	800bcde <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800bc4a:	687b      	ldr	r3, [r7, #4]
 800bc4c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800bc50:	b2db      	uxtb	r3, r3
 800bc52:	2b00      	cmp	r3, #0
 800bc54:	d106      	bne.n	800bc64 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800bc56:	687b      	ldr	r3, [r7, #4]
 800bc58:	2200      	movs	r2, #0
 800bc5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800bc5e:	6878      	ldr	r0, [r7, #4]
 800bc60:	f7fb fa04 	bl	800706c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bc64:	687b      	ldr	r3, [r7, #4]
 800bc66:	2202      	movs	r2, #2
 800bc68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800bc6c:	687b      	ldr	r3, [r7, #4]
 800bc6e:	681a      	ldr	r2, [r3, #0]
 800bc70:	687b      	ldr	r3, [r7, #4]
 800bc72:	3304      	adds	r3, #4
 800bc74:	4619      	mov	r1, r3
 800bc76:	4610      	mov	r0, r2
 800bc78:	f000 fd5a 	bl	800c730 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800bc7c:	687b      	ldr	r3, [r7, #4]
 800bc7e:	2201      	movs	r2, #1
 800bc80:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800bc84:	687b      	ldr	r3, [r7, #4]
 800bc86:	2201      	movs	r2, #1
 800bc88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800bc8c:	687b      	ldr	r3, [r7, #4]
 800bc8e:	2201      	movs	r2, #1
 800bc90:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800bc94:	687b      	ldr	r3, [r7, #4]
 800bc96:	2201      	movs	r2, #1
 800bc98:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800bc9c:	687b      	ldr	r3, [r7, #4]
 800bc9e:	2201      	movs	r2, #1
 800bca0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800bca4:	687b      	ldr	r3, [r7, #4]
 800bca6:	2201      	movs	r2, #1
 800bca8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800bcac:	687b      	ldr	r3, [r7, #4]
 800bcae:	2201      	movs	r2, #1
 800bcb0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800bcb4:	687b      	ldr	r3, [r7, #4]
 800bcb6:	2201      	movs	r2, #1
 800bcb8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800bcbc:	687b      	ldr	r3, [r7, #4]
 800bcbe:	2201      	movs	r2, #1
 800bcc0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800bcc4:	687b      	ldr	r3, [r7, #4]
 800bcc6:	2201      	movs	r2, #1
 800bcc8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800bccc:	687b      	ldr	r3, [r7, #4]
 800bcce:	2201      	movs	r2, #1
 800bcd0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800bcd4:	687b      	ldr	r3, [r7, #4]
 800bcd6:	2201      	movs	r2, #1
 800bcd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800bcdc:	2300      	movs	r3, #0
}
 800bcde:	4618      	mov	r0, r3
 800bce0:	3708      	adds	r7, #8
 800bce2:	46bd      	mov	sp, r7
 800bce4:	bd80      	pop	{r7, pc}
	...

0800bce8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800bce8:	b480      	push	{r7}
 800bcea:	b085      	sub	sp, #20
 800bcec:	af00      	add	r7, sp, #0
 800bcee:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800bcf0:	687b      	ldr	r3, [r7, #4]
 800bcf2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800bcf6:	b2db      	uxtb	r3, r3
 800bcf8:	2b01      	cmp	r3, #1
 800bcfa:	d001      	beq.n	800bd00 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800bcfc:	2301      	movs	r3, #1
 800bcfe:	e036      	b.n	800bd6e <HAL_TIM_Base_Start_IT+0x86>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bd00:	687b      	ldr	r3, [r7, #4]
 800bd02:	2202      	movs	r2, #2
 800bd04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800bd08:	687b      	ldr	r3, [r7, #4]
 800bd0a:	681b      	ldr	r3, [r3, #0]
 800bd0c:	68da      	ldr	r2, [r3, #12]
 800bd0e:	687b      	ldr	r3, [r7, #4]
 800bd10:	681b      	ldr	r3, [r3, #0]
 800bd12:	f042 0201 	orr.w	r2, r2, #1
 800bd16:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800bd18:	687b      	ldr	r3, [r7, #4]
 800bd1a:	681b      	ldr	r3, [r3, #0]
 800bd1c:	4a17      	ldr	r2, [pc, #92]	; (800bd7c <HAL_TIM_Base_Start_IT+0x94>)
 800bd1e:	4293      	cmp	r3, r2
 800bd20:	d004      	beq.n	800bd2c <HAL_TIM_Base_Start_IT+0x44>
 800bd22:	687b      	ldr	r3, [r7, #4]
 800bd24:	681b      	ldr	r3, [r3, #0]
 800bd26:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bd2a:	d115      	bne.n	800bd58 <HAL_TIM_Base_Start_IT+0x70>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800bd2c:	687b      	ldr	r3, [r7, #4]
 800bd2e:	681b      	ldr	r3, [r3, #0]
 800bd30:	689a      	ldr	r2, [r3, #8]
 800bd32:	4b13      	ldr	r3, [pc, #76]	; (800bd80 <HAL_TIM_Base_Start_IT+0x98>)
 800bd34:	4013      	ands	r3, r2
 800bd36:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bd38:	68fb      	ldr	r3, [r7, #12]
 800bd3a:	2b06      	cmp	r3, #6
 800bd3c:	d015      	beq.n	800bd6a <HAL_TIM_Base_Start_IT+0x82>
 800bd3e:	68fb      	ldr	r3, [r7, #12]
 800bd40:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bd44:	d011      	beq.n	800bd6a <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 800bd46:	687b      	ldr	r3, [r7, #4]
 800bd48:	681b      	ldr	r3, [r3, #0]
 800bd4a:	681a      	ldr	r2, [r3, #0]
 800bd4c:	687b      	ldr	r3, [r7, #4]
 800bd4e:	681b      	ldr	r3, [r3, #0]
 800bd50:	f042 0201 	orr.w	r2, r2, #1
 800bd54:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bd56:	e008      	b.n	800bd6a <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800bd58:	687b      	ldr	r3, [r7, #4]
 800bd5a:	681b      	ldr	r3, [r3, #0]
 800bd5c:	681a      	ldr	r2, [r3, #0]
 800bd5e:	687b      	ldr	r3, [r7, #4]
 800bd60:	681b      	ldr	r3, [r3, #0]
 800bd62:	f042 0201 	orr.w	r2, r2, #1
 800bd66:	601a      	str	r2, [r3, #0]
 800bd68:	e000      	b.n	800bd6c <HAL_TIM_Base_Start_IT+0x84>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bd6a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800bd6c:	2300      	movs	r3, #0
}
 800bd6e:	4618      	mov	r0, r3
 800bd70:	3714      	adds	r7, #20
 800bd72:	46bd      	mov	sp, r7
 800bd74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd78:	4770      	bx	lr
 800bd7a:	bf00      	nop
 800bd7c:	40012c00 	.word	0x40012c00
 800bd80:	00010007 	.word	0x00010007

0800bd84 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800bd84:	b580      	push	{r7, lr}
 800bd86:	b082      	sub	sp, #8
 800bd88:	af00      	add	r7, sp, #0
 800bd8a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800bd8c:	687b      	ldr	r3, [r7, #4]
 800bd8e:	2b00      	cmp	r3, #0
 800bd90:	d101      	bne.n	800bd96 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800bd92:	2301      	movs	r3, #1
 800bd94:	e049      	b.n	800be2a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800bd96:	687b      	ldr	r3, [r7, #4]
 800bd98:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800bd9c:	b2db      	uxtb	r3, r3
 800bd9e:	2b00      	cmp	r3, #0
 800bda0:	d106      	bne.n	800bdb0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800bda2:	687b      	ldr	r3, [r7, #4]
 800bda4:	2200      	movs	r2, #0
 800bda6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800bdaa:	6878      	ldr	r0, [r7, #4]
 800bdac:	f000 f841 	bl	800be32 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bdb0:	687b      	ldr	r3, [r7, #4]
 800bdb2:	2202      	movs	r2, #2
 800bdb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800bdb8:	687b      	ldr	r3, [r7, #4]
 800bdba:	681a      	ldr	r2, [r3, #0]
 800bdbc:	687b      	ldr	r3, [r7, #4]
 800bdbe:	3304      	adds	r3, #4
 800bdc0:	4619      	mov	r1, r3
 800bdc2:	4610      	mov	r0, r2
 800bdc4:	f000 fcb4 	bl	800c730 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800bdc8:	687b      	ldr	r3, [r7, #4]
 800bdca:	2201      	movs	r2, #1
 800bdcc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800bdd0:	687b      	ldr	r3, [r7, #4]
 800bdd2:	2201      	movs	r2, #1
 800bdd4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800bdd8:	687b      	ldr	r3, [r7, #4]
 800bdda:	2201      	movs	r2, #1
 800bddc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800bde0:	687b      	ldr	r3, [r7, #4]
 800bde2:	2201      	movs	r2, #1
 800bde4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800bde8:	687b      	ldr	r3, [r7, #4]
 800bdea:	2201      	movs	r2, #1
 800bdec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800bdf0:	687b      	ldr	r3, [r7, #4]
 800bdf2:	2201      	movs	r2, #1
 800bdf4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800bdf8:	687b      	ldr	r3, [r7, #4]
 800bdfa:	2201      	movs	r2, #1
 800bdfc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800be00:	687b      	ldr	r3, [r7, #4]
 800be02:	2201      	movs	r2, #1
 800be04:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800be08:	687b      	ldr	r3, [r7, #4]
 800be0a:	2201      	movs	r2, #1
 800be0c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800be10:	687b      	ldr	r3, [r7, #4]
 800be12:	2201      	movs	r2, #1
 800be14:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800be18:	687b      	ldr	r3, [r7, #4]
 800be1a:	2201      	movs	r2, #1
 800be1c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800be20:	687b      	ldr	r3, [r7, #4]
 800be22:	2201      	movs	r2, #1
 800be24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800be28:	2300      	movs	r3, #0
}
 800be2a:	4618      	mov	r0, r3
 800be2c:	3708      	adds	r7, #8
 800be2e:	46bd      	mov	sp, r7
 800be30:	bd80      	pop	{r7, pc}

0800be32 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800be32:	b480      	push	{r7}
 800be34:	b083      	sub	sp, #12
 800be36:	af00      	add	r7, sp, #0
 800be38:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800be3a:	bf00      	nop
 800be3c:	370c      	adds	r7, #12
 800be3e:	46bd      	mov	sp, r7
 800be40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be44:	4770      	bx	lr
	...

0800be48 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800be48:	b580      	push	{r7, lr}
 800be4a:	b084      	sub	sp, #16
 800be4c:	af00      	add	r7, sp, #0
 800be4e:	6078      	str	r0, [r7, #4]
 800be50:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800be52:	683b      	ldr	r3, [r7, #0]
 800be54:	2b00      	cmp	r3, #0
 800be56:	d109      	bne.n	800be6c <HAL_TIM_PWM_Start+0x24>
 800be58:	687b      	ldr	r3, [r7, #4]
 800be5a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800be5e:	b2db      	uxtb	r3, r3
 800be60:	2b01      	cmp	r3, #1
 800be62:	bf14      	ite	ne
 800be64:	2301      	movne	r3, #1
 800be66:	2300      	moveq	r3, #0
 800be68:	b2db      	uxtb	r3, r3
 800be6a:	e03c      	b.n	800bee6 <HAL_TIM_PWM_Start+0x9e>
 800be6c:	683b      	ldr	r3, [r7, #0]
 800be6e:	2b04      	cmp	r3, #4
 800be70:	d109      	bne.n	800be86 <HAL_TIM_PWM_Start+0x3e>
 800be72:	687b      	ldr	r3, [r7, #4]
 800be74:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800be78:	b2db      	uxtb	r3, r3
 800be7a:	2b01      	cmp	r3, #1
 800be7c:	bf14      	ite	ne
 800be7e:	2301      	movne	r3, #1
 800be80:	2300      	moveq	r3, #0
 800be82:	b2db      	uxtb	r3, r3
 800be84:	e02f      	b.n	800bee6 <HAL_TIM_PWM_Start+0x9e>
 800be86:	683b      	ldr	r3, [r7, #0]
 800be88:	2b08      	cmp	r3, #8
 800be8a:	d109      	bne.n	800bea0 <HAL_TIM_PWM_Start+0x58>
 800be8c:	687b      	ldr	r3, [r7, #4]
 800be8e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800be92:	b2db      	uxtb	r3, r3
 800be94:	2b01      	cmp	r3, #1
 800be96:	bf14      	ite	ne
 800be98:	2301      	movne	r3, #1
 800be9a:	2300      	moveq	r3, #0
 800be9c:	b2db      	uxtb	r3, r3
 800be9e:	e022      	b.n	800bee6 <HAL_TIM_PWM_Start+0x9e>
 800bea0:	683b      	ldr	r3, [r7, #0]
 800bea2:	2b0c      	cmp	r3, #12
 800bea4:	d109      	bne.n	800beba <HAL_TIM_PWM_Start+0x72>
 800bea6:	687b      	ldr	r3, [r7, #4]
 800bea8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800beac:	b2db      	uxtb	r3, r3
 800beae:	2b01      	cmp	r3, #1
 800beb0:	bf14      	ite	ne
 800beb2:	2301      	movne	r3, #1
 800beb4:	2300      	moveq	r3, #0
 800beb6:	b2db      	uxtb	r3, r3
 800beb8:	e015      	b.n	800bee6 <HAL_TIM_PWM_Start+0x9e>
 800beba:	683b      	ldr	r3, [r7, #0]
 800bebc:	2b10      	cmp	r3, #16
 800bebe:	d109      	bne.n	800bed4 <HAL_TIM_PWM_Start+0x8c>
 800bec0:	687b      	ldr	r3, [r7, #4]
 800bec2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800bec6:	b2db      	uxtb	r3, r3
 800bec8:	2b01      	cmp	r3, #1
 800beca:	bf14      	ite	ne
 800becc:	2301      	movne	r3, #1
 800bece:	2300      	moveq	r3, #0
 800bed0:	b2db      	uxtb	r3, r3
 800bed2:	e008      	b.n	800bee6 <HAL_TIM_PWM_Start+0x9e>
 800bed4:	687b      	ldr	r3, [r7, #4]
 800bed6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800beda:	b2db      	uxtb	r3, r3
 800bedc:	2b01      	cmp	r3, #1
 800bede:	bf14      	ite	ne
 800bee0:	2301      	movne	r3, #1
 800bee2:	2300      	moveq	r3, #0
 800bee4:	b2db      	uxtb	r3, r3
 800bee6:	2b00      	cmp	r3, #0
 800bee8:	d001      	beq.n	800beee <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800beea:	2301      	movs	r3, #1
 800beec:	e079      	b.n	800bfe2 <HAL_TIM_PWM_Start+0x19a>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800beee:	683b      	ldr	r3, [r7, #0]
 800bef0:	2b00      	cmp	r3, #0
 800bef2:	d104      	bne.n	800befe <HAL_TIM_PWM_Start+0xb6>
 800bef4:	687b      	ldr	r3, [r7, #4]
 800bef6:	2202      	movs	r2, #2
 800bef8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800befc:	e023      	b.n	800bf46 <HAL_TIM_PWM_Start+0xfe>
 800befe:	683b      	ldr	r3, [r7, #0]
 800bf00:	2b04      	cmp	r3, #4
 800bf02:	d104      	bne.n	800bf0e <HAL_TIM_PWM_Start+0xc6>
 800bf04:	687b      	ldr	r3, [r7, #4]
 800bf06:	2202      	movs	r2, #2
 800bf08:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800bf0c:	e01b      	b.n	800bf46 <HAL_TIM_PWM_Start+0xfe>
 800bf0e:	683b      	ldr	r3, [r7, #0]
 800bf10:	2b08      	cmp	r3, #8
 800bf12:	d104      	bne.n	800bf1e <HAL_TIM_PWM_Start+0xd6>
 800bf14:	687b      	ldr	r3, [r7, #4]
 800bf16:	2202      	movs	r2, #2
 800bf18:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800bf1c:	e013      	b.n	800bf46 <HAL_TIM_PWM_Start+0xfe>
 800bf1e:	683b      	ldr	r3, [r7, #0]
 800bf20:	2b0c      	cmp	r3, #12
 800bf22:	d104      	bne.n	800bf2e <HAL_TIM_PWM_Start+0xe6>
 800bf24:	687b      	ldr	r3, [r7, #4]
 800bf26:	2202      	movs	r2, #2
 800bf28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800bf2c:	e00b      	b.n	800bf46 <HAL_TIM_PWM_Start+0xfe>
 800bf2e:	683b      	ldr	r3, [r7, #0]
 800bf30:	2b10      	cmp	r3, #16
 800bf32:	d104      	bne.n	800bf3e <HAL_TIM_PWM_Start+0xf6>
 800bf34:	687b      	ldr	r3, [r7, #4]
 800bf36:	2202      	movs	r2, #2
 800bf38:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800bf3c:	e003      	b.n	800bf46 <HAL_TIM_PWM_Start+0xfe>
 800bf3e:	687b      	ldr	r3, [r7, #4]
 800bf40:	2202      	movs	r2, #2
 800bf42:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800bf46:	687b      	ldr	r3, [r7, #4]
 800bf48:	681b      	ldr	r3, [r3, #0]
 800bf4a:	2201      	movs	r2, #1
 800bf4c:	6839      	ldr	r1, [r7, #0]
 800bf4e:	4618      	mov	r0, r3
 800bf50:	f000 ff6c 	bl	800ce2c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800bf54:	687b      	ldr	r3, [r7, #4]
 800bf56:	681b      	ldr	r3, [r3, #0]
 800bf58:	4a24      	ldr	r2, [pc, #144]	; (800bfec <HAL_TIM_PWM_Start+0x1a4>)
 800bf5a:	4293      	cmp	r3, r2
 800bf5c:	d009      	beq.n	800bf72 <HAL_TIM_PWM_Start+0x12a>
 800bf5e:	687b      	ldr	r3, [r7, #4]
 800bf60:	681b      	ldr	r3, [r3, #0]
 800bf62:	4a23      	ldr	r2, [pc, #140]	; (800bff0 <HAL_TIM_PWM_Start+0x1a8>)
 800bf64:	4293      	cmp	r3, r2
 800bf66:	d004      	beq.n	800bf72 <HAL_TIM_PWM_Start+0x12a>
 800bf68:	687b      	ldr	r3, [r7, #4]
 800bf6a:	681b      	ldr	r3, [r3, #0]
 800bf6c:	4a21      	ldr	r2, [pc, #132]	; (800bff4 <HAL_TIM_PWM_Start+0x1ac>)
 800bf6e:	4293      	cmp	r3, r2
 800bf70:	d101      	bne.n	800bf76 <HAL_TIM_PWM_Start+0x12e>
 800bf72:	2301      	movs	r3, #1
 800bf74:	e000      	b.n	800bf78 <HAL_TIM_PWM_Start+0x130>
 800bf76:	2300      	movs	r3, #0
 800bf78:	2b00      	cmp	r3, #0
 800bf7a:	d007      	beq.n	800bf8c <HAL_TIM_PWM_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800bf7c:	687b      	ldr	r3, [r7, #4]
 800bf7e:	681b      	ldr	r3, [r3, #0]
 800bf80:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800bf82:	687b      	ldr	r3, [r7, #4]
 800bf84:	681b      	ldr	r3, [r3, #0]
 800bf86:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800bf8a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800bf8c:	687b      	ldr	r3, [r7, #4]
 800bf8e:	681b      	ldr	r3, [r3, #0]
 800bf90:	4a16      	ldr	r2, [pc, #88]	; (800bfec <HAL_TIM_PWM_Start+0x1a4>)
 800bf92:	4293      	cmp	r3, r2
 800bf94:	d004      	beq.n	800bfa0 <HAL_TIM_PWM_Start+0x158>
 800bf96:	687b      	ldr	r3, [r7, #4]
 800bf98:	681b      	ldr	r3, [r3, #0]
 800bf9a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bf9e:	d115      	bne.n	800bfcc <HAL_TIM_PWM_Start+0x184>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800bfa0:	687b      	ldr	r3, [r7, #4]
 800bfa2:	681b      	ldr	r3, [r3, #0]
 800bfa4:	689a      	ldr	r2, [r3, #8]
 800bfa6:	4b14      	ldr	r3, [pc, #80]	; (800bff8 <HAL_TIM_PWM_Start+0x1b0>)
 800bfa8:	4013      	ands	r3, r2
 800bfaa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bfac:	68fb      	ldr	r3, [r7, #12]
 800bfae:	2b06      	cmp	r3, #6
 800bfb0:	d015      	beq.n	800bfde <HAL_TIM_PWM_Start+0x196>
 800bfb2:	68fb      	ldr	r3, [r7, #12]
 800bfb4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bfb8:	d011      	beq.n	800bfde <HAL_TIM_PWM_Start+0x196>
    {
      __HAL_TIM_ENABLE(htim);
 800bfba:	687b      	ldr	r3, [r7, #4]
 800bfbc:	681b      	ldr	r3, [r3, #0]
 800bfbe:	681a      	ldr	r2, [r3, #0]
 800bfc0:	687b      	ldr	r3, [r7, #4]
 800bfc2:	681b      	ldr	r3, [r3, #0]
 800bfc4:	f042 0201 	orr.w	r2, r2, #1
 800bfc8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bfca:	e008      	b.n	800bfde <HAL_TIM_PWM_Start+0x196>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800bfcc:	687b      	ldr	r3, [r7, #4]
 800bfce:	681b      	ldr	r3, [r3, #0]
 800bfd0:	681a      	ldr	r2, [r3, #0]
 800bfd2:	687b      	ldr	r3, [r7, #4]
 800bfd4:	681b      	ldr	r3, [r3, #0]
 800bfd6:	f042 0201 	orr.w	r2, r2, #1
 800bfda:	601a      	str	r2, [r3, #0]
 800bfdc:	e000      	b.n	800bfe0 <HAL_TIM_PWM_Start+0x198>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bfde:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800bfe0:	2300      	movs	r3, #0
}
 800bfe2:	4618      	mov	r0, r3
 800bfe4:	3710      	adds	r7, #16
 800bfe6:	46bd      	mov	sp, r7
 800bfe8:	bd80      	pop	{r7, pc}
 800bfea:	bf00      	nop
 800bfec:	40012c00 	.word	0x40012c00
 800bff0:	40014400 	.word	0x40014400
 800bff4:	40014800 	.word	0x40014800
 800bff8:	00010007 	.word	0x00010007

0800bffc <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800bffc:	b580      	push	{r7, lr}
 800bffe:	b082      	sub	sp, #8
 800c000:	af00      	add	r7, sp, #0
 800c002:	6078      	str	r0, [r7, #4]
 800c004:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800c006:	687b      	ldr	r3, [r7, #4]
 800c008:	681b      	ldr	r3, [r3, #0]
 800c00a:	2200      	movs	r2, #0
 800c00c:	6839      	ldr	r1, [r7, #0]
 800c00e:	4618      	mov	r0, r3
 800c010:	f000 ff0c 	bl	800ce2c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800c014:	687b      	ldr	r3, [r7, #4]
 800c016:	681b      	ldr	r3, [r3, #0]
 800c018:	4a39      	ldr	r2, [pc, #228]	; (800c100 <HAL_TIM_PWM_Stop+0x104>)
 800c01a:	4293      	cmp	r3, r2
 800c01c:	d009      	beq.n	800c032 <HAL_TIM_PWM_Stop+0x36>
 800c01e:	687b      	ldr	r3, [r7, #4]
 800c020:	681b      	ldr	r3, [r3, #0]
 800c022:	4a38      	ldr	r2, [pc, #224]	; (800c104 <HAL_TIM_PWM_Stop+0x108>)
 800c024:	4293      	cmp	r3, r2
 800c026:	d004      	beq.n	800c032 <HAL_TIM_PWM_Stop+0x36>
 800c028:	687b      	ldr	r3, [r7, #4]
 800c02a:	681b      	ldr	r3, [r3, #0]
 800c02c:	4a36      	ldr	r2, [pc, #216]	; (800c108 <HAL_TIM_PWM_Stop+0x10c>)
 800c02e:	4293      	cmp	r3, r2
 800c030:	d101      	bne.n	800c036 <HAL_TIM_PWM_Stop+0x3a>
 800c032:	2301      	movs	r3, #1
 800c034:	e000      	b.n	800c038 <HAL_TIM_PWM_Stop+0x3c>
 800c036:	2300      	movs	r3, #0
 800c038:	2b00      	cmp	r3, #0
 800c03a:	d017      	beq.n	800c06c <HAL_TIM_PWM_Stop+0x70>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800c03c:	687b      	ldr	r3, [r7, #4]
 800c03e:	681b      	ldr	r3, [r3, #0]
 800c040:	6a1a      	ldr	r2, [r3, #32]
 800c042:	f241 1311 	movw	r3, #4369	; 0x1111
 800c046:	4013      	ands	r3, r2
 800c048:	2b00      	cmp	r3, #0
 800c04a:	d10f      	bne.n	800c06c <HAL_TIM_PWM_Stop+0x70>
 800c04c:	687b      	ldr	r3, [r7, #4]
 800c04e:	681b      	ldr	r3, [r3, #0]
 800c050:	6a1a      	ldr	r2, [r3, #32]
 800c052:	f240 4344 	movw	r3, #1092	; 0x444
 800c056:	4013      	ands	r3, r2
 800c058:	2b00      	cmp	r3, #0
 800c05a:	d107      	bne.n	800c06c <HAL_TIM_PWM_Stop+0x70>
 800c05c:	687b      	ldr	r3, [r7, #4]
 800c05e:	681b      	ldr	r3, [r3, #0]
 800c060:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c062:	687b      	ldr	r3, [r7, #4]
 800c064:	681b      	ldr	r3, [r3, #0]
 800c066:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800c06a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800c06c:	687b      	ldr	r3, [r7, #4]
 800c06e:	681b      	ldr	r3, [r3, #0]
 800c070:	6a1a      	ldr	r2, [r3, #32]
 800c072:	f241 1311 	movw	r3, #4369	; 0x1111
 800c076:	4013      	ands	r3, r2
 800c078:	2b00      	cmp	r3, #0
 800c07a:	d10f      	bne.n	800c09c <HAL_TIM_PWM_Stop+0xa0>
 800c07c:	687b      	ldr	r3, [r7, #4]
 800c07e:	681b      	ldr	r3, [r3, #0]
 800c080:	6a1a      	ldr	r2, [r3, #32]
 800c082:	f240 4344 	movw	r3, #1092	; 0x444
 800c086:	4013      	ands	r3, r2
 800c088:	2b00      	cmp	r3, #0
 800c08a:	d107      	bne.n	800c09c <HAL_TIM_PWM_Stop+0xa0>
 800c08c:	687b      	ldr	r3, [r7, #4]
 800c08e:	681b      	ldr	r3, [r3, #0]
 800c090:	681a      	ldr	r2, [r3, #0]
 800c092:	687b      	ldr	r3, [r7, #4]
 800c094:	681b      	ldr	r3, [r3, #0]
 800c096:	f022 0201 	bic.w	r2, r2, #1
 800c09a:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800c09c:	683b      	ldr	r3, [r7, #0]
 800c09e:	2b00      	cmp	r3, #0
 800c0a0:	d104      	bne.n	800c0ac <HAL_TIM_PWM_Stop+0xb0>
 800c0a2:	687b      	ldr	r3, [r7, #4]
 800c0a4:	2201      	movs	r2, #1
 800c0a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800c0aa:	e023      	b.n	800c0f4 <HAL_TIM_PWM_Stop+0xf8>
 800c0ac:	683b      	ldr	r3, [r7, #0]
 800c0ae:	2b04      	cmp	r3, #4
 800c0b0:	d104      	bne.n	800c0bc <HAL_TIM_PWM_Stop+0xc0>
 800c0b2:	687b      	ldr	r3, [r7, #4]
 800c0b4:	2201      	movs	r2, #1
 800c0b6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800c0ba:	e01b      	b.n	800c0f4 <HAL_TIM_PWM_Stop+0xf8>
 800c0bc:	683b      	ldr	r3, [r7, #0]
 800c0be:	2b08      	cmp	r3, #8
 800c0c0:	d104      	bne.n	800c0cc <HAL_TIM_PWM_Stop+0xd0>
 800c0c2:	687b      	ldr	r3, [r7, #4]
 800c0c4:	2201      	movs	r2, #1
 800c0c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800c0ca:	e013      	b.n	800c0f4 <HAL_TIM_PWM_Stop+0xf8>
 800c0cc:	683b      	ldr	r3, [r7, #0]
 800c0ce:	2b0c      	cmp	r3, #12
 800c0d0:	d104      	bne.n	800c0dc <HAL_TIM_PWM_Stop+0xe0>
 800c0d2:	687b      	ldr	r3, [r7, #4]
 800c0d4:	2201      	movs	r2, #1
 800c0d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800c0da:	e00b      	b.n	800c0f4 <HAL_TIM_PWM_Stop+0xf8>
 800c0dc:	683b      	ldr	r3, [r7, #0]
 800c0de:	2b10      	cmp	r3, #16
 800c0e0:	d104      	bne.n	800c0ec <HAL_TIM_PWM_Stop+0xf0>
 800c0e2:	687b      	ldr	r3, [r7, #4]
 800c0e4:	2201      	movs	r2, #1
 800c0e6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800c0ea:	e003      	b.n	800c0f4 <HAL_TIM_PWM_Stop+0xf8>
 800c0ec:	687b      	ldr	r3, [r7, #4]
 800c0ee:	2201      	movs	r2, #1
 800c0f0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 800c0f4:	2300      	movs	r3, #0
}
 800c0f6:	4618      	mov	r0, r3
 800c0f8:	3708      	adds	r7, #8
 800c0fa:	46bd      	mov	sp, r7
 800c0fc:	bd80      	pop	{r7, pc}
 800c0fe:	bf00      	nop
 800c100:	40012c00 	.word	0x40012c00
 800c104:	40014400 	.word	0x40014400
 800c108:	40014800 	.word	0x40014800

0800c10c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800c10c:	b580      	push	{r7, lr}
 800c10e:	b082      	sub	sp, #8
 800c110:	af00      	add	r7, sp, #0
 800c112:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800c114:	687b      	ldr	r3, [r7, #4]
 800c116:	681b      	ldr	r3, [r3, #0]
 800c118:	691b      	ldr	r3, [r3, #16]
 800c11a:	f003 0302 	and.w	r3, r3, #2
 800c11e:	2b02      	cmp	r3, #2
 800c120:	d122      	bne.n	800c168 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800c122:	687b      	ldr	r3, [r7, #4]
 800c124:	681b      	ldr	r3, [r3, #0]
 800c126:	68db      	ldr	r3, [r3, #12]
 800c128:	f003 0302 	and.w	r3, r3, #2
 800c12c:	2b02      	cmp	r3, #2
 800c12e:	d11b      	bne.n	800c168 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800c130:	687b      	ldr	r3, [r7, #4]
 800c132:	681b      	ldr	r3, [r3, #0]
 800c134:	f06f 0202 	mvn.w	r2, #2
 800c138:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800c13a:	687b      	ldr	r3, [r7, #4]
 800c13c:	2201      	movs	r2, #1
 800c13e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800c140:	687b      	ldr	r3, [r7, #4]
 800c142:	681b      	ldr	r3, [r3, #0]
 800c144:	699b      	ldr	r3, [r3, #24]
 800c146:	f003 0303 	and.w	r3, r3, #3
 800c14a:	2b00      	cmp	r3, #0
 800c14c:	d003      	beq.n	800c156 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800c14e:	6878      	ldr	r0, [r7, #4]
 800c150:	f000 facf 	bl	800c6f2 <HAL_TIM_IC_CaptureCallback>
 800c154:	e005      	b.n	800c162 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800c156:	6878      	ldr	r0, [r7, #4]
 800c158:	f000 fac1 	bl	800c6de <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c15c:	6878      	ldr	r0, [r7, #4]
 800c15e:	f000 fad2 	bl	800c706 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c162:	687b      	ldr	r3, [r7, #4]
 800c164:	2200      	movs	r2, #0
 800c166:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800c168:	687b      	ldr	r3, [r7, #4]
 800c16a:	681b      	ldr	r3, [r3, #0]
 800c16c:	691b      	ldr	r3, [r3, #16]
 800c16e:	f003 0304 	and.w	r3, r3, #4
 800c172:	2b04      	cmp	r3, #4
 800c174:	d122      	bne.n	800c1bc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800c176:	687b      	ldr	r3, [r7, #4]
 800c178:	681b      	ldr	r3, [r3, #0]
 800c17a:	68db      	ldr	r3, [r3, #12]
 800c17c:	f003 0304 	and.w	r3, r3, #4
 800c180:	2b04      	cmp	r3, #4
 800c182:	d11b      	bne.n	800c1bc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800c184:	687b      	ldr	r3, [r7, #4]
 800c186:	681b      	ldr	r3, [r3, #0]
 800c188:	f06f 0204 	mvn.w	r2, #4
 800c18c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800c18e:	687b      	ldr	r3, [r7, #4]
 800c190:	2202      	movs	r2, #2
 800c192:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800c194:	687b      	ldr	r3, [r7, #4]
 800c196:	681b      	ldr	r3, [r3, #0]
 800c198:	699b      	ldr	r3, [r3, #24]
 800c19a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c19e:	2b00      	cmp	r3, #0
 800c1a0:	d003      	beq.n	800c1aa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c1a2:	6878      	ldr	r0, [r7, #4]
 800c1a4:	f000 faa5 	bl	800c6f2 <HAL_TIM_IC_CaptureCallback>
 800c1a8:	e005      	b.n	800c1b6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c1aa:	6878      	ldr	r0, [r7, #4]
 800c1ac:	f000 fa97 	bl	800c6de <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c1b0:	6878      	ldr	r0, [r7, #4]
 800c1b2:	f000 faa8 	bl	800c706 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c1b6:	687b      	ldr	r3, [r7, #4]
 800c1b8:	2200      	movs	r2, #0
 800c1ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800c1bc:	687b      	ldr	r3, [r7, #4]
 800c1be:	681b      	ldr	r3, [r3, #0]
 800c1c0:	691b      	ldr	r3, [r3, #16]
 800c1c2:	f003 0308 	and.w	r3, r3, #8
 800c1c6:	2b08      	cmp	r3, #8
 800c1c8:	d122      	bne.n	800c210 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800c1ca:	687b      	ldr	r3, [r7, #4]
 800c1cc:	681b      	ldr	r3, [r3, #0]
 800c1ce:	68db      	ldr	r3, [r3, #12]
 800c1d0:	f003 0308 	and.w	r3, r3, #8
 800c1d4:	2b08      	cmp	r3, #8
 800c1d6:	d11b      	bne.n	800c210 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800c1d8:	687b      	ldr	r3, [r7, #4]
 800c1da:	681b      	ldr	r3, [r3, #0]
 800c1dc:	f06f 0208 	mvn.w	r2, #8
 800c1e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800c1e2:	687b      	ldr	r3, [r7, #4]
 800c1e4:	2204      	movs	r2, #4
 800c1e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800c1e8:	687b      	ldr	r3, [r7, #4]
 800c1ea:	681b      	ldr	r3, [r3, #0]
 800c1ec:	69db      	ldr	r3, [r3, #28]
 800c1ee:	f003 0303 	and.w	r3, r3, #3
 800c1f2:	2b00      	cmp	r3, #0
 800c1f4:	d003      	beq.n	800c1fe <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c1f6:	6878      	ldr	r0, [r7, #4]
 800c1f8:	f000 fa7b 	bl	800c6f2 <HAL_TIM_IC_CaptureCallback>
 800c1fc:	e005      	b.n	800c20a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c1fe:	6878      	ldr	r0, [r7, #4]
 800c200:	f000 fa6d 	bl	800c6de <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c204:	6878      	ldr	r0, [r7, #4]
 800c206:	f000 fa7e 	bl	800c706 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c20a:	687b      	ldr	r3, [r7, #4]
 800c20c:	2200      	movs	r2, #0
 800c20e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800c210:	687b      	ldr	r3, [r7, #4]
 800c212:	681b      	ldr	r3, [r3, #0]
 800c214:	691b      	ldr	r3, [r3, #16]
 800c216:	f003 0310 	and.w	r3, r3, #16
 800c21a:	2b10      	cmp	r3, #16
 800c21c:	d122      	bne.n	800c264 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800c21e:	687b      	ldr	r3, [r7, #4]
 800c220:	681b      	ldr	r3, [r3, #0]
 800c222:	68db      	ldr	r3, [r3, #12]
 800c224:	f003 0310 	and.w	r3, r3, #16
 800c228:	2b10      	cmp	r3, #16
 800c22a:	d11b      	bne.n	800c264 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800c22c:	687b      	ldr	r3, [r7, #4]
 800c22e:	681b      	ldr	r3, [r3, #0]
 800c230:	f06f 0210 	mvn.w	r2, #16
 800c234:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800c236:	687b      	ldr	r3, [r7, #4]
 800c238:	2208      	movs	r2, #8
 800c23a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800c23c:	687b      	ldr	r3, [r7, #4]
 800c23e:	681b      	ldr	r3, [r3, #0]
 800c240:	69db      	ldr	r3, [r3, #28]
 800c242:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c246:	2b00      	cmp	r3, #0
 800c248:	d003      	beq.n	800c252 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c24a:	6878      	ldr	r0, [r7, #4]
 800c24c:	f000 fa51 	bl	800c6f2 <HAL_TIM_IC_CaptureCallback>
 800c250:	e005      	b.n	800c25e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c252:	6878      	ldr	r0, [r7, #4]
 800c254:	f000 fa43 	bl	800c6de <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c258:	6878      	ldr	r0, [r7, #4]
 800c25a:	f000 fa54 	bl	800c706 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c25e:	687b      	ldr	r3, [r7, #4]
 800c260:	2200      	movs	r2, #0
 800c262:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800c264:	687b      	ldr	r3, [r7, #4]
 800c266:	681b      	ldr	r3, [r3, #0]
 800c268:	691b      	ldr	r3, [r3, #16]
 800c26a:	f003 0301 	and.w	r3, r3, #1
 800c26e:	2b01      	cmp	r3, #1
 800c270:	d10e      	bne.n	800c290 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800c272:	687b      	ldr	r3, [r7, #4]
 800c274:	681b      	ldr	r3, [r3, #0]
 800c276:	68db      	ldr	r3, [r3, #12]
 800c278:	f003 0301 	and.w	r3, r3, #1
 800c27c:	2b01      	cmp	r3, #1
 800c27e:	d107      	bne.n	800c290 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800c280:	687b      	ldr	r3, [r7, #4]
 800c282:	681b      	ldr	r3, [r3, #0]
 800c284:	f06f 0201 	mvn.w	r2, #1
 800c288:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800c28a:	6878      	ldr	r0, [r7, #4]
 800c28c:	f7fa fc7c 	bl	8006b88 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800c290:	687b      	ldr	r3, [r7, #4]
 800c292:	681b      	ldr	r3, [r3, #0]
 800c294:	691b      	ldr	r3, [r3, #16]
 800c296:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c29a:	2b80      	cmp	r3, #128	; 0x80
 800c29c:	d10e      	bne.n	800c2bc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800c29e:	687b      	ldr	r3, [r7, #4]
 800c2a0:	681b      	ldr	r3, [r3, #0]
 800c2a2:	68db      	ldr	r3, [r3, #12]
 800c2a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c2a8:	2b80      	cmp	r3, #128	; 0x80
 800c2aa:	d107      	bne.n	800c2bc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800c2ac:	687b      	ldr	r3, [r7, #4]
 800c2ae:	681b      	ldr	r3, [r3, #0]
 800c2b0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800c2b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800c2b6:	6878      	ldr	r0, [r7, #4]
 800c2b8:	f000 fed8 	bl	800d06c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800c2bc:	687b      	ldr	r3, [r7, #4]
 800c2be:	681b      	ldr	r3, [r3, #0]
 800c2c0:	691b      	ldr	r3, [r3, #16]
 800c2c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c2c6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c2ca:	d10e      	bne.n	800c2ea <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800c2cc:	687b      	ldr	r3, [r7, #4]
 800c2ce:	681b      	ldr	r3, [r3, #0]
 800c2d0:	68db      	ldr	r3, [r3, #12]
 800c2d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c2d6:	2b80      	cmp	r3, #128	; 0x80
 800c2d8:	d107      	bne.n	800c2ea <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800c2da:	687b      	ldr	r3, [r7, #4]
 800c2dc:	681b      	ldr	r3, [r3, #0]
 800c2de:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800c2e2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800c2e4:	6878      	ldr	r0, [r7, #4]
 800c2e6:	f000 fecb 	bl	800d080 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800c2ea:	687b      	ldr	r3, [r7, #4]
 800c2ec:	681b      	ldr	r3, [r3, #0]
 800c2ee:	691b      	ldr	r3, [r3, #16]
 800c2f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c2f4:	2b40      	cmp	r3, #64	; 0x40
 800c2f6:	d10e      	bne.n	800c316 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800c2f8:	687b      	ldr	r3, [r7, #4]
 800c2fa:	681b      	ldr	r3, [r3, #0]
 800c2fc:	68db      	ldr	r3, [r3, #12]
 800c2fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c302:	2b40      	cmp	r3, #64	; 0x40
 800c304:	d107      	bne.n	800c316 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800c306:	687b      	ldr	r3, [r7, #4]
 800c308:	681b      	ldr	r3, [r3, #0]
 800c30a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800c30e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800c310:	6878      	ldr	r0, [r7, #4]
 800c312:	f000 fa02 	bl	800c71a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800c316:	687b      	ldr	r3, [r7, #4]
 800c318:	681b      	ldr	r3, [r3, #0]
 800c31a:	691b      	ldr	r3, [r3, #16]
 800c31c:	f003 0320 	and.w	r3, r3, #32
 800c320:	2b20      	cmp	r3, #32
 800c322:	d10e      	bne.n	800c342 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800c324:	687b      	ldr	r3, [r7, #4]
 800c326:	681b      	ldr	r3, [r3, #0]
 800c328:	68db      	ldr	r3, [r3, #12]
 800c32a:	f003 0320 	and.w	r3, r3, #32
 800c32e:	2b20      	cmp	r3, #32
 800c330:	d107      	bne.n	800c342 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800c332:	687b      	ldr	r3, [r7, #4]
 800c334:	681b      	ldr	r3, [r3, #0]
 800c336:	f06f 0220 	mvn.w	r2, #32
 800c33a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800c33c:	6878      	ldr	r0, [r7, #4]
 800c33e:	f000 fe8b 	bl	800d058 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800c342:	bf00      	nop
 800c344:	3708      	adds	r7, #8
 800c346:	46bd      	mov	sp, r7
 800c348:	bd80      	pop	{r7, pc}
	...

0800c34c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800c34c:	b580      	push	{r7, lr}
 800c34e:	b084      	sub	sp, #16
 800c350:	af00      	add	r7, sp, #0
 800c352:	60f8      	str	r0, [r7, #12]
 800c354:	60b9      	str	r1, [r7, #8]
 800c356:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800c358:	68fb      	ldr	r3, [r7, #12]
 800c35a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c35e:	2b01      	cmp	r3, #1
 800c360:	d101      	bne.n	800c366 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800c362:	2302      	movs	r3, #2
 800c364:	e0fd      	b.n	800c562 <HAL_TIM_PWM_ConfigChannel+0x216>
 800c366:	68fb      	ldr	r3, [r7, #12]
 800c368:	2201      	movs	r2, #1
 800c36a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800c36e:	687b      	ldr	r3, [r7, #4]
 800c370:	2b14      	cmp	r3, #20
 800c372:	f200 80f0 	bhi.w	800c556 <HAL_TIM_PWM_ConfigChannel+0x20a>
 800c376:	a201      	add	r2, pc, #4	; (adr r2, 800c37c <HAL_TIM_PWM_ConfigChannel+0x30>)
 800c378:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c37c:	0800c3d1 	.word	0x0800c3d1
 800c380:	0800c557 	.word	0x0800c557
 800c384:	0800c557 	.word	0x0800c557
 800c388:	0800c557 	.word	0x0800c557
 800c38c:	0800c411 	.word	0x0800c411
 800c390:	0800c557 	.word	0x0800c557
 800c394:	0800c557 	.word	0x0800c557
 800c398:	0800c557 	.word	0x0800c557
 800c39c:	0800c453 	.word	0x0800c453
 800c3a0:	0800c557 	.word	0x0800c557
 800c3a4:	0800c557 	.word	0x0800c557
 800c3a8:	0800c557 	.word	0x0800c557
 800c3ac:	0800c493 	.word	0x0800c493
 800c3b0:	0800c557 	.word	0x0800c557
 800c3b4:	0800c557 	.word	0x0800c557
 800c3b8:	0800c557 	.word	0x0800c557
 800c3bc:	0800c4d5 	.word	0x0800c4d5
 800c3c0:	0800c557 	.word	0x0800c557
 800c3c4:	0800c557 	.word	0x0800c557
 800c3c8:	0800c557 	.word	0x0800c557
 800c3cc:	0800c515 	.word	0x0800c515
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800c3d0:	68fb      	ldr	r3, [r7, #12]
 800c3d2:	681b      	ldr	r3, [r3, #0]
 800c3d4:	68b9      	ldr	r1, [r7, #8]
 800c3d6:	4618      	mov	r0, r3
 800c3d8:	f000 fa0e 	bl	800c7f8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800c3dc:	68fb      	ldr	r3, [r7, #12]
 800c3de:	681b      	ldr	r3, [r3, #0]
 800c3e0:	699a      	ldr	r2, [r3, #24]
 800c3e2:	68fb      	ldr	r3, [r7, #12]
 800c3e4:	681b      	ldr	r3, [r3, #0]
 800c3e6:	f042 0208 	orr.w	r2, r2, #8
 800c3ea:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800c3ec:	68fb      	ldr	r3, [r7, #12]
 800c3ee:	681b      	ldr	r3, [r3, #0]
 800c3f0:	699a      	ldr	r2, [r3, #24]
 800c3f2:	68fb      	ldr	r3, [r7, #12]
 800c3f4:	681b      	ldr	r3, [r3, #0]
 800c3f6:	f022 0204 	bic.w	r2, r2, #4
 800c3fa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800c3fc:	68fb      	ldr	r3, [r7, #12]
 800c3fe:	681b      	ldr	r3, [r3, #0]
 800c400:	6999      	ldr	r1, [r3, #24]
 800c402:	68bb      	ldr	r3, [r7, #8]
 800c404:	691a      	ldr	r2, [r3, #16]
 800c406:	68fb      	ldr	r3, [r7, #12]
 800c408:	681b      	ldr	r3, [r3, #0]
 800c40a:	430a      	orrs	r2, r1
 800c40c:	619a      	str	r2, [r3, #24]
      break;
 800c40e:	e0a3      	b.n	800c558 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800c410:	68fb      	ldr	r3, [r7, #12]
 800c412:	681b      	ldr	r3, [r3, #0]
 800c414:	68b9      	ldr	r1, [r7, #8]
 800c416:	4618      	mov	r0, r3
 800c418:	f000 fa6a 	bl	800c8f0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800c41c:	68fb      	ldr	r3, [r7, #12]
 800c41e:	681b      	ldr	r3, [r3, #0]
 800c420:	699a      	ldr	r2, [r3, #24]
 800c422:	68fb      	ldr	r3, [r7, #12]
 800c424:	681b      	ldr	r3, [r3, #0]
 800c426:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800c42a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800c42c:	68fb      	ldr	r3, [r7, #12]
 800c42e:	681b      	ldr	r3, [r3, #0]
 800c430:	699a      	ldr	r2, [r3, #24]
 800c432:	68fb      	ldr	r3, [r7, #12]
 800c434:	681b      	ldr	r3, [r3, #0]
 800c436:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c43a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800c43c:	68fb      	ldr	r3, [r7, #12]
 800c43e:	681b      	ldr	r3, [r3, #0]
 800c440:	6999      	ldr	r1, [r3, #24]
 800c442:	68bb      	ldr	r3, [r7, #8]
 800c444:	691b      	ldr	r3, [r3, #16]
 800c446:	021a      	lsls	r2, r3, #8
 800c448:	68fb      	ldr	r3, [r7, #12]
 800c44a:	681b      	ldr	r3, [r3, #0]
 800c44c:	430a      	orrs	r2, r1
 800c44e:	619a      	str	r2, [r3, #24]
      break;
 800c450:	e082      	b.n	800c558 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800c452:	68fb      	ldr	r3, [r7, #12]
 800c454:	681b      	ldr	r3, [r3, #0]
 800c456:	68b9      	ldr	r1, [r7, #8]
 800c458:	4618      	mov	r0, r3
 800c45a:	f000 fac3 	bl	800c9e4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800c45e:	68fb      	ldr	r3, [r7, #12]
 800c460:	681b      	ldr	r3, [r3, #0]
 800c462:	69da      	ldr	r2, [r3, #28]
 800c464:	68fb      	ldr	r3, [r7, #12]
 800c466:	681b      	ldr	r3, [r3, #0]
 800c468:	f042 0208 	orr.w	r2, r2, #8
 800c46c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800c46e:	68fb      	ldr	r3, [r7, #12]
 800c470:	681b      	ldr	r3, [r3, #0]
 800c472:	69da      	ldr	r2, [r3, #28]
 800c474:	68fb      	ldr	r3, [r7, #12]
 800c476:	681b      	ldr	r3, [r3, #0]
 800c478:	f022 0204 	bic.w	r2, r2, #4
 800c47c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800c47e:	68fb      	ldr	r3, [r7, #12]
 800c480:	681b      	ldr	r3, [r3, #0]
 800c482:	69d9      	ldr	r1, [r3, #28]
 800c484:	68bb      	ldr	r3, [r7, #8]
 800c486:	691a      	ldr	r2, [r3, #16]
 800c488:	68fb      	ldr	r3, [r7, #12]
 800c48a:	681b      	ldr	r3, [r3, #0]
 800c48c:	430a      	orrs	r2, r1
 800c48e:	61da      	str	r2, [r3, #28]
      break;
 800c490:	e062      	b.n	800c558 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800c492:	68fb      	ldr	r3, [r7, #12]
 800c494:	681b      	ldr	r3, [r3, #0]
 800c496:	68b9      	ldr	r1, [r7, #8]
 800c498:	4618      	mov	r0, r3
 800c49a:	f000 fb1b 	bl	800cad4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800c49e:	68fb      	ldr	r3, [r7, #12]
 800c4a0:	681b      	ldr	r3, [r3, #0]
 800c4a2:	69da      	ldr	r2, [r3, #28]
 800c4a4:	68fb      	ldr	r3, [r7, #12]
 800c4a6:	681b      	ldr	r3, [r3, #0]
 800c4a8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800c4ac:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800c4ae:	68fb      	ldr	r3, [r7, #12]
 800c4b0:	681b      	ldr	r3, [r3, #0]
 800c4b2:	69da      	ldr	r2, [r3, #28]
 800c4b4:	68fb      	ldr	r3, [r7, #12]
 800c4b6:	681b      	ldr	r3, [r3, #0]
 800c4b8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c4bc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800c4be:	68fb      	ldr	r3, [r7, #12]
 800c4c0:	681b      	ldr	r3, [r3, #0]
 800c4c2:	69d9      	ldr	r1, [r3, #28]
 800c4c4:	68bb      	ldr	r3, [r7, #8]
 800c4c6:	691b      	ldr	r3, [r3, #16]
 800c4c8:	021a      	lsls	r2, r3, #8
 800c4ca:	68fb      	ldr	r3, [r7, #12]
 800c4cc:	681b      	ldr	r3, [r3, #0]
 800c4ce:	430a      	orrs	r2, r1
 800c4d0:	61da      	str	r2, [r3, #28]
      break;
 800c4d2:	e041      	b.n	800c558 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800c4d4:	68fb      	ldr	r3, [r7, #12]
 800c4d6:	681b      	ldr	r3, [r3, #0]
 800c4d8:	68b9      	ldr	r1, [r7, #8]
 800c4da:	4618      	mov	r0, r3
 800c4dc:	f000 fb58 	bl	800cb90 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800c4e0:	68fb      	ldr	r3, [r7, #12]
 800c4e2:	681b      	ldr	r3, [r3, #0]
 800c4e4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c4e6:	68fb      	ldr	r3, [r7, #12]
 800c4e8:	681b      	ldr	r3, [r3, #0]
 800c4ea:	f042 0208 	orr.w	r2, r2, #8
 800c4ee:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800c4f0:	68fb      	ldr	r3, [r7, #12]
 800c4f2:	681b      	ldr	r3, [r3, #0]
 800c4f4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c4f6:	68fb      	ldr	r3, [r7, #12]
 800c4f8:	681b      	ldr	r3, [r3, #0]
 800c4fa:	f022 0204 	bic.w	r2, r2, #4
 800c4fe:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800c500:	68fb      	ldr	r3, [r7, #12]
 800c502:	681b      	ldr	r3, [r3, #0]
 800c504:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800c506:	68bb      	ldr	r3, [r7, #8]
 800c508:	691a      	ldr	r2, [r3, #16]
 800c50a:	68fb      	ldr	r3, [r7, #12]
 800c50c:	681b      	ldr	r3, [r3, #0]
 800c50e:	430a      	orrs	r2, r1
 800c510:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800c512:	e021      	b.n	800c558 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800c514:	68fb      	ldr	r3, [r7, #12]
 800c516:	681b      	ldr	r3, [r3, #0]
 800c518:	68b9      	ldr	r1, [r7, #8]
 800c51a:	4618      	mov	r0, r3
 800c51c:	f000 fb90 	bl	800cc40 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800c520:	68fb      	ldr	r3, [r7, #12]
 800c522:	681b      	ldr	r3, [r3, #0]
 800c524:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c526:	68fb      	ldr	r3, [r7, #12]
 800c528:	681b      	ldr	r3, [r3, #0]
 800c52a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800c52e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800c530:	68fb      	ldr	r3, [r7, #12]
 800c532:	681b      	ldr	r3, [r3, #0]
 800c534:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c536:	68fb      	ldr	r3, [r7, #12]
 800c538:	681b      	ldr	r3, [r3, #0]
 800c53a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c53e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800c540:	68fb      	ldr	r3, [r7, #12]
 800c542:	681b      	ldr	r3, [r3, #0]
 800c544:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800c546:	68bb      	ldr	r3, [r7, #8]
 800c548:	691b      	ldr	r3, [r3, #16]
 800c54a:	021a      	lsls	r2, r3, #8
 800c54c:	68fb      	ldr	r3, [r7, #12]
 800c54e:	681b      	ldr	r3, [r3, #0]
 800c550:	430a      	orrs	r2, r1
 800c552:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800c554:	e000      	b.n	800c558 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 800c556:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800c558:	68fb      	ldr	r3, [r7, #12]
 800c55a:	2200      	movs	r2, #0
 800c55c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800c560:	2300      	movs	r3, #0
}
 800c562:	4618      	mov	r0, r3
 800c564:	3710      	adds	r7, #16
 800c566:	46bd      	mov	sp, r7
 800c568:	bd80      	pop	{r7, pc}
 800c56a:	bf00      	nop

0800c56c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800c56c:	b580      	push	{r7, lr}
 800c56e:	b084      	sub	sp, #16
 800c570:	af00      	add	r7, sp, #0
 800c572:	6078      	str	r0, [r7, #4]
 800c574:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800c576:	687b      	ldr	r3, [r7, #4]
 800c578:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c57c:	2b01      	cmp	r3, #1
 800c57e:	d101      	bne.n	800c584 <HAL_TIM_ConfigClockSource+0x18>
 800c580:	2302      	movs	r3, #2
 800c582:	e0a8      	b.n	800c6d6 <HAL_TIM_ConfigClockSource+0x16a>
 800c584:	687b      	ldr	r3, [r7, #4]
 800c586:	2201      	movs	r2, #1
 800c588:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800c58c:	687b      	ldr	r3, [r7, #4]
 800c58e:	2202      	movs	r2, #2
 800c590:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800c594:	687b      	ldr	r3, [r7, #4]
 800c596:	681b      	ldr	r3, [r3, #0]
 800c598:	689b      	ldr	r3, [r3, #8]
 800c59a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800c59c:	68fb      	ldr	r3, [r7, #12]
 800c59e:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 800c5a2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800c5a6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c5a8:	68fb      	ldr	r3, [r7, #12]
 800c5aa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800c5ae:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800c5b0:	687b      	ldr	r3, [r7, #4]
 800c5b2:	681b      	ldr	r3, [r3, #0]
 800c5b4:	68fa      	ldr	r2, [r7, #12]
 800c5b6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800c5b8:	683b      	ldr	r3, [r7, #0]
 800c5ba:	681b      	ldr	r3, [r3, #0]
 800c5bc:	2b40      	cmp	r3, #64	; 0x40
 800c5be:	d067      	beq.n	800c690 <HAL_TIM_ConfigClockSource+0x124>
 800c5c0:	2b40      	cmp	r3, #64	; 0x40
 800c5c2:	d80b      	bhi.n	800c5dc <HAL_TIM_ConfigClockSource+0x70>
 800c5c4:	2b10      	cmp	r3, #16
 800c5c6:	d073      	beq.n	800c6b0 <HAL_TIM_ConfigClockSource+0x144>
 800c5c8:	2b10      	cmp	r3, #16
 800c5ca:	d802      	bhi.n	800c5d2 <HAL_TIM_ConfigClockSource+0x66>
 800c5cc:	2b00      	cmp	r3, #0
 800c5ce:	d06f      	beq.n	800c6b0 <HAL_TIM_ConfigClockSource+0x144>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800c5d0:	e078      	b.n	800c6c4 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 800c5d2:	2b20      	cmp	r3, #32
 800c5d4:	d06c      	beq.n	800c6b0 <HAL_TIM_ConfigClockSource+0x144>
 800c5d6:	2b30      	cmp	r3, #48	; 0x30
 800c5d8:	d06a      	beq.n	800c6b0 <HAL_TIM_ConfigClockSource+0x144>
      break;
 800c5da:	e073      	b.n	800c6c4 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 800c5dc:	2b70      	cmp	r3, #112	; 0x70
 800c5de:	d00d      	beq.n	800c5fc <HAL_TIM_ConfigClockSource+0x90>
 800c5e0:	2b70      	cmp	r3, #112	; 0x70
 800c5e2:	d804      	bhi.n	800c5ee <HAL_TIM_ConfigClockSource+0x82>
 800c5e4:	2b50      	cmp	r3, #80	; 0x50
 800c5e6:	d033      	beq.n	800c650 <HAL_TIM_ConfigClockSource+0xe4>
 800c5e8:	2b60      	cmp	r3, #96	; 0x60
 800c5ea:	d041      	beq.n	800c670 <HAL_TIM_ConfigClockSource+0x104>
      break;
 800c5ec:	e06a      	b.n	800c6c4 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 800c5ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c5f2:	d066      	beq.n	800c6c2 <HAL_TIM_ConfigClockSource+0x156>
 800c5f4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c5f8:	d017      	beq.n	800c62a <HAL_TIM_ConfigClockSource+0xbe>
      break;
 800c5fa:	e063      	b.n	800c6c4 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 800c5fc:	687b      	ldr	r3, [r7, #4]
 800c5fe:	6818      	ldr	r0, [r3, #0]
 800c600:	683b      	ldr	r3, [r7, #0]
 800c602:	6899      	ldr	r1, [r3, #8]
 800c604:	683b      	ldr	r3, [r7, #0]
 800c606:	685a      	ldr	r2, [r3, #4]
 800c608:	683b      	ldr	r3, [r7, #0]
 800c60a:	68db      	ldr	r3, [r3, #12]
 800c60c:	f000 fbee 	bl	800cdec <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800c610:	687b      	ldr	r3, [r7, #4]
 800c612:	681b      	ldr	r3, [r3, #0]
 800c614:	689b      	ldr	r3, [r3, #8]
 800c616:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800c618:	68fb      	ldr	r3, [r7, #12]
 800c61a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800c61e:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800c620:	687b      	ldr	r3, [r7, #4]
 800c622:	681b      	ldr	r3, [r3, #0]
 800c624:	68fa      	ldr	r2, [r7, #12]
 800c626:	609a      	str	r2, [r3, #8]
      break;
 800c628:	e04c      	b.n	800c6c4 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 800c62a:	687b      	ldr	r3, [r7, #4]
 800c62c:	6818      	ldr	r0, [r3, #0]
 800c62e:	683b      	ldr	r3, [r7, #0]
 800c630:	6899      	ldr	r1, [r3, #8]
 800c632:	683b      	ldr	r3, [r7, #0]
 800c634:	685a      	ldr	r2, [r3, #4]
 800c636:	683b      	ldr	r3, [r7, #0]
 800c638:	68db      	ldr	r3, [r3, #12]
 800c63a:	f000 fbd7 	bl	800cdec <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800c63e:	687b      	ldr	r3, [r7, #4]
 800c640:	681b      	ldr	r3, [r3, #0]
 800c642:	689a      	ldr	r2, [r3, #8]
 800c644:	687b      	ldr	r3, [r7, #4]
 800c646:	681b      	ldr	r3, [r3, #0]
 800c648:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800c64c:	609a      	str	r2, [r3, #8]
      break;
 800c64e:	e039      	b.n	800c6c4 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800c650:	687b      	ldr	r3, [r7, #4]
 800c652:	6818      	ldr	r0, [r3, #0]
 800c654:	683b      	ldr	r3, [r7, #0]
 800c656:	6859      	ldr	r1, [r3, #4]
 800c658:	683b      	ldr	r3, [r7, #0]
 800c65a:	68db      	ldr	r3, [r3, #12]
 800c65c:	461a      	mov	r2, r3
 800c65e:	f000 fb49 	bl	800ccf4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800c662:	687b      	ldr	r3, [r7, #4]
 800c664:	681b      	ldr	r3, [r3, #0]
 800c666:	2150      	movs	r1, #80	; 0x50
 800c668:	4618      	mov	r0, r3
 800c66a:	f000 fba2 	bl	800cdb2 <TIM_ITRx_SetConfig>
      break;
 800c66e:	e029      	b.n	800c6c4 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800c670:	687b      	ldr	r3, [r7, #4]
 800c672:	6818      	ldr	r0, [r3, #0]
 800c674:	683b      	ldr	r3, [r7, #0]
 800c676:	6859      	ldr	r1, [r3, #4]
 800c678:	683b      	ldr	r3, [r7, #0]
 800c67a:	68db      	ldr	r3, [r3, #12]
 800c67c:	461a      	mov	r2, r3
 800c67e:	f000 fb68 	bl	800cd52 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800c682:	687b      	ldr	r3, [r7, #4]
 800c684:	681b      	ldr	r3, [r3, #0]
 800c686:	2160      	movs	r1, #96	; 0x60
 800c688:	4618      	mov	r0, r3
 800c68a:	f000 fb92 	bl	800cdb2 <TIM_ITRx_SetConfig>
      break;
 800c68e:	e019      	b.n	800c6c4 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800c690:	687b      	ldr	r3, [r7, #4]
 800c692:	6818      	ldr	r0, [r3, #0]
 800c694:	683b      	ldr	r3, [r7, #0]
 800c696:	6859      	ldr	r1, [r3, #4]
 800c698:	683b      	ldr	r3, [r7, #0]
 800c69a:	68db      	ldr	r3, [r3, #12]
 800c69c:	461a      	mov	r2, r3
 800c69e:	f000 fb29 	bl	800ccf4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800c6a2:	687b      	ldr	r3, [r7, #4]
 800c6a4:	681b      	ldr	r3, [r3, #0]
 800c6a6:	2140      	movs	r1, #64	; 0x40
 800c6a8:	4618      	mov	r0, r3
 800c6aa:	f000 fb82 	bl	800cdb2 <TIM_ITRx_SetConfig>
      break;
 800c6ae:	e009      	b.n	800c6c4 <HAL_TIM_ConfigClockSource+0x158>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800c6b0:	687b      	ldr	r3, [r7, #4]
 800c6b2:	681a      	ldr	r2, [r3, #0]
 800c6b4:	683b      	ldr	r3, [r7, #0]
 800c6b6:	681b      	ldr	r3, [r3, #0]
 800c6b8:	4619      	mov	r1, r3
 800c6ba:	4610      	mov	r0, r2
 800c6bc:	f000 fb79 	bl	800cdb2 <TIM_ITRx_SetConfig>
        break;
 800c6c0:	e000      	b.n	800c6c4 <HAL_TIM_ConfigClockSource+0x158>
      break;
 800c6c2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800c6c4:	687b      	ldr	r3, [r7, #4]
 800c6c6:	2201      	movs	r2, #1
 800c6c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800c6cc:	687b      	ldr	r3, [r7, #4]
 800c6ce:	2200      	movs	r2, #0
 800c6d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800c6d4:	2300      	movs	r3, #0
}
 800c6d6:	4618      	mov	r0, r3
 800c6d8:	3710      	adds	r7, #16
 800c6da:	46bd      	mov	sp, r7
 800c6dc:	bd80      	pop	{r7, pc}

0800c6de <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800c6de:	b480      	push	{r7}
 800c6e0:	b083      	sub	sp, #12
 800c6e2:	af00      	add	r7, sp, #0
 800c6e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800c6e6:	bf00      	nop
 800c6e8:	370c      	adds	r7, #12
 800c6ea:	46bd      	mov	sp, r7
 800c6ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6f0:	4770      	bx	lr

0800c6f2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800c6f2:	b480      	push	{r7}
 800c6f4:	b083      	sub	sp, #12
 800c6f6:	af00      	add	r7, sp, #0
 800c6f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800c6fa:	bf00      	nop
 800c6fc:	370c      	adds	r7, #12
 800c6fe:	46bd      	mov	sp, r7
 800c700:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c704:	4770      	bx	lr

0800c706 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800c706:	b480      	push	{r7}
 800c708:	b083      	sub	sp, #12
 800c70a:	af00      	add	r7, sp, #0
 800c70c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800c70e:	bf00      	nop
 800c710:	370c      	adds	r7, #12
 800c712:	46bd      	mov	sp, r7
 800c714:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c718:	4770      	bx	lr

0800c71a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800c71a:	b480      	push	{r7}
 800c71c:	b083      	sub	sp, #12
 800c71e:	af00      	add	r7, sp, #0
 800c720:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800c722:	bf00      	nop
 800c724:	370c      	adds	r7, #12
 800c726:	46bd      	mov	sp, r7
 800c728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c72c:	4770      	bx	lr
	...

0800c730 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800c730:	b480      	push	{r7}
 800c732:	b085      	sub	sp, #20
 800c734:	af00      	add	r7, sp, #0
 800c736:	6078      	str	r0, [r7, #4]
 800c738:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800c73a:	687b      	ldr	r3, [r7, #4]
 800c73c:	681b      	ldr	r3, [r3, #0]
 800c73e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800c740:	687b      	ldr	r3, [r7, #4]
 800c742:	4a2a      	ldr	r2, [pc, #168]	; (800c7ec <TIM_Base_SetConfig+0xbc>)
 800c744:	4293      	cmp	r3, r2
 800c746:	d003      	beq.n	800c750 <TIM_Base_SetConfig+0x20>
 800c748:	687b      	ldr	r3, [r7, #4]
 800c74a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c74e:	d108      	bne.n	800c762 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800c750:	68fb      	ldr	r3, [r7, #12]
 800c752:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c756:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800c758:	683b      	ldr	r3, [r7, #0]
 800c75a:	685b      	ldr	r3, [r3, #4]
 800c75c:	68fa      	ldr	r2, [r7, #12]
 800c75e:	4313      	orrs	r3, r2
 800c760:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800c762:	687b      	ldr	r3, [r7, #4]
 800c764:	4a21      	ldr	r2, [pc, #132]	; (800c7ec <TIM_Base_SetConfig+0xbc>)
 800c766:	4293      	cmp	r3, r2
 800c768:	d00b      	beq.n	800c782 <TIM_Base_SetConfig+0x52>
 800c76a:	687b      	ldr	r3, [r7, #4]
 800c76c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c770:	d007      	beq.n	800c782 <TIM_Base_SetConfig+0x52>
 800c772:	687b      	ldr	r3, [r7, #4]
 800c774:	4a1e      	ldr	r2, [pc, #120]	; (800c7f0 <TIM_Base_SetConfig+0xc0>)
 800c776:	4293      	cmp	r3, r2
 800c778:	d003      	beq.n	800c782 <TIM_Base_SetConfig+0x52>
 800c77a:	687b      	ldr	r3, [r7, #4]
 800c77c:	4a1d      	ldr	r2, [pc, #116]	; (800c7f4 <TIM_Base_SetConfig+0xc4>)
 800c77e:	4293      	cmp	r3, r2
 800c780:	d108      	bne.n	800c794 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800c782:	68fb      	ldr	r3, [r7, #12]
 800c784:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c788:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800c78a:	683b      	ldr	r3, [r7, #0]
 800c78c:	68db      	ldr	r3, [r3, #12]
 800c78e:	68fa      	ldr	r2, [r7, #12]
 800c790:	4313      	orrs	r3, r2
 800c792:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800c794:	68fb      	ldr	r3, [r7, #12]
 800c796:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800c79a:	683b      	ldr	r3, [r7, #0]
 800c79c:	695b      	ldr	r3, [r3, #20]
 800c79e:	4313      	orrs	r3, r2
 800c7a0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800c7a2:	687b      	ldr	r3, [r7, #4]
 800c7a4:	68fa      	ldr	r2, [r7, #12]
 800c7a6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800c7a8:	683b      	ldr	r3, [r7, #0]
 800c7aa:	689a      	ldr	r2, [r3, #8]
 800c7ac:	687b      	ldr	r3, [r7, #4]
 800c7ae:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800c7b0:	683b      	ldr	r3, [r7, #0]
 800c7b2:	681a      	ldr	r2, [r3, #0]
 800c7b4:	687b      	ldr	r3, [r7, #4]
 800c7b6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800c7b8:	687b      	ldr	r3, [r7, #4]
 800c7ba:	4a0c      	ldr	r2, [pc, #48]	; (800c7ec <TIM_Base_SetConfig+0xbc>)
 800c7bc:	4293      	cmp	r3, r2
 800c7be:	d007      	beq.n	800c7d0 <TIM_Base_SetConfig+0xa0>
 800c7c0:	687b      	ldr	r3, [r7, #4]
 800c7c2:	4a0b      	ldr	r2, [pc, #44]	; (800c7f0 <TIM_Base_SetConfig+0xc0>)
 800c7c4:	4293      	cmp	r3, r2
 800c7c6:	d003      	beq.n	800c7d0 <TIM_Base_SetConfig+0xa0>
 800c7c8:	687b      	ldr	r3, [r7, #4]
 800c7ca:	4a0a      	ldr	r2, [pc, #40]	; (800c7f4 <TIM_Base_SetConfig+0xc4>)
 800c7cc:	4293      	cmp	r3, r2
 800c7ce:	d103      	bne.n	800c7d8 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800c7d0:	683b      	ldr	r3, [r7, #0]
 800c7d2:	691a      	ldr	r2, [r3, #16]
 800c7d4:	687b      	ldr	r3, [r7, #4]
 800c7d6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800c7d8:	687b      	ldr	r3, [r7, #4]
 800c7da:	2201      	movs	r2, #1
 800c7dc:	615a      	str	r2, [r3, #20]
}
 800c7de:	bf00      	nop
 800c7e0:	3714      	adds	r7, #20
 800c7e2:	46bd      	mov	sp, r7
 800c7e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7e8:	4770      	bx	lr
 800c7ea:	bf00      	nop
 800c7ec:	40012c00 	.word	0x40012c00
 800c7f0:	40014400 	.word	0x40014400
 800c7f4:	40014800 	.word	0x40014800

0800c7f8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c7f8:	b480      	push	{r7}
 800c7fa:	b087      	sub	sp, #28
 800c7fc:	af00      	add	r7, sp, #0
 800c7fe:	6078      	str	r0, [r7, #4]
 800c800:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c802:	687b      	ldr	r3, [r7, #4]
 800c804:	6a1b      	ldr	r3, [r3, #32]
 800c806:	f023 0201 	bic.w	r2, r3, #1
 800c80a:	687b      	ldr	r3, [r7, #4]
 800c80c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c80e:	687b      	ldr	r3, [r7, #4]
 800c810:	6a1b      	ldr	r3, [r3, #32]
 800c812:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c814:	687b      	ldr	r3, [r7, #4]
 800c816:	685b      	ldr	r3, [r3, #4]
 800c818:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800c81a:	687b      	ldr	r3, [r7, #4]
 800c81c:	699b      	ldr	r3, [r3, #24]
 800c81e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800c820:	68fb      	ldr	r3, [r7, #12]
 800c822:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c826:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c82a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800c82c:	68fb      	ldr	r3, [r7, #12]
 800c82e:	f023 0303 	bic.w	r3, r3, #3
 800c832:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c834:	683b      	ldr	r3, [r7, #0]
 800c836:	681b      	ldr	r3, [r3, #0]
 800c838:	68fa      	ldr	r2, [r7, #12]
 800c83a:	4313      	orrs	r3, r2
 800c83c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800c83e:	697b      	ldr	r3, [r7, #20]
 800c840:	f023 0302 	bic.w	r3, r3, #2
 800c844:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800c846:	683b      	ldr	r3, [r7, #0]
 800c848:	689b      	ldr	r3, [r3, #8]
 800c84a:	697a      	ldr	r2, [r7, #20]
 800c84c:	4313      	orrs	r3, r2
 800c84e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800c850:	687b      	ldr	r3, [r7, #4]
 800c852:	4a24      	ldr	r2, [pc, #144]	; (800c8e4 <TIM_OC1_SetConfig+0xec>)
 800c854:	4293      	cmp	r3, r2
 800c856:	d007      	beq.n	800c868 <TIM_OC1_SetConfig+0x70>
 800c858:	687b      	ldr	r3, [r7, #4]
 800c85a:	4a23      	ldr	r2, [pc, #140]	; (800c8e8 <TIM_OC1_SetConfig+0xf0>)
 800c85c:	4293      	cmp	r3, r2
 800c85e:	d003      	beq.n	800c868 <TIM_OC1_SetConfig+0x70>
 800c860:	687b      	ldr	r3, [r7, #4]
 800c862:	4a22      	ldr	r2, [pc, #136]	; (800c8ec <TIM_OC1_SetConfig+0xf4>)
 800c864:	4293      	cmp	r3, r2
 800c866:	d10c      	bne.n	800c882 <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800c868:	697b      	ldr	r3, [r7, #20]
 800c86a:	f023 0308 	bic.w	r3, r3, #8
 800c86e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800c870:	683b      	ldr	r3, [r7, #0]
 800c872:	68db      	ldr	r3, [r3, #12]
 800c874:	697a      	ldr	r2, [r7, #20]
 800c876:	4313      	orrs	r3, r2
 800c878:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800c87a:	697b      	ldr	r3, [r7, #20]
 800c87c:	f023 0304 	bic.w	r3, r3, #4
 800c880:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c882:	687b      	ldr	r3, [r7, #4]
 800c884:	4a17      	ldr	r2, [pc, #92]	; (800c8e4 <TIM_OC1_SetConfig+0xec>)
 800c886:	4293      	cmp	r3, r2
 800c888:	d007      	beq.n	800c89a <TIM_OC1_SetConfig+0xa2>
 800c88a:	687b      	ldr	r3, [r7, #4]
 800c88c:	4a17      	ldr	r2, [pc, #92]	; (800c8ec <TIM_OC1_SetConfig+0xf4>)
 800c88e:	4293      	cmp	r3, r2
 800c890:	d003      	beq.n	800c89a <TIM_OC1_SetConfig+0xa2>
 800c892:	687b      	ldr	r3, [r7, #4]
 800c894:	4a14      	ldr	r2, [pc, #80]	; (800c8e8 <TIM_OC1_SetConfig+0xf0>)
 800c896:	4293      	cmp	r3, r2
 800c898:	d111      	bne.n	800c8be <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800c89a:	693b      	ldr	r3, [r7, #16]
 800c89c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c8a0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800c8a2:	693b      	ldr	r3, [r7, #16]
 800c8a4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800c8a8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800c8aa:	683b      	ldr	r3, [r7, #0]
 800c8ac:	695b      	ldr	r3, [r3, #20]
 800c8ae:	693a      	ldr	r2, [r7, #16]
 800c8b0:	4313      	orrs	r3, r2
 800c8b2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800c8b4:	683b      	ldr	r3, [r7, #0]
 800c8b6:	699b      	ldr	r3, [r3, #24]
 800c8b8:	693a      	ldr	r2, [r7, #16]
 800c8ba:	4313      	orrs	r3, r2
 800c8bc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c8be:	687b      	ldr	r3, [r7, #4]
 800c8c0:	693a      	ldr	r2, [r7, #16]
 800c8c2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800c8c4:	687b      	ldr	r3, [r7, #4]
 800c8c6:	68fa      	ldr	r2, [r7, #12]
 800c8c8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800c8ca:	683b      	ldr	r3, [r7, #0]
 800c8cc:	685a      	ldr	r2, [r3, #4]
 800c8ce:	687b      	ldr	r3, [r7, #4]
 800c8d0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c8d2:	687b      	ldr	r3, [r7, #4]
 800c8d4:	697a      	ldr	r2, [r7, #20]
 800c8d6:	621a      	str	r2, [r3, #32]
}
 800c8d8:	bf00      	nop
 800c8da:	371c      	adds	r7, #28
 800c8dc:	46bd      	mov	sp, r7
 800c8de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8e2:	4770      	bx	lr
 800c8e4:	40012c00 	.word	0x40012c00
 800c8e8:	40014800 	.word	0x40014800
 800c8ec:	40014400 	.word	0x40014400

0800c8f0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c8f0:	b480      	push	{r7}
 800c8f2:	b087      	sub	sp, #28
 800c8f4:	af00      	add	r7, sp, #0
 800c8f6:	6078      	str	r0, [r7, #4]
 800c8f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c8fa:	687b      	ldr	r3, [r7, #4]
 800c8fc:	6a1b      	ldr	r3, [r3, #32]
 800c8fe:	f023 0210 	bic.w	r2, r3, #16
 800c902:	687b      	ldr	r3, [r7, #4]
 800c904:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c906:	687b      	ldr	r3, [r7, #4]
 800c908:	6a1b      	ldr	r3, [r3, #32]
 800c90a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c90c:	687b      	ldr	r3, [r7, #4]
 800c90e:	685b      	ldr	r3, [r3, #4]
 800c910:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800c912:	687b      	ldr	r3, [r7, #4]
 800c914:	699b      	ldr	r3, [r3, #24]
 800c916:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800c918:	68fb      	ldr	r3, [r7, #12]
 800c91a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800c91e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c922:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800c924:	68fb      	ldr	r3, [r7, #12]
 800c926:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c92a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c92c:	683b      	ldr	r3, [r7, #0]
 800c92e:	681b      	ldr	r3, [r3, #0]
 800c930:	021b      	lsls	r3, r3, #8
 800c932:	68fa      	ldr	r2, [r7, #12]
 800c934:	4313      	orrs	r3, r2
 800c936:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800c938:	697b      	ldr	r3, [r7, #20]
 800c93a:	f023 0320 	bic.w	r3, r3, #32
 800c93e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800c940:	683b      	ldr	r3, [r7, #0]
 800c942:	689b      	ldr	r3, [r3, #8]
 800c944:	011b      	lsls	r3, r3, #4
 800c946:	697a      	ldr	r2, [r7, #20]
 800c948:	4313      	orrs	r3, r2
 800c94a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800c94c:	687b      	ldr	r3, [r7, #4]
 800c94e:	4a22      	ldr	r2, [pc, #136]	; (800c9d8 <TIM_OC2_SetConfig+0xe8>)
 800c950:	4293      	cmp	r3, r2
 800c952:	d10d      	bne.n	800c970 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800c954:	697b      	ldr	r3, [r7, #20]
 800c956:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c95a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800c95c:	683b      	ldr	r3, [r7, #0]
 800c95e:	68db      	ldr	r3, [r3, #12]
 800c960:	011b      	lsls	r3, r3, #4
 800c962:	697a      	ldr	r2, [r7, #20]
 800c964:	4313      	orrs	r3, r2
 800c966:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800c968:	697b      	ldr	r3, [r7, #20]
 800c96a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c96e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c970:	687b      	ldr	r3, [r7, #4]
 800c972:	4a19      	ldr	r2, [pc, #100]	; (800c9d8 <TIM_OC2_SetConfig+0xe8>)
 800c974:	4293      	cmp	r3, r2
 800c976:	d007      	beq.n	800c988 <TIM_OC2_SetConfig+0x98>
 800c978:	687b      	ldr	r3, [r7, #4]
 800c97a:	4a18      	ldr	r2, [pc, #96]	; (800c9dc <TIM_OC2_SetConfig+0xec>)
 800c97c:	4293      	cmp	r3, r2
 800c97e:	d003      	beq.n	800c988 <TIM_OC2_SetConfig+0x98>
 800c980:	687b      	ldr	r3, [r7, #4]
 800c982:	4a17      	ldr	r2, [pc, #92]	; (800c9e0 <TIM_OC2_SetConfig+0xf0>)
 800c984:	4293      	cmp	r3, r2
 800c986:	d113      	bne.n	800c9b0 <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800c988:	693b      	ldr	r3, [r7, #16]
 800c98a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800c98e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800c990:	693b      	ldr	r3, [r7, #16]
 800c992:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800c996:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800c998:	683b      	ldr	r3, [r7, #0]
 800c99a:	695b      	ldr	r3, [r3, #20]
 800c99c:	009b      	lsls	r3, r3, #2
 800c99e:	693a      	ldr	r2, [r7, #16]
 800c9a0:	4313      	orrs	r3, r2
 800c9a2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800c9a4:	683b      	ldr	r3, [r7, #0]
 800c9a6:	699b      	ldr	r3, [r3, #24]
 800c9a8:	009b      	lsls	r3, r3, #2
 800c9aa:	693a      	ldr	r2, [r7, #16]
 800c9ac:	4313      	orrs	r3, r2
 800c9ae:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c9b0:	687b      	ldr	r3, [r7, #4]
 800c9b2:	693a      	ldr	r2, [r7, #16]
 800c9b4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800c9b6:	687b      	ldr	r3, [r7, #4]
 800c9b8:	68fa      	ldr	r2, [r7, #12]
 800c9ba:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800c9bc:	683b      	ldr	r3, [r7, #0]
 800c9be:	685a      	ldr	r2, [r3, #4]
 800c9c0:	687b      	ldr	r3, [r7, #4]
 800c9c2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c9c4:	687b      	ldr	r3, [r7, #4]
 800c9c6:	697a      	ldr	r2, [r7, #20]
 800c9c8:	621a      	str	r2, [r3, #32]
}
 800c9ca:	bf00      	nop
 800c9cc:	371c      	adds	r7, #28
 800c9ce:	46bd      	mov	sp, r7
 800c9d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9d4:	4770      	bx	lr
 800c9d6:	bf00      	nop
 800c9d8:	40012c00 	.word	0x40012c00
 800c9dc:	40014400 	.word	0x40014400
 800c9e0:	40014800 	.word	0x40014800

0800c9e4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c9e4:	b480      	push	{r7}
 800c9e6:	b087      	sub	sp, #28
 800c9e8:	af00      	add	r7, sp, #0
 800c9ea:	6078      	str	r0, [r7, #4]
 800c9ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800c9ee:	687b      	ldr	r3, [r7, #4]
 800c9f0:	6a1b      	ldr	r3, [r3, #32]
 800c9f2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800c9f6:	687b      	ldr	r3, [r7, #4]
 800c9f8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c9fa:	687b      	ldr	r3, [r7, #4]
 800c9fc:	6a1b      	ldr	r3, [r3, #32]
 800c9fe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ca00:	687b      	ldr	r3, [r7, #4]
 800ca02:	685b      	ldr	r3, [r3, #4]
 800ca04:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800ca06:	687b      	ldr	r3, [r7, #4]
 800ca08:	69db      	ldr	r3, [r3, #28]
 800ca0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800ca0c:	68fb      	ldr	r3, [r7, #12]
 800ca0e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800ca12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ca16:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800ca18:	68fb      	ldr	r3, [r7, #12]
 800ca1a:	f023 0303 	bic.w	r3, r3, #3
 800ca1e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ca20:	683b      	ldr	r3, [r7, #0]
 800ca22:	681b      	ldr	r3, [r3, #0]
 800ca24:	68fa      	ldr	r2, [r7, #12]
 800ca26:	4313      	orrs	r3, r2
 800ca28:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800ca2a:	697b      	ldr	r3, [r7, #20]
 800ca2c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800ca30:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800ca32:	683b      	ldr	r3, [r7, #0]
 800ca34:	689b      	ldr	r3, [r3, #8]
 800ca36:	021b      	lsls	r3, r3, #8
 800ca38:	697a      	ldr	r2, [r7, #20]
 800ca3a:	4313      	orrs	r3, r2
 800ca3c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800ca3e:	687b      	ldr	r3, [r7, #4]
 800ca40:	4a21      	ldr	r2, [pc, #132]	; (800cac8 <TIM_OC3_SetConfig+0xe4>)
 800ca42:	4293      	cmp	r3, r2
 800ca44:	d10d      	bne.n	800ca62 <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800ca46:	697b      	ldr	r3, [r7, #20]
 800ca48:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800ca4c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800ca4e:	683b      	ldr	r3, [r7, #0]
 800ca50:	68db      	ldr	r3, [r3, #12]
 800ca52:	021b      	lsls	r3, r3, #8
 800ca54:	697a      	ldr	r2, [r7, #20]
 800ca56:	4313      	orrs	r3, r2
 800ca58:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800ca5a:	697b      	ldr	r3, [r7, #20]
 800ca5c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800ca60:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ca62:	687b      	ldr	r3, [r7, #4]
 800ca64:	4a18      	ldr	r2, [pc, #96]	; (800cac8 <TIM_OC3_SetConfig+0xe4>)
 800ca66:	4293      	cmp	r3, r2
 800ca68:	d007      	beq.n	800ca7a <TIM_OC3_SetConfig+0x96>
 800ca6a:	687b      	ldr	r3, [r7, #4]
 800ca6c:	4a17      	ldr	r2, [pc, #92]	; (800cacc <TIM_OC3_SetConfig+0xe8>)
 800ca6e:	4293      	cmp	r3, r2
 800ca70:	d003      	beq.n	800ca7a <TIM_OC3_SetConfig+0x96>
 800ca72:	687b      	ldr	r3, [r7, #4]
 800ca74:	4a16      	ldr	r2, [pc, #88]	; (800cad0 <TIM_OC3_SetConfig+0xec>)
 800ca76:	4293      	cmp	r3, r2
 800ca78:	d113      	bne.n	800caa2 <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800ca7a:	693b      	ldr	r3, [r7, #16]
 800ca7c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ca80:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800ca82:	693b      	ldr	r3, [r7, #16]
 800ca84:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800ca88:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800ca8a:	683b      	ldr	r3, [r7, #0]
 800ca8c:	695b      	ldr	r3, [r3, #20]
 800ca8e:	011b      	lsls	r3, r3, #4
 800ca90:	693a      	ldr	r2, [r7, #16]
 800ca92:	4313      	orrs	r3, r2
 800ca94:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800ca96:	683b      	ldr	r3, [r7, #0]
 800ca98:	699b      	ldr	r3, [r3, #24]
 800ca9a:	011b      	lsls	r3, r3, #4
 800ca9c:	693a      	ldr	r2, [r7, #16]
 800ca9e:	4313      	orrs	r3, r2
 800caa0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800caa2:	687b      	ldr	r3, [r7, #4]
 800caa4:	693a      	ldr	r2, [r7, #16]
 800caa6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800caa8:	687b      	ldr	r3, [r7, #4]
 800caaa:	68fa      	ldr	r2, [r7, #12]
 800caac:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800caae:	683b      	ldr	r3, [r7, #0]
 800cab0:	685a      	ldr	r2, [r3, #4]
 800cab2:	687b      	ldr	r3, [r7, #4]
 800cab4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800cab6:	687b      	ldr	r3, [r7, #4]
 800cab8:	697a      	ldr	r2, [r7, #20]
 800caba:	621a      	str	r2, [r3, #32]
}
 800cabc:	bf00      	nop
 800cabe:	371c      	adds	r7, #28
 800cac0:	46bd      	mov	sp, r7
 800cac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cac6:	4770      	bx	lr
 800cac8:	40012c00 	.word	0x40012c00
 800cacc:	40014400 	.word	0x40014400
 800cad0:	40014800 	.word	0x40014800

0800cad4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800cad4:	b480      	push	{r7}
 800cad6:	b087      	sub	sp, #28
 800cad8:	af00      	add	r7, sp, #0
 800cada:	6078      	str	r0, [r7, #4]
 800cadc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800cade:	687b      	ldr	r3, [r7, #4]
 800cae0:	6a1b      	ldr	r3, [r3, #32]
 800cae2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800cae6:	687b      	ldr	r3, [r7, #4]
 800cae8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800caea:	687b      	ldr	r3, [r7, #4]
 800caec:	6a1b      	ldr	r3, [r3, #32]
 800caee:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800caf0:	687b      	ldr	r3, [r7, #4]
 800caf2:	685b      	ldr	r3, [r3, #4]
 800caf4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800caf6:	687b      	ldr	r3, [r7, #4]
 800caf8:	69db      	ldr	r3, [r3, #28]
 800cafa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800cafc:	68fb      	ldr	r3, [r7, #12]
 800cafe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800cb02:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800cb06:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800cb08:	68fb      	ldr	r3, [r7, #12]
 800cb0a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800cb0e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800cb10:	683b      	ldr	r3, [r7, #0]
 800cb12:	681b      	ldr	r3, [r3, #0]
 800cb14:	021b      	lsls	r3, r3, #8
 800cb16:	68fa      	ldr	r2, [r7, #12]
 800cb18:	4313      	orrs	r3, r2
 800cb1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800cb1c:	693b      	ldr	r3, [r7, #16]
 800cb1e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800cb22:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800cb24:	683b      	ldr	r3, [r7, #0]
 800cb26:	689b      	ldr	r3, [r3, #8]
 800cb28:	031b      	lsls	r3, r3, #12
 800cb2a:	693a      	ldr	r2, [r7, #16]
 800cb2c:	4313      	orrs	r3, r2
 800cb2e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800cb30:	687b      	ldr	r3, [r7, #4]
 800cb32:	4a14      	ldr	r2, [pc, #80]	; (800cb84 <TIM_OC4_SetConfig+0xb0>)
 800cb34:	4293      	cmp	r3, r2
 800cb36:	d007      	beq.n	800cb48 <TIM_OC4_SetConfig+0x74>
 800cb38:	687b      	ldr	r3, [r7, #4]
 800cb3a:	4a13      	ldr	r2, [pc, #76]	; (800cb88 <TIM_OC4_SetConfig+0xb4>)
 800cb3c:	4293      	cmp	r3, r2
 800cb3e:	d003      	beq.n	800cb48 <TIM_OC4_SetConfig+0x74>
 800cb40:	687b      	ldr	r3, [r7, #4]
 800cb42:	4a12      	ldr	r2, [pc, #72]	; (800cb8c <TIM_OC4_SetConfig+0xb8>)
 800cb44:	4293      	cmp	r3, r2
 800cb46:	d109      	bne.n	800cb5c <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800cb48:	697b      	ldr	r3, [r7, #20]
 800cb4a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800cb4e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800cb50:	683b      	ldr	r3, [r7, #0]
 800cb52:	695b      	ldr	r3, [r3, #20]
 800cb54:	019b      	lsls	r3, r3, #6
 800cb56:	697a      	ldr	r2, [r7, #20]
 800cb58:	4313      	orrs	r3, r2
 800cb5a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800cb5c:	687b      	ldr	r3, [r7, #4]
 800cb5e:	697a      	ldr	r2, [r7, #20]
 800cb60:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800cb62:	687b      	ldr	r3, [r7, #4]
 800cb64:	68fa      	ldr	r2, [r7, #12]
 800cb66:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800cb68:	683b      	ldr	r3, [r7, #0]
 800cb6a:	685a      	ldr	r2, [r3, #4]
 800cb6c:	687b      	ldr	r3, [r7, #4]
 800cb6e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800cb70:	687b      	ldr	r3, [r7, #4]
 800cb72:	693a      	ldr	r2, [r7, #16]
 800cb74:	621a      	str	r2, [r3, #32]
}
 800cb76:	bf00      	nop
 800cb78:	371c      	adds	r7, #28
 800cb7a:	46bd      	mov	sp, r7
 800cb7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb80:	4770      	bx	lr
 800cb82:	bf00      	nop
 800cb84:	40012c00 	.word	0x40012c00
 800cb88:	40014400 	.word	0x40014400
 800cb8c:	40014800 	.word	0x40014800

0800cb90 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800cb90:	b480      	push	{r7}
 800cb92:	b087      	sub	sp, #28
 800cb94:	af00      	add	r7, sp, #0
 800cb96:	6078      	str	r0, [r7, #4]
 800cb98:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800cb9a:	687b      	ldr	r3, [r7, #4]
 800cb9c:	6a1b      	ldr	r3, [r3, #32]
 800cb9e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800cba2:	687b      	ldr	r3, [r7, #4]
 800cba4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800cba6:	687b      	ldr	r3, [r7, #4]
 800cba8:	6a1b      	ldr	r3, [r3, #32]
 800cbaa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800cbac:	687b      	ldr	r3, [r7, #4]
 800cbae:	685b      	ldr	r3, [r3, #4]
 800cbb0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800cbb2:	687b      	ldr	r3, [r7, #4]
 800cbb4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cbb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800cbb8:	68fb      	ldr	r3, [r7, #12]
 800cbba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800cbbe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cbc2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800cbc4:	683b      	ldr	r3, [r7, #0]
 800cbc6:	681b      	ldr	r3, [r3, #0]
 800cbc8:	68fa      	ldr	r2, [r7, #12]
 800cbca:	4313      	orrs	r3, r2
 800cbcc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800cbce:	693b      	ldr	r3, [r7, #16]
 800cbd0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800cbd4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800cbd6:	683b      	ldr	r3, [r7, #0]
 800cbd8:	689b      	ldr	r3, [r3, #8]
 800cbda:	041b      	lsls	r3, r3, #16
 800cbdc:	693a      	ldr	r2, [r7, #16]
 800cbde:	4313      	orrs	r3, r2
 800cbe0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800cbe2:	687b      	ldr	r3, [r7, #4]
 800cbe4:	4a13      	ldr	r2, [pc, #76]	; (800cc34 <TIM_OC5_SetConfig+0xa4>)
 800cbe6:	4293      	cmp	r3, r2
 800cbe8:	d007      	beq.n	800cbfa <TIM_OC5_SetConfig+0x6a>
 800cbea:	687b      	ldr	r3, [r7, #4]
 800cbec:	4a12      	ldr	r2, [pc, #72]	; (800cc38 <TIM_OC5_SetConfig+0xa8>)
 800cbee:	4293      	cmp	r3, r2
 800cbf0:	d003      	beq.n	800cbfa <TIM_OC5_SetConfig+0x6a>
 800cbf2:	687b      	ldr	r3, [r7, #4]
 800cbf4:	4a11      	ldr	r2, [pc, #68]	; (800cc3c <TIM_OC5_SetConfig+0xac>)
 800cbf6:	4293      	cmp	r3, r2
 800cbf8:	d109      	bne.n	800cc0e <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800cbfa:	697b      	ldr	r3, [r7, #20]
 800cbfc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800cc00:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800cc02:	683b      	ldr	r3, [r7, #0]
 800cc04:	695b      	ldr	r3, [r3, #20]
 800cc06:	021b      	lsls	r3, r3, #8
 800cc08:	697a      	ldr	r2, [r7, #20]
 800cc0a:	4313      	orrs	r3, r2
 800cc0c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800cc0e:	687b      	ldr	r3, [r7, #4]
 800cc10:	697a      	ldr	r2, [r7, #20]
 800cc12:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800cc14:	687b      	ldr	r3, [r7, #4]
 800cc16:	68fa      	ldr	r2, [r7, #12]
 800cc18:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800cc1a:	683b      	ldr	r3, [r7, #0]
 800cc1c:	685a      	ldr	r2, [r3, #4]
 800cc1e:	687b      	ldr	r3, [r7, #4]
 800cc20:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800cc22:	687b      	ldr	r3, [r7, #4]
 800cc24:	693a      	ldr	r2, [r7, #16]
 800cc26:	621a      	str	r2, [r3, #32]
}
 800cc28:	bf00      	nop
 800cc2a:	371c      	adds	r7, #28
 800cc2c:	46bd      	mov	sp, r7
 800cc2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc32:	4770      	bx	lr
 800cc34:	40012c00 	.word	0x40012c00
 800cc38:	40014400 	.word	0x40014400
 800cc3c:	40014800 	.word	0x40014800

0800cc40 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800cc40:	b480      	push	{r7}
 800cc42:	b087      	sub	sp, #28
 800cc44:	af00      	add	r7, sp, #0
 800cc46:	6078      	str	r0, [r7, #4]
 800cc48:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800cc4a:	687b      	ldr	r3, [r7, #4]
 800cc4c:	6a1b      	ldr	r3, [r3, #32]
 800cc4e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800cc52:	687b      	ldr	r3, [r7, #4]
 800cc54:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800cc56:	687b      	ldr	r3, [r7, #4]
 800cc58:	6a1b      	ldr	r3, [r3, #32]
 800cc5a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800cc5c:	687b      	ldr	r3, [r7, #4]
 800cc5e:	685b      	ldr	r3, [r3, #4]
 800cc60:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800cc62:	687b      	ldr	r3, [r7, #4]
 800cc64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cc66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800cc68:	68fb      	ldr	r3, [r7, #12]
 800cc6a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800cc6e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800cc72:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800cc74:	683b      	ldr	r3, [r7, #0]
 800cc76:	681b      	ldr	r3, [r3, #0]
 800cc78:	021b      	lsls	r3, r3, #8
 800cc7a:	68fa      	ldr	r2, [r7, #12]
 800cc7c:	4313      	orrs	r3, r2
 800cc7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800cc80:	693b      	ldr	r3, [r7, #16]
 800cc82:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800cc86:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800cc88:	683b      	ldr	r3, [r7, #0]
 800cc8a:	689b      	ldr	r3, [r3, #8]
 800cc8c:	051b      	lsls	r3, r3, #20
 800cc8e:	693a      	ldr	r2, [r7, #16]
 800cc90:	4313      	orrs	r3, r2
 800cc92:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800cc94:	687b      	ldr	r3, [r7, #4]
 800cc96:	4a14      	ldr	r2, [pc, #80]	; (800cce8 <TIM_OC6_SetConfig+0xa8>)
 800cc98:	4293      	cmp	r3, r2
 800cc9a:	d007      	beq.n	800ccac <TIM_OC6_SetConfig+0x6c>
 800cc9c:	687b      	ldr	r3, [r7, #4]
 800cc9e:	4a13      	ldr	r2, [pc, #76]	; (800ccec <TIM_OC6_SetConfig+0xac>)
 800cca0:	4293      	cmp	r3, r2
 800cca2:	d003      	beq.n	800ccac <TIM_OC6_SetConfig+0x6c>
 800cca4:	687b      	ldr	r3, [r7, #4]
 800cca6:	4a12      	ldr	r2, [pc, #72]	; (800ccf0 <TIM_OC6_SetConfig+0xb0>)
 800cca8:	4293      	cmp	r3, r2
 800ccaa:	d109      	bne.n	800ccc0 <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800ccac:	697b      	ldr	r3, [r7, #20]
 800ccae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800ccb2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800ccb4:	683b      	ldr	r3, [r7, #0]
 800ccb6:	695b      	ldr	r3, [r3, #20]
 800ccb8:	029b      	lsls	r3, r3, #10
 800ccba:	697a      	ldr	r2, [r7, #20]
 800ccbc:	4313      	orrs	r3, r2
 800ccbe:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ccc0:	687b      	ldr	r3, [r7, #4]
 800ccc2:	697a      	ldr	r2, [r7, #20]
 800ccc4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800ccc6:	687b      	ldr	r3, [r7, #4]
 800ccc8:	68fa      	ldr	r2, [r7, #12]
 800ccca:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800cccc:	683b      	ldr	r3, [r7, #0]
 800ccce:	685a      	ldr	r2, [r3, #4]
 800ccd0:	687b      	ldr	r3, [r7, #4]
 800ccd2:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ccd4:	687b      	ldr	r3, [r7, #4]
 800ccd6:	693a      	ldr	r2, [r7, #16]
 800ccd8:	621a      	str	r2, [r3, #32]
}
 800ccda:	bf00      	nop
 800ccdc:	371c      	adds	r7, #28
 800ccde:	46bd      	mov	sp, r7
 800cce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cce4:	4770      	bx	lr
 800cce6:	bf00      	nop
 800cce8:	40012c00 	.word	0x40012c00
 800ccec:	40014400 	.word	0x40014400
 800ccf0:	40014800 	.word	0x40014800

0800ccf4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800ccf4:	b480      	push	{r7}
 800ccf6:	b087      	sub	sp, #28
 800ccf8:	af00      	add	r7, sp, #0
 800ccfa:	60f8      	str	r0, [r7, #12]
 800ccfc:	60b9      	str	r1, [r7, #8]
 800ccfe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800cd00:	68fb      	ldr	r3, [r7, #12]
 800cd02:	6a1b      	ldr	r3, [r3, #32]
 800cd04:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800cd06:	68fb      	ldr	r3, [r7, #12]
 800cd08:	6a1b      	ldr	r3, [r3, #32]
 800cd0a:	f023 0201 	bic.w	r2, r3, #1
 800cd0e:	68fb      	ldr	r3, [r7, #12]
 800cd10:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800cd12:	68fb      	ldr	r3, [r7, #12]
 800cd14:	699b      	ldr	r3, [r3, #24]
 800cd16:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800cd18:	693b      	ldr	r3, [r7, #16]
 800cd1a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800cd1e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800cd20:	687b      	ldr	r3, [r7, #4]
 800cd22:	011b      	lsls	r3, r3, #4
 800cd24:	693a      	ldr	r2, [r7, #16]
 800cd26:	4313      	orrs	r3, r2
 800cd28:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800cd2a:	697b      	ldr	r3, [r7, #20]
 800cd2c:	f023 030a 	bic.w	r3, r3, #10
 800cd30:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800cd32:	697a      	ldr	r2, [r7, #20]
 800cd34:	68bb      	ldr	r3, [r7, #8]
 800cd36:	4313      	orrs	r3, r2
 800cd38:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800cd3a:	68fb      	ldr	r3, [r7, #12]
 800cd3c:	693a      	ldr	r2, [r7, #16]
 800cd3e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800cd40:	68fb      	ldr	r3, [r7, #12]
 800cd42:	697a      	ldr	r2, [r7, #20]
 800cd44:	621a      	str	r2, [r3, #32]
}
 800cd46:	bf00      	nop
 800cd48:	371c      	adds	r7, #28
 800cd4a:	46bd      	mov	sp, r7
 800cd4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd50:	4770      	bx	lr

0800cd52 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800cd52:	b480      	push	{r7}
 800cd54:	b087      	sub	sp, #28
 800cd56:	af00      	add	r7, sp, #0
 800cd58:	60f8      	str	r0, [r7, #12]
 800cd5a:	60b9      	str	r1, [r7, #8]
 800cd5c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800cd5e:	68fb      	ldr	r3, [r7, #12]
 800cd60:	6a1b      	ldr	r3, [r3, #32]
 800cd62:	f023 0210 	bic.w	r2, r3, #16
 800cd66:	68fb      	ldr	r3, [r7, #12]
 800cd68:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800cd6a:	68fb      	ldr	r3, [r7, #12]
 800cd6c:	699b      	ldr	r3, [r3, #24]
 800cd6e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800cd70:	68fb      	ldr	r3, [r7, #12]
 800cd72:	6a1b      	ldr	r3, [r3, #32]
 800cd74:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800cd76:	697b      	ldr	r3, [r7, #20]
 800cd78:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800cd7c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800cd7e:	687b      	ldr	r3, [r7, #4]
 800cd80:	031b      	lsls	r3, r3, #12
 800cd82:	697a      	ldr	r2, [r7, #20]
 800cd84:	4313      	orrs	r3, r2
 800cd86:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800cd88:	693b      	ldr	r3, [r7, #16]
 800cd8a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800cd8e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800cd90:	68bb      	ldr	r3, [r7, #8]
 800cd92:	011b      	lsls	r3, r3, #4
 800cd94:	693a      	ldr	r2, [r7, #16]
 800cd96:	4313      	orrs	r3, r2
 800cd98:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800cd9a:	68fb      	ldr	r3, [r7, #12]
 800cd9c:	697a      	ldr	r2, [r7, #20]
 800cd9e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800cda0:	68fb      	ldr	r3, [r7, #12]
 800cda2:	693a      	ldr	r2, [r7, #16]
 800cda4:	621a      	str	r2, [r3, #32]
}
 800cda6:	bf00      	nop
 800cda8:	371c      	adds	r7, #28
 800cdaa:	46bd      	mov	sp, r7
 800cdac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdb0:	4770      	bx	lr

0800cdb2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800cdb2:	b480      	push	{r7}
 800cdb4:	b085      	sub	sp, #20
 800cdb6:	af00      	add	r7, sp, #0
 800cdb8:	6078      	str	r0, [r7, #4]
 800cdba:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800cdbc:	687b      	ldr	r3, [r7, #4]
 800cdbe:	689b      	ldr	r3, [r3, #8]
 800cdc0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800cdc2:	68fb      	ldr	r3, [r7, #12]
 800cdc4:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800cdc8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cdcc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800cdce:	683a      	ldr	r2, [r7, #0]
 800cdd0:	68fb      	ldr	r3, [r7, #12]
 800cdd2:	4313      	orrs	r3, r2
 800cdd4:	f043 0307 	orr.w	r3, r3, #7
 800cdd8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800cdda:	687b      	ldr	r3, [r7, #4]
 800cddc:	68fa      	ldr	r2, [r7, #12]
 800cdde:	609a      	str	r2, [r3, #8]
}
 800cde0:	bf00      	nop
 800cde2:	3714      	adds	r7, #20
 800cde4:	46bd      	mov	sp, r7
 800cde6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdea:	4770      	bx	lr

0800cdec <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800cdec:	b480      	push	{r7}
 800cdee:	b087      	sub	sp, #28
 800cdf0:	af00      	add	r7, sp, #0
 800cdf2:	60f8      	str	r0, [r7, #12]
 800cdf4:	60b9      	str	r1, [r7, #8]
 800cdf6:	607a      	str	r2, [r7, #4]
 800cdf8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800cdfa:	68fb      	ldr	r3, [r7, #12]
 800cdfc:	689b      	ldr	r3, [r3, #8]
 800cdfe:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800ce00:	697b      	ldr	r3, [r7, #20]
 800ce02:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800ce06:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800ce08:	683b      	ldr	r3, [r7, #0]
 800ce0a:	021a      	lsls	r2, r3, #8
 800ce0c:	687b      	ldr	r3, [r7, #4]
 800ce0e:	431a      	orrs	r2, r3
 800ce10:	68bb      	ldr	r3, [r7, #8]
 800ce12:	4313      	orrs	r3, r2
 800ce14:	697a      	ldr	r2, [r7, #20]
 800ce16:	4313      	orrs	r3, r2
 800ce18:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ce1a:	68fb      	ldr	r3, [r7, #12]
 800ce1c:	697a      	ldr	r2, [r7, #20]
 800ce1e:	609a      	str	r2, [r3, #8]
}
 800ce20:	bf00      	nop
 800ce22:	371c      	adds	r7, #28
 800ce24:	46bd      	mov	sp, r7
 800ce26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce2a:	4770      	bx	lr

0800ce2c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800ce2c:	b480      	push	{r7}
 800ce2e:	b087      	sub	sp, #28
 800ce30:	af00      	add	r7, sp, #0
 800ce32:	60f8      	str	r0, [r7, #12]
 800ce34:	60b9      	str	r1, [r7, #8]
 800ce36:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800ce38:	68bb      	ldr	r3, [r7, #8]
 800ce3a:	f003 031f 	and.w	r3, r3, #31
 800ce3e:	2201      	movs	r2, #1
 800ce40:	fa02 f303 	lsl.w	r3, r2, r3
 800ce44:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800ce46:	68fb      	ldr	r3, [r7, #12]
 800ce48:	6a1a      	ldr	r2, [r3, #32]
 800ce4a:	697b      	ldr	r3, [r7, #20]
 800ce4c:	43db      	mvns	r3, r3
 800ce4e:	401a      	ands	r2, r3
 800ce50:	68fb      	ldr	r3, [r7, #12]
 800ce52:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800ce54:	68fb      	ldr	r3, [r7, #12]
 800ce56:	6a1a      	ldr	r2, [r3, #32]
 800ce58:	68bb      	ldr	r3, [r7, #8]
 800ce5a:	f003 031f 	and.w	r3, r3, #31
 800ce5e:	6879      	ldr	r1, [r7, #4]
 800ce60:	fa01 f303 	lsl.w	r3, r1, r3
 800ce64:	431a      	orrs	r2, r3
 800ce66:	68fb      	ldr	r3, [r7, #12]
 800ce68:	621a      	str	r2, [r3, #32]
}
 800ce6a:	bf00      	nop
 800ce6c:	371c      	adds	r7, #28
 800ce6e:	46bd      	mov	sp, r7
 800ce70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce74:	4770      	bx	lr
	...

0800ce78 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800ce78:	b480      	push	{r7}
 800ce7a:	b085      	sub	sp, #20
 800ce7c:	af00      	add	r7, sp, #0
 800ce7e:	6078      	str	r0, [r7, #4]
 800ce80:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800ce82:	687b      	ldr	r3, [r7, #4]
 800ce84:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ce88:	2b01      	cmp	r3, #1
 800ce8a:	d101      	bne.n	800ce90 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800ce8c:	2302      	movs	r3, #2
 800ce8e:	e04a      	b.n	800cf26 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 800ce90:	687b      	ldr	r3, [r7, #4]
 800ce92:	2201      	movs	r2, #1
 800ce94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ce98:	687b      	ldr	r3, [r7, #4]
 800ce9a:	2202      	movs	r2, #2
 800ce9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800cea0:	687b      	ldr	r3, [r7, #4]
 800cea2:	681b      	ldr	r3, [r3, #0]
 800cea4:	685b      	ldr	r3, [r3, #4]
 800cea6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800cea8:	687b      	ldr	r3, [r7, #4]
 800ceaa:	681b      	ldr	r3, [r3, #0]
 800ceac:	689b      	ldr	r3, [r3, #8]
 800ceae:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800ceb0:	687b      	ldr	r3, [r7, #4]
 800ceb2:	681b      	ldr	r3, [r3, #0]
 800ceb4:	4a1f      	ldr	r2, [pc, #124]	; (800cf34 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 800ceb6:	4293      	cmp	r3, r2
 800ceb8:	d108      	bne.n	800cecc <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800ceba:	68fb      	ldr	r3, [r7, #12]
 800cebc:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800cec0:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800cec2:	683b      	ldr	r3, [r7, #0]
 800cec4:	685b      	ldr	r3, [r3, #4]
 800cec6:	68fa      	ldr	r2, [r7, #12]
 800cec8:	4313      	orrs	r3, r2
 800ceca:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800cecc:	68fb      	ldr	r3, [r7, #12]
 800cece:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ced2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800ced4:	683b      	ldr	r3, [r7, #0]
 800ced6:	681b      	ldr	r3, [r3, #0]
 800ced8:	68fa      	ldr	r2, [r7, #12]
 800ceda:	4313      	orrs	r3, r2
 800cedc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800cede:	687b      	ldr	r3, [r7, #4]
 800cee0:	681b      	ldr	r3, [r3, #0]
 800cee2:	68fa      	ldr	r2, [r7, #12]
 800cee4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800cee6:	687b      	ldr	r3, [r7, #4]
 800cee8:	681b      	ldr	r3, [r3, #0]
 800ceea:	4a12      	ldr	r2, [pc, #72]	; (800cf34 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 800ceec:	4293      	cmp	r3, r2
 800ceee:	d004      	beq.n	800cefa <HAL_TIMEx_MasterConfigSynchronization+0x82>
 800cef0:	687b      	ldr	r3, [r7, #4]
 800cef2:	681b      	ldr	r3, [r3, #0]
 800cef4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cef8:	d10c      	bne.n	800cf14 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800cefa:	68bb      	ldr	r3, [r7, #8]
 800cefc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800cf00:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800cf02:	683b      	ldr	r3, [r7, #0]
 800cf04:	689b      	ldr	r3, [r3, #8]
 800cf06:	68ba      	ldr	r2, [r7, #8]
 800cf08:	4313      	orrs	r3, r2
 800cf0a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800cf0c:	687b      	ldr	r3, [r7, #4]
 800cf0e:	681b      	ldr	r3, [r3, #0]
 800cf10:	68ba      	ldr	r2, [r7, #8]
 800cf12:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800cf14:	687b      	ldr	r3, [r7, #4]
 800cf16:	2201      	movs	r2, #1
 800cf18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800cf1c:	687b      	ldr	r3, [r7, #4]
 800cf1e:	2200      	movs	r2, #0
 800cf20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800cf24:	2300      	movs	r3, #0
}
 800cf26:	4618      	mov	r0, r3
 800cf28:	3714      	adds	r7, #20
 800cf2a:	46bd      	mov	sp, r7
 800cf2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf30:	4770      	bx	lr
 800cf32:	bf00      	nop
 800cf34:	40012c00 	.word	0x40012c00

0800cf38 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800cf38:	b480      	push	{r7}
 800cf3a:	b085      	sub	sp, #20
 800cf3c:	af00      	add	r7, sp, #0
 800cf3e:	6078      	str	r0, [r7, #4]
 800cf40:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800cf42:	2300      	movs	r3, #0
 800cf44:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800cf46:	687b      	ldr	r3, [r7, #4]
 800cf48:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800cf4c:	2b01      	cmp	r3, #1
 800cf4e:	d101      	bne.n	800cf54 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800cf50:	2302      	movs	r3, #2
 800cf52:	e078      	b.n	800d046 <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 800cf54:	687b      	ldr	r3, [r7, #4]
 800cf56:	2201      	movs	r2, #1
 800cf58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800cf5c:	68fb      	ldr	r3, [r7, #12]
 800cf5e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800cf62:	683b      	ldr	r3, [r7, #0]
 800cf64:	68db      	ldr	r3, [r3, #12]
 800cf66:	4313      	orrs	r3, r2
 800cf68:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800cf6a:	68fb      	ldr	r3, [r7, #12]
 800cf6c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800cf70:	683b      	ldr	r3, [r7, #0]
 800cf72:	689b      	ldr	r3, [r3, #8]
 800cf74:	4313      	orrs	r3, r2
 800cf76:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800cf78:	68fb      	ldr	r3, [r7, #12]
 800cf7a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800cf7e:	683b      	ldr	r3, [r7, #0]
 800cf80:	685b      	ldr	r3, [r3, #4]
 800cf82:	4313      	orrs	r3, r2
 800cf84:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800cf86:	68fb      	ldr	r3, [r7, #12]
 800cf88:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800cf8c:	683b      	ldr	r3, [r7, #0]
 800cf8e:	681b      	ldr	r3, [r3, #0]
 800cf90:	4313      	orrs	r3, r2
 800cf92:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800cf94:	68fb      	ldr	r3, [r7, #12]
 800cf96:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800cf9a:	683b      	ldr	r3, [r7, #0]
 800cf9c:	691b      	ldr	r3, [r3, #16]
 800cf9e:	4313      	orrs	r3, r2
 800cfa0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800cfa2:	68fb      	ldr	r3, [r7, #12]
 800cfa4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800cfa8:	683b      	ldr	r3, [r7, #0]
 800cfaa:	695b      	ldr	r3, [r3, #20]
 800cfac:	4313      	orrs	r3, r2
 800cfae:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800cfb0:	68fb      	ldr	r3, [r7, #12]
 800cfb2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800cfb6:	683b      	ldr	r3, [r7, #0]
 800cfb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cfba:	4313      	orrs	r3, r2
 800cfbc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800cfbe:	68fb      	ldr	r3, [r7, #12]
 800cfc0:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800cfc4:	683b      	ldr	r3, [r7, #0]
 800cfc6:	699b      	ldr	r3, [r3, #24]
 800cfc8:	041b      	lsls	r3, r3, #16
 800cfca:	4313      	orrs	r3, r2
 800cfcc:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800cfce:	687b      	ldr	r3, [r7, #4]
 800cfd0:	681b      	ldr	r3, [r3, #0]
 800cfd2:	4a20      	ldr	r2, [pc, #128]	; (800d054 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 800cfd4:	4293      	cmp	r3, r2
 800cfd6:	d106      	bne.n	800cfe6 <HAL_TIMEx_ConfigBreakDeadTime+0xae>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800cfd8:	68fb      	ldr	r3, [r7, #12]
 800cfda:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800cfde:	683b      	ldr	r3, [r7, #0]
 800cfe0:	69db      	ldr	r3, [r3, #28]
 800cfe2:	4313      	orrs	r3, r2
 800cfe4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800cfe6:	687b      	ldr	r3, [r7, #4]
 800cfe8:	681b      	ldr	r3, [r3, #0]
 800cfea:	4a1a      	ldr	r2, [pc, #104]	; (800d054 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 800cfec:	4293      	cmp	r3, r2
 800cfee:	d121      	bne.n	800d034 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800cff0:	68fb      	ldr	r3, [r7, #12]
 800cff2:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800cff6:	683b      	ldr	r3, [r7, #0]
 800cff8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cffa:	051b      	lsls	r3, r3, #20
 800cffc:	4313      	orrs	r3, r2
 800cffe:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800d000:	68fb      	ldr	r3, [r7, #12]
 800d002:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800d006:	683b      	ldr	r3, [r7, #0]
 800d008:	6a1b      	ldr	r3, [r3, #32]
 800d00a:	4313      	orrs	r3, r2
 800d00c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800d00e:	68fb      	ldr	r3, [r7, #12]
 800d010:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800d014:	683b      	ldr	r3, [r7, #0]
 800d016:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d018:	4313      	orrs	r3, r2
 800d01a:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800d01c:	687b      	ldr	r3, [r7, #4]
 800d01e:	681b      	ldr	r3, [r3, #0]
 800d020:	4a0c      	ldr	r2, [pc, #48]	; (800d054 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 800d022:	4293      	cmp	r3, r2
 800d024:	d106      	bne.n	800d034 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800d026:	68fb      	ldr	r3, [r7, #12]
 800d028:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800d02c:	683b      	ldr	r3, [r7, #0]
 800d02e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d030:	4313      	orrs	r3, r2
 800d032:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800d034:	687b      	ldr	r3, [r7, #4]
 800d036:	681b      	ldr	r3, [r3, #0]
 800d038:	68fa      	ldr	r2, [r7, #12]
 800d03a:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800d03c:	687b      	ldr	r3, [r7, #4]
 800d03e:	2200      	movs	r2, #0
 800d040:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800d044:	2300      	movs	r3, #0
}
 800d046:	4618      	mov	r0, r3
 800d048:	3714      	adds	r7, #20
 800d04a:	46bd      	mov	sp, r7
 800d04c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d050:	4770      	bx	lr
 800d052:	bf00      	nop
 800d054:	40012c00 	.word	0x40012c00

0800d058 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800d058:	b480      	push	{r7}
 800d05a:	b083      	sub	sp, #12
 800d05c:	af00      	add	r7, sp, #0
 800d05e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800d060:	bf00      	nop
 800d062:	370c      	adds	r7, #12
 800d064:	46bd      	mov	sp, r7
 800d066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d06a:	4770      	bx	lr

0800d06c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800d06c:	b480      	push	{r7}
 800d06e:	b083      	sub	sp, #12
 800d070:	af00      	add	r7, sp, #0
 800d072:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800d074:	bf00      	nop
 800d076:	370c      	adds	r7, #12
 800d078:	46bd      	mov	sp, r7
 800d07a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d07e:	4770      	bx	lr

0800d080 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800d080:	b480      	push	{r7}
 800d082:	b083      	sub	sp, #12
 800d084:	af00      	add	r7, sp, #0
 800d086:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800d088:	bf00      	nop
 800d08a:	370c      	adds	r7, #12
 800d08c:	46bd      	mov	sp, r7
 800d08e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d092:	4770      	bx	lr

0800d094 <BLS_Init>:
/* Private functions ----------------------------------------------------------*/
/* Weak functions ----------------------------------------------------------*/
void BVOPUS_STM_Init(void);

__weak void BLS_Init( void )
{
 800d094:	b480      	push	{r7}
 800d096:	af00      	add	r7, sp, #0
  return;
 800d098:	bf00      	nop
}
 800d09a:	46bd      	mov	sp, r7
 800d09c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0a0:	4770      	bx	lr

0800d0a2 <CRS_STM_Init>:
__weak void CRS_STM_Init( void )
{
 800d0a2:	b480      	push	{r7}
 800d0a4:	af00      	add	r7, sp, #0
  return;
 800d0a6:	bf00      	nop
}
 800d0a8:	46bd      	mov	sp, r7
 800d0aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0ae:	4770      	bx	lr

0800d0b0 <EDS_STM_Init>:
__weak void DIS_Init( void )
{
  return;
}
__weak void EDS_STM_Init( void )
{
 800d0b0:	b480      	push	{r7}
 800d0b2:	af00      	add	r7, sp, #0
  return;
 800d0b4:	bf00      	nop
}
 800d0b6:	46bd      	mov	sp, r7
 800d0b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0bc:	4770      	bx	lr

0800d0be <HIDS_Init>:
__weak void HIDS_Init( void )
{
 800d0be:	b480      	push	{r7}
 800d0c0:	af00      	add	r7, sp, #0
  return;
 800d0c2:	bf00      	nop
}
 800d0c4:	46bd      	mov	sp, r7
 800d0c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0ca:	4770      	bx	lr

0800d0cc <HTS_Init>:
__weak void HRS_Init( void )
{
  return;
}
__weak void HTS_Init( void )
{
 800d0cc:	b480      	push	{r7}
 800d0ce:	af00      	add	r7, sp, #0
  return;
 800d0d0:	bf00      	nop
}
 800d0d2:	46bd      	mov	sp, r7
 800d0d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0d8:	4770      	bx	lr

0800d0da <IAS_Init>:
__weak void IAS_Init( void )
{
 800d0da:	b480      	push	{r7}
 800d0dc:	af00      	add	r7, sp, #0
  return;
 800d0de:	bf00      	nop
}
 800d0e0:	46bd      	mov	sp, r7
 800d0e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0e6:	4770      	bx	lr

0800d0e8 <LLS_Init>:
__weak void LLS_Init( void )
{
 800d0e8:	b480      	push	{r7}
 800d0ea:	af00      	add	r7, sp, #0
  return;
 800d0ec:	bf00      	nop
}
 800d0ee:	46bd      	mov	sp, r7
 800d0f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0f4:	4770      	bx	lr

0800d0f6 <TPS_Init>:
__weak void TPS_Init( void )
{
 800d0f6:	b480      	push	{r7}
 800d0f8:	af00      	add	r7, sp, #0
  return;
 800d0fa:	bf00      	nop
}
 800d0fc:	46bd      	mov	sp, r7
 800d0fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d102:	4770      	bx	lr

0800d104 <MOTENV_STM_Init>:
__weak void MOTENV_STM_Init( void )
{
 800d104:	b480      	push	{r7}
 800d106:	af00      	add	r7, sp, #0
  return;
 800d108:	bf00      	nop
}
 800d10a:	46bd      	mov	sp, r7
 800d10c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d110:	4770      	bx	lr

0800d112 <OTAS_STM_Init>:
__weak void P2PS_STM_Init( void )
{
  return;
}
__weak void OTAS_STM_Init( void )
{
 800d112:	b480      	push	{r7}
 800d114:	af00      	add	r7, sp, #0
  return;
 800d116:	bf00      	nop
}
 800d118:	46bd      	mov	sp, r7
 800d11a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d11e:	4770      	bx	lr

0800d120 <MESH_Init>:
__weak void MESH_Init( void )
{
 800d120:	b480      	push	{r7}
 800d122:	af00      	add	r7, sp, #0
  return;
 800d124:	bf00      	nop
}
 800d126:	46bd      	mov	sp, r7
 800d128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d12c:	4770      	bx	lr

0800d12e <BVOPUS_STM_Init>:
__weak void BVOPUS_STM_Init( void )
{
 800d12e:	b480      	push	{r7}
 800d130:	af00      	add	r7, sp, #0
  return;
 800d132:	bf00      	nop
}
 800d134:	46bd      	mov	sp, r7
 800d136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d13a:	4770      	bx	lr

0800d13c <SVCCTL_InitCustomSvc>:
__weak void SVCCTL_InitCustomSvc( void )
{
 800d13c:	b480      	push	{r7}
 800d13e:	af00      	add	r7, sp, #0
  return;
 800d140:	bf00      	nop
}
 800d142:	46bd      	mov	sp, r7
 800d144:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d148:	4770      	bx	lr
	...

0800d14c <SVCCTL_Init>:

/* Functions Definition ------------------------------------------------------*/

void SVCCTL_Init( void )
{
 800d14c:	b580      	push	{r7, lr}
 800d14e:	af00      	add	r7, sp, #0
 
  /**
   * Initialize the number of registered Handler
   */
  SVCCTL_EvtHandler.NbreOfRegisteredHandler = 0;
 800d150:	4b04      	ldr	r3, [pc, #16]	; (800d164 <SVCCTL_Init+0x18>)
 800d152:	2200      	movs	r2, #0
 800d154:	771a      	strb	r2, [r3, #28]
  SVCCTL_CltHandler.NbreOfRegisteredHandler = 0;
 800d156:	4b04      	ldr	r3, [pc, #16]	; (800d168 <SVCCTL_Init+0x1c>)
 800d158:	2200      	movs	r2, #0
 800d15a:	701a      	strb	r2, [r3, #0]

  /**
   * Add and Initialize requested services
   */
  SVCCTL_SvcInit();
 800d15c:	f000 f806 	bl	800d16c <SVCCTL_SvcInit>

  return;
 800d160:	bf00      	nop
}
 800d162:	bd80      	pop	{r7, pc}
 800d164:	2000031c 	.word	0x2000031c
 800d168:	2000033c 	.word	0x2000033c

0800d16c <SVCCTL_SvcInit>:

__weak void SVCCTL_SvcInit(void)
{
 800d16c:	b580      	push	{r7, lr}
 800d16e:	af00      	add	r7, sp, #0
  BLS_Init();
 800d170:	f7ff ff90 	bl	800d094 <BLS_Init>

  CRS_STM_Init();
 800d174:	f7ff ff95 	bl	800d0a2 <CRS_STM_Init>

  //DIS_Init();

  EDS_STM_Init();
 800d178:	f7ff ff9a 	bl	800d0b0 <EDS_STM_Init>

  HIDS_Init();
 800d17c:	f7ff ff9f 	bl	800d0be <HIDS_Init>

  //HRS_Init();

  HTS_Init();
 800d180:	f7ff ffa4 	bl	800d0cc <HTS_Init>

  IAS_Init();
 800d184:	f7ff ffa9 	bl	800d0da <IAS_Init>

  LLS_Init();
 800d188:	f7ff ffae 	bl	800d0e8 <LLS_Init>

  TPS_Init();
 800d18c:	f7ff ffb3 	bl	800d0f6 <TPS_Init>

  MOTENV_STM_Init();
 800d190:	f7ff ffb8 	bl	800d104 <MOTENV_STM_Init>

  P2PS_STM_Init();
 800d194:	f001 fdd4 	bl	800ed40 <P2PS_STM_Init>

  OTAS_STM_Init();
 800d198:	f7ff ffbb 	bl	800d112 <OTAS_STM_Init>
  
  BVOPUS_STM_Init();
 800d19c:	f7ff ffc7 	bl	800d12e <BVOPUS_STM_Init>

  MESH_Init();
 800d1a0:	f7ff ffbe 	bl	800d120 <MESH_Init>

  SVCCTL_InitCustomSvc();
 800d1a4:	f7ff ffca 	bl	800d13c <SVCCTL_InitCustomSvc>
  
  return;
 800d1a8:	bf00      	nop
}
 800d1aa:	bd80      	pop	{r7, pc}

0800d1ac <SVCCTL_RegisterSvcHandler>:
 * @brief  BLE Controller initialization
 * @param  None
 * @retval None
 */
void SVCCTL_RegisterSvcHandler( SVC_CTL_p_EvtHandler_t pfBLE_SVC_Service_Event_Handler )
{
 800d1ac:	b480      	push	{r7}
 800d1ae:	b083      	sub	sp, #12
 800d1b0:	af00      	add	r7, sp, #0
 800d1b2:	6078      	str	r0, [r7, #4]
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
  SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[SVCCTL_EvtHandler.NbreOfRegisteredHandler] = pfBLE_SVC_Service_Event_Handler;
 800d1b4:	4b09      	ldr	r3, [pc, #36]	; (800d1dc <SVCCTL_RegisterSvcHandler+0x30>)
 800d1b6:	7f1b      	ldrb	r3, [r3, #28]
 800d1b8:	4619      	mov	r1, r3
 800d1ba:	4a08      	ldr	r2, [pc, #32]	; (800d1dc <SVCCTL_RegisterSvcHandler+0x30>)
 800d1bc:	687b      	ldr	r3, [r7, #4]
 800d1be:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  SVCCTL_EvtHandler.NbreOfRegisteredHandler++;
 800d1c2:	4b06      	ldr	r3, [pc, #24]	; (800d1dc <SVCCTL_RegisterSvcHandler+0x30>)
 800d1c4:	7f1b      	ldrb	r3, [r3, #28]
 800d1c6:	3301      	adds	r3, #1
 800d1c8:	b2da      	uxtb	r2, r3
 800d1ca:	4b04      	ldr	r3, [pc, #16]	; (800d1dc <SVCCTL_RegisterSvcHandler+0x30>)
 800d1cc:	771a      	strb	r2, [r3, #28]
#else
  (void)(pfBLE_SVC_Service_Event_Handler);
#endif

  return;
 800d1ce:	bf00      	nop
}
 800d1d0:	370c      	adds	r7, #12
 800d1d2:	46bd      	mov	sp, r7
 800d1d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1d8:	4770      	bx	lr
 800d1da:	bf00      	nop
 800d1dc:	2000031c 	.word	0x2000031c

0800d1e0 <SVCCTL_UserEvtRx>:

  return;
}

SVCCTL_UserEvtFlowStatus_t SVCCTL_UserEvtRx( void *pckt )
{
 800d1e0:	b580      	push	{r7, lr}
 800d1e2:	b086      	sub	sp, #24
 800d1e4:	af00      	add	r7, sp, #0
 800d1e6:	6078      	str	r0, [r7, #4]
  evt_blue_aci *blue_evt;
  SVCCTL_EvtAckStatus_t event_notification_status;
  SVCCTL_UserEvtFlowStatus_t return_status;
  uint8_t index;

  event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) pckt)->data;
 800d1e8:	687b      	ldr	r3, [r7, #4]
 800d1ea:	3301      	adds	r3, #1
 800d1ec:	613b      	str	r3, [r7, #16]
  event_notification_status = SVCCTL_EvtNotAck;
 800d1ee:	2300      	movs	r3, #0
 800d1f0:	75fb      	strb	r3, [r7, #23]

  switch (event_pckt->evt)
 800d1f2:	693b      	ldr	r3, [r7, #16]
 800d1f4:	781b      	ldrb	r3, [r3, #0]
 800d1f6:	2bff      	cmp	r3, #255	; 0xff
 800d1f8:	d000      	beq.n	800d1fc <SVCCTL_UserEvtRx+0x1c>
      }
    }
      break; /* HCI_EVT_VENDOR_SPECIFIC */

    default:
      break;
 800d1fa:	e025      	b.n	800d248 <SVCCTL_UserEvtRx+0x68>
      blue_evt = (evt_blue_aci*) event_pckt->data;
 800d1fc:	693b      	ldr	r3, [r7, #16]
 800d1fe:	3302      	adds	r3, #2
 800d200:	60fb      	str	r3, [r7, #12]
      switch ((blue_evt->ecode) & SVCCTL_EGID_EVT_MASK)
 800d202:	68fb      	ldr	r3, [r7, #12]
 800d204:	881b      	ldrh	r3, [r3, #0]
 800d206:	b29b      	uxth	r3, r3
 800d208:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800d20c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800d210:	d000      	beq.n	800d214 <SVCCTL_UserEvtRx+0x34>
          break;
 800d212:	e018      	b.n	800d246 <SVCCTL_UserEvtRx+0x66>
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 800d214:	2300      	movs	r3, #0
 800d216:	757b      	strb	r3, [r7, #21]
 800d218:	e00d      	b.n	800d236 <SVCCTL_UserEvtRx+0x56>
            event_notification_status = SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[index](pckt);
 800d21a:	7d7b      	ldrb	r3, [r7, #21]
 800d21c:	4a18      	ldr	r2, [pc, #96]	; (800d280 <SVCCTL_UserEvtRx+0xa0>)
 800d21e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d222:	6878      	ldr	r0, [r7, #4]
 800d224:	4798      	blx	r3
 800d226:	4603      	mov	r3, r0
 800d228:	75fb      	strb	r3, [r7, #23]
            if (event_notification_status != SVCCTL_EvtNotAck)
 800d22a:	7dfb      	ldrb	r3, [r7, #23]
 800d22c:	2b00      	cmp	r3, #0
 800d22e:	d108      	bne.n	800d242 <SVCCTL_UserEvtRx+0x62>
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 800d230:	7d7b      	ldrb	r3, [r7, #21]
 800d232:	3301      	adds	r3, #1
 800d234:	757b      	strb	r3, [r7, #21]
 800d236:	4b12      	ldr	r3, [pc, #72]	; (800d280 <SVCCTL_UserEvtRx+0xa0>)
 800d238:	7f1b      	ldrb	r3, [r3, #28]
 800d23a:	7d7a      	ldrb	r2, [r7, #21]
 800d23c:	429a      	cmp	r2, r3
 800d23e:	d3ec      	bcc.n	800d21a <SVCCTL_UserEvtRx+0x3a>
          break;
 800d240:	e000      	b.n	800d244 <SVCCTL_UserEvtRx+0x64>
              break;
 800d242:	bf00      	nop
          break;
 800d244:	bf00      	nop
      break; /* HCI_EVT_VENDOR_SPECIFIC */
 800d246:	bf00      	nop

  /**
   * When no registered handlers (either Service or Client) has acknowledged the GATT event, it is reported to the application
   * a GAP event is always reported to the applicaiton.
   */
  switch (event_notification_status)
 800d248:	7dfb      	ldrb	r3, [r7, #23]
 800d24a:	2b01      	cmp	r3, #1
 800d24c:	d009      	beq.n	800d262 <SVCCTL_UserEvtRx+0x82>
 800d24e:	2b02      	cmp	r3, #2
 800d250:	d00a      	beq.n	800d268 <SVCCTL_UserEvtRx+0x88>
 800d252:	2b00      	cmp	r3, #0
 800d254:	d10b      	bne.n	800d26e <SVCCTL_UserEvtRx+0x8e>
    case SVCCTL_EvtNotAck:
      /**
       *  The event has NOT been managed.
       *  It shall be passed to the application for processing
       */
      return_status = SVCCTL_App_Notification(pckt);
 800d256:	6878      	ldr	r0, [r7, #4]
 800d258:	f7f3 fd68 	bl	8000d2c <SVCCTL_App_Notification>
 800d25c:	4603      	mov	r3, r0
 800d25e:	75bb      	strb	r3, [r7, #22]
      break;
 800d260:	e008      	b.n	800d274 <SVCCTL_UserEvtRx+0x94>

    case SVCCTL_EvtAckFlowEnable:
      return_status = SVCCTL_UserEvtFlowEnable;
 800d262:	2301      	movs	r3, #1
 800d264:	75bb      	strb	r3, [r7, #22]
      break;
 800d266:	e005      	b.n	800d274 <SVCCTL_UserEvtRx+0x94>

    case SVCCTL_EvtAckFlowDisable:
      return_status = SVCCTL_UserEvtFlowDisable;
 800d268:	2300      	movs	r3, #0
 800d26a:	75bb      	strb	r3, [r7, #22]
      break;
 800d26c:	e002      	b.n	800d274 <SVCCTL_UserEvtRx+0x94>

    default:
      return_status = SVCCTL_UserEvtFlowEnable;
 800d26e:	2301      	movs	r3, #1
 800d270:	75bb      	strb	r3, [r7, #22]
      break;
 800d272:	bf00      	nop
  }

  return (return_status);
 800d274:	7dbb      	ldrb	r3, [r7, #22]
}
 800d276:	4618      	mov	r0, r3
 800d278:	3718      	adds	r7, #24
 800d27a:	46bd      	mov	sp, r7
 800d27c:	bd80      	pop	{r7, pc}
 800d27e:	bf00      	nop
 800d280:	2000031c 	.word	0x2000031c

0800d284 <aci_gap_set_non_discoverable>:
 */

#include "ble_gap_aci.h"

tBleStatus aci_gap_set_non_discoverable( void )
{
 800d284:	b580      	push	{r7, lr}
 800d286:	b088      	sub	sp, #32
 800d288:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 800d28a:	2300      	movs	r3, #0
 800d28c:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800d28e:	f107 0308 	add.w	r3, r7, #8
 800d292:	2218      	movs	r2, #24
 800d294:	2100      	movs	r1, #0
 800d296:	4618      	mov	r0, r3
 800d298:	f000 ff9c 	bl	800e1d4 <Osal_MemSet>
  rq.ogf = 0x3f;
 800d29c:	233f      	movs	r3, #63	; 0x3f
 800d29e:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x081;
 800d2a0:	2381      	movs	r3, #129	; 0x81
 800d2a2:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 800d2a4:	1dfb      	adds	r3, r7, #7
 800d2a6:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 800d2a8:	2301      	movs	r3, #1
 800d2aa:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 800d2ac:	f107 0308 	add.w	r3, r7, #8
 800d2b0:	2100      	movs	r1, #0
 800d2b2:	4618      	mov	r0, r3
 800d2b4:	f001 f836 	bl	800e324 <hci_send_req>
 800d2b8:	4603      	mov	r3, r0
 800d2ba:	2b00      	cmp	r3, #0
 800d2bc:	da01      	bge.n	800d2c2 <aci_gap_set_non_discoverable+0x3e>
    return BLE_STATUS_TIMEOUT;
 800d2be:	23ff      	movs	r3, #255	; 0xff
 800d2c0:	e000      	b.n	800d2c4 <aci_gap_set_non_discoverable+0x40>
  return status;
 800d2c2:	79fb      	ldrb	r3, [r7, #7]
}
 800d2c4:	4618      	mov	r0, r3
 800d2c6:	3720      	adds	r7, #32
 800d2c8:	46bd      	mov	sp, r7
 800d2ca:	bd80      	pop	{r7, pc}

0800d2cc <aci_gap_set_discoverable>:
                                     const uint8_t* Local_Name,
                                     uint8_t Service_Uuid_length,
                                     const uint8_t* Service_Uuid_List,
                                     uint16_t Slave_Conn_Interval_Min,
                                     uint16_t Slave_Conn_Interval_Max )
{
 800d2cc:	b5b0      	push	{r4, r5, r7, lr}
 800d2ce:	b0ce      	sub	sp, #312	; 0x138
 800d2d0:	af00      	add	r7, sp, #0
 800d2d2:	4605      	mov	r5, r0
 800d2d4:	460c      	mov	r4, r1
 800d2d6:	4610      	mov	r0, r2
 800d2d8:	4619      	mov	r1, r3
 800d2da:	1dfb      	adds	r3, r7, #7
 800d2dc:	462a      	mov	r2, r5
 800d2de:	701a      	strb	r2, [r3, #0]
 800d2e0:	1d3b      	adds	r3, r7, #4
 800d2e2:	4622      	mov	r2, r4
 800d2e4:	801a      	strh	r2, [r3, #0]
 800d2e6:	1cbb      	adds	r3, r7, #2
 800d2e8:	4602      	mov	r2, r0
 800d2ea:	801a      	strh	r2, [r3, #0]
 800d2ec:	1dbb      	adds	r3, r7, #6
 800d2ee:	460a      	mov	r2, r1
 800d2f0:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_discoverable_cp0 *cp0 = (aci_gap_set_discoverable_cp0*)(cmd_buffer);
 800d2f2:	f107 0310 	add.w	r3, r7, #16
 800d2f6:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  aci_gap_set_discoverable_cp1 *cp1 = (aci_gap_set_discoverable_cp1*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)));
 800d2fa:	f897 314c 	ldrb.w	r3, [r7, #332]	; 0x14c
 800d2fe:	3308      	adds	r3, #8
 800d300:	f107 0210 	add.w	r2, r7, #16
 800d304:	4413      	add	r3, r2
 800d306:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  aci_gap_set_discoverable_cp2 *cp2 = (aci_gap_set_discoverable_cp2*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)) + 1 + Service_Uuid_length * (sizeof(uint8_t)));
 800d30a:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 800d30e:	f897 3154 	ldrb.w	r3, [r7, #340]	; 0x154
 800d312:	4413      	add	r3, r2
 800d314:	3309      	adds	r3, #9
 800d316:	f107 0210 	add.w	r2, r7, #16
 800d31a:	4413      	add	r3, r2
 800d31c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800d320:	f107 030f 	add.w	r3, r7, #15
 800d324:	2200      	movs	r2, #0
 800d326:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800d328:	2300      	movs	r3, #0
 800d32a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Type = Advertising_Type;
 800d32e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800d332:	1dfa      	adds	r2, r7, #7
 800d334:	7812      	ldrb	r2, [r2, #0]
 800d336:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800d338:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800d33c:	3301      	adds	r3, #1
 800d33e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Interval_Min = Advertising_Interval_Min;
 800d342:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800d346:	1d3a      	adds	r2, r7, #4
 800d348:	8812      	ldrh	r2, [r2, #0]
 800d34a:	f8a3 2001 	strh.w	r2, [r3, #1]
  index_input += 2;
 800d34e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800d352:	3302      	adds	r3, #2
 800d354:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Interval_Max = Advertising_Interval_Max;
 800d358:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800d35c:	1cba      	adds	r2, r7, #2
 800d35e:	8812      	ldrh	r2, [r2, #0]
 800d360:	f8a3 2003 	strh.w	r2, [r3, #3]
  index_input += 2;
 800d364:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800d368:	3302      	adds	r3, #2
 800d36a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Own_Address_Type = Own_Address_Type;
 800d36e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800d372:	1dba      	adds	r2, r7, #6
 800d374:	7812      	ldrb	r2, [r2, #0]
 800d376:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 800d378:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800d37c:	3301      	adds	r3, #1
 800d37e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Filter_Policy = Advertising_Filter_Policy;
 800d382:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800d386:	f897 2148 	ldrb.w	r2, [r7, #328]	; 0x148
 800d38a:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 800d38c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800d390:	3301      	adds	r3, #1
 800d392:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Local_Name_Length = Local_Name_Length;
 800d396:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800d39a:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 800d39e:	71da      	strb	r2, [r3, #7]
  index_input += 1;
 800d3a0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800d3a4:	3301      	adds	r3, #1
 800d3a6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  /* var_len_data input */
  {
    Osal_MemCpy( (void*)&cp0->Local_Name, (const void*)Local_Name, Local_Name_Length );
 800d3aa:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800d3ae:	3308      	adds	r3, #8
 800d3b0:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 800d3b4:	f8d7 1150 	ldr.w	r1, [r7, #336]	; 0x150
 800d3b8:	4618      	mov	r0, r3
 800d3ba:	f000 fefb 	bl	800e1b4 <Osal_MemCpy>
    index_input += Local_Name_Length;
 800d3be:	f897 314c 	ldrb.w	r3, [r7, #332]	; 0x14c
 800d3c2:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800d3c6:	4413      	add	r3, r2
 800d3c8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp1->Service_Uuid_length = Service_Uuid_length;
 800d3cc:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800d3d0:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 800d3d4:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 800d3d6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800d3da:	3301      	adds	r3, #1
 800d3dc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    Osal_MemCpy( (void*)&cp1->Service_Uuid_List, (const void*)Service_Uuid_List, Service_Uuid_length );
 800d3e0:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800d3e4:	3301      	adds	r3, #1
 800d3e6:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 800d3ea:	f8d7 1158 	ldr.w	r1, [r7, #344]	; 0x158
 800d3ee:	4618      	mov	r0, r3
 800d3f0:	f000 fee0 	bl	800e1b4 <Osal_MemCpy>
    index_input += Service_Uuid_length;
 800d3f4:	f897 3154 	ldrb.w	r3, [r7, #340]	; 0x154
 800d3f8:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800d3fc:	4413      	add	r3, r2
 800d3fe:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp2->Slave_Conn_Interval_Min = Slave_Conn_Interval_Min;
 800d402:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800d406:	f8b7 215c 	ldrh.w	r2, [r7, #348]	; 0x15c
 800d40a:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 800d40c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800d410:	3302      	adds	r3, #2
 800d412:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp2->Slave_Conn_Interval_Max = Slave_Conn_Interval_Max;
 800d416:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800d41a:	f8b7 2160 	ldrh.w	r2, [r7, #352]	; 0x160
 800d41e:	805a      	strh	r2, [r3, #2]
    }
    index_input += 2;
 800d420:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800d424:	3302      	adds	r3, #2
 800d426:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800d42a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800d42e:	2218      	movs	r2, #24
 800d430:	2100      	movs	r1, #0
 800d432:	4618      	mov	r0, r3
 800d434:	f000 fece 	bl	800e1d4 <Osal_MemSet>
  rq.ogf = 0x3f;
 800d438:	233f      	movs	r3, #63	; 0x3f
 800d43a:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x083;
 800d43e:	2383      	movs	r3, #131	; 0x83
 800d440:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800d444:	f107 0310 	add.w	r3, r7, #16
 800d448:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800d44c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800d450:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800d454:	f107 030f 	add.w	r3, r7, #15
 800d458:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800d45c:	2301      	movs	r3, #1
 800d45e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800d462:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800d466:	2100      	movs	r1, #0
 800d468:	4618      	mov	r0, r3
 800d46a:	f000 ff5b 	bl	800e324 <hci_send_req>
 800d46e:	4603      	mov	r3, r0
 800d470:	2b00      	cmp	r3, #0
 800d472:	da01      	bge.n	800d478 <aci_gap_set_discoverable+0x1ac>
    return BLE_STATUS_TIMEOUT;
 800d474:	23ff      	movs	r3, #255	; 0xff
 800d476:	e002      	b.n	800d47e <aci_gap_set_discoverable+0x1b2>
  return status;
 800d478:	f107 030f 	add.w	r3, r7, #15
 800d47c:	781b      	ldrb	r3, [r3, #0]
}
 800d47e:	4618      	mov	r0, r3
 800d480:	f507 779c 	add.w	r7, r7, #312	; 0x138
 800d484:	46bd      	mov	sp, r7
 800d486:	bdb0      	pop	{r4, r5, r7, pc}

0800d488 <aci_gap_set_io_capability>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_set_io_capability( uint8_t IO_Capability )
{
 800d488:	b580      	push	{r7, lr}
 800d48a:	b0cc      	sub	sp, #304	; 0x130
 800d48c:	af00      	add	r7, sp, #0
 800d48e:	4602      	mov	r2, r0
 800d490:	1dfb      	adds	r3, r7, #7
 800d492:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_io_capability_cp0 *cp0 = (aci_gap_set_io_capability_cp0*)(cmd_buffer);
 800d494:	f107 0310 	add.w	r3, r7, #16
 800d498:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800d49c:	f107 030f 	add.w	r3, r7, #15
 800d4a0:	2200      	movs	r2, #0
 800d4a2:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800d4a4:	2300      	movs	r3, #0
 800d4a6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->IO_Capability = IO_Capability;
 800d4aa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800d4ae:	1dfa      	adds	r2, r7, #7
 800d4b0:	7812      	ldrb	r2, [r2, #0]
 800d4b2:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800d4b4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800d4b8:	3301      	adds	r3, #1
 800d4ba:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800d4be:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800d4c2:	2218      	movs	r2, #24
 800d4c4:	2100      	movs	r1, #0
 800d4c6:	4618      	mov	r0, r3
 800d4c8:	f000 fe84 	bl	800e1d4 <Osal_MemSet>
  rq.ogf = 0x3f;
 800d4cc:	233f      	movs	r3, #63	; 0x3f
 800d4ce:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x085;
 800d4d2:	2385      	movs	r3, #133	; 0x85
 800d4d4:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800d4d8:	f107 0310 	add.w	r3, r7, #16
 800d4dc:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800d4e0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800d4e4:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800d4e8:	f107 030f 	add.w	r3, r7, #15
 800d4ec:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800d4f0:	2301      	movs	r3, #1
 800d4f2:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800d4f6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800d4fa:	2100      	movs	r1, #0
 800d4fc:	4618      	mov	r0, r3
 800d4fe:	f000 ff11 	bl	800e324 <hci_send_req>
 800d502:	4603      	mov	r3, r0
 800d504:	2b00      	cmp	r3, #0
 800d506:	da01      	bge.n	800d50c <aci_gap_set_io_capability+0x84>
    return BLE_STATUS_TIMEOUT;
 800d508:	23ff      	movs	r3, #255	; 0xff
 800d50a:	e002      	b.n	800d512 <aci_gap_set_io_capability+0x8a>
  return status;
 800d50c:	f107 030f 	add.w	r3, r7, #15
 800d510:	781b      	ldrb	r3, [r3, #0]
}
 800d512:	4618      	mov	r0, r3
 800d514:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800d518:	46bd      	mov	sp, r7
 800d51a:	bd80      	pop	{r7, pc}

0800d51c <aci_gap_set_authentication_requirement>:
                                                   uint8_t Min_Encryption_Key_Size,
                                                   uint8_t Max_Encryption_Key_Size,
                                                   uint8_t Use_Fixed_Pin,
                                                   uint32_t Fixed_Pin,
                                                   uint8_t Identity_Address_Type )
{
 800d51c:	b5b0      	push	{r4, r5, r7, lr}
 800d51e:	b0cc      	sub	sp, #304	; 0x130
 800d520:	af00      	add	r7, sp, #0
 800d522:	4605      	mov	r5, r0
 800d524:	460c      	mov	r4, r1
 800d526:	4610      	mov	r0, r2
 800d528:	4619      	mov	r1, r3
 800d52a:	1dfb      	adds	r3, r7, #7
 800d52c:	462a      	mov	r2, r5
 800d52e:	701a      	strb	r2, [r3, #0]
 800d530:	1dbb      	adds	r3, r7, #6
 800d532:	4622      	mov	r2, r4
 800d534:	701a      	strb	r2, [r3, #0]
 800d536:	1d7b      	adds	r3, r7, #5
 800d538:	4602      	mov	r2, r0
 800d53a:	701a      	strb	r2, [r3, #0]
 800d53c:	1d3b      	adds	r3, r7, #4
 800d53e:	460a      	mov	r2, r1
 800d540:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_authentication_requirement_cp0 *cp0 = (aci_gap_set_authentication_requirement_cp0*)(cmd_buffer);
 800d542:	f107 0310 	add.w	r3, r7, #16
 800d546:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800d54a:	f107 030f 	add.w	r3, r7, #15
 800d54e:	2200      	movs	r2, #0
 800d550:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800d552:	2300      	movs	r3, #0
 800d554:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Bonding_Mode = Bonding_Mode;
 800d558:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800d55c:	1dfa      	adds	r2, r7, #7
 800d55e:	7812      	ldrb	r2, [r2, #0]
 800d560:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800d562:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800d566:	3301      	adds	r3, #1
 800d568:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->MITM_Mode = MITM_Mode;
 800d56c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800d570:	1dba      	adds	r2, r7, #6
 800d572:	7812      	ldrb	r2, [r2, #0]
 800d574:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800d576:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800d57a:	3301      	adds	r3, #1
 800d57c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->SC_Support = SC_Support;
 800d580:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800d584:	1d7a      	adds	r2, r7, #5
 800d586:	7812      	ldrb	r2, [r2, #0]
 800d588:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800d58a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800d58e:	3301      	adds	r3, #1
 800d590:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->KeyPress_Notification_Support = KeyPress_Notification_Support;
 800d594:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800d598:	1d3a      	adds	r2, r7, #4
 800d59a:	7812      	ldrb	r2, [r2, #0]
 800d59c:	70da      	strb	r2, [r3, #3]
  index_input += 1;
 800d59e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800d5a2:	3301      	adds	r3, #1
 800d5a4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Min_Encryption_Key_Size = Min_Encryption_Key_Size;
 800d5a8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800d5ac:	f897 2140 	ldrb.w	r2, [r7, #320]	; 0x140
 800d5b0:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 800d5b2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800d5b6:	3301      	adds	r3, #1
 800d5b8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Max_Encryption_Key_Size = Max_Encryption_Key_Size;
 800d5bc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800d5c0:	f897 2144 	ldrb.w	r2, [r7, #324]	; 0x144
 800d5c4:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 800d5c6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800d5ca:	3301      	adds	r3, #1
 800d5cc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Use_Fixed_Pin = Use_Fixed_Pin;
 800d5d0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800d5d4:	f897 2148 	ldrb.w	r2, [r7, #328]	; 0x148
 800d5d8:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 800d5da:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800d5de:	3301      	adds	r3, #1
 800d5e0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Fixed_Pin = Fixed_Pin;
 800d5e4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800d5e8:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 800d5ec:	f8c3 2007 	str.w	r2, [r3, #7]
  index_input += 4;
 800d5f0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800d5f4:	3304      	adds	r3, #4
 800d5f6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Identity_Address_Type = Identity_Address_Type;
 800d5fa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800d5fe:	f897 2150 	ldrb.w	r2, [r7, #336]	; 0x150
 800d602:	72da      	strb	r2, [r3, #11]
  index_input += 1;
 800d604:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800d608:	3301      	adds	r3, #1
 800d60a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800d60e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800d612:	2218      	movs	r2, #24
 800d614:	2100      	movs	r1, #0
 800d616:	4618      	mov	r0, r3
 800d618:	f000 fddc 	bl	800e1d4 <Osal_MemSet>
  rq.ogf = 0x3f;
 800d61c:	233f      	movs	r3, #63	; 0x3f
 800d61e:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x086;
 800d622:	2386      	movs	r3, #134	; 0x86
 800d624:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800d628:	f107 0310 	add.w	r3, r7, #16
 800d62c:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800d630:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800d634:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800d638:	f107 030f 	add.w	r3, r7, #15
 800d63c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800d640:	2301      	movs	r3, #1
 800d642:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800d646:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800d64a:	2100      	movs	r1, #0
 800d64c:	4618      	mov	r0, r3
 800d64e:	f000 fe69 	bl	800e324 <hci_send_req>
 800d652:	4603      	mov	r3, r0
 800d654:	2b00      	cmp	r3, #0
 800d656:	da01      	bge.n	800d65c <aci_gap_set_authentication_requirement+0x140>
    return BLE_STATUS_TIMEOUT;
 800d658:	23ff      	movs	r3, #255	; 0xff
 800d65a:	e002      	b.n	800d662 <aci_gap_set_authentication_requirement+0x146>
  return status;
 800d65c:	f107 030f 	add.w	r3, r7, #15
 800d660:	781b      	ldrb	r3, [r3, #0]
}
 800d662:	4618      	mov	r0, r3
 800d664:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800d668:	46bd      	mov	sp, r7
 800d66a:	bdb0      	pop	{r4, r5, r7, pc}

0800d66c <aci_gap_init>:
                         uint8_t privacy_enabled,
                         uint8_t device_name_char_len,
                         uint16_t* Service_Handle,
                         uint16_t* Dev_Name_Char_Handle,
                         uint16_t* Appearance_Char_Handle )
{
 800d66c:	b590      	push	{r4, r7, lr}
 800d66e:	b0cd      	sub	sp, #308	; 0x134
 800d670:	af00      	add	r7, sp, #0
 800d672:	4604      	mov	r4, r0
 800d674:	4608      	mov	r0, r1
 800d676:	4611      	mov	r1, r2
 800d678:	463a      	mov	r2, r7
 800d67a:	6013      	str	r3, [r2, #0]
 800d67c:	1dfb      	adds	r3, r7, #7
 800d67e:	4622      	mov	r2, r4
 800d680:	701a      	strb	r2, [r3, #0]
 800d682:	1dbb      	adds	r3, r7, #6
 800d684:	4602      	mov	r2, r0
 800d686:	701a      	strb	r2, [r3, #0]
 800d688:	1d7b      	adds	r3, r7, #5
 800d68a:	460a      	mov	r2, r1
 800d68c:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_init_cp0 *cp0 = (aci_gap_init_cp0*)(cmd_buffer);
 800d68e:	f107 0310 	add.w	r3, r7, #16
 800d692:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  aci_gap_init_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 800d696:	f107 0308 	add.w	r3, r7, #8
 800d69a:	2207      	movs	r2, #7
 800d69c:	2100      	movs	r1, #0
 800d69e:	4618      	mov	r0, r3
 800d6a0:	f000 fd98 	bl	800e1d4 <Osal_MemSet>
  int index_input = 0;
 800d6a4:	2300      	movs	r3, #0
 800d6a6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Role = Role;
 800d6aa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800d6ae:	1dfa      	adds	r2, r7, #7
 800d6b0:	7812      	ldrb	r2, [r2, #0]
 800d6b2:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800d6b4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800d6b8:	3301      	adds	r3, #1
 800d6ba:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->privacy_enabled = privacy_enabled;
 800d6be:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800d6c2:	1dba      	adds	r2, r7, #6
 800d6c4:	7812      	ldrb	r2, [r2, #0]
 800d6c6:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800d6c8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800d6cc:	3301      	adds	r3, #1
 800d6ce:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->device_name_char_len = device_name_char_len;
 800d6d2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800d6d6:	1d7a      	adds	r2, r7, #5
 800d6d8:	7812      	ldrb	r2, [r2, #0]
 800d6da:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800d6dc:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800d6e0:	3301      	adds	r3, #1
 800d6e2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800d6e6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800d6ea:	2218      	movs	r2, #24
 800d6ec:	2100      	movs	r1, #0
 800d6ee:	4618      	mov	r0, r3
 800d6f0:	f000 fd70 	bl	800e1d4 <Osal_MemSet>
  rq.ogf = 0x3f;
 800d6f4:	233f      	movs	r3, #63	; 0x3f
 800d6f6:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x08a;
 800d6fa:	238a      	movs	r3, #138	; 0x8a
 800d6fc:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800d700:	f107 0310 	add.w	r3, r7, #16
 800d704:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800d708:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800d70c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &resp;
 800d710:	f107 0308 	add.w	r3, r7, #8
 800d714:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = sizeof(resp);
 800d718:	2307      	movs	r3, #7
 800d71a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800d71e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800d722:	2100      	movs	r1, #0
 800d724:	4618      	mov	r0, r3
 800d726:	f000 fdfd 	bl	800e324 <hci_send_req>
 800d72a:	4603      	mov	r3, r0
 800d72c:	2b00      	cmp	r3, #0
 800d72e:	da01      	bge.n	800d734 <aci_gap_init+0xc8>
    return BLE_STATUS_TIMEOUT;
 800d730:	23ff      	movs	r3, #255	; 0xff
 800d732:	e021      	b.n	800d778 <aci_gap_init+0x10c>
  if ( resp.Status )
 800d734:	f107 0308 	add.w	r3, r7, #8
 800d738:	781b      	ldrb	r3, [r3, #0]
 800d73a:	2b00      	cmp	r3, #0
 800d73c:	d003      	beq.n	800d746 <aci_gap_init+0xda>
    return resp.Status;
 800d73e:	f107 0308 	add.w	r3, r7, #8
 800d742:	781b      	ldrb	r3, [r3, #0]
 800d744:	e018      	b.n	800d778 <aci_gap_init+0x10c>
  *Service_Handle = resp.Service_Handle;
 800d746:	f107 0308 	add.w	r3, r7, #8
 800d74a:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800d74e:	b29a      	uxth	r2, r3
 800d750:	463b      	mov	r3, r7
 800d752:	681b      	ldr	r3, [r3, #0]
 800d754:	801a      	strh	r2, [r3, #0]
  *Dev_Name_Char_Handle = resp.Dev_Name_Char_Handle;
 800d756:	f107 0308 	add.w	r3, r7, #8
 800d75a:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 800d75e:	b29a      	uxth	r2, r3
 800d760:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 800d764:	801a      	strh	r2, [r3, #0]
  *Appearance_Char_Handle = resp.Appearance_Char_Handle;
 800d766:	f107 0308 	add.w	r3, r7, #8
 800d76a:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 800d76e:	b29a      	uxth	r2, r3
 800d770:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 800d774:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 800d776:	2300      	movs	r3, #0
}
 800d778:	4618      	mov	r0, r3
 800d77a:	f507 779a 	add.w	r7, r7, #308	; 0x134
 800d77e:	46bd      	mov	sp, r7
 800d780:	bd90      	pop	{r4, r7, pc}

0800d782 <aci_gap_update_adv_data>:
  return status;
}

tBleStatus aci_gap_update_adv_data( uint8_t AdvDataLen,
                                    const uint8_t* AdvData )
{
 800d782:	b580      	push	{r7, lr}
 800d784:	b0cc      	sub	sp, #304	; 0x130
 800d786:	af00      	add	r7, sp, #0
 800d788:	4602      	mov	r2, r0
 800d78a:	463b      	mov	r3, r7
 800d78c:	6019      	str	r1, [r3, #0]
 800d78e:	1dfb      	adds	r3, r7, #7
 800d790:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_update_adv_data_cp0 *cp0 = (aci_gap_update_adv_data_cp0*)(cmd_buffer);
 800d792:	f107 0310 	add.w	r3, r7, #16
 800d796:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800d79a:	f107 030f 	add.w	r3, r7, #15
 800d79e:	2200      	movs	r2, #0
 800d7a0:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800d7a2:	2300      	movs	r3, #0
 800d7a4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->AdvDataLen = AdvDataLen;
 800d7a8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800d7ac:	1dfa      	adds	r2, r7, #7
 800d7ae:	7812      	ldrb	r2, [r2, #0]
 800d7b0:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800d7b2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800d7b6:	3301      	adds	r3, #1
 800d7b8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->AdvData, (const void*)AdvData, AdvDataLen );
 800d7bc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800d7c0:	1c58      	adds	r0, r3, #1
 800d7c2:	1dfb      	adds	r3, r7, #7
 800d7c4:	781a      	ldrb	r2, [r3, #0]
 800d7c6:	463b      	mov	r3, r7
 800d7c8:	6819      	ldr	r1, [r3, #0]
 800d7ca:	f000 fcf3 	bl	800e1b4 <Osal_MemCpy>
  index_input += AdvDataLen;
 800d7ce:	1dfb      	adds	r3, r7, #7
 800d7d0:	781b      	ldrb	r3, [r3, #0]
 800d7d2:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800d7d6:	4413      	add	r3, r2
 800d7d8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800d7dc:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800d7e0:	2218      	movs	r2, #24
 800d7e2:	2100      	movs	r1, #0
 800d7e4:	4618      	mov	r0, r3
 800d7e6:	f000 fcf5 	bl	800e1d4 <Osal_MemSet>
  rq.ogf = 0x3f;
 800d7ea:	233f      	movs	r3, #63	; 0x3f
 800d7ec:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x08e;
 800d7f0:	238e      	movs	r3, #142	; 0x8e
 800d7f2:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800d7f6:	f107 0310 	add.w	r3, r7, #16
 800d7fa:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800d7fe:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800d802:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800d806:	f107 030f 	add.w	r3, r7, #15
 800d80a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800d80e:	2301      	movs	r3, #1
 800d810:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800d814:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800d818:	2100      	movs	r1, #0
 800d81a:	4618      	mov	r0, r3
 800d81c:	f000 fd82 	bl	800e324 <hci_send_req>
 800d820:	4603      	mov	r3, r0
 800d822:	2b00      	cmp	r3, #0
 800d824:	da01      	bge.n	800d82a <aci_gap_update_adv_data+0xa8>
    return BLE_STATUS_TIMEOUT;
 800d826:	23ff      	movs	r3, #255	; 0xff
 800d828:	e002      	b.n	800d830 <aci_gap_update_adv_data+0xae>
  return status;
 800d82a:	f107 030f 	add.w	r3, r7, #15
 800d82e:	781b      	ldrb	r3, [r3, #0]
}
 800d830:	4618      	mov	r0, r3
 800d832:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800d836:	46bd      	mov	sp, r7
 800d838:	bd80      	pop	{r7, pc}

0800d83a <aci_gap_configure_whitelist>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_configure_whitelist( void )
{
 800d83a:	b580      	push	{r7, lr}
 800d83c:	b088      	sub	sp, #32
 800d83e:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 800d840:	2300      	movs	r3, #0
 800d842:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800d844:	f107 0308 	add.w	r3, r7, #8
 800d848:	2218      	movs	r2, #24
 800d84a:	2100      	movs	r1, #0
 800d84c:	4618      	mov	r0, r3
 800d84e:	f000 fcc1 	bl	800e1d4 <Osal_MemSet>
  rq.ogf = 0x3f;
 800d852:	233f      	movs	r3, #63	; 0x3f
 800d854:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x092;
 800d856:	2392      	movs	r3, #146	; 0x92
 800d858:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 800d85a:	1dfb      	adds	r3, r7, #7
 800d85c:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 800d85e:	2301      	movs	r3, #1
 800d860:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 800d862:	f107 0308 	add.w	r3, r7, #8
 800d866:	2100      	movs	r1, #0
 800d868:	4618      	mov	r0, r3
 800d86a:	f000 fd5b 	bl	800e324 <hci_send_req>
 800d86e:	4603      	mov	r3, r0
 800d870:	2b00      	cmp	r3, #0
 800d872:	da01      	bge.n	800d878 <aci_gap_configure_whitelist+0x3e>
    return BLE_STATUS_TIMEOUT;
 800d874:	23ff      	movs	r3, #255	; 0xff
 800d876:	e000      	b.n	800d87a <aci_gap_configure_whitelist+0x40>
  return status;
 800d878:	79fb      	ldrb	r3, [r7, #7]
}
 800d87a:	4618      	mov	r0, r3
 800d87c:	3720      	adds	r7, #32
 800d87e:	46bd      	mov	sp, r7
 800d880:	bd80      	pop	{r7, pc}

0800d882 <aci_gap_allow_rebond>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_allow_rebond( uint16_t Connection_Handle )
{
 800d882:	b580      	push	{r7, lr}
 800d884:	b0cc      	sub	sp, #304	; 0x130
 800d886:	af00      	add	r7, sp, #0
 800d888:	4602      	mov	r2, r0
 800d88a:	1dbb      	adds	r3, r7, #6
 800d88c:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_allow_rebond_cp0 *cp0 = (aci_gap_allow_rebond_cp0*)(cmd_buffer);
 800d88e:	f107 0310 	add.w	r3, r7, #16
 800d892:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800d896:	f107 030f 	add.w	r3, r7, #15
 800d89a:	2200      	movs	r2, #0
 800d89c:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800d89e:	2300      	movs	r3, #0
 800d8a0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Connection_Handle = Connection_Handle;
 800d8a4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800d8a8:	1dba      	adds	r2, r7, #6
 800d8aa:	8812      	ldrh	r2, [r2, #0]
 800d8ac:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800d8ae:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800d8b2:	3302      	adds	r3, #2
 800d8b4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800d8b8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800d8bc:	2218      	movs	r2, #24
 800d8be:	2100      	movs	r1, #0
 800d8c0:	4618      	mov	r0, r3
 800d8c2:	f000 fc87 	bl	800e1d4 <Osal_MemSet>
  rq.ogf = 0x3f;
 800d8c6:	233f      	movs	r3, #63	; 0x3f
 800d8c8:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x095;
 800d8cc:	2395      	movs	r3, #149	; 0x95
 800d8ce:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800d8d2:	f107 0310 	add.w	r3, r7, #16
 800d8d6:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800d8da:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800d8de:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800d8e2:	f107 030f 	add.w	r3, r7, #15
 800d8e6:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800d8ea:	2301      	movs	r3, #1
 800d8ec:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800d8f0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800d8f4:	2100      	movs	r1, #0
 800d8f6:	4618      	mov	r0, r3
 800d8f8:	f000 fd14 	bl	800e324 <hci_send_req>
 800d8fc:	4603      	mov	r3, r0
 800d8fe:	2b00      	cmp	r3, #0
 800d900:	da01      	bge.n	800d906 <aci_gap_allow_rebond+0x84>
    return BLE_STATUS_TIMEOUT;
 800d902:	23ff      	movs	r3, #255	; 0xff
 800d904:	e002      	b.n	800d90c <aci_gap_allow_rebond+0x8a>
  return status;
 800d906:	f107 030f 	add.w	r3, r7, #15
 800d90a:	781b      	ldrb	r3, [r3, #0]
}
 800d90c:	4618      	mov	r0, r3
 800d90e:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800d912:	46bd      	mov	sp, r7
 800d914:	bd80      	pop	{r7, pc}

0800d916 <aci_gap_numeric_comparison_value_confirm_yesno>:
  return status;
}

tBleStatus aci_gap_numeric_comparison_value_confirm_yesno( uint16_t Connection_Handle,
                                                           uint8_t Confirm_Yes_No )
{
 800d916:	b580      	push	{r7, lr}
 800d918:	b0cc      	sub	sp, #304	; 0x130
 800d91a:	af00      	add	r7, sp, #0
 800d91c:	4602      	mov	r2, r0
 800d91e:	1dbb      	adds	r3, r7, #6
 800d920:	801a      	strh	r2, [r3, #0]
 800d922:	1d7b      	adds	r3, r7, #5
 800d924:	460a      	mov	r2, r1
 800d926:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_numeric_comparison_value_confirm_yesno_cp0 *cp0 = (aci_gap_numeric_comparison_value_confirm_yesno_cp0*)(cmd_buffer);
 800d928:	f107 0310 	add.w	r3, r7, #16
 800d92c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800d930:	f107 030f 	add.w	r3, r7, #15
 800d934:	2200      	movs	r2, #0
 800d936:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800d938:	2300      	movs	r3, #0
 800d93a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Connection_Handle = Connection_Handle;
 800d93e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800d942:	1dba      	adds	r2, r7, #6
 800d944:	8812      	ldrh	r2, [r2, #0]
 800d946:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800d948:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800d94c:	3302      	adds	r3, #2
 800d94e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Confirm_Yes_No = Confirm_Yes_No;
 800d952:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800d956:	1d7a      	adds	r2, r7, #5
 800d958:	7812      	ldrb	r2, [r2, #0]
 800d95a:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800d95c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800d960:	3301      	adds	r3, #1
 800d962:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800d966:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800d96a:	2218      	movs	r2, #24
 800d96c:	2100      	movs	r1, #0
 800d96e:	4618      	mov	r0, r3
 800d970:	f000 fc30 	bl	800e1d4 <Osal_MemSet>
  rq.ogf = 0x3f;
 800d974:	233f      	movs	r3, #63	; 0x3f
 800d976:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x0a5;
 800d97a:	23a5      	movs	r3, #165	; 0xa5
 800d97c:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800d980:	f107 0310 	add.w	r3, r7, #16
 800d984:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800d988:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800d98c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800d990:	f107 030f 	add.w	r3, r7, #15
 800d994:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800d998:	2301      	movs	r3, #1
 800d99a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800d99e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800d9a2:	2100      	movs	r1, #0
 800d9a4:	4618      	mov	r0, r3
 800d9a6:	f000 fcbd 	bl	800e324 <hci_send_req>
 800d9aa:	4603      	mov	r3, r0
 800d9ac:	2b00      	cmp	r3, #0
 800d9ae:	da01      	bge.n	800d9b4 <aci_gap_numeric_comparison_value_confirm_yesno+0x9e>
    return BLE_STATUS_TIMEOUT;
 800d9b0:	23ff      	movs	r3, #255	; 0xff
 800d9b2:	e002      	b.n	800d9ba <aci_gap_numeric_comparison_value_confirm_yesno+0xa4>
  return status;
 800d9b4:	f107 030f 	add.w	r3, r7, #15
 800d9b8:	781b      	ldrb	r3, [r3, #0]
}
 800d9ba:	4618      	mov	r0, r3
 800d9bc:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800d9c0:	46bd      	mov	sp, r7
 800d9c2:	bd80      	pop	{r7, pc}

0800d9c4 <aci_gatt_init>:
 */

#include "ble_gatt_aci.h"

tBleStatus aci_gatt_init( void )
{
 800d9c4:	b580      	push	{r7, lr}
 800d9c6:	b088      	sub	sp, #32
 800d9c8:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 800d9ca:	2300      	movs	r3, #0
 800d9cc:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800d9ce:	f107 0308 	add.w	r3, r7, #8
 800d9d2:	2218      	movs	r2, #24
 800d9d4:	2100      	movs	r1, #0
 800d9d6:	4618      	mov	r0, r3
 800d9d8:	f000 fbfc 	bl	800e1d4 <Osal_MemSet>
  rq.ogf = 0x3f;
 800d9dc:	233f      	movs	r3, #63	; 0x3f
 800d9de:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x101;
 800d9e0:	f240 1301 	movw	r3, #257	; 0x101
 800d9e4:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 800d9e6:	1dfb      	adds	r3, r7, #7
 800d9e8:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 800d9ea:	2301      	movs	r3, #1
 800d9ec:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 800d9ee:	f107 0308 	add.w	r3, r7, #8
 800d9f2:	2100      	movs	r1, #0
 800d9f4:	4618      	mov	r0, r3
 800d9f6:	f000 fc95 	bl	800e324 <hci_send_req>
 800d9fa:	4603      	mov	r3, r0
 800d9fc:	2b00      	cmp	r3, #0
 800d9fe:	da01      	bge.n	800da04 <aci_gatt_init+0x40>
    return BLE_STATUS_TIMEOUT;
 800da00:	23ff      	movs	r3, #255	; 0xff
 800da02:	e000      	b.n	800da06 <aci_gatt_init+0x42>
  return status;
 800da04:	79fb      	ldrb	r3, [r7, #7]
}
 800da06:	4618      	mov	r0, r3
 800da08:	3720      	adds	r7, #32
 800da0a:	46bd      	mov	sp, r7
 800da0c:	bd80      	pop	{r7, pc}

0800da0e <aci_gatt_add_service>:
tBleStatus aci_gatt_add_service( uint8_t Service_UUID_Type,
                                 const Service_UUID_t* Service_UUID,
                                 uint8_t Service_Type,
                                 uint8_t Max_Attribute_Records,
                                 uint16_t* Service_Handle )
{
 800da0e:	b590      	push	{r4, r7, lr}
 800da10:	b0cf      	sub	sp, #316	; 0x13c
 800da12:	af00      	add	r7, sp, #0
 800da14:	4604      	mov	r4, r0
 800da16:	4638      	mov	r0, r7
 800da18:	6001      	str	r1, [r0, #0]
 800da1a:	4610      	mov	r0, r2
 800da1c:	4619      	mov	r1, r3
 800da1e:	1dfb      	adds	r3, r7, #7
 800da20:	4622      	mov	r2, r4
 800da22:	701a      	strb	r2, [r3, #0]
 800da24:	1dbb      	adds	r3, r7, #6
 800da26:	4602      	mov	r2, r0
 800da28:	701a      	strb	r2, [r3, #0]
 800da2a:	1d7b      	adds	r3, r7, #5
 800da2c:	460a      	mov	r2, r1
 800da2e:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_service_cp0 *cp0 = (aci_gatt_add_service_cp0*)(cmd_buffer);
 800da30:	f107 0310 	add.w	r3, r7, #16
 800da34:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  aci_gatt_add_service_cp1 *cp1 = (aci_gatt_add_service_cp1*)(cmd_buffer + 1 + (Service_UUID_Type == 1 ? 2 : (Service_UUID_Type == 2 ? 16 : 0)));
 800da38:	1dfb      	adds	r3, r7, #7
 800da3a:	781b      	ldrb	r3, [r3, #0]
 800da3c:	2b01      	cmp	r3, #1
 800da3e:	d007      	beq.n	800da50 <aci_gatt_add_service+0x42>
 800da40:	1dfb      	adds	r3, r7, #7
 800da42:	781b      	ldrb	r3, [r3, #0]
 800da44:	2b02      	cmp	r3, #2
 800da46:	d101      	bne.n	800da4c <aci_gatt_add_service+0x3e>
 800da48:	2311      	movs	r3, #17
 800da4a:	e002      	b.n	800da52 <aci_gatt_add_service+0x44>
 800da4c:	2301      	movs	r3, #1
 800da4e:	e000      	b.n	800da52 <aci_gatt_add_service+0x44>
 800da50:	2303      	movs	r3, #3
 800da52:	f107 0210 	add.w	r2, r7, #16
 800da56:	4413      	add	r3, r2
 800da58:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  aci_gatt_add_service_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 800da5c:	f107 030c 	add.w	r3, r7, #12
 800da60:	2203      	movs	r2, #3
 800da62:	2100      	movs	r1, #0
 800da64:	4618      	mov	r0, r3
 800da66:	f000 fbb5 	bl	800e1d4 <Osal_MemSet>
  int index_input = 0;
 800da6a:	2300      	movs	r3, #0
 800da6c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Service_UUID_Type = Service_UUID_Type;
 800da70:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800da74:	1dfa      	adds	r2, r7, #7
 800da76:	7812      	ldrb	r2, [r2, #0]
 800da78:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800da7a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800da7e:	3301      	adds	r3, #1
 800da80:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  /* var_len_data input */
  {
    uint8_t size;
    switch ( Service_UUID_Type )
 800da84:	1dfb      	adds	r3, r7, #7
 800da86:	781b      	ldrb	r3, [r3, #0]
 800da88:	2b01      	cmp	r3, #1
 800da8a:	d002      	beq.n	800da92 <aci_gatt_add_service+0x84>
 800da8c:	2b02      	cmp	r3, #2
 800da8e:	d004      	beq.n	800da9a <aci_gatt_add_service+0x8c>
 800da90:	e007      	b.n	800daa2 <aci_gatt_add_service+0x94>
    {
      case 1: size = 2; break;
 800da92:	2302      	movs	r3, #2
 800da94:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
 800da98:	e005      	b.n	800daa6 <aci_gatt_add_service+0x98>
      case 2: size = 16; break;
 800da9a:	2310      	movs	r3, #16
 800da9c:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
 800daa0:	e001      	b.n	800daa6 <aci_gatt_add_service+0x98>
      default: return BLE_STATUS_ERROR;
 800daa2:	2347      	movs	r3, #71	; 0x47
 800daa4:	e05d      	b.n	800db62 <aci_gatt_add_service+0x154>
    }
    Osal_MemCpy( (void*)&cp0->Service_UUID, (const void*)Service_UUID, size );
 800daa6:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800daaa:	1c58      	adds	r0, r3, #1
 800daac:	f897 2137 	ldrb.w	r2, [r7, #311]	; 0x137
 800dab0:	463b      	mov	r3, r7
 800dab2:	6819      	ldr	r1, [r3, #0]
 800dab4:	f000 fb7e 	bl	800e1b4 <Osal_MemCpy>
    index_input += size;
 800dab8:	f897 3137 	ldrb.w	r3, [r7, #311]	; 0x137
 800dabc:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800dac0:	4413      	add	r3, r2
 800dac2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp1->Service_Type = Service_Type;
 800dac6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800daca:	1dba      	adds	r2, r7, #6
 800dacc:	7812      	ldrb	r2, [r2, #0]
 800dace:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 800dad0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800dad4:	3301      	adds	r3, #1
 800dad6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp1->Max_Attribute_Records = Max_Attribute_Records;
 800dada:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800dade:	1d7a      	adds	r2, r7, #5
 800dae0:	7812      	ldrb	r2, [r2, #0]
 800dae2:	705a      	strb	r2, [r3, #1]
    }
    index_input += 1;
 800dae4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800dae8:	3301      	adds	r3, #1
 800daea:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800daee:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800daf2:	2218      	movs	r2, #24
 800daf4:	2100      	movs	r1, #0
 800daf6:	4618      	mov	r0, r3
 800daf8:	f000 fb6c 	bl	800e1d4 <Osal_MemSet>
  rq.ogf = 0x3f;
 800dafc:	233f      	movs	r3, #63	; 0x3f
 800dafe:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x102;
 800db02:	f44f 7381 	mov.w	r3, #258	; 0x102
 800db06:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800db0a:	f107 0310 	add.w	r3, r7, #16
 800db0e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800db12:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800db16:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &resp;
 800db1a:	f107 030c 	add.w	r3, r7, #12
 800db1e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = sizeof(resp);
 800db22:	2303      	movs	r3, #3
 800db24:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800db28:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800db2c:	2100      	movs	r1, #0
 800db2e:	4618      	mov	r0, r3
 800db30:	f000 fbf8 	bl	800e324 <hci_send_req>
 800db34:	4603      	mov	r3, r0
 800db36:	2b00      	cmp	r3, #0
 800db38:	da01      	bge.n	800db3e <aci_gatt_add_service+0x130>
    return BLE_STATUS_TIMEOUT;
 800db3a:	23ff      	movs	r3, #255	; 0xff
 800db3c:	e011      	b.n	800db62 <aci_gatt_add_service+0x154>
  if ( resp.Status )
 800db3e:	f107 030c 	add.w	r3, r7, #12
 800db42:	781b      	ldrb	r3, [r3, #0]
 800db44:	2b00      	cmp	r3, #0
 800db46:	d003      	beq.n	800db50 <aci_gatt_add_service+0x142>
    return resp.Status;
 800db48:	f107 030c 	add.w	r3, r7, #12
 800db4c:	781b      	ldrb	r3, [r3, #0]
 800db4e:	e008      	b.n	800db62 <aci_gatt_add_service+0x154>
  *Service_Handle = resp.Service_Handle;
 800db50:	f107 030c 	add.w	r3, r7, #12
 800db54:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800db58:	b29a      	uxth	r2, r3
 800db5a:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800db5e:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 800db60:	2300      	movs	r3, #0
}
 800db62:	4618      	mov	r0, r3
 800db64:	f507 779e 	add.w	r7, r7, #316	; 0x13c
 800db68:	46bd      	mov	sp, r7
 800db6a:	bd90      	pop	{r4, r7, pc}

0800db6c <aci_gatt_add_char>:
                              uint8_t Security_Permissions,
                              uint8_t GATT_Evt_Mask,
                              uint8_t Enc_Key_Size,
                              uint8_t Is_Variable,
                              uint16_t* Char_Handle )
{
 800db6c:	b590      	push	{r4, r7, lr}
 800db6e:	b0d1      	sub	sp, #324	; 0x144
 800db70:	af00      	add	r7, sp, #0
 800db72:	4604      	mov	r4, r0
 800db74:	4608      	mov	r0, r1
 800db76:	f107 0108 	add.w	r1, r7, #8
 800db7a:	600a      	str	r2, [r1, #0]
 800db7c:	4619      	mov	r1, r3
 800db7e:	f107 030e 	add.w	r3, r7, #14
 800db82:	4622      	mov	r2, r4
 800db84:	801a      	strh	r2, [r3, #0]
 800db86:	f107 030d 	add.w	r3, r7, #13
 800db8a:	4602      	mov	r2, r0
 800db8c:	701a      	strb	r2, [r3, #0]
 800db8e:	1dbb      	adds	r3, r7, #6
 800db90:	460a      	mov	r2, r1
 800db92:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_char_cp0 *cp0 = (aci_gatt_add_char_cp0*)(cmd_buffer);
 800db94:	f107 0318 	add.w	r3, r7, #24
 800db98:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  aci_gatt_add_char_cp1 *cp1 = (aci_gatt_add_char_cp1*)(cmd_buffer + 2 + 1 + (Char_UUID_Type == 1 ? 2 : (Char_UUID_Type == 2 ? 16 : 0)));
 800db9c:	f107 030d 	add.w	r3, r7, #13
 800dba0:	781b      	ldrb	r3, [r3, #0]
 800dba2:	2b01      	cmp	r3, #1
 800dba4:	d008      	beq.n	800dbb8 <aci_gatt_add_char+0x4c>
 800dba6:	f107 030d 	add.w	r3, r7, #13
 800dbaa:	781b      	ldrb	r3, [r3, #0]
 800dbac:	2b02      	cmp	r3, #2
 800dbae:	d101      	bne.n	800dbb4 <aci_gatt_add_char+0x48>
 800dbb0:	2313      	movs	r3, #19
 800dbb2:	e002      	b.n	800dbba <aci_gatt_add_char+0x4e>
 800dbb4:	2303      	movs	r3, #3
 800dbb6:	e000      	b.n	800dbba <aci_gatt_add_char+0x4e>
 800dbb8:	2305      	movs	r3, #5
 800dbba:	f107 0218 	add.w	r2, r7, #24
 800dbbe:	4413      	add	r3, r2
 800dbc0:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  aci_gatt_add_char_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 800dbc4:	f107 0314 	add.w	r3, r7, #20
 800dbc8:	2203      	movs	r2, #3
 800dbca:	2100      	movs	r1, #0
 800dbcc:	4618      	mov	r0, r3
 800dbce:	f000 fb01 	bl	800e1d4 <Osal_MemSet>
  int index_input = 0;
 800dbd2:	2300      	movs	r3, #0
 800dbd4:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Service_Handle = Service_Handle;
 800dbd8:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800dbdc:	f107 020e 	add.w	r2, r7, #14
 800dbe0:	8812      	ldrh	r2, [r2, #0]
 800dbe2:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800dbe4:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800dbe8:	3302      	adds	r3, #2
 800dbea:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Char_UUID_Type = Char_UUID_Type;
 800dbee:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800dbf2:	f107 020d 	add.w	r2, r7, #13
 800dbf6:	7812      	ldrb	r2, [r2, #0]
 800dbf8:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800dbfa:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800dbfe:	3301      	adds	r3, #1
 800dc00:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  /* var_len_data input */
  {
    uint8_t size;
    switch ( Char_UUID_Type )
 800dc04:	f107 030d 	add.w	r3, r7, #13
 800dc08:	781b      	ldrb	r3, [r3, #0]
 800dc0a:	2b01      	cmp	r3, #1
 800dc0c:	d002      	beq.n	800dc14 <aci_gatt_add_char+0xa8>
 800dc0e:	2b02      	cmp	r3, #2
 800dc10:	d004      	beq.n	800dc1c <aci_gatt_add_char+0xb0>
 800dc12:	e007      	b.n	800dc24 <aci_gatt_add_char+0xb8>
    {
      case 1: size = 2; break;
 800dc14:	2302      	movs	r3, #2
 800dc16:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
 800dc1a:	e005      	b.n	800dc28 <aci_gatt_add_char+0xbc>
      case 2: size = 16; break;
 800dc1c:	2310      	movs	r3, #16
 800dc1e:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
 800dc22:	e001      	b.n	800dc28 <aci_gatt_add_char+0xbc>
      default: return BLE_STATUS_ERROR;
 800dc24:	2347      	movs	r3, #71	; 0x47
 800dc26:	e086      	b.n	800dd36 <aci_gatt_add_char+0x1ca>
    }
    Osal_MemCpy( (void*)&cp0->Char_UUID, (const void*)Char_UUID, size );
 800dc28:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800dc2c:	1cd8      	adds	r0, r3, #3
 800dc2e:	f897 213f 	ldrb.w	r2, [r7, #319]	; 0x13f
 800dc32:	f107 0308 	add.w	r3, r7, #8
 800dc36:	6819      	ldr	r1, [r3, #0]
 800dc38:	f000 fabc 	bl	800e1b4 <Osal_MemCpy>
    index_input += size;
 800dc3c:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
 800dc40:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 800dc44:	4413      	add	r3, r2
 800dc46:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Char_Value_Length = Char_Value_Length;
 800dc4a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800dc4e:	1dba      	adds	r2, r7, #6
 800dc50:	8812      	ldrh	r2, [r2, #0]
 800dc52:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 800dc54:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800dc58:	3302      	adds	r3, #2
 800dc5a:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Char_Properties = Char_Properties;
 800dc5e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800dc62:	f897 2150 	ldrb.w	r2, [r7, #336]	; 0x150
 800dc66:	709a      	strb	r2, [r3, #2]
    }
    index_input += 1;
 800dc68:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800dc6c:	3301      	adds	r3, #1
 800dc6e:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Security_Permissions = Security_Permissions;
 800dc72:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800dc76:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 800dc7a:	70da      	strb	r2, [r3, #3]
    }
    index_input += 1;
 800dc7c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800dc80:	3301      	adds	r3, #1
 800dc82:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->GATT_Evt_Mask = GATT_Evt_Mask;
 800dc86:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800dc8a:	f897 2158 	ldrb.w	r2, [r7, #344]	; 0x158
 800dc8e:	711a      	strb	r2, [r3, #4]
    }
    index_input += 1;
 800dc90:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800dc94:	3301      	adds	r3, #1
 800dc96:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Enc_Key_Size = Enc_Key_Size;
 800dc9a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800dc9e:	f897 215c 	ldrb.w	r2, [r7, #348]	; 0x15c
 800dca2:	715a      	strb	r2, [r3, #5]
    }
    index_input += 1;
 800dca4:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800dca8:	3301      	adds	r3, #1
 800dcaa:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Is_Variable = Is_Variable;
 800dcae:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800dcb2:	f897 2160 	ldrb.w	r2, [r7, #352]	; 0x160
 800dcb6:	719a      	strb	r2, [r3, #6]
    }
    index_input += 1;
 800dcb8:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800dcbc:	3301      	adds	r3, #1
 800dcbe:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800dcc2:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800dcc6:	2218      	movs	r2, #24
 800dcc8:	2100      	movs	r1, #0
 800dcca:	4618      	mov	r0, r3
 800dccc:	f000 fa82 	bl	800e1d4 <Osal_MemSet>
  rq.ogf = 0x3f;
 800dcd0:	233f      	movs	r3, #63	; 0x3f
 800dcd2:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
  rq.ocf = 0x104;
 800dcd6:	f44f 7382 	mov.w	r3, #260	; 0x104
 800dcda:	f8a7 311a 	strh.w	r3, [r7, #282]	; 0x11a
  rq.cparam = cmd_buffer;
 800dcde:	f107 0318 	add.w	r3, r7, #24
 800dce2:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.clen = index_input;
 800dce6:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800dcea:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  rq.rparam = &resp;
 800dcee:	f107 0314 	add.w	r3, r7, #20
 800dcf2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  rq.rlen = sizeof(resp);
 800dcf6:	2303      	movs	r3, #3
 800dcf8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if ( hci_send_req(&rq, FALSE) < 0 )
 800dcfc:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800dd00:	2100      	movs	r1, #0
 800dd02:	4618      	mov	r0, r3
 800dd04:	f000 fb0e 	bl	800e324 <hci_send_req>
 800dd08:	4603      	mov	r3, r0
 800dd0a:	2b00      	cmp	r3, #0
 800dd0c:	da01      	bge.n	800dd12 <aci_gatt_add_char+0x1a6>
    return BLE_STATUS_TIMEOUT;
 800dd0e:	23ff      	movs	r3, #255	; 0xff
 800dd10:	e011      	b.n	800dd36 <aci_gatt_add_char+0x1ca>
  if ( resp.Status )
 800dd12:	f107 0314 	add.w	r3, r7, #20
 800dd16:	781b      	ldrb	r3, [r3, #0]
 800dd18:	2b00      	cmp	r3, #0
 800dd1a:	d003      	beq.n	800dd24 <aci_gatt_add_char+0x1b8>
    return resp.Status;
 800dd1c:	f107 0314 	add.w	r3, r7, #20
 800dd20:	781b      	ldrb	r3, [r3, #0]
 800dd22:	e008      	b.n	800dd36 <aci_gatt_add_char+0x1ca>
  *Char_Handle = resp.Char_Handle;
 800dd24:	f107 0314 	add.w	r3, r7, #20
 800dd28:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800dd2c:	b29a      	uxth	r2, r3
 800dd2e:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 800dd32:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 800dd34:	2300      	movs	r3, #0
}
 800dd36:	4618      	mov	r0, r3
 800dd38:	f507 77a2 	add.w	r7, r7, #324	; 0x144
 800dd3c:	46bd      	mov	sp, r7
 800dd3e:	bd90      	pop	{r4, r7, pc}

0800dd40 <aci_gatt_update_char_value>:
tBleStatus aci_gatt_update_char_value( uint16_t Service_Handle,
                                       uint16_t Char_Handle,
                                       uint8_t Val_Offset,
                                       uint8_t Char_Value_Length,
                                       const uint8_t* Char_Value )
{
 800dd40:	b5b0      	push	{r4, r5, r7, lr}
 800dd42:	b0cc      	sub	sp, #304	; 0x130
 800dd44:	af00      	add	r7, sp, #0
 800dd46:	4605      	mov	r5, r0
 800dd48:	460c      	mov	r4, r1
 800dd4a:	4610      	mov	r0, r2
 800dd4c:	4619      	mov	r1, r3
 800dd4e:	1dbb      	adds	r3, r7, #6
 800dd50:	462a      	mov	r2, r5
 800dd52:	801a      	strh	r2, [r3, #0]
 800dd54:	1d3b      	adds	r3, r7, #4
 800dd56:	4622      	mov	r2, r4
 800dd58:	801a      	strh	r2, [r3, #0]
 800dd5a:	1cfb      	adds	r3, r7, #3
 800dd5c:	4602      	mov	r2, r0
 800dd5e:	701a      	strb	r2, [r3, #0]
 800dd60:	1cbb      	adds	r3, r7, #2
 800dd62:	460a      	mov	r2, r1
 800dd64:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_update_char_value_cp0 *cp0 = (aci_gatt_update_char_value_cp0*)(cmd_buffer);
 800dd66:	f107 0310 	add.w	r3, r7, #16
 800dd6a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800dd6e:	f107 030f 	add.w	r3, r7, #15
 800dd72:	2200      	movs	r2, #0
 800dd74:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800dd76:	2300      	movs	r3, #0
 800dd78:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Service_Handle = Service_Handle;
 800dd7c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800dd80:	1dba      	adds	r2, r7, #6
 800dd82:	8812      	ldrh	r2, [r2, #0]
 800dd84:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800dd86:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800dd8a:	3302      	adds	r3, #2
 800dd8c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Char_Handle = Char_Handle;
 800dd90:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800dd94:	1d3a      	adds	r2, r7, #4
 800dd96:	8812      	ldrh	r2, [r2, #0]
 800dd98:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 800dd9a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800dd9e:	3302      	adds	r3, #2
 800dda0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Val_Offset = Val_Offset;
 800dda4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800dda8:	1cfa      	adds	r2, r7, #3
 800ddaa:	7812      	ldrb	r2, [r2, #0]
 800ddac:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 800ddae:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800ddb2:	3301      	adds	r3, #1
 800ddb4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Char_Value_Length = Char_Value_Length;
 800ddb8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800ddbc:	1cba      	adds	r2, r7, #2
 800ddbe:	7812      	ldrb	r2, [r2, #0]
 800ddc0:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 800ddc2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800ddc6:	3301      	adds	r3, #1
 800ddc8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->Char_Value, (const void*)Char_Value, Char_Value_Length );
 800ddcc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800ddd0:	1d98      	adds	r0, r3, #6
 800ddd2:	1cbb      	adds	r3, r7, #2
 800ddd4:	781b      	ldrb	r3, [r3, #0]
 800ddd6:	461a      	mov	r2, r3
 800ddd8:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 800dddc:	f000 f9ea 	bl	800e1b4 <Osal_MemCpy>
  index_input += Char_Value_Length;
 800dde0:	1cbb      	adds	r3, r7, #2
 800dde2:	781b      	ldrb	r3, [r3, #0]
 800dde4:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800dde8:	4413      	add	r3, r2
 800ddea:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800ddee:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800ddf2:	2218      	movs	r2, #24
 800ddf4:	2100      	movs	r1, #0
 800ddf6:	4618      	mov	r0, r3
 800ddf8:	f000 f9ec 	bl	800e1d4 <Osal_MemSet>
  rq.ogf = 0x3f;
 800ddfc:	233f      	movs	r3, #63	; 0x3f
 800ddfe:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x106;
 800de02:	f44f 7383 	mov.w	r3, #262	; 0x106
 800de06:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800de0a:	f107 0310 	add.w	r3, r7, #16
 800de0e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800de12:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800de16:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800de1a:	f107 030f 	add.w	r3, r7, #15
 800de1e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800de22:	2301      	movs	r3, #1
 800de24:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800de28:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800de2c:	2100      	movs	r1, #0
 800de2e:	4618      	mov	r0, r3
 800de30:	f000 fa78 	bl	800e324 <hci_send_req>
 800de34:	4603      	mov	r3, r0
 800de36:	2b00      	cmp	r3, #0
 800de38:	da01      	bge.n	800de3e <aci_gatt_update_char_value+0xfe>
    return BLE_STATUS_TIMEOUT;
 800de3a:	23ff      	movs	r3, #255	; 0xff
 800de3c:	e002      	b.n	800de44 <aci_gatt_update_char_value+0x104>
  return status;
 800de3e:	f107 030f 	add.w	r3, r7, #15
 800de42:	781b      	ldrb	r3, [r3, #0]
}
 800de44:	4618      	mov	r0, r3
 800de46:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800de4a:	46bd      	mov	sp, r7
 800de4c:	bdb0      	pop	{r4, r5, r7, pc}

0800de4e <aci_hal_write_config_data>:
}

tBleStatus aci_hal_write_config_data( uint8_t Offset,
                                      uint8_t Length,
                                      const uint8_t* Value )
{
 800de4e:	b580      	push	{r7, lr}
 800de50:	b0cc      	sub	sp, #304	; 0x130
 800de52:	af00      	add	r7, sp, #0
 800de54:	463b      	mov	r3, r7
 800de56:	601a      	str	r2, [r3, #0]
 800de58:	1dfb      	adds	r3, r7, #7
 800de5a:	4602      	mov	r2, r0
 800de5c:	701a      	strb	r2, [r3, #0]
 800de5e:	1dbb      	adds	r3, r7, #6
 800de60:	460a      	mov	r2, r1
 800de62:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_write_config_data_cp0 *cp0 = (aci_hal_write_config_data_cp0*)(cmd_buffer);
 800de64:	f107 0310 	add.w	r3, r7, #16
 800de68:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800de6c:	f107 030f 	add.w	r3, r7, #15
 800de70:	2200      	movs	r2, #0
 800de72:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800de74:	2300      	movs	r3, #0
 800de76:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Offset = Offset;
 800de7a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800de7e:	1dfa      	adds	r2, r7, #7
 800de80:	7812      	ldrb	r2, [r2, #0]
 800de82:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800de84:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800de88:	3301      	adds	r3, #1
 800de8a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Length = Length;
 800de8e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800de92:	1dba      	adds	r2, r7, #6
 800de94:	7812      	ldrb	r2, [r2, #0]
 800de96:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800de98:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800de9c:	3301      	adds	r3, #1
 800de9e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->Value, (const void*)Value, Length );
 800dea2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800dea6:	1c98      	adds	r0, r3, #2
 800dea8:	1dbb      	adds	r3, r7, #6
 800deaa:	781a      	ldrb	r2, [r3, #0]
 800deac:	463b      	mov	r3, r7
 800deae:	6819      	ldr	r1, [r3, #0]
 800deb0:	f000 f980 	bl	800e1b4 <Osal_MemCpy>
  index_input += Length;
 800deb4:	1dbb      	adds	r3, r7, #6
 800deb6:	781b      	ldrb	r3, [r3, #0]
 800deb8:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800debc:	4413      	add	r3, r2
 800debe:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800dec2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800dec6:	2218      	movs	r2, #24
 800dec8:	2100      	movs	r1, #0
 800deca:	4618      	mov	r0, r3
 800decc:	f000 f982 	bl	800e1d4 <Osal_MemSet>
  rq.ogf = 0x3f;
 800ded0:	233f      	movs	r3, #63	; 0x3f
 800ded2:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x00c;
 800ded6:	230c      	movs	r3, #12
 800ded8:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800dedc:	f107 0310 	add.w	r3, r7, #16
 800dee0:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800dee4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800dee8:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800deec:	f107 030f 	add.w	r3, r7, #15
 800def0:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800def4:	2301      	movs	r3, #1
 800def6:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800defa:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800defe:	2100      	movs	r1, #0
 800df00:	4618      	mov	r0, r3
 800df02:	f000 fa0f 	bl	800e324 <hci_send_req>
 800df06:	4603      	mov	r3, r0
 800df08:	2b00      	cmp	r3, #0
 800df0a:	da01      	bge.n	800df10 <aci_hal_write_config_data+0xc2>
    return BLE_STATUS_TIMEOUT;
 800df0c:	23ff      	movs	r3, #255	; 0xff
 800df0e:	e002      	b.n	800df16 <aci_hal_write_config_data+0xc8>
  return status;
 800df10:	f107 030f 	add.w	r3, r7, #15
 800df14:	781b      	ldrb	r3, [r3, #0]
}
 800df16:	4618      	mov	r0, r3
 800df18:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800df1c:	46bd      	mov	sp, r7
 800df1e:	bd80      	pop	{r7, pc}

0800df20 <aci_hal_set_tx_power_level>:
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_tx_power_level( uint8_t En_High_Power,
                                       uint8_t PA_Level )
{
 800df20:	b580      	push	{r7, lr}
 800df22:	b0cc      	sub	sp, #304	; 0x130
 800df24:	af00      	add	r7, sp, #0
 800df26:	4602      	mov	r2, r0
 800df28:	1dfb      	adds	r3, r7, #7
 800df2a:	701a      	strb	r2, [r3, #0]
 800df2c:	1dbb      	adds	r3, r7, #6
 800df2e:	460a      	mov	r2, r1
 800df30:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_tx_power_level_cp0 *cp0 = (aci_hal_set_tx_power_level_cp0*)(cmd_buffer);
 800df32:	f107 0310 	add.w	r3, r7, #16
 800df36:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800df3a:	f107 030f 	add.w	r3, r7, #15
 800df3e:	2200      	movs	r2, #0
 800df40:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800df42:	2300      	movs	r3, #0
 800df44:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->En_High_Power = En_High_Power;
 800df48:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800df4c:	1dfa      	adds	r2, r7, #7
 800df4e:	7812      	ldrb	r2, [r2, #0]
 800df50:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800df52:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800df56:	3301      	adds	r3, #1
 800df58:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->PA_Level = PA_Level;
 800df5c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800df60:	1dba      	adds	r2, r7, #6
 800df62:	7812      	ldrb	r2, [r2, #0]
 800df64:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800df66:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800df6a:	3301      	adds	r3, #1
 800df6c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800df70:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800df74:	2218      	movs	r2, #24
 800df76:	2100      	movs	r1, #0
 800df78:	4618      	mov	r0, r3
 800df7a:	f000 f92b 	bl	800e1d4 <Osal_MemSet>
  rq.ogf = 0x3f;
 800df7e:	233f      	movs	r3, #63	; 0x3f
 800df80:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x00f;
 800df84:	230f      	movs	r3, #15
 800df86:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800df8a:	f107 0310 	add.w	r3, r7, #16
 800df8e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800df92:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800df96:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800df9a:	f107 030f 	add.w	r3, r7, #15
 800df9e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800dfa2:	2301      	movs	r3, #1
 800dfa4:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800dfa8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800dfac:	2100      	movs	r1, #0
 800dfae:	4618      	mov	r0, r3
 800dfb0:	f000 f9b8 	bl	800e324 <hci_send_req>
 800dfb4:	4603      	mov	r3, r0
 800dfb6:	2b00      	cmp	r3, #0
 800dfb8:	da01      	bge.n	800dfbe <aci_hal_set_tx_power_level+0x9e>
    return BLE_STATUS_TIMEOUT;
 800dfba:	23ff      	movs	r3, #255	; 0xff
 800dfbc:	e002      	b.n	800dfc4 <aci_hal_set_tx_power_level+0xa4>
  return status;
 800dfbe:	f107 030f 	add.w	r3, r7, #15
 800dfc2:	781b      	ldrb	r3, [r3, #0]
}
 800dfc4:	4618      	mov	r0, r3
 800dfc6:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800dfca:	46bd      	mov	sp, r7
 800dfcc:	bd80      	pop	{r7, pc}

0800dfce <hci_reset>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus hci_reset( void )
{
 800dfce:	b580      	push	{r7, lr}
 800dfd0:	b088      	sub	sp, #32
 800dfd2:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 800dfd4:	2300      	movs	r3, #0
 800dfd6:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800dfd8:	f107 0308 	add.w	r3, r7, #8
 800dfdc:	2218      	movs	r2, #24
 800dfde:	2100      	movs	r1, #0
 800dfe0:	4618      	mov	r0, r3
 800dfe2:	f000 f8f7 	bl	800e1d4 <Osal_MemSet>
  rq.ogf = 0x03;
 800dfe6:	2303      	movs	r3, #3
 800dfe8:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x003;
 800dfea:	2303      	movs	r3, #3
 800dfec:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 800dfee:	1dfb      	adds	r3, r7, #7
 800dff0:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 800dff2:	2301      	movs	r3, #1
 800dff4:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 800dff6:	f107 0308 	add.w	r3, r7, #8
 800dffa:	2100      	movs	r1, #0
 800dffc:	4618      	mov	r0, r3
 800dffe:	f000 f991 	bl	800e324 <hci_send_req>
 800e002:	4603      	mov	r3, r0
 800e004:	2b00      	cmp	r3, #0
 800e006:	da01      	bge.n	800e00c <hci_reset+0x3e>
    return BLE_STATUS_TIMEOUT;
 800e008:	23ff      	movs	r3, #255	; 0xff
 800e00a:	e000      	b.n	800e00e <hci_reset+0x40>
  return status;
 800e00c:	79fb      	ldrb	r3, [r7, #7]
}
 800e00e:	4618      	mov	r0, r3
 800e010:	3720      	adds	r7, #32
 800e012:	46bd      	mov	sp, r7
 800e014:	bd80      	pop	{r7, pc}

0800e016 <hci_le_read_phy>:
}

tBleStatus hci_le_read_phy( uint16_t Connection_Handle,
                            uint8_t* TX_PHY,
                            uint8_t* RX_PHY )
{
 800e016:	b580      	push	{r7, lr}
 800e018:	b0ce      	sub	sp, #312	; 0x138
 800e01a:	af00      	add	r7, sp, #0
 800e01c:	f107 0308 	add.w	r3, r7, #8
 800e020:	6019      	str	r1, [r3, #0]
 800e022:	1d3b      	adds	r3, r7, #4
 800e024:	601a      	str	r2, [r3, #0]
 800e026:	f107 030e 	add.w	r3, r7, #14
 800e02a:	4602      	mov	r2, r0
 800e02c:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  hci_le_read_phy_cp0 *cp0 = (hci_le_read_phy_cp0*)(cmd_buffer);
 800e02e:	f107 0318 	add.w	r3, r7, #24
 800e032:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  hci_le_read_phy_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 800e036:	f107 0310 	add.w	r3, r7, #16
 800e03a:	2205      	movs	r2, #5
 800e03c:	2100      	movs	r1, #0
 800e03e:	4618      	mov	r0, r3
 800e040:	f000 f8c8 	bl	800e1d4 <Osal_MemSet>
  int index_input = 0;
 800e044:	2300      	movs	r3, #0
 800e046:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Connection_Handle = Connection_Handle;
 800e04a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800e04e:	f107 020e 	add.w	r2, r7, #14
 800e052:	8812      	ldrh	r2, [r2, #0]
 800e054:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800e056:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800e05a:	3302      	adds	r3, #2
 800e05c:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800e060:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800e064:	2218      	movs	r2, #24
 800e066:	2100      	movs	r1, #0
 800e068:	4618      	mov	r0, r3
 800e06a:	f000 f8b3 	bl	800e1d4 <Osal_MemSet>
  rq.ogf = 0x08;
 800e06e:	2308      	movs	r3, #8
 800e070:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
  rq.ocf = 0x030;
 800e074:	2330      	movs	r3, #48	; 0x30
 800e076:	f8a7 311a 	strh.w	r3, [r7, #282]	; 0x11a
  rq.cparam = cmd_buffer;
 800e07a:	f107 0318 	add.w	r3, r7, #24
 800e07e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.clen = index_input;
 800e082:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800e086:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  rq.rparam = &resp;
 800e08a:	f107 0310 	add.w	r3, r7, #16
 800e08e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  rq.rlen = sizeof(resp);
 800e092:	2305      	movs	r3, #5
 800e094:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if ( hci_send_req(&rq, FALSE) < 0 )
 800e098:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800e09c:	2100      	movs	r1, #0
 800e09e:	4618      	mov	r0, r3
 800e0a0:	f000 f940 	bl	800e324 <hci_send_req>
 800e0a4:	4603      	mov	r3, r0
 800e0a6:	2b00      	cmp	r3, #0
 800e0a8:	da01      	bge.n	800e0ae <hci_le_read_phy+0x98>
    return BLE_STATUS_TIMEOUT;
 800e0aa:	23ff      	movs	r3, #255	; 0xff
 800e0ac:	e016      	b.n	800e0dc <hci_le_read_phy+0xc6>
  if ( resp.Status )
 800e0ae:	f107 0310 	add.w	r3, r7, #16
 800e0b2:	781b      	ldrb	r3, [r3, #0]
 800e0b4:	2b00      	cmp	r3, #0
 800e0b6:	d003      	beq.n	800e0c0 <hci_le_read_phy+0xaa>
    return resp.Status;
 800e0b8:	f107 0310 	add.w	r3, r7, #16
 800e0bc:	781b      	ldrb	r3, [r3, #0]
 800e0be:	e00d      	b.n	800e0dc <hci_le_read_phy+0xc6>
  *TX_PHY = resp.TX_PHY;
 800e0c0:	f107 0310 	add.w	r3, r7, #16
 800e0c4:	78da      	ldrb	r2, [r3, #3]
 800e0c6:	f107 0308 	add.w	r3, r7, #8
 800e0ca:	681b      	ldr	r3, [r3, #0]
 800e0cc:	701a      	strb	r2, [r3, #0]
  *RX_PHY = resp.RX_PHY;
 800e0ce:	f107 0310 	add.w	r3, r7, #16
 800e0d2:	791a      	ldrb	r2, [r3, #4]
 800e0d4:	1d3b      	adds	r3, r7, #4
 800e0d6:	681b      	ldr	r3, [r3, #0]
 800e0d8:	701a      	strb	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 800e0da:	2300      	movs	r3, #0
}
 800e0dc:	4618      	mov	r0, r3
 800e0de:	f507 779c 	add.w	r7, r7, #312	; 0x138
 800e0e2:	46bd      	mov	sp, r7
 800e0e4:	bd80      	pop	{r7, pc}

0800e0e6 <hci_le_set_default_phy>:

tBleStatus hci_le_set_default_phy( uint8_t ALL_PHYS,
                                   uint8_t TX_PHYS,
                                   uint8_t RX_PHYS )
{
 800e0e6:	b590      	push	{r4, r7, lr}
 800e0e8:	b0cd      	sub	sp, #308	; 0x134
 800e0ea:	af00      	add	r7, sp, #0
 800e0ec:	4604      	mov	r4, r0
 800e0ee:	4608      	mov	r0, r1
 800e0f0:	4611      	mov	r1, r2
 800e0f2:	1dfb      	adds	r3, r7, #7
 800e0f4:	4622      	mov	r2, r4
 800e0f6:	701a      	strb	r2, [r3, #0]
 800e0f8:	1dbb      	adds	r3, r7, #6
 800e0fa:	4602      	mov	r2, r0
 800e0fc:	701a      	strb	r2, [r3, #0]
 800e0fe:	1d7b      	adds	r3, r7, #5
 800e100:	460a      	mov	r2, r1
 800e102:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  hci_le_set_default_phy_cp0 *cp0 = (hci_le_set_default_phy_cp0*)(cmd_buffer);
 800e104:	f107 0310 	add.w	r3, r7, #16
 800e108:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800e10c:	f107 030f 	add.w	r3, r7, #15
 800e110:	2200      	movs	r2, #0
 800e112:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800e114:	2300      	movs	r3, #0
 800e116:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->ALL_PHYS = ALL_PHYS;
 800e11a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800e11e:	1dfa      	adds	r2, r7, #7
 800e120:	7812      	ldrb	r2, [r2, #0]
 800e122:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800e124:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800e128:	3301      	adds	r3, #1
 800e12a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->TX_PHYS = TX_PHYS;
 800e12e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800e132:	1dba      	adds	r2, r7, #6
 800e134:	7812      	ldrb	r2, [r2, #0]
 800e136:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800e138:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800e13c:	3301      	adds	r3, #1
 800e13e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->RX_PHYS = RX_PHYS;
 800e142:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800e146:	1d7a      	adds	r2, r7, #5
 800e148:	7812      	ldrb	r2, [r2, #0]
 800e14a:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800e14c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800e150:	3301      	adds	r3, #1
 800e152:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800e156:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800e15a:	2218      	movs	r2, #24
 800e15c:	2100      	movs	r1, #0
 800e15e:	4618      	mov	r0, r3
 800e160:	f000 f838 	bl	800e1d4 <Osal_MemSet>
  rq.ogf = 0x08;
 800e164:	2308      	movs	r3, #8
 800e166:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x031;
 800e16a:	2331      	movs	r3, #49	; 0x31
 800e16c:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800e170:	f107 0310 	add.w	r3, r7, #16
 800e174:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800e178:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800e17c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800e180:	f107 030f 	add.w	r3, r7, #15
 800e184:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800e188:	2301      	movs	r3, #1
 800e18a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800e18e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800e192:	2100      	movs	r1, #0
 800e194:	4618      	mov	r0, r3
 800e196:	f000 f8c5 	bl	800e324 <hci_send_req>
 800e19a:	4603      	mov	r3, r0
 800e19c:	2b00      	cmp	r3, #0
 800e19e:	da01      	bge.n	800e1a4 <hci_le_set_default_phy+0xbe>
    return BLE_STATUS_TIMEOUT;
 800e1a0:	23ff      	movs	r3, #255	; 0xff
 800e1a2:	e002      	b.n	800e1aa <hci_le_set_default_phy+0xc4>
  return status;
 800e1a4:	f107 030f 	add.w	r3, r7, #15
 800e1a8:	781b      	ldrb	r3, [r3, #0]
}
 800e1aa:	4618      	mov	r0, r3
 800e1ac:	f507 779a 	add.w	r7, r7, #308	; 0x134
 800e1b0:	46bd      	mov	sp, r7
 800e1b2:	bd90      	pop	{r4, r7, pc}

0800e1b4 <Osal_MemCpy>:
 * Osal_MemCpy
 * 
 */
 
void* Osal_MemCpy( void *dest, const void *src, unsigned int size )
{
 800e1b4:	b580      	push	{r7, lr}
 800e1b6:	b084      	sub	sp, #16
 800e1b8:	af00      	add	r7, sp, #0
 800e1ba:	60f8      	str	r0, [r7, #12]
 800e1bc:	60b9      	str	r1, [r7, #8]
 800e1be:	607a      	str	r2, [r7, #4]
  return memcpy( dest, src, size ); 
 800e1c0:	687a      	ldr	r2, [r7, #4]
 800e1c2:	68b9      	ldr	r1, [r7, #8]
 800e1c4:	68f8      	ldr	r0, [r7, #12]
 800e1c6:	f005 fe59 	bl	8013e7c <memcpy>
 800e1ca:	4603      	mov	r3, r0
}
 800e1cc:	4618      	mov	r0, r3
 800e1ce:	3710      	adds	r7, #16
 800e1d0:	46bd      	mov	sp, r7
 800e1d2:	bd80      	pop	{r7, pc}

0800e1d4 <Osal_MemSet>:
 * Osal_MemSet
 * 
 */
 
void* Osal_MemSet( void *ptr, int value, unsigned int size )
{
 800e1d4:	b580      	push	{r7, lr}
 800e1d6:	b084      	sub	sp, #16
 800e1d8:	af00      	add	r7, sp, #0
 800e1da:	60f8      	str	r0, [r7, #12]
 800e1dc:	60b9      	str	r1, [r7, #8]
 800e1de:	607a      	str	r2, [r7, #4]
  return memset( ptr, value, size );
 800e1e0:	687a      	ldr	r2, [r7, #4]
 800e1e2:	68b9      	ldr	r1, [r7, #8]
 800e1e4:	68f8      	ldr	r0, [r7, #12]
 800e1e6:	f005 fe54 	bl	8013e92 <memset>
 800e1ea:	4603      	mov	r3, r0
}
 800e1ec:	4618      	mov	r0, r3
 800e1ee:	3710      	adds	r7, #16
 800e1f0:	46bd      	mov	sp, r7
 800e1f2:	bd80      	pop	{r7, pc}

0800e1f4 <SHCI_C2_BLE_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_BLE_Init( SHCI_C2_Ble_Init_Cmd_Packet_t *pCmdPacket )
{
 800e1f4:	b580      	push	{r7, lr}
 800e1f6:	b088      	sub	sp, #32
 800e1f8:	af00      	add	r7, sp, #0
 800e1fa:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CS_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 800e1fc:	f107 030c 	add.w	r3, r7, #12
 800e200:	61fb      	str	r3, [r7, #28]

 shci_send( SHCI_OPCODE_C2_BLE_INIT,
            sizeof( SHCI_C2_Ble_Init_Cmd_Param_t ),
            (uint8_t*)&pCmdPacket->Param,
 800e202:	687b      	ldr	r3, [r7, #4]
 800e204:	f103 020c 	add.w	r2, r3, #12
 shci_send( SHCI_OPCODE_C2_BLE_INIT,
 800e208:	69fb      	ldr	r3, [r7, #28]
 800e20a:	2121      	movs	r1, #33	; 0x21
 800e20c:	f64f 4066 	movw	r0, #64614	; 0xfc66
 800e210:	f000 fa1e 	bl	800e650 <shci_send>
            p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 800e214:	69fb      	ldr	r3, [r7, #28]
 800e216:	330b      	adds	r3, #11
 800e218:	78db      	ldrb	r3, [r3, #3]
}
 800e21a:	4618      	mov	r0, r3
 800e21c:	3720      	adds	r7, #32
 800e21e:	46bd      	mov	sp, r7
 800e220:	bd80      	pop	{r7, pc}

0800e222 <SHCI_C2_DEBUG_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_DEBUG_Init( SHCI_C2_DEBUG_Init_Cmd_Packet_t *pCmdPacket  )
{
 800e222:	b580      	push	{r7, lr}
 800e224:	b088      	sub	sp, #32
 800e226:	af00      	add	r7, sp, #0
 800e228:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CS_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 800e22a:	f107 030c 	add.w	r3, r7, #12
 800e22e:	61fb      	str	r3, [r7, #28]

  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
             sizeof( SHCI_C2_DEBUG_init_Cmd_Param_t ),
             (uint8_t*)&pCmdPacket->Param,
 800e230:	687b      	ldr	r3, [r7, #4]
 800e232:	f103 020c 	add.w	r2, r3, #12
  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
 800e236:	69fb      	ldr	r3, [r7, #28]
 800e238:	210f      	movs	r1, #15
 800e23a:	f64f 4068 	movw	r0, #64616	; 0xfc68
 800e23e:	f000 fa07 	bl	800e650 <shci_send>
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 800e242:	69fb      	ldr	r3, [r7, #28]
 800e244:	330b      	adds	r3, #11
 800e246:	78db      	ldrb	r3, [r3, #3]
}
 800e248:	4618      	mov	r0, r3
 800e24a:	3720      	adds	r7, #32
 800e24c:	46bd      	mov	sp, r7
 800e24e:	bd80      	pop	{r7, pc}

0800e250 <hci_init>:
static void TlEvtReceived(TL_EvtPacket_t *hcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void hci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 800e250:	b580      	push	{r7, lr}
 800e252:	b082      	sub	sp, #8
 800e254:	af00      	add	r7, sp, #0
 800e256:	6078      	str	r0, [r7, #4]
 800e258:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((HCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 800e25a:	683b      	ldr	r3, [r7, #0]
 800e25c:	685b      	ldr	r3, [r3, #4]
 800e25e:	4a08      	ldr	r2, [pc, #32]	; (800e280 <hci_init+0x30>)
 800e260:	6013      	str	r3, [r2, #0]
  hciContext.UserEvtRx = UserEvtRx;
 800e262:	4a08      	ldr	r2, [pc, #32]	; (800e284 <hci_init+0x34>)
 800e264:	687b      	ldr	r3, [r7, #4]
 800e266:	61d3      	str	r3, [r2, #28]

  hci_register_io_bus (&hciContext.io);
 800e268:	4806      	ldr	r0, [pc, #24]	; (800e284 <hci_init+0x34>)
 800e26a:	f000 f973 	bl	800e554 <hci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((HCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 800e26e:	683b      	ldr	r3, [r7, #0]
 800e270:	681b      	ldr	r3, [r3, #0]
 800e272:	4618      	mov	r0, r3
 800e274:	f000 f8d4 	bl	800e420 <TlInit>

  return;
 800e278:	bf00      	nop
}
 800e27a:	3708      	adds	r7, #8
 800e27c:	46bd      	mov	sp, r7
 800e27e:	bd80      	pop	{r7, pc}
 800e280:	200003d0 	.word	0x200003d0
 800e284:	200003a8 	.word	0x200003a8

0800e288 <hci_user_evt_proc>:

void hci_user_evt_proc(void)
{
 800e288:	b580      	push	{r7, lr}
 800e28a:	b084      	sub	sp, #16
 800e28c:	af00      	add	r7, sp, #0
  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 800e28e:	4822      	ldr	r0, [pc, #136]	; (800e318 <hci_user_evt_proc+0x90>)
 800e290:	f000 ff04 	bl	800f09c <LST_is_empty>
 800e294:	4603      	mov	r3, r0
 800e296:	2b00      	cmp	r3, #0
 800e298:	d12b      	bne.n	800e2f2 <hci_user_evt_proc+0x6a>
 800e29a:	4b20      	ldr	r3, [pc, #128]	; (800e31c <hci_user_evt_proc+0x94>)
 800e29c:	781b      	ldrb	r3, [r3, #0]
 800e29e:	2b00      	cmp	r3, #0
 800e2a0:	d027      	beq.n	800e2f2 <hci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &HciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 800e2a2:	f107 030c 	add.w	r3, r7, #12
 800e2a6:	4619      	mov	r1, r3
 800e2a8:	481b      	ldr	r0, [pc, #108]	; (800e318 <hci_user_evt_proc+0x90>)
 800e2aa:	f000 ff7e 	bl	800f1aa <LST_remove_head>

    if (hciContext.UserEvtRx != NULL)
 800e2ae:	4b1c      	ldr	r3, [pc, #112]	; (800e320 <hci_user_evt_proc+0x98>)
 800e2b0:	69db      	ldr	r3, [r3, #28]
 800e2b2:	2b00      	cmp	r3, #0
 800e2b4:	d00c      	beq.n	800e2d0 <hci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 800e2b6:	68fb      	ldr	r3, [r7, #12]
 800e2b8:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = HCI_TL_UserEventFlow_Enable;
 800e2ba:	2301      	movs	r3, #1
 800e2bc:	713b      	strb	r3, [r7, #4]
      hciContext.UserEvtRx((void *)&UserEvtRxParam);
 800e2be:	4b18      	ldr	r3, [pc, #96]	; (800e320 <hci_user_evt_proc+0x98>)
 800e2c0:	69db      	ldr	r3, [r3, #28]
 800e2c2:	1d3a      	adds	r2, r7, #4
 800e2c4:	4610      	mov	r0, r2
 800e2c6:	4798      	blx	r3
      UserEventFlow = UserEvtRxParam.status;
 800e2c8:	793a      	ldrb	r2, [r7, #4]
 800e2ca:	4b14      	ldr	r3, [pc, #80]	; (800e31c <hci_user_evt_proc+0x94>)
 800e2cc:	701a      	strb	r2, [r3, #0]
 800e2ce:	e002      	b.n	800e2d6 <hci_user_evt_proc+0x4e>
    }
    else
    {
      UserEventFlow = HCI_TL_UserEventFlow_Enable;
 800e2d0:	4b12      	ldr	r3, [pc, #72]	; (800e31c <hci_user_evt_proc+0x94>)
 800e2d2:	2201      	movs	r2, #1
 800e2d4:	701a      	strb	r2, [r3, #0]
    }

    if(UserEventFlow != HCI_TL_UserEventFlow_Disable)
 800e2d6:	4b11      	ldr	r3, [pc, #68]	; (800e31c <hci_user_evt_proc+0x94>)
 800e2d8:	781b      	ldrb	r3, [r3, #0]
 800e2da:	2b00      	cmp	r3, #0
 800e2dc:	d004      	beq.n	800e2e8 <hci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 800e2de:	68fb      	ldr	r3, [r7, #12]
 800e2e0:	4618      	mov	r0, r3
 800e2e2:	f000 fc03 	bl	800eaec <TL_MM_EvtDone>
 800e2e6:	e004      	b.n	800e2f2 <hci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &HciAsynchEventQueue, (tListNode *)phcievtbuffer );
 800e2e8:	68fb      	ldr	r3, [r7, #12]
 800e2ea:	4619      	mov	r1, r3
 800e2ec:	480a      	ldr	r0, [pc, #40]	; (800e318 <hci_user_evt_proc+0x90>)
 800e2ee:	f000 fef5 	bl	800f0dc <LST_insert_head>
    }
  }

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 800e2f2:	4809      	ldr	r0, [pc, #36]	; (800e318 <hci_user_evt_proc+0x90>)
 800e2f4:	f000 fed2 	bl	800f09c <LST_is_empty>
 800e2f8:	4603      	mov	r3, r0
 800e2fa:	2b00      	cmp	r3, #0
 800e2fc:	d107      	bne.n	800e30e <hci_user_evt_proc+0x86>
 800e2fe:	4b07      	ldr	r3, [pc, #28]	; (800e31c <hci_user_evt_proc+0x94>)
 800e300:	781b      	ldrb	r3, [r3, #0]
 800e302:	2b00      	cmp	r3, #0
 800e304:	d003      	beq.n	800e30e <hci_user_evt_proc+0x86>
  {
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue);
 800e306:	4804      	ldr	r0, [pc, #16]	; (800e318 <hci_user_evt_proc+0x90>)
 800e308:	f7f3 f8c4 	bl	8001494 <hci_notify_asynch_evt>
  }


  return;
 800e30c:	bf00      	nop
 800e30e:	bf00      	nop
}
 800e310:	3710      	adds	r7, #16
 800e312:	46bd      	mov	sp, r7
 800e314:	bd80      	pop	{r7, pc}
 800e316:	bf00      	nop
 800e318:	20000344 	.word	0x20000344
 800e31c:	20000350 	.word	0x20000350
 800e320:	200003a8 	.word	0x200003a8

0800e324 <hci_send_req>:

  return;
}

int hci_send_req(struct hci_request *p_cmd, uint8_t async)
{
 800e324:	b580      	push	{r7, lr}
 800e326:	b088      	sub	sp, #32
 800e328:	af00      	add	r7, sp, #0
 800e32a:	6078      	str	r0, [r7, #4]
 800e32c:	460b      	mov	r3, r1
 800e32e:	70fb      	strb	r3, [r7, #3]
  TL_CsEvt_t    *pcommand_status_event;
  TL_EvtPacket_t *pevtpacket;
  uint8_t hci_cmd_complete_return_parameters_length;
  HCI_TL_CmdStatus_t local_cmd_status;

  NotifyCmdStatus(HCI_TL_CmdBusy);
 800e330:	2000      	movs	r0, #0
 800e332:	f000 f8cb 	bl	800e4cc <NotifyCmdStatus>
  local_cmd_status = HCI_TL_CmdBusy;
 800e336:	2300      	movs	r3, #0
 800e338:	77fb      	strb	r3, [r7, #31]
  opcode = ((p_cmd->ocf) & 0x03ff) | ((p_cmd->ogf) << 10);
 800e33a:	687b      	ldr	r3, [r7, #4]
 800e33c:	885b      	ldrh	r3, [r3, #2]
 800e33e:	b21b      	sxth	r3, r3
 800e340:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800e344:	b21a      	sxth	r2, r3
 800e346:	687b      	ldr	r3, [r7, #4]
 800e348:	881b      	ldrh	r3, [r3, #0]
 800e34a:	029b      	lsls	r3, r3, #10
 800e34c:	b21b      	sxth	r3, r3
 800e34e:	4313      	orrs	r3, r2
 800e350:	b21b      	sxth	r3, r3
 800e352:	83bb      	strh	r3, [r7, #28]
  SendCmd(opcode, p_cmd->clen, p_cmd->cparam);
 800e354:	687b      	ldr	r3, [r7, #4]
 800e356:	68db      	ldr	r3, [r3, #12]
 800e358:	b2d9      	uxtb	r1, r3
 800e35a:	687b      	ldr	r3, [r7, #4]
 800e35c:	689a      	ldr	r2, [r3, #8]
 800e35e:	8bbb      	ldrh	r3, [r7, #28]
 800e360:	4618      	mov	r0, r3
 800e362:	f000 f88d 	bl	800e480 <SendCmd>

  while(local_cmd_status == HCI_TL_CmdBusy)
 800e366:	e04e      	b.n	800e406 <hci_send_req+0xe2>
  {
    hci_cmd_resp_wait(HCI_TL_DEFAULT_TIMEOUT);
 800e368:	f248 00e8 	movw	r0, #33000	; 0x80e8
 800e36c:	f7f3 f8b2 	bl	80014d4 <hci_cmd_resp_wait>

    /**
     * Process Cmd Event
     */
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 800e370:	e043      	b.n	800e3fa <hci_send_req+0xd6>
    {
      LST_remove_head (&HciCmdEventQueue, (tListNode **)&pevtpacket);
 800e372:	f107 030c 	add.w	r3, r7, #12
 800e376:	4619      	mov	r1, r3
 800e378:	4828      	ldr	r0, [pc, #160]	; (800e41c <hci_send_req+0xf8>)
 800e37a:	f000 ff16 	bl	800f1aa <LST_remove_head>

      if(pevtpacket->evtserial.evt.evtcode == TL_BLEEVT_CS_OPCODE)
 800e37e:	68fb      	ldr	r3, [r7, #12]
 800e380:	7a5b      	ldrb	r3, [r3, #9]
 800e382:	2b0f      	cmp	r3, #15
 800e384:	d114      	bne.n	800e3b0 <hci_send_req+0x8c>
      {
        pcommand_status_event = (TL_CsEvt_t*)pevtpacket->evtserial.evt.payload;
 800e386:	68fb      	ldr	r3, [r7, #12]
 800e388:	330b      	adds	r3, #11
 800e38a:	613b      	str	r3, [r7, #16]
        if(pcommand_status_event->cmdcode == opcode)
 800e38c:	693b      	ldr	r3, [r7, #16]
 800e38e:	885b      	ldrh	r3, [r3, #2]
 800e390:	b29b      	uxth	r3, r3
 800e392:	8bba      	ldrh	r2, [r7, #28]
 800e394:	429a      	cmp	r2, r3
 800e396:	d104      	bne.n	800e3a2 <hci_send_req+0x7e>
        {
          *(uint8_t *)(p_cmd->rparam) = pcommand_status_event->status;
 800e398:	687b      	ldr	r3, [r7, #4]
 800e39a:	691b      	ldr	r3, [r3, #16]
 800e39c:	693a      	ldr	r2, [r7, #16]
 800e39e:	7812      	ldrb	r2, [r2, #0]
 800e3a0:	701a      	strb	r2, [r3, #0]
        }

        if(pcommand_status_event->numcmd != 0)
 800e3a2:	693b      	ldr	r3, [r7, #16]
 800e3a4:	785b      	ldrb	r3, [r3, #1]
 800e3a6:	2b00      	cmp	r3, #0
 800e3a8:	d027      	beq.n	800e3fa <hci_send_req+0xd6>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 800e3aa:	2301      	movs	r3, #1
 800e3ac:	77fb      	strb	r3, [r7, #31]
 800e3ae:	e024      	b.n	800e3fa <hci_send_req+0xd6>
        }
      }
      else
      {
        pcommand_complete_event = (TL_CcEvt_t*)pevtpacket->evtserial.evt.payload;
 800e3b0:	68fb      	ldr	r3, [r7, #12]
 800e3b2:	330b      	adds	r3, #11
 800e3b4:	61bb      	str	r3, [r7, #24]

        if(pcommand_complete_event->cmdcode == opcode)
 800e3b6:	69bb      	ldr	r3, [r7, #24]
 800e3b8:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800e3bc:	b29b      	uxth	r3, r3
 800e3be:	8bba      	ldrh	r2, [r7, #28]
 800e3c0:	429a      	cmp	r2, r3
 800e3c2:	d114      	bne.n	800e3ee <hci_send_req+0xca>
        {
          hci_cmd_complete_return_parameters_length = pevtpacket->evtserial.evt.plen - TL_EVT_HDR_SIZE;
 800e3c4:	68fb      	ldr	r3, [r7, #12]
 800e3c6:	7a9b      	ldrb	r3, [r3, #10]
 800e3c8:	3b03      	subs	r3, #3
 800e3ca:	75fb      	strb	r3, [r7, #23]
          p_cmd->rlen = MIN(hci_cmd_complete_return_parameters_length, p_cmd->rlen);
 800e3cc:	687b      	ldr	r3, [r7, #4]
 800e3ce:	695a      	ldr	r2, [r3, #20]
 800e3d0:	7dfb      	ldrb	r3, [r7, #23]
 800e3d2:	429a      	cmp	r2, r3
 800e3d4:	bfa8      	it	ge
 800e3d6:	461a      	movge	r2, r3
 800e3d8:	687b      	ldr	r3, [r7, #4]
 800e3da:	615a      	str	r2, [r3, #20]
          memcpy(p_cmd->rparam, pcommand_complete_event->payload, p_cmd->rlen);
 800e3dc:	687b      	ldr	r3, [r7, #4]
 800e3de:	6918      	ldr	r0, [r3, #16]
 800e3e0:	69bb      	ldr	r3, [r7, #24]
 800e3e2:	1cd9      	adds	r1, r3, #3
 800e3e4:	687b      	ldr	r3, [r7, #4]
 800e3e6:	695b      	ldr	r3, [r3, #20]
 800e3e8:	461a      	mov	r2, r3
 800e3ea:	f005 fd47 	bl	8013e7c <memcpy>
        }

        if(pcommand_complete_event->numcmd != 0)
 800e3ee:	69bb      	ldr	r3, [r7, #24]
 800e3f0:	781b      	ldrb	r3, [r3, #0]
 800e3f2:	2b00      	cmp	r3, #0
 800e3f4:	d001      	beq.n	800e3fa <hci_send_req+0xd6>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 800e3f6:	2301      	movs	r3, #1
 800e3f8:	77fb      	strb	r3, [r7, #31]
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 800e3fa:	4808      	ldr	r0, [pc, #32]	; (800e41c <hci_send_req+0xf8>)
 800e3fc:	f000 fe4e 	bl	800f09c <LST_is_empty>
 800e400:	4603      	mov	r3, r0
 800e402:	2b00      	cmp	r3, #0
 800e404:	d0b5      	beq.n	800e372 <hci_send_req+0x4e>
  while(local_cmd_status == HCI_TL_CmdBusy)
 800e406:	7ffb      	ldrb	r3, [r7, #31]
 800e408:	2b00      	cmp	r3, #0
 800e40a:	d0ad      	beq.n	800e368 <hci_send_req+0x44>
        }
      }
    }
  }

  NotifyCmdStatus(HCI_TL_CmdAvailable);
 800e40c:	2001      	movs	r0, #1
 800e40e:	f000 f85d 	bl	800e4cc <NotifyCmdStatus>

  return 0;
 800e412:	2300      	movs	r3, #0
}
 800e414:	4618      	mov	r0, r3
 800e416:	3720      	adds	r7, #32
 800e418:	46bd      	mov	sp, r7
 800e41a:	bd80      	pop	{r7, pc}
 800e41c:	200003c8 	.word	0x200003c8

0800e420 <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 800e420:	b580      	push	{r7, lr}
 800e422:	b086      	sub	sp, #24
 800e424:	af00      	add	r7, sp, #0
 800e426:	6078      	str	r0, [r7, #4]
  TL_BLE_InitConf_t Conf;

  /**
   * Always initialize the command event queue
   */
  LST_init_head (&HciCmdEventQueue);
 800e428:	480f      	ldr	r0, [pc, #60]	; (800e468 <TlInit+0x48>)
 800e42a:	f000 fe27 	bl	800f07c <LST_init_head>

  pCmdBuffer = p_cmdbuffer;
 800e42e:	4a0f      	ldr	r2, [pc, #60]	; (800e46c <TlInit+0x4c>)
 800e430:	687b      	ldr	r3, [r7, #4]
 800e432:	6013      	str	r3, [r2, #0]

  LST_init_head (&HciAsynchEventQueue);
 800e434:	480e      	ldr	r0, [pc, #56]	; (800e470 <TlInit+0x50>)
 800e436:	f000 fe21 	bl	800f07c <LST_init_head>

  UserEventFlow = HCI_TL_UserEventFlow_Enable;
 800e43a:	4b0e      	ldr	r3, [pc, #56]	; (800e474 <TlInit+0x54>)
 800e43c:	2201      	movs	r2, #1
 800e43e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (hciContext.io.Init)
 800e440:	4b0d      	ldr	r3, [pc, #52]	; (800e478 <TlInit+0x58>)
 800e442:	681b      	ldr	r3, [r3, #0]
 800e444:	2b00      	cmp	r3, #0
 800e446:	d00a      	beq.n	800e45e <TlInit+0x3e>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 800e448:	687b      	ldr	r3, [r7, #4]
 800e44a:	613b      	str	r3, [r7, #16]
    Conf.IoBusEvtCallBack = TlEvtReceived;
 800e44c:	4b0b      	ldr	r3, [pc, #44]	; (800e47c <TlInit+0x5c>)
 800e44e:	60bb      	str	r3, [r7, #8]
    hciContext.io.Init(&Conf);
 800e450:	4b09      	ldr	r3, [pc, #36]	; (800e478 <TlInit+0x58>)
 800e452:	681b      	ldr	r3, [r3, #0]
 800e454:	f107 0208 	add.w	r2, r7, #8
 800e458:	4610      	mov	r0, r2
 800e45a:	4798      	blx	r3
  }

  return;
 800e45c:	bf00      	nop
 800e45e:	bf00      	nop
}
 800e460:	3718      	adds	r7, #24
 800e462:	46bd      	mov	sp, r7
 800e464:	bd80      	pop	{r7, pc}
 800e466:	bf00      	nop
 800e468:	200003c8 	.word	0x200003c8
 800e46c:	2000034c 	.word	0x2000034c
 800e470:	20000344 	.word	0x20000344
 800e474:	20000350 	.word	0x20000350
 800e478:	200003a8 	.word	0x200003a8
 800e47c:	0800e50d 	.word	0x0800e50d

0800e480 <SendCmd>:

static void SendCmd(uint16_t opcode, uint8_t plen, void *param)
{
 800e480:	b580      	push	{r7, lr}
 800e482:	b082      	sub	sp, #8
 800e484:	af00      	add	r7, sp, #0
 800e486:	4603      	mov	r3, r0
 800e488:	603a      	str	r2, [r7, #0]
 800e48a:	80fb      	strh	r3, [r7, #6]
 800e48c:	460b      	mov	r3, r1
 800e48e:	717b      	strb	r3, [r7, #5]
  pCmdBuffer->cmdserial.cmd.cmdcode = opcode;
 800e490:	4b0c      	ldr	r3, [pc, #48]	; (800e4c4 <SendCmd+0x44>)
 800e492:	681b      	ldr	r3, [r3, #0]
 800e494:	88fa      	ldrh	r2, [r7, #6]
 800e496:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = plen;
 800e49a:	4b0a      	ldr	r3, [pc, #40]	; (800e4c4 <SendCmd+0x44>)
 800e49c:	681b      	ldr	r3, [r3, #0]
 800e49e:	797a      	ldrb	r2, [r7, #5]
 800e4a0:	72da      	strb	r2, [r3, #11]
  memcpy( pCmdBuffer->cmdserial.cmd.payload, param, plen );
 800e4a2:	4b08      	ldr	r3, [pc, #32]	; (800e4c4 <SendCmd+0x44>)
 800e4a4:	681b      	ldr	r3, [r3, #0]
 800e4a6:	330c      	adds	r3, #12
 800e4a8:	797a      	ldrb	r2, [r7, #5]
 800e4aa:	6839      	ldr	r1, [r7, #0]
 800e4ac:	4618      	mov	r0, r3
 800e4ae:	f005 fce5 	bl	8013e7c <memcpy>

  hciContext.io.Send(0,0);
 800e4b2:	4b05      	ldr	r3, [pc, #20]	; (800e4c8 <SendCmd+0x48>)
 800e4b4:	691b      	ldr	r3, [r3, #16]
 800e4b6:	2100      	movs	r1, #0
 800e4b8:	2000      	movs	r0, #0
 800e4ba:	4798      	blx	r3

  return;
 800e4bc:	bf00      	nop
}
 800e4be:	3708      	adds	r7, #8
 800e4c0:	46bd      	mov	sp, r7
 800e4c2:	bd80      	pop	{r7, pc}
 800e4c4:	2000034c 	.word	0x2000034c
 800e4c8:	200003a8 	.word	0x200003a8

0800e4cc <NotifyCmdStatus>:

static void NotifyCmdStatus(HCI_TL_CmdStatus_t hcicmdstatus)
{
 800e4cc:	b580      	push	{r7, lr}
 800e4ce:	b082      	sub	sp, #8
 800e4d0:	af00      	add	r7, sp, #0
 800e4d2:	4603      	mov	r3, r0
 800e4d4:	71fb      	strb	r3, [r7, #7]
  if(hcicmdstatus == HCI_TL_CmdBusy)
 800e4d6:	79fb      	ldrb	r3, [r7, #7]
 800e4d8:	2b00      	cmp	r3, #0
 800e4da:	d108      	bne.n	800e4ee <NotifyCmdStatus+0x22>
  {
    if(StatusNotCallBackFunction != 0)
 800e4dc:	4b0a      	ldr	r3, [pc, #40]	; (800e508 <NotifyCmdStatus+0x3c>)
 800e4de:	681b      	ldr	r3, [r3, #0]
 800e4e0:	2b00      	cmp	r3, #0
 800e4e2:	d00d      	beq.n	800e500 <NotifyCmdStatus+0x34>
    {
      StatusNotCallBackFunction(HCI_TL_CmdBusy);
 800e4e4:	4b08      	ldr	r3, [pc, #32]	; (800e508 <NotifyCmdStatus+0x3c>)
 800e4e6:	681b      	ldr	r3, [r3, #0]
 800e4e8:	2000      	movs	r0, #0
 800e4ea:	4798      	blx	r3
    {
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
    }
  }

  return;
 800e4ec:	e008      	b.n	800e500 <NotifyCmdStatus+0x34>
    if(StatusNotCallBackFunction != 0)
 800e4ee:	4b06      	ldr	r3, [pc, #24]	; (800e508 <NotifyCmdStatus+0x3c>)
 800e4f0:	681b      	ldr	r3, [r3, #0]
 800e4f2:	2b00      	cmp	r3, #0
 800e4f4:	d004      	beq.n	800e500 <NotifyCmdStatus+0x34>
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
 800e4f6:	4b04      	ldr	r3, [pc, #16]	; (800e508 <NotifyCmdStatus+0x3c>)
 800e4f8:	681b      	ldr	r3, [r3, #0]
 800e4fa:	2001      	movs	r0, #1
 800e4fc:	4798      	blx	r3
  return;
 800e4fe:	bf00      	nop
 800e500:	bf00      	nop
}
 800e502:	3708      	adds	r7, #8
 800e504:	46bd      	mov	sp, r7
 800e506:	bd80      	pop	{r7, pc}
 800e508:	200003d0 	.word	0x200003d0

0800e50c <TlEvtReceived>:

static void TlEvtReceived(TL_EvtPacket_t *hcievt)
{
 800e50c:	b580      	push	{r7, lr}
 800e50e:	b082      	sub	sp, #8
 800e510:	af00      	add	r7, sp, #0
 800e512:	6078      	str	r0, [r7, #4]
  if ( ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 800e514:	687b      	ldr	r3, [r7, #4]
 800e516:	7a5b      	ldrb	r3, [r3, #9]
 800e518:	2b0f      	cmp	r3, #15
 800e51a:	d003      	beq.n	800e524 <TlEvtReceived+0x18>
 800e51c:	687b      	ldr	r3, [r7, #4]
 800e51e:	7a5b      	ldrb	r3, [r3, #9]
 800e520:	2b0e      	cmp	r3, #14
 800e522:	d107      	bne.n	800e534 <TlEvtReceived+0x28>
  {
    LST_insert_tail(&HciCmdEventQueue, (tListNode *)hcievt);
 800e524:	6879      	ldr	r1, [r7, #4]
 800e526:	4809      	ldr	r0, [pc, #36]	; (800e54c <TlEvtReceived+0x40>)
 800e528:	f000 fdfc 	bl	800f124 <LST_insert_tail>
    hci_cmd_resp_release(0); /**< Notify the application a full Cmd Event has been received */
 800e52c:	2000      	movs	r0, #0
 800e52e:	f7f2 ffc1 	bl	80014b4 <hci_cmd_resp_release>
 800e532:	e006      	b.n	800e542 <TlEvtReceived+0x36>
  }
  else
  {
    LST_insert_tail(&HciAsynchEventQueue, (tListNode *)hcievt);
 800e534:	6879      	ldr	r1, [r7, #4]
 800e536:	4806      	ldr	r0, [pc, #24]	; (800e550 <TlEvtReceived+0x44>)
 800e538:	f000 fdf4 	bl	800f124 <LST_insert_tail>
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 800e53c:	4804      	ldr	r0, [pc, #16]	; (800e550 <TlEvtReceived+0x44>)
 800e53e:	f7f2 ffa9 	bl	8001494 <hci_notify_asynch_evt>
  }

  return;
 800e542:	bf00      	nop
}
 800e544:	3708      	adds	r7, #8
 800e546:	46bd      	mov	sp, r7
 800e548:	bd80      	pop	{r7, pc}
 800e54a:	bf00      	nop
 800e54c:	200003c8 	.word	0x200003c8
 800e550:	20000344 	.word	0x20000344

0800e554 <hci_register_io_bus>:
#include "hci_tl.h"
#include "tl.h"


void hci_register_io_bus(tHciIO* fops)
{
 800e554:	b480      	push	{r7}
 800e556:	b083      	sub	sp, #12
 800e558:	af00      	add	r7, sp, #0
 800e55a:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_BLE_Init;
 800e55c:	687b      	ldr	r3, [r7, #4]
 800e55e:	4a05      	ldr	r2, [pc, #20]	; (800e574 <hci_register_io_bus+0x20>)
 800e560:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_BLE_SendCmd;
 800e562:	687b      	ldr	r3, [r7, #4]
 800e564:	4a04      	ldr	r2, [pc, #16]	; (800e578 <hci_register_io_bus+0x24>)
 800e566:	611a      	str	r2, [r3, #16]

  return;
 800e568:	bf00      	nop
}
 800e56a:	370c      	adds	r7, #12
 800e56c:	46bd      	mov	sp, r7
 800e56e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e572:	4770      	bx	lr
 800e574:	0800e865 	.word	0x0800e865
 800e578:	0800e8cd 	.word	0x0800e8cd

0800e57c <shci_init>:
static void TlUserEvtReceived(TL_EvtPacket_t *shcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void shci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 800e57c:	b580      	push	{r7, lr}
 800e57e:	b082      	sub	sp, #8
 800e580:	af00      	add	r7, sp, #0
 800e582:	6078      	str	r0, [r7, #4]
 800e584:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((SHCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 800e586:	683b      	ldr	r3, [r7, #0]
 800e588:	685b      	ldr	r3, [r3, #4]
 800e58a:	4a08      	ldr	r2, [pc, #32]	; (800e5ac <shci_init+0x30>)
 800e58c:	6013      	str	r3, [r2, #0]
  shciContext.UserEvtRx = UserEvtRx;
 800e58e:	4a08      	ldr	r2, [pc, #32]	; (800e5b0 <shci_init+0x34>)
 800e590:	687b      	ldr	r3, [r7, #4]
 800e592:	61d3      	str	r3, [r2, #28]

  shci_register_io_bus (&shciContext.io);
 800e594:	4806      	ldr	r0, [pc, #24]	; (800e5b0 <shci_init+0x34>)
 800e596:	f000 f911 	bl	800e7bc <shci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((SHCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 800e59a:	683b      	ldr	r3, [r7, #0]
 800e59c:	681b      	ldr	r3, [r3, #0]
 800e59e:	4618      	mov	r0, r3
 800e5a0:	f000 f894 	bl	800e6cc <TlInit>

  return;
 800e5a4:	bf00      	nop
}
 800e5a6:	3708      	adds	r7, #8
 800e5a8:	46bd      	mov	sp, r7
 800e5aa:	bd80      	pop	{r7, pc}
 800e5ac:	200003f4 	.word	0x200003f4
 800e5b0:	200003d4 	.word	0x200003d4

0800e5b4 <shci_user_evt_proc>:

void shci_user_evt_proc(void)
{
 800e5b4:	b580      	push	{r7, lr}
 800e5b6:	b084      	sub	sp, #16
 800e5b8:	af00      	add	r7, sp, #0

  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */
  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 800e5ba:	4822      	ldr	r0, [pc, #136]	; (800e644 <shci_user_evt_proc+0x90>)
 800e5bc:	f000 fd6e 	bl	800f09c <LST_is_empty>
 800e5c0:	4603      	mov	r3, r0
 800e5c2:	2b00      	cmp	r3, #0
 800e5c4:	d12b      	bne.n	800e61e <shci_user_evt_proc+0x6a>
 800e5c6:	4b20      	ldr	r3, [pc, #128]	; (800e648 <shci_user_evt_proc+0x94>)
 800e5c8:	781b      	ldrb	r3, [r3, #0]
 800e5ca:	2b00      	cmp	r3, #0
 800e5cc:	d027      	beq.n	800e61e <shci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &SHciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 800e5ce:	f107 030c 	add.w	r3, r7, #12
 800e5d2:	4619      	mov	r1, r3
 800e5d4:	481b      	ldr	r0, [pc, #108]	; (800e644 <shci_user_evt_proc+0x90>)
 800e5d6:	f000 fde8 	bl	800f1aa <LST_remove_head>

    if (shciContext.UserEvtRx != NULL)
 800e5da:	4b1c      	ldr	r3, [pc, #112]	; (800e64c <shci_user_evt_proc+0x98>)
 800e5dc:	69db      	ldr	r3, [r3, #28]
 800e5de:	2b00      	cmp	r3, #0
 800e5e0:	d00c      	beq.n	800e5fc <shci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 800e5e2:	68fb      	ldr	r3, [r7, #12]
 800e5e4:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = SHCI_TL_UserEventFlow_Enable;
 800e5e6:	2301      	movs	r3, #1
 800e5e8:	713b      	strb	r3, [r7, #4]
      shciContext.UserEvtRx((void *)&UserEvtRxParam);
 800e5ea:	4b18      	ldr	r3, [pc, #96]	; (800e64c <shci_user_evt_proc+0x98>)
 800e5ec:	69db      	ldr	r3, [r3, #28]
 800e5ee:	1d3a      	adds	r2, r7, #4
 800e5f0:	4610      	mov	r0, r2
 800e5f2:	4798      	blx	r3
      SHCI_TL_UserEventFlow = UserEvtRxParam.status;
 800e5f4:	793a      	ldrb	r2, [r7, #4]
 800e5f6:	4b14      	ldr	r3, [pc, #80]	; (800e648 <shci_user_evt_proc+0x94>)
 800e5f8:	701a      	strb	r2, [r3, #0]
 800e5fa:	e002      	b.n	800e602 <shci_user_evt_proc+0x4e>
    }
    else
    {
      SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 800e5fc:	4b12      	ldr	r3, [pc, #72]	; (800e648 <shci_user_evt_proc+0x94>)
 800e5fe:	2201      	movs	r2, #1
 800e600:	701a      	strb	r2, [r3, #0]
    }

    if(SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable)
 800e602:	4b11      	ldr	r3, [pc, #68]	; (800e648 <shci_user_evt_proc+0x94>)
 800e604:	781b      	ldrb	r3, [r3, #0]
 800e606:	2b00      	cmp	r3, #0
 800e608:	d004      	beq.n	800e614 <shci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 800e60a:	68fb      	ldr	r3, [r7, #12]
 800e60c:	4618      	mov	r0, r3
 800e60e:	f000 fa6d 	bl	800eaec <TL_MM_EvtDone>
 800e612:	e004      	b.n	800e61e <shci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &SHciAsynchEventQueue, (tListNode *)phcievtbuffer );
 800e614:	68fb      	ldr	r3, [r7, #12]
 800e616:	4619      	mov	r1, r3
 800e618:	480a      	ldr	r0, [pc, #40]	; (800e644 <shci_user_evt_proc+0x90>)
 800e61a:	f000 fd5f 	bl	800f0dc <LST_insert_head>
    }
  }

  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 800e61e:	4809      	ldr	r0, [pc, #36]	; (800e644 <shci_user_evt_proc+0x90>)
 800e620:	f000 fd3c 	bl	800f09c <LST_is_empty>
 800e624:	4603      	mov	r3, r0
 800e626:	2b00      	cmp	r3, #0
 800e628:	d107      	bne.n	800e63a <shci_user_evt_proc+0x86>
 800e62a:	4b07      	ldr	r3, [pc, #28]	; (800e648 <shci_user_evt_proc+0x94>)
 800e62c:	781b      	ldrb	r3, [r3, #0]
 800e62e:	2b00      	cmp	r3, #0
 800e630:	d003      	beq.n	800e63a <shci_user_evt_proc+0x86>
  {
    shci_notify_asynch_evt((void*) &SHciAsynchEventQueue);
 800e632:	4804      	ldr	r0, [pc, #16]	; (800e644 <shci_user_evt_proc+0x90>)
 800e634:	f7f3 fcbc 	bl	8001fb0 <shci_notify_asynch_evt>
  }


  return;
 800e638:	bf00      	nop
 800e63a:	bf00      	nop
}
 800e63c:	3710      	adds	r7, #16
 800e63e:	46bd      	mov	sp, r7
 800e640:	bd80      	pop	{r7, pc}
 800e642:	bf00      	nop
 800e644:	2000035c 	.word	0x2000035c
 800e648:	2000036c 	.word	0x2000036c
 800e64c:	200003d4 	.word	0x200003d4

0800e650 <shci_send>:

  return;
}

void shci_send( uint16_t cmd_code, uint8_t len_cmd_payload, uint8_t * p_cmd_payload, TL_EvtPacket_t * p_rsp )
{
 800e650:	b580      	push	{r7, lr}
 800e652:	b084      	sub	sp, #16
 800e654:	af00      	add	r7, sp, #0
 800e656:	60ba      	str	r2, [r7, #8]
 800e658:	607b      	str	r3, [r7, #4]
 800e65a:	4603      	mov	r3, r0
 800e65c:	81fb      	strh	r3, [r7, #14]
 800e65e:	460b      	mov	r3, r1
 800e660:	737b      	strb	r3, [r7, #13]
  Cmd_SetStatus(SHCI_TL_CmdBusy);
 800e662:	2000      	movs	r0, #0
 800e664:	f000 f864 	bl	800e730 <Cmd_SetStatus>

  pCmdBuffer->cmdserial.cmd.cmdcode = cmd_code;
 800e668:	4b16      	ldr	r3, [pc, #88]	; (800e6c4 <shci_send+0x74>)
 800e66a:	681b      	ldr	r3, [r3, #0]
 800e66c:	89fa      	ldrh	r2, [r7, #14]
 800e66e:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = len_cmd_payload;
 800e672:	4b14      	ldr	r3, [pc, #80]	; (800e6c4 <shci_send+0x74>)
 800e674:	681b      	ldr	r3, [r3, #0]
 800e676:	7b7a      	ldrb	r2, [r7, #13]
 800e678:	72da      	strb	r2, [r3, #11]

  memcpy(pCmdBuffer->cmdserial.cmd.payload, p_cmd_payload, len_cmd_payload );
 800e67a:	4b12      	ldr	r3, [pc, #72]	; (800e6c4 <shci_send+0x74>)
 800e67c:	681b      	ldr	r3, [r3, #0]
 800e67e:	330c      	adds	r3, #12
 800e680:	7b7a      	ldrb	r2, [r7, #13]
 800e682:	68b9      	ldr	r1, [r7, #8]
 800e684:	4618      	mov	r0, r3
 800e686:	f005 fbf9 	bl	8013e7c <memcpy>

  shciContext.io.Send(0,0);
 800e68a:	4b0f      	ldr	r3, [pc, #60]	; (800e6c8 <shci_send+0x78>)
 800e68c:	691b      	ldr	r3, [r3, #16]
 800e68e:	2100      	movs	r1, #0
 800e690:	2000      	movs	r0, #0
 800e692:	4798      	blx	r3

  shci_cmd_resp_wait(SHCI_TL_DEFAULT_TIMEOUT);
 800e694:	f248 00e8 	movw	r0, #33000	; 0x80e8
 800e698:	f7f3 fcaa 	bl	8001ff0 <shci_cmd_resp_wait>

  /**
   * The command complete of a system command does not have the header
   * It starts immediately with the evtserial field
   */
  memcpy( &(p_rsp->evtserial), pCmdBuffer, ((TL_EvtSerial_t*)pCmdBuffer)->evt.plen + TL_EVT_HDR_SIZE );
 800e69c:	687b      	ldr	r3, [r7, #4]
 800e69e:	f103 0008 	add.w	r0, r3, #8
 800e6a2:	4b08      	ldr	r3, [pc, #32]	; (800e6c4 <shci_send+0x74>)
 800e6a4:	6819      	ldr	r1, [r3, #0]
 800e6a6:	4b07      	ldr	r3, [pc, #28]	; (800e6c4 <shci_send+0x74>)
 800e6a8:	681b      	ldr	r3, [r3, #0]
 800e6aa:	789b      	ldrb	r3, [r3, #2]
 800e6ac:	3303      	adds	r3, #3
 800e6ae:	461a      	mov	r2, r3
 800e6b0:	f005 fbe4 	bl	8013e7c <memcpy>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 800e6b4:	2001      	movs	r0, #1
 800e6b6:	f000 f83b 	bl	800e730 <Cmd_SetStatus>

  return;
 800e6ba:	bf00      	nop
}
 800e6bc:	3710      	adds	r7, #16
 800e6be:	46bd      	mov	sp, r7
 800e6c0:	bd80      	pop	{r7, pc}
 800e6c2:	bf00      	nop
 800e6c4:	20000368 	.word	0x20000368
 800e6c8:	200003d4 	.word	0x200003d4

0800e6cc <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 800e6cc:	b580      	push	{r7, lr}
 800e6ce:	b086      	sub	sp, #24
 800e6d0:	af00      	add	r7, sp, #0
 800e6d2:	6078      	str	r0, [r7, #4]
  TL_SYS_InitConf_t Conf;

  pCmdBuffer = p_cmdbuffer;
 800e6d4:	4a10      	ldr	r2, [pc, #64]	; (800e718 <TlInit+0x4c>)
 800e6d6:	687b      	ldr	r3, [r7, #4]
 800e6d8:	6013      	str	r3, [r2, #0]

  LST_init_head (&SHciAsynchEventQueue);
 800e6da:	4810      	ldr	r0, [pc, #64]	; (800e71c <TlInit+0x50>)
 800e6dc:	f000 fcce 	bl	800f07c <LST_init_head>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 800e6e0:	2001      	movs	r0, #1
 800e6e2:	f000 f825 	bl	800e730 <Cmd_SetStatus>

  SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 800e6e6:	4b0e      	ldr	r3, [pc, #56]	; (800e720 <TlInit+0x54>)
 800e6e8:	2201      	movs	r2, #1
 800e6ea:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (shciContext.io.Init)
 800e6ec:	4b0d      	ldr	r3, [pc, #52]	; (800e724 <TlInit+0x58>)
 800e6ee:	681b      	ldr	r3, [r3, #0]
 800e6f0:	2b00      	cmp	r3, #0
 800e6f2:	d00c      	beq.n	800e70e <TlInit+0x42>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 800e6f4:	687b      	ldr	r3, [r7, #4]
 800e6f6:	617b      	str	r3, [r7, #20]
    Conf.IoBusCallBackCmdEvt = TlCmdEvtReceived;
 800e6f8:	4b0b      	ldr	r3, [pc, #44]	; (800e728 <TlInit+0x5c>)
 800e6fa:	60fb      	str	r3, [r7, #12]
    Conf.IoBusCallBackUserEvt = TlUserEvtReceived;
 800e6fc:	4b0b      	ldr	r3, [pc, #44]	; (800e72c <TlInit+0x60>)
 800e6fe:	613b      	str	r3, [r7, #16]
    shciContext.io.Init(&Conf);
 800e700:	4b08      	ldr	r3, [pc, #32]	; (800e724 <TlInit+0x58>)
 800e702:	681b      	ldr	r3, [r3, #0]
 800e704:	f107 020c 	add.w	r2, r7, #12
 800e708:	4610      	mov	r0, r2
 800e70a:	4798      	blx	r3
  }

  return;
 800e70c:	bf00      	nop
 800e70e:	bf00      	nop
}
 800e710:	3718      	adds	r7, #24
 800e712:	46bd      	mov	sp, r7
 800e714:	bd80      	pop	{r7, pc}
 800e716:	bf00      	nop
 800e718:	20000368 	.word	0x20000368
 800e71c:	2000035c 	.word	0x2000035c
 800e720:	2000036c 	.word	0x2000036c
 800e724:	200003d4 	.word	0x200003d4
 800e728:	0800e781 	.word	0x0800e781
 800e72c:	0800e799 	.word	0x0800e799

0800e730 <Cmd_SetStatus>:

static void Cmd_SetStatus(SHCI_TL_CmdStatus_t shcicmdstatus)
{
 800e730:	b580      	push	{r7, lr}
 800e732:	b082      	sub	sp, #8
 800e734:	af00      	add	r7, sp, #0
 800e736:	4603      	mov	r3, r0
 800e738:	71fb      	strb	r3, [r7, #7]
  if(shcicmdstatus == SHCI_TL_CmdBusy)
 800e73a:	79fb      	ldrb	r3, [r7, #7]
 800e73c:	2b00      	cmp	r3, #0
 800e73e:	d10b      	bne.n	800e758 <Cmd_SetStatus+0x28>
  {
    if(StatusNotCallBackFunction != 0)
 800e740:	4b0d      	ldr	r3, [pc, #52]	; (800e778 <Cmd_SetStatus+0x48>)
 800e742:	681b      	ldr	r3, [r3, #0]
 800e744:	2b00      	cmp	r3, #0
 800e746:	d003      	beq.n	800e750 <Cmd_SetStatus+0x20>
    {
      StatusNotCallBackFunction( SHCI_TL_CmdBusy );
 800e748:	4b0b      	ldr	r3, [pc, #44]	; (800e778 <Cmd_SetStatus+0x48>)
 800e74a:	681b      	ldr	r3, [r3, #0]
 800e74c:	2000      	movs	r0, #0
 800e74e:	4798      	blx	r3
    }
    SHCICmdStatus = SHCI_TL_CmdBusy;
 800e750:	4b0a      	ldr	r3, [pc, #40]	; (800e77c <Cmd_SetStatus+0x4c>)
 800e752:	2200      	movs	r2, #0
 800e754:	701a      	strb	r2, [r3, #0]
    {
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
    }
  }

  return;
 800e756:	e00b      	b.n	800e770 <Cmd_SetStatus+0x40>
    SHCICmdStatus = SHCI_TL_CmdAvailable;
 800e758:	4b08      	ldr	r3, [pc, #32]	; (800e77c <Cmd_SetStatus+0x4c>)
 800e75a:	2201      	movs	r2, #1
 800e75c:	701a      	strb	r2, [r3, #0]
    if(StatusNotCallBackFunction != 0)
 800e75e:	4b06      	ldr	r3, [pc, #24]	; (800e778 <Cmd_SetStatus+0x48>)
 800e760:	681b      	ldr	r3, [r3, #0]
 800e762:	2b00      	cmp	r3, #0
 800e764:	d004      	beq.n	800e770 <Cmd_SetStatus+0x40>
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
 800e766:	4b04      	ldr	r3, [pc, #16]	; (800e778 <Cmd_SetStatus+0x48>)
 800e768:	681b      	ldr	r3, [r3, #0]
 800e76a:	2001      	movs	r0, #1
 800e76c:	4798      	blx	r3
  return;
 800e76e:	bf00      	nop
 800e770:	bf00      	nop
}
 800e772:	3708      	adds	r7, #8
 800e774:	46bd      	mov	sp, r7
 800e776:	bd80      	pop	{r7, pc}
 800e778:	200003f4 	.word	0x200003f4
 800e77c:	20000364 	.word	0x20000364

0800e780 <TlCmdEvtReceived>:

static void TlCmdEvtReceived(TL_EvtPacket_t *shcievt)
{
 800e780:	b580      	push	{r7, lr}
 800e782:	b082      	sub	sp, #8
 800e784:	af00      	add	r7, sp, #0
 800e786:	6078      	str	r0, [r7, #4]
  (void)(shcievt);
  shci_cmd_resp_release(0); /**< Notify the application the Cmd response has been received */
 800e788:	2000      	movs	r0, #0
 800e78a:	f7f3 fc21 	bl	8001fd0 <shci_cmd_resp_release>

  return;
 800e78e:	bf00      	nop
}
 800e790:	3708      	adds	r7, #8
 800e792:	46bd      	mov	sp, r7
 800e794:	bd80      	pop	{r7, pc}
	...

0800e798 <TlUserEvtReceived>:

static void TlUserEvtReceived(TL_EvtPacket_t *shcievt)
{
 800e798:	b580      	push	{r7, lr}
 800e79a:	b082      	sub	sp, #8
 800e79c:	af00      	add	r7, sp, #0
 800e79e:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&SHciAsynchEventQueue, (tListNode *)shcievt);
 800e7a0:	6879      	ldr	r1, [r7, #4]
 800e7a2:	4805      	ldr	r0, [pc, #20]	; (800e7b8 <TlUserEvtReceived+0x20>)
 800e7a4:	f000 fcbe 	bl	800f124 <LST_insert_tail>
  shci_notify_asynch_evt((void*) &SHciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 800e7a8:	4803      	ldr	r0, [pc, #12]	; (800e7b8 <TlUserEvtReceived+0x20>)
 800e7aa:	f7f3 fc01 	bl	8001fb0 <shci_notify_asynch_evt>

  return;
 800e7ae:	bf00      	nop
}
 800e7b0:	3708      	adds	r7, #8
 800e7b2:	46bd      	mov	sp, r7
 800e7b4:	bd80      	pop	{r7, pc}
 800e7b6:	bf00      	nop
 800e7b8:	2000035c 	.word	0x2000035c

0800e7bc <shci_register_io_bus>:
#include "shci_tl.h"
#include "tl.h"


void shci_register_io_bus(tSHciIO* fops)
{
 800e7bc:	b480      	push	{r7}
 800e7be:	b083      	sub	sp, #12
 800e7c0:	af00      	add	r7, sp, #0
 800e7c2:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_SYS_Init;
 800e7c4:	687b      	ldr	r3, [r7, #4]
 800e7c6:	4a05      	ldr	r2, [pc, #20]	; (800e7dc <shci_register_io_bus+0x20>)
 800e7c8:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_SYS_SendCmd;
 800e7ca:	687b      	ldr	r3, [r7, #4]
 800e7cc:	4a04      	ldr	r2, [pc, #16]	; (800e7e0 <shci_register_io_bus+0x24>)
 800e7ce:	611a      	str	r2, [r3, #16]

  return;
 800e7d0:	bf00      	nop
}
 800e7d2:	370c      	adds	r7, #12
 800e7d4:	46bd      	mov	sp, r7
 800e7d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7da:	4770      	bx	lr
 800e7dc:	0800e979 	.word	0x0800e979
 800e7e0:	0800e9cd 	.word	0x0800e9cd

0800e7e4 <TL_Enable>:

/******************************************************************************
 * GENERAL
 ******************************************************************************/
void TL_Enable( void )
{
 800e7e4:	b580      	push	{r7, lr}
 800e7e6:	af00      	add	r7, sp, #0
  HW_IPCC_Enable();
 800e7e8:	f7f3 f8b6 	bl	8001958 <HW_IPCC_Enable>

  return;
 800e7ec:	bf00      	nop
}
 800e7ee:	bd80      	pop	{r7, pc}

0800e7f0 <TL_Init>:


void TL_Init( void )
{
 800e7f0:	b580      	push	{r7, lr}
 800e7f2:	af00      	add	r7, sp, #0
  TL_RefTable.p_device_info_table = &TL_DeviceInfoTable;
 800e7f4:	4b10      	ldr	r3, [pc, #64]	; (800e838 <TL_Init+0x48>)
 800e7f6:	4a11      	ldr	r2, [pc, #68]	; (800e83c <TL_Init+0x4c>)
 800e7f8:	601a      	str	r2, [r3, #0]
  TL_RefTable.p_ble_table = &TL_BleTable;
 800e7fa:	4b0f      	ldr	r3, [pc, #60]	; (800e838 <TL_Init+0x48>)
 800e7fc:	4a10      	ldr	r2, [pc, #64]	; (800e840 <TL_Init+0x50>)
 800e7fe:	605a      	str	r2, [r3, #4]
  TL_RefTable.p_thread_table = &TL_ThreadTable;
 800e800:	4b0d      	ldr	r3, [pc, #52]	; (800e838 <TL_Init+0x48>)
 800e802:	4a10      	ldr	r2, [pc, #64]	; (800e844 <TL_Init+0x54>)
 800e804:	609a      	str	r2, [r3, #8]
  TL_RefTable.p_lld_tests_table = &TL_LldTestsTable;
 800e806:	4b0c      	ldr	r3, [pc, #48]	; (800e838 <TL_Init+0x48>)
 800e808:	4a0f      	ldr	r2, [pc, #60]	; (800e848 <TL_Init+0x58>)
 800e80a:	621a      	str	r2, [r3, #32]
  TL_RefTable.p_lld_ble_table = &TL_LldBleTable;
 800e80c:	4b0a      	ldr	r3, [pc, #40]	; (800e838 <TL_Init+0x48>)
 800e80e:	4a0f      	ldr	r2, [pc, #60]	; (800e84c <TL_Init+0x5c>)
 800e810:	625a      	str	r2, [r3, #36]	; 0x24
  TL_RefTable.p_sys_table = &TL_SysTable;
 800e812:	4b09      	ldr	r3, [pc, #36]	; (800e838 <TL_Init+0x48>)
 800e814:	4a0e      	ldr	r2, [pc, #56]	; (800e850 <TL_Init+0x60>)
 800e816:	60da      	str	r2, [r3, #12]
  TL_RefTable.p_mem_manager_table = &TL_MemManagerTable;
 800e818:	4b07      	ldr	r3, [pc, #28]	; (800e838 <TL_Init+0x48>)
 800e81a:	4a0e      	ldr	r2, [pc, #56]	; (800e854 <TL_Init+0x64>)
 800e81c:	611a      	str	r2, [r3, #16]
  TL_RefTable.p_traces_table = &TL_TracesTable;
 800e81e:	4b06      	ldr	r3, [pc, #24]	; (800e838 <TL_Init+0x48>)
 800e820:	4a0d      	ldr	r2, [pc, #52]	; (800e858 <TL_Init+0x68>)
 800e822:	615a      	str	r2, [r3, #20]
  TL_RefTable.p_mac_802_15_4_table = &TL_Mac_802_15_4_Table;
 800e824:	4b04      	ldr	r3, [pc, #16]	; (800e838 <TL_Init+0x48>)
 800e826:	4a0d      	ldr	r2, [pc, #52]	; (800e85c <TL_Init+0x6c>)
 800e828:	619a      	str	r2, [r3, #24]
  TL_RefTable.p_zigbee_table = &TL_Zigbee_Table;
 800e82a:	4b03      	ldr	r3, [pc, #12]	; (800e838 <TL_Init+0x48>)
 800e82c:	4a0c      	ldr	r2, [pc, #48]	; (800e860 <TL_Init+0x70>)
 800e82e:	61da      	str	r2, [r3, #28]
  HW_IPCC_Init();
 800e830:	f7f3 f8a6 	bl	8001980 <HW_IPCC_Init>

  return;
 800e834:	bf00      	nop
}
 800e836:	bd80      	pop	{r7, pc}
 800e838:	20030000 	.word	0x20030000
 800e83c:	20030134 	.word	0x20030134
 800e840:	20030154 	.word	0x20030154
 800e844:	20030164 	.word	0x20030164
 800e848:	20030170 	.word	0x20030170
 800e84c:	20030178 	.word	0x20030178
 800e850:	20030180 	.word	0x20030180
 800e854:	20030188 	.word	0x20030188
 800e858:	200301a4 	.word	0x200301a4
 800e85c:	200301a8 	.word	0x200301a8
 800e860:	200301b4 	.word	0x200301b4

0800e864 <TL_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
int32_t TL_BLE_Init( void* pConf )
{
 800e864:	b580      	push	{r7, lr}
 800e866:	b084      	sub	sp, #16
 800e868:	af00      	add	r7, sp, #0
 800e86a:	6078      	str	r0, [r7, #4]
  MB_BleTable_t  * p_bletable;

  TL_BLE_InitConf_t *pInitHciConf = (TL_BLE_InitConf_t *) pConf;
 800e86c:	687b      	ldr	r3, [r7, #4]
 800e86e:	60fb      	str	r3, [r7, #12]

  LST_init_head (&EvtQueue);
 800e870:	4811      	ldr	r0, [pc, #68]	; (800e8b8 <TL_BLE_Init+0x54>)
 800e872:	f000 fc03 	bl	800f07c <LST_init_head>

  p_bletable = TL_RefTable.p_ble_table;
 800e876:	4b11      	ldr	r3, [pc, #68]	; (800e8bc <TL_BLE_Init+0x58>)
 800e878:	685b      	ldr	r3, [r3, #4]
 800e87a:	60bb      	str	r3, [r7, #8]

  p_bletable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 800e87c:	68fb      	ldr	r3, [r7, #12]
 800e87e:	689a      	ldr	r2, [r3, #8]
 800e880:	68bb      	ldr	r3, [r7, #8]
 800e882:	601a      	str	r2, [r3, #0]
  p_bletable->phci_acl_data_buffer = pInitHciConf->p_AclDataBuffer;
 800e884:	68fb      	ldr	r3, [r7, #12]
 800e886:	68da      	ldr	r2, [r3, #12]
 800e888:	68bb      	ldr	r3, [r7, #8]
 800e88a:	60da      	str	r2, [r3, #12]
  p_bletable->pcs_buffer  = (uint8_t*)CsBuffer;
 800e88c:	68bb      	ldr	r3, [r7, #8]
 800e88e:	4a0c      	ldr	r2, [pc, #48]	; (800e8c0 <TL_BLE_Init+0x5c>)
 800e890:	605a      	str	r2, [r3, #4]
  p_bletable->pevt_queue  = (uint8_t*)&EvtQueue;
 800e892:	68bb      	ldr	r3, [r7, #8]
 800e894:	4a08      	ldr	r2, [pc, #32]	; (800e8b8 <TL_BLE_Init+0x54>)
 800e896:	609a      	str	r2, [r3, #8]

  HW_IPCC_BLE_Init();
 800e898:	f7f3 f888 	bl	80019ac <HW_IPCC_BLE_Init>

  BLE_IoBusEvtCallBackFunction = pInitHciConf->IoBusEvtCallBack;
 800e89c:	68fb      	ldr	r3, [r7, #12]
 800e89e:	681b      	ldr	r3, [r3, #0]
 800e8a0:	4a08      	ldr	r2, [pc, #32]	; (800e8c4 <TL_BLE_Init+0x60>)
 800e8a2:	6013      	str	r3, [r2, #0]
  BLE_IoBusAclDataTxAck = pInitHciConf->IoBusAclDataTxAck;
 800e8a4:	68fb      	ldr	r3, [r7, #12]
 800e8a6:	685b      	ldr	r3, [r3, #4]
 800e8a8:	4a07      	ldr	r2, [pc, #28]	; (800e8c8 <TL_BLE_Init+0x64>)
 800e8aa:	6013      	str	r3, [r2, #0]

  return 0;
 800e8ac:	2300      	movs	r3, #0
}
 800e8ae:	4618      	mov	r0, r3
 800e8b0:	3710      	adds	r7, #16
 800e8b2:	46bd      	mov	sp, r7
 800e8b4:	bd80      	pop	{r7, pc}
 800e8b6:	bf00      	nop
 800e8b8:	200301d0 	.word	0x200301d0
 800e8bc:	20030000 	.word	0x20030000
 800e8c0:	20030a48 	.word	0x20030a48
 800e8c4:	20000400 	.word	0x20000400
 800e8c8:	20000404 	.word	0x20000404

0800e8cc <TL_BLE_SendCmd>:

int32_t TL_BLE_SendCmd( uint8_t* buffer, uint16_t size )
{
 800e8cc:	b580      	push	{r7, lr}
 800e8ce:	b082      	sub	sp, #8
 800e8d0:	af00      	add	r7, sp, #0
 800e8d2:	6078      	str	r0, [r7, #4]
 800e8d4:	460b      	mov	r3, r1
 800e8d6:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t*)(TL_RefTable.p_ble_table->pcmd_buffer))->cmdserial.type = TL_BLECMD_PKT_TYPE;
 800e8d8:	4b09      	ldr	r3, [pc, #36]	; (800e900 <TL_BLE_SendCmd+0x34>)
 800e8da:	685b      	ldr	r3, [r3, #4]
 800e8dc:	681b      	ldr	r3, [r3, #0]
 800e8de:	2201      	movs	r2, #1
 800e8e0:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_BLE_CMD, TL_RefTable.p_ble_table->pcmd_buffer);
 800e8e2:	4b07      	ldr	r3, [pc, #28]	; (800e900 <TL_BLE_SendCmd+0x34>)
 800e8e4:	685b      	ldr	r3, [r3, #4]
 800e8e6:	681b      	ldr	r3, [r3, #0]
 800e8e8:	4619      	mov	r1, r3
 800e8ea:	2001      	movs	r0, #1
 800e8ec:	f000 f96c 	bl	800ebc8 <OutputDbgTrace>

  HW_IPCC_BLE_SendCmd();
 800e8f0:	f7f3 f866 	bl	80019c0 <HW_IPCC_BLE_SendCmd>

  return 0;
 800e8f4:	2300      	movs	r3, #0
}
 800e8f6:	4618      	mov	r0, r3
 800e8f8:	3708      	adds	r7, #8
 800e8fa:	46bd      	mov	sp, r7
 800e8fc:	bd80      	pop	{r7, pc}
 800e8fe:	bf00      	nop
 800e900:	20030000 	.word	0x20030000

0800e904 <HW_IPCC_BLE_RxEvtNot>:

void HW_IPCC_BLE_RxEvtNot(void)
{
 800e904:	b580      	push	{r7, lr}
 800e906:	b082      	sub	sp, #8
 800e908:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&EvtQueue) == FALSE)
 800e90a:	e01c      	b.n	800e946 <HW_IPCC_BLE_RxEvtNot+0x42>
  {
    LST_remove_head (&EvtQueue, (tListNode **)&phcievt);
 800e90c:	1d3b      	adds	r3, r7, #4
 800e90e:	4619      	mov	r1, r3
 800e910:	4812      	ldr	r0, [pc, #72]	; (800e95c <HW_IPCC_BLE_RxEvtNot+0x58>)
 800e912:	f000 fc4a 	bl	800f1aa <LST_remove_head>

    if ( ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 800e916:	687b      	ldr	r3, [r7, #4]
 800e918:	7a5b      	ldrb	r3, [r3, #9]
 800e91a:	2b0f      	cmp	r3, #15
 800e91c:	d003      	beq.n	800e926 <HW_IPCC_BLE_RxEvtNot+0x22>
 800e91e:	687b      	ldr	r3, [r7, #4]
 800e920:	7a5b      	ldrb	r3, [r3, #9]
 800e922:	2b0e      	cmp	r3, #14
 800e924:	d105      	bne.n	800e932 <HW_IPCC_BLE_RxEvtNot+0x2e>
    {
      OutputDbgTrace(TL_MB_BLE_CMD_RSP, (uint8_t*)phcievt);
 800e926:	687b      	ldr	r3, [r7, #4]
 800e928:	4619      	mov	r1, r3
 800e92a:	2002      	movs	r0, #2
 800e92c:	f000 f94c 	bl	800ebc8 <OutputDbgTrace>
 800e930:	e004      	b.n	800e93c <HW_IPCC_BLE_RxEvtNot+0x38>
    }
    else
    {
      OutputDbgTrace(TL_MB_BLE_ASYNCH_EVT, (uint8_t*)phcievt);
 800e932:	687b      	ldr	r3, [r7, #4]
 800e934:	4619      	mov	r1, r3
 800e936:	2003      	movs	r0, #3
 800e938:	f000 f946 	bl	800ebc8 <OutputDbgTrace>
    }

    BLE_IoBusEvtCallBackFunction(phcievt);
 800e93c:	4b08      	ldr	r3, [pc, #32]	; (800e960 <HW_IPCC_BLE_RxEvtNot+0x5c>)
 800e93e:	681b      	ldr	r3, [r3, #0]
 800e940:	687a      	ldr	r2, [r7, #4]
 800e942:	4610      	mov	r0, r2
 800e944:	4798      	blx	r3
  while(LST_is_empty(&EvtQueue) == FALSE)
 800e946:	4805      	ldr	r0, [pc, #20]	; (800e95c <HW_IPCC_BLE_RxEvtNot+0x58>)
 800e948:	f000 fba8 	bl	800f09c <LST_is_empty>
 800e94c:	4603      	mov	r3, r0
 800e94e:	2b00      	cmp	r3, #0
 800e950:	d0dc      	beq.n	800e90c <HW_IPCC_BLE_RxEvtNot+0x8>
  }

  return;
 800e952:	bf00      	nop
}
 800e954:	3708      	adds	r7, #8
 800e956:	46bd      	mov	sp, r7
 800e958:	bd80      	pop	{r7, pc}
 800e95a:	bf00      	nop
 800e95c:	200301d0 	.word	0x200301d0
 800e960:	20000400 	.word	0x20000400

0800e964 <HW_IPCC_BLE_AclDataAckNot>:

  return 0;
}

void HW_IPCC_BLE_AclDataAckNot(void)
{
 800e964:	b580      	push	{r7, lr}
 800e966:	af00      	add	r7, sp, #0
  BLE_IoBusAclDataTxAck( );
 800e968:	4b02      	ldr	r3, [pc, #8]	; (800e974 <HW_IPCC_BLE_AclDataAckNot+0x10>)
 800e96a:	681b      	ldr	r3, [r3, #0]
 800e96c:	4798      	blx	r3

  return;
 800e96e:	bf00      	nop
}
 800e970:	bd80      	pop	{r7, pc}
 800e972:	bf00      	nop
 800e974:	20000404 	.word	0x20000404

0800e978 <TL_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
int32_t TL_SYS_Init( void* pConf  )
{
 800e978:	b580      	push	{r7, lr}
 800e97a:	b084      	sub	sp, #16
 800e97c:	af00      	add	r7, sp, #0
 800e97e:	6078      	str	r0, [r7, #4]
  MB_SysTable_t  * p_systable;

  TL_SYS_InitConf_t *pInitHciConf = (TL_SYS_InitConf_t *) pConf;
 800e980:	687b      	ldr	r3, [r7, #4]
 800e982:	60fb      	str	r3, [r7, #12]

  LST_init_head (&SystemEvtQueue);
 800e984:	480d      	ldr	r0, [pc, #52]	; (800e9bc <TL_SYS_Init+0x44>)
 800e986:	f000 fb79 	bl	800f07c <LST_init_head>
  p_systable = TL_RefTable.p_sys_table;
 800e98a:	4b0d      	ldr	r3, [pc, #52]	; (800e9c0 <TL_SYS_Init+0x48>)
 800e98c:	68db      	ldr	r3, [r3, #12]
 800e98e:	60bb      	str	r3, [r7, #8]
  p_systable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 800e990:	68fb      	ldr	r3, [r7, #12]
 800e992:	689a      	ldr	r2, [r3, #8]
 800e994:	68bb      	ldr	r3, [r7, #8]
 800e996:	601a      	str	r2, [r3, #0]
  p_systable->sys_queue = (uint8_t*)&SystemEvtQueue;
 800e998:	68bb      	ldr	r3, [r7, #8]
 800e99a:	4a08      	ldr	r2, [pc, #32]	; (800e9bc <TL_SYS_Init+0x44>)
 800e99c:	605a      	str	r2, [r3, #4]

  HW_IPCC_SYS_Init();
 800e99e:	f7f3 f831 	bl	8001a04 <HW_IPCC_SYS_Init>

  SYS_CMD_IoBusCallBackFunction = pInitHciConf->IoBusCallBackCmdEvt;
 800e9a2:	68fb      	ldr	r3, [r7, #12]
 800e9a4:	681b      	ldr	r3, [r3, #0]
 800e9a6:	4a07      	ldr	r2, [pc, #28]	; (800e9c4 <TL_SYS_Init+0x4c>)
 800e9a8:	6013      	str	r3, [r2, #0]
  SYS_EVT_IoBusCallBackFunction = pInitHciConf->IoBusCallBackUserEvt;
 800e9aa:	68fb      	ldr	r3, [r7, #12]
 800e9ac:	685b      	ldr	r3, [r3, #4]
 800e9ae:	4a06      	ldr	r2, [pc, #24]	; (800e9c8 <TL_SYS_Init+0x50>)
 800e9b0:	6013      	str	r3, [r2, #0]

  return 0;
 800e9b2:	2300      	movs	r3, #0
}
 800e9b4:	4618      	mov	r0, r3
 800e9b6:	3710      	adds	r7, #16
 800e9b8:	46bd      	mov	sp, r7
 800e9ba:	bd80      	pop	{r7, pc}
 800e9bc:	200301d8 	.word	0x200301d8
 800e9c0:	20030000 	.word	0x20030000
 800e9c4:	20000408 	.word	0x20000408
 800e9c8:	2000040c 	.word	0x2000040c

0800e9cc <TL_SYS_SendCmd>:

int32_t TL_SYS_SendCmd( uint8_t* buffer, uint16_t size )
{
 800e9cc:	b580      	push	{r7, lr}
 800e9ce:	b082      	sub	sp, #8
 800e9d0:	af00      	add	r7, sp, #0
 800e9d2:	6078      	str	r0, [r7, #4]
 800e9d4:	460b      	mov	r3, r1
 800e9d6:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t *)(TL_RefTable.p_sys_table->pcmd_buffer))->cmdserial.type = TL_SYSCMD_PKT_TYPE;
 800e9d8:	4b09      	ldr	r3, [pc, #36]	; (800ea00 <TL_SYS_SendCmd+0x34>)
 800e9da:	68db      	ldr	r3, [r3, #12]
 800e9dc:	681b      	ldr	r3, [r3, #0]
 800e9de:	2210      	movs	r2, #16
 800e9e0:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_SYS_CMD, TL_RefTable.p_sys_table->pcmd_buffer);
 800e9e2:	4b07      	ldr	r3, [pc, #28]	; (800ea00 <TL_SYS_SendCmd+0x34>)
 800e9e4:	68db      	ldr	r3, [r3, #12]
 800e9e6:	681b      	ldr	r3, [r3, #0]
 800e9e8:	4619      	mov	r1, r3
 800e9ea:	2004      	movs	r0, #4
 800e9ec:	f000 f8ec 	bl	800ebc8 <OutputDbgTrace>

  HW_IPCC_SYS_SendCmd();
 800e9f0:	f7f3 f812 	bl	8001a18 <HW_IPCC_SYS_SendCmd>

  return 0;
 800e9f4:	2300      	movs	r3, #0
}
 800e9f6:	4618      	mov	r0, r3
 800e9f8:	3708      	adds	r7, #8
 800e9fa:	46bd      	mov	sp, r7
 800e9fc:	bd80      	pop	{r7, pc}
 800e9fe:	bf00      	nop
 800ea00:	20030000 	.word	0x20030000

0800ea04 <HW_IPCC_SYS_CmdEvtNot>:

void HW_IPCC_SYS_CmdEvtNot(void)
{
 800ea04:	b580      	push	{r7, lr}
 800ea06:	af00      	add	r7, sp, #0
  OutputDbgTrace(TL_MB_SYS_CMD_RSP, (uint8_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 800ea08:	4b07      	ldr	r3, [pc, #28]	; (800ea28 <HW_IPCC_SYS_CmdEvtNot+0x24>)
 800ea0a:	68db      	ldr	r3, [r3, #12]
 800ea0c:	681b      	ldr	r3, [r3, #0]
 800ea0e:	4619      	mov	r1, r3
 800ea10:	2005      	movs	r0, #5
 800ea12:	f000 f8d9 	bl	800ebc8 <OutputDbgTrace>

  SYS_CMD_IoBusCallBackFunction( (TL_EvtPacket_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 800ea16:	4b05      	ldr	r3, [pc, #20]	; (800ea2c <HW_IPCC_SYS_CmdEvtNot+0x28>)
 800ea18:	681b      	ldr	r3, [r3, #0]
 800ea1a:	4a03      	ldr	r2, [pc, #12]	; (800ea28 <HW_IPCC_SYS_CmdEvtNot+0x24>)
 800ea1c:	68d2      	ldr	r2, [r2, #12]
 800ea1e:	6812      	ldr	r2, [r2, #0]
 800ea20:	4610      	mov	r0, r2
 800ea22:	4798      	blx	r3

  return;
 800ea24:	bf00      	nop
}
 800ea26:	bd80      	pop	{r7, pc}
 800ea28:	20030000 	.word	0x20030000
 800ea2c:	20000408 	.word	0x20000408

0800ea30 <HW_IPCC_SYS_EvtNot>:

void HW_IPCC_SYS_EvtNot( void )
{
 800ea30:	b580      	push	{r7, lr}
 800ea32:	b082      	sub	sp, #8
 800ea34:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *p_evt;

  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 800ea36:	e00e      	b.n	800ea56 <HW_IPCC_SYS_EvtNot+0x26>
  {
    LST_remove_head (&SystemEvtQueue, (tListNode **)&p_evt);
 800ea38:	1d3b      	adds	r3, r7, #4
 800ea3a:	4619      	mov	r1, r3
 800ea3c:	480b      	ldr	r0, [pc, #44]	; (800ea6c <HW_IPCC_SYS_EvtNot+0x3c>)
 800ea3e:	f000 fbb4 	bl	800f1aa <LST_remove_head>

    OutputDbgTrace(TL_MB_SYS_ASYNCH_EVT, (uint8_t*)p_evt );
 800ea42:	687b      	ldr	r3, [r7, #4]
 800ea44:	4619      	mov	r1, r3
 800ea46:	2006      	movs	r0, #6
 800ea48:	f000 f8be 	bl	800ebc8 <OutputDbgTrace>

    SYS_EVT_IoBusCallBackFunction( p_evt );
 800ea4c:	4b08      	ldr	r3, [pc, #32]	; (800ea70 <HW_IPCC_SYS_EvtNot+0x40>)
 800ea4e:	681b      	ldr	r3, [r3, #0]
 800ea50:	687a      	ldr	r2, [r7, #4]
 800ea52:	4610      	mov	r0, r2
 800ea54:	4798      	blx	r3
  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 800ea56:	4805      	ldr	r0, [pc, #20]	; (800ea6c <HW_IPCC_SYS_EvtNot+0x3c>)
 800ea58:	f000 fb20 	bl	800f09c <LST_is_empty>
 800ea5c:	4603      	mov	r3, r0
 800ea5e:	2b00      	cmp	r3, #0
 800ea60:	d0ea      	beq.n	800ea38 <HW_IPCC_SYS_EvtNot+0x8>
  }

  return;
 800ea62:	bf00      	nop
}
 800ea64:	3708      	adds	r7, #8
 800ea66:	46bd      	mov	sp, r7
 800ea68:	bd80      	pop	{r7, pc}
 800ea6a:	bf00      	nop
 800ea6c:	200301d8 	.word	0x200301d8
 800ea70:	2000040c 	.word	0x2000040c

0800ea74 <TL_MM_Init>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void TL_MM_Init( TL_MM_Config_t *p_Config )
{
 800ea74:	b580      	push	{r7, lr}
 800ea76:	b082      	sub	sp, #8
 800ea78:	af00      	add	r7, sp, #0
 800ea7a:	6078      	str	r0, [r7, #4]
  static MB_MemManagerTable_t  * p_mem_manager_table;

  LST_init_head (&FreeBufQueue);
 800ea7c:	4817      	ldr	r0, [pc, #92]	; (800eadc <TL_MM_Init+0x68>)
 800ea7e:	f000 fafd 	bl	800f07c <LST_init_head>
  LST_init_head (&LocalFreeBufQueue);
 800ea82:	4817      	ldr	r0, [pc, #92]	; (800eae0 <TL_MM_Init+0x6c>)
 800ea84:	f000 fafa 	bl	800f07c <LST_init_head>

  p_mem_manager_table = TL_RefTable.p_mem_manager_table;
 800ea88:	4b16      	ldr	r3, [pc, #88]	; (800eae4 <TL_MM_Init+0x70>)
 800ea8a:	691b      	ldr	r3, [r3, #16]
 800ea8c:	4a16      	ldr	r2, [pc, #88]	; (800eae8 <TL_MM_Init+0x74>)
 800ea8e:	6013      	str	r3, [r2, #0]

  p_mem_manager_table->blepool = p_Config->p_AsynchEvtPool;
 800ea90:	4b15      	ldr	r3, [pc, #84]	; (800eae8 <TL_MM_Init+0x74>)
 800ea92:	681b      	ldr	r3, [r3, #0]
 800ea94:	687a      	ldr	r2, [r7, #4]
 800ea96:	6892      	ldr	r2, [r2, #8]
 800ea98:	609a      	str	r2, [r3, #8]
  p_mem_manager_table->blepoolsize = p_Config->AsynchEvtPoolSize;
 800ea9a:	4b13      	ldr	r3, [pc, #76]	; (800eae8 <TL_MM_Init+0x74>)
 800ea9c:	681b      	ldr	r3, [r3, #0]
 800ea9e:	687a      	ldr	r2, [r7, #4]
 800eaa0:	68d2      	ldr	r2, [r2, #12]
 800eaa2:	60da      	str	r2, [r3, #12]
  p_mem_manager_table->pevt_free_buffer_queue = (uint8_t*)&FreeBufQueue;
 800eaa4:	4b10      	ldr	r3, [pc, #64]	; (800eae8 <TL_MM_Init+0x74>)
 800eaa6:	681b      	ldr	r3, [r3, #0]
 800eaa8:	4a0c      	ldr	r2, [pc, #48]	; (800eadc <TL_MM_Init+0x68>)
 800eaaa:	611a      	str	r2, [r3, #16]
  p_mem_manager_table->spare_ble_buffer = p_Config->p_BleSpareEvtBuffer;
 800eaac:	4b0e      	ldr	r3, [pc, #56]	; (800eae8 <TL_MM_Init+0x74>)
 800eaae:	681b      	ldr	r3, [r3, #0]
 800eab0:	687a      	ldr	r2, [r7, #4]
 800eab2:	6812      	ldr	r2, [r2, #0]
 800eab4:	601a      	str	r2, [r3, #0]
  p_mem_manager_table->spare_sys_buffer = p_Config->p_SystemSpareEvtBuffer;
 800eab6:	4b0c      	ldr	r3, [pc, #48]	; (800eae8 <TL_MM_Init+0x74>)
 800eab8:	681b      	ldr	r3, [r3, #0]
 800eaba:	687a      	ldr	r2, [r7, #4]
 800eabc:	6852      	ldr	r2, [r2, #4]
 800eabe:	605a      	str	r2, [r3, #4]
  p_mem_manager_table->traces_evt_pool = p_Config->p_TracesEvtPool;
 800eac0:	4b09      	ldr	r3, [pc, #36]	; (800eae8 <TL_MM_Init+0x74>)
 800eac2:	681b      	ldr	r3, [r3, #0]
 800eac4:	687a      	ldr	r2, [r7, #4]
 800eac6:	6912      	ldr	r2, [r2, #16]
 800eac8:	615a      	str	r2, [r3, #20]
  p_mem_manager_table->tracespoolsize = p_Config->TracesEvtPoolSize;
 800eaca:	4b07      	ldr	r3, [pc, #28]	; (800eae8 <TL_MM_Init+0x74>)
 800eacc:	681b      	ldr	r3, [r3, #0]
 800eace:	687a      	ldr	r2, [r7, #4]
 800ead0:	6952      	ldr	r2, [r2, #20]
 800ead2:	619a      	str	r2, [r3, #24]

  return;
 800ead4:	bf00      	nop
}
 800ead6:	3708      	adds	r7, #8
 800ead8:	46bd      	mov	sp, r7
 800eada:	bd80      	pop	{r7, pc}
 800eadc:	200301c0 	.word	0x200301c0
 800eae0:	200003f8 	.word	0x200003f8
 800eae4:	20030000 	.word	0x20030000
 800eae8:	20000410 	.word	0x20000410

0800eaec <TL_MM_EvtDone>:

void TL_MM_EvtDone(TL_EvtPacket_t * phcievt)
{
 800eaec:	b580      	push	{r7, lr}
 800eaee:	b082      	sub	sp, #8
 800eaf0:	af00      	add	r7, sp, #0
 800eaf2:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&LocalFreeBufQueue, (tListNode *)phcievt);
 800eaf4:	6879      	ldr	r1, [r7, #4]
 800eaf6:	4807      	ldr	r0, [pc, #28]	; (800eb14 <TL_MM_EvtDone+0x28>)
 800eaf8:	f000 fb14 	bl	800f124 <LST_insert_tail>

  OutputDbgTrace(TL_MB_MM_RELEASE_BUFFER, (uint8_t*)phcievt);
 800eafc:	6879      	ldr	r1, [r7, #4]
 800eafe:	2000      	movs	r0, #0
 800eb00:	f000 f862 	bl	800ebc8 <OutputDbgTrace>

  HW_IPCC_MM_SendFreeBuf( SendFreeBuf );
 800eb04:	4804      	ldr	r0, [pc, #16]	; (800eb18 <TL_MM_EvtDone+0x2c>)
 800eb06:	f7f2 ffad 	bl	8001a64 <HW_IPCC_MM_SendFreeBuf>

  return;
 800eb0a:	bf00      	nop
}
 800eb0c:	3708      	adds	r7, #8
 800eb0e:	46bd      	mov	sp, r7
 800eb10:	bd80      	pop	{r7, pc}
 800eb12:	bf00      	nop
 800eb14:	200003f8 	.word	0x200003f8
 800eb18:	0800eb1d 	.word	0x0800eb1d

0800eb1c <SendFreeBuf>:

static void SendFreeBuf( void )
{
 800eb1c:	b580      	push	{r7, lr}
 800eb1e:	b082      	sub	sp, #8
 800eb20:	af00      	add	r7, sp, #0
  tListNode *p_node;

  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 800eb22:	e00c      	b.n	800eb3e <SendFreeBuf+0x22>
  {
    LST_remove_head( &LocalFreeBufQueue, (tListNode **)&p_node );
 800eb24:	1d3b      	adds	r3, r7, #4
 800eb26:	4619      	mov	r1, r3
 800eb28:	480a      	ldr	r0, [pc, #40]	; (800eb54 <SendFreeBuf+0x38>)
 800eb2a:	f000 fb3e 	bl	800f1aa <LST_remove_head>
    LST_insert_tail( (tListNode*)(TL_RefTable.p_mem_manager_table->pevt_free_buffer_queue), p_node );
 800eb2e:	4b0a      	ldr	r3, [pc, #40]	; (800eb58 <SendFreeBuf+0x3c>)
 800eb30:	691b      	ldr	r3, [r3, #16]
 800eb32:	691b      	ldr	r3, [r3, #16]
 800eb34:	687a      	ldr	r2, [r7, #4]
 800eb36:	4611      	mov	r1, r2
 800eb38:	4618      	mov	r0, r3
 800eb3a:	f000 faf3 	bl	800f124 <LST_insert_tail>
  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 800eb3e:	4805      	ldr	r0, [pc, #20]	; (800eb54 <SendFreeBuf+0x38>)
 800eb40:	f000 faac 	bl	800f09c <LST_is_empty>
 800eb44:	4603      	mov	r3, r0
 800eb46:	2b00      	cmp	r3, #0
 800eb48:	d0ec      	beq.n	800eb24 <SendFreeBuf+0x8>
  }

  return;
 800eb4a:	bf00      	nop
}
 800eb4c:	3708      	adds	r7, #8
 800eb4e:	46bd      	mov	sp, r7
 800eb50:	bd80      	pop	{r7, pc}
 800eb52:	bf00      	nop
 800eb54:	200003f8 	.word	0x200003f8
 800eb58:	20030000 	.word	0x20030000

0800eb5c <TL_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void TL_TRACES_Init( void )
{
 800eb5c:	b580      	push	{r7, lr}
 800eb5e:	af00      	add	r7, sp, #0
  LST_init_head (&TracesEvtQueue);
 800eb60:	4805      	ldr	r0, [pc, #20]	; (800eb78 <TL_TRACES_Init+0x1c>)
 800eb62:	f000 fa8b 	bl	800f07c <LST_init_head>

  TL_RefTable.p_traces_table->traces_queue = (uint8_t*)&TracesEvtQueue;
 800eb66:	4b05      	ldr	r3, [pc, #20]	; (800eb7c <TL_TRACES_Init+0x20>)
 800eb68:	695b      	ldr	r3, [r3, #20]
 800eb6a:	4a03      	ldr	r2, [pc, #12]	; (800eb78 <TL_TRACES_Init+0x1c>)
 800eb6c:	601a      	str	r2, [r3, #0]

  HW_IPCC_TRACES_Init();
 800eb6e:	f7f2 ffaf 	bl	8001ad0 <HW_IPCC_TRACES_Init>

  return;
 800eb72:	bf00      	nop
}
 800eb74:	bd80      	pop	{r7, pc}
 800eb76:	bf00      	nop
 800eb78:	200301c8 	.word	0x200301c8
 800eb7c:	20030000 	.word	0x20030000

0800eb80 <HW_IPCC_TRACES_EvtNot>:

void HW_IPCC_TRACES_EvtNot(void)
{
 800eb80:	b580      	push	{r7, lr}
 800eb82:	b082      	sub	sp, #8
 800eb84:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 800eb86:	e008      	b.n	800eb9a <HW_IPCC_TRACES_EvtNot+0x1a>
  {
    LST_remove_head (&TracesEvtQueue, (tListNode **)&phcievt);
 800eb88:	1d3b      	adds	r3, r7, #4
 800eb8a:	4619      	mov	r1, r3
 800eb8c:	4808      	ldr	r0, [pc, #32]	; (800ebb0 <HW_IPCC_TRACES_EvtNot+0x30>)
 800eb8e:	f000 fb0c 	bl	800f1aa <LST_remove_head>
    TL_TRACES_EvtReceived( phcievt );
 800eb92:	687b      	ldr	r3, [r7, #4]
 800eb94:	4618      	mov	r0, r3
 800eb96:	f000 f80d 	bl	800ebb4 <TL_TRACES_EvtReceived>
  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 800eb9a:	4805      	ldr	r0, [pc, #20]	; (800ebb0 <HW_IPCC_TRACES_EvtNot+0x30>)
 800eb9c:	f000 fa7e 	bl	800f09c <LST_is_empty>
 800eba0:	4603      	mov	r3, r0
 800eba2:	2b00      	cmp	r3, #0
 800eba4:	d0f0      	beq.n	800eb88 <HW_IPCC_TRACES_EvtNot+0x8>
  }

  return;
 800eba6:	bf00      	nop
}
 800eba8:	3708      	adds	r7, #8
 800ebaa:	46bd      	mov	sp, r7
 800ebac:	bd80      	pop	{r7, pc}
 800ebae:	bf00      	nop
 800ebb0:	200301c8 	.word	0x200301c8

0800ebb4 <TL_TRACES_EvtReceived>:

__WEAK void TL_TRACES_EvtReceived( TL_EvtPacket_t * hcievt )
{
 800ebb4:	b480      	push	{r7}
 800ebb6:	b083      	sub	sp, #12
 800ebb8:	af00      	add	r7, sp, #0
 800ebba:	6078      	str	r0, [r7, #4]
  (void)(hcievt);
}
 800ebbc:	bf00      	nop
 800ebbe:	370c      	adds	r7, #12
 800ebc0:	46bd      	mov	sp, r7
 800ebc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebc6:	4770      	bx	lr

0800ebc8 <OutputDbgTrace>:

/******************************************************************************
 * DEBUG INFORMATION
 ******************************************************************************/
static void OutputDbgTrace(TL_MB_PacketType_t packet_type, uint8_t* buffer)
{
 800ebc8:	b480      	push	{r7}
 800ebca:	b085      	sub	sp, #20
 800ebcc:	af00      	add	r7, sp, #0
 800ebce:	4603      	mov	r3, r0
 800ebd0:	6039      	str	r1, [r7, #0]
 800ebd2:	71fb      	strb	r3, [r7, #7]
  TL_EvtPacket_t *p_evt_packet;
  TL_CmdPacket_t *p_cmd_packet;

  switch(packet_type)
 800ebd4:	79fb      	ldrb	r3, [r7, #7]
 800ebd6:	2b06      	cmp	r3, #6
 800ebd8:	d849      	bhi.n	800ec6e <OutputDbgTrace+0xa6>
 800ebda:	a201      	add	r2, pc, #4	; (adr r2, 800ebe0 <OutputDbgTrace+0x18>)
 800ebdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ebe0:	0800ebfd 	.word	0x0800ebfd
 800ebe4:	0800ec1f 	.word	0x0800ec1f
 800ebe8:	0800ec25 	.word	0x0800ec25
 800ebec:	0800ec3f 	.word	0x0800ec3f
 800ebf0:	0800ec4b 	.word	0x0800ec4b
 800ebf4:	0800ec51 	.word	0x0800ec51
 800ebf8:	0800ec63 	.word	0x0800ec63
  {
    case TL_MB_MM_RELEASE_BUFFER:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800ebfc:	683b      	ldr	r3, [r7, #0]
 800ebfe:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 800ec00:	68fb      	ldr	r3, [r7, #12]
 800ec02:	7a5b      	ldrb	r3, [r3, #9]
 800ec04:	2b0f      	cmp	r3, #15
 800ec06:	d004      	beq.n	800ec12 <OutputDbgTrace+0x4a>
 800ec08:	2bff      	cmp	r3, #255	; 0xff
 800ec0a:	d004      	beq.n	800ec16 <OutputDbgTrace+0x4e>
 800ec0c:	2b0e      	cmp	r3, #14
 800ec0e:	d004      	beq.n	800ec1a <OutputDbgTrace+0x52>
          break;

        default:
          TL_MM_DBG_MSG("mm evt released: 0x%02X", p_evt_packet->evtserial.evt.evtcode);
          TL_MM_DBG_MSG(" buffer addr: 0x%08X", p_evt_packet);
          break;
 800ec10:	e004      	b.n	800ec1c <OutputDbgTrace+0x54>
          break;
 800ec12:	bf00      	nop
 800ec14:	e02c      	b.n	800ec70 <OutputDbgTrace+0xa8>
          break;
 800ec16:	bf00      	nop
 800ec18:	e02a      	b.n	800ec70 <OutputDbgTrace+0xa8>
          break;
 800ec1a:	bf00      	nop
      }

      TL_MM_DBG_MSG("\r\n");
      break;
 800ec1c:	e028      	b.n	800ec70 <OutputDbgTrace+0xa8>

    case TL_MB_BLE_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 800ec1e:	683b      	ldr	r3, [r7, #0]
 800ec20:	60bb      	str	r3, [r7, #8]
        TL_HCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 800ec22:	e025      	b.n	800ec70 <OutputDbgTrace+0xa8>

    case TL_MB_BLE_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800ec24:	683b      	ldr	r3, [r7, #0]
 800ec26:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 800ec28:	68fb      	ldr	r3, [r7, #12]
 800ec2a:	7a5b      	ldrb	r3, [r3, #9]
 800ec2c:	2b0e      	cmp	r3, #14
 800ec2e:	d002      	beq.n	800ec36 <OutputDbgTrace+0x6e>
 800ec30:	2b0f      	cmp	r3, #15
 800ec32:	d002      	beq.n	800ec3a <OutputDbgTrace+0x72>
          }
          break;

        default:
          TL_HCI_CMD_DBG_MSG("unknown ble rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 800ec34:	e002      	b.n	800ec3c <OutputDbgTrace+0x74>
          break;
 800ec36:	bf00      	nop
 800ec38:	e01a      	b.n	800ec70 <OutputDbgTrace+0xa8>
          break;
 800ec3a:	bf00      	nop
      }

      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800ec3c:	e018      	b.n	800ec70 <OutputDbgTrace+0xa8>

    case TL_MB_BLE_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800ec3e:	683b      	ldr	r3, [r7, #0]
 800ec40:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 800ec42:	68fb      	ldr	r3, [r7, #12]
 800ec44:	7a5b      	ldrb	r3, [r3, #9]
 800ec46:	2bff      	cmp	r3, #255	; 0xff
      }

      TL_HCI_EVT_DBG_MSG("\r\n");

      TL_HCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800ec48:	e012      	b.n	800ec70 <OutputDbgTrace+0xa8>

    case TL_MB_SYS_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 800ec4a:	683b      	ldr	r3, [r7, #0]
 800ec4c:	60bb      	str	r3, [r7, #8]
        TL_SHCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 800ec4e:	e00f      	b.n	800ec70 <OutputDbgTrace+0xa8>

    case TL_MB_SYS_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800ec50:	683b      	ldr	r3, [r7, #0]
 800ec52:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 800ec54:	68fb      	ldr	r3, [r7, #12]
 800ec56:	7a5b      	ldrb	r3, [r3, #9]
 800ec58:	2b0e      	cmp	r3, #14
 800ec5a:	d000      	beq.n	800ec5e <OutputDbgTrace+0x96>
          }
          break;

        default:
          TL_SHCI_CMD_DBG_MSG("unknown sys rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 800ec5c:	e000      	b.n	800ec60 <OutputDbgTrace+0x98>
          break;
 800ec5e:	bf00      	nop
      }

      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800ec60:	e006      	b.n	800ec70 <OutputDbgTrace+0xa8>

    case  TL_MB_SYS_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800ec62:	683b      	ldr	r3, [r7, #0]
 800ec64:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 800ec66:	68fb      	ldr	r3, [r7, #12]
 800ec68:	7a5b      	ldrb	r3, [r3, #9]
 800ec6a:	2bff      	cmp	r3, #255	; 0xff
      }

      TL_SHCI_EVT_DBG_MSG("\r\n");

      TL_SHCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800ec6c:	e000      	b.n	800ec70 <OutputDbgTrace+0xa8>

    default:
      break;
 800ec6e:	bf00      	nop
  }

  return;
 800ec70:	bf00      	nop
}
 800ec72:	3714      	adds	r7, #20
 800ec74:	46bd      	mov	sp, r7
 800ec76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec7a:	4770      	bx	lr

0800ec7c <PeerToPeer_Event_Handler>:
 * @brief  Event handler
 * @param  Event: Address of the buffer holding the Event
 * @retval Ack: Return whether the Event has been managed or not
 */
static SVCCTL_EvtAckStatus_t PeerToPeer_Event_Handler(void *Event)
{
 800ec7c:	b580      	push	{r7, lr}
 800ec7e:	b08a      	sub	sp, #40	; 0x28
 800ec80:	af00      	add	r7, sp, #0
 800ec82:	6078      	str	r0, [r7, #4]
  hci_event_pckt *event_pckt;
  evt_blue_aci *blue_evt;
  aci_gatt_attribute_modified_event_rp0    * attribute_modified;
  P2PS_STM_App_Notification_evt_t Notification;

  return_value = SVCCTL_EvtNotAck;
 800ec84:	2300      	movs	r3, #0
 800ec86:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  event_pckt = (hci_event_pckt *)(((hci_uart_pckt*)Event)->data);
 800ec8a:	687b      	ldr	r3, [r7, #4]
 800ec8c:	3301      	adds	r3, #1
 800ec8e:	623b      	str	r3, [r7, #32]

  switch(event_pckt->evt)
 800ec90:	6a3b      	ldr	r3, [r7, #32]
 800ec92:	781b      	ldrb	r3, [r3, #0]
 800ec94:	2bff      	cmp	r3, #255	; 0xff
 800ec96:	d000      	beq.n	800ec9a <PeerToPeer_Event_Handler+0x1e>
      }
    }
    break; /* HCI_EVT_VENDOR_SPECIFIC */

    default:
      break;
 800ec98:	e04a      	b.n	800ed30 <PeerToPeer_Event_Handler+0xb4>
      blue_evt = (evt_blue_aci*)event_pckt->data;
 800ec9a:	6a3b      	ldr	r3, [r7, #32]
 800ec9c:	3302      	adds	r3, #2
 800ec9e:	61fb      	str	r3, [r7, #28]
      switch(blue_evt->ecode)
 800eca0:	69fb      	ldr	r3, [r7, #28]
 800eca2:	881b      	ldrh	r3, [r3, #0]
 800eca4:	b29b      	uxth	r3, r3
 800eca6:	461a      	mov	r2, r3
 800eca8:	f640 4301 	movw	r3, #3073	; 0xc01
 800ecac:	429a      	cmp	r2, r3
 800ecae:	d000      	beq.n	800ecb2 <PeerToPeer_Event_Handler+0x36>
          break;
 800ecb0:	e03d      	b.n	800ed2e <PeerToPeer_Event_Handler+0xb2>
          attribute_modified = (aci_gatt_attribute_modified_event_rp0*)blue_evt->data;
 800ecb2:	69fb      	ldr	r3, [r7, #28]
 800ecb4:	3302      	adds	r3, #2
 800ecb6:	61bb      	str	r3, [r7, #24]
            if(attribute_modified->Attr_Handle == (aPeerToPeerContext.P2PNotifyServerToClientCharHdle + 2))
 800ecb8:	69bb      	ldr	r3, [r7, #24]
 800ecba:	885b      	ldrh	r3, [r3, #2]
 800ecbc:	b29b      	uxth	r3, r3
 800ecbe:	461a      	mov	r2, r3
 800ecc0:	4b1e      	ldr	r3, [pc, #120]	; (800ed3c <PeerToPeer_Event_Handler+0xc0>)
 800ecc2:	889b      	ldrh	r3, [r3, #4]
 800ecc4:	3302      	adds	r3, #2
 800ecc6:	429a      	cmp	r2, r3
 800ecc8:	d118      	bne.n	800ecfc <PeerToPeer_Event_Handler+0x80>
              return_value = SVCCTL_EvtAckFlowEnable;
 800ecca:	2301      	movs	r3, #1
 800eccc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
              if(attribute_modified->Attr_Data[0] & COMSVC_Notification)
 800ecd0:	69bb      	ldr	r3, [r7, #24]
 800ecd2:	7a1b      	ldrb	r3, [r3, #8]
 800ecd4:	f003 0301 	and.w	r3, r3, #1
 800ecd8:	2b00      	cmp	r3, #0
 800ecda:	d007      	beq.n	800ecec <PeerToPeer_Event_Handler+0x70>
                Notification.P2P_Evt_Opcode = P2PS_STM__NOTIFY_ENABLED_EVT;
 800ecdc:	2300      	movs	r3, #0
 800ecde:	723b      	strb	r3, [r7, #8]
                P2PS_STM_App_Notification(&Notification);
 800ece0:	f107 0308 	add.w	r3, r7, #8
 800ece4:	4618      	mov	r0, r3
 800ece6:	f7f2 fc43 	bl	8001570 <P2PS_STM_App_Notification>
        break;
 800ecea:	e01f      	b.n	800ed2c <PeerToPeer_Event_Handler+0xb0>
                Notification.P2P_Evt_Opcode = P2PS_STM_NOTIFY_DISABLED_EVT;
 800ecec:	2301      	movs	r3, #1
 800ecee:	723b      	strb	r3, [r7, #8]
                P2PS_STM_App_Notification(&Notification);
 800ecf0:	f107 0308 	add.w	r3, r7, #8
 800ecf4:	4618      	mov	r0, r3
 800ecf6:	f7f2 fc3b 	bl	8001570 <P2PS_STM_App_Notification>
        break;
 800ecfa:	e017      	b.n	800ed2c <PeerToPeer_Event_Handler+0xb0>
            else if(attribute_modified->Attr_Handle == (aPeerToPeerContext.P2PWriteClientToServerCharHdle + 1))
 800ecfc:	69bb      	ldr	r3, [r7, #24]
 800ecfe:	885b      	ldrh	r3, [r3, #2]
 800ed00:	b29b      	uxth	r3, r3
 800ed02:	461a      	mov	r2, r3
 800ed04:	4b0d      	ldr	r3, [pc, #52]	; (800ed3c <PeerToPeer_Event_Handler+0xc0>)
 800ed06:	885b      	ldrh	r3, [r3, #2]
 800ed08:	3301      	adds	r3, #1
 800ed0a:	429a      	cmp	r2, r3
 800ed0c:	d10e      	bne.n	800ed2c <PeerToPeer_Event_Handler+0xb0>
              Notification.P2P_Evt_Opcode = P2PS_STM_WRITE_EVT;
 800ed0e:	2303      	movs	r3, #3
 800ed10:	723b      	strb	r3, [r7, #8]
              Notification.DataTransfered.Length=attribute_modified->Attr_Data_Length;
 800ed12:	69bb      	ldr	r3, [r7, #24]
 800ed14:	88db      	ldrh	r3, [r3, #6]
 800ed16:	b29b      	uxth	r3, r3
 800ed18:	b2db      	uxtb	r3, r3
 800ed1a:	743b      	strb	r3, [r7, #16]
              Notification.DataTransfered.pPayload=attribute_modified->Attr_Data;
 800ed1c:	69bb      	ldr	r3, [r7, #24]
 800ed1e:	3308      	adds	r3, #8
 800ed20:	60fb      	str	r3, [r7, #12]
              P2PS_STM_App_Notification(&Notification);
 800ed22:	f107 0308 	add.w	r3, r7, #8
 800ed26:	4618      	mov	r0, r3
 800ed28:	f7f2 fc22 	bl	8001570 <P2PS_STM_App_Notification>
        break;
 800ed2c:	bf00      	nop
    break; /* HCI_EVT_VENDOR_SPECIFIC */
 800ed2e:	bf00      	nop
  }

  return(return_value);
 800ed30:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}/* end SVCCTL_EvtAckStatus_t */
 800ed34:	4618      	mov	r0, r3
 800ed36:	3728      	adds	r7, #40	; 0x28
 800ed38:	46bd      	mov	sp, r7
 800ed3a:	bd80      	pop	{r7, pc}
 800ed3c:	20000354 	.word	0x20000354

0800ed40 <P2PS_STM_Init>:
 * @brief  Service initialization
 * @param  None
 * @retval None
 */
void P2PS_STM_Init(void)
{
 800ed40:	b580      	push	{r7, lr}
 800ed42:	b08a      	sub	sp, #40	; 0x28
 800ed44:	af06      	add	r7, sp, #24
  Char_UUID_t  uuid16;

  /**
   *	Register the event handler to the BLE controller
   */
  SVCCTL_RegisterSvcHandler(PeerToPeer_Event_Handler);
 800ed46:	484a      	ldr	r0, [pc, #296]	; (800ee70 <P2PS_STM_Init+0x130>)
 800ed48:	f7fe fa30 	bl	800d1ac <SVCCTL_RegisterSvcHandler>
     *                                2 for P2P Write characteristic +
     *                                2 for P2P Notify characteristic +
     *                                1 for client char configuration descriptor +
     *
     */
    COPY_P2P_SERVICE_UUID(uuid16.Char_UUID_128);
 800ed4c:	238f      	movs	r3, #143	; 0x8f
 800ed4e:	703b      	strb	r3, [r7, #0]
 800ed50:	23e5      	movs	r3, #229	; 0xe5
 800ed52:	707b      	strb	r3, [r7, #1]
 800ed54:	23b3      	movs	r3, #179	; 0xb3
 800ed56:	70bb      	strb	r3, [r7, #2]
 800ed58:	23d5      	movs	r3, #213	; 0xd5
 800ed5a:	70fb      	strb	r3, [r7, #3]
 800ed5c:	232e      	movs	r3, #46	; 0x2e
 800ed5e:	713b      	strb	r3, [r7, #4]
 800ed60:	237f      	movs	r3, #127	; 0x7f
 800ed62:	717b      	strb	r3, [r7, #5]
 800ed64:	234a      	movs	r3, #74	; 0x4a
 800ed66:	71bb      	strb	r3, [r7, #6]
 800ed68:	2398      	movs	r3, #152	; 0x98
 800ed6a:	71fb      	strb	r3, [r7, #7]
 800ed6c:	232a      	movs	r3, #42	; 0x2a
 800ed6e:	723b      	strb	r3, [r7, #8]
 800ed70:	2348      	movs	r3, #72	; 0x48
 800ed72:	727b      	strb	r3, [r7, #9]
 800ed74:	237a      	movs	r3, #122	; 0x7a
 800ed76:	72bb      	strb	r3, [r7, #10]
 800ed78:	23cc      	movs	r3, #204	; 0xcc
 800ed7a:	72fb      	strb	r3, [r7, #11]
 800ed7c:	2340      	movs	r3, #64	; 0x40
 800ed7e:	733b      	strb	r3, [r7, #12]
 800ed80:	23fe      	movs	r3, #254	; 0xfe
 800ed82:	737b      	strb	r3, [r7, #13]
 800ed84:	2300      	movs	r3, #0
 800ed86:	73bb      	strb	r3, [r7, #14]
 800ed88:	2300      	movs	r3, #0
 800ed8a:	73fb      	strb	r3, [r7, #15]
    aci_gatt_add_service(UUID_TYPE_128,
 800ed8c:	4639      	mov	r1, r7
 800ed8e:	4b39      	ldr	r3, [pc, #228]	; (800ee74 <P2PS_STM_Init+0x134>)
 800ed90:	9300      	str	r3, [sp, #0]
 800ed92:	2308      	movs	r3, #8
 800ed94:	2201      	movs	r2, #1
 800ed96:	2002      	movs	r0, #2
 800ed98:	f7fe fe39 	bl	800da0e <aci_gatt_add_service>
                      &(aPeerToPeerContext.PeerToPeerSvcHdle));

    /**
     *  Add LED Characteristic
     */
    COPY_P2P_WRITE_CHAR_UUID(uuid16.Char_UUID_128);
 800ed9c:	2319      	movs	r3, #25
 800ed9e:	703b      	strb	r3, [r7, #0]
 800eda0:	23ed      	movs	r3, #237	; 0xed
 800eda2:	707b      	strb	r3, [r7, #1]
 800eda4:	2382      	movs	r3, #130	; 0x82
 800eda6:	70bb      	strb	r3, [r7, #2]
 800eda8:	23ae      	movs	r3, #174	; 0xae
 800edaa:	70fb      	strb	r3, [r7, #3]
 800edac:	23ed      	movs	r3, #237	; 0xed
 800edae:	713b      	strb	r3, [r7, #4]
 800edb0:	2321      	movs	r3, #33	; 0x21
 800edb2:	717b      	strb	r3, [r7, #5]
 800edb4:	234c      	movs	r3, #76	; 0x4c
 800edb6:	71bb      	strb	r3, [r7, #6]
 800edb8:	239d      	movs	r3, #157	; 0x9d
 800edba:	71fb      	strb	r3, [r7, #7]
 800edbc:	2341      	movs	r3, #65	; 0x41
 800edbe:	723b      	strb	r3, [r7, #8]
 800edc0:	2345      	movs	r3, #69	; 0x45
 800edc2:	727b      	strb	r3, [r7, #9]
 800edc4:	2322      	movs	r3, #34	; 0x22
 800edc6:	72bb      	strb	r3, [r7, #10]
 800edc8:	238e      	movs	r3, #142	; 0x8e
 800edca:	72fb      	strb	r3, [r7, #11]
 800edcc:	2341      	movs	r3, #65	; 0x41
 800edce:	733b      	strb	r3, [r7, #12]
 800edd0:	23fe      	movs	r3, #254	; 0xfe
 800edd2:	737b      	strb	r3, [r7, #13]
 800edd4:	2300      	movs	r3, #0
 800edd6:	73bb      	strb	r3, [r7, #14]
 800edd8:	2300      	movs	r3, #0
 800edda:	73fb      	strb	r3, [r7, #15]
    aci_gatt_add_char(aPeerToPeerContext.PeerToPeerSvcHdle,
 800eddc:	4b25      	ldr	r3, [pc, #148]	; (800ee74 <P2PS_STM_Init+0x134>)
 800edde:	8818      	ldrh	r0, [r3, #0]
 800ede0:	463a      	mov	r2, r7
 800ede2:	4b25      	ldr	r3, [pc, #148]	; (800ee78 <P2PS_STM_Init+0x138>)
 800ede4:	9305      	str	r3, [sp, #20]
 800ede6:	2301      	movs	r3, #1
 800ede8:	9304      	str	r3, [sp, #16]
 800edea:	230a      	movs	r3, #10
 800edec:	9303      	str	r3, [sp, #12]
 800edee:	2301      	movs	r3, #1
 800edf0:	9302      	str	r3, [sp, #8]
 800edf2:	2300      	movs	r3, #0
 800edf4:	9301      	str	r3, [sp, #4]
 800edf6:	2306      	movs	r3, #6
 800edf8:	9300      	str	r3, [sp, #0]
 800edfa:	2314      	movs	r3, #20
 800edfc:	2102      	movs	r1, #2
 800edfe:	f7fe feb5 	bl	800db6c <aci_gatt_add_char>
                      &(aPeerToPeerContext.P2PWriteClientToServerCharHdle));

    /**
     *   Add Button Characteristic
     */
    COPY_P2P_NOTIFY_UUID(uuid16.Char_UUID_128);
 800ee02:	2319      	movs	r3, #25
 800ee04:	703b      	strb	r3, [r7, #0]
 800ee06:	23ed      	movs	r3, #237	; 0xed
 800ee08:	707b      	strb	r3, [r7, #1]
 800ee0a:	2382      	movs	r3, #130	; 0x82
 800ee0c:	70bb      	strb	r3, [r7, #2]
 800ee0e:	23ae      	movs	r3, #174	; 0xae
 800ee10:	70fb      	strb	r3, [r7, #3]
 800ee12:	23ed      	movs	r3, #237	; 0xed
 800ee14:	713b      	strb	r3, [r7, #4]
 800ee16:	2321      	movs	r3, #33	; 0x21
 800ee18:	717b      	strb	r3, [r7, #5]
 800ee1a:	234c      	movs	r3, #76	; 0x4c
 800ee1c:	71bb      	strb	r3, [r7, #6]
 800ee1e:	239d      	movs	r3, #157	; 0x9d
 800ee20:	71fb      	strb	r3, [r7, #7]
 800ee22:	2341      	movs	r3, #65	; 0x41
 800ee24:	723b      	strb	r3, [r7, #8]
 800ee26:	2345      	movs	r3, #69	; 0x45
 800ee28:	727b      	strb	r3, [r7, #9]
 800ee2a:	2322      	movs	r3, #34	; 0x22
 800ee2c:	72bb      	strb	r3, [r7, #10]
 800ee2e:	238e      	movs	r3, #142	; 0x8e
 800ee30:	72fb      	strb	r3, [r7, #11]
 800ee32:	2342      	movs	r3, #66	; 0x42
 800ee34:	733b      	strb	r3, [r7, #12]
 800ee36:	23fe      	movs	r3, #254	; 0xfe
 800ee38:	737b      	strb	r3, [r7, #13]
 800ee3a:	2300      	movs	r3, #0
 800ee3c:	73bb      	strb	r3, [r7, #14]
 800ee3e:	2300      	movs	r3, #0
 800ee40:	73fb      	strb	r3, [r7, #15]
    aci_gatt_add_char(aPeerToPeerContext.PeerToPeerSvcHdle,
 800ee42:	4b0c      	ldr	r3, [pc, #48]	; (800ee74 <P2PS_STM_Init+0x134>)
 800ee44:	8818      	ldrh	r0, [r3, #0]
 800ee46:	463a      	mov	r2, r7
 800ee48:	4b0c      	ldr	r3, [pc, #48]	; (800ee7c <P2PS_STM_Init+0x13c>)
 800ee4a:	9305      	str	r3, [sp, #20]
 800ee4c:	2301      	movs	r3, #1
 800ee4e:	9304      	str	r3, [sp, #16]
 800ee50:	230a      	movs	r3, #10
 800ee52:	9303      	str	r3, [sp, #12]
 800ee54:	2301      	movs	r3, #1
 800ee56:	9302      	str	r3, [sp, #8]
 800ee58:	2300      	movs	r3, #0
 800ee5a:	9301      	str	r3, [sp, #4]
 800ee5c:	2310      	movs	r3, #16
 800ee5e:	9300      	str	r3, [sp, #0]
 800ee60:	2314      	movs	r3, #20
 800ee62:	2102      	movs	r1, #2
 800ee64:	f7fe fe82 	bl	800db6c <aci_gatt_add_char>
                      0,
                      &(aPeerToPeerContext.RebootReqCharHdle));
#endif


  return;
 800ee68:	bf00      	nop
}
 800ee6a:	3710      	adds	r7, #16
 800ee6c:	46bd      	mov	sp, r7
 800ee6e:	bd80      	pop	{r7, pc}
 800ee70:	0800ec7d 	.word	0x0800ec7d
 800ee74:	20000354 	.word	0x20000354
 800ee78:	20000356 	.word	0x20000356
 800ee7c:	20000358 	.word	0x20000358

0800ee80 <P2PS_STM_App_Update_Int8>:

  return result;
}

tBleStatus P2PS_STM_App_Update_Int8(uint16_t UUID, uint8_t *pPayload, uint8_t num_bytes)
{
 800ee80:	b580      	push	{r7, lr}
 800ee82:	b086      	sub	sp, #24
 800ee84:	af02      	add	r7, sp, #8
 800ee86:	4603      	mov	r3, r0
 800ee88:	6039      	str	r1, [r7, #0]
 800ee8a:	80fb      	strh	r3, [r7, #6]
 800ee8c:	4613      	mov	r3, r2
 800ee8e:	717b      	strb	r3, [r7, #5]
  tBleStatus result = BLE_STATUS_INVALID_PARAMS;
 800ee90:	2342      	movs	r3, #66	; 0x42
 800ee92:	73fb      	strb	r3, [r7, #15]
  switch(UUID)
 800ee94:	88fb      	ldrh	r3, [r7, #6]
 800ee96:	f64f 6242 	movw	r2, #65090	; 0xfe42
 800ee9a:	4293      	cmp	r3, r2
 800ee9c:	d000      	beq.n	800eea0 <P2PS_STM_App_Update_Int8+0x20>
                             (uint8_t *)  pPayload);

      break;

    default:
      break;
 800ee9e:	e00d      	b.n	800eebc <P2PS_STM_App_Update_Int8+0x3c>
     result = aci_gatt_update_char_value(aPeerToPeerContext.PeerToPeerSvcHdle,
 800eea0:	4b09      	ldr	r3, [pc, #36]	; (800eec8 <P2PS_STM_App_Update_Int8+0x48>)
 800eea2:	8818      	ldrh	r0, [r3, #0]
 800eea4:	4b08      	ldr	r3, [pc, #32]	; (800eec8 <P2PS_STM_App_Update_Int8+0x48>)
 800eea6:	8899      	ldrh	r1, [r3, #4]
 800eea8:	797a      	ldrb	r2, [r7, #5]
 800eeaa:	683b      	ldr	r3, [r7, #0]
 800eeac:	9300      	str	r3, [sp, #0]
 800eeae:	4613      	mov	r3, r2
 800eeb0:	2200      	movs	r2, #0
 800eeb2:	f7fe ff45 	bl	800dd40 <aci_gatt_update_char_value>
 800eeb6:	4603      	mov	r3, r0
 800eeb8:	73fb      	strb	r3, [r7, #15]
      break;
 800eeba:	bf00      	nop
  }

  return result;
 800eebc:	7bfb      	ldrb	r3, [r7, #15]
}/* end P2PS_STM_Init() */
 800eebe:	4618      	mov	r0, r3
 800eec0:	3710      	adds	r7, #16
 800eec2:	46bd      	mov	sp, r7
 800eec4:	bd80      	pop	{r7, pc}
 800eec6:	bf00      	nop
 800eec8:	20000354 	.word	0x20000354

0800eecc <DbgTrace_TxCpltCallback>:
 * @note   Indicate the end of the transmission of a DBG_TRACE trace buffer to DBG_TRACE USART. If queue
 *         contains new trace data to transmit, start a new transmission.
 * @retval None
 */
static void DbgTrace_TxCpltCallback(void)
{
 800eecc:	b580      	push	{r7, lr}
 800eece:	b086      	sub	sp, #24
 800eed0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800eed2:	f3ef 8310 	mrs	r3, PRIMASK
 800eed6:	60fb      	str	r3, [r7, #12]
  return(result);
 800eed8:	68fb      	ldr	r3, [r7, #12]
#if (DBG_TRACE_USE_CIRCULAR_QUEUE != 0)
  uint8_t* buf;
  uint16_t bufSize;

  BACKUP_PRIMASK();
 800eeda:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800eedc:	b672      	cpsid	i

  DISABLE_IRQ();			/**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  /* Remove element just sent to UART */
  CircularQueue_Remove(&MsgDbgTraceQueue,&bufSize);
 800eede:	1cbb      	adds	r3, r7, #2
 800eee0:	4619      	mov	r1, r3
 800eee2:	4812      	ldr	r0, [pc, #72]	; (800ef2c <DbgTrace_TxCpltCallback+0x60>)
 800eee4:	f000 fbd7 	bl	800f696 <CircularQueue_Remove>

  /* Sense if new data to be sent */
  buf=CircularQueue_Sense(&MsgDbgTraceQueue,&bufSize);
 800eee8:	1cbb      	adds	r3, r7, #2
 800eeea:	4619      	mov	r1, r3
 800eeec:	480f      	ldr	r0, [pc, #60]	; (800ef2c <DbgTrace_TxCpltCallback+0x60>)
 800eeee:	f000 fcc6 	bl	800f87e <CircularQueue_Sense>
 800eef2:	6138      	str	r0, [r7, #16]


  if ( buf != NULL) 
 800eef4:	693b      	ldr	r3, [r7, #16]
 800eef6:	2b00      	cmp	r3, #0
 800eef8:	d00b      	beq.n	800ef12 <DbgTrace_TxCpltCallback+0x46>
 800eefa:	697b      	ldr	r3, [r7, #20]
 800eefc:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800eefe:	68bb      	ldr	r3, [r7, #8]
 800ef00:	f383 8810 	msr	PRIMASK, r3
  {
    RESTORE_PRIMASK();
    DbgOutputTraces((uint8_t*)buf, bufSize, DbgTrace_TxCpltCallback);
 800ef04:	887b      	ldrh	r3, [r7, #2]
 800ef06:	4a0a      	ldr	r2, [pc, #40]	; (800ef30 <DbgTrace_TxCpltCallback+0x64>)
 800ef08:	4619      	mov	r1, r3
 800ef0a:	6938      	ldr	r0, [r7, #16]
 800ef0c:	f7f2 ff54 	bl	8001db8 <DbgOutputTraces>

  DbgTracePeripheralReady = SET;

  RESTORE_PRIMASK();
#endif
}
 800ef10:	e007      	b.n	800ef22 <DbgTrace_TxCpltCallback+0x56>
    DbgTracePeripheralReady = SET;
 800ef12:	4b08      	ldr	r3, [pc, #32]	; (800ef34 <DbgTrace_TxCpltCallback+0x68>)
 800ef14:	2201      	movs	r2, #1
 800ef16:	701a      	strb	r2, [r3, #0]
 800ef18:	697b      	ldr	r3, [r7, #20]
 800ef1a:	607b      	str	r3, [r7, #4]
 800ef1c:	687b      	ldr	r3, [r7, #4]
 800ef1e:	f383 8810 	msr	PRIMASK, r3
}
 800ef22:	bf00      	nop
 800ef24:	3718      	adds	r7, #24
 800ef26:	46bd      	mov	sp, r7
 800ef28:	bd80      	pop	{r7, pc}
 800ef2a:	bf00      	nop
 800ef2c:	20000414 	.word	0x20000414
 800ef30:	0800eecd 	.word	0x0800eecd
 800ef34:	2000001d 	.word	0x2000001d

0800ef38 <DbgTraceInit>:
#endif

void DbgTraceInit( void )
{
 800ef38:	b580      	push	{r7, lr}
 800ef3a:	b082      	sub	sp, #8
 800ef3c:	af02      	add	r7, sp, #8
#if (( CFG_DEBUG_TRACE_FULL != 0 ) || ( CFG_DEBUG_TRACE_LIGHT != 0 ))
  DbgOutputInit();
 800ef3e:	f7f2 ff34 	bl	8001daa <DbgOutputInit>
#if (DBG_TRACE_USE_CIRCULAR_QUEUE != 0)
  CircularQueue_Init(&MsgDbgTraceQueue, MsgDbgTraceQueueBuff, DBG_TRACE_MSG_QUEUE_SIZE, 0, CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG);
 800ef42:	2302      	movs	r3, #2
 800ef44:	9300      	str	r3, [sp, #0]
 800ef46:	2300      	movs	r3, #0
 800ef48:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800ef4c:	4903      	ldr	r1, [pc, #12]	; (800ef5c <DbgTraceInit+0x24>)
 800ef4e:	4804      	ldr	r0, [pc, #16]	; (800ef60 <DbgTraceInit+0x28>)
 800ef50:	f000 f948 	bl	800f1e4 <CircularQueue_Init>
#endif 
#endif
  return;
 800ef54:	bf00      	nop
}
 800ef56:	46bd      	mov	sp, r7
 800ef58:	bd80      	pop	{r7, pc}
 800ef5a:	bf00      	nop
 800ef5c:	20000434 	.word	0x20000434
 800ef60:	20000414 	.word	0x20000414

0800ef64 <_write>:
 * @param	bufsize buffer size
 * @param	...: arguments to be formatted in format string
 * @retval none
 */
size_t _write(int handle, const unsigned char * buf, size_t bufSize)
{
 800ef64:	b580      	push	{r7, lr}
 800ef66:	b084      	sub	sp, #16
 800ef68:	af00      	add	r7, sp, #0
 800ef6a:	60f8      	str	r0, [r7, #12]
 800ef6c:	60b9      	str	r1, [r7, #8]
 800ef6e:	607a      	str	r2, [r7, #4]
  return ( DbgTraceWrite(handle, buf, bufSize) );
 800ef70:	687a      	ldr	r2, [r7, #4]
 800ef72:	68b9      	ldr	r1, [r7, #8]
 800ef74:	68f8      	ldr	r0, [r7, #12]
 800ef76:	f000 f805 	bl	800ef84 <DbgTraceWrite>
 800ef7a:	4603      	mov	r3, r0
}
 800ef7c:	4618      	mov	r0, r3
 800ef7e:	3710      	adds	r7, #16
 800ef80:	46bd      	mov	sp, r7
 800ef82:	bd80      	pop	{r7, pc}

0800ef84 <DbgTraceWrite>:
 * @param buf buffer to write
 * @param bufsize buffer size
 * @retval Number of elements written
 */
size_t DbgTraceWrite(int handle, const unsigned char * buf, size_t bufSize)
{
 800ef84:	b580      	push	{r7, lr}
 800ef86:	b08a      	sub	sp, #40	; 0x28
 800ef88:	af00      	add	r7, sp, #0
 800ef8a:	60f8      	str	r0, [r7, #12]
 800ef8c:	60b9      	str	r1, [r7, #8]
 800ef8e:	607a      	str	r2, [r7, #4]
  size_t chars_written = 0;
 800ef90:	2300      	movs	r3, #0
 800ef92:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ef94:	f3ef 8310 	mrs	r3, PRIMASK
 800ef98:	61bb      	str	r3, [r7, #24]
  return(result);
 800ef9a:	69bb      	ldr	r3, [r7, #24]
  uint8_t* buffer;

  BACKUP_PRIMASK();
 800ef9c:	623b      	str	r3, [r7, #32]

  /* Ignore flushes */
  if ( handle == -1 )
 800ef9e:	68fb      	ldr	r3, [r7, #12]
 800efa0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800efa4:	d102      	bne.n	800efac <DbgTraceWrite+0x28>
  {
    chars_written = ( size_t ) 0;
 800efa6:	2300      	movs	r3, #0
 800efa8:	627b      	str	r3, [r7, #36]	; 0x24
 800efaa:	e034      	b.n	800f016 <DbgTraceWrite+0x92>
  }
  /* Only allow stdout/stderr output */
  else if ( ( handle != 1 ) && ( handle != 2 ) )
 800efac:	68fb      	ldr	r3, [r7, #12]
 800efae:	2b01      	cmp	r3, #1
 800efb0:	d006      	beq.n	800efc0 <DbgTraceWrite+0x3c>
 800efb2:	68fb      	ldr	r3, [r7, #12]
 800efb4:	2b02      	cmp	r3, #2
 800efb6:	d003      	beq.n	800efc0 <DbgTraceWrite+0x3c>
  {
    chars_written = ( size_t ) - 1;
 800efb8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800efbc:	627b      	str	r3, [r7, #36]	; 0x24
 800efbe:	e02a      	b.n	800f016 <DbgTraceWrite+0x92>
  }
  /* Parameters OK, call the low-level character output routine */
  else if (bufSize != 0)
 800efc0:	687b      	ldr	r3, [r7, #4]
 800efc2:	2b00      	cmp	r3, #0
 800efc4:	d027      	beq.n	800f016 <DbgTraceWrite+0x92>
  {
    chars_written = bufSize;
 800efc6:	687b      	ldr	r3, [r7, #4]
 800efc8:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("cpsid i" : : : "memory");
 800efca:	b672      	cpsid	i
    /* If queue emepty and TX free, send directly */
    /* CS Start */

#if (DBG_TRACE_USE_CIRCULAR_QUEUE != 0)
    DISABLE_IRQ();      /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
    buffer=CircularQueue_Add(&MsgDbgTraceQueue,(uint8_t*)buf, bufSize,1);
 800efcc:	687b      	ldr	r3, [r7, #4]
 800efce:	b29a      	uxth	r2, r3
 800efd0:	2301      	movs	r3, #1
 800efd2:	68b9      	ldr	r1, [r7, #8]
 800efd4:	4812      	ldr	r0, [pc, #72]	; (800f020 <DbgTraceWrite+0x9c>)
 800efd6:	f000 f937 	bl	800f248 <CircularQueue_Add>
 800efda:	61f8      	str	r0, [r7, #28]
    if (buffer && DbgTracePeripheralReady)
 800efdc:	69fb      	ldr	r3, [r7, #28]
 800efde:	2b00      	cmp	r3, #0
 800efe0:	d014      	beq.n	800f00c <DbgTraceWrite+0x88>
 800efe2:	4b10      	ldr	r3, [pc, #64]	; (800f024 <DbgTraceWrite+0xa0>)
 800efe4:	781b      	ldrb	r3, [r3, #0]
 800efe6:	b2db      	uxtb	r3, r3
 800efe8:	2b00      	cmp	r3, #0
 800efea:	d00f      	beq.n	800f00c <DbgTraceWrite+0x88>
    {
      DbgTracePeripheralReady = RESET;
 800efec:	4b0d      	ldr	r3, [pc, #52]	; (800f024 <DbgTraceWrite+0xa0>)
 800efee:	2200      	movs	r2, #0
 800eff0:	701a      	strb	r2, [r3, #0]
 800eff2:	6a3b      	ldr	r3, [r7, #32]
 800eff4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800eff6:	697b      	ldr	r3, [r7, #20]
 800eff8:	f383 8810 	msr	PRIMASK, r3
      RESTORE_PRIMASK();
      DbgOutputTraces((uint8_t*)buffer, bufSize, DbgTrace_TxCpltCallback);
 800effc:	687b      	ldr	r3, [r7, #4]
 800effe:	b29b      	uxth	r3, r3
 800f000:	4a09      	ldr	r2, [pc, #36]	; (800f028 <DbgTraceWrite+0xa4>)
 800f002:	4619      	mov	r1, r3
 800f004:	69f8      	ldr	r0, [r7, #28]
 800f006:	f7f2 fed7 	bl	8001db8 <DbgOutputTraces>
 800f00a:	e004      	b.n	800f016 <DbgTraceWrite+0x92>
 800f00c:	6a3b      	ldr	r3, [r7, #32]
 800f00e:	613b      	str	r3, [r7, #16]
 800f010:	693b      	ldr	r3, [r7, #16]
 800f012:	f383 8810 	msr	PRIMASK, r3
    DbgOutputTraces((uint8_t*)buf, bufSize, DbgTrace_TxCpltCallback);
    while (!DbgTracePeripheralReady);
#endif
    /* CS END */
  }
  return ( chars_written );
 800f016:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800f018:	4618      	mov	r0, r3
 800f01a:	3728      	adds	r7, #40	; 0x28
 800f01c:	46bd      	mov	sp, r7
 800f01e:	bd80      	pop	{r7, pc}
 800f020:	20000414 	.word	0x20000414
 800f024:	2000001d 	.word	0x2000001d
 800f028:	0800eecd 	.word	0x0800eecd

0800f02c <OTP_Read>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

uint8_t * OTP_Read( uint8_t id )
{
 800f02c:	b480      	push	{r7}
 800f02e:	b085      	sub	sp, #20
 800f030:	af00      	add	r7, sp, #0
 800f032:	4603      	mov	r3, r0
 800f034:	71fb      	strb	r3, [r7, #7]
  uint8_t *p_id;

  p_id = (uint8_t*)(CFG_OTP_END_ADRESS - 7) ;
 800f036:	4b0f      	ldr	r3, [pc, #60]	; (800f074 <OTP_Read+0x48>)
 800f038:	60fb      	str	r3, [r7, #12]

  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 800f03a:	e002      	b.n	800f042 <OTP_Read+0x16>
  {
    p_id -= 8 ;
 800f03c:	68fb      	ldr	r3, [r7, #12]
 800f03e:	3b08      	subs	r3, #8
 800f040:	60fb      	str	r3, [r7, #12]
  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 800f042:	68fb      	ldr	r3, [r7, #12]
 800f044:	3307      	adds	r3, #7
 800f046:	781b      	ldrb	r3, [r3, #0]
 800f048:	79fa      	ldrb	r2, [r7, #7]
 800f04a:	429a      	cmp	r2, r3
 800f04c:	d003      	beq.n	800f056 <OTP_Read+0x2a>
 800f04e:	68fb      	ldr	r3, [r7, #12]
 800f050:	4a09      	ldr	r2, [pc, #36]	; (800f078 <OTP_Read+0x4c>)
 800f052:	4293      	cmp	r3, r2
 800f054:	d1f2      	bne.n	800f03c <OTP_Read+0x10>
  }

  if((*( p_id + 7 )) != id)
 800f056:	68fb      	ldr	r3, [r7, #12]
 800f058:	3307      	adds	r3, #7
 800f05a:	781b      	ldrb	r3, [r3, #0]
 800f05c:	79fa      	ldrb	r2, [r7, #7]
 800f05e:	429a      	cmp	r2, r3
 800f060:	d001      	beq.n	800f066 <OTP_Read+0x3a>
  {
    p_id = 0 ;
 800f062:	2300      	movs	r3, #0
 800f064:	60fb      	str	r3, [r7, #12]
  }

  return p_id ;
 800f066:	68fb      	ldr	r3, [r7, #12]
}
 800f068:	4618      	mov	r0, r3
 800f06a:	3714      	adds	r7, #20
 800f06c:	46bd      	mov	sp, r7
 800f06e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f072:	4770      	bx	lr
 800f074:	1fff73f8 	.word	0x1fff73f8
 800f078:	1fff7000 	.word	0x1fff7000

0800f07c <LST_init_head>:

/******************************************************************************
 * Function Definitions 
 ******************************************************************************/
void LST_init_head (tListNode * listHead)
{
 800f07c:	b480      	push	{r7}
 800f07e:	b083      	sub	sp, #12
 800f080:	af00      	add	r7, sp, #0
 800f082:	6078      	str	r0, [r7, #4]
  listHead->next = listHead;
 800f084:	687b      	ldr	r3, [r7, #4]
 800f086:	687a      	ldr	r2, [r7, #4]
 800f088:	601a      	str	r2, [r3, #0]
  listHead->prev = listHead;
 800f08a:	687b      	ldr	r3, [r7, #4]
 800f08c:	687a      	ldr	r2, [r7, #4]
 800f08e:	605a      	str	r2, [r3, #4]
}
 800f090:	bf00      	nop
 800f092:	370c      	adds	r7, #12
 800f094:	46bd      	mov	sp, r7
 800f096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f09a:	4770      	bx	lr

0800f09c <LST_is_empty>:

uint8_t LST_is_empty (tListNode * listHead)
{
 800f09c:	b480      	push	{r7}
 800f09e:	b087      	sub	sp, #28
 800f0a0:	af00      	add	r7, sp, #0
 800f0a2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f0a4:	f3ef 8310 	mrs	r3, PRIMASK
 800f0a8:	60fb      	str	r3, [r7, #12]
  return(result);
 800f0aa:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;
  uint8_t return_value;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800f0ac:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800f0ae:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  if(listHead->next == listHead)
 800f0b0:	687b      	ldr	r3, [r7, #4]
 800f0b2:	681b      	ldr	r3, [r3, #0]
 800f0b4:	687a      	ldr	r2, [r7, #4]
 800f0b6:	429a      	cmp	r2, r3
 800f0b8:	d102      	bne.n	800f0c0 <LST_is_empty+0x24>
  {
    return_value = TRUE;
 800f0ba:	2301      	movs	r3, #1
 800f0bc:	75fb      	strb	r3, [r7, #23]
 800f0be:	e001      	b.n	800f0c4 <LST_is_empty+0x28>
  }
  else
  {
    return_value = FALSE;
 800f0c0:	2300      	movs	r3, #0
 800f0c2:	75fb      	strb	r3, [r7, #23]
 800f0c4:	693b      	ldr	r3, [r7, #16]
 800f0c6:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800f0c8:	68bb      	ldr	r3, [r7, #8]
 800f0ca:	f383 8810 	msr	PRIMASK, r3
  }
  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/

  return return_value;
 800f0ce:	7dfb      	ldrb	r3, [r7, #23]
}
 800f0d0:	4618      	mov	r0, r3
 800f0d2:	371c      	adds	r7, #28
 800f0d4:	46bd      	mov	sp, r7
 800f0d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0da:	4770      	bx	lr

0800f0dc <LST_insert_head>:

void LST_insert_head (tListNode * listHead, tListNode * node)
{
 800f0dc:	b480      	push	{r7}
 800f0de:	b087      	sub	sp, #28
 800f0e0:	af00      	add	r7, sp, #0
 800f0e2:	6078      	str	r0, [r7, #4]
 800f0e4:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f0e6:	f3ef 8310 	mrs	r3, PRIMASK
 800f0ea:	60fb      	str	r3, [r7, #12]
  return(result);
 800f0ec:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800f0ee:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800f0f0:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead->next;
 800f0f2:	687b      	ldr	r3, [r7, #4]
 800f0f4:	681a      	ldr	r2, [r3, #0]
 800f0f6:	683b      	ldr	r3, [r7, #0]
 800f0f8:	601a      	str	r2, [r3, #0]
  node->prev = listHead;
 800f0fa:	683b      	ldr	r3, [r7, #0]
 800f0fc:	687a      	ldr	r2, [r7, #4]
 800f0fe:	605a      	str	r2, [r3, #4]
  listHead->next = node;
 800f100:	687b      	ldr	r3, [r7, #4]
 800f102:	683a      	ldr	r2, [r7, #0]
 800f104:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node;
 800f106:	683b      	ldr	r3, [r7, #0]
 800f108:	681b      	ldr	r3, [r3, #0]
 800f10a:	683a      	ldr	r2, [r7, #0]
 800f10c:	605a      	str	r2, [r3, #4]
 800f10e:	697b      	ldr	r3, [r7, #20]
 800f110:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800f112:	693b      	ldr	r3, [r7, #16]
 800f114:	f383 8810 	msr	PRIMASK, r3

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800f118:	bf00      	nop
 800f11a:	371c      	adds	r7, #28
 800f11c:	46bd      	mov	sp, r7
 800f11e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f122:	4770      	bx	lr

0800f124 <LST_insert_tail>:


void LST_insert_tail (tListNode * listHead, tListNode * node)
{
 800f124:	b480      	push	{r7}
 800f126:	b087      	sub	sp, #28
 800f128:	af00      	add	r7, sp, #0
 800f12a:	6078      	str	r0, [r7, #4]
 800f12c:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f12e:	f3ef 8310 	mrs	r3, PRIMASK
 800f132:	60fb      	str	r3, [r7, #12]
  return(result);
 800f134:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800f136:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800f138:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead;
 800f13a:	683b      	ldr	r3, [r7, #0]
 800f13c:	687a      	ldr	r2, [r7, #4]
 800f13e:	601a      	str	r2, [r3, #0]
  node->prev = listHead->prev;
 800f140:	687b      	ldr	r3, [r7, #4]
 800f142:	685a      	ldr	r2, [r3, #4]
 800f144:	683b      	ldr	r3, [r7, #0]
 800f146:	605a      	str	r2, [r3, #4]
  listHead->prev = node;
 800f148:	687b      	ldr	r3, [r7, #4]
 800f14a:	683a      	ldr	r2, [r7, #0]
 800f14c:	605a      	str	r2, [r3, #4]
  (node->prev)->next = node;
 800f14e:	683b      	ldr	r3, [r7, #0]
 800f150:	685b      	ldr	r3, [r3, #4]
 800f152:	683a      	ldr	r2, [r7, #0]
 800f154:	601a      	str	r2, [r3, #0]
 800f156:	697b      	ldr	r3, [r7, #20]
 800f158:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800f15a:	693b      	ldr	r3, [r7, #16]
 800f15c:	f383 8810 	msr	PRIMASK, r3

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800f160:	bf00      	nop
 800f162:	371c      	adds	r7, #28
 800f164:	46bd      	mov	sp, r7
 800f166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f16a:	4770      	bx	lr

0800f16c <LST_remove_node>:


void LST_remove_node (tListNode * node)
{
 800f16c:	b480      	push	{r7}
 800f16e:	b087      	sub	sp, #28
 800f170:	af00      	add	r7, sp, #0
 800f172:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f174:	f3ef 8310 	mrs	r3, PRIMASK
 800f178:	60fb      	str	r3, [r7, #12]
  return(result);
 800f17a:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800f17c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800f17e:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  (node->prev)->next = node->next;
 800f180:	687b      	ldr	r3, [r7, #4]
 800f182:	685b      	ldr	r3, [r3, #4]
 800f184:	687a      	ldr	r2, [r7, #4]
 800f186:	6812      	ldr	r2, [r2, #0]
 800f188:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node->prev;
 800f18a:	687b      	ldr	r3, [r7, #4]
 800f18c:	681b      	ldr	r3, [r3, #0]
 800f18e:	687a      	ldr	r2, [r7, #4]
 800f190:	6852      	ldr	r2, [r2, #4]
 800f192:	605a      	str	r2, [r3, #4]
 800f194:	697b      	ldr	r3, [r7, #20]
 800f196:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800f198:	693b      	ldr	r3, [r7, #16]
 800f19a:	f383 8810 	msr	PRIMASK, r3

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800f19e:	bf00      	nop
 800f1a0:	371c      	adds	r7, #28
 800f1a2:	46bd      	mov	sp, r7
 800f1a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1a8:	4770      	bx	lr

0800f1aa <LST_remove_head>:


void LST_remove_head (tListNode * listHead, tListNode ** node )
{
 800f1aa:	b580      	push	{r7, lr}
 800f1ac:	b086      	sub	sp, #24
 800f1ae:	af00      	add	r7, sp, #0
 800f1b0:	6078      	str	r0, [r7, #4]
 800f1b2:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f1b4:	f3ef 8310 	mrs	r3, PRIMASK
 800f1b8:	60fb      	str	r3, [r7, #12]
  return(result);
 800f1ba:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800f1bc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800f1be:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  *node = listHead->next;
 800f1c0:	687b      	ldr	r3, [r7, #4]
 800f1c2:	681a      	ldr	r2, [r3, #0]
 800f1c4:	683b      	ldr	r3, [r7, #0]
 800f1c6:	601a      	str	r2, [r3, #0]
  LST_remove_node (listHead->next);
 800f1c8:	687b      	ldr	r3, [r7, #4]
 800f1ca:	681b      	ldr	r3, [r3, #0]
 800f1cc:	4618      	mov	r0, r3
 800f1ce:	f7ff ffcd 	bl	800f16c <LST_remove_node>
 800f1d2:	697b      	ldr	r3, [r7, #20]
 800f1d4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800f1d6:	693b      	ldr	r3, [r7, #16]
 800f1d8:	f383 8810 	msr	PRIMASK, r3

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800f1dc:	bf00      	nop
 800f1de:	3718      	adds	r7, #24
 800f1e0:	46bd      	mov	sp, r7
 800f1e2:	bd80      	pop	{r7, pc}

0800f1e4 <CircularQueue_Init>:
  * @param  queueSize:  Size of Queue Buffer
  * @param  elementSize: Size of an element in the queue. if =0, the queue will manage variable sizze elements
  * @retval   always 0
  */
int CircularQueue_Init(queue_t *q, uint8_t* queueBuffer, uint32_t queueSize, uint16_t elementSize, uint8_t optionFlags)
{
 800f1e4:	b480      	push	{r7}
 800f1e6:	b085      	sub	sp, #20
 800f1e8:	af00      	add	r7, sp, #0
 800f1ea:	60f8      	str	r0, [r7, #12]
 800f1ec:	60b9      	str	r1, [r7, #8]
 800f1ee:	607a      	str	r2, [r7, #4]
 800f1f0:	807b      	strh	r3, [r7, #2]
  q->qBuff = queueBuffer;
 800f1f2:	68fb      	ldr	r3, [r7, #12]
 800f1f4:	68ba      	ldr	r2, [r7, #8]
 800f1f6:	601a      	str	r2, [r3, #0]
  q->first = 0;
 800f1f8:	68fb      	ldr	r3, [r7, #12]
 800f1fa:	2200      	movs	r2, #0
 800f1fc:	60da      	str	r2, [r3, #12]
  q->last = 0; /* queueSize-1; */
 800f1fe:	68fb      	ldr	r3, [r7, #12]
 800f200:	2200      	movs	r2, #0
 800f202:	611a      	str	r2, [r3, #16]
  q->byteCount = 0;
 800f204:	68fb      	ldr	r3, [r7, #12]
 800f206:	2200      	movs	r2, #0
 800f208:	615a      	str	r2, [r3, #20]
  q->elementCount = 0;
 800f20a:	68fb      	ldr	r3, [r7, #12]
 800f20c:	2200      	movs	r2, #0
 800f20e:	619a      	str	r2, [r3, #24]
  q->queueMaxSize = queueSize;
 800f210:	68fb      	ldr	r3, [r7, #12]
 800f212:	687a      	ldr	r2, [r7, #4]
 800f214:	605a      	str	r2, [r3, #4]
  q->elementSize = elementSize;
 800f216:	68fb      	ldr	r3, [r7, #12]
 800f218:	887a      	ldrh	r2, [r7, #2]
 800f21a:	811a      	strh	r2, [r3, #8]
  q->optionFlags = optionFlags;
 800f21c:	68fb      	ldr	r3, [r7, #12]
 800f21e:	7e3a      	ldrb	r2, [r7, #24]
 800f220:	771a      	strb	r2, [r3, #28]

   if ((optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG) && q-> elementSize)
 800f222:	7e3b      	ldrb	r3, [r7, #24]
 800f224:	f003 0302 	and.w	r3, r3, #2
 800f228:	2b00      	cmp	r3, #0
 800f22a:	d006      	beq.n	800f23a <CircularQueue_Init+0x56>
 800f22c:	68fb      	ldr	r3, [r7, #12]
 800f22e:	891b      	ldrh	r3, [r3, #8]
 800f230:	2b00      	cmp	r3, #0
 800f232:	d002      	beq.n	800f23a <CircularQueue_Init+0x56>
   {
    /* can not deal with splitting at the end of buffer with fixed size element */
    return -1;
 800f234:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800f238:	e000      	b.n	800f23c <CircularQueue_Init+0x58>
  }
  return 0;
 800f23a:	2300      	movs	r3, #0
}
 800f23c:	4618      	mov	r0, r3
 800f23e:	3714      	adds	r7, #20
 800f240:	46bd      	mov	sp, r7
 800f242:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f246:	4770      	bx	lr

0800f248 <CircularQueue_Add>:
  * @param  elementSize:  Size of element to be added to the queue. Only used if the queue manage variable size elements
  * @param  nbElements:  number of elements in the in buffer pointed by x
  * @retval  pointer on last element just added to the queue, NULL if the element to be added do not fit in the queue (too big)
  */
uint8_t* CircularQueue_Add(queue_t *q, uint8_t* x, uint16_t elementSize, uint32_t nbElements)
{
 800f248:	b580      	push	{r7, lr}
 800f24a:	b08e      	sub	sp, #56	; 0x38
 800f24c:	af00      	add	r7, sp, #0
 800f24e:	60f8      	str	r0, [r7, #12]
 800f250:	60b9      	str	r1, [r7, #8]
 800f252:	603b      	str	r3, [r7, #0]
 800f254:	4613      	mov	r3, r2
 800f256:	80fb      	strh	r3, [r7, #6]

  uint8_t* ptr = NULL;                      /* fct return ptr to the element freshly added, if no room fct return NULL */
 800f258:	2300      	movs	r3, #0
 800f25a:	623b      	str	r3, [r7, #32]
  uint16_t curElementSize = 0;              /* the size of the element currently  stored at q->last position */
 800f25c:	2300      	movs	r3, #0
 800f25e:	86fb      	strh	r3, [r7, #54]	; 0x36
  uint8_t  elemSizeStorageRoom  = 0 ;       /* Indicate the header (which contain only size) of element in case of varaibale size elemenet (q->elementsize == 0) */
 800f260:	2300      	movs	r3, #0
 800f262:	77fb      	strb	r3, [r7, #31]
  uint32_t curBuffPosition;                  /* the current position in the queue buffer */
  uint32_t i;                               /* loop counter */
  uint32_t NbBytesToCopy = 0, NbCopiedBytes = 0 ; /* Indicators for copying bytes in queue */
 800f264:	2300      	movs	r3, #0
 800f266:	62bb      	str	r3, [r7, #40]	; 0x28
 800f268:	2300      	movs	r3, #0
 800f26a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t eob_free_size;                         /* Eof End of Quque Buffer Free Size */
  uint8_t  wrap_will_occur = 0;                   /* indicate if a wrap around will occurs */
 800f26c:	2300      	movs	r3, #0
 800f26e:	77bb      	strb	r3, [r7, #30]
  uint8_t  wrapped_element_eob_size;              /* In case of Wrap around, indicat size of parta of elemenet that fit at thened of the queuue  buffer */
  uint16_t overhead = 0;                          /* In case of CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG or CIRCULAR_QUEUE_NO_WRAP_FLAG options, 
 800f270:	2300      	movs	r3, #0
 800f272:	83bb      	strh	r3, [r7, #28]
                                                     indcate the size overhead that will be generated by adding the element with wrap management (split or no wrap ) */ 
  
  
  elemSizeStorageRoom  = (q->elementSize == 0) ? 2 : 0;
 800f274:	68fb      	ldr	r3, [r7, #12]
 800f276:	891b      	ldrh	r3, [r3, #8]
 800f278:	2b00      	cmp	r3, #0
 800f27a:	d101      	bne.n	800f280 <CircularQueue_Add+0x38>
 800f27c:	2302      	movs	r3, #2
 800f27e:	e000      	b.n	800f282 <CircularQueue_Add+0x3a>
 800f280:	2300      	movs	r3, #0
 800f282:	77fb      	strb	r3, [r7, #31]
  /* retrieve the size of last element sored: the value stored at the beginning of the queue element if element size is variable otherwise take it from fixed element Size member */
  if (q->byteCount)
 800f284:	68fb      	ldr	r3, [r7, #12]
 800f286:	695b      	ldr	r3, [r3, #20]
 800f288:	2b00      	cmp	r3, #0
 800f28a:	d02a      	beq.n	800f2e2 <CircularQueue_Add+0x9a>
  {
    curElementSize = (q->elementSize == 0) ? q->qBuff[q->last] + ((q->qBuff[MOD((q->last+1), q->queueMaxSize)])<<8) + 2 : q->elementSize;
 800f28c:	68fb      	ldr	r3, [r7, #12]
 800f28e:	891b      	ldrh	r3, [r3, #8]
 800f290:	2b00      	cmp	r3, #0
 800f292:	d123      	bne.n	800f2dc <CircularQueue_Add+0x94>
 800f294:	68fb      	ldr	r3, [r7, #12]
 800f296:	681a      	ldr	r2, [r3, #0]
 800f298:	68fb      	ldr	r3, [r7, #12]
 800f29a:	691b      	ldr	r3, [r3, #16]
 800f29c:	4413      	add	r3, r2
 800f29e:	781b      	ldrb	r3, [r3, #0]
 800f2a0:	b29a      	uxth	r2, r3
 800f2a2:	68fb      	ldr	r3, [r7, #12]
 800f2a4:	6819      	ldr	r1, [r3, #0]
 800f2a6:	68fb      	ldr	r3, [r7, #12]
 800f2a8:	691b      	ldr	r3, [r3, #16]
 800f2aa:	1c58      	adds	r0, r3, #1
 800f2ac:	68fb      	ldr	r3, [r7, #12]
 800f2ae:	685b      	ldr	r3, [r3, #4]
 800f2b0:	4298      	cmp	r0, r3
 800f2b2:	d306      	bcc.n	800f2c2 <CircularQueue_Add+0x7a>
 800f2b4:	68fb      	ldr	r3, [r7, #12]
 800f2b6:	6918      	ldr	r0, [r3, #16]
 800f2b8:	68fb      	ldr	r3, [r7, #12]
 800f2ba:	685b      	ldr	r3, [r3, #4]
 800f2bc:	1ac3      	subs	r3, r0, r3
 800f2be:	3301      	adds	r3, #1
 800f2c0:	e002      	b.n	800f2c8 <CircularQueue_Add+0x80>
 800f2c2:	68fb      	ldr	r3, [r7, #12]
 800f2c4:	691b      	ldr	r3, [r3, #16]
 800f2c6:	3301      	adds	r3, #1
 800f2c8:	440b      	add	r3, r1
 800f2ca:	781b      	ldrb	r3, [r3, #0]
 800f2cc:	b29b      	uxth	r3, r3
 800f2ce:	021b      	lsls	r3, r3, #8
 800f2d0:	b29b      	uxth	r3, r3
 800f2d2:	4413      	add	r3, r2
 800f2d4:	b29b      	uxth	r3, r3
 800f2d6:	3302      	adds	r3, #2
 800f2d8:	b29b      	uxth	r3, r3
 800f2da:	e001      	b.n	800f2e0 <CircularQueue_Add+0x98>
 800f2dc:	68fb      	ldr	r3, [r7, #12]
 800f2de:	891b      	ldrh	r3, [r3, #8]
 800f2e0:	86fb      	strh	r3, [r7, #54]	; 0x36
  }
  /* if queue element have fixed size , reset the elementSize arg with fixed element size value */
  if (q->elementSize > 0)               
 800f2e2:	68fb      	ldr	r3, [r7, #12]
 800f2e4:	891b      	ldrh	r3, [r3, #8]
 800f2e6:	2b00      	cmp	r3, #0
 800f2e8:	d002      	beq.n	800f2f0 <CircularQueue_Add+0xa8>
  {
    elementSize = q->elementSize;
 800f2ea:	68fb      	ldr	r3, [r7, #12]
 800f2ec:	891b      	ldrh	r3, [r3, #8]
 800f2ee:	80fb      	strh	r3, [r7, #6]
  }

   eob_free_size = (q->last >= q->first) ? q->queueMaxSize - (q->last + curElementSize) : 0;
 800f2f0:	68fb      	ldr	r3, [r7, #12]
 800f2f2:	691a      	ldr	r2, [r3, #16]
 800f2f4:	68fb      	ldr	r3, [r7, #12]
 800f2f6:	68db      	ldr	r3, [r3, #12]
 800f2f8:	429a      	cmp	r2, r3
 800f2fa:	d307      	bcc.n	800f30c <CircularQueue_Add+0xc4>
 800f2fc:	68fb      	ldr	r3, [r7, #12]
 800f2fe:	685a      	ldr	r2, [r3, #4]
 800f300:	68fb      	ldr	r3, [r7, #12]
 800f302:	6919      	ldr	r1, [r3, #16]
 800f304:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800f306:	440b      	add	r3, r1
 800f308:	1ad3      	subs	r3, r2, r3
 800f30a:	e000      	b.n	800f30e <CircularQueue_Add+0xc6>
 800f30c:	2300      	movs	r3, #0
 800f30e:	61bb      	str	r3, [r7, #24]

   /* check how many bytes of wrapped element (if anay) are at end of buffer */
   wrapped_element_eob_size = (((elementSize + elemSizeStorageRoom )*nbElements) < eob_free_size) ? 0 : (eob_free_size % (elementSize + elemSizeStorageRoom));
 800f310:	88fa      	ldrh	r2, [r7, #6]
 800f312:	7ffb      	ldrb	r3, [r7, #31]
 800f314:	4413      	add	r3, r2
 800f316:	461a      	mov	r2, r3
 800f318:	683b      	ldr	r3, [r7, #0]
 800f31a:	fb03 f302 	mul.w	r3, r3, r2
 800f31e:	69ba      	ldr	r2, [r7, #24]
 800f320:	429a      	cmp	r2, r3
 800f322:	d80b      	bhi.n	800f33c <CircularQueue_Add+0xf4>
 800f324:	88fa      	ldrh	r2, [r7, #6]
 800f326:	7ffb      	ldrb	r3, [r7, #31]
 800f328:	4413      	add	r3, r2
 800f32a:	461a      	mov	r2, r3
 800f32c:	69bb      	ldr	r3, [r7, #24]
 800f32e:	fbb3 f1f2 	udiv	r1, r3, r2
 800f332:	fb02 f201 	mul.w	r2, r2, r1
 800f336:	1a9b      	subs	r3, r3, r2
 800f338:	b2db      	uxtb	r3, r3
 800f33a:	e000      	b.n	800f33e <CircularQueue_Add+0xf6>
 800f33c:	2300      	movs	r3, #0
 800f33e:	75fb      	strb	r3, [r7, #23]
   wrap_will_occur  = wrapped_element_eob_size > elemSizeStorageRoom;
 800f340:	7dfa      	ldrb	r2, [r7, #23]
 800f342:	7ffb      	ldrb	r3, [r7, #31]
 800f344:	429a      	cmp	r2, r3
 800f346:	bf8c      	ite	hi
 800f348:	2301      	movhi	r3, #1
 800f34a:	2300      	movls	r3, #0
 800f34c:	b2db      	uxtb	r3, r3
 800f34e:	77bb      	strb	r3, [r7, #30]

   overhead = (wrap_will_occur && (q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG)) ? wrapped_element_eob_size : overhead;
 800f350:	7fbb      	ldrb	r3, [r7, #30]
 800f352:	2b00      	cmp	r3, #0
 800f354:	d008      	beq.n	800f368 <CircularQueue_Add+0x120>
 800f356:	68fb      	ldr	r3, [r7, #12]
 800f358:	7f1b      	ldrb	r3, [r3, #28]
 800f35a:	f003 0301 	and.w	r3, r3, #1
 800f35e:	2b00      	cmp	r3, #0
 800f360:	d002      	beq.n	800f368 <CircularQueue_Add+0x120>
 800f362:	7dfb      	ldrb	r3, [r7, #23]
 800f364:	b29b      	uxth	r3, r3
 800f366:	e000      	b.n	800f36a <CircularQueue_Add+0x122>
 800f368:	8bbb      	ldrh	r3, [r7, #28]
 800f36a:	83bb      	strh	r3, [r7, #28]
   overhead = (wrap_will_occur && (q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG)) ? elemSizeStorageRoom  : overhead;
 800f36c:	7fbb      	ldrb	r3, [r7, #30]
 800f36e:	2b00      	cmp	r3, #0
 800f370:	d008      	beq.n	800f384 <CircularQueue_Add+0x13c>
 800f372:	68fb      	ldr	r3, [r7, #12]
 800f374:	7f1b      	ldrb	r3, [r3, #28]
 800f376:	f003 0302 	and.w	r3, r3, #2
 800f37a:	2b00      	cmp	r3, #0
 800f37c:	d002      	beq.n	800f384 <CircularQueue_Add+0x13c>
 800f37e:	7ffb      	ldrb	r3, [r7, #31]
 800f380:	b29b      	uxth	r3, r3
 800f382:	e000      	b.n	800f386 <CircularQueue_Add+0x13e>
 800f384:	8bbb      	ldrh	r3, [r7, #28]
 800f386:	83bb      	strh	r3, [r7, #28]
   
   
  /* Store now the elements if ennough room for all elements */
  if (elementSize && ((q->byteCount + ((elementSize + elemSizeStorageRoom )*nbElements) + overhead) <= q->queueMaxSize)) 
 800f388:	88fb      	ldrh	r3, [r7, #6]
 800f38a:	2b00      	cmp	r3, #0
 800f38c:	f000 817e 	beq.w	800f68c <CircularQueue_Add+0x444>
 800f390:	68fb      	ldr	r3, [r7, #12]
 800f392:	695a      	ldr	r2, [r3, #20]
 800f394:	88f9      	ldrh	r1, [r7, #6]
 800f396:	7ffb      	ldrb	r3, [r7, #31]
 800f398:	440b      	add	r3, r1
 800f39a:	4619      	mov	r1, r3
 800f39c:	683b      	ldr	r3, [r7, #0]
 800f39e:	fb03 f301 	mul.w	r3, r3, r1
 800f3a2:	441a      	add	r2, r3
 800f3a4:	8bbb      	ldrh	r3, [r7, #28]
 800f3a6:	441a      	add	r2, r3
 800f3a8:	68fb      	ldr	r3, [r7, #12]
 800f3aa:	685b      	ldr	r3, [r3, #4]
 800f3ac:	429a      	cmp	r2, r3
 800f3ae:	f200 816d 	bhi.w	800f68c <CircularQueue_Add+0x444>
  { 
    /* loop to add all elements  */
    for (i=0; i < nbElements; i++) 
 800f3b2:	2300      	movs	r3, #0
 800f3b4:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f3b6:	e14a      	b.n	800f64e <CircularQueue_Add+0x406>
    {
      q->last = MOD ((q->last + curElementSize),q->queueMaxSize);
 800f3b8:	68fb      	ldr	r3, [r7, #12]
 800f3ba:	691a      	ldr	r2, [r3, #16]
 800f3bc:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800f3be:	441a      	add	r2, r3
 800f3c0:	68fb      	ldr	r3, [r7, #12]
 800f3c2:	685b      	ldr	r3, [r3, #4]
 800f3c4:	429a      	cmp	r2, r3
 800f3c6:	d307      	bcc.n	800f3d8 <CircularQueue_Add+0x190>
 800f3c8:	68fb      	ldr	r3, [r7, #12]
 800f3ca:	691a      	ldr	r2, [r3, #16]
 800f3cc:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800f3ce:	441a      	add	r2, r3
 800f3d0:	68fb      	ldr	r3, [r7, #12]
 800f3d2:	685b      	ldr	r3, [r3, #4]
 800f3d4:	1ad3      	subs	r3, r2, r3
 800f3d6:	e003      	b.n	800f3e0 <CircularQueue_Add+0x198>
 800f3d8:	68fb      	ldr	r3, [r7, #12]
 800f3da:	691a      	ldr	r2, [r3, #16]
 800f3dc:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800f3de:	4413      	add	r3, r2
 800f3e0:	68fa      	ldr	r2, [r7, #12]
 800f3e2:	6113      	str	r3, [r2, #16]
      curBuffPosition = q->last;
 800f3e4:	68fb      	ldr	r3, [r7, #12]
 800f3e6:	691b      	ldr	r3, [r3, #16]
 800f3e8:	633b      	str	r3, [r7, #48]	; 0x30
      
      /* store the element  */
      /* store fisrt the element size if element size is varaible */
      if (q->elementSize == 0) 
 800f3ea:	68fb      	ldr	r3, [r7, #12]
 800f3ec:	891b      	ldrh	r3, [r3, #8]
 800f3ee:	2b00      	cmp	r3, #0
 800f3f0:	d130      	bne.n	800f454 <CircularQueue_Add+0x20c>
      {
        q->qBuff[curBuffPosition++]= elementSize & 0xFF;
 800f3f2:	68fb      	ldr	r3, [r7, #12]
 800f3f4:	681a      	ldr	r2, [r3, #0]
 800f3f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f3f8:	1c59      	adds	r1, r3, #1
 800f3fa:	6339      	str	r1, [r7, #48]	; 0x30
 800f3fc:	4413      	add	r3, r2
 800f3fe:	88fa      	ldrh	r2, [r7, #6]
 800f400:	b2d2      	uxtb	r2, r2
 800f402:	701a      	strb	r2, [r3, #0]
        curBuffPosition = MOD(curBuffPosition, q->queueMaxSize);
 800f404:	68fb      	ldr	r3, [r7, #12]
 800f406:	685b      	ldr	r3, [r3, #4]
 800f408:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f40a:	429a      	cmp	r2, r3
 800f40c:	d304      	bcc.n	800f418 <CircularQueue_Add+0x1d0>
 800f40e:	68fb      	ldr	r3, [r7, #12]
 800f410:	685b      	ldr	r3, [r3, #4]
 800f412:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f414:	1ad3      	subs	r3, r2, r3
 800f416:	e000      	b.n	800f41a <CircularQueue_Add+0x1d2>
 800f418:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f41a:	633b      	str	r3, [r7, #48]	; 0x30
        q->qBuff[curBuffPosition++]= (elementSize & 0xFF00) >> 8 ;
 800f41c:	88fb      	ldrh	r3, [r7, #6]
 800f41e:	0a1b      	lsrs	r3, r3, #8
 800f420:	b298      	uxth	r0, r3
 800f422:	68fb      	ldr	r3, [r7, #12]
 800f424:	681a      	ldr	r2, [r3, #0]
 800f426:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f428:	1c59      	adds	r1, r3, #1
 800f42a:	6339      	str	r1, [r7, #48]	; 0x30
 800f42c:	4413      	add	r3, r2
 800f42e:	b2c2      	uxtb	r2, r0
 800f430:	701a      	strb	r2, [r3, #0]
        curBuffPosition = MOD(curBuffPosition, q->queueMaxSize);
 800f432:	68fb      	ldr	r3, [r7, #12]
 800f434:	685b      	ldr	r3, [r3, #4]
 800f436:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f438:	429a      	cmp	r2, r3
 800f43a:	d304      	bcc.n	800f446 <CircularQueue_Add+0x1fe>
 800f43c:	68fb      	ldr	r3, [r7, #12]
 800f43e:	685b      	ldr	r3, [r3, #4]
 800f440:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f442:	1ad3      	subs	r3, r2, r3
 800f444:	e000      	b.n	800f448 <CircularQueue_Add+0x200>
 800f446:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f448:	633b      	str	r3, [r7, #48]	; 0x30
        q->byteCount += 2;
 800f44a:	68fb      	ldr	r3, [r7, #12]
 800f44c:	695b      	ldr	r3, [r3, #20]
 800f44e:	1c9a      	adds	r2, r3, #2
 800f450:	68fb      	ldr	r3, [r7, #12]
 800f452:	615a      	str	r2, [r3, #20]
      }
      
      /* Identify number of bytes of copy takeing account possible wrap, in this case NbBytesToCopy will contains size that fit at end of the queue buffer */
      NbBytesToCopy = MIN((q->queueMaxSize-curBuffPosition),elementSize);
 800f454:	88fa      	ldrh	r2, [r7, #6]
 800f456:	68fb      	ldr	r3, [r7, #12]
 800f458:	6859      	ldr	r1, [r3, #4]
 800f45a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f45c:	1acb      	subs	r3, r1, r3
 800f45e:	4293      	cmp	r3, r2
 800f460:	bf28      	it	cs
 800f462:	4613      	movcs	r3, r2
 800f464:	62bb      	str	r3, [r7, #40]	; 0x28
      /* check if no wrap (NbBytesToCopy == elementSize) or if Wrap and no spsicf option; 
         In thi case part of data will copied at the end of the buffer and the rest a the beggining */
      if ((NbBytesToCopy == elementSize) || ((NbBytesToCopy < elementSize) && (q->optionFlags == CIRCULAR_QUEUE_NO_FLAG)))
 800f466:	88fb      	ldrh	r3, [r7, #6]
 800f468:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f46a:	429a      	cmp	r2, r3
 800f46c:	d007      	beq.n	800f47e <CircularQueue_Add+0x236>
 800f46e:	88fb      	ldrh	r3, [r7, #6]
 800f470:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f472:	429a      	cmp	r2, r3
 800f474:	d225      	bcs.n	800f4c2 <CircularQueue_Add+0x27a>
 800f476:	68fb      	ldr	r3, [r7, #12]
 800f478:	7f1b      	ldrb	r3, [r3, #28]
 800f47a:	2b00      	cmp	r3, #0
 800f47c:	d121      	bne.n	800f4c2 <CircularQueue_Add+0x27a>
      {
        /* Copy First part (or emtire buffer ) from current position up to the end of the buffer queue (or before if enough room)  */
        memcpy(&q->qBuff[curBuffPosition],&x[i*elementSize],NbBytesToCopy);
 800f47e:	68fb      	ldr	r3, [r7, #12]
 800f480:	681a      	ldr	r2, [r3, #0]
 800f482:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f484:	18d0      	adds	r0, r2, r3
 800f486:	88fb      	ldrh	r3, [r7, #6]
 800f488:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f48a:	fb02 f303 	mul.w	r3, r2, r3
 800f48e:	68ba      	ldr	r2, [r7, #8]
 800f490:	4413      	add	r3, r2
 800f492:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f494:	4619      	mov	r1, r3
 800f496:	f004 fcf1 	bl	8013e7c <memcpy>
        /* Adjust bytes count */
        q->byteCount += NbBytesToCopy;
 800f49a:	68fb      	ldr	r3, [r7, #12]
 800f49c:	695a      	ldr	r2, [r3, #20]
 800f49e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f4a0:	441a      	add	r2, r3
 800f4a2:	68fb      	ldr	r3, [r7, #12]
 800f4a4:	615a      	str	r2, [r3, #20]
        /* Wrap */
        curBuffPosition = 0; 
 800f4a6:	2300      	movs	r3, #0
 800f4a8:	633b      	str	r3, [r7, #48]	; 0x30
        /* set NbCopiedBytes bytes with  ampount copied */
        NbCopiedBytes = NbBytesToCopy;
 800f4aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f4ac:	627b      	str	r3, [r7, #36]	; 0x24
        /* set the rest to copy if wrao , if no wrap will be 0 */
        NbBytesToCopy = elementSize - NbBytesToCopy;
 800f4ae:	88fa      	ldrh	r2, [r7, #6]
 800f4b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f4b2:	1ad3      	subs	r3, r2, r3
 800f4b4:	62bb      	str	r3, [r7, #40]	; 0x28
        /* set the current element Size, will be used to calaculate next last position at beggining of loop */
        curElementSize = (elementSize) + elemSizeStorageRoom ;
 800f4b6:	7ffb      	ldrb	r3, [r7, #31]
 800f4b8:	b29a      	uxth	r2, r3
 800f4ba:	88fb      	ldrh	r3, [r7, #6]
 800f4bc:	4413      	add	r3, r2
 800f4be:	86fb      	strh	r3, [r7, #54]	; 0x36
 800f4c0:	e0a4      	b.n	800f60c <CircularQueue_Add+0x3c4>
      }
      else if (NbBytesToCopy)  /* We have a wrap  to manage */
 800f4c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f4c4:	2b00      	cmp	r3, #0
 800f4c6:	f000 80a1 	beq.w	800f60c <CircularQueue_Add+0x3c4>
      {
       /* case of CIRCULAR_QUEUE_NO_WRAP_FLAG option */
         if (q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG)
 800f4ca:	68fb      	ldr	r3, [r7, #12]
 800f4cc:	7f1b      	ldrb	r3, [r3, #28]
 800f4ce:	f003 0301 	and.w	r3, r3, #1
 800f4d2:	2b00      	cmp	r3, #0
 800f4d4:	d03a      	beq.n	800f54c <CircularQueue_Add+0x304>
        {
          /* if element size are variable and NO_WRAP option, Invalidate end of buffer setting 0xFFFF size*/
          if (q->elementSize == 0)
 800f4d6:	68fb      	ldr	r3, [r7, #12]
 800f4d8:	891b      	ldrh	r3, [r3, #8]
 800f4da:	2b00      	cmp	r3, #0
 800f4dc:	d10d      	bne.n	800f4fa <CircularQueue_Add+0x2b2>
          {
             q->qBuff[curBuffPosition-2] = 0xFF;
 800f4de:	68fb      	ldr	r3, [r7, #12]
 800f4e0:	681a      	ldr	r2, [r3, #0]
 800f4e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f4e4:	3b02      	subs	r3, #2
 800f4e6:	4413      	add	r3, r2
 800f4e8:	22ff      	movs	r2, #255	; 0xff
 800f4ea:	701a      	strb	r2, [r3, #0]
             q->qBuff[curBuffPosition-1] = 0xFF;
 800f4ec:	68fb      	ldr	r3, [r7, #12]
 800f4ee:	681a      	ldr	r2, [r3, #0]
 800f4f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f4f2:	3b01      	subs	r3, #1
 800f4f4:	4413      	add	r3, r2
 800f4f6:	22ff      	movs	r2, #255	; 0xff
 800f4f8:	701a      	strb	r2, [r3, #0]
          }
          q->byteCount += NbBytesToCopy;  /* invalid data at the end of buffer are take into account in byteCount */
 800f4fa:	68fb      	ldr	r3, [r7, #12]
 800f4fc:	695a      	ldr	r2, [r3, #20]
 800f4fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f500:	441a      	add	r2, r3
 800f502:	68fb      	ldr	r3, [r7, #12]
 800f504:	615a      	str	r2, [r3, #20]
          /* No bytes coped a the end of buffer */
          NbCopiedBytes = 0;
 800f506:	2300      	movs	r3, #0
 800f508:	627b      	str	r3, [r7, #36]	; 0x24
          /* all element to be copied at the begnning of buffer */
          NbBytesToCopy = elementSize; 
 800f50a:	88fb      	ldrh	r3, [r7, #6]
 800f50c:	62bb      	str	r3, [r7, #40]	; 0x28
          /* Wrap */
          curBuffPosition = 0; 
 800f50e:	2300      	movs	r3, #0
 800f510:	633b      	str	r3, [r7, #48]	; 0x30
          /* if variable size element, invalidate end of buffer setting OxFFFF in element header (size) */
          if (q->elementSize == 0)
 800f512:	68fb      	ldr	r3, [r7, #12]
 800f514:	891b      	ldrh	r3, [r3, #8]
 800f516:	2b00      	cmp	r3, #0
 800f518:	d16f      	bne.n	800f5fa <CircularQueue_Add+0x3b2>
          {
            q->qBuff[curBuffPosition++] = NbBytesToCopy & 0xFF;
 800f51a:	68fb      	ldr	r3, [r7, #12]
 800f51c:	681a      	ldr	r2, [r3, #0]
 800f51e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f520:	1c59      	adds	r1, r3, #1
 800f522:	6339      	str	r1, [r7, #48]	; 0x30
 800f524:	4413      	add	r3, r2
 800f526:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f528:	b2d2      	uxtb	r2, r2
 800f52a:	701a      	strb	r2, [r3, #0]
            q->qBuff[curBuffPosition++] = (NbBytesToCopy & 0xFF00) >> 8 ;
 800f52c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f52e:	0a18      	lsrs	r0, r3, #8
 800f530:	68fb      	ldr	r3, [r7, #12]
 800f532:	681a      	ldr	r2, [r3, #0]
 800f534:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f536:	1c59      	adds	r1, r3, #1
 800f538:	6339      	str	r1, [r7, #48]	; 0x30
 800f53a:	4413      	add	r3, r2
 800f53c:	b2c2      	uxtb	r2, r0
 800f53e:	701a      	strb	r2, [r3, #0]
            q->byteCount += 2;   
 800f540:	68fb      	ldr	r3, [r7, #12]
 800f542:	695b      	ldr	r3, [r3, #20]
 800f544:	1c9a      	adds	r2, r3, #2
 800f546:	68fb      	ldr	r3, [r7, #12]
 800f548:	615a      	str	r2, [r3, #20]
 800f54a:	e056      	b.n	800f5fa <CircularQueue_Add+0x3b2>
          } 
           
        }
        /* case of CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG option */
        else if (q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG)
 800f54c:	68fb      	ldr	r3, [r7, #12]
 800f54e:	7f1b      	ldrb	r3, [r3, #28]
 800f550:	f003 0302 	and.w	r3, r3, #2
 800f554:	2b00      	cmp	r3, #0
 800f556:	d050      	beq.n	800f5fa <CircularQueue_Add+0x3b2>
        {
          if (q->elementSize == 0)
 800f558:	68fb      	ldr	r3, [r7, #12]
 800f55a:	891b      	ldrh	r3, [r3, #8]
 800f55c:	2b00      	cmp	r3, #0
 800f55e:	d14a      	bne.n	800f5f6 <CircularQueue_Add+0x3ae>
          {
            /* reset the size of current element to the nb bytes fitting at the end of buffer */
             q->qBuff[curBuffPosition-2] = NbBytesToCopy & 0xFF;
 800f560:	68fb      	ldr	r3, [r7, #12]
 800f562:	681a      	ldr	r2, [r3, #0]
 800f564:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f566:	3b02      	subs	r3, #2
 800f568:	4413      	add	r3, r2
 800f56a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f56c:	b2d2      	uxtb	r2, r2
 800f56e:	701a      	strb	r2, [r3, #0]
             q->qBuff[curBuffPosition-1] = (NbBytesToCopy & 0xFF00) >> 8 ;
 800f570:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f572:	0a19      	lsrs	r1, r3, #8
 800f574:	68fb      	ldr	r3, [r7, #12]
 800f576:	681a      	ldr	r2, [r3, #0]
 800f578:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f57a:	3b01      	subs	r3, #1
 800f57c:	4413      	add	r3, r2
 800f57e:	b2ca      	uxtb	r2, r1
 800f580:	701a      	strb	r2, [r3, #0]
             /* copy the bytes */ 
             memcpy(&q->qBuff[curBuffPosition],&x[i*elementSize],NbBytesToCopy);
 800f582:	68fb      	ldr	r3, [r7, #12]
 800f584:	681a      	ldr	r2, [r3, #0]
 800f586:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f588:	18d0      	adds	r0, r2, r3
 800f58a:	88fb      	ldrh	r3, [r7, #6]
 800f58c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f58e:	fb02 f303 	mul.w	r3, r2, r3
 800f592:	68ba      	ldr	r2, [r7, #8]
 800f594:	4413      	add	r3, r2
 800f596:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f598:	4619      	mov	r1, r3
 800f59a:	f004 fc6f 	bl	8013e7c <memcpy>
             q->byteCount += NbBytesToCopy; 
 800f59e:	68fb      	ldr	r3, [r7, #12]
 800f5a0:	695a      	ldr	r2, [r3, #20]
 800f5a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f5a4:	441a      	add	r2, r3
 800f5a6:	68fb      	ldr	r3, [r7, #12]
 800f5a8:	615a      	str	r2, [r3, #20]
             /* set the number of copied bytes */
             NbCopiedBytes = NbBytesToCopy;             
 800f5aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f5ac:	627b      	str	r3, [r7, #36]	; 0x24
             /* set rest of data to be copied to begnning of buffer */
             NbBytesToCopy = elementSize - NbBytesToCopy;
 800f5ae:	88fa      	ldrh	r2, [r7, #6]
 800f5b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f5b2:	1ad3      	subs	r3, r2, r3
 800f5b4:	62bb      	str	r3, [r7, #40]	; 0x28
             /* one element more dur to split in 2 elements */
             q->elementCount++;
 800f5b6:	68fb      	ldr	r3, [r7, #12]
 800f5b8:	699b      	ldr	r3, [r3, #24]
 800f5ba:	1c5a      	adds	r2, r3, #1
 800f5bc:	68fb      	ldr	r3, [r7, #12]
 800f5be:	619a      	str	r2, [r3, #24]
             /* Wrap */
             curBuffPosition = 0; 
 800f5c0:	2300      	movs	r3, #0
 800f5c2:	633b      	str	r3, [r7, #48]	; 0x30
             /* Set new size for rest of data */
             q->qBuff[curBuffPosition++] = NbBytesToCopy & 0xFF;
 800f5c4:	68fb      	ldr	r3, [r7, #12]
 800f5c6:	681a      	ldr	r2, [r3, #0]
 800f5c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f5ca:	1c59      	adds	r1, r3, #1
 800f5cc:	6339      	str	r1, [r7, #48]	; 0x30
 800f5ce:	4413      	add	r3, r2
 800f5d0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f5d2:	b2d2      	uxtb	r2, r2
 800f5d4:	701a      	strb	r2, [r3, #0]
             q->qBuff[curBuffPosition++] = (NbBytesToCopy & 0xFF00) >> 8 ;
 800f5d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f5d8:	0a18      	lsrs	r0, r3, #8
 800f5da:	68fb      	ldr	r3, [r7, #12]
 800f5dc:	681a      	ldr	r2, [r3, #0]
 800f5de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f5e0:	1c59      	adds	r1, r3, #1
 800f5e2:	6339      	str	r1, [r7, #48]	; 0x30
 800f5e4:	4413      	add	r3, r2
 800f5e6:	b2c2      	uxtb	r2, r0
 800f5e8:	701a      	strb	r2, [r3, #0]
             q->byteCount += 2;              
 800f5ea:	68fb      	ldr	r3, [r7, #12]
 800f5ec:	695b      	ldr	r3, [r3, #20]
 800f5ee:	1c9a      	adds	r2, r3, #2
 800f5f0:	68fb      	ldr	r3, [r7, #12]
 800f5f2:	615a      	str	r2, [r3, #20]
 800f5f4:	e001      	b.n	800f5fa <CircularQueue_Add+0x3b2>
          else
          {
            /* Should not occur */
            /* can not manage split Flag on Fixed size element */
            /* Buffer is corrupted */
            return NULL;
 800f5f6:	2300      	movs	r3, #0
 800f5f8:	e049      	b.n	800f68e <CircularQueue_Add+0x446>
          }
        }
        curElementSize = (NbBytesToCopy) + elemSizeStorageRoom ;
 800f5fa:	7ffb      	ldrb	r3, [r7, #31]
 800f5fc:	b29a      	uxth	r2, r3
 800f5fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f600:	b29b      	uxth	r3, r3
 800f602:	4413      	add	r3, r2
 800f604:	86fb      	strh	r3, [r7, #54]	; 0x36
        q->last = 0;        
 800f606:	68fb      	ldr	r3, [r7, #12]
 800f608:	2200      	movs	r2, #0
 800f60a:	611a      	str	r2, [r3, #16]
      }  
      
      /* some remaning byte to copy */
      if (NbBytesToCopy)      
 800f60c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f60e:	2b00      	cmp	r3, #0
 800f610:	d015      	beq.n	800f63e <CircularQueue_Add+0x3f6>
      {
        memcpy(&q->qBuff[curBuffPosition],&x[(i*elementSize)+NbCopiedBytes],NbBytesToCopy);
 800f612:	68fb      	ldr	r3, [r7, #12]
 800f614:	681a      	ldr	r2, [r3, #0]
 800f616:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f618:	18d0      	adds	r0, r2, r3
 800f61a:	88fb      	ldrh	r3, [r7, #6]
 800f61c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f61e:	fb02 f203 	mul.w	r2, r2, r3
 800f622:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f624:	4413      	add	r3, r2
 800f626:	68ba      	ldr	r2, [r7, #8]
 800f628:	4413      	add	r3, r2
 800f62a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f62c:	4619      	mov	r1, r3
 800f62e:	f004 fc25 	bl	8013e7c <memcpy>
        q->byteCount += NbBytesToCopy;
 800f632:	68fb      	ldr	r3, [r7, #12]
 800f634:	695a      	ldr	r2, [r3, #20]
 800f636:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f638:	441a      	add	r2, r3
 800f63a:	68fb      	ldr	r3, [r7, #12]
 800f63c:	615a      	str	r2, [r3, #20]
      }      
      
      /* One more element */
      q->elementCount++;
 800f63e:	68fb      	ldr	r3, [r7, #12]
 800f640:	699b      	ldr	r3, [r3, #24]
 800f642:	1c5a      	adds	r2, r3, #1
 800f644:	68fb      	ldr	r3, [r7, #12]
 800f646:	619a      	str	r2, [r3, #24]
    for (i=0; i < nbElements; i++) 
 800f648:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f64a:	3301      	adds	r3, #1
 800f64c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f64e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f650:	683b      	ldr	r3, [r7, #0]
 800f652:	429a      	cmp	r2, r3
 800f654:	f4ff aeb0 	bcc.w	800f3b8 <CircularQueue_Add+0x170>
    }
    
    ptr = q->qBuff + (MOD((q->last+elemSizeStorageRoom ),q->queueMaxSize));
 800f658:	68fb      	ldr	r3, [r7, #12]
 800f65a:	681a      	ldr	r2, [r3, #0]
 800f65c:	68fb      	ldr	r3, [r7, #12]
 800f65e:	6919      	ldr	r1, [r3, #16]
 800f660:	7ffb      	ldrb	r3, [r7, #31]
 800f662:	4419      	add	r1, r3
 800f664:	68fb      	ldr	r3, [r7, #12]
 800f666:	685b      	ldr	r3, [r3, #4]
 800f668:	4299      	cmp	r1, r3
 800f66a:	d307      	bcc.n	800f67c <CircularQueue_Add+0x434>
 800f66c:	68fb      	ldr	r3, [r7, #12]
 800f66e:	6919      	ldr	r1, [r3, #16]
 800f670:	7ffb      	ldrb	r3, [r7, #31]
 800f672:	4419      	add	r1, r3
 800f674:	68fb      	ldr	r3, [r7, #12]
 800f676:	685b      	ldr	r3, [r3, #4]
 800f678:	1acb      	subs	r3, r1, r3
 800f67a:	e003      	b.n	800f684 <CircularQueue_Add+0x43c>
 800f67c:	68fb      	ldr	r3, [r7, #12]
 800f67e:	6919      	ldr	r1, [r3, #16]
 800f680:	7ffb      	ldrb	r3, [r7, #31]
 800f682:	440b      	add	r3, r1
 800f684:	4413      	add	r3, r2
 800f686:	623b      	str	r3, [r7, #32]
  /* for Breakpoint only...to remove */
  else
  {
    return NULL;
  }
  return ptr;
 800f688:	6a3b      	ldr	r3, [r7, #32]
 800f68a:	e000      	b.n	800f68e <CircularQueue_Add+0x446>
    return NULL;
 800f68c:	2300      	movs	r3, #0
}
 800f68e:	4618      	mov	r0, r3
 800f690:	3738      	adds	r7, #56	; 0x38
 800f692:	46bd      	mov	sp, r7
 800f694:	bd80      	pop	{r7, pc}

0800f696 <CircularQueue_Remove>:
  * @param  q: pointer on queue structure  to be handled
  * @param  elementSize: Pointer to return Size of element to be removed  
  * @retval Pointer on removed element. NULL if queue was empty
  */
uint8_t* CircularQueue_Remove(queue_t *q, uint16_t* elementSize)
{
 800f696:	b480      	push	{r7}
 800f698:	b085      	sub	sp, #20
 800f69a:	af00      	add	r7, sp, #0
 800f69c:	6078      	str	r0, [r7, #4]
 800f69e:	6039      	str	r1, [r7, #0]
  uint8_t  elemSizeStorageRoom = 0;
 800f6a0:	2300      	movs	r3, #0
 800f6a2:	72fb      	strb	r3, [r7, #11]
  uint8_t* ptr= NULL;
 800f6a4:	2300      	movs	r3, #0
 800f6a6:	60fb      	str	r3, [r7, #12]
  elemSizeStorageRoom = (q->elementSize == 0) ? 2 : 0;
 800f6a8:	687b      	ldr	r3, [r7, #4]
 800f6aa:	891b      	ldrh	r3, [r3, #8]
 800f6ac:	2b00      	cmp	r3, #0
 800f6ae:	d101      	bne.n	800f6b4 <CircularQueue_Remove+0x1e>
 800f6b0:	2302      	movs	r3, #2
 800f6b2:	e000      	b.n	800f6b6 <CircularQueue_Remove+0x20>
 800f6b4:	2300      	movs	r3, #0
 800f6b6:	72fb      	strb	r3, [r7, #11]
  *elementSize = 0;
 800f6b8:	683b      	ldr	r3, [r7, #0]
 800f6ba:	2200      	movs	r2, #0
 800f6bc:	801a      	strh	r2, [r3, #0]
  if (q->byteCount > 0) 
 800f6be:	687b      	ldr	r3, [r7, #4]
 800f6c0:	695b      	ldr	r3, [r3, #20]
 800f6c2:	2b00      	cmp	r3, #0
 800f6c4:	f000 80d4 	beq.w	800f870 <CircularQueue_Remove+0x1da>
  {
    /* retreive element Size */
    *elementSize = (q->elementSize == 0) ? q->qBuff[q->first] + ((q->qBuff[MOD((q->first+1), q->queueMaxSize)])<<8) : q->elementSize;
 800f6c8:	687b      	ldr	r3, [r7, #4]
 800f6ca:	891b      	ldrh	r3, [r3, #8]
 800f6cc:	2b00      	cmp	r3, #0
 800f6ce:	d121      	bne.n	800f714 <CircularQueue_Remove+0x7e>
 800f6d0:	687b      	ldr	r3, [r7, #4]
 800f6d2:	681a      	ldr	r2, [r3, #0]
 800f6d4:	687b      	ldr	r3, [r7, #4]
 800f6d6:	68db      	ldr	r3, [r3, #12]
 800f6d8:	4413      	add	r3, r2
 800f6da:	781b      	ldrb	r3, [r3, #0]
 800f6dc:	b29a      	uxth	r2, r3
 800f6de:	687b      	ldr	r3, [r7, #4]
 800f6e0:	6819      	ldr	r1, [r3, #0]
 800f6e2:	687b      	ldr	r3, [r7, #4]
 800f6e4:	68db      	ldr	r3, [r3, #12]
 800f6e6:	1c58      	adds	r0, r3, #1
 800f6e8:	687b      	ldr	r3, [r7, #4]
 800f6ea:	685b      	ldr	r3, [r3, #4]
 800f6ec:	4298      	cmp	r0, r3
 800f6ee:	d306      	bcc.n	800f6fe <CircularQueue_Remove+0x68>
 800f6f0:	687b      	ldr	r3, [r7, #4]
 800f6f2:	68d8      	ldr	r0, [r3, #12]
 800f6f4:	687b      	ldr	r3, [r7, #4]
 800f6f6:	685b      	ldr	r3, [r3, #4]
 800f6f8:	1ac3      	subs	r3, r0, r3
 800f6fa:	3301      	adds	r3, #1
 800f6fc:	e002      	b.n	800f704 <CircularQueue_Remove+0x6e>
 800f6fe:	687b      	ldr	r3, [r7, #4]
 800f700:	68db      	ldr	r3, [r3, #12]
 800f702:	3301      	adds	r3, #1
 800f704:	440b      	add	r3, r1
 800f706:	781b      	ldrb	r3, [r3, #0]
 800f708:	b29b      	uxth	r3, r3
 800f70a:	021b      	lsls	r3, r3, #8
 800f70c:	b29b      	uxth	r3, r3
 800f70e:	4413      	add	r3, r2
 800f710:	b29b      	uxth	r3, r3
 800f712:	e001      	b.n	800f718 <CircularQueue_Remove+0x82>
 800f714:	687b      	ldr	r3, [r7, #4]
 800f716:	891b      	ldrh	r3, [r3, #8]
 800f718:	683a      	ldr	r2, [r7, #0]
 800f71a:	8013      	strh	r3, [r2, #0]

     if ((q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG) && !(q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG))
 800f71c:	687b      	ldr	r3, [r7, #4]
 800f71e:	7f1b      	ldrb	r3, [r3, #28]
 800f720:	f003 0301 	and.w	r3, r3, #1
 800f724:	2b00      	cmp	r3, #0
 800f726:	d059      	beq.n	800f7dc <CircularQueue_Remove+0x146>
 800f728:	687b      	ldr	r3, [r7, #4]
 800f72a:	7f1b      	ldrb	r3, [r3, #28]
 800f72c:	f003 0302 	and.w	r3, r3, #2
 800f730:	2b00      	cmp	r3, #0
 800f732:	d153      	bne.n	800f7dc <CircularQueue_Remove+0x146>
     {
       if (((*elementSize == 0xFFFF) && q->elementSize == 0 ) || 
 800f734:	683b      	ldr	r3, [r7, #0]
 800f736:	881b      	ldrh	r3, [r3, #0]
 800f738:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f73c:	4293      	cmp	r3, r2
 800f73e:	d103      	bne.n	800f748 <CircularQueue_Remove+0xb2>
 800f740:	687b      	ldr	r3, [r7, #4]
 800f742:	891b      	ldrh	r3, [r3, #8]
 800f744:	2b00      	cmp	r3, #0
 800f746:	d012      	beq.n	800f76e <CircularQueue_Remove+0xd8>
           ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 800f748:	687b      	ldr	r3, [r7, #4]
 800f74a:	68da      	ldr	r2, [r3, #12]
 800f74c:	687b      	ldr	r3, [r7, #4]
 800f74e:	691b      	ldr	r3, [r3, #16]
       if (((*elementSize == 0xFFFF) && q->elementSize == 0 ) || 
 800f750:	429a      	cmp	r2, r3
 800f752:	d943      	bls.n	800f7dc <CircularQueue_Remove+0x146>
           ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 800f754:	687b      	ldr	r3, [r7, #4]
 800f756:	891b      	ldrh	r3, [r3, #8]
 800f758:	2b00      	cmp	r3, #0
 800f75a:	d03f      	beq.n	800f7dc <CircularQueue_Remove+0x146>
 800f75c:	687b      	ldr	r3, [r7, #4]
 800f75e:	685a      	ldr	r2, [r3, #4]
 800f760:	687b      	ldr	r3, [r7, #4]
 800f762:	68db      	ldr	r3, [r3, #12]
 800f764:	1ad3      	subs	r3, r2, r3
 800f766:	687a      	ldr	r2, [r7, #4]
 800f768:	8912      	ldrh	r2, [r2, #8]
 800f76a:	4293      	cmp	r3, r2
 800f76c:	d236      	bcs.n	800f7dc <CircularQueue_Remove+0x146>
       {
          /* all data from current position up to the end of buffer are invalid */
          q->byteCount -= (q->queueMaxSize - q->first);
 800f76e:	687b      	ldr	r3, [r7, #4]
 800f770:	695a      	ldr	r2, [r3, #20]
 800f772:	687b      	ldr	r3, [r7, #4]
 800f774:	68d9      	ldr	r1, [r3, #12]
 800f776:	687b      	ldr	r3, [r7, #4]
 800f778:	685b      	ldr	r3, [r3, #4]
 800f77a:	1acb      	subs	r3, r1, r3
 800f77c:	441a      	add	r2, r3
 800f77e:	687b      	ldr	r3, [r7, #4]
 800f780:	615a      	str	r2, [r3, #20]
          /* Adjust first element pos */
          q->first = 0;
 800f782:	687b      	ldr	r3, [r7, #4]
 800f784:	2200      	movs	r2, #0
 800f786:	60da      	str	r2, [r3, #12]
          /* retrieve the rigth size after the wrap [if varaible size element] */
          *elementSize = (q->elementSize == 0) ? q->qBuff[q->first] + ((q->qBuff[MOD((q->first+1), q->queueMaxSize)])<<8) : q->elementSize;
 800f788:	687b      	ldr	r3, [r7, #4]
 800f78a:	891b      	ldrh	r3, [r3, #8]
 800f78c:	2b00      	cmp	r3, #0
 800f78e:	d121      	bne.n	800f7d4 <CircularQueue_Remove+0x13e>
 800f790:	687b      	ldr	r3, [r7, #4]
 800f792:	681a      	ldr	r2, [r3, #0]
 800f794:	687b      	ldr	r3, [r7, #4]
 800f796:	68db      	ldr	r3, [r3, #12]
 800f798:	4413      	add	r3, r2
 800f79a:	781b      	ldrb	r3, [r3, #0]
 800f79c:	b29a      	uxth	r2, r3
 800f79e:	687b      	ldr	r3, [r7, #4]
 800f7a0:	6819      	ldr	r1, [r3, #0]
 800f7a2:	687b      	ldr	r3, [r7, #4]
 800f7a4:	68db      	ldr	r3, [r3, #12]
 800f7a6:	1c58      	adds	r0, r3, #1
 800f7a8:	687b      	ldr	r3, [r7, #4]
 800f7aa:	685b      	ldr	r3, [r3, #4]
 800f7ac:	4298      	cmp	r0, r3
 800f7ae:	d306      	bcc.n	800f7be <CircularQueue_Remove+0x128>
 800f7b0:	687b      	ldr	r3, [r7, #4]
 800f7b2:	68d8      	ldr	r0, [r3, #12]
 800f7b4:	687b      	ldr	r3, [r7, #4]
 800f7b6:	685b      	ldr	r3, [r3, #4]
 800f7b8:	1ac3      	subs	r3, r0, r3
 800f7ba:	3301      	adds	r3, #1
 800f7bc:	e002      	b.n	800f7c4 <CircularQueue_Remove+0x12e>
 800f7be:	687b      	ldr	r3, [r7, #4]
 800f7c0:	68db      	ldr	r3, [r3, #12]
 800f7c2:	3301      	adds	r3, #1
 800f7c4:	440b      	add	r3, r1
 800f7c6:	781b      	ldrb	r3, [r3, #0]
 800f7c8:	b29b      	uxth	r3, r3
 800f7ca:	021b      	lsls	r3, r3, #8
 800f7cc:	b29b      	uxth	r3, r3
 800f7ce:	4413      	add	r3, r2
 800f7d0:	b29b      	uxth	r3, r3
 800f7d2:	e001      	b.n	800f7d8 <CircularQueue_Remove+0x142>
 800f7d4:	687b      	ldr	r3, [r7, #4]
 800f7d6:	891b      	ldrh	r3, [r3, #8]
 800f7d8:	683a      	ldr	r2, [r7, #0]
 800f7da:	8013      	strh	r3, [r2, #0]
       }
     }

    /* retreive element */
    ptr = q->qBuff + (MOD((q->first + elemSizeStorageRoom), q->queueMaxSize));
 800f7dc:	687b      	ldr	r3, [r7, #4]
 800f7de:	681a      	ldr	r2, [r3, #0]
 800f7e0:	687b      	ldr	r3, [r7, #4]
 800f7e2:	68d9      	ldr	r1, [r3, #12]
 800f7e4:	7afb      	ldrb	r3, [r7, #11]
 800f7e6:	4419      	add	r1, r3
 800f7e8:	687b      	ldr	r3, [r7, #4]
 800f7ea:	685b      	ldr	r3, [r3, #4]
 800f7ec:	4299      	cmp	r1, r3
 800f7ee:	d307      	bcc.n	800f800 <CircularQueue_Remove+0x16a>
 800f7f0:	687b      	ldr	r3, [r7, #4]
 800f7f2:	68d9      	ldr	r1, [r3, #12]
 800f7f4:	7afb      	ldrb	r3, [r7, #11]
 800f7f6:	4419      	add	r1, r3
 800f7f8:	687b      	ldr	r3, [r7, #4]
 800f7fa:	685b      	ldr	r3, [r3, #4]
 800f7fc:	1acb      	subs	r3, r1, r3
 800f7fe:	e003      	b.n	800f808 <CircularQueue_Remove+0x172>
 800f800:	687b      	ldr	r3, [r7, #4]
 800f802:	68d9      	ldr	r1, [r3, #12]
 800f804:	7afb      	ldrb	r3, [r7, #11]
 800f806:	440b      	add	r3, r1
 800f808:	4413      	add	r3, r2
 800f80a:	60fb      	str	r3, [r7, #12]

    /* adjust byte count */
    q->byteCount -= (*elementSize + elemSizeStorageRoom) ;
 800f80c:	687b      	ldr	r3, [r7, #4]
 800f80e:	695b      	ldr	r3, [r3, #20]
 800f810:	683a      	ldr	r2, [r7, #0]
 800f812:	8812      	ldrh	r2, [r2, #0]
 800f814:	4611      	mov	r1, r2
 800f816:	7afa      	ldrb	r2, [r7, #11]
 800f818:	440a      	add	r2, r1
 800f81a:	1a9a      	subs	r2, r3, r2
 800f81c:	687b      	ldr	r3, [r7, #4]
 800f81e:	615a      	str	r2, [r3, #20]
    
    /* Adjust q->first */
    if (q->byteCount > 0)
 800f820:	687b      	ldr	r3, [r7, #4]
 800f822:	695b      	ldr	r3, [r3, #20]
 800f824:	2b00      	cmp	r3, #0
 800f826:	d01e      	beq.n	800f866 <CircularQueue_Remove+0x1d0>
    {
      q->first = MOD((q->first+ *elementSize + elemSizeStorageRoom ), q->queueMaxSize);
 800f828:	687b      	ldr	r3, [r7, #4]
 800f82a:	68db      	ldr	r3, [r3, #12]
 800f82c:	683a      	ldr	r2, [r7, #0]
 800f82e:	8812      	ldrh	r2, [r2, #0]
 800f830:	441a      	add	r2, r3
 800f832:	7afb      	ldrb	r3, [r7, #11]
 800f834:	441a      	add	r2, r3
 800f836:	687b      	ldr	r3, [r7, #4]
 800f838:	685b      	ldr	r3, [r3, #4]
 800f83a:	429a      	cmp	r2, r3
 800f83c:	d30a      	bcc.n	800f854 <CircularQueue_Remove+0x1be>
 800f83e:	687b      	ldr	r3, [r7, #4]
 800f840:	68db      	ldr	r3, [r3, #12]
 800f842:	683a      	ldr	r2, [r7, #0]
 800f844:	8812      	ldrh	r2, [r2, #0]
 800f846:	441a      	add	r2, r3
 800f848:	7afb      	ldrb	r3, [r7, #11]
 800f84a:	441a      	add	r2, r3
 800f84c:	687b      	ldr	r3, [r7, #4]
 800f84e:	685b      	ldr	r3, [r3, #4]
 800f850:	1ad3      	subs	r3, r2, r3
 800f852:	e006      	b.n	800f862 <CircularQueue_Remove+0x1cc>
 800f854:	687b      	ldr	r3, [r7, #4]
 800f856:	68db      	ldr	r3, [r3, #12]
 800f858:	683a      	ldr	r2, [r7, #0]
 800f85a:	8812      	ldrh	r2, [r2, #0]
 800f85c:	441a      	add	r2, r3
 800f85e:	7afb      	ldrb	r3, [r7, #11]
 800f860:	4413      	add	r3, r2
 800f862:	687a      	ldr	r2, [r7, #4]
 800f864:	60d3      	str	r3, [r2, #12]
    }    
    /* adjust element count */    
    --q->elementCount;    
 800f866:	687b      	ldr	r3, [r7, #4]
 800f868:	699b      	ldr	r3, [r3, #24]
 800f86a:	1e5a      	subs	r2, r3, #1
 800f86c:	687b      	ldr	r3, [r7, #4]
 800f86e:	619a      	str	r2, [r3, #24]
  }
  return ptr;
 800f870:	68fb      	ldr	r3, [r7, #12]
}
 800f872:	4618      	mov	r0, r3
 800f874:	3714      	adds	r7, #20
 800f876:	46bd      	mov	sp, r7
 800f878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f87c:	4770      	bx	lr

0800f87e <CircularQueue_Sense>:
  * @param  q: pointer on queue structure  to be handled
  * @param  elementSize:  Pointer to return Size of element to be removed  
  * @retval Pointer on sensed element. NULL if queue was empty
  */
uint8_t* CircularQueue_Sense(queue_t *q, uint16_t* elementSize)
{
 800f87e:	b480      	push	{r7}
 800f880:	b087      	sub	sp, #28
 800f882:	af00      	add	r7, sp, #0
 800f884:	6078      	str	r0, [r7, #4]
 800f886:	6039      	str	r1, [r7, #0]
  uint8_t  elemSizeStorageRoom = 0;
 800f888:	2300      	movs	r3, #0
 800f88a:	73fb      	strb	r3, [r7, #15]
  uint8_t* x= NULL;
 800f88c:	2300      	movs	r3, #0
 800f88e:	617b      	str	r3, [r7, #20]
  elemSizeStorageRoom = (q->elementSize == 0) ? 2 : 0;
 800f890:	687b      	ldr	r3, [r7, #4]
 800f892:	891b      	ldrh	r3, [r3, #8]
 800f894:	2b00      	cmp	r3, #0
 800f896:	d101      	bne.n	800f89c <CircularQueue_Sense+0x1e>
 800f898:	2302      	movs	r3, #2
 800f89a:	e000      	b.n	800f89e <CircularQueue_Sense+0x20>
 800f89c:	2300      	movs	r3, #0
 800f89e:	73fb      	strb	r3, [r7, #15]
  *elementSize = 0;
 800f8a0:	683b      	ldr	r3, [r7, #0]
 800f8a2:	2200      	movs	r2, #0
 800f8a4:	801a      	strh	r2, [r3, #0]
  uint32_t FirstElemetPos = 0;
 800f8a6:	2300      	movs	r3, #0
 800f8a8:	613b      	str	r3, [r7, #16]
    
  if (q->byteCount > 0) 
 800f8aa:	687b      	ldr	r3, [r7, #4]
 800f8ac:	695b      	ldr	r3, [r3, #20]
 800f8ae:	2b00      	cmp	r3, #0
 800f8b0:	f000 8093 	beq.w	800f9da <CircularQueue_Sense+0x15c>
  {
    FirstElemetPos = q->first;
 800f8b4:	687b      	ldr	r3, [r7, #4]
 800f8b6:	68db      	ldr	r3, [r3, #12]
 800f8b8:	613b      	str	r3, [r7, #16]
    *elementSize = (q->elementSize == 0) ? q->qBuff[q->first] + ((q->qBuff[MOD((q->first+1), q->queueMaxSize)])<<8) : q->elementSize;
 800f8ba:	687b      	ldr	r3, [r7, #4]
 800f8bc:	891b      	ldrh	r3, [r3, #8]
 800f8be:	2b00      	cmp	r3, #0
 800f8c0:	d121      	bne.n	800f906 <CircularQueue_Sense+0x88>
 800f8c2:	687b      	ldr	r3, [r7, #4]
 800f8c4:	681a      	ldr	r2, [r3, #0]
 800f8c6:	687b      	ldr	r3, [r7, #4]
 800f8c8:	68db      	ldr	r3, [r3, #12]
 800f8ca:	4413      	add	r3, r2
 800f8cc:	781b      	ldrb	r3, [r3, #0]
 800f8ce:	b29a      	uxth	r2, r3
 800f8d0:	687b      	ldr	r3, [r7, #4]
 800f8d2:	6819      	ldr	r1, [r3, #0]
 800f8d4:	687b      	ldr	r3, [r7, #4]
 800f8d6:	68db      	ldr	r3, [r3, #12]
 800f8d8:	1c58      	adds	r0, r3, #1
 800f8da:	687b      	ldr	r3, [r7, #4]
 800f8dc:	685b      	ldr	r3, [r3, #4]
 800f8de:	4298      	cmp	r0, r3
 800f8e0:	d306      	bcc.n	800f8f0 <CircularQueue_Sense+0x72>
 800f8e2:	687b      	ldr	r3, [r7, #4]
 800f8e4:	68d8      	ldr	r0, [r3, #12]
 800f8e6:	687b      	ldr	r3, [r7, #4]
 800f8e8:	685b      	ldr	r3, [r3, #4]
 800f8ea:	1ac3      	subs	r3, r0, r3
 800f8ec:	3301      	adds	r3, #1
 800f8ee:	e002      	b.n	800f8f6 <CircularQueue_Sense+0x78>
 800f8f0:	687b      	ldr	r3, [r7, #4]
 800f8f2:	68db      	ldr	r3, [r3, #12]
 800f8f4:	3301      	adds	r3, #1
 800f8f6:	440b      	add	r3, r1
 800f8f8:	781b      	ldrb	r3, [r3, #0]
 800f8fa:	b29b      	uxth	r3, r3
 800f8fc:	021b      	lsls	r3, r3, #8
 800f8fe:	b29b      	uxth	r3, r3
 800f900:	4413      	add	r3, r2
 800f902:	b29b      	uxth	r3, r3
 800f904:	e001      	b.n	800f90a <CircularQueue_Sense+0x8c>
 800f906:	687b      	ldr	r3, [r7, #4]
 800f908:	891b      	ldrh	r3, [r3, #8]
 800f90a:	683a      	ldr	r2, [r7, #0]
 800f90c:	8013      	strh	r3, [r2, #0]
    
    if ((q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG) && !(q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG))
 800f90e:	687b      	ldr	r3, [r7, #4]
 800f910:	7f1b      	ldrb	r3, [r3, #28]
 800f912:	f003 0301 	and.w	r3, r3, #1
 800f916:	2b00      	cmp	r3, #0
 800f918:	d04a      	beq.n	800f9b0 <CircularQueue_Sense+0x132>
 800f91a:	687b      	ldr	r3, [r7, #4]
 800f91c:	7f1b      	ldrb	r3, [r3, #28]
 800f91e:	f003 0302 	and.w	r3, r3, #2
 800f922:	2b00      	cmp	r3, #0
 800f924:	d144      	bne.n	800f9b0 <CircularQueue_Sense+0x132>
    { 
      if (((*elementSize == 0xFFFF) && q->elementSize == 0 ) || 
 800f926:	683b      	ldr	r3, [r7, #0]
 800f928:	881b      	ldrh	r3, [r3, #0]
 800f92a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f92e:	4293      	cmp	r3, r2
 800f930:	d103      	bne.n	800f93a <CircularQueue_Sense+0xbc>
 800f932:	687b      	ldr	r3, [r7, #4]
 800f934:	891b      	ldrh	r3, [r3, #8]
 800f936:	2b00      	cmp	r3, #0
 800f938:	d012      	beq.n	800f960 <CircularQueue_Sense+0xe2>
          ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 800f93a:	687b      	ldr	r3, [r7, #4]
 800f93c:	68da      	ldr	r2, [r3, #12]
 800f93e:	687b      	ldr	r3, [r7, #4]
 800f940:	691b      	ldr	r3, [r3, #16]
      if (((*elementSize == 0xFFFF) && q->elementSize == 0 ) || 
 800f942:	429a      	cmp	r2, r3
 800f944:	d934      	bls.n	800f9b0 <CircularQueue_Sense+0x132>
          ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 800f946:	687b      	ldr	r3, [r7, #4]
 800f948:	891b      	ldrh	r3, [r3, #8]
 800f94a:	2b00      	cmp	r3, #0
 800f94c:	d030      	beq.n	800f9b0 <CircularQueue_Sense+0x132>
 800f94e:	687b      	ldr	r3, [r7, #4]
 800f950:	685a      	ldr	r2, [r3, #4]
 800f952:	687b      	ldr	r3, [r7, #4]
 800f954:	68db      	ldr	r3, [r3, #12]
 800f956:	1ad3      	subs	r3, r2, r3
 800f958:	687a      	ldr	r2, [r7, #4]
 800f95a:	8912      	ldrh	r2, [r2, #8]
 800f95c:	4293      	cmp	r3, r2
 800f95e:	d227      	bcs.n	800f9b0 <CircularQueue_Sense+0x132>

      {
        /* all data from current position up to the end of buffer are invalid */
        FirstElemetPos = 0; /* wrap to the begiining of buffer */
 800f960:	2300      	movs	r3, #0
 800f962:	613b      	str	r3, [r7, #16]

        /* retrieve the rigth size after the wrap [if varaible size element] */
        *elementSize = (q->elementSize == 0) ? q->qBuff[FirstElemetPos]+ ((q->qBuff[MOD((FirstElemetPos+1), q->queueMaxSize)])<<8) : q->elementSize;
 800f964:	687b      	ldr	r3, [r7, #4]
 800f966:	891b      	ldrh	r3, [r3, #8]
 800f968:	2b00      	cmp	r3, #0
 800f96a:	d11d      	bne.n	800f9a8 <CircularQueue_Sense+0x12a>
 800f96c:	687b      	ldr	r3, [r7, #4]
 800f96e:	681a      	ldr	r2, [r3, #0]
 800f970:	693b      	ldr	r3, [r7, #16]
 800f972:	4413      	add	r3, r2
 800f974:	781b      	ldrb	r3, [r3, #0]
 800f976:	b29a      	uxth	r2, r3
 800f978:	687b      	ldr	r3, [r7, #4]
 800f97a:	6819      	ldr	r1, [r3, #0]
 800f97c:	693b      	ldr	r3, [r7, #16]
 800f97e:	1c58      	adds	r0, r3, #1
 800f980:	687b      	ldr	r3, [r7, #4]
 800f982:	685b      	ldr	r3, [r3, #4]
 800f984:	4298      	cmp	r0, r3
 800f986:	d305      	bcc.n	800f994 <CircularQueue_Sense+0x116>
 800f988:	687b      	ldr	r3, [r7, #4]
 800f98a:	685b      	ldr	r3, [r3, #4]
 800f98c:	6938      	ldr	r0, [r7, #16]
 800f98e:	1ac3      	subs	r3, r0, r3
 800f990:	3301      	adds	r3, #1
 800f992:	e001      	b.n	800f998 <CircularQueue_Sense+0x11a>
 800f994:	693b      	ldr	r3, [r7, #16]
 800f996:	3301      	adds	r3, #1
 800f998:	440b      	add	r3, r1
 800f99a:	781b      	ldrb	r3, [r3, #0]
 800f99c:	b29b      	uxth	r3, r3
 800f99e:	021b      	lsls	r3, r3, #8
 800f9a0:	b29b      	uxth	r3, r3
 800f9a2:	4413      	add	r3, r2
 800f9a4:	b29b      	uxth	r3, r3
 800f9a6:	e001      	b.n	800f9ac <CircularQueue_Sense+0x12e>
 800f9a8:	687b      	ldr	r3, [r7, #4]
 800f9aa:	891b      	ldrh	r3, [r3, #8]
 800f9ac:	683a      	ldr	r2, [r7, #0]
 800f9ae:	8013      	strh	r3, [r2, #0]
      }
   }
   /* retrieve element */
    x = q->qBuff + (MOD((FirstElemetPos + elemSizeStorageRoom), q->queueMaxSize));
 800f9b0:	687b      	ldr	r3, [r7, #4]
 800f9b2:	681a      	ldr	r2, [r3, #0]
 800f9b4:	7bf9      	ldrb	r1, [r7, #15]
 800f9b6:	693b      	ldr	r3, [r7, #16]
 800f9b8:	4419      	add	r1, r3
 800f9ba:	687b      	ldr	r3, [r7, #4]
 800f9bc:	685b      	ldr	r3, [r3, #4]
 800f9be:	4299      	cmp	r1, r3
 800f9c0:	d306      	bcc.n	800f9d0 <CircularQueue_Sense+0x152>
 800f9c2:	7bf9      	ldrb	r1, [r7, #15]
 800f9c4:	693b      	ldr	r3, [r7, #16]
 800f9c6:	4419      	add	r1, r3
 800f9c8:	687b      	ldr	r3, [r7, #4]
 800f9ca:	685b      	ldr	r3, [r3, #4]
 800f9cc:	1acb      	subs	r3, r1, r3
 800f9ce:	e002      	b.n	800f9d6 <CircularQueue_Sense+0x158>
 800f9d0:	7bf9      	ldrb	r1, [r7, #15]
 800f9d2:	693b      	ldr	r3, [r7, #16]
 800f9d4:	440b      	add	r3, r1
 800f9d6:	4413      	add	r3, r2
 800f9d8:	617b      	str	r3, [r7, #20]
  }
  return x;
 800f9da:	697b      	ldr	r3, [r7, #20]
}
 800f9dc:	4618      	mov	r0, r3
 800f9de:	371c      	adds	r7, #28
 800f9e0:	46bd      	mov	sp, r7
 800f9e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9e6:	4770      	bx	lr

0800f9e8 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800f9e8:	b480      	push	{r7}
 800f9ea:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 800f9ec:	bf00      	nop
 800f9ee:	46bd      	mov	sp, r7
 800f9f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9f4:	4770      	bx	lr
	...

0800f9f8 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800f9f8:	b480      	push	{r7}
 800f9fa:	b085      	sub	sp, #20
 800f9fc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f9fe:	f3ef 8305 	mrs	r3, IPSR
 800fa02:	60bb      	str	r3, [r7, #8]
  return(result);
 800fa04:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800fa06:	2b00      	cmp	r3, #0
 800fa08:	d10f      	bne.n	800fa2a <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800fa0a:	f3ef 8310 	mrs	r3, PRIMASK
 800fa0e:	607b      	str	r3, [r7, #4]
  return(result);
 800fa10:	687b      	ldr	r3, [r7, #4]
 800fa12:	2b00      	cmp	r3, #0
 800fa14:	d105      	bne.n	800fa22 <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800fa16:	f3ef 8311 	mrs	r3, BASEPRI
 800fa1a:	603b      	str	r3, [r7, #0]
  return(result);
 800fa1c:	683b      	ldr	r3, [r7, #0]
 800fa1e:	2b00      	cmp	r3, #0
 800fa20:	d007      	beq.n	800fa32 <osKernelInitialize+0x3a>
 800fa22:	4b0e      	ldr	r3, [pc, #56]	; (800fa5c <osKernelInitialize+0x64>)
 800fa24:	681b      	ldr	r3, [r3, #0]
 800fa26:	2b02      	cmp	r3, #2
 800fa28:	d103      	bne.n	800fa32 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 800fa2a:	f06f 0305 	mvn.w	r3, #5
 800fa2e:	60fb      	str	r3, [r7, #12]
 800fa30:	e00c      	b.n	800fa4c <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 800fa32:	4b0a      	ldr	r3, [pc, #40]	; (800fa5c <osKernelInitialize+0x64>)
 800fa34:	681b      	ldr	r3, [r3, #0]
 800fa36:	2b00      	cmp	r3, #0
 800fa38:	d105      	bne.n	800fa46 <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800fa3a:	4b08      	ldr	r3, [pc, #32]	; (800fa5c <osKernelInitialize+0x64>)
 800fa3c:	2201      	movs	r2, #1
 800fa3e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800fa40:	2300      	movs	r3, #0
 800fa42:	60fb      	str	r3, [r7, #12]
 800fa44:	e002      	b.n	800fa4c <osKernelInitialize+0x54>
    } else {
      stat = osError;
 800fa46:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800fa4a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800fa4c:	68fb      	ldr	r3, [r7, #12]
}
 800fa4e:	4618      	mov	r0, r3
 800fa50:	3714      	adds	r7, #20
 800fa52:	46bd      	mov	sp, r7
 800fa54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa58:	4770      	bx	lr
 800fa5a:	bf00      	nop
 800fa5c:	20001434 	.word	0x20001434

0800fa60 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800fa60:	b580      	push	{r7, lr}
 800fa62:	b084      	sub	sp, #16
 800fa64:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800fa66:	f3ef 8305 	mrs	r3, IPSR
 800fa6a:	60bb      	str	r3, [r7, #8]
  return(result);
 800fa6c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800fa6e:	2b00      	cmp	r3, #0
 800fa70:	d10f      	bne.n	800fa92 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800fa72:	f3ef 8310 	mrs	r3, PRIMASK
 800fa76:	607b      	str	r3, [r7, #4]
  return(result);
 800fa78:	687b      	ldr	r3, [r7, #4]
 800fa7a:	2b00      	cmp	r3, #0
 800fa7c:	d105      	bne.n	800fa8a <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800fa7e:	f3ef 8311 	mrs	r3, BASEPRI
 800fa82:	603b      	str	r3, [r7, #0]
  return(result);
 800fa84:	683b      	ldr	r3, [r7, #0]
 800fa86:	2b00      	cmp	r3, #0
 800fa88:	d007      	beq.n	800fa9a <osKernelStart+0x3a>
 800fa8a:	4b0f      	ldr	r3, [pc, #60]	; (800fac8 <osKernelStart+0x68>)
 800fa8c:	681b      	ldr	r3, [r3, #0]
 800fa8e:	2b02      	cmp	r3, #2
 800fa90:	d103      	bne.n	800fa9a <osKernelStart+0x3a>
    stat = osErrorISR;
 800fa92:	f06f 0305 	mvn.w	r3, #5
 800fa96:	60fb      	str	r3, [r7, #12]
 800fa98:	e010      	b.n	800fabc <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 800fa9a:	4b0b      	ldr	r3, [pc, #44]	; (800fac8 <osKernelStart+0x68>)
 800fa9c:	681b      	ldr	r3, [r3, #0]
 800fa9e:	2b01      	cmp	r3, #1
 800faa0:	d109      	bne.n	800fab6 <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800faa2:	f7ff ffa1 	bl	800f9e8 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800faa6:	4b08      	ldr	r3, [pc, #32]	; (800fac8 <osKernelStart+0x68>)
 800faa8:	2202      	movs	r2, #2
 800faaa:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800faac:	f002 fd60 	bl	8012570 <vTaskStartScheduler>
      stat = osOK;
 800fab0:	2300      	movs	r3, #0
 800fab2:	60fb      	str	r3, [r7, #12]
 800fab4:	e002      	b.n	800fabc <osKernelStart+0x5c>
    } else {
      stat = osError;
 800fab6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800faba:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800fabc:	68fb      	ldr	r3, [r7, #12]
}
 800fabe:	4618      	mov	r0, r3
 800fac0:	3710      	adds	r7, #16
 800fac2:	46bd      	mov	sp, r7
 800fac4:	bd80      	pop	{r7, pc}
 800fac6:	bf00      	nop
 800fac8:	20001434 	.word	0x20001434

0800facc <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800facc:	b580      	push	{r7, lr}
 800face:	b090      	sub	sp, #64	; 0x40
 800fad0:	af04      	add	r7, sp, #16
 800fad2:	60f8      	str	r0, [r7, #12]
 800fad4:	60b9      	str	r1, [r7, #8]
 800fad6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800fad8:	2300      	movs	r3, #0
 800fada:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800fadc:	f3ef 8305 	mrs	r3, IPSR
 800fae0:	61fb      	str	r3, [r7, #28]
  return(result);
 800fae2:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 800fae4:	2b00      	cmp	r3, #0
 800fae6:	f040 808f 	bne.w	800fc08 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800faea:	f3ef 8310 	mrs	r3, PRIMASK
 800faee:	61bb      	str	r3, [r7, #24]
  return(result);
 800faf0:	69bb      	ldr	r3, [r7, #24]
 800faf2:	2b00      	cmp	r3, #0
 800faf4:	d105      	bne.n	800fb02 <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800faf6:	f3ef 8311 	mrs	r3, BASEPRI
 800fafa:	617b      	str	r3, [r7, #20]
  return(result);
 800fafc:	697b      	ldr	r3, [r7, #20]
 800fafe:	2b00      	cmp	r3, #0
 800fb00:	d003      	beq.n	800fb0a <osThreadNew+0x3e>
 800fb02:	4b44      	ldr	r3, [pc, #272]	; (800fc14 <osThreadNew+0x148>)
 800fb04:	681b      	ldr	r3, [r3, #0]
 800fb06:	2b02      	cmp	r3, #2
 800fb08:	d07e      	beq.n	800fc08 <osThreadNew+0x13c>
 800fb0a:	68fb      	ldr	r3, [r7, #12]
 800fb0c:	2b00      	cmp	r3, #0
 800fb0e:	d07b      	beq.n	800fc08 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 800fb10:	2380      	movs	r3, #128	; 0x80
 800fb12:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 800fb14:	2318      	movs	r3, #24
 800fb16:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 800fb18:	2300      	movs	r3, #0
 800fb1a:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 800fb1c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800fb20:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800fb22:	687b      	ldr	r3, [r7, #4]
 800fb24:	2b00      	cmp	r3, #0
 800fb26:	d045      	beq.n	800fbb4 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 800fb28:	687b      	ldr	r3, [r7, #4]
 800fb2a:	681b      	ldr	r3, [r3, #0]
 800fb2c:	2b00      	cmp	r3, #0
 800fb2e:	d002      	beq.n	800fb36 <osThreadNew+0x6a>
        name = attr->name;
 800fb30:	687b      	ldr	r3, [r7, #4]
 800fb32:	681b      	ldr	r3, [r3, #0]
 800fb34:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 800fb36:	687b      	ldr	r3, [r7, #4]
 800fb38:	699b      	ldr	r3, [r3, #24]
 800fb3a:	2b00      	cmp	r3, #0
 800fb3c:	d002      	beq.n	800fb44 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 800fb3e:	687b      	ldr	r3, [r7, #4]
 800fb40:	699b      	ldr	r3, [r3, #24]
 800fb42:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800fb44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fb46:	2b00      	cmp	r3, #0
 800fb48:	d008      	beq.n	800fb5c <osThreadNew+0x90>
 800fb4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fb4c:	2b38      	cmp	r3, #56	; 0x38
 800fb4e:	d805      	bhi.n	800fb5c <osThreadNew+0x90>
 800fb50:	687b      	ldr	r3, [r7, #4]
 800fb52:	685b      	ldr	r3, [r3, #4]
 800fb54:	f003 0301 	and.w	r3, r3, #1
 800fb58:	2b00      	cmp	r3, #0
 800fb5a:	d001      	beq.n	800fb60 <osThreadNew+0x94>
        return (NULL);
 800fb5c:	2300      	movs	r3, #0
 800fb5e:	e054      	b.n	800fc0a <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 800fb60:	687b      	ldr	r3, [r7, #4]
 800fb62:	695b      	ldr	r3, [r3, #20]
 800fb64:	2b00      	cmp	r3, #0
 800fb66:	d003      	beq.n	800fb70 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800fb68:	687b      	ldr	r3, [r7, #4]
 800fb6a:	695b      	ldr	r3, [r3, #20]
 800fb6c:	089b      	lsrs	r3, r3, #2
 800fb6e:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800fb70:	687b      	ldr	r3, [r7, #4]
 800fb72:	689b      	ldr	r3, [r3, #8]
 800fb74:	2b00      	cmp	r3, #0
 800fb76:	d00e      	beq.n	800fb96 <osThreadNew+0xca>
 800fb78:	687b      	ldr	r3, [r7, #4]
 800fb7a:	68db      	ldr	r3, [r3, #12]
 800fb7c:	2b5b      	cmp	r3, #91	; 0x5b
 800fb7e:	d90a      	bls.n	800fb96 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800fb80:	687b      	ldr	r3, [r7, #4]
 800fb82:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800fb84:	2b00      	cmp	r3, #0
 800fb86:	d006      	beq.n	800fb96 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800fb88:	687b      	ldr	r3, [r7, #4]
 800fb8a:	695b      	ldr	r3, [r3, #20]
 800fb8c:	2b00      	cmp	r3, #0
 800fb8e:	d002      	beq.n	800fb96 <osThreadNew+0xca>
        mem = 1;
 800fb90:	2301      	movs	r3, #1
 800fb92:	623b      	str	r3, [r7, #32]
 800fb94:	e010      	b.n	800fbb8 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800fb96:	687b      	ldr	r3, [r7, #4]
 800fb98:	689b      	ldr	r3, [r3, #8]
 800fb9a:	2b00      	cmp	r3, #0
 800fb9c:	d10c      	bne.n	800fbb8 <osThreadNew+0xec>
 800fb9e:	687b      	ldr	r3, [r7, #4]
 800fba0:	68db      	ldr	r3, [r3, #12]
 800fba2:	2b00      	cmp	r3, #0
 800fba4:	d108      	bne.n	800fbb8 <osThreadNew+0xec>
 800fba6:	687b      	ldr	r3, [r7, #4]
 800fba8:	691b      	ldr	r3, [r3, #16]
 800fbaa:	2b00      	cmp	r3, #0
 800fbac:	d104      	bne.n	800fbb8 <osThreadNew+0xec>
          mem = 0;
 800fbae:	2300      	movs	r3, #0
 800fbb0:	623b      	str	r3, [r7, #32]
 800fbb2:	e001      	b.n	800fbb8 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 800fbb4:	2300      	movs	r3, #0
 800fbb6:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 800fbb8:	6a3b      	ldr	r3, [r7, #32]
 800fbba:	2b01      	cmp	r3, #1
 800fbbc:	d110      	bne.n	800fbe0 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800fbbe:	687b      	ldr	r3, [r7, #4]
 800fbc0:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 800fbc2:	687a      	ldr	r2, [r7, #4]
 800fbc4:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800fbc6:	9202      	str	r2, [sp, #8]
 800fbc8:	9301      	str	r3, [sp, #4]
 800fbca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fbcc:	9300      	str	r3, [sp, #0]
 800fbce:	68bb      	ldr	r3, [r7, #8]
 800fbd0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800fbd2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800fbd4:	68f8      	ldr	r0, [r7, #12]
 800fbd6:	f002 faf9 	bl	80121cc <xTaskCreateStatic>
 800fbda:	4603      	mov	r3, r0
 800fbdc:	613b      	str	r3, [r7, #16]
 800fbde:	e013      	b.n	800fc08 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 800fbe0:	6a3b      	ldr	r3, [r7, #32]
 800fbe2:	2b00      	cmp	r3, #0
 800fbe4:	d110      	bne.n	800fc08 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800fbe6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fbe8:	b29a      	uxth	r2, r3
 800fbea:	f107 0310 	add.w	r3, r7, #16
 800fbee:	9301      	str	r3, [sp, #4]
 800fbf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fbf2:	9300      	str	r3, [sp, #0]
 800fbf4:	68bb      	ldr	r3, [r7, #8]
 800fbf6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800fbf8:	68f8      	ldr	r0, [r7, #12]
 800fbfa:	f002 fb41 	bl	8012280 <xTaskCreate>
 800fbfe:	4603      	mov	r3, r0
 800fc00:	2b01      	cmp	r3, #1
 800fc02:	d001      	beq.n	800fc08 <osThreadNew+0x13c>
          hTask = NULL;
 800fc04:	2300      	movs	r3, #0
 800fc06:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 800fc08:	693b      	ldr	r3, [r7, #16]
}
 800fc0a:	4618      	mov	r0, r3
 800fc0c:	3730      	adds	r7, #48	; 0x30
 800fc0e:	46bd      	mov	sp, r7
 800fc10:	bd80      	pop	{r7, pc}
 800fc12:	bf00      	nop
 800fc14:	20001434 	.word	0x20001434

0800fc18 <osThreadFlagsSet>:
  }

  return (count);
}

uint32_t osThreadFlagsSet (osThreadId_t thread_id, uint32_t flags) {
 800fc18:	b580      	push	{r7, lr}
 800fc1a:	b08a      	sub	sp, #40	; 0x28
 800fc1c:	af02      	add	r7, sp, #8
 800fc1e:	6078      	str	r0, [r7, #4]
 800fc20:	6039      	str	r1, [r7, #0]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 800fc22:	687b      	ldr	r3, [r7, #4]
 800fc24:	61fb      	str	r3, [r7, #28]
  uint32_t rflags;
  BaseType_t yield;

  if ((hTask == NULL) || ((flags & THREAD_FLAGS_INVALID_BITS) != 0U)) {
 800fc26:	69fb      	ldr	r3, [r7, #28]
 800fc28:	2b00      	cmp	r3, #0
 800fc2a:	d002      	beq.n	800fc32 <osThreadFlagsSet+0x1a>
 800fc2c:	683b      	ldr	r3, [r7, #0]
 800fc2e:	2b00      	cmp	r3, #0
 800fc30:	da03      	bge.n	800fc3a <osThreadFlagsSet+0x22>
    rflags = (uint32_t)osErrorParameter;
 800fc32:	f06f 0303 	mvn.w	r3, #3
 800fc36:	60fb      	str	r3, [r7, #12]
 800fc38:	e046      	b.n	800fcc8 <osThreadFlagsSet+0xb0>
  }
  else {
    rflags = (uint32_t)osError;
 800fc3a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800fc3e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800fc40:	f3ef 8305 	mrs	r3, IPSR
 800fc44:	61bb      	str	r3, [r7, #24]
  return(result);
 800fc46:	69bb      	ldr	r3, [r7, #24]

    if (IS_IRQ()) {
 800fc48:	2b00      	cmp	r3, #0
 800fc4a:	d10f      	bne.n	800fc6c <osThreadFlagsSet+0x54>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800fc4c:	f3ef 8310 	mrs	r3, PRIMASK
 800fc50:	617b      	str	r3, [r7, #20]
  return(result);
 800fc52:	697b      	ldr	r3, [r7, #20]
 800fc54:	2b00      	cmp	r3, #0
 800fc56:	d105      	bne.n	800fc64 <osThreadFlagsSet+0x4c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800fc58:	f3ef 8311 	mrs	r3, BASEPRI
 800fc5c:	613b      	str	r3, [r7, #16]
  return(result);
 800fc5e:	693b      	ldr	r3, [r7, #16]
 800fc60:	2b00      	cmp	r3, #0
 800fc62:	d024      	beq.n	800fcae <osThreadFlagsSet+0x96>
 800fc64:	4b1b      	ldr	r3, [pc, #108]	; (800fcd4 <osThreadFlagsSet+0xbc>)
 800fc66:	681b      	ldr	r3, [r3, #0]
 800fc68:	2b02      	cmp	r3, #2
 800fc6a:	d120      	bne.n	800fcae <osThreadFlagsSet+0x96>
      yield = pdFALSE;
 800fc6c:	2300      	movs	r3, #0
 800fc6e:	60bb      	str	r3, [r7, #8]

      (void)xTaskNotifyFromISR (hTask, flags, eSetBits, &yield);
 800fc70:	f107 0308 	add.w	r3, r7, #8
 800fc74:	9300      	str	r3, [sp, #0]
 800fc76:	2300      	movs	r3, #0
 800fc78:	2201      	movs	r2, #1
 800fc7a:	6839      	ldr	r1, [r7, #0]
 800fc7c:	69f8      	ldr	r0, [r7, #28]
 800fc7e:	f003 fbfb 	bl	8013478 <xTaskGenericNotifyFromISR>
      (void)xTaskNotifyAndQueryFromISR (hTask, 0, eNoAction, &rflags, NULL);
 800fc82:	f107 020c 	add.w	r2, r7, #12
 800fc86:	2300      	movs	r3, #0
 800fc88:	9300      	str	r3, [sp, #0]
 800fc8a:	4613      	mov	r3, r2
 800fc8c:	2200      	movs	r2, #0
 800fc8e:	2100      	movs	r1, #0
 800fc90:	69f8      	ldr	r0, [r7, #28]
 800fc92:	f003 fbf1 	bl	8013478 <xTaskGenericNotifyFromISR>

      portYIELD_FROM_ISR (yield);
 800fc96:	68bb      	ldr	r3, [r7, #8]
 800fc98:	2b00      	cmp	r3, #0
 800fc9a:	d015      	beq.n	800fcc8 <osThreadFlagsSet+0xb0>
 800fc9c:	4b0e      	ldr	r3, [pc, #56]	; (800fcd8 <osThreadFlagsSet+0xc0>)
 800fc9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fca2:	601a      	str	r2, [r3, #0]
 800fca4:	f3bf 8f4f 	dsb	sy
 800fca8:	f3bf 8f6f 	isb	sy
 800fcac:	e00c      	b.n	800fcc8 <osThreadFlagsSet+0xb0>
    }
    else {
      (void)xTaskNotify (hTask, flags, eSetBits);
 800fcae:	2300      	movs	r3, #0
 800fcb0:	2201      	movs	r2, #1
 800fcb2:	6839      	ldr	r1, [r7, #0]
 800fcb4:	69f8      	ldr	r0, [r7, #28]
 800fcb6:	f003 fb29 	bl	801330c <xTaskGenericNotify>
      (void)xTaskNotifyAndQuery (hTask, 0, eNoAction, &rflags);
 800fcba:	f107 030c 	add.w	r3, r7, #12
 800fcbe:	2200      	movs	r2, #0
 800fcc0:	2100      	movs	r1, #0
 800fcc2:	69f8      	ldr	r0, [r7, #28]
 800fcc4:	f003 fb22 	bl	801330c <xTaskGenericNotify>
    }
  }
  /* Return flags after setting */
  return (rflags);
 800fcc8:	68fb      	ldr	r3, [r7, #12]
}
 800fcca:	4618      	mov	r0, r3
 800fccc:	3720      	adds	r7, #32
 800fcce:	46bd      	mov	sp, r7
 800fcd0:	bd80      	pop	{r7, pc}
 800fcd2:	bf00      	nop
 800fcd4:	20001434 	.word	0x20001434
 800fcd8:	e000ed04 	.word	0xe000ed04

0800fcdc <osThreadFlagsWait>:
  }

  return (rflags);
}

uint32_t osThreadFlagsWait (uint32_t flags, uint32_t options, uint32_t timeout) {
 800fcdc:	b580      	push	{r7, lr}
 800fcde:	b08e      	sub	sp, #56	; 0x38
 800fce0:	af00      	add	r7, sp, #0
 800fce2:	60f8      	str	r0, [r7, #12]
 800fce4:	60b9      	str	r1, [r7, #8]
 800fce6:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800fce8:	f3ef 8305 	mrs	r3, IPSR
 800fcec:	61fb      	str	r3, [r7, #28]
  return(result);
 800fcee:	69fb      	ldr	r3, [r7, #28]
  uint32_t rflags, nval;
  uint32_t clear;
  TickType_t t0, td, tout;
  BaseType_t rval;

  if (IS_IRQ()) {
 800fcf0:	2b00      	cmp	r3, #0
 800fcf2:	d10f      	bne.n	800fd14 <osThreadFlagsWait+0x38>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800fcf4:	f3ef 8310 	mrs	r3, PRIMASK
 800fcf8:	61bb      	str	r3, [r7, #24]
  return(result);
 800fcfa:	69bb      	ldr	r3, [r7, #24]
 800fcfc:	2b00      	cmp	r3, #0
 800fcfe:	d105      	bne.n	800fd0c <osThreadFlagsWait+0x30>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800fd00:	f3ef 8311 	mrs	r3, BASEPRI
 800fd04:	617b      	str	r3, [r7, #20]
  return(result);
 800fd06:	697b      	ldr	r3, [r7, #20]
 800fd08:	2b00      	cmp	r3, #0
 800fd0a:	d007      	beq.n	800fd1c <osThreadFlagsWait+0x40>
 800fd0c:	4b3c      	ldr	r3, [pc, #240]	; (800fe00 <osThreadFlagsWait+0x124>)
 800fd0e:	681b      	ldr	r3, [r3, #0]
 800fd10:	2b02      	cmp	r3, #2
 800fd12:	d103      	bne.n	800fd1c <osThreadFlagsWait+0x40>
    rflags = (uint32_t)osErrorISR;
 800fd14:	f06f 0305 	mvn.w	r3, #5
 800fd18:	637b      	str	r3, [r7, #52]	; 0x34
 800fd1a:	e06b      	b.n	800fdf4 <osThreadFlagsWait+0x118>
  }
  else if ((flags & THREAD_FLAGS_INVALID_BITS) != 0U) {
 800fd1c:	68fb      	ldr	r3, [r7, #12]
 800fd1e:	2b00      	cmp	r3, #0
 800fd20:	da03      	bge.n	800fd2a <osThreadFlagsWait+0x4e>
    rflags = (uint32_t)osErrorParameter;
 800fd22:	f06f 0303 	mvn.w	r3, #3
 800fd26:	637b      	str	r3, [r7, #52]	; 0x34
 800fd28:	e064      	b.n	800fdf4 <osThreadFlagsWait+0x118>
  }
  else {
    if ((options & osFlagsNoClear) == osFlagsNoClear) {
 800fd2a:	68bb      	ldr	r3, [r7, #8]
 800fd2c:	f003 0302 	and.w	r3, r3, #2
 800fd30:	2b00      	cmp	r3, #0
 800fd32:	d002      	beq.n	800fd3a <osThreadFlagsWait+0x5e>
      clear = 0U;
 800fd34:	2300      	movs	r3, #0
 800fd36:	633b      	str	r3, [r7, #48]	; 0x30
 800fd38:	e001      	b.n	800fd3e <osThreadFlagsWait+0x62>
    } else {
      clear = flags;
 800fd3a:	68fb      	ldr	r3, [r7, #12]
 800fd3c:	633b      	str	r3, [r7, #48]	; 0x30
    }

    rflags = 0U;
 800fd3e:	2300      	movs	r3, #0
 800fd40:	637b      	str	r3, [r7, #52]	; 0x34
    tout   = timeout;
 800fd42:	687b      	ldr	r3, [r7, #4]
 800fd44:	62fb      	str	r3, [r7, #44]	; 0x2c

    t0 = xTaskGetTickCount();
 800fd46:	f002 fd59 	bl	80127fc <xTaskGetTickCount>
 800fd4a:	62b8      	str	r0, [r7, #40]	; 0x28
    do {
      rval = xTaskNotifyWait (0, clear, &nval, tout);
 800fd4c:	f107 0210 	add.w	r2, r7, #16
 800fd50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fd52:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800fd54:	2000      	movs	r0, #0
 800fd56:	f003 fa7f 	bl	8013258 <xTaskNotifyWait>
 800fd5a:	6278      	str	r0, [r7, #36]	; 0x24

      if (rval == pdPASS) {
 800fd5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fd5e:	2b01      	cmp	r3, #1
 800fd60:	d137      	bne.n	800fdd2 <osThreadFlagsWait+0xf6>
        rflags &= flags;
 800fd62:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800fd64:	68fb      	ldr	r3, [r7, #12]
 800fd66:	4013      	ands	r3, r2
 800fd68:	637b      	str	r3, [r7, #52]	; 0x34
        rflags |= nval;
 800fd6a:	693b      	ldr	r3, [r7, #16]
 800fd6c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800fd6e:	4313      	orrs	r3, r2
 800fd70:	637b      	str	r3, [r7, #52]	; 0x34

        if ((options & osFlagsWaitAll) == osFlagsWaitAll) {
 800fd72:	68bb      	ldr	r3, [r7, #8]
 800fd74:	f003 0301 	and.w	r3, r3, #1
 800fd78:	2b00      	cmp	r3, #0
 800fd7a:	d00c      	beq.n	800fd96 <osThreadFlagsWait+0xba>
          if ((flags & rflags) == flags) {
 800fd7c:	68fa      	ldr	r2, [r7, #12]
 800fd7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fd80:	4013      	ands	r3, r2
 800fd82:	68fa      	ldr	r2, [r7, #12]
 800fd84:	429a      	cmp	r2, r3
 800fd86:	d032      	beq.n	800fdee <osThreadFlagsWait+0x112>
            break;
          } else {
            if (timeout == 0U) {
 800fd88:	687b      	ldr	r3, [r7, #4]
 800fd8a:	2b00      	cmp	r3, #0
 800fd8c:	d10f      	bne.n	800fdae <osThreadFlagsWait+0xd2>
              rflags = (uint32_t)osErrorResource;
 800fd8e:	f06f 0302 	mvn.w	r3, #2
 800fd92:	637b      	str	r3, [r7, #52]	; 0x34
              break;
 800fd94:	e02e      	b.n	800fdf4 <osThreadFlagsWait+0x118>
            }
          }
        }
        else {
          if ((flags & rflags) != 0) {
 800fd96:	68fa      	ldr	r2, [r7, #12]
 800fd98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fd9a:	4013      	ands	r3, r2
 800fd9c:	2b00      	cmp	r3, #0
 800fd9e:	d128      	bne.n	800fdf2 <osThreadFlagsWait+0x116>
            break;
          } else {
            if (timeout == 0U) {
 800fda0:	687b      	ldr	r3, [r7, #4]
 800fda2:	2b00      	cmp	r3, #0
 800fda4:	d103      	bne.n	800fdae <osThreadFlagsWait+0xd2>
              rflags = (uint32_t)osErrorResource;
 800fda6:	f06f 0302 	mvn.w	r3, #2
 800fdaa:	637b      	str	r3, [r7, #52]	; 0x34
              break;
 800fdac:	e022      	b.n	800fdf4 <osThreadFlagsWait+0x118>
            }
          }
        }

        /* Update timeout */
        td = xTaskGetTickCount() - t0;
 800fdae:	f002 fd25 	bl	80127fc <xTaskGetTickCount>
 800fdb2:	4602      	mov	r2, r0
 800fdb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fdb6:	1ad3      	subs	r3, r2, r3
 800fdb8:	623b      	str	r3, [r7, #32]

        if (td > tout) {
 800fdba:	6a3a      	ldr	r2, [r7, #32]
 800fdbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fdbe:	429a      	cmp	r2, r3
 800fdc0:	d902      	bls.n	800fdc8 <osThreadFlagsWait+0xec>
          tout  = 0;
 800fdc2:	2300      	movs	r3, #0
 800fdc4:	62fb      	str	r3, [r7, #44]	; 0x2c
 800fdc6:	e00e      	b.n	800fde6 <osThreadFlagsWait+0x10a>
        } else {
          tout -= td;
 800fdc8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800fdca:	6a3b      	ldr	r3, [r7, #32]
 800fdcc:	1ad3      	subs	r3, r2, r3
 800fdce:	62fb      	str	r3, [r7, #44]	; 0x2c
 800fdd0:	e009      	b.n	800fde6 <osThreadFlagsWait+0x10a>
        }
      }
      else {
        if (timeout == 0) {
 800fdd2:	687b      	ldr	r3, [r7, #4]
 800fdd4:	2b00      	cmp	r3, #0
 800fdd6:	d103      	bne.n	800fde0 <osThreadFlagsWait+0x104>
          rflags = (uint32_t)osErrorResource;
 800fdd8:	f06f 0302 	mvn.w	r3, #2
 800fddc:	637b      	str	r3, [r7, #52]	; 0x34
 800fdde:	e002      	b.n	800fde6 <osThreadFlagsWait+0x10a>
        } else {
          rflags = (uint32_t)osErrorTimeout;
 800fde0:	f06f 0301 	mvn.w	r3, #1
 800fde4:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
    }
    while (rval != pdFAIL);
 800fde6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fde8:	2b00      	cmp	r3, #0
 800fdea:	d1af      	bne.n	800fd4c <osThreadFlagsWait+0x70>
 800fdec:	e002      	b.n	800fdf4 <osThreadFlagsWait+0x118>
            break;
 800fdee:	bf00      	nop
 800fdf0:	e000      	b.n	800fdf4 <osThreadFlagsWait+0x118>
            break;
 800fdf2:	bf00      	nop
  }

  /* Return flags before clearing */
  return (rflags);
 800fdf4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800fdf6:	4618      	mov	r0, r3
 800fdf8:	3738      	adds	r7, #56	; 0x38
 800fdfa:	46bd      	mov	sp, r7
 800fdfc:	bd80      	pop	{r7, pc}
 800fdfe:	bf00      	nop
 800fe00:	20001434 	.word	0x20001434

0800fe04 <osDelay>:

osStatus_t osDelay (uint32_t ticks) {
 800fe04:	b580      	push	{r7, lr}
 800fe06:	b086      	sub	sp, #24
 800fe08:	af00      	add	r7, sp, #0
 800fe0a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800fe0c:	f3ef 8305 	mrs	r3, IPSR
 800fe10:	613b      	str	r3, [r7, #16]
  return(result);
 800fe12:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 800fe14:	2b00      	cmp	r3, #0
 800fe16:	d10f      	bne.n	800fe38 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800fe18:	f3ef 8310 	mrs	r3, PRIMASK
 800fe1c:	60fb      	str	r3, [r7, #12]
  return(result);
 800fe1e:	68fb      	ldr	r3, [r7, #12]
 800fe20:	2b00      	cmp	r3, #0
 800fe22:	d105      	bne.n	800fe30 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800fe24:	f3ef 8311 	mrs	r3, BASEPRI
 800fe28:	60bb      	str	r3, [r7, #8]
  return(result);
 800fe2a:	68bb      	ldr	r3, [r7, #8]
 800fe2c:	2b00      	cmp	r3, #0
 800fe2e:	d007      	beq.n	800fe40 <osDelay+0x3c>
 800fe30:	4b0a      	ldr	r3, [pc, #40]	; (800fe5c <osDelay+0x58>)
 800fe32:	681b      	ldr	r3, [r3, #0]
 800fe34:	2b02      	cmp	r3, #2
 800fe36:	d103      	bne.n	800fe40 <osDelay+0x3c>
    stat = osErrorISR;
 800fe38:	f06f 0305 	mvn.w	r3, #5
 800fe3c:	617b      	str	r3, [r7, #20]
 800fe3e:	e007      	b.n	800fe50 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 800fe40:	2300      	movs	r3, #0
 800fe42:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 800fe44:	687b      	ldr	r3, [r7, #4]
 800fe46:	2b00      	cmp	r3, #0
 800fe48:	d002      	beq.n	800fe50 <osDelay+0x4c>
      vTaskDelay(ticks);
 800fe4a:	6878      	ldr	r0, [r7, #4]
 800fe4c:	f002 fb5c 	bl	8012508 <vTaskDelay>
    }
  }

  return (stat);
 800fe50:	697b      	ldr	r3, [r7, #20]
}
 800fe52:	4618      	mov	r0, r3
 800fe54:	3718      	adds	r7, #24
 800fe56:	46bd      	mov	sp, r7
 800fe58:	bd80      	pop	{r7, pc}
 800fe5a:	bf00      	nop
 800fe5c:	20001434 	.word	0x20001434

0800fe60 <osMutexNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 800fe60:	b580      	push	{r7, lr}
 800fe62:	b08a      	sub	sp, #40	; 0x28
 800fe64:	af00      	add	r7, sp, #0
 800fe66:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 800fe68:	2300      	movs	r3, #0
 800fe6a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800fe6c:	f3ef 8305 	mrs	r3, IPSR
 800fe70:	613b      	str	r3, [r7, #16]
  return(result);
 800fe72:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ()) {
 800fe74:	2b00      	cmp	r3, #0
 800fe76:	f040 8085 	bne.w	800ff84 <osMutexNew+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800fe7a:	f3ef 8310 	mrs	r3, PRIMASK
 800fe7e:	60fb      	str	r3, [r7, #12]
  return(result);
 800fe80:	68fb      	ldr	r3, [r7, #12]
 800fe82:	2b00      	cmp	r3, #0
 800fe84:	d105      	bne.n	800fe92 <osMutexNew+0x32>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800fe86:	f3ef 8311 	mrs	r3, BASEPRI
 800fe8a:	60bb      	str	r3, [r7, #8]
  return(result);
 800fe8c:	68bb      	ldr	r3, [r7, #8]
 800fe8e:	2b00      	cmp	r3, #0
 800fe90:	d003      	beq.n	800fe9a <osMutexNew+0x3a>
 800fe92:	4b3f      	ldr	r3, [pc, #252]	; (800ff90 <osMutexNew+0x130>)
 800fe94:	681b      	ldr	r3, [r3, #0]
 800fe96:	2b02      	cmp	r3, #2
 800fe98:	d074      	beq.n	800ff84 <osMutexNew+0x124>
    if (attr != NULL) {
 800fe9a:	687b      	ldr	r3, [r7, #4]
 800fe9c:	2b00      	cmp	r3, #0
 800fe9e:	d003      	beq.n	800fea8 <osMutexNew+0x48>
      type = attr->attr_bits;
 800fea0:	687b      	ldr	r3, [r7, #4]
 800fea2:	685b      	ldr	r3, [r3, #4]
 800fea4:	623b      	str	r3, [r7, #32]
 800fea6:	e001      	b.n	800feac <osMutexNew+0x4c>
    } else {
      type = 0U;
 800fea8:	2300      	movs	r3, #0
 800feaa:	623b      	str	r3, [r7, #32]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 800feac:	6a3b      	ldr	r3, [r7, #32]
 800feae:	f003 0301 	and.w	r3, r3, #1
 800feb2:	2b00      	cmp	r3, #0
 800feb4:	d002      	beq.n	800febc <osMutexNew+0x5c>
      rmtx = 1U;
 800feb6:	2301      	movs	r3, #1
 800feb8:	61fb      	str	r3, [r7, #28]
 800feba:	e001      	b.n	800fec0 <osMutexNew+0x60>
    } else {
      rmtx = 0U;
 800febc:	2300      	movs	r3, #0
 800febe:	61fb      	str	r3, [r7, #28]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 800fec0:	6a3b      	ldr	r3, [r7, #32]
 800fec2:	f003 0308 	and.w	r3, r3, #8
 800fec6:	2b00      	cmp	r3, #0
 800fec8:	d15c      	bne.n	800ff84 <osMutexNew+0x124>
      mem = -1;
 800feca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800fece:	61bb      	str	r3, [r7, #24]

      if (attr != NULL) {
 800fed0:	687b      	ldr	r3, [r7, #4]
 800fed2:	2b00      	cmp	r3, #0
 800fed4:	d015      	beq.n	800ff02 <osMutexNew+0xa2>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800fed6:	687b      	ldr	r3, [r7, #4]
 800fed8:	689b      	ldr	r3, [r3, #8]
 800feda:	2b00      	cmp	r3, #0
 800fedc:	d006      	beq.n	800feec <osMutexNew+0x8c>
 800fede:	687b      	ldr	r3, [r7, #4]
 800fee0:	68db      	ldr	r3, [r3, #12]
 800fee2:	2b4f      	cmp	r3, #79	; 0x4f
 800fee4:	d902      	bls.n	800feec <osMutexNew+0x8c>
          mem = 1;
 800fee6:	2301      	movs	r3, #1
 800fee8:	61bb      	str	r3, [r7, #24]
 800feea:	e00c      	b.n	800ff06 <osMutexNew+0xa6>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800feec:	687b      	ldr	r3, [r7, #4]
 800feee:	689b      	ldr	r3, [r3, #8]
 800fef0:	2b00      	cmp	r3, #0
 800fef2:	d108      	bne.n	800ff06 <osMutexNew+0xa6>
 800fef4:	687b      	ldr	r3, [r7, #4]
 800fef6:	68db      	ldr	r3, [r3, #12]
 800fef8:	2b00      	cmp	r3, #0
 800fefa:	d104      	bne.n	800ff06 <osMutexNew+0xa6>
            mem = 0;
 800fefc:	2300      	movs	r3, #0
 800fefe:	61bb      	str	r3, [r7, #24]
 800ff00:	e001      	b.n	800ff06 <osMutexNew+0xa6>
          }
        }
      }
      else {
        mem = 0;
 800ff02:	2300      	movs	r3, #0
 800ff04:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 800ff06:	69bb      	ldr	r3, [r7, #24]
 800ff08:	2b01      	cmp	r3, #1
 800ff0a:	d112      	bne.n	800ff32 <osMutexNew+0xd2>
        if (rmtx != 0U) {
 800ff0c:	69fb      	ldr	r3, [r7, #28]
 800ff0e:	2b00      	cmp	r3, #0
 800ff10:	d007      	beq.n	800ff22 <osMutexNew+0xc2>
          hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 800ff12:	687b      	ldr	r3, [r7, #4]
 800ff14:	689b      	ldr	r3, [r3, #8]
 800ff16:	4619      	mov	r1, r3
 800ff18:	2004      	movs	r0, #4
 800ff1a:	f001 fa24 	bl	8011366 <xQueueCreateMutexStatic>
 800ff1e:	6278      	str	r0, [r7, #36]	; 0x24
 800ff20:	e016      	b.n	800ff50 <osMutexNew+0xf0>
        }
        else {
          hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 800ff22:	687b      	ldr	r3, [r7, #4]
 800ff24:	689b      	ldr	r3, [r3, #8]
 800ff26:	4619      	mov	r1, r3
 800ff28:	2001      	movs	r0, #1
 800ff2a:	f001 fa1c 	bl	8011366 <xQueueCreateMutexStatic>
 800ff2e:	6278      	str	r0, [r7, #36]	; 0x24
 800ff30:	e00e      	b.n	800ff50 <osMutexNew+0xf0>
        }
      }
      else {
        if (mem == 0) {
 800ff32:	69bb      	ldr	r3, [r7, #24]
 800ff34:	2b00      	cmp	r3, #0
 800ff36:	d10b      	bne.n	800ff50 <osMutexNew+0xf0>
          if (rmtx != 0U) {
 800ff38:	69fb      	ldr	r3, [r7, #28]
 800ff3a:	2b00      	cmp	r3, #0
 800ff3c:	d004      	beq.n	800ff48 <osMutexNew+0xe8>
            hMutex = xSemaphoreCreateRecursiveMutex ();
 800ff3e:	2004      	movs	r0, #4
 800ff40:	f001 f9f9 	bl	8011336 <xQueueCreateMutex>
 800ff44:	6278      	str	r0, [r7, #36]	; 0x24
 800ff46:	e003      	b.n	800ff50 <osMutexNew+0xf0>
          } else {
            hMutex = xSemaphoreCreateMutex ();
 800ff48:	2001      	movs	r0, #1
 800ff4a:	f001 f9f4 	bl	8011336 <xQueueCreateMutex>
 800ff4e:	6278      	str	r0, [r7, #36]	; 0x24
          }
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 800ff50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ff52:	2b00      	cmp	r3, #0
 800ff54:	d00c      	beq.n	800ff70 <osMutexNew+0x110>
        if (attr != NULL) {
 800ff56:	687b      	ldr	r3, [r7, #4]
 800ff58:	2b00      	cmp	r3, #0
 800ff5a:	d003      	beq.n	800ff64 <osMutexNew+0x104>
          name = attr->name;
 800ff5c:	687b      	ldr	r3, [r7, #4]
 800ff5e:	681b      	ldr	r3, [r3, #0]
 800ff60:	617b      	str	r3, [r7, #20]
 800ff62:	e001      	b.n	800ff68 <osMutexNew+0x108>
        } else {
          name = NULL;
 800ff64:	2300      	movs	r3, #0
 800ff66:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hMutex, name);
 800ff68:	6979      	ldr	r1, [r7, #20]
 800ff6a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ff6c:	f002 f8a8 	bl	80120c0 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 800ff70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ff72:	2b00      	cmp	r3, #0
 800ff74:	d006      	beq.n	800ff84 <osMutexNew+0x124>
 800ff76:	69fb      	ldr	r3, [r7, #28]
 800ff78:	2b00      	cmp	r3, #0
 800ff7a:	d003      	beq.n	800ff84 <osMutexNew+0x124>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 800ff7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ff7e:	f043 0301 	orr.w	r3, r3, #1
 800ff82:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }
  }

  return ((osMutexId_t)hMutex);
 800ff84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800ff86:	4618      	mov	r0, r3
 800ff88:	3728      	adds	r7, #40	; 0x28
 800ff8a:	46bd      	mov	sp, r7
 800ff8c:	bd80      	pop	{r7, pc}
 800ff8e:	bf00      	nop
 800ff90:	20001434 	.word	0x20001434

0800ff94 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 800ff94:	b580      	push	{r7, lr}
 800ff96:	b088      	sub	sp, #32
 800ff98:	af00      	add	r7, sp, #0
 800ff9a:	6078      	str	r0, [r7, #4]
 800ff9c:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800ff9e:	687b      	ldr	r3, [r7, #4]
 800ffa0:	f023 0301 	bic.w	r3, r3, #1
 800ffa4:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 800ffa6:	687b      	ldr	r3, [r7, #4]
 800ffa8:	f003 0301 	and.w	r3, r3, #1
 800ffac:	617b      	str	r3, [r7, #20]

  stat = osOK;
 800ffae:	2300      	movs	r3, #0
 800ffb0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ffb2:	f3ef 8305 	mrs	r3, IPSR
 800ffb6:	613b      	str	r3, [r7, #16]
  return(result);
 800ffb8:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 800ffba:	2b00      	cmp	r3, #0
 800ffbc:	d10f      	bne.n	800ffde <osMutexAcquire+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ffbe:	f3ef 8310 	mrs	r3, PRIMASK
 800ffc2:	60fb      	str	r3, [r7, #12]
  return(result);
 800ffc4:	68fb      	ldr	r3, [r7, #12]
 800ffc6:	2b00      	cmp	r3, #0
 800ffc8:	d105      	bne.n	800ffd6 <osMutexAcquire+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800ffca:	f3ef 8311 	mrs	r3, BASEPRI
 800ffce:	60bb      	str	r3, [r7, #8]
  return(result);
 800ffd0:	68bb      	ldr	r3, [r7, #8]
 800ffd2:	2b00      	cmp	r3, #0
 800ffd4:	d007      	beq.n	800ffe6 <osMutexAcquire+0x52>
 800ffd6:	4b1d      	ldr	r3, [pc, #116]	; (801004c <osMutexAcquire+0xb8>)
 800ffd8:	681b      	ldr	r3, [r3, #0]
 800ffda:	2b02      	cmp	r3, #2
 800ffdc:	d103      	bne.n	800ffe6 <osMutexAcquire+0x52>
    stat = osErrorISR;
 800ffde:	f06f 0305 	mvn.w	r3, #5
 800ffe2:	61fb      	str	r3, [r7, #28]
 800ffe4:	e02c      	b.n	8010040 <osMutexAcquire+0xac>
  }
  else if (hMutex == NULL) {
 800ffe6:	69bb      	ldr	r3, [r7, #24]
 800ffe8:	2b00      	cmp	r3, #0
 800ffea:	d103      	bne.n	800fff4 <osMutexAcquire+0x60>
    stat = osErrorParameter;
 800ffec:	f06f 0303 	mvn.w	r3, #3
 800fff0:	61fb      	str	r3, [r7, #28]
 800fff2:	e025      	b.n	8010040 <osMutexAcquire+0xac>
  }
  else {
    if (rmtx != 0U) {
 800fff4:	697b      	ldr	r3, [r7, #20]
 800fff6:	2b00      	cmp	r3, #0
 800fff8:	d011      	beq.n	801001e <osMutexAcquire+0x8a>
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 800fffa:	6839      	ldr	r1, [r7, #0]
 800fffc:	69b8      	ldr	r0, [r7, #24]
 800fffe:	f001 fa00 	bl	8011402 <xQueueTakeMutexRecursive>
 8010002:	4603      	mov	r3, r0
 8010004:	2b01      	cmp	r3, #1
 8010006:	d01b      	beq.n	8010040 <osMutexAcquire+0xac>
        if (timeout != 0U) {
 8010008:	683b      	ldr	r3, [r7, #0]
 801000a:	2b00      	cmp	r3, #0
 801000c:	d003      	beq.n	8010016 <osMutexAcquire+0x82>
          stat = osErrorTimeout;
 801000e:	f06f 0301 	mvn.w	r3, #1
 8010012:	61fb      	str	r3, [r7, #28]
 8010014:	e014      	b.n	8010040 <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 8010016:	f06f 0302 	mvn.w	r3, #2
 801001a:	61fb      	str	r3, [r7, #28]
 801001c:	e010      	b.n	8010040 <osMutexAcquire+0xac>
        }
      }
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 801001e:	6839      	ldr	r1, [r7, #0]
 8010020:	69b8      	ldr	r0, [r7, #24]
 8010022:	f001 fd7d 	bl	8011b20 <xQueueSemaphoreTake>
 8010026:	4603      	mov	r3, r0
 8010028:	2b01      	cmp	r3, #1
 801002a:	d009      	beq.n	8010040 <osMutexAcquire+0xac>
        if (timeout != 0U) {
 801002c:	683b      	ldr	r3, [r7, #0]
 801002e:	2b00      	cmp	r3, #0
 8010030:	d003      	beq.n	801003a <osMutexAcquire+0xa6>
          stat = osErrorTimeout;
 8010032:	f06f 0301 	mvn.w	r3, #1
 8010036:	61fb      	str	r3, [r7, #28]
 8010038:	e002      	b.n	8010040 <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 801003a:	f06f 0302 	mvn.w	r3, #2
 801003e:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8010040:	69fb      	ldr	r3, [r7, #28]
}
 8010042:	4618      	mov	r0, r3
 8010044:	3720      	adds	r7, #32
 8010046:	46bd      	mov	sp, r7
 8010048:	bd80      	pop	{r7, pc}
 801004a:	bf00      	nop
 801004c:	20001434 	.word	0x20001434

08010050 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 8010050:	b580      	push	{r7, lr}
 8010052:	b088      	sub	sp, #32
 8010054:	af00      	add	r7, sp, #0
 8010056:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8010058:	687b      	ldr	r3, [r7, #4]
 801005a:	f023 0301 	bic.w	r3, r3, #1
 801005e:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 8010060:	687b      	ldr	r3, [r7, #4]
 8010062:	f003 0301 	and.w	r3, r3, #1
 8010066:	617b      	str	r3, [r7, #20]

  stat = osOK;
 8010068:	2300      	movs	r3, #0
 801006a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801006c:	f3ef 8305 	mrs	r3, IPSR
 8010070:	613b      	str	r3, [r7, #16]
  return(result);
 8010072:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 8010074:	2b00      	cmp	r3, #0
 8010076:	d10f      	bne.n	8010098 <osMutexRelease+0x48>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010078:	f3ef 8310 	mrs	r3, PRIMASK
 801007c:	60fb      	str	r3, [r7, #12]
  return(result);
 801007e:	68fb      	ldr	r3, [r7, #12]
 8010080:	2b00      	cmp	r3, #0
 8010082:	d105      	bne.n	8010090 <osMutexRelease+0x40>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8010084:	f3ef 8311 	mrs	r3, BASEPRI
 8010088:	60bb      	str	r3, [r7, #8]
  return(result);
 801008a:	68bb      	ldr	r3, [r7, #8]
 801008c:	2b00      	cmp	r3, #0
 801008e:	d007      	beq.n	80100a0 <osMutexRelease+0x50>
 8010090:	4b16      	ldr	r3, [pc, #88]	; (80100ec <osMutexRelease+0x9c>)
 8010092:	681b      	ldr	r3, [r3, #0]
 8010094:	2b02      	cmp	r3, #2
 8010096:	d103      	bne.n	80100a0 <osMutexRelease+0x50>
    stat = osErrorISR;
 8010098:	f06f 0305 	mvn.w	r3, #5
 801009c:	61fb      	str	r3, [r7, #28]
 801009e:	e01f      	b.n	80100e0 <osMutexRelease+0x90>
  }
  else if (hMutex == NULL) {
 80100a0:	69bb      	ldr	r3, [r7, #24]
 80100a2:	2b00      	cmp	r3, #0
 80100a4:	d103      	bne.n	80100ae <osMutexRelease+0x5e>
    stat = osErrorParameter;
 80100a6:	f06f 0303 	mvn.w	r3, #3
 80100aa:	61fb      	str	r3, [r7, #28]
 80100ac:	e018      	b.n	80100e0 <osMutexRelease+0x90>
  }
  else {
    if (rmtx != 0U) {
 80100ae:	697b      	ldr	r3, [r7, #20]
 80100b0:	2b00      	cmp	r3, #0
 80100b2:	d009      	beq.n	80100c8 <osMutexRelease+0x78>
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 80100b4:	69b8      	ldr	r0, [r7, #24]
 80100b6:	f001 f971 	bl	801139c <xQueueGiveMutexRecursive>
 80100ba:	4603      	mov	r3, r0
 80100bc:	2b01      	cmp	r3, #1
 80100be:	d00f      	beq.n	80100e0 <osMutexRelease+0x90>
        stat = osErrorResource;
 80100c0:	f06f 0302 	mvn.w	r3, #2
 80100c4:	61fb      	str	r3, [r7, #28]
 80100c6:	e00b      	b.n	80100e0 <osMutexRelease+0x90>
      }
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 80100c8:	2300      	movs	r3, #0
 80100ca:	2200      	movs	r2, #0
 80100cc:	2100      	movs	r1, #0
 80100ce:	69b8      	ldr	r0, [r7, #24]
 80100d0:	f001 fa32 	bl	8011538 <xQueueGenericSend>
 80100d4:	4603      	mov	r3, r0
 80100d6:	2b01      	cmp	r3, #1
 80100d8:	d002      	beq.n	80100e0 <osMutexRelease+0x90>
        stat = osErrorResource;
 80100da:	f06f 0302 	mvn.w	r3, #2
 80100de:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return (stat);
 80100e0:	69fb      	ldr	r3, [r7, #28]
}
 80100e2:	4618      	mov	r0, r3
 80100e4:	3720      	adds	r7, #32
 80100e6:	46bd      	mov	sp, r7
 80100e8:	bd80      	pop	{r7, pc}
 80100ea:	bf00      	nop
 80100ec:	20001434 	.word	0x20001434

080100f0 <osSemaphoreNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 80100f0:	b580      	push	{r7, lr}
 80100f2:	b08c      	sub	sp, #48	; 0x30
 80100f4:	af02      	add	r7, sp, #8
 80100f6:	60f8      	str	r0, [r7, #12]
 80100f8:	60b9      	str	r1, [r7, #8]
 80100fa:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 80100fc:	2300      	movs	r3, #0
 80100fe:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8010100:	f3ef 8305 	mrs	r3, IPSR
 8010104:	61bb      	str	r3, [r7, #24]
  return(result);
 8010106:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8010108:	2b00      	cmp	r3, #0
 801010a:	f040 8087 	bne.w	801021c <osSemaphoreNew+0x12c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801010e:	f3ef 8310 	mrs	r3, PRIMASK
 8010112:	617b      	str	r3, [r7, #20]
  return(result);
 8010114:	697b      	ldr	r3, [r7, #20]
 8010116:	2b00      	cmp	r3, #0
 8010118:	d105      	bne.n	8010126 <osSemaphoreNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 801011a:	f3ef 8311 	mrs	r3, BASEPRI
 801011e:	613b      	str	r3, [r7, #16]
  return(result);
 8010120:	693b      	ldr	r3, [r7, #16]
 8010122:	2b00      	cmp	r3, #0
 8010124:	d003      	beq.n	801012e <osSemaphoreNew+0x3e>
 8010126:	4b40      	ldr	r3, [pc, #256]	; (8010228 <osSemaphoreNew+0x138>)
 8010128:	681b      	ldr	r3, [r3, #0]
 801012a:	2b02      	cmp	r3, #2
 801012c:	d076      	beq.n	801021c <osSemaphoreNew+0x12c>
 801012e:	68fb      	ldr	r3, [r7, #12]
 8010130:	2b00      	cmp	r3, #0
 8010132:	d073      	beq.n	801021c <osSemaphoreNew+0x12c>
 8010134:	68ba      	ldr	r2, [r7, #8]
 8010136:	68fb      	ldr	r3, [r7, #12]
 8010138:	429a      	cmp	r2, r3
 801013a:	d86f      	bhi.n	801021c <osSemaphoreNew+0x12c>
    mem = -1;
 801013c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010140:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8010142:	687b      	ldr	r3, [r7, #4]
 8010144:	2b00      	cmp	r3, #0
 8010146:	d015      	beq.n	8010174 <osSemaphoreNew+0x84>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8010148:	687b      	ldr	r3, [r7, #4]
 801014a:	689b      	ldr	r3, [r3, #8]
 801014c:	2b00      	cmp	r3, #0
 801014e:	d006      	beq.n	801015e <osSemaphoreNew+0x6e>
 8010150:	687b      	ldr	r3, [r7, #4]
 8010152:	68db      	ldr	r3, [r3, #12]
 8010154:	2b4f      	cmp	r3, #79	; 0x4f
 8010156:	d902      	bls.n	801015e <osSemaphoreNew+0x6e>
        mem = 1;
 8010158:	2301      	movs	r3, #1
 801015a:	623b      	str	r3, [r7, #32]
 801015c:	e00c      	b.n	8010178 <osSemaphoreNew+0x88>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 801015e:	687b      	ldr	r3, [r7, #4]
 8010160:	689b      	ldr	r3, [r3, #8]
 8010162:	2b00      	cmp	r3, #0
 8010164:	d108      	bne.n	8010178 <osSemaphoreNew+0x88>
 8010166:	687b      	ldr	r3, [r7, #4]
 8010168:	68db      	ldr	r3, [r3, #12]
 801016a:	2b00      	cmp	r3, #0
 801016c:	d104      	bne.n	8010178 <osSemaphoreNew+0x88>
          mem = 0;
 801016e:	2300      	movs	r3, #0
 8010170:	623b      	str	r3, [r7, #32]
 8010172:	e001      	b.n	8010178 <osSemaphoreNew+0x88>
        }
      }
    }
    else {
      mem = 0;
 8010174:	2300      	movs	r3, #0
 8010176:	623b      	str	r3, [r7, #32]
    }

    if (mem != -1) {
 8010178:	6a3b      	ldr	r3, [r7, #32]
 801017a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801017e:	d04d      	beq.n	801021c <osSemaphoreNew+0x12c>
      if (max_count == 1U) {
 8010180:	68fb      	ldr	r3, [r7, #12]
 8010182:	2b01      	cmp	r3, #1
 8010184:	d129      	bne.n	80101da <osSemaphoreNew+0xea>
        if (mem == 1) {
 8010186:	6a3b      	ldr	r3, [r7, #32]
 8010188:	2b01      	cmp	r3, #1
 801018a:	d10b      	bne.n	80101a4 <osSemaphoreNew+0xb4>
          hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 801018c:	687b      	ldr	r3, [r7, #4]
 801018e:	689a      	ldr	r2, [r3, #8]
 8010190:	2303      	movs	r3, #3
 8010192:	9300      	str	r3, [sp, #0]
 8010194:	4613      	mov	r3, r2
 8010196:	2200      	movs	r2, #0
 8010198:	2100      	movs	r1, #0
 801019a:	2001      	movs	r0, #1
 801019c:	f000 ffdc 	bl	8011158 <xQueueGenericCreateStatic>
 80101a0:	6278      	str	r0, [r7, #36]	; 0x24
 80101a2:	e005      	b.n	80101b0 <osSemaphoreNew+0xc0>
        }
        else {
          hSemaphore = xSemaphoreCreateBinary();
 80101a4:	2203      	movs	r2, #3
 80101a6:	2100      	movs	r1, #0
 80101a8:	2001      	movs	r0, #1
 80101aa:	f001 f848 	bl	801123e <xQueueGenericCreate>
 80101ae:	6278      	str	r0, [r7, #36]	; 0x24
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 80101b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80101b2:	2b00      	cmp	r3, #0
 80101b4:	d022      	beq.n	80101fc <osSemaphoreNew+0x10c>
 80101b6:	68bb      	ldr	r3, [r7, #8]
 80101b8:	2b00      	cmp	r3, #0
 80101ba:	d01f      	beq.n	80101fc <osSemaphoreNew+0x10c>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 80101bc:	2300      	movs	r3, #0
 80101be:	2200      	movs	r2, #0
 80101c0:	2100      	movs	r1, #0
 80101c2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80101c4:	f001 f9b8 	bl	8011538 <xQueueGenericSend>
 80101c8:	4603      	mov	r3, r0
 80101ca:	2b01      	cmp	r3, #1
 80101cc:	d016      	beq.n	80101fc <osSemaphoreNew+0x10c>
            vSemaphoreDelete (hSemaphore);
 80101ce:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80101d0:	f001 fe2b 	bl	8011e2a <vQueueDelete>
            hSemaphore = NULL;
 80101d4:	2300      	movs	r3, #0
 80101d6:	627b      	str	r3, [r7, #36]	; 0x24
 80101d8:	e010      	b.n	80101fc <osSemaphoreNew+0x10c>
          }
        }
      }
      else {
        if (mem == 1) {
 80101da:	6a3b      	ldr	r3, [r7, #32]
 80101dc:	2b01      	cmp	r3, #1
 80101de:	d108      	bne.n	80101f2 <osSemaphoreNew+0x102>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 80101e0:	687b      	ldr	r3, [r7, #4]
 80101e2:	689b      	ldr	r3, [r3, #8]
 80101e4:	461a      	mov	r2, r3
 80101e6:	68b9      	ldr	r1, [r7, #8]
 80101e8:	68f8      	ldr	r0, [r7, #12]
 80101ea:	f001 f93f 	bl	801146c <xQueueCreateCountingSemaphoreStatic>
 80101ee:	6278      	str	r0, [r7, #36]	; 0x24
 80101f0:	e004      	b.n	80101fc <osSemaphoreNew+0x10c>
        }
        else {
          hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 80101f2:	68b9      	ldr	r1, [r7, #8]
 80101f4:	68f8      	ldr	r0, [r7, #12]
 80101f6:	f001 f96e 	bl	80114d6 <xQueueCreateCountingSemaphore>
 80101fa:	6278      	str	r0, [r7, #36]	; 0x24
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 80101fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80101fe:	2b00      	cmp	r3, #0
 8010200:	d00c      	beq.n	801021c <osSemaphoreNew+0x12c>
        if (attr != NULL) {
 8010202:	687b      	ldr	r3, [r7, #4]
 8010204:	2b00      	cmp	r3, #0
 8010206:	d003      	beq.n	8010210 <osSemaphoreNew+0x120>
          name = attr->name;
 8010208:	687b      	ldr	r3, [r7, #4]
 801020a:	681b      	ldr	r3, [r3, #0]
 801020c:	61fb      	str	r3, [r7, #28]
 801020e:	e001      	b.n	8010214 <osSemaphoreNew+0x124>
        } else {
          name = NULL;
 8010210:	2300      	movs	r3, #0
 8010212:	61fb      	str	r3, [r7, #28]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8010214:	69f9      	ldr	r1, [r7, #28]
 8010216:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010218:	f001 ff52 	bl	80120c0 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 801021c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 801021e:	4618      	mov	r0, r3
 8010220:	3728      	adds	r7, #40	; 0x28
 8010222:	46bd      	mov	sp, r7
 8010224:	bd80      	pop	{r7, pc}
 8010226:	bf00      	nop
 8010228:	20001434 	.word	0x20001434

0801022c <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 801022c:	b580      	push	{r7, lr}
 801022e:	b088      	sub	sp, #32
 8010230:	af00      	add	r7, sp, #0
 8010232:	6078      	str	r0, [r7, #4]
 8010234:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8010236:	687b      	ldr	r3, [r7, #4]
 8010238:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 801023a:	2300      	movs	r3, #0
 801023c:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 801023e:	69bb      	ldr	r3, [r7, #24]
 8010240:	2b00      	cmp	r3, #0
 8010242:	d103      	bne.n	801024c <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8010244:	f06f 0303 	mvn.w	r3, #3
 8010248:	61fb      	str	r3, [r7, #28]
 801024a:	e04b      	b.n	80102e4 <osSemaphoreAcquire+0xb8>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801024c:	f3ef 8305 	mrs	r3, IPSR
 8010250:	617b      	str	r3, [r7, #20]
  return(result);
 8010252:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8010254:	2b00      	cmp	r3, #0
 8010256:	d10f      	bne.n	8010278 <osSemaphoreAcquire+0x4c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010258:	f3ef 8310 	mrs	r3, PRIMASK
 801025c:	613b      	str	r3, [r7, #16]
  return(result);
 801025e:	693b      	ldr	r3, [r7, #16]
 8010260:	2b00      	cmp	r3, #0
 8010262:	d105      	bne.n	8010270 <osSemaphoreAcquire+0x44>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8010264:	f3ef 8311 	mrs	r3, BASEPRI
 8010268:	60fb      	str	r3, [r7, #12]
  return(result);
 801026a:	68fb      	ldr	r3, [r7, #12]
 801026c:	2b00      	cmp	r3, #0
 801026e:	d026      	beq.n	80102be <osSemaphoreAcquire+0x92>
 8010270:	4b1f      	ldr	r3, [pc, #124]	; (80102f0 <osSemaphoreAcquire+0xc4>)
 8010272:	681b      	ldr	r3, [r3, #0]
 8010274:	2b02      	cmp	r3, #2
 8010276:	d122      	bne.n	80102be <osSemaphoreAcquire+0x92>
    if (timeout != 0U) {
 8010278:	683b      	ldr	r3, [r7, #0]
 801027a:	2b00      	cmp	r3, #0
 801027c:	d003      	beq.n	8010286 <osSemaphoreAcquire+0x5a>
      stat = osErrorParameter;
 801027e:	f06f 0303 	mvn.w	r3, #3
 8010282:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 8010284:	e02d      	b.n	80102e2 <osSemaphoreAcquire+0xb6>
    }
    else {
      yield = pdFALSE;
 8010286:	2300      	movs	r3, #0
 8010288:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 801028a:	f107 0308 	add.w	r3, r7, #8
 801028e:	461a      	mov	r2, r3
 8010290:	2100      	movs	r1, #0
 8010292:	69b8      	ldr	r0, [r7, #24]
 8010294:	f001 fd4c 	bl	8011d30 <xQueueReceiveFromISR>
 8010298:	4603      	mov	r3, r0
 801029a:	2b01      	cmp	r3, #1
 801029c:	d003      	beq.n	80102a6 <osSemaphoreAcquire+0x7a>
        stat = osErrorResource;
 801029e:	f06f 0302 	mvn.w	r3, #2
 80102a2:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 80102a4:	e01d      	b.n	80102e2 <osSemaphoreAcquire+0xb6>
      } else {
        portYIELD_FROM_ISR (yield);
 80102a6:	68bb      	ldr	r3, [r7, #8]
 80102a8:	2b00      	cmp	r3, #0
 80102aa:	d01a      	beq.n	80102e2 <osSemaphoreAcquire+0xb6>
 80102ac:	4b11      	ldr	r3, [pc, #68]	; (80102f4 <osSemaphoreAcquire+0xc8>)
 80102ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80102b2:	601a      	str	r2, [r3, #0]
 80102b4:	f3bf 8f4f 	dsb	sy
 80102b8:	f3bf 8f6f 	isb	sy
    if (timeout != 0U) {
 80102bc:	e011      	b.n	80102e2 <osSemaphoreAcquire+0xb6>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 80102be:	6839      	ldr	r1, [r7, #0]
 80102c0:	69b8      	ldr	r0, [r7, #24]
 80102c2:	f001 fc2d 	bl	8011b20 <xQueueSemaphoreTake>
 80102c6:	4603      	mov	r3, r0
 80102c8:	2b01      	cmp	r3, #1
 80102ca:	d00b      	beq.n	80102e4 <osSemaphoreAcquire+0xb8>
      if (timeout != 0U) {
 80102cc:	683b      	ldr	r3, [r7, #0]
 80102ce:	2b00      	cmp	r3, #0
 80102d0:	d003      	beq.n	80102da <osSemaphoreAcquire+0xae>
        stat = osErrorTimeout;
 80102d2:	f06f 0301 	mvn.w	r3, #1
 80102d6:	61fb      	str	r3, [r7, #28]
 80102d8:	e004      	b.n	80102e4 <osSemaphoreAcquire+0xb8>
      } else {
        stat = osErrorResource;
 80102da:	f06f 0302 	mvn.w	r3, #2
 80102de:	61fb      	str	r3, [r7, #28]
 80102e0:	e000      	b.n	80102e4 <osSemaphoreAcquire+0xb8>
    if (timeout != 0U) {
 80102e2:	bf00      	nop
      }
    }
  }

  return (stat);
 80102e4:	69fb      	ldr	r3, [r7, #28]
}
 80102e6:	4618      	mov	r0, r3
 80102e8:	3720      	adds	r7, #32
 80102ea:	46bd      	mov	sp, r7
 80102ec:	bd80      	pop	{r7, pc}
 80102ee:	bf00      	nop
 80102f0:	20001434 	.word	0x20001434
 80102f4:	e000ed04 	.word	0xe000ed04

080102f8 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 80102f8:	b580      	push	{r7, lr}
 80102fa:	b088      	sub	sp, #32
 80102fc:	af00      	add	r7, sp, #0
 80102fe:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8010300:	687b      	ldr	r3, [r7, #4]
 8010302:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8010304:	2300      	movs	r3, #0
 8010306:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 8010308:	69bb      	ldr	r3, [r7, #24]
 801030a:	2b00      	cmp	r3, #0
 801030c:	d103      	bne.n	8010316 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 801030e:	f06f 0303 	mvn.w	r3, #3
 8010312:	61fb      	str	r3, [r7, #28]
 8010314:	e03e      	b.n	8010394 <osSemaphoreRelease+0x9c>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8010316:	f3ef 8305 	mrs	r3, IPSR
 801031a:	617b      	str	r3, [r7, #20]
  return(result);
 801031c:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 801031e:	2b00      	cmp	r3, #0
 8010320:	d10f      	bne.n	8010342 <osSemaphoreRelease+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010322:	f3ef 8310 	mrs	r3, PRIMASK
 8010326:	613b      	str	r3, [r7, #16]
  return(result);
 8010328:	693b      	ldr	r3, [r7, #16]
 801032a:	2b00      	cmp	r3, #0
 801032c:	d105      	bne.n	801033a <osSemaphoreRelease+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 801032e:	f3ef 8311 	mrs	r3, BASEPRI
 8010332:	60fb      	str	r3, [r7, #12]
  return(result);
 8010334:	68fb      	ldr	r3, [r7, #12]
 8010336:	2b00      	cmp	r3, #0
 8010338:	d01e      	beq.n	8010378 <osSemaphoreRelease+0x80>
 801033a:	4b19      	ldr	r3, [pc, #100]	; (80103a0 <osSemaphoreRelease+0xa8>)
 801033c:	681b      	ldr	r3, [r3, #0]
 801033e:	2b02      	cmp	r3, #2
 8010340:	d11a      	bne.n	8010378 <osSemaphoreRelease+0x80>
    yield = pdFALSE;
 8010342:	2300      	movs	r3, #0
 8010344:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8010346:	f107 0308 	add.w	r3, r7, #8
 801034a:	4619      	mov	r1, r3
 801034c:	69b8      	ldr	r0, [r7, #24]
 801034e:	f001 fa81 	bl	8011854 <xQueueGiveFromISR>
 8010352:	4603      	mov	r3, r0
 8010354:	2b01      	cmp	r3, #1
 8010356:	d003      	beq.n	8010360 <osSemaphoreRelease+0x68>
      stat = osErrorResource;
 8010358:	f06f 0302 	mvn.w	r3, #2
 801035c:	61fb      	str	r3, [r7, #28]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 801035e:	e018      	b.n	8010392 <osSemaphoreRelease+0x9a>
    } else {
      portYIELD_FROM_ISR (yield);
 8010360:	68bb      	ldr	r3, [r7, #8]
 8010362:	2b00      	cmp	r3, #0
 8010364:	d015      	beq.n	8010392 <osSemaphoreRelease+0x9a>
 8010366:	4b0f      	ldr	r3, [pc, #60]	; (80103a4 <osSemaphoreRelease+0xac>)
 8010368:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801036c:	601a      	str	r2, [r3, #0]
 801036e:	f3bf 8f4f 	dsb	sy
 8010372:	f3bf 8f6f 	isb	sy
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8010376:	e00c      	b.n	8010392 <osSemaphoreRelease+0x9a>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8010378:	2300      	movs	r3, #0
 801037a:	2200      	movs	r2, #0
 801037c:	2100      	movs	r1, #0
 801037e:	69b8      	ldr	r0, [r7, #24]
 8010380:	f001 f8da 	bl	8011538 <xQueueGenericSend>
 8010384:	4603      	mov	r3, r0
 8010386:	2b01      	cmp	r3, #1
 8010388:	d004      	beq.n	8010394 <osSemaphoreRelease+0x9c>
      stat = osErrorResource;
 801038a:	f06f 0302 	mvn.w	r3, #2
 801038e:	61fb      	str	r3, [r7, #28]
 8010390:	e000      	b.n	8010394 <osSemaphoreRelease+0x9c>
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8010392:	bf00      	nop
    }
  }

  return (stat);
 8010394:	69fb      	ldr	r3, [r7, #28]
}
 8010396:	4618      	mov	r0, r3
 8010398:	3720      	adds	r7, #32
 801039a:	46bd      	mov	sp, r7
 801039c:	bd80      	pop	{r7, pc}
 801039e:	bf00      	nop
 80103a0:	20001434 	.word	0x20001434
 80103a4:	e000ed04 	.word	0xe000ed04

080103a8 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 80103a8:	b580      	push	{r7, lr}
 80103aa:	b08c      	sub	sp, #48	; 0x30
 80103ac:	af02      	add	r7, sp, #8
 80103ae:	60f8      	str	r0, [r7, #12]
 80103b0:	60b9      	str	r1, [r7, #8]
 80103b2:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 80103b4:	2300      	movs	r3, #0
 80103b6:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80103b8:	f3ef 8305 	mrs	r3, IPSR
 80103bc:	61bb      	str	r3, [r7, #24]
  return(result);
 80103be:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 80103c0:	2b00      	cmp	r3, #0
 80103c2:	d170      	bne.n	80104a6 <osMessageQueueNew+0xfe>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80103c4:	f3ef 8310 	mrs	r3, PRIMASK
 80103c8:	617b      	str	r3, [r7, #20]
  return(result);
 80103ca:	697b      	ldr	r3, [r7, #20]
 80103cc:	2b00      	cmp	r3, #0
 80103ce:	d105      	bne.n	80103dc <osMessageQueueNew+0x34>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80103d0:	f3ef 8311 	mrs	r3, BASEPRI
 80103d4:	613b      	str	r3, [r7, #16]
  return(result);
 80103d6:	693b      	ldr	r3, [r7, #16]
 80103d8:	2b00      	cmp	r3, #0
 80103da:	d003      	beq.n	80103e4 <osMessageQueueNew+0x3c>
 80103dc:	4b34      	ldr	r3, [pc, #208]	; (80104b0 <osMessageQueueNew+0x108>)
 80103de:	681b      	ldr	r3, [r3, #0]
 80103e0:	2b02      	cmp	r3, #2
 80103e2:	d060      	beq.n	80104a6 <osMessageQueueNew+0xfe>
 80103e4:	68fb      	ldr	r3, [r7, #12]
 80103e6:	2b00      	cmp	r3, #0
 80103e8:	d05d      	beq.n	80104a6 <osMessageQueueNew+0xfe>
 80103ea:	68bb      	ldr	r3, [r7, #8]
 80103ec:	2b00      	cmp	r3, #0
 80103ee:	d05a      	beq.n	80104a6 <osMessageQueueNew+0xfe>
    mem = -1;
 80103f0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80103f4:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 80103f6:	687b      	ldr	r3, [r7, #4]
 80103f8:	2b00      	cmp	r3, #0
 80103fa:	d029      	beq.n	8010450 <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80103fc:	687b      	ldr	r3, [r7, #4]
 80103fe:	689b      	ldr	r3, [r3, #8]
 8010400:	2b00      	cmp	r3, #0
 8010402:	d012      	beq.n	801042a <osMessageQueueNew+0x82>
 8010404:	687b      	ldr	r3, [r7, #4]
 8010406:	68db      	ldr	r3, [r3, #12]
 8010408:	2b4f      	cmp	r3, #79	; 0x4f
 801040a:	d90e      	bls.n	801042a <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 801040c:	687b      	ldr	r3, [r7, #4]
 801040e:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8010410:	2b00      	cmp	r3, #0
 8010412:	d00a      	beq.n	801042a <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8010414:	687b      	ldr	r3, [r7, #4]
 8010416:	695a      	ldr	r2, [r3, #20]
 8010418:	68fb      	ldr	r3, [r7, #12]
 801041a:	68b9      	ldr	r1, [r7, #8]
 801041c:	fb01 f303 	mul.w	r3, r1, r3
 8010420:	429a      	cmp	r2, r3
 8010422:	d302      	bcc.n	801042a <osMessageQueueNew+0x82>
        mem = 1;
 8010424:	2301      	movs	r3, #1
 8010426:	623b      	str	r3, [r7, #32]
 8010428:	e014      	b.n	8010454 <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 801042a:	687b      	ldr	r3, [r7, #4]
 801042c:	689b      	ldr	r3, [r3, #8]
 801042e:	2b00      	cmp	r3, #0
 8010430:	d110      	bne.n	8010454 <osMessageQueueNew+0xac>
 8010432:	687b      	ldr	r3, [r7, #4]
 8010434:	68db      	ldr	r3, [r3, #12]
 8010436:	2b00      	cmp	r3, #0
 8010438:	d10c      	bne.n	8010454 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 801043a:	687b      	ldr	r3, [r7, #4]
 801043c:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 801043e:	2b00      	cmp	r3, #0
 8010440:	d108      	bne.n	8010454 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8010442:	687b      	ldr	r3, [r7, #4]
 8010444:	695b      	ldr	r3, [r3, #20]
 8010446:	2b00      	cmp	r3, #0
 8010448:	d104      	bne.n	8010454 <osMessageQueueNew+0xac>
          mem = 0;
 801044a:	2300      	movs	r3, #0
 801044c:	623b      	str	r3, [r7, #32]
 801044e:	e001      	b.n	8010454 <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 8010450:	2300      	movs	r3, #0
 8010452:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8010454:	6a3b      	ldr	r3, [r7, #32]
 8010456:	2b01      	cmp	r3, #1
 8010458:	d10c      	bne.n	8010474 <osMessageQueueNew+0xcc>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 801045a:	687b      	ldr	r3, [r7, #4]
 801045c:	691a      	ldr	r2, [r3, #16]
 801045e:	687b      	ldr	r3, [r7, #4]
 8010460:	6899      	ldr	r1, [r3, #8]
 8010462:	2300      	movs	r3, #0
 8010464:	9300      	str	r3, [sp, #0]
 8010466:	460b      	mov	r3, r1
 8010468:	68b9      	ldr	r1, [r7, #8]
 801046a:	68f8      	ldr	r0, [r7, #12]
 801046c:	f000 fe74 	bl	8011158 <xQueueGenericCreateStatic>
 8010470:	6278      	str	r0, [r7, #36]	; 0x24
 8010472:	e008      	b.n	8010486 <osMessageQueueNew+0xde>
    }
    else {
      if (mem == 0) {
 8010474:	6a3b      	ldr	r3, [r7, #32]
 8010476:	2b00      	cmp	r3, #0
 8010478:	d105      	bne.n	8010486 <osMessageQueueNew+0xde>
        hQueue = xQueueCreate (msg_count, msg_size);
 801047a:	2200      	movs	r2, #0
 801047c:	68b9      	ldr	r1, [r7, #8]
 801047e:	68f8      	ldr	r0, [r7, #12]
 8010480:	f000 fedd 	bl	801123e <xQueueGenericCreate>
 8010484:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8010486:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010488:	2b00      	cmp	r3, #0
 801048a:	d00c      	beq.n	80104a6 <osMessageQueueNew+0xfe>
      if (attr != NULL) {
 801048c:	687b      	ldr	r3, [r7, #4]
 801048e:	2b00      	cmp	r3, #0
 8010490:	d003      	beq.n	801049a <osMessageQueueNew+0xf2>
        name = attr->name;
 8010492:	687b      	ldr	r3, [r7, #4]
 8010494:	681b      	ldr	r3, [r3, #0]
 8010496:	61fb      	str	r3, [r7, #28]
 8010498:	e001      	b.n	801049e <osMessageQueueNew+0xf6>
      } else {
        name = NULL;
 801049a:	2300      	movs	r3, #0
 801049c:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 801049e:	69f9      	ldr	r1, [r7, #28]
 80104a0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80104a2:	f001 fe0d 	bl	80120c0 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 80104a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80104a8:	4618      	mov	r0, r3
 80104aa:	3728      	adds	r7, #40	; 0x28
 80104ac:	46bd      	mov	sp, r7
 80104ae:	bd80      	pop	{r7, pc}
 80104b0:	20001434 	.word	0x20001434

080104b4 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 80104b4:	b580      	push	{r7, lr}
 80104b6:	b08a      	sub	sp, #40	; 0x28
 80104b8:	af00      	add	r7, sp, #0
 80104ba:	60f8      	str	r0, [r7, #12]
 80104bc:	60b9      	str	r1, [r7, #8]
 80104be:	603b      	str	r3, [r7, #0]
 80104c0:	4613      	mov	r3, r2
 80104c2:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80104c4:	68fb      	ldr	r3, [r7, #12]
 80104c6:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80104c8:	2300      	movs	r3, #0
 80104ca:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80104cc:	f3ef 8305 	mrs	r3, IPSR
 80104d0:	61fb      	str	r3, [r7, #28]
  return(result);
 80104d2:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 80104d4:	2b00      	cmp	r3, #0
 80104d6:	d10f      	bne.n	80104f8 <osMessageQueuePut+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80104d8:	f3ef 8310 	mrs	r3, PRIMASK
 80104dc:	61bb      	str	r3, [r7, #24]
  return(result);
 80104de:	69bb      	ldr	r3, [r7, #24]
 80104e0:	2b00      	cmp	r3, #0
 80104e2:	d105      	bne.n	80104f0 <osMessageQueuePut+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80104e4:	f3ef 8311 	mrs	r3, BASEPRI
 80104e8:	617b      	str	r3, [r7, #20]
  return(result);
 80104ea:	697b      	ldr	r3, [r7, #20]
 80104ec:	2b00      	cmp	r3, #0
 80104ee:	d02c      	beq.n	801054a <osMessageQueuePut+0x96>
 80104f0:	4b28      	ldr	r3, [pc, #160]	; (8010594 <osMessageQueuePut+0xe0>)
 80104f2:	681b      	ldr	r3, [r3, #0]
 80104f4:	2b02      	cmp	r3, #2
 80104f6:	d128      	bne.n	801054a <osMessageQueuePut+0x96>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80104f8:	6a3b      	ldr	r3, [r7, #32]
 80104fa:	2b00      	cmp	r3, #0
 80104fc:	d005      	beq.n	801050a <osMessageQueuePut+0x56>
 80104fe:	68bb      	ldr	r3, [r7, #8]
 8010500:	2b00      	cmp	r3, #0
 8010502:	d002      	beq.n	801050a <osMessageQueuePut+0x56>
 8010504:	683b      	ldr	r3, [r7, #0]
 8010506:	2b00      	cmp	r3, #0
 8010508:	d003      	beq.n	8010512 <osMessageQueuePut+0x5e>
      stat = osErrorParameter;
 801050a:	f06f 0303 	mvn.w	r3, #3
 801050e:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8010510:	e039      	b.n	8010586 <osMessageQueuePut+0xd2>
    }
    else {
      yield = pdFALSE;
 8010512:	2300      	movs	r3, #0
 8010514:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8010516:	f107 0210 	add.w	r2, r7, #16
 801051a:	2300      	movs	r3, #0
 801051c:	68b9      	ldr	r1, [r7, #8]
 801051e:	6a38      	ldr	r0, [r7, #32]
 8010520:	f001 f904 	bl	801172c <xQueueGenericSendFromISR>
 8010524:	4603      	mov	r3, r0
 8010526:	2b01      	cmp	r3, #1
 8010528:	d003      	beq.n	8010532 <osMessageQueuePut+0x7e>
        stat = osErrorResource;
 801052a:	f06f 0302 	mvn.w	r3, #2
 801052e:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8010530:	e029      	b.n	8010586 <osMessageQueuePut+0xd2>
      } else {
        portYIELD_FROM_ISR (yield);
 8010532:	693b      	ldr	r3, [r7, #16]
 8010534:	2b00      	cmp	r3, #0
 8010536:	d026      	beq.n	8010586 <osMessageQueuePut+0xd2>
 8010538:	4b17      	ldr	r3, [pc, #92]	; (8010598 <osMessageQueuePut+0xe4>)
 801053a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801053e:	601a      	str	r2, [r3, #0]
 8010540:	f3bf 8f4f 	dsb	sy
 8010544:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8010548:	e01d      	b.n	8010586 <osMessageQueuePut+0xd2>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 801054a:	6a3b      	ldr	r3, [r7, #32]
 801054c:	2b00      	cmp	r3, #0
 801054e:	d002      	beq.n	8010556 <osMessageQueuePut+0xa2>
 8010550:	68bb      	ldr	r3, [r7, #8]
 8010552:	2b00      	cmp	r3, #0
 8010554:	d103      	bne.n	801055e <osMessageQueuePut+0xaa>
      stat = osErrorParameter;
 8010556:	f06f 0303 	mvn.w	r3, #3
 801055a:	627b      	str	r3, [r7, #36]	; 0x24
 801055c:	e014      	b.n	8010588 <osMessageQueuePut+0xd4>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 801055e:	2300      	movs	r3, #0
 8010560:	683a      	ldr	r2, [r7, #0]
 8010562:	68b9      	ldr	r1, [r7, #8]
 8010564:	6a38      	ldr	r0, [r7, #32]
 8010566:	f000 ffe7 	bl	8011538 <xQueueGenericSend>
 801056a:	4603      	mov	r3, r0
 801056c:	2b01      	cmp	r3, #1
 801056e:	d00b      	beq.n	8010588 <osMessageQueuePut+0xd4>
        if (timeout != 0U) {
 8010570:	683b      	ldr	r3, [r7, #0]
 8010572:	2b00      	cmp	r3, #0
 8010574:	d003      	beq.n	801057e <osMessageQueuePut+0xca>
          stat = osErrorTimeout;
 8010576:	f06f 0301 	mvn.w	r3, #1
 801057a:	627b      	str	r3, [r7, #36]	; 0x24
 801057c:	e004      	b.n	8010588 <osMessageQueuePut+0xd4>
        } else {
          stat = osErrorResource;
 801057e:	f06f 0302 	mvn.w	r3, #2
 8010582:	627b      	str	r3, [r7, #36]	; 0x24
 8010584:	e000      	b.n	8010588 <osMessageQueuePut+0xd4>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8010586:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 8010588:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 801058a:	4618      	mov	r0, r3
 801058c:	3728      	adds	r7, #40	; 0x28
 801058e:	46bd      	mov	sp, r7
 8010590:	bd80      	pop	{r7, pc}
 8010592:	bf00      	nop
 8010594:	20001434 	.word	0x20001434
 8010598:	e000ed04 	.word	0xe000ed04

0801059c <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 801059c:	b580      	push	{r7, lr}
 801059e:	b08a      	sub	sp, #40	; 0x28
 80105a0:	af00      	add	r7, sp, #0
 80105a2:	60f8      	str	r0, [r7, #12]
 80105a4:	60b9      	str	r1, [r7, #8]
 80105a6:	607a      	str	r2, [r7, #4]
 80105a8:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80105aa:	68fb      	ldr	r3, [r7, #12]
 80105ac:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80105ae:	2300      	movs	r3, #0
 80105b0:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80105b2:	f3ef 8305 	mrs	r3, IPSR
 80105b6:	61fb      	str	r3, [r7, #28]
  return(result);
 80105b8:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 80105ba:	2b00      	cmp	r3, #0
 80105bc:	d10f      	bne.n	80105de <osMessageQueueGet+0x42>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80105be:	f3ef 8310 	mrs	r3, PRIMASK
 80105c2:	61bb      	str	r3, [r7, #24]
  return(result);
 80105c4:	69bb      	ldr	r3, [r7, #24]
 80105c6:	2b00      	cmp	r3, #0
 80105c8:	d105      	bne.n	80105d6 <osMessageQueueGet+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80105ca:	f3ef 8311 	mrs	r3, BASEPRI
 80105ce:	617b      	str	r3, [r7, #20]
  return(result);
 80105d0:	697b      	ldr	r3, [r7, #20]
 80105d2:	2b00      	cmp	r3, #0
 80105d4:	d02c      	beq.n	8010630 <osMessageQueueGet+0x94>
 80105d6:	4b28      	ldr	r3, [pc, #160]	; (8010678 <osMessageQueueGet+0xdc>)
 80105d8:	681b      	ldr	r3, [r3, #0]
 80105da:	2b02      	cmp	r3, #2
 80105dc:	d128      	bne.n	8010630 <osMessageQueueGet+0x94>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80105de:	6a3b      	ldr	r3, [r7, #32]
 80105e0:	2b00      	cmp	r3, #0
 80105e2:	d005      	beq.n	80105f0 <osMessageQueueGet+0x54>
 80105e4:	68bb      	ldr	r3, [r7, #8]
 80105e6:	2b00      	cmp	r3, #0
 80105e8:	d002      	beq.n	80105f0 <osMessageQueueGet+0x54>
 80105ea:	683b      	ldr	r3, [r7, #0]
 80105ec:	2b00      	cmp	r3, #0
 80105ee:	d003      	beq.n	80105f8 <osMessageQueueGet+0x5c>
      stat = osErrorParameter;
 80105f0:	f06f 0303 	mvn.w	r3, #3
 80105f4:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80105f6:	e038      	b.n	801066a <osMessageQueueGet+0xce>
    }
    else {
      yield = pdFALSE;
 80105f8:	2300      	movs	r3, #0
 80105fa:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 80105fc:	f107 0310 	add.w	r3, r7, #16
 8010600:	461a      	mov	r2, r3
 8010602:	68b9      	ldr	r1, [r7, #8]
 8010604:	6a38      	ldr	r0, [r7, #32]
 8010606:	f001 fb93 	bl	8011d30 <xQueueReceiveFromISR>
 801060a:	4603      	mov	r3, r0
 801060c:	2b01      	cmp	r3, #1
 801060e:	d003      	beq.n	8010618 <osMessageQueueGet+0x7c>
        stat = osErrorResource;
 8010610:	f06f 0302 	mvn.w	r3, #2
 8010614:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8010616:	e028      	b.n	801066a <osMessageQueueGet+0xce>
      } else {
        portYIELD_FROM_ISR (yield);
 8010618:	693b      	ldr	r3, [r7, #16]
 801061a:	2b00      	cmp	r3, #0
 801061c:	d025      	beq.n	801066a <osMessageQueueGet+0xce>
 801061e:	4b17      	ldr	r3, [pc, #92]	; (801067c <osMessageQueueGet+0xe0>)
 8010620:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010624:	601a      	str	r2, [r3, #0]
 8010626:	f3bf 8f4f 	dsb	sy
 801062a:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 801062e:	e01c      	b.n	801066a <osMessageQueueGet+0xce>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8010630:	6a3b      	ldr	r3, [r7, #32]
 8010632:	2b00      	cmp	r3, #0
 8010634:	d002      	beq.n	801063c <osMessageQueueGet+0xa0>
 8010636:	68bb      	ldr	r3, [r7, #8]
 8010638:	2b00      	cmp	r3, #0
 801063a:	d103      	bne.n	8010644 <osMessageQueueGet+0xa8>
      stat = osErrorParameter;
 801063c:	f06f 0303 	mvn.w	r3, #3
 8010640:	627b      	str	r3, [r7, #36]	; 0x24
 8010642:	e013      	b.n	801066c <osMessageQueueGet+0xd0>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8010644:	683a      	ldr	r2, [r7, #0]
 8010646:	68b9      	ldr	r1, [r7, #8]
 8010648:	6a38      	ldr	r0, [r7, #32]
 801064a:	f001 f98d 	bl	8011968 <xQueueReceive>
 801064e:	4603      	mov	r3, r0
 8010650:	2b01      	cmp	r3, #1
 8010652:	d00b      	beq.n	801066c <osMessageQueueGet+0xd0>
        if (timeout != 0U) {
 8010654:	683b      	ldr	r3, [r7, #0]
 8010656:	2b00      	cmp	r3, #0
 8010658:	d003      	beq.n	8010662 <osMessageQueueGet+0xc6>
          stat = osErrorTimeout;
 801065a:	f06f 0301 	mvn.w	r3, #1
 801065e:	627b      	str	r3, [r7, #36]	; 0x24
 8010660:	e004      	b.n	801066c <osMessageQueueGet+0xd0>
        } else {
          stat = osErrorResource;
 8010662:	f06f 0302 	mvn.w	r3, #2
 8010666:	627b      	str	r3, [r7, #36]	; 0x24
 8010668:	e000      	b.n	801066c <osMessageQueueGet+0xd0>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 801066a:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 801066c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 801066e:	4618      	mov	r0, r3
 8010670:	3728      	adds	r7, #40	; 0x28
 8010672:	46bd      	mov	sp, r7
 8010674:	bd80      	pop	{r7, pc}
 8010676:	bf00      	nop
 8010678:	20001434 	.word	0x20001434
 801067c:	e000ed04 	.word	0xe000ed04

08010680 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8010680:	b480      	push	{r7}
 8010682:	b085      	sub	sp, #20
 8010684:	af00      	add	r7, sp, #0
 8010686:	60f8      	str	r0, [r7, #12]
 8010688:	60b9      	str	r1, [r7, #8]
 801068a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 801068c:	68fb      	ldr	r3, [r7, #12]
 801068e:	4a07      	ldr	r2, [pc, #28]	; (80106ac <vApplicationGetIdleTaskMemory+0x2c>)
 8010690:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8010692:	68bb      	ldr	r3, [r7, #8]
 8010694:	4a06      	ldr	r2, [pc, #24]	; (80106b0 <vApplicationGetIdleTaskMemory+0x30>)
 8010696:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8010698:	687b      	ldr	r3, [r7, #4]
 801069a:	2280      	movs	r2, #128	; 0x80
 801069c:	601a      	str	r2, [r3, #0]
}
 801069e:	bf00      	nop
 80106a0:	3714      	adds	r7, #20
 80106a2:	46bd      	mov	sp, r7
 80106a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106a8:	4770      	bx	lr
 80106aa:	bf00      	nop
 80106ac:	20001438 	.word	0x20001438
 80106b0:	20001494 	.word	0x20001494

080106b4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80106b4:	b480      	push	{r7}
 80106b6:	b085      	sub	sp, #20
 80106b8:	af00      	add	r7, sp, #0
 80106ba:	60f8      	str	r0, [r7, #12]
 80106bc:	60b9      	str	r1, [r7, #8]
 80106be:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80106c0:	68fb      	ldr	r3, [r7, #12]
 80106c2:	4a07      	ldr	r2, [pc, #28]	; (80106e0 <vApplicationGetTimerTaskMemory+0x2c>)
 80106c4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80106c6:	68bb      	ldr	r3, [r7, #8]
 80106c8:	4a06      	ldr	r2, [pc, #24]	; (80106e4 <vApplicationGetTimerTaskMemory+0x30>)
 80106ca:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80106cc:	687b      	ldr	r3, [r7, #4]
 80106ce:	f44f 7280 	mov.w	r2, #256	; 0x100
 80106d2:	601a      	str	r2, [r3, #0]
}
 80106d4:	bf00      	nop
 80106d6:	3714      	adds	r7, #20
 80106d8:	46bd      	mov	sp, r7
 80106da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106de:	4770      	bx	lr
 80106e0:	20001694 	.word	0x20001694
 80106e4:	200016f0 	.word	0x200016f0

080106e8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80106e8:	b480      	push	{r7}
 80106ea:	b085      	sub	sp, #20
 80106ec:	af00      	add	r7, sp, #0
 80106ee:	60f8      	str	r0, [r7, #12]
 80106f0:	60b9      	str	r1, [r7, #8]
 80106f2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80106f4:	68fb      	ldr	r3, [r7, #12]
 80106f6:	3b04      	subs	r3, #4
 80106f8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80106fa:	68fb      	ldr	r3, [r7, #12]
 80106fc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8010700:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8010702:	68fb      	ldr	r3, [r7, #12]
 8010704:	3b04      	subs	r3, #4
 8010706:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8010708:	68bb      	ldr	r3, [r7, #8]
 801070a:	f023 0201 	bic.w	r2, r3, #1
 801070e:	68fb      	ldr	r3, [r7, #12]
 8010710:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8010712:	68fb      	ldr	r3, [r7, #12]
 8010714:	3b04      	subs	r3, #4
 8010716:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8010718:	4a0c      	ldr	r2, [pc, #48]	; (801074c <pxPortInitialiseStack+0x64>)
 801071a:	68fb      	ldr	r3, [r7, #12]
 801071c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 801071e:	68fb      	ldr	r3, [r7, #12]
 8010720:	3b14      	subs	r3, #20
 8010722:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8010724:	687a      	ldr	r2, [r7, #4]
 8010726:	68fb      	ldr	r3, [r7, #12]
 8010728:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 801072a:	68fb      	ldr	r3, [r7, #12]
 801072c:	3b04      	subs	r3, #4
 801072e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8010730:	68fb      	ldr	r3, [r7, #12]
 8010732:	f06f 0202 	mvn.w	r2, #2
 8010736:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8010738:	68fb      	ldr	r3, [r7, #12]
 801073a:	3b20      	subs	r3, #32
 801073c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 801073e:	68fb      	ldr	r3, [r7, #12]
}
 8010740:	4618      	mov	r0, r3
 8010742:	3714      	adds	r7, #20
 8010744:	46bd      	mov	sp, r7
 8010746:	f85d 7b04 	ldr.w	r7, [sp], #4
 801074a:	4770      	bx	lr
 801074c:	08010751 	.word	0x08010751

08010750 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8010750:	b480      	push	{r7}
 8010752:	b085      	sub	sp, #20
 8010754:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8010756:	2300      	movs	r3, #0
 8010758:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 801075a:	4b11      	ldr	r3, [pc, #68]	; (80107a0 <prvTaskExitError+0x50>)
 801075c:	681b      	ldr	r3, [r3, #0]
 801075e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8010762:	d009      	beq.n	8010778 <prvTaskExitError+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8010764:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010768:	f383 8811 	msr	BASEPRI, r3
 801076c:	f3bf 8f6f 	isb	sy
 8010770:	f3bf 8f4f 	dsb	sy
 8010774:	60fb      	str	r3, [r7, #12]
 8010776:	e7fe      	b.n	8010776 <prvTaskExitError+0x26>
 8010778:	f04f 0350 	mov.w	r3, #80	; 0x50
 801077c:	f383 8811 	msr	BASEPRI, r3
 8010780:	f3bf 8f6f 	isb	sy
 8010784:	f3bf 8f4f 	dsb	sy
 8010788:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 801078a:	bf00      	nop
 801078c:	687b      	ldr	r3, [r7, #4]
 801078e:	2b00      	cmp	r3, #0
 8010790:	d0fc      	beq.n	801078c <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8010792:	bf00      	nop
 8010794:	3714      	adds	r7, #20
 8010796:	46bd      	mov	sp, r7
 8010798:	f85d 7b04 	ldr.w	r7, [sp], #4
 801079c:	4770      	bx	lr
 801079e:	bf00      	nop
 80107a0:	20000020 	.word	0x20000020
	...

080107b0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80107b0:	4b07      	ldr	r3, [pc, #28]	; (80107d0 <pxCurrentTCBConst2>)
 80107b2:	6819      	ldr	r1, [r3, #0]
 80107b4:	6808      	ldr	r0, [r1, #0]
 80107b6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80107ba:	f380 8809 	msr	PSP, r0
 80107be:	f3bf 8f6f 	isb	sy
 80107c2:	f04f 0000 	mov.w	r0, #0
 80107c6:	f380 8811 	msr	BASEPRI, r0
 80107ca:	4770      	bx	lr
 80107cc:	f3af 8000 	nop.w

080107d0 <pxCurrentTCBConst2>:
 80107d0:	2002da30 	.word	0x2002da30
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80107d4:	bf00      	nop
 80107d6:	bf00      	nop

080107d8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80107d8:	4808      	ldr	r0, [pc, #32]	; (80107fc <prvPortStartFirstTask+0x24>)
 80107da:	6800      	ldr	r0, [r0, #0]
 80107dc:	6800      	ldr	r0, [r0, #0]
 80107de:	f380 8808 	msr	MSP, r0
 80107e2:	f04f 0000 	mov.w	r0, #0
 80107e6:	f380 8814 	msr	CONTROL, r0
 80107ea:	b662      	cpsie	i
 80107ec:	b661      	cpsie	f
 80107ee:	f3bf 8f4f 	dsb	sy
 80107f2:	f3bf 8f6f 	isb	sy
 80107f6:	df00      	svc	0
 80107f8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80107fa:	bf00      	nop
 80107fc:	e000ed08 	.word	0xe000ed08

08010800 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8010800:	b580      	push	{r7, lr}
 8010802:	b086      	sub	sp, #24
 8010804:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8010806:	4b44      	ldr	r3, [pc, #272]	; (8010918 <xPortStartScheduler+0x118>)
 8010808:	681b      	ldr	r3, [r3, #0]
 801080a:	4a44      	ldr	r2, [pc, #272]	; (801091c <xPortStartScheduler+0x11c>)
 801080c:	4293      	cmp	r3, r2
 801080e:	d109      	bne.n	8010824 <xPortStartScheduler+0x24>
 8010810:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010814:	f383 8811 	msr	BASEPRI, r3
 8010818:	f3bf 8f6f 	isb	sy
 801081c:	f3bf 8f4f 	dsb	sy
 8010820:	613b      	str	r3, [r7, #16]
 8010822:	e7fe      	b.n	8010822 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8010824:	4b3c      	ldr	r3, [pc, #240]	; (8010918 <xPortStartScheduler+0x118>)
 8010826:	681b      	ldr	r3, [r3, #0]
 8010828:	4a3d      	ldr	r2, [pc, #244]	; (8010920 <xPortStartScheduler+0x120>)
 801082a:	4293      	cmp	r3, r2
 801082c:	d109      	bne.n	8010842 <xPortStartScheduler+0x42>
 801082e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010832:	f383 8811 	msr	BASEPRI, r3
 8010836:	f3bf 8f6f 	isb	sy
 801083a:	f3bf 8f4f 	dsb	sy
 801083e:	60fb      	str	r3, [r7, #12]
 8010840:	e7fe      	b.n	8010840 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8010842:	4b38      	ldr	r3, [pc, #224]	; (8010924 <xPortStartScheduler+0x124>)
 8010844:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8010846:	697b      	ldr	r3, [r7, #20]
 8010848:	781b      	ldrb	r3, [r3, #0]
 801084a:	b2db      	uxtb	r3, r3
 801084c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 801084e:	697b      	ldr	r3, [r7, #20]
 8010850:	22ff      	movs	r2, #255	; 0xff
 8010852:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8010854:	697b      	ldr	r3, [r7, #20]
 8010856:	781b      	ldrb	r3, [r3, #0]
 8010858:	b2db      	uxtb	r3, r3
 801085a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 801085c:	78fb      	ldrb	r3, [r7, #3]
 801085e:	b2db      	uxtb	r3, r3
 8010860:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8010864:	b2da      	uxtb	r2, r3
 8010866:	4b30      	ldr	r3, [pc, #192]	; (8010928 <xPortStartScheduler+0x128>)
 8010868:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 801086a:	4b30      	ldr	r3, [pc, #192]	; (801092c <xPortStartScheduler+0x12c>)
 801086c:	2207      	movs	r2, #7
 801086e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8010870:	e009      	b.n	8010886 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8010872:	4b2e      	ldr	r3, [pc, #184]	; (801092c <xPortStartScheduler+0x12c>)
 8010874:	681b      	ldr	r3, [r3, #0]
 8010876:	3b01      	subs	r3, #1
 8010878:	4a2c      	ldr	r2, [pc, #176]	; (801092c <xPortStartScheduler+0x12c>)
 801087a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 801087c:	78fb      	ldrb	r3, [r7, #3]
 801087e:	b2db      	uxtb	r3, r3
 8010880:	005b      	lsls	r3, r3, #1
 8010882:	b2db      	uxtb	r3, r3
 8010884:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8010886:	78fb      	ldrb	r3, [r7, #3]
 8010888:	b2db      	uxtb	r3, r3
 801088a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801088e:	2b80      	cmp	r3, #128	; 0x80
 8010890:	d0ef      	beq.n	8010872 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8010892:	4b26      	ldr	r3, [pc, #152]	; (801092c <xPortStartScheduler+0x12c>)
 8010894:	681b      	ldr	r3, [r3, #0]
 8010896:	f1c3 0307 	rsb	r3, r3, #7
 801089a:	2b04      	cmp	r3, #4
 801089c:	d009      	beq.n	80108b2 <xPortStartScheduler+0xb2>
 801089e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80108a2:	f383 8811 	msr	BASEPRI, r3
 80108a6:	f3bf 8f6f 	isb	sy
 80108aa:	f3bf 8f4f 	dsb	sy
 80108ae:	60bb      	str	r3, [r7, #8]
 80108b0:	e7fe      	b.n	80108b0 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80108b2:	4b1e      	ldr	r3, [pc, #120]	; (801092c <xPortStartScheduler+0x12c>)
 80108b4:	681b      	ldr	r3, [r3, #0]
 80108b6:	021b      	lsls	r3, r3, #8
 80108b8:	4a1c      	ldr	r2, [pc, #112]	; (801092c <xPortStartScheduler+0x12c>)
 80108ba:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80108bc:	4b1b      	ldr	r3, [pc, #108]	; (801092c <xPortStartScheduler+0x12c>)
 80108be:	681b      	ldr	r3, [r3, #0]
 80108c0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80108c4:	4a19      	ldr	r2, [pc, #100]	; (801092c <xPortStartScheduler+0x12c>)
 80108c6:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80108c8:	687b      	ldr	r3, [r7, #4]
 80108ca:	b2da      	uxtb	r2, r3
 80108cc:	697b      	ldr	r3, [r7, #20]
 80108ce:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80108d0:	4b17      	ldr	r3, [pc, #92]	; (8010930 <xPortStartScheduler+0x130>)
 80108d2:	681b      	ldr	r3, [r3, #0]
 80108d4:	4a16      	ldr	r2, [pc, #88]	; (8010930 <xPortStartScheduler+0x130>)
 80108d6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80108da:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80108dc:	4b14      	ldr	r3, [pc, #80]	; (8010930 <xPortStartScheduler+0x130>)
 80108de:	681b      	ldr	r3, [r3, #0]
 80108e0:	4a13      	ldr	r2, [pc, #76]	; (8010930 <xPortStartScheduler+0x130>)
 80108e2:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80108e6:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80108e8:	f000 f8d6 	bl	8010a98 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80108ec:	4b11      	ldr	r3, [pc, #68]	; (8010934 <xPortStartScheduler+0x134>)
 80108ee:	2200      	movs	r2, #0
 80108f0:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80108f2:	f000 f8f5 	bl	8010ae0 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80108f6:	4b10      	ldr	r3, [pc, #64]	; (8010938 <xPortStartScheduler+0x138>)
 80108f8:	681b      	ldr	r3, [r3, #0]
 80108fa:	4a0f      	ldr	r2, [pc, #60]	; (8010938 <xPortStartScheduler+0x138>)
 80108fc:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8010900:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8010902:	f7ff ff69 	bl	80107d8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8010906:	f002 f841 	bl	801298c <vTaskSwitchContext>
	prvTaskExitError();
 801090a:	f7ff ff21 	bl	8010750 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 801090e:	2300      	movs	r3, #0
}
 8010910:	4618      	mov	r0, r3
 8010912:	3718      	adds	r7, #24
 8010914:	46bd      	mov	sp, r7
 8010916:	bd80      	pop	{r7, pc}
 8010918:	e000ed00 	.word	0xe000ed00
 801091c:	410fc271 	.word	0x410fc271
 8010920:	410fc270 	.word	0x410fc270
 8010924:	e000e400 	.word	0xe000e400
 8010928:	20001af0 	.word	0x20001af0
 801092c:	20001af4 	.word	0x20001af4
 8010930:	e000ed20 	.word	0xe000ed20
 8010934:	20000020 	.word	0x20000020
 8010938:	e000ef34 	.word	0xe000ef34

0801093c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 801093c:	b480      	push	{r7}
 801093e:	b083      	sub	sp, #12
 8010940:	af00      	add	r7, sp, #0
 8010942:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010946:	f383 8811 	msr	BASEPRI, r3
 801094a:	f3bf 8f6f 	isb	sy
 801094e:	f3bf 8f4f 	dsb	sy
 8010952:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8010954:	4b0e      	ldr	r3, [pc, #56]	; (8010990 <vPortEnterCritical+0x54>)
 8010956:	681b      	ldr	r3, [r3, #0]
 8010958:	3301      	adds	r3, #1
 801095a:	4a0d      	ldr	r2, [pc, #52]	; (8010990 <vPortEnterCritical+0x54>)
 801095c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 801095e:	4b0c      	ldr	r3, [pc, #48]	; (8010990 <vPortEnterCritical+0x54>)
 8010960:	681b      	ldr	r3, [r3, #0]
 8010962:	2b01      	cmp	r3, #1
 8010964:	d10e      	bne.n	8010984 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8010966:	4b0b      	ldr	r3, [pc, #44]	; (8010994 <vPortEnterCritical+0x58>)
 8010968:	681b      	ldr	r3, [r3, #0]
 801096a:	b2db      	uxtb	r3, r3
 801096c:	2b00      	cmp	r3, #0
 801096e:	d009      	beq.n	8010984 <vPortEnterCritical+0x48>
 8010970:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010974:	f383 8811 	msr	BASEPRI, r3
 8010978:	f3bf 8f6f 	isb	sy
 801097c:	f3bf 8f4f 	dsb	sy
 8010980:	603b      	str	r3, [r7, #0]
 8010982:	e7fe      	b.n	8010982 <vPortEnterCritical+0x46>
	}
}
 8010984:	bf00      	nop
 8010986:	370c      	adds	r7, #12
 8010988:	46bd      	mov	sp, r7
 801098a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801098e:	4770      	bx	lr
 8010990:	20000020 	.word	0x20000020
 8010994:	e000ed04 	.word	0xe000ed04

08010998 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8010998:	b480      	push	{r7}
 801099a:	b083      	sub	sp, #12
 801099c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 801099e:	4b11      	ldr	r3, [pc, #68]	; (80109e4 <vPortExitCritical+0x4c>)
 80109a0:	681b      	ldr	r3, [r3, #0]
 80109a2:	2b00      	cmp	r3, #0
 80109a4:	d109      	bne.n	80109ba <vPortExitCritical+0x22>
 80109a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80109aa:	f383 8811 	msr	BASEPRI, r3
 80109ae:	f3bf 8f6f 	isb	sy
 80109b2:	f3bf 8f4f 	dsb	sy
 80109b6:	607b      	str	r3, [r7, #4]
 80109b8:	e7fe      	b.n	80109b8 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 80109ba:	4b0a      	ldr	r3, [pc, #40]	; (80109e4 <vPortExitCritical+0x4c>)
 80109bc:	681b      	ldr	r3, [r3, #0]
 80109be:	3b01      	subs	r3, #1
 80109c0:	4a08      	ldr	r2, [pc, #32]	; (80109e4 <vPortExitCritical+0x4c>)
 80109c2:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80109c4:	4b07      	ldr	r3, [pc, #28]	; (80109e4 <vPortExitCritical+0x4c>)
 80109c6:	681b      	ldr	r3, [r3, #0]
 80109c8:	2b00      	cmp	r3, #0
 80109ca:	d104      	bne.n	80109d6 <vPortExitCritical+0x3e>
 80109cc:	2300      	movs	r3, #0
 80109ce:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80109d0:	683b      	ldr	r3, [r7, #0]
 80109d2:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 80109d6:	bf00      	nop
 80109d8:	370c      	adds	r7, #12
 80109da:	46bd      	mov	sp, r7
 80109dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109e0:	4770      	bx	lr
 80109e2:	bf00      	nop
 80109e4:	20000020 	.word	0x20000020
	...

080109f0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80109f0:	f3ef 8009 	mrs	r0, PSP
 80109f4:	f3bf 8f6f 	isb	sy
 80109f8:	4b15      	ldr	r3, [pc, #84]	; (8010a50 <pxCurrentTCBConst>)
 80109fa:	681a      	ldr	r2, [r3, #0]
 80109fc:	f01e 0f10 	tst.w	lr, #16
 8010a00:	bf08      	it	eq
 8010a02:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8010a06:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010a0a:	6010      	str	r0, [r2, #0]
 8010a0c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8010a10:	f04f 0050 	mov.w	r0, #80	; 0x50
 8010a14:	f380 8811 	msr	BASEPRI, r0
 8010a18:	f3bf 8f4f 	dsb	sy
 8010a1c:	f3bf 8f6f 	isb	sy
 8010a20:	f001 ffb4 	bl	801298c <vTaskSwitchContext>
 8010a24:	f04f 0000 	mov.w	r0, #0
 8010a28:	f380 8811 	msr	BASEPRI, r0
 8010a2c:	bc09      	pop	{r0, r3}
 8010a2e:	6819      	ldr	r1, [r3, #0]
 8010a30:	6808      	ldr	r0, [r1, #0]
 8010a32:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010a36:	f01e 0f10 	tst.w	lr, #16
 8010a3a:	bf08      	it	eq
 8010a3c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8010a40:	f380 8809 	msr	PSP, r0
 8010a44:	f3bf 8f6f 	isb	sy
 8010a48:	4770      	bx	lr
 8010a4a:	bf00      	nop
 8010a4c:	f3af 8000 	nop.w

08010a50 <pxCurrentTCBConst>:
 8010a50:	2002da30 	.word	0x2002da30
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8010a54:	bf00      	nop
 8010a56:	bf00      	nop

08010a58 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8010a58:	b580      	push	{r7, lr}
 8010a5a:	b082      	sub	sp, #8
 8010a5c:	af00      	add	r7, sp, #0
	__asm volatile
 8010a5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010a62:	f383 8811 	msr	BASEPRI, r3
 8010a66:	f3bf 8f6f 	isb	sy
 8010a6a:	f3bf 8f4f 	dsb	sy
 8010a6e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8010a70:	f001 fed4 	bl	801281c <xTaskIncrementTick>
 8010a74:	4603      	mov	r3, r0
 8010a76:	2b00      	cmp	r3, #0
 8010a78:	d003      	beq.n	8010a82 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8010a7a:	4b06      	ldr	r3, [pc, #24]	; (8010a94 <SysTick_Handler+0x3c>)
 8010a7c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010a80:	601a      	str	r2, [r3, #0]
 8010a82:	2300      	movs	r3, #0
 8010a84:	603b      	str	r3, [r7, #0]
	__asm volatile
 8010a86:	683b      	ldr	r3, [r7, #0]
 8010a88:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8010a8c:	bf00      	nop
 8010a8e:	3708      	adds	r7, #8
 8010a90:	46bd      	mov	sp, r7
 8010a92:	bd80      	pop	{r7, pc}
 8010a94:	e000ed04 	.word	0xe000ed04

08010a98 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8010a98:	b480      	push	{r7}
 8010a9a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8010a9c:	4b0b      	ldr	r3, [pc, #44]	; (8010acc <vPortSetupTimerInterrupt+0x34>)
 8010a9e:	2200      	movs	r2, #0
 8010aa0:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8010aa2:	4b0b      	ldr	r3, [pc, #44]	; (8010ad0 <vPortSetupTimerInterrupt+0x38>)
 8010aa4:	2200      	movs	r2, #0
 8010aa6:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8010aa8:	4b0a      	ldr	r3, [pc, #40]	; (8010ad4 <vPortSetupTimerInterrupt+0x3c>)
 8010aaa:	681b      	ldr	r3, [r3, #0]
 8010aac:	4a0a      	ldr	r2, [pc, #40]	; (8010ad8 <vPortSetupTimerInterrupt+0x40>)
 8010aae:	fba2 2303 	umull	r2, r3, r2, r3
 8010ab2:	099b      	lsrs	r3, r3, #6
 8010ab4:	4a09      	ldr	r2, [pc, #36]	; (8010adc <vPortSetupTimerInterrupt+0x44>)
 8010ab6:	3b01      	subs	r3, #1
 8010ab8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8010aba:	4b04      	ldr	r3, [pc, #16]	; (8010acc <vPortSetupTimerInterrupt+0x34>)
 8010abc:	2207      	movs	r2, #7
 8010abe:	601a      	str	r2, [r3, #0]
}
 8010ac0:	bf00      	nop
 8010ac2:	46bd      	mov	sp, r7
 8010ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ac8:	4770      	bx	lr
 8010aca:	bf00      	nop
 8010acc:	e000e010 	.word	0xe000e010
 8010ad0:	e000e018 	.word	0xe000e018
 8010ad4:	20000014 	.word	0x20000014
 8010ad8:	10624dd3 	.word	0x10624dd3
 8010adc:	e000e014 	.word	0xe000e014

08010ae0 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8010ae0:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8010af0 <vPortEnableVFP+0x10>
 8010ae4:	6801      	ldr	r1, [r0, #0]
 8010ae6:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8010aea:	6001      	str	r1, [r0, #0]
 8010aec:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8010aee:	bf00      	nop
 8010af0:	e000ed88 	.word	0xe000ed88

08010af4 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8010af4:	b480      	push	{r7}
 8010af6:	b085      	sub	sp, #20
 8010af8:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8010afa:	f3ef 8305 	mrs	r3, IPSR
 8010afe:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8010b00:	68fb      	ldr	r3, [r7, #12]
 8010b02:	2b0f      	cmp	r3, #15
 8010b04:	d913      	bls.n	8010b2e <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8010b06:	4a16      	ldr	r2, [pc, #88]	; (8010b60 <vPortValidateInterruptPriority+0x6c>)
 8010b08:	68fb      	ldr	r3, [r7, #12]
 8010b0a:	4413      	add	r3, r2
 8010b0c:	781b      	ldrb	r3, [r3, #0]
 8010b0e:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8010b10:	4b14      	ldr	r3, [pc, #80]	; (8010b64 <vPortValidateInterruptPriority+0x70>)
 8010b12:	781b      	ldrb	r3, [r3, #0]
 8010b14:	7afa      	ldrb	r2, [r7, #11]
 8010b16:	429a      	cmp	r2, r3
 8010b18:	d209      	bcs.n	8010b2e <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 8010b1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010b1e:	f383 8811 	msr	BASEPRI, r3
 8010b22:	f3bf 8f6f 	isb	sy
 8010b26:	f3bf 8f4f 	dsb	sy
 8010b2a:	607b      	str	r3, [r7, #4]
 8010b2c:	e7fe      	b.n	8010b2c <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8010b2e:	4b0e      	ldr	r3, [pc, #56]	; (8010b68 <vPortValidateInterruptPriority+0x74>)
 8010b30:	681b      	ldr	r3, [r3, #0]
 8010b32:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8010b36:	4b0d      	ldr	r3, [pc, #52]	; (8010b6c <vPortValidateInterruptPriority+0x78>)
 8010b38:	681b      	ldr	r3, [r3, #0]
 8010b3a:	429a      	cmp	r2, r3
 8010b3c:	d909      	bls.n	8010b52 <vPortValidateInterruptPriority+0x5e>
 8010b3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010b42:	f383 8811 	msr	BASEPRI, r3
 8010b46:	f3bf 8f6f 	isb	sy
 8010b4a:	f3bf 8f4f 	dsb	sy
 8010b4e:	603b      	str	r3, [r7, #0]
 8010b50:	e7fe      	b.n	8010b50 <vPortValidateInterruptPriority+0x5c>
	}
 8010b52:	bf00      	nop
 8010b54:	3714      	adds	r7, #20
 8010b56:	46bd      	mov	sp, r7
 8010b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b5c:	4770      	bx	lr
 8010b5e:	bf00      	nop
 8010b60:	e000e3f0 	.word	0xe000e3f0
 8010b64:	20001af0 	.word	0x20001af0
 8010b68:	e000ed0c 	.word	0xe000ed0c
 8010b6c:	20001af4 	.word	0x20001af4

08010b70 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8010b70:	b580      	push	{r7, lr}
 8010b72:	b08a      	sub	sp, #40	; 0x28
 8010b74:	af00      	add	r7, sp, #0
 8010b76:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8010b78:	2300      	movs	r3, #0
 8010b7a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8010b7c:	f001 fd5c 	bl	8012638 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8010b80:	4b57      	ldr	r3, [pc, #348]	; (8010ce0 <pvPortMalloc+0x170>)
 8010b82:	681b      	ldr	r3, [r3, #0]
 8010b84:	2b00      	cmp	r3, #0
 8010b86:	d101      	bne.n	8010b8c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8010b88:	f000 f90c 	bl	8010da4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8010b8c:	4b55      	ldr	r3, [pc, #340]	; (8010ce4 <pvPortMalloc+0x174>)
 8010b8e:	681a      	ldr	r2, [r3, #0]
 8010b90:	687b      	ldr	r3, [r7, #4]
 8010b92:	4013      	ands	r3, r2
 8010b94:	2b00      	cmp	r3, #0
 8010b96:	f040 808c 	bne.w	8010cb2 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8010b9a:	687b      	ldr	r3, [r7, #4]
 8010b9c:	2b00      	cmp	r3, #0
 8010b9e:	d01c      	beq.n	8010bda <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8010ba0:	2208      	movs	r2, #8
 8010ba2:	687b      	ldr	r3, [r7, #4]
 8010ba4:	4413      	add	r3, r2
 8010ba6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8010ba8:	687b      	ldr	r3, [r7, #4]
 8010baa:	f003 0307 	and.w	r3, r3, #7
 8010bae:	2b00      	cmp	r3, #0
 8010bb0:	d013      	beq.n	8010bda <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8010bb2:	687b      	ldr	r3, [r7, #4]
 8010bb4:	f023 0307 	bic.w	r3, r3, #7
 8010bb8:	3308      	adds	r3, #8
 8010bba:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8010bbc:	687b      	ldr	r3, [r7, #4]
 8010bbe:	f003 0307 	and.w	r3, r3, #7
 8010bc2:	2b00      	cmp	r3, #0
 8010bc4:	d009      	beq.n	8010bda <pvPortMalloc+0x6a>
 8010bc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010bca:	f383 8811 	msr	BASEPRI, r3
 8010bce:	f3bf 8f6f 	isb	sy
 8010bd2:	f3bf 8f4f 	dsb	sy
 8010bd6:	617b      	str	r3, [r7, #20]
 8010bd8:	e7fe      	b.n	8010bd8 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8010bda:	687b      	ldr	r3, [r7, #4]
 8010bdc:	2b00      	cmp	r3, #0
 8010bde:	d068      	beq.n	8010cb2 <pvPortMalloc+0x142>
 8010be0:	4b41      	ldr	r3, [pc, #260]	; (8010ce8 <pvPortMalloc+0x178>)
 8010be2:	681b      	ldr	r3, [r3, #0]
 8010be4:	687a      	ldr	r2, [r7, #4]
 8010be6:	429a      	cmp	r2, r3
 8010be8:	d863      	bhi.n	8010cb2 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8010bea:	4b40      	ldr	r3, [pc, #256]	; (8010cec <pvPortMalloc+0x17c>)
 8010bec:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8010bee:	4b3f      	ldr	r3, [pc, #252]	; (8010cec <pvPortMalloc+0x17c>)
 8010bf0:	681b      	ldr	r3, [r3, #0]
 8010bf2:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8010bf4:	e004      	b.n	8010c00 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8010bf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010bf8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8010bfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010bfc:	681b      	ldr	r3, [r3, #0]
 8010bfe:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8010c00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010c02:	685b      	ldr	r3, [r3, #4]
 8010c04:	687a      	ldr	r2, [r7, #4]
 8010c06:	429a      	cmp	r2, r3
 8010c08:	d903      	bls.n	8010c12 <pvPortMalloc+0xa2>
 8010c0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010c0c:	681b      	ldr	r3, [r3, #0]
 8010c0e:	2b00      	cmp	r3, #0
 8010c10:	d1f1      	bne.n	8010bf6 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8010c12:	4b33      	ldr	r3, [pc, #204]	; (8010ce0 <pvPortMalloc+0x170>)
 8010c14:	681b      	ldr	r3, [r3, #0]
 8010c16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010c18:	429a      	cmp	r2, r3
 8010c1a:	d04a      	beq.n	8010cb2 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8010c1c:	6a3b      	ldr	r3, [r7, #32]
 8010c1e:	681b      	ldr	r3, [r3, #0]
 8010c20:	2208      	movs	r2, #8
 8010c22:	4413      	add	r3, r2
 8010c24:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8010c26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010c28:	681a      	ldr	r2, [r3, #0]
 8010c2a:	6a3b      	ldr	r3, [r7, #32]
 8010c2c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8010c2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010c30:	685a      	ldr	r2, [r3, #4]
 8010c32:	687b      	ldr	r3, [r7, #4]
 8010c34:	1ad2      	subs	r2, r2, r3
 8010c36:	2308      	movs	r3, #8
 8010c38:	005b      	lsls	r3, r3, #1
 8010c3a:	429a      	cmp	r2, r3
 8010c3c:	d91e      	bls.n	8010c7c <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8010c3e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010c40:	687b      	ldr	r3, [r7, #4]
 8010c42:	4413      	add	r3, r2
 8010c44:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8010c46:	69bb      	ldr	r3, [r7, #24]
 8010c48:	f003 0307 	and.w	r3, r3, #7
 8010c4c:	2b00      	cmp	r3, #0
 8010c4e:	d009      	beq.n	8010c64 <pvPortMalloc+0xf4>
 8010c50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010c54:	f383 8811 	msr	BASEPRI, r3
 8010c58:	f3bf 8f6f 	isb	sy
 8010c5c:	f3bf 8f4f 	dsb	sy
 8010c60:	613b      	str	r3, [r7, #16]
 8010c62:	e7fe      	b.n	8010c62 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8010c64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010c66:	685a      	ldr	r2, [r3, #4]
 8010c68:	687b      	ldr	r3, [r7, #4]
 8010c6a:	1ad2      	subs	r2, r2, r3
 8010c6c:	69bb      	ldr	r3, [r7, #24]
 8010c6e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8010c70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010c72:	687a      	ldr	r2, [r7, #4]
 8010c74:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8010c76:	69b8      	ldr	r0, [r7, #24]
 8010c78:	f000 f8f8 	bl	8010e6c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8010c7c:	4b1a      	ldr	r3, [pc, #104]	; (8010ce8 <pvPortMalloc+0x178>)
 8010c7e:	681a      	ldr	r2, [r3, #0]
 8010c80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010c82:	685b      	ldr	r3, [r3, #4]
 8010c84:	1ad3      	subs	r3, r2, r3
 8010c86:	4a18      	ldr	r2, [pc, #96]	; (8010ce8 <pvPortMalloc+0x178>)
 8010c88:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8010c8a:	4b17      	ldr	r3, [pc, #92]	; (8010ce8 <pvPortMalloc+0x178>)
 8010c8c:	681a      	ldr	r2, [r3, #0]
 8010c8e:	4b18      	ldr	r3, [pc, #96]	; (8010cf0 <pvPortMalloc+0x180>)
 8010c90:	681b      	ldr	r3, [r3, #0]
 8010c92:	429a      	cmp	r2, r3
 8010c94:	d203      	bcs.n	8010c9e <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8010c96:	4b14      	ldr	r3, [pc, #80]	; (8010ce8 <pvPortMalloc+0x178>)
 8010c98:	681b      	ldr	r3, [r3, #0]
 8010c9a:	4a15      	ldr	r2, [pc, #84]	; (8010cf0 <pvPortMalloc+0x180>)
 8010c9c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8010c9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010ca0:	685a      	ldr	r2, [r3, #4]
 8010ca2:	4b10      	ldr	r3, [pc, #64]	; (8010ce4 <pvPortMalloc+0x174>)
 8010ca4:	681b      	ldr	r3, [r3, #0]
 8010ca6:	431a      	orrs	r2, r3
 8010ca8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010caa:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8010cac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010cae:	2200      	movs	r2, #0
 8010cb0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8010cb2:	f001 fd07 	bl	80126c4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8010cb6:	69fb      	ldr	r3, [r7, #28]
 8010cb8:	f003 0307 	and.w	r3, r3, #7
 8010cbc:	2b00      	cmp	r3, #0
 8010cbe:	d009      	beq.n	8010cd4 <pvPortMalloc+0x164>
 8010cc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010cc4:	f383 8811 	msr	BASEPRI, r3
 8010cc8:	f3bf 8f6f 	isb	sy
 8010ccc:	f3bf 8f4f 	dsb	sy
 8010cd0:	60fb      	str	r3, [r7, #12]
 8010cd2:	e7fe      	b.n	8010cd2 <pvPortMalloc+0x162>
	return pvReturn;
 8010cd4:	69fb      	ldr	r3, [r7, #28]
}
 8010cd6:	4618      	mov	r0, r3
 8010cd8:	3728      	adds	r7, #40	; 0x28
 8010cda:	46bd      	mov	sp, r7
 8010cdc:	bd80      	pop	{r7, pc}
 8010cde:	bf00      	nop
 8010ce0:	2002da20 	.word	0x2002da20
 8010ce4:	2002da2c 	.word	0x2002da2c
 8010ce8:	2002da24 	.word	0x2002da24
 8010cec:	2002da18 	.word	0x2002da18
 8010cf0:	2002da28 	.word	0x2002da28

08010cf4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8010cf4:	b580      	push	{r7, lr}
 8010cf6:	b086      	sub	sp, #24
 8010cf8:	af00      	add	r7, sp, #0
 8010cfa:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8010cfc:	687b      	ldr	r3, [r7, #4]
 8010cfe:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8010d00:	687b      	ldr	r3, [r7, #4]
 8010d02:	2b00      	cmp	r3, #0
 8010d04:	d046      	beq.n	8010d94 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8010d06:	2308      	movs	r3, #8
 8010d08:	425b      	negs	r3, r3
 8010d0a:	697a      	ldr	r2, [r7, #20]
 8010d0c:	4413      	add	r3, r2
 8010d0e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8010d10:	697b      	ldr	r3, [r7, #20]
 8010d12:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8010d14:	693b      	ldr	r3, [r7, #16]
 8010d16:	685a      	ldr	r2, [r3, #4]
 8010d18:	4b20      	ldr	r3, [pc, #128]	; (8010d9c <vPortFree+0xa8>)
 8010d1a:	681b      	ldr	r3, [r3, #0]
 8010d1c:	4013      	ands	r3, r2
 8010d1e:	2b00      	cmp	r3, #0
 8010d20:	d109      	bne.n	8010d36 <vPortFree+0x42>
 8010d22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010d26:	f383 8811 	msr	BASEPRI, r3
 8010d2a:	f3bf 8f6f 	isb	sy
 8010d2e:	f3bf 8f4f 	dsb	sy
 8010d32:	60fb      	str	r3, [r7, #12]
 8010d34:	e7fe      	b.n	8010d34 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8010d36:	693b      	ldr	r3, [r7, #16]
 8010d38:	681b      	ldr	r3, [r3, #0]
 8010d3a:	2b00      	cmp	r3, #0
 8010d3c:	d009      	beq.n	8010d52 <vPortFree+0x5e>
 8010d3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010d42:	f383 8811 	msr	BASEPRI, r3
 8010d46:	f3bf 8f6f 	isb	sy
 8010d4a:	f3bf 8f4f 	dsb	sy
 8010d4e:	60bb      	str	r3, [r7, #8]
 8010d50:	e7fe      	b.n	8010d50 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8010d52:	693b      	ldr	r3, [r7, #16]
 8010d54:	685a      	ldr	r2, [r3, #4]
 8010d56:	4b11      	ldr	r3, [pc, #68]	; (8010d9c <vPortFree+0xa8>)
 8010d58:	681b      	ldr	r3, [r3, #0]
 8010d5a:	4013      	ands	r3, r2
 8010d5c:	2b00      	cmp	r3, #0
 8010d5e:	d019      	beq.n	8010d94 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8010d60:	693b      	ldr	r3, [r7, #16]
 8010d62:	681b      	ldr	r3, [r3, #0]
 8010d64:	2b00      	cmp	r3, #0
 8010d66:	d115      	bne.n	8010d94 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8010d68:	693b      	ldr	r3, [r7, #16]
 8010d6a:	685a      	ldr	r2, [r3, #4]
 8010d6c:	4b0b      	ldr	r3, [pc, #44]	; (8010d9c <vPortFree+0xa8>)
 8010d6e:	681b      	ldr	r3, [r3, #0]
 8010d70:	43db      	mvns	r3, r3
 8010d72:	401a      	ands	r2, r3
 8010d74:	693b      	ldr	r3, [r7, #16]
 8010d76:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8010d78:	f001 fc5e 	bl	8012638 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8010d7c:	693b      	ldr	r3, [r7, #16]
 8010d7e:	685a      	ldr	r2, [r3, #4]
 8010d80:	4b07      	ldr	r3, [pc, #28]	; (8010da0 <vPortFree+0xac>)
 8010d82:	681b      	ldr	r3, [r3, #0]
 8010d84:	4413      	add	r3, r2
 8010d86:	4a06      	ldr	r2, [pc, #24]	; (8010da0 <vPortFree+0xac>)
 8010d88:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8010d8a:	6938      	ldr	r0, [r7, #16]
 8010d8c:	f000 f86e 	bl	8010e6c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8010d90:	f001 fc98 	bl	80126c4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8010d94:	bf00      	nop
 8010d96:	3718      	adds	r7, #24
 8010d98:	46bd      	mov	sp, r7
 8010d9a:	bd80      	pop	{r7, pc}
 8010d9c:	2002da2c 	.word	0x2002da2c
 8010da0:	2002da24 	.word	0x2002da24

08010da4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8010da4:	b480      	push	{r7}
 8010da6:	b085      	sub	sp, #20
 8010da8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8010daa:	4b29      	ldr	r3, [pc, #164]	; (8010e50 <prvHeapInit+0xac>)
 8010dac:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8010dae:	4b29      	ldr	r3, [pc, #164]	; (8010e54 <prvHeapInit+0xb0>)
 8010db0:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8010db2:	68fb      	ldr	r3, [r7, #12]
 8010db4:	f003 0307 	and.w	r3, r3, #7
 8010db8:	2b00      	cmp	r3, #0
 8010dba:	d00c      	beq.n	8010dd6 <prvHeapInit+0x32>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8010dbc:	68fb      	ldr	r3, [r7, #12]
 8010dbe:	3307      	adds	r3, #7
 8010dc0:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8010dc2:	68fb      	ldr	r3, [r7, #12]
 8010dc4:	f023 0307 	bic.w	r3, r3, #7
 8010dc8:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8010dca:	68ba      	ldr	r2, [r7, #8]
 8010dcc:	68fb      	ldr	r3, [r7, #12]
 8010dce:	1ad3      	subs	r3, r2, r3
 8010dd0:	4a20      	ldr	r2, [pc, #128]	; (8010e54 <prvHeapInit+0xb0>)
 8010dd2:	4413      	add	r3, r2
 8010dd4:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8010dd6:	68fb      	ldr	r3, [r7, #12]
 8010dd8:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8010dda:	4a1f      	ldr	r2, [pc, #124]	; (8010e58 <prvHeapInit+0xb4>)
 8010ddc:	687b      	ldr	r3, [r7, #4]
 8010dde:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8010de0:	4b1d      	ldr	r3, [pc, #116]	; (8010e58 <prvHeapInit+0xb4>)
 8010de2:	2200      	movs	r2, #0
 8010de4:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8010de6:	687b      	ldr	r3, [r7, #4]
 8010de8:	68ba      	ldr	r2, [r7, #8]
 8010dea:	4413      	add	r3, r2
 8010dec:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8010dee:	2208      	movs	r2, #8
 8010df0:	68fb      	ldr	r3, [r7, #12]
 8010df2:	1a9b      	subs	r3, r3, r2
 8010df4:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8010df6:	68fb      	ldr	r3, [r7, #12]
 8010df8:	f023 0307 	bic.w	r3, r3, #7
 8010dfc:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8010dfe:	68fb      	ldr	r3, [r7, #12]
 8010e00:	4a16      	ldr	r2, [pc, #88]	; (8010e5c <prvHeapInit+0xb8>)
 8010e02:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8010e04:	4b15      	ldr	r3, [pc, #84]	; (8010e5c <prvHeapInit+0xb8>)
 8010e06:	681b      	ldr	r3, [r3, #0]
 8010e08:	2200      	movs	r2, #0
 8010e0a:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8010e0c:	4b13      	ldr	r3, [pc, #76]	; (8010e5c <prvHeapInit+0xb8>)
 8010e0e:	681b      	ldr	r3, [r3, #0]
 8010e10:	2200      	movs	r2, #0
 8010e12:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8010e14:	687b      	ldr	r3, [r7, #4]
 8010e16:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8010e18:	683b      	ldr	r3, [r7, #0]
 8010e1a:	68fa      	ldr	r2, [r7, #12]
 8010e1c:	1ad2      	subs	r2, r2, r3
 8010e1e:	683b      	ldr	r3, [r7, #0]
 8010e20:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8010e22:	4b0e      	ldr	r3, [pc, #56]	; (8010e5c <prvHeapInit+0xb8>)
 8010e24:	681a      	ldr	r2, [r3, #0]
 8010e26:	683b      	ldr	r3, [r7, #0]
 8010e28:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8010e2a:	683b      	ldr	r3, [r7, #0]
 8010e2c:	685b      	ldr	r3, [r3, #4]
 8010e2e:	4a0c      	ldr	r2, [pc, #48]	; (8010e60 <prvHeapInit+0xbc>)
 8010e30:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8010e32:	683b      	ldr	r3, [r7, #0]
 8010e34:	685b      	ldr	r3, [r3, #4]
 8010e36:	4a0b      	ldr	r2, [pc, #44]	; (8010e64 <prvHeapInit+0xc0>)
 8010e38:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8010e3a:	4b0b      	ldr	r3, [pc, #44]	; (8010e68 <prvHeapInit+0xc4>)
 8010e3c:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8010e40:	601a      	str	r2, [r3, #0]
}
 8010e42:	bf00      	nop
 8010e44:	3714      	adds	r7, #20
 8010e46:	46bd      	mov	sp, r7
 8010e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e4c:	4770      	bx	lr
 8010e4e:	bf00      	nop
 8010e50:	0002bf20 	.word	0x0002bf20
 8010e54:	20001af8 	.word	0x20001af8
 8010e58:	2002da18 	.word	0x2002da18
 8010e5c:	2002da20 	.word	0x2002da20
 8010e60:	2002da28 	.word	0x2002da28
 8010e64:	2002da24 	.word	0x2002da24
 8010e68:	2002da2c 	.word	0x2002da2c

08010e6c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8010e6c:	b480      	push	{r7}
 8010e6e:	b085      	sub	sp, #20
 8010e70:	af00      	add	r7, sp, #0
 8010e72:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8010e74:	4b28      	ldr	r3, [pc, #160]	; (8010f18 <prvInsertBlockIntoFreeList+0xac>)
 8010e76:	60fb      	str	r3, [r7, #12]
 8010e78:	e002      	b.n	8010e80 <prvInsertBlockIntoFreeList+0x14>
 8010e7a:	68fb      	ldr	r3, [r7, #12]
 8010e7c:	681b      	ldr	r3, [r3, #0]
 8010e7e:	60fb      	str	r3, [r7, #12]
 8010e80:	68fb      	ldr	r3, [r7, #12]
 8010e82:	681b      	ldr	r3, [r3, #0]
 8010e84:	687a      	ldr	r2, [r7, #4]
 8010e86:	429a      	cmp	r2, r3
 8010e88:	d8f7      	bhi.n	8010e7a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8010e8a:	68fb      	ldr	r3, [r7, #12]
 8010e8c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8010e8e:	68fb      	ldr	r3, [r7, #12]
 8010e90:	685b      	ldr	r3, [r3, #4]
 8010e92:	68ba      	ldr	r2, [r7, #8]
 8010e94:	4413      	add	r3, r2
 8010e96:	687a      	ldr	r2, [r7, #4]
 8010e98:	429a      	cmp	r2, r3
 8010e9a:	d108      	bne.n	8010eae <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8010e9c:	68fb      	ldr	r3, [r7, #12]
 8010e9e:	685a      	ldr	r2, [r3, #4]
 8010ea0:	687b      	ldr	r3, [r7, #4]
 8010ea2:	685b      	ldr	r3, [r3, #4]
 8010ea4:	441a      	add	r2, r3
 8010ea6:	68fb      	ldr	r3, [r7, #12]
 8010ea8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8010eaa:	68fb      	ldr	r3, [r7, #12]
 8010eac:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8010eae:	687b      	ldr	r3, [r7, #4]
 8010eb0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8010eb2:	687b      	ldr	r3, [r7, #4]
 8010eb4:	685b      	ldr	r3, [r3, #4]
 8010eb6:	68ba      	ldr	r2, [r7, #8]
 8010eb8:	441a      	add	r2, r3
 8010eba:	68fb      	ldr	r3, [r7, #12]
 8010ebc:	681b      	ldr	r3, [r3, #0]
 8010ebe:	429a      	cmp	r2, r3
 8010ec0:	d118      	bne.n	8010ef4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8010ec2:	68fb      	ldr	r3, [r7, #12]
 8010ec4:	681a      	ldr	r2, [r3, #0]
 8010ec6:	4b15      	ldr	r3, [pc, #84]	; (8010f1c <prvInsertBlockIntoFreeList+0xb0>)
 8010ec8:	681b      	ldr	r3, [r3, #0]
 8010eca:	429a      	cmp	r2, r3
 8010ecc:	d00d      	beq.n	8010eea <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8010ece:	687b      	ldr	r3, [r7, #4]
 8010ed0:	685a      	ldr	r2, [r3, #4]
 8010ed2:	68fb      	ldr	r3, [r7, #12]
 8010ed4:	681b      	ldr	r3, [r3, #0]
 8010ed6:	685b      	ldr	r3, [r3, #4]
 8010ed8:	441a      	add	r2, r3
 8010eda:	687b      	ldr	r3, [r7, #4]
 8010edc:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8010ede:	68fb      	ldr	r3, [r7, #12]
 8010ee0:	681b      	ldr	r3, [r3, #0]
 8010ee2:	681a      	ldr	r2, [r3, #0]
 8010ee4:	687b      	ldr	r3, [r7, #4]
 8010ee6:	601a      	str	r2, [r3, #0]
 8010ee8:	e008      	b.n	8010efc <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8010eea:	4b0c      	ldr	r3, [pc, #48]	; (8010f1c <prvInsertBlockIntoFreeList+0xb0>)
 8010eec:	681a      	ldr	r2, [r3, #0]
 8010eee:	687b      	ldr	r3, [r7, #4]
 8010ef0:	601a      	str	r2, [r3, #0]
 8010ef2:	e003      	b.n	8010efc <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8010ef4:	68fb      	ldr	r3, [r7, #12]
 8010ef6:	681a      	ldr	r2, [r3, #0]
 8010ef8:	687b      	ldr	r3, [r7, #4]
 8010efa:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8010efc:	68fa      	ldr	r2, [r7, #12]
 8010efe:	687b      	ldr	r3, [r7, #4]
 8010f00:	429a      	cmp	r2, r3
 8010f02:	d002      	beq.n	8010f0a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8010f04:	68fb      	ldr	r3, [r7, #12]
 8010f06:	687a      	ldr	r2, [r7, #4]
 8010f08:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8010f0a:	bf00      	nop
 8010f0c:	3714      	adds	r7, #20
 8010f0e:	46bd      	mov	sp, r7
 8010f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f14:	4770      	bx	lr
 8010f16:	bf00      	nop
 8010f18:	2002da18 	.word	0x2002da18
 8010f1c:	2002da20 	.word	0x2002da20

08010f20 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8010f20:	b480      	push	{r7}
 8010f22:	b083      	sub	sp, #12
 8010f24:	af00      	add	r7, sp, #0
 8010f26:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8010f28:	687b      	ldr	r3, [r7, #4]
 8010f2a:	f103 0208 	add.w	r2, r3, #8
 8010f2e:	687b      	ldr	r3, [r7, #4]
 8010f30:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8010f32:	687b      	ldr	r3, [r7, #4]
 8010f34:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8010f38:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8010f3a:	687b      	ldr	r3, [r7, #4]
 8010f3c:	f103 0208 	add.w	r2, r3, #8
 8010f40:	687b      	ldr	r3, [r7, #4]
 8010f42:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8010f44:	687b      	ldr	r3, [r7, #4]
 8010f46:	f103 0208 	add.w	r2, r3, #8
 8010f4a:	687b      	ldr	r3, [r7, #4]
 8010f4c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8010f4e:	687b      	ldr	r3, [r7, #4]
 8010f50:	2200      	movs	r2, #0
 8010f52:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8010f54:	bf00      	nop
 8010f56:	370c      	adds	r7, #12
 8010f58:	46bd      	mov	sp, r7
 8010f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f5e:	4770      	bx	lr

08010f60 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8010f60:	b480      	push	{r7}
 8010f62:	b083      	sub	sp, #12
 8010f64:	af00      	add	r7, sp, #0
 8010f66:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8010f68:	687b      	ldr	r3, [r7, #4]
 8010f6a:	2200      	movs	r2, #0
 8010f6c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8010f6e:	bf00      	nop
 8010f70:	370c      	adds	r7, #12
 8010f72:	46bd      	mov	sp, r7
 8010f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f78:	4770      	bx	lr

08010f7a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8010f7a:	b480      	push	{r7}
 8010f7c:	b085      	sub	sp, #20
 8010f7e:	af00      	add	r7, sp, #0
 8010f80:	6078      	str	r0, [r7, #4]
 8010f82:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8010f84:	687b      	ldr	r3, [r7, #4]
 8010f86:	685b      	ldr	r3, [r3, #4]
 8010f88:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8010f8a:	683b      	ldr	r3, [r7, #0]
 8010f8c:	68fa      	ldr	r2, [r7, #12]
 8010f8e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8010f90:	68fb      	ldr	r3, [r7, #12]
 8010f92:	689a      	ldr	r2, [r3, #8]
 8010f94:	683b      	ldr	r3, [r7, #0]
 8010f96:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8010f98:	68fb      	ldr	r3, [r7, #12]
 8010f9a:	689b      	ldr	r3, [r3, #8]
 8010f9c:	683a      	ldr	r2, [r7, #0]
 8010f9e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8010fa0:	68fb      	ldr	r3, [r7, #12]
 8010fa2:	683a      	ldr	r2, [r7, #0]
 8010fa4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8010fa6:	683b      	ldr	r3, [r7, #0]
 8010fa8:	687a      	ldr	r2, [r7, #4]
 8010faa:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8010fac:	687b      	ldr	r3, [r7, #4]
 8010fae:	681b      	ldr	r3, [r3, #0]
 8010fb0:	1c5a      	adds	r2, r3, #1
 8010fb2:	687b      	ldr	r3, [r7, #4]
 8010fb4:	601a      	str	r2, [r3, #0]
}
 8010fb6:	bf00      	nop
 8010fb8:	3714      	adds	r7, #20
 8010fba:	46bd      	mov	sp, r7
 8010fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010fc0:	4770      	bx	lr

08010fc2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8010fc2:	b480      	push	{r7}
 8010fc4:	b085      	sub	sp, #20
 8010fc6:	af00      	add	r7, sp, #0
 8010fc8:	6078      	str	r0, [r7, #4]
 8010fca:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8010fcc:	683b      	ldr	r3, [r7, #0]
 8010fce:	681b      	ldr	r3, [r3, #0]
 8010fd0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8010fd2:	68bb      	ldr	r3, [r7, #8]
 8010fd4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8010fd8:	d103      	bne.n	8010fe2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8010fda:	687b      	ldr	r3, [r7, #4]
 8010fdc:	691b      	ldr	r3, [r3, #16]
 8010fde:	60fb      	str	r3, [r7, #12]
 8010fe0:	e00c      	b.n	8010ffc <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8010fe2:	687b      	ldr	r3, [r7, #4]
 8010fe4:	3308      	adds	r3, #8
 8010fe6:	60fb      	str	r3, [r7, #12]
 8010fe8:	e002      	b.n	8010ff0 <vListInsert+0x2e>
 8010fea:	68fb      	ldr	r3, [r7, #12]
 8010fec:	685b      	ldr	r3, [r3, #4]
 8010fee:	60fb      	str	r3, [r7, #12]
 8010ff0:	68fb      	ldr	r3, [r7, #12]
 8010ff2:	685b      	ldr	r3, [r3, #4]
 8010ff4:	681b      	ldr	r3, [r3, #0]
 8010ff6:	68ba      	ldr	r2, [r7, #8]
 8010ff8:	429a      	cmp	r2, r3
 8010ffa:	d2f6      	bcs.n	8010fea <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8010ffc:	68fb      	ldr	r3, [r7, #12]
 8010ffe:	685a      	ldr	r2, [r3, #4]
 8011000:	683b      	ldr	r3, [r7, #0]
 8011002:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8011004:	683b      	ldr	r3, [r7, #0]
 8011006:	685b      	ldr	r3, [r3, #4]
 8011008:	683a      	ldr	r2, [r7, #0]
 801100a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 801100c:	683b      	ldr	r3, [r7, #0]
 801100e:	68fa      	ldr	r2, [r7, #12]
 8011010:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8011012:	68fb      	ldr	r3, [r7, #12]
 8011014:	683a      	ldr	r2, [r7, #0]
 8011016:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8011018:	683b      	ldr	r3, [r7, #0]
 801101a:	687a      	ldr	r2, [r7, #4]
 801101c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 801101e:	687b      	ldr	r3, [r7, #4]
 8011020:	681b      	ldr	r3, [r3, #0]
 8011022:	1c5a      	adds	r2, r3, #1
 8011024:	687b      	ldr	r3, [r7, #4]
 8011026:	601a      	str	r2, [r3, #0]
}
 8011028:	bf00      	nop
 801102a:	3714      	adds	r7, #20
 801102c:	46bd      	mov	sp, r7
 801102e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011032:	4770      	bx	lr

08011034 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8011034:	b480      	push	{r7}
 8011036:	b085      	sub	sp, #20
 8011038:	af00      	add	r7, sp, #0
 801103a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 801103c:	687b      	ldr	r3, [r7, #4]
 801103e:	691b      	ldr	r3, [r3, #16]
 8011040:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8011042:	687b      	ldr	r3, [r7, #4]
 8011044:	685b      	ldr	r3, [r3, #4]
 8011046:	687a      	ldr	r2, [r7, #4]
 8011048:	6892      	ldr	r2, [r2, #8]
 801104a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 801104c:	687b      	ldr	r3, [r7, #4]
 801104e:	689b      	ldr	r3, [r3, #8]
 8011050:	687a      	ldr	r2, [r7, #4]
 8011052:	6852      	ldr	r2, [r2, #4]
 8011054:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8011056:	68fb      	ldr	r3, [r7, #12]
 8011058:	685b      	ldr	r3, [r3, #4]
 801105a:	687a      	ldr	r2, [r7, #4]
 801105c:	429a      	cmp	r2, r3
 801105e:	d103      	bne.n	8011068 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8011060:	687b      	ldr	r3, [r7, #4]
 8011062:	689a      	ldr	r2, [r3, #8]
 8011064:	68fb      	ldr	r3, [r7, #12]
 8011066:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8011068:	687b      	ldr	r3, [r7, #4]
 801106a:	2200      	movs	r2, #0
 801106c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 801106e:	68fb      	ldr	r3, [r7, #12]
 8011070:	681b      	ldr	r3, [r3, #0]
 8011072:	1e5a      	subs	r2, r3, #1
 8011074:	68fb      	ldr	r3, [r7, #12]
 8011076:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8011078:	68fb      	ldr	r3, [r7, #12]
 801107a:	681b      	ldr	r3, [r3, #0]
}
 801107c:	4618      	mov	r0, r3
 801107e:	3714      	adds	r7, #20
 8011080:	46bd      	mov	sp, r7
 8011082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011086:	4770      	bx	lr

08011088 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8011088:	b580      	push	{r7, lr}
 801108a:	b084      	sub	sp, #16
 801108c:	af00      	add	r7, sp, #0
 801108e:	6078      	str	r0, [r7, #4]
 8011090:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8011092:	687b      	ldr	r3, [r7, #4]
 8011094:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8011096:	68fb      	ldr	r3, [r7, #12]
 8011098:	2b00      	cmp	r3, #0
 801109a:	d109      	bne.n	80110b0 <xQueueGenericReset+0x28>
 801109c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80110a0:	f383 8811 	msr	BASEPRI, r3
 80110a4:	f3bf 8f6f 	isb	sy
 80110a8:	f3bf 8f4f 	dsb	sy
 80110ac:	60bb      	str	r3, [r7, #8]
 80110ae:	e7fe      	b.n	80110ae <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 80110b0:	f7ff fc44 	bl	801093c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80110b4:	68fb      	ldr	r3, [r7, #12]
 80110b6:	681a      	ldr	r2, [r3, #0]
 80110b8:	68fb      	ldr	r3, [r7, #12]
 80110ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80110bc:	68f9      	ldr	r1, [r7, #12]
 80110be:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80110c0:	fb01 f303 	mul.w	r3, r1, r3
 80110c4:	441a      	add	r2, r3
 80110c6:	68fb      	ldr	r3, [r7, #12]
 80110c8:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80110ca:	68fb      	ldr	r3, [r7, #12]
 80110cc:	2200      	movs	r2, #0
 80110ce:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80110d0:	68fb      	ldr	r3, [r7, #12]
 80110d2:	681a      	ldr	r2, [r3, #0]
 80110d4:	68fb      	ldr	r3, [r7, #12]
 80110d6:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80110d8:	68fb      	ldr	r3, [r7, #12]
 80110da:	681a      	ldr	r2, [r3, #0]
 80110dc:	68fb      	ldr	r3, [r7, #12]
 80110de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80110e0:	3b01      	subs	r3, #1
 80110e2:	68f9      	ldr	r1, [r7, #12]
 80110e4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80110e6:	fb01 f303 	mul.w	r3, r1, r3
 80110ea:	441a      	add	r2, r3
 80110ec:	68fb      	ldr	r3, [r7, #12]
 80110ee:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80110f0:	68fb      	ldr	r3, [r7, #12]
 80110f2:	22ff      	movs	r2, #255	; 0xff
 80110f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80110f8:	68fb      	ldr	r3, [r7, #12]
 80110fa:	22ff      	movs	r2, #255	; 0xff
 80110fc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8011100:	683b      	ldr	r3, [r7, #0]
 8011102:	2b00      	cmp	r3, #0
 8011104:	d114      	bne.n	8011130 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8011106:	68fb      	ldr	r3, [r7, #12]
 8011108:	691b      	ldr	r3, [r3, #16]
 801110a:	2b00      	cmp	r3, #0
 801110c:	d01a      	beq.n	8011144 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801110e:	68fb      	ldr	r3, [r7, #12]
 8011110:	3310      	adds	r3, #16
 8011112:	4618      	mov	r0, r3
 8011114:	f001 fce4 	bl	8012ae0 <xTaskRemoveFromEventList>
 8011118:	4603      	mov	r3, r0
 801111a:	2b00      	cmp	r3, #0
 801111c:	d012      	beq.n	8011144 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 801111e:	4b0d      	ldr	r3, [pc, #52]	; (8011154 <xQueueGenericReset+0xcc>)
 8011120:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011124:	601a      	str	r2, [r3, #0]
 8011126:	f3bf 8f4f 	dsb	sy
 801112a:	f3bf 8f6f 	isb	sy
 801112e:	e009      	b.n	8011144 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8011130:	68fb      	ldr	r3, [r7, #12]
 8011132:	3310      	adds	r3, #16
 8011134:	4618      	mov	r0, r3
 8011136:	f7ff fef3 	bl	8010f20 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 801113a:	68fb      	ldr	r3, [r7, #12]
 801113c:	3324      	adds	r3, #36	; 0x24
 801113e:	4618      	mov	r0, r3
 8011140:	f7ff feee 	bl	8010f20 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8011144:	f7ff fc28 	bl	8010998 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8011148:	2301      	movs	r3, #1
}
 801114a:	4618      	mov	r0, r3
 801114c:	3710      	adds	r7, #16
 801114e:	46bd      	mov	sp, r7
 8011150:	bd80      	pop	{r7, pc}
 8011152:	bf00      	nop
 8011154:	e000ed04 	.word	0xe000ed04

08011158 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8011158:	b580      	push	{r7, lr}
 801115a:	b08e      	sub	sp, #56	; 0x38
 801115c:	af02      	add	r7, sp, #8
 801115e:	60f8      	str	r0, [r7, #12]
 8011160:	60b9      	str	r1, [r7, #8]
 8011162:	607a      	str	r2, [r7, #4]
 8011164:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8011166:	68fb      	ldr	r3, [r7, #12]
 8011168:	2b00      	cmp	r3, #0
 801116a:	d109      	bne.n	8011180 <xQueueGenericCreateStatic+0x28>
 801116c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011170:	f383 8811 	msr	BASEPRI, r3
 8011174:	f3bf 8f6f 	isb	sy
 8011178:	f3bf 8f4f 	dsb	sy
 801117c:	62bb      	str	r3, [r7, #40]	; 0x28
 801117e:	e7fe      	b.n	801117e <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8011180:	683b      	ldr	r3, [r7, #0]
 8011182:	2b00      	cmp	r3, #0
 8011184:	d109      	bne.n	801119a <xQueueGenericCreateStatic+0x42>
 8011186:	f04f 0350 	mov.w	r3, #80	; 0x50
 801118a:	f383 8811 	msr	BASEPRI, r3
 801118e:	f3bf 8f6f 	isb	sy
 8011192:	f3bf 8f4f 	dsb	sy
 8011196:	627b      	str	r3, [r7, #36]	; 0x24
 8011198:	e7fe      	b.n	8011198 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 801119a:	687b      	ldr	r3, [r7, #4]
 801119c:	2b00      	cmp	r3, #0
 801119e:	d002      	beq.n	80111a6 <xQueueGenericCreateStatic+0x4e>
 80111a0:	68bb      	ldr	r3, [r7, #8]
 80111a2:	2b00      	cmp	r3, #0
 80111a4:	d001      	beq.n	80111aa <xQueueGenericCreateStatic+0x52>
 80111a6:	2301      	movs	r3, #1
 80111a8:	e000      	b.n	80111ac <xQueueGenericCreateStatic+0x54>
 80111aa:	2300      	movs	r3, #0
 80111ac:	2b00      	cmp	r3, #0
 80111ae:	d109      	bne.n	80111c4 <xQueueGenericCreateStatic+0x6c>
 80111b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80111b4:	f383 8811 	msr	BASEPRI, r3
 80111b8:	f3bf 8f6f 	isb	sy
 80111bc:	f3bf 8f4f 	dsb	sy
 80111c0:	623b      	str	r3, [r7, #32]
 80111c2:	e7fe      	b.n	80111c2 <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80111c4:	687b      	ldr	r3, [r7, #4]
 80111c6:	2b00      	cmp	r3, #0
 80111c8:	d102      	bne.n	80111d0 <xQueueGenericCreateStatic+0x78>
 80111ca:	68bb      	ldr	r3, [r7, #8]
 80111cc:	2b00      	cmp	r3, #0
 80111ce:	d101      	bne.n	80111d4 <xQueueGenericCreateStatic+0x7c>
 80111d0:	2301      	movs	r3, #1
 80111d2:	e000      	b.n	80111d6 <xQueueGenericCreateStatic+0x7e>
 80111d4:	2300      	movs	r3, #0
 80111d6:	2b00      	cmp	r3, #0
 80111d8:	d109      	bne.n	80111ee <xQueueGenericCreateStatic+0x96>
 80111da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80111de:	f383 8811 	msr	BASEPRI, r3
 80111e2:	f3bf 8f6f 	isb	sy
 80111e6:	f3bf 8f4f 	dsb	sy
 80111ea:	61fb      	str	r3, [r7, #28]
 80111ec:	e7fe      	b.n	80111ec <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80111ee:	2350      	movs	r3, #80	; 0x50
 80111f0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80111f2:	697b      	ldr	r3, [r7, #20]
 80111f4:	2b50      	cmp	r3, #80	; 0x50
 80111f6:	d009      	beq.n	801120c <xQueueGenericCreateStatic+0xb4>
 80111f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80111fc:	f383 8811 	msr	BASEPRI, r3
 8011200:	f3bf 8f6f 	isb	sy
 8011204:	f3bf 8f4f 	dsb	sy
 8011208:	61bb      	str	r3, [r7, #24]
 801120a:	e7fe      	b.n	801120a <xQueueGenericCreateStatic+0xb2>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 801120c:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 801120e:	683b      	ldr	r3, [r7, #0]
 8011210:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8011212:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011214:	2b00      	cmp	r3, #0
 8011216:	d00d      	beq.n	8011234 <xQueueGenericCreateStatic+0xdc>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8011218:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801121a:	2201      	movs	r2, #1
 801121c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8011220:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8011224:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011226:	9300      	str	r3, [sp, #0]
 8011228:	4613      	mov	r3, r2
 801122a:	687a      	ldr	r2, [r7, #4]
 801122c:	68b9      	ldr	r1, [r7, #8]
 801122e:	68f8      	ldr	r0, [r7, #12]
 8011230:	f000 f844 	bl	80112bc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8011234:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8011236:	4618      	mov	r0, r3
 8011238:	3730      	adds	r7, #48	; 0x30
 801123a:	46bd      	mov	sp, r7
 801123c:	bd80      	pop	{r7, pc}

0801123e <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 801123e:	b580      	push	{r7, lr}
 8011240:	b08a      	sub	sp, #40	; 0x28
 8011242:	af02      	add	r7, sp, #8
 8011244:	60f8      	str	r0, [r7, #12]
 8011246:	60b9      	str	r1, [r7, #8]
 8011248:	4613      	mov	r3, r2
 801124a:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 801124c:	68fb      	ldr	r3, [r7, #12]
 801124e:	2b00      	cmp	r3, #0
 8011250:	d109      	bne.n	8011266 <xQueueGenericCreate+0x28>
 8011252:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011256:	f383 8811 	msr	BASEPRI, r3
 801125a:	f3bf 8f6f 	isb	sy
 801125e:	f3bf 8f4f 	dsb	sy
 8011262:	613b      	str	r3, [r7, #16]
 8011264:	e7fe      	b.n	8011264 <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8011266:	68bb      	ldr	r3, [r7, #8]
 8011268:	2b00      	cmp	r3, #0
 801126a:	d102      	bne.n	8011272 <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 801126c:	2300      	movs	r3, #0
 801126e:	61fb      	str	r3, [r7, #28]
 8011270:	e004      	b.n	801127c <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011272:	68fb      	ldr	r3, [r7, #12]
 8011274:	68ba      	ldr	r2, [r7, #8]
 8011276:	fb02 f303 	mul.w	r3, r2, r3
 801127a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 801127c:	69fb      	ldr	r3, [r7, #28]
 801127e:	3350      	adds	r3, #80	; 0x50
 8011280:	4618      	mov	r0, r3
 8011282:	f7ff fc75 	bl	8010b70 <pvPortMalloc>
 8011286:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8011288:	69bb      	ldr	r3, [r7, #24]
 801128a:	2b00      	cmp	r3, #0
 801128c:	d011      	beq.n	80112b2 <xQueueGenericCreate+0x74>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 801128e:	69bb      	ldr	r3, [r7, #24]
 8011290:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8011292:	697b      	ldr	r3, [r7, #20]
 8011294:	3350      	adds	r3, #80	; 0x50
 8011296:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8011298:	69bb      	ldr	r3, [r7, #24]
 801129a:	2200      	movs	r2, #0
 801129c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80112a0:	79fa      	ldrb	r2, [r7, #7]
 80112a2:	69bb      	ldr	r3, [r7, #24]
 80112a4:	9300      	str	r3, [sp, #0]
 80112a6:	4613      	mov	r3, r2
 80112a8:	697a      	ldr	r2, [r7, #20]
 80112aa:	68b9      	ldr	r1, [r7, #8]
 80112ac:	68f8      	ldr	r0, [r7, #12]
 80112ae:	f000 f805 	bl	80112bc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80112b2:	69bb      	ldr	r3, [r7, #24]
	}
 80112b4:	4618      	mov	r0, r3
 80112b6:	3720      	adds	r7, #32
 80112b8:	46bd      	mov	sp, r7
 80112ba:	bd80      	pop	{r7, pc}

080112bc <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80112bc:	b580      	push	{r7, lr}
 80112be:	b084      	sub	sp, #16
 80112c0:	af00      	add	r7, sp, #0
 80112c2:	60f8      	str	r0, [r7, #12]
 80112c4:	60b9      	str	r1, [r7, #8]
 80112c6:	607a      	str	r2, [r7, #4]
 80112c8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80112ca:	68bb      	ldr	r3, [r7, #8]
 80112cc:	2b00      	cmp	r3, #0
 80112ce:	d103      	bne.n	80112d8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80112d0:	69bb      	ldr	r3, [r7, #24]
 80112d2:	69ba      	ldr	r2, [r7, #24]
 80112d4:	601a      	str	r2, [r3, #0]
 80112d6:	e002      	b.n	80112de <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80112d8:	69bb      	ldr	r3, [r7, #24]
 80112da:	687a      	ldr	r2, [r7, #4]
 80112dc:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80112de:	69bb      	ldr	r3, [r7, #24]
 80112e0:	68fa      	ldr	r2, [r7, #12]
 80112e2:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80112e4:	69bb      	ldr	r3, [r7, #24]
 80112e6:	68ba      	ldr	r2, [r7, #8]
 80112e8:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80112ea:	2101      	movs	r1, #1
 80112ec:	69b8      	ldr	r0, [r7, #24]
 80112ee:	f7ff fecb 	bl	8011088 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80112f2:	69bb      	ldr	r3, [r7, #24]
 80112f4:	78fa      	ldrb	r2, [r7, #3]
 80112f6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80112fa:	bf00      	nop
 80112fc:	3710      	adds	r7, #16
 80112fe:	46bd      	mov	sp, r7
 8011300:	bd80      	pop	{r7, pc}

08011302 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8011302:	b580      	push	{r7, lr}
 8011304:	b082      	sub	sp, #8
 8011306:	af00      	add	r7, sp, #0
 8011308:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 801130a:	687b      	ldr	r3, [r7, #4]
 801130c:	2b00      	cmp	r3, #0
 801130e:	d00e      	beq.n	801132e <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8011310:	687b      	ldr	r3, [r7, #4]
 8011312:	2200      	movs	r2, #0
 8011314:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8011316:	687b      	ldr	r3, [r7, #4]
 8011318:	2200      	movs	r2, #0
 801131a:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 801131c:	687b      	ldr	r3, [r7, #4]
 801131e:	2200      	movs	r2, #0
 8011320:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8011322:	2300      	movs	r3, #0
 8011324:	2200      	movs	r2, #0
 8011326:	2100      	movs	r1, #0
 8011328:	6878      	ldr	r0, [r7, #4]
 801132a:	f000 f905 	bl	8011538 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 801132e:	bf00      	nop
 8011330:	3708      	adds	r7, #8
 8011332:	46bd      	mov	sp, r7
 8011334:	bd80      	pop	{r7, pc}

08011336 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8011336:	b580      	push	{r7, lr}
 8011338:	b086      	sub	sp, #24
 801133a:	af00      	add	r7, sp, #0
 801133c:	4603      	mov	r3, r0
 801133e:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8011340:	2301      	movs	r3, #1
 8011342:	617b      	str	r3, [r7, #20]
 8011344:	2300      	movs	r3, #0
 8011346:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8011348:	79fb      	ldrb	r3, [r7, #7]
 801134a:	461a      	mov	r2, r3
 801134c:	6939      	ldr	r1, [r7, #16]
 801134e:	6978      	ldr	r0, [r7, #20]
 8011350:	f7ff ff75 	bl	801123e <xQueueGenericCreate>
 8011354:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8011356:	68f8      	ldr	r0, [r7, #12]
 8011358:	f7ff ffd3 	bl	8011302 <prvInitialiseMutex>

		return xNewQueue;
 801135c:	68fb      	ldr	r3, [r7, #12]
	}
 801135e:	4618      	mov	r0, r3
 8011360:	3718      	adds	r7, #24
 8011362:	46bd      	mov	sp, r7
 8011364:	bd80      	pop	{r7, pc}

08011366 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8011366:	b580      	push	{r7, lr}
 8011368:	b088      	sub	sp, #32
 801136a:	af02      	add	r7, sp, #8
 801136c:	4603      	mov	r3, r0
 801136e:	6039      	str	r1, [r7, #0]
 8011370:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8011372:	2301      	movs	r3, #1
 8011374:	617b      	str	r3, [r7, #20]
 8011376:	2300      	movs	r3, #0
 8011378:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 801137a:	79fb      	ldrb	r3, [r7, #7]
 801137c:	9300      	str	r3, [sp, #0]
 801137e:	683b      	ldr	r3, [r7, #0]
 8011380:	2200      	movs	r2, #0
 8011382:	6939      	ldr	r1, [r7, #16]
 8011384:	6978      	ldr	r0, [r7, #20]
 8011386:	f7ff fee7 	bl	8011158 <xQueueGenericCreateStatic>
 801138a:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 801138c:	68f8      	ldr	r0, [r7, #12]
 801138e:	f7ff ffb8 	bl	8011302 <prvInitialiseMutex>

		return xNewQueue;
 8011392:	68fb      	ldr	r3, [r7, #12]
	}
 8011394:	4618      	mov	r0, r3
 8011396:	3718      	adds	r7, #24
 8011398:	46bd      	mov	sp, r7
 801139a:	bd80      	pop	{r7, pc}

0801139c <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 801139c:	b590      	push	{r4, r7, lr}
 801139e:	b087      	sub	sp, #28
 80113a0:	af00      	add	r7, sp, #0
 80113a2:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 80113a4:	687b      	ldr	r3, [r7, #4]
 80113a6:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 80113a8:	693b      	ldr	r3, [r7, #16]
 80113aa:	2b00      	cmp	r3, #0
 80113ac:	d109      	bne.n	80113c2 <xQueueGiveMutexRecursive+0x26>
 80113ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80113b2:	f383 8811 	msr	BASEPRI, r3
 80113b6:	f3bf 8f6f 	isb	sy
 80113ba:	f3bf 8f4f 	dsb	sy
 80113be:	60fb      	str	r3, [r7, #12]
 80113c0:	e7fe      	b.n	80113c0 <xQueueGiveMutexRecursive+0x24>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 80113c2:	693b      	ldr	r3, [r7, #16]
 80113c4:	689c      	ldr	r4, [r3, #8]
 80113c6:	f001 fd69 	bl	8012e9c <xTaskGetCurrentTaskHandle>
 80113ca:	4603      	mov	r3, r0
 80113cc:	429c      	cmp	r4, r3
 80113ce:	d111      	bne.n	80113f4 <xQueueGiveMutexRecursive+0x58>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 80113d0:	693b      	ldr	r3, [r7, #16]
 80113d2:	68db      	ldr	r3, [r3, #12]
 80113d4:	1e5a      	subs	r2, r3, #1
 80113d6:	693b      	ldr	r3, [r7, #16]
 80113d8:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 80113da:	693b      	ldr	r3, [r7, #16]
 80113dc:	68db      	ldr	r3, [r3, #12]
 80113de:	2b00      	cmp	r3, #0
 80113e0:	d105      	bne.n	80113ee <xQueueGiveMutexRecursive+0x52>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 80113e2:	2300      	movs	r3, #0
 80113e4:	2200      	movs	r2, #0
 80113e6:	2100      	movs	r1, #0
 80113e8:	6938      	ldr	r0, [r7, #16]
 80113ea:	f000 f8a5 	bl	8011538 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 80113ee:	2301      	movs	r3, #1
 80113f0:	617b      	str	r3, [r7, #20]
 80113f2:	e001      	b.n	80113f8 <xQueueGiveMutexRecursive+0x5c>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 80113f4:	2300      	movs	r3, #0
 80113f6:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 80113f8:	697b      	ldr	r3, [r7, #20]
	}
 80113fa:	4618      	mov	r0, r3
 80113fc:	371c      	adds	r7, #28
 80113fe:	46bd      	mov	sp, r7
 8011400:	bd90      	pop	{r4, r7, pc}

08011402 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 8011402:	b590      	push	{r4, r7, lr}
 8011404:	b087      	sub	sp, #28
 8011406:	af00      	add	r7, sp, #0
 8011408:	6078      	str	r0, [r7, #4]
 801140a:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 801140c:	687b      	ldr	r3, [r7, #4]
 801140e:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8011410:	693b      	ldr	r3, [r7, #16]
 8011412:	2b00      	cmp	r3, #0
 8011414:	d109      	bne.n	801142a <xQueueTakeMutexRecursive+0x28>
 8011416:	f04f 0350 	mov.w	r3, #80	; 0x50
 801141a:	f383 8811 	msr	BASEPRI, r3
 801141e:	f3bf 8f6f 	isb	sy
 8011422:	f3bf 8f4f 	dsb	sy
 8011426:	60fb      	str	r3, [r7, #12]
 8011428:	e7fe      	b.n	8011428 <xQueueTakeMutexRecursive+0x26>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 801142a:	693b      	ldr	r3, [r7, #16]
 801142c:	689c      	ldr	r4, [r3, #8]
 801142e:	f001 fd35 	bl	8012e9c <xTaskGetCurrentTaskHandle>
 8011432:	4603      	mov	r3, r0
 8011434:	429c      	cmp	r4, r3
 8011436:	d107      	bne.n	8011448 <xQueueTakeMutexRecursive+0x46>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8011438:	693b      	ldr	r3, [r7, #16]
 801143a:	68db      	ldr	r3, [r3, #12]
 801143c:	1c5a      	adds	r2, r3, #1
 801143e:	693b      	ldr	r3, [r7, #16]
 8011440:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 8011442:	2301      	movs	r3, #1
 8011444:	617b      	str	r3, [r7, #20]
 8011446:	e00c      	b.n	8011462 <xQueueTakeMutexRecursive+0x60>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 8011448:	6839      	ldr	r1, [r7, #0]
 801144a:	6938      	ldr	r0, [r7, #16]
 801144c:	f000 fb68 	bl	8011b20 <xQueueSemaphoreTake>
 8011450:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 8011452:	697b      	ldr	r3, [r7, #20]
 8011454:	2b00      	cmp	r3, #0
 8011456:	d004      	beq.n	8011462 <xQueueTakeMutexRecursive+0x60>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8011458:	693b      	ldr	r3, [r7, #16]
 801145a:	68db      	ldr	r3, [r3, #12]
 801145c:	1c5a      	adds	r2, r3, #1
 801145e:	693b      	ldr	r3, [r7, #16]
 8011460:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 8011462:	697b      	ldr	r3, [r7, #20]
	}
 8011464:	4618      	mov	r0, r3
 8011466:	371c      	adds	r7, #28
 8011468:	46bd      	mov	sp, r7
 801146a:	bd90      	pop	{r4, r7, pc}

0801146c <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 801146c:	b580      	push	{r7, lr}
 801146e:	b08a      	sub	sp, #40	; 0x28
 8011470:	af02      	add	r7, sp, #8
 8011472:	60f8      	str	r0, [r7, #12]
 8011474:	60b9      	str	r1, [r7, #8]
 8011476:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8011478:	68fb      	ldr	r3, [r7, #12]
 801147a:	2b00      	cmp	r3, #0
 801147c:	d109      	bne.n	8011492 <xQueueCreateCountingSemaphoreStatic+0x26>
 801147e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011482:	f383 8811 	msr	BASEPRI, r3
 8011486:	f3bf 8f6f 	isb	sy
 801148a:	f3bf 8f4f 	dsb	sy
 801148e:	61bb      	str	r3, [r7, #24]
 8011490:	e7fe      	b.n	8011490 <xQueueCreateCountingSemaphoreStatic+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8011492:	68ba      	ldr	r2, [r7, #8]
 8011494:	68fb      	ldr	r3, [r7, #12]
 8011496:	429a      	cmp	r2, r3
 8011498:	d909      	bls.n	80114ae <xQueueCreateCountingSemaphoreStatic+0x42>
 801149a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801149e:	f383 8811 	msr	BASEPRI, r3
 80114a2:	f3bf 8f6f 	isb	sy
 80114a6:	f3bf 8f4f 	dsb	sy
 80114aa:	617b      	str	r3, [r7, #20]
 80114ac:	e7fe      	b.n	80114ac <xQueueCreateCountingSemaphoreStatic+0x40>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80114ae:	2302      	movs	r3, #2
 80114b0:	9300      	str	r3, [sp, #0]
 80114b2:	687b      	ldr	r3, [r7, #4]
 80114b4:	2200      	movs	r2, #0
 80114b6:	2100      	movs	r1, #0
 80114b8:	68f8      	ldr	r0, [r7, #12]
 80114ba:	f7ff fe4d 	bl	8011158 <xQueueGenericCreateStatic>
 80114be:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 80114c0:	69fb      	ldr	r3, [r7, #28]
 80114c2:	2b00      	cmp	r3, #0
 80114c4:	d002      	beq.n	80114cc <xQueueCreateCountingSemaphoreStatic+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80114c6:	69fb      	ldr	r3, [r7, #28]
 80114c8:	68ba      	ldr	r2, [r7, #8]
 80114ca:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 80114cc:	69fb      	ldr	r3, [r7, #28]
	}
 80114ce:	4618      	mov	r0, r3
 80114d0:	3720      	adds	r7, #32
 80114d2:	46bd      	mov	sp, r7
 80114d4:	bd80      	pop	{r7, pc}

080114d6 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 80114d6:	b580      	push	{r7, lr}
 80114d8:	b086      	sub	sp, #24
 80114da:	af00      	add	r7, sp, #0
 80114dc:	6078      	str	r0, [r7, #4]
 80114de:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 80114e0:	687b      	ldr	r3, [r7, #4]
 80114e2:	2b00      	cmp	r3, #0
 80114e4:	d109      	bne.n	80114fa <xQueueCreateCountingSemaphore+0x24>
 80114e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80114ea:	f383 8811 	msr	BASEPRI, r3
 80114ee:	f3bf 8f6f 	isb	sy
 80114f2:	f3bf 8f4f 	dsb	sy
 80114f6:	613b      	str	r3, [r7, #16]
 80114f8:	e7fe      	b.n	80114f8 <xQueueCreateCountingSemaphore+0x22>
		configASSERT( uxInitialCount <= uxMaxCount );
 80114fa:	683a      	ldr	r2, [r7, #0]
 80114fc:	687b      	ldr	r3, [r7, #4]
 80114fe:	429a      	cmp	r2, r3
 8011500:	d909      	bls.n	8011516 <xQueueCreateCountingSemaphore+0x40>
 8011502:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011506:	f383 8811 	msr	BASEPRI, r3
 801150a:	f3bf 8f6f 	isb	sy
 801150e:	f3bf 8f4f 	dsb	sy
 8011512:	60fb      	str	r3, [r7, #12]
 8011514:	e7fe      	b.n	8011514 <xQueueCreateCountingSemaphore+0x3e>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8011516:	2202      	movs	r2, #2
 8011518:	2100      	movs	r1, #0
 801151a:	6878      	ldr	r0, [r7, #4]
 801151c:	f7ff fe8f 	bl	801123e <xQueueGenericCreate>
 8011520:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8011522:	697b      	ldr	r3, [r7, #20]
 8011524:	2b00      	cmp	r3, #0
 8011526:	d002      	beq.n	801152e <xQueueCreateCountingSemaphore+0x58>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8011528:	697b      	ldr	r3, [r7, #20]
 801152a:	683a      	ldr	r2, [r7, #0]
 801152c:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 801152e:	697b      	ldr	r3, [r7, #20]
	}
 8011530:	4618      	mov	r0, r3
 8011532:	3718      	adds	r7, #24
 8011534:	46bd      	mov	sp, r7
 8011536:	bd80      	pop	{r7, pc}

08011538 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8011538:	b580      	push	{r7, lr}
 801153a:	b08e      	sub	sp, #56	; 0x38
 801153c:	af00      	add	r7, sp, #0
 801153e:	60f8      	str	r0, [r7, #12]
 8011540:	60b9      	str	r1, [r7, #8]
 8011542:	607a      	str	r2, [r7, #4]
 8011544:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8011546:	2300      	movs	r3, #0
 8011548:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 801154a:	68fb      	ldr	r3, [r7, #12]
 801154c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 801154e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011550:	2b00      	cmp	r3, #0
 8011552:	d109      	bne.n	8011568 <xQueueGenericSend+0x30>
 8011554:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011558:	f383 8811 	msr	BASEPRI, r3
 801155c:	f3bf 8f6f 	isb	sy
 8011560:	f3bf 8f4f 	dsb	sy
 8011564:	62bb      	str	r3, [r7, #40]	; 0x28
 8011566:	e7fe      	b.n	8011566 <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8011568:	68bb      	ldr	r3, [r7, #8]
 801156a:	2b00      	cmp	r3, #0
 801156c:	d103      	bne.n	8011576 <xQueueGenericSend+0x3e>
 801156e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011570:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011572:	2b00      	cmp	r3, #0
 8011574:	d101      	bne.n	801157a <xQueueGenericSend+0x42>
 8011576:	2301      	movs	r3, #1
 8011578:	e000      	b.n	801157c <xQueueGenericSend+0x44>
 801157a:	2300      	movs	r3, #0
 801157c:	2b00      	cmp	r3, #0
 801157e:	d109      	bne.n	8011594 <xQueueGenericSend+0x5c>
 8011580:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011584:	f383 8811 	msr	BASEPRI, r3
 8011588:	f3bf 8f6f 	isb	sy
 801158c:	f3bf 8f4f 	dsb	sy
 8011590:	627b      	str	r3, [r7, #36]	; 0x24
 8011592:	e7fe      	b.n	8011592 <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8011594:	683b      	ldr	r3, [r7, #0]
 8011596:	2b02      	cmp	r3, #2
 8011598:	d103      	bne.n	80115a2 <xQueueGenericSend+0x6a>
 801159a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801159c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801159e:	2b01      	cmp	r3, #1
 80115a0:	d101      	bne.n	80115a6 <xQueueGenericSend+0x6e>
 80115a2:	2301      	movs	r3, #1
 80115a4:	e000      	b.n	80115a8 <xQueueGenericSend+0x70>
 80115a6:	2300      	movs	r3, #0
 80115a8:	2b00      	cmp	r3, #0
 80115aa:	d109      	bne.n	80115c0 <xQueueGenericSend+0x88>
 80115ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80115b0:	f383 8811 	msr	BASEPRI, r3
 80115b4:	f3bf 8f6f 	isb	sy
 80115b8:	f3bf 8f4f 	dsb	sy
 80115bc:	623b      	str	r3, [r7, #32]
 80115be:	e7fe      	b.n	80115be <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80115c0:	f001 fc7c 	bl	8012ebc <xTaskGetSchedulerState>
 80115c4:	4603      	mov	r3, r0
 80115c6:	2b00      	cmp	r3, #0
 80115c8:	d102      	bne.n	80115d0 <xQueueGenericSend+0x98>
 80115ca:	687b      	ldr	r3, [r7, #4]
 80115cc:	2b00      	cmp	r3, #0
 80115ce:	d101      	bne.n	80115d4 <xQueueGenericSend+0x9c>
 80115d0:	2301      	movs	r3, #1
 80115d2:	e000      	b.n	80115d6 <xQueueGenericSend+0x9e>
 80115d4:	2300      	movs	r3, #0
 80115d6:	2b00      	cmp	r3, #0
 80115d8:	d109      	bne.n	80115ee <xQueueGenericSend+0xb6>
 80115da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80115de:	f383 8811 	msr	BASEPRI, r3
 80115e2:	f3bf 8f6f 	isb	sy
 80115e6:	f3bf 8f4f 	dsb	sy
 80115ea:	61fb      	str	r3, [r7, #28]
 80115ec:	e7fe      	b.n	80115ec <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80115ee:	f7ff f9a5 	bl	801093c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80115f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80115f4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80115f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80115f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80115fa:	429a      	cmp	r2, r3
 80115fc:	d302      	bcc.n	8011604 <xQueueGenericSend+0xcc>
 80115fe:	683b      	ldr	r3, [r7, #0]
 8011600:	2b02      	cmp	r3, #2
 8011602:	d129      	bne.n	8011658 <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8011604:	683a      	ldr	r2, [r7, #0]
 8011606:	68b9      	ldr	r1, [r7, #8]
 8011608:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801160a:	f000 fc48 	bl	8011e9e <prvCopyDataToQueue>
 801160e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8011610:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011612:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011614:	2b00      	cmp	r3, #0
 8011616:	d010      	beq.n	801163a <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8011618:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801161a:	3324      	adds	r3, #36	; 0x24
 801161c:	4618      	mov	r0, r3
 801161e:	f001 fa5f 	bl	8012ae0 <xTaskRemoveFromEventList>
 8011622:	4603      	mov	r3, r0
 8011624:	2b00      	cmp	r3, #0
 8011626:	d013      	beq.n	8011650 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8011628:	4b3f      	ldr	r3, [pc, #252]	; (8011728 <xQueueGenericSend+0x1f0>)
 801162a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801162e:	601a      	str	r2, [r3, #0]
 8011630:	f3bf 8f4f 	dsb	sy
 8011634:	f3bf 8f6f 	isb	sy
 8011638:	e00a      	b.n	8011650 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 801163a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801163c:	2b00      	cmp	r3, #0
 801163e:	d007      	beq.n	8011650 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8011640:	4b39      	ldr	r3, [pc, #228]	; (8011728 <xQueueGenericSend+0x1f0>)
 8011642:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011646:	601a      	str	r2, [r3, #0]
 8011648:	f3bf 8f4f 	dsb	sy
 801164c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8011650:	f7ff f9a2 	bl	8010998 <vPortExitCritical>
				return pdPASS;
 8011654:	2301      	movs	r3, #1
 8011656:	e063      	b.n	8011720 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8011658:	687b      	ldr	r3, [r7, #4]
 801165a:	2b00      	cmp	r3, #0
 801165c:	d103      	bne.n	8011666 <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 801165e:	f7ff f99b 	bl	8010998 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8011662:	2300      	movs	r3, #0
 8011664:	e05c      	b.n	8011720 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8011666:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011668:	2b00      	cmp	r3, #0
 801166a:	d106      	bne.n	801167a <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 801166c:	f107 0314 	add.w	r3, r7, #20
 8011670:	4618      	mov	r0, r3
 8011672:	f001 fa99 	bl	8012ba8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8011676:	2301      	movs	r3, #1
 8011678:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 801167a:	f7ff f98d 	bl	8010998 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 801167e:	f000 ffdb 	bl	8012638 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8011682:	f7ff f95b 	bl	801093c <vPortEnterCritical>
 8011686:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011688:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801168c:	b25b      	sxtb	r3, r3
 801168e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8011692:	d103      	bne.n	801169c <xQueueGenericSend+0x164>
 8011694:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011696:	2200      	movs	r2, #0
 8011698:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801169c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801169e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80116a2:	b25b      	sxtb	r3, r3
 80116a4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80116a8:	d103      	bne.n	80116b2 <xQueueGenericSend+0x17a>
 80116aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80116ac:	2200      	movs	r2, #0
 80116ae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80116b2:	f7ff f971 	bl	8010998 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80116b6:	1d3a      	adds	r2, r7, #4
 80116b8:	f107 0314 	add.w	r3, r7, #20
 80116bc:	4611      	mov	r1, r2
 80116be:	4618      	mov	r0, r3
 80116c0:	f001 fa88 	bl	8012bd4 <xTaskCheckForTimeOut>
 80116c4:	4603      	mov	r3, r0
 80116c6:	2b00      	cmp	r3, #0
 80116c8:	d124      	bne.n	8011714 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80116ca:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80116cc:	f000 fcdf 	bl	801208e <prvIsQueueFull>
 80116d0:	4603      	mov	r3, r0
 80116d2:	2b00      	cmp	r3, #0
 80116d4:	d018      	beq.n	8011708 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80116d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80116d8:	3310      	adds	r3, #16
 80116da:	687a      	ldr	r2, [r7, #4]
 80116dc:	4611      	mov	r1, r2
 80116de:	4618      	mov	r0, r3
 80116e0:	f001 f9b0 	bl	8012a44 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80116e4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80116e6:	f000 fc6a 	bl	8011fbe <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80116ea:	f000 ffeb 	bl	80126c4 <xTaskResumeAll>
 80116ee:	4603      	mov	r3, r0
 80116f0:	2b00      	cmp	r3, #0
 80116f2:	f47f af7c 	bne.w	80115ee <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 80116f6:	4b0c      	ldr	r3, [pc, #48]	; (8011728 <xQueueGenericSend+0x1f0>)
 80116f8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80116fc:	601a      	str	r2, [r3, #0]
 80116fe:	f3bf 8f4f 	dsb	sy
 8011702:	f3bf 8f6f 	isb	sy
 8011706:	e772      	b.n	80115ee <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8011708:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801170a:	f000 fc58 	bl	8011fbe <prvUnlockQueue>
				( void ) xTaskResumeAll();
 801170e:	f000 ffd9 	bl	80126c4 <xTaskResumeAll>
 8011712:	e76c      	b.n	80115ee <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8011714:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011716:	f000 fc52 	bl	8011fbe <prvUnlockQueue>
			( void ) xTaskResumeAll();
 801171a:	f000 ffd3 	bl	80126c4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 801171e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8011720:	4618      	mov	r0, r3
 8011722:	3738      	adds	r7, #56	; 0x38
 8011724:	46bd      	mov	sp, r7
 8011726:	bd80      	pop	{r7, pc}
 8011728:	e000ed04 	.word	0xe000ed04

0801172c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 801172c:	b580      	push	{r7, lr}
 801172e:	b08e      	sub	sp, #56	; 0x38
 8011730:	af00      	add	r7, sp, #0
 8011732:	60f8      	str	r0, [r7, #12]
 8011734:	60b9      	str	r1, [r7, #8]
 8011736:	607a      	str	r2, [r7, #4]
 8011738:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 801173a:	68fb      	ldr	r3, [r7, #12]
 801173c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 801173e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011740:	2b00      	cmp	r3, #0
 8011742:	d109      	bne.n	8011758 <xQueueGenericSendFromISR+0x2c>
 8011744:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011748:	f383 8811 	msr	BASEPRI, r3
 801174c:	f3bf 8f6f 	isb	sy
 8011750:	f3bf 8f4f 	dsb	sy
 8011754:	627b      	str	r3, [r7, #36]	; 0x24
 8011756:	e7fe      	b.n	8011756 <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8011758:	68bb      	ldr	r3, [r7, #8]
 801175a:	2b00      	cmp	r3, #0
 801175c:	d103      	bne.n	8011766 <xQueueGenericSendFromISR+0x3a>
 801175e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011760:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011762:	2b00      	cmp	r3, #0
 8011764:	d101      	bne.n	801176a <xQueueGenericSendFromISR+0x3e>
 8011766:	2301      	movs	r3, #1
 8011768:	e000      	b.n	801176c <xQueueGenericSendFromISR+0x40>
 801176a:	2300      	movs	r3, #0
 801176c:	2b00      	cmp	r3, #0
 801176e:	d109      	bne.n	8011784 <xQueueGenericSendFromISR+0x58>
 8011770:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011774:	f383 8811 	msr	BASEPRI, r3
 8011778:	f3bf 8f6f 	isb	sy
 801177c:	f3bf 8f4f 	dsb	sy
 8011780:	623b      	str	r3, [r7, #32]
 8011782:	e7fe      	b.n	8011782 <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8011784:	683b      	ldr	r3, [r7, #0]
 8011786:	2b02      	cmp	r3, #2
 8011788:	d103      	bne.n	8011792 <xQueueGenericSendFromISR+0x66>
 801178a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801178c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801178e:	2b01      	cmp	r3, #1
 8011790:	d101      	bne.n	8011796 <xQueueGenericSendFromISR+0x6a>
 8011792:	2301      	movs	r3, #1
 8011794:	e000      	b.n	8011798 <xQueueGenericSendFromISR+0x6c>
 8011796:	2300      	movs	r3, #0
 8011798:	2b00      	cmp	r3, #0
 801179a:	d109      	bne.n	80117b0 <xQueueGenericSendFromISR+0x84>
 801179c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80117a0:	f383 8811 	msr	BASEPRI, r3
 80117a4:	f3bf 8f6f 	isb	sy
 80117a8:	f3bf 8f4f 	dsb	sy
 80117ac:	61fb      	str	r3, [r7, #28]
 80117ae:	e7fe      	b.n	80117ae <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80117b0:	f7ff f9a0 	bl	8010af4 <vPortValidateInterruptPriority>
	__asm volatile
 80117b4:	f3ef 8211 	mrs	r2, BASEPRI
 80117b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80117bc:	f383 8811 	msr	BASEPRI, r3
 80117c0:	f3bf 8f6f 	isb	sy
 80117c4:	f3bf 8f4f 	dsb	sy
 80117c8:	61ba      	str	r2, [r7, #24]
 80117ca:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80117cc:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80117ce:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80117d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80117d2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80117d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80117d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80117d8:	429a      	cmp	r2, r3
 80117da:	d302      	bcc.n	80117e2 <xQueueGenericSendFromISR+0xb6>
 80117dc:	683b      	ldr	r3, [r7, #0]
 80117de:	2b02      	cmp	r3, #2
 80117e0:	d12c      	bne.n	801183c <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80117e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80117e4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80117e8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80117ec:	683a      	ldr	r2, [r7, #0]
 80117ee:	68b9      	ldr	r1, [r7, #8]
 80117f0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80117f2:	f000 fb54 	bl	8011e9e <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80117f6:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 80117fa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80117fe:	d112      	bne.n	8011826 <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8011800:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011802:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011804:	2b00      	cmp	r3, #0
 8011806:	d016      	beq.n	8011836 <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8011808:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801180a:	3324      	adds	r3, #36	; 0x24
 801180c:	4618      	mov	r0, r3
 801180e:	f001 f967 	bl	8012ae0 <xTaskRemoveFromEventList>
 8011812:	4603      	mov	r3, r0
 8011814:	2b00      	cmp	r3, #0
 8011816:	d00e      	beq.n	8011836 <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8011818:	687b      	ldr	r3, [r7, #4]
 801181a:	2b00      	cmp	r3, #0
 801181c:	d00b      	beq.n	8011836 <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 801181e:	687b      	ldr	r3, [r7, #4]
 8011820:	2201      	movs	r2, #1
 8011822:	601a      	str	r2, [r3, #0]
 8011824:	e007      	b.n	8011836 <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8011826:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 801182a:	3301      	adds	r3, #1
 801182c:	b2db      	uxtb	r3, r3
 801182e:	b25a      	sxtb	r2, r3
 8011830:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011832:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8011836:	2301      	movs	r3, #1
 8011838:	637b      	str	r3, [r7, #52]	; 0x34
		{
 801183a:	e001      	b.n	8011840 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 801183c:	2300      	movs	r3, #0
 801183e:	637b      	str	r3, [r7, #52]	; 0x34
 8011840:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011842:	613b      	str	r3, [r7, #16]
	__asm volatile
 8011844:	693b      	ldr	r3, [r7, #16]
 8011846:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 801184a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 801184c:	4618      	mov	r0, r3
 801184e:	3738      	adds	r7, #56	; 0x38
 8011850:	46bd      	mov	sp, r7
 8011852:	bd80      	pop	{r7, pc}

08011854 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8011854:	b580      	push	{r7, lr}
 8011856:	b08e      	sub	sp, #56	; 0x38
 8011858:	af00      	add	r7, sp, #0
 801185a:	6078      	str	r0, [r7, #4]
 801185c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 801185e:	687b      	ldr	r3, [r7, #4]
 8011860:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8011862:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011864:	2b00      	cmp	r3, #0
 8011866:	d109      	bne.n	801187c <xQueueGiveFromISR+0x28>
	__asm volatile
 8011868:	f04f 0350 	mov.w	r3, #80	; 0x50
 801186c:	f383 8811 	msr	BASEPRI, r3
 8011870:	f3bf 8f6f 	isb	sy
 8011874:	f3bf 8f4f 	dsb	sy
 8011878:	623b      	str	r3, [r7, #32]
 801187a:	e7fe      	b.n	801187a <xQueueGiveFromISR+0x26>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 801187c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801187e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011880:	2b00      	cmp	r3, #0
 8011882:	d009      	beq.n	8011898 <xQueueGiveFromISR+0x44>
 8011884:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011888:	f383 8811 	msr	BASEPRI, r3
 801188c:	f3bf 8f6f 	isb	sy
 8011890:	f3bf 8f4f 	dsb	sy
 8011894:	61fb      	str	r3, [r7, #28]
 8011896:	e7fe      	b.n	8011896 <xQueueGiveFromISR+0x42>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8011898:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801189a:	681b      	ldr	r3, [r3, #0]
 801189c:	2b00      	cmp	r3, #0
 801189e:	d103      	bne.n	80118a8 <xQueueGiveFromISR+0x54>
 80118a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80118a2:	689b      	ldr	r3, [r3, #8]
 80118a4:	2b00      	cmp	r3, #0
 80118a6:	d101      	bne.n	80118ac <xQueueGiveFromISR+0x58>
 80118a8:	2301      	movs	r3, #1
 80118aa:	e000      	b.n	80118ae <xQueueGiveFromISR+0x5a>
 80118ac:	2300      	movs	r3, #0
 80118ae:	2b00      	cmp	r3, #0
 80118b0:	d109      	bne.n	80118c6 <xQueueGiveFromISR+0x72>
 80118b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80118b6:	f383 8811 	msr	BASEPRI, r3
 80118ba:	f3bf 8f6f 	isb	sy
 80118be:	f3bf 8f4f 	dsb	sy
 80118c2:	61bb      	str	r3, [r7, #24]
 80118c4:	e7fe      	b.n	80118c4 <xQueueGiveFromISR+0x70>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80118c6:	f7ff f915 	bl	8010af4 <vPortValidateInterruptPriority>
	__asm volatile
 80118ca:	f3ef 8211 	mrs	r2, BASEPRI
 80118ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80118d2:	f383 8811 	msr	BASEPRI, r3
 80118d6:	f3bf 8f6f 	isb	sy
 80118da:	f3bf 8f4f 	dsb	sy
 80118de:	617a      	str	r2, [r7, #20]
 80118e0:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 80118e2:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80118e4:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80118e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80118e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80118ea:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 80118ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80118ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80118f0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80118f2:	429a      	cmp	r2, r3
 80118f4:	d22b      	bcs.n	801194e <xQueueGiveFromISR+0xfa>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80118f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80118f8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80118fc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8011900:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011902:	1c5a      	adds	r2, r3, #1
 8011904:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011906:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8011908:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 801190c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8011910:	d112      	bne.n	8011938 <xQueueGiveFromISR+0xe4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8011912:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011914:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011916:	2b00      	cmp	r3, #0
 8011918:	d016      	beq.n	8011948 <xQueueGiveFromISR+0xf4>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801191a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801191c:	3324      	adds	r3, #36	; 0x24
 801191e:	4618      	mov	r0, r3
 8011920:	f001 f8de 	bl	8012ae0 <xTaskRemoveFromEventList>
 8011924:	4603      	mov	r3, r0
 8011926:	2b00      	cmp	r3, #0
 8011928:	d00e      	beq.n	8011948 <xQueueGiveFromISR+0xf4>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 801192a:	683b      	ldr	r3, [r7, #0]
 801192c:	2b00      	cmp	r3, #0
 801192e:	d00b      	beq.n	8011948 <xQueueGiveFromISR+0xf4>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8011930:	683b      	ldr	r3, [r7, #0]
 8011932:	2201      	movs	r2, #1
 8011934:	601a      	str	r2, [r3, #0]
 8011936:	e007      	b.n	8011948 <xQueueGiveFromISR+0xf4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8011938:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801193c:	3301      	adds	r3, #1
 801193e:	b2db      	uxtb	r3, r3
 8011940:	b25a      	sxtb	r2, r3
 8011942:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011944:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8011948:	2301      	movs	r3, #1
 801194a:	637b      	str	r3, [r7, #52]	; 0x34
 801194c:	e001      	b.n	8011952 <xQueueGiveFromISR+0xfe>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 801194e:	2300      	movs	r3, #0
 8011950:	637b      	str	r3, [r7, #52]	; 0x34
 8011952:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011954:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8011956:	68fb      	ldr	r3, [r7, #12]
 8011958:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 801195c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 801195e:	4618      	mov	r0, r3
 8011960:	3738      	adds	r7, #56	; 0x38
 8011962:	46bd      	mov	sp, r7
 8011964:	bd80      	pop	{r7, pc}
	...

08011968 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8011968:	b580      	push	{r7, lr}
 801196a:	b08c      	sub	sp, #48	; 0x30
 801196c:	af00      	add	r7, sp, #0
 801196e:	60f8      	str	r0, [r7, #12]
 8011970:	60b9      	str	r1, [r7, #8]
 8011972:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8011974:	2300      	movs	r3, #0
 8011976:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8011978:	68fb      	ldr	r3, [r7, #12]
 801197a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 801197c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801197e:	2b00      	cmp	r3, #0
 8011980:	d109      	bne.n	8011996 <xQueueReceive+0x2e>
	__asm volatile
 8011982:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011986:	f383 8811 	msr	BASEPRI, r3
 801198a:	f3bf 8f6f 	isb	sy
 801198e:	f3bf 8f4f 	dsb	sy
 8011992:	623b      	str	r3, [r7, #32]
 8011994:	e7fe      	b.n	8011994 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8011996:	68bb      	ldr	r3, [r7, #8]
 8011998:	2b00      	cmp	r3, #0
 801199a:	d103      	bne.n	80119a4 <xQueueReceive+0x3c>
 801199c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801199e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80119a0:	2b00      	cmp	r3, #0
 80119a2:	d101      	bne.n	80119a8 <xQueueReceive+0x40>
 80119a4:	2301      	movs	r3, #1
 80119a6:	e000      	b.n	80119aa <xQueueReceive+0x42>
 80119a8:	2300      	movs	r3, #0
 80119aa:	2b00      	cmp	r3, #0
 80119ac:	d109      	bne.n	80119c2 <xQueueReceive+0x5a>
 80119ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80119b2:	f383 8811 	msr	BASEPRI, r3
 80119b6:	f3bf 8f6f 	isb	sy
 80119ba:	f3bf 8f4f 	dsb	sy
 80119be:	61fb      	str	r3, [r7, #28]
 80119c0:	e7fe      	b.n	80119c0 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80119c2:	f001 fa7b 	bl	8012ebc <xTaskGetSchedulerState>
 80119c6:	4603      	mov	r3, r0
 80119c8:	2b00      	cmp	r3, #0
 80119ca:	d102      	bne.n	80119d2 <xQueueReceive+0x6a>
 80119cc:	687b      	ldr	r3, [r7, #4]
 80119ce:	2b00      	cmp	r3, #0
 80119d0:	d101      	bne.n	80119d6 <xQueueReceive+0x6e>
 80119d2:	2301      	movs	r3, #1
 80119d4:	e000      	b.n	80119d8 <xQueueReceive+0x70>
 80119d6:	2300      	movs	r3, #0
 80119d8:	2b00      	cmp	r3, #0
 80119da:	d109      	bne.n	80119f0 <xQueueReceive+0x88>
 80119dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80119e0:	f383 8811 	msr	BASEPRI, r3
 80119e4:	f3bf 8f6f 	isb	sy
 80119e8:	f3bf 8f4f 	dsb	sy
 80119ec:	61bb      	str	r3, [r7, #24]
 80119ee:	e7fe      	b.n	80119ee <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80119f0:	f7fe ffa4 	bl	801093c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80119f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80119f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80119f8:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80119fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80119fc:	2b00      	cmp	r3, #0
 80119fe:	d01f      	beq.n	8011a40 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8011a00:	68b9      	ldr	r1, [r7, #8]
 8011a02:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011a04:	f000 fab5 	bl	8011f72 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8011a08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011a0a:	1e5a      	subs	r2, r3, #1
 8011a0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011a0e:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8011a10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011a12:	691b      	ldr	r3, [r3, #16]
 8011a14:	2b00      	cmp	r3, #0
 8011a16:	d00f      	beq.n	8011a38 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8011a18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011a1a:	3310      	adds	r3, #16
 8011a1c:	4618      	mov	r0, r3
 8011a1e:	f001 f85f 	bl	8012ae0 <xTaskRemoveFromEventList>
 8011a22:	4603      	mov	r3, r0
 8011a24:	2b00      	cmp	r3, #0
 8011a26:	d007      	beq.n	8011a38 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8011a28:	4b3c      	ldr	r3, [pc, #240]	; (8011b1c <xQueueReceive+0x1b4>)
 8011a2a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011a2e:	601a      	str	r2, [r3, #0]
 8011a30:	f3bf 8f4f 	dsb	sy
 8011a34:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8011a38:	f7fe ffae 	bl	8010998 <vPortExitCritical>
				return pdPASS;
 8011a3c:	2301      	movs	r3, #1
 8011a3e:	e069      	b.n	8011b14 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8011a40:	687b      	ldr	r3, [r7, #4]
 8011a42:	2b00      	cmp	r3, #0
 8011a44:	d103      	bne.n	8011a4e <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8011a46:	f7fe ffa7 	bl	8010998 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8011a4a:	2300      	movs	r3, #0
 8011a4c:	e062      	b.n	8011b14 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 8011a4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011a50:	2b00      	cmp	r3, #0
 8011a52:	d106      	bne.n	8011a62 <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8011a54:	f107 0310 	add.w	r3, r7, #16
 8011a58:	4618      	mov	r0, r3
 8011a5a:	f001 f8a5 	bl	8012ba8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8011a5e:	2301      	movs	r3, #1
 8011a60:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8011a62:	f7fe ff99 	bl	8010998 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8011a66:	f000 fde7 	bl	8012638 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8011a6a:	f7fe ff67 	bl	801093c <vPortEnterCritical>
 8011a6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011a70:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8011a74:	b25b      	sxtb	r3, r3
 8011a76:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8011a7a:	d103      	bne.n	8011a84 <xQueueReceive+0x11c>
 8011a7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011a7e:	2200      	movs	r2, #0
 8011a80:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8011a84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011a86:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8011a8a:	b25b      	sxtb	r3, r3
 8011a8c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8011a90:	d103      	bne.n	8011a9a <xQueueReceive+0x132>
 8011a92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011a94:	2200      	movs	r2, #0
 8011a96:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8011a9a:	f7fe ff7d 	bl	8010998 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8011a9e:	1d3a      	adds	r2, r7, #4
 8011aa0:	f107 0310 	add.w	r3, r7, #16
 8011aa4:	4611      	mov	r1, r2
 8011aa6:	4618      	mov	r0, r3
 8011aa8:	f001 f894 	bl	8012bd4 <xTaskCheckForTimeOut>
 8011aac:	4603      	mov	r3, r0
 8011aae:	2b00      	cmp	r3, #0
 8011ab0:	d123      	bne.n	8011afa <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8011ab2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011ab4:	f000 fad5 	bl	8012062 <prvIsQueueEmpty>
 8011ab8:	4603      	mov	r3, r0
 8011aba:	2b00      	cmp	r3, #0
 8011abc:	d017      	beq.n	8011aee <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8011abe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011ac0:	3324      	adds	r3, #36	; 0x24
 8011ac2:	687a      	ldr	r2, [r7, #4]
 8011ac4:	4611      	mov	r1, r2
 8011ac6:	4618      	mov	r0, r3
 8011ac8:	f000 ffbc 	bl	8012a44 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8011acc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011ace:	f000 fa76 	bl	8011fbe <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8011ad2:	f000 fdf7 	bl	80126c4 <xTaskResumeAll>
 8011ad6:	4603      	mov	r3, r0
 8011ad8:	2b00      	cmp	r3, #0
 8011ada:	d189      	bne.n	80119f0 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 8011adc:	4b0f      	ldr	r3, [pc, #60]	; (8011b1c <xQueueReceive+0x1b4>)
 8011ade:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011ae2:	601a      	str	r2, [r3, #0]
 8011ae4:	f3bf 8f4f 	dsb	sy
 8011ae8:	f3bf 8f6f 	isb	sy
 8011aec:	e780      	b.n	80119f0 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8011aee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011af0:	f000 fa65 	bl	8011fbe <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8011af4:	f000 fde6 	bl	80126c4 <xTaskResumeAll>
 8011af8:	e77a      	b.n	80119f0 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8011afa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011afc:	f000 fa5f 	bl	8011fbe <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8011b00:	f000 fde0 	bl	80126c4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8011b04:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011b06:	f000 faac 	bl	8012062 <prvIsQueueEmpty>
 8011b0a:	4603      	mov	r3, r0
 8011b0c:	2b00      	cmp	r3, #0
 8011b0e:	f43f af6f 	beq.w	80119f0 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8011b12:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8011b14:	4618      	mov	r0, r3
 8011b16:	3730      	adds	r7, #48	; 0x30
 8011b18:	46bd      	mov	sp, r7
 8011b1a:	bd80      	pop	{r7, pc}
 8011b1c:	e000ed04 	.word	0xe000ed04

08011b20 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8011b20:	b580      	push	{r7, lr}
 8011b22:	b08e      	sub	sp, #56	; 0x38
 8011b24:	af00      	add	r7, sp, #0
 8011b26:	6078      	str	r0, [r7, #4]
 8011b28:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8011b2a:	2300      	movs	r3, #0
 8011b2c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8011b2e:	687b      	ldr	r3, [r7, #4]
 8011b30:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8011b32:	2300      	movs	r3, #0
 8011b34:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8011b36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011b38:	2b00      	cmp	r3, #0
 8011b3a:	d109      	bne.n	8011b50 <xQueueSemaphoreTake+0x30>
 8011b3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011b40:	f383 8811 	msr	BASEPRI, r3
 8011b44:	f3bf 8f6f 	isb	sy
 8011b48:	f3bf 8f4f 	dsb	sy
 8011b4c:	623b      	str	r3, [r7, #32]
 8011b4e:	e7fe      	b.n	8011b4e <xQueueSemaphoreTake+0x2e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8011b50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011b52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011b54:	2b00      	cmp	r3, #0
 8011b56:	d009      	beq.n	8011b6c <xQueueSemaphoreTake+0x4c>
 8011b58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011b5c:	f383 8811 	msr	BASEPRI, r3
 8011b60:	f3bf 8f6f 	isb	sy
 8011b64:	f3bf 8f4f 	dsb	sy
 8011b68:	61fb      	str	r3, [r7, #28]
 8011b6a:	e7fe      	b.n	8011b6a <xQueueSemaphoreTake+0x4a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8011b6c:	f001 f9a6 	bl	8012ebc <xTaskGetSchedulerState>
 8011b70:	4603      	mov	r3, r0
 8011b72:	2b00      	cmp	r3, #0
 8011b74:	d102      	bne.n	8011b7c <xQueueSemaphoreTake+0x5c>
 8011b76:	683b      	ldr	r3, [r7, #0]
 8011b78:	2b00      	cmp	r3, #0
 8011b7a:	d101      	bne.n	8011b80 <xQueueSemaphoreTake+0x60>
 8011b7c:	2301      	movs	r3, #1
 8011b7e:	e000      	b.n	8011b82 <xQueueSemaphoreTake+0x62>
 8011b80:	2300      	movs	r3, #0
 8011b82:	2b00      	cmp	r3, #0
 8011b84:	d109      	bne.n	8011b9a <xQueueSemaphoreTake+0x7a>
 8011b86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011b8a:	f383 8811 	msr	BASEPRI, r3
 8011b8e:	f3bf 8f6f 	isb	sy
 8011b92:	f3bf 8f4f 	dsb	sy
 8011b96:	61bb      	str	r3, [r7, #24]
 8011b98:	e7fe      	b.n	8011b98 <xQueueSemaphoreTake+0x78>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8011b9a:	f7fe fecf 	bl	801093c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8011b9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011ba0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011ba2:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8011ba4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011ba6:	2b00      	cmp	r3, #0
 8011ba8:	d024      	beq.n	8011bf4 <xQueueSemaphoreTake+0xd4>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8011baa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011bac:	1e5a      	subs	r2, r3, #1
 8011bae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011bb0:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8011bb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011bb4:	681b      	ldr	r3, [r3, #0]
 8011bb6:	2b00      	cmp	r3, #0
 8011bb8:	d104      	bne.n	8011bc4 <xQueueSemaphoreTake+0xa4>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8011bba:	f001 faf1 	bl	80131a0 <pvTaskIncrementMutexHeldCount>
 8011bbe:	4602      	mov	r2, r0
 8011bc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011bc2:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8011bc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011bc6:	691b      	ldr	r3, [r3, #16]
 8011bc8:	2b00      	cmp	r3, #0
 8011bca:	d00f      	beq.n	8011bec <xQueueSemaphoreTake+0xcc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8011bcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011bce:	3310      	adds	r3, #16
 8011bd0:	4618      	mov	r0, r3
 8011bd2:	f000 ff85 	bl	8012ae0 <xTaskRemoveFromEventList>
 8011bd6:	4603      	mov	r3, r0
 8011bd8:	2b00      	cmp	r3, #0
 8011bda:	d007      	beq.n	8011bec <xQueueSemaphoreTake+0xcc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8011bdc:	4b53      	ldr	r3, [pc, #332]	; (8011d2c <xQueueSemaphoreTake+0x20c>)
 8011bde:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011be2:	601a      	str	r2, [r3, #0]
 8011be4:	f3bf 8f4f 	dsb	sy
 8011be8:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8011bec:	f7fe fed4 	bl	8010998 <vPortExitCritical>
				return pdPASS;
 8011bf0:	2301      	movs	r3, #1
 8011bf2:	e096      	b.n	8011d22 <xQueueSemaphoreTake+0x202>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8011bf4:	683b      	ldr	r3, [r7, #0]
 8011bf6:	2b00      	cmp	r3, #0
 8011bf8:	d110      	bne.n	8011c1c <xQueueSemaphoreTake+0xfc>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8011bfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011bfc:	2b00      	cmp	r3, #0
 8011bfe:	d009      	beq.n	8011c14 <xQueueSemaphoreTake+0xf4>
 8011c00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011c04:	f383 8811 	msr	BASEPRI, r3
 8011c08:	f3bf 8f6f 	isb	sy
 8011c0c:	f3bf 8f4f 	dsb	sy
 8011c10:	617b      	str	r3, [r7, #20]
 8011c12:	e7fe      	b.n	8011c12 <xQueueSemaphoreTake+0xf2>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8011c14:	f7fe fec0 	bl	8010998 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8011c18:	2300      	movs	r3, #0
 8011c1a:	e082      	b.n	8011d22 <xQueueSemaphoreTake+0x202>
				}
				else if( xEntryTimeSet == pdFALSE )
 8011c1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011c1e:	2b00      	cmp	r3, #0
 8011c20:	d106      	bne.n	8011c30 <xQueueSemaphoreTake+0x110>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8011c22:	f107 030c 	add.w	r3, r7, #12
 8011c26:	4618      	mov	r0, r3
 8011c28:	f000 ffbe 	bl	8012ba8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8011c2c:	2301      	movs	r3, #1
 8011c2e:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8011c30:	f7fe feb2 	bl	8010998 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8011c34:	f000 fd00 	bl	8012638 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8011c38:	f7fe fe80 	bl	801093c <vPortEnterCritical>
 8011c3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011c3e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8011c42:	b25b      	sxtb	r3, r3
 8011c44:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8011c48:	d103      	bne.n	8011c52 <xQueueSemaphoreTake+0x132>
 8011c4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011c4c:	2200      	movs	r2, #0
 8011c4e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8011c52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011c54:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8011c58:	b25b      	sxtb	r3, r3
 8011c5a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8011c5e:	d103      	bne.n	8011c68 <xQueueSemaphoreTake+0x148>
 8011c60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011c62:	2200      	movs	r2, #0
 8011c64:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8011c68:	f7fe fe96 	bl	8010998 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8011c6c:	463a      	mov	r2, r7
 8011c6e:	f107 030c 	add.w	r3, r7, #12
 8011c72:	4611      	mov	r1, r2
 8011c74:	4618      	mov	r0, r3
 8011c76:	f000 ffad 	bl	8012bd4 <xTaskCheckForTimeOut>
 8011c7a:	4603      	mov	r3, r0
 8011c7c:	2b00      	cmp	r3, #0
 8011c7e:	d132      	bne.n	8011ce6 <xQueueSemaphoreTake+0x1c6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8011c80:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011c82:	f000 f9ee 	bl	8012062 <prvIsQueueEmpty>
 8011c86:	4603      	mov	r3, r0
 8011c88:	2b00      	cmp	r3, #0
 8011c8a:	d026      	beq.n	8011cda <xQueueSemaphoreTake+0x1ba>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8011c8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011c8e:	681b      	ldr	r3, [r3, #0]
 8011c90:	2b00      	cmp	r3, #0
 8011c92:	d109      	bne.n	8011ca8 <xQueueSemaphoreTake+0x188>
					{
						taskENTER_CRITICAL();
 8011c94:	f7fe fe52 	bl	801093c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8011c98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011c9a:	689b      	ldr	r3, [r3, #8]
 8011c9c:	4618      	mov	r0, r3
 8011c9e:	f001 f92b 	bl	8012ef8 <xTaskPriorityInherit>
 8011ca2:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8011ca4:	f7fe fe78 	bl	8010998 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8011ca8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011caa:	3324      	adds	r3, #36	; 0x24
 8011cac:	683a      	ldr	r2, [r7, #0]
 8011cae:	4611      	mov	r1, r2
 8011cb0:	4618      	mov	r0, r3
 8011cb2:	f000 fec7 	bl	8012a44 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8011cb6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011cb8:	f000 f981 	bl	8011fbe <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8011cbc:	f000 fd02 	bl	80126c4 <xTaskResumeAll>
 8011cc0:	4603      	mov	r3, r0
 8011cc2:	2b00      	cmp	r3, #0
 8011cc4:	f47f af69 	bne.w	8011b9a <xQueueSemaphoreTake+0x7a>
				{
					portYIELD_WITHIN_API();
 8011cc8:	4b18      	ldr	r3, [pc, #96]	; (8011d2c <xQueueSemaphoreTake+0x20c>)
 8011cca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011cce:	601a      	str	r2, [r3, #0]
 8011cd0:	f3bf 8f4f 	dsb	sy
 8011cd4:	f3bf 8f6f 	isb	sy
 8011cd8:	e75f      	b.n	8011b9a <xQueueSemaphoreTake+0x7a>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8011cda:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011cdc:	f000 f96f 	bl	8011fbe <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8011ce0:	f000 fcf0 	bl	80126c4 <xTaskResumeAll>
 8011ce4:	e759      	b.n	8011b9a <xQueueSemaphoreTake+0x7a>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8011ce6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011ce8:	f000 f969 	bl	8011fbe <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8011cec:	f000 fcea 	bl	80126c4 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8011cf0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011cf2:	f000 f9b6 	bl	8012062 <prvIsQueueEmpty>
 8011cf6:	4603      	mov	r3, r0
 8011cf8:	2b00      	cmp	r3, #0
 8011cfa:	f43f af4e 	beq.w	8011b9a <xQueueSemaphoreTake+0x7a>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8011cfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011d00:	2b00      	cmp	r3, #0
 8011d02:	d00d      	beq.n	8011d20 <xQueueSemaphoreTake+0x200>
					{
						taskENTER_CRITICAL();
 8011d04:	f7fe fe1a 	bl	801093c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8011d08:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011d0a:	f000 f8b0 	bl	8011e6e <prvGetDisinheritPriorityAfterTimeout>
 8011d0e:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8011d10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011d12:	689b      	ldr	r3, [r3, #8]
 8011d14:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8011d16:	4618      	mov	r0, r3
 8011d18:	f001 f9c2 	bl	80130a0 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8011d1c:	f7fe fe3c 	bl	8010998 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8011d20:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8011d22:	4618      	mov	r0, r3
 8011d24:	3738      	adds	r7, #56	; 0x38
 8011d26:	46bd      	mov	sp, r7
 8011d28:	bd80      	pop	{r7, pc}
 8011d2a:	bf00      	nop
 8011d2c:	e000ed04 	.word	0xe000ed04

08011d30 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8011d30:	b580      	push	{r7, lr}
 8011d32:	b08e      	sub	sp, #56	; 0x38
 8011d34:	af00      	add	r7, sp, #0
 8011d36:	60f8      	str	r0, [r7, #12]
 8011d38:	60b9      	str	r1, [r7, #8]
 8011d3a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8011d3c:	68fb      	ldr	r3, [r7, #12]
 8011d3e:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8011d40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011d42:	2b00      	cmp	r3, #0
 8011d44:	d109      	bne.n	8011d5a <xQueueReceiveFromISR+0x2a>
 8011d46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011d4a:	f383 8811 	msr	BASEPRI, r3
 8011d4e:	f3bf 8f6f 	isb	sy
 8011d52:	f3bf 8f4f 	dsb	sy
 8011d56:	623b      	str	r3, [r7, #32]
 8011d58:	e7fe      	b.n	8011d58 <xQueueReceiveFromISR+0x28>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8011d5a:	68bb      	ldr	r3, [r7, #8]
 8011d5c:	2b00      	cmp	r3, #0
 8011d5e:	d103      	bne.n	8011d68 <xQueueReceiveFromISR+0x38>
 8011d60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011d62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011d64:	2b00      	cmp	r3, #0
 8011d66:	d101      	bne.n	8011d6c <xQueueReceiveFromISR+0x3c>
 8011d68:	2301      	movs	r3, #1
 8011d6a:	e000      	b.n	8011d6e <xQueueReceiveFromISR+0x3e>
 8011d6c:	2300      	movs	r3, #0
 8011d6e:	2b00      	cmp	r3, #0
 8011d70:	d109      	bne.n	8011d86 <xQueueReceiveFromISR+0x56>
 8011d72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011d76:	f383 8811 	msr	BASEPRI, r3
 8011d7a:	f3bf 8f6f 	isb	sy
 8011d7e:	f3bf 8f4f 	dsb	sy
 8011d82:	61fb      	str	r3, [r7, #28]
 8011d84:	e7fe      	b.n	8011d84 <xQueueReceiveFromISR+0x54>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8011d86:	f7fe feb5 	bl	8010af4 <vPortValidateInterruptPriority>
	__asm volatile
 8011d8a:	f3ef 8211 	mrs	r2, BASEPRI
 8011d8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011d92:	f383 8811 	msr	BASEPRI, r3
 8011d96:	f3bf 8f6f 	isb	sy
 8011d9a:	f3bf 8f4f 	dsb	sy
 8011d9e:	61ba      	str	r2, [r7, #24]
 8011da0:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8011da2:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8011da4:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8011da6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011da8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011daa:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8011dac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011dae:	2b00      	cmp	r3, #0
 8011db0:	d02f      	beq.n	8011e12 <xQueueReceiveFromISR+0xe2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8011db2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011db4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8011db8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8011dbc:	68b9      	ldr	r1, [r7, #8]
 8011dbe:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011dc0:	f000 f8d7 	bl	8011f72 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8011dc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011dc6:	1e5a      	subs	r2, r3, #1
 8011dc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011dca:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8011dcc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8011dd0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8011dd4:	d112      	bne.n	8011dfc <xQueueReceiveFromISR+0xcc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8011dd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011dd8:	691b      	ldr	r3, [r3, #16]
 8011dda:	2b00      	cmp	r3, #0
 8011ddc:	d016      	beq.n	8011e0c <xQueueReceiveFromISR+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8011dde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011de0:	3310      	adds	r3, #16
 8011de2:	4618      	mov	r0, r3
 8011de4:	f000 fe7c 	bl	8012ae0 <xTaskRemoveFromEventList>
 8011de8:	4603      	mov	r3, r0
 8011dea:	2b00      	cmp	r3, #0
 8011dec:	d00e      	beq.n	8011e0c <xQueueReceiveFromISR+0xdc>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8011dee:	687b      	ldr	r3, [r7, #4]
 8011df0:	2b00      	cmp	r3, #0
 8011df2:	d00b      	beq.n	8011e0c <xQueueReceiveFromISR+0xdc>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8011df4:	687b      	ldr	r3, [r7, #4]
 8011df6:	2201      	movs	r2, #1
 8011df8:	601a      	str	r2, [r3, #0]
 8011dfa:	e007      	b.n	8011e0c <xQueueReceiveFromISR+0xdc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8011dfc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011e00:	3301      	adds	r3, #1
 8011e02:	b2db      	uxtb	r3, r3
 8011e04:	b25a      	sxtb	r2, r3
 8011e06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011e08:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8011e0c:	2301      	movs	r3, #1
 8011e0e:	637b      	str	r3, [r7, #52]	; 0x34
 8011e10:	e001      	b.n	8011e16 <xQueueReceiveFromISR+0xe6>
		}
		else
		{
			xReturn = pdFAIL;
 8011e12:	2300      	movs	r3, #0
 8011e14:	637b      	str	r3, [r7, #52]	; 0x34
 8011e16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011e18:	613b      	str	r3, [r7, #16]
	__asm volatile
 8011e1a:	693b      	ldr	r3, [r7, #16]
 8011e1c:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8011e20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8011e22:	4618      	mov	r0, r3
 8011e24:	3738      	adds	r7, #56	; 0x38
 8011e26:	46bd      	mov	sp, r7
 8011e28:	bd80      	pop	{r7, pc}

08011e2a <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8011e2a:	b580      	push	{r7, lr}
 8011e2c:	b084      	sub	sp, #16
 8011e2e:	af00      	add	r7, sp, #0
 8011e30:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8011e32:	687b      	ldr	r3, [r7, #4]
 8011e34:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8011e36:	68fb      	ldr	r3, [r7, #12]
 8011e38:	2b00      	cmp	r3, #0
 8011e3a:	d109      	bne.n	8011e50 <vQueueDelete+0x26>
	__asm volatile
 8011e3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011e40:	f383 8811 	msr	BASEPRI, r3
 8011e44:	f3bf 8f6f 	isb	sy
 8011e48:	f3bf 8f4f 	dsb	sy
 8011e4c:	60bb      	str	r3, [r7, #8]
 8011e4e:	e7fe      	b.n	8011e4e <vQueueDelete+0x24>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8011e50:	68f8      	ldr	r0, [r7, #12]
 8011e52:	f000 f95d 	bl	8012110 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8011e56:	68fb      	ldr	r3, [r7, #12]
 8011e58:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8011e5c:	2b00      	cmp	r3, #0
 8011e5e:	d102      	bne.n	8011e66 <vQueueDelete+0x3c>
		{
			vPortFree( pxQueue );
 8011e60:	68f8      	ldr	r0, [r7, #12]
 8011e62:	f7fe ff47 	bl	8010cf4 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8011e66:	bf00      	nop
 8011e68:	3710      	adds	r7, #16
 8011e6a:	46bd      	mov	sp, r7
 8011e6c:	bd80      	pop	{r7, pc}

08011e6e <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8011e6e:	b480      	push	{r7}
 8011e70:	b085      	sub	sp, #20
 8011e72:	af00      	add	r7, sp, #0
 8011e74:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8011e76:	687b      	ldr	r3, [r7, #4]
 8011e78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011e7a:	2b00      	cmp	r3, #0
 8011e7c:	d006      	beq.n	8011e8c <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8011e7e:	687b      	ldr	r3, [r7, #4]
 8011e80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011e82:	681b      	ldr	r3, [r3, #0]
 8011e84:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8011e88:	60fb      	str	r3, [r7, #12]
 8011e8a:	e001      	b.n	8011e90 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8011e8c:	2300      	movs	r3, #0
 8011e8e:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8011e90:	68fb      	ldr	r3, [r7, #12]
	}
 8011e92:	4618      	mov	r0, r3
 8011e94:	3714      	adds	r7, #20
 8011e96:	46bd      	mov	sp, r7
 8011e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e9c:	4770      	bx	lr

08011e9e <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8011e9e:	b580      	push	{r7, lr}
 8011ea0:	b086      	sub	sp, #24
 8011ea2:	af00      	add	r7, sp, #0
 8011ea4:	60f8      	str	r0, [r7, #12]
 8011ea6:	60b9      	str	r1, [r7, #8]
 8011ea8:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8011eaa:	2300      	movs	r3, #0
 8011eac:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8011eae:	68fb      	ldr	r3, [r7, #12]
 8011eb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011eb2:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8011eb4:	68fb      	ldr	r3, [r7, #12]
 8011eb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011eb8:	2b00      	cmp	r3, #0
 8011eba:	d10d      	bne.n	8011ed8 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8011ebc:	68fb      	ldr	r3, [r7, #12]
 8011ebe:	681b      	ldr	r3, [r3, #0]
 8011ec0:	2b00      	cmp	r3, #0
 8011ec2:	d14d      	bne.n	8011f60 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8011ec4:	68fb      	ldr	r3, [r7, #12]
 8011ec6:	689b      	ldr	r3, [r3, #8]
 8011ec8:	4618      	mov	r0, r3
 8011eca:	f001 f87d 	bl	8012fc8 <xTaskPriorityDisinherit>
 8011ece:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8011ed0:	68fb      	ldr	r3, [r7, #12]
 8011ed2:	2200      	movs	r2, #0
 8011ed4:	609a      	str	r2, [r3, #8]
 8011ed6:	e043      	b.n	8011f60 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8011ed8:	687b      	ldr	r3, [r7, #4]
 8011eda:	2b00      	cmp	r3, #0
 8011edc:	d119      	bne.n	8011f12 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8011ede:	68fb      	ldr	r3, [r7, #12]
 8011ee0:	6858      	ldr	r0, [r3, #4]
 8011ee2:	68fb      	ldr	r3, [r7, #12]
 8011ee4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011ee6:	461a      	mov	r2, r3
 8011ee8:	68b9      	ldr	r1, [r7, #8]
 8011eea:	f001 ffc7 	bl	8013e7c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8011eee:	68fb      	ldr	r3, [r7, #12]
 8011ef0:	685a      	ldr	r2, [r3, #4]
 8011ef2:	68fb      	ldr	r3, [r7, #12]
 8011ef4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011ef6:	441a      	add	r2, r3
 8011ef8:	68fb      	ldr	r3, [r7, #12]
 8011efa:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8011efc:	68fb      	ldr	r3, [r7, #12]
 8011efe:	685a      	ldr	r2, [r3, #4]
 8011f00:	68fb      	ldr	r3, [r7, #12]
 8011f02:	689b      	ldr	r3, [r3, #8]
 8011f04:	429a      	cmp	r2, r3
 8011f06:	d32b      	bcc.n	8011f60 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8011f08:	68fb      	ldr	r3, [r7, #12]
 8011f0a:	681a      	ldr	r2, [r3, #0]
 8011f0c:	68fb      	ldr	r3, [r7, #12]
 8011f0e:	605a      	str	r2, [r3, #4]
 8011f10:	e026      	b.n	8011f60 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8011f12:	68fb      	ldr	r3, [r7, #12]
 8011f14:	68d8      	ldr	r0, [r3, #12]
 8011f16:	68fb      	ldr	r3, [r7, #12]
 8011f18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011f1a:	461a      	mov	r2, r3
 8011f1c:	68b9      	ldr	r1, [r7, #8]
 8011f1e:	f001 ffad 	bl	8013e7c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8011f22:	68fb      	ldr	r3, [r7, #12]
 8011f24:	68da      	ldr	r2, [r3, #12]
 8011f26:	68fb      	ldr	r3, [r7, #12]
 8011f28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011f2a:	425b      	negs	r3, r3
 8011f2c:	441a      	add	r2, r3
 8011f2e:	68fb      	ldr	r3, [r7, #12]
 8011f30:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8011f32:	68fb      	ldr	r3, [r7, #12]
 8011f34:	68da      	ldr	r2, [r3, #12]
 8011f36:	68fb      	ldr	r3, [r7, #12]
 8011f38:	681b      	ldr	r3, [r3, #0]
 8011f3a:	429a      	cmp	r2, r3
 8011f3c:	d207      	bcs.n	8011f4e <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8011f3e:	68fb      	ldr	r3, [r7, #12]
 8011f40:	689a      	ldr	r2, [r3, #8]
 8011f42:	68fb      	ldr	r3, [r7, #12]
 8011f44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011f46:	425b      	negs	r3, r3
 8011f48:	441a      	add	r2, r3
 8011f4a:	68fb      	ldr	r3, [r7, #12]
 8011f4c:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8011f4e:	687b      	ldr	r3, [r7, #4]
 8011f50:	2b02      	cmp	r3, #2
 8011f52:	d105      	bne.n	8011f60 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8011f54:	693b      	ldr	r3, [r7, #16]
 8011f56:	2b00      	cmp	r3, #0
 8011f58:	d002      	beq.n	8011f60 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8011f5a:	693b      	ldr	r3, [r7, #16]
 8011f5c:	3b01      	subs	r3, #1
 8011f5e:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8011f60:	693b      	ldr	r3, [r7, #16]
 8011f62:	1c5a      	adds	r2, r3, #1
 8011f64:	68fb      	ldr	r3, [r7, #12]
 8011f66:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8011f68:	697b      	ldr	r3, [r7, #20]
}
 8011f6a:	4618      	mov	r0, r3
 8011f6c:	3718      	adds	r7, #24
 8011f6e:	46bd      	mov	sp, r7
 8011f70:	bd80      	pop	{r7, pc}

08011f72 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8011f72:	b580      	push	{r7, lr}
 8011f74:	b082      	sub	sp, #8
 8011f76:	af00      	add	r7, sp, #0
 8011f78:	6078      	str	r0, [r7, #4]
 8011f7a:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8011f7c:	687b      	ldr	r3, [r7, #4]
 8011f7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011f80:	2b00      	cmp	r3, #0
 8011f82:	d018      	beq.n	8011fb6 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8011f84:	687b      	ldr	r3, [r7, #4]
 8011f86:	68da      	ldr	r2, [r3, #12]
 8011f88:	687b      	ldr	r3, [r7, #4]
 8011f8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011f8c:	441a      	add	r2, r3
 8011f8e:	687b      	ldr	r3, [r7, #4]
 8011f90:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8011f92:	687b      	ldr	r3, [r7, #4]
 8011f94:	68da      	ldr	r2, [r3, #12]
 8011f96:	687b      	ldr	r3, [r7, #4]
 8011f98:	689b      	ldr	r3, [r3, #8]
 8011f9a:	429a      	cmp	r2, r3
 8011f9c:	d303      	bcc.n	8011fa6 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8011f9e:	687b      	ldr	r3, [r7, #4]
 8011fa0:	681a      	ldr	r2, [r3, #0]
 8011fa2:	687b      	ldr	r3, [r7, #4]
 8011fa4:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8011fa6:	687b      	ldr	r3, [r7, #4]
 8011fa8:	68d9      	ldr	r1, [r3, #12]
 8011faa:	687b      	ldr	r3, [r7, #4]
 8011fac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011fae:	461a      	mov	r2, r3
 8011fb0:	6838      	ldr	r0, [r7, #0]
 8011fb2:	f001 ff63 	bl	8013e7c <memcpy>
	}
}
 8011fb6:	bf00      	nop
 8011fb8:	3708      	adds	r7, #8
 8011fba:	46bd      	mov	sp, r7
 8011fbc:	bd80      	pop	{r7, pc}

08011fbe <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8011fbe:	b580      	push	{r7, lr}
 8011fc0:	b084      	sub	sp, #16
 8011fc2:	af00      	add	r7, sp, #0
 8011fc4:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8011fc6:	f7fe fcb9 	bl	801093c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8011fca:	687b      	ldr	r3, [r7, #4]
 8011fcc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8011fd0:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8011fd2:	e011      	b.n	8011ff8 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8011fd4:	687b      	ldr	r3, [r7, #4]
 8011fd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011fd8:	2b00      	cmp	r3, #0
 8011fda:	d012      	beq.n	8012002 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8011fdc:	687b      	ldr	r3, [r7, #4]
 8011fde:	3324      	adds	r3, #36	; 0x24
 8011fe0:	4618      	mov	r0, r3
 8011fe2:	f000 fd7d 	bl	8012ae0 <xTaskRemoveFromEventList>
 8011fe6:	4603      	mov	r3, r0
 8011fe8:	2b00      	cmp	r3, #0
 8011fea:	d001      	beq.n	8011ff0 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8011fec:	f000 fe52 	bl	8012c94 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8011ff0:	7bfb      	ldrb	r3, [r7, #15]
 8011ff2:	3b01      	subs	r3, #1
 8011ff4:	b2db      	uxtb	r3, r3
 8011ff6:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8011ff8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011ffc:	2b00      	cmp	r3, #0
 8011ffe:	dce9      	bgt.n	8011fd4 <prvUnlockQueue+0x16>
 8012000:	e000      	b.n	8012004 <prvUnlockQueue+0x46>
					break;
 8012002:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8012004:	687b      	ldr	r3, [r7, #4]
 8012006:	22ff      	movs	r2, #255	; 0xff
 8012008:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 801200c:	f7fe fcc4 	bl	8010998 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8012010:	f7fe fc94 	bl	801093c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8012014:	687b      	ldr	r3, [r7, #4]
 8012016:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801201a:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 801201c:	e011      	b.n	8012042 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801201e:	687b      	ldr	r3, [r7, #4]
 8012020:	691b      	ldr	r3, [r3, #16]
 8012022:	2b00      	cmp	r3, #0
 8012024:	d012      	beq.n	801204c <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8012026:	687b      	ldr	r3, [r7, #4]
 8012028:	3310      	adds	r3, #16
 801202a:	4618      	mov	r0, r3
 801202c:	f000 fd58 	bl	8012ae0 <xTaskRemoveFromEventList>
 8012030:	4603      	mov	r3, r0
 8012032:	2b00      	cmp	r3, #0
 8012034:	d001      	beq.n	801203a <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8012036:	f000 fe2d 	bl	8012c94 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 801203a:	7bbb      	ldrb	r3, [r7, #14]
 801203c:	3b01      	subs	r3, #1
 801203e:	b2db      	uxtb	r3, r3
 8012040:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8012042:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8012046:	2b00      	cmp	r3, #0
 8012048:	dce9      	bgt.n	801201e <prvUnlockQueue+0x60>
 801204a:	e000      	b.n	801204e <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 801204c:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 801204e:	687b      	ldr	r3, [r7, #4]
 8012050:	22ff      	movs	r2, #255	; 0xff
 8012052:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8012056:	f7fe fc9f 	bl	8010998 <vPortExitCritical>
}
 801205a:	bf00      	nop
 801205c:	3710      	adds	r7, #16
 801205e:	46bd      	mov	sp, r7
 8012060:	bd80      	pop	{r7, pc}

08012062 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8012062:	b580      	push	{r7, lr}
 8012064:	b084      	sub	sp, #16
 8012066:	af00      	add	r7, sp, #0
 8012068:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 801206a:	f7fe fc67 	bl	801093c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 801206e:	687b      	ldr	r3, [r7, #4]
 8012070:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012072:	2b00      	cmp	r3, #0
 8012074:	d102      	bne.n	801207c <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8012076:	2301      	movs	r3, #1
 8012078:	60fb      	str	r3, [r7, #12]
 801207a:	e001      	b.n	8012080 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 801207c:	2300      	movs	r3, #0
 801207e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8012080:	f7fe fc8a 	bl	8010998 <vPortExitCritical>

	return xReturn;
 8012084:	68fb      	ldr	r3, [r7, #12]
}
 8012086:	4618      	mov	r0, r3
 8012088:	3710      	adds	r7, #16
 801208a:	46bd      	mov	sp, r7
 801208c:	bd80      	pop	{r7, pc}

0801208e <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 801208e:	b580      	push	{r7, lr}
 8012090:	b084      	sub	sp, #16
 8012092:	af00      	add	r7, sp, #0
 8012094:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8012096:	f7fe fc51 	bl	801093c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 801209a:	687b      	ldr	r3, [r7, #4]
 801209c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801209e:	687b      	ldr	r3, [r7, #4]
 80120a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80120a2:	429a      	cmp	r2, r3
 80120a4:	d102      	bne.n	80120ac <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80120a6:	2301      	movs	r3, #1
 80120a8:	60fb      	str	r3, [r7, #12]
 80120aa:	e001      	b.n	80120b0 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80120ac:	2300      	movs	r3, #0
 80120ae:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80120b0:	f7fe fc72 	bl	8010998 <vPortExitCritical>

	return xReturn;
 80120b4:	68fb      	ldr	r3, [r7, #12]
}
 80120b6:	4618      	mov	r0, r3
 80120b8:	3710      	adds	r7, #16
 80120ba:	46bd      	mov	sp, r7
 80120bc:	bd80      	pop	{r7, pc}
	...

080120c0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80120c0:	b480      	push	{r7}
 80120c2:	b085      	sub	sp, #20
 80120c4:	af00      	add	r7, sp, #0
 80120c6:	6078      	str	r0, [r7, #4]
 80120c8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80120ca:	2300      	movs	r3, #0
 80120cc:	60fb      	str	r3, [r7, #12]
 80120ce:	e014      	b.n	80120fa <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80120d0:	4a0e      	ldr	r2, [pc, #56]	; (801210c <vQueueAddToRegistry+0x4c>)
 80120d2:	68fb      	ldr	r3, [r7, #12]
 80120d4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80120d8:	2b00      	cmp	r3, #0
 80120da:	d10b      	bne.n	80120f4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80120dc:	490b      	ldr	r1, [pc, #44]	; (801210c <vQueueAddToRegistry+0x4c>)
 80120de:	68fb      	ldr	r3, [r7, #12]
 80120e0:	683a      	ldr	r2, [r7, #0]
 80120e2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80120e6:	4a09      	ldr	r2, [pc, #36]	; (801210c <vQueueAddToRegistry+0x4c>)
 80120e8:	68fb      	ldr	r3, [r7, #12]
 80120ea:	00db      	lsls	r3, r3, #3
 80120ec:	4413      	add	r3, r2
 80120ee:	687a      	ldr	r2, [r7, #4]
 80120f0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80120f2:	e005      	b.n	8012100 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80120f4:	68fb      	ldr	r3, [r7, #12]
 80120f6:	3301      	adds	r3, #1
 80120f8:	60fb      	str	r3, [r7, #12]
 80120fa:	68fb      	ldr	r3, [r7, #12]
 80120fc:	2b07      	cmp	r3, #7
 80120fe:	d9e7      	bls.n	80120d0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8012100:	bf00      	nop
 8012102:	3714      	adds	r7, #20
 8012104:	46bd      	mov	sp, r7
 8012106:	f85d 7b04 	ldr.w	r7, [sp], #4
 801210a:	4770      	bx	lr
 801210c:	2002e3c8 	.word	0x2002e3c8

08012110 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8012110:	b480      	push	{r7}
 8012112:	b085      	sub	sp, #20
 8012114:	af00      	add	r7, sp, #0
 8012116:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8012118:	2300      	movs	r3, #0
 801211a:	60fb      	str	r3, [r7, #12]
 801211c:	e016      	b.n	801214c <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 801211e:	4a10      	ldr	r2, [pc, #64]	; (8012160 <vQueueUnregisterQueue+0x50>)
 8012120:	68fb      	ldr	r3, [r7, #12]
 8012122:	00db      	lsls	r3, r3, #3
 8012124:	4413      	add	r3, r2
 8012126:	685b      	ldr	r3, [r3, #4]
 8012128:	687a      	ldr	r2, [r7, #4]
 801212a:	429a      	cmp	r2, r3
 801212c:	d10b      	bne.n	8012146 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 801212e:	4a0c      	ldr	r2, [pc, #48]	; (8012160 <vQueueUnregisterQueue+0x50>)
 8012130:	68fb      	ldr	r3, [r7, #12]
 8012132:	2100      	movs	r1, #0
 8012134:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8012138:	4a09      	ldr	r2, [pc, #36]	; (8012160 <vQueueUnregisterQueue+0x50>)
 801213a:	68fb      	ldr	r3, [r7, #12]
 801213c:	00db      	lsls	r3, r3, #3
 801213e:	4413      	add	r3, r2
 8012140:	2200      	movs	r2, #0
 8012142:	605a      	str	r2, [r3, #4]
				break;
 8012144:	e005      	b.n	8012152 <vQueueUnregisterQueue+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8012146:	68fb      	ldr	r3, [r7, #12]
 8012148:	3301      	adds	r3, #1
 801214a:	60fb      	str	r3, [r7, #12]
 801214c:	68fb      	ldr	r3, [r7, #12]
 801214e:	2b07      	cmp	r3, #7
 8012150:	d9e5      	bls.n	801211e <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8012152:	bf00      	nop
 8012154:	3714      	adds	r7, #20
 8012156:	46bd      	mov	sp, r7
 8012158:	f85d 7b04 	ldr.w	r7, [sp], #4
 801215c:	4770      	bx	lr
 801215e:	bf00      	nop
 8012160:	2002e3c8 	.word	0x2002e3c8

08012164 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8012164:	b580      	push	{r7, lr}
 8012166:	b086      	sub	sp, #24
 8012168:	af00      	add	r7, sp, #0
 801216a:	60f8      	str	r0, [r7, #12]
 801216c:	60b9      	str	r1, [r7, #8]
 801216e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8012170:	68fb      	ldr	r3, [r7, #12]
 8012172:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8012174:	f7fe fbe2 	bl	801093c <vPortEnterCritical>
 8012178:	697b      	ldr	r3, [r7, #20]
 801217a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801217e:	b25b      	sxtb	r3, r3
 8012180:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8012184:	d103      	bne.n	801218e <vQueueWaitForMessageRestricted+0x2a>
 8012186:	697b      	ldr	r3, [r7, #20]
 8012188:	2200      	movs	r2, #0
 801218a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801218e:	697b      	ldr	r3, [r7, #20]
 8012190:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8012194:	b25b      	sxtb	r3, r3
 8012196:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801219a:	d103      	bne.n	80121a4 <vQueueWaitForMessageRestricted+0x40>
 801219c:	697b      	ldr	r3, [r7, #20]
 801219e:	2200      	movs	r2, #0
 80121a0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80121a4:	f7fe fbf8 	bl	8010998 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80121a8:	697b      	ldr	r3, [r7, #20]
 80121aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80121ac:	2b00      	cmp	r3, #0
 80121ae:	d106      	bne.n	80121be <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80121b0:	697b      	ldr	r3, [r7, #20]
 80121b2:	3324      	adds	r3, #36	; 0x24
 80121b4:	687a      	ldr	r2, [r7, #4]
 80121b6:	68b9      	ldr	r1, [r7, #8]
 80121b8:	4618      	mov	r0, r3
 80121ba:	f000 fc67 	bl	8012a8c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80121be:	6978      	ldr	r0, [r7, #20]
 80121c0:	f7ff fefd 	bl	8011fbe <prvUnlockQueue>
	}
 80121c4:	bf00      	nop
 80121c6:	3718      	adds	r7, #24
 80121c8:	46bd      	mov	sp, r7
 80121ca:	bd80      	pop	{r7, pc}

080121cc <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80121cc:	b580      	push	{r7, lr}
 80121ce:	b08e      	sub	sp, #56	; 0x38
 80121d0:	af04      	add	r7, sp, #16
 80121d2:	60f8      	str	r0, [r7, #12]
 80121d4:	60b9      	str	r1, [r7, #8]
 80121d6:	607a      	str	r2, [r7, #4]
 80121d8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80121da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80121dc:	2b00      	cmp	r3, #0
 80121de:	d109      	bne.n	80121f4 <xTaskCreateStatic+0x28>
 80121e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80121e4:	f383 8811 	msr	BASEPRI, r3
 80121e8:	f3bf 8f6f 	isb	sy
 80121ec:	f3bf 8f4f 	dsb	sy
 80121f0:	623b      	str	r3, [r7, #32]
 80121f2:	e7fe      	b.n	80121f2 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 80121f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80121f6:	2b00      	cmp	r3, #0
 80121f8:	d109      	bne.n	801220e <xTaskCreateStatic+0x42>
 80121fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80121fe:	f383 8811 	msr	BASEPRI, r3
 8012202:	f3bf 8f6f 	isb	sy
 8012206:	f3bf 8f4f 	dsb	sy
 801220a:	61fb      	str	r3, [r7, #28]
 801220c:	e7fe      	b.n	801220c <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 801220e:	235c      	movs	r3, #92	; 0x5c
 8012210:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8012212:	693b      	ldr	r3, [r7, #16]
 8012214:	2b5c      	cmp	r3, #92	; 0x5c
 8012216:	d009      	beq.n	801222c <xTaskCreateStatic+0x60>
 8012218:	f04f 0350 	mov.w	r3, #80	; 0x50
 801221c:	f383 8811 	msr	BASEPRI, r3
 8012220:	f3bf 8f6f 	isb	sy
 8012224:	f3bf 8f4f 	dsb	sy
 8012228:	61bb      	str	r3, [r7, #24]
 801222a:	e7fe      	b.n	801222a <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 801222c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 801222e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012230:	2b00      	cmp	r3, #0
 8012232:	d01e      	beq.n	8012272 <xTaskCreateStatic+0xa6>
 8012234:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012236:	2b00      	cmp	r3, #0
 8012238:	d01b      	beq.n	8012272 <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 801223a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801223c:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 801223e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012240:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8012242:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8012244:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012246:	2202      	movs	r2, #2
 8012248:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 801224c:	2300      	movs	r3, #0
 801224e:	9303      	str	r3, [sp, #12]
 8012250:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012252:	9302      	str	r3, [sp, #8]
 8012254:	f107 0314 	add.w	r3, r7, #20
 8012258:	9301      	str	r3, [sp, #4]
 801225a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801225c:	9300      	str	r3, [sp, #0]
 801225e:	683b      	ldr	r3, [r7, #0]
 8012260:	687a      	ldr	r2, [r7, #4]
 8012262:	68b9      	ldr	r1, [r7, #8]
 8012264:	68f8      	ldr	r0, [r7, #12]
 8012266:	f000 f850 	bl	801230a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 801226a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801226c:	f000 f8dc 	bl	8012428 <prvAddNewTaskToReadyList>
 8012270:	e001      	b.n	8012276 <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 8012272:	2300      	movs	r3, #0
 8012274:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8012276:	697b      	ldr	r3, [r7, #20]
	}
 8012278:	4618      	mov	r0, r3
 801227a:	3728      	adds	r7, #40	; 0x28
 801227c:	46bd      	mov	sp, r7
 801227e:	bd80      	pop	{r7, pc}

08012280 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8012280:	b580      	push	{r7, lr}
 8012282:	b08c      	sub	sp, #48	; 0x30
 8012284:	af04      	add	r7, sp, #16
 8012286:	60f8      	str	r0, [r7, #12]
 8012288:	60b9      	str	r1, [r7, #8]
 801228a:	603b      	str	r3, [r7, #0]
 801228c:	4613      	mov	r3, r2
 801228e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8012290:	88fb      	ldrh	r3, [r7, #6]
 8012292:	009b      	lsls	r3, r3, #2
 8012294:	4618      	mov	r0, r3
 8012296:	f7fe fc6b 	bl	8010b70 <pvPortMalloc>
 801229a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 801229c:	697b      	ldr	r3, [r7, #20]
 801229e:	2b00      	cmp	r3, #0
 80122a0:	d00e      	beq.n	80122c0 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80122a2:	205c      	movs	r0, #92	; 0x5c
 80122a4:	f7fe fc64 	bl	8010b70 <pvPortMalloc>
 80122a8:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80122aa:	69fb      	ldr	r3, [r7, #28]
 80122ac:	2b00      	cmp	r3, #0
 80122ae:	d003      	beq.n	80122b8 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80122b0:	69fb      	ldr	r3, [r7, #28]
 80122b2:	697a      	ldr	r2, [r7, #20]
 80122b4:	631a      	str	r2, [r3, #48]	; 0x30
 80122b6:	e005      	b.n	80122c4 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80122b8:	6978      	ldr	r0, [r7, #20]
 80122ba:	f7fe fd1b 	bl	8010cf4 <vPortFree>
 80122be:	e001      	b.n	80122c4 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80122c0:	2300      	movs	r3, #0
 80122c2:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80122c4:	69fb      	ldr	r3, [r7, #28]
 80122c6:	2b00      	cmp	r3, #0
 80122c8:	d017      	beq.n	80122fa <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80122ca:	69fb      	ldr	r3, [r7, #28]
 80122cc:	2200      	movs	r2, #0
 80122ce:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80122d2:	88fa      	ldrh	r2, [r7, #6]
 80122d4:	2300      	movs	r3, #0
 80122d6:	9303      	str	r3, [sp, #12]
 80122d8:	69fb      	ldr	r3, [r7, #28]
 80122da:	9302      	str	r3, [sp, #8]
 80122dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80122de:	9301      	str	r3, [sp, #4]
 80122e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80122e2:	9300      	str	r3, [sp, #0]
 80122e4:	683b      	ldr	r3, [r7, #0]
 80122e6:	68b9      	ldr	r1, [r7, #8]
 80122e8:	68f8      	ldr	r0, [r7, #12]
 80122ea:	f000 f80e 	bl	801230a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80122ee:	69f8      	ldr	r0, [r7, #28]
 80122f0:	f000 f89a 	bl	8012428 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80122f4:	2301      	movs	r3, #1
 80122f6:	61bb      	str	r3, [r7, #24]
 80122f8:	e002      	b.n	8012300 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80122fa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80122fe:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8012300:	69bb      	ldr	r3, [r7, #24]
	}
 8012302:	4618      	mov	r0, r3
 8012304:	3720      	adds	r7, #32
 8012306:	46bd      	mov	sp, r7
 8012308:	bd80      	pop	{r7, pc}

0801230a <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 801230a:	b580      	push	{r7, lr}
 801230c:	b088      	sub	sp, #32
 801230e:	af00      	add	r7, sp, #0
 8012310:	60f8      	str	r0, [r7, #12]
 8012312:	60b9      	str	r1, [r7, #8]
 8012314:	607a      	str	r2, [r7, #4]
 8012316:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8012318:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801231a:	6b18      	ldr	r0, [r3, #48]	; 0x30
 801231c:	687b      	ldr	r3, [r7, #4]
 801231e:	009b      	lsls	r3, r3, #2
 8012320:	461a      	mov	r2, r3
 8012322:	21a5      	movs	r1, #165	; 0xa5
 8012324:	f001 fdb5 	bl	8013e92 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8012328:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801232a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801232c:	687b      	ldr	r3, [r7, #4]
 801232e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8012332:	3b01      	subs	r3, #1
 8012334:	009b      	lsls	r3, r3, #2
 8012336:	4413      	add	r3, r2
 8012338:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 801233a:	69bb      	ldr	r3, [r7, #24]
 801233c:	f023 0307 	bic.w	r3, r3, #7
 8012340:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8012342:	69bb      	ldr	r3, [r7, #24]
 8012344:	f003 0307 	and.w	r3, r3, #7
 8012348:	2b00      	cmp	r3, #0
 801234a:	d009      	beq.n	8012360 <prvInitialiseNewTask+0x56>
 801234c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012350:	f383 8811 	msr	BASEPRI, r3
 8012354:	f3bf 8f6f 	isb	sy
 8012358:	f3bf 8f4f 	dsb	sy
 801235c:	617b      	str	r3, [r7, #20]
 801235e:	e7fe      	b.n	801235e <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8012360:	68bb      	ldr	r3, [r7, #8]
 8012362:	2b00      	cmp	r3, #0
 8012364:	d01f      	beq.n	80123a6 <prvInitialiseNewTask+0x9c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8012366:	2300      	movs	r3, #0
 8012368:	61fb      	str	r3, [r7, #28]
 801236a:	e012      	b.n	8012392 <prvInitialiseNewTask+0x88>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 801236c:	68ba      	ldr	r2, [r7, #8]
 801236e:	69fb      	ldr	r3, [r7, #28]
 8012370:	4413      	add	r3, r2
 8012372:	7819      	ldrb	r1, [r3, #0]
 8012374:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012376:	69fb      	ldr	r3, [r7, #28]
 8012378:	4413      	add	r3, r2
 801237a:	3334      	adds	r3, #52	; 0x34
 801237c:	460a      	mov	r2, r1
 801237e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8012380:	68ba      	ldr	r2, [r7, #8]
 8012382:	69fb      	ldr	r3, [r7, #28]
 8012384:	4413      	add	r3, r2
 8012386:	781b      	ldrb	r3, [r3, #0]
 8012388:	2b00      	cmp	r3, #0
 801238a:	d006      	beq.n	801239a <prvInitialiseNewTask+0x90>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 801238c:	69fb      	ldr	r3, [r7, #28]
 801238e:	3301      	adds	r3, #1
 8012390:	61fb      	str	r3, [r7, #28]
 8012392:	69fb      	ldr	r3, [r7, #28]
 8012394:	2b0f      	cmp	r3, #15
 8012396:	d9e9      	bls.n	801236c <prvInitialiseNewTask+0x62>
 8012398:	e000      	b.n	801239c <prvInitialiseNewTask+0x92>
			{
				break;
 801239a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 801239c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801239e:	2200      	movs	r2, #0
 80123a0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80123a4:	e003      	b.n	80123ae <prvInitialiseNewTask+0xa4>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80123a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80123a8:	2200      	movs	r2, #0
 80123aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80123ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80123b0:	2b37      	cmp	r3, #55	; 0x37
 80123b2:	d901      	bls.n	80123b8 <prvInitialiseNewTask+0xae>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80123b4:	2337      	movs	r3, #55	; 0x37
 80123b6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80123b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80123ba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80123bc:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80123be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80123c0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80123c2:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80123c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80123c6:	2200      	movs	r2, #0
 80123c8:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80123ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80123cc:	3304      	adds	r3, #4
 80123ce:	4618      	mov	r0, r3
 80123d0:	f7fe fdc6 	bl	8010f60 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80123d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80123d6:	3318      	adds	r3, #24
 80123d8:	4618      	mov	r0, r3
 80123da:	f7fe fdc1 	bl	8010f60 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80123de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80123e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80123e2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80123e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80123e6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80123ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80123ec:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80123ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80123f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80123f2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80123f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80123f6:	2200      	movs	r2, #0
 80123f8:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80123fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80123fc:	2200      	movs	r2, #0
 80123fe:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8012402:	683a      	ldr	r2, [r7, #0]
 8012404:	68f9      	ldr	r1, [r7, #12]
 8012406:	69b8      	ldr	r0, [r7, #24]
 8012408:	f7fe f96e 	bl	80106e8 <pxPortInitialiseStack>
 801240c:	4602      	mov	r2, r0
 801240e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012410:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8012412:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012414:	2b00      	cmp	r3, #0
 8012416:	d002      	beq.n	801241e <prvInitialiseNewTask+0x114>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8012418:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801241a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801241c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801241e:	bf00      	nop
 8012420:	3720      	adds	r7, #32
 8012422:	46bd      	mov	sp, r7
 8012424:	bd80      	pop	{r7, pc}
	...

08012428 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8012428:	b580      	push	{r7, lr}
 801242a:	b082      	sub	sp, #8
 801242c:	af00      	add	r7, sp, #0
 801242e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8012430:	f7fe fa84 	bl	801093c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8012434:	4b2d      	ldr	r3, [pc, #180]	; (80124ec <prvAddNewTaskToReadyList+0xc4>)
 8012436:	681b      	ldr	r3, [r3, #0]
 8012438:	3301      	adds	r3, #1
 801243a:	4a2c      	ldr	r2, [pc, #176]	; (80124ec <prvAddNewTaskToReadyList+0xc4>)
 801243c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 801243e:	4b2c      	ldr	r3, [pc, #176]	; (80124f0 <prvAddNewTaskToReadyList+0xc8>)
 8012440:	681b      	ldr	r3, [r3, #0]
 8012442:	2b00      	cmp	r3, #0
 8012444:	d109      	bne.n	801245a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8012446:	4a2a      	ldr	r2, [pc, #168]	; (80124f0 <prvAddNewTaskToReadyList+0xc8>)
 8012448:	687b      	ldr	r3, [r7, #4]
 801244a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 801244c:	4b27      	ldr	r3, [pc, #156]	; (80124ec <prvAddNewTaskToReadyList+0xc4>)
 801244e:	681b      	ldr	r3, [r3, #0]
 8012450:	2b01      	cmp	r3, #1
 8012452:	d110      	bne.n	8012476 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8012454:	f000 fc68 	bl	8012d28 <prvInitialiseTaskLists>
 8012458:	e00d      	b.n	8012476 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 801245a:	4b26      	ldr	r3, [pc, #152]	; (80124f4 <prvAddNewTaskToReadyList+0xcc>)
 801245c:	681b      	ldr	r3, [r3, #0]
 801245e:	2b00      	cmp	r3, #0
 8012460:	d109      	bne.n	8012476 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8012462:	4b23      	ldr	r3, [pc, #140]	; (80124f0 <prvAddNewTaskToReadyList+0xc8>)
 8012464:	681b      	ldr	r3, [r3, #0]
 8012466:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012468:	687b      	ldr	r3, [r7, #4]
 801246a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801246c:	429a      	cmp	r2, r3
 801246e:	d802      	bhi.n	8012476 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8012470:	4a1f      	ldr	r2, [pc, #124]	; (80124f0 <prvAddNewTaskToReadyList+0xc8>)
 8012472:	687b      	ldr	r3, [r7, #4]
 8012474:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8012476:	4b20      	ldr	r3, [pc, #128]	; (80124f8 <prvAddNewTaskToReadyList+0xd0>)
 8012478:	681b      	ldr	r3, [r3, #0]
 801247a:	3301      	adds	r3, #1
 801247c:	4a1e      	ldr	r2, [pc, #120]	; (80124f8 <prvAddNewTaskToReadyList+0xd0>)
 801247e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8012480:	4b1d      	ldr	r3, [pc, #116]	; (80124f8 <prvAddNewTaskToReadyList+0xd0>)
 8012482:	681a      	ldr	r2, [r3, #0]
 8012484:	687b      	ldr	r3, [r7, #4]
 8012486:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8012488:	687b      	ldr	r3, [r7, #4]
 801248a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801248c:	4b1b      	ldr	r3, [pc, #108]	; (80124fc <prvAddNewTaskToReadyList+0xd4>)
 801248e:	681b      	ldr	r3, [r3, #0]
 8012490:	429a      	cmp	r2, r3
 8012492:	d903      	bls.n	801249c <prvAddNewTaskToReadyList+0x74>
 8012494:	687b      	ldr	r3, [r7, #4]
 8012496:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012498:	4a18      	ldr	r2, [pc, #96]	; (80124fc <prvAddNewTaskToReadyList+0xd4>)
 801249a:	6013      	str	r3, [r2, #0]
 801249c:	687b      	ldr	r3, [r7, #4]
 801249e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80124a0:	4613      	mov	r3, r2
 80124a2:	009b      	lsls	r3, r3, #2
 80124a4:	4413      	add	r3, r2
 80124a6:	009b      	lsls	r3, r3, #2
 80124a8:	4a15      	ldr	r2, [pc, #84]	; (8012500 <prvAddNewTaskToReadyList+0xd8>)
 80124aa:	441a      	add	r2, r3
 80124ac:	687b      	ldr	r3, [r7, #4]
 80124ae:	3304      	adds	r3, #4
 80124b0:	4619      	mov	r1, r3
 80124b2:	4610      	mov	r0, r2
 80124b4:	f7fe fd61 	bl	8010f7a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80124b8:	f7fe fa6e 	bl	8010998 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80124bc:	4b0d      	ldr	r3, [pc, #52]	; (80124f4 <prvAddNewTaskToReadyList+0xcc>)
 80124be:	681b      	ldr	r3, [r3, #0]
 80124c0:	2b00      	cmp	r3, #0
 80124c2:	d00e      	beq.n	80124e2 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80124c4:	4b0a      	ldr	r3, [pc, #40]	; (80124f0 <prvAddNewTaskToReadyList+0xc8>)
 80124c6:	681b      	ldr	r3, [r3, #0]
 80124c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80124ca:	687b      	ldr	r3, [r7, #4]
 80124cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80124ce:	429a      	cmp	r2, r3
 80124d0:	d207      	bcs.n	80124e2 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80124d2:	4b0c      	ldr	r3, [pc, #48]	; (8012504 <prvAddNewTaskToReadyList+0xdc>)
 80124d4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80124d8:	601a      	str	r2, [r3, #0]
 80124da:	f3bf 8f4f 	dsb	sy
 80124de:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80124e2:	bf00      	nop
 80124e4:	3708      	adds	r7, #8
 80124e6:	46bd      	mov	sp, r7
 80124e8:	bd80      	pop	{r7, pc}
 80124ea:	bf00      	nop
 80124ec:	2002df04 	.word	0x2002df04
 80124f0:	2002da30 	.word	0x2002da30
 80124f4:	2002df10 	.word	0x2002df10
 80124f8:	2002df20 	.word	0x2002df20
 80124fc:	2002df0c 	.word	0x2002df0c
 8012500:	2002da34 	.word	0x2002da34
 8012504:	e000ed04 	.word	0xe000ed04

08012508 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8012508:	b580      	push	{r7, lr}
 801250a:	b084      	sub	sp, #16
 801250c:	af00      	add	r7, sp, #0
 801250e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8012510:	2300      	movs	r3, #0
 8012512:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8012514:	687b      	ldr	r3, [r7, #4]
 8012516:	2b00      	cmp	r3, #0
 8012518:	d016      	beq.n	8012548 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 801251a:	4b13      	ldr	r3, [pc, #76]	; (8012568 <vTaskDelay+0x60>)
 801251c:	681b      	ldr	r3, [r3, #0]
 801251e:	2b00      	cmp	r3, #0
 8012520:	d009      	beq.n	8012536 <vTaskDelay+0x2e>
 8012522:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012526:	f383 8811 	msr	BASEPRI, r3
 801252a:	f3bf 8f6f 	isb	sy
 801252e:	f3bf 8f4f 	dsb	sy
 8012532:	60bb      	str	r3, [r7, #8]
 8012534:	e7fe      	b.n	8012534 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8012536:	f000 f87f 	bl	8012638 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 801253a:	2100      	movs	r1, #0
 801253c:	6878      	ldr	r0, [r7, #4]
 801253e:	f001 f899 	bl	8013674 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8012542:	f000 f8bf 	bl	80126c4 <xTaskResumeAll>
 8012546:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8012548:	68fb      	ldr	r3, [r7, #12]
 801254a:	2b00      	cmp	r3, #0
 801254c:	d107      	bne.n	801255e <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 801254e:	4b07      	ldr	r3, [pc, #28]	; (801256c <vTaskDelay+0x64>)
 8012550:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012554:	601a      	str	r2, [r3, #0]
 8012556:	f3bf 8f4f 	dsb	sy
 801255a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 801255e:	bf00      	nop
 8012560:	3710      	adds	r7, #16
 8012562:	46bd      	mov	sp, r7
 8012564:	bd80      	pop	{r7, pc}
 8012566:	bf00      	nop
 8012568:	2002df2c 	.word	0x2002df2c
 801256c:	e000ed04 	.word	0xe000ed04

08012570 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8012570:	b580      	push	{r7, lr}
 8012572:	b08a      	sub	sp, #40	; 0x28
 8012574:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8012576:	2300      	movs	r3, #0
 8012578:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 801257a:	2300      	movs	r3, #0
 801257c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 801257e:	463a      	mov	r2, r7
 8012580:	1d39      	adds	r1, r7, #4
 8012582:	f107 0308 	add.w	r3, r7, #8
 8012586:	4618      	mov	r0, r3
 8012588:	f7fe f87a 	bl	8010680 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 801258c:	6839      	ldr	r1, [r7, #0]
 801258e:	687b      	ldr	r3, [r7, #4]
 8012590:	68ba      	ldr	r2, [r7, #8]
 8012592:	9202      	str	r2, [sp, #8]
 8012594:	9301      	str	r3, [sp, #4]
 8012596:	2300      	movs	r3, #0
 8012598:	9300      	str	r3, [sp, #0]
 801259a:	2300      	movs	r3, #0
 801259c:	460a      	mov	r2, r1
 801259e:	4920      	ldr	r1, [pc, #128]	; (8012620 <vTaskStartScheduler+0xb0>)
 80125a0:	4820      	ldr	r0, [pc, #128]	; (8012624 <vTaskStartScheduler+0xb4>)
 80125a2:	f7ff fe13 	bl	80121cc <xTaskCreateStatic>
 80125a6:	4602      	mov	r2, r0
 80125a8:	4b1f      	ldr	r3, [pc, #124]	; (8012628 <vTaskStartScheduler+0xb8>)
 80125aa:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80125ac:	4b1e      	ldr	r3, [pc, #120]	; (8012628 <vTaskStartScheduler+0xb8>)
 80125ae:	681b      	ldr	r3, [r3, #0]
 80125b0:	2b00      	cmp	r3, #0
 80125b2:	d002      	beq.n	80125ba <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80125b4:	2301      	movs	r3, #1
 80125b6:	617b      	str	r3, [r7, #20]
 80125b8:	e001      	b.n	80125be <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80125ba:	2300      	movs	r3, #0
 80125bc:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80125be:	697b      	ldr	r3, [r7, #20]
 80125c0:	2b01      	cmp	r3, #1
 80125c2:	d102      	bne.n	80125ca <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80125c4:	f001 f8aa 	bl	801371c <xTimerCreateTimerTask>
 80125c8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80125ca:	697b      	ldr	r3, [r7, #20]
 80125cc:	2b01      	cmp	r3, #1
 80125ce:	d115      	bne.n	80125fc <vTaskStartScheduler+0x8c>
 80125d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80125d4:	f383 8811 	msr	BASEPRI, r3
 80125d8:	f3bf 8f6f 	isb	sy
 80125dc:	f3bf 8f4f 	dsb	sy
 80125e0:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80125e2:	4b12      	ldr	r3, [pc, #72]	; (801262c <vTaskStartScheduler+0xbc>)
 80125e4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80125e8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80125ea:	4b11      	ldr	r3, [pc, #68]	; (8012630 <vTaskStartScheduler+0xc0>)
 80125ec:	2201      	movs	r2, #1
 80125ee:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80125f0:	4b10      	ldr	r3, [pc, #64]	; (8012634 <vTaskStartScheduler+0xc4>)
 80125f2:	2200      	movs	r2, #0
 80125f4:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80125f6:	f7fe f903 	bl	8010800 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80125fa:	e00d      	b.n	8012618 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80125fc:	697b      	ldr	r3, [r7, #20]
 80125fe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8012602:	d109      	bne.n	8012618 <vTaskStartScheduler+0xa8>
 8012604:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012608:	f383 8811 	msr	BASEPRI, r3
 801260c:	f3bf 8f6f 	isb	sy
 8012610:	f3bf 8f4f 	dsb	sy
 8012614:	60fb      	str	r3, [r7, #12]
 8012616:	e7fe      	b.n	8012616 <vTaskStartScheduler+0xa6>
}
 8012618:	bf00      	nop
 801261a:	3718      	adds	r7, #24
 801261c:	46bd      	mov	sp, r7
 801261e:	bd80      	pop	{r7, pc}
 8012620:	08018a3c 	.word	0x08018a3c
 8012624:	08012cad 	.word	0x08012cad
 8012628:	2002df28 	.word	0x2002df28
 801262c:	2002df24 	.word	0x2002df24
 8012630:	2002df10 	.word	0x2002df10
 8012634:	2002df08 	.word	0x2002df08

08012638 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8012638:	b480      	push	{r7}
 801263a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 801263c:	4b04      	ldr	r3, [pc, #16]	; (8012650 <vTaskSuspendAll+0x18>)
 801263e:	681b      	ldr	r3, [r3, #0]
 8012640:	3301      	adds	r3, #1
 8012642:	4a03      	ldr	r2, [pc, #12]	; (8012650 <vTaskSuspendAll+0x18>)
 8012644:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8012646:	bf00      	nop
 8012648:	46bd      	mov	sp, r7
 801264a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801264e:	4770      	bx	lr
 8012650:	2002df2c 	.word	0x2002df2c

08012654 <prvGetExpectedIdleTime>:
/*----------------------------------------------------------*/

#if ( configUSE_TICKLESS_IDLE != 0 )

	static TickType_t prvGetExpectedIdleTime( void )
	{
 8012654:	b480      	push	{r7}
 8012656:	b083      	sub	sp, #12
 8012658:	af00      	add	r7, sp, #0
	TickType_t xReturn;
	UBaseType_t uxHigherPriorityReadyTasks = pdFALSE;
 801265a:	2300      	movs	r3, #0
 801265c:	603b      	str	r3, [r7, #0]
		configUSE_PREEMPTION is 0, so there may be tasks above the idle priority
		task that are in the Ready state, even though the idle task is
		running. */
		#if( configUSE_PORT_OPTIMISED_TASK_SELECTION == 0 )
		{
			if( uxTopReadyPriority > tskIDLE_PRIORITY )
 801265e:	4b14      	ldr	r3, [pc, #80]	; (80126b0 <prvGetExpectedIdleTime+0x5c>)
 8012660:	681b      	ldr	r3, [r3, #0]
 8012662:	2b00      	cmp	r3, #0
 8012664:	d001      	beq.n	801266a <prvGetExpectedIdleTime+0x16>
			{
				uxHigherPriorityReadyTasks = pdTRUE;
 8012666:	2301      	movs	r3, #1
 8012668:	603b      	str	r3, [r7, #0]
				uxHigherPriorityReadyTasks = pdTRUE;
			}
		}
		#endif

		if( pxCurrentTCB->uxPriority > tskIDLE_PRIORITY )
 801266a:	4b12      	ldr	r3, [pc, #72]	; (80126b4 <prvGetExpectedIdleTime+0x60>)
 801266c:	681b      	ldr	r3, [r3, #0]
 801266e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012670:	2b00      	cmp	r3, #0
 8012672:	d002      	beq.n	801267a <prvGetExpectedIdleTime+0x26>
		{
			xReturn = 0;
 8012674:	2300      	movs	r3, #0
 8012676:	607b      	str	r3, [r7, #4]
 8012678:	e012      	b.n	80126a0 <prvGetExpectedIdleTime+0x4c>
		}
		else if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > 1 )
 801267a:	4b0f      	ldr	r3, [pc, #60]	; (80126b8 <prvGetExpectedIdleTime+0x64>)
 801267c:	681b      	ldr	r3, [r3, #0]
 801267e:	2b01      	cmp	r3, #1
 8012680:	d902      	bls.n	8012688 <prvGetExpectedIdleTime+0x34>
		{
			/* There are other idle priority tasks in the ready state.  If
			time slicing is used then the very next tick interrupt must be
			processed. */
			xReturn = 0;
 8012682:	2300      	movs	r3, #0
 8012684:	607b      	str	r3, [r7, #4]
 8012686:	e00b      	b.n	80126a0 <prvGetExpectedIdleTime+0x4c>
		}
		else if( uxHigherPriorityReadyTasks != pdFALSE )
 8012688:	683b      	ldr	r3, [r7, #0]
 801268a:	2b00      	cmp	r3, #0
 801268c:	d002      	beq.n	8012694 <prvGetExpectedIdleTime+0x40>
		{
			/* There are tasks in the Ready state that have a priority above the
			idle priority.  This path can only be reached if
			configUSE_PREEMPTION is 0. */
			xReturn = 0;
 801268e:	2300      	movs	r3, #0
 8012690:	607b      	str	r3, [r7, #4]
 8012692:	e005      	b.n	80126a0 <prvGetExpectedIdleTime+0x4c>
		}
		else
		{
			xReturn = xNextTaskUnblockTime - xTickCount;
 8012694:	4b09      	ldr	r3, [pc, #36]	; (80126bc <prvGetExpectedIdleTime+0x68>)
 8012696:	681a      	ldr	r2, [r3, #0]
 8012698:	4b09      	ldr	r3, [pc, #36]	; (80126c0 <prvGetExpectedIdleTime+0x6c>)
 801269a:	681b      	ldr	r3, [r3, #0]
 801269c:	1ad3      	subs	r3, r2, r3
 801269e:	607b      	str	r3, [r7, #4]
		}

		return xReturn;
 80126a0:	687b      	ldr	r3, [r7, #4]
	}
 80126a2:	4618      	mov	r0, r3
 80126a4:	370c      	adds	r7, #12
 80126a6:	46bd      	mov	sp, r7
 80126a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80126ac:	4770      	bx	lr
 80126ae:	bf00      	nop
 80126b0:	2002df0c 	.word	0x2002df0c
 80126b4:	2002da30 	.word	0x2002da30
 80126b8:	2002da34 	.word	0x2002da34
 80126bc:	2002df24 	.word	0x2002df24
 80126c0:	2002df08 	.word	0x2002df08

080126c4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80126c4:	b580      	push	{r7, lr}
 80126c6:	b084      	sub	sp, #16
 80126c8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80126ca:	2300      	movs	r3, #0
 80126cc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80126ce:	2300      	movs	r3, #0
 80126d0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80126d2:	4b41      	ldr	r3, [pc, #260]	; (80127d8 <xTaskResumeAll+0x114>)
 80126d4:	681b      	ldr	r3, [r3, #0]
 80126d6:	2b00      	cmp	r3, #0
 80126d8:	d109      	bne.n	80126ee <xTaskResumeAll+0x2a>
 80126da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80126de:	f383 8811 	msr	BASEPRI, r3
 80126e2:	f3bf 8f6f 	isb	sy
 80126e6:	f3bf 8f4f 	dsb	sy
 80126ea:	603b      	str	r3, [r7, #0]
 80126ec:	e7fe      	b.n	80126ec <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80126ee:	f7fe f925 	bl	801093c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80126f2:	4b39      	ldr	r3, [pc, #228]	; (80127d8 <xTaskResumeAll+0x114>)
 80126f4:	681b      	ldr	r3, [r3, #0]
 80126f6:	3b01      	subs	r3, #1
 80126f8:	4a37      	ldr	r2, [pc, #220]	; (80127d8 <xTaskResumeAll+0x114>)
 80126fa:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80126fc:	4b36      	ldr	r3, [pc, #216]	; (80127d8 <xTaskResumeAll+0x114>)
 80126fe:	681b      	ldr	r3, [r3, #0]
 8012700:	2b00      	cmp	r3, #0
 8012702:	d162      	bne.n	80127ca <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8012704:	4b35      	ldr	r3, [pc, #212]	; (80127dc <xTaskResumeAll+0x118>)
 8012706:	681b      	ldr	r3, [r3, #0]
 8012708:	2b00      	cmp	r3, #0
 801270a:	d05e      	beq.n	80127ca <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 801270c:	e02f      	b.n	801276e <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801270e:	4b34      	ldr	r3, [pc, #208]	; (80127e0 <xTaskResumeAll+0x11c>)
 8012710:	68db      	ldr	r3, [r3, #12]
 8012712:	68db      	ldr	r3, [r3, #12]
 8012714:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8012716:	68fb      	ldr	r3, [r7, #12]
 8012718:	3318      	adds	r3, #24
 801271a:	4618      	mov	r0, r3
 801271c:	f7fe fc8a 	bl	8011034 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8012720:	68fb      	ldr	r3, [r7, #12]
 8012722:	3304      	adds	r3, #4
 8012724:	4618      	mov	r0, r3
 8012726:	f7fe fc85 	bl	8011034 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 801272a:	68fb      	ldr	r3, [r7, #12]
 801272c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801272e:	4b2d      	ldr	r3, [pc, #180]	; (80127e4 <xTaskResumeAll+0x120>)
 8012730:	681b      	ldr	r3, [r3, #0]
 8012732:	429a      	cmp	r2, r3
 8012734:	d903      	bls.n	801273e <xTaskResumeAll+0x7a>
 8012736:	68fb      	ldr	r3, [r7, #12]
 8012738:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801273a:	4a2a      	ldr	r2, [pc, #168]	; (80127e4 <xTaskResumeAll+0x120>)
 801273c:	6013      	str	r3, [r2, #0]
 801273e:	68fb      	ldr	r3, [r7, #12]
 8012740:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012742:	4613      	mov	r3, r2
 8012744:	009b      	lsls	r3, r3, #2
 8012746:	4413      	add	r3, r2
 8012748:	009b      	lsls	r3, r3, #2
 801274a:	4a27      	ldr	r2, [pc, #156]	; (80127e8 <xTaskResumeAll+0x124>)
 801274c:	441a      	add	r2, r3
 801274e:	68fb      	ldr	r3, [r7, #12]
 8012750:	3304      	adds	r3, #4
 8012752:	4619      	mov	r1, r3
 8012754:	4610      	mov	r0, r2
 8012756:	f7fe fc10 	bl	8010f7a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 801275a:	68fb      	ldr	r3, [r7, #12]
 801275c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801275e:	4b23      	ldr	r3, [pc, #140]	; (80127ec <xTaskResumeAll+0x128>)
 8012760:	681b      	ldr	r3, [r3, #0]
 8012762:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012764:	429a      	cmp	r2, r3
 8012766:	d302      	bcc.n	801276e <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8012768:	4b21      	ldr	r3, [pc, #132]	; (80127f0 <xTaskResumeAll+0x12c>)
 801276a:	2201      	movs	r2, #1
 801276c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 801276e:	4b1c      	ldr	r3, [pc, #112]	; (80127e0 <xTaskResumeAll+0x11c>)
 8012770:	681b      	ldr	r3, [r3, #0]
 8012772:	2b00      	cmp	r3, #0
 8012774:	d1cb      	bne.n	801270e <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8012776:	68fb      	ldr	r3, [r7, #12]
 8012778:	2b00      	cmp	r3, #0
 801277a:	d001      	beq.n	8012780 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 801277c:	f000 fb6e 	bl	8012e5c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8012780:	4b1c      	ldr	r3, [pc, #112]	; (80127f4 <xTaskResumeAll+0x130>)
 8012782:	681b      	ldr	r3, [r3, #0]
 8012784:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8012786:	687b      	ldr	r3, [r7, #4]
 8012788:	2b00      	cmp	r3, #0
 801278a:	d010      	beq.n	80127ae <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 801278c:	f000 f846 	bl	801281c <xTaskIncrementTick>
 8012790:	4603      	mov	r3, r0
 8012792:	2b00      	cmp	r3, #0
 8012794:	d002      	beq.n	801279c <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8012796:	4b16      	ldr	r3, [pc, #88]	; (80127f0 <xTaskResumeAll+0x12c>)
 8012798:	2201      	movs	r2, #1
 801279a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 801279c:	687b      	ldr	r3, [r7, #4]
 801279e:	3b01      	subs	r3, #1
 80127a0:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80127a2:	687b      	ldr	r3, [r7, #4]
 80127a4:	2b00      	cmp	r3, #0
 80127a6:	d1f1      	bne.n	801278c <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 80127a8:	4b12      	ldr	r3, [pc, #72]	; (80127f4 <xTaskResumeAll+0x130>)
 80127aa:	2200      	movs	r2, #0
 80127ac:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80127ae:	4b10      	ldr	r3, [pc, #64]	; (80127f0 <xTaskResumeAll+0x12c>)
 80127b0:	681b      	ldr	r3, [r3, #0]
 80127b2:	2b00      	cmp	r3, #0
 80127b4:	d009      	beq.n	80127ca <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80127b6:	2301      	movs	r3, #1
 80127b8:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80127ba:	4b0f      	ldr	r3, [pc, #60]	; (80127f8 <xTaskResumeAll+0x134>)
 80127bc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80127c0:	601a      	str	r2, [r3, #0]
 80127c2:	f3bf 8f4f 	dsb	sy
 80127c6:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80127ca:	f7fe f8e5 	bl	8010998 <vPortExitCritical>

	return xAlreadyYielded;
 80127ce:	68bb      	ldr	r3, [r7, #8]
}
 80127d0:	4618      	mov	r0, r3
 80127d2:	3710      	adds	r7, #16
 80127d4:	46bd      	mov	sp, r7
 80127d6:	bd80      	pop	{r7, pc}
 80127d8:	2002df2c 	.word	0x2002df2c
 80127dc:	2002df04 	.word	0x2002df04
 80127e0:	2002dec4 	.word	0x2002dec4
 80127e4:	2002df0c 	.word	0x2002df0c
 80127e8:	2002da34 	.word	0x2002da34
 80127ec:	2002da30 	.word	0x2002da30
 80127f0:	2002df18 	.word	0x2002df18
 80127f4:	2002df14 	.word	0x2002df14
 80127f8:	e000ed04 	.word	0xe000ed04

080127fc <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80127fc:	b480      	push	{r7}
 80127fe:	b083      	sub	sp, #12
 8012800:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8012802:	4b05      	ldr	r3, [pc, #20]	; (8012818 <xTaskGetTickCount+0x1c>)
 8012804:	681b      	ldr	r3, [r3, #0]
 8012806:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8012808:	687b      	ldr	r3, [r7, #4]
}
 801280a:	4618      	mov	r0, r3
 801280c:	370c      	adds	r7, #12
 801280e:	46bd      	mov	sp, r7
 8012810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012814:	4770      	bx	lr
 8012816:	bf00      	nop
 8012818:	2002df08 	.word	0x2002df08

0801281c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 801281c:	b580      	push	{r7, lr}
 801281e:	b086      	sub	sp, #24
 8012820:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8012822:	2300      	movs	r3, #0
 8012824:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8012826:	4b4e      	ldr	r3, [pc, #312]	; (8012960 <xTaskIncrementTick+0x144>)
 8012828:	681b      	ldr	r3, [r3, #0]
 801282a:	2b00      	cmp	r3, #0
 801282c:	f040 8088 	bne.w	8012940 <xTaskIncrementTick+0x124>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8012830:	4b4c      	ldr	r3, [pc, #304]	; (8012964 <xTaskIncrementTick+0x148>)
 8012832:	681b      	ldr	r3, [r3, #0]
 8012834:	3301      	adds	r3, #1
 8012836:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8012838:	4a4a      	ldr	r2, [pc, #296]	; (8012964 <xTaskIncrementTick+0x148>)
 801283a:	693b      	ldr	r3, [r7, #16]
 801283c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 801283e:	693b      	ldr	r3, [r7, #16]
 8012840:	2b00      	cmp	r3, #0
 8012842:	d11f      	bne.n	8012884 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8012844:	4b48      	ldr	r3, [pc, #288]	; (8012968 <xTaskIncrementTick+0x14c>)
 8012846:	681b      	ldr	r3, [r3, #0]
 8012848:	681b      	ldr	r3, [r3, #0]
 801284a:	2b00      	cmp	r3, #0
 801284c:	d009      	beq.n	8012862 <xTaskIncrementTick+0x46>
 801284e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012852:	f383 8811 	msr	BASEPRI, r3
 8012856:	f3bf 8f6f 	isb	sy
 801285a:	f3bf 8f4f 	dsb	sy
 801285e:	603b      	str	r3, [r7, #0]
 8012860:	e7fe      	b.n	8012860 <xTaskIncrementTick+0x44>
 8012862:	4b41      	ldr	r3, [pc, #260]	; (8012968 <xTaskIncrementTick+0x14c>)
 8012864:	681b      	ldr	r3, [r3, #0]
 8012866:	60fb      	str	r3, [r7, #12]
 8012868:	4b40      	ldr	r3, [pc, #256]	; (801296c <xTaskIncrementTick+0x150>)
 801286a:	681b      	ldr	r3, [r3, #0]
 801286c:	4a3e      	ldr	r2, [pc, #248]	; (8012968 <xTaskIncrementTick+0x14c>)
 801286e:	6013      	str	r3, [r2, #0]
 8012870:	4a3e      	ldr	r2, [pc, #248]	; (801296c <xTaskIncrementTick+0x150>)
 8012872:	68fb      	ldr	r3, [r7, #12]
 8012874:	6013      	str	r3, [r2, #0]
 8012876:	4b3e      	ldr	r3, [pc, #248]	; (8012970 <xTaskIncrementTick+0x154>)
 8012878:	681b      	ldr	r3, [r3, #0]
 801287a:	3301      	adds	r3, #1
 801287c:	4a3c      	ldr	r2, [pc, #240]	; (8012970 <xTaskIncrementTick+0x154>)
 801287e:	6013      	str	r3, [r2, #0]
 8012880:	f000 faec 	bl	8012e5c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8012884:	4b3b      	ldr	r3, [pc, #236]	; (8012974 <xTaskIncrementTick+0x158>)
 8012886:	681b      	ldr	r3, [r3, #0]
 8012888:	693a      	ldr	r2, [r7, #16]
 801288a:	429a      	cmp	r2, r3
 801288c:	d349      	bcc.n	8012922 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801288e:	4b36      	ldr	r3, [pc, #216]	; (8012968 <xTaskIncrementTick+0x14c>)
 8012890:	681b      	ldr	r3, [r3, #0]
 8012892:	681b      	ldr	r3, [r3, #0]
 8012894:	2b00      	cmp	r3, #0
 8012896:	d104      	bne.n	80128a2 <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8012898:	4b36      	ldr	r3, [pc, #216]	; (8012974 <xTaskIncrementTick+0x158>)
 801289a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801289e:	601a      	str	r2, [r3, #0]
					break;
 80128a0:	e03f      	b.n	8012922 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80128a2:	4b31      	ldr	r3, [pc, #196]	; (8012968 <xTaskIncrementTick+0x14c>)
 80128a4:	681b      	ldr	r3, [r3, #0]
 80128a6:	68db      	ldr	r3, [r3, #12]
 80128a8:	68db      	ldr	r3, [r3, #12]
 80128aa:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80128ac:	68bb      	ldr	r3, [r7, #8]
 80128ae:	685b      	ldr	r3, [r3, #4]
 80128b0:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80128b2:	693a      	ldr	r2, [r7, #16]
 80128b4:	687b      	ldr	r3, [r7, #4]
 80128b6:	429a      	cmp	r2, r3
 80128b8:	d203      	bcs.n	80128c2 <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80128ba:	4a2e      	ldr	r2, [pc, #184]	; (8012974 <xTaskIncrementTick+0x158>)
 80128bc:	687b      	ldr	r3, [r7, #4]
 80128be:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80128c0:	e02f      	b.n	8012922 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80128c2:	68bb      	ldr	r3, [r7, #8]
 80128c4:	3304      	adds	r3, #4
 80128c6:	4618      	mov	r0, r3
 80128c8:	f7fe fbb4 	bl	8011034 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80128cc:	68bb      	ldr	r3, [r7, #8]
 80128ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80128d0:	2b00      	cmp	r3, #0
 80128d2:	d004      	beq.n	80128de <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80128d4:	68bb      	ldr	r3, [r7, #8]
 80128d6:	3318      	adds	r3, #24
 80128d8:	4618      	mov	r0, r3
 80128da:	f7fe fbab 	bl	8011034 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80128de:	68bb      	ldr	r3, [r7, #8]
 80128e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80128e2:	4b25      	ldr	r3, [pc, #148]	; (8012978 <xTaskIncrementTick+0x15c>)
 80128e4:	681b      	ldr	r3, [r3, #0]
 80128e6:	429a      	cmp	r2, r3
 80128e8:	d903      	bls.n	80128f2 <xTaskIncrementTick+0xd6>
 80128ea:	68bb      	ldr	r3, [r7, #8]
 80128ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80128ee:	4a22      	ldr	r2, [pc, #136]	; (8012978 <xTaskIncrementTick+0x15c>)
 80128f0:	6013      	str	r3, [r2, #0]
 80128f2:	68bb      	ldr	r3, [r7, #8]
 80128f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80128f6:	4613      	mov	r3, r2
 80128f8:	009b      	lsls	r3, r3, #2
 80128fa:	4413      	add	r3, r2
 80128fc:	009b      	lsls	r3, r3, #2
 80128fe:	4a1f      	ldr	r2, [pc, #124]	; (801297c <xTaskIncrementTick+0x160>)
 8012900:	441a      	add	r2, r3
 8012902:	68bb      	ldr	r3, [r7, #8]
 8012904:	3304      	adds	r3, #4
 8012906:	4619      	mov	r1, r3
 8012908:	4610      	mov	r0, r2
 801290a:	f7fe fb36 	bl	8010f7a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 801290e:	68bb      	ldr	r3, [r7, #8]
 8012910:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012912:	4b1b      	ldr	r3, [pc, #108]	; (8012980 <xTaskIncrementTick+0x164>)
 8012914:	681b      	ldr	r3, [r3, #0]
 8012916:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012918:	429a      	cmp	r2, r3
 801291a:	d3b8      	bcc.n	801288e <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 801291c:	2301      	movs	r3, #1
 801291e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8012920:	e7b5      	b.n	801288e <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8012922:	4b17      	ldr	r3, [pc, #92]	; (8012980 <xTaskIncrementTick+0x164>)
 8012924:	681b      	ldr	r3, [r3, #0]
 8012926:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012928:	4914      	ldr	r1, [pc, #80]	; (801297c <xTaskIncrementTick+0x160>)
 801292a:	4613      	mov	r3, r2
 801292c:	009b      	lsls	r3, r3, #2
 801292e:	4413      	add	r3, r2
 8012930:	009b      	lsls	r3, r3, #2
 8012932:	440b      	add	r3, r1
 8012934:	681b      	ldr	r3, [r3, #0]
 8012936:	2b01      	cmp	r3, #1
 8012938:	d907      	bls.n	801294a <xTaskIncrementTick+0x12e>
			{
				xSwitchRequired = pdTRUE;
 801293a:	2301      	movs	r3, #1
 801293c:	617b      	str	r3, [r7, #20]
 801293e:	e004      	b.n	801294a <xTaskIncrementTick+0x12e>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8012940:	4b10      	ldr	r3, [pc, #64]	; (8012984 <xTaskIncrementTick+0x168>)
 8012942:	681b      	ldr	r3, [r3, #0]
 8012944:	3301      	adds	r3, #1
 8012946:	4a0f      	ldr	r2, [pc, #60]	; (8012984 <xTaskIncrementTick+0x168>)
 8012948:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 801294a:	4b0f      	ldr	r3, [pc, #60]	; (8012988 <xTaskIncrementTick+0x16c>)
 801294c:	681b      	ldr	r3, [r3, #0]
 801294e:	2b00      	cmp	r3, #0
 8012950:	d001      	beq.n	8012956 <xTaskIncrementTick+0x13a>
		{
			xSwitchRequired = pdTRUE;
 8012952:	2301      	movs	r3, #1
 8012954:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8012956:	697b      	ldr	r3, [r7, #20]
}
 8012958:	4618      	mov	r0, r3
 801295a:	3718      	adds	r7, #24
 801295c:	46bd      	mov	sp, r7
 801295e:	bd80      	pop	{r7, pc}
 8012960:	2002df2c 	.word	0x2002df2c
 8012964:	2002df08 	.word	0x2002df08
 8012968:	2002debc 	.word	0x2002debc
 801296c:	2002dec0 	.word	0x2002dec0
 8012970:	2002df1c 	.word	0x2002df1c
 8012974:	2002df24 	.word	0x2002df24
 8012978:	2002df0c 	.word	0x2002df0c
 801297c:	2002da34 	.word	0x2002da34
 8012980:	2002da30 	.word	0x2002da30
 8012984:	2002df14 	.word	0x2002df14
 8012988:	2002df18 	.word	0x2002df18

0801298c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 801298c:	b480      	push	{r7}
 801298e:	b085      	sub	sp, #20
 8012990:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8012992:	4b27      	ldr	r3, [pc, #156]	; (8012a30 <vTaskSwitchContext+0xa4>)
 8012994:	681b      	ldr	r3, [r3, #0]
 8012996:	2b00      	cmp	r3, #0
 8012998:	d003      	beq.n	80129a2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 801299a:	4b26      	ldr	r3, [pc, #152]	; (8012a34 <vTaskSwitchContext+0xa8>)
 801299c:	2201      	movs	r2, #1
 801299e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80129a0:	e040      	b.n	8012a24 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 80129a2:	4b24      	ldr	r3, [pc, #144]	; (8012a34 <vTaskSwitchContext+0xa8>)
 80129a4:	2200      	movs	r2, #0
 80129a6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80129a8:	4b23      	ldr	r3, [pc, #140]	; (8012a38 <vTaskSwitchContext+0xac>)
 80129aa:	681b      	ldr	r3, [r3, #0]
 80129ac:	60fb      	str	r3, [r7, #12]
 80129ae:	e00f      	b.n	80129d0 <vTaskSwitchContext+0x44>
 80129b0:	68fb      	ldr	r3, [r7, #12]
 80129b2:	2b00      	cmp	r3, #0
 80129b4:	d109      	bne.n	80129ca <vTaskSwitchContext+0x3e>
 80129b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80129ba:	f383 8811 	msr	BASEPRI, r3
 80129be:	f3bf 8f6f 	isb	sy
 80129c2:	f3bf 8f4f 	dsb	sy
 80129c6:	607b      	str	r3, [r7, #4]
 80129c8:	e7fe      	b.n	80129c8 <vTaskSwitchContext+0x3c>
 80129ca:	68fb      	ldr	r3, [r7, #12]
 80129cc:	3b01      	subs	r3, #1
 80129ce:	60fb      	str	r3, [r7, #12]
 80129d0:	491a      	ldr	r1, [pc, #104]	; (8012a3c <vTaskSwitchContext+0xb0>)
 80129d2:	68fa      	ldr	r2, [r7, #12]
 80129d4:	4613      	mov	r3, r2
 80129d6:	009b      	lsls	r3, r3, #2
 80129d8:	4413      	add	r3, r2
 80129da:	009b      	lsls	r3, r3, #2
 80129dc:	440b      	add	r3, r1
 80129de:	681b      	ldr	r3, [r3, #0]
 80129e0:	2b00      	cmp	r3, #0
 80129e2:	d0e5      	beq.n	80129b0 <vTaskSwitchContext+0x24>
 80129e4:	68fa      	ldr	r2, [r7, #12]
 80129e6:	4613      	mov	r3, r2
 80129e8:	009b      	lsls	r3, r3, #2
 80129ea:	4413      	add	r3, r2
 80129ec:	009b      	lsls	r3, r3, #2
 80129ee:	4a13      	ldr	r2, [pc, #76]	; (8012a3c <vTaskSwitchContext+0xb0>)
 80129f0:	4413      	add	r3, r2
 80129f2:	60bb      	str	r3, [r7, #8]
 80129f4:	68bb      	ldr	r3, [r7, #8]
 80129f6:	685b      	ldr	r3, [r3, #4]
 80129f8:	685a      	ldr	r2, [r3, #4]
 80129fa:	68bb      	ldr	r3, [r7, #8]
 80129fc:	605a      	str	r2, [r3, #4]
 80129fe:	68bb      	ldr	r3, [r7, #8]
 8012a00:	685a      	ldr	r2, [r3, #4]
 8012a02:	68bb      	ldr	r3, [r7, #8]
 8012a04:	3308      	adds	r3, #8
 8012a06:	429a      	cmp	r2, r3
 8012a08:	d104      	bne.n	8012a14 <vTaskSwitchContext+0x88>
 8012a0a:	68bb      	ldr	r3, [r7, #8]
 8012a0c:	685b      	ldr	r3, [r3, #4]
 8012a0e:	685a      	ldr	r2, [r3, #4]
 8012a10:	68bb      	ldr	r3, [r7, #8]
 8012a12:	605a      	str	r2, [r3, #4]
 8012a14:	68bb      	ldr	r3, [r7, #8]
 8012a16:	685b      	ldr	r3, [r3, #4]
 8012a18:	68db      	ldr	r3, [r3, #12]
 8012a1a:	4a09      	ldr	r2, [pc, #36]	; (8012a40 <vTaskSwitchContext+0xb4>)
 8012a1c:	6013      	str	r3, [r2, #0]
 8012a1e:	4a06      	ldr	r2, [pc, #24]	; (8012a38 <vTaskSwitchContext+0xac>)
 8012a20:	68fb      	ldr	r3, [r7, #12]
 8012a22:	6013      	str	r3, [r2, #0]
}
 8012a24:	bf00      	nop
 8012a26:	3714      	adds	r7, #20
 8012a28:	46bd      	mov	sp, r7
 8012a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a2e:	4770      	bx	lr
 8012a30:	2002df2c 	.word	0x2002df2c
 8012a34:	2002df18 	.word	0x2002df18
 8012a38:	2002df0c 	.word	0x2002df0c
 8012a3c:	2002da34 	.word	0x2002da34
 8012a40:	2002da30 	.word	0x2002da30

08012a44 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8012a44:	b580      	push	{r7, lr}
 8012a46:	b084      	sub	sp, #16
 8012a48:	af00      	add	r7, sp, #0
 8012a4a:	6078      	str	r0, [r7, #4]
 8012a4c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8012a4e:	687b      	ldr	r3, [r7, #4]
 8012a50:	2b00      	cmp	r3, #0
 8012a52:	d109      	bne.n	8012a68 <vTaskPlaceOnEventList+0x24>
 8012a54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012a58:	f383 8811 	msr	BASEPRI, r3
 8012a5c:	f3bf 8f6f 	isb	sy
 8012a60:	f3bf 8f4f 	dsb	sy
 8012a64:	60fb      	str	r3, [r7, #12]
 8012a66:	e7fe      	b.n	8012a66 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8012a68:	4b07      	ldr	r3, [pc, #28]	; (8012a88 <vTaskPlaceOnEventList+0x44>)
 8012a6a:	681b      	ldr	r3, [r3, #0]
 8012a6c:	3318      	adds	r3, #24
 8012a6e:	4619      	mov	r1, r3
 8012a70:	6878      	ldr	r0, [r7, #4]
 8012a72:	f7fe faa6 	bl	8010fc2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8012a76:	2101      	movs	r1, #1
 8012a78:	6838      	ldr	r0, [r7, #0]
 8012a7a:	f000 fdfb 	bl	8013674 <prvAddCurrentTaskToDelayedList>
}
 8012a7e:	bf00      	nop
 8012a80:	3710      	adds	r7, #16
 8012a82:	46bd      	mov	sp, r7
 8012a84:	bd80      	pop	{r7, pc}
 8012a86:	bf00      	nop
 8012a88:	2002da30 	.word	0x2002da30

08012a8c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8012a8c:	b580      	push	{r7, lr}
 8012a8e:	b086      	sub	sp, #24
 8012a90:	af00      	add	r7, sp, #0
 8012a92:	60f8      	str	r0, [r7, #12]
 8012a94:	60b9      	str	r1, [r7, #8]
 8012a96:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8012a98:	68fb      	ldr	r3, [r7, #12]
 8012a9a:	2b00      	cmp	r3, #0
 8012a9c:	d109      	bne.n	8012ab2 <vTaskPlaceOnEventListRestricted+0x26>
 8012a9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012aa2:	f383 8811 	msr	BASEPRI, r3
 8012aa6:	f3bf 8f6f 	isb	sy
 8012aaa:	f3bf 8f4f 	dsb	sy
 8012aae:	617b      	str	r3, [r7, #20]
 8012ab0:	e7fe      	b.n	8012ab0 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8012ab2:	4b0a      	ldr	r3, [pc, #40]	; (8012adc <vTaskPlaceOnEventListRestricted+0x50>)
 8012ab4:	681b      	ldr	r3, [r3, #0]
 8012ab6:	3318      	adds	r3, #24
 8012ab8:	4619      	mov	r1, r3
 8012aba:	68f8      	ldr	r0, [r7, #12]
 8012abc:	f7fe fa5d 	bl	8010f7a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8012ac0:	687b      	ldr	r3, [r7, #4]
 8012ac2:	2b00      	cmp	r3, #0
 8012ac4:	d002      	beq.n	8012acc <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 8012ac6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8012aca:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8012acc:	6879      	ldr	r1, [r7, #4]
 8012ace:	68b8      	ldr	r0, [r7, #8]
 8012ad0:	f000 fdd0 	bl	8013674 <prvAddCurrentTaskToDelayedList>
	}
 8012ad4:	bf00      	nop
 8012ad6:	3718      	adds	r7, #24
 8012ad8:	46bd      	mov	sp, r7
 8012ada:	bd80      	pop	{r7, pc}
 8012adc:	2002da30 	.word	0x2002da30

08012ae0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8012ae0:	b580      	push	{r7, lr}
 8012ae2:	b086      	sub	sp, #24
 8012ae4:	af00      	add	r7, sp, #0
 8012ae6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8012ae8:	687b      	ldr	r3, [r7, #4]
 8012aea:	68db      	ldr	r3, [r3, #12]
 8012aec:	68db      	ldr	r3, [r3, #12]
 8012aee:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8012af0:	693b      	ldr	r3, [r7, #16]
 8012af2:	2b00      	cmp	r3, #0
 8012af4:	d109      	bne.n	8012b0a <xTaskRemoveFromEventList+0x2a>
 8012af6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012afa:	f383 8811 	msr	BASEPRI, r3
 8012afe:	f3bf 8f6f 	isb	sy
 8012b02:	f3bf 8f4f 	dsb	sy
 8012b06:	60fb      	str	r3, [r7, #12]
 8012b08:	e7fe      	b.n	8012b08 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8012b0a:	693b      	ldr	r3, [r7, #16]
 8012b0c:	3318      	adds	r3, #24
 8012b0e:	4618      	mov	r0, r3
 8012b10:	f7fe fa90 	bl	8011034 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8012b14:	4b1e      	ldr	r3, [pc, #120]	; (8012b90 <xTaskRemoveFromEventList+0xb0>)
 8012b16:	681b      	ldr	r3, [r3, #0]
 8012b18:	2b00      	cmp	r3, #0
 8012b1a:	d11f      	bne.n	8012b5c <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8012b1c:	693b      	ldr	r3, [r7, #16]
 8012b1e:	3304      	adds	r3, #4
 8012b20:	4618      	mov	r0, r3
 8012b22:	f7fe fa87 	bl	8011034 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8012b26:	693b      	ldr	r3, [r7, #16]
 8012b28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012b2a:	4b1a      	ldr	r3, [pc, #104]	; (8012b94 <xTaskRemoveFromEventList+0xb4>)
 8012b2c:	681b      	ldr	r3, [r3, #0]
 8012b2e:	429a      	cmp	r2, r3
 8012b30:	d903      	bls.n	8012b3a <xTaskRemoveFromEventList+0x5a>
 8012b32:	693b      	ldr	r3, [r7, #16]
 8012b34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012b36:	4a17      	ldr	r2, [pc, #92]	; (8012b94 <xTaskRemoveFromEventList+0xb4>)
 8012b38:	6013      	str	r3, [r2, #0]
 8012b3a:	693b      	ldr	r3, [r7, #16]
 8012b3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012b3e:	4613      	mov	r3, r2
 8012b40:	009b      	lsls	r3, r3, #2
 8012b42:	4413      	add	r3, r2
 8012b44:	009b      	lsls	r3, r3, #2
 8012b46:	4a14      	ldr	r2, [pc, #80]	; (8012b98 <xTaskRemoveFromEventList+0xb8>)
 8012b48:	441a      	add	r2, r3
 8012b4a:	693b      	ldr	r3, [r7, #16]
 8012b4c:	3304      	adds	r3, #4
 8012b4e:	4619      	mov	r1, r3
 8012b50:	4610      	mov	r0, r2
 8012b52:	f7fe fa12 	bl	8010f7a <vListInsertEnd>
			normally left unchanged, because it is automatically reset to a new
			value when the tick count equals xNextTaskUnblockTime.  However if
			tickless idling is used it might be more important to enter sleep mode
			at the earliest possible time - so reset xNextTaskUnblockTime here to
			ensure it is updated at the earliest possible time. */
			prvResetNextTaskUnblockTime();
 8012b56:	f000 f981 	bl	8012e5c <prvResetNextTaskUnblockTime>
 8012b5a:	e005      	b.n	8012b68 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8012b5c:	693b      	ldr	r3, [r7, #16]
 8012b5e:	3318      	adds	r3, #24
 8012b60:	4619      	mov	r1, r3
 8012b62:	480e      	ldr	r0, [pc, #56]	; (8012b9c <xTaskRemoveFromEventList+0xbc>)
 8012b64:	f7fe fa09 	bl	8010f7a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8012b68:	693b      	ldr	r3, [r7, #16]
 8012b6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012b6c:	4b0c      	ldr	r3, [pc, #48]	; (8012ba0 <xTaskRemoveFromEventList+0xc0>)
 8012b6e:	681b      	ldr	r3, [r3, #0]
 8012b70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012b72:	429a      	cmp	r2, r3
 8012b74:	d905      	bls.n	8012b82 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8012b76:	2301      	movs	r3, #1
 8012b78:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8012b7a:	4b0a      	ldr	r3, [pc, #40]	; (8012ba4 <xTaskRemoveFromEventList+0xc4>)
 8012b7c:	2201      	movs	r2, #1
 8012b7e:	601a      	str	r2, [r3, #0]
 8012b80:	e001      	b.n	8012b86 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8012b82:	2300      	movs	r3, #0
 8012b84:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8012b86:	697b      	ldr	r3, [r7, #20]
}
 8012b88:	4618      	mov	r0, r3
 8012b8a:	3718      	adds	r7, #24
 8012b8c:	46bd      	mov	sp, r7
 8012b8e:	bd80      	pop	{r7, pc}
 8012b90:	2002df2c 	.word	0x2002df2c
 8012b94:	2002df0c 	.word	0x2002df0c
 8012b98:	2002da34 	.word	0x2002da34
 8012b9c:	2002dec4 	.word	0x2002dec4
 8012ba0:	2002da30 	.word	0x2002da30
 8012ba4:	2002df18 	.word	0x2002df18

08012ba8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8012ba8:	b480      	push	{r7}
 8012baa:	b083      	sub	sp, #12
 8012bac:	af00      	add	r7, sp, #0
 8012bae:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8012bb0:	4b06      	ldr	r3, [pc, #24]	; (8012bcc <vTaskInternalSetTimeOutState+0x24>)
 8012bb2:	681a      	ldr	r2, [r3, #0]
 8012bb4:	687b      	ldr	r3, [r7, #4]
 8012bb6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8012bb8:	4b05      	ldr	r3, [pc, #20]	; (8012bd0 <vTaskInternalSetTimeOutState+0x28>)
 8012bba:	681a      	ldr	r2, [r3, #0]
 8012bbc:	687b      	ldr	r3, [r7, #4]
 8012bbe:	605a      	str	r2, [r3, #4]
}
 8012bc0:	bf00      	nop
 8012bc2:	370c      	adds	r7, #12
 8012bc4:	46bd      	mov	sp, r7
 8012bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012bca:	4770      	bx	lr
 8012bcc:	2002df1c 	.word	0x2002df1c
 8012bd0:	2002df08 	.word	0x2002df08

08012bd4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8012bd4:	b580      	push	{r7, lr}
 8012bd6:	b088      	sub	sp, #32
 8012bd8:	af00      	add	r7, sp, #0
 8012bda:	6078      	str	r0, [r7, #4]
 8012bdc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8012bde:	687b      	ldr	r3, [r7, #4]
 8012be0:	2b00      	cmp	r3, #0
 8012be2:	d109      	bne.n	8012bf8 <xTaskCheckForTimeOut+0x24>
 8012be4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012be8:	f383 8811 	msr	BASEPRI, r3
 8012bec:	f3bf 8f6f 	isb	sy
 8012bf0:	f3bf 8f4f 	dsb	sy
 8012bf4:	613b      	str	r3, [r7, #16]
 8012bf6:	e7fe      	b.n	8012bf6 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8012bf8:	683b      	ldr	r3, [r7, #0]
 8012bfa:	2b00      	cmp	r3, #0
 8012bfc:	d109      	bne.n	8012c12 <xTaskCheckForTimeOut+0x3e>
 8012bfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012c02:	f383 8811 	msr	BASEPRI, r3
 8012c06:	f3bf 8f6f 	isb	sy
 8012c0a:	f3bf 8f4f 	dsb	sy
 8012c0e:	60fb      	str	r3, [r7, #12]
 8012c10:	e7fe      	b.n	8012c10 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8012c12:	f7fd fe93 	bl	801093c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8012c16:	4b1d      	ldr	r3, [pc, #116]	; (8012c8c <xTaskCheckForTimeOut+0xb8>)
 8012c18:	681b      	ldr	r3, [r3, #0]
 8012c1a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8012c1c:	687b      	ldr	r3, [r7, #4]
 8012c1e:	685b      	ldr	r3, [r3, #4]
 8012c20:	69ba      	ldr	r2, [r7, #24]
 8012c22:	1ad3      	subs	r3, r2, r3
 8012c24:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8012c26:	683b      	ldr	r3, [r7, #0]
 8012c28:	681b      	ldr	r3, [r3, #0]
 8012c2a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8012c2e:	d102      	bne.n	8012c36 <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8012c30:	2300      	movs	r3, #0
 8012c32:	61fb      	str	r3, [r7, #28]
 8012c34:	e023      	b.n	8012c7e <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8012c36:	687b      	ldr	r3, [r7, #4]
 8012c38:	681a      	ldr	r2, [r3, #0]
 8012c3a:	4b15      	ldr	r3, [pc, #84]	; (8012c90 <xTaskCheckForTimeOut+0xbc>)
 8012c3c:	681b      	ldr	r3, [r3, #0]
 8012c3e:	429a      	cmp	r2, r3
 8012c40:	d007      	beq.n	8012c52 <xTaskCheckForTimeOut+0x7e>
 8012c42:	687b      	ldr	r3, [r7, #4]
 8012c44:	685b      	ldr	r3, [r3, #4]
 8012c46:	69ba      	ldr	r2, [r7, #24]
 8012c48:	429a      	cmp	r2, r3
 8012c4a:	d302      	bcc.n	8012c52 <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8012c4c:	2301      	movs	r3, #1
 8012c4e:	61fb      	str	r3, [r7, #28]
 8012c50:	e015      	b.n	8012c7e <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8012c52:	683b      	ldr	r3, [r7, #0]
 8012c54:	681b      	ldr	r3, [r3, #0]
 8012c56:	697a      	ldr	r2, [r7, #20]
 8012c58:	429a      	cmp	r2, r3
 8012c5a:	d20b      	bcs.n	8012c74 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8012c5c:	683b      	ldr	r3, [r7, #0]
 8012c5e:	681a      	ldr	r2, [r3, #0]
 8012c60:	697b      	ldr	r3, [r7, #20]
 8012c62:	1ad2      	subs	r2, r2, r3
 8012c64:	683b      	ldr	r3, [r7, #0]
 8012c66:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8012c68:	6878      	ldr	r0, [r7, #4]
 8012c6a:	f7ff ff9d 	bl	8012ba8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8012c6e:	2300      	movs	r3, #0
 8012c70:	61fb      	str	r3, [r7, #28]
 8012c72:	e004      	b.n	8012c7e <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8012c74:	683b      	ldr	r3, [r7, #0]
 8012c76:	2200      	movs	r2, #0
 8012c78:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8012c7a:	2301      	movs	r3, #1
 8012c7c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8012c7e:	f7fd fe8b 	bl	8010998 <vPortExitCritical>

	return xReturn;
 8012c82:	69fb      	ldr	r3, [r7, #28]
}
 8012c84:	4618      	mov	r0, r3
 8012c86:	3720      	adds	r7, #32
 8012c88:	46bd      	mov	sp, r7
 8012c8a:	bd80      	pop	{r7, pc}
 8012c8c:	2002df08 	.word	0x2002df08
 8012c90:	2002df1c 	.word	0x2002df1c

08012c94 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8012c94:	b480      	push	{r7}
 8012c96:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8012c98:	4b03      	ldr	r3, [pc, #12]	; (8012ca8 <vTaskMissedYield+0x14>)
 8012c9a:	2201      	movs	r2, #1
 8012c9c:	601a      	str	r2, [r3, #0]
}
 8012c9e:	bf00      	nop
 8012ca0:	46bd      	mov	sp, r7
 8012ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ca6:	4770      	bx	lr
 8012ca8:	2002df18 	.word	0x2002df18

08012cac <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8012cac:	b580      	push	{r7, lr}
 8012cae:	b084      	sub	sp, #16
 8012cb0:	af00      	add	r7, sp, #0
 8012cb2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8012cb4:	f000 f878 	bl	8012da8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8012cb8:	4b17      	ldr	r3, [pc, #92]	; (8012d18 <prvIdleTask+0x6c>)
 8012cba:	681b      	ldr	r3, [r3, #0]
 8012cbc:	2b01      	cmp	r3, #1
 8012cbe:	d907      	bls.n	8012cd0 <prvIdleTask+0x24>
			{
				taskYIELD();
 8012cc0:	4b16      	ldr	r3, [pc, #88]	; (8012d1c <prvIdleTask+0x70>)
 8012cc2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012cc6:	601a      	str	r2, [r3, #0]
 8012cc8:	f3bf 8f4f 	dsb	sy
 8012ccc:	f3bf 8f6f 	isb	sy
			/* It is not desirable to suspend then resume the scheduler on
			each iteration of the idle task.  Therefore, a preliminary
			test of the expected idle time is performed without the
			scheduler suspended.  The result here is not necessarily
			valid. */
			xExpectedIdleTime = prvGetExpectedIdleTime();
 8012cd0:	f7ff fcc0 	bl	8012654 <prvGetExpectedIdleTime>
 8012cd4:	60f8      	str	r0, [r7, #12]

			if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
 8012cd6:	68fb      	ldr	r3, [r7, #12]
 8012cd8:	2b01      	cmp	r3, #1
 8012cda:	d9eb      	bls.n	8012cb4 <prvIdleTask+0x8>
			{
				vTaskSuspendAll();
 8012cdc:	f7ff fcac 	bl	8012638 <vTaskSuspendAll>
				{
					/* Now the scheduler is suspended, the expected idle
					time can be sampled again, and this time its value can
					be used. */
					configASSERT( xNextTaskUnblockTime >= xTickCount );
 8012ce0:	4b0f      	ldr	r3, [pc, #60]	; (8012d20 <prvIdleTask+0x74>)
 8012ce2:	681a      	ldr	r2, [r3, #0]
 8012ce4:	4b0f      	ldr	r3, [pc, #60]	; (8012d24 <prvIdleTask+0x78>)
 8012ce6:	681b      	ldr	r3, [r3, #0]
 8012ce8:	429a      	cmp	r2, r3
 8012cea:	d209      	bcs.n	8012d00 <prvIdleTask+0x54>
 8012cec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012cf0:	f383 8811 	msr	BASEPRI, r3
 8012cf4:	f3bf 8f6f 	isb	sy
 8012cf8:	f3bf 8f4f 	dsb	sy
 8012cfc:	60bb      	str	r3, [r7, #8]
 8012cfe:	e7fe      	b.n	8012cfe <prvIdleTask+0x52>
					xExpectedIdleTime = prvGetExpectedIdleTime();
 8012d00:	f7ff fca8 	bl	8012654 <prvGetExpectedIdleTime>
 8012d04:	60f8      	str	r0, [r7, #12]
					/* Define the following macro to set xExpectedIdleTime to 0
					if the application does not want
					portSUPPRESS_TICKS_AND_SLEEP() to be called. */
					configPRE_SUPPRESS_TICKS_AND_SLEEP_PROCESSING( xExpectedIdleTime );

					if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
 8012d06:	68fb      	ldr	r3, [r7, #12]
 8012d08:	2b01      	cmp	r3, #1
 8012d0a:	d902      	bls.n	8012d12 <prvIdleTask+0x66>
					{
						traceLOW_POWER_IDLE_BEGIN();
						portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime );
 8012d0c:	68f8      	ldr	r0, [r7, #12]
 8012d0e:	f7ef fe84 	bl	8002a1a <vPortSuppressTicksAndSleep>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}
				( void ) xTaskResumeAll();
 8012d12:	f7ff fcd7 	bl	80126c4 <xTaskResumeAll>
		prvCheckTasksWaitingTermination();
 8012d16:	e7cd      	b.n	8012cb4 <prvIdleTask+0x8>
 8012d18:	2002da34 	.word	0x2002da34
 8012d1c:	e000ed04 	.word	0xe000ed04
 8012d20:	2002df24 	.word	0x2002df24
 8012d24:	2002df08 	.word	0x2002df08

08012d28 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8012d28:	b580      	push	{r7, lr}
 8012d2a:	b082      	sub	sp, #8
 8012d2c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8012d2e:	2300      	movs	r3, #0
 8012d30:	607b      	str	r3, [r7, #4]
 8012d32:	e00c      	b.n	8012d4e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8012d34:	687a      	ldr	r2, [r7, #4]
 8012d36:	4613      	mov	r3, r2
 8012d38:	009b      	lsls	r3, r3, #2
 8012d3a:	4413      	add	r3, r2
 8012d3c:	009b      	lsls	r3, r3, #2
 8012d3e:	4a12      	ldr	r2, [pc, #72]	; (8012d88 <prvInitialiseTaskLists+0x60>)
 8012d40:	4413      	add	r3, r2
 8012d42:	4618      	mov	r0, r3
 8012d44:	f7fe f8ec 	bl	8010f20 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8012d48:	687b      	ldr	r3, [r7, #4]
 8012d4a:	3301      	adds	r3, #1
 8012d4c:	607b      	str	r3, [r7, #4]
 8012d4e:	687b      	ldr	r3, [r7, #4]
 8012d50:	2b37      	cmp	r3, #55	; 0x37
 8012d52:	d9ef      	bls.n	8012d34 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8012d54:	480d      	ldr	r0, [pc, #52]	; (8012d8c <prvInitialiseTaskLists+0x64>)
 8012d56:	f7fe f8e3 	bl	8010f20 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8012d5a:	480d      	ldr	r0, [pc, #52]	; (8012d90 <prvInitialiseTaskLists+0x68>)
 8012d5c:	f7fe f8e0 	bl	8010f20 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8012d60:	480c      	ldr	r0, [pc, #48]	; (8012d94 <prvInitialiseTaskLists+0x6c>)
 8012d62:	f7fe f8dd 	bl	8010f20 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8012d66:	480c      	ldr	r0, [pc, #48]	; (8012d98 <prvInitialiseTaskLists+0x70>)
 8012d68:	f7fe f8da 	bl	8010f20 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8012d6c:	480b      	ldr	r0, [pc, #44]	; (8012d9c <prvInitialiseTaskLists+0x74>)
 8012d6e:	f7fe f8d7 	bl	8010f20 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8012d72:	4b0b      	ldr	r3, [pc, #44]	; (8012da0 <prvInitialiseTaskLists+0x78>)
 8012d74:	4a05      	ldr	r2, [pc, #20]	; (8012d8c <prvInitialiseTaskLists+0x64>)
 8012d76:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8012d78:	4b0a      	ldr	r3, [pc, #40]	; (8012da4 <prvInitialiseTaskLists+0x7c>)
 8012d7a:	4a05      	ldr	r2, [pc, #20]	; (8012d90 <prvInitialiseTaskLists+0x68>)
 8012d7c:	601a      	str	r2, [r3, #0]
}
 8012d7e:	bf00      	nop
 8012d80:	3708      	adds	r7, #8
 8012d82:	46bd      	mov	sp, r7
 8012d84:	bd80      	pop	{r7, pc}
 8012d86:	bf00      	nop
 8012d88:	2002da34 	.word	0x2002da34
 8012d8c:	2002de94 	.word	0x2002de94
 8012d90:	2002dea8 	.word	0x2002dea8
 8012d94:	2002dec4 	.word	0x2002dec4
 8012d98:	2002ded8 	.word	0x2002ded8
 8012d9c:	2002def0 	.word	0x2002def0
 8012da0:	2002debc 	.word	0x2002debc
 8012da4:	2002dec0 	.word	0x2002dec0

08012da8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8012da8:	b580      	push	{r7, lr}
 8012daa:	b082      	sub	sp, #8
 8012dac:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8012dae:	e019      	b.n	8012de4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8012db0:	f7fd fdc4 	bl	801093c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8012db4:	4b0f      	ldr	r3, [pc, #60]	; (8012df4 <prvCheckTasksWaitingTermination+0x4c>)
 8012db6:	68db      	ldr	r3, [r3, #12]
 8012db8:	68db      	ldr	r3, [r3, #12]
 8012dba:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8012dbc:	687b      	ldr	r3, [r7, #4]
 8012dbe:	3304      	adds	r3, #4
 8012dc0:	4618      	mov	r0, r3
 8012dc2:	f7fe f937 	bl	8011034 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8012dc6:	4b0c      	ldr	r3, [pc, #48]	; (8012df8 <prvCheckTasksWaitingTermination+0x50>)
 8012dc8:	681b      	ldr	r3, [r3, #0]
 8012dca:	3b01      	subs	r3, #1
 8012dcc:	4a0a      	ldr	r2, [pc, #40]	; (8012df8 <prvCheckTasksWaitingTermination+0x50>)
 8012dce:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8012dd0:	4b0a      	ldr	r3, [pc, #40]	; (8012dfc <prvCheckTasksWaitingTermination+0x54>)
 8012dd2:	681b      	ldr	r3, [r3, #0]
 8012dd4:	3b01      	subs	r3, #1
 8012dd6:	4a09      	ldr	r2, [pc, #36]	; (8012dfc <prvCheckTasksWaitingTermination+0x54>)
 8012dd8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8012dda:	f7fd fddd 	bl	8010998 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8012dde:	6878      	ldr	r0, [r7, #4]
 8012de0:	f000 f80e 	bl	8012e00 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8012de4:	4b05      	ldr	r3, [pc, #20]	; (8012dfc <prvCheckTasksWaitingTermination+0x54>)
 8012de6:	681b      	ldr	r3, [r3, #0]
 8012de8:	2b00      	cmp	r3, #0
 8012dea:	d1e1      	bne.n	8012db0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8012dec:	bf00      	nop
 8012dee:	3708      	adds	r7, #8
 8012df0:	46bd      	mov	sp, r7
 8012df2:	bd80      	pop	{r7, pc}
 8012df4:	2002ded8 	.word	0x2002ded8
 8012df8:	2002df04 	.word	0x2002df04
 8012dfc:	2002deec 	.word	0x2002deec

08012e00 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8012e00:	b580      	push	{r7, lr}
 8012e02:	b084      	sub	sp, #16
 8012e04:	af00      	add	r7, sp, #0
 8012e06:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8012e08:	687b      	ldr	r3, [r7, #4]
 8012e0a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8012e0e:	2b00      	cmp	r3, #0
 8012e10:	d108      	bne.n	8012e24 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8012e12:	687b      	ldr	r3, [r7, #4]
 8012e14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012e16:	4618      	mov	r0, r3
 8012e18:	f7fd ff6c 	bl	8010cf4 <vPortFree>
				vPortFree( pxTCB );
 8012e1c:	6878      	ldr	r0, [r7, #4]
 8012e1e:	f7fd ff69 	bl	8010cf4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8012e22:	e017      	b.n	8012e54 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8012e24:	687b      	ldr	r3, [r7, #4]
 8012e26:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8012e2a:	2b01      	cmp	r3, #1
 8012e2c:	d103      	bne.n	8012e36 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8012e2e:	6878      	ldr	r0, [r7, #4]
 8012e30:	f7fd ff60 	bl	8010cf4 <vPortFree>
	}
 8012e34:	e00e      	b.n	8012e54 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8012e36:	687b      	ldr	r3, [r7, #4]
 8012e38:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8012e3c:	2b02      	cmp	r3, #2
 8012e3e:	d009      	beq.n	8012e54 <prvDeleteTCB+0x54>
 8012e40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012e44:	f383 8811 	msr	BASEPRI, r3
 8012e48:	f3bf 8f6f 	isb	sy
 8012e4c:	f3bf 8f4f 	dsb	sy
 8012e50:	60fb      	str	r3, [r7, #12]
 8012e52:	e7fe      	b.n	8012e52 <prvDeleteTCB+0x52>
	}
 8012e54:	bf00      	nop
 8012e56:	3710      	adds	r7, #16
 8012e58:	46bd      	mov	sp, r7
 8012e5a:	bd80      	pop	{r7, pc}

08012e5c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8012e5c:	b480      	push	{r7}
 8012e5e:	b083      	sub	sp, #12
 8012e60:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8012e62:	4b0c      	ldr	r3, [pc, #48]	; (8012e94 <prvResetNextTaskUnblockTime+0x38>)
 8012e64:	681b      	ldr	r3, [r3, #0]
 8012e66:	681b      	ldr	r3, [r3, #0]
 8012e68:	2b00      	cmp	r3, #0
 8012e6a:	d104      	bne.n	8012e76 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8012e6c:	4b0a      	ldr	r3, [pc, #40]	; (8012e98 <prvResetNextTaskUnblockTime+0x3c>)
 8012e6e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8012e72:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8012e74:	e008      	b.n	8012e88 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8012e76:	4b07      	ldr	r3, [pc, #28]	; (8012e94 <prvResetNextTaskUnblockTime+0x38>)
 8012e78:	681b      	ldr	r3, [r3, #0]
 8012e7a:	68db      	ldr	r3, [r3, #12]
 8012e7c:	68db      	ldr	r3, [r3, #12]
 8012e7e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8012e80:	687b      	ldr	r3, [r7, #4]
 8012e82:	685b      	ldr	r3, [r3, #4]
 8012e84:	4a04      	ldr	r2, [pc, #16]	; (8012e98 <prvResetNextTaskUnblockTime+0x3c>)
 8012e86:	6013      	str	r3, [r2, #0]
}
 8012e88:	bf00      	nop
 8012e8a:	370c      	adds	r7, #12
 8012e8c:	46bd      	mov	sp, r7
 8012e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e92:	4770      	bx	lr
 8012e94:	2002debc 	.word	0x2002debc
 8012e98:	2002df24 	.word	0x2002df24

08012e9c <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8012e9c:	b480      	push	{r7}
 8012e9e:	b083      	sub	sp, #12
 8012ea0:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 8012ea2:	4b05      	ldr	r3, [pc, #20]	; (8012eb8 <xTaskGetCurrentTaskHandle+0x1c>)
 8012ea4:	681b      	ldr	r3, [r3, #0]
 8012ea6:	607b      	str	r3, [r7, #4]

		return xReturn;
 8012ea8:	687b      	ldr	r3, [r7, #4]
	}
 8012eaa:	4618      	mov	r0, r3
 8012eac:	370c      	adds	r7, #12
 8012eae:	46bd      	mov	sp, r7
 8012eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012eb4:	4770      	bx	lr
 8012eb6:	bf00      	nop
 8012eb8:	2002da30 	.word	0x2002da30

08012ebc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8012ebc:	b480      	push	{r7}
 8012ebe:	b083      	sub	sp, #12
 8012ec0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8012ec2:	4b0b      	ldr	r3, [pc, #44]	; (8012ef0 <xTaskGetSchedulerState+0x34>)
 8012ec4:	681b      	ldr	r3, [r3, #0]
 8012ec6:	2b00      	cmp	r3, #0
 8012ec8:	d102      	bne.n	8012ed0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8012eca:	2301      	movs	r3, #1
 8012ecc:	607b      	str	r3, [r7, #4]
 8012ece:	e008      	b.n	8012ee2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8012ed0:	4b08      	ldr	r3, [pc, #32]	; (8012ef4 <xTaskGetSchedulerState+0x38>)
 8012ed2:	681b      	ldr	r3, [r3, #0]
 8012ed4:	2b00      	cmp	r3, #0
 8012ed6:	d102      	bne.n	8012ede <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8012ed8:	2302      	movs	r3, #2
 8012eda:	607b      	str	r3, [r7, #4]
 8012edc:	e001      	b.n	8012ee2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8012ede:	2300      	movs	r3, #0
 8012ee0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8012ee2:	687b      	ldr	r3, [r7, #4]
	}
 8012ee4:	4618      	mov	r0, r3
 8012ee6:	370c      	adds	r7, #12
 8012ee8:	46bd      	mov	sp, r7
 8012eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012eee:	4770      	bx	lr
 8012ef0:	2002df10 	.word	0x2002df10
 8012ef4:	2002df2c 	.word	0x2002df2c

08012ef8 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8012ef8:	b580      	push	{r7, lr}
 8012efa:	b084      	sub	sp, #16
 8012efc:	af00      	add	r7, sp, #0
 8012efe:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8012f00:	687b      	ldr	r3, [r7, #4]
 8012f02:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8012f04:	2300      	movs	r3, #0
 8012f06:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8012f08:	687b      	ldr	r3, [r7, #4]
 8012f0a:	2b00      	cmp	r3, #0
 8012f0c:	d051      	beq.n	8012fb2 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8012f0e:	68bb      	ldr	r3, [r7, #8]
 8012f10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012f12:	4b2a      	ldr	r3, [pc, #168]	; (8012fbc <xTaskPriorityInherit+0xc4>)
 8012f14:	681b      	ldr	r3, [r3, #0]
 8012f16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012f18:	429a      	cmp	r2, r3
 8012f1a:	d241      	bcs.n	8012fa0 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8012f1c:	68bb      	ldr	r3, [r7, #8]
 8012f1e:	699b      	ldr	r3, [r3, #24]
 8012f20:	2b00      	cmp	r3, #0
 8012f22:	db06      	blt.n	8012f32 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8012f24:	4b25      	ldr	r3, [pc, #148]	; (8012fbc <xTaskPriorityInherit+0xc4>)
 8012f26:	681b      	ldr	r3, [r3, #0]
 8012f28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012f2a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8012f2e:	68bb      	ldr	r3, [r7, #8]
 8012f30:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8012f32:	68bb      	ldr	r3, [r7, #8]
 8012f34:	6959      	ldr	r1, [r3, #20]
 8012f36:	68bb      	ldr	r3, [r7, #8]
 8012f38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012f3a:	4613      	mov	r3, r2
 8012f3c:	009b      	lsls	r3, r3, #2
 8012f3e:	4413      	add	r3, r2
 8012f40:	009b      	lsls	r3, r3, #2
 8012f42:	4a1f      	ldr	r2, [pc, #124]	; (8012fc0 <xTaskPriorityInherit+0xc8>)
 8012f44:	4413      	add	r3, r2
 8012f46:	4299      	cmp	r1, r3
 8012f48:	d122      	bne.n	8012f90 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8012f4a:	68bb      	ldr	r3, [r7, #8]
 8012f4c:	3304      	adds	r3, #4
 8012f4e:	4618      	mov	r0, r3
 8012f50:	f7fe f870 	bl	8011034 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8012f54:	4b19      	ldr	r3, [pc, #100]	; (8012fbc <xTaskPriorityInherit+0xc4>)
 8012f56:	681b      	ldr	r3, [r3, #0]
 8012f58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012f5a:	68bb      	ldr	r3, [r7, #8]
 8012f5c:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8012f5e:	68bb      	ldr	r3, [r7, #8]
 8012f60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012f62:	4b18      	ldr	r3, [pc, #96]	; (8012fc4 <xTaskPriorityInherit+0xcc>)
 8012f64:	681b      	ldr	r3, [r3, #0]
 8012f66:	429a      	cmp	r2, r3
 8012f68:	d903      	bls.n	8012f72 <xTaskPriorityInherit+0x7a>
 8012f6a:	68bb      	ldr	r3, [r7, #8]
 8012f6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012f6e:	4a15      	ldr	r2, [pc, #84]	; (8012fc4 <xTaskPriorityInherit+0xcc>)
 8012f70:	6013      	str	r3, [r2, #0]
 8012f72:	68bb      	ldr	r3, [r7, #8]
 8012f74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012f76:	4613      	mov	r3, r2
 8012f78:	009b      	lsls	r3, r3, #2
 8012f7a:	4413      	add	r3, r2
 8012f7c:	009b      	lsls	r3, r3, #2
 8012f7e:	4a10      	ldr	r2, [pc, #64]	; (8012fc0 <xTaskPriorityInherit+0xc8>)
 8012f80:	441a      	add	r2, r3
 8012f82:	68bb      	ldr	r3, [r7, #8]
 8012f84:	3304      	adds	r3, #4
 8012f86:	4619      	mov	r1, r3
 8012f88:	4610      	mov	r0, r2
 8012f8a:	f7fd fff6 	bl	8010f7a <vListInsertEnd>
 8012f8e:	e004      	b.n	8012f9a <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8012f90:	4b0a      	ldr	r3, [pc, #40]	; (8012fbc <xTaskPriorityInherit+0xc4>)
 8012f92:	681b      	ldr	r3, [r3, #0]
 8012f94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012f96:	68bb      	ldr	r3, [r7, #8]
 8012f98:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8012f9a:	2301      	movs	r3, #1
 8012f9c:	60fb      	str	r3, [r7, #12]
 8012f9e:	e008      	b.n	8012fb2 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8012fa0:	68bb      	ldr	r3, [r7, #8]
 8012fa2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8012fa4:	4b05      	ldr	r3, [pc, #20]	; (8012fbc <xTaskPriorityInherit+0xc4>)
 8012fa6:	681b      	ldr	r3, [r3, #0]
 8012fa8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012faa:	429a      	cmp	r2, r3
 8012fac:	d201      	bcs.n	8012fb2 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8012fae:	2301      	movs	r3, #1
 8012fb0:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8012fb2:	68fb      	ldr	r3, [r7, #12]
	}
 8012fb4:	4618      	mov	r0, r3
 8012fb6:	3710      	adds	r7, #16
 8012fb8:	46bd      	mov	sp, r7
 8012fba:	bd80      	pop	{r7, pc}
 8012fbc:	2002da30 	.word	0x2002da30
 8012fc0:	2002da34 	.word	0x2002da34
 8012fc4:	2002df0c 	.word	0x2002df0c

08012fc8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8012fc8:	b580      	push	{r7, lr}
 8012fca:	b086      	sub	sp, #24
 8012fcc:	af00      	add	r7, sp, #0
 8012fce:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8012fd0:	687b      	ldr	r3, [r7, #4]
 8012fd2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8012fd4:	2300      	movs	r3, #0
 8012fd6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8012fd8:	687b      	ldr	r3, [r7, #4]
 8012fda:	2b00      	cmp	r3, #0
 8012fdc:	d054      	beq.n	8013088 <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8012fde:	4b2d      	ldr	r3, [pc, #180]	; (8013094 <xTaskPriorityDisinherit+0xcc>)
 8012fe0:	681b      	ldr	r3, [r3, #0]
 8012fe2:	693a      	ldr	r2, [r7, #16]
 8012fe4:	429a      	cmp	r2, r3
 8012fe6:	d009      	beq.n	8012ffc <xTaskPriorityDisinherit+0x34>
 8012fe8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012fec:	f383 8811 	msr	BASEPRI, r3
 8012ff0:	f3bf 8f6f 	isb	sy
 8012ff4:	f3bf 8f4f 	dsb	sy
 8012ff8:	60fb      	str	r3, [r7, #12]
 8012ffa:	e7fe      	b.n	8012ffa <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8012ffc:	693b      	ldr	r3, [r7, #16]
 8012ffe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8013000:	2b00      	cmp	r3, #0
 8013002:	d109      	bne.n	8013018 <xTaskPriorityDisinherit+0x50>
 8013004:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013008:	f383 8811 	msr	BASEPRI, r3
 801300c:	f3bf 8f6f 	isb	sy
 8013010:	f3bf 8f4f 	dsb	sy
 8013014:	60bb      	str	r3, [r7, #8]
 8013016:	e7fe      	b.n	8013016 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8013018:	693b      	ldr	r3, [r7, #16]
 801301a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801301c:	1e5a      	subs	r2, r3, #1
 801301e:	693b      	ldr	r3, [r7, #16]
 8013020:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8013022:	693b      	ldr	r3, [r7, #16]
 8013024:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013026:	693b      	ldr	r3, [r7, #16]
 8013028:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801302a:	429a      	cmp	r2, r3
 801302c:	d02c      	beq.n	8013088 <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 801302e:	693b      	ldr	r3, [r7, #16]
 8013030:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8013032:	2b00      	cmp	r3, #0
 8013034:	d128      	bne.n	8013088 <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8013036:	693b      	ldr	r3, [r7, #16]
 8013038:	3304      	adds	r3, #4
 801303a:	4618      	mov	r0, r3
 801303c:	f7fd fffa 	bl	8011034 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8013040:	693b      	ldr	r3, [r7, #16]
 8013042:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8013044:	693b      	ldr	r3, [r7, #16]
 8013046:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8013048:	693b      	ldr	r3, [r7, #16]
 801304a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801304c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8013050:	693b      	ldr	r3, [r7, #16]
 8013052:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8013054:	693b      	ldr	r3, [r7, #16]
 8013056:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013058:	4b0f      	ldr	r3, [pc, #60]	; (8013098 <xTaskPriorityDisinherit+0xd0>)
 801305a:	681b      	ldr	r3, [r3, #0]
 801305c:	429a      	cmp	r2, r3
 801305e:	d903      	bls.n	8013068 <xTaskPriorityDisinherit+0xa0>
 8013060:	693b      	ldr	r3, [r7, #16]
 8013062:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013064:	4a0c      	ldr	r2, [pc, #48]	; (8013098 <xTaskPriorityDisinherit+0xd0>)
 8013066:	6013      	str	r3, [r2, #0]
 8013068:	693b      	ldr	r3, [r7, #16]
 801306a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801306c:	4613      	mov	r3, r2
 801306e:	009b      	lsls	r3, r3, #2
 8013070:	4413      	add	r3, r2
 8013072:	009b      	lsls	r3, r3, #2
 8013074:	4a09      	ldr	r2, [pc, #36]	; (801309c <xTaskPriorityDisinherit+0xd4>)
 8013076:	441a      	add	r2, r3
 8013078:	693b      	ldr	r3, [r7, #16]
 801307a:	3304      	adds	r3, #4
 801307c:	4619      	mov	r1, r3
 801307e:	4610      	mov	r0, r2
 8013080:	f7fd ff7b 	bl	8010f7a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8013084:	2301      	movs	r3, #1
 8013086:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8013088:	697b      	ldr	r3, [r7, #20]
	}
 801308a:	4618      	mov	r0, r3
 801308c:	3718      	adds	r7, #24
 801308e:	46bd      	mov	sp, r7
 8013090:	bd80      	pop	{r7, pc}
 8013092:	bf00      	nop
 8013094:	2002da30 	.word	0x2002da30
 8013098:	2002df0c 	.word	0x2002df0c
 801309c:	2002da34 	.word	0x2002da34

080130a0 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80130a0:	b580      	push	{r7, lr}
 80130a2:	b088      	sub	sp, #32
 80130a4:	af00      	add	r7, sp, #0
 80130a6:	6078      	str	r0, [r7, #4]
 80130a8:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 80130aa:	687b      	ldr	r3, [r7, #4]
 80130ac:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80130ae:	2301      	movs	r3, #1
 80130b0:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80130b2:	687b      	ldr	r3, [r7, #4]
 80130b4:	2b00      	cmp	r3, #0
 80130b6:	d068      	beq.n	801318a <vTaskPriorityDisinheritAfterTimeout+0xea>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80130b8:	69bb      	ldr	r3, [r7, #24]
 80130ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80130bc:	2b00      	cmp	r3, #0
 80130be:	d109      	bne.n	80130d4 <vTaskPriorityDisinheritAfterTimeout+0x34>
 80130c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80130c4:	f383 8811 	msr	BASEPRI, r3
 80130c8:	f3bf 8f6f 	isb	sy
 80130cc:	f3bf 8f4f 	dsb	sy
 80130d0:	60fb      	str	r3, [r7, #12]
 80130d2:	e7fe      	b.n	80130d2 <vTaskPriorityDisinheritAfterTimeout+0x32>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80130d4:	69bb      	ldr	r3, [r7, #24]
 80130d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80130d8:	683a      	ldr	r2, [r7, #0]
 80130da:	429a      	cmp	r2, r3
 80130dc:	d902      	bls.n	80130e4 <vTaskPriorityDisinheritAfterTimeout+0x44>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80130de:	683b      	ldr	r3, [r7, #0]
 80130e0:	61fb      	str	r3, [r7, #28]
 80130e2:	e002      	b.n	80130ea <vTaskPriorityDisinheritAfterTimeout+0x4a>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80130e4:	69bb      	ldr	r3, [r7, #24]
 80130e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80130e8:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80130ea:	69bb      	ldr	r3, [r7, #24]
 80130ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80130ee:	69fa      	ldr	r2, [r7, #28]
 80130f0:	429a      	cmp	r2, r3
 80130f2:	d04a      	beq.n	801318a <vTaskPriorityDisinheritAfterTimeout+0xea>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80130f4:	69bb      	ldr	r3, [r7, #24]
 80130f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80130f8:	697a      	ldr	r2, [r7, #20]
 80130fa:	429a      	cmp	r2, r3
 80130fc:	d145      	bne.n	801318a <vTaskPriorityDisinheritAfterTimeout+0xea>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80130fe:	4b25      	ldr	r3, [pc, #148]	; (8013194 <vTaskPriorityDisinheritAfterTimeout+0xf4>)
 8013100:	681b      	ldr	r3, [r3, #0]
 8013102:	69ba      	ldr	r2, [r7, #24]
 8013104:	429a      	cmp	r2, r3
 8013106:	d109      	bne.n	801311c <vTaskPriorityDisinheritAfterTimeout+0x7c>
 8013108:	f04f 0350 	mov.w	r3, #80	; 0x50
 801310c:	f383 8811 	msr	BASEPRI, r3
 8013110:	f3bf 8f6f 	isb	sy
 8013114:	f3bf 8f4f 	dsb	sy
 8013118:	60bb      	str	r3, [r7, #8]
 801311a:	e7fe      	b.n	801311a <vTaskPriorityDisinheritAfterTimeout+0x7a>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 801311c:	69bb      	ldr	r3, [r7, #24]
 801311e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013120:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8013122:	69bb      	ldr	r3, [r7, #24]
 8013124:	69fa      	ldr	r2, [r7, #28]
 8013126:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8013128:	69bb      	ldr	r3, [r7, #24]
 801312a:	699b      	ldr	r3, [r3, #24]
 801312c:	2b00      	cmp	r3, #0
 801312e:	db04      	blt.n	801313a <vTaskPriorityDisinheritAfterTimeout+0x9a>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8013130:	69fb      	ldr	r3, [r7, #28]
 8013132:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8013136:	69bb      	ldr	r3, [r7, #24]
 8013138:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 801313a:	69bb      	ldr	r3, [r7, #24]
 801313c:	6959      	ldr	r1, [r3, #20]
 801313e:	693a      	ldr	r2, [r7, #16]
 8013140:	4613      	mov	r3, r2
 8013142:	009b      	lsls	r3, r3, #2
 8013144:	4413      	add	r3, r2
 8013146:	009b      	lsls	r3, r3, #2
 8013148:	4a13      	ldr	r2, [pc, #76]	; (8013198 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 801314a:	4413      	add	r3, r2
 801314c:	4299      	cmp	r1, r3
 801314e:	d11c      	bne.n	801318a <vTaskPriorityDisinheritAfterTimeout+0xea>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8013150:	69bb      	ldr	r3, [r7, #24]
 8013152:	3304      	adds	r3, #4
 8013154:	4618      	mov	r0, r3
 8013156:	f7fd ff6d 	bl	8011034 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 801315a:	69bb      	ldr	r3, [r7, #24]
 801315c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801315e:	4b0f      	ldr	r3, [pc, #60]	; (801319c <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8013160:	681b      	ldr	r3, [r3, #0]
 8013162:	429a      	cmp	r2, r3
 8013164:	d903      	bls.n	801316e <vTaskPriorityDisinheritAfterTimeout+0xce>
 8013166:	69bb      	ldr	r3, [r7, #24]
 8013168:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801316a:	4a0c      	ldr	r2, [pc, #48]	; (801319c <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 801316c:	6013      	str	r3, [r2, #0]
 801316e:	69bb      	ldr	r3, [r7, #24]
 8013170:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013172:	4613      	mov	r3, r2
 8013174:	009b      	lsls	r3, r3, #2
 8013176:	4413      	add	r3, r2
 8013178:	009b      	lsls	r3, r3, #2
 801317a:	4a07      	ldr	r2, [pc, #28]	; (8013198 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 801317c:	441a      	add	r2, r3
 801317e:	69bb      	ldr	r3, [r7, #24]
 8013180:	3304      	adds	r3, #4
 8013182:	4619      	mov	r1, r3
 8013184:	4610      	mov	r0, r2
 8013186:	f7fd fef8 	bl	8010f7a <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 801318a:	bf00      	nop
 801318c:	3720      	adds	r7, #32
 801318e:	46bd      	mov	sp, r7
 8013190:	bd80      	pop	{r7, pc}
 8013192:	bf00      	nop
 8013194:	2002da30 	.word	0x2002da30
 8013198:	2002da34 	.word	0x2002da34
 801319c:	2002df0c 	.word	0x2002df0c

080131a0 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 80131a0:	b480      	push	{r7}
 80131a2:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80131a4:	4b07      	ldr	r3, [pc, #28]	; (80131c4 <pvTaskIncrementMutexHeldCount+0x24>)
 80131a6:	681b      	ldr	r3, [r3, #0]
 80131a8:	2b00      	cmp	r3, #0
 80131aa:	d004      	beq.n	80131b6 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80131ac:	4b05      	ldr	r3, [pc, #20]	; (80131c4 <pvTaskIncrementMutexHeldCount+0x24>)
 80131ae:	681b      	ldr	r3, [r3, #0]
 80131b0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80131b2:	3201      	adds	r2, #1
 80131b4:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 80131b6:	4b03      	ldr	r3, [pc, #12]	; (80131c4 <pvTaskIncrementMutexHeldCount+0x24>)
 80131b8:	681b      	ldr	r3, [r3, #0]
	}
 80131ba:	4618      	mov	r0, r3
 80131bc:	46bd      	mov	sp, r7
 80131be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80131c2:	4770      	bx	lr
 80131c4:	2002da30 	.word	0x2002da30

080131c8 <ulTaskNotifyTake>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
	{
 80131c8:	b580      	push	{r7, lr}
 80131ca:	b084      	sub	sp, #16
 80131cc:	af00      	add	r7, sp, #0
 80131ce:	6078      	str	r0, [r7, #4]
 80131d0:	6039      	str	r1, [r7, #0]
	uint32_t ulReturn;

		taskENTER_CRITICAL();
 80131d2:	f7fd fbb3 	bl	801093c <vPortEnterCritical>
		{
			/* Only block if the notification count is not already non-zero. */
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 80131d6:	4b1e      	ldr	r3, [pc, #120]	; (8013250 <ulTaskNotifyTake+0x88>)
 80131d8:	681b      	ldr	r3, [r3, #0]
 80131da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80131dc:	2b00      	cmp	r3, #0
 80131de:	d113      	bne.n	8013208 <ulTaskNotifyTake+0x40>
			{
				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 80131e0:	4b1b      	ldr	r3, [pc, #108]	; (8013250 <ulTaskNotifyTake+0x88>)
 80131e2:	681b      	ldr	r3, [r3, #0]
 80131e4:	2201      	movs	r2, #1
 80131e6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

				if( xTicksToWait > ( TickType_t ) 0 )
 80131ea:	683b      	ldr	r3, [r7, #0]
 80131ec:	2b00      	cmp	r3, #0
 80131ee:	d00b      	beq.n	8013208 <ulTaskNotifyTake+0x40>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80131f0:	2101      	movs	r1, #1
 80131f2:	6838      	ldr	r0, [r7, #0]
 80131f4:	f000 fa3e 	bl	8013674 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 80131f8:	4b16      	ldr	r3, [pc, #88]	; (8013254 <ulTaskNotifyTake+0x8c>)
 80131fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80131fe:	601a      	str	r2, [r3, #0]
 8013200:	f3bf 8f4f 	dsb	sy
 8013204:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8013208:	f7fd fbc6 	bl	8010998 <vPortExitCritical>

		taskENTER_CRITICAL();
 801320c:	f7fd fb96 	bl	801093c <vPortEnterCritical>
		{
			traceTASK_NOTIFY_TAKE();
			ulReturn = pxCurrentTCB->ulNotifiedValue;
 8013210:	4b0f      	ldr	r3, [pc, #60]	; (8013250 <ulTaskNotifyTake+0x88>)
 8013212:	681b      	ldr	r3, [r3, #0]
 8013214:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8013216:	60fb      	str	r3, [r7, #12]

			if( ulReturn != 0UL )
 8013218:	68fb      	ldr	r3, [r7, #12]
 801321a:	2b00      	cmp	r3, #0
 801321c:	d00c      	beq.n	8013238 <ulTaskNotifyTake+0x70>
			{
				if( xClearCountOnExit != pdFALSE )
 801321e:	687b      	ldr	r3, [r7, #4]
 8013220:	2b00      	cmp	r3, #0
 8013222:	d004      	beq.n	801322e <ulTaskNotifyTake+0x66>
				{
					pxCurrentTCB->ulNotifiedValue = 0UL;
 8013224:	4b0a      	ldr	r3, [pc, #40]	; (8013250 <ulTaskNotifyTake+0x88>)
 8013226:	681b      	ldr	r3, [r3, #0]
 8013228:	2200      	movs	r2, #0
 801322a:	655a      	str	r2, [r3, #84]	; 0x54
 801322c:	e004      	b.n	8013238 <ulTaskNotifyTake+0x70>
				}
				else
				{
					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
 801322e:	4b08      	ldr	r3, [pc, #32]	; (8013250 <ulTaskNotifyTake+0x88>)
 8013230:	681b      	ldr	r3, [r3, #0]
 8013232:	68fa      	ldr	r2, [r7, #12]
 8013234:	3a01      	subs	r2, #1
 8013236:	655a      	str	r2, [r3, #84]	; 0x54
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8013238:	4b05      	ldr	r3, [pc, #20]	; (8013250 <ulTaskNotifyTake+0x88>)
 801323a:	681b      	ldr	r3, [r3, #0]
 801323c:	2200      	movs	r2, #0
 801323e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
		}
		taskEXIT_CRITICAL();
 8013242:	f7fd fba9 	bl	8010998 <vPortExitCritical>

		return ulReturn;
 8013246:	68fb      	ldr	r3, [r7, #12]
	}
 8013248:	4618      	mov	r0, r3
 801324a:	3710      	adds	r7, #16
 801324c:	46bd      	mov	sp, r7
 801324e:	bd80      	pop	{r7, pc}
 8013250:	2002da30 	.word	0x2002da30
 8013254:	e000ed04 	.word	0xe000ed04

08013258 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 8013258:	b580      	push	{r7, lr}
 801325a:	b086      	sub	sp, #24
 801325c:	af00      	add	r7, sp, #0
 801325e:	60f8      	str	r0, [r7, #12]
 8013260:	60b9      	str	r1, [r7, #8]
 8013262:	607a      	str	r2, [r7, #4]
 8013264:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 8013266:	f7fd fb69 	bl	801093c <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 801326a:	4b26      	ldr	r3, [pc, #152]	; (8013304 <xTaskNotifyWait+0xac>)
 801326c:	681b      	ldr	r3, [r3, #0]
 801326e:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8013272:	b2db      	uxtb	r3, r3
 8013274:	2b02      	cmp	r3, #2
 8013276:	d01a      	beq.n	80132ae <xTaskNotifyWait+0x56>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 8013278:	4b22      	ldr	r3, [pc, #136]	; (8013304 <xTaskNotifyWait+0xac>)
 801327a:	681b      	ldr	r3, [r3, #0]
 801327c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 801327e:	68fa      	ldr	r2, [r7, #12]
 8013280:	43d2      	mvns	r2, r2
 8013282:	400a      	ands	r2, r1
 8013284:	655a      	str	r2, [r3, #84]	; 0x54

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 8013286:	4b1f      	ldr	r3, [pc, #124]	; (8013304 <xTaskNotifyWait+0xac>)
 8013288:	681b      	ldr	r3, [r3, #0]
 801328a:	2201      	movs	r2, #1
 801328c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

				if( xTicksToWait > ( TickType_t ) 0 )
 8013290:	683b      	ldr	r3, [r7, #0]
 8013292:	2b00      	cmp	r3, #0
 8013294:	d00b      	beq.n	80132ae <xTaskNotifyWait+0x56>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8013296:	2101      	movs	r1, #1
 8013298:	6838      	ldr	r0, [r7, #0]
 801329a:	f000 f9eb 	bl	8013674 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 801329e:	4b1a      	ldr	r3, [pc, #104]	; (8013308 <xTaskNotifyWait+0xb0>)
 80132a0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80132a4:	601a      	str	r2, [r3, #0]
 80132a6:	f3bf 8f4f 	dsb	sy
 80132aa:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 80132ae:	f7fd fb73 	bl	8010998 <vPortExitCritical>

		taskENTER_CRITICAL();
 80132b2:	f7fd fb43 	bl	801093c <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 80132b6:	687b      	ldr	r3, [r7, #4]
 80132b8:	2b00      	cmp	r3, #0
 80132ba:	d004      	beq.n	80132c6 <xTaskNotifyWait+0x6e>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 80132bc:	4b11      	ldr	r3, [pc, #68]	; (8013304 <xTaskNotifyWait+0xac>)
 80132be:	681b      	ldr	r3, [r3, #0]
 80132c0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80132c2:	687b      	ldr	r3, [r7, #4]
 80132c4:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 80132c6:	4b0f      	ldr	r3, [pc, #60]	; (8013304 <xTaskNotifyWait+0xac>)
 80132c8:	681b      	ldr	r3, [r3, #0]
 80132ca:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80132ce:	b2db      	uxtb	r3, r3
 80132d0:	2b02      	cmp	r3, #2
 80132d2:	d002      	beq.n	80132da <xTaskNotifyWait+0x82>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 80132d4:	2300      	movs	r3, #0
 80132d6:	617b      	str	r3, [r7, #20]
 80132d8:	e008      	b.n	80132ec <xTaskNotifyWait+0x94>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 80132da:	4b0a      	ldr	r3, [pc, #40]	; (8013304 <xTaskNotifyWait+0xac>)
 80132dc:	681b      	ldr	r3, [r3, #0]
 80132de:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80132e0:	68ba      	ldr	r2, [r7, #8]
 80132e2:	43d2      	mvns	r2, r2
 80132e4:	400a      	ands	r2, r1
 80132e6:	655a      	str	r2, [r3, #84]	; 0x54
				xReturn = pdTRUE;
 80132e8:	2301      	movs	r3, #1
 80132ea:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80132ec:	4b05      	ldr	r3, [pc, #20]	; (8013304 <xTaskNotifyWait+0xac>)
 80132ee:	681b      	ldr	r3, [r3, #0]
 80132f0:	2200      	movs	r2, #0
 80132f2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
		}
		taskEXIT_CRITICAL();
 80132f6:	f7fd fb4f 	bl	8010998 <vPortExitCritical>

		return xReturn;
 80132fa:	697b      	ldr	r3, [r7, #20]
	}
 80132fc:	4618      	mov	r0, r3
 80132fe:	3718      	adds	r7, #24
 8013300:	46bd      	mov	sp, r7
 8013302:	bd80      	pop	{r7, pc}
 8013304:	2002da30 	.word	0x2002da30
 8013308:	e000ed04 	.word	0xe000ed04

0801330c <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 801330c:	b580      	push	{r7, lr}
 801330e:	b08a      	sub	sp, #40	; 0x28
 8013310:	af00      	add	r7, sp, #0
 8013312:	60f8      	str	r0, [r7, #12]
 8013314:	60b9      	str	r1, [r7, #8]
 8013316:	603b      	str	r3, [r7, #0]
 8013318:	4613      	mov	r3, r2
 801331a:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 801331c:	2301      	movs	r3, #1
 801331e:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 8013320:	68fb      	ldr	r3, [r7, #12]
 8013322:	2b00      	cmp	r3, #0
 8013324:	d109      	bne.n	801333a <xTaskGenericNotify+0x2e>
 8013326:	f04f 0350 	mov.w	r3, #80	; 0x50
 801332a:	f383 8811 	msr	BASEPRI, r3
 801332e:	f3bf 8f6f 	isb	sy
 8013332:	f3bf 8f4f 	dsb	sy
 8013336:	61bb      	str	r3, [r7, #24]
 8013338:	e7fe      	b.n	8013338 <xTaskGenericNotify+0x2c>
		pxTCB = xTaskToNotify;
 801333a:	68fb      	ldr	r3, [r7, #12]
 801333c:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 801333e:	f7fd fafd 	bl	801093c <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 8013342:	683b      	ldr	r3, [r7, #0]
 8013344:	2b00      	cmp	r3, #0
 8013346:	d003      	beq.n	8013350 <xTaskGenericNotify+0x44>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8013348:	6a3b      	ldr	r3, [r7, #32]
 801334a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 801334c:	683b      	ldr	r3, [r7, #0]
 801334e:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8013350:	6a3b      	ldr	r3, [r7, #32]
 8013352:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8013356:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8013358:	6a3b      	ldr	r3, [r7, #32]
 801335a:	2202      	movs	r2, #2
 801335c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

			switch( eAction )
 8013360:	79fb      	ldrb	r3, [r7, #7]
 8013362:	2b04      	cmp	r3, #4
 8013364:	d827      	bhi.n	80133b6 <xTaskGenericNotify+0xaa>
 8013366:	a201      	add	r2, pc, #4	; (adr r2, 801336c <xTaskGenericNotify+0x60>)
 8013368:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801336c:	080133d5 	.word	0x080133d5
 8013370:	08013381 	.word	0x08013381
 8013374:	0801338f 	.word	0x0801338f
 8013378:	0801339b 	.word	0x0801339b
 801337c:	080133a3 	.word	0x080133a3
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8013380:	6a3b      	ldr	r3, [r7, #32]
 8013382:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8013384:	68bb      	ldr	r3, [r7, #8]
 8013386:	431a      	orrs	r2, r3
 8013388:	6a3b      	ldr	r3, [r7, #32]
 801338a:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 801338c:	e025      	b.n	80133da <xTaskGenericNotify+0xce>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 801338e:	6a3b      	ldr	r3, [r7, #32]
 8013390:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8013392:	1c5a      	adds	r2, r3, #1
 8013394:	6a3b      	ldr	r3, [r7, #32]
 8013396:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 8013398:	e01f      	b.n	80133da <xTaskGenericNotify+0xce>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 801339a:	6a3b      	ldr	r3, [r7, #32]
 801339c:	68ba      	ldr	r2, [r7, #8]
 801339e:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 80133a0:	e01b      	b.n	80133da <xTaskGenericNotify+0xce>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 80133a2:	7ffb      	ldrb	r3, [r7, #31]
 80133a4:	2b02      	cmp	r3, #2
 80133a6:	d003      	beq.n	80133b0 <xTaskGenericNotify+0xa4>
					{
						pxTCB->ulNotifiedValue = ulValue;
 80133a8:	6a3b      	ldr	r3, [r7, #32]
 80133aa:	68ba      	ldr	r2, [r7, #8]
 80133ac:	655a      	str	r2, [r3, #84]	; 0x54
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 80133ae:	e014      	b.n	80133da <xTaskGenericNotify+0xce>
						xReturn = pdFAIL;
 80133b0:	2300      	movs	r3, #0
 80133b2:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 80133b4:	e011      	b.n	80133da <xTaskGenericNotify+0xce>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 80133b6:	6a3b      	ldr	r3, [r7, #32]
 80133b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80133ba:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80133be:	d00b      	beq.n	80133d8 <xTaskGenericNotify+0xcc>
 80133c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80133c4:	f383 8811 	msr	BASEPRI, r3
 80133c8:	f3bf 8f6f 	isb	sy
 80133cc:	f3bf 8f4f 	dsb	sy
 80133d0:	617b      	str	r3, [r7, #20]
 80133d2:	e7fe      	b.n	80133d2 <xTaskGenericNotify+0xc6>
					break;
 80133d4:	bf00      	nop
 80133d6:	e000      	b.n	80133da <xTaskGenericNotify+0xce>

					break;
 80133d8:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 80133da:	7ffb      	ldrb	r3, [r7, #31]
 80133dc:	2b01      	cmp	r3, #1
 80133de:	d13b      	bne.n	8013458 <xTaskGenericNotify+0x14c>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80133e0:	6a3b      	ldr	r3, [r7, #32]
 80133e2:	3304      	adds	r3, #4
 80133e4:	4618      	mov	r0, r3
 80133e6:	f7fd fe25 	bl	8011034 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 80133ea:	6a3b      	ldr	r3, [r7, #32]
 80133ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80133ee:	4b1e      	ldr	r3, [pc, #120]	; (8013468 <xTaskGenericNotify+0x15c>)
 80133f0:	681b      	ldr	r3, [r3, #0]
 80133f2:	429a      	cmp	r2, r3
 80133f4:	d903      	bls.n	80133fe <xTaskGenericNotify+0xf2>
 80133f6:	6a3b      	ldr	r3, [r7, #32]
 80133f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80133fa:	4a1b      	ldr	r2, [pc, #108]	; (8013468 <xTaskGenericNotify+0x15c>)
 80133fc:	6013      	str	r3, [r2, #0]
 80133fe:	6a3b      	ldr	r3, [r7, #32]
 8013400:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013402:	4613      	mov	r3, r2
 8013404:	009b      	lsls	r3, r3, #2
 8013406:	4413      	add	r3, r2
 8013408:	009b      	lsls	r3, r3, #2
 801340a:	4a18      	ldr	r2, [pc, #96]	; (801346c <xTaskGenericNotify+0x160>)
 801340c:	441a      	add	r2, r3
 801340e:	6a3b      	ldr	r3, [r7, #32]
 8013410:	3304      	adds	r3, #4
 8013412:	4619      	mov	r1, r3
 8013414:	4610      	mov	r0, r2
 8013416:	f7fd fdb0 	bl	8010f7a <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 801341a:	6a3b      	ldr	r3, [r7, #32]
 801341c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801341e:	2b00      	cmp	r3, #0
 8013420:	d009      	beq.n	8013436 <xTaskGenericNotify+0x12a>
 8013422:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013426:	f383 8811 	msr	BASEPRI, r3
 801342a:	f3bf 8f6f 	isb	sy
 801342e:	f3bf 8f4f 	dsb	sy
 8013432:	613b      	str	r3, [r7, #16]
 8013434:	e7fe      	b.n	8013434 <xTaskGenericNotify+0x128>
					the tick count equals xNextTaskUnblockTime.  However if
					tickless idling is used it might be more important to enter
					sleep mode at the earliest possible time - so reset
					xNextTaskUnblockTime here to ensure it is updated at the
					earliest possible time. */
					prvResetNextTaskUnblockTime();
 8013436:	f7ff fd11 	bl	8012e5c <prvResetNextTaskUnblockTime>
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 801343a:	6a3b      	ldr	r3, [r7, #32]
 801343c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801343e:	4b0c      	ldr	r3, [pc, #48]	; (8013470 <xTaskGenericNotify+0x164>)
 8013440:	681b      	ldr	r3, [r3, #0]
 8013442:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013444:	429a      	cmp	r2, r3
 8013446:	d907      	bls.n	8013458 <xTaskGenericNotify+0x14c>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 8013448:	4b0a      	ldr	r3, [pc, #40]	; (8013474 <xTaskGenericNotify+0x168>)
 801344a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801344e:	601a      	str	r2, [r3, #0]
 8013450:	f3bf 8f4f 	dsb	sy
 8013454:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8013458:	f7fd fa9e 	bl	8010998 <vPortExitCritical>

		return xReturn;
 801345c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 801345e:	4618      	mov	r0, r3
 8013460:	3728      	adds	r7, #40	; 0x28
 8013462:	46bd      	mov	sp, r7
 8013464:	bd80      	pop	{r7, pc}
 8013466:	bf00      	nop
 8013468:	2002df0c 	.word	0x2002df0c
 801346c:	2002da34 	.word	0x2002da34
 8013470:	2002da30 	.word	0x2002da30
 8013474:	e000ed04 	.word	0xe000ed04

08013478 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8013478:	b580      	push	{r7, lr}
 801347a:	b08e      	sub	sp, #56	; 0x38
 801347c:	af00      	add	r7, sp, #0
 801347e:	60f8      	str	r0, [r7, #12]
 8013480:	60b9      	str	r1, [r7, #8]
 8013482:	603b      	str	r3, [r7, #0]
 8013484:	4613      	mov	r3, r2
 8013486:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 8013488:	2301      	movs	r3, #1
 801348a:	637b      	str	r3, [r7, #52]	; 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 801348c:	68fb      	ldr	r3, [r7, #12]
 801348e:	2b00      	cmp	r3, #0
 8013490:	d109      	bne.n	80134a6 <xTaskGenericNotifyFromISR+0x2e>
 8013492:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013496:	f383 8811 	msr	BASEPRI, r3
 801349a:	f3bf 8f6f 	isb	sy
 801349e:	f3bf 8f4f 	dsb	sy
 80134a2:	627b      	str	r3, [r7, #36]	; 0x24
 80134a4:	e7fe      	b.n	80134a4 <xTaskGenericNotifyFromISR+0x2c>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80134a6:	f7fd fb25 	bl	8010af4 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 80134aa:	68fb      	ldr	r3, [r7, #12]
 80134ac:	633b      	str	r3, [r7, #48]	; 0x30
	__asm volatile
 80134ae:	f3ef 8211 	mrs	r2, BASEPRI
 80134b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80134b6:	f383 8811 	msr	BASEPRI, r3
 80134ba:	f3bf 8f6f 	isb	sy
 80134be:	f3bf 8f4f 	dsb	sy
 80134c2:	623a      	str	r2, [r7, #32]
 80134c4:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 80134c6:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80134c8:	62fb      	str	r3, [r7, #44]	; 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 80134ca:	683b      	ldr	r3, [r7, #0]
 80134cc:	2b00      	cmp	r3, #0
 80134ce:	d003      	beq.n	80134d8 <xTaskGenericNotifyFromISR+0x60>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 80134d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80134d2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80134d4:	683b      	ldr	r3, [r7, #0]
 80134d6:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 80134d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80134da:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80134de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 80134e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80134e4:	2202      	movs	r2, #2
 80134e6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

			switch( eAction )
 80134ea:	79fb      	ldrb	r3, [r7, #7]
 80134ec:	2b04      	cmp	r3, #4
 80134ee:	d829      	bhi.n	8013544 <xTaskGenericNotifyFromISR+0xcc>
 80134f0:	a201      	add	r2, pc, #4	; (adr r2, 80134f8 <xTaskGenericNotifyFromISR+0x80>)
 80134f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80134f6:	bf00      	nop
 80134f8:	08013563 	.word	0x08013563
 80134fc:	0801350d 	.word	0x0801350d
 8013500:	0801351b 	.word	0x0801351b
 8013504:	08013527 	.word	0x08013527
 8013508:	0801352f 	.word	0x0801352f
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 801350c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801350e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8013510:	68bb      	ldr	r3, [r7, #8]
 8013512:	431a      	orrs	r2, r3
 8013514:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013516:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 8013518:	e026      	b.n	8013568 <xTaskGenericNotifyFromISR+0xf0>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 801351a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801351c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801351e:	1c5a      	adds	r2, r3, #1
 8013520:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013522:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 8013524:	e020      	b.n	8013568 <xTaskGenericNotifyFromISR+0xf0>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8013526:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013528:	68ba      	ldr	r2, [r7, #8]
 801352a:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 801352c:	e01c      	b.n	8013568 <xTaskGenericNotifyFromISR+0xf0>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 801352e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8013532:	2b02      	cmp	r3, #2
 8013534:	d003      	beq.n	801353e <xTaskGenericNotifyFromISR+0xc6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8013536:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013538:	68ba      	ldr	r2, [r7, #8]
 801353a:	655a      	str	r2, [r3, #84]	; 0x54
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 801353c:	e014      	b.n	8013568 <xTaskGenericNotifyFromISR+0xf0>
						xReturn = pdFAIL;
 801353e:	2300      	movs	r3, #0
 8013540:	637b      	str	r3, [r7, #52]	; 0x34
					break;
 8013542:	e011      	b.n	8013568 <xTaskGenericNotifyFromISR+0xf0>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 8013544:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013546:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8013548:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801354c:	d00b      	beq.n	8013566 <xTaskGenericNotifyFromISR+0xee>
	__asm volatile
 801354e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013552:	f383 8811 	msr	BASEPRI, r3
 8013556:	f3bf 8f6f 	isb	sy
 801355a:	f3bf 8f4f 	dsb	sy
 801355e:	61bb      	str	r3, [r7, #24]
 8013560:	e7fe      	b.n	8013560 <xTaskGenericNotifyFromISR+0xe8>
					break;
 8013562:	bf00      	nop
 8013564:	e000      	b.n	8013568 <xTaskGenericNotifyFromISR+0xf0>
					break;
 8013566:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8013568:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 801356c:	2b01      	cmp	r3, #1
 801356e:	d145      	bne.n	80135fc <xTaskGenericNotifyFromISR+0x184>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8013570:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013572:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013574:	2b00      	cmp	r3, #0
 8013576:	d009      	beq.n	801358c <xTaskGenericNotifyFromISR+0x114>
 8013578:	f04f 0350 	mov.w	r3, #80	; 0x50
 801357c:	f383 8811 	msr	BASEPRI, r3
 8013580:	f3bf 8f6f 	isb	sy
 8013584:	f3bf 8f4f 	dsb	sy
 8013588:	617b      	str	r3, [r7, #20]
 801358a:	e7fe      	b.n	801358a <xTaskGenericNotifyFromISR+0x112>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801358c:	4b20      	ldr	r3, [pc, #128]	; (8013610 <xTaskGenericNotifyFromISR+0x198>)
 801358e:	681b      	ldr	r3, [r3, #0]
 8013590:	2b00      	cmp	r3, #0
 8013592:	d11d      	bne.n	80135d0 <xTaskGenericNotifyFromISR+0x158>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8013594:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013596:	3304      	adds	r3, #4
 8013598:	4618      	mov	r0, r3
 801359a:	f7fd fd4b 	bl	8011034 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 801359e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80135a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80135a2:	4b1c      	ldr	r3, [pc, #112]	; (8013614 <xTaskGenericNotifyFromISR+0x19c>)
 80135a4:	681b      	ldr	r3, [r3, #0]
 80135a6:	429a      	cmp	r2, r3
 80135a8:	d903      	bls.n	80135b2 <xTaskGenericNotifyFromISR+0x13a>
 80135aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80135ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80135ae:	4a19      	ldr	r2, [pc, #100]	; (8013614 <xTaskGenericNotifyFromISR+0x19c>)
 80135b0:	6013      	str	r3, [r2, #0]
 80135b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80135b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80135b6:	4613      	mov	r3, r2
 80135b8:	009b      	lsls	r3, r3, #2
 80135ba:	4413      	add	r3, r2
 80135bc:	009b      	lsls	r3, r3, #2
 80135be:	4a16      	ldr	r2, [pc, #88]	; (8013618 <xTaskGenericNotifyFromISR+0x1a0>)
 80135c0:	441a      	add	r2, r3
 80135c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80135c4:	3304      	adds	r3, #4
 80135c6:	4619      	mov	r1, r3
 80135c8:	4610      	mov	r0, r2
 80135ca:	f7fd fcd6 	bl	8010f7a <vListInsertEnd>
 80135ce:	e005      	b.n	80135dc <xTaskGenericNotifyFromISR+0x164>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 80135d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80135d2:	3318      	adds	r3, #24
 80135d4:	4619      	mov	r1, r3
 80135d6:	4811      	ldr	r0, [pc, #68]	; (801361c <xTaskGenericNotifyFromISR+0x1a4>)
 80135d8:	f7fd fccf 	bl	8010f7a <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80135dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80135de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80135e0:	4b0f      	ldr	r3, [pc, #60]	; (8013620 <xTaskGenericNotifyFromISR+0x1a8>)
 80135e2:	681b      	ldr	r3, [r3, #0]
 80135e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80135e6:	429a      	cmp	r2, r3
 80135e8:	d908      	bls.n	80135fc <xTaskGenericNotifyFromISR+0x184>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 80135ea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80135ec:	2b00      	cmp	r3, #0
 80135ee:	d002      	beq.n	80135f6 <xTaskGenericNotifyFromISR+0x17e>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 80135f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80135f2:	2201      	movs	r2, #1
 80135f4:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 80135f6:	4b0b      	ldr	r3, [pc, #44]	; (8013624 <xTaskGenericNotifyFromISR+0x1ac>)
 80135f8:	2201      	movs	r2, #1
 80135fa:	601a      	str	r2, [r3, #0]
 80135fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80135fe:	613b      	str	r3, [r7, #16]
	__asm volatile
 8013600:	693b      	ldr	r3, [r7, #16]
 8013602:	f383 8811 	msr	BASEPRI, r3
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 8013606:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	}
 8013608:	4618      	mov	r0, r3
 801360a:	3738      	adds	r7, #56	; 0x38
 801360c:	46bd      	mov	sp, r7
 801360e:	bd80      	pop	{r7, pc}
 8013610:	2002df2c 	.word	0x2002df2c
 8013614:	2002df0c 	.word	0x2002df0c
 8013618:	2002da34 	.word	0x2002da34
 801361c:	2002dec4 	.word	0x2002dec4
 8013620:	2002da30 	.word	0x2002da30
 8013624:	2002df18 	.word	0x2002df18

08013628 <xTaskNotifyStateClear>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyStateClear( TaskHandle_t xTask )
	{
 8013628:	b580      	push	{r7, lr}
 801362a:	b084      	sub	sp, #16
 801362c:	af00      	add	r7, sp, #0
 801362e:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;
	BaseType_t xReturn;

		/* If null is passed in here then it is the calling task that is having
		its notification state cleared. */
		pxTCB = prvGetTCBFromHandle( xTask );
 8013630:	687b      	ldr	r3, [r7, #4]
 8013632:	2b00      	cmp	r3, #0
 8013634:	d102      	bne.n	801363c <xTaskNotifyStateClear+0x14>
 8013636:	4b0e      	ldr	r3, [pc, #56]	; (8013670 <xTaskNotifyStateClear+0x48>)
 8013638:	681b      	ldr	r3, [r3, #0]
 801363a:	e000      	b.n	801363e <xTaskNotifyStateClear+0x16>
 801363c:	687b      	ldr	r3, [r7, #4]
 801363e:	60bb      	str	r3, [r7, #8]

		taskENTER_CRITICAL();
 8013640:	f7fd f97c 	bl	801093c <vPortEnterCritical>
		{
			if( pxTCB->ucNotifyState == taskNOTIFICATION_RECEIVED )
 8013644:	68bb      	ldr	r3, [r7, #8]
 8013646:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 801364a:	b2db      	uxtb	r3, r3
 801364c:	2b02      	cmp	r3, #2
 801364e:	d106      	bne.n	801365e <xTaskNotifyStateClear+0x36>
			{
				pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8013650:	68bb      	ldr	r3, [r7, #8]
 8013652:	2200      	movs	r2, #0
 8013654:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
				xReturn = pdPASS;
 8013658:	2301      	movs	r3, #1
 801365a:	60fb      	str	r3, [r7, #12]
 801365c:	e001      	b.n	8013662 <xTaskNotifyStateClear+0x3a>
			}
			else
			{
				xReturn = pdFAIL;
 801365e:	2300      	movs	r3, #0
 8013660:	60fb      	str	r3, [r7, #12]
			}
		}
		taskEXIT_CRITICAL();
 8013662:	f7fd f999 	bl	8010998 <vPortExitCritical>

		return xReturn;
 8013666:	68fb      	ldr	r3, [r7, #12]
	}
 8013668:	4618      	mov	r0, r3
 801366a:	3710      	adds	r7, #16
 801366c:	46bd      	mov	sp, r7
 801366e:	bd80      	pop	{r7, pc}
 8013670:	2002da30 	.word	0x2002da30

08013674 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8013674:	b580      	push	{r7, lr}
 8013676:	b084      	sub	sp, #16
 8013678:	af00      	add	r7, sp, #0
 801367a:	6078      	str	r0, [r7, #4]
 801367c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 801367e:	4b21      	ldr	r3, [pc, #132]	; (8013704 <prvAddCurrentTaskToDelayedList+0x90>)
 8013680:	681b      	ldr	r3, [r3, #0]
 8013682:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8013684:	4b20      	ldr	r3, [pc, #128]	; (8013708 <prvAddCurrentTaskToDelayedList+0x94>)
 8013686:	681b      	ldr	r3, [r3, #0]
 8013688:	3304      	adds	r3, #4
 801368a:	4618      	mov	r0, r3
 801368c:	f7fd fcd2 	bl	8011034 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8013690:	687b      	ldr	r3, [r7, #4]
 8013692:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8013696:	d10a      	bne.n	80136ae <prvAddCurrentTaskToDelayedList+0x3a>
 8013698:	683b      	ldr	r3, [r7, #0]
 801369a:	2b00      	cmp	r3, #0
 801369c:	d007      	beq.n	80136ae <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801369e:	4b1a      	ldr	r3, [pc, #104]	; (8013708 <prvAddCurrentTaskToDelayedList+0x94>)
 80136a0:	681b      	ldr	r3, [r3, #0]
 80136a2:	3304      	adds	r3, #4
 80136a4:	4619      	mov	r1, r3
 80136a6:	4819      	ldr	r0, [pc, #100]	; (801370c <prvAddCurrentTaskToDelayedList+0x98>)
 80136a8:	f7fd fc67 	bl	8010f7a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80136ac:	e026      	b.n	80136fc <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80136ae:	68fa      	ldr	r2, [r7, #12]
 80136b0:	687b      	ldr	r3, [r7, #4]
 80136b2:	4413      	add	r3, r2
 80136b4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80136b6:	4b14      	ldr	r3, [pc, #80]	; (8013708 <prvAddCurrentTaskToDelayedList+0x94>)
 80136b8:	681b      	ldr	r3, [r3, #0]
 80136ba:	68ba      	ldr	r2, [r7, #8]
 80136bc:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80136be:	68ba      	ldr	r2, [r7, #8]
 80136c0:	68fb      	ldr	r3, [r7, #12]
 80136c2:	429a      	cmp	r2, r3
 80136c4:	d209      	bcs.n	80136da <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80136c6:	4b12      	ldr	r3, [pc, #72]	; (8013710 <prvAddCurrentTaskToDelayedList+0x9c>)
 80136c8:	681a      	ldr	r2, [r3, #0]
 80136ca:	4b0f      	ldr	r3, [pc, #60]	; (8013708 <prvAddCurrentTaskToDelayedList+0x94>)
 80136cc:	681b      	ldr	r3, [r3, #0]
 80136ce:	3304      	adds	r3, #4
 80136d0:	4619      	mov	r1, r3
 80136d2:	4610      	mov	r0, r2
 80136d4:	f7fd fc75 	bl	8010fc2 <vListInsert>
}
 80136d8:	e010      	b.n	80136fc <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80136da:	4b0e      	ldr	r3, [pc, #56]	; (8013714 <prvAddCurrentTaskToDelayedList+0xa0>)
 80136dc:	681a      	ldr	r2, [r3, #0]
 80136de:	4b0a      	ldr	r3, [pc, #40]	; (8013708 <prvAddCurrentTaskToDelayedList+0x94>)
 80136e0:	681b      	ldr	r3, [r3, #0]
 80136e2:	3304      	adds	r3, #4
 80136e4:	4619      	mov	r1, r3
 80136e6:	4610      	mov	r0, r2
 80136e8:	f7fd fc6b 	bl	8010fc2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80136ec:	4b0a      	ldr	r3, [pc, #40]	; (8013718 <prvAddCurrentTaskToDelayedList+0xa4>)
 80136ee:	681b      	ldr	r3, [r3, #0]
 80136f0:	68ba      	ldr	r2, [r7, #8]
 80136f2:	429a      	cmp	r2, r3
 80136f4:	d202      	bcs.n	80136fc <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80136f6:	4a08      	ldr	r2, [pc, #32]	; (8013718 <prvAddCurrentTaskToDelayedList+0xa4>)
 80136f8:	68bb      	ldr	r3, [r7, #8]
 80136fa:	6013      	str	r3, [r2, #0]
}
 80136fc:	bf00      	nop
 80136fe:	3710      	adds	r7, #16
 8013700:	46bd      	mov	sp, r7
 8013702:	bd80      	pop	{r7, pc}
 8013704:	2002df08 	.word	0x2002df08
 8013708:	2002da30 	.word	0x2002da30
 801370c:	2002def0 	.word	0x2002def0
 8013710:	2002dec0 	.word	0x2002dec0
 8013714:	2002debc 	.word	0x2002debc
 8013718:	2002df24 	.word	0x2002df24

0801371c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 801371c:	b580      	push	{r7, lr}
 801371e:	b08a      	sub	sp, #40	; 0x28
 8013720:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8013722:	2300      	movs	r3, #0
 8013724:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8013726:	f000 faff 	bl	8013d28 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 801372a:	4b1c      	ldr	r3, [pc, #112]	; (801379c <xTimerCreateTimerTask+0x80>)
 801372c:	681b      	ldr	r3, [r3, #0]
 801372e:	2b00      	cmp	r3, #0
 8013730:	d021      	beq.n	8013776 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8013732:	2300      	movs	r3, #0
 8013734:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8013736:	2300      	movs	r3, #0
 8013738:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 801373a:	1d3a      	adds	r2, r7, #4
 801373c:	f107 0108 	add.w	r1, r7, #8
 8013740:	f107 030c 	add.w	r3, r7, #12
 8013744:	4618      	mov	r0, r3
 8013746:	f7fc ffb5 	bl	80106b4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 801374a:	6879      	ldr	r1, [r7, #4]
 801374c:	68bb      	ldr	r3, [r7, #8]
 801374e:	68fa      	ldr	r2, [r7, #12]
 8013750:	9202      	str	r2, [sp, #8]
 8013752:	9301      	str	r3, [sp, #4]
 8013754:	2302      	movs	r3, #2
 8013756:	9300      	str	r3, [sp, #0]
 8013758:	2300      	movs	r3, #0
 801375a:	460a      	mov	r2, r1
 801375c:	4910      	ldr	r1, [pc, #64]	; (80137a0 <xTimerCreateTimerTask+0x84>)
 801375e:	4811      	ldr	r0, [pc, #68]	; (80137a4 <xTimerCreateTimerTask+0x88>)
 8013760:	f7fe fd34 	bl	80121cc <xTaskCreateStatic>
 8013764:	4602      	mov	r2, r0
 8013766:	4b10      	ldr	r3, [pc, #64]	; (80137a8 <xTimerCreateTimerTask+0x8c>)
 8013768:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 801376a:	4b0f      	ldr	r3, [pc, #60]	; (80137a8 <xTimerCreateTimerTask+0x8c>)
 801376c:	681b      	ldr	r3, [r3, #0]
 801376e:	2b00      	cmp	r3, #0
 8013770:	d001      	beq.n	8013776 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8013772:	2301      	movs	r3, #1
 8013774:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8013776:	697b      	ldr	r3, [r7, #20]
 8013778:	2b00      	cmp	r3, #0
 801377a:	d109      	bne.n	8013790 <xTimerCreateTimerTask+0x74>
	__asm volatile
 801377c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013780:	f383 8811 	msr	BASEPRI, r3
 8013784:	f3bf 8f6f 	isb	sy
 8013788:	f3bf 8f4f 	dsb	sy
 801378c:	613b      	str	r3, [r7, #16]
 801378e:	e7fe      	b.n	801378e <xTimerCreateTimerTask+0x72>
	return xReturn;
 8013790:	697b      	ldr	r3, [r7, #20]
}
 8013792:	4618      	mov	r0, r3
 8013794:	3718      	adds	r7, #24
 8013796:	46bd      	mov	sp, r7
 8013798:	bd80      	pop	{r7, pc}
 801379a:	bf00      	nop
 801379c:	2002df60 	.word	0x2002df60
 80137a0:	08018a44 	.word	0x08018a44
 80137a4:	080138dd 	.word	0x080138dd
 80137a8:	2002df64 	.word	0x2002df64

080137ac <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80137ac:	b580      	push	{r7, lr}
 80137ae:	b08a      	sub	sp, #40	; 0x28
 80137b0:	af00      	add	r7, sp, #0
 80137b2:	60f8      	str	r0, [r7, #12]
 80137b4:	60b9      	str	r1, [r7, #8]
 80137b6:	607a      	str	r2, [r7, #4]
 80137b8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80137ba:	2300      	movs	r3, #0
 80137bc:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80137be:	68fb      	ldr	r3, [r7, #12]
 80137c0:	2b00      	cmp	r3, #0
 80137c2:	d109      	bne.n	80137d8 <xTimerGenericCommand+0x2c>
 80137c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80137c8:	f383 8811 	msr	BASEPRI, r3
 80137cc:	f3bf 8f6f 	isb	sy
 80137d0:	f3bf 8f4f 	dsb	sy
 80137d4:	623b      	str	r3, [r7, #32]
 80137d6:	e7fe      	b.n	80137d6 <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80137d8:	4b19      	ldr	r3, [pc, #100]	; (8013840 <xTimerGenericCommand+0x94>)
 80137da:	681b      	ldr	r3, [r3, #0]
 80137dc:	2b00      	cmp	r3, #0
 80137de:	d02a      	beq.n	8013836 <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80137e0:	68bb      	ldr	r3, [r7, #8]
 80137e2:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80137e4:	687b      	ldr	r3, [r7, #4]
 80137e6:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80137e8:	68fb      	ldr	r3, [r7, #12]
 80137ea:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80137ec:	68bb      	ldr	r3, [r7, #8]
 80137ee:	2b05      	cmp	r3, #5
 80137f0:	dc18      	bgt.n	8013824 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80137f2:	f7ff fb63 	bl	8012ebc <xTaskGetSchedulerState>
 80137f6:	4603      	mov	r3, r0
 80137f8:	2b02      	cmp	r3, #2
 80137fa:	d109      	bne.n	8013810 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80137fc:	4b10      	ldr	r3, [pc, #64]	; (8013840 <xTimerGenericCommand+0x94>)
 80137fe:	6818      	ldr	r0, [r3, #0]
 8013800:	f107 0110 	add.w	r1, r7, #16
 8013804:	2300      	movs	r3, #0
 8013806:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013808:	f7fd fe96 	bl	8011538 <xQueueGenericSend>
 801380c:	6278      	str	r0, [r7, #36]	; 0x24
 801380e:	e012      	b.n	8013836 <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8013810:	4b0b      	ldr	r3, [pc, #44]	; (8013840 <xTimerGenericCommand+0x94>)
 8013812:	6818      	ldr	r0, [r3, #0]
 8013814:	f107 0110 	add.w	r1, r7, #16
 8013818:	2300      	movs	r3, #0
 801381a:	2200      	movs	r2, #0
 801381c:	f7fd fe8c 	bl	8011538 <xQueueGenericSend>
 8013820:	6278      	str	r0, [r7, #36]	; 0x24
 8013822:	e008      	b.n	8013836 <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8013824:	4b06      	ldr	r3, [pc, #24]	; (8013840 <xTimerGenericCommand+0x94>)
 8013826:	6818      	ldr	r0, [r3, #0]
 8013828:	f107 0110 	add.w	r1, r7, #16
 801382c:	2300      	movs	r3, #0
 801382e:	683a      	ldr	r2, [r7, #0]
 8013830:	f7fd ff7c 	bl	801172c <xQueueGenericSendFromISR>
 8013834:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8013836:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8013838:	4618      	mov	r0, r3
 801383a:	3728      	adds	r7, #40	; 0x28
 801383c:	46bd      	mov	sp, r7
 801383e:	bd80      	pop	{r7, pc}
 8013840:	2002df60 	.word	0x2002df60

08013844 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8013844:	b580      	push	{r7, lr}
 8013846:	b088      	sub	sp, #32
 8013848:	af02      	add	r7, sp, #8
 801384a:	6078      	str	r0, [r7, #4]
 801384c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801384e:	4b22      	ldr	r3, [pc, #136]	; (80138d8 <prvProcessExpiredTimer+0x94>)
 8013850:	681b      	ldr	r3, [r3, #0]
 8013852:	68db      	ldr	r3, [r3, #12]
 8013854:	68db      	ldr	r3, [r3, #12]
 8013856:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8013858:	697b      	ldr	r3, [r7, #20]
 801385a:	3304      	adds	r3, #4
 801385c:	4618      	mov	r0, r3
 801385e:	f7fd fbe9 	bl	8011034 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8013862:	697b      	ldr	r3, [r7, #20]
 8013864:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8013868:	f003 0304 	and.w	r3, r3, #4
 801386c:	2b00      	cmp	r3, #0
 801386e:	d021      	beq.n	80138b4 <prvProcessExpiredTimer+0x70>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8013870:	697b      	ldr	r3, [r7, #20]
 8013872:	699a      	ldr	r2, [r3, #24]
 8013874:	687b      	ldr	r3, [r7, #4]
 8013876:	18d1      	adds	r1, r2, r3
 8013878:	687b      	ldr	r3, [r7, #4]
 801387a:	683a      	ldr	r2, [r7, #0]
 801387c:	6978      	ldr	r0, [r7, #20]
 801387e:	f000 f8d1 	bl	8013a24 <prvInsertTimerInActiveList>
 8013882:	4603      	mov	r3, r0
 8013884:	2b00      	cmp	r3, #0
 8013886:	d01e      	beq.n	80138c6 <prvProcessExpiredTimer+0x82>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8013888:	2300      	movs	r3, #0
 801388a:	9300      	str	r3, [sp, #0]
 801388c:	2300      	movs	r3, #0
 801388e:	687a      	ldr	r2, [r7, #4]
 8013890:	2100      	movs	r1, #0
 8013892:	6978      	ldr	r0, [r7, #20]
 8013894:	f7ff ff8a 	bl	80137ac <xTimerGenericCommand>
 8013898:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 801389a:	693b      	ldr	r3, [r7, #16]
 801389c:	2b00      	cmp	r3, #0
 801389e:	d112      	bne.n	80138c6 <prvProcessExpiredTimer+0x82>
 80138a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80138a4:	f383 8811 	msr	BASEPRI, r3
 80138a8:	f3bf 8f6f 	isb	sy
 80138ac:	f3bf 8f4f 	dsb	sy
 80138b0:	60fb      	str	r3, [r7, #12]
 80138b2:	e7fe      	b.n	80138b2 <prvProcessExpiredTimer+0x6e>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80138b4:	697b      	ldr	r3, [r7, #20]
 80138b6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80138ba:	f023 0301 	bic.w	r3, r3, #1
 80138be:	b2da      	uxtb	r2, r3
 80138c0:	697b      	ldr	r3, [r7, #20]
 80138c2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80138c6:	697b      	ldr	r3, [r7, #20]
 80138c8:	6a1b      	ldr	r3, [r3, #32]
 80138ca:	6978      	ldr	r0, [r7, #20]
 80138cc:	4798      	blx	r3
}
 80138ce:	bf00      	nop
 80138d0:	3718      	adds	r7, #24
 80138d2:	46bd      	mov	sp, r7
 80138d4:	bd80      	pop	{r7, pc}
 80138d6:	bf00      	nop
 80138d8:	2002df58 	.word	0x2002df58

080138dc <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80138dc:	b580      	push	{r7, lr}
 80138de:	b084      	sub	sp, #16
 80138e0:	af00      	add	r7, sp, #0
 80138e2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80138e4:	f107 0308 	add.w	r3, r7, #8
 80138e8:	4618      	mov	r0, r3
 80138ea:	f000 f857 	bl	801399c <prvGetNextExpireTime>
 80138ee:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80138f0:	68bb      	ldr	r3, [r7, #8]
 80138f2:	4619      	mov	r1, r3
 80138f4:	68f8      	ldr	r0, [r7, #12]
 80138f6:	f000 f803 	bl	8013900 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80138fa:	f000 f8d5 	bl	8013aa8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80138fe:	e7f1      	b.n	80138e4 <prvTimerTask+0x8>

08013900 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8013900:	b580      	push	{r7, lr}
 8013902:	b084      	sub	sp, #16
 8013904:	af00      	add	r7, sp, #0
 8013906:	6078      	str	r0, [r7, #4]
 8013908:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 801390a:	f7fe fe95 	bl	8012638 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 801390e:	f107 0308 	add.w	r3, r7, #8
 8013912:	4618      	mov	r0, r3
 8013914:	f000 f866 	bl	80139e4 <prvSampleTimeNow>
 8013918:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 801391a:	68bb      	ldr	r3, [r7, #8]
 801391c:	2b00      	cmp	r3, #0
 801391e:	d130      	bne.n	8013982 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8013920:	683b      	ldr	r3, [r7, #0]
 8013922:	2b00      	cmp	r3, #0
 8013924:	d10a      	bne.n	801393c <prvProcessTimerOrBlockTask+0x3c>
 8013926:	687a      	ldr	r2, [r7, #4]
 8013928:	68fb      	ldr	r3, [r7, #12]
 801392a:	429a      	cmp	r2, r3
 801392c:	d806      	bhi.n	801393c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 801392e:	f7fe fec9 	bl	80126c4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8013932:	68f9      	ldr	r1, [r7, #12]
 8013934:	6878      	ldr	r0, [r7, #4]
 8013936:	f7ff ff85 	bl	8013844 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 801393a:	e024      	b.n	8013986 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 801393c:	683b      	ldr	r3, [r7, #0]
 801393e:	2b00      	cmp	r3, #0
 8013940:	d008      	beq.n	8013954 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8013942:	4b13      	ldr	r3, [pc, #76]	; (8013990 <prvProcessTimerOrBlockTask+0x90>)
 8013944:	681b      	ldr	r3, [r3, #0]
 8013946:	681b      	ldr	r3, [r3, #0]
 8013948:	2b00      	cmp	r3, #0
 801394a:	d101      	bne.n	8013950 <prvProcessTimerOrBlockTask+0x50>
 801394c:	2301      	movs	r3, #1
 801394e:	e000      	b.n	8013952 <prvProcessTimerOrBlockTask+0x52>
 8013950:	2300      	movs	r3, #0
 8013952:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8013954:	4b0f      	ldr	r3, [pc, #60]	; (8013994 <prvProcessTimerOrBlockTask+0x94>)
 8013956:	6818      	ldr	r0, [r3, #0]
 8013958:	687a      	ldr	r2, [r7, #4]
 801395a:	68fb      	ldr	r3, [r7, #12]
 801395c:	1ad3      	subs	r3, r2, r3
 801395e:	683a      	ldr	r2, [r7, #0]
 8013960:	4619      	mov	r1, r3
 8013962:	f7fe fbff 	bl	8012164 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8013966:	f7fe fead 	bl	80126c4 <xTaskResumeAll>
 801396a:	4603      	mov	r3, r0
 801396c:	2b00      	cmp	r3, #0
 801396e:	d10a      	bne.n	8013986 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8013970:	4b09      	ldr	r3, [pc, #36]	; (8013998 <prvProcessTimerOrBlockTask+0x98>)
 8013972:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013976:	601a      	str	r2, [r3, #0]
 8013978:	f3bf 8f4f 	dsb	sy
 801397c:	f3bf 8f6f 	isb	sy
}
 8013980:	e001      	b.n	8013986 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8013982:	f7fe fe9f 	bl	80126c4 <xTaskResumeAll>
}
 8013986:	bf00      	nop
 8013988:	3710      	adds	r7, #16
 801398a:	46bd      	mov	sp, r7
 801398c:	bd80      	pop	{r7, pc}
 801398e:	bf00      	nop
 8013990:	2002df5c 	.word	0x2002df5c
 8013994:	2002df60 	.word	0x2002df60
 8013998:	e000ed04 	.word	0xe000ed04

0801399c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 801399c:	b480      	push	{r7}
 801399e:	b085      	sub	sp, #20
 80139a0:	af00      	add	r7, sp, #0
 80139a2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80139a4:	4b0e      	ldr	r3, [pc, #56]	; (80139e0 <prvGetNextExpireTime+0x44>)
 80139a6:	681b      	ldr	r3, [r3, #0]
 80139a8:	681b      	ldr	r3, [r3, #0]
 80139aa:	2b00      	cmp	r3, #0
 80139ac:	d101      	bne.n	80139b2 <prvGetNextExpireTime+0x16>
 80139ae:	2201      	movs	r2, #1
 80139b0:	e000      	b.n	80139b4 <prvGetNextExpireTime+0x18>
 80139b2:	2200      	movs	r2, #0
 80139b4:	687b      	ldr	r3, [r7, #4]
 80139b6:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80139b8:	687b      	ldr	r3, [r7, #4]
 80139ba:	681b      	ldr	r3, [r3, #0]
 80139bc:	2b00      	cmp	r3, #0
 80139be:	d105      	bne.n	80139cc <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80139c0:	4b07      	ldr	r3, [pc, #28]	; (80139e0 <prvGetNextExpireTime+0x44>)
 80139c2:	681b      	ldr	r3, [r3, #0]
 80139c4:	68db      	ldr	r3, [r3, #12]
 80139c6:	681b      	ldr	r3, [r3, #0]
 80139c8:	60fb      	str	r3, [r7, #12]
 80139ca:	e001      	b.n	80139d0 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80139cc:	2300      	movs	r3, #0
 80139ce:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80139d0:	68fb      	ldr	r3, [r7, #12]
}
 80139d2:	4618      	mov	r0, r3
 80139d4:	3714      	adds	r7, #20
 80139d6:	46bd      	mov	sp, r7
 80139d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80139dc:	4770      	bx	lr
 80139de:	bf00      	nop
 80139e0:	2002df58 	.word	0x2002df58

080139e4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80139e4:	b580      	push	{r7, lr}
 80139e6:	b084      	sub	sp, #16
 80139e8:	af00      	add	r7, sp, #0
 80139ea:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80139ec:	f7fe ff06 	bl	80127fc <xTaskGetTickCount>
 80139f0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80139f2:	4b0b      	ldr	r3, [pc, #44]	; (8013a20 <prvSampleTimeNow+0x3c>)
 80139f4:	681b      	ldr	r3, [r3, #0]
 80139f6:	68fa      	ldr	r2, [r7, #12]
 80139f8:	429a      	cmp	r2, r3
 80139fa:	d205      	bcs.n	8013a08 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80139fc:	f000 f930 	bl	8013c60 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8013a00:	687b      	ldr	r3, [r7, #4]
 8013a02:	2201      	movs	r2, #1
 8013a04:	601a      	str	r2, [r3, #0]
 8013a06:	e002      	b.n	8013a0e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8013a08:	687b      	ldr	r3, [r7, #4]
 8013a0a:	2200      	movs	r2, #0
 8013a0c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8013a0e:	4a04      	ldr	r2, [pc, #16]	; (8013a20 <prvSampleTimeNow+0x3c>)
 8013a10:	68fb      	ldr	r3, [r7, #12]
 8013a12:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8013a14:	68fb      	ldr	r3, [r7, #12]
}
 8013a16:	4618      	mov	r0, r3
 8013a18:	3710      	adds	r7, #16
 8013a1a:	46bd      	mov	sp, r7
 8013a1c:	bd80      	pop	{r7, pc}
 8013a1e:	bf00      	nop
 8013a20:	2002df68 	.word	0x2002df68

08013a24 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8013a24:	b580      	push	{r7, lr}
 8013a26:	b086      	sub	sp, #24
 8013a28:	af00      	add	r7, sp, #0
 8013a2a:	60f8      	str	r0, [r7, #12]
 8013a2c:	60b9      	str	r1, [r7, #8]
 8013a2e:	607a      	str	r2, [r7, #4]
 8013a30:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8013a32:	2300      	movs	r3, #0
 8013a34:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8013a36:	68fb      	ldr	r3, [r7, #12]
 8013a38:	68ba      	ldr	r2, [r7, #8]
 8013a3a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8013a3c:	68fb      	ldr	r3, [r7, #12]
 8013a3e:	68fa      	ldr	r2, [r7, #12]
 8013a40:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8013a42:	68ba      	ldr	r2, [r7, #8]
 8013a44:	687b      	ldr	r3, [r7, #4]
 8013a46:	429a      	cmp	r2, r3
 8013a48:	d812      	bhi.n	8013a70 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8013a4a:	687a      	ldr	r2, [r7, #4]
 8013a4c:	683b      	ldr	r3, [r7, #0]
 8013a4e:	1ad2      	subs	r2, r2, r3
 8013a50:	68fb      	ldr	r3, [r7, #12]
 8013a52:	699b      	ldr	r3, [r3, #24]
 8013a54:	429a      	cmp	r2, r3
 8013a56:	d302      	bcc.n	8013a5e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8013a58:	2301      	movs	r3, #1
 8013a5a:	617b      	str	r3, [r7, #20]
 8013a5c:	e01b      	b.n	8013a96 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8013a5e:	4b10      	ldr	r3, [pc, #64]	; (8013aa0 <prvInsertTimerInActiveList+0x7c>)
 8013a60:	681a      	ldr	r2, [r3, #0]
 8013a62:	68fb      	ldr	r3, [r7, #12]
 8013a64:	3304      	adds	r3, #4
 8013a66:	4619      	mov	r1, r3
 8013a68:	4610      	mov	r0, r2
 8013a6a:	f7fd faaa 	bl	8010fc2 <vListInsert>
 8013a6e:	e012      	b.n	8013a96 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8013a70:	687a      	ldr	r2, [r7, #4]
 8013a72:	683b      	ldr	r3, [r7, #0]
 8013a74:	429a      	cmp	r2, r3
 8013a76:	d206      	bcs.n	8013a86 <prvInsertTimerInActiveList+0x62>
 8013a78:	68ba      	ldr	r2, [r7, #8]
 8013a7a:	683b      	ldr	r3, [r7, #0]
 8013a7c:	429a      	cmp	r2, r3
 8013a7e:	d302      	bcc.n	8013a86 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8013a80:	2301      	movs	r3, #1
 8013a82:	617b      	str	r3, [r7, #20]
 8013a84:	e007      	b.n	8013a96 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8013a86:	4b07      	ldr	r3, [pc, #28]	; (8013aa4 <prvInsertTimerInActiveList+0x80>)
 8013a88:	681a      	ldr	r2, [r3, #0]
 8013a8a:	68fb      	ldr	r3, [r7, #12]
 8013a8c:	3304      	adds	r3, #4
 8013a8e:	4619      	mov	r1, r3
 8013a90:	4610      	mov	r0, r2
 8013a92:	f7fd fa96 	bl	8010fc2 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8013a96:	697b      	ldr	r3, [r7, #20]
}
 8013a98:	4618      	mov	r0, r3
 8013a9a:	3718      	adds	r7, #24
 8013a9c:	46bd      	mov	sp, r7
 8013a9e:	bd80      	pop	{r7, pc}
 8013aa0:	2002df5c 	.word	0x2002df5c
 8013aa4:	2002df58 	.word	0x2002df58

08013aa8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8013aa8:	b580      	push	{r7, lr}
 8013aaa:	b08e      	sub	sp, #56	; 0x38
 8013aac:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8013aae:	e0c6      	b.n	8013c3e <prvProcessReceivedCommands+0x196>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8013ab0:	687b      	ldr	r3, [r7, #4]
 8013ab2:	2b00      	cmp	r3, #0
 8013ab4:	da17      	bge.n	8013ae6 <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8013ab6:	1d3b      	adds	r3, r7, #4
 8013ab8:	3304      	adds	r3, #4
 8013aba:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8013abc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013abe:	2b00      	cmp	r3, #0
 8013ac0:	d109      	bne.n	8013ad6 <prvProcessReceivedCommands+0x2e>
 8013ac2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013ac6:	f383 8811 	msr	BASEPRI, r3
 8013aca:	f3bf 8f6f 	isb	sy
 8013ace:	f3bf 8f4f 	dsb	sy
 8013ad2:	61fb      	str	r3, [r7, #28]
 8013ad4:	e7fe      	b.n	8013ad4 <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8013ad6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013ad8:	681b      	ldr	r3, [r3, #0]
 8013ada:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013adc:	6850      	ldr	r0, [r2, #4]
 8013ade:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013ae0:	6892      	ldr	r2, [r2, #8]
 8013ae2:	4611      	mov	r1, r2
 8013ae4:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8013ae6:	687b      	ldr	r3, [r7, #4]
 8013ae8:	2b00      	cmp	r3, #0
 8013aea:	f2c0 80a7 	blt.w	8013c3c <prvProcessReceivedCommands+0x194>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8013aee:	68fb      	ldr	r3, [r7, #12]
 8013af0:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8013af2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013af4:	695b      	ldr	r3, [r3, #20]
 8013af6:	2b00      	cmp	r3, #0
 8013af8:	d004      	beq.n	8013b04 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8013afa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013afc:	3304      	adds	r3, #4
 8013afe:	4618      	mov	r0, r3
 8013b00:	f7fd fa98 	bl	8011034 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8013b04:	463b      	mov	r3, r7
 8013b06:	4618      	mov	r0, r3
 8013b08:	f7ff ff6c 	bl	80139e4 <prvSampleTimeNow>
 8013b0c:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8013b0e:	687b      	ldr	r3, [r7, #4]
 8013b10:	2b09      	cmp	r3, #9
 8013b12:	f200 8094 	bhi.w	8013c3e <prvProcessReceivedCommands+0x196>
 8013b16:	a201      	add	r2, pc, #4	; (adr r2, 8013b1c <prvProcessReceivedCommands+0x74>)
 8013b18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013b1c:	08013b45 	.word	0x08013b45
 8013b20:	08013b45 	.word	0x08013b45
 8013b24:	08013b45 	.word	0x08013b45
 8013b28:	08013bb7 	.word	0x08013bb7
 8013b2c:	08013bcb 	.word	0x08013bcb
 8013b30:	08013c13 	.word	0x08013c13
 8013b34:	08013b45 	.word	0x08013b45
 8013b38:	08013b45 	.word	0x08013b45
 8013b3c:	08013bb7 	.word	0x08013bb7
 8013b40:	08013bcb 	.word	0x08013bcb
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8013b44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013b46:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8013b4a:	f043 0301 	orr.w	r3, r3, #1
 8013b4e:	b2da      	uxtb	r2, r3
 8013b50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013b52:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8013b56:	68ba      	ldr	r2, [r7, #8]
 8013b58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013b5a:	699b      	ldr	r3, [r3, #24]
 8013b5c:	18d1      	adds	r1, r2, r3
 8013b5e:	68bb      	ldr	r3, [r7, #8]
 8013b60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013b62:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013b64:	f7ff ff5e 	bl	8013a24 <prvInsertTimerInActiveList>
 8013b68:	4603      	mov	r3, r0
 8013b6a:	2b00      	cmp	r3, #0
 8013b6c:	d067      	beq.n	8013c3e <prvProcessReceivedCommands+0x196>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8013b6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013b70:	6a1b      	ldr	r3, [r3, #32]
 8013b72:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013b74:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8013b76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013b78:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8013b7c:	f003 0304 	and.w	r3, r3, #4
 8013b80:	2b00      	cmp	r3, #0
 8013b82:	d05c      	beq.n	8013c3e <prvProcessReceivedCommands+0x196>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8013b84:	68ba      	ldr	r2, [r7, #8]
 8013b86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013b88:	699b      	ldr	r3, [r3, #24]
 8013b8a:	441a      	add	r2, r3
 8013b8c:	2300      	movs	r3, #0
 8013b8e:	9300      	str	r3, [sp, #0]
 8013b90:	2300      	movs	r3, #0
 8013b92:	2100      	movs	r1, #0
 8013b94:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013b96:	f7ff fe09 	bl	80137ac <xTimerGenericCommand>
 8013b9a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8013b9c:	6a3b      	ldr	r3, [r7, #32]
 8013b9e:	2b00      	cmp	r3, #0
 8013ba0:	d14d      	bne.n	8013c3e <prvProcessReceivedCommands+0x196>
 8013ba2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013ba6:	f383 8811 	msr	BASEPRI, r3
 8013baa:	f3bf 8f6f 	isb	sy
 8013bae:	f3bf 8f4f 	dsb	sy
 8013bb2:	61bb      	str	r3, [r7, #24]
 8013bb4:	e7fe      	b.n	8013bb4 <prvProcessReceivedCommands+0x10c>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8013bb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013bb8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8013bbc:	f023 0301 	bic.w	r3, r3, #1
 8013bc0:	b2da      	uxtb	r2, r3
 8013bc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013bc4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8013bc8:	e039      	b.n	8013c3e <prvProcessReceivedCommands+0x196>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8013bca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013bcc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8013bd0:	f043 0301 	orr.w	r3, r3, #1
 8013bd4:	b2da      	uxtb	r2, r3
 8013bd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013bd8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8013bdc:	68ba      	ldr	r2, [r7, #8]
 8013bde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013be0:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8013be2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013be4:	699b      	ldr	r3, [r3, #24]
 8013be6:	2b00      	cmp	r3, #0
 8013be8:	d109      	bne.n	8013bfe <prvProcessReceivedCommands+0x156>
 8013bea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013bee:	f383 8811 	msr	BASEPRI, r3
 8013bf2:	f3bf 8f6f 	isb	sy
 8013bf6:	f3bf 8f4f 	dsb	sy
 8013bfa:	617b      	str	r3, [r7, #20]
 8013bfc:	e7fe      	b.n	8013bfc <prvProcessReceivedCommands+0x154>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8013bfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013c00:	699a      	ldr	r2, [r3, #24]
 8013c02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013c04:	18d1      	adds	r1, r2, r3
 8013c06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013c08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013c0a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013c0c:	f7ff ff0a 	bl	8013a24 <prvInsertTimerInActiveList>
					break;
 8013c10:	e015      	b.n	8013c3e <prvProcessReceivedCommands+0x196>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8013c12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013c14:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8013c18:	f003 0302 	and.w	r3, r3, #2
 8013c1c:	2b00      	cmp	r3, #0
 8013c1e:	d103      	bne.n	8013c28 <prvProcessReceivedCommands+0x180>
						{
							vPortFree( pxTimer );
 8013c20:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013c22:	f7fd f867 	bl	8010cf4 <vPortFree>
 8013c26:	e00a      	b.n	8013c3e <prvProcessReceivedCommands+0x196>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8013c28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013c2a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8013c2e:	f023 0301 	bic.w	r3, r3, #1
 8013c32:	b2da      	uxtb	r2, r3
 8013c34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013c36:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8013c3a:	e000      	b.n	8013c3e <prvProcessReceivedCommands+0x196>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8013c3c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8013c3e:	4b07      	ldr	r3, [pc, #28]	; (8013c5c <prvProcessReceivedCommands+0x1b4>)
 8013c40:	681b      	ldr	r3, [r3, #0]
 8013c42:	1d39      	adds	r1, r7, #4
 8013c44:	2200      	movs	r2, #0
 8013c46:	4618      	mov	r0, r3
 8013c48:	f7fd fe8e 	bl	8011968 <xQueueReceive>
 8013c4c:	4603      	mov	r3, r0
 8013c4e:	2b00      	cmp	r3, #0
 8013c50:	f47f af2e 	bne.w	8013ab0 <prvProcessReceivedCommands+0x8>
	}
}
 8013c54:	bf00      	nop
 8013c56:	3730      	adds	r7, #48	; 0x30
 8013c58:	46bd      	mov	sp, r7
 8013c5a:	bd80      	pop	{r7, pc}
 8013c5c:	2002df60 	.word	0x2002df60

08013c60 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8013c60:	b580      	push	{r7, lr}
 8013c62:	b088      	sub	sp, #32
 8013c64:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8013c66:	e047      	b.n	8013cf8 <prvSwitchTimerLists+0x98>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8013c68:	4b2d      	ldr	r3, [pc, #180]	; (8013d20 <prvSwitchTimerLists+0xc0>)
 8013c6a:	681b      	ldr	r3, [r3, #0]
 8013c6c:	68db      	ldr	r3, [r3, #12]
 8013c6e:	681b      	ldr	r3, [r3, #0]
 8013c70:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8013c72:	4b2b      	ldr	r3, [pc, #172]	; (8013d20 <prvSwitchTimerLists+0xc0>)
 8013c74:	681b      	ldr	r3, [r3, #0]
 8013c76:	68db      	ldr	r3, [r3, #12]
 8013c78:	68db      	ldr	r3, [r3, #12]
 8013c7a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8013c7c:	68fb      	ldr	r3, [r7, #12]
 8013c7e:	3304      	adds	r3, #4
 8013c80:	4618      	mov	r0, r3
 8013c82:	f7fd f9d7 	bl	8011034 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8013c86:	68fb      	ldr	r3, [r7, #12]
 8013c88:	6a1b      	ldr	r3, [r3, #32]
 8013c8a:	68f8      	ldr	r0, [r7, #12]
 8013c8c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8013c8e:	68fb      	ldr	r3, [r7, #12]
 8013c90:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8013c94:	f003 0304 	and.w	r3, r3, #4
 8013c98:	2b00      	cmp	r3, #0
 8013c9a:	d02d      	beq.n	8013cf8 <prvSwitchTimerLists+0x98>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8013c9c:	68fb      	ldr	r3, [r7, #12]
 8013c9e:	699b      	ldr	r3, [r3, #24]
 8013ca0:	693a      	ldr	r2, [r7, #16]
 8013ca2:	4413      	add	r3, r2
 8013ca4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8013ca6:	68ba      	ldr	r2, [r7, #8]
 8013ca8:	693b      	ldr	r3, [r7, #16]
 8013caa:	429a      	cmp	r2, r3
 8013cac:	d90e      	bls.n	8013ccc <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8013cae:	68fb      	ldr	r3, [r7, #12]
 8013cb0:	68ba      	ldr	r2, [r7, #8]
 8013cb2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8013cb4:	68fb      	ldr	r3, [r7, #12]
 8013cb6:	68fa      	ldr	r2, [r7, #12]
 8013cb8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8013cba:	4b19      	ldr	r3, [pc, #100]	; (8013d20 <prvSwitchTimerLists+0xc0>)
 8013cbc:	681a      	ldr	r2, [r3, #0]
 8013cbe:	68fb      	ldr	r3, [r7, #12]
 8013cc0:	3304      	adds	r3, #4
 8013cc2:	4619      	mov	r1, r3
 8013cc4:	4610      	mov	r0, r2
 8013cc6:	f7fd f97c 	bl	8010fc2 <vListInsert>
 8013cca:	e015      	b.n	8013cf8 <prvSwitchTimerLists+0x98>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8013ccc:	2300      	movs	r3, #0
 8013cce:	9300      	str	r3, [sp, #0]
 8013cd0:	2300      	movs	r3, #0
 8013cd2:	693a      	ldr	r2, [r7, #16]
 8013cd4:	2100      	movs	r1, #0
 8013cd6:	68f8      	ldr	r0, [r7, #12]
 8013cd8:	f7ff fd68 	bl	80137ac <xTimerGenericCommand>
 8013cdc:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8013cde:	687b      	ldr	r3, [r7, #4]
 8013ce0:	2b00      	cmp	r3, #0
 8013ce2:	d109      	bne.n	8013cf8 <prvSwitchTimerLists+0x98>
 8013ce4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013ce8:	f383 8811 	msr	BASEPRI, r3
 8013cec:	f3bf 8f6f 	isb	sy
 8013cf0:	f3bf 8f4f 	dsb	sy
 8013cf4:	603b      	str	r3, [r7, #0]
 8013cf6:	e7fe      	b.n	8013cf6 <prvSwitchTimerLists+0x96>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8013cf8:	4b09      	ldr	r3, [pc, #36]	; (8013d20 <prvSwitchTimerLists+0xc0>)
 8013cfa:	681b      	ldr	r3, [r3, #0]
 8013cfc:	681b      	ldr	r3, [r3, #0]
 8013cfe:	2b00      	cmp	r3, #0
 8013d00:	d1b2      	bne.n	8013c68 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8013d02:	4b07      	ldr	r3, [pc, #28]	; (8013d20 <prvSwitchTimerLists+0xc0>)
 8013d04:	681b      	ldr	r3, [r3, #0]
 8013d06:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8013d08:	4b06      	ldr	r3, [pc, #24]	; (8013d24 <prvSwitchTimerLists+0xc4>)
 8013d0a:	681b      	ldr	r3, [r3, #0]
 8013d0c:	4a04      	ldr	r2, [pc, #16]	; (8013d20 <prvSwitchTimerLists+0xc0>)
 8013d0e:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8013d10:	4a04      	ldr	r2, [pc, #16]	; (8013d24 <prvSwitchTimerLists+0xc4>)
 8013d12:	697b      	ldr	r3, [r7, #20]
 8013d14:	6013      	str	r3, [r2, #0]
}
 8013d16:	bf00      	nop
 8013d18:	3718      	adds	r7, #24
 8013d1a:	46bd      	mov	sp, r7
 8013d1c:	bd80      	pop	{r7, pc}
 8013d1e:	bf00      	nop
 8013d20:	2002df58 	.word	0x2002df58
 8013d24:	2002df5c 	.word	0x2002df5c

08013d28 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8013d28:	b580      	push	{r7, lr}
 8013d2a:	b082      	sub	sp, #8
 8013d2c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8013d2e:	f7fc fe05 	bl	801093c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8013d32:	4b15      	ldr	r3, [pc, #84]	; (8013d88 <prvCheckForValidListAndQueue+0x60>)
 8013d34:	681b      	ldr	r3, [r3, #0]
 8013d36:	2b00      	cmp	r3, #0
 8013d38:	d120      	bne.n	8013d7c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8013d3a:	4814      	ldr	r0, [pc, #80]	; (8013d8c <prvCheckForValidListAndQueue+0x64>)
 8013d3c:	f7fd f8f0 	bl	8010f20 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8013d40:	4813      	ldr	r0, [pc, #76]	; (8013d90 <prvCheckForValidListAndQueue+0x68>)
 8013d42:	f7fd f8ed 	bl	8010f20 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8013d46:	4b13      	ldr	r3, [pc, #76]	; (8013d94 <prvCheckForValidListAndQueue+0x6c>)
 8013d48:	4a10      	ldr	r2, [pc, #64]	; (8013d8c <prvCheckForValidListAndQueue+0x64>)
 8013d4a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8013d4c:	4b12      	ldr	r3, [pc, #72]	; (8013d98 <prvCheckForValidListAndQueue+0x70>)
 8013d4e:	4a10      	ldr	r2, [pc, #64]	; (8013d90 <prvCheckForValidListAndQueue+0x68>)
 8013d50:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8013d52:	2300      	movs	r3, #0
 8013d54:	9300      	str	r3, [sp, #0]
 8013d56:	4b11      	ldr	r3, [pc, #68]	; (8013d9c <prvCheckForValidListAndQueue+0x74>)
 8013d58:	4a11      	ldr	r2, [pc, #68]	; (8013da0 <prvCheckForValidListAndQueue+0x78>)
 8013d5a:	2110      	movs	r1, #16
 8013d5c:	200a      	movs	r0, #10
 8013d5e:	f7fd f9fb 	bl	8011158 <xQueueGenericCreateStatic>
 8013d62:	4602      	mov	r2, r0
 8013d64:	4b08      	ldr	r3, [pc, #32]	; (8013d88 <prvCheckForValidListAndQueue+0x60>)
 8013d66:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8013d68:	4b07      	ldr	r3, [pc, #28]	; (8013d88 <prvCheckForValidListAndQueue+0x60>)
 8013d6a:	681b      	ldr	r3, [r3, #0]
 8013d6c:	2b00      	cmp	r3, #0
 8013d6e:	d005      	beq.n	8013d7c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8013d70:	4b05      	ldr	r3, [pc, #20]	; (8013d88 <prvCheckForValidListAndQueue+0x60>)
 8013d72:	681b      	ldr	r3, [r3, #0]
 8013d74:	490b      	ldr	r1, [pc, #44]	; (8013da4 <prvCheckForValidListAndQueue+0x7c>)
 8013d76:	4618      	mov	r0, r3
 8013d78:	f7fe f9a2 	bl	80120c0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8013d7c:	f7fc fe0c 	bl	8010998 <vPortExitCritical>
}
 8013d80:	bf00      	nop
 8013d82:	46bd      	mov	sp, r7
 8013d84:	bd80      	pop	{r7, pc}
 8013d86:	bf00      	nop
 8013d88:	2002df60 	.word	0x2002df60
 8013d8c:	2002df30 	.word	0x2002df30
 8013d90:	2002df44 	.word	0x2002df44
 8013d94:	2002df58 	.word	0x2002df58
 8013d98:	2002df5c 	.word	0x2002df5c
 8013d9c:	2002e00c 	.word	0x2002e00c
 8013da0:	2002df6c 	.word	0x2002df6c
 8013da4:	08018a4c 	.word	0x08018a4c

08013da8 <UTIL_LPM_Init>:

/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
 8013da8:	b480      	push	{r7}
 8013daa:	af00      	add	r7, sp, #0
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 8013dac:	4b05      	ldr	r3, [pc, #20]	; (8013dc4 <UTIL_LPM_Init+0x1c>)
 8013dae:	2200      	movs	r2, #0
 8013db0:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 8013db2:	4b05      	ldr	r3, [pc, #20]	; (8013dc8 <UTIL_LPM_Init+0x20>)
 8013db4:	2200      	movs	r2, #0
 8013db6:	601a      	str	r2, [r3, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 8013db8:	bf00      	nop
 8013dba:	46bd      	mov	sp, r7
 8013dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013dc0:	4770      	bx	lr
 8013dc2:	bf00      	nop
 8013dc4:	2002e05c 	.word	0x2002e05c
 8013dc8:	2002e060 	.word	0x2002e060

08013dcc <UTIL_LPM_SetOffMode>:
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 8013dcc:	b480      	push	{r7}
 8013dce:	b087      	sub	sp, #28
 8013dd0:	af00      	add	r7, sp, #0
 8013dd2:	6078      	str	r0, [r7, #4]
 8013dd4:	460b      	mov	r3, r1
 8013dd6:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8013dd8:	f3ef 8310 	mrs	r3, PRIMASK
 8013ddc:	613b      	str	r3, [r7, #16]
  return(result);
 8013dde:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 8013de0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8013de2:	b672      	cpsid	i
  
  switch(state)
 8013de4:	78fb      	ldrb	r3, [r7, #3]
 8013de6:	2b00      	cmp	r3, #0
 8013de8:	d009      	beq.n	8013dfe <UTIL_LPM_SetOffMode+0x32>
 8013dea:	2b01      	cmp	r3, #1
 8013dec:	d000      	beq.n	8013df0 <UTIL_LPM_SetOffMode+0x24>
      OffModeDisable &= ( ~lpm_id_bm );
      break;
    }
  default :
    {
      break;
 8013dee:	e00e      	b.n	8013e0e <UTIL_LPM_SetOffMode+0x42>
      OffModeDisable |= lpm_id_bm;
 8013df0:	4b0c      	ldr	r3, [pc, #48]	; (8013e24 <UTIL_LPM_SetOffMode+0x58>)
 8013df2:	681a      	ldr	r2, [r3, #0]
 8013df4:	687b      	ldr	r3, [r7, #4]
 8013df6:	4313      	orrs	r3, r2
 8013df8:	4a0a      	ldr	r2, [pc, #40]	; (8013e24 <UTIL_LPM_SetOffMode+0x58>)
 8013dfa:	6013      	str	r3, [r2, #0]
      break;
 8013dfc:	e007      	b.n	8013e0e <UTIL_LPM_SetOffMode+0x42>
      OffModeDisable &= ( ~lpm_id_bm );
 8013dfe:	687b      	ldr	r3, [r7, #4]
 8013e00:	43da      	mvns	r2, r3
 8013e02:	4b08      	ldr	r3, [pc, #32]	; (8013e24 <UTIL_LPM_SetOffMode+0x58>)
 8013e04:	681b      	ldr	r3, [r3, #0]
 8013e06:	4013      	ands	r3, r2
 8013e08:	4a06      	ldr	r2, [pc, #24]	; (8013e24 <UTIL_LPM_SetOffMode+0x58>)
 8013e0a:	6013      	str	r3, [r2, #0]
      break;
 8013e0c:	bf00      	nop
 8013e0e:	697b      	ldr	r3, [r7, #20]
 8013e10:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8013e12:	68fb      	ldr	r3, [r7, #12]
 8013e14:	f383 8810 	msr	PRIMASK, r3
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 8013e18:	bf00      	nop
 8013e1a:	371c      	adds	r7, #28
 8013e1c:	46bd      	mov	sp, r7
 8013e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e22:	4770      	bx	lr
 8013e24:	2002e060 	.word	0x2002e060

08013e28 <__errno>:
 8013e28:	4b01      	ldr	r3, [pc, #4]	; (8013e30 <__errno+0x8>)
 8013e2a:	6818      	ldr	r0, [r3, #0]
 8013e2c:	4770      	bx	lr
 8013e2e:	bf00      	nop
 8013e30:	20000024 	.word	0x20000024

08013e34 <__libc_init_array>:
 8013e34:	b570      	push	{r4, r5, r6, lr}
 8013e36:	4e0d      	ldr	r6, [pc, #52]	; (8013e6c <__libc_init_array+0x38>)
 8013e38:	4c0d      	ldr	r4, [pc, #52]	; (8013e70 <__libc_init_array+0x3c>)
 8013e3a:	1ba4      	subs	r4, r4, r6
 8013e3c:	10a4      	asrs	r4, r4, #2
 8013e3e:	2500      	movs	r5, #0
 8013e40:	42a5      	cmp	r5, r4
 8013e42:	d109      	bne.n	8013e58 <__libc_init_array+0x24>
 8013e44:	4e0b      	ldr	r6, [pc, #44]	; (8013e74 <__libc_init_array+0x40>)
 8013e46:	4c0c      	ldr	r4, [pc, #48]	; (8013e78 <__libc_init_array+0x44>)
 8013e48:	f003 fe74 	bl	8017b34 <_init>
 8013e4c:	1ba4      	subs	r4, r4, r6
 8013e4e:	10a4      	asrs	r4, r4, #2
 8013e50:	2500      	movs	r5, #0
 8013e52:	42a5      	cmp	r5, r4
 8013e54:	d105      	bne.n	8013e62 <__libc_init_array+0x2e>
 8013e56:	bd70      	pop	{r4, r5, r6, pc}
 8013e58:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8013e5c:	4798      	blx	r3
 8013e5e:	3501      	adds	r5, #1
 8013e60:	e7ee      	b.n	8013e40 <__libc_init_array+0xc>
 8013e62:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8013e66:	4798      	blx	r3
 8013e68:	3501      	adds	r5, #1
 8013e6a:	e7f2      	b.n	8013e52 <__libc_init_array+0x1e>
 8013e6c:	08019f80 	.word	0x08019f80
 8013e70:	08019f80 	.word	0x08019f80
 8013e74:	08019f80 	.word	0x08019f80
 8013e78:	08019f84 	.word	0x08019f84

08013e7c <memcpy>:
 8013e7c:	b510      	push	{r4, lr}
 8013e7e:	1e43      	subs	r3, r0, #1
 8013e80:	440a      	add	r2, r1
 8013e82:	4291      	cmp	r1, r2
 8013e84:	d100      	bne.n	8013e88 <memcpy+0xc>
 8013e86:	bd10      	pop	{r4, pc}
 8013e88:	f811 4b01 	ldrb.w	r4, [r1], #1
 8013e8c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8013e90:	e7f7      	b.n	8013e82 <memcpy+0x6>

08013e92 <memset>:
 8013e92:	4402      	add	r2, r0
 8013e94:	4603      	mov	r3, r0
 8013e96:	4293      	cmp	r3, r2
 8013e98:	d100      	bne.n	8013e9c <memset+0xa>
 8013e9a:	4770      	bx	lr
 8013e9c:	f803 1b01 	strb.w	r1, [r3], #1
 8013ea0:	e7f9      	b.n	8013e96 <memset+0x4>

08013ea2 <__cvt>:
 8013ea2:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8013ea6:	ec55 4b10 	vmov	r4, r5, d0
 8013eaa:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8013eac:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8013eb0:	2d00      	cmp	r5, #0
 8013eb2:	460e      	mov	r6, r1
 8013eb4:	4691      	mov	r9, r2
 8013eb6:	4619      	mov	r1, r3
 8013eb8:	bfb8      	it	lt
 8013eba:	4622      	movlt	r2, r4
 8013ebc:	462b      	mov	r3, r5
 8013ebe:	f027 0720 	bic.w	r7, r7, #32
 8013ec2:	bfbb      	ittet	lt
 8013ec4:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8013ec8:	461d      	movlt	r5, r3
 8013eca:	2300      	movge	r3, #0
 8013ecc:	232d      	movlt	r3, #45	; 0x2d
 8013ece:	bfb8      	it	lt
 8013ed0:	4614      	movlt	r4, r2
 8013ed2:	2f46      	cmp	r7, #70	; 0x46
 8013ed4:	700b      	strb	r3, [r1, #0]
 8013ed6:	d004      	beq.n	8013ee2 <__cvt+0x40>
 8013ed8:	2f45      	cmp	r7, #69	; 0x45
 8013eda:	d100      	bne.n	8013ede <__cvt+0x3c>
 8013edc:	3601      	adds	r6, #1
 8013ede:	2102      	movs	r1, #2
 8013ee0:	e000      	b.n	8013ee4 <__cvt+0x42>
 8013ee2:	2103      	movs	r1, #3
 8013ee4:	ab03      	add	r3, sp, #12
 8013ee6:	9301      	str	r3, [sp, #4]
 8013ee8:	ab02      	add	r3, sp, #8
 8013eea:	9300      	str	r3, [sp, #0]
 8013eec:	4632      	mov	r2, r6
 8013eee:	4653      	mov	r3, sl
 8013ef0:	ec45 4b10 	vmov	d0, r4, r5
 8013ef4:	f000 fe88 	bl	8014c08 <_dtoa_r>
 8013ef8:	2f47      	cmp	r7, #71	; 0x47
 8013efa:	4680      	mov	r8, r0
 8013efc:	d102      	bne.n	8013f04 <__cvt+0x62>
 8013efe:	f019 0f01 	tst.w	r9, #1
 8013f02:	d026      	beq.n	8013f52 <__cvt+0xb0>
 8013f04:	2f46      	cmp	r7, #70	; 0x46
 8013f06:	eb08 0906 	add.w	r9, r8, r6
 8013f0a:	d111      	bne.n	8013f30 <__cvt+0x8e>
 8013f0c:	f898 3000 	ldrb.w	r3, [r8]
 8013f10:	2b30      	cmp	r3, #48	; 0x30
 8013f12:	d10a      	bne.n	8013f2a <__cvt+0x88>
 8013f14:	2200      	movs	r2, #0
 8013f16:	2300      	movs	r3, #0
 8013f18:	4620      	mov	r0, r4
 8013f1a:	4629      	mov	r1, r5
 8013f1c:	f7ec fdac 	bl	8000a78 <__aeabi_dcmpeq>
 8013f20:	b918      	cbnz	r0, 8013f2a <__cvt+0x88>
 8013f22:	f1c6 0601 	rsb	r6, r6, #1
 8013f26:	f8ca 6000 	str.w	r6, [sl]
 8013f2a:	f8da 3000 	ldr.w	r3, [sl]
 8013f2e:	4499      	add	r9, r3
 8013f30:	2200      	movs	r2, #0
 8013f32:	2300      	movs	r3, #0
 8013f34:	4620      	mov	r0, r4
 8013f36:	4629      	mov	r1, r5
 8013f38:	f7ec fd9e 	bl	8000a78 <__aeabi_dcmpeq>
 8013f3c:	b938      	cbnz	r0, 8013f4e <__cvt+0xac>
 8013f3e:	2230      	movs	r2, #48	; 0x30
 8013f40:	9b03      	ldr	r3, [sp, #12]
 8013f42:	454b      	cmp	r3, r9
 8013f44:	d205      	bcs.n	8013f52 <__cvt+0xb0>
 8013f46:	1c59      	adds	r1, r3, #1
 8013f48:	9103      	str	r1, [sp, #12]
 8013f4a:	701a      	strb	r2, [r3, #0]
 8013f4c:	e7f8      	b.n	8013f40 <__cvt+0x9e>
 8013f4e:	f8cd 900c 	str.w	r9, [sp, #12]
 8013f52:	9b03      	ldr	r3, [sp, #12]
 8013f54:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8013f56:	eba3 0308 	sub.w	r3, r3, r8
 8013f5a:	4640      	mov	r0, r8
 8013f5c:	6013      	str	r3, [r2, #0]
 8013f5e:	b004      	add	sp, #16
 8013f60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08013f64 <__exponent>:
 8013f64:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8013f66:	2900      	cmp	r1, #0
 8013f68:	4604      	mov	r4, r0
 8013f6a:	bfba      	itte	lt
 8013f6c:	4249      	neglt	r1, r1
 8013f6e:	232d      	movlt	r3, #45	; 0x2d
 8013f70:	232b      	movge	r3, #43	; 0x2b
 8013f72:	2909      	cmp	r1, #9
 8013f74:	f804 2b02 	strb.w	r2, [r4], #2
 8013f78:	7043      	strb	r3, [r0, #1]
 8013f7a:	dd20      	ble.n	8013fbe <__exponent+0x5a>
 8013f7c:	f10d 0307 	add.w	r3, sp, #7
 8013f80:	461f      	mov	r7, r3
 8013f82:	260a      	movs	r6, #10
 8013f84:	fb91 f5f6 	sdiv	r5, r1, r6
 8013f88:	fb06 1115 	mls	r1, r6, r5, r1
 8013f8c:	3130      	adds	r1, #48	; 0x30
 8013f8e:	2d09      	cmp	r5, #9
 8013f90:	f803 1c01 	strb.w	r1, [r3, #-1]
 8013f94:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
 8013f98:	4629      	mov	r1, r5
 8013f9a:	dc09      	bgt.n	8013fb0 <__exponent+0x4c>
 8013f9c:	3130      	adds	r1, #48	; 0x30
 8013f9e:	3b02      	subs	r3, #2
 8013fa0:	f802 1c01 	strb.w	r1, [r2, #-1]
 8013fa4:	42bb      	cmp	r3, r7
 8013fa6:	4622      	mov	r2, r4
 8013fa8:	d304      	bcc.n	8013fb4 <__exponent+0x50>
 8013faa:	1a10      	subs	r0, r2, r0
 8013fac:	b003      	add	sp, #12
 8013fae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013fb0:	4613      	mov	r3, r2
 8013fb2:	e7e7      	b.n	8013f84 <__exponent+0x20>
 8013fb4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8013fb8:	f804 2b01 	strb.w	r2, [r4], #1
 8013fbc:	e7f2      	b.n	8013fa4 <__exponent+0x40>
 8013fbe:	2330      	movs	r3, #48	; 0x30
 8013fc0:	4419      	add	r1, r3
 8013fc2:	7083      	strb	r3, [r0, #2]
 8013fc4:	1d02      	adds	r2, r0, #4
 8013fc6:	70c1      	strb	r1, [r0, #3]
 8013fc8:	e7ef      	b.n	8013faa <__exponent+0x46>
	...

08013fcc <_printf_float>:
 8013fcc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013fd0:	b08d      	sub	sp, #52	; 0x34
 8013fd2:	460c      	mov	r4, r1
 8013fd4:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8013fd8:	4616      	mov	r6, r2
 8013fda:	461f      	mov	r7, r3
 8013fdc:	4605      	mov	r5, r0
 8013fde:	f001 fd45 	bl	8015a6c <_localeconv_r>
 8013fe2:	6803      	ldr	r3, [r0, #0]
 8013fe4:	9304      	str	r3, [sp, #16]
 8013fe6:	4618      	mov	r0, r3
 8013fe8:	f7ec f8ca 	bl	8000180 <strlen>
 8013fec:	2300      	movs	r3, #0
 8013fee:	930a      	str	r3, [sp, #40]	; 0x28
 8013ff0:	f8d8 3000 	ldr.w	r3, [r8]
 8013ff4:	9005      	str	r0, [sp, #20]
 8013ff6:	3307      	adds	r3, #7
 8013ff8:	f023 0307 	bic.w	r3, r3, #7
 8013ffc:	f103 0208 	add.w	r2, r3, #8
 8014000:	f894 a018 	ldrb.w	sl, [r4, #24]
 8014004:	f8d4 b000 	ldr.w	fp, [r4]
 8014008:	f8c8 2000 	str.w	r2, [r8]
 801400c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014010:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8014014:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8014018:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801401c:	9307      	str	r3, [sp, #28]
 801401e:	f8cd 8018 	str.w	r8, [sp, #24]
 8014022:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8014026:	4ba7      	ldr	r3, [pc, #668]	; (80142c4 <_printf_float+0x2f8>)
 8014028:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801402c:	f7ec fd56 	bl	8000adc <__aeabi_dcmpun>
 8014030:	bb70      	cbnz	r0, 8014090 <_printf_float+0xc4>
 8014032:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8014036:	4ba3      	ldr	r3, [pc, #652]	; (80142c4 <_printf_float+0x2f8>)
 8014038:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801403c:	f7ec fd30 	bl	8000aa0 <__aeabi_dcmple>
 8014040:	bb30      	cbnz	r0, 8014090 <_printf_float+0xc4>
 8014042:	2200      	movs	r2, #0
 8014044:	2300      	movs	r3, #0
 8014046:	4640      	mov	r0, r8
 8014048:	4649      	mov	r1, r9
 801404a:	f7ec fd1f 	bl	8000a8c <__aeabi_dcmplt>
 801404e:	b110      	cbz	r0, 8014056 <_printf_float+0x8a>
 8014050:	232d      	movs	r3, #45	; 0x2d
 8014052:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8014056:	4a9c      	ldr	r2, [pc, #624]	; (80142c8 <_printf_float+0x2fc>)
 8014058:	4b9c      	ldr	r3, [pc, #624]	; (80142cc <_printf_float+0x300>)
 801405a:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 801405e:	bf8c      	ite	hi
 8014060:	4690      	movhi	r8, r2
 8014062:	4698      	movls	r8, r3
 8014064:	2303      	movs	r3, #3
 8014066:	f02b 0204 	bic.w	r2, fp, #4
 801406a:	6123      	str	r3, [r4, #16]
 801406c:	6022      	str	r2, [r4, #0]
 801406e:	f04f 0900 	mov.w	r9, #0
 8014072:	9700      	str	r7, [sp, #0]
 8014074:	4633      	mov	r3, r6
 8014076:	aa0b      	add	r2, sp, #44	; 0x2c
 8014078:	4621      	mov	r1, r4
 801407a:	4628      	mov	r0, r5
 801407c:	f000 f9e6 	bl	801444c <_printf_common>
 8014080:	3001      	adds	r0, #1
 8014082:	f040 808d 	bne.w	80141a0 <_printf_float+0x1d4>
 8014086:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801408a:	b00d      	add	sp, #52	; 0x34
 801408c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014090:	4642      	mov	r2, r8
 8014092:	464b      	mov	r3, r9
 8014094:	4640      	mov	r0, r8
 8014096:	4649      	mov	r1, r9
 8014098:	f7ec fd20 	bl	8000adc <__aeabi_dcmpun>
 801409c:	b110      	cbz	r0, 80140a4 <_printf_float+0xd8>
 801409e:	4a8c      	ldr	r2, [pc, #560]	; (80142d0 <_printf_float+0x304>)
 80140a0:	4b8c      	ldr	r3, [pc, #560]	; (80142d4 <_printf_float+0x308>)
 80140a2:	e7da      	b.n	801405a <_printf_float+0x8e>
 80140a4:	6861      	ldr	r1, [r4, #4]
 80140a6:	1c4b      	adds	r3, r1, #1
 80140a8:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 80140ac:	a80a      	add	r0, sp, #40	; 0x28
 80140ae:	d13e      	bne.n	801412e <_printf_float+0x162>
 80140b0:	2306      	movs	r3, #6
 80140b2:	6063      	str	r3, [r4, #4]
 80140b4:	2300      	movs	r3, #0
 80140b6:	e9cd 0302 	strd	r0, r3, [sp, #8]
 80140ba:	ab09      	add	r3, sp, #36	; 0x24
 80140bc:	9300      	str	r3, [sp, #0]
 80140be:	ec49 8b10 	vmov	d0, r8, r9
 80140c2:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80140c6:	6022      	str	r2, [r4, #0]
 80140c8:	f8cd a004 	str.w	sl, [sp, #4]
 80140cc:	6861      	ldr	r1, [r4, #4]
 80140ce:	4628      	mov	r0, r5
 80140d0:	f7ff fee7 	bl	8013ea2 <__cvt>
 80140d4:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 80140d8:	2b47      	cmp	r3, #71	; 0x47
 80140da:	4680      	mov	r8, r0
 80140dc:	d109      	bne.n	80140f2 <_printf_float+0x126>
 80140de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80140e0:	1cd8      	adds	r0, r3, #3
 80140e2:	db02      	blt.n	80140ea <_printf_float+0x11e>
 80140e4:	6862      	ldr	r2, [r4, #4]
 80140e6:	4293      	cmp	r3, r2
 80140e8:	dd47      	ble.n	801417a <_printf_float+0x1ae>
 80140ea:	f1aa 0a02 	sub.w	sl, sl, #2
 80140ee:	fa5f fa8a 	uxtb.w	sl, sl
 80140f2:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 80140f6:	9909      	ldr	r1, [sp, #36]	; 0x24
 80140f8:	d824      	bhi.n	8014144 <_printf_float+0x178>
 80140fa:	3901      	subs	r1, #1
 80140fc:	4652      	mov	r2, sl
 80140fe:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8014102:	9109      	str	r1, [sp, #36]	; 0x24
 8014104:	f7ff ff2e 	bl	8013f64 <__exponent>
 8014108:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801410a:	1813      	adds	r3, r2, r0
 801410c:	2a01      	cmp	r2, #1
 801410e:	4681      	mov	r9, r0
 8014110:	6123      	str	r3, [r4, #16]
 8014112:	dc02      	bgt.n	801411a <_printf_float+0x14e>
 8014114:	6822      	ldr	r2, [r4, #0]
 8014116:	07d1      	lsls	r1, r2, #31
 8014118:	d501      	bpl.n	801411e <_printf_float+0x152>
 801411a:	3301      	adds	r3, #1
 801411c:	6123      	str	r3, [r4, #16]
 801411e:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8014122:	2b00      	cmp	r3, #0
 8014124:	d0a5      	beq.n	8014072 <_printf_float+0xa6>
 8014126:	232d      	movs	r3, #45	; 0x2d
 8014128:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801412c:	e7a1      	b.n	8014072 <_printf_float+0xa6>
 801412e:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 8014132:	f000 8177 	beq.w	8014424 <_printf_float+0x458>
 8014136:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 801413a:	d1bb      	bne.n	80140b4 <_printf_float+0xe8>
 801413c:	2900      	cmp	r1, #0
 801413e:	d1b9      	bne.n	80140b4 <_printf_float+0xe8>
 8014140:	2301      	movs	r3, #1
 8014142:	e7b6      	b.n	80140b2 <_printf_float+0xe6>
 8014144:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 8014148:	d119      	bne.n	801417e <_printf_float+0x1b2>
 801414a:	2900      	cmp	r1, #0
 801414c:	6863      	ldr	r3, [r4, #4]
 801414e:	dd0c      	ble.n	801416a <_printf_float+0x19e>
 8014150:	6121      	str	r1, [r4, #16]
 8014152:	b913      	cbnz	r3, 801415a <_printf_float+0x18e>
 8014154:	6822      	ldr	r2, [r4, #0]
 8014156:	07d2      	lsls	r2, r2, #31
 8014158:	d502      	bpl.n	8014160 <_printf_float+0x194>
 801415a:	3301      	adds	r3, #1
 801415c:	440b      	add	r3, r1
 801415e:	6123      	str	r3, [r4, #16]
 8014160:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014162:	65a3      	str	r3, [r4, #88]	; 0x58
 8014164:	f04f 0900 	mov.w	r9, #0
 8014168:	e7d9      	b.n	801411e <_printf_float+0x152>
 801416a:	b913      	cbnz	r3, 8014172 <_printf_float+0x1a6>
 801416c:	6822      	ldr	r2, [r4, #0]
 801416e:	07d0      	lsls	r0, r2, #31
 8014170:	d501      	bpl.n	8014176 <_printf_float+0x1aa>
 8014172:	3302      	adds	r3, #2
 8014174:	e7f3      	b.n	801415e <_printf_float+0x192>
 8014176:	2301      	movs	r3, #1
 8014178:	e7f1      	b.n	801415e <_printf_float+0x192>
 801417a:	f04f 0a67 	mov.w	sl, #103	; 0x67
 801417e:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8014182:	4293      	cmp	r3, r2
 8014184:	db05      	blt.n	8014192 <_printf_float+0x1c6>
 8014186:	6822      	ldr	r2, [r4, #0]
 8014188:	6123      	str	r3, [r4, #16]
 801418a:	07d1      	lsls	r1, r2, #31
 801418c:	d5e8      	bpl.n	8014160 <_printf_float+0x194>
 801418e:	3301      	adds	r3, #1
 8014190:	e7e5      	b.n	801415e <_printf_float+0x192>
 8014192:	2b00      	cmp	r3, #0
 8014194:	bfd4      	ite	le
 8014196:	f1c3 0302 	rsble	r3, r3, #2
 801419a:	2301      	movgt	r3, #1
 801419c:	4413      	add	r3, r2
 801419e:	e7de      	b.n	801415e <_printf_float+0x192>
 80141a0:	6823      	ldr	r3, [r4, #0]
 80141a2:	055a      	lsls	r2, r3, #21
 80141a4:	d407      	bmi.n	80141b6 <_printf_float+0x1ea>
 80141a6:	6923      	ldr	r3, [r4, #16]
 80141a8:	4642      	mov	r2, r8
 80141aa:	4631      	mov	r1, r6
 80141ac:	4628      	mov	r0, r5
 80141ae:	47b8      	blx	r7
 80141b0:	3001      	adds	r0, #1
 80141b2:	d12b      	bne.n	801420c <_printf_float+0x240>
 80141b4:	e767      	b.n	8014086 <_printf_float+0xba>
 80141b6:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 80141ba:	f240 80dc 	bls.w	8014376 <_printf_float+0x3aa>
 80141be:	2200      	movs	r2, #0
 80141c0:	2300      	movs	r3, #0
 80141c2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80141c6:	f7ec fc57 	bl	8000a78 <__aeabi_dcmpeq>
 80141ca:	2800      	cmp	r0, #0
 80141cc:	d033      	beq.n	8014236 <_printf_float+0x26a>
 80141ce:	2301      	movs	r3, #1
 80141d0:	4a41      	ldr	r2, [pc, #260]	; (80142d8 <_printf_float+0x30c>)
 80141d2:	4631      	mov	r1, r6
 80141d4:	4628      	mov	r0, r5
 80141d6:	47b8      	blx	r7
 80141d8:	3001      	adds	r0, #1
 80141da:	f43f af54 	beq.w	8014086 <_printf_float+0xba>
 80141de:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80141e2:	429a      	cmp	r2, r3
 80141e4:	db02      	blt.n	80141ec <_printf_float+0x220>
 80141e6:	6823      	ldr	r3, [r4, #0]
 80141e8:	07d8      	lsls	r0, r3, #31
 80141ea:	d50f      	bpl.n	801420c <_printf_float+0x240>
 80141ec:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80141f0:	4631      	mov	r1, r6
 80141f2:	4628      	mov	r0, r5
 80141f4:	47b8      	blx	r7
 80141f6:	3001      	adds	r0, #1
 80141f8:	f43f af45 	beq.w	8014086 <_printf_float+0xba>
 80141fc:	f04f 0800 	mov.w	r8, #0
 8014200:	f104 091a 	add.w	r9, r4, #26
 8014204:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014206:	3b01      	subs	r3, #1
 8014208:	4543      	cmp	r3, r8
 801420a:	dc09      	bgt.n	8014220 <_printf_float+0x254>
 801420c:	6823      	ldr	r3, [r4, #0]
 801420e:	079b      	lsls	r3, r3, #30
 8014210:	f100 8103 	bmi.w	801441a <_printf_float+0x44e>
 8014214:	68e0      	ldr	r0, [r4, #12]
 8014216:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014218:	4298      	cmp	r0, r3
 801421a:	bfb8      	it	lt
 801421c:	4618      	movlt	r0, r3
 801421e:	e734      	b.n	801408a <_printf_float+0xbe>
 8014220:	2301      	movs	r3, #1
 8014222:	464a      	mov	r2, r9
 8014224:	4631      	mov	r1, r6
 8014226:	4628      	mov	r0, r5
 8014228:	47b8      	blx	r7
 801422a:	3001      	adds	r0, #1
 801422c:	f43f af2b 	beq.w	8014086 <_printf_float+0xba>
 8014230:	f108 0801 	add.w	r8, r8, #1
 8014234:	e7e6      	b.n	8014204 <_printf_float+0x238>
 8014236:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014238:	2b00      	cmp	r3, #0
 801423a:	dc2b      	bgt.n	8014294 <_printf_float+0x2c8>
 801423c:	2301      	movs	r3, #1
 801423e:	4a26      	ldr	r2, [pc, #152]	; (80142d8 <_printf_float+0x30c>)
 8014240:	4631      	mov	r1, r6
 8014242:	4628      	mov	r0, r5
 8014244:	47b8      	blx	r7
 8014246:	3001      	adds	r0, #1
 8014248:	f43f af1d 	beq.w	8014086 <_printf_float+0xba>
 801424c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801424e:	b923      	cbnz	r3, 801425a <_printf_float+0x28e>
 8014250:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014252:	b913      	cbnz	r3, 801425a <_printf_float+0x28e>
 8014254:	6823      	ldr	r3, [r4, #0]
 8014256:	07d9      	lsls	r1, r3, #31
 8014258:	d5d8      	bpl.n	801420c <_printf_float+0x240>
 801425a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801425e:	4631      	mov	r1, r6
 8014260:	4628      	mov	r0, r5
 8014262:	47b8      	blx	r7
 8014264:	3001      	adds	r0, #1
 8014266:	f43f af0e 	beq.w	8014086 <_printf_float+0xba>
 801426a:	f04f 0900 	mov.w	r9, #0
 801426e:	f104 0a1a 	add.w	sl, r4, #26
 8014272:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014274:	425b      	negs	r3, r3
 8014276:	454b      	cmp	r3, r9
 8014278:	dc01      	bgt.n	801427e <_printf_float+0x2b2>
 801427a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801427c:	e794      	b.n	80141a8 <_printf_float+0x1dc>
 801427e:	2301      	movs	r3, #1
 8014280:	4652      	mov	r2, sl
 8014282:	4631      	mov	r1, r6
 8014284:	4628      	mov	r0, r5
 8014286:	47b8      	blx	r7
 8014288:	3001      	adds	r0, #1
 801428a:	f43f aefc 	beq.w	8014086 <_printf_float+0xba>
 801428e:	f109 0901 	add.w	r9, r9, #1
 8014292:	e7ee      	b.n	8014272 <_printf_float+0x2a6>
 8014294:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8014296:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8014298:	429a      	cmp	r2, r3
 801429a:	bfa8      	it	ge
 801429c:	461a      	movge	r2, r3
 801429e:	2a00      	cmp	r2, #0
 80142a0:	4691      	mov	r9, r2
 80142a2:	dd07      	ble.n	80142b4 <_printf_float+0x2e8>
 80142a4:	4613      	mov	r3, r2
 80142a6:	4631      	mov	r1, r6
 80142a8:	4642      	mov	r2, r8
 80142aa:	4628      	mov	r0, r5
 80142ac:	47b8      	blx	r7
 80142ae:	3001      	adds	r0, #1
 80142b0:	f43f aee9 	beq.w	8014086 <_printf_float+0xba>
 80142b4:	f104 031a 	add.w	r3, r4, #26
 80142b8:	f04f 0b00 	mov.w	fp, #0
 80142bc:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80142c0:	9306      	str	r3, [sp, #24]
 80142c2:	e015      	b.n	80142f0 <_printf_float+0x324>
 80142c4:	7fefffff 	.word	0x7fefffff
 80142c8:	08019c7c 	.word	0x08019c7c
 80142cc:	08019c78 	.word	0x08019c78
 80142d0:	08019c84 	.word	0x08019c84
 80142d4:	08019c80 	.word	0x08019c80
 80142d8:	08019c88 	.word	0x08019c88
 80142dc:	2301      	movs	r3, #1
 80142de:	9a06      	ldr	r2, [sp, #24]
 80142e0:	4631      	mov	r1, r6
 80142e2:	4628      	mov	r0, r5
 80142e4:	47b8      	blx	r7
 80142e6:	3001      	adds	r0, #1
 80142e8:	f43f aecd 	beq.w	8014086 <_printf_float+0xba>
 80142ec:	f10b 0b01 	add.w	fp, fp, #1
 80142f0:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 80142f4:	ebaa 0309 	sub.w	r3, sl, r9
 80142f8:	455b      	cmp	r3, fp
 80142fa:	dcef      	bgt.n	80142dc <_printf_float+0x310>
 80142fc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8014300:	429a      	cmp	r2, r3
 8014302:	44d0      	add	r8, sl
 8014304:	db15      	blt.n	8014332 <_printf_float+0x366>
 8014306:	6823      	ldr	r3, [r4, #0]
 8014308:	07da      	lsls	r2, r3, #31
 801430a:	d412      	bmi.n	8014332 <_printf_float+0x366>
 801430c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801430e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8014310:	eba3 020a 	sub.w	r2, r3, sl
 8014314:	eba3 0a01 	sub.w	sl, r3, r1
 8014318:	4592      	cmp	sl, r2
 801431a:	bfa8      	it	ge
 801431c:	4692      	movge	sl, r2
 801431e:	f1ba 0f00 	cmp.w	sl, #0
 8014322:	dc0e      	bgt.n	8014342 <_printf_float+0x376>
 8014324:	f04f 0800 	mov.w	r8, #0
 8014328:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801432c:	f104 091a 	add.w	r9, r4, #26
 8014330:	e019      	b.n	8014366 <_printf_float+0x39a>
 8014332:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8014336:	4631      	mov	r1, r6
 8014338:	4628      	mov	r0, r5
 801433a:	47b8      	blx	r7
 801433c:	3001      	adds	r0, #1
 801433e:	d1e5      	bne.n	801430c <_printf_float+0x340>
 8014340:	e6a1      	b.n	8014086 <_printf_float+0xba>
 8014342:	4653      	mov	r3, sl
 8014344:	4642      	mov	r2, r8
 8014346:	4631      	mov	r1, r6
 8014348:	4628      	mov	r0, r5
 801434a:	47b8      	blx	r7
 801434c:	3001      	adds	r0, #1
 801434e:	d1e9      	bne.n	8014324 <_printf_float+0x358>
 8014350:	e699      	b.n	8014086 <_printf_float+0xba>
 8014352:	2301      	movs	r3, #1
 8014354:	464a      	mov	r2, r9
 8014356:	4631      	mov	r1, r6
 8014358:	4628      	mov	r0, r5
 801435a:	47b8      	blx	r7
 801435c:	3001      	adds	r0, #1
 801435e:	f43f ae92 	beq.w	8014086 <_printf_float+0xba>
 8014362:	f108 0801 	add.w	r8, r8, #1
 8014366:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801436a:	1a9b      	subs	r3, r3, r2
 801436c:	eba3 030a 	sub.w	r3, r3, sl
 8014370:	4543      	cmp	r3, r8
 8014372:	dcee      	bgt.n	8014352 <_printf_float+0x386>
 8014374:	e74a      	b.n	801420c <_printf_float+0x240>
 8014376:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8014378:	2a01      	cmp	r2, #1
 801437a:	dc01      	bgt.n	8014380 <_printf_float+0x3b4>
 801437c:	07db      	lsls	r3, r3, #31
 801437e:	d53a      	bpl.n	80143f6 <_printf_float+0x42a>
 8014380:	2301      	movs	r3, #1
 8014382:	4642      	mov	r2, r8
 8014384:	4631      	mov	r1, r6
 8014386:	4628      	mov	r0, r5
 8014388:	47b8      	blx	r7
 801438a:	3001      	adds	r0, #1
 801438c:	f43f ae7b 	beq.w	8014086 <_printf_float+0xba>
 8014390:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8014394:	4631      	mov	r1, r6
 8014396:	4628      	mov	r0, r5
 8014398:	47b8      	blx	r7
 801439a:	3001      	adds	r0, #1
 801439c:	f108 0801 	add.w	r8, r8, #1
 80143a0:	f43f ae71 	beq.w	8014086 <_printf_float+0xba>
 80143a4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80143a6:	2200      	movs	r2, #0
 80143a8:	f103 3aff 	add.w	sl, r3, #4294967295	; 0xffffffff
 80143ac:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80143b0:	2300      	movs	r3, #0
 80143b2:	f7ec fb61 	bl	8000a78 <__aeabi_dcmpeq>
 80143b6:	b9c8      	cbnz	r0, 80143ec <_printf_float+0x420>
 80143b8:	4653      	mov	r3, sl
 80143ba:	4642      	mov	r2, r8
 80143bc:	4631      	mov	r1, r6
 80143be:	4628      	mov	r0, r5
 80143c0:	47b8      	blx	r7
 80143c2:	3001      	adds	r0, #1
 80143c4:	d10e      	bne.n	80143e4 <_printf_float+0x418>
 80143c6:	e65e      	b.n	8014086 <_printf_float+0xba>
 80143c8:	2301      	movs	r3, #1
 80143ca:	4652      	mov	r2, sl
 80143cc:	4631      	mov	r1, r6
 80143ce:	4628      	mov	r0, r5
 80143d0:	47b8      	blx	r7
 80143d2:	3001      	adds	r0, #1
 80143d4:	f43f ae57 	beq.w	8014086 <_printf_float+0xba>
 80143d8:	f108 0801 	add.w	r8, r8, #1
 80143dc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80143de:	3b01      	subs	r3, #1
 80143e0:	4543      	cmp	r3, r8
 80143e2:	dcf1      	bgt.n	80143c8 <_printf_float+0x3fc>
 80143e4:	464b      	mov	r3, r9
 80143e6:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80143ea:	e6de      	b.n	80141aa <_printf_float+0x1de>
 80143ec:	f04f 0800 	mov.w	r8, #0
 80143f0:	f104 0a1a 	add.w	sl, r4, #26
 80143f4:	e7f2      	b.n	80143dc <_printf_float+0x410>
 80143f6:	2301      	movs	r3, #1
 80143f8:	e7df      	b.n	80143ba <_printf_float+0x3ee>
 80143fa:	2301      	movs	r3, #1
 80143fc:	464a      	mov	r2, r9
 80143fe:	4631      	mov	r1, r6
 8014400:	4628      	mov	r0, r5
 8014402:	47b8      	blx	r7
 8014404:	3001      	adds	r0, #1
 8014406:	f43f ae3e 	beq.w	8014086 <_printf_float+0xba>
 801440a:	f108 0801 	add.w	r8, r8, #1
 801440e:	68e3      	ldr	r3, [r4, #12]
 8014410:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8014412:	1a9b      	subs	r3, r3, r2
 8014414:	4543      	cmp	r3, r8
 8014416:	dcf0      	bgt.n	80143fa <_printf_float+0x42e>
 8014418:	e6fc      	b.n	8014214 <_printf_float+0x248>
 801441a:	f04f 0800 	mov.w	r8, #0
 801441e:	f104 0919 	add.w	r9, r4, #25
 8014422:	e7f4      	b.n	801440e <_printf_float+0x442>
 8014424:	2900      	cmp	r1, #0
 8014426:	f43f ae8b 	beq.w	8014140 <_printf_float+0x174>
 801442a:	2300      	movs	r3, #0
 801442c:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8014430:	ab09      	add	r3, sp, #36	; 0x24
 8014432:	9300      	str	r3, [sp, #0]
 8014434:	ec49 8b10 	vmov	d0, r8, r9
 8014438:	6022      	str	r2, [r4, #0]
 801443a:	f8cd a004 	str.w	sl, [sp, #4]
 801443e:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8014442:	4628      	mov	r0, r5
 8014444:	f7ff fd2d 	bl	8013ea2 <__cvt>
 8014448:	4680      	mov	r8, r0
 801444a:	e648      	b.n	80140de <_printf_float+0x112>

0801444c <_printf_common>:
 801444c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014450:	4691      	mov	r9, r2
 8014452:	461f      	mov	r7, r3
 8014454:	688a      	ldr	r2, [r1, #8]
 8014456:	690b      	ldr	r3, [r1, #16]
 8014458:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801445c:	4293      	cmp	r3, r2
 801445e:	bfb8      	it	lt
 8014460:	4613      	movlt	r3, r2
 8014462:	f8c9 3000 	str.w	r3, [r9]
 8014466:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801446a:	4606      	mov	r6, r0
 801446c:	460c      	mov	r4, r1
 801446e:	b112      	cbz	r2, 8014476 <_printf_common+0x2a>
 8014470:	3301      	adds	r3, #1
 8014472:	f8c9 3000 	str.w	r3, [r9]
 8014476:	6823      	ldr	r3, [r4, #0]
 8014478:	0699      	lsls	r1, r3, #26
 801447a:	bf42      	ittt	mi
 801447c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8014480:	3302      	addmi	r3, #2
 8014482:	f8c9 3000 	strmi.w	r3, [r9]
 8014486:	6825      	ldr	r5, [r4, #0]
 8014488:	f015 0506 	ands.w	r5, r5, #6
 801448c:	d107      	bne.n	801449e <_printf_common+0x52>
 801448e:	f104 0a19 	add.w	sl, r4, #25
 8014492:	68e3      	ldr	r3, [r4, #12]
 8014494:	f8d9 2000 	ldr.w	r2, [r9]
 8014498:	1a9b      	subs	r3, r3, r2
 801449a:	42ab      	cmp	r3, r5
 801449c:	dc28      	bgt.n	80144f0 <_printf_common+0xa4>
 801449e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80144a2:	6822      	ldr	r2, [r4, #0]
 80144a4:	3300      	adds	r3, #0
 80144a6:	bf18      	it	ne
 80144a8:	2301      	movne	r3, #1
 80144aa:	0692      	lsls	r2, r2, #26
 80144ac:	d42d      	bmi.n	801450a <_printf_common+0xbe>
 80144ae:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80144b2:	4639      	mov	r1, r7
 80144b4:	4630      	mov	r0, r6
 80144b6:	47c0      	blx	r8
 80144b8:	3001      	adds	r0, #1
 80144ba:	d020      	beq.n	80144fe <_printf_common+0xb2>
 80144bc:	6823      	ldr	r3, [r4, #0]
 80144be:	68e5      	ldr	r5, [r4, #12]
 80144c0:	f8d9 2000 	ldr.w	r2, [r9]
 80144c4:	f003 0306 	and.w	r3, r3, #6
 80144c8:	2b04      	cmp	r3, #4
 80144ca:	bf08      	it	eq
 80144cc:	1aad      	subeq	r5, r5, r2
 80144ce:	68a3      	ldr	r3, [r4, #8]
 80144d0:	6922      	ldr	r2, [r4, #16]
 80144d2:	bf0c      	ite	eq
 80144d4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80144d8:	2500      	movne	r5, #0
 80144da:	4293      	cmp	r3, r2
 80144dc:	bfc4      	itt	gt
 80144de:	1a9b      	subgt	r3, r3, r2
 80144e0:	18ed      	addgt	r5, r5, r3
 80144e2:	f04f 0900 	mov.w	r9, #0
 80144e6:	341a      	adds	r4, #26
 80144e8:	454d      	cmp	r5, r9
 80144ea:	d11a      	bne.n	8014522 <_printf_common+0xd6>
 80144ec:	2000      	movs	r0, #0
 80144ee:	e008      	b.n	8014502 <_printf_common+0xb6>
 80144f0:	2301      	movs	r3, #1
 80144f2:	4652      	mov	r2, sl
 80144f4:	4639      	mov	r1, r7
 80144f6:	4630      	mov	r0, r6
 80144f8:	47c0      	blx	r8
 80144fa:	3001      	adds	r0, #1
 80144fc:	d103      	bne.n	8014506 <_printf_common+0xba>
 80144fe:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8014502:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014506:	3501      	adds	r5, #1
 8014508:	e7c3      	b.n	8014492 <_printf_common+0x46>
 801450a:	18e1      	adds	r1, r4, r3
 801450c:	1c5a      	adds	r2, r3, #1
 801450e:	2030      	movs	r0, #48	; 0x30
 8014510:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8014514:	4422      	add	r2, r4
 8014516:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801451a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801451e:	3302      	adds	r3, #2
 8014520:	e7c5      	b.n	80144ae <_printf_common+0x62>
 8014522:	2301      	movs	r3, #1
 8014524:	4622      	mov	r2, r4
 8014526:	4639      	mov	r1, r7
 8014528:	4630      	mov	r0, r6
 801452a:	47c0      	blx	r8
 801452c:	3001      	adds	r0, #1
 801452e:	d0e6      	beq.n	80144fe <_printf_common+0xb2>
 8014530:	f109 0901 	add.w	r9, r9, #1
 8014534:	e7d8      	b.n	80144e8 <_printf_common+0x9c>
	...

08014538 <_printf_i>:
 8014538:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801453c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8014540:	460c      	mov	r4, r1
 8014542:	7e09      	ldrb	r1, [r1, #24]
 8014544:	b085      	sub	sp, #20
 8014546:	296e      	cmp	r1, #110	; 0x6e
 8014548:	4617      	mov	r7, r2
 801454a:	4606      	mov	r6, r0
 801454c:	4698      	mov	r8, r3
 801454e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8014550:	f000 80b3 	beq.w	80146ba <_printf_i+0x182>
 8014554:	d822      	bhi.n	801459c <_printf_i+0x64>
 8014556:	2963      	cmp	r1, #99	; 0x63
 8014558:	d036      	beq.n	80145c8 <_printf_i+0x90>
 801455a:	d80a      	bhi.n	8014572 <_printf_i+0x3a>
 801455c:	2900      	cmp	r1, #0
 801455e:	f000 80b9 	beq.w	80146d4 <_printf_i+0x19c>
 8014562:	2958      	cmp	r1, #88	; 0x58
 8014564:	f000 8083 	beq.w	801466e <_printf_i+0x136>
 8014568:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801456c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8014570:	e032      	b.n	80145d8 <_printf_i+0xa0>
 8014572:	2964      	cmp	r1, #100	; 0x64
 8014574:	d001      	beq.n	801457a <_printf_i+0x42>
 8014576:	2969      	cmp	r1, #105	; 0x69
 8014578:	d1f6      	bne.n	8014568 <_printf_i+0x30>
 801457a:	6820      	ldr	r0, [r4, #0]
 801457c:	6813      	ldr	r3, [r2, #0]
 801457e:	0605      	lsls	r5, r0, #24
 8014580:	f103 0104 	add.w	r1, r3, #4
 8014584:	d52a      	bpl.n	80145dc <_printf_i+0xa4>
 8014586:	681b      	ldr	r3, [r3, #0]
 8014588:	6011      	str	r1, [r2, #0]
 801458a:	2b00      	cmp	r3, #0
 801458c:	da03      	bge.n	8014596 <_printf_i+0x5e>
 801458e:	222d      	movs	r2, #45	; 0x2d
 8014590:	425b      	negs	r3, r3
 8014592:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8014596:	486f      	ldr	r0, [pc, #444]	; (8014754 <_printf_i+0x21c>)
 8014598:	220a      	movs	r2, #10
 801459a:	e039      	b.n	8014610 <_printf_i+0xd8>
 801459c:	2973      	cmp	r1, #115	; 0x73
 801459e:	f000 809d 	beq.w	80146dc <_printf_i+0x1a4>
 80145a2:	d808      	bhi.n	80145b6 <_printf_i+0x7e>
 80145a4:	296f      	cmp	r1, #111	; 0x6f
 80145a6:	d020      	beq.n	80145ea <_printf_i+0xb2>
 80145a8:	2970      	cmp	r1, #112	; 0x70
 80145aa:	d1dd      	bne.n	8014568 <_printf_i+0x30>
 80145ac:	6823      	ldr	r3, [r4, #0]
 80145ae:	f043 0320 	orr.w	r3, r3, #32
 80145b2:	6023      	str	r3, [r4, #0]
 80145b4:	e003      	b.n	80145be <_printf_i+0x86>
 80145b6:	2975      	cmp	r1, #117	; 0x75
 80145b8:	d017      	beq.n	80145ea <_printf_i+0xb2>
 80145ba:	2978      	cmp	r1, #120	; 0x78
 80145bc:	d1d4      	bne.n	8014568 <_printf_i+0x30>
 80145be:	2378      	movs	r3, #120	; 0x78
 80145c0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80145c4:	4864      	ldr	r0, [pc, #400]	; (8014758 <_printf_i+0x220>)
 80145c6:	e055      	b.n	8014674 <_printf_i+0x13c>
 80145c8:	6813      	ldr	r3, [r2, #0]
 80145ca:	1d19      	adds	r1, r3, #4
 80145cc:	681b      	ldr	r3, [r3, #0]
 80145ce:	6011      	str	r1, [r2, #0]
 80145d0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80145d4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80145d8:	2301      	movs	r3, #1
 80145da:	e08c      	b.n	80146f6 <_printf_i+0x1be>
 80145dc:	681b      	ldr	r3, [r3, #0]
 80145de:	6011      	str	r1, [r2, #0]
 80145e0:	f010 0f40 	tst.w	r0, #64	; 0x40
 80145e4:	bf18      	it	ne
 80145e6:	b21b      	sxthne	r3, r3
 80145e8:	e7cf      	b.n	801458a <_printf_i+0x52>
 80145ea:	6813      	ldr	r3, [r2, #0]
 80145ec:	6825      	ldr	r5, [r4, #0]
 80145ee:	1d18      	adds	r0, r3, #4
 80145f0:	6010      	str	r0, [r2, #0]
 80145f2:	0628      	lsls	r0, r5, #24
 80145f4:	d501      	bpl.n	80145fa <_printf_i+0xc2>
 80145f6:	681b      	ldr	r3, [r3, #0]
 80145f8:	e002      	b.n	8014600 <_printf_i+0xc8>
 80145fa:	0668      	lsls	r0, r5, #25
 80145fc:	d5fb      	bpl.n	80145f6 <_printf_i+0xbe>
 80145fe:	881b      	ldrh	r3, [r3, #0]
 8014600:	4854      	ldr	r0, [pc, #336]	; (8014754 <_printf_i+0x21c>)
 8014602:	296f      	cmp	r1, #111	; 0x6f
 8014604:	bf14      	ite	ne
 8014606:	220a      	movne	r2, #10
 8014608:	2208      	moveq	r2, #8
 801460a:	2100      	movs	r1, #0
 801460c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8014610:	6865      	ldr	r5, [r4, #4]
 8014612:	60a5      	str	r5, [r4, #8]
 8014614:	2d00      	cmp	r5, #0
 8014616:	f2c0 8095 	blt.w	8014744 <_printf_i+0x20c>
 801461a:	6821      	ldr	r1, [r4, #0]
 801461c:	f021 0104 	bic.w	r1, r1, #4
 8014620:	6021      	str	r1, [r4, #0]
 8014622:	2b00      	cmp	r3, #0
 8014624:	d13d      	bne.n	80146a2 <_printf_i+0x16a>
 8014626:	2d00      	cmp	r5, #0
 8014628:	f040 808e 	bne.w	8014748 <_printf_i+0x210>
 801462c:	4665      	mov	r5, ip
 801462e:	2a08      	cmp	r2, #8
 8014630:	d10b      	bne.n	801464a <_printf_i+0x112>
 8014632:	6823      	ldr	r3, [r4, #0]
 8014634:	07db      	lsls	r3, r3, #31
 8014636:	d508      	bpl.n	801464a <_printf_i+0x112>
 8014638:	6923      	ldr	r3, [r4, #16]
 801463a:	6862      	ldr	r2, [r4, #4]
 801463c:	429a      	cmp	r2, r3
 801463e:	bfde      	ittt	le
 8014640:	2330      	movle	r3, #48	; 0x30
 8014642:	f805 3c01 	strble.w	r3, [r5, #-1]
 8014646:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 801464a:	ebac 0305 	sub.w	r3, ip, r5
 801464e:	6123      	str	r3, [r4, #16]
 8014650:	f8cd 8000 	str.w	r8, [sp]
 8014654:	463b      	mov	r3, r7
 8014656:	aa03      	add	r2, sp, #12
 8014658:	4621      	mov	r1, r4
 801465a:	4630      	mov	r0, r6
 801465c:	f7ff fef6 	bl	801444c <_printf_common>
 8014660:	3001      	adds	r0, #1
 8014662:	d14d      	bne.n	8014700 <_printf_i+0x1c8>
 8014664:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8014668:	b005      	add	sp, #20
 801466a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801466e:	4839      	ldr	r0, [pc, #228]	; (8014754 <_printf_i+0x21c>)
 8014670:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8014674:	6813      	ldr	r3, [r2, #0]
 8014676:	6821      	ldr	r1, [r4, #0]
 8014678:	1d1d      	adds	r5, r3, #4
 801467a:	681b      	ldr	r3, [r3, #0]
 801467c:	6015      	str	r5, [r2, #0]
 801467e:	060a      	lsls	r2, r1, #24
 8014680:	d50b      	bpl.n	801469a <_printf_i+0x162>
 8014682:	07ca      	lsls	r2, r1, #31
 8014684:	bf44      	itt	mi
 8014686:	f041 0120 	orrmi.w	r1, r1, #32
 801468a:	6021      	strmi	r1, [r4, #0]
 801468c:	b91b      	cbnz	r3, 8014696 <_printf_i+0x15e>
 801468e:	6822      	ldr	r2, [r4, #0]
 8014690:	f022 0220 	bic.w	r2, r2, #32
 8014694:	6022      	str	r2, [r4, #0]
 8014696:	2210      	movs	r2, #16
 8014698:	e7b7      	b.n	801460a <_printf_i+0xd2>
 801469a:	064d      	lsls	r5, r1, #25
 801469c:	bf48      	it	mi
 801469e:	b29b      	uxthmi	r3, r3
 80146a0:	e7ef      	b.n	8014682 <_printf_i+0x14a>
 80146a2:	4665      	mov	r5, ip
 80146a4:	fbb3 f1f2 	udiv	r1, r3, r2
 80146a8:	fb02 3311 	mls	r3, r2, r1, r3
 80146ac:	5cc3      	ldrb	r3, [r0, r3]
 80146ae:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80146b2:	460b      	mov	r3, r1
 80146b4:	2900      	cmp	r1, #0
 80146b6:	d1f5      	bne.n	80146a4 <_printf_i+0x16c>
 80146b8:	e7b9      	b.n	801462e <_printf_i+0xf6>
 80146ba:	6813      	ldr	r3, [r2, #0]
 80146bc:	6825      	ldr	r5, [r4, #0]
 80146be:	6961      	ldr	r1, [r4, #20]
 80146c0:	1d18      	adds	r0, r3, #4
 80146c2:	6010      	str	r0, [r2, #0]
 80146c4:	0628      	lsls	r0, r5, #24
 80146c6:	681b      	ldr	r3, [r3, #0]
 80146c8:	d501      	bpl.n	80146ce <_printf_i+0x196>
 80146ca:	6019      	str	r1, [r3, #0]
 80146cc:	e002      	b.n	80146d4 <_printf_i+0x19c>
 80146ce:	066a      	lsls	r2, r5, #25
 80146d0:	d5fb      	bpl.n	80146ca <_printf_i+0x192>
 80146d2:	8019      	strh	r1, [r3, #0]
 80146d4:	2300      	movs	r3, #0
 80146d6:	6123      	str	r3, [r4, #16]
 80146d8:	4665      	mov	r5, ip
 80146da:	e7b9      	b.n	8014650 <_printf_i+0x118>
 80146dc:	6813      	ldr	r3, [r2, #0]
 80146de:	1d19      	adds	r1, r3, #4
 80146e0:	6011      	str	r1, [r2, #0]
 80146e2:	681d      	ldr	r5, [r3, #0]
 80146e4:	6862      	ldr	r2, [r4, #4]
 80146e6:	2100      	movs	r1, #0
 80146e8:	4628      	mov	r0, r5
 80146ea:	f7eb fd51 	bl	8000190 <memchr>
 80146ee:	b108      	cbz	r0, 80146f4 <_printf_i+0x1bc>
 80146f0:	1b40      	subs	r0, r0, r5
 80146f2:	6060      	str	r0, [r4, #4]
 80146f4:	6863      	ldr	r3, [r4, #4]
 80146f6:	6123      	str	r3, [r4, #16]
 80146f8:	2300      	movs	r3, #0
 80146fa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80146fe:	e7a7      	b.n	8014650 <_printf_i+0x118>
 8014700:	6923      	ldr	r3, [r4, #16]
 8014702:	462a      	mov	r2, r5
 8014704:	4639      	mov	r1, r7
 8014706:	4630      	mov	r0, r6
 8014708:	47c0      	blx	r8
 801470a:	3001      	adds	r0, #1
 801470c:	d0aa      	beq.n	8014664 <_printf_i+0x12c>
 801470e:	6823      	ldr	r3, [r4, #0]
 8014710:	079b      	lsls	r3, r3, #30
 8014712:	d413      	bmi.n	801473c <_printf_i+0x204>
 8014714:	68e0      	ldr	r0, [r4, #12]
 8014716:	9b03      	ldr	r3, [sp, #12]
 8014718:	4298      	cmp	r0, r3
 801471a:	bfb8      	it	lt
 801471c:	4618      	movlt	r0, r3
 801471e:	e7a3      	b.n	8014668 <_printf_i+0x130>
 8014720:	2301      	movs	r3, #1
 8014722:	464a      	mov	r2, r9
 8014724:	4639      	mov	r1, r7
 8014726:	4630      	mov	r0, r6
 8014728:	47c0      	blx	r8
 801472a:	3001      	adds	r0, #1
 801472c:	d09a      	beq.n	8014664 <_printf_i+0x12c>
 801472e:	3501      	adds	r5, #1
 8014730:	68e3      	ldr	r3, [r4, #12]
 8014732:	9a03      	ldr	r2, [sp, #12]
 8014734:	1a9b      	subs	r3, r3, r2
 8014736:	42ab      	cmp	r3, r5
 8014738:	dcf2      	bgt.n	8014720 <_printf_i+0x1e8>
 801473a:	e7eb      	b.n	8014714 <_printf_i+0x1dc>
 801473c:	2500      	movs	r5, #0
 801473e:	f104 0919 	add.w	r9, r4, #25
 8014742:	e7f5      	b.n	8014730 <_printf_i+0x1f8>
 8014744:	2b00      	cmp	r3, #0
 8014746:	d1ac      	bne.n	80146a2 <_printf_i+0x16a>
 8014748:	7803      	ldrb	r3, [r0, #0]
 801474a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801474e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8014752:	e76c      	b.n	801462e <_printf_i+0xf6>
 8014754:	08019c8a 	.word	0x08019c8a
 8014758:	08019c9b 	.word	0x08019c9b

0801475c <iprintf>:
 801475c:	b40f      	push	{r0, r1, r2, r3}
 801475e:	4b0a      	ldr	r3, [pc, #40]	; (8014788 <iprintf+0x2c>)
 8014760:	b513      	push	{r0, r1, r4, lr}
 8014762:	681c      	ldr	r4, [r3, #0]
 8014764:	b124      	cbz	r4, 8014770 <iprintf+0x14>
 8014766:	69a3      	ldr	r3, [r4, #24]
 8014768:	b913      	cbnz	r3, 8014770 <iprintf+0x14>
 801476a:	4620      	mov	r0, r4
 801476c:	f001 f8f4 	bl	8015958 <__sinit>
 8014770:	ab05      	add	r3, sp, #20
 8014772:	9a04      	ldr	r2, [sp, #16]
 8014774:	68a1      	ldr	r1, [r4, #8]
 8014776:	9301      	str	r3, [sp, #4]
 8014778:	4620      	mov	r0, r4
 801477a:	f001 feff 	bl	801657c <_vfiprintf_r>
 801477e:	b002      	add	sp, #8
 8014780:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014784:	b004      	add	sp, #16
 8014786:	4770      	bx	lr
 8014788:	20000024 	.word	0x20000024

0801478c <_puts_r>:
 801478c:	b570      	push	{r4, r5, r6, lr}
 801478e:	460e      	mov	r6, r1
 8014790:	4605      	mov	r5, r0
 8014792:	b118      	cbz	r0, 801479c <_puts_r+0x10>
 8014794:	6983      	ldr	r3, [r0, #24]
 8014796:	b90b      	cbnz	r3, 801479c <_puts_r+0x10>
 8014798:	f001 f8de 	bl	8015958 <__sinit>
 801479c:	69ab      	ldr	r3, [r5, #24]
 801479e:	68ac      	ldr	r4, [r5, #8]
 80147a0:	b913      	cbnz	r3, 80147a8 <_puts_r+0x1c>
 80147a2:	4628      	mov	r0, r5
 80147a4:	f001 f8d8 	bl	8015958 <__sinit>
 80147a8:	4b23      	ldr	r3, [pc, #140]	; (8014838 <_puts_r+0xac>)
 80147aa:	429c      	cmp	r4, r3
 80147ac:	d117      	bne.n	80147de <_puts_r+0x52>
 80147ae:	686c      	ldr	r4, [r5, #4]
 80147b0:	89a3      	ldrh	r3, [r4, #12]
 80147b2:	071b      	lsls	r3, r3, #28
 80147b4:	d51d      	bpl.n	80147f2 <_puts_r+0x66>
 80147b6:	6923      	ldr	r3, [r4, #16]
 80147b8:	b1db      	cbz	r3, 80147f2 <_puts_r+0x66>
 80147ba:	3e01      	subs	r6, #1
 80147bc:	68a3      	ldr	r3, [r4, #8]
 80147be:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80147c2:	3b01      	subs	r3, #1
 80147c4:	60a3      	str	r3, [r4, #8]
 80147c6:	b9e9      	cbnz	r1, 8014804 <_puts_r+0x78>
 80147c8:	2b00      	cmp	r3, #0
 80147ca:	da2e      	bge.n	801482a <_puts_r+0x9e>
 80147cc:	4622      	mov	r2, r4
 80147ce:	210a      	movs	r1, #10
 80147d0:	4628      	mov	r0, r5
 80147d2:	f000 f8cd 	bl	8014970 <__swbuf_r>
 80147d6:	3001      	adds	r0, #1
 80147d8:	d011      	beq.n	80147fe <_puts_r+0x72>
 80147da:	200a      	movs	r0, #10
 80147dc:	e011      	b.n	8014802 <_puts_r+0x76>
 80147de:	4b17      	ldr	r3, [pc, #92]	; (801483c <_puts_r+0xb0>)
 80147e0:	429c      	cmp	r4, r3
 80147e2:	d101      	bne.n	80147e8 <_puts_r+0x5c>
 80147e4:	68ac      	ldr	r4, [r5, #8]
 80147e6:	e7e3      	b.n	80147b0 <_puts_r+0x24>
 80147e8:	4b15      	ldr	r3, [pc, #84]	; (8014840 <_puts_r+0xb4>)
 80147ea:	429c      	cmp	r4, r3
 80147ec:	bf08      	it	eq
 80147ee:	68ec      	ldreq	r4, [r5, #12]
 80147f0:	e7de      	b.n	80147b0 <_puts_r+0x24>
 80147f2:	4621      	mov	r1, r4
 80147f4:	4628      	mov	r0, r5
 80147f6:	f000 f90d 	bl	8014a14 <__swsetup_r>
 80147fa:	2800      	cmp	r0, #0
 80147fc:	d0dd      	beq.n	80147ba <_puts_r+0x2e>
 80147fe:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8014802:	bd70      	pop	{r4, r5, r6, pc}
 8014804:	2b00      	cmp	r3, #0
 8014806:	da04      	bge.n	8014812 <_puts_r+0x86>
 8014808:	69a2      	ldr	r2, [r4, #24]
 801480a:	429a      	cmp	r2, r3
 801480c:	dc06      	bgt.n	801481c <_puts_r+0x90>
 801480e:	290a      	cmp	r1, #10
 8014810:	d004      	beq.n	801481c <_puts_r+0x90>
 8014812:	6823      	ldr	r3, [r4, #0]
 8014814:	1c5a      	adds	r2, r3, #1
 8014816:	6022      	str	r2, [r4, #0]
 8014818:	7019      	strb	r1, [r3, #0]
 801481a:	e7cf      	b.n	80147bc <_puts_r+0x30>
 801481c:	4622      	mov	r2, r4
 801481e:	4628      	mov	r0, r5
 8014820:	f000 f8a6 	bl	8014970 <__swbuf_r>
 8014824:	3001      	adds	r0, #1
 8014826:	d1c9      	bne.n	80147bc <_puts_r+0x30>
 8014828:	e7e9      	b.n	80147fe <_puts_r+0x72>
 801482a:	6823      	ldr	r3, [r4, #0]
 801482c:	200a      	movs	r0, #10
 801482e:	1c5a      	adds	r2, r3, #1
 8014830:	6022      	str	r2, [r4, #0]
 8014832:	7018      	strb	r0, [r3, #0]
 8014834:	e7e5      	b.n	8014802 <_puts_r+0x76>
 8014836:	bf00      	nop
 8014838:	08019cdc 	.word	0x08019cdc
 801483c:	08019cfc 	.word	0x08019cfc
 8014840:	08019cbc 	.word	0x08019cbc

08014844 <puts>:
 8014844:	4b02      	ldr	r3, [pc, #8]	; (8014850 <puts+0xc>)
 8014846:	4601      	mov	r1, r0
 8014848:	6818      	ldr	r0, [r3, #0]
 801484a:	f7ff bf9f 	b.w	801478c <_puts_r>
 801484e:	bf00      	nop
 8014850:	20000024 	.word	0x20000024

08014854 <srand>:
 8014854:	b538      	push	{r3, r4, r5, lr}
 8014856:	4b0d      	ldr	r3, [pc, #52]	; (801488c <srand+0x38>)
 8014858:	681c      	ldr	r4, [r3, #0]
 801485a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801485c:	4605      	mov	r5, r0
 801485e:	b97b      	cbnz	r3, 8014880 <srand+0x2c>
 8014860:	2018      	movs	r0, #24
 8014862:	f001 f975 	bl	8015b50 <malloc>
 8014866:	4a0a      	ldr	r2, [pc, #40]	; (8014890 <srand+0x3c>)
 8014868:	4b0a      	ldr	r3, [pc, #40]	; (8014894 <srand+0x40>)
 801486a:	63a0      	str	r0, [r4, #56]	; 0x38
 801486c:	e9c0 2300 	strd	r2, r3, [r0]
 8014870:	4b09      	ldr	r3, [pc, #36]	; (8014898 <srand+0x44>)
 8014872:	6083      	str	r3, [r0, #8]
 8014874:	230b      	movs	r3, #11
 8014876:	8183      	strh	r3, [r0, #12]
 8014878:	2201      	movs	r2, #1
 801487a:	2300      	movs	r3, #0
 801487c:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8014880:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8014882:	2200      	movs	r2, #0
 8014884:	611d      	str	r5, [r3, #16]
 8014886:	615a      	str	r2, [r3, #20]
 8014888:	bd38      	pop	{r3, r4, r5, pc}
 801488a:	bf00      	nop
 801488c:	20000024 	.word	0x20000024
 8014890:	abcd330e 	.word	0xabcd330e
 8014894:	e66d1234 	.word	0xe66d1234
 8014898:	0005deec 	.word	0x0005deec

0801489c <rand>:
 801489c:	b538      	push	{r3, r4, r5, lr}
 801489e:	4b13      	ldr	r3, [pc, #76]	; (80148ec <rand+0x50>)
 80148a0:	681c      	ldr	r4, [r3, #0]
 80148a2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80148a4:	b97b      	cbnz	r3, 80148c6 <rand+0x2a>
 80148a6:	2018      	movs	r0, #24
 80148a8:	f001 f952 	bl	8015b50 <malloc>
 80148ac:	4a10      	ldr	r2, [pc, #64]	; (80148f0 <rand+0x54>)
 80148ae:	4b11      	ldr	r3, [pc, #68]	; (80148f4 <rand+0x58>)
 80148b0:	63a0      	str	r0, [r4, #56]	; 0x38
 80148b2:	e9c0 2300 	strd	r2, r3, [r0]
 80148b6:	4b10      	ldr	r3, [pc, #64]	; (80148f8 <rand+0x5c>)
 80148b8:	6083      	str	r3, [r0, #8]
 80148ba:	230b      	movs	r3, #11
 80148bc:	8183      	strh	r3, [r0, #12]
 80148be:	2201      	movs	r2, #1
 80148c0:	2300      	movs	r3, #0
 80148c2:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80148c6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80148c8:	480c      	ldr	r0, [pc, #48]	; (80148fc <rand+0x60>)
 80148ca:	690a      	ldr	r2, [r1, #16]
 80148cc:	694b      	ldr	r3, [r1, #20]
 80148ce:	4c0c      	ldr	r4, [pc, #48]	; (8014900 <rand+0x64>)
 80148d0:	4350      	muls	r0, r2
 80148d2:	fb04 0003 	mla	r0, r4, r3, r0
 80148d6:	fba2 2304 	umull	r2, r3, r2, r4
 80148da:	4403      	add	r3, r0
 80148dc:	1c54      	adds	r4, r2, #1
 80148de:	f143 0500 	adc.w	r5, r3, #0
 80148e2:	e9c1 4504 	strd	r4, r5, [r1, #16]
 80148e6:	f025 4000 	bic.w	r0, r5, #2147483648	; 0x80000000
 80148ea:	bd38      	pop	{r3, r4, r5, pc}
 80148ec:	20000024 	.word	0x20000024
 80148f0:	abcd330e 	.word	0xabcd330e
 80148f4:	e66d1234 	.word	0xe66d1234
 80148f8:	0005deec 	.word	0x0005deec
 80148fc:	5851f42d 	.word	0x5851f42d
 8014900:	4c957f2d 	.word	0x4c957f2d

08014904 <siprintf>:
 8014904:	b40e      	push	{r1, r2, r3}
 8014906:	b500      	push	{lr}
 8014908:	b09c      	sub	sp, #112	; 0x70
 801490a:	ab1d      	add	r3, sp, #116	; 0x74
 801490c:	9002      	str	r0, [sp, #8]
 801490e:	9006      	str	r0, [sp, #24]
 8014910:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8014914:	4809      	ldr	r0, [pc, #36]	; (801493c <siprintf+0x38>)
 8014916:	9107      	str	r1, [sp, #28]
 8014918:	9104      	str	r1, [sp, #16]
 801491a:	4909      	ldr	r1, [pc, #36]	; (8014940 <siprintf+0x3c>)
 801491c:	f853 2b04 	ldr.w	r2, [r3], #4
 8014920:	9105      	str	r1, [sp, #20]
 8014922:	6800      	ldr	r0, [r0, #0]
 8014924:	9301      	str	r3, [sp, #4]
 8014926:	a902      	add	r1, sp, #8
 8014928:	f001 fd06 	bl	8016338 <_svfiprintf_r>
 801492c:	9b02      	ldr	r3, [sp, #8]
 801492e:	2200      	movs	r2, #0
 8014930:	701a      	strb	r2, [r3, #0]
 8014932:	b01c      	add	sp, #112	; 0x70
 8014934:	f85d eb04 	ldr.w	lr, [sp], #4
 8014938:	b003      	add	sp, #12
 801493a:	4770      	bx	lr
 801493c:	20000024 	.word	0x20000024
 8014940:	ffff0208 	.word	0xffff0208

08014944 <strncpy>:
 8014944:	b570      	push	{r4, r5, r6, lr}
 8014946:	3901      	subs	r1, #1
 8014948:	4604      	mov	r4, r0
 801494a:	b902      	cbnz	r2, 801494e <strncpy+0xa>
 801494c:	bd70      	pop	{r4, r5, r6, pc}
 801494e:	4623      	mov	r3, r4
 8014950:	f811 5f01 	ldrb.w	r5, [r1, #1]!
 8014954:	f803 5b01 	strb.w	r5, [r3], #1
 8014958:	1e56      	subs	r6, r2, #1
 801495a:	b92d      	cbnz	r5, 8014968 <strncpy+0x24>
 801495c:	4414      	add	r4, r2
 801495e:	42a3      	cmp	r3, r4
 8014960:	d0f4      	beq.n	801494c <strncpy+0x8>
 8014962:	f803 5b01 	strb.w	r5, [r3], #1
 8014966:	e7fa      	b.n	801495e <strncpy+0x1a>
 8014968:	461c      	mov	r4, r3
 801496a:	4632      	mov	r2, r6
 801496c:	e7ed      	b.n	801494a <strncpy+0x6>
	...

08014970 <__swbuf_r>:
 8014970:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014972:	460e      	mov	r6, r1
 8014974:	4614      	mov	r4, r2
 8014976:	4605      	mov	r5, r0
 8014978:	b118      	cbz	r0, 8014982 <__swbuf_r+0x12>
 801497a:	6983      	ldr	r3, [r0, #24]
 801497c:	b90b      	cbnz	r3, 8014982 <__swbuf_r+0x12>
 801497e:	f000 ffeb 	bl	8015958 <__sinit>
 8014982:	4b21      	ldr	r3, [pc, #132]	; (8014a08 <__swbuf_r+0x98>)
 8014984:	429c      	cmp	r4, r3
 8014986:	d12a      	bne.n	80149de <__swbuf_r+0x6e>
 8014988:	686c      	ldr	r4, [r5, #4]
 801498a:	69a3      	ldr	r3, [r4, #24]
 801498c:	60a3      	str	r3, [r4, #8]
 801498e:	89a3      	ldrh	r3, [r4, #12]
 8014990:	071a      	lsls	r2, r3, #28
 8014992:	d52e      	bpl.n	80149f2 <__swbuf_r+0x82>
 8014994:	6923      	ldr	r3, [r4, #16]
 8014996:	b363      	cbz	r3, 80149f2 <__swbuf_r+0x82>
 8014998:	6923      	ldr	r3, [r4, #16]
 801499a:	6820      	ldr	r0, [r4, #0]
 801499c:	1ac0      	subs	r0, r0, r3
 801499e:	6963      	ldr	r3, [r4, #20]
 80149a0:	b2f6      	uxtb	r6, r6
 80149a2:	4283      	cmp	r3, r0
 80149a4:	4637      	mov	r7, r6
 80149a6:	dc04      	bgt.n	80149b2 <__swbuf_r+0x42>
 80149a8:	4621      	mov	r1, r4
 80149aa:	4628      	mov	r0, r5
 80149ac:	f000 ff6a 	bl	8015884 <_fflush_r>
 80149b0:	bb28      	cbnz	r0, 80149fe <__swbuf_r+0x8e>
 80149b2:	68a3      	ldr	r3, [r4, #8]
 80149b4:	3b01      	subs	r3, #1
 80149b6:	60a3      	str	r3, [r4, #8]
 80149b8:	6823      	ldr	r3, [r4, #0]
 80149ba:	1c5a      	adds	r2, r3, #1
 80149bc:	6022      	str	r2, [r4, #0]
 80149be:	701e      	strb	r6, [r3, #0]
 80149c0:	6963      	ldr	r3, [r4, #20]
 80149c2:	3001      	adds	r0, #1
 80149c4:	4283      	cmp	r3, r0
 80149c6:	d004      	beq.n	80149d2 <__swbuf_r+0x62>
 80149c8:	89a3      	ldrh	r3, [r4, #12]
 80149ca:	07db      	lsls	r3, r3, #31
 80149cc:	d519      	bpl.n	8014a02 <__swbuf_r+0x92>
 80149ce:	2e0a      	cmp	r6, #10
 80149d0:	d117      	bne.n	8014a02 <__swbuf_r+0x92>
 80149d2:	4621      	mov	r1, r4
 80149d4:	4628      	mov	r0, r5
 80149d6:	f000 ff55 	bl	8015884 <_fflush_r>
 80149da:	b190      	cbz	r0, 8014a02 <__swbuf_r+0x92>
 80149dc:	e00f      	b.n	80149fe <__swbuf_r+0x8e>
 80149de:	4b0b      	ldr	r3, [pc, #44]	; (8014a0c <__swbuf_r+0x9c>)
 80149e0:	429c      	cmp	r4, r3
 80149e2:	d101      	bne.n	80149e8 <__swbuf_r+0x78>
 80149e4:	68ac      	ldr	r4, [r5, #8]
 80149e6:	e7d0      	b.n	801498a <__swbuf_r+0x1a>
 80149e8:	4b09      	ldr	r3, [pc, #36]	; (8014a10 <__swbuf_r+0xa0>)
 80149ea:	429c      	cmp	r4, r3
 80149ec:	bf08      	it	eq
 80149ee:	68ec      	ldreq	r4, [r5, #12]
 80149f0:	e7cb      	b.n	801498a <__swbuf_r+0x1a>
 80149f2:	4621      	mov	r1, r4
 80149f4:	4628      	mov	r0, r5
 80149f6:	f000 f80d 	bl	8014a14 <__swsetup_r>
 80149fa:	2800      	cmp	r0, #0
 80149fc:	d0cc      	beq.n	8014998 <__swbuf_r+0x28>
 80149fe:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8014a02:	4638      	mov	r0, r7
 8014a04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014a06:	bf00      	nop
 8014a08:	08019cdc 	.word	0x08019cdc
 8014a0c:	08019cfc 	.word	0x08019cfc
 8014a10:	08019cbc 	.word	0x08019cbc

08014a14 <__swsetup_r>:
 8014a14:	4b32      	ldr	r3, [pc, #200]	; (8014ae0 <__swsetup_r+0xcc>)
 8014a16:	b570      	push	{r4, r5, r6, lr}
 8014a18:	681d      	ldr	r5, [r3, #0]
 8014a1a:	4606      	mov	r6, r0
 8014a1c:	460c      	mov	r4, r1
 8014a1e:	b125      	cbz	r5, 8014a2a <__swsetup_r+0x16>
 8014a20:	69ab      	ldr	r3, [r5, #24]
 8014a22:	b913      	cbnz	r3, 8014a2a <__swsetup_r+0x16>
 8014a24:	4628      	mov	r0, r5
 8014a26:	f000 ff97 	bl	8015958 <__sinit>
 8014a2a:	4b2e      	ldr	r3, [pc, #184]	; (8014ae4 <__swsetup_r+0xd0>)
 8014a2c:	429c      	cmp	r4, r3
 8014a2e:	d10f      	bne.n	8014a50 <__swsetup_r+0x3c>
 8014a30:	686c      	ldr	r4, [r5, #4]
 8014a32:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014a36:	b29a      	uxth	r2, r3
 8014a38:	0715      	lsls	r5, r2, #28
 8014a3a:	d42c      	bmi.n	8014a96 <__swsetup_r+0x82>
 8014a3c:	06d0      	lsls	r0, r2, #27
 8014a3e:	d411      	bmi.n	8014a64 <__swsetup_r+0x50>
 8014a40:	2209      	movs	r2, #9
 8014a42:	6032      	str	r2, [r6, #0]
 8014a44:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014a48:	81a3      	strh	r3, [r4, #12]
 8014a4a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8014a4e:	e03e      	b.n	8014ace <__swsetup_r+0xba>
 8014a50:	4b25      	ldr	r3, [pc, #148]	; (8014ae8 <__swsetup_r+0xd4>)
 8014a52:	429c      	cmp	r4, r3
 8014a54:	d101      	bne.n	8014a5a <__swsetup_r+0x46>
 8014a56:	68ac      	ldr	r4, [r5, #8]
 8014a58:	e7eb      	b.n	8014a32 <__swsetup_r+0x1e>
 8014a5a:	4b24      	ldr	r3, [pc, #144]	; (8014aec <__swsetup_r+0xd8>)
 8014a5c:	429c      	cmp	r4, r3
 8014a5e:	bf08      	it	eq
 8014a60:	68ec      	ldreq	r4, [r5, #12]
 8014a62:	e7e6      	b.n	8014a32 <__swsetup_r+0x1e>
 8014a64:	0751      	lsls	r1, r2, #29
 8014a66:	d512      	bpl.n	8014a8e <__swsetup_r+0x7a>
 8014a68:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8014a6a:	b141      	cbz	r1, 8014a7e <__swsetup_r+0x6a>
 8014a6c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8014a70:	4299      	cmp	r1, r3
 8014a72:	d002      	beq.n	8014a7a <__swsetup_r+0x66>
 8014a74:	4630      	mov	r0, r6
 8014a76:	f001 fb5d 	bl	8016134 <_free_r>
 8014a7a:	2300      	movs	r3, #0
 8014a7c:	6363      	str	r3, [r4, #52]	; 0x34
 8014a7e:	89a3      	ldrh	r3, [r4, #12]
 8014a80:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8014a84:	81a3      	strh	r3, [r4, #12]
 8014a86:	2300      	movs	r3, #0
 8014a88:	6063      	str	r3, [r4, #4]
 8014a8a:	6923      	ldr	r3, [r4, #16]
 8014a8c:	6023      	str	r3, [r4, #0]
 8014a8e:	89a3      	ldrh	r3, [r4, #12]
 8014a90:	f043 0308 	orr.w	r3, r3, #8
 8014a94:	81a3      	strh	r3, [r4, #12]
 8014a96:	6923      	ldr	r3, [r4, #16]
 8014a98:	b94b      	cbnz	r3, 8014aae <__swsetup_r+0x9a>
 8014a9a:	89a3      	ldrh	r3, [r4, #12]
 8014a9c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8014aa0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8014aa4:	d003      	beq.n	8014aae <__swsetup_r+0x9a>
 8014aa6:	4621      	mov	r1, r4
 8014aa8:	4630      	mov	r0, r6
 8014aaa:	f001 f811 	bl	8015ad0 <__smakebuf_r>
 8014aae:	89a2      	ldrh	r2, [r4, #12]
 8014ab0:	f012 0301 	ands.w	r3, r2, #1
 8014ab4:	d00c      	beq.n	8014ad0 <__swsetup_r+0xbc>
 8014ab6:	2300      	movs	r3, #0
 8014ab8:	60a3      	str	r3, [r4, #8]
 8014aba:	6963      	ldr	r3, [r4, #20]
 8014abc:	425b      	negs	r3, r3
 8014abe:	61a3      	str	r3, [r4, #24]
 8014ac0:	6923      	ldr	r3, [r4, #16]
 8014ac2:	b953      	cbnz	r3, 8014ada <__swsetup_r+0xc6>
 8014ac4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014ac8:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8014acc:	d1ba      	bne.n	8014a44 <__swsetup_r+0x30>
 8014ace:	bd70      	pop	{r4, r5, r6, pc}
 8014ad0:	0792      	lsls	r2, r2, #30
 8014ad2:	bf58      	it	pl
 8014ad4:	6963      	ldrpl	r3, [r4, #20]
 8014ad6:	60a3      	str	r3, [r4, #8]
 8014ad8:	e7f2      	b.n	8014ac0 <__swsetup_r+0xac>
 8014ada:	2000      	movs	r0, #0
 8014adc:	e7f7      	b.n	8014ace <__swsetup_r+0xba>
 8014ade:	bf00      	nop
 8014ae0:	20000024 	.word	0x20000024
 8014ae4:	08019cdc 	.word	0x08019cdc
 8014ae8:	08019cfc 	.word	0x08019cfc
 8014aec:	08019cbc 	.word	0x08019cbc

08014af0 <quorem>:
 8014af0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014af4:	6903      	ldr	r3, [r0, #16]
 8014af6:	690c      	ldr	r4, [r1, #16]
 8014af8:	42a3      	cmp	r3, r4
 8014afa:	4680      	mov	r8, r0
 8014afc:	f2c0 8082 	blt.w	8014c04 <quorem+0x114>
 8014b00:	3c01      	subs	r4, #1
 8014b02:	f101 0714 	add.w	r7, r1, #20
 8014b06:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8014b0a:	f100 0614 	add.w	r6, r0, #20
 8014b0e:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8014b12:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8014b16:	eb06 030c 	add.w	r3, r6, ip
 8014b1a:	3501      	adds	r5, #1
 8014b1c:	eb07 090c 	add.w	r9, r7, ip
 8014b20:	9301      	str	r3, [sp, #4]
 8014b22:	fbb0 f5f5 	udiv	r5, r0, r5
 8014b26:	b395      	cbz	r5, 8014b8e <quorem+0x9e>
 8014b28:	f04f 0a00 	mov.w	sl, #0
 8014b2c:	4638      	mov	r0, r7
 8014b2e:	46b6      	mov	lr, r6
 8014b30:	46d3      	mov	fp, sl
 8014b32:	f850 2b04 	ldr.w	r2, [r0], #4
 8014b36:	b293      	uxth	r3, r2
 8014b38:	fb05 a303 	mla	r3, r5, r3, sl
 8014b3c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8014b40:	b29b      	uxth	r3, r3
 8014b42:	ebab 0303 	sub.w	r3, fp, r3
 8014b46:	0c12      	lsrs	r2, r2, #16
 8014b48:	f8de b000 	ldr.w	fp, [lr]
 8014b4c:	fb05 a202 	mla	r2, r5, r2, sl
 8014b50:	fa13 f38b 	uxtah	r3, r3, fp
 8014b54:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8014b58:	fa1f fb82 	uxth.w	fp, r2
 8014b5c:	f8de 2000 	ldr.w	r2, [lr]
 8014b60:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8014b64:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8014b68:	b29b      	uxth	r3, r3
 8014b6a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8014b6e:	4581      	cmp	r9, r0
 8014b70:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8014b74:	f84e 3b04 	str.w	r3, [lr], #4
 8014b78:	d2db      	bcs.n	8014b32 <quorem+0x42>
 8014b7a:	f856 300c 	ldr.w	r3, [r6, ip]
 8014b7e:	b933      	cbnz	r3, 8014b8e <quorem+0x9e>
 8014b80:	9b01      	ldr	r3, [sp, #4]
 8014b82:	3b04      	subs	r3, #4
 8014b84:	429e      	cmp	r6, r3
 8014b86:	461a      	mov	r2, r3
 8014b88:	d330      	bcc.n	8014bec <quorem+0xfc>
 8014b8a:	f8c8 4010 	str.w	r4, [r8, #16]
 8014b8e:	4640      	mov	r0, r8
 8014b90:	f001 f9fc 	bl	8015f8c <__mcmp>
 8014b94:	2800      	cmp	r0, #0
 8014b96:	db25      	blt.n	8014be4 <quorem+0xf4>
 8014b98:	3501      	adds	r5, #1
 8014b9a:	4630      	mov	r0, r6
 8014b9c:	f04f 0c00 	mov.w	ip, #0
 8014ba0:	f857 2b04 	ldr.w	r2, [r7], #4
 8014ba4:	f8d0 e000 	ldr.w	lr, [r0]
 8014ba8:	b293      	uxth	r3, r2
 8014baa:	ebac 0303 	sub.w	r3, ip, r3
 8014bae:	0c12      	lsrs	r2, r2, #16
 8014bb0:	fa13 f38e 	uxtah	r3, r3, lr
 8014bb4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8014bb8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8014bbc:	b29b      	uxth	r3, r3
 8014bbe:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8014bc2:	45b9      	cmp	r9, r7
 8014bc4:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8014bc8:	f840 3b04 	str.w	r3, [r0], #4
 8014bcc:	d2e8      	bcs.n	8014ba0 <quorem+0xb0>
 8014bce:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8014bd2:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8014bd6:	b92a      	cbnz	r2, 8014be4 <quorem+0xf4>
 8014bd8:	3b04      	subs	r3, #4
 8014bda:	429e      	cmp	r6, r3
 8014bdc:	461a      	mov	r2, r3
 8014bde:	d30b      	bcc.n	8014bf8 <quorem+0x108>
 8014be0:	f8c8 4010 	str.w	r4, [r8, #16]
 8014be4:	4628      	mov	r0, r5
 8014be6:	b003      	add	sp, #12
 8014be8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014bec:	6812      	ldr	r2, [r2, #0]
 8014bee:	3b04      	subs	r3, #4
 8014bf0:	2a00      	cmp	r2, #0
 8014bf2:	d1ca      	bne.n	8014b8a <quorem+0x9a>
 8014bf4:	3c01      	subs	r4, #1
 8014bf6:	e7c5      	b.n	8014b84 <quorem+0x94>
 8014bf8:	6812      	ldr	r2, [r2, #0]
 8014bfa:	3b04      	subs	r3, #4
 8014bfc:	2a00      	cmp	r2, #0
 8014bfe:	d1ef      	bne.n	8014be0 <quorem+0xf0>
 8014c00:	3c01      	subs	r4, #1
 8014c02:	e7ea      	b.n	8014bda <quorem+0xea>
 8014c04:	2000      	movs	r0, #0
 8014c06:	e7ee      	b.n	8014be6 <quorem+0xf6>

08014c08 <_dtoa_r>:
 8014c08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014c0c:	ec57 6b10 	vmov	r6, r7, d0
 8014c10:	b097      	sub	sp, #92	; 0x5c
 8014c12:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8014c14:	9106      	str	r1, [sp, #24]
 8014c16:	4604      	mov	r4, r0
 8014c18:	920b      	str	r2, [sp, #44]	; 0x2c
 8014c1a:	9312      	str	r3, [sp, #72]	; 0x48
 8014c1c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8014c20:	e9cd 6700 	strd	r6, r7, [sp]
 8014c24:	b93d      	cbnz	r5, 8014c36 <_dtoa_r+0x2e>
 8014c26:	2010      	movs	r0, #16
 8014c28:	f000 ff92 	bl	8015b50 <malloc>
 8014c2c:	6260      	str	r0, [r4, #36]	; 0x24
 8014c2e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8014c32:	6005      	str	r5, [r0, #0]
 8014c34:	60c5      	str	r5, [r0, #12]
 8014c36:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8014c38:	6819      	ldr	r1, [r3, #0]
 8014c3a:	b151      	cbz	r1, 8014c52 <_dtoa_r+0x4a>
 8014c3c:	685a      	ldr	r2, [r3, #4]
 8014c3e:	604a      	str	r2, [r1, #4]
 8014c40:	2301      	movs	r3, #1
 8014c42:	4093      	lsls	r3, r2
 8014c44:	608b      	str	r3, [r1, #8]
 8014c46:	4620      	mov	r0, r4
 8014c48:	f000 ffbe 	bl	8015bc8 <_Bfree>
 8014c4c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8014c4e:	2200      	movs	r2, #0
 8014c50:	601a      	str	r2, [r3, #0]
 8014c52:	1e3b      	subs	r3, r7, #0
 8014c54:	bfbb      	ittet	lt
 8014c56:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8014c5a:	9301      	strlt	r3, [sp, #4]
 8014c5c:	2300      	movge	r3, #0
 8014c5e:	2201      	movlt	r2, #1
 8014c60:	bfac      	ite	ge
 8014c62:	f8c8 3000 	strge.w	r3, [r8]
 8014c66:	f8c8 2000 	strlt.w	r2, [r8]
 8014c6a:	4baf      	ldr	r3, [pc, #700]	; (8014f28 <_dtoa_r+0x320>)
 8014c6c:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8014c70:	ea33 0308 	bics.w	r3, r3, r8
 8014c74:	d114      	bne.n	8014ca0 <_dtoa_r+0x98>
 8014c76:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8014c78:	f242 730f 	movw	r3, #9999	; 0x270f
 8014c7c:	6013      	str	r3, [r2, #0]
 8014c7e:	9b00      	ldr	r3, [sp, #0]
 8014c80:	b923      	cbnz	r3, 8014c8c <_dtoa_r+0x84>
 8014c82:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8014c86:	2800      	cmp	r0, #0
 8014c88:	f000 8542 	beq.w	8015710 <_dtoa_r+0xb08>
 8014c8c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8014c8e:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 8014f3c <_dtoa_r+0x334>
 8014c92:	2b00      	cmp	r3, #0
 8014c94:	f000 8544 	beq.w	8015720 <_dtoa_r+0xb18>
 8014c98:	f10b 0303 	add.w	r3, fp, #3
 8014c9c:	f000 bd3e 	b.w	801571c <_dtoa_r+0xb14>
 8014ca0:	e9dd 6700 	ldrd	r6, r7, [sp]
 8014ca4:	2200      	movs	r2, #0
 8014ca6:	2300      	movs	r3, #0
 8014ca8:	4630      	mov	r0, r6
 8014caa:	4639      	mov	r1, r7
 8014cac:	f7eb fee4 	bl	8000a78 <__aeabi_dcmpeq>
 8014cb0:	4681      	mov	r9, r0
 8014cb2:	b168      	cbz	r0, 8014cd0 <_dtoa_r+0xc8>
 8014cb4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8014cb6:	2301      	movs	r3, #1
 8014cb8:	6013      	str	r3, [r2, #0]
 8014cba:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8014cbc:	2b00      	cmp	r3, #0
 8014cbe:	f000 8524 	beq.w	801570a <_dtoa_r+0xb02>
 8014cc2:	4b9a      	ldr	r3, [pc, #616]	; (8014f2c <_dtoa_r+0x324>)
 8014cc4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8014cc6:	f103 3bff 	add.w	fp, r3, #4294967295	; 0xffffffff
 8014cca:	6013      	str	r3, [r2, #0]
 8014ccc:	f000 bd28 	b.w	8015720 <_dtoa_r+0xb18>
 8014cd0:	aa14      	add	r2, sp, #80	; 0x50
 8014cd2:	a915      	add	r1, sp, #84	; 0x54
 8014cd4:	ec47 6b10 	vmov	d0, r6, r7
 8014cd8:	4620      	mov	r0, r4
 8014cda:	f001 f9ce 	bl	801607a <__d2b>
 8014cde:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8014ce2:	9004      	str	r0, [sp, #16]
 8014ce4:	2d00      	cmp	r5, #0
 8014ce6:	d07c      	beq.n	8014de2 <_dtoa_r+0x1da>
 8014ce8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8014cec:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8014cf0:	46b2      	mov	sl, r6
 8014cf2:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 8014cf6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8014cfa:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 8014cfe:	2200      	movs	r2, #0
 8014d00:	4b8b      	ldr	r3, [pc, #556]	; (8014f30 <_dtoa_r+0x328>)
 8014d02:	4650      	mov	r0, sl
 8014d04:	4659      	mov	r1, fp
 8014d06:	f7eb fa97 	bl	8000238 <__aeabi_dsub>
 8014d0a:	a381      	add	r3, pc, #516	; (adr r3, 8014f10 <_dtoa_r+0x308>)
 8014d0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014d10:	f7eb fc4a 	bl	80005a8 <__aeabi_dmul>
 8014d14:	a380      	add	r3, pc, #512	; (adr r3, 8014f18 <_dtoa_r+0x310>)
 8014d16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014d1a:	f7eb fa8f 	bl	800023c <__adddf3>
 8014d1e:	4606      	mov	r6, r0
 8014d20:	4628      	mov	r0, r5
 8014d22:	460f      	mov	r7, r1
 8014d24:	f7eb fbd6 	bl	80004d4 <__aeabi_i2d>
 8014d28:	a37d      	add	r3, pc, #500	; (adr r3, 8014f20 <_dtoa_r+0x318>)
 8014d2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014d2e:	f7eb fc3b 	bl	80005a8 <__aeabi_dmul>
 8014d32:	4602      	mov	r2, r0
 8014d34:	460b      	mov	r3, r1
 8014d36:	4630      	mov	r0, r6
 8014d38:	4639      	mov	r1, r7
 8014d3a:	f7eb fa7f 	bl	800023c <__adddf3>
 8014d3e:	4606      	mov	r6, r0
 8014d40:	460f      	mov	r7, r1
 8014d42:	f7eb fee1 	bl	8000b08 <__aeabi_d2iz>
 8014d46:	2200      	movs	r2, #0
 8014d48:	4682      	mov	sl, r0
 8014d4a:	2300      	movs	r3, #0
 8014d4c:	4630      	mov	r0, r6
 8014d4e:	4639      	mov	r1, r7
 8014d50:	f7eb fe9c 	bl	8000a8c <__aeabi_dcmplt>
 8014d54:	b148      	cbz	r0, 8014d6a <_dtoa_r+0x162>
 8014d56:	4650      	mov	r0, sl
 8014d58:	f7eb fbbc 	bl	80004d4 <__aeabi_i2d>
 8014d5c:	4632      	mov	r2, r6
 8014d5e:	463b      	mov	r3, r7
 8014d60:	f7eb fe8a 	bl	8000a78 <__aeabi_dcmpeq>
 8014d64:	b908      	cbnz	r0, 8014d6a <_dtoa_r+0x162>
 8014d66:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8014d6a:	f1ba 0f16 	cmp.w	sl, #22
 8014d6e:	d859      	bhi.n	8014e24 <_dtoa_r+0x21c>
 8014d70:	4970      	ldr	r1, [pc, #448]	; (8014f34 <_dtoa_r+0x32c>)
 8014d72:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8014d76:	e9dd 2300 	ldrd	r2, r3, [sp]
 8014d7a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8014d7e:	f7eb fea3 	bl	8000ac8 <__aeabi_dcmpgt>
 8014d82:	2800      	cmp	r0, #0
 8014d84:	d050      	beq.n	8014e28 <_dtoa_r+0x220>
 8014d86:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8014d8a:	2300      	movs	r3, #0
 8014d8c:	930f      	str	r3, [sp, #60]	; 0x3c
 8014d8e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8014d90:	1b5d      	subs	r5, r3, r5
 8014d92:	f1b5 0801 	subs.w	r8, r5, #1
 8014d96:	bf49      	itett	mi
 8014d98:	f1c5 0301 	rsbmi	r3, r5, #1
 8014d9c:	2300      	movpl	r3, #0
 8014d9e:	9305      	strmi	r3, [sp, #20]
 8014da0:	f04f 0800 	movmi.w	r8, #0
 8014da4:	bf58      	it	pl
 8014da6:	9305      	strpl	r3, [sp, #20]
 8014da8:	f1ba 0f00 	cmp.w	sl, #0
 8014dac:	db3e      	blt.n	8014e2c <_dtoa_r+0x224>
 8014dae:	2300      	movs	r3, #0
 8014db0:	44d0      	add	r8, sl
 8014db2:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8014db6:	9307      	str	r3, [sp, #28]
 8014db8:	9b06      	ldr	r3, [sp, #24]
 8014dba:	2b09      	cmp	r3, #9
 8014dbc:	f200 8090 	bhi.w	8014ee0 <_dtoa_r+0x2d8>
 8014dc0:	2b05      	cmp	r3, #5
 8014dc2:	bfc4      	itt	gt
 8014dc4:	3b04      	subgt	r3, #4
 8014dc6:	9306      	strgt	r3, [sp, #24]
 8014dc8:	9b06      	ldr	r3, [sp, #24]
 8014dca:	f1a3 0302 	sub.w	r3, r3, #2
 8014dce:	bfcc      	ite	gt
 8014dd0:	2500      	movgt	r5, #0
 8014dd2:	2501      	movle	r5, #1
 8014dd4:	2b03      	cmp	r3, #3
 8014dd6:	f200 808f 	bhi.w	8014ef8 <_dtoa_r+0x2f0>
 8014dda:	e8df f003 	tbb	[pc, r3]
 8014dde:	7f7d      	.short	0x7f7d
 8014de0:	7131      	.short	0x7131
 8014de2:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 8014de6:	441d      	add	r5, r3
 8014de8:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8014dec:	2820      	cmp	r0, #32
 8014dee:	dd13      	ble.n	8014e18 <_dtoa_r+0x210>
 8014df0:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8014df4:	9b00      	ldr	r3, [sp, #0]
 8014df6:	fa08 f800 	lsl.w	r8, r8, r0
 8014dfa:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8014dfe:	fa23 f000 	lsr.w	r0, r3, r0
 8014e02:	ea48 0000 	orr.w	r0, r8, r0
 8014e06:	f7eb fb55 	bl	80004b4 <__aeabi_ui2d>
 8014e0a:	2301      	movs	r3, #1
 8014e0c:	4682      	mov	sl, r0
 8014e0e:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 8014e12:	3d01      	subs	r5, #1
 8014e14:	9313      	str	r3, [sp, #76]	; 0x4c
 8014e16:	e772      	b.n	8014cfe <_dtoa_r+0xf6>
 8014e18:	9b00      	ldr	r3, [sp, #0]
 8014e1a:	f1c0 0020 	rsb	r0, r0, #32
 8014e1e:	fa03 f000 	lsl.w	r0, r3, r0
 8014e22:	e7f0      	b.n	8014e06 <_dtoa_r+0x1fe>
 8014e24:	2301      	movs	r3, #1
 8014e26:	e7b1      	b.n	8014d8c <_dtoa_r+0x184>
 8014e28:	900f      	str	r0, [sp, #60]	; 0x3c
 8014e2a:	e7b0      	b.n	8014d8e <_dtoa_r+0x186>
 8014e2c:	9b05      	ldr	r3, [sp, #20]
 8014e2e:	eba3 030a 	sub.w	r3, r3, sl
 8014e32:	9305      	str	r3, [sp, #20]
 8014e34:	f1ca 0300 	rsb	r3, sl, #0
 8014e38:	9307      	str	r3, [sp, #28]
 8014e3a:	2300      	movs	r3, #0
 8014e3c:	930e      	str	r3, [sp, #56]	; 0x38
 8014e3e:	e7bb      	b.n	8014db8 <_dtoa_r+0x1b0>
 8014e40:	2301      	movs	r3, #1
 8014e42:	930a      	str	r3, [sp, #40]	; 0x28
 8014e44:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014e46:	2b00      	cmp	r3, #0
 8014e48:	dd59      	ble.n	8014efe <_dtoa_r+0x2f6>
 8014e4a:	9302      	str	r3, [sp, #8]
 8014e4c:	4699      	mov	r9, r3
 8014e4e:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8014e50:	2200      	movs	r2, #0
 8014e52:	6072      	str	r2, [r6, #4]
 8014e54:	2204      	movs	r2, #4
 8014e56:	f102 0014 	add.w	r0, r2, #20
 8014e5a:	4298      	cmp	r0, r3
 8014e5c:	6871      	ldr	r1, [r6, #4]
 8014e5e:	d953      	bls.n	8014f08 <_dtoa_r+0x300>
 8014e60:	4620      	mov	r0, r4
 8014e62:	f000 fe7d 	bl	8015b60 <_Balloc>
 8014e66:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8014e68:	6030      	str	r0, [r6, #0]
 8014e6a:	f1b9 0f0e 	cmp.w	r9, #14
 8014e6e:	f8d3 b000 	ldr.w	fp, [r3]
 8014e72:	f200 80e6 	bhi.w	8015042 <_dtoa_r+0x43a>
 8014e76:	2d00      	cmp	r5, #0
 8014e78:	f000 80e3 	beq.w	8015042 <_dtoa_r+0x43a>
 8014e7c:	ed9d 7b00 	vldr	d7, [sp]
 8014e80:	f1ba 0f00 	cmp.w	sl, #0
 8014e84:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8014e88:	dd74      	ble.n	8014f74 <_dtoa_r+0x36c>
 8014e8a:	4a2a      	ldr	r2, [pc, #168]	; (8014f34 <_dtoa_r+0x32c>)
 8014e8c:	f00a 030f 	and.w	r3, sl, #15
 8014e90:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8014e94:	ed93 7b00 	vldr	d7, [r3]
 8014e98:	ea4f 162a 	mov.w	r6, sl, asr #4
 8014e9c:	06f0      	lsls	r0, r6, #27
 8014e9e:	ed8d 7b08 	vstr	d7, [sp, #32]
 8014ea2:	d565      	bpl.n	8014f70 <_dtoa_r+0x368>
 8014ea4:	4b24      	ldr	r3, [pc, #144]	; (8014f38 <_dtoa_r+0x330>)
 8014ea6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8014eaa:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8014eae:	f7eb fca5 	bl	80007fc <__aeabi_ddiv>
 8014eb2:	e9cd 0100 	strd	r0, r1, [sp]
 8014eb6:	f006 060f 	and.w	r6, r6, #15
 8014eba:	2503      	movs	r5, #3
 8014ebc:	4f1e      	ldr	r7, [pc, #120]	; (8014f38 <_dtoa_r+0x330>)
 8014ebe:	e04c      	b.n	8014f5a <_dtoa_r+0x352>
 8014ec0:	2301      	movs	r3, #1
 8014ec2:	930a      	str	r3, [sp, #40]	; 0x28
 8014ec4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014ec6:	4453      	add	r3, sl
 8014ec8:	f103 0901 	add.w	r9, r3, #1
 8014ecc:	9302      	str	r3, [sp, #8]
 8014ece:	464b      	mov	r3, r9
 8014ed0:	2b01      	cmp	r3, #1
 8014ed2:	bfb8      	it	lt
 8014ed4:	2301      	movlt	r3, #1
 8014ed6:	e7ba      	b.n	8014e4e <_dtoa_r+0x246>
 8014ed8:	2300      	movs	r3, #0
 8014eda:	e7b2      	b.n	8014e42 <_dtoa_r+0x23a>
 8014edc:	2300      	movs	r3, #0
 8014ede:	e7f0      	b.n	8014ec2 <_dtoa_r+0x2ba>
 8014ee0:	2501      	movs	r5, #1
 8014ee2:	2300      	movs	r3, #0
 8014ee4:	9306      	str	r3, [sp, #24]
 8014ee6:	950a      	str	r5, [sp, #40]	; 0x28
 8014ee8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8014eec:	9302      	str	r3, [sp, #8]
 8014eee:	4699      	mov	r9, r3
 8014ef0:	2200      	movs	r2, #0
 8014ef2:	2312      	movs	r3, #18
 8014ef4:	920b      	str	r2, [sp, #44]	; 0x2c
 8014ef6:	e7aa      	b.n	8014e4e <_dtoa_r+0x246>
 8014ef8:	2301      	movs	r3, #1
 8014efa:	930a      	str	r3, [sp, #40]	; 0x28
 8014efc:	e7f4      	b.n	8014ee8 <_dtoa_r+0x2e0>
 8014efe:	2301      	movs	r3, #1
 8014f00:	9302      	str	r3, [sp, #8]
 8014f02:	4699      	mov	r9, r3
 8014f04:	461a      	mov	r2, r3
 8014f06:	e7f5      	b.n	8014ef4 <_dtoa_r+0x2ec>
 8014f08:	3101      	adds	r1, #1
 8014f0a:	6071      	str	r1, [r6, #4]
 8014f0c:	0052      	lsls	r2, r2, #1
 8014f0e:	e7a2      	b.n	8014e56 <_dtoa_r+0x24e>
 8014f10:	636f4361 	.word	0x636f4361
 8014f14:	3fd287a7 	.word	0x3fd287a7
 8014f18:	8b60c8b3 	.word	0x8b60c8b3
 8014f1c:	3fc68a28 	.word	0x3fc68a28
 8014f20:	509f79fb 	.word	0x509f79fb
 8014f24:	3fd34413 	.word	0x3fd34413
 8014f28:	7ff00000 	.word	0x7ff00000
 8014f2c:	08019c89 	.word	0x08019c89
 8014f30:	3ff80000 	.word	0x3ff80000
 8014f34:	08019d48 	.word	0x08019d48
 8014f38:	08019d20 	.word	0x08019d20
 8014f3c:	08019cb5 	.word	0x08019cb5
 8014f40:	07f1      	lsls	r1, r6, #31
 8014f42:	d508      	bpl.n	8014f56 <_dtoa_r+0x34e>
 8014f44:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8014f48:	e9d7 2300 	ldrd	r2, r3, [r7]
 8014f4c:	f7eb fb2c 	bl	80005a8 <__aeabi_dmul>
 8014f50:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8014f54:	3501      	adds	r5, #1
 8014f56:	1076      	asrs	r6, r6, #1
 8014f58:	3708      	adds	r7, #8
 8014f5a:	2e00      	cmp	r6, #0
 8014f5c:	d1f0      	bne.n	8014f40 <_dtoa_r+0x338>
 8014f5e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8014f62:	e9dd 0100 	ldrd	r0, r1, [sp]
 8014f66:	f7eb fc49 	bl	80007fc <__aeabi_ddiv>
 8014f6a:	e9cd 0100 	strd	r0, r1, [sp]
 8014f6e:	e01a      	b.n	8014fa6 <_dtoa_r+0x39e>
 8014f70:	2502      	movs	r5, #2
 8014f72:	e7a3      	b.n	8014ebc <_dtoa_r+0x2b4>
 8014f74:	f000 80a0 	beq.w	80150b8 <_dtoa_r+0x4b0>
 8014f78:	f1ca 0600 	rsb	r6, sl, #0
 8014f7c:	4b9f      	ldr	r3, [pc, #636]	; (80151fc <_dtoa_r+0x5f4>)
 8014f7e:	4fa0      	ldr	r7, [pc, #640]	; (8015200 <_dtoa_r+0x5f8>)
 8014f80:	f006 020f 	and.w	r2, r6, #15
 8014f84:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8014f88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014f8c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8014f90:	f7eb fb0a 	bl	80005a8 <__aeabi_dmul>
 8014f94:	e9cd 0100 	strd	r0, r1, [sp]
 8014f98:	1136      	asrs	r6, r6, #4
 8014f9a:	2300      	movs	r3, #0
 8014f9c:	2502      	movs	r5, #2
 8014f9e:	2e00      	cmp	r6, #0
 8014fa0:	d17f      	bne.n	80150a2 <_dtoa_r+0x49a>
 8014fa2:	2b00      	cmp	r3, #0
 8014fa4:	d1e1      	bne.n	8014f6a <_dtoa_r+0x362>
 8014fa6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8014fa8:	2b00      	cmp	r3, #0
 8014faa:	f000 8087 	beq.w	80150bc <_dtoa_r+0x4b4>
 8014fae:	e9dd 6700 	ldrd	r6, r7, [sp]
 8014fb2:	2200      	movs	r2, #0
 8014fb4:	4b93      	ldr	r3, [pc, #588]	; (8015204 <_dtoa_r+0x5fc>)
 8014fb6:	4630      	mov	r0, r6
 8014fb8:	4639      	mov	r1, r7
 8014fba:	f7eb fd67 	bl	8000a8c <__aeabi_dcmplt>
 8014fbe:	2800      	cmp	r0, #0
 8014fc0:	d07c      	beq.n	80150bc <_dtoa_r+0x4b4>
 8014fc2:	f1b9 0f00 	cmp.w	r9, #0
 8014fc6:	d079      	beq.n	80150bc <_dtoa_r+0x4b4>
 8014fc8:	9b02      	ldr	r3, [sp, #8]
 8014fca:	2b00      	cmp	r3, #0
 8014fcc:	dd35      	ble.n	801503a <_dtoa_r+0x432>
 8014fce:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 8014fd2:	9308      	str	r3, [sp, #32]
 8014fd4:	4639      	mov	r1, r7
 8014fd6:	2200      	movs	r2, #0
 8014fd8:	4b8b      	ldr	r3, [pc, #556]	; (8015208 <_dtoa_r+0x600>)
 8014fda:	4630      	mov	r0, r6
 8014fdc:	f7eb fae4 	bl	80005a8 <__aeabi_dmul>
 8014fe0:	e9cd 0100 	strd	r0, r1, [sp]
 8014fe4:	9f02      	ldr	r7, [sp, #8]
 8014fe6:	3501      	adds	r5, #1
 8014fe8:	4628      	mov	r0, r5
 8014fea:	f7eb fa73 	bl	80004d4 <__aeabi_i2d>
 8014fee:	e9dd 2300 	ldrd	r2, r3, [sp]
 8014ff2:	f7eb fad9 	bl	80005a8 <__aeabi_dmul>
 8014ff6:	2200      	movs	r2, #0
 8014ff8:	4b84      	ldr	r3, [pc, #528]	; (801520c <_dtoa_r+0x604>)
 8014ffa:	f7eb f91f 	bl	800023c <__adddf3>
 8014ffe:	4605      	mov	r5, r0
 8015000:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8015004:	2f00      	cmp	r7, #0
 8015006:	d15d      	bne.n	80150c4 <_dtoa_r+0x4bc>
 8015008:	2200      	movs	r2, #0
 801500a:	4b81      	ldr	r3, [pc, #516]	; (8015210 <_dtoa_r+0x608>)
 801500c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8015010:	f7eb f912 	bl	8000238 <__aeabi_dsub>
 8015014:	462a      	mov	r2, r5
 8015016:	4633      	mov	r3, r6
 8015018:	e9cd 0100 	strd	r0, r1, [sp]
 801501c:	f7eb fd54 	bl	8000ac8 <__aeabi_dcmpgt>
 8015020:	2800      	cmp	r0, #0
 8015022:	f040 8288 	bne.w	8015536 <_dtoa_r+0x92e>
 8015026:	462a      	mov	r2, r5
 8015028:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 801502c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8015030:	f7eb fd2c 	bl	8000a8c <__aeabi_dcmplt>
 8015034:	2800      	cmp	r0, #0
 8015036:	f040 827c 	bne.w	8015532 <_dtoa_r+0x92a>
 801503a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 801503e:	e9cd 2300 	strd	r2, r3, [sp]
 8015042:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8015044:	2b00      	cmp	r3, #0
 8015046:	f2c0 8150 	blt.w	80152ea <_dtoa_r+0x6e2>
 801504a:	f1ba 0f0e 	cmp.w	sl, #14
 801504e:	f300 814c 	bgt.w	80152ea <_dtoa_r+0x6e2>
 8015052:	4b6a      	ldr	r3, [pc, #424]	; (80151fc <_dtoa_r+0x5f4>)
 8015054:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8015058:	ed93 7b00 	vldr	d7, [r3]
 801505c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801505e:	2b00      	cmp	r3, #0
 8015060:	ed8d 7b02 	vstr	d7, [sp, #8]
 8015064:	f280 80d8 	bge.w	8015218 <_dtoa_r+0x610>
 8015068:	f1b9 0f00 	cmp.w	r9, #0
 801506c:	f300 80d4 	bgt.w	8015218 <_dtoa_r+0x610>
 8015070:	f040 825e 	bne.w	8015530 <_dtoa_r+0x928>
 8015074:	2200      	movs	r2, #0
 8015076:	4b66      	ldr	r3, [pc, #408]	; (8015210 <_dtoa_r+0x608>)
 8015078:	ec51 0b17 	vmov	r0, r1, d7
 801507c:	f7eb fa94 	bl	80005a8 <__aeabi_dmul>
 8015080:	e9dd 2300 	ldrd	r2, r3, [sp]
 8015084:	f7eb fd16 	bl	8000ab4 <__aeabi_dcmpge>
 8015088:	464f      	mov	r7, r9
 801508a:	464e      	mov	r6, r9
 801508c:	2800      	cmp	r0, #0
 801508e:	f040 8234 	bne.w	80154fa <_dtoa_r+0x8f2>
 8015092:	2331      	movs	r3, #49	; 0x31
 8015094:	f10b 0501 	add.w	r5, fp, #1
 8015098:	f88b 3000 	strb.w	r3, [fp]
 801509c:	f10a 0a01 	add.w	sl, sl, #1
 80150a0:	e22f      	b.n	8015502 <_dtoa_r+0x8fa>
 80150a2:	07f2      	lsls	r2, r6, #31
 80150a4:	d505      	bpl.n	80150b2 <_dtoa_r+0x4aa>
 80150a6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80150aa:	f7eb fa7d 	bl	80005a8 <__aeabi_dmul>
 80150ae:	3501      	adds	r5, #1
 80150b0:	2301      	movs	r3, #1
 80150b2:	1076      	asrs	r6, r6, #1
 80150b4:	3708      	adds	r7, #8
 80150b6:	e772      	b.n	8014f9e <_dtoa_r+0x396>
 80150b8:	2502      	movs	r5, #2
 80150ba:	e774      	b.n	8014fa6 <_dtoa_r+0x39e>
 80150bc:	f8cd a020 	str.w	sl, [sp, #32]
 80150c0:	464f      	mov	r7, r9
 80150c2:	e791      	b.n	8014fe8 <_dtoa_r+0x3e0>
 80150c4:	4b4d      	ldr	r3, [pc, #308]	; (80151fc <_dtoa_r+0x5f4>)
 80150c6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80150ca:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 80150ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80150d0:	2b00      	cmp	r3, #0
 80150d2:	d047      	beq.n	8015164 <_dtoa_r+0x55c>
 80150d4:	4602      	mov	r2, r0
 80150d6:	460b      	mov	r3, r1
 80150d8:	2000      	movs	r0, #0
 80150da:	494e      	ldr	r1, [pc, #312]	; (8015214 <_dtoa_r+0x60c>)
 80150dc:	f7eb fb8e 	bl	80007fc <__aeabi_ddiv>
 80150e0:	462a      	mov	r2, r5
 80150e2:	4633      	mov	r3, r6
 80150e4:	f7eb f8a8 	bl	8000238 <__aeabi_dsub>
 80150e8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80150ec:	465d      	mov	r5, fp
 80150ee:	e9dd 0100 	ldrd	r0, r1, [sp]
 80150f2:	f7eb fd09 	bl	8000b08 <__aeabi_d2iz>
 80150f6:	4606      	mov	r6, r0
 80150f8:	f7eb f9ec 	bl	80004d4 <__aeabi_i2d>
 80150fc:	4602      	mov	r2, r0
 80150fe:	460b      	mov	r3, r1
 8015100:	e9dd 0100 	ldrd	r0, r1, [sp]
 8015104:	f7eb f898 	bl	8000238 <__aeabi_dsub>
 8015108:	3630      	adds	r6, #48	; 0x30
 801510a:	f805 6b01 	strb.w	r6, [r5], #1
 801510e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8015112:	e9cd 0100 	strd	r0, r1, [sp]
 8015116:	f7eb fcb9 	bl	8000a8c <__aeabi_dcmplt>
 801511a:	2800      	cmp	r0, #0
 801511c:	d163      	bne.n	80151e6 <_dtoa_r+0x5de>
 801511e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8015122:	2000      	movs	r0, #0
 8015124:	4937      	ldr	r1, [pc, #220]	; (8015204 <_dtoa_r+0x5fc>)
 8015126:	f7eb f887 	bl	8000238 <__aeabi_dsub>
 801512a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 801512e:	f7eb fcad 	bl	8000a8c <__aeabi_dcmplt>
 8015132:	2800      	cmp	r0, #0
 8015134:	f040 80b7 	bne.w	80152a6 <_dtoa_r+0x69e>
 8015138:	eba5 030b 	sub.w	r3, r5, fp
 801513c:	429f      	cmp	r7, r3
 801513e:	f77f af7c 	ble.w	801503a <_dtoa_r+0x432>
 8015142:	2200      	movs	r2, #0
 8015144:	4b30      	ldr	r3, [pc, #192]	; (8015208 <_dtoa_r+0x600>)
 8015146:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801514a:	f7eb fa2d 	bl	80005a8 <__aeabi_dmul>
 801514e:	2200      	movs	r2, #0
 8015150:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8015154:	4b2c      	ldr	r3, [pc, #176]	; (8015208 <_dtoa_r+0x600>)
 8015156:	e9dd 0100 	ldrd	r0, r1, [sp]
 801515a:	f7eb fa25 	bl	80005a8 <__aeabi_dmul>
 801515e:	e9cd 0100 	strd	r0, r1, [sp]
 8015162:	e7c4      	b.n	80150ee <_dtoa_r+0x4e6>
 8015164:	462a      	mov	r2, r5
 8015166:	4633      	mov	r3, r6
 8015168:	f7eb fa1e 	bl	80005a8 <__aeabi_dmul>
 801516c:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8015170:	eb0b 0507 	add.w	r5, fp, r7
 8015174:	465e      	mov	r6, fp
 8015176:	e9dd 0100 	ldrd	r0, r1, [sp]
 801517a:	f7eb fcc5 	bl	8000b08 <__aeabi_d2iz>
 801517e:	4607      	mov	r7, r0
 8015180:	f7eb f9a8 	bl	80004d4 <__aeabi_i2d>
 8015184:	3730      	adds	r7, #48	; 0x30
 8015186:	4602      	mov	r2, r0
 8015188:	460b      	mov	r3, r1
 801518a:	e9dd 0100 	ldrd	r0, r1, [sp]
 801518e:	f7eb f853 	bl	8000238 <__aeabi_dsub>
 8015192:	f806 7b01 	strb.w	r7, [r6], #1
 8015196:	42ae      	cmp	r6, r5
 8015198:	e9cd 0100 	strd	r0, r1, [sp]
 801519c:	f04f 0200 	mov.w	r2, #0
 80151a0:	d126      	bne.n	80151f0 <_dtoa_r+0x5e8>
 80151a2:	4b1c      	ldr	r3, [pc, #112]	; (8015214 <_dtoa_r+0x60c>)
 80151a4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80151a8:	f7eb f848 	bl	800023c <__adddf3>
 80151ac:	4602      	mov	r2, r0
 80151ae:	460b      	mov	r3, r1
 80151b0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80151b4:	f7eb fc88 	bl	8000ac8 <__aeabi_dcmpgt>
 80151b8:	2800      	cmp	r0, #0
 80151ba:	d174      	bne.n	80152a6 <_dtoa_r+0x69e>
 80151bc:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80151c0:	2000      	movs	r0, #0
 80151c2:	4914      	ldr	r1, [pc, #80]	; (8015214 <_dtoa_r+0x60c>)
 80151c4:	f7eb f838 	bl	8000238 <__aeabi_dsub>
 80151c8:	4602      	mov	r2, r0
 80151ca:	460b      	mov	r3, r1
 80151cc:	e9dd 0100 	ldrd	r0, r1, [sp]
 80151d0:	f7eb fc5c 	bl	8000a8c <__aeabi_dcmplt>
 80151d4:	2800      	cmp	r0, #0
 80151d6:	f43f af30 	beq.w	801503a <_dtoa_r+0x432>
 80151da:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80151de:	2b30      	cmp	r3, #48	; 0x30
 80151e0:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 80151e4:	d002      	beq.n	80151ec <_dtoa_r+0x5e4>
 80151e6:	f8dd a020 	ldr.w	sl, [sp, #32]
 80151ea:	e04a      	b.n	8015282 <_dtoa_r+0x67a>
 80151ec:	4615      	mov	r5, r2
 80151ee:	e7f4      	b.n	80151da <_dtoa_r+0x5d2>
 80151f0:	4b05      	ldr	r3, [pc, #20]	; (8015208 <_dtoa_r+0x600>)
 80151f2:	f7eb f9d9 	bl	80005a8 <__aeabi_dmul>
 80151f6:	e9cd 0100 	strd	r0, r1, [sp]
 80151fa:	e7bc      	b.n	8015176 <_dtoa_r+0x56e>
 80151fc:	08019d48 	.word	0x08019d48
 8015200:	08019d20 	.word	0x08019d20
 8015204:	3ff00000 	.word	0x3ff00000
 8015208:	40240000 	.word	0x40240000
 801520c:	401c0000 	.word	0x401c0000
 8015210:	40140000 	.word	0x40140000
 8015214:	3fe00000 	.word	0x3fe00000
 8015218:	e9dd 6700 	ldrd	r6, r7, [sp]
 801521c:	465d      	mov	r5, fp
 801521e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8015222:	4630      	mov	r0, r6
 8015224:	4639      	mov	r1, r7
 8015226:	f7eb fae9 	bl	80007fc <__aeabi_ddiv>
 801522a:	f7eb fc6d 	bl	8000b08 <__aeabi_d2iz>
 801522e:	4680      	mov	r8, r0
 8015230:	f7eb f950 	bl	80004d4 <__aeabi_i2d>
 8015234:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8015238:	f7eb f9b6 	bl	80005a8 <__aeabi_dmul>
 801523c:	4602      	mov	r2, r0
 801523e:	460b      	mov	r3, r1
 8015240:	4630      	mov	r0, r6
 8015242:	4639      	mov	r1, r7
 8015244:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8015248:	f7ea fff6 	bl	8000238 <__aeabi_dsub>
 801524c:	f805 6b01 	strb.w	r6, [r5], #1
 8015250:	eba5 060b 	sub.w	r6, r5, fp
 8015254:	45b1      	cmp	r9, r6
 8015256:	4602      	mov	r2, r0
 8015258:	460b      	mov	r3, r1
 801525a:	d139      	bne.n	80152d0 <_dtoa_r+0x6c8>
 801525c:	f7ea ffee 	bl	800023c <__adddf3>
 8015260:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8015264:	4606      	mov	r6, r0
 8015266:	460f      	mov	r7, r1
 8015268:	f7eb fc2e 	bl	8000ac8 <__aeabi_dcmpgt>
 801526c:	b9c8      	cbnz	r0, 80152a2 <_dtoa_r+0x69a>
 801526e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8015272:	4630      	mov	r0, r6
 8015274:	4639      	mov	r1, r7
 8015276:	f7eb fbff 	bl	8000a78 <__aeabi_dcmpeq>
 801527a:	b110      	cbz	r0, 8015282 <_dtoa_r+0x67a>
 801527c:	f018 0f01 	tst.w	r8, #1
 8015280:	d10f      	bne.n	80152a2 <_dtoa_r+0x69a>
 8015282:	9904      	ldr	r1, [sp, #16]
 8015284:	4620      	mov	r0, r4
 8015286:	f000 fc9f 	bl	8015bc8 <_Bfree>
 801528a:	2300      	movs	r3, #0
 801528c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801528e:	702b      	strb	r3, [r5, #0]
 8015290:	f10a 0301 	add.w	r3, sl, #1
 8015294:	6013      	str	r3, [r2, #0]
 8015296:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8015298:	2b00      	cmp	r3, #0
 801529a:	f000 8241 	beq.w	8015720 <_dtoa_r+0xb18>
 801529e:	601d      	str	r5, [r3, #0]
 80152a0:	e23e      	b.n	8015720 <_dtoa_r+0xb18>
 80152a2:	f8cd a020 	str.w	sl, [sp, #32]
 80152a6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80152aa:	2a39      	cmp	r2, #57	; 0x39
 80152ac:	f105 33ff 	add.w	r3, r5, #4294967295	; 0xffffffff
 80152b0:	d108      	bne.n	80152c4 <_dtoa_r+0x6bc>
 80152b2:	459b      	cmp	fp, r3
 80152b4:	d10a      	bne.n	80152cc <_dtoa_r+0x6c4>
 80152b6:	9b08      	ldr	r3, [sp, #32]
 80152b8:	3301      	adds	r3, #1
 80152ba:	9308      	str	r3, [sp, #32]
 80152bc:	2330      	movs	r3, #48	; 0x30
 80152be:	f88b 3000 	strb.w	r3, [fp]
 80152c2:	465b      	mov	r3, fp
 80152c4:	781a      	ldrb	r2, [r3, #0]
 80152c6:	3201      	adds	r2, #1
 80152c8:	701a      	strb	r2, [r3, #0]
 80152ca:	e78c      	b.n	80151e6 <_dtoa_r+0x5de>
 80152cc:	461d      	mov	r5, r3
 80152ce:	e7ea      	b.n	80152a6 <_dtoa_r+0x69e>
 80152d0:	2200      	movs	r2, #0
 80152d2:	4b9b      	ldr	r3, [pc, #620]	; (8015540 <_dtoa_r+0x938>)
 80152d4:	f7eb f968 	bl	80005a8 <__aeabi_dmul>
 80152d8:	2200      	movs	r2, #0
 80152da:	2300      	movs	r3, #0
 80152dc:	4606      	mov	r6, r0
 80152de:	460f      	mov	r7, r1
 80152e0:	f7eb fbca 	bl	8000a78 <__aeabi_dcmpeq>
 80152e4:	2800      	cmp	r0, #0
 80152e6:	d09a      	beq.n	801521e <_dtoa_r+0x616>
 80152e8:	e7cb      	b.n	8015282 <_dtoa_r+0x67a>
 80152ea:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80152ec:	2a00      	cmp	r2, #0
 80152ee:	f000 808b 	beq.w	8015408 <_dtoa_r+0x800>
 80152f2:	9a06      	ldr	r2, [sp, #24]
 80152f4:	2a01      	cmp	r2, #1
 80152f6:	dc6e      	bgt.n	80153d6 <_dtoa_r+0x7ce>
 80152f8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80152fa:	2a00      	cmp	r2, #0
 80152fc:	d067      	beq.n	80153ce <_dtoa_r+0x7c6>
 80152fe:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8015302:	9f07      	ldr	r7, [sp, #28]
 8015304:	9d05      	ldr	r5, [sp, #20]
 8015306:	9a05      	ldr	r2, [sp, #20]
 8015308:	2101      	movs	r1, #1
 801530a:	441a      	add	r2, r3
 801530c:	4620      	mov	r0, r4
 801530e:	9205      	str	r2, [sp, #20]
 8015310:	4498      	add	r8, r3
 8015312:	f000 fcf9 	bl	8015d08 <__i2b>
 8015316:	4606      	mov	r6, r0
 8015318:	2d00      	cmp	r5, #0
 801531a:	dd0c      	ble.n	8015336 <_dtoa_r+0x72e>
 801531c:	f1b8 0f00 	cmp.w	r8, #0
 8015320:	dd09      	ble.n	8015336 <_dtoa_r+0x72e>
 8015322:	4545      	cmp	r5, r8
 8015324:	9a05      	ldr	r2, [sp, #20]
 8015326:	462b      	mov	r3, r5
 8015328:	bfa8      	it	ge
 801532a:	4643      	movge	r3, r8
 801532c:	1ad2      	subs	r2, r2, r3
 801532e:	9205      	str	r2, [sp, #20]
 8015330:	1aed      	subs	r5, r5, r3
 8015332:	eba8 0803 	sub.w	r8, r8, r3
 8015336:	9b07      	ldr	r3, [sp, #28]
 8015338:	b1eb      	cbz	r3, 8015376 <_dtoa_r+0x76e>
 801533a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801533c:	2b00      	cmp	r3, #0
 801533e:	d067      	beq.n	8015410 <_dtoa_r+0x808>
 8015340:	b18f      	cbz	r7, 8015366 <_dtoa_r+0x75e>
 8015342:	4631      	mov	r1, r6
 8015344:	463a      	mov	r2, r7
 8015346:	4620      	mov	r0, r4
 8015348:	f000 fd7e 	bl	8015e48 <__pow5mult>
 801534c:	9a04      	ldr	r2, [sp, #16]
 801534e:	4601      	mov	r1, r0
 8015350:	4606      	mov	r6, r0
 8015352:	4620      	mov	r0, r4
 8015354:	f000 fce1 	bl	8015d1a <__multiply>
 8015358:	9904      	ldr	r1, [sp, #16]
 801535a:	9008      	str	r0, [sp, #32]
 801535c:	4620      	mov	r0, r4
 801535e:	f000 fc33 	bl	8015bc8 <_Bfree>
 8015362:	9b08      	ldr	r3, [sp, #32]
 8015364:	9304      	str	r3, [sp, #16]
 8015366:	9b07      	ldr	r3, [sp, #28]
 8015368:	1bda      	subs	r2, r3, r7
 801536a:	d004      	beq.n	8015376 <_dtoa_r+0x76e>
 801536c:	9904      	ldr	r1, [sp, #16]
 801536e:	4620      	mov	r0, r4
 8015370:	f000 fd6a 	bl	8015e48 <__pow5mult>
 8015374:	9004      	str	r0, [sp, #16]
 8015376:	2101      	movs	r1, #1
 8015378:	4620      	mov	r0, r4
 801537a:	f000 fcc5 	bl	8015d08 <__i2b>
 801537e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015380:	4607      	mov	r7, r0
 8015382:	2b00      	cmp	r3, #0
 8015384:	f000 81d0 	beq.w	8015728 <_dtoa_r+0xb20>
 8015388:	461a      	mov	r2, r3
 801538a:	4601      	mov	r1, r0
 801538c:	4620      	mov	r0, r4
 801538e:	f000 fd5b 	bl	8015e48 <__pow5mult>
 8015392:	9b06      	ldr	r3, [sp, #24]
 8015394:	2b01      	cmp	r3, #1
 8015396:	4607      	mov	r7, r0
 8015398:	dc40      	bgt.n	801541c <_dtoa_r+0x814>
 801539a:	9b00      	ldr	r3, [sp, #0]
 801539c:	2b00      	cmp	r3, #0
 801539e:	d139      	bne.n	8015414 <_dtoa_r+0x80c>
 80153a0:	9b01      	ldr	r3, [sp, #4]
 80153a2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80153a6:	2b00      	cmp	r3, #0
 80153a8:	d136      	bne.n	8015418 <_dtoa_r+0x810>
 80153aa:	9b01      	ldr	r3, [sp, #4]
 80153ac:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80153b0:	0d1b      	lsrs	r3, r3, #20
 80153b2:	051b      	lsls	r3, r3, #20
 80153b4:	b12b      	cbz	r3, 80153c2 <_dtoa_r+0x7ba>
 80153b6:	9b05      	ldr	r3, [sp, #20]
 80153b8:	3301      	adds	r3, #1
 80153ba:	9305      	str	r3, [sp, #20]
 80153bc:	f108 0801 	add.w	r8, r8, #1
 80153c0:	2301      	movs	r3, #1
 80153c2:	9307      	str	r3, [sp, #28]
 80153c4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80153c6:	2b00      	cmp	r3, #0
 80153c8:	d12a      	bne.n	8015420 <_dtoa_r+0x818>
 80153ca:	2001      	movs	r0, #1
 80153cc:	e030      	b.n	8015430 <_dtoa_r+0x828>
 80153ce:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80153d0:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80153d4:	e795      	b.n	8015302 <_dtoa_r+0x6fa>
 80153d6:	9b07      	ldr	r3, [sp, #28]
 80153d8:	f109 37ff 	add.w	r7, r9, #4294967295	; 0xffffffff
 80153dc:	42bb      	cmp	r3, r7
 80153de:	bfbf      	itttt	lt
 80153e0:	9b07      	ldrlt	r3, [sp, #28]
 80153e2:	9707      	strlt	r7, [sp, #28]
 80153e4:	1afa      	sublt	r2, r7, r3
 80153e6:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 80153e8:	bfbb      	ittet	lt
 80153ea:	189b      	addlt	r3, r3, r2
 80153ec:	930e      	strlt	r3, [sp, #56]	; 0x38
 80153ee:	1bdf      	subge	r7, r3, r7
 80153f0:	2700      	movlt	r7, #0
 80153f2:	f1b9 0f00 	cmp.w	r9, #0
 80153f6:	bfb5      	itete	lt
 80153f8:	9b05      	ldrlt	r3, [sp, #20]
 80153fa:	9d05      	ldrge	r5, [sp, #20]
 80153fc:	eba3 0509 	sublt.w	r5, r3, r9
 8015400:	464b      	movge	r3, r9
 8015402:	bfb8      	it	lt
 8015404:	2300      	movlt	r3, #0
 8015406:	e77e      	b.n	8015306 <_dtoa_r+0x6fe>
 8015408:	9f07      	ldr	r7, [sp, #28]
 801540a:	9d05      	ldr	r5, [sp, #20]
 801540c:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 801540e:	e783      	b.n	8015318 <_dtoa_r+0x710>
 8015410:	9a07      	ldr	r2, [sp, #28]
 8015412:	e7ab      	b.n	801536c <_dtoa_r+0x764>
 8015414:	2300      	movs	r3, #0
 8015416:	e7d4      	b.n	80153c2 <_dtoa_r+0x7ba>
 8015418:	9b00      	ldr	r3, [sp, #0]
 801541a:	e7d2      	b.n	80153c2 <_dtoa_r+0x7ba>
 801541c:	2300      	movs	r3, #0
 801541e:	9307      	str	r3, [sp, #28]
 8015420:	693b      	ldr	r3, [r7, #16]
 8015422:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8015426:	6918      	ldr	r0, [r3, #16]
 8015428:	f000 fc20 	bl	8015c6c <__hi0bits>
 801542c:	f1c0 0020 	rsb	r0, r0, #32
 8015430:	4440      	add	r0, r8
 8015432:	f010 001f 	ands.w	r0, r0, #31
 8015436:	d047      	beq.n	80154c8 <_dtoa_r+0x8c0>
 8015438:	f1c0 0320 	rsb	r3, r0, #32
 801543c:	2b04      	cmp	r3, #4
 801543e:	dd3b      	ble.n	80154b8 <_dtoa_r+0x8b0>
 8015440:	9b05      	ldr	r3, [sp, #20]
 8015442:	f1c0 001c 	rsb	r0, r0, #28
 8015446:	4403      	add	r3, r0
 8015448:	9305      	str	r3, [sp, #20]
 801544a:	4405      	add	r5, r0
 801544c:	4480      	add	r8, r0
 801544e:	9b05      	ldr	r3, [sp, #20]
 8015450:	2b00      	cmp	r3, #0
 8015452:	dd05      	ble.n	8015460 <_dtoa_r+0x858>
 8015454:	461a      	mov	r2, r3
 8015456:	9904      	ldr	r1, [sp, #16]
 8015458:	4620      	mov	r0, r4
 801545a:	f000 fd43 	bl	8015ee4 <__lshift>
 801545e:	9004      	str	r0, [sp, #16]
 8015460:	f1b8 0f00 	cmp.w	r8, #0
 8015464:	dd05      	ble.n	8015472 <_dtoa_r+0x86a>
 8015466:	4639      	mov	r1, r7
 8015468:	4642      	mov	r2, r8
 801546a:	4620      	mov	r0, r4
 801546c:	f000 fd3a 	bl	8015ee4 <__lshift>
 8015470:	4607      	mov	r7, r0
 8015472:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8015474:	b353      	cbz	r3, 80154cc <_dtoa_r+0x8c4>
 8015476:	4639      	mov	r1, r7
 8015478:	9804      	ldr	r0, [sp, #16]
 801547a:	f000 fd87 	bl	8015f8c <__mcmp>
 801547e:	2800      	cmp	r0, #0
 8015480:	da24      	bge.n	80154cc <_dtoa_r+0x8c4>
 8015482:	2300      	movs	r3, #0
 8015484:	220a      	movs	r2, #10
 8015486:	9904      	ldr	r1, [sp, #16]
 8015488:	4620      	mov	r0, r4
 801548a:	f000 fbb4 	bl	8015bf6 <__multadd>
 801548e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015490:	9004      	str	r0, [sp, #16]
 8015492:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8015496:	2b00      	cmp	r3, #0
 8015498:	f000 814d 	beq.w	8015736 <_dtoa_r+0xb2e>
 801549c:	2300      	movs	r3, #0
 801549e:	4631      	mov	r1, r6
 80154a0:	220a      	movs	r2, #10
 80154a2:	4620      	mov	r0, r4
 80154a4:	f000 fba7 	bl	8015bf6 <__multadd>
 80154a8:	9b02      	ldr	r3, [sp, #8]
 80154aa:	2b00      	cmp	r3, #0
 80154ac:	4606      	mov	r6, r0
 80154ae:	dc4f      	bgt.n	8015550 <_dtoa_r+0x948>
 80154b0:	9b06      	ldr	r3, [sp, #24]
 80154b2:	2b02      	cmp	r3, #2
 80154b4:	dd4c      	ble.n	8015550 <_dtoa_r+0x948>
 80154b6:	e011      	b.n	80154dc <_dtoa_r+0x8d4>
 80154b8:	d0c9      	beq.n	801544e <_dtoa_r+0x846>
 80154ba:	9a05      	ldr	r2, [sp, #20]
 80154bc:	331c      	adds	r3, #28
 80154be:	441a      	add	r2, r3
 80154c0:	9205      	str	r2, [sp, #20]
 80154c2:	441d      	add	r5, r3
 80154c4:	4498      	add	r8, r3
 80154c6:	e7c2      	b.n	801544e <_dtoa_r+0x846>
 80154c8:	4603      	mov	r3, r0
 80154ca:	e7f6      	b.n	80154ba <_dtoa_r+0x8b2>
 80154cc:	f1b9 0f00 	cmp.w	r9, #0
 80154d0:	dc38      	bgt.n	8015544 <_dtoa_r+0x93c>
 80154d2:	9b06      	ldr	r3, [sp, #24]
 80154d4:	2b02      	cmp	r3, #2
 80154d6:	dd35      	ble.n	8015544 <_dtoa_r+0x93c>
 80154d8:	f8cd 9008 	str.w	r9, [sp, #8]
 80154dc:	9b02      	ldr	r3, [sp, #8]
 80154de:	b963      	cbnz	r3, 80154fa <_dtoa_r+0x8f2>
 80154e0:	4639      	mov	r1, r7
 80154e2:	2205      	movs	r2, #5
 80154e4:	4620      	mov	r0, r4
 80154e6:	f000 fb86 	bl	8015bf6 <__multadd>
 80154ea:	4601      	mov	r1, r0
 80154ec:	4607      	mov	r7, r0
 80154ee:	9804      	ldr	r0, [sp, #16]
 80154f0:	f000 fd4c 	bl	8015f8c <__mcmp>
 80154f4:	2800      	cmp	r0, #0
 80154f6:	f73f adcc 	bgt.w	8015092 <_dtoa_r+0x48a>
 80154fa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80154fc:	465d      	mov	r5, fp
 80154fe:	ea6f 0a03 	mvn.w	sl, r3
 8015502:	f04f 0900 	mov.w	r9, #0
 8015506:	4639      	mov	r1, r7
 8015508:	4620      	mov	r0, r4
 801550a:	f000 fb5d 	bl	8015bc8 <_Bfree>
 801550e:	2e00      	cmp	r6, #0
 8015510:	f43f aeb7 	beq.w	8015282 <_dtoa_r+0x67a>
 8015514:	f1b9 0f00 	cmp.w	r9, #0
 8015518:	d005      	beq.n	8015526 <_dtoa_r+0x91e>
 801551a:	45b1      	cmp	r9, r6
 801551c:	d003      	beq.n	8015526 <_dtoa_r+0x91e>
 801551e:	4649      	mov	r1, r9
 8015520:	4620      	mov	r0, r4
 8015522:	f000 fb51 	bl	8015bc8 <_Bfree>
 8015526:	4631      	mov	r1, r6
 8015528:	4620      	mov	r0, r4
 801552a:	f000 fb4d 	bl	8015bc8 <_Bfree>
 801552e:	e6a8      	b.n	8015282 <_dtoa_r+0x67a>
 8015530:	2700      	movs	r7, #0
 8015532:	463e      	mov	r6, r7
 8015534:	e7e1      	b.n	80154fa <_dtoa_r+0x8f2>
 8015536:	f8dd a020 	ldr.w	sl, [sp, #32]
 801553a:	463e      	mov	r6, r7
 801553c:	e5a9      	b.n	8015092 <_dtoa_r+0x48a>
 801553e:	bf00      	nop
 8015540:	40240000 	.word	0x40240000
 8015544:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015546:	f8cd 9008 	str.w	r9, [sp, #8]
 801554a:	2b00      	cmp	r3, #0
 801554c:	f000 80fa 	beq.w	8015744 <_dtoa_r+0xb3c>
 8015550:	2d00      	cmp	r5, #0
 8015552:	dd05      	ble.n	8015560 <_dtoa_r+0x958>
 8015554:	4631      	mov	r1, r6
 8015556:	462a      	mov	r2, r5
 8015558:	4620      	mov	r0, r4
 801555a:	f000 fcc3 	bl	8015ee4 <__lshift>
 801555e:	4606      	mov	r6, r0
 8015560:	9b07      	ldr	r3, [sp, #28]
 8015562:	2b00      	cmp	r3, #0
 8015564:	d04c      	beq.n	8015600 <_dtoa_r+0x9f8>
 8015566:	6871      	ldr	r1, [r6, #4]
 8015568:	4620      	mov	r0, r4
 801556a:	f000 faf9 	bl	8015b60 <_Balloc>
 801556e:	6932      	ldr	r2, [r6, #16]
 8015570:	3202      	adds	r2, #2
 8015572:	4605      	mov	r5, r0
 8015574:	0092      	lsls	r2, r2, #2
 8015576:	f106 010c 	add.w	r1, r6, #12
 801557a:	300c      	adds	r0, #12
 801557c:	f7fe fc7e 	bl	8013e7c <memcpy>
 8015580:	2201      	movs	r2, #1
 8015582:	4629      	mov	r1, r5
 8015584:	4620      	mov	r0, r4
 8015586:	f000 fcad 	bl	8015ee4 <__lshift>
 801558a:	9b00      	ldr	r3, [sp, #0]
 801558c:	f8cd b014 	str.w	fp, [sp, #20]
 8015590:	f003 0301 	and.w	r3, r3, #1
 8015594:	46b1      	mov	r9, r6
 8015596:	9307      	str	r3, [sp, #28]
 8015598:	4606      	mov	r6, r0
 801559a:	4639      	mov	r1, r7
 801559c:	9804      	ldr	r0, [sp, #16]
 801559e:	f7ff faa7 	bl	8014af0 <quorem>
 80155a2:	4649      	mov	r1, r9
 80155a4:	4605      	mov	r5, r0
 80155a6:	f100 0830 	add.w	r8, r0, #48	; 0x30
 80155aa:	9804      	ldr	r0, [sp, #16]
 80155ac:	f000 fcee 	bl	8015f8c <__mcmp>
 80155b0:	4632      	mov	r2, r6
 80155b2:	9000      	str	r0, [sp, #0]
 80155b4:	4639      	mov	r1, r7
 80155b6:	4620      	mov	r0, r4
 80155b8:	f000 fd02 	bl	8015fc0 <__mdiff>
 80155bc:	68c3      	ldr	r3, [r0, #12]
 80155be:	4602      	mov	r2, r0
 80155c0:	bb03      	cbnz	r3, 8015604 <_dtoa_r+0x9fc>
 80155c2:	4601      	mov	r1, r0
 80155c4:	9008      	str	r0, [sp, #32]
 80155c6:	9804      	ldr	r0, [sp, #16]
 80155c8:	f000 fce0 	bl	8015f8c <__mcmp>
 80155cc:	9a08      	ldr	r2, [sp, #32]
 80155ce:	4603      	mov	r3, r0
 80155d0:	4611      	mov	r1, r2
 80155d2:	4620      	mov	r0, r4
 80155d4:	9308      	str	r3, [sp, #32]
 80155d6:	f000 faf7 	bl	8015bc8 <_Bfree>
 80155da:	9b08      	ldr	r3, [sp, #32]
 80155dc:	b9a3      	cbnz	r3, 8015608 <_dtoa_r+0xa00>
 80155de:	9a06      	ldr	r2, [sp, #24]
 80155e0:	b992      	cbnz	r2, 8015608 <_dtoa_r+0xa00>
 80155e2:	9a07      	ldr	r2, [sp, #28]
 80155e4:	b982      	cbnz	r2, 8015608 <_dtoa_r+0xa00>
 80155e6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80155ea:	d029      	beq.n	8015640 <_dtoa_r+0xa38>
 80155ec:	9b00      	ldr	r3, [sp, #0]
 80155ee:	2b00      	cmp	r3, #0
 80155f0:	dd01      	ble.n	80155f6 <_dtoa_r+0x9ee>
 80155f2:	f105 0831 	add.w	r8, r5, #49	; 0x31
 80155f6:	9b05      	ldr	r3, [sp, #20]
 80155f8:	1c5d      	adds	r5, r3, #1
 80155fa:	f883 8000 	strb.w	r8, [r3]
 80155fe:	e782      	b.n	8015506 <_dtoa_r+0x8fe>
 8015600:	4630      	mov	r0, r6
 8015602:	e7c2      	b.n	801558a <_dtoa_r+0x982>
 8015604:	2301      	movs	r3, #1
 8015606:	e7e3      	b.n	80155d0 <_dtoa_r+0x9c8>
 8015608:	9a00      	ldr	r2, [sp, #0]
 801560a:	2a00      	cmp	r2, #0
 801560c:	db04      	blt.n	8015618 <_dtoa_r+0xa10>
 801560e:	d125      	bne.n	801565c <_dtoa_r+0xa54>
 8015610:	9a06      	ldr	r2, [sp, #24]
 8015612:	bb1a      	cbnz	r2, 801565c <_dtoa_r+0xa54>
 8015614:	9a07      	ldr	r2, [sp, #28]
 8015616:	bb0a      	cbnz	r2, 801565c <_dtoa_r+0xa54>
 8015618:	2b00      	cmp	r3, #0
 801561a:	ddec      	ble.n	80155f6 <_dtoa_r+0x9ee>
 801561c:	2201      	movs	r2, #1
 801561e:	9904      	ldr	r1, [sp, #16]
 8015620:	4620      	mov	r0, r4
 8015622:	f000 fc5f 	bl	8015ee4 <__lshift>
 8015626:	4639      	mov	r1, r7
 8015628:	9004      	str	r0, [sp, #16]
 801562a:	f000 fcaf 	bl	8015f8c <__mcmp>
 801562e:	2800      	cmp	r0, #0
 8015630:	dc03      	bgt.n	801563a <_dtoa_r+0xa32>
 8015632:	d1e0      	bne.n	80155f6 <_dtoa_r+0x9ee>
 8015634:	f018 0f01 	tst.w	r8, #1
 8015638:	d0dd      	beq.n	80155f6 <_dtoa_r+0x9ee>
 801563a:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 801563e:	d1d8      	bne.n	80155f2 <_dtoa_r+0x9ea>
 8015640:	9b05      	ldr	r3, [sp, #20]
 8015642:	9a05      	ldr	r2, [sp, #20]
 8015644:	1c5d      	adds	r5, r3, #1
 8015646:	2339      	movs	r3, #57	; 0x39
 8015648:	7013      	strb	r3, [r2, #0]
 801564a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 801564e:	2b39      	cmp	r3, #57	; 0x39
 8015650:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 8015654:	d04f      	beq.n	80156f6 <_dtoa_r+0xaee>
 8015656:	3301      	adds	r3, #1
 8015658:	7013      	strb	r3, [r2, #0]
 801565a:	e754      	b.n	8015506 <_dtoa_r+0x8fe>
 801565c:	9a05      	ldr	r2, [sp, #20]
 801565e:	2b00      	cmp	r3, #0
 8015660:	f102 0501 	add.w	r5, r2, #1
 8015664:	dd06      	ble.n	8015674 <_dtoa_r+0xa6c>
 8015666:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 801566a:	d0e9      	beq.n	8015640 <_dtoa_r+0xa38>
 801566c:	f108 0801 	add.w	r8, r8, #1
 8015670:	9b05      	ldr	r3, [sp, #20]
 8015672:	e7c2      	b.n	80155fa <_dtoa_r+0x9f2>
 8015674:	9a02      	ldr	r2, [sp, #8]
 8015676:	f805 8c01 	strb.w	r8, [r5, #-1]
 801567a:	eba5 030b 	sub.w	r3, r5, fp
 801567e:	4293      	cmp	r3, r2
 8015680:	d021      	beq.n	80156c6 <_dtoa_r+0xabe>
 8015682:	2300      	movs	r3, #0
 8015684:	220a      	movs	r2, #10
 8015686:	9904      	ldr	r1, [sp, #16]
 8015688:	4620      	mov	r0, r4
 801568a:	f000 fab4 	bl	8015bf6 <__multadd>
 801568e:	45b1      	cmp	r9, r6
 8015690:	9004      	str	r0, [sp, #16]
 8015692:	f04f 0300 	mov.w	r3, #0
 8015696:	f04f 020a 	mov.w	r2, #10
 801569a:	4649      	mov	r1, r9
 801569c:	4620      	mov	r0, r4
 801569e:	d105      	bne.n	80156ac <_dtoa_r+0xaa4>
 80156a0:	f000 faa9 	bl	8015bf6 <__multadd>
 80156a4:	4681      	mov	r9, r0
 80156a6:	4606      	mov	r6, r0
 80156a8:	9505      	str	r5, [sp, #20]
 80156aa:	e776      	b.n	801559a <_dtoa_r+0x992>
 80156ac:	f000 faa3 	bl	8015bf6 <__multadd>
 80156b0:	4631      	mov	r1, r6
 80156b2:	4681      	mov	r9, r0
 80156b4:	2300      	movs	r3, #0
 80156b6:	220a      	movs	r2, #10
 80156b8:	4620      	mov	r0, r4
 80156ba:	f000 fa9c 	bl	8015bf6 <__multadd>
 80156be:	4606      	mov	r6, r0
 80156c0:	e7f2      	b.n	80156a8 <_dtoa_r+0xaa0>
 80156c2:	f04f 0900 	mov.w	r9, #0
 80156c6:	2201      	movs	r2, #1
 80156c8:	9904      	ldr	r1, [sp, #16]
 80156ca:	4620      	mov	r0, r4
 80156cc:	f000 fc0a 	bl	8015ee4 <__lshift>
 80156d0:	4639      	mov	r1, r7
 80156d2:	9004      	str	r0, [sp, #16]
 80156d4:	f000 fc5a 	bl	8015f8c <__mcmp>
 80156d8:	2800      	cmp	r0, #0
 80156da:	dcb6      	bgt.n	801564a <_dtoa_r+0xa42>
 80156dc:	d102      	bne.n	80156e4 <_dtoa_r+0xadc>
 80156de:	f018 0f01 	tst.w	r8, #1
 80156e2:	d1b2      	bne.n	801564a <_dtoa_r+0xa42>
 80156e4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80156e8:	2b30      	cmp	r3, #48	; 0x30
 80156ea:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 80156ee:	f47f af0a 	bne.w	8015506 <_dtoa_r+0x8fe>
 80156f2:	4615      	mov	r5, r2
 80156f4:	e7f6      	b.n	80156e4 <_dtoa_r+0xadc>
 80156f6:	4593      	cmp	fp, r2
 80156f8:	d105      	bne.n	8015706 <_dtoa_r+0xafe>
 80156fa:	2331      	movs	r3, #49	; 0x31
 80156fc:	f10a 0a01 	add.w	sl, sl, #1
 8015700:	f88b 3000 	strb.w	r3, [fp]
 8015704:	e6ff      	b.n	8015506 <_dtoa_r+0x8fe>
 8015706:	4615      	mov	r5, r2
 8015708:	e79f      	b.n	801564a <_dtoa_r+0xa42>
 801570a:	f8df b064 	ldr.w	fp, [pc, #100]	; 8015770 <_dtoa_r+0xb68>
 801570e:	e007      	b.n	8015720 <_dtoa_r+0xb18>
 8015710:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8015712:	f8df b060 	ldr.w	fp, [pc, #96]	; 8015774 <_dtoa_r+0xb6c>
 8015716:	b11b      	cbz	r3, 8015720 <_dtoa_r+0xb18>
 8015718:	f10b 0308 	add.w	r3, fp, #8
 801571c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801571e:	6013      	str	r3, [r2, #0]
 8015720:	4658      	mov	r0, fp
 8015722:	b017      	add	sp, #92	; 0x5c
 8015724:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015728:	9b06      	ldr	r3, [sp, #24]
 801572a:	2b01      	cmp	r3, #1
 801572c:	f77f ae35 	ble.w	801539a <_dtoa_r+0x792>
 8015730:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015732:	9307      	str	r3, [sp, #28]
 8015734:	e649      	b.n	80153ca <_dtoa_r+0x7c2>
 8015736:	9b02      	ldr	r3, [sp, #8]
 8015738:	2b00      	cmp	r3, #0
 801573a:	dc03      	bgt.n	8015744 <_dtoa_r+0xb3c>
 801573c:	9b06      	ldr	r3, [sp, #24]
 801573e:	2b02      	cmp	r3, #2
 8015740:	f73f aecc 	bgt.w	80154dc <_dtoa_r+0x8d4>
 8015744:	465d      	mov	r5, fp
 8015746:	4639      	mov	r1, r7
 8015748:	9804      	ldr	r0, [sp, #16]
 801574a:	f7ff f9d1 	bl	8014af0 <quorem>
 801574e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8015752:	f805 8b01 	strb.w	r8, [r5], #1
 8015756:	9a02      	ldr	r2, [sp, #8]
 8015758:	eba5 030b 	sub.w	r3, r5, fp
 801575c:	429a      	cmp	r2, r3
 801575e:	ddb0      	ble.n	80156c2 <_dtoa_r+0xaba>
 8015760:	2300      	movs	r3, #0
 8015762:	220a      	movs	r2, #10
 8015764:	9904      	ldr	r1, [sp, #16]
 8015766:	4620      	mov	r0, r4
 8015768:	f000 fa45 	bl	8015bf6 <__multadd>
 801576c:	9004      	str	r0, [sp, #16]
 801576e:	e7ea      	b.n	8015746 <_dtoa_r+0xb3e>
 8015770:	08019c88 	.word	0x08019c88
 8015774:	08019cac 	.word	0x08019cac

08015778 <__sflush_r>:
 8015778:	898a      	ldrh	r2, [r1, #12]
 801577a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801577e:	4605      	mov	r5, r0
 8015780:	0710      	lsls	r0, r2, #28
 8015782:	460c      	mov	r4, r1
 8015784:	d458      	bmi.n	8015838 <__sflush_r+0xc0>
 8015786:	684b      	ldr	r3, [r1, #4]
 8015788:	2b00      	cmp	r3, #0
 801578a:	dc05      	bgt.n	8015798 <__sflush_r+0x20>
 801578c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801578e:	2b00      	cmp	r3, #0
 8015790:	dc02      	bgt.n	8015798 <__sflush_r+0x20>
 8015792:	2000      	movs	r0, #0
 8015794:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015798:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801579a:	2e00      	cmp	r6, #0
 801579c:	d0f9      	beq.n	8015792 <__sflush_r+0x1a>
 801579e:	2300      	movs	r3, #0
 80157a0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80157a4:	682f      	ldr	r7, [r5, #0]
 80157a6:	6a21      	ldr	r1, [r4, #32]
 80157a8:	602b      	str	r3, [r5, #0]
 80157aa:	d032      	beq.n	8015812 <__sflush_r+0x9a>
 80157ac:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80157ae:	89a3      	ldrh	r3, [r4, #12]
 80157b0:	075a      	lsls	r2, r3, #29
 80157b2:	d505      	bpl.n	80157c0 <__sflush_r+0x48>
 80157b4:	6863      	ldr	r3, [r4, #4]
 80157b6:	1ac0      	subs	r0, r0, r3
 80157b8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80157ba:	b10b      	cbz	r3, 80157c0 <__sflush_r+0x48>
 80157bc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80157be:	1ac0      	subs	r0, r0, r3
 80157c0:	2300      	movs	r3, #0
 80157c2:	4602      	mov	r2, r0
 80157c4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80157c6:	6a21      	ldr	r1, [r4, #32]
 80157c8:	4628      	mov	r0, r5
 80157ca:	47b0      	blx	r6
 80157cc:	1c43      	adds	r3, r0, #1
 80157ce:	89a3      	ldrh	r3, [r4, #12]
 80157d0:	d106      	bne.n	80157e0 <__sflush_r+0x68>
 80157d2:	6829      	ldr	r1, [r5, #0]
 80157d4:	291d      	cmp	r1, #29
 80157d6:	d848      	bhi.n	801586a <__sflush_r+0xf2>
 80157d8:	4a29      	ldr	r2, [pc, #164]	; (8015880 <__sflush_r+0x108>)
 80157da:	40ca      	lsrs	r2, r1
 80157dc:	07d6      	lsls	r6, r2, #31
 80157de:	d544      	bpl.n	801586a <__sflush_r+0xf2>
 80157e0:	2200      	movs	r2, #0
 80157e2:	6062      	str	r2, [r4, #4]
 80157e4:	04d9      	lsls	r1, r3, #19
 80157e6:	6922      	ldr	r2, [r4, #16]
 80157e8:	6022      	str	r2, [r4, #0]
 80157ea:	d504      	bpl.n	80157f6 <__sflush_r+0x7e>
 80157ec:	1c42      	adds	r2, r0, #1
 80157ee:	d101      	bne.n	80157f4 <__sflush_r+0x7c>
 80157f0:	682b      	ldr	r3, [r5, #0]
 80157f2:	b903      	cbnz	r3, 80157f6 <__sflush_r+0x7e>
 80157f4:	6560      	str	r0, [r4, #84]	; 0x54
 80157f6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80157f8:	602f      	str	r7, [r5, #0]
 80157fa:	2900      	cmp	r1, #0
 80157fc:	d0c9      	beq.n	8015792 <__sflush_r+0x1a>
 80157fe:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8015802:	4299      	cmp	r1, r3
 8015804:	d002      	beq.n	801580c <__sflush_r+0x94>
 8015806:	4628      	mov	r0, r5
 8015808:	f000 fc94 	bl	8016134 <_free_r>
 801580c:	2000      	movs	r0, #0
 801580e:	6360      	str	r0, [r4, #52]	; 0x34
 8015810:	e7c0      	b.n	8015794 <__sflush_r+0x1c>
 8015812:	2301      	movs	r3, #1
 8015814:	4628      	mov	r0, r5
 8015816:	47b0      	blx	r6
 8015818:	1c41      	adds	r1, r0, #1
 801581a:	d1c8      	bne.n	80157ae <__sflush_r+0x36>
 801581c:	682b      	ldr	r3, [r5, #0]
 801581e:	2b00      	cmp	r3, #0
 8015820:	d0c5      	beq.n	80157ae <__sflush_r+0x36>
 8015822:	2b1d      	cmp	r3, #29
 8015824:	d001      	beq.n	801582a <__sflush_r+0xb2>
 8015826:	2b16      	cmp	r3, #22
 8015828:	d101      	bne.n	801582e <__sflush_r+0xb6>
 801582a:	602f      	str	r7, [r5, #0]
 801582c:	e7b1      	b.n	8015792 <__sflush_r+0x1a>
 801582e:	89a3      	ldrh	r3, [r4, #12]
 8015830:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015834:	81a3      	strh	r3, [r4, #12]
 8015836:	e7ad      	b.n	8015794 <__sflush_r+0x1c>
 8015838:	690f      	ldr	r7, [r1, #16]
 801583a:	2f00      	cmp	r7, #0
 801583c:	d0a9      	beq.n	8015792 <__sflush_r+0x1a>
 801583e:	0793      	lsls	r3, r2, #30
 8015840:	680e      	ldr	r6, [r1, #0]
 8015842:	bf08      	it	eq
 8015844:	694b      	ldreq	r3, [r1, #20]
 8015846:	600f      	str	r7, [r1, #0]
 8015848:	bf18      	it	ne
 801584a:	2300      	movne	r3, #0
 801584c:	eba6 0807 	sub.w	r8, r6, r7
 8015850:	608b      	str	r3, [r1, #8]
 8015852:	f1b8 0f00 	cmp.w	r8, #0
 8015856:	dd9c      	ble.n	8015792 <__sflush_r+0x1a>
 8015858:	4643      	mov	r3, r8
 801585a:	463a      	mov	r2, r7
 801585c:	6a21      	ldr	r1, [r4, #32]
 801585e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8015860:	4628      	mov	r0, r5
 8015862:	47b0      	blx	r6
 8015864:	2800      	cmp	r0, #0
 8015866:	dc06      	bgt.n	8015876 <__sflush_r+0xfe>
 8015868:	89a3      	ldrh	r3, [r4, #12]
 801586a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801586e:	81a3      	strh	r3, [r4, #12]
 8015870:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8015874:	e78e      	b.n	8015794 <__sflush_r+0x1c>
 8015876:	4407      	add	r7, r0
 8015878:	eba8 0800 	sub.w	r8, r8, r0
 801587c:	e7e9      	b.n	8015852 <__sflush_r+0xda>
 801587e:	bf00      	nop
 8015880:	20400001 	.word	0x20400001

08015884 <_fflush_r>:
 8015884:	b538      	push	{r3, r4, r5, lr}
 8015886:	690b      	ldr	r3, [r1, #16]
 8015888:	4605      	mov	r5, r0
 801588a:	460c      	mov	r4, r1
 801588c:	b1db      	cbz	r3, 80158c6 <_fflush_r+0x42>
 801588e:	b118      	cbz	r0, 8015898 <_fflush_r+0x14>
 8015890:	6983      	ldr	r3, [r0, #24]
 8015892:	b90b      	cbnz	r3, 8015898 <_fflush_r+0x14>
 8015894:	f000 f860 	bl	8015958 <__sinit>
 8015898:	4b0c      	ldr	r3, [pc, #48]	; (80158cc <_fflush_r+0x48>)
 801589a:	429c      	cmp	r4, r3
 801589c:	d109      	bne.n	80158b2 <_fflush_r+0x2e>
 801589e:	686c      	ldr	r4, [r5, #4]
 80158a0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80158a4:	b17b      	cbz	r3, 80158c6 <_fflush_r+0x42>
 80158a6:	4621      	mov	r1, r4
 80158a8:	4628      	mov	r0, r5
 80158aa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80158ae:	f7ff bf63 	b.w	8015778 <__sflush_r>
 80158b2:	4b07      	ldr	r3, [pc, #28]	; (80158d0 <_fflush_r+0x4c>)
 80158b4:	429c      	cmp	r4, r3
 80158b6:	d101      	bne.n	80158bc <_fflush_r+0x38>
 80158b8:	68ac      	ldr	r4, [r5, #8]
 80158ba:	e7f1      	b.n	80158a0 <_fflush_r+0x1c>
 80158bc:	4b05      	ldr	r3, [pc, #20]	; (80158d4 <_fflush_r+0x50>)
 80158be:	429c      	cmp	r4, r3
 80158c0:	bf08      	it	eq
 80158c2:	68ec      	ldreq	r4, [r5, #12]
 80158c4:	e7ec      	b.n	80158a0 <_fflush_r+0x1c>
 80158c6:	2000      	movs	r0, #0
 80158c8:	bd38      	pop	{r3, r4, r5, pc}
 80158ca:	bf00      	nop
 80158cc:	08019cdc 	.word	0x08019cdc
 80158d0:	08019cfc 	.word	0x08019cfc
 80158d4:	08019cbc 	.word	0x08019cbc

080158d8 <std>:
 80158d8:	2300      	movs	r3, #0
 80158da:	b510      	push	{r4, lr}
 80158dc:	4604      	mov	r4, r0
 80158de:	e9c0 3300 	strd	r3, r3, [r0]
 80158e2:	6083      	str	r3, [r0, #8]
 80158e4:	8181      	strh	r1, [r0, #12]
 80158e6:	6643      	str	r3, [r0, #100]	; 0x64
 80158e8:	81c2      	strh	r2, [r0, #14]
 80158ea:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80158ee:	6183      	str	r3, [r0, #24]
 80158f0:	4619      	mov	r1, r3
 80158f2:	2208      	movs	r2, #8
 80158f4:	305c      	adds	r0, #92	; 0x5c
 80158f6:	f7fe facc 	bl	8013e92 <memset>
 80158fa:	4b05      	ldr	r3, [pc, #20]	; (8015910 <std+0x38>)
 80158fc:	6263      	str	r3, [r4, #36]	; 0x24
 80158fe:	4b05      	ldr	r3, [pc, #20]	; (8015914 <std+0x3c>)
 8015900:	62a3      	str	r3, [r4, #40]	; 0x28
 8015902:	4b05      	ldr	r3, [pc, #20]	; (8015918 <std+0x40>)
 8015904:	62e3      	str	r3, [r4, #44]	; 0x2c
 8015906:	4b05      	ldr	r3, [pc, #20]	; (801591c <std+0x44>)
 8015908:	6224      	str	r4, [r4, #32]
 801590a:	6323      	str	r3, [r4, #48]	; 0x30
 801590c:	bd10      	pop	{r4, pc}
 801590e:	bf00      	nop
 8015910:	080167c9 	.word	0x080167c9
 8015914:	080167eb 	.word	0x080167eb
 8015918:	08016823 	.word	0x08016823
 801591c:	08016847 	.word	0x08016847

08015920 <_cleanup_r>:
 8015920:	4901      	ldr	r1, [pc, #4]	; (8015928 <_cleanup_r+0x8>)
 8015922:	f000 b885 	b.w	8015a30 <_fwalk_reent>
 8015926:	bf00      	nop
 8015928:	08015885 	.word	0x08015885

0801592c <__sfmoreglue>:
 801592c:	b570      	push	{r4, r5, r6, lr}
 801592e:	1e4a      	subs	r2, r1, #1
 8015930:	2568      	movs	r5, #104	; 0x68
 8015932:	4355      	muls	r5, r2
 8015934:	460e      	mov	r6, r1
 8015936:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801593a:	f000 fc49 	bl	80161d0 <_malloc_r>
 801593e:	4604      	mov	r4, r0
 8015940:	b140      	cbz	r0, 8015954 <__sfmoreglue+0x28>
 8015942:	2100      	movs	r1, #0
 8015944:	e9c0 1600 	strd	r1, r6, [r0]
 8015948:	300c      	adds	r0, #12
 801594a:	60a0      	str	r0, [r4, #8]
 801594c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8015950:	f7fe fa9f 	bl	8013e92 <memset>
 8015954:	4620      	mov	r0, r4
 8015956:	bd70      	pop	{r4, r5, r6, pc}

08015958 <__sinit>:
 8015958:	6983      	ldr	r3, [r0, #24]
 801595a:	b510      	push	{r4, lr}
 801595c:	4604      	mov	r4, r0
 801595e:	bb33      	cbnz	r3, 80159ae <__sinit+0x56>
 8015960:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8015964:	6503      	str	r3, [r0, #80]	; 0x50
 8015966:	4b12      	ldr	r3, [pc, #72]	; (80159b0 <__sinit+0x58>)
 8015968:	4a12      	ldr	r2, [pc, #72]	; (80159b4 <__sinit+0x5c>)
 801596a:	681b      	ldr	r3, [r3, #0]
 801596c:	6282      	str	r2, [r0, #40]	; 0x28
 801596e:	4298      	cmp	r0, r3
 8015970:	bf04      	itt	eq
 8015972:	2301      	moveq	r3, #1
 8015974:	6183      	streq	r3, [r0, #24]
 8015976:	f000 f81f 	bl	80159b8 <__sfp>
 801597a:	6060      	str	r0, [r4, #4]
 801597c:	4620      	mov	r0, r4
 801597e:	f000 f81b 	bl	80159b8 <__sfp>
 8015982:	60a0      	str	r0, [r4, #8]
 8015984:	4620      	mov	r0, r4
 8015986:	f000 f817 	bl	80159b8 <__sfp>
 801598a:	2200      	movs	r2, #0
 801598c:	60e0      	str	r0, [r4, #12]
 801598e:	2104      	movs	r1, #4
 8015990:	6860      	ldr	r0, [r4, #4]
 8015992:	f7ff ffa1 	bl	80158d8 <std>
 8015996:	2201      	movs	r2, #1
 8015998:	2109      	movs	r1, #9
 801599a:	68a0      	ldr	r0, [r4, #8]
 801599c:	f7ff ff9c 	bl	80158d8 <std>
 80159a0:	2202      	movs	r2, #2
 80159a2:	2112      	movs	r1, #18
 80159a4:	68e0      	ldr	r0, [r4, #12]
 80159a6:	f7ff ff97 	bl	80158d8 <std>
 80159aa:	2301      	movs	r3, #1
 80159ac:	61a3      	str	r3, [r4, #24]
 80159ae:	bd10      	pop	{r4, pc}
 80159b0:	08019c74 	.word	0x08019c74
 80159b4:	08015921 	.word	0x08015921

080159b8 <__sfp>:
 80159b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80159ba:	4b1b      	ldr	r3, [pc, #108]	; (8015a28 <__sfp+0x70>)
 80159bc:	681e      	ldr	r6, [r3, #0]
 80159be:	69b3      	ldr	r3, [r6, #24]
 80159c0:	4607      	mov	r7, r0
 80159c2:	b913      	cbnz	r3, 80159ca <__sfp+0x12>
 80159c4:	4630      	mov	r0, r6
 80159c6:	f7ff ffc7 	bl	8015958 <__sinit>
 80159ca:	3648      	adds	r6, #72	; 0x48
 80159cc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80159d0:	3b01      	subs	r3, #1
 80159d2:	d503      	bpl.n	80159dc <__sfp+0x24>
 80159d4:	6833      	ldr	r3, [r6, #0]
 80159d6:	b133      	cbz	r3, 80159e6 <__sfp+0x2e>
 80159d8:	6836      	ldr	r6, [r6, #0]
 80159da:	e7f7      	b.n	80159cc <__sfp+0x14>
 80159dc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80159e0:	b16d      	cbz	r5, 80159fe <__sfp+0x46>
 80159e2:	3468      	adds	r4, #104	; 0x68
 80159e4:	e7f4      	b.n	80159d0 <__sfp+0x18>
 80159e6:	2104      	movs	r1, #4
 80159e8:	4638      	mov	r0, r7
 80159ea:	f7ff ff9f 	bl	801592c <__sfmoreglue>
 80159ee:	6030      	str	r0, [r6, #0]
 80159f0:	2800      	cmp	r0, #0
 80159f2:	d1f1      	bne.n	80159d8 <__sfp+0x20>
 80159f4:	230c      	movs	r3, #12
 80159f6:	603b      	str	r3, [r7, #0]
 80159f8:	4604      	mov	r4, r0
 80159fa:	4620      	mov	r0, r4
 80159fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80159fe:	4b0b      	ldr	r3, [pc, #44]	; (8015a2c <__sfp+0x74>)
 8015a00:	6665      	str	r5, [r4, #100]	; 0x64
 8015a02:	e9c4 5500 	strd	r5, r5, [r4]
 8015a06:	60a5      	str	r5, [r4, #8]
 8015a08:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8015a0c:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8015a10:	2208      	movs	r2, #8
 8015a12:	4629      	mov	r1, r5
 8015a14:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8015a18:	f7fe fa3b 	bl	8013e92 <memset>
 8015a1c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8015a20:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8015a24:	e7e9      	b.n	80159fa <__sfp+0x42>
 8015a26:	bf00      	nop
 8015a28:	08019c74 	.word	0x08019c74
 8015a2c:	ffff0001 	.word	0xffff0001

08015a30 <_fwalk_reent>:
 8015a30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015a34:	4680      	mov	r8, r0
 8015a36:	4689      	mov	r9, r1
 8015a38:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8015a3c:	2600      	movs	r6, #0
 8015a3e:	b914      	cbnz	r4, 8015a46 <_fwalk_reent+0x16>
 8015a40:	4630      	mov	r0, r6
 8015a42:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015a46:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8015a4a:	3f01      	subs	r7, #1
 8015a4c:	d501      	bpl.n	8015a52 <_fwalk_reent+0x22>
 8015a4e:	6824      	ldr	r4, [r4, #0]
 8015a50:	e7f5      	b.n	8015a3e <_fwalk_reent+0xe>
 8015a52:	89ab      	ldrh	r3, [r5, #12]
 8015a54:	2b01      	cmp	r3, #1
 8015a56:	d907      	bls.n	8015a68 <_fwalk_reent+0x38>
 8015a58:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8015a5c:	3301      	adds	r3, #1
 8015a5e:	d003      	beq.n	8015a68 <_fwalk_reent+0x38>
 8015a60:	4629      	mov	r1, r5
 8015a62:	4640      	mov	r0, r8
 8015a64:	47c8      	blx	r9
 8015a66:	4306      	orrs	r6, r0
 8015a68:	3568      	adds	r5, #104	; 0x68
 8015a6a:	e7ee      	b.n	8015a4a <_fwalk_reent+0x1a>

08015a6c <_localeconv_r>:
 8015a6c:	4b04      	ldr	r3, [pc, #16]	; (8015a80 <_localeconv_r+0x14>)
 8015a6e:	681b      	ldr	r3, [r3, #0]
 8015a70:	6a18      	ldr	r0, [r3, #32]
 8015a72:	4b04      	ldr	r3, [pc, #16]	; (8015a84 <_localeconv_r+0x18>)
 8015a74:	2800      	cmp	r0, #0
 8015a76:	bf08      	it	eq
 8015a78:	4618      	moveq	r0, r3
 8015a7a:	30f0      	adds	r0, #240	; 0xf0
 8015a7c:	4770      	bx	lr
 8015a7e:	bf00      	nop
 8015a80:	20000024 	.word	0x20000024
 8015a84:	20000088 	.word	0x20000088

08015a88 <__swhatbuf_r>:
 8015a88:	b570      	push	{r4, r5, r6, lr}
 8015a8a:	460e      	mov	r6, r1
 8015a8c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015a90:	2900      	cmp	r1, #0
 8015a92:	b096      	sub	sp, #88	; 0x58
 8015a94:	4614      	mov	r4, r2
 8015a96:	461d      	mov	r5, r3
 8015a98:	da07      	bge.n	8015aaa <__swhatbuf_r+0x22>
 8015a9a:	2300      	movs	r3, #0
 8015a9c:	602b      	str	r3, [r5, #0]
 8015a9e:	89b3      	ldrh	r3, [r6, #12]
 8015aa0:	061a      	lsls	r2, r3, #24
 8015aa2:	d410      	bmi.n	8015ac6 <__swhatbuf_r+0x3e>
 8015aa4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8015aa8:	e00e      	b.n	8015ac8 <__swhatbuf_r+0x40>
 8015aaa:	466a      	mov	r2, sp
 8015aac:	f000 fef2 	bl	8016894 <_fstat_r>
 8015ab0:	2800      	cmp	r0, #0
 8015ab2:	dbf2      	blt.n	8015a9a <__swhatbuf_r+0x12>
 8015ab4:	9a01      	ldr	r2, [sp, #4]
 8015ab6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8015aba:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8015abe:	425a      	negs	r2, r3
 8015ac0:	415a      	adcs	r2, r3
 8015ac2:	602a      	str	r2, [r5, #0]
 8015ac4:	e7ee      	b.n	8015aa4 <__swhatbuf_r+0x1c>
 8015ac6:	2340      	movs	r3, #64	; 0x40
 8015ac8:	2000      	movs	r0, #0
 8015aca:	6023      	str	r3, [r4, #0]
 8015acc:	b016      	add	sp, #88	; 0x58
 8015ace:	bd70      	pop	{r4, r5, r6, pc}

08015ad0 <__smakebuf_r>:
 8015ad0:	898b      	ldrh	r3, [r1, #12]
 8015ad2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8015ad4:	079d      	lsls	r5, r3, #30
 8015ad6:	4606      	mov	r6, r0
 8015ad8:	460c      	mov	r4, r1
 8015ada:	d507      	bpl.n	8015aec <__smakebuf_r+0x1c>
 8015adc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8015ae0:	6023      	str	r3, [r4, #0]
 8015ae2:	6123      	str	r3, [r4, #16]
 8015ae4:	2301      	movs	r3, #1
 8015ae6:	6163      	str	r3, [r4, #20]
 8015ae8:	b002      	add	sp, #8
 8015aea:	bd70      	pop	{r4, r5, r6, pc}
 8015aec:	ab01      	add	r3, sp, #4
 8015aee:	466a      	mov	r2, sp
 8015af0:	f7ff ffca 	bl	8015a88 <__swhatbuf_r>
 8015af4:	9900      	ldr	r1, [sp, #0]
 8015af6:	4605      	mov	r5, r0
 8015af8:	4630      	mov	r0, r6
 8015afa:	f000 fb69 	bl	80161d0 <_malloc_r>
 8015afe:	b948      	cbnz	r0, 8015b14 <__smakebuf_r+0x44>
 8015b00:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015b04:	059a      	lsls	r2, r3, #22
 8015b06:	d4ef      	bmi.n	8015ae8 <__smakebuf_r+0x18>
 8015b08:	f023 0303 	bic.w	r3, r3, #3
 8015b0c:	f043 0302 	orr.w	r3, r3, #2
 8015b10:	81a3      	strh	r3, [r4, #12]
 8015b12:	e7e3      	b.n	8015adc <__smakebuf_r+0xc>
 8015b14:	4b0d      	ldr	r3, [pc, #52]	; (8015b4c <__smakebuf_r+0x7c>)
 8015b16:	62b3      	str	r3, [r6, #40]	; 0x28
 8015b18:	89a3      	ldrh	r3, [r4, #12]
 8015b1a:	6020      	str	r0, [r4, #0]
 8015b1c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8015b20:	81a3      	strh	r3, [r4, #12]
 8015b22:	9b00      	ldr	r3, [sp, #0]
 8015b24:	6163      	str	r3, [r4, #20]
 8015b26:	9b01      	ldr	r3, [sp, #4]
 8015b28:	6120      	str	r0, [r4, #16]
 8015b2a:	b15b      	cbz	r3, 8015b44 <__smakebuf_r+0x74>
 8015b2c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8015b30:	4630      	mov	r0, r6
 8015b32:	f000 fec1 	bl	80168b8 <_isatty_r>
 8015b36:	b128      	cbz	r0, 8015b44 <__smakebuf_r+0x74>
 8015b38:	89a3      	ldrh	r3, [r4, #12]
 8015b3a:	f023 0303 	bic.w	r3, r3, #3
 8015b3e:	f043 0301 	orr.w	r3, r3, #1
 8015b42:	81a3      	strh	r3, [r4, #12]
 8015b44:	89a3      	ldrh	r3, [r4, #12]
 8015b46:	431d      	orrs	r5, r3
 8015b48:	81a5      	strh	r5, [r4, #12]
 8015b4a:	e7cd      	b.n	8015ae8 <__smakebuf_r+0x18>
 8015b4c:	08015921 	.word	0x08015921

08015b50 <malloc>:
 8015b50:	4b02      	ldr	r3, [pc, #8]	; (8015b5c <malloc+0xc>)
 8015b52:	4601      	mov	r1, r0
 8015b54:	6818      	ldr	r0, [r3, #0]
 8015b56:	f000 bb3b 	b.w	80161d0 <_malloc_r>
 8015b5a:	bf00      	nop
 8015b5c:	20000024 	.word	0x20000024

08015b60 <_Balloc>:
 8015b60:	b570      	push	{r4, r5, r6, lr}
 8015b62:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8015b64:	4604      	mov	r4, r0
 8015b66:	460e      	mov	r6, r1
 8015b68:	b93d      	cbnz	r5, 8015b7a <_Balloc+0x1a>
 8015b6a:	2010      	movs	r0, #16
 8015b6c:	f7ff fff0 	bl	8015b50 <malloc>
 8015b70:	6260      	str	r0, [r4, #36]	; 0x24
 8015b72:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8015b76:	6005      	str	r5, [r0, #0]
 8015b78:	60c5      	str	r5, [r0, #12]
 8015b7a:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8015b7c:	68eb      	ldr	r3, [r5, #12]
 8015b7e:	b183      	cbz	r3, 8015ba2 <_Balloc+0x42>
 8015b80:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8015b82:	68db      	ldr	r3, [r3, #12]
 8015b84:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8015b88:	b9b8      	cbnz	r0, 8015bba <_Balloc+0x5a>
 8015b8a:	2101      	movs	r1, #1
 8015b8c:	fa01 f506 	lsl.w	r5, r1, r6
 8015b90:	1d6a      	adds	r2, r5, #5
 8015b92:	0092      	lsls	r2, r2, #2
 8015b94:	4620      	mov	r0, r4
 8015b96:	f000 fabf 	bl	8016118 <_calloc_r>
 8015b9a:	b160      	cbz	r0, 8015bb6 <_Balloc+0x56>
 8015b9c:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8015ba0:	e00e      	b.n	8015bc0 <_Balloc+0x60>
 8015ba2:	2221      	movs	r2, #33	; 0x21
 8015ba4:	2104      	movs	r1, #4
 8015ba6:	4620      	mov	r0, r4
 8015ba8:	f000 fab6 	bl	8016118 <_calloc_r>
 8015bac:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8015bae:	60e8      	str	r0, [r5, #12]
 8015bb0:	68db      	ldr	r3, [r3, #12]
 8015bb2:	2b00      	cmp	r3, #0
 8015bb4:	d1e4      	bne.n	8015b80 <_Balloc+0x20>
 8015bb6:	2000      	movs	r0, #0
 8015bb8:	bd70      	pop	{r4, r5, r6, pc}
 8015bba:	6802      	ldr	r2, [r0, #0]
 8015bbc:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8015bc0:	2300      	movs	r3, #0
 8015bc2:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8015bc6:	e7f7      	b.n	8015bb8 <_Balloc+0x58>

08015bc8 <_Bfree>:
 8015bc8:	b570      	push	{r4, r5, r6, lr}
 8015bca:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8015bcc:	4606      	mov	r6, r0
 8015bce:	460d      	mov	r5, r1
 8015bd0:	b93c      	cbnz	r4, 8015be2 <_Bfree+0x1a>
 8015bd2:	2010      	movs	r0, #16
 8015bd4:	f7ff ffbc 	bl	8015b50 <malloc>
 8015bd8:	6270      	str	r0, [r6, #36]	; 0x24
 8015bda:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8015bde:	6004      	str	r4, [r0, #0]
 8015be0:	60c4      	str	r4, [r0, #12]
 8015be2:	b13d      	cbz	r5, 8015bf4 <_Bfree+0x2c>
 8015be4:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8015be6:	686a      	ldr	r2, [r5, #4]
 8015be8:	68db      	ldr	r3, [r3, #12]
 8015bea:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8015bee:	6029      	str	r1, [r5, #0]
 8015bf0:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8015bf4:	bd70      	pop	{r4, r5, r6, pc}

08015bf6 <__multadd>:
 8015bf6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015bfa:	690d      	ldr	r5, [r1, #16]
 8015bfc:	461f      	mov	r7, r3
 8015bfe:	4606      	mov	r6, r0
 8015c00:	460c      	mov	r4, r1
 8015c02:	f101 0c14 	add.w	ip, r1, #20
 8015c06:	2300      	movs	r3, #0
 8015c08:	f8dc 0000 	ldr.w	r0, [ip]
 8015c0c:	b281      	uxth	r1, r0
 8015c0e:	fb02 7101 	mla	r1, r2, r1, r7
 8015c12:	0c0f      	lsrs	r7, r1, #16
 8015c14:	0c00      	lsrs	r0, r0, #16
 8015c16:	fb02 7000 	mla	r0, r2, r0, r7
 8015c1a:	b289      	uxth	r1, r1
 8015c1c:	3301      	adds	r3, #1
 8015c1e:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8015c22:	429d      	cmp	r5, r3
 8015c24:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8015c28:	f84c 1b04 	str.w	r1, [ip], #4
 8015c2c:	dcec      	bgt.n	8015c08 <__multadd+0x12>
 8015c2e:	b1d7      	cbz	r7, 8015c66 <__multadd+0x70>
 8015c30:	68a3      	ldr	r3, [r4, #8]
 8015c32:	42ab      	cmp	r3, r5
 8015c34:	dc12      	bgt.n	8015c5c <__multadd+0x66>
 8015c36:	6861      	ldr	r1, [r4, #4]
 8015c38:	4630      	mov	r0, r6
 8015c3a:	3101      	adds	r1, #1
 8015c3c:	f7ff ff90 	bl	8015b60 <_Balloc>
 8015c40:	6922      	ldr	r2, [r4, #16]
 8015c42:	3202      	adds	r2, #2
 8015c44:	f104 010c 	add.w	r1, r4, #12
 8015c48:	4680      	mov	r8, r0
 8015c4a:	0092      	lsls	r2, r2, #2
 8015c4c:	300c      	adds	r0, #12
 8015c4e:	f7fe f915 	bl	8013e7c <memcpy>
 8015c52:	4621      	mov	r1, r4
 8015c54:	4630      	mov	r0, r6
 8015c56:	f7ff ffb7 	bl	8015bc8 <_Bfree>
 8015c5a:	4644      	mov	r4, r8
 8015c5c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8015c60:	3501      	adds	r5, #1
 8015c62:	615f      	str	r7, [r3, #20]
 8015c64:	6125      	str	r5, [r4, #16]
 8015c66:	4620      	mov	r0, r4
 8015c68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08015c6c <__hi0bits>:
 8015c6c:	0c02      	lsrs	r2, r0, #16
 8015c6e:	0412      	lsls	r2, r2, #16
 8015c70:	4603      	mov	r3, r0
 8015c72:	b9b2      	cbnz	r2, 8015ca2 <__hi0bits+0x36>
 8015c74:	0403      	lsls	r3, r0, #16
 8015c76:	2010      	movs	r0, #16
 8015c78:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8015c7c:	bf04      	itt	eq
 8015c7e:	021b      	lsleq	r3, r3, #8
 8015c80:	3008      	addeq	r0, #8
 8015c82:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8015c86:	bf04      	itt	eq
 8015c88:	011b      	lsleq	r3, r3, #4
 8015c8a:	3004      	addeq	r0, #4
 8015c8c:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8015c90:	bf04      	itt	eq
 8015c92:	009b      	lsleq	r3, r3, #2
 8015c94:	3002      	addeq	r0, #2
 8015c96:	2b00      	cmp	r3, #0
 8015c98:	db06      	blt.n	8015ca8 <__hi0bits+0x3c>
 8015c9a:	005b      	lsls	r3, r3, #1
 8015c9c:	d503      	bpl.n	8015ca6 <__hi0bits+0x3a>
 8015c9e:	3001      	adds	r0, #1
 8015ca0:	4770      	bx	lr
 8015ca2:	2000      	movs	r0, #0
 8015ca4:	e7e8      	b.n	8015c78 <__hi0bits+0xc>
 8015ca6:	2020      	movs	r0, #32
 8015ca8:	4770      	bx	lr

08015caa <__lo0bits>:
 8015caa:	6803      	ldr	r3, [r0, #0]
 8015cac:	f013 0207 	ands.w	r2, r3, #7
 8015cb0:	4601      	mov	r1, r0
 8015cb2:	d00b      	beq.n	8015ccc <__lo0bits+0x22>
 8015cb4:	07da      	lsls	r2, r3, #31
 8015cb6:	d423      	bmi.n	8015d00 <__lo0bits+0x56>
 8015cb8:	0798      	lsls	r0, r3, #30
 8015cba:	bf49      	itett	mi
 8015cbc:	085b      	lsrmi	r3, r3, #1
 8015cbe:	089b      	lsrpl	r3, r3, #2
 8015cc0:	2001      	movmi	r0, #1
 8015cc2:	600b      	strmi	r3, [r1, #0]
 8015cc4:	bf5c      	itt	pl
 8015cc6:	600b      	strpl	r3, [r1, #0]
 8015cc8:	2002      	movpl	r0, #2
 8015cca:	4770      	bx	lr
 8015ccc:	b298      	uxth	r0, r3
 8015cce:	b9a8      	cbnz	r0, 8015cfc <__lo0bits+0x52>
 8015cd0:	0c1b      	lsrs	r3, r3, #16
 8015cd2:	2010      	movs	r0, #16
 8015cd4:	f013 0fff 	tst.w	r3, #255	; 0xff
 8015cd8:	bf04      	itt	eq
 8015cda:	0a1b      	lsreq	r3, r3, #8
 8015cdc:	3008      	addeq	r0, #8
 8015cde:	071a      	lsls	r2, r3, #28
 8015ce0:	bf04      	itt	eq
 8015ce2:	091b      	lsreq	r3, r3, #4
 8015ce4:	3004      	addeq	r0, #4
 8015ce6:	079a      	lsls	r2, r3, #30
 8015ce8:	bf04      	itt	eq
 8015cea:	089b      	lsreq	r3, r3, #2
 8015cec:	3002      	addeq	r0, #2
 8015cee:	07da      	lsls	r2, r3, #31
 8015cf0:	d402      	bmi.n	8015cf8 <__lo0bits+0x4e>
 8015cf2:	085b      	lsrs	r3, r3, #1
 8015cf4:	d006      	beq.n	8015d04 <__lo0bits+0x5a>
 8015cf6:	3001      	adds	r0, #1
 8015cf8:	600b      	str	r3, [r1, #0]
 8015cfa:	4770      	bx	lr
 8015cfc:	4610      	mov	r0, r2
 8015cfe:	e7e9      	b.n	8015cd4 <__lo0bits+0x2a>
 8015d00:	2000      	movs	r0, #0
 8015d02:	4770      	bx	lr
 8015d04:	2020      	movs	r0, #32
 8015d06:	4770      	bx	lr

08015d08 <__i2b>:
 8015d08:	b510      	push	{r4, lr}
 8015d0a:	460c      	mov	r4, r1
 8015d0c:	2101      	movs	r1, #1
 8015d0e:	f7ff ff27 	bl	8015b60 <_Balloc>
 8015d12:	2201      	movs	r2, #1
 8015d14:	6144      	str	r4, [r0, #20]
 8015d16:	6102      	str	r2, [r0, #16]
 8015d18:	bd10      	pop	{r4, pc}

08015d1a <__multiply>:
 8015d1a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015d1e:	4614      	mov	r4, r2
 8015d20:	690a      	ldr	r2, [r1, #16]
 8015d22:	6923      	ldr	r3, [r4, #16]
 8015d24:	429a      	cmp	r2, r3
 8015d26:	bfb8      	it	lt
 8015d28:	460b      	movlt	r3, r1
 8015d2a:	4688      	mov	r8, r1
 8015d2c:	bfbc      	itt	lt
 8015d2e:	46a0      	movlt	r8, r4
 8015d30:	461c      	movlt	r4, r3
 8015d32:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8015d36:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8015d3a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8015d3e:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8015d42:	eb07 0609 	add.w	r6, r7, r9
 8015d46:	42b3      	cmp	r3, r6
 8015d48:	bfb8      	it	lt
 8015d4a:	3101      	addlt	r1, #1
 8015d4c:	f7ff ff08 	bl	8015b60 <_Balloc>
 8015d50:	f100 0514 	add.w	r5, r0, #20
 8015d54:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8015d58:	462b      	mov	r3, r5
 8015d5a:	2200      	movs	r2, #0
 8015d5c:	4573      	cmp	r3, lr
 8015d5e:	d316      	bcc.n	8015d8e <__multiply+0x74>
 8015d60:	f104 0214 	add.w	r2, r4, #20
 8015d64:	f108 0114 	add.w	r1, r8, #20
 8015d68:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8015d6c:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8015d70:	9300      	str	r3, [sp, #0]
 8015d72:	9b00      	ldr	r3, [sp, #0]
 8015d74:	9201      	str	r2, [sp, #4]
 8015d76:	4293      	cmp	r3, r2
 8015d78:	d80c      	bhi.n	8015d94 <__multiply+0x7a>
 8015d7a:	2e00      	cmp	r6, #0
 8015d7c:	dd03      	ble.n	8015d86 <__multiply+0x6c>
 8015d7e:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8015d82:	2b00      	cmp	r3, #0
 8015d84:	d05d      	beq.n	8015e42 <__multiply+0x128>
 8015d86:	6106      	str	r6, [r0, #16]
 8015d88:	b003      	add	sp, #12
 8015d8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015d8e:	f843 2b04 	str.w	r2, [r3], #4
 8015d92:	e7e3      	b.n	8015d5c <__multiply+0x42>
 8015d94:	f8b2 b000 	ldrh.w	fp, [r2]
 8015d98:	f1bb 0f00 	cmp.w	fp, #0
 8015d9c:	d023      	beq.n	8015de6 <__multiply+0xcc>
 8015d9e:	4689      	mov	r9, r1
 8015da0:	46ac      	mov	ip, r5
 8015da2:	f04f 0800 	mov.w	r8, #0
 8015da6:	f859 4b04 	ldr.w	r4, [r9], #4
 8015daa:	f8dc a000 	ldr.w	sl, [ip]
 8015dae:	b2a3      	uxth	r3, r4
 8015db0:	fa1f fa8a 	uxth.w	sl, sl
 8015db4:	fb0b a303 	mla	r3, fp, r3, sl
 8015db8:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8015dbc:	f8dc 4000 	ldr.w	r4, [ip]
 8015dc0:	4443      	add	r3, r8
 8015dc2:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8015dc6:	fb0b 840a 	mla	r4, fp, sl, r8
 8015dca:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8015dce:	46e2      	mov	sl, ip
 8015dd0:	b29b      	uxth	r3, r3
 8015dd2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8015dd6:	454f      	cmp	r7, r9
 8015dd8:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8015ddc:	f84a 3b04 	str.w	r3, [sl], #4
 8015de0:	d82b      	bhi.n	8015e3a <__multiply+0x120>
 8015de2:	f8cc 8004 	str.w	r8, [ip, #4]
 8015de6:	9b01      	ldr	r3, [sp, #4]
 8015de8:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8015dec:	3204      	adds	r2, #4
 8015dee:	f1ba 0f00 	cmp.w	sl, #0
 8015df2:	d020      	beq.n	8015e36 <__multiply+0x11c>
 8015df4:	682b      	ldr	r3, [r5, #0]
 8015df6:	4689      	mov	r9, r1
 8015df8:	46a8      	mov	r8, r5
 8015dfa:	f04f 0b00 	mov.w	fp, #0
 8015dfe:	f8b9 c000 	ldrh.w	ip, [r9]
 8015e02:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8015e06:	fb0a 440c 	mla	r4, sl, ip, r4
 8015e0a:	445c      	add	r4, fp
 8015e0c:	46c4      	mov	ip, r8
 8015e0e:	b29b      	uxth	r3, r3
 8015e10:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8015e14:	f84c 3b04 	str.w	r3, [ip], #4
 8015e18:	f859 3b04 	ldr.w	r3, [r9], #4
 8015e1c:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8015e20:	0c1b      	lsrs	r3, r3, #16
 8015e22:	fb0a b303 	mla	r3, sl, r3, fp
 8015e26:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8015e2a:	454f      	cmp	r7, r9
 8015e2c:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8015e30:	d805      	bhi.n	8015e3e <__multiply+0x124>
 8015e32:	f8c8 3004 	str.w	r3, [r8, #4]
 8015e36:	3504      	adds	r5, #4
 8015e38:	e79b      	b.n	8015d72 <__multiply+0x58>
 8015e3a:	46d4      	mov	ip, sl
 8015e3c:	e7b3      	b.n	8015da6 <__multiply+0x8c>
 8015e3e:	46e0      	mov	r8, ip
 8015e40:	e7dd      	b.n	8015dfe <__multiply+0xe4>
 8015e42:	3e01      	subs	r6, #1
 8015e44:	e799      	b.n	8015d7a <__multiply+0x60>
	...

08015e48 <__pow5mult>:
 8015e48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015e4c:	4615      	mov	r5, r2
 8015e4e:	f012 0203 	ands.w	r2, r2, #3
 8015e52:	4606      	mov	r6, r0
 8015e54:	460f      	mov	r7, r1
 8015e56:	d007      	beq.n	8015e68 <__pow5mult+0x20>
 8015e58:	3a01      	subs	r2, #1
 8015e5a:	4c21      	ldr	r4, [pc, #132]	; (8015ee0 <__pow5mult+0x98>)
 8015e5c:	2300      	movs	r3, #0
 8015e5e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8015e62:	f7ff fec8 	bl	8015bf6 <__multadd>
 8015e66:	4607      	mov	r7, r0
 8015e68:	10ad      	asrs	r5, r5, #2
 8015e6a:	d035      	beq.n	8015ed8 <__pow5mult+0x90>
 8015e6c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8015e6e:	b93c      	cbnz	r4, 8015e80 <__pow5mult+0x38>
 8015e70:	2010      	movs	r0, #16
 8015e72:	f7ff fe6d 	bl	8015b50 <malloc>
 8015e76:	6270      	str	r0, [r6, #36]	; 0x24
 8015e78:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8015e7c:	6004      	str	r4, [r0, #0]
 8015e7e:	60c4      	str	r4, [r0, #12]
 8015e80:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8015e84:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8015e88:	b94c      	cbnz	r4, 8015e9e <__pow5mult+0x56>
 8015e8a:	f240 2171 	movw	r1, #625	; 0x271
 8015e8e:	4630      	mov	r0, r6
 8015e90:	f7ff ff3a 	bl	8015d08 <__i2b>
 8015e94:	2300      	movs	r3, #0
 8015e96:	f8c8 0008 	str.w	r0, [r8, #8]
 8015e9a:	4604      	mov	r4, r0
 8015e9c:	6003      	str	r3, [r0, #0]
 8015e9e:	f04f 0800 	mov.w	r8, #0
 8015ea2:	07eb      	lsls	r3, r5, #31
 8015ea4:	d50a      	bpl.n	8015ebc <__pow5mult+0x74>
 8015ea6:	4639      	mov	r1, r7
 8015ea8:	4622      	mov	r2, r4
 8015eaa:	4630      	mov	r0, r6
 8015eac:	f7ff ff35 	bl	8015d1a <__multiply>
 8015eb0:	4639      	mov	r1, r7
 8015eb2:	4681      	mov	r9, r0
 8015eb4:	4630      	mov	r0, r6
 8015eb6:	f7ff fe87 	bl	8015bc8 <_Bfree>
 8015eba:	464f      	mov	r7, r9
 8015ebc:	106d      	asrs	r5, r5, #1
 8015ebe:	d00b      	beq.n	8015ed8 <__pow5mult+0x90>
 8015ec0:	6820      	ldr	r0, [r4, #0]
 8015ec2:	b938      	cbnz	r0, 8015ed4 <__pow5mult+0x8c>
 8015ec4:	4622      	mov	r2, r4
 8015ec6:	4621      	mov	r1, r4
 8015ec8:	4630      	mov	r0, r6
 8015eca:	f7ff ff26 	bl	8015d1a <__multiply>
 8015ece:	6020      	str	r0, [r4, #0]
 8015ed0:	f8c0 8000 	str.w	r8, [r0]
 8015ed4:	4604      	mov	r4, r0
 8015ed6:	e7e4      	b.n	8015ea2 <__pow5mult+0x5a>
 8015ed8:	4638      	mov	r0, r7
 8015eda:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015ede:	bf00      	nop
 8015ee0:	08019e10 	.word	0x08019e10

08015ee4 <__lshift>:
 8015ee4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015ee8:	460c      	mov	r4, r1
 8015eea:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8015eee:	6923      	ldr	r3, [r4, #16]
 8015ef0:	6849      	ldr	r1, [r1, #4]
 8015ef2:	eb0a 0903 	add.w	r9, sl, r3
 8015ef6:	68a3      	ldr	r3, [r4, #8]
 8015ef8:	4607      	mov	r7, r0
 8015efa:	4616      	mov	r6, r2
 8015efc:	f109 0501 	add.w	r5, r9, #1
 8015f00:	42ab      	cmp	r3, r5
 8015f02:	db32      	blt.n	8015f6a <__lshift+0x86>
 8015f04:	4638      	mov	r0, r7
 8015f06:	f7ff fe2b 	bl	8015b60 <_Balloc>
 8015f0a:	2300      	movs	r3, #0
 8015f0c:	4680      	mov	r8, r0
 8015f0e:	f100 0114 	add.w	r1, r0, #20
 8015f12:	461a      	mov	r2, r3
 8015f14:	4553      	cmp	r3, sl
 8015f16:	db2b      	blt.n	8015f70 <__lshift+0x8c>
 8015f18:	6920      	ldr	r0, [r4, #16]
 8015f1a:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8015f1e:	f104 0314 	add.w	r3, r4, #20
 8015f22:	f016 021f 	ands.w	r2, r6, #31
 8015f26:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8015f2a:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8015f2e:	d025      	beq.n	8015f7c <__lshift+0x98>
 8015f30:	f1c2 0e20 	rsb	lr, r2, #32
 8015f34:	2000      	movs	r0, #0
 8015f36:	681e      	ldr	r6, [r3, #0]
 8015f38:	468a      	mov	sl, r1
 8015f3a:	4096      	lsls	r6, r2
 8015f3c:	4330      	orrs	r0, r6
 8015f3e:	f84a 0b04 	str.w	r0, [sl], #4
 8015f42:	f853 0b04 	ldr.w	r0, [r3], #4
 8015f46:	459c      	cmp	ip, r3
 8015f48:	fa20 f00e 	lsr.w	r0, r0, lr
 8015f4c:	d814      	bhi.n	8015f78 <__lshift+0x94>
 8015f4e:	6048      	str	r0, [r1, #4]
 8015f50:	b108      	cbz	r0, 8015f56 <__lshift+0x72>
 8015f52:	f109 0502 	add.w	r5, r9, #2
 8015f56:	3d01      	subs	r5, #1
 8015f58:	4638      	mov	r0, r7
 8015f5a:	f8c8 5010 	str.w	r5, [r8, #16]
 8015f5e:	4621      	mov	r1, r4
 8015f60:	f7ff fe32 	bl	8015bc8 <_Bfree>
 8015f64:	4640      	mov	r0, r8
 8015f66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015f6a:	3101      	adds	r1, #1
 8015f6c:	005b      	lsls	r3, r3, #1
 8015f6e:	e7c7      	b.n	8015f00 <__lshift+0x1c>
 8015f70:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8015f74:	3301      	adds	r3, #1
 8015f76:	e7cd      	b.n	8015f14 <__lshift+0x30>
 8015f78:	4651      	mov	r1, sl
 8015f7a:	e7dc      	b.n	8015f36 <__lshift+0x52>
 8015f7c:	3904      	subs	r1, #4
 8015f7e:	f853 2b04 	ldr.w	r2, [r3], #4
 8015f82:	f841 2f04 	str.w	r2, [r1, #4]!
 8015f86:	459c      	cmp	ip, r3
 8015f88:	d8f9      	bhi.n	8015f7e <__lshift+0x9a>
 8015f8a:	e7e4      	b.n	8015f56 <__lshift+0x72>

08015f8c <__mcmp>:
 8015f8c:	6903      	ldr	r3, [r0, #16]
 8015f8e:	690a      	ldr	r2, [r1, #16]
 8015f90:	1a9b      	subs	r3, r3, r2
 8015f92:	b530      	push	{r4, r5, lr}
 8015f94:	d10c      	bne.n	8015fb0 <__mcmp+0x24>
 8015f96:	0092      	lsls	r2, r2, #2
 8015f98:	3014      	adds	r0, #20
 8015f9a:	3114      	adds	r1, #20
 8015f9c:	1884      	adds	r4, r0, r2
 8015f9e:	4411      	add	r1, r2
 8015fa0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8015fa4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8015fa8:	4295      	cmp	r5, r2
 8015faa:	d003      	beq.n	8015fb4 <__mcmp+0x28>
 8015fac:	d305      	bcc.n	8015fba <__mcmp+0x2e>
 8015fae:	2301      	movs	r3, #1
 8015fb0:	4618      	mov	r0, r3
 8015fb2:	bd30      	pop	{r4, r5, pc}
 8015fb4:	42a0      	cmp	r0, r4
 8015fb6:	d3f3      	bcc.n	8015fa0 <__mcmp+0x14>
 8015fb8:	e7fa      	b.n	8015fb0 <__mcmp+0x24>
 8015fba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8015fbe:	e7f7      	b.n	8015fb0 <__mcmp+0x24>

08015fc0 <__mdiff>:
 8015fc0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015fc4:	460d      	mov	r5, r1
 8015fc6:	4607      	mov	r7, r0
 8015fc8:	4611      	mov	r1, r2
 8015fca:	4628      	mov	r0, r5
 8015fcc:	4614      	mov	r4, r2
 8015fce:	f7ff ffdd 	bl	8015f8c <__mcmp>
 8015fd2:	1e06      	subs	r6, r0, #0
 8015fd4:	d108      	bne.n	8015fe8 <__mdiff+0x28>
 8015fd6:	4631      	mov	r1, r6
 8015fd8:	4638      	mov	r0, r7
 8015fda:	f7ff fdc1 	bl	8015b60 <_Balloc>
 8015fde:	2301      	movs	r3, #1
 8015fe0:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8015fe4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015fe8:	bfa4      	itt	ge
 8015fea:	4623      	movge	r3, r4
 8015fec:	462c      	movge	r4, r5
 8015fee:	4638      	mov	r0, r7
 8015ff0:	6861      	ldr	r1, [r4, #4]
 8015ff2:	bfa6      	itte	ge
 8015ff4:	461d      	movge	r5, r3
 8015ff6:	2600      	movge	r6, #0
 8015ff8:	2601      	movlt	r6, #1
 8015ffa:	f7ff fdb1 	bl	8015b60 <_Balloc>
 8015ffe:	692b      	ldr	r3, [r5, #16]
 8016000:	60c6      	str	r6, [r0, #12]
 8016002:	6926      	ldr	r6, [r4, #16]
 8016004:	f105 0914 	add.w	r9, r5, #20
 8016008:	f104 0214 	add.w	r2, r4, #20
 801600c:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8016010:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8016014:	f100 0514 	add.w	r5, r0, #20
 8016018:	f04f 0e00 	mov.w	lr, #0
 801601c:	f852 ab04 	ldr.w	sl, [r2], #4
 8016020:	f859 4b04 	ldr.w	r4, [r9], #4
 8016024:	fa1e f18a 	uxtah	r1, lr, sl
 8016028:	b2a3      	uxth	r3, r4
 801602a:	1ac9      	subs	r1, r1, r3
 801602c:	0c23      	lsrs	r3, r4, #16
 801602e:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 8016032:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8016036:	b289      	uxth	r1, r1
 8016038:	ea4f 4e23 	mov.w	lr, r3, asr #16
 801603c:	45c8      	cmp	r8, r9
 801603e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8016042:	4694      	mov	ip, r2
 8016044:	f845 3b04 	str.w	r3, [r5], #4
 8016048:	d8e8      	bhi.n	801601c <__mdiff+0x5c>
 801604a:	45bc      	cmp	ip, r7
 801604c:	d304      	bcc.n	8016058 <__mdiff+0x98>
 801604e:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8016052:	b183      	cbz	r3, 8016076 <__mdiff+0xb6>
 8016054:	6106      	str	r6, [r0, #16]
 8016056:	e7c5      	b.n	8015fe4 <__mdiff+0x24>
 8016058:	f85c 1b04 	ldr.w	r1, [ip], #4
 801605c:	fa1e f381 	uxtah	r3, lr, r1
 8016060:	141a      	asrs	r2, r3, #16
 8016062:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8016066:	b29b      	uxth	r3, r3
 8016068:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801606c:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8016070:	f845 3b04 	str.w	r3, [r5], #4
 8016074:	e7e9      	b.n	801604a <__mdiff+0x8a>
 8016076:	3e01      	subs	r6, #1
 8016078:	e7e9      	b.n	801604e <__mdiff+0x8e>

0801607a <__d2b>:
 801607a:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801607e:	460e      	mov	r6, r1
 8016080:	2101      	movs	r1, #1
 8016082:	ec59 8b10 	vmov	r8, r9, d0
 8016086:	4615      	mov	r5, r2
 8016088:	f7ff fd6a 	bl	8015b60 <_Balloc>
 801608c:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8016090:	4607      	mov	r7, r0
 8016092:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8016096:	bb34      	cbnz	r4, 80160e6 <__d2b+0x6c>
 8016098:	9301      	str	r3, [sp, #4]
 801609a:	f1b8 0300 	subs.w	r3, r8, #0
 801609e:	d027      	beq.n	80160f0 <__d2b+0x76>
 80160a0:	a802      	add	r0, sp, #8
 80160a2:	f840 3d08 	str.w	r3, [r0, #-8]!
 80160a6:	f7ff fe00 	bl	8015caa <__lo0bits>
 80160aa:	9900      	ldr	r1, [sp, #0]
 80160ac:	b1f0      	cbz	r0, 80160ec <__d2b+0x72>
 80160ae:	9a01      	ldr	r2, [sp, #4]
 80160b0:	f1c0 0320 	rsb	r3, r0, #32
 80160b4:	fa02 f303 	lsl.w	r3, r2, r3
 80160b8:	430b      	orrs	r3, r1
 80160ba:	40c2      	lsrs	r2, r0
 80160bc:	617b      	str	r3, [r7, #20]
 80160be:	9201      	str	r2, [sp, #4]
 80160c0:	9b01      	ldr	r3, [sp, #4]
 80160c2:	61bb      	str	r3, [r7, #24]
 80160c4:	2b00      	cmp	r3, #0
 80160c6:	bf14      	ite	ne
 80160c8:	2102      	movne	r1, #2
 80160ca:	2101      	moveq	r1, #1
 80160cc:	6139      	str	r1, [r7, #16]
 80160ce:	b1c4      	cbz	r4, 8016102 <__d2b+0x88>
 80160d0:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 80160d4:	4404      	add	r4, r0
 80160d6:	6034      	str	r4, [r6, #0]
 80160d8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80160dc:	6028      	str	r0, [r5, #0]
 80160de:	4638      	mov	r0, r7
 80160e0:	b003      	add	sp, #12
 80160e2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80160e6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80160ea:	e7d5      	b.n	8016098 <__d2b+0x1e>
 80160ec:	6179      	str	r1, [r7, #20]
 80160ee:	e7e7      	b.n	80160c0 <__d2b+0x46>
 80160f0:	a801      	add	r0, sp, #4
 80160f2:	f7ff fdda 	bl	8015caa <__lo0bits>
 80160f6:	9b01      	ldr	r3, [sp, #4]
 80160f8:	617b      	str	r3, [r7, #20]
 80160fa:	2101      	movs	r1, #1
 80160fc:	6139      	str	r1, [r7, #16]
 80160fe:	3020      	adds	r0, #32
 8016100:	e7e5      	b.n	80160ce <__d2b+0x54>
 8016102:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8016106:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 801610a:	6030      	str	r0, [r6, #0]
 801610c:	6918      	ldr	r0, [r3, #16]
 801610e:	f7ff fdad 	bl	8015c6c <__hi0bits>
 8016112:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8016116:	e7e1      	b.n	80160dc <__d2b+0x62>

08016118 <_calloc_r>:
 8016118:	b538      	push	{r3, r4, r5, lr}
 801611a:	fb02 f401 	mul.w	r4, r2, r1
 801611e:	4621      	mov	r1, r4
 8016120:	f000 f856 	bl	80161d0 <_malloc_r>
 8016124:	4605      	mov	r5, r0
 8016126:	b118      	cbz	r0, 8016130 <_calloc_r+0x18>
 8016128:	4622      	mov	r2, r4
 801612a:	2100      	movs	r1, #0
 801612c:	f7fd feb1 	bl	8013e92 <memset>
 8016130:	4628      	mov	r0, r5
 8016132:	bd38      	pop	{r3, r4, r5, pc}

08016134 <_free_r>:
 8016134:	b538      	push	{r3, r4, r5, lr}
 8016136:	4605      	mov	r5, r0
 8016138:	2900      	cmp	r1, #0
 801613a:	d045      	beq.n	80161c8 <_free_r+0x94>
 801613c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8016140:	1f0c      	subs	r4, r1, #4
 8016142:	2b00      	cmp	r3, #0
 8016144:	bfb8      	it	lt
 8016146:	18e4      	addlt	r4, r4, r3
 8016148:	f000 fc03 	bl	8016952 <__malloc_lock>
 801614c:	4a1f      	ldr	r2, [pc, #124]	; (80161cc <_free_r+0x98>)
 801614e:	6813      	ldr	r3, [r2, #0]
 8016150:	4610      	mov	r0, r2
 8016152:	b933      	cbnz	r3, 8016162 <_free_r+0x2e>
 8016154:	6063      	str	r3, [r4, #4]
 8016156:	6014      	str	r4, [r2, #0]
 8016158:	4628      	mov	r0, r5
 801615a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801615e:	f000 bbf9 	b.w	8016954 <__malloc_unlock>
 8016162:	42a3      	cmp	r3, r4
 8016164:	d90c      	bls.n	8016180 <_free_r+0x4c>
 8016166:	6821      	ldr	r1, [r4, #0]
 8016168:	1862      	adds	r2, r4, r1
 801616a:	4293      	cmp	r3, r2
 801616c:	bf04      	itt	eq
 801616e:	681a      	ldreq	r2, [r3, #0]
 8016170:	685b      	ldreq	r3, [r3, #4]
 8016172:	6063      	str	r3, [r4, #4]
 8016174:	bf04      	itt	eq
 8016176:	1852      	addeq	r2, r2, r1
 8016178:	6022      	streq	r2, [r4, #0]
 801617a:	6004      	str	r4, [r0, #0]
 801617c:	e7ec      	b.n	8016158 <_free_r+0x24>
 801617e:	4613      	mov	r3, r2
 8016180:	685a      	ldr	r2, [r3, #4]
 8016182:	b10a      	cbz	r2, 8016188 <_free_r+0x54>
 8016184:	42a2      	cmp	r2, r4
 8016186:	d9fa      	bls.n	801617e <_free_r+0x4a>
 8016188:	6819      	ldr	r1, [r3, #0]
 801618a:	1858      	adds	r0, r3, r1
 801618c:	42a0      	cmp	r0, r4
 801618e:	d10b      	bne.n	80161a8 <_free_r+0x74>
 8016190:	6820      	ldr	r0, [r4, #0]
 8016192:	4401      	add	r1, r0
 8016194:	1858      	adds	r0, r3, r1
 8016196:	4282      	cmp	r2, r0
 8016198:	6019      	str	r1, [r3, #0]
 801619a:	d1dd      	bne.n	8016158 <_free_r+0x24>
 801619c:	6810      	ldr	r0, [r2, #0]
 801619e:	6852      	ldr	r2, [r2, #4]
 80161a0:	605a      	str	r2, [r3, #4]
 80161a2:	4401      	add	r1, r0
 80161a4:	6019      	str	r1, [r3, #0]
 80161a6:	e7d7      	b.n	8016158 <_free_r+0x24>
 80161a8:	d902      	bls.n	80161b0 <_free_r+0x7c>
 80161aa:	230c      	movs	r3, #12
 80161ac:	602b      	str	r3, [r5, #0]
 80161ae:	e7d3      	b.n	8016158 <_free_r+0x24>
 80161b0:	6820      	ldr	r0, [r4, #0]
 80161b2:	1821      	adds	r1, r4, r0
 80161b4:	428a      	cmp	r2, r1
 80161b6:	bf04      	itt	eq
 80161b8:	6811      	ldreq	r1, [r2, #0]
 80161ba:	6852      	ldreq	r2, [r2, #4]
 80161bc:	6062      	str	r2, [r4, #4]
 80161be:	bf04      	itt	eq
 80161c0:	1809      	addeq	r1, r1, r0
 80161c2:	6021      	streq	r1, [r4, #0]
 80161c4:	605c      	str	r4, [r3, #4]
 80161c6:	e7c7      	b.n	8016158 <_free_r+0x24>
 80161c8:	bd38      	pop	{r3, r4, r5, pc}
 80161ca:	bf00      	nop
 80161cc:	2002e064 	.word	0x2002e064

080161d0 <_malloc_r>:
 80161d0:	b570      	push	{r4, r5, r6, lr}
 80161d2:	1ccd      	adds	r5, r1, #3
 80161d4:	f025 0503 	bic.w	r5, r5, #3
 80161d8:	3508      	adds	r5, #8
 80161da:	2d0c      	cmp	r5, #12
 80161dc:	bf38      	it	cc
 80161de:	250c      	movcc	r5, #12
 80161e0:	2d00      	cmp	r5, #0
 80161e2:	4606      	mov	r6, r0
 80161e4:	db01      	blt.n	80161ea <_malloc_r+0x1a>
 80161e6:	42a9      	cmp	r1, r5
 80161e8:	d903      	bls.n	80161f2 <_malloc_r+0x22>
 80161ea:	230c      	movs	r3, #12
 80161ec:	6033      	str	r3, [r6, #0]
 80161ee:	2000      	movs	r0, #0
 80161f0:	bd70      	pop	{r4, r5, r6, pc}
 80161f2:	f000 fbae 	bl	8016952 <__malloc_lock>
 80161f6:	4a21      	ldr	r2, [pc, #132]	; (801627c <_malloc_r+0xac>)
 80161f8:	6814      	ldr	r4, [r2, #0]
 80161fa:	4621      	mov	r1, r4
 80161fc:	b991      	cbnz	r1, 8016224 <_malloc_r+0x54>
 80161fe:	4c20      	ldr	r4, [pc, #128]	; (8016280 <_malloc_r+0xb0>)
 8016200:	6823      	ldr	r3, [r4, #0]
 8016202:	b91b      	cbnz	r3, 801620c <_malloc_r+0x3c>
 8016204:	4630      	mov	r0, r6
 8016206:	f000 facf 	bl	80167a8 <_sbrk_r>
 801620a:	6020      	str	r0, [r4, #0]
 801620c:	4629      	mov	r1, r5
 801620e:	4630      	mov	r0, r6
 8016210:	f000 faca 	bl	80167a8 <_sbrk_r>
 8016214:	1c43      	adds	r3, r0, #1
 8016216:	d124      	bne.n	8016262 <_malloc_r+0x92>
 8016218:	230c      	movs	r3, #12
 801621a:	6033      	str	r3, [r6, #0]
 801621c:	4630      	mov	r0, r6
 801621e:	f000 fb99 	bl	8016954 <__malloc_unlock>
 8016222:	e7e4      	b.n	80161ee <_malloc_r+0x1e>
 8016224:	680b      	ldr	r3, [r1, #0]
 8016226:	1b5b      	subs	r3, r3, r5
 8016228:	d418      	bmi.n	801625c <_malloc_r+0x8c>
 801622a:	2b0b      	cmp	r3, #11
 801622c:	d90f      	bls.n	801624e <_malloc_r+0x7e>
 801622e:	600b      	str	r3, [r1, #0]
 8016230:	50cd      	str	r5, [r1, r3]
 8016232:	18cc      	adds	r4, r1, r3
 8016234:	4630      	mov	r0, r6
 8016236:	f000 fb8d 	bl	8016954 <__malloc_unlock>
 801623a:	f104 000b 	add.w	r0, r4, #11
 801623e:	1d23      	adds	r3, r4, #4
 8016240:	f020 0007 	bic.w	r0, r0, #7
 8016244:	1ac3      	subs	r3, r0, r3
 8016246:	d0d3      	beq.n	80161f0 <_malloc_r+0x20>
 8016248:	425a      	negs	r2, r3
 801624a:	50e2      	str	r2, [r4, r3]
 801624c:	e7d0      	b.n	80161f0 <_malloc_r+0x20>
 801624e:	428c      	cmp	r4, r1
 8016250:	684b      	ldr	r3, [r1, #4]
 8016252:	bf16      	itet	ne
 8016254:	6063      	strne	r3, [r4, #4]
 8016256:	6013      	streq	r3, [r2, #0]
 8016258:	460c      	movne	r4, r1
 801625a:	e7eb      	b.n	8016234 <_malloc_r+0x64>
 801625c:	460c      	mov	r4, r1
 801625e:	6849      	ldr	r1, [r1, #4]
 8016260:	e7cc      	b.n	80161fc <_malloc_r+0x2c>
 8016262:	1cc4      	adds	r4, r0, #3
 8016264:	f024 0403 	bic.w	r4, r4, #3
 8016268:	42a0      	cmp	r0, r4
 801626a:	d005      	beq.n	8016278 <_malloc_r+0xa8>
 801626c:	1a21      	subs	r1, r4, r0
 801626e:	4630      	mov	r0, r6
 8016270:	f000 fa9a 	bl	80167a8 <_sbrk_r>
 8016274:	3001      	adds	r0, #1
 8016276:	d0cf      	beq.n	8016218 <_malloc_r+0x48>
 8016278:	6025      	str	r5, [r4, #0]
 801627a:	e7db      	b.n	8016234 <_malloc_r+0x64>
 801627c:	2002e064 	.word	0x2002e064
 8016280:	2002e068 	.word	0x2002e068

08016284 <__ssputs_r>:
 8016284:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016288:	688e      	ldr	r6, [r1, #8]
 801628a:	429e      	cmp	r6, r3
 801628c:	4682      	mov	sl, r0
 801628e:	460c      	mov	r4, r1
 8016290:	4690      	mov	r8, r2
 8016292:	4699      	mov	r9, r3
 8016294:	d837      	bhi.n	8016306 <__ssputs_r+0x82>
 8016296:	898a      	ldrh	r2, [r1, #12]
 8016298:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801629c:	d031      	beq.n	8016302 <__ssputs_r+0x7e>
 801629e:	6825      	ldr	r5, [r4, #0]
 80162a0:	6909      	ldr	r1, [r1, #16]
 80162a2:	1a6f      	subs	r7, r5, r1
 80162a4:	6965      	ldr	r5, [r4, #20]
 80162a6:	2302      	movs	r3, #2
 80162a8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80162ac:	fb95 f5f3 	sdiv	r5, r5, r3
 80162b0:	f109 0301 	add.w	r3, r9, #1
 80162b4:	443b      	add	r3, r7
 80162b6:	429d      	cmp	r5, r3
 80162b8:	bf38      	it	cc
 80162ba:	461d      	movcc	r5, r3
 80162bc:	0553      	lsls	r3, r2, #21
 80162be:	d530      	bpl.n	8016322 <__ssputs_r+0x9e>
 80162c0:	4629      	mov	r1, r5
 80162c2:	f7ff ff85 	bl	80161d0 <_malloc_r>
 80162c6:	4606      	mov	r6, r0
 80162c8:	b950      	cbnz	r0, 80162e0 <__ssputs_r+0x5c>
 80162ca:	230c      	movs	r3, #12
 80162cc:	f8ca 3000 	str.w	r3, [sl]
 80162d0:	89a3      	ldrh	r3, [r4, #12]
 80162d2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80162d6:	81a3      	strh	r3, [r4, #12]
 80162d8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80162dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80162e0:	463a      	mov	r2, r7
 80162e2:	6921      	ldr	r1, [r4, #16]
 80162e4:	f7fd fdca 	bl	8013e7c <memcpy>
 80162e8:	89a3      	ldrh	r3, [r4, #12]
 80162ea:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80162ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80162f2:	81a3      	strh	r3, [r4, #12]
 80162f4:	6126      	str	r6, [r4, #16]
 80162f6:	6165      	str	r5, [r4, #20]
 80162f8:	443e      	add	r6, r7
 80162fa:	1bed      	subs	r5, r5, r7
 80162fc:	6026      	str	r6, [r4, #0]
 80162fe:	60a5      	str	r5, [r4, #8]
 8016300:	464e      	mov	r6, r9
 8016302:	454e      	cmp	r6, r9
 8016304:	d900      	bls.n	8016308 <__ssputs_r+0x84>
 8016306:	464e      	mov	r6, r9
 8016308:	4632      	mov	r2, r6
 801630a:	4641      	mov	r1, r8
 801630c:	6820      	ldr	r0, [r4, #0]
 801630e:	f000 fb07 	bl	8016920 <memmove>
 8016312:	68a3      	ldr	r3, [r4, #8]
 8016314:	1b9b      	subs	r3, r3, r6
 8016316:	60a3      	str	r3, [r4, #8]
 8016318:	6823      	ldr	r3, [r4, #0]
 801631a:	441e      	add	r6, r3
 801631c:	6026      	str	r6, [r4, #0]
 801631e:	2000      	movs	r0, #0
 8016320:	e7dc      	b.n	80162dc <__ssputs_r+0x58>
 8016322:	462a      	mov	r2, r5
 8016324:	f000 fb17 	bl	8016956 <_realloc_r>
 8016328:	4606      	mov	r6, r0
 801632a:	2800      	cmp	r0, #0
 801632c:	d1e2      	bne.n	80162f4 <__ssputs_r+0x70>
 801632e:	6921      	ldr	r1, [r4, #16]
 8016330:	4650      	mov	r0, sl
 8016332:	f7ff feff 	bl	8016134 <_free_r>
 8016336:	e7c8      	b.n	80162ca <__ssputs_r+0x46>

08016338 <_svfiprintf_r>:
 8016338:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801633c:	461d      	mov	r5, r3
 801633e:	898b      	ldrh	r3, [r1, #12]
 8016340:	061f      	lsls	r7, r3, #24
 8016342:	b09d      	sub	sp, #116	; 0x74
 8016344:	4680      	mov	r8, r0
 8016346:	460c      	mov	r4, r1
 8016348:	4616      	mov	r6, r2
 801634a:	d50f      	bpl.n	801636c <_svfiprintf_r+0x34>
 801634c:	690b      	ldr	r3, [r1, #16]
 801634e:	b96b      	cbnz	r3, 801636c <_svfiprintf_r+0x34>
 8016350:	2140      	movs	r1, #64	; 0x40
 8016352:	f7ff ff3d 	bl	80161d0 <_malloc_r>
 8016356:	6020      	str	r0, [r4, #0]
 8016358:	6120      	str	r0, [r4, #16]
 801635a:	b928      	cbnz	r0, 8016368 <_svfiprintf_r+0x30>
 801635c:	230c      	movs	r3, #12
 801635e:	f8c8 3000 	str.w	r3, [r8]
 8016362:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8016366:	e0c8      	b.n	80164fa <_svfiprintf_r+0x1c2>
 8016368:	2340      	movs	r3, #64	; 0x40
 801636a:	6163      	str	r3, [r4, #20]
 801636c:	2300      	movs	r3, #0
 801636e:	9309      	str	r3, [sp, #36]	; 0x24
 8016370:	2320      	movs	r3, #32
 8016372:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8016376:	2330      	movs	r3, #48	; 0x30
 8016378:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801637c:	9503      	str	r5, [sp, #12]
 801637e:	f04f 0b01 	mov.w	fp, #1
 8016382:	4637      	mov	r7, r6
 8016384:	463d      	mov	r5, r7
 8016386:	f815 3b01 	ldrb.w	r3, [r5], #1
 801638a:	b10b      	cbz	r3, 8016390 <_svfiprintf_r+0x58>
 801638c:	2b25      	cmp	r3, #37	; 0x25
 801638e:	d13e      	bne.n	801640e <_svfiprintf_r+0xd6>
 8016390:	ebb7 0a06 	subs.w	sl, r7, r6
 8016394:	d00b      	beq.n	80163ae <_svfiprintf_r+0x76>
 8016396:	4653      	mov	r3, sl
 8016398:	4632      	mov	r2, r6
 801639a:	4621      	mov	r1, r4
 801639c:	4640      	mov	r0, r8
 801639e:	f7ff ff71 	bl	8016284 <__ssputs_r>
 80163a2:	3001      	adds	r0, #1
 80163a4:	f000 80a4 	beq.w	80164f0 <_svfiprintf_r+0x1b8>
 80163a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80163aa:	4453      	add	r3, sl
 80163ac:	9309      	str	r3, [sp, #36]	; 0x24
 80163ae:	783b      	ldrb	r3, [r7, #0]
 80163b0:	2b00      	cmp	r3, #0
 80163b2:	f000 809d 	beq.w	80164f0 <_svfiprintf_r+0x1b8>
 80163b6:	2300      	movs	r3, #0
 80163b8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80163bc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80163c0:	9304      	str	r3, [sp, #16]
 80163c2:	9307      	str	r3, [sp, #28]
 80163c4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80163c8:	931a      	str	r3, [sp, #104]	; 0x68
 80163ca:	462f      	mov	r7, r5
 80163cc:	2205      	movs	r2, #5
 80163ce:	f817 1b01 	ldrb.w	r1, [r7], #1
 80163d2:	4850      	ldr	r0, [pc, #320]	; (8016514 <_svfiprintf_r+0x1dc>)
 80163d4:	f7e9 fedc 	bl	8000190 <memchr>
 80163d8:	9b04      	ldr	r3, [sp, #16]
 80163da:	b9d0      	cbnz	r0, 8016412 <_svfiprintf_r+0xda>
 80163dc:	06d9      	lsls	r1, r3, #27
 80163de:	bf44      	itt	mi
 80163e0:	2220      	movmi	r2, #32
 80163e2:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80163e6:	071a      	lsls	r2, r3, #28
 80163e8:	bf44      	itt	mi
 80163ea:	222b      	movmi	r2, #43	; 0x2b
 80163ec:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80163f0:	782a      	ldrb	r2, [r5, #0]
 80163f2:	2a2a      	cmp	r2, #42	; 0x2a
 80163f4:	d015      	beq.n	8016422 <_svfiprintf_r+0xea>
 80163f6:	9a07      	ldr	r2, [sp, #28]
 80163f8:	462f      	mov	r7, r5
 80163fa:	2000      	movs	r0, #0
 80163fc:	250a      	movs	r5, #10
 80163fe:	4639      	mov	r1, r7
 8016400:	f811 3b01 	ldrb.w	r3, [r1], #1
 8016404:	3b30      	subs	r3, #48	; 0x30
 8016406:	2b09      	cmp	r3, #9
 8016408:	d94d      	bls.n	80164a6 <_svfiprintf_r+0x16e>
 801640a:	b1b8      	cbz	r0, 801643c <_svfiprintf_r+0x104>
 801640c:	e00f      	b.n	801642e <_svfiprintf_r+0xf6>
 801640e:	462f      	mov	r7, r5
 8016410:	e7b8      	b.n	8016384 <_svfiprintf_r+0x4c>
 8016412:	4a40      	ldr	r2, [pc, #256]	; (8016514 <_svfiprintf_r+0x1dc>)
 8016414:	1a80      	subs	r0, r0, r2
 8016416:	fa0b f000 	lsl.w	r0, fp, r0
 801641a:	4318      	orrs	r0, r3
 801641c:	9004      	str	r0, [sp, #16]
 801641e:	463d      	mov	r5, r7
 8016420:	e7d3      	b.n	80163ca <_svfiprintf_r+0x92>
 8016422:	9a03      	ldr	r2, [sp, #12]
 8016424:	1d11      	adds	r1, r2, #4
 8016426:	6812      	ldr	r2, [r2, #0]
 8016428:	9103      	str	r1, [sp, #12]
 801642a:	2a00      	cmp	r2, #0
 801642c:	db01      	blt.n	8016432 <_svfiprintf_r+0xfa>
 801642e:	9207      	str	r2, [sp, #28]
 8016430:	e004      	b.n	801643c <_svfiprintf_r+0x104>
 8016432:	4252      	negs	r2, r2
 8016434:	f043 0302 	orr.w	r3, r3, #2
 8016438:	9207      	str	r2, [sp, #28]
 801643a:	9304      	str	r3, [sp, #16]
 801643c:	783b      	ldrb	r3, [r7, #0]
 801643e:	2b2e      	cmp	r3, #46	; 0x2e
 8016440:	d10c      	bne.n	801645c <_svfiprintf_r+0x124>
 8016442:	787b      	ldrb	r3, [r7, #1]
 8016444:	2b2a      	cmp	r3, #42	; 0x2a
 8016446:	d133      	bne.n	80164b0 <_svfiprintf_r+0x178>
 8016448:	9b03      	ldr	r3, [sp, #12]
 801644a:	1d1a      	adds	r2, r3, #4
 801644c:	681b      	ldr	r3, [r3, #0]
 801644e:	9203      	str	r2, [sp, #12]
 8016450:	2b00      	cmp	r3, #0
 8016452:	bfb8      	it	lt
 8016454:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8016458:	3702      	adds	r7, #2
 801645a:	9305      	str	r3, [sp, #20]
 801645c:	4d2e      	ldr	r5, [pc, #184]	; (8016518 <_svfiprintf_r+0x1e0>)
 801645e:	7839      	ldrb	r1, [r7, #0]
 8016460:	2203      	movs	r2, #3
 8016462:	4628      	mov	r0, r5
 8016464:	f7e9 fe94 	bl	8000190 <memchr>
 8016468:	b138      	cbz	r0, 801647a <_svfiprintf_r+0x142>
 801646a:	2340      	movs	r3, #64	; 0x40
 801646c:	1b40      	subs	r0, r0, r5
 801646e:	fa03 f000 	lsl.w	r0, r3, r0
 8016472:	9b04      	ldr	r3, [sp, #16]
 8016474:	4303      	orrs	r3, r0
 8016476:	3701      	adds	r7, #1
 8016478:	9304      	str	r3, [sp, #16]
 801647a:	7839      	ldrb	r1, [r7, #0]
 801647c:	4827      	ldr	r0, [pc, #156]	; (801651c <_svfiprintf_r+0x1e4>)
 801647e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8016482:	2206      	movs	r2, #6
 8016484:	1c7e      	adds	r6, r7, #1
 8016486:	f7e9 fe83 	bl	8000190 <memchr>
 801648a:	2800      	cmp	r0, #0
 801648c:	d038      	beq.n	8016500 <_svfiprintf_r+0x1c8>
 801648e:	4b24      	ldr	r3, [pc, #144]	; (8016520 <_svfiprintf_r+0x1e8>)
 8016490:	bb13      	cbnz	r3, 80164d8 <_svfiprintf_r+0x1a0>
 8016492:	9b03      	ldr	r3, [sp, #12]
 8016494:	3307      	adds	r3, #7
 8016496:	f023 0307 	bic.w	r3, r3, #7
 801649a:	3308      	adds	r3, #8
 801649c:	9303      	str	r3, [sp, #12]
 801649e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80164a0:	444b      	add	r3, r9
 80164a2:	9309      	str	r3, [sp, #36]	; 0x24
 80164a4:	e76d      	b.n	8016382 <_svfiprintf_r+0x4a>
 80164a6:	fb05 3202 	mla	r2, r5, r2, r3
 80164aa:	2001      	movs	r0, #1
 80164ac:	460f      	mov	r7, r1
 80164ae:	e7a6      	b.n	80163fe <_svfiprintf_r+0xc6>
 80164b0:	2300      	movs	r3, #0
 80164b2:	3701      	adds	r7, #1
 80164b4:	9305      	str	r3, [sp, #20]
 80164b6:	4619      	mov	r1, r3
 80164b8:	250a      	movs	r5, #10
 80164ba:	4638      	mov	r0, r7
 80164bc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80164c0:	3a30      	subs	r2, #48	; 0x30
 80164c2:	2a09      	cmp	r2, #9
 80164c4:	d903      	bls.n	80164ce <_svfiprintf_r+0x196>
 80164c6:	2b00      	cmp	r3, #0
 80164c8:	d0c8      	beq.n	801645c <_svfiprintf_r+0x124>
 80164ca:	9105      	str	r1, [sp, #20]
 80164cc:	e7c6      	b.n	801645c <_svfiprintf_r+0x124>
 80164ce:	fb05 2101 	mla	r1, r5, r1, r2
 80164d2:	2301      	movs	r3, #1
 80164d4:	4607      	mov	r7, r0
 80164d6:	e7f0      	b.n	80164ba <_svfiprintf_r+0x182>
 80164d8:	ab03      	add	r3, sp, #12
 80164da:	9300      	str	r3, [sp, #0]
 80164dc:	4622      	mov	r2, r4
 80164de:	4b11      	ldr	r3, [pc, #68]	; (8016524 <_svfiprintf_r+0x1ec>)
 80164e0:	a904      	add	r1, sp, #16
 80164e2:	4640      	mov	r0, r8
 80164e4:	f7fd fd72 	bl	8013fcc <_printf_float>
 80164e8:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 80164ec:	4681      	mov	r9, r0
 80164ee:	d1d6      	bne.n	801649e <_svfiprintf_r+0x166>
 80164f0:	89a3      	ldrh	r3, [r4, #12]
 80164f2:	065b      	lsls	r3, r3, #25
 80164f4:	f53f af35 	bmi.w	8016362 <_svfiprintf_r+0x2a>
 80164f8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80164fa:	b01d      	add	sp, #116	; 0x74
 80164fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016500:	ab03      	add	r3, sp, #12
 8016502:	9300      	str	r3, [sp, #0]
 8016504:	4622      	mov	r2, r4
 8016506:	4b07      	ldr	r3, [pc, #28]	; (8016524 <_svfiprintf_r+0x1ec>)
 8016508:	a904      	add	r1, sp, #16
 801650a:	4640      	mov	r0, r8
 801650c:	f7fe f814 	bl	8014538 <_printf_i>
 8016510:	e7ea      	b.n	80164e8 <_svfiprintf_r+0x1b0>
 8016512:	bf00      	nop
 8016514:	08019e1c 	.word	0x08019e1c
 8016518:	08019e22 	.word	0x08019e22
 801651c:	08019e26 	.word	0x08019e26
 8016520:	08013fcd 	.word	0x08013fcd
 8016524:	08016285 	.word	0x08016285

08016528 <__sfputc_r>:
 8016528:	6893      	ldr	r3, [r2, #8]
 801652a:	3b01      	subs	r3, #1
 801652c:	2b00      	cmp	r3, #0
 801652e:	b410      	push	{r4}
 8016530:	6093      	str	r3, [r2, #8]
 8016532:	da08      	bge.n	8016546 <__sfputc_r+0x1e>
 8016534:	6994      	ldr	r4, [r2, #24]
 8016536:	42a3      	cmp	r3, r4
 8016538:	db01      	blt.n	801653e <__sfputc_r+0x16>
 801653a:	290a      	cmp	r1, #10
 801653c:	d103      	bne.n	8016546 <__sfputc_r+0x1e>
 801653e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8016542:	f7fe ba15 	b.w	8014970 <__swbuf_r>
 8016546:	6813      	ldr	r3, [r2, #0]
 8016548:	1c58      	adds	r0, r3, #1
 801654a:	6010      	str	r0, [r2, #0]
 801654c:	7019      	strb	r1, [r3, #0]
 801654e:	4608      	mov	r0, r1
 8016550:	f85d 4b04 	ldr.w	r4, [sp], #4
 8016554:	4770      	bx	lr

08016556 <__sfputs_r>:
 8016556:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016558:	4606      	mov	r6, r0
 801655a:	460f      	mov	r7, r1
 801655c:	4614      	mov	r4, r2
 801655e:	18d5      	adds	r5, r2, r3
 8016560:	42ac      	cmp	r4, r5
 8016562:	d101      	bne.n	8016568 <__sfputs_r+0x12>
 8016564:	2000      	movs	r0, #0
 8016566:	e007      	b.n	8016578 <__sfputs_r+0x22>
 8016568:	463a      	mov	r2, r7
 801656a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801656e:	4630      	mov	r0, r6
 8016570:	f7ff ffda 	bl	8016528 <__sfputc_r>
 8016574:	1c43      	adds	r3, r0, #1
 8016576:	d1f3      	bne.n	8016560 <__sfputs_r+0xa>
 8016578:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801657c <_vfiprintf_r>:
 801657c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016580:	460c      	mov	r4, r1
 8016582:	b09d      	sub	sp, #116	; 0x74
 8016584:	4617      	mov	r7, r2
 8016586:	461d      	mov	r5, r3
 8016588:	4606      	mov	r6, r0
 801658a:	b118      	cbz	r0, 8016594 <_vfiprintf_r+0x18>
 801658c:	6983      	ldr	r3, [r0, #24]
 801658e:	b90b      	cbnz	r3, 8016594 <_vfiprintf_r+0x18>
 8016590:	f7ff f9e2 	bl	8015958 <__sinit>
 8016594:	4b7c      	ldr	r3, [pc, #496]	; (8016788 <_vfiprintf_r+0x20c>)
 8016596:	429c      	cmp	r4, r3
 8016598:	d158      	bne.n	801664c <_vfiprintf_r+0xd0>
 801659a:	6874      	ldr	r4, [r6, #4]
 801659c:	89a3      	ldrh	r3, [r4, #12]
 801659e:	0718      	lsls	r0, r3, #28
 80165a0:	d55e      	bpl.n	8016660 <_vfiprintf_r+0xe4>
 80165a2:	6923      	ldr	r3, [r4, #16]
 80165a4:	2b00      	cmp	r3, #0
 80165a6:	d05b      	beq.n	8016660 <_vfiprintf_r+0xe4>
 80165a8:	2300      	movs	r3, #0
 80165aa:	9309      	str	r3, [sp, #36]	; 0x24
 80165ac:	2320      	movs	r3, #32
 80165ae:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80165b2:	2330      	movs	r3, #48	; 0x30
 80165b4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80165b8:	9503      	str	r5, [sp, #12]
 80165ba:	f04f 0b01 	mov.w	fp, #1
 80165be:	46b8      	mov	r8, r7
 80165c0:	4645      	mov	r5, r8
 80165c2:	f815 3b01 	ldrb.w	r3, [r5], #1
 80165c6:	b10b      	cbz	r3, 80165cc <_vfiprintf_r+0x50>
 80165c8:	2b25      	cmp	r3, #37	; 0x25
 80165ca:	d154      	bne.n	8016676 <_vfiprintf_r+0xfa>
 80165cc:	ebb8 0a07 	subs.w	sl, r8, r7
 80165d0:	d00b      	beq.n	80165ea <_vfiprintf_r+0x6e>
 80165d2:	4653      	mov	r3, sl
 80165d4:	463a      	mov	r2, r7
 80165d6:	4621      	mov	r1, r4
 80165d8:	4630      	mov	r0, r6
 80165da:	f7ff ffbc 	bl	8016556 <__sfputs_r>
 80165de:	3001      	adds	r0, #1
 80165e0:	f000 80c2 	beq.w	8016768 <_vfiprintf_r+0x1ec>
 80165e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80165e6:	4453      	add	r3, sl
 80165e8:	9309      	str	r3, [sp, #36]	; 0x24
 80165ea:	f898 3000 	ldrb.w	r3, [r8]
 80165ee:	2b00      	cmp	r3, #0
 80165f0:	f000 80ba 	beq.w	8016768 <_vfiprintf_r+0x1ec>
 80165f4:	2300      	movs	r3, #0
 80165f6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80165fa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80165fe:	9304      	str	r3, [sp, #16]
 8016600:	9307      	str	r3, [sp, #28]
 8016602:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8016606:	931a      	str	r3, [sp, #104]	; 0x68
 8016608:	46a8      	mov	r8, r5
 801660a:	2205      	movs	r2, #5
 801660c:	f818 1b01 	ldrb.w	r1, [r8], #1
 8016610:	485e      	ldr	r0, [pc, #376]	; (801678c <_vfiprintf_r+0x210>)
 8016612:	f7e9 fdbd 	bl	8000190 <memchr>
 8016616:	9b04      	ldr	r3, [sp, #16]
 8016618:	bb78      	cbnz	r0, 801667a <_vfiprintf_r+0xfe>
 801661a:	06d9      	lsls	r1, r3, #27
 801661c:	bf44      	itt	mi
 801661e:	2220      	movmi	r2, #32
 8016620:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8016624:	071a      	lsls	r2, r3, #28
 8016626:	bf44      	itt	mi
 8016628:	222b      	movmi	r2, #43	; 0x2b
 801662a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 801662e:	782a      	ldrb	r2, [r5, #0]
 8016630:	2a2a      	cmp	r2, #42	; 0x2a
 8016632:	d02a      	beq.n	801668a <_vfiprintf_r+0x10e>
 8016634:	9a07      	ldr	r2, [sp, #28]
 8016636:	46a8      	mov	r8, r5
 8016638:	2000      	movs	r0, #0
 801663a:	250a      	movs	r5, #10
 801663c:	4641      	mov	r1, r8
 801663e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8016642:	3b30      	subs	r3, #48	; 0x30
 8016644:	2b09      	cmp	r3, #9
 8016646:	d969      	bls.n	801671c <_vfiprintf_r+0x1a0>
 8016648:	b360      	cbz	r0, 80166a4 <_vfiprintf_r+0x128>
 801664a:	e024      	b.n	8016696 <_vfiprintf_r+0x11a>
 801664c:	4b50      	ldr	r3, [pc, #320]	; (8016790 <_vfiprintf_r+0x214>)
 801664e:	429c      	cmp	r4, r3
 8016650:	d101      	bne.n	8016656 <_vfiprintf_r+0xda>
 8016652:	68b4      	ldr	r4, [r6, #8]
 8016654:	e7a2      	b.n	801659c <_vfiprintf_r+0x20>
 8016656:	4b4f      	ldr	r3, [pc, #316]	; (8016794 <_vfiprintf_r+0x218>)
 8016658:	429c      	cmp	r4, r3
 801665a:	bf08      	it	eq
 801665c:	68f4      	ldreq	r4, [r6, #12]
 801665e:	e79d      	b.n	801659c <_vfiprintf_r+0x20>
 8016660:	4621      	mov	r1, r4
 8016662:	4630      	mov	r0, r6
 8016664:	f7fe f9d6 	bl	8014a14 <__swsetup_r>
 8016668:	2800      	cmp	r0, #0
 801666a:	d09d      	beq.n	80165a8 <_vfiprintf_r+0x2c>
 801666c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8016670:	b01d      	add	sp, #116	; 0x74
 8016672:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016676:	46a8      	mov	r8, r5
 8016678:	e7a2      	b.n	80165c0 <_vfiprintf_r+0x44>
 801667a:	4a44      	ldr	r2, [pc, #272]	; (801678c <_vfiprintf_r+0x210>)
 801667c:	1a80      	subs	r0, r0, r2
 801667e:	fa0b f000 	lsl.w	r0, fp, r0
 8016682:	4318      	orrs	r0, r3
 8016684:	9004      	str	r0, [sp, #16]
 8016686:	4645      	mov	r5, r8
 8016688:	e7be      	b.n	8016608 <_vfiprintf_r+0x8c>
 801668a:	9a03      	ldr	r2, [sp, #12]
 801668c:	1d11      	adds	r1, r2, #4
 801668e:	6812      	ldr	r2, [r2, #0]
 8016690:	9103      	str	r1, [sp, #12]
 8016692:	2a00      	cmp	r2, #0
 8016694:	db01      	blt.n	801669a <_vfiprintf_r+0x11e>
 8016696:	9207      	str	r2, [sp, #28]
 8016698:	e004      	b.n	80166a4 <_vfiprintf_r+0x128>
 801669a:	4252      	negs	r2, r2
 801669c:	f043 0302 	orr.w	r3, r3, #2
 80166a0:	9207      	str	r2, [sp, #28]
 80166a2:	9304      	str	r3, [sp, #16]
 80166a4:	f898 3000 	ldrb.w	r3, [r8]
 80166a8:	2b2e      	cmp	r3, #46	; 0x2e
 80166aa:	d10e      	bne.n	80166ca <_vfiprintf_r+0x14e>
 80166ac:	f898 3001 	ldrb.w	r3, [r8, #1]
 80166b0:	2b2a      	cmp	r3, #42	; 0x2a
 80166b2:	d138      	bne.n	8016726 <_vfiprintf_r+0x1aa>
 80166b4:	9b03      	ldr	r3, [sp, #12]
 80166b6:	1d1a      	adds	r2, r3, #4
 80166b8:	681b      	ldr	r3, [r3, #0]
 80166ba:	9203      	str	r2, [sp, #12]
 80166bc:	2b00      	cmp	r3, #0
 80166be:	bfb8      	it	lt
 80166c0:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80166c4:	f108 0802 	add.w	r8, r8, #2
 80166c8:	9305      	str	r3, [sp, #20]
 80166ca:	4d33      	ldr	r5, [pc, #204]	; (8016798 <_vfiprintf_r+0x21c>)
 80166cc:	f898 1000 	ldrb.w	r1, [r8]
 80166d0:	2203      	movs	r2, #3
 80166d2:	4628      	mov	r0, r5
 80166d4:	f7e9 fd5c 	bl	8000190 <memchr>
 80166d8:	b140      	cbz	r0, 80166ec <_vfiprintf_r+0x170>
 80166da:	2340      	movs	r3, #64	; 0x40
 80166dc:	1b40      	subs	r0, r0, r5
 80166de:	fa03 f000 	lsl.w	r0, r3, r0
 80166e2:	9b04      	ldr	r3, [sp, #16]
 80166e4:	4303      	orrs	r3, r0
 80166e6:	f108 0801 	add.w	r8, r8, #1
 80166ea:	9304      	str	r3, [sp, #16]
 80166ec:	f898 1000 	ldrb.w	r1, [r8]
 80166f0:	482a      	ldr	r0, [pc, #168]	; (801679c <_vfiprintf_r+0x220>)
 80166f2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80166f6:	2206      	movs	r2, #6
 80166f8:	f108 0701 	add.w	r7, r8, #1
 80166fc:	f7e9 fd48 	bl	8000190 <memchr>
 8016700:	2800      	cmp	r0, #0
 8016702:	d037      	beq.n	8016774 <_vfiprintf_r+0x1f8>
 8016704:	4b26      	ldr	r3, [pc, #152]	; (80167a0 <_vfiprintf_r+0x224>)
 8016706:	bb1b      	cbnz	r3, 8016750 <_vfiprintf_r+0x1d4>
 8016708:	9b03      	ldr	r3, [sp, #12]
 801670a:	3307      	adds	r3, #7
 801670c:	f023 0307 	bic.w	r3, r3, #7
 8016710:	3308      	adds	r3, #8
 8016712:	9303      	str	r3, [sp, #12]
 8016714:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016716:	444b      	add	r3, r9
 8016718:	9309      	str	r3, [sp, #36]	; 0x24
 801671a:	e750      	b.n	80165be <_vfiprintf_r+0x42>
 801671c:	fb05 3202 	mla	r2, r5, r2, r3
 8016720:	2001      	movs	r0, #1
 8016722:	4688      	mov	r8, r1
 8016724:	e78a      	b.n	801663c <_vfiprintf_r+0xc0>
 8016726:	2300      	movs	r3, #0
 8016728:	f108 0801 	add.w	r8, r8, #1
 801672c:	9305      	str	r3, [sp, #20]
 801672e:	4619      	mov	r1, r3
 8016730:	250a      	movs	r5, #10
 8016732:	4640      	mov	r0, r8
 8016734:	f810 2b01 	ldrb.w	r2, [r0], #1
 8016738:	3a30      	subs	r2, #48	; 0x30
 801673a:	2a09      	cmp	r2, #9
 801673c:	d903      	bls.n	8016746 <_vfiprintf_r+0x1ca>
 801673e:	2b00      	cmp	r3, #0
 8016740:	d0c3      	beq.n	80166ca <_vfiprintf_r+0x14e>
 8016742:	9105      	str	r1, [sp, #20]
 8016744:	e7c1      	b.n	80166ca <_vfiprintf_r+0x14e>
 8016746:	fb05 2101 	mla	r1, r5, r1, r2
 801674a:	2301      	movs	r3, #1
 801674c:	4680      	mov	r8, r0
 801674e:	e7f0      	b.n	8016732 <_vfiprintf_r+0x1b6>
 8016750:	ab03      	add	r3, sp, #12
 8016752:	9300      	str	r3, [sp, #0]
 8016754:	4622      	mov	r2, r4
 8016756:	4b13      	ldr	r3, [pc, #76]	; (80167a4 <_vfiprintf_r+0x228>)
 8016758:	a904      	add	r1, sp, #16
 801675a:	4630      	mov	r0, r6
 801675c:	f7fd fc36 	bl	8013fcc <_printf_float>
 8016760:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8016764:	4681      	mov	r9, r0
 8016766:	d1d5      	bne.n	8016714 <_vfiprintf_r+0x198>
 8016768:	89a3      	ldrh	r3, [r4, #12]
 801676a:	065b      	lsls	r3, r3, #25
 801676c:	f53f af7e 	bmi.w	801666c <_vfiprintf_r+0xf0>
 8016770:	9809      	ldr	r0, [sp, #36]	; 0x24
 8016772:	e77d      	b.n	8016670 <_vfiprintf_r+0xf4>
 8016774:	ab03      	add	r3, sp, #12
 8016776:	9300      	str	r3, [sp, #0]
 8016778:	4622      	mov	r2, r4
 801677a:	4b0a      	ldr	r3, [pc, #40]	; (80167a4 <_vfiprintf_r+0x228>)
 801677c:	a904      	add	r1, sp, #16
 801677e:	4630      	mov	r0, r6
 8016780:	f7fd feda 	bl	8014538 <_printf_i>
 8016784:	e7ec      	b.n	8016760 <_vfiprintf_r+0x1e4>
 8016786:	bf00      	nop
 8016788:	08019cdc 	.word	0x08019cdc
 801678c:	08019e1c 	.word	0x08019e1c
 8016790:	08019cfc 	.word	0x08019cfc
 8016794:	08019cbc 	.word	0x08019cbc
 8016798:	08019e22 	.word	0x08019e22
 801679c:	08019e26 	.word	0x08019e26
 80167a0:	08013fcd 	.word	0x08013fcd
 80167a4:	08016557 	.word	0x08016557

080167a8 <_sbrk_r>:
 80167a8:	b538      	push	{r3, r4, r5, lr}
 80167aa:	4c06      	ldr	r4, [pc, #24]	; (80167c4 <_sbrk_r+0x1c>)
 80167ac:	2300      	movs	r3, #0
 80167ae:	4605      	mov	r5, r0
 80167b0:	4608      	mov	r0, r1
 80167b2:	6023      	str	r3, [r4, #0]
 80167b4:	f7f0 fdb6 	bl	8007324 <_sbrk>
 80167b8:	1c43      	adds	r3, r0, #1
 80167ba:	d102      	bne.n	80167c2 <_sbrk_r+0x1a>
 80167bc:	6823      	ldr	r3, [r4, #0]
 80167be:	b103      	cbz	r3, 80167c2 <_sbrk_r+0x1a>
 80167c0:	602b      	str	r3, [r5, #0]
 80167c2:	bd38      	pop	{r3, r4, r5, pc}
 80167c4:	2002e408 	.word	0x2002e408

080167c8 <__sread>:
 80167c8:	b510      	push	{r4, lr}
 80167ca:	460c      	mov	r4, r1
 80167cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80167d0:	f000 f8e8 	bl	80169a4 <_read_r>
 80167d4:	2800      	cmp	r0, #0
 80167d6:	bfab      	itete	ge
 80167d8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80167da:	89a3      	ldrhlt	r3, [r4, #12]
 80167dc:	181b      	addge	r3, r3, r0
 80167de:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80167e2:	bfac      	ite	ge
 80167e4:	6563      	strge	r3, [r4, #84]	; 0x54
 80167e6:	81a3      	strhlt	r3, [r4, #12]
 80167e8:	bd10      	pop	{r4, pc}

080167ea <__swrite>:
 80167ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80167ee:	461f      	mov	r7, r3
 80167f0:	898b      	ldrh	r3, [r1, #12]
 80167f2:	05db      	lsls	r3, r3, #23
 80167f4:	4605      	mov	r5, r0
 80167f6:	460c      	mov	r4, r1
 80167f8:	4616      	mov	r6, r2
 80167fa:	d505      	bpl.n	8016808 <__swrite+0x1e>
 80167fc:	2302      	movs	r3, #2
 80167fe:	2200      	movs	r2, #0
 8016800:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016804:	f000 f868 	bl	80168d8 <_lseek_r>
 8016808:	89a3      	ldrh	r3, [r4, #12]
 801680a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801680e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8016812:	81a3      	strh	r3, [r4, #12]
 8016814:	4632      	mov	r2, r6
 8016816:	463b      	mov	r3, r7
 8016818:	4628      	mov	r0, r5
 801681a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801681e:	f000 b817 	b.w	8016850 <_write_r>

08016822 <__sseek>:
 8016822:	b510      	push	{r4, lr}
 8016824:	460c      	mov	r4, r1
 8016826:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801682a:	f000 f855 	bl	80168d8 <_lseek_r>
 801682e:	1c43      	adds	r3, r0, #1
 8016830:	89a3      	ldrh	r3, [r4, #12]
 8016832:	bf15      	itete	ne
 8016834:	6560      	strne	r0, [r4, #84]	; 0x54
 8016836:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801683a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801683e:	81a3      	strheq	r3, [r4, #12]
 8016840:	bf18      	it	ne
 8016842:	81a3      	strhne	r3, [r4, #12]
 8016844:	bd10      	pop	{r4, pc}

08016846 <__sclose>:
 8016846:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801684a:	f000 b813 	b.w	8016874 <_close_r>
	...

08016850 <_write_r>:
 8016850:	b538      	push	{r3, r4, r5, lr}
 8016852:	4c07      	ldr	r4, [pc, #28]	; (8016870 <_write_r+0x20>)
 8016854:	4605      	mov	r5, r0
 8016856:	4608      	mov	r0, r1
 8016858:	4611      	mov	r1, r2
 801685a:	2200      	movs	r2, #0
 801685c:	6022      	str	r2, [r4, #0]
 801685e:	461a      	mov	r2, r3
 8016860:	f7f8 fb80 	bl	800ef64 <_write>
 8016864:	1c43      	adds	r3, r0, #1
 8016866:	d102      	bne.n	801686e <_write_r+0x1e>
 8016868:	6823      	ldr	r3, [r4, #0]
 801686a:	b103      	cbz	r3, 801686e <_write_r+0x1e>
 801686c:	602b      	str	r3, [r5, #0]
 801686e:	bd38      	pop	{r3, r4, r5, pc}
 8016870:	2002e408 	.word	0x2002e408

08016874 <_close_r>:
 8016874:	b538      	push	{r3, r4, r5, lr}
 8016876:	4c06      	ldr	r4, [pc, #24]	; (8016890 <_close_r+0x1c>)
 8016878:	2300      	movs	r3, #0
 801687a:	4605      	mov	r5, r0
 801687c:	4608      	mov	r0, r1
 801687e:	6023      	str	r3, [r4, #0]
 8016880:	f7f0 fd1b 	bl	80072ba <_close>
 8016884:	1c43      	adds	r3, r0, #1
 8016886:	d102      	bne.n	801688e <_close_r+0x1a>
 8016888:	6823      	ldr	r3, [r4, #0]
 801688a:	b103      	cbz	r3, 801688e <_close_r+0x1a>
 801688c:	602b      	str	r3, [r5, #0]
 801688e:	bd38      	pop	{r3, r4, r5, pc}
 8016890:	2002e408 	.word	0x2002e408

08016894 <_fstat_r>:
 8016894:	b538      	push	{r3, r4, r5, lr}
 8016896:	4c07      	ldr	r4, [pc, #28]	; (80168b4 <_fstat_r+0x20>)
 8016898:	2300      	movs	r3, #0
 801689a:	4605      	mov	r5, r0
 801689c:	4608      	mov	r0, r1
 801689e:	4611      	mov	r1, r2
 80168a0:	6023      	str	r3, [r4, #0]
 80168a2:	f7f0 fd16 	bl	80072d2 <_fstat>
 80168a6:	1c43      	adds	r3, r0, #1
 80168a8:	d102      	bne.n	80168b0 <_fstat_r+0x1c>
 80168aa:	6823      	ldr	r3, [r4, #0]
 80168ac:	b103      	cbz	r3, 80168b0 <_fstat_r+0x1c>
 80168ae:	602b      	str	r3, [r5, #0]
 80168b0:	bd38      	pop	{r3, r4, r5, pc}
 80168b2:	bf00      	nop
 80168b4:	2002e408 	.word	0x2002e408

080168b8 <_isatty_r>:
 80168b8:	b538      	push	{r3, r4, r5, lr}
 80168ba:	4c06      	ldr	r4, [pc, #24]	; (80168d4 <_isatty_r+0x1c>)
 80168bc:	2300      	movs	r3, #0
 80168be:	4605      	mov	r5, r0
 80168c0:	4608      	mov	r0, r1
 80168c2:	6023      	str	r3, [r4, #0]
 80168c4:	f7f0 fd15 	bl	80072f2 <_isatty>
 80168c8:	1c43      	adds	r3, r0, #1
 80168ca:	d102      	bne.n	80168d2 <_isatty_r+0x1a>
 80168cc:	6823      	ldr	r3, [r4, #0]
 80168ce:	b103      	cbz	r3, 80168d2 <_isatty_r+0x1a>
 80168d0:	602b      	str	r3, [r5, #0]
 80168d2:	bd38      	pop	{r3, r4, r5, pc}
 80168d4:	2002e408 	.word	0x2002e408

080168d8 <_lseek_r>:
 80168d8:	b538      	push	{r3, r4, r5, lr}
 80168da:	4c07      	ldr	r4, [pc, #28]	; (80168f8 <_lseek_r+0x20>)
 80168dc:	4605      	mov	r5, r0
 80168de:	4608      	mov	r0, r1
 80168e0:	4611      	mov	r1, r2
 80168e2:	2200      	movs	r2, #0
 80168e4:	6022      	str	r2, [r4, #0]
 80168e6:	461a      	mov	r2, r3
 80168e8:	f7f0 fd0e 	bl	8007308 <_lseek>
 80168ec:	1c43      	adds	r3, r0, #1
 80168ee:	d102      	bne.n	80168f6 <_lseek_r+0x1e>
 80168f0:	6823      	ldr	r3, [r4, #0]
 80168f2:	b103      	cbz	r3, 80168f6 <_lseek_r+0x1e>
 80168f4:	602b      	str	r3, [r5, #0]
 80168f6:	bd38      	pop	{r3, r4, r5, pc}
 80168f8:	2002e408 	.word	0x2002e408

080168fc <__ascii_mbtowc>:
 80168fc:	b082      	sub	sp, #8
 80168fe:	b901      	cbnz	r1, 8016902 <__ascii_mbtowc+0x6>
 8016900:	a901      	add	r1, sp, #4
 8016902:	b142      	cbz	r2, 8016916 <__ascii_mbtowc+0x1a>
 8016904:	b14b      	cbz	r3, 801691a <__ascii_mbtowc+0x1e>
 8016906:	7813      	ldrb	r3, [r2, #0]
 8016908:	600b      	str	r3, [r1, #0]
 801690a:	7812      	ldrb	r2, [r2, #0]
 801690c:	1c10      	adds	r0, r2, #0
 801690e:	bf18      	it	ne
 8016910:	2001      	movne	r0, #1
 8016912:	b002      	add	sp, #8
 8016914:	4770      	bx	lr
 8016916:	4610      	mov	r0, r2
 8016918:	e7fb      	b.n	8016912 <__ascii_mbtowc+0x16>
 801691a:	f06f 0001 	mvn.w	r0, #1
 801691e:	e7f8      	b.n	8016912 <__ascii_mbtowc+0x16>

08016920 <memmove>:
 8016920:	4288      	cmp	r0, r1
 8016922:	b510      	push	{r4, lr}
 8016924:	eb01 0302 	add.w	r3, r1, r2
 8016928:	d807      	bhi.n	801693a <memmove+0x1a>
 801692a:	1e42      	subs	r2, r0, #1
 801692c:	4299      	cmp	r1, r3
 801692e:	d00a      	beq.n	8016946 <memmove+0x26>
 8016930:	f811 4b01 	ldrb.w	r4, [r1], #1
 8016934:	f802 4f01 	strb.w	r4, [r2, #1]!
 8016938:	e7f8      	b.n	801692c <memmove+0xc>
 801693a:	4283      	cmp	r3, r0
 801693c:	d9f5      	bls.n	801692a <memmove+0xa>
 801693e:	1881      	adds	r1, r0, r2
 8016940:	1ad2      	subs	r2, r2, r3
 8016942:	42d3      	cmn	r3, r2
 8016944:	d100      	bne.n	8016948 <memmove+0x28>
 8016946:	bd10      	pop	{r4, pc}
 8016948:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801694c:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8016950:	e7f7      	b.n	8016942 <memmove+0x22>

08016952 <__malloc_lock>:
 8016952:	4770      	bx	lr

08016954 <__malloc_unlock>:
 8016954:	4770      	bx	lr

08016956 <_realloc_r>:
 8016956:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016958:	4607      	mov	r7, r0
 801695a:	4614      	mov	r4, r2
 801695c:	460e      	mov	r6, r1
 801695e:	b921      	cbnz	r1, 801696a <_realloc_r+0x14>
 8016960:	4611      	mov	r1, r2
 8016962:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8016966:	f7ff bc33 	b.w	80161d0 <_malloc_r>
 801696a:	b922      	cbnz	r2, 8016976 <_realloc_r+0x20>
 801696c:	f7ff fbe2 	bl	8016134 <_free_r>
 8016970:	4625      	mov	r5, r4
 8016972:	4628      	mov	r0, r5
 8016974:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016976:	f000 f834 	bl	80169e2 <_malloc_usable_size_r>
 801697a:	42a0      	cmp	r0, r4
 801697c:	d20f      	bcs.n	801699e <_realloc_r+0x48>
 801697e:	4621      	mov	r1, r4
 8016980:	4638      	mov	r0, r7
 8016982:	f7ff fc25 	bl	80161d0 <_malloc_r>
 8016986:	4605      	mov	r5, r0
 8016988:	2800      	cmp	r0, #0
 801698a:	d0f2      	beq.n	8016972 <_realloc_r+0x1c>
 801698c:	4631      	mov	r1, r6
 801698e:	4622      	mov	r2, r4
 8016990:	f7fd fa74 	bl	8013e7c <memcpy>
 8016994:	4631      	mov	r1, r6
 8016996:	4638      	mov	r0, r7
 8016998:	f7ff fbcc 	bl	8016134 <_free_r>
 801699c:	e7e9      	b.n	8016972 <_realloc_r+0x1c>
 801699e:	4635      	mov	r5, r6
 80169a0:	e7e7      	b.n	8016972 <_realloc_r+0x1c>
	...

080169a4 <_read_r>:
 80169a4:	b538      	push	{r3, r4, r5, lr}
 80169a6:	4c07      	ldr	r4, [pc, #28]	; (80169c4 <_read_r+0x20>)
 80169a8:	4605      	mov	r5, r0
 80169aa:	4608      	mov	r0, r1
 80169ac:	4611      	mov	r1, r2
 80169ae:	2200      	movs	r2, #0
 80169b0:	6022      	str	r2, [r4, #0]
 80169b2:	461a      	mov	r2, r3
 80169b4:	f7f0 fc64 	bl	8007280 <_read>
 80169b8:	1c43      	adds	r3, r0, #1
 80169ba:	d102      	bne.n	80169c2 <_read_r+0x1e>
 80169bc:	6823      	ldr	r3, [r4, #0]
 80169be:	b103      	cbz	r3, 80169c2 <_read_r+0x1e>
 80169c0:	602b      	str	r3, [r5, #0]
 80169c2:	bd38      	pop	{r3, r4, r5, pc}
 80169c4:	2002e408 	.word	0x2002e408

080169c8 <__ascii_wctomb>:
 80169c8:	b149      	cbz	r1, 80169de <__ascii_wctomb+0x16>
 80169ca:	2aff      	cmp	r2, #255	; 0xff
 80169cc:	bf85      	ittet	hi
 80169ce:	238a      	movhi	r3, #138	; 0x8a
 80169d0:	6003      	strhi	r3, [r0, #0]
 80169d2:	700a      	strbls	r2, [r1, #0]
 80169d4:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 80169d8:	bf98      	it	ls
 80169da:	2001      	movls	r0, #1
 80169dc:	4770      	bx	lr
 80169de:	4608      	mov	r0, r1
 80169e0:	4770      	bx	lr

080169e2 <_malloc_usable_size_r>:
 80169e2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80169e6:	1f18      	subs	r0, r3, #4
 80169e8:	2b00      	cmp	r3, #0
 80169ea:	bfbc      	itt	lt
 80169ec:	580b      	ldrlt	r3, [r1, r0]
 80169ee:	18c0      	addlt	r0, r0, r3
 80169f0:	4770      	bx	lr
	...

080169f4 <round>:
 80169f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80169f6:	ec57 6b10 	vmov	r6, r7, d0
 80169fa:	f3c7 500a 	ubfx	r0, r7, #20, #11
 80169fe:	f2a0 34ff 	subw	r4, r0, #1023	; 0x3ff
 8016a02:	2c13      	cmp	r4, #19
 8016a04:	463b      	mov	r3, r7
 8016a06:	463d      	mov	r5, r7
 8016a08:	dc17      	bgt.n	8016a3a <round+0x46>
 8016a0a:	2c00      	cmp	r4, #0
 8016a0c:	da09      	bge.n	8016a22 <round+0x2e>
 8016a0e:	3401      	adds	r4, #1
 8016a10:	f007 4300 	and.w	r3, r7, #2147483648	; 0x80000000
 8016a14:	d103      	bne.n	8016a1e <round+0x2a>
 8016a16:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8016a1a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8016a1e:	2100      	movs	r1, #0
 8016a20:	e02c      	b.n	8016a7c <round+0x88>
 8016a22:	4a18      	ldr	r2, [pc, #96]	; (8016a84 <round+0x90>)
 8016a24:	4122      	asrs	r2, r4
 8016a26:	4217      	tst	r7, r2
 8016a28:	d100      	bne.n	8016a2c <round+0x38>
 8016a2a:	b19e      	cbz	r6, 8016a54 <round+0x60>
 8016a2c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8016a30:	4123      	asrs	r3, r4
 8016a32:	442b      	add	r3, r5
 8016a34:	ea23 0302 	bic.w	r3, r3, r2
 8016a38:	e7f1      	b.n	8016a1e <round+0x2a>
 8016a3a:	2c33      	cmp	r4, #51	; 0x33
 8016a3c:	dd0d      	ble.n	8016a5a <round+0x66>
 8016a3e:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 8016a42:	d107      	bne.n	8016a54 <round+0x60>
 8016a44:	4630      	mov	r0, r6
 8016a46:	4639      	mov	r1, r7
 8016a48:	ee10 2a10 	vmov	r2, s0
 8016a4c:	f7e9 fbf6 	bl	800023c <__adddf3>
 8016a50:	4606      	mov	r6, r0
 8016a52:	460f      	mov	r7, r1
 8016a54:	ec47 6b10 	vmov	d0, r6, r7
 8016a58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016a5a:	f2a0 4213 	subw	r2, r0, #1043	; 0x413
 8016a5e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8016a62:	40d0      	lsrs	r0, r2
 8016a64:	4206      	tst	r6, r0
 8016a66:	d0f5      	beq.n	8016a54 <round+0x60>
 8016a68:	2201      	movs	r2, #1
 8016a6a:	f1c4 0433 	rsb	r4, r4, #51	; 0x33
 8016a6e:	fa02 f404 	lsl.w	r4, r2, r4
 8016a72:	1931      	adds	r1, r6, r4
 8016a74:	bf28      	it	cs
 8016a76:	189b      	addcs	r3, r3, r2
 8016a78:	ea21 0100 	bic.w	r1, r1, r0
 8016a7c:	461f      	mov	r7, r3
 8016a7e:	460e      	mov	r6, r1
 8016a80:	e7e8      	b.n	8016a54 <round+0x60>
 8016a82:	bf00      	nop
 8016a84:	000fffff 	.word	0x000fffff

08016a88 <pow>:
 8016a88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016a8c:	ed2d 8b04 	vpush	{d8-d9}
 8016a90:	f8df 92d0 	ldr.w	r9, [pc, #720]	; 8016d64 <pow+0x2dc>
 8016a94:	b08d      	sub	sp, #52	; 0x34
 8016a96:	ec57 6b10 	vmov	r6, r7, d0
 8016a9a:	ec55 4b11 	vmov	r4, r5, d1
 8016a9e:	f000 f963 	bl	8016d68 <__ieee754_pow>
 8016aa2:	f999 3000 	ldrsb.w	r3, [r9]
 8016aa6:	9300      	str	r3, [sp, #0]
 8016aa8:	3301      	adds	r3, #1
 8016aaa:	eeb0 8a40 	vmov.f32	s16, s0
 8016aae:	eef0 8a60 	vmov.f32	s17, s1
 8016ab2:	46c8      	mov	r8, r9
 8016ab4:	d05f      	beq.n	8016b76 <pow+0xee>
 8016ab6:	4622      	mov	r2, r4
 8016ab8:	462b      	mov	r3, r5
 8016aba:	4620      	mov	r0, r4
 8016abc:	4629      	mov	r1, r5
 8016abe:	f7ea f80d 	bl	8000adc <__aeabi_dcmpun>
 8016ac2:	4683      	mov	fp, r0
 8016ac4:	2800      	cmp	r0, #0
 8016ac6:	d156      	bne.n	8016b76 <pow+0xee>
 8016ac8:	4632      	mov	r2, r6
 8016aca:	463b      	mov	r3, r7
 8016acc:	4630      	mov	r0, r6
 8016ace:	4639      	mov	r1, r7
 8016ad0:	f7ea f804 	bl	8000adc <__aeabi_dcmpun>
 8016ad4:	9001      	str	r0, [sp, #4]
 8016ad6:	b1e8      	cbz	r0, 8016b14 <pow+0x8c>
 8016ad8:	2200      	movs	r2, #0
 8016ada:	2300      	movs	r3, #0
 8016adc:	4620      	mov	r0, r4
 8016ade:	4629      	mov	r1, r5
 8016ae0:	f7e9 ffca 	bl	8000a78 <__aeabi_dcmpeq>
 8016ae4:	2800      	cmp	r0, #0
 8016ae6:	d046      	beq.n	8016b76 <pow+0xee>
 8016ae8:	2301      	movs	r3, #1
 8016aea:	9302      	str	r3, [sp, #8]
 8016aec:	4b96      	ldr	r3, [pc, #600]	; (8016d48 <pow+0x2c0>)
 8016aee:	9303      	str	r3, [sp, #12]
 8016af0:	4b96      	ldr	r3, [pc, #600]	; (8016d4c <pow+0x2c4>)
 8016af2:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 8016af6:	2200      	movs	r2, #0
 8016af8:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8016afc:	9b00      	ldr	r3, [sp, #0]
 8016afe:	2b02      	cmp	r3, #2
 8016b00:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8016b04:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8016b08:	d033      	beq.n	8016b72 <pow+0xea>
 8016b0a:	a802      	add	r0, sp, #8
 8016b0c:	f000 fefb 	bl	8017906 <matherr>
 8016b10:	bb48      	cbnz	r0, 8016b66 <pow+0xde>
 8016b12:	e05d      	b.n	8016bd0 <pow+0x148>
 8016b14:	f04f 0a00 	mov.w	sl, #0
 8016b18:	f04f 0b00 	mov.w	fp, #0
 8016b1c:	4652      	mov	r2, sl
 8016b1e:	465b      	mov	r3, fp
 8016b20:	4630      	mov	r0, r6
 8016b22:	4639      	mov	r1, r7
 8016b24:	f7e9 ffa8 	bl	8000a78 <__aeabi_dcmpeq>
 8016b28:	ec4b ab19 	vmov	d9, sl, fp
 8016b2c:	2800      	cmp	r0, #0
 8016b2e:	d054      	beq.n	8016bda <pow+0x152>
 8016b30:	4652      	mov	r2, sl
 8016b32:	465b      	mov	r3, fp
 8016b34:	4620      	mov	r0, r4
 8016b36:	4629      	mov	r1, r5
 8016b38:	f7e9 ff9e 	bl	8000a78 <__aeabi_dcmpeq>
 8016b3c:	4680      	mov	r8, r0
 8016b3e:	b318      	cbz	r0, 8016b88 <pow+0x100>
 8016b40:	2301      	movs	r3, #1
 8016b42:	9302      	str	r3, [sp, #8]
 8016b44:	4b80      	ldr	r3, [pc, #512]	; (8016d48 <pow+0x2c0>)
 8016b46:	9303      	str	r3, [sp, #12]
 8016b48:	9b01      	ldr	r3, [sp, #4]
 8016b4a:	930a      	str	r3, [sp, #40]	; 0x28
 8016b4c:	9b00      	ldr	r3, [sp, #0]
 8016b4e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8016b52:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8016b56:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8016b5a:	2b00      	cmp	r3, #0
 8016b5c:	d0d5      	beq.n	8016b0a <pow+0x82>
 8016b5e:	4b7b      	ldr	r3, [pc, #492]	; (8016d4c <pow+0x2c4>)
 8016b60:	2200      	movs	r2, #0
 8016b62:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8016b66:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016b68:	b11b      	cbz	r3, 8016b72 <pow+0xea>
 8016b6a:	f7fd f95d 	bl	8013e28 <__errno>
 8016b6e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016b70:	6003      	str	r3, [r0, #0]
 8016b72:	ed9d 8b08 	vldr	d8, [sp, #32]
 8016b76:	eeb0 0a48 	vmov.f32	s0, s16
 8016b7a:	eef0 0a68 	vmov.f32	s1, s17
 8016b7e:	b00d      	add	sp, #52	; 0x34
 8016b80:	ecbd 8b04 	vpop	{d8-d9}
 8016b84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016b88:	ec45 4b10 	vmov	d0, r4, r5
 8016b8c:	f000 feb3 	bl	80178f6 <finite>
 8016b90:	2800      	cmp	r0, #0
 8016b92:	d0f0      	beq.n	8016b76 <pow+0xee>
 8016b94:	4652      	mov	r2, sl
 8016b96:	465b      	mov	r3, fp
 8016b98:	4620      	mov	r0, r4
 8016b9a:	4629      	mov	r1, r5
 8016b9c:	f7e9 ff76 	bl	8000a8c <__aeabi_dcmplt>
 8016ba0:	2800      	cmp	r0, #0
 8016ba2:	d0e8      	beq.n	8016b76 <pow+0xee>
 8016ba4:	2301      	movs	r3, #1
 8016ba6:	9302      	str	r3, [sp, #8]
 8016ba8:	4b67      	ldr	r3, [pc, #412]	; (8016d48 <pow+0x2c0>)
 8016baa:	9303      	str	r3, [sp, #12]
 8016bac:	f999 3000 	ldrsb.w	r3, [r9]
 8016bb0:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 8016bb4:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8016bb8:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8016bbc:	b913      	cbnz	r3, 8016bc4 <pow+0x13c>
 8016bbe:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8016bc2:	e7a2      	b.n	8016b0a <pow+0x82>
 8016bc4:	4962      	ldr	r1, [pc, #392]	; (8016d50 <pow+0x2c8>)
 8016bc6:	2000      	movs	r0, #0
 8016bc8:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8016bcc:	2b02      	cmp	r3, #2
 8016bce:	d19c      	bne.n	8016b0a <pow+0x82>
 8016bd0:	f7fd f92a 	bl	8013e28 <__errno>
 8016bd4:	2321      	movs	r3, #33	; 0x21
 8016bd6:	6003      	str	r3, [r0, #0]
 8016bd8:	e7c5      	b.n	8016b66 <pow+0xde>
 8016bda:	eeb0 0a48 	vmov.f32	s0, s16
 8016bde:	eef0 0a68 	vmov.f32	s1, s17
 8016be2:	f000 fe88 	bl	80178f6 <finite>
 8016be6:	9000      	str	r0, [sp, #0]
 8016be8:	2800      	cmp	r0, #0
 8016bea:	f040 8081 	bne.w	8016cf0 <pow+0x268>
 8016bee:	ec47 6b10 	vmov	d0, r6, r7
 8016bf2:	f000 fe80 	bl	80178f6 <finite>
 8016bf6:	2800      	cmp	r0, #0
 8016bf8:	d07a      	beq.n	8016cf0 <pow+0x268>
 8016bfa:	ec45 4b10 	vmov	d0, r4, r5
 8016bfe:	f000 fe7a 	bl	80178f6 <finite>
 8016c02:	2800      	cmp	r0, #0
 8016c04:	d074      	beq.n	8016cf0 <pow+0x268>
 8016c06:	ec53 2b18 	vmov	r2, r3, d8
 8016c0a:	ee18 0a10 	vmov	r0, s16
 8016c0e:	4619      	mov	r1, r3
 8016c10:	f7e9 ff64 	bl	8000adc <__aeabi_dcmpun>
 8016c14:	f999 9000 	ldrsb.w	r9, [r9]
 8016c18:	4b4b      	ldr	r3, [pc, #300]	; (8016d48 <pow+0x2c0>)
 8016c1a:	b1b0      	cbz	r0, 8016c4a <pow+0x1c2>
 8016c1c:	2201      	movs	r2, #1
 8016c1e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8016c22:	9b00      	ldr	r3, [sp, #0]
 8016c24:	930a      	str	r3, [sp, #40]	; 0x28
 8016c26:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8016c2a:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8016c2e:	f1b9 0f00 	cmp.w	r9, #0
 8016c32:	d0c4      	beq.n	8016bbe <pow+0x136>
 8016c34:	4652      	mov	r2, sl
 8016c36:	465b      	mov	r3, fp
 8016c38:	4650      	mov	r0, sl
 8016c3a:	4659      	mov	r1, fp
 8016c3c:	f7e9 fdde 	bl	80007fc <__aeabi_ddiv>
 8016c40:	f1b9 0f02 	cmp.w	r9, #2
 8016c44:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8016c48:	e7c1      	b.n	8016bce <pow+0x146>
 8016c4a:	2203      	movs	r2, #3
 8016c4c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8016c50:	900a      	str	r0, [sp, #40]	; 0x28
 8016c52:	4629      	mov	r1, r5
 8016c54:	4620      	mov	r0, r4
 8016c56:	2200      	movs	r2, #0
 8016c58:	4b3e      	ldr	r3, [pc, #248]	; (8016d54 <pow+0x2cc>)
 8016c5a:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8016c5e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8016c62:	f7e9 fca1 	bl	80005a8 <__aeabi_dmul>
 8016c66:	4604      	mov	r4, r0
 8016c68:	460d      	mov	r5, r1
 8016c6a:	f1b9 0f00 	cmp.w	r9, #0
 8016c6e:	d124      	bne.n	8016cba <pow+0x232>
 8016c70:	4b39      	ldr	r3, [pc, #228]	; (8016d58 <pow+0x2d0>)
 8016c72:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8016c76:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8016c7a:	4630      	mov	r0, r6
 8016c7c:	4652      	mov	r2, sl
 8016c7e:	465b      	mov	r3, fp
 8016c80:	4639      	mov	r1, r7
 8016c82:	f7e9 ff03 	bl	8000a8c <__aeabi_dcmplt>
 8016c86:	2800      	cmp	r0, #0
 8016c88:	d056      	beq.n	8016d38 <pow+0x2b0>
 8016c8a:	ec45 4b10 	vmov	d0, r4, r5
 8016c8e:	f000 fe47 	bl	8017920 <rint>
 8016c92:	4622      	mov	r2, r4
 8016c94:	462b      	mov	r3, r5
 8016c96:	ec51 0b10 	vmov	r0, r1, d0
 8016c9a:	f7e9 feed 	bl	8000a78 <__aeabi_dcmpeq>
 8016c9e:	b920      	cbnz	r0, 8016caa <pow+0x222>
 8016ca0:	4b2e      	ldr	r3, [pc, #184]	; (8016d5c <pow+0x2d4>)
 8016ca2:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8016ca6:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8016caa:	f998 3000 	ldrsb.w	r3, [r8]
 8016cae:	2b02      	cmp	r3, #2
 8016cb0:	d142      	bne.n	8016d38 <pow+0x2b0>
 8016cb2:	f7fd f8b9 	bl	8013e28 <__errno>
 8016cb6:	2322      	movs	r3, #34	; 0x22
 8016cb8:	e78d      	b.n	8016bd6 <pow+0x14e>
 8016cba:	4b29      	ldr	r3, [pc, #164]	; (8016d60 <pow+0x2d8>)
 8016cbc:	2200      	movs	r2, #0
 8016cbe:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8016cc2:	4630      	mov	r0, r6
 8016cc4:	4652      	mov	r2, sl
 8016cc6:	465b      	mov	r3, fp
 8016cc8:	4639      	mov	r1, r7
 8016cca:	f7e9 fedf 	bl	8000a8c <__aeabi_dcmplt>
 8016cce:	2800      	cmp	r0, #0
 8016cd0:	d0eb      	beq.n	8016caa <pow+0x222>
 8016cd2:	ec45 4b10 	vmov	d0, r4, r5
 8016cd6:	f000 fe23 	bl	8017920 <rint>
 8016cda:	4622      	mov	r2, r4
 8016cdc:	462b      	mov	r3, r5
 8016cde:	ec51 0b10 	vmov	r0, r1, d0
 8016ce2:	f7e9 fec9 	bl	8000a78 <__aeabi_dcmpeq>
 8016ce6:	2800      	cmp	r0, #0
 8016ce8:	d1df      	bne.n	8016caa <pow+0x222>
 8016cea:	2200      	movs	r2, #0
 8016cec:	4b18      	ldr	r3, [pc, #96]	; (8016d50 <pow+0x2c8>)
 8016cee:	e7da      	b.n	8016ca6 <pow+0x21e>
 8016cf0:	2200      	movs	r2, #0
 8016cf2:	2300      	movs	r3, #0
 8016cf4:	ec51 0b18 	vmov	r0, r1, d8
 8016cf8:	f7e9 febe 	bl	8000a78 <__aeabi_dcmpeq>
 8016cfc:	2800      	cmp	r0, #0
 8016cfe:	f43f af3a 	beq.w	8016b76 <pow+0xee>
 8016d02:	ec47 6b10 	vmov	d0, r6, r7
 8016d06:	f000 fdf6 	bl	80178f6 <finite>
 8016d0a:	2800      	cmp	r0, #0
 8016d0c:	f43f af33 	beq.w	8016b76 <pow+0xee>
 8016d10:	ec45 4b10 	vmov	d0, r4, r5
 8016d14:	f000 fdef 	bl	80178f6 <finite>
 8016d18:	2800      	cmp	r0, #0
 8016d1a:	f43f af2c 	beq.w	8016b76 <pow+0xee>
 8016d1e:	2304      	movs	r3, #4
 8016d20:	9302      	str	r3, [sp, #8]
 8016d22:	4b09      	ldr	r3, [pc, #36]	; (8016d48 <pow+0x2c0>)
 8016d24:	9303      	str	r3, [sp, #12]
 8016d26:	2300      	movs	r3, #0
 8016d28:	930a      	str	r3, [sp, #40]	; 0x28
 8016d2a:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8016d2e:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8016d32:	ed8d 9b08 	vstr	d9, [sp, #32]
 8016d36:	e7b8      	b.n	8016caa <pow+0x222>
 8016d38:	a802      	add	r0, sp, #8
 8016d3a:	f000 fde4 	bl	8017906 <matherr>
 8016d3e:	2800      	cmp	r0, #0
 8016d40:	f47f af11 	bne.w	8016b66 <pow+0xde>
 8016d44:	e7b5      	b.n	8016cb2 <pow+0x22a>
 8016d46:	bf00      	nop
 8016d48:	08019f38 	.word	0x08019f38
 8016d4c:	3ff00000 	.word	0x3ff00000
 8016d50:	fff00000 	.word	0xfff00000
 8016d54:	3fe00000 	.word	0x3fe00000
 8016d58:	47efffff 	.word	0x47efffff
 8016d5c:	c7efffff 	.word	0xc7efffff
 8016d60:	7ff00000 	.word	0x7ff00000
 8016d64:	200001f4 	.word	0x200001f4

08016d68 <__ieee754_pow>:
 8016d68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016d6c:	b091      	sub	sp, #68	; 0x44
 8016d6e:	ed8d 1b00 	vstr	d1, [sp]
 8016d72:	e9dd 2900 	ldrd	r2, r9, [sp]
 8016d76:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 8016d7a:	ea58 0302 	orrs.w	r3, r8, r2
 8016d7e:	ec57 6b10 	vmov	r6, r7, d0
 8016d82:	f000 84be 	beq.w	8017702 <__ieee754_pow+0x99a>
 8016d86:	4b7a      	ldr	r3, [pc, #488]	; (8016f70 <__ieee754_pow+0x208>)
 8016d88:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 8016d8c:	429c      	cmp	r4, r3
 8016d8e:	463d      	mov	r5, r7
 8016d90:	ee10 aa10 	vmov	sl, s0
 8016d94:	dc09      	bgt.n	8016daa <__ieee754_pow+0x42>
 8016d96:	d103      	bne.n	8016da0 <__ieee754_pow+0x38>
 8016d98:	b93e      	cbnz	r6, 8016daa <__ieee754_pow+0x42>
 8016d9a:	45a0      	cmp	r8, r4
 8016d9c:	dc0d      	bgt.n	8016dba <__ieee754_pow+0x52>
 8016d9e:	e001      	b.n	8016da4 <__ieee754_pow+0x3c>
 8016da0:	4598      	cmp	r8, r3
 8016da2:	dc02      	bgt.n	8016daa <__ieee754_pow+0x42>
 8016da4:	4598      	cmp	r8, r3
 8016da6:	d10e      	bne.n	8016dc6 <__ieee754_pow+0x5e>
 8016da8:	b16a      	cbz	r2, 8016dc6 <__ieee754_pow+0x5e>
 8016daa:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8016dae:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8016db2:	ea54 030a 	orrs.w	r3, r4, sl
 8016db6:	f000 84a4 	beq.w	8017702 <__ieee754_pow+0x99a>
 8016dba:	486e      	ldr	r0, [pc, #440]	; (8016f74 <__ieee754_pow+0x20c>)
 8016dbc:	b011      	add	sp, #68	; 0x44
 8016dbe:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016dc2:	f000 bda5 	b.w	8017910 <nan>
 8016dc6:	2d00      	cmp	r5, #0
 8016dc8:	da53      	bge.n	8016e72 <__ieee754_pow+0x10a>
 8016dca:	4b6b      	ldr	r3, [pc, #428]	; (8016f78 <__ieee754_pow+0x210>)
 8016dcc:	4598      	cmp	r8, r3
 8016dce:	dc4d      	bgt.n	8016e6c <__ieee754_pow+0x104>
 8016dd0:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8016dd4:	4598      	cmp	r8, r3
 8016dd6:	dd4c      	ble.n	8016e72 <__ieee754_pow+0x10a>
 8016dd8:	ea4f 5328 	mov.w	r3, r8, asr #20
 8016ddc:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8016de0:	2b14      	cmp	r3, #20
 8016de2:	dd26      	ble.n	8016e32 <__ieee754_pow+0xca>
 8016de4:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8016de8:	fa22 f103 	lsr.w	r1, r2, r3
 8016dec:	fa01 f303 	lsl.w	r3, r1, r3
 8016df0:	4293      	cmp	r3, r2
 8016df2:	d13e      	bne.n	8016e72 <__ieee754_pow+0x10a>
 8016df4:	f001 0101 	and.w	r1, r1, #1
 8016df8:	f1c1 0b02 	rsb	fp, r1, #2
 8016dfc:	2a00      	cmp	r2, #0
 8016dfe:	d15b      	bne.n	8016eb8 <__ieee754_pow+0x150>
 8016e00:	4b5b      	ldr	r3, [pc, #364]	; (8016f70 <__ieee754_pow+0x208>)
 8016e02:	4598      	cmp	r8, r3
 8016e04:	d124      	bne.n	8016e50 <__ieee754_pow+0xe8>
 8016e06:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8016e0a:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8016e0e:	ea53 030a 	orrs.w	r3, r3, sl
 8016e12:	f000 8476 	beq.w	8017702 <__ieee754_pow+0x99a>
 8016e16:	4b59      	ldr	r3, [pc, #356]	; (8016f7c <__ieee754_pow+0x214>)
 8016e18:	429c      	cmp	r4, r3
 8016e1a:	dd2d      	ble.n	8016e78 <__ieee754_pow+0x110>
 8016e1c:	f1b9 0f00 	cmp.w	r9, #0
 8016e20:	f280 8473 	bge.w	801770a <__ieee754_pow+0x9a2>
 8016e24:	2000      	movs	r0, #0
 8016e26:	2100      	movs	r1, #0
 8016e28:	ec41 0b10 	vmov	d0, r0, r1
 8016e2c:	b011      	add	sp, #68	; 0x44
 8016e2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016e32:	2a00      	cmp	r2, #0
 8016e34:	d13e      	bne.n	8016eb4 <__ieee754_pow+0x14c>
 8016e36:	f1c3 0314 	rsb	r3, r3, #20
 8016e3a:	fa48 f103 	asr.w	r1, r8, r3
 8016e3e:	fa01 f303 	lsl.w	r3, r1, r3
 8016e42:	4543      	cmp	r3, r8
 8016e44:	f040 8469 	bne.w	801771a <__ieee754_pow+0x9b2>
 8016e48:	f001 0101 	and.w	r1, r1, #1
 8016e4c:	f1c1 0b02 	rsb	fp, r1, #2
 8016e50:	4b4b      	ldr	r3, [pc, #300]	; (8016f80 <__ieee754_pow+0x218>)
 8016e52:	4598      	cmp	r8, r3
 8016e54:	d118      	bne.n	8016e88 <__ieee754_pow+0x120>
 8016e56:	f1b9 0f00 	cmp.w	r9, #0
 8016e5a:	f280 845a 	bge.w	8017712 <__ieee754_pow+0x9aa>
 8016e5e:	4948      	ldr	r1, [pc, #288]	; (8016f80 <__ieee754_pow+0x218>)
 8016e60:	4632      	mov	r2, r6
 8016e62:	463b      	mov	r3, r7
 8016e64:	2000      	movs	r0, #0
 8016e66:	f7e9 fcc9 	bl	80007fc <__aeabi_ddiv>
 8016e6a:	e7dd      	b.n	8016e28 <__ieee754_pow+0xc0>
 8016e6c:	f04f 0b02 	mov.w	fp, #2
 8016e70:	e7c4      	b.n	8016dfc <__ieee754_pow+0x94>
 8016e72:	f04f 0b00 	mov.w	fp, #0
 8016e76:	e7c1      	b.n	8016dfc <__ieee754_pow+0x94>
 8016e78:	f1b9 0f00 	cmp.w	r9, #0
 8016e7c:	dad2      	bge.n	8016e24 <__ieee754_pow+0xbc>
 8016e7e:	e9dd 0300 	ldrd	r0, r3, [sp]
 8016e82:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8016e86:	e7cf      	b.n	8016e28 <__ieee754_pow+0xc0>
 8016e88:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8016e8c:	d106      	bne.n	8016e9c <__ieee754_pow+0x134>
 8016e8e:	4632      	mov	r2, r6
 8016e90:	463b      	mov	r3, r7
 8016e92:	4610      	mov	r0, r2
 8016e94:	4619      	mov	r1, r3
 8016e96:	f7e9 fb87 	bl	80005a8 <__aeabi_dmul>
 8016e9a:	e7c5      	b.n	8016e28 <__ieee754_pow+0xc0>
 8016e9c:	4b39      	ldr	r3, [pc, #228]	; (8016f84 <__ieee754_pow+0x21c>)
 8016e9e:	4599      	cmp	r9, r3
 8016ea0:	d10a      	bne.n	8016eb8 <__ieee754_pow+0x150>
 8016ea2:	2d00      	cmp	r5, #0
 8016ea4:	db08      	blt.n	8016eb8 <__ieee754_pow+0x150>
 8016ea6:	ec47 6b10 	vmov	d0, r6, r7
 8016eaa:	b011      	add	sp, #68	; 0x44
 8016eac:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016eb0:	f000 bc68 	b.w	8017784 <__ieee754_sqrt>
 8016eb4:	f04f 0b00 	mov.w	fp, #0
 8016eb8:	ec47 6b10 	vmov	d0, r6, r7
 8016ebc:	f000 fd12 	bl	80178e4 <fabs>
 8016ec0:	ec51 0b10 	vmov	r0, r1, d0
 8016ec4:	f1ba 0f00 	cmp.w	sl, #0
 8016ec8:	d127      	bne.n	8016f1a <__ieee754_pow+0x1b2>
 8016eca:	b124      	cbz	r4, 8016ed6 <__ieee754_pow+0x16e>
 8016ecc:	4b2c      	ldr	r3, [pc, #176]	; (8016f80 <__ieee754_pow+0x218>)
 8016ece:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 8016ed2:	429a      	cmp	r2, r3
 8016ed4:	d121      	bne.n	8016f1a <__ieee754_pow+0x1b2>
 8016ed6:	f1b9 0f00 	cmp.w	r9, #0
 8016eda:	da05      	bge.n	8016ee8 <__ieee754_pow+0x180>
 8016edc:	4602      	mov	r2, r0
 8016ede:	460b      	mov	r3, r1
 8016ee0:	2000      	movs	r0, #0
 8016ee2:	4927      	ldr	r1, [pc, #156]	; (8016f80 <__ieee754_pow+0x218>)
 8016ee4:	f7e9 fc8a 	bl	80007fc <__aeabi_ddiv>
 8016ee8:	2d00      	cmp	r5, #0
 8016eea:	da9d      	bge.n	8016e28 <__ieee754_pow+0xc0>
 8016eec:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8016ef0:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8016ef4:	ea54 030b 	orrs.w	r3, r4, fp
 8016ef8:	d108      	bne.n	8016f0c <__ieee754_pow+0x1a4>
 8016efa:	4602      	mov	r2, r0
 8016efc:	460b      	mov	r3, r1
 8016efe:	4610      	mov	r0, r2
 8016f00:	4619      	mov	r1, r3
 8016f02:	f7e9 f999 	bl	8000238 <__aeabi_dsub>
 8016f06:	4602      	mov	r2, r0
 8016f08:	460b      	mov	r3, r1
 8016f0a:	e7ac      	b.n	8016e66 <__ieee754_pow+0xfe>
 8016f0c:	f1bb 0f01 	cmp.w	fp, #1
 8016f10:	d18a      	bne.n	8016e28 <__ieee754_pow+0xc0>
 8016f12:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8016f16:	4619      	mov	r1, r3
 8016f18:	e786      	b.n	8016e28 <__ieee754_pow+0xc0>
 8016f1a:	0fed      	lsrs	r5, r5, #31
 8016f1c:	1e6b      	subs	r3, r5, #1
 8016f1e:	930d      	str	r3, [sp, #52]	; 0x34
 8016f20:	ea5b 0303 	orrs.w	r3, fp, r3
 8016f24:	d102      	bne.n	8016f2c <__ieee754_pow+0x1c4>
 8016f26:	4632      	mov	r2, r6
 8016f28:	463b      	mov	r3, r7
 8016f2a:	e7e8      	b.n	8016efe <__ieee754_pow+0x196>
 8016f2c:	4b16      	ldr	r3, [pc, #88]	; (8016f88 <__ieee754_pow+0x220>)
 8016f2e:	4598      	cmp	r8, r3
 8016f30:	f340 80fe 	ble.w	8017130 <__ieee754_pow+0x3c8>
 8016f34:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8016f38:	4598      	cmp	r8, r3
 8016f3a:	dd0a      	ble.n	8016f52 <__ieee754_pow+0x1ea>
 8016f3c:	4b0f      	ldr	r3, [pc, #60]	; (8016f7c <__ieee754_pow+0x214>)
 8016f3e:	429c      	cmp	r4, r3
 8016f40:	dc0d      	bgt.n	8016f5e <__ieee754_pow+0x1f6>
 8016f42:	f1b9 0f00 	cmp.w	r9, #0
 8016f46:	f6bf af6d 	bge.w	8016e24 <__ieee754_pow+0xbc>
 8016f4a:	a307      	add	r3, pc, #28	; (adr r3, 8016f68 <__ieee754_pow+0x200>)
 8016f4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016f50:	e79f      	b.n	8016e92 <__ieee754_pow+0x12a>
 8016f52:	4b0e      	ldr	r3, [pc, #56]	; (8016f8c <__ieee754_pow+0x224>)
 8016f54:	429c      	cmp	r4, r3
 8016f56:	ddf4      	ble.n	8016f42 <__ieee754_pow+0x1da>
 8016f58:	4b09      	ldr	r3, [pc, #36]	; (8016f80 <__ieee754_pow+0x218>)
 8016f5a:	429c      	cmp	r4, r3
 8016f5c:	dd18      	ble.n	8016f90 <__ieee754_pow+0x228>
 8016f5e:	f1b9 0f00 	cmp.w	r9, #0
 8016f62:	dcf2      	bgt.n	8016f4a <__ieee754_pow+0x1e2>
 8016f64:	e75e      	b.n	8016e24 <__ieee754_pow+0xbc>
 8016f66:	bf00      	nop
 8016f68:	8800759c 	.word	0x8800759c
 8016f6c:	7e37e43c 	.word	0x7e37e43c
 8016f70:	7ff00000 	.word	0x7ff00000
 8016f74:	08019e21 	.word	0x08019e21
 8016f78:	433fffff 	.word	0x433fffff
 8016f7c:	3fefffff 	.word	0x3fefffff
 8016f80:	3ff00000 	.word	0x3ff00000
 8016f84:	3fe00000 	.word	0x3fe00000
 8016f88:	41e00000 	.word	0x41e00000
 8016f8c:	3feffffe 	.word	0x3feffffe
 8016f90:	2200      	movs	r2, #0
 8016f92:	4b63      	ldr	r3, [pc, #396]	; (8017120 <__ieee754_pow+0x3b8>)
 8016f94:	f7e9 f950 	bl	8000238 <__aeabi_dsub>
 8016f98:	a355      	add	r3, pc, #340	; (adr r3, 80170f0 <__ieee754_pow+0x388>)
 8016f9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016f9e:	4604      	mov	r4, r0
 8016fa0:	460d      	mov	r5, r1
 8016fa2:	f7e9 fb01 	bl	80005a8 <__aeabi_dmul>
 8016fa6:	a354      	add	r3, pc, #336	; (adr r3, 80170f8 <__ieee754_pow+0x390>)
 8016fa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016fac:	4606      	mov	r6, r0
 8016fae:	460f      	mov	r7, r1
 8016fb0:	4620      	mov	r0, r4
 8016fb2:	4629      	mov	r1, r5
 8016fb4:	f7e9 faf8 	bl	80005a8 <__aeabi_dmul>
 8016fb8:	2200      	movs	r2, #0
 8016fba:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8016fbe:	4b59      	ldr	r3, [pc, #356]	; (8017124 <__ieee754_pow+0x3bc>)
 8016fc0:	4620      	mov	r0, r4
 8016fc2:	4629      	mov	r1, r5
 8016fc4:	f7e9 faf0 	bl	80005a8 <__aeabi_dmul>
 8016fc8:	4602      	mov	r2, r0
 8016fca:	460b      	mov	r3, r1
 8016fcc:	a14c      	add	r1, pc, #304	; (adr r1, 8017100 <__ieee754_pow+0x398>)
 8016fce:	e9d1 0100 	ldrd	r0, r1, [r1]
 8016fd2:	f7e9 f931 	bl	8000238 <__aeabi_dsub>
 8016fd6:	4622      	mov	r2, r4
 8016fd8:	462b      	mov	r3, r5
 8016fda:	f7e9 fae5 	bl	80005a8 <__aeabi_dmul>
 8016fde:	4602      	mov	r2, r0
 8016fe0:	460b      	mov	r3, r1
 8016fe2:	2000      	movs	r0, #0
 8016fe4:	4950      	ldr	r1, [pc, #320]	; (8017128 <__ieee754_pow+0x3c0>)
 8016fe6:	f7e9 f927 	bl	8000238 <__aeabi_dsub>
 8016fea:	4622      	mov	r2, r4
 8016fec:	462b      	mov	r3, r5
 8016fee:	4680      	mov	r8, r0
 8016ff0:	4689      	mov	r9, r1
 8016ff2:	4620      	mov	r0, r4
 8016ff4:	4629      	mov	r1, r5
 8016ff6:	f7e9 fad7 	bl	80005a8 <__aeabi_dmul>
 8016ffa:	4602      	mov	r2, r0
 8016ffc:	460b      	mov	r3, r1
 8016ffe:	4640      	mov	r0, r8
 8017000:	4649      	mov	r1, r9
 8017002:	f7e9 fad1 	bl	80005a8 <__aeabi_dmul>
 8017006:	a340      	add	r3, pc, #256	; (adr r3, 8017108 <__ieee754_pow+0x3a0>)
 8017008:	e9d3 2300 	ldrd	r2, r3, [r3]
 801700c:	f7e9 facc 	bl	80005a8 <__aeabi_dmul>
 8017010:	4602      	mov	r2, r0
 8017012:	460b      	mov	r3, r1
 8017014:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8017018:	f7e9 f90e 	bl	8000238 <__aeabi_dsub>
 801701c:	4602      	mov	r2, r0
 801701e:	460b      	mov	r3, r1
 8017020:	4604      	mov	r4, r0
 8017022:	460d      	mov	r5, r1
 8017024:	4630      	mov	r0, r6
 8017026:	4639      	mov	r1, r7
 8017028:	f7e9 f908 	bl	800023c <__adddf3>
 801702c:	2000      	movs	r0, #0
 801702e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8017032:	4632      	mov	r2, r6
 8017034:	463b      	mov	r3, r7
 8017036:	f7e9 f8ff 	bl	8000238 <__aeabi_dsub>
 801703a:	4602      	mov	r2, r0
 801703c:	460b      	mov	r3, r1
 801703e:	4620      	mov	r0, r4
 8017040:	4629      	mov	r1, r5
 8017042:	f7e9 f8f9 	bl	8000238 <__aeabi_dsub>
 8017046:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8017048:	f10b 33ff 	add.w	r3, fp, #4294967295	; 0xffffffff
 801704c:	4313      	orrs	r3, r2
 801704e:	4606      	mov	r6, r0
 8017050:	460f      	mov	r7, r1
 8017052:	f040 81eb 	bne.w	801742c <__ieee754_pow+0x6c4>
 8017056:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 8017110 <__ieee754_pow+0x3a8>
 801705a:	e9dd 4500 	ldrd	r4, r5, [sp]
 801705e:	2400      	movs	r4, #0
 8017060:	4622      	mov	r2, r4
 8017062:	462b      	mov	r3, r5
 8017064:	e9dd 0100 	ldrd	r0, r1, [sp]
 8017068:	ed8d 7b02 	vstr	d7, [sp, #8]
 801706c:	f7e9 f8e4 	bl	8000238 <__aeabi_dsub>
 8017070:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8017074:	f7e9 fa98 	bl	80005a8 <__aeabi_dmul>
 8017078:	e9dd 2300 	ldrd	r2, r3, [sp]
 801707c:	4680      	mov	r8, r0
 801707e:	4689      	mov	r9, r1
 8017080:	4630      	mov	r0, r6
 8017082:	4639      	mov	r1, r7
 8017084:	f7e9 fa90 	bl	80005a8 <__aeabi_dmul>
 8017088:	4602      	mov	r2, r0
 801708a:	460b      	mov	r3, r1
 801708c:	4640      	mov	r0, r8
 801708e:	4649      	mov	r1, r9
 8017090:	f7e9 f8d4 	bl	800023c <__adddf3>
 8017094:	4622      	mov	r2, r4
 8017096:	462b      	mov	r3, r5
 8017098:	4680      	mov	r8, r0
 801709a:	4689      	mov	r9, r1
 801709c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80170a0:	f7e9 fa82 	bl	80005a8 <__aeabi_dmul>
 80170a4:	460b      	mov	r3, r1
 80170a6:	4604      	mov	r4, r0
 80170a8:	460d      	mov	r5, r1
 80170aa:	4602      	mov	r2, r0
 80170ac:	4649      	mov	r1, r9
 80170ae:	4640      	mov	r0, r8
 80170b0:	e9cd 4500 	strd	r4, r5, [sp]
 80170b4:	f7e9 f8c2 	bl	800023c <__adddf3>
 80170b8:	4b1c      	ldr	r3, [pc, #112]	; (801712c <__ieee754_pow+0x3c4>)
 80170ba:	4299      	cmp	r1, r3
 80170bc:	4606      	mov	r6, r0
 80170be:	460f      	mov	r7, r1
 80170c0:	468b      	mov	fp, r1
 80170c2:	f340 82f7 	ble.w	80176b4 <__ieee754_pow+0x94c>
 80170c6:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 80170ca:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 80170ce:	4303      	orrs	r3, r0
 80170d0:	f000 81ea 	beq.w	80174a8 <__ieee754_pow+0x740>
 80170d4:	a310      	add	r3, pc, #64	; (adr r3, 8017118 <__ieee754_pow+0x3b0>)
 80170d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80170da:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80170de:	f7e9 fa63 	bl	80005a8 <__aeabi_dmul>
 80170e2:	a30d      	add	r3, pc, #52	; (adr r3, 8017118 <__ieee754_pow+0x3b0>)
 80170e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80170e8:	e6d5      	b.n	8016e96 <__ieee754_pow+0x12e>
 80170ea:	bf00      	nop
 80170ec:	f3af 8000 	nop.w
 80170f0:	60000000 	.word	0x60000000
 80170f4:	3ff71547 	.word	0x3ff71547
 80170f8:	f85ddf44 	.word	0xf85ddf44
 80170fc:	3e54ae0b 	.word	0x3e54ae0b
 8017100:	55555555 	.word	0x55555555
 8017104:	3fd55555 	.word	0x3fd55555
 8017108:	652b82fe 	.word	0x652b82fe
 801710c:	3ff71547 	.word	0x3ff71547
 8017110:	00000000 	.word	0x00000000
 8017114:	bff00000 	.word	0xbff00000
 8017118:	8800759c 	.word	0x8800759c
 801711c:	7e37e43c 	.word	0x7e37e43c
 8017120:	3ff00000 	.word	0x3ff00000
 8017124:	3fd00000 	.word	0x3fd00000
 8017128:	3fe00000 	.word	0x3fe00000
 801712c:	408fffff 	.word	0x408fffff
 8017130:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8017134:	f04f 0200 	mov.w	r2, #0
 8017138:	da05      	bge.n	8017146 <__ieee754_pow+0x3de>
 801713a:	4bd3      	ldr	r3, [pc, #844]	; (8017488 <__ieee754_pow+0x720>)
 801713c:	f7e9 fa34 	bl	80005a8 <__aeabi_dmul>
 8017140:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8017144:	460c      	mov	r4, r1
 8017146:	1523      	asrs	r3, r4, #20
 8017148:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 801714c:	4413      	add	r3, r2
 801714e:	9309      	str	r3, [sp, #36]	; 0x24
 8017150:	4bce      	ldr	r3, [pc, #824]	; (801748c <__ieee754_pow+0x724>)
 8017152:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8017156:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 801715a:	429c      	cmp	r4, r3
 801715c:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8017160:	dd08      	ble.n	8017174 <__ieee754_pow+0x40c>
 8017162:	4bcb      	ldr	r3, [pc, #812]	; (8017490 <__ieee754_pow+0x728>)
 8017164:	429c      	cmp	r4, r3
 8017166:	f340 815e 	ble.w	8017426 <__ieee754_pow+0x6be>
 801716a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801716c:	3301      	adds	r3, #1
 801716e:	9309      	str	r3, [sp, #36]	; 0x24
 8017170:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8017174:	f04f 0a00 	mov.w	sl, #0
 8017178:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 801717c:	930c      	str	r3, [sp, #48]	; 0x30
 801717e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8017180:	4bc4      	ldr	r3, [pc, #784]	; (8017494 <__ieee754_pow+0x72c>)
 8017182:	4413      	add	r3, r2
 8017184:	ed93 7b00 	vldr	d7, [r3]
 8017188:	4629      	mov	r1, r5
 801718a:	ec53 2b17 	vmov	r2, r3, d7
 801718e:	ed8d 7b06 	vstr	d7, [sp, #24]
 8017192:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8017196:	f7e9 f84f 	bl	8000238 <__aeabi_dsub>
 801719a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 801719e:	4606      	mov	r6, r0
 80171a0:	460f      	mov	r7, r1
 80171a2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80171a6:	f7e9 f849 	bl	800023c <__adddf3>
 80171aa:	4602      	mov	r2, r0
 80171ac:	460b      	mov	r3, r1
 80171ae:	2000      	movs	r0, #0
 80171b0:	49b9      	ldr	r1, [pc, #740]	; (8017498 <__ieee754_pow+0x730>)
 80171b2:	f7e9 fb23 	bl	80007fc <__aeabi_ddiv>
 80171b6:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 80171ba:	4602      	mov	r2, r0
 80171bc:	460b      	mov	r3, r1
 80171be:	4630      	mov	r0, r6
 80171c0:	4639      	mov	r1, r7
 80171c2:	f7e9 f9f1 	bl	80005a8 <__aeabi_dmul>
 80171c6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80171ca:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 80171ce:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80171d2:	2300      	movs	r3, #0
 80171d4:	9302      	str	r3, [sp, #8]
 80171d6:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80171da:	106d      	asrs	r5, r5, #1
 80171dc:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 80171e0:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 80171e4:	2200      	movs	r2, #0
 80171e6:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 80171ea:	4640      	mov	r0, r8
 80171ec:	4649      	mov	r1, r9
 80171ee:	4614      	mov	r4, r2
 80171f0:	461d      	mov	r5, r3
 80171f2:	f7e9 f9d9 	bl	80005a8 <__aeabi_dmul>
 80171f6:	4602      	mov	r2, r0
 80171f8:	460b      	mov	r3, r1
 80171fa:	4630      	mov	r0, r6
 80171fc:	4639      	mov	r1, r7
 80171fe:	f7e9 f81b 	bl	8000238 <__aeabi_dsub>
 8017202:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8017206:	4606      	mov	r6, r0
 8017208:	460f      	mov	r7, r1
 801720a:	4620      	mov	r0, r4
 801720c:	4629      	mov	r1, r5
 801720e:	f7e9 f813 	bl	8000238 <__aeabi_dsub>
 8017212:	4602      	mov	r2, r0
 8017214:	460b      	mov	r3, r1
 8017216:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 801721a:	f7e9 f80d 	bl	8000238 <__aeabi_dsub>
 801721e:	4642      	mov	r2, r8
 8017220:	464b      	mov	r3, r9
 8017222:	f7e9 f9c1 	bl	80005a8 <__aeabi_dmul>
 8017226:	4602      	mov	r2, r0
 8017228:	460b      	mov	r3, r1
 801722a:	4630      	mov	r0, r6
 801722c:	4639      	mov	r1, r7
 801722e:	f7e9 f803 	bl	8000238 <__aeabi_dsub>
 8017232:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8017236:	f7e9 f9b7 	bl	80005a8 <__aeabi_dmul>
 801723a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801723e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8017242:	4610      	mov	r0, r2
 8017244:	4619      	mov	r1, r3
 8017246:	f7e9 f9af 	bl	80005a8 <__aeabi_dmul>
 801724a:	a37b      	add	r3, pc, #492	; (adr r3, 8017438 <__ieee754_pow+0x6d0>)
 801724c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017250:	4604      	mov	r4, r0
 8017252:	460d      	mov	r5, r1
 8017254:	f7e9 f9a8 	bl	80005a8 <__aeabi_dmul>
 8017258:	a379      	add	r3, pc, #484	; (adr r3, 8017440 <__ieee754_pow+0x6d8>)
 801725a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801725e:	f7e8 ffed 	bl	800023c <__adddf3>
 8017262:	4622      	mov	r2, r4
 8017264:	462b      	mov	r3, r5
 8017266:	f7e9 f99f 	bl	80005a8 <__aeabi_dmul>
 801726a:	a377      	add	r3, pc, #476	; (adr r3, 8017448 <__ieee754_pow+0x6e0>)
 801726c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017270:	f7e8 ffe4 	bl	800023c <__adddf3>
 8017274:	4622      	mov	r2, r4
 8017276:	462b      	mov	r3, r5
 8017278:	f7e9 f996 	bl	80005a8 <__aeabi_dmul>
 801727c:	a374      	add	r3, pc, #464	; (adr r3, 8017450 <__ieee754_pow+0x6e8>)
 801727e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017282:	f7e8 ffdb 	bl	800023c <__adddf3>
 8017286:	4622      	mov	r2, r4
 8017288:	462b      	mov	r3, r5
 801728a:	f7e9 f98d 	bl	80005a8 <__aeabi_dmul>
 801728e:	a372      	add	r3, pc, #456	; (adr r3, 8017458 <__ieee754_pow+0x6f0>)
 8017290:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017294:	f7e8 ffd2 	bl	800023c <__adddf3>
 8017298:	4622      	mov	r2, r4
 801729a:	462b      	mov	r3, r5
 801729c:	f7e9 f984 	bl	80005a8 <__aeabi_dmul>
 80172a0:	a36f      	add	r3, pc, #444	; (adr r3, 8017460 <__ieee754_pow+0x6f8>)
 80172a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80172a6:	f7e8 ffc9 	bl	800023c <__adddf3>
 80172aa:	4622      	mov	r2, r4
 80172ac:	4606      	mov	r6, r0
 80172ae:	460f      	mov	r7, r1
 80172b0:	462b      	mov	r3, r5
 80172b2:	4620      	mov	r0, r4
 80172b4:	4629      	mov	r1, r5
 80172b6:	f7e9 f977 	bl	80005a8 <__aeabi_dmul>
 80172ba:	4602      	mov	r2, r0
 80172bc:	460b      	mov	r3, r1
 80172be:	4630      	mov	r0, r6
 80172c0:	4639      	mov	r1, r7
 80172c2:	f7e9 f971 	bl	80005a8 <__aeabi_dmul>
 80172c6:	4642      	mov	r2, r8
 80172c8:	4604      	mov	r4, r0
 80172ca:	460d      	mov	r5, r1
 80172cc:	464b      	mov	r3, r9
 80172ce:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80172d2:	f7e8 ffb3 	bl	800023c <__adddf3>
 80172d6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80172da:	f7e9 f965 	bl	80005a8 <__aeabi_dmul>
 80172de:	4622      	mov	r2, r4
 80172e0:	462b      	mov	r3, r5
 80172e2:	f7e8 ffab 	bl	800023c <__adddf3>
 80172e6:	4642      	mov	r2, r8
 80172e8:	4606      	mov	r6, r0
 80172ea:	460f      	mov	r7, r1
 80172ec:	464b      	mov	r3, r9
 80172ee:	4640      	mov	r0, r8
 80172f0:	4649      	mov	r1, r9
 80172f2:	f7e9 f959 	bl	80005a8 <__aeabi_dmul>
 80172f6:	2200      	movs	r2, #0
 80172f8:	4b68      	ldr	r3, [pc, #416]	; (801749c <__ieee754_pow+0x734>)
 80172fa:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80172fe:	f7e8 ff9d 	bl	800023c <__adddf3>
 8017302:	4632      	mov	r2, r6
 8017304:	463b      	mov	r3, r7
 8017306:	f7e8 ff99 	bl	800023c <__adddf3>
 801730a:	9802      	ldr	r0, [sp, #8]
 801730c:	460d      	mov	r5, r1
 801730e:	4604      	mov	r4, r0
 8017310:	4602      	mov	r2, r0
 8017312:	460b      	mov	r3, r1
 8017314:	4640      	mov	r0, r8
 8017316:	4649      	mov	r1, r9
 8017318:	f7e9 f946 	bl	80005a8 <__aeabi_dmul>
 801731c:	2200      	movs	r2, #0
 801731e:	4680      	mov	r8, r0
 8017320:	4689      	mov	r9, r1
 8017322:	4b5e      	ldr	r3, [pc, #376]	; (801749c <__ieee754_pow+0x734>)
 8017324:	4620      	mov	r0, r4
 8017326:	4629      	mov	r1, r5
 8017328:	f7e8 ff86 	bl	8000238 <__aeabi_dsub>
 801732c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8017330:	f7e8 ff82 	bl	8000238 <__aeabi_dsub>
 8017334:	4602      	mov	r2, r0
 8017336:	460b      	mov	r3, r1
 8017338:	4630      	mov	r0, r6
 801733a:	4639      	mov	r1, r7
 801733c:	f7e8 ff7c 	bl	8000238 <__aeabi_dsub>
 8017340:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8017344:	f7e9 f930 	bl	80005a8 <__aeabi_dmul>
 8017348:	4622      	mov	r2, r4
 801734a:	4606      	mov	r6, r0
 801734c:	460f      	mov	r7, r1
 801734e:	462b      	mov	r3, r5
 8017350:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8017354:	f7e9 f928 	bl	80005a8 <__aeabi_dmul>
 8017358:	4602      	mov	r2, r0
 801735a:	460b      	mov	r3, r1
 801735c:	4630      	mov	r0, r6
 801735e:	4639      	mov	r1, r7
 8017360:	f7e8 ff6c 	bl	800023c <__adddf3>
 8017364:	4606      	mov	r6, r0
 8017366:	460f      	mov	r7, r1
 8017368:	4602      	mov	r2, r0
 801736a:	460b      	mov	r3, r1
 801736c:	4640      	mov	r0, r8
 801736e:	4649      	mov	r1, r9
 8017370:	f7e8 ff64 	bl	800023c <__adddf3>
 8017374:	9802      	ldr	r0, [sp, #8]
 8017376:	a33c      	add	r3, pc, #240	; (adr r3, 8017468 <__ieee754_pow+0x700>)
 8017378:	e9d3 2300 	ldrd	r2, r3, [r3]
 801737c:	4604      	mov	r4, r0
 801737e:	460d      	mov	r5, r1
 8017380:	f7e9 f912 	bl	80005a8 <__aeabi_dmul>
 8017384:	4642      	mov	r2, r8
 8017386:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801738a:	464b      	mov	r3, r9
 801738c:	4620      	mov	r0, r4
 801738e:	4629      	mov	r1, r5
 8017390:	f7e8 ff52 	bl	8000238 <__aeabi_dsub>
 8017394:	4602      	mov	r2, r0
 8017396:	460b      	mov	r3, r1
 8017398:	4630      	mov	r0, r6
 801739a:	4639      	mov	r1, r7
 801739c:	f7e8 ff4c 	bl	8000238 <__aeabi_dsub>
 80173a0:	a333      	add	r3, pc, #204	; (adr r3, 8017470 <__ieee754_pow+0x708>)
 80173a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80173a6:	f7e9 f8ff 	bl	80005a8 <__aeabi_dmul>
 80173aa:	a333      	add	r3, pc, #204	; (adr r3, 8017478 <__ieee754_pow+0x710>)
 80173ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80173b0:	4606      	mov	r6, r0
 80173b2:	460f      	mov	r7, r1
 80173b4:	4620      	mov	r0, r4
 80173b6:	4629      	mov	r1, r5
 80173b8:	f7e9 f8f6 	bl	80005a8 <__aeabi_dmul>
 80173bc:	4602      	mov	r2, r0
 80173be:	460b      	mov	r3, r1
 80173c0:	4630      	mov	r0, r6
 80173c2:	4639      	mov	r1, r7
 80173c4:	f7e8 ff3a 	bl	800023c <__adddf3>
 80173c8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80173ca:	4b35      	ldr	r3, [pc, #212]	; (80174a0 <__ieee754_pow+0x738>)
 80173cc:	4413      	add	r3, r2
 80173ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80173d2:	f7e8 ff33 	bl	800023c <__adddf3>
 80173d6:	4604      	mov	r4, r0
 80173d8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80173da:	460d      	mov	r5, r1
 80173dc:	f7e9 f87a 	bl	80004d4 <__aeabi_i2d>
 80173e0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80173e2:	4b30      	ldr	r3, [pc, #192]	; (80174a4 <__ieee754_pow+0x73c>)
 80173e4:	4413      	add	r3, r2
 80173e6:	e9d3 8900 	ldrd	r8, r9, [r3]
 80173ea:	4606      	mov	r6, r0
 80173ec:	460f      	mov	r7, r1
 80173ee:	4622      	mov	r2, r4
 80173f0:	462b      	mov	r3, r5
 80173f2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80173f6:	f7e8 ff21 	bl	800023c <__adddf3>
 80173fa:	4642      	mov	r2, r8
 80173fc:	464b      	mov	r3, r9
 80173fe:	f7e8 ff1d 	bl	800023c <__adddf3>
 8017402:	4632      	mov	r2, r6
 8017404:	463b      	mov	r3, r7
 8017406:	f7e8 ff19 	bl	800023c <__adddf3>
 801740a:	9802      	ldr	r0, [sp, #8]
 801740c:	4632      	mov	r2, r6
 801740e:	463b      	mov	r3, r7
 8017410:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8017414:	f7e8 ff10 	bl	8000238 <__aeabi_dsub>
 8017418:	4642      	mov	r2, r8
 801741a:	464b      	mov	r3, r9
 801741c:	f7e8 ff0c 	bl	8000238 <__aeabi_dsub>
 8017420:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8017424:	e607      	b.n	8017036 <__ieee754_pow+0x2ce>
 8017426:	f04f 0a01 	mov.w	sl, #1
 801742a:	e6a5      	b.n	8017178 <__ieee754_pow+0x410>
 801742c:	ed9f 7b14 	vldr	d7, [pc, #80]	; 8017480 <__ieee754_pow+0x718>
 8017430:	e613      	b.n	801705a <__ieee754_pow+0x2f2>
 8017432:	bf00      	nop
 8017434:	f3af 8000 	nop.w
 8017438:	4a454eef 	.word	0x4a454eef
 801743c:	3fca7e28 	.word	0x3fca7e28
 8017440:	93c9db65 	.word	0x93c9db65
 8017444:	3fcd864a 	.word	0x3fcd864a
 8017448:	a91d4101 	.word	0xa91d4101
 801744c:	3fd17460 	.word	0x3fd17460
 8017450:	518f264d 	.word	0x518f264d
 8017454:	3fd55555 	.word	0x3fd55555
 8017458:	db6fabff 	.word	0xdb6fabff
 801745c:	3fdb6db6 	.word	0x3fdb6db6
 8017460:	33333303 	.word	0x33333303
 8017464:	3fe33333 	.word	0x3fe33333
 8017468:	e0000000 	.word	0xe0000000
 801746c:	3feec709 	.word	0x3feec709
 8017470:	dc3a03fd 	.word	0xdc3a03fd
 8017474:	3feec709 	.word	0x3feec709
 8017478:	145b01f5 	.word	0x145b01f5
 801747c:	be3e2fe0 	.word	0xbe3e2fe0
 8017480:	00000000 	.word	0x00000000
 8017484:	3ff00000 	.word	0x3ff00000
 8017488:	43400000 	.word	0x43400000
 801748c:	0003988e 	.word	0x0003988e
 8017490:	000bb679 	.word	0x000bb679
 8017494:	08019f40 	.word	0x08019f40
 8017498:	3ff00000 	.word	0x3ff00000
 801749c:	40080000 	.word	0x40080000
 80174a0:	08019f60 	.word	0x08019f60
 80174a4:	08019f50 	.word	0x08019f50
 80174a8:	a3b4      	add	r3, pc, #720	; (adr r3, 801777c <__ieee754_pow+0xa14>)
 80174aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80174ae:	4640      	mov	r0, r8
 80174b0:	4649      	mov	r1, r9
 80174b2:	f7e8 fec3 	bl	800023c <__adddf3>
 80174b6:	4622      	mov	r2, r4
 80174b8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80174bc:	462b      	mov	r3, r5
 80174be:	4630      	mov	r0, r6
 80174c0:	4639      	mov	r1, r7
 80174c2:	f7e8 feb9 	bl	8000238 <__aeabi_dsub>
 80174c6:	4602      	mov	r2, r0
 80174c8:	460b      	mov	r3, r1
 80174ca:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80174ce:	f7e9 fafb 	bl	8000ac8 <__aeabi_dcmpgt>
 80174d2:	2800      	cmp	r0, #0
 80174d4:	f47f adfe 	bne.w	80170d4 <__ieee754_pow+0x36c>
 80174d8:	4aa3      	ldr	r2, [pc, #652]	; (8017768 <__ieee754_pow+0xa00>)
 80174da:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80174de:	4293      	cmp	r3, r2
 80174e0:	f340 810a 	ble.w	80176f8 <__ieee754_pow+0x990>
 80174e4:	151b      	asrs	r3, r3, #20
 80174e6:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 80174ea:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 80174ee:	fa4a f303 	asr.w	r3, sl, r3
 80174f2:	445b      	add	r3, fp
 80174f4:	f3c3 520a 	ubfx	r2, r3, #20, #11
 80174f8:	4e9c      	ldr	r6, [pc, #624]	; (801776c <__ieee754_pow+0xa04>)
 80174fa:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 80174fe:	4116      	asrs	r6, r2
 8017500:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8017504:	2000      	movs	r0, #0
 8017506:	ea23 0106 	bic.w	r1, r3, r6
 801750a:	f1c2 0214 	rsb	r2, r2, #20
 801750e:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8017512:	fa4a fa02 	asr.w	sl, sl, r2
 8017516:	f1bb 0f00 	cmp.w	fp, #0
 801751a:	4602      	mov	r2, r0
 801751c:	460b      	mov	r3, r1
 801751e:	4620      	mov	r0, r4
 8017520:	4629      	mov	r1, r5
 8017522:	bfb8      	it	lt
 8017524:	f1ca 0a00 	rsblt	sl, sl, #0
 8017528:	f7e8 fe86 	bl	8000238 <__aeabi_dsub>
 801752c:	e9cd 0100 	strd	r0, r1, [sp]
 8017530:	4642      	mov	r2, r8
 8017532:	464b      	mov	r3, r9
 8017534:	e9dd 0100 	ldrd	r0, r1, [sp]
 8017538:	f7e8 fe80 	bl	800023c <__adddf3>
 801753c:	2000      	movs	r0, #0
 801753e:	a378      	add	r3, pc, #480	; (adr r3, 8017720 <__ieee754_pow+0x9b8>)
 8017540:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017544:	4604      	mov	r4, r0
 8017546:	460d      	mov	r5, r1
 8017548:	f7e9 f82e 	bl	80005a8 <__aeabi_dmul>
 801754c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8017550:	4606      	mov	r6, r0
 8017552:	460f      	mov	r7, r1
 8017554:	4620      	mov	r0, r4
 8017556:	4629      	mov	r1, r5
 8017558:	f7e8 fe6e 	bl	8000238 <__aeabi_dsub>
 801755c:	4602      	mov	r2, r0
 801755e:	460b      	mov	r3, r1
 8017560:	4640      	mov	r0, r8
 8017562:	4649      	mov	r1, r9
 8017564:	f7e8 fe68 	bl	8000238 <__aeabi_dsub>
 8017568:	a36f      	add	r3, pc, #444	; (adr r3, 8017728 <__ieee754_pow+0x9c0>)
 801756a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801756e:	f7e9 f81b 	bl	80005a8 <__aeabi_dmul>
 8017572:	a36f      	add	r3, pc, #444	; (adr r3, 8017730 <__ieee754_pow+0x9c8>)
 8017574:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017578:	4680      	mov	r8, r0
 801757a:	4689      	mov	r9, r1
 801757c:	4620      	mov	r0, r4
 801757e:	4629      	mov	r1, r5
 8017580:	f7e9 f812 	bl	80005a8 <__aeabi_dmul>
 8017584:	4602      	mov	r2, r0
 8017586:	460b      	mov	r3, r1
 8017588:	4640      	mov	r0, r8
 801758a:	4649      	mov	r1, r9
 801758c:	f7e8 fe56 	bl	800023c <__adddf3>
 8017590:	4604      	mov	r4, r0
 8017592:	460d      	mov	r5, r1
 8017594:	4602      	mov	r2, r0
 8017596:	460b      	mov	r3, r1
 8017598:	4630      	mov	r0, r6
 801759a:	4639      	mov	r1, r7
 801759c:	f7e8 fe4e 	bl	800023c <__adddf3>
 80175a0:	4632      	mov	r2, r6
 80175a2:	463b      	mov	r3, r7
 80175a4:	4680      	mov	r8, r0
 80175a6:	4689      	mov	r9, r1
 80175a8:	f7e8 fe46 	bl	8000238 <__aeabi_dsub>
 80175ac:	4602      	mov	r2, r0
 80175ae:	460b      	mov	r3, r1
 80175b0:	4620      	mov	r0, r4
 80175b2:	4629      	mov	r1, r5
 80175b4:	f7e8 fe40 	bl	8000238 <__aeabi_dsub>
 80175b8:	4642      	mov	r2, r8
 80175ba:	4606      	mov	r6, r0
 80175bc:	460f      	mov	r7, r1
 80175be:	464b      	mov	r3, r9
 80175c0:	4640      	mov	r0, r8
 80175c2:	4649      	mov	r1, r9
 80175c4:	f7e8 fff0 	bl	80005a8 <__aeabi_dmul>
 80175c8:	a35b      	add	r3, pc, #364	; (adr r3, 8017738 <__ieee754_pow+0x9d0>)
 80175ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80175ce:	4604      	mov	r4, r0
 80175d0:	460d      	mov	r5, r1
 80175d2:	f7e8 ffe9 	bl	80005a8 <__aeabi_dmul>
 80175d6:	a35a      	add	r3, pc, #360	; (adr r3, 8017740 <__ieee754_pow+0x9d8>)
 80175d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80175dc:	f7e8 fe2c 	bl	8000238 <__aeabi_dsub>
 80175e0:	4622      	mov	r2, r4
 80175e2:	462b      	mov	r3, r5
 80175e4:	f7e8 ffe0 	bl	80005a8 <__aeabi_dmul>
 80175e8:	a357      	add	r3, pc, #348	; (adr r3, 8017748 <__ieee754_pow+0x9e0>)
 80175ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80175ee:	f7e8 fe25 	bl	800023c <__adddf3>
 80175f2:	4622      	mov	r2, r4
 80175f4:	462b      	mov	r3, r5
 80175f6:	f7e8 ffd7 	bl	80005a8 <__aeabi_dmul>
 80175fa:	a355      	add	r3, pc, #340	; (adr r3, 8017750 <__ieee754_pow+0x9e8>)
 80175fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017600:	f7e8 fe1a 	bl	8000238 <__aeabi_dsub>
 8017604:	4622      	mov	r2, r4
 8017606:	462b      	mov	r3, r5
 8017608:	f7e8 ffce 	bl	80005a8 <__aeabi_dmul>
 801760c:	a352      	add	r3, pc, #328	; (adr r3, 8017758 <__ieee754_pow+0x9f0>)
 801760e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017612:	f7e8 fe13 	bl	800023c <__adddf3>
 8017616:	4622      	mov	r2, r4
 8017618:	462b      	mov	r3, r5
 801761a:	f7e8 ffc5 	bl	80005a8 <__aeabi_dmul>
 801761e:	4602      	mov	r2, r0
 8017620:	460b      	mov	r3, r1
 8017622:	4640      	mov	r0, r8
 8017624:	4649      	mov	r1, r9
 8017626:	f7e8 fe07 	bl	8000238 <__aeabi_dsub>
 801762a:	4604      	mov	r4, r0
 801762c:	460d      	mov	r5, r1
 801762e:	4602      	mov	r2, r0
 8017630:	460b      	mov	r3, r1
 8017632:	4640      	mov	r0, r8
 8017634:	4649      	mov	r1, r9
 8017636:	f7e8 ffb7 	bl	80005a8 <__aeabi_dmul>
 801763a:	2200      	movs	r2, #0
 801763c:	e9cd 0100 	strd	r0, r1, [sp]
 8017640:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8017644:	4620      	mov	r0, r4
 8017646:	4629      	mov	r1, r5
 8017648:	f7e8 fdf6 	bl	8000238 <__aeabi_dsub>
 801764c:	4602      	mov	r2, r0
 801764e:	460b      	mov	r3, r1
 8017650:	e9dd 0100 	ldrd	r0, r1, [sp]
 8017654:	f7e9 f8d2 	bl	80007fc <__aeabi_ddiv>
 8017658:	4632      	mov	r2, r6
 801765a:	4604      	mov	r4, r0
 801765c:	460d      	mov	r5, r1
 801765e:	463b      	mov	r3, r7
 8017660:	4640      	mov	r0, r8
 8017662:	4649      	mov	r1, r9
 8017664:	f7e8 ffa0 	bl	80005a8 <__aeabi_dmul>
 8017668:	4632      	mov	r2, r6
 801766a:	463b      	mov	r3, r7
 801766c:	f7e8 fde6 	bl	800023c <__adddf3>
 8017670:	4602      	mov	r2, r0
 8017672:	460b      	mov	r3, r1
 8017674:	4620      	mov	r0, r4
 8017676:	4629      	mov	r1, r5
 8017678:	f7e8 fdde 	bl	8000238 <__aeabi_dsub>
 801767c:	4642      	mov	r2, r8
 801767e:	464b      	mov	r3, r9
 8017680:	f7e8 fdda 	bl	8000238 <__aeabi_dsub>
 8017684:	4602      	mov	r2, r0
 8017686:	460b      	mov	r3, r1
 8017688:	2000      	movs	r0, #0
 801768a:	4939      	ldr	r1, [pc, #228]	; (8017770 <__ieee754_pow+0xa08>)
 801768c:	f7e8 fdd4 	bl	8000238 <__aeabi_dsub>
 8017690:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 8017694:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8017698:	4602      	mov	r2, r0
 801769a:	460b      	mov	r3, r1
 801769c:	da2f      	bge.n	80176fe <__ieee754_pow+0x996>
 801769e:	4650      	mov	r0, sl
 80176a0:	ec43 2b10 	vmov	d0, r2, r3
 80176a4:	f000 f9c0 	bl	8017a28 <scalbn>
 80176a8:	ec51 0b10 	vmov	r0, r1, d0
 80176ac:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80176b0:	f7ff bbf1 	b.w	8016e96 <__ieee754_pow+0x12e>
 80176b4:	4b2f      	ldr	r3, [pc, #188]	; (8017774 <__ieee754_pow+0xa0c>)
 80176b6:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 80176ba:	429e      	cmp	r6, r3
 80176bc:	f77f af0c 	ble.w	80174d8 <__ieee754_pow+0x770>
 80176c0:	4b2d      	ldr	r3, [pc, #180]	; (8017778 <__ieee754_pow+0xa10>)
 80176c2:	440b      	add	r3, r1
 80176c4:	4303      	orrs	r3, r0
 80176c6:	d00b      	beq.n	80176e0 <__ieee754_pow+0x978>
 80176c8:	a325      	add	r3, pc, #148	; (adr r3, 8017760 <__ieee754_pow+0x9f8>)
 80176ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80176ce:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80176d2:	f7e8 ff69 	bl	80005a8 <__aeabi_dmul>
 80176d6:	a322      	add	r3, pc, #136	; (adr r3, 8017760 <__ieee754_pow+0x9f8>)
 80176d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80176dc:	f7ff bbdb 	b.w	8016e96 <__ieee754_pow+0x12e>
 80176e0:	4622      	mov	r2, r4
 80176e2:	462b      	mov	r3, r5
 80176e4:	f7e8 fda8 	bl	8000238 <__aeabi_dsub>
 80176e8:	4642      	mov	r2, r8
 80176ea:	464b      	mov	r3, r9
 80176ec:	f7e9 f9e2 	bl	8000ab4 <__aeabi_dcmpge>
 80176f0:	2800      	cmp	r0, #0
 80176f2:	f43f aef1 	beq.w	80174d8 <__ieee754_pow+0x770>
 80176f6:	e7e7      	b.n	80176c8 <__ieee754_pow+0x960>
 80176f8:	f04f 0a00 	mov.w	sl, #0
 80176fc:	e718      	b.n	8017530 <__ieee754_pow+0x7c8>
 80176fe:	4621      	mov	r1, r4
 8017700:	e7d4      	b.n	80176ac <__ieee754_pow+0x944>
 8017702:	2000      	movs	r0, #0
 8017704:	491a      	ldr	r1, [pc, #104]	; (8017770 <__ieee754_pow+0xa08>)
 8017706:	f7ff bb8f 	b.w	8016e28 <__ieee754_pow+0xc0>
 801770a:	e9dd 0100 	ldrd	r0, r1, [sp]
 801770e:	f7ff bb8b 	b.w	8016e28 <__ieee754_pow+0xc0>
 8017712:	4630      	mov	r0, r6
 8017714:	4639      	mov	r1, r7
 8017716:	f7ff bb87 	b.w	8016e28 <__ieee754_pow+0xc0>
 801771a:	4693      	mov	fp, r2
 801771c:	f7ff bb98 	b.w	8016e50 <__ieee754_pow+0xe8>
 8017720:	00000000 	.word	0x00000000
 8017724:	3fe62e43 	.word	0x3fe62e43
 8017728:	fefa39ef 	.word	0xfefa39ef
 801772c:	3fe62e42 	.word	0x3fe62e42
 8017730:	0ca86c39 	.word	0x0ca86c39
 8017734:	be205c61 	.word	0xbe205c61
 8017738:	72bea4d0 	.word	0x72bea4d0
 801773c:	3e663769 	.word	0x3e663769
 8017740:	c5d26bf1 	.word	0xc5d26bf1
 8017744:	3ebbbd41 	.word	0x3ebbbd41
 8017748:	af25de2c 	.word	0xaf25de2c
 801774c:	3f11566a 	.word	0x3f11566a
 8017750:	16bebd93 	.word	0x16bebd93
 8017754:	3f66c16c 	.word	0x3f66c16c
 8017758:	5555553e 	.word	0x5555553e
 801775c:	3fc55555 	.word	0x3fc55555
 8017760:	c2f8f359 	.word	0xc2f8f359
 8017764:	01a56e1f 	.word	0x01a56e1f
 8017768:	3fe00000 	.word	0x3fe00000
 801776c:	000fffff 	.word	0x000fffff
 8017770:	3ff00000 	.word	0x3ff00000
 8017774:	4090cbff 	.word	0x4090cbff
 8017778:	3f6f3400 	.word	0x3f6f3400
 801777c:	652b82fe 	.word	0x652b82fe
 8017780:	3c971547 	.word	0x3c971547

08017784 <__ieee754_sqrt>:
 8017784:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017788:	4955      	ldr	r1, [pc, #340]	; (80178e0 <__ieee754_sqrt+0x15c>)
 801778a:	ec55 4b10 	vmov	r4, r5, d0
 801778e:	43a9      	bics	r1, r5
 8017790:	462b      	mov	r3, r5
 8017792:	462a      	mov	r2, r5
 8017794:	d112      	bne.n	80177bc <__ieee754_sqrt+0x38>
 8017796:	ee10 2a10 	vmov	r2, s0
 801779a:	ee10 0a10 	vmov	r0, s0
 801779e:	4629      	mov	r1, r5
 80177a0:	f7e8 ff02 	bl	80005a8 <__aeabi_dmul>
 80177a4:	4602      	mov	r2, r0
 80177a6:	460b      	mov	r3, r1
 80177a8:	4620      	mov	r0, r4
 80177aa:	4629      	mov	r1, r5
 80177ac:	f7e8 fd46 	bl	800023c <__adddf3>
 80177b0:	4604      	mov	r4, r0
 80177b2:	460d      	mov	r5, r1
 80177b4:	ec45 4b10 	vmov	d0, r4, r5
 80177b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80177bc:	2d00      	cmp	r5, #0
 80177be:	ee10 0a10 	vmov	r0, s0
 80177c2:	4621      	mov	r1, r4
 80177c4:	dc0f      	bgt.n	80177e6 <__ieee754_sqrt+0x62>
 80177c6:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 80177ca:	4330      	orrs	r0, r6
 80177cc:	d0f2      	beq.n	80177b4 <__ieee754_sqrt+0x30>
 80177ce:	b155      	cbz	r5, 80177e6 <__ieee754_sqrt+0x62>
 80177d0:	ee10 2a10 	vmov	r2, s0
 80177d4:	4620      	mov	r0, r4
 80177d6:	4629      	mov	r1, r5
 80177d8:	f7e8 fd2e 	bl	8000238 <__aeabi_dsub>
 80177dc:	4602      	mov	r2, r0
 80177de:	460b      	mov	r3, r1
 80177e0:	f7e9 f80c 	bl	80007fc <__aeabi_ddiv>
 80177e4:	e7e4      	b.n	80177b0 <__ieee754_sqrt+0x2c>
 80177e6:	151b      	asrs	r3, r3, #20
 80177e8:	d073      	beq.n	80178d2 <__ieee754_sqrt+0x14e>
 80177ea:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80177ee:	07dd      	lsls	r5, r3, #31
 80177f0:	f3c2 0213 	ubfx	r2, r2, #0, #20
 80177f4:	bf48      	it	mi
 80177f6:	0fc8      	lsrmi	r0, r1, #31
 80177f8:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80177fc:	bf44      	itt	mi
 80177fe:	0049      	lslmi	r1, r1, #1
 8017800:	eb00 0242 	addmi.w	r2, r0, r2, lsl #1
 8017804:	2500      	movs	r5, #0
 8017806:	1058      	asrs	r0, r3, #1
 8017808:	0fcb      	lsrs	r3, r1, #31
 801780a:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 801780e:	0049      	lsls	r1, r1, #1
 8017810:	2316      	movs	r3, #22
 8017812:	462c      	mov	r4, r5
 8017814:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 8017818:	19a7      	adds	r7, r4, r6
 801781a:	4297      	cmp	r7, r2
 801781c:	bfde      	ittt	le
 801781e:	19bc      	addle	r4, r7, r6
 8017820:	1bd2      	suble	r2, r2, r7
 8017822:	19ad      	addle	r5, r5, r6
 8017824:	0fcf      	lsrs	r7, r1, #31
 8017826:	3b01      	subs	r3, #1
 8017828:	eb07 0242 	add.w	r2, r7, r2, lsl #1
 801782c:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8017830:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8017834:	d1f0      	bne.n	8017818 <__ieee754_sqrt+0x94>
 8017836:	f04f 0c20 	mov.w	ip, #32
 801783a:	469e      	mov	lr, r3
 801783c:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8017840:	42a2      	cmp	r2, r4
 8017842:	eb06 070e 	add.w	r7, r6, lr
 8017846:	dc02      	bgt.n	801784e <__ieee754_sqrt+0xca>
 8017848:	d112      	bne.n	8017870 <__ieee754_sqrt+0xec>
 801784a:	428f      	cmp	r7, r1
 801784c:	d810      	bhi.n	8017870 <__ieee754_sqrt+0xec>
 801784e:	2f00      	cmp	r7, #0
 8017850:	eb07 0e06 	add.w	lr, r7, r6
 8017854:	da42      	bge.n	80178dc <__ieee754_sqrt+0x158>
 8017856:	f1be 0f00 	cmp.w	lr, #0
 801785a:	db3f      	blt.n	80178dc <__ieee754_sqrt+0x158>
 801785c:	f104 0801 	add.w	r8, r4, #1
 8017860:	1b12      	subs	r2, r2, r4
 8017862:	428f      	cmp	r7, r1
 8017864:	bf88      	it	hi
 8017866:	f102 32ff 	addhi.w	r2, r2, #4294967295	; 0xffffffff
 801786a:	1bc9      	subs	r1, r1, r7
 801786c:	4433      	add	r3, r6
 801786e:	4644      	mov	r4, r8
 8017870:	0052      	lsls	r2, r2, #1
 8017872:	f1bc 0c01 	subs.w	ip, ip, #1
 8017876:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 801787a:	ea4f 0656 	mov.w	r6, r6, lsr #1
 801787e:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8017882:	d1dd      	bne.n	8017840 <__ieee754_sqrt+0xbc>
 8017884:	430a      	orrs	r2, r1
 8017886:	d006      	beq.n	8017896 <__ieee754_sqrt+0x112>
 8017888:	1c5c      	adds	r4, r3, #1
 801788a:	bf13      	iteet	ne
 801788c:	3301      	addne	r3, #1
 801788e:	3501      	addeq	r5, #1
 8017890:	4663      	moveq	r3, ip
 8017892:	f023 0301 	bicne.w	r3, r3, #1
 8017896:	106a      	asrs	r2, r5, #1
 8017898:	085b      	lsrs	r3, r3, #1
 801789a:	07e9      	lsls	r1, r5, #31
 801789c:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 80178a0:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 80178a4:	bf48      	it	mi
 80178a6:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 80178aa:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 80178ae:	461c      	mov	r4, r3
 80178b0:	e780      	b.n	80177b4 <__ieee754_sqrt+0x30>
 80178b2:	0aca      	lsrs	r2, r1, #11
 80178b4:	3815      	subs	r0, #21
 80178b6:	0549      	lsls	r1, r1, #21
 80178b8:	2a00      	cmp	r2, #0
 80178ba:	d0fa      	beq.n	80178b2 <__ieee754_sqrt+0x12e>
 80178bc:	02d6      	lsls	r6, r2, #11
 80178be:	d50a      	bpl.n	80178d6 <__ieee754_sqrt+0x152>
 80178c0:	f1c3 0420 	rsb	r4, r3, #32
 80178c4:	fa21 f404 	lsr.w	r4, r1, r4
 80178c8:	1e5d      	subs	r5, r3, #1
 80178ca:	4099      	lsls	r1, r3
 80178cc:	4322      	orrs	r2, r4
 80178ce:	1b43      	subs	r3, r0, r5
 80178d0:	e78b      	b.n	80177ea <__ieee754_sqrt+0x66>
 80178d2:	4618      	mov	r0, r3
 80178d4:	e7f0      	b.n	80178b8 <__ieee754_sqrt+0x134>
 80178d6:	0052      	lsls	r2, r2, #1
 80178d8:	3301      	adds	r3, #1
 80178da:	e7ef      	b.n	80178bc <__ieee754_sqrt+0x138>
 80178dc:	46a0      	mov	r8, r4
 80178de:	e7bf      	b.n	8017860 <__ieee754_sqrt+0xdc>
 80178e0:	7ff00000 	.word	0x7ff00000

080178e4 <fabs>:
 80178e4:	ec51 0b10 	vmov	r0, r1, d0
 80178e8:	ee10 2a10 	vmov	r2, s0
 80178ec:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80178f0:	ec43 2b10 	vmov	d0, r2, r3
 80178f4:	4770      	bx	lr

080178f6 <finite>:
 80178f6:	ee10 3a90 	vmov	r3, s1
 80178fa:	f043 4000 	orr.w	r0, r3, #2147483648	; 0x80000000
 80178fe:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8017902:	0fc0      	lsrs	r0, r0, #31
 8017904:	4770      	bx	lr

08017906 <matherr>:
 8017906:	2000      	movs	r0, #0
 8017908:	4770      	bx	lr
 801790a:	0000      	movs	r0, r0
 801790c:	0000      	movs	r0, r0
	...

08017910 <nan>:
 8017910:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8017918 <nan+0x8>
 8017914:	4770      	bx	lr
 8017916:	bf00      	nop
 8017918:	00000000 	.word	0x00000000
 801791c:	7ff80000 	.word	0x7ff80000

08017920 <rint>:
 8017920:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8017922:	ec51 0b10 	vmov	r0, r1, d0
 8017926:	f3c1 520a 	ubfx	r2, r1, #20, #11
 801792a:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 801792e:	2e13      	cmp	r6, #19
 8017930:	460b      	mov	r3, r1
 8017932:	ee10 4a10 	vmov	r4, s0
 8017936:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 801793a:	dc56      	bgt.n	80179ea <rint+0xca>
 801793c:	2e00      	cmp	r6, #0
 801793e:	da2b      	bge.n	8017998 <rint+0x78>
 8017940:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 8017944:	4302      	orrs	r2, r0
 8017946:	d023      	beq.n	8017990 <rint+0x70>
 8017948:	f3c1 0213 	ubfx	r2, r1, #0, #20
 801794c:	4302      	orrs	r2, r0
 801794e:	4254      	negs	r4, r2
 8017950:	4314      	orrs	r4, r2
 8017952:	0c4b      	lsrs	r3, r1, #17
 8017954:	0b24      	lsrs	r4, r4, #12
 8017956:	045b      	lsls	r3, r3, #17
 8017958:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 801795c:	ea44 0103 	orr.w	r1, r4, r3
 8017960:	460b      	mov	r3, r1
 8017962:	492f      	ldr	r1, [pc, #188]	; (8017a20 <rint+0x100>)
 8017964:	eb01 01c5 	add.w	r1, r1, r5, lsl #3
 8017968:	e9d1 6700 	ldrd	r6, r7, [r1]
 801796c:	4602      	mov	r2, r0
 801796e:	4639      	mov	r1, r7
 8017970:	4630      	mov	r0, r6
 8017972:	f7e8 fc63 	bl	800023c <__adddf3>
 8017976:	e9cd 0100 	strd	r0, r1, [sp]
 801797a:	463b      	mov	r3, r7
 801797c:	4632      	mov	r2, r6
 801797e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8017982:	f7e8 fc59 	bl	8000238 <__aeabi_dsub>
 8017986:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801798a:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 801798e:	4639      	mov	r1, r7
 8017990:	ec41 0b10 	vmov	d0, r0, r1
 8017994:	b003      	add	sp, #12
 8017996:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017998:	4a22      	ldr	r2, [pc, #136]	; (8017a24 <rint+0x104>)
 801799a:	4132      	asrs	r2, r6
 801799c:	ea01 0702 	and.w	r7, r1, r2
 80179a0:	4307      	orrs	r7, r0
 80179a2:	d0f5      	beq.n	8017990 <rint+0x70>
 80179a4:	0852      	lsrs	r2, r2, #1
 80179a6:	4011      	ands	r1, r2
 80179a8:	430c      	orrs	r4, r1
 80179aa:	d00b      	beq.n	80179c4 <rint+0xa4>
 80179ac:	ea23 0202 	bic.w	r2, r3, r2
 80179b0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80179b4:	2e13      	cmp	r6, #19
 80179b6:	fa43 f306 	asr.w	r3, r3, r6
 80179ba:	bf0c      	ite	eq
 80179bc:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 80179c0:	2400      	movne	r4, #0
 80179c2:	4313      	orrs	r3, r2
 80179c4:	4916      	ldr	r1, [pc, #88]	; (8017a20 <rint+0x100>)
 80179c6:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 80179ca:	4622      	mov	r2, r4
 80179cc:	e9d5 4500 	ldrd	r4, r5, [r5]
 80179d0:	4620      	mov	r0, r4
 80179d2:	4629      	mov	r1, r5
 80179d4:	f7e8 fc32 	bl	800023c <__adddf3>
 80179d8:	e9cd 0100 	strd	r0, r1, [sp]
 80179dc:	4622      	mov	r2, r4
 80179de:	462b      	mov	r3, r5
 80179e0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80179e4:	f7e8 fc28 	bl	8000238 <__aeabi_dsub>
 80179e8:	e7d2      	b.n	8017990 <rint+0x70>
 80179ea:	2e33      	cmp	r6, #51	; 0x33
 80179ec:	dd07      	ble.n	80179fe <rint+0xde>
 80179ee:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 80179f2:	d1cd      	bne.n	8017990 <rint+0x70>
 80179f4:	ee10 2a10 	vmov	r2, s0
 80179f8:	f7e8 fc20 	bl	800023c <__adddf3>
 80179fc:	e7c8      	b.n	8017990 <rint+0x70>
 80179fe:	f2a2 4613 	subw	r6, r2, #1043	; 0x413
 8017a02:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8017a06:	40f2      	lsrs	r2, r6
 8017a08:	4210      	tst	r0, r2
 8017a0a:	d0c1      	beq.n	8017990 <rint+0x70>
 8017a0c:	0852      	lsrs	r2, r2, #1
 8017a0e:	4210      	tst	r0, r2
 8017a10:	bf1f      	itttt	ne
 8017a12:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 8017a16:	ea20 0202 	bicne.w	r2, r0, r2
 8017a1a:	4134      	asrne	r4, r6
 8017a1c:	4314      	orrne	r4, r2
 8017a1e:	e7d1      	b.n	80179c4 <rint+0xa4>
 8017a20:	08019f70 	.word	0x08019f70
 8017a24:	000fffff 	.word	0x000fffff

08017a28 <scalbn>:
 8017a28:	b570      	push	{r4, r5, r6, lr}
 8017a2a:	ec55 4b10 	vmov	r4, r5, d0
 8017a2e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8017a32:	4606      	mov	r6, r0
 8017a34:	462b      	mov	r3, r5
 8017a36:	b9aa      	cbnz	r2, 8017a64 <scalbn+0x3c>
 8017a38:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8017a3c:	4323      	orrs	r3, r4
 8017a3e:	d03b      	beq.n	8017ab8 <scalbn+0x90>
 8017a40:	4b31      	ldr	r3, [pc, #196]	; (8017b08 <scalbn+0xe0>)
 8017a42:	4629      	mov	r1, r5
 8017a44:	2200      	movs	r2, #0
 8017a46:	ee10 0a10 	vmov	r0, s0
 8017a4a:	f7e8 fdad 	bl	80005a8 <__aeabi_dmul>
 8017a4e:	4b2f      	ldr	r3, [pc, #188]	; (8017b0c <scalbn+0xe4>)
 8017a50:	429e      	cmp	r6, r3
 8017a52:	4604      	mov	r4, r0
 8017a54:	460d      	mov	r5, r1
 8017a56:	da12      	bge.n	8017a7e <scalbn+0x56>
 8017a58:	a327      	add	r3, pc, #156	; (adr r3, 8017af8 <scalbn+0xd0>)
 8017a5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017a5e:	f7e8 fda3 	bl	80005a8 <__aeabi_dmul>
 8017a62:	e009      	b.n	8017a78 <scalbn+0x50>
 8017a64:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8017a68:	428a      	cmp	r2, r1
 8017a6a:	d10c      	bne.n	8017a86 <scalbn+0x5e>
 8017a6c:	ee10 2a10 	vmov	r2, s0
 8017a70:	4620      	mov	r0, r4
 8017a72:	4629      	mov	r1, r5
 8017a74:	f7e8 fbe2 	bl	800023c <__adddf3>
 8017a78:	4604      	mov	r4, r0
 8017a7a:	460d      	mov	r5, r1
 8017a7c:	e01c      	b.n	8017ab8 <scalbn+0x90>
 8017a7e:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8017a82:	460b      	mov	r3, r1
 8017a84:	3a36      	subs	r2, #54	; 0x36
 8017a86:	4432      	add	r2, r6
 8017a88:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8017a8c:	428a      	cmp	r2, r1
 8017a8e:	dd0b      	ble.n	8017aa8 <scalbn+0x80>
 8017a90:	ec45 4b11 	vmov	d1, r4, r5
 8017a94:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 8017b00 <scalbn+0xd8>
 8017a98:	f000 f83c 	bl	8017b14 <copysign>
 8017a9c:	a318      	add	r3, pc, #96	; (adr r3, 8017b00 <scalbn+0xd8>)
 8017a9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017aa2:	ec51 0b10 	vmov	r0, r1, d0
 8017aa6:	e7da      	b.n	8017a5e <scalbn+0x36>
 8017aa8:	2a00      	cmp	r2, #0
 8017aaa:	dd08      	ble.n	8017abe <scalbn+0x96>
 8017aac:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8017ab0:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8017ab4:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8017ab8:	ec45 4b10 	vmov	d0, r4, r5
 8017abc:	bd70      	pop	{r4, r5, r6, pc}
 8017abe:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8017ac2:	da0d      	bge.n	8017ae0 <scalbn+0xb8>
 8017ac4:	f24c 3350 	movw	r3, #50000	; 0xc350
 8017ac8:	429e      	cmp	r6, r3
 8017aca:	ec45 4b11 	vmov	d1, r4, r5
 8017ace:	dce1      	bgt.n	8017a94 <scalbn+0x6c>
 8017ad0:	ed9f 0b09 	vldr	d0, [pc, #36]	; 8017af8 <scalbn+0xd0>
 8017ad4:	f000 f81e 	bl	8017b14 <copysign>
 8017ad8:	a307      	add	r3, pc, #28	; (adr r3, 8017af8 <scalbn+0xd0>)
 8017ada:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017ade:	e7e0      	b.n	8017aa2 <scalbn+0x7a>
 8017ae0:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8017ae4:	3236      	adds	r2, #54	; 0x36
 8017ae6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8017aea:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8017aee:	4620      	mov	r0, r4
 8017af0:	4629      	mov	r1, r5
 8017af2:	2200      	movs	r2, #0
 8017af4:	4b06      	ldr	r3, [pc, #24]	; (8017b10 <scalbn+0xe8>)
 8017af6:	e7b2      	b.n	8017a5e <scalbn+0x36>
 8017af8:	c2f8f359 	.word	0xc2f8f359
 8017afc:	01a56e1f 	.word	0x01a56e1f
 8017b00:	8800759c 	.word	0x8800759c
 8017b04:	7e37e43c 	.word	0x7e37e43c
 8017b08:	43500000 	.word	0x43500000
 8017b0c:	ffff3cb0 	.word	0xffff3cb0
 8017b10:	3c900000 	.word	0x3c900000

08017b14 <copysign>:
 8017b14:	ec51 0b10 	vmov	r0, r1, d0
 8017b18:	ee11 0a90 	vmov	r0, s3
 8017b1c:	ee10 2a10 	vmov	r2, s0
 8017b20:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8017b24:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8017b28:	ea41 0300 	orr.w	r3, r1, r0
 8017b2c:	ec43 2b10 	vmov	d0, r2, r3
 8017b30:	4770      	bx	lr
	...

08017b34 <_init>:
 8017b34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017b36:	bf00      	nop
 8017b38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8017b3a:	bc08      	pop	{r3}
 8017b3c:	469e      	mov	lr, r3
 8017b3e:	4770      	bx	lr

08017b40 <_fini>:
 8017b40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017b42:	bf00      	nop
 8017b44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8017b46:	bc08      	pop	{r3}
 8017b48:	469e      	mov	lr, r3
 8017b4a:	4770      	bx	lr
